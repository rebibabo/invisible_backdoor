<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21080.c" pos:tabs="8"><function pos:start="1:1" pos:end="102:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:13">bdrv_open</name><parameter_list pos:start="1:14" pos:end="2:31">(<parameter pos:start="1:15" pos:end="1:34"><decl pos:start="1:15" pos:end="1:34"><type pos:start="1:15" pos:end="1:34"><name pos:start="1:15" pos:end="1:30">BlockDriverState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:34">bs</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:56"><decl pos:start="1:37" pos:end="1:56"><type pos:start="1:37" pos:end="1:56"><specifier pos:start="1:37" pos:end="1:41">const</specifier> <name pos:start="1:43" pos:end="1:46">char</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:56">filename</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>,
              <parameter pos:start="2:15" pos:end="2:30"><decl pos:start="2:15" pos:end="2:30"><type pos:start="2:15" pos:end="2:30"><name pos:start="2:15" pos:end="2:25">BlockDriver</name> <modifier pos:start="2:27" pos:end="2:27">*</modifier></type><name pos:start="2:28" pos:end="2:30">drv</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="102:1">{<block_content pos:start="4:5" pos:end="101:15">
    <decl_stmt pos:start="4:5" pos:end="4:12"><decl pos:start="4:5" pos:end="4:11"><type pos:start="4:5" pos:end="4:7"><name pos:start="4:5" pos:end="4:7">int</name></type> <name pos:start="4:9" pos:end="4:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">probed</name> <init pos:start="5:16" pos:end="5:18">= <expr pos:start="5:18" pos:end="5:18"><literal type="number" pos:start="5:18" pos:end="5:18">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt pos:start="6:5" pos:end="50:5"><if pos:start="6:5" pos:end="50:5">if <condition pos:start="6:8" pos:end="6:32">(<expr pos:start="6:9" pos:end="6:31"><name pos:start="6:9" pos:end="6:13">flags</name> <operator pos:start="6:15" pos:end="6:15">&amp;</operator> <name pos:start="6:17" pos:end="6:31">BDRV_O_SNAPSHOT</name></expr>)</condition> <block pos:start="6:34" pos:end="50:5">{<block_content pos:start="7:9" pos:end="49:29">
        <decl_stmt pos:start="7:9" pos:end="7:30"><decl pos:start="7:9" pos:end="7:29"><type pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:24">BlockDriverState</name> <modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:29">bs1</name></decl>;</decl_stmt>
        <decl_stmt pos:start="8:9" pos:end="8:27"><decl pos:start="8:9" pos:end="8:26"><type pos:start="8:9" pos:end="8:15"><name pos:start="8:9" pos:end="8:15">int64_t</name></type> <name pos:start="8:17" pos:end="8:26">total_size</name></decl>;</decl_stmt>
        <decl_stmt pos:start="9:9" pos:end="9:28"><decl pos:start="9:9" pos:end="9:27"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:23">is_protocol</name> <init pos:start="9:25" pos:end="9:27">= <expr pos:start="9:27" pos:end="9:27"><literal type="number" pos:start="9:27" pos:end="9:27">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="10:9" pos:end="10:32"><decl pos:start="10:9" pos:end="10:31"><type pos:start="10:9" pos:end="10:21"><name pos:start="10:9" pos:end="10:19">BlockDriver</name> <modifier pos:start="10:21" pos:end="10:21">*</modifier></type><name pos:start="10:22" pos:end="10:31">bdrv_qcow2</name></decl>;</decl_stmt>
        <decl_stmt pos:start="11:9" pos:end="11:37"><decl pos:start="11:9" pos:end="11:36"><type pos:start="11:9" pos:end="11:29"><name pos:start="11:9" pos:end="11:27">QEMUOptionParameter</name> <modifier pos:start="11:29" pos:end="11:29">*</modifier></type><name pos:start="11:30" pos:end="11:36">options</name></decl>;</decl_stmt>
        <decl_stmt pos:start="12:9" pos:end="12:36"><decl pos:start="12:9" pos:end="12:35"><type pos:start="12:9" pos:end="12:12"><name pos:start="12:9" pos:end="12:12">char</name></type> <name pos:start="12:14" pos:end="12:35"><name pos:start="12:14" pos:end="12:25">tmp_filename</name><index pos:start="12:26" pos:end="12:35">[<expr pos:start="12:27" pos:end="12:34"><name pos:start="12:27" pos:end="12:34">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="13:9" pos:end="13:40"><decl pos:start="13:9" pos:end="13:39"><type pos:start="13:9" pos:end="13:12"><name pos:start="13:9" pos:end="13:12">char</name></type> <name pos:start="13:14" pos:end="13:39"><name pos:start="13:14" pos:end="13:29">backing_filename</name><index pos:start="13:30" pos:end="13:39">[<expr pos:start="13:31" pos:end="13:38"><name pos:start="13:31" pos:end="13:38">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
        <comment type="block" pos:start="14:9" pos:end="15:52">/* if snapshot, we create a temporary backing file and open it
           instead of opening 'filename' directly */</comment>
        <comment type="block" pos:start="16:9" pos:end="16:48">/* if there is a backing file, use it */</comment>
        <expr_stmt pos:start="17:9" pos:end="17:27"><expr pos:start="17:9" pos:end="17:26"><name pos:start="17:9" pos:end="17:11">bs1</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:26"><name pos:start="17:15" pos:end="17:22">bdrv_new</name><argument_list pos:start="17:23" pos:end="17:26">(<argument pos:start="17:24" pos:end="17:25"><expr pos:start="17:24" pos:end="17:25"><literal type="string" pos:start="17:24" pos:end="17:25">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="18:9" pos:end="18:47"><expr pos:start="18:9" pos:end="18:46"><name pos:start="18:9" pos:end="18:11">ret</name> <operator pos:start="18:13" pos:end="18:13">=</operator> <call pos:start="18:15" pos:end="18:46"><name pos:start="18:15" pos:end="18:23">bdrv_open</name><argument_list pos:start="18:24" pos:end="18:46">(<argument pos:start="18:25" pos:end="18:27"><expr pos:start="18:25" pos:end="18:27"><name pos:start="18:25" pos:end="18:27">bs1</name></expr></argument>, <argument pos:start="18:30" pos:end="18:37"><expr pos:start="18:30" pos:end="18:37"><name pos:start="18:30" pos:end="18:37">filename</name></expr></argument>, <argument pos:start="18:40" pos:end="18:40"><expr pos:start="18:40" pos:end="18:40"><literal type="number" pos:start="18:40" pos:end="18:40">0</literal></expr></argument>, <argument pos:start="18:43" pos:end="18:45"><expr pos:start="18:43" pos:end="18:45"><name pos:start="18:43" pos:end="18:45">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="19:9" pos:end="22:9"><if pos:start="19:9" pos:end="22:9">if <condition pos:start="19:12" pos:end="19:20">(<expr pos:start="19:13" pos:end="19:19"><name pos:start="19:13" pos:end="19:15">ret</name> <operator pos:start="19:17" pos:end="19:17">&lt;</operator> <literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr>)</condition> <block pos:start="19:22" pos:end="22:9">{<block_content pos:start="20:13" pos:end="21:23">
            <expr_stmt pos:start="20:13" pos:end="20:29"><expr pos:start="20:13" pos:end="20:28"><call pos:start="20:13" pos:end="20:28"><name pos:start="20:13" pos:end="20:23">bdrv_delete</name><argument_list pos:start="20:24" pos:end="20:28">(<argument pos:start="20:25" pos:end="20:27"><expr pos:start="20:25" pos:end="20:27"><name pos:start="20:25" pos:end="20:27">bs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="21:13" pos:end="21:23">return <expr pos:start="21:20" pos:end="21:22"><name pos:start="21:20" pos:end="21:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:60"><expr pos:start="23:9" pos:end="23:59"><name pos:start="23:9" pos:end="23:18">total_size</name> <operator pos:start="23:20" pos:end="23:20">=</operator> <call pos:start="23:22" pos:end="23:40"><name pos:start="23:22" pos:end="23:35">bdrv_getlength</name><argument_list pos:start="23:36" pos:end="23:40">(<argument pos:start="23:37" pos:end="23:39"><expr pos:start="23:37" pos:end="23:39"><name pos:start="23:37" pos:end="23:39">bs1</name></expr></argument>)</argument_list></call> <operator pos:start="23:42" pos:end="23:42">&amp;</operator> <name pos:start="23:44" pos:end="23:59">BDRV_SECTOR_MASK</name></expr>;</expr_stmt>
        <if_stmt pos:start="24:9" pos:end="25:28"><if pos:start="24:9" pos:end="25:28">if <condition pos:start="24:12" pos:end="24:48">(<expr pos:start="24:13" pos:end="24:47"><name pos:start="24:13" pos:end="24:20"><name pos:start="24:13" pos:end="24:15">bs1</name><operator pos:start="24:16" pos:end="24:17">-&gt;</operator><name pos:start="24:18" pos:end="24:20">drv</name></name> <operator pos:start="24:22" pos:end="24:23">&amp;&amp;</operator> <name pos:start="24:25" pos:end="24:47"><name pos:start="24:25" pos:end="24:27">bs1</name><operator pos:start="24:28" pos:end="24:29">-&gt;</operator><name pos:start="24:30" pos:end="24:32">drv</name><operator pos:start="24:33" pos:end="24:34">-&gt;</operator><name pos:start="24:35" pos:end="24:47">protocol_name</name></name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:28"><block_content pos:start="25:13" pos:end="25:28">
            <expr_stmt pos:start="25:13" pos:end="25:28"><expr pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:23">is_protocol</name> <operator pos:start="25:25" pos:end="25:25">=</operator> <literal type="number" pos:start="25:27" pos:end="25:27">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:25"><expr pos:start="26:9" pos:end="26:24"><call pos:start="26:9" pos:end="26:24"><name pos:start="26:9" pos:end="26:19">bdrv_delete</name><argument_list pos:start="26:20" pos:end="26:24">(<argument pos:start="26:21" pos:end="26:23"><expr pos:start="26:21" pos:end="26:23"><name pos:start="26:21" pos:end="26:23">bs1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:61"><expr pos:start="27:9" pos:end="27:60"><call pos:start="27:9" pos:end="27:60"><name pos:start="27:9" pos:end="27:24">get_tmp_filename</name><argument_list pos:start="27:25" pos:end="27:60">(<argument pos:start="27:26" pos:end="27:37"><expr pos:start="27:26" pos:end="27:37"><name pos:start="27:26" pos:end="27:37">tmp_filename</name></expr></argument>, <argument pos:start="27:40" pos:end="27:59"><expr pos:start="27:40" pos:end="27:59"><sizeof pos:start="27:40" pos:end="27:59">sizeof<argument_list pos:start="27:46" pos:end="27:59">(<argument pos:start="27:47" pos:end="27:58"><expr pos:start="27:47" pos:end="27:58"><name pos:start="27:47" pos:end="27:58">tmp_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="28:9" pos:end="28:52">/* Real path is meaningless for protocols */</comment>
        <if_stmt pos:start="29:9" pos:end="33:26"><if pos:start="29:9" pos:end="31:37">if <condition pos:start="29:12" pos:end="29:24">(<expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:23">is_protocol</name></expr>)</condition><block type="pseudo" pos:start="30:13" pos:end="31:37"><block_content pos:start="30:13" pos:end="31:37">
            <expr_stmt pos:start="30:13" pos:end="31:37"><expr pos:start="30:13" pos:end="31:36"><call pos:start="30:13" pos:end="31:36"><name pos:start="30:13" pos:end="30:20">snprintf</name><argument_list pos:start="30:21" pos:end="31:36">(<argument pos:start="30:22" pos:end="30:37"><expr pos:start="30:22" pos:end="30:37"><name pos:start="30:22" pos:end="30:37">backing_filename</name></expr></argument>, <argument pos:start="30:40" pos:end="30:63"><expr pos:start="30:40" pos:end="30:63"><sizeof pos:start="30:40" pos:end="30:63">sizeof<argument_list pos:start="30:46" pos:end="30:63">(<argument pos:start="30:47" pos:end="30:62"><expr pos:start="30:47" pos:end="30:62"><name pos:start="30:47" pos:end="30:62">backing_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                     <argument pos:start="31:22" pos:end="31:25"><expr pos:start="31:22" pos:end="31:25"><literal type="string" pos:start="31:22" pos:end="31:25">"%s"</literal></expr></argument>, <argument pos:start="31:28" pos:end="31:35"><expr pos:start="31:28" pos:end="31:35"><name pos:start="31:28" pos:end="31:35">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif" pos:start="32:9" pos:end="33:26">else if <condition pos:start="32:17" pos:end="32:55">(<expr pos:start="32:18" pos:end="32:54"><operator pos:start="32:18" pos:end="32:18">!</operator><call pos:start="32:19" pos:end="32:54"><name pos:start="32:19" pos:end="32:26">realpath</name><argument_list pos:start="32:27" pos:end="32:54">(<argument pos:start="32:28" pos:end="32:35"><expr pos:start="32:28" pos:end="32:35"><name pos:start="32:28" pos:end="32:35">filename</name></expr></argument>, <argument pos:start="32:38" pos:end="32:53"><expr pos:start="32:38" pos:end="32:53"><name pos:start="32:38" pos:end="32:53">backing_filename</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:26"><block_content pos:start="33:13" pos:end="33:26">
            <return pos:start="33:13" pos:end="33:26">return <expr pos:start="33:20" pos:end="33:25"><operator pos:start="33:20" pos:end="33:20">-</operator><name pos:start="33:21" pos:end="33:25">errno</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="34:9" pos:end="34:47"><expr pos:start="34:9" pos:end="34:46"><name pos:start="34:9" pos:end="34:18">bdrv_qcow2</name> <operator pos:start="34:20" pos:end="34:20">=</operator> <call pos:start="34:22" pos:end="34:46"><name pos:start="34:22" pos:end="34:37">bdrv_find_format</name><argument_list pos:start="34:38" pos:end="34:46">(<argument pos:start="34:39" pos:end="34:45"><expr pos:start="34:39" pos:end="34:45"><literal type="string" pos:start="34:39" pos:end="34:45">"qcow2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="35:9" pos:end="35:80"><expr pos:start="35:9" pos:end="35:79"><name pos:start="35:9" pos:end="35:15">options</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:79"><name pos:start="35:19" pos:end="35:41">parse_option_parameters</name><argument_list pos:start="35:42" pos:end="35:79">(<argument pos:start="35:43" pos:end="35:44"><expr pos:start="35:43" pos:end="35:44"><literal type="string" pos:start="35:43" pos:end="35:44">""</literal></expr></argument>, <argument pos:start="35:47" pos:end="35:72"><expr pos:start="35:47" pos:end="35:72"><name pos:start="35:47" pos:end="35:72"><name pos:start="35:47" pos:end="35:56">bdrv_qcow2</name><operator pos:start="35:57" pos:end="35:58">-&gt;</operator><name pos:start="35:59" pos:end="35:72">create_options</name></name></expr></argument>, <argument pos:start="35:75" pos:end="35:78"><expr pos:start="35:75" pos:end="35:78"><name pos:start="35:75" pos:end="35:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="36:9" pos:end="36:70"><expr pos:start="36:9" pos:end="36:69"><call pos:start="36:9" pos:end="36:69"><name pos:start="36:9" pos:end="36:32">set_option_parameter_int</name><argument_list pos:start="36:33" pos:end="36:69">(<argument pos:start="36:34" pos:end="36:40"><expr pos:start="36:34" pos:end="36:40"><name pos:start="36:34" pos:end="36:40">options</name></expr></argument>, <argument pos:start="36:43" pos:end="36:56"><expr pos:start="36:43" pos:end="36:56"><name pos:start="36:43" pos:end="36:56">BLOCK_OPT_SIZE</name></expr></argument>, <argument pos:start="36:59" pos:end="36:68"><expr pos:start="36:59" pos:end="36:68"><name pos:start="36:59" pos:end="36:68">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="37:9" pos:end="37:80"><expr pos:start="37:9" pos:end="37:79"><call pos:start="37:9" pos:end="37:79"><name pos:start="37:9" pos:end="37:28">set_option_parameter</name><argument_list pos:start="37:29" pos:end="37:79">(<argument pos:start="37:30" pos:end="37:36"><expr pos:start="37:30" pos:end="37:36"><name pos:start="37:30" pos:end="37:36">options</name></expr></argument>, <argument pos:start="37:39" pos:end="37:60"><expr pos:start="37:39" pos:end="37:60"><name pos:start="37:39" pos:end="37:60">BLOCK_OPT_BACKING_FILE</name></expr></argument>, <argument pos:start="37:63" pos:end="37:78"><expr pos:start="37:63" pos:end="37:78"><name pos:start="37:63" pos:end="37:78">backing_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="38:9" pos:end="41:9"><if pos:start="38:9" pos:end="41:9">if <condition pos:start="38:12" pos:end="38:16">(<expr pos:start="38:13" pos:end="38:15"><name pos:start="38:13" pos:end="38:15">drv</name></expr>)</condition> <block pos:start="38:18" pos:end="41:9">{<block_content pos:start="39:13" pos:end="40:34">
            <expr_stmt pos:start="39:13" pos:end="40:34"><expr pos:start="39:13" pos:end="40:33"><call pos:start="39:13" pos:end="40:33"><name pos:start="39:13" pos:end="39:32">set_option_parameter</name><argument_list pos:start="39:33" pos:end="40:33">(<argument pos:start="39:34" pos:end="39:40"><expr pos:start="39:34" pos:end="39:40"><name pos:start="39:34" pos:end="39:40">options</name></expr></argument>, <argument pos:start="39:43" pos:end="39:63"><expr pos:start="39:43" pos:end="39:63"><name pos:start="39:43" pos:end="39:63">BLOCK_OPT_BACKING_FMT</name></expr></argument>,
                <argument pos:start="40:17" pos:end="40:32"><expr pos:start="40:17" pos:end="40:32"><name pos:start="40:17" pos:end="40:32"><name pos:start="40:17" pos:end="40:19">drv</name><operator pos:start="40:20" pos:end="40:21">-&gt;</operator><name pos:start="40:22" pos:end="40:32">format_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="42:9" pos:end="42:61"><expr pos:start="42:9" pos:end="42:60"><name pos:start="42:9" pos:end="42:11">ret</name> <operator pos:start="42:13" pos:end="42:13">=</operator> <call pos:start="42:15" pos:end="42:60"><name pos:start="42:15" pos:end="42:25">bdrv_create</name><argument_list pos:start="42:26" pos:end="42:60">(<argument pos:start="42:27" pos:end="42:36"><expr pos:start="42:27" pos:end="42:36"><name pos:start="42:27" pos:end="42:36">bdrv_qcow2</name></expr></argument>, <argument pos:start="42:39" pos:end="42:50"><expr pos:start="42:39" pos:end="42:50"><name pos:start="42:39" pos:end="42:50">tmp_filename</name></expr></argument>, <argument pos:start="42:53" pos:end="42:59"><expr pos:start="42:53" pos:end="42:59"><name pos:start="42:53" pos:end="42:59">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="43:9" pos:end="43:40"><expr pos:start="43:9" pos:end="43:39"><call pos:start="43:9" pos:end="43:39"><name pos:start="43:9" pos:end="43:30">free_option_parameters</name><argument_list pos:start="43:31" pos:end="43:39">(<argument pos:start="43:32" pos:end="43:38"><expr pos:start="43:32" pos:end="43:38"><name pos:start="43:32" pos:end="43:38">options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="44:9" pos:end="46:9"><if pos:start="44:9" pos:end="46:9">if <condition pos:start="44:12" pos:end="44:20">(<expr pos:start="44:13" pos:end="44:19"><name pos:start="44:13" pos:end="44:15">ret</name> <operator pos:start="44:17" pos:end="44:17">&lt;</operator> <literal type="number" pos:start="44:19" pos:end="44:19">0</literal></expr>)</condition> <block pos:start="44:22" pos:end="46:9">{<block_content pos:start="45:13" pos:end="45:23">
            <return pos:start="45:13" pos:end="45:23">return <expr pos:start="45:20" pos:end="45:22"><name pos:start="45:20" pos:end="45:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="47:9" pos:end="47:32"><expr pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:16">filename</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:31">tmp_filename</name></expr>;</expr_stmt>
        <expr_stmt pos:start="48:9" pos:end="48:25"><expr pos:start="48:9" pos:end="48:24"><name pos:start="48:9" pos:end="48:11">drv</name> <operator pos:start="48:13" pos:end="48:13">=</operator> <name pos:start="48:15" pos:end="48:24">bdrv_qcow2</name></expr>;</expr_stmt>
        <expr_stmt pos:start="49:9" pos:end="49:29"><expr pos:start="49:9" pos:end="49:28"><name pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:10">bs</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:24">is_temporary</name></name> <operator pos:start="49:26" pos:end="49:26">=</operator> <literal type="number" pos:start="49:28" pos:end="49:28">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="51:5" pos:end="51:44">/* Find the right image format driver */</comment>
    <if_stmt pos:start="52:5" pos:end="55:5"><if pos:start="52:5" pos:end="55:5">if <condition pos:start="52:8" pos:end="52:13">(<expr pos:start="52:9" pos:end="52:12"><operator pos:start="52:9" pos:end="52:9">!</operator><name pos:start="52:10" pos:end="52:12">drv</name></expr>)</condition> <block pos:start="52:15" pos:end="55:5">{<block_content pos:start="53:9" pos:end="54:19">
        <expr_stmt pos:start="53:9" pos:end="53:42"><expr pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:11">drv</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:41"><name pos:start="53:15" pos:end="53:31">find_image_format</name><argument_list pos:start="53:32" pos:end="53:41">(<argument pos:start="53:33" pos:end="53:40"><expr pos:start="53:33" pos:end="53:40"><name pos:start="53:33" pos:end="53:40">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="54:9" pos:end="54:19"><expr pos:start="54:9" pos:end="54:18"><name pos:start="54:9" pos:end="54:14">probed</name> <operator pos:start="54:16" pos:end="54:16">=</operator> <literal type="number" pos:start="54:18" pos:end="54:18">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="56:5" pos:end="59:5"><if pos:start="56:5" pos:end="59:5">if <condition pos:start="56:8" pos:end="56:13">(<expr pos:start="56:9" pos:end="56:12"><operator pos:start="56:9" pos:end="56:9">!</operator><name pos:start="56:10" pos:end="56:12">drv</name></expr>)</condition> <block pos:start="56:15" pos:end="59:5">{<block_content pos:start="57:9" pos:end="58:29">
        <expr_stmt pos:start="57:9" pos:end="57:22"><expr pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <operator pos:start="57:15" pos:end="57:15">-</operator><name pos:start="57:16" pos:end="57:21">ENOENT</name></expr>;</expr_stmt>
        <goto pos:start="58:9" pos:end="58:29">goto <name pos:start="58:14" pos:end="58:28">unlink_and_fail</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="60:5" pos:end="60:24">/* Open the image */</comment>
    <expr_stmt pos:start="61:5" pos:end="61:53"><expr pos:start="61:5" pos:end="61:52"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:52"><name pos:start="61:11" pos:end="61:26">bdrv_open_common</name><argument_list pos:start="61:27" pos:end="61:52">(<argument pos:start="61:28" pos:end="61:29"><expr pos:start="61:28" pos:end="61:29"><name pos:start="61:28" pos:end="61:29">bs</name></expr></argument>, <argument pos:start="61:32" pos:end="61:39"><expr pos:start="61:32" pos:end="61:39"><name pos:start="61:32" pos:end="61:39">filename</name></expr></argument>, <argument pos:start="61:42" pos:end="61:46"><expr pos:start="61:42" pos:end="61:46"><name pos:start="61:42" pos:end="61:46">flags</name></expr></argument>, <argument pos:start="61:49" pos:end="61:51"><expr pos:start="61:49" pos:end="61:51"><name pos:start="61:49" pos:end="61:51">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="62:5" pos:end="64:5"><if pos:start="62:5" pos:end="64:5">if <condition pos:start="62:8" pos:end="62:16">(<expr pos:start="62:9" pos:end="62:15"><name pos:start="62:9" pos:end="62:11">ret</name> <operator pos:start="62:13" pos:end="62:13">&lt;</operator> <literal type="number" pos:start="62:15" pos:end="62:15">0</literal></expr>)</condition> <block pos:start="62:18" pos:end="64:5">{<block_content pos:start="63:9" pos:end="63:29">
        <goto pos:start="63:9" pos:end="63:29">goto <name pos:start="63:14" pos:end="63:28">unlink_and_fail</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="65:5" pos:end="65:44">/* If there is a backing file, use it */</comment>
    <if_stmt pos:start="66:5" pos:end="89:5"><if pos:start="66:5" pos:end="89:5">if <condition pos:start="66:8" pos:end="66:72">(<expr pos:start="66:9" pos:end="66:71"><operator pos:start="66:9" pos:end="66:9">(</operator><name pos:start="66:10" pos:end="66:14">flags</name> <operator pos:start="66:16" pos:end="66:16">&amp;</operator> <name pos:start="66:18" pos:end="66:34">BDRV_O_NO_BACKING</name><operator pos:start="66:35" pos:end="66:35">)</operator> <operator pos:start="66:37" pos:end="66:38">==</operator> <literal type="number" pos:start="66:40" pos:end="66:40">0</literal> <operator pos:start="66:42" pos:end="66:43">&amp;&amp;</operator> <name pos:start="66:45" pos:end="66:63"><name pos:start="66:45" pos:end="66:46">bs</name><operator pos:start="66:47" pos:end="66:48">-&gt;</operator><name pos:start="66:49" pos:end="66:60">backing_file</name><index pos:start="66:61" pos:end="66:63">[<expr pos:start="66:62" pos:end="66:62"><literal type="number" pos:start="66:62" pos:end="66:62">0</literal></expr>]</index></name> <operator pos:start="66:65" pos:end="66:66">!=</operator> <literal type="char" pos:start="66:68" pos:end="66:71">'\0'</literal></expr>)</condition> <block pos:start="66:74" pos:end="89:5">{<block_content pos:start="67:9" pos:end="88:9">
        <decl_stmt pos:start="67:9" pos:end="67:40"><decl pos:start="67:9" pos:end="67:39"><type pos:start="67:9" pos:end="67:12"><name pos:start="67:9" pos:end="67:12">char</name></type> <name pos:start="67:14" pos:end="67:39"><name pos:start="67:14" pos:end="67:29">backing_filename</name><index pos:start="67:30" pos:end="67:39">[<expr pos:start="67:31" pos:end="67:38"><name pos:start="67:31" pos:end="67:38">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt pos:start="68:9" pos:end="68:23"><decl pos:start="68:9" pos:end="68:22"><type pos:start="68:9" pos:end="68:11"><name pos:start="68:9" pos:end="68:11">int</name></type> <name pos:start="68:13" pos:end="68:22">back_flags</name></decl>;</decl_stmt>
        <decl_stmt pos:start="69:9" pos:end="69:37"><decl pos:start="69:9" pos:end="69:36"><type pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:19">BlockDriver</name> <modifier pos:start="69:21" pos:end="69:21">*</modifier></type><name pos:start="69:22" pos:end="69:29">back_drv</name> <init pos:start="69:31" pos:end="69:36">= <expr pos:start="69:33" pos:end="69:36"><name pos:start="69:33" pos:end="69:36">NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="70:9" pos:end="70:38"><expr pos:start="70:9" pos:end="70:37"><name pos:start="70:9" pos:end="70:22"><name pos:start="70:9" pos:end="70:10">bs</name><operator pos:start="70:11" pos:end="70:12">-&gt;</operator><name pos:start="70:13" pos:end="70:22">backing_hd</name></name> <operator pos:start="70:24" pos:end="70:24">=</operator> <call pos:start="70:26" pos:end="70:37"><name pos:start="70:26" pos:end="70:33">bdrv_new</name><argument_list pos:start="70:34" pos:end="70:37">(<argument pos:start="70:35" pos:end="70:36"><expr pos:start="70:35" pos:end="70:36"><literal type="string" pos:start="70:35" pos:end="70:36">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="71:9" pos:end="72:49"><expr pos:start="71:9" pos:end="72:48"><call pos:start="71:9" pos:end="72:48"><name pos:start="71:9" pos:end="71:20">path_combine</name><argument_list pos:start="71:21" pos:end="72:48">(<argument pos:start="71:22" pos:end="71:37"><expr pos:start="71:22" pos:end="71:37"><name pos:start="71:22" pos:end="71:37">backing_filename</name></expr></argument>, <argument pos:start="71:40" pos:end="71:63"><expr pos:start="71:40" pos:end="71:63"><sizeof pos:start="71:40" pos:end="71:63">sizeof<argument_list pos:start="71:46" pos:end="71:63">(<argument pos:start="71:47" pos:end="71:62"><expr pos:start="71:47" pos:end="71:62"><name pos:start="71:47" pos:end="71:62">backing_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                     <argument pos:start="72:22" pos:end="72:29"><expr pos:start="72:22" pos:end="72:29"><name pos:start="72:22" pos:end="72:29">filename</name></expr></argument>, <argument pos:start="72:32" pos:end="72:47"><expr pos:start="72:32" pos:end="72:47"><name pos:start="72:32" pos:end="72:47"><name pos:start="72:32" pos:end="72:33">bs</name><operator pos:start="72:34" pos:end="72:35">-&gt;</operator><name pos:start="72:36" pos:end="72:47">backing_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="73:9" pos:end="74:60"><if pos:start="73:9" pos:end="74:60">if <condition pos:start="73:12" pos:end="73:42">(<expr pos:start="73:13" pos:end="73:41"><name pos:start="73:13" pos:end="73:33"><name pos:start="73:13" pos:end="73:14">bs</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:30">backing_format</name><index pos:start="73:31" pos:end="73:33">[<expr pos:start="73:32" pos:end="73:32"><literal type="number" pos:start="73:32" pos:end="73:32">0</literal></expr>]</index></name> <operator pos:start="73:35" pos:end="73:36">!=</operator> <literal type="char" pos:start="73:38" pos:end="73:41">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="74:13" pos:end="74:60"><block_content pos:start="74:13" pos:end="74:60">
            <expr_stmt pos:start="74:13" pos:end="74:60"><expr pos:start="74:13" pos:end="74:59"><name pos:start="74:13" pos:end="74:20">back_drv</name> <operator pos:start="74:22" pos:end="74:22">=</operator> <call pos:start="74:24" pos:end="74:59"><name pos:start="74:24" pos:end="74:39">bdrv_find_format</name><argument_list pos:start="74:40" pos:end="74:59">(<argument pos:start="74:41" pos:end="74:58"><expr pos:start="74:41" pos:end="74:58"><name pos:start="74:41" pos:end="74:58"><name pos:start="74:41" pos:end="74:42">bs</name><operator pos:start="74:43" pos:end="74:44">-&gt;</operator><name pos:start="74:45" pos:end="74:58">backing_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block" pos:start="75:9" pos:end="75:51">/* backing files always opened read-only */</comment>
        <expr_stmt pos:start="76:9" pos:end="77:73"><expr pos:start="76:9" pos:end="77:72"><name pos:start="76:9" pos:end="76:18">back_flags</name> <operator pos:start="76:20" pos:end="76:20">=</operator>
            <name pos:start="77:13" pos:end="77:17">flags</name> <operator pos:start="77:19" pos:end="77:19">&amp;</operator> <operator pos:start="77:21" pos:end="77:21">~</operator><operator pos:start="77:22" pos:end="77:22">(</operator><name pos:start="77:23" pos:end="77:33">BDRV_O_RDWR</name> <operator pos:start="77:35" pos:end="77:35">|</operator> <name pos:start="77:37" pos:end="77:51">BDRV_O_SNAPSHOT</name> <operator pos:start="77:53" pos:end="77:53">|</operator> <name pos:start="77:55" pos:end="77:71">BDRV_O_NO_BACKING</name><operator pos:start="77:72" pos:end="77:72">)</operator></expr>;</expr_stmt>
        <expr_stmt pos:start="78:9" pos:end="78:80"><expr pos:start="78:9" pos:end="78:79"><name pos:start="78:9" pos:end="78:11">ret</name> <operator pos:start="78:13" pos:end="78:13">=</operator> <call pos:start="78:15" pos:end="78:79"><name pos:start="78:15" pos:end="78:23">bdrv_open</name><argument_list pos:start="78:24" pos:end="78:79">(<argument pos:start="78:25" pos:end="78:38"><expr pos:start="78:25" pos:end="78:38"><name pos:start="78:25" pos:end="78:38"><name pos:start="78:25" pos:end="78:26">bs</name><operator pos:start="78:27" pos:end="78:28">-&gt;</operator><name pos:start="78:29" pos:end="78:38">backing_hd</name></name></expr></argument>, <argument pos:start="78:41" pos:end="78:56"><expr pos:start="78:41" pos:end="78:56"><name pos:start="78:41" pos:end="78:56">backing_filename</name></expr></argument>, <argument pos:start="78:59" pos:end="78:68"><expr pos:start="78:59" pos:end="78:68"><name pos:start="78:59" pos:end="78:68">back_flags</name></expr></argument>, <argument pos:start="78:71" pos:end="78:78"><expr pos:start="78:71" pos:end="78:78"><name pos:start="78:71" pos:end="78:78">back_drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="79:9" pos:end="82:9"><if pos:start="79:9" pos:end="82:9">if <condition pos:start="79:12" pos:end="79:20">(<expr pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">&lt;</operator> <literal type="number" pos:start="79:19" pos:end="79:19">0</literal></expr>)</condition> <block pos:start="79:22" pos:end="82:9">{<block_content pos:start="80:13" pos:end="81:23">
            <expr_stmt pos:start="80:13" pos:end="80:27"><expr pos:start="80:13" pos:end="80:26"><call pos:start="80:13" pos:end="80:26"><name pos:start="80:13" pos:end="80:22">bdrv_close</name><argument_list pos:start="80:23" pos:end="80:26">(<argument pos:start="80:24" pos:end="80:25"><expr pos:start="80:24" pos:end="80:25"><name pos:start="80:24" pos:end="80:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="81:13" pos:end="81:23">return <expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">ret</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt pos:start="83:9" pos:end="88:9"><if pos:start="83:9" pos:end="85:9">if <condition pos:start="83:12" pos:end="83:29">(<expr pos:start="83:13" pos:end="83:28"><name pos:start="83:13" pos:end="83:28"><name pos:start="83:13" pos:end="83:14">bs</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:28">is_temporary</name></name></expr>)</condition> <block pos:start="83:31" pos:end="85:9">{<block_content pos:start="84:13" pos:end="84:68">
            <expr_stmt pos:start="84:13" pos:end="84:68"><expr pos:start="84:13" pos:end="84:67"><name pos:start="84:13" pos:end="84:42"><name pos:start="84:13" pos:end="84:14">bs</name><operator pos:start="84:15" pos:end="84:16">-&gt;</operator><name pos:start="84:17" pos:end="84:26">backing_hd</name><operator pos:start="84:27" pos:end="84:28">-&gt;</operator><name pos:start="84:29" pos:end="84:42">keep_read_only</name></name> <operator pos:start="84:44" pos:end="84:44">=</operator> <operator pos:start="84:46" pos:end="84:46">!</operator><operator pos:start="84:47" pos:end="84:47">(</operator><name pos:start="84:48" pos:end="84:52">flags</name> <operator pos:start="84:54" pos:end="84:54">&amp;</operator> <name pos:start="84:56" pos:end="84:66">BDRV_O_RDWR</name><operator pos:start="84:67" pos:end="84:67">)</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="85:11" pos:end="88:9">else <block pos:start="85:16" pos:end="88:9">{<block_content pos:start="87:13" pos:end="87:64">
            <comment type="block" pos:start="86:13" pos:end="86:51">/* base image inherits from "parent" */</comment>
            <expr_stmt pos:start="87:13" pos:end="87:64"><expr pos:start="87:13" pos:end="87:63"><name pos:start="87:13" pos:end="87:42"><name pos:start="87:13" pos:end="87:14">bs</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:26">backing_hd</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:42">keep_read_only</name></name> <operator pos:start="87:44" pos:end="87:44">=</operator> <name pos:start="87:46" pos:end="87:63"><name pos:start="87:46" pos:end="87:47">bs</name><operator pos:start="87:48" pos:end="87:49">-&gt;</operator><name pos:start="87:50" pos:end="87:63">keep_read_only</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="90:5" pos:end="95:5"><if pos:start="90:5" pos:end="95:5">if <condition pos:start="90:8" pos:end="90:31">(<expr pos:start="90:9" pos:end="90:30"><operator pos:start="90:9" pos:end="90:9">!</operator><call pos:start="90:10" pos:end="90:30"><name pos:start="90:10" pos:end="90:26">bdrv_key_required</name><argument_list pos:start="90:27" pos:end="90:30">(<argument pos:start="90:28" pos:end="90:29"><expr pos:start="90:28" pos:end="90:29"><name pos:start="90:28" pos:end="90:29">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="90:33" pos:end="95:5">{<block_content pos:start="92:9" pos:end="94:45">
        <comment type="block" pos:start="91:9" pos:end="91:38">/* call the change callback */</comment>
        <expr_stmt pos:start="92:9" pos:end="92:30"><expr pos:start="92:9" pos:end="92:29"><name pos:start="92:9" pos:end="92:25"><name pos:start="92:9" pos:end="92:10">bs</name><operator pos:start="92:11" pos:end="92:12">-&gt;</operator><name pos:start="92:13" pos:end="92:25">media_changed</name></name> <operator pos:start="92:27" pos:end="92:27">=</operator> <literal type="number" pos:start="92:29" pos:end="92:29">1</literal></expr>;</expr_stmt>
        <if_stmt pos:start="93:9" pos:end="94:45"><if pos:start="93:9" pos:end="94:45">if <condition pos:start="93:12" pos:end="93:26">(<expr pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:14">bs</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:25">change_cb</name></name></expr>)</condition><block type="pseudo" pos:start="94:13" pos:end="94:45"><block_content pos:start="94:13" pos:end="94:45">
            <expr_stmt pos:start="94:13" pos:end="94:45"><expr pos:start="94:13" pos:end="94:44"><call pos:start="94:13" pos:end="94:44"><name pos:start="94:13" pos:end="94:25"><name pos:start="94:13" pos:end="94:14">bs</name><operator pos:start="94:15" pos:end="94:16">-&gt;</operator><name pos:start="94:17" pos:end="94:25">change_cb</name></name><argument_list pos:start="94:26" pos:end="94:44">(<argument pos:start="94:27" pos:end="94:43"><expr pos:start="94:27" pos:end="94:43"><name pos:start="94:27" pos:end="94:43"><name pos:start="94:27" pos:end="94:28">bs</name><operator pos:start="94:29" pos:end="94:30">-&gt;</operator><name pos:start="94:31" pos:end="94:43">change_opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="96:5" pos:end="96:13">return <expr pos:start="96:12" pos:end="96:12"><literal type="number" pos:start="96:12" pos:end="96:12">0</literal></expr>;</return>
<label pos:start="97:1" pos:end="97:16"><name pos:start="97:1" pos:end="97:15">unlink_and_fail</name>:</label>
    <if_stmt pos:start="98:5" pos:end="100:5"><if pos:start="98:5" pos:end="100:5">if <condition pos:start="98:8" pos:end="98:25">(<expr pos:start="98:9" pos:end="98:24"><name pos:start="98:9" pos:end="98:24"><name pos:start="98:9" pos:end="98:10">bs</name><operator pos:start="98:11" pos:end="98:12">-&gt;</operator><name pos:start="98:13" pos:end="98:24">is_temporary</name></name></expr>)</condition> <block pos:start="98:27" pos:end="100:5">{<block_content pos:start="99:9" pos:end="99:25">
        <expr_stmt pos:start="99:9" pos:end="99:25"><expr pos:start="99:9" pos:end="99:24"><call pos:start="99:9" pos:end="99:24"><name pos:start="99:9" pos:end="99:14">unlink</name><argument_list pos:start="99:15" pos:end="99:24">(<argument pos:start="99:16" pos:end="99:23"><expr pos:start="99:16" pos:end="99:23"><name pos:start="99:16" pos:end="99:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return pos:start="101:5" pos:end="101:15">return <expr pos:start="101:12" pos:end="101:14"><name pos:start="101:12" pos:end="101:14">ret</name></expr>;</return>
</block_content>}</block></function></unit>
