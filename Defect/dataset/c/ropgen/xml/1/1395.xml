<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1395.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">ff_h264_decode_extradata</name><parameter_list pos:start="1:29" pos:end="1:44">(<parameter pos:start="1:30" pos:end="1:43"><decl pos:start="1:30" pos:end="1:43"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:40">H264Context</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">h</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">AVCodecContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:25">avctx</name> <init pos:start="5:27" pos:end="5:38">= <expr pos:start="5:29" pos:end="5:38"><name pos:start="5:29" pos:end="5:38"><name pos:start="5:29" pos:end="5:29">h</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:32">s</name><operator pos:start="5:33" pos:end="5:33">.</operator><name pos:start="5:34" pos:end="5:38">avctx</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="101:5"><if pos:start="9:5" pos:end="93:5">if <condition pos:start="9:8" pos:end="9:33">(<expr pos:start="9:9" pos:end="9:32"><name pos:start="9:9" pos:end="9:27"><name pos:start="9:9" pos:end="9:13">avctx</name><operator pos:start="9:14" pos:end="9:15">-&gt;</operator><name pos:start="9:16" pos:end="9:24">extradata</name><index pos:start="9:25" pos:end="9:27">[<expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">0</literal></expr>]</index></name> <operator pos:start="9:29" pos:end="9:30">==</operator> <literal type="number" pos:start="9:32" pos:end="9:32">1</literal></expr>)</condition> <block pos:start="9:35" pos:end="93:5">{<block_content pos:start="11:9" pos:end="91:62">

        <decl_stmt pos:start="11:9" pos:end="11:28"><decl pos:start="11:9" pos:end="11:13"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:13">i</name></decl>, <decl pos:start="11:16" pos:end="11:18"><type ref="prev" pos:start="11:9" pos:end="11:11"/><name pos:start="11:16" pos:end="11:18">cnt</name></decl>, <decl pos:start="11:21" pos:end="11:27"><type ref="prev" pos:start="11:9" pos:end="11:11"/><name pos:start="11:21" pos:end="11:27">nalsize</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:44"><decl pos:start="13:9" pos:end="13:43"><type pos:start="13:9" pos:end="13:23"><name pos:start="13:9" pos:end="13:16">unsigned</name> <name pos:start="13:18" pos:end="13:21">char</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:24">p</name> <init pos:start="13:26" pos:end="13:43">= <expr pos:start="13:28" pos:end="13:43"><name pos:start="13:28" pos:end="13:43"><name pos:start="13:28" pos:end="13:32">avctx</name><operator pos:start="13:33" pos:end="13:34">-&gt;</operator><name pos:start="13:35" pos:end="13:43">extradata</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="17:9" pos:end="17:22"><expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:9">h</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:17">is_avc</name></name> <operator pos:start="17:19" pos:end="17:19">=</operator> <literal type="number" pos:start="17:21" pos:end="17:21">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="21:9" pos:end="27:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:38">(<expr pos:start="21:13" pos:end="21:37"><name pos:start="21:13" pos:end="21:33"><name pos:start="21:13" pos:end="21:17">avctx</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:33">extradata_size</name></name> <operator pos:start="21:35" pos:end="21:35">&lt;</operator> <literal type="number" pos:start="21:37" pos:end="21:37">7</literal></expr>)</condition> <block pos:start="21:40" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:22">

            <expr_stmt pos:start="23:13" pos:end="23:60"><expr pos:start="23:13" pos:end="23:59"><call pos:start="23:13" pos:end="23:59"><name pos:start="23:13" pos:end="23:18">av_log</name><argument_list pos:start="23:19" pos:end="23:59">(<argument pos:start="23:20" pos:end="23:24"><expr pos:start="23:20" pos:end="23:24"><name pos:start="23:20" pos:end="23:24">avctx</name></expr></argument>, <argument pos:start="23:27" pos:end="23:38"><expr pos:start="23:27" pos:end="23:38"><name pos:start="23:27" pos:end="23:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:41" pos:end="23:58"><expr pos:start="23:41" pos:end="23:58"><literal type="string" pos:start="23:41" pos:end="23:58">"avcC too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="25:13" pos:end="25:22">return <expr pos:start="25:20" pos:end="25:21"><operator pos:start="25:20" pos:end="25:20">-</operator><literal type="number" pos:start="25:21" pos:end="25:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="29:9" pos:end="31:66">/* sps and pps in the avcC always have length coded with 2 bytes,

         * so put a fake nal_length_size = 2 while parsing them */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:31"><expr pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:9">h</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:26">nal_length_size</name></name> <operator pos:start="33:28" pos:end="33:28">=</operator> <literal type="number" pos:start="33:30" pos:end="33:30">2</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="35:9" pos:end="35:31">// Decode sps from avcC</comment>

        <expr_stmt pos:start="37:9" pos:end="37:30"><expr pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:11">cnt</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">*</operator><operator pos:start="37:16" pos:end="37:16">(</operator><name pos:start="37:17" pos:end="37:17">p</name> <operator pos:start="37:19" pos:end="37:19">+</operator> <literal type="number" pos:start="37:21" pos:end="37:21">5</literal><operator pos:start="37:22" pos:end="37:22">)</operator> <operator pos:start="37:24" pos:end="37:24">&amp;</operator> <literal type="number" pos:start="37:26" pos:end="37:29">0x1f</literal></expr>;</expr_stmt> <comment type="line" pos:start="37:32" pos:end="37:47">// Number of sps</comment>

        <expr_stmt pos:start="39:9" pos:end="39:16"><expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:9">p</name>  <operator pos:start="39:12" pos:end="39:13">+=</operator> <literal type="number" pos:start="39:15" pos:end="39:15">6</literal></expr>;</expr_stmt>

        <for pos:start="41:9" pos:end="61:9">for <control pos:start="41:13" pos:end="41:33">(<init pos:start="41:14" pos:end="41:19"><expr pos:start="41:14" pos:end="41:18"><name pos:start="41:14" pos:end="41:14">i</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <literal type="number" pos:start="41:18" pos:end="41:18">0</literal></expr>;</init> <condition pos:start="41:21" pos:end="41:28"><expr pos:start="41:21" pos:end="41:27"><name pos:start="41:21" pos:end="41:21">i</name> <operator pos:start="41:23" pos:end="41:23">&lt;</operator> <name pos:start="41:25" pos:end="41:27">cnt</name></expr>;</condition> <incr pos:start="41:30" pos:end="41:32"><expr pos:start="41:30" pos:end="41:32"><name pos:start="41:30" pos:end="41:30">i</name><operator pos:start="41:31" pos:end="41:32">++</operator></expr></incr>)</control> <block pos:start="41:35" pos:end="61:9">{<block_content pos:start="43:13" pos:end="59:25">

            <expr_stmt pos:start="43:13" pos:end="43:37"><expr pos:start="43:13" pos:end="43:36"><name pos:start="43:13" pos:end="43:19">nalsize</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:32"><name pos:start="43:23" pos:end="43:29">AV_RB16</name><argument_list pos:start="43:30" pos:end="43:32">(<argument pos:start="43:31" pos:end="43:31"><expr pos:start="43:31" pos:end="43:31"><name pos:start="43:31" pos:end="43:31">p</name></expr></argument>)</argument_list></call> <operator pos:start="43:34" pos:end="43:34">+</operator> <literal type="number" pos:start="43:36" pos:end="43:36">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="47:26"><if pos:start="45:13" pos:end="47:26">if <condition pos:start="45:16" pos:end="45:71">(<expr pos:start="45:17" pos:end="45:70"><name pos:start="45:17" pos:end="45:17">p</name> <operator pos:start="45:19" pos:end="45:19">-</operator> <name pos:start="45:21" pos:end="45:36"><name pos:start="45:21" pos:end="45:25">avctx</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:36">extradata</name></name> <operator pos:start="45:38" pos:end="45:38">+</operator> <name pos:start="45:40" pos:end="45:46">nalsize</name> <operator pos:start="45:48" pos:end="45:48">&gt;</operator> <name pos:start="45:50" pos:end="45:70"><name pos:start="45:50" pos:end="45:54">avctx</name><operator pos:start="45:55" pos:end="45:56">-&gt;</operator><name pos:start="45:57" pos:end="45:70">extradata_size</name></name></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:26"><block_content pos:start="47:17" pos:end="47:26">

                <return pos:start="47:17" pos:end="47:26">return <expr pos:start="47:24" pos:end="47:25"><operator pos:start="47:24" pos:end="47:24">-</operator><literal type="number" pos:start="47:25" pos:end="47:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="49:13" pos:end="57:13"><if pos:start="49:13" pos:end="57:13">if <condition pos:start="49:16" pos:end="49:52">(<expr pos:start="49:17" pos:end="49:51"><call pos:start="49:17" pos:end="49:47"><name pos:start="49:17" pos:end="49:32">decode_nal_units</name><argument_list pos:start="49:33" pos:end="49:47">(<argument pos:start="49:34" pos:end="49:34"><expr pos:start="49:34" pos:end="49:34"><name pos:start="49:34" pos:end="49:34">h</name></expr></argument>, <argument pos:start="49:37" pos:end="49:37"><expr pos:start="49:37" pos:end="49:37"><name pos:start="49:37" pos:end="49:37">p</name></expr></argument>, <argument pos:start="49:40" pos:end="49:46"><expr pos:start="49:40" pos:end="49:46"><name pos:start="49:40" pos:end="49:46">nalsize</name></expr></argument>)</argument_list></call> <operator pos:start="49:49" pos:end="49:49">&lt;</operator> <literal type="number" pos:start="49:51" pos:end="49:51">0</literal></expr>)</condition> <block pos:start="49:54" pos:end="57:13">{<block_content pos:start="51:17" pos:end="55:26">

                <expr_stmt pos:start="51:17" pos:end="53:64"><expr pos:start="51:17" pos:end="53:63"><call pos:start="51:17" pos:end="53:63"><name pos:start="51:17" pos:end="51:22">av_log</name><argument_list pos:start="51:23" pos:end="53:63">(<argument pos:start="51:24" pos:end="51:28"><expr pos:start="51:24" pos:end="51:28"><name pos:start="51:24" pos:end="51:28">avctx</name></expr></argument>, <argument pos:start="51:31" pos:end="51:42"><expr pos:start="51:31" pos:end="51:42"><name pos:start="51:31" pos:end="51:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="53:24" pos:end="53:59"><expr pos:start="53:24" pos:end="53:59"><literal type="string" pos:start="53:24" pos:end="53:59">"Decoding sps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="53:62" pos:end="53:62"><expr pos:start="53:62" pos:end="53:62"><name pos:start="53:62" pos:end="53:62">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="55:17" pos:end="55:26">return <expr pos:start="55:24" pos:end="55:25"><operator pos:start="55:24" pos:end="55:24">-</operator><literal type="number" pos:start="55:25" pos:end="55:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:25"><expr pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:13">p</name> <operator pos:start="59:15" pos:end="59:16">+=</operator> <name pos:start="59:18" pos:end="59:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="63:9" pos:end="63:31">// Decode pps from avcC</comment>

        <expr_stmt pos:start="65:9" pos:end="65:21"><expr pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:11">cnt</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">*</operator><operator pos:start="65:16" pos:end="65:16">(</operator><name pos:start="65:17" pos:end="65:17">p</name><operator pos:start="65:18" pos:end="65:19">++</operator><operator pos:start="65:20" pos:end="65:20">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="65:23" pos:end="65:38">// Number of pps</comment>

        <for pos:start="67:9" pos:end="87:9">for <control pos:start="67:13" pos:end="67:33">(<init pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:18"><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</init> <condition pos:start="67:21" pos:end="67:28"><expr pos:start="67:21" pos:end="67:27"><name pos:start="67:21" pos:end="67:21">i</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <name pos:start="67:25" pos:end="67:27">cnt</name></expr>;</condition> <incr pos:start="67:30" pos:end="67:32"><expr pos:start="67:30" pos:end="67:32"><name pos:start="67:30" pos:end="67:30">i</name><operator pos:start="67:31" pos:end="67:32">++</operator></expr></incr>)</control> <block pos:start="67:35" pos:end="87:9">{<block_content pos:start="69:13" pos:end="85:25">

            <expr_stmt pos:start="69:13" pos:end="69:37"><expr pos:start="69:13" pos:end="69:36"><name pos:start="69:13" pos:end="69:19">nalsize</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:32"><name pos:start="69:23" pos:end="69:29">AV_RB16</name><argument_list pos:start="69:30" pos:end="69:32">(<argument pos:start="69:31" pos:end="69:31"><expr pos:start="69:31" pos:end="69:31"><name pos:start="69:31" pos:end="69:31">p</name></expr></argument>)</argument_list></call> <operator pos:start="69:34" pos:end="69:34">+</operator> <literal type="number" pos:start="69:36" pos:end="69:36">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="71:13" pos:end="73:26"><if pos:start="71:13" pos:end="73:26">if <condition pos:start="71:16" pos:end="71:71">(<expr pos:start="71:17" pos:end="71:70"><name pos:start="71:17" pos:end="71:17">p</name> <operator pos:start="71:19" pos:end="71:19">-</operator> <name pos:start="71:21" pos:end="71:36"><name pos:start="71:21" pos:end="71:25">avctx</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:36">extradata</name></name> <operator pos:start="71:38" pos:end="71:38">+</operator> <name pos:start="71:40" pos:end="71:46">nalsize</name> <operator pos:start="71:48" pos:end="71:48">&gt;</operator> <name pos:start="71:50" pos:end="71:70"><name pos:start="71:50" pos:end="71:54">avctx</name><operator pos:start="71:55" pos:end="71:56">-&gt;</operator><name pos:start="71:57" pos:end="71:70">extradata_size</name></name></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:26"><block_content pos:start="73:17" pos:end="73:26">

                <return pos:start="73:17" pos:end="73:26">return <expr pos:start="73:24" pos:end="73:25"><operator pos:start="73:24" pos:end="73:24">-</operator><literal type="number" pos:start="73:25" pos:end="73:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="75:13" pos:end="83:13"><if pos:start="75:13" pos:end="83:13">if <condition pos:start="75:16" pos:end="75:52">(<expr pos:start="75:17" pos:end="75:51"><call pos:start="75:17" pos:end="75:47"><name pos:start="75:17" pos:end="75:32">decode_nal_units</name><argument_list pos:start="75:33" pos:end="75:47">(<argument pos:start="75:34" pos:end="75:34"><expr pos:start="75:34" pos:end="75:34"><name pos:start="75:34" pos:end="75:34">h</name></expr></argument>, <argument pos:start="75:37" pos:end="75:37"><expr pos:start="75:37" pos:end="75:37"><name pos:start="75:37" pos:end="75:37">p</name></expr></argument>, <argument pos:start="75:40" pos:end="75:46"><expr pos:start="75:40" pos:end="75:46"><name pos:start="75:40" pos:end="75:46">nalsize</name></expr></argument>)</argument_list></call> <operator pos:start="75:49" pos:end="75:49">&lt;</operator> <literal type="number" pos:start="75:51" pos:end="75:51">0</literal></expr>)</condition> <block pos:start="75:54" pos:end="83:13">{<block_content pos:start="77:17" pos:end="81:26">

                <expr_stmt pos:start="77:17" pos:end="79:64"><expr pos:start="77:17" pos:end="79:63"><call pos:start="77:17" pos:end="79:63"><name pos:start="77:17" pos:end="77:22">av_log</name><argument_list pos:start="77:23" pos:end="79:63">(<argument pos:start="77:24" pos:end="77:28"><expr pos:start="77:24" pos:end="77:28"><name pos:start="77:24" pos:end="77:28">avctx</name></expr></argument>, <argument pos:start="77:31" pos:end="77:42"><expr pos:start="77:31" pos:end="77:42"><name pos:start="77:31" pos:end="77:42">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="79:24" pos:end="79:59"><expr pos:start="79:24" pos:end="79:59"><literal type="string" pos:start="79:24" pos:end="79:59">"Decoding pps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="79:62" pos:end="79:62"><expr pos:start="79:62" pos:end="79:62"><name pos:start="79:62" pos:end="79:62">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="81:17" pos:end="81:26">return <expr pos:start="81:24" pos:end="81:25"><operator pos:start="81:24" pos:end="81:24">-</operator><literal type="number" pos:start="81:25" pos:end="81:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:25"><expr pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:13">p</name> <operator pos:start="85:15" pos:end="85:16">+=</operator> <name pos:start="85:18" pos:end="85:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="89:9" pos:end="89:85">// Now store right nal length size, that will be used to parse all other nals</comment>

        <expr_stmt pos:start="91:9" pos:end="91:62"><expr pos:start="91:9" pos:end="91:61"><name pos:start="91:9" pos:end="91:26"><name pos:start="91:9" pos:end="91:9">h</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:26">nal_length_size</name></name> <operator pos:start="91:28" pos:end="91:28">=</operator> <operator pos:start="91:30" pos:end="91:30">(</operator><name pos:start="91:31" pos:end="91:49"><name pos:start="91:31" pos:end="91:35">avctx</name><operator pos:start="91:36" pos:end="91:37">-&gt;</operator><name pos:start="91:38" pos:end="91:46">extradata</name><index pos:start="91:47" pos:end="91:49">[<expr pos:start="91:48" pos:end="91:48"><literal type="number" pos:start="91:48" pos:end="91:48">4</literal></expr>]</index></name> <operator pos:start="91:51" pos:end="91:51">&amp;</operator> <literal type="number" pos:start="91:53" pos:end="91:56">0x03</literal><operator pos:start="91:57" pos:end="91:57">)</operator> <operator pos:start="91:59" pos:end="91:59">+</operator> <literal type="number" pos:start="91:61" pos:end="91:61">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="101:5">else <block pos:start="93:12" pos:end="101:5">{<block_content pos:start="95:9" pos:end="99:22">

        <expr_stmt pos:start="95:9" pos:end="95:22"><expr pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:9">h</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:17">is_avc</name></name> <operator pos:start="95:19" pos:end="95:19">=</operator> <literal type="number" pos:start="95:21" pos:end="95:21">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="99:22"><if pos:start="97:9" pos:end="99:22">if <condition pos:start="97:12" pos:end="97:77">(<expr pos:start="97:13" pos:end="97:76"><call pos:start="97:13" pos:end="97:72"><name pos:start="97:13" pos:end="97:28">decode_nal_units</name><argument_list pos:start="97:29" pos:end="97:72">(<argument pos:start="97:30" pos:end="97:30"><expr pos:start="97:30" pos:end="97:30"><name pos:start="97:30" pos:end="97:30">h</name></expr></argument>, <argument pos:start="97:33" pos:end="97:48"><expr pos:start="97:33" pos:end="97:48"><name pos:start="97:33" pos:end="97:48"><name pos:start="97:33" pos:end="97:37">avctx</name><operator pos:start="97:38" pos:end="97:39">-&gt;</operator><name pos:start="97:40" pos:end="97:48">extradata</name></name></expr></argument>, <argument pos:start="97:51" pos:end="97:71"><expr pos:start="97:51" pos:end="97:71"><name pos:start="97:51" pos:end="97:71"><name pos:start="97:51" pos:end="97:55">avctx</name><operator pos:start="97:56" pos:end="97:57">-&gt;</operator><name pos:start="97:58" pos:end="97:71">extradata_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="97:74" pos:end="97:74">&lt;</operator> <literal type="number" pos:start="97:76" pos:end="97:76">0</literal></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:22"><block_content pos:start="99:13" pos:end="99:22">

            <return pos:start="99:13" pos:end="99:22">return <expr pos:start="99:20" pos:end="99:21"><operator pos:start="99:20" pos:end="99:20">-</operator><literal type="number" pos:start="99:21" pos:end="99:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
