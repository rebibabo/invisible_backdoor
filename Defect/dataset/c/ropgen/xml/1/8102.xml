<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8102.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:14">do_savevm</name><parameter_list pos:start="1:15" pos:end="1:32">(<parameter pos:start="1:16" pos:end="1:31"><decl pos:start="1:16" pos:end="1:31"><type pos:start="1:16" pos:end="1:27"><specifier pos:start="1:16" pos:end="1:20">const</specifier> <name pos:start="1:22" pos:end="1:25">char</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:31">name</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="195:1">{<block_content pos:start="5:5" pos:end="193:19">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>, <decl pos:start="5:27" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:22"><modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:30">bs1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20">QEMUSnapshotInfo</name></type> <name pos:start="7:22" pos:end="7:24">sn1</name></decl>, <decl pos:start="7:27" pos:end="7:36"><type ref="prev" pos:start="7:5" pos:end="7:20"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:29">sn</name> <init pos:start="7:31" pos:end="7:36">= <expr pos:start="7:33" pos:end="7:36"><operator pos:start="7:33" pos:end="7:33">&amp;</operator><name pos:start="7:34" pos:end="7:36">sn1</name></expr></init></decl>, <decl pos:start="7:39" pos:end="7:45"><type ref="prev" pos:start="7:5" pos:end="7:20"/><name pos:start="7:39" pos:end="7:45">old_sn1</name></decl>, <decl pos:start="7:48" pos:end="7:65"><type ref="prev" pos:start="7:5" pos:end="7:20"><modifier pos:start="7:48" pos:end="7:48">*</modifier></type><name pos:start="7:49" pos:end="7:54">old_sn</name> <init pos:start="7:56" pos:end="7:65">= <expr pos:start="7:58" pos:end="7:65"><operator pos:start="7:58" pos:end="7:58">&amp;</operator><name pos:start="7:59" pos:end="7:65">old_sn1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">must_delete</name></decl>, <decl pos:start="9:22" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:24">ret</name></decl>, <decl pos:start="9:27" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:27" pos:end="9:27">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:19">BlockDriverInfo</name></type> <name pos:start="11:21" pos:end="11:24">bdi1</name></decl>, <decl pos:start="11:27" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:19"><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:30">bdi</name> <init pos:start="11:32" pos:end="11:38">= <expr pos:start="11:34" pos:end="11:38"><operator pos:start="11:34" pos:end="11:34">&amp;</operator><name pos:start="11:35" pos:end="11:38">bdi1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QEMUFile</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:15">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="18:0"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:24">saved_vm_running</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="17:1" pos:end="17:13">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:13">_WIN32</name></cpp:ifdef>

    <decl_stmt pos:start="19:5" pos:end="22:0"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:17">_timeb</name></name></type> <name pos:start="19:19" pos:end="19:20">tb</name></decl>;</decl_stmt>

<cpp:else pos:start="21:1" pos:end="21:5">#<cpp:directive pos:start="21:2" pos:end="21:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="23:5" pos:end="26:0"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:18">timeval</name></name></type> <name pos:start="23:20" pos:end="23:21">tv</name></decl>;</decl_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="29:5" pos:end="29:28"><expr pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:6">bs</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:27"><name pos:start="29:10" pos:end="29:25">get_bs_snapshots</name><argument_list pos:start="29:26" pos:end="29:27">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:12">(<expr pos:start="31:9" pos:end="31:11"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:11">bs</name></expr>)</condition> <block pos:start="31:14" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:62"><expr pos:start="33:9" pos:end="33:61"><call pos:start="33:9" pos:end="33:61"><name pos:start="33:9" pos:end="33:19">term_printf</name><argument_list pos:start="33:20" pos:end="33:61">(<argument pos:start="33:21" pos:end="33:60"><expr pos:start="33:21" pos:end="33:60"><literal type="string" pos:start="33:21" pos:end="33:60">"No block device can accept snapshots\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:47">/* ??? Should this occur after vm_stop?  */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:21"><expr pos:start="43:5" pos:end="43:20"><call pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:18">qemu_aio_flush</name><argument_list pos:start="43:19" pos:end="43:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:34"><expr pos:start="47:5" pos:end="47:33"><name pos:start="47:5" pos:end="47:20">saved_vm_running</name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:33">vm_running</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:15"><expr pos:start="49:5" pos:end="49:14"><call pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:11">vm_stop</name><argument_list pos:start="49:12" pos:end="49:14">(<argument pos:start="49:13" pos:end="49:13"><expr pos:start="49:13" pos:end="49:13"><literal type="number" pos:start="49:13" pos:end="49:13">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:20"><expr pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:15">must_delete</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <literal type="number" pos:start="53:19" pos:end="53:19">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="65:5">if <condition pos:start="55:8" pos:end="55:13">(<expr pos:start="55:9" pos:end="55:12"><name pos:start="55:9" pos:end="55:12">name</name></expr>)</condition> <block pos:start="55:15" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:9">

        <expr_stmt pos:start="57:9" pos:end="57:51"><expr pos:start="57:9" pos:end="57:50"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:50"><name pos:start="57:15" pos:end="57:32">bdrv_snapshot_find</name><argument_list pos:start="57:33" pos:end="57:50">(<argument pos:start="57:34" pos:end="57:35"><expr pos:start="57:34" pos:end="57:35"><name pos:start="57:34" pos:end="57:35">bs</name></expr></argument>, <argument pos:start="57:38" pos:end="57:43"><expr pos:start="57:38" pos:end="57:43"><name pos:start="57:38" pos:end="57:43">old_sn</name></expr></argument>, <argument pos:start="57:46" pos:end="57:49"><expr pos:start="57:46" pos:end="57:49"><name pos:start="57:46" pos:end="57:49">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:21">(<expr pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:18">&gt;=</operator> <literal type="number" pos:start="59:20" pos:end="59:20">0</literal></expr>)</condition> <block pos:start="59:23" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:28">

            <expr_stmt pos:start="61:13" pos:end="61:28"><expr pos:start="61:13" pos:end="61:27"><name pos:start="61:13" pos:end="61:23">must_delete</name> <operator pos:start="61:25" pos:end="61:25">=</operator> <literal type="number" pos:start="61:27" pos:end="61:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:31"><expr pos:start="67:5" pos:end="67:30"><call pos:start="67:5" pos:end="67:30"><name pos:start="67:5" pos:end="67:10">memset</name><argument_list pos:start="67:11" pos:end="67:30">(<argument pos:start="67:12" pos:end="67:13"><expr pos:start="67:12" pos:end="67:13"><name pos:start="67:12" pos:end="67:13">sn</name></expr></argument>, <argument pos:start="67:16" pos:end="67:16"><expr pos:start="67:16" pos:end="67:16"><literal type="number" pos:start="67:16" pos:end="67:16">0</literal></expr></argument>, <argument pos:start="67:19" pos:end="67:29"><expr pos:start="67:19" pos:end="67:29"><sizeof pos:start="67:19" pos:end="67:29">sizeof<argument_list pos:start="67:25" pos:end="67:29">(<argument pos:start="67:26" pos:end="67:28"><expr pos:start="67:26" pos:end="67:28"><operator pos:start="67:26" pos:end="67:26">*</operator><name pos:start="67:27" pos:end="67:28">sn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="88:0"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:20">(<expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:19">must_delete</name></expr>)</condition> <block pos:start="69:22" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:64">

        <expr_stmt pos:start="71:9" pos:end="71:58"><expr pos:start="71:9" pos:end="71:57"><call pos:start="71:9" pos:end="71:57"><name pos:start="71:9" pos:end="71:15">pstrcpy</name><argument_list pos:start="71:16" pos:end="71:57">(<argument pos:start="71:17" pos:end="71:24"><expr pos:start="71:17" pos:end="71:24"><name pos:start="71:17" pos:end="71:24"><name pos:start="71:17" pos:end="71:18">sn</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:24">name</name></name></expr></argument>, <argument pos:start="71:27" pos:end="71:42"><expr pos:start="71:27" pos:end="71:42"><sizeof pos:start="71:27" pos:end="71:42">sizeof<argument_list pos:start="71:33" pos:end="71:42">(<argument pos:start="71:34" pos:end="71:41"><expr pos:start="71:34" pos:end="71:41"><name pos:start="71:34" pos:end="71:41"><name pos:start="71:34" pos:end="71:35">sn</name><operator pos:start="71:36" pos:end="71:37">-&gt;</operator><name pos:start="71:38" pos:end="71:41">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="71:45" pos:end="71:56"><expr pos:start="71:45" pos:end="71:56"><name pos:start="71:45" pos:end="71:56"><name pos:start="71:45" pos:end="71:50">old_sn</name><operator pos:start="71:51" pos:end="71:52">-&gt;</operator><name pos:start="71:53" pos:end="71:56">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:64"><expr pos:start="73:9" pos:end="73:63"><call pos:start="73:9" pos:end="73:63"><name pos:start="73:9" pos:end="73:15">pstrcpy</name><argument_list pos:start="73:16" pos:end="73:63">(<argument pos:start="73:17" pos:end="73:26"><expr pos:start="73:17" pos:end="73:26"><name pos:start="73:17" pos:end="73:26"><name pos:start="73:17" pos:end="73:18">sn</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:26">id_str</name></name></expr></argument>, <argument pos:start="73:29" pos:end="73:46"><expr pos:start="73:29" pos:end="73:46"><sizeof pos:start="73:29" pos:end="73:46">sizeof<argument_list pos:start="73:35" pos:end="73:46">(<argument pos:start="73:36" pos:end="73:45"><expr pos:start="73:36" pos:end="73:45"><name pos:start="73:36" pos:end="73:45"><name pos:start="73:36" pos:end="73:37">sn</name><operator pos:start="73:38" pos:end="73:39">-&gt;</operator><name pos:start="73:40" pos:end="73:45">id_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="73:49" pos:end="73:62"><expr pos:start="73:49" pos:end="73:62"><name pos:start="73:49" pos:end="73:62"><name pos:start="73:49" pos:end="73:54">old_sn</name><operator pos:start="73:55" pos:end="73:56">-&gt;</operator><name pos:start="73:57" pos:end="73:62">id_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="88:0">else <block pos:start="75:12" pos:end="88:0">{<block_content pos:start="77:9" pos:end="79:54">

        <if_stmt pos:start="77:9" pos:end="79:54"><if pos:start="77:9" pos:end="79:54">if <condition pos:start="77:12" pos:end="77:17">(<expr pos:start="77:13" pos:end="77:16"><name pos:start="77:13" pos:end="77:16">name</name></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:54"><block_content pos:start="79:13" pos:end="79:54">

            <expr_stmt pos:start="79:13" pos:end="79:54"><expr pos:start="79:13" pos:end="79:53"><call pos:start="79:13" pos:end="79:53"><name pos:start="79:13" pos:end="79:19">pstrcpy</name><argument_list pos:start="79:20" pos:end="79:53">(<argument pos:start="79:21" pos:end="79:28"><expr pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:22">sn</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:28">name</name></name></expr></argument>, <argument pos:start="79:31" pos:end="79:46"><expr pos:start="79:31" pos:end="79:46"><sizeof pos:start="79:31" pos:end="79:46">sizeof<argument_list pos:start="79:37" pos:end="79:46">(<argument pos:start="79:38" pos:end="79:45"><expr pos:start="79:38" pos:end="79:45"><name pos:start="79:38" pos:end="79:45"><name pos:start="79:38" pos:end="79:39">sn</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:45">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="79:49" pos:end="79:52"><expr pos:start="79:49" pos:end="79:52"><name pos:start="79:49" pos:end="79:52">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:31">/* fill auxiliary fields */</comment>

<cpp:ifdef pos:start="87:1" pos:end="87:13">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:13">_WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="89:5" pos:end="89:16"><expr pos:start="89:5" pos:end="89:15"><call pos:start="89:5" pos:end="89:15"><name pos:start="89:5" pos:end="89:10">_ftime</name><argument_list pos:start="89:11" pos:end="89:15">(<argument pos:start="89:12" pos:end="89:14"><expr pos:start="89:12" pos:end="89:14"><operator pos:start="89:12" pos:end="89:12">&amp;</operator><name pos:start="89:13" pos:end="89:14">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:27"><expr pos:start="91:5" pos:end="91:26"><name pos:start="91:5" pos:end="91:16"><name pos:start="91:5" pos:end="91:6">sn</name><operator pos:start="91:7" pos:end="91:8">-&gt;</operator><name pos:start="91:9" pos:end="91:16">date_sec</name></name> <operator pos:start="91:18" pos:end="91:18">=</operator> <name pos:start="91:20" pos:end="91:26"><name pos:start="91:20" pos:end="91:21">tb</name><operator pos:start="91:22" pos:end="91:22">.</operator><name pos:start="91:23" pos:end="91:26">time</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="96:0"><expr pos:start="93:5" pos:end="93:40"><name pos:start="93:5" pos:end="93:17"><name pos:start="93:5" pos:end="93:6">sn</name><operator pos:start="93:7" pos:end="93:8">-&gt;</operator><name pos:start="93:9" pos:end="93:17">date_nsec</name></name> <operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:30"><name pos:start="93:21" pos:end="93:22">tb</name><operator pos:start="93:23" pos:end="93:23">.</operator><name pos:start="93:24" pos:end="93:30">millitm</name></name> <operator pos:start="93:32" pos:end="93:32">*</operator> <literal type="number" pos:start="93:34" pos:end="93:40">1000000</literal></expr>;</expr_stmt>

<cpp:else pos:start="95:1" pos:end="95:5">#<cpp:directive pos:start="95:2" pos:end="95:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="97:5" pos:end="97:28"><expr pos:start="97:5" pos:end="97:27"><call pos:start="97:5" pos:end="97:27"><name pos:start="97:5" pos:end="97:16">gettimeofday</name><argument_list pos:start="97:17" pos:end="97:27">(<argument pos:start="97:18" pos:end="97:20"><expr pos:start="97:18" pos:end="97:20"><operator pos:start="97:18" pos:end="97:18">&amp;</operator><name pos:start="97:19" pos:end="97:20">tv</name></expr></argument>, <argument pos:start="97:23" pos:end="97:26"><expr pos:start="97:23" pos:end="97:26"><name pos:start="97:23" pos:end="97:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:29"><expr pos:start="99:5" pos:end="99:28"><name pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:6">sn</name><operator pos:start="99:7" pos:end="99:8">-&gt;</operator><name pos:start="99:9" pos:end="99:16">date_sec</name></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <name pos:start="99:20" pos:end="99:28"><name pos:start="99:20" pos:end="99:21">tv</name><operator pos:start="99:22" pos:end="99:22">.</operator><name pos:start="99:23" pos:end="99:28">tv_sec</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="104:0"><expr pos:start="101:5" pos:end="101:37"><name pos:start="101:5" pos:end="101:17"><name pos:start="101:5" pos:end="101:6">sn</name><operator pos:start="101:7" pos:end="101:8">-&gt;</operator><name pos:start="101:9" pos:end="101:17">date_nsec</name></name> <operator pos:start="101:19" pos:end="101:19">=</operator> <name pos:start="101:21" pos:end="101:30"><name pos:start="101:21" pos:end="101:22">tv</name><operator pos:start="101:23" pos:end="101:23">.</operator><name pos:start="101:24" pos:end="101:30">tv_usec</name></name> <operator pos:start="101:32" pos:end="101:32">*</operator> <literal type="number" pos:start="101:34" pos:end="101:37">1000</literal></expr>;</expr_stmt>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="105:5" pos:end="105:49"><expr pos:start="105:5" pos:end="105:48"><name pos:start="105:5" pos:end="105:21"><name pos:start="105:5" pos:end="105:6">sn</name><operator pos:start="105:7" pos:end="105:8">-&gt;</operator><name pos:start="105:9" pos:end="105:21">vm_clock_nsec</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <call pos:start="105:25" pos:end="105:48"><name pos:start="105:25" pos:end="105:38">qemu_get_clock</name><argument_list pos:start="105:39" pos:end="105:48">(<argument pos:start="105:40" pos:end="105:47"><expr pos:start="105:40" pos:end="105:47"><name pos:start="105:40" pos:end="105:47">vm_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="109:5" pos:end="117:5"><if pos:start="109:5" pos:end="117:5">if <condition pos:start="109:8" pos:end="109:64">(<expr pos:start="109:9" pos:end="109:63"><call pos:start="109:9" pos:end="109:30"><name pos:start="109:9" pos:end="109:21">bdrv_get_info</name><argument_list pos:start="109:22" pos:end="109:30">(<argument pos:start="109:23" pos:end="109:24"><expr pos:start="109:23" pos:end="109:24"><name pos:start="109:23" pos:end="109:24">bs</name></expr></argument>, <argument pos:start="109:27" pos:end="109:29"><expr pos:start="109:27" pos:end="109:29"><name pos:start="109:27" pos:end="109:29">bdi</name></expr></argument>)</argument_list></call> <operator pos:start="109:32" pos:end="109:32">&lt;</operator> <literal type="number" pos:start="109:34" pos:end="109:34">0</literal> <operator pos:start="109:36" pos:end="109:37">||</operator> <name pos:start="109:39" pos:end="109:58"><name pos:start="109:39" pos:end="109:41">bdi</name><operator pos:start="109:42" pos:end="109:43">-&gt;</operator><name pos:start="109:44" pos:end="109:58">vm_state_offset</name></name> <operator pos:start="109:60" pos:end="109:61">&lt;=</operator> <literal type="number" pos:start="109:63" pos:end="109:63">0</literal></expr>)</condition> <block pos:start="109:66" pos:end="117:5">{<block_content pos:start="111:9" pos:end="115:21">

        <expr_stmt pos:start="111:9" pos:end="113:46"><expr pos:start="111:9" pos:end="113:45"><call pos:start="111:9" pos:end="113:45"><name pos:start="111:9" pos:end="111:19">term_printf</name><argument_list pos:start="111:20" pos:end="113:45">(<argument pos:start="111:21" pos:end="111:69"><expr pos:start="111:21" pos:end="111:69"><literal type="string" pos:start="111:21" pos:end="111:69">"Device %s does not support VM state snapshots\n"</literal></expr></argument>,

                    <argument pos:start="113:21" pos:end="113:44"><expr pos:start="113:21" pos:end="113:44"><call pos:start="113:21" pos:end="113:44"><name pos:start="113:21" pos:end="113:40">bdrv_get_device_name</name><argument_list pos:start="113:41" pos:end="113:44">(<argument pos:start="113:42" pos:end="113:43"><expr pos:start="113:42" pos:end="113:43"><name pos:start="113:42" pos:end="113:43">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="115:9" pos:end="115:21">goto <name pos:start="115:14" pos:end="115:20">the_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:27">/* save the VM state */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:53"><expr pos:start="123:5" pos:end="123:52"><name pos:start="123:5" pos:end="123:5">f</name> <operator pos:start="123:7" pos:end="123:7">=</operator> <call pos:start="123:9" pos:end="123:52"><name pos:start="123:9" pos:end="123:23">qemu_fopen_bdrv</name><argument_list pos:start="123:24" pos:end="123:52">(<argument pos:start="123:25" pos:end="123:26"><expr pos:start="123:25" pos:end="123:26"><name pos:start="123:25" pos:end="123:26">bs</name></expr></argument>, <argument pos:start="123:29" pos:end="123:48"><expr pos:start="123:29" pos:end="123:48"><name pos:start="123:29" pos:end="123:48"><name pos:start="123:29" pos:end="123:31">bdi</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:48">vm_state_offset</name></name></expr></argument>, <argument pos:start="123:51" pos:end="123:51"><expr pos:start="123:51" pos:end="123:51"><literal type="number" pos:start="123:51" pos:end="123:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:11">(<expr pos:start="125:9" pos:end="125:10"><operator pos:start="125:9" pos:end="125:9">!</operator><name pos:start="125:10" pos:end="125:10">f</name></expr>)</condition> <block pos:start="125:13" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:21">

        <expr_stmt pos:start="127:9" pos:end="127:54"><expr pos:start="127:9" pos:end="127:53"><call pos:start="127:9" pos:end="127:53"><name pos:start="127:9" pos:end="127:19">term_printf</name><argument_list pos:start="127:20" pos:end="127:53">(<argument pos:start="127:21" pos:end="127:52"><expr pos:start="127:21" pos:end="127:52"><literal type="string" pos:start="127:21" pos:end="127:52">"Could not open VM state file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="129:9" pos:end="129:21">goto <name pos:start="129:14" pos:end="129:20">the_end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:31"><expr pos:start="133:5" pos:end="133:30"><name pos:start="133:5" pos:end="133:7">ret</name> <operator pos:start="133:9" pos:end="133:9">=</operator> <call pos:start="133:11" pos:end="133:30"><name pos:start="133:11" pos:end="133:27">qemu_savevm_state</name><argument_list pos:start="133:28" pos:end="133:30">(<argument pos:start="133:29" pos:end="133:29"><expr pos:start="133:29" pos:end="133:29"><name pos:start="133:29" pos:end="133:29">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:38"><expr pos:start="135:5" pos:end="135:37"><name pos:start="135:5" pos:end="135:21"><name pos:start="135:5" pos:end="135:6">sn</name><operator pos:start="135:7" pos:end="135:8">-&gt;</operator><name pos:start="135:9" pos:end="135:21">vm_state_size</name></name> <operator pos:start="135:23" pos:end="135:23">=</operator> <call pos:start="135:25" pos:end="135:37"><name pos:start="135:25" pos:end="135:34">qemu_ftell</name><argument_list pos:start="135:35" pos:end="135:37">(<argument pos:start="135:36" pos:end="135:36"><expr pos:start="135:36" pos:end="135:36"><name pos:start="135:36" pos:end="135:36">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:19"><expr pos:start="137:5" pos:end="137:18"><call pos:start="137:5" pos:end="137:18"><name pos:start="137:5" pos:end="137:15">qemu_fclose</name><argument_list pos:start="137:16" pos:end="137:18">(<argument pos:start="137:17" pos:end="137:17"><expr pos:start="137:17" pos:end="137:17"><name pos:start="137:17" pos:end="137:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:16">(<expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:11">ret</name> <operator pos:start="139:13" pos:end="139:13">&lt;</operator> <literal type="number" pos:start="139:15" pos:end="139:15">0</literal></expr>)</condition> <block pos:start="139:18" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:21">

        <expr_stmt pos:start="141:9" pos:end="141:56"><expr pos:start="141:9" pos:end="141:55"><call pos:start="141:9" pos:end="141:55"><name pos:start="141:9" pos:end="141:19">term_printf</name><argument_list pos:start="141:20" pos:end="141:55">(<argument pos:start="141:21" pos:end="141:49"><expr pos:start="141:21" pos:end="141:49"><literal type="string" pos:start="141:21" pos:end="141:49">"Error %d while writing VM\n"</literal></expr></argument>, <argument pos:start="141:52" pos:end="141:54"><expr pos:start="141:52" pos:end="141:54"><name pos:start="141:52" pos:end="141:54">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="143:9" pos:end="143:21">goto <name pos:start="143:14" pos:end="143:20">the_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="149:5" pos:end="149:30">/* create the snapshots */</comment>



    <for pos:start="153:5" pos:end="185:5">for<control pos:start="153:8" pos:end="153:34">(<init pos:start="153:9" pos:end="153:14"><expr pos:start="153:9" pos:end="153:13"><name pos:start="153:9" pos:end="153:9">i</name> <operator pos:start="153:11" pos:end="153:11">=</operator> <literal type="number" pos:start="153:13" pos:end="153:13">0</literal></expr>;</init> <condition pos:start="153:16" pos:end="153:29"><expr pos:start="153:16" pos:end="153:28"><name pos:start="153:16" pos:end="153:16">i</name> <operator pos:start="153:18" pos:end="153:18">&lt;</operator> <name pos:start="153:20" pos:end="153:28">nb_drives</name></expr>;</condition> <incr pos:start="153:31" pos:end="153:33"><expr pos:start="153:31" pos:end="153:33"><name pos:start="153:31" pos:end="153:31">i</name><operator pos:start="153:32" pos:end="153:33">++</operator></expr></incr>)</control> <block pos:start="153:36" pos:end="185:5">{<block_content pos:start="155:9" pos:end="183:9">

        <expr_stmt pos:start="155:9" pos:end="155:35"><expr pos:start="155:9" pos:end="155:34"><name pos:start="155:9" pos:end="155:11">bs1</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <name pos:start="155:15" pos:end="155:29"><name pos:start="155:15" pos:end="155:26">drives_table</name><index pos:start="155:27" pos:end="155:29">[<expr pos:start="155:28" pos:end="155:28"><name pos:start="155:28" pos:end="155:28">i</name></expr>]</index></name><operator pos:start="155:30" pos:end="155:30">.</operator><name pos:start="155:31" pos:end="155:34">bdrv</name></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="183:9"><if pos:start="157:9" pos:end="183:9">if <condition pos:start="157:12" pos:end="157:35">(<expr pos:start="157:13" pos:end="157:34"><call pos:start="157:13" pos:end="157:34"><name pos:start="157:13" pos:end="157:29">bdrv_has_snapshot</name><argument_list pos:start="157:30" pos:end="157:34">(<argument pos:start="157:31" pos:end="157:33"><expr pos:start="157:31" pos:end="157:33"><name pos:start="157:31" pos:end="157:33">bs1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:37" pos:end="183:9">{<block_content pos:start="159:13" pos:end="181:13">

            <if_stmt pos:start="159:13" pos:end="171:13"><if pos:start="159:13" pos:end="171:13">if <condition pos:start="159:16" pos:end="159:28">(<expr pos:start="159:17" pos:end="159:27"><name pos:start="159:17" pos:end="159:27">must_delete</name></expr>)</condition> <block pos:start="159:30" pos:end="171:13">{<block_content pos:start="161:17" pos:end="169:17">

                <expr_stmt pos:start="161:17" pos:end="161:64"><expr pos:start="161:17" pos:end="161:63"><name pos:start="161:17" pos:end="161:19">ret</name> <operator pos:start="161:21" pos:end="161:21">=</operator> <call pos:start="161:23" pos:end="161:63"><name pos:start="161:23" pos:end="161:42">bdrv_snapshot_delete</name><argument_list pos:start="161:43" pos:end="161:63">(<argument pos:start="161:44" pos:end="161:46"><expr pos:start="161:44" pos:end="161:46"><name pos:start="161:44" pos:end="161:46">bs1</name></expr></argument>, <argument pos:start="161:49" pos:end="161:62"><expr pos:start="161:49" pos:end="161:62"><name pos:start="161:49" pos:end="161:62"><name pos:start="161:49" pos:end="161:54">old_sn</name><operator pos:start="161:55" pos:end="161:56">-&gt;</operator><name pos:start="161:57" pos:end="161:62">id_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="163:17" pos:end="169:17"><if pos:start="163:17" pos:end="169:17">if <condition pos:start="163:20" pos:end="163:28">(<expr pos:start="163:21" pos:end="163:27"><name pos:start="163:21" pos:end="163:23">ret</name> <operator pos:start="163:25" pos:end="163:25">&lt;</operator> <literal type="number" pos:start="163:27" pos:end="163:27">0</literal></expr>)</condition> <block pos:start="163:30" pos:end="169:17">{<block_content pos:start="165:21" pos:end="167:59">

                    <expr_stmt pos:start="165:21" pos:end="167:59"><expr pos:start="165:21" pos:end="167:58"><call pos:start="165:21" pos:end="167:58"><name pos:start="165:21" pos:end="165:31">term_printf</name><argument_list pos:start="165:32" pos:end="167:58">(<argument pos:start="165:33" pos:end="165:73"><expr pos:start="165:33" pos:end="165:73"><literal type="string" pos:start="165:33" pos:end="165:73">"Error while deleting snapshot on '%s'\n"</literal></expr></argument>,

                                <argument pos:start="167:33" pos:end="167:57"><expr pos:start="167:33" pos:end="167:57"><call pos:start="167:33" pos:end="167:57"><name pos:start="167:33" pos:end="167:52">bdrv_get_device_name</name><argument_list pos:start="167:53" pos:end="167:57">(<argument pos:start="167:54" pos:end="167:56"><expr pos:start="167:54" pos:end="167:56"><name pos:start="167:54" pos:end="167:56">bs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:48"><expr pos:start="173:13" pos:end="173:47"><name pos:start="173:13" pos:end="173:15">ret</name> <operator pos:start="173:17" pos:end="173:17">=</operator> <call pos:start="173:19" pos:end="173:47"><name pos:start="173:19" pos:end="173:38">bdrv_snapshot_create</name><argument_list pos:start="173:39" pos:end="173:47">(<argument pos:start="173:40" pos:end="173:42"><expr pos:start="173:40" pos:end="173:42"><name pos:start="173:40" pos:end="173:42">bs1</name></expr></argument>, <argument pos:start="173:45" pos:end="173:46"><expr pos:start="173:45" pos:end="173:46"><name pos:start="173:45" pos:end="173:46">sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="175:13" pos:end="181:13"><if pos:start="175:13" pos:end="181:13">if <condition pos:start="175:16" pos:end="175:24">(<expr pos:start="175:17" pos:end="175:23"><name pos:start="175:17" pos:end="175:19">ret</name> <operator pos:start="175:21" pos:end="175:21">&lt;</operator> <literal type="number" pos:start="175:23" pos:end="175:23">0</literal></expr>)</condition> <block pos:start="175:26" pos:end="181:13">{<block_content pos:start="177:17" pos:end="179:55">

                <expr_stmt pos:start="177:17" pos:end="179:55"><expr pos:start="177:17" pos:end="179:54"><call pos:start="177:17" pos:end="179:54"><name pos:start="177:17" pos:end="177:27">term_printf</name><argument_list pos:start="177:28" pos:end="179:54">(<argument pos:start="177:29" pos:end="177:69"><expr pos:start="177:29" pos:end="177:69"><literal type="string" pos:start="177:29" pos:end="177:69">"Error while creating snapshot on '%s'\n"</literal></expr></argument>,

                            <argument pos:start="179:29" pos:end="179:53"><expr pos:start="179:29" pos:end="179:53"><call pos:start="179:29" pos:end="179:53"><name pos:start="179:29" pos:end="179:48">bdrv_get_device_name</name><argument_list pos:start="179:49" pos:end="179:53">(<argument pos:start="179:50" pos:end="179:52"><expr pos:start="179:50" pos:end="179:52"><name pos:start="179:50" pos:end="179:52">bs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



 <label pos:start="189:2" pos:end="189:9"><name pos:start="189:2" pos:end="189:8">the_end</name>:</label>

    <if_stmt pos:start="191:5" pos:end="193:19"><if pos:start="191:5" pos:end="193:19">if <condition pos:start="191:8" pos:end="191:25">(<expr pos:start="191:9" pos:end="191:24"><name pos:start="191:9" pos:end="191:24">saved_vm_running</name></expr>)</condition><block type="pseudo" pos:start="193:9" pos:end="193:19"><block_content pos:start="193:9" pos:end="193:19">

        <expr_stmt pos:start="193:9" pos:end="193:19"><expr pos:start="193:9" pos:end="193:18"><call pos:start="193:9" pos:end="193:18"><name pos:start="193:9" pos:end="193:16">vm_start</name><argument_list pos:start="193:17" pos:end="193:18">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
