<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12948.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">avfilter_graph_parse</name><parameter_list pos:start="1:25" pos:end="5:39">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:38">AVFilterGraph</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">graph</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:66"><decl pos:start="1:48" pos:end="1:66"><type pos:start="1:48" pos:end="1:66"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:57">char</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:66">filters</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:56"><decl pos:start="3:26" pos:end="3:56"><type pos:start="3:26" pos:end="3:56"><name pos:start="3:26" pos:end="3:38">AVFilterInOut</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier><modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:56">open_inputs_ptr</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:90"><decl pos:start="3:59" pos:end="3:90"><type pos:start="3:59" pos:end="3:90"><name pos:start="3:59" pos:end="3:71">AVFilterInOut</name> <modifier pos:start="3:73" pos:end="3:73">*</modifier><modifier pos:start="3:74" pos:end="3:74">*</modifier></type><name pos:start="3:75" pos:end="3:90">open_outputs_ptr</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:38"><decl pos:start="5:26" pos:end="5:38"><type pos:start="5:26" pos:end="5:38"><name pos:start="5:26" pos:end="5:29">void</name> <modifier pos:start="5:31" pos:end="5:31">*</modifier></type><name pos:start="5:32" pos:end="5:38">log_ctx</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="159:1">{<block_content pos:start="9:5" pos:end="157:15">

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">index</name> <init pos:start="9:15" pos:end="9:17">= <expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">0</literal></expr></init></decl>, <decl pos:start="9:20" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:22">ret</name> <init pos:start="9:24" pos:end="9:26">= <expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:12">chr</name> <init pos:start="11:14" pos:end="11:16">= <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">AVFilterInOut</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:30">curr_inputs</name> <init pos:start="15:32" pos:end="15:37">= <expr pos:start="15:34" pos:end="15:37"><name pos:start="15:34" pos:end="15:37">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:78"><decl pos:start="17:5" pos:end="17:77"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">AVFilterInOut</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:30">open_inputs</name>  <init pos:start="17:33" pos:end="17:77">= <expr pos:start="17:35" pos:end="17:77"><ternary pos:start="17:35" pos:end="17:77"><condition pos:start="17:35" pos:end="17:52"><expr pos:start="17:35" pos:end="17:49"><name pos:start="17:35" pos:end="17:49">open_inputs_ptr</name></expr>  ?</condition><then pos:start="17:54" pos:end="17:69"> <expr pos:start="17:54" pos:end="17:69"><operator pos:start="17:54" pos:end="17:54">*</operator><name pos:start="17:55" pos:end="17:69">open_inputs_ptr</name></expr>  </then><else pos:start="17:72" pos:end="17:77">: <expr pos:start="17:74" pos:end="17:77"><name pos:start="17:74" pos:end="17:77">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:78"><decl pos:start="19:5" pos:end="19:77"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">AVFilterInOut</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:31">open_outputs</name> <init pos:start="19:33" pos:end="19:77">= <expr pos:start="19:35" pos:end="19:77"><ternary pos:start="19:35" pos:end="19:77"><condition pos:start="19:35" pos:end="19:52"><expr pos:start="19:35" pos:end="19:50"><name pos:start="19:35" pos:end="19:50">open_outputs_ptr</name></expr> ?</condition><then pos:start="19:54" pos:end="19:70"> <expr pos:start="19:54" pos:end="19:70"><operator pos:start="19:54" pos:end="19:54">*</operator><name pos:start="19:55" pos:end="19:70">open_outputs_ptr</name></expr> </then><else pos:start="19:72" pos:end="19:77">: <expr pos:start="19:74" pos:end="19:77"><name pos:start="19:74" pos:end="19:77">NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <do pos:start="23:5" pos:end="95:39">do <block pos:start="23:8" pos:end="95:5">{<block_content pos:start="25:9" pos:end="93:16">

        <decl_stmt pos:start="25:9" pos:end="25:32"><decl pos:start="25:9" pos:end="25:31"><type pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:23">AVFilterContext</name> <modifier pos:start="25:25" pos:end="25:25">*</modifier></type><name pos:start="25:26" pos:end="25:31">filter</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:42"><decl pos:start="27:9" pos:end="27:41"><type pos:start="27:9" pos:end="27:20"><specifier pos:start="27:9" pos:end="27:13">const</specifier> <name pos:start="27:15" pos:end="27:18">char</name> <modifier pos:start="27:20" pos:end="27:20">*</modifier></type><name pos:start="27:21" pos:end="27:31">filterchain</name> <init pos:start="27:33" pos:end="27:41">= <expr pos:start="27:35" pos:end="27:41"><name pos:start="27:35" pos:end="27:41">filters</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:48"><expr pos:start="29:9" pos:end="29:47"><name pos:start="29:9" pos:end="29:15">filters</name> <operator pos:start="29:17" pos:end="29:18">+=</operator> <call pos:start="29:20" pos:end="29:47"><name pos:start="29:20" pos:end="29:25">strspn</name><argument_list pos:start="29:26" pos:end="29:47">(<argument pos:start="29:27" pos:end="29:33"><expr pos:start="29:27" pos:end="29:33"><name pos:start="29:27" pos:end="29:33">filters</name></expr></argument>, <argument pos:start="29:36" pos:end="29:46"><expr pos:start="29:36" pos:end="29:46"><name pos:start="29:36" pos:end="29:46">WHITESPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="33:9" pos:end="35:21"><if pos:start="33:9" pos:end="35:21">if <condition pos:start="33:12" pos:end="33:85">(<expr pos:start="33:13" pos:end="33:84"><operator pos:start="33:13" pos:end="33:13">(</operator><name pos:start="33:14" pos:end="33:16">ret</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:79"><name pos:start="33:20" pos:end="33:31">parse_inputs</name><argument_list pos:start="33:32" pos:end="33:79">(<argument pos:start="33:33" pos:end="33:40"><expr pos:start="33:33" pos:end="33:40"><operator pos:start="33:33" pos:end="33:33">&amp;</operator><name pos:start="33:34" pos:end="33:40">filters</name></expr></argument>, <argument pos:start="33:43" pos:end="33:54"><expr pos:start="33:43" pos:end="33:54"><operator pos:start="33:43" pos:end="33:43">&amp;</operator><name pos:start="33:44" pos:end="33:54">curr_inputs</name></expr></argument>, <argument pos:start="33:57" pos:end="33:69"><expr pos:start="33:57" pos:end="33:69"><operator pos:start="33:57" pos:end="33:57">&amp;</operator><name pos:start="33:58" pos:end="33:69">open_outputs</name></expr></argument>, <argument pos:start="33:72" pos:end="33:78"><expr pos:start="33:72" pos:end="33:78"><name pos:start="33:72" pos:end="33:78">log_ctx</name></expr></argument>)</argument_list></call><operator pos:start="33:80" pos:end="33:80">)</operator> <operator pos:start="33:82" pos:end="33:82">&lt;</operator> <literal type="number" pos:start="33:84" pos:end="33:84">0</literal></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:21"><block_content pos:start="35:13" pos:end="35:21">

            <goto pos:start="35:13" pos:end="35:21">goto <name pos:start="35:18" pos:end="35:20">end</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="39:9" pos:end="41:21"><if pos:start="39:9" pos:end="41:21">if <condition pos:start="39:12" pos:end="39:79">(<expr pos:start="39:13" pos:end="39:78"><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:16">ret</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:73"><name pos:start="39:20" pos:end="39:31">parse_filter</name><argument_list pos:start="39:32" pos:end="39:73">(<argument pos:start="39:33" pos:end="39:39"><expr pos:start="39:33" pos:end="39:39"><operator pos:start="39:33" pos:end="39:33">&amp;</operator><name pos:start="39:34" pos:end="39:39">filter</name></expr></argument>, <argument pos:start="39:42" pos:end="39:49"><expr pos:start="39:42" pos:end="39:49"><operator pos:start="39:42" pos:end="39:42">&amp;</operator><name pos:start="39:43" pos:end="39:49">filters</name></expr></argument>, <argument pos:start="39:52" pos:end="39:56"><expr pos:start="39:52" pos:end="39:56"><name pos:start="39:52" pos:end="39:56">graph</name></expr></argument>, <argument pos:start="39:59" pos:end="39:63"><expr pos:start="39:59" pos:end="39:63"><name pos:start="39:59" pos:end="39:63">index</name></expr></argument>, <argument pos:start="39:66" pos:end="39:72"><expr pos:start="39:66" pos:end="39:72"><name pos:start="39:66" pos:end="39:72">log_ctx</name></expr></argument>)</argument_list></call><operator pos:start="39:74" pos:end="39:74">)</operator> <operator pos:start="39:76" pos:end="39:76">&lt;</operator> <literal type="number" pos:start="39:78" pos:end="39:78">0</literal></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:21"><block_content pos:start="41:13" pos:end="41:21">

            <goto pos:start="41:13" pos:end="41:21">goto <name pos:start="41:18" pos:end="41:20">end</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="55:9">if <condition pos:start="45:12" pos:end="45:63">(<expr pos:start="45:13" pos:end="45:62"><name pos:start="45:13" pos:end="45:31"><name pos:start="45:13" pos:end="45:18">filter</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:31">input_count</name></name> <operator pos:start="45:33" pos:end="45:34">==</operator> <literal type="number" pos:start="45:36" pos:end="45:36">1</literal> <operator pos:start="45:38" pos:end="45:39">&amp;&amp;</operator> <operator pos:start="45:41" pos:end="45:41">!</operator><name pos:start="45:42" pos:end="45:52">curr_inputs</name> <operator pos:start="45:54" pos:end="45:55">&amp;&amp;</operator> <operator pos:start="45:57" pos:end="45:57">!</operator><name pos:start="45:58" pos:end="45:62">index</name></expr>)</condition> <block pos:start="45:65" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:25">

            <comment type="block" pos:start="47:13" pos:end="47:71">/* First input pad, assume it is "[in]" if not specified */</comment>

            <decl_stmt pos:start="49:13" pos:end="49:37"><decl pos:start="49:13" pos:end="49:36"><type pos:start="49:13" pos:end="49:24"><specifier pos:start="49:13" pos:end="49:17">const</specifier> <name pos:start="49:19" pos:end="49:22">char</name> <modifier pos:start="49:24" pos:end="49:24">*</modifier></type><name pos:start="49:25" pos:end="49:27">tmp</name> <init pos:start="49:29" pos:end="49:36">= <expr pos:start="49:31" pos:end="49:36"><literal type="string" pos:start="49:31" pos:end="49:36">"[in]"</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="51:13" pos:end="53:25"><if pos:start="51:13" pos:end="53:25">if <condition pos:start="51:16" pos:end="51:85">(<expr pos:start="51:17" pos:end="51:84"><operator pos:start="51:17" pos:end="51:17">(</operator><name pos:start="51:18" pos:end="51:20">ret</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <call pos:start="51:24" pos:end="51:79"><name pos:start="51:24" pos:end="51:35">parse_inputs</name><argument_list pos:start="51:36" pos:end="51:79">(<argument pos:start="51:37" pos:end="51:40"><expr pos:start="51:37" pos:end="51:40"><operator pos:start="51:37" pos:end="51:37">&amp;</operator><name pos:start="51:38" pos:end="51:40">tmp</name></expr></argument>, <argument pos:start="51:43" pos:end="51:54"><expr pos:start="51:43" pos:end="51:54"><operator pos:start="51:43" pos:end="51:43">&amp;</operator><name pos:start="51:44" pos:end="51:54">curr_inputs</name></expr></argument>, <argument pos:start="51:57" pos:end="51:69"><expr pos:start="51:57" pos:end="51:69"><operator pos:start="51:57" pos:end="51:57">&amp;</operator><name pos:start="51:58" pos:end="51:69">open_outputs</name></expr></argument>, <argument pos:start="51:72" pos:end="51:78"><expr pos:start="51:72" pos:end="51:78"><name pos:start="51:72" pos:end="51:78">log_ctx</name></expr></argument>)</argument_list></call><operator pos:start="51:80" pos:end="51:80">)</operator> <operator pos:start="51:82" pos:end="51:82">&lt;</operator> <literal type="number" pos:start="51:84" pos:end="51:84">0</literal></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:25"><block_content pos:start="53:17" pos:end="53:25">

                <goto pos:start="53:17" pos:end="53:25">goto <name pos:start="53:22" pos:end="53:24">end</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="59:9" pos:end="61:21"><if pos:start="59:9" pos:end="61:21">if <condition pos:start="59:12" pos:end="59:88">(<expr pos:start="59:13" pos:end="59:87"><operator pos:start="59:13" pos:end="59:13">(</operator><name pos:start="59:14" pos:end="59:16">ret</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <call pos:start="59:20" pos:end="59:82"><name pos:start="59:20" pos:end="59:37">link_filter_inouts</name><argument_list pos:start="59:38" pos:end="59:82">(<argument pos:start="59:39" pos:end="59:44"><expr pos:start="59:39" pos:end="59:44"><name pos:start="59:39" pos:end="59:44">filter</name></expr></argument>, <argument pos:start="59:47" pos:end="59:58"><expr pos:start="59:47" pos:end="59:58"><operator pos:start="59:47" pos:end="59:47">&amp;</operator><name pos:start="59:48" pos:end="59:58">curr_inputs</name></expr></argument>, <argument pos:start="59:61" pos:end="59:72"><expr pos:start="59:61" pos:end="59:72"><operator pos:start="59:61" pos:end="59:61">&amp;</operator><name pos:start="59:62" pos:end="59:72">open_inputs</name></expr></argument>, <argument pos:start="59:75" pos:end="59:81"><expr pos:start="59:75" pos:end="59:81"><name pos:start="59:75" pos:end="59:81">log_ctx</name></expr></argument>)</argument_list></call><operator pos:start="59:83" pos:end="59:83">)</operator> <operator pos:start="59:85" pos:end="59:85">&lt;</operator> <literal type="number" pos:start="59:87" pos:end="59:87">0</literal></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:21"><block_content pos:start="61:13" pos:end="61:21">

            <goto pos:start="61:13" pos:end="61:21">goto <name pos:start="61:18" pos:end="61:20">end</name>;</goto></block_content></block></if></if_stmt>



        <if_stmt pos:start="65:9" pos:end="69:21"><if pos:start="65:9" pos:end="69:21">if <condition pos:start="65:12" pos:end="67:47">(<expr pos:start="65:13" pos:end="67:46"><operator pos:start="65:13" pos:end="65:13">(</operator><name pos:start="65:14" pos:end="65:16">ret</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="67:41"><name pos:start="65:20" pos:end="65:32">parse_outputs</name><argument_list pos:start="65:33" pos:end="67:41">(<argument pos:start="65:34" pos:end="65:41"><expr pos:start="65:34" pos:end="65:41"><operator pos:start="65:34" pos:end="65:34">&amp;</operator><name pos:start="65:35" pos:end="65:41">filters</name></expr></argument>, <argument pos:start="65:44" pos:end="65:55"><expr pos:start="65:44" pos:end="65:55"><operator pos:start="65:44" pos:end="65:44">&amp;</operator><name pos:start="65:45" pos:end="65:55">curr_inputs</name></expr></argument>, <argument pos:start="65:58" pos:end="65:69"><expr pos:start="65:58" pos:end="65:69"><operator pos:start="65:58" pos:end="65:58">&amp;</operator><name pos:start="65:59" pos:end="65:69">open_inputs</name></expr></argument>, <argument pos:start="65:72" pos:end="65:84"><expr pos:start="65:72" pos:end="65:84"><operator pos:start="65:72" pos:end="65:72">&amp;</operator><name pos:start="65:73" pos:end="65:84">open_outputs</name></expr></argument>,

                                 <argument pos:start="67:34" pos:end="67:40"><expr pos:start="67:34" pos:end="67:40"><name pos:start="67:34" pos:end="67:40">log_ctx</name></expr></argument>)</argument_list></call><operator pos:start="67:42" pos:end="67:42">)</operator> <operator pos:start="67:44" pos:end="67:44">&lt;</operator> <literal type="number" pos:start="67:46" pos:end="67:46">0</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:21"><block_content pos:start="69:13" pos:end="69:21">

            <goto pos:start="69:13" pos:end="69:21">goto <name pos:start="69:18" pos:end="69:20">end</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:48"><expr pos:start="73:9" pos:end="73:47"><name pos:start="73:9" pos:end="73:15">filters</name> <operator pos:start="73:17" pos:end="73:18">+=</operator> <call pos:start="73:20" pos:end="73:47"><name pos:start="73:20" pos:end="73:25">strspn</name><argument_list pos:start="73:26" pos:end="73:47">(<argument pos:start="73:27" pos:end="73:33"><expr pos:start="73:27" pos:end="73:33"><name pos:start="73:27" pos:end="73:33">filters</name></expr></argument>, <argument pos:start="73:36" pos:end="73:46"><expr pos:start="73:36" pos:end="73:46"><name pos:start="73:36" pos:end="73:46">WHITESPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:25"><expr pos:start="75:9" pos:end="75:24"><name pos:start="75:9" pos:end="75:11">chr</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">*</operator><name pos:start="75:16" pos:end="75:22">filters</name><operator pos:start="75:23" pos:end="75:24">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="79:9" pos:end="91:9"><if pos:start="79:9" pos:end="91:9">if <condition pos:start="79:12" pos:end="79:38">(<expr pos:start="79:13" pos:end="79:37"><name pos:start="79:13" pos:end="79:15">chr</name> <operator pos:start="79:17" pos:end="79:18">==</operator> <literal type="char" pos:start="79:20" pos:end="79:22">';'</literal> <operator pos:start="79:24" pos:end="79:25">&amp;&amp;</operator> <name pos:start="79:27" pos:end="79:37">curr_inputs</name></expr>)</condition> <block pos:start="79:40" pos:end="91:9">{<block_content pos:start="81:13" pos:end="89:21">

            <expr_stmt pos:start="81:13" pos:end="85:32"><expr pos:start="81:13" pos:end="85:31"><call pos:start="81:13" pos:end="85:31"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="85:31">(<argument pos:start="81:20" pos:end="81:26"><expr pos:start="81:20" pos:end="81:26"><name pos:start="81:20" pos:end="81:26">log_ctx</name></expr></argument>, <argument pos:start="81:29" pos:end="81:40"><expr pos:start="81:29" pos:end="81:40"><name pos:start="81:29" pos:end="81:40">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="83:20" pos:end="83:86"><expr pos:start="83:20" pos:end="83:86"><literal type="string" pos:start="83:20" pos:end="83:86">"Invalid filterchain containing an unlabelled output pad: \"%s\"\n"</literal></expr></argument>,

                   <argument pos:start="85:20" pos:end="85:30"><expr pos:start="85:20" pos:end="85:30"><name pos:start="85:20" pos:end="85:30">filterchain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:34"><expr pos:start="87:13" pos:end="87:33"><name pos:start="87:13" pos:end="87:15">ret</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <call pos:start="87:19" pos:end="87:33"><name pos:start="87:19" pos:end="87:25">AVERROR</name><argument_list pos:start="87:26" pos:end="87:33">(<argument pos:start="87:27" pos:end="87:32"><expr pos:start="87:27" pos:end="87:32"><name pos:start="87:27" pos:end="87:32">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="89:13" pos:end="89:21">goto <name pos:start="89:18" pos:end="89:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:16"><expr pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:13">index</name><operator pos:start="93:14" pos:end="93:15">++</operator></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="95:13" pos:end="95:38">(<expr pos:start="95:14" pos:end="95:37"><name pos:start="95:14" pos:end="95:16">chr</name> <operator pos:start="95:18" pos:end="95:19">==</operator> <literal type="char" pos:start="95:21" pos:end="95:23">','</literal> <operator pos:start="95:25" pos:end="95:26">||</operator> <name pos:start="95:28" pos:end="95:30">chr</name> <operator pos:start="95:32" pos:end="95:33">==</operator> <literal type="char" pos:start="95:35" pos:end="95:37">';'</literal></expr>)</condition>;</do>



    <if_stmt pos:start="99:5" pos:end="111:5"><if pos:start="99:5" pos:end="111:5">if <condition pos:start="99:8" pos:end="99:12">(<expr pos:start="99:9" pos:end="99:11"><name pos:start="99:9" pos:end="99:11">chr</name></expr>)</condition> <block pos:start="99:14" pos:end="111:5">{<block_content pos:start="101:9" pos:end="109:17">

        <expr_stmt pos:start="101:9" pos:end="105:28"><expr pos:start="101:9" pos:end="105:27"><call pos:start="101:9" pos:end="105:27"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="105:27">(<argument pos:start="101:16" pos:end="101:22"><expr pos:start="101:16" pos:end="101:22"><name pos:start="101:16" pos:end="101:22">log_ctx</name></expr></argument>, <argument pos:start="101:25" pos:end="101:36"><expr pos:start="101:25" pos:end="101:36"><name pos:start="101:25" pos:end="101:36">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="103:16" pos:end="103:70"><expr pos:start="103:16" pos:end="103:70"><literal type="string" pos:start="103:16" pos:end="103:70">"Unable to parse graph description substring: \"%s\"\n"</literal></expr></argument>,

               <argument pos:start="105:16" pos:end="105:26"><expr pos:start="105:16" pos:end="105:26"><name pos:start="105:16" pos:end="105:22">filters</name> <operator pos:start="105:24" pos:end="105:24">-</operator> <literal type="number" pos:start="105:26" pos:end="105:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:30"><expr pos:start="107:9" pos:end="107:29"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <call pos:start="107:15" pos:end="107:29"><name pos:start="107:15" pos:end="107:21">AVERROR</name><argument_list pos:start="107:22" pos:end="107:29">(<argument pos:start="107:23" pos:end="107:28"><expr pos:start="107:23" pos:end="107:28"><name pos:start="107:23" pos:end="107:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:17">goto <name pos:start="109:14" pos:end="109:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="127:5"><if pos:start="115:5" pos:end="127:5">if <condition pos:start="115:8" pos:end="115:72">(<expr pos:start="115:9" pos:end="115:71"><name pos:start="115:9" pos:end="115:19">open_inputs</name> <operator pos:start="115:21" pos:end="115:22">&amp;&amp;</operator> <operator pos:start="115:24" pos:end="115:24">!</operator><call pos:start="115:25" pos:end="115:56"><name pos:start="115:25" pos:end="115:30">strcmp</name><argument_list pos:start="115:31" pos:end="115:56">(<argument pos:start="115:32" pos:end="115:48"><expr pos:start="115:32" pos:end="115:48"><name pos:start="115:32" pos:end="115:48"><name pos:start="115:32" pos:end="115:42">open_inputs</name><operator pos:start="115:43" pos:end="115:44">-&gt;</operator><name pos:start="115:45" pos:end="115:48">name</name></name></expr></argument>, <argument pos:start="115:51" pos:end="115:55"><expr pos:start="115:51" pos:end="115:55"><literal type="string" pos:start="115:51" pos:end="115:55">"out"</literal></expr></argument>)</argument_list></call> <operator pos:start="115:58" pos:end="115:59">&amp;&amp;</operator> <name pos:start="115:61" pos:end="115:71">curr_inputs</name></expr>)</condition> <block pos:start="115:74" pos:end="127:5">{<block_content pos:start="119:9" pos:end="125:21">

        <comment type="block" pos:start="117:9" pos:end="117:68">/* Last output pad, assume it is "[out]" if not specified */</comment>

        <decl_stmt pos:start="119:9" pos:end="119:34"><decl pos:start="119:9" pos:end="119:33"><type pos:start="119:9" pos:end="119:20"><specifier pos:start="119:9" pos:end="119:13">const</specifier> <name pos:start="119:15" pos:end="119:18">char</name> <modifier pos:start="119:20" pos:end="119:20">*</modifier></type><name pos:start="119:21" pos:end="119:23">tmp</name> <init pos:start="119:25" pos:end="119:33">= <expr pos:start="119:27" pos:end="119:33"><literal type="string" pos:start="119:27" pos:end="119:33">"[out]"</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="121:9" pos:end="125:21"><if pos:start="121:9" pos:end="125:21">if <condition pos:start="121:12" pos:end="123:47">(<expr pos:start="121:13" pos:end="123:46"><operator pos:start="121:13" pos:end="121:13">(</operator><name pos:start="121:14" pos:end="121:16">ret</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <call pos:start="121:20" pos:end="123:41"><name pos:start="121:20" pos:end="121:32">parse_outputs</name><argument_list pos:start="121:33" pos:end="123:41">(<argument pos:start="121:34" pos:end="121:37"><expr pos:start="121:34" pos:end="121:37"><operator pos:start="121:34" pos:end="121:34">&amp;</operator><name pos:start="121:35" pos:end="121:37">tmp</name></expr></argument>, <argument pos:start="121:40" pos:end="121:51"><expr pos:start="121:40" pos:end="121:51"><operator pos:start="121:40" pos:end="121:40">&amp;</operator><name pos:start="121:41" pos:end="121:51">curr_inputs</name></expr></argument>, <argument pos:start="121:54" pos:end="121:65"><expr pos:start="121:54" pos:end="121:65"><operator pos:start="121:54" pos:end="121:54">&amp;</operator><name pos:start="121:55" pos:end="121:65">open_inputs</name></expr></argument>, <argument pos:start="121:68" pos:end="121:80"><expr pos:start="121:68" pos:end="121:80"><operator pos:start="121:68" pos:end="121:68">&amp;</operator><name pos:start="121:69" pos:end="121:80">open_outputs</name></expr></argument>,

                                 <argument pos:start="123:34" pos:end="123:40"><expr pos:start="123:34" pos:end="123:40"><name pos:start="123:34" pos:end="123:40">log_ctx</name></expr></argument>)</argument_list></call><operator pos:start="123:42" pos:end="123:42">)</operator> <operator pos:start="123:44" pos:end="123:44">&lt;</operator> <literal type="number" pos:start="123:46" pos:end="123:46">0</literal></expr>)</condition><block type="pseudo" pos:start="125:13" pos:end="125:21"><block_content pos:start="125:13" pos:end="125:21">

            <goto pos:start="125:13" pos:end="125:21">goto <name pos:start="125:18" pos:end="125:20">end</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="131:1" pos:end="131:4"><name pos:start="131:1" pos:end="131:3">end</name>:</label>

    <comment type="block" pos:start="133:5" pos:end="133:64">/* clear open_in/outputs only if not passed as parameters */</comment>

    <if_stmt pos:start="135:5" pos:end="137:43"><if pos:start="135:5" pos:end="135:56">if <condition pos:start="135:8" pos:end="135:24">(<expr pos:start="135:9" pos:end="135:23"><name pos:start="135:9" pos:end="135:23">open_inputs_ptr</name></expr>)</condition><block type="pseudo" pos:start="135:26" pos:end="135:56"><block_content pos:start="135:26" pos:end="135:56"> <expr_stmt pos:start="135:26" pos:end="135:56"><expr pos:start="135:26" pos:end="135:55"><operator pos:start="135:26" pos:end="135:26">*</operator><name pos:start="135:27" pos:end="135:41">open_inputs_ptr</name> <operator pos:start="135:43" pos:end="135:43">=</operator> <name pos:start="135:45" pos:end="135:55">open_inputs</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="137:5" pos:end="137:43">else<block type="pseudo" pos:start="137:10" pos:end="137:43"><block_content pos:start="137:10" pos:end="137:43"> <expr_stmt pos:start="137:10" pos:end="137:43"><expr pos:start="137:10" pos:end="137:42"><call pos:start="137:10" pos:end="137:42"><name pos:start="137:10" pos:end="137:28">avfilter_inout_free</name><argument_list pos:start="137:29" pos:end="137:42">(<argument pos:start="137:30" pos:end="137:41"><expr pos:start="137:30" pos:end="137:41"><operator pos:start="137:30" pos:end="137:30">&amp;</operator><name pos:start="137:31" pos:end="137:41">open_inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="139:5" pos:end="141:44"><if pos:start="139:5" pos:end="139:59">if <condition pos:start="139:8" pos:end="139:25">(<expr pos:start="139:9" pos:end="139:24"><name pos:start="139:9" pos:end="139:24">open_outputs_ptr</name></expr>)</condition><block type="pseudo" pos:start="139:27" pos:end="139:59"><block_content pos:start="139:27" pos:end="139:59"> <expr_stmt pos:start="139:27" pos:end="139:59"><expr pos:start="139:27" pos:end="139:58"><operator pos:start="139:27" pos:end="139:27">*</operator><name pos:start="139:28" pos:end="139:43">open_outputs_ptr</name> <operator pos:start="139:45" pos:end="139:45">=</operator> <name pos:start="139:47" pos:end="139:58">open_outputs</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="141:5" pos:end="141:44">else<block type="pseudo" pos:start="141:10" pos:end="141:44"><block_content pos:start="141:10" pos:end="141:44"> <expr_stmt pos:start="141:10" pos:end="141:44"><expr pos:start="141:10" pos:end="141:43"><call pos:start="141:10" pos:end="141:43"><name pos:start="141:10" pos:end="141:28">avfilter_inout_free</name><argument_list pos:start="141:29" pos:end="141:43">(<argument pos:start="141:30" pos:end="141:42"><expr pos:start="141:30" pos:end="141:42"><operator pos:start="141:30" pos:end="141:30">&amp;</operator><name pos:start="141:31" pos:end="141:42">open_outputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:38"><expr pos:start="143:5" pos:end="143:37"><call pos:start="143:5" pos:end="143:37"><name pos:start="143:5" pos:end="143:23">avfilter_inout_free</name><argument_list pos:start="143:24" pos:end="143:37">(<argument pos:start="143:25" pos:end="143:36"><expr pos:start="143:25" pos:end="143:36"><operator pos:start="143:25" pos:end="143:25">&amp;</operator><name pos:start="143:26" pos:end="143:36">curr_inputs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="147:5" pos:end="155:5"><if pos:start="147:5" pos:end="155:5">if <condition pos:start="147:8" pos:end="147:16">(<expr pos:start="147:9" pos:end="147:15"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">&lt;</operator> <literal type="number" pos:start="147:15" pos:end="147:15">0</literal></expr>)</condition> <block pos:start="147:18" pos:end="155:5">{<block_content pos:start="149:9" pos:end="153:34">

        <for pos:start="149:9" pos:end="151:67">for <control pos:start="149:13" pos:end="149:62">(<init pos:start="149:14" pos:end="149:14">;</init> <condition pos:start="149:16" pos:end="149:39"><expr pos:start="149:16" pos:end="149:38"><name pos:start="149:16" pos:end="149:34"><name pos:start="149:16" pos:end="149:20">graph</name><operator pos:start="149:21" pos:end="149:22">-&gt;</operator><name pos:start="149:23" pos:end="149:34">filter_count</name></name> <operator pos:start="149:36" pos:end="149:36">&gt;</operator> <literal type="number" pos:start="149:38" pos:end="149:38">0</literal></expr>;</condition> <incr pos:start="149:41" pos:end="149:61"><expr pos:start="149:41" pos:end="149:61"><name pos:start="149:41" pos:end="149:59"><name pos:start="149:41" pos:end="149:45">graph</name><operator pos:start="149:46" pos:end="149:47">-&gt;</operator><name pos:start="149:48" pos:end="149:59">filter_count</name></name><operator pos:start="149:60" pos:end="149:61">--</operator></expr></incr>)</control><block type="pseudo" pos:start="151:13" pos:end="151:67"><block_content pos:start="151:13" pos:end="151:67">

            <expr_stmt pos:start="151:13" pos:end="151:67"><expr pos:start="151:13" pos:end="151:66"><call pos:start="151:13" pos:end="151:66"><name pos:start="151:13" pos:end="151:25">avfilter_free</name><argument_list pos:start="151:26" pos:end="151:66">(<argument pos:start="151:27" pos:end="151:65"><expr pos:start="151:27" pos:end="151:65"><name pos:start="151:27" pos:end="151:65"><name pos:start="151:27" pos:end="151:31">graph</name><operator pos:start="151:32" pos:end="151:33">-&gt;</operator><name pos:start="151:34" pos:end="151:40">filters</name><index pos:start="151:41" pos:end="151:65">[<expr pos:start="151:42" pos:end="151:64"><name pos:start="151:42" pos:end="151:60"><name pos:start="151:42" pos:end="151:46">graph</name><operator pos:start="151:47" pos:end="151:48">-&gt;</operator><name pos:start="151:49" pos:end="151:60">filter_count</name></name> <operator pos:start="151:62" pos:end="151:62">-</operator> <literal type="number" pos:start="151:64" pos:end="151:64">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="153:9" pos:end="153:34"><expr pos:start="153:9" pos:end="153:33"><call pos:start="153:9" pos:end="153:33"><name pos:start="153:9" pos:end="153:16">av_freep</name><argument_list pos:start="153:17" pos:end="153:33">(<argument pos:start="153:18" pos:end="153:32"><expr pos:start="153:18" pos:end="153:32"><operator pos:start="153:18" pos:end="153:18">&amp;</operator><name pos:start="153:19" pos:end="153:32"><name pos:start="153:19" pos:end="153:23">graph</name><operator pos:start="153:24" pos:end="153:25">-&gt;</operator><name pos:start="153:26" pos:end="153:32">filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="157:5" pos:end="157:15">return <expr pos:start="157:12" pos:end="157:14"><name pos:start="157:12" pos:end="157:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
