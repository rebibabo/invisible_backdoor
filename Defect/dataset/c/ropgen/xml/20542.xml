<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20542.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="5:56">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, 

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:41"><decl pos:start="5:30" pos:end="5:41"><type pos:start="5:30" pos:end="5:41"><name pos:start="5:30" pos:end="5:36">uint8_t</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:41">buf</name></decl></parameter>, <parameter pos:start="5:44" pos:end="5:55"><decl pos:start="5:44" pos:end="5:55"><type pos:start="5:44" pos:end="5:55"><name pos:start="5:44" pos:end="5:46">int</name></type> <name pos:start="5:48" pos:end="5:55">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="149:1">{<block_content pos:start="9:5" pos:end="147:54">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">H264Context</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">h</name> <init pos:start="9:20" pos:end="9:37">= <expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">MpegEncContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name> <init pos:start="11:23" pos:end="11:29">= <expr pos:start="11:25" pos:end="11:29"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:26">h</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">pict</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt> 

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">float</name></type> <name pos:start="15:11" pos:end="15:20">new_aspect</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">buf_index</name></decl>;</decl_stmt>

    

    <expr_stmt pos:start="21:5" pos:end="21:27"><expr pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:12">flags</name></name><operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:26"><name pos:start="21:15" pos:end="21:19">avctx</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:26">flags</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:19"><expr pos:start="25:5" pos:end="25:18"><operator pos:start="25:5" pos:end="25:5">*</operator><name pos:start="25:6" pos:end="25:14">data_size</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>;</expr_stmt>

   

   <comment type="block" pos:start="29:4" pos:end="29:33">/* no supplementary picture */</comment>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:22">(<expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:16">buf_size</name> <operator pos:start="31:18" pos:end="31:19">==</operator> <literal type="number" pos:start="31:21" pos:end="31:21">0</literal></expr>)</condition> <block pos:start="31:24" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:17">

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    

    <if_stmt pos:start="39:5" pos:end="51:5"><if pos:start="39:5" pos:end="51:5">if<condition pos:start="39:7" pos:end="39:37">(<expr pos:start="39:8" pos:end="39:36"><name pos:start="39:8" pos:end="39:15"><name pos:start="39:8" pos:end="39:8">s</name><operator pos:start="39:9" pos:end="39:10">-&gt;</operator><name pos:start="39:11" pos:end="39:15">flags</name></name><operator pos:start="39:16" pos:end="39:16">&amp;</operator><name pos:start="39:17" pos:end="39:36">CODEC_FLAG_TRUNCATED</name></expr>)</condition><block pos:start="39:38" pos:end="51:5">{<block_content pos:start="41:9" pos:end="47:28">

        <decl_stmt pos:start="41:9" pos:end="41:51"><decl pos:start="41:9" pos:end="41:50"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:16">next</name><init pos:start="41:17" pos:end="41:50">= <expr pos:start="41:19" pos:end="41:50"><call pos:start="41:19" pos:end="41:50"><name pos:start="41:19" pos:end="41:32">find_frame_end</name><argument_list pos:start="41:33" pos:end="41:50">(<argument pos:start="41:34" pos:end="41:34"><expr pos:start="41:34" pos:end="41:34"><name pos:start="41:34" pos:end="41:34">s</name></expr></argument>, <argument pos:start="41:37" pos:end="41:39"><expr pos:start="41:37" pos:end="41:39"><name pos:start="41:37" pos:end="41:39">buf</name></expr></argument>, <argument pos:start="41:42" pos:end="41:49"><expr pos:start="41:42" pos:end="41:49"><name pos:start="41:42" pos:end="41:49">buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        

        <if_stmt pos:start="45:9" pos:end="47:28"><if pos:start="45:9" pos:end="47:28">if<condition pos:start="45:11" pos:end="45:60">( <expr pos:start="45:13" pos:end="45:58"><call pos:start="45:13" pos:end="45:54"><name pos:start="45:13" pos:end="45:28">ff_combine_frame</name><argument_list pos:start="45:29" pos:end="45:54">(<argument pos:start="45:30" pos:end="45:30"><expr pos:start="45:30" pos:end="45:30"><name pos:start="45:30" pos:end="45:30">s</name></expr></argument>, <argument pos:start="45:33" pos:end="45:36"><expr pos:start="45:33" pos:end="45:36"><name pos:start="45:33" pos:end="45:36">next</name></expr></argument>, <argument pos:start="45:39" pos:end="45:42"><expr pos:start="45:39" pos:end="45:42"><operator pos:start="45:39" pos:end="45:39">&amp;</operator><name pos:start="45:40" pos:end="45:42">buf</name></expr></argument>, <argument pos:start="45:45" pos:end="45:53"><expr pos:start="45:45" pos:end="45:53"><operator pos:start="45:45" pos:end="45:45">&amp;</operator><name pos:start="45:46" pos:end="45:53">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="45:56" pos:end="45:56">&lt;</operator> <literal type="number" pos:start="45:58" pos:end="45:58">0</literal></expr> )</condition><block type="pseudo" pos:start="47:13" pos:end="47:28"><block_content pos:start="47:13" pos:end="47:28">

            <return pos:start="47:13" pos:end="47:28">return <expr pos:start="47:20" pos:end="47:27"><name pos:start="47:20" pos:end="47:27">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

<comment type="line" pos:start="49:1" pos:end="49:93">//printf("next:%d buf_size:%d last_index:%d\n", next, buf_size, s-&gt;parse_context.last_index);</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if<condition pos:start="55:7" pos:end="55:56">(<expr pos:start="55:8" pos:end="55:55"><name pos:start="55:8" pos:end="55:31"><name pos:start="55:8" pos:end="55:8">s</name><operator pos:start="55:9" pos:end="55:10">-&gt;</operator><name pos:start="55:11" pos:end="55:15">avctx</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:31">extradata_size</name></name> <operator pos:start="55:33" pos:end="55:34">&amp;&amp;</operator> <name pos:start="55:36" pos:end="55:52"><name pos:start="55:36" pos:end="55:36">s</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:52">picture_number</name></name><operator pos:start="55:53" pos:end="55:54">==</operator><literal type="number" pos:start="55:55" pos:end="55:55">0</literal></expr>)</condition><block pos:start="55:57" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:22">

        <if_stmt pos:start="57:9" pos:end="59:22"><if pos:start="57:9" pos:end="59:22">if<condition pos:start="57:11" pos:end="57:83">(<expr pos:start="57:12" pos:end="57:81"><literal type="number" pos:start="57:12" pos:end="57:12">0</literal> <operator pos:start="57:14" pos:end="57:14">&lt;</operator> <call pos:start="57:16" pos:end="57:81"><name pos:start="57:16" pos:end="57:31">decode_nal_units</name><argument_list pos:start="57:32" pos:end="57:81">(<argument pos:start="57:33" pos:end="57:33"><expr pos:start="57:33" pos:end="57:33"><name pos:start="57:33" pos:end="57:33">h</name></expr></argument>, <argument pos:start="57:36" pos:end="57:54"><expr pos:start="57:36" pos:end="57:54"><name pos:start="57:36" pos:end="57:54"><name pos:start="57:36" pos:end="57:36">s</name><operator pos:start="57:37" pos:end="57:38">-&gt;</operator><name pos:start="57:39" pos:end="57:43">avctx</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:54">extradata</name></name></expr></argument>, <argument pos:start="57:57" pos:end="57:80"><expr pos:start="57:57" pos:end="57:80"><name pos:start="57:57" pos:end="57:80"><name pos:start="57:57" pos:end="57:57">s</name><operator pos:start="57:58" pos:end="57:59">-&gt;</operator><name pos:start="57:60" pos:end="57:64">avctx</name><operator pos:start="57:65" pos:end="57:66">-&gt;</operator><name pos:start="57:67" pos:end="57:80">extradata_size</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo" pos:start="59:13" pos:end="59:22"><block_content pos:start="59:13" pos:end="59:22"> 

            <return pos:start="59:13" pos:end="59:22">return <expr pos:start="59:20" pos:end="59:21"><operator pos:start="59:20" pos:end="59:20">-</operator><literal type="number" pos:start="59:21" pos:end="59:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:49"><expr pos:start="65:5" pos:end="65:48"><name pos:start="65:5" pos:end="65:13">buf_index</name><operator pos:start="65:14" pos:end="65:14">=</operator><call pos:start="65:15" pos:end="65:48"><name pos:start="65:15" pos:end="65:30">decode_nal_units</name><argument_list pos:start="65:31" pos:end="65:48">(<argument pos:start="65:32" pos:end="65:32"><expr pos:start="65:32" pos:end="65:32"><name pos:start="65:32" pos:end="65:32">h</name></expr></argument>, <argument pos:start="65:35" pos:end="65:37"><expr pos:start="65:35" pos:end="65:37"><name pos:start="65:35" pos:end="65:37">buf</name></expr></argument>, <argument pos:start="65:40" pos:end="65:47"><expr pos:start="65:40" pos:end="65:47"><name pos:start="65:40" pos:end="65:47">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="92:0"><if pos:start="67:5" pos:end="92:0">if<condition pos:start="67:7" pos:end="67:21">(<expr pos:start="67:8" pos:end="67:20"><name pos:start="67:8" pos:end="67:16">buf_index</name> <operator pos:start="67:18" pos:end="67:18">&lt;</operator> <literal type="number" pos:start="67:20" pos:end="67:20">0</literal></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="92:0"><block_content pos:start="69:9" pos:end="92:0"> 

        <return pos:start="69:9" pos:end="92:0">return <expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">-</operator><literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="73:5" pos:end="73:62">//FIXME do something with unavailable reference frames    </comment>

 

<comment type="line" pos:start="77:1" pos:end="77:78">//    if(ret==FRAME_SKIPED) return get_consumed_bytes(s, buf_index, buf_size);</comment>

<cpp:if pos:start="79:1" pos:end="79:5">#<cpp:directive pos:start="79:2" pos:end="79:3">if</cpp:directive> <expr pos:start="79:5" pos:end="79:5"><literal type="number" pos:start="79:5" pos:end="79:5">0</literal></expr></cpp:if>

    if(s-&gt;pict_type==B_TYPE || s-&gt;low_delay){

        *pict= *(AVFrame*)&amp;s-&gt;current_picture;

    } else {

        *pict= *(AVFrame*)&amp;s-&gt;last_picture;

    }

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="93:5" pos:end="93:42"><expr pos:start="93:5" pos:end="93:41"><operator pos:start="93:5" pos:end="93:5">*</operator><name pos:start="93:6" pos:end="93:9">pict</name><operator pos:start="93:10" pos:end="93:10">=</operator> <operator pos:start="93:12" pos:end="93:12">*</operator><operator pos:start="93:13" pos:end="93:13">(</operator><name pos:start="93:14" pos:end="93:20">AVFrame</name><operator pos:start="93:21" pos:end="93:21">*</operator><operator pos:start="93:22" pos:end="93:22">)</operator><operator pos:start="93:23" pos:end="93:23">&amp;</operator><name pos:start="93:24" pos:end="93:41"><name pos:start="93:24" pos:end="93:24">s</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:41">current_picture</name></name></expr>;</expr_stmt> <comment type="line" pos:start="93:44" pos:end="93:51">//FIXME </comment>

    <expr_stmt pos:start="95:5" pos:end="95:26"><expr pos:start="95:5" pos:end="95:25"><call pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:10">assert</name><argument_list pos:start="95:11" pos:end="95:25">(<argument pos:start="95:12" pos:end="95:24"><expr pos:start="95:12" pos:end="95:24"><name pos:start="95:12" pos:end="95:24"><name pos:start="95:12" pos:end="95:15">pict</name><operator pos:start="95:16" pos:end="95:17">-&gt;</operator><name pos:start="95:18" pos:end="95:21">data</name><index pos:start="95:22" pos:end="95:24">[<expr pos:start="95:23" pos:end="95:23"><literal type="number" pos:start="95:23" pos:end="95:23">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="97:1" pos:end="97:41">//printf("out %d\n", (int)pict-&gt;data[0]);</comment>

    <if_stmt pos:start="99:5" pos:end="144:0"><if pos:start="99:5" pos:end="144:0">if<condition pos:start="99:7" pos:end="99:32">(<expr pos:start="99:8" pos:end="99:31"><name pos:start="99:8" pos:end="99:19"><name pos:start="99:8" pos:end="99:12">avctx</name><operator pos:start="99:13" pos:end="99:14">-&gt;</operator><name pos:start="99:15" pos:end="99:19">debug</name></name><operator pos:start="99:20" pos:end="99:20">&amp;</operator><name pos:start="99:21" pos:end="99:31">FF_DEBUG_QP</name></expr>)</condition><block pos:start="99:33" pos:end="144:0">{<block_content pos:start="101:9" pos:end="119:21">

        <decl_stmt pos:start="101:9" pos:end="101:41"><decl pos:start="101:9" pos:end="101:40"><type pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:14">int8_t</name> <modifier pos:start="101:16" pos:end="101:16">*</modifier></type><name pos:start="101:17" pos:end="101:20">qtab</name><init pos:start="101:21" pos:end="101:40">= <expr pos:start="101:23" pos:end="101:40"><name pos:start="101:23" pos:end="101:40"><name pos:start="101:23" pos:end="101:26">pict</name><operator pos:start="101:27" pos:end="101:28">-&gt;</operator><name pos:start="101:29" pos:end="101:40">qscale_table</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="103:9" pos:end="103:16"><decl pos:start="103:9" pos:end="103:13"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:13">x</name></decl>,<decl pos:start="103:15" pos:end="103:15"><type ref="prev" pos:start="103:9" pos:end="103:11"/><name pos:start="103:15" pos:end="103:15">y</name></decl>;</decl_stmt>

        

        <for pos:start="107:9" pos:end="117:9">for<control pos:start="107:12" pos:end="107:37">(<init pos:start="107:13" pos:end="107:16"><expr pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:13">y</name><operator pos:start="107:14" pos:end="107:14">=</operator><literal type="number" pos:start="107:15" pos:end="107:15">0</literal></expr>;</init> <condition pos:start="107:18" pos:end="107:32"><expr pos:start="107:18" pos:end="107:31"><name pos:start="107:18" pos:end="107:18">y</name><operator pos:start="107:19" pos:end="107:19">&lt;</operator><name pos:start="107:20" pos:end="107:31"><name pos:start="107:20" pos:end="107:20">s</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:31">mb_height</name></name></expr>;</condition> <incr pos:start="107:34" pos:end="107:36"><expr pos:start="107:34" pos:end="107:36"><name pos:start="107:34" pos:end="107:34">y</name><operator pos:start="107:35" pos:end="107:36">++</operator></expr></incr>)</control><block pos:start="107:38" pos:end="117:9">{<block_content pos:start="109:13" pos:end="115:25">

            <for pos:start="109:13" pos:end="113:13">for<control pos:start="109:16" pos:end="109:40">(<init pos:start="109:17" pos:end="109:20"><expr pos:start="109:17" pos:end="109:19"><name pos:start="109:17" pos:end="109:17">x</name><operator pos:start="109:18" pos:end="109:18">=</operator><literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr>;</init> <condition pos:start="109:22" pos:end="109:35"><expr pos:start="109:22" pos:end="109:34"><name pos:start="109:22" pos:end="109:22">x</name><operator pos:start="109:23" pos:end="109:23">&lt;</operator><name pos:start="109:24" pos:end="109:34"><name pos:start="109:24" pos:end="109:24">s</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:34">mb_width</name></name></expr>;</condition> <incr pos:start="109:37" pos:end="109:39"><expr pos:start="109:37" pos:end="109:39"><name pos:start="109:37" pos:end="109:37">x</name><operator pos:start="109:38" pos:end="109:39">++</operator></expr></incr>)</control><block pos:start="109:41" pos:end="113:13">{<block_content pos:start="111:17" pos:end="111:56">

                <expr_stmt pos:start="111:17" pos:end="111:56"><expr pos:start="111:17" pos:end="111:55"><call pos:start="111:17" pos:end="111:55"><name pos:start="111:17" pos:end="111:22">printf</name><argument_list pos:start="111:23" pos:end="111:55">(<argument pos:start="111:24" pos:end="111:29"><expr pos:start="111:24" pos:end="111:29"><literal type="string" pos:start="111:24" pos:end="111:29">"%2d "</literal></expr></argument>, <argument pos:start="111:32" pos:end="111:54"><expr pos:start="111:32" pos:end="111:54"><name pos:start="111:32" pos:end="111:54"><name pos:start="111:32" pos:end="111:35">qtab</name><index pos:start="111:36" pos:end="111:54">[<expr pos:start="111:37" pos:end="111:53"><name pos:start="111:37" pos:end="111:37">x</name> <operator pos:start="111:39" pos:end="111:39">+</operator> <name pos:start="111:41" pos:end="111:41">y</name><operator pos:start="111:42" pos:end="111:42">*</operator><name pos:start="111:43" pos:end="111:53"><name pos:start="111:43" pos:end="111:43">s</name><operator pos:start="111:44" pos:end="111:45">-&gt;</operator><name pos:start="111:46" pos:end="111:53">mb_width</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="115:13" pos:end="115:25"><expr pos:start="115:13" pos:end="115:24"><call pos:start="115:13" pos:end="115:24"><name pos:start="115:13" pos:end="115:18">printf</name><argument_list pos:start="115:19" pos:end="115:24">(<argument pos:start="115:20" pos:end="115:23"><expr pos:start="115:20" pos:end="115:23"><literal type="string" pos:start="115:20" pos:end="115:23">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="119:9" pos:end="119:21"><expr pos:start="119:9" pos:end="119:20"><call pos:start="119:9" pos:end="119:20"><name pos:start="119:9" pos:end="119:14">printf</name><argument_list pos:start="119:15" pos:end="119:20">(<argument pos:start="119:16" pos:end="119:19"><expr pos:start="119:16" pos:end="119:19"><literal type="string" pos:start="119:16" pos:end="119:19">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="123:1" pos:end="123:5">#<cpp:directive pos:start="123:2" pos:end="123:3">if</cpp:directive> <expr pos:start="123:5" pos:end="123:5"><literal type="number" pos:start="123:5" pos:end="123:5">0</literal></expr></cpp:if> <comment type="line" pos:start="123:7" pos:end="123:9">//?</comment>



    <comment type="block" pos:start="127:5" pos:end="127:58">/* Return the Picture timestamp as the frame number */</comment>

    <comment type="block" pos:start="129:5" pos:end="129:58">/* we substract 1 because it is added on utils.c    */</comment>

    avctx-&gt;frame_number = s-&gt;picture_number - 1;

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="135:1" pos:end="135:5">#<cpp:directive pos:start="135:2" pos:end="135:3">if</cpp:directive> <expr pos:start="135:5" pos:end="135:5"><literal type="number" pos:start="135:5" pos:end="135:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="137:5" pos:end="137:48">/* dont output the last pic after seeking */</comment>

    if(s-&gt;last_picture_ptr || s-&gt;low_delay)

    <comment type="line" pos:start="141:5" pos:end="141:66">//Note this isnt a issue as a IDR pic should flush teh buffers</comment>

<cpp:endif pos:start="143:1" pos:end="143:6">#<cpp:directive pos:start="143:2" pos:end="143:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="145:9" pos:end="145:37"><expr pos:start="145:9" pos:end="145:36"><operator pos:start="145:9" pos:end="145:9">*</operator><name pos:start="145:10" pos:end="145:18">data_size</name> <operator pos:start="145:20" pos:end="145:20">=</operator> <sizeof pos:start="145:22" pos:end="145:36">sizeof<argument_list pos:start="145:28" pos:end="145:36">(<argument pos:start="145:29" pos:end="145:35"><expr pos:start="145:29" pos:end="145:35"><name pos:start="145:29" pos:end="145:35">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <return pos:start="147:5" pos:end="147:54">return <expr pos:start="147:12" pos:end="147:53"><call pos:start="147:12" pos:end="147:53"><name pos:start="147:12" pos:end="147:29">get_consumed_bytes</name><argument_list pos:start="147:30" pos:end="147:53">(<argument pos:start="147:31" pos:end="147:31"><expr pos:start="147:31" pos:end="147:31"><name pos:start="147:31" pos:end="147:31">s</name></expr></argument>, <argument pos:start="147:34" pos:end="147:42"><expr pos:start="147:34" pos:end="147:42"><name pos:start="147:34" pos:end="147:42">buf_index</name></expr></argument>, <argument pos:start="147:45" pos:end="147:52"><expr pos:start="147:45" pos:end="147:52"><name pos:start="147:45" pos:end="147:52">buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
