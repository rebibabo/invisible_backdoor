<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25421.c" pos:tabs="8"><function pos:start="1:1" pos:end="411:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">eepro100_cu_command</name><parameter_list pos:start="1:32" pos:end="1:63">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:49"><name pos:start="1:33" pos:end="1:45">EEPRO100State</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type> <name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:58">uint8_t</name></type> <name pos:start="1:60" pos:end="1:62">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="411:1">{<block_content pos:start="5:5" pos:end="409:5">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17">eepro100_tx_t</name></type> <name pos:start="5:19" pos:end="5:20">tx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:23">cb_address</name></decl>;</decl_stmt>

    <switch pos:start="9:5" pos:end="409:5">switch <condition pos:start="9:12" pos:end="9:16">(<expr pos:start="9:13" pos:end="9:15"><name pos:start="9:13" pos:end="9:15">val</name></expr>)</condition> <block pos:start="9:18" pos:end="409:5">{<block_content pos:start="11:5" pos:end="407:40">

    <case pos:start="11:5" pos:end="11:16">case <expr pos:start="11:10" pos:end="11:15"><name pos:start="11:10" pos:end="11:15">CU_NOP</name></expr>:</case>

        <comment type="block" pos:start="13:9" pos:end="13:27">/* No operation. */</comment>

        <break pos:start="15:9" pos:end="15:14">break;</break>

    <case pos:start="17:5" pos:end="17:18">case <expr pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:17">CU_START</name></expr>:</case>

        <if_stmt pos:start="19:9" pos:end="31:9"><if pos:start="19:9" pos:end="31:9">if <condition pos:start="19:12" pos:end="19:39">(<expr pos:start="19:13" pos:end="19:38"><call pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:24">get_cu_state</name><argument_list pos:start="19:25" pos:end="19:27">(<argument pos:start="19:26" pos:end="19:26"><expr pos:start="19:26" pos:end="19:26"><name pos:start="19:26" pos:end="19:26">s</name></expr></argument>)</argument_list></call> <operator pos:start="19:29" pos:end="19:30">!=</operator> <name pos:start="19:32" pos:end="19:38">cu_idle</name></expr>)</condition> <block pos:start="19:41" pos:end="31:9">{<block_content pos:start="27:13" pos:end="27:79">

            <comment type="block" pos:start="21:13" pos:end="25:39">/* Intel documentation says that CU must be idle for the CU

             * start command. Intel driver for Linux also starts the CU

             * from suspended state. */</comment>

            <expr_stmt pos:start="27:13" pos:end="27:79"><expr pos:start="27:13" pos:end="27:78"><call pos:start="27:13" pos:end="27:78"><name pos:start="27:13" pos:end="27:18">logout</name><argument_list pos:start="27:19" pos:end="27:78">(<argument pos:start="27:20" pos:end="27:51"><expr pos:start="27:20" pos:end="27:51"><literal type="string" pos:start="27:20" pos:end="27:51">"CU state is %u, should be %u\n"</literal></expr></argument>, <argument pos:start="27:54" pos:end="27:68"><expr pos:start="27:54" pos:end="27:68"><call pos:start="27:54" pos:end="27:68"><name pos:start="27:54" pos:end="27:65">get_cu_state</name><argument_list pos:start="27:66" pos:end="27:68">(<argument pos:start="27:67" pos:end="27:67"><expr pos:start="27:67" pos:end="27:67"><name pos:start="27:67" pos:end="27:67">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:71" pos:end="27:77"><expr pos:start="27:71" pos:end="27:77"><name pos:start="27:71" pos:end="27:77">cu_idle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="29:13" pos:end="29:42">//~ assert(!"wrong CU state");</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:35"><expr pos:start="33:9" pos:end="33:34"><call pos:start="33:9" pos:end="33:34"><name pos:start="33:9" pos:end="33:20">set_cu_state</name><argument_list pos:start="33:21" pos:end="33:34">(<argument pos:start="33:22" pos:end="33:22"><expr pos:start="33:22" pos:end="33:22"><name pos:start="33:22" pos:end="33:22">s</name></expr></argument>, <argument pos:start="33:25" pos:end="33:33"><expr pos:start="33:25" pos:end="33:33"><name pos:start="33:25" pos:end="33:33">cu_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:20">cu_offset</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <name pos:start="35:24" pos:end="35:33"><name pos:start="35:24" pos:end="35:24">s</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:33">pointer</name></name></expr>;</expr_stmt>

      <label pos:start="37:7" pos:end="37:19"><name pos:start="37:7" pos:end="37:18">next_command</name>:</label>

        <expr_stmt pos:start="39:9" pos:end="39:47"><expr pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:18">cb_address</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:31"><name pos:start="39:22" pos:end="39:22">s</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:31">cu_base</name></name> <operator pos:start="39:33" pos:end="39:33">+</operator> <name pos:start="39:35" pos:end="39:46"><name pos:start="39:35" pos:end="39:35">s</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:46">cu_offset</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:75"><expr pos:start="41:9" pos:end="41:74"><call pos:start="41:9" pos:end="41:74"><name pos:start="41:9" pos:end="41:32">cpu_physical_memory_read</name><argument_list pos:start="41:33" pos:end="41:74">(<argument pos:start="41:34" pos:end="41:43"><expr pos:start="41:34" pos:end="41:43"><name pos:start="41:34" pos:end="41:43">cb_address</name></expr></argument>, <argument pos:start="41:46" pos:end="41:61"><expr pos:start="41:46" pos:end="41:61"><operator pos:start="41:46" pos:end="41:46">(</operator><name pos:start="41:47" pos:end="41:53">uint8_t</name> <operator pos:start="41:55" pos:end="41:55">*</operator><operator pos:start="41:56" pos:end="41:56">)</operator> <operator pos:start="41:58" pos:end="41:58">&amp;</operator> <name pos:start="41:60" pos:end="41:61">tx</name></expr></argument>, <argument pos:start="41:64" pos:end="41:73"><expr pos:start="41:64" pos:end="41:73"><sizeof pos:start="41:64" pos:end="41:73">sizeof<argument_list pos:start="41:70" pos:end="41:73">(<argument pos:start="41:71" pos:end="41:72"><expr pos:start="41:71" pos:end="41:72"><name pos:start="41:71" pos:end="41:72">tx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:49"><decl pos:start="43:9" pos:end="43:48"><type pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:16">uint16_t</name></type> <name pos:start="43:18" pos:end="43:23">status</name> <init pos:start="43:25" pos:end="43:48">= <expr pos:start="43:27" pos:end="43:48"><call pos:start="43:27" pos:end="43:48"><name pos:start="43:27" pos:end="43:37">le16_to_cpu</name><argument_list pos:start="43:38" pos:end="43:48">(<argument pos:start="43:39" pos:end="43:47"><expr pos:start="43:39" pos:end="43:47"><name pos:start="43:39" pos:end="43:47"><name pos:start="43:39" pos:end="43:40">tx</name><operator pos:start="43:41" pos:end="43:41">.</operator><name pos:start="43:42" pos:end="43:47">status</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:51"><decl pos:start="45:9" pos:end="45:50"><type pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:16">uint16_t</name></type> <name pos:start="45:18" pos:end="45:24">command</name> <init pos:start="45:26" pos:end="45:50">= <expr pos:start="45:28" pos:end="45:50"><call pos:start="45:28" pos:end="45:50"><name pos:start="45:28" pos:end="45:38">le16_to_cpu</name><argument_list pos:start="45:39" pos:end="45:50">(<argument pos:start="45:40" pos:end="45:49"><expr pos:start="45:40" pos:end="45:49"><name pos:start="45:40" pos:end="45:49"><name pos:start="45:40" pos:end="45:41">tx</name><operator pos:start="45:42" pos:end="45:42">.</operator><name pos:start="45:43" pos:end="45:49">command</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="47:9" pos:end="51:44"><expr pos:start="47:9" pos:end="51:43"><call pos:start="47:9" pos:end="51:43"><name pos:start="47:9" pos:end="47:14">logout</name>

            <argument_list pos:start="49:13" pos:end="51:43">(<argument pos:start="49:14" pos:end="49:82"><expr pos:start="49:14" pos:end="49:82"><literal type="string" pos:start="49:14" pos:end="49:82">"val=0x%02x (cu start), status=0x%04x, command=0x%04x, link=0x%08x\n"</literal></expr></argument>,

             <argument pos:start="51:14" pos:end="51:16"><expr pos:start="51:14" pos:end="51:16"><name pos:start="51:14" pos:end="51:16">val</name></expr></argument>, <argument pos:start="51:19" pos:end="51:24"><expr pos:start="51:19" pos:end="51:24"><name pos:start="51:19" pos:end="51:24">status</name></expr></argument>, <argument pos:start="51:27" pos:end="51:33"><expr pos:start="51:27" pos:end="51:33"><name pos:start="51:27" pos:end="51:33">command</name></expr></argument>, <argument pos:start="51:36" pos:end="51:42"><expr pos:start="51:36" pos:end="51:42"><name pos:start="51:36" pos:end="51:42"><name pos:start="51:36" pos:end="51:37">tx</name><operator pos:start="51:38" pos:end="51:38">.</operator><name pos:start="51:39" pos:end="51:42">link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:48"><decl pos:start="53:9" pos:end="53:47"><type pos:start="53:9" pos:end="53:12"><name pos:start="53:9" pos:end="53:12">bool</name></type> <name pos:start="53:14" pos:end="53:19">bit_el</name> <init pos:start="53:21" pos:end="53:47">= <expr pos:start="53:23" pos:end="53:47"><operator pos:start="53:23" pos:end="53:23">(</operator><operator pos:start="53:24" pos:end="53:24">(</operator><name pos:start="53:25" pos:end="53:31">command</name> <operator pos:start="53:33" pos:end="53:33">&amp;</operator> <literal type="number" pos:start="53:35" pos:end="53:40">0x8000</literal><operator pos:start="53:41" pos:end="53:41">)</operator> <operator pos:start="53:43" pos:end="53:44">!=</operator> <literal type="number" pos:start="53:46" pos:end="53:46">0</literal><operator pos:start="53:47" pos:end="53:47">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:47"><decl pos:start="55:9" pos:end="55:46"><type pos:start="55:9" pos:end="55:12"><name pos:start="55:9" pos:end="55:12">bool</name></type> <name pos:start="55:14" pos:end="55:18">bit_s</name> <init pos:start="55:20" pos:end="55:46">= <expr pos:start="55:22" pos:end="55:46"><operator pos:start="55:22" pos:end="55:22">(</operator><operator pos:start="55:23" pos:end="55:23">(</operator><name pos:start="55:24" pos:end="55:30">command</name> <operator pos:start="55:32" pos:end="55:32">&amp;</operator> <literal type="number" pos:start="55:34" pos:end="55:39">0x4000</literal><operator pos:start="55:40" pos:end="55:40">)</operator> <operator pos:start="55:42" pos:end="55:43">!=</operator> <literal type="number" pos:start="55:45" pos:end="55:45">0</literal><operator pos:start="55:46" pos:end="55:46">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:47"><decl pos:start="57:9" pos:end="57:46"><type pos:start="57:9" pos:end="57:12"><name pos:start="57:9" pos:end="57:12">bool</name></type> <name pos:start="57:14" pos:end="57:18">bit_i</name> <init pos:start="57:20" pos:end="57:46">= <expr pos:start="57:22" pos:end="57:46"><operator pos:start="57:22" pos:end="57:22">(</operator><operator pos:start="57:23" pos:end="57:23">(</operator><name pos:start="57:24" pos:end="57:30">command</name> <operator pos:start="57:32" pos:end="57:32">&amp;</operator> <literal type="number" pos:start="57:34" pos:end="57:39">0x2000</literal><operator pos:start="57:40" pos:end="57:40">)</operator> <operator pos:start="57:42" pos:end="57:43">!=</operator> <literal type="number" pos:start="57:45" pos:end="57:45">0</literal><operator pos:start="57:46" pos:end="57:46">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:48"><decl pos:start="59:9" pos:end="59:47"><type pos:start="59:9" pos:end="59:12"><name pos:start="59:9" pos:end="59:12">bool</name></type> <name pos:start="59:14" pos:end="59:19">bit_nc</name> <init pos:start="59:21" pos:end="59:47">= <expr pos:start="59:23" pos:end="59:47"><operator pos:start="59:23" pos:end="59:23">(</operator><operator pos:start="59:24" pos:end="59:24">(</operator><name pos:start="59:25" pos:end="59:31">command</name> <operator pos:start="59:33" pos:end="59:33">&amp;</operator> <literal type="number" pos:start="59:35" pos:end="59:40">0x0010</literal><operator pos:start="59:41" pos:end="59:41">)</operator> <operator pos:start="59:43" pos:end="59:44">!=</operator> <literal type="number" pos:start="59:46" pos:end="59:46">0</literal><operator pos:start="59:47" pos:end="59:47">)</operator></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="61:9" pos:end="61:52">//~ bool bit_sf = ((command &amp; 0x0008) != 0);</comment>

        <decl_stmt pos:start="63:9" pos:end="63:40"><decl pos:start="63:9" pos:end="63:39"><type pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:16">uint16_t</name></type> <name pos:start="63:18" pos:end="63:20">cmd</name> <init pos:start="63:22" pos:end="63:39">= <expr pos:start="63:24" pos:end="63:39"><name pos:start="63:24" pos:end="63:30">command</name> <operator pos:start="63:32" pos:end="63:32">&amp;</operator> <literal type="number" pos:start="63:34" pos:end="63:39">0x0007</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:44"><expr pos:start="65:9" pos:end="65:43"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:20">cu_offset</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <call pos:start="65:24" pos:end="65:43"><name pos:start="65:24" pos:end="65:34">le32_to_cpu</name><argument_list pos:start="65:35" pos:end="65:43">(<argument pos:start="65:36" pos:end="65:42"><expr pos:start="65:36" pos:end="65:42"><name pos:start="65:36" pos:end="65:42"><name pos:start="65:36" pos:end="65:37">tx</name><operator pos:start="65:38" pos:end="65:38">.</operator><name pos:start="65:39" pos:end="65:42">link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="67:9" pos:end="281:9">switch <condition pos:start="67:16" pos:end="67:20">(<expr pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:19">cmd</name></expr>)</condition> <block pos:start="67:22" pos:end="281:9">{<block_content pos:start="69:9" pos:end="279:41">

        <case pos:start="69:9" pos:end="69:20">case <expr pos:start="69:14" pos:end="69:19"><name pos:start="69:14" pos:end="69:19">CmdNOp</name></expr>:</case>

            <comment type="block" pos:start="71:13" pos:end="71:29">/* Do nothing. */</comment>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        <case pos:start="75:9" pos:end="75:24">case <expr pos:start="75:14" pos:end="75:23"><name pos:start="75:14" pos:end="75:23">CmdIASetup</name></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:72"><expr pos:start="77:13" pos:end="77:71"><call pos:start="77:13" pos:end="77:71"><name pos:start="77:13" pos:end="77:36">cpu_physical_memory_read</name><argument_list pos:start="77:37" pos:end="77:71">(<argument pos:start="77:38" pos:end="77:51"><expr pos:start="77:38" pos:end="77:51"><name pos:start="77:38" pos:end="77:47">cb_address</name> <operator pos:start="77:49" pos:end="77:49">+</operator> <literal type="number" pos:start="77:51" pos:end="77:51">8</literal></expr></argument>, <argument pos:start="77:54" pos:end="77:67"><expr pos:start="77:54" pos:end="77:67"><operator pos:start="77:54" pos:end="77:54">&amp;</operator><name pos:start="77:55" pos:end="77:67"><name pos:start="77:55" pos:end="77:55">s</name><operator pos:start="77:56" pos:end="77:57">-&gt;</operator><name pos:start="77:58" pos:end="77:64">macaddr</name><index pos:start="77:65" pos:end="77:67">[<expr pos:start="77:66" pos:end="77:66"><literal type="number" pos:start="77:66" pos:end="77:66">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="77:70" pos:end="77:70"><expr pos:start="77:70" pos:end="77:70"><literal type="number" pos:start="77:70" pos:end="77:70">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:79"><expr pos:start="79:13" pos:end="79:78"><call pos:start="79:13" pos:end="79:78"><name pos:start="79:13" pos:end="79:17">TRACE</name><argument_list pos:start="79:18" pos:end="79:78">(<argument pos:start="79:19" pos:end="79:23"><expr pos:start="79:19" pos:end="79:23"><name pos:start="79:19" pos:end="79:23">OTHER</name></expr></argument>, <argument pos:start="79:26" pos:end="79:77"><expr pos:start="79:26" pos:end="79:77"><call pos:start="79:26" pos:end="79:77"><name pos:start="79:26" pos:end="79:31">logout</name><argument_list pos:start="79:32" pos:end="79:77">(<argument pos:start="79:33" pos:end="79:47"><expr pos:start="79:33" pos:end="79:47"><literal type="string" pos:start="79:33" pos:end="79:47">"macaddr: %s\n"</literal></expr></argument>, <argument pos:start="79:50" pos:end="79:76"><expr pos:start="79:50" pos:end="79:76"><call pos:start="79:50" pos:end="79:76"><name pos:start="79:50" pos:end="79:57">nic_dump</name><argument_list pos:start="79:58" pos:end="79:76">(<argument pos:start="79:59" pos:end="79:72"><expr pos:start="79:59" pos:end="79:72"><operator pos:start="79:59" pos:end="79:59">&amp;</operator><name pos:start="79:60" pos:end="79:72"><name pos:start="79:60" pos:end="79:60">s</name><operator pos:start="79:61" pos:end="79:62">-&gt;</operator><name pos:start="79:63" pos:end="79:69">macaddr</name><index pos:start="79:70" pos:end="79:72">[<expr pos:start="79:71" pos:end="79:71"><literal type="number" pos:start="79:71" pos:end="79:71">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:75" pos:end="79:75"><expr pos:start="79:75" pos:end="79:75"><literal type="number" pos:start="79:75" pos:end="79:75">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        <case pos:start="83:9" pos:end="83:26">case <expr pos:start="83:14" pos:end="83:25"><name pos:start="83:14" pos:end="83:25">CmdConfigure</name></expr>:</case>

            <expr_stmt pos:start="85:13" pos:end="87:63"><expr pos:start="85:13" pos:end="87:62"><call pos:start="85:13" pos:end="87:62"><name pos:start="85:13" pos:end="85:36">cpu_physical_memory_read</name><argument_list pos:start="85:37" pos:end="87:62">(<argument pos:start="85:38" pos:end="85:51"><expr pos:start="85:38" pos:end="85:51"><name pos:start="85:38" pos:end="85:47">cb_address</name> <operator pos:start="85:49" pos:end="85:49">+</operator> <literal type="number" pos:start="85:51" pos:end="85:51">8</literal></expr></argument>, <argument pos:start="85:54" pos:end="85:73"><expr pos:start="85:54" pos:end="85:73"><operator pos:start="85:54" pos:end="85:54">&amp;</operator><name pos:start="85:55" pos:end="85:73"><name pos:start="85:55" pos:end="85:55">s</name><operator pos:start="85:56" pos:end="85:57">-&gt;</operator><name pos:start="85:58" pos:end="85:70">configuration</name><index pos:start="85:71" pos:end="85:73">[<expr pos:start="85:72" pos:end="85:72"><literal type="number" pos:start="85:72" pos:end="85:72">0</literal></expr>]</index></name></expr></argument>,

                                     <argument pos:start="87:38" pos:end="87:61"><expr pos:start="87:38" pos:end="87:61"><sizeof pos:start="87:38" pos:end="87:61">sizeof<argument_list pos:start="87:44" pos:end="87:61">(<argument pos:start="87:45" pos:end="87:60"><expr pos:start="87:45" pos:end="87:60"><name pos:start="87:45" pos:end="87:60"><name pos:start="87:45" pos:end="87:45">s</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:60">configuration</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:92"><expr pos:start="89:13" pos:end="89:91"><call pos:start="89:13" pos:end="89:91"><name pos:start="89:13" pos:end="89:17">TRACE</name><argument_list pos:start="89:18" pos:end="89:91">(<argument pos:start="89:19" pos:end="89:23"><expr pos:start="89:19" pos:end="89:23"><name pos:start="89:19" pos:end="89:23">OTHER</name></expr></argument>, <argument pos:start="89:26" pos:end="89:90"><expr pos:start="89:26" pos:end="89:90"><call pos:start="89:26" pos:end="89:90"><name pos:start="89:26" pos:end="89:31">logout</name><argument_list pos:start="89:32" pos:end="89:90">(<argument pos:start="89:33" pos:end="89:53"><expr pos:start="89:33" pos:end="89:53"><literal type="string" pos:start="89:33" pos:end="89:53">"configuration: %s\n"</literal></expr></argument>, <argument pos:start="89:56" pos:end="89:89"><expr pos:start="89:56" pos:end="89:89"><call pos:start="89:56" pos:end="89:89"><name pos:start="89:56" pos:end="89:63">nic_dump</name><argument_list pos:start="89:64" pos:end="89:89">(<argument pos:start="89:65" pos:end="89:84"><expr pos:start="89:65" pos:end="89:84"><operator pos:start="89:65" pos:end="89:65">&amp;</operator><name pos:start="89:66" pos:end="89:84"><name pos:start="89:66" pos:end="89:66">s</name><operator pos:start="89:67" pos:end="89:68">-&gt;</operator><name pos:start="89:69" pos:end="89:81">configuration</name><index pos:start="89:82" pos:end="89:84">[<expr pos:start="89:83" pos:end="89:83"><literal type="number" pos:start="89:83" pos:end="89:83">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="89:87" pos:end="89:88"><expr pos:start="89:87" pos:end="89:88"><literal type="number" pos:start="89:87" pos:end="89:88">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        <case pos:start="93:9" pos:end="93:30">case <expr pos:start="93:14" pos:end="93:29"><name pos:start="93:14" pos:end="93:29">CmdMulticastList</name></expr>:</case>

            <comment type="line" pos:start="95:13" pos:end="95:42">//~ missing("multicast list");</comment>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:19">case <expr pos:start="99:14" pos:end="99:18"><name pos:start="99:14" pos:end="99:18">CmdTx</name></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:20"><expr pos:start="101:13" pos:end="101:19"><operator pos:start="101:13" pos:end="101:13">(</operator><name pos:start="101:14" pos:end="101:17">void</name><operator pos:start="101:18" pos:end="101:18">)</operator><literal type="number" pos:start="101:19" pos:end="101:19">0</literal></expr>;</expr_stmt>

            <decl_stmt pos:start="103:13" pos:end="103:62"><decl pos:start="103:13" pos:end="103:61"><type pos:start="103:13" pos:end="103:20"><name pos:start="103:13" pos:end="103:20">uint32_t</name></type> <name pos:start="103:22" pos:end="103:30">tbd_array</name> <init pos:start="103:32" pos:end="103:61">= <expr pos:start="103:34" pos:end="103:61"><call pos:start="103:34" pos:end="103:61"><name pos:start="103:34" pos:end="103:44">le32_to_cpu</name><argument_list pos:start="103:45" pos:end="103:61">(<argument pos:start="103:46" pos:end="103:60"><expr pos:start="103:46" pos:end="103:60"><name pos:start="103:46" pos:end="103:60"><name pos:start="103:46" pos:end="103:47">tx</name><operator pos:start="103:48" pos:end="103:48">.</operator><name pos:start="103:49" pos:end="103:60">tx_desc_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="105:13" pos:end="105:70"><decl pos:start="105:13" pos:end="105:69"><type pos:start="105:13" pos:end="105:20"><name pos:start="105:13" pos:end="105:20">uint16_t</name></type> <name pos:start="105:22" pos:end="105:30">tcb_bytes</name> <init pos:start="105:32" pos:end="105:69">= <expr pos:start="105:34" pos:end="105:69"><operator pos:start="105:34" pos:end="105:34">(</operator><call pos:start="105:35" pos:end="105:59"><name pos:start="105:35" pos:end="105:45">le16_to_cpu</name><argument_list pos:start="105:46" pos:end="105:59">(<argument pos:start="105:47" pos:end="105:58"><expr pos:start="105:47" pos:end="105:58"><name pos:start="105:47" pos:end="105:58"><name pos:start="105:47" pos:end="105:48">tx</name><operator pos:start="105:49" pos:end="105:49">.</operator><name pos:start="105:50" pos:end="105:58">tcb_bytes</name></name></expr></argument>)</argument_list></call> <operator pos:start="105:61" pos:end="105:61">&amp;</operator> <literal type="number" pos:start="105:63" pos:end="105:68">0x3fff</literal><operator pos:start="105:69" pos:end="105:69">)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="107:13" pos:end="111:54"><expr pos:start="107:13" pos:end="111:53"><call pos:start="107:13" pos:end="111:53"><name pos:start="107:13" pos:end="107:17">TRACE</name><argument_list pos:start="107:18" pos:end="111:53">(<argument pos:start="107:19" pos:end="107:22"><expr pos:start="107:19" pos:end="107:22"><name pos:start="107:19" pos:end="107:22">RXTX</name></expr></argument>, <argument pos:start="107:25" pos:end="111:52"><expr pos:start="107:25" pos:end="111:52"><call pos:start="107:25" pos:end="111:52"><name pos:start="107:25" pos:end="107:30">logout</name>

                <argument_list pos:start="109:17" pos:end="111:52">(<argument pos:start="109:18" pos:end="109:92"><expr pos:start="109:18" pos:end="109:92"><literal type="string" pos:start="109:18" pos:end="109:92">"transmit, TBD array address 0x%08x, TCB byte count 0x%04x, TBD count %u\n"</literal></expr></argument>,

                 <argument pos:start="111:18" pos:end="111:26"><expr pos:start="111:18" pos:end="111:26"><name pos:start="111:18" pos:end="111:26">tbd_array</name></expr></argument>, <argument pos:start="111:29" pos:end="111:37"><expr pos:start="111:29" pos:end="111:37"><name pos:start="111:29" pos:end="111:37">tcb_bytes</name></expr></argument>, <argument pos:start="111:40" pos:end="111:51"><expr pos:start="111:40" pos:end="111:51"><name pos:start="111:40" pos:end="111:51"><name pos:start="111:40" pos:end="111:41">tx</name><operator pos:start="111:42" pos:end="111:42">.</operator><name pos:start="111:43" pos:end="111:51">tbd_count</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:28"><expr pos:start="113:13" pos:end="113:27"><call pos:start="113:13" pos:end="113:27"><name pos:start="113:13" pos:end="113:18">assert</name><argument_list pos:start="113:19" pos:end="113:27">(<argument pos:start="113:20" pos:end="113:26"><expr pos:start="113:20" pos:end="113:26"><operator pos:start="113:20" pos:end="113:20">!</operator><name pos:start="113:21" pos:end="113:26">bit_nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="115:13" pos:end="115:32">//~ assert(!bit_sf);</comment>

            <expr_stmt pos:start="117:13" pos:end="117:38"><expr pos:start="117:13" pos:end="117:37"><call pos:start="117:13" pos:end="117:37"><name pos:start="117:13" pos:end="117:18">assert</name><argument_list pos:start="117:19" pos:end="117:37">(<argument pos:start="117:20" pos:end="117:36"><expr pos:start="117:20" pos:end="117:36"><name pos:start="117:20" pos:end="117:28">tcb_bytes</name> <operator pos:start="117:30" pos:end="117:31">&lt;=</operator> <literal type="number" pos:start="117:33" pos:end="117:36">2600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="119:13" pos:end="119:63">/* Next assertion fails for local configuration. */</comment>

            <comment type="line" pos:start="121:13" pos:end="121:69">//~ assert((tcb_bytes &gt; 0) || (tbd_array != 0xffffffff));</comment>

            <if_stmt pos:start="123:13" pos:end="129:13"><if pos:start="123:13" pos:end="129:13">if <condition pos:start="123:16" pos:end="123:64">(<expr pos:start="123:17" pos:end="123:63"><operator pos:start="123:17" pos:end="123:17">!</operator><operator pos:start="123:18" pos:end="123:18">(</operator><operator pos:start="123:19" pos:end="123:19">(</operator><name pos:start="123:20" pos:end="123:28">tcb_bytes</name> <operator pos:start="123:30" pos:end="123:30">&gt;</operator> <literal type="number" pos:start="123:32" pos:end="123:32">0</literal><operator pos:start="123:33" pos:end="123:33">)</operator> <operator pos:start="123:35" pos:end="123:36">||</operator> <operator pos:start="123:38" pos:end="123:38">(</operator><name pos:start="123:39" pos:end="123:47">tbd_array</name> <operator pos:start="123:49" pos:end="123:50">!=</operator> <literal type="number" pos:start="123:52" pos:end="123:61">0xffffffff</literal><operator pos:start="123:62" pos:end="123:62">)</operator><operator pos:start="123:63" pos:end="123:63">)</operator></expr>)</condition> <block pos:start="123:66" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:82">

                <expr_stmt pos:start="125:17" pos:end="127:82"><expr pos:start="125:17" pos:end="127:81"><call pos:start="125:17" pos:end="127:81"><name pos:start="125:17" pos:end="125:22">logout</name>

                    <argument_list pos:start="127:21" pos:end="127:81">(<argument pos:start="127:22" pos:end="127:80"><expr pos:start="127:22" pos:end="127:80"><literal type="string" pos:start="127:22" pos:end="127:80">"illegal values of TBD array address and TCB byte count!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="line" pos:start="131:13" pos:end="131:81">// sends larger than MAX_ETH_FRAME_SIZE are allowed, up to 2600 bytes</comment>

            <decl_stmt pos:start="133:13" pos:end="133:30"><decl pos:start="133:13" pos:end="133:29"><type pos:start="133:13" pos:end="133:19"><name pos:start="133:13" pos:end="133:19">uint8_t</name></type> <name pos:start="133:21" pos:end="133:29"><name pos:start="133:21" pos:end="133:23">buf</name><index pos:start="133:24" pos:end="133:29">[<expr pos:start="133:25" pos:end="133:28"><literal type="number" pos:start="133:25" pos:end="133:28">2600</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="135:13" pos:end="135:30"><decl pos:start="135:13" pos:end="135:29"><type pos:start="135:13" pos:end="135:20"><name pos:start="135:13" pos:end="135:20">uint16_t</name></type> <name pos:start="135:22" pos:end="135:25">size</name> <init pos:start="135:27" pos:end="135:29">= <expr pos:start="135:29" pos:end="135:29"><literal type="number" pos:start="135:29" pos:end="135:29">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="137:13" pos:end="137:53"><decl pos:start="137:13" pos:end="137:52"><type pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:20">uint32_t</name></type> <name pos:start="137:22" pos:end="137:32">tbd_address</name> <init pos:start="137:34" pos:end="137:52">= <expr pos:start="137:36" pos:end="137:52"><name pos:start="137:36" pos:end="137:45">cb_address</name> <operator pos:start="137:47" pos:end="137:47">+</operator> <literal type="number" pos:start="137:49" pos:end="137:52">0x10</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:45"><expr pos:start="139:13" pos:end="139:44"><call pos:start="139:13" pos:end="139:44"><name pos:start="139:13" pos:end="139:18">assert</name><argument_list pos:start="139:19" pos:end="139:44">(<argument pos:start="139:20" pos:end="139:43"><expr pos:start="139:20" pos:end="139:43"><name pos:start="139:20" pos:end="139:28">tcb_bytes</name> <operator pos:start="139:30" pos:end="139:31">&lt;=</operator> <sizeof pos:start="139:33" pos:end="139:43">sizeof<argument_list pos:start="139:39" pos:end="139:43">(<argument pos:start="139:40" pos:end="139:42"><expr pos:start="139:40" pos:end="139:42"><name pos:start="139:40" pos:end="139:42">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="141:13" pos:end="165:13">while <condition pos:start="141:19" pos:end="141:36">(<expr pos:start="141:20" pos:end="141:35"><name pos:start="141:20" pos:end="141:23">size</name> <operator pos:start="141:25" pos:end="141:25">&lt;</operator> <name pos:start="141:27" pos:end="141:35">tcb_bytes</name></expr>)</condition> <block pos:start="141:38" pos:end="165:13">{<block_content pos:start="143:17" pos:end="163:39">

                <decl_stmt pos:start="143:17" pos:end="143:67"><decl pos:start="143:17" pos:end="143:66"><type pos:start="143:17" pos:end="143:24"><name pos:start="143:17" pos:end="143:24">uint32_t</name></type> <name pos:start="143:26" pos:end="143:42">tx_buffer_address</name> <init pos:start="143:44" pos:end="143:66">= <expr pos:start="143:46" pos:end="143:66"><call pos:start="143:46" pos:end="143:66"><name pos:start="143:46" pos:end="143:53">ldl_phys</name><argument_list pos:start="143:54" pos:end="143:66">(<argument pos:start="143:55" pos:end="143:65"><expr pos:start="143:55" pos:end="143:65"><name pos:start="143:55" pos:end="143:65">tbd_address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="145:17" pos:end="145:69"><decl pos:start="145:17" pos:end="145:68"><type pos:start="145:17" pos:end="145:24"><name pos:start="145:17" pos:end="145:24">uint16_t</name></type> <name pos:start="145:26" pos:end="145:39">tx_buffer_size</name> <init pos:start="145:41" pos:end="145:68">= <expr pos:start="145:43" pos:end="145:68"><call pos:start="145:43" pos:end="145:68"><name pos:start="145:43" pos:end="145:51">lduw_phys</name><argument_list pos:start="145:52" pos:end="145:68">(<argument pos:start="145:53" pos:end="145:67"><expr pos:start="145:53" pos:end="145:67"><name pos:start="145:53" pos:end="145:63">tbd_address</name> <operator pos:start="145:65" pos:end="145:65">+</operator> <literal type="number" pos:start="145:67" pos:end="145:67">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line" pos:start="147:17" pos:end="147:71">//~ uint16_t tx_buffer_el = lduw_phys(tbd_address + 6);</comment>

                <expr_stmt pos:start="149:17" pos:end="149:33"><expr pos:start="149:17" pos:end="149:32"><name pos:start="149:17" pos:end="149:27">tbd_address</name> <operator pos:start="149:29" pos:end="149:30">+=</operator> <literal type="number" pos:start="149:32" pos:end="149:32">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="155:57"><expr pos:start="151:17" pos:end="155:56"><call pos:start="151:17" pos:end="155:56"><name pos:start="151:17" pos:end="151:21">TRACE</name><argument_list pos:start="151:22" pos:end="155:56">(<argument pos:start="151:23" pos:end="151:26"><expr pos:start="151:23" pos:end="151:26"><name pos:start="151:23" pos:end="151:26">RXTX</name></expr></argument>, <argument pos:start="151:29" pos:end="155:55"><expr pos:start="151:29" pos:end="155:55"><call pos:start="151:29" pos:end="155:55"><name pos:start="151:29" pos:end="151:34">logout</name>

                    <argument_list pos:start="153:21" pos:end="155:55">(<argument pos:start="153:22" pos:end="153:82"><expr pos:start="153:22" pos:end="153:82"><literal type="string" pos:start="153:22" pos:end="153:82">"TBD (simplified mode): buffer address 0x%08x, size 0x%04x\n"</literal></expr></argument>,

                     <argument pos:start="155:22" pos:end="155:38"><expr pos:start="155:22" pos:end="155:38"><name pos:start="155:22" pos:end="155:38">tx_buffer_address</name></expr></argument>, <argument pos:start="155:41" pos:end="155:54"><expr pos:start="155:41" pos:end="155:54"><name pos:start="155:41" pos:end="155:54">tx_buffer_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:73"><expr pos:start="157:17" pos:end="157:72"><name pos:start="157:17" pos:end="157:30">tx_buffer_size</name> <operator pos:start="157:32" pos:end="157:32">=</operator> <call pos:start="157:34" pos:end="157:72"><name pos:start="157:34" pos:end="157:36">MIN</name><argument_list pos:start="157:37" pos:end="157:72">(<argument pos:start="157:38" pos:end="157:51"><expr pos:start="157:38" pos:end="157:51"><name pos:start="157:38" pos:end="157:51">tx_buffer_size</name></expr></argument>, <argument pos:start="157:54" pos:end="157:71"><expr pos:start="157:54" pos:end="157:71"><sizeof pos:start="157:54" pos:end="157:64">sizeof<argument_list pos:start="157:60" pos:end="157:64">(<argument pos:start="157:61" pos:end="157:63"><expr pos:start="157:61" pos:end="157:63"><name pos:start="157:61" pos:end="157:63">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="157:66" pos:end="157:66">-</operator> <name pos:start="157:68" pos:end="157:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="161:57"><expr pos:start="159:17" pos:end="161:56"><call pos:start="159:17" pos:end="161:56"><name pos:start="159:17" pos:end="159:40">cpu_physical_memory_read</name><argument_list pos:start="159:41" pos:end="161:56">(<argument pos:start="159:42" pos:end="159:58"><expr pos:start="159:42" pos:end="159:58"><name pos:start="159:42" pos:end="159:58">tx_buffer_address</name></expr></argument>, <argument pos:start="159:61" pos:end="159:70"><expr pos:start="159:61" pos:end="159:70"><operator pos:start="159:61" pos:end="159:61">&amp;</operator><name pos:start="159:62" pos:end="159:70"><name pos:start="159:62" pos:end="159:64">buf</name><index pos:start="159:65" pos:end="159:70">[<expr pos:start="159:66" pos:end="159:69"><name pos:start="159:66" pos:end="159:69">size</name></expr>]</index></name></expr></argument>,

                                         <argument pos:start="161:42" pos:end="161:55"><expr pos:start="161:42" pos:end="161:55"><name pos:start="161:42" pos:end="161:55">tx_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:39"><expr pos:start="163:17" pos:end="163:38"><name pos:start="163:17" pos:end="163:20">size</name> <operator pos:start="163:22" pos:end="163:23">+=</operator> <name pos:start="163:25" pos:end="163:38">tx_buffer_size</name></expr>;</expr_stmt>

            </block_content>}</block></while>

            <if_stmt pos:start="167:13" pos:end="251:13"><if pos:start="167:13" pos:end="171:13">if <condition pos:start="167:16" pos:end="167:40">(<expr pos:start="167:17" pos:end="167:39"><name pos:start="167:17" pos:end="167:25">tbd_array</name> <operator pos:start="167:27" pos:end="167:28">==</operator> <literal type="number" pos:start="167:30" pos:end="167:39">0xffffffff</literal></expr>)</condition> <block pos:start="167:42" pos:end="171:13">{<block_content>

                <comment type="block" pos:start="169:17" pos:end="169:73">/* Simplified mode. Was already handled by code above. */</comment>

            </block_content>}</block></if> <else pos:start="171:15" pos:end="251:13">else <block pos:start="171:20" pos:end="251:13">{<block_content pos:start="175:17" pos:end="249:17">

                <comment type="block" pos:start="173:17" pos:end="173:36">/* Flexible mode. */</comment>

                <decl_stmt pos:start="175:17" pos:end="175:38"><decl pos:start="175:17" pos:end="175:37"><type pos:start="175:17" pos:end="175:23"><name pos:start="175:17" pos:end="175:23">uint8_t</name></type> <name pos:start="175:25" pos:end="175:33">tbd_count</name> <init pos:start="175:35" pos:end="175:37">= <expr pos:start="175:37" pos:end="175:37"><literal type="number" pos:start="175:37" pos:end="175:37">0</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="177:17" pos:end="215:17"><if pos:start="177:17" pos:end="215:17">if <condition pos:start="177:20" pos:end="177:80">(<expr pos:start="177:21" pos:end="177:79"><call pos:start="177:21" pos:end="177:44"><name pos:start="177:21" pos:end="177:41">device_supports_eTxCB</name><argument_list pos:start="177:42" pos:end="177:44">(<argument pos:start="177:43" pos:end="177:43"><expr pos:start="177:43" pos:end="177:43"><name pos:start="177:43" pos:end="177:43">s</name></expr></argument>)</argument_list></call> <operator pos:start="177:46" pos:end="177:47">&amp;&amp;</operator> <operator pos:start="177:49" pos:end="177:49">!</operator><operator pos:start="177:50" pos:end="177:50">(</operator><name pos:start="177:51" pos:end="177:69"><name pos:start="177:51" pos:end="177:51">s</name><operator pos:start="177:52" pos:end="177:53">-&gt;</operator><name pos:start="177:54" pos:end="177:66">configuration</name><index pos:start="177:67" pos:end="177:69">[<expr pos:start="177:68" pos:end="177:68"><literal type="number" pos:start="177:68" pos:end="177:68">6</literal></expr>]</index></name> <operator pos:start="177:71" pos:end="177:71">&amp;</operator> <call pos:start="177:73" pos:end="177:78"><name pos:start="177:73" pos:end="177:75">BIT</name><argument_list pos:start="177:76" pos:end="177:78">(<argument pos:start="177:77" pos:end="177:77"><expr pos:start="177:77" pos:end="177:77"><literal type="number" pos:start="177:77" pos:end="177:77">4</literal></expr></argument>)</argument_list></call><operator pos:start="177:79" pos:end="177:79">)</operator></expr>)</condition> <block pos:start="177:82" pos:end="215:17">{<block_content pos:start="181:21" pos:end="213:21">

                    <comment type="block" pos:start="179:21" pos:end="179:48">/* Extended Flexible TCB. */</comment>

                    <expr_stmt pos:start="181:21" pos:end="181:43"><expr pos:start="181:21" pos:end="181:42"><call pos:start="181:21" pos:end="181:42"><name pos:start="181:21" pos:end="181:26">assert</name><argument_list pos:start="181:27" pos:end="181:42">(<argument pos:start="181:28" pos:end="181:41"><expr pos:start="181:28" pos:end="181:41"><name pos:start="181:28" pos:end="181:36">tcb_bytes</name> <operator pos:start="181:38" pos:end="181:39">==</operator> <literal type="number" pos:start="181:41" pos:end="181:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="183:21" pos:end="213:21">for <control pos:start="183:25" pos:end="183:54">(<init pos:start="183:26" pos:end="183:26">;</init> <condition pos:start="183:28" pos:end="183:41"><expr pos:start="183:28" pos:end="183:40"><name pos:start="183:28" pos:end="183:36">tbd_count</name> <operator pos:start="183:38" pos:end="183:38">&lt;</operator> <literal type="number" pos:start="183:40" pos:end="183:40">2</literal></expr>;</condition> <incr pos:start="183:43" pos:end="183:53"><expr pos:start="183:43" pos:end="183:53"><name pos:start="183:43" pos:end="183:51">tbd_count</name><operator pos:start="183:52" pos:end="183:53">++</operator></expr></incr>)</control> <block pos:start="183:56" pos:end="213:21">{<block_content pos:start="185:25" pos:end="211:25">

                        <decl_stmt pos:start="185:25" pos:end="185:75"><decl pos:start="185:25" pos:end="185:74"><type pos:start="185:25" pos:end="185:32"><name pos:start="185:25" pos:end="185:32">uint32_t</name></type> <name pos:start="185:34" pos:end="185:50">tx_buffer_address</name> <init pos:start="185:52" pos:end="185:74">= <expr pos:start="185:54" pos:end="185:74"><call pos:start="185:54" pos:end="185:74"><name pos:start="185:54" pos:end="185:61">ldl_phys</name><argument_list pos:start="185:62" pos:end="185:74">(<argument pos:start="185:63" pos:end="185:73"><expr pos:start="185:63" pos:end="185:73"><name pos:start="185:63" pos:end="185:73">tbd_address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="187:25" pos:end="187:77"><decl pos:start="187:25" pos:end="187:76"><type pos:start="187:25" pos:end="187:32"><name pos:start="187:25" pos:end="187:32">uint16_t</name></type> <name pos:start="187:34" pos:end="187:47">tx_buffer_size</name> <init pos:start="187:49" pos:end="187:76">= <expr pos:start="187:51" pos:end="187:76"><call pos:start="187:51" pos:end="187:76"><name pos:start="187:51" pos:end="187:59">lduw_phys</name><argument_list pos:start="187:60" pos:end="187:76">(<argument pos:start="187:61" pos:end="187:75"><expr pos:start="187:61" pos:end="187:75"><name pos:start="187:61" pos:end="187:71">tbd_address</name> <operator pos:start="187:73" pos:end="187:73">+</operator> <literal type="number" pos:start="187:75" pos:end="187:75">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="189:25" pos:end="189:75"><decl pos:start="189:25" pos:end="189:74"><type pos:start="189:25" pos:end="189:32"><name pos:start="189:25" pos:end="189:32">uint16_t</name></type> <name pos:start="189:34" pos:end="189:45">tx_buffer_el</name> <init pos:start="189:47" pos:end="189:74">= <expr pos:start="189:49" pos:end="189:74"><call pos:start="189:49" pos:end="189:74"><name pos:start="189:49" pos:end="189:57">lduw_phys</name><argument_list pos:start="189:58" pos:end="189:74">(<argument pos:start="189:59" pos:end="189:73"><expr pos:start="189:59" pos:end="189:73"><name pos:start="189:59" pos:end="189:69">tbd_address</name> <operator pos:start="189:71" pos:end="189:71">+</operator> <literal type="number" pos:start="189:73" pos:end="189:73">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="191:25" pos:end="191:41"><expr pos:start="191:25" pos:end="191:40"><name pos:start="191:25" pos:end="191:35">tbd_address</name> <operator pos:start="191:37" pos:end="191:38">+=</operator> <literal type="number" pos:start="191:40" pos:end="191:40">8</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="193:25" pos:end="197:65"><expr pos:start="193:25" pos:end="197:64"><call pos:start="193:25" pos:end="197:64"><name pos:start="193:25" pos:end="193:29">TRACE</name><argument_list pos:start="193:30" pos:end="197:64">(<argument pos:start="193:31" pos:end="193:34"><expr pos:start="193:31" pos:end="193:34"><name pos:start="193:31" pos:end="193:34">RXTX</name></expr></argument>, <argument pos:start="193:37" pos:end="197:63"><expr pos:start="193:37" pos:end="197:63"><call pos:start="193:37" pos:end="197:63"><name pos:start="193:37" pos:end="193:42">logout</name>

                            <argument_list pos:start="195:29" pos:end="197:63">(<argument pos:start="195:30" pos:end="195:97"><expr pos:start="195:30" pos:end="195:97"><literal type="string" pos:start="195:30" pos:end="195:97">"TBD (extended flexible mode): buffer address 0x%08x, size 0x%04x\n"</literal></expr></argument>,

                             <argument pos:start="197:30" pos:end="197:46"><expr pos:start="197:30" pos:end="197:46"><name pos:start="197:30" pos:end="197:46">tx_buffer_address</name></expr></argument>, <argument pos:start="197:49" pos:end="197:62"><expr pos:start="197:49" pos:end="197:62"><name pos:start="197:49" pos:end="197:62">tx_buffer_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="199:25" pos:end="199:81"><expr pos:start="199:25" pos:end="199:80"><name pos:start="199:25" pos:end="199:38">tx_buffer_size</name> <operator pos:start="199:40" pos:end="199:40">=</operator> <call pos:start="199:42" pos:end="199:80"><name pos:start="199:42" pos:end="199:44">MIN</name><argument_list pos:start="199:45" pos:end="199:80">(<argument pos:start="199:46" pos:end="199:59"><expr pos:start="199:46" pos:end="199:59"><name pos:start="199:46" pos:end="199:59">tx_buffer_size</name></expr></argument>, <argument pos:start="199:62" pos:end="199:79"><expr pos:start="199:62" pos:end="199:79"><sizeof pos:start="199:62" pos:end="199:72">sizeof<argument_list pos:start="199:68" pos:end="199:72">(<argument pos:start="199:69" pos:end="199:71"><expr pos:start="199:69" pos:end="199:71"><name pos:start="199:69" pos:end="199:71">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="199:74" pos:end="199:74">-</operator> <name pos:start="199:76" pos:end="199:79">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="201:25" pos:end="203:65"><expr pos:start="201:25" pos:end="203:64"><call pos:start="201:25" pos:end="203:64"><name pos:start="201:25" pos:end="201:48">cpu_physical_memory_read</name><argument_list pos:start="201:49" pos:end="203:64">(<argument pos:start="201:50" pos:end="201:66"><expr pos:start="201:50" pos:end="201:66"><name pos:start="201:50" pos:end="201:66">tx_buffer_address</name></expr></argument>, <argument pos:start="201:69" pos:end="201:78"><expr pos:start="201:69" pos:end="201:78"><operator pos:start="201:69" pos:end="201:69">&amp;</operator><name pos:start="201:70" pos:end="201:78"><name pos:start="201:70" pos:end="201:72">buf</name><index pos:start="201:73" pos:end="201:78">[<expr pos:start="201:74" pos:end="201:77"><name pos:start="201:74" pos:end="201:77">size</name></expr>]</index></name></expr></argument>,

                                                 <argument pos:start="203:50" pos:end="203:63"><expr pos:start="203:50" pos:end="203:63"><name pos:start="203:50" pos:end="203:63">tx_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="205:25" pos:end="205:47"><expr pos:start="205:25" pos:end="205:46"><name pos:start="205:25" pos:end="205:28">size</name> <operator pos:start="205:30" pos:end="205:31">+=</operator> <name pos:start="205:33" pos:end="205:46">tx_buffer_size</name></expr>;</expr_stmt>

                        <if_stmt pos:start="207:25" pos:end="211:25"><if pos:start="207:25" pos:end="211:25">if <condition pos:start="207:28" pos:end="207:45">(<expr pos:start="207:29" pos:end="207:44"><name pos:start="207:29" pos:end="207:40">tx_buffer_el</name> <operator pos:start="207:42" pos:end="207:42">&amp;</operator> <literal type="number" pos:start="207:44" pos:end="207:44">1</literal></expr>)</condition> <block pos:start="207:47" pos:end="211:25">{<block_content pos:start="209:29" pos:end="209:34">

                            <break pos:start="209:29" pos:end="209:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:40"><expr pos:start="217:17" pos:end="217:39"><name pos:start="217:17" pos:end="217:27">tbd_address</name> <operator pos:start="217:29" pos:end="217:29">=</operator> <name pos:start="217:31" pos:end="217:39">tbd_array</name></expr>;</expr_stmt>

                <for pos:start="219:17" pos:end="249:17">for <control pos:start="219:21" pos:end="219:61">(<init pos:start="219:22" pos:end="219:22">;</init> <condition pos:start="219:24" pos:end="219:48"><expr pos:start="219:24" pos:end="219:47"><name pos:start="219:24" pos:end="219:32">tbd_count</name> <operator pos:start="219:34" pos:end="219:34">&lt;</operator> <name pos:start="219:36" pos:end="219:47"><name pos:start="219:36" pos:end="219:37">tx</name><operator pos:start="219:38" pos:end="219:38">.</operator><name pos:start="219:39" pos:end="219:47">tbd_count</name></name></expr>;</condition> <incr pos:start="219:50" pos:end="219:60"><expr pos:start="219:50" pos:end="219:60"><name pos:start="219:50" pos:end="219:58">tbd_count</name><operator pos:start="219:59" pos:end="219:60">++</operator></expr></incr>)</control> <block pos:start="219:63" pos:end="249:17">{<block_content pos:start="221:21" pos:end="247:21">

                    <decl_stmt pos:start="221:21" pos:end="221:71"><decl pos:start="221:21" pos:end="221:70"><type pos:start="221:21" pos:end="221:28"><name pos:start="221:21" pos:end="221:28">uint32_t</name></type> <name pos:start="221:30" pos:end="221:46">tx_buffer_address</name> <init pos:start="221:48" pos:end="221:70">= <expr pos:start="221:50" pos:end="221:70"><call pos:start="221:50" pos:end="221:70"><name pos:start="221:50" pos:end="221:57">ldl_phys</name><argument_list pos:start="221:58" pos:end="221:70">(<argument pos:start="221:59" pos:end="221:69"><expr pos:start="221:59" pos:end="221:69"><name pos:start="221:59" pos:end="221:69">tbd_address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="223:21" pos:end="223:73"><decl pos:start="223:21" pos:end="223:72"><type pos:start="223:21" pos:end="223:28"><name pos:start="223:21" pos:end="223:28">uint16_t</name></type> <name pos:start="223:30" pos:end="223:43">tx_buffer_size</name> <init pos:start="223:45" pos:end="223:72">= <expr pos:start="223:47" pos:end="223:72"><call pos:start="223:47" pos:end="223:72"><name pos:start="223:47" pos:end="223:55">lduw_phys</name><argument_list pos:start="223:56" pos:end="223:72">(<argument pos:start="223:57" pos:end="223:71"><expr pos:start="223:57" pos:end="223:71"><name pos:start="223:57" pos:end="223:67">tbd_address</name> <operator pos:start="223:69" pos:end="223:69">+</operator> <literal type="number" pos:start="223:71" pos:end="223:71">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="225:21" pos:end="225:71"><decl pos:start="225:21" pos:end="225:70"><type pos:start="225:21" pos:end="225:28"><name pos:start="225:21" pos:end="225:28">uint16_t</name></type> <name pos:start="225:30" pos:end="225:41">tx_buffer_el</name> <init pos:start="225:43" pos:end="225:70">= <expr pos:start="225:45" pos:end="225:70"><call pos:start="225:45" pos:end="225:70"><name pos:start="225:45" pos:end="225:53">lduw_phys</name><argument_list pos:start="225:54" pos:end="225:70">(<argument pos:start="225:55" pos:end="225:69"><expr pos:start="225:55" pos:end="225:69"><name pos:start="225:55" pos:end="225:65">tbd_address</name> <operator pos:start="225:67" pos:end="225:67">+</operator> <literal type="number" pos:start="225:69" pos:end="225:69">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="227:21" pos:end="227:37"><expr pos:start="227:21" pos:end="227:36"><name pos:start="227:21" pos:end="227:31">tbd_address</name> <operator pos:start="227:33" pos:end="227:34">+=</operator> <literal type="number" pos:start="227:36" pos:end="227:36">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="229:21" pos:end="233:61"><expr pos:start="229:21" pos:end="233:60"><call pos:start="229:21" pos:end="233:60"><name pos:start="229:21" pos:end="229:25">TRACE</name><argument_list pos:start="229:26" pos:end="233:60">(<argument pos:start="229:27" pos:end="229:30"><expr pos:start="229:27" pos:end="229:30"><name pos:start="229:27" pos:end="229:30">RXTX</name></expr></argument>, <argument pos:start="229:33" pos:end="233:59"><expr pos:start="229:33" pos:end="233:59"><call pos:start="229:33" pos:end="233:59"><name pos:start="229:33" pos:end="229:38">logout</name>

                        <argument_list pos:start="231:25" pos:end="233:59">(<argument pos:start="231:26" pos:end="231:84"><expr pos:start="231:26" pos:end="231:84"><literal type="string" pos:start="231:26" pos:end="231:84">"TBD (flexible mode): buffer address 0x%08x, size 0x%04x\n"</literal></expr></argument>,

                         <argument pos:start="233:26" pos:end="233:42"><expr pos:start="233:26" pos:end="233:42"><name pos:start="233:26" pos:end="233:42">tx_buffer_address</name></expr></argument>, <argument pos:start="233:45" pos:end="233:58"><expr pos:start="233:45" pos:end="233:58"><name pos:start="233:45" pos:end="233:58">tx_buffer_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="235:21" pos:end="235:77"><expr pos:start="235:21" pos:end="235:76"><name pos:start="235:21" pos:end="235:34">tx_buffer_size</name> <operator pos:start="235:36" pos:end="235:36">=</operator> <call pos:start="235:38" pos:end="235:76"><name pos:start="235:38" pos:end="235:40">MIN</name><argument_list pos:start="235:41" pos:end="235:76">(<argument pos:start="235:42" pos:end="235:55"><expr pos:start="235:42" pos:end="235:55"><name pos:start="235:42" pos:end="235:55">tx_buffer_size</name></expr></argument>, <argument pos:start="235:58" pos:end="235:75"><expr pos:start="235:58" pos:end="235:75"><sizeof pos:start="235:58" pos:end="235:68">sizeof<argument_list pos:start="235:64" pos:end="235:68">(<argument pos:start="235:65" pos:end="235:67"><expr pos:start="235:65" pos:end="235:67"><name pos:start="235:65" pos:end="235:67">buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="235:70" pos:end="235:70">-</operator> <name pos:start="235:72" pos:end="235:75">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="237:21" pos:end="239:61"><expr pos:start="237:21" pos:end="239:60"><call pos:start="237:21" pos:end="239:60"><name pos:start="237:21" pos:end="237:44">cpu_physical_memory_read</name><argument_list pos:start="237:45" pos:end="239:60">(<argument pos:start="237:46" pos:end="237:62"><expr pos:start="237:46" pos:end="237:62"><name pos:start="237:46" pos:end="237:62">tx_buffer_address</name></expr></argument>, <argument pos:start="237:65" pos:end="237:74"><expr pos:start="237:65" pos:end="237:74"><operator pos:start="237:65" pos:end="237:65">&amp;</operator><name pos:start="237:66" pos:end="237:74"><name pos:start="237:66" pos:end="237:68">buf</name><index pos:start="237:69" pos:end="237:74">[<expr pos:start="237:70" pos:end="237:73"><name pos:start="237:70" pos:end="237:73">size</name></expr>]</index></name></expr></argument>,

                                             <argument pos:start="239:46" pos:end="239:59"><expr pos:start="239:46" pos:end="239:59"><name pos:start="239:46" pos:end="239:59">tx_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="241:21" pos:end="241:43"><expr pos:start="241:21" pos:end="241:42"><name pos:start="241:21" pos:end="241:24">size</name> <operator pos:start="241:26" pos:end="241:27">+=</operator> <name pos:start="241:29" pos:end="241:42">tx_buffer_size</name></expr>;</expr_stmt>

                    <if_stmt pos:start="243:21" pos:end="247:21"><if pos:start="243:21" pos:end="247:21">if <condition pos:start="243:24" pos:end="243:41">(<expr pos:start="243:25" pos:end="243:40"><name pos:start="243:25" pos:end="243:36">tx_buffer_el</name> <operator pos:start="243:38" pos:end="243:38">&amp;</operator> <literal type="number" pos:start="243:40" pos:end="243:40">1</literal></expr>)</condition> <block pos:start="243:43" pos:end="247:21">{<block_content pos:start="245:25" pos:end="245:30">

                        <break pos:start="245:25" pos:end="245:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:95"><expr pos:start="253:13" pos:end="253:94"><call pos:start="253:13" pos:end="253:94"><name pos:start="253:13" pos:end="253:17">TRACE</name><argument_list pos:start="253:18" pos:end="253:94">(<argument pos:start="253:19" pos:end="253:22"><expr pos:start="253:19" pos:end="253:22"><name pos:start="253:19" pos:end="253:22">RXTX</name></expr></argument>, <argument pos:start="253:25" pos:end="253:93"><expr pos:start="253:25" pos:end="253:93"><call pos:start="253:25" pos:end="253:93"><name pos:start="253:25" pos:end="253:30">logout</name><argument_list pos:start="253:31" pos:end="253:93">(<argument pos:start="253:32" pos:end="253:62"><expr pos:start="253:32" pos:end="253:62"><literal type="string" pos:start="253:32" pos:end="253:62">"%p sending frame, len=%d,%s\n"</literal></expr></argument>, <argument pos:start="253:65" pos:end="253:65"><expr pos:start="253:65" pos:end="253:65"><name pos:start="253:65" pos:end="253:65">s</name></expr></argument>, <argument pos:start="253:68" pos:end="253:71"><expr pos:start="253:68" pos:end="253:71"><name pos:start="253:68" pos:end="253:71">size</name></expr></argument>, <argument pos:start="253:74" pos:end="253:92"><expr pos:start="253:74" pos:end="253:92"><call pos:start="253:74" pos:end="253:92"><name pos:start="253:74" pos:end="253:81">nic_dump</name><argument_list pos:start="253:82" pos:end="253:92">(<argument pos:start="253:83" pos:end="253:85"><expr pos:start="253:83" pos:end="253:85"><name pos:start="253:83" pos:end="253:85">buf</name></expr></argument>, <argument pos:start="253:88" pos:end="253:91"><expr pos:start="253:88" pos:end="253:91"><name pos:start="253:88" pos:end="253:91">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:47"><expr pos:start="255:13" pos:end="255:46"><call pos:start="255:13" pos:end="255:46"><name pos:start="255:13" pos:end="255:28">qemu_send_packet</name><argument_list pos:start="255:29" pos:end="255:46">(<argument pos:start="255:30" pos:end="255:34"><expr pos:start="255:30" pos:end="255:34"><name pos:start="255:30" pos:end="255:34"><name pos:start="255:30" pos:end="255:30">s</name><operator pos:start="255:31" pos:end="255:32">-&gt;</operator><name pos:start="255:33" pos:end="255:34">vc</name></name></expr></argument>, <argument pos:start="255:37" pos:end="255:39"><expr pos:start="255:37" pos:end="255:39"><name pos:start="255:37" pos:end="255:39">buf</name></expr></argument>, <argument pos:start="255:42" pos:end="255:45"><expr pos:start="255:42" pos:end="255:45"><name pos:start="255:42" pos:end="255:45">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:43"><expr pos:start="257:13" pos:end="257:42"><name pos:start="257:13" pos:end="257:40"><name pos:start="257:13" pos:end="257:13">s</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:25">statistics</name><operator pos:start="257:26" pos:end="257:26">.</operator><name pos:start="257:27" pos:end="257:40">tx_good_frames</name></name><operator pos:start="257:41" pos:end="257:42">++</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="259:13" pos:end="261:63">/* Transmit with bad status would raise an CX/TNO interrupt.

             * (82557 only). Emulation never has bad status. */</comment>

            <comment type="line" pos:start="263:13" pos:end="263:41">//~ eepro100_cx_interrupt(s);</comment>

            <break pos:start="265:13" pos:end="265:18">break;</break>

        <case pos:start="267:9" pos:end="267:20">case <expr pos:start="267:14" pos:end="267:19"><name pos:start="267:14" pos:end="267:19">CmdTDR</name></expr>:</case>

            <expr_stmt pos:start="269:13" pos:end="269:53"><expr pos:start="269:13" pos:end="269:52"><call pos:start="269:13" pos:end="269:52"><name pos:start="269:13" pos:end="269:17">TRACE</name><argument_list pos:start="269:18" pos:end="269:52">(<argument pos:start="269:19" pos:end="269:23"><expr pos:start="269:19" pos:end="269:23"><name pos:start="269:19" pos:end="269:23">OTHER</name></expr></argument>, <argument pos:start="269:26" pos:end="269:51"><expr pos:start="269:26" pos:end="269:51"><call pos:start="269:26" pos:end="269:51"><name pos:start="269:26" pos:end="269:31">logout</name><argument_list pos:start="269:32" pos:end="269:51">(<argument pos:start="269:33" pos:end="269:50"><expr pos:start="269:33" pos:end="269:50"><literal type="string" pos:start="269:33" pos:end="269:50">"load microcode\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="271:13" pos:end="273:64">/* Starting with offset 8, the command contains

             * 64 dwords microcode which we just ignore here. */</comment>

            <break pos:start="275:13" pos:end="275:18">break;</break>

        <default pos:start="277:9" pos:end="277:16">default:</default>

            <expr_stmt pos:start="279:13" pos:end="279:41"><expr pos:start="279:13" pos:end="279:40"><call pos:start="279:13" pos:end="279:40"><name pos:start="279:13" pos:end="279:19">missing</name><argument_list pos:start="279:20" pos:end="279:40">(<argument pos:start="279:21" pos:end="279:39"><expr pos:start="279:21" pos:end="279:39"><literal type="string" pos:start="279:21" pos:end="279:39">"undefined command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <comment type="block" pos:start="283:9" pos:end="283:41">/* Write new status (success). */</comment>

        <expr_stmt pos:start="285:9" pos:end="285:55"><expr pos:start="285:9" pos:end="285:54"><call pos:start="285:9" pos:end="285:54"><name pos:start="285:9" pos:end="285:16">stw_phys</name><argument_list pos:start="285:17" pos:end="285:54">(<argument pos:start="285:18" pos:end="285:27"><expr pos:start="285:18" pos:end="285:27"><name pos:start="285:18" pos:end="285:27">cb_address</name></expr></argument>, <argument pos:start="285:30" pos:end="285:53"><expr pos:start="285:30" pos:end="285:53"><name pos:start="285:30" pos:end="285:35">status</name> <operator pos:start="285:37" pos:end="285:37">|</operator> <literal type="number" pos:start="285:39" pos:end="285:44">0x8000</literal> <operator pos:start="285:46" pos:end="285:46">|</operator> <literal type="number" pos:start="285:48" pos:end="285:53">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="287:9" pos:end="293:9"><if pos:start="287:9" pos:end="293:9">if <condition pos:start="287:12" pos:end="287:18">(<expr pos:start="287:13" pos:end="287:17"><name pos:start="287:13" pos:end="287:17">bit_i</name></expr>)</condition> <block pos:start="287:20" pos:end="293:9">{<block_content pos:start="291:13" pos:end="291:37">

            <comment type="block" pos:start="289:13" pos:end="289:38">/* CU completed action. */</comment>

            <expr_stmt pos:start="291:13" pos:end="291:37"><expr pos:start="291:13" pos:end="291:36"><call pos:start="291:13" pos:end="291:36"><name pos:start="291:13" pos:end="291:33">eepro100_cx_interrupt</name><argument_list pos:start="291:34" pos:end="291:36">(<argument pos:start="291:35" pos:end="291:35"><expr pos:start="291:35" pos:end="291:35"><name pos:start="291:35" pos:end="291:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="295:9" pos:end="319:9"><if pos:start="295:9" pos:end="303:9">if <condition pos:start="295:12" pos:end="295:19">(<expr pos:start="295:13" pos:end="295:18"><name pos:start="295:13" pos:end="295:18">bit_el</name></expr>)</condition> <block pos:start="295:21" pos:end="303:9">{<block_content pos:start="299:13" pos:end="301:38">

            <comment type="block" pos:start="297:13" pos:end="297:58">/* CU becomes idle. Terminate command loop. */</comment>

            <expr_stmt pos:start="299:13" pos:end="299:37"><expr pos:start="299:13" pos:end="299:36"><call pos:start="299:13" pos:end="299:36"><name pos:start="299:13" pos:end="299:24">set_cu_state</name><argument_list pos:start="299:25" pos:end="299:36">(<argument pos:start="299:26" pos:end="299:26"><expr pos:start="299:26" pos:end="299:26"><name pos:start="299:26" pos:end="299:26">s</name></expr></argument>, <argument pos:start="299:29" pos:end="299:35"><expr pos:start="299:29" pos:end="299:35"><name pos:start="299:29" pos:end="299:35">cu_idle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:38"><expr pos:start="301:13" pos:end="301:37"><call pos:start="301:13" pos:end="301:37"><name pos:start="301:13" pos:end="301:34">eepro100_cna_interrupt</name><argument_list pos:start="301:35" pos:end="301:37">(<argument pos:start="301:36" pos:end="301:36"><expr pos:start="301:36" pos:end="301:36"><name pos:start="301:36" pos:end="301:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="303:11" pos:end="311:9">else if <condition pos:start="303:19" pos:end="303:25">(<expr pos:start="303:20" pos:end="303:24"><name pos:start="303:20" pos:end="303:24">bit_s</name></expr>)</condition> <block pos:start="303:27" pos:end="311:9">{<block_content pos:start="307:13" pos:end="309:38">

            <comment type="block" pos:start="305:13" pos:end="305:39">/* CU becomes suspended. */</comment>

            <expr_stmt pos:start="307:13" pos:end="307:42"><expr pos:start="307:13" pos:end="307:41"><call pos:start="307:13" pos:end="307:41"><name pos:start="307:13" pos:end="307:24">set_cu_state</name><argument_list pos:start="307:25" pos:end="307:41">(<argument pos:start="307:26" pos:end="307:26"><expr pos:start="307:26" pos:end="307:26"><name pos:start="307:26" pos:end="307:26">s</name></expr></argument>, <argument pos:start="307:29" pos:end="307:40"><expr pos:start="307:29" pos:end="307:40"><name pos:start="307:29" pos:end="307:40">cu_suspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:38"><expr pos:start="309:13" pos:end="309:37"><call pos:start="309:13" pos:end="309:37"><name pos:start="309:13" pos:end="309:34">eepro100_cna_interrupt</name><argument_list pos:start="309:35" pos:end="309:37">(<argument pos:start="309:36" pos:end="309:36"><expr pos:start="309:36" pos:end="309:36"><name pos:start="309:36" pos:end="309:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="311:11" pos:end="319:9">else <block pos:start="311:16" pos:end="319:9">{<block_content pos:start="315:13" pos:end="317:30">

            <comment type="block" pos:start="313:13" pos:end="313:39">/* More entries in list. */</comment>

            <expr_stmt pos:start="315:13" pos:end="315:75"><expr pos:start="315:13" pos:end="315:74"><call pos:start="315:13" pos:end="315:74"><name pos:start="315:13" pos:end="315:17">TRACE</name><argument_list pos:start="315:18" pos:end="315:74">(<argument pos:start="315:19" pos:end="315:23"><expr pos:start="315:19" pos:end="315:23"><name pos:start="315:19" pos:end="315:23">OTHER</name></expr></argument>, <argument pos:start="315:26" pos:end="315:73"><expr pos:start="315:26" pos:end="315:73"><call pos:start="315:26" pos:end="315:73"><name pos:start="315:26" pos:end="315:31">logout</name><argument_list pos:start="315:32" pos:end="315:73">(<argument pos:start="315:33" pos:end="315:72"><expr pos:start="315:33" pos:end="315:72"><literal type="string" pos:start="315:33" pos:end="315:72">"CU list with at least one more entry\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="317:13" pos:end="317:30">goto <name pos:start="317:18" pos:end="317:29">next_command</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:48"><expr pos:start="321:9" pos:end="321:47"><call pos:start="321:9" pos:end="321:47"><name pos:start="321:9" pos:end="321:13">TRACE</name><argument_list pos:start="321:14" pos:end="321:47">(<argument pos:start="321:15" pos:end="321:19"><expr pos:start="321:15" pos:end="321:19"><name pos:start="321:15" pos:end="321:19">OTHER</name></expr></argument>, <argument pos:start="321:22" pos:end="321:46"><expr pos:start="321:22" pos:end="321:46"><call pos:start="321:22" pos:end="321:46"><name pos:start="321:22" pos:end="321:27">logout</name><argument_list pos:start="321:28" pos:end="321:46">(<argument pos:start="321:29" pos:end="321:45"><expr pos:start="321:29" pos:end="321:45"><literal type="string" pos:start="321:29" pos:end="321:45">"CU list empty\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="323:9" pos:end="323:57">/* List is empty. Now CU is idle or suspended. */</comment>

        <break pos:start="325:9" pos:end="325:14">break;</break>

    <case pos:start="327:5" pos:end="327:19">case <expr pos:start="327:10" pos:end="327:18"><name pos:start="327:10" pos:end="327:18">CU_RESUME</name></expr>:</case>

        <if_stmt pos:start="329:9" pos:end="341:9"><if pos:start="329:9" pos:end="341:9">if <condition pos:start="329:12" pos:end="329:44">(<expr pos:start="329:13" pos:end="329:43"><call pos:start="329:13" pos:end="329:27"><name pos:start="329:13" pos:end="329:24">get_cu_state</name><argument_list pos:start="329:25" pos:end="329:27">(<argument pos:start="329:26" pos:end="329:26"><expr pos:start="329:26" pos:end="329:26"><name pos:start="329:26" pos:end="329:26">s</name></expr></argument>)</argument_list></call> <operator pos:start="329:29" pos:end="329:30">!=</operator> <name pos:start="329:32" pos:end="329:43">cu_suspended</name></expr>)</condition> <block pos:start="329:46" pos:end="341:9">{<block_content pos:start="331:13" pos:end="339:42">

            <expr_stmt pos:start="331:13" pos:end="331:72"><expr pos:start="331:13" pos:end="331:71"><call pos:start="331:13" pos:end="331:71"><name pos:start="331:13" pos:end="331:18">logout</name><argument_list pos:start="331:19" pos:end="331:71">(<argument pos:start="331:20" pos:end="331:53"><expr pos:start="331:20" pos:end="331:53"><literal type="string" pos:start="331:20" pos:end="331:53">"bad CU resume from CU state %u\n"</literal></expr></argument>, <argument pos:start="331:56" pos:end="331:70"><expr pos:start="331:56" pos:end="331:70"><call pos:start="331:56" pos:end="331:70"><name pos:start="331:56" pos:end="331:67">get_cu_state</name><argument_list pos:start="331:68" pos:end="331:70">(<argument pos:start="331:69" pos:end="331:69"><expr pos:start="331:69" pos:end="331:69"><name pos:start="331:69" pos:end="331:69">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="333:13" pos:end="335:34">/* Workaround for bad Linux eepro100 driver which resumes

             * from idle state. */</comment>

            <comment type="line" pos:start="337:13" pos:end="337:37">//~ missing("cu resume");</comment>

            <expr_stmt pos:start="339:13" pos:end="339:42"><expr pos:start="339:13" pos:end="339:41"><call pos:start="339:13" pos:end="339:41"><name pos:start="339:13" pos:end="339:24">set_cu_state</name><argument_list pos:start="339:25" pos:end="339:41">(<argument pos:start="339:26" pos:end="339:26"><expr pos:start="339:26" pos:end="339:26"><name pos:start="339:26" pos:end="339:26">s</name></expr></argument>, <argument pos:start="339:29" pos:end="339:40"><expr pos:start="339:29" pos:end="339:40"><name pos:start="339:29" pos:end="339:40">cu_suspended</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="343:9" pos:end="351:9"><if pos:start="343:9" pos:end="351:9">if <condition pos:start="343:12" pos:end="343:44">(<expr pos:start="343:13" pos:end="343:43"><call pos:start="343:13" pos:end="343:27"><name pos:start="343:13" pos:end="343:24">get_cu_state</name><argument_list pos:start="343:25" pos:end="343:27">(<argument pos:start="343:26" pos:end="343:26"><expr pos:start="343:26" pos:end="343:26"><name pos:start="343:26" pos:end="343:26">s</name></expr></argument>)</argument_list></call> <operator pos:start="343:29" pos:end="343:30">==</operator> <name pos:start="343:32" pos:end="343:43">cu_suspended</name></expr>)</condition> <block pos:start="343:46" pos:end="351:9">{<block_content pos:start="345:13" pos:end="349:30">

            <expr_stmt pos:start="345:13" pos:end="345:50"><expr pos:start="345:13" pos:end="345:49"><call pos:start="345:13" pos:end="345:49"><name pos:start="345:13" pos:end="345:17">TRACE</name><argument_list pos:start="345:18" pos:end="345:49">(<argument pos:start="345:19" pos:end="345:23"><expr pos:start="345:19" pos:end="345:23"><name pos:start="345:19" pos:end="345:23">OTHER</name></expr></argument>, <argument pos:start="345:26" pos:end="345:48"><expr pos:start="345:26" pos:end="345:48"><call pos:start="345:26" pos:end="345:48"><name pos:start="345:26" pos:end="345:31">logout</name><argument_list pos:start="345:32" pos:end="345:48">(<argument pos:start="345:33" pos:end="345:47"><expr pos:start="345:33" pos:end="345:47"><literal type="string" pos:start="345:33" pos:end="345:47">"CU resuming\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="347:13" pos:end="347:39"><expr pos:start="347:13" pos:end="347:38"><call pos:start="347:13" pos:end="347:38"><name pos:start="347:13" pos:end="347:24">set_cu_state</name><argument_list pos:start="347:25" pos:end="347:38">(<argument pos:start="347:26" pos:end="347:26"><expr pos:start="347:26" pos:end="347:26"><name pos:start="347:26" pos:end="347:26">s</name></expr></argument>, <argument pos:start="347:29" pos:end="347:37"><expr pos:start="347:29" pos:end="347:37"><name pos:start="347:29" pos:end="347:37">cu_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="349:13" pos:end="349:30">goto <name pos:start="349:18" pos:end="349:29">next_command</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="353:9" pos:end="353:14">break;</break>

    <case pos:start="355:5" pos:end="355:22">case <expr pos:start="355:10" pos:end="355:21"><name pos:start="355:10" pos:end="355:21">CU_STATSADDR</name></expr>:</case>

        <comment type="block" pos:start="357:9" pos:end="357:41">/* Load dump counters address. */</comment>

        <expr_stmt pos:start="359:9" pos:end="359:34"><expr pos:start="359:9" pos:end="359:33"><name pos:start="359:9" pos:end="359:20"><name pos:start="359:9" pos:end="359:9">s</name><operator pos:start="359:10" pos:end="359:11">-&gt;</operator><name pos:start="359:12" pos:end="359:20">statsaddr</name></name> <operator pos:start="359:22" pos:end="359:22">=</operator> <name pos:start="359:24" pos:end="359:33"><name pos:start="359:24" pos:end="359:24">s</name><operator pos:start="359:25" pos:end="359:26">-&gt;</operator><name pos:start="359:27" pos:end="359:33">pointer</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="361:9" pos:end="361:67"><expr pos:start="361:9" pos:end="361:66"><call pos:start="361:9" pos:end="361:66"><name pos:start="361:9" pos:end="361:13">TRACE</name><argument_list pos:start="361:14" pos:end="361:66">(<argument pos:start="361:15" pos:end="361:19"><expr pos:start="361:15" pos:end="361:19"><name pos:start="361:15" pos:end="361:19">OTHER</name></expr></argument>, <argument pos:start="361:22" pos:end="361:65"><expr pos:start="361:22" pos:end="361:65"><call pos:start="361:22" pos:end="361:65"><name pos:start="361:22" pos:end="361:27">logout</name><argument_list pos:start="361:28" pos:end="361:65">(<argument pos:start="361:29" pos:end="361:59"><expr pos:start="361:29" pos:end="361:59"><literal type="string" pos:start="361:29" pos:end="361:59">"val=0x%02x (status address)\n"</literal></expr></argument>, <argument pos:start="361:62" pos:end="361:64"><expr pos:start="361:62" pos:end="361:64"><name pos:start="361:62" pos:end="361:64">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="363:9" pos:end="363:14">break;</break>

    <case pos:start="365:5" pos:end="365:22">case <expr pos:start="365:10" pos:end="365:21"><name pos:start="365:10" pos:end="365:21">CU_SHOWSTATS</name></expr>:</case>

        <comment type="block" pos:start="367:9" pos:end="367:40">/* Dump statistical counters. */</comment>

        <expr_stmt pos:start="369:9" pos:end="369:63"><expr pos:start="369:9" pos:end="369:62"><call pos:start="369:9" pos:end="369:62"><name pos:start="369:9" pos:end="369:13">TRACE</name><argument_list pos:start="369:14" pos:end="369:62">(<argument pos:start="369:15" pos:end="369:19"><expr pos:start="369:15" pos:end="369:19"><name pos:start="369:15" pos:end="369:19">OTHER</name></expr></argument>, <argument pos:start="369:22" pos:end="369:61"><expr pos:start="369:22" pos:end="369:61"><call pos:start="369:22" pos:end="369:61"><name pos:start="369:22" pos:end="369:27">logout</name><argument_list pos:start="369:28" pos:end="369:61">(<argument pos:start="369:29" pos:end="369:55"><expr pos:start="369:29" pos:end="369:55"><literal type="string" pos:start="369:29" pos:end="369:55">"val=0x%02x (dump stats)\n"</literal></expr></argument>, <argument pos:start="369:58" pos:end="369:60"><expr pos:start="369:58" pos:end="369:60"><name pos:start="369:58" pos:end="369:60">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:27"><expr pos:start="371:9" pos:end="371:26"><call pos:start="371:9" pos:end="371:26"><name pos:start="371:9" pos:end="371:23">dump_statistics</name><argument_list pos:start="371:24" pos:end="371:26">(<argument pos:start="371:25" pos:end="371:25"><expr pos:start="371:25" pos:end="371:25"><name pos:start="371:25" pos:end="371:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="373:9" pos:end="373:14">break;</break>

    <case pos:start="375:5" pos:end="375:21">case <expr pos:start="375:10" pos:end="375:20"><name pos:start="375:10" pos:end="375:20">CU_CMD_BASE</name></expr>:</case>

        <comment type="block" pos:start="377:9" pos:end="377:27">/* Load CU base. */</comment>

        <expr_stmt pos:start="379:9" pos:end="379:68"><expr pos:start="379:9" pos:end="379:67"><call pos:start="379:9" pos:end="379:67"><name pos:start="379:9" pos:end="379:13">TRACE</name><argument_list pos:start="379:14" pos:end="379:67">(<argument pos:start="379:15" pos:end="379:19"><expr pos:start="379:15" pos:end="379:19"><name pos:start="379:15" pos:end="379:19">OTHER</name></expr></argument>, <argument pos:start="379:22" pos:end="379:66"><expr pos:start="379:22" pos:end="379:66"><call pos:start="379:22" pos:end="379:66"><name pos:start="379:22" pos:end="379:27">logout</name><argument_list pos:start="379:28" pos:end="379:66">(<argument pos:start="379:29" pos:end="379:60"><expr pos:start="379:29" pos:end="379:60"><literal type="string" pos:start="379:29" pos:end="379:60">"val=0x%02x (CU base address)\n"</literal></expr></argument>, <argument pos:start="379:63" pos:end="379:65"><expr pos:start="379:63" pos:end="379:65"><name pos:start="379:63" pos:end="379:65">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="381:9" pos:end="381:32"><expr pos:start="381:9" pos:end="381:31"><name pos:start="381:9" pos:end="381:18"><name pos:start="381:9" pos:end="381:9">s</name><operator pos:start="381:10" pos:end="381:11">-&gt;</operator><name pos:start="381:12" pos:end="381:18">cu_base</name></name> <operator pos:start="381:20" pos:end="381:20">=</operator> <name pos:start="381:22" pos:end="381:31"><name pos:start="381:22" pos:end="381:22">s</name><operator pos:start="381:23" pos:end="381:24">-&gt;</operator><name pos:start="381:25" pos:end="381:31">pointer</name></name></expr>;</expr_stmt>

        <break pos:start="383:9" pos:end="383:14">break;</break>

    <case pos:start="385:5" pos:end="385:22">case <expr pos:start="385:10" pos:end="385:21"><name pos:start="385:10" pos:end="385:21">CU_DUMPSTATS</name></expr>:</case>

        <comment type="block" pos:start="387:9" pos:end="387:50">/* Dump and reset statistical counters. */</comment>

        <expr_stmt pos:start="389:9" pos:end="389:73"><expr pos:start="389:9" pos:end="389:72"><call pos:start="389:9" pos:end="389:72"><name pos:start="389:9" pos:end="389:13">TRACE</name><argument_list pos:start="389:14" pos:end="389:72">(<argument pos:start="389:15" pos:end="389:19"><expr pos:start="389:15" pos:end="389:19"><name pos:start="389:15" pos:end="389:19">OTHER</name></expr></argument>, <argument pos:start="389:22" pos:end="389:71"><expr pos:start="389:22" pos:end="389:71"><call pos:start="389:22" pos:end="389:71"><name pos:start="389:22" pos:end="389:27">logout</name><argument_list pos:start="389:28" pos:end="389:71">(<argument pos:start="389:29" pos:end="389:65"><expr pos:start="389:29" pos:end="389:65"><literal type="string" pos:start="389:29" pos:end="389:65">"val=0x%02x (dump stats and reset)\n"</literal></expr></argument>, <argument pos:start="389:68" pos:end="389:70"><expr pos:start="389:68" pos:end="389:70"><name pos:start="389:68" pos:end="389:70">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="391:9" pos:end="391:27"><expr pos:start="391:9" pos:end="391:26"><call pos:start="391:9" pos:end="391:26"><name pos:start="391:9" pos:end="391:23">dump_statistics</name><argument_list pos:start="391:24" pos:end="391:26">(<argument pos:start="391:25" pos:end="391:25"><expr pos:start="391:25" pos:end="391:25"><name pos:start="391:25" pos:end="391:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="393:9" pos:end="393:57"><expr pos:start="393:9" pos:end="393:56"><call pos:start="393:9" pos:end="393:56"><name pos:start="393:9" pos:end="393:14">memset</name><argument_list pos:start="393:15" pos:end="393:56">(<argument pos:start="393:16" pos:end="393:29"><expr pos:start="393:16" pos:end="393:29"><operator pos:start="393:16" pos:end="393:16">&amp;</operator><name pos:start="393:17" pos:end="393:29"><name pos:start="393:17" pos:end="393:17">s</name><operator pos:start="393:18" pos:end="393:19">-&gt;</operator><name pos:start="393:20" pos:end="393:29">statistics</name></name></expr></argument>, <argument pos:start="393:32" pos:end="393:32"><expr pos:start="393:32" pos:end="393:32"><literal type="number" pos:start="393:32" pos:end="393:32">0</literal></expr></argument>, <argument pos:start="393:35" pos:end="393:55"><expr pos:start="393:35" pos:end="393:55"><sizeof pos:start="393:35" pos:end="393:55">sizeof<argument_list pos:start="393:41" pos:end="393:55">(<argument pos:start="393:42" pos:end="393:54"><expr pos:start="393:42" pos:end="393:54"><name pos:start="393:42" pos:end="393:54"><name pos:start="393:42" pos:end="393:42">s</name><operator pos:start="393:43" pos:end="393:44">-&gt;</operator><name pos:start="393:45" pos:end="393:54">statistics</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="395:9" pos:end="395:14">break;</break>

    <case pos:start="397:5" pos:end="397:20">case <expr pos:start="397:10" pos:end="397:19"><name pos:start="397:10" pos:end="397:19">CU_SRESUME</name></expr>:</case>

        <comment type="block" pos:start="399:9" pos:end="399:31">/* CU static resume. */</comment>

        <expr_stmt pos:start="401:9" pos:end="401:36"><expr pos:start="401:9" pos:end="401:35"><call pos:start="401:9" pos:end="401:35"><name pos:start="401:9" pos:end="401:15">missing</name><argument_list pos:start="401:16" pos:end="401:35">(<argument pos:start="401:17" pos:end="401:34"><expr pos:start="401:17" pos:end="401:34"><literal type="string" pos:start="401:17" pos:end="401:34">"CU static resume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="403:9" pos:end="403:14">break;</break>

    <default pos:start="405:5" pos:end="405:12">default:</default>

        <expr_stmt pos:start="407:9" pos:end="407:40"><expr pos:start="407:9" pos:end="407:39"><call pos:start="407:9" pos:end="407:39"><name pos:start="407:9" pos:end="407:15">missing</name><argument_list pos:start="407:16" pos:end="407:39">(<argument pos:start="407:17" pos:end="407:38"><expr pos:start="407:17" pos:end="407:38"><literal type="string" pos:start="407:17" pos:end="407:38">"Undefined CU command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
