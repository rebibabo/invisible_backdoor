<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19020.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">preallocate</name><parameter_list pos:start="1:23" pos:end="1:44">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:39">BlockDriverState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:43">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:13">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:23">nb_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">QCowL2Meta</name></type> <name pos:start="13:16" pos:end="13:19">meta</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:41"><expr pos:start="17:5" pos:end="17:40"><name pos:start="17:5" pos:end="17:14">nb_sectors</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <call pos:start="17:18" pos:end="17:35"><name pos:start="17:18" pos:end="17:31">bdrv_getlength</name><argument_list pos:start="17:32" pos:end="17:35">(<argument pos:start="17:33" pos:end="17:34"><expr pos:start="17:33" pos:end="17:34"><name pos:start="17:33" pos:end="17:34">bs</name></expr></argument>)</argument_list></call> <operator pos:start="17:37" pos:end="17:38">&gt;&gt;</operator> <literal type="number" pos:start="17:40" pos:end="17:40">9</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:15"><expr pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:10">offset</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:41"><expr pos:start="21:5" pos:end="21:40"><call pos:start="21:5" pos:end="21:40"><name pos:start="21:5" pos:end="21:14">QLIST_INIT</name><argument_list pos:start="21:15" pos:end="21:40">(<argument pos:start="21:16" pos:end="21:39"><expr pos:start="21:16" pos:end="21:39"><operator pos:start="21:16" pos:end="21:16">&amp;</operator><name pos:start="21:17" pos:end="21:39"><name pos:start="21:17" pos:end="21:20">meta</name><operator pos:start="21:21" pos:end="21:21">.</operator><name pos:start="21:22" pos:end="21:39">dependent_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:28"><expr pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:8">meta</name><operator pos:start="23:9" pos:end="23:9">.</operator><name pos:start="23:10" pos:end="23:23">cluster_offset</name></name> <operator pos:start="23:25" pos:end="23:25">=</operator> <literal type="number" pos:start="23:27" pos:end="23:27">0</literal></expr>;</expr_stmt>



    <while pos:start="27:5" pos:end="69:5">while <condition pos:start="27:11" pos:end="27:22">(<expr pos:start="27:12" pos:end="27:21"><name pos:start="27:12" pos:end="27:21">nb_sectors</name></expr>)</condition> <block pos:start="27:24" pos:end="69:5">{<block_content pos:start="29:9" pos:end="67:27">

        <expr_stmt pos:start="29:9" pos:end="29:44"><expr pos:start="29:9" pos:end="29:43"><name pos:start="29:9" pos:end="29:11">num</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:43"><name pos:start="29:15" pos:end="29:17">MIN</name><argument_list pos:start="29:18" pos:end="29:43">(<argument pos:start="29:19" pos:end="29:28"><expr pos:start="29:19" pos:end="29:28"><name pos:start="29:19" pos:end="29:28">nb_sectors</name></expr></argument>, <argument pos:start="29:31" pos:end="29:42"><expr pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:37">INT_MAX</name> <operator pos:start="29:39" pos:end="29:40">&gt;&gt;</operator> <literal type="number" pos:start="29:42" pos:end="29:42">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:74"><expr pos:start="31:9" pos:end="31:73"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:73"><name pos:start="31:15" pos:end="31:40">qcow2_alloc_cluster_offset</name><argument_list pos:start="31:41" pos:end="31:73">(<argument pos:start="31:42" pos:end="31:43"><expr pos:start="31:42" pos:end="31:43"><name pos:start="31:42" pos:end="31:43">bs</name></expr></argument>, <argument pos:start="31:46" pos:end="31:51"><expr pos:start="31:46" pos:end="31:51"><name pos:start="31:46" pos:end="31:51">offset</name></expr></argument>, <argument pos:start="31:54" pos:end="31:54"><expr pos:start="31:54" pos:end="31:54"><literal type="number" pos:start="31:54" pos:end="31:54">0</literal></expr></argument>, <argument pos:start="31:57" pos:end="31:59"><expr pos:start="31:57" pos:end="31:59"><name pos:start="31:57" pos:end="31:59">num</name></expr></argument>, <argument pos:start="31:62" pos:end="31:65"><expr pos:start="31:62" pos:end="31:65"><operator pos:start="31:62" pos:end="31:62">&amp;</operator><name pos:start="31:63" pos:end="31:65">num</name></expr></argument>, <argument pos:start="31:68" pos:end="31:72"><expr pos:start="31:68" pos:end="31:72"><operator pos:start="31:68" pos:end="31:68">&amp;</operator><name pos:start="31:69" pos:end="31:72">meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:20">(<expr pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:15">ret</name> <operator pos:start="35:17" pos:end="35:17">&lt;</operator> <literal type="number" pos:start="35:19" pos:end="35:19">0</literal></expr>)</condition> <block pos:start="35:22" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:22">

            <return pos:start="37:13" pos:end="37:22">return <expr pos:start="37:20" pos:end="37:21"><operator pos:start="37:20" pos:end="37:20">-</operator><literal type="number" pos:start="37:21" pos:end="37:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:55">(<expr pos:start="43:13" pos:end="43:54"><call pos:start="43:13" pos:end="43:50"><name pos:start="43:13" pos:end="43:39">qcow2_alloc_cluster_link_l2</name><argument_list pos:start="43:40" pos:end="43:50">(<argument pos:start="43:41" pos:end="43:42"><expr pos:start="43:41" pos:end="43:42"><name pos:start="43:41" pos:end="43:42">bs</name></expr></argument>, <argument pos:start="43:45" pos:end="43:49"><expr pos:start="43:45" pos:end="43:49"><operator pos:start="43:45" pos:end="43:45">&amp;</operator><name pos:start="43:46" pos:end="43:49">meta</name></expr></argument>)</argument_list></call> <operator pos:start="43:52" pos:end="43:52">&lt;</operator> <literal type="number" pos:start="43:54" pos:end="43:54">0</literal></expr>)</condition> <block pos:start="43:57" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:22">

            <expr_stmt pos:start="45:13" pos:end="45:79"><expr pos:start="45:13" pos:end="45:78"><call pos:start="45:13" pos:end="45:78"><name pos:start="45:13" pos:end="45:35">qcow2_free_any_clusters</name><argument_list pos:start="45:36" pos:end="45:78">(<argument pos:start="45:37" pos:end="45:38"><expr pos:start="45:37" pos:end="45:38"><name pos:start="45:37" pos:end="45:38">bs</name></expr></argument>, <argument pos:start="45:41" pos:end="45:59"><expr pos:start="45:41" pos:end="45:59"><name pos:start="45:41" pos:end="45:59"><name pos:start="45:41" pos:end="45:44">meta</name><operator pos:start="45:45" pos:end="45:45">.</operator><name pos:start="45:46" pos:end="45:59">cluster_offset</name></name></expr></argument>, <argument pos:start="45:62" pos:end="45:77"><expr pos:start="45:62" pos:end="45:77"><name pos:start="45:62" pos:end="45:77"><name pos:start="45:62" pos:end="45:65">meta</name><operator pos:start="45:66" pos:end="45:66">.</operator><name pos:start="45:67" pos:end="45:77">nb_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:22">return <expr pos:start="47:20" pos:end="47:21"><operator pos:start="47:20" pos:end="47:20">-</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="53:9" pos:end="55:49">/* There are no dependent requests, but we need to remove our request

         * from the list of in-flight requests */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><call pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:30">run_dependent_requests</name><argument_list pos:start="57:31" pos:end="57:37">(<argument pos:start="57:32" pos:end="57:36"><expr pos:start="57:32" pos:end="57:36"><operator pos:start="57:32" pos:end="57:32">&amp;</operator><name pos:start="57:33" pos:end="57:36">meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="61:9" pos:end="61:48">/* TODO Preallocate data if requested */</comment>



        <expr_stmt pos:start="65:9" pos:end="65:26"><expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:18">nb_sectors</name> <operator pos:start="65:20" pos:end="65:21">-=</operator> <name pos:start="65:23" pos:end="65:25">num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:27"><expr pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:14">offset</name> <operator pos:start="67:16" pos:end="67:17">+=</operator> <name pos:start="67:19" pos:end="67:21">num</name> <operator pos:start="67:23" pos:end="67:24">&lt;&lt;</operator> <literal type="number" pos:start="67:26" pos:end="67:26">9</literal></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="73:5" pos:end="81:7">/*

     * It is expected that the image file is large enough to actually contain

     * all of the allocated clusters (otherwise we get failing reads after

     * EOF). Extend the image to the last allocated sector.

     */</comment>

    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:33">(<expr pos:start="83:9" pos:end="83:32"><name pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:12">meta</name><operator pos:start="83:13" pos:end="83:13">.</operator><name pos:start="83:14" pos:end="83:27">cluster_offset</name></name> <operator pos:start="83:29" pos:end="83:30">!=</operator> <literal type="number" pos:start="83:32" pos:end="83:32">0</literal></expr>)</condition> <block pos:start="83:35" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:75">

        <decl_stmt pos:start="85:9" pos:end="85:25"><decl pos:start="85:9" pos:end="85:24"><type pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:15">uint8_t</name></type> <name pos:start="85:17" pos:end="85:24"><name pos:start="85:17" pos:end="85:19">buf</name><index pos:start="85:20" pos:end="85:24">[<expr pos:start="85:21" pos:end="85:23"><literal type="number" pos:start="85:21" pos:end="85:23">512</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:28"><expr pos:start="87:9" pos:end="87:27"><call pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:14">memset</name><argument_list pos:start="87:15" pos:end="87:27">(<argument pos:start="87:16" pos:end="87:18"><expr pos:start="87:16" pos:end="87:18"><name pos:start="87:16" pos:end="87:18">buf</name></expr></argument>, <argument pos:start="87:21" pos:end="87:21"><expr pos:start="87:21" pos:end="87:21"><literal type="number" pos:start="87:21" pos:end="87:21">0</literal></expr></argument>, <argument pos:start="87:24" pos:end="87:26"><expr pos:start="87:24" pos:end="87:26"><literal type="number" pos:start="87:24" pos:end="87:26">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:75"><expr pos:start="89:9" pos:end="89:74"><call pos:start="89:9" pos:end="89:74"><name pos:start="89:9" pos:end="89:18">bdrv_write</name><argument_list pos:start="89:19" pos:end="89:74">(<argument pos:start="89:20" pos:end="89:27"><expr pos:start="89:20" pos:end="89:27"><name pos:start="89:20" pos:end="89:27"><name pos:start="89:20" pos:end="89:21">bs</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:27">file</name></name></expr></argument>, <argument pos:start="89:30" pos:end="89:65"><expr pos:start="89:30" pos:end="89:65"><operator pos:start="89:30" pos:end="89:30">(</operator><name pos:start="89:31" pos:end="89:49"><name pos:start="89:31" pos:end="89:34">meta</name><operator pos:start="89:35" pos:end="89:35">.</operator><name pos:start="89:36" pos:end="89:49">cluster_offset</name></name> <operator pos:start="89:51" pos:end="89:52">&gt;&gt;</operator> <literal type="number" pos:start="89:54" pos:end="89:54">9</literal><operator pos:start="89:55" pos:end="89:55">)</operator> <operator pos:start="89:57" pos:end="89:57">+</operator> <name pos:start="89:59" pos:end="89:61">num</name> <operator pos:start="89:63" pos:end="89:63">-</operator> <literal type="number" pos:start="89:65" pos:end="89:65">1</literal></expr></argument>, <argument pos:start="89:68" pos:end="89:70"><expr pos:start="89:68" pos:end="89:70"><name pos:start="89:68" pos:end="89:70">buf</name></expr></argument>, <argument pos:start="89:73" pos:end="89:73"><expr pos:start="89:73" pos:end="89:73"><literal type="number" pos:start="89:73" pos:end="89:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
