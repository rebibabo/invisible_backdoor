<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3307.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">rtas_nvram_store</name><parameter_list pos:start="1:29" pos:end="7:62">(<parameter pos:start="1:30" pos:end="1:44"><decl pos:start="1:30" pos:end="1:44"><type pos:start="1:30" pos:end="1:44"><name pos:start="1:30" pos:end="1:39">PowerPCCPU</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">cpu</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:69"><decl pos:start="1:47" pos:end="1:69"><type pos:start="1:47" pos:end="1:69"><name pos:start="1:47" pos:end="1:62">sPAPREnvironment</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">spapr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:37">uint32_t</name></type> <name pos:start="3:39" pos:end="3:43">token</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:59"><decl pos:start="3:46" pos:end="3:59"><type pos:start="3:46" pos:end="3:59"><name pos:start="3:46" pos:end="3:53">uint32_t</name></type> <name pos:start="3:55" pos:end="3:59">nargs</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:46"><decl pos:start="5:30" pos:end="5:46"><type pos:start="5:30" pos:end="5:46"><name pos:start="5:30" pos:end="5:41">target_ulong</name></type> <name pos:start="5:43" pos:end="5:46">args</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:42"><decl pos:start="7:30" pos:end="7:42"><type pos:start="7:30" pos:end="7:42"><name pos:start="7:30" pos:end="7:37">uint32_t</name></type> <name pos:start="7:39" pos:end="7:42">nret</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:61"><decl pos:start="7:45" pos:end="7:61"><type pos:start="7:45" pos:end="7:61"><name pos:start="7:45" pos:end="7:56">target_ulong</name></type> <name pos:start="7:58" pos:end="7:61">rets</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="87:1">{<block_content pos:start="11:5" pos:end="85:44">

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">sPAPRNVRAM</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:21">nvram</name> <init pos:start="11:23" pos:end="11:36">= <expr pos:start="11:25" pos:end="11:36"><name pos:start="11:25" pos:end="11:36"><name pos:start="11:25" pos:end="11:29">spapr</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:36">nvram</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:17">offset</name></decl>, <decl pos:start="13:20" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:10"/><name pos:start="13:20" pos:end="13:25">buffer</name></decl>, <decl pos:start="13:28" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:10"/><name pos:start="13:28" pos:end="13:30">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">alen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:16">membuf</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:36">(<expr pos:start="21:9" pos:end="21:35"><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:14">nargs</name> <operator pos:start="21:16" pos:end="21:17">!=</operator> <literal type="number" pos:start="21:19" pos:end="21:19">3</literal><operator pos:start="21:20" pos:end="21:20">)</operator> <operator pos:start="21:22" pos:end="21:23">||</operator> <operator pos:start="21:25" pos:end="21:25">(</operator><name pos:start="21:26" pos:end="21:29">nret</name> <operator pos:start="21:31" pos:end="21:32">!=</operator> <literal type="number" pos:start="21:34" pos:end="21:34">2</literal><operator pos:start="21:35" pos:end="21:35">)</operator></expr>)</condition> <block pos:start="21:38" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><call pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:15">rtas_st</name><argument_list pos:start="23:16" pos:end="23:46">(<argument pos:start="23:17" pos:end="23:20"><expr pos:start="23:17" pos:end="23:20"><name pos:start="23:17" pos:end="23:20">rets</name></expr></argument>, <argument pos:start="23:23" pos:end="23:23"><expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr></argument>, <argument pos:start="23:26" pos:end="23:45"><expr pos:start="23:26" pos:end="23:45"><name pos:start="23:26" pos:end="23:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:15">(<expr pos:start="31:9" pos:end="31:14"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:14">nvram</name></expr>)</condition> <block pos:start="31:17" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:44"><expr pos:start="33:9" pos:end="33:43"><call pos:start="33:9" pos:end="33:43"><name pos:start="33:9" pos:end="33:15">rtas_st</name><argument_list pos:start="33:16" pos:end="33:43">(<argument pos:start="33:17" pos:end="33:20"><expr pos:start="33:17" pos:end="33:20"><name pos:start="33:17" pos:end="33:20">rets</name></expr></argument>, <argument pos:start="33:23" pos:end="33:23"><expr pos:start="33:23" pos:end="33:23"><literal type="number" pos:start="33:23" pos:end="33:23">0</literal></expr></argument>, <argument pos:start="33:26" pos:end="33:42"><expr pos:start="33:26" pos:end="33:42"><name pos:start="33:26" pos:end="33:42">RTAS_OUT_HW_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:10">offset</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <call pos:start="41:14" pos:end="41:29"><name pos:start="41:14" pos:end="41:20">rtas_ld</name><argument_list pos:start="41:21" pos:end="41:29">(<argument pos:start="41:22" pos:end="41:25"><expr pos:start="41:22" pos:end="41:25"><name pos:start="41:22" pos:end="41:25">args</name></expr></argument>, <argument pos:start="41:28" pos:end="41:28"><expr pos:start="41:28" pos:end="41:28"><literal type="number" pos:start="41:28" pos:end="41:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:30"><expr pos:start="43:5" pos:end="43:29"><name pos:start="43:5" pos:end="43:10">buffer</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <call pos:start="43:14" pos:end="43:29"><name pos:start="43:14" pos:end="43:20">rtas_ld</name><argument_list pos:start="43:21" pos:end="43:29">(<argument pos:start="43:22" pos:end="43:25"><expr pos:start="43:22" pos:end="43:25"><name pos:start="43:22" pos:end="43:25">args</name></expr></argument>, <argument pos:start="43:28" pos:end="43:28"><expr pos:start="43:28" pos:end="43:28"><literal type="number" pos:start="43:28" pos:end="43:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:27"><expr pos:start="45:5" pos:end="45:26"><name pos:start="45:5" pos:end="45:7">len</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:26"><name pos:start="45:11" pos:end="45:17">rtas_ld</name><argument_list pos:start="45:18" pos:end="45:26">(<argument pos:start="45:19" pos:end="45:22"><expr pos:start="45:19" pos:end="45:22"><name pos:start="45:19" pos:end="45:22">args</name></expr></argument>, <argument pos:start="45:25" pos:end="45:25"><expr pos:start="45:25" pos:end="45:25"><literal type="number" pos:start="45:25" pos:end="45:25">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="51:42">(<expr pos:start="49:9" pos:end="51:41"><operator pos:start="49:9" pos:end="49:9">(</operator><operator pos:start="49:10" pos:end="49:10">(</operator><name pos:start="49:11" pos:end="49:16">offset</name> <operator pos:start="49:18" pos:end="49:18">+</operator> <name pos:start="49:20" pos:end="49:22">len</name><operator pos:start="49:23" pos:end="49:23">)</operator> <operator pos:start="49:25" pos:end="49:25">&lt;</operator> <name pos:start="49:27" pos:end="49:32">offset</name><operator pos:start="49:33" pos:end="49:33">)</operator>

        <operator pos:start="51:9" pos:end="51:10">||</operator> <operator pos:start="51:12" pos:end="51:12">(</operator><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:19">offset</name> <operator pos:start="51:21" pos:end="51:21">+</operator> <name pos:start="51:23" pos:end="51:25">len</name><operator pos:start="51:26" pos:end="51:26">)</operator> <operator pos:start="51:28" pos:end="51:28">&gt;</operator> <name pos:start="51:30" pos:end="51:40"><name pos:start="51:30" pos:end="51:34">nvram</name><operator pos:start="51:35" pos:end="51:36">-&gt;</operator><name pos:start="51:37" pos:end="51:40">size</name></name><operator pos:start="51:41" pos:end="51:41">)</operator></expr>)</condition> <block pos:start="51:44" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:15">

        <expr_stmt pos:start="53:9" pos:end="53:47"><expr pos:start="53:9" pos:end="53:46"><call pos:start="53:9" pos:end="53:46"><name pos:start="53:9" pos:end="53:15">rtas_st</name><argument_list pos:start="53:16" pos:end="53:46">(<argument pos:start="53:17" pos:end="53:20"><expr pos:start="53:17" pos:end="53:20"><name pos:start="53:17" pos:end="53:20">rets</name></expr></argument>, <argument pos:start="53:23" pos:end="53:23"><expr pos:start="53:23" pos:end="53:23"><literal type="number" pos:start="53:23" pos:end="53:23">0</literal></expr></argument>, <argument pos:start="53:26" pos:end="53:45"><expr pos:start="53:26" pos:end="53:45"><name pos:start="53:26" pos:end="53:45">RTAS_OUT_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:54"><expr pos:start="61:5" pos:end="61:53"><name pos:start="61:5" pos:end="61:10">membuf</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <call pos:start="61:14" pos:end="61:53"><name pos:start="61:14" pos:end="61:36">cpu_physical_memory_map</name><argument_list pos:start="61:37" pos:end="61:53">(<argument pos:start="61:38" pos:end="61:43"><expr pos:start="61:38" pos:end="61:43"><name pos:start="61:38" pos:end="61:43">buffer</name></expr></argument>, <argument pos:start="61:46" pos:end="61:49"><expr pos:start="61:46" pos:end="61:49"><operator pos:start="61:46" pos:end="61:46">&amp;</operator><name pos:start="61:47" pos:end="61:49">len</name></expr></argument>, <argument pos:start="61:52" pos:end="61:52"><expr pos:start="61:52" pos:end="61:52"><literal type="number" pos:start="61:52" pos:end="61:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="77:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:21">(<expr pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:13">nvram</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:20">drive</name></name></expr>)</condition> <block pos:start="63:23" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:62">

        <expr_stmt pos:start="65:9" pos:end="65:62"><expr pos:start="65:9" pos:end="65:61"><name pos:start="65:9" pos:end="65:12">alen</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="65:61"><name pos:start="65:16" pos:end="65:26">bdrv_pwrite</name><argument_list pos:start="65:27" pos:end="65:61">(<argument pos:start="65:28" pos:end="65:39"><expr pos:start="65:28" pos:end="65:39"><name pos:start="65:28" pos:end="65:39"><name pos:start="65:28" pos:end="65:32">nvram</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:39">drive</name></name></expr></argument>, <argument pos:start="65:42" pos:end="65:47"><expr pos:start="65:42" pos:end="65:47"><name pos:start="65:42" pos:end="65:47">offset</name></expr></argument>, <argument pos:start="65:50" pos:end="65:55"><expr pos:start="65:50" pos:end="65:55"><name pos:start="65:50" pos:end="65:55">membuf</name></expr></argument>, <argument pos:start="65:58" pos:end="65:60"><expr pos:start="65:58" pos:end="65:60"><name pos:start="65:58" pos:end="65:60">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="77:5">else <block pos:start="67:12" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:19">

        <expr_stmt pos:start="69:9" pos:end="69:27"><expr pos:start="69:9" pos:end="69:26"><call pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:14">assert</name><argument_list pos:start="69:15" pos:end="69:26">(<argument pos:start="69:16" pos:end="69:25"><expr pos:start="69:16" pos:end="69:25"><name pos:start="69:16" pos:end="69:25"><name pos:start="69:16" pos:end="69:20">nvram</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:25">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:49"><expr pos:start="73:9" pos:end="73:48"><call pos:start="73:9" pos:end="73:48"><name pos:start="73:9" pos:end="73:14">memcpy</name><argument_list pos:start="73:15" pos:end="73:48">(<argument pos:start="73:16" pos:end="73:34"><expr pos:start="73:16" pos:end="73:34"><name pos:start="73:16" pos:end="73:25"><name pos:start="73:16" pos:end="73:20">nvram</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:25">buf</name></name> <operator pos:start="73:27" pos:end="73:27">+</operator> <name pos:start="73:29" pos:end="73:34">offset</name></expr></argument>, <argument pos:start="73:37" pos:end="73:42"><expr pos:start="73:37" pos:end="73:42"><name pos:start="73:37" pos:end="73:42">membuf</name></expr></argument>, <argument pos:start="73:45" pos:end="73:47"><expr pos:start="73:45" pos:end="73:47"><name pos:start="73:45" pos:end="73:47">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:19"><expr pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:12">alen</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <name pos:start="75:16" pos:end="75:18">len</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:51"><expr pos:start="79:5" pos:end="79:50"><call pos:start="79:5" pos:end="79:50"><name pos:start="79:5" pos:end="79:29">cpu_physical_memory_unmap</name><argument_list pos:start="79:30" pos:end="79:50">(<argument pos:start="79:31" pos:end="79:36"><expr pos:start="79:31" pos:end="79:36"><name pos:start="79:31" pos:end="79:36">membuf</name></expr></argument>, <argument pos:start="79:39" pos:end="79:41"><expr pos:start="79:39" pos:end="79:41"><name pos:start="79:39" pos:end="79:41">len</name></expr></argument>, <argument pos:start="79:44" pos:end="79:44"><expr pos:start="79:44" pos:end="79:44"><literal type="number" pos:start="79:44" pos:end="79:44">0</literal></expr></argument>, <argument pos:start="79:47" pos:end="79:49"><expr pos:start="79:47" pos:end="79:49"><name pos:start="79:47" pos:end="79:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:74"><expr pos:start="83:5" pos:end="83:73"><call pos:start="83:5" pos:end="83:73"><name pos:start="83:5" pos:end="83:11">rtas_st</name><argument_list pos:start="83:12" pos:end="83:73">(<argument pos:start="83:13" pos:end="83:16"><expr pos:start="83:13" pos:end="83:16"><name pos:start="83:13" pos:end="83:16">rets</name></expr></argument>, <argument pos:start="83:19" pos:end="83:19"><expr pos:start="83:19" pos:end="83:19"><literal type="number" pos:start="83:19" pos:end="83:19">0</literal></expr></argument>, <argument pos:start="83:22" pos:end="83:72"><expr pos:start="83:22" pos:end="83:72"><ternary pos:start="83:22" pos:end="83:72"><condition pos:start="83:22" pos:end="83:35"><expr pos:start="83:22" pos:end="83:33"><operator pos:start="83:22" pos:end="83:22">(</operator><name pos:start="83:23" pos:end="83:26">alen</name> <operator pos:start="83:28" pos:end="83:28">&lt;</operator> <name pos:start="83:30" pos:end="83:32">len</name><operator pos:start="83:33" pos:end="83:33">)</operator></expr> ?</condition><then pos:start="83:37" pos:end="83:53"> <expr pos:start="83:37" pos:end="83:53"><name pos:start="83:37" pos:end="83:53">RTAS_OUT_HW_ERROR</name></expr> </then><else pos:start="83:55" pos:end="83:72">: <expr pos:start="83:57" pos:end="83:72"><name pos:start="83:57" pos:end="83:72">RTAS_OUT_SUCCESS</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:44"><expr pos:start="85:5" pos:end="85:43"><call pos:start="85:5" pos:end="85:43"><name pos:start="85:5" pos:end="85:11">rtas_st</name><argument_list pos:start="85:12" pos:end="85:43">(<argument pos:start="85:13" pos:end="85:16"><expr pos:start="85:13" pos:end="85:16"><name pos:start="85:13" pos:end="85:16">rets</name></expr></argument>, <argument pos:start="85:19" pos:end="85:19"><expr pos:start="85:19" pos:end="85:19"><literal type="number" pos:start="85:19" pos:end="85:19">1</literal></expr></argument>, <argument pos:start="85:22" pos:end="85:42"><expr pos:start="85:22" pos:end="85:42"><ternary pos:start="85:22" pos:end="85:42"><condition pos:start="85:22" pos:end="85:33"><expr pos:start="85:22" pos:end="85:31"><operator pos:start="85:22" pos:end="85:22">(</operator><name pos:start="85:23" pos:end="85:26">alen</name> <operator pos:start="85:28" pos:end="85:28">&lt;</operator> <literal type="number" pos:start="85:30" pos:end="85:30">0</literal><operator pos:start="85:31" pos:end="85:31">)</operator></expr> ?</condition><then pos:start="85:35" pos:end="85:35"> <expr pos:start="85:35" pos:end="85:35"><literal type="number" pos:start="85:35" pos:end="85:35">0</literal></expr> </then><else pos:start="85:37" pos:end="85:42">: <expr pos:start="85:39" pos:end="85:42"><name pos:start="85:39" pos:end="85:42">alen</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
