<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18981.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:27"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">int64_t</name> <name pos:start="1:16" pos:end="1:27">coroutine_fn</name></type> <name pos:start="1:29" pos:end="1:58">bdrv_co_get_block_status_above</name><parameter_list pos:start="1:59" pos:end="9:18">(<parameter pos:start="1:60" pos:end="1:79"><decl pos:start="1:60" pos:end="1:79"><type pos:start="1:60" pos:end="1:79"><name pos:start="1:60" pos:end="1:75">BlockDriverState</name> <modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:79">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:30"><decl pos:start="3:9" pos:end="3:30"><type pos:start="3:9" pos:end="3:30"><name pos:start="3:9" pos:end="3:24">BlockDriverState</name> <modifier pos:start="3:26" pos:end="3:26">*</modifier></type><name pos:start="3:27" pos:end="3:30">base</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:26"><decl pos:start="5:9" pos:end="5:26"><type pos:start="5:9" pos:end="5:26"><name pos:start="5:9" pos:end="5:15">int64_t</name></type> <name pos:start="5:17" pos:end="5:26">sector_num</name></decl></parameter>,

        <parameter pos:start="7:9" pos:end="7:22"><decl pos:start="7:9" pos:end="7:22"><type pos:start="7:9" pos:end="7:22"><name pos:start="7:9" pos:end="7:11">int</name></type> <name pos:start="7:13" pos:end="7:22">nb_sectors</name></decl></parameter>,

        <parameter pos:start="9:9" pos:end="9:17"><decl pos:start="9:9" pos:end="9:17"><type pos:start="9:9" pos:end="9:17"><name pos:start="9:9" pos:end="9:11">int</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:17">pnum</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="41:1">{<block_content pos:start="13:5" pos:end="39:15">

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockDriverState</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:23">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:15">ret</name> <init pos:start="15:17" pos:end="15:19">= <expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><call pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:22">(<argument pos:start="19:12" pos:end="19:21"><expr pos:start="19:12" pos:end="19:21"><name pos:start="19:12" pos:end="19:13">bs</name> <operator pos:start="19:15" pos:end="19:16">!=</operator> <name pos:start="19:18" pos:end="19:21">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="21:5" pos:end="37:5">for <control pos:start="21:9" pos:end="21:46">(<init pos:start="21:10" pos:end="21:16"><expr pos:start="21:10" pos:end="21:15"><name pos:start="21:10" pos:end="21:10">p</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:15">bs</name></expr>;</init> <condition pos:start="21:18" pos:end="21:27"><expr pos:start="21:18" pos:end="21:26"><name pos:start="21:18" pos:end="21:18">p</name> <operator pos:start="21:20" pos:end="21:21">!=</operator> <name pos:start="21:23" pos:end="21:26">base</name></expr>;</condition> <incr pos:start="21:29" pos:end="21:45"><expr pos:start="21:29" pos:end="21:45"><name pos:start="21:29" pos:end="21:29">p</name> <operator pos:start="21:31" pos:end="21:31">=</operator> <call pos:start="21:33" pos:end="21:45"><name pos:start="21:33" pos:end="21:42">backing_bs</name><argument_list pos:start="21:43" pos:end="21:45">(<argument pos:start="21:44" pos:end="21:44"><expr pos:start="21:44" pos:end="21:44"><name pos:start="21:44" pos:end="21:44">p</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="21:48" pos:end="37:5">{<block_content pos:start="23:9" pos:end="35:44">

        <expr_stmt pos:start="23:9" pos:end="23:72"><expr pos:start="23:9" pos:end="23:71"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:71"><name pos:start="23:15" pos:end="23:38">bdrv_co_get_block_status</name><argument_list pos:start="23:39" pos:end="23:71">(<argument pos:start="23:40" pos:end="23:40"><expr pos:start="23:40" pos:end="23:40"><name pos:start="23:40" pos:end="23:40">p</name></expr></argument>, <argument pos:start="23:43" pos:end="23:52"><expr pos:start="23:43" pos:end="23:52"><name pos:start="23:43" pos:end="23:52">sector_num</name></expr></argument>, <argument pos:start="23:55" pos:end="23:64"><expr pos:start="23:55" pos:end="23:64"><name pos:start="23:55" pos:end="23:64">nb_sectors</name></expr></argument>, <argument pos:start="23:67" pos:end="23:70"><expr pos:start="23:67" pos:end="23:70"><name pos:start="23:67" pos:end="23:70">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:50">(<expr pos:start="25:13" pos:end="25:49"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">&lt;</operator> <literal type="number" pos:start="25:19" pos:end="25:19">0</literal> <operator pos:start="25:21" pos:end="25:22">||</operator> <name pos:start="25:24" pos:end="25:26">ret</name> <operator pos:start="25:28" pos:end="25:28">&amp;</operator> <name pos:start="25:30" pos:end="25:49">BDRV_BLOCK_ALLOCATED</name></expr>)</condition> <block pos:start="25:52" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:18">

            <break pos:start="27:13" pos:end="27:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="31:9" pos:end="33:58">/* [sector_num, pnum] unallocated on this layer, which could be only

         * the first part of [sector_num, nb_sectors].  */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:18">nb_sectors</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="35:43"><name pos:start="35:22" pos:end="35:24">MIN</name><argument_list pos:start="35:25" pos:end="35:43">(<argument pos:start="35:26" pos:end="35:35"><expr pos:start="35:26" pos:end="35:35"><name pos:start="35:26" pos:end="35:35">nb_sectors</name></expr></argument>, <argument pos:start="35:38" pos:end="35:42"><expr pos:start="35:38" pos:end="35:42"><operator pos:start="35:38" pos:end="35:38">*</operator><name pos:start="35:39" pos:end="35:42">pnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="39:5" pos:end="39:15">return <expr pos:start="39:12" pos:end="39:14"><name pos:start="39:12" pos:end="39:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
