<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22785.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">write_elf32_note</name><parameter_list pos:start="1:28" pos:end="1:41">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:39"><name pos:start="1:29" pos:end="1:37">DumpState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:13">

    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:62"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22">target_phys_addr_t</name></type> <name pos:start="5:24" pos:end="5:28">begin</name> <init pos:start="5:30" pos:end="5:62">= <expr pos:start="5:32" pos:end="5:62"><name pos:start="5:32" pos:end="5:47"><name pos:start="5:32" pos:end="5:32">s</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:47">memory_offset</name></name> <operator pos:start="5:49" pos:end="5:49">-</operator> <name pos:start="5:51" pos:end="5:62"><name pos:start="5:51" pos:end="5:51">s</name><operator pos:start="5:52" pos:end="5:53">-&gt;</operator><name pos:start="5:54" pos:end="5:62">note_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">Elf32_Phdr</name></type> <name pos:start="7:16" pos:end="7:19">phdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">endian</name> <init pos:start="9:16" pos:end="9:38">= <expr pos:start="9:18" pos:end="9:38"><name pos:start="9:18" pos:end="9:38"><name pos:start="9:18" pos:end="9:18">s</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:29">dump_info</name><operator pos:start="9:30" pos:end="9:30">.</operator><name pos:start="9:31" pos:end="9:38">d_endian</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:41"><expr pos:start="15:5" pos:end="15:40"><call pos:start="15:5" pos:end="15:40"><name pos:start="15:5" pos:end="15:10">memset</name><argument_list pos:start="15:11" pos:end="15:40">(<argument pos:start="15:12" pos:end="15:16"><expr pos:start="15:12" pos:end="15:16"><operator pos:start="15:12" pos:end="15:12">&amp;</operator><name pos:start="15:13" pos:end="15:16">phdr</name></expr></argument>, <argument pos:start="15:19" pos:end="15:19"><expr pos:start="15:19" pos:end="15:19"><literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr></argument>, <argument pos:start="15:22" pos:end="15:39"><expr pos:start="15:22" pos:end="15:39"><sizeof pos:start="15:22" pos:end="15:39">sizeof<argument_list pos:start="15:28" pos:end="15:39">(<argument pos:start="15:29" pos:end="15:38"><expr pos:start="15:29" pos:end="15:38"><name pos:start="15:29" pos:end="15:38">Elf32_Phdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:59"><expr pos:start="17:5" pos:end="17:58"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:8">phdr</name><operator pos:start="17:9" pos:end="17:9">.</operator><name pos:start="17:10" pos:end="17:15">p_type</name></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <call pos:start="17:19" pos:end="17:58"><name pos:start="17:19" pos:end="17:41">cpu_convert_to_target32</name><argument_list pos:start="17:42" pos:end="17:58">(<argument pos:start="17:43" pos:end="17:49"><expr pos:start="17:43" pos:end="17:49"><name pos:start="17:43" pos:end="17:49">PT_NOTE</name></expr></argument>, <argument pos:start="17:52" pos:end="17:57"><expr pos:start="17:52" pos:end="17:57"><name pos:start="17:52" pos:end="17:57">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:59"><expr pos:start="19:5" pos:end="19:58"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:8">phdr</name><operator pos:start="19:9" pos:end="19:9">.</operator><name pos:start="19:10" pos:end="19:17">p_offset</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <call pos:start="19:21" pos:end="19:58"><name pos:start="19:21" pos:end="19:43">cpu_convert_to_target32</name><argument_list pos:start="19:44" pos:end="19:58">(<argument pos:start="19:45" pos:end="19:49"><expr pos:start="19:45" pos:end="19:49"><name pos:start="19:45" pos:end="19:49">begin</name></expr></argument>, <argument pos:start="19:52" pos:end="19:57"><expr pos:start="19:52" pos:end="19:57"><name pos:start="19:52" pos:end="19:57">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:21"><expr pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:8">phdr</name><operator pos:start="21:9" pos:end="21:9">.</operator><name pos:start="21:10" pos:end="21:16">p_paddr</name></name> <operator pos:start="21:18" pos:end="21:18">=</operator> <literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:66"><expr pos:start="23:5" pos:end="23:65"><name pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:8">phdr</name><operator pos:start="23:9" pos:end="23:9">.</operator><name pos:start="23:10" pos:end="23:17">p_filesz</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <call pos:start="23:21" pos:end="23:65"><name pos:start="23:21" pos:end="23:43">cpu_convert_to_target32</name><argument_list pos:start="23:44" pos:end="23:65">(<argument pos:start="23:45" pos:end="23:56"><expr pos:start="23:45" pos:end="23:56"><name pos:start="23:45" pos:end="23:56"><name pos:start="23:45" pos:end="23:45">s</name><operator pos:start="23:46" pos:end="23:47">-&gt;</operator><name pos:start="23:48" pos:end="23:56">note_size</name></name></expr></argument>, <argument pos:start="23:59" pos:end="23:64"><expr pos:start="23:59" pos:end="23:64"><name pos:start="23:59" pos:end="23:64">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:65"><expr pos:start="25:5" pos:end="25:64"><name pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:8">phdr</name><operator pos:start="25:9" pos:end="25:9">.</operator><name pos:start="25:10" pos:end="25:16">p_memsz</name></name> <operator pos:start="25:18" pos:end="25:18">=</operator> <call pos:start="25:20" pos:end="25:64"><name pos:start="25:20" pos:end="25:42">cpu_convert_to_target32</name><argument_list pos:start="25:43" pos:end="25:64">(<argument pos:start="25:44" pos:end="25:55"><expr pos:start="25:44" pos:end="25:55"><name pos:start="25:44" pos:end="25:55"><name pos:start="25:44" pos:end="25:44">s</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:55">note_size</name></name></expr></argument>, <argument pos:start="25:58" pos:end="25:63"><expr pos:start="25:58" pos:end="25:63"><name pos:start="25:58" pos:end="25:63">endian</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:8">phdr</name><operator pos:start="27:9" pos:end="27:9">.</operator><name pos:start="27:10" pos:end="27:16">p_vaddr</name></name> <operator pos:start="27:18" pos:end="27:18">=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:56"><expr pos:start="31:5" pos:end="31:55"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:55"><name pos:start="31:11" pos:end="31:25">fd_write_vmcore</name><argument_list pos:start="31:26" pos:end="31:55">(<argument pos:start="31:27" pos:end="31:31"><expr pos:start="31:27" pos:end="31:31"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:31">phdr</name></expr></argument>, <argument pos:start="31:34" pos:end="31:51"><expr pos:start="31:34" pos:end="31:51"><sizeof pos:start="31:34" pos:end="31:51">sizeof<argument_list pos:start="31:40" pos:end="31:51">(<argument pos:start="31:41" pos:end="31:50"><expr pos:start="31:41" pos:end="31:50"><name pos:start="31:41" pos:end="31:50">Elf32_Phdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="31:54" pos:end="31:54"><expr pos:start="31:54" pos:end="31:54"><name pos:start="31:54" pos:end="31:54">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">&lt;</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>)</condition> <block pos:start="33:18" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:18">

        <expr_stmt pos:start="35:9" pos:end="35:71"><expr pos:start="35:9" pos:end="35:70"><call pos:start="35:9" pos:end="35:70"><name pos:start="35:9" pos:end="35:18">dump_error</name><argument_list pos:start="35:19" pos:end="35:70">(<argument pos:start="35:20" pos:end="35:20"><expr pos:start="35:20" pos:end="35:20"><name pos:start="35:20" pos:end="35:20">s</name></expr></argument>, <argument pos:start="35:23" pos:end="35:69"><expr pos:start="35:23" pos:end="35:69"><literal type="string" pos:start="35:23" pos:end="35:69">"dump: failed to write program header table.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="43:5" pos:end="43:13">return <expr pos:start="43:12" pos:end="43:12"><literal type="number" pos:start="43:12" pos:end="43:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
