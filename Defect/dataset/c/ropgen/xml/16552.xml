<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16552.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">do_load_save_vmstate</name><parameter_list pos:start="1:32" pos:end="3:64">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:49">BDRVSheepdogState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:67"><decl pos:start="1:55" pos:end="1:67"><type pos:start="1:55" pos:end="1:67"><name pos:start="1:55" pos:end="1:61">uint8_t</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">data</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:43"><decl pos:start="3:33" pos:end="3:43"><type pos:start="3:33" pos:end="3:43"><name pos:start="3:33" pos:end="3:39">int64_t</name></type> <name pos:start="3:41" pos:end="3:43">pos</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:53"><decl pos:start="3:46" pos:end="3:53"><type pos:start="3:46" pos:end="3:53"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:53">size</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:63"><decl pos:start="3:56" pos:end="3:63"><type pos:start="3:56" pos:end="3:63"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:63">load</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:15">create</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">fd</name></decl>, <decl pos:start="9:13" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:13" pos:end="9:15">ret</name> <init pos:start="9:17" pos:end="9:19">= <expr pos:start="9:19" pos:end="9:19"><literal type="number" pos:start="9:19" pos:end="9:19">0</literal></expr></init></decl>, <decl pos:start="9:22" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:30">remaining</name> <init pos:start="9:32" pos:end="9:37">= <expr pos:start="9:34" pos:end="9:37"><name pos:start="9:34" pos:end="9:37">size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:25">data_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:24">vmstate_oid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:22">vdi_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:19">offset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:6">fd</name> <operator pos:start="21:8" pos:end="21:8">=</operator> <call pos:start="21:10" pos:end="21:42"><name pos:start="21:10" pos:end="21:24">connect_to_sdog</name><argument_list pos:start="21:25" pos:end="21:42">(<argument pos:start="21:26" pos:end="21:32"><expr pos:start="21:26" pos:end="21:32"><name pos:start="21:26" pos:end="21:32"><name pos:start="21:26" pos:end="21:26">s</name><operator pos:start="21:27" pos:end="21:28">-&gt;</operator><name pos:start="21:29" pos:end="21:32">addr</name></name></expr></argument>, <argument pos:start="21:35" pos:end="21:41"><expr pos:start="21:35" pos:end="21:41"><name pos:start="21:35" pos:end="21:41"><name pos:start="21:35" pos:end="21:35">s</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:41">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:15">(<expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:10">fd</name> <operator pos:start="23:12" pos:end="23:12">&lt;</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>)</condition> <block pos:start="23:17" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:18">

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><name pos:start="25:16" pos:end="25:17">fd</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="31:5" pos:end="85:5">while <condition pos:start="31:11" pos:end="31:21">(<expr pos:start="31:12" pos:end="31:20"><name pos:start="31:12" pos:end="31:20">remaining</name></expr>)</condition> <block pos:start="31:23" pos:end="85:5">{<block_content pos:start="33:9" pos:end="83:30">

        <expr_stmt pos:start="33:9" pos:end="33:43"><expr pos:start="33:9" pos:end="33:42"><name pos:start="33:9" pos:end="33:17">vdi_index</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:23">pos</name> <operator pos:start="33:25" pos:end="33:25">/</operator> <name pos:start="33:27" pos:end="33:42">SD_DATA_OBJ_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:40"><expr pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:14">offset</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:20">pos</name> <operator pos:start="35:22" pos:end="35:22">%</operator> <name pos:start="35:24" pos:end="35:39">SD_DATA_OBJ_SIZE</name></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:61"><expr pos:start="39:9" pos:end="39:60"><name pos:start="39:9" pos:end="39:16">data_len</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:60"><name pos:start="39:20" pos:end="39:22">MIN</name><argument_list pos:start="39:23" pos:end="39:60">(<argument pos:start="39:24" pos:end="39:32"><expr pos:start="39:24" pos:end="39:32"><name pos:start="39:24" pos:end="39:32">remaining</name></expr></argument>, <argument pos:start="39:35" pos:end="39:59"><expr pos:start="39:35" pos:end="39:59"><name pos:start="39:35" pos:end="39:50">SD_DATA_OBJ_SIZE</name> <operator pos:start="39:52" pos:end="39:52">-</operator> <name pos:start="39:54" pos:end="39:59">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:69"><expr pos:start="43:9" pos:end="43:68"><name pos:start="43:9" pos:end="43:19">vmstate_oid</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:68"><name pos:start="43:23" pos:end="43:40">vid_to_vmstate_oid</name><argument_list pos:start="43:41" pos:end="43:68">(<argument pos:start="43:42" pos:end="43:56"><expr pos:start="43:42" pos:end="43:56"><name pos:start="43:42" pos:end="43:56"><name pos:start="43:42" pos:end="43:42">s</name><operator pos:start="43:43" pos:end="43:44">-&gt;</operator><name pos:start="43:45" pos:end="43:49">inode</name><operator pos:start="43:50" pos:end="43:50">.</operator><name pos:start="43:51" pos:end="43:56">vdi_id</name></name></expr></argument>, <argument pos:start="43:59" pos:end="43:67"><expr pos:start="43:59" pos:end="43:67"><name pos:start="43:59" pos:end="43:67">vdi_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:31"><expr pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:14">create</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <operator pos:start="47:18" pos:end="47:18">(</operator><name pos:start="47:19" pos:end="47:24">offset</name> <operator pos:start="47:26" pos:end="47:27">==</operator> <literal type="number" pos:start="47:29" pos:end="47:29">0</literal><operator pos:start="47:30" pos:end="47:30">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="65:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:17">(<expr pos:start="49:13" pos:end="49:16"><name pos:start="49:13" pos:end="49:16">load</name></expr>)</condition> <block pos:start="49:19" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:48">

            <expr_stmt pos:start="51:13" pos:end="55:48"><expr pos:start="51:13" pos:end="55:47"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="55:47"><name pos:start="51:19" pos:end="51:29">read_object</name><argument_list pos:start="51:30" pos:end="55:47">(<argument pos:start="51:31" pos:end="51:32"><expr pos:start="51:31" pos:end="51:32"><name pos:start="51:31" pos:end="51:32">fd</name></expr></argument>, <argument pos:start="51:35" pos:end="51:46"><expr pos:start="51:35" pos:end="51:46"><operator pos:start="51:35" pos:end="51:35">(</operator><name pos:start="51:36" pos:end="51:39">char</name> <operator pos:start="51:41" pos:end="51:41">*</operator><operator pos:start="51:42" pos:end="51:42">)</operator><name pos:start="51:43" pos:end="51:46">data</name></expr></argument>, <argument pos:start="51:49" pos:end="51:59"><expr pos:start="51:49" pos:end="51:59"><name pos:start="51:49" pos:end="51:59">vmstate_oid</name></expr></argument>,

                              <argument pos:start="53:31" pos:end="53:48"><expr pos:start="53:31" pos:end="53:48"><name pos:start="53:31" pos:end="53:48"><name pos:start="53:31" pos:end="53:31">s</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:38">inode</name><operator pos:start="53:39" pos:end="53:39">.</operator><name pos:start="53:40" pos:end="53:48">nr_copies</name></name></expr></argument>, <argument pos:start="53:51" pos:end="53:58"><expr pos:start="53:51" pos:end="53:58"><name pos:start="53:51" pos:end="53:58">data_len</name></expr></argument>, <argument pos:start="53:61" pos:end="53:66"><expr pos:start="53:61" pos:end="53:66"><name pos:start="53:61" pos:end="53:66">offset</name></expr></argument>,

                              <argument pos:start="55:31" pos:end="55:46"><expr pos:start="55:31" pos:end="55:46"><name pos:start="55:31" pos:end="55:46"><name pos:start="55:31" pos:end="55:31">s</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:46">cache_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="57:11" pos:end="65:9">else <block pos:start="57:16" pos:end="65:9">{<block_content pos:start="59:13" pos:end="63:49">

            <expr_stmt pos:start="59:13" pos:end="63:49"><expr pos:start="59:13" pos:end="63:48"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="63:48"><name pos:start="59:19" pos:end="59:30">write_object</name><argument_list pos:start="59:31" pos:end="63:48">(<argument pos:start="59:32" pos:end="59:33"><expr pos:start="59:32" pos:end="59:33"><name pos:start="59:32" pos:end="59:33">fd</name></expr></argument>, <argument pos:start="59:36" pos:end="59:47"><expr pos:start="59:36" pos:end="59:47"><operator pos:start="59:36" pos:end="59:36">(</operator><name pos:start="59:37" pos:end="59:40">char</name> <operator pos:start="59:42" pos:end="59:42">*</operator><operator pos:start="59:43" pos:end="59:43">)</operator><name pos:start="59:44" pos:end="59:47">data</name></expr></argument>, <argument pos:start="59:50" pos:end="59:60"><expr pos:start="59:50" pos:end="59:60"><name pos:start="59:50" pos:end="59:60">vmstate_oid</name></expr></argument>,

                               <argument pos:start="61:32" pos:end="61:49"><expr pos:start="61:32" pos:end="61:49"><name pos:start="61:32" pos:end="61:49"><name pos:start="61:32" pos:end="61:32">s</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:39">inode</name><operator pos:start="61:40" pos:end="61:40">.</operator><name pos:start="61:41" pos:end="61:49">nr_copies</name></name></expr></argument>, <argument pos:start="61:52" pos:end="61:59"><expr pos:start="61:52" pos:end="61:59"><name pos:start="61:52" pos:end="61:59">data_len</name></expr></argument>, <argument pos:start="61:62" pos:end="61:67"><expr pos:start="61:62" pos:end="61:67"><name pos:start="61:62" pos:end="61:67">offset</name></expr></argument>, <argument pos:start="61:70" pos:end="61:75"><expr pos:start="61:70" pos:end="61:75"><name pos:start="61:70" pos:end="61:75">create</name></expr></argument>,

                               <argument pos:start="63:32" pos:end="63:47"><expr pos:start="63:32" pos:end="63:47"><name pos:start="63:32" pos:end="63:47"><name pos:start="63:32" pos:end="63:32">s</name><operator pos:start="63:33" pos:end="63:34">-&gt;</operator><name pos:start="63:35" pos:end="63:47">cache_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="69:9" pos:end="75:9"><if pos:start="69:9" pos:end="75:9">if <condition pos:start="69:12" pos:end="69:20">(<expr pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">&lt;</operator> <literal type="number" pos:start="69:19" pos:end="69:19">0</literal></expr>)</condition> <block pos:start="69:22" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:25">

            <expr_stmt pos:start="71:13" pos:end="71:71"><expr pos:start="71:13" pos:end="71:70"><call pos:start="71:13" pos:end="71:70"><name pos:start="71:13" pos:end="71:24">error_report</name><argument_list pos:start="71:25" pos:end="71:70">(<argument pos:start="71:26" pos:end="71:52"><expr pos:start="71:26" pos:end="71:52"><literal type="string" pos:start="71:26" pos:end="71:52">"failed to save vmstate %s"</literal></expr></argument>, <argument pos:start="71:55" pos:end="71:69"><expr pos:start="71:55" pos:end="71:69"><call pos:start="71:55" pos:end="71:69"><name pos:start="71:55" pos:end="71:62">strerror</name><argument_list pos:start="71:63" pos:end="71:69">(<argument pos:start="71:64" pos:end="71:68"><expr pos:start="71:64" pos:end="71:68"><name pos:start="71:64" pos:end="71:68">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="73:13" pos:end="73:25">goto <name pos:start="73:18" pos:end="73:24">cleanup</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:24"><expr pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:11">pos</name> <operator pos:start="79:13" pos:end="79:14">+=</operator> <name pos:start="79:16" pos:end="79:23">data_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:25"><expr pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:12">data</name> <operator pos:start="81:14" pos:end="81:15">+=</operator> <name pos:start="81:17" pos:end="81:24">data_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:30"><expr pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:17">remaining</name> <operator pos:start="83:19" pos:end="83:20">-=</operator> <name pos:start="83:22" pos:end="83:29">data_len</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="87:5" pos:end="87:15"><expr pos:start="87:5" pos:end="87:14"><name pos:start="87:5" pos:end="87:7">ret</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <name pos:start="87:11" pos:end="87:14">size</name></expr>;</expr_stmt>

<label pos:start="89:1" pos:end="89:8"><name pos:start="89:1" pos:end="89:7">cleanup</name>:</label>

    <expr_stmt pos:start="91:5" pos:end="91:20"><expr pos:start="91:5" pos:end="91:19"><call pos:start="91:5" pos:end="91:19"><name pos:start="91:5" pos:end="91:15">closesocket</name><argument_list pos:start="91:16" pos:end="91:19">(<argument pos:start="91:17" pos:end="91:18"><expr pos:start="91:17" pos:end="91:18"><name pos:start="91:17" pos:end="91:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="93:5" pos:end="93:15">return <expr pos:start="93:12" pos:end="93:14"><name pos:start="93:12" pos:end="93:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
