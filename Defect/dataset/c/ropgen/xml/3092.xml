<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3092.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">xhci_port_write</name><parameter_list pos:start="1:28" pos:end="3:56">(<parameter pos:start="1:29" pos:end="1:37"><decl pos:start="1:29" pos:end="1:37"><type pos:start="1:29" pos:end="1:37"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">ptr</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:49"><decl pos:start="1:40" pos:end="1:49"><type pos:start="1:40" pos:end="1:49"><name pos:start="1:40" pos:end="1:45">hwaddr</name></type> <name pos:start="1:47" pos:end="1:49">reg</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:40"><decl pos:start="3:29" pos:end="3:40"><type pos:start="3:29" pos:end="3:40"><name pos:start="3:29" pos:end="3:36">uint64_t</name></type> <name pos:start="3:38" pos:end="3:40">val</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:55"><decl pos:start="3:43" pos:end="3:55"><type pos:start="3:43" pos:end="3:55"><name pos:start="3:43" pos:end="3:50">unsigned</name></type> <name pos:start="3:52" pos:end="3:55">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="67:5">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">XHCIPort</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">port</name> <init pos:start="7:20" pos:end="7:24">= <expr pos:start="7:22" pos:end="7:24"><name pos:start="7:22" pos:end="7:24">ptr</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:19">portsc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:54"><expr pos:start="13:5" pos:end="13:53"><call pos:start="13:5" pos:end="13:53"><name pos:start="13:5" pos:end="13:29">trace_usb_xhci_port_write</name><argument_list pos:start="13:30" pos:end="13:53">(<argument pos:start="13:31" pos:end="13:42"><expr pos:start="13:31" pos:end="13:42"><name pos:start="13:31" pos:end="13:42"><name pos:start="13:31" pos:end="13:34">port</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:42">portnr</name></name></expr></argument>, <argument pos:start="13:45" pos:end="13:47"><expr pos:start="13:45" pos:end="13:47"><name pos:start="13:45" pos:end="13:47">reg</name></expr></argument>, <argument pos:start="13:50" pos:end="13:52"><expr pos:start="13:50" pos:end="13:52"><name pos:start="13:50" pos:end="13:52">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="17:5" pos:end="67:5">switch <condition pos:start="17:12" pos:end="17:16">(<expr pos:start="17:13" pos:end="17:15"><name pos:start="17:13" pos:end="17:15">reg</name></expr>)</condition> <block pos:start="17:18" pos:end="67:5">{<block_content pos:start="19:5" pos:end="65:56">

    <case pos:start="19:5" pos:end="19:14">case <expr pos:start="19:10" pos:end="19:13"><literal type="number" pos:start="19:10" pos:end="19:13">0x00</literal></expr>:</case> <comment type="block" pos:start="19:16" pos:end="19:27">/* PORTSC */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:30"><expr pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:14">portsc</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:29"><name pos:start="21:18" pos:end="21:21">port</name><operator pos:start="21:22" pos:end="21:23">-&gt;</operator><name pos:start="21:24" pos:end="21:29">portsc</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="23:9" pos:end="23:34">/* write-1-to-clear bits*/</comment>

        <expr_stmt pos:start="25:9" pos:end="27:62"><expr pos:start="25:9" pos:end="27:61"><name pos:start="25:9" pos:end="25:14">portsc</name> <operator pos:start="25:16" pos:end="25:17">&amp;=</operator> <operator pos:start="25:19" pos:end="25:19">~</operator><operator pos:start="25:20" pos:end="25:20">(</operator><name pos:start="25:21" pos:end="25:23">val</name> <operator pos:start="25:25" pos:end="25:25">&amp;</operator> <operator pos:start="25:27" pos:end="25:27">(</operator><name pos:start="25:28" pos:end="25:37">PORTSC_CSC</name><operator pos:start="25:38" pos:end="25:38">|</operator><name pos:start="25:39" pos:end="25:48">PORTSC_PEC</name><operator pos:start="25:49" pos:end="25:49">|</operator><name pos:start="25:50" pos:end="25:59">PORTSC_WRC</name><operator pos:start="25:60" pos:end="25:60">|</operator><name pos:start="25:61" pos:end="25:70">PORTSC_OCC</name><operator pos:start="25:71" pos:end="25:71">|</operator>

                           <name pos:start="27:28" pos:end="27:37">PORTSC_PRC</name><operator pos:start="27:38" pos:end="27:38">|</operator><name pos:start="27:39" pos:end="27:48">PORTSC_PLC</name><operator pos:start="27:49" pos:end="27:49">|</operator><name pos:start="27:50" pos:end="27:59">PORTSC_CEC</name><operator pos:start="27:60" pos:end="27:60">)</operator><operator pos:start="27:61" pos:end="27:61">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="39:9"><if pos:start="29:9" pos:end="39:9">if <condition pos:start="29:12" pos:end="29:29">(<expr pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:15">val</name> <operator pos:start="29:17" pos:end="29:17">&amp;</operator> <name pos:start="29:19" pos:end="29:28">PORTSC_LWS</name></expr>)</condition> <block pos:start="29:31" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:56">

            <comment type="block" pos:start="31:13" pos:end="31:47">/* overwrite PLS only when LWS=1 */</comment>

            <decl_stmt pos:start="33:13" pos:end="33:54"><decl pos:start="33:13" pos:end="33:53"><type pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:20">uint32_t</name></type> <name pos:start="33:22" pos:end="33:24">pls</name> <init pos:start="33:26" pos:end="33:53">= <expr pos:start="33:28" pos:end="33:53"><call pos:start="33:28" pos:end="33:53"><name pos:start="33:28" pos:end="33:36">get_field</name><argument_list pos:start="33:37" pos:end="33:53">(<argument pos:start="33:38" pos:end="33:40"><expr pos:start="33:38" pos:end="33:40"><name pos:start="33:38" pos:end="33:40">val</name></expr></argument>, <argument pos:start="33:43" pos:end="33:52"><expr pos:start="33:43" pos:end="33:52"><name pos:start="33:43" pos:end="33:52">PORTSC_PLS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:48"><expr pos:start="35:13" pos:end="35:47"><call pos:start="35:13" pos:end="35:47"><name pos:start="35:13" pos:end="35:21">set_field</name><argument_list pos:start="35:22" pos:end="35:47">(<argument pos:start="35:23" pos:end="35:29"><expr pos:start="35:23" pos:end="35:29"><operator pos:start="35:23" pos:end="35:23">&amp;</operator><name pos:start="35:24" pos:end="35:29">portsc</name></expr></argument>, <argument pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><name pos:start="35:32" pos:end="35:34">pls</name></expr></argument>, <argument pos:start="35:37" pos:end="35:46"><expr pos:start="35:37" pos:end="35:46"><name pos:start="35:37" pos:end="35:46">PORTSC_PLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:56"><expr pos:start="37:13" pos:end="37:55"><call pos:start="37:13" pos:end="37:55"><name pos:start="37:13" pos:end="37:36">trace_usb_xhci_port_link</name><argument_list pos:start="37:37" pos:end="37:55">(<argument pos:start="37:38" pos:end="37:49"><expr pos:start="37:38" pos:end="37:49"><name pos:start="37:38" pos:end="37:49"><name pos:start="37:38" pos:end="37:41">port</name><operator pos:start="37:42" pos:end="37:43">-&gt;</operator><name pos:start="37:44" pos:end="37:49">portnr</name></name></expr></argument>, <argument pos:start="37:52" pos:end="37:54"><expr pos:start="37:52" pos:end="37:54"><name pos:start="37:52" pos:end="37:54">pls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="41:9" pos:end="41:29">/* read/write bits */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:64"><expr pos:start="43:9" pos:end="43:63"><name pos:start="43:9" pos:end="43:14">portsc</name> <operator pos:start="43:16" pos:end="43:17">&amp;=</operator> <operator pos:start="43:19" pos:end="43:19">~</operator><operator pos:start="43:20" pos:end="43:20">(</operator><name pos:start="43:21" pos:end="43:29">PORTSC_PP</name><operator pos:start="43:30" pos:end="43:30">|</operator><name pos:start="43:31" pos:end="43:40">PORTSC_WCE</name><operator pos:start="43:41" pos:end="43:41">|</operator><name pos:start="43:42" pos:end="43:51">PORTSC_WDE</name><operator pos:start="43:52" pos:end="43:52">|</operator><name pos:start="43:53" pos:end="43:62">PORTSC_WOE</name><operator pos:start="43:63" pos:end="43:63">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:71"><expr pos:start="45:9" pos:end="45:70"><name pos:start="45:9" pos:end="45:14">portsc</name> <operator pos:start="45:16" pos:end="45:17">|=</operator> <operator pos:start="45:19" pos:end="45:19">(</operator><name pos:start="45:20" pos:end="45:22">val</name> <operator pos:start="45:24" pos:end="45:24">&amp;</operator> <operator pos:start="45:26" pos:end="45:26">(</operator><name pos:start="45:27" pos:end="45:35">PORTSC_PP</name><operator pos:start="45:36" pos:end="45:36">|</operator><name pos:start="45:37" pos:end="45:46">PORTSC_WCE</name><operator pos:start="45:47" pos:end="45:47">|</operator><name pos:start="45:48" pos:end="45:57">PORTSC_WDE</name><operator pos:start="45:58" pos:end="45:58">|</operator><name pos:start="45:59" pos:end="45:68">PORTSC_WOE</name><operator pos:start="45:69" pos:end="45:69">)</operator><operator pos:start="45:70" pos:end="45:70">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:12">port</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:20">portsc</name></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:29">portsc</name></expr>;</expr_stmt>

        <comment type="block" pos:start="49:9" pos:end="49:35">/* write-1-to-start bits */</comment>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:28">(<expr pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:15">val</name> <operator pos:start="51:17" pos:end="51:17">&amp;</operator> <name pos:start="51:19" pos:end="51:27">PORTSC_PR</name></expr>)</condition> <block pos:start="51:30" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:34">

            <expr_stmt pos:start="53:13" pos:end="53:34"><expr pos:start="53:13" pos:end="53:33"><call pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:27">xhci_port_reset</name><argument_list pos:start="53:28" pos:end="53:33">(<argument pos:start="53:29" pos:end="53:32"><expr pos:start="53:29" pos:end="53:32"><name pos:start="53:29" pos:end="53:32">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:14">case <expr pos:start="59:10" pos:end="59:13"><literal type="number" pos:start="59:10" pos:end="59:13">0x04</literal></expr>:</case> <comment type="block" pos:start="59:16" pos:end="59:29">/* PORTPMSC */</comment>

    <case pos:start="61:5" pos:end="61:14">case <expr pos:start="61:10" pos:end="61:13"><literal type="number" pos:start="61:10" pos:end="61:13">0x08</literal></expr>:</case> <comment type="block" pos:start="61:16" pos:end="61:27">/* PORTLI */</comment>

    <default pos:start="63:5" pos:end="63:12">default:</default>

        <expr_stmt pos:start="65:9" pos:end="65:56"><expr pos:start="65:9" pos:end="65:55"><call pos:start="65:9" pos:end="65:55"><name pos:start="65:9" pos:end="65:36">trace_usb_xhci_unimplemented</name><argument_list pos:start="65:37" pos:end="65:55">(<argument pos:start="65:38" pos:end="65:49"><expr pos:start="65:38" pos:end="65:49"><literal type="string" pos:start="65:38" pos:end="65:49">"port write"</literal></expr></argument>, <argument pos:start="65:52" pos:end="65:54"><expr pos:start="65:52" pos:end="65:54"><name pos:start="65:52" pos:end="65:54">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
