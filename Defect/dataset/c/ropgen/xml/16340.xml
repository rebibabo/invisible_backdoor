<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16340.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:18">RENAME</name></type>(<name pos:start="1:20" pos:end="1:30">yuv2rgb32_1</name>)<parameter_list pos:start="1:32" pos:end="7:61">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:45"><name pos:start="1:33" pos:end="1:42">SwsContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">c</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:66"><decl pos:start="1:48" pos:end="1:66"><type pos:start="1:48" pos:end="1:66"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:60">int16_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">buf0</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:54"><decl pos:start="3:33" pos:end="3:54"><type pos:start="3:33" pos:end="3:51"><specifier pos:start="3:33" pos:end="3:37">const</specifier> <name pos:start="3:39" pos:end="3:45">int16_t</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:54"><name pos:start="3:48" pos:end="3:51">ubuf</name><index pos:start="3:52" pos:end="3:54">[<expr pos:start="3:53" pos:end="3:53"><literal type="number" pos:start="3:53" pos:end="3:53">2</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:78"><decl pos:start="3:57" pos:end="3:78"><type pos:start="3:57" pos:end="3:75"><specifier pos:start="3:57" pos:end="3:61">const</specifier> <name pos:start="3:63" pos:end="3:69">int16_t</name> <modifier pos:start="3:71" pos:end="3:71">*</modifier></type><name pos:start="3:72" pos:end="3:78"><name pos:start="3:72" pos:end="3:75">bguf</name><index pos:start="3:76" pos:end="3:78">[<expr pos:start="3:77" pos:end="3:77"><literal type="number" pos:start="3:77" pos:end="3:77">2</literal></expr>]</index></name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:52"><decl pos:start="5:33" pos:end="5:52"><type pos:start="5:33" pos:end="5:52"><specifier pos:start="5:33" pos:end="5:37">const</specifier> <name pos:start="5:39" pos:end="5:45">int16_t</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:52">abuf0</name></decl></parameter>, <parameter pos:start="5:55" pos:end="5:67"><decl pos:start="5:55" pos:end="5:67"><type pos:start="5:55" pos:end="5:67"><name pos:start="5:55" pos:end="5:61">uint8_t</name> <modifier pos:start="5:63" pos:end="5:63">*</modifier></type><name pos:start="5:64" pos:end="5:67">dest</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:40"><decl pos:start="7:33" pos:end="7:40"><type pos:start="7:33" pos:end="7:40"><name pos:start="7:33" pos:end="7:35">int</name></type> <name pos:start="7:37" pos:end="7:40">dstW</name></decl></parameter>, <parameter pos:start="7:43" pos:end="7:53"><decl pos:start="7:43" pos:end="7:53"><type pos:start="7:43" pos:end="7:53"><name pos:start="7:43" pos:end="7:45">int</name></type> <name pos:start="7:47" pos:end="7:53">uvalpha</name></decl></parameter>, <parameter pos:start="7:56" pos:end="7:60"><decl pos:start="7:56" pos:end="7:60"><type pos:start="7:56" pos:end="7:60"><name pos:start="7:56" pos:end="7:58">int</name></type> <name pos:start="7:60" pos:end="7:60">y</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="131:1">{<block_content pos:start="11:5" pos:end="129:5">

    <decl_stmt pos:start="11:5" pos:end="11:53"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">int16_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:24">ubuf0</name> <init pos:start="11:26" pos:end="11:34">= <expr pos:start="11:28" pos:end="11:34"><name pos:start="11:28" pos:end="11:34"><name pos:start="11:28" pos:end="11:31">ubuf</name><index pos:start="11:32" pos:end="11:34">[<expr pos:start="11:33" pos:end="11:33"><literal type="number" pos:start="11:33" pos:end="11:33">0</literal></expr>]</index></name></expr></init></decl>, <decl pos:start="11:37" pos:end="11:52"><type ref="prev" pos:start="11:5" pos:end="11:19"><modifier pos:start="11:37" pos:end="11:37">*</modifier></type><name pos:start="11:38" pos:end="11:42">ubuf1</name> <init pos:start="11:44" pos:end="11:52">= <expr pos:start="11:46" pos:end="11:52"><name pos:start="11:46" pos:end="11:52"><name pos:start="11:46" pos:end="11:49">ubuf</name><index pos:start="11:50" pos:end="11:52">[<expr pos:start="11:51" pos:end="11:51"><literal type="number" pos:start="11:51" pos:end="11:51">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">int16_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:23">buf1</name><init pos:start="13:24" pos:end="13:29">= <expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">buf0</name></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="13:32" pos:end="13:59">//FIXME needed for RGB1/BGR1</comment>



    <if_stmt pos:start="17:5" pos:end="129:5"><if pos:start="17:5" pos:end="73:5">if <condition pos:start="17:8" pos:end="17:23">(<expr pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:15">uvalpha</name> <operator pos:start="17:17" pos:end="17:17">&lt;</operator> <literal type="number" pos:start="17:19" pos:end="17:22">2048</literal></expr>)</condition> <block pos:start="17:25" pos:end="73:5">{<block_content pos:start="19:9" pos:end="71:9"> <comment type="line" pos:start="17:27" pos:end="17:111">// note this is not correct (shifts chrominance by 0.5 pixels) but it is a bit faster</comment>

        <if_stmt pos:start="19:9" pos:end="71:9"><if pos:start="19:9" pos:end="45:9">if <condition pos:start="19:12" pos:end="19:49">(<expr pos:start="19:13" pos:end="19:48"><name pos:start="19:13" pos:end="19:32">CONFIG_SWSCALE_ALPHA</name> <operator pos:start="19:34" pos:end="19:35">&amp;&amp;</operator> <name pos:start="19:37" pos:end="19:48"><name pos:start="19:37" pos:end="19:37">c</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:48">alpPixBuf</name></name></expr>)</condition> <block pos:start="19:51" pos:end="45:9">{<block_content pos:start="21:13" pos:end="43:14">

            <asm pos:start="21:13" pos:end="43:14">__asm__ <specifier pos:start="21:21" pos:end="21:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov        %4, %%"REG_b"               \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2RGB1(%%REGBP, %5)

                YSCALEYUV2RGB1_ALPHA(%%REGBP)

                WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"

                :: "c" (buf0), "d" (abuf0), "S" (ubuf0), "D" (ubuf1), "m" (dest),

                   "a" (&amp;c-&gt;redDither)

            );</asm>

        </block_content>}</block></if> <else pos:start="45:11" pos:end="71:9">else <block pos:start="45:16" pos:end="71:9">{<block_content pos:start="47:13" pos:end="69:14">

            <asm pos:start="47:13" pos:end="69:14">__asm__ <specifier pos:start="47:21" pos:end="47:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov        %4, %%"REG_b"               \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2RGB1(%%REGBP, %5)

                "pcmpeqd %%mm7, %%mm7                   \n\t"

                WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"

                :: "c" (buf0), "d" (buf1), "S" (ubuf0), "D" (ubuf1), "m" (dest),

                   "a" (&amp;c-&gt;redDither)

            );</asm>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="129:5">else <block pos:start="73:12" pos:end="129:5">{<block_content pos:start="75:9" pos:end="127:9">

        <if_stmt pos:start="75:9" pos:end="127:9"><if pos:start="75:9" pos:end="101:9">if <condition pos:start="75:12" pos:end="75:49">(<expr pos:start="75:13" pos:end="75:48"><name pos:start="75:13" pos:end="75:32">CONFIG_SWSCALE_ALPHA</name> <operator pos:start="75:34" pos:end="75:35">&amp;&amp;</operator> <name pos:start="75:37" pos:end="75:48"><name pos:start="75:37" pos:end="75:37">c</name><operator pos:start="75:38" pos:end="75:39">-&gt;</operator><name pos:start="75:40" pos:end="75:48">alpPixBuf</name></name></expr>)</condition> <block pos:start="75:51" pos:end="101:9">{<block_content pos:start="77:13" pos:end="99:14">

            <asm pos:start="77:13" pos:end="99:14">__asm__ <specifier pos:start="77:21" pos:end="77:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov        %4, %%"REG_b"               \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2RGB1b(%%REGBP, %5)

                YSCALEYUV2RGB1_ALPHA(%%REGBP)

                WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"

                :: "c" (buf0), "d" (abuf0), "S" (ubuf0), "D" (ubuf1), "m" (dest),

                   "a" (&amp;c-&gt;redDither)

            );</asm>

        </block_content>}</block></if> <else pos:start="101:11" pos:end="127:9">else <block pos:start="101:16" pos:end="127:9">{<block_content pos:start="103:13" pos:end="125:14">

            <asm pos:start="103:13" pos:end="125:14">__asm__ <specifier pos:start="103:21" pos:end="103:28">volatile</specifier>(

                "mov %%"REG_b", "ESP_OFFSET"(%5)        \n\t"

                "mov        %4, %%"REG_b"               \n\t"

                "push %%"REG_BP"                        \n\t"

                YSCALEYUV2RGB1b(%%REGBP, %5)

                "pcmpeqd %%mm7, %%mm7                   \n\t"

                WRITEBGR32(%%REGb, 8280(%5), %%REGBP, %%mm2, %%mm4, %%mm5, %%mm7, %%mm0, %%mm1, %%mm3, %%mm6)

                "pop %%"REG_BP"                         \n\t"

                "mov "ESP_OFFSET"(%5), %%"REG_b"        \n\t"

                :: "c" (buf0), "d" (buf1), "S" (ubuf0), "D" (ubuf1), "m" (dest),

                   "a" (&amp;c-&gt;redDither)

            );</asm>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
