<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/790.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">rx_init_frame</name><parameter_list pos:start="1:26" pos:end="1:72">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:31">eTSEC</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:38">etsec</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:58"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:53">uint8_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">buf</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:71"><decl pos:start="1:61" pos:end="1:71"><type pos:start="1:61" pos:end="1:71"><name pos:start="1:61" pos:end="1:66">size_t</name></type> <name pos:start="1:68" pos:end="1:71">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:56">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:21">fcb_size</name> <init pos:start="5:23" pos:end="5:25">= <expr pos:start="5:25" pos:end="5:25"><literal type="number" pos:start="5:25" pos:end="5:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="9:28"><decl pos:start="7:5" pos:end="9:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type>  <name pos:start="7:14" pos:end="7:19">prsdep</name>   <init pos:start="7:23" pos:end="9:27">= <expr pos:start="7:25" pos:end="9:27"><operator pos:start="7:25" pos:end="7:25">(</operator><name pos:start="7:26" pos:end="7:43"><name pos:start="7:26" pos:end="7:30">etsec</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">regs</name><index pos:start="7:37" pos:end="7:43">[<expr pos:start="7:38" pos:end="7:42"><name pos:start="7:38" pos:end="7:42">RCTRL</name></expr>]</index></name><operator pos:start="7:44" pos:end="7:44">.</operator><name pos:start="7:45" pos:end="7:49">value</name> <operator pos:start="7:51" pos:end="7:52">&gt;&gt;</operator> <name pos:start="7:54" pos:end="7:72">RCTRL_PRSDEP_OFFSET</name><operator pos:start="7:73" pos:end="7:73">)</operator>

        <operator pos:start="9:9" pos:end="9:9">&amp;</operator> <name pos:start="9:11" pos:end="9:27">RCTRL_PRSDEP_MASK</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="35:5"><if pos:start="13:5" pos:end="31:5">if <condition pos:start="13:8" pos:end="13:20">(<expr pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:14">prsdep</name> <operator pos:start="13:16" pos:end="13:17">!=</operator> <literal type="number" pos:start="13:19" pos:end="13:19">0</literal></expr>)</condition> <block pos:start="13:22" pos:end="31:5">{<block_content pos:start="17:9" pos:end="27:58">

        <comment type="block" pos:start="15:9" pos:end="15:49">/* Prepend FCB (FCB size + RCTRL[PAL]) */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:65"><expr pos:start="17:9" pos:end="17:64"><name pos:start="17:9" pos:end="17:16">fcb_size</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <literal type="number" pos:start="17:20" pos:end="17:22">8</literal> <operator pos:start="17:22" pos:end="17:22">+</operator> <operator pos:start="17:24" pos:end="17:24">(</operator><operator pos:start="17:25" pos:end="17:25">(</operator><name pos:start="17:26" pos:end="17:43"><name pos:start="17:26" pos:end="17:30">etsec</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:36">regs</name><index pos:start="17:37" pos:end="17:43">[<expr pos:start="17:38" pos:end="17:42"><name pos:start="17:38" pos:end="17:42">RCTRL</name></expr>]</index></name><operator pos:start="17:44" pos:end="17:44">.</operator><name pos:start="17:45" pos:end="17:49">value</name> <operator pos:start="17:51" pos:end="17:52">&gt;&gt;</operator> <literal type="number" pos:start="17:54" pos:end="17:55">16</literal><operator pos:start="17:56" pos:end="17:56">)</operator> <operator pos:start="17:58" pos:end="17:58">&amp;</operator> <literal type="number" pos:start="17:60" pos:end="17:63">0x1F</literal><operator pos:start="17:64" pos:end="17:64">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:13">etsec</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:26">rx_fcb_size</name></name> <operator pos:start="21:28" pos:end="21:28">=</operator> <name pos:start="21:30" pos:end="21:37">fcb_size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="25:9" pos:end="25:36">/* TODO: fill_FCB(etsec); */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:58"><expr pos:start="27:9" pos:end="27:57"><call pos:start="27:9" pos:end="27:57"><name pos:start="27:9" pos:end="27:14">memset</name><argument_list pos:start="27:15" pos:end="27:57">(<argument pos:start="27:16" pos:end="27:28"><expr pos:start="27:16" pos:end="27:28"><name pos:start="27:16" pos:end="27:28"><name pos:start="27:16" pos:end="27:20">etsec</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:28">rx_fcb</name></name></expr></argument>, <argument pos:start="27:31" pos:end="27:33"><expr pos:start="27:31" pos:end="27:33"><literal type="number" pos:start="27:31" pos:end="27:33">0x0</literal></expr></argument>, <argument pos:start="27:36" pos:end="27:56"><expr pos:start="27:36" pos:end="27:56"><sizeof pos:start="27:36" pos:end="27:56">sizeof<argument_list pos:start="27:42" pos:end="27:56">(<argument pos:start="27:43" pos:end="27:55"><expr pos:start="27:43" pos:end="27:55"><name pos:start="27:43" pos:end="27:55"><name pos:start="27:43" pos:end="27:47">etsec</name><operator pos:start="27:48" pos:end="27:49">-&gt;</operator><name pos:start="27:50" pos:end="27:55">rx_fcb</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="31:7" pos:end="35:5">else <block pos:start="31:12" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:31">

        <expr_stmt pos:start="33:9" pos:end="33:31"><expr pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:13">etsec</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:26">rx_fcb_size</name></name> <operator pos:start="33:28" pos:end="33:28">=</operator> <literal type="number" pos:start="33:30" pos:end="33:30">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:33">(<expr pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:13">etsec</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:24">rx_buffer</name></name> <operator pos:start="39:26" pos:end="39:27">!=</operator> <name pos:start="39:29" pos:end="39:32">NULL</name></expr>)</condition> <block pos:start="39:35" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:33">

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><call pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:14">g_free</name><argument_list pos:start="41:15" pos:end="41:32">(<argument pos:start="41:16" pos:end="41:31"><expr pos:start="41:16" pos:end="41:31"><name pos:start="41:16" pos:end="41:31"><name pos:start="41:16" pos:end="41:20">etsec</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:31">rx_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:39">/* Do not copy the frame for now */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:42"><expr pos:start="49:5" pos:end="49:41"><name pos:start="49:5" pos:end="49:20"><name pos:start="49:5" pos:end="49:9">etsec</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:20">rx_buffer</name></name>     <operator pos:start="49:26" pos:end="49:26">=</operator> <operator pos:start="49:28" pos:end="49:28">(</operator><name pos:start="49:29" pos:end="49:35">uint8_t</name> <operator pos:start="49:37" pos:end="49:37">*</operator><operator pos:start="49:38" pos:end="49:38">)</operator><name pos:start="49:39" pos:end="49:41">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:32"><expr pos:start="51:5" pos:end="51:31"><name pos:start="51:5" pos:end="51:24"><name pos:start="51:5" pos:end="51:9">etsec</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:24">rx_buffer_len</name></name> <operator pos:start="51:26" pos:end="51:26">=</operator> <name pos:start="51:28" pos:end="51:31">size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:56">/* CRC padding (We don't have to compute the CRC) */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:26"><expr pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:9">etsec</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:21">rx_padding</name></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <literal type="number" pos:start="57:25" pos:end="57:25">4</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:33"><expr pos:start="61:5" pos:end="61:32"><name pos:start="61:5" pos:end="61:28"><name pos:start="61:5" pos:end="61:9">etsec</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:28">rx_first_in_frame</name></name> <operator pos:start="61:30" pos:end="61:30">=</operator> <literal type="number" pos:start="61:32" pos:end="61:32">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:52"><expr pos:start="63:5" pos:end="63:51"><name pos:start="63:5" pos:end="63:28"><name pos:start="63:5" pos:end="63:9">etsec</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:28">rx_remaining_data</name></name> <operator pos:start="63:30" pos:end="63:30">=</operator> <name pos:start="63:32" pos:end="63:51"><name pos:start="63:32" pos:end="63:36">etsec</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:51">rx_buffer_len</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:56"><expr pos:start="65:5" pos:end="67:55"><call pos:start="65:5" pos:end="67:55"><name pos:start="65:5" pos:end="65:14">RING_DEBUG</name><argument_list pos:start="65:15" pos:end="67:55">(<argument pos:start="65:16" pos:end="65:57"><expr pos:start="65:16" pos:end="65:57"><literal type="string" pos:start="65:16" pos:end="65:57">"%s: rx_buffer_len:%u rx_padding+crc:%u\n"</literal></expr></argument>, <argument pos:start="65:60" pos:end="65:67"><expr pos:start="65:60" pos:end="65:67"><name pos:start="65:60" pos:end="65:67">__func__</name></expr></argument>,

               <argument pos:start="67:16" pos:end="67:35"><expr pos:start="67:16" pos:end="67:35"><name pos:start="67:16" pos:end="67:35"><name pos:start="67:16" pos:end="67:20">etsec</name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:35">rx_buffer_len</name></name></expr></argument>, <argument pos:start="67:38" pos:end="67:54"><expr pos:start="67:38" pos:end="67:54"><name pos:start="67:38" pos:end="67:54"><name pos:start="67:38" pos:end="67:42">etsec</name><operator pos:start="67:43" pos:end="67:44">-&gt;</operator><name pos:start="67:45" pos:end="67:54">rx_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
