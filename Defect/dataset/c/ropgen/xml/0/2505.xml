<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2505.c" pos:tabs="8"><macro pos:start="1:1" pos:end="7:30"><name pos:start="1:1" pos:end="1:16">iscsi_aio_writev</name><argument_list pos:start="1:17" pos:end="7:30">(<argument pos:start="1:18" pos:end="1:37">BlockDriverState *bs</argument>, <argument pos:start="1:40" pos:end="1:57">int64_t sector_num</argument>,

                 <argument pos:start="3:18" pos:end="3:35">QEMUIOVector *qiov</argument>, <argument pos:start="3:38" pos:end="3:51">int nb_sectors</argument>,

                 <argument pos:start="5:18" pos:end="5:46">BlockDriverCompletionFunc *cb</argument>,

                 <argument pos:start="7:18" pos:end="7:29">void *opaque</argument>)</argument_list></macro>

<block pos:start="9:1" pos:end="175:1">{<block_content pos:start="11:5" pos:end="173:24">

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">IscsiLun</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">iscsilun</name> <init pos:start="11:24" pos:end="11:35">= <expr pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:27">bs</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:24">iscsi_context</name></name> <modifier pos:start="13:26" pos:end="13:26">*</modifier></type><name pos:start="13:27" pos:end="13:31">iscsi</name> <init pos:start="13:33" pos:end="13:49">= <expr pos:start="13:35" pos:end="13:49"><name pos:start="13:35" pos:end="13:49"><name pos:start="13:35" pos:end="13:42">iscsilun</name><operator pos:start="13:43" pos:end="13:44">-&gt;</operator><name pos:start="13:45" pos:end="13:49">iscsi</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">IscsiAIOCB</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:19">acb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:15">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:24">num_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="24:0"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:16">lba</name></decl>;</decl_stmt>

<cpp:if pos:start="23:1" pos:end="23:39">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:39"><operator pos:start="23:5" pos:end="23:5">!</operator><call pos:start="23:6" pos:end="23:39"><name pos:start="23:6" pos:end="23:12">defined</name><argument_list pos:start="23:13" pos:end="23:39">(<argument pos:start="23:14" pos:end="23:38"><expr pos:start="23:14" pos:end="23:38"><name pos:start="23:14" pos:end="23:38">LIBISCSI_FEATURE_IOVECTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="25:5" pos:end="28:0"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:10">struct</name> <name pos:start="25:12" pos:end="25:21">iscsi_data</name></name></type> <name pos:start="25:23" pos:end="25:26">data</name></decl>;</decl_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="29:5" pos:end="29:12"><decl pos:start="29:5" pos:end="29:11"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:58"><expr pos:start="33:5" pos:end="33:57"><name pos:start="33:5" pos:end="33:7">acb</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:57"><name pos:start="33:11" pos:end="33:22">qemu_aio_get</name><argument_list pos:start="33:23" pos:end="33:57">(<argument pos:start="33:24" pos:end="33:40"><expr pos:start="33:24" pos:end="33:40"><operator pos:start="33:24" pos:end="33:24">&amp;</operator><name pos:start="33:25" pos:end="33:40">iscsi_aiocb_info</name></expr></argument>, <argument pos:start="33:43" pos:end="33:44"><expr pos:start="33:43" pos:end="33:44"><name pos:start="33:43" pos:end="33:44">bs</name></expr></argument>, <argument pos:start="33:47" pos:end="33:48"><expr pos:start="33:47" pos:end="33:48"><name pos:start="33:47" pos:end="33:48">cb</name></expr></argument>, <argument pos:start="33:51" pos:end="33:56"><expr pos:start="33:51" pos:end="33:56"><name pos:start="33:51" pos:end="33:56">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:71"><expr pos:start="35:5" pos:end="35:70"><call pos:start="35:5" pos:end="35:70"><name pos:start="35:5" pos:end="35:26">trace_iscsi_aio_writev</name><argument_list pos:start="35:27" pos:end="35:70">(<argument pos:start="35:28" pos:end="35:32"><expr pos:start="35:28" pos:end="35:32"><name pos:start="35:28" pos:end="35:32">iscsi</name></expr></argument>, <argument pos:start="35:35" pos:end="35:44"><expr pos:start="35:35" pos:end="35:44"><name pos:start="35:35" pos:end="35:44">sector_num</name></expr></argument>, <argument pos:start="35:47" pos:end="35:56"><expr pos:start="35:47" pos:end="35:56"><name pos:start="35:47" pos:end="35:56">nb_sectors</name></expr></argument>, <argument pos:start="35:59" pos:end="35:64"><expr pos:start="35:59" pos:end="35:64"><name pos:start="35:59" pos:end="35:64">opaque</name></expr></argument>, <argument pos:start="35:67" pos:end="35:69"><expr pos:start="35:67" pos:end="35:69"><name pos:start="35:67" pos:end="35:69">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:7">acb</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:17">iscsilun</name></name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:28">iscsilun</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:7">acb</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:13">qiov</name></name>     <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:24">qiov</name></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:24"><expr pos:start="45:5" pos:end="45:23"><name pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:7">acb</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:17">canceled</name></name>   <operator pos:start="45:21" pos:end="45:21">=</operator> <literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:11"><name pos:start="47:5" pos:end="47:7">acb</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:11">bh</name></name>         <operator pos:start="47:21" pos:end="47:21">=</operator> <name pos:start="47:23" pos:end="47:26">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:35"><expr pos:start="49:5" pos:end="49:34"><name pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:7">acb</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:15">status</name></name>     <operator pos:start="49:21" pos:end="49:21">=</operator> <operator pos:start="49:23" pos:end="49:23">-</operator><name pos:start="49:24" pos:end="49:34">EINPROGRESS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:12"><name pos:start="51:5" pos:end="51:7">acb</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:12">buf</name></name>        <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:26">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:59">/* this will allow us to get rid of 'buf' completely */</comment>

    <expr_stmt pos:start="57:5" pos:end="62:0"><expr pos:start="57:5" pos:end="57:40"><name pos:start="57:5" pos:end="57:8">size</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <name pos:start="57:12" pos:end="57:21">nb_sectors</name> <operator pos:start="57:23" pos:end="57:23">*</operator> <name pos:start="57:25" pos:end="57:40">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>



<cpp:if pos:start="61:1" pos:end="61:39">#<cpp:directive pos:start="61:2" pos:end="61:3">if</cpp:directive> <expr pos:start="61:5" pos:end="61:39"><operator pos:start="61:5" pos:end="61:5">!</operator><call pos:start="61:6" pos:end="61:39"><name pos:start="61:6" pos:end="61:12">defined</name><argument_list pos:start="61:13" pos:end="61:39">(<argument pos:start="61:14" pos:end="61:38"><expr pos:start="61:14" pos:end="61:38"><name pos:start="61:14" pos:end="61:38">LIBISCSI_FEATURE_IOVECTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:13"><name pos:start="63:5" pos:end="63:8">data</name><operator pos:start="63:9" pos:end="63:9">.</operator><name pos:start="63:10" pos:end="63:13">size</name></name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:42"><name pos:start="63:17" pos:end="63:19">MIN</name><argument_list pos:start="63:20" pos:end="63:42">(<argument pos:start="63:21" pos:end="63:24"><expr pos:start="63:21" pos:end="63:24"><name pos:start="63:21" pos:end="63:24">size</name></expr></argument>, <argument pos:start="63:27" pos:end="63:41"><expr pos:start="63:27" pos:end="63:41"><name pos:start="63:27" pos:end="63:41"><name pos:start="63:27" pos:end="63:29">acb</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:35">qiov</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:41">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:71">/* if the iovec only contains one buffer we can pass it directly */</comment>

    <if_stmt pos:start="69:5" pos:end="84:0"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:29">(<expr pos:start="69:9" pos:end="69:28"><name pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:11">acb</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:17">qiov</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:23">niov</name></name> <operator pos:start="69:25" pos:end="69:26">==</operator> <literal type="number" pos:start="69:28" pos:end="69:28">1</literal></expr>)</condition> <block pos:start="69:31" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:47">

        <expr_stmt pos:start="71:9" pos:end="71:47"><expr pos:start="71:9" pos:end="71:46"><name pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:12">data</name><operator pos:start="71:13" pos:end="71:13">.</operator><name pos:start="71:14" pos:end="71:17">data</name></name> <operator pos:start="71:19" pos:end="71:19">=</operator> <name pos:start="71:21" pos:end="71:37"><name pos:start="71:21" pos:end="71:23">acb</name><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:29">qiov</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:34">iov</name><index pos:start="71:35" pos:end="71:37">[<expr pos:start="71:36" pos:end="71:36"><literal type="number" pos:start="71:36" pos:end="71:36">0</literal></expr>]</index></name><operator pos:start="71:38" pos:end="71:38">.</operator><name pos:start="71:39" pos:end="71:46">iov_base</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="84:0">else <block pos:start="73:12" pos:end="84:0">{<block_content pos:start="75:9" pos:end="79:29">

        <expr_stmt pos:start="75:9" pos:end="75:39"><expr pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:11">acb</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:16">buf</name></name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:38"><name pos:start="75:20" pos:end="75:27">g_malloc</name><argument_list pos:start="75:28" pos:end="75:38">(<argument pos:start="75:29" pos:end="75:37"><expr pos:start="75:29" pos:end="75:37"><name pos:start="75:29" pos:end="75:37"><name pos:start="75:29" pos:end="75:32">data</name><operator pos:start="75:33" pos:end="75:33">.</operator><name pos:start="75:34" pos:end="75:37">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:61"><expr pos:start="77:9" pos:end="77:60"><call pos:start="77:9" pos:end="77:60"><name pos:start="77:9" pos:end="77:25">qemu_iovec_to_buf</name><argument_list pos:start="77:26" pos:end="77:60">(<argument pos:start="77:27" pos:end="77:35"><expr pos:start="77:27" pos:end="77:35"><name pos:start="77:27" pos:end="77:35"><name pos:start="77:27" pos:end="77:29">acb</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:35">qiov</name></name></expr></argument>, <argument pos:start="77:38" pos:end="77:38"><expr pos:start="77:38" pos:end="77:38"><literal type="number" pos:start="77:38" pos:end="77:38">0</literal></expr></argument>, <argument pos:start="77:41" pos:end="77:48"><expr pos:start="77:41" pos:end="77:48"><name pos:start="77:41" pos:end="77:48"><name pos:start="77:41" pos:end="77:43">acb</name><operator pos:start="77:44" pos:end="77:45">-&gt;</operator><name pos:start="77:46" pos:end="77:48">buf</name></name></expr></argument>, <argument pos:start="77:51" pos:end="77:59"><expr pos:start="77:51" pos:end="77:59"><name pos:start="77:51" pos:end="77:59"><name pos:start="77:51" pos:end="77:54">data</name><operator pos:start="77:55" pos:end="77:55">.</operator><name pos:start="77:56" pos:end="77:59">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:29"><expr pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:17"><name pos:start="79:9" pos:end="79:12">data</name><operator pos:start="79:13" pos:end="79:13">.</operator><name pos:start="79:14" pos:end="79:17">data</name></name> <operator pos:start="79:19" pos:end="79:19">=</operator> <name pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:23">acb</name><operator pos:start="79:24" pos:end="79:25">-&gt;</operator><name pos:start="79:26" pos:end="79:28">buf</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="87:5" pos:end="87:49"><expr pos:start="87:5" pos:end="87:48"><name pos:start="87:5" pos:end="87:13"><name pos:start="87:5" pos:end="87:7">acb</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:13">task</name></name> <operator pos:start="87:15" pos:end="87:15">=</operator> <call pos:start="87:17" pos:end="87:48"><name pos:start="87:17" pos:end="87:22">malloc</name><argument_list pos:start="87:23" pos:end="87:48">(<argument pos:start="87:24" pos:end="87:47"><expr pos:start="87:24" pos:end="87:47"><sizeof pos:start="87:24" pos:end="87:47">sizeof<argument_list pos:start="87:30" pos:end="87:47">(<argument pos:start="87:31" pos:end="87:46"><expr pos:start="87:31" pos:end="87:46">struct <name pos:start="87:38" pos:end="87:46">scsi_task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="99:5"><if pos:start="89:5" pos:end="99:5">if <condition pos:start="89:8" pos:end="89:26">(<expr pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:11">acb</name><operator pos:start="89:12" pos:end="89:13">-&gt;</operator><name pos:start="89:14" pos:end="89:17">task</name></name> <operator pos:start="89:19" pos:end="89:20">==</operator> <name pos:start="89:22" pos:end="89:25">NULL</name></expr>)</condition> <block pos:start="89:28" pos:end="99:5">{<block_content pos:start="91:9" pos:end="97:20">

        <expr_stmt pos:start="91:9" pos:end="93:60"><expr pos:start="91:9" pos:end="93:59"><call pos:start="91:9" pos:end="93:59"><name pos:start="91:9" pos:end="91:20">error_report</name><argument_list pos:start="91:21" pos:end="93:59">(<argument pos:start="91:22" pos:end="93:34"><expr pos:start="91:22" pos:end="93:34"><literal type="string" pos:start="91:22" pos:end="91:71">"iSCSI: Failed to allocate task for scsi WRITE16 "</literal>

                     <literal type="string" pos:start="93:22" pos:end="93:34">"command. %s"</literal></expr></argument>, <argument pos:start="93:37" pos:end="93:58"><expr pos:start="93:37" pos:end="93:58"><call pos:start="93:37" pos:end="93:58"><name pos:start="93:37" pos:end="93:51">iscsi_get_error</name><argument_list pos:start="93:52" pos:end="93:58">(<argument pos:start="93:53" pos:end="93:57"><expr pos:start="93:53" pos:end="93:57"><name pos:start="93:53" pos:end="93:57">iscsi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:30"><expr pos:start="95:9" pos:end="95:29"><call pos:start="95:9" pos:end="95:29"><name pos:start="95:9" pos:end="95:24">qemu_aio_release</name><argument_list pos:start="95:25" pos:end="95:29">(<argument pos:start="95:26" pos:end="95:28"><expr pos:start="95:26" pos:end="95:28"><name pos:start="95:26" pos:end="95:28">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:20">return <expr pos:start="97:16" pos:end="97:19"><name pos:start="97:16" pos:end="97:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:51"><expr pos:start="101:5" pos:end="101:50"><call pos:start="101:5" pos:end="101:50"><name pos:start="101:5" pos:end="101:10">memset</name><argument_list pos:start="101:11" pos:end="101:50">(<argument pos:start="101:12" pos:end="101:20"><expr pos:start="101:12" pos:end="101:20"><name pos:start="101:12" pos:end="101:20"><name pos:start="101:12" pos:end="101:14">acb</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:20">task</name></name></expr></argument>, <argument pos:start="101:23" pos:end="101:23"><expr pos:start="101:23" pos:end="101:23"><literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr></argument>, <argument pos:start="101:26" pos:end="101:49"><expr pos:start="101:26" pos:end="101:49"><sizeof pos:start="101:26" pos:end="101:49">sizeof<argument_list pos:start="101:32" pos:end="101:49">(<argument pos:start="101:33" pos:end="101:48"><expr pos:start="101:33" pos:end="101:48">struct <name pos:start="101:40" pos:end="101:48">scsi_task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:42"><expr pos:start="105:5" pos:end="105:41"><name pos:start="105:5" pos:end="105:23"><name pos:start="105:5" pos:end="105:7">acb</name><operator pos:start="105:8" pos:end="105:9">-&gt;</operator><name pos:start="105:10" pos:end="105:13">task</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:23">xfer_dir</name></name> <operator pos:start="105:25" pos:end="105:25">=</operator> <name pos:start="105:27" pos:end="105:41">SCSI_XFER_WRITE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:29"><expr pos:start="107:5" pos:end="107:28"><name pos:start="107:5" pos:end="107:23"><name pos:start="107:5" pos:end="107:7">acb</name><operator pos:start="107:8" pos:end="107:9">-&gt;</operator><name pos:start="107:10" pos:end="107:13">task</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:23">cdb_size</name></name> <operator pos:start="107:25" pos:end="107:25">=</operator> <literal type="number" pos:start="107:27" pos:end="107:28">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:29"><expr pos:start="109:5" pos:end="109:28"><name pos:start="109:5" pos:end="109:21"><name pos:start="109:5" pos:end="109:7">acb</name><operator pos:start="109:8" pos:end="109:9">-&gt;</operator><name pos:start="109:10" pos:end="109:13">task</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:18">cdb</name><index pos:start="109:19" pos:end="109:21">[<expr pos:start="109:20" pos:end="109:20"><literal type="number" pos:start="109:20" pos:end="109:20">0</literal></expr>]</index></name> <operator pos:start="109:23" pos:end="109:23">=</operator> <literal type="number" pos:start="109:25" pos:end="109:28">0x8a</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:48"><expr pos:start="111:5" pos:end="111:47"><name pos:start="111:5" pos:end="111:7">lba</name> <operator pos:start="111:9" pos:end="111:9">=</operator> <call pos:start="111:11" pos:end="111:47"><name pos:start="111:11" pos:end="111:25">sector_qemu2lun</name><argument_list pos:start="111:26" pos:end="111:47">(<argument pos:start="111:27" pos:end="111:36"><expr pos:start="111:27" pos:end="111:36"><name pos:start="111:27" pos:end="111:36">sector_num</name></expr></argument>, <argument pos:start="111:39" pos:end="111:46"><expr pos:start="111:39" pos:end="111:46"><name pos:start="111:39" pos:end="111:46">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:56"><expr pos:start="113:5" pos:end="113:55"><operator pos:start="113:5" pos:end="113:5">*</operator><operator pos:start="113:6" pos:end="113:6">(</operator><name pos:start="113:7" pos:end="113:14">uint32_t</name> <operator pos:start="113:16" pos:end="113:16">*</operator><operator pos:start="113:17" pos:end="113:17">)</operator><operator pos:start="113:18" pos:end="113:18">&amp;</operator><name pos:start="113:19" pos:end="113:35"><name pos:start="113:19" pos:end="113:21">acb</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:27">task</name><operator pos:start="113:28" pos:end="113:29">-&gt;</operator><name pos:start="113:30" pos:end="113:32">cdb</name><index pos:start="113:33" pos:end="113:35">[<expr pos:start="113:34" pos:end="113:34"><literal type="number" pos:start="113:34" pos:end="113:34">2</literal></expr>]</index></name>  <operator pos:start="113:38" pos:end="113:38">=</operator> <call pos:start="113:40" pos:end="113:55"><name pos:start="113:40" pos:end="113:44">htonl</name><argument_list pos:start="113:45" pos:end="113:55">(<argument pos:start="113:46" pos:end="113:54"><expr pos:start="113:46" pos:end="113:54"><name pos:start="113:46" pos:end="113:48">lba</name> <operator pos:start="113:50" pos:end="113:51">&gt;&gt;</operator> <literal type="number" pos:start="113:53" pos:end="113:54">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:63"><expr pos:start="115:5" pos:end="115:62"><operator pos:start="115:5" pos:end="115:5">*</operator><operator pos:start="115:6" pos:end="115:6">(</operator><name pos:start="115:7" pos:end="115:14">uint32_t</name> <operator pos:start="115:16" pos:end="115:16">*</operator><operator pos:start="115:17" pos:end="115:17">)</operator><operator pos:start="115:18" pos:end="115:18">&amp;</operator><name pos:start="115:19" pos:end="115:35"><name pos:start="115:19" pos:end="115:21">acb</name><operator pos:start="115:22" pos:end="115:23">-&gt;</operator><name pos:start="115:24" pos:end="115:27">task</name><operator pos:start="115:28" pos:end="115:29">-&gt;</operator><name pos:start="115:30" pos:end="115:32">cdb</name><index pos:start="115:33" pos:end="115:35">[<expr pos:start="115:34" pos:end="115:34"><literal type="number" pos:start="115:34" pos:end="115:34">6</literal></expr>]</index></name>  <operator pos:start="115:38" pos:end="115:38">=</operator> <call pos:start="115:40" pos:end="115:62"><name pos:start="115:40" pos:end="115:44">htonl</name><argument_list pos:start="115:45" pos:end="115:62">(<argument pos:start="115:46" pos:end="115:61"><expr pos:start="115:46" pos:end="115:61"><name pos:start="115:46" pos:end="115:48">lba</name> <operator pos:start="115:50" pos:end="115:50">&amp;</operator> <literal type="number" pos:start="115:52" pos:end="115:61">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:46"><expr pos:start="117:5" pos:end="117:45"><name pos:start="117:5" pos:end="117:15">num_sectors</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <name pos:start="117:19" pos:end="117:22">size</name> <operator pos:start="117:24" pos:end="117:24">/</operator> <name pos:start="117:26" pos:end="117:45"><name pos:start="117:26" pos:end="117:33">iscsilun</name><operator pos:start="117:34" pos:end="117:35">-&gt;</operator><name pos:start="117:36" pos:end="117:45">block_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:58"><expr pos:start="119:5" pos:end="119:57"><operator pos:start="119:5" pos:end="119:5">*</operator><operator pos:start="119:6" pos:end="119:6">(</operator><name pos:start="119:7" pos:end="119:14">uint32_t</name> <operator pos:start="119:16" pos:end="119:16">*</operator><operator pos:start="119:17" pos:end="119:17">)</operator><operator pos:start="119:18" pos:end="119:18">&amp;</operator><name pos:start="119:19" pos:end="119:36"><name pos:start="119:19" pos:end="119:21">acb</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:27">task</name><operator pos:start="119:28" pos:end="119:29">-&gt;</operator><name pos:start="119:30" pos:end="119:32">cdb</name><index pos:start="119:33" pos:end="119:36">[<expr pos:start="119:34" pos:end="119:35"><literal type="number" pos:start="119:34" pos:end="119:35">10</literal></expr>]</index></name> <operator pos:start="119:38" pos:end="119:38">=</operator> <call pos:start="119:40" pos:end="119:57"><name pos:start="119:40" pos:end="119:44">htonl</name><argument_list pos:start="119:45" pos:end="119:57">(<argument pos:start="119:46" pos:end="119:56"><expr pos:start="119:46" pos:end="119:56"><name pos:start="119:46" pos:end="119:56">num_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="126:0"><expr pos:start="121:5" pos:end="121:32"><name pos:start="121:5" pos:end="121:25"><name pos:start="121:5" pos:end="121:7">acb</name><operator pos:start="121:8" pos:end="121:9">-&gt;</operator><name pos:start="121:10" pos:end="121:13">task</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:25">expxferlen</name></name> <operator pos:start="121:27" pos:end="121:27">=</operator> <name pos:start="121:29" pos:end="121:32">size</name></expr>;</expr_stmt>



<cpp:if pos:start="125:1" pos:end="125:38">#<cpp:directive pos:start="125:2" pos:end="125:3">if</cpp:directive> <expr pos:start="125:5" pos:end="125:38"><call pos:start="125:5" pos:end="125:38"><name pos:start="125:5" pos:end="125:11">defined</name><argument_list pos:start="125:12" pos:end="125:38">(<argument pos:start="125:13" pos:end="125:37"><expr pos:start="125:13" pos:end="125:37"><name pos:start="125:13" pos:end="125:37">LIBISCSI_FEATURE_IOVECTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="127:5" pos:end="136:0"><expr pos:start="127:5" pos:end="133:39"><name pos:start="127:5" pos:end="127:7">ret</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <call pos:start="127:11" pos:end="133:39"><name pos:start="127:11" pos:end="127:34">iscsi_scsi_command_async</name><argument_list pos:start="127:35" pos:end="133:39">(<argument pos:start="127:36" pos:end="127:40"><expr pos:start="127:36" pos:end="127:40"><name pos:start="127:36" pos:end="127:40">iscsi</name></expr></argument>, <argument pos:start="127:43" pos:end="127:55"><expr pos:start="127:43" pos:end="127:55"><name pos:start="127:43" pos:end="127:55"><name pos:start="127:43" pos:end="127:50">iscsilun</name><operator pos:start="127:51" pos:end="127:52">-&gt;</operator><name pos:start="127:53" pos:end="127:55">lun</name></name></expr></argument>, <argument pos:start="127:58" pos:end="127:66"><expr pos:start="127:58" pos:end="127:66"><name pos:start="127:58" pos:end="127:66"><name pos:start="127:58" pos:end="127:60">acb</name><operator pos:start="127:61" pos:end="127:62">-&gt;</operator><name pos:start="127:63" pos:end="127:66">task</name></name></expr></argument>,

                                   <argument pos:start="129:36" pos:end="129:55"><expr pos:start="129:36" pos:end="129:55"><name pos:start="129:36" pos:end="129:55">iscsi_aio_write16_cb</name></expr></argument>,

                                   <argument pos:start="131:36" pos:end="131:39"><expr pos:start="131:36" pos:end="131:39"><name pos:start="131:36" pos:end="131:39">NULL</name></expr></argument>,

                                   <argument pos:start="133:36" pos:end="133:38"><expr pos:start="133:36" pos:end="133:38"><name pos:start="133:36" pos:end="133:38">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="135:1" pos:end="135:5">#<cpp:directive pos:start="135:2" pos:end="135:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="137:5" pos:end="146:0"><expr pos:start="137:5" pos:end="143:39"><name pos:start="137:5" pos:end="137:7">ret</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="143:39"><name pos:start="137:11" pos:end="137:34">iscsi_scsi_command_async</name><argument_list pos:start="137:35" pos:end="143:39">(<argument pos:start="137:36" pos:end="137:40"><expr pos:start="137:36" pos:end="137:40"><name pos:start="137:36" pos:end="137:40">iscsi</name></expr></argument>, <argument pos:start="137:43" pos:end="137:55"><expr pos:start="137:43" pos:end="137:55"><name pos:start="137:43" pos:end="137:55"><name pos:start="137:43" pos:end="137:50">iscsilun</name><operator pos:start="137:51" pos:end="137:52">-&gt;</operator><name pos:start="137:53" pos:end="137:55">lun</name></name></expr></argument>, <argument pos:start="137:58" pos:end="137:66"><expr pos:start="137:58" pos:end="137:66"><name pos:start="137:58" pos:end="137:66"><name pos:start="137:58" pos:end="137:60">acb</name><operator pos:start="137:61" pos:end="137:62">-&gt;</operator><name pos:start="137:63" pos:end="137:66">task</name></name></expr></argument>,

                                   <argument pos:start="139:36" pos:end="139:55"><expr pos:start="139:36" pos:end="139:55"><name pos:start="139:36" pos:end="139:55">iscsi_aio_write16_cb</name></expr></argument>,

                                   <argument pos:start="141:36" pos:end="141:40"><expr pos:start="141:36" pos:end="141:40"><operator pos:start="141:36" pos:end="141:36">&amp;</operator><name pos:start="141:37" pos:end="141:40">data</name></expr></argument>,

                                   <argument pos:start="143:36" pos:end="143:38"><expr pos:start="143:36" pos:end="143:38"><name pos:start="143:36" pos:end="143:38">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="145:1" pos:end="145:6">#<cpp:directive pos:start="145:2" pos:end="145:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="147:5" pos:end="162:0"><if pos:start="147:5" pos:end="162:0">if <condition pos:start="147:8" pos:end="147:17">(<expr pos:start="147:9" pos:end="147:16"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:14">!=</operator> <literal type="number" pos:start="147:16" pos:end="147:16">0</literal></expr>)</condition> <block pos:start="147:19" pos:end="162:0">{<block_content pos:start="149:9" pos:end="155:20">

        <expr_stmt pos:start="149:9" pos:end="149:39"><expr pos:start="149:9" pos:end="149:38"><call pos:start="149:9" pos:end="149:38"><name pos:start="149:9" pos:end="149:27">scsi_free_scsi_task</name><argument_list pos:start="149:28" pos:end="149:38">(<argument pos:start="149:29" pos:end="149:37"><expr pos:start="149:29" pos:end="149:37"><name pos:start="149:29" pos:end="149:37"><name pos:start="149:29" pos:end="149:31">acb</name><operator pos:start="149:32" pos:end="149:33">-&gt;</operator><name pos:start="149:34" pos:end="149:37">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:25"><expr pos:start="151:9" pos:end="151:24"><call pos:start="151:9" pos:end="151:24"><name pos:start="151:9" pos:end="151:14">g_free</name><argument_list pos:start="151:15" pos:end="151:24">(<argument pos:start="151:16" pos:end="151:23"><expr pos:start="151:16" pos:end="151:23"><name pos:start="151:16" pos:end="151:23"><name pos:start="151:16" pos:end="151:18">acb</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:23">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:30"><expr pos:start="153:9" pos:end="153:29"><call pos:start="153:9" pos:end="153:29"><name pos:start="153:9" pos:end="153:24">qemu_aio_release</name><argument_list pos:start="153:25" pos:end="153:29">(<argument pos:start="153:26" pos:end="153:28"><expr pos:start="153:26" pos:end="153:28"><name pos:start="153:26" pos:end="153:28">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="155:9" pos:end="155:20">return <expr pos:start="155:16" pos:end="155:19"><name pos:start="155:16" pos:end="155:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="161:1" pos:end="161:38">#<cpp:directive pos:start="161:2" pos:end="161:3">if</cpp:directive> <expr pos:start="161:5" pos:end="161:38"><call pos:start="161:5" pos:end="161:38"><name pos:start="161:5" pos:end="161:11">defined</name><argument_list pos:start="161:12" pos:end="161:38">(<argument pos:start="161:13" pos:end="161:37"><expr pos:start="161:13" pos:end="161:37"><name pos:start="161:13" pos:end="161:37">LIBISCSI_FEATURE_IOVECTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="163:5" pos:end="166:0"><expr pos:start="163:5" pos:end="163:90"><call pos:start="163:5" pos:end="163:90"><name pos:start="163:5" pos:end="163:25">scsi_task_set_iov_out</name><argument_list pos:start="163:26" pos:end="163:90">(<argument pos:start="163:27" pos:end="163:35"><expr pos:start="163:27" pos:end="163:35"><name pos:start="163:27" pos:end="163:35"><name pos:start="163:27" pos:end="163:29">acb</name><operator pos:start="163:30" pos:end="163:31">-&gt;</operator><name pos:start="163:32" pos:end="163:35">task</name></name></expr></argument>, <argument pos:start="163:38" pos:end="163:72"><expr pos:start="163:38" pos:end="163:72"><operator pos:start="163:38" pos:end="163:38">(</operator>struct <name pos:start="163:46" pos:end="163:55">scsi_iovec</name><operator pos:start="163:56" pos:end="163:56">*</operator><operator pos:start="163:57" pos:end="163:57">)</operator> <name pos:start="163:59" pos:end="163:72"><name pos:start="163:59" pos:end="163:61">acb</name><operator pos:start="163:62" pos:end="163:63">-&gt;</operator><name pos:start="163:64" pos:end="163:67">qiov</name><operator pos:start="163:68" pos:end="163:69">-&gt;</operator><name pos:start="163:70" pos:end="163:72">iov</name></name></expr></argument>, <argument pos:start="163:75" pos:end="163:89"><expr pos:start="163:75" pos:end="163:89"><name pos:start="163:75" pos:end="163:89"><name pos:start="163:75" pos:end="163:77">acb</name><operator pos:start="163:78" pos:end="163:79">-&gt;</operator><name pos:start="163:80" pos:end="163:83">qiov</name><operator pos:start="163:84" pos:end="163:85">-&gt;</operator><name pos:start="163:86" pos:end="163:89">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="165:1" pos:end="165:6">#<cpp:directive pos:start="165:2" pos:end="165:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="169:5" pos:end="169:31"><expr pos:start="169:5" pos:end="169:30"><call pos:start="169:5" pos:end="169:30"><name pos:start="169:5" pos:end="169:20">iscsi_set_events</name><argument_list pos:start="169:21" pos:end="169:30">(<argument pos:start="169:22" pos:end="169:29"><expr pos:start="169:22" pos:end="169:29"><name pos:start="169:22" pos:end="169:29">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="173:5" pos:end="173:24">return <expr pos:start="173:12" pos:end="173:23"><operator pos:start="173:12" pos:end="173:12">&amp;</operator><name pos:start="173:13" pos:end="173:23"><name pos:start="173:13" pos:end="173:15">acb</name><operator pos:start="173:16" pos:end="173:17">-&gt;</operator><name pos:start="173:18" pos:end="173:23">common</name></name></expr>;</return>

</block_content>}</block>
</unit>
