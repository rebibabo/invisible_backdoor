<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16796.c" pos:tabs="8"><function pos:start="1:1" pos:end="351:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">vfio_pci_hot_reset</name><parameter_list pos:start="1:30" pos:end="1:63">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:43">VFIOPCIDevice</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">vdev</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:55">bool</name></type> <name pos:start="1:57" pos:end="1:62">single</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="351:1">{<block_content pos:start="5:5" pos:end="349:15">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">VFIOGroup</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">group</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:36"><name pos:start="7:5" pos:end="7:34"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:34">vfio_pci_hot_reset_info</name></name> <modifier pos:start="7:36" pos:end="7:36">*</modifier></type><name pos:start="7:37" pos:end="7:40">info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:45"><type pos:start="9:5" pos:end="9:38"><name pos:start="9:5" pos:end="9:36"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:36">vfio_pci_dependent_device</name></name> <modifier pos:start="9:38" pos:end="9:38">*</modifier></type><name pos:start="9:39" pos:end="9:45">devices</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:29">vfio_pci_hot_reset</name></name> <modifier pos:start="11:31" pos:end="11:31">*</modifier></type><name pos:start="11:32" pos:end="11:36">reset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">int32_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">fds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>, <decl pos:start="15:14" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:14">i</name></decl>, <decl pos:start="15:17" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:21">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:14">multi</name> <init pos:start="17:16" pos:end="17:22">= <expr pos:start="17:18" pos:end="17:22"><name pos:start="17:18" pos:end="17:22">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:76"><expr pos:start="21:5" pos:end="21:75"><call pos:start="21:5" pos:end="21:75"><name pos:start="21:5" pos:end="21:28">trace_vfio_pci_hot_reset</name><argument_list pos:start="21:29" pos:end="21:75">(<argument pos:start="21:30" pos:end="21:48"><expr pos:start="21:30" pos:end="21:48"><name pos:start="21:30" pos:end="21:48"><name pos:start="21:30" pos:end="21:33">vdev</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:43">vbasedev</name><operator pos:start="21:44" pos:end="21:44">.</operator><name pos:start="21:45" pos:end="21:48">name</name></name></expr></argument>, <argument pos:start="21:51" pos:end="21:74"><expr pos:start="21:51" pos:end="21:74"><ternary pos:start="21:51" pos:end="21:74"><condition pos:start="21:51" pos:end="21:58"><expr pos:start="21:51" pos:end="21:56"><name pos:start="21:51" pos:end="21:56">single</name></expr> ?</condition><then pos:start="21:60" pos:end="21:64"> <expr pos:start="21:60" pos:end="21:64"><literal type="string" pos:start="21:60" pos:end="21:64">"one"</literal></expr> </then><else pos:start="21:66" pos:end="21:74">: <expr pos:start="21:68" pos:end="21:74"><literal type="string" pos:start="21:68" pos:end="21:74">"multi"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:29"><expr pos:start="25:5" pos:end="25:28"><call pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:22">vfio_pci_pre_reset</name><argument_list pos:start="25:23" pos:end="25:28">(<argument pos:start="25:24" pos:end="25:27"><expr pos:start="25:24" pos:end="25:27"><name pos:start="25:24" pos:end="25:27">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:39"><expr pos:start="27:5" pos:end="27:38"><name pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:8">vdev</name><operator pos:start="27:9" pos:end="27:10">-&gt;</operator><name pos:start="27:11" pos:end="27:18">vbasedev</name><operator pos:start="27:19" pos:end="27:19">.</operator><name pos:start="27:20" pos:end="27:30">needs_reset</name></name> <operator pos:start="27:32" pos:end="27:32">=</operator> <name pos:start="27:34" pos:end="27:38">false</name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:36"><expr pos:start="31:5" pos:end="31:35"><name pos:start="31:5" pos:end="31:8">info</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:35"><name pos:start="31:12" pos:end="31:20">g_malloc0</name><argument_list pos:start="31:21" pos:end="31:35">(<argument pos:start="31:22" pos:end="31:34"><expr pos:start="31:22" pos:end="31:34"><sizeof pos:start="31:22" pos:end="31:34">sizeof<argument_list pos:start="31:28" pos:end="31:34">(<argument pos:start="31:29" pos:end="31:33"><expr pos:start="31:29" pos:end="31:33"><operator pos:start="31:29" pos:end="31:29">*</operator><name pos:start="31:30" pos:end="31:33">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:8">info</name><operator pos:start="33:9" pos:end="33:10">-&gt;</operator><name pos:start="33:11" pos:end="33:15">argsz</name></name> <operator pos:start="33:17" pos:end="33:17">=</operator> <sizeof pos:start="33:19" pos:end="33:31">sizeof<argument_list pos:start="33:25" pos:end="33:31">(<argument pos:start="33:26" pos:end="33:30"><expr pos:start="33:26" pos:end="33:30"><operator pos:start="33:26" pos:end="33:26">*</operator><name pos:start="33:27" pos:end="33:30">info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:77"><expr pos:start="37:5" pos:end="37:76"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:76"><name pos:start="37:11" pos:end="37:15">ioctl</name><argument_list pos:start="37:16" pos:end="37:76">(<argument pos:start="37:17" pos:end="37:33"><expr pos:start="37:17" pos:end="37:33"><name pos:start="37:17" pos:end="37:33"><name pos:start="37:17" pos:end="37:20">vdev</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:30">vbasedev</name><operator pos:start="37:31" pos:end="37:31">.</operator><name pos:start="37:32" pos:end="37:33">fd</name></name></expr></argument>, <argument pos:start="37:36" pos:end="37:69"><expr pos:start="37:36" pos:end="37:69"><name pos:start="37:36" pos:end="37:69">VFIO_DEVICE_GET_PCI_HOT_RESET_INFO</name></expr></argument>, <argument pos:start="37:72" pos:end="37:75"><expr pos:start="37:72" pos:end="37:75"><name pos:start="37:72" pos:end="37:75">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="55:5"><if pos:start="39:5" pos:end="55:5">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:14">&amp;&amp;</operator> <name pos:start="39:16" pos:end="39:20">errno</name> <operator pos:start="39:22" pos:end="39:23">!=</operator> <name pos:start="39:25" pos:end="39:30">ENOSPC</name></expr>)</condition> <block pos:start="39:33" pos:end="55:5">{<block_content pos:start="41:9" pos:end="53:24">

        <expr_stmt pos:start="41:9" pos:end="41:21"><expr pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <operator pos:start="41:15" pos:end="41:15">-</operator><name pos:start="41:16" pos:end="41:20">errno</name></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="51:9"><if pos:start="43:9" pos:end="51:9">if <condition pos:start="43:12" pos:end="43:32">(<expr pos:start="43:13" pos:end="43:31"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:31"><name pos:start="43:14" pos:end="43:17">vdev</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:31">has_pm_reset</name></name></expr>)</condition> <block pos:start="43:34" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:79">

            <expr_stmt pos:start="45:13" pos:end="49:79"><expr pos:start="45:13" pos:end="49:78"><call pos:start="45:13" pos:end="49:78"><name pos:start="45:13" pos:end="45:24">error_report</name><argument_list pos:start="45:25" pos:end="49:78">(<argument pos:start="45:26" pos:end="47:56"><expr pos:start="45:26" pos:end="47:56"><literal type="string" pos:start="45:26" pos:end="45:72">"vfio: Cannot reset device %04x:%02x:%02x.%x, "</literal>

                         <literal type="string" pos:start="47:26" pos:end="47:56">"no available reset mechanism."</literal></expr></argument>, <argument pos:start="47:59" pos:end="47:75"><expr pos:start="47:59" pos:end="47:75"><name pos:start="47:59" pos:end="47:75"><name pos:start="47:59" pos:end="47:62">vdev</name><operator pos:start="47:63" pos:end="47:64">-&gt;</operator><name pos:start="47:65" pos:end="47:68">host</name><operator pos:start="47:69" pos:end="47:69">.</operator><name pos:start="47:70" pos:end="47:75">domain</name></name></expr></argument>,

                         <argument pos:start="49:26" pos:end="49:39"><expr pos:start="49:26" pos:end="49:39"><name pos:start="49:26" pos:end="49:39"><name pos:start="49:26" pos:end="49:29">vdev</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:35">host</name><operator pos:start="49:36" pos:end="49:36">.</operator><name pos:start="49:37" pos:end="49:39">bus</name></name></expr></argument>, <argument pos:start="49:42" pos:end="49:56"><expr pos:start="49:42" pos:end="49:56"><name pos:start="49:42" pos:end="49:56"><name pos:start="49:42" pos:end="49:45">vdev</name><operator pos:start="49:46" pos:end="49:47">-&gt;</operator><name pos:start="49:48" pos:end="49:51">host</name><operator pos:start="49:52" pos:end="49:52">.</operator><name pos:start="49:53" pos:end="49:56">slot</name></name></expr></argument>, <argument pos:start="49:59" pos:end="49:77"><expr pos:start="49:59" pos:end="49:77"><name pos:start="49:59" pos:end="49:77"><name pos:start="49:59" pos:end="49:62">vdev</name><operator pos:start="49:63" pos:end="49:64">-&gt;</operator><name pos:start="49:65" pos:end="49:68">host</name><operator pos:start="49:69" pos:end="49:69">.</operator><name pos:start="49:70" pos:end="49:77">function</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="53:9" pos:end="53:24">goto <name pos:start="53:14" pos:end="53:23">out_single</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:24"><expr pos:start="59:5" pos:end="59:23"><name pos:start="59:5" pos:end="59:9">count</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <name pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:16">info</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:23">count</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:71"><expr pos:start="61:5" pos:end="61:70"><name pos:start="61:5" pos:end="61:8">info</name> <operator pos:start="61:10" pos:end="61:10">=</operator> <call pos:start="61:12" pos:end="61:70"><name pos:start="61:12" pos:end="61:20">g_realloc</name><argument_list pos:start="61:21" pos:end="61:70">(<argument pos:start="61:22" pos:end="61:25"><expr pos:start="61:22" pos:end="61:25"><name pos:start="61:22" pos:end="61:25">info</name></expr></argument>, <argument pos:start="61:28" pos:end="61:69"><expr pos:start="61:28" pos:end="61:69"><sizeof pos:start="61:28" pos:end="61:40">sizeof<argument_list pos:start="61:34" pos:end="61:40">(<argument pos:start="61:35" pos:end="61:39"><expr pos:start="61:35" pos:end="61:39"><operator pos:start="61:35" pos:end="61:35">*</operator><name pos:start="61:36" pos:end="61:39">info</name></expr></argument>)</argument_list></sizeof> <operator pos:start="61:42" pos:end="61:42">+</operator> <operator pos:start="61:44" pos:end="61:44">(</operator><name pos:start="61:45" pos:end="61:49">count</name> <operator pos:start="61:51" pos:end="61:51">*</operator> <sizeof pos:start="61:53" pos:end="61:68">sizeof<argument_list pos:start="61:59" pos:end="61:68">(<argument pos:start="61:60" pos:end="61:67"><expr pos:start="61:60" pos:end="61:67"><operator pos:start="61:60" pos:end="61:60">*</operator><name pos:start="61:61" pos:end="61:67">devices</name></expr></argument>)</argument_list></sizeof><operator pos:start="61:69" pos:end="61:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:61"><expr pos:start="63:5" pos:end="63:60"><name pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:8">info</name><operator pos:start="63:9" pos:end="63:10">-&gt;</operator><name pos:start="63:11" pos:end="63:15">argsz</name></name> <operator pos:start="63:17" pos:end="63:17">=</operator> <sizeof pos:start="63:19" pos:end="63:31">sizeof<argument_list pos:start="63:25" pos:end="63:31">(<argument pos:start="63:26" pos:end="63:30"><expr pos:start="63:26" pos:end="63:30"><operator pos:start="63:26" pos:end="63:26">*</operator><name pos:start="63:27" pos:end="63:30">info</name></expr></argument>)</argument_list></sizeof> <operator pos:start="63:33" pos:end="63:33">+</operator> <operator pos:start="63:35" pos:end="63:35">(</operator><name pos:start="63:36" pos:end="63:40">count</name> <operator pos:start="63:42" pos:end="63:42">*</operator> <sizeof pos:start="63:44" pos:end="63:59">sizeof<argument_list pos:start="63:50" pos:end="63:59">(<argument pos:start="63:51" pos:end="63:58"><expr pos:start="63:51" pos:end="63:58"><operator pos:start="63:51" pos:end="63:51">*</operator><name pos:start="63:52" pos:end="63:58">devices</name></expr></argument>)</argument_list></sizeof><operator pos:start="63:60" pos:end="63:60">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:32"><expr pos:start="65:5" pos:end="65:31"><name pos:start="65:5" pos:end="65:11">devices</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <operator pos:start="65:15" pos:end="65:15">&amp;</operator><name pos:start="65:16" pos:end="65:31"><name pos:start="65:16" pos:end="65:19">info</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:28">devices</name><index pos:start="65:29" pos:end="65:31">[<expr pos:start="65:30" pos:end="65:30"><literal type="number" pos:start="65:30" pos:end="65:30">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:77"><expr pos:start="69:5" pos:end="69:76"><name pos:start="69:5" pos:end="69:7">ret</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:76"><name pos:start="69:11" pos:end="69:15">ioctl</name><argument_list pos:start="69:16" pos:end="69:76">(<argument pos:start="69:17" pos:end="69:33"><expr pos:start="69:17" pos:end="69:33"><name pos:start="69:17" pos:end="69:33"><name pos:start="69:17" pos:end="69:20">vdev</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:30">vbasedev</name><operator pos:start="69:31" pos:end="69:31">.</operator><name pos:start="69:32" pos:end="69:33">fd</name></name></expr></argument>, <argument pos:start="69:36" pos:end="69:69"><expr pos:start="69:36" pos:end="69:69"><name pos:start="69:36" pos:end="69:69">VFIO_DEVICE_GET_PCI_HOT_RESET_INFO</name></expr></argument>, <argument pos:start="69:72" pos:end="69:75"><expr pos:start="69:72" pos:end="69:75"><name pos:start="69:72" pos:end="69:75">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:12">(<expr pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">ret</name></expr>)</condition> <block pos:start="71:14" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:24">

        <expr_stmt pos:start="73:9" pos:end="73:21"><expr pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <operator pos:start="73:15" pos:end="73:15">-</operator><name pos:start="73:16" pos:end="73:20">errno</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:56"><expr pos:start="75:9" pos:end="75:55"><call pos:start="75:9" pos:end="75:55"><name pos:start="75:9" pos:end="75:20">error_report</name><argument_list pos:start="75:21" pos:end="75:55">(<argument pos:start="75:22" pos:end="75:54"><expr pos:start="75:22" pos:end="75:54"><literal type="string" pos:start="75:22" pos:end="75:54">"vfio: hot reset info failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="77:9" pos:end="77:24">goto <name pos:start="77:14" pos:end="77:23">out_single</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:66"><expr pos:start="83:5" pos:end="83:65"><call pos:start="83:5" pos:end="83:65"><name pos:start="83:5" pos:end="83:44">trace_vfio_pci_hot_reset_has_dep_devices</name><argument_list pos:start="83:45" pos:end="83:65">(<argument pos:start="83:46" pos:end="83:64"><expr pos:start="83:46" pos:end="83:64"><name pos:start="83:46" pos:end="83:64"><name pos:start="83:46" pos:end="83:49">vdev</name><operator pos:start="83:50" pos:end="83:51">-&gt;</operator><name pos:start="83:52" pos:end="83:59">vbasedev</name><operator pos:start="83:60" pos:end="83:60">.</operator><name pos:start="83:61" pos:end="83:64">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:53">/* Verify that we have all the groups required */</comment>

    <for pos:start="89:5" pos:end="189:5">for <control pos:start="89:9" pos:end="89:37">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:32"><expr pos:start="89:17" pos:end="89:31"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <name pos:start="89:21" pos:end="89:31"><name pos:start="89:21" pos:end="89:24">info</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:31">count</name></name></expr>;</condition> <incr pos:start="89:34" pos:end="89:36"><expr pos:start="89:34" pos:end="89:36"><name pos:start="89:34" pos:end="89:34">i</name><operator pos:start="89:35" pos:end="89:36">++</operator></expr></incr>)</control> <block pos:start="89:39" pos:end="189:5">{<block_content pos:start="91:9" pos:end="187:9">

        <decl_stmt pos:start="91:9" pos:end="91:34"><decl pos:start="91:9" pos:end="91:33"><type pos:start="91:9" pos:end="91:28"><name pos:start="91:9" pos:end="91:28">PCIHostDeviceAddress</name></type> <name pos:start="91:30" pos:end="91:33">host</name></decl>;</decl_stmt>

        <decl_stmt pos:start="93:9" pos:end="93:27"><decl pos:start="93:9" pos:end="93:26"><type pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:21">VFIOPCIDevice</name> <modifier pos:start="93:23" pos:end="93:23">*</modifier></type><name pos:start="93:24" pos:end="93:26">tmp</name></decl>;</decl_stmt>

        <decl_stmt pos:start="95:9" pos:end="95:34"><decl pos:start="95:9" pos:end="95:33"><type pos:start="95:9" pos:end="95:20"><name pos:start="95:9" pos:end="95:18">VFIODevice</name> <modifier pos:start="95:20" pos:end="95:20">*</modifier></type><name pos:start="95:21" pos:end="95:33">vbasedev_iter</name></decl>;</decl_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:41"><expr pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:12">host</name><operator pos:start="99:13" pos:end="99:13">.</operator><name pos:start="99:14" pos:end="99:19">domain</name></name> <operator pos:start="99:21" pos:end="99:21">=</operator> <name pos:start="99:23" pos:end="99:32"><name pos:start="99:23" pos:end="99:29">devices</name><index pos:start="99:30" pos:end="99:32">[<expr pos:start="99:31" pos:end="99:31"><name pos:start="99:31" pos:end="99:31">i</name></expr>]</index></name><operator pos:start="99:33" pos:end="99:33">.</operator><name pos:start="99:34" pos:end="99:40">segment</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:34"><expr pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:16"><name pos:start="101:9" pos:end="101:12">host</name><operator pos:start="101:13" pos:end="101:13">.</operator><name pos:start="101:14" pos:end="101:16">bus</name></name> <operator pos:start="101:18" pos:end="101:18">=</operator> <name pos:start="101:20" pos:end="101:29"><name pos:start="101:20" pos:end="101:26">devices</name><index pos:start="101:27" pos:end="101:29">[<expr pos:start="101:28" pos:end="101:28"><name pos:start="101:28" pos:end="101:28">i</name></expr>]</index></name><operator pos:start="101:30" pos:end="101:30">.</operator><name pos:start="101:31" pos:end="101:33">bus</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:47"><expr pos:start="103:9" pos:end="103:46"><name pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:12">host</name><operator pos:start="103:13" pos:end="103:13">.</operator><name pos:start="103:14" pos:end="103:17">slot</name></name> <operator pos:start="103:19" pos:end="103:19">=</operator> <call pos:start="103:21" pos:end="103:46"><name pos:start="103:21" pos:end="103:28">PCI_SLOT</name><argument_list pos:start="103:29" pos:end="103:46">(<argument pos:start="103:30" pos:end="103:45"><expr pos:start="103:30" pos:end="103:45"><name pos:start="103:30" pos:end="103:39"><name pos:start="103:30" pos:end="103:36">devices</name><index pos:start="103:37" pos:end="103:39">[<expr pos:start="103:38" pos:end="103:38"><name pos:start="103:38" pos:end="103:38">i</name></expr>]</index></name><operator pos:start="103:40" pos:end="103:40">.</operator><name pos:start="103:41" pos:end="103:45">devfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:51"><expr pos:start="105:9" pos:end="105:50"><name pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:12">host</name><operator pos:start="105:13" pos:end="105:13">.</operator><name pos:start="105:14" pos:end="105:21">function</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <call pos:start="105:25" pos:end="105:50"><name pos:start="105:25" pos:end="105:32">PCI_FUNC</name><argument_list pos:start="105:33" pos:end="105:50">(<argument pos:start="105:34" pos:end="105:49"><expr pos:start="105:34" pos:end="105:49"><name pos:start="105:34" pos:end="105:43"><name pos:start="105:34" pos:end="105:40">devices</name><index pos:start="105:41" pos:end="105:43">[<expr pos:start="105:42" pos:end="105:42"><name pos:start="105:42" pos:end="105:42">i</name></expr>]</index></name><operator pos:start="105:44" pos:end="105:44">.</operator><name pos:start="105:45" pos:end="105:49">devfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="111:73"><expr pos:start="109:9" pos:end="111:72"><call pos:start="109:9" pos:end="111:72"><name pos:start="109:9" pos:end="109:44">trace_vfio_pci_hot_reset_dep_devices</name><argument_list pos:start="109:45" pos:end="111:72">(<argument pos:start="109:46" pos:end="109:56"><expr pos:start="109:46" pos:end="109:56"><name pos:start="109:46" pos:end="109:56"><name pos:start="109:46" pos:end="109:49">host</name><operator pos:start="109:50" pos:end="109:50">.</operator><name pos:start="109:51" pos:end="109:56">domain</name></name></expr></argument>,

                <argument pos:start="111:17" pos:end="111:24"><expr pos:start="111:17" pos:end="111:24"><name pos:start="111:17" pos:end="111:24"><name pos:start="111:17" pos:end="111:20">host</name><operator pos:start="111:21" pos:end="111:21">.</operator><name pos:start="111:22" pos:end="111:24">bus</name></name></expr></argument>, <argument pos:start="111:27" pos:end="111:35"><expr pos:start="111:27" pos:end="111:35"><name pos:start="111:27" pos:end="111:35"><name pos:start="111:27" pos:end="111:30">host</name><operator pos:start="111:31" pos:end="111:31">.</operator><name pos:start="111:32" pos:end="111:35">slot</name></name></expr></argument>, <argument pos:start="111:38" pos:end="111:50"><expr pos:start="111:38" pos:end="111:50"><name pos:start="111:38" pos:end="111:50"><name pos:start="111:38" pos:end="111:41">host</name><operator pos:start="111:42" pos:end="111:42">.</operator><name pos:start="111:43" pos:end="111:50">function</name></name></expr></argument>, <argument pos:start="111:53" pos:end="111:71"><expr pos:start="111:53" pos:end="111:71"><name pos:start="111:53" pos:end="111:62"><name pos:start="111:53" pos:end="111:59">devices</name><index pos:start="111:60" pos:end="111:62">[<expr pos:start="111:61" pos:end="111:61"><name pos:start="111:61" pos:end="111:61">i</name></expr>]</index></name><operator pos:start="111:63" pos:end="111:63">.</operator><name pos:start="111:64" pos:end="111:71">group_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:52">(<expr pos:start="115:13" pos:end="115:51"><call pos:start="115:13" pos:end="115:51"><name pos:start="115:13" pos:end="115:31">vfio_pci_host_match</name><argument_list pos:start="115:32" pos:end="115:51">(<argument pos:start="115:33" pos:end="115:37"><expr pos:start="115:33" pos:end="115:37"><operator pos:start="115:33" pos:end="115:33">&amp;</operator><name pos:start="115:34" pos:end="115:37">host</name></expr></argument>, <argument pos:start="115:40" pos:end="115:50"><expr pos:start="115:40" pos:end="115:50"><operator pos:start="115:40" pos:end="115:40">&amp;</operator><name pos:start="115:41" pos:end="115:50"><name pos:start="115:41" pos:end="115:44">vdev</name><operator pos:start="115:45" pos:end="115:46">-&gt;</operator><name pos:start="115:47" pos:end="115:50">host</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:54" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:21">

            <continue pos:start="117:13" pos:end="117:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <macro pos:start="123:9" pos:end="123:52"><name pos:start="123:9" pos:end="123:21">QLIST_FOREACH</name><argument_list pos:start="123:22" pos:end="123:52">(<argument pos:start="123:23" pos:end="123:27">group</argument>, <argument pos:start="123:30" pos:end="123:45">&amp;vfio_group_list</argument>, <argument pos:start="123:48" pos:end="123:51">next</argument>)</argument_list></macro> <block pos:start="123:54" pos:end="131:9">{<block_content pos:start="125:13" pos:end="129:13">

            <if_stmt pos:start="125:13" pos:end="129:13"><if pos:start="125:13" pos:end="129:13">if <condition pos:start="125:16" pos:end="125:54">(<expr pos:start="125:17" pos:end="125:53"><name pos:start="125:17" pos:end="125:30"><name pos:start="125:17" pos:end="125:21">group</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:30">groupid</name></name> <operator pos:start="125:32" pos:end="125:33">==</operator> <name pos:start="125:35" pos:end="125:44"><name pos:start="125:35" pos:end="125:41">devices</name><index pos:start="125:42" pos:end="125:44">[<expr pos:start="125:43" pos:end="125:43"><name pos:start="125:43" pos:end="125:43">i</name></expr>]</index></name><operator pos:start="125:45" pos:end="125:45">.</operator><name pos:start="125:46" pos:end="125:53">group_id</name></expr>)</condition> <block pos:start="125:56" pos:end="129:13">{<block_content pos:start="127:17" pos:end="127:22">

                <break pos:start="127:17" pos:end="127:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>



        <if_stmt pos:start="135:9" pos:end="151:9"><if pos:start="135:9" pos:end="151:9">if <condition pos:start="135:12" pos:end="135:19">(<expr pos:start="135:13" pos:end="135:18"><operator pos:start="135:13" pos:end="135:13">!</operator><name pos:start="135:14" pos:end="135:18">group</name></expr>)</condition> <block pos:start="135:21" pos:end="151:9">{<block_content pos:start="137:13" pos:end="149:21">

            <if_stmt pos:start="137:13" pos:end="145:13"><if pos:start="137:13" pos:end="145:13">if <condition pos:start="137:16" pos:end="137:36">(<expr pos:start="137:17" pos:end="137:35"><operator pos:start="137:17" pos:end="137:17">!</operator><name pos:start="137:18" pos:end="137:35"><name pos:start="137:18" pos:end="137:21">vdev</name><operator pos:start="137:22" pos:end="137:23">-&gt;</operator><name pos:start="137:24" pos:end="137:35">has_pm_reset</name></name></expr>)</condition> <block pos:start="137:38" pos:end="145:13">{<block_content pos:start="139:17" pos:end="143:71">

                <expr_stmt pos:start="139:17" pos:end="143:71"><expr pos:start="139:17" pos:end="143:70"><call pos:start="139:17" pos:end="143:70"><name pos:start="139:17" pos:end="139:28">error_report</name><argument_list pos:start="139:29" pos:end="143:70">(<argument pos:start="139:30" pos:end="141:70"><expr pos:start="139:30" pos:end="141:70"><literal type="string" pos:start="139:30" pos:end="139:61">"vfio: Cannot reset device %s, "</literal>

                             <literal type="string" pos:start="141:30" pos:end="141:70">"depends on group %d which is not owned."</literal></expr></argument>,

                             <argument pos:start="143:30" pos:end="143:48"><expr pos:start="143:30" pos:end="143:48"><name pos:start="143:30" pos:end="143:48"><name pos:start="143:30" pos:end="143:33">vdev</name><operator pos:start="143:34" pos:end="143:35">-&gt;</operator><name pos:start="143:36" pos:end="143:43">vbasedev</name><operator pos:start="143:44" pos:end="143:44">.</operator><name pos:start="143:45" pos:end="143:48">name</name></name></expr></argument>, <argument pos:start="143:51" pos:end="143:69"><expr pos:start="143:51" pos:end="143:69"><name pos:start="143:51" pos:end="143:60"><name pos:start="143:51" pos:end="143:57">devices</name><index pos:start="143:58" pos:end="143:60">[<expr pos:start="143:59" pos:end="143:59"><name pos:start="143:59" pos:end="143:59">i</name></expr>]</index></name><operator pos:start="143:61" pos:end="143:61">.</operator><name pos:start="143:62" pos:end="143:69">group_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:25"><expr pos:start="147:13" pos:end="147:24"><name pos:start="147:13" pos:end="147:15">ret</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <operator pos:start="147:19" pos:end="147:19">-</operator><name pos:start="147:20" pos:end="147:24">EPERM</name></expr>;</expr_stmt>

            <goto pos:start="149:13" pos:end="149:21">goto <name pos:start="149:18" pos:end="149:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="155:9" pos:end="155:68">/* Prep dependent devices for reset and clear our marker. */</comment>

        <macro pos:start="157:9" pos:end="157:63"><name pos:start="157:9" pos:end="157:21">QLIST_FOREACH</name><argument_list pos:start="157:22" pos:end="157:63">(<argument pos:start="157:23" pos:end="157:35">vbasedev_iter</argument>, <argument pos:start="157:38" pos:end="157:56">&amp;group-&gt;device_list</argument>, <argument pos:start="157:59" pos:end="157:62">next</argument>)</argument_list></macro> <block pos:start="157:65" pos:end="187:9">{<block_content pos:start="159:13" pos:end="185:13">

            <if_stmt pos:start="159:13" pos:end="163:13"><if pos:start="159:13" pos:end="163:13">if <condition pos:start="159:16" pos:end="159:60">(<expr pos:start="159:17" pos:end="159:59"><name pos:start="159:17" pos:end="159:35"><name pos:start="159:17" pos:end="159:29">vbasedev_iter</name><operator pos:start="159:30" pos:end="159:31">-&gt;</operator><name pos:start="159:32" pos:end="159:35">type</name></name> <operator pos:start="159:37" pos:end="159:38">!=</operator> <name pos:start="159:40" pos:end="159:59">VFIO_DEVICE_TYPE_PCI</name></expr>)</condition> <block pos:start="159:62" pos:end="163:13">{<block_content pos:start="161:17" pos:end="161:25">

                <continue pos:start="161:17" pos:end="161:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:71"><expr pos:start="165:13" pos:end="165:70"><name pos:start="165:13" pos:end="165:15">tmp</name> <operator pos:start="165:17" pos:end="165:17">=</operator> <call pos:start="165:19" pos:end="165:70"><name pos:start="165:19" pos:end="165:30">container_of</name><argument_list pos:start="165:31" pos:end="165:70">(<argument pos:start="165:32" pos:end="165:44"><expr pos:start="165:32" pos:end="165:44"><name pos:start="165:32" pos:end="165:44">vbasedev_iter</name></expr></argument>, <argument pos:start="165:47" pos:end="165:59"><expr pos:start="165:47" pos:end="165:59"><name pos:start="165:47" pos:end="165:59">VFIOPCIDevice</name></expr></argument>, <argument pos:start="165:62" pos:end="165:69"><expr pos:start="165:62" pos:end="165:69"><name pos:start="165:62" pos:end="165:69">vbasedev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="185:13"><if pos:start="167:13" pos:end="185:13">if <condition pos:start="167:16" pos:end="167:55">(<expr pos:start="167:17" pos:end="167:54"><call pos:start="167:17" pos:end="167:54"><name pos:start="167:17" pos:end="167:35">vfio_pci_host_match</name><argument_list pos:start="167:36" pos:end="167:54">(<argument pos:start="167:37" pos:end="167:41"><expr pos:start="167:37" pos:end="167:41"><operator pos:start="167:37" pos:end="167:37">&amp;</operator><name pos:start="167:38" pos:end="167:41">host</name></expr></argument>, <argument pos:start="167:44" pos:end="167:53"><expr pos:start="167:44" pos:end="167:53"><operator pos:start="167:44" pos:end="167:44">&amp;</operator><name pos:start="167:45" pos:end="167:53"><name pos:start="167:45" pos:end="167:47">tmp</name><operator pos:start="167:48" pos:end="167:49">-&gt;</operator><name pos:start="167:50" pos:end="167:53">host</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:57" pos:end="185:13">{<block_content pos:start="169:17" pos:end="183:22">

                <if_stmt pos:start="169:17" pos:end="175:17"><if pos:start="169:17" pos:end="175:17">if <condition pos:start="169:20" pos:end="169:27">(<expr pos:start="169:21" pos:end="169:26"><name pos:start="169:21" pos:end="169:26">single</name></expr>)</condition> <block pos:start="169:29" pos:end="175:17">{<block_content pos:start="171:21" pos:end="173:36">

                    <expr_stmt pos:start="171:21" pos:end="171:34"><expr pos:start="171:21" pos:end="171:33"><name pos:start="171:21" pos:end="171:23">ret</name> <operator pos:start="171:25" pos:end="171:25">=</operator> <operator pos:start="171:27" pos:end="171:27">-</operator><name pos:start="171:28" pos:end="171:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="173:21" pos:end="173:36">goto <name pos:start="173:26" pos:end="173:35">out_single</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:40"><expr pos:start="177:17" pos:end="177:39"><call pos:start="177:17" pos:end="177:39"><name pos:start="177:17" pos:end="177:34">vfio_pci_pre_reset</name><argument_list pos:start="177:35" pos:end="177:39">(<argument pos:start="177:36" pos:end="177:38"><expr pos:start="177:36" pos:end="177:38"><name pos:start="177:36" pos:end="177:38">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:50"><expr pos:start="179:17" pos:end="179:49"><name pos:start="179:17" pos:end="179:41"><name pos:start="179:17" pos:end="179:19">tmp</name><operator pos:start="179:20" pos:end="179:21">-&gt;</operator><name pos:start="179:22" pos:end="179:29">vbasedev</name><operator pos:start="179:30" pos:end="179:30">.</operator><name pos:start="179:31" pos:end="179:41">needs_reset</name></name> <operator pos:start="179:43" pos:end="179:43">=</operator> <name pos:start="179:45" pos:end="179:49">false</name></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:29"><expr pos:start="181:17" pos:end="181:28"><name pos:start="181:17" pos:end="181:21">multi</name> <operator pos:start="181:23" pos:end="181:23">=</operator> <name pos:start="181:25" pos:end="181:28">true</name></expr>;</expr_stmt>

                <break pos:start="183:17" pos:end="183:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

    </block_content>}</block></for>



    <if_stmt pos:start="193:5" pos:end="199:5"><if pos:start="193:5" pos:end="199:5">if <condition pos:start="193:8" pos:end="193:26">(<expr pos:start="193:9" pos:end="193:25"><operator pos:start="193:9" pos:end="193:9">!</operator><name pos:start="193:10" pos:end="193:15">single</name> <operator pos:start="193:17" pos:end="193:18">&amp;&amp;</operator> <operator pos:start="193:20" pos:end="193:20">!</operator><name pos:start="193:21" pos:end="193:25">multi</name></expr>)</condition> <block pos:start="193:28" pos:end="199:5">{<block_content pos:start="195:9" pos:end="197:24">

        <expr_stmt pos:start="195:9" pos:end="195:22"><expr pos:start="195:9" pos:end="195:21"><name pos:start="195:9" pos:end="195:11">ret</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <operator pos:start="195:15" pos:end="195:15">-</operator><name pos:start="195:16" pos:end="195:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="197:9" pos:end="197:24">goto <name pos:start="197:14" pos:end="197:23">out_single</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="203:5" pos:end="203:56">/* Determine how many group fds need to be passed */</comment>

    <expr_stmt pos:start="205:5" pos:end="205:14"><expr pos:start="205:5" pos:end="205:13"><name pos:start="205:5" pos:end="205:9">count</name> <operator pos:start="205:11" pos:end="205:11">=</operator> <literal type="number" pos:start="205:13" pos:end="205:13">0</literal></expr>;</expr_stmt>

    <macro pos:start="207:5" pos:end="207:48"><name pos:start="207:5" pos:end="207:17">QLIST_FOREACH</name><argument_list pos:start="207:18" pos:end="207:48">(<argument pos:start="207:19" pos:end="207:23">group</argument>, <argument pos:start="207:26" pos:end="207:41">&amp;vfio_group_list</argument>, <argument pos:start="207:44" pos:end="207:47">next</argument>)</argument_list></macro> <block pos:start="207:50" pos:end="221:5">{<block_content pos:start="209:9" pos:end="219:9">

        <for pos:start="209:9" pos:end="219:9">for <control pos:start="209:13" pos:end="209:41">(<init pos:start="209:14" pos:end="209:19"><expr pos:start="209:14" pos:end="209:18"><name pos:start="209:14" pos:end="209:14">i</name> <operator pos:start="209:16" pos:end="209:16">=</operator> <literal type="number" pos:start="209:18" pos:end="209:18">0</literal></expr>;</init> <condition pos:start="209:21" pos:end="209:36"><expr pos:start="209:21" pos:end="209:35"><name pos:start="209:21" pos:end="209:21">i</name> <operator pos:start="209:23" pos:end="209:23">&lt;</operator> <name pos:start="209:25" pos:end="209:35"><name pos:start="209:25" pos:end="209:28">info</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:35">count</name></name></expr>;</condition> <incr pos:start="209:38" pos:end="209:40"><expr pos:start="209:38" pos:end="209:40"><name pos:start="209:38" pos:end="209:38">i</name><operator pos:start="209:39" pos:end="209:40">++</operator></expr></incr>)</control> <block pos:start="209:43" pos:end="219:9">{<block_content pos:start="211:13" pos:end="217:13">

            <if_stmt pos:start="211:13" pos:end="217:13"><if pos:start="211:13" pos:end="217:13">if <condition pos:start="211:16" pos:end="211:54">(<expr pos:start="211:17" pos:end="211:53"><name pos:start="211:17" pos:end="211:30"><name pos:start="211:17" pos:end="211:21">group</name><operator pos:start="211:22" pos:end="211:23">-&gt;</operator><name pos:start="211:24" pos:end="211:30">groupid</name></name> <operator pos:start="211:32" pos:end="211:33">==</operator> <name pos:start="211:35" pos:end="211:44"><name pos:start="211:35" pos:end="211:41">devices</name><index pos:start="211:42" pos:end="211:44">[<expr pos:start="211:43" pos:end="211:43"><name pos:start="211:43" pos:end="211:43">i</name></expr>]</index></name><operator pos:start="211:45" pos:end="211:45">.</operator><name pos:start="211:46" pos:end="211:53">group_id</name></expr>)</condition> <block pos:start="211:56" pos:end="217:13">{<block_content pos:start="213:17" pos:end="215:22">

                <expr_stmt pos:start="213:17" pos:end="213:24"><expr pos:start="213:17" pos:end="213:23"><name pos:start="213:17" pos:end="213:21">count</name><operator pos:start="213:22" pos:end="213:23">++</operator></expr>;</expr_stmt>

                <break pos:start="215:17" pos:end="215:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block>



    <expr_stmt pos:start="225:5" pos:end="225:63"><expr pos:start="225:5" pos:end="225:62"><name pos:start="225:5" pos:end="225:9">reset</name> <operator pos:start="225:11" pos:end="225:11">=</operator> <call pos:start="225:13" pos:end="225:62"><name pos:start="225:13" pos:end="225:21">g_malloc0</name><argument_list pos:start="225:22" pos:end="225:62">(<argument pos:start="225:23" pos:end="225:61"><expr pos:start="225:23" pos:end="225:61"><sizeof pos:start="225:23" pos:end="225:36">sizeof<argument_list pos:start="225:29" pos:end="225:36">(<argument pos:start="225:30" pos:end="225:35"><expr pos:start="225:30" pos:end="225:35"><operator pos:start="225:30" pos:end="225:30">*</operator><name pos:start="225:31" pos:end="225:35">reset</name></expr></argument>)</argument_list></sizeof> <operator pos:start="225:38" pos:end="225:38">+</operator> <operator pos:start="225:40" pos:end="225:40">(</operator><name pos:start="225:41" pos:end="225:45">count</name> <operator pos:start="225:47" pos:end="225:47">*</operator> <sizeof pos:start="225:49" pos:end="225:60">sizeof<argument_list pos:start="225:55" pos:end="225:60">(<argument pos:start="225:56" pos:end="225:59"><expr pos:start="225:56" pos:end="225:59"><operator pos:start="225:56" pos:end="225:56">*</operator><name pos:start="225:57" pos:end="225:59">fds</name></expr></argument>)</argument_list></sizeof><operator pos:start="225:61" pos:end="225:61">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:59"><expr pos:start="227:5" pos:end="227:58"><name pos:start="227:5" pos:end="227:16"><name pos:start="227:5" pos:end="227:9">reset</name><operator pos:start="227:10" pos:end="227:11">-&gt;</operator><name pos:start="227:12" pos:end="227:16">argsz</name></name> <operator pos:start="227:18" pos:end="227:18">=</operator> <sizeof pos:start="227:20" pos:end="227:33">sizeof<argument_list pos:start="227:26" pos:end="227:33">(<argument pos:start="227:27" pos:end="227:32"><expr pos:start="227:27" pos:end="227:32"><operator pos:start="227:27" pos:end="227:27">*</operator><name pos:start="227:28" pos:end="227:32">reset</name></expr></argument>)</argument_list></sizeof> <operator pos:start="227:35" pos:end="227:35">+</operator> <operator pos:start="227:37" pos:end="227:37">(</operator><name pos:start="227:38" pos:end="227:42">count</name> <operator pos:start="227:44" pos:end="227:44">*</operator> <sizeof pos:start="227:46" pos:end="227:57">sizeof<argument_list pos:start="227:52" pos:end="227:57">(<argument pos:start="227:53" pos:end="227:56"><expr pos:start="227:53" pos:end="227:56"><operator pos:start="227:53" pos:end="227:53">*</operator><name pos:start="227:54" pos:end="227:56">fds</name></expr></argument>)</argument_list></sizeof><operator pos:start="227:58" pos:end="227:58">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:31"><expr pos:start="229:5" pos:end="229:30"><name pos:start="229:5" pos:end="229:7">fds</name> <operator pos:start="229:9" pos:end="229:9">=</operator> <operator pos:start="229:11" pos:end="229:11">&amp;</operator><name pos:start="229:12" pos:end="229:30"><name pos:start="229:12" pos:end="229:16">reset</name><operator pos:start="229:17" pos:end="229:18">-&gt;</operator><name pos:start="229:19" pos:end="229:27">group_fds</name><index pos:start="229:28" pos:end="229:30">[<expr pos:start="229:29" pos:end="229:29"><literal type="number" pos:start="229:29" pos:end="229:29">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="233:5" pos:end="233:27">/* Fill in group fds */</comment>

    <macro pos:start="235:5" pos:end="235:48"><name pos:start="235:5" pos:end="235:17">QLIST_FOREACH</name><argument_list pos:start="235:18" pos:end="235:48">(<argument pos:start="235:19" pos:end="235:23">group</argument>, <argument pos:start="235:26" pos:end="235:41">&amp;vfio_group_list</argument>, <argument pos:start="235:44" pos:end="235:47">next</argument>)</argument_list></macro> <block pos:start="235:50" pos:end="249:5">{<block_content pos:start="237:9" pos:end="247:9">

        <for pos:start="237:9" pos:end="247:9">for <control pos:start="237:13" pos:end="237:41">(<init pos:start="237:14" pos:end="237:19"><expr pos:start="237:14" pos:end="237:18"><name pos:start="237:14" pos:end="237:14">i</name> <operator pos:start="237:16" pos:end="237:16">=</operator> <literal type="number" pos:start="237:18" pos:end="237:18">0</literal></expr>;</init> <condition pos:start="237:21" pos:end="237:36"><expr pos:start="237:21" pos:end="237:35"><name pos:start="237:21" pos:end="237:21">i</name> <operator pos:start="237:23" pos:end="237:23">&lt;</operator> <name pos:start="237:25" pos:end="237:35"><name pos:start="237:25" pos:end="237:28">info</name><operator pos:start="237:29" pos:end="237:30">-&gt;</operator><name pos:start="237:31" pos:end="237:35">count</name></name></expr>;</condition> <incr pos:start="237:38" pos:end="237:40"><expr pos:start="237:38" pos:end="237:40"><name pos:start="237:38" pos:end="237:38">i</name><operator pos:start="237:39" pos:end="237:40">++</operator></expr></incr>)</control> <block pos:start="237:43" pos:end="247:9">{<block_content pos:start="239:13" pos:end="245:13">

            <if_stmt pos:start="239:13" pos:end="245:13"><if pos:start="239:13" pos:end="245:13">if <condition pos:start="239:16" pos:end="239:54">(<expr pos:start="239:17" pos:end="239:53"><name pos:start="239:17" pos:end="239:30"><name pos:start="239:17" pos:end="239:21">group</name><operator pos:start="239:22" pos:end="239:23">-&gt;</operator><name pos:start="239:24" pos:end="239:30">groupid</name></name> <operator pos:start="239:32" pos:end="239:33">==</operator> <name pos:start="239:35" pos:end="239:44"><name pos:start="239:35" pos:end="239:41">devices</name><index pos:start="239:42" pos:end="239:44">[<expr pos:start="239:43" pos:end="239:43"><name pos:start="239:43" pos:end="239:43">i</name></expr>]</index></name><operator pos:start="239:45" pos:end="239:45">.</operator><name pos:start="239:46" pos:end="239:53">group_id</name></expr>)</condition> <block pos:start="239:56" pos:end="245:13">{<block_content pos:start="241:17" pos:end="243:22">

                <expr_stmt pos:start="241:17" pos:end="241:48"><expr pos:start="241:17" pos:end="241:47"><name pos:start="241:17" pos:end="241:35"><name pos:start="241:17" pos:end="241:19">fds</name><index pos:start="241:20" pos:end="241:35">[<expr pos:start="241:21" pos:end="241:34"><name pos:start="241:21" pos:end="241:32"><name pos:start="241:21" pos:end="241:25">reset</name><operator pos:start="241:26" pos:end="241:27">-&gt;</operator><name pos:start="241:28" pos:end="241:32">count</name></name><operator pos:start="241:33" pos:end="241:34">++</operator></expr>]</index></name> <operator pos:start="241:37" pos:end="241:37">=</operator> <name pos:start="241:39" pos:end="241:47"><name pos:start="241:39" pos:end="241:43">group</name><operator pos:start="241:44" pos:end="241:45">-&gt;</operator><name pos:start="241:46" pos:end="241:47">fd</name></name></expr>;</expr_stmt>

                <break pos:start="243:17" pos:end="243:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block>



    <comment type="block" pos:start="253:5" pos:end="253:20">/* Bus reset! */</comment>

    <expr_stmt pos:start="255:5" pos:end="255:69"><expr pos:start="255:5" pos:end="255:68"><name pos:start="255:5" pos:end="255:7">ret</name> <operator pos:start="255:9" pos:end="255:9">=</operator> <call pos:start="255:11" pos:end="255:68"><name pos:start="255:11" pos:end="255:15">ioctl</name><argument_list pos:start="255:16" pos:end="255:68">(<argument pos:start="255:17" pos:end="255:33"><expr pos:start="255:17" pos:end="255:33"><name pos:start="255:17" pos:end="255:33"><name pos:start="255:17" pos:end="255:20">vdev</name><operator pos:start="255:21" pos:end="255:22">-&gt;</operator><name pos:start="255:23" pos:end="255:30">vbasedev</name><operator pos:start="255:31" pos:end="255:31">.</operator><name pos:start="255:32" pos:end="255:33">fd</name></name></expr></argument>, <argument pos:start="255:36" pos:end="255:60"><expr pos:start="255:36" pos:end="255:60"><name pos:start="255:36" pos:end="255:60">VFIO_DEVICE_PCI_HOT_RESET</name></expr></argument>, <argument pos:start="255:63" pos:end="255:67"><expr pos:start="255:63" pos:end="255:67"><name pos:start="255:63" pos:end="255:67">reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:18"><expr pos:start="257:5" pos:end="257:17"><call pos:start="257:5" pos:end="257:17"><name pos:start="257:5" pos:end="257:10">g_free</name><argument_list pos:start="257:11" pos:end="257:17">(<argument pos:start="257:12" pos:end="257:16"><expr pos:start="257:12" pos:end="257:16"><name pos:start="257:12" pos:end="257:16">reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="261:5" pos:end="263:60"><expr pos:start="261:5" pos:end="263:59"><call pos:start="261:5" pos:end="263:59"><name pos:start="261:5" pos:end="261:35">trace_vfio_pci_hot_reset_result</name><argument_list pos:start="261:36" pos:end="263:59">(<argument pos:start="261:37" pos:end="261:55"><expr pos:start="261:37" pos:end="261:55"><name pos:start="261:37" pos:end="261:55"><name pos:start="261:37" pos:end="261:40">vdev</name><operator pos:start="261:41" pos:end="261:42">-&gt;</operator><name pos:start="261:43" pos:end="261:50">vbasedev</name><operator pos:start="261:51" pos:end="261:51">.</operator><name pos:start="261:52" pos:end="261:55">name</name></name></expr></argument>,

                                    <argument pos:start="263:37" pos:end="263:58"><expr pos:start="263:37" pos:end="263:58"><ternary pos:start="263:37" pos:end="263:58"><condition pos:start="263:37" pos:end="263:41"><expr pos:start="263:37" pos:end="263:39"><name pos:start="263:37" pos:end="263:39">ret</name></expr> ?</condition><then pos:start="263:43" pos:end="263:46"> <expr pos:start="263:43" pos:end="263:46"><literal type="string" pos:start="263:43" pos:end="263:46">"%m"</literal></expr> </then><else pos:start="263:48" pos:end="263:58">: <expr pos:start="263:50" pos:end="263:58"><literal type="string" pos:start="263:50" pos:end="263:58">"Success"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="267:1" pos:end="267:4"><name pos:start="267:1" pos:end="267:3">out</name>:</label>

    <comment type="block" pos:start="269:5" pos:end="269:44">/* Re-enable INTx on affected devices */</comment>

    <for pos:start="271:5" pos:end="339:5">for <control pos:start="271:9" pos:end="271:37">(<init pos:start="271:10" pos:end="271:15"><expr pos:start="271:10" pos:end="271:14"><name pos:start="271:10" pos:end="271:10">i</name> <operator pos:start="271:12" pos:end="271:12">=</operator> <literal type="number" pos:start="271:14" pos:end="271:14">0</literal></expr>;</init> <condition pos:start="271:17" pos:end="271:32"><expr pos:start="271:17" pos:end="271:31"><name pos:start="271:17" pos:end="271:17">i</name> <operator pos:start="271:19" pos:end="271:19">&lt;</operator> <name pos:start="271:21" pos:end="271:31"><name pos:start="271:21" pos:end="271:24">info</name><operator pos:start="271:25" pos:end="271:26">-&gt;</operator><name pos:start="271:27" pos:end="271:31">count</name></name></expr>;</condition> <incr pos:start="271:34" pos:end="271:36"><expr pos:start="271:34" pos:end="271:36"><name pos:start="271:34" pos:end="271:34">i</name><operator pos:start="271:35" pos:end="271:36">++</operator></expr></incr>)</control> <block pos:start="271:39" pos:end="339:5">{<block_content pos:start="273:9" pos:end="337:9">

        <decl_stmt pos:start="273:9" pos:end="273:34"><decl pos:start="273:9" pos:end="273:33"><type pos:start="273:9" pos:end="273:28"><name pos:start="273:9" pos:end="273:28">PCIHostDeviceAddress</name></type> <name pos:start="273:30" pos:end="273:33">host</name></decl>;</decl_stmt>

        <decl_stmt pos:start="275:9" pos:end="275:27"><decl pos:start="275:9" pos:end="275:26"><type pos:start="275:9" pos:end="275:23"><name pos:start="275:9" pos:end="275:21">VFIOPCIDevice</name> <modifier pos:start="275:23" pos:end="275:23">*</modifier></type><name pos:start="275:24" pos:end="275:26">tmp</name></decl>;</decl_stmt>

        <decl_stmt pos:start="277:9" pos:end="277:34"><decl pos:start="277:9" pos:end="277:33"><type pos:start="277:9" pos:end="277:20"><name pos:start="277:9" pos:end="277:18">VFIODevice</name> <modifier pos:start="277:20" pos:end="277:20">*</modifier></type><name pos:start="277:21" pos:end="277:33">vbasedev_iter</name></decl>;</decl_stmt>



        <expr_stmt pos:start="281:9" pos:end="281:41"><expr pos:start="281:9" pos:end="281:40"><name pos:start="281:9" pos:end="281:19"><name pos:start="281:9" pos:end="281:12">host</name><operator pos:start="281:13" pos:end="281:13">.</operator><name pos:start="281:14" pos:end="281:19">domain</name></name> <operator pos:start="281:21" pos:end="281:21">=</operator> <name pos:start="281:23" pos:end="281:32"><name pos:start="281:23" pos:end="281:29">devices</name><index pos:start="281:30" pos:end="281:32">[<expr pos:start="281:31" pos:end="281:31"><name pos:start="281:31" pos:end="281:31">i</name></expr>]</index></name><operator pos:start="281:33" pos:end="281:33">.</operator><name pos:start="281:34" pos:end="281:40">segment</name></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:34"><expr pos:start="283:9" pos:end="283:33"><name pos:start="283:9" pos:end="283:16"><name pos:start="283:9" pos:end="283:12">host</name><operator pos:start="283:13" pos:end="283:13">.</operator><name pos:start="283:14" pos:end="283:16">bus</name></name> <operator pos:start="283:18" pos:end="283:18">=</operator> <name pos:start="283:20" pos:end="283:29"><name pos:start="283:20" pos:end="283:26">devices</name><index pos:start="283:27" pos:end="283:29">[<expr pos:start="283:28" pos:end="283:28"><name pos:start="283:28" pos:end="283:28">i</name></expr>]</index></name><operator pos:start="283:30" pos:end="283:30">.</operator><name pos:start="283:31" pos:end="283:33">bus</name></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:47"><expr pos:start="285:9" pos:end="285:46"><name pos:start="285:9" pos:end="285:17"><name pos:start="285:9" pos:end="285:12">host</name><operator pos:start="285:13" pos:end="285:13">.</operator><name pos:start="285:14" pos:end="285:17">slot</name></name> <operator pos:start="285:19" pos:end="285:19">=</operator> <call pos:start="285:21" pos:end="285:46"><name pos:start="285:21" pos:end="285:28">PCI_SLOT</name><argument_list pos:start="285:29" pos:end="285:46">(<argument pos:start="285:30" pos:end="285:45"><expr pos:start="285:30" pos:end="285:45"><name pos:start="285:30" pos:end="285:39"><name pos:start="285:30" pos:end="285:36">devices</name><index pos:start="285:37" pos:end="285:39">[<expr pos:start="285:38" pos:end="285:38"><name pos:start="285:38" pos:end="285:38">i</name></expr>]</index></name><operator pos:start="285:40" pos:end="285:40">.</operator><name pos:start="285:41" pos:end="285:45">devfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="287:9" pos:end="287:51"><expr pos:start="287:9" pos:end="287:50"><name pos:start="287:9" pos:end="287:21"><name pos:start="287:9" pos:end="287:12">host</name><operator pos:start="287:13" pos:end="287:13">.</operator><name pos:start="287:14" pos:end="287:21">function</name></name> <operator pos:start="287:23" pos:end="287:23">=</operator> <call pos:start="287:25" pos:end="287:50"><name pos:start="287:25" pos:end="287:32">PCI_FUNC</name><argument_list pos:start="287:33" pos:end="287:50">(<argument pos:start="287:34" pos:end="287:49"><expr pos:start="287:34" pos:end="287:49"><name pos:start="287:34" pos:end="287:43"><name pos:start="287:34" pos:end="287:40">devices</name><index pos:start="287:41" pos:end="287:43">[<expr pos:start="287:42" pos:end="287:42"><name pos:start="287:42" pos:end="287:42">i</name></expr>]</index></name><operator pos:start="287:44" pos:end="287:44">.</operator><name pos:start="287:45" pos:end="287:49">devfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="291:9" pos:end="295:9"><if pos:start="291:9" pos:end="295:9">if <condition pos:start="291:12" pos:end="291:52">(<expr pos:start="291:13" pos:end="291:51"><call pos:start="291:13" pos:end="291:51"><name pos:start="291:13" pos:end="291:31">vfio_pci_host_match</name><argument_list pos:start="291:32" pos:end="291:51">(<argument pos:start="291:33" pos:end="291:37"><expr pos:start="291:33" pos:end="291:37"><operator pos:start="291:33" pos:end="291:33">&amp;</operator><name pos:start="291:34" pos:end="291:37">host</name></expr></argument>, <argument pos:start="291:40" pos:end="291:50"><expr pos:start="291:40" pos:end="291:50"><operator pos:start="291:40" pos:end="291:40">&amp;</operator><name pos:start="291:41" pos:end="291:50"><name pos:start="291:41" pos:end="291:44">vdev</name><operator pos:start="291:45" pos:end="291:46">-&gt;</operator><name pos:start="291:47" pos:end="291:50">host</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="291:54" pos:end="295:9">{<block_content pos:start="293:13" pos:end="293:21">

            <continue pos:start="293:13" pos:end="293:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <macro pos:start="299:9" pos:end="299:52"><name pos:start="299:9" pos:end="299:21">QLIST_FOREACH</name><argument_list pos:start="299:22" pos:end="299:52">(<argument pos:start="299:23" pos:end="299:27">group</argument>, <argument pos:start="299:30" pos:end="299:45">&amp;vfio_group_list</argument>, <argument pos:start="299:48" pos:end="299:51">next</argument>)</argument_list></macro> <block pos:start="299:54" pos:end="307:9">{<block_content pos:start="301:13" pos:end="305:13">

            <if_stmt pos:start="301:13" pos:end="305:13"><if pos:start="301:13" pos:end="305:13">if <condition pos:start="301:16" pos:end="301:54">(<expr pos:start="301:17" pos:end="301:53"><name pos:start="301:17" pos:end="301:30"><name pos:start="301:17" pos:end="301:21">group</name><operator pos:start="301:22" pos:end="301:23">-&gt;</operator><name pos:start="301:24" pos:end="301:30">groupid</name></name> <operator pos:start="301:32" pos:end="301:33">==</operator> <name pos:start="301:35" pos:end="301:44"><name pos:start="301:35" pos:end="301:41">devices</name><index pos:start="301:42" pos:end="301:44">[<expr pos:start="301:43" pos:end="301:43"><name pos:start="301:43" pos:end="301:43">i</name></expr>]</index></name><operator pos:start="301:45" pos:end="301:45">.</operator><name pos:start="301:46" pos:end="301:53">group_id</name></expr>)</condition> <block pos:start="301:56" pos:end="305:13">{<block_content pos:start="303:17" pos:end="303:22">

                <break pos:start="303:17" pos:end="303:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>



        <if_stmt pos:start="311:9" pos:end="315:9"><if pos:start="311:9" pos:end="315:9">if <condition pos:start="311:12" pos:end="311:19">(<expr pos:start="311:13" pos:end="311:18"><operator pos:start="311:13" pos:end="311:13">!</operator><name pos:start="311:14" pos:end="311:18">group</name></expr>)</condition> <block pos:start="311:21" pos:end="315:9">{<block_content pos:start="313:13" pos:end="313:18">

            <break pos:start="313:13" pos:end="313:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <macro pos:start="319:9" pos:end="319:63"><name pos:start="319:9" pos:end="319:21">QLIST_FOREACH</name><argument_list pos:start="319:22" pos:end="319:63">(<argument pos:start="319:23" pos:end="319:35">vbasedev_iter</argument>, <argument pos:start="319:38" pos:end="319:56">&amp;group-&gt;device_list</argument>, <argument pos:start="319:59" pos:end="319:62">next</argument>)</argument_list></macro> <block pos:start="319:65" pos:end="337:9">{<block_content pos:start="321:13" pos:end="335:13">

            <if_stmt pos:start="321:13" pos:end="325:13"><if pos:start="321:13" pos:end="325:13">if <condition pos:start="321:16" pos:end="321:60">(<expr pos:start="321:17" pos:end="321:59"><name pos:start="321:17" pos:end="321:35"><name pos:start="321:17" pos:end="321:29">vbasedev_iter</name><operator pos:start="321:30" pos:end="321:31">-&gt;</operator><name pos:start="321:32" pos:end="321:35">type</name></name> <operator pos:start="321:37" pos:end="321:38">!=</operator> <name pos:start="321:40" pos:end="321:59">VFIO_DEVICE_TYPE_PCI</name></expr>)</condition> <block pos:start="321:62" pos:end="325:13">{<block_content pos:start="323:17" pos:end="323:25">

                <continue pos:start="323:17" pos:end="323:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:71"><expr pos:start="327:13" pos:end="327:70"><name pos:start="327:13" pos:end="327:15">tmp</name> <operator pos:start="327:17" pos:end="327:17">=</operator> <call pos:start="327:19" pos:end="327:70"><name pos:start="327:19" pos:end="327:30">container_of</name><argument_list pos:start="327:31" pos:end="327:70">(<argument pos:start="327:32" pos:end="327:44"><expr pos:start="327:32" pos:end="327:44"><name pos:start="327:32" pos:end="327:44">vbasedev_iter</name></expr></argument>, <argument pos:start="327:47" pos:end="327:59"><expr pos:start="327:47" pos:end="327:59"><name pos:start="327:47" pos:end="327:59">VFIOPCIDevice</name></expr></argument>, <argument pos:start="327:62" pos:end="327:69"><expr pos:start="327:62" pos:end="327:69"><name pos:start="327:62" pos:end="327:69">vbasedev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="329:13" pos:end="335:13"><if pos:start="329:13" pos:end="335:13">if <condition pos:start="329:16" pos:end="329:55">(<expr pos:start="329:17" pos:end="329:54"><call pos:start="329:17" pos:end="329:54"><name pos:start="329:17" pos:end="329:35">vfio_pci_host_match</name><argument_list pos:start="329:36" pos:end="329:54">(<argument pos:start="329:37" pos:end="329:41"><expr pos:start="329:37" pos:end="329:41"><operator pos:start="329:37" pos:end="329:37">&amp;</operator><name pos:start="329:38" pos:end="329:41">host</name></expr></argument>, <argument pos:start="329:44" pos:end="329:53"><expr pos:start="329:44" pos:end="329:53"><operator pos:start="329:44" pos:end="329:44">&amp;</operator><name pos:start="329:45" pos:end="329:53"><name pos:start="329:45" pos:end="329:47">tmp</name><operator pos:start="329:48" pos:end="329:49">-&gt;</operator><name pos:start="329:50" pos:end="329:53">host</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="329:57" pos:end="335:13">{<block_content pos:start="331:17" pos:end="333:22">

                <expr_stmt pos:start="331:17" pos:end="331:41"><expr pos:start="331:17" pos:end="331:40"><call pos:start="331:17" pos:end="331:40"><name pos:start="331:17" pos:end="331:35">vfio_pci_post_reset</name><argument_list pos:start="331:36" pos:end="331:40">(<argument pos:start="331:37" pos:end="331:39"><expr pos:start="331:37" pos:end="331:39"><name pos:start="331:37" pos:end="331:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="333:17" pos:end="333:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

    </block_content>}</block></for>

<label pos:start="341:1" pos:end="341:11"><name pos:start="341:1" pos:end="341:10">out_single</name>:</label>

    <expr_stmt pos:start="343:5" pos:end="343:30"><expr pos:start="343:5" pos:end="343:29"><call pos:start="343:5" pos:end="343:29"><name pos:start="343:5" pos:end="343:23">vfio_pci_post_reset</name><argument_list pos:start="343:24" pos:end="343:29">(<argument pos:start="343:25" pos:end="343:28"><expr pos:start="343:25" pos:end="343:28"><name pos:start="343:25" pos:end="343:28">vdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:17"><expr pos:start="345:5" pos:end="345:16"><call pos:start="345:5" pos:end="345:16"><name pos:start="345:5" pos:end="345:10">g_free</name><argument_list pos:start="345:11" pos:end="345:16">(<argument pos:start="345:12" pos:end="345:15"><expr pos:start="345:12" pos:end="345:15"><name pos:start="345:12" pos:end="345:15">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="349:5" pos:end="349:15">return <expr pos:start="349:12" pos:end="349:14"><name pos:start="349:12" pos:end="349:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
