<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23752.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">tgen_brcond</name><parameter_list pos:start="1:24" pos:end="3:71">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:34">TCGContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:46">TCGType</name></type> <name pos:start="1:48" pos:end="1:51">type</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:62"><decl pos:start="1:54" pos:end="1:62"><type pos:start="1:54" pos:end="1:62"><name pos:start="1:54" pos:end="1:60">TCGCond</name></type> <name pos:start="1:62" pos:end="1:62">c</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:33"><decl pos:start="3:25" pos:end="3:33"><type pos:start="3:25" pos:end="3:33"><name pos:start="3:25" pos:end="3:30">TCGReg</name></type> <name pos:start="3:32" pos:end="3:33">r1</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:44"><decl pos:start="3:36" pos:end="3:44"><type pos:start="3:36" pos:end="3:44"><name pos:start="3:36" pos:end="3:41">TCGArg</name></type> <name pos:start="3:43" pos:end="3:44">c2</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:57"><decl pos:start="3:47" pos:end="3:57"><type pos:start="3:47" pos:end="3:57"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:57">c2const</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:70"><decl pos:start="3:60" pos:end="3:70"><type pos:start="3:60" pos:end="3:70"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:70">labelno</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="99:1">{<block_content pos:start="7:5" pos:end="97:32">

    <decl_stmt pos:start="7:5" pos:end="7:11"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">cc</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="91:5"><if pos:start="11:5" pos:end="91:5">if <condition pos:start="11:8" pos:end="11:43">(<expr pos:start="11:9" pos:end="11:42"><name pos:start="11:9" pos:end="11:18">facilities</name> <operator pos:start="11:20" pos:end="11:20">&amp;</operator> <name pos:start="11:22" pos:end="11:42">FACILITY_GEN_INST_EXT</name></expr>)</condition> <block pos:start="11:45" pos:end="91:5">{<block_content pos:start="13:9" pos:end="89:9">

        <decl_stmt pos:start="13:9" pos:end="13:47"><decl pos:start="13:9" pos:end="13:46"><type pos:start="13:9" pos:end="13:12"><name pos:start="13:9" pos:end="13:12">bool</name></type> <name pos:start="13:14" pos:end="13:24">is_unsigned</name> <init pos:start="13:26" pos:end="13:46">= <expr pos:start="13:28" pos:end="13:46"><call pos:start="13:28" pos:end="13:46"><name pos:start="13:28" pos:end="13:43">is_unsigned_cond</name><argument_list pos:start="13:44" pos:end="13:46">(<argument pos:start="13:45" pos:end="13:45"><expr pos:start="13:45" pos:end="13:45"><name pos:start="13:45" pos:end="13:45">c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:22"><decl pos:start="15:9" pos:end="15:21"><type pos:start="15:9" pos:end="15:12"><name pos:start="15:9" pos:end="15:12">bool</name></type> <name pos:start="15:14" pos:end="15:21">in_range</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:23"><decl pos:start="17:9" pos:end="17:22"><type pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:18">S390Opcode</name></type> <name pos:start="17:20" pos:end="17:22">opc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:10">cc</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:37"><name pos:start="21:14" pos:end="21:34">tcg_cond_to_s390_cond</name><index pos:start="21:35" pos:end="21:37">[<expr pos:start="21:36" pos:end="21:36"><name pos:start="21:36" pos:end="21:36">c</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="25:9" pos:end="37:9"><if pos:start="25:9" pos:end="37:9">if <condition pos:start="25:12" pos:end="25:21">(<expr pos:start="25:13" pos:end="25:20"><operator pos:start="25:13" pos:end="25:13">!</operator><name pos:start="25:14" pos:end="25:20">c2const</name></expr>)</condition> <block pos:start="25:23" pos:end="37:9">{<block_content pos:start="27:13" pos:end="35:19">

            <expr_stmt pos:start="27:13" pos:end="31:59"><expr pos:start="27:13" pos:end="31:58"><name pos:start="27:13" pos:end="27:15">opc</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <operator pos:start="27:19" pos:end="27:19">(</operator><ternary pos:start="27:20" pos:end="31:57"><condition pos:start="27:20" pos:end="29:20"><expr pos:start="27:20" pos:end="27:39"><name pos:start="27:20" pos:end="27:23">type</name> <operator pos:start="27:25" pos:end="27:26">==</operator> <name pos:start="27:28" pos:end="27:39">TCG_TYPE_I32</name></expr>

                   ?</condition><then pos:start="29:22" pos:end="29:55"> <expr pos:start="29:22" pos:end="29:55"><operator pos:start="29:22" pos:end="29:22">(</operator><ternary pos:start="29:23" pos:end="29:54"><condition pos:start="29:23" pos:end="29:35"><expr pos:start="29:23" pos:end="29:33"><name pos:start="29:23" pos:end="29:33">is_unsigned</name></expr> ?</condition><then pos:start="29:37" pos:end="29:44"> <expr pos:start="29:37" pos:end="29:44"><name pos:start="29:37" pos:end="29:44">RIE_CLRJ</name></expr> </then><else pos:start="29:46" pos:end="29:54">: <expr pos:start="29:48" pos:end="29:54"><name pos:start="29:48" pos:end="29:54">RIE_CRJ</name></expr></else></ternary><operator pos:start="29:55" pos:end="29:55">)</operator></expr>

                   </then><else pos:start="31:20" pos:end="31:57">: <expr pos:start="31:22" pos:end="31:57"><operator pos:start="31:22" pos:end="31:22">(</operator><ternary pos:start="31:23" pos:end="31:56"><condition pos:start="31:23" pos:end="31:35"><expr pos:start="31:23" pos:end="31:33"><name pos:start="31:23" pos:end="31:33">is_unsigned</name></expr> ?</condition><then pos:start="31:37" pos:end="31:45"> <expr pos:start="31:37" pos:end="31:45"><name pos:start="31:37" pos:end="31:45">RIE_CLGRJ</name></expr> </then><else pos:start="31:47" pos:end="31:56">: <expr pos:start="31:49" pos:end="31:56"><name pos:start="31:49" pos:end="31:56">RIE_CGRJ</name></expr></else></ternary><operator pos:start="31:57" pos:end="31:57">)</operator></expr></else></ternary><operator pos:start="31:58" pos:end="31:58">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:61"><expr pos:start="33:13" pos:end="33:60"><call pos:start="33:13" pos:end="33:60"><name pos:start="33:13" pos:end="33:31">tgen_compare_branch</name><argument_list pos:start="33:32" pos:end="33:60">(<argument pos:start="33:33" pos:end="33:33"><expr pos:start="33:33" pos:end="33:33"><name pos:start="33:33" pos:end="33:33">s</name></expr></argument>, <argument pos:start="33:36" pos:end="33:38"><expr pos:start="33:36" pos:end="33:38"><name pos:start="33:36" pos:end="33:38">opc</name></expr></argument>, <argument pos:start="33:41" pos:end="33:42"><expr pos:start="33:41" pos:end="33:42"><name pos:start="33:41" pos:end="33:42">cc</name></expr></argument>, <argument pos:start="33:45" pos:end="33:46"><expr pos:start="33:45" pos:end="33:46"><name pos:start="33:45" pos:end="33:46">r1</name></expr></argument>, <argument pos:start="33:49" pos:end="33:50"><expr pos:start="33:49" pos:end="33:50"><name pos:start="33:49" pos:end="33:50">c2</name></expr></argument>, <argument pos:start="33:53" pos:end="33:59"><expr pos:start="33:53" pos:end="33:59"><name pos:start="33:53" pos:end="33:59">labelno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="41:9" pos:end="47:69">/* COMPARE IMMEDIATE AND BRANCH RELATIVE has an 8-bit immediate field.

           If the immediate we've been given does not fit that range, we'll

           fall back to separate compare and branch instructions using the

           larger comparison range afforded by COMPARE IMMEDIATE.  */</comment>

        <if_stmt pos:start="49:9" pos:end="81:9"><if pos:start="49:9" pos:end="65:9">if <condition pos:start="49:12" pos:end="49:33">(<expr pos:start="49:13" pos:end="49:32"><name pos:start="49:13" pos:end="49:16">type</name> <operator pos:start="49:18" pos:end="49:19">==</operator> <name pos:start="49:21" pos:end="49:32">TCG_TYPE_I32</name></expr>)</condition> <block pos:start="49:35" pos:end="65:9">{<block_content pos:start="51:13" pos:end="63:13">

            <if_stmt pos:start="51:13" pos:end="63:13"><if pos:start="51:13" pos:end="57:13">if <condition pos:start="51:16" pos:end="51:28">(<expr pos:start="51:17" pos:end="51:27"><name pos:start="51:17" pos:end="51:27">is_unsigned</name></expr>)</condition> <block pos:start="51:30" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:55">

                <expr_stmt pos:start="53:17" pos:end="53:31"><expr pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:19">opc</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:30">RIE_CLIJ</name></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:55"><expr pos:start="55:17" pos:end="55:54"><name pos:start="55:17" pos:end="55:24">in_range</name> <operator pos:start="55:26" pos:end="55:26">=</operator> <operator pos:start="55:28" pos:end="55:28">(</operator><name pos:start="55:29" pos:end="55:36">uint32_t</name><operator pos:start="55:37" pos:end="55:37">)</operator><name pos:start="55:38" pos:end="55:39">c2</name> <operator pos:start="55:41" pos:end="55:42">==</operator> <operator pos:start="55:44" pos:end="55:44">(</operator><name pos:start="55:45" pos:end="55:51">uint8_t</name><operator pos:start="55:52" pos:end="55:52">)</operator><name pos:start="55:53" pos:end="55:54">c2</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="57:15" pos:end="63:13">else <block pos:start="57:20" pos:end="63:13">{<block_content pos:start="59:17" pos:end="61:53">

                <expr_stmt pos:start="59:17" pos:end="59:30"><expr pos:start="59:17" pos:end="59:29"><name pos:start="59:17" pos:end="59:19">opc</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <name pos:start="59:23" pos:end="59:29">RIE_CIJ</name></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:53"><expr pos:start="61:17" pos:end="61:52"><name pos:start="61:17" pos:end="61:24">in_range</name> <operator pos:start="61:26" pos:end="61:26">=</operator> <operator pos:start="61:28" pos:end="61:28">(</operator><name pos:start="61:29" pos:end="61:35">int32_t</name><operator pos:start="61:36" pos:end="61:36">)</operator><name pos:start="61:37" pos:end="61:38">c2</name> <operator pos:start="61:40" pos:end="61:41">==</operator> <operator pos:start="61:43" pos:end="61:43">(</operator><name pos:start="61:44" pos:end="61:49">int8_t</name><operator pos:start="61:50" pos:end="61:50">)</operator><name pos:start="61:51" pos:end="61:52">c2</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="81:9">else <block pos:start="65:16" pos:end="81:9">{<block_content pos:start="67:13" pos:end="79:13">

            <if_stmt pos:start="67:13" pos:end="79:13"><if pos:start="67:13" pos:end="73:13">if <condition pos:start="67:16" pos:end="67:28">(<expr pos:start="67:17" pos:end="67:27"><name pos:start="67:17" pos:end="67:27">is_unsigned</name></expr>)</condition> <block pos:start="67:30" pos:end="73:13">{<block_content pos:start="69:17" pos:end="71:55">

                <expr_stmt pos:start="69:17" pos:end="69:32"><expr pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:19">opc</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:31">RIE_CLGIJ</name></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:55"><expr pos:start="71:17" pos:end="71:54"><name pos:start="71:17" pos:end="71:24">in_range</name> <operator pos:start="71:26" pos:end="71:26">=</operator> <operator pos:start="71:28" pos:end="71:28">(</operator><name pos:start="71:29" pos:end="71:36">uint64_t</name><operator pos:start="71:37" pos:end="71:37">)</operator><name pos:start="71:38" pos:end="71:39">c2</name> <operator pos:start="71:41" pos:end="71:42">==</operator> <operator pos:start="71:44" pos:end="71:44">(</operator><name pos:start="71:45" pos:end="71:51">uint8_t</name><operator pos:start="71:52" pos:end="71:52">)</operator><name pos:start="71:53" pos:end="71:54">c2</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="73:15" pos:end="79:13">else <block pos:start="73:20" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:53">

                <expr_stmt pos:start="75:17" pos:end="75:31"><expr pos:start="75:17" pos:end="75:30"><name pos:start="75:17" pos:end="75:19">opc</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <name pos:start="75:23" pos:end="75:30">RIE_CGIJ</name></expr>;</expr_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:53"><expr pos:start="77:17" pos:end="77:52"><name pos:start="77:17" pos:end="77:24">in_range</name> <operator pos:start="77:26" pos:end="77:26">=</operator> <operator pos:start="77:28" pos:end="77:28">(</operator><name pos:start="77:29" pos:end="77:35">int64_t</name><operator pos:start="77:36" pos:end="77:36">)</operator><name pos:start="77:37" pos:end="77:38">c2</name> <operator pos:start="77:40" pos:end="77:41">==</operator> <operator pos:start="77:43" pos:end="77:43">(</operator><name pos:start="77:44" pos:end="77:49">int8_t</name><operator pos:start="77:50" pos:end="77:50">)</operator><name pos:start="77:51" pos:end="77:52">c2</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:21">(<expr pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:20">in_range</name></expr>)</condition> <block pos:start="83:23" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:19">

            <expr_stmt pos:start="85:13" pos:end="85:65"><expr pos:start="85:13" pos:end="85:64"><call pos:start="85:13" pos:end="85:64"><name pos:start="85:13" pos:end="85:35">tgen_compare_imm_branch</name><argument_list pos:start="85:36" pos:end="85:64">(<argument pos:start="85:37" pos:end="85:37"><expr pos:start="85:37" pos:end="85:37"><name pos:start="85:37" pos:end="85:37">s</name></expr></argument>, <argument pos:start="85:40" pos:end="85:42"><expr pos:start="85:40" pos:end="85:42"><name pos:start="85:40" pos:end="85:42">opc</name></expr></argument>, <argument pos:start="85:45" pos:end="85:46"><expr pos:start="85:45" pos:end="85:46"><name pos:start="85:45" pos:end="85:46">cc</name></expr></argument>, <argument pos:start="85:49" pos:end="85:50"><expr pos:start="85:49" pos:end="85:50"><name pos:start="85:49" pos:end="85:50">r1</name></expr></argument>, <argument pos:start="85:53" pos:end="85:54"><expr pos:start="85:53" pos:end="85:54"><name pos:start="85:53" pos:end="85:54">c2</name></expr></argument>, <argument pos:start="85:57" pos:end="85:63"><expr pos:start="85:57" pos:end="85:63"><name pos:start="85:57" pos:end="85:63">labelno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:47"><expr pos:start="95:5" pos:end="95:46"><name pos:start="95:5" pos:end="95:6">cc</name> <operator pos:start="95:8" pos:end="95:8">=</operator> <call pos:start="95:10" pos:end="95:46"><name pos:start="95:10" pos:end="95:17">tgen_cmp</name><argument_list pos:start="95:18" pos:end="95:46">(<argument pos:start="95:19" pos:end="95:19"><expr pos:start="95:19" pos:end="95:19"><name pos:start="95:19" pos:end="95:19">s</name></expr></argument>, <argument pos:start="95:22" pos:end="95:25"><expr pos:start="95:22" pos:end="95:25"><name pos:start="95:22" pos:end="95:25">type</name></expr></argument>, <argument pos:start="95:28" pos:end="95:28"><expr pos:start="95:28" pos:end="95:28"><name pos:start="95:28" pos:end="95:28">c</name></expr></argument>, <argument pos:start="95:31" pos:end="95:32"><expr pos:start="95:31" pos:end="95:32"><name pos:start="95:31" pos:end="95:32">r1</name></expr></argument>, <argument pos:start="95:35" pos:end="95:36"><expr pos:start="95:35" pos:end="95:36"><name pos:start="95:35" pos:end="95:36">c2</name></expr></argument>, <argument pos:start="95:39" pos:end="95:45"><expr pos:start="95:39" pos:end="95:45"><name pos:start="95:39" pos:end="95:45">c2const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:32"><expr pos:start="97:5" pos:end="97:31"><call pos:start="97:5" pos:end="97:31"><name pos:start="97:5" pos:end="97:15">tgen_branch</name><argument_list pos:start="97:16" pos:end="97:31">(<argument pos:start="97:17" pos:end="97:17"><expr pos:start="97:17" pos:end="97:17"><name pos:start="97:17" pos:end="97:17">s</name></expr></argument>, <argument pos:start="97:20" pos:end="97:21"><expr pos:start="97:20" pos:end="97:21"><name pos:start="97:20" pos:end="97:21">cc</name></expr></argument>, <argument pos:start="97:24" pos:end="97:30"><expr pos:start="97:24" pos:end="97:30"><name pos:start="97:24" pos:end="97:30">labelno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
