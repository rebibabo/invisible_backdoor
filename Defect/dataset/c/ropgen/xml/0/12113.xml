<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12113.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:35">v9fs_flush</name><parameter_list pos:start="1:36" pos:end="1:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:25">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">ssize_t</name></type> <name pos:start="5:13" pos:end="5:15">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int16_t</name></type> <name pos:start="7:13" pos:end="7:15">tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:17">offset</name> <init pos:start="9:19" pos:end="9:21">= <expr pos:start="9:21" pos:end="9:21"><literal type="number" pos:start="9:21" pos:end="9:21">7</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">V9fsPDU</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:23">cancel_pdu</name> <init pos:start="11:25" pos:end="11:30">= <expr pos:start="11:27" pos:end="11:30"><name pos:start="11:27" pos:end="11:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">V9fsPDU</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">pdu</name> <init pos:start="13:18" pos:end="13:25">= <expr pos:start="13:20" pos:end="13:25"><name pos:start="13:20" pos:end="13:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">V9fsState</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:16">s</name> <init pos:start="15:18" pos:end="15:25">= <expr pos:start="15:20" pos:end="15:25"><name pos:start="15:20" pos:end="15:25"><name pos:start="15:20" pos:end="15:22">pdu</name><operator pos:start="15:23" pos:end="15:24">-&gt;</operator><name pos:start="15:25" pos:end="15:25">s</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:48"><expr pos:start="19:5" pos:end="19:47"><name pos:start="19:5" pos:end="19:7">err</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:47"><name pos:start="19:11" pos:end="19:23">pdu_unmarshal</name><argument_list pos:start="19:24" pos:end="19:47">(<argument pos:start="19:25" pos:end="19:27"><expr pos:start="19:25" pos:end="19:27"><name pos:start="19:25" pos:end="19:27">pdu</name></expr></argument>, <argument pos:start="19:30" pos:end="19:35"><expr pos:start="19:30" pos:end="19:35"><name pos:start="19:30" pos:end="19:35">offset</name></expr></argument>, <argument pos:start="19:38" pos:end="19:40"><expr pos:start="19:38" pos:end="19:40"><literal type="string" pos:start="19:38" pos:end="19:40">"w"</literal></expr></argument>, <argument pos:start="19:43" pos:end="19:46"><expr pos:start="19:43" pos:end="19:46"><operator pos:start="19:43" pos:end="19:43">&amp;</operator><name pos:start="19:44" pos:end="19:46">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">err</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>)</condition> <block pos:start="21:18" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:15">

        <expr_stmt pos:start="23:9" pos:end="23:31"><expr pos:start="23:9" pos:end="23:30"><call pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:20">pdu_complete</name><argument_list pos:start="23:21" pos:end="23:30">(<argument pos:start="23:22" pos:end="23:24"><expr pos:start="23:22" pos:end="23:24"><name pos:start="23:22" pos:end="23:24">pdu</name></expr></argument>, <argument pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:29">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:45"><expr pos:start="29:5" pos:end="29:44"><call pos:start="29:5" pos:end="29:44"><name pos:start="29:5" pos:end="29:20">trace_v9fs_flush</name><argument_list pos:start="29:21" pos:end="29:44">(<argument pos:start="29:22" pos:end="29:29"><expr pos:start="29:22" pos:end="29:29"><name pos:start="29:22" pos:end="29:29"><name pos:start="29:22" pos:end="29:24">pdu</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:29">tag</name></name></expr></argument>, <argument pos:start="29:32" pos:end="29:38"><expr pos:start="29:32" pos:end="29:38"><name pos:start="29:32" pos:end="29:38"><name pos:start="29:32" pos:end="29:34">pdu</name><operator pos:start="29:35" pos:end="29:36">-&gt;</operator><name pos:start="29:37" pos:end="29:38">id</name></name></expr></argument>, <argument pos:start="29:41" pos:end="29:43"><expr pos:start="29:41" pos:end="29:43"><name pos:start="29:41" pos:end="29:43">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="49:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:24">(<expr pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:11">pdu</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:16">tag</name></name> <operator pos:start="33:18" pos:end="33:19">==</operator> <name pos:start="33:21" pos:end="33:23">tag</name></expr>)</condition> <block pos:start="33:26" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:84">

        <expr_stmt pos:start="35:9" pos:end="35:84"><expr pos:start="35:9" pos:end="35:83"><call pos:start="35:9" pos:end="35:83"><name pos:start="35:9" pos:end="35:20">error_report</name><argument_list pos:start="35:21" pos:end="35:83">(<argument pos:start="35:22" pos:end="35:82"><expr pos:start="35:22" pos:end="35:82"><literal type="string" pos:start="35:22" pos:end="35:82">"Warning: the guest sent a self-referencing 9P flush request"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="49:5">else <block pos:start="37:12" pos:end="49:5">{<block_content pos:start="39:9" pos:end="47:9">

        <macro pos:start="39:9" pos:end="39:56"><name pos:start="39:9" pos:end="39:21">QLIST_FOREACH</name><argument_list pos:start="39:22" pos:end="39:56">(<argument pos:start="39:23" pos:end="39:32">cancel_pdu</argument>, <argument pos:start="39:35" pos:end="39:49">&amp;s-&gt;active_list</argument>, <argument pos:start="39:52" pos:end="39:55">next</argument>)</argument_list></macro> <block pos:start="39:58" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:13">

            <if_stmt pos:start="41:13" pos:end="45:13"><if pos:start="41:13" pos:end="45:13">if <condition pos:start="41:16" pos:end="41:39">(<expr pos:start="41:17" pos:end="41:38"><name pos:start="41:17" pos:end="41:31"><name pos:start="41:17" pos:end="41:26">cancel_pdu</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:31">tag</name></name> <operator pos:start="41:33" pos:end="41:34">==</operator> <name pos:start="41:36" pos:end="41:38">tag</name></expr>)</condition> <block pos:start="41:41" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:22">

                <break pos:start="43:17" pos:end="43:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="51:5" pos:end="71:5"><if pos:start="51:5" pos:end="71:5">if <condition pos:start="51:8" pos:end="51:19">(<expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:18">cancel_pdu</name></expr>)</condition> <block pos:start="51:21" pos:end="71:5">{<block_content pos:start="53:9" pos:end="69:9">

        <expr_stmt pos:start="53:9" pos:end="53:34"><expr pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:18">cancel_pdu</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:29">cancelled</name></name> <operator pos:start="53:31" pos:end="53:31">=</operator> <literal type="number" pos:start="53:33" pos:end="53:33">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="55:9" pos:end="59:11">/*

         * Wait for pdu to complete.

         */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:56"><expr pos:start="61:9" pos:end="61:55"><call pos:start="61:9" pos:end="61:55"><name pos:start="61:9" pos:end="61:26">qemu_co_queue_wait</name><argument_list pos:start="61:27" pos:end="61:55">(<argument pos:start="61:28" pos:end="61:48"><expr pos:start="61:28" pos:end="61:48"><operator pos:start="61:28" pos:end="61:28">&amp;</operator><name pos:start="61:29" pos:end="61:48"><name pos:start="61:29" pos:end="61:38">cancel_pdu</name><operator pos:start="61:39" pos:end="61:40">-&gt;</operator><name pos:start="61:41" pos:end="61:48">complete</name></name></expr></argument>, <argument pos:start="61:51" pos:end="61:54"><expr pos:start="61:51" pos:end="61:54"><name pos:start="61:51" pos:end="61:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:55">(<expr pos:start="63:13" pos:end="63:54"><operator pos:start="63:13" pos:end="63:13">!</operator><call pos:start="63:14" pos:end="63:54"><name pos:start="63:14" pos:end="63:31">qemu_co_queue_next</name><argument_list pos:start="63:32" pos:end="63:54">(<argument pos:start="63:33" pos:end="63:53"><expr pos:start="63:33" pos:end="63:53"><operator pos:start="63:33" pos:end="63:33">&amp;</operator><name pos:start="63:34" pos:end="63:53"><name pos:start="63:34" pos:end="63:43">cancel_pdu</name><operator pos:start="63:44" pos:end="63:45">-&gt;</operator><name pos:start="63:46" pos:end="63:53">complete</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:57" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:33">

            <expr_stmt pos:start="65:13" pos:end="65:38"><expr pos:start="65:13" pos:end="65:37"><name pos:start="65:13" pos:end="65:33"><name pos:start="65:13" pos:end="65:22">cancel_pdu</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:33">cancelled</name></name> <operator pos:start="65:35" pos:end="65:35">=</operator> <literal type="number" pos:start="65:37" pos:end="65:37">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:33"><expr pos:start="67:13" pos:end="67:32"><call pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:20">pdu_free</name><argument_list pos:start="67:21" pos:end="67:32">(<argument pos:start="67:22" pos:end="67:31"><expr pos:start="67:22" pos:end="67:31"><name pos:start="67:22" pos:end="67:31">cancel_pdu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:25"><expr pos:start="73:5" pos:end="73:24"><call pos:start="73:5" pos:end="73:24"><name pos:start="73:5" pos:end="73:16">pdu_complete</name><argument_list pos:start="73:17" pos:end="73:24">(<argument pos:start="73:18" pos:end="73:20"><expr pos:start="73:18" pos:end="73:20"><name pos:start="73:18" pos:end="73:20">pdu</name></expr></argument>, <argument pos:start="73:23" pos:end="73:23"><expr pos:start="73:23" pos:end="73:23"><literal type="number" pos:start="73:23" pos:end="73:23">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
