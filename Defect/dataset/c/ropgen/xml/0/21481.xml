<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21481.c" pos:tabs="8"><function pos:start="1:1" pos:end="517:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">realview_init</name><parameter_list pos:start="1:26" pos:end="9:57">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:36">ram_addr_t</name></type> <name pos:start="1:38" pos:end="1:45">ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:76"><decl pos:start="5:51" pos:end="5:76"><type pos:start="5:51" pos:end="5:76"><specifier pos:start="5:51" pos:end="5:55">const</specifier> <name pos:start="5:57" pos:end="5:60">char</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:76">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:48"><decl pos:start="7:22" pos:end="7:48"><type pos:start="7:22" pos:end="7:48"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:48">initrd_filename</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:71"><decl pos:start="7:51" pos:end="7:71"><type pos:start="7:51" pos:end="7:71"><specifier pos:start="7:51" pos:end="7:55">const</specifier> <name pos:start="7:57" pos:end="7:60">char</name> <modifier pos:start="7:62" pos:end="7:62">*</modifier></type><name pos:start="7:63" pos:end="7:71">cpu_model</name></decl></parameter>,

                     <parameter pos:start="9:22" pos:end="9:56"><decl pos:start="9:22" pos:end="9:56"><type pos:start="9:22" pos:end="9:56"><name pos:start="9:22" pos:end="9:45"><name pos:start="9:22" pos:end="9:25">enum</name> <name pos:start="9:27" pos:end="9:45">realview_board_type</name></name></type> <name pos:start="9:47" pos:end="9:56">board_type</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="517:1">{<block_content pos:start="13:5" pos:end="515:48">

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">CPUState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">env</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:25">ram_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">DeviceState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">dev</name></decl>, <decl pos:start="17:23" pos:end="17:29"><type ref="prev" pos:start="17:5" pos:end="17:17"><modifier pos:start="17:23" pos:end="17:23">*</modifier></type><name pos:start="17:24" pos:end="17:29">sysctl</name></decl>, <decl pos:start="17:32" pos:end="17:37"><type ref="prev" pos:start="17:5" pos:end="17:17"><modifier pos:start="17:32" pos:end="17:32">*</modifier></type><name pos:start="17:33" pos:end="17:37">gpio2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">SysBusDevice</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:24">busdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:18">irqp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">qemu_irq</name></type> <name pos:start="23:14" pos:end="23:20"><name pos:start="23:14" pos:end="23:16">pic</name><index pos:start="23:17" pos:end="23:20">[<expr pos:start="23:18" pos:end="23:19"><literal type="number" pos:start="23:18" pos:end="23:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:24"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">qemu_irq</name></type> <name pos:start="25:14" pos:end="25:23"><name pos:start="25:14" pos:end="25:20">mmc_irq</name><index pos:start="25:21" pos:end="25:23">[<expr pos:start="25:22" pos:end="25:22"><literal type="number" pos:start="25:22" pos:end="25:22">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">PCIBus</name> <modifier pos:start="27:12" pos:end="27:12">*</modifier></type><name pos:start="27:13" pos:end="27:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:16"><decl pos:start="29:5" pos:end="29:15"><type pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:11">NICInfo</name> <modifier pos:start="29:13" pos:end="29:13">*</modifier></type><name pos:start="29:14" pos:end="29:15">nd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:17"><decl pos:start="31:5" pos:end="31:16"><type pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:11">i2c_bus</name> <modifier pos:start="31:13" pos:end="31:13">*</modifier></type><name pos:start="31:14" pos:end="31:16">i2c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:10"><decl pos:start="33:5" pos:end="33:9"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:21"><decl pos:start="35:5" pos:end="35:20"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:16">done_nic</name> <init pos:start="35:18" pos:end="35:20">= <expr pos:start="35:20" pos:end="35:20"><literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:24"><decl pos:start="37:5" pos:end="37:23"><type pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:12">qemu_irq</name></type> <name pos:start="37:14" pos:end="37:23"><name pos:start="37:14" pos:end="37:20">cpu_irq</name><index pos:start="37:21" pos:end="37:23">[<expr pos:start="37:22" pos:end="37:22"><literal type="number" pos:start="37:22" pos:end="37:22">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:22"><decl pos:start="39:5" pos:end="39:21"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:17">is_mpcore</name> <init pos:start="39:19" pos:end="39:21">= <expr pos:start="39:21" pos:end="39:21"><literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:18"><decl pos:start="41:5" pos:end="41:17"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:13">is_pb</name> <init pos:start="41:15" pos:end="41:17">= <expr pos:start="41:17" pos:end="41:17"><literal type="number" pos:start="41:17" pos:end="41:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:25"><decl pos:start="43:5" pos:end="43:24"><type pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:12">uint32_t</name></type> <name pos:start="43:14" pos:end="43:20">proc_id</name> <init pos:start="43:22" pos:end="43:24">= <expr pos:start="43:24" pos:end="43:24"><literal type="number" pos:start="43:24" pos:end="43:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:20"><decl pos:start="45:5" pos:end="45:19"><type pos:start="45:5" pos:end="45:12"><name pos:start="45:5" pos:end="45:12">uint32_t</name></type> <name pos:start="45:14" pos:end="45:19">sys_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:28"><decl pos:start="47:5" pos:end="47:27"><type pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:14">ram_addr_t</name></type> <name pos:start="47:16" pos:end="47:27">low_ram_size</name></decl>;</decl_stmt>



    <switch pos:start="51:5" pos:end="77:5">switch <condition pos:start="51:12" pos:end="51:23">(<expr pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:22">board_type</name></expr>)</condition> <block pos:start="51:25" pos:end="77:5">{<block_content pos:start="53:5" pos:end="75:14">

    <case pos:start="53:5" pos:end="53:18">case <expr pos:start="53:10" pos:end="53:17"><name pos:start="53:10" pos:end="53:17">BOARD_EB</name></expr>:</case>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:25">case <expr pos:start="57:10" pos:end="57:24"><name pos:start="57:10" pos:end="57:24">BOARD_EB_MPCORE</name></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:17">is_mpcore</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <literal type="number" pos:start="59:21" pos:end="59:21">1</literal></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <case pos:start="63:5" pos:end="63:21">case <expr pos:start="63:10" pos:end="63:20"><name pos:start="63:10" pos:end="63:20">BOARD_PB_A8</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:18"><expr pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:13">is_pb</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:22">case <expr pos:start="69:10" pos:end="69:21"><name pos:start="69:10" pos:end="69:21">BOARD_PBX_A9</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:22"><expr pos:start="71:9" pos:end="71:21"><name pos:start="71:9" pos:end="71:17">is_mpcore</name> <operator pos:start="71:19" pos:end="71:19">=</operator> <literal type="number" pos:start="71:21" pos:end="71:21">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:18"><expr pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:13">is_pb</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <literal type="number" pos:start="73:17" pos:end="73:17">1</literal></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    </block_content>}</block></switch>

    <for pos:start="79:5" pos:end="95:5">for <control pos:start="79:9" pos:end="79:34">(<init pos:start="79:10" pos:end="79:15"><expr pos:start="79:10" pos:end="79:14"><name pos:start="79:10" pos:end="79:10">n</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <literal type="number" pos:start="79:14" pos:end="79:14">0</literal></expr>;</init> <condition pos:start="79:17" pos:end="79:29"><expr pos:start="79:17" pos:end="79:28"><name pos:start="79:17" pos:end="79:17">n</name> <operator pos:start="79:19" pos:end="79:19">&lt;</operator> <name pos:start="79:21" pos:end="79:28">smp_cpus</name></expr>;</condition> <incr pos:start="79:31" pos:end="79:33"><expr pos:start="79:31" pos:end="79:33"><name pos:start="79:31" pos:end="79:31">n</name><operator pos:start="79:32" pos:end="79:33">++</operator></expr></incr>)</control> <block pos:start="79:36" pos:end="95:5">{<block_content pos:start="81:9" pos:end="93:43">

        <expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:11">env</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:33"><name pos:start="81:15" pos:end="81:22">cpu_init</name><argument_list pos:start="81:23" pos:end="81:33">(<argument pos:start="81:24" pos:end="81:32"><expr pos:start="81:24" pos:end="81:32"><name pos:start="81:24" pos:end="81:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:17">(<expr pos:start="83:13" pos:end="83:16"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:16">env</name></expr>)</condition> <block pos:start="83:19" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:20">

            <expr_stmt pos:start="85:13" pos:end="85:63"><expr pos:start="85:13" pos:end="85:62"><call pos:start="85:13" pos:end="85:62"><name pos:start="85:13" pos:end="85:19">fprintf</name><argument_list pos:start="85:20" pos:end="85:62">(<argument pos:start="85:21" pos:end="85:26"><expr pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:26">stderr</name></expr></argument>, <argument pos:start="85:29" pos:end="85:61"><expr pos:start="85:29" pos:end="85:61"><literal type="string" pos:start="85:29" pos:end="85:61">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:20"><expr pos:start="87:13" pos:end="87:19"><call pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:16">exit</name><argument_list pos:start="87:17" pos:end="87:19">(<argument pos:start="87:18" pos:end="87:18"><expr pos:start="87:18" pos:end="87:18"><literal type="number" pos:start="87:18" pos:end="87:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:37"><expr pos:start="91:9" pos:end="91:36"><name pos:start="91:9" pos:end="91:12">irqp</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:36"><name pos:start="91:16" pos:end="91:31">arm_pic_init_cpu</name><argument_list pos:start="91:32" pos:end="91:36">(<argument pos:start="91:33" pos:end="91:35"><expr pos:start="91:33" pos:end="91:35"><name pos:start="91:33" pos:end="91:35">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:43"><expr pos:start="93:9" pos:end="93:42"><name pos:start="93:9" pos:end="93:18"><name pos:start="93:9" pos:end="93:15">cpu_irq</name><index pos:start="93:16" pos:end="93:18">[<expr pos:start="93:17" pos:end="93:17"><name pos:start="93:17" pos:end="93:17">n</name></expr>]</index></name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:42"><name pos:start="93:22" pos:end="93:25">irqp</name><index pos:start="93:26" pos:end="93:42">[<expr pos:start="93:27" pos:end="93:41"><name pos:start="93:27" pos:end="93:41">ARM_PIC_CPU_IRQ</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="97:5" pos:end="121:5"><if pos:start="97:5" pos:end="109:5">if <condition pos:start="97:8" pos:end="97:41">(<expr pos:start="97:9" pos:end="97:40"><call pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:19">arm_feature</name><argument_list pos:start="97:20" pos:end="97:40">(<argument pos:start="97:21" pos:end="97:23"><expr pos:start="97:21" pos:end="97:23"><name pos:start="97:21" pos:end="97:23">env</name></expr></argument>, <argument pos:start="97:26" pos:end="97:39"><expr pos:start="97:26" pos:end="97:39"><name pos:start="97:26" pos:end="97:39">ARM_FEATURE_V7</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:43" pos:end="109:5">{<block_content pos:start="99:9" pos:end="107:9">

        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:22">(<expr pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:21">is_mpcore</name></expr>)</condition> <block pos:start="99:24" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:33">

            <expr_stmt pos:start="101:13" pos:end="101:33"><expr pos:start="101:13" pos:end="101:32"><name pos:start="101:13" pos:end="101:19">proc_id</name> <operator pos:start="101:21" pos:end="101:21">=</operator> <literal type="number" pos:start="101:23" pos:end="101:32">0x0c000000</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="107:9">else <block pos:start="103:16" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:33">

            <expr_stmt pos:start="105:13" pos:end="105:33"><expr pos:start="105:13" pos:end="105:32"><name pos:start="105:13" pos:end="105:19">proc_id</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <literal type="number" pos:start="105:23" pos:end="105:32">0x0e000000</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="109:7" pos:end="113:5">else if <condition pos:start="109:15" pos:end="109:49">(<expr pos:start="109:16" pos:end="109:48"><call pos:start="109:16" pos:end="109:48"><name pos:start="109:16" pos:end="109:26">arm_feature</name><argument_list pos:start="109:27" pos:end="109:48">(<argument pos:start="109:28" pos:end="109:30"><expr pos:start="109:28" pos:end="109:30"><name pos:start="109:28" pos:end="109:30">env</name></expr></argument>, <argument pos:start="109:33" pos:end="109:47"><expr pos:start="109:33" pos:end="109:47"><name pos:start="109:33" pos:end="109:47">ARM_FEATURE_V6K</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:51" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:29">

        <expr_stmt pos:start="111:9" pos:end="111:29"><expr pos:start="111:9" pos:end="111:28"><name pos:start="111:9" pos:end="111:15">proc_id</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <literal type="number" pos:start="111:19" pos:end="111:28">0x06000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="113:7" pos:end="117:5">else if <condition pos:start="113:15" pos:end="113:48">(<expr pos:start="113:16" pos:end="113:47"><call pos:start="113:16" pos:end="113:47"><name pos:start="113:16" pos:end="113:26">arm_feature</name><argument_list pos:start="113:27" pos:end="113:47">(<argument pos:start="113:28" pos:end="113:30"><expr pos:start="113:28" pos:end="113:30"><name pos:start="113:28" pos:end="113:30">env</name></expr></argument>, <argument pos:start="113:33" pos:end="113:46"><expr pos:start="113:33" pos:end="113:46"><name pos:start="113:33" pos:end="113:46">ARM_FEATURE_V6</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:50" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:29">

        <expr_stmt pos:start="115:9" pos:end="115:29"><expr pos:start="115:9" pos:end="115:28"><name pos:start="115:9" pos:end="115:15">proc_id</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <literal type="number" pos:start="115:19" pos:end="115:28">0x04000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="117:7" pos:end="121:5">else <block pos:start="117:12" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:29">

        <expr_stmt pos:start="119:9" pos:end="119:29"><expr pos:start="119:9" pos:end="119:28"><name pos:start="119:9" pos:end="119:15">proc_id</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <literal type="number" pos:start="119:19" pos:end="119:28">0x02000000</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="125:5" pos:end="139:5"><if pos:start="125:5" pos:end="139:5">if <condition pos:start="125:8" pos:end="125:39">(<expr pos:start="125:9" pos:end="125:38"><name pos:start="125:9" pos:end="125:13">is_pb</name> <operator pos:start="125:15" pos:end="125:16">&amp;&amp;</operator> <name pos:start="125:18" pos:end="125:25">ram_size</name> <operator pos:start="125:27" pos:end="125:27">&gt;</operator> <literal type="number" pos:start="125:29" pos:end="125:38">0x20000000</literal></expr>)</condition> <block pos:start="125:41" pos:end="139:5">{<block_content pos:start="129:9" pos:end="137:62">

        <comment type="block" pos:start="127:9" pos:end="127:29">/* Core tile RAM.  */</comment>

        <expr_stmt pos:start="129:9" pos:end="129:45"><expr pos:start="129:9" pos:end="129:44"><name pos:start="129:9" pos:end="129:20">low_ram_size</name> <operator pos:start="129:22" pos:end="129:22">=</operator> <name pos:start="129:24" pos:end="129:31">ram_size</name> <operator pos:start="129:33" pos:end="129:33">-</operator> <literal type="number" pos:start="129:35" pos:end="129:44">0x20000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:30"><expr pos:start="131:9" pos:end="131:29"><name pos:start="131:9" pos:end="131:16">ram_size</name> <operator pos:start="131:18" pos:end="131:18">=</operator> <literal type="number" pos:start="131:20" pos:end="131:29">0x20000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:75"><expr pos:start="133:9" pos:end="133:74"><name pos:start="133:9" pos:end="133:18">ram_offset</name> <operator pos:start="133:20" pos:end="133:20">=</operator> <call pos:start="133:22" pos:end="133:74"><name pos:start="133:22" pos:end="133:35">qemu_ram_alloc</name><argument_list pos:start="133:36" pos:end="133:74">(<argument pos:start="133:37" pos:end="133:40"><expr pos:start="133:37" pos:end="133:40"><name pos:start="133:37" pos:end="133:40">NULL</name></expr></argument>, <argument pos:start="133:43" pos:end="133:59"><expr pos:start="133:43" pos:end="133:59"><literal type="string" pos:start="133:43" pos:end="133:59">"realview.lowmem"</literal></expr></argument>, <argument pos:start="133:62" pos:end="133:73"><expr pos:start="133:62" pos:end="133:73"><name pos:start="133:62" pos:end="133:73">low_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="137:62"><expr pos:start="135:9" pos:end="137:61"><call pos:start="135:9" pos:end="137:61"><name pos:start="135:9" pos:end="135:36">cpu_register_physical_memory</name><argument_list pos:start="135:37" pos:end="137:61">(<argument pos:start="135:38" pos:end="135:47"><expr pos:start="135:38" pos:end="135:47"><literal type="number" pos:start="135:38" pos:end="135:47">0x20000000</literal></expr></argument>, <argument pos:start="135:50" pos:end="135:61"><expr pos:start="135:50" pos:end="135:61"><name pos:start="135:50" pos:end="135:61">low_ram_size</name></expr></argument>,

                                     <argument pos:start="137:38" pos:end="137:60"><expr pos:start="137:38" pos:end="137:60"><name pos:start="137:38" pos:end="137:47">ram_offset</name> <operator pos:start="137:49" pos:end="137:49">|</operator> <name pos:start="137:51" pos:end="137:60">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:68"><expr pos:start="143:5" pos:end="143:67"><name pos:start="143:5" pos:end="143:14">ram_offset</name> <operator pos:start="143:16" pos:end="143:16">=</operator> <call pos:start="143:18" pos:end="143:67"><name pos:start="143:18" pos:end="143:31">qemu_ram_alloc</name><argument_list pos:start="143:32" pos:end="143:67">(<argument pos:start="143:33" pos:end="143:36"><expr pos:start="143:33" pos:end="143:36"><name pos:start="143:33" pos:end="143:36">NULL</name></expr></argument>, <argument pos:start="143:39" pos:end="143:56"><expr pos:start="143:39" pos:end="143:56"><literal type="string" pos:start="143:39" pos:end="143:56">"realview.highmem"</literal></expr></argument>, <argument pos:start="143:59" pos:end="143:66"><expr pos:start="143:59" pos:end="143:66"><name pos:start="143:59" pos:end="143:66">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:28"><expr pos:start="145:5" pos:end="145:27"><name pos:start="145:5" pos:end="145:16">low_ram_size</name> <operator pos:start="145:18" pos:end="145:18">=</operator> <name pos:start="145:20" pos:end="145:27">ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="147:5" pos:end="149:32"><if pos:start="147:5" pos:end="149:32">if <condition pos:start="147:8" pos:end="147:34">(<expr pos:start="147:9" pos:end="147:33"><name pos:start="147:9" pos:end="147:20">low_ram_size</name> <operator pos:start="147:22" pos:end="147:22">&gt;</operator> <literal type="number" pos:start="147:24" pos:end="147:33">0x10000000</literal></expr>)</condition><block type="pseudo" pos:start="149:7" pos:end="149:32"><block_content pos:start="149:7" pos:end="149:32">

      <expr_stmt pos:start="149:7" pos:end="149:32"><expr pos:start="149:7" pos:end="149:31"><name pos:start="149:7" pos:end="149:18">low_ram_size</name> <operator pos:start="149:20" pos:end="149:20">=</operator> <literal type="number" pos:start="149:22" pos:end="149:31">0x10000000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="151:5" pos:end="151:33">/* SDRAM at address zero.  */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:75"><expr pos:start="153:5" pos:end="153:74"><call pos:start="153:5" pos:end="153:74"><name pos:start="153:5" pos:end="153:32">cpu_register_physical_memory</name><argument_list pos:start="153:33" pos:end="153:74">(<argument pos:start="153:34" pos:end="153:34"><expr pos:start="153:34" pos:end="153:34"><literal type="number" pos:start="153:34" pos:end="153:34">0</literal></expr></argument>, <argument pos:start="153:37" pos:end="153:48"><expr pos:start="153:37" pos:end="153:48"><name pos:start="153:37" pos:end="153:48">low_ram_size</name></expr></argument>, <argument pos:start="153:51" pos:end="153:73"><expr pos:start="153:51" pos:end="153:73"><name pos:start="153:51" pos:end="153:60">ram_offset</name> <operator pos:start="153:62" pos:end="153:62">|</operator> <name pos:start="153:64" pos:end="153:73">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="167:5"><if pos:start="155:5" pos:end="163:5">if <condition pos:start="155:8" pos:end="155:14">(<expr pos:start="155:9" pos:end="155:13"><name pos:start="155:9" pos:end="155:13">is_pb</name></expr>)</condition> <block pos:start="155:16" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:62">

        <comment type="block" pos:start="157:9" pos:end="157:43">/* And again at a high address.  */</comment>

        <expr_stmt pos:start="159:9" pos:end="161:62"><expr pos:start="159:9" pos:end="161:61"><call pos:start="159:9" pos:end="161:61"><name pos:start="159:9" pos:end="159:36">cpu_register_physical_memory</name><argument_list pos:start="159:37" pos:end="161:61">(<argument pos:start="159:38" pos:end="159:47"><expr pos:start="159:38" pos:end="159:47"><literal type="number" pos:start="159:38" pos:end="159:47">0x70000000</literal></expr></argument>, <argument pos:start="159:50" pos:end="159:57"><expr pos:start="159:50" pos:end="159:57"><name pos:start="159:50" pos:end="159:57">ram_size</name></expr></argument>,

                                     <argument pos:start="161:38" pos:end="161:60"><expr pos:start="161:38" pos:end="161:60"><name pos:start="161:38" pos:end="161:47">ram_offset</name> <operator pos:start="161:49" pos:end="161:49">|</operator> <name pos:start="161:51" pos:end="161:60">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="163:7" pos:end="167:5">else <block pos:start="163:12" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:32">

        <expr_stmt pos:start="165:9" pos:end="165:32"><expr pos:start="165:9" pos:end="165:31"><name pos:start="165:9" pos:end="165:16">ram_size</name> <operator pos:start="165:18" pos:end="165:18">=</operator> <name pos:start="165:20" pos:end="165:31">low_ram_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:45"><expr pos:start="171:5" pos:end="171:44"><name pos:start="171:5" pos:end="171:10">sys_id</name> <operator pos:start="171:12" pos:end="171:12">=</operator> <ternary pos:start="171:14" pos:end="171:44"><condition pos:start="171:14" pos:end="171:20"><expr pos:start="171:14" pos:end="171:18"><name pos:start="171:14" pos:end="171:18">is_pb</name></expr> ?</condition><then pos:start="171:22" pos:end="171:31"> <expr pos:start="171:22" pos:end="171:31"><literal type="number" pos:start="171:22" pos:end="171:31">0x01780500</literal></expr> </then><else pos:start="171:33" pos:end="171:44">: <expr pos:start="171:35" pos:end="171:44"><literal type="number" pos:start="171:35" pos:end="171:44">0xc1400400</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:50"><expr pos:start="173:5" pos:end="173:49"><name pos:start="173:5" pos:end="173:10">sysctl</name> <operator pos:start="173:12" pos:end="173:12">=</operator> <call pos:start="173:14" pos:end="173:49"><name pos:start="173:14" pos:end="173:24">qdev_create</name><argument_list pos:start="173:25" pos:end="173:49">(<argument pos:start="173:26" pos:end="173:29"><expr pos:start="173:26" pos:end="173:29"><name pos:start="173:26" pos:end="173:29">NULL</name></expr></argument>, <argument pos:start="173:32" pos:end="173:48"><expr pos:start="173:32" pos:end="173:48"><literal type="string" pos:start="173:32" pos:end="173:48">"realview_sysctl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:51"><expr pos:start="175:5" pos:end="175:50"><call pos:start="175:5" pos:end="175:50"><name pos:start="175:5" pos:end="175:24">qdev_prop_set_uint32</name><argument_list pos:start="175:25" pos:end="175:50">(<argument pos:start="175:26" pos:end="175:31"><expr pos:start="175:26" pos:end="175:31"><name pos:start="175:26" pos:end="175:31">sysctl</name></expr></argument>, <argument pos:start="175:34" pos:end="175:41"><expr pos:start="175:34" pos:end="175:41"><literal type="string" pos:start="175:34" pos:end="175:41">"sys_id"</literal></expr></argument>, <argument pos:start="175:44" pos:end="175:49"><expr pos:start="175:44" pos:end="175:49"><name pos:start="175:44" pos:end="175:49">sys_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:29"><expr pos:start="177:5" pos:end="177:28"><call pos:start="177:5" pos:end="177:28"><name pos:start="177:5" pos:end="177:20">qdev_init_nofail</name><argument_list pos:start="177:21" pos:end="177:28">(<argument pos:start="177:22" pos:end="177:27"><expr pos:start="177:22" pos:end="177:27"><name pos:start="177:22" pos:end="177:27">sysctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:53"><expr pos:start="179:5" pos:end="179:52"><call pos:start="179:5" pos:end="179:52"><name pos:start="179:5" pos:end="179:24">qdev_prop_set_uint32</name><argument_list pos:start="179:25" pos:end="179:52">(<argument pos:start="179:26" pos:end="179:31"><expr pos:start="179:26" pos:end="179:31"><name pos:start="179:26" pos:end="179:31">sysctl</name></expr></argument>, <argument pos:start="179:34" pos:end="179:42"><expr pos:start="179:34" pos:end="179:42"><literal type="string" pos:start="179:34" pos:end="179:42">"proc_id"</literal></expr></argument>, <argument pos:start="179:45" pos:end="179:51"><expr pos:start="179:45" pos:end="179:51"><name pos:start="179:45" pos:end="179:51">proc_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:61"><expr pos:start="181:5" pos:end="181:60"><call pos:start="181:5" pos:end="181:60"><name pos:start="181:5" pos:end="181:19">sysbus_mmio_map</name><argument_list pos:start="181:20" pos:end="181:60">(<argument pos:start="181:21" pos:end="181:44"><expr pos:start="181:21" pos:end="181:44"><call pos:start="181:21" pos:end="181:44"><name pos:start="181:21" pos:end="181:36">sysbus_from_qdev</name><argument_list pos:start="181:37" pos:end="181:44">(<argument pos:start="181:38" pos:end="181:43"><expr pos:start="181:38" pos:end="181:43"><name pos:start="181:38" pos:end="181:43">sysctl</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="181:47" pos:end="181:47"><expr pos:start="181:47" pos:end="181:47"><literal type="number" pos:start="181:47" pos:end="181:47">0</literal></expr></argument>, <argument pos:start="181:50" pos:end="181:59"><expr pos:start="181:50" pos:end="181:59"><literal type="number" pos:start="181:50" pos:end="181:59">0x10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="185:5" pos:end="221:5"><if pos:start="185:5" pos:end="213:5">if <condition pos:start="185:8" pos:end="185:18">(<expr pos:start="185:9" pos:end="185:17"><name pos:start="185:9" pos:end="185:17">is_mpcore</name></expr>)</condition> <block pos:start="185:20" pos:end="213:5">{<block_content pos:start="187:9" pos:end="211:9">

        <expr_stmt pos:start="187:9" pos:end="187:76"><expr pos:start="187:9" pos:end="187:75"><name pos:start="187:9" pos:end="187:11">dev</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:75"><name pos:start="187:15" pos:end="187:25">qdev_create</name><argument_list pos:start="187:26" pos:end="187:75">(<argument pos:start="187:27" pos:end="187:30"><expr pos:start="187:27" pos:end="187:30"><name pos:start="187:27" pos:end="187:30">NULL</name></expr></argument>, <argument pos:start="187:33" pos:end="187:74"><expr pos:start="187:33" pos:end="187:74"><ternary pos:start="187:33" pos:end="187:74"><condition pos:start="187:33" pos:end="187:39"><expr pos:start="187:33" pos:end="187:37"><name pos:start="187:33" pos:end="187:37">is_pb</name></expr> ?</condition><then pos:start="187:41" pos:end="187:55"> <expr pos:start="187:41" pos:end="187:55"><literal type="string" pos:start="187:41" pos:end="187:55">"a9mpcore_priv"</literal></expr></then><else pos:start="187:56" pos:end="187:74">: <expr pos:start="187:58" pos:end="187:74"><literal type="string" pos:start="187:58" pos:end="187:74">"realview_mpcore"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:55"><expr pos:start="189:9" pos:end="189:54"><call pos:start="189:9" pos:end="189:54"><name pos:start="189:9" pos:end="189:28">qdev_prop_set_uint32</name><argument_list pos:start="189:29" pos:end="189:54">(<argument pos:start="189:30" pos:end="189:32"><expr pos:start="189:30" pos:end="189:32"><name pos:start="189:30" pos:end="189:32">dev</name></expr></argument>, <argument pos:start="189:35" pos:end="189:43"><expr pos:start="189:35" pos:end="189:43"><literal type="string" pos:start="189:35" pos:end="189:43">"num-cpu"</literal></expr></argument>, <argument pos:start="189:46" pos:end="189:53"><expr pos:start="189:46" pos:end="189:53"><name pos:start="189:46" pos:end="189:53">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:30"><expr pos:start="191:9" pos:end="191:29"><call pos:start="191:9" pos:end="191:29"><name pos:start="191:9" pos:end="191:24">qdev_init_nofail</name><argument_list pos:start="191:25" pos:end="191:29">(<argument pos:start="191:26" pos:end="191:28"><expr pos:start="191:26" pos:end="191:28"><name pos:start="191:26" pos:end="191:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:39"><expr pos:start="193:9" pos:end="193:38"><name pos:start="193:9" pos:end="193:14">busdev</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <call pos:start="193:18" pos:end="193:38"><name pos:start="193:18" pos:end="193:33">sysbus_from_qdev</name><argument_list pos:start="193:34" pos:end="193:38">(<argument pos:start="193:35" pos:end="193:37"><expr pos:start="193:35" pos:end="193:37"><name pos:start="193:35" pos:end="193:37">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="203:9"><if pos:start="195:9" pos:end="199:9">if <condition pos:start="195:12" pos:end="195:18">(<expr pos:start="195:13" pos:end="195:17"><name pos:start="195:13" pos:end="195:17">is_pb</name></expr>)</condition> <block pos:start="195:20" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:54">

            <expr_stmt pos:start="197:13" pos:end="197:54"><expr pos:start="197:13" pos:end="197:53"><name pos:start="197:13" pos:end="197:40"><name pos:start="197:13" pos:end="197:26">realview_binfo</name><operator pos:start="197:27" pos:end="197:27">.</operator><name pos:start="197:28" pos:end="197:40">smp_priv_base</name></name> <operator pos:start="197:42" pos:end="197:42">=</operator> <literal type="number" pos:start="197:44" pos:end="197:53">0x1f000000</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="199:11" pos:end="203:9">else <block pos:start="199:16" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:54">

            <expr_stmt pos:start="201:13" pos:end="201:54"><expr pos:start="201:13" pos:end="201:53"><name pos:start="201:13" pos:end="201:40"><name pos:start="201:13" pos:end="201:26">realview_binfo</name><operator pos:start="201:27" pos:end="201:27">.</operator><name pos:start="201:28" pos:end="201:40">smp_priv_base</name></name> <operator pos:start="201:42" pos:end="201:42">=</operator> <literal type="number" pos:start="201:44" pos:end="201:53">0x10100000</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:65"><expr pos:start="205:9" pos:end="205:64"><call pos:start="205:9" pos:end="205:64"><name pos:start="205:9" pos:end="205:23">sysbus_mmio_map</name><argument_list pos:start="205:24" pos:end="205:64">(<argument pos:start="205:25" pos:end="205:30"><expr pos:start="205:25" pos:end="205:30"><name pos:start="205:25" pos:end="205:30">busdev</name></expr></argument>, <argument pos:start="205:33" pos:end="205:33"><expr pos:start="205:33" pos:end="205:33"><literal type="number" pos:start="205:33" pos:end="205:33">0</literal></expr></argument>, <argument pos:start="205:36" pos:end="205:63"><expr pos:start="205:36" pos:end="205:63"><name pos:start="205:36" pos:end="205:63"><name pos:start="205:36" pos:end="205:49">realview_binfo</name><operator pos:start="205:50" pos:end="205:50">.</operator><name pos:start="205:51" pos:end="205:63">smp_priv_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="207:9" pos:end="211:9">for <control pos:start="207:13" pos:end="207:38">(<init pos:start="207:14" pos:end="207:19"><expr pos:start="207:14" pos:end="207:18"><name pos:start="207:14" pos:end="207:14">n</name> <operator pos:start="207:16" pos:end="207:16">=</operator> <literal type="number" pos:start="207:18" pos:end="207:18">0</literal></expr>;</init> <condition pos:start="207:21" pos:end="207:33"><expr pos:start="207:21" pos:end="207:32"><name pos:start="207:21" pos:end="207:21">n</name> <operator pos:start="207:23" pos:end="207:23">&lt;</operator> <name pos:start="207:25" pos:end="207:32">smp_cpus</name></expr>;</condition> <incr pos:start="207:35" pos:end="207:37"><expr pos:start="207:35" pos:end="207:37"><name pos:start="207:35" pos:end="207:35">n</name><operator pos:start="207:36" pos:end="207:37">++</operator></expr></incr>)</control> <block pos:start="207:40" pos:end="211:9">{<block_content pos:start="209:13" pos:end="209:54">

            <expr_stmt pos:start="209:13" pos:end="209:54"><expr pos:start="209:13" pos:end="209:53"><call pos:start="209:13" pos:end="209:53"><name pos:start="209:13" pos:end="209:30">sysbus_connect_irq</name><argument_list pos:start="209:31" pos:end="209:53">(<argument pos:start="209:32" pos:end="209:37"><expr pos:start="209:32" pos:end="209:37"><name pos:start="209:32" pos:end="209:37">busdev</name></expr></argument>, <argument pos:start="209:40" pos:end="209:40"><expr pos:start="209:40" pos:end="209:40"><name pos:start="209:40" pos:end="209:40">n</name></expr></argument>, <argument pos:start="209:43" pos:end="209:52"><expr pos:start="209:43" pos:end="209:52"><name pos:start="209:43" pos:end="209:52"><name pos:start="209:43" pos:end="209:49">cpu_irq</name><index pos:start="209:50" pos:end="209:52">[<expr pos:start="209:51" pos:end="209:51"><name pos:start="209:51" pos:end="209:51">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="213:7" pos:end="221:5">else <block pos:start="213:12" pos:end="221:5">{<block_content pos:start="215:9" pos:end="219:73">

        <decl_stmt pos:start="215:9" pos:end="215:60"><decl pos:start="215:9" pos:end="215:59"><type pos:start="215:9" pos:end="215:16"><name pos:start="215:9" pos:end="215:16">uint32_t</name></type> <name pos:start="215:18" pos:end="215:25">gic_addr</name> <init pos:start="215:27" pos:end="215:59">= <expr pos:start="215:29" pos:end="215:59"><ternary pos:start="215:29" pos:end="215:59"><condition pos:start="215:29" pos:end="215:35"><expr pos:start="215:29" pos:end="215:33"><name pos:start="215:29" pos:end="215:33">is_pb</name></expr> ?</condition><then pos:start="215:37" pos:end="215:46"> <expr pos:start="215:37" pos:end="215:46"><literal type="number" pos:start="215:37" pos:end="215:46">0x1e000000</literal></expr> </then><else pos:start="215:48" pos:end="215:59">: <expr pos:start="215:50" pos:end="215:59"><literal type="number" pos:start="215:50" pos:end="215:59">0x10040000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="217:9" pos:end="217:71">/* For now just create the nIRQ GIC, and ignore the others.  */</comment>

        <expr_stmt pos:start="219:9" pos:end="219:73"><expr pos:start="219:9" pos:end="219:72"><name pos:start="219:9" pos:end="219:11">dev</name> <operator pos:start="219:13" pos:end="219:13">=</operator> <call pos:start="219:15" pos:end="219:72"><name pos:start="219:15" pos:end="219:34">sysbus_create_simple</name><argument_list pos:start="219:35" pos:end="219:72">(<argument pos:start="219:36" pos:end="219:49"><expr pos:start="219:36" pos:end="219:49"><literal type="string" pos:start="219:36" pos:end="219:49">"realview_gic"</literal></expr></argument>, <argument pos:start="219:52" pos:end="219:59"><expr pos:start="219:52" pos:end="219:59"><name pos:start="219:52" pos:end="219:59">gic_addr</name></expr></argument>, <argument pos:start="219:62" pos:end="219:71"><expr pos:start="219:62" pos:end="219:71"><name pos:start="219:62" pos:end="219:71"><name pos:start="219:62" pos:end="219:68">cpu_irq</name><index pos:start="219:69" pos:end="219:71">[<expr pos:start="219:70" pos:end="219:70"><literal type="number" pos:start="219:70" pos:end="219:70">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <for pos:start="223:5" pos:end="227:5">for <control pos:start="223:9" pos:end="223:28">(<init pos:start="223:10" pos:end="223:15"><expr pos:start="223:10" pos:end="223:14"><name pos:start="223:10" pos:end="223:10">n</name> <operator pos:start="223:12" pos:end="223:12">=</operator> <literal type="number" pos:start="223:14" pos:end="223:14">0</literal></expr>;</init> <condition pos:start="223:17" pos:end="223:23"><expr pos:start="223:17" pos:end="223:22"><name pos:start="223:17" pos:end="223:17">n</name> <operator pos:start="223:19" pos:end="223:19">&lt;</operator> <literal type="number" pos:start="223:21" pos:end="223:22">64</literal></expr>;</condition> <incr pos:start="223:25" pos:end="223:27"><expr pos:start="223:25" pos:end="223:27"><name pos:start="223:25" pos:end="223:25">n</name><operator pos:start="223:26" pos:end="223:27">++</operator></expr></incr>)</control> <block pos:start="223:30" pos:end="227:5">{<block_content pos:start="225:9" pos:end="225:42">

        <expr_stmt pos:start="225:9" pos:end="225:42"><expr pos:start="225:9" pos:end="225:41"><name pos:start="225:9" pos:end="225:14"><name pos:start="225:9" pos:end="225:11">pic</name><index pos:start="225:12" pos:end="225:14">[<expr pos:start="225:13" pos:end="225:13"><name pos:start="225:13" pos:end="225:13">n</name></expr>]</index></name> <operator pos:start="225:16" pos:end="225:16">=</operator> <call pos:start="225:18" pos:end="225:41"><name pos:start="225:18" pos:end="225:33">qdev_get_gpio_in</name><argument_list pos:start="225:34" pos:end="225:41">(<argument pos:start="225:35" pos:end="225:37"><expr pos:start="225:35" pos:end="225:37"><name pos:start="225:35" pos:end="225:37">dev</name></expr></argument>, <argument pos:start="225:40" pos:end="225:40"><expr pos:start="225:40" pos:end="225:40"><name pos:start="225:40" pos:end="225:40">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="231:5" pos:end="231:64"><expr pos:start="231:5" pos:end="231:63"><call pos:start="231:5" pos:end="231:63"><name pos:start="231:5" pos:end="231:24">sysbus_create_simple</name><argument_list pos:start="231:25" pos:end="231:63">(<argument pos:start="231:26" pos:end="231:41"><expr pos:start="231:26" pos:end="231:41"><literal type="string" pos:start="231:26" pos:end="231:41">"pl050_keyboard"</literal></expr></argument>, <argument pos:start="231:44" pos:end="231:53"><expr pos:start="231:44" pos:end="231:53"><literal type="number" pos:start="231:44" pos:end="231:53">0x10006000</literal></expr></argument>, <argument pos:start="231:56" pos:end="231:62"><expr pos:start="231:56" pos:end="231:62"><name pos:start="231:56" pos:end="231:62"><name pos:start="231:56" pos:end="231:58">pic</name><index pos:start="231:59" pos:end="231:62">[<expr pos:start="231:60" pos:end="231:61"><literal type="number" pos:start="231:60" pos:end="231:61">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:61"><expr pos:start="233:5" pos:end="233:60"><call pos:start="233:5" pos:end="233:60"><name pos:start="233:5" pos:end="233:24">sysbus_create_simple</name><argument_list pos:start="233:25" pos:end="233:60">(<argument pos:start="233:26" pos:end="233:38"><expr pos:start="233:26" pos:end="233:38"><literal type="string" pos:start="233:26" pos:end="233:38">"pl050_mouse"</literal></expr></argument>, <argument pos:start="233:41" pos:end="233:50"><expr pos:start="233:41" pos:end="233:50"><literal type="number" pos:start="233:41" pos:end="233:50">0x10007000</literal></expr></argument>, <argument pos:start="233:53" pos:end="233:59"><expr pos:start="233:53" pos:end="233:59"><name pos:start="233:53" pos:end="233:59"><name pos:start="233:53" pos:end="233:55">pic</name><index pos:start="233:56" pos:end="233:59">[<expr pos:start="233:57" pos:end="233:58"><literal type="number" pos:start="233:57" pos:end="233:58">21</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="237:5" pos:end="237:55"><expr pos:start="237:5" pos:end="237:54"><call pos:start="237:5" pos:end="237:54"><name pos:start="237:5" pos:end="237:24">sysbus_create_simple</name><argument_list pos:start="237:25" pos:end="237:54">(<argument pos:start="237:26" pos:end="237:32"><expr pos:start="237:26" pos:end="237:32"><literal type="string" pos:start="237:26" pos:end="237:32">"pl011"</literal></expr></argument>, <argument pos:start="237:35" pos:end="237:44"><expr pos:start="237:35" pos:end="237:44"><literal type="number" pos:start="237:35" pos:end="237:44">0x10009000</literal></expr></argument>, <argument pos:start="237:47" pos:end="237:53"><expr pos:start="237:47" pos:end="237:53"><name pos:start="237:47" pos:end="237:53"><name pos:start="237:47" pos:end="237:49">pic</name><index pos:start="237:50" pos:end="237:53">[<expr pos:start="237:51" pos:end="237:52"><literal type="number" pos:start="237:51" pos:end="237:52">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:55"><expr pos:start="239:5" pos:end="239:54"><call pos:start="239:5" pos:end="239:54"><name pos:start="239:5" pos:end="239:24">sysbus_create_simple</name><argument_list pos:start="239:25" pos:end="239:54">(<argument pos:start="239:26" pos:end="239:32"><expr pos:start="239:26" pos:end="239:32"><literal type="string" pos:start="239:26" pos:end="239:32">"pl011"</literal></expr></argument>, <argument pos:start="239:35" pos:end="239:44"><expr pos:start="239:35" pos:end="239:44"><literal type="number" pos:start="239:35" pos:end="239:44">0x1000a000</literal></expr></argument>, <argument pos:start="239:47" pos:end="239:53"><expr pos:start="239:47" pos:end="239:53"><name pos:start="239:47" pos:end="239:53"><name pos:start="239:47" pos:end="239:49">pic</name><index pos:start="239:50" pos:end="239:53">[<expr pos:start="239:51" pos:end="239:52"><literal type="number" pos:start="239:51" pos:end="239:52">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:55"><expr pos:start="241:5" pos:end="241:54"><call pos:start="241:5" pos:end="241:54"><name pos:start="241:5" pos:end="241:24">sysbus_create_simple</name><argument_list pos:start="241:25" pos:end="241:54">(<argument pos:start="241:26" pos:end="241:32"><expr pos:start="241:26" pos:end="241:32"><literal type="string" pos:start="241:26" pos:end="241:32">"pl011"</literal></expr></argument>, <argument pos:start="241:35" pos:end="241:44"><expr pos:start="241:35" pos:end="241:44"><literal type="number" pos:start="241:35" pos:end="241:44">0x1000b000</literal></expr></argument>, <argument pos:start="241:47" pos:end="241:53"><expr pos:start="241:47" pos:end="241:53"><name pos:start="241:47" pos:end="241:53"><name pos:start="241:47" pos:end="241:49">pic</name><index pos:start="241:50" pos:end="241:53">[<expr pos:start="241:51" pos:end="241:52"><literal type="number" pos:start="241:51" pos:end="241:52">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:55"><expr pos:start="243:5" pos:end="243:54"><call pos:start="243:5" pos:end="243:54"><name pos:start="243:5" pos:end="243:24">sysbus_create_simple</name><argument_list pos:start="243:25" pos:end="243:54">(<argument pos:start="243:26" pos:end="243:32"><expr pos:start="243:26" pos:end="243:32"><literal type="string" pos:start="243:26" pos:end="243:32">"pl011"</literal></expr></argument>, <argument pos:start="243:35" pos:end="243:44"><expr pos:start="243:35" pos:end="243:44"><literal type="number" pos:start="243:35" pos:end="243:44">0x1000c000</literal></expr></argument>, <argument pos:start="243:47" pos:end="243:53"><expr pos:start="243:47" pos:end="243:53"><name pos:start="243:47" pos:end="243:53"><name pos:start="243:47" pos:end="243:49">pic</name><index pos:start="243:50" pos:end="243:53">[<expr pos:start="243:51" pos:end="243:52"><literal type="number" pos:start="243:51" pos:end="243:52">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="247:5" pos:end="247:50">/* DMA controller is optional, apparently.  */</comment>

    <expr_stmt pos:start="249:5" pos:end="249:55"><expr pos:start="249:5" pos:end="249:54"><call pos:start="249:5" pos:end="249:54"><name pos:start="249:5" pos:end="249:24">sysbus_create_simple</name><argument_list pos:start="249:25" pos:end="249:54">(<argument pos:start="249:26" pos:end="249:32"><expr pos:start="249:26" pos:end="249:32"><literal type="string" pos:start="249:26" pos:end="249:32">"pl081"</literal></expr></argument>, <argument pos:start="249:35" pos:end="249:44"><expr pos:start="249:35" pos:end="249:44"><literal type="number" pos:start="249:35" pos:end="249:44">0x10030000</literal></expr></argument>, <argument pos:start="249:47" pos:end="249:53"><expr pos:start="249:47" pos:end="249:53"><name pos:start="249:47" pos:end="249:53"><name pos:start="249:47" pos:end="249:49">pic</name><index pos:start="249:50" pos:end="249:53">[<expr pos:start="249:51" pos:end="249:52"><literal type="number" pos:start="249:51" pos:end="249:52">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:54"><expr pos:start="253:5" pos:end="253:53"><call pos:start="253:5" pos:end="253:53"><name pos:start="253:5" pos:end="253:24">sysbus_create_simple</name><argument_list pos:start="253:25" pos:end="253:53">(<argument pos:start="253:26" pos:end="253:32"><expr pos:start="253:26" pos:end="253:32"><literal type="string" pos:start="253:26" pos:end="253:32">"sp804"</literal></expr></argument>, <argument pos:start="253:35" pos:end="253:44"><expr pos:start="253:35" pos:end="253:44"><literal type="number" pos:start="253:35" pos:end="253:44">0x10011000</literal></expr></argument>, <argument pos:start="253:47" pos:end="253:52"><expr pos:start="253:47" pos:end="253:52"><name pos:start="253:47" pos:end="253:52"><name pos:start="253:47" pos:end="253:49">pic</name><index pos:start="253:50" pos:end="253:52">[<expr pos:start="253:51" pos:end="253:51"><literal type="number" pos:start="253:51" pos:end="253:51">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:54"><expr pos:start="255:5" pos:end="255:53"><call pos:start="255:5" pos:end="255:53"><name pos:start="255:5" pos:end="255:24">sysbus_create_simple</name><argument_list pos:start="255:25" pos:end="255:53">(<argument pos:start="255:26" pos:end="255:32"><expr pos:start="255:26" pos:end="255:32"><literal type="string" pos:start="255:26" pos:end="255:32">"sp804"</literal></expr></argument>, <argument pos:start="255:35" pos:end="255:44"><expr pos:start="255:35" pos:end="255:44"><literal type="number" pos:start="255:35" pos:end="255:44">0x10012000</literal></expr></argument>, <argument pos:start="255:47" pos:end="255:52"><expr pos:start="255:47" pos:end="255:52"><name pos:start="255:47" pos:end="255:52"><name pos:start="255:47" pos:end="255:49">pic</name><index pos:start="255:50" pos:end="255:52">[<expr pos:start="255:51" pos:end="255:51"><literal type="number" pos:start="255:51" pos:end="255:51">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="259:5" pos:end="259:54"><expr pos:start="259:5" pos:end="259:53"><call pos:start="259:5" pos:end="259:53"><name pos:start="259:5" pos:end="259:24">sysbus_create_simple</name><argument_list pos:start="259:25" pos:end="259:53">(<argument pos:start="259:26" pos:end="259:32"><expr pos:start="259:26" pos:end="259:32"><literal type="string" pos:start="259:26" pos:end="259:32">"pl061"</literal></expr></argument>, <argument pos:start="259:35" pos:end="259:44"><expr pos:start="259:35" pos:end="259:44"><literal type="number" pos:start="259:35" pos:end="259:44">0x10013000</literal></expr></argument>, <argument pos:start="259:47" pos:end="259:52"><expr pos:start="259:47" pos:end="259:52"><name pos:start="259:47" pos:end="259:52"><name pos:start="259:47" pos:end="259:49">pic</name><index pos:start="259:50" pos:end="259:52">[<expr pos:start="259:51" pos:end="259:51"><literal type="number" pos:start="259:51" pos:end="259:51">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:54"><expr pos:start="261:5" pos:end="261:53"><call pos:start="261:5" pos:end="261:53"><name pos:start="261:5" pos:end="261:24">sysbus_create_simple</name><argument_list pos:start="261:25" pos:end="261:53">(<argument pos:start="261:26" pos:end="261:32"><expr pos:start="261:26" pos:end="261:32"><literal type="string" pos:start="261:26" pos:end="261:32">"pl061"</literal></expr></argument>, <argument pos:start="261:35" pos:end="261:44"><expr pos:start="261:35" pos:end="261:44"><literal type="number" pos:start="261:35" pos:end="261:44">0x10014000</literal></expr></argument>, <argument pos:start="261:47" pos:end="261:52"><expr pos:start="261:47" pos:end="261:52"><name pos:start="261:47" pos:end="261:52"><name pos:start="261:47" pos:end="261:49">pic</name><index pos:start="261:50" pos:end="261:52">[<expr pos:start="261:51" pos:end="261:51"><literal type="number" pos:start="261:51" pos:end="261:51">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:62"><expr pos:start="263:5" pos:end="263:61"><name pos:start="263:5" pos:end="263:9">gpio2</name> <operator pos:start="263:11" pos:end="263:11">=</operator> <call pos:start="263:13" pos:end="263:61"><name pos:start="263:13" pos:end="263:32">sysbus_create_simple</name><argument_list pos:start="263:33" pos:end="263:61">(<argument pos:start="263:34" pos:end="263:40"><expr pos:start="263:34" pos:end="263:40"><literal type="string" pos:start="263:34" pos:end="263:40">"pl061"</literal></expr></argument>, <argument pos:start="263:43" pos:end="263:52"><expr pos:start="263:43" pos:end="263:52"><literal type="number" pos:start="263:43" pos:end="263:52">0x10015000</literal></expr></argument>, <argument pos:start="263:55" pos:end="263:60"><expr pos:start="263:55" pos:end="263:60"><name pos:start="263:55" pos:end="263:60"><name pos:start="263:55" pos:end="263:57">pic</name><index pos:start="263:58" pos:end="263:60">[<expr pos:start="263:59" pos:end="263:59"><literal type="number" pos:start="263:59" pos:end="263:59">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="267:5" pos:end="267:55"><expr pos:start="267:5" pos:end="267:54"><call pos:start="267:5" pos:end="267:54"><name pos:start="267:5" pos:end="267:24">sysbus_create_simple</name><argument_list pos:start="267:25" pos:end="267:54">(<argument pos:start="267:26" pos:end="267:32"><expr pos:start="267:26" pos:end="267:32"><literal type="string" pos:start="267:26" pos:end="267:32">"pl111"</literal></expr></argument>, <argument pos:start="267:35" pos:end="267:44"><expr pos:start="267:35" pos:end="267:44"><literal type="number" pos:start="267:35" pos:end="267:44">0x10020000</literal></expr></argument>, <argument pos:start="267:47" pos:end="267:53"><expr pos:start="267:47" pos:end="267:53"><name pos:start="267:47" pos:end="267:53"><name pos:start="267:47" pos:end="267:49">pic</name><index pos:start="267:50" pos:end="267:53">[<expr pos:start="267:51" pos:end="267:52"><literal type="number" pos:start="267:51" pos:end="267:52">23</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="271:5" pos:end="271:77"><expr pos:start="271:5" pos:end="271:76"><name pos:start="271:5" pos:end="271:7">dev</name> <operator pos:start="271:9" pos:end="271:9">=</operator> <call pos:start="271:11" pos:end="271:76"><name pos:start="271:11" pos:end="271:31">sysbus_create_varargs</name><argument_list pos:start="271:32" pos:end="271:76">(<argument pos:start="271:33" pos:end="271:39"><expr pos:start="271:33" pos:end="271:39"><literal type="string" pos:start="271:33" pos:end="271:39">"pl181"</literal></expr></argument>, <argument pos:start="271:42" pos:end="271:51"><expr pos:start="271:42" pos:end="271:51"><literal type="number" pos:start="271:42" pos:end="271:51">0x10005000</literal></expr></argument>, <argument pos:start="271:54" pos:end="271:60"><expr pos:start="271:54" pos:end="271:60"><name pos:start="271:54" pos:end="271:60"><name pos:start="271:54" pos:end="271:56">pic</name><index pos:start="271:57" pos:end="271:60">[<expr pos:start="271:58" pos:end="271:59"><literal type="number" pos:start="271:58" pos:end="271:59">17</literal></expr>]</index></name></expr></argument>, <argument pos:start="271:63" pos:end="271:69"><expr pos:start="271:63" pos:end="271:69"><name pos:start="271:63" pos:end="271:69"><name pos:start="271:63" pos:end="271:65">pic</name><index pos:start="271:66" pos:end="271:69">[<expr pos:start="271:67" pos:end="271:68"><literal type="number" pos:start="271:67" pos:end="271:68">18</literal></expr>]</index></name></expr></argument>, <argument pos:start="271:72" pos:end="271:75"><expr pos:start="271:72" pos:end="271:75"><name pos:start="271:72" pos:end="271:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="273:5" pos:end="283:7">/* Wire up MMC card detect and read-only signals. These have

     * to go to both the PL061 GPIO and the sysctl register.

     * Note that the PL181 orders these lines (readonly,inserted)

     * and the PL061 has them the other way about. Also the card

     * detect line is inverted.

     */</comment>

    <expr_stmt pos:start="285:5" pos:end="289:36"><expr pos:start="285:5" pos:end="289:35"><name pos:start="285:5" pos:end="285:14"><name pos:start="285:5" pos:end="285:11">mmc_irq</name><index pos:start="285:12" pos:end="285:14">[<expr pos:start="285:13" pos:end="285:13"><literal type="number" pos:start="285:13" pos:end="285:13">0</literal></expr>]</index></name> <operator pos:start="285:16" pos:end="285:16">=</operator> <call pos:start="285:18" pos:end="289:35"><name pos:start="285:18" pos:end="285:31">qemu_irq_split</name><argument_list pos:start="285:32" pos:end="289:35">(

        <argument pos:start="287:9" pos:end="287:59"><expr pos:start="287:9" pos:end="287:59"><call pos:start="287:9" pos:end="287:59"><name pos:start="287:9" pos:end="287:24">qdev_get_gpio_in</name><argument_list pos:start="287:25" pos:end="287:59">(<argument pos:start="287:26" pos:end="287:31"><expr pos:start="287:26" pos:end="287:31"><name pos:start="287:26" pos:end="287:31">sysctl</name></expr></argument>, <argument pos:start="287:34" pos:end="287:58"><expr pos:start="287:34" pos:end="287:58"><name pos:start="287:34" pos:end="287:58">ARM_SYSCTL_GPIO_MMC_WPROT</name></expr></argument>)</argument_list></call></expr></argument>,

        <argument pos:start="289:9" pos:end="289:34"><expr pos:start="289:9" pos:end="289:34"><call pos:start="289:9" pos:end="289:34"><name pos:start="289:9" pos:end="289:24">qdev_get_gpio_in</name><argument_list pos:start="289:25" pos:end="289:34">(<argument pos:start="289:26" pos:end="289:30"><expr pos:start="289:26" pos:end="289:30"><name pos:start="289:26" pos:end="289:30">gpio2</name></expr></argument>, <argument pos:start="289:33" pos:end="289:33"><expr pos:start="289:33" pos:end="289:33"><literal type="number" pos:start="289:33" pos:end="289:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="295:53"><expr pos:start="291:5" pos:end="295:52"><name pos:start="291:5" pos:end="291:14"><name pos:start="291:5" pos:end="291:11">mmc_irq</name><index pos:start="291:12" pos:end="291:14">[<expr pos:start="291:13" pos:end="291:13"><literal type="number" pos:start="291:13" pos:end="291:13">1</literal></expr>]</index></name> <operator pos:start="291:16" pos:end="291:16">=</operator> <call pos:start="291:18" pos:end="295:52"><name pos:start="291:18" pos:end="291:31">qemu_irq_split</name><argument_list pos:start="291:32" pos:end="295:52">(

        <argument pos:start="293:9" pos:end="293:60"><expr pos:start="293:9" pos:end="293:60"><call pos:start="293:9" pos:end="293:60"><name pos:start="293:9" pos:end="293:24">qdev_get_gpio_in</name><argument_list pos:start="293:25" pos:end="293:60">(<argument pos:start="293:26" pos:end="293:31"><expr pos:start="293:26" pos:end="293:31"><name pos:start="293:26" pos:end="293:31">sysctl</name></expr></argument>, <argument pos:start="293:34" pos:end="293:59"><expr pos:start="293:34" pos:end="293:59"><name pos:start="293:34" pos:end="293:59">ARM_SYSCTL_GPIO_MMC_CARDIN</name></expr></argument>)</argument_list></call></expr></argument>,

        <argument pos:start="295:9" pos:end="295:51"><expr pos:start="295:9" pos:end="295:51"><call pos:start="295:9" pos:end="295:51"><name pos:start="295:9" pos:end="295:23">qemu_irq_invert</name><argument_list pos:start="295:24" pos:end="295:51">(<argument pos:start="295:25" pos:end="295:50"><expr pos:start="295:25" pos:end="295:50"><call pos:start="295:25" pos:end="295:50"><name pos:start="295:25" pos:end="295:40">qdev_get_gpio_in</name><argument_list pos:start="295:41" pos:end="295:50">(<argument pos:start="295:42" pos:end="295:46"><expr pos:start="295:42" pos:end="295:46"><name pos:start="295:42" pos:end="295:46">gpio2</name></expr></argument>, <argument pos:start="295:49" pos:end="295:49"><expr pos:start="295:49" pos:end="295:49"><literal type="number" pos:start="295:49" pos:end="295:49">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:46"><expr pos:start="297:5" pos:end="297:45"><call pos:start="297:5" pos:end="297:45"><name pos:start="297:5" pos:end="297:25">qdev_connect_gpio_out</name><argument_list pos:start="297:26" pos:end="297:45">(<argument pos:start="297:27" pos:end="297:29"><expr pos:start="297:27" pos:end="297:29"><name pos:start="297:27" pos:end="297:29">dev</name></expr></argument>, <argument pos:start="297:32" pos:end="297:32"><expr pos:start="297:32" pos:end="297:32"><literal type="number" pos:start="297:32" pos:end="297:32">0</literal></expr></argument>, <argument pos:start="297:35" pos:end="297:44"><expr pos:start="297:35" pos:end="297:44"><name pos:start="297:35" pos:end="297:44"><name pos:start="297:35" pos:end="297:41">mmc_irq</name><index pos:start="297:42" pos:end="297:44">[<expr pos:start="297:43" pos:end="297:43"><literal type="number" pos:start="297:43" pos:end="297:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:46"><expr pos:start="299:5" pos:end="299:45"><call pos:start="299:5" pos:end="299:45"><name pos:start="299:5" pos:end="299:25">qdev_connect_gpio_out</name><argument_list pos:start="299:26" pos:end="299:45">(<argument pos:start="299:27" pos:end="299:29"><expr pos:start="299:27" pos:end="299:29"><name pos:start="299:27" pos:end="299:29">dev</name></expr></argument>, <argument pos:start="299:32" pos:end="299:32"><expr pos:start="299:32" pos:end="299:32"><literal type="number" pos:start="299:32" pos:end="299:32">1</literal></expr></argument>, <argument pos:start="299:35" pos:end="299:44"><expr pos:start="299:35" pos:end="299:44"><name pos:start="299:35" pos:end="299:44"><name pos:start="299:35" pos:end="299:41">mmc_irq</name><index pos:start="299:42" pos:end="299:44">[<expr pos:start="299:43" pos:end="299:43"><literal type="number" pos:start="299:43" pos:end="299:43">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="303:5" pos:end="303:55"><expr pos:start="303:5" pos:end="303:54"><call pos:start="303:5" pos:end="303:54"><name pos:start="303:5" pos:end="303:24">sysbus_create_simple</name><argument_list pos:start="303:25" pos:end="303:54">(<argument pos:start="303:26" pos:end="303:32"><expr pos:start="303:26" pos:end="303:32"><literal type="string" pos:start="303:26" pos:end="303:32">"pl031"</literal></expr></argument>, <argument pos:start="303:35" pos:end="303:44"><expr pos:start="303:35" pos:end="303:44"><literal type="number" pos:start="303:35" pos:end="303:44">0x10017000</literal></expr></argument>, <argument pos:start="303:47" pos:end="303:53"><expr pos:start="303:47" pos:end="303:53"><name pos:start="303:47" pos:end="303:53"><name pos:start="303:47" pos:end="303:49">pic</name><index pos:start="303:50" pos:end="303:53">[<expr pos:start="303:51" pos:end="303:52"><literal type="number" pos:start="303:51" pos:end="303:52">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="307:5" pos:end="331:5"><if pos:start="307:5" pos:end="331:5">if <condition pos:start="307:8" pos:end="307:15">(<expr pos:start="307:9" pos:end="307:14"><operator pos:start="307:9" pos:end="307:9">!</operator><name pos:start="307:10" pos:end="307:14">is_pb</name></expr>)</condition> <block pos:start="307:17" pos:end="331:5">{<block_content pos:start="309:9" pos:end="329:9">

        <expr_stmt pos:start="309:9" pos:end="311:78"><expr pos:start="309:9" pos:end="311:77"><name pos:start="309:9" pos:end="309:11">dev</name> <operator pos:start="309:13" pos:end="309:13">=</operator> <call pos:start="309:15" pos:end="311:77"><name pos:start="309:15" pos:end="309:35">sysbus_create_varargs</name><argument_list pos:start="309:36" pos:end="311:77">(<argument pos:start="309:37" pos:end="309:50"><expr pos:start="309:37" pos:end="309:50"><literal type="string" pos:start="309:37" pos:end="309:50">"realview_pci"</literal></expr></argument>, <argument pos:start="309:53" pos:end="309:62"><expr pos:start="309:53" pos:end="309:62"><literal type="number" pos:start="309:53" pos:end="309:62">0x60000000</literal></expr></argument>,

                                    <argument pos:start="311:37" pos:end="311:43"><expr pos:start="311:37" pos:end="311:43"><name pos:start="311:37" pos:end="311:43"><name pos:start="311:37" pos:end="311:39">pic</name><index pos:start="311:40" pos:end="311:43">[<expr pos:start="311:41" pos:end="311:42"><literal type="number" pos:start="311:41" pos:end="311:42">48</literal></expr>]</index></name></expr></argument>, <argument pos:start="311:46" pos:end="311:52"><expr pos:start="311:46" pos:end="311:52"><name pos:start="311:46" pos:end="311:52"><name pos:start="311:46" pos:end="311:48">pic</name><index pos:start="311:49" pos:end="311:52">[<expr pos:start="311:50" pos:end="311:51"><literal type="number" pos:start="311:50" pos:end="311:51">49</literal></expr>]</index></name></expr></argument>, <argument pos:start="311:55" pos:end="311:61"><expr pos:start="311:55" pos:end="311:61"><name pos:start="311:55" pos:end="311:61"><name pos:start="311:55" pos:end="311:57">pic</name><index pos:start="311:58" pos:end="311:61">[<expr pos:start="311:59" pos:end="311:60"><literal type="number" pos:start="311:59" pos:end="311:60">50</literal></expr>]</index></name></expr></argument>, <argument pos:start="311:64" pos:end="311:70"><expr pos:start="311:64" pos:end="311:70"><name pos:start="311:64" pos:end="311:70"><name pos:start="311:64" pos:end="311:66">pic</name><index pos:start="311:67" pos:end="311:70">[<expr pos:start="311:68" pos:end="311:69"><literal type="number" pos:start="311:68" pos:end="311:69">51</literal></expr>]</index></name></expr></argument>, <argument pos:start="311:73" pos:end="311:76"><expr pos:start="311:73" pos:end="311:76"><name pos:start="311:73" pos:end="311:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="313:9" pos:end="313:59"><expr pos:start="313:9" pos:end="313:58"><name pos:start="313:9" pos:end="313:15">pci_bus</name> <operator pos:start="313:17" pos:end="313:17">=</operator> <operator pos:start="313:19" pos:end="313:19">(</operator><name pos:start="313:20" pos:end="313:25">PCIBus</name> <operator pos:start="313:27" pos:end="313:27">*</operator><operator pos:start="313:28" pos:end="313:28">)</operator><call pos:start="313:29" pos:end="313:58"><name pos:start="313:29" pos:end="313:46">qdev_get_child_bus</name><argument_list pos:start="313:47" pos:end="313:58">(<argument pos:start="313:48" pos:end="313:50"><expr pos:start="313:48" pos:end="313:50"><name pos:start="313:48" pos:end="313:50">dev</name></expr></argument>, <argument pos:start="313:53" pos:end="313:57"><expr pos:start="313:53" pos:end="313:57"><literal type="string" pos:start="313:53" pos:end="313:57">"pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="315:9" pos:end="319:9"><if pos:start="315:9" pos:end="319:9">if <condition pos:start="315:12" pos:end="315:24">(<expr pos:start="315:13" pos:end="315:23"><name pos:start="315:13" pos:end="315:23">usb_enabled</name></expr>)</condition> <block pos:start="315:26" pos:end="319:9">{<block_content pos:start="317:13" pos:end="317:43">

            <expr_stmt pos:start="317:13" pos:end="317:43"><expr pos:start="317:13" pos:end="317:42"><call pos:start="317:13" pos:end="317:42"><name pos:start="317:13" pos:end="317:29">usb_ohci_init_pci</name><argument_list pos:start="317:30" pos:end="317:42">(<argument pos:start="317:31" pos:end="317:37"><expr pos:start="317:31" pos:end="317:37"><name pos:start="317:31" pos:end="317:37">pci_bus</name></expr></argument>, <argument pos:start="317:40" pos:end="317:41"><expr pos:start="317:40" pos:end="317:41"><operator pos:start="317:40" pos:end="317:40">-</operator><literal type="number" pos:start="317:41" pos:end="317:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:39"><expr pos:start="321:9" pos:end="321:38"><name pos:start="321:9" pos:end="321:9">n</name> <operator pos:start="321:11" pos:end="321:11">=</operator> <call pos:start="321:13" pos:end="321:38"><name pos:start="321:13" pos:end="321:29">drive_get_max_bus</name><argument_list pos:start="321:30" pos:end="321:38">(<argument pos:start="321:31" pos:end="321:37"><expr pos:start="321:31" pos:end="321:37"><name pos:start="321:31" pos:end="321:37">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="323:9" pos:end="329:9">while <condition pos:start="323:15" pos:end="323:22">(<expr pos:start="323:16" pos:end="323:21"><name pos:start="323:16" pos:end="323:16">n</name> <operator pos:start="323:18" pos:end="323:19">&gt;=</operator> <literal type="number" pos:start="323:21" pos:end="323:21">0</literal></expr>)</condition> <block pos:start="323:24" pos:end="329:9">{<block_content pos:start="325:13" pos:end="327:16">

            <expr_stmt pos:start="325:13" pos:end="325:57"><expr pos:start="325:13" pos:end="325:56"><call pos:start="325:13" pos:end="325:56"><name pos:start="325:13" pos:end="325:29">pci_create_simple</name><argument_list pos:start="325:30" pos:end="325:56">(<argument pos:start="325:31" pos:end="325:37"><expr pos:start="325:31" pos:end="325:37"><name pos:start="325:31" pos:end="325:37">pci_bus</name></expr></argument>, <argument pos:start="325:40" pos:end="325:41"><expr pos:start="325:40" pos:end="325:41"><operator pos:start="325:40" pos:end="325:40">-</operator><literal type="number" pos:start="325:41" pos:end="325:41">1</literal></expr></argument>, <argument pos:start="325:44" pos:end="325:55"><expr pos:start="325:44" pos:end="325:55"><literal type="string" pos:start="325:44" pos:end="325:55">"lsi53c895a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:16"><expr pos:start="327:13" pos:end="327:15"><name pos:start="327:13" pos:end="327:13">n</name><operator pos:start="327:14" pos:end="327:15">--</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>

    <for pos:start="333:5" pos:end="361:5">for<control pos:start="333:8" pos:end="333:32">(<init pos:start="333:9" pos:end="333:14"><expr pos:start="333:9" pos:end="333:13"><name pos:start="333:9" pos:end="333:9">n</name> <operator pos:start="333:11" pos:end="333:11">=</operator> <literal type="number" pos:start="333:13" pos:end="333:13">0</literal></expr>;</init> <condition pos:start="333:16" pos:end="333:27"><expr pos:start="333:16" pos:end="333:26"><name pos:start="333:16" pos:end="333:16">n</name> <operator pos:start="333:18" pos:end="333:18">&lt;</operator> <name pos:start="333:20" pos:end="333:26">nb_nics</name></expr>;</condition> <incr pos:start="333:29" pos:end="333:31"><expr pos:start="333:29" pos:end="333:31"><name pos:start="333:29" pos:end="333:29">n</name><operator pos:start="333:30" pos:end="333:31">++</operator></expr></incr>)</control> <block pos:start="333:34" pos:end="361:5">{<block_content pos:start="335:9" pos:end="359:9">

        <expr_stmt pos:start="335:9" pos:end="335:26"><expr pos:start="335:9" pos:end="335:25"><name pos:start="335:9" pos:end="335:10">nd</name> <operator pos:start="335:12" pos:end="335:12">=</operator> <operator pos:start="335:14" pos:end="335:14">&amp;</operator><name pos:start="335:15" pos:end="335:25"><name pos:start="335:15" pos:end="335:22">nd_table</name><index pos:start="335:23" pos:end="335:25">[<expr pos:start="335:24" pos:end="335:24"><name pos:start="335:24" pos:end="335:24">n</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="339:9" pos:end="359:9"><if pos:start="339:9" pos:end="355:9">if <condition pos:start="339:12" pos:end="341:77">(<expr pos:start="339:13" pos:end="341:76"><operator pos:start="339:13" pos:end="339:13">!</operator><name pos:start="339:14" pos:end="339:21">done_nic</name> <operator pos:start="339:23" pos:end="339:24">&amp;&amp;</operator> <operator pos:start="339:26" pos:end="339:26">(</operator><operator pos:start="339:27" pos:end="339:27">!</operator><name pos:start="339:28" pos:end="339:36"><name pos:start="339:28" pos:end="339:29">nd</name><operator pos:start="339:30" pos:end="339:31">-&gt;</operator><name pos:start="339:32" pos:end="339:36">model</name></name> <operator pos:start="339:38" pos:end="339:39">||</operator>

                    <call pos:start="341:21" pos:end="341:70"><name pos:start="341:21" pos:end="341:26">strcmp</name><argument_list pos:start="341:27" pos:end="341:70">(<argument pos:start="341:28" pos:end="341:36"><expr pos:start="341:28" pos:end="341:36"><name pos:start="341:28" pos:end="341:36"><name pos:start="341:28" pos:end="341:29">nd</name><operator pos:start="341:30" pos:end="341:31">-&gt;</operator><name pos:start="341:32" pos:end="341:36">model</name></name></expr></argument>, <argument pos:start="341:39" pos:end="341:69"><expr pos:start="341:39" pos:end="341:69"><ternary pos:start="341:39" pos:end="341:69"><condition pos:start="341:39" pos:end="341:45"><expr pos:start="341:39" pos:end="341:43"><name pos:start="341:39" pos:end="341:43">is_pb</name></expr> ?</condition><then pos:start="341:47" pos:end="341:55"> <expr pos:start="341:47" pos:end="341:55"><literal type="string" pos:start="341:47" pos:end="341:55">"lan9118"</literal></expr> </then><else pos:start="341:57" pos:end="341:69">: <expr pos:start="341:59" pos:end="341:69"><literal type="string" pos:start="341:59" pos:end="341:69">"smc91c111"</literal></expr></else></ternary></expr></argument>)</argument_list></call> <operator pos:start="341:72" pos:end="341:73">==</operator> <literal type="number" pos:start="341:75" pos:end="341:75">0</literal><operator pos:start="341:76" pos:end="341:76">)</operator></expr>)</condition> <block pos:start="341:79" pos:end="355:9">{<block_content pos:start="343:13" pos:end="353:25">

            <if_stmt pos:start="343:13" pos:end="351:13"><if pos:start="343:13" pos:end="347:13">if <condition pos:start="343:16" pos:end="343:22">(<expr pos:start="343:17" pos:end="343:21"><name pos:start="343:17" pos:end="343:21">is_pb</name></expr>)</condition> <block pos:start="343:24" pos:end="347:13">{<block_content pos:start="345:17" pos:end="345:54">

                <expr_stmt pos:start="345:17" pos:end="345:54"><expr pos:start="345:17" pos:end="345:53"><call pos:start="345:17" pos:end="345:53"><name pos:start="345:17" pos:end="345:28">lan9118_init</name><argument_list pos:start="345:29" pos:end="345:53">(<argument pos:start="345:30" pos:end="345:31"><expr pos:start="345:30" pos:end="345:31"><name pos:start="345:30" pos:end="345:31">nd</name></expr></argument>, <argument pos:start="345:34" pos:end="345:43"><expr pos:start="345:34" pos:end="345:43"><literal type="number" pos:start="345:34" pos:end="345:43">0x4e000000</literal></expr></argument>, <argument pos:start="345:46" pos:end="345:52"><expr pos:start="345:46" pos:end="345:52"><name pos:start="345:46" pos:end="345:52"><name pos:start="345:46" pos:end="345:48">pic</name><index pos:start="345:49" pos:end="345:52">[<expr pos:start="345:50" pos:end="345:51"><literal type="number" pos:start="345:50" pos:end="345:51">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="347:15" pos:end="351:13">else <block pos:start="347:20" pos:end="351:13">{<block_content pos:start="349:17" pos:end="349:56">

                <expr_stmt pos:start="349:17" pos:end="349:56"><expr pos:start="349:17" pos:end="349:55"><call pos:start="349:17" pos:end="349:55"><name pos:start="349:17" pos:end="349:30">smc91c111_init</name><argument_list pos:start="349:31" pos:end="349:55">(<argument pos:start="349:32" pos:end="349:33"><expr pos:start="349:32" pos:end="349:33"><name pos:start="349:32" pos:end="349:33">nd</name></expr></argument>, <argument pos:start="349:36" pos:end="349:45"><expr pos:start="349:36" pos:end="349:45"><literal type="number" pos:start="349:36" pos:end="349:45">0x4e000000</literal></expr></argument>, <argument pos:start="349:48" pos:end="349:54"><expr pos:start="349:48" pos:end="349:54"><name pos:start="349:48" pos:end="349:54"><name pos:start="349:48" pos:end="349:50">pic</name><index pos:start="349:51" pos:end="349:54">[<expr pos:start="349:52" pos:end="349:53"><literal type="number" pos:start="349:52" pos:end="349:53">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:25"><expr pos:start="353:13" pos:end="353:24"><name pos:start="353:13" pos:end="353:20">done_nic</name> <operator pos:start="353:22" pos:end="353:22">=</operator> <literal type="number" pos:start="353:24" pos:end="353:24">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="355:11" pos:end="359:9">else <block pos:start="355:16" pos:end="359:9">{<block_content pos:start="357:13" pos:end="357:53">

            <expr_stmt pos:start="357:13" pos:end="357:53"><expr pos:start="357:13" pos:end="357:52"><call pos:start="357:13" pos:end="357:52"><name pos:start="357:13" pos:end="357:31">pci_nic_init_nofail</name><argument_list pos:start="357:32" pos:end="357:52">(<argument pos:start="357:33" pos:end="357:34"><expr pos:start="357:33" pos:end="357:34"><name pos:start="357:33" pos:end="357:34">nd</name></expr></argument>, <argument pos:start="357:37" pos:end="357:45"><expr pos:start="357:37" pos:end="357:45"><literal type="string" pos:start="357:37" pos:end="357:45">"rtl8139"</literal></expr></argument>, <argument pos:start="357:48" pos:end="357:51"><expr pos:start="357:48" pos:end="357:51"><name pos:start="357:48" pos:end="357:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="365:5" pos:end="365:65"><expr pos:start="365:5" pos:end="365:64"><name pos:start="365:5" pos:end="365:7">dev</name> <operator pos:start="365:9" pos:end="365:9">=</operator> <call pos:start="365:11" pos:end="365:64"><name pos:start="365:11" pos:end="365:30">sysbus_create_simple</name><argument_list pos:start="365:31" pos:end="365:64">(<argument pos:start="365:32" pos:end="365:45"><expr pos:start="365:32" pos:end="365:45"><literal type="string" pos:start="365:32" pos:end="365:45">"realview_i2c"</literal></expr></argument>, <argument pos:start="365:48" pos:end="365:57"><expr pos:start="365:48" pos:end="365:57"><literal type="number" pos:start="365:48" pos:end="365:57">0x10002000</literal></expr></argument>, <argument pos:start="365:60" pos:end="365:63"><expr pos:start="365:60" pos:end="365:63"><name pos:start="365:60" pos:end="365:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="367:5" pos:end="367:52"><expr pos:start="367:5" pos:end="367:51"><name pos:start="367:5" pos:end="367:7">i2c</name> <operator pos:start="367:9" pos:end="367:9">=</operator> <operator pos:start="367:11" pos:end="367:11">(</operator><name pos:start="367:12" pos:end="367:18">i2c_bus</name> <operator pos:start="367:20" pos:end="367:20">*</operator><operator pos:start="367:21" pos:end="367:21">)</operator><call pos:start="367:22" pos:end="367:51"><name pos:start="367:22" pos:end="367:39">qdev_get_child_bus</name><argument_list pos:start="367:40" pos:end="367:51">(<argument pos:start="367:41" pos:end="367:43"><expr pos:start="367:41" pos:end="367:43"><name pos:start="367:41" pos:end="367:43">dev</name></expr></argument>, <argument pos:start="367:46" pos:end="367:50"><expr pos:start="367:46" pos:end="367:50"><literal type="string" pos:start="367:46" pos:end="367:50">"i2c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:42"><expr pos:start="369:5" pos:end="369:41"><call pos:start="369:5" pos:end="369:41"><name pos:start="369:5" pos:end="369:20">i2c_create_slave</name><argument_list pos:start="369:21" pos:end="369:41">(<argument pos:start="369:22" pos:end="369:24"><expr pos:start="369:22" pos:end="369:24"><name pos:start="369:22" pos:end="369:24">i2c</name></expr></argument>, <argument pos:start="369:27" pos:end="369:34"><expr pos:start="369:27" pos:end="369:34"><literal type="string" pos:start="369:27" pos:end="369:34">"ds1338"</literal></expr></argument>, <argument pos:start="369:37" pos:end="369:40"><expr pos:start="369:37" pos:end="369:40"><literal type="number" pos:start="369:37" pos:end="369:40">0x68</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="373:5" pos:end="373:55">/* Memory map for RealView Emulation Baseboard:  */</comment>

    <comment type="block" pos:start="375:5" pos:end="375:39">/* 0x10000000 System registers.  */</comment>

    <comment type="block" pos:start="377:5" pos:end="377:41">/*  0x10001000 System controller.  */</comment>

    <comment type="block" pos:start="379:5" pos:end="379:42">/* 0x10002000 Two-Wire Serial Bus.  */</comment>

    <comment type="block" pos:start="381:5" pos:end="381:31">/* 0x10003000 Reserved.  */</comment>

    <comment type="block" pos:start="383:5" pos:end="383:28">/*  0x10004000 AACI.  */</comment>

    <comment type="block" pos:start="385:5" pos:end="385:27">/*  0x10005000 MCI.  */</comment>

    <comment type="block" pos:start="387:5" pos:end="387:27">/* 0x10006000 KMI0.  */</comment>

    <comment type="block" pos:start="389:5" pos:end="389:27">/* 0x10007000 KMI1.  */</comment>

    <comment type="block" pos:start="391:5" pos:end="391:41">/*  0x10008000 Character LCD. (EB) */</comment>

    <comment type="block" pos:start="393:5" pos:end="393:28">/* 0x10009000 UART0.  */</comment>

    <comment type="block" pos:start="395:5" pos:end="395:28">/* 0x1000a000 UART1.  */</comment>

    <comment type="block" pos:start="397:5" pos:end="397:28">/* 0x1000b000 UART2.  */</comment>

    <comment type="block" pos:start="399:5" pos:end="399:28">/* 0x1000c000 UART3.  */</comment>

    <comment type="block" pos:start="401:5" pos:end="401:28">/*  0x1000d000 SSPI.  */</comment>

    <comment type="block" pos:start="403:5" pos:end="403:27">/*  0x1000e000 SCI.  */</comment>

    <comment type="block" pos:start="405:5" pos:end="405:31">/* 0x1000f000 Reserved.  */</comment>

    <comment type="block" pos:start="407:5" pos:end="407:32">/*  0x10010000 Watchdog.  */</comment>

    <comment type="block" pos:start="409:5" pos:end="409:32">/* 0x10011000 Timer 0+1.  */</comment>

    <comment type="block" pos:start="411:5" pos:end="411:32">/* 0x10012000 Timer 2+3.  */</comment>

    <comment type="block" pos:start="413:5" pos:end="413:30">/*  0x10013000 GPIO 0.  */</comment>

    <comment type="block" pos:start="415:5" pos:end="415:30">/*  0x10014000 GPIO 1.  */</comment>

    <comment type="block" pos:start="417:5" pos:end="417:30">/*  0x10015000 GPIO 2.  */</comment>

    <comment type="block" pos:start="419:5" pos:end="419:53">/*  0x10002000 Two-Wire Serial Bus - DVI. (PB) */</comment>

    <comment type="block" pos:start="421:5" pos:end="421:26">/* 0x10017000 RTC.  */</comment>

    <comment type="block" pos:start="423:5" pos:end="423:27">/*  0x10018000 DMC.  */</comment>

    <comment type="block" pos:start="425:5" pos:end="425:45">/*  0x10019000 PCI controller config.  */</comment>

    <comment type="block" pos:start="427:5" pos:end="427:28">/*  0x10020000 CLCD.  */</comment>

    <comment type="block" pos:start="429:5" pos:end="429:37">/* 0x10030000 DMA Controller.  */</comment>

    <comment type="block" pos:start="431:5" pos:end="431:31">/* 0x10040000 GIC1. (EB) */</comment>

    <comment type="block" pos:start="433:5" pos:end="433:32">/*  0x10050000 GIC2. (EB) */</comment>

    <comment type="block" pos:start="435:5" pos:end="435:32">/*  0x10060000 GIC3. (EB) */</comment>

    <comment type="block" pos:start="437:5" pos:end="437:32">/*  0x10070000 GIC4. (EB) */</comment>

    <comment type="block" pos:start="439:5" pos:end="439:27">/*  0x10080000 SMC.  */</comment>

    <comment type="block" pos:start="441:5" pos:end="441:31">/* 0x1e000000 GIC1. (PB) */</comment>

    <comment type="block" pos:start="443:5" pos:end="443:32">/*  0x1e001000 GIC2. (PB) */</comment>

    <comment type="block" pos:start="445:5" pos:end="445:32">/*  0x1e002000 GIC3. (PB) */</comment>

    <comment type="block" pos:start="447:5" pos:end="447:32">/*  0x1e003000 GIC4. (PB) */</comment>

    <comment type="block" pos:start="449:5" pos:end="449:33">/*  0x40000000 NOR flash.  */</comment>

    <comment type="block" pos:start="451:5" pos:end="451:33">/*  0x44000000 DoC flash.  */</comment>

    <comment type="block" pos:start="453:5" pos:end="453:28">/*  0x48000000 SRAM.  */</comment>

    <comment type="block" pos:start="455:5" pos:end="455:43">/*  0x4c000000 Configuration flash.  */</comment>

    <comment type="block" pos:start="457:5" pos:end="457:31">/* 0x4e000000 Ethernet.  */</comment>

    <comment type="block" pos:start="459:5" pos:end="459:27">/*  0x4f000000 USB.  */</comment>

    <comment type="block" pos:start="461:5" pos:end="461:29">/*  0x50000000 PISMO.  */</comment>

    <comment type="block" pos:start="463:5" pos:end="463:29">/*  0x54000000 PISMO.  */</comment>

    <comment type="block" pos:start="465:5" pos:end="465:29">/*  0x58000000 PISMO.  */</comment>

    <comment type="block" pos:start="467:5" pos:end="467:29">/*  0x5c000000 PISMO.  */</comment>

    <comment type="block" pos:start="469:5" pos:end="469:26">/* 0x60000000 PCI.  */</comment>

    <comment type="block" pos:start="471:5" pos:end="471:38">/* 0x61000000 PCI Self Config.  */</comment>

    <comment type="block" pos:start="473:5" pos:end="473:33">/* 0x62000000 PCI Config.  */</comment>

    <comment type="block" pos:start="475:5" pos:end="475:29">/* 0x63000000 PCI IO.  */</comment>

    <comment type="block" pos:start="477:5" pos:end="477:32">/* 0x64000000 PCI mem 0.  */</comment>

    <comment type="block" pos:start="479:5" pos:end="479:32">/* 0x68000000 PCI mem 1.  */</comment>

    <comment type="block" pos:start="481:5" pos:end="481:32">/* 0x6c000000 PCI mem 2.  */</comment>



    <comment type="block" pos:start="485:5" pos:end="491:54">/* ??? Hack to map an additional page of ram for the secondary CPU

       startup code.  I guess this works on real hardware because the

       BootROM happens to be in ROM/flash or in memory that isn't clobbered

       until after Linux boots the secondary CPUs.  */</comment>

    <expr_stmt pos:start="493:5" pos:end="493:63"><expr pos:start="493:5" pos:end="493:62"><name pos:start="493:5" pos:end="493:14">ram_offset</name> <operator pos:start="493:16" pos:end="493:16">=</operator> <call pos:start="493:18" pos:end="493:62"><name pos:start="493:18" pos:end="493:31">qemu_ram_alloc</name><argument_list pos:start="493:32" pos:end="493:62">(<argument pos:start="493:33" pos:end="493:36"><expr pos:start="493:33" pos:end="493:36"><name pos:start="493:33" pos:end="493:36">NULL</name></expr></argument>, <argument pos:start="493:39" pos:end="493:53"><expr pos:start="493:39" pos:end="493:53"><literal type="string" pos:start="493:39" pos:end="493:53">"realview.hack"</literal></expr></argument>, <argument pos:start="493:56" pos:end="493:61"><expr pos:start="493:56" pos:end="493:61"><literal type="number" pos:start="493:56" pos:end="493:61">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="495:5" pos:end="497:58"><expr pos:start="495:5" pos:end="497:57"><call pos:start="495:5" pos:end="497:57"><name pos:start="495:5" pos:end="495:32">cpu_register_physical_memory</name><argument_list pos:start="495:33" pos:end="497:57">(<argument pos:start="495:34" pos:end="495:46"><expr pos:start="495:34" pos:end="495:46"><name pos:start="495:34" pos:end="495:46">SMP_BOOT_ADDR</name></expr></argument>, <argument pos:start="495:49" pos:end="495:54"><expr pos:start="495:49" pos:end="495:54"><literal type="number" pos:start="495:49" pos:end="495:54">0x1000</literal></expr></argument>,

                                 <argument pos:start="497:34" pos:end="497:56"><expr pos:start="497:34" pos:end="497:56"><name pos:start="497:34" pos:end="497:43">ram_offset</name> <operator pos:start="497:45" pos:end="497:45">|</operator> <name pos:start="497:47" pos:end="497:56">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="501:5" pos:end="501:39"><expr pos:start="501:5" pos:end="501:38"><name pos:start="501:5" pos:end="501:27"><name pos:start="501:5" pos:end="501:18">realview_binfo</name><operator pos:start="501:19" pos:end="501:19">.</operator><name pos:start="501:20" pos:end="501:27">ram_size</name></name> <operator pos:start="501:29" pos:end="501:29">=</operator> <name pos:start="501:31" pos:end="501:38">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="503:5" pos:end="503:53"><expr pos:start="503:5" pos:end="503:52"><name pos:start="503:5" pos:end="503:34"><name pos:start="503:5" pos:end="503:18">realview_binfo</name><operator pos:start="503:19" pos:end="503:19">.</operator><name pos:start="503:20" pos:end="503:34">kernel_filename</name></name> <operator pos:start="503:36" pos:end="503:36">=</operator> <name pos:start="503:38" pos:end="503:52">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="505:5" pos:end="505:51"><expr pos:start="505:5" pos:end="505:50"><name pos:start="505:5" pos:end="505:33"><name pos:start="505:5" pos:end="505:18">realview_binfo</name><operator pos:start="505:19" pos:end="505:19">.</operator><name pos:start="505:20" pos:end="505:33">kernel_cmdline</name></name> <operator pos:start="505:35" pos:end="505:35">=</operator> <name pos:start="505:37" pos:end="505:50">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="507:5" pos:end="507:53"><expr pos:start="507:5" pos:end="507:52"><name pos:start="507:5" pos:end="507:34"><name pos:start="507:5" pos:end="507:18">realview_binfo</name><operator pos:start="507:19" pos:end="507:19">.</operator><name pos:start="507:20" pos:end="507:34">initrd_filename</name></name> <operator pos:start="507:36" pos:end="507:36">=</operator> <name pos:start="507:38" pos:end="507:52">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="509:5" pos:end="509:38"><expr pos:start="509:5" pos:end="509:37"><name pos:start="509:5" pos:end="509:26"><name pos:start="509:5" pos:end="509:18">realview_binfo</name><operator pos:start="509:19" pos:end="509:19">.</operator><name pos:start="509:20" pos:end="509:26">nb_cpus</name></name> <operator pos:start="509:28" pos:end="509:28">=</operator> <name pos:start="509:30" pos:end="509:37">smp_cpus</name></expr>;</expr_stmt>

    <expr_stmt pos:start="511:5" pos:end="511:60"><expr pos:start="511:5" pos:end="511:59"><name pos:start="511:5" pos:end="511:27"><name pos:start="511:5" pos:end="511:18">realview_binfo</name><operator pos:start="511:19" pos:end="511:19">.</operator><name pos:start="511:20" pos:end="511:27">board_id</name></name> <operator pos:start="511:29" pos:end="511:29">=</operator> <name pos:start="511:31" pos:end="511:59"><name pos:start="511:31" pos:end="511:47">realview_board_id</name><index pos:start="511:48" pos:end="511:59">[<expr pos:start="511:49" pos:end="511:58"><name pos:start="511:49" pos:end="511:58">board_type</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="513:5" pos:end="513:79"><expr pos:start="513:5" pos:end="513:78"><name pos:start="513:5" pos:end="513:31"><name pos:start="513:5" pos:end="513:18">realview_binfo</name><operator pos:start="513:19" pos:end="513:19">.</operator><name pos:start="513:20" pos:end="513:31">loader_start</name></name> <operator pos:start="513:33" pos:end="513:33">=</operator> <operator pos:start="513:35" pos:end="513:35">(</operator><ternary pos:start="513:36" pos:end="513:77"><condition pos:start="513:36" pos:end="513:62"><expr pos:start="513:36" pos:end="513:60"><name pos:start="513:36" pos:end="513:45">board_type</name> <operator pos:start="513:47" pos:end="513:48">==</operator> <name pos:start="513:50" pos:end="513:60">BOARD_PB_A8</name></expr> ?</condition><then pos:start="513:64" pos:end="513:73"> <expr pos:start="513:64" pos:end="513:73"><literal type="number" pos:start="513:64" pos:end="513:73">0x70000000</literal></expr> </then><else pos:start="513:75" pos:end="513:77">: <expr pos:start="513:77" pos:end="513:77"><literal type="number" pos:start="513:77" pos:end="513:77">0</literal></expr></else></ternary><operator pos:start="513:78" pos:end="513:78">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="515:5" pos:end="515:48"><expr pos:start="515:5" pos:end="515:47"><call pos:start="515:5" pos:end="515:47"><name pos:start="515:5" pos:end="515:19">arm_load_kernel</name><argument_list pos:start="515:20" pos:end="515:47">(<argument pos:start="515:21" pos:end="515:29"><expr pos:start="515:21" pos:end="515:29"><name pos:start="515:21" pos:end="515:29">first_cpu</name></expr></argument>, <argument pos:start="515:32" pos:end="515:46"><expr pos:start="515:32" pos:end="515:46"><operator pos:start="515:32" pos:end="515:32">&amp;</operator><name pos:start="515:33" pos:end="515:46">realview_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
