<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4553.c" pos:tabs="8"><function pos:start="1:1" pos:end="189:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">vhdx_log_flush</name><parameter_list pos:start="1:26" pos:end="3:48">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:42">BlockDriverState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">bs</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:64"><decl pos:start="1:49" pos:end="1:64"><type pos:start="1:49" pos:end="1:64"><name pos:start="1:49" pos:end="1:61">BDRVVHDXState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:64">s</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:47"><decl pos:start="3:27" pos:end="3:47"><type pos:start="3:27" pos:end="3:47"><name pos:start="3:27" pos:end="3:41">VHDXLogSequence</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:47">logs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="189:1">{<block_content pos:start="7:5" pos:end="187:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">cnt</name></decl>, <decl pos:start="11:19" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:19" pos:end="11:30">sectors_read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:26">new_file_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:14">data</name> <init pos:start="15:16" pos:end="15:21">= <expr pos:start="15:18" pos:end="15:21"><name pos:start="15:18" pos:end="15:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:23">file_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:44"><decl pos:start="19:5" pos:end="19:43"><type pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:22">VHDXLogDescEntries</name> <modifier pos:start="19:24" pos:end="19:24">*</modifier></type><name pos:start="19:25" pos:end="19:36">desc_entries</name> <init pos:start="19:38" pos:end="19:43">= <expr pos:start="19:40" pos:end="19:43"><name pos:start="19:40" pos:end="19:43">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:39"><decl pos:start="21:5" pos:end="21:38"><type pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:22">VHDXLogEntryHeader</name></type> <name pos:start="21:24" pos:end="21:30">hdr_tmp</name> <init pos:start="21:32" pos:end="21:38">= <expr pos:start="21:34" pos:end="21:38"><block pos:start="21:34" pos:end="21:38">{ <expr pos:start="21:36" pos:end="21:36"><literal type="number" pos:start="21:36" pos:end="21:36">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:22"><expr pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:7">cnt</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:21"><name pos:start="25:11" pos:end="25:14">logs</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:21">count</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:53"><expr pos:start="29:5" pos:end="29:52"><name pos:start="29:5" pos:end="29:8">data</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:52"><name pos:start="29:12" pos:end="29:26">qemu_blockalign</name><argument_list pos:start="29:27" pos:end="29:52">(<argument pos:start="29:28" pos:end="29:29"><expr pos:start="29:28" pos:end="29:29"><name pos:start="29:28" pos:end="29:29">bs</name></expr></argument>, <argument pos:start="29:32" pos:end="29:51"><expr pos:start="29:32" pos:end="29:51"><name pos:start="29:32" pos:end="29:51">VHDX_LOG_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:40"><name pos:start="33:11" pos:end="33:33">vhdx_user_visible_write</name><argument_list pos:start="33:34" pos:end="33:40">(<argument pos:start="33:35" pos:end="33:36"><expr pos:start="33:35" pos:end="33:36"><name pos:start="33:35" pos:end="33:36">bs</name></expr></argument>, <argument pos:start="33:39" pos:end="33:39"><expr pos:start="33:39" pos:end="33:39"><name pos:start="33:39" pos:end="33:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">&lt;</operator> <literal type="number" pos:start="35:15" pos:end="35:15">0</literal></expr>)</condition> <block pos:start="35:18" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:18">

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="45:17">/* each iteration represents one log sequence, which may span multiple

     * sectors */</comment>

    <while pos:start="47:5" pos:end="161:5">while <condition pos:start="47:11" pos:end="47:17">(<expr pos:start="47:12" pos:end="47:16"><name pos:start="47:12" pos:end="47:14">cnt</name><operator pos:start="47:15" pos:end="47:16">--</operator></expr>)</condition> <block pos:start="47:19" pos:end="161:5">{<block_content pos:start="49:9" pos:end="159:28">

        <expr_stmt pos:start="49:9" pos:end="49:58"><expr pos:start="49:9" pos:end="49:57"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:57"><name pos:start="49:15" pos:end="49:31">vhdx_log_peek_hdr</name><argument_list pos:start="49:32" pos:end="49:57">(<argument pos:start="49:33" pos:end="49:34"><expr pos:start="49:33" pos:end="49:34"><name pos:start="49:33" pos:end="49:34">bs</name></expr></argument>, <argument pos:start="49:37" pos:end="49:46"><expr pos:start="49:37" pos:end="49:46"><operator pos:start="49:37" pos:end="49:37">&amp;</operator><name pos:start="49:38" pos:end="49:46"><name pos:start="49:38" pos:end="49:41">logs</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:46">log</name></name></expr></argument>, <argument pos:start="49:49" pos:end="49:56"><expr pos:start="49:49" pos:end="49:56"><operator pos:start="49:49" pos:end="49:49">&amp;</operator><name pos:start="49:50" pos:end="49:56">hdr_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:20">(<expr pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">&lt;</operator> <literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr>)</condition> <block pos:start="51:22" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:22">

            <goto pos:start="53:13" pos:end="53:22">goto <name pos:start="53:18" pos:end="53:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:51"><expr pos:start="57:9" pos:end="57:50"><name pos:start="57:9" pos:end="57:19">file_length</name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:50"><name pos:start="57:23" pos:end="57:36">bdrv_getlength</name><argument_list pos:start="57:37" pos:end="57:50">(<argument pos:start="57:38" pos:end="57:49"><expr pos:start="57:38" pos:end="57:49"><name pos:start="57:38" pos:end="57:49"><name pos:start="57:38" pos:end="57:39">bs</name><operator pos:start="57:40" pos:end="57:41">-&gt;</operator><name pos:start="57:42" pos:end="57:45">file</name><operator pos:start="57:46" pos:end="57:47">-&gt;</operator><name pos:start="57:48" pos:end="57:49">bs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:28">(<expr pos:start="59:13" pos:end="59:27"><name pos:start="59:13" pos:end="59:23">file_length</name> <operator pos:start="59:25" pos:end="59:25">&lt;</operator> <literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr>)</condition> <block pos:start="59:30" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:22">

            <expr_stmt pos:start="61:13" pos:end="61:30"><expr pos:start="61:13" pos:end="61:29"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:29">file_length</name></expr>;</expr_stmt>

            <goto pos:start="63:13" pos:end="63:22">goto <name pos:start="63:18" pos:end="63:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="67:9" pos:end="71:49">/* if the log shows a FlushedFileOffset larger than our current file

         * size, then that means the file has been truncated / corrupted, and

         * we must refused to open it / use it */</comment>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:54">(<expr pos:start="73:13" pos:end="73:53"><name pos:start="73:13" pos:end="73:39"><name pos:start="73:13" pos:end="73:19">hdr_tmp</name><operator pos:start="73:20" pos:end="73:20">.</operator><name pos:start="73:21" pos:end="73:39">flushed_file_offset</name></name> <operator pos:start="73:41" pos:end="73:41">&gt;</operator> <name pos:start="73:43" pos:end="73:53">file_length</name></expr>)</condition> <block pos:start="73:56" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:22">

            <expr_stmt pos:start="75:13" pos:end="75:26"><expr pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <operator pos:start="75:19" pos:end="75:19">-</operator><name pos:start="75:20" pos:end="75:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="77:13" pos:end="77:22">goto <name pos:start="77:18" pos:end="77:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:73"><expr pos:start="83:9" pos:end="83:72"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:72"><name pos:start="83:15" pos:end="83:32">vhdx_log_read_desc</name><argument_list pos:start="83:33" pos:end="83:72">(<argument pos:start="83:34" pos:end="83:35"><expr pos:start="83:34" pos:end="83:35"><name pos:start="83:34" pos:end="83:35">bs</name></expr></argument>, <argument pos:start="83:38" pos:end="83:38"><expr pos:start="83:38" pos:end="83:38"><name pos:start="83:38" pos:end="83:38">s</name></expr></argument>, <argument pos:start="83:41" pos:end="83:50"><expr pos:start="83:41" pos:end="83:50"><operator pos:start="83:41" pos:end="83:41">&amp;</operator><name pos:start="83:42" pos:end="83:50"><name pos:start="83:42" pos:end="83:45">logs</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:50">log</name></name></expr></argument>, <argument pos:start="83:53" pos:end="83:65"><expr pos:start="83:53" pos:end="83:65"><operator pos:start="83:53" pos:end="83:53">&amp;</operator><name pos:start="83:54" pos:end="83:65">desc_entries</name></expr></argument>, <argument pos:start="83:68" pos:end="83:71"><expr pos:start="83:68" pos:end="83:71"><name pos:start="83:68" pos:end="83:71">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="89:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:20">(<expr pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">&lt;</operator> <literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>)</condition> <block pos:start="85:22" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:22">

            <goto pos:start="87:13" pos:end="87:22">goto <name pos:start="87:18" pos:end="87:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <for pos:start="93:9" pos:end="131:9">for <control pos:start="93:13" pos:end="93:64">(<init pos:start="93:14" pos:end="93:19"><expr pos:start="93:14" pos:end="93:18"><name pos:start="93:14" pos:end="93:14">i</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <literal type="number" pos:start="93:18" pos:end="93:18">0</literal></expr>;</init> <condition pos:start="93:21" pos:end="93:59"><expr pos:start="93:21" pos:end="93:58"><name pos:start="93:21" pos:end="93:21">i</name> <operator pos:start="93:23" pos:end="93:23">&lt;</operator> <name pos:start="93:25" pos:end="93:58"><name pos:start="93:25" pos:end="93:36">desc_entries</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:41">hdr</name><operator pos:start="93:42" pos:end="93:42">.</operator><name pos:start="93:43" pos:end="93:58">descriptor_count</name></name></expr>;</condition> <incr pos:start="93:61" pos:end="93:63"><expr pos:start="93:61" pos:end="93:63"><name pos:start="93:61" pos:end="93:61">i</name><operator pos:start="93:62" pos:end="93:63">++</operator></expr></incr>)</control> <block pos:start="93:66" pos:end="131:9">{<block_content pos:start="95:13" pos:end="129:13">

            <if_stmt pos:start="95:13" pos:end="119:13"><if pos:start="95:13" pos:end="119:13">if <condition pos:start="95:16" pos:end="95:75">(<expr pos:start="95:17" pos:end="95:74"><name pos:start="95:17" pos:end="95:37"><name pos:start="95:17" pos:end="95:28">desc_entries</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:34">desc</name><index pos:start="95:35" pos:end="95:37">[<expr pos:start="95:36" pos:end="95:36"><name pos:start="95:36" pos:end="95:36">i</name></expr>]</index></name><operator pos:start="95:38" pos:end="95:38">.</operator><name pos:start="95:39" pos:end="95:47">signature</name> <operator pos:start="95:49" pos:end="95:50">==</operator> <name pos:start="95:52" pos:end="95:74">VHDX_LOG_DESC_SIGNATURE</name></expr>)</condition> <block pos:start="95:77" pos:end="119:13">{<block_content pos:start="99:17" pos:end="117:46">

                <comment type="block" pos:start="97:17" pos:end="97:60">/* data sector, so read a sector to flush */</comment>

                <expr_stmt pos:start="99:17" pos:end="101:60"><expr pos:start="99:17" pos:end="101:59"><name pos:start="99:17" pos:end="99:19">ret</name> <operator pos:start="99:21" pos:end="99:21">=</operator> <call pos:start="99:23" pos:end="101:59"><name pos:start="99:23" pos:end="99:43">vhdx_log_read_sectors</name><argument_list pos:start="99:44" pos:end="101:59">(<argument pos:start="99:45" pos:end="99:46"><expr pos:start="99:45" pos:end="99:46"><name pos:start="99:45" pos:end="99:46">bs</name></expr></argument>, <argument pos:start="99:49" pos:end="99:58"><expr pos:start="99:49" pos:end="99:58"><operator pos:start="99:49" pos:end="99:49">&amp;</operator><name pos:start="99:50" pos:end="99:58"><name pos:start="99:50" pos:end="99:53">logs</name><operator pos:start="99:54" pos:end="99:55">-&gt;</operator><name pos:start="99:56" pos:end="99:58">log</name></name></expr></argument>, <argument pos:start="99:61" pos:end="99:73"><expr pos:start="99:61" pos:end="99:73"><operator pos:start="99:61" pos:end="99:61">&amp;</operator><name pos:start="99:62" pos:end="99:73">sectors_read</name></expr></argument>,

                                            <argument pos:start="101:45" pos:end="101:48"><expr pos:start="101:45" pos:end="101:48"><name pos:start="101:45" pos:end="101:48">data</name></expr></argument>, <argument pos:start="101:51" pos:end="101:51"><expr pos:start="101:51" pos:end="101:51"><literal type="number" pos:start="101:51" pos:end="101:51">1</literal></expr></argument>, <argument pos:start="101:54" pos:end="101:58"><expr pos:start="101:54" pos:end="101:58"><name pos:start="101:54" pos:end="101:58">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="103:17" pos:end="107:17"><if pos:start="103:17" pos:end="107:17">if <condition pos:start="103:20" pos:end="103:28">(<expr pos:start="103:21" pos:end="103:27"><name pos:start="103:21" pos:end="103:23">ret</name> <operator pos:start="103:25" pos:end="103:25">&lt;</operator> <literal type="number" pos:start="103:27" pos:end="103:27">0</literal></expr>)</condition> <block pos:start="103:30" pos:end="107:17">{<block_content pos:start="105:21" pos:end="105:30">

                    <goto pos:start="105:21" pos:end="105:30">goto <name pos:start="105:26" pos:end="105:29">exit</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="109:17" pos:end="115:17"><if pos:start="109:17" pos:end="115:17">if <condition pos:start="109:20" pos:end="109:38">(<expr pos:start="109:21" pos:end="109:37"><name pos:start="109:21" pos:end="109:32">sectors_read</name> <operator pos:start="109:34" pos:end="109:35">!=</operator> <literal type="number" pos:start="109:37" pos:end="109:37">1</literal></expr>)</condition> <block pos:start="109:40" pos:end="115:17">{<block_content pos:start="111:21" pos:end="113:30">

                    <expr_stmt pos:start="111:21" pos:end="111:34"><expr pos:start="111:21" pos:end="111:33"><name pos:start="111:21" pos:end="111:23">ret</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <operator pos:start="111:27" pos:end="111:27">-</operator><name pos:start="111:28" pos:end="111:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="113:21" pos:end="113:30">goto <name pos:start="113:26" pos:end="113:29">exit</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:46"><expr pos:start="117:17" pos:end="117:45"><call pos:start="117:17" pos:end="117:45"><name pos:start="117:17" pos:end="117:39">vhdx_log_data_le_import</name><argument_list pos:start="117:40" pos:end="117:45">(<argument pos:start="117:41" pos:end="117:44"><expr pos:start="117:41" pos:end="117:44"><name pos:start="117:41" pos:end="117:44">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="123:13" pos:end="123:72"><expr pos:start="123:13" pos:end="123:71"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">=</operator> <call pos:start="123:19" pos:end="123:71"><name pos:start="123:19" pos:end="123:37">vhdx_log_flush_desc</name><argument_list pos:start="123:38" pos:end="123:71">(<argument pos:start="123:39" pos:end="123:40"><expr pos:start="123:39" pos:end="123:40"><name pos:start="123:39" pos:end="123:40">bs</name></expr></argument>, <argument pos:start="123:43" pos:end="123:64"><expr pos:start="123:43" pos:end="123:64"><operator pos:start="123:43" pos:end="123:43">&amp;</operator><name pos:start="123:44" pos:end="123:64"><name pos:start="123:44" pos:end="123:55">desc_entries</name><operator pos:start="123:56" pos:end="123:57">-&gt;</operator><name pos:start="123:58" pos:end="123:61">desc</name><index pos:start="123:62" pos:end="123:64">[<expr pos:start="123:63" pos:end="123:63"><name pos:start="123:63" pos:end="123:63">i</name></expr>]</index></name></expr></argument>, <argument pos:start="123:67" pos:end="123:70"><expr pos:start="123:67" pos:end="123:70"><name pos:start="123:67" pos:end="123:70">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="129:13"><if pos:start="125:13" pos:end="129:13">if <condition pos:start="125:16" pos:end="125:24">(<expr pos:start="125:17" pos:end="125:23"><name pos:start="125:17" pos:end="125:19">ret</name> <operator pos:start="125:21" pos:end="125:21">&lt;</operator> <literal type="number" pos:start="125:23" pos:end="125:23">0</literal></expr>)</condition> <block pos:start="125:26" pos:end="129:13">{<block_content pos:start="127:17" pos:end="127:26">

                <goto pos:start="127:17" pos:end="127:26">goto <name pos:start="127:22" pos:end="127:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="133:9" pos:end="155:9"><if pos:start="133:9" pos:end="155:9">if <condition pos:start="133:12" pos:end="133:61">(<expr pos:start="133:13" pos:end="133:60"><name pos:start="133:13" pos:end="133:23">file_length</name> <operator pos:start="133:25" pos:end="133:25">&lt;</operator> <name pos:start="133:27" pos:end="133:60"><name pos:start="133:27" pos:end="133:38">desc_entries</name><operator pos:start="133:39" pos:end="133:40">-&gt;</operator><name pos:start="133:41" pos:end="133:43">hdr</name><operator pos:start="133:44" pos:end="133:44">.</operator><name pos:start="133:45" pos:end="133:60">last_file_offset</name></name></expr>)</condition> <block pos:start="133:63" pos:end="155:9">{<block_content pos:start="135:13" pos:end="153:13">

            <expr_stmt pos:start="135:13" pos:end="135:63"><expr pos:start="135:13" pos:end="135:62"><name pos:start="135:13" pos:end="135:25">new_file_size</name> <operator pos:start="135:27" pos:end="135:27">=</operator> <name pos:start="135:29" pos:end="135:62"><name pos:start="135:29" pos:end="135:40">desc_entries</name><operator pos:start="135:41" pos:end="135:42">-&gt;</operator><name pos:start="135:43" pos:end="135:45">hdr</name><operator pos:start="135:46" pos:end="135:46">.</operator><name pos:start="135:47" pos:end="135:62">last_file_offset</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="153:13"><if pos:start="137:13" pos:end="153:13">if <condition pos:start="137:16" pos:end="137:44">(<expr pos:start="137:17" pos:end="137:43"><name pos:start="137:17" pos:end="137:29">new_file_size</name> <operator pos:start="137:31" pos:end="137:31">%</operator> <operator pos:start="137:33" pos:end="137:33">(</operator><literal type="number" pos:start="137:34" pos:end="137:37">1024</literal><operator pos:start="137:38" pos:end="137:38">*</operator><literal type="number" pos:start="137:39" pos:end="137:42">1024</literal><operator pos:start="137:43" pos:end="137:43">)</operator></expr>)</condition> <block pos:start="137:46" pos:end="153:13">{<block_content pos:start="141:17" pos:end="151:80">

                <comment type="block" pos:start="139:17" pos:end="139:54">/* round up to nearest 1MB boundary */</comment>

                <expr_stmt pos:start="141:17" pos:end="141:66"><expr pos:start="141:17" pos:end="141:65"><name pos:start="141:17" pos:end="141:29">new_file_size</name> <operator pos:start="141:31" pos:end="141:31">=</operator> <call pos:start="141:33" pos:end="141:65"><name pos:start="141:33" pos:end="141:45">QEMU_ALIGN_UP</name><argument_list pos:start="141:46" pos:end="141:65">(<argument pos:start="141:47" pos:end="141:59"><expr pos:start="141:47" pos:end="141:59"><name pos:start="141:47" pos:end="141:59">new_file_size</name></expr></argument>, <argument pos:start="141:62" pos:end="141:64"><expr pos:start="141:62" pos:end="141:64"><name pos:start="141:62" pos:end="141:64">MiB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="143:17" pos:end="149:17"><if pos:start="143:17" pos:end="149:17">if <condition pos:start="143:20" pos:end="143:46">(<expr pos:start="143:21" pos:end="143:45"><name pos:start="143:21" pos:end="143:33">new_file_size</name> <operator pos:start="143:35" pos:end="143:35">&gt;</operator> <name pos:start="143:37" pos:end="143:45">INT64_MAX</name></expr>)</condition> <block pos:start="143:48" pos:end="149:17">{<block_content pos:start="145:21" pos:end="147:30">

                    <expr_stmt pos:start="145:21" pos:end="145:34"><expr pos:start="145:21" pos:end="145:33"><name pos:start="145:21" pos:end="145:23">ret</name> <operator pos:start="145:25" pos:end="145:25">=</operator> <operator pos:start="145:27" pos:end="145:27">-</operator><name pos:start="145:28" pos:end="145:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="147:21" pos:end="147:30">goto <name pos:start="147:26" pos:end="147:29">exit</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:80"><expr pos:start="151:17" pos:end="151:79"><call pos:start="151:17" pos:end="151:79"><name pos:start="151:17" pos:end="151:29">bdrv_truncate</name><argument_list pos:start="151:30" pos:end="151:79">(<argument pos:start="151:31" pos:end="151:38"><expr pos:start="151:31" pos:end="151:38"><name pos:start="151:31" pos:end="151:38"><name pos:start="151:31" pos:end="151:32">bs</name><operator pos:start="151:33" pos:end="151:34">-&gt;</operator><name pos:start="151:35" pos:end="151:38">file</name></name></expr></argument>, <argument pos:start="151:41" pos:end="151:53"><expr pos:start="151:41" pos:end="151:53"><name pos:start="151:41" pos:end="151:53">new_file_size</name></expr></argument>, <argument pos:start="151:56" pos:end="151:72"><expr pos:start="151:56" pos:end="151:72"><name pos:start="151:56" pos:end="151:72">PREALLOC_MODE_OFF</name></expr></argument>, <argument pos:start="151:75" pos:end="151:78"><expr pos:start="151:75" pos:end="151:78"><name pos:start="151:75" pos:end="151:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:33"><expr pos:start="157:9" pos:end="157:32"><call pos:start="157:9" pos:end="157:32"><name pos:start="157:9" pos:end="157:18">qemu_vfree</name><argument_list pos:start="157:19" pos:end="157:32">(<argument pos:start="157:20" pos:end="157:31"><expr pos:start="157:20" pos:end="157:31"><name pos:start="157:20" pos:end="157:31">desc_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:28"><expr pos:start="159:9" pos:end="159:27"><name pos:start="159:9" pos:end="159:20">desc_entries</name> <operator pos:start="159:22" pos:end="159:22">=</operator> <name pos:start="159:24" pos:end="159:27">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="165:5" pos:end="165:25"><expr pos:start="165:5" pos:end="165:24"><name pos:start="165:5" pos:end="165:7">ret</name> <operator pos:start="165:9" pos:end="165:9">=</operator> <call pos:start="165:11" pos:end="165:24"><name pos:start="165:11" pos:end="165:20">bdrv_flush</name><argument_list pos:start="165:21" pos:end="165:24">(<argument pos:start="165:22" pos:end="165:23"><expr pos:start="165:22" pos:end="165:23"><name pos:start="165:22" pos:end="165:23">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="171:5"><if pos:start="167:5" pos:end="171:5">if <condition pos:start="167:8" pos:end="167:16">(<expr pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:13">&lt;</operator> <literal type="number" pos:start="167:15" pos:end="167:15">0</literal></expr>)</condition> <block pos:start="167:18" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:18">

        <goto pos:start="169:9" pos:end="169:18">goto <name pos:start="169:14" pos:end="169:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="173:5" pos:end="175:74">/* once the log is fully flushed, indicate that we have an empty log

     * now.  This also sets the log guid to 0, to indicate an empty log */</comment>

    <expr_stmt pos:start="177:5" pos:end="177:26"><expr pos:start="177:5" pos:end="177:25"><call pos:start="177:5" pos:end="177:25"><name pos:start="177:5" pos:end="177:18">vhdx_log_reset</name><argument_list pos:start="177:19" pos:end="177:25">(<argument pos:start="177:20" pos:end="177:21"><expr pos:start="177:20" pos:end="177:21"><name pos:start="177:20" pos:end="177:21">bs</name></expr></argument>, <argument pos:start="177:24" pos:end="177:24"><expr pos:start="177:24" pos:end="177:24"><name pos:start="177:24" pos:end="177:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="181:1" pos:end="181:5"><name pos:start="181:1" pos:end="181:4">exit</name>:</label>

    <expr_stmt pos:start="183:5" pos:end="183:21"><expr pos:start="183:5" pos:end="183:20"><call pos:start="183:5" pos:end="183:20"><name pos:start="183:5" pos:end="183:14">qemu_vfree</name><argument_list pos:start="183:15" pos:end="183:20">(<argument pos:start="183:16" pos:end="183:19"><expr pos:start="183:16" pos:end="183:19"><name pos:start="183:16" pos:end="183:19">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:29"><expr pos:start="185:5" pos:end="185:28"><call pos:start="185:5" pos:end="185:28"><name pos:start="185:5" pos:end="185:14">qemu_vfree</name><argument_list pos:start="185:15" pos:end="185:28">(<argument pos:start="185:16" pos:end="185:27"><expr pos:start="185:16" pos:end="185:27"><name pos:start="185:16" pos:end="185:27">desc_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="187:5" pos:end="187:15">return <expr pos:start="187:12" pos:end="187:14"><name pos:start="187:12" pos:end="187:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
