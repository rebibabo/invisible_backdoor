<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21491.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">cpu_get_dump_info</name><parameter_list pos:start="1:22" pos:end="3:66">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:34">ArchDumpInfo</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:40">info</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:65"><decl pos:start="3:23" pos:end="3:65"><type pos:start="3:23" pos:end="3:65"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:46">GuestPhysBlockList</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:65">guest_phys_blocks</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="67:13">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:12">lma</name> <init pos:start="7:14" pos:end="7:20">= <expr pos:start="7:16" pos:end="7:20"><name pos:start="7:16" pos:end="7:20">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">GuestPhysBlock</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:25">block</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="13:1" pos:end="13:20">#<cpp:directive pos:start="13:2" pos:end="13:6">ifdef</cpp:directive> <name pos:start="13:8" pos:end="13:20">TARGET_X86_64</name></cpp:ifdef>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:46"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:10">X86CPU</name> <modifier pos:start="15:12" pos:end="15:12">*</modifier></type><name pos:start="15:13" pos:end="15:25">first_x86_cpu</name> <init pos:start="15:27" pos:end="15:46">= <expr pos:start="15:29" pos:end="15:46"><call pos:start="15:29" pos:end="15:46"><name pos:start="15:29" pos:end="15:35">X86_CPU</name><argument_list pos:start="15:36" pos:end="15:46">(<argument pos:start="15:37" pos:end="15:45"><expr pos:start="15:37" pos:end="15:45"><name pos:start="15:37" pos:end="15:45">first_cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="22:0"><expr pos:start="19:5" pos:end="19:53"><name pos:start="19:5" pos:end="19:7">lma</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <operator pos:start="19:11" pos:end="19:11">!</operator><operator pos:start="19:12" pos:end="19:12">!</operator><operator pos:start="19:13" pos:end="19:13">(</operator><name pos:start="19:14" pos:end="19:38"><name pos:start="19:14" pos:end="19:26">first_x86_cpu</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:31">env</name><operator pos:start="19:32" pos:end="19:32">.</operator><name pos:start="19:33" pos:end="19:38">hflags</name></name> <operator pos:start="19:40" pos:end="19:40">&amp;</operator> <name pos:start="19:42" pos:end="19:52">HF_LMA_MASK</name><operator pos:start="19:53" pos:end="19:53">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:12">(<expr pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">lma</name></expr>)</condition> <block pos:start="25:14" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:36">

        <expr_stmt pos:start="27:9" pos:end="27:36"><expr pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:12">info</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:23">d_machine</name></name> <operator pos:start="27:25" pos:end="27:25">=</operator> <name pos:start="27:27" pos:end="27:35">EM_X86_64</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="33:5">else <block pos:start="29:12" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:33">

        <expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:12">info</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:23">d_machine</name></name> <operator pos:start="31:25" pos:end="31:25">=</operator> <name pos:start="31:27" pos:end="31:32">EM_386</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:33"><expr pos:start="35:5" pos:end="35:32"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:8">info</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:18">d_endian</name></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:32">ELFDATA2LSB</name></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="63:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:12">(<expr pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">lma</name></expr>)</condition> <block pos:start="39:14" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:35">

        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:12">info</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:21">d_class</name></name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:34">ELFCLASS64</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="63:5">else <block pos:start="43:12" pos:end="63:5">{<block_content pos:start="45:9" pos:end="61:9">

        <expr_stmt pos:start="45:9" pos:end="45:35"><expr pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:12">info</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:21">d_class</name></name> <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:34">ELFCLASS32</name></expr>;</expr_stmt>



        <macro pos:start="49:9" pos:end="49:61"><name pos:start="49:9" pos:end="49:22">QTAILQ_FOREACH</name><argument_list pos:start="49:23" pos:end="49:61">(<argument pos:start="49:24" pos:end="49:28">block</argument>, <argument pos:start="49:31" pos:end="49:54">&amp;guest_phys_blocks-&gt;head</argument>, <argument pos:start="49:57" pos:end="49:60">next</argument>)</argument_list></macro> <block pos:start="49:63" pos:end="61:9">{<block_content pos:start="51:13" pos:end="59:13">

            <if_stmt pos:start="51:13" pos:end="59:13"><if pos:start="51:13" pos:end="59:13">if <condition pos:start="51:16" pos:end="51:45">(<expr pos:start="51:17" pos:end="51:44"><name pos:start="51:17" pos:end="51:33"><name pos:start="51:17" pos:end="51:21">block</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:33">target_end</name></name> <operator pos:start="51:35" pos:end="51:35">&gt;</operator> <name pos:start="51:37" pos:end="51:44">UINT_MAX</name></expr>)</condition> <block pos:start="51:47" pos:end="59:13">{<block_content pos:start="55:17" pos:end="57:22">

                <comment type="block" pos:start="53:17" pos:end="53:56">/* The memory size is greater than 4G */</comment>

                <expr_stmt pos:start="55:17" pos:end="55:43"><expr pos:start="55:17" pos:end="55:42"><name pos:start="55:17" pos:end="55:29"><name pos:start="55:17" pos:end="55:20">info</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:29">d_class</name></name> <operator pos:start="55:31" pos:end="55:31">=</operator> <name pos:start="55:33" pos:end="55:42">ELFCLASS64</name></expr>;</expr_stmt>

                <break pos:start="57:17" pos:end="57:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

    </block_content>}</block></else></if_stmt>



    <return pos:start="67:5" pos:end="67:13">return <expr pos:start="67:12" pos:end="67:12"><literal type="number" pos:start="67:12" pos:end="67:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
