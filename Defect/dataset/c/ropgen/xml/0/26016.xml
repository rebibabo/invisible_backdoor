<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26016.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:38">qcow_co_writev</name><parameter_list pos:start="1:39" pos:end="3:61">(<parameter pos:start="1:40" pos:end="1:59"><decl pos:start="1:40" pos:end="1:59"><type pos:start="1:40" pos:end="1:59"><name pos:start="1:40" pos:end="1:55">BlockDriverState</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">bs</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:79"><decl pos:start="1:62" pos:end="1:79"><type pos:start="1:62" pos:end="1:79"><name pos:start="1:62" pos:end="1:68">int64_t</name></type> <name pos:start="1:70" pos:end="1:79">sector_num</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:40"><decl pos:start="3:27" pos:end="3:40"><type pos:start="3:27" pos:end="3:40"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:40">nb_sectors</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:60"><decl pos:start="3:43" pos:end="3:60"><type pos:start="3:43" pos:end="3:60"><name pos:start="3:43" pos:end="3:54">QEMUIOVector</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:60">qiov</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="151:1">{<block_content pos:start="7:5" pos:end="149:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:24">index_in_cluster</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:27">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>, <decl pos:start="13:18" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:18">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:16">iovec</name></name></type> <name pos:start="15:18" pos:end="15:23">hd_iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">QEMUIOVector</name></type> <name pos:start="17:18" pos:end="17:24">hd_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:16">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">void</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:18">orig_buf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:27">cluster_cache_offset</name></name> <operator pos:start="25:29" pos:end="25:29">=</operator> <operator pos:start="25:31" pos:end="25:31">-</operator><literal type="number" pos:start="25:32" pos:end="25:32">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="25:35" pos:end="25:64">/* disable compressed cache */</comment>



    <comment type="block" pos:start="29:5" pos:end="31:65">/* We must always copy the iov when encrypting, so we

     * don't modify the original data buffer during encryption */</comment>

    <if_stmt pos:start="33:5" pos:end="51:5"><if pos:start="33:5" pos:end="45:5">if <condition pos:start="33:8" pos:end="33:40">(<expr pos:start="33:9" pos:end="33:39"><name pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:10">bs</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:21">encrypted</name></name> <operator pos:start="33:23" pos:end="33:24">||</operator> <name pos:start="33:26" pos:end="33:35"><name pos:start="33:26" pos:end="33:29">qiov</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:35">niov</name></name> <operator pos:start="33:37" pos:end="33:37">&gt;</operator> <literal type="number" pos:start="33:39" pos:end="33:39">1</literal></expr>)</condition> <block pos:start="33:42" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:52">

        <expr_stmt pos:start="35:9" pos:end="35:61"><expr pos:start="35:9" pos:end="35:60"><name pos:start="35:9" pos:end="35:11">buf</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:22">orig_buf</name> <operator pos:start="35:24" pos:end="35:24">=</operator> <call pos:start="35:26" pos:end="35:60"><name pos:start="35:26" pos:end="35:44">qemu_try_blockalign</name><argument_list pos:start="35:45" pos:end="35:60">(<argument pos:start="35:46" pos:end="35:47"><expr pos:start="35:46" pos:end="35:47"><name pos:start="35:46" pos:end="35:47">bs</name></expr></argument>, <argument pos:start="35:50" pos:end="35:59"><expr pos:start="35:50" pos:end="35:59"><name pos:start="35:50" pos:end="35:59"><name pos:start="35:50" pos:end="35:53">qiov</name><operator pos:start="35:54" pos:end="35:55">-&gt;</operator><name pos:start="35:56" pos:end="35:59">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:24">(<expr pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:15">buf</name> <operator pos:start="37:17" pos:end="37:18">==</operator> <name pos:start="37:20" pos:end="37:23">NULL</name></expr>)</condition> <block pos:start="37:26" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:27">

            <return pos:start="39:13" pos:end="39:27">return <expr pos:start="39:20" pos:end="39:26"><operator pos:start="39:20" pos:end="39:20">-</operator><name pos:start="39:21" pos:end="39:26">ENOMEM</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:52"><expr pos:start="43:9" pos:end="43:51"><call pos:start="43:9" pos:end="43:51"><name pos:start="43:9" pos:end="43:25">qemu_iovec_to_buf</name><argument_list pos:start="43:26" pos:end="43:51">(<argument pos:start="43:27" pos:end="43:30"><expr pos:start="43:27" pos:end="43:30"><name pos:start="43:27" pos:end="43:30">qiov</name></expr></argument>, <argument pos:start="43:33" pos:end="43:33"><expr pos:start="43:33" pos:end="43:33"><literal type="number" pos:start="43:33" pos:end="43:33">0</literal></expr></argument>, <argument pos:start="43:36" pos:end="43:38"><expr pos:start="43:36" pos:end="43:38"><name pos:start="43:36" pos:end="43:38">buf</name></expr></argument>, <argument pos:start="43:41" pos:end="43:50"><expr pos:start="43:41" pos:end="43:50"><name pos:start="43:41" pos:end="43:50"><name pos:start="43:41" pos:end="43:44">qiov</name><operator pos:start="43:45" pos:end="43:46">-&gt;</operator><name pos:start="43:47" pos:end="43:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="51:5">else <block pos:start="45:12" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:45">

        <expr_stmt pos:start="47:9" pos:end="47:24"><expr pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:16">orig_buf</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:23">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:45"><expr pos:start="49:9" pos:end="49:44"><name pos:start="49:9" pos:end="49:11">buf</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <operator pos:start="49:15" pos:end="49:15">(</operator><name pos:start="49:16" pos:end="49:22">uint8_t</name> <operator pos:start="49:24" pos:end="49:24">*</operator><operator pos:start="49:25" pos:end="49:25">)</operator><name pos:start="49:26" pos:end="49:44"><name pos:start="49:26" pos:end="49:29">qiov</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:34">iov</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:44">iov_base</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:33"><expr pos:start="55:5" pos:end="55:32"><call pos:start="55:5" pos:end="55:32"><name pos:start="55:5" pos:end="55:22">qemu_co_mutex_lock</name><argument_list pos:start="55:23" pos:end="55:32">(<argument pos:start="55:24" pos:end="55:31"><expr pos:start="55:24" pos:end="55:31"><operator pos:start="55:24" pos:end="55:24">&amp;</operator><name pos:start="55:25" pos:end="55:31"><name pos:start="55:25" pos:end="55:25">s</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="59:5" pos:end="139:5">while <condition pos:start="59:11" pos:end="59:27">(<expr pos:start="59:12" pos:end="59:26"><name pos:start="59:12" pos:end="59:21">nb_sectors</name> <operator pos:start="59:23" pos:end="59:24">!=</operator> <literal type="number" pos:start="59:26" pos:end="59:26">0</literal></expr>)</condition> <block pos:start="59:29" pos:end="139:5">{<block_content pos:start="63:9" pos:end="137:23">



        <expr_stmt pos:start="63:9" pos:end="63:65"><expr pos:start="63:9" pos:end="63:64"><name pos:start="63:9" pos:end="63:24">index_in_cluster</name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:37">sector_num</name> <operator pos:start="63:39" pos:end="63:39">&amp;</operator> <operator pos:start="63:41" pos:end="63:41">(</operator><name pos:start="63:42" pos:end="63:59"><name pos:start="63:42" pos:end="63:42">s</name><operator pos:start="63:43" pos:end="63:44">-&gt;</operator><name pos:start="63:45" pos:end="63:59">cluster_sectors</name></name> <operator pos:start="63:61" pos:end="63:61">-</operator> <literal type="number" pos:start="63:63" pos:end="63:63">1</literal><operator pos:start="63:64" pos:end="63:64">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:50"><expr pos:start="65:9" pos:end="65:49"><name pos:start="65:9" pos:end="65:9">n</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <name pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:30">cluster_sectors</name></name> <operator pos:start="65:32" pos:end="65:32">-</operator> <name pos:start="65:34" pos:end="65:49">index_in_cluster</name></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:27">(<expr pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:13">n</name> <operator pos:start="67:15" pos:end="67:15">&gt;</operator> <name pos:start="67:17" pos:end="67:26">nb_sectors</name></expr>)</condition> <block pos:start="67:29" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:27">

            <expr_stmt pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:13">n</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <name pos:start="69:17" pos:end="69:26">nb_sectors</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="77:66"><expr pos:start="73:9" pos:end="77:65"><name pos:start="73:9" pos:end="73:22">cluster_offset</name> <operator pos:start="73:24" pos:end="73:24">=</operator> <call pos:start="73:26" pos:end="77:65"><name pos:start="73:26" pos:end="73:43">get_cluster_offset</name><argument_list pos:start="73:44" pos:end="77:65">(<argument pos:start="73:45" pos:end="73:46"><expr pos:start="73:45" pos:end="73:46"><name pos:start="73:45" pos:end="73:46">bs</name></expr></argument>, <argument pos:start="73:49" pos:end="73:63"><expr pos:start="73:49" pos:end="73:63"><name pos:start="73:49" pos:end="73:58">sector_num</name> <operator pos:start="73:60" pos:end="73:61">&lt;&lt;</operator> <literal type="number" pos:start="73:63" pos:end="73:63">9</literal></expr></argument>, <argument pos:start="73:66" pos:end="73:66"><expr pos:start="73:66" pos:end="73:66"><literal type="number" pos:start="73:66" pos:end="73:66">1</literal></expr></argument>, <argument pos:start="73:69" pos:end="73:69"><expr pos:start="73:69" pos:end="73:69"><literal type="number" pos:start="73:69" pos:end="73:69">0</literal></expr></argument>,

                                            <argument pos:start="75:45" pos:end="75:60"><expr pos:start="75:45" pos:end="75:60"><name pos:start="75:45" pos:end="75:60">index_in_cluster</name></expr></argument>,

                                            <argument pos:start="77:45" pos:end="77:64"><expr pos:start="77:45" pos:end="77:64"><name pos:start="77:45" pos:end="77:60">index_in_cluster</name> <operator pos:start="77:62" pos:end="77:62">+</operator> <name pos:start="77:64" pos:end="77:64">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:59">(<expr pos:start="79:13" pos:end="79:58"><operator pos:start="79:13" pos:end="79:13">!</operator><name pos:start="79:14" pos:end="79:27">cluster_offset</name> <operator pos:start="79:29" pos:end="79:30">||</operator> <operator pos:start="79:32" pos:end="79:32">(</operator><name pos:start="79:33" pos:end="79:46">cluster_offset</name> <operator pos:start="79:48" pos:end="79:48">&amp;</operator> <literal type="number" pos:start="79:50" pos:end="79:52">511</literal><operator pos:start="79:53" pos:end="79:53">)</operator> <operator pos:start="79:55" pos:end="79:56">!=</operator> <literal type="number" pos:start="79:58" pos:end="79:58">0</literal></expr>)</condition> <block pos:start="79:61" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:18">

            <expr_stmt pos:start="81:13" pos:end="81:23"><expr pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:15">ret</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <operator pos:start="81:19" pos:end="81:19">-</operator><name pos:start="81:20" pos:end="81:22">EIO</name></expr>;</expr_stmt>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="103:9"><if pos:start="87:9" pos:end="103:9">if <condition pos:start="87:12" pos:end="87:26">(<expr pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:14">bs</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:25">encrypted</name></name></expr>)</condition> <block pos:start="87:28" pos:end="103:9">{<block_content pos:start="89:13" pos:end="101:13">

            <decl_stmt pos:start="89:13" pos:end="89:30"><decl pos:start="89:13" pos:end="89:29"><type pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:17">Error</name> <modifier pos:start="89:19" pos:end="89:19">*</modifier></type><name pos:start="89:20" pos:end="89:22">err</name> <init pos:start="89:24" pos:end="89:29">= <expr pos:start="89:26" pos:end="89:29"><name pos:start="89:26" pos:end="89:29">NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:30"><expr pos:start="91:13" pos:end="91:29"><call pos:start="91:13" pos:end="91:29"><name pos:start="91:13" pos:end="91:18">assert</name><argument_list pos:start="91:19" pos:end="91:29">(<argument pos:start="91:20" pos:end="91:28"><expr pos:start="91:20" pos:end="91:28"><name pos:start="91:20" pos:end="91:28"><name pos:start="91:20" pos:end="91:20">s</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:28">cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="101:13"><if pos:start="93:13" pos:end="101:13">if <condition pos:start="93:16" pos:end="93:71">(<expr pos:start="93:17" pos:end="93:70"><call pos:start="93:17" pos:end="93:66"><name pos:start="93:17" pos:end="93:31">encrypt_sectors</name><argument_list pos:start="93:32" pos:end="93:66">(<argument pos:start="93:33" pos:end="93:33"><expr pos:start="93:33" pos:end="93:33"><name pos:start="93:33" pos:end="93:33">s</name></expr></argument>, <argument pos:start="93:36" pos:end="93:45"><expr pos:start="93:36" pos:end="93:45"><name pos:start="93:36" pos:end="93:45">sector_num</name></expr></argument>, <argument pos:start="93:48" pos:end="93:50"><expr pos:start="93:48" pos:end="93:50"><name pos:start="93:48" pos:end="93:50">buf</name></expr></argument>, <argument pos:start="93:53" pos:end="93:53"><expr pos:start="93:53" pos:end="93:53"><name pos:start="93:53" pos:end="93:53">n</name></expr></argument>, <argument pos:start="93:56" pos:end="93:59"><expr pos:start="93:56" pos:end="93:59"><name pos:start="93:56" pos:end="93:59">true</name></expr></argument>, <argument pos:start="93:62" pos:end="93:65"><expr pos:start="93:62" pos:end="93:65"><operator pos:start="93:62" pos:end="93:62">&amp;</operator><name pos:start="93:63" pos:end="93:65">err</name></expr></argument>)</argument_list></call> <operator pos:start="93:68" pos:end="93:68">&lt;</operator> <literal type="number" pos:start="93:70" pos:end="93:70">0</literal></expr>)</condition> <block pos:start="93:73" pos:end="101:13">{<block_content pos:start="95:17" pos:end="99:22">

                <expr_stmt pos:start="95:17" pos:end="95:32"><expr pos:start="95:17" pos:end="95:31"><call pos:start="95:17" pos:end="95:31"><name pos:start="95:17" pos:end="95:26">error_free</name><argument_list pos:start="95:27" pos:end="95:31">(<argument pos:start="95:28" pos:end="95:30"><expr pos:start="95:28" pos:end="95:30"><name pos:start="95:28" pos:end="95:30">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:27"><expr pos:start="97:17" pos:end="97:26"><name pos:start="97:17" pos:end="97:19">ret</name> <operator pos:start="97:21" pos:end="97:21">=</operator> <operator pos:start="97:23" pos:end="97:23">-</operator><name pos:start="97:24" pos:end="97:26">EIO</name></expr>;</expr_stmt>

                <break pos:start="99:17" pos:end="99:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:38"><expr pos:start="107:9" pos:end="107:37"><name pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:14">hd_iov</name><operator pos:start="107:15" pos:end="107:15">.</operator><name pos:start="107:16" pos:end="107:23">iov_base</name></name> <operator pos:start="107:25" pos:end="107:25">=</operator> <operator pos:start="107:27" pos:end="107:27">(</operator><name pos:start="107:28" pos:end="107:31">void</name> <operator pos:start="107:33" pos:end="107:33">*</operator><operator pos:start="107:34" pos:end="107:34">)</operator><name pos:start="107:35" pos:end="107:37">buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:33"><expr pos:start="109:9" pos:end="109:32"><name pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:14">hd_iov</name><operator pos:start="109:15" pos:end="109:15">.</operator><name pos:start="109:16" pos:end="109:22">iov_len</name></name> <operator pos:start="109:24" pos:end="109:24">=</operator> <name pos:start="109:26" pos:end="109:26">n</name> <operator pos:start="109:28" pos:end="109:28">*</operator> <literal type="number" pos:start="109:30" pos:end="109:32">512</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:55"><expr pos:start="111:9" pos:end="111:54"><call pos:start="111:9" pos:end="111:54"><name pos:start="111:9" pos:end="111:32">qemu_iovec_init_external</name><argument_list pos:start="111:33" pos:end="111:54">(<argument pos:start="111:34" pos:end="111:41"><expr pos:start="111:34" pos:end="111:41"><operator pos:start="111:34" pos:end="111:34">&amp;</operator><name pos:start="111:35" pos:end="111:41">hd_qiov</name></expr></argument>, <argument pos:start="111:44" pos:end="111:50"><expr pos:start="111:44" pos:end="111:50"><operator pos:start="111:44" pos:end="111:44">&amp;</operator><name pos:start="111:45" pos:end="111:50">hd_iov</name></expr></argument>, <argument pos:start="111:53" pos:end="111:53"><expr pos:start="111:53" pos:end="111:53"><literal type="number" pos:start="111:53" pos:end="111:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:39"><expr pos:start="113:9" pos:end="113:38"><call pos:start="113:9" pos:end="113:38"><name pos:start="113:9" pos:end="113:28">qemu_co_mutex_unlock</name><argument_list pos:start="113:29" pos:end="113:38">(<argument pos:start="113:30" pos:end="113:37"><expr pos:start="113:30" pos:end="113:37"><operator pos:start="113:30" pos:end="113:30">&amp;</operator><name pos:start="113:31" pos:end="113:37"><name pos:start="113:31" pos:end="113:31">s</name><operator pos:start="113:32" pos:end="113:33">-&gt;</operator><name pos:start="113:34" pos:end="113:37">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="119:42"><expr pos:start="115:9" pos:end="119:41"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="119:41"><name pos:start="115:15" pos:end="115:28">bdrv_co_writev</name><argument_list pos:start="115:29" pos:end="119:41">(<argument pos:start="115:30" pos:end="115:37"><expr pos:start="115:30" pos:end="115:37"><name pos:start="115:30" pos:end="115:37"><name pos:start="115:30" pos:end="115:31">bs</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:37">file</name></name></expr></argument>,

                             <argument pos:start="117:30" pos:end="117:69"><expr pos:start="117:30" pos:end="117:69"><operator pos:start="117:30" pos:end="117:30">(</operator><name pos:start="117:31" pos:end="117:44">cluster_offset</name> <operator pos:start="117:46" pos:end="117:47">&gt;&gt;</operator> <literal type="number" pos:start="117:49" pos:end="117:49">9</literal><operator pos:start="117:50" pos:end="117:50">)</operator> <operator pos:start="117:52" pos:end="117:52">+</operator> <name pos:start="117:54" pos:end="117:69">index_in_cluster</name></expr></argument>,

                             <argument pos:start="119:30" pos:end="119:30"><expr pos:start="119:30" pos:end="119:30"><name pos:start="119:30" pos:end="119:30">n</name></expr></argument>, <argument pos:start="119:33" pos:end="119:40"><expr pos:start="119:33" pos:end="119:40"><operator pos:start="119:33" pos:end="119:33">&amp;</operator><name pos:start="119:34" pos:end="119:40">hd_qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:37"><expr pos:start="121:9" pos:end="121:36"><call pos:start="121:9" pos:end="121:36"><name pos:start="121:9" pos:end="121:26">qemu_co_mutex_lock</name><argument_list pos:start="121:27" pos:end="121:36">(<argument pos:start="121:28" pos:end="121:35"><expr pos:start="121:28" pos:end="121:35"><operator pos:start="121:28" pos:end="121:28">&amp;</operator><name pos:start="121:29" pos:end="121:35"><name pos:start="121:29" pos:end="121:29">s</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="127:9"><if pos:start="123:9" pos:end="127:9">if <condition pos:start="123:12" pos:end="123:20">(<expr pos:start="123:13" pos:end="123:19"><name pos:start="123:13" pos:end="123:15">ret</name> <operator pos:start="123:17" pos:end="123:17">&lt;</operator> <literal type="number" pos:start="123:19" pos:end="123:19">0</literal></expr>)</condition> <block pos:start="123:22" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:18">

            <break pos:start="125:13" pos:end="125:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:16"><expr pos:start="129:9" pos:end="129:15"><name pos:start="129:9" pos:end="129:11">ret</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <literal type="number" pos:start="129:15" pos:end="129:15">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:24"><expr pos:start="133:9" pos:end="133:23"><name pos:start="133:9" pos:end="133:18">nb_sectors</name> <operator pos:start="133:20" pos:end="133:21">-=</operator> <name pos:start="133:23" pos:end="133:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:24"><expr pos:start="135:9" pos:end="135:23"><name pos:start="135:9" pos:end="135:18">sector_num</name> <operator pos:start="135:20" pos:end="135:21">+=</operator> <name pos:start="135:23" pos:end="135:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:23"><expr pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:11">buf</name> <operator pos:start="137:13" pos:end="137:14">+=</operator> <name pos:start="137:16" pos:end="137:16">n</name> <operator pos:start="137:18" pos:end="137:18">*</operator> <literal type="number" pos:start="137:20" pos:end="137:22">512</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="141:5" pos:end="141:35"><expr pos:start="141:5" pos:end="141:34"><call pos:start="141:5" pos:end="141:34"><name pos:start="141:5" pos:end="141:24">qemu_co_mutex_unlock</name><argument_list pos:start="141:25" pos:end="141:34">(<argument pos:start="141:26" pos:end="141:33"><expr pos:start="141:26" pos:end="141:33"><operator pos:start="141:26" pos:end="141:26">&amp;</operator><name pos:start="141:27" pos:end="141:33"><name pos:start="141:27" pos:end="141:27">s</name><operator pos:start="141:28" pos:end="141:29">-&gt;</operator><name pos:start="141:30" pos:end="141:33">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:25"><expr pos:start="145:5" pos:end="145:24"><call pos:start="145:5" pos:end="145:24"><name pos:start="145:5" pos:end="145:14">qemu_vfree</name><argument_list pos:start="145:15" pos:end="145:24">(<argument pos:start="145:16" pos:end="145:23"><expr pos:start="145:16" pos:end="145:23"><name pos:start="145:16" pos:end="145:23">orig_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="149:5" pos:end="149:15">return <expr pos:start="149:12" pos:end="149:14"><name pos:start="149:12" pos:end="149:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
