<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20440.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">ide_issue_trim_cb</name><parameter_list pos:start="1:30" pos:end="1:52">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:51"><decl pos:start="1:45" pos:end="1:51"><type pos:start="1:45" pos:end="1:51"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:51">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:5">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">TrimAIOCB</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">iocb</name> <init pos:start="5:21" pos:end="5:28">= <expr pos:start="5:23" pos:end="5:28"><name pos:start="5:23" pos:end="5:28">opaque</name></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="7:5" pos:end="65:5"><if pos:start="7:5" pos:end="61:5">if <condition pos:start="7:8" pos:end="7:17">(<expr pos:start="7:9" pos:end="7:16"><name pos:start="7:9" pos:end="7:11">ret</name> <operator pos:start="7:13" pos:end="7:14">&gt;=</operator> <literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr>)</condition> <block pos:start="7:19" pos:end="61:5">{<block_content pos:start="9:9" pos:end="59:9">

        <while pos:start="9:9" pos:end="59:9">while <condition pos:start="9:15" pos:end="9:42">(<expr pos:start="9:16" pos:end="9:41"><name pos:start="9:16" pos:end="9:22"><name pos:start="9:16" pos:end="9:19">iocb</name><operator pos:start="9:20" pos:end="9:21">-&gt;</operator><name pos:start="9:22" pos:end="9:22">j</name></name> <operator pos:start="9:24" pos:end="9:24">&lt;</operator> <name pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:29">iocb</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:35">qiov</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:41">niov</name></name></expr>)</condition> <block pos:start="9:44" pos:end="59:9">{<block_content pos:start="11:13" pos:end="57:25">

            <decl_stmt pos:start="11:13" pos:end="11:28"><decl pos:start="11:13" pos:end="11:27"><type pos:start="11:13" pos:end="11:15"><name pos:start="11:13" pos:end="11:15">int</name></type> <name pos:start="11:17" pos:end="11:17">j</name> <init pos:start="11:19" pos:end="11:27">= <expr pos:start="11:21" pos:end="11:27"><name pos:start="11:21" pos:end="11:27"><name pos:start="11:21" pos:end="11:24">iocb</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:27">j</name></name></expr></init></decl>;</decl_stmt>

            <while pos:start="13:13" pos:end="51:13">while <condition pos:start="13:19" pos:end="13:62">(<expr pos:start="13:20" pos:end="13:61"><operator pos:start="13:20" pos:end="13:21">++</operator><name pos:start="13:22" pos:end="13:28"><name pos:start="13:22" pos:end="13:25">iocb</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:28">i</name></name> <operator pos:start="13:30" pos:end="13:30">&lt;</operator> <name pos:start="13:32" pos:end="13:49"><name pos:start="13:32" pos:end="13:35">iocb</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:41">qiov</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:46">iov</name><index pos:start="13:47" pos:end="13:49">[<expr pos:start="13:48" pos:end="13:48"><name pos:start="13:48" pos:end="13:48">j</name></expr>]</index></name><operator pos:start="13:50" pos:end="13:50">.</operator><name pos:start="13:51" pos:end="13:57">iov_len</name> <operator pos:start="13:59" pos:end="13:59">/</operator> <literal type="number" pos:start="13:61" pos:end="13:61">8</literal></expr>)</condition> <block pos:start="13:64" pos:end="51:13">{<block_content pos:start="15:17" pos:end="49:23">

                <decl_stmt pos:start="15:17" pos:end="15:32"><decl pos:start="15:17" pos:end="15:31"><type pos:start="15:17" pos:end="15:19"><name pos:start="15:17" pos:end="15:19">int</name></type> <name pos:start="15:21" pos:end="15:21">i</name> <init pos:start="15:23" pos:end="15:31">= <expr pos:start="15:25" pos:end="15:31"><name pos:start="15:25" pos:end="15:31"><name pos:start="15:25" pos:end="15:28">iocb</name><operator pos:start="15:29" pos:end="15:30">-&gt;</operator><name pos:start="15:31" pos:end="15:31">i</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="17:17" pos:end="17:63"><decl pos:start="17:17" pos:end="17:62"><type pos:start="17:17" pos:end="17:26"><name pos:start="17:17" pos:end="17:24">uint64_t</name> <modifier pos:start="17:26" pos:end="17:26">*</modifier></type><name pos:start="17:27" pos:end="17:32">buffer</name> <init pos:start="17:34" pos:end="17:62">= <expr pos:start="17:36" pos:end="17:62"><name pos:start="17:36" pos:end="17:53"><name pos:start="17:36" pos:end="17:39">iocb</name><operator pos:start="17:40" pos:end="17:41">-&gt;</operator><name pos:start="17:42" pos:end="17:45">qiov</name><operator pos:start="17:46" pos:end="17:47">-&gt;</operator><name pos:start="17:48" pos:end="17:50">iov</name><index pos:start="17:51" pos:end="17:53">[<expr pos:start="17:52" pos:end="17:52"><name pos:start="17:52" pos:end="17:52">j</name></expr>]</index></name><operator pos:start="17:54" pos:end="17:54">.</operator><name pos:start="17:55" pos:end="17:62">iov_base</name></expr></init></decl>;</decl_stmt>



                <comment type="block" pos:start="21:17" pos:end="21:57">/* 6-byte LBA + 2-byte range per entry */</comment>

                <decl_stmt pos:start="23:17" pos:end="23:56"><decl pos:start="23:17" pos:end="23:55"><type pos:start="23:17" pos:end="23:24"><name pos:start="23:17" pos:end="23:24">uint64_t</name></type> <name pos:start="23:26" pos:end="23:30">entry</name> <init pos:start="23:32" pos:end="23:55">= <expr pos:start="23:34" pos:end="23:55"><call pos:start="23:34" pos:end="23:55"><name pos:start="23:34" pos:end="23:44">le64_to_cpu</name><argument_list pos:start="23:45" pos:end="23:55">(<argument pos:start="23:46" pos:end="23:54"><expr pos:start="23:46" pos:end="23:54"><name pos:start="23:46" pos:end="23:54"><name pos:start="23:46" pos:end="23:51">buffer</name><index pos:start="23:52" pos:end="23:54">[<expr pos:start="23:53" pos:end="23:53"><name pos:start="23:53" pos:end="23:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="25:17" pos:end="25:64"><decl pos:start="25:17" pos:end="25:63"><type pos:start="25:17" pos:end="25:24"><name pos:start="25:17" pos:end="25:24">uint64_t</name></type> <name pos:start="25:26" pos:end="25:31">sector</name> <init pos:start="25:33" pos:end="25:63">= <expr pos:start="25:35" pos:end="25:63"><name pos:start="25:35" pos:end="25:39">entry</name> <operator pos:start="25:41" pos:end="25:41">&amp;</operator> <literal type="number" pos:start="25:43" pos:end="25:63">0x0000ffffffffffffULL</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="27:17" pos:end="27:45"><decl pos:start="27:17" pos:end="27:44"><type pos:start="27:17" pos:end="27:24"><name pos:start="27:17" pos:end="27:24">uint16_t</name></type> <name pos:start="27:26" pos:end="27:30">count</name> <init pos:start="27:32" pos:end="27:44">= <expr pos:start="27:34" pos:end="27:44"><name pos:start="27:34" pos:end="27:38">entry</name> <operator pos:start="27:40" pos:end="27:41">&gt;&gt;</operator> <literal type="number" pos:start="27:43" pos:end="27:44">48</literal></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="31:17" pos:end="35:17"><if pos:start="31:17" pos:end="35:17">if <condition pos:start="31:20" pos:end="31:31">(<expr pos:start="31:21" pos:end="31:30"><name pos:start="31:21" pos:end="31:25">count</name> <operator pos:start="31:27" pos:end="31:28">==</operator> <literal type="number" pos:start="31:30" pos:end="31:30">0</literal></expr>)</condition> <block pos:start="31:33" pos:end="35:17">{<block_content pos:start="33:21" pos:end="33:29">

                    <continue pos:start="33:21" pos:end="33:29">continue;</continue>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="39:17" pos:end="39:53">/* Got an entry! Submit and exit.  */</comment>

                <expr_stmt pos:start="41:17" pos:end="47:74"><expr pos:start="41:17" pos:end="47:73"><name pos:start="41:17" pos:end="41:27"><name pos:start="41:17" pos:end="41:20">iocb</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:27">aiocb</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <call pos:start="41:31" pos:end="47:73"><name pos:start="41:31" pos:end="41:46">blk_aio_pdiscard</name><argument_list pos:start="41:47" pos:end="47:73">(<argument pos:start="41:48" pos:end="41:56"><expr pos:start="41:48" pos:end="41:56"><name pos:start="41:48" pos:end="41:56"><name pos:start="41:48" pos:end="41:51">iocb</name><operator pos:start="41:52" pos:end="41:53">-&gt;</operator><name pos:start="41:54" pos:end="41:56">blk</name></name></expr></argument>,

                                               <argument pos:start="43:48" pos:end="43:73"><expr pos:start="43:48" pos:end="43:73"><name pos:start="43:48" pos:end="43:53">sector</name> <operator pos:start="43:55" pos:end="43:56">&lt;&lt;</operator> <name pos:start="43:58" pos:end="43:73">BDRV_SECTOR_BITS</name></expr></argument>,

                                               <argument pos:start="45:48" pos:end="45:72"><expr pos:start="45:48" pos:end="45:72"><name pos:start="45:48" pos:end="45:52">count</name> <operator pos:start="45:54" pos:end="45:55">&lt;&lt;</operator> <name pos:start="45:57" pos:end="45:72">BDRV_SECTOR_BITS</name></expr></argument>,

                                               <argument pos:start="47:48" pos:end="47:64"><expr pos:start="47:48" pos:end="47:64"><name pos:start="47:48" pos:end="47:64">ide_issue_trim_cb</name></expr></argument>, <argument pos:start="47:67" pos:end="47:72"><expr pos:start="47:67" pos:end="47:72"><name pos:start="47:67" pos:end="47:72">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="49:17" pos:end="49:23">return;</return>

            </block_content>}</block></while>



            <expr_stmt pos:start="55:13" pos:end="55:22"><expr pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:16">iocb</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:19">j</name></name><operator pos:start="55:20" pos:end="55:21">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:25"><expr pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:16">iocb</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:19">i</name></name> <operator pos:start="57:21" pos:end="57:21">=</operator> <operator pos:start="57:23" pos:end="57:23">-</operator><literal type="number" pos:start="57:24" pos:end="57:24">1</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="65:5">else <block pos:start="61:12" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:24">

        <expr_stmt pos:start="63:9" pos:end="63:24"><expr pos:start="63:9" pos:end="63:23"><name pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:12">iocb</name><operator pos:start="63:13" pos:end="63:14">-&gt;</operator><name pos:start="63:15" pos:end="63:17">ret</name></name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:23">ret</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:23"><expr pos:start="69:5" pos:end="69:22"><name pos:start="69:5" pos:end="69:15"><name pos:start="69:5" pos:end="69:8">iocb</name><operator pos:start="69:9" pos:end="69:10">-&gt;</operator><name pos:start="69:11" pos:end="69:15">aiocb</name></name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:22">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:17">(<expr pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:12">iocb</name><operator pos:start="71:13" pos:end="71:14">-&gt;</operator><name pos:start="71:15" pos:end="71:16">bh</name></name></expr>)</condition> <block pos:start="71:19" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:35">

        <expr_stmt pos:start="73:9" pos:end="73:35"><expr pos:start="73:9" pos:end="73:34"><call pos:start="73:9" pos:end="73:34"><name pos:start="73:9" pos:end="73:24">qemu_bh_schedule</name><argument_list pos:start="73:25" pos:end="73:34">(<argument pos:start="73:26" pos:end="73:33"><expr pos:start="73:26" pos:end="73:33"><name pos:start="73:26" pos:end="73:33"><name pos:start="73:26" pos:end="73:29">iocb</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:33">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
