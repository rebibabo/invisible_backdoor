<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4216.c" pos:tabs="8"><function pos:start="1:1" pos:end="325:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">pc_q35_init</name><parameter_list pos:start="1:24" pos:end="1:50">(<parameter pos:start="1:25" pos:end="1:49"><decl pos:start="1:25" pos:end="1:49"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:43">QEMUMachineInitArgs</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="325:1">{<block_content pos:start="5:5" pos:end="323:5">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:32">below_4g_mem_size</name></decl>, <decl pos:start="5:35" pos:end="5:51"><type ref="prev" pos:start="5:5" pos:end="5:14"/><name pos:start="5:35" pos:end="5:51">above_4g_mem_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">Q35PCIHost</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:24">q35_host</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">PCIHostState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">phb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">PCIBus</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:20">host_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">PCIDevice</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:18">lpc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:36"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">BusState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:36"><name pos:start="15:15" pos:end="15:20">idebus</name><index pos:start="15:21" pos:end="15:36">[<expr pos:start="15:22" pos:end="15:35"><name pos:start="15:22" pos:end="15:35">MAX_SATA_PORTS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">ISADevice</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:24">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">ISADevice</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:21">floppy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:28">pci_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:29"><decl pos:start="23:5" pos:end="23:28"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:28">rom_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:29"><decl pos:start="25:5" pos:end="25:28"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:28">ram_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">GSIState</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:23">gsi_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:20"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:10">ISABus</name> <modifier pos:start="29:12" pos:end="29:12">*</modifier></type><name pos:start="29:13" pos:end="29:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:19">pci_enabled</name> <init pos:start="31:21" pos:end="31:23">= <expr pos:start="31:23" pos:end="31:23"><literal type="number" pos:start="31:23" pos:end="31:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">qemu_irq</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:21">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:18"><decl pos:start="35:5" pos:end="35:17"><type pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:12">qemu_irq</name> <modifier pos:start="35:14" pos:end="35:14">*</modifier></type><name pos:start="35:15" pos:end="35:17">gsi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:20"><decl pos:start="37:5" pos:end="37:19"><type pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:12">qemu_irq</name> <modifier pos:start="37:14" pos:end="37:14">*</modifier></type><name pos:start="37:15" pos:end="37:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:10"><decl pos:start="39:5" pos:end="39:9"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:27"><decl pos:start="41:5" pos:end="41:26"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">ICH9LPCState</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:26">ich9_lpc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:20"><decl pos:start="43:5" pos:end="43:19"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">PCIDevice</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:19">ahci</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:28"><decl pos:start="45:5" pos:end="45:27"><type pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:15">DeviceState</name> <modifier pos:start="45:17" pos:end="45:17">*</modifier></type><name pos:start="45:18" pos:end="45:27">icc_bridge</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:28"><decl pos:start="47:5" pos:end="47:27"><type pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:15">PcGuestInfo</name> <modifier pos:start="47:17" pos:end="47:17">*</modifier></type><name pos:start="47:18" pos:end="47:27">guest_info</name></decl>;</decl_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:52"><expr pos:start="51:5" pos:end="51:51"><name pos:start="51:5" pos:end="51:14">icc_bridge</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <call pos:start="51:18" pos:end="51:51"><name pos:start="51:18" pos:end="51:28">qdev_create</name><argument_list pos:start="51:29" pos:end="51:51">(<argument pos:start="51:30" pos:end="51:33"><expr pos:start="51:30" pos:end="51:33"><name pos:start="51:30" pos:end="51:33">NULL</name></expr></argument>, <argument pos:start="51:36" pos:end="51:50"><expr pos:start="51:36" pos:end="51:50"><name pos:start="51:36" pos:end="51:50">TYPE_ICC_BRIDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="55:56"><expr pos:start="53:5" pos:end="55:55"><call pos:start="53:5" pos:end="55:55"><name pos:start="53:5" pos:end="53:29">object_property_add_child</name><argument_list pos:start="53:30" pos:end="55:55">(<argument pos:start="53:31" pos:end="53:48"><expr pos:start="53:31" pos:end="53:48"><call pos:start="53:31" pos:end="53:48"><name pos:start="53:31" pos:end="53:46">qdev_get_machine</name><argument_list pos:start="53:47" pos:end="53:48">()</argument_list></call></expr></argument>, <argument pos:start="53:51" pos:end="53:62"><expr pos:start="53:51" pos:end="53:62"><literal type="string" pos:start="53:51" pos:end="53:62">"icc-bridge"</literal></expr></argument>,

                              <argument pos:start="55:31" pos:end="55:48"><expr pos:start="55:31" pos:end="55:48"><call pos:start="55:31" pos:end="55:48"><name pos:start="55:31" pos:end="55:36">OBJECT</name><argument_list pos:start="55:37" pos:end="55:48">(<argument pos:start="55:38" pos:end="55:47"><expr pos:start="55:38" pos:end="55:47"><name pos:start="55:38" pos:end="55:47">icc_bridge</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="55:51" pos:end="55:54"><expr pos:start="55:51" pos:end="55:54"><name pos:start="55:51" pos:end="55:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:46"><expr pos:start="59:5" pos:end="59:45"><call pos:start="59:5" pos:end="59:45"><name pos:start="59:5" pos:end="59:16">pc_cpus_init</name><argument_list pos:start="59:17" pos:end="59:45">(<argument pos:start="59:18" pos:end="59:32"><expr pos:start="59:18" pos:end="59:32"><name pos:start="59:18" pos:end="59:32"><name pos:start="59:18" pos:end="59:21">args</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:32">cpu_model</name></name></expr></argument>, <argument pos:start="59:35" pos:end="59:44"><expr pos:start="59:35" pos:end="59:44"><name pos:start="59:35" pos:end="59:44">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:38"><expr pos:start="61:5" pos:end="61:37"><call pos:start="61:5" pos:end="61:37"><name pos:start="61:5" pos:end="61:16">pc_acpi_init</name><argument_list pos:start="61:17" pos:end="61:37">(<argument pos:start="61:18" pos:end="61:36"><expr pos:start="61:18" pos:end="61:36"><literal type="string" pos:start="61:18" pos:end="61:36">"q35-acpi-dsdt.aml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:22"><expr pos:start="65:5" pos:end="65:21"><call pos:start="65:5" pos:end="65:21"><name pos:start="65:5" pos:end="65:19">kvmclock_create</name><argument_list pos:start="65:20" pos:end="65:21">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="81:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:37">(<expr pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:12">args</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:22">ram_size</name></name> <operator pos:start="69:24" pos:end="69:25">&gt;=</operator> <literal type="number" pos:start="69:27" pos:end="69:36">0xb0000000</literal></expr>)</condition> <block pos:start="69:39" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:39">

        <expr_stmt pos:start="71:9" pos:end="71:56"><expr pos:start="71:9" pos:end="71:55"><name pos:start="71:9" pos:end="71:25">above_4g_mem_size</name> <operator pos:start="71:27" pos:end="71:27">=</operator> <name pos:start="71:29" pos:end="71:42"><name pos:start="71:29" pos:end="71:32">args</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:42">ram_size</name></name> <operator pos:start="71:44" pos:end="71:44">-</operator> <literal type="number" pos:start="71:46" pos:end="71:55">0xb0000000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:39"><expr pos:start="73:9" pos:end="73:38"><name pos:start="73:9" pos:end="73:25">below_4g_mem_size</name> <operator pos:start="73:27" pos:end="73:27">=</operator> <literal type="number" pos:start="73:29" pos:end="73:38">0xb0000000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="81:5">else <block pos:start="75:12" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:43">

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:25">above_4g_mem_size</name> <operator pos:start="77:27" pos:end="77:27">=</operator> <literal type="number" pos:start="77:29" pos:end="77:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:43"><expr pos:start="79:9" pos:end="79:42"><name pos:start="79:9" pos:end="79:25">below_4g_mem_size</name> <operator pos:start="79:27" pos:end="79:27">=</operator> <name pos:start="79:29" pos:end="79:42"><name pos:start="79:29" pos:end="79:32">args</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:42">ram_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:21">/* pci enabled */</comment>

    <if_stmt pos:start="87:5" pos:end="101:5"><if pos:start="87:5" pos:end="95:5">if <condition pos:start="87:8" pos:end="87:20">(<expr pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:19">pci_enabled</name></expr>)</condition> <block pos:start="87:22" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:32">

        <expr_stmt pos:start="89:9" pos:end="89:44"><expr pos:start="89:9" pos:end="89:43"><name pos:start="89:9" pos:end="89:18">pci_memory</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <call pos:start="89:22" pos:end="89:43"><name pos:start="89:22" pos:end="89:26">g_new</name><argument_list pos:start="89:27" pos:end="89:43">(<argument pos:start="89:28" pos:end="89:39"><expr pos:start="89:28" pos:end="89:39"><name pos:start="89:28" pos:end="89:39">MemoryRegion</name></expr></argument>, <argument pos:start="89:42" pos:end="89:42"><expr pos:start="89:42" pos:end="89:42"><literal type="number" pos:start="89:42" pos:end="89:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:63"><expr pos:start="91:9" pos:end="91:62"><call pos:start="91:9" pos:end="91:62"><name pos:start="91:9" pos:end="91:26">memory_region_init</name><argument_list pos:start="91:27" pos:end="91:62">(<argument pos:start="91:28" pos:end="91:37"><expr pos:start="91:28" pos:end="91:37"><name pos:start="91:28" pos:end="91:37">pci_memory</name></expr></argument>, <argument pos:start="91:40" pos:end="91:43"><expr pos:start="91:40" pos:end="91:43"><name pos:start="91:40" pos:end="91:43">NULL</name></expr></argument>, <argument pos:start="91:46" pos:end="91:50"><expr pos:start="91:46" pos:end="91:50"><literal type="string" pos:start="91:46" pos:end="91:50">"pci"</literal></expr></argument>, <argument pos:start="91:53" pos:end="91:61"><expr pos:start="91:53" pos:end="91:61"><name pos:start="91:53" pos:end="91:61">INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:32"><expr pos:start="93:9" pos:end="93:31"><name pos:start="93:9" pos:end="93:18">rom_memory</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:31">pci_memory</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="101:5">else <block pos:start="95:12" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:41">

        <expr_stmt pos:start="97:9" pos:end="97:26"><expr pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:18">pci_memory</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <name pos:start="97:22" pos:end="97:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:41"><expr pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:18">rom_memory</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <call pos:start="99:22" pos:end="99:40"><name pos:start="99:22" pos:end="99:38">get_system_memory</name><argument_list pos:start="99:39" pos:end="99:40">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:74"><expr pos:start="105:5" pos:end="105:73"><name pos:start="105:5" pos:end="105:14">guest_info</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <call pos:start="105:18" pos:end="105:73"><name pos:start="105:18" pos:end="105:35">pc_guest_info_init</name><argument_list pos:start="105:36" pos:end="105:73">(<argument pos:start="105:37" pos:end="105:53"><expr pos:start="105:37" pos:end="105:53"><name pos:start="105:37" pos:end="105:53">below_4g_mem_size</name></expr></argument>, <argument pos:start="105:56" pos:end="105:72"><expr pos:start="105:56" pos:end="105:72"><name pos:start="105:56" pos:end="105:72">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:44"><expr pos:start="107:5" pos:end="107:43"><name pos:start="107:5" pos:end="107:28"><name pos:start="107:5" pos:end="107:14">guest_info</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:28">has_pci_info</name></name> <operator pos:start="107:30" pos:end="107:30">=</operator> <name pos:start="107:32" pos:end="107:43">has_pci_info</name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:37"><expr pos:start="109:5" pos:end="109:36"><name pos:start="109:5" pos:end="109:28"><name pos:start="109:5" pos:end="109:14">guest_info</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:28">isapc_ram_fw</name></name> <operator pos:start="109:30" pos:end="109:30">=</operator> <name pos:start="109:32" pos:end="109:36">false</name></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:40">/* allocate ram and load rom/bios */</comment>

    <if_stmt pos:start="115:5" pos:end="127:5"><if pos:start="115:5" pos:end="127:5">if <condition pos:start="115:8" pos:end="115:23">(<expr pos:start="115:9" pos:end="115:22"><operator pos:start="115:9" pos:end="115:9">!</operator><call pos:start="115:10" pos:end="115:22"><name pos:start="115:10" pos:end="115:20">xen_enabled</name><argument_list pos:start="115:21" pos:end="115:22">()</argument_list></call></expr>)</condition> <block pos:start="115:25" pos:end="127:5">{<block_content pos:start="117:9" pos:end="125:60">

        <expr_stmt pos:start="117:9" pos:end="125:60"><expr pos:start="117:9" pos:end="125:59"><call pos:start="117:9" pos:end="125:59"><name pos:start="117:9" pos:end="117:22">pc_memory_init</name><argument_list pos:start="117:23" pos:end="125:59">(<argument pos:start="117:24" pos:end="117:42"><expr pos:start="117:24" pos:end="117:42"><call pos:start="117:24" pos:end="117:42"><name pos:start="117:24" pos:end="117:40">get_system_memory</name><argument_list pos:start="117:41" pos:end="117:42">()</argument_list></call></expr></argument>,

                       <argument pos:start="119:24" pos:end="119:44"><expr pos:start="119:24" pos:end="119:44"><name pos:start="119:24" pos:end="119:44"><name pos:start="119:24" pos:end="119:27">args</name><operator pos:start="119:28" pos:end="119:29">-&gt;</operator><name pos:start="119:30" pos:end="119:44">kernel_filename</name></name></expr></argument>, <argument pos:start="119:47" pos:end="119:66"><expr pos:start="119:47" pos:end="119:66"><name pos:start="119:47" pos:end="119:66"><name pos:start="119:47" pos:end="119:50">args</name><operator pos:start="119:51" pos:end="119:52">-&gt;</operator><name pos:start="119:53" pos:end="119:66">kernel_cmdline</name></name></expr></argument>,

                       <argument pos:start="121:24" pos:end="121:44"><expr pos:start="121:24" pos:end="121:44"><name pos:start="121:24" pos:end="121:44"><name pos:start="121:24" pos:end="121:27">args</name><operator pos:start="121:28" pos:end="121:29">-&gt;</operator><name pos:start="121:30" pos:end="121:44">initrd_filename</name></name></expr></argument>,

                       <argument pos:start="123:24" pos:end="123:40"><expr pos:start="123:24" pos:end="123:40"><name pos:start="123:24" pos:end="123:40">below_4g_mem_size</name></expr></argument>, <argument pos:start="123:43" pos:end="123:59"><expr pos:start="123:43" pos:end="123:59"><name pos:start="123:43" pos:end="123:59">above_4g_mem_size</name></expr></argument>,

                       <argument pos:start="125:24" pos:end="125:33"><expr pos:start="125:24" pos:end="125:33"><name pos:start="125:24" pos:end="125:33">rom_memory</name></expr></argument>, <argument pos:start="125:36" pos:end="125:46"><expr pos:start="125:36" pos:end="125:46"><operator pos:start="125:36" pos:end="125:36">&amp;</operator><name pos:start="125:37" pos:end="125:46">ram_memory</name></expr></argument>, <argument pos:start="125:49" pos:end="125:58"><expr pos:start="125:49" pos:end="125:58"><name pos:start="125:49" pos:end="125:58">guest_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:19">/* irq lines */</comment>

    <expr_stmt pos:start="133:5" pos:end="133:46"><expr pos:start="133:5" pos:end="133:45"><name pos:start="133:5" pos:end="133:13">gsi_state</name> <operator pos:start="133:15" pos:end="133:15">=</operator> <call pos:start="133:17" pos:end="133:45"><name pos:start="133:17" pos:end="133:25">g_malloc0</name><argument_list pos:start="133:26" pos:end="133:45">(<argument pos:start="133:27" pos:end="133:44"><expr pos:start="133:27" pos:end="133:44"><sizeof pos:start="133:27" pos:end="133:44">sizeof<argument_list pos:start="133:33" pos:end="133:44">(<argument pos:start="133:34" pos:end="133:43"><expr pos:start="133:34" pos:end="133:43"><operator pos:start="133:34" pos:end="133:34">*</operator><name pos:start="133:35" pos:end="133:43">gsi_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="147:5"><if pos:start="135:5" pos:end="143:5">if <condition pos:start="135:8" pos:end="135:32">(<expr pos:start="135:9" pos:end="135:31"><call pos:start="135:9" pos:end="135:31"><name pos:start="135:9" pos:end="135:29">kvm_irqchip_in_kernel</name><argument_list pos:start="135:30" pos:end="135:31">()</argument_list></call></expr>)</condition> <block pos:start="135:34" pos:end="143:5">{<block_content pos:start="137:9" pos:end="141:47">

        <expr_stmt pos:start="137:9" pos:end="137:46"><expr pos:start="137:9" pos:end="137:45"><call pos:start="137:9" pos:end="137:45"><name pos:start="137:9" pos:end="137:32">kvm_pc_setup_irq_routing</name><argument_list pos:start="137:33" pos:end="137:45">(<argument pos:start="137:34" pos:end="137:44"><expr pos:start="137:34" pos:end="137:44"><name pos:start="137:34" pos:end="137:44">pci_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="141:47"><expr pos:start="139:9" pos:end="141:46"><name pos:start="139:9" pos:end="139:11">gsi</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <call pos:start="139:15" pos:end="141:46"><name pos:start="139:15" pos:end="139:32">qemu_allocate_irqs</name><argument_list pos:start="139:33" pos:end="141:46">(<argument pos:start="139:34" pos:end="139:51"><expr pos:start="139:34" pos:end="139:51"><name pos:start="139:34" pos:end="139:51">kvm_pc_gsi_handler</name></expr></argument>, <argument pos:start="139:54" pos:end="139:62"><expr pos:start="139:54" pos:end="139:62"><name pos:start="139:54" pos:end="139:62">gsi_state</name></expr></argument>,

                                 <argument pos:start="141:34" pos:end="141:45"><expr pos:start="141:34" pos:end="141:45"><name pos:start="141:34" pos:end="141:45">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="143:7" pos:end="147:5">else <block pos:start="143:12" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:71">

        <expr_stmt pos:start="145:9" pos:end="145:71"><expr pos:start="145:9" pos:end="145:70"><name pos:start="145:9" pos:end="145:11">gsi</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <call pos:start="145:15" pos:end="145:70"><name pos:start="145:15" pos:end="145:32">qemu_allocate_irqs</name><argument_list pos:start="145:33" pos:end="145:70">(<argument pos:start="145:34" pos:end="145:44"><expr pos:start="145:34" pos:end="145:44"><name pos:start="145:34" pos:end="145:44">gsi_handler</name></expr></argument>, <argument pos:start="145:47" pos:end="145:55"><expr pos:start="145:47" pos:end="145:55"><name pos:start="145:47" pos:end="145:55">gsi_state</name></expr></argument>, <argument pos:start="145:58" pos:end="145:69"><expr pos:start="145:58" pos:end="145:69"><name pos:start="145:58" pos:end="145:69">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="151:5" pos:end="151:29">/* create pci host bus */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:72"><expr pos:start="153:5" pos:end="153:71"><name pos:start="153:5" pos:end="153:12">q35_host</name> <operator pos:start="153:14" pos:end="153:14">=</operator> <call pos:start="153:16" pos:end="153:71"><name pos:start="153:16" pos:end="153:30">Q35_HOST_DEVICE</name><argument_list pos:start="153:31" pos:end="153:71">(<argument pos:start="153:32" pos:end="153:70"><expr pos:start="153:32" pos:end="153:70"><call pos:start="153:32" pos:end="153:70"><name pos:start="153:32" pos:end="153:42">qdev_create</name><argument_list pos:start="153:43" pos:end="153:70">(<argument pos:start="153:44" pos:end="153:47"><expr pos:start="153:44" pos:end="153:47"><name pos:start="153:44" pos:end="153:47">NULL</name></expr></argument>, <argument pos:start="153:50" pos:end="153:69"><expr pos:start="153:50" pos:end="153:69"><name pos:start="153:50" pos:end="153:69">TYPE_Q35_HOST_DEVICE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:81"><expr pos:start="157:5" pos:end="157:80"><call pos:start="157:5" pos:end="157:80"><name pos:start="157:5" pos:end="157:29">object_property_add_child</name><argument_list pos:start="157:30" pos:end="157:80">(<argument pos:start="157:31" pos:end="157:48"><expr pos:start="157:31" pos:end="157:48"><call pos:start="157:31" pos:end="157:48"><name pos:start="157:31" pos:end="157:46">qdev_get_machine</name><argument_list pos:start="157:47" pos:end="157:48">()</argument_list></call></expr></argument>, <argument pos:start="157:51" pos:end="157:55"><expr pos:start="157:51" pos:end="157:55"><literal type="string" pos:start="157:51" pos:end="157:55">"q35"</literal></expr></argument>, <argument pos:start="157:58" pos:end="157:73"><expr pos:start="157:58" pos:end="157:73"><call pos:start="157:58" pos:end="157:73"><name pos:start="157:58" pos:end="157:63">OBJECT</name><argument_list pos:start="157:64" pos:end="157:73">(<argument pos:start="157:65" pos:end="157:72"><expr pos:start="157:65" pos:end="157:72"><name pos:start="157:65" pos:end="157:72">q35_host</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="157:76" pos:end="157:79"><expr pos:start="157:76" pos:end="157:79"><name pos:start="157:76" pos:end="157:79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:42"><expr pos:start="159:5" pos:end="159:41"><name pos:start="159:5" pos:end="159:28"><name pos:start="159:5" pos:end="159:12">q35_host</name><operator pos:start="159:13" pos:end="159:14">-&gt;</operator><name pos:start="159:15" pos:end="159:17">mch</name><operator pos:start="159:18" pos:end="159:18">.</operator><name pos:start="159:19" pos:end="159:28">ram_memory</name></name> <operator pos:start="159:30" pos:end="159:30">=</operator> <name pos:start="159:32" pos:end="159:41">ram_memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:49"><expr pos:start="161:5" pos:end="161:48"><name pos:start="161:5" pos:end="161:35"><name pos:start="161:5" pos:end="161:12">q35_host</name><operator pos:start="161:13" pos:end="161:14">-&gt;</operator><name pos:start="161:15" pos:end="161:17">mch</name><operator pos:start="161:18" pos:end="161:18">.</operator><name pos:start="161:19" pos:end="161:35">pci_address_space</name></name> <operator pos:start="161:37" pos:end="161:37">=</operator> <name pos:start="161:39" pos:end="161:48">pci_memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:54"><expr pos:start="163:5" pos:end="163:53"><name pos:start="163:5" pos:end="163:31"><name pos:start="163:5" pos:end="163:12">q35_host</name><operator pos:start="163:13" pos:end="163:14">-&gt;</operator><name pos:start="163:15" pos:end="163:17">mch</name><operator pos:start="163:18" pos:end="163:18">.</operator><name pos:start="163:19" pos:end="163:31">system_memory</name></name> <operator pos:start="163:33" pos:end="163:33">=</operator> <call pos:start="163:35" pos:end="163:53"><name pos:start="163:35" pos:end="163:51">get_system_memory</name><argument_list pos:start="163:52" pos:end="163:53">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:53"><expr pos:start="165:5" pos:end="165:52"><name pos:start="165:5" pos:end="165:34"><name pos:start="165:5" pos:end="165:12">q35_host</name><operator pos:start="165:13" pos:end="165:14">-&gt;</operator><name pos:start="165:15" pos:end="165:17">mch</name><operator pos:start="165:18" pos:end="165:18">.</operator><name pos:start="165:19" pos:end="165:34">address_space_io</name></name> <operator pos:start="165:36" pos:end="165:36">=</operator> <call pos:start="165:38" pos:end="165:52"><name pos:start="165:38" pos:end="165:50">get_system_io</name><argument_list pos:start="165:51" pos:end="165:52">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:56"><expr pos:start="167:5" pos:end="167:55"><name pos:start="167:5" pos:end="167:35"><name pos:start="167:5" pos:end="167:12">q35_host</name><operator pos:start="167:13" pos:end="167:14">-&gt;</operator><name pos:start="167:15" pos:end="167:17">mch</name><operator pos:start="167:18" pos:end="167:18">.</operator><name pos:start="167:19" pos:end="167:35">below_4g_mem_size</name></name> <operator pos:start="167:37" pos:end="167:37">=</operator> <name pos:start="167:39" pos:end="167:55">below_4g_mem_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:56"><expr pos:start="169:5" pos:end="169:55"><name pos:start="169:5" pos:end="169:35"><name pos:start="169:5" pos:end="169:12">q35_host</name><operator pos:start="169:13" pos:end="169:14">-&gt;</operator><name pos:start="169:15" pos:end="169:17">mch</name><operator pos:start="169:18" pos:end="169:18">.</operator><name pos:start="169:19" pos:end="169:35">above_4g_mem_size</name></name> <operator pos:start="169:37" pos:end="169:37">=</operator> <name pos:start="169:39" pos:end="169:55">above_4g_mem_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:42"><expr pos:start="171:5" pos:end="171:41"><name pos:start="171:5" pos:end="171:28"><name pos:start="171:5" pos:end="171:12">q35_host</name><operator pos:start="171:13" pos:end="171:14">-&gt;</operator><name pos:start="171:15" pos:end="171:17">mch</name><operator pos:start="171:18" pos:end="171:18">.</operator><name pos:start="171:19" pos:end="171:28">guest_info</name></name> <operator pos:start="171:30" pos:end="171:30">=</operator> <name pos:start="171:32" pos:end="171:41">guest_info</name></expr>;</expr_stmt>

    <comment type="block" pos:start="173:5" pos:end="173:13">/* pci */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:39"><expr pos:start="175:5" pos:end="175:38"><call pos:start="175:5" pos:end="175:38"><name pos:start="175:5" pos:end="175:20">qdev_init_nofail</name><argument_list pos:start="175:21" pos:end="175:38">(<argument pos:start="175:22" pos:end="175:37"><expr pos:start="175:22" pos:end="175:37"><call pos:start="175:22" pos:end="175:37"><name pos:start="175:22" pos:end="175:27">DEVICE</name><argument_list pos:start="175:28" pos:end="175:37">(<argument pos:start="175:29" pos:end="175:36"><expr pos:start="175:29" pos:end="175:36"><name pos:start="175:29" pos:end="175:36">q35_host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:36"><expr pos:start="177:5" pos:end="177:35"><name pos:start="177:5" pos:end="177:7">phb</name> <operator pos:start="177:9" pos:end="177:9">=</operator> <call pos:start="177:11" pos:end="177:35"><name pos:start="177:11" pos:end="177:25">PCI_HOST_BRIDGE</name><argument_list pos:start="177:26" pos:end="177:35">(<argument pos:start="177:27" pos:end="177:34"><expr pos:start="177:27" pos:end="177:34"><name pos:start="177:27" pos:end="177:34">q35_host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:24"><expr pos:start="179:5" pos:end="179:23"><name pos:start="179:5" pos:end="179:12">host_bus</name> <operator pos:start="179:14" pos:end="179:14">=</operator> <name pos:start="179:16" pos:end="179:23"><name pos:start="179:16" pos:end="179:18">phb</name><operator pos:start="179:19" pos:end="179:20">-&gt;</operator><name pos:start="179:21" pos:end="179:23">bus</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="181:5" pos:end="181:24">/* create ISA bus */</comment>

    <expr_stmt pos:start="183:5" pos:end="187:64"><expr pos:start="183:5" pos:end="187:63"><name pos:start="183:5" pos:end="183:7">lpc</name> <operator pos:start="183:9" pos:end="183:9">=</operator> <call pos:start="183:11" pos:end="187:63"><name pos:start="183:11" pos:end="183:41">pci_create_simple_multifunction</name><argument_list pos:start="183:42" pos:end="187:63">(<argument pos:start="183:43" pos:end="183:50"><expr pos:start="183:43" pos:end="183:50"><name pos:start="183:43" pos:end="183:50">host_bus</name></expr></argument>, <argument pos:start="183:53" pos:end="185:56"><expr pos:start="183:53" pos:end="185:56"><call pos:start="183:53" pos:end="185:56"><name pos:start="183:53" pos:end="183:61">PCI_DEVFN</name><argument_list pos:start="183:62" pos:end="185:56">(<argument pos:start="183:63" pos:end="183:74"><expr pos:start="183:63" pos:end="183:74"><name pos:start="183:63" pos:end="183:74">ICH9_LPC_DEV</name></expr></argument>,

                                          <argument pos:start="185:43" pos:end="185:55"><expr pos:start="185:43" pos:end="185:55"><name pos:start="185:43" pos:end="185:55">ICH9_LPC_FUNC</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="185:59" pos:end="185:62"><expr pos:start="185:59" pos:end="185:62"><name pos:start="185:59" pos:end="185:62">true</name></expr></argument>,

                                          <argument pos:start="187:43" pos:end="187:62"><expr pos:start="187:43" pos:end="187:62"><name pos:start="187:43" pos:end="187:62">TYPE_ICH9_LPC_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:36"><expr pos:start="189:5" pos:end="189:35"><name pos:start="189:5" pos:end="189:12">ich9_lpc</name> <operator pos:start="189:14" pos:end="189:14">=</operator> <call pos:start="189:16" pos:end="189:35"><name pos:start="189:16" pos:end="189:30">ICH9_LPC_DEVICE</name><argument_list pos:start="189:31" pos:end="189:35">(<argument pos:start="189:32" pos:end="189:34"><expr pos:start="189:32" pos:end="189:34"><name pos:start="189:32" pos:end="189:34">lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:24"><expr pos:start="191:5" pos:end="191:23"><name pos:start="191:5" pos:end="191:17"><name pos:start="191:5" pos:end="191:12">ich9_lpc</name><operator pos:start="191:13" pos:end="191:14">-&gt;</operator><name pos:start="191:15" pos:end="191:17">pic</name></name> <operator pos:start="191:19" pos:end="191:19">=</operator> <name pos:start="191:21" pos:end="191:23">gsi</name></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:45"><expr pos:start="193:5" pos:end="193:44"><name pos:start="193:5" pos:end="193:20"><name pos:start="193:5" pos:end="193:12">ich9_lpc</name><operator pos:start="193:13" pos:end="193:14">-&gt;</operator><name pos:start="193:15" pos:end="193:20">ioapic</name></name> <operator pos:start="193:22" pos:end="193:22">=</operator> <name pos:start="193:24" pos:end="193:44"><name pos:start="193:24" pos:end="193:32">gsi_state</name><operator pos:start="193:33" pos:end="193:34">-&gt;</operator><name pos:start="193:35" pos:end="193:44">ioapic_irq</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="197:36"><expr pos:start="195:5" pos:end="197:35"><call pos:start="195:5" pos:end="197:35"><name pos:start="195:5" pos:end="195:16">pci_bus_irqs</name><argument_list pos:start="195:17" pos:end="197:35">(<argument pos:start="195:18" pos:end="195:25"><expr pos:start="195:18" pos:end="195:25"><name pos:start="195:18" pos:end="195:25">host_bus</name></expr></argument>, <argument pos:start="195:28" pos:end="195:43"><expr pos:start="195:28" pos:end="195:43"><name pos:start="195:28" pos:end="195:43">ich9_lpc_set_irq</name></expr></argument>, <argument pos:start="195:46" pos:end="195:61"><expr pos:start="195:46" pos:end="195:61"><name pos:start="195:46" pos:end="195:61">ich9_lpc_map_irq</name></expr></argument>, <argument pos:start="195:64" pos:end="195:71"><expr pos:start="195:64" pos:end="195:71"><name pos:start="195:64" pos:end="195:71">ich9_lpc</name></expr></argument>,

                 <argument pos:start="197:18" pos:end="197:34"><expr pos:start="197:18" pos:end="197:34"><name pos:start="197:18" pos:end="197:34">ICH9_LPC_NB_PIRQS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:67"><expr pos:start="199:5" pos:end="199:66"><call pos:start="199:5" pos:end="199:66"><name pos:start="199:5" pos:end="199:28">pci_bus_set_route_irq_fn</name><argument_list pos:start="199:29" pos:end="199:66">(<argument pos:start="199:30" pos:end="199:37"><expr pos:start="199:30" pos:end="199:37"><name pos:start="199:30" pos:end="199:37">host_bus</name></expr></argument>, <argument pos:start="199:40" pos:end="199:65"><expr pos:start="199:40" pos:end="199:65"><name pos:start="199:40" pos:end="199:65">ich9_route_intx_pin_to_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:32"><expr pos:start="201:5" pos:end="201:31"><name pos:start="201:5" pos:end="201:11">isa_bus</name> <operator pos:start="201:13" pos:end="201:13">=</operator> <name pos:start="201:15" pos:end="201:31"><name pos:start="201:15" pos:end="201:22">ich9_lpc</name><operator pos:start="201:23" pos:end="201:24">-&gt;</operator><name pos:start="201:25" pos:end="201:31">isa_bus</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="205:5" pos:end="205:17">/*end early*/</comment>

    <expr_stmt pos:start="207:5" pos:end="207:31"><expr pos:start="207:5" pos:end="207:30"><call pos:start="207:5" pos:end="207:30"><name pos:start="207:5" pos:end="207:16">isa_bus_irqs</name><argument_list pos:start="207:17" pos:end="207:30">(<argument pos:start="207:18" pos:end="207:24"><expr pos:start="207:18" pos:end="207:24"><name pos:start="207:18" pos:end="207:24">isa_bus</name></expr></argument>, <argument pos:start="207:27" pos:end="207:29"><expr pos:start="207:27" pos:end="207:29"><name pos:start="207:27" pos:end="207:29">gsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="211:5" pos:end="225:5"><if pos:start="211:5" pos:end="215:5">if <condition pos:start="211:8" pos:end="211:32">(<expr pos:start="211:9" pos:end="211:31"><call pos:start="211:9" pos:end="211:31"><name pos:start="211:9" pos:end="211:29">kvm_irqchip_in_kernel</name><argument_list pos:start="211:30" pos:end="211:31">()</argument_list></call></expr>)</condition> <block pos:start="211:34" pos:end="215:5">{<block_content pos:start="213:9" pos:end="213:40">

        <expr_stmt pos:start="213:9" pos:end="213:40"><expr pos:start="213:9" pos:end="213:39"><name pos:start="213:9" pos:end="213:13">i8259</name> <operator pos:start="213:15" pos:end="213:15">=</operator> <call pos:start="213:17" pos:end="213:39"><name pos:start="213:17" pos:end="213:30">kvm_i8259_init</name><argument_list pos:start="213:31" pos:end="213:39">(<argument pos:start="213:32" pos:end="213:38"><expr pos:start="213:32" pos:end="213:38"><name pos:start="213:32" pos:end="213:38">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="215:7" pos:end="219:5">else if <condition pos:start="215:15" pos:end="215:29">(<expr pos:start="215:16" pos:end="215:28"><call pos:start="215:16" pos:end="215:28"><name pos:start="215:16" pos:end="215:26">xen_enabled</name><argument_list pos:start="215:27" pos:end="215:28">()</argument_list></call></expr>)</condition> <block pos:start="215:31" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:48">

        <expr_stmt pos:start="217:9" pos:end="217:48"><expr pos:start="217:9" pos:end="217:47"><name pos:start="217:9" pos:end="217:13">i8259</name> <operator pos:start="217:15" pos:end="217:15">=</operator> <call pos:start="217:17" pos:end="217:47"><name pos:start="217:17" pos:end="217:45">xen_interrupt_controller_init</name><argument_list pos:start="217:46" pos:end="217:47">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="219:7" pos:end="225:5">else <block pos:start="219:12" pos:end="225:5">{<block_content pos:start="221:9" pos:end="223:48">

        <expr_stmt pos:start="221:9" pos:end="221:40"><expr pos:start="221:9" pos:end="221:39"><name pos:start="221:9" pos:end="221:15">cpu_irq</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <call pos:start="221:19" pos:end="221:39"><name pos:start="221:19" pos:end="221:37">pc_allocate_cpu_irq</name><argument_list pos:start="221:38" pos:end="221:39">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:48"><expr pos:start="223:9" pos:end="223:47"><name pos:start="223:9" pos:end="223:13">i8259</name> <operator pos:start="223:15" pos:end="223:15">=</operator> <call pos:start="223:17" pos:end="223:47"><name pos:start="223:17" pos:end="223:26">i8259_init</name><argument_list pos:start="223:27" pos:end="223:47">(<argument pos:start="223:28" pos:end="223:34"><expr pos:start="223:28" pos:end="223:34"><name pos:start="223:28" pos:end="223:34">isa_bus</name></expr></argument>, <argument pos:start="223:37" pos:end="223:46"><expr pos:start="223:37" pos:end="223:46"><name pos:start="223:37" pos:end="223:46"><name pos:start="223:37" pos:end="223:43">cpu_irq</name><index pos:start="223:44" pos:end="223:46">[<expr pos:start="223:45" pos:end="223:45"><literal type="number" pos:start="223:45" pos:end="223:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="229:5" pos:end="233:5">for <control pos:start="229:9" pos:end="229:38">(<init pos:start="229:10" pos:end="229:15"><expr pos:start="229:10" pos:end="229:14"><name pos:start="229:10" pos:end="229:10">i</name> <operator pos:start="229:12" pos:end="229:12">=</operator> <literal type="number" pos:start="229:14" pos:end="229:14">0</literal></expr>;</init> <condition pos:start="229:17" pos:end="229:33"><expr pos:start="229:17" pos:end="229:32"><name pos:start="229:17" pos:end="229:17">i</name> <operator pos:start="229:19" pos:end="229:19">&lt;</operator> <name pos:start="229:21" pos:end="229:32">ISA_NUM_IRQS</name></expr>;</condition> <incr pos:start="229:35" pos:end="229:37"><expr pos:start="229:35" pos:end="229:37"><name pos:start="229:35" pos:end="229:35">i</name><operator pos:start="229:36" pos:end="229:37">++</operator></expr></incr>)</control> <block pos:start="229:40" pos:end="233:5">{<block_content pos:start="231:9" pos:end="231:43">

        <expr_stmt pos:start="231:9" pos:end="231:43"><expr pos:start="231:9" pos:end="231:42"><name pos:start="231:9" pos:end="231:31"><name pos:start="231:9" pos:end="231:17">gsi_state</name><operator pos:start="231:18" pos:end="231:19">-&gt;</operator><name pos:start="231:20" pos:end="231:28">i8259_irq</name><index pos:start="231:29" pos:end="231:31">[<expr pos:start="231:30" pos:end="231:30"><name pos:start="231:30" pos:end="231:30">i</name></expr>]</index></name> <operator pos:start="231:33" pos:end="231:33">=</operator> <name pos:start="231:35" pos:end="231:42"><name pos:start="231:35" pos:end="231:39">i8259</name><index pos:start="231:40" pos:end="231:42">[<expr pos:start="231:41" pos:end="231:41"><name pos:start="231:41" pos:end="231:41">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="235:5" pos:end="239:5"><if pos:start="235:5" pos:end="239:5">if <condition pos:start="235:8" pos:end="235:20">(<expr pos:start="235:9" pos:end="235:19"><name pos:start="235:9" pos:end="235:19">pci_enabled</name></expr>)</condition> <block pos:start="235:22" pos:end="239:5">{<block_content pos:start="237:9" pos:end="237:41">

        <expr_stmt pos:start="237:9" pos:end="237:41"><expr pos:start="237:9" pos:end="237:40"><call pos:start="237:9" pos:end="237:40"><name pos:start="237:9" pos:end="237:23">ioapic_init_gsi</name><argument_list pos:start="237:24" pos:end="237:40">(<argument pos:start="237:25" pos:end="237:33"><expr pos:start="237:25" pos:end="237:33"><name pos:start="237:25" pos:end="237:33">gsi_state</name></expr></argument>, <argument pos:start="237:36" pos:end="237:39"><expr pos:start="237:36" pos:end="237:39"><name pos:start="237:36" pos:end="237:39">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:33"><expr pos:start="241:5" pos:end="241:32"><call pos:start="241:5" pos:end="241:32"><name pos:start="241:5" pos:end="241:20">qdev_init_nofail</name><argument_list pos:start="241:21" pos:end="241:32">(<argument pos:start="241:22" pos:end="241:31"><expr pos:start="241:22" pos:end="241:31"><name pos:start="241:22" pos:end="241:31">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:34"><expr pos:start="245:5" pos:end="245:33"><call pos:start="245:5" pos:end="245:33"><name pos:start="245:5" pos:end="245:24">pc_register_ferr_irq</name><argument_list pos:start="245:25" pos:end="245:33">(<argument pos:start="245:26" pos:end="245:32"><expr pos:start="245:26" pos:end="245:32"><name pos:start="245:26" pos:end="245:32"><name pos:start="245:26" pos:end="245:28">gsi</name><index pos:start="245:29" pos:end="245:32">[<expr pos:start="245:30" pos:end="245:31"><literal type="number" pos:start="245:30" pos:end="245:31">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="249:5" pos:end="249:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="251:5" pos:end="251:67"><expr pos:start="251:5" pos:end="251:66"><call pos:start="251:5" pos:end="251:66"><name pos:start="251:5" pos:end="251:24">pc_basic_device_init</name><argument_list pos:start="251:25" pos:end="251:66">(<argument pos:start="251:26" pos:end="251:32"><expr pos:start="251:26" pos:end="251:32"><name pos:start="251:26" pos:end="251:32">isa_bus</name></expr></argument>, <argument pos:start="251:35" pos:end="251:37"><expr pos:start="251:35" pos:end="251:37"><name pos:start="251:35" pos:end="251:37">gsi</name></expr></argument>, <argument pos:start="251:40" pos:end="251:49"><expr pos:start="251:40" pos:end="251:49"><operator pos:start="251:40" pos:end="251:40">&amp;</operator><name pos:start="251:41" pos:end="251:49">rtc_state</name></expr></argument>, <argument pos:start="251:52" pos:end="251:58"><expr pos:start="251:52" pos:end="251:58"><operator pos:start="251:52" pos:end="251:52">&amp;</operator><name pos:start="251:53" pos:end="251:58">floppy</name></expr></argument>, <argument pos:start="251:61" pos:end="251:65"><expr pos:start="251:61" pos:end="251:65"><name pos:start="251:61" pos:end="251:65">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="255:5" pos:end="255:33">/* connect pm stuff to lpc */</comment>

    <expr_stmt pos:start="257:5" pos:end="257:26"><expr pos:start="257:5" pos:end="257:25"><call pos:start="257:5" pos:end="257:25"><name pos:start="257:5" pos:end="257:20">ich9_lpc_pm_init</name><argument_list pos:start="257:21" pos:end="257:25">(<argument pos:start="257:22" pos:end="257:24"><expr pos:start="257:22" pos:end="257:24"><name pos:start="257:22" pos:end="257:24">lpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="261:5" pos:end="261:69">/* ahci and SATA device, for q35 1 ahci controller is built-in */</comment>

    <expr_stmt pos:start="263:5" pos:end="269:62"><expr pos:start="263:5" pos:end="269:61"><name pos:start="263:5" pos:end="263:8">ahci</name> <operator pos:start="263:10" pos:end="263:10">=</operator> <call pos:start="263:12" pos:end="269:61"><name pos:start="263:12" pos:end="263:42">pci_create_simple_multifunction</name><argument_list pos:start="263:43" pos:end="269:61">(<argument pos:start="263:44" pos:end="263:51"><expr pos:start="263:44" pos:end="263:51"><name pos:start="263:44" pos:end="263:51">host_bus</name></expr></argument>,

                                           <argument pos:start="265:44" pos:end="267:69"><expr pos:start="265:44" pos:end="267:69"><call pos:start="265:44" pos:end="267:69"><name pos:start="265:44" pos:end="265:52">PCI_DEVFN</name><argument_list pos:start="265:53" pos:end="267:69">(<argument pos:start="265:54" pos:end="265:67"><expr pos:start="265:54" pos:end="265:67"><name pos:start="265:54" pos:end="265:67">ICH9_SATA1_DEV</name></expr></argument>,

                                                     <argument pos:start="267:54" pos:end="267:68"><expr pos:start="267:54" pos:end="267:68"><name pos:start="267:54" pos:end="267:68">ICH9_SATA1_FUNC</name></expr></argument>)</argument_list></call></expr></argument>,

                                           <argument pos:start="269:44" pos:end="269:47"><expr pos:start="269:44" pos:end="269:47"><name pos:start="269:44" pos:end="269:47">true</name></expr></argument>, <argument pos:start="269:50" pos:end="269:60"><expr pos:start="269:50" pos:end="269:60"><literal type="string" pos:start="269:50" pos:end="269:60">"ich9-ahci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:57"><expr pos:start="271:5" pos:end="271:56"><name pos:start="271:5" pos:end="271:13"><name pos:start="271:5" pos:end="271:10">idebus</name><index pos:start="271:11" pos:end="271:13">[<expr pos:start="271:12" pos:end="271:12"><literal type="number" pos:start="271:12" pos:end="271:12">0</literal></expr>]</index></name> <operator pos:start="271:15" pos:end="271:15">=</operator> <call pos:start="271:17" pos:end="271:56"><name pos:start="271:17" pos:end="271:34">qdev_get_child_bus</name><argument_list pos:start="271:35" pos:end="271:56">(<argument pos:start="271:36" pos:end="271:46"><expr pos:start="271:36" pos:end="271:46"><operator pos:start="271:36" pos:end="271:36">&amp;</operator><name pos:start="271:37" pos:end="271:46"><name pos:start="271:37" pos:end="271:40">ahci</name><operator pos:start="271:41" pos:end="271:42">-&gt;</operator><name pos:start="271:43" pos:end="271:46">qdev</name></name></expr></argument>, <argument pos:start="271:49" pos:end="271:55"><expr pos:start="271:49" pos:end="271:55"><literal type="string" pos:start="271:49" pos:end="271:55">"ide.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:57"><expr pos:start="273:5" pos:end="273:56"><name pos:start="273:5" pos:end="273:13"><name pos:start="273:5" pos:end="273:10">idebus</name><index pos:start="273:11" pos:end="273:13">[<expr pos:start="273:12" pos:end="273:12"><literal type="number" pos:start="273:12" pos:end="273:12">1</literal></expr>]</index></name> <operator pos:start="273:15" pos:end="273:15">=</operator> <call pos:start="273:17" pos:end="273:56"><name pos:start="273:17" pos:end="273:34">qdev_get_child_bus</name><argument_list pos:start="273:35" pos:end="273:56">(<argument pos:start="273:36" pos:end="273:46"><expr pos:start="273:36" pos:end="273:46"><operator pos:start="273:36" pos:end="273:36">&amp;</operator><name pos:start="273:37" pos:end="273:46"><name pos:start="273:37" pos:end="273:40">ahci</name><operator pos:start="273:41" pos:end="273:42">-&gt;</operator><name pos:start="273:43" pos:end="273:46">qdev</name></name></expr></argument>, <argument pos:start="273:49" pos:end="273:55"><expr pos:start="273:49" pos:end="273:55"><literal type="string" pos:start="273:49" pos:end="273:55">"ide.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="277:5" pos:end="283:5"><if pos:start="277:5" pos:end="283:5">if <condition pos:start="277:8" pos:end="277:27">(<expr pos:start="277:9" pos:end="277:26"><call pos:start="277:9" pos:end="277:26"><name pos:start="277:9" pos:end="277:19">usb_enabled</name><argument_list pos:start="277:20" pos:end="277:26">(<argument pos:start="277:21" pos:end="277:25"><expr pos:start="277:21" pos:end="277:25"><name pos:start="277:21" pos:end="277:25">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="277:29" pos:end="283:5">{<block_content pos:start="281:9" pos:end="281:57">

        <comment type="block" pos:start="279:9" pos:end="279:61">/* Should we create 6 UHCI according to ich9 spec? */</comment>

        <expr_stmt pos:start="281:9" pos:end="281:57"><expr pos:start="281:9" pos:end="281:56"><call pos:start="281:9" pos:end="281:56"><name pos:start="281:9" pos:end="281:40">ehci_create_ich9_with_companions</name><argument_list pos:start="281:41" pos:end="281:56">(<argument pos:start="281:42" pos:end="281:49"><expr pos:start="281:42" pos:end="281:49"><name pos:start="281:42" pos:end="281:49">host_bus</name></expr></argument>, <argument pos:start="281:52" pos:end="281:55"><expr pos:start="281:52" pos:end="281:55"><literal type="number" pos:start="281:52" pos:end="281:55">0x1d</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="287:5" pos:end="287:42">/* TODO: Populate SPD eeprom data.  */</comment>

    <expr_stmt pos:start="289:5" pos:end="295:34"><expr pos:start="289:5" pos:end="295:33"><call pos:start="289:5" pos:end="295:33"><name pos:start="289:5" pos:end="289:21">smbus_eeprom_init</name><argument_list pos:start="289:22" pos:end="295:33">(<argument pos:start="289:23" pos:end="293:43"><expr pos:start="289:23" pos:end="293:43"><call pos:start="289:23" pos:end="293:43"><name pos:start="289:23" pos:end="289:35">ich9_smb_init</name><argument_list pos:start="289:36" pos:end="293:43">(<argument pos:start="289:37" pos:end="289:44"><expr pos:start="289:37" pos:end="289:44"><name pos:start="289:37" pos:end="289:44">host_bus</name></expr></argument>,

                                    <argument pos:start="291:37" pos:end="291:74"><expr pos:start="291:37" pos:end="291:74"><call pos:start="291:37" pos:end="291:74"><name pos:start="291:37" pos:end="291:45">PCI_DEVFN</name><argument_list pos:start="291:46" pos:end="291:74">(<argument pos:start="291:47" pos:end="291:58"><expr pos:start="291:47" pos:end="291:58"><name pos:start="291:47" pos:end="291:58">ICH9_SMB_DEV</name></expr></argument>, <argument pos:start="291:61" pos:end="291:73"><expr pos:start="291:61" pos:end="291:73"><name pos:start="291:61" pos:end="291:73">ICH9_SMB_FUNC</name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="293:37" pos:end="293:42"><expr pos:start="293:37" pos:end="293:42"><literal type="number" pos:start="293:37" pos:end="293:42">0xb100</literal></expr></argument>)</argument_list></call></expr></argument>,

                      <argument pos:start="295:23" pos:end="295:23"><expr pos:start="295:23" pos:end="295:23"><literal type="number" pos:start="295:23" pos:end="295:23">8</literal></expr></argument>, <argument pos:start="295:26" pos:end="295:29"><expr pos:start="295:26" pos:end="295:29"><name pos:start="295:26" pos:end="295:29">NULL</name></expr></argument>, <argument pos:start="295:32" pos:end="295:32"><expr pos:start="295:32" pos:end="295:32"><literal type="number" pos:start="295:32" pos:end="295:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="299:5" pos:end="301:58"><expr pos:start="299:5" pos:end="301:57"><call pos:start="299:5" pos:end="301:57"><name pos:start="299:5" pos:end="299:16">pc_cmos_init</name><argument_list pos:start="299:17" pos:end="301:57">(<argument pos:start="299:18" pos:end="299:34"><expr pos:start="299:18" pos:end="299:34"><name pos:start="299:18" pos:end="299:34">below_4g_mem_size</name></expr></argument>, <argument pos:start="299:37" pos:end="299:53"><expr pos:start="299:37" pos:end="299:53"><name pos:start="299:37" pos:end="299:53">above_4g_mem_size</name></expr></argument>, <argument pos:start="299:56" pos:end="299:72"><expr pos:start="299:56" pos:end="299:72"><name pos:start="299:56" pos:end="299:72"><name pos:start="299:56" pos:end="299:59">args</name><operator pos:start="299:60" pos:end="299:61">-&gt;</operator><name pos:start="299:62" pos:end="299:72">boot_device</name></name></expr></argument>,

                 <argument pos:start="301:18" pos:end="301:23"><expr pos:start="301:18" pos:end="301:23"><name pos:start="301:18" pos:end="301:23">floppy</name></expr></argument>, <argument pos:start="301:26" pos:end="301:34"><expr pos:start="301:26" pos:end="301:34"><name pos:start="301:26" pos:end="301:34"><name pos:start="301:26" pos:end="301:31">idebus</name><index pos:start="301:32" pos:end="301:34">[<expr pos:start="301:33" pos:end="301:33"><literal type="number" pos:start="301:33" pos:end="301:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="301:37" pos:end="301:45"><expr pos:start="301:37" pos:end="301:45"><name pos:start="301:37" pos:end="301:45"><name pos:start="301:37" pos:end="301:42">idebus</name><index pos:start="301:43" pos:end="301:45">[<expr pos:start="301:44" pos:end="301:44"><literal type="number" pos:start="301:44" pos:end="301:44">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="301:48" pos:end="301:56"><expr pos:start="301:48" pos:end="301:56"><name pos:start="301:48" pos:end="301:56">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="305:5" pos:end="305:71">/* the rest devices to which pci devfn is automatically assigned */</comment>

    <expr_stmt pos:start="307:5" pos:end="307:35"><expr pos:start="307:5" pos:end="307:34"><call pos:start="307:5" pos:end="307:34"><name pos:start="307:5" pos:end="307:15">pc_vga_init</name><argument_list pos:start="307:16" pos:end="307:34">(<argument pos:start="307:17" pos:end="307:23"><expr pos:start="307:17" pos:end="307:23"><name pos:start="307:17" pos:end="307:23">isa_bus</name></expr></argument>, <argument pos:start="307:26" pos:end="307:33"><expr pos:start="307:26" pos:end="307:33"><name pos:start="307:26" pos:end="307:33">host_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="309:35"><expr pos:start="309:5" pos:end="309:34"><call pos:start="309:5" pos:end="309:34"><name pos:start="309:5" pos:end="309:15">pc_nic_init</name><argument_list pos:start="309:16" pos:end="309:34">(<argument pos:start="309:17" pos:end="309:23"><expr pos:start="309:17" pos:end="309:23"><name pos:start="309:17" pos:end="309:23">isa_bus</name></expr></argument>, <argument pos:start="309:26" pos:end="309:33"><expr pos:start="309:26" pos:end="309:33"><name pos:start="309:26" pos:end="309:33">host_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="311:5" pos:end="315:5"><if pos:start="311:5" pos:end="315:5">if <condition pos:start="311:8" pos:end="311:20">(<expr pos:start="311:9" pos:end="311:19"><name pos:start="311:9" pos:end="311:19">pci_enabled</name></expr>)</condition> <block pos:start="311:22" pos:end="315:5">{<block_content pos:start="313:9" pos:end="313:37">

        <expr_stmt pos:start="313:9" pos:end="313:37"><expr pos:start="313:9" pos:end="313:36"><call pos:start="313:9" pos:end="313:36"><name pos:start="313:9" pos:end="313:26">pc_pci_device_init</name><argument_list pos:start="313:27" pos:end="313:36">(<argument pos:start="313:28" pos:end="313:35"><expr pos:start="313:28" pos:end="313:35"><name pos:start="313:28" pos:end="313:35">host_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="319:5" pos:end="323:5"><if pos:start="319:5" pos:end="323:5">if <condition pos:start="319:8" pos:end="319:20">(<expr pos:start="319:9" pos:end="319:19"><name pos:start="319:9" pos:end="319:19">has_pvpanic</name></expr>)</condition> <block pos:start="319:22" pos:end="323:5">{<block_content pos:start="321:9" pos:end="321:30">

        <expr_stmt pos:start="321:9" pos:end="321:30"><expr pos:start="321:9" pos:end="321:29"><call pos:start="321:9" pos:end="321:29"><name pos:start="321:9" pos:end="321:20">pvpanic_init</name><argument_list pos:start="321:21" pos:end="321:29">(<argument pos:start="321:22" pos:end="321:28"><expr pos:start="321:22" pos:end="321:28"><name pos:start="321:22" pos:end="321:28">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
