<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6265.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">machine_numa_validate</name><parameter_list pos:start="1:34" pos:end="1:56">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:46">MachineState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:55">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:27">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">GString</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">s</name> <init pos:start="7:16" pos:end="7:35">= <expr pos:start="7:18" pos:end="7:35"><call pos:start="7:18" pos:end="7:35"><name pos:start="7:18" pos:end="7:29">g_string_new</name><argument_list pos:start="7:30" pos:end="7:35">(<argument pos:start="7:31" pos:end="7:34"><expr pos:start="7:31" pos:end="7:34"><name pos:start="7:31" pos:end="7:34">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:50"><decl pos:start="9:5" pos:end="9:49"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MachineClass</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:20">mc</name> <init pos:start="9:22" pos:end="9:49">= <expr pos:start="9:24" pos:end="9:49"><call pos:start="9:24" pos:end="9:49"><name pos:start="9:24" pos:end="9:40">MACHINE_GET_CLASS</name><argument_list pos:start="9:41" pos:end="9:49">(<argument pos:start="9:42" pos:end="9:48"><expr pos:start="9:42" pos:end="9:48"><name pos:start="9:42" pos:end="9:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:76"><decl pos:start="11:5" pos:end="11:75"><type pos:start="11:5" pos:end="11:25"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:23">CPUArchIdList</name> <modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:38">possible_cpus</name> <init pos:start="11:40" pos:end="11:75">= <expr pos:start="11:42" pos:end="11:75"><call pos:start="11:42" pos:end="11:75"><name pos:start="11:42" pos:end="11:66"><name pos:start="11:42" pos:end="11:43">mc</name><operator pos:start="11:44" pos:end="11:45">-&gt;</operator><name pos:start="11:46" pos:end="11:66">possible_cpu_arch_ids</name></name><argument_list pos:start="11:67" pos:end="11:75">(<argument pos:start="11:68" pos:end="11:74"><expr pos:start="11:68" pos:end="11:74"><name pos:start="11:68" pos:end="11:74">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:25">(<argument pos:start="15:12" pos:end="15:24"><expr pos:start="15:12" pos:end="15:24"><name pos:start="15:12" pos:end="15:24">nb_numa_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="17:5" pos:end="43:5">for <control pos:start="17:9" pos:end="17:44">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:39"><expr pos:start="17:17" pos:end="17:38"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <name pos:start="17:21" pos:end="17:38"><name pos:start="17:21" pos:end="17:33">possible_cpus</name><operator pos:start="17:34" pos:end="17:35">-&gt;</operator><name pos:start="17:36" pos:end="17:38">len</name></name></expr>;</condition> <incr pos:start="17:41" pos:end="17:43"><expr pos:start="17:41" pos:end="17:43"><name pos:start="17:41" pos:end="17:41">i</name><operator pos:start="17:42" pos:end="17:43">++</operator></expr></incr>)</control> <block pos:start="17:46" pos:end="43:5">{<block_content pos:start="19:9" pos:end="41:9">

        <decl_stmt pos:start="19:9" pos:end="19:60"><decl pos:start="19:9" pos:end="19:59"><type pos:start="19:9" pos:end="19:25"><specifier pos:start="19:9" pos:end="19:13">const</specifier> <name pos:start="19:15" pos:end="19:23">CPUArchId</name> <modifier pos:start="19:25" pos:end="19:25">*</modifier></type><name pos:start="19:26" pos:end="19:33">cpu_slot</name> <init pos:start="19:35" pos:end="19:59">= <expr pos:start="19:37" pos:end="19:59"><operator pos:start="19:37" pos:end="19:37">&amp;</operator><name pos:start="19:38" pos:end="19:59"><name pos:start="19:38" pos:end="19:50">possible_cpus</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:56">cpus</name><index pos:start="19:57" pos:end="19:59">[<expr pos:start="19:58" pos:end="19:58"><name pos:start="19:58" pos:end="19:58">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="23:9" pos:end="27:42">/* at this point numa mappings are initilized by CLI options

         * or with default mappings so it's sufficient to list

         * all not yet mapped CPUs here */</comment>

        <comment type="block" pos:start="29:9" pos:end="29:48">/* TODO: make it hard error in future */</comment>

        <if_stmt pos:start="31:9" pos:end="41:9"><if pos:start="31:9" pos:end="41:9">if <condition pos:start="31:12" pos:end="31:41">(<expr pos:start="31:13" pos:end="31:40"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:40"><name pos:start="31:14" pos:end="31:21">cpu_slot</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:28">props</name><operator pos:start="31:29" pos:end="31:29">.</operator><name pos:start="31:30" pos:end="31:40">has_node_id</name></name></expr>)</condition> <block pos:start="31:43" pos:end="41:9">{<block_content pos:start="33:13" pos:end="39:28">

            <decl_stmt pos:start="33:13" pos:end="33:57"><decl pos:start="33:13" pos:end="33:56"><type pos:start="33:13" pos:end="33:18"><name pos:start="33:13" pos:end="33:16">char</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:25">cpu_str</name> <init pos:start="33:27" pos:end="33:56">= <expr pos:start="33:29" pos:end="33:56"><call pos:start="33:29" pos:end="33:56"><name pos:start="33:29" pos:end="33:46">cpu_slot_to_string</name><argument_list pos:start="33:47" pos:end="33:56">(<argument pos:start="33:48" pos:end="33:55"><expr pos:start="33:48" pos:end="33:55"><name pos:start="33:48" pos:end="33:55">cpu_slot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="35:13" pos:end="37:44"><expr pos:start="35:13" pos:end="37:43"><call pos:start="35:13" pos:end="37:43"><name pos:start="35:13" pos:end="35:34">g_string_append_printf</name><argument_list pos:start="35:35" pos:end="37:43">(<argument pos:start="35:36" pos:end="35:36"><expr pos:start="35:36" pos:end="35:36"><name pos:start="35:36" pos:end="35:36">s</name></expr></argument>, <argument pos:start="35:39" pos:end="35:53"><expr pos:start="35:39" pos:end="35:53"><literal type="string" pos:start="35:39" pos:end="35:53">"%sCPU %d [%s]"</literal></expr></argument>, <argument pos:start="35:56" pos:end="35:73"><expr pos:start="35:56" pos:end="35:73"><ternary pos:start="35:56" pos:end="35:73"><condition pos:start="35:56" pos:end="35:63"><expr pos:start="35:56" pos:end="35:61"><name pos:start="35:56" pos:end="35:61"><name pos:start="35:56" pos:end="35:56">s</name><operator pos:start="35:57" pos:end="35:58">-&gt;</operator><name pos:start="35:59" pos:end="35:61">len</name></name></expr> ?</condition><then pos:start="35:65" pos:end="35:68"> <expr pos:start="35:65" pos:end="35:68"><literal type="string" pos:start="35:65" pos:end="35:68">", "</literal></expr> </then><else pos:start="35:70" pos:end="35:73">: <expr pos:start="35:72" pos:end="35:73"><literal type="string" pos:start="35:72" pos:end="35:73">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="35:76" pos:end="35:76"><expr pos:start="35:76" pos:end="35:76"><name pos:start="35:76" pos:end="35:76">i</name></expr></argument>,

                                   <argument pos:start="37:36" pos:end="37:42"><expr pos:start="37:36" pos:end="37:42"><name pos:start="37:36" pos:end="37:42">cpu_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:28"><expr pos:start="39:13" pos:end="39:27"><call pos:start="39:13" pos:end="39:27"><name pos:start="39:13" pos:end="39:18">g_free</name><argument_list pos:start="39:19" pos:end="39:27">(<argument pos:start="39:20" pos:end="39:26"><expr pos:start="39:20" pos:end="39:26"><name pos:start="39:20" pos:end="39:26">cpu_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="45:5" pos:end="57:5"><if pos:start="45:5" pos:end="57:5">if <condition pos:start="45:8" pos:end="45:15">(<expr pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:14">len</name></name></expr>)</condition> <block pos:start="45:17" pos:end="57:5">{<block_content pos:start="47:9" pos:end="55:76">

        <expr_stmt pos:start="47:9" pos:end="49:29"><expr pos:start="47:9" pos:end="49:28"><call pos:start="47:9" pos:end="49:28"><name pos:start="47:9" pos:end="47:20">error_report</name><argument_list pos:start="47:21" pos:end="49:28">(<argument pos:start="47:22" pos:end="47:72"><expr pos:start="47:22" pos:end="47:72"><literal type="string" pos:start="47:22" pos:end="47:72">"warning: CPU(s) not present in any NUMA nodes: %s"</literal></expr></argument>,

                     <argument pos:start="49:22" pos:end="49:27"><expr pos:start="49:22" pos:end="49:27"><name pos:start="49:22" pos:end="49:27"><name pos:start="49:22" pos:end="49:22">s</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:27">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="55:76"><expr pos:start="51:9" pos:end="55:75"><call pos:start="51:9" pos:end="55:75"><name pos:start="51:9" pos:end="51:20">error_report</name><argument_list pos:start="51:21" pos:end="55:75">(<argument pos:start="51:22" pos:end="55:74"><expr pos:start="51:22" pos:end="55:74"><literal type="string" pos:start="51:22" pos:end="51:77">"warning: All CPU(s) up to maxcpus should be described "</literal>

                     <literal type="string" pos:start="53:22" pos:end="53:77">"in NUMA config, ability to start up with partial NUMA "</literal>

                     <literal type="string" pos:start="55:22" pos:end="55:74">"mappings is obsoleted and will be removed in future"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:27"><expr pos:start="59:5" pos:end="59:26"><call pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:17">g_string_free</name><argument_list pos:start="59:18" pos:end="59:26">(<argument pos:start="59:19" pos:end="59:19"><expr pos:start="59:19" pos:end="59:19"><name pos:start="59:19" pos:end="59:19">s</name></expr></argument>, <argument pos:start="59:22" pos:end="59:25"><expr pos:start="59:22" pos:end="59:25"><name pos:start="59:22" pos:end="59:25">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
