<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2976.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">PCIReqIDCache</name></type> <name pos:start="1:22" pos:end="1:41">pci_req_id_cache_get</name><parameter_list pos:start="1:42" pos:end="1:57">(<parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:53"><name pos:start="1:43" pos:end="1:51">PCIDevice</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:17">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:21">parent</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="13:6"><decl pos:start="7:5" pos:end="13:5"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">PCIReqIDCache</name></type> <name pos:start="7:19" pos:end="7:23">cache</name> <init pos:start="7:25" pos:end="13:5">= <expr pos:start="7:27" pos:end="13:5"><block pos:start="7:27" pos:end="13:5">{

        <expr pos:start="9:9" pos:end="9:18"><operator pos:start="9:9" pos:end="9:9">.</operator><name pos:start="9:10" pos:end="9:12">dev</name> <operator pos:start="9:14" pos:end="9:14">=</operator> <name pos:start="9:16" pos:end="9:18">dev</name></expr>,

        <expr pos:start="11:9" pos:end="11:30"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:13">type</name> <operator pos:start="11:15" pos:end="11:15">=</operator> <name pos:start="11:17" pos:end="11:30">PCI_REQ_ID_BDF</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <while pos:start="17:5" pos:end="65:5">while <condition pos:start="17:11" pos:end="17:38">(<expr pos:start="17:12" pos:end="17:37"><operator pos:start="17:12" pos:end="17:12">!</operator><call pos:start="17:13" pos:end="17:37"><name pos:start="17:13" pos:end="17:27">pci_bus_is_root</name><argument_list pos:start="17:28" pos:end="17:37">(<argument pos:start="17:29" pos:end="17:36"><expr pos:start="17:29" pos:end="17:36"><name pos:start="17:29" pos:end="17:36"><name pos:start="17:29" pos:end="17:31">dev</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:36">bus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:40" pos:end="65:5">{<block_content pos:start="21:9" pos:end="63:21">

        <comment type="block" pos:start="19:9" pos:end="19:43">/* We are under PCI/PCIe bridges */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:14">parent</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:37"><name pos:start="21:18" pos:end="21:20">dev</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:25">bus</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:37">parent_dev</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="61:9"><if pos:start="23:9" pos:end="41:9">if <condition pos:start="23:12" pos:end="23:35">(<expr pos:start="23:13" pos:end="23:34"><call pos:start="23:13" pos:end="23:34"><name pos:start="23:13" pos:end="23:26">pci_is_express</name><argument_list pos:start="23:27" pos:end="23:34">(<argument pos:start="23:28" pos:end="23:33"><expr pos:start="23:28" pos:end="23:33"><name pos:start="23:28" pos:end="23:33">parent</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:37" pos:end="41:9">{<block_content pos:start="25:13" pos:end="39:13">

            <if_stmt pos:start="25:13" pos:end="39:13"><if pos:start="25:13" pos:end="39:13">if <condition pos:start="25:16" pos:end="25:69">(<expr pos:start="25:17" pos:end="25:68"><call pos:start="25:17" pos:end="25:41"><name pos:start="25:17" pos:end="25:33">pcie_cap_get_type</name><argument_list pos:start="25:34" pos:end="25:41">(<argument pos:start="25:35" pos:end="25:40"><expr pos:start="25:35" pos:end="25:40"><name pos:start="25:35" pos:end="25:40">parent</name></expr></argument>)</argument_list></call> <operator pos:start="25:43" pos:end="25:44">==</operator> <name pos:start="25:46" pos:end="25:68">PCI_EXP_TYPE_PCI_BRIDGE</name></expr>)</condition> <block pos:start="25:71" pos:end="39:13">{<block_content pos:start="35:17" pos:end="37:32">

                <comment type="block" pos:start="27:17" pos:end="33:57">/* When we pass through PCIe-to-PCI/PCIX bridges, we

                 * override the requester ID using secondary bus

                 * number of parent bridge with zeroed devfn

                 * (pcie-to-pci bridge spec chap 2.3). */</comment>

                <expr_stmt pos:start="35:17" pos:end="35:54"><expr pos:start="35:17" pos:end="35:53"><name pos:start="35:17" pos:end="35:26"><name pos:start="35:17" pos:end="35:21">cache</name><operator pos:start="35:22" pos:end="35:22">.</operator><name pos:start="35:23" pos:end="35:26">type</name></name> <operator pos:start="35:28" pos:end="35:28">=</operator> <name pos:start="35:30" pos:end="35:53">PCI_REQ_ID_SECONDARY_BUS</name></expr>;</expr_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:32"><expr pos:start="37:17" pos:end="37:31"><name pos:start="37:17" pos:end="37:25"><name pos:start="37:17" pos:end="37:21">cache</name><operator pos:start="37:22" pos:end="37:22">.</operator><name pos:start="37:23" pos:end="37:25">dev</name></name> <operator pos:start="37:27" pos:end="37:27">=</operator> <name pos:start="37:29" pos:end="37:31">dev</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="41:11" pos:end="61:9">else <block pos:start="41:16" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:31">

            <comment type="block" pos:start="43:13" pos:end="55:65">/* Legacy PCI, override requester ID with the bridge's

             * BDF upstream.  When the root complex connects to

             * legacy PCI devices (including buses), it can only

             * obtain requester ID info from directly attached

             * devices.  If devices are attached under bridges, only

             * the requester ID of the bridge that is directly

             * attached to the root complex can be recognized. */</comment>

            <expr_stmt pos:start="57:13" pos:end="57:40"><expr pos:start="57:13" pos:end="57:39"><name pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:17">cache</name><operator pos:start="57:18" pos:end="57:18">.</operator><name pos:start="57:19" pos:end="57:22">type</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <name pos:start="57:26" pos:end="57:39">PCI_REQ_ID_BDF</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:31"><expr pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:21"><name pos:start="59:13" pos:end="59:17">cache</name><operator pos:start="59:18" pos:end="59:18">.</operator><name pos:start="59:19" pos:end="59:21">dev</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:30">parent</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:21"><expr pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:11">dev</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <name pos:start="63:15" pos:end="63:20">parent</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="69:5" pos:end="69:17">return <expr pos:start="69:12" pos:end="69:16"><name pos:start="69:12" pos:end="69:16">cache</name></expr>;</return>

</block_content>}</block></function>
</unit>
