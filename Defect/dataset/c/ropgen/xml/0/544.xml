<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/544.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">hdcd_envelope</name><parameter_list pos:start="1:25" pos:end="1:104">(<parameter pos:start="1:26" pos:end="1:41"><decl pos:start="1:26" pos:end="1:41"><type pos:start="1:26" pos:end="1:41"><name pos:start="1:26" pos:end="1:32">int32_t</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:41">samples</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:52"><decl pos:start="1:44" pos:end="1:52"><type pos:start="1:44" pos:end="1:52"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:52">count</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:64"><decl pos:start="1:55" pos:end="1:64"><type pos:start="1:55" pos:end="1:64"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:64">stride</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:74"><decl pos:start="1:67" pos:end="1:74"><type pos:start="1:67" pos:end="1:74"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:74">gain</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:91"><decl pos:start="1:77" pos:end="1:91"><type pos:start="1:77" pos:end="1:91"><name pos:start="1:77" pos:end="1:79">int</name></type> <name pos:start="1:81" pos:end="1:91">target_gain</name></decl></parameter>, <parameter pos:start="1:94" pos:end="1:103"><decl pos:start="1:94" pos:end="1:103"><type pos:start="1:94" pos:end="1:103"><name pos:start="1:94" pos:end="1:96">int</name></type> <name pos:start="1:98" pos:end="1:103">extend</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:16">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:51"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">int32_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:24">samples_end</name> <init pos:start="7:26" pos:end="7:51">= <expr pos:start="7:28" pos:end="7:51"><name pos:start="7:28" pos:end="7:34">samples</name> <operator pos:start="7:36" pos:end="7:36">+</operator> <name pos:start="7:38" pos:end="7:43">stride</name> <operator pos:start="7:45" pos:end="7:45">*</operator> <name pos:start="7:47" pos:end="7:51">count</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="39:5"><if pos:start="11:5" pos:end="33:5">if <condition pos:start="11:8" pos:end="11:15">(<expr pos:start="11:9" pos:end="11:14"><name pos:start="11:9" pos:end="11:14">extend</name></expr>)</condition> <block pos:start="11:17" pos:end="33:5">{<block_content pos:start="13:9" pos:end="31:9">

        <for pos:start="13:9" pos:end="31:9">for <control pos:start="13:13" pos:end="13:35">(<init pos:start="13:14" pos:end="13:19"><expr pos:start="13:14" pos:end="13:18"><name pos:start="13:14" pos:end="13:14">i</name> <operator pos:start="13:16" pos:end="13:16">=</operator> <literal type="number" pos:start="13:18" pos:end="13:18">0</literal></expr>;</init> <condition pos:start="13:21" pos:end="13:30"><expr pos:start="13:21" pos:end="13:29"><name pos:start="13:21" pos:end="13:21">i</name> <operator pos:start="13:23" pos:end="13:23">&lt;</operator> <name pos:start="13:25" pos:end="13:29">count</name></expr>;</condition> <incr pos:start="13:32" pos:end="13:34"><expr pos:start="13:32" pos:end="13:34"><name pos:start="13:32" pos:end="13:32">i</name><operator pos:start="13:33" pos:end="13:34">++</operator></expr></incr>)</control> <block pos:start="13:37" pos:end="31:9">{<block_content pos:start="15:13" pos:end="29:41">

            <decl_stmt pos:start="15:13" pos:end="15:49"><decl pos:start="15:13" pos:end="15:48"><type pos:start="15:13" pos:end="15:19"><name pos:start="15:13" pos:end="15:19">int32_t</name></type> <name pos:start="15:21" pos:end="15:26">sample</name> <init pos:start="15:28" pos:end="15:48">= <expr pos:start="15:30" pos:end="15:48"><name pos:start="15:30" pos:end="15:48"><name pos:start="15:30" pos:end="15:36">samples</name><index pos:start="15:37" pos:end="15:48">[<expr pos:start="15:38" pos:end="15:47"><name pos:start="15:38" pos:end="15:38">i</name> <operator pos:start="15:40" pos:end="15:40">*</operator> <name pos:start="15:42" pos:end="15:47">stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="17:13" pos:end="17:51"><decl pos:start="17:13" pos:end="17:50"><type pos:start="17:13" pos:end="17:19"><name pos:start="17:13" pos:end="17:19">int32_t</name></type> <name pos:start="17:21" pos:end="17:27">asample</name> <init pos:start="17:29" pos:end="17:50">= <expr pos:start="17:31" pos:end="17:50"><call pos:start="17:31" pos:end="17:41"><name pos:start="17:31" pos:end="17:33">abs</name><argument_list pos:start="17:34" pos:end="17:41">(<argument pos:start="17:35" pos:end="17:40"><expr pos:start="17:35" pos:end="17:40"><name pos:start="17:35" pos:end="17:40">sample</name></expr></argument>)</argument_list></call> <operator pos:start="17:43" pos:end="17:43">-</operator> <literal type="number" pos:start="17:45" pos:end="17:50">0x5981</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="19:13" pos:end="25:30"><if pos:start="19:13" pos:end="21:76">if <condition pos:start="19:16" pos:end="19:29">(<expr pos:start="19:17" pos:end="19:28"><name pos:start="19:17" pos:end="19:23">asample</name> <operator pos:start="19:25" pos:end="19:26">&gt;=</operator> <literal type="number" pos:start="19:28" pos:end="19:28">0</literal></expr>)</condition><block type="pseudo" pos:start="21:17" pos:end="21:76"><block_content pos:start="21:17" pos:end="21:76">

                <expr_stmt pos:start="21:17" pos:end="21:76"><expr pos:start="21:17" pos:end="21:75"><name pos:start="21:17" pos:end="21:22">sample</name> <operator pos:start="21:24" pos:end="21:24">=</operator> <ternary pos:start="21:26" pos:end="21:75"><condition pos:start="21:26" pos:end="21:38"><expr pos:start="21:26" pos:end="21:36"><name pos:start="21:26" pos:end="21:31">sample</name> <operator pos:start="21:33" pos:end="21:34">&gt;=</operator> <literal type="number" pos:start="21:36" pos:end="21:36">0</literal></expr> ?</condition><then pos:start="21:40" pos:end="21:55"> <expr pos:start="21:40" pos:end="21:55"><name pos:start="21:40" pos:end="21:55"><name pos:start="21:40" pos:end="21:46">peaktab</name><index pos:start="21:47" pos:end="21:55">[<expr pos:start="21:48" pos:end="21:54"><name pos:start="21:48" pos:end="21:54">asample</name></expr>]</index></name></expr> </then><else pos:start="21:57" pos:end="21:75">: <expr pos:start="21:59" pos:end="21:75"><operator pos:start="21:59" pos:end="21:59">-</operator><name pos:start="21:60" pos:end="21:75"><name pos:start="21:60" pos:end="21:66">peaktab</name><index pos:start="21:67" pos:end="21:75">[<expr pos:start="21:68" pos:end="21:74"><name pos:start="21:68" pos:end="21:74">asample</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="23:13" pos:end="25:30">else<block type="pseudo" pos:start="25:17" pos:end="25:30"><block_content pos:start="25:17" pos:end="25:30">

                <expr_stmt pos:start="25:17" pos:end="25:30"><expr pos:start="25:17" pos:end="25:29"><name pos:start="25:17" pos:end="25:22">sample</name> <operator pos:start="25:24" pos:end="25:26">&lt;&lt;=</operator> <literal type="number" pos:start="25:28" pos:end="25:29">15</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="29:13" pos:end="29:41"><expr pos:start="29:13" pos:end="29:40"><name pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:19">samples</name><index pos:start="29:20" pos:end="29:31">[<expr pos:start="29:21" pos:end="29:30"><name pos:start="29:21" pos:end="29:21">i</name> <operator pos:start="29:23" pos:end="29:23">*</operator> <name pos:start="29:25" pos:end="29:30">stride</name></expr>]</index></name> <operator pos:start="29:33" pos:end="29:33">=</operator> <name pos:start="29:35" pos:end="29:40">sample</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="39:5">else <block pos:start="33:12" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:39">

        <for pos:start="35:9" pos:end="37:39">for <control pos:start="35:13" pos:end="35:35">(<init pos:start="35:14" pos:end="35:19"><expr pos:start="35:14" pos:end="35:18"><name pos:start="35:14" pos:end="35:14">i</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <literal type="number" pos:start="35:18" pos:end="35:18">0</literal></expr>;</init> <condition pos:start="35:21" pos:end="35:30"><expr pos:start="35:21" pos:end="35:29"><name pos:start="35:21" pos:end="35:21">i</name> <operator pos:start="35:23" pos:end="35:23">&lt;</operator> <name pos:start="35:25" pos:end="35:29">count</name></expr>;</condition> <incr pos:start="35:32" pos:end="35:34"><expr pos:start="35:32" pos:end="35:34"><name pos:start="35:32" pos:end="35:32">i</name><operator pos:start="35:33" pos:end="35:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="37:13" pos:end="37:39"><block_content pos:start="37:13" pos:end="37:39">

            <expr_stmt pos:start="37:13" pos:end="37:39"><expr pos:start="37:13" pos:end="37:38"><name pos:start="37:13" pos:end="37:31"><name pos:start="37:13" pos:end="37:19">samples</name><index pos:start="37:20" pos:end="37:31">[<expr pos:start="37:21" pos:end="37:30"><name pos:start="37:21" pos:end="37:21">i</name> <operator pos:start="37:23" pos:end="37:23">*</operator> <name pos:start="37:25" pos:end="37:30">stride</name></expr>]</index></name> <operator pos:start="37:33" pos:end="37:35">&lt;&lt;=</operator> <literal type="number" pos:start="37:37" pos:end="37:38">15</literal></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="43:5" pos:end="83:5"><if pos:start="43:5" pos:end="61:5">if <condition pos:start="43:8" pos:end="43:28">(<expr pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:12">gain</name> <operator pos:start="43:14" pos:end="43:15">&lt;=</operator> <name pos:start="43:17" pos:end="43:27">target_gain</name></expr>)</condition> <block pos:start="43:30" pos:end="61:5">{<block_content pos:start="45:9" pos:end="59:21">

        <decl_stmt pos:start="45:9" pos:end="45:51"><decl pos:start="45:9" pos:end="45:50"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:15">len</name> <init pos:start="45:17" pos:end="45:50">= <expr pos:start="45:19" pos:end="45:50"><call pos:start="45:19" pos:end="45:50"><name pos:start="45:19" pos:end="45:23">FFMIN</name><argument_list pos:start="45:24" pos:end="45:50">(<argument pos:start="45:25" pos:end="45:29"><expr pos:start="45:25" pos:end="45:29"><name pos:start="45:25" pos:end="45:29">count</name></expr></argument>, <argument pos:start="45:32" pos:end="45:49"><expr pos:start="45:32" pos:end="45:49"><name pos:start="45:32" pos:end="45:42">target_gain</name> <operator pos:start="45:44" pos:end="45:44">-</operator> <name pos:start="45:46" pos:end="45:49">gain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="47:9" pos:end="47:30">/* attenuate slowly */</comment>

        <for pos:start="49:9" pos:end="57:9">for <control pos:start="49:13" pos:end="49:33">(<init pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">i</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr>;</init> <condition pos:start="49:21" pos:end="49:28"><expr pos:start="49:21" pos:end="49:27"><name pos:start="49:21" pos:end="49:21">i</name> <operator pos:start="49:23" pos:end="49:23">&lt;</operator> <name pos:start="49:25" pos:end="49:27">len</name></expr>;</condition> <incr pos:start="49:30" pos:end="49:32"><expr pos:start="49:30" pos:end="49:32"><name pos:start="49:30" pos:end="49:30">i</name><operator pos:start="49:31" pos:end="49:32">++</operator></expr></incr>)</control> <block pos:start="49:35" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:30">

            <expr_stmt pos:start="51:13" pos:end="51:19"><expr pos:start="51:13" pos:end="51:18"><operator pos:start="51:13" pos:end="51:14">++</operator><name pos:start="51:15" pos:end="51:18">gain</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:39"><expr pos:start="53:13" pos:end="53:38"><call pos:start="53:13" pos:end="53:38"><name pos:start="53:13" pos:end="53:22">APPLY_GAIN</name><argument_list pos:start="53:23" pos:end="53:38">(<argument pos:start="53:24" pos:end="53:31"><expr pos:start="53:24" pos:end="53:31"><operator pos:start="53:24" pos:end="53:24">*</operator><name pos:start="53:25" pos:end="53:31">samples</name></expr></argument>, <argument pos:start="53:34" pos:end="53:37"><expr pos:start="53:34" pos:end="53:37"><name pos:start="53:34" pos:end="53:37">gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:30"><expr pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:19">samples</name> <operator pos:start="55:21" pos:end="55:22">+=</operator> <name pos:start="55:24" pos:end="55:29">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="59:9" pos:end="59:21"><expr pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:13">count</name> <operator pos:start="59:15" pos:end="59:16">-=</operator> <name pos:start="59:18" pos:end="59:20">len</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="83:5">else <block pos:start="61:12" pos:end="83:5">{<block_content pos:start="63:9" pos:end="81:21">

        <decl_stmt pos:start="63:9" pos:end="63:58"><decl pos:start="63:9" pos:end="63:57"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:15">len</name> <init pos:start="63:17" pos:end="63:57">= <expr pos:start="63:19" pos:end="63:57"><call pos:start="63:19" pos:end="63:57"><name pos:start="63:19" pos:end="63:23">FFMIN</name><argument_list pos:start="63:24" pos:end="63:57">(<argument pos:start="63:25" pos:end="63:29"><expr pos:start="63:25" pos:end="63:29"><name pos:start="63:25" pos:end="63:29">count</name></expr></argument>, <argument pos:start="63:32" pos:end="63:56"><expr pos:start="63:32" pos:end="63:56"><operator pos:start="63:32" pos:end="63:32">(</operator><name pos:start="63:33" pos:end="63:36">gain</name> <operator pos:start="63:38" pos:end="63:38">-</operator> <name pos:start="63:40" pos:end="63:50">target_gain</name><operator pos:start="63:51" pos:end="63:51">)</operator> <operator pos:start="63:53" pos:end="63:54">&gt;&gt;</operator> <literal type="number" pos:start="63:56" pos:end="63:56">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="65:9" pos:end="65:29">/* amplify quickly */</comment>

        <for pos:start="67:9" pos:end="75:9">for <control pos:start="67:13" pos:end="67:33">(<init pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:18"><name pos:start="67:14" pos:end="67:14">i</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</init> <condition pos:start="67:21" pos:end="67:28"><expr pos:start="67:21" pos:end="67:27"><name pos:start="67:21" pos:end="67:21">i</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <name pos:start="67:25" pos:end="67:27">len</name></expr>;</condition> <incr pos:start="67:30" pos:end="67:32"><expr pos:start="67:30" pos:end="67:32"><name pos:start="67:30" pos:end="67:30">i</name><operator pos:start="67:31" pos:end="67:32">++</operator></expr></incr>)</control> <block pos:start="67:35" pos:end="75:9">{<block_content pos:start="69:13" pos:end="73:30">

            <expr_stmt pos:start="69:13" pos:end="69:22"><expr pos:start="69:13" pos:end="69:21"><name pos:start="69:13" pos:end="69:16">gain</name> <operator pos:start="69:18" pos:end="69:19">-=</operator> <literal type="number" pos:start="69:21" pos:end="69:21">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:39"><expr pos:start="71:13" pos:end="71:38"><call pos:start="71:13" pos:end="71:38"><name pos:start="71:13" pos:end="71:22">APPLY_GAIN</name><argument_list pos:start="71:23" pos:end="71:38">(<argument pos:start="71:24" pos:end="71:31"><expr pos:start="71:24" pos:end="71:31"><operator pos:start="71:24" pos:end="71:24">*</operator><name pos:start="71:25" pos:end="71:31">samples</name></expr></argument>, <argument pos:start="71:34" pos:end="71:37"><expr pos:start="71:34" pos:end="71:37"><name pos:start="71:34" pos:end="71:37">gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:30"><expr pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:19">samples</name> <operator pos:start="73:21" pos:end="73:22">+=</operator> <name pos:start="73:24" pos:end="73:29">stride</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="77:9" pos:end="79:31"><if pos:start="77:9" pos:end="79:31">if <condition pos:start="77:12" pos:end="77:35">(<expr pos:start="77:13" pos:end="77:34"><name pos:start="77:13" pos:end="77:16">gain</name> <operator pos:start="77:18" pos:end="77:18">-</operator> <literal type="number" pos:start="77:20" pos:end="77:20">8</literal> <operator pos:start="77:22" pos:end="77:22">&lt;</operator> <name pos:start="77:24" pos:end="77:34">target_gain</name></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:31"><block_content pos:start="79:13" pos:end="79:31">

            <expr_stmt pos:start="79:13" pos:end="79:31"><expr pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:16">gain</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:30">target_gain</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:21"><expr pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:13">count</name> <operator pos:start="81:15" pos:end="81:16">-=</operator> <name pos:start="81:18" pos:end="81:20">len</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:29">/* hold a steady level */</comment>

    <if_stmt pos:start="89:5" pos:end="105:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:18">(<expr pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:12">gain</name> <operator pos:start="89:14" pos:end="89:15">==</operator> <literal type="number" pos:start="89:17" pos:end="89:17">0</literal></expr>)</condition> <block pos:start="89:20" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:38">

        <if_stmt pos:start="91:9" pos:end="93:38"><if pos:start="91:9" pos:end="93:38">if <condition pos:start="91:12" pos:end="91:22">(<expr pos:start="91:13" pos:end="91:21"><name pos:start="91:13" pos:end="91:17">count</name> <operator pos:start="91:19" pos:end="91:19">&gt;</operator> <literal type="number" pos:start="91:21" pos:end="91:21">0</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:38"><block_content pos:start="93:13" pos:end="93:38">

            <expr_stmt pos:start="93:13" pos:end="93:38"><expr pos:start="93:13" pos:end="93:37"><name pos:start="93:13" pos:end="93:19">samples</name> <operator pos:start="93:21" pos:end="93:22">+=</operator> <name pos:start="93:24" pos:end="93:28">count</name> <operator pos:start="93:30" pos:end="93:30">*</operator> <name pos:start="93:32" pos:end="93:37">stride</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="105:5">else <block pos:start="95:12" pos:end="105:5">{<block_content pos:start="97:9" pos:end="103:9">

        <while pos:start="97:9" pos:end="103:9">while <condition pos:start="97:15" pos:end="97:28">(<expr pos:start="97:16" pos:end="97:27"><operator pos:start="97:16" pos:end="97:17">--</operator><name pos:start="97:18" pos:end="97:22">count</name> <operator pos:start="97:24" pos:end="97:25">&gt;=</operator> <literal type="number" pos:start="97:27" pos:end="97:27">0</literal></expr>)</condition> <block pos:start="97:30" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:30">

            <expr_stmt pos:start="99:13" pos:end="99:39"><expr pos:start="99:13" pos:end="99:38"><call pos:start="99:13" pos:end="99:38"><name pos:start="99:13" pos:end="99:22">APPLY_GAIN</name><argument_list pos:start="99:23" pos:end="99:38">(<argument pos:start="99:24" pos:end="99:31"><expr pos:start="99:24" pos:end="99:31"><operator pos:start="99:24" pos:end="99:24">*</operator><name pos:start="99:25" pos:end="99:31">samples</name></expr></argument>, <argument pos:start="99:34" pos:end="99:37"><expr pos:start="99:34" pos:end="99:37"><name pos:start="99:34" pos:end="99:37">gain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:30"><expr pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:19">samples</name> <operator pos:start="101:21" pos:end="101:22">+=</operator> <name pos:start="101:24" pos:end="101:29">stride</name></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:39"><expr pos:start="109:5" pos:end="109:38"><call pos:start="109:5" pos:end="109:38"><name pos:start="109:5" pos:end="109:14">av_assert0</name><argument_list pos:start="109:15" pos:end="109:38">(<argument pos:start="109:16" pos:end="109:37"><expr pos:start="109:16" pos:end="109:37"><name pos:start="109:16" pos:end="109:22">samples</name> <operator pos:start="109:24" pos:end="109:25">==</operator> <name pos:start="109:27" pos:end="109:37">samples_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="113:5" pos:end="113:16">return <expr pos:start="113:12" pos:end="113:15"><name pos:start="113:12" pos:end="113:15">gain</name></expr>;</return>

</block_content>}</block></function>
</unit>
