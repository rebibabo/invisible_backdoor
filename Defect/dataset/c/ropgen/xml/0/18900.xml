<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18900.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_drive_mirror</name><parameter_list pos:start="1:22" pos:end="19:35">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">device</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:60"><decl pos:start="1:43" pos:end="1:60"><type pos:start="1:43" pos:end="1:60"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:52">char</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">target</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:37"><decl pos:start="3:23" pos:end="3:37"><type pos:start="3:23" pos:end="3:37"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:37">has_format</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:57"><decl pos:start="3:40" pos:end="3:57"><type pos:start="3:40" pos:end="3:57"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:49">char</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:57">format</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:46"><decl pos:start="5:23" pos:end="5:46"><type pos:start="5:23" pos:end="5:46"><name pos:start="5:23" pos:end="5:41"><name pos:start="5:23" pos:end="5:26">enum</name> <name pos:start="5:28" pos:end="5:41">MirrorSyncMode</name></name></type> <name pos:start="5:43" pos:end="5:46">sync</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:35"><decl pos:start="7:23" pos:end="7:35"><type pos:start="7:23" pos:end="7:35"><name pos:start="7:23" pos:end="7:26">bool</name></type> <name pos:start="7:28" pos:end="7:35">has_mode</name></decl></parameter>, <parameter pos:start="7:38" pos:end="7:59"><decl pos:start="7:38" pos:end="7:59"><type pos:start="7:38" pos:end="7:59"><name pos:start="7:38" pos:end="7:54"><name pos:start="7:38" pos:end="7:41">enum</name> <name pos:start="7:43" pos:end="7:54">NewImageMode</name></name></type> <name pos:start="7:56" pos:end="7:59">mode</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:36"><decl pos:start="9:23" pos:end="9:36"><type pos:start="9:23" pos:end="9:36"><name pos:start="9:23" pos:end="9:26">bool</name></type> <name pos:start="9:28" pos:end="9:36">has_speed</name></decl></parameter>, <parameter pos:start="9:39" pos:end="9:51"><decl pos:start="9:39" pos:end="9:51"><type pos:start="9:39" pos:end="9:51"><name pos:start="9:39" pos:end="9:45">int64_t</name></type> <name pos:start="9:47" pos:end="9:51">speed</name></decl></parameter>,

                      <parameter pos:start="11:23" pos:end="11:42"><decl pos:start="11:23" pos:end="11:42"><type pos:start="11:23" pos:end="11:42"><name pos:start="11:23" pos:end="11:26">bool</name></type> <name pos:start="11:28" pos:end="11:42">has_granularity</name></decl></parameter>, <parameter pos:start="11:45" pos:end="11:64"><decl pos:start="11:45" pos:end="11:64"><type pos:start="11:45" pos:end="11:64"><name pos:start="11:45" pos:end="11:52">uint32_t</name></type> <name pos:start="11:54" pos:end="11:64">granularity</name></decl></parameter>,

                      <parameter pos:start="13:23" pos:end="13:39"><decl pos:start="13:23" pos:end="13:39"><type pos:start="13:23" pos:end="13:39"><name pos:start="13:23" pos:end="13:26">bool</name></type> <name pos:start="13:28" pos:end="13:39">has_buf_size</name></decl></parameter>, <parameter pos:start="13:42" pos:end="13:57"><decl pos:start="13:42" pos:end="13:57"><type pos:start="13:42" pos:end="13:57"><name pos:start="13:42" pos:end="13:48">int64_t</name></type> <name pos:start="13:50" pos:end="13:57">buf_size</name></decl></parameter>,

                      <parameter pos:start="15:23" pos:end="15:46"><decl pos:start="15:23" pos:end="15:46"><type pos:start="15:23" pos:end="15:46"><name pos:start="15:23" pos:end="15:26">bool</name></type> <name pos:start="15:28" pos:end="15:46">has_on_source_error</name></decl></parameter>, <parameter pos:start="15:49" pos:end="15:79"><decl pos:start="15:49" pos:end="15:79"><type pos:start="15:49" pos:end="15:79"><name pos:start="15:49" pos:end="15:63">BlockdevOnError</name></type> <name pos:start="15:65" pos:end="15:79">on_source_error</name></decl></parameter>,

                      <parameter pos:start="17:23" pos:end="17:46"><decl pos:start="17:23" pos:end="17:46"><type pos:start="17:23" pos:end="17:46"><name pos:start="17:23" pos:end="17:26">bool</name></type> <name pos:start="17:28" pos:end="17:46">has_on_target_error</name></decl></parameter>, <parameter pos:start="17:49" pos:end="17:79"><decl pos:start="17:49" pos:end="17:79"><type pos:start="17:49" pos:end="17:79"><name pos:start="17:49" pos:end="17:63">BlockdevOnError</name></type> <name pos:start="17:65" pos:end="17:79">on_target_error</name></decl></parameter>,

                      <parameter pos:start="19:23" pos:end="19:34"><decl pos:start="19:23" pos:end="19:34"><type pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:27">Error</name> <modifier pos:start="19:29" pos:end="19:29">*</modifier><modifier pos:start="19:30" pos:end="19:30">*</modifier></type><name pos:start="19:31" pos:end="19:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="21:1" pos:end="283:1">{<block_content pos:start="23:5" pos:end="281:45">

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:20">BlockDriverState</name> <modifier pos:start="23:22" pos:end="23:22">*</modifier></type><name pos:start="23:23" pos:end="23:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:41"><decl pos:start="25:5" pos:end="25:28"><type pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:20">BlockDriverState</name> <modifier pos:start="25:22" pos:end="25:22">*</modifier></type><name pos:start="25:23" pos:end="25:28">source</name></decl>, <decl pos:start="25:31" pos:end="25:40"><type ref="prev" pos:start="25:5" pos:end="25:22"><modifier pos:start="25:31" pos:end="25:31">*</modifier></type><name pos:start="25:32" pos:end="25:40">target_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">BlockDriver</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:26">proto_drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:15">BlockDriver</name> <modifier pos:start="29:17" pos:end="29:17">*</modifier></type><name pos:start="29:18" pos:end="29:20">drv</name> <init pos:start="29:22" pos:end="29:27">= <expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:28"><decl pos:start="31:5" pos:end="31:27"><type pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:9">Error</name> <modifier pos:start="31:11" pos:end="31:11">*</modifier></type><name pos:start="31:12" pos:end="31:20">local_err</name> <init pos:start="31:22" pos:end="31:27">= <expr pos:start="31:24" pos:end="31:27"><name pos:start="31:24" pos:end="31:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:14"><decl pos:start="33:5" pos:end="33:13"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:13">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:18"><decl pos:start="35:5" pos:end="35:17"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">uint64_t</name></type> <name pos:start="35:14" pos:end="35:17">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:12"><decl pos:start="37:5" pos:end="37:11"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:19">(<expr pos:start="41:9" pos:end="41:18"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:18">has_speed</name></expr>)</condition> <block pos:start="41:21" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:18">

        <expr_stmt pos:start="43:9" pos:end="43:18"><expr pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:13">speed</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <literal type="number" pos:start="43:17" pos:end="43:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:29">(<expr pos:start="47:9" pos:end="47:28"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:28">has_on_source_error</name></expr>)</condition> <block pos:start="47:31" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:51">

        <expr_stmt pos:start="49:9" pos:end="49:51"><expr pos:start="49:9" pos:end="49:50"><name pos:start="49:9" pos:end="49:23">on_source_error</name> <operator pos:start="49:25" pos:end="49:25">=</operator> <name pos:start="49:27" pos:end="49:50">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:29">(<expr pos:start="53:9" pos:end="53:28"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:28">has_on_target_error</name></expr>)</condition> <block pos:start="53:31" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:51">

        <expr_stmt pos:start="55:9" pos:end="55:51"><expr pos:start="55:9" pos:end="55:50"><name pos:start="55:9" pos:end="55:23">on_target_error</name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:50">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:18">(<expr pos:start="59:9" pos:end="59:17"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:17">has_mode</name></expr>)</condition> <block pos:start="59:20" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:45">

        <expr_stmt pos:start="61:9" pos:end="61:45"><expr pos:start="61:9" pos:end="61:44"><name pos:start="61:9" pos:end="61:12">mode</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <name pos:start="61:16" pos:end="61:44">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:25">(<expr pos:start="65:9" pos:end="65:24"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:24">has_granularity</name></expr>)</condition> <block pos:start="65:27" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:24">

        <expr_stmt pos:start="67:9" pos:end="67:24"><expr pos:start="67:9" pos:end="67:23"><name pos:start="67:9" pos:end="67:19">granularity</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <literal type="number" pos:start="67:23" pos:end="67:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:22">(<expr pos:start="71:9" pos:end="71:21"><operator pos:start="71:9" pos:end="71:9">!</operator><name pos:start="71:10" pos:end="71:21">has_buf_size</name></expr>)</condition> <block pos:start="71:24" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:43">

        <expr_stmt pos:start="73:9" pos:end="73:43"><expr pos:start="73:9" pos:end="73:42"><name pos:start="73:9" pos:end="73:16">buf_size</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <name pos:start="73:20" pos:end="73:42">DEFAULT_MIRROR_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:78">(<expr pos:start="79:9" pos:end="79:77"><name pos:start="79:9" pos:end="79:19">granularity</name> <operator pos:start="79:21" pos:end="79:22">!=</operator> <literal type="number" pos:start="79:24" pos:end="79:24">0</literal> <operator pos:start="79:26" pos:end="79:27">&amp;&amp;</operator> <operator pos:start="79:29" pos:end="79:29">(</operator><name pos:start="79:30" pos:end="79:63"><name pos:start="79:30" pos:end="79:40">granularity</name> <argument_list type="generic" pos:start="79:42" pos:end="79:63">&lt; <argument pos:start="79:44" pos:end="79:61"><expr pos:start="79:44" pos:end="79:61"><literal type="number" pos:start="79:44" pos:end="79:46">512</literal> <operator pos:start="79:48" pos:end="79:49">||</operator> <name pos:start="79:51" pos:end="79:61">granularity</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="79:65" pos:end="79:71">1048576</literal> <operator pos:start="79:73" pos:end="79:73">*</operator> <literal type="number" pos:start="79:75" pos:end="79:76">64</literal><operator pos:start="79:77" pos:end="79:77">)</operator></expr>)</condition> <block pos:start="79:80" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:15">

        <expr_stmt pos:start="81:9" pos:end="81:56"><expr pos:start="81:9" pos:end="81:55"><call pos:start="81:9" pos:end="81:55"><name pos:start="81:9" pos:end="81:17">error_set</name><argument_list pos:start="81:18" pos:end="81:55">(<argument pos:start="81:19" pos:end="81:22"><expr pos:start="81:19" pos:end="81:22"><name pos:start="81:19" pos:end="81:22">errp</name></expr></argument>, <argument pos:start="81:25" pos:end="81:46"><expr pos:start="81:25" pos:end="81:46"><name pos:start="81:25" pos:end="81:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="81:49" pos:end="81:54"><expr pos:start="81:49" pos:end="81:54"><name pos:start="81:49" pos:end="81:54">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:40">(<expr pos:start="87:9" pos:end="87:39"><name pos:start="87:9" pos:end="87:19">granularity</name> <operator pos:start="87:21" pos:end="87:21">&amp;</operator> <operator pos:start="87:23" pos:end="87:23">(</operator><name pos:start="87:24" pos:end="87:34">granularity</name> <operator pos:start="87:36" pos:end="87:36">-</operator> <literal type="number" pos:start="87:38" pos:end="87:38">1</literal><operator pos:start="87:39" pos:end="87:39">)</operator></expr>)</condition> <block pos:start="87:42" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:15">

        <expr_stmt pos:start="89:9" pos:end="89:56"><expr pos:start="89:9" pos:end="89:55"><call pos:start="89:9" pos:end="89:55"><name pos:start="89:9" pos:end="89:17">error_set</name><argument_list pos:start="89:18" pos:end="89:55">(<argument pos:start="89:19" pos:end="89:22"><expr pos:start="89:19" pos:end="89:22"><name pos:start="89:19" pos:end="89:22">errp</name></expr></argument>, <argument pos:start="89:25" pos:end="89:46"><expr pos:start="89:25" pos:end="89:46"><name pos:start="89:25" pos:end="89:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="89:49" pos:end="89:54"><expr pos:start="89:49" pos:end="89:54"><name pos:start="89:49" pos:end="89:54">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:27"><expr pos:start="97:5" pos:end="97:26"><name pos:start="97:5" pos:end="97:6">bs</name> <operator pos:start="97:8" pos:end="97:8">=</operator> <call pos:start="97:10" pos:end="97:26"><name pos:start="97:10" pos:end="97:18">bdrv_find</name><argument_list pos:start="97:19" pos:end="97:26">(<argument pos:start="97:20" pos:end="97:25"><expr pos:start="97:20" pos:end="97:25"><name pos:start="97:20" pos:end="97:25">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:12">(<expr pos:start="99:9" pos:end="99:11"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:11">bs</name></expr>)</condition> <block pos:start="99:14" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:15">

        <expr_stmt pos:start="101:9" pos:end="101:55"><expr pos:start="101:9" pos:end="101:54"><call pos:start="101:9" pos:end="101:54"><name pos:start="101:9" pos:end="101:17">error_set</name><argument_list pos:start="101:18" pos:end="101:54">(<argument pos:start="101:19" pos:end="101:22"><expr pos:start="101:19" pos:end="101:22"><name pos:start="101:19" pos:end="101:22">errp</name></expr></argument>, <argument pos:start="101:25" pos:end="101:45"><expr pos:start="101:25" pos:end="101:45"><name pos:start="101:25" pos:end="101:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="101:48" pos:end="101:53"><expr pos:start="101:48" pos:end="101:53"><name pos:start="101:48" pos:end="101:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:30">(<expr pos:start="109:9" pos:end="109:29"><operator pos:start="109:9" pos:end="109:9">!</operator><call pos:start="109:10" pos:end="109:29"><name pos:start="109:10" pos:end="109:25">bdrv_is_inserted</name><argument_list pos:start="109:26" pos:end="109:29">(<argument pos:start="109:27" pos:end="109:28"><expr pos:start="109:27" pos:end="109:28"><name pos:start="109:27" pos:end="109:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:32" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:15">

        <expr_stmt pos:start="111:9" pos:end="111:59"><expr pos:start="111:9" pos:end="111:58"><call pos:start="111:9" pos:end="111:58"><name pos:start="111:9" pos:end="111:17">error_set</name><argument_list pos:start="111:18" pos:end="111:58">(<argument pos:start="111:19" pos:end="111:22"><expr pos:start="111:19" pos:end="111:22"><name pos:start="111:19" pos:end="111:22">errp</name></expr></argument>, <argument pos:start="111:25" pos:end="111:49"><expr pos:start="111:25" pos:end="111:49"><name pos:start="111:25" pos:end="111:49">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="111:52" pos:end="111:57"><expr pos:start="111:52" pos:end="111:57"><name pos:start="111:52" pos:end="111:57">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:20">(<expr pos:start="119:9" pos:end="119:19"><operator pos:start="119:9" pos:end="119:9">!</operator><name pos:start="119:10" pos:end="119:19">has_format</name></expr>)</condition> <block pos:start="119:22" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:79">

        <expr_stmt pos:start="121:9" pos:end="121:79"><expr pos:start="121:9" pos:end="121:78"><name pos:start="121:9" pos:end="121:14">format</name> <operator pos:start="121:16" pos:end="121:16">=</operator> <ternary pos:start="121:18" pos:end="121:78"><condition pos:start="121:18" pos:end="121:50"><expr pos:start="121:18" pos:end="121:48"><name pos:start="121:18" pos:end="121:21">mode</name> <operator pos:start="121:23" pos:end="121:24">==</operator> <name pos:start="121:26" pos:end="121:48">NEW_IMAGE_MODE_EXISTING</name></expr> ?</condition><then pos:start="121:52" pos:end="121:55"> <expr pos:start="121:52" pos:end="121:55"><name pos:start="121:52" pos:end="121:55">NULL</name></expr> </then><else pos:start="121:57" pos:end="121:78">: <expr pos:start="121:59" pos:end="121:78"><name pos:start="121:59" pos:end="121:78"><name pos:start="121:59" pos:end="121:60">bs</name><operator pos:start="121:61" pos:end="121:62">-&gt;</operator><name pos:start="121:63" pos:end="121:65">drv</name><operator pos:start="121:66" pos:end="121:67">-&gt;</operator><name pos:start="121:68" pos:end="121:78">format_name</name></name></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="125:5" pos:end="137:5"><if pos:start="125:5" pos:end="137:5">if <condition pos:start="125:8" pos:end="125:15">(<expr pos:start="125:9" pos:end="125:14"><name pos:start="125:9" pos:end="125:14">format</name></expr>)</condition> <block pos:start="125:17" pos:end="137:5">{<block_content pos:start="127:9" pos:end="135:9">

        <expr_stmt pos:start="127:9" pos:end="127:39"><expr pos:start="127:9" pos:end="127:38"><name pos:start="127:9" pos:end="127:11">drv</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="127:38"><name pos:start="127:15" pos:end="127:30">bdrv_find_format</name><argument_list pos:start="127:31" pos:end="127:38">(<argument pos:start="127:32" pos:end="127:37"><expr pos:start="127:32" pos:end="127:37"><name pos:start="127:32" pos:end="127:37">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:17">(<expr pos:start="129:13" pos:end="129:16"><operator pos:start="129:13" pos:end="129:13">!</operator><name pos:start="129:14" pos:end="129:16">drv</name></expr>)</condition> <block pos:start="129:19" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:19">

            <expr_stmt pos:start="131:13" pos:end="131:63"><expr pos:start="131:13" pos:end="131:62"><call pos:start="131:13" pos:end="131:62"><name pos:start="131:13" pos:end="131:21">error_set</name><argument_list pos:start="131:22" pos:end="131:62">(<argument pos:start="131:23" pos:end="131:26"><expr pos:start="131:23" pos:end="131:26"><name pos:start="131:23" pos:end="131:26">errp</name></expr></argument>, <argument pos:start="131:29" pos:end="131:53"><expr pos:start="131:29" pos:end="131:53"><name pos:start="131:29" pos:end="131:53">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="131:56" pos:end="131:61"><expr pos:start="131:56" pos:end="131:61"><name pos:start="131:56" pos:end="131:61">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="133:13" pos:end="133:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="141:5" pos:end="147:5"><if pos:start="141:5" pos:end="147:5">if <condition pos:start="141:8" pos:end="141:24">(<expr pos:start="141:9" pos:end="141:23"><call pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:19">bdrv_in_use</name><argument_list pos:start="141:20" pos:end="141:23">(<argument pos:start="141:21" pos:end="141:22"><expr pos:start="141:21" pos:end="141:22"><name pos:start="141:21" pos:end="141:22">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:26" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:15">

        <expr_stmt pos:start="143:9" pos:end="143:52"><expr pos:start="143:9" pos:end="143:51"><call pos:start="143:9" pos:end="143:51"><name pos:start="143:9" pos:end="143:17">error_set</name><argument_list pos:start="143:18" pos:end="143:51">(<argument pos:start="143:19" pos:end="143:22"><expr pos:start="143:19" pos:end="143:22"><name pos:start="143:19" pos:end="143:22">errp</name></expr></argument>, <argument pos:start="143:25" pos:end="143:42"><expr pos:start="143:25" pos:end="143:42"><name pos:start="143:25" pos:end="143:42">QERR_DEVICE_IN_USE</name></expr></argument>, <argument pos:start="143:45" pos:end="143:50"><expr pos:start="143:45" pos:end="143:50"><name pos:start="143:45" pos:end="143:50">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="145:9" pos:end="145:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:41"><expr pos:start="151:5" pos:end="151:40"><name pos:start="151:5" pos:end="151:9">flags</name> <operator pos:start="151:11" pos:end="151:11">=</operator> <name pos:start="151:13" pos:end="151:26"><name pos:start="151:13" pos:end="151:14">bs</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:26">open_flags</name></name> <operator pos:start="151:28" pos:end="151:28">|</operator> <name pos:start="151:30" pos:end="151:40">BDRV_O_RDWR</name></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:28"><expr pos:start="153:5" pos:end="153:27"><name pos:start="153:5" pos:end="153:10">source</name> <operator pos:start="153:12" pos:end="153:12">=</operator> <name pos:start="153:14" pos:end="153:27"><name pos:start="153:14" pos:end="153:15">bs</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:27">backing_hd</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:48">(<expr pos:start="155:9" pos:end="155:47"><operator pos:start="155:9" pos:end="155:9">!</operator><name pos:start="155:10" pos:end="155:15">source</name> <operator pos:start="155:17" pos:end="155:18">&amp;&amp;</operator> <name pos:start="155:20" pos:end="155:23">sync</name> <operator pos:start="155:25" pos:end="155:26">==</operator> <name pos:start="155:28" pos:end="155:47">MIRROR_SYNC_MODE_TOP</name></expr>)</condition> <block pos:start="155:50" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:37">

        <expr_stmt pos:start="157:9" pos:end="157:37"><expr pos:start="157:9" pos:end="157:36"><name pos:start="157:9" pos:end="157:12">sync</name> <operator pos:start="157:14" pos:end="157:14">=</operator> <name pos:start="157:16" pos:end="157:36">MIRROR_SYNC_MODE_FULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:43"><expr pos:start="163:5" pos:end="163:42"><name pos:start="163:5" pos:end="163:13">proto_drv</name> <operator pos:start="163:15" pos:end="163:15">=</operator> <call pos:start="163:17" pos:end="163:42"><name pos:start="163:17" pos:end="163:34">bdrv_find_protocol</name><argument_list pos:start="163:35" pos:end="163:42">(<argument pos:start="163:36" pos:end="163:41"><expr pos:start="163:36" pos:end="163:41"><name pos:start="163:36" pos:end="163:41">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="165:5" pos:end="171:5"><if pos:start="165:5" pos:end="171:5">if <condition pos:start="165:8" pos:end="165:19">(<expr pos:start="165:9" pos:end="165:18"><operator pos:start="165:9" pos:end="165:9">!</operator><name pos:start="165:10" pos:end="165:18">proto_drv</name></expr>)</condition> <block pos:start="165:21" pos:end="171:5">{<block_content pos:start="167:9" pos:end="169:15">

        <expr_stmt pos:start="167:9" pos:end="167:59"><expr pos:start="167:9" pos:end="167:58"><call pos:start="167:9" pos:end="167:58"><name pos:start="167:9" pos:end="167:17">error_set</name><argument_list pos:start="167:18" pos:end="167:58">(<argument pos:start="167:19" pos:end="167:22"><expr pos:start="167:19" pos:end="167:22"><name pos:start="167:19" pos:end="167:22">errp</name></expr></argument>, <argument pos:start="167:25" pos:end="167:49"><expr pos:start="167:25" pos:end="167:49"><name pos:start="167:25" pos:end="167:49">QERR_INVALID_BLOCK_FORMAT</name></expr></argument>, <argument pos:start="167:52" pos:end="167:57"><expr pos:start="167:52" pos:end="167:57"><name pos:start="167:52" pos:end="167:57">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="169:9" pos:end="169:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:33"><expr pos:start="175:5" pos:end="175:32"><call pos:start="175:5" pos:end="175:32"><name pos:start="175:5" pos:end="175:21">bdrv_get_geometry</name><argument_list pos:start="175:22" pos:end="175:32">(<argument pos:start="175:23" pos:end="175:24"><expr pos:start="175:23" pos:end="175:24"><name pos:start="175:23" pos:end="175:24">bs</name></expr></argument>, <argument pos:start="175:27" pos:end="175:31"><expr pos:start="175:27" pos:end="175:31"><operator pos:start="175:27" pos:end="175:27">&amp;</operator><name pos:start="175:28" pos:end="175:31">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:16"><expr pos:start="177:5" pos:end="177:15"><name pos:start="177:5" pos:end="177:8">size</name> <operator pos:start="177:10" pos:end="177:11">*=</operator> <literal type="number" pos:start="177:13" pos:end="177:15">512</literal></expr>;</expr_stmt>

    <if_stmt pos:start="179:5" pos:end="219:5"><if pos:start="179:5" pos:end="189:5">if <condition pos:start="179:8" pos:end="179:73">(<expr pos:start="179:9" pos:end="179:72"><name pos:start="179:9" pos:end="179:12">sync</name> <operator pos:start="179:14" pos:end="179:15">==</operator> <name pos:start="179:17" pos:end="179:37">MIRROR_SYNC_MODE_FULL</name> <operator pos:start="179:39" pos:end="179:40">&amp;&amp;</operator> <name pos:start="179:42" pos:end="179:45">mode</name> <operator pos:start="179:47" pos:end="179:48">!=</operator> <name pos:start="179:50" pos:end="179:72">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition> <block pos:start="179:75" pos:end="189:5">{<block_content pos:start="183:9" pos:end="187:74">

        <comment type="block" pos:start="181:9" pos:end="181:47">/* create new image w/o backing file */</comment>

        <expr_stmt pos:start="183:9" pos:end="183:30"><expr pos:start="183:9" pos:end="183:29"><call pos:start="183:9" pos:end="183:29"><name pos:start="183:9" pos:end="183:14">assert</name><argument_list pos:start="183:15" pos:end="183:29">(<argument pos:start="183:16" pos:end="183:28"><expr pos:start="183:16" pos:end="183:28"><name pos:start="183:16" pos:end="183:21">format</name> <operator pos:start="183:23" pos:end="183:24">&amp;&amp;</operator> <name pos:start="183:26" pos:end="183:28">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="187:74"><expr pos:start="185:9" pos:end="187:73"><call pos:start="185:9" pos:end="187:73"><name pos:start="185:9" pos:end="185:23">bdrv_img_create</name><argument_list pos:start="185:24" pos:end="187:73">(<argument pos:start="185:25" pos:end="185:30"><expr pos:start="185:25" pos:end="185:30"><name pos:start="185:25" pos:end="185:30">target</name></expr></argument>, <argument pos:start="185:33" pos:end="185:38"><expr pos:start="185:33" pos:end="185:38"><name pos:start="185:33" pos:end="185:38">format</name></expr></argument>,

                        <argument pos:start="187:25" pos:end="187:28"><expr pos:start="187:25" pos:end="187:28"><name pos:start="187:25" pos:end="187:28">NULL</name></expr></argument>, <argument pos:start="187:31" pos:end="187:34"><expr pos:start="187:31" pos:end="187:34"><name pos:start="187:31" pos:end="187:34">NULL</name></expr></argument>, <argument pos:start="187:37" pos:end="187:40"><expr pos:start="187:37" pos:end="187:40"><name pos:start="187:37" pos:end="187:40">NULL</name></expr></argument>, <argument pos:start="187:43" pos:end="187:46"><expr pos:start="187:43" pos:end="187:46"><name pos:start="187:43" pos:end="187:46">size</name></expr></argument>, <argument pos:start="187:49" pos:end="187:53"><expr pos:start="187:49" pos:end="187:53"><name pos:start="187:49" pos:end="187:53">flags</name></expr></argument>, <argument pos:start="187:56" pos:end="187:65"><expr pos:start="187:56" pos:end="187:65"><operator pos:start="187:56" pos:end="187:56">&amp;</operator><name pos:start="187:57" pos:end="187:65">local_err</name></expr></argument>, <argument pos:start="187:68" pos:end="187:72"><expr pos:start="187:68" pos:end="187:72"><name pos:start="187:68" pos:end="187:72">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="189:7" pos:end="219:5">else <block pos:start="189:12" pos:end="219:5">{<block_content pos:start="191:9" pos:end="217:9">

        <switch pos:start="191:9" pos:end="217:9">switch <condition pos:start="191:16" pos:end="191:21">(<expr pos:start="191:17" pos:end="191:20"><name pos:start="191:17" pos:end="191:20">mode</name></expr>)</condition> <block pos:start="191:23" pos:end="217:9">{<block_content pos:start="193:9" pos:end="215:20">

        <case pos:start="193:9" pos:end="193:37">case <expr pos:start="193:14" pos:end="193:36"><name pos:start="193:14" pos:end="193:36">NEW_IMAGE_MODE_EXISTING</name></expr>:</case>

            <expr_stmt pos:start="195:13" pos:end="195:20"><expr pos:start="195:13" pos:end="195:19"><name pos:start="195:13" pos:end="195:15">ret</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <literal type="number" pos:start="195:19" pos:end="195:19">0</literal></expr>;</expr_stmt>

            <break pos:start="197:13" pos:end="197:18">break;</break>

        <case pos:start="199:9" pos:end="199:43">case <expr pos:start="199:14" pos:end="199:42"><name pos:start="199:14" pos:end="199:42">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>:</case>

            <comment type="block" pos:start="201:13" pos:end="201:52">/* create new image with backing file */</comment>

            <expr_stmt pos:start="203:13" pos:end="209:66"><expr pos:start="203:13" pos:end="209:65"><call pos:start="203:13" pos:end="209:65"><name pos:start="203:13" pos:end="203:27">bdrv_img_create</name><argument_list pos:start="203:28" pos:end="209:65">(<argument pos:start="203:29" pos:end="203:34"><expr pos:start="203:29" pos:end="203:34"><name pos:start="203:29" pos:end="203:34">target</name></expr></argument>, <argument pos:start="203:37" pos:end="203:42"><expr pos:start="203:37" pos:end="203:42"><name pos:start="203:37" pos:end="203:42">format</name></expr></argument>,

                            <argument pos:start="205:29" pos:end="205:44"><expr pos:start="205:29" pos:end="205:44"><name pos:start="205:29" pos:end="205:44"><name pos:start="205:29" pos:end="205:34">source</name><operator pos:start="205:35" pos:end="205:36">-&gt;</operator><name pos:start="205:37" pos:end="205:44">filename</name></name></expr></argument>,

                            <argument pos:start="207:29" pos:end="207:52"><expr pos:start="207:29" pos:end="207:52"><name pos:start="207:29" pos:end="207:52"><name pos:start="207:29" pos:end="207:34">source</name><operator pos:start="207:35" pos:end="207:36">-&gt;</operator><name pos:start="207:37" pos:end="207:39">drv</name><operator pos:start="207:40" pos:end="207:41">-&gt;</operator><name pos:start="207:42" pos:end="207:52">format_name</name></name></expr></argument>,

                            <argument pos:start="209:29" pos:end="209:32"><expr pos:start="209:29" pos:end="209:32"><name pos:start="209:29" pos:end="209:32">NULL</name></expr></argument>, <argument pos:start="209:35" pos:end="209:38"><expr pos:start="209:35" pos:end="209:38"><name pos:start="209:35" pos:end="209:38">size</name></expr></argument>, <argument pos:start="209:41" pos:end="209:45"><expr pos:start="209:41" pos:end="209:45"><name pos:start="209:41" pos:end="209:45">flags</name></expr></argument>, <argument pos:start="209:48" pos:end="209:57"><expr pos:start="209:48" pos:end="209:57"><operator pos:start="209:48" pos:end="209:48">&amp;</operator><name pos:start="209:49" pos:end="209:57">local_err</name></expr></argument>, <argument pos:start="209:60" pos:end="209:64"><expr pos:start="209:60" pos:end="209:64"><name pos:start="209:60" pos:end="209:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="211:13" pos:end="211:18">break;</break>

        <default pos:start="213:9" pos:end="213:16">default:</default>

            <expr_stmt pos:start="215:13" pos:end="215:20"><expr pos:start="215:13" pos:end="215:19"><call pos:start="215:13" pos:end="215:19"><name pos:start="215:13" pos:end="215:17">abort</name><argument_list pos:start="215:18" pos:end="215:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="223:5" pos:end="229:5"><if pos:start="223:5" pos:end="229:5">if <condition pos:start="223:8" pos:end="223:33">(<expr pos:start="223:9" pos:end="223:32"><call pos:start="223:9" pos:end="223:32"><name pos:start="223:9" pos:end="223:20">error_is_set</name><argument_list pos:start="223:21" pos:end="223:32">(<argument pos:start="223:22" pos:end="223:31"><expr pos:start="223:22" pos:end="223:31"><operator pos:start="223:22" pos:end="223:22">&amp;</operator><name pos:start="223:23" pos:end="223:31">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="223:35" pos:end="229:5">{<block_content pos:start="225:9" pos:end="227:15">

        <expr_stmt pos:start="225:9" pos:end="225:41"><expr pos:start="225:9" pos:end="225:40"><call pos:start="225:9" pos:end="225:40"><name pos:start="225:9" pos:end="225:23">error_propagate</name><argument_list pos:start="225:24" pos:end="225:40">(<argument pos:start="225:25" pos:end="225:28"><expr pos:start="225:25" pos:end="225:28"><name pos:start="225:25" pos:end="225:28">errp</name></expr></argument>, <argument pos:start="225:31" pos:end="225:39"><expr pos:start="225:31" pos:end="225:39"><name pos:start="225:31" pos:end="225:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="227:9" pos:end="227:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="233:5" pos:end="237:7">/* Mirroring takes care of copy-on-write using the source's backing

     * file.

     */</comment>

    <expr_stmt pos:start="239:5" pos:end="239:29"><expr pos:start="239:5" pos:end="239:28"><name pos:start="239:5" pos:end="239:13">target_bs</name> <operator pos:start="239:15" pos:end="239:15">=</operator> <call pos:start="239:17" pos:end="239:28"><name pos:start="239:17" pos:end="239:24">bdrv_new</name><argument_list pos:start="239:25" pos:end="239:28">(<argument pos:start="239:26" pos:end="239:27"><expr pos:start="239:26" pos:end="239:27"><literal type="string" pos:start="239:26" pos:end="239:27">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:77"><expr pos:start="241:5" pos:end="241:76"><name pos:start="241:5" pos:end="241:7">ret</name> <operator pos:start="241:9" pos:end="241:9">=</operator> <call pos:start="241:11" pos:end="241:76"><name pos:start="241:11" pos:end="241:19">bdrv_open</name><argument_list pos:start="241:20" pos:end="241:76">(<argument pos:start="241:21" pos:end="241:29"><expr pos:start="241:21" pos:end="241:29"><name pos:start="241:21" pos:end="241:29">target_bs</name></expr></argument>, <argument pos:start="241:32" pos:end="241:37"><expr pos:start="241:32" pos:end="241:37"><name pos:start="241:32" pos:end="241:37">target</name></expr></argument>, <argument pos:start="241:40" pos:end="241:43"><expr pos:start="241:40" pos:end="241:43"><name pos:start="241:40" pos:end="241:43">NULL</name></expr></argument>, <argument pos:start="241:46" pos:end="241:70"><expr pos:start="241:46" pos:end="241:70"><name pos:start="241:46" pos:end="241:50">flags</name> <operator pos:start="241:52" pos:end="241:52">|</operator> <name pos:start="241:54" pos:end="241:70">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="241:73" pos:end="241:75"><expr pos:start="241:73" pos:end="241:75"><name pos:start="241:73" pos:end="241:75">drv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="245:5" pos:end="253:5"><if pos:start="245:5" pos:end="253:5">if <condition pos:start="245:8" pos:end="245:16">(<expr pos:start="245:9" pos:end="245:15"><name pos:start="245:9" pos:end="245:11">ret</name> <operator pos:start="245:13" pos:end="245:13">&lt;</operator> <literal type="number" pos:start="245:15" pos:end="245:15">0</literal></expr>)</condition> <block pos:start="245:18" pos:end="253:5">{<block_content pos:start="247:9" pos:end="251:15">

        <expr_stmt pos:start="247:9" pos:end="247:31"><expr pos:start="247:9" pos:end="247:30"><call pos:start="247:9" pos:end="247:30"><name pos:start="247:9" pos:end="247:19">bdrv_delete</name><argument_list pos:start="247:20" pos:end="247:30">(<argument pos:start="247:21" pos:end="247:29"><expr pos:start="247:21" pos:end="247:29"><name pos:start="247:21" pos:end="247:29">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:49"><expr pos:start="249:9" pos:end="249:48"><call pos:start="249:9" pos:end="249:48"><name pos:start="249:9" pos:end="249:28">error_setg_file_open</name><argument_list pos:start="249:29" pos:end="249:48">(<argument pos:start="249:30" pos:end="249:33"><expr pos:start="249:30" pos:end="249:33"><name pos:start="249:30" pos:end="249:33">errp</name></expr></argument>, <argument pos:start="249:36" pos:end="249:39"><expr pos:start="249:36" pos:end="249:39"><operator pos:start="249:36" pos:end="249:36">-</operator><name pos:start="249:37" pos:end="249:39">ret</name></expr></argument>, <argument pos:start="249:42" pos:end="249:47"><expr pos:start="249:42" pos:end="249:47"><name pos:start="249:42" pos:end="249:47">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="251:9" pos:end="251:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="257:5" pos:end="261:47"><expr pos:start="257:5" pos:end="261:46"><call pos:start="257:5" pos:end="261:46"><name pos:start="257:5" pos:end="257:16">mirror_start</name><argument_list pos:start="257:17" pos:end="261:46">(<argument pos:start="257:18" pos:end="257:19"><expr pos:start="257:18" pos:end="257:19"><name pos:start="257:18" pos:end="257:19">bs</name></expr></argument>, <argument pos:start="257:22" pos:end="257:30"><expr pos:start="257:22" pos:end="257:30"><name pos:start="257:22" pos:end="257:30">target_bs</name></expr></argument>, <argument pos:start="257:33" pos:end="257:37"><expr pos:start="257:33" pos:end="257:37"><name pos:start="257:33" pos:end="257:37">speed</name></expr></argument>, <argument pos:start="257:40" pos:end="257:50"><expr pos:start="257:40" pos:end="257:50"><name pos:start="257:40" pos:end="257:50">granularity</name></expr></argument>, <argument pos:start="257:53" pos:end="257:60"><expr pos:start="257:53" pos:end="257:60"><name pos:start="257:53" pos:end="257:60">buf_size</name></expr></argument>, <argument pos:start="257:63" pos:end="257:66"><expr pos:start="257:63" pos:end="257:66"><name pos:start="257:63" pos:end="257:66">sync</name></expr></argument>,

                 <argument pos:start="259:18" pos:end="259:32"><expr pos:start="259:18" pos:end="259:32"><name pos:start="259:18" pos:end="259:32">on_source_error</name></expr></argument>, <argument pos:start="259:35" pos:end="259:49"><expr pos:start="259:35" pos:end="259:49"><name pos:start="259:35" pos:end="259:49">on_target_error</name></expr></argument>,

                 <argument pos:start="261:18" pos:end="261:29"><expr pos:start="261:18" pos:end="261:29"><name pos:start="261:18" pos:end="261:29">block_job_cb</name></expr></argument>, <argument pos:start="261:32" pos:end="261:33"><expr pos:start="261:32" pos:end="261:33"><name pos:start="261:32" pos:end="261:33">bs</name></expr></argument>, <argument pos:start="261:36" pos:end="261:45"><expr pos:start="261:36" pos:end="261:45"><operator pos:start="261:36" pos:end="261:36">&amp;</operator><name pos:start="261:37" pos:end="261:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="263:5" pos:end="271:5"><if pos:start="263:5" pos:end="271:5">if <condition pos:start="263:8" pos:end="263:26">(<expr pos:start="263:9" pos:end="263:25"><name pos:start="263:9" pos:end="263:17">local_err</name> <operator pos:start="263:19" pos:end="263:20">!=</operator> <name pos:start="263:22" pos:end="263:25">NULL</name></expr>)</condition> <block pos:start="263:28" pos:end="271:5">{<block_content pos:start="265:9" pos:end="269:15">

        <expr_stmt pos:start="265:9" pos:end="265:31"><expr pos:start="265:9" pos:end="265:30"><call pos:start="265:9" pos:end="265:30"><name pos:start="265:9" pos:end="265:19">bdrv_delete</name><argument_list pos:start="265:20" pos:end="265:30">(<argument pos:start="265:21" pos:end="265:29"><expr pos:start="265:21" pos:end="265:29"><name pos:start="265:21" pos:end="265:29">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:41"><expr pos:start="267:9" pos:end="267:40"><call pos:start="267:9" pos:end="267:40"><name pos:start="267:9" pos:end="267:23">error_propagate</name><argument_list pos:start="267:24" pos:end="267:40">(<argument pos:start="267:25" pos:end="267:28"><expr pos:start="267:25" pos:end="267:28"><name pos:start="267:25" pos:end="267:28">errp</name></expr></argument>, <argument pos:start="267:31" pos:end="267:39"><expr pos:start="267:31" pos:end="267:39"><name pos:start="267:31" pos:end="267:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="269:9" pos:end="269:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="275:5" pos:end="279:7">/* Grab a reference so hotplug does not delete the BlockDriverState from

     * underneath us.

     */</comment>

    <expr_stmt pos:start="281:5" pos:end="281:45"><expr pos:start="281:5" pos:end="281:44"><call pos:start="281:5" pos:end="281:44"><name pos:start="281:5" pos:end="281:17">drive_get_ref</name><argument_list pos:start="281:18" pos:end="281:44">(<argument pos:start="281:19" pos:end="281:43"><expr pos:start="281:19" pos:end="281:43"><call pos:start="281:19" pos:end="281:43"><name pos:start="281:19" pos:end="281:39">drive_get_by_blockdev</name><argument_list pos:start="281:40" pos:end="281:43">(<argument pos:start="281:41" pos:end="281:42"><expr pos:start="281:41" pos:end="281:42"><name pos:start="281:41" pos:end="281:42">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
