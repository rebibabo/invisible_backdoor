<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26504.c" pos:tabs="8"><function pos:start="1:1" pos:end="285:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">aa_read_header</name><parameter_list pos:start="1:26" pos:end="1:45">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:43"><name pos:start="1:27" pos:end="1:41">AVFormatContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="285:1">{<block_content pos:start="5:5" pos:end="283:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">j</name></decl>, <decl pos:start="5:15" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:17">idx</name></decl>, <decl pos:start="5:20" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:20" pos:end="5:30">largest_idx</name> <init pos:start="5:32" pos:end="5:35">= <expr pos:start="5:34" pos:end="5:35"><operator pos:start="5:34" pos:end="5:34">-</operator><literal type="number" pos:start="5:35" pos:end="5:35">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">nkey</name></decl>, <decl pos:start="7:20" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:20" pos:end="7:23">nval</name></decl>, <decl pos:start="7:26" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:26" pos:end="7:33">toc_size</name></decl>, <decl pos:start="7:36" pos:end="7:41"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:36" pos:end="7:41">npairs</name></decl>, <decl pos:start="7:44" pos:end="7:54"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:44" pos:end="7:54">header_seed</name></decl>, <decl pos:start="7:57" pos:end="7:61"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:57" pos:end="7:61">start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:50"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:17"><name pos:start="9:10" pos:end="9:12">key</name><index pos:start="9:13" pos:end="9:17">[<expr pos:start="9:14" pos:end="9:16"><literal type="number" pos:start="9:14" pos:end="9:16">128</literal></expr>]</index></name></decl>, <decl pos:start="9:20" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:22">val</name><index pos:start="9:23" pos:end="9:27">[<expr pos:start="9:24" pos:end="9:26"><literal type="number" pos:start="9:24" pos:end="9:26">128</literal></expr>]</index></name></decl>, <decl pos:start="9:30" pos:end="9:49"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:30" pos:end="9:43"><name pos:start="9:30" pos:end="9:39">codec_name</name><index pos:start="9:40" pos:end="9:43">[<expr pos:start="9:41" pos:end="9:42"><literal type="number" pos:start="9:41" pos:end="9:42">64</literal></expr>]</index></name> <init pos:start="9:45" pos:end="9:49">= <expr pos:start="9:47" pos:end="9:49"><block pos:start="9:47" pos:end="9:49">{<expr pos:start="9:48" pos:end="9:48"><literal type="number" pos:start="9:48" pos:end="9:48">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:22"><name pos:start="11:13" pos:end="11:18">output</name><index pos:start="11:19" pos:end="11:22">[<expr pos:start="11:20" pos:end="11:21"><literal type="number" pos:start="11:20" pos:end="11:21">24</literal></expr>]</index></name></decl>, <decl pos:start="11:25" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:25" pos:end="11:30"><name pos:start="11:25" pos:end="11:27">dst</name><index pos:start="11:28" pos:end="11:30">[<expr pos:start="11:29" pos:end="11:29"><literal type="number" pos:start="11:29" pos:end="11:29">8</literal></expr>]</index></name></decl>, <decl pos:start="11:33" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:33" pos:end="11:38"><name pos:start="11:33" pos:end="11:35">src</name><index pos:start="11:36" pos:end="11:38">[<expr pos:start="11:37" pos:end="11:37"><literal type="number" pos:start="11:37" pos:end="11:37">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:49"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:24">largest_size</name> <init pos:start="13:26" pos:end="13:29">= <expr pos:start="13:28" pos:end="13:29"><operator pos:start="13:28" pos:end="13:28">-</operator><literal type="number" pos:start="13:29" pos:end="13:29">1</literal></expr></init></decl>, <decl pos:start="13:32" pos:end="13:48"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:32" pos:end="13:43">current_size</name> <init pos:start="13:45" pos:end="13:48">= <expr pos:start="13:47" pos:end="13:48"><operator pos:start="13:47" pos:end="13:47">-</operator><literal type="number" pos:start="13:48" pos:end="13:48">1</literal></expr></init></decl>;</decl_stmt>

    <struct pos:start="15:5" pos:end="21:27">struct <name pos:start="15:12" pos:end="15:20">toc_entry</name> <block pos:start="15:22" pos:end="21:5">{

        <decl_stmt pos:start="17:9" pos:end="17:24"><decl pos:start="17:9" pos:end="17:23"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">uint32_t</name></type> <name pos:start="17:18" pos:end="17:23">offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:22"><decl pos:start="19:9" pos:end="19:21"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint32_t</name></type> <name pos:start="19:18" pos:end="19:21">size</name></decl>;</decl_stmt>

    }</block> <decl pos:start="21:7" pos:end="21:26"><name pos:start="21:7" pos:end="21:26"><name pos:start="21:7" pos:end="21:9">TOC</name><index pos:start="21:10" pos:end="21:26">[<expr pos:start="21:11" pos:end="21:25"><name pos:start="21:11" pos:end="21:25">MAX_TOC_ENTRIES</name></expr>]</index></name></decl>;</struct>

    <decl_stmt pos:start="23:5" pos:end="23:32"><decl pos:start="23:5" pos:end="23:31"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:31"><name pos:start="23:14" pos:end="23:28">header_key_part</name><index pos:start="23:29" pos:end="23:31">[<expr pos:start="23:30" pos:end="23:30"><literal type="number" pos:start="23:30" pos:end="23:30">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">uint8_t</name></type> <name pos:start="25:13" pos:end="25:26"><name pos:start="25:13" pos:end="25:22">header_key</name><index pos:start="25:23" pos:end="25:26">[<expr pos:start="25:24" pos:end="25:25"><literal type="number" pos:start="25:24" pos:end="25:25">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:37"><decl pos:start="27:5" pos:end="27:36"><type pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:18">AADemuxContext</name> <modifier pos:start="27:20" pos:end="27:20">*</modifier></type><name pos:start="27:21" pos:end="27:21">c</name> <init pos:start="27:23" pos:end="27:36">= <expr pos:start="27:25" pos:end="27:36"><name pos:start="27:25" pos:end="27:36"><name pos:start="27:25" pos:end="27:25">s</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:15">AVIOContext</name> <modifier pos:start="29:17" pos:end="29:17">*</modifier></type><name pos:start="29:18" pos:end="29:19">pb</name> <init pos:start="29:21" pos:end="29:27">= <expr pos:start="29:23" pos:end="29:27"><name pos:start="29:23" pos:end="29:27"><name pos:start="29:23" pos:end="29:23">s</name><operator pos:start="29:24" pos:end="29:25">-&gt;</operator><name pos:start="29:26" pos:end="29:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:17"><decl pos:start="31:5" pos:end="31:16"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">AVStream</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:16">st</name></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:26">/* parse .aa header */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:21"><expr pos:start="37:5" pos:end="37:20"><call pos:start="37:5" pos:end="37:20"><name pos:start="37:5" pos:end="37:13">avio_skip</name><argument_list pos:start="37:14" pos:end="37:20">(<argument pos:start="37:15" pos:end="37:16"><expr pos:start="37:15" pos:end="37:16"><name pos:start="37:15" pos:end="37:16">pb</name></expr></argument>, <argument pos:start="37:19" pos:end="37:19"><expr pos:start="37:19" pos:end="37:19"><literal type="number" pos:start="37:19" pos:end="37:19">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="37:23" pos:end="37:34">// file size</comment>

    <expr_stmt pos:start="39:5" pos:end="39:21"><expr pos:start="39:5" pos:end="39:20"><call pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:13">avio_skip</name><argument_list pos:start="39:14" pos:end="39:20">(<argument pos:start="39:15" pos:end="39:16"><expr pos:start="39:15" pos:end="39:16"><name pos:start="39:15" pos:end="39:16">pb</name></expr></argument>, <argument pos:start="39:19" pos:end="39:19"><expr pos:start="39:19" pos:end="39:19"><literal type="number" pos:start="39:19" pos:end="39:19">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="39:23" pos:end="39:37">// magic string</comment>

    <expr_stmt pos:start="41:5" pos:end="41:29"><expr pos:start="41:5" pos:end="41:28"><name pos:start="41:5" pos:end="41:12">toc_size</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:28"><name pos:start="41:16" pos:end="41:24">avio_rb32</name><argument_list pos:start="41:25" pos:end="41:28">(<argument pos:start="41:26" pos:end="41:27"><expr pos:start="41:26" pos:end="41:27"><name pos:start="41:26" pos:end="41:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="41:31" pos:end="41:41">// TOC size</comment>

    <expr_stmt pos:start="43:5" pos:end="43:21"><expr pos:start="43:5" pos:end="43:20"><call pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:13">avio_skip</name><argument_list pos:start="43:14" pos:end="43:20">(<argument pos:start="43:15" pos:end="43:16"><expr pos:start="43:15" pos:end="43:16"><name pos:start="43:15" pos:end="43:16">pb</name></expr></argument>, <argument pos:start="43:19" pos:end="43:19"><expr pos:start="43:19" pos:end="43:19"><literal type="number" pos:start="43:19" pos:end="43:19">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="43:23" pos:end="43:45">// unidentified integer</comment>

    <if_stmt pos:start="45:5" pos:end="47:35"><if pos:start="45:5" pos:end="47:35">if <condition pos:start="45:8" pos:end="45:35">(<expr pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:16">toc_size</name> <operator pos:start="45:18" pos:end="45:18">&gt;</operator> <name pos:start="45:20" pos:end="45:34">MAX_TOC_ENTRIES</name></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:35"><block_content pos:start="47:9" pos:end="47:35">

        <return pos:start="47:9" pos:end="47:35">return <expr pos:start="47:16" pos:end="47:34"><name pos:start="47:16" pos:end="47:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <for pos:start="49:5" pos:end="57:5">for <control pos:start="49:9" pos:end="49:34">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:29"><expr pos:start="49:17" pos:end="49:28"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <name pos:start="49:21" pos:end="49:28">toc_size</name></expr>;</condition> <incr pos:start="49:31" pos:end="49:33"><expr pos:start="49:31" pos:end="49:33"><name pos:start="49:31" pos:end="49:31">i</name><operator pos:start="49:32" pos:end="49:33">++</operator></expr></incr>)</control> <block pos:start="49:36" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:36"> <comment type="line" pos:start="49:38" pos:end="49:48">// read TOC</comment>

        <expr_stmt pos:start="51:9" pos:end="51:25"><expr pos:start="51:9" pos:end="51:24"><call pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:17">avio_skip</name><argument_list pos:start="51:18" pos:end="51:24">(<argument pos:start="51:19" pos:end="51:20"><expr pos:start="51:19" pos:end="51:20"><name pos:start="51:19" pos:end="51:20">pb</name></expr></argument>, <argument pos:start="51:23" pos:end="51:23"><expr pos:start="51:23" pos:end="51:23"><literal type="number" pos:start="51:23" pos:end="51:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="51:27" pos:end="51:44">// TOC entry index</comment>

        <expr_stmt pos:start="53:9" pos:end="53:38"><expr pos:start="53:9" pos:end="53:37"><name pos:start="53:9" pos:end="53:14"><name pos:start="53:9" pos:end="53:11">TOC</name><index pos:start="53:12" pos:end="53:14">[<expr pos:start="53:13" pos:end="53:13"><name pos:start="53:13" pos:end="53:13">i</name></expr>]</index></name><operator pos:start="53:15" pos:end="53:15">.</operator><name pos:start="53:16" pos:end="53:21">offset</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <call pos:start="53:25" pos:end="53:37"><name pos:start="53:25" pos:end="53:33">avio_rb32</name><argument_list pos:start="53:34" pos:end="53:37">(<argument pos:start="53:35" pos:end="53:36"><expr pos:start="53:35" pos:end="53:36"><name pos:start="53:35" pos:end="53:36">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="53:40" pos:end="53:54">// block offset</comment>

        <expr_stmt pos:start="55:9" pos:end="55:36"><expr pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:11">TOC</name><index pos:start="55:12" pos:end="55:14">[<expr pos:start="55:13" pos:end="55:13"><name pos:start="55:13" pos:end="55:13">i</name></expr>]</index></name><operator pos:start="55:15" pos:end="55:15">.</operator><name pos:start="55:16" pos:end="55:19">size</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="55:35"><name pos:start="55:23" pos:end="55:31">avio_rb32</name><argument_list pos:start="55:32" pos:end="55:35">(<argument pos:start="55:33" pos:end="55:34"><expr pos:start="55:33" pos:end="55:34"><name pos:start="55:33" pos:end="55:34">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="55:38" pos:end="55:50">// block size</comment>

    </block_content>}</block></for>

    <expr_stmt pos:start="59:5" pos:end="59:22"><expr pos:start="59:5" pos:end="59:21"><call pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:13">avio_skip</name><argument_list pos:start="59:14" pos:end="59:21">(<argument pos:start="59:15" pos:end="59:16"><expr pos:start="59:15" pos:end="59:16"><name pos:start="59:15" pos:end="59:16">pb</name></expr></argument>, <argument pos:start="59:19" pos:end="59:20"><expr pos:start="59:19" pos:end="59:20"><literal type="number" pos:start="59:19" pos:end="59:20">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="59:24" pos:end="59:60">// header termination block (ignored)</comment>

    <expr_stmt pos:start="61:5" pos:end="61:27"><expr pos:start="61:5" pos:end="61:26"><name pos:start="61:5" pos:end="61:10">npairs</name> <operator pos:start="61:12" pos:end="61:12">=</operator> <call pos:start="61:14" pos:end="61:26"><name pos:start="61:14" pos:end="61:22">avio_rb32</name><argument_list pos:start="61:23" pos:end="61:26">(<argument pos:start="61:24" pos:end="61:25"><expr pos:start="61:24" pos:end="61:25"><name pos:start="61:24" pos:end="61:25">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="61:29" pos:end="61:54">// read dictionary entries</comment>

    <if_stmt pos:start="63:5" pos:end="65:35"><if pos:start="63:5" pos:end="65:35">if <condition pos:start="63:8" pos:end="63:40">(<expr pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:14">npairs</name> <operator pos:start="63:16" pos:end="63:16">&gt;</operator> <name pos:start="63:18" pos:end="63:39">MAX_DICTIONARY_ENTRIES</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:35"><block_content pos:start="65:9" pos:end="65:35">

        <return pos:start="65:9" pos:end="65:35">return <expr pos:start="65:16" pos:end="65:34"><name pos:start="65:16" pos:end="65:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <for pos:start="67:5" pos:end="137:5">for <control pos:start="67:9" pos:end="67:32">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:27"><expr pos:start="67:17" pos:end="67:26"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:26">npairs</name></expr>;</condition> <incr pos:start="67:29" pos:end="67:31"><expr pos:start="67:29" pos:end="67:31"><name pos:start="67:29" pos:end="67:29">i</name><operator pos:start="67:30" pos:end="67:31">++</operator></expr></incr>)</control> <block pos:start="67:34" pos:end="137:5">{<block_content pos:start="69:9" pos:end="135:9">

        <expr_stmt pos:start="69:9" pos:end="69:36"><expr pos:start="69:9" pos:end="69:35"><call pos:start="69:9" pos:end="69:35"><name pos:start="69:9" pos:end="69:14">memset</name><argument_list pos:start="69:15" pos:end="69:35">(<argument pos:start="69:16" pos:end="69:18"><expr pos:start="69:16" pos:end="69:18"><name pos:start="69:16" pos:end="69:18">val</name></expr></argument>, <argument pos:start="69:21" pos:end="69:21"><expr pos:start="69:21" pos:end="69:21"><literal type="number" pos:start="69:21" pos:end="69:21">0</literal></expr></argument>, <argument pos:start="69:24" pos:end="69:34"><expr pos:start="69:24" pos:end="69:34"><sizeof pos:start="69:24" pos:end="69:34">sizeof<argument_list pos:start="69:30" pos:end="69:34">(<argument pos:start="69:31" pos:end="69:33"><expr pos:start="69:31" pos:end="69:33"><name pos:start="69:31" pos:end="69:33">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:36"><expr pos:start="71:9" pos:end="71:35"><call pos:start="71:9" pos:end="71:35"><name pos:start="71:9" pos:end="71:14">memset</name><argument_list pos:start="71:15" pos:end="71:35">(<argument pos:start="71:16" pos:end="71:18"><expr pos:start="71:16" pos:end="71:18"><name pos:start="71:16" pos:end="71:18">key</name></expr></argument>, <argument pos:start="71:21" pos:end="71:21"><expr pos:start="71:21" pos:end="71:21"><literal type="number" pos:start="71:21" pos:end="71:21">0</literal></expr></argument>, <argument pos:start="71:24" pos:end="71:34"><expr pos:start="71:24" pos:end="71:34"><sizeof pos:start="71:24" pos:end="71:34">sizeof<argument_list pos:start="71:30" pos:end="71:34">(<argument pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><name pos:start="71:31" pos:end="71:33">key</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:25"><expr pos:start="73:9" pos:end="73:24"><call pos:start="73:9" pos:end="73:24"><name pos:start="73:9" pos:end="73:17">avio_skip</name><argument_list pos:start="73:18" pos:end="73:24">(<argument pos:start="73:19" pos:end="73:20"><expr pos:start="73:19" pos:end="73:20"><name pos:start="73:19" pos:end="73:20">pb</name></expr></argument>, <argument pos:start="73:23" pos:end="73:23"><expr pos:start="73:23" pos:end="73:23"><literal type="number" pos:start="73:23" pos:end="73:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="73:27" pos:end="73:49">// unidentified integer</comment>

        <expr_stmt pos:start="75:9" pos:end="75:29"><expr pos:start="75:9" pos:end="75:28"><name pos:start="75:9" pos:end="75:12">nkey</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <call pos:start="75:16" pos:end="75:28"><name pos:start="75:16" pos:end="75:24">avio_rb32</name><argument_list pos:start="75:25" pos:end="75:28">(<argument pos:start="75:26" pos:end="75:27"><expr pos:start="75:26" pos:end="75:27"><name pos:start="75:26" pos:end="75:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="75:31" pos:end="75:50">// key string length</comment>

        <expr_stmt pos:start="77:9" pos:end="77:29"><expr pos:start="77:9" pos:end="77:28"><name pos:start="77:9" pos:end="77:12">nval</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:28"><name pos:start="77:16" pos:end="77:24">avio_rb32</name><argument_list pos:start="77:25" pos:end="77:28">(<argument pos:start="77:26" pos:end="77:27"><expr pos:start="77:26" pos:end="77:27"><name pos:start="77:26" pos:end="77:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="77:31" pos:end="77:52">// value string length</comment>

        <if_stmt pos:start="79:9" pos:end="87:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:31">(<expr pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:16">nkey</name> <operator pos:start="79:18" pos:end="79:18">&gt;</operator> <sizeof pos:start="79:20" pos:end="79:30">sizeof<argument_list pos:start="79:26" pos:end="79:30">(<argument pos:start="79:27" pos:end="79:29"><expr pos:start="79:27" pos:end="79:29"><name pos:start="79:27" pos:end="79:29">key</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="79:33" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:32">

            <expr_stmt pos:start="81:13" pos:end="81:32"><expr pos:start="81:13" pos:end="81:31"><call pos:start="81:13" pos:end="81:31"><name pos:start="81:13" pos:end="81:21">avio_skip</name><argument_list pos:start="81:22" pos:end="81:31">(<argument pos:start="81:23" pos:end="81:24"><expr pos:start="81:23" pos:end="81:24"><name pos:start="81:23" pos:end="81:24">pb</name></expr></argument>, <argument pos:start="81:27" pos:end="81:30"><expr pos:start="81:27" pos:end="81:30"><name pos:start="81:27" pos:end="81:30">nkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="87:9">else <block pos:start="83:16" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:37">

            <expr_stmt pos:start="85:13" pos:end="85:37"><expr pos:start="85:13" pos:end="85:36"><call pos:start="85:13" pos:end="85:36"><name pos:start="85:13" pos:end="85:21">avio_read</name><argument_list pos:start="85:22" pos:end="85:36">(<argument pos:start="85:23" pos:end="85:24"><expr pos:start="85:23" pos:end="85:24"><name pos:start="85:23" pos:end="85:24">pb</name></expr></argument>, <argument pos:start="85:27" pos:end="85:29"><expr pos:start="85:27" pos:end="85:29"><name pos:start="85:27" pos:end="85:29">key</name></expr></argument>, <argument pos:start="85:32" pos:end="85:35"><expr pos:start="85:32" pos:end="85:35"><name pos:start="85:32" pos:end="85:35">nkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="85:39" pos:end="85:51">// key string</comment>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="89:9" pos:end="97:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:31">(<expr pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:16">nval</name> <operator pos:start="89:18" pos:end="89:18">&gt;</operator> <sizeof pos:start="89:20" pos:end="89:30">sizeof<argument_list pos:start="89:26" pos:end="89:30">(<argument pos:start="89:27" pos:end="89:29"><expr pos:start="89:27" pos:end="89:29"><name pos:start="89:27" pos:end="89:29">val</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="89:33" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:32">

            <expr_stmt pos:start="91:13" pos:end="91:32"><expr pos:start="91:13" pos:end="91:31"><call pos:start="91:13" pos:end="91:31"><name pos:start="91:13" pos:end="91:21">avio_skip</name><argument_list pos:start="91:22" pos:end="91:31">(<argument pos:start="91:23" pos:end="91:24"><expr pos:start="91:23" pos:end="91:24"><name pos:start="91:23" pos:end="91:24">pb</name></expr></argument>, <argument pos:start="91:27" pos:end="91:30"><expr pos:start="91:27" pos:end="91:30"><name pos:start="91:27" pos:end="91:30">nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="97:9">else <block pos:start="93:16" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:37">

            <expr_stmt pos:start="95:13" pos:end="95:37"><expr pos:start="95:13" pos:end="95:36"><call pos:start="95:13" pos:end="95:36"><name pos:start="95:13" pos:end="95:21">avio_read</name><argument_list pos:start="95:22" pos:end="95:36">(<argument pos:start="95:23" pos:end="95:24"><expr pos:start="95:23" pos:end="95:24"><name pos:start="95:23" pos:end="95:24">pb</name></expr></argument>, <argument pos:start="95:27" pos:end="95:29"><expr pos:start="95:27" pos:end="95:29"><name pos:start="95:27" pos:end="95:29">val</name></expr></argument>, <argument pos:start="95:32" pos:end="95:35"><expr pos:start="95:32" pos:end="95:35"><name pos:start="95:32" pos:end="95:35">nval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="95:39" pos:end="95:53">// value string</comment>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:34">(<expr pos:start="99:13" pos:end="99:33"><operator pos:start="99:13" pos:end="99:13">!</operator><call pos:start="99:14" pos:end="99:33"><name pos:start="99:14" pos:end="99:19">strcmp</name><argument_list pos:start="99:20" pos:end="99:33">(<argument pos:start="99:21" pos:end="99:23"><expr pos:start="99:21" pos:end="99:23"><name pos:start="99:21" pos:end="99:23">key</name></expr></argument>, <argument pos:start="99:26" pos:end="99:32"><expr pos:start="99:26" pos:end="99:32"><literal type="string" pos:start="99:26" pos:end="99:32">"codec"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:36" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:61">

            <expr_stmt pos:start="101:13" pos:end="101:60"><expr pos:start="101:13" pos:end="101:59"><call pos:start="101:13" pos:end="101:59"><name pos:start="101:13" pos:end="101:18">av_log</name><argument_list pos:start="101:19" pos:end="101:59">(<argument pos:start="101:20" pos:end="101:20"><expr pos:start="101:20" pos:end="101:20"><name pos:start="101:20" pos:end="101:20">s</name></expr></argument>, <argument pos:start="101:23" pos:end="101:34"><expr pos:start="101:23" pos:end="101:34"><name pos:start="101:23" pos:end="101:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="101:37" pos:end="101:53"><expr pos:start="101:37" pos:end="101:53"><literal type="string" pos:start="101:37" pos:end="101:53">"Codec is &lt;%s&gt;\n"</literal></expr></argument>, <argument pos:start="101:56" pos:end="101:58"><expr pos:start="101:56" pos:end="101:58"><name pos:start="101:56" pos:end="101:58">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:61"><expr pos:start="103:13" pos:end="103:60"><call pos:start="103:13" pos:end="103:60"><name pos:start="103:13" pos:end="103:19">strncpy</name><argument_list pos:start="103:20" pos:end="103:60">(<argument pos:start="103:21" pos:end="103:30"><expr pos:start="103:21" pos:end="103:30"><name pos:start="103:21" pos:end="103:30">codec_name</name></expr></argument>, <argument pos:start="103:33" pos:end="103:35"><expr pos:start="103:33" pos:end="103:35"><name pos:start="103:33" pos:end="103:35">val</name></expr></argument>, <argument pos:start="103:38" pos:end="103:59"><expr pos:start="103:38" pos:end="103:59"><sizeof pos:start="103:38" pos:end="103:55">sizeof<argument_list pos:start="103:44" pos:end="103:55">(<argument pos:start="103:45" pos:end="103:54"><expr pos:start="103:45" pos:end="103:54"><name pos:start="103:45" pos:end="103:54">codec_name</name></expr></argument>)</argument_list></sizeof> <operator pos:start="103:57" pos:end="103:57">-</operator> <literal type="number" pos:start="103:59" pos:end="103:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:39">(<expr pos:start="107:13" pos:end="107:38"><operator pos:start="107:13" pos:end="107:13">!</operator><call pos:start="107:14" pos:end="107:38"><name pos:start="107:14" pos:end="107:19">strcmp</name><argument_list pos:start="107:20" pos:end="107:38">(<argument pos:start="107:21" pos:end="107:23"><expr pos:start="107:21" pos:end="107:23"><name pos:start="107:21" pos:end="107:23">key</name></expr></argument>, <argument pos:start="107:26" pos:end="107:37"><expr pos:start="107:26" pos:end="107:37"><literal type="string" pos:start="107:26" pos:end="107:37">"HeaderSeed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:41" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:36">

            <expr_stmt pos:start="109:13" pos:end="109:65"><expr pos:start="109:13" pos:end="109:64"><call pos:start="109:13" pos:end="109:64"><name pos:start="109:13" pos:end="109:18">av_log</name><argument_list pos:start="109:19" pos:end="109:64">(<argument pos:start="109:20" pos:end="109:20"><expr pos:start="109:20" pos:end="109:20"><name pos:start="109:20" pos:end="109:20">s</name></expr></argument>, <argument pos:start="109:23" pos:end="109:34"><expr pos:start="109:23" pos:end="109:34"><name pos:start="109:23" pos:end="109:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="109:37" pos:end="109:58"><expr pos:start="109:37" pos:end="109:58"><literal type="string" pos:start="109:37" pos:end="109:58">"HeaderSeed is &lt;%s&gt;\n"</literal></expr></argument>, <argument pos:start="109:61" pos:end="109:63"><expr pos:start="109:61" pos:end="109:63"><name pos:start="109:61" pos:end="109:63">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:36"><expr pos:start="111:13" pos:end="111:35"><name pos:start="111:13" pos:end="111:23">header_seed</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <call pos:start="111:27" pos:end="111:35"><name pos:start="111:27" pos:end="111:30">atoi</name><argument_list pos:start="111:31" pos:end="111:35">(<argument pos:start="111:32" pos:end="111:34"><expr pos:start="111:32" pos:end="111:34"><name pos:start="111:32" pos:end="111:34">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="115:9" pos:end="135:9"><if pos:start="115:9" pos:end="135:9">if <condition pos:start="115:12" pos:end="115:38">(<expr pos:start="115:13" pos:end="115:37"><operator pos:start="115:13" pos:end="115:13">!</operator><call pos:start="115:14" pos:end="115:37"><name pos:start="115:14" pos:end="115:19">strcmp</name><argument_list pos:start="115:20" pos:end="115:37">(<argument pos:start="115:21" pos:end="115:23"><expr pos:start="115:21" pos:end="115:23"><name pos:start="115:21" pos:end="115:23">key</name></expr></argument>, <argument pos:start="115:26" pos:end="115:36"><expr pos:start="115:26" pos:end="115:36"><literal type="string" pos:start="115:26" pos:end="115:36">"HeaderKey"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:40" pos:end="135:9">{<block_content pos:start="117:13" pos:end="133:42"> <comment type="line" pos:start="115:42" pos:end="115:105">// this looks like "1234567890 1234567890 1234567890 1234567890"</comment>

            <expr_stmt pos:start="117:13" pos:end="117:64"><expr pos:start="117:13" pos:end="117:63"><call pos:start="117:13" pos:end="117:63"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="117:63">(<argument pos:start="117:20" pos:end="117:20"><expr pos:start="117:20" pos:end="117:20"><name pos:start="117:20" pos:end="117:20">s</name></expr></argument>, <argument pos:start="117:23" pos:end="117:34"><expr pos:start="117:23" pos:end="117:34"><name pos:start="117:23" pos:end="117:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="117:37" pos:end="117:57"><expr pos:start="117:37" pos:end="117:57"><literal type="string" pos:start="117:37" pos:end="117:57">"HeaderKey is &lt;%s&gt;\n"</literal></expr></argument>, <argument pos:start="117:60" pos:end="117:62"><expr pos:start="117:60" pos:end="117:62"><name pos:start="117:60" pos:end="117:62">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:120"><expr pos:start="119:13" pos:end="119:119"><call pos:start="119:13" pos:end="119:119"><name pos:start="119:13" pos:end="119:18">sscanf</name><argument_list pos:start="119:19" pos:end="119:119">(<argument pos:start="119:20" pos:end="119:22"><expr pos:start="119:20" pos:end="119:22"><name pos:start="119:20" pos:end="119:22">val</name></expr></argument>, <argument pos:start="119:25" pos:end="119:34"><expr pos:start="119:25" pos:end="119:34"><literal type="string" pos:start="119:25" pos:end="119:34">"%u%u%u%u"</literal></expr></argument>, <argument pos:start="119:37" pos:end="119:55"><expr pos:start="119:37" pos:end="119:55"><operator pos:start="119:37" pos:end="119:37">&amp;</operator><name pos:start="119:38" pos:end="119:55"><name pos:start="119:38" pos:end="119:52">header_key_part</name><index pos:start="119:53" pos:end="119:55">[<expr pos:start="119:54" pos:end="119:54"><literal type="number" pos:start="119:54" pos:end="119:54">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="119:58" pos:end="119:76"><expr pos:start="119:58" pos:end="119:76"><operator pos:start="119:58" pos:end="119:58">&amp;</operator><name pos:start="119:59" pos:end="119:76"><name pos:start="119:59" pos:end="119:73">header_key_part</name><index pos:start="119:74" pos:end="119:76">[<expr pos:start="119:75" pos:end="119:75"><literal type="number" pos:start="119:75" pos:end="119:75">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="119:79" pos:end="119:97"><expr pos:start="119:79" pos:end="119:97"><operator pos:start="119:79" pos:end="119:79">&amp;</operator><name pos:start="119:80" pos:end="119:97"><name pos:start="119:80" pos:end="119:94">header_key_part</name><index pos:start="119:95" pos:end="119:97">[<expr pos:start="119:96" pos:end="119:96"><literal type="number" pos:start="119:96" pos:end="119:96">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="119:100" pos:end="119:118"><expr pos:start="119:100" pos:end="119:118"><operator pos:start="119:100" pos:end="119:100">&amp;</operator><name pos:start="119:101" pos:end="119:118"><name pos:start="119:101" pos:end="119:115">header_key_part</name><index pos:start="119:116" pos:end="119:118">[<expr pos:start="119:117" pos:end="119:117"><literal type="number" pos:start="119:117" pos:end="119:117">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="121:13" pos:end="125:13">for <control pos:start="121:17" pos:end="121:41">(<init pos:start="121:18" pos:end="121:25"><expr pos:start="121:18" pos:end="121:24"><name pos:start="121:18" pos:end="121:20">idx</name> <operator pos:start="121:22" pos:end="121:22">=</operator> <literal type="number" pos:start="121:24" pos:end="121:24">0</literal></expr>;</init> <condition pos:start="121:27" pos:end="121:34"><expr pos:start="121:27" pos:end="121:33"><name pos:start="121:27" pos:end="121:29">idx</name> <operator pos:start="121:31" pos:end="121:31">&lt;</operator> <literal type="number" pos:start="121:33" pos:end="121:33">4</literal></expr>;</condition> <incr pos:start="121:36" pos:end="121:40"><expr pos:start="121:36" pos:end="121:40"><name pos:start="121:36" pos:end="121:38">idx</name><operator pos:start="121:39" pos:end="121:40">++</operator></expr></incr>)</control> <block pos:start="121:43" pos:end="125:13">{<block_content pos:start="123:17" pos:end="123:68">

                <expr_stmt pos:start="123:17" pos:end="123:68"><expr pos:start="123:17" pos:end="123:67"><call pos:start="123:17" pos:end="123:67"><name pos:start="123:17" pos:end="123:23">AV_WB32</name><argument_list pos:start="123:24" pos:end="123:67">(<argument pos:start="123:25" pos:end="123:44"><expr pos:start="123:25" pos:end="123:44"><operator pos:start="123:25" pos:end="123:25">&amp;</operator><name pos:start="123:26" pos:end="123:44"><name pos:start="123:26" pos:end="123:35">header_key</name><index pos:start="123:36" pos:end="123:44">[<expr pos:start="123:37" pos:end="123:43"><name pos:start="123:37" pos:end="123:39">idx</name> <operator pos:start="123:41" pos:end="123:41">*</operator> <literal type="number" pos:start="123:43" pos:end="123:43">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="123:47" pos:end="123:66"><expr pos:start="123:47" pos:end="123:66"><name pos:start="123:47" pos:end="123:66"><name pos:start="123:47" pos:end="123:61">header_key_part</name><index pos:start="123:62" pos:end="123:66">[<expr pos:start="123:63" pos:end="123:65"><name pos:start="123:63" pos:end="123:65">idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="123:70" pos:end="123:96">// convert each part to BE!</comment>

            </block_content>}</block></for>

            <expr_stmt pos:start="127:13" pos:end="127:63"><expr pos:start="127:13" pos:end="127:62"><call pos:start="127:13" pos:end="127:62"><name pos:start="127:13" pos:end="127:18">av_log</name><argument_list pos:start="127:19" pos:end="127:62">(<argument pos:start="127:20" pos:end="127:20"><expr pos:start="127:20" pos:end="127:20"><name pos:start="127:20" pos:end="127:20">s</name></expr></argument>, <argument pos:start="127:23" pos:end="127:34"><expr pos:start="127:23" pos:end="127:34"><name pos:start="127:23" pos:end="127:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="127:37" pos:end="127:61"><expr pos:start="127:37" pos:end="127:61"><literal type="string" pos:start="127:37" pos:end="127:61">"Processed HeaderKey is "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="129:13" pos:end="131:63">for <control pos:start="129:17" pos:end="129:36">(<init pos:start="129:18" pos:end="129:23"><expr pos:start="129:18" pos:end="129:22"><name pos:start="129:18" pos:end="129:18">i</name> <operator pos:start="129:20" pos:end="129:20">=</operator> <literal type="number" pos:start="129:22" pos:end="129:22">0</literal></expr>;</init> <condition pos:start="129:25" pos:end="129:31"><expr pos:start="129:25" pos:end="129:30"><name pos:start="129:25" pos:end="129:25">i</name> <operator pos:start="129:27" pos:end="129:27">&lt;</operator> <literal type="number" pos:start="129:29" pos:end="129:30">16</literal></expr>;</condition> <incr pos:start="129:33" pos:end="129:35"><expr pos:start="129:33" pos:end="129:35"><name pos:start="129:33" pos:end="129:33">i</name><operator pos:start="129:34" pos:end="129:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="131:17" pos:end="131:63"><block_content pos:start="131:17" pos:end="131:63">

                <expr_stmt pos:start="131:17" pos:end="131:63"><expr pos:start="131:17" pos:end="131:62"><call pos:start="131:17" pos:end="131:62"><name pos:start="131:17" pos:end="131:22">av_log</name><argument_list pos:start="131:23" pos:end="131:62">(<argument pos:start="131:24" pos:end="131:24"><expr pos:start="131:24" pos:end="131:24"><name pos:start="131:24" pos:end="131:24">s</name></expr></argument>, <argument pos:start="131:27" pos:end="131:38"><expr pos:start="131:27" pos:end="131:38"><name pos:start="131:27" pos:end="131:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="131:41" pos:end="131:46"><expr pos:start="131:41" pos:end="131:46"><literal type="string" pos:start="131:41" pos:end="131:46">"%02x"</literal></expr></argument>, <argument pos:start="131:49" pos:end="131:61"><expr pos:start="131:49" pos:end="131:61"><name pos:start="131:49" pos:end="131:61"><name pos:start="131:49" pos:end="131:58">header_key</name><index pos:start="131:59" pos:end="131:61">[<expr pos:start="131:60" pos:end="131:60"><name pos:start="131:60" pos:end="131:60">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="133:13" pos:end="133:42"><expr pos:start="133:13" pos:end="133:41"><call pos:start="133:13" pos:end="133:41"><name pos:start="133:13" pos:end="133:18">av_log</name><argument_list pos:start="133:19" pos:end="133:41">(<argument pos:start="133:20" pos:end="133:20"><expr pos:start="133:20" pos:end="133:20"><name pos:start="133:20" pos:end="133:20">s</name></expr></argument>, <argument pos:start="133:23" pos:end="133:34"><expr pos:start="133:23" pos:end="133:34"><name pos:start="133:23" pos:end="133:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="133:37" pos:end="133:40"><expr pos:start="133:37" pos:end="133:40"><literal type="string" pos:start="133:37" pos:end="133:40">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="141:5" pos:end="141:26">/* verify fixed key */</comment>

    <if_stmt pos:start="143:5" pos:end="149:5"><if pos:start="143:5" pos:end="149:5">if <condition pos:start="143:8" pos:end="143:34">(<expr pos:start="143:9" pos:end="143:33"><name pos:start="143:9" pos:end="143:27"><name pos:start="143:9" pos:end="143:9">c</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:27">aa_fixed_key_len</name></name> <operator pos:start="143:29" pos:end="143:30">!=</operator> <literal type="number" pos:start="143:32" pos:end="143:33">16</literal></expr>)</condition> <block pos:start="143:36" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:31">

        <expr_stmt pos:start="145:9" pos:end="145:78"><expr pos:start="145:9" pos:end="145:77"><call pos:start="145:9" pos:end="145:77"><name pos:start="145:9" pos:end="145:14">av_log</name><argument_list pos:start="145:15" pos:end="145:77">(<argument pos:start="145:16" pos:end="145:16"><expr pos:start="145:16" pos:end="145:16"><name pos:start="145:16" pos:end="145:16">s</name></expr></argument>, <argument pos:start="145:19" pos:end="145:30"><expr pos:start="145:19" pos:end="145:30"><name pos:start="145:19" pos:end="145:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="145:33" pos:end="145:76"><expr pos:start="145:33" pos:end="145:76"><literal type="string" pos:start="145:33" pos:end="145:76">"aa_fixed_key value needs to be 16 bytes!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="147:9" pos:end="147:31">return <expr pos:start="147:16" pos:end="147:30"><call pos:start="147:16" pos:end="147:30"><name pos:start="147:16" pos:end="147:22">AVERROR</name><argument_list pos:start="147:23" pos:end="147:30">(<argument pos:start="147:24" pos:end="147:29"><expr pos:start="147:24" pos:end="147:29"><name pos:start="147:24" pos:end="147:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:22">/* verify codec */</comment>

    <if_stmt pos:start="155:5" pos:end="161:5"><if pos:start="155:5" pos:end="161:5">if <condition pos:start="155:8" pos:end="155:67">(<expr pos:start="155:9" pos:end="155:66"><operator pos:start="155:9" pos:end="155:9">(</operator><name pos:start="155:10" pos:end="155:29"><name pos:start="155:10" pos:end="155:10">c</name><operator pos:start="155:11" pos:end="155:12">-&gt;</operator><name pos:start="155:13" pos:end="155:29">codec_second_size</name></name> <operator pos:start="155:31" pos:end="155:31">=</operator> <call pos:start="155:33" pos:end="155:59"><name pos:start="155:33" pos:end="155:47">get_second_size</name><argument_list pos:start="155:48" pos:end="155:59">(<argument pos:start="155:49" pos:end="155:58"><expr pos:start="155:49" pos:end="155:58"><name pos:start="155:49" pos:end="155:58">codec_name</name></expr></argument>)</argument_list></call><operator pos:start="155:60" pos:end="155:60">)</operator> <operator pos:start="155:62" pos:end="155:63">==</operator> <operator pos:start="155:65" pos:end="155:65">-</operator><literal type="number" pos:start="155:66" pos:end="155:66">1</literal></expr>)</condition> <block pos:start="155:69" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:31">

        <expr_stmt pos:start="157:9" pos:end="157:69"><expr pos:start="157:9" pos:end="157:68"><call pos:start="157:9" pos:end="157:68"><name pos:start="157:9" pos:end="157:14">av_log</name><argument_list pos:start="157:15" pos:end="157:68">(<argument pos:start="157:16" pos:end="157:16"><expr pos:start="157:16" pos:end="157:16"><name pos:start="157:16" pos:end="157:16">s</name></expr></argument>, <argument pos:start="157:19" pos:end="157:30"><expr pos:start="157:19" pos:end="157:30"><name pos:start="157:19" pos:end="157:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="157:33" pos:end="157:55"><expr pos:start="157:33" pos:end="157:55"><literal type="string" pos:start="157:33" pos:end="157:55">"unknown codec &lt;%s&gt;!\n"</literal></expr></argument>, <argument pos:start="157:58" pos:end="157:67"><expr pos:start="157:58" pos:end="157:67"><name pos:start="157:58" pos:end="157:67">codec_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="159:9" pos:end="159:31">return <expr pos:start="159:16" pos:end="159:30"><call pos:start="159:16" pos:end="159:30"><name pos:start="159:16" pos:end="159:22">AVERROR</name><argument_list pos:start="159:23" pos:end="159:30">(<argument pos:start="159:24" pos:end="159:29"><expr pos:start="159:24" pos:end="159:29"><name pos:start="159:24" pos:end="159:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="165:5" pos:end="165:35">/* decryption key derivation */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:32"><expr pos:start="167:5" pos:end="167:31"><name pos:start="167:5" pos:end="167:14"><name pos:start="167:5" pos:end="167:5">c</name><operator pos:start="167:6" pos:end="167:7">-&gt;</operator><name pos:start="167:8" pos:end="167:14">tea_ctx</name></name> <operator pos:start="167:16" pos:end="167:16">=</operator> <call pos:start="167:18" pos:end="167:31"><name pos:start="167:18" pos:end="167:29">av_tea_alloc</name><argument_list pos:start="167:30" pos:end="167:31">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="171:31"><if pos:start="169:5" pos:end="171:31">if <condition pos:start="169:8" pos:end="169:20">(<expr pos:start="169:9" pos:end="169:19"><operator pos:start="169:9" pos:end="169:9">!</operator><name pos:start="169:10" pos:end="169:19"><name pos:start="169:10" pos:end="169:10">c</name><operator pos:start="169:11" pos:end="169:12">-&gt;</operator><name pos:start="169:13" pos:end="169:19">tea_ctx</name></name></expr>)</condition><block type="pseudo" pos:start="171:9" pos:end="171:31"><block_content pos:start="171:9" pos:end="171:31">

        <return pos:start="171:9" pos:end="171:31">return <expr pos:start="171:16" pos:end="171:30"><call pos:start="171:16" pos:end="171:30"><name pos:start="171:16" pos:end="171:22">AVERROR</name><argument_list pos:start="171:23" pos:end="171:30">(<argument pos:start="171:24" pos:end="171:29"><expr pos:start="171:24" pos:end="171:29"><name pos:start="171:24" pos:end="171:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:49"><expr pos:start="173:5" pos:end="173:48"><call pos:start="173:5" pos:end="173:48"><name pos:start="173:5" pos:end="173:15">av_tea_init</name><argument_list pos:start="173:16" pos:end="173:48">(<argument pos:start="173:17" pos:end="173:26"><expr pos:start="173:17" pos:end="173:26"><name pos:start="173:17" pos:end="173:26"><name pos:start="173:17" pos:end="173:17">c</name><operator pos:start="173:18" pos:end="173:19">-&gt;</operator><name pos:start="173:20" pos:end="173:26">tea_ctx</name></name></expr></argument>, <argument pos:start="173:29" pos:end="173:43"><expr pos:start="173:29" pos:end="173:43"><name pos:start="173:29" pos:end="173:43"><name pos:start="173:29" pos:end="173:29">c</name><operator pos:start="173:30" pos:end="173:31">-&gt;</operator><name pos:start="173:32" pos:end="173:43">aa_fixed_key</name></name></expr></argument>, <argument pos:start="173:46" pos:end="173:47"><expr pos:start="173:46" pos:end="173:47"><literal type="number" pos:start="173:46" pos:end="173:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:30"><expr pos:start="175:5" pos:end="175:29"><name pos:start="175:5" pos:end="175:13"><name pos:start="175:5" pos:end="175:10">output</name><index pos:start="175:11" pos:end="175:13">[<expr pos:start="175:12" pos:end="175:12"><literal type="number" pos:start="175:12" pos:end="175:12">0</literal></expr>]</index></name> <operator pos:start="175:15" pos:end="175:15">=</operator> <name pos:start="175:17" pos:end="175:25"><name pos:start="175:17" pos:end="175:22">output</name><index pos:start="175:23" pos:end="175:25">[<expr pos:start="175:24" pos:end="175:24"><literal type="number" pos:start="175:24" pos:end="175:24">1</literal></expr>]</index></name> <operator pos:start="175:27" pos:end="175:27">=</operator> <literal type="number" pos:start="175:29" pos:end="175:29">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="175:32" pos:end="175:61">// purely for padding purposes</comment>

    <expr_stmt pos:start="177:5" pos:end="177:39"><expr pos:start="177:5" pos:end="177:38"><call pos:start="177:5" pos:end="177:38"><name pos:start="177:5" pos:end="177:10">memcpy</name><argument_list pos:start="177:11" pos:end="177:38">(<argument pos:start="177:12" pos:end="177:21"><expr pos:start="177:12" pos:end="177:21"><name pos:start="177:12" pos:end="177:17">output</name> <operator pos:start="177:19" pos:end="177:19">+</operator> <literal type="number" pos:start="177:21" pos:end="177:21">2</literal></expr></argument>, <argument pos:start="177:24" pos:end="177:33"><expr pos:start="177:24" pos:end="177:33"><name pos:start="177:24" pos:end="177:33">header_key</name></expr></argument>, <argument pos:start="177:36" pos:end="177:37"><expr pos:start="177:36" pos:end="177:37"><literal type="number" pos:start="177:36" pos:end="177:37">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:12"><expr pos:start="179:5" pos:end="179:11"><name pos:start="179:5" pos:end="179:7">idx</name> <operator pos:start="179:9" pos:end="179:9">=</operator> <literal type="number" pos:start="179:11" pos:end="179:11">0</literal></expr>;</expr_stmt>

    <for pos:start="181:5" pos:end="197:5">for <control pos:start="181:9" pos:end="181:27">(<init pos:start="181:10" pos:end="181:15"><expr pos:start="181:10" pos:end="181:14"><name pos:start="181:10" pos:end="181:10">i</name> <operator pos:start="181:12" pos:end="181:12">=</operator> <literal type="number" pos:start="181:14" pos:end="181:14">0</literal></expr>;</init> <condition pos:start="181:17" pos:end="181:22"><expr pos:start="181:17" pos:end="181:21"><name pos:start="181:17" pos:end="181:17">i</name> <operator pos:start="181:19" pos:end="181:19">&lt;</operator> <literal type="number" pos:start="181:21" pos:end="181:21">3</literal></expr>;</condition> <incr pos:start="181:24" pos:end="181:26"><expr pos:start="181:24" pos:end="181:26"><name pos:start="181:24" pos:end="181:24">i</name><operator pos:start="181:25" pos:end="181:26">++</operator></expr></incr>)</control> <block pos:start="181:29" pos:end="197:5">{<block_content pos:start="183:9" pos:end="195:9"> <comment type="line" pos:start="181:31" pos:end="181:68">// TEA CBC with weird mixed endianness</comment>

        <expr_stmt pos:start="183:9" pos:end="183:34"><expr pos:start="183:9" pos:end="183:33"><call pos:start="183:9" pos:end="183:33"><name pos:start="183:9" pos:end="183:15">AV_WB32</name><argument_list pos:start="183:16" pos:end="183:33">(<argument pos:start="183:17" pos:end="183:19"><expr pos:start="183:17" pos:end="183:19"><name pos:start="183:17" pos:end="183:19">src</name></expr></argument>, <argument pos:start="183:22" pos:end="183:32"><expr pos:start="183:22" pos:end="183:32"><name pos:start="183:22" pos:end="183:32">header_seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:42"><expr pos:start="185:9" pos:end="185:41"><call pos:start="185:9" pos:end="185:41"><name pos:start="185:9" pos:end="185:15">AV_WB32</name><argument_list pos:start="185:16" pos:end="185:41">(<argument pos:start="185:17" pos:end="185:23"><expr pos:start="185:17" pos:end="185:23"><name pos:start="185:17" pos:end="185:19">src</name> <operator pos:start="185:21" pos:end="185:21">+</operator> <literal type="number" pos:start="185:23" pos:end="185:23">4</literal></expr></argument>, <argument pos:start="185:26" pos:end="185:40"><expr pos:start="185:26" pos:end="185:40"><name pos:start="185:26" pos:end="185:36">header_seed</name> <operator pos:start="185:38" pos:end="185:38">+</operator> <literal type="number" pos:start="185:40" pos:end="185:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:25"><expr pos:start="187:9" pos:end="187:24"><name pos:start="187:9" pos:end="187:19">header_seed</name> <operator pos:start="187:21" pos:end="187:22">+=</operator> <literal type="number" pos:start="187:24" pos:end="187:24">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:55"><expr pos:start="189:9" pos:end="189:54"><call pos:start="189:9" pos:end="189:54"><name pos:start="189:9" pos:end="189:20">av_tea_crypt</name><argument_list pos:start="189:21" pos:end="189:54">(<argument pos:start="189:22" pos:end="189:31"><expr pos:start="189:22" pos:end="189:31"><name pos:start="189:22" pos:end="189:31"><name pos:start="189:22" pos:end="189:22">c</name><operator pos:start="189:23" pos:end="189:24">-&gt;</operator><name pos:start="189:25" pos:end="189:31">tea_ctx</name></name></expr></argument>, <argument pos:start="189:34" pos:end="189:36"><expr pos:start="189:34" pos:end="189:36"><name pos:start="189:34" pos:end="189:36">dst</name></expr></argument>, <argument pos:start="189:39" pos:end="189:41"><expr pos:start="189:39" pos:end="189:41"><name pos:start="189:39" pos:end="189:41">src</name></expr></argument>, <argument pos:start="189:44" pos:end="189:44"><expr pos:start="189:44" pos:end="189:44"><literal type="number" pos:start="189:44" pos:end="189:44">1</literal></expr></argument>, <argument pos:start="189:47" pos:end="189:50"><expr pos:start="189:47" pos:end="189:50"><name pos:start="189:47" pos:end="189:50">NULL</name></expr></argument>, <argument pos:start="189:53" pos:end="189:53"><expr pos:start="189:53" pos:end="189:53"><literal type="number" pos:start="189:53" pos:end="189:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="189:57" pos:end="189:74">// TEA ECB encrypt</comment>

        <for pos:start="191:9" pos:end="195:9">for <control pos:start="191:13" pos:end="191:65">(<init pos:start="191:14" pos:end="191:19"><expr pos:start="191:14" pos:end="191:18"><name pos:start="191:14" pos:end="191:14">j</name> <operator pos:start="191:16" pos:end="191:16">=</operator> <literal type="number" pos:start="191:18" pos:end="191:18">0</literal></expr>;</init> <condition pos:start="191:21" pos:end="191:51"><expr pos:start="191:21" pos:end="191:50"><name pos:start="191:21" pos:end="191:21">j</name> <operator pos:start="191:23" pos:end="191:23">&lt;</operator> <name pos:start="191:25" pos:end="191:38">TEA_BLOCK_SIZE</name> <operator pos:start="191:40" pos:end="191:41">&amp;&amp;</operator> <name pos:start="191:43" pos:end="191:45">idx</name> <operator pos:start="191:47" pos:end="191:47">&lt;</operator> <literal type="number" pos:start="191:49" pos:end="191:50">18</literal></expr>;</condition> <incr pos:start="191:53" pos:end="191:64"><expr pos:start="191:53" pos:end="191:56"><name pos:start="191:53" pos:end="191:53">j</name><operator pos:start="191:54" pos:end="191:55">+=</operator><literal type="number" pos:start="191:56" pos:end="191:56">1</literal></expr><operator pos:start="191:57" pos:end="191:57">,</operator> <expr pos:start="191:59" pos:end="191:64"><name pos:start="191:59" pos:end="191:61">idx</name><operator pos:start="191:62" pos:end="191:63">+=</operator><literal type="number" pos:start="191:64" pos:end="191:64">1</literal></expr></incr>)</control> <block pos:start="191:67" pos:end="195:9">{<block_content pos:start="193:13" pos:end="193:47">

            <expr_stmt pos:start="193:13" pos:end="193:47"><expr pos:start="193:13" pos:end="193:46"><name pos:start="193:13" pos:end="193:23"><name pos:start="193:13" pos:end="193:18">output</name><index pos:start="193:19" pos:end="193:23">[<expr pos:start="193:20" pos:end="193:22"><name pos:start="193:20" pos:end="193:22">idx</name></expr>]</index></name> <operator pos:start="193:25" pos:end="193:25">=</operator> <name pos:start="193:27" pos:end="193:37"><name pos:start="193:27" pos:end="193:32">output</name><index pos:start="193:33" pos:end="193:37">[<expr pos:start="193:34" pos:end="193:36"><name pos:start="193:34" pos:end="193:36">idx</name></expr>]</index></name> <operator pos:start="193:39" pos:end="193:39">^</operator> <name pos:start="193:41" pos:end="193:46"><name pos:start="193:41" pos:end="193:43">dst</name><index pos:start="193:44" pos:end="193:46">[<expr pos:start="193:45" pos:end="193:45"><name pos:start="193:45" pos:end="193:45">j</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <expr_stmt pos:start="199:5" pos:end="199:40"><expr pos:start="199:5" pos:end="199:39"><call pos:start="199:5" pos:end="199:39"><name pos:start="199:5" pos:end="199:10">memcpy</name><argument_list pos:start="199:11" pos:end="199:39">(<argument pos:start="199:12" pos:end="199:22"><expr pos:start="199:12" pos:end="199:22"><name pos:start="199:12" pos:end="199:22"><name pos:start="199:12" pos:end="199:12">c</name><operator pos:start="199:13" pos:end="199:14">-&gt;</operator><name pos:start="199:15" pos:end="199:22">file_key</name></name></expr></argument>, <argument pos:start="199:25" pos:end="199:34"><expr pos:start="199:25" pos:end="199:34"><name pos:start="199:25" pos:end="199:30">output</name> <operator pos:start="199:32" pos:end="199:32">+</operator> <literal type="number" pos:start="199:34" pos:end="199:34">2</literal></expr></argument>, <argument pos:start="199:37" pos:end="199:38"><expr pos:start="199:37" pos:end="199:38"><literal type="number" pos:start="199:37" pos:end="199:38">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="199:42" pos:end="199:72">// skip first 2 bytes of output</comment>

    <expr_stmt pos:start="201:5" pos:end="201:44"><expr pos:start="201:5" pos:end="201:43"><call pos:start="201:5" pos:end="201:43"><name pos:start="201:5" pos:end="201:10">av_log</name><argument_list pos:start="201:11" pos:end="201:43">(<argument pos:start="201:12" pos:end="201:12"><expr pos:start="201:12" pos:end="201:12"><name pos:start="201:12" pos:end="201:12">s</name></expr></argument>, <argument pos:start="201:15" pos:end="201:26"><expr pos:start="201:15" pos:end="201:26"><name pos:start="201:15" pos:end="201:26">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="201:29" pos:end="201:42"><expr pos:start="201:29" pos:end="201:42"><literal type="string" pos:start="201:29" pos:end="201:42">"File key is "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="203:5" pos:end="205:56">for <control pos:start="203:9" pos:end="203:28">(<init pos:start="203:10" pos:end="203:15"><expr pos:start="203:10" pos:end="203:14"><name pos:start="203:10" pos:end="203:10">i</name> <operator pos:start="203:12" pos:end="203:12">=</operator> <literal type="number" pos:start="203:14" pos:end="203:14">0</literal></expr>;</init> <condition pos:start="203:17" pos:end="203:23"><expr pos:start="203:17" pos:end="203:22"><name pos:start="203:17" pos:end="203:17">i</name> <operator pos:start="203:19" pos:end="203:19">&lt;</operator> <literal type="number" pos:start="203:21" pos:end="203:22">16</literal></expr>;</condition> <incr pos:start="203:25" pos:end="203:27"><expr pos:start="203:25" pos:end="203:27"><name pos:start="203:25" pos:end="203:25">i</name><operator pos:start="203:26" pos:end="203:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="205:9" pos:end="205:56"><block_content pos:start="205:9" pos:end="205:56">

        <expr_stmt pos:start="205:9" pos:end="205:56"><expr pos:start="205:9" pos:end="205:55"><call pos:start="205:9" pos:end="205:55"><name pos:start="205:9" pos:end="205:14">av_log</name><argument_list pos:start="205:15" pos:end="205:55">(<argument pos:start="205:16" pos:end="205:16"><expr pos:start="205:16" pos:end="205:16"><name pos:start="205:16" pos:end="205:16">s</name></expr></argument>, <argument pos:start="205:19" pos:end="205:30"><expr pos:start="205:19" pos:end="205:30"><name pos:start="205:19" pos:end="205:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="205:33" pos:end="205:38"><expr pos:start="205:33" pos:end="205:38"><literal type="string" pos:start="205:33" pos:end="205:38">"%02x"</literal></expr></argument>, <argument pos:start="205:41" pos:end="205:54"><expr pos:start="205:41" pos:end="205:54"><name pos:start="205:41" pos:end="205:54"><name pos:start="205:41" pos:end="205:41">c</name><operator pos:start="205:42" pos:end="205:43">-&gt;</operator><name pos:start="205:44" pos:end="205:51">file_key</name><index pos:start="205:52" pos:end="205:54">[<expr pos:start="205:53" pos:end="205:53"><name pos:start="205:53" pos:end="205:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="207:5" pos:end="207:34"><expr pos:start="207:5" pos:end="207:33"><call pos:start="207:5" pos:end="207:33"><name pos:start="207:5" pos:end="207:10">av_log</name><argument_list pos:start="207:11" pos:end="207:33">(<argument pos:start="207:12" pos:end="207:12"><expr pos:start="207:12" pos:end="207:12"><name pos:start="207:12" pos:end="207:12">s</name></expr></argument>, <argument pos:start="207:15" pos:end="207:26"><expr pos:start="207:15" pos:end="207:26"><name pos:start="207:15" pos:end="207:26">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="207:29" pos:end="207:32"><expr pos:start="207:29" pos:end="207:32"><literal type="string" pos:start="207:29" pos:end="207:32">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:23">/* decoder setup */</comment>

    <expr_stmt pos:start="213:5" pos:end="213:38"><expr pos:start="213:5" pos:end="213:37"><name pos:start="213:5" pos:end="213:6">st</name> <operator pos:start="213:8" pos:end="213:8">=</operator> <call pos:start="213:10" pos:end="213:37"><name pos:start="213:10" pos:end="213:28">avformat_new_stream</name><argument_list pos:start="213:29" pos:end="213:37">(<argument pos:start="213:30" pos:end="213:30"><expr pos:start="213:30" pos:end="213:30"><name pos:start="213:30" pos:end="213:30">s</name></expr></argument>, <argument pos:start="213:33" pos:end="213:36"><expr pos:start="213:33" pos:end="213:36"><name pos:start="213:33" pos:end="213:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="215:5" pos:end="221:5"><if pos:start="215:5" pos:end="221:5">if <condition pos:start="215:8" pos:end="215:12">(<expr pos:start="215:9" pos:end="215:11"><operator pos:start="215:9" pos:end="215:9">!</operator><name pos:start="215:10" pos:end="215:11">st</name></expr>)</condition> <block pos:start="215:14" pos:end="221:5">{<block_content pos:start="217:9" pos:end="219:31">

        <expr_stmt pos:start="217:9" pos:end="217:30"><expr pos:start="217:9" pos:end="217:29"><call pos:start="217:9" pos:end="217:29"><name pos:start="217:9" pos:end="217:16">av_freep</name><argument_list pos:start="217:17" pos:end="217:29">(<argument pos:start="217:18" pos:end="217:28"><expr pos:start="217:18" pos:end="217:28"><operator pos:start="217:18" pos:end="217:18">&amp;</operator><name pos:start="217:19" pos:end="217:28"><name pos:start="217:19" pos:end="217:19">c</name><operator pos:start="217:20" pos:end="217:21">-&gt;</operator><name pos:start="217:22" pos:end="217:28">tea_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="219:9" pos:end="219:31">return <expr pos:start="219:16" pos:end="219:30"><call pos:start="219:16" pos:end="219:30"><name pos:start="219:16" pos:end="219:22">AVERROR</name><argument_list pos:start="219:23" pos:end="219:30">(<argument pos:start="219:24" pos:end="219:29"><expr pos:start="219:24" pos:end="219:29"><name pos:start="219:24" pos:end="219:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:47"><expr pos:start="223:5" pos:end="223:46"><name pos:start="223:5" pos:end="223:25"><name pos:start="223:5" pos:end="223:6">st</name><operator pos:start="223:7" pos:end="223:8">-&gt;</operator><name pos:start="223:9" pos:end="223:13">codec</name><operator pos:start="223:14" pos:end="223:15">-&gt;</operator><name pos:start="223:16" pos:end="223:25">codec_type</name></name> <operator pos:start="223:27" pos:end="223:27">=</operator> <name pos:start="223:29" pos:end="223:46">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="255:5"><if pos:start="225:5" pos:end="235:5">if <condition pos:start="225:8" pos:end="225:37">(<expr pos:start="225:9" pos:end="225:36"><operator pos:start="225:9" pos:end="225:9">!</operator><call pos:start="225:10" pos:end="225:36"><name pos:start="225:10" pos:end="225:15">strcmp</name><argument_list pos:start="225:16" pos:end="225:36">(<argument pos:start="225:17" pos:end="225:26"><expr pos:start="225:17" pos:end="225:26"><name pos:start="225:17" pos:end="225:26">codec_name</name></expr></argument>, <argument pos:start="225:29" pos:end="225:35"><expr pos:start="225:29" pos:end="225:35"><literal type="string" pos:start="225:29" pos:end="225:35">"mp332"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:39" pos:end="235:5">{<block_content pos:start="227:9" pos:end="233:27">

        <expr_stmt pos:start="227:9" pos:end="227:46"><expr pos:start="227:9" pos:end="227:45"><name pos:start="227:9" pos:end="227:27"><name pos:start="227:9" pos:end="227:10">st</name><operator pos:start="227:11" pos:end="227:12">-&gt;</operator><name pos:start="227:13" pos:end="227:17">codec</name><operator pos:start="227:18" pos:end="227:19">-&gt;</operator><name pos:start="227:20" pos:end="227:27">codec_id</name></name> <operator pos:start="227:29" pos:end="227:29">=</operator> <name pos:start="227:31" pos:end="227:45">AV_CODEC_ID_MP3</name></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:39"><expr pos:start="229:9" pos:end="229:38"><name pos:start="229:9" pos:end="229:30"><name pos:start="229:9" pos:end="229:10">st</name><operator pos:start="229:11" pos:end="229:12">-&gt;</operator><name pos:start="229:13" pos:end="229:17">codec</name><operator pos:start="229:18" pos:end="229:19">-&gt;</operator><name pos:start="229:20" pos:end="229:30">sample_rate</name></name> <operator pos:start="229:32" pos:end="229:32">=</operator> <literal type="number" pos:start="229:34" pos:end="229:38">22050</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:51"><expr pos:start="231:9" pos:end="231:50"><name pos:start="231:9" pos:end="231:24"><name pos:start="231:9" pos:end="231:10">st</name><operator pos:start="231:11" pos:end="231:12">-&gt;</operator><name pos:start="231:13" pos:end="231:24">need_parsing</name></name> <operator pos:start="231:26" pos:end="231:26">=</operator> <name pos:start="231:28" pos:end="231:50">AVSTREAM_PARSE_FULL_RAW</name></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:27"><expr pos:start="233:9" pos:end="233:26"><name pos:start="233:9" pos:end="233:22"><name pos:start="233:9" pos:end="233:10">st</name><operator pos:start="233:11" pos:end="233:12">-&gt;</operator><name pos:start="233:13" pos:end="233:22">start_time</name></name> <operator pos:start="233:24" pos:end="233:24">=</operator> <literal type="number" pos:start="233:26" pos:end="233:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="235:7" pos:end="245:5">else if <condition pos:start="235:15" pos:end="235:46">(<expr pos:start="235:16" pos:end="235:45"><operator pos:start="235:16" pos:end="235:16">!</operator><call pos:start="235:17" pos:end="235:45"><name pos:start="235:17" pos:end="235:22">strcmp</name><argument_list pos:start="235:23" pos:end="235:45">(<argument pos:start="235:24" pos:end="235:33"><expr pos:start="235:24" pos:end="235:33"><name pos:start="235:24" pos:end="235:33">codec_name</name></expr></argument>, <argument pos:start="235:36" pos:end="235:44"><expr pos:start="235:36" pos:end="235:44"><literal type="string" pos:start="235:36" pos:end="235:44">"acelp85"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="235:48" pos:end="245:5">{<block_content pos:start="237:9" pos:end="243:38">

        <expr_stmt pos:start="237:9" pos:end="237:47"><expr pos:start="237:9" pos:end="237:46"><name pos:start="237:9" pos:end="237:27"><name pos:start="237:9" pos:end="237:10">st</name><operator pos:start="237:11" pos:end="237:12">-&gt;</operator><name pos:start="237:13" pos:end="237:17">codec</name><operator pos:start="237:18" pos:end="237:19">-&gt;</operator><name pos:start="237:20" pos:end="237:27">codec_id</name></name> <operator pos:start="237:29" pos:end="237:29">=</operator> <name pos:start="237:31" pos:end="237:46">AV_CODEC_ID_SIPR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:36"><expr pos:start="239:9" pos:end="239:35"><name pos:start="239:9" pos:end="239:30"><name pos:start="239:9" pos:end="239:10">st</name><operator pos:start="239:11" pos:end="239:12">-&gt;</operator><name pos:start="239:13" pos:end="239:17">codec</name><operator pos:start="239:18" pos:end="239:19">-&gt;</operator><name pos:start="239:20" pos:end="239:30">block_align</name></name> <operator pos:start="239:32" pos:end="239:32">=</operator> <literal type="number" pos:start="239:34" pos:end="239:35">19</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:32"><expr pos:start="241:9" pos:end="241:31"><name pos:start="241:9" pos:end="241:27"><name pos:start="241:9" pos:end="241:10">st</name><operator pos:start="241:11" pos:end="241:12">-&gt;</operator><name pos:start="241:13" pos:end="241:17">codec</name><operator pos:start="241:18" pos:end="241:19">-&gt;</operator><name pos:start="241:20" pos:end="241:27">channels</name></name> <operator pos:start="241:29" pos:end="241:29">=</operator> <literal type="number" pos:start="241:31" pos:end="241:31">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:38"><expr pos:start="243:9" pos:end="243:37"><name pos:start="243:9" pos:end="243:30"><name pos:start="243:9" pos:end="243:10">st</name><operator pos:start="243:11" pos:end="243:12">-&gt;</operator><name pos:start="243:13" pos:end="243:17">codec</name><operator pos:start="243:18" pos:end="243:19">-&gt;</operator><name pos:start="243:20" pos:end="243:30">sample_rate</name></name> <operator pos:start="243:32" pos:end="243:32">=</operator> <literal type="number" pos:start="243:34" pos:end="243:37">8500</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="245:7" pos:end="255:5">else if <condition pos:start="245:15" pos:end="245:46">(<expr pos:start="245:16" pos:end="245:45"><operator pos:start="245:16" pos:end="245:16">!</operator><call pos:start="245:17" pos:end="245:45"><name pos:start="245:17" pos:end="245:22">strcmp</name><argument_list pos:start="245:23" pos:end="245:45">(<argument pos:start="245:24" pos:end="245:33"><expr pos:start="245:24" pos:end="245:33"><name pos:start="245:24" pos:end="245:33">codec_name</name></expr></argument>, <argument pos:start="245:36" pos:end="245:44"><expr pos:start="245:36" pos:end="245:44"><literal type="string" pos:start="245:36" pos:end="245:44">"acelp16"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="245:48" pos:end="255:5">{<block_content pos:start="247:9" pos:end="253:39">

        <expr_stmt pos:start="247:9" pos:end="247:47"><expr pos:start="247:9" pos:end="247:46"><name pos:start="247:9" pos:end="247:27"><name pos:start="247:9" pos:end="247:10">st</name><operator pos:start="247:11" pos:end="247:12">-&gt;</operator><name pos:start="247:13" pos:end="247:17">codec</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:27">codec_id</name></name> <operator pos:start="247:29" pos:end="247:29">=</operator> <name pos:start="247:31" pos:end="247:46">AV_CODEC_ID_SIPR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:36"><expr pos:start="249:9" pos:end="249:35"><name pos:start="249:9" pos:end="249:30"><name pos:start="249:9" pos:end="249:10">st</name><operator pos:start="249:11" pos:end="249:12">-&gt;</operator><name pos:start="249:13" pos:end="249:17">codec</name><operator pos:start="249:18" pos:end="249:19">-&gt;</operator><name pos:start="249:20" pos:end="249:30">block_align</name></name> <operator pos:start="249:32" pos:end="249:32">=</operator> <literal type="number" pos:start="249:34" pos:end="249:35">20</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:32"><expr pos:start="251:9" pos:end="251:31"><name pos:start="251:9" pos:end="251:27"><name pos:start="251:9" pos:end="251:10">st</name><operator pos:start="251:11" pos:end="251:12">-&gt;</operator><name pos:start="251:13" pos:end="251:17">codec</name><operator pos:start="251:18" pos:end="251:19">-&gt;</operator><name pos:start="251:20" pos:end="251:27">channels</name></name> <operator pos:start="251:29" pos:end="251:29">=</operator> <literal type="number" pos:start="251:31" pos:end="251:31">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:39"><expr pos:start="253:9" pos:end="253:38"><name pos:start="253:9" pos:end="253:30"><name pos:start="253:9" pos:end="253:10">st</name><operator pos:start="253:11" pos:end="253:12">-&gt;</operator><name pos:start="253:13" pos:end="253:17">codec</name><operator pos:start="253:18" pos:end="253:19">-&gt;</operator><name pos:start="253:20" pos:end="253:30">sample_rate</name></name> <operator pos:start="253:32" pos:end="253:32">=</operator> <literal type="number" pos:start="253:34" pos:end="253:38">16000</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="259:5" pos:end="259:51">/* determine, and jump to audio start offset */</comment>

    <for pos:start="261:5" pos:end="273:5">for <control pos:start="261:9" pos:end="261:34">(<init pos:start="261:10" pos:end="261:15"><expr pos:start="261:10" pos:end="261:14"><name pos:start="261:10" pos:end="261:10">i</name> <operator pos:start="261:12" pos:end="261:12">=</operator> <literal type="number" pos:start="261:14" pos:end="261:14">1</literal></expr>;</init> <condition pos:start="261:17" pos:end="261:29"><expr pos:start="261:17" pos:end="261:28"><name pos:start="261:17" pos:end="261:17">i</name> <operator pos:start="261:19" pos:end="261:19">&lt;</operator> <name pos:start="261:21" pos:end="261:28">toc_size</name></expr>;</condition> <incr pos:start="261:31" pos:end="261:33"><expr pos:start="261:31" pos:end="261:33"><name pos:start="261:31" pos:end="261:31">i</name><operator pos:start="261:32" pos:end="261:33">++</operator></expr></incr>)</control> <block pos:start="261:36" pos:end="273:5">{<block_content pos:start="263:9" pos:end="271:9"> <comment type="line" pos:start="261:38" pos:end="261:61">// skip the first entry!</comment>

        <expr_stmt pos:start="263:9" pos:end="263:35"><expr pos:start="263:9" pos:end="263:34"><name pos:start="263:9" pos:end="263:20">current_size</name> <operator pos:start="263:22" pos:end="263:22">=</operator> <name pos:start="263:24" pos:end="263:29"><name pos:start="263:24" pos:end="263:26">TOC</name><index pos:start="263:27" pos:end="263:29">[<expr pos:start="263:28" pos:end="263:28"><name pos:start="263:28" pos:end="263:28">i</name></expr>]</index></name><operator pos:start="263:30" pos:end="263:30">.</operator><name pos:start="263:31" pos:end="263:34">size</name></expr>;</expr_stmt>

        <if_stmt pos:start="265:9" pos:end="271:9"><if pos:start="265:9" pos:end="271:9">if <condition pos:start="265:12" pos:end="265:40">(<expr pos:start="265:13" pos:end="265:39"><name pos:start="265:13" pos:end="265:24">current_size</name> <operator pos:start="265:26" pos:end="265:26">&gt;</operator> <name pos:start="265:28" pos:end="265:39">largest_size</name></expr>)</condition> <block pos:start="265:42" pos:end="271:9">{<block_content pos:start="267:13" pos:end="269:40">

            <expr_stmt pos:start="267:13" pos:end="267:28"><expr pos:start="267:13" pos:end="267:27"><name pos:start="267:13" pos:end="267:23">largest_idx</name> <operator pos:start="267:25" pos:end="267:25">=</operator> <name pos:start="267:27" pos:end="267:27">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="269:40"><expr pos:start="269:13" pos:end="269:39"><name pos:start="269:13" pos:end="269:24">largest_size</name> <operator pos:start="269:26" pos:end="269:26">=</operator> <name pos:start="269:28" pos:end="269:39">current_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="275:5" pos:end="275:36"><expr pos:start="275:5" pos:end="275:35"><name pos:start="275:5" pos:end="275:9">start</name> <operator pos:start="275:11" pos:end="275:11">=</operator> <name pos:start="275:13" pos:end="275:28"><name pos:start="275:13" pos:end="275:15">TOC</name><index pos:start="275:16" pos:end="275:28">[<expr pos:start="275:17" pos:end="275:27"><name pos:start="275:17" pos:end="275:27">largest_idx</name></expr>]</index></name><operator pos:start="275:29" pos:end="275:29">.</operator><name pos:start="275:30" pos:end="275:35">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:35"><expr pos:start="277:5" pos:end="277:34"><call pos:start="277:5" pos:end="277:34"><name pos:start="277:5" pos:end="277:13">avio_seek</name><argument_list pos:start="277:14" pos:end="277:34">(<argument pos:start="277:15" pos:end="277:16"><expr pos:start="277:15" pos:end="277:16"><name pos:start="277:15" pos:end="277:16">pb</name></expr></argument>, <argument pos:start="277:19" pos:end="277:23"><expr pos:start="277:19" pos:end="277:23"><name pos:start="277:19" pos:end="277:23">start</name></expr></argument>, <argument pos:start="277:26" pos:end="277:33"><expr pos:start="277:26" pos:end="277:33"><name pos:start="277:26" pos:end="277:33">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:32"><expr pos:start="279:5" pos:end="279:31"><name pos:start="279:5" pos:end="279:27"><name pos:start="279:5" pos:end="279:5">c</name><operator pos:start="279:6" pos:end="279:7">-&gt;</operator><name pos:start="279:8" pos:end="279:27">current_chapter_size</name></name> <operator pos:start="279:29" pos:end="279:29">=</operator> <literal type="number" pos:start="279:31" pos:end="279:31">0</literal></expr>;</expr_stmt>



    <return pos:start="283:5" pos:end="283:13">return <expr pos:start="283:12" pos:end="283:12"><literal type="number" pos:start="283:12" pos:end="283:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
