<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14131.c" pos:tabs="8"><function pos:start="1:1" pos:end="539:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">decode_vop_header</name><parameter_list pos:start="1:29" pos:end="1:69">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:44">Mpeg4DecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:64">GetBitContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">gb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="539:1">{<block_content pos:start="5:5" pos:end="537:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MpegEncContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:31">= <expr pos:start="5:25" pos:end="5:31"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:31"><name pos:start="5:26" pos:end="5:28">ctx</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:31">m</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">time_incr</name></decl>, <decl pos:start="7:20" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:33">time_increment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:15">pts</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:55"><expr pos:start="13:5" pos:end="13:54"><name pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:16">pict_type</name></name> <operator pos:start="13:18" pos:end="13:18">=</operator> <call pos:start="13:20" pos:end="13:34"><name pos:start="13:20" pos:end="13:27">get_bits</name><argument_list pos:start="13:28" pos:end="13:34">(<argument pos:start="13:29" pos:end="13:30"><expr pos:start="13:29" pos:end="13:30"><name pos:start="13:29" pos:end="13:30">gb</name></expr></argument>, <argument pos:start="13:33" pos:end="13:33"><expr pos:start="13:33" pos:end="13:33"><literal type="number" pos:start="13:33" pos:end="13:33">2</literal></expr></argument>)</argument_list></call> <operator pos:start="13:36" pos:end="13:36">+</operator> <name pos:start="13:38" pos:end="13:54">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>        <comment type="block" pos:start="13:64" pos:end="13:93">/* pict type: I = 0 , P = 1 */</comment>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="17:79">(<expr pos:start="15:9" pos:end="17:78"><name pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:20">pict_type</name></name> <operator pos:start="15:22" pos:end="15:23">==</operator> <name pos:start="15:25" pos:end="15:41">AV_PICTURE_TYPE_B</name> <operator pos:start="15:43" pos:end="15:44">&amp;&amp;</operator> <name pos:start="15:46" pos:end="15:57"><name pos:start="15:46" pos:end="15:46">s</name><operator pos:start="15:47" pos:end="15:48">-&gt;</operator><name pos:start="15:49" pos:end="15:57">low_delay</name></name> <operator pos:start="15:59" pos:end="15:60">&amp;&amp;</operator>

        <name pos:start="17:9" pos:end="17:35"><name pos:start="17:9" pos:end="17:11">ctx</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:35">vol_control_parameters</name></name> <operator pos:start="17:37" pos:end="17:38">==</operator> <literal type="number" pos:start="17:40" pos:end="17:40">0</literal> <operator pos:start="17:42" pos:end="17:43">&amp;&amp;</operator> <operator pos:start="17:45" pos:end="17:45">!</operator><operator pos:start="17:46" pos:end="17:46">(</operator><name pos:start="17:47" pos:end="17:54"><name pos:start="17:47" pos:end="17:47">s</name><operator pos:start="17:48" pos:end="17:49">-&gt;</operator><name pos:start="17:50" pos:end="17:54">flags</name></name> <operator pos:start="17:56" pos:end="17:56">&amp;</operator> <name pos:start="17:58" pos:end="17:77">CODEC_FLAG_LOW_DELAY</name><operator pos:start="17:78" pos:end="17:78">)</operator></expr>)</condition> <block pos:start="17:81" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:25">

        <expr_stmt pos:start="19:9" pos:end="19:88"><expr pos:start="19:9" pos:end="19:87"><call pos:start="19:9" pos:end="19:87"><name pos:start="19:9" pos:end="19:14">av_log</name><argument_list pos:start="19:15" pos:end="19:87">(<argument pos:start="19:16" pos:end="19:23"><expr pos:start="19:16" pos:end="19:23"><name pos:start="19:16" pos:end="19:23"><name pos:start="19:16" pos:end="19:16">s</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:23">avctx</name></name></expr></argument>, <argument pos:start="19:26" pos:end="19:37"><expr pos:start="19:26" pos:end="19:37"><name pos:start="19:26" pos:end="19:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="19:40" pos:end="19:86"><expr pos:start="19:40" pos:end="19:86"><literal type="string" pos:start="19:40" pos:end="19:86">"low_delay flag set incorrectly, clearing it\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:25"><expr pos:start="21:9" pos:end="21:24"><name pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:20">low_delay</name></name> <operator pos:start="21:22" pos:end="21:22">=</operator> <literal type="number" pos:start="21:24" pos:end="21:24">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:85"><expr pos:start="27:5" pos:end="27:84"><name pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:24">partitioned_frame</name></name> <operator pos:start="27:26" pos:end="27:26">=</operator> <name pos:start="27:28" pos:end="27:47"><name pos:start="27:28" pos:end="27:28">s</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:47">data_partitioning</name></name> <operator pos:start="27:49" pos:end="27:50">&amp;&amp;</operator> <name pos:start="27:52" pos:end="27:63"><name pos:start="27:52" pos:end="27:52">s</name><operator pos:start="27:53" pos:end="27:54">-&gt;</operator><name pos:start="27:55" pos:end="27:63">pict_type</name></name> <operator pos:start="27:65" pos:end="27:66">!=</operator> <name pos:start="27:68" pos:end="27:84">AV_PICTURE_TYPE_B</name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:39"><if pos:start="29:5" pos:end="31:51">if <condition pos:start="29:8" pos:end="29:29">(<expr pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:28">partitioned_frame</name></name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:51"><block_content pos:start="31:9" pos:end="31:51">

        <expr_stmt pos:start="31:9" pos:end="31:51"><expr pos:start="31:9" pos:end="31:50"><name pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:20">decode_mb</name></name> <operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:50">mpeg4_decode_partitioned_mb</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="33:5" pos:end="35:39">else<block type="pseudo" pos:start="35:9" pos:end="35:39"><block_content pos:start="35:9" pos:end="35:39">

        <expr_stmt pos:start="35:9" pos:end="35:39"><expr pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:20">decode_mb</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <name pos:start="35:24" pos:end="35:38">mpeg4_decode_mb</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:18"><expr pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:13">time_incr</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <literal type="number" pos:start="39:17" pos:end="39:17">0</literal></expr>;</expr_stmt>

    <while pos:start="41:5" pos:end="43:20">while <condition pos:start="41:11" pos:end="41:30">(<expr pos:start="41:12" pos:end="41:29"><call pos:start="41:12" pos:end="41:24"><name pos:start="41:12" pos:end="41:20">get_bits1</name><argument_list pos:start="41:21" pos:end="41:24">(<argument pos:start="41:22" pos:end="41:23"><expr pos:start="41:22" pos:end="41:23"><name pos:start="41:22" pos:end="41:23">gb</name></expr></argument>)</argument_list></call> <operator pos:start="41:26" pos:end="41:27">!=</operator> <literal type="number" pos:start="41:29" pos:end="41:29">0</literal></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:20"><block_content pos:start="43:9" pos:end="43:20">

        <expr_stmt pos:start="43:9" pos:end="43:20"><expr pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:17">time_incr</name><operator pos:start="43:18" pos:end="43:19">++</operator></expr>;</expr_stmt></block_content></block></while>



    <expr_stmt pos:start="47:5" pos:end="47:46"><expr pos:start="47:5" pos:end="47:45"><call pos:start="47:5" pos:end="47:45"><name pos:start="47:5" pos:end="47:16">check_marker</name><argument_list pos:start="47:17" pos:end="47:45">(<argument pos:start="47:18" pos:end="47:19"><expr pos:start="47:18" pos:end="47:19"><name pos:start="47:18" pos:end="47:19">gb</name></expr></argument>, <argument pos:start="47:22" pos:end="47:44"><expr pos:start="47:22" pos:end="47:44"><literal type="string" pos:start="47:22" pos:end="47:44">"before time_increment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="97:5"><if pos:start="51:5" pos:end="97:5">if <condition pos:start="51:8" pos:end="53:59">(<expr pos:start="51:9" pos:end="53:58"><name pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:11">ctx</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:32">time_increment_bits</name></name> <operator pos:start="51:34" pos:end="51:35">==</operator> <literal type="number" pos:start="51:37" pos:end="51:37">0</literal> <operator pos:start="51:39" pos:end="51:40">||</operator>

        <operator pos:start="53:9" pos:end="53:9">!</operator><operator pos:start="53:10" pos:end="53:10">(</operator><call pos:start="53:11" pos:end="53:53"><name pos:start="53:11" pos:end="53:19">show_bits</name><argument_list pos:start="53:20" pos:end="53:53">(<argument pos:start="53:21" pos:end="53:22"><expr pos:start="53:21" pos:end="53:22"><name pos:start="53:21" pos:end="53:22">gb</name></expr></argument>, <argument pos:start="53:25" pos:end="53:52"><expr pos:start="53:25" pos:end="53:52"><name pos:start="53:25" pos:end="53:48"><name pos:start="53:25" pos:end="53:27">ctx</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:48">time_increment_bits</name></name> <operator pos:start="53:50" pos:end="53:50">+</operator> <literal type="number" pos:start="53:52" pos:end="53:52">1</literal></expr></argument>)</argument_list></call> <operator pos:start="53:55" pos:end="53:55">&amp;</operator> <literal type="number" pos:start="53:57" pos:end="53:57">1</literal><operator pos:start="53:58" pos:end="53:58">)</operator></expr>)</condition> <block pos:start="53:61" pos:end="97:5">{<block_content pos:start="55:9" pos:end="95:9">

        <expr_stmt pos:start="55:9" pos:end="57:164"><expr pos:start="55:9" pos:end="57:163"><call pos:start="55:9" pos:end="57:163"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="57:163">(<argument pos:start="55:16" pos:end="55:23"><expr pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:16">s</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:23">avctx</name></name></expr></argument>, <argument pos:start="55:26" pos:end="55:39"><expr pos:start="55:26" pos:end="55:39"><name pos:start="55:26" pos:end="55:39">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="57:16" pos:end="57:136"><expr pos:start="57:16" pos:end="57:136"><literal type="string" pos:start="57:16" pos:end="57:136">"time_increment_bits %d is invalid in relation to the current bitstream, this is likely caused by a missing VOL header\n"</literal></expr></argument>, <argument pos:start="57:139" pos:end="57:162"><expr pos:start="57:139" pos:end="57:162"><name pos:start="57:139" pos:end="57:162"><name pos:start="57:139" pos:end="57:141">ctx</name><operator pos:start="57:142" pos:end="57:143">-&gt;</operator><name pos:start="57:144" pos:end="57:162">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="61:9" pos:end="81:9">for <control pos:start="61:13" pos:end="65:40">(<init pos:start="61:14" pos:end="61:42"><expr pos:start="61:14" pos:end="61:41"><name pos:start="61:14" pos:end="61:37"><name pos:start="61:14" pos:end="61:16">ctx</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:37">time_increment_bits</name></name> <operator pos:start="61:39" pos:end="61:39">=</operator> <literal type="number" pos:start="61:41" pos:end="61:41">1</literal></expr>;</init>

             <condition pos:start="63:14" pos:end="63:43"><expr pos:start="63:14" pos:end="63:42"><name pos:start="63:14" pos:end="63:37"><name pos:start="63:14" pos:end="63:16">ctx</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:37">time_increment_bits</name></name> <operator pos:start="63:39" pos:end="63:39">&lt;</operator> <literal type="number" pos:start="63:41" pos:end="63:42">16</literal></expr>;</condition>

             <incr pos:start="65:14" pos:end="65:39"><expr pos:start="65:14" pos:end="65:39"><name pos:start="65:14" pos:end="65:37"><name pos:start="65:14" pos:end="65:16">ctx</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:37">time_increment_bits</name></name><operator pos:start="65:38" pos:end="65:39">++</operator></expr></incr>)</control> <block pos:start="65:42" pos:end="81:9">{<block_content pos:start="67:13" pos:end="79:22">

            <if_stmt pos:start="67:13" pos:end="79:22"><if pos:start="67:13" pos:end="77:13">if <condition pos:start="67:16" pos:end="71:54">(<expr pos:start="67:17" pos:end="71:53"><name pos:start="67:17" pos:end="67:28"><name pos:start="67:17" pos:end="67:17">s</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:28">pict_type</name></name> <operator pos:start="67:30" pos:end="67:31">==</operator> <name pos:start="67:33" pos:end="67:49">AV_PICTURE_TYPE_P</name> <operator pos:start="67:51" pos:end="67:52">||</operator>

                <operator pos:start="69:17" pos:end="69:17">(</operator><name pos:start="69:18" pos:end="69:29"><name pos:start="69:18" pos:end="69:18">s</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:29">pict_type</name></name> <operator pos:start="69:31" pos:end="69:32">==</operator> <name pos:start="69:34" pos:end="69:50">AV_PICTURE_TYPE_S</name> <operator pos:start="69:52" pos:end="69:53">&amp;&amp;</operator>

                 <name pos:start="71:18" pos:end="71:38"><name pos:start="71:18" pos:end="71:20">ctx</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:38">vol_sprite_usage</name></name> <operator pos:start="71:40" pos:end="71:41">==</operator> <name pos:start="71:43" pos:end="71:52">GMC_SPRITE</name><operator pos:start="71:53" pos:end="71:53">)</operator></expr>)</condition> <block pos:start="71:56" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:26">

                <if_stmt pos:start="73:17" pos:end="75:26"><if pos:start="73:17" pos:end="75:26">if <condition pos:start="73:20" pos:end="73:81">(<expr pos:start="73:21" pos:end="73:80"><operator pos:start="73:21" pos:end="73:21">(</operator><call pos:start="73:22" pos:end="73:64"><name pos:start="73:22" pos:end="73:30">show_bits</name><argument_list pos:start="73:31" pos:end="73:64">(<argument pos:start="73:32" pos:end="73:33"><expr pos:start="73:32" pos:end="73:33"><name pos:start="73:32" pos:end="73:33">gb</name></expr></argument>, <argument pos:start="73:36" pos:end="73:63"><expr pos:start="73:36" pos:end="73:63"><name pos:start="73:36" pos:end="73:59"><name pos:start="73:36" pos:end="73:38">ctx</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:59">time_increment_bits</name></name> <operator pos:start="73:61" pos:end="73:61">+</operator> <literal type="number" pos:start="73:63" pos:end="73:63">6</literal></expr></argument>)</argument_list></call> <operator pos:start="73:66" pos:end="73:66">&amp;</operator> <literal type="number" pos:start="73:68" pos:end="73:71">0x37</literal><operator pos:start="73:72" pos:end="73:72">)</operator> <operator pos:start="73:74" pos:end="73:75">==</operator> <literal type="number" pos:start="73:77" pos:end="73:80">0x30</literal></expr>)</condition><block type="pseudo" pos:start="75:21" pos:end="75:26"><block_content pos:start="75:21" pos:end="75:26">

                    <break pos:start="75:21" pos:end="75:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="77:15" pos:end="79:22">else if <condition pos:start="77:23" pos:end="77:84">(<expr pos:start="77:24" pos:end="77:83"><operator pos:start="77:24" pos:end="77:24">(</operator><call pos:start="77:25" pos:end="77:67"><name pos:start="77:25" pos:end="77:33">show_bits</name><argument_list pos:start="77:34" pos:end="77:67">(<argument pos:start="77:35" pos:end="77:36"><expr pos:start="77:35" pos:end="77:36"><name pos:start="77:35" pos:end="77:36">gb</name></expr></argument>, <argument pos:start="77:39" pos:end="77:66"><expr pos:start="77:39" pos:end="77:66"><name pos:start="77:39" pos:end="77:62"><name pos:start="77:39" pos:end="77:41">ctx</name><operator pos:start="77:42" pos:end="77:43">-&gt;</operator><name pos:start="77:44" pos:end="77:62">time_increment_bits</name></name> <operator pos:start="77:64" pos:end="77:64">+</operator> <literal type="number" pos:start="77:66" pos:end="77:66">5</literal></expr></argument>)</argument_list></call> <operator pos:start="77:69" pos:end="77:69">&amp;</operator> <literal type="number" pos:start="77:71" pos:end="77:74">0x1F</literal><operator pos:start="77:75" pos:end="77:75">)</operator> <operator pos:start="77:77" pos:end="77:78">==</operator> <literal type="number" pos:start="77:80" pos:end="77:83">0x18</literal></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:22"><block_content pos:start="79:17" pos:end="79:22">

                <break pos:start="79:17" pos:end="79:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="85:9" pos:end="87:110"><expr pos:start="85:9" pos:end="87:109"><call pos:start="85:9" pos:end="87:109"><name pos:start="85:9" pos:end="85:14">av_log</name><argument_list pos:start="85:15" pos:end="87:109">(<argument pos:start="85:16" pos:end="85:23"><expr pos:start="85:16" pos:end="85:23"><name pos:start="85:16" pos:end="85:23"><name pos:start="85:16" pos:end="85:16">s</name><operator pos:start="85:17" pos:end="85:18">-&gt;</operator><name pos:start="85:19" pos:end="85:23">avctx</name></name></expr></argument>, <argument pos:start="85:26" pos:end="85:39"><expr pos:start="85:26" pos:end="85:39"><name pos:start="85:26" pos:end="85:39">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="87:16" pos:end="87:82"><expr pos:start="87:16" pos:end="87:82"><literal type="string" pos:start="87:16" pos:end="87:82">"time_increment_bits set to %d bits, based on bitstream analysis\n"</literal></expr></argument>, <argument pos:start="87:85" pos:end="87:108"><expr pos:start="87:85" pos:end="87:108"><name pos:start="87:85" pos:end="87:108"><name pos:start="87:85" pos:end="87:87">ctx</name><operator pos:start="87:88" pos:end="87:89">-&gt;</operator><name pos:start="87:90" pos:end="87:108">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:95">(<expr pos:start="89:13" pos:end="89:94"><name pos:start="89:13" pos:end="89:35"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:20">avctx</name><operator pos:start="89:21" pos:end="89:22">-&gt;</operator><name pos:start="89:23" pos:end="89:31">framerate</name><operator pos:start="89:32" pos:end="89:32">.</operator><name pos:start="89:33" pos:end="89:35">num</name></name> <operator pos:start="89:37" pos:end="89:38">&amp;&amp;</operator> <literal type="number" pos:start="89:40" pos:end="89:40">4</literal><operator pos:start="89:41" pos:end="89:41">*</operator><name pos:start="89:42" pos:end="89:64"><name pos:start="89:42" pos:end="89:42">s</name><operator pos:start="89:43" pos:end="89:44">-&gt;</operator><name pos:start="89:45" pos:end="89:49">avctx</name><operator pos:start="89:50" pos:end="89:51">-&gt;</operator><name pos:start="89:52" pos:end="89:60">framerate</name><operator pos:start="89:61" pos:end="89:61">.</operator><name pos:start="89:62" pos:end="89:64">num</name></name> <operator pos:start="89:66" pos:end="89:66">&lt;</operator> <literal type="number" pos:start="89:68" pos:end="89:68">1</literal><operator pos:start="89:69" pos:end="89:70">&lt;&lt;</operator><name pos:start="89:71" pos:end="89:94"><name pos:start="89:71" pos:end="89:73">ctx</name><operator pos:start="89:74" pos:end="89:75">-&gt;</operator><name pos:start="89:76" pos:end="89:94">time_increment_bits</name></name></expr>)</condition> <block pos:start="89:97" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:118">

            <expr_stmt pos:start="91:13" pos:end="91:66"><expr pos:start="91:13" pos:end="91:65"><name pos:start="91:13" pos:end="91:35"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:20">avctx</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:31">framerate</name><operator pos:start="91:32" pos:end="91:32">.</operator><name pos:start="91:33" pos:end="91:35">num</name></name> <operator pos:start="91:37" pos:end="91:37">=</operator> <literal type="number" pos:start="91:39" pos:end="91:39">1</literal><operator pos:start="91:40" pos:end="91:41">&lt;&lt;</operator><name pos:start="91:42" pos:end="91:65"><name pos:start="91:42" pos:end="91:44">ctx</name><operator pos:start="91:45" pos:end="91:46">-&gt;</operator><name pos:start="91:47" pos:end="91:65">time_increment_bits</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:118"><expr pos:start="93:13" pos:end="93:117"><name pos:start="93:13" pos:end="93:31"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:20">avctx</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:31">time_base</name></name> <operator pos:start="93:33" pos:end="93:33">=</operator> <macro pos:start="93:35" pos:end="93:117"><name pos:start="93:35" pos:end="93:42">av_inv_q</name><argument_list pos:start="93:43" pos:end="93:117">(<argument pos:start="93:44" pos:end="93:116">av_mul_q(s-&gt;avctx-&gt;framerate, (AVRational){s-&gt;avctx-&gt;ticks_per_frame, <literal type="number" pos:start="93:114" pos:end="93:114">1</literal>})</argument>)</argument_list></macro></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="107:64"><if pos:start="101:5" pos:end="103:39">if <condition pos:start="101:8" pos:end="101:16">(<expr pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:15">IS_3IV1</name></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:39"><block_content pos:start="103:9" pos:end="103:39">

        <expr_stmt pos:start="103:9" pos:end="103:39"><expr pos:start="103:9" pos:end="103:38"><name pos:start="103:9" pos:end="103:22">time_increment</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <call pos:start="103:26" pos:end="103:38"><name pos:start="103:26" pos:end="103:34">get_bits1</name><argument_list pos:start="103:35" pos:end="103:38">(<argument pos:start="103:36" pos:end="103:37"><expr pos:start="103:36" pos:end="103:37"><name pos:start="103:36" pos:end="103:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>        <comment type="line" pos:start="103:48" pos:end="103:75">// FIXME investigate further</comment>

    <else pos:start="105:5" pos:end="107:64">else<block type="pseudo" pos:start="107:9" pos:end="107:64"><block_content pos:start="107:9" pos:end="107:64">

        <expr_stmt pos:start="107:9" pos:end="107:64"><expr pos:start="107:9" pos:end="107:63"><name pos:start="107:9" pos:end="107:22">time_increment</name> <operator pos:start="107:24" pos:end="107:24">=</operator> <call pos:start="107:26" pos:end="107:63"><name pos:start="107:26" pos:end="107:33">get_bits</name><argument_list pos:start="107:34" pos:end="107:63">(<argument pos:start="107:35" pos:end="107:36"><expr pos:start="107:35" pos:end="107:36"><name pos:start="107:35" pos:end="107:36">gb</name></expr></argument>, <argument pos:start="107:39" pos:end="107:62"><expr pos:start="107:39" pos:end="107:62"><name pos:start="107:39" pos:end="107:62"><name pos:start="107:39" pos:end="107:41">ctx</name><operator pos:start="107:42" pos:end="107:43">-&gt;</operator><name pos:start="107:44" pos:end="107:62">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="111:5" pos:end="189:5"><if pos:start="111:5" pos:end="139:5">if <condition pos:start="111:8" pos:end="111:42">(<expr pos:start="111:9" pos:end="111:41"><name pos:start="111:9" pos:end="111:20"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:20">pict_type</name></name> <operator pos:start="111:22" pos:end="111:23">!=</operator> <name pos:start="111:25" pos:end="111:41">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="111:44" pos:end="139:5">{<block_content pos:start="113:9" pos:end="137:37">

        <expr_stmt pos:start="113:9" pos:end="113:41"><expr pos:start="113:9" pos:end="113:40"><name pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:9">s</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:25">last_time_base</name></name> <operator pos:start="113:27" pos:end="113:27">=</operator> <name pos:start="113:29" pos:end="113:40"><name pos:start="113:29" pos:end="113:29">s</name><operator pos:start="113:30" pos:end="113:31">-&gt;</operator><name pos:start="113:32" pos:end="113:40">time_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:38"><expr pos:start="115:9" pos:end="115:37"><name pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:9">s</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:20">time_base</name></name>     <operator pos:start="115:26" pos:end="115:27">+=</operator> <name pos:start="115:29" pos:end="115:37">time_incr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:74"><expr pos:start="117:9" pos:end="117:73"><name pos:start="117:9" pos:end="117:15"><name pos:start="117:9" pos:end="117:9">s</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:15">time</name></name> <operator pos:start="117:17" pos:end="117:17">=</operator> <name pos:start="117:19" pos:end="117:30"><name pos:start="117:19" pos:end="117:19">s</name><operator pos:start="117:20" pos:end="117:21">-&gt;</operator><name pos:start="117:22" pos:end="117:30">time_base</name></name> <operator pos:start="117:32" pos:end="117:32">*</operator> <name pos:start="117:34" pos:end="117:56"><name pos:start="117:34" pos:end="117:34">s</name><operator pos:start="117:35" pos:end="117:36">-&gt;</operator><name pos:start="117:37" pos:end="117:41">avctx</name><operator pos:start="117:42" pos:end="117:43">-&gt;</operator><name pos:start="117:44" pos:end="117:52">framerate</name><operator pos:start="117:53" pos:end="117:53">.</operator><name pos:start="117:54" pos:end="117:56">num</name></name> <operator pos:start="117:58" pos:end="117:58">+</operator> <name pos:start="117:60" pos:end="117:73">time_increment</name></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="133:9"><if pos:start="119:9" pos:end="133:9">if <condition pos:start="119:12" pos:end="119:45">(<expr pos:start="119:13" pos:end="119:44"><name pos:start="119:13" pos:end="119:30"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:30">workaround_bugs</name></name> <operator pos:start="119:32" pos:end="119:32">&amp;</operator> <name pos:start="119:34" pos:end="119:44">FF_BUG_UMP4</name></expr>)</condition> <block pos:start="119:47" pos:end="133:9">{<block_content pos:start="121:13" pos:end="131:13">

            <if_stmt pos:start="121:13" pos:end="131:13"><if pos:start="121:13" pos:end="131:13">if <condition pos:start="121:16" pos:end="121:45">(<expr pos:start="121:17" pos:end="121:44"><name pos:start="121:17" pos:end="121:23"><name pos:start="121:17" pos:end="121:17">s</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:23">time</name></name> <operator pos:start="121:25" pos:end="121:25">&lt;</operator> <name pos:start="121:27" pos:end="121:44"><name pos:start="121:27" pos:end="121:27">s</name><operator pos:start="121:28" pos:end="121:29">-&gt;</operator><name pos:start="121:30" pos:end="121:44">last_non_b_time</name></name></expr>)</condition> <block pos:start="121:47" pos:end="131:13">{<block_content pos:start="127:17" pos:end="129:51">

                <comment type="block" pos:start="123:17" pos:end="125:42">/* header is not mpeg-4-compatible, broken encoder,

                 * trying to workaround */</comment>

                <expr_stmt pos:start="127:17" pos:end="127:31"><expr pos:start="127:17" pos:end="127:30"><name pos:start="127:17" pos:end="127:28"><name pos:start="127:17" pos:end="127:17">s</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:28">time_base</name></name><operator pos:start="127:29" pos:end="127:30">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:51"><expr pos:start="129:17" pos:end="129:50"><name pos:start="129:17" pos:end="129:23"><name pos:start="129:17" pos:end="129:17">s</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:23">time</name></name> <operator pos:start="129:25" pos:end="129:26">+=</operator> <name pos:start="129:28" pos:end="129:50"><name pos:start="129:28" pos:end="129:28">s</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:35">avctx</name><operator pos:start="129:36" pos:end="129:37">-&gt;</operator><name pos:start="129:38" pos:end="129:46">framerate</name><operator pos:start="129:47" pos:end="129:47">.</operator><name pos:start="129:48" pos:end="129:50">num</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:58"><expr pos:start="135:9" pos:end="135:57"><name pos:start="135:9" pos:end="135:18"><name pos:start="135:9" pos:end="135:9">s</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:18">pp_time</name></name>         <operator pos:start="135:28" pos:end="135:28">=</operator> <name pos:start="135:30" pos:end="135:36"><name pos:start="135:30" pos:end="135:30">s</name><operator pos:start="135:31" pos:end="135:32">-&gt;</operator><name pos:start="135:33" pos:end="135:36">time</name></name> <operator pos:start="135:38" pos:end="135:38">-</operator> <name pos:start="135:40" pos:end="135:57"><name pos:start="135:40" pos:end="135:40">s</name><operator pos:start="135:41" pos:end="135:42">-&gt;</operator><name pos:start="135:43" pos:end="135:57">last_non_b_time</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:37"><expr pos:start="137:9" pos:end="137:36"><name pos:start="137:9" pos:end="137:26"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:26">last_non_b_time</name></name> <operator pos:start="137:28" pos:end="137:28">=</operator> <name pos:start="137:30" pos:end="137:36"><name pos:start="137:30" pos:end="137:30">s</name><operator pos:start="137:31" pos:end="137:32">-&gt;</operator><name pos:start="137:33" pos:end="137:36">time</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="139:7" pos:end="189:5">else <block pos:start="139:12" pos:end="189:5">{<block_content pos:start="141:9" pos:end="187:9">

        <expr_stmt pos:start="141:9" pos:end="141:96"><expr pos:start="141:9" pos:end="141:95"><name pos:start="141:9" pos:end="141:15"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:15">time</name></name>    <operator pos:start="141:20" pos:end="141:20">=</operator> <operator pos:start="141:22" pos:end="141:22">(</operator><name pos:start="141:23" pos:end="141:39"><name pos:start="141:23" pos:end="141:23">s</name><operator pos:start="141:24" pos:end="141:25">-&gt;</operator><name pos:start="141:26" pos:end="141:39">last_time_base</name></name> <operator pos:start="141:41" pos:end="141:41">+</operator> <name pos:start="141:43" pos:end="141:51">time_incr</name><operator pos:start="141:52" pos:end="141:52">)</operator> <operator pos:start="141:54" pos:end="141:54">*</operator> <name pos:start="141:56" pos:end="141:78"><name pos:start="141:56" pos:end="141:56">s</name><operator pos:start="141:57" pos:end="141:58">-&gt;</operator><name pos:start="141:59" pos:end="141:63">avctx</name><operator pos:start="141:64" pos:end="141:65">-&gt;</operator><name pos:start="141:66" pos:end="141:74">framerate</name><operator pos:start="141:75" pos:end="141:75">.</operator><name pos:start="141:76" pos:end="141:78">num</name></name> <operator pos:start="141:80" pos:end="141:80">+</operator> <name pos:start="141:82" pos:end="141:95">time_increment</name></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:65"><expr pos:start="143:9" pos:end="143:64"><name pos:start="143:9" pos:end="143:18"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:18">pb_time</name></name> <operator pos:start="143:20" pos:end="143:20">=</operator> <name pos:start="143:22" pos:end="143:31"><name pos:start="143:22" pos:end="143:22">s</name><operator pos:start="143:23" pos:end="143:24">-&gt;</operator><name pos:start="143:25" pos:end="143:31">pp_time</name></name> <operator pos:start="143:33" pos:end="143:33">-</operator> <operator pos:start="143:35" pos:end="143:35">(</operator><name pos:start="143:36" pos:end="143:53"><name pos:start="143:36" pos:end="143:36">s</name><operator pos:start="143:37" pos:end="143:38">-&gt;</operator><name pos:start="143:39" pos:end="143:53">last_non_b_time</name></name> <operator pos:start="143:55" pos:end="143:55">-</operator> <name pos:start="143:57" pos:end="143:63"><name pos:start="143:57" pos:end="143:57">s</name><operator pos:start="143:58" pos:end="143:59">-&gt;</operator><name pos:start="143:60" pos:end="143:63">time</name></name><operator pos:start="143:64" pos:end="143:64">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="145:9" pos:end="155:9"><if pos:start="145:9" pos:end="155:9">if <condition pos:start="145:12" pos:end="149:28">(<expr pos:start="145:13" pos:end="149:27"><name pos:start="145:13" pos:end="145:22"><name pos:start="145:13" pos:end="145:13">s</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:22">pp_time</name></name> <operator pos:start="145:24" pos:end="145:25">&lt;=</operator> <name pos:start="145:27" pos:end="145:36"><name pos:start="145:27" pos:end="145:27">s</name><operator pos:start="145:28" pos:end="145:29">-&gt;</operator><name pos:start="145:30" pos:end="145:36">pb_time</name></name> <operator pos:start="145:38" pos:end="145:39">||</operator>

            <name pos:start="147:13" pos:end="147:22"><name pos:start="147:13" pos:end="147:13">s</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:22">pp_time</name></name> <operator pos:start="147:24" pos:end="147:25">&lt;=</operator> <name pos:start="147:27" pos:end="147:36"><name pos:start="147:27" pos:end="147:27">s</name><operator pos:start="147:28" pos:end="147:29">-&gt;</operator><name pos:start="147:30" pos:end="147:36">pp_time</name></name> <operator pos:start="147:38" pos:end="147:38">-</operator> <name pos:start="147:40" pos:end="147:49"><name pos:start="147:40" pos:end="147:40">s</name><operator pos:start="147:41" pos:end="147:42">-&gt;</operator><name pos:start="147:43" pos:end="147:49">pb_time</name></name> <operator pos:start="147:51" pos:end="147:52">||</operator>

            <name pos:start="149:13" pos:end="149:22"><name pos:start="149:13" pos:end="149:13">s</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:22">pp_time</name></name> <operator pos:start="149:24" pos:end="149:25">&lt;=</operator> <literal type="number" pos:start="149:27" pos:end="149:27">0</literal></expr>)</condition> <block pos:start="149:30" pos:end="155:9">{<block_content pos:start="153:13" pos:end="153:33">

            <comment type="block" pos:start="151:13" pos:end="151:80">/* messed up order, maybe after seeking? skipping current b-frame */</comment>

            <return pos:start="153:13" pos:end="153:33">return <expr pos:start="153:20" pos:end="153:32"><name pos:start="153:20" pos:end="153:32">FRAME_SKIPPED</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:35"><expr pos:start="157:9" pos:end="157:34"><call pos:start="157:9" pos:end="157:34"><name pos:start="157:9" pos:end="157:31">ff_mpeg4_init_direct_mv</name><argument_list pos:start="157:32" pos:end="157:34">(<argument pos:start="157:33" pos:end="157:33"><expr pos:start="157:33" pos:end="157:33"><name pos:start="157:33" pos:end="157:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="161:9" pos:end="163:38"><if pos:start="161:9" pos:end="163:38">if <condition pos:start="161:12" pos:end="161:30">(<expr pos:start="161:13" pos:end="161:29"><name pos:start="161:13" pos:end="161:24"><name pos:start="161:13" pos:end="161:15">ctx</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:24">t_frame</name></name> <operator pos:start="161:26" pos:end="161:27">==</operator> <literal type="number" pos:start="161:29" pos:end="161:29">0</literal></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:38"><block_content pos:start="163:13" pos:end="163:38">

            <expr_stmt pos:start="163:13" pos:end="163:38"><expr pos:start="163:13" pos:end="163:37"><name pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:15">ctx</name><operator pos:start="163:16" pos:end="163:17">-&gt;</operator><name pos:start="163:18" pos:end="163:24">t_frame</name></name> <operator pos:start="163:26" pos:end="163:26">=</operator> <name pos:start="163:28" pos:end="163:37"><name pos:start="163:28" pos:end="163:28">s</name><operator pos:start="163:29" pos:end="163:30">-&gt;</operator><name pos:start="163:31" pos:end="163:37">pb_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="165:9" pos:end="167:29"><if pos:start="165:9" pos:end="167:29">if <condition pos:start="165:12" pos:end="165:30">(<expr pos:start="165:13" pos:end="165:29"><name pos:start="165:13" pos:end="165:24"><name pos:start="165:13" pos:end="165:15">ctx</name><operator pos:start="165:16" pos:end="165:17">-&gt;</operator><name pos:start="165:18" pos:end="165:24">t_frame</name></name> <operator pos:start="165:26" pos:end="165:27">==</operator> <literal type="number" pos:start="165:29" pos:end="165:29">0</literal></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:29"><block_content pos:start="167:13" pos:end="167:29">

            <expr_stmt pos:start="167:13" pos:end="167:29"><expr pos:start="167:13" pos:end="167:28"><name pos:start="167:13" pos:end="167:24"><name pos:start="167:13" pos:end="167:15">ctx</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:24">t_frame</name></name> <operator pos:start="167:26" pos:end="167:26">=</operator> <literal type="number" pos:start="167:28" pos:end="167:28">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="line" pos:start="167:32" pos:end="167:48">// 1/0 protection</comment>

        <expr_stmt pos:start="169:9" pos:end="171:92"><expr pos:start="169:9" pos:end="171:91"><name pos:start="169:9" pos:end="169:24"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:24">pp_field_time</name></name> <operator pos:start="169:26" pos:end="169:26">=</operator> <operator pos:start="169:28" pos:end="169:28">(</operator><call pos:start="169:29" pos:end="169:73"><name pos:start="169:29" pos:end="169:39">ROUNDED_DIV</name><argument_list pos:start="169:40" pos:end="169:73">(<argument pos:start="169:41" pos:end="169:58"><expr pos:start="169:41" pos:end="169:58"><name pos:start="169:41" pos:end="169:58"><name pos:start="169:41" pos:end="169:41">s</name><operator pos:start="169:42" pos:end="169:43">-&gt;</operator><name pos:start="169:44" pos:end="169:58">last_non_b_time</name></name></expr></argument>, <argument pos:start="169:61" pos:end="169:72"><expr pos:start="169:61" pos:end="169:72"><name pos:start="169:61" pos:end="169:72"><name pos:start="169:61" pos:end="169:63">ctx</name><operator pos:start="169:64" pos:end="169:65">-&gt;</operator><name pos:start="169:66" pos:end="169:72">t_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="169:75" pos:end="169:75">-</operator>

                            <call pos:start="171:29" pos:end="171:86"><name pos:start="171:29" pos:end="171:39">ROUNDED_DIV</name><argument_list pos:start="171:40" pos:end="171:86">(<argument pos:start="171:41" pos:end="171:71"><expr pos:start="171:41" pos:end="171:71"><name pos:start="171:41" pos:end="171:58"><name pos:start="171:41" pos:end="171:41">s</name><operator pos:start="171:42" pos:end="171:43">-&gt;</operator><name pos:start="171:44" pos:end="171:58">last_non_b_time</name></name> <operator pos:start="171:60" pos:end="171:60">-</operator> <name pos:start="171:62" pos:end="171:71"><name pos:start="171:62" pos:end="171:62">s</name><operator pos:start="171:63" pos:end="171:64">-&gt;</operator><name pos:start="171:65" pos:end="171:71">pp_time</name></name></expr></argument>, <argument pos:start="171:74" pos:end="171:85"><expr pos:start="171:74" pos:end="171:85"><name pos:start="171:74" pos:end="171:85"><name pos:start="171:74" pos:end="171:76">ctx</name><operator pos:start="171:77" pos:end="171:78">-&gt;</operator><name pos:start="171:79" pos:end="171:85">t_frame</name></name></expr></argument>)</argument_list></call><operator pos:start="171:87" pos:end="171:87">)</operator> <operator pos:start="171:89" pos:end="171:89">*</operator> <literal type="number" pos:start="171:91" pos:end="171:91">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="175:92"><expr pos:start="173:9" pos:end="175:91"><name pos:start="173:9" pos:end="173:24"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:24">pb_field_time</name></name> <operator pos:start="173:26" pos:end="173:26">=</operator> <operator pos:start="173:28" pos:end="173:28">(</operator><call pos:start="173:29" pos:end="173:62"><name pos:start="173:29" pos:end="173:39">ROUNDED_DIV</name><argument_list pos:start="173:40" pos:end="173:62">(<argument pos:start="173:41" pos:end="173:47"><expr pos:start="173:41" pos:end="173:47"><name pos:start="173:41" pos:end="173:47"><name pos:start="173:41" pos:end="173:41">s</name><operator pos:start="173:42" pos:end="173:43">-&gt;</operator><name pos:start="173:44" pos:end="173:47">time</name></name></expr></argument>, <argument pos:start="173:50" pos:end="173:61"><expr pos:start="173:50" pos:end="173:61"><name pos:start="173:50" pos:end="173:61"><name pos:start="173:50" pos:end="173:52">ctx</name><operator pos:start="173:53" pos:end="173:54">-&gt;</operator><name pos:start="173:55" pos:end="173:61">t_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="173:64" pos:end="173:64">-</operator>

                            <call pos:start="175:29" pos:end="175:86"><name pos:start="175:29" pos:end="175:39">ROUNDED_DIV</name><argument_list pos:start="175:40" pos:end="175:86">(<argument pos:start="175:41" pos:end="175:71"><expr pos:start="175:41" pos:end="175:71"><name pos:start="175:41" pos:end="175:58"><name pos:start="175:41" pos:end="175:41">s</name><operator pos:start="175:42" pos:end="175:43">-&gt;</operator><name pos:start="175:44" pos:end="175:58">last_non_b_time</name></name> <operator pos:start="175:60" pos:end="175:60">-</operator> <name pos:start="175:62" pos:end="175:71"><name pos:start="175:62" pos:end="175:62">s</name><operator pos:start="175:63" pos:end="175:64">-&gt;</operator><name pos:start="175:65" pos:end="175:71">pp_time</name></name></expr></argument>, <argument pos:start="175:74" pos:end="175:85"><expr pos:start="175:74" pos:end="175:85"><name pos:start="175:74" pos:end="175:85"><name pos:start="175:74" pos:end="175:76">ctx</name><operator pos:start="175:77" pos:end="175:78">-&gt;</operator><name pos:start="175:79" pos:end="175:85">t_frame</name></name></expr></argument>)</argument_list></call><operator pos:start="175:87" pos:end="175:87">)</operator> <operator pos:start="175:89" pos:end="175:89">*</operator> <literal type="number" pos:start="175:91" pos:end="175:91">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="187:9"><if pos:start="177:9" pos:end="187:9">if <condition pos:start="177:12" pos:end="177:74">(<expr pos:start="177:13" pos:end="177:73"><name pos:start="177:13" pos:end="177:28"><name pos:start="177:13" pos:end="177:13">s</name><operator pos:start="177:14" pos:end="177:15">-&gt;</operator><name pos:start="177:16" pos:end="177:28">pp_field_time</name></name> <operator pos:start="177:30" pos:end="177:31">&lt;=</operator> <name pos:start="177:33" pos:end="177:48"><name pos:start="177:33" pos:end="177:33">s</name><operator pos:start="177:34" pos:end="177:35">-&gt;</operator><name pos:start="177:36" pos:end="177:48">pb_field_time</name></name> <operator pos:start="177:50" pos:end="177:51">||</operator> <name pos:start="177:53" pos:end="177:68"><name pos:start="177:53" pos:end="177:53">s</name><operator pos:start="177:54" pos:end="177:55">-&gt;</operator><name pos:start="177:56" pos:end="177:68">pb_field_time</name></name> <operator pos:start="177:70" pos:end="177:71">&lt;=</operator> <literal type="number" pos:start="177:73" pos:end="177:73">1</literal></expr>)</condition> <block pos:start="177:76" pos:end="187:9">{<block_content pos:start="179:13" pos:end="185:37">

            <expr_stmt pos:start="179:13" pos:end="179:33"><expr pos:start="179:13" pos:end="179:32"><name pos:start="179:13" pos:end="179:28"><name pos:start="179:13" pos:end="179:13">s</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:28">pb_field_time</name></name> <operator pos:start="179:30" pos:end="179:30">=</operator> <literal type="number" pos:start="179:32" pos:end="179:32">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:33"><expr pos:start="181:13" pos:end="181:32"><name pos:start="181:13" pos:end="181:28"><name pos:start="181:13" pos:end="181:13">s</name><operator pos:start="181:14" pos:end="181:15">-&gt;</operator><name pos:start="181:16" pos:end="181:28">pp_field_time</name></name> <operator pos:start="181:30" pos:end="181:30">=</operator> <literal type="number" pos:start="181:32" pos:end="181:32">4</literal></expr>;</expr_stmt>

            <if_stmt pos:start="183:13" pos:end="185:37"><if pos:start="183:13" pos:end="185:37">if <condition pos:start="183:16" pos:end="183:41">(<expr pos:start="183:17" pos:end="183:40"><operator pos:start="183:17" pos:end="183:17">!</operator><name pos:start="183:18" pos:end="183:40"><name pos:start="183:18" pos:end="183:18">s</name><operator pos:start="183:19" pos:end="183:20">-&gt;</operator><name pos:start="183:21" pos:end="183:40">progressive_sequence</name></name></expr>)</condition><block type="pseudo" pos:start="185:17" pos:end="185:37"><block_content pos:start="185:17" pos:end="185:37">

                <return pos:start="185:17" pos:end="185:37">return <expr pos:start="185:24" pos:end="185:36"><name pos:start="185:24" pos:end="185:36">FRAME_SKIPPED</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="193:5" pos:end="199:29"><if pos:start="193:5" pos:end="195:60">if <condition pos:start="193:8" pos:end="193:32">(<expr pos:start="193:9" pos:end="193:31"><name pos:start="193:9" pos:end="193:31"><name pos:start="193:9" pos:end="193:9">s</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:16">avctx</name><operator pos:start="193:17" pos:end="193:18">-&gt;</operator><name pos:start="193:19" pos:end="193:27">framerate</name><operator pos:start="193:28" pos:end="193:28">.</operator><name pos:start="193:29" pos:end="193:31">den</name></name></expr>)</condition><block type="pseudo" pos:start="195:9" pos:end="195:60"><block_content pos:start="195:9" pos:end="195:60">

        <expr_stmt pos:start="195:9" pos:end="195:60"><expr pos:start="195:9" pos:end="195:59"><name pos:start="195:9" pos:end="195:11">pts</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <call pos:start="195:15" pos:end="195:59"><name pos:start="195:15" pos:end="195:25">ROUNDED_DIV</name><argument_list pos:start="195:26" pos:end="195:59">(<argument pos:start="195:27" pos:end="195:33"><expr pos:start="195:27" pos:end="195:33"><name pos:start="195:27" pos:end="195:33"><name pos:start="195:27" pos:end="195:27">s</name><operator pos:start="195:28" pos:end="195:29">-&gt;</operator><name pos:start="195:30" pos:end="195:33">time</name></name></expr></argument>, <argument pos:start="195:36" pos:end="195:58"><expr pos:start="195:36" pos:end="195:58"><name pos:start="195:36" pos:end="195:58"><name pos:start="195:36" pos:end="195:36">s</name><operator pos:start="195:37" pos:end="195:38">-&gt;</operator><name pos:start="195:39" pos:end="195:43">avctx</name><operator pos:start="195:44" pos:end="195:45">-&gt;</operator><name pos:start="195:46" pos:end="195:54">framerate</name><operator pos:start="195:55" pos:end="195:55">.</operator><name pos:start="195:56" pos:end="195:58">den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="197:5" pos:end="199:29">else<block type="pseudo" pos:start="199:9" pos:end="199:29"><block_content pos:start="199:9" pos:end="199:29">

        <expr_stmt pos:start="199:9" pos:end="199:29"><expr pos:start="199:9" pos:end="199:28"><name pos:start="199:9" pos:end="199:11">pts</name> <operator pos:start="199:13" pos:end="199:13">=</operator> <name pos:start="199:15" pos:end="199:28">AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="201:5" pos:end="205:20"><if pos:start="201:5" pos:end="205:20">if <condition pos:start="201:8" pos:end="201:37">(<expr pos:start="201:9" pos:end="201:36"><name pos:start="201:9" pos:end="201:23"><name pos:start="201:9" pos:end="201:9">s</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:16">avctx</name><operator pos:start="201:17" pos:end="201:18">-&gt;</operator><name pos:start="201:19" pos:end="201:23">debug</name></name><operator pos:start="201:24" pos:end="201:24">&amp;</operator><name pos:start="201:25" pos:end="201:36">FF_DEBUG_PTS</name></expr>)</condition><block type="pseudo" pos:start="203:9" pos:end="205:20"><block_content pos:start="203:9" pos:end="205:20">

        <expr_stmt pos:start="203:9" pos:end="205:20"><expr pos:start="203:9" pos:end="205:19"><call pos:start="203:9" pos:end="205:19"><name pos:start="203:9" pos:end="203:14">av_log</name><argument_list pos:start="203:15" pos:end="205:19">(<argument pos:start="203:16" pos:end="203:23"><expr pos:start="203:16" pos:end="203:23"><name pos:start="203:16" pos:end="203:23"><name pos:start="203:16" pos:end="203:16">s</name><operator pos:start="203:17" pos:end="203:18">-&gt;</operator><name pos:start="203:19" pos:end="203:23">avctx</name></name></expr></argument>, <argument pos:start="203:26" pos:end="203:37"><expr pos:start="203:26" pos:end="203:37"><name pos:start="203:26" pos:end="203:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="203:40" pos:end="203:63"><expr pos:start="203:40" pos:end="203:63"><literal type="string" pos:start="203:40" pos:end="203:53">"MPEG4 PTS: %"</literal><name pos:start="203:54" pos:end="203:59">PRId64</name><literal type="string" pos:start="203:60" pos:end="203:63">"\n"</literal></expr></argument>,

               <argument pos:start="205:16" pos:end="205:18"><expr pos:start="205:16" pos:end="205:18"><name pos:start="205:16" pos:end="205:18">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:41"><expr pos:start="209:5" pos:end="209:40"><call pos:start="209:5" pos:end="209:40"><name pos:start="209:5" pos:end="209:16">check_marker</name><argument_list pos:start="209:17" pos:end="209:40">(<argument pos:start="209:18" pos:end="209:19"><expr pos:start="209:18" pos:end="209:19"><name pos:start="209:18" pos:end="209:19">gb</name></expr></argument>, <argument pos:start="209:22" pos:end="209:39"><expr pos:start="209:22" pos:end="209:39"><literal type="string" pos:start="209:22" pos:end="209:39">"before vop_coded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="213:5" pos:end="213:19">/* vop coded */</comment>

    <if_stmt pos:start="215:5" pos:end="223:5"><if pos:start="215:5" pos:end="223:5">if <condition pos:start="215:8" pos:end="215:27">(<expr pos:start="215:9" pos:end="215:26"><call pos:start="215:9" pos:end="215:21"><name pos:start="215:9" pos:end="215:17">get_bits1</name><argument_list pos:start="215:18" pos:end="215:21">(<argument pos:start="215:19" pos:end="215:20"><expr pos:start="215:19" pos:end="215:20"><name pos:start="215:19" pos:end="215:20">gb</name></expr></argument>)</argument_list></call> <operator pos:start="215:23" pos:end="215:24">!=</operator> <literal type="number" pos:start="215:26" pos:end="215:26">1</literal></expr>)</condition> <block pos:start="215:29" pos:end="223:5">{<block_content pos:start="217:9" pos:end="221:29">

        <if_stmt pos:start="217:9" pos:end="219:62"><if pos:start="217:9" pos:end="219:62">if <condition pos:start="217:12" pos:end="217:49">(<expr pos:start="217:13" pos:end="217:48"><name pos:start="217:13" pos:end="217:27"><name pos:start="217:13" pos:end="217:13">s</name><operator pos:start="217:14" pos:end="217:15">-&gt;</operator><name pos:start="217:16" pos:end="217:20">avctx</name><operator pos:start="217:21" pos:end="217:22">-&gt;</operator><name pos:start="217:23" pos:end="217:27">debug</name></name> <operator pos:start="217:29" pos:end="217:29">&amp;</operator> <name pos:start="217:31" pos:end="217:48">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="219:13" pos:end="219:62"><block_content pos:start="219:13" pos:end="219:62">

            <expr_stmt pos:start="219:13" pos:end="219:62"><expr pos:start="219:13" pos:end="219:61"><call pos:start="219:13" pos:end="219:61"><name pos:start="219:13" pos:end="219:18">av_log</name><argument_list pos:start="219:19" pos:end="219:61">(<argument pos:start="219:20" pos:end="219:27"><expr pos:start="219:20" pos:end="219:27"><name pos:start="219:20" pos:end="219:27"><name pos:start="219:20" pos:end="219:20">s</name><operator pos:start="219:21" pos:end="219:22">-&gt;</operator><name pos:start="219:23" pos:end="219:27">avctx</name></name></expr></argument>, <argument pos:start="219:30" pos:end="219:41"><expr pos:start="219:30" pos:end="219:41"><name pos:start="219:30" pos:end="219:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="219:44" pos:end="219:60"><expr pos:start="219:44" pos:end="219:60"><literal type="string" pos:start="219:44" pos:end="219:60">"vop not coded\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="221:9" pos:end="221:29">return <expr pos:start="221:16" pos:end="221:28"><name pos:start="221:16" pos:end="221:28">FRAME_SKIPPED</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="225:5" pos:end="227:33"><if pos:start="225:5" pos:end="227:33">if <condition pos:start="225:8" pos:end="225:22">(<expr pos:start="225:9" pos:end="225:21"><name pos:start="225:9" pos:end="225:21"><name pos:start="225:9" pos:end="225:11">ctx</name><operator pos:start="225:12" pos:end="225:13">-&gt;</operator><name pos:start="225:14" pos:end="225:21">new_pred</name></name></expr>)</condition><block type="pseudo" pos:start="227:9" pos:end="227:33"><block_content pos:start="227:9" pos:end="227:33">

        <expr_stmt pos:start="227:9" pos:end="227:33"><expr pos:start="227:9" pos:end="227:32"><call pos:start="227:9" pos:end="227:32"><name pos:start="227:9" pos:end="227:23">decode_new_pred</name><argument_list pos:start="227:24" pos:end="227:32">(<argument pos:start="227:25" pos:end="227:27"><expr pos:start="227:25" pos:end="227:27"><name pos:start="227:25" pos:end="227:27">ctx</name></expr></argument>, <argument pos:start="227:30" pos:end="227:31"><expr pos:start="227:30" pos:end="227:31"><name pos:start="227:30" pos:end="227:31">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="231:5" pos:end="247:5"><if pos:start="231:5" pos:end="243:5">if <condition pos:start="231:8" pos:end="237:60">(<expr pos:start="231:9" pos:end="237:59"><name pos:start="231:9" pos:end="231:18"><name pos:start="231:9" pos:end="231:11">ctx</name><operator pos:start="231:12" pos:end="231:13">-&gt;</operator><name pos:start="231:14" pos:end="231:18">shape</name></name> <operator pos:start="231:20" pos:end="231:21">!=</operator> <name pos:start="231:23" pos:end="231:36">BIN_ONLY_SHAPE</name> <operator pos:start="231:38" pos:end="231:39">&amp;&amp;</operator>

                    <operator pos:start="233:21" pos:end="233:21">(</operator><name pos:start="233:22" pos:end="233:33"><name pos:start="233:22" pos:end="233:22">s</name><operator pos:start="233:23" pos:end="233:24">-&gt;</operator><name pos:start="233:25" pos:end="233:33">pict_type</name></name> <operator pos:start="233:35" pos:end="233:36">==</operator> <name pos:start="233:38" pos:end="233:54">AV_PICTURE_TYPE_P</name> <operator pos:start="233:56" pos:end="233:57">||</operator>

                     <operator pos:start="235:22" pos:end="235:22">(</operator><name pos:start="235:23" pos:end="235:34"><name pos:start="235:23" pos:end="235:23">s</name><operator pos:start="235:24" pos:end="235:25">-&gt;</operator><name pos:start="235:26" pos:end="235:34">pict_type</name></name> <operator pos:start="235:36" pos:end="235:37">==</operator> <name pos:start="235:39" pos:end="235:55">AV_PICTURE_TYPE_S</name> <operator pos:start="235:57" pos:end="235:58">&amp;&amp;</operator>

                      <name pos:start="237:23" pos:end="237:43"><name pos:start="237:23" pos:end="237:25">ctx</name><operator pos:start="237:26" pos:end="237:27">-&gt;</operator><name pos:start="237:28" pos:end="237:43">vol_sprite_usage</name></name> <operator pos:start="237:45" pos:end="237:46">==</operator> <name pos:start="237:48" pos:end="237:57">GMC_SPRITE</name><operator pos:start="237:58" pos:end="237:58">)</operator><operator pos:start="237:59" pos:end="237:59">)</operator></expr>)</condition> <block pos:start="237:62" pos:end="243:5">{<block_content pos:start="241:9" pos:end="241:39">

        <comment type="block" pos:start="239:9" pos:end="239:49">/* rounding type for motion estimation */</comment>

        <expr_stmt pos:start="241:9" pos:end="241:39"><expr pos:start="241:9" pos:end="241:38"><name pos:start="241:9" pos:end="241:22"><name pos:start="241:9" pos:end="241:9">s</name><operator pos:start="241:10" pos:end="241:11">-&gt;</operator><name pos:start="241:12" pos:end="241:22">no_rounding</name></name> <operator pos:start="241:24" pos:end="241:24">=</operator> <call pos:start="241:26" pos:end="241:38"><name pos:start="241:26" pos:end="241:34">get_bits1</name><argument_list pos:start="241:35" pos:end="241:38">(<argument pos:start="241:36" pos:end="241:37"><expr pos:start="241:36" pos:end="241:37"><name pos:start="241:36" pos:end="241:37">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="243:7" pos:end="247:5">else <block pos:start="243:12" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:27">

        <expr_stmt pos:start="245:9" pos:end="245:27"><expr pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:22"><name pos:start="245:9" pos:end="245:9">s</name><operator pos:start="245:10" pos:end="245:11">-&gt;</operator><name pos:start="245:12" pos:end="245:22">no_rounding</name></name> <operator pos:start="245:24" pos:end="245:24">=</operator> <literal type="number" pos:start="245:26" pos:end="245:26">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="line" pos:start="249:5" pos:end="249:30">// FIXME reduced res stuff</comment>



    <if_stmt pos:start="253:5" pos:end="281:5"><if pos:start="253:5" pos:end="281:5">if <condition pos:start="253:8" pos:end="253:33">(<expr pos:start="253:9" pos:end="253:32"><name pos:start="253:9" pos:end="253:18"><name pos:start="253:9" pos:end="253:11">ctx</name><operator pos:start="253:12" pos:end="253:13">-&gt;</operator><name pos:start="253:14" pos:end="253:18">shape</name></name> <operator pos:start="253:20" pos:end="253:21">!=</operator> <name pos:start="253:23" pos:end="253:32">RECT_SHAPE</name></expr>)</condition> <block pos:start="253:35" pos:end="281:5">{<block_content pos:start="255:9" pos:end="279:29">

        <if_stmt pos:start="255:9" pos:end="271:9"><if pos:start="255:9" pos:end="271:9">if <condition pos:start="255:12" pos:end="255:76">(<expr pos:start="255:13" pos:end="255:75"><name pos:start="255:13" pos:end="255:33"><name pos:start="255:13" pos:end="255:15">ctx</name><operator pos:start="255:16" pos:end="255:17">-&gt;</operator><name pos:start="255:18" pos:end="255:33">vol_sprite_usage</name></name> <operator pos:start="255:35" pos:end="255:36">!=</operator> <literal type="number" pos:start="255:38" pos:end="255:38">1</literal> <operator pos:start="255:40" pos:end="255:41">||</operator> <name pos:start="255:43" pos:end="255:54"><name pos:start="255:43" pos:end="255:43">s</name><operator pos:start="255:44" pos:end="255:45">-&gt;</operator><name pos:start="255:46" pos:end="255:54">pict_type</name></name> <operator pos:start="255:56" pos:end="255:57">!=</operator> <name pos:start="255:59" pos:end="255:75">AV_PICTURE_TYPE_I</name></expr>)</condition> <block pos:start="255:78" pos:end="271:9">{<block_content pos:start="257:13" pos:end="269:30">

            <expr_stmt pos:start="257:13" pos:end="257:30"><expr pos:start="257:13" pos:end="257:29"><call pos:start="257:13" pos:end="257:29"><name pos:start="257:13" pos:end="257:21">skip_bits</name><argument_list pos:start="257:22" pos:end="257:29">(<argument pos:start="257:23" pos:end="257:24"><expr pos:start="257:23" pos:end="257:24"><name pos:start="257:23" pos:end="257:24">gb</name></expr></argument>, <argument pos:start="257:27" pos:end="257:28"><expr pos:start="257:27" pos:end="257:28"><literal type="number" pos:start="257:27" pos:end="257:28">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="257:33" pos:end="257:43">/* width */</comment>

            <expr_stmt pos:start="259:13" pos:end="259:27"><expr pos:start="259:13" pos:end="259:26"><call pos:start="259:13" pos:end="259:26"><name pos:start="259:13" pos:end="259:22">skip_bits1</name><argument_list pos:start="259:23" pos:end="259:26">(<argument pos:start="259:24" pos:end="259:25"><expr pos:start="259:24" pos:end="259:25"><name pos:start="259:24" pos:end="259:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="259:33" pos:end="259:44">/* marker */</comment>

            <expr_stmt pos:start="261:13" pos:end="261:30"><expr pos:start="261:13" pos:end="261:29"><call pos:start="261:13" pos:end="261:29"><name pos:start="261:13" pos:end="261:21">skip_bits</name><argument_list pos:start="261:22" pos:end="261:29">(<argument pos:start="261:23" pos:end="261:24"><expr pos:start="261:23" pos:end="261:24"><name pos:start="261:23" pos:end="261:24">gb</name></expr></argument>, <argument pos:start="261:27" pos:end="261:28"><expr pos:start="261:27" pos:end="261:28"><literal type="number" pos:start="261:27" pos:end="261:28">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="261:33" pos:end="261:44">/* height */</comment>

            <expr_stmt pos:start="263:13" pos:end="263:27"><expr pos:start="263:13" pos:end="263:26"><call pos:start="263:13" pos:end="263:26"><name pos:start="263:13" pos:end="263:22">skip_bits1</name><argument_list pos:start="263:23" pos:end="263:26">(<argument pos:start="263:24" pos:end="263:25"><expr pos:start="263:24" pos:end="263:25"><name pos:start="263:24" pos:end="263:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="263:33" pos:end="263:44">/* marker */</comment>

            <expr_stmt pos:start="265:13" pos:end="265:30"><expr pos:start="265:13" pos:end="265:29"><call pos:start="265:13" pos:end="265:29"><name pos:start="265:13" pos:end="265:21">skip_bits</name><argument_list pos:start="265:22" pos:end="265:29">(<argument pos:start="265:23" pos:end="265:24"><expr pos:start="265:23" pos:end="265:24"><name pos:start="265:23" pos:end="265:24">gb</name></expr></argument>, <argument pos:start="265:27" pos:end="265:28"><expr pos:start="265:27" pos:end="265:28"><literal type="number" pos:start="265:27" pos:end="265:28">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="265:33" pos:end="265:50">/* hor_spat_ref */</comment>

            <expr_stmt pos:start="267:13" pos:end="267:27"><expr pos:start="267:13" pos:end="267:26"><call pos:start="267:13" pos:end="267:26"><name pos:start="267:13" pos:end="267:22">skip_bits1</name><argument_list pos:start="267:23" pos:end="267:26">(<argument pos:start="267:24" pos:end="267:25"><expr pos:start="267:24" pos:end="267:25"><name pos:start="267:24" pos:end="267:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="267:33" pos:end="267:44">/* marker */</comment>

            <expr_stmt pos:start="269:13" pos:end="269:30"><expr pos:start="269:13" pos:end="269:29"><call pos:start="269:13" pos:end="269:29"><name pos:start="269:13" pos:end="269:21">skip_bits</name><argument_list pos:start="269:22" pos:end="269:29">(<argument pos:start="269:23" pos:end="269:24"><expr pos:start="269:23" pos:end="269:24"><name pos:start="269:23" pos:end="269:24">gb</name></expr></argument>, <argument pos:start="269:27" pos:end="269:28"><expr pos:start="269:27" pos:end="269:28"><literal type="number" pos:start="269:27" pos:end="269:28">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="269:33" pos:end="269:50">/* ver_spat_ref */</comment>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:23"><expr pos:start="273:9" pos:end="273:22"><call pos:start="273:9" pos:end="273:22"><name pos:start="273:9" pos:end="273:18">skip_bits1</name><argument_list pos:start="273:19" pos:end="273:22">(<argument pos:start="273:20" pos:end="273:21"><expr pos:start="273:20" pos:end="273:21"><name pos:start="273:20" pos:end="273:21">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block" pos:start="273:33" pos:end="273:55">/* change_CR_disable */</comment>



        <if_stmt pos:start="277:9" pos:end="279:29"><if pos:start="277:9" pos:end="279:29">if <condition pos:start="277:12" pos:end="277:31">(<expr pos:start="277:13" pos:end="277:30"><call pos:start="277:13" pos:end="277:25"><name pos:start="277:13" pos:end="277:21">get_bits1</name><argument_list pos:start="277:22" pos:end="277:25">(<argument pos:start="277:23" pos:end="277:24"><expr pos:start="277:23" pos:end="277:24"><name pos:start="277:23" pos:end="277:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="277:27" pos:end="277:28">!=</operator> <literal type="number" pos:start="277:30" pos:end="277:30">0</literal></expr>)</condition><block type="pseudo" pos:start="279:13" pos:end="279:29"><block_content pos:start="279:13" pos:end="279:29">

            <expr_stmt pos:start="279:13" pos:end="279:29"><expr pos:start="279:13" pos:end="279:28"><call pos:start="279:13" pos:end="279:28"><name pos:start="279:13" pos:end="279:21">skip_bits</name><argument_list pos:start="279:22" pos:end="279:28">(<argument pos:start="279:23" pos:end="279:24"><expr pos:start="279:23" pos:end="279:24"><name pos:start="279:23" pos:end="279:24">gb</name></expr></argument>, <argument pos:start="279:27" pos:end="279:27"><expr pos:start="279:27" pos:end="279:27"><literal type="number" pos:start="279:27" pos:end="279:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>   <comment type="block" pos:start="279:33" pos:end="279:58">/* constant_alpha_value */</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="285:5" pos:end="285:40">// FIXME complexity estimation stuff</comment>



    <if_stmt pos:start="289:5" pos:end="323:5"><if pos:start="289:5" pos:end="323:5">if <condition pos:start="289:8" pos:end="289:37">(<expr pos:start="289:9" pos:end="289:36"><name pos:start="289:9" pos:end="289:18"><name pos:start="289:9" pos:end="289:11">ctx</name><operator pos:start="289:12" pos:end="289:13">-&gt;</operator><name pos:start="289:14" pos:end="289:18">shape</name></name> <operator pos:start="289:20" pos:end="289:21">!=</operator> <name pos:start="289:23" pos:end="289:36">BIN_ONLY_SHAPE</name></expr>)</condition> <block pos:start="289:39" pos:end="323:5">{<block_content pos:start="291:9" pos:end="321:34">

        <expr_stmt pos:start="291:9" pos:end="291:57"><expr pos:start="291:9" pos:end="291:56"><call pos:start="291:9" pos:end="291:56"><name pos:start="291:9" pos:end="291:22">skip_bits_long</name><argument_list pos:start="291:23" pos:end="291:56">(<argument pos:start="291:24" pos:end="291:25"><expr pos:start="291:24" pos:end="291:25"><name pos:start="291:24" pos:end="291:25">gb</name></expr></argument>, <argument pos:start="291:28" pos:end="291:55"><expr pos:start="291:28" pos:end="291:55"><name pos:start="291:28" pos:end="291:55"><name pos:start="291:28" pos:end="291:30">ctx</name><operator pos:start="291:31" pos:end="291:32">-&gt;</operator><name pos:start="291:33" pos:end="291:55">cplx_estimation_trash_i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="293:9" pos:end="295:61"><if pos:start="293:9" pos:end="295:61">if <condition pos:start="293:12" pos:end="293:46">(<expr pos:start="293:13" pos:end="293:45"><name pos:start="293:13" pos:end="293:24"><name pos:start="293:13" pos:end="293:13">s</name><operator pos:start="293:14" pos:end="293:15">-&gt;</operator><name pos:start="293:16" pos:end="293:24">pict_type</name></name> <operator pos:start="293:26" pos:end="293:27">!=</operator> <name pos:start="293:29" pos:end="293:45">AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo" pos:start="295:13" pos:end="295:61"><block_content pos:start="295:13" pos:end="295:61">

            <expr_stmt pos:start="295:13" pos:end="295:61"><expr pos:start="295:13" pos:end="295:60"><call pos:start="295:13" pos:end="295:60"><name pos:start="295:13" pos:end="295:26">skip_bits_long</name><argument_list pos:start="295:27" pos:end="295:60">(<argument pos:start="295:28" pos:end="295:29"><expr pos:start="295:28" pos:end="295:29"><name pos:start="295:28" pos:end="295:29">gb</name></expr></argument>, <argument pos:start="295:32" pos:end="295:59"><expr pos:start="295:32" pos:end="295:59"><name pos:start="295:32" pos:end="295:59"><name pos:start="295:32" pos:end="295:34">ctx</name><operator pos:start="295:35" pos:end="295:36">-&gt;</operator><name pos:start="295:37" pos:end="295:59">cplx_estimation_trash_p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="297:9" pos:end="299:61"><if pos:start="297:9" pos:end="299:61">if <condition pos:start="297:12" pos:end="297:46">(<expr pos:start="297:13" pos:end="297:45"><name pos:start="297:13" pos:end="297:24"><name pos:start="297:13" pos:end="297:13">s</name><operator pos:start="297:14" pos:end="297:15">-&gt;</operator><name pos:start="297:16" pos:end="297:24">pict_type</name></name> <operator pos:start="297:26" pos:end="297:27">==</operator> <name pos:start="297:29" pos:end="297:45">AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo" pos:start="299:13" pos:end="299:61"><block_content pos:start="299:13" pos:end="299:61">

            <expr_stmt pos:start="299:13" pos:end="299:61"><expr pos:start="299:13" pos:end="299:60"><call pos:start="299:13" pos:end="299:60"><name pos:start="299:13" pos:end="299:26">skip_bits_long</name><argument_list pos:start="299:27" pos:end="299:60">(<argument pos:start="299:28" pos:end="299:29"><expr pos:start="299:28" pos:end="299:29"><name pos:start="299:28" pos:end="299:29">gb</name></expr></argument>, <argument pos:start="299:32" pos:end="299:59"><expr pos:start="299:32" pos:end="299:59"><name pos:start="299:32" pos:end="299:59"><name pos:start="299:32" pos:end="299:34">ctx</name><operator pos:start="299:35" pos:end="299:36">-&gt;</operator><name pos:start="299:37" pos:end="299:59">cplx_estimation_trash_b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="303:9" pos:end="309:9"><if pos:start="303:9" pos:end="309:9">if <condition pos:start="303:12" pos:end="303:34">(<expr pos:start="303:13" pos:end="303:33"><call pos:start="303:13" pos:end="303:29"><name pos:start="303:13" pos:end="303:25">get_bits_left</name><argument_list pos:start="303:26" pos:end="303:29">(<argument pos:start="303:27" pos:end="303:28"><expr pos:start="303:27" pos:end="303:28"><name pos:start="303:27" pos:end="303:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="303:31" pos:end="303:31">&lt;</operator> <literal type="number" pos:start="303:33" pos:end="303:33">3</literal></expr>)</condition> <block pos:start="303:36" pos:end="309:9">{<block_content pos:start="305:13" pos:end="307:39">

            <expr_stmt pos:start="305:13" pos:end="305:65"><expr pos:start="305:13" pos:end="305:64"><call pos:start="305:13" pos:end="305:64"><name pos:start="305:13" pos:end="305:18">av_log</name><argument_list pos:start="305:19" pos:end="305:64">(<argument pos:start="305:20" pos:end="305:27"><expr pos:start="305:20" pos:end="305:27"><name pos:start="305:20" pos:end="305:27"><name pos:start="305:20" pos:end="305:20">s</name><operator pos:start="305:21" pos:end="305:22">-&gt;</operator><name pos:start="305:23" pos:end="305:27">avctx</name></name></expr></argument>, <argument pos:start="305:30" pos:end="305:41"><expr pos:start="305:30" pos:end="305:41"><name pos:start="305:30" pos:end="305:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="305:44" pos:end="305:63"><expr pos:start="305:44" pos:end="305:63"><literal type="string" pos:start="305:44" pos:end="305:63">"Header truncated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="307:13" pos:end="307:39">return <expr pos:start="307:20" pos:end="307:38"><name pos:start="307:20" pos:end="307:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:73"><expr pos:start="311:9" pos:end="311:72"><name pos:start="311:9" pos:end="311:31"><name pos:start="311:9" pos:end="311:11">ctx</name><operator pos:start="311:12" pos:end="311:13">-&gt;</operator><name pos:start="311:14" pos:end="311:31">intra_dc_threshold</name></name> <operator pos:start="311:33" pos:end="311:33">=</operator> <name pos:start="311:35" pos:end="311:72"><name pos:start="311:35" pos:end="311:55">ff_mpeg4_dc_threshold</name><index pos:start="311:56" pos:end="311:72">[<expr pos:start="311:57" pos:end="311:71"><call pos:start="311:57" pos:end="311:71"><name pos:start="311:57" pos:end="311:64">get_bits</name><argument_list pos:start="311:65" pos:end="311:71">(<argument pos:start="311:66" pos:end="311:67"><expr pos:start="311:66" pos:end="311:67"><name pos:start="311:66" pos:end="311:67">gb</name></expr></argument>, <argument pos:start="311:70" pos:end="311:70"><expr pos:start="311:70" pos:end="311:70"><literal type="number" pos:start="311:70" pos:end="311:70">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="313:9" pos:end="321:34"><if pos:start="313:9" pos:end="319:9">if <condition pos:start="313:12" pos:end="313:37">(<expr pos:start="313:13" pos:end="313:36"><operator pos:start="313:13" pos:end="313:13">!</operator><name pos:start="313:14" pos:end="313:36"><name pos:start="313:14" pos:end="313:14">s</name><operator pos:start="313:15" pos:end="313:16">-&gt;</operator><name pos:start="313:17" pos:end="313:36">progressive_sequence</name></name></expr>)</condition> <block pos:start="313:39" pos:end="319:9">{<block_content pos:start="315:13" pos:end="317:47">

            <expr_stmt pos:start="315:13" pos:end="315:47"><expr pos:start="315:13" pos:end="315:46"><name pos:start="315:13" pos:end="315:30"><name pos:start="315:13" pos:end="315:13">s</name><operator pos:start="315:14" pos:end="315:15">-&gt;</operator><name pos:start="315:16" pos:end="315:30">top_field_first</name></name> <operator pos:start="315:32" pos:end="315:32">=</operator> <call pos:start="315:34" pos:end="315:46"><name pos:start="315:34" pos:end="315:42">get_bits1</name><argument_list pos:start="315:43" pos:end="315:46">(<argument pos:start="315:44" pos:end="315:45"><expr pos:start="315:44" pos:end="315:45"><name pos:start="315:44" pos:end="315:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:47"><expr pos:start="317:13" pos:end="317:46"><name pos:start="317:13" pos:end="317:29"><name pos:start="317:13" pos:end="317:13">s</name><operator pos:start="317:14" pos:end="317:15">-&gt;</operator><name pos:start="317:16" pos:end="317:29">alternate_scan</name></name>  <operator pos:start="317:32" pos:end="317:32">=</operator> <call pos:start="317:34" pos:end="317:46"><name pos:start="317:34" pos:end="317:42">get_bits1</name><argument_list pos:start="317:43" pos:end="317:46">(<argument pos:start="317:44" pos:end="317:45"><expr pos:start="317:44" pos:end="317:45"><name pos:start="317:44" pos:end="317:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="319:11" pos:end="321:34">else<block type="pseudo" pos:start="321:13" pos:end="321:34"><block_content pos:start="321:13" pos:end="321:34">

            <expr_stmt pos:start="321:13" pos:end="321:34"><expr pos:start="321:13" pos:end="321:33"><name pos:start="321:13" pos:end="321:29"><name pos:start="321:13" pos:end="321:13">s</name><operator pos:start="321:14" pos:end="321:15">-&gt;</operator><name pos:start="321:16" pos:end="321:29">alternate_scan</name></name> <operator pos:start="321:31" pos:end="321:31">=</operator> <literal type="number" pos:start="321:33" pos:end="321:33">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="327:5" pos:end="347:5"><if pos:start="327:5" pos:end="337:5">if <condition pos:start="327:8" pos:end="327:26">(<expr pos:start="327:9" pos:end="327:25"><name pos:start="327:9" pos:end="327:25"><name pos:start="327:9" pos:end="327:9">s</name><operator pos:start="327:10" pos:end="327:11">-&gt;</operator><name pos:start="327:12" pos:end="327:25">alternate_scan</name></name></expr>)</condition> <block pos:start="327:28" pos:end="337:5">{<block_content pos:start="329:9" pos:end="335:103">

        <expr_stmt pos:start="329:9" pos:end="329:103"><expr pos:start="329:9" pos:end="329:102"><call pos:start="329:9" pos:end="329:102"><name pos:start="329:9" pos:end="329:25">ff_init_scantable</name><argument_list pos:start="329:26" pos:end="329:102">(<argument pos:start="329:27" pos:end="329:50"><expr pos:start="329:27" pos:end="329:50"><name pos:start="329:27" pos:end="329:50"><name pos:start="329:27" pos:end="329:27">s</name><operator pos:start="329:28" pos:end="329:29">-&gt;</operator><name pos:start="329:30" pos:end="329:33">idsp</name><operator pos:start="329:34" pos:end="329:34">.</operator><name pos:start="329:35" pos:end="329:50">idct_permutation</name></name></expr></argument>, <argument pos:start="329:53" pos:end="329:71"><expr pos:start="329:53" pos:end="329:71"><operator pos:start="329:53" pos:end="329:53">&amp;</operator><name pos:start="329:54" pos:end="329:71"><name pos:start="329:54" pos:end="329:54">s</name><operator pos:start="329:55" pos:end="329:56">-&gt;</operator><name pos:start="329:57" pos:end="329:71">inter_scantable</name></name></expr></argument>,   <argument pos:start="329:76" pos:end="329:101"><expr pos:start="329:76" pos:end="329:101"><name pos:start="329:76" pos:end="329:101">ff_alternate_vertical_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:103"><expr pos:start="331:9" pos:end="331:102"><call pos:start="331:9" pos:end="331:102"><name pos:start="331:9" pos:end="331:25">ff_init_scantable</name><argument_list pos:start="331:26" pos:end="331:102">(<argument pos:start="331:27" pos:end="331:50"><expr pos:start="331:27" pos:end="331:50"><name pos:start="331:27" pos:end="331:50"><name pos:start="331:27" pos:end="331:27">s</name><operator pos:start="331:28" pos:end="331:29">-&gt;</operator><name pos:start="331:30" pos:end="331:33">idsp</name><operator pos:start="331:34" pos:end="331:34">.</operator><name pos:start="331:35" pos:end="331:50">idct_permutation</name></name></expr></argument>, <argument pos:start="331:53" pos:end="331:71"><expr pos:start="331:53" pos:end="331:71"><operator pos:start="331:53" pos:end="331:53">&amp;</operator><name pos:start="331:54" pos:end="331:71"><name pos:start="331:54" pos:end="331:54">s</name><operator pos:start="331:55" pos:end="331:56">-&gt;</operator><name pos:start="331:57" pos:end="331:71">intra_scantable</name></name></expr></argument>,   <argument pos:start="331:76" pos:end="331:101"><expr pos:start="331:76" pos:end="331:101"><name pos:start="331:76" pos:end="331:101">ff_alternate_vertical_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:103"><expr pos:start="333:9" pos:end="333:102"><call pos:start="333:9" pos:end="333:102"><name pos:start="333:9" pos:end="333:25">ff_init_scantable</name><argument_list pos:start="333:26" pos:end="333:102">(<argument pos:start="333:27" pos:end="333:50"><expr pos:start="333:27" pos:end="333:50"><name pos:start="333:27" pos:end="333:50"><name pos:start="333:27" pos:end="333:27">s</name><operator pos:start="333:28" pos:end="333:29">-&gt;</operator><name pos:start="333:30" pos:end="333:33">idsp</name><operator pos:start="333:34" pos:end="333:34">.</operator><name pos:start="333:35" pos:end="333:50">idct_permutation</name></name></expr></argument>, <argument pos:start="333:53" pos:end="333:73"><expr pos:start="333:53" pos:end="333:73"><operator pos:start="333:53" pos:end="333:53">&amp;</operator><name pos:start="333:54" pos:end="333:73"><name pos:start="333:54" pos:end="333:54">s</name><operator pos:start="333:55" pos:end="333:56">-&gt;</operator><name pos:start="333:57" pos:end="333:73">intra_h_scantable</name></name></expr></argument>, <argument pos:start="333:76" pos:end="333:101"><expr pos:start="333:76" pos:end="333:101"><name pos:start="333:76" pos:end="333:101">ff_alternate_vertical_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:103"><expr pos:start="335:9" pos:end="335:102"><call pos:start="335:9" pos:end="335:102"><name pos:start="335:9" pos:end="335:25">ff_init_scantable</name><argument_list pos:start="335:26" pos:end="335:102">(<argument pos:start="335:27" pos:end="335:50"><expr pos:start="335:27" pos:end="335:50"><name pos:start="335:27" pos:end="335:50"><name pos:start="335:27" pos:end="335:27">s</name><operator pos:start="335:28" pos:end="335:29">-&gt;</operator><name pos:start="335:30" pos:end="335:33">idsp</name><operator pos:start="335:34" pos:end="335:34">.</operator><name pos:start="335:35" pos:end="335:50">idct_permutation</name></name></expr></argument>, <argument pos:start="335:53" pos:end="335:73"><expr pos:start="335:53" pos:end="335:73"><operator pos:start="335:53" pos:end="335:53">&amp;</operator><name pos:start="335:54" pos:end="335:73"><name pos:start="335:54" pos:end="335:54">s</name><operator pos:start="335:55" pos:end="335:56">-&gt;</operator><name pos:start="335:57" pos:end="335:73">intra_v_scantable</name></name></expr></argument>, <argument pos:start="335:76" pos:end="335:101"><expr pos:start="335:76" pos:end="335:101"><name pos:start="335:76" pos:end="335:101">ff_alternate_vertical_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="337:7" pos:end="347:5">else <block pos:start="337:12" pos:end="347:5">{<block_content pos:start="339:9" pos:end="345:103">

        <expr_stmt pos:start="339:9" pos:end="339:93"><expr pos:start="339:9" pos:end="339:92"><call pos:start="339:9" pos:end="339:92"><name pos:start="339:9" pos:end="339:25">ff_init_scantable</name><argument_list pos:start="339:26" pos:end="339:92">(<argument pos:start="339:27" pos:end="339:50"><expr pos:start="339:27" pos:end="339:50"><name pos:start="339:27" pos:end="339:50"><name pos:start="339:27" pos:end="339:27">s</name><operator pos:start="339:28" pos:end="339:29">-&gt;</operator><name pos:start="339:30" pos:end="339:33">idsp</name><operator pos:start="339:34" pos:end="339:34">.</operator><name pos:start="339:35" pos:end="339:50">idct_permutation</name></name></expr></argument>, <argument pos:start="339:53" pos:end="339:71"><expr pos:start="339:53" pos:end="339:71"><operator pos:start="339:53" pos:end="339:53">&amp;</operator><name pos:start="339:54" pos:end="339:71"><name pos:start="339:54" pos:end="339:54">s</name><operator pos:start="339:55" pos:end="339:56">-&gt;</operator><name pos:start="339:57" pos:end="339:71">inter_scantable</name></name></expr></argument>,   <argument pos:start="339:76" pos:end="339:91"><expr pos:start="339:76" pos:end="339:91"><name pos:start="339:76" pos:end="339:91">ff_zigzag_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:93"><expr pos:start="341:9" pos:end="341:92"><call pos:start="341:9" pos:end="341:92"><name pos:start="341:9" pos:end="341:25">ff_init_scantable</name><argument_list pos:start="341:26" pos:end="341:92">(<argument pos:start="341:27" pos:end="341:50"><expr pos:start="341:27" pos:end="341:50"><name pos:start="341:27" pos:end="341:50"><name pos:start="341:27" pos:end="341:27">s</name><operator pos:start="341:28" pos:end="341:29">-&gt;</operator><name pos:start="341:30" pos:end="341:33">idsp</name><operator pos:start="341:34" pos:end="341:34">.</operator><name pos:start="341:35" pos:end="341:50">idct_permutation</name></name></expr></argument>, <argument pos:start="341:53" pos:end="341:71"><expr pos:start="341:53" pos:end="341:71"><operator pos:start="341:53" pos:end="341:53">&amp;</operator><name pos:start="341:54" pos:end="341:71"><name pos:start="341:54" pos:end="341:54">s</name><operator pos:start="341:55" pos:end="341:56">-&gt;</operator><name pos:start="341:57" pos:end="341:71">intra_scantable</name></name></expr></argument>,   <argument pos:start="341:76" pos:end="341:91"><expr pos:start="341:76" pos:end="341:91"><name pos:start="341:76" pos:end="341:91">ff_zigzag_direct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:105"><expr pos:start="343:9" pos:end="343:104"><call pos:start="343:9" pos:end="343:104"><name pos:start="343:9" pos:end="343:25">ff_init_scantable</name><argument_list pos:start="343:26" pos:end="343:104">(<argument pos:start="343:27" pos:end="343:50"><expr pos:start="343:27" pos:end="343:50"><name pos:start="343:27" pos:end="343:50"><name pos:start="343:27" pos:end="343:27">s</name><operator pos:start="343:28" pos:end="343:29">-&gt;</operator><name pos:start="343:30" pos:end="343:33">idsp</name><operator pos:start="343:34" pos:end="343:34">.</operator><name pos:start="343:35" pos:end="343:50">idct_permutation</name></name></expr></argument>, <argument pos:start="343:53" pos:end="343:73"><expr pos:start="343:53" pos:end="343:73"><operator pos:start="343:53" pos:end="343:53">&amp;</operator><name pos:start="343:54" pos:end="343:73"><name pos:start="343:54" pos:end="343:54">s</name><operator pos:start="343:55" pos:end="343:56">-&gt;</operator><name pos:start="343:57" pos:end="343:73">intra_h_scantable</name></name></expr></argument>, <argument pos:start="343:76" pos:end="343:103"><expr pos:start="343:76" pos:end="343:103"><name pos:start="343:76" pos:end="343:103">ff_alternate_horizontal_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="345:103"><expr pos:start="345:9" pos:end="345:102"><call pos:start="345:9" pos:end="345:102"><name pos:start="345:9" pos:end="345:25">ff_init_scantable</name><argument_list pos:start="345:26" pos:end="345:102">(<argument pos:start="345:27" pos:end="345:50"><expr pos:start="345:27" pos:end="345:50"><name pos:start="345:27" pos:end="345:50"><name pos:start="345:27" pos:end="345:27">s</name><operator pos:start="345:28" pos:end="345:29">-&gt;</operator><name pos:start="345:30" pos:end="345:33">idsp</name><operator pos:start="345:34" pos:end="345:34">.</operator><name pos:start="345:35" pos:end="345:50">idct_permutation</name></name></expr></argument>, <argument pos:start="345:53" pos:end="345:73"><expr pos:start="345:53" pos:end="345:73"><operator pos:start="345:53" pos:end="345:53">&amp;</operator><name pos:start="345:54" pos:end="345:73"><name pos:start="345:54" pos:end="345:54">s</name><operator pos:start="345:55" pos:end="345:56">-&gt;</operator><name pos:start="345:57" pos:end="345:73">intra_v_scantable</name></name></expr></argument>, <argument pos:start="345:76" pos:end="345:101"><expr pos:start="345:76" pos:end="345:101"><name pos:start="345:76" pos:end="345:101">ff_alternate_vertical_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="351:5" pos:end="371:5"><if pos:start="351:5" pos:end="371:5">if <condition pos:start="351:8" pos:end="355:46">(<expr pos:start="351:9" pos:end="355:45"><name pos:start="351:9" pos:end="351:20"><name pos:start="351:9" pos:end="351:9">s</name><operator pos:start="351:10" pos:end="351:11">-&gt;</operator><name pos:start="351:12" pos:end="351:20">pict_type</name></name> <operator pos:start="351:22" pos:end="351:23">==</operator> <name pos:start="351:25" pos:end="351:41">AV_PICTURE_TYPE_S</name> <operator pos:start="351:43" pos:end="351:44">&amp;&amp;</operator>

        <operator pos:start="353:9" pos:end="353:9">(</operator><name pos:start="353:10" pos:end="353:30"><name pos:start="353:10" pos:end="353:12">ctx</name><operator pos:start="353:13" pos:end="353:14">-&gt;</operator><name pos:start="353:15" pos:end="353:30">vol_sprite_usage</name></name> <operator pos:start="353:32" pos:end="353:33">==</operator> <name pos:start="353:35" pos:end="353:47">STATIC_SPRITE</name> <operator pos:start="353:49" pos:end="353:50">||</operator>

         <name pos:start="355:10" pos:end="355:30"><name pos:start="355:10" pos:end="355:12">ctx</name><operator pos:start="355:13" pos:end="355:14">-&gt;</operator><name pos:start="355:15" pos:end="355:30">vol_sprite_usage</name></name> <operator pos:start="355:32" pos:end="355:33">==</operator> <name pos:start="355:35" pos:end="355:44">GMC_SPRITE</name><operator pos:start="355:45" pos:end="355:45">)</operator></expr>)</condition> <block pos:start="355:48" pos:end="371:5">{<block_content pos:start="357:9" pos:end="369:76">

        <if_stmt pos:start="357:9" pos:end="359:39"><if pos:start="357:9" pos:end="359:39">if <condition pos:start="357:12" pos:end="357:56">(<expr pos:start="357:13" pos:end="357:55"><call pos:start="357:13" pos:end="357:51"><name pos:start="357:13" pos:end="357:42">mpeg4_decode_sprite_trajectory</name><argument_list pos:start="357:43" pos:end="357:51">(<argument pos:start="357:44" pos:end="357:46"><expr pos:start="357:44" pos:end="357:46"><name pos:start="357:44" pos:end="357:46">ctx</name></expr></argument>, <argument pos:start="357:49" pos:end="357:50"><expr pos:start="357:49" pos:end="357:50"><name pos:start="357:49" pos:end="357:50">gb</name></expr></argument>)</argument_list></call> <operator pos:start="357:53" pos:end="357:53">&lt;</operator> <literal type="number" pos:start="357:55" pos:end="357:55">0</literal></expr>)</condition><block type="pseudo" pos:start="359:13" pos:end="359:39"><block_content pos:start="359:13" pos:end="359:39">

            <return pos:start="359:13" pos:end="359:39">return <expr pos:start="359:20" pos:end="359:38"><name pos:start="359:20" pos:end="359:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="361:9" pos:end="365:63"><if pos:start="361:9" pos:end="365:63">if <condition pos:start="361:12" pos:end="361:42">(<expr pos:start="361:13" pos:end="361:41"><name pos:start="361:13" pos:end="361:41"><name pos:start="361:13" pos:end="361:15">ctx</name><operator pos:start="361:16" pos:end="361:17">-&gt;</operator><name pos:start="361:18" pos:end="361:41">sprite_brightness_change</name></name></expr>)</condition><block type="pseudo" pos:start="363:13" pos:end="365:63"><block_content pos:start="363:13" pos:end="365:63">

            <expr_stmt pos:start="363:13" pos:end="365:63"><expr pos:start="363:13" pos:end="365:62"><call pos:start="363:13" pos:end="365:62"><name pos:start="363:13" pos:end="363:18">av_log</name><argument_list pos:start="363:19" pos:end="365:62">(<argument pos:start="363:20" pos:end="363:27"><expr pos:start="363:20" pos:end="363:27"><name pos:start="363:20" pos:end="363:27"><name pos:start="363:20" pos:end="363:20">s</name><operator pos:start="363:21" pos:end="363:22">-&gt;</operator><name pos:start="363:23" pos:end="363:27">avctx</name></name></expr></argument>, <argument pos:start="363:30" pos:end="363:41"><expr pos:start="363:30" pos:end="363:41"><name pos:start="363:30" pos:end="363:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="365:20" pos:end="365:61"><expr pos:start="365:20" pos:end="365:61"><literal type="string" pos:start="365:20" pos:end="365:61">"sprite_brightness_change not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="367:9" pos:end="369:76"><if pos:start="367:9" pos:end="369:76">if <condition pos:start="367:12" pos:end="367:51">(<expr pos:start="367:13" pos:end="367:50"><name pos:start="367:13" pos:end="367:33"><name pos:start="367:13" pos:end="367:15">ctx</name><operator pos:start="367:16" pos:end="367:17">-&gt;</operator><name pos:start="367:18" pos:end="367:33">vol_sprite_usage</name></name> <operator pos:start="367:35" pos:end="367:36">==</operator> <name pos:start="367:38" pos:end="367:50">STATIC_SPRITE</name></expr>)</condition><block type="pseudo" pos:start="369:13" pos:end="369:76"><block_content pos:start="369:13" pos:end="369:76">

            <expr_stmt pos:start="369:13" pos:end="369:76"><expr pos:start="369:13" pos:end="369:75"><call pos:start="369:13" pos:end="369:75"><name pos:start="369:13" pos:end="369:18">av_log</name><argument_list pos:start="369:19" pos:end="369:75">(<argument pos:start="369:20" pos:end="369:27"><expr pos:start="369:20" pos:end="369:27"><name pos:start="369:20" pos:end="369:27"><name pos:start="369:20" pos:end="369:20">s</name><operator pos:start="369:21" pos:end="369:22">-&gt;</operator><name pos:start="369:23" pos:end="369:27">avctx</name></name></expr></argument>, <argument pos:start="369:30" pos:end="369:41"><expr pos:start="369:30" pos:end="369:41"><name pos:start="369:30" pos:end="369:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="369:44" pos:end="369:74"><expr pos:start="369:44" pos:end="369:74"><literal type="string" pos:start="369:44" pos:end="369:74">"static sprite not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="375:5" pos:end="495:5"><if pos:start="375:5" pos:end="495:5">if <condition pos:start="375:8" pos:end="375:37">(<expr pos:start="375:9" pos:end="375:36"><name pos:start="375:9" pos:end="375:18"><name pos:start="375:9" pos:end="375:11">ctx</name><operator pos:start="375:12" pos:end="375:13">-&gt;</operator><name pos:start="375:14" pos:end="375:18">shape</name></name> <operator pos:start="375:20" pos:end="375:21">!=</operator> <name pos:start="375:23" pos:end="375:36">BIN_ONLY_SHAPE</name></expr>)</condition> <block pos:start="375:39" pos:end="495:5">{<block_content pos:start="377:9" pos:end="493:9">

        <expr_stmt pos:start="377:9" pos:end="377:72"><expr pos:start="377:9" pos:end="377:71"><name pos:start="377:9" pos:end="377:24"><name pos:start="377:9" pos:end="377:9">s</name><operator pos:start="377:10" pos:end="377:11">-&gt;</operator><name pos:start="377:12" pos:end="377:24">chroma_qscale</name></name> <operator pos:start="377:26" pos:end="377:26">=</operator> <name pos:start="377:28" pos:end="377:36"><name pos:start="377:28" pos:end="377:28">s</name><operator pos:start="377:29" pos:end="377:30">-&gt;</operator><name pos:start="377:31" pos:end="377:36">qscale</name></name> <operator pos:start="377:38" pos:end="377:38">=</operator> <call pos:start="377:40" pos:end="377:71"><name pos:start="377:40" pos:end="377:47">get_bits</name><argument_list pos:start="377:48" pos:end="377:71">(<argument pos:start="377:49" pos:end="377:50"><expr pos:start="377:49" pos:end="377:50"><name pos:start="377:49" pos:end="377:50">gb</name></expr></argument>, <argument pos:start="377:53" pos:end="377:70"><expr pos:start="377:53" pos:end="377:70"><name pos:start="377:53" pos:end="377:70"><name pos:start="377:53" pos:end="377:53">s</name><operator pos:start="377:54" pos:end="377:55">-&gt;</operator><name pos:start="377:56" pos:end="377:70">quant_precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="379:9" pos:end="387:9"><if pos:start="379:9" pos:end="387:9">if <condition pos:start="379:12" pos:end="379:27">(<expr pos:start="379:13" pos:end="379:26"><name pos:start="379:13" pos:end="379:21"><name pos:start="379:13" pos:end="379:13">s</name><operator pos:start="379:14" pos:end="379:15">-&gt;</operator><name pos:start="379:16" pos:end="379:21">qscale</name></name> <operator pos:start="379:23" pos:end="379:24">==</operator> <literal type="number" pos:start="379:26" pos:end="379:26">0</literal></expr>)</condition> <block pos:start="379:29" pos:end="387:9">{<block_content pos:start="381:13" pos:end="385:39">

            <expr_stmt pos:start="381:13" pos:end="383:77"><expr pos:start="381:13" pos:end="383:76"><call pos:start="381:13" pos:end="383:76"><name pos:start="381:13" pos:end="381:18">av_log</name><argument_list pos:start="381:19" pos:end="383:76">(<argument pos:start="381:20" pos:end="381:27"><expr pos:start="381:20" pos:end="381:27"><name pos:start="381:20" pos:end="381:27"><name pos:start="381:20" pos:end="381:20">s</name><operator pos:start="381:21" pos:end="381:22">-&gt;</operator><name pos:start="381:23" pos:end="381:27">avctx</name></name></expr></argument>, <argument pos:start="381:30" pos:end="381:41"><expr pos:start="381:30" pos:end="381:41"><name pos:start="381:30" pos:end="381:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="383:20" pos:end="383:75"><expr pos:start="383:20" pos:end="383:75"><literal type="string" pos:start="383:20" pos:end="383:75">"Error, header damaged or not MPEG4 header (qscale=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="385:13" pos:end="385:39">return <expr pos:start="385:20" pos:end="385:38"><name pos:start="385:20" pos:end="385:38">AVERROR_INVALIDDATA</name></expr>;</return>  <comment type="line" pos:start="385:42" pos:end="385:116">// makes no sense to continue, as there is nothing left from the image then</comment>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="391:9" pos:end="409:26"><if pos:start="391:9" pos:end="407:9">if <condition pos:start="391:12" pos:end="391:46">(<expr pos:start="391:13" pos:end="391:45"><name pos:start="391:13" pos:end="391:24"><name pos:start="391:13" pos:end="391:13">s</name><operator pos:start="391:14" pos:end="391:15">-&gt;</operator><name pos:start="391:16" pos:end="391:24">pict_type</name></name> <operator pos:start="391:26" pos:end="391:27">!=</operator> <name pos:start="391:29" pos:end="391:45">AV_PICTURE_TYPE_I</name></expr>)</condition> <block pos:start="391:48" pos:end="407:9">{<block_content pos:start="393:13" pos:end="405:13">

            <expr_stmt pos:start="393:13" pos:end="393:40"><expr pos:start="393:13" pos:end="393:39"><name pos:start="393:13" pos:end="393:21"><name pos:start="393:13" pos:end="393:13">s</name><operator pos:start="393:14" pos:end="393:15">-&gt;</operator><name pos:start="393:16" pos:end="393:21">f_code</name></name> <operator pos:start="393:23" pos:end="393:23">=</operator> <call pos:start="393:25" pos:end="393:39"><name pos:start="393:25" pos:end="393:32">get_bits</name><argument_list pos:start="393:33" pos:end="393:39">(<argument pos:start="393:34" pos:end="393:35"><expr pos:start="393:34" pos:end="393:35"><name pos:start="393:34" pos:end="393:35">gb</name></expr></argument>, <argument pos:start="393:38" pos:end="393:38"><expr pos:start="393:38" pos:end="393:38"><literal type="number" pos:start="393:38" pos:end="393:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block" pos:start="393:49" pos:end="393:63">/* fcode_for */</comment>

            <if_stmt pos:start="395:13" pos:end="405:13"><if pos:start="395:13" pos:end="405:13">if <condition pos:start="395:16" pos:end="395:31">(<expr pos:start="395:17" pos:end="395:30"><name pos:start="395:17" pos:end="395:25"><name pos:start="395:17" pos:end="395:17">s</name><operator pos:start="395:18" pos:end="395:19">-&gt;</operator><name pos:start="395:20" pos:end="395:25">f_code</name></name> <operator pos:start="395:27" pos:end="395:28">==</operator> <literal type="number" pos:start="395:30" pos:end="395:30">0</literal></expr>)</condition> <block pos:start="395:33" pos:end="405:13">{<block_content pos:start="397:17" pos:end="403:43">

                <expr_stmt pos:start="397:17" pos:end="399:81"><expr pos:start="397:17" pos:end="399:80"><call pos:start="397:17" pos:end="399:80"><name pos:start="397:17" pos:end="397:22">av_log</name><argument_list pos:start="397:23" pos:end="399:80">(<argument pos:start="397:24" pos:end="397:31"><expr pos:start="397:24" pos:end="397:31"><name pos:start="397:24" pos:end="397:31"><name pos:start="397:24" pos:end="397:24">s</name><operator pos:start="397:25" pos:end="397:26">-&gt;</operator><name pos:start="397:27" pos:end="397:31">avctx</name></name></expr></argument>, <argument pos:start="397:34" pos:end="397:45"><expr pos:start="397:34" pos:end="397:45"><name pos:start="397:34" pos:end="397:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="399:24" pos:end="399:79"><expr pos:start="399:24" pos:end="399:79"><literal type="string" pos:start="399:24" pos:end="399:79">"Error, header damaged or not MPEG4 header (f_code=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="401:17" pos:end="401:30"><expr pos:start="401:17" pos:end="401:29"><name pos:start="401:17" pos:end="401:25"><name pos:start="401:17" pos:end="401:17">s</name><operator pos:start="401:18" pos:end="401:19">-&gt;</operator><name pos:start="401:20" pos:end="401:25">f_code</name></name> <operator pos:start="401:27" pos:end="401:27">=</operator> <literal type="number" pos:start="401:29" pos:end="401:29">1</literal></expr>;</expr_stmt>

                <return pos:start="403:17" pos:end="403:43">return <expr pos:start="403:24" pos:end="403:42"><name pos:start="403:24" pos:end="403:42">AVERROR_INVALIDDATA</name></expr>;</return>  <comment type="line" pos:start="403:46" pos:end="403:120">// makes no sense to continue, as there is nothing left from the image then</comment>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="407:11" pos:end="409:26">else<block type="pseudo" pos:start="409:13" pos:end="409:26"><block_content pos:start="409:13" pos:end="409:26">

            <expr_stmt pos:start="409:13" pos:end="409:26"><expr pos:start="409:13" pos:end="409:25"><name pos:start="409:13" pos:end="409:21"><name pos:start="409:13" pos:end="409:13">s</name><operator pos:start="409:14" pos:end="409:15">-&gt;</operator><name pos:start="409:16" pos:end="409:21">f_code</name></name> <operator pos:start="409:23" pos:end="409:23">=</operator> <literal type="number" pos:start="409:25" pos:end="409:25">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="413:9" pos:end="431:26"><if pos:start="413:9" pos:end="429:9">if <condition pos:start="413:12" pos:end="413:46">(<expr pos:start="413:13" pos:end="413:45"><name pos:start="413:13" pos:end="413:24"><name pos:start="413:13" pos:end="413:13">s</name><operator pos:start="413:14" pos:end="413:15">-&gt;</operator><name pos:start="413:16" pos:end="413:24">pict_type</name></name> <operator pos:start="413:26" pos:end="413:27">==</operator> <name pos:start="413:29" pos:end="413:45">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="413:48" pos:end="429:9">{<block_content pos:start="415:13" pos:end="427:13">

            <expr_stmt pos:start="415:13" pos:end="415:40"><expr pos:start="415:13" pos:end="415:39"><name pos:start="415:13" pos:end="415:21"><name pos:start="415:13" pos:end="415:13">s</name><operator pos:start="415:14" pos:end="415:15">-&gt;</operator><name pos:start="415:16" pos:end="415:21">b_code</name></name> <operator pos:start="415:23" pos:end="415:23">=</operator> <call pos:start="415:25" pos:end="415:39"><name pos:start="415:25" pos:end="415:32">get_bits</name><argument_list pos:start="415:33" pos:end="415:39">(<argument pos:start="415:34" pos:end="415:35"><expr pos:start="415:34" pos:end="415:35"><name pos:start="415:34" pos:end="415:35">gb</name></expr></argument>, <argument pos:start="415:38" pos:end="415:38"><expr pos:start="415:38" pos:end="415:38"><literal type="number" pos:start="415:38" pos:end="415:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="417:13" pos:end="427:13"><if pos:start="417:13" pos:end="427:13">if <condition pos:start="417:16" pos:end="417:31">(<expr pos:start="417:17" pos:end="417:30"><name pos:start="417:17" pos:end="417:25"><name pos:start="417:17" pos:end="417:17">s</name><operator pos:start="417:18" pos:end="417:19">-&gt;</operator><name pos:start="417:20" pos:end="417:25">b_code</name></name> <operator pos:start="417:27" pos:end="417:28">==</operator> <literal type="number" pos:start="417:30" pos:end="417:30">0</literal></expr>)</condition> <block pos:start="417:33" pos:end="427:13">{<block_content pos:start="419:17" pos:end="425:43">

                <expr_stmt pos:start="419:17" pos:end="421:81"><expr pos:start="419:17" pos:end="421:80"><call pos:start="419:17" pos:end="421:80"><name pos:start="419:17" pos:end="419:22">av_log</name><argument_list pos:start="419:23" pos:end="421:80">(<argument pos:start="419:24" pos:end="419:31"><expr pos:start="419:24" pos:end="419:31"><name pos:start="419:24" pos:end="419:31"><name pos:start="419:24" pos:end="419:24">s</name><operator pos:start="419:25" pos:end="419:26">-&gt;</operator><name pos:start="419:27" pos:end="419:31">avctx</name></name></expr></argument>, <argument pos:start="419:34" pos:end="419:45"><expr pos:start="419:34" pos:end="419:45"><name pos:start="419:34" pos:end="419:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="421:24" pos:end="421:79"><expr pos:start="421:24" pos:end="421:79"><literal type="string" pos:start="421:24" pos:end="421:79">"Error, header damaged or not MPEG4 header (b_code=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="423:17" pos:end="423:28"><expr pos:start="423:17" pos:end="423:27"><name pos:start="423:17" pos:end="423:25"><name pos:start="423:17" pos:end="423:17">s</name><operator pos:start="423:18" pos:end="423:19">-&gt;</operator><name pos:start="423:20" pos:end="423:25">b_code</name></name><operator pos:start="423:26" pos:end="423:26">=</operator><literal type="number" pos:start="423:27" pos:end="423:27">1</literal></expr>;</expr_stmt>

                <return pos:start="425:17" pos:end="425:43">return <expr pos:start="425:24" pos:end="425:42"><name pos:start="425:24" pos:end="425:42">AVERROR_INVALIDDATA</name></expr>;</return> <comment type="line" pos:start="425:45" pos:end="425:117">// makes no sense to continue, as the MV decoding will break very quickly</comment>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="429:11" pos:end="431:26">else<block type="pseudo" pos:start="431:13" pos:end="431:26"><block_content pos:start="431:13" pos:end="431:26">

            <expr_stmt pos:start="431:13" pos:end="431:26"><expr pos:start="431:13" pos:end="431:25"><name pos:start="431:13" pos:end="431:21"><name pos:start="431:13" pos:end="431:13">s</name><operator pos:start="431:14" pos:end="431:15">-&gt;</operator><name pos:start="431:16" pos:end="431:21">b_code</name></name> <operator pos:start="431:23" pos:end="431:23">=</operator> <literal type="number" pos:start="431:25" pos:end="431:25">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="435:9" pos:end="467:9"><if pos:start="435:9" pos:end="467:9">if <condition pos:start="435:12" pos:end="435:49">(<expr pos:start="435:13" pos:end="435:48"><name pos:start="435:13" pos:end="435:27"><name pos:start="435:13" pos:end="435:13">s</name><operator pos:start="435:14" pos:end="435:15">-&gt;</operator><name pos:start="435:16" pos:end="435:20">avctx</name><operator pos:start="435:21" pos:end="435:22">-&gt;</operator><name pos:start="435:23" pos:end="435:27">debug</name></name> <operator pos:start="435:29" pos:end="435:29">&amp;</operator> <name pos:start="435:31" pos:end="435:48">FF_DEBUG_PICT_INFO</name></expr>)</condition> <block pos:start="435:51" pos:end="467:9">{<block_content pos:start="437:13" pos:end="465:20">

            <expr_stmt pos:start="437:13" pos:end="465:20"><expr pos:start="437:13" pos:end="465:19"><call pos:start="437:13" pos:end="465:19"><name pos:start="437:13" pos:end="437:18">av_log</name><argument_list pos:start="437:19" pos:end="465:19">(<argument pos:start="437:20" pos:end="437:27"><expr pos:start="437:20" pos:end="437:27"><name pos:start="437:20" pos:end="437:27"><name pos:start="437:20" pos:end="437:20">s</name><operator pos:start="437:21" pos:end="437:22">-&gt;</operator><name pos:start="437:23" pos:end="437:27">avctx</name></name></expr></argument>, <argument pos:start="437:30" pos:end="437:41"><expr pos:start="437:30" pos:end="437:41"><name pos:start="437:30" pos:end="437:41">AV_LOG_DEBUG</name></expr></argument>,

                   <argument pos:start="439:20" pos:end="439:161"><expr pos:start="439:20" pos:end="439:161"><literal type="string" pos:start="439:20" pos:end="439:142">"qp:%d fc:%d,%d %s size:%d pro:%d alt:%d top:%d %spel part:%d resync:%d w:%d a:%d rnd:%d vot:%d%s dc:%d ce:%d/%d/%d time:%"</literal><name pos:start="439:143" pos:end="439:148">PRId64</name><literal type="string" pos:start="439:149" pos:end="439:161">" tincr:%d\n"</literal></expr></argument>,

                   <argument pos:start="441:20" pos:end="441:28"><expr pos:start="441:20" pos:end="441:28"><name pos:start="441:20" pos:end="441:28"><name pos:start="441:20" pos:end="441:20">s</name><operator pos:start="441:21" pos:end="441:22">-&gt;</operator><name pos:start="441:23" pos:end="441:28">qscale</name></name></expr></argument>, <argument pos:start="441:31" pos:end="441:39"><expr pos:start="441:31" pos:end="441:39"><name pos:start="441:31" pos:end="441:39"><name pos:start="441:31" pos:end="441:31">s</name><operator pos:start="441:32" pos:end="441:33">-&gt;</operator><name pos:start="441:34" pos:end="441:39">f_code</name></name></expr></argument>, <argument pos:start="441:42" pos:end="441:50"><expr pos:start="441:42" pos:end="441:50"><name pos:start="441:42" pos:end="441:50"><name pos:start="441:42" pos:end="441:42">s</name><operator pos:start="441:43" pos:end="441:44">-&gt;</operator><name pos:start="441:45" pos:end="441:50">b_code</name></name></expr></argument>,

                   <argument pos:start="443:20" pos:end="443:152"><expr pos:start="443:20" pos:end="443:152"><ternary pos:start="443:20" pos:end="443:152"><condition pos:start="443:20" pos:end="443:54"><expr pos:start="443:20" pos:end="443:52"><name pos:start="443:20" pos:end="443:31"><name pos:start="443:20" pos:end="443:20">s</name><operator pos:start="443:21" pos:end="443:22">-&gt;</operator><name pos:start="443:23" pos:end="443:31">pict_type</name></name> <operator pos:start="443:33" pos:end="443:34">==</operator> <name pos:start="443:36" pos:end="443:52">AV_PICTURE_TYPE_I</name></expr> ?</condition><then pos:start="443:56" pos:end="443:58"> <expr pos:start="443:56" pos:end="443:58"><literal type="string" pos:start="443:56" pos:end="443:58">"I"</literal></expr> </then><else pos:start="443:60" pos:end="443:152">: <expr pos:start="443:62" pos:end="443:152"><operator pos:start="443:62" pos:end="443:62">(</operator><ternary pos:start="443:63" pos:end="443:151"><condition pos:start="443:63" pos:end="443:97"><expr pos:start="443:63" pos:end="443:95"><name pos:start="443:63" pos:end="443:74"><name pos:start="443:63" pos:end="443:63">s</name><operator pos:start="443:64" pos:end="443:65">-&gt;</operator><name pos:start="443:66" pos:end="443:74">pict_type</name></name> <operator pos:start="443:76" pos:end="443:77">==</operator> <name pos:start="443:79" pos:end="443:95">AV_PICTURE_TYPE_P</name></expr> ?</condition><then pos:start="443:99" pos:end="443:101"> <expr pos:start="443:99" pos:end="443:101"><literal type="string" pos:start="443:99" pos:end="443:101">"P"</literal></expr> </then><else pos:start="443:103" pos:end="443:151">: <expr pos:start="443:105" pos:end="443:151"><operator pos:start="443:105" pos:end="443:105">(</operator><ternary pos:start="443:106" pos:end="443:150"><condition pos:start="443:106" pos:end="443:140"><expr pos:start="443:106" pos:end="443:138"><name pos:start="443:106" pos:end="443:117"><name pos:start="443:106" pos:end="443:106">s</name><operator pos:start="443:107" pos:end="443:108">-&gt;</operator><name pos:start="443:109" pos:end="443:117">pict_type</name></name> <operator pos:start="443:119" pos:end="443:120">==</operator> <name pos:start="443:122" pos:end="443:138">AV_PICTURE_TYPE_B</name></expr> ?</condition><then pos:start="443:142" pos:end="443:144"> <expr pos:start="443:142" pos:end="443:144"><literal type="string" pos:start="443:142" pos:end="443:144">"B"</literal></expr> </then><else pos:start="443:146" pos:end="443:150">: <expr pos:start="443:148" pos:end="443:150"><literal type="string" pos:start="443:148" pos:end="443:150">"S"</literal></expr></else></ternary><operator pos:start="443:151" pos:end="443:151">)</operator></expr></else></ternary><operator pos:start="443:152" pos:end="443:152">)</operator></expr></else></ternary></expr></argument>,

                   <argument pos:start="445:20" pos:end="445:35"><expr pos:start="445:20" pos:end="445:35"><name pos:start="445:20" pos:end="445:35"><name pos:start="445:20" pos:end="445:21">gb</name><operator pos:start="445:22" pos:end="445:23">-&gt;</operator><name pos:start="445:24" pos:end="445:35">size_in_bits</name></name></expr></argument>,<argument pos:start="445:37" pos:end="445:59"><expr pos:start="445:37" pos:end="445:59"><name pos:start="445:37" pos:end="445:59"><name pos:start="445:37" pos:end="445:37">s</name><operator pos:start="445:38" pos:end="445:39">-&gt;</operator><name pos:start="445:40" pos:end="445:59">progressive_sequence</name></name></expr></argument>, <argument pos:start="445:62" pos:end="445:78"><expr pos:start="445:62" pos:end="445:78"><name pos:start="445:62" pos:end="445:78"><name pos:start="445:62" pos:end="445:62">s</name><operator pos:start="445:63" pos:end="445:64">-&gt;</operator><name pos:start="445:65" pos:end="445:78">alternate_scan</name></name></expr></argument>,

                   <argument pos:start="447:20" pos:end="447:37"><expr pos:start="447:20" pos:end="447:37"><name pos:start="447:20" pos:end="447:37"><name pos:start="447:20" pos:end="447:20">s</name><operator pos:start="447:21" pos:end="447:22">-&gt;</operator><name pos:start="447:23" pos:end="447:37">top_field_first</name></name></expr></argument>, <argument pos:start="447:40" pos:end="447:68"><expr pos:start="447:40" pos:end="447:68"><ternary pos:start="447:40" pos:end="447:68"><condition pos:start="447:40" pos:end="447:58"><expr pos:start="447:40" pos:end="447:56"><name pos:start="447:40" pos:end="447:56"><name pos:start="447:40" pos:end="447:40">s</name><operator pos:start="447:41" pos:end="447:42">-&gt;</operator><name pos:start="447:43" pos:end="447:56">quarter_sample</name></name></expr> ?</condition><then pos:start="447:60" pos:end="447:62"> <expr pos:start="447:60" pos:end="447:62"><literal type="string" pos:start="447:60" pos:end="447:62">"q"</literal></expr> </then><else pos:start="447:64" pos:end="447:68">: <expr pos:start="447:66" pos:end="447:68"><literal type="string" pos:start="447:66" pos:end="447:68">"h"</literal></expr></else></ternary></expr></argument>,

                   <argument pos:start="449:20" pos:end="449:39"><expr pos:start="449:20" pos:end="449:39"><name pos:start="449:20" pos:end="449:39"><name pos:start="449:20" pos:end="449:20">s</name><operator pos:start="449:21" pos:end="449:22">-&gt;</operator><name pos:start="449:23" pos:end="449:39">data_partitioning</name></name></expr></argument>, <argument pos:start="449:42" pos:end="449:59"><expr pos:start="449:42" pos:end="449:59"><name pos:start="449:42" pos:end="449:59"><name pos:start="449:42" pos:end="449:44">ctx</name><operator pos:start="449:45" pos:end="449:46">-&gt;</operator><name pos:start="449:47" pos:end="449:59">resync_marker</name></name></expr></argument>,

                   <argument pos:start="451:20" pos:end="451:49"><expr pos:start="451:20" pos:end="451:49"><name pos:start="451:20" pos:end="451:49"><name pos:start="451:20" pos:end="451:22">ctx</name><operator pos:start="451:23" pos:end="451:24">-&gt;</operator><name pos:start="451:25" pos:end="451:49">num_sprite_warping_points</name></name></expr></argument>, <argument pos:start="451:52" pos:end="451:77"><expr pos:start="451:52" pos:end="451:77"><name pos:start="451:52" pos:end="451:77"><name pos:start="451:52" pos:end="451:52">s</name><operator pos:start="451:53" pos:end="451:54">-&gt;</operator><name pos:start="451:55" pos:end="451:77">sprite_warping_accuracy</name></name></expr></argument>,

                   <argument pos:start="453:20" pos:end="453:37"><expr pos:start="453:20" pos:end="453:37"><literal type="number" pos:start="453:20" pos:end="453:22">1</literal> <operator pos:start="453:22" pos:end="453:22">-</operator> <name pos:start="453:24" pos:end="453:37"><name pos:start="453:24" pos:end="453:24">s</name><operator pos:start="453:25" pos:end="453:26">-&gt;</operator><name pos:start="453:27" pos:end="453:37">no_rounding</name></name></expr></argument>, <argument pos:start="453:40" pos:end="453:49"><expr pos:start="453:40" pos:end="453:49"><name pos:start="453:40" pos:end="453:49"><name pos:start="453:40" pos:end="453:40">s</name><operator pos:start="453:41" pos:end="453:42">-&gt;</operator><name pos:start="453:43" pos:end="453:49">vo_type</name></name></expr></argument>,

                   <argument pos:start="455:20" pos:end="455:62"><expr pos:start="455:20" pos:end="455:62"><ternary pos:start="455:20" pos:end="455:62"><condition pos:start="455:20" pos:end="455:48"><expr pos:start="455:20" pos:end="455:46"><name pos:start="455:20" pos:end="455:46"><name pos:start="455:20" pos:end="455:22">ctx</name><operator pos:start="455:23" pos:end="455:24">-&gt;</operator><name pos:start="455:25" pos:end="455:46">vol_control_parameters</name></name></expr> ?</condition><then pos:start="455:50" pos:end="455:56"> <expr pos:start="455:50" pos:end="455:56"><literal type="string" pos:start="455:50" pos:end="455:56">" VOLC"</literal></expr> </then><else pos:start="455:58" pos:end="455:62">: <expr pos:start="455:60" pos:end="455:62"><literal type="string" pos:start="455:60" pos:end="455:62">" "</literal></expr></else></ternary></expr></argument>, <argument pos:start="455:65" pos:end="455:87"><expr pos:start="455:65" pos:end="455:87"><name pos:start="455:65" pos:end="455:87"><name pos:start="455:65" pos:end="455:67">ctx</name><operator pos:start="455:68" pos:end="455:69">-&gt;</operator><name pos:start="455:70" pos:end="455:87">intra_dc_threshold</name></name></expr></argument>,

                   <argument pos:start="457:20" pos:end="457:47"><expr pos:start="457:20" pos:end="457:47"><name pos:start="457:20" pos:end="457:47"><name pos:start="457:20" pos:end="457:22">ctx</name><operator pos:start="457:23" pos:end="457:24">-&gt;</operator><name pos:start="457:25" pos:end="457:47">cplx_estimation_trash_i</name></name></expr></argument>, <argument pos:start="457:50" pos:end="457:77"><expr pos:start="457:50" pos:end="457:77"><name pos:start="457:50" pos:end="457:77"><name pos:start="457:50" pos:end="457:52">ctx</name><operator pos:start="457:53" pos:end="457:54">-&gt;</operator><name pos:start="457:55" pos:end="457:77">cplx_estimation_trash_p</name></name></expr></argument>,

                   <argument pos:start="459:20" pos:end="459:47"><expr pos:start="459:20" pos:end="459:47"><name pos:start="459:20" pos:end="459:47"><name pos:start="459:20" pos:end="459:22">ctx</name><operator pos:start="459:23" pos:end="459:24">-&gt;</operator><name pos:start="459:25" pos:end="459:47">cplx_estimation_trash_b</name></name></expr></argument>,

                   <argument pos:start="461:20" pos:end="461:26"><expr pos:start="461:20" pos:end="461:26"><name pos:start="461:20" pos:end="461:26"><name pos:start="461:20" pos:end="461:20">s</name><operator pos:start="461:21" pos:end="461:22">-&gt;</operator><name pos:start="461:23" pos:end="461:26">time</name></name></expr></argument>,

                   <argument pos:start="463:20" pos:end="463:33"><expr pos:start="463:20" pos:end="463:33"><name pos:start="463:20" pos:end="463:33">time_increment</name></expr></argument>

                  )</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="471:9" pos:end="493:9"><if pos:start="471:9" pos:end="477:9">if <condition pos:start="471:12" pos:end="471:30">(<expr pos:start="471:13" pos:end="471:29"><operator pos:start="471:13" pos:end="471:13">!</operator><name pos:start="471:14" pos:end="471:29"><name pos:start="471:14" pos:end="471:16">ctx</name><operator pos:start="471:17" pos:end="471:18">-&gt;</operator><name pos:start="471:19" pos:end="471:29">scalability</name></name></expr>)</condition> <block pos:start="471:32" pos:end="477:9">{<block_content pos:start="473:13" pos:end="475:31">

            <if_stmt pos:start="473:13" pos:end="475:31"><if pos:start="473:13" pos:end="475:31">if <condition pos:start="473:16" pos:end="473:78">(<expr pos:start="473:17" pos:end="473:77"><name pos:start="473:17" pos:end="473:26"><name pos:start="473:17" pos:end="473:19">ctx</name><operator pos:start="473:20" pos:end="473:21">-&gt;</operator><name pos:start="473:22" pos:end="473:26">shape</name></name> <operator pos:start="473:28" pos:end="473:29">!=</operator> <name pos:start="473:31" pos:end="473:40">RECT_SHAPE</name> <operator pos:start="473:42" pos:end="473:43">&amp;&amp;</operator> <name pos:start="473:45" pos:end="473:56"><name pos:start="473:45" pos:end="473:45">s</name><operator pos:start="473:46" pos:end="473:47">-&gt;</operator><name pos:start="473:48" pos:end="473:56">pict_type</name></name> <operator pos:start="473:58" pos:end="473:59">!=</operator> <name pos:start="473:61" pos:end="473:77">AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo" pos:start="475:17" pos:end="475:31"><block_content pos:start="475:17" pos:end="475:31">

                <expr_stmt pos:start="475:17" pos:end="475:31"><expr pos:start="475:17" pos:end="475:30"><call pos:start="475:17" pos:end="475:30"><name pos:start="475:17" pos:end="475:26">skip_bits1</name><argument_list pos:start="475:27" pos:end="475:30">(<argument pos:start="475:28" pos:end="475:29"><expr pos:start="475:28" pos:end="475:29"><name pos:start="475:28" pos:end="475:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>  <comment type="line" pos:start="475:34" pos:end="475:57">// vop shape coding type</comment>

        </block_content>}</block></if> <else pos:start="477:11" pos:end="493:9">else <block pos:start="477:16" pos:end="493:9">{<block_content pos:start="479:13" pos:end="491:29">

            <if_stmt pos:start="479:13" pos:end="489:13"><if pos:start="479:13" pos:end="489:13">if <condition pos:start="479:16" pos:end="479:38">(<expr pos:start="479:17" pos:end="479:37"><name pos:start="479:17" pos:end="479:37"><name pos:start="479:17" pos:end="479:19">ctx</name><operator pos:start="479:20" pos:end="479:21">-&gt;</operator><name pos:start="479:22" pos:end="479:37">enhancement_type</name></name></expr>)</condition> <block pos:start="479:40" pos:end="489:13">{<block_content pos:start="481:17" pos:end="487:68">

                <decl_stmt pos:start="481:17" pos:end="481:56"><decl pos:start="481:17" pos:end="481:55"><type pos:start="481:17" pos:end="481:19"><name pos:start="481:17" pos:end="481:19">int</name></type> <name pos:start="481:21" pos:end="481:39">load_backward_shape</name> <init pos:start="481:41" pos:end="481:55">= <expr pos:start="481:43" pos:end="481:55"><call pos:start="481:43" pos:end="481:55"><name pos:start="481:43" pos:end="481:51">get_bits1</name><argument_list pos:start="481:52" pos:end="481:55">(<argument pos:start="481:53" pos:end="481:54"><expr pos:start="481:53" pos:end="481:54"><name pos:start="481:53" pos:end="481:54">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="483:17" pos:end="487:68"><if pos:start="483:17" pos:end="487:68">if <condition pos:start="483:20" pos:end="483:40">(<expr pos:start="483:21" pos:end="483:39"><name pos:start="483:21" pos:end="483:39">load_backward_shape</name></expr>)</condition><block type="pseudo" pos:start="485:21" pos:end="487:68"><block_content pos:start="485:21" pos:end="487:68">

                    <expr_stmt pos:start="485:21" pos:end="487:68"><expr pos:start="485:21" pos:end="487:67"><call pos:start="485:21" pos:end="487:67"><name pos:start="485:21" pos:end="485:26">av_log</name><argument_list pos:start="485:27" pos:end="487:67">(<argument pos:start="485:28" pos:end="485:35"><expr pos:start="485:28" pos:end="485:35"><name pos:start="485:28" pos:end="485:35"><name pos:start="485:28" pos:end="485:28">s</name><operator pos:start="485:29" pos:end="485:30">-&gt;</operator><name pos:start="485:31" pos:end="485:35">avctx</name></name></expr></argument>, <argument pos:start="485:38" pos:end="485:49"><expr pos:start="485:38" pos:end="485:49"><name pos:start="485:38" pos:end="485:49">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="487:28" pos:end="487:66"><expr pos:start="487:28" pos:end="487:66"><literal type="string" pos:start="487:28" pos:end="487:66">"load backward shape isn't supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="491:13" pos:end="491:29"><expr pos:start="491:13" pos:end="491:28"><call pos:start="491:13" pos:end="491:28"><name pos:start="491:13" pos:end="491:21">skip_bits</name><argument_list pos:start="491:22" pos:end="491:28">(<argument pos:start="491:23" pos:end="491:24"><expr pos:start="491:23" pos:end="491:24"><name pos:start="491:23" pos:end="491:24">gb</name></expr></argument>, <argument pos:start="491:27" pos:end="491:27"><expr pos:start="491:27" pos:end="491:27"><literal type="number" pos:start="491:27" pos:end="491:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="491:32" pos:end="491:49">// ref_select_code</comment>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="497:5" pos:end="501:42">/* detect buggy encoders which don't set the low_delay flag

     * (divx4/xvid/opendivx). Note we cannot detect divx5 without b-frames

     * easily (although it's buggy too) */</comment>

    <if_stmt pos:start="503:5" pos:end="513:5"><if pos:start="503:5" pos:end="513:5">if <condition pos:start="503:8" pos:end="505:58">(<expr pos:start="503:9" pos:end="505:57"><name pos:start="503:9" pos:end="503:18"><name pos:start="503:9" pos:end="503:9">s</name><operator pos:start="503:10" pos:end="503:11">-&gt;</operator><name pos:start="503:12" pos:end="503:18">vo_type</name></name> <operator pos:start="503:20" pos:end="503:21">==</operator> <literal type="number" pos:start="503:23" pos:end="503:23">0</literal> <operator pos:start="503:25" pos:end="503:26">&amp;&amp;</operator> <name pos:start="503:28" pos:end="503:54"><name pos:start="503:28" pos:end="503:30">ctx</name><operator pos:start="503:31" pos:end="503:32">-&gt;</operator><name pos:start="503:33" pos:end="503:54">vol_control_parameters</name></name> <operator pos:start="503:56" pos:end="503:57">==</operator> <literal type="number" pos:start="503:59" pos:end="503:59">0</literal> <operator pos:start="503:61" pos:end="503:62">&amp;&amp;</operator>

        <name pos:start="505:9" pos:end="505:25"><name pos:start="505:9" pos:end="505:11">ctx</name><operator pos:start="505:12" pos:end="505:13">-&gt;</operator><name pos:start="505:14" pos:end="505:25">divx_version</name></name> <operator pos:start="505:27" pos:end="505:28">==</operator> <operator pos:start="505:30" pos:end="505:30">-</operator><literal type="number" pos:start="505:31" pos:end="505:31">1</literal> <operator pos:start="505:33" pos:end="505:34">&amp;&amp;</operator> <name pos:start="505:36" pos:end="505:52"><name pos:start="505:36" pos:end="505:36">s</name><operator pos:start="505:37" pos:end="505:38">-&gt;</operator><name pos:start="505:39" pos:end="505:52">picture_number</name></name> <operator pos:start="505:54" pos:end="505:55">==</operator> <literal type="number" pos:start="505:57" pos:end="505:57">0</literal></expr>)</condition> <block pos:start="505:60" pos:end="513:5">{<block_content pos:start="507:9" pos:end="511:25">

        <expr_stmt pos:start="507:9" pos:end="509:111"><expr pos:start="507:9" pos:end="509:110"><call pos:start="507:9" pos:end="509:110"><name pos:start="507:9" pos:end="507:14">av_log</name><argument_list pos:start="507:15" pos:end="509:110">(<argument pos:start="507:16" pos:end="507:23"><expr pos:start="507:16" pos:end="507:23"><name pos:start="507:16" pos:end="507:23"><name pos:start="507:16" pos:end="507:16">s</name><operator pos:start="507:17" pos:end="507:18">-&gt;</operator><name pos:start="507:19" pos:end="507:23">avctx</name></name></expr></argument>, <argument pos:start="507:26" pos:end="507:39"><expr pos:start="507:26" pos:end="507:39"><name pos:start="507:26" pos:end="507:39">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="509:16" pos:end="509:109"><expr pos:start="509:16" pos:end="509:109"><literal type="string" pos:start="509:16" pos:end="509:109">"looks like this file was encoded with (divx4/(old)xvid/opendivx) -&gt; forcing low_delay flag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="511:9" pos:end="511:25"><expr pos:start="511:9" pos:end="511:24"><name pos:start="511:9" pos:end="511:20"><name pos:start="511:9" pos:end="511:9">s</name><operator pos:start="511:10" pos:end="511:11">-&gt;</operator><name pos:start="511:12" pos:end="511:20">low_delay</name></name> <operator pos:start="511:22" pos:end="511:22">=</operator> <literal type="number" pos:start="511:24" pos:end="511:24">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="517:5" pos:end="517:24"><expr pos:start="517:5" pos:end="517:23"><name pos:start="517:5" pos:end="517:21"><name pos:start="517:5" pos:end="517:5">s</name><operator pos:start="517:6" pos:end="517:7">-&gt;</operator><name pos:start="517:8" pos:end="517:21">picture_number</name></name><operator pos:start="517:22" pos:end="517:23">++</operator></expr>;</expr_stmt>  <comment type="line" pos:start="517:27" pos:end="517:64">// better than pic number==0 always ;)</comment>



    <comment type="line" pos:start="521:5" pos:end="521:37">// FIXME add short header support</comment>

    <expr_stmt pos:start="523:5" pos:end="523:52"><expr pos:start="523:5" pos:end="523:51"><name pos:start="523:5" pos:end="523:23"><name pos:start="523:5" pos:end="523:5">s</name><operator pos:start="523:6" pos:end="523:7">-&gt;</operator><name pos:start="523:8" pos:end="523:23">y_dc_scale_table</name></name> <operator pos:start="523:25" pos:end="523:25">=</operator> <name pos:start="523:27" pos:end="523:51">ff_mpeg4_y_dc_scale_table</name></expr>;</expr_stmt>

    <expr_stmt pos:start="525:5" pos:end="525:52"><expr pos:start="525:5" pos:end="525:51"><name pos:start="525:5" pos:end="525:23"><name pos:start="525:5" pos:end="525:5">s</name><operator pos:start="525:6" pos:end="525:7">-&gt;</operator><name pos:start="525:8" pos:end="525:23">c_dc_scale_table</name></name> <operator pos:start="525:25" pos:end="525:25">=</operator> <name pos:start="525:27" pos:end="525:51">ff_mpeg4_c_dc_scale_table</name></expr>;</expr_stmt>



    <if_stmt pos:start="529:5" pos:end="535:5"><if pos:start="529:5" pos:end="535:5">if <condition pos:start="529:8" pos:end="529:41">(<expr pos:start="529:9" pos:end="529:40"><name pos:start="529:9" pos:end="529:26"><name pos:start="529:9" pos:end="529:9">s</name><operator pos:start="529:10" pos:end="529:11">-&gt;</operator><name pos:start="529:12" pos:end="529:26">workaround_bugs</name></name> <operator pos:start="529:28" pos:end="529:28">&amp;</operator> <name pos:start="529:30" pos:end="529:40">FF_BUG_EDGE</name></expr>)</condition> <block pos:start="529:43" pos:end="535:5">{<block_content pos:start="531:9" pos:end="533:34">

        <expr_stmt pos:start="531:9" pos:end="531:33"><expr pos:start="531:9" pos:end="531:32"><name pos:start="531:9" pos:end="531:21"><name pos:start="531:9" pos:end="531:9">s</name><operator pos:start="531:10" pos:end="531:11">-&gt;</operator><name pos:start="531:12" pos:end="531:21">h_edge_pos</name></name> <operator pos:start="531:23" pos:end="531:23">=</operator> <name pos:start="531:25" pos:end="531:32"><name pos:start="531:25" pos:end="531:25">s</name><operator pos:start="531:26" pos:end="531:27">-&gt;</operator><name pos:start="531:28" pos:end="531:32">width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="533:9" pos:end="533:34"><expr pos:start="533:9" pos:end="533:33"><name pos:start="533:9" pos:end="533:21"><name pos:start="533:9" pos:end="533:9">s</name><operator pos:start="533:10" pos:end="533:11">-&gt;</operator><name pos:start="533:12" pos:end="533:21">v_edge_pos</name></name> <operator pos:start="533:23" pos:end="533:23">=</operator> <name pos:start="533:25" pos:end="533:33"><name pos:start="533:25" pos:end="533:25">s</name><operator pos:start="533:26" pos:end="533:27">-&gt;</operator><name pos:start="533:28" pos:end="533:33">height</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="537:5" pos:end="537:13">return <expr pos:start="537:12" pos:end="537:12"><literal type="number" pos:start="537:12" pos:end="537:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
