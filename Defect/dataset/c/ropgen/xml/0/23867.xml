<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23867.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:60"><name pos:start="1:1" pos:end="1:13">e1000_receive</name><argument_list pos:start="1:14" pos:end="1:60">(<argument pos:start="1:15" pos:end="1:26">void *opaque</argument>, <argument pos:start="1:29" pos:end="1:46">const uint8_t *buf</argument>, <argument pos:start="1:49" pos:end="1:59">size_t size</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="155:1">{<block_content pos:start="5:5" pos:end="153:21">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">E1000State</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:26">= <expr pos:start="5:21" pos:end="5:26"><name pos:start="5:21" pos:end="5:26">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:24">e1000_rx_desc</name></name></type> <name pos:start="7:26" pos:end="7:29">desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">target_phys_addr_t</name></type> <name pos:start="9:24" pos:end="9:27">base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">n</name></decl>, <decl pos:start="11:21" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:21" pos:end="11:23">rdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">rdh_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:25">vlan_special</name> <init pos:start="15:27" pos:end="15:29">= <expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:45"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:23">vlan_status</name> <init pos:start="17:25" pos:end="17:27">= <expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr></init></decl>, <decl pos:start="17:30" pos:end="17:44"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:30" pos:end="17:40">vlan_offset</name> <init pos:start="17:42" pos:end="17:44">= <expr pos:start="17:44" pos:end="17:44"><literal type="number" pos:start="17:44" pos:end="17:44">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:15"><if pos:start="21:5" pos:end="23:15">if <condition pos:start="21:8" pos:end="21:44">(<expr pos:start="21:9" pos:end="21:43"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:26"><name pos:start="21:11" pos:end="21:11">s</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:20">mac_reg</name><index pos:start="21:21" pos:end="21:26">[<expr pos:start="21:22" pos:end="21:25"><name pos:start="21:22" pos:end="21:25">RCTL</name></expr>]</index></name> <operator pos:start="21:28" pos:end="21:28">&amp;</operator> <name pos:start="21:30" pos:end="21:42">E1000_RCTL_EN</name><operator pos:start="21:43" pos:end="21:43">)</operator></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:15"><block_content pos:start="23:9" pos:end="23:15">

        <return pos:start="23:9" pos:end="23:15">return;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:29">(<expr pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:12">size</name> <operator pos:start="27:14" pos:end="27:14">&gt;</operator> <name pos:start="27:16" pos:end="27:28"><name pos:start="27:16" pos:end="27:16">s</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:28">rxbuf_size</name></name></expr>)</condition> <block pos:start="27:31" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:15">

        <expr_stmt pos:start="29:9" pos:end="31:51"><expr pos:start="29:9" pos:end="31:50"><call pos:start="29:9" pos:end="31:50"><name pos:start="29:9" pos:end="29:14">DBGOUT</name><argument_list pos:start="29:15" pos:end="31:50">(<argument pos:start="29:16" pos:end="29:17"><expr pos:start="29:16" pos:end="29:17"><name pos:start="29:16" pos:end="29:17">RX</name></expr></argument>, <argument pos:start="29:20" pos:end="29:62"><expr pos:start="29:20" pos:end="29:62"><literal type="string" pos:start="29:20" pos:end="29:62">"packet too large for buffers (%lu &gt; %d)\n"</literal></expr></argument>,

               <argument pos:start="31:16" pos:end="31:34"><expr pos:start="31:16" pos:end="31:34"><operator pos:start="31:16" pos:end="31:16">(</operator><name pos:start="31:17" pos:end="31:24">unsigned</name> <name pos:start="31:26" pos:end="31:29">long</name><operator pos:start="31:30" pos:end="31:30">)</operator><name pos:start="31:31" pos:end="31:34">size</name></expr></argument>, <argument pos:start="31:37" pos:end="31:49"><expr pos:start="31:37" pos:end="31:49"><name pos:start="31:37" pos:end="31:49"><name pos:start="31:37" pos:end="31:37">s</name><operator pos:start="31:38" pos:end="31:39">-&gt;</operator><name pos:start="31:40" pos:end="31:49">rxbuf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="41:15"><if pos:start="39:5" pos:end="41:15">if <condition pos:start="39:8" pos:end="39:38">(<expr pos:start="39:9" pos:end="39:37"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:37"><name pos:start="39:10" pos:end="39:23">receive_filter</name><argument_list pos:start="39:24" pos:end="39:37">(<argument pos:start="39:25" pos:end="39:25"><expr pos:start="39:25" pos:end="39:25"><name pos:start="39:25" pos:end="39:25">s</name></expr></argument>, <argument pos:start="39:28" pos:end="39:30"><expr pos:start="39:28" pos:end="39:30"><name pos:start="39:28" pos:end="39:30">buf</name></expr></argument>, <argument pos:start="39:33" pos:end="39:36"><expr pos:start="39:33" pos:end="39:36"><name pos:start="39:33" pos:end="39:36">size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:15"><block_content pos:start="41:9" pos:end="41:15">

        <return pos:start="41:9" pos:end="41:15">return;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="57:5"><if pos:start="45:5" pos:end="57:5">if <condition pos:start="45:8" pos:end="45:50">(<expr pos:start="45:9" pos:end="45:49"><call pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:20">vlan_enabled</name><argument_list pos:start="45:21" pos:end="45:23">(<argument pos:start="45:22" pos:end="45:22"><expr pos:start="45:22" pos:end="45:22"><name pos:start="45:22" pos:end="45:22">s</name></expr></argument>)</argument_list></call> <operator pos:start="45:25" pos:end="45:26">&amp;&amp;</operator> <call pos:start="45:28" pos:end="45:49"><name pos:start="45:28" pos:end="45:41">is_vlan_packet</name><argument_list pos:start="45:42" pos:end="45:49">(<argument pos:start="45:43" pos:end="45:43"><expr pos:start="45:43" pos:end="45:43"><name pos:start="45:43" pos:end="45:43">s</name></expr></argument>, <argument pos:start="45:46" pos:end="45:48"><expr pos:start="45:46" pos:end="45:48"><name pos:start="45:46" pos:end="45:48">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:52" pos:end="57:5">{<block_content pos:start="47:9" pos:end="55:18">

        <expr_stmt pos:start="47:9" pos:end="47:73"><expr pos:start="47:9" pos:end="47:72"><name pos:start="47:9" pos:end="47:20">vlan_special</name> <operator pos:start="47:22" pos:end="47:22">=</operator> <call pos:start="47:24" pos:end="47:72"><name pos:start="47:24" pos:end="47:34">cpu_to_le16</name><argument_list pos:start="47:35" pos:end="47:72">(<argument pos:start="47:36" pos:end="47:71"><expr pos:start="47:36" pos:end="47:71"><call pos:start="47:36" pos:end="47:71"><name pos:start="47:36" pos:end="47:47">be16_to_cpup</name><argument_list pos:start="47:48" pos:end="47:71">(<argument pos:start="47:49" pos:end="47:70"><expr pos:start="47:49" pos:end="47:70"><operator pos:start="47:49" pos:end="47:49">(</operator><name pos:start="47:50" pos:end="47:57">uint16_t</name> <operator pos:start="47:59" pos:end="47:59">*</operator><operator pos:start="47:60" pos:end="47:60">)</operator><operator pos:start="47:61" pos:end="47:61">(</operator><name pos:start="47:62" pos:end="47:64">buf</name> <operator pos:start="47:66" pos:end="47:66">+</operator> <literal type="number" pos:start="47:68" pos:end="47:69">14</literal><operator pos:start="47:70" pos:end="47:70">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:44"><expr pos:start="49:9" pos:end="49:43"><call pos:start="49:9" pos:end="49:43"><name pos:start="49:9" pos:end="49:15">memmove</name><argument_list pos:start="49:16" pos:end="49:43">(<argument pos:start="49:17" pos:end="49:33"><expr pos:start="49:17" pos:end="49:33"><operator pos:start="49:17" pos:end="49:17">(</operator><name pos:start="49:18" pos:end="49:21">void</name> <operator pos:start="49:23" pos:end="49:23">*</operator><operator pos:start="49:24" pos:end="49:24">)</operator><operator pos:start="49:25" pos:end="49:25">(</operator><name pos:start="49:26" pos:end="49:28">buf</name> <operator pos:start="49:30" pos:end="49:30">+</operator> <literal type="number" pos:start="49:32" pos:end="49:32">4</literal><operator pos:start="49:33" pos:end="49:33">)</operator></expr></argument>, <argument pos:start="49:36" pos:end="49:38"><expr pos:start="49:36" pos:end="49:38"><name pos:start="49:36" pos:end="49:38">buf</name></expr></argument>, <argument pos:start="49:41" pos:end="49:42"><expr pos:start="49:41" pos:end="49:42"><literal type="number" pos:start="49:41" pos:end="49:42">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:40"><expr pos:start="51:9" pos:end="51:39"><name pos:start="51:9" pos:end="51:19">vlan_status</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:39">E1000_RXD_STAT_VP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:24"><expr pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:19">vlan_offset</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <literal type="number" pos:start="53:23" pos:end="53:23">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:18"><expr pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:12">size</name> <operator pos:start="55:14" pos:end="55:15">-=</operator> <literal type="number" pos:start="55:17" pos:end="55:17">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:32"><expr pos:start="61:5" pos:end="61:31"><name pos:start="61:5" pos:end="61:13">rdh_start</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:31"><name pos:start="61:17" pos:end="61:17">s</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:26">mac_reg</name><index pos:start="61:27" pos:end="61:31">[<expr pos:start="61:28" pos:end="61:30"><name pos:start="61:28" pos:end="61:30">RDH</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:14"><expr pos:start="63:5" pos:end="63:13"><name pos:start="63:5" pos:end="63:8">size</name> <operator pos:start="63:10" pos:end="63:11">+=</operator> <literal type="number" pos:start="63:13" pos:end="63:13">4</literal></expr>;</expr_stmt> <comment type="line" pos:start="63:16" pos:end="63:32">// for the header</comment>

    <do pos:start="65:5" pos:end="123:36">do <block pos:start="65:8" pos:end="123:5">{<block_content pos:start="67:9" pos:end="121:9">

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:64">(<expr pos:start="67:13" pos:end="67:63"><name pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:13">s</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:22">mac_reg</name><index pos:start="67:23" pos:end="67:27">[<expr pos:start="67:24" pos:end="67:26"><name pos:start="67:24" pos:end="67:26">RDH</name></expr>]</index></name> <operator pos:start="67:29" pos:end="67:30">==</operator> <name pos:start="67:32" pos:end="67:46"><name pos:start="67:32" pos:end="67:32">s</name><operator pos:start="67:33" pos:end="67:34">-&gt;</operator><name pos:start="67:35" pos:end="67:41">mac_reg</name><index pos:start="67:42" pos:end="67:46">[<expr pos:start="67:43" pos:end="67:45"><name pos:start="67:43" pos:end="67:45">RDT</name></expr>]</index></name> <operator pos:start="67:48" pos:end="67:49">&amp;&amp;</operator> <name pos:start="67:51" pos:end="67:63"><name pos:start="67:51" pos:end="67:51">s</name><operator pos:start="67:52" pos:end="67:53">-&gt;</operator><name pos:start="67:54" pos:end="67:63">check_rxov</name></name></expr>)</condition> <block pos:start="67:66" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:19">

            <expr_stmt pos:start="69:13" pos:end="69:41"><expr pos:start="69:13" pos:end="69:40"><call pos:start="69:13" pos:end="69:40"><name pos:start="69:13" pos:end="69:19">set_ics</name><argument_list pos:start="69:20" pos:end="69:40">(<argument pos:start="69:21" pos:end="69:21"><expr pos:start="69:21" pos:end="69:21"><name pos:start="69:21" pos:end="69:21">s</name></expr></argument>, <argument pos:start="69:24" pos:end="69:24"><expr pos:start="69:24" pos:end="69:24"><literal type="number" pos:start="69:24" pos:end="69:24">0</literal></expr></argument>, <argument pos:start="69:27" pos:end="69:39"><expr pos:start="69:27" pos:end="69:39"><name pos:start="69:27" pos:end="69:39">E1000_ICS_RXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="77:46"><expr pos:start="75:9" pos:end="77:45"><name pos:start="75:9" pos:end="75:12">base</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <operator pos:start="75:16" pos:end="75:16">(</operator><operator pos:start="75:17" pos:end="75:17">(</operator><name pos:start="75:18" pos:end="75:25">uint64_t</name><operator pos:start="75:26" pos:end="75:26">)</operator><name pos:start="75:27" pos:end="75:43"><name pos:start="75:27" pos:end="75:27">s</name><operator pos:start="75:28" pos:end="75:29">-&gt;</operator><name pos:start="75:30" pos:end="75:36">mac_reg</name><index pos:start="75:37" pos:end="75:43">[<expr pos:start="75:38" pos:end="75:42"><name pos:start="75:38" pos:end="75:42">RDBAH</name></expr>]</index></name> <operator pos:start="75:45" pos:end="75:46">&lt;&lt;</operator> <literal type="number" pos:start="75:48" pos:end="75:49">32</literal><operator pos:start="75:50" pos:end="75:50">)</operator> <operator pos:start="75:52" pos:end="75:52">+</operator> <name pos:start="75:54" pos:end="75:70"><name pos:start="75:54" pos:end="75:54">s</name><operator pos:start="75:55" pos:end="75:56">-&gt;</operator><name pos:start="75:57" pos:end="75:63">mac_reg</name><index pos:start="75:64" pos:end="75:70">[<expr pos:start="75:65" pos:end="75:69"><name pos:start="75:65" pos:end="75:69">RDBAL</name></expr>]</index></name> <operator pos:start="75:72" pos:end="75:72">+</operator>

               <sizeof pos:start="77:16" pos:end="77:27">sizeof<argument_list pos:start="77:22" pos:end="77:27">(<argument pos:start="77:23" pos:end="77:26"><expr pos:start="77:23" pos:end="77:26"><name pos:start="77:23" pos:end="77:26">desc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="77:29" pos:end="77:29">*</operator> <name pos:start="77:31" pos:end="77:45"><name pos:start="77:31" pos:end="77:31">s</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:40">mac_reg</name><index pos:start="77:41" pos:end="77:45">[<expr pos:start="77:42" pos:end="77:44"><name pos:start="77:42" pos:end="77:44">RDH</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:68"><expr pos:start="79:9" pos:end="79:67"><call pos:start="79:9" pos:end="79:67"><name pos:start="79:9" pos:end="79:32">cpu_physical_memory_read</name><argument_list pos:start="79:33" pos:end="79:67">(<argument pos:start="79:34" pos:end="79:37"><expr pos:start="79:34" pos:end="79:37"><name pos:start="79:34" pos:end="79:37">base</name></expr></argument>, <argument pos:start="79:40" pos:end="79:52"><expr pos:start="79:40" pos:end="79:52"><operator pos:start="79:40" pos:end="79:40">(</operator><name pos:start="79:41" pos:end="79:44">void</name> <operator pos:start="79:46" pos:end="79:46">*</operator><operator pos:start="79:47" pos:end="79:47">)</operator><operator pos:start="79:48" pos:end="79:48">&amp;</operator><name pos:start="79:49" pos:end="79:52">desc</name></expr></argument>, <argument pos:start="79:55" pos:end="79:66"><expr pos:start="79:55" pos:end="79:66"><sizeof pos:start="79:55" pos:end="79:66">sizeof<argument_list pos:start="79:61" pos:end="79:66">(<argument pos:start="79:62" pos:end="79:65"><expr pos:start="79:62" pos:end="79:65"><name pos:start="79:62" pos:end="79:65">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:36"><expr pos:start="81:9" pos:end="81:35"><name pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:12">desc</name><operator pos:start="81:13" pos:end="81:13">.</operator><name pos:start="81:14" pos:end="81:20">special</name></name> <operator pos:start="81:22" pos:end="81:22">=</operator> <name pos:start="81:24" pos:end="81:35">vlan_special</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:57"><expr pos:start="83:9" pos:end="83:56"><name pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:12">desc</name><operator pos:start="83:13" pos:end="83:13">.</operator><name pos:start="83:14" pos:end="83:19">status</name></name> <operator pos:start="83:21" pos:end="83:22">|=</operator> <operator pos:start="83:24" pos:end="83:24">(</operator><name pos:start="83:25" pos:end="83:35">vlan_status</name> <operator pos:start="83:37" pos:end="83:37">|</operator> <name pos:start="83:39" pos:end="83:55">E1000_RXD_STAT_DD</name><operator pos:start="83:56" pos:end="83:56">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="97:49"><if pos:start="85:9" pos:end="95:9">if <condition pos:start="85:12" pos:end="85:29">(<expr pos:start="85:13" pos:end="85:28"><name pos:start="85:13" pos:end="85:28"><name pos:start="85:13" pos:end="85:16">desc</name><operator pos:start="85:17" pos:end="85:17">.</operator><name pos:start="85:18" pos:end="85:28">buffer_addr</name></name></expr>)</condition> <block pos:start="85:31" pos:end="95:9">{<block_content pos:start="87:13" pos:end="93:66">

            <expr_stmt pos:start="87:13" pos:end="89:73"><expr pos:start="87:13" pos:end="89:72"><call pos:start="87:13" pos:end="89:72"><name pos:start="87:13" pos:end="87:37">cpu_physical_memory_write</name><argument_list pos:start="87:38" pos:end="89:72">(<argument pos:start="87:39" pos:end="87:67"><expr pos:start="87:39" pos:end="87:67"><call pos:start="87:39" pos:end="87:67"><name pos:start="87:39" pos:end="87:49">le64_to_cpu</name><argument_list pos:start="87:50" pos:end="87:67">(<argument pos:start="87:51" pos:end="87:66"><expr pos:start="87:51" pos:end="87:66"><name pos:start="87:51" pos:end="87:66"><name pos:start="87:51" pos:end="87:54">desc</name><operator pos:start="87:55" pos:end="87:55">.</operator><name pos:start="87:56" pos:end="87:66">buffer_addr</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="89:39" pos:end="89:65"><expr pos:start="89:39" pos:end="89:65"><operator pos:start="89:39" pos:end="89:39">(</operator><name pos:start="89:40" pos:end="89:43">void</name> <operator pos:start="89:45" pos:end="89:45">*</operator><operator pos:start="89:46" pos:end="89:46">)</operator><operator pos:start="89:47" pos:end="89:47">(</operator><name pos:start="89:48" pos:end="89:50">buf</name> <operator pos:start="89:52" pos:end="89:52">+</operator> <name pos:start="89:54" pos:end="89:64">vlan_offset</name><operator pos:start="89:65" pos:end="89:65">)</operator></expr></argument>, <argument pos:start="89:68" pos:end="89:71"><expr pos:start="89:68" pos:end="89:71"><name pos:start="89:68" pos:end="89:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:44"><expr pos:start="91:13" pos:end="91:43"><name pos:start="91:13" pos:end="91:23"><name pos:start="91:13" pos:end="91:16">desc</name><operator pos:start="91:17" pos:end="91:17">.</operator><name pos:start="91:18" pos:end="91:23">length</name></name> <operator pos:start="91:25" pos:end="91:25">=</operator> <call pos:start="91:27" pos:end="91:43"><name pos:start="91:27" pos:end="91:37">cpu_to_le16</name><argument_list pos:start="91:38" pos:end="91:43">(<argument pos:start="91:39" pos:end="91:42"><expr pos:start="91:39" pos:end="91:42"><name pos:start="91:39" pos:end="91:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:66"><expr pos:start="93:13" pos:end="93:65"><name pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:16">desc</name><operator pos:start="93:17" pos:end="93:17">.</operator><name pos:start="93:18" pos:end="93:23">status</name></name> <operator pos:start="93:25" pos:end="93:26">|=</operator> <name pos:start="93:28" pos:end="93:45">E1000_RXD_STAT_EOP</name><operator pos:start="93:46" pos:end="93:46">|</operator><name pos:start="93:47" pos:end="93:65">E1000_RXD_STAT_IXSM</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="95:11" pos:end="97:49">else<block type="pseudo" pos:start="97:13" pos:end="97:49"><block_content pos:start="97:13" pos:end="97:49"> <comment type="line" pos:start="95:16" pos:end="95:72">// as per intel docs; skip descriptors with null buf addr</comment>

            <expr_stmt pos:start="97:13" pos:end="97:49"><expr pos:start="97:13" pos:end="97:48"><call pos:start="97:13" pos:end="97:48"><name pos:start="97:13" pos:end="97:18">DBGOUT</name><argument_list pos:start="97:19" pos:end="97:48">(<argument pos:start="97:20" pos:end="97:21"><expr pos:start="97:20" pos:end="97:21"><name pos:start="97:20" pos:end="97:21">RX</name></expr></argument>, <argument pos:start="97:24" pos:end="97:47"><expr pos:start="97:24" pos:end="97:47"><literal type="string" pos:start="97:24" pos:end="97:47">"Null RX descriptor!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:69"><expr pos:start="99:9" pos:end="99:68"><call pos:start="99:9" pos:end="99:68"><name pos:start="99:9" pos:end="99:33">cpu_physical_memory_write</name><argument_list pos:start="99:34" pos:end="99:68">(<argument pos:start="99:35" pos:end="99:38"><expr pos:start="99:35" pos:end="99:38"><name pos:start="99:35" pos:end="99:38">base</name></expr></argument>, <argument pos:start="99:41" pos:end="99:53"><expr pos:start="99:41" pos:end="99:53"><operator pos:start="99:41" pos:end="99:41">(</operator><name pos:start="99:42" pos:end="99:45">void</name> <operator pos:start="99:47" pos:end="99:47">*</operator><operator pos:start="99:48" pos:end="99:48">)</operator><operator pos:start="99:49" pos:end="99:49">&amp;</operator><name pos:start="99:50" pos:end="99:53">desc</name></expr></argument>, <argument pos:start="99:56" pos:end="99:67"><expr pos:start="99:56" pos:end="99:67"><sizeof pos:start="99:56" pos:end="99:67">sizeof<argument_list pos:start="99:62" pos:end="99:67">(<argument pos:start="99:63" pos:end="99:66"><expr pos:start="99:63" pos:end="99:66"><name pos:start="99:63" pos:end="99:66">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="103:9" pos:end="105:32"><if pos:start="103:9" pos:end="105:32">if <condition pos:start="103:12" pos:end="103:66">(<expr pos:start="103:13" pos:end="103:65"><operator pos:start="103:13" pos:end="103:14">++</operator><name pos:start="103:15" pos:end="103:29"><name pos:start="103:15" pos:end="103:15">s</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:24">mac_reg</name><index pos:start="103:25" pos:end="103:29">[<expr pos:start="103:26" pos:end="103:28"><name pos:start="103:26" pos:end="103:28">RDH</name></expr>]</index></name> <operator pos:start="103:31" pos:end="103:31">*</operator> <sizeof pos:start="103:33" pos:end="103:44">sizeof<argument_list pos:start="103:39" pos:end="103:44">(<argument pos:start="103:40" pos:end="103:43"><expr pos:start="103:40" pos:end="103:43"><name pos:start="103:40" pos:end="103:43">desc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="103:46" pos:end="103:47">&gt;=</operator> <name pos:start="103:49" pos:end="103:65"><name pos:start="103:49" pos:end="103:49">s</name><operator pos:start="103:50" pos:end="103:51">-&gt;</operator><name pos:start="103:52" pos:end="103:58">mac_reg</name><index pos:start="103:59" pos:end="103:65">[<expr pos:start="103:60" pos:end="103:64"><name pos:start="103:60" pos:end="103:64">RDLEN</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:32"><block_content pos:start="105:13" pos:end="105:32">

            <expr_stmt pos:start="105:13" pos:end="105:32"><expr pos:start="105:13" pos:end="105:31"><name pos:start="105:13" pos:end="105:27"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:22">mac_reg</name><index pos:start="105:23" pos:end="105:27">[<expr pos:start="105:24" pos:end="105:26"><name pos:start="105:24" pos:end="105:26">RDH</name></expr>]</index></name> <operator pos:start="105:29" pos:end="105:29">=</operator> <literal type="number" pos:start="105:31" pos:end="105:31">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:26"><expr pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:21">check_rxov</name></name> <operator pos:start="107:23" pos:end="107:23">=</operator> <literal type="number" pos:start="107:25" pos:end="107:25">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="109:9" pos:end="109:50">/* see comment in start_xmit; same here */</comment>

        <if_stmt pos:start="111:9" pos:end="121:9"><if pos:start="111:9" pos:end="121:9">if <condition pos:start="111:12" pos:end="111:41">(<expr pos:start="111:13" pos:end="111:40"><name pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:22">mac_reg</name><index pos:start="111:23" pos:end="111:27">[<expr pos:start="111:24" pos:end="111:26"><name pos:start="111:24" pos:end="111:26">RDH</name></expr>]</index></name> <operator pos:start="111:29" pos:end="111:30">==</operator> <name pos:start="111:32" pos:end="111:40">rdh_start</name></expr>)</condition> <block pos:start="111:43" pos:end="121:9">{<block_content pos:start="113:13" pos:end="119:19">

            <expr_stmt pos:start="113:13" pos:end="115:66"><expr pos:start="113:13" pos:end="115:65"><call pos:start="113:13" pos:end="115:65"><name pos:start="113:13" pos:end="113:18">DBGOUT</name><argument_list pos:start="113:19" pos:end="115:65">(<argument pos:start="113:20" pos:end="113:24"><expr pos:start="113:20" pos:end="113:24"><name pos:start="113:20" pos:end="113:24">RXERR</name></expr></argument>, <argument pos:start="113:27" pos:end="113:66"><expr pos:start="113:27" pos:end="113:66"><literal type="string" pos:start="113:27" pos:end="113:66">"RDH wraparound @%x, RDT %x, RDLEN %x\n"</literal></expr></argument>,

                   <argument pos:start="115:20" pos:end="115:28"><expr pos:start="115:20" pos:end="115:28"><name pos:start="115:20" pos:end="115:28">rdh_start</name></expr></argument>, <argument pos:start="115:31" pos:end="115:45"><expr pos:start="115:31" pos:end="115:45"><name pos:start="115:31" pos:end="115:45"><name pos:start="115:31" pos:end="115:31">s</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:40">mac_reg</name><index pos:start="115:41" pos:end="115:45">[<expr pos:start="115:42" pos:end="115:44"><name pos:start="115:42" pos:end="115:44">RDT</name></expr>]</index></name></expr></argument>, <argument pos:start="115:48" pos:end="115:64"><expr pos:start="115:48" pos:end="115:64"><name pos:start="115:48" pos:end="115:64"><name pos:start="115:48" pos:end="115:48">s</name><operator pos:start="115:49" pos:end="115:50">-&gt;</operator><name pos:start="115:51" pos:end="115:57">mac_reg</name><index pos:start="115:58" pos:end="115:64">[<expr pos:start="115:59" pos:end="115:63"><name pos:start="115:59" pos:end="115:63">RDLEN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:41"><expr pos:start="117:13" pos:end="117:40"><call pos:start="117:13" pos:end="117:40"><name pos:start="117:13" pos:end="117:19">set_ics</name><argument_list pos:start="117:20" pos:end="117:40">(<argument pos:start="117:21" pos:end="117:21"><expr pos:start="117:21" pos:end="117:21"><name pos:start="117:21" pos:end="117:21">s</name></expr></argument>, <argument pos:start="117:24" pos:end="117:24"><expr pos:start="117:24" pos:end="117:24"><literal type="number" pos:start="117:24" pos:end="117:24">0</literal></expr></argument>, <argument pos:start="117:27" pos:end="117:39"><expr pos:start="117:27" pos:end="117:39"><name pos:start="117:27" pos:end="117:39">E1000_ICS_RXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="123:13" pos:end="123:35">(<expr pos:start="123:14" pos:end="123:34"><name pos:start="123:14" pos:end="123:29"><name pos:start="123:14" pos:end="123:17">desc</name><operator pos:start="123:18" pos:end="123:18">.</operator><name pos:start="123:19" pos:end="123:29">buffer_addr</name></name> <operator pos:start="123:31" pos:end="123:32">==</operator> <literal type="number" pos:start="123:34" pos:end="123:34">0</literal></expr>)</condition>;</do>



    <expr_stmt pos:start="127:5" pos:end="127:23"><expr pos:start="127:5" pos:end="127:22"><name pos:start="127:5" pos:end="127:20"><name pos:start="127:5" pos:end="127:5">s</name><operator pos:start="127:6" pos:end="127:7">-&gt;</operator><name pos:start="127:8" pos:end="127:14">mac_reg</name><index pos:start="127:15" pos:end="127:20">[<expr pos:start="127:16" pos:end="127:19"><name pos:start="127:16" pos:end="127:19">GPRC</name></expr>]</index></name><operator pos:start="127:21" pos:end="127:22">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:22"><expr pos:start="129:5" pos:end="129:21"><name pos:start="129:5" pos:end="129:19"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:14">mac_reg</name><index pos:start="129:15" pos:end="129:19">[<expr pos:start="129:16" pos:end="129:18"><name pos:start="129:16" pos:end="129:18">TPR</name></expr>]</index></name><operator pos:start="129:20" pos:end="129:21">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:25"><expr pos:start="131:5" pos:end="131:24"><name pos:start="131:5" pos:end="131:5">n</name> <operator pos:start="131:7" pos:end="131:7">=</operator> <name pos:start="131:9" pos:end="131:24"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:18">mac_reg</name><index pos:start="131:19" pos:end="131:24">[<expr pos:start="131:20" pos:end="131:23"><name pos:start="131:20" pos:end="131:23">TORL</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="135:27"><if pos:start="133:5" pos:end="135:27">if <condition pos:start="133:8" pos:end="133:39">(<expr pos:start="133:9" pos:end="133:38"><operator pos:start="133:9" pos:end="133:9">(</operator><name pos:start="133:10" pos:end="133:25"><name pos:start="133:10" pos:end="133:10">s</name><operator pos:start="133:11" pos:end="133:12">-&gt;</operator><name pos:start="133:13" pos:end="133:19">mac_reg</name><index pos:start="133:20" pos:end="133:25">[<expr pos:start="133:21" pos:end="133:24"><name pos:start="133:21" pos:end="133:24">TORL</name></expr>]</index></name> <operator pos:start="133:27" pos:end="133:28">+=</operator> <name pos:start="133:30" pos:end="133:33">size</name><operator pos:start="133:34" pos:end="133:34">)</operator> <operator pos:start="133:36" pos:end="133:36">&lt;</operator> <name pos:start="133:38" pos:end="133:38">n</name></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:27"><block_content pos:start="135:9" pos:end="135:27">

        <expr_stmt pos:start="135:9" pos:end="135:27"><expr pos:start="135:9" pos:end="135:26"><name pos:start="135:9" pos:end="135:24"><name pos:start="135:9" pos:end="135:9">s</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:18">mac_reg</name><index pos:start="135:19" pos:end="135:24">[<expr pos:start="135:20" pos:end="135:23"><name pos:start="135:20" pos:end="135:23">TORH</name></expr>]</index></name><operator pos:start="135:25" pos:end="135:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:23"><expr pos:start="139:5" pos:end="139:22"><name pos:start="139:5" pos:end="139:5">n</name> <operator pos:start="139:7" pos:end="139:7">=</operator> <name pos:start="139:9" pos:end="139:22">E1000_ICS_RXT0</name></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="143:48"><if pos:start="141:5" pos:end="143:48">if <condition pos:start="141:8" pos:end="141:50">(<expr pos:start="141:9" pos:end="141:49"><operator pos:start="141:9" pos:end="141:9">(</operator><name pos:start="141:10" pos:end="141:12">rdt</name> <operator pos:start="141:14" pos:end="141:14">=</operator> <name pos:start="141:16" pos:end="141:30"><name pos:start="141:16" pos:end="141:16">s</name><operator pos:start="141:17" pos:end="141:18">-&gt;</operator><name pos:start="141:19" pos:end="141:25">mac_reg</name><index pos:start="141:26" pos:end="141:30">[<expr pos:start="141:27" pos:end="141:29"><name pos:start="141:27" pos:end="141:29">RDT</name></expr>]</index></name><operator pos:start="141:31" pos:end="141:31">)</operator> <operator pos:start="141:33" pos:end="141:33">&lt;</operator> <name pos:start="141:35" pos:end="141:49"><name pos:start="141:35" pos:end="141:35">s</name><operator pos:start="141:36" pos:end="141:37">-&gt;</operator><name pos:start="141:38" pos:end="141:44">mac_reg</name><index pos:start="141:45" pos:end="141:49">[<expr pos:start="141:46" pos:end="141:48"><name pos:start="141:46" pos:end="141:48">RDH</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="143:9" pos:end="143:48"><block_content pos:start="143:9" pos:end="143:48">

        <expr_stmt pos:start="143:9" pos:end="143:48"><expr pos:start="143:9" pos:end="143:47"><name pos:start="143:9" pos:end="143:11">rdt</name> <operator pos:start="143:13" pos:end="143:14">+=</operator> <name pos:start="143:16" pos:end="143:32"><name pos:start="143:16" pos:end="143:16">s</name><operator pos:start="143:17" pos:end="143:18">-&gt;</operator><name pos:start="143:19" pos:end="143:25">mac_reg</name><index pos:start="143:26" pos:end="143:32">[<expr pos:start="143:27" pos:end="143:31"><name pos:start="143:27" pos:end="143:31">RDLEN</name></expr>]</index></name> <operator pos:start="143:34" pos:end="143:34">/</operator> <sizeof pos:start="143:36" pos:end="143:47">sizeof<argument_list pos:start="143:42" pos:end="143:47">(<argument pos:start="143:43" pos:end="143:46"><expr pos:start="143:43" pos:end="143:46"><name pos:start="143:43" pos:end="143:46">desc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="145:5" pos:end="149:30"><if pos:start="145:5" pos:end="149:30">if <condition pos:start="145:8" pos:end="147:27">(<expr pos:start="145:9" pos:end="147:26"><operator pos:start="145:9" pos:end="145:9">(</operator><operator pos:start="145:10" pos:end="145:10">(</operator><name pos:start="145:11" pos:end="145:13">rdt</name> <operator pos:start="145:15" pos:end="145:15">-</operator> <name pos:start="145:17" pos:end="145:31"><name pos:start="145:17" pos:end="145:17">s</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:26">mac_reg</name><index pos:start="145:27" pos:end="145:31">[<expr pos:start="145:28" pos:end="145:30"><name pos:start="145:28" pos:end="145:30">RDH</name></expr>]</index></name><operator pos:start="145:32" pos:end="145:32">)</operator> <operator pos:start="145:34" pos:end="145:34">*</operator> <sizeof pos:start="145:36" pos:end="145:47">sizeof<argument_list pos:start="145:42" pos:end="145:47">(<argument pos:start="145:43" pos:end="145:46"><expr pos:start="145:43" pos:end="145:46"><name pos:start="145:43" pos:end="145:46">desc</name></expr></argument>)</argument_list></sizeof><operator pos:start="145:48" pos:end="145:48">)</operator> <operator pos:start="145:50" pos:end="145:51">&lt;=</operator> <name pos:start="145:53" pos:end="145:69"><name pos:start="145:53" pos:end="145:53">s</name><operator pos:start="145:54" pos:end="145:55">-&gt;</operator><name pos:start="145:56" pos:end="145:62">mac_reg</name><index pos:start="145:63" pos:end="145:69">[<expr pos:start="145:64" pos:end="145:68"><name pos:start="145:64" pos:end="145:68">RDLEN</name></expr>]</index></name> <operator pos:start="145:71" pos:end="145:72">&gt;&gt;</operator>

        <name pos:start="147:9" pos:end="147:26"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:26">rxbuf_min_shift</name></name></expr>)</condition><block type="pseudo" pos:start="149:9" pos:end="149:30"><block_content pos:start="149:9" pos:end="149:30">

        <expr_stmt pos:start="149:9" pos:end="149:30"><expr pos:start="149:9" pos:end="149:29"><name pos:start="149:9" pos:end="149:9">n</name> <operator pos:start="149:11" pos:end="149:12">|=</operator> <name pos:start="149:14" pos:end="149:29">E1000_ICS_RXDMT0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:21"><expr pos:start="153:5" pos:end="153:20"><call pos:start="153:5" pos:end="153:20"><name pos:start="153:5" pos:end="153:11">set_ics</name><argument_list pos:start="153:12" pos:end="153:20">(<argument pos:start="153:13" pos:end="153:13"><expr pos:start="153:13" pos:end="153:13"><name pos:start="153:13" pos:end="153:13">s</name></expr></argument>, <argument pos:start="153:16" pos:end="153:16"><expr pos:start="153:16" pos:end="153:16"><literal type="number" pos:start="153:16" pos:end="153:16">0</literal></expr></argument>, <argument pos:start="153:19" pos:end="153:19"><expr pos:start="153:19" pos:end="153:19"><name pos:start="153:19" pos:end="153:19">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
