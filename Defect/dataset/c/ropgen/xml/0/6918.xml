<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6918.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">raw_pwrite_aligned</name><parameter_list pos:start="1:30" pos:end="3:52">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:66"><decl pos:start="1:53" pos:end="1:66"><type pos:start="1:53" pos:end="1:66"><name pos:start="1:53" pos:end="1:59">int64_t</name></type> <name pos:start="1:61" pos:end="1:66">offset</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:40"><decl pos:start="3:23" pos:end="3:40"><type pos:start="3:23" pos:end="3:40"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:35">uint8_t</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:40">buf</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:51"><decl pos:start="3:43" pos:end="3:51"><type pos:start="3:43" pos:end="3:51"><name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:51">count</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="45:1">{<block_content pos:start="7:5" pos:end="43:37">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVRawState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:22"><expr pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:21"><name pos:start="13:11" pos:end="13:17">fd_open</name><argument_list pos:start="13:18" pos:end="13:21">(<argument pos:start="13:19" pos:end="13:20"><expr pos:start="13:19" pos:end="13:20"><name pos:start="13:19" pos:end="13:20">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:22"><if pos:start="15:5" pos:end="17:22">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">&lt;</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:22"><block_content pos:start="17:9" pos:end="17:22">

        <return pos:start="17:9" pos:end="17:22">return <expr pos:start="17:16" pos:end="17:21"><operator pos:start="17:16" pos:end="17:16">-</operator><name pos:start="17:17" pos:end="17:21">errno</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:43"><name pos:start="21:11" pos:end="21:16">pwrite</name><argument_list pos:start="21:17" pos:end="21:43">(<argument pos:start="21:18" pos:end="21:22"><expr pos:start="21:18" pos:end="21:22"><name pos:start="21:18" pos:end="21:22"><name pos:start="21:18" pos:end="21:18">s</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:22">fd</name></name></expr></argument>, <argument pos:start="21:25" pos:end="21:27"><expr pos:start="21:25" pos:end="21:27"><name pos:start="21:25" pos:end="21:27">buf</name></expr></argument>, <argument pos:start="21:30" pos:end="21:34"><expr pos:start="21:30" pos:end="21:34"><name pos:start="21:30" pos:end="21:34">count</name></expr></argument>, <argument pos:start="21:37" pos:end="21:42"><expr pos:start="21:37" pos:end="21:42"><name pos:start="21:37" pos:end="21:42">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="25:39"><if pos:start="23:5" pos:end="25:39">if <condition pos:start="23:8" pos:end="23:21">(<expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:14">==</operator> <name pos:start="23:16" pos:end="23:20">count</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:39"><block_content pos:start="25:9" pos:end="25:39">

        <goto pos:start="25:9" pos:end="25:39">goto <name pos:start="25:14" pos:end="25:38">label__raw_write__success</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="35:70"><expr pos:start="29:5" pos:end="35:69"><call pos:start="29:5" pos:end="35:69"><name pos:start="29:5" pos:end="29:21">DEBUG_BLOCK_PRINT</name><argument_list pos:start="29:22" pos:end="35:69">(<argument pos:start="29:23" pos:end="31:53"><expr pos:start="29:23" pos:end="31:53"><literal type="string" pos:start="29:23" pos:end="29:43">"raw_pwrite(%d:%s, %"</literal> <name pos:start="29:45" pos:end="29:50">PRId64</name> <literal type="string" pos:start="29:52" pos:end="29:65">", %p, %d) [%"</literal> <name pos:start="29:67" pos:end="29:72">PRId64</name>

                      <literal type="string" pos:start="31:23" pos:end="31:53">"] write failed %d : %d = %s\n"</literal></expr></argument>,

                      <argument pos:start="33:23" pos:end="33:27"><expr pos:start="33:23" pos:end="33:27"><name pos:start="33:23" pos:end="33:27"><name pos:start="33:23" pos:end="33:23">s</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:27">fd</name></name></expr></argument>, <argument pos:start="33:30" pos:end="33:41"><expr pos:start="33:30" pos:end="33:41"><name pos:start="33:30" pos:end="33:41"><name pos:start="33:30" pos:end="33:31">bs</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:41">filename</name></name></expr></argument>, <argument pos:start="33:44" pos:end="33:49"><expr pos:start="33:44" pos:end="33:49"><name pos:start="33:44" pos:end="33:49">offset</name></expr></argument>, <argument pos:start="33:52" pos:end="33:54"><expr pos:start="33:52" pos:end="33:54"><name pos:start="33:52" pos:end="33:54">buf</name></expr></argument>, <argument pos:start="33:57" pos:end="33:61"><expr pos:start="33:57" pos:end="33:61"><name pos:start="33:57" pos:end="33:61">count</name></expr></argument>,

                      <argument pos:start="35:23" pos:end="35:39"><expr pos:start="35:23" pos:end="35:39"><name pos:start="35:23" pos:end="35:39"><name pos:start="35:23" pos:end="35:24">bs</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:39">total_sectors</name></name></expr></argument>, <argument pos:start="35:42" pos:end="35:44"><expr pos:start="35:42" pos:end="35:44"><name pos:start="35:42" pos:end="35:44">ret</name></expr></argument>, <argument pos:start="35:47" pos:end="35:51"><expr pos:start="35:47" pos:end="35:51"><name pos:start="35:47" pos:end="35:51">errno</name></expr></argument>, <argument pos:start="35:54" pos:end="35:68"><expr pos:start="35:54" pos:end="35:68"><call pos:start="35:54" pos:end="35:68"><name pos:start="35:54" pos:end="35:61">strerror</name><argument_list pos:start="35:62" pos:end="35:68">(<argument pos:start="35:63" pos:end="35:67"><expr pos:start="35:63" pos:end="35:67"><name pos:start="35:63" pos:end="35:67">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="39:1" pos:end="39:26"><name pos:start="39:1" pos:end="39:25">label__raw_write__success</name>:</label>



    <return pos:start="43:5" pos:end="43:37">return  <expr pos:start="43:13" pos:end="43:36"><ternary pos:start="43:13" pos:end="43:36"><condition pos:start="43:13" pos:end="43:23"><expr pos:start="43:13" pos:end="43:21"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:16">ret</name> <operator pos:start="43:18" pos:end="43:18">&lt;</operator> <literal type="number" pos:start="43:20" pos:end="43:20">0</literal><operator pos:start="43:21" pos:end="43:21">)</operator></expr> ?</condition><then pos:start="43:25" pos:end="43:30"> <expr pos:start="43:25" pos:end="43:30"><operator pos:start="43:25" pos:end="43:25">-</operator><name pos:start="43:26" pos:end="43:30">errno</name></expr> </then><else pos:start="43:32" pos:end="43:36">: <expr pos:start="43:34" pos:end="43:36"><name pos:start="43:34" pos:end="43:36">ret</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
