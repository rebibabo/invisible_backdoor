<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21782.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">h264_mp4toannexb_filter</name><parameter_list pos:start="1:35" pos:end="9:48">(<parameter pos:start="1:36" pos:end="1:65"><decl pos:start="1:36" pos:end="1:65"><type pos:start="1:36" pos:end="1:65"><name pos:start="1:36" pos:end="1:59">AVBitStreamFilterContext</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">bsfc</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:56"><decl pos:start="3:36" pos:end="3:56"><type pos:start="3:36" pos:end="3:56"><name pos:start="3:36" pos:end="3:49">AVCodecContext</name> <modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:56">avctx</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:74"><decl pos:start="3:59" pos:end="3:74"><type pos:start="3:59" pos:end="3:74"><specifier pos:start="3:59" pos:end="3:63">const</specifier> <name pos:start="3:65" pos:end="3:68">char</name> <modifier pos:start="3:70" pos:end="3:70">*</modifier></type><name pos:start="3:71" pos:end="3:74">args</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:53"><decl pos:start="5:36" pos:end="5:53"><type pos:start="5:36" pos:end="5:53"><name pos:start="5:36" pos:end="5:42">uint8_t</name>  <modifier pos:start="5:45" pos:end="5:45">*</modifier><modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:53">poutbuf</name></decl></parameter>, <parameter pos:start="5:56" pos:end="5:72"><decl pos:start="5:56" pos:end="5:72"><type pos:start="5:56" pos:end="5:72"><name pos:start="5:56" pos:end="5:58">int</name> <modifier pos:start="5:60" pos:end="5:60">*</modifier></type><name pos:start="5:61" pos:end="5:72">poutbuf_size</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:53"><decl pos:start="7:36" pos:end="7:53"><type pos:start="7:36" pos:end="7:53"><specifier pos:start="7:36" pos:end="7:40">const</specifier> <name pos:start="7:42" pos:end="7:48">uint8_t</name> <modifier pos:start="7:50" pos:end="7:50">*</modifier></type><name pos:start="7:51" pos:end="7:53">buf</name></decl></parameter>, <parameter pos:start="7:56" pos:end="7:72"><decl pos:start="7:56" pos:end="7:72"><type pos:start="7:56" pos:end="7:72"><name pos:start="7:56" pos:end="7:58">int</name></type>      <name pos:start="7:65" pos:end="7:72">buf_size</name></decl></parameter>,

                                   <parameter pos:start="9:36" pos:end="9:47"><decl pos:start="9:36" pos:end="9:47"><type pos:start="9:36" pos:end="9:47"><name pos:start="9:36" pos:end="9:38">int</name></type> <name pos:start="9:40" pos:end="9:47">keyframe</name></decl></parameter>)</parameter_list> <block pos:start="9:50" pos:end="183:1">{<block_content pos:start="11:5" pos:end="181:13">

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">H264BSFContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:23">ctx</name> <init pos:start="11:25" pos:end="11:41">= <expr pos:start="11:27" pos:end="11:41"><name pos:start="11:27" pos:end="11:41"><name pos:start="11:27" pos:end="11:30">bsfc</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:21">unit_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:21">nal_size</name></decl>, <decl pos:start="15:24" pos:end="15:37"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:24" pos:end="15:33">cumul_size</name> <init pos:start="15:35" pos:end="15:37">= <expr pos:start="15:37" pos:end="15:37"><literal type="number" pos:start="15:37" pos:end="15:37">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:27">/* nothing to filter */</comment>

    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:55">(<expr pos:start="21:9" pos:end="21:54"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:25"><name pos:start="21:10" pos:end="21:14">avctx</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:25">extradata</name></name> <operator pos:start="21:27" pos:end="21:28">||</operator> <name pos:start="21:30" pos:end="21:50"><name pos:start="21:30" pos:end="21:34">avctx</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:50">extradata_size</name></name> <operator pos:start="21:52" pos:end="21:52">&lt;</operator> <literal type="number" pos:start="21:54" pos:end="21:54">6</literal></expr>)</condition> <block pos:start="21:57" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:17">

        <expr_stmt pos:start="23:9" pos:end="23:34"><expr pos:start="23:9" pos:end="23:33"><operator pos:start="23:9" pos:end="23:9">*</operator><name pos:start="23:10" pos:end="23:16">poutbuf</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <operator pos:start="23:20" pos:end="23:20">(</operator><name pos:start="23:21" pos:end="23:27">uint8_t</name><operator pos:start="23:28" pos:end="23:28">*</operator><operator pos:start="23:29" pos:end="23:29">)</operator> <name pos:start="23:31" pos:end="23:33">buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:33"><expr pos:start="25:9" pos:end="25:32"><operator pos:start="25:9" pos:end="25:9">*</operator><name pos:start="25:10" pos:end="25:21">poutbuf_size</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:32">buf_size</name></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:55">/* retrieve sps and pps NAL units from extradata */</comment>

    <if_stmt pos:start="35:5" pos:end="113:5"><if pos:start="35:5" pos:end="113:5">if <condition pos:start="35:8" pos:end="35:27">(<expr pos:start="35:9" pos:end="35:26"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:26"><name pos:start="35:10" pos:end="35:12">ctx</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:26">sps_pps_data</name></name></expr>)</condition> <block pos:start="35:29" pos:end="113:5">{<block_content pos:start="37:9" pos:end="111:27">

        <decl_stmt pos:start="37:9" pos:end="37:27"><decl pos:start="37:9" pos:end="37:26"><type pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:16">uint16_t</name></type> <name pos:start="37:18" pos:end="37:26">unit_size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:32"><decl pos:start="39:9" pos:end="39:31"><type pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:16">uint32_t</name></type> <name pos:start="39:18" pos:end="39:27">total_size</name> <init pos:start="39:29" pos:end="39:31">= <expr pos:start="39:31" pos:end="39:31"><literal type="number" pos:start="39:31" pos:end="39:31">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:51"><decl pos:start="41:9" pos:end="41:27"><type pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:15">uint8_t</name> <modifier pos:start="41:17" pos:end="41:17">*</modifier></type><name pos:start="41:18" pos:end="41:20">out</name> <init pos:start="41:22" pos:end="41:27">= <expr pos:start="41:24" pos:end="41:27"><name pos:start="41:24" pos:end="41:27">NULL</name></expr></init></decl>, <decl pos:start="41:30" pos:end="41:36"><type ref="prev" pos:start="41:9" pos:end="41:17"/><name pos:start="41:30" pos:end="41:36">unit_nb</name></decl>, <decl pos:start="41:39" pos:end="41:50"><type ref="prev" pos:start="41:9" pos:end="41:17"/><name pos:start="41:39" pos:end="41:46">sps_done</name> <init pos:start="41:48" pos:end="41:50">= <expr pos:start="41:50" pos:end="41:50"><literal type="number" pos:start="41:50" pos:end="41:50">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:54"><decl pos:start="43:9" pos:end="43:53"><type pos:start="43:9" pos:end="43:23"><specifier pos:start="43:9" pos:end="43:13">const</specifier> <name pos:start="43:15" pos:end="43:21">uint8_t</name> <modifier pos:start="43:23" pos:end="43:23">*</modifier></type><name pos:start="43:24" pos:end="43:32">extradata</name> <init pos:start="43:34" pos:end="43:53">= <expr pos:start="43:36" pos:end="43:53"><name pos:start="43:36" pos:end="43:51"><name pos:start="43:36" pos:end="43:40">avctx</name><operator pos:start="43:41" pos:end="43:42">-&gt;</operator><name pos:start="43:43" pos:end="43:51">extradata</name></name><operator pos:start="43:52" pos:end="43:52">+</operator><literal type="number" pos:start="43:53" pos:end="43:53">4</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:59"><decl pos:start="45:9" pos:end="45:58"><type pos:start="45:9" pos:end="45:28"><specifier pos:start="45:9" pos:end="45:14">static</specifier> <specifier pos:start="45:16" pos:end="45:20">const</specifier> <name pos:start="45:22" pos:end="45:28">uint8_t</name></type> <name pos:start="45:30" pos:end="45:43"><name pos:start="45:30" pos:end="45:40">nalu_header</name><index pos:start="45:41" pos:end="45:43">[<expr pos:start="45:42" pos:end="45:42"><literal type="number" pos:start="45:42" pos:end="45:42">4</literal></expr>]</index></name> <init pos:start="45:45" pos:end="45:58">= <expr pos:start="45:47" pos:end="45:58"><block pos:start="45:47" pos:end="45:58">{<expr pos:start="45:48" pos:end="45:48"><literal type="number" pos:start="45:48" pos:end="45:48">0</literal></expr>, <expr pos:start="45:51" pos:end="45:51"><literal type="number" pos:start="45:51" pos:end="45:51">0</literal></expr>, <expr pos:start="45:54" pos:end="45:54"><literal type="number" pos:start="45:54" pos:end="45:54">0</literal></expr>, <expr pos:start="45:57" pos:end="45:57"><literal type="number" pos:start="45:57" pos:end="45:57">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="49:9" pos:end="49:40">/* retrieve length coded size */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:52"><expr pos:start="51:9" pos:end="51:51"><name pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:11">ctx</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:24">length_size</name></name> <operator pos:start="51:26" pos:end="51:26">=</operator> <operator pos:start="51:28" pos:end="51:28">(</operator><operator pos:start="51:29" pos:end="51:29">*</operator><name pos:start="51:30" pos:end="51:38">extradata</name><operator pos:start="51:39" pos:end="51:40">++</operator> <operator pos:start="51:42" pos:end="51:42">&amp;</operator> <literal type="number" pos:start="51:44" pos:end="51:46">0x3</literal><operator pos:start="51:47" pos:end="51:47">)</operator> <operator pos:start="51:49" pos:end="51:49">+</operator> <literal type="number" pos:start="51:51" pos:end="51:51">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="55:35"><if pos:start="53:9" pos:end="55:35">if <condition pos:start="53:12" pos:end="53:34">(<expr pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:28"><name pos:start="53:13" pos:end="53:15">ctx</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:28">length_size</name></name> <operator pos:start="53:30" pos:end="53:31">==</operator> <literal type="number" pos:start="53:33" pos:end="53:33">3</literal></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:35"><block_content pos:start="55:13" pos:end="55:35">

            <return pos:start="55:13" pos:end="55:35">return <expr pos:start="55:20" pos:end="55:34"><call pos:start="55:20" pos:end="55:34"><name pos:start="55:20" pos:end="55:26">AVERROR</name><argument_list pos:start="55:27" pos:end="55:34">(<argument pos:start="55:28" pos:end="55:33"><expr pos:start="55:28" pos:end="55:33"><name pos:start="55:28" pos:end="55:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="59:9" pos:end="59:42">/* retrieve sps and pps unit(s) */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:38"><expr pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:15">unit_nb</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <operator pos:start="61:19" pos:end="61:19">*</operator><name pos:start="61:20" pos:end="61:28">extradata</name><operator pos:start="61:29" pos:end="61:30">++</operator> <operator pos:start="61:32" pos:end="61:32">&amp;</operator> <literal type="number" pos:start="61:34" pos:end="61:37">0x1f</literal></expr>;</expr_stmt> <comment type="block" pos:start="61:40" pos:end="61:66">/* number of sps unit(s) */</comment>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:21">(<expr pos:start="63:13" pos:end="63:20"><operator pos:start="63:13" pos:end="63:13">!</operator><name pos:start="63:14" pos:end="63:20">unit_nb</name></expr>)</condition> <block pos:start="63:23" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:23">

            <expr_stmt pos:start="65:13" pos:end="65:35"><expr pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:19">unit_nb</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <operator pos:start="65:23" pos:end="65:23">*</operator><name pos:start="65:24" pos:end="65:32">extradata</name><operator pos:start="65:33" pos:end="65:34">++</operator></expr>;</expr_stmt> <comment type="block" pos:start="65:37" pos:end="65:63">/* number of pps unit(s) */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:23"><expr pos:start="67:13" pos:end="67:22"><name pos:start="67:13" pos:end="67:20">sps_done</name><operator pos:start="67:21" pos:end="67:22">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <while pos:start="71:9" pos:end="103:9">while <condition pos:start="71:15" pos:end="71:25">(<expr pos:start="71:16" pos:end="71:24"><name pos:start="71:16" pos:end="71:22">unit_nb</name><operator pos:start="71:23" pos:end="71:24">--</operator></expr>)</condition> <block pos:start="71:27" pos:end="103:9">{<block_content pos:start="73:13" pos:end="101:39">

            <expr_stmt pos:start="73:13" pos:end="73:43"><expr pos:start="73:13" pos:end="73:42"><name pos:start="73:13" pos:end="73:21">unit_size</name> <operator pos:start="73:23" pos:end="73:23">=</operator> <call pos:start="73:25" pos:end="73:42"><name pos:start="73:25" pos:end="73:31">AV_RB16</name><argument_list pos:start="73:32" pos:end="73:42">(<argument pos:start="73:33" pos:end="73:41"><expr pos:start="73:33" pos:end="73:41"><name pos:start="73:33" pos:end="73:41">extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:38"><expr pos:start="75:13" pos:end="75:37"><name pos:start="75:13" pos:end="75:22">total_size</name> <operator pos:start="75:24" pos:end="75:25">+=</operator> <name pos:start="75:27" pos:end="75:35">unit_size</name><operator pos:start="75:36" pos:end="75:36">+</operator><literal type="number" pos:start="75:37" pos:end="75:37">4</literal></expr>;</expr_stmt>

            <if_stmt pos:start="77:13" pos:end="83:13"><if pos:start="77:13" pos:end="83:13">if <condition pos:start="77:16" pos:end="77:79">(<expr pos:start="77:17" pos:end="77:78"><name pos:start="77:17" pos:end="77:25">extradata</name><operator pos:start="77:26" pos:end="77:26">+</operator><literal type="number" pos:start="77:27" pos:end="77:28">2</literal><operator pos:start="77:28" pos:end="77:28">+</operator><name pos:start="77:29" pos:end="77:37">unit_size</name> <operator pos:start="77:39" pos:end="77:39">&gt;</operator> <name pos:start="77:41" pos:end="77:56"><name pos:start="77:41" pos:end="77:45">avctx</name><operator pos:start="77:46" pos:end="77:47">-&gt;</operator><name pos:start="77:48" pos:end="77:56">extradata</name></name><operator pos:start="77:57" pos:end="77:57">+</operator><name pos:start="77:58" pos:end="77:78"><name pos:start="77:58" pos:end="77:62">avctx</name><operator pos:start="77:63" pos:end="77:64">-&gt;</operator><name pos:start="77:65" pos:end="77:78">extradata_size</name></name></expr>)</condition> <block pos:start="77:81" pos:end="83:13">{<block_content pos:start="79:17" pos:end="81:39">

                <expr_stmt pos:start="79:17" pos:end="79:29"><expr pos:start="79:17" pos:end="79:28"><call pos:start="79:17" pos:end="79:28"><name pos:start="79:17" pos:end="79:23">av_free</name><argument_list pos:start="79:24" pos:end="79:28">(<argument pos:start="79:25" pos:end="79:27"><expr pos:start="79:25" pos:end="79:27"><name pos:start="79:25" pos:end="79:27">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="81:17" pos:end="81:39">return <expr pos:start="81:24" pos:end="81:38"><call pos:start="81:24" pos:end="81:38"><name pos:start="81:24" pos:end="81:30">AVERROR</name><argument_list pos:start="81:31" pos:end="81:38">(<argument pos:start="81:32" pos:end="81:37"><expr pos:start="81:32" pos:end="81:37"><name pos:start="81:32" pos:end="81:37">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:46"><expr pos:start="85:13" pos:end="85:45"><name pos:start="85:13" pos:end="85:15">out</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="85:45"><name pos:start="85:19" pos:end="85:28">av_realloc</name><argument_list pos:start="85:29" pos:end="85:45">(<argument pos:start="85:30" pos:end="85:32"><expr pos:start="85:30" pos:end="85:32"><name pos:start="85:30" pos:end="85:32">out</name></expr></argument>, <argument pos:start="85:35" pos:end="85:44"><expr pos:start="85:35" pos:end="85:44"><name pos:start="85:35" pos:end="85:44">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="89:39"><if pos:start="87:13" pos:end="89:39">if <condition pos:start="87:16" pos:end="87:21">(<expr pos:start="87:17" pos:end="87:20"><operator pos:start="87:17" pos:end="87:17">!</operator><name pos:start="87:18" pos:end="87:20">out</name></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="89:39"><block_content pos:start="89:17" pos:end="89:39">

                <return pos:start="89:17" pos:end="89:39">return <expr pos:start="89:24" pos:end="89:38"><call pos:start="89:24" pos:end="89:38"><name pos:start="89:24" pos:end="89:30">AVERROR</name><argument_list pos:start="89:31" pos:end="89:38">(<argument pos:start="89:32" pos:end="89:37"><expr pos:start="89:32" pos:end="89:37"><name pos:start="89:32" pos:end="89:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:63"><expr pos:start="91:13" pos:end="91:62"><call pos:start="91:13" pos:end="91:62"><name pos:start="91:13" pos:end="91:18">memcpy</name><argument_list pos:start="91:19" pos:end="91:62">(<argument pos:start="91:20" pos:end="91:45"><expr pos:start="91:20" pos:end="91:45"><name pos:start="91:20" pos:end="91:22">out</name><operator pos:start="91:23" pos:end="91:23">+</operator><name pos:start="91:24" pos:end="91:33">total_size</name><operator pos:start="91:34" pos:end="91:34">-</operator><name pos:start="91:35" pos:end="91:43">unit_size</name><operator pos:start="91:44" pos:end="91:44">-</operator><literal type="number" pos:start="91:45" pos:end="91:45">4</literal></expr></argument>, <argument pos:start="91:48" pos:end="91:58"><expr pos:start="91:48" pos:end="91:58"><name pos:start="91:48" pos:end="91:58">nalu_header</name></expr></argument>, <argument pos:start="91:61" pos:end="91:61"><expr pos:start="91:61" pos:end="91:61"><literal type="number" pos:start="91:61" pos:end="91:61">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:71"><expr pos:start="93:13" pos:end="93:70"><call pos:start="93:13" pos:end="93:70"><name pos:start="93:13" pos:end="93:18">memcpy</name><argument_list pos:start="93:19" pos:end="93:70">(<argument pos:start="93:20" pos:end="93:43"><expr pos:start="93:20" pos:end="93:43"><name pos:start="93:20" pos:end="93:22">out</name><operator pos:start="93:23" pos:end="93:23">+</operator><name pos:start="93:24" pos:end="93:33">total_size</name><operator pos:start="93:34" pos:end="93:34">-</operator><name pos:start="93:35" pos:end="93:43">unit_size</name></expr></argument>,   <argument pos:start="93:48" pos:end="93:58"><expr pos:start="93:48" pos:end="93:58"><name pos:start="93:48" pos:end="93:56">extradata</name><operator pos:start="93:57" pos:end="93:57">+</operator><literal type="number" pos:start="93:58" pos:end="93:58">2</literal></expr></argument>, <argument pos:start="93:61" pos:end="93:69"><expr pos:start="93:61" pos:end="93:69"><name pos:start="93:61" pos:end="93:69">unit_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:37"><expr pos:start="95:13" pos:end="95:36"><name pos:start="95:13" pos:end="95:21">extradata</name> <operator pos:start="95:23" pos:end="95:24">+=</operator> <literal type="number" pos:start="95:26" pos:end="95:27">2</literal><operator pos:start="95:27" pos:end="95:27">+</operator><name pos:start="95:28" pos:end="95:36">unit_size</name></expr>;</expr_stmt>



            <if_stmt pos:start="99:13" pos:end="101:39"><if pos:start="99:13" pos:end="101:39">if <condition pos:start="99:16" pos:end="99:40">(<expr pos:start="99:17" pos:end="99:39"><operator pos:start="99:17" pos:end="99:17">!</operator><name pos:start="99:18" pos:end="99:24">unit_nb</name> <operator pos:start="99:26" pos:end="99:27">&amp;&amp;</operator> <operator pos:start="99:29" pos:end="99:29">!</operator><name pos:start="99:30" pos:end="99:37">sps_done</name><operator pos:start="99:38" pos:end="99:39">++</operator></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:39"><block_content pos:start="101:17" pos:end="101:39">

                <expr_stmt pos:start="101:17" pos:end="101:39"><expr pos:start="101:17" pos:end="101:38"><name pos:start="101:17" pos:end="101:23">unit_nb</name> <operator pos:start="101:25" pos:end="101:25">=</operator> <operator pos:start="101:27" pos:end="101:27">*</operator><name pos:start="101:28" pos:end="101:36">extradata</name><operator pos:start="101:37" pos:end="101:38">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="101:41" pos:end="101:67">/* number of pps unit(s) */</comment>

        </block_content>}</block></while>



        <expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:11">ctx</name><operator pos:start="107:12" pos:end="107:13">-&gt;</operator><name pos:start="107:14" pos:end="107:25">sps_pps_data</name></name> <operator pos:start="107:27" pos:end="107:27">=</operator> <name pos:start="107:29" pos:end="107:31">out</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:31"><expr pos:start="109:9" pos:end="109:30"><name pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:11">ctx</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:17">size</name></name> <operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:30">total_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:27"><expr pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:22"><name pos:start="111:9" pos:end="111:11">ctx</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:22">first_idr</name></name> <operator pos:start="111:24" pos:end="111:24">=</operator> <literal type="number" pos:start="111:26" pos:end="111:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:22"><expr pos:start="117:5" pos:end="117:21"><operator pos:start="117:5" pos:end="117:5">*</operator><name pos:start="117:6" pos:end="117:17">poutbuf_size</name> <operator pos:start="117:19" pos:end="117:19">=</operator> <literal type="number" pos:start="117:21" pos:end="117:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:20"><expr pos:start="119:5" pos:end="119:19"><operator pos:start="119:5" pos:end="119:5">*</operator><name pos:start="119:6" pos:end="119:12">poutbuf</name> <operator pos:start="119:14" pos:end="119:14">=</operator> <name pos:start="119:16" pos:end="119:19">NULL</name></expr>;</expr_stmt>

    <do pos:start="121:5" pos:end="177:36">do <block pos:start="121:8" pos:end="177:5">{<block_content pos:start="123:9" pos:end="175:50">

        <if_stmt pos:start="123:9" pos:end="133:36"><if pos:start="123:9" pos:end="125:30">if <condition pos:start="123:12" pos:end="123:34">(<expr pos:start="123:13" pos:end="123:33"><name pos:start="123:13" pos:end="123:28"><name pos:start="123:13" pos:end="123:15">ctx</name><operator pos:start="123:16" pos:end="123:17">-&gt;</operator><name pos:start="123:18" pos:end="123:28">length_size</name></name> <operator pos:start="123:30" pos:end="123:31">==</operator> <literal type="number" pos:start="123:33" pos:end="123:33">1</literal></expr>)</condition><block type="pseudo" pos:start="125:13" pos:end="125:30"><block_content pos:start="125:13" pos:end="125:30">

            <expr_stmt pos:start="125:13" pos:end="125:30"><expr pos:start="125:13" pos:end="125:29"><name pos:start="125:13" pos:end="125:20">nal_size</name> <operator pos:start="125:22" pos:end="125:22">=</operator> <name pos:start="125:24" pos:end="125:29"><name pos:start="125:24" pos:end="125:26">buf</name><index pos:start="125:27" pos:end="125:29">[<expr pos:start="125:28" pos:end="125:28"><literal type="number" pos:start="125:28" pos:end="125:28">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="127:9" pos:end="129:36">else if <condition pos:start="127:17" pos:end="127:39">(<expr pos:start="127:18" pos:end="127:38"><name pos:start="127:18" pos:end="127:33"><name pos:start="127:18" pos:end="127:20">ctx</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:33">length_size</name></name> <operator pos:start="127:35" pos:end="127:36">==</operator> <literal type="number" pos:start="127:38" pos:end="127:38">2</literal></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:36"><block_content pos:start="129:13" pos:end="129:36">

            <expr_stmt pos:start="129:13" pos:end="129:36"><expr pos:start="129:13" pos:end="129:35"><name pos:start="129:13" pos:end="129:20">nal_size</name> <operator pos:start="129:22" pos:end="129:22">=</operator> <call pos:start="129:24" pos:end="129:35"><name pos:start="129:24" pos:end="129:30">AV_RB16</name><argument_list pos:start="129:31" pos:end="129:35">(<argument pos:start="129:32" pos:end="129:34"><expr pos:start="129:32" pos:end="129:34"><name pos:start="129:32" pos:end="129:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="131:9" pos:end="133:36">else<block type="pseudo" pos:start="133:13" pos:end="133:36"><block_content pos:start="133:13" pos:end="133:36">

            <expr_stmt pos:start="133:13" pos:end="133:36"><expr pos:start="133:13" pos:end="133:35"><name pos:start="133:13" pos:end="133:20">nal_size</name> <operator pos:start="133:22" pos:end="133:22">=</operator> <call pos:start="133:24" pos:end="133:35"><name pos:start="133:24" pos:end="133:30">AV_RB32</name><argument_list pos:start="133:31" pos:end="133:35">(<argument pos:start="133:32" pos:end="133:34"><expr pos:start="133:32" pos:end="133:34"><name pos:start="133:32" pos:end="133:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:32"><expr pos:start="137:9" pos:end="137:31"><name pos:start="137:9" pos:end="137:11">buf</name> <operator pos:start="137:13" pos:end="137:14">+=</operator> <name pos:start="137:16" pos:end="137:31"><name pos:start="137:16" pos:end="137:18">ctx</name><operator pos:start="137:19" pos:end="137:20">-&gt;</operator><name pos:start="137:21" pos:end="137:31">length_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:32"><expr pos:start="139:9" pos:end="139:31"><name pos:start="139:9" pos:end="139:17">unit_type</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <operator pos:start="139:21" pos:end="139:21">*</operator><name pos:start="139:22" pos:end="139:24">buf</name> <operator pos:start="139:26" pos:end="139:26">&amp;</operator> <literal type="number" pos:start="139:28" pos:end="139:31">0x1f</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="143:9" pos:end="143:73">/* prepend only to the first type 5 NAL unit of an IDR picture */</comment>

        <if_stmt pos:start="145:9" pos:end="169:9"><if pos:start="145:9" pos:end="155:9">if <condition pos:start="145:12" pos:end="145:45">(<expr pos:start="145:13" pos:end="145:44"><name pos:start="145:13" pos:end="145:26"><name pos:start="145:13" pos:end="145:15">ctx</name><operator pos:start="145:16" pos:end="145:17">-&gt;</operator><name pos:start="145:18" pos:end="145:26">first_idr</name></name> <operator pos:start="145:28" pos:end="145:29">&amp;&amp;</operator> <name pos:start="145:31" pos:end="145:39">unit_type</name> <operator pos:start="145:41" pos:end="145:42">==</operator> <literal type="number" pos:start="145:44" pos:end="145:44">5</literal></expr>)</condition> <block pos:start="145:47" pos:end="155:9">{<block_content pos:start="147:13" pos:end="153:31">

            <expr_stmt pos:start="147:13" pos:end="151:42"><expr pos:start="147:13" pos:end="151:41"><call pos:start="147:13" pos:end="151:41"><name pos:start="147:13" pos:end="147:26">alloc_and_copy</name><argument_list pos:start="147:27" pos:end="151:41">(<argument pos:start="147:28" pos:end="147:34"><expr pos:start="147:28" pos:end="147:34"><name pos:start="147:28" pos:end="147:34">poutbuf</name></expr></argument>, <argument pos:start="147:37" pos:end="147:48"><expr pos:start="147:37" pos:end="147:48"><name pos:start="147:37" pos:end="147:48">poutbuf_size</name></expr></argument>,

                           <argument pos:start="149:28" pos:end="149:44"><expr pos:start="149:28" pos:end="149:44"><name pos:start="149:28" pos:end="149:44"><name pos:start="149:28" pos:end="149:30">ctx</name><operator pos:start="149:31" pos:end="149:32">-&gt;</operator><name pos:start="149:33" pos:end="149:44">sps_pps_data</name></name></expr></argument>, <argument pos:start="149:47" pos:end="149:55"><expr pos:start="149:47" pos:end="149:55"><name pos:start="149:47" pos:end="149:55"><name pos:start="149:47" pos:end="149:49">ctx</name><operator pos:start="149:50" pos:end="149:51">-&gt;</operator><name pos:start="149:52" pos:end="149:55">size</name></name></expr></argument>,

                           <argument pos:start="151:28" pos:end="151:30"><expr pos:start="151:28" pos:end="151:30"><name pos:start="151:28" pos:end="151:30">buf</name></expr></argument>, <argument pos:start="151:33" pos:end="151:40"><expr pos:start="151:33" pos:end="151:40"><name pos:start="151:33" pos:end="151:40">nal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:31"><expr pos:start="153:13" pos:end="153:30"><name pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:15">ctx</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:26">first_idr</name></name> <operator pos:start="153:28" pos:end="153:28">=</operator> <literal type="number" pos:start="153:30" pos:end="153:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="157:9" pos:end="169:9">else <block pos:start="157:14" pos:end="169:9">{<block_content pos:start="159:13" pos:end="167:35">

            <expr_stmt pos:start="159:13" pos:end="163:42"><expr pos:start="159:13" pos:end="163:41"><call pos:start="159:13" pos:end="163:41"><name pos:start="159:13" pos:end="159:26">alloc_and_copy</name><argument_list pos:start="159:27" pos:end="163:41">(<argument pos:start="159:28" pos:end="159:34"><expr pos:start="159:28" pos:end="159:34"><name pos:start="159:28" pos:end="159:34">poutbuf</name></expr></argument>, <argument pos:start="159:37" pos:end="159:48"><expr pos:start="159:37" pos:end="159:48"><name pos:start="159:37" pos:end="159:48">poutbuf_size</name></expr></argument>,

                           <argument pos:start="161:28" pos:end="161:31"><expr pos:start="161:28" pos:end="161:31"><name pos:start="161:28" pos:end="161:31">NULL</name></expr></argument>, <argument pos:start="161:34" pos:end="161:34"><expr pos:start="161:34" pos:end="161:34"><literal type="number" pos:start="161:34" pos:end="161:34">0</literal></expr></argument>,

                           <argument pos:start="163:28" pos:end="163:30"><expr pos:start="163:28" pos:end="163:30"><name pos:start="163:28" pos:end="163:30">buf</name></expr></argument>, <argument pos:start="163:33" pos:end="163:40"><expr pos:start="163:33" pos:end="163:40"><name pos:start="163:33" pos:end="163:40">nal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="165:13" pos:end="167:35"><if pos:start="165:13" pos:end="167:35">if <condition pos:start="165:16" pos:end="165:50">(<expr pos:start="165:17" pos:end="165:49"><operator pos:start="165:17" pos:end="165:17">!</operator><name pos:start="165:18" pos:end="165:31"><name pos:start="165:18" pos:end="165:20">ctx</name><operator pos:start="165:21" pos:end="165:22">-&gt;</operator><name pos:start="165:23" pos:end="165:31">first_idr</name></name> <operator pos:start="165:33" pos:end="165:34">&amp;&amp;</operator> <name pos:start="165:36" pos:end="165:44">unit_type</name> <operator pos:start="165:46" pos:end="165:47">==</operator> <literal type="number" pos:start="165:49" pos:end="165:49">1</literal></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="167:35"><block_content pos:start="167:17" pos:end="167:35">

                <expr_stmt pos:start="167:17" pos:end="167:35"><expr pos:start="167:17" pos:end="167:34"><name pos:start="167:17" pos:end="167:30"><name pos:start="167:17" pos:end="167:19">ctx</name><operator pos:start="167:20" pos:end="167:21">-&gt;</operator><name pos:start="167:22" pos:end="167:30">first_idr</name></name> <operator pos:start="167:32" pos:end="167:32">=</operator> <literal type="number" pos:start="167:34" pos:end="167:34">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:24"><expr pos:start="173:9" pos:end="173:23"><name pos:start="173:9" pos:end="173:11">buf</name> <operator pos:start="173:13" pos:end="173:14">+=</operator> <name pos:start="173:16" pos:end="173:23">nal_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:50"><expr pos:start="175:9" pos:end="175:49"><name pos:start="175:9" pos:end="175:18">cumul_size</name> <operator pos:start="175:20" pos:end="175:21">+=</operator> <name pos:start="175:23" pos:end="175:30">nal_size</name> <operator pos:start="175:32" pos:end="175:32">+</operator> <name pos:start="175:34" pos:end="175:49"><name pos:start="175:34" pos:end="175:36">ctx</name><operator pos:start="175:37" pos:end="175:38">-&gt;</operator><name pos:start="175:39" pos:end="175:49">length_size</name></name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="177:13" pos:end="177:35">(<expr pos:start="177:14" pos:end="177:34"><name pos:start="177:14" pos:end="177:23">cumul_size</name> <operator pos:start="177:25" pos:end="177:25">&lt;</operator> <name pos:start="177:27" pos:end="177:34">buf_size</name></expr>)</condition>;</do>



    <return pos:start="181:5" pos:end="181:13">return <expr pos:start="181:12" pos:end="181:12"><literal type="number" pos:start="181:12" pos:end="181:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
