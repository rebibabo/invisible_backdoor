<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17007.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:12">coroutine_fn</name></type> <name pos:start="1:14" pos:end="1:34">iscsi_co_write_zeroes</name><parameter_list pos:start="1:35" pos:end="3:74">(<parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><name pos:start="1:36" pos:end="1:51">BlockDriverState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">bs</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:75"><decl pos:start="1:58" pos:end="1:75"><type pos:start="1:58" pos:end="1:75"><name pos:start="1:58" pos:end="1:64">int64_t</name></type> <name pos:start="1:66" pos:end="1:75">sector_num</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:49"><decl pos:start="3:36" pos:end="3:49"><type pos:start="3:36" pos:end="3:49"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:49">nb_sectors</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:73"><decl pos:start="3:52" pos:end="3:73"><type pos:start="3:52" pos:end="3:73"><name pos:start="3:52" pos:end="3:67">BdrvRequestFlags</name></type> <name pos:start="3:69" pos:end="3:73">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="135:1">{<block_content pos:start="7:5" pos:end="133:13">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IscsiLun</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:22">iscsilun</name> <init pos:start="7:24" pos:end="7:35">= <expr pos:start="7:26" pos:end="7:35"><name pos:start="7:26" pos:end="7:35"><name pos:start="7:26" pos:end="7:27">bs</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:20">IscsiTask</name></name></type> <name pos:start="9:22" pos:end="9:26">iTask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:16">lba</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">nb_blocks</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:66">(<expr pos:start="17:9" pos:end="17:65"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:65"><name pos:start="17:10" pos:end="17:31">is_request_lun_aligned</name><argument_list pos:start="17:32" pos:end="17:65">(<argument pos:start="17:33" pos:end="17:42"><expr pos:start="17:33" pos:end="17:42"><name pos:start="17:33" pos:end="17:42">sector_num</name></expr></argument>, <argument pos:start="17:45" pos:end="17:54"><expr pos:start="17:45" pos:end="17:54"><name pos:start="17:45" pos:end="17:54">nb_sectors</name></expr></argument>, <argument pos:start="17:57" pos:end="17:64"><expr pos:start="17:57" pos:end="17:64"><name pos:start="17:57" pos:end="17:64">iscsilun</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:68" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:23">

        <return pos:start="19:9" pos:end="19:23">return <expr pos:start="19:16" pos:end="19:22"><operator pos:start="19:16" pos:end="19:16">-</operator><name pos:start="19:17" pos:end="19:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:67">(<expr pos:start="25:9" pos:end="25:66"><operator pos:start="25:9" pos:end="25:9">!</operator><operator pos:start="25:10" pos:end="25:10">(</operator><name pos:start="25:11" pos:end="25:15">flags</name> <operator pos:start="25:17" pos:end="25:17">&amp;</operator> <name pos:start="25:19" pos:end="25:36">BDRV_REQ_MAY_UNMAP</name><operator pos:start="25:37" pos:end="25:37">)</operator> <operator pos:start="25:39" pos:end="25:40">&amp;&amp;</operator> <operator pos:start="25:42" pos:end="25:42">!</operator><name pos:start="25:43" pos:end="25:66"><name pos:start="25:43" pos:end="25:50">iscsilun</name><operator pos:start="25:51" pos:end="25:52">-&gt;</operator><name pos:start="25:53" pos:end="25:66">has_write_same</name></name></expr>)</condition> <block pos:start="25:69" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:24">

        <comment type="block" pos:start="27:9" pos:end="27:69">/* WRITE SAME without UNMAP is not supported by the target */</comment>

        <return pos:start="29:9" pos:end="29:24">return <expr pos:start="29:16" pos:end="29:23"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:61">(<expr pos:start="35:9" pos:end="35:60"><operator pos:start="35:9" pos:end="35:9">(</operator><name pos:start="35:10" pos:end="35:14">flags</name> <operator pos:start="35:16" pos:end="35:16">&amp;</operator> <name pos:start="35:18" pos:end="35:35">BDRV_REQ_MAY_UNMAP</name><operator pos:start="35:36" pos:end="35:36">)</operator> <operator pos:start="35:38" pos:end="35:39">&amp;&amp;</operator> <operator pos:start="35:41" pos:end="35:41">!</operator><name pos:start="35:42" pos:end="35:60"><name pos:start="35:42" pos:end="35:49">iscsilun</name><operator pos:start="35:50" pos:end="35:51">-&gt;</operator><name pos:start="35:52" pos:end="35:54">lbp</name><operator pos:start="35:55" pos:end="35:55">.</operator><name pos:start="35:56" pos:end="35:60">lbpws</name></name></expr>)</condition> <block pos:start="35:63" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:24">

        <comment type="block" pos:start="37:9" pos:end="37:66">/* WRITE SAME with UNMAP is not supported by the target */</comment>

        <return pos:start="39:9" pos:end="39:24">return <expr pos:start="39:16" pos:end="39:23"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:48"><expr pos:start="45:5" pos:end="45:47"><name pos:start="45:5" pos:end="45:7">lba</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:47"><name pos:start="45:11" pos:end="45:25">sector_qemu2lun</name><argument_list pos:start="45:26" pos:end="45:47">(<argument pos:start="45:27" pos:end="45:36"><expr pos:start="45:27" pos:end="45:36"><name pos:start="45:27" pos:end="45:36">sector_num</name></expr></argument>, <argument pos:start="45:39" pos:end="45:46"><expr pos:start="45:39" pos:end="45:46"><name pos:start="45:39" pos:end="45:46">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:54"><expr pos:start="47:5" pos:end="47:53"><name pos:start="47:5" pos:end="47:13">nb_blocks</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:53"><name pos:start="47:17" pos:end="47:31">sector_qemu2lun</name><argument_list pos:start="47:32" pos:end="47:53">(<argument pos:start="47:33" pos:end="47:42"><expr pos:start="47:33" pos:end="47:42"><name pos:start="47:33" pos:end="47:42">nb_sectors</name></expr></argument>, <argument pos:start="47:45" pos:end="47:52"><expr pos:start="47:45" pos:end="47:52"><name pos:start="47:45" pos:end="47:52">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:36">(<expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:16">iscsilun</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:27">zeroblock</name></name> <operator pos:start="51:29" pos:end="51:30">==</operator> <name pos:start="51:32" pos:end="51:35">NULL</name></expr>)</condition> <block pos:start="51:38" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:62">

        <expr_stmt pos:start="53:9" pos:end="53:62"><expr pos:start="53:9" pos:end="53:61"><name pos:start="53:9" pos:end="53:27"><name pos:start="53:9" pos:end="53:16">iscsilun</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:27">zeroblock</name></name> <operator pos:start="53:29" pos:end="53:29">=</operator> <call pos:start="53:31" pos:end="53:61"><name pos:start="53:31" pos:end="53:39">g_malloc0</name><argument_list pos:start="53:40" pos:end="53:61">(<argument pos:start="53:41" pos:end="53:60"><expr pos:start="53:41" pos:end="53:60"><name pos:start="53:41" pos:end="53:60"><name pos:start="53:41" pos:end="53:48">iscsilun</name><operator pos:start="53:49" pos:end="53:50">-&gt;</operator><name pos:start="53:51" pos:end="53:60">block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:46"><expr pos:start="59:5" pos:end="59:45"><call pos:start="59:5" pos:end="59:45"><name pos:start="59:5" pos:end="59:27">iscsi_co_init_iscsitask</name><argument_list pos:start="59:28" pos:end="59:45">(<argument pos:start="59:29" pos:end="59:36"><expr pos:start="59:29" pos:end="59:36"><name pos:start="59:29" pos:end="59:36">iscsilun</name></expr></argument>, <argument pos:start="59:39" pos:end="59:44"><expr pos:start="59:39" pos:end="59:44"><operator pos:start="59:39" pos:end="59:39">&amp;</operator><name pos:start="59:40" pos:end="59:44">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="61:1" pos:end="61:6"><name pos:start="61:1" pos:end="61:5">retry</name>:</label>

    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="73:5">if <condition pos:start="63:8" pos:end="69:74">(<expr pos:start="63:9" pos:end="69:73"><call pos:start="63:9" pos:end="69:65"><name pos:start="63:9" pos:end="63:30">iscsi_writesame16_task</name><argument_list pos:start="63:31" pos:end="69:65">(<argument pos:start="63:32" pos:end="63:46"><expr pos:start="63:32" pos:end="63:46"><name pos:start="63:32" pos:end="63:46"><name pos:start="63:32" pos:end="63:39">iscsilun</name><operator pos:start="63:40" pos:end="63:41">-&gt;</operator><name pos:start="63:42" pos:end="63:46">iscsi</name></name></expr></argument>, <argument pos:start="63:49" pos:end="63:61"><expr pos:start="63:49" pos:end="63:61"><name pos:start="63:49" pos:end="63:61"><name pos:start="63:49" pos:end="63:56">iscsilun</name><operator pos:start="63:57" pos:end="63:58">-&gt;</operator><name pos:start="63:59" pos:end="63:61">lun</name></name></expr></argument>, <argument pos:start="63:64" pos:end="63:66"><expr pos:start="63:64" pos:end="63:66"><name pos:start="63:64" pos:end="63:66">lba</name></expr></argument>,

                               <argument pos:start="65:32" pos:end="65:50"><expr pos:start="65:32" pos:end="65:50"><name pos:start="65:32" pos:end="65:50"><name pos:start="65:32" pos:end="65:39">iscsilun</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:50">zeroblock</name></name></expr></argument>, <argument pos:start="65:53" pos:end="65:72"><expr pos:start="65:53" pos:end="65:72"><name pos:start="65:53" pos:end="65:72"><name pos:start="65:53" pos:end="65:60">iscsilun</name><operator pos:start="65:61" pos:end="65:62">-&gt;</operator><name pos:start="65:63" pos:end="65:72">block_size</name></name></expr></argument>,

                               <argument pos:start="67:32" pos:end="67:40"><expr pos:start="67:32" pos:end="67:40"><name pos:start="67:32" pos:end="67:40">nb_blocks</name></expr></argument>, <argument pos:start="67:43" pos:end="67:43"><expr pos:start="67:43" pos:end="67:43"><literal type="number" pos:start="67:43" pos:end="67:43">0</literal></expr></argument>, <argument pos:start="67:46" pos:end="67:75"><expr pos:start="67:46" pos:end="67:75"><operator pos:start="67:46" pos:end="67:46">!</operator><operator pos:start="67:47" pos:end="67:47">!</operator><operator pos:start="67:48" pos:end="67:48">(</operator><name pos:start="67:49" pos:end="67:53">flags</name> <operator pos:start="67:55" pos:end="67:55">&amp;</operator> <name pos:start="67:57" pos:end="67:74">BDRV_REQ_MAY_UNMAP</name><operator pos:start="67:75" pos:end="67:75">)</operator></expr></argument>,

                               <argument pos:start="69:32" pos:end="69:32"><expr pos:start="69:32" pos:end="69:32"><literal type="number" pos:start="69:32" pos:end="69:32">0</literal></expr></argument>, <argument pos:start="69:35" pos:end="69:35"><expr pos:start="69:35" pos:end="69:35"><literal type="number" pos:start="69:35" pos:end="69:35">0</literal></expr></argument>, <argument pos:start="69:38" pos:end="69:56"><expr pos:start="69:38" pos:end="69:56"><name pos:start="69:38" pos:end="69:56">iscsi_co_generic_cb</name></expr></argument>, <argument pos:start="69:59" pos:end="69:64"><expr pos:start="69:59" pos:end="69:64"><operator pos:start="69:59" pos:end="69:59">&amp;</operator><name pos:start="69:60" pos:end="69:64">iTask</name></expr></argument>)</argument_list></call> <operator pos:start="69:67" pos:end="69:68">==</operator> <name pos:start="69:70" pos:end="69:73">NULL</name></expr>)</condition> <block pos:start="69:76" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:23">

        <return pos:start="71:9" pos:end="71:23">return <expr pos:start="71:16" pos:end="71:22"><operator pos:start="71:16" pos:end="71:16">-</operator><name pos:start="71:17" pos:end="71:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="77:5" pos:end="83:5">while <condition pos:start="77:11" pos:end="77:27">(<expr pos:start="77:12" pos:end="77:26"><operator pos:start="77:12" pos:end="77:12">!</operator><name pos:start="77:13" pos:end="77:26"><name pos:start="77:13" pos:end="77:17">iTask</name><operator pos:start="77:18" pos:end="77:18">.</operator><name pos:start="77:19" pos:end="77:26">complete</name></name></expr>)</condition> <block pos:start="77:29" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:31">

        <expr_stmt pos:start="79:9" pos:end="79:35"><expr pos:start="79:9" pos:end="79:34"><call pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:24">iscsi_set_events</name><argument_list pos:start="79:25" pos:end="79:34">(<argument pos:start="79:26" pos:end="79:33"><expr pos:start="79:26" pos:end="79:33"><name pos:start="79:26" pos:end="79:33">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:31"><expr pos:start="81:9" pos:end="81:30"><call pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:28">qemu_coroutine_yield</name><argument_list pos:start="81:29" pos:end="81:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="87:5" pos:end="101:5"><if pos:start="87:5" pos:end="101:5">if <condition pos:start="87:8" pos:end="91:73">(<expr pos:start="87:9" pos:end="91:72"><name pos:start="87:9" pos:end="87:20"><name pos:start="87:9" pos:end="87:13">iTask</name><operator pos:start="87:14" pos:end="87:14">.</operator><name pos:start="87:15" pos:end="87:20">status</name></name> <operator pos:start="87:22" pos:end="87:23">==</operator> <name pos:start="87:25" pos:end="87:51">SCSI_STATUS_CHECK_CONDITION</name> <operator pos:start="87:53" pos:end="87:54">&amp;&amp;</operator>

        <name pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:13">iTask</name><operator pos:start="89:14" pos:end="89:14">.</operator><name pos:start="89:15" pos:end="89:18">task</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:25">sense</name><operator pos:start="89:26" pos:end="89:26">.</operator><name pos:start="89:27" pos:end="89:29">key</name></name> <operator pos:start="89:31" pos:end="89:32">==</operator> <name pos:start="89:34" pos:end="89:59">SCSI_SENSE_ILLEGAL_REQUEST</name> <operator pos:start="89:61" pos:end="89:62">&amp;&amp;</operator>

        <name pos:start="91:9" pos:end="91:30"><name pos:start="91:9" pos:end="91:13">iTask</name><operator pos:start="91:14" pos:end="91:14">.</operator><name pos:start="91:15" pos:end="91:18">task</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:25">sense</name><operator pos:start="91:26" pos:end="91:26">.</operator><name pos:start="91:27" pos:end="91:30">ascq</name></name> <operator pos:start="91:32" pos:end="91:33">==</operator> <name pos:start="91:35" pos:end="91:72">SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE</name></expr>)</condition> <block pos:start="91:75" pos:end="101:5">{<block_content pos:start="95:9" pos:end="99:24">

        <comment type="block" pos:start="93:9" pos:end="93:55">/* WRITE SAME is not supported by the target */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:41"><expr pos:start="95:9" pos:end="95:40"><name pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:16">iscsilun</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:32">has_write_same</name></name> <operator pos:start="95:34" pos:end="95:34">=</operator> <name pos:start="95:36" pos:end="95:40">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:40"><expr pos:start="97:9" pos:end="97:39"><call pos:start="97:9" pos:end="97:39"><name pos:start="97:9" pos:end="97:27">scsi_free_scsi_task</name><argument_list pos:start="97:28" pos:end="97:39">(<argument pos:start="97:29" pos:end="97:38"><expr pos:start="97:29" pos:end="97:38"><name pos:start="97:29" pos:end="97:38"><name pos:start="97:29" pos:end="97:33">iTask</name><operator pos:start="97:34" pos:end="97:34">.</operator><name pos:start="97:35" pos:end="97:38">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:24">return <expr pos:start="99:16" pos:end="99:23"><operator pos:start="99:16" pos:end="99:16">-</operator><name pos:start="99:17" pos:end="99:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:27">(<expr pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:18"><name pos:start="105:9" pos:end="105:13">iTask</name><operator pos:start="105:14" pos:end="105:14">.</operator><name pos:start="105:15" pos:end="105:18">task</name></name> <operator pos:start="105:20" pos:end="105:21">!=</operator> <name pos:start="105:23" pos:end="105:26">NULL</name></expr>)</condition> <block pos:start="105:29" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:26">

        <expr_stmt pos:start="107:9" pos:end="107:40"><expr pos:start="107:9" pos:end="107:39"><call pos:start="107:9" pos:end="107:39"><name pos:start="107:9" pos:end="107:27">scsi_free_scsi_task</name><argument_list pos:start="107:28" pos:end="107:39">(<argument pos:start="107:29" pos:end="107:38"><expr pos:start="107:29" pos:end="107:38"><name pos:start="107:29" pos:end="107:38"><name pos:start="107:29" pos:end="107:33">iTask</name><operator pos:start="107:34" pos:end="107:34">.</operator><name pos:start="107:35" pos:end="107:38">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:26"><expr pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:18"><name pos:start="109:9" pos:end="109:13">iTask</name><operator pos:start="109:14" pos:end="109:14">.</operator><name pos:start="109:15" pos:end="109:18">task</name></name> <operator pos:start="109:20" pos:end="109:20">=</operator> <name pos:start="109:22" pos:end="109:25">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:23">(<expr pos:start="115:9" pos:end="115:22"><name pos:start="115:9" pos:end="115:22"><name pos:start="115:9" pos:end="115:13">iTask</name><operator pos:start="115:14" pos:end="115:14">.</operator><name pos:start="115:15" pos:end="115:22">do_retry</name></name></expr>)</condition> <block pos:start="115:25" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:19">

        <expr_stmt pos:start="117:9" pos:end="117:27"><expr pos:start="117:9" pos:end="117:26"><name pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:13">iTask</name><operator pos:start="117:14" pos:end="117:14">.</operator><name pos:start="117:15" pos:end="117:22">complete</name></name> <operator pos:start="117:24" pos:end="117:24">=</operator> <literal type="number" pos:start="117:26" pos:end="117:26">0</literal></expr>;</expr_stmt>

        <goto pos:start="119:9" pos:end="119:19">goto <name pos:start="119:14" pos:end="119:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:41">(<expr pos:start="125:9" pos:end="125:40"><name pos:start="125:9" pos:end="125:20"><name pos:start="125:9" pos:end="125:13">iTask</name><operator pos:start="125:14" pos:end="125:14">.</operator><name pos:start="125:15" pos:end="125:20">status</name></name> <operator pos:start="125:22" pos:end="125:23">!=</operator> <name pos:start="125:25" pos:end="125:40">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="125:43" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:20">

        <return pos:start="127:9" pos:end="127:20">return <expr pos:start="127:16" pos:end="127:19"><operator pos:start="127:16" pos:end="127:16">-</operator><name pos:start="127:17" pos:end="127:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="133:5" pos:end="133:13">return <expr pos:start="133:12" pos:end="133:12"><literal type="number" pos:start="133:12" pos:end="133:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
