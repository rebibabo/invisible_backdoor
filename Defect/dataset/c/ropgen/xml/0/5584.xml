<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5584.c" pos:tabs="8"><function pos:start="1:1" pos:end="251:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">smbios_entry_add</name><parameter_list pos:start="1:22" pos:end="1:37">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:32"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="251:1">{<block_content pos:start="5:5" pos:end="249:12">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">local_err</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">val</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:30"><expr pos:start="11:5" pos:end="11:29"><call pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:29">(<argument pos:start="11:12" pos:end="11:28"><expr pos:start="11:12" pos:end="11:28"><operator pos:start="11:12" pos:end="11:12">!</operator><name pos:start="11:13" pos:end="11:28">smbios_immutable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:37"><expr pos:start="13:5" pos:end="13:36"><name pos:start="13:5" pos:end="13:7">val</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:36"><name pos:start="13:11" pos:end="13:22">qemu_opt_get</name><argument_list pos:start="13:23" pos:end="13:36">(<argument pos:start="13:24" pos:end="13:27"><expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">opts</name></expr></argument>, <argument pos:start="13:30" pos:end="13:35"><expr pos:start="13:30" pos:end="13:35"><literal type="string" pos:start="13:30" pos:end="13:35">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="115:5"><if pos:start="15:5" pos:end="115:5">if <condition pos:start="15:8" pos:end="15:12">(<expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">val</name></expr>)</condition> <block pos:start="15:14" pos:end="115:5">{<block_content pos:start="17:9" pos:end="113:15">

        <decl_stmt pos:start="17:9" pos:end="17:47"><decl pos:start="17:9" pos:end="17:46"><type pos:start="17:9" pos:end="17:40"><name pos:start="17:9" pos:end="17:38"><name pos:start="17:9" pos:end="17:14">struct</name> <name pos:start="17:16" pos:end="17:38">smbios_structure_header</name></name> <modifier pos:start="17:40" pos:end="17:40">*</modifier></type><name pos:start="17:41" pos:end="17:46">header</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:35"><decl pos:start="19:9" pos:end="19:34"><type pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:14">struct</name> <name pos:start="19:16" pos:end="19:27">smbios_table</name></name> <modifier pos:start="19:29" pos:end="19:29">*</modifier></type><name pos:start="19:30" pos:end="19:34">table</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:17"><decl pos:start="21:9" pos:end="21:16"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:16">size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:68"><expr pos:start="25:9" pos:end="25:67"><call pos:start="25:9" pos:end="25:67"><name pos:start="25:9" pos:end="25:26">qemu_opts_validate</name><argument_list pos:start="25:27" pos:end="25:67">(<argument pos:start="25:28" pos:end="25:31"><expr pos:start="25:28" pos:end="25:31"><name pos:start="25:28" pos:end="25:31">opts</name></expr></argument>, <argument pos:start="25:34" pos:end="25:54"><expr pos:start="25:34" pos:end="25:54"><name pos:start="25:34" pos:end="25:54">qemu_smbios_file_opts</name></expr></argument>, <argument pos:start="25:57" pos:end="25:66"><expr pos:start="25:57" pos:end="25:66"><operator pos:start="25:57" pos:end="25:57">&amp;</operator><name pos:start="25:58" pos:end="25:66">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:22">(<expr pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:21">local_err</name></expr>)</condition> <block pos:start="27:24" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:20">

            <expr_stmt pos:start="29:13" pos:end="29:60"><expr pos:start="29:13" pos:end="29:59"><call pos:start="29:13" pos:end="29:59"><name pos:start="29:13" pos:end="29:24">error_report</name><argument_list pos:start="29:25" pos:end="29:59">(<argument pos:start="29:26" pos:end="29:29"><expr pos:start="29:26" pos:end="29:29"><literal type="string" pos:start="29:26" pos:end="29:29">"%s"</literal></expr></argument>, <argument pos:start="29:32" pos:end="29:58"><expr pos:start="29:32" pos:end="29:58"><call pos:start="29:32" pos:end="29:58"><name pos:start="29:32" pos:end="29:47">error_get_pretty</name><argument_list pos:start="29:48" pos:end="29:58">(<argument pos:start="29:49" pos:end="29:57"><expr pos:start="29:49" pos:end="29:57"><name pos:start="29:49" pos:end="29:57">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:20"><expr pos:start="31:13" pos:end="31:19"><call pos:start="31:13" pos:end="31:19"><name pos:start="31:13" pos:end="31:16">exit</name><argument_list pos:start="31:17" pos:end="31:19">(<argument pos:start="31:18" pos:end="31:18"><expr pos:start="31:18" pos:end="31:18"><literal type="number" pos:start="31:18" pos:end="31:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:35"><expr pos:start="37:9" pos:end="37:34"><name pos:start="37:9" pos:end="37:12">size</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="37:34"><name pos:start="37:16" pos:end="37:29">get_image_size</name><argument_list pos:start="37:30" pos:end="37:34">(<argument pos:start="37:31" pos:end="37:33"><expr pos:start="37:31" pos:end="37:33"><name pos:start="37:31" pos:end="37:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:72">(<expr pos:start="39:13" pos:end="39:71"><name pos:start="39:13" pos:end="39:16">size</name> <operator pos:start="39:18" pos:end="39:19">==</operator> <operator pos:start="39:21" pos:end="39:21">-</operator><literal type="number" pos:start="39:22" pos:end="39:22">1</literal> <operator pos:start="39:24" pos:end="39:25">||</operator> <name pos:start="39:27" pos:end="39:30">size</name> <operator pos:start="39:32" pos:end="39:32">&lt;</operator> <sizeof pos:start="39:34" pos:end="39:71">sizeof<argument_list pos:start="39:40" pos:end="39:71">(<argument pos:start="39:41" pos:end="39:70"><expr pos:start="39:41" pos:end="39:70">struct <name pos:start="39:48" pos:end="39:70">smbios_structure_header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="39:74" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:20">

            <expr_stmt pos:start="41:13" pos:end="41:60"><expr pos:start="41:13" pos:end="41:59"><call pos:start="41:13" pos:end="41:59"><name pos:start="41:13" pos:end="41:24">error_report</name><argument_list pos:start="41:25" pos:end="41:59">(<argument pos:start="41:26" pos:end="41:53"><expr pos:start="41:26" pos:end="41:53"><literal type="string" pos:start="41:26" pos:end="41:53">"Cannot read SMBIOS file %s"</literal></expr></argument>, <argument pos:start="41:56" pos:end="41:58"><expr pos:start="41:56" pos:end="41:58"><name pos:start="41:56" pos:end="41:58">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:20"><expr pos:start="43:13" pos:end="43:19"><call pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:16">exit</name><argument_list pos:start="43:17" pos:end="43:19">(<argument pos:start="43:18" pos:end="43:18"><expr pos:start="43:18" pos:end="43:18"><literal type="number" pos:start="43:18" pos:end="43:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:28">(<expr pos:start="49:13" pos:end="49:27"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:27">smbios_entries</name></expr>)</condition> <block pos:start="49:30" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:59">

            <expr_stmt pos:start="51:13" pos:end="51:50"><expr pos:start="51:13" pos:end="51:49"><name pos:start="51:13" pos:end="51:30">smbios_entries_len</name> <operator pos:start="51:32" pos:end="51:32">=</operator> <sizeof pos:start="51:34" pos:end="51:49">sizeof<argument_list pos:start="51:40" pos:end="51:49">(<argument pos:start="51:41" pos:end="51:48"><expr pos:start="51:41" pos:end="51:48"><name pos:start="51:41" pos:end="51:48">uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:59"><expr pos:start="53:13" pos:end="53:58"><name pos:start="53:13" pos:end="53:26">smbios_entries</name> <operator pos:start="53:28" pos:end="53:28">=</operator> <call pos:start="53:30" pos:end="53:58"><name pos:start="53:30" pos:end="53:38">g_malloc0</name><argument_list pos:start="53:39" pos:end="53:58">(<argument pos:start="53:40" pos:end="53:57"><expr pos:start="53:40" pos:end="53:57"><name pos:start="53:40" pos:end="53:57">smbios_entries_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="61:77"><expr pos:start="59:9" pos:end="61:76"><name pos:start="59:9" pos:end="59:22">smbios_entries</name> <operator pos:start="59:24" pos:end="59:24">=</operator> <call pos:start="59:26" pos:end="61:76"><name pos:start="59:26" pos:end="59:34">g_realloc</name><argument_list pos:start="59:35" pos:end="61:76">(<argument pos:start="59:36" pos:end="59:49"><expr pos:start="59:36" pos:end="59:49"><name pos:start="59:36" pos:end="59:49">smbios_entries</name></expr></argument>, <argument pos:start="59:52" pos:end="61:75"><expr pos:start="59:52" pos:end="61:75"><name pos:start="59:52" pos:end="59:69">smbios_entries_len</name> <operator pos:start="59:71" pos:end="59:71">+</operator>

                                                      <sizeof pos:start="61:55" pos:end="61:68">sizeof<argument_list pos:start="61:61" pos:end="61:68">(<argument pos:start="61:62" pos:end="61:67"><expr pos:start="61:62" pos:end="61:67"><operator pos:start="61:62" pos:end="61:62">*</operator><name pos:start="61:63" pos:end="61:67">table</name></expr></argument>)</argument_list></sizeof> <operator pos:start="61:70" pos:end="61:70">+</operator> <name pos:start="61:72" pos:end="61:75">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:77"><expr pos:start="63:9" pos:end="63:76"><name pos:start="63:9" pos:end="63:13">table</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <operator pos:start="63:17" pos:end="63:17">(</operator>struct <name pos:start="63:25" pos:end="63:36">smbios_table</name> <operator pos:start="63:38" pos:end="63:38">*</operator><operator pos:start="63:39" pos:end="63:39">)</operator><operator pos:start="63:40" pos:end="63:40">(</operator><name pos:start="63:41" pos:end="63:54">smbios_entries</name> <operator pos:start="63:56" pos:end="63:56">+</operator> <name pos:start="63:58" pos:end="63:75">smbios_entries_len</name><operator pos:start="63:76" pos:end="63:76">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:48"><expr pos:start="65:9" pos:end="65:47"><name pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:13">table</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:21">header</name><operator pos:start="65:22" pos:end="65:22">.</operator><name pos:start="65:23" pos:end="65:26">type</name></name> <operator pos:start="65:28" pos:end="65:28">=</operator> <name pos:start="65:30" pos:end="65:47">SMBIOS_TABLE_ENTRY</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:66"><expr pos:start="67:9" pos:end="67:65"><name pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:13">table</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:21">header</name><operator pos:start="67:22" pos:end="67:22">.</operator><name pos:start="67:23" pos:end="67:28">length</name></name> <operator pos:start="67:30" pos:end="67:30">=</operator> <call pos:start="67:32" pos:end="67:65"><name pos:start="67:32" pos:end="67:42">cpu_to_le16</name><argument_list pos:start="67:43" pos:end="67:65">(<argument pos:start="67:44" pos:end="67:64"><expr pos:start="67:44" pos:end="67:64"><sizeof pos:start="67:44" pos:end="67:57">sizeof<argument_list pos:start="67:50" pos:end="67:57">(<argument pos:start="67:51" pos:end="67:56"><expr pos:start="67:51" pos:end="67:56"><operator pos:start="67:51" pos:end="67:51">*</operator><name pos:start="67:52" pos:end="67:56">table</name></expr></argument>)</argument_list></sizeof> <operator pos:start="67:59" pos:end="67:59">+</operator> <name pos:start="67:61" pos:end="67:64">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:49">(<expr pos:start="71:13" pos:end="71:48"><call pos:start="71:13" pos:end="71:40"><name pos:start="71:13" pos:end="71:22">load_image</name><argument_list pos:start="71:23" pos:end="71:40">(<argument pos:start="71:24" pos:end="71:26"><expr pos:start="71:24" pos:end="71:26"><name pos:start="71:24" pos:end="71:26">val</name></expr></argument>, <argument pos:start="71:29" pos:end="71:39"><expr pos:start="71:29" pos:end="71:39"><name pos:start="71:29" pos:end="71:39"><name pos:start="71:29" pos:end="71:33">table</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:39">data</name></name></expr></argument>)</argument_list></call> <operator pos:start="71:42" pos:end="71:43">!=</operator> <name pos:start="71:45" pos:end="71:48">size</name></expr>)</condition> <block pos:start="71:51" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:20">

            <expr_stmt pos:start="73:13" pos:end="73:63"><expr pos:start="73:13" pos:end="73:62"><call pos:start="73:13" pos:end="73:62"><name pos:start="73:13" pos:end="73:24">error_report</name><argument_list pos:start="73:25" pos:end="73:62">(<argument pos:start="73:26" pos:end="73:56"><expr pos:start="73:26" pos:end="73:56"><literal type="string" pos:start="73:26" pos:end="73:56">"Failed to load SMBIOS file %s"</literal></expr></argument>, <argument pos:start="73:59" pos:end="73:61"><expr pos:start="73:59" pos:end="73:61"><name pos:start="73:59" pos:end="73:61">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:20"><expr pos:start="75:13" pos:end="75:19"><call pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:16">exit</name><argument_list pos:start="75:17" pos:end="75:19">(<argument pos:start="75:18" pos:end="75:18"><expr pos:start="75:18" pos:end="75:18"><literal type="number" pos:start="75:18" pos:end="75:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:65"><expr pos:start="81:9" pos:end="81:64"><name pos:start="81:9" pos:end="81:14">header</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <operator pos:start="81:18" pos:end="81:18">(</operator>struct <name pos:start="81:26" pos:end="81:48">smbios_structure_header</name> <operator pos:start="81:50" pos:end="81:50">*</operator><operator pos:start="81:51" pos:end="81:51">)</operator><operator pos:start="81:52" pos:end="81:52">(</operator><name pos:start="81:53" pos:end="81:63"><name pos:start="81:53" pos:end="81:57">table</name><operator pos:start="81:58" pos:end="81:59">-&gt;</operator><name pos:start="81:60" pos:end="81:63">data</name></name><operator pos:start="81:64" pos:end="81:64">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:55">(<expr pos:start="85:13" pos:end="85:54"><call pos:start="85:13" pos:end="85:54"><name pos:start="85:13" pos:end="85:20">test_bit</name><argument_list pos:start="85:21" pos:end="85:54">(<argument pos:start="85:22" pos:end="85:33"><expr pos:start="85:22" pos:end="85:33"><name pos:start="85:22" pos:end="85:33"><name pos:start="85:22" pos:end="85:27">header</name><operator pos:start="85:28" pos:end="85:29">-&gt;</operator><name pos:start="85:30" pos:end="85:33">type</name></name></expr></argument>, <argument pos:start="85:36" pos:end="85:53"><expr pos:start="85:36" pos:end="85:53"><name pos:start="85:36" pos:end="85:53">have_fields_bitmap</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:57" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:20">

            <expr_stmt pos:start="87:13" pos:end="89:39"><expr pos:start="87:13" pos:end="89:38"><call pos:start="87:13" pos:end="89:38"><name pos:start="87:13" pos:end="87:24">error_report</name><argument_list pos:start="87:25" pos:end="89:38">(<argument pos:start="87:26" pos:end="87:79"><expr pos:start="87:26" pos:end="87:79"><literal type="string" pos:start="87:26" pos:end="87:79">"can't load type %d struct, fields already specified!"</literal></expr></argument>,

                         <argument pos:start="89:26" pos:end="89:37"><expr pos:start="89:26" pos:end="89:37"><name pos:start="89:26" pos:end="89:37"><name pos:start="89:26" pos:end="89:31">header</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:37">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:20"><expr pos:start="91:13" pos:end="91:19"><call pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:16">exit</name><argument_list pos:start="91:17" pos:end="91:19">(<argument pos:start="91:18" pos:end="91:18"><expr pos:start="91:18" pos:end="91:18"><literal type="number" pos:start="91:18" pos:end="91:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:51"><expr pos:start="95:9" pos:end="95:50"><call pos:start="95:9" pos:end="95:50"><name pos:start="95:9" pos:end="95:15">set_bit</name><argument_list pos:start="95:16" pos:end="95:50">(<argument pos:start="95:17" pos:end="95:28"><expr pos:start="95:17" pos:end="95:28"><name pos:start="95:17" pos:end="95:28"><name pos:start="95:17" pos:end="95:22">header</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:28">type</name></name></expr></argument>, <argument pos:start="95:31" pos:end="95:49"><expr pos:start="95:31" pos:end="95:49"><name pos:start="95:31" pos:end="95:49">have_binfile_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:30">(<expr pos:start="99:13" pos:end="99:29"><name pos:start="99:13" pos:end="99:24"><name pos:start="99:13" pos:end="99:18">header</name><operator pos:start="99:19" pos:end="99:20">-&gt;</operator><name pos:start="99:21" pos:end="99:24">type</name></name> <operator pos:start="99:26" pos:end="99:27">==</operator> <literal type="number" pos:start="99:29" pos:end="99:29">4</literal></expr>)</condition> <block pos:start="99:32" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:33">

            <expr_stmt pos:start="101:13" pos:end="101:33"><expr pos:start="101:13" pos:end="101:32"><name pos:start="101:13" pos:end="101:30">smbios_type4_count</name><operator pos:start="101:31" pos:end="101:32">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:52"><expr pos:start="107:9" pos:end="107:51"><name pos:start="107:9" pos:end="107:26">smbios_entries_len</name> <operator pos:start="107:28" pos:end="107:29">+=</operator> <sizeof pos:start="107:31" pos:end="107:44">sizeof<argument_list pos:start="107:37" pos:end="107:44">(<argument pos:start="107:38" pos:end="107:43"><expr pos:start="107:38" pos:end="107:43"><operator pos:start="107:38" pos:end="107:38">*</operator><name pos:start="107:39" pos:end="107:43">table</name></expr></argument>)</argument_list></sizeof> <operator pos:start="107:46" pos:end="107:46">+</operator> <name pos:start="107:48" pos:end="107:51">size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="111:74"><expr pos:start="109:9" pos:end="111:73"><operator pos:start="109:9" pos:end="109:9">(</operator><operator pos:start="109:10" pos:end="109:10">*</operator><operator pos:start="109:11" pos:end="109:11">(</operator><name pos:start="109:12" pos:end="109:19">uint16_t</name> <operator pos:start="109:21" pos:end="109:21">*</operator><operator pos:start="109:22" pos:end="109:22">)</operator><name pos:start="109:23" pos:end="109:36">smbios_entries</name><operator pos:start="109:37" pos:end="109:37">)</operator> <operator pos:start="109:39" pos:end="109:39">=</operator>

                <call pos:start="111:17" pos:end="111:73"><name pos:start="111:17" pos:end="111:27">cpu_to_le16</name><argument_list pos:start="111:28" pos:end="111:73">(<argument pos:start="111:29" pos:end="111:72"><expr pos:start="111:29" pos:end="111:72"><call pos:start="111:29" pos:end="111:68"><name pos:start="111:29" pos:end="111:39">le16_to_cpu</name><argument_list pos:start="111:40" pos:end="111:68">(<argument pos:start="111:41" pos:end="111:67"><expr pos:start="111:41" pos:end="111:67"><operator pos:start="111:41" pos:end="111:41">*</operator><operator pos:start="111:42" pos:end="111:42">(</operator><name pos:start="111:43" pos:end="111:50">uint16_t</name> <operator pos:start="111:52" pos:end="111:52">*</operator><operator pos:start="111:53" pos:end="111:53">)</operator><name pos:start="111:54" pos:end="111:67">smbios_entries</name></expr></argument>)</argument_list></call> <operator pos:start="111:70" pos:end="111:70">+</operator> <literal type="number" pos:start="111:72" pos:end="111:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:37"><expr pos:start="119:5" pos:end="119:36"><name pos:start="119:5" pos:end="119:7">val</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <call pos:start="119:11" pos:end="119:36"><name pos:start="119:11" pos:end="119:22">qemu_opt_get</name><argument_list pos:start="119:23" pos:end="119:36">(<argument pos:start="119:24" pos:end="119:27"><expr pos:start="119:24" pos:end="119:27"><name pos:start="119:24" pos:end="119:27">opts</name></expr></argument>, <argument pos:start="119:30" pos:end="119:35"><expr pos:start="119:30" pos:end="119:35"><literal type="string" pos:start="119:30" pos:end="119:35">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="243:5"><if pos:start="121:5" pos:end="243:5">if <condition pos:start="121:8" pos:end="121:12">(<expr pos:start="121:9" pos:end="121:11"><name pos:start="121:9" pos:end="121:11">val</name></expr>)</condition> <block pos:start="121:14" pos:end="243:5">{<block_content pos:start="123:9" pos:end="241:9">

        <decl_stmt pos:start="123:9" pos:end="123:51"><decl pos:start="123:9" pos:end="123:50"><type pos:start="123:9" pos:end="123:21"><name pos:start="123:9" pos:end="123:16">unsigned</name> <name pos:start="123:18" pos:end="123:21">long</name></type> <name pos:start="123:23" pos:end="123:26">type</name> <init pos:start="123:28" pos:end="123:50">= <expr pos:start="123:30" pos:end="123:50"><call pos:start="123:30" pos:end="123:50"><name pos:start="123:30" pos:end="123:36">strtoul</name><argument_list pos:start="123:37" pos:end="123:50">(<argument pos:start="123:38" pos:end="123:40"><expr pos:start="123:38" pos:end="123:40"><name pos:start="123:38" pos:end="123:40">val</name></expr></argument>, <argument pos:start="123:43" pos:end="123:46"><expr pos:start="123:43" pos:end="123:46"><name pos:start="123:43" pos:end="123:46">NULL</name></expr></argument>, <argument pos:start="123:49" pos:end="123:49"><expr pos:start="123:49" pos:end="123:49"><literal type="number" pos:start="123:49" pos:end="123:49">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:35">(<expr pos:start="127:13" pos:end="127:34"><name pos:start="127:13" pos:end="127:16">type</name> <operator pos:start="127:18" pos:end="127:18">&gt;</operator> <name pos:start="127:20" pos:end="127:34">SMBIOS_MAX_TYPE</name></expr>)</condition> <block pos:start="127:37" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:20">

            <expr_stmt pos:start="129:13" pos:end="129:42"><expr pos:start="129:13" pos:end="129:41"><call pos:start="129:13" pos:end="129:41"><name pos:start="129:13" pos:end="129:24">error_report</name><argument_list pos:start="129:25" pos:end="129:41">(<argument pos:start="129:26" pos:end="129:40"><expr pos:start="129:26" pos:end="129:40"><literal type="string" pos:start="129:26" pos:end="129:40">"out of range!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:20"><expr pos:start="131:13" pos:end="131:19"><call pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:16">exit</name><argument_list pos:start="131:17" pos:end="131:19">(<argument pos:start="131:18" pos:end="131:18"><expr pos:start="131:18" pos:end="131:18"><literal type="number" pos:start="131:18" pos:end="131:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="137:9" pos:end="143:9"><if pos:start="137:9" pos:end="143:9">if <condition pos:start="137:12" pos:end="137:48">(<expr pos:start="137:13" pos:end="137:47"><call pos:start="137:13" pos:end="137:47"><name pos:start="137:13" pos:end="137:20">test_bit</name><argument_list pos:start="137:21" pos:end="137:47">(<argument pos:start="137:22" pos:end="137:25"><expr pos:start="137:22" pos:end="137:25"><name pos:start="137:22" pos:end="137:25">type</name></expr></argument>, <argument pos:start="137:28" pos:end="137:46"><expr pos:start="137:28" pos:end="137:46"><name pos:start="137:28" pos:end="137:46">have_binfile_bitmap</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:50" pos:end="143:9">{<block_content pos:start="139:13" pos:end="141:20">

            <expr_stmt pos:start="139:13" pos:end="139:74"><expr pos:start="139:13" pos:end="139:73"><call pos:start="139:13" pos:end="139:73"><name pos:start="139:13" pos:end="139:24">error_report</name><argument_list pos:start="139:25" pos:end="139:73">(<argument pos:start="139:26" pos:end="139:72"><expr pos:start="139:26" pos:end="139:72"><literal type="string" pos:start="139:26" pos:end="139:72">"can't add fields, binary file already loaded!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:20"><expr pos:start="141:13" pos:end="141:19"><call pos:start="141:13" pos:end="141:19"><name pos:start="141:13" pos:end="141:16">exit</name><argument_list pos:start="141:17" pos:end="141:19">(<argument pos:start="141:18" pos:end="141:18"><expr pos:start="141:18" pos:end="141:18"><literal type="number" pos:start="141:18" pos:end="141:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:42"><expr pos:start="145:9" pos:end="145:41"><call pos:start="145:9" pos:end="145:41"><name pos:start="145:9" pos:end="145:15">set_bit</name><argument_list pos:start="145:16" pos:end="145:41">(<argument pos:start="145:17" pos:end="145:20"><expr pos:start="145:17" pos:end="145:20"><name pos:start="145:17" pos:end="145:20">type</name></expr></argument>, <argument pos:start="145:23" pos:end="145:40"><expr pos:start="145:23" pos:end="145:40"><name pos:start="145:23" pos:end="145:40">have_fields_bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="149:9" pos:end="241:9">switch <condition pos:start="149:16" pos:end="149:21">(<expr pos:start="149:17" pos:end="149:20"><name pos:start="149:17" pos:end="149:20">type</name></expr>)</condition> <block pos:start="149:23" pos:end="241:9">{<block_content pos:start="151:9" pos:end="239:20">

        <case pos:start="151:9" pos:end="151:15">case <expr pos:start="151:14" pos:end="151:14"><literal type="number" pos:start="151:14" pos:end="151:14">0</literal></expr>:</case>

            <expr_stmt pos:start="153:13" pos:end="153:73"><expr pos:start="153:13" pos:end="153:72"><call pos:start="153:13" pos:end="153:72"><name pos:start="153:13" pos:end="153:30">qemu_opts_validate</name><argument_list pos:start="153:31" pos:end="153:72">(<argument pos:start="153:32" pos:end="153:35"><expr pos:start="153:32" pos:end="153:35"><name pos:start="153:32" pos:end="153:35">opts</name></expr></argument>, <argument pos:start="153:38" pos:end="153:59"><expr pos:start="153:38" pos:end="153:59"><name pos:start="153:38" pos:end="153:59">qemu_smbios_type0_opts</name></expr></argument>, <argument pos:start="153:62" pos:end="153:71"><expr pos:start="153:62" pos:end="153:71"><operator pos:start="153:62" pos:end="153:62">&amp;</operator><name pos:start="153:63" pos:end="153:71">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="155:13" pos:end="161:13"><if pos:start="155:13" pos:end="161:13">if <condition pos:start="155:16" pos:end="155:26">(<expr pos:start="155:17" pos:end="155:25"><name pos:start="155:17" pos:end="155:25">local_err</name></expr>)</condition> <block pos:start="155:28" pos:end="161:13">{<block_content pos:start="157:17" pos:end="159:24">

                <expr_stmt pos:start="157:17" pos:end="157:64"><expr pos:start="157:17" pos:end="157:63"><call pos:start="157:17" pos:end="157:63"><name pos:start="157:17" pos:end="157:28">error_report</name><argument_list pos:start="157:29" pos:end="157:63">(<argument pos:start="157:30" pos:end="157:33"><expr pos:start="157:30" pos:end="157:33"><literal type="string" pos:start="157:30" pos:end="157:33">"%s"</literal></expr></argument>, <argument pos:start="157:36" pos:end="157:62"><expr pos:start="157:36" pos:end="157:62"><call pos:start="157:36" pos:end="157:62"><name pos:start="157:36" pos:end="157:51">error_get_pretty</name><argument_list pos:start="157:52" pos:end="157:62">(<argument pos:start="157:53" pos:end="157:61"><expr pos:start="157:53" pos:end="157:61"><name pos:start="157:53" pos:end="157:61">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:24"><expr pos:start="159:17" pos:end="159:23"><call pos:start="159:17" pos:end="159:23"><name pos:start="159:17" pos:end="159:20">exit</name><argument_list pos:start="159:21" pos:end="159:23">(<argument pos:start="159:22" pos:end="159:22"><expr pos:start="159:22" pos:end="159:22"><literal type="number" pos:start="159:22" pos:end="159:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:52"><expr pos:start="163:13" pos:end="163:51"><call pos:start="163:13" pos:end="163:51"><name pos:start="163:13" pos:end="163:20">save_opt</name><argument_list pos:start="163:21" pos:end="163:51">(<argument pos:start="163:22" pos:end="163:34"><expr pos:start="163:22" pos:end="163:34"><operator pos:start="163:22" pos:end="163:22">&amp;</operator><name pos:start="163:23" pos:end="163:34"><name pos:start="163:23" pos:end="163:27">type0</name><operator pos:start="163:28" pos:end="163:28">.</operator><name pos:start="163:29" pos:end="163:34">vendor</name></name></expr></argument>, <argument pos:start="163:37" pos:end="163:40"><expr pos:start="163:37" pos:end="163:40"><name pos:start="163:37" pos:end="163:40">opts</name></expr></argument>, <argument pos:start="163:43" pos:end="163:50"><expr pos:start="163:43" pos:end="163:50"><literal type="string" pos:start="163:43" pos:end="163:50">"vendor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:54"><expr pos:start="165:13" pos:end="165:53"><call pos:start="165:13" pos:end="165:53"><name pos:start="165:13" pos:end="165:20">save_opt</name><argument_list pos:start="165:21" pos:end="165:53">(<argument pos:start="165:22" pos:end="165:35"><expr pos:start="165:22" pos:end="165:35"><operator pos:start="165:22" pos:end="165:22">&amp;</operator><name pos:start="165:23" pos:end="165:35"><name pos:start="165:23" pos:end="165:27">type0</name><operator pos:start="165:28" pos:end="165:28">.</operator><name pos:start="165:29" pos:end="165:35">version</name></name></expr></argument>, <argument pos:start="165:38" pos:end="165:41"><expr pos:start="165:38" pos:end="165:41"><name pos:start="165:38" pos:end="165:41">opts</name></expr></argument>, <argument pos:start="165:44" pos:end="165:52"><expr pos:start="165:44" pos:end="165:52"><literal type="string" pos:start="165:44" pos:end="165:52">"version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:48"><expr pos:start="167:13" pos:end="167:47"><call pos:start="167:13" pos:end="167:47"><name pos:start="167:13" pos:end="167:20">save_opt</name><argument_list pos:start="167:21" pos:end="167:47">(<argument pos:start="167:22" pos:end="167:32"><expr pos:start="167:22" pos:end="167:32"><operator pos:start="167:22" pos:end="167:22">&amp;</operator><name pos:start="167:23" pos:end="167:32"><name pos:start="167:23" pos:end="167:27">type0</name><operator pos:start="167:28" pos:end="167:28">.</operator><name pos:start="167:29" pos:end="167:32">date</name></name></expr></argument>, <argument pos:start="167:35" pos:end="167:38"><expr pos:start="167:35" pos:end="167:38"><name pos:start="167:35" pos:end="167:38">opts</name></expr></argument>, <argument pos:start="167:41" pos:end="167:46"><expr pos:start="167:41" pos:end="167:46"><literal type="string" pos:start="167:41" pos:end="167:46">"date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="171:13" pos:end="171:48"><expr pos:start="171:13" pos:end="171:47"><name pos:start="171:13" pos:end="171:15">val</name> <operator pos:start="171:17" pos:end="171:17">=</operator> <call pos:start="171:19" pos:end="171:47"><name pos:start="171:19" pos:end="171:30">qemu_opt_get</name><argument_list pos:start="171:31" pos:end="171:47">(<argument pos:start="171:32" pos:end="171:35"><expr pos:start="171:32" pos:end="171:35"><name pos:start="171:32" pos:end="171:35">opts</name></expr></argument>, <argument pos:start="171:38" pos:end="171:46"><expr pos:start="171:38" pos:end="171:46"><literal type="string" pos:start="171:38" pos:end="171:46">"release"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="173:13" pos:end="185:13"><if pos:start="173:13" pos:end="185:13">if <condition pos:start="173:16" pos:end="173:20">(<expr pos:start="173:17" pos:end="173:19"><name pos:start="173:17" pos:end="173:19">val</name></expr>)</condition> <block pos:start="173:22" pos:end="185:13">{<block_content pos:start="175:17" pos:end="183:46">

                <if_stmt pos:start="175:17" pos:end="181:17"><if pos:start="175:17" pos:end="181:17">if <condition pos:start="175:20" pos:end="175:78">(<expr pos:start="175:21" pos:end="175:77"><call pos:start="175:21" pos:end="175:72"><name pos:start="175:21" pos:end="175:26">sscanf</name><argument_list pos:start="175:27" pos:end="175:72">(<argument pos:start="175:28" pos:end="175:30"><expr pos:start="175:28" pos:end="175:30"><name pos:start="175:28" pos:end="175:30">val</name></expr></argument>, <argument pos:start="175:33" pos:end="175:43"><expr pos:start="175:33" pos:end="175:43"><literal type="string" pos:start="175:33" pos:end="175:43">"%hhu.%hhu"</literal></expr></argument>, <argument pos:start="175:46" pos:end="175:57"><expr pos:start="175:46" pos:end="175:57"><operator pos:start="175:46" pos:end="175:46">&amp;</operator><name pos:start="175:47" pos:end="175:57"><name pos:start="175:47" pos:end="175:51">type0</name><operator pos:start="175:52" pos:end="175:52">.</operator><name pos:start="175:53" pos:end="175:57">major</name></name></expr></argument>, <argument pos:start="175:60" pos:end="175:71"><expr pos:start="175:60" pos:end="175:71"><operator pos:start="175:60" pos:end="175:60">&amp;</operator><name pos:start="175:61" pos:end="175:71"><name pos:start="175:61" pos:end="175:65">type0</name><operator pos:start="175:66" pos:end="175:66">.</operator><name pos:start="175:67" pos:end="175:71">minor</name></name></expr></argument>)</argument_list></call> <operator pos:start="175:74" pos:end="175:75">!=</operator> <literal type="number" pos:start="175:77" pos:end="175:77">2</literal></expr>)</condition> <block pos:start="175:80" pos:end="181:17">{<block_content pos:start="177:21" pos:end="179:28">

                    <expr_stmt pos:start="177:21" pos:end="177:52"><expr pos:start="177:21" pos:end="177:51"><call pos:start="177:21" pos:end="177:51"><name pos:start="177:21" pos:end="177:32">error_report</name><argument_list pos:start="177:33" pos:end="177:51">(<argument pos:start="177:34" pos:end="177:50"><expr pos:start="177:34" pos:end="177:50"><literal type="string" pos:start="177:34" pos:end="177:50">"Invalid release"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="179:21" pos:end="179:28"><expr pos:start="179:21" pos:end="179:27"><call pos:start="179:21" pos:end="179:27"><name pos:start="179:21" pos:end="179:24">exit</name><argument_list pos:start="179:25" pos:end="179:27">(<argument pos:start="179:26" pos:end="179:26"><expr pos:start="179:26" pos:end="179:26"><literal type="number" pos:start="179:26" pos:end="179:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:46"><expr pos:start="183:17" pos:end="183:45"><name pos:start="183:17" pos:end="183:38"><name pos:start="183:17" pos:end="183:21">type0</name><operator pos:start="183:22" pos:end="183:22">.</operator><name pos:start="183:23" pos:end="183:38">have_major_minor</name></name> <operator pos:start="183:40" pos:end="183:40">=</operator> <name pos:start="183:42" pos:end="183:45">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <return pos:start="187:13" pos:end="187:19">return;</return>

        <case pos:start="189:9" pos:end="189:15">case <expr pos:start="189:14" pos:end="189:14"><literal type="number" pos:start="189:14" pos:end="189:14">1</literal></expr>:</case>

            <expr_stmt pos:start="191:13" pos:end="191:73"><expr pos:start="191:13" pos:end="191:72"><call pos:start="191:13" pos:end="191:72"><name pos:start="191:13" pos:end="191:30">qemu_opts_validate</name><argument_list pos:start="191:31" pos:end="191:72">(<argument pos:start="191:32" pos:end="191:35"><expr pos:start="191:32" pos:end="191:35"><name pos:start="191:32" pos:end="191:35">opts</name></expr></argument>, <argument pos:start="191:38" pos:end="191:59"><expr pos:start="191:38" pos:end="191:59"><name pos:start="191:38" pos:end="191:59">qemu_smbios_type1_opts</name></expr></argument>, <argument pos:start="191:62" pos:end="191:71"><expr pos:start="191:62" pos:end="191:71"><operator pos:start="191:62" pos:end="191:62">&amp;</operator><name pos:start="191:63" pos:end="191:71">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="193:13" pos:end="199:13"><if pos:start="193:13" pos:end="199:13">if <condition pos:start="193:16" pos:end="193:26">(<expr pos:start="193:17" pos:end="193:25"><name pos:start="193:17" pos:end="193:25">local_err</name></expr>)</condition> <block pos:start="193:28" pos:end="199:13">{<block_content pos:start="195:17" pos:end="197:24">

                <expr_stmt pos:start="195:17" pos:end="195:64"><expr pos:start="195:17" pos:end="195:63"><call pos:start="195:17" pos:end="195:63"><name pos:start="195:17" pos:end="195:28">error_report</name><argument_list pos:start="195:29" pos:end="195:63">(<argument pos:start="195:30" pos:end="195:33"><expr pos:start="195:30" pos:end="195:33"><literal type="string" pos:start="195:30" pos:end="195:33">"%s"</literal></expr></argument>, <argument pos:start="195:36" pos:end="195:62"><expr pos:start="195:36" pos:end="195:62"><call pos:start="195:36" pos:end="195:62"><name pos:start="195:36" pos:end="195:51">error_get_pretty</name><argument_list pos:start="195:52" pos:end="195:62">(<argument pos:start="195:53" pos:end="195:61"><expr pos:start="195:53" pos:end="195:61"><name pos:start="195:53" pos:end="195:61">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:24"><expr pos:start="197:17" pos:end="197:23"><call pos:start="197:17" pos:end="197:23"><name pos:start="197:17" pos:end="197:20">exit</name><argument_list pos:start="197:21" pos:end="197:23">(<argument pos:start="197:22" pos:end="197:22"><expr pos:start="197:22" pos:end="197:22"><literal type="number" pos:start="197:22" pos:end="197:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:64"><expr pos:start="201:13" pos:end="201:63"><call pos:start="201:13" pos:end="201:63"><name pos:start="201:13" pos:end="201:20">save_opt</name><argument_list pos:start="201:21" pos:end="201:63">(<argument pos:start="201:22" pos:end="201:40"><expr pos:start="201:22" pos:end="201:40"><operator pos:start="201:22" pos:end="201:22">&amp;</operator><name pos:start="201:23" pos:end="201:40"><name pos:start="201:23" pos:end="201:27">type1</name><operator pos:start="201:28" pos:end="201:28">.</operator><name pos:start="201:29" pos:end="201:40">manufacturer</name></name></expr></argument>, <argument pos:start="201:43" pos:end="201:46"><expr pos:start="201:43" pos:end="201:46"><name pos:start="201:43" pos:end="201:46">opts</name></expr></argument>, <argument pos:start="201:49" pos:end="201:62"><expr pos:start="201:49" pos:end="201:62"><literal type="string" pos:start="201:49" pos:end="201:62">"manufacturer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:54"><expr pos:start="203:13" pos:end="203:53"><call pos:start="203:13" pos:end="203:53"><name pos:start="203:13" pos:end="203:20">save_opt</name><argument_list pos:start="203:21" pos:end="203:53">(<argument pos:start="203:22" pos:end="203:35"><expr pos:start="203:22" pos:end="203:35"><operator pos:start="203:22" pos:end="203:22">&amp;</operator><name pos:start="203:23" pos:end="203:35"><name pos:start="203:23" pos:end="203:27">type1</name><operator pos:start="203:28" pos:end="203:28">.</operator><name pos:start="203:29" pos:end="203:35">product</name></name></expr></argument>, <argument pos:start="203:38" pos:end="203:41"><expr pos:start="203:38" pos:end="203:41"><name pos:start="203:38" pos:end="203:41">opts</name></expr></argument>, <argument pos:start="203:44" pos:end="203:52"><expr pos:start="203:44" pos:end="203:52"><literal type="string" pos:start="203:44" pos:end="203:52">"product"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:54"><expr pos:start="205:13" pos:end="205:53"><call pos:start="205:13" pos:end="205:53"><name pos:start="205:13" pos:end="205:20">save_opt</name><argument_list pos:start="205:21" pos:end="205:53">(<argument pos:start="205:22" pos:end="205:35"><expr pos:start="205:22" pos:end="205:35"><operator pos:start="205:22" pos:end="205:22">&amp;</operator><name pos:start="205:23" pos:end="205:35"><name pos:start="205:23" pos:end="205:27">type1</name><operator pos:start="205:28" pos:end="205:28">.</operator><name pos:start="205:29" pos:end="205:35">version</name></name></expr></argument>, <argument pos:start="205:38" pos:end="205:41"><expr pos:start="205:38" pos:end="205:41"><name pos:start="205:38" pos:end="205:41">opts</name></expr></argument>, <argument pos:start="205:44" pos:end="205:52"><expr pos:start="205:44" pos:end="205:52"><literal type="string" pos:start="205:44" pos:end="205:52">"version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:52"><expr pos:start="207:13" pos:end="207:51"><call pos:start="207:13" pos:end="207:51"><name pos:start="207:13" pos:end="207:20">save_opt</name><argument_list pos:start="207:21" pos:end="207:51">(<argument pos:start="207:22" pos:end="207:34"><expr pos:start="207:22" pos:end="207:34"><operator pos:start="207:22" pos:end="207:22">&amp;</operator><name pos:start="207:23" pos:end="207:34"><name pos:start="207:23" pos:end="207:27">type1</name><operator pos:start="207:28" pos:end="207:28">.</operator><name pos:start="207:29" pos:end="207:34">serial</name></name></expr></argument>, <argument pos:start="207:37" pos:end="207:40"><expr pos:start="207:37" pos:end="207:40"><name pos:start="207:37" pos:end="207:40">opts</name></expr></argument>, <argument pos:start="207:43" pos:end="207:50"><expr pos:start="207:43" pos:end="207:50"><literal type="string" pos:start="207:43" pos:end="207:50">"serial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:46"><expr pos:start="209:13" pos:end="209:45"><call pos:start="209:13" pos:end="209:45"><name pos:start="209:13" pos:end="209:20">save_opt</name><argument_list pos:start="209:21" pos:end="209:45">(<argument pos:start="209:22" pos:end="209:31"><expr pos:start="209:22" pos:end="209:31"><operator pos:start="209:22" pos:end="209:22">&amp;</operator><name pos:start="209:23" pos:end="209:31"><name pos:start="209:23" pos:end="209:27">type1</name><operator pos:start="209:28" pos:end="209:28">.</operator><name pos:start="209:29" pos:end="209:31">sku</name></name></expr></argument>, <argument pos:start="209:34" pos:end="209:37"><expr pos:start="209:34" pos:end="209:37"><name pos:start="209:34" pos:end="209:37">opts</name></expr></argument>, <argument pos:start="209:40" pos:end="209:44"><expr pos:start="209:40" pos:end="209:44"><literal type="string" pos:start="209:40" pos:end="209:44">"sku"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:52"><expr pos:start="211:13" pos:end="211:51"><call pos:start="211:13" pos:end="211:51"><name pos:start="211:13" pos:end="211:20">save_opt</name><argument_list pos:start="211:21" pos:end="211:51">(<argument pos:start="211:22" pos:end="211:34"><expr pos:start="211:22" pos:end="211:34"><operator pos:start="211:22" pos:end="211:22">&amp;</operator><name pos:start="211:23" pos:end="211:34"><name pos:start="211:23" pos:end="211:27">type1</name><operator pos:start="211:28" pos:end="211:28">.</operator><name pos:start="211:29" pos:end="211:34">family</name></name></expr></argument>, <argument pos:start="211:37" pos:end="211:40"><expr pos:start="211:37" pos:end="211:40"><name pos:start="211:37" pos:end="211:40">opts</name></expr></argument>, <argument pos:start="211:43" pos:end="211:50"><expr pos:start="211:43" pos:end="211:50"><literal type="string" pos:start="211:43" pos:end="211:50">"family"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="215:13" pos:end="215:45"><expr pos:start="215:13" pos:end="215:44"><name pos:start="215:13" pos:end="215:15">val</name> <operator pos:start="215:17" pos:end="215:17">=</operator> <call pos:start="215:19" pos:end="215:44"><name pos:start="215:19" pos:end="215:30">qemu_opt_get</name><argument_list pos:start="215:31" pos:end="215:44">(<argument pos:start="215:32" pos:end="215:35"><expr pos:start="215:32" pos:end="215:35"><name pos:start="215:32" pos:end="215:35">opts</name></expr></argument>, <argument pos:start="215:38" pos:end="215:43"><expr pos:start="215:38" pos:end="215:43"><literal type="string" pos:start="215:38" pos:end="215:43">"uuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="217:13" pos:end="229:13"><if pos:start="217:13" pos:end="229:13">if <condition pos:start="217:16" pos:end="217:20">(<expr pos:start="217:17" pos:end="217:19"><name pos:start="217:17" pos:end="217:19">val</name></expr>)</condition> <block pos:start="217:22" pos:end="229:13">{<block_content pos:start="219:17" pos:end="227:37">

                <if_stmt pos:start="219:17" pos:end="225:17"><if pos:start="219:17" pos:end="225:17">if <condition pos:start="219:20" pos:end="219:57">(<expr pos:start="219:21" pos:end="219:56"><call pos:start="219:21" pos:end="219:51"><name pos:start="219:21" pos:end="219:35">qemu_uuid_parse</name><argument_list pos:start="219:36" pos:end="219:51">(<argument pos:start="219:37" pos:end="219:39"><expr pos:start="219:37" pos:end="219:39"><name pos:start="219:37" pos:end="219:39">val</name></expr></argument>, <argument pos:start="219:42" pos:end="219:50"><expr pos:start="219:42" pos:end="219:50"><name pos:start="219:42" pos:end="219:50">qemu_uuid</name></expr></argument>)</argument_list></call> <operator pos:start="219:53" pos:end="219:54">!=</operator> <literal type="number" pos:start="219:56" pos:end="219:56">0</literal></expr>)</condition> <block pos:start="219:59" pos:end="225:17">{<block_content pos:start="221:21" pos:end="223:28">

                    <expr_stmt pos:start="221:21" pos:end="221:49"><expr pos:start="221:21" pos:end="221:48"><call pos:start="221:21" pos:end="221:48"><name pos:start="221:21" pos:end="221:32">error_report</name><argument_list pos:start="221:33" pos:end="221:48">(<argument pos:start="221:34" pos:end="221:47"><expr pos:start="221:34" pos:end="221:47"><literal type="string" pos:start="221:34" pos:end="221:47">"Invalid UUID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="223:21" pos:end="223:28"><expr pos:start="223:21" pos:end="223:27"><call pos:start="223:21" pos:end="223:27"><name pos:start="223:21" pos:end="223:24">exit</name><argument_list pos:start="223:25" pos:end="223:27">(<argument pos:start="223:26" pos:end="223:26"><expr pos:start="223:26" pos:end="223:26"><literal type="number" pos:start="223:26" pos:end="223:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="227:17" pos:end="227:37"><expr pos:start="227:17" pos:end="227:36"><name pos:start="227:17" pos:end="227:29">qemu_uuid_set</name> <operator pos:start="227:31" pos:end="227:31">=</operator> <name pos:start="227:33" pos:end="227:36">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <return pos:start="231:13" pos:end="231:19">return;</return>

        <default pos:start="233:9" pos:end="233:16">default:</default>

            <expr_stmt pos:start="235:13" pos:end="237:31"><expr pos:start="235:13" pos:end="237:30"><call pos:start="235:13" pos:end="237:30"><name pos:start="235:13" pos:end="235:24">error_report</name><argument_list pos:start="235:25" pos:end="237:30">(<argument pos:start="235:26" pos:end="235:77"><expr pos:start="235:26" pos:end="235:77"><literal type="string" pos:start="235:26" pos:end="235:77">"Don't know how to build fields for SMBIOS type %ld"</literal></expr></argument>,

                         <argument pos:start="237:26" pos:end="237:29"><expr pos:start="237:26" pos:end="237:29"><name pos:start="237:26" pos:end="237:29">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:20"><expr pos:start="239:13" pos:end="239:19"><call pos:start="239:13" pos:end="239:19"><name pos:start="239:13" pos:end="239:16">exit</name><argument_list pos:start="239:17" pos:end="239:19">(<argument pos:start="239:18" pos:end="239:18"><expr pos:start="239:18" pos:end="239:18"><literal type="number" pos:start="239:18" pos:end="239:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:48"><expr pos:start="247:5" pos:end="247:47"><call pos:start="247:5" pos:end="247:47"><name pos:start="247:5" pos:end="247:16">error_report</name><argument_list pos:start="247:17" pos:end="247:47">(<argument pos:start="247:18" pos:end="247:46"><expr pos:start="247:18" pos:end="247:46"><literal type="string" pos:start="247:18" pos:end="247:46">"Must specify type= or file="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:12"><expr pos:start="249:5" pos:end="249:11"><call pos:start="249:5" pos:end="249:11"><name pos:start="249:5" pos:end="249:8">exit</name><argument_list pos:start="249:9" pos:end="249:11">(<argument pos:start="249:10" pos:end="249:10"><expr pos:start="249:10" pos:end="249:10"><literal type="number" pos:start="249:10" pos:end="249:10">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
