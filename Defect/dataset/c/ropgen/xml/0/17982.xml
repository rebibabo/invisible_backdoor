<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17982.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">pc_system_flash_init</name><parameter_list pos:start="1:33" pos:end="1:58">(<parameter pos:start="1:34" pos:end="1:57"><decl pos:start="1:34" pos:end="1:57"><type pos:start="1:34" pos:end="1:47"><name pos:start="1:34" pos:end="1:45">MemoryRegion</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:57">rom_memory</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="5:5" pos:end="139:5">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">unit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">DriveInfo</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:25">pflash_drv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:26">bdrv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:16">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:22">fatal_errmsg</name> <init pos:start="13:24" pos:end="13:29">= <expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:37"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">hwaddr</name></type> <name pos:start="15:12" pos:end="15:20">phys_addr</name> <init pos:start="15:22" pos:end="15:37">= <expr pos:start="15:24" pos:end="15:37"><literal type="number" pos:start="15:24" pos:end="15:37">0x100000000ULL</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">sector_bits</name></decl>, <decl pos:start="17:22" pos:end="17:32"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:22" pos:end="17:32">sector_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">pflash_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:26">system_flash</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:27">flash_mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">char</name></type> <name pos:start="23:10" pos:end="23:17"><name pos:start="23:10" pos:end="23:13">name</name><index pos:start="23:14" pos:end="23:17">[<expr pos:start="23:15" pos:end="23:16"><literal type="number" pos:start="23:15" pos:end="23:16">64</literal></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:15">sector_bits</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <literal type="number" pos:start="27:19" pos:end="27:20">12</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:15">sector_size</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <literal type="number" pos:start="29:19" pos:end="29:19">1</literal> <operator pos:start="29:21" pos:end="29:22">&lt;&lt;</operator> <name pos:start="29:24" pos:end="29:34">sector_bits</name></expr>;</expr_stmt>



    <for pos:start="33:5" pos:end="139:5">for <control pos:start="33:9" pos:end="39:16">(<init pos:start="33:10" pos:end="33:18"><expr pos:start="33:10" pos:end="33:17"><name pos:start="33:10" pos:end="33:13">unit</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr>;</init>

         <condition pos:start="35:10" pos:end="37:64"><expr pos:start="35:10" pos:end="37:63"><operator pos:start="35:10" pos:end="35:10">(</operator><name pos:start="35:11" pos:end="35:14">unit</name> <operator pos:start="35:16" pos:end="35:16">&lt;</operator> <name pos:start="35:18" pos:end="35:35">FLASH_MAP_UNIT_MAX</name> <operator pos:start="35:37" pos:end="35:38">&amp;&amp;</operator>

          <operator pos:start="37:11" pos:end="37:11">(</operator><name pos:start="37:12" pos:end="37:21">pflash_drv</name> <operator pos:start="37:23" pos:end="37:23">=</operator> <call pos:start="37:25" pos:end="37:53"><name pos:start="37:25" pos:end="37:33">drive_get</name><argument_list pos:start="37:34" pos:end="37:53">(<argument pos:start="37:35" pos:end="37:43"><expr pos:start="37:35" pos:end="37:43"><name pos:start="37:35" pos:end="37:43">IF_PFLASH</name></expr></argument>, <argument pos:start="37:46" pos:end="37:46"><expr pos:start="37:46" pos:end="37:46"><literal type="number" pos:start="37:46" pos:end="37:46">0</literal></expr></argument>, <argument pos:start="37:49" pos:end="37:52"><expr pos:start="37:49" pos:end="37:52"><name pos:start="37:49" pos:end="37:52">unit</name></expr></argument>)</argument_list></call><operator pos:start="37:54" pos:end="37:54">)</operator> <operator pos:start="37:56" pos:end="37:57">!=</operator> <name pos:start="37:59" pos:end="37:62">NULL</name><operator pos:start="37:63" pos:end="37:63">)</operator></expr>;</condition>

         <incr pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:15"><operator pos:start="39:10" pos:end="39:11">++</operator><name pos:start="39:12" pos:end="39:15">unit</name></expr></incr>)</control> <block pos:start="39:18" pos:end="139:5">{<block_content pos:start="41:9" pos:end="137:9">

        <expr_stmt pos:start="41:9" pos:end="41:55"><expr pos:start="41:9" pos:end="41:54"><name pos:start="41:9" pos:end="41:12">bdrv</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <call pos:start="41:16" pos:end="41:54"><name pos:start="41:16" pos:end="41:21">blk_bs</name><argument_list pos:start="41:22" pos:end="41:54">(<argument pos:start="41:23" pos:end="41:53"><expr pos:start="41:23" pos:end="41:53"><call pos:start="41:23" pos:end="41:53"><name pos:start="41:23" pos:end="41:41">blk_by_legacy_dinfo</name><argument_list pos:start="41:42" pos:end="41:53">(<argument pos:start="41:43" pos:end="41:52"><expr pos:start="41:43" pos:end="41:52"><name pos:start="41:43" pos:end="41:52">pflash_drv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:36"><expr pos:start="43:9" pos:end="43:35"><name pos:start="43:9" pos:end="43:12">size</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:35"><name pos:start="43:16" pos:end="43:29">bdrv_getlength</name><argument_list pos:start="43:30" pos:end="43:35">(<argument pos:start="43:31" pos:end="43:34"><expr pos:start="43:31" pos:end="43:34"><name pos:start="43:31" pos:end="43:34">bdrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="69:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:21">(<expr pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:16">size</name> <operator pos:start="45:18" pos:end="45:18">&lt;</operator> <literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>)</condition> <block pos:start="45:23" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:78">

            <expr_stmt pos:start="47:13" pos:end="47:78"><expr pos:start="47:13" pos:end="47:77"><name pos:start="47:13" pos:end="47:24">fatal_errmsg</name> <operator pos:start="47:26" pos:end="47:26">=</operator> <call pos:start="47:28" pos:end="47:77"><name pos:start="47:28" pos:end="47:42">g_strdup_printf</name><argument_list pos:start="47:43" pos:end="47:77">(<argument pos:start="47:44" pos:end="47:76"><expr pos:start="47:44" pos:end="47:76"><literal type="string" pos:start="47:44" pos:end="47:76">"failed to get backing file size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="55:9">else if <condition pos:start="49:19" pos:end="49:29">(<expr pos:start="49:20" pos:end="49:28"><name pos:start="49:20" pos:end="49:23">size</name> <operator pos:start="49:25" pos:end="49:26">==</operator> <literal type="number" pos:start="49:28" pos:end="49:28">0</literal></expr>)</condition> <block pos:start="49:31" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:56">

            <expr_stmt pos:start="51:13" pos:end="53:56"><expr pos:start="51:13" pos:end="53:55"><name pos:start="51:13" pos:end="51:24">fatal_errmsg</name> <operator pos:start="51:26" pos:end="51:26">=</operator> <call pos:start="51:28" pos:end="53:55"><name pos:start="51:28" pos:end="51:42">g_strdup_printf</name><argument_list pos:start="51:43" pos:end="53:55">(<argument pos:start="51:44" pos:end="53:54"><expr pos:start="51:44" pos:end="53:54"><literal type="string" pos:start="51:44" pos:end="51:73">"PC system firmware (pflash) "</literal>

                               <literal type="string" pos:start="53:32" pos:end="53:54">"cannot have zero size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="55:11" pos:end="61:9">else if <condition pos:start="55:19" pos:end="55:45">(<expr pos:start="55:20" pos:end="55:44"><operator pos:start="55:20" pos:end="55:20">(</operator><name pos:start="55:21" pos:end="55:24">size</name> <operator pos:start="55:26" pos:end="55:26">%</operator> <name pos:start="55:28" pos:end="55:38">sector_size</name><operator pos:start="55:39" pos:end="55:39">)</operator> <operator pos:start="55:41" pos:end="55:42">!=</operator> <literal type="number" pos:start="55:44" pos:end="55:44">0</literal></expr>)</condition> <block pos:start="55:47" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:74">

            <expr_stmt pos:start="57:13" pos:end="59:74"><expr pos:start="57:13" pos:end="59:73"><name pos:start="57:13" pos:end="57:24">fatal_errmsg</name> <operator pos:start="57:26" pos:end="57:26">=</operator> <call pos:start="57:28" pos:end="59:73"><name pos:start="57:28" pos:end="57:42">g_strdup_printf</name><argument_list pos:start="57:43" pos:end="59:73">(<argument pos:start="57:44" pos:end="59:59"><expr pos:start="57:44" pos:end="59:59"><literal type="string" pos:start="57:44" pos:end="57:73">"PC system firmware (pflash) "</literal>

                               <literal type="string" pos:start="59:32" pos:end="59:59">"must be a multiple of 0x%x"</literal></expr></argument>, <argument pos:start="59:62" pos:end="59:72"><expr pos:start="59:62" pos:end="59:72"><name pos:start="59:62" pos:end="59:72">sector_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="61:11" pos:end="69:9">else if <condition pos:start="61:19" pos:end="61:77">(<expr pos:start="61:20" pos:end="61:76"><name pos:start="61:20" pos:end="61:28">phys_addr</name> <operator pos:start="61:30" pos:end="61:30">&lt;</operator> <name pos:start="61:32" pos:end="61:35">size</name> <operator pos:start="61:37" pos:end="61:38">||</operator> <name pos:start="61:40" pos:end="61:48">phys_addr</name> <operator pos:start="61:50" pos:end="61:50">-</operator> <name pos:start="61:52" pos:end="61:55">size</name> <operator pos:start="61:57" pos:end="61:57">&lt;</operator> <name pos:start="61:59" pos:end="61:76">FLASH_MAP_BASE_MIN</name></expr>)</condition> <block pos:start="61:79" pos:end="69:9">{<block_content pos:start="63:13" pos:end="67:67">

            <expr_stmt pos:start="63:13" pos:end="67:67"><expr pos:start="63:13" pos:end="67:66"><name pos:start="63:13" pos:end="63:24">fatal_errmsg</name> <operator pos:start="63:26" pos:end="63:26">=</operator> <call pos:start="63:28" pos:end="67:66"><name pos:start="63:28" pos:end="63:42">g_strdup_printf</name><argument_list pos:start="63:43" pos:end="67:66">(<argument pos:start="63:44" pos:end="67:45"><expr pos:start="63:44" pos:end="67:45"><literal type="string" pos:start="63:44" pos:end="63:76">"oversized backing file, pflash "</literal>

                               <literal type="string" pos:start="65:32" pos:end="65:65">"segments cannot be mapped under "</literal>

                               <name pos:start="67:32" pos:end="67:45">TARGET_FMT_plx</name></expr></argument>, <argument pos:start="67:48" pos:end="67:65"><expr pos:start="67:48" pos:end="67:65"><name pos:start="67:48" pos:end="67:65">FLASH_MAP_BASE_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="101:9"><if pos:start="71:9" pos:end="101:9">if <condition pos:start="71:12" pos:end="71:33">(<expr pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:24">fatal_errmsg</name> <operator pos:start="71:26" pos:end="71:27">!=</operator> <name pos:start="71:29" pos:end="71:32">NULL</name></expr>)</condition> <block pos:start="71:35" pos:end="101:9">{<block_content pos:start="73:13" pos:end="99:20">

            <decl_stmt pos:start="73:13" pos:end="73:25"><decl pos:start="73:13" pos:end="73:24"><type pos:start="73:13" pos:end="73:20"><name pos:start="73:13" pos:end="73:20">Location</name></type> <name pos:start="73:22" pos:end="73:24">loc</name></decl>;</decl_stmt>



            <comment type="block" pos:start="77:13" pos:end="83:15">/* push a new, "none" location on the location stack; overwrite its

             * contents with the location saved in the option; print the error

             * (includes location); pop the top

             */</comment>

            <expr_stmt pos:start="85:13" pos:end="85:32"><expr pos:start="85:13" pos:end="85:31"><call pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:25">loc_push_none</name><argument_list pos:start="85:26" pos:end="85:31">(<argument pos:start="85:27" pos:end="85:30"><expr pos:start="85:27" pos:end="85:30"><operator pos:start="85:27" pos:end="85:27">&amp;</operator><name pos:start="85:28" pos:end="85:30">loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="91:13"><if pos:start="87:13" pos:end="91:13">if <condition pos:start="87:16" pos:end="87:41">(<expr pos:start="87:17" pos:end="87:40"><name pos:start="87:17" pos:end="87:32"><name pos:start="87:17" pos:end="87:26">pflash_drv</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:32">opts</name></name> <operator pos:start="87:34" pos:end="87:35">!=</operator> <name pos:start="87:37" pos:end="87:40">NULL</name></expr>)</condition> <block pos:start="87:43" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:56">

                <expr_stmt pos:start="89:17" pos:end="89:56"><expr pos:start="89:17" pos:end="89:55"><call pos:start="89:17" pos:end="89:55"><name pos:start="89:17" pos:end="89:37">qemu_opts_loc_restore</name><argument_list pos:start="89:38" pos:end="89:55">(<argument pos:start="89:39" pos:end="89:54"><expr pos:start="89:39" pos:end="89:54"><name pos:start="89:39" pos:end="89:54"><name pos:start="89:39" pos:end="89:48">pflash_drv</name><operator pos:start="89:49" pos:end="89:50">-&gt;</operator><name pos:start="89:51" pos:end="89:54">opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:45"><expr pos:start="93:13" pos:end="93:44"><call pos:start="93:13" pos:end="93:44"><name pos:start="93:13" pos:end="93:24">error_report</name><argument_list pos:start="93:25" pos:end="93:44">(<argument pos:start="93:26" pos:end="93:29"><expr pos:start="93:26" pos:end="93:29"><literal type="string" pos:start="93:26" pos:end="93:29">"%s"</literal></expr></argument>, <argument pos:start="93:32" pos:end="93:43"><expr pos:start="93:32" pos:end="93:43"><name pos:start="93:32" pos:end="93:43">fatal_errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:26"><expr pos:start="95:13" pos:end="95:25"><call pos:start="95:13" pos:end="95:25"><name pos:start="95:13" pos:end="95:19">loc_pop</name><argument_list pos:start="95:20" pos:end="95:25">(<argument pos:start="95:21" pos:end="95:24"><expr pos:start="95:21" pos:end="95:24"><operator pos:start="95:21" pos:end="95:21">&amp;</operator><name pos:start="95:22" pos:end="95:24">loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:33"><expr pos:start="97:13" pos:end="97:32"><call pos:start="97:13" pos:end="97:32"><name pos:start="97:13" pos:end="97:18">g_free</name><argument_list pos:start="97:19" pos:end="97:32">(<argument pos:start="97:20" pos:end="97:31"><expr pos:start="97:20" pos:end="97:31"><name pos:start="97:20" pos:end="97:31">fatal_errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:20"><expr pos:start="99:13" pos:end="99:19"><call pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:16">exit</name><argument_list pos:start="99:17" pos:end="99:19">(<argument pos:start="99:18" pos:end="99:18"><expr pos:start="99:18" pos:end="99:18"><literal type="number" pos:start="99:18" pos:end="99:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:26"><expr pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:17">phys_addr</name> <operator pos:start="105:19" pos:end="105:20">-=</operator> <name pos:start="105:22" pos:end="105:25">size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="109:9" pos:end="109:69">/* pflash_cfi01_register() creates a deep copy of the name */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:60"><expr pos:start="111:9" pos:end="111:59"><call pos:start="111:9" pos:end="111:59"><name pos:start="111:9" pos:end="111:16">snprintf</name><argument_list pos:start="111:17" pos:end="111:59">(<argument pos:start="111:18" pos:end="111:21"><expr pos:start="111:18" pos:end="111:21"><name pos:start="111:18" pos:end="111:21">name</name></expr></argument>, <argument pos:start="111:24" pos:end="111:34"><expr pos:start="111:24" pos:end="111:34"><sizeof pos:start="111:24" pos:end="111:34">sizeof <name pos:start="111:31" pos:end="111:34">name</name></sizeof></expr></argument>, <argument pos:start="111:37" pos:end="111:52"><expr pos:start="111:37" pos:end="111:52"><literal type="string" pos:start="111:37" pos:end="111:52">"system.flash%d"</literal></expr></argument>, <argument pos:start="111:55" pos:end="111:58"><expr pos:start="111:55" pos:end="111:58"><name pos:start="111:55" pos:end="111:58">unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="129:62"><expr pos:start="113:9" pos:end="129:61"><name pos:start="113:9" pos:end="113:20">system_flash</name> <operator pos:start="113:22" pos:end="113:22">=</operator> <call pos:start="113:24" pos:end="129:61"><name pos:start="113:24" pos:end="113:44">pflash_cfi01_register</name><argument_list pos:start="113:45" pos:end="129:61">(<argument pos:start="113:46" pos:end="113:54"><expr pos:start="113:46" pos:end="113:54"><name pos:start="113:46" pos:end="113:54">phys_addr</name></expr></argument>, <argument pos:start="113:57" pos:end="113:60"><expr pos:start="113:57" pos:end="113:60"><name pos:start="113:57" pos:end="113:60">NULL</name></expr></argument> <comment type="block" pos:start="113:62" pos:end="113:71">/* qdev */</comment>, <argument pos:start="113:74" pos:end="113:77"><expr pos:start="113:74" pos:end="113:77"><name pos:start="113:74" pos:end="113:77">name</name></expr></argument>,

                                             <argument pos:start="115:46" pos:end="115:49"><expr pos:start="115:46" pos:end="115:49"><name pos:start="115:46" pos:end="115:49">size</name></expr></argument>, <argument pos:start="115:52" pos:end="115:55"><expr pos:start="115:52" pos:end="115:55"><name pos:start="115:52" pos:end="115:55">bdrv</name></expr></argument>, <argument pos:start="115:58" pos:end="115:68"><expr pos:start="115:58" pos:end="115:68"><name pos:start="115:58" pos:end="115:68">sector_size</name></expr></argument>,

                                             <argument pos:start="117:46" pos:end="117:64"><expr pos:start="117:46" pos:end="117:64"><name pos:start="117:46" pos:end="117:49">size</name> <operator pos:start="117:51" pos:end="117:52">&gt;&gt;</operator> <name pos:start="117:54" pos:end="117:64">sector_bits</name></expr></argument>,

                                             <argument pos:start="119:46" pos:end="119:46"><expr pos:start="119:46" pos:end="119:46"><literal type="number" pos:start="119:46" pos:end="119:46">1</literal></expr></argument>      <comment type="block" pos:start="119:53" pos:end="119:63">/* width */</comment>,

                                             <argument pos:start="121:46" pos:end="121:51"><expr pos:start="121:46" pos:end="121:51"><literal type="number" pos:start="121:46" pos:end="121:51">0x0000</literal></expr></argument> <comment type="block" pos:start="121:53" pos:end="121:61">/* id0 */</comment>,

                                             <argument pos:start="123:46" pos:end="123:51"><expr pos:start="123:46" pos:end="123:51"><literal type="number" pos:start="123:46" pos:end="123:51">0x0000</literal></expr></argument> <comment type="block" pos:start="123:53" pos:end="123:61">/* id1 */</comment>,

                                             <argument pos:start="125:46" pos:end="125:51"><expr pos:start="125:46" pos:end="125:51"><literal type="number" pos:start="125:46" pos:end="125:51">0x0000</literal></expr></argument> <comment type="block" pos:start="125:53" pos:end="125:61">/* id2 */</comment>,

                                             <argument pos:start="127:46" pos:end="127:51"><expr pos:start="127:46" pos:end="127:51"><literal type="number" pos:start="127:46" pos:end="127:51">0x0000</literal></expr></argument> <comment type="block" pos:start="127:53" pos:end="127:61">/* id3 */</comment>,

                                             <argument pos:start="129:46" pos:end="129:46"><expr pos:start="129:46" pos:end="129:46"><literal type="number" pos:start="129:46" pos:end="129:46">0</literal></expr></argument>      <comment type="block" pos:start="129:53" pos:end="129:60">/* be */</comment>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:22">(<expr pos:start="131:13" pos:end="131:21"><name pos:start="131:13" pos:end="131:16">unit</name> <operator pos:start="131:18" pos:end="131:19">==</operator> <literal type="number" pos:start="131:21" pos:end="131:21">0</literal></expr>)</condition> <block pos:start="131:24" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:58">

            <expr_stmt pos:start="133:13" pos:end="133:62"><expr pos:start="133:13" pos:end="133:61"><name pos:start="133:13" pos:end="133:21">flash_mem</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <call pos:start="133:25" pos:end="133:61"><name pos:start="133:25" pos:end="133:47">pflash_cfi01_get_memory</name><argument_list pos:start="133:48" pos:end="133:61">(<argument pos:start="133:49" pos:end="133:60"><expr pos:start="133:49" pos:end="133:60"><name pos:start="133:49" pos:end="133:60">system_flash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:58"><expr pos:start="135:13" pos:end="135:57"><call pos:start="135:13" pos:end="135:57"><name pos:start="135:13" pos:end="135:28">pc_isa_bios_init</name><argument_list pos:start="135:29" pos:end="135:57">(<argument pos:start="135:30" pos:end="135:39"><expr pos:start="135:30" pos:end="135:39"><name pos:start="135:30" pos:end="135:39">rom_memory</name></expr></argument>, <argument pos:start="135:42" pos:end="135:50"><expr pos:start="135:42" pos:end="135:50"><name pos:start="135:42" pos:end="135:50">flash_mem</name></expr></argument>, <argument pos:start="135:53" pos:end="135:56"><expr pos:start="135:53" pos:end="135:56"><name pos:start="135:53" pos:end="135:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
