<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2192.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">pcibus_t</name></type> <name pos:start="1:17" pos:end="1:31">pci_bar_address</name><parameter_list pos:start="1:32" pos:end="3:69">(<parameter pos:start="1:33" pos:end="1:44"><decl pos:start="1:33" pos:end="1:44"><type pos:start="1:33" pos:end="1:44"><name pos:start="1:33" pos:end="1:41">PCIDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">d</name></decl></parameter>,

				<parameter pos:start="3:33" pos:end="3:39"><decl pos:start="3:33" pos:end="3:39"><type pos:start="3:33" pos:end="3:39"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:39">reg</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:53"><decl pos:start="3:42" pos:end="3:53"><type pos:start="3:42" pos:end="3:53"><name pos:start="3:42" pos:end="3:48">uint8_t</name></type> <name pos:start="3:50" pos:end="3:53">type</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:68"><decl pos:start="3:56" pos:end="3:68"><type pos:start="3:56" pos:end="3:68"><name pos:start="3:56" pos:end="3:63">pcibus_t</name></type> <name pos:start="3:65" pos:end="3:68">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:20">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">pcibus_t</name></type> <name pos:start="7:14" pos:end="7:21">new_addr</name></decl>, <decl pos:start="7:24" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:24" pos:end="7:32">last_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">bar</name> <init pos:start="9:13" pos:end="9:29">= <expr pos:start="9:15" pos:end="9:29"><call pos:start="9:15" pos:end="9:29"><name pos:start="9:15" pos:end="9:21">pci_bar</name><argument_list pos:start="9:22" pos:end="9:29">(<argument pos:start="9:23" pos:end="9:23"><expr pos:start="9:23" pos:end="9:23"><name pos:start="9:23" pos:end="9:23">d</name></expr></argument>, <argument pos:start="9:26" pos:end="9:28"><expr pos:start="9:26" pos:end="9:28"><name pos:start="9:26" pos:end="9:28">reg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:16">cmd</name> <init pos:start="11:18" pos:end="11:56">= <expr pos:start="11:20" pos:end="11:56"><call pos:start="11:20" pos:end="11:56"><name pos:start="11:20" pos:end="11:31">pci_get_word</name><argument_list pos:start="11:32" pos:end="11:56">(<argument pos:start="11:33" pos:end="11:55"><expr pos:start="11:33" pos:end="11:55"><name pos:start="11:33" pos:end="11:41"><name pos:start="11:33" pos:end="11:33">d</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:41">config</name></name> <operator pos:start="11:43" pos:end="11:43">+</operator> <name pos:start="11:45" pos:end="11:55">PCI_COMMAND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="41:5"><if pos:start="15:5" pos:end="41:5">if <condition pos:start="15:8" pos:end="15:41">(<expr pos:start="15:9" pos:end="15:40"><name pos:start="15:9" pos:end="15:12">type</name> <operator pos:start="15:14" pos:end="15:14">&amp;</operator> <name pos:start="15:16" pos:end="15:40">PCI_BASE_ADDRESS_SPACE_IO</name></expr>)</condition> <block pos:start="15:43" pos:end="41:5">{<block_content pos:start="17:9" pos:end="39:24">

        <if_stmt pos:start="17:9" pos:end="21:9"><if pos:start="17:9" pos:end="21:9">if <condition pos:start="17:12" pos:end="17:36">(<expr pos:start="17:13" pos:end="17:35"><operator pos:start="17:13" pos:end="17:13">!</operator><operator pos:start="17:14" pos:end="17:14">(</operator><name pos:start="17:15" pos:end="17:17">cmd</name> <operator pos:start="17:19" pos:end="17:19">&amp;</operator> <name pos:start="17:21" pos:end="17:34">PCI_COMMAND_IO</name><operator pos:start="17:35" pos:end="17:35">)</operator></expr>)</condition> <block pos:start="17:38" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:36">

            <return pos:start="19:13" pos:end="19:36">return <expr pos:start="19:20" pos:end="19:35"><name pos:start="19:20" pos:end="19:35">PCI_BAR_UNMAPPED</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:63"><expr pos:start="23:9" pos:end="23:62"><name pos:start="23:9" pos:end="23:16">new_addr</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <call pos:start="23:20" pos:end="23:48"><name pos:start="23:20" pos:end="23:31">pci_get_long</name><argument_list pos:start="23:32" pos:end="23:48">(<argument pos:start="23:33" pos:end="23:47"><expr pos:start="23:33" pos:end="23:47"><name pos:start="23:33" pos:end="23:41"><name pos:start="23:33" pos:end="23:33">d</name><operator pos:start="23:34" pos:end="23:35">-&gt;</operator><name pos:start="23:36" pos:end="23:41">config</name></name> <operator pos:start="23:43" pos:end="23:43">+</operator> <name pos:start="23:45" pos:end="23:47">bar</name></expr></argument>)</argument_list></call> <operator pos:start="23:50" pos:end="23:50">&amp;</operator> <operator pos:start="23:52" pos:end="23:52">~</operator><operator pos:start="23:53" pos:end="23:53">(</operator><name pos:start="23:54" pos:end="23:57">size</name> <operator pos:start="23:59" pos:end="23:59">-</operator> <literal type="number" pos:start="23:61" pos:end="23:61">1</literal><operator pos:start="23:62" pos:end="23:62">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:40"><expr pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:17">last_addr</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <name pos:start="25:21" pos:end="25:28">new_addr</name> <operator pos:start="25:30" pos:end="25:30">+</operator> <name pos:start="25:32" pos:end="25:35">size</name> <operator pos:start="25:37" pos:end="25:37">-</operator> <literal type="number" pos:start="25:39" pos:end="25:39">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="27:9" pos:end="31:11">/* Check if 32 bit BAR wraps around explicitly.

         * TODO: make priorities correct and remove this work around.

         */</comment>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:78">(<expr pos:start="33:13" pos:end="33:77"><name pos:start="33:13" pos:end="33:21">last_addr</name> <operator pos:start="33:23" pos:end="33:24">&lt;=</operator> <name pos:start="33:26" pos:end="33:33">new_addr</name> <operator pos:start="33:35" pos:end="33:36">||</operator> <name pos:start="33:38" pos:end="33:45">new_addr</name> <operator pos:start="33:47" pos:end="33:48">==</operator> <literal type="number" pos:start="33:50" pos:end="33:50">0</literal> <operator pos:start="33:52" pos:end="33:53">||</operator> <name pos:start="33:55" pos:end="33:63">last_addr</name> <operator pos:start="33:65" pos:end="33:66">&gt;=</operator> <name pos:start="33:68" pos:end="33:77">UINT32_MAX</name></expr>)</condition> <block pos:start="33:80" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:36">

            <return pos:start="35:13" pos:end="35:36">return <expr pos:start="35:20" pos:end="35:35"><name pos:start="35:20" pos:end="35:35">PCI_BAR_UNMAPPED</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="39:9" pos:end="39:24">return <expr pos:start="39:16" pos:end="39:23"><name pos:start="39:16" pos:end="39:23">new_addr</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:36">(<expr pos:start="45:9" pos:end="45:35"><operator pos:start="45:9" pos:end="45:9">!</operator><operator pos:start="45:10" pos:end="45:10">(</operator><name pos:start="45:11" pos:end="45:13">cmd</name> <operator pos:start="45:15" pos:end="45:15">&amp;</operator> <name pos:start="45:17" pos:end="45:34">PCI_COMMAND_MEMORY</name><operator pos:start="45:35" pos:end="45:35">)</operator></expr>)</condition> <block pos:start="45:38" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:32">

        <return pos:start="47:9" pos:end="47:32">return <expr pos:start="47:16" pos:end="47:31"><name pos:start="47:16" pos:end="47:31">PCI_BAR_UNMAPPED</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:44">(<expr pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:12">type</name> <operator pos:start="51:14" pos:end="51:14">&amp;</operator> <name pos:start="51:16" pos:end="51:43">PCI_BASE_ADDRESS_MEM_TYPE_64</name></expr>)</condition> <block pos:start="51:46" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:49">

        <expr_stmt pos:start="53:9" pos:end="53:49"><expr pos:start="53:9" pos:end="53:48"><name pos:start="53:9" pos:end="53:16">new_addr</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="53:48"><name pos:start="53:20" pos:end="53:31">pci_get_quad</name><argument_list pos:start="53:32" pos:end="53:48">(<argument pos:start="53:33" pos:end="53:47"><expr pos:start="53:33" pos:end="53:47"><name pos:start="53:33" pos:end="53:41"><name pos:start="53:33" pos:end="53:33">d</name><operator pos:start="53:34" pos:end="53:35">-&gt;</operator><name pos:start="53:36" pos:end="53:41">config</name></name> <operator pos:start="53:43" pos:end="53:43">+</operator> <name pos:start="53:45" pos:end="53:47">bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="59:5">else <block pos:start="55:12" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:49">

        <expr_stmt pos:start="57:9" pos:end="57:49"><expr pos:start="57:9" pos:end="57:48"><name pos:start="57:9" pos:end="57:16">new_addr</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="57:48"><name pos:start="57:20" pos:end="57:31">pci_get_long</name><argument_list pos:start="57:32" pos:end="57:48">(<argument pos:start="57:33" pos:end="57:47"><expr pos:start="57:33" pos:end="57:47"><name pos:start="57:33" pos:end="57:41"><name pos:start="57:33" pos:end="57:33">d</name><operator pos:start="57:34" pos:end="57:35">-&gt;</operator><name pos:start="57:36" pos:end="57:41">config</name></name> <operator pos:start="57:43" pos:end="57:43">+</operator> <name pos:start="57:45" pos:end="57:47">bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:48">/* the ROM slot has a specific enable bit */</comment>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:68">(<expr pos:start="63:9" pos:end="63:67"><name pos:start="63:9" pos:end="63:11">reg</name> <operator pos:start="63:13" pos:end="63:14">==</operator> <name pos:start="63:16" pos:end="63:27">PCI_ROM_SLOT</name> <operator pos:start="63:29" pos:end="63:30">&amp;&amp;</operator> <operator pos:start="63:32" pos:end="63:32">!</operator><operator pos:start="63:33" pos:end="63:33">(</operator><name pos:start="63:34" pos:end="63:41">new_addr</name> <operator pos:start="63:43" pos:end="63:43">&amp;</operator> <name pos:start="63:45" pos:end="63:66">PCI_ROM_ADDRESS_ENABLE</name><operator pos:start="63:67" pos:end="63:67">)</operator></expr>)</condition> <block pos:start="63:70" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:32">

        <return pos:start="65:9" pos:end="65:32">return <expr pos:start="65:16" pos:end="65:31"><name pos:start="65:16" pos:end="65:31">PCI_BAR_UNMAPPED</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:28"><expr pos:start="69:5" pos:end="69:27"><name pos:start="69:5" pos:end="69:12">new_addr</name> <operator pos:start="69:14" pos:end="69:15">&amp;=</operator> <operator pos:start="69:17" pos:end="69:17">~</operator><operator pos:start="69:18" pos:end="69:18">(</operator><name pos:start="69:19" pos:end="69:22">size</name> <operator pos:start="69:24" pos:end="69:24">-</operator> <literal type="number" pos:start="69:26" pos:end="69:26">1</literal><operator pos:start="69:27" pos:end="69:27">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:36"><expr pos:start="71:5" pos:end="71:35"><name pos:start="71:5" pos:end="71:13">last_addr</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <name pos:start="71:17" pos:end="71:24">new_addr</name> <operator pos:start="71:26" pos:end="71:26">+</operator> <name pos:start="71:28" pos:end="71:31">size</name> <operator pos:start="71:33" pos:end="71:33">-</operator> <literal type="number" pos:start="71:35" pos:end="71:35">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="73:5" pos:end="73:42">/* NOTE: we do not support wrapping */</comment>

    <comment type="block" pos:start="75:5" pos:end="79:19">/* XXX: as we cannot support really dynamic

       mappings, we handle specific values as invalid

       mappings. */</comment>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="83:38">(<expr pos:start="81:9" pos:end="83:37"><name pos:start="81:9" pos:end="81:17">last_addr</name> <operator pos:start="81:19" pos:end="81:20">&lt;=</operator> <name pos:start="81:22" pos:end="81:29">new_addr</name> <operator pos:start="81:31" pos:end="81:32">||</operator> <name pos:start="81:34" pos:end="81:41">new_addr</name> <operator pos:start="81:43" pos:end="81:44">==</operator> <literal type="number" pos:start="81:46" pos:end="81:46">0</literal> <operator pos:start="81:48" pos:end="81:49">||</operator>

        <name pos:start="83:9" pos:end="83:17">last_addr</name> <operator pos:start="83:19" pos:end="83:20">==</operator> <name pos:start="83:22" pos:end="83:37">PCI_BAR_UNMAPPED</name></expr>)</condition> <block pos:start="83:40" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:32">

        <return pos:start="85:9" pos:end="85:32">return <expr pos:start="85:16" pos:end="85:31"><name pos:start="85:16" pos:end="85:31">PCI_BAR_UNMAPPED</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="99:7">/* Now pcibus_t is 64bit.

     * Check if 32 bit BAR wraps around explicitly.

     * Without this, PC ide doesn't work well.

     * TODO: remove this work around.

     */</comment>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if  <condition pos:start="101:9" pos:end="101:75">(<expr pos:start="101:10" pos:end="101:74"><operator pos:start="101:10" pos:end="101:10">!</operator><operator pos:start="101:11" pos:end="101:11">(</operator><name pos:start="101:12" pos:end="101:15">type</name> <operator pos:start="101:17" pos:end="101:17">&amp;</operator> <name pos:start="101:19" pos:end="101:46">PCI_BASE_ADDRESS_MEM_TYPE_64</name><operator pos:start="101:47" pos:end="101:47">)</operator> <operator pos:start="101:49" pos:end="101:50">&amp;&amp;</operator> <name pos:start="101:52" pos:end="101:60">last_addr</name> <operator pos:start="101:62" pos:end="101:63">&gt;=</operator> <name pos:start="101:65" pos:end="101:74">UINT32_MAX</name></expr>)</condition> <block pos:start="101:77" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:32">

        <return pos:start="103:9" pos:end="103:32">return <expr pos:start="103:16" pos:end="103:31"><name pos:start="103:16" pos:end="103:31">PCI_BAR_UNMAPPED</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="109:5" pos:end="119:7">/*

     * OS is allowed to set BAR beyond its addressable

     * bits. For example, 32 bit OS can set 64bit bar

     * to &gt;4G. Check it. TODO: we might need to support

     * it in the future for e.g. PAE.

     */</comment>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:32">(<expr pos:start="121:9" pos:end="121:31"><name pos:start="121:9" pos:end="121:17">last_addr</name> <operator pos:start="121:19" pos:end="121:20">&gt;=</operator> <name pos:start="121:22" pos:end="121:31">HWADDR_MAX</name></expr>)</condition> <block pos:start="121:34" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:32">

        <return pos:start="123:9" pos:end="123:32">return <expr pos:start="123:16" pos:end="123:31"><name pos:start="123:16" pos:end="123:31">PCI_BAR_UNMAPPED</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="129:5" pos:end="129:20">return <expr pos:start="129:12" pos:end="129:19"><name pos:start="129:12" pos:end="129:19">new_addr</name></expr>;</return>

</block_content>}</block></function>
</unit>
