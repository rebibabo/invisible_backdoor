<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9746.c" pos:tabs="8"><function pos:start="1:1" pos:end="2701:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">disas_thumb2_insn</name><parameter_list pos:start="1:29" pos:end="1:60">(<parameter pos:start="1:30" pos:end="1:44"><decl pos:start="1:30" pos:end="1:44"><type pos:start="1:30" pos:end="1:44"><name pos:start="1:30" pos:end="1:41">DisasContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:54">uint32_t</name></type> <name pos:start="1:56" pos:end="1:59">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="2701:1">{<block_content pos:start="5:5" pos:end="2699:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">imm</name></decl>, <decl pos:start="5:19" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:19" pos:end="5:23">shift</name></decl>, <decl pos:start="5:26" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:26" pos:end="5:31">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:15">rd</name></decl>, <decl pos:start="7:18" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:18" pos:end="7:19">rn</name></decl>, <decl pos:start="7:22" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:22" pos:end="7:23">rm</name></decl>, <decl pos:start="7:26" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:26" pos:end="7:27">rs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">TCGv_i32</name></type> <name pos:start="9:14" pos:end="9:16">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">TCGv_i32</name></type> <name pos:start="11:14" pos:end="11:17">tmp2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">TCGv_i32</name></type> <name pos:start="13:14" pos:end="13:17">tmp3</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">TCGv_i32</name></type> <name pos:start="15:14" pos:end="15:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">TCGv_i64</name></type> <name pos:start="17:14" pos:end="17:18">tmp64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:11"><decl pos:start="19:5" pos:end="19:10"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:10">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">shiftop</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:14"><decl pos:start="23:5" pos:end="23:13"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:13">conds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">logic_cc</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="33:7">/* The only 32 bit insn that's allowed for Thumb1 is the combined

     * BL/BLX prefix and suffix.

     */</comment>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:42">(<expr pos:start="35:9" pos:end="35:41"><operator pos:start="35:9" pos:end="35:9">(</operator><name pos:start="35:10" pos:end="35:13">insn</name> <operator pos:start="35:15" pos:end="35:15">&amp;</operator> <literal type="number" pos:start="35:17" pos:end="35:26">0xf800e800</literal><operator pos:start="35:27" pos:end="35:27">)</operator> <operator pos:start="35:29" pos:end="35:30">!=</operator> <literal type="number" pos:start="35:32" pos:end="35:41">0xf000e800</literal></expr>)</condition> <block pos:start="35:44" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:18">

        <expr_stmt pos:start="37:9" pos:end="37:18"><expr pos:start="37:9" pos:end="37:17"><call pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:12">ARCH</name><argument_list pos:start="37:13" pos:end="37:17">(<argument pos:start="37:14" pos:end="37:16"><expr pos:start="37:14" pos:end="37:16"><literal type="number" pos:start="37:14" pos:end="37:16">6T2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:28"><expr pos:start="43:5" pos:end="43:27"><name pos:start="43:5" pos:end="43:6">rn</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <operator pos:start="43:10" pos:end="43:10">(</operator><name pos:start="43:11" pos:end="43:14">insn</name> <operator pos:start="43:16" pos:end="43:17">&gt;&gt;</operator> <literal type="number" pos:start="43:19" pos:end="43:20">16</literal><operator pos:start="43:21" pos:end="43:21">)</operator> <operator pos:start="43:23" pos:end="43:23">&amp;</operator> <literal type="number" pos:start="43:25" pos:end="43:27">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:6">rs</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <operator pos:start="45:10" pos:end="45:10">(</operator><name pos:start="45:11" pos:end="45:14">insn</name> <operator pos:start="45:16" pos:end="45:17">&gt;&gt;</operator> <literal type="number" pos:start="45:19" pos:end="45:20">12</literal><operator pos:start="45:21" pos:end="45:21">)</operator> <operator pos:start="45:23" pos:end="45:23">&amp;</operator> <literal type="number" pos:start="45:25" pos:end="45:27">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:27"><expr pos:start="47:5" pos:end="47:26"><name pos:start="47:5" pos:end="47:6">rd</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <operator pos:start="47:10" pos:end="47:10">(</operator><name pos:start="47:11" pos:end="47:14">insn</name> <operator pos:start="47:16" pos:end="47:17">&gt;&gt;</operator> <literal type="number" pos:start="47:19" pos:end="47:19">8</literal><operator pos:start="47:20" pos:end="47:20">)</operator> <operator pos:start="47:22" pos:end="47:22">&amp;</operator> <literal type="number" pos:start="47:24" pos:end="47:26">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:20"><expr pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:6">rm</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <name pos:start="49:10" pos:end="49:13">insn</name> <operator pos:start="49:15" pos:end="49:15">&amp;</operator> <literal type="number" pos:start="49:17" pos:end="49:19">0xf</literal></expr>;</expr_stmt>

    <switch pos:start="51:5" pos:end="2693:5">switch <condition pos:start="51:12" pos:end="51:31">(<expr pos:start="51:13" pos:end="51:30"><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:17">insn</name> <operator pos:start="51:19" pos:end="51:20">&gt;&gt;</operator> <literal type="number" pos:start="51:22" pos:end="51:23">25</literal><operator pos:start="51:24" pos:end="51:24">)</operator> <operator pos:start="51:26" pos:end="51:26">&amp;</operator> <literal type="number" pos:start="51:28" pos:end="51:30">0xf</literal></expr>)</condition> <block pos:start="51:33" pos:end="2693:5">{<block_content pos:start="53:5" pos:end="2691:24">

    <case pos:start="53:5" pos:end="53:11">case <expr pos:start="53:10" pos:end="53:10"><literal type="number" pos:start="53:10" pos:end="53:10">0</literal></expr>:</case> <case pos:start="53:13" pos:end="53:19">case <expr pos:start="53:18" pos:end="53:18"><literal type="number" pos:start="53:18" pos:end="53:18">1</literal></expr>:</case> <case pos:start="53:21" pos:end="53:27">case <expr pos:start="53:26" pos:end="53:26"><literal type="number" pos:start="53:26" pos:end="53:26">2</literal></expr>:</case> <case pos:start="53:29" pos:end="53:35">case <expr pos:start="53:34" pos:end="53:34"><literal type="number" pos:start="53:34" pos:end="53:34">3</literal></expr>:</case>

        <comment type="block" pos:start="55:9" pos:end="55:57">/* 16-bit instructions.  Should never happen.  */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><call pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:13">abort</name><argument_list pos:start="57:14" pos:end="57:15">()</argument_list></call></expr>;</expr_stmt>

    <case pos:start="59:5" pos:end="59:11">case <expr pos:start="59:10" pos:end="59:10"><literal type="number" pos:start="59:10" pos:end="59:10">4</literal></expr>:</case>

        <if_stmt pos:start="61:9" pos:end="621:9"><if pos:start="61:9" pos:end="443:9">if <condition pos:start="61:12" pos:end="61:29">(<expr pos:start="61:13" pos:end="61:28"><name pos:start="61:13" pos:end="61:16">insn</name> <operator pos:start="61:18" pos:end="61:18">&amp;</operator> <operator pos:start="61:20" pos:end="61:20">(</operator><literal type="number" pos:start="61:21" pos:end="61:21">1</literal> <operator pos:start="61:23" pos:end="61:24">&lt;&lt;</operator> <literal type="number" pos:start="61:26" pos:end="61:27">22</literal><operator pos:start="61:28" pos:end="61:28">)</operator></expr>)</condition> <block pos:start="61:31" pos:end="443:9">{<block_content pos:start="71:13" pos:end="441:13">

            <comment type="block" pos:start="63:13" pos:end="69:15">/* 0b1110_100x_x1xx_xxxx_xxxx_xxxx_xxxx_xxxx

             * - load/store doubleword, load/store exclusive, ldacq/strel,

             *   table branch.

             */</comment>

            <if_stmt pos:start="71:13" pos:end="441:13"><if pos:start="71:13" pos:end="113:13">if <condition pos:start="71:16" pos:end="73:50">(<expr pos:start="71:17" pos:end="73:49"><name pos:start="71:17" pos:end="71:20">insn</name> <operator pos:start="71:22" pos:end="71:23">==</operator> <literal type="number" pos:start="71:25" pos:end="71:34">0xe97fe97f</literal> <operator pos:start="71:36" pos:end="71:37">&amp;&amp;</operator> <call pos:start="71:39" pos:end="71:70"><name pos:start="71:39" pos:end="71:52">arm_dc_feature</name><argument_list pos:start="71:53" pos:end="71:70">(<argument pos:start="71:54" pos:end="71:54"><expr pos:start="71:54" pos:end="71:54"><name pos:start="71:54" pos:end="71:54">s</name></expr></argument>, <argument pos:start="71:57" pos:end="71:69"><expr pos:start="71:57" pos:end="71:69"><name pos:start="71:57" pos:end="71:69">ARM_FEATURE_M</name></expr></argument>)</argument_list></call> <operator pos:start="71:72" pos:end="71:73">&amp;&amp;</operator>

                <call pos:start="73:17" pos:end="73:49"><name pos:start="73:17" pos:end="73:30">arm_dc_feature</name><argument_list pos:start="73:31" pos:end="73:49">(<argument pos:start="73:32" pos:end="73:32"><expr pos:start="73:32" pos:end="73:32"><name pos:start="73:32" pos:end="73:32">s</name></expr></argument>, <argument pos:start="73:35" pos:end="73:48"><expr pos:start="73:35" pos:end="73:48"><name pos:start="73:35" pos:end="73:48">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:52" pos:end="113:13">{<block_content pos:start="103:17" pos:end="111:17">

                <comment type="block" pos:start="75:17" pos:end="101:19">/* 0b1110_1001_0111_1111_1110_1001_0111_111

                 *  - SG (v8M only)

                 * The bulk of the behaviour for this instruction is implemented

                 * in v7m_handle_execute_nsc(), which deals with the insn when

                 * it is executed by a CPU in non-secure state from memory

                 * which is Secure &amp; NonSecure-Callable.

                 * Here we only need to handle the remaining cases:

                 *  * in NS memory (including the "security extension not

                 *    implemented" case) : NOP

                 *  * in S memory but CPU already secure (clear IT bits)

                 * We know that the attribute for the memory this insn is

                 * in must match the current CPU state, because otherwise

                 * get_phys_addr_pmsav8 would have generated an exception.

                 */</comment>

                <if_stmt pos:start="103:17" pos:end="111:17"><if pos:start="103:17" pos:end="111:17">if <condition pos:start="103:20" pos:end="103:34">(<expr pos:start="103:21" pos:end="103:33"><name pos:start="103:21" pos:end="103:33"><name pos:start="103:21" pos:end="103:21">s</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:33">v8m_secure</name></name></expr>)</condition> <block pos:start="103:36" pos:end="111:17">{<block_content pos:start="107:21" pos:end="109:41">

                    <comment type="block" pos:start="105:21" pos:end="105:78">/* Like the IT insn, we don't need to generate any code */</comment>

                    <expr_stmt pos:start="107:21" pos:end="107:41"><expr pos:start="107:21" pos:end="107:40"><name pos:start="107:21" pos:end="107:36"><name pos:start="107:21" pos:end="107:21">s</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:36">condexec_cond</name></name> <operator pos:start="107:38" pos:end="107:38">=</operator> <literal type="number" pos:start="107:40" pos:end="107:40">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="109:21" pos:end="109:41"><expr pos:start="109:21" pos:end="109:40"><name pos:start="109:21" pos:end="109:36"><name pos:start="109:21" pos:end="109:21">s</name><operator pos:start="109:22" pos:end="109:23">-&gt;</operator><name pos:start="109:24" pos:end="109:36">condexec_mask</name></name> <operator pos:start="109:38" pos:end="109:38">=</operator> <literal type="number" pos:start="109:40" pos:end="109:40">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="113:15" pos:end="215:13">else if <condition pos:start="113:23" pos:end="113:41">(<expr pos:start="113:24" pos:end="113:40"><name pos:start="113:24" pos:end="113:27">insn</name> <operator pos:start="113:29" pos:end="113:29">&amp;</operator> <literal type="number" pos:start="113:31" pos:end="113:40">0x01200000</literal></expr>)</condition> <block pos:start="113:43" pos:end="215:13">{<block_content pos:start="129:17" pos:end="213:17">

                <comment type="block" pos:start="115:17" pos:end="127:19">/* 0b1110_1000_x11x_xxxx_xxxx_xxxx_xxxx_xxxx

                 *  - load/store dual (post-indexed)

                 * 0b1111_1001_x10x_xxxx_xxxx_xxxx_xxxx_xxxx

                 *  - load/store dual (literal and immediate)

                 * 0b1111_1001_x11x_xxxx_xxxx_xxxx_xxxx_xxxx

                 *  - load/store dual (pre-indexed)

                 */</comment>

                <if_stmt pos:start="129:17" pos:end="147:17"><if pos:start="129:17" pos:end="143:17">if <condition pos:start="129:20" pos:end="129:29">(<expr pos:start="129:21" pos:end="129:28"><name pos:start="129:21" pos:end="129:22">rn</name> <operator pos:start="129:24" pos:end="129:25">==</operator> <literal type="number" pos:start="129:27" pos:end="129:28">15</literal></expr>)</condition> <block pos:start="129:31" pos:end="143:17">{<block_content pos:start="131:21" pos:end="141:55">

                    <if_stmt pos:start="131:21" pos:end="137:21"><if pos:start="131:21" pos:end="137:21">if <condition pos:start="131:24" pos:end="131:41">(<expr pos:start="131:25" pos:end="131:40"><name pos:start="131:25" pos:end="131:28">insn</name> <operator pos:start="131:30" pos:end="131:30">&amp;</operator> <operator pos:start="131:32" pos:end="131:32">(</operator><literal type="number" pos:start="131:33" pos:end="131:33">1</literal> <operator pos:start="131:35" pos:end="131:36">&lt;&lt;</operator> <literal type="number" pos:start="131:38" pos:end="131:39">21</literal><operator pos:start="131:40" pos:end="131:40">)</operator></expr>)</condition> <block pos:start="131:43" pos:end="137:21">{<block_content pos:start="135:25" pos:end="135:40">

                        <comment type="block" pos:start="133:25" pos:end="133:43">/* UNPREDICTABLE */</comment>

                        <goto pos:start="135:25" pos:end="135:40">goto <name pos:start="135:30" pos:end="135:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="139:21" pos:end="139:46"><expr pos:start="139:21" pos:end="139:45"><name pos:start="139:21" pos:end="139:24">addr</name> <operator pos:start="139:26" pos:end="139:26">=</operator> <call pos:start="139:28" pos:end="139:45"><name pos:start="139:28" pos:end="139:43">tcg_temp_new_i32</name><argument_list pos:start="139:44" pos:end="139:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="141:21" pos:end="141:55"><expr pos:start="141:21" pos:end="141:54"><call pos:start="141:21" pos:end="141:54"><name pos:start="141:21" pos:end="141:36">tcg_gen_movi_i32</name><argument_list pos:start="141:37" pos:end="141:54">(<argument pos:start="141:38" pos:end="141:41"><expr pos:start="141:38" pos:end="141:41"><name pos:start="141:38" pos:end="141:41">addr</name></expr></argument>, <argument pos:start="141:44" pos:end="141:53"><expr pos:start="141:44" pos:end="141:53"><name pos:start="141:44" pos:end="141:48"><name pos:start="141:44" pos:end="141:44">s</name><operator pos:start="141:45" pos:end="141:46">-&gt;</operator><name pos:start="141:47" pos:end="141:48">pc</name></name> <operator pos:start="141:50" pos:end="141:50">&amp;</operator> <operator pos:start="141:52" pos:end="141:52">~</operator><literal type="number" pos:start="141:53" pos:end="141:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="143:19" pos:end="147:17">else <block pos:start="143:24" pos:end="147:17">{<block_content pos:start="145:21" pos:end="145:43">

                    <expr_stmt pos:start="145:21" pos:end="145:43"><expr pos:start="145:21" pos:end="145:42"><name pos:start="145:21" pos:end="145:24">addr</name> <operator pos:start="145:26" pos:end="145:26">=</operator> <call pos:start="145:28" pos:end="145:42"><name pos:start="145:28" pos:end="145:35">load_reg</name><argument_list pos:start="145:36" pos:end="145:42">(<argument pos:start="145:37" pos:end="145:37"><expr pos:start="145:37" pos:end="145:37"><name pos:start="145:37" pos:end="145:37">s</name></expr></argument>, <argument pos:start="145:40" pos:end="145:41"><expr pos:start="145:40" pos:end="145:41"><name pos:start="145:40" pos:end="145:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:43"><expr pos:start="149:17" pos:end="149:42"><name pos:start="149:17" pos:end="149:22">offset</name> <operator pos:start="149:24" pos:end="149:24">=</operator> <operator pos:start="149:26" pos:end="149:26">(</operator><name pos:start="149:27" pos:end="149:30">insn</name> <operator pos:start="149:32" pos:end="149:32">&amp;</operator> <literal type="number" pos:start="149:34" pos:end="149:37">0xff</literal><operator pos:start="149:38" pos:end="149:38">)</operator> <operator pos:start="149:40" pos:end="149:40">*</operator> <literal type="number" pos:start="149:42" pos:end="149:42">4</literal></expr>;</expr_stmt>

                <if_stmt pos:start="151:17" pos:end="153:37"><if pos:start="151:17" pos:end="153:37">if <condition pos:start="151:20" pos:end="151:44">(<expr pos:start="151:21" pos:end="151:43"><operator pos:start="151:21" pos:end="151:21">(</operator><name pos:start="151:22" pos:end="151:25">insn</name> <operator pos:start="151:27" pos:end="151:27">&amp;</operator> <operator pos:start="151:29" pos:end="151:29">(</operator><literal type="number" pos:start="151:30" pos:end="151:30">1</literal> <operator pos:start="151:32" pos:end="151:33">&lt;&lt;</operator> <literal type="number" pos:start="151:35" pos:end="151:36">23</literal><operator pos:start="151:37" pos:end="151:37">)</operator><operator pos:start="151:38" pos:end="151:38">)</operator> <operator pos:start="151:40" pos:end="151:41">==</operator> <literal type="number" pos:start="151:43" pos:end="151:43">0</literal></expr>)</condition><block type="pseudo" pos:start="153:21" pos:end="153:37"><block_content pos:start="153:21" pos:end="153:37">

                    <expr_stmt pos:start="153:21" pos:end="153:37"><expr pos:start="153:21" pos:end="153:36"><name pos:start="153:21" pos:end="153:26">offset</name> <operator pos:start="153:28" pos:end="153:28">=</operator> <operator pos:start="153:30" pos:end="153:30">-</operator><name pos:start="153:31" pos:end="153:36">offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="155:17" pos:end="161:17"><if pos:start="155:17" pos:end="161:17">if <condition pos:start="155:20" pos:end="155:37">(<expr pos:start="155:21" pos:end="155:36"><name pos:start="155:21" pos:end="155:24">insn</name> <operator pos:start="155:26" pos:end="155:26">&amp;</operator> <operator pos:start="155:28" pos:end="155:28">(</operator><literal type="number" pos:start="155:29" pos:end="155:29">1</literal> <operator pos:start="155:31" pos:end="155:32">&lt;&lt;</operator> <literal type="number" pos:start="155:34" pos:end="155:35">24</literal><operator pos:start="155:36" pos:end="155:36">)</operator></expr>)</condition> <block pos:start="155:39" pos:end="161:17">{<block_content pos:start="157:21" pos:end="159:31">

                    <expr_stmt pos:start="157:21" pos:end="157:57"><expr pos:start="157:21" pos:end="157:56"><call pos:start="157:21" pos:end="157:56"><name pos:start="157:21" pos:end="157:36">tcg_gen_addi_i32</name><argument_list pos:start="157:37" pos:end="157:56">(<argument pos:start="157:38" pos:end="157:41"><expr pos:start="157:38" pos:end="157:41"><name pos:start="157:38" pos:end="157:41">addr</name></expr></argument>, <argument pos:start="157:44" pos:end="157:47"><expr pos:start="157:44" pos:end="157:47"><name pos:start="157:44" pos:end="157:47">addr</name></expr></argument>, <argument pos:start="157:50" pos:end="157:55"><expr pos:start="157:50" pos:end="157:55"><name pos:start="157:50" pos:end="157:55">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="159:21" pos:end="159:31"><expr pos:start="159:21" pos:end="159:30"><name pos:start="159:21" pos:end="159:26">offset</name> <operator pos:start="159:28" pos:end="159:28">=</operator> <literal type="number" pos:start="159:30" pos:end="159:30">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="163:17" pos:end="199:17"><if pos:start="163:17" pos:end="181:17">if <condition pos:start="163:20" pos:end="163:37">(<expr pos:start="163:21" pos:end="163:36"><name pos:start="163:21" pos:end="163:24">insn</name> <operator pos:start="163:26" pos:end="163:26">&amp;</operator> <operator pos:start="163:28" pos:end="163:28">(</operator><literal type="number" pos:start="163:29" pos:end="163:29">1</literal> <operator pos:start="163:31" pos:end="163:32">&lt;&lt;</operator> <literal type="number" pos:start="163:34" pos:end="163:35">20</literal><operator pos:start="163:36" pos:end="163:36">)</operator></expr>)</condition> <block pos:start="163:39" pos:end="181:17">{<block_content pos:start="167:21" pos:end="179:42">

                    <comment type="block" pos:start="165:21" pos:end="165:30">/* ldrd */</comment>

                    <expr_stmt pos:start="167:21" pos:end="167:45"><expr pos:start="167:21" pos:end="167:44"><name pos:start="167:21" pos:end="167:23">tmp</name> <operator pos:start="167:25" pos:end="167:25">=</operator> <call pos:start="167:27" pos:end="167:44"><name pos:start="167:27" pos:end="167:42">tcg_temp_new_i32</name><argument_list pos:start="167:43" pos:end="167:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="169:21" pos:end="169:67"><expr pos:start="169:21" pos:end="169:66"><call pos:start="169:21" pos:end="169:66"><name pos:start="169:21" pos:end="169:34">gen_aa32_ld32u</name><argument_list pos:start="169:35" pos:end="169:66">(<argument pos:start="169:36" pos:end="169:36"><expr pos:start="169:36" pos:end="169:36"><name pos:start="169:36" pos:end="169:36">s</name></expr></argument>, <argument pos:start="169:39" pos:end="169:41"><expr pos:start="169:39" pos:end="169:41"><name pos:start="169:39" pos:end="169:41">tmp</name></expr></argument>, <argument pos:start="169:44" pos:end="169:47"><expr pos:start="169:44" pos:end="169:47"><name pos:start="169:44" pos:end="169:47">addr</name></expr></argument>, <argument pos:start="169:50" pos:end="169:65"><expr pos:start="169:50" pos:end="169:65"><call pos:start="169:50" pos:end="169:65"><name pos:start="169:50" pos:end="169:62">get_mem_index</name><argument_list pos:start="169:63" pos:end="169:65">(<argument pos:start="169:64" pos:end="169:64"><expr pos:start="169:64" pos:end="169:64"><name pos:start="169:64" pos:end="169:64">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="171:21" pos:end="171:42"><expr pos:start="171:21" pos:end="171:41"><call pos:start="171:21" pos:end="171:41"><name pos:start="171:21" pos:end="171:29">store_reg</name><argument_list pos:start="171:30" pos:end="171:41">(<argument pos:start="171:31" pos:end="171:31"><expr pos:start="171:31" pos:end="171:31"><name pos:start="171:31" pos:end="171:31">s</name></expr></argument>, <argument pos:start="171:34" pos:end="171:35"><expr pos:start="171:34" pos:end="171:35"><name pos:start="171:34" pos:end="171:35">rs</name></expr></argument>, <argument pos:start="171:38" pos:end="171:40"><expr pos:start="171:38" pos:end="171:40"><name pos:start="171:38" pos:end="171:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="173:21" pos:end="173:52"><expr pos:start="173:21" pos:end="173:51"><call pos:start="173:21" pos:end="173:51"><name pos:start="173:21" pos:end="173:36">tcg_gen_addi_i32</name><argument_list pos:start="173:37" pos:end="173:51">(<argument pos:start="173:38" pos:end="173:41"><expr pos:start="173:38" pos:end="173:41"><name pos:start="173:38" pos:end="173:41">addr</name></expr></argument>, <argument pos:start="173:44" pos:end="173:47"><expr pos:start="173:44" pos:end="173:47"><name pos:start="173:44" pos:end="173:47">addr</name></expr></argument>, <argument pos:start="173:50" pos:end="173:50"><expr pos:start="173:50" pos:end="173:50"><literal type="number" pos:start="173:50" pos:end="173:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="175:21" pos:end="175:45"><expr pos:start="175:21" pos:end="175:44"><name pos:start="175:21" pos:end="175:23">tmp</name> <operator pos:start="175:25" pos:end="175:25">=</operator> <call pos:start="175:27" pos:end="175:44"><name pos:start="175:27" pos:end="175:42">tcg_temp_new_i32</name><argument_list pos:start="175:43" pos:end="175:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="177:21" pos:end="177:67"><expr pos:start="177:21" pos:end="177:66"><call pos:start="177:21" pos:end="177:66"><name pos:start="177:21" pos:end="177:34">gen_aa32_ld32u</name><argument_list pos:start="177:35" pos:end="177:66">(<argument pos:start="177:36" pos:end="177:36"><expr pos:start="177:36" pos:end="177:36"><name pos:start="177:36" pos:end="177:36">s</name></expr></argument>, <argument pos:start="177:39" pos:end="177:41"><expr pos:start="177:39" pos:end="177:41"><name pos:start="177:39" pos:end="177:41">tmp</name></expr></argument>, <argument pos:start="177:44" pos:end="177:47"><expr pos:start="177:44" pos:end="177:47"><name pos:start="177:44" pos:end="177:47">addr</name></expr></argument>, <argument pos:start="177:50" pos:end="177:65"><expr pos:start="177:50" pos:end="177:65"><call pos:start="177:50" pos:end="177:65"><name pos:start="177:50" pos:end="177:62">get_mem_index</name><argument_list pos:start="177:63" pos:end="177:65">(<argument pos:start="177:64" pos:end="177:64"><expr pos:start="177:64" pos:end="177:64"><name pos:start="177:64" pos:end="177:64">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="179:21" pos:end="179:42"><expr pos:start="179:21" pos:end="179:41"><call pos:start="179:21" pos:end="179:41"><name pos:start="179:21" pos:end="179:29">store_reg</name><argument_list pos:start="179:30" pos:end="179:41">(<argument pos:start="179:31" pos:end="179:31"><expr pos:start="179:31" pos:end="179:31"><name pos:start="179:31" pos:end="179:31">s</name></expr></argument>, <argument pos:start="179:34" pos:end="179:35"><expr pos:start="179:34" pos:end="179:35"><name pos:start="179:34" pos:end="179:35">rd</name></expr></argument>, <argument pos:start="179:38" pos:end="179:40"><expr pos:start="179:38" pos:end="179:40"><name pos:start="179:38" pos:end="179:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="181:19" pos:end="199:17">else <block pos:start="181:24" pos:end="199:17">{<block_content pos:start="185:21" pos:end="197:43">

                    <comment type="block" pos:start="183:21" pos:end="183:30">/* strd */</comment>

                    <expr_stmt pos:start="185:21" pos:end="185:42"><expr pos:start="185:21" pos:end="185:41"><name pos:start="185:21" pos:end="185:23">tmp</name> <operator pos:start="185:25" pos:end="185:25">=</operator> <call pos:start="185:27" pos:end="185:41"><name pos:start="185:27" pos:end="185:34">load_reg</name><argument_list pos:start="185:35" pos:end="185:41">(<argument pos:start="185:36" pos:end="185:36"><expr pos:start="185:36" pos:end="185:36"><name pos:start="185:36" pos:end="185:36">s</name></expr></argument>, <argument pos:start="185:39" pos:end="185:40"><expr pos:start="185:39" pos:end="185:40"><name pos:start="185:39" pos:end="185:40">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="187:21" pos:end="187:66"><expr pos:start="187:21" pos:end="187:65"><call pos:start="187:21" pos:end="187:65"><name pos:start="187:21" pos:end="187:33">gen_aa32_st32</name><argument_list pos:start="187:34" pos:end="187:65">(<argument pos:start="187:35" pos:end="187:35"><expr pos:start="187:35" pos:end="187:35"><name pos:start="187:35" pos:end="187:35">s</name></expr></argument>, <argument pos:start="187:38" pos:end="187:40"><expr pos:start="187:38" pos:end="187:40"><name pos:start="187:38" pos:end="187:40">tmp</name></expr></argument>, <argument pos:start="187:43" pos:end="187:46"><expr pos:start="187:43" pos:end="187:46"><name pos:start="187:43" pos:end="187:46">addr</name></expr></argument>, <argument pos:start="187:49" pos:end="187:64"><expr pos:start="187:49" pos:end="187:64"><call pos:start="187:49" pos:end="187:64"><name pos:start="187:49" pos:end="187:61">get_mem_index</name><argument_list pos:start="187:62" pos:end="187:64">(<argument pos:start="187:63" pos:end="187:63"><expr pos:start="187:63" pos:end="187:63"><name pos:start="187:63" pos:end="187:63">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="189:21" pos:end="189:43"><expr pos:start="189:21" pos:end="189:42"><call pos:start="189:21" pos:end="189:42"><name pos:start="189:21" pos:end="189:37">tcg_temp_free_i32</name><argument_list pos:start="189:38" pos:end="189:42">(<argument pos:start="189:39" pos:end="189:41"><expr pos:start="189:39" pos:end="189:41"><name pos:start="189:39" pos:end="189:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="191:21" pos:end="191:52"><expr pos:start="191:21" pos:end="191:51"><call pos:start="191:21" pos:end="191:51"><name pos:start="191:21" pos:end="191:36">tcg_gen_addi_i32</name><argument_list pos:start="191:37" pos:end="191:51">(<argument pos:start="191:38" pos:end="191:41"><expr pos:start="191:38" pos:end="191:41"><name pos:start="191:38" pos:end="191:41">addr</name></expr></argument>, <argument pos:start="191:44" pos:end="191:47"><expr pos:start="191:44" pos:end="191:47"><name pos:start="191:44" pos:end="191:47">addr</name></expr></argument>, <argument pos:start="191:50" pos:end="191:50"><expr pos:start="191:50" pos:end="191:50"><literal type="number" pos:start="191:50" pos:end="191:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="193:21" pos:end="193:42"><expr pos:start="193:21" pos:end="193:41"><name pos:start="193:21" pos:end="193:23">tmp</name> <operator pos:start="193:25" pos:end="193:25">=</operator> <call pos:start="193:27" pos:end="193:41"><name pos:start="193:27" pos:end="193:34">load_reg</name><argument_list pos:start="193:35" pos:end="193:41">(<argument pos:start="193:36" pos:end="193:36"><expr pos:start="193:36" pos:end="193:36"><name pos:start="193:36" pos:end="193:36">s</name></expr></argument>, <argument pos:start="193:39" pos:end="193:40"><expr pos:start="193:39" pos:end="193:40"><name pos:start="193:39" pos:end="193:40">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:66"><expr pos:start="195:21" pos:end="195:65"><call pos:start="195:21" pos:end="195:65"><name pos:start="195:21" pos:end="195:33">gen_aa32_st32</name><argument_list pos:start="195:34" pos:end="195:65">(<argument pos:start="195:35" pos:end="195:35"><expr pos:start="195:35" pos:end="195:35"><name pos:start="195:35" pos:end="195:35">s</name></expr></argument>, <argument pos:start="195:38" pos:end="195:40"><expr pos:start="195:38" pos:end="195:40"><name pos:start="195:38" pos:end="195:40">tmp</name></expr></argument>, <argument pos:start="195:43" pos:end="195:46"><expr pos:start="195:43" pos:end="195:46"><name pos:start="195:43" pos:end="195:46">addr</name></expr></argument>, <argument pos:start="195:49" pos:end="195:64"><expr pos:start="195:49" pos:end="195:64"><call pos:start="195:49" pos:end="195:64"><name pos:start="195:49" pos:end="195:61">get_mem_index</name><argument_list pos:start="195:62" pos:end="195:64">(<argument pos:start="195:63" pos:end="195:63"><expr pos:start="195:63" pos:end="195:63"><name pos:start="195:63" pos:end="195:63">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:43"><expr pos:start="197:21" pos:end="197:42"><call pos:start="197:21" pos:end="197:42"><name pos:start="197:21" pos:end="197:37">tcg_temp_free_i32</name><argument_list pos:start="197:38" pos:end="197:42">(<argument pos:start="197:39" pos:end="197:41"><expr pos:start="197:39" pos:end="197:41"><name pos:start="197:39" pos:end="197:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="201:17" pos:end="213:17"><if pos:start="201:17" pos:end="209:17">if <condition pos:start="201:20" pos:end="201:37">(<expr pos:start="201:21" pos:end="201:36"><name pos:start="201:21" pos:end="201:24">insn</name> <operator pos:start="201:26" pos:end="201:26">&amp;</operator> <operator pos:start="201:28" pos:end="201:28">(</operator><literal type="number" pos:start="201:29" pos:end="201:29">1</literal> <operator pos:start="201:31" pos:end="201:32">&lt;&lt;</operator> <literal type="number" pos:start="201:34" pos:end="201:35">21</literal><operator pos:start="201:36" pos:end="201:36">)</operator></expr>)</condition> <block pos:start="201:39" pos:end="209:17">{<block_content pos:start="205:21" pos:end="207:43">

                    <comment type="block" pos:start="203:21" pos:end="203:42">/* Base writeback.  */</comment>

                    <expr_stmt pos:start="205:21" pos:end="205:61"><expr pos:start="205:21" pos:end="205:60"><call pos:start="205:21" pos:end="205:60"><name pos:start="205:21" pos:end="205:36">tcg_gen_addi_i32</name><argument_list pos:start="205:37" pos:end="205:60">(<argument pos:start="205:38" pos:end="205:41"><expr pos:start="205:38" pos:end="205:41"><name pos:start="205:38" pos:end="205:41">addr</name></expr></argument>, <argument pos:start="205:44" pos:end="205:47"><expr pos:start="205:44" pos:end="205:47"><name pos:start="205:44" pos:end="205:47">addr</name></expr></argument>, <argument pos:start="205:50" pos:end="205:59"><expr pos:start="205:50" pos:end="205:59"><name pos:start="205:50" pos:end="205:55">offset</name> <operator pos:start="205:57" pos:end="205:57">-</operator> <literal type="number" pos:start="205:59" pos:end="205:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:43"><expr pos:start="207:21" pos:end="207:42"><call pos:start="207:21" pos:end="207:42"><name pos:start="207:21" pos:end="207:29">store_reg</name><argument_list pos:start="207:30" pos:end="207:42">(<argument pos:start="207:31" pos:end="207:31"><expr pos:start="207:31" pos:end="207:31"><name pos:start="207:31" pos:end="207:31">s</name></expr></argument>, <argument pos:start="207:34" pos:end="207:35"><expr pos:start="207:34" pos:end="207:35"><name pos:start="207:34" pos:end="207:35">rn</name></expr></argument>, <argument pos:start="207:38" pos:end="207:41"><expr pos:start="207:38" pos:end="207:41"><name pos:start="207:38" pos:end="207:41">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="209:19" pos:end="213:17">else <block pos:start="209:24" pos:end="213:17">{<block_content pos:start="211:21" pos:end="211:44">

                    <expr_stmt pos:start="211:21" pos:end="211:44"><expr pos:start="211:21" pos:end="211:43"><call pos:start="211:21" pos:end="211:43"><name pos:start="211:21" pos:end="211:37">tcg_temp_free_i32</name><argument_list pos:start="211:38" pos:end="211:43">(<argument pos:start="211:39" pos:end="211:42"><expr pos:start="211:39" pos:end="211:42"><name pos:start="211:39" pos:end="211:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="215:15" pos:end="247:13">else if <condition pos:start="215:23" pos:end="215:47">(<expr pos:start="215:24" pos:end="215:46"><operator pos:start="215:24" pos:end="215:24">(</operator><name pos:start="215:25" pos:end="215:28">insn</name> <operator pos:start="215:30" pos:end="215:30">&amp;</operator> <operator pos:start="215:32" pos:end="215:32">(</operator><literal type="number" pos:start="215:33" pos:end="215:33">1</literal> <operator pos:start="215:35" pos:end="215:36">&lt;&lt;</operator> <literal type="number" pos:start="215:38" pos:end="215:39">23</literal><operator pos:start="215:40" pos:end="215:40">)</operator><operator pos:start="215:41" pos:end="215:41">)</operator> <operator pos:start="215:43" pos:end="215:44">==</operator> <literal type="number" pos:start="215:46" pos:end="215:46">0</literal></expr>)</condition> <block pos:start="215:49" pos:end="247:13">{<block_content pos:start="223:17" pos:end="245:40">

                <comment type="block" pos:start="217:17" pos:end="221:19">/* 0b1110_1000_010x_xxxx_xxxx_xxxx_xxxx_xxxx

                 * - load/store exclusive word

                 */</comment>

                <if_stmt pos:start="223:17" pos:end="227:17"><if pos:start="223:17" pos:end="227:17">if <condition pos:start="223:20" pos:end="223:29">(<expr pos:start="223:21" pos:end="223:28"><name pos:start="223:21" pos:end="223:22">rs</name> <operator pos:start="223:24" pos:end="223:25">==</operator> <literal type="number" pos:start="223:27" pos:end="223:28">15</literal></expr>)</condition> <block pos:start="223:31" pos:end="227:17">{<block_content pos:start="225:21" pos:end="225:36">

                    <goto pos:start="225:21" pos:end="225:36">goto <name pos:start="225:26" pos:end="225:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:48"><expr pos:start="229:17" pos:end="229:47"><name pos:start="229:17" pos:end="229:20">addr</name> <operator pos:start="229:22" pos:end="229:22">=</operator> <call pos:start="229:24" pos:end="229:47"><name pos:start="229:24" pos:end="229:45">tcg_temp_local_new_i32</name><argument_list pos:start="229:46" pos:end="229:47">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:42"><expr pos:start="231:17" pos:end="231:41"><call pos:start="231:17" pos:end="231:41"><name pos:start="231:17" pos:end="231:28">load_reg_var</name><argument_list pos:start="231:29" pos:end="231:41">(<argument pos:start="231:30" pos:end="231:30"><expr pos:start="231:30" pos:end="231:30"><name pos:start="231:30" pos:end="231:30">s</name></expr></argument>, <argument pos:start="231:33" pos:end="231:36"><expr pos:start="231:33" pos:end="231:36"><name pos:start="231:33" pos:end="231:36">addr</name></expr></argument>, <argument pos:start="231:39" pos:end="231:40"><expr pos:start="231:39" pos:end="231:40"><name pos:start="231:39" pos:end="231:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="233:17" pos:end="233:65"><expr pos:start="233:17" pos:end="233:64"><call pos:start="233:17" pos:end="233:64"><name pos:start="233:17" pos:end="233:32">tcg_gen_addi_i32</name><argument_list pos:start="233:33" pos:end="233:64">(<argument pos:start="233:34" pos:end="233:37"><expr pos:start="233:34" pos:end="233:37"><name pos:start="233:34" pos:end="233:37">addr</name></expr></argument>, <argument pos:start="233:40" pos:end="233:43"><expr pos:start="233:40" pos:end="233:43"><name pos:start="233:40" pos:end="233:43">addr</name></expr></argument>, <argument pos:start="233:46" pos:end="233:63"><expr pos:start="233:46" pos:end="233:63"><operator pos:start="233:46" pos:end="233:46">(</operator><name pos:start="233:47" pos:end="233:50">insn</name> <operator pos:start="233:52" pos:end="233:52">&amp;</operator> <literal type="number" pos:start="233:54" pos:end="233:57">0xff</literal><operator pos:start="233:58" pos:end="233:58">)</operator> <operator pos:start="233:60" pos:end="233:61">&lt;&lt;</operator> <literal type="number" pos:start="233:63" pos:end="233:63">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="235:17" pos:end="243:17"><if pos:start="235:17" pos:end="239:17">if <condition pos:start="235:20" pos:end="235:37">(<expr pos:start="235:21" pos:end="235:36"><name pos:start="235:21" pos:end="235:24">insn</name> <operator pos:start="235:26" pos:end="235:26">&amp;</operator> <operator pos:start="235:28" pos:end="235:28">(</operator><literal type="number" pos:start="235:29" pos:end="235:29">1</literal> <operator pos:start="235:31" pos:end="235:32">&lt;&lt;</operator> <literal type="number" pos:start="235:34" pos:end="235:35">20</literal><operator pos:start="235:36" pos:end="235:36">)</operator></expr>)</condition> <block pos:start="235:39" pos:end="239:17">{<block_content pos:start="237:21" pos:end="237:59">

                    <expr_stmt pos:start="237:21" pos:end="237:59"><expr pos:start="237:21" pos:end="237:58"><call pos:start="237:21" pos:end="237:58"><name pos:start="237:21" pos:end="237:38">gen_load_exclusive</name><argument_list pos:start="237:39" pos:end="237:58">(<argument pos:start="237:40" pos:end="237:40"><expr pos:start="237:40" pos:end="237:40"><name pos:start="237:40" pos:end="237:40">s</name></expr></argument>, <argument pos:start="237:43" pos:end="237:44"><expr pos:start="237:43" pos:end="237:44"><name pos:start="237:43" pos:end="237:44">rs</name></expr></argument>, <argument pos:start="237:47" pos:end="237:48"><expr pos:start="237:47" pos:end="237:48"><literal type="number" pos:start="237:47" pos:end="237:48">15</literal></expr></argument>, <argument pos:start="237:51" pos:end="237:54"><expr pos:start="237:51" pos:end="237:54"><name pos:start="237:51" pos:end="237:54">addr</name></expr></argument>, <argument pos:start="237:57" pos:end="237:57"><expr pos:start="237:57" pos:end="237:57"><literal type="number" pos:start="237:57" pos:end="237:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="239:19" pos:end="243:17">else <block pos:start="239:24" pos:end="243:17">{<block_content pos:start="241:21" pos:end="241:64">

                    <expr_stmt pos:start="241:21" pos:end="241:64"><expr pos:start="241:21" pos:end="241:63"><call pos:start="241:21" pos:end="241:63"><name pos:start="241:21" pos:end="241:39">gen_store_exclusive</name><argument_list pos:start="241:40" pos:end="241:63">(<argument pos:start="241:41" pos:end="241:41"><expr pos:start="241:41" pos:end="241:41"><name pos:start="241:41" pos:end="241:41">s</name></expr></argument>, <argument pos:start="241:44" pos:end="241:45"><expr pos:start="241:44" pos:end="241:45"><name pos:start="241:44" pos:end="241:45">rd</name></expr></argument>, <argument pos:start="241:48" pos:end="241:49"><expr pos:start="241:48" pos:end="241:49"><name pos:start="241:48" pos:end="241:49">rs</name></expr></argument>, <argument pos:start="241:52" pos:end="241:53"><expr pos:start="241:52" pos:end="241:53"><literal type="number" pos:start="241:52" pos:end="241:53">15</literal></expr></argument>, <argument pos:start="241:56" pos:end="241:59"><expr pos:start="241:56" pos:end="241:59"><name pos:start="241:56" pos:end="241:59">addr</name></expr></argument>, <argument pos:start="241:62" pos:end="241:62"><expr pos:start="241:62" pos:end="241:62"><literal type="number" pos:start="241:62" pos:end="241:62">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:40"><expr pos:start="245:17" pos:end="245:39"><call pos:start="245:17" pos:end="245:39"><name pos:start="245:17" pos:end="245:33">tcg_temp_free_i32</name><argument_list pos:start="245:34" pos:end="245:39">(<argument pos:start="245:35" pos:end="245:38"><expr pos:start="245:35" pos:end="245:38"><name pos:start="245:35" pos:end="245:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="247:15" pos:end="297:13">else if <condition pos:start="247:23" pos:end="247:46">(<expr pos:start="247:24" pos:end="247:45"><operator pos:start="247:24" pos:end="247:24">(</operator><name pos:start="247:25" pos:end="247:28">insn</name> <operator pos:start="247:30" pos:end="247:30">&amp;</operator> <operator pos:start="247:32" pos:end="247:32">(</operator><literal type="number" pos:start="247:33" pos:end="247:33">7</literal> <operator pos:start="247:35" pos:end="247:36">&lt;&lt;</operator> <literal type="number" pos:start="247:38" pos:end="247:38">5</literal><operator pos:start="247:39" pos:end="247:39">)</operator><operator pos:start="247:40" pos:end="247:40">)</operator> <operator pos:start="247:42" pos:end="247:43">==</operator> <literal type="number" pos:start="247:45" pos:end="247:45">0</literal></expr>)</condition> <block pos:start="247:48" pos:end="297:13">{<block_content pos:start="251:17" pos:end="295:38">

                <comment type="block" pos:start="249:17" pos:end="249:36">/* Table Branch.  */</comment>

                <if_stmt pos:start="251:17" pos:end="261:17"><if pos:start="251:17" pos:end="257:17">if <condition pos:start="251:20" pos:end="251:29">(<expr pos:start="251:21" pos:end="251:28"><name pos:start="251:21" pos:end="251:22">rn</name> <operator pos:start="251:24" pos:end="251:25">==</operator> <literal type="number" pos:start="251:27" pos:end="251:28">15</literal></expr>)</condition> <block pos:start="251:31" pos:end="257:17">{<block_content pos:start="253:21" pos:end="255:50">

                    <expr_stmt pos:start="253:21" pos:end="253:46"><expr pos:start="253:21" pos:end="253:45"><name pos:start="253:21" pos:end="253:24">addr</name> <operator pos:start="253:26" pos:end="253:26">=</operator> <call pos:start="253:28" pos:end="253:45"><name pos:start="253:28" pos:end="253:43">tcg_temp_new_i32</name><argument_list pos:start="253:44" pos:end="253:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="255:21" pos:end="255:50"><expr pos:start="255:21" pos:end="255:49"><call pos:start="255:21" pos:end="255:49"><name pos:start="255:21" pos:end="255:36">tcg_gen_movi_i32</name><argument_list pos:start="255:37" pos:end="255:49">(<argument pos:start="255:38" pos:end="255:41"><expr pos:start="255:38" pos:end="255:41"><name pos:start="255:38" pos:end="255:41">addr</name></expr></argument>, <argument pos:start="255:44" pos:end="255:48"><expr pos:start="255:44" pos:end="255:48"><name pos:start="255:44" pos:end="255:48"><name pos:start="255:44" pos:end="255:44">s</name><operator pos:start="255:45" pos:end="255:46">-&gt;</operator><name pos:start="255:47" pos:end="255:48">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="257:19" pos:end="261:17">else <block pos:start="257:24" pos:end="261:17">{<block_content pos:start="259:21" pos:end="259:43">

                    <expr_stmt pos:start="259:21" pos:end="259:43"><expr pos:start="259:21" pos:end="259:42"><name pos:start="259:21" pos:end="259:24">addr</name> <operator pos:start="259:26" pos:end="259:26">=</operator> <call pos:start="259:28" pos:end="259:42"><name pos:start="259:28" pos:end="259:35">load_reg</name><argument_list pos:start="259:36" pos:end="259:42">(<argument pos:start="259:37" pos:end="259:37"><expr pos:start="259:37" pos:end="259:37"><name pos:start="259:37" pos:end="259:37">s</name></expr></argument>, <argument pos:start="259:40" pos:end="259:41"><expr pos:start="259:40" pos:end="259:41"><name pos:start="259:40" pos:end="259:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:38"><expr pos:start="263:17" pos:end="263:37"><name pos:start="263:17" pos:end="263:19">tmp</name> <operator pos:start="263:21" pos:end="263:21">=</operator> <call pos:start="263:23" pos:end="263:37"><name pos:start="263:23" pos:end="263:30">load_reg</name><argument_list pos:start="263:31" pos:end="263:37">(<argument pos:start="263:32" pos:end="263:32"><expr pos:start="263:32" pos:end="263:32"><name pos:start="263:32" pos:end="263:32">s</name></expr></argument>, <argument pos:start="263:35" pos:end="263:36"><expr pos:start="263:35" pos:end="263:36"><name pos:start="263:35" pos:end="263:36">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:49"><expr pos:start="265:17" pos:end="265:48"><call pos:start="265:17" pos:end="265:48"><name pos:start="265:17" pos:end="265:31">tcg_gen_add_i32</name><argument_list pos:start="265:32" pos:end="265:48">(<argument pos:start="265:33" pos:end="265:36"><expr pos:start="265:33" pos:end="265:36"><name pos:start="265:33" pos:end="265:36">addr</name></expr></argument>, <argument pos:start="265:39" pos:end="265:42"><expr pos:start="265:39" pos:end="265:42"><name pos:start="265:39" pos:end="265:42">addr</name></expr></argument>, <argument pos:start="265:45" pos:end="265:47"><expr pos:start="265:45" pos:end="265:47"><name pos:start="265:45" pos:end="265:47">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="267:17" pos:end="287:17"><if pos:start="267:17" pos:end="279:17">if <condition pos:start="267:20" pos:end="267:36">(<expr pos:start="267:21" pos:end="267:35"><name pos:start="267:21" pos:end="267:24">insn</name> <operator pos:start="267:26" pos:end="267:26">&amp;</operator> <operator pos:start="267:28" pos:end="267:28">(</operator><literal type="number" pos:start="267:29" pos:end="267:29">1</literal> <operator pos:start="267:31" pos:end="267:32">&lt;&lt;</operator> <literal type="number" pos:start="267:34" pos:end="267:34">4</literal><operator pos:start="267:35" pos:end="267:35">)</operator></expr>)</condition> <block pos:start="267:38" pos:end="279:17">{<block_content pos:start="271:21" pos:end="277:67">

                    <comment type="block" pos:start="269:21" pos:end="269:29">/* tbh */</comment>

                    <expr_stmt pos:start="271:21" pos:end="271:53"><expr pos:start="271:21" pos:end="271:52"><call pos:start="271:21" pos:end="271:52"><name pos:start="271:21" pos:end="271:35">tcg_gen_add_i32</name><argument_list pos:start="271:36" pos:end="271:52">(<argument pos:start="271:37" pos:end="271:40"><expr pos:start="271:37" pos:end="271:40"><name pos:start="271:37" pos:end="271:40">addr</name></expr></argument>, <argument pos:start="271:43" pos:end="271:46"><expr pos:start="271:43" pos:end="271:46"><name pos:start="271:43" pos:end="271:46">addr</name></expr></argument>, <argument pos:start="271:49" pos:end="271:51"><expr pos:start="271:49" pos:end="271:51"><name pos:start="271:49" pos:end="271:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="273:21" pos:end="273:43"><expr pos:start="273:21" pos:end="273:42"><call pos:start="273:21" pos:end="273:42"><name pos:start="273:21" pos:end="273:37">tcg_temp_free_i32</name><argument_list pos:start="273:38" pos:end="273:42">(<argument pos:start="273:39" pos:end="273:41"><expr pos:start="273:39" pos:end="273:41"><name pos:start="273:39" pos:end="273:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="275:21" pos:end="275:45"><expr pos:start="275:21" pos:end="275:44"><name pos:start="275:21" pos:end="275:23">tmp</name> <operator pos:start="275:25" pos:end="275:25">=</operator> <call pos:start="275:27" pos:end="275:44"><name pos:start="275:27" pos:end="275:42">tcg_temp_new_i32</name><argument_list pos:start="275:43" pos:end="275:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="277:21" pos:end="277:67"><expr pos:start="277:21" pos:end="277:66"><call pos:start="277:21" pos:end="277:66"><name pos:start="277:21" pos:end="277:34">gen_aa32_ld16u</name><argument_list pos:start="277:35" pos:end="277:66">(<argument pos:start="277:36" pos:end="277:36"><expr pos:start="277:36" pos:end="277:36"><name pos:start="277:36" pos:end="277:36">s</name></expr></argument>, <argument pos:start="277:39" pos:end="277:41"><expr pos:start="277:39" pos:end="277:41"><name pos:start="277:39" pos:end="277:41">tmp</name></expr></argument>, <argument pos:start="277:44" pos:end="277:47"><expr pos:start="277:44" pos:end="277:47"><name pos:start="277:44" pos:end="277:47">addr</name></expr></argument>, <argument pos:start="277:50" pos:end="277:65"><expr pos:start="277:50" pos:end="277:65"><call pos:start="277:50" pos:end="277:65"><name pos:start="277:50" pos:end="277:62">get_mem_index</name><argument_list pos:start="277:63" pos:end="277:65">(<argument pos:start="277:64" pos:end="277:64"><expr pos:start="277:64" pos:end="277:64"><name pos:start="277:64" pos:end="277:64">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="279:19" pos:end="287:17">else <block pos:start="279:24" pos:end="287:17">{<block_content pos:start="281:21" pos:end="285:66"> <comment type="block" pos:start="279:26" pos:end="279:34">/* tbb */</comment>

                    <expr_stmt pos:start="281:21" pos:end="281:43"><expr pos:start="281:21" pos:end="281:42"><call pos:start="281:21" pos:end="281:42"><name pos:start="281:21" pos:end="281:37">tcg_temp_free_i32</name><argument_list pos:start="281:38" pos:end="281:42">(<argument pos:start="281:39" pos:end="281:41"><expr pos:start="281:39" pos:end="281:41"><name pos:start="281:39" pos:end="281:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="283:21" pos:end="283:45"><expr pos:start="283:21" pos:end="283:44"><name pos:start="283:21" pos:end="283:23">tmp</name> <operator pos:start="283:25" pos:end="283:25">=</operator> <call pos:start="283:27" pos:end="283:44"><name pos:start="283:27" pos:end="283:42">tcg_temp_new_i32</name><argument_list pos:start="283:43" pos:end="283:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="285:21" pos:end="285:66"><expr pos:start="285:21" pos:end="285:65"><call pos:start="285:21" pos:end="285:65"><name pos:start="285:21" pos:end="285:33">gen_aa32_ld8u</name><argument_list pos:start="285:34" pos:end="285:65">(<argument pos:start="285:35" pos:end="285:35"><expr pos:start="285:35" pos:end="285:35"><name pos:start="285:35" pos:end="285:35">s</name></expr></argument>, <argument pos:start="285:38" pos:end="285:40"><expr pos:start="285:38" pos:end="285:40"><name pos:start="285:38" pos:end="285:40">tmp</name></expr></argument>, <argument pos:start="285:43" pos:end="285:46"><expr pos:start="285:43" pos:end="285:46"><name pos:start="285:43" pos:end="285:46">addr</name></expr></argument>, <argument pos:start="285:49" pos:end="285:64"><expr pos:start="285:49" pos:end="285:64"><call pos:start="285:49" pos:end="285:64"><name pos:start="285:49" pos:end="285:61">get_mem_index</name><argument_list pos:start="285:62" pos:end="285:64">(<argument pos:start="285:63" pos:end="285:63"><expr pos:start="285:63" pos:end="285:63"><name pos:start="285:63" pos:end="285:63">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:40"><expr pos:start="289:17" pos:end="289:39"><call pos:start="289:17" pos:end="289:39"><name pos:start="289:17" pos:end="289:33">tcg_temp_free_i32</name><argument_list pos:start="289:34" pos:end="289:39">(<argument pos:start="289:35" pos:end="289:38"><expr pos:start="289:35" pos:end="289:38"><name pos:start="289:35" pos:end="289:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="291:46"><expr pos:start="291:17" pos:end="291:45"><call pos:start="291:17" pos:end="291:45"><name pos:start="291:17" pos:end="291:32">tcg_gen_shli_i32</name><argument_list pos:start="291:33" pos:end="291:45">(<argument pos:start="291:34" pos:end="291:36"><expr pos:start="291:34" pos:end="291:36"><name pos:start="291:34" pos:end="291:36">tmp</name></expr></argument>, <argument pos:start="291:39" pos:end="291:41"><expr pos:start="291:39" pos:end="291:41"><name pos:start="291:39" pos:end="291:41">tmp</name></expr></argument>, <argument pos:start="291:44" pos:end="291:44"><expr pos:start="291:44" pos:end="291:44"><literal type="number" pos:start="291:44" pos:end="291:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="293:17" pos:end="293:50"><expr pos:start="293:17" pos:end="293:49"><call pos:start="293:17" pos:end="293:49"><name pos:start="293:17" pos:end="293:32">tcg_gen_addi_i32</name><argument_list pos:start="293:33" pos:end="293:49">(<argument pos:start="293:34" pos:end="293:36"><expr pos:start="293:34" pos:end="293:36"><name pos:start="293:34" pos:end="293:36">tmp</name></expr></argument>, <argument pos:start="293:39" pos:end="293:41"><expr pos:start="293:39" pos:end="293:41"><name pos:start="293:39" pos:end="293:41">tmp</name></expr></argument>, <argument pos:start="293:44" pos:end="293:48"><expr pos:start="293:44" pos:end="293:48"><name pos:start="293:44" pos:end="293:48"><name pos:start="293:44" pos:end="293:44">s</name><operator pos:start="293:45" pos:end="293:46">-&gt;</operator><name pos:start="293:47" pos:end="293:48">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:38"><expr pos:start="295:17" pos:end="295:37"><call pos:start="295:17" pos:end="295:37"><name pos:start="295:17" pos:end="295:25">store_reg</name><argument_list pos:start="295:26" pos:end="295:37">(<argument pos:start="295:27" pos:end="295:27"><expr pos:start="295:27" pos:end="295:27"><name pos:start="295:27" pos:end="295:27">s</name></expr></argument>, <argument pos:start="295:30" pos:end="295:31"><expr pos:start="295:30" pos:end="295:31"><literal type="number" pos:start="295:30" pos:end="295:31">15</literal></expr></argument>, <argument pos:start="295:34" pos:end="295:36"><expr pos:start="295:34" pos:end="295:36"><name pos:start="295:34" pos:end="295:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="297:15" pos:end="441:13">else <block pos:start="297:20" pos:end="441:13">{<block_content pos:start="299:17" pos:end="439:40">

                <decl_stmt pos:start="299:17" pos:end="299:44"><decl pos:start="299:17" pos:end="299:43"><type pos:start="299:17" pos:end="299:19"><name pos:start="299:17" pos:end="299:19">int</name></type> <name pos:start="299:21" pos:end="299:23">op2</name> <init pos:start="299:25" pos:end="299:43">= <expr pos:start="299:27" pos:end="299:43"><operator pos:start="299:27" pos:end="299:27">(</operator><name pos:start="299:28" pos:end="299:31">insn</name> <operator pos:start="299:33" pos:end="299:34">&gt;&gt;</operator> <literal type="number" pos:start="299:36" pos:end="299:36">6</literal><operator pos:start="299:37" pos:end="299:37">)</operator> <operator pos:start="299:39" pos:end="299:39">&amp;</operator> <literal type="number" pos:start="299:41" pos:end="299:43">0x3</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:39"><expr pos:start="301:17" pos:end="301:38"><name pos:start="301:17" pos:end="301:18">op</name> <operator pos:start="301:20" pos:end="301:20">=</operator> <operator pos:start="301:22" pos:end="301:22">(</operator><name pos:start="301:23" pos:end="301:26">insn</name> <operator pos:start="301:28" pos:end="301:29">&gt;&gt;</operator> <literal type="number" pos:start="301:31" pos:end="301:31">4</literal><operator pos:start="301:32" pos:end="301:32">)</operator> <operator pos:start="301:34" pos:end="301:34">&amp;</operator> <literal type="number" pos:start="301:36" pos:end="301:38">0x3</literal></expr>;</expr_stmt>

                <switch pos:start="303:17" pos:end="343:17">switch <condition pos:start="303:24" pos:end="303:28">(<expr pos:start="303:25" pos:end="303:27"><name pos:start="303:25" pos:end="303:27">op2</name></expr>)</condition> <block pos:start="303:30" pos:end="343:17">{<block_content pos:start="305:17" pos:end="341:26">

                <case pos:start="305:17" pos:end="305:23">case <expr pos:start="305:22" pos:end="305:22"><literal type="number" pos:start="305:22" pos:end="305:22">0</literal></expr>:</case>

                    <goto pos:start="307:21" pos:end="307:36">goto <name pos:start="307:26" pos:end="307:35">illegal_op</name>;</goto>

                <case pos:start="309:17" pos:end="309:23">case <expr pos:start="309:22" pos:end="309:22"><literal type="number" pos:start="309:22" pos:end="309:22">1</literal></expr>:</case>

                    <comment type="block" pos:start="311:21" pos:end="311:71">/* Load/store exclusive byte/halfword/doubleword */</comment>

                    <if_stmt pos:start="313:21" pos:end="317:21"><if pos:start="313:21" pos:end="317:21">if <condition pos:start="313:24" pos:end="313:32">(<expr pos:start="313:25" pos:end="313:31"><name pos:start="313:25" pos:end="313:26">op</name> <operator pos:start="313:28" pos:end="313:29">==</operator> <literal type="number" pos:start="313:31" pos:end="313:31">2</literal></expr>)</condition> <block pos:start="313:34" pos:end="317:21">{<block_content pos:start="315:25" pos:end="315:40">

                        <goto pos:start="315:25" pos:end="315:40">goto <name pos:start="315:30" pos:end="315:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="319:21" pos:end="319:28"><expr pos:start="319:21" pos:end="319:27"><call pos:start="319:21" pos:end="319:27"><name pos:start="319:21" pos:end="319:24">ARCH</name><argument_list pos:start="319:25" pos:end="319:27">(<argument pos:start="319:26" pos:end="319:26"><expr pos:start="319:26" pos:end="319:26"><literal type="number" pos:start="319:26" pos:end="319:26">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="321:21" pos:end="321:26">break;</break>

                <case pos:start="323:17" pos:end="323:23">case <expr pos:start="323:22" pos:end="323:22"><literal type="number" pos:start="323:22" pos:end="323:22">2</literal></expr>:</case>

                    <comment type="block" pos:start="325:21" pos:end="325:52">/* Load-acquire/store-release */</comment>

                    <if_stmt pos:start="327:21" pos:end="331:21"><if pos:start="327:21" pos:end="331:21">if <condition pos:start="327:24" pos:end="327:32">(<expr pos:start="327:25" pos:end="327:31"><name pos:start="327:25" pos:end="327:26">op</name> <operator pos:start="327:28" pos:end="327:29">==</operator> <literal type="number" pos:start="327:31" pos:end="327:31">3</literal></expr>)</condition> <block pos:start="327:34" pos:end="331:21">{<block_content pos:start="329:25" pos:end="329:40">

                        <goto pos:start="329:25" pos:end="329:40">goto <name pos:start="329:30" pos:end="329:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="333:21" pos:end="333:38">/* Fall through */</comment>

                <case pos:start="335:17" pos:end="335:23">case <expr pos:start="335:22" pos:end="335:22"><literal type="number" pos:start="335:22" pos:end="335:22">3</literal></expr>:</case>

                    <comment type="block" pos:start="337:21" pos:end="337:62">/* Load-acquire/store-release exclusive */</comment>

                    <expr_stmt pos:start="339:21" pos:end="339:28"><expr pos:start="339:21" pos:end="339:27"><call pos:start="339:21" pos:end="339:27"><name pos:start="339:21" pos:end="339:24">ARCH</name><argument_list pos:start="339:25" pos:end="339:27">(<argument pos:start="339:26" pos:end="339:26"><expr pos:start="339:26" pos:end="339:26"><literal type="number" pos:start="339:26" pos:end="339:26">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="341:21" pos:end="341:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="345:17" pos:end="345:48"><expr pos:start="345:17" pos:end="345:47"><name pos:start="345:17" pos:end="345:20">addr</name> <operator pos:start="345:22" pos:end="345:22">=</operator> <call pos:start="345:24" pos:end="345:47"><name pos:start="345:24" pos:end="345:45">tcg_temp_local_new_i32</name><argument_list pos:start="345:46" pos:end="345:47">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="347:17" pos:end="347:42"><expr pos:start="347:17" pos:end="347:41"><call pos:start="347:17" pos:end="347:41"><name pos:start="347:17" pos:end="347:28">load_reg_var</name><argument_list pos:start="347:29" pos:end="347:41">(<argument pos:start="347:30" pos:end="347:30"><expr pos:start="347:30" pos:end="347:30"><name pos:start="347:30" pos:end="347:30">s</name></expr></argument>, <argument pos:start="347:33" pos:end="347:36"><expr pos:start="347:33" pos:end="347:36"><name pos:start="347:33" pos:end="347:36">addr</name></expr></argument>, <argument pos:start="347:39" pos:end="347:40"><expr pos:start="347:39" pos:end="347:40"><name pos:start="347:39" pos:end="347:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="349:17" pos:end="437:17"><if pos:start="349:17" pos:end="429:17">if <condition pos:start="349:20" pos:end="349:31">(<expr pos:start="349:21" pos:end="349:30"><operator pos:start="349:21" pos:end="349:21">!</operator><operator pos:start="349:22" pos:end="349:22">(</operator><name pos:start="349:23" pos:end="349:25">op2</name> <operator pos:start="349:27" pos:end="349:27">&amp;</operator> <literal type="number" pos:start="349:29" pos:end="349:29">1</literal><operator pos:start="349:30" pos:end="349:30">)</operator></expr>)</condition> <block pos:start="349:33" pos:end="429:17">{<block_content pos:start="351:21" pos:end="427:21">

                    <if_stmt pos:start="351:21" pos:end="427:21"><if pos:start="351:21" pos:end="389:21">if <condition pos:start="351:24" pos:end="351:41">(<expr pos:start="351:25" pos:end="351:40"><name pos:start="351:25" pos:end="351:28">insn</name> <operator pos:start="351:30" pos:end="351:30">&amp;</operator> <operator pos:start="351:32" pos:end="351:32">(</operator><literal type="number" pos:start="351:33" pos:end="351:33">1</literal> <operator pos:start="351:35" pos:end="351:36">&lt;&lt;</operator> <literal type="number" pos:start="351:38" pos:end="351:39">20</literal><operator pos:start="351:40" pos:end="351:40">)</operator></expr>)</condition> <block pos:start="351:43" pos:end="389:21">{<block_content pos:start="353:25" pos:end="387:46">

                        <expr_stmt pos:start="353:25" pos:end="353:49"><expr pos:start="353:25" pos:end="353:48"><name pos:start="353:25" pos:end="353:27">tmp</name> <operator pos:start="353:29" pos:end="353:29">=</operator> <call pos:start="353:31" pos:end="353:48"><name pos:start="353:31" pos:end="353:46">tcg_temp_new_i32</name><argument_list pos:start="353:47" pos:end="353:48">()</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="355:25" pos:end="385:25">switch <condition pos:start="355:32" pos:end="355:35">(<expr pos:start="355:33" pos:end="355:34"><name pos:start="355:33" pos:end="355:34">op</name></expr>)</condition> <block pos:start="355:37" pos:end="385:25">{<block_content pos:start="357:25" pos:end="383:36">

                        <case pos:start="357:25" pos:end="357:31">case <expr pos:start="357:30" pos:end="357:30"><literal type="number" pos:start="357:30" pos:end="357:30">0</literal></expr>:</case> <comment type="block" pos:start="357:33" pos:end="357:42">/* ldab */</comment>

                            <expr_stmt pos:start="359:29" pos:end="361:64"><expr pos:start="359:29" pos:end="361:63"><call pos:start="359:29" pos:end="361:63"><name pos:start="359:29" pos:end="359:45">gen_aa32_ld8u_iss</name><argument_list pos:start="359:46" pos:end="361:63">(<argument pos:start="359:47" pos:end="359:47"><expr pos:start="359:47" pos:end="359:47"><name pos:start="359:47" pos:end="359:47">s</name></expr></argument>, <argument pos:start="359:50" pos:end="359:52"><expr pos:start="359:50" pos:end="359:52"><name pos:start="359:50" pos:end="359:52">tmp</name></expr></argument>, <argument pos:start="359:55" pos:end="359:58"><expr pos:start="359:55" pos:end="359:58"><name pos:start="359:55" pos:end="359:58">addr</name></expr></argument>, <argument pos:start="359:61" pos:end="359:76"><expr pos:start="359:61" pos:end="359:76"><call pos:start="359:61" pos:end="359:76"><name pos:start="359:61" pos:end="359:73">get_mem_index</name><argument_list pos:start="359:74" pos:end="359:76">(<argument pos:start="359:75" pos:end="359:75"><expr pos:start="359:75" pos:end="359:75"><name pos:start="359:75" pos:end="359:75">s</name></expr></argument>)</argument_list></call></expr></argument>,

                                              <argument pos:start="361:47" pos:end="361:62"><expr pos:start="361:47" pos:end="361:62"><name pos:start="361:47" pos:end="361:48">rs</name> <operator pos:start="361:50" pos:end="361:50">|</operator> <name pos:start="361:52" pos:end="361:62">ISSIsAcqRel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="363:29" pos:end="363:34">break;</break>

                        <case pos:start="365:25" pos:end="365:31">case <expr pos:start="365:30" pos:end="365:30"><literal type="number" pos:start="365:30" pos:end="365:30">1</literal></expr>:</case> <comment type="block" pos:start="365:33" pos:end="365:42">/* ldah */</comment>

                            <expr_stmt pos:start="367:29" pos:end="369:65"><expr pos:start="367:29" pos:end="369:64"><call pos:start="367:29" pos:end="369:64"><name pos:start="367:29" pos:end="367:46">gen_aa32_ld16u_iss</name><argument_list pos:start="367:47" pos:end="369:64">(<argument pos:start="367:48" pos:end="367:48"><expr pos:start="367:48" pos:end="367:48"><name pos:start="367:48" pos:end="367:48">s</name></expr></argument>, <argument pos:start="367:51" pos:end="367:53"><expr pos:start="367:51" pos:end="367:53"><name pos:start="367:51" pos:end="367:53">tmp</name></expr></argument>, <argument pos:start="367:56" pos:end="367:59"><expr pos:start="367:56" pos:end="367:59"><name pos:start="367:56" pos:end="367:59">addr</name></expr></argument>, <argument pos:start="367:62" pos:end="367:77"><expr pos:start="367:62" pos:end="367:77"><call pos:start="367:62" pos:end="367:77"><name pos:start="367:62" pos:end="367:74">get_mem_index</name><argument_list pos:start="367:75" pos:end="367:77">(<argument pos:start="367:76" pos:end="367:76"><expr pos:start="367:76" pos:end="367:76"><name pos:start="367:76" pos:end="367:76">s</name></expr></argument>)</argument_list></call></expr></argument>,

                                               <argument pos:start="369:48" pos:end="369:63"><expr pos:start="369:48" pos:end="369:63"><name pos:start="369:48" pos:end="369:49">rs</name> <operator pos:start="369:51" pos:end="369:51">|</operator> <name pos:start="369:53" pos:end="369:63">ISSIsAcqRel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="371:29" pos:end="371:34">break;</break>

                        <case pos:start="373:25" pos:end="373:31">case <expr pos:start="373:30" pos:end="373:30"><literal type="number" pos:start="373:30" pos:end="373:30">2</literal></expr>:</case> <comment type="block" pos:start="373:33" pos:end="373:41">/* lda */</comment>

                            <expr_stmt pos:start="375:29" pos:end="377:65"><expr pos:start="375:29" pos:end="377:64"><call pos:start="375:29" pos:end="377:64"><name pos:start="375:29" pos:end="375:46">gen_aa32_ld32u_iss</name><argument_list pos:start="375:47" pos:end="377:64">(<argument pos:start="375:48" pos:end="375:48"><expr pos:start="375:48" pos:end="375:48"><name pos:start="375:48" pos:end="375:48">s</name></expr></argument>, <argument pos:start="375:51" pos:end="375:53"><expr pos:start="375:51" pos:end="375:53"><name pos:start="375:51" pos:end="375:53">tmp</name></expr></argument>, <argument pos:start="375:56" pos:end="375:59"><expr pos:start="375:56" pos:end="375:59"><name pos:start="375:56" pos:end="375:59">addr</name></expr></argument>, <argument pos:start="375:62" pos:end="375:77"><expr pos:start="375:62" pos:end="375:77"><call pos:start="375:62" pos:end="375:77"><name pos:start="375:62" pos:end="375:74">get_mem_index</name><argument_list pos:start="375:75" pos:end="375:77">(<argument pos:start="375:76" pos:end="375:76"><expr pos:start="375:76" pos:end="375:76"><name pos:start="375:76" pos:end="375:76">s</name></expr></argument>)</argument_list></call></expr></argument>,

                                               <argument pos:start="377:48" pos:end="377:63"><expr pos:start="377:48" pos:end="377:63"><name pos:start="377:48" pos:end="377:49">rs</name> <operator pos:start="377:51" pos:end="377:51">|</operator> <name pos:start="377:53" pos:end="377:63">ISSIsAcqRel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="379:29" pos:end="379:34">break;</break>

                        <default pos:start="381:25" pos:end="381:32">default:</default>

                            <expr_stmt pos:start="383:29" pos:end="383:36"><expr pos:start="383:29" pos:end="383:35"><call pos:start="383:29" pos:end="383:35"><name pos:start="383:29" pos:end="383:33">abort</name><argument_list pos:start="383:34" pos:end="383:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="387:25" pos:end="387:46"><expr pos:start="387:25" pos:end="387:45"><call pos:start="387:25" pos:end="387:45"><name pos:start="387:25" pos:end="387:33">store_reg</name><argument_list pos:start="387:34" pos:end="387:45">(<argument pos:start="387:35" pos:end="387:35"><expr pos:start="387:35" pos:end="387:35"><name pos:start="387:35" pos:end="387:35">s</name></expr></argument>, <argument pos:start="387:38" pos:end="387:39"><expr pos:start="387:38" pos:end="387:39"><name pos:start="387:38" pos:end="387:39">rs</name></expr></argument>, <argument pos:start="387:42" pos:end="387:44"><expr pos:start="387:42" pos:end="387:44"><name pos:start="387:42" pos:end="387:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="389:23" pos:end="427:21">else <block pos:start="389:28" pos:end="427:21">{<block_content pos:start="391:25" pos:end="425:47">

                        <expr_stmt pos:start="391:25" pos:end="391:46"><expr pos:start="391:25" pos:end="391:45"><name pos:start="391:25" pos:end="391:27">tmp</name> <operator pos:start="391:29" pos:end="391:29">=</operator> <call pos:start="391:31" pos:end="391:45"><name pos:start="391:31" pos:end="391:38">load_reg</name><argument_list pos:start="391:39" pos:end="391:45">(<argument pos:start="391:40" pos:end="391:40"><expr pos:start="391:40" pos:end="391:40"><name pos:start="391:40" pos:end="391:40">s</name></expr></argument>, <argument pos:start="391:43" pos:end="391:44"><expr pos:start="391:43" pos:end="391:44"><name pos:start="391:43" pos:end="391:44">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="393:25" pos:end="423:25">switch <condition pos:start="393:32" pos:end="393:35">(<expr pos:start="393:33" pos:end="393:34"><name pos:start="393:33" pos:end="393:34">op</name></expr>)</condition> <block pos:start="393:37" pos:end="423:25">{<block_content pos:start="395:25" pos:end="421:36">

                        <case pos:start="395:25" pos:end="395:31">case <expr pos:start="395:30" pos:end="395:30"><literal type="number" pos:start="395:30" pos:end="395:30">0</literal></expr>:</case> <comment type="block" pos:start="395:33" pos:end="395:42">/* stlb */</comment>

                            <expr_stmt pos:start="397:29" pos:end="399:63"><expr pos:start="397:29" pos:end="399:62"><call pos:start="397:29" pos:end="399:62"><name pos:start="397:29" pos:end="397:44">gen_aa32_st8_iss</name><argument_list pos:start="397:45" pos:end="399:62">(<argument pos:start="397:46" pos:end="397:46"><expr pos:start="397:46" pos:end="397:46"><name pos:start="397:46" pos:end="397:46">s</name></expr></argument>, <argument pos:start="397:49" pos:end="397:51"><expr pos:start="397:49" pos:end="397:51"><name pos:start="397:49" pos:end="397:51">tmp</name></expr></argument>, <argument pos:start="397:54" pos:end="397:57"><expr pos:start="397:54" pos:end="397:57"><name pos:start="397:54" pos:end="397:57">addr</name></expr></argument>, <argument pos:start="397:60" pos:end="397:75"><expr pos:start="397:60" pos:end="397:75"><call pos:start="397:60" pos:end="397:75"><name pos:start="397:60" pos:end="397:72">get_mem_index</name><argument_list pos:start="397:73" pos:end="397:75">(<argument pos:start="397:74" pos:end="397:74"><expr pos:start="397:74" pos:end="397:74"><name pos:start="397:74" pos:end="397:74">s</name></expr></argument>)</argument_list></call></expr></argument>,

                                             <argument pos:start="399:46" pos:end="399:61"><expr pos:start="399:46" pos:end="399:61"><name pos:start="399:46" pos:end="399:47">rs</name> <operator pos:start="399:49" pos:end="399:49">|</operator> <name pos:start="399:51" pos:end="399:61">ISSIsAcqRel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="401:29" pos:end="401:34">break;</break>

                        <case pos:start="403:25" pos:end="403:31">case <expr pos:start="403:30" pos:end="403:30"><literal type="number" pos:start="403:30" pos:end="403:30">1</literal></expr>:</case> <comment type="block" pos:start="403:33" pos:end="403:42">/* stlh */</comment>

                            <expr_stmt pos:start="405:29" pos:end="407:64"><expr pos:start="405:29" pos:end="407:63"><call pos:start="405:29" pos:end="407:63"><name pos:start="405:29" pos:end="405:45">gen_aa32_st16_iss</name><argument_list pos:start="405:46" pos:end="407:63">(<argument pos:start="405:47" pos:end="405:47"><expr pos:start="405:47" pos:end="405:47"><name pos:start="405:47" pos:end="405:47">s</name></expr></argument>, <argument pos:start="405:50" pos:end="405:52"><expr pos:start="405:50" pos:end="405:52"><name pos:start="405:50" pos:end="405:52">tmp</name></expr></argument>, <argument pos:start="405:55" pos:end="405:58"><expr pos:start="405:55" pos:end="405:58"><name pos:start="405:55" pos:end="405:58">addr</name></expr></argument>, <argument pos:start="405:61" pos:end="405:76"><expr pos:start="405:61" pos:end="405:76"><call pos:start="405:61" pos:end="405:76"><name pos:start="405:61" pos:end="405:73">get_mem_index</name><argument_list pos:start="405:74" pos:end="405:76">(<argument pos:start="405:75" pos:end="405:75"><expr pos:start="405:75" pos:end="405:75"><name pos:start="405:75" pos:end="405:75">s</name></expr></argument>)</argument_list></call></expr></argument>,

                                              <argument pos:start="407:47" pos:end="407:62"><expr pos:start="407:47" pos:end="407:62"><name pos:start="407:47" pos:end="407:48">rs</name> <operator pos:start="407:50" pos:end="407:50">|</operator> <name pos:start="407:52" pos:end="407:62">ISSIsAcqRel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="409:29" pos:end="409:34">break;</break>

                        <case pos:start="411:25" pos:end="411:31">case <expr pos:start="411:30" pos:end="411:30"><literal type="number" pos:start="411:30" pos:end="411:30">2</literal></expr>:</case> <comment type="block" pos:start="411:33" pos:end="411:41">/* stl */</comment>

                            <expr_stmt pos:start="413:29" pos:end="415:64"><expr pos:start="413:29" pos:end="415:63"><call pos:start="413:29" pos:end="415:63"><name pos:start="413:29" pos:end="413:45">gen_aa32_st32_iss</name><argument_list pos:start="413:46" pos:end="415:63">(<argument pos:start="413:47" pos:end="413:47"><expr pos:start="413:47" pos:end="413:47"><name pos:start="413:47" pos:end="413:47">s</name></expr></argument>, <argument pos:start="413:50" pos:end="413:52"><expr pos:start="413:50" pos:end="413:52"><name pos:start="413:50" pos:end="413:52">tmp</name></expr></argument>, <argument pos:start="413:55" pos:end="413:58"><expr pos:start="413:55" pos:end="413:58"><name pos:start="413:55" pos:end="413:58">addr</name></expr></argument>, <argument pos:start="413:61" pos:end="413:76"><expr pos:start="413:61" pos:end="413:76"><call pos:start="413:61" pos:end="413:76"><name pos:start="413:61" pos:end="413:73">get_mem_index</name><argument_list pos:start="413:74" pos:end="413:76">(<argument pos:start="413:75" pos:end="413:75"><expr pos:start="413:75" pos:end="413:75"><name pos:start="413:75" pos:end="413:75">s</name></expr></argument>)</argument_list></call></expr></argument>,

                                              <argument pos:start="415:47" pos:end="415:62"><expr pos:start="415:47" pos:end="415:62"><name pos:start="415:47" pos:end="415:48">rs</name> <operator pos:start="415:50" pos:end="415:50">|</operator> <name pos:start="415:52" pos:end="415:62">ISSIsAcqRel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="417:29" pos:end="417:34">break;</break>

                        <default pos:start="419:25" pos:end="419:32">default:</default>

                            <expr_stmt pos:start="421:29" pos:end="421:36"><expr pos:start="421:29" pos:end="421:35"><call pos:start="421:29" pos:end="421:35"><name pos:start="421:29" pos:end="421:33">abort</name><argument_list pos:start="421:34" pos:end="421:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="425:25" pos:end="425:47"><expr pos:start="425:25" pos:end="425:46"><call pos:start="425:25" pos:end="425:46"><name pos:start="425:25" pos:end="425:41">tcg_temp_free_i32</name><argument_list pos:start="425:42" pos:end="425:46">(<argument pos:start="425:43" pos:end="425:45"><expr pos:start="425:43" pos:end="425:45"><name pos:start="425:43" pos:end="425:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="429:19" pos:end="433:17">else if <condition pos:start="429:27" pos:end="429:44">(<expr pos:start="429:28" pos:end="429:43"><name pos:start="429:28" pos:end="429:31">insn</name> <operator pos:start="429:33" pos:end="429:33">&amp;</operator> <operator pos:start="429:35" pos:end="429:35">(</operator><literal type="number" pos:start="429:36" pos:end="429:36">1</literal> <operator pos:start="429:38" pos:end="429:39">&lt;&lt;</operator> <literal type="number" pos:start="429:41" pos:end="429:42">20</literal><operator pos:start="429:43" pos:end="429:43">)</operator></expr>)</condition> <block pos:start="429:46" pos:end="433:17">{<block_content pos:start="431:21" pos:end="431:60">

                    <expr_stmt pos:start="431:21" pos:end="431:60"><expr pos:start="431:21" pos:end="431:59"><call pos:start="431:21" pos:end="431:59"><name pos:start="431:21" pos:end="431:38">gen_load_exclusive</name><argument_list pos:start="431:39" pos:end="431:59">(<argument pos:start="431:40" pos:end="431:40"><expr pos:start="431:40" pos:end="431:40"><name pos:start="431:40" pos:end="431:40">s</name></expr></argument>, <argument pos:start="431:43" pos:end="431:44"><expr pos:start="431:43" pos:end="431:44"><name pos:start="431:43" pos:end="431:44">rs</name></expr></argument>, <argument pos:start="431:47" pos:end="431:48"><expr pos:start="431:47" pos:end="431:48"><name pos:start="431:47" pos:end="431:48">rd</name></expr></argument>, <argument pos:start="431:51" pos:end="431:54"><expr pos:start="431:51" pos:end="431:54"><name pos:start="431:51" pos:end="431:54">addr</name></expr></argument>, <argument pos:start="431:57" pos:end="431:58"><expr pos:start="431:57" pos:end="431:58"><name pos:start="431:57" pos:end="431:58">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="433:19" pos:end="437:17">else <block pos:start="433:24" pos:end="437:17">{<block_content pos:start="435:21" pos:end="435:65">

                    <expr_stmt pos:start="435:21" pos:end="435:65"><expr pos:start="435:21" pos:end="435:64"><call pos:start="435:21" pos:end="435:64"><name pos:start="435:21" pos:end="435:39">gen_store_exclusive</name><argument_list pos:start="435:40" pos:end="435:64">(<argument pos:start="435:41" pos:end="435:41"><expr pos:start="435:41" pos:end="435:41"><name pos:start="435:41" pos:end="435:41">s</name></expr></argument>, <argument pos:start="435:44" pos:end="435:45"><expr pos:start="435:44" pos:end="435:45"><name pos:start="435:44" pos:end="435:45">rm</name></expr></argument>, <argument pos:start="435:48" pos:end="435:49"><expr pos:start="435:48" pos:end="435:49"><name pos:start="435:48" pos:end="435:49">rs</name></expr></argument>, <argument pos:start="435:52" pos:end="435:53"><expr pos:start="435:52" pos:end="435:53"><name pos:start="435:52" pos:end="435:53">rd</name></expr></argument>, <argument pos:start="435:56" pos:end="435:59"><expr pos:start="435:56" pos:end="435:59"><name pos:start="435:56" pos:end="435:59">addr</name></expr></argument>, <argument pos:start="435:62" pos:end="435:63"><expr pos:start="435:62" pos:end="435:63"><name pos:start="435:62" pos:end="435:63">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="439:17" pos:end="439:40"><expr pos:start="439:17" pos:end="439:39"><call pos:start="439:17" pos:end="439:39"><name pos:start="439:17" pos:end="439:33">tcg_temp_free_i32</name><argument_list pos:start="439:34" pos:end="439:39">(<argument pos:start="439:35" pos:end="439:38"><expr pos:start="439:35" pos:end="439:38"><name pos:start="439:35" pos:end="439:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="443:11" pos:end="621:9">else <block pos:start="443:16" pos:end="621:9">{<block_content pos:start="447:13" pos:end="619:13">

            <comment type="block" pos:start="445:13" pos:end="445:49">/* Load/store multiple, RFE, SRS.  */</comment>

            <if_stmt pos:start="447:13" pos:end="619:13"><if pos:start="447:13" pos:end="513:13">if <condition pos:start="447:16" pos:end="447:57">(<expr pos:start="447:17" pos:end="447:56"><operator pos:start="447:17" pos:end="447:17">(</operator><operator pos:start="447:18" pos:end="447:18">(</operator><name pos:start="447:19" pos:end="447:22">insn</name> <operator pos:start="447:24" pos:end="447:25">&gt;&gt;</operator> <literal type="number" pos:start="447:27" pos:end="447:28">23</literal><operator pos:start="447:29" pos:end="447:29">)</operator> <operator pos:start="447:31" pos:end="447:31">&amp;</operator> <literal type="number" pos:start="447:33" pos:end="447:33">1</literal><operator pos:start="447:34" pos:end="447:34">)</operator> <operator pos:start="447:36" pos:end="447:37">==</operator> <operator pos:start="447:39" pos:end="447:39">(</operator><operator pos:start="447:40" pos:end="447:40">(</operator><name pos:start="447:41" pos:end="447:44">insn</name> <operator pos:start="447:46" pos:end="447:47">&gt;&gt;</operator> <literal type="number" pos:start="447:49" pos:end="447:50">24</literal><operator pos:start="447:51" pos:end="447:51">)</operator> <operator pos:start="447:53" pos:end="447:53">&amp;</operator> <literal type="number" pos:start="447:55" pos:end="447:55">1</literal><operator pos:start="447:56" pos:end="447:56">)</operator></expr>)</condition> <block pos:start="447:59" pos:end="513:13">{<block_content pos:start="451:17" pos:end="511:17">

                <comment type="block" pos:start="449:17" pos:end="449:74">/* RFE, SRS: not available in user mode or on M profile */</comment>

                <if_stmt pos:start="451:17" pos:end="455:17"><if pos:start="451:17" pos:end="455:17">if <condition pos:start="451:20" pos:end="451:67">(<expr pos:start="451:21" pos:end="451:66"><call pos:start="451:21" pos:end="451:30"><name pos:start="451:21" pos:end="451:27">IS_USER</name><argument_list pos:start="451:28" pos:end="451:30">(<argument pos:start="451:29" pos:end="451:29"><expr pos:start="451:29" pos:end="451:29"><name pos:start="451:29" pos:end="451:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="451:32" pos:end="451:33">||</operator> <call pos:start="451:35" pos:end="451:66"><name pos:start="451:35" pos:end="451:48">arm_dc_feature</name><argument_list pos:start="451:49" pos:end="451:66">(<argument pos:start="451:50" pos:end="451:50"><expr pos:start="451:50" pos:end="451:50"><name pos:start="451:50" pos:end="451:50">s</name></expr></argument>, <argument pos:start="451:53" pos:end="451:65"><expr pos:start="451:53" pos:end="451:65"><name pos:start="451:53" pos:end="451:65">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="451:69" pos:end="455:17">{<block_content pos:start="453:21" pos:end="453:36">

                    <goto pos:start="453:21" pos:end="453:36">goto <name pos:start="453:26" pos:end="453:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="457:17" pos:end="511:17"><if pos:start="457:17" pos:end="503:17">if <condition pos:start="457:20" pos:end="457:37">(<expr pos:start="457:21" pos:end="457:36"><name pos:start="457:21" pos:end="457:24">insn</name> <operator pos:start="457:26" pos:end="457:26">&amp;</operator> <operator pos:start="457:28" pos:end="457:28">(</operator><literal type="number" pos:start="457:29" pos:end="457:29">1</literal> <operator pos:start="457:31" pos:end="457:32">&lt;&lt;</operator> <literal type="number" pos:start="457:34" pos:end="457:35">20</literal><operator pos:start="457:36" pos:end="457:36">)</operator></expr>)</condition> <block pos:start="457:39" pos:end="503:17">{<block_content pos:start="461:21" pos:end="501:42">

                    <comment type="block" pos:start="459:21" pos:end="459:29">/* rfe */</comment>

                    <expr_stmt pos:start="461:21" pos:end="461:43"><expr pos:start="461:21" pos:end="461:42"><name pos:start="461:21" pos:end="461:24">addr</name> <operator pos:start="461:26" pos:end="461:26">=</operator> <call pos:start="461:28" pos:end="461:42"><name pos:start="461:28" pos:end="461:35">load_reg</name><argument_list pos:start="461:36" pos:end="461:42">(<argument pos:start="461:37" pos:end="461:37"><expr pos:start="461:37" pos:end="461:37"><name pos:start="461:37" pos:end="461:37">s</name></expr></argument>, <argument pos:start="461:40" pos:end="461:41"><expr pos:start="461:40" pos:end="461:41"><name pos:start="461:40" pos:end="461:41">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="463:21" pos:end="465:57"><if pos:start="463:21" pos:end="465:57">if <condition pos:start="463:24" pos:end="463:48">(<expr pos:start="463:25" pos:end="463:47"><operator pos:start="463:25" pos:end="463:25">(</operator><name pos:start="463:26" pos:end="463:29">insn</name> <operator pos:start="463:31" pos:end="463:31">&amp;</operator> <operator pos:start="463:33" pos:end="463:33">(</operator><literal type="number" pos:start="463:34" pos:end="463:34">1</literal> <operator pos:start="463:36" pos:end="463:37">&lt;&lt;</operator> <literal type="number" pos:start="463:39" pos:end="463:40">24</literal><operator pos:start="463:41" pos:end="463:41">)</operator><operator pos:start="463:42" pos:end="463:42">)</operator> <operator pos:start="463:44" pos:end="463:45">==</operator> <literal type="number" pos:start="463:47" pos:end="463:47">0</literal></expr>)</condition><block type="pseudo" pos:start="465:25" pos:end="465:57"><block_content pos:start="465:25" pos:end="465:57">

                        <expr_stmt pos:start="465:25" pos:end="465:57"><expr pos:start="465:25" pos:end="465:56"><call pos:start="465:25" pos:end="465:56"><name pos:start="465:25" pos:end="465:40">tcg_gen_addi_i32</name><argument_list pos:start="465:41" pos:end="465:56">(<argument pos:start="465:42" pos:end="465:45"><expr pos:start="465:42" pos:end="465:45"><name pos:start="465:42" pos:end="465:45">addr</name></expr></argument>, <argument pos:start="465:48" pos:end="465:51"><expr pos:start="465:48" pos:end="465:51"><name pos:start="465:48" pos:end="465:51">addr</name></expr></argument>, <argument pos:start="465:54" pos:end="465:55"><expr pos:start="465:54" pos:end="465:55"><operator pos:start="465:54" pos:end="465:54">-</operator><literal type="number" pos:start="465:55" pos:end="465:55">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="block" pos:start="467:21" pos:end="467:63">/* Load PC into tmp and CPSR into tmp2.  */</comment>

                    <expr_stmt pos:start="469:21" pos:end="469:45"><expr pos:start="469:21" pos:end="469:44"><name pos:start="469:21" pos:end="469:23">tmp</name> <operator pos:start="469:25" pos:end="469:25">=</operator> <call pos:start="469:27" pos:end="469:44"><name pos:start="469:27" pos:end="469:42">tcg_temp_new_i32</name><argument_list pos:start="469:43" pos:end="469:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="471:21" pos:end="471:67"><expr pos:start="471:21" pos:end="471:66"><call pos:start="471:21" pos:end="471:66"><name pos:start="471:21" pos:end="471:34">gen_aa32_ld32u</name><argument_list pos:start="471:35" pos:end="471:66">(<argument pos:start="471:36" pos:end="471:36"><expr pos:start="471:36" pos:end="471:36"><name pos:start="471:36" pos:end="471:36">s</name></expr></argument>, <argument pos:start="471:39" pos:end="471:41"><expr pos:start="471:39" pos:end="471:41"><name pos:start="471:39" pos:end="471:41">tmp</name></expr></argument>, <argument pos:start="471:44" pos:end="471:47"><expr pos:start="471:44" pos:end="471:47"><name pos:start="471:44" pos:end="471:47">addr</name></expr></argument>, <argument pos:start="471:50" pos:end="471:65"><expr pos:start="471:50" pos:end="471:65"><call pos:start="471:50" pos:end="471:65"><name pos:start="471:50" pos:end="471:62">get_mem_index</name><argument_list pos:start="471:63" pos:end="471:65">(<argument pos:start="471:64" pos:end="471:64"><expr pos:start="471:64" pos:end="471:64"><name pos:start="471:64" pos:end="471:64">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="473:21" pos:end="473:52"><expr pos:start="473:21" pos:end="473:51"><call pos:start="473:21" pos:end="473:51"><name pos:start="473:21" pos:end="473:36">tcg_gen_addi_i32</name><argument_list pos:start="473:37" pos:end="473:51">(<argument pos:start="473:38" pos:end="473:41"><expr pos:start="473:38" pos:end="473:41"><name pos:start="473:38" pos:end="473:41">addr</name></expr></argument>, <argument pos:start="473:44" pos:end="473:47"><expr pos:start="473:44" pos:end="473:47"><name pos:start="473:44" pos:end="473:47">addr</name></expr></argument>, <argument pos:start="473:50" pos:end="473:50"><expr pos:start="473:50" pos:end="473:50"><literal type="number" pos:start="473:50" pos:end="473:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="475:21" pos:end="475:46"><expr pos:start="475:21" pos:end="475:45"><name pos:start="475:21" pos:end="475:24">tmp2</name> <operator pos:start="475:26" pos:end="475:26">=</operator> <call pos:start="475:28" pos:end="475:45"><name pos:start="475:28" pos:end="475:43">tcg_temp_new_i32</name><argument_list pos:start="475:44" pos:end="475:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="477:21" pos:end="477:68"><expr pos:start="477:21" pos:end="477:67"><call pos:start="477:21" pos:end="477:67"><name pos:start="477:21" pos:end="477:34">gen_aa32_ld32u</name><argument_list pos:start="477:35" pos:end="477:67">(<argument pos:start="477:36" pos:end="477:36"><expr pos:start="477:36" pos:end="477:36"><name pos:start="477:36" pos:end="477:36">s</name></expr></argument>, <argument pos:start="477:39" pos:end="477:42"><expr pos:start="477:39" pos:end="477:42"><name pos:start="477:39" pos:end="477:42">tmp2</name></expr></argument>, <argument pos:start="477:45" pos:end="477:48"><expr pos:start="477:45" pos:end="477:48"><name pos:start="477:45" pos:end="477:48">addr</name></expr></argument>, <argument pos:start="477:51" pos:end="477:66"><expr pos:start="477:51" pos:end="477:66"><call pos:start="477:51" pos:end="477:66"><name pos:start="477:51" pos:end="477:63">get_mem_index</name><argument_list pos:start="477:64" pos:end="477:66">(<argument pos:start="477:65" pos:end="477:65"><expr pos:start="477:65" pos:end="477:65"><name pos:start="477:65" pos:end="477:65">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="479:21" pos:end="499:21"><if pos:start="479:21" pos:end="495:21">if <condition pos:start="479:24" pos:end="479:41">(<expr pos:start="479:25" pos:end="479:40"><name pos:start="479:25" pos:end="479:28">insn</name> <operator pos:start="479:30" pos:end="479:30">&amp;</operator> <operator pos:start="479:32" pos:end="479:32">(</operator><literal type="number" pos:start="479:33" pos:end="479:33">1</literal> <operator pos:start="479:35" pos:end="479:36">&lt;&lt;</operator> <literal type="number" pos:start="479:38" pos:end="479:39">21</literal><operator pos:start="479:40" pos:end="479:40">)</operator></expr>)</condition> <block pos:start="479:43" pos:end="495:21">{<block_content pos:start="483:25" pos:end="493:47">

                        <comment type="block" pos:start="481:25" pos:end="481:46">/* Base writeback.  */</comment>

                        <if_stmt pos:start="483:25" pos:end="491:25"><if pos:start="483:25" pos:end="487:25">if <condition pos:start="483:28" pos:end="483:45">(<expr pos:start="483:29" pos:end="483:44"><name pos:start="483:29" pos:end="483:32">insn</name> <operator pos:start="483:34" pos:end="483:34">&amp;</operator> <operator pos:start="483:36" pos:end="483:36">(</operator><literal type="number" pos:start="483:37" pos:end="483:37">1</literal> <operator pos:start="483:39" pos:end="483:40">&lt;&lt;</operator> <literal type="number" pos:start="483:42" pos:end="483:43">24</literal><operator pos:start="483:44" pos:end="483:44">)</operator></expr>)</condition> <block pos:start="483:47" pos:end="487:25">{<block_content pos:start="485:29" pos:end="485:60">

                            <expr_stmt pos:start="485:29" pos:end="485:60"><expr pos:start="485:29" pos:end="485:59"><call pos:start="485:29" pos:end="485:59"><name pos:start="485:29" pos:end="485:44">tcg_gen_addi_i32</name><argument_list pos:start="485:45" pos:end="485:59">(<argument pos:start="485:46" pos:end="485:49"><expr pos:start="485:46" pos:end="485:49"><name pos:start="485:46" pos:end="485:49">addr</name></expr></argument>, <argument pos:start="485:52" pos:end="485:55"><expr pos:start="485:52" pos:end="485:55"><name pos:start="485:52" pos:end="485:55">addr</name></expr></argument>, <argument pos:start="485:58" pos:end="485:58"><expr pos:start="485:58" pos:end="485:58"><literal type="number" pos:start="485:58" pos:end="485:58">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="487:27" pos:end="491:25">else <block pos:start="487:32" pos:end="491:25">{<block_content pos:start="489:29" pos:end="489:61">

                            <expr_stmt pos:start="489:29" pos:end="489:61"><expr pos:start="489:29" pos:end="489:60"><call pos:start="489:29" pos:end="489:60"><name pos:start="489:29" pos:end="489:44">tcg_gen_addi_i32</name><argument_list pos:start="489:45" pos:end="489:60">(<argument pos:start="489:46" pos:end="489:49"><expr pos:start="489:46" pos:end="489:49"><name pos:start="489:46" pos:end="489:49">addr</name></expr></argument>, <argument pos:start="489:52" pos:end="489:55"><expr pos:start="489:52" pos:end="489:55"><name pos:start="489:52" pos:end="489:55">addr</name></expr></argument>, <argument pos:start="489:58" pos:end="489:59"><expr pos:start="489:58" pos:end="489:59"><operator pos:start="489:58" pos:end="489:58">-</operator><literal type="number" pos:start="489:59" pos:end="489:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="493:25" pos:end="493:47"><expr pos:start="493:25" pos:end="493:46"><call pos:start="493:25" pos:end="493:46"><name pos:start="493:25" pos:end="493:33">store_reg</name><argument_list pos:start="493:34" pos:end="493:46">(<argument pos:start="493:35" pos:end="493:35"><expr pos:start="493:35" pos:end="493:35"><name pos:start="493:35" pos:end="493:35">s</name></expr></argument>, <argument pos:start="493:38" pos:end="493:39"><expr pos:start="493:38" pos:end="493:39"><name pos:start="493:38" pos:end="493:39">rn</name></expr></argument>, <argument pos:start="493:42" pos:end="493:45"><expr pos:start="493:42" pos:end="493:45"><name pos:start="493:42" pos:end="493:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="495:23" pos:end="499:21">else <block pos:start="495:28" pos:end="499:21">{<block_content pos:start="497:25" pos:end="497:48">

                        <expr_stmt pos:start="497:25" pos:end="497:48"><expr pos:start="497:25" pos:end="497:47"><call pos:start="497:25" pos:end="497:47"><name pos:start="497:25" pos:end="497:41">tcg_temp_free_i32</name><argument_list pos:start="497:42" pos:end="497:47">(<argument pos:start="497:43" pos:end="497:46"><expr pos:start="497:43" pos:end="497:46"><name pos:start="497:43" pos:end="497:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="501:21" pos:end="501:42"><expr pos:start="501:21" pos:end="501:41"><call pos:start="501:21" pos:end="501:41"><name pos:start="501:21" pos:end="501:27">gen_rfe</name><argument_list pos:start="501:28" pos:end="501:41">(<argument pos:start="501:29" pos:end="501:29"><expr pos:start="501:29" pos:end="501:29"><name pos:start="501:29" pos:end="501:29">s</name></expr></argument>, <argument pos:start="501:32" pos:end="501:34"><expr pos:start="501:32" pos:end="501:34"><name pos:start="501:32" pos:end="501:34">tmp</name></expr></argument>, <argument pos:start="501:37" pos:end="501:40"><expr pos:start="501:37" pos:end="501:40"><name pos:start="501:37" pos:end="501:40">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="503:19" pos:end="511:17">else <block pos:start="503:24" pos:end="511:17">{<block_content pos:start="507:21" pos:end="509:46">

                    <comment type="block" pos:start="505:21" pos:end="505:29">/* srs */</comment>

                    <expr_stmt pos:start="507:21" pos:end="509:46"><expr pos:start="507:21" pos:end="509:45"><call pos:start="507:21" pos:end="509:45"><name pos:start="507:21" pos:end="507:27">gen_srs</name><argument_list pos:start="507:28" pos:end="509:45">(<argument pos:start="507:29" pos:end="507:29"><expr pos:start="507:29" pos:end="507:29"><name pos:start="507:29" pos:end="507:29">s</name></expr></argument>, <argument pos:start="507:32" pos:end="507:44"><expr pos:start="507:32" pos:end="507:44"><operator pos:start="507:32" pos:end="507:32">(</operator><name pos:start="507:33" pos:end="507:36">insn</name> <operator pos:start="507:38" pos:end="507:38">&amp;</operator> <literal type="number" pos:start="507:40" pos:end="507:43">0x1f</literal><operator pos:start="507:44" pos:end="507:44">)</operator></expr></argument>, <argument pos:start="507:47" pos:end="507:72"><expr pos:start="507:47" pos:end="507:72"><ternary pos:start="507:47" pos:end="507:72"><condition pos:start="507:47" pos:end="507:66"><expr pos:start="507:47" pos:end="507:64"><operator pos:start="507:47" pos:end="507:47">(</operator><name pos:start="507:48" pos:end="507:51">insn</name> <operator pos:start="507:53" pos:end="507:53">&amp;</operator> <operator pos:start="507:55" pos:end="507:55">(</operator><literal type="number" pos:start="507:56" pos:end="507:56">1</literal> <operator pos:start="507:58" pos:end="507:59">&lt;&lt;</operator> <literal type="number" pos:start="507:61" pos:end="507:62">24</literal><operator pos:start="507:63" pos:end="507:63">)</operator><operator pos:start="507:64" pos:end="507:64">)</operator></expr> ?</condition><then pos:start="507:68" pos:end="507:68"> <expr pos:start="507:68" pos:end="507:68"><literal type="number" pos:start="507:68" pos:end="507:68">1</literal></expr> </then><else pos:start="507:70" pos:end="507:72">: <expr pos:start="507:72" pos:end="507:72"><literal type="number" pos:start="507:72" pos:end="507:72">2</literal></expr></else></ternary></expr></argument>,

                            <argument pos:start="509:29" pos:end="509:44"><expr pos:start="509:29" pos:end="509:44"><name pos:start="509:29" pos:end="509:32">insn</name> <operator pos:start="509:34" pos:end="509:34">&amp;</operator> <operator pos:start="509:36" pos:end="509:36">(</operator><literal type="number" pos:start="509:37" pos:end="509:37">1</literal> <operator pos:start="509:39" pos:end="509:40">&lt;&lt;</operator> <literal type="number" pos:start="509:42" pos:end="509:43">21</literal><operator pos:start="509:44" pos:end="509:44">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="513:15" pos:end="619:13">else <block pos:start="513:20" pos:end="619:13">{<block_content pos:start="515:17" pos:end="617:17">

                <decl_stmt pos:start="515:17" pos:end="515:39"><decl pos:start="515:17" pos:end="515:21"><type pos:start="515:17" pos:end="515:19"><name pos:start="515:17" pos:end="515:19">int</name></type> <name pos:start="515:21" pos:end="515:21">i</name></decl>, <decl pos:start="515:24" pos:end="515:38"><type ref="prev" pos:start="515:17" pos:end="515:19"/><name pos:start="515:24" pos:end="515:34">loaded_base</name> <init pos:start="515:36" pos:end="515:38">= <expr pos:start="515:38" pos:end="515:38"><literal type="number" pos:start="515:38" pos:end="515:38">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="517:17" pos:end="517:36"><decl pos:start="517:17" pos:end="517:35"><type pos:start="517:17" pos:end="517:24"><name pos:start="517:17" pos:end="517:24">TCGv_i32</name></type> <name pos:start="517:26" pos:end="517:35">loaded_var</name></decl>;</decl_stmt>

                <comment type="block" pos:start="519:17" pos:end="519:43">/* Load/store multiple.  */</comment>

                <expr_stmt pos:start="521:17" pos:end="521:39"><expr pos:start="521:17" pos:end="521:38"><name pos:start="521:17" pos:end="521:20">addr</name> <operator pos:start="521:22" pos:end="521:22">=</operator> <call pos:start="521:24" pos:end="521:38"><name pos:start="521:24" pos:end="521:31">load_reg</name><argument_list pos:start="521:32" pos:end="521:38">(<argument pos:start="521:33" pos:end="521:33"><expr pos:start="521:33" pos:end="521:33"><name pos:start="521:33" pos:end="521:33">s</name></expr></argument>, <argument pos:start="521:36" pos:end="521:37"><expr pos:start="521:36" pos:end="521:37"><name pos:start="521:36" pos:end="521:37">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="523:17" pos:end="523:27"><expr pos:start="523:17" pos:end="523:26"><name pos:start="523:17" pos:end="523:22">offset</name> <operator pos:start="523:24" pos:end="523:24">=</operator> <literal type="number" pos:start="523:26" pos:end="523:26">0</literal></expr>;</expr_stmt>

                <for pos:start="525:17" pos:end="531:17">for <control pos:start="525:21" pos:end="525:40">(<init pos:start="525:22" pos:end="525:27"><expr pos:start="525:22" pos:end="525:26"><name pos:start="525:22" pos:end="525:22">i</name> <operator pos:start="525:24" pos:end="525:24">=</operator> <literal type="number" pos:start="525:26" pos:end="525:26">0</literal></expr>;</init> <condition pos:start="525:29" pos:end="525:35"><expr pos:start="525:29" pos:end="525:34"><name pos:start="525:29" pos:end="525:29">i</name> <operator pos:start="525:31" pos:end="525:31">&lt;</operator> <literal type="number" pos:start="525:33" pos:end="525:34">16</literal></expr>;</condition> <incr pos:start="525:37" pos:end="525:39"><expr pos:start="525:37" pos:end="525:39"><name pos:start="525:37" pos:end="525:37">i</name><operator pos:start="525:38" pos:end="525:39">++</operator></expr></incr>)</control> <block pos:start="525:42" pos:end="531:17">{<block_content pos:start="527:21" pos:end="529:36">

                    <if_stmt pos:start="527:21" pos:end="529:36"><if pos:start="527:21" pos:end="529:36">if <condition pos:start="527:24" pos:end="527:40">(<expr pos:start="527:25" pos:end="527:39"><name pos:start="527:25" pos:end="527:28">insn</name> <operator pos:start="527:30" pos:end="527:30">&amp;</operator> <operator pos:start="527:32" pos:end="527:32">(</operator><literal type="number" pos:start="527:33" pos:end="527:33">1</literal> <operator pos:start="527:35" pos:end="527:36">&lt;&lt;</operator> <name pos:start="527:38" pos:end="527:38">i</name><operator pos:start="527:39" pos:end="527:39">)</operator></expr>)</condition><block type="pseudo" pos:start="529:25" pos:end="529:36"><block_content pos:start="529:25" pos:end="529:36">

                        <expr_stmt pos:start="529:25" pos:end="529:36"><expr pos:start="529:25" pos:end="529:35"><name pos:start="529:25" pos:end="529:30">offset</name> <operator pos:start="529:32" pos:end="529:33">+=</operator> <literal type="number" pos:start="529:35" pos:end="529:35">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="533:17" pos:end="537:17"><if pos:start="533:17" pos:end="537:17">if <condition pos:start="533:20" pos:end="533:37">(<expr pos:start="533:21" pos:end="533:36"><name pos:start="533:21" pos:end="533:24">insn</name> <operator pos:start="533:26" pos:end="533:26">&amp;</operator> <operator pos:start="533:28" pos:end="533:28">(</operator><literal type="number" pos:start="533:29" pos:end="533:29">1</literal> <operator pos:start="533:31" pos:end="533:32">&lt;&lt;</operator> <literal type="number" pos:start="533:34" pos:end="533:35">24</literal><operator pos:start="533:36" pos:end="533:36">)</operator></expr>)</condition> <block pos:start="533:39" pos:end="537:17">{<block_content pos:start="535:21" pos:end="535:58">

                    <expr_stmt pos:start="535:21" pos:end="535:58"><expr pos:start="535:21" pos:end="535:57"><call pos:start="535:21" pos:end="535:57"><name pos:start="535:21" pos:end="535:36">tcg_gen_addi_i32</name><argument_list pos:start="535:37" pos:end="535:57">(<argument pos:start="535:38" pos:end="535:41"><expr pos:start="535:38" pos:end="535:41"><name pos:start="535:38" pos:end="535:41">addr</name></expr></argument>, <argument pos:start="535:44" pos:end="535:47"><expr pos:start="535:44" pos:end="535:47"><name pos:start="535:44" pos:end="535:47">addr</name></expr></argument>, <argument pos:start="535:50" pos:end="535:56"><expr pos:start="535:50" pos:end="535:56"><operator pos:start="535:50" pos:end="535:50">-</operator><name pos:start="535:51" pos:end="535:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="541:17" pos:end="541:44"><expr pos:start="541:17" pos:end="541:43"><call pos:start="541:17" pos:end="541:43"><name pos:start="541:17" pos:end="541:31">TCGV_UNUSED_I32</name><argument_list pos:start="541:32" pos:end="541:43">(<argument pos:start="541:33" pos:end="541:42"><expr pos:start="541:33" pos:end="541:42"><name pos:start="541:33" pos:end="541:42">loaded_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="543:17" pos:end="587:17">for <control pos:start="543:21" pos:end="543:40">(<init pos:start="543:22" pos:end="543:27"><expr pos:start="543:22" pos:end="543:26"><name pos:start="543:22" pos:end="543:22">i</name> <operator pos:start="543:24" pos:end="543:24">=</operator> <literal type="number" pos:start="543:26" pos:end="543:26">0</literal></expr>;</init> <condition pos:start="543:29" pos:end="543:35"><expr pos:start="543:29" pos:end="543:34"><name pos:start="543:29" pos:end="543:29">i</name> <operator pos:start="543:31" pos:end="543:31">&lt;</operator> <literal type="number" pos:start="543:33" pos:end="543:34">16</literal></expr>;</condition> <incr pos:start="543:37" pos:end="543:39"><expr pos:start="543:37" pos:end="543:39"><name pos:start="543:37" pos:end="543:37">i</name><operator pos:start="543:38" pos:end="543:39">++</operator></expr></incr>)</control> <block pos:start="543:42" pos:end="587:17">{<block_content pos:start="545:21" pos:end="585:52">

                    <if_stmt pos:start="545:21" pos:end="547:33"><if pos:start="545:21" pos:end="547:33">if <condition pos:start="545:24" pos:end="545:47">(<expr pos:start="545:25" pos:end="545:46"><operator pos:start="545:25" pos:end="545:25">(</operator><name pos:start="545:26" pos:end="545:29">insn</name> <operator pos:start="545:31" pos:end="545:31">&amp;</operator> <operator pos:start="545:33" pos:end="545:33">(</operator><literal type="number" pos:start="545:34" pos:end="545:34">1</literal> <operator pos:start="545:36" pos:end="545:37">&lt;&lt;</operator> <name pos:start="545:39" pos:end="545:39">i</name><operator pos:start="545:40" pos:end="545:40">)</operator><operator pos:start="545:41" pos:end="545:41">)</operator> <operator pos:start="545:43" pos:end="545:44">==</operator> <literal type="number" pos:start="545:46" pos:end="545:46">0</literal></expr>)</condition><block type="pseudo" pos:start="547:25" pos:end="547:33"><block_content pos:start="547:25" pos:end="547:33">

                        <continue pos:start="547:25" pos:end="547:33">continue;</continue></block_content></block></if></if_stmt>

                    <if_stmt pos:start="549:21" pos:end="583:21"><if pos:start="549:21" pos:end="573:21">if <condition pos:start="549:24" pos:end="549:41">(<expr pos:start="549:25" pos:end="549:40"><name pos:start="549:25" pos:end="549:28">insn</name> <operator pos:start="549:30" pos:end="549:30">&amp;</operator> <operator pos:start="549:32" pos:end="549:32">(</operator><literal type="number" pos:start="549:33" pos:end="549:33">1</literal> <operator pos:start="549:35" pos:end="549:36">&lt;&lt;</operator> <literal type="number" pos:start="549:38" pos:end="549:39">20</literal><operator pos:start="549:40" pos:end="549:40">)</operator></expr>)</condition> <block pos:start="549:43" pos:end="573:21">{<block_content pos:start="553:25" pos:end="571:25">

                        <comment type="block" pos:start="551:25" pos:end="551:36">/* Load.  */</comment>

                        <expr_stmt pos:start="553:25" pos:end="553:49"><expr pos:start="553:25" pos:end="553:48"><name pos:start="553:25" pos:end="553:27">tmp</name> <operator pos:start="553:29" pos:end="553:29">=</operator> <call pos:start="553:31" pos:end="553:48"><name pos:start="553:31" pos:end="553:46">tcg_temp_new_i32</name><argument_list pos:start="553:47" pos:end="553:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="555:25" pos:end="555:71"><expr pos:start="555:25" pos:end="555:70"><call pos:start="555:25" pos:end="555:70"><name pos:start="555:25" pos:end="555:38">gen_aa32_ld32u</name><argument_list pos:start="555:39" pos:end="555:70">(<argument pos:start="555:40" pos:end="555:40"><expr pos:start="555:40" pos:end="555:40"><name pos:start="555:40" pos:end="555:40">s</name></expr></argument>, <argument pos:start="555:43" pos:end="555:45"><expr pos:start="555:43" pos:end="555:45"><name pos:start="555:43" pos:end="555:45">tmp</name></expr></argument>, <argument pos:start="555:48" pos:end="555:51"><expr pos:start="555:48" pos:end="555:51"><name pos:start="555:48" pos:end="555:51">addr</name></expr></argument>, <argument pos:start="555:54" pos:end="555:69"><expr pos:start="555:54" pos:end="555:69"><call pos:start="555:54" pos:end="555:69"><name pos:start="555:54" pos:end="555:66">get_mem_index</name><argument_list pos:start="555:67" pos:end="555:69">(<argument pos:start="555:68" pos:end="555:68"><expr pos:start="555:68" pos:end="555:68"><name pos:start="555:68" pos:end="555:68">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="557:25" pos:end="571:25"><if pos:start="557:25" pos:end="561:25">if <condition pos:start="557:28" pos:end="557:36">(<expr pos:start="557:29" pos:end="557:35"><name pos:start="557:29" pos:end="557:29">i</name> <operator pos:start="557:31" pos:end="557:32">==</operator> <literal type="number" pos:start="557:34" pos:end="557:35">15</literal></expr>)</condition> <block pos:start="557:38" pos:end="561:25">{<block_content pos:start="559:29" pos:end="559:50">

                            <expr_stmt pos:start="559:29" pos:end="559:50"><expr pos:start="559:29" pos:end="559:49"><call pos:start="559:29" pos:end="559:49"><name pos:start="559:29" pos:end="559:41">gen_bx_excret</name><argument_list pos:start="559:42" pos:end="559:49">(<argument pos:start="559:43" pos:end="559:43"><expr pos:start="559:43" pos:end="559:43"><name pos:start="559:43" pos:end="559:43">s</name></expr></argument>, <argument pos:start="559:46" pos:end="559:48"><expr pos:start="559:46" pos:end="559:48"><name pos:start="559:46" pos:end="559:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="561:27" pos:end="567:25">else if <condition pos:start="561:35" pos:end="561:43">(<expr pos:start="561:36" pos:end="561:42"><name pos:start="561:36" pos:end="561:36">i</name> <operator pos:start="561:38" pos:end="561:39">==</operator> <name pos:start="561:41" pos:end="561:42">rn</name></expr>)</condition> <block pos:start="561:45" pos:end="567:25">{<block_content pos:start="563:29" pos:end="565:44">

                            <expr_stmt pos:start="563:29" pos:end="563:45"><expr pos:start="563:29" pos:end="563:44"><name pos:start="563:29" pos:end="563:38">loaded_var</name> <operator pos:start="563:40" pos:end="563:40">=</operator> <name pos:start="563:42" pos:end="563:44">tmp</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="565:29" pos:end="565:44"><expr pos:start="565:29" pos:end="565:43"><name pos:start="565:29" pos:end="565:39">loaded_base</name> <operator pos:start="565:41" pos:end="565:41">=</operator> <literal type="number" pos:start="565:43" pos:end="565:43">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="567:27" pos:end="571:25">else <block pos:start="567:32" pos:end="571:25">{<block_content pos:start="569:29" pos:end="569:49">

                            <expr_stmt pos:start="569:29" pos:end="569:49"><expr pos:start="569:29" pos:end="569:48"><call pos:start="569:29" pos:end="569:48"><name pos:start="569:29" pos:end="569:37">store_reg</name><argument_list pos:start="569:38" pos:end="569:48">(<argument pos:start="569:39" pos:end="569:39"><expr pos:start="569:39" pos:end="569:39"><name pos:start="569:39" pos:end="569:39">s</name></expr></argument>, <argument pos:start="569:42" pos:end="569:42"><expr pos:start="569:42" pos:end="569:42"><name pos:start="569:42" pos:end="569:42">i</name></expr></argument>, <argument pos:start="569:45" pos:end="569:47"><expr pos:start="569:45" pos:end="569:47"><name pos:start="569:45" pos:end="569:47">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="573:23" pos:end="583:21">else <block pos:start="573:28" pos:end="583:21">{<block_content pos:start="577:25" pos:end="581:47">

                        <comment type="block" pos:start="575:25" pos:end="575:37">/* Store.  */</comment>

                        <expr_stmt pos:start="577:25" pos:end="577:45"><expr pos:start="577:25" pos:end="577:44"><name pos:start="577:25" pos:end="577:27">tmp</name> <operator pos:start="577:29" pos:end="577:29">=</operator> <call pos:start="577:31" pos:end="577:44"><name pos:start="577:31" pos:end="577:38">load_reg</name><argument_list pos:start="577:39" pos:end="577:44">(<argument pos:start="577:40" pos:end="577:40"><expr pos:start="577:40" pos:end="577:40"><name pos:start="577:40" pos:end="577:40">s</name></expr></argument>, <argument pos:start="577:43" pos:end="577:43"><expr pos:start="577:43" pos:end="577:43"><name pos:start="577:43" pos:end="577:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="579:25" pos:end="579:70"><expr pos:start="579:25" pos:end="579:69"><call pos:start="579:25" pos:end="579:69"><name pos:start="579:25" pos:end="579:37">gen_aa32_st32</name><argument_list pos:start="579:38" pos:end="579:69">(<argument pos:start="579:39" pos:end="579:39"><expr pos:start="579:39" pos:end="579:39"><name pos:start="579:39" pos:end="579:39">s</name></expr></argument>, <argument pos:start="579:42" pos:end="579:44"><expr pos:start="579:42" pos:end="579:44"><name pos:start="579:42" pos:end="579:44">tmp</name></expr></argument>, <argument pos:start="579:47" pos:end="579:50"><expr pos:start="579:47" pos:end="579:50"><name pos:start="579:47" pos:end="579:50">addr</name></expr></argument>, <argument pos:start="579:53" pos:end="579:68"><expr pos:start="579:53" pos:end="579:68"><call pos:start="579:53" pos:end="579:68"><name pos:start="579:53" pos:end="579:65">get_mem_index</name><argument_list pos:start="579:66" pos:end="579:68">(<argument pos:start="579:67" pos:end="579:67"><expr pos:start="579:67" pos:end="579:67"><name pos:start="579:67" pos:end="579:67">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="581:25" pos:end="581:47"><expr pos:start="581:25" pos:end="581:46"><call pos:start="581:25" pos:end="581:46"><name pos:start="581:25" pos:end="581:41">tcg_temp_free_i32</name><argument_list pos:start="581:42" pos:end="581:46">(<argument pos:start="581:43" pos:end="581:45"><expr pos:start="581:43" pos:end="581:45"><name pos:start="581:43" pos:end="581:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="585:21" pos:end="585:52"><expr pos:start="585:21" pos:end="585:51"><call pos:start="585:21" pos:end="585:51"><name pos:start="585:21" pos:end="585:36">tcg_gen_addi_i32</name><argument_list pos:start="585:37" pos:end="585:51">(<argument pos:start="585:38" pos:end="585:41"><expr pos:start="585:38" pos:end="585:41"><name pos:start="585:38" pos:end="585:41">addr</name></expr></argument>, <argument pos:start="585:44" pos:end="585:47"><expr pos:start="585:44" pos:end="585:47"><name pos:start="585:44" pos:end="585:47">addr</name></expr></argument>, <argument pos:start="585:50" pos:end="585:50"><expr pos:start="585:50" pos:end="585:50"><literal type="number" pos:start="585:50" pos:end="585:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <if_stmt pos:start="589:17" pos:end="593:17"><if pos:start="589:17" pos:end="593:17">if <condition pos:start="589:20" pos:end="589:32">(<expr pos:start="589:21" pos:end="589:31"><name pos:start="589:21" pos:end="589:31">loaded_base</name></expr>)</condition> <block pos:start="589:34" pos:end="593:17">{<block_content pos:start="591:21" pos:end="591:49">

                    <expr_stmt pos:start="591:21" pos:end="591:49"><expr pos:start="591:21" pos:end="591:48"><call pos:start="591:21" pos:end="591:48"><name pos:start="591:21" pos:end="591:29">store_reg</name><argument_list pos:start="591:30" pos:end="591:48">(<argument pos:start="591:31" pos:end="591:31"><expr pos:start="591:31" pos:end="591:31"><name pos:start="591:31" pos:end="591:31">s</name></expr></argument>, <argument pos:start="591:34" pos:end="591:35"><expr pos:start="591:34" pos:end="591:35"><name pos:start="591:34" pos:end="591:35">rn</name></expr></argument>, <argument pos:start="591:38" pos:end="591:47"><expr pos:start="591:38" pos:end="591:47"><name pos:start="591:38" pos:end="591:47">loaded_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="595:17" pos:end="617:17"><if pos:start="595:17" pos:end="613:17">if <condition pos:start="595:20" pos:end="595:37">(<expr pos:start="595:21" pos:end="595:36"><name pos:start="595:21" pos:end="595:24">insn</name> <operator pos:start="595:26" pos:end="595:26">&amp;</operator> <operator pos:start="595:28" pos:end="595:28">(</operator><literal type="number" pos:start="595:29" pos:end="595:29">1</literal> <operator pos:start="595:31" pos:end="595:32">&lt;&lt;</operator> <literal type="number" pos:start="595:34" pos:end="595:35">21</literal><operator pos:start="595:36" pos:end="595:36">)</operator></expr>)</condition> <block pos:start="595:39" pos:end="613:17">{<block_content pos:start="599:21" pos:end="611:43">

                    <comment type="block" pos:start="597:21" pos:end="597:51">/* Base register writeback.  */</comment>

                    <if_stmt pos:start="599:21" pos:end="603:21"><if pos:start="599:21" pos:end="603:21">if <condition pos:start="599:24" pos:end="599:41">(<expr pos:start="599:25" pos:end="599:40"><name pos:start="599:25" pos:end="599:28">insn</name> <operator pos:start="599:30" pos:end="599:30">&amp;</operator> <operator pos:start="599:32" pos:end="599:32">(</operator><literal type="number" pos:start="599:33" pos:end="599:33">1</literal> <operator pos:start="599:35" pos:end="599:36">&lt;&lt;</operator> <literal type="number" pos:start="599:38" pos:end="599:39">24</literal><operator pos:start="599:40" pos:end="599:40">)</operator></expr>)</condition> <block pos:start="599:43" pos:end="603:21">{<block_content pos:start="601:25" pos:end="601:62">

                        <expr_stmt pos:start="601:25" pos:end="601:62"><expr pos:start="601:25" pos:end="601:61"><call pos:start="601:25" pos:end="601:61"><name pos:start="601:25" pos:end="601:40">tcg_gen_addi_i32</name><argument_list pos:start="601:41" pos:end="601:61">(<argument pos:start="601:42" pos:end="601:45"><expr pos:start="601:42" pos:end="601:45"><name pos:start="601:42" pos:end="601:45">addr</name></expr></argument>, <argument pos:start="601:48" pos:end="601:51"><expr pos:start="601:48" pos:end="601:51"><name pos:start="601:48" pos:end="601:51">addr</name></expr></argument>, <argument pos:start="601:54" pos:end="601:60"><expr pos:start="601:54" pos:end="601:60"><operator pos:start="601:54" pos:end="601:54">-</operator><name pos:start="601:55" pos:end="601:60">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="605:21" pos:end="605:75">/* Fault if writeback register is in register list.  */</comment>

                    <if_stmt pos:start="607:21" pos:end="609:40"><if pos:start="607:21" pos:end="609:40">if <condition pos:start="607:24" pos:end="607:41">(<expr pos:start="607:25" pos:end="607:40"><name pos:start="607:25" pos:end="607:28">insn</name> <operator pos:start="607:30" pos:end="607:30">&amp;</operator> <operator pos:start="607:32" pos:end="607:32">(</operator><literal type="number" pos:start="607:33" pos:end="607:33">1</literal> <operator pos:start="607:35" pos:end="607:36">&lt;&lt;</operator> <name pos:start="607:38" pos:end="607:39">rn</name><operator pos:start="607:40" pos:end="607:40">)</operator></expr>)</condition><block type="pseudo" pos:start="609:25" pos:end="609:40"><block_content pos:start="609:25" pos:end="609:40">

                        <goto pos:start="609:25" pos:end="609:40">goto <name pos:start="609:30" pos:end="609:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="611:21" pos:end="611:43"><expr pos:start="611:21" pos:end="611:42"><call pos:start="611:21" pos:end="611:42"><name pos:start="611:21" pos:end="611:29">store_reg</name><argument_list pos:start="611:30" pos:end="611:42">(<argument pos:start="611:31" pos:end="611:31"><expr pos:start="611:31" pos:end="611:31"><name pos:start="611:31" pos:end="611:31">s</name></expr></argument>, <argument pos:start="611:34" pos:end="611:35"><expr pos:start="611:34" pos:end="611:35"><name pos:start="611:34" pos:end="611:35">rn</name></expr></argument>, <argument pos:start="611:38" pos:end="611:41"><expr pos:start="611:38" pos:end="611:41"><name pos:start="611:38" pos:end="611:41">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="613:19" pos:end="617:17">else <block pos:start="613:24" pos:end="617:17">{<block_content pos:start="615:21" pos:end="615:44">

                    <expr_stmt pos:start="615:21" pos:end="615:44"><expr pos:start="615:21" pos:end="615:43"><call pos:start="615:21" pos:end="615:43"><name pos:start="615:21" pos:end="615:37">tcg_temp_free_i32</name><argument_list pos:start="615:38" pos:end="615:43">(<argument pos:start="615:39" pos:end="615:42"><expr pos:start="615:39" pos:end="615:42"><name pos:start="615:39" pos:end="615:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="623:9" pos:end="623:14">break;</break>

    <case pos:start="625:5" pos:end="625:11">case <expr pos:start="625:10" pos:end="625:10"><literal type="number" pos:start="625:10" pos:end="625:10">5</literal></expr>:</case>



        <expr_stmt pos:start="629:9" pos:end="629:32"><expr pos:start="629:9" pos:end="629:31"><name pos:start="629:9" pos:end="629:10">op</name> <operator pos:start="629:12" pos:end="629:12">=</operator> <operator pos:start="629:14" pos:end="629:14">(</operator><name pos:start="629:15" pos:end="629:18">insn</name> <operator pos:start="629:20" pos:end="629:21">&gt;&gt;</operator> <literal type="number" pos:start="629:23" pos:end="629:24">21</literal><operator pos:start="629:25" pos:end="629:25">)</operator> <operator pos:start="629:27" pos:end="629:27">&amp;</operator> <literal type="number" pos:start="629:29" pos:end="629:31">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="631:9" pos:end="727:9"><if pos:start="631:9" pos:end="681:9">if <condition pos:start="631:12" pos:end="631:20">(<expr pos:start="631:13" pos:end="631:19"><name pos:start="631:13" pos:end="631:14">op</name> <operator pos:start="631:16" pos:end="631:17">==</operator> <literal type="number" pos:start="631:19" pos:end="631:19">6</literal></expr>)</condition> <block pos:start="631:22" pos:end="681:9">{<block_content pos:start="633:13" pos:end="679:34">

            <if_stmt pos:start="633:13" pos:end="637:13"><if pos:start="633:13" pos:end="637:13">if <condition pos:start="633:16" pos:end="633:58">(<expr pos:start="633:17" pos:end="633:57"><operator pos:start="633:17" pos:end="633:17">!</operator><call pos:start="633:18" pos:end="633:57"><name pos:start="633:18" pos:end="633:31">arm_dc_feature</name><argument_list pos:start="633:32" pos:end="633:57">(<argument pos:start="633:33" pos:end="633:33"><expr pos:start="633:33" pos:end="633:33"><name pos:start="633:33" pos:end="633:33">s</name></expr></argument>, <argument pos:start="633:36" pos:end="633:56"><expr pos:start="633:36" pos:end="633:56"><name pos:start="633:36" pos:end="633:56">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="633:60" pos:end="637:13">{<block_content pos:start="635:17" pos:end="635:32">

                <goto pos:start="635:17" pos:end="635:32">goto <name pos:start="635:22" pos:end="635:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="639:13" pos:end="639:33">/* Halfword pack.  */</comment>

            <expr_stmt pos:start="641:13" pos:end="641:34"><expr pos:start="641:13" pos:end="641:33"><name pos:start="641:13" pos:end="641:15">tmp</name> <operator pos:start="641:17" pos:end="641:17">=</operator> <call pos:start="641:19" pos:end="641:33"><name pos:start="641:19" pos:end="641:26">load_reg</name><argument_list pos:start="641:27" pos:end="641:33">(<argument pos:start="641:28" pos:end="641:28"><expr pos:start="641:28" pos:end="641:28"><name pos:start="641:28" pos:end="641:28">s</name></expr></argument>, <argument pos:start="641:31" pos:end="641:32"><expr pos:start="641:31" pos:end="641:32"><name pos:start="641:31" pos:end="641:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="643:13" pos:end="643:35"><expr pos:start="643:13" pos:end="643:34"><name pos:start="643:13" pos:end="643:16">tmp2</name> <operator pos:start="643:18" pos:end="643:18">=</operator> <call pos:start="643:20" pos:end="643:34"><name pos:start="643:20" pos:end="643:27">load_reg</name><argument_list pos:start="643:28" pos:end="643:34">(<argument pos:start="643:29" pos:end="643:29"><expr pos:start="643:29" pos:end="643:29"><name pos:start="643:29" pos:end="643:29">s</name></expr></argument>, <argument pos:start="643:32" pos:end="643:33"><expr pos:start="643:32" pos:end="643:33"><name pos:start="643:32" pos:end="643:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="645:13" pos:end="645:64"><expr pos:start="645:13" pos:end="645:63"><name pos:start="645:13" pos:end="645:17">shift</name> <operator pos:start="645:19" pos:end="645:19">=</operator> <operator pos:start="645:21" pos:end="645:21">(</operator><operator pos:start="645:22" pos:end="645:22">(</operator><name pos:start="645:23" pos:end="645:26">insn</name> <operator pos:start="645:28" pos:end="645:29">&gt;&gt;</operator> <literal type="number" pos:start="645:31" pos:end="645:32">10</literal><operator pos:start="645:33" pos:end="645:33">)</operator> <operator pos:start="645:35" pos:end="645:35">&amp;</operator> <literal type="number" pos:start="645:37" pos:end="645:40">0x1c</literal><operator pos:start="645:41" pos:end="645:41">)</operator> <operator pos:start="645:43" pos:end="645:43">|</operator> <operator pos:start="645:45" pos:end="645:45">(</operator><operator pos:start="645:46" pos:end="645:46">(</operator><name pos:start="645:47" pos:end="645:50">insn</name> <operator pos:start="645:52" pos:end="645:53">&gt;&gt;</operator> <literal type="number" pos:start="645:55" pos:end="645:55">6</literal><operator pos:start="645:56" pos:end="645:56">)</operator> <operator pos:start="645:58" pos:end="645:58">&amp;</operator> <literal type="number" pos:start="645:60" pos:end="645:62">0x3</literal><operator pos:start="645:63" pos:end="645:63">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="647:13" pos:end="673:13"><if pos:start="647:13" pos:end="661:13">if <condition pos:start="647:16" pos:end="647:32">(<expr pos:start="647:17" pos:end="647:31"><name pos:start="647:17" pos:end="647:20">insn</name> <operator pos:start="647:22" pos:end="647:22">&amp;</operator> <operator pos:start="647:24" pos:end="647:24">(</operator><literal type="number" pos:start="647:25" pos:end="647:25">1</literal> <operator pos:start="647:27" pos:end="647:28">&lt;&lt;</operator> <literal type="number" pos:start="647:30" pos:end="647:30">5</literal><operator pos:start="647:31" pos:end="647:31">)</operator></expr>)</condition> <block pos:start="647:34" pos:end="661:13">{<block_content pos:start="651:17" pos:end="659:47">

                <comment type="block" pos:start="649:17" pos:end="649:27">/* pkhtb */</comment>

                <if_stmt pos:start="651:17" pos:end="653:31"><if pos:start="651:17" pos:end="653:31">if <condition pos:start="651:20" pos:end="651:31">(<expr pos:start="651:21" pos:end="651:30"><name pos:start="651:21" pos:end="651:25">shift</name> <operator pos:start="651:27" pos:end="651:28">==</operator> <literal type="number" pos:start="651:30" pos:end="651:30">0</literal></expr>)</condition><block type="pseudo" pos:start="653:21" pos:end="653:31"><block_content pos:start="653:21" pos:end="653:31">

                    <expr_stmt pos:start="653:21" pos:end="653:31"><expr pos:start="653:21" pos:end="653:30"><name pos:start="653:21" pos:end="653:25">shift</name> <operator pos:start="653:27" pos:end="653:27">=</operator> <literal type="number" pos:start="653:29" pos:end="653:30">31</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="655:17" pos:end="655:52"><expr pos:start="655:17" pos:end="655:51"><call pos:start="655:17" pos:end="655:51"><name pos:start="655:17" pos:end="655:32">tcg_gen_sari_i32</name><argument_list pos:start="655:33" pos:end="655:51">(<argument pos:start="655:34" pos:end="655:37"><expr pos:start="655:34" pos:end="655:37"><name pos:start="655:34" pos:end="655:37">tmp2</name></expr></argument>, <argument pos:start="655:40" pos:end="655:43"><expr pos:start="655:40" pos:end="655:43"><name pos:start="655:40" pos:end="655:43">tmp2</name></expr></argument>, <argument pos:start="655:46" pos:end="655:50"><expr pos:start="655:46" pos:end="655:50"><name pos:start="655:46" pos:end="655:50">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="657:17" pos:end="657:55"><expr pos:start="657:17" pos:end="657:54"><call pos:start="657:17" pos:end="657:54"><name pos:start="657:17" pos:end="657:32">tcg_gen_andi_i32</name><argument_list pos:start="657:33" pos:end="657:54">(<argument pos:start="657:34" pos:end="657:36"><expr pos:start="657:34" pos:end="657:36"><name pos:start="657:34" pos:end="657:36">tmp</name></expr></argument>, <argument pos:start="657:39" pos:end="657:41"><expr pos:start="657:39" pos:end="657:41"><name pos:start="657:39" pos:end="657:41">tmp</name></expr></argument>, <argument pos:start="657:44" pos:end="657:53"><expr pos:start="657:44" pos:end="657:53"><literal type="number" pos:start="657:44" pos:end="657:53">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="659:17" pos:end="659:47"><expr pos:start="659:17" pos:end="659:46"><call pos:start="659:17" pos:end="659:46"><name pos:start="659:17" pos:end="659:34">tcg_gen_ext16u_i32</name><argument_list pos:start="659:35" pos:end="659:46">(<argument pos:start="659:36" pos:end="659:39"><expr pos:start="659:36" pos:end="659:39"><name pos:start="659:36" pos:end="659:39">tmp2</name></expr></argument>, <argument pos:start="659:42" pos:end="659:45"><expr pos:start="659:42" pos:end="659:45"><name pos:start="659:42" pos:end="659:45">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="661:15" pos:end="673:13">else <block pos:start="661:20" pos:end="673:13">{<block_content pos:start="665:17" pos:end="671:57">

                <comment type="block" pos:start="663:17" pos:end="663:27">/* pkhbt */</comment>

                <if_stmt pos:start="665:17" pos:end="667:56"><if pos:start="665:17" pos:end="667:56">if <condition pos:start="665:20" pos:end="665:26">(<expr pos:start="665:21" pos:end="665:25"><name pos:start="665:21" pos:end="665:25">shift</name></expr>)</condition><block type="pseudo" pos:start="667:21" pos:end="667:56"><block_content pos:start="667:21" pos:end="667:56">

                    <expr_stmt pos:start="667:21" pos:end="667:56"><expr pos:start="667:21" pos:end="667:55"><call pos:start="667:21" pos:end="667:55"><name pos:start="667:21" pos:end="667:36">tcg_gen_shli_i32</name><argument_list pos:start="667:37" pos:end="667:55">(<argument pos:start="667:38" pos:end="667:41"><expr pos:start="667:38" pos:end="667:41"><name pos:start="667:38" pos:end="667:41">tmp2</name></expr></argument>, <argument pos:start="667:44" pos:end="667:47"><expr pos:start="667:44" pos:end="667:47"><name pos:start="667:44" pos:end="667:47">tmp2</name></expr></argument>, <argument pos:start="667:50" pos:end="667:54"><expr pos:start="667:50" pos:end="667:54"><name pos:start="667:50" pos:end="667:54">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="669:17" pos:end="669:45"><expr pos:start="669:17" pos:end="669:44"><call pos:start="669:17" pos:end="669:44"><name pos:start="669:17" pos:end="669:34">tcg_gen_ext16u_i32</name><argument_list pos:start="669:35" pos:end="669:44">(<argument pos:start="669:36" pos:end="669:38"><expr pos:start="669:36" pos:end="669:38"><name pos:start="669:36" pos:end="669:38">tmp</name></expr></argument>, <argument pos:start="669:41" pos:end="669:43"><expr pos:start="669:41" pos:end="669:43"><name pos:start="669:41" pos:end="669:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="671:17" pos:end="671:57"><expr pos:start="671:17" pos:end="671:56"><call pos:start="671:17" pos:end="671:56"><name pos:start="671:17" pos:end="671:32">tcg_gen_andi_i32</name><argument_list pos:start="671:33" pos:end="671:56">(<argument pos:start="671:34" pos:end="671:37"><expr pos:start="671:34" pos:end="671:37"><name pos:start="671:34" pos:end="671:37">tmp2</name></expr></argument>, <argument pos:start="671:40" pos:end="671:43"><expr pos:start="671:40" pos:end="671:43"><name pos:start="671:40" pos:end="671:43">tmp2</name></expr></argument>, <argument pos:start="671:46" pos:end="671:55"><expr pos:start="671:46" pos:end="671:55"><literal type="number" pos:start="671:46" pos:end="671:55">0xffff0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="675:13" pos:end="675:43"><expr pos:start="675:13" pos:end="675:42"><call pos:start="675:13" pos:end="675:42"><name pos:start="675:13" pos:end="675:26">tcg_gen_or_i32</name><argument_list pos:start="675:27" pos:end="675:42">(<argument pos:start="675:28" pos:end="675:30"><expr pos:start="675:28" pos:end="675:30"><name pos:start="675:28" pos:end="675:30">tmp</name></expr></argument>, <argument pos:start="675:33" pos:end="675:35"><expr pos:start="675:33" pos:end="675:35"><name pos:start="675:33" pos:end="675:35">tmp</name></expr></argument>, <argument pos:start="675:38" pos:end="675:41"><expr pos:start="675:38" pos:end="675:41"><name pos:start="675:38" pos:end="675:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="677:13" pos:end="677:36"><expr pos:start="677:13" pos:end="677:35"><call pos:start="677:13" pos:end="677:35"><name pos:start="677:13" pos:end="677:29">tcg_temp_free_i32</name><argument_list pos:start="677:30" pos:end="677:35">(<argument pos:start="677:31" pos:end="677:34"><expr pos:start="677:31" pos:end="677:34"><name pos:start="677:31" pos:end="677:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="679:13" pos:end="679:34"><expr pos:start="679:13" pos:end="679:33"><call pos:start="679:13" pos:end="679:33"><name pos:start="679:13" pos:end="679:21">store_reg</name><argument_list pos:start="679:22" pos:end="679:33">(<argument pos:start="679:23" pos:end="679:23"><expr pos:start="679:23" pos:end="679:23"><name pos:start="679:23" pos:end="679:23">s</name></expr></argument>, <argument pos:start="679:26" pos:end="679:27"><expr pos:start="679:26" pos:end="679:27"><name pos:start="679:26" pos:end="679:27">rd</name></expr></argument>, <argument pos:start="679:30" pos:end="679:32"><expr pos:start="679:30" pos:end="679:32"><name pos:start="679:30" pos:end="679:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="681:11" pos:end="727:9">else <block pos:start="681:16" pos:end="727:9">{<block_content pos:start="685:13" pos:end="725:13">

            <comment type="block" pos:start="683:13" pos:end="683:59">/* Data processing register constant shift.  */</comment>

            <if_stmt pos:start="685:13" pos:end="695:13"><if pos:start="685:13" pos:end="691:13">if <condition pos:start="685:16" pos:end="685:25">(<expr pos:start="685:17" pos:end="685:24"><name pos:start="685:17" pos:end="685:18">rn</name> <operator pos:start="685:20" pos:end="685:21">==</operator> <literal type="number" pos:start="685:23" pos:end="685:24">15</literal></expr>)</condition> <block pos:start="685:27" pos:end="691:13">{<block_content pos:start="687:17" pos:end="689:41">

                <expr_stmt pos:start="687:17" pos:end="687:41"><expr pos:start="687:17" pos:end="687:40"><name pos:start="687:17" pos:end="687:19">tmp</name> <operator pos:start="687:21" pos:end="687:21">=</operator> <call pos:start="687:23" pos:end="687:40"><name pos:start="687:23" pos:end="687:38">tcg_temp_new_i32</name><argument_list pos:start="687:39" pos:end="687:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="689:17" pos:end="689:41"><expr pos:start="689:17" pos:end="689:40"><call pos:start="689:17" pos:end="689:40"><name pos:start="689:17" pos:end="689:32">tcg_gen_movi_i32</name><argument_list pos:start="689:33" pos:end="689:40">(<argument pos:start="689:34" pos:end="689:36"><expr pos:start="689:34" pos:end="689:36"><name pos:start="689:34" pos:end="689:36">tmp</name></expr></argument>, <argument pos:start="689:39" pos:end="689:39"><expr pos:start="689:39" pos:end="689:39"><literal type="number" pos:start="689:39" pos:end="689:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="691:15" pos:end="695:13">else <block pos:start="691:20" pos:end="695:13">{<block_content pos:start="693:17" pos:end="693:38">

                <expr_stmt pos:start="693:17" pos:end="693:38"><expr pos:start="693:17" pos:end="693:37"><name pos:start="693:17" pos:end="693:19">tmp</name> <operator pos:start="693:21" pos:end="693:21">=</operator> <call pos:start="693:23" pos:end="693:37"><name pos:start="693:23" pos:end="693:30">load_reg</name><argument_list pos:start="693:31" pos:end="693:37">(<argument pos:start="693:32" pos:end="693:32"><expr pos:start="693:32" pos:end="693:32"><name pos:start="693:32" pos:end="693:32">s</name></expr></argument>, <argument pos:start="693:35" pos:end="693:36"><expr pos:start="693:35" pos:end="693:36"><name pos:start="693:35" pos:end="693:36">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="697:13" pos:end="697:35"><expr pos:start="697:13" pos:end="697:34"><name pos:start="697:13" pos:end="697:16">tmp2</name> <operator pos:start="697:18" pos:end="697:18">=</operator> <call pos:start="697:20" pos:end="697:34"><name pos:start="697:20" pos:end="697:27">load_reg</name><argument_list pos:start="697:28" pos:end="697:34">(<argument pos:start="697:29" pos:end="697:29"><expr pos:start="697:29" pos:end="697:29"><name pos:start="697:29" pos:end="697:29">s</name></expr></argument>, <argument pos:start="697:32" pos:end="697:33"><expr pos:start="697:32" pos:end="697:33"><name pos:start="697:32" pos:end="697:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="701:13" pos:end="701:38"><expr pos:start="701:13" pos:end="701:37"><name pos:start="701:13" pos:end="701:19">shiftop</name> <operator pos:start="701:21" pos:end="701:21">=</operator> <operator pos:start="701:23" pos:end="701:23">(</operator><name pos:start="701:24" pos:end="701:27">insn</name> <operator pos:start="701:29" pos:end="701:30">&gt;&gt;</operator> <literal type="number" pos:start="701:32" pos:end="701:32">4</literal><operator pos:start="701:33" pos:end="701:33">)</operator> <operator pos:start="701:35" pos:end="701:35">&amp;</operator> <literal type="number" pos:start="701:37" pos:end="701:37">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="703:13" pos:end="703:62"><expr pos:start="703:13" pos:end="703:61"><name pos:start="703:13" pos:end="703:17">shift</name> <operator pos:start="703:19" pos:end="703:19">=</operator> <operator pos:start="703:21" pos:end="703:21">(</operator><operator pos:start="703:22" pos:end="703:22">(</operator><name pos:start="703:23" pos:end="703:26">insn</name> <operator pos:start="703:28" pos:end="703:29">&gt;&gt;</operator> <literal type="number" pos:start="703:31" pos:end="703:31">6</literal><operator pos:start="703:32" pos:end="703:32">)</operator> <operator pos:start="703:34" pos:end="703:34">&amp;</operator> <literal type="number" pos:start="703:36" pos:end="703:36">3</literal><operator pos:start="703:37" pos:end="703:37">)</operator> <operator pos:start="703:39" pos:end="703:39">|</operator> <operator pos:start="703:41" pos:end="703:41">(</operator><operator pos:start="703:42" pos:end="703:42">(</operator><name pos:start="703:43" pos:end="703:46">insn</name> <operator pos:start="703:48" pos:end="703:49">&gt;&gt;</operator> <literal type="number" pos:start="703:51" pos:end="703:52">10</literal><operator pos:start="703:53" pos:end="703:53">)</operator> <operator pos:start="703:55" pos:end="703:55">&amp;</operator> <literal type="number" pos:start="703:57" pos:end="703:60">0x1c</literal><operator pos:start="703:61" pos:end="703:61">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="705:13" pos:end="705:44"><expr pos:start="705:13" pos:end="705:43"><name pos:start="705:13" pos:end="705:17">conds</name> <operator pos:start="705:19" pos:end="705:19">=</operator> <operator pos:start="705:21" pos:end="705:21">(</operator><name pos:start="705:22" pos:end="705:25">insn</name> <operator pos:start="705:27" pos:end="705:27">&amp;</operator> <operator pos:start="705:29" pos:end="705:29">(</operator><literal type="number" pos:start="705:30" pos:end="705:30">1</literal> <operator pos:start="705:32" pos:end="705:33">&lt;&lt;</operator> <literal type="number" pos:start="705:35" pos:end="705:36">20</literal><operator pos:start="705:37" pos:end="705:37">)</operator><operator pos:start="705:38" pos:end="705:38">)</operator> <operator pos:start="705:40" pos:end="705:41">!=</operator> <literal type="number" pos:start="705:43" pos:end="705:43">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="707:13" pos:end="707:54"><expr pos:start="707:13" pos:end="707:53"><name pos:start="707:13" pos:end="707:20">logic_cc</name> <operator pos:start="707:22" pos:end="707:22">=</operator> <operator pos:start="707:24" pos:end="707:24">(</operator><name pos:start="707:25" pos:end="707:29">conds</name> <operator pos:start="707:31" pos:end="707:32">&amp;&amp;</operator> <call pos:start="707:34" pos:end="707:52"><name pos:start="707:34" pos:end="707:48">thumb2_logic_op</name><argument_list pos:start="707:49" pos:end="707:52">(<argument pos:start="707:50" pos:end="707:51"><expr pos:start="707:50" pos:end="707:51"><name pos:start="707:50" pos:end="707:51">op</name></expr></argument>)</argument_list></call><operator pos:start="707:53" pos:end="707:53">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="709:13" pos:end="709:61"><expr pos:start="709:13" pos:end="709:60"><call pos:start="709:13" pos:end="709:60"><name pos:start="709:13" pos:end="709:28">gen_arm_shift_im</name><argument_list pos:start="709:29" pos:end="709:60">(<argument pos:start="709:30" pos:end="709:33"><expr pos:start="709:30" pos:end="709:33"><name pos:start="709:30" pos:end="709:33">tmp2</name></expr></argument>, <argument pos:start="709:36" pos:end="709:42"><expr pos:start="709:36" pos:end="709:42"><name pos:start="709:36" pos:end="709:42">shiftop</name></expr></argument>, <argument pos:start="709:45" pos:end="709:49"><expr pos:start="709:45" pos:end="709:49"><name pos:start="709:45" pos:end="709:49">shift</name></expr></argument>, <argument pos:start="709:52" pos:end="709:59"><expr pos:start="709:52" pos:end="709:59"><name pos:start="709:52" pos:end="709:59">logic_cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="711:13" pos:end="713:32"><if pos:start="711:13" pos:end="713:32">if <condition pos:start="711:16" pos:end="711:63">(<expr pos:start="711:17" pos:end="711:62"><call pos:start="711:17" pos:end="711:62"><name pos:start="711:17" pos:end="711:34">gen_thumb2_data_op</name><argument_list pos:start="711:35" pos:end="711:62">(<argument pos:start="711:36" pos:end="711:36"><expr pos:start="711:36" pos:end="711:36"><name pos:start="711:36" pos:end="711:36">s</name></expr></argument>, <argument pos:start="711:39" pos:end="711:40"><expr pos:start="711:39" pos:end="711:40"><name pos:start="711:39" pos:end="711:40">op</name></expr></argument>, <argument pos:start="711:43" pos:end="711:47"><expr pos:start="711:43" pos:end="711:47"><name pos:start="711:43" pos:end="711:47">conds</name></expr></argument>, <argument pos:start="711:50" pos:end="711:50"><expr pos:start="711:50" pos:end="711:50"><literal type="number" pos:start="711:50" pos:end="711:50">0</literal></expr></argument>, <argument pos:start="711:53" pos:end="711:55"><expr pos:start="711:53" pos:end="711:55"><name pos:start="711:53" pos:end="711:55">tmp</name></expr></argument>, <argument pos:start="711:58" pos:end="711:61"><expr pos:start="711:58" pos:end="711:61"><name pos:start="711:58" pos:end="711:61">tmp2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="713:17" pos:end="713:32"><block_content pos:start="713:17" pos:end="713:32">

                <goto pos:start="713:17" pos:end="713:32">goto <name pos:start="713:22" pos:end="713:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="715:13" pos:end="715:36"><expr pos:start="715:13" pos:end="715:35"><call pos:start="715:13" pos:end="715:35"><name pos:start="715:13" pos:end="715:29">tcg_temp_free_i32</name><argument_list pos:start="715:30" pos:end="715:35">(<argument pos:start="715:31" pos:end="715:34"><expr pos:start="715:31" pos:end="715:34"><name pos:start="715:31" pos:end="715:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="717:13" pos:end="725:13"><if pos:start="717:13" pos:end="721:13">if <condition pos:start="717:16" pos:end="717:25">(<expr pos:start="717:17" pos:end="717:24"><name pos:start="717:17" pos:end="717:18">rd</name> <operator pos:start="717:20" pos:end="717:21">!=</operator> <literal type="number" pos:start="717:23" pos:end="717:24">15</literal></expr>)</condition> <block pos:start="717:27" pos:end="721:13">{<block_content pos:start="719:17" pos:end="719:38">

                <expr_stmt pos:start="719:17" pos:end="719:38"><expr pos:start="719:17" pos:end="719:37"><call pos:start="719:17" pos:end="719:37"><name pos:start="719:17" pos:end="719:25">store_reg</name><argument_list pos:start="719:26" pos:end="719:37">(<argument pos:start="719:27" pos:end="719:27"><expr pos:start="719:27" pos:end="719:27"><name pos:start="719:27" pos:end="719:27">s</name></expr></argument>, <argument pos:start="719:30" pos:end="719:31"><expr pos:start="719:30" pos:end="719:31"><name pos:start="719:30" pos:end="719:31">rd</name></expr></argument>, <argument pos:start="719:34" pos:end="719:36"><expr pos:start="719:34" pos:end="719:36"><name pos:start="719:34" pos:end="719:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="721:15" pos:end="725:13">else <block pos:start="721:20" pos:end="725:13">{<block_content pos:start="723:17" pos:end="723:39">

                <expr_stmt pos:start="723:17" pos:end="723:39"><expr pos:start="723:17" pos:end="723:38"><call pos:start="723:17" pos:end="723:38"><name pos:start="723:17" pos:end="723:33">tcg_temp_free_i32</name><argument_list pos:start="723:34" pos:end="723:38">(<argument pos:start="723:35" pos:end="723:37"><expr pos:start="723:35" pos:end="723:37"><name pos:start="723:35" pos:end="723:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="729:9" pos:end="729:14">break;</break>

    <case pos:start="731:5" pos:end="731:12">case <expr pos:start="731:10" pos:end="731:11"><literal type="number" pos:start="731:10" pos:end="731:11">13</literal></expr>:</case> <comment type="block" pos:start="731:14" pos:end="731:41">/* Misc data processing.  */</comment>

        <expr_stmt pos:start="733:9" pos:end="733:52"><expr pos:start="733:9" pos:end="733:51"><name pos:start="733:9" pos:end="733:10">op</name> <operator pos:start="733:12" pos:end="733:12">=</operator> <operator pos:start="733:14" pos:end="733:14">(</operator><operator pos:start="733:15" pos:end="733:15">(</operator><name pos:start="733:16" pos:end="733:19">insn</name> <operator pos:start="733:21" pos:end="733:22">&gt;&gt;</operator> <literal type="number" pos:start="733:24" pos:end="733:25">22</literal><operator pos:start="733:26" pos:end="733:26">)</operator> <operator pos:start="733:28" pos:end="733:28">&amp;</operator> <literal type="number" pos:start="733:30" pos:end="733:30">6</literal><operator pos:start="733:31" pos:end="733:31">)</operator> <operator pos:start="733:33" pos:end="733:33">|</operator> <operator pos:start="733:35" pos:end="733:35">(</operator><operator pos:start="733:36" pos:end="733:36">(</operator><name pos:start="733:37" pos:end="733:40">insn</name> <operator pos:start="733:42" pos:end="733:43">&gt;&gt;</operator> <literal type="number" pos:start="733:45" pos:end="733:45">7</literal><operator pos:start="733:46" pos:end="733:46">)</operator> <operator pos:start="733:48" pos:end="733:48">&amp;</operator> <literal type="number" pos:start="733:50" pos:end="733:50">1</literal><operator pos:start="733:51" pos:end="733:51">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="735:9" pos:end="737:28"><if pos:start="735:9" pos:end="737:28">if <condition pos:start="735:12" pos:end="735:48">(<expr pos:start="735:13" pos:end="735:47"><name pos:start="735:13" pos:end="735:14">op</name> <operator pos:start="735:16" pos:end="735:16">&lt;</operator> <literal type="number" pos:start="735:18" pos:end="735:18">4</literal> <operator pos:start="735:20" pos:end="735:21">&amp;&amp;</operator> <operator pos:start="735:23" pos:end="735:23">(</operator><name pos:start="735:24" pos:end="735:27">insn</name> <operator pos:start="735:29" pos:end="735:29">&amp;</operator> <literal type="number" pos:start="735:31" pos:end="735:36">0xf000</literal><operator pos:start="735:37" pos:end="735:37">)</operator> <operator pos:start="735:39" pos:end="735:40">!=</operator> <literal type="number" pos:start="735:42" pos:end="735:47">0xf000</literal></expr>)</condition><block type="pseudo" pos:start="737:13" pos:end="737:28"><block_content pos:start="737:13" pos:end="737:28">

            <goto pos:start="737:13" pos:end="737:28">goto <name pos:start="737:18" pos:end="737:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <switch pos:start="739:9" pos:end="1465:9">switch <condition pos:start="739:16" pos:end="739:19">(<expr pos:start="739:17" pos:end="739:18"><name pos:start="739:17" pos:end="739:18">op</name></expr>)</condition> <block pos:start="739:21" pos:end="1465:9">{<block_content pos:start="741:9" pos:end="1463:18">

        <case pos:start="741:9" pos:end="741:15">case <expr pos:start="741:14" pos:end="741:14"><literal type="number" pos:start="741:14" pos:end="741:14">0</literal></expr>:</case> <comment type="block" pos:start="741:17" pos:end="741:49">/* Register controlled shift.  */</comment>

            <expr_stmt pos:start="743:13" pos:end="743:34"><expr pos:start="743:13" pos:end="743:33"><name pos:start="743:13" pos:end="743:15">tmp</name> <operator pos:start="743:17" pos:end="743:17">=</operator> <call pos:start="743:19" pos:end="743:33"><name pos:start="743:19" pos:end="743:26">load_reg</name><argument_list pos:start="743:27" pos:end="743:33">(<argument pos:start="743:28" pos:end="743:28"><expr pos:start="743:28" pos:end="743:28"><name pos:start="743:28" pos:end="743:28">s</name></expr></argument>, <argument pos:start="743:31" pos:end="743:32"><expr pos:start="743:31" pos:end="743:32"><name pos:start="743:31" pos:end="743:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="745:13" pos:end="745:35"><expr pos:start="745:13" pos:end="745:34"><name pos:start="745:13" pos:end="745:16">tmp2</name> <operator pos:start="745:18" pos:end="745:18">=</operator> <call pos:start="745:20" pos:end="745:34"><name pos:start="745:20" pos:end="745:27">load_reg</name><argument_list pos:start="745:28" pos:end="745:34">(<argument pos:start="745:29" pos:end="745:29"><expr pos:start="745:29" pos:end="745:29"><name pos:start="745:29" pos:end="745:29">s</name></expr></argument>, <argument pos:start="745:32" pos:end="745:33"><expr pos:start="745:32" pos:end="745:33"><name pos:start="745:32" pos:end="745:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="747:13" pos:end="749:32"><if pos:start="747:13" pos:end="749:32">if <condition pos:start="747:16" pos:end="747:35">(<expr pos:start="747:17" pos:end="747:34"><operator pos:start="747:17" pos:end="747:17">(</operator><name pos:start="747:18" pos:end="747:21">insn</name> <operator pos:start="747:23" pos:end="747:23">&amp;</operator> <literal type="number" pos:start="747:25" pos:end="747:28">0x70</literal><operator pos:start="747:29" pos:end="747:29">)</operator> <operator pos:start="747:31" pos:end="747:32">!=</operator> <literal type="number" pos:start="747:34" pos:end="747:34">0</literal></expr>)</condition><block type="pseudo" pos:start="749:17" pos:end="749:32"><block_content pos:start="749:17" pos:end="749:32">

                <goto pos:start="749:17" pos:end="749:32">goto <name pos:start="749:22" pos:end="749:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="751:13" pos:end="751:34"><expr pos:start="751:13" pos:end="751:33"><name pos:start="751:13" pos:end="751:14">op</name> <operator pos:start="751:16" pos:end="751:16">=</operator> <operator pos:start="751:18" pos:end="751:18">(</operator><name pos:start="751:19" pos:end="751:22">insn</name> <operator pos:start="751:24" pos:end="751:25">&gt;&gt;</operator> <literal type="number" pos:start="751:27" pos:end="751:28">21</literal><operator pos:start="751:29" pos:end="751:29">)</operator> <operator pos:start="751:31" pos:end="751:31">&amp;</operator> <literal type="number" pos:start="751:33" pos:end="751:33">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="753:13" pos:end="753:47"><expr pos:start="753:13" pos:end="753:46"><name pos:start="753:13" pos:end="753:20">logic_cc</name> <operator pos:start="753:22" pos:end="753:22">=</operator> <operator pos:start="753:24" pos:end="753:24">(</operator><name pos:start="753:25" pos:end="753:28">insn</name> <operator pos:start="753:30" pos:end="753:30">&amp;</operator> <operator pos:start="753:32" pos:end="753:32">(</operator><literal type="number" pos:start="753:33" pos:end="753:33">1</literal> <operator pos:start="753:35" pos:end="753:36">&lt;&lt;</operator> <literal type="number" pos:start="753:38" pos:end="753:39">20</literal><operator pos:start="753:40" pos:end="753:40">)</operator><operator pos:start="753:41" pos:end="753:41">)</operator> <operator pos:start="753:43" pos:end="753:44">!=</operator> <literal type="number" pos:start="753:46" pos:end="753:46">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="755:13" pos:end="755:55"><expr pos:start="755:13" pos:end="755:54"><call pos:start="755:13" pos:end="755:54"><name pos:start="755:13" pos:end="755:29">gen_arm_shift_reg</name><argument_list pos:start="755:30" pos:end="755:54">(<argument pos:start="755:31" pos:end="755:33"><expr pos:start="755:31" pos:end="755:33"><name pos:start="755:31" pos:end="755:33">tmp</name></expr></argument>, <argument pos:start="755:36" pos:end="755:37"><expr pos:start="755:36" pos:end="755:37"><name pos:start="755:36" pos:end="755:37">op</name></expr></argument>, <argument pos:start="755:40" pos:end="755:43"><expr pos:start="755:40" pos:end="755:43"><name pos:start="755:40" pos:end="755:43">tmp2</name></expr></argument>, <argument pos:start="755:46" pos:end="755:53"><expr pos:start="755:46" pos:end="755:53"><name pos:start="755:46" pos:end="755:53">logic_cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="757:13" pos:end="759:34"><if pos:start="757:13" pos:end="759:34">if <condition pos:start="757:16" pos:end="757:25">(<expr pos:start="757:17" pos:end="757:24"><name pos:start="757:17" pos:end="757:24">logic_cc</name></expr>)</condition><block type="pseudo" pos:start="759:17" pos:end="759:34"><block_content pos:start="759:17" pos:end="759:34">

                <expr_stmt pos:start="759:17" pos:end="759:34"><expr pos:start="759:17" pos:end="759:33"><call pos:start="759:17" pos:end="759:33"><name pos:start="759:17" pos:end="759:28">gen_logic_CC</name><argument_list pos:start="759:29" pos:end="759:33">(<argument pos:start="759:30" pos:end="759:32"><expr pos:start="759:30" pos:end="759:32"><name pos:start="759:30" pos:end="759:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="761:13" pos:end="761:34"><expr pos:start="761:13" pos:end="761:33"><call pos:start="761:13" pos:end="761:33"><name pos:start="761:13" pos:end="761:21">store_reg</name><argument_list pos:start="761:22" pos:end="761:33">(<argument pos:start="761:23" pos:end="761:23"><expr pos:start="761:23" pos:end="761:23"><name pos:start="761:23" pos:end="761:23">s</name></expr></argument>, <argument pos:start="761:26" pos:end="761:27"><expr pos:start="761:26" pos:end="761:27"><name pos:start="761:26" pos:end="761:27">rd</name></expr></argument>, <argument pos:start="761:30" pos:end="761:32"><expr pos:start="761:30" pos:end="761:32"><name pos:start="761:30" pos:end="761:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="763:13" pos:end="763:18">break;</break>

        <case pos:start="765:9" pos:end="765:15">case <expr pos:start="765:14" pos:end="765:14"><literal type="number" pos:start="765:14" pos:end="765:14">1</literal></expr>:</case> <comment type="block" pos:start="765:17" pos:end="765:40">/* Sign/zero extend.  */</comment>

            <expr_stmt pos:start="767:13" pos:end="767:34"><expr pos:start="767:13" pos:end="767:33"><name pos:start="767:13" pos:end="767:14">op</name> <operator pos:start="767:16" pos:end="767:16">=</operator> <operator pos:start="767:18" pos:end="767:18">(</operator><name pos:start="767:19" pos:end="767:22">insn</name> <operator pos:start="767:24" pos:end="767:25">&gt;&gt;</operator> <literal type="number" pos:start="767:27" pos:end="767:28">20</literal><operator pos:start="767:29" pos:end="767:29">)</operator> <operator pos:start="767:31" pos:end="767:31">&amp;</operator> <literal type="number" pos:start="767:33" pos:end="767:33">7</literal></expr>;</expr_stmt>

            <switch pos:start="769:13" pos:end="797:13">switch <condition pos:start="769:20" pos:end="769:23">(<expr pos:start="769:21" pos:end="769:22"><name pos:start="769:21" pos:end="769:22">op</name></expr>)</condition> <block pos:start="769:25" pos:end="797:13">{<block_content pos:start="771:13" pos:end="795:32">

            <case pos:start="771:13" pos:end="771:19">case <expr pos:start="771:18" pos:end="771:18"><literal type="number" pos:start="771:18" pos:end="771:18">0</literal></expr>:</case> <comment type="block" pos:start="771:21" pos:end="771:37">/* SXTAH, SXTH */</comment>

            <case pos:start="773:13" pos:end="773:19">case <expr pos:start="773:18" pos:end="773:18"><literal type="number" pos:start="773:18" pos:end="773:18">1</literal></expr>:</case> <comment type="block" pos:start="773:21" pos:end="773:37">/* UXTAH, UXTH */</comment>

            <case pos:start="775:13" pos:end="775:19">case <expr pos:start="775:18" pos:end="775:18"><literal type="number" pos:start="775:18" pos:end="775:18">4</literal></expr>:</case> <comment type="block" pos:start="775:21" pos:end="775:37">/* SXTAB, SXTB */</comment>

            <case pos:start="777:13" pos:end="777:19">case <expr pos:start="777:18" pos:end="777:18"><literal type="number" pos:start="777:18" pos:end="777:18">5</literal></expr>:</case> <comment type="block" pos:start="777:21" pos:end="777:37">/* UXTAB, UXTB */</comment>

                <break pos:start="779:17" pos:end="779:22">break;</break>

            <case pos:start="781:13" pos:end="781:19">case <expr pos:start="781:18" pos:end="781:18"><literal type="number" pos:start="781:18" pos:end="781:18">2</literal></expr>:</case> <comment type="block" pos:start="781:21" pos:end="781:41">/* SXTAB16, SXTB16 */</comment>

            <case pos:start="783:13" pos:end="783:19">case <expr pos:start="783:18" pos:end="783:18"><literal type="number" pos:start="783:18" pos:end="783:18">3</literal></expr>:</case> <comment type="block" pos:start="783:21" pos:end="783:41">/* UXTAB16, UXTB16 */</comment>

                <if_stmt pos:start="785:17" pos:end="789:17"><if pos:start="785:17" pos:end="789:17">if <condition pos:start="785:20" pos:end="785:62">(<expr pos:start="785:21" pos:end="785:61"><operator pos:start="785:21" pos:end="785:21">!</operator><call pos:start="785:22" pos:end="785:61"><name pos:start="785:22" pos:end="785:35">arm_dc_feature</name><argument_list pos:start="785:36" pos:end="785:61">(<argument pos:start="785:37" pos:end="785:37"><expr pos:start="785:37" pos:end="785:37"><name pos:start="785:37" pos:end="785:37">s</name></expr></argument>, <argument pos:start="785:40" pos:end="785:60"><expr pos:start="785:40" pos:end="785:60"><name pos:start="785:40" pos:end="785:60">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="785:64" pos:end="789:17">{<block_content pos:start="787:21" pos:end="787:36">

                    <goto pos:start="787:21" pos:end="787:36">goto <name pos:start="787:26" pos:end="787:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <break pos:start="791:17" pos:end="791:22">break;</break>

            <default pos:start="793:13" pos:end="793:20">default:</default>

                <goto pos:start="795:17" pos:end="795:32">goto <name pos:start="795:22" pos:end="795:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <if_stmt pos:start="799:13" pos:end="807:13"><if pos:start="799:13" pos:end="807:13">if <condition pos:start="799:16" pos:end="799:25">(<expr pos:start="799:17" pos:end="799:24"><name pos:start="799:17" pos:end="799:18">rn</name> <operator pos:start="799:20" pos:end="799:21">!=</operator> <literal type="number" pos:start="799:23" pos:end="799:24">15</literal></expr>)</condition> <block pos:start="799:27" pos:end="807:13">{<block_content pos:start="801:17" pos:end="805:17">

                <if_stmt pos:start="801:17" pos:end="805:17"><if pos:start="801:17" pos:end="805:17">if <condition pos:start="801:20" pos:end="801:62">(<expr pos:start="801:21" pos:end="801:61"><operator pos:start="801:21" pos:end="801:21">!</operator><call pos:start="801:22" pos:end="801:61"><name pos:start="801:22" pos:end="801:35">arm_dc_feature</name><argument_list pos:start="801:36" pos:end="801:61">(<argument pos:start="801:37" pos:end="801:37"><expr pos:start="801:37" pos:end="801:37"><name pos:start="801:37" pos:end="801:37">s</name></expr></argument>, <argument pos:start="801:40" pos:end="801:60"><expr pos:start="801:40" pos:end="801:60"><name pos:start="801:40" pos:end="801:60">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="801:64" pos:end="805:17">{<block_content pos:start="803:21" pos:end="803:36">

                    <goto pos:start="803:21" pos:end="803:36">goto <name pos:start="803:26" pos:end="803:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="809:13" pos:end="809:34"><expr pos:start="809:13" pos:end="809:33"><name pos:start="809:13" pos:end="809:15">tmp</name> <operator pos:start="809:17" pos:end="809:17">=</operator> <call pos:start="809:19" pos:end="809:33"><name pos:start="809:19" pos:end="809:26">load_reg</name><argument_list pos:start="809:27" pos:end="809:33">(<argument pos:start="809:28" pos:end="809:28"><expr pos:start="809:28" pos:end="809:28"><name pos:start="809:28" pos:end="809:28">s</name></expr></argument>, <argument pos:start="809:31" pos:end="809:32"><expr pos:start="809:31" pos:end="809:32"><name pos:start="809:31" pos:end="809:32">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="811:13" pos:end="811:36"><expr pos:start="811:13" pos:end="811:35"><name pos:start="811:13" pos:end="811:17">shift</name> <operator pos:start="811:19" pos:end="811:19">=</operator> <operator pos:start="811:21" pos:end="811:21">(</operator><name pos:start="811:22" pos:end="811:25">insn</name> <operator pos:start="811:27" pos:end="811:28">&gt;&gt;</operator> <literal type="number" pos:start="811:30" pos:end="811:30">4</literal><operator pos:start="811:31" pos:end="811:31">)</operator> <operator pos:start="811:33" pos:end="811:33">&amp;</operator> <literal type="number" pos:start="811:35" pos:end="811:35">3</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="813:13" pos:end="815:49">/* ??? In many cases it's not necessary to do a

               rotate, a shift is sufficient.  */</comment>

            <if_stmt pos:start="817:13" pos:end="819:55"><if pos:start="817:13" pos:end="819:55">if <condition pos:start="817:16" pos:end="817:27">(<expr pos:start="817:17" pos:end="817:26"><name pos:start="817:17" pos:end="817:21">shift</name> <operator pos:start="817:23" pos:end="817:24">!=</operator> <literal type="number" pos:start="817:26" pos:end="817:26">0</literal></expr>)</condition><block type="pseudo" pos:start="819:17" pos:end="819:55"><block_content pos:start="819:17" pos:end="819:55">

                <expr_stmt pos:start="819:17" pos:end="819:55"><expr pos:start="819:17" pos:end="819:54"><call pos:start="819:17" pos:end="819:54"><name pos:start="819:17" pos:end="819:33">tcg_gen_rotri_i32</name><argument_list pos:start="819:34" pos:end="819:54">(<argument pos:start="819:35" pos:end="819:37"><expr pos:start="819:35" pos:end="819:37"><name pos:start="819:35" pos:end="819:37">tmp</name></expr></argument>, <argument pos:start="819:40" pos:end="819:42"><expr pos:start="819:40" pos:end="819:42"><name pos:start="819:40" pos:end="819:42">tmp</name></expr></argument>, <argument pos:start="819:45" pos:end="819:53"><expr pos:start="819:45" pos:end="819:53"><name pos:start="819:45" pos:end="819:49">shift</name> <operator pos:start="819:51" pos:end="819:51">*</operator> <literal type="number" pos:start="819:53" pos:end="819:53">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="821:13" pos:end="821:34"><expr pos:start="821:13" pos:end="821:33"><name pos:start="821:13" pos:end="821:14">op</name> <operator pos:start="821:16" pos:end="821:16">=</operator> <operator pos:start="821:18" pos:end="821:18">(</operator><name pos:start="821:19" pos:end="821:22">insn</name> <operator pos:start="821:24" pos:end="821:25">&gt;&gt;</operator> <literal type="number" pos:start="821:27" pos:end="821:28">20</literal><operator pos:start="821:29" pos:end="821:29">)</operator> <operator pos:start="821:31" pos:end="821:31">&amp;</operator> <literal type="number" pos:start="821:33" pos:end="821:33">7</literal></expr>;</expr_stmt>

            <switch pos:start="823:13" pos:end="841:13">switch <condition pos:start="823:20" pos:end="823:23">(<expr pos:start="823:21" pos:end="823:22"><name pos:start="823:21" pos:end="823:22">op</name></expr>)</condition> <block pos:start="823:25" pos:end="841:13">{<block_content pos:start="825:13" pos:end="839:39">

            <case pos:start="825:13" pos:end="825:19">case <expr pos:start="825:18" pos:end="825:18"><literal type="number" pos:start="825:18" pos:end="825:18">0</literal></expr>:</case> <expr_stmt pos:start="825:21" pos:end="825:34"><expr pos:start="825:21" pos:end="825:33"><call pos:start="825:21" pos:end="825:33"><name pos:start="825:21" pos:end="825:28">gen_sxth</name><argument_list pos:start="825:29" pos:end="825:33">(<argument pos:start="825:30" pos:end="825:32"><expr pos:start="825:30" pos:end="825:32"><name pos:start="825:30" pos:end="825:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="825:38" pos:end="825:43">break;</break>

            <case pos:start="827:13" pos:end="827:19">case <expr pos:start="827:18" pos:end="827:18"><literal type="number" pos:start="827:18" pos:end="827:18">1</literal></expr>:</case> <expr_stmt pos:start="827:21" pos:end="827:34"><expr pos:start="827:21" pos:end="827:33"><call pos:start="827:21" pos:end="827:33"><name pos:start="827:21" pos:end="827:28">gen_uxth</name><argument_list pos:start="827:29" pos:end="827:33">(<argument pos:start="827:30" pos:end="827:32"><expr pos:start="827:30" pos:end="827:32"><name pos:start="827:30" pos:end="827:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="827:38" pos:end="827:43">break;</break>

            <case pos:start="829:13" pos:end="829:19">case <expr pos:start="829:18" pos:end="829:18"><literal type="number" pos:start="829:18" pos:end="829:18">2</literal></expr>:</case> <expr_stmt pos:start="829:21" pos:end="829:36"><expr pos:start="829:21" pos:end="829:35"><call pos:start="829:21" pos:end="829:35"><name pos:start="829:21" pos:end="829:30">gen_sxtb16</name><argument_list pos:start="829:31" pos:end="829:35">(<argument pos:start="829:32" pos:end="829:34"><expr pos:start="829:32" pos:end="829:34"><name pos:start="829:32" pos:end="829:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="829:38" pos:end="829:43">break;</break>

            <case pos:start="831:13" pos:end="831:19">case <expr pos:start="831:18" pos:end="831:18"><literal type="number" pos:start="831:18" pos:end="831:18">3</literal></expr>:</case> <expr_stmt pos:start="831:21" pos:end="831:36"><expr pos:start="831:21" pos:end="831:35"><call pos:start="831:21" pos:end="831:35"><name pos:start="831:21" pos:end="831:30">gen_uxtb16</name><argument_list pos:start="831:31" pos:end="831:35">(<argument pos:start="831:32" pos:end="831:34"><expr pos:start="831:32" pos:end="831:34"><name pos:start="831:32" pos:end="831:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="831:38" pos:end="831:43">break;</break>

            <case pos:start="833:13" pos:end="833:19">case <expr pos:start="833:18" pos:end="833:18"><literal type="number" pos:start="833:18" pos:end="833:18">4</literal></expr>:</case> <expr_stmt pos:start="833:21" pos:end="833:34"><expr pos:start="833:21" pos:end="833:33"><call pos:start="833:21" pos:end="833:33"><name pos:start="833:21" pos:end="833:28">gen_sxtb</name><argument_list pos:start="833:29" pos:end="833:33">(<argument pos:start="833:30" pos:end="833:32"><expr pos:start="833:30" pos:end="833:32"><name pos:start="833:30" pos:end="833:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="833:38" pos:end="833:43">break;</break>

            <case pos:start="835:13" pos:end="835:19">case <expr pos:start="835:18" pos:end="835:18"><literal type="number" pos:start="835:18" pos:end="835:18">5</literal></expr>:</case> <expr_stmt pos:start="835:21" pos:end="835:34"><expr pos:start="835:21" pos:end="835:33"><call pos:start="835:21" pos:end="835:33"><name pos:start="835:21" pos:end="835:28">gen_uxtb</name><argument_list pos:start="835:29" pos:end="835:33">(<argument pos:start="835:30" pos:end="835:32"><expr pos:start="835:30" pos:end="835:32"><name pos:start="835:30" pos:end="835:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break pos:start="835:38" pos:end="835:43">break;</break>

            <default pos:start="837:13" pos:end="837:20">default:</default>

                <expr_stmt pos:start="839:17" pos:end="839:39"><expr pos:start="839:17" pos:end="839:38"><call pos:start="839:17" pos:end="839:38"><name pos:start="839:17" pos:end="839:36">g_assert_not_reached</name><argument_list pos:start="839:37" pos:end="839:38">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <if_stmt pos:start="843:13" pos:end="859:13"><if pos:start="843:13" pos:end="859:13">if <condition pos:start="843:16" pos:end="843:25">(<expr pos:start="843:17" pos:end="843:24"><name pos:start="843:17" pos:end="843:18">rn</name> <operator pos:start="843:20" pos:end="843:21">!=</operator> <literal type="number" pos:start="843:23" pos:end="843:24">15</literal></expr>)</condition> <block pos:start="843:27" pos:end="859:13">{<block_content pos:start="845:17" pos:end="857:17">

                <expr_stmt pos:start="845:17" pos:end="845:39"><expr pos:start="845:17" pos:end="845:38"><name pos:start="845:17" pos:end="845:20">tmp2</name> <operator pos:start="845:22" pos:end="845:22">=</operator> <call pos:start="845:24" pos:end="845:38"><name pos:start="845:24" pos:end="845:31">load_reg</name><argument_list pos:start="845:32" pos:end="845:38">(<argument pos:start="845:33" pos:end="845:33"><expr pos:start="845:33" pos:end="845:33"><name pos:start="845:33" pos:end="845:33">s</name></expr></argument>, <argument pos:start="845:36" pos:end="845:37"><expr pos:start="845:36" pos:end="845:37"><name pos:start="845:36" pos:end="845:37">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="847:17" pos:end="857:17"><if pos:start="847:17" pos:end="851:17">if <condition pos:start="847:20" pos:end="847:35">(<expr pos:start="847:21" pos:end="847:34"><operator pos:start="847:21" pos:end="847:21">(</operator><name pos:start="847:22" pos:end="847:23">op</name> <operator pos:start="847:25" pos:end="847:26">&gt;&gt;</operator> <literal type="number" pos:start="847:28" pos:end="847:28">1</literal><operator pos:start="847:29" pos:end="847:29">)</operator> <operator pos:start="847:31" pos:end="847:32">==</operator> <literal type="number" pos:start="847:34" pos:end="847:34">1</literal></expr>)</condition> <block pos:start="847:37" pos:end="851:17">{<block_content pos:start="849:21" pos:end="849:41">

                    <expr_stmt pos:start="849:21" pos:end="849:41"><expr pos:start="849:21" pos:end="849:40"><call pos:start="849:21" pos:end="849:40"><name pos:start="849:21" pos:end="849:29">gen_add16</name><argument_list pos:start="849:30" pos:end="849:40">(<argument pos:start="849:31" pos:end="849:33"><expr pos:start="849:31" pos:end="849:33"><name pos:start="849:31" pos:end="849:33">tmp</name></expr></argument>, <argument pos:start="849:36" pos:end="849:39"><expr pos:start="849:36" pos:end="849:39"><name pos:start="849:36" pos:end="849:39">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="851:19" pos:end="857:17">else <block pos:start="851:24" pos:end="857:17">{<block_content pos:start="853:21" pos:end="855:44">

                    <expr_stmt pos:start="853:21" pos:end="853:52"><expr pos:start="853:21" pos:end="853:51"><call pos:start="853:21" pos:end="853:51"><name pos:start="853:21" pos:end="853:35">tcg_gen_add_i32</name><argument_list pos:start="853:36" pos:end="853:51">(<argument pos:start="853:37" pos:end="853:39"><expr pos:start="853:37" pos:end="853:39"><name pos:start="853:37" pos:end="853:39">tmp</name></expr></argument>, <argument pos:start="853:42" pos:end="853:44"><expr pos:start="853:42" pos:end="853:44"><name pos:start="853:42" pos:end="853:44">tmp</name></expr></argument>, <argument pos:start="853:47" pos:end="853:50"><expr pos:start="853:47" pos:end="853:50"><name pos:start="853:47" pos:end="853:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="855:21" pos:end="855:44"><expr pos:start="855:21" pos:end="855:43"><call pos:start="855:21" pos:end="855:43"><name pos:start="855:21" pos:end="855:37">tcg_temp_free_i32</name><argument_list pos:start="855:38" pos:end="855:43">(<argument pos:start="855:39" pos:end="855:42"><expr pos:start="855:39" pos:end="855:42"><name pos:start="855:39" pos:end="855:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="861:13" pos:end="861:34"><expr pos:start="861:13" pos:end="861:33"><call pos:start="861:13" pos:end="861:33"><name pos:start="861:13" pos:end="861:21">store_reg</name><argument_list pos:start="861:22" pos:end="861:33">(<argument pos:start="861:23" pos:end="861:23"><expr pos:start="861:23" pos:end="861:23"><name pos:start="861:23" pos:end="861:23">s</name></expr></argument>, <argument pos:start="861:26" pos:end="861:27"><expr pos:start="861:26" pos:end="861:27"><name pos:start="861:26" pos:end="861:27">rd</name></expr></argument>, <argument pos:start="861:30" pos:end="861:32"><expr pos:start="861:30" pos:end="861:32"><name pos:start="861:30" pos:end="861:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="863:13" pos:end="863:18">break;</break>

        <case pos:start="865:9" pos:end="865:15">case <expr pos:start="865:14" pos:end="865:14"><literal type="number" pos:start="865:14" pos:end="865:14">2</literal></expr>:</case> <comment type="block" pos:start="865:17" pos:end="865:41">/* SIMD add/subtract.  */</comment>

            <if_stmt pos:start="867:13" pos:end="871:13"><if pos:start="867:13" pos:end="871:13">if <condition pos:start="867:16" pos:end="867:58">(<expr pos:start="867:17" pos:end="867:57"><operator pos:start="867:17" pos:end="867:17">!</operator><call pos:start="867:18" pos:end="867:57"><name pos:start="867:18" pos:end="867:31">arm_dc_feature</name><argument_list pos:start="867:32" pos:end="867:57">(<argument pos:start="867:33" pos:end="867:33"><expr pos:start="867:33" pos:end="867:33"><name pos:start="867:33" pos:end="867:33">s</name></expr></argument>, <argument pos:start="867:36" pos:end="867:56"><expr pos:start="867:36" pos:end="867:56"><name pos:start="867:36" pos:end="867:56">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="867:60" pos:end="871:13">{<block_content pos:start="869:17" pos:end="869:32">

                <goto pos:start="869:17" pos:end="869:32">goto <name pos:start="869:22" pos:end="869:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="873:13" pos:end="873:34"><expr pos:start="873:13" pos:end="873:33"><name pos:start="873:13" pos:end="873:14">op</name> <operator pos:start="873:16" pos:end="873:16">=</operator> <operator pos:start="873:18" pos:end="873:18">(</operator><name pos:start="873:19" pos:end="873:22">insn</name> <operator pos:start="873:24" pos:end="873:25">&gt;&gt;</operator> <literal type="number" pos:start="873:27" pos:end="873:28">20</literal><operator pos:start="873:29" pos:end="873:29">)</operator> <operator pos:start="873:31" pos:end="873:31">&amp;</operator> <literal type="number" pos:start="873:33" pos:end="873:33">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="875:13" pos:end="875:36"><expr pos:start="875:13" pos:end="875:35"><name pos:start="875:13" pos:end="875:17">shift</name> <operator pos:start="875:19" pos:end="875:19">=</operator> <operator pos:start="875:21" pos:end="875:21">(</operator><name pos:start="875:22" pos:end="875:25">insn</name> <operator pos:start="875:27" pos:end="875:28">&gt;&gt;</operator> <literal type="number" pos:start="875:30" pos:end="875:30">4</literal><operator pos:start="875:31" pos:end="875:31">)</operator> <operator pos:start="875:33" pos:end="875:33">&amp;</operator> <literal type="number" pos:start="875:35" pos:end="875:35">7</literal></expr>;</expr_stmt>

            <if_stmt pos:start="877:13" pos:end="879:32"><if pos:start="877:13" pos:end="879:32">if <condition pos:start="877:16" pos:end="877:50">(<expr pos:start="877:17" pos:end="877:49"><operator pos:start="877:17" pos:end="877:17">(</operator><name pos:start="877:18" pos:end="877:19">op</name> <operator pos:start="877:21" pos:end="877:21">&amp;</operator> <literal type="number" pos:start="877:23" pos:end="877:23">3</literal><operator pos:start="877:24" pos:end="877:24">)</operator> <operator pos:start="877:26" pos:end="877:27">==</operator> <literal type="number" pos:start="877:29" pos:end="877:29">3</literal> <operator pos:start="877:31" pos:end="877:32">||</operator> <operator pos:start="877:34" pos:end="877:34">(</operator><name pos:start="877:35" pos:end="877:39">shift</name> <operator pos:start="877:41" pos:end="877:41">&amp;</operator> <literal type="number" pos:start="877:43" pos:end="877:43">3</literal><operator pos:start="877:44" pos:end="877:44">)</operator> <operator pos:start="877:46" pos:end="877:47">==</operator> <literal type="number" pos:start="877:49" pos:end="877:49">3</literal></expr>)</condition><block type="pseudo" pos:start="879:17" pos:end="879:32"><block_content pos:start="879:17" pos:end="879:32">

                <goto pos:start="879:17" pos:end="879:32">goto <name pos:start="879:22" pos:end="879:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="881:13" pos:end="881:34"><expr pos:start="881:13" pos:end="881:33"><name pos:start="881:13" pos:end="881:15">tmp</name> <operator pos:start="881:17" pos:end="881:17">=</operator> <call pos:start="881:19" pos:end="881:33"><name pos:start="881:19" pos:end="881:26">load_reg</name><argument_list pos:start="881:27" pos:end="881:33">(<argument pos:start="881:28" pos:end="881:28"><expr pos:start="881:28" pos:end="881:28"><name pos:start="881:28" pos:end="881:28">s</name></expr></argument>, <argument pos:start="881:31" pos:end="881:32"><expr pos:start="881:31" pos:end="881:32"><name pos:start="881:31" pos:end="881:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="883:13" pos:end="883:35"><expr pos:start="883:13" pos:end="883:34"><name pos:start="883:13" pos:end="883:16">tmp2</name> <operator pos:start="883:18" pos:end="883:18">=</operator> <call pos:start="883:20" pos:end="883:34"><name pos:start="883:20" pos:end="883:27">load_reg</name><argument_list pos:start="883:28" pos:end="883:34">(<argument pos:start="883:29" pos:end="883:29"><expr pos:start="883:29" pos:end="883:29"><name pos:start="883:29" pos:end="883:29">s</name></expr></argument>, <argument pos:start="883:32" pos:end="883:33"><expr pos:start="883:32" pos:end="883:33"><name pos:start="883:32" pos:end="883:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="885:13" pos:end="885:61"><expr pos:start="885:13" pos:end="885:60"><call pos:start="885:13" pos:end="885:60"><name pos:start="885:13" pos:end="885:38">gen_thumb2_parallel_addsub</name><argument_list pos:start="885:39" pos:end="885:60">(<argument pos:start="885:40" pos:end="885:41"><expr pos:start="885:40" pos:end="885:41"><name pos:start="885:40" pos:end="885:41">op</name></expr></argument>, <argument pos:start="885:44" pos:end="885:48"><expr pos:start="885:44" pos:end="885:48"><name pos:start="885:44" pos:end="885:48">shift</name></expr></argument>, <argument pos:start="885:51" pos:end="885:53"><expr pos:start="885:51" pos:end="885:53"><name pos:start="885:51" pos:end="885:53">tmp</name></expr></argument>, <argument pos:start="885:56" pos:end="885:59"><expr pos:start="885:56" pos:end="885:59"><name pos:start="885:56" pos:end="885:59">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="887:13" pos:end="887:36"><expr pos:start="887:13" pos:end="887:35"><call pos:start="887:13" pos:end="887:35"><name pos:start="887:13" pos:end="887:29">tcg_temp_free_i32</name><argument_list pos:start="887:30" pos:end="887:35">(<argument pos:start="887:31" pos:end="887:34"><expr pos:start="887:31" pos:end="887:34"><name pos:start="887:31" pos:end="887:34">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="889:13" pos:end="889:34"><expr pos:start="889:13" pos:end="889:33"><call pos:start="889:13" pos:end="889:33"><name pos:start="889:13" pos:end="889:21">store_reg</name><argument_list pos:start="889:22" pos:end="889:33">(<argument pos:start="889:23" pos:end="889:23"><expr pos:start="889:23" pos:end="889:23"><name pos:start="889:23" pos:end="889:23">s</name></expr></argument>, <argument pos:start="889:26" pos:end="889:27"><expr pos:start="889:26" pos:end="889:27"><name pos:start="889:26" pos:end="889:27">rd</name></expr></argument>, <argument pos:start="889:30" pos:end="889:32"><expr pos:start="889:30" pos:end="889:32"><name pos:start="889:30" pos:end="889:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="891:13" pos:end="891:18">break;</break>

        <case pos:start="893:9" pos:end="893:15">case <expr pos:start="893:14" pos:end="893:14"><literal type="number" pos:start="893:14" pos:end="893:14">3</literal></expr>:</case> <comment type="block" pos:start="893:17" pos:end="893:45">/* Other data processing.  */</comment>

            <expr_stmt pos:start="895:13" pos:end="895:59"><expr pos:start="895:13" pos:end="895:58"><name pos:start="895:13" pos:end="895:14">op</name> <operator pos:start="895:16" pos:end="895:16">=</operator> <operator pos:start="895:18" pos:end="895:18">(</operator><operator pos:start="895:19" pos:end="895:19">(</operator><name pos:start="895:20" pos:end="895:23">insn</name> <operator pos:start="895:25" pos:end="895:26">&gt;&gt;</operator> <literal type="number" pos:start="895:28" pos:end="895:29">17</literal><operator pos:start="895:30" pos:end="895:30">)</operator> <operator pos:start="895:32" pos:end="895:32">&amp;</operator> <literal type="number" pos:start="895:34" pos:end="895:37">0x38</literal><operator pos:start="895:38" pos:end="895:38">)</operator> <operator pos:start="895:40" pos:end="895:40">|</operator> <operator pos:start="895:42" pos:end="895:42">(</operator><operator pos:start="895:43" pos:end="895:43">(</operator><name pos:start="895:44" pos:end="895:47">insn</name> <operator pos:start="895:49" pos:end="895:50">&gt;&gt;</operator> <literal type="number" pos:start="895:52" pos:end="895:52">4</literal><operator pos:start="895:53" pos:end="895:53">)</operator> <operator pos:start="895:55" pos:end="895:55">&amp;</operator> <literal type="number" pos:start="895:57" pos:end="895:57">7</literal><operator pos:start="895:58" pos:end="895:58">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="897:13" pos:end="1087:13"><if pos:start="897:13" pos:end="925:13">if <condition pos:start="897:16" pos:end="897:23">(<expr pos:start="897:17" pos:end="897:22"><name pos:start="897:17" pos:end="897:18">op</name> <operator pos:start="897:20" pos:end="897:20">&lt;</operator> <literal type="number" pos:start="897:22" pos:end="897:22">4</literal></expr>)</condition> <block pos:start="897:25" pos:end="925:13">{<block_content pos:start="901:17" pos:end="923:40">

                <comment type="block" pos:start="899:17" pos:end="899:47">/* Saturating add/subtract.  */</comment>

                <if_stmt pos:start="901:17" pos:end="905:17"><if pos:start="901:17" pos:end="905:17">if <condition pos:start="901:20" pos:end="901:62">(<expr pos:start="901:21" pos:end="901:61"><operator pos:start="901:21" pos:end="901:21">!</operator><call pos:start="901:22" pos:end="901:61"><name pos:start="901:22" pos:end="901:35">arm_dc_feature</name><argument_list pos:start="901:36" pos:end="901:61">(<argument pos:start="901:37" pos:end="901:37"><expr pos:start="901:37" pos:end="901:37"><name pos:start="901:37" pos:end="901:37">s</name></expr></argument>, <argument pos:start="901:40" pos:end="901:60"><expr pos:start="901:40" pos:end="901:60"><name pos:start="901:40" pos:end="901:60">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="901:64" pos:end="905:17">{<block_content pos:start="903:21" pos:end="903:36">

                    <goto pos:start="903:21" pos:end="903:36">goto <name pos:start="903:26" pos:end="903:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="907:17" pos:end="907:38"><expr pos:start="907:17" pos:end="907:37"><name pos:start="907:17" pos:end="907:19">tmp</name> <operator pos:start="907:21" pos:end="907:21">=</operator> <call pos:start="907:23" pos:end="907:37"><name pos:start="907:23" pos:end="907:30">load_reg</name><argument_list pos:start="907:31" pos:end="907:37">(<argument pos:start="907:32" pos:end="907:32"><expr pos:start="907:32" pos:end="907:32"><name pos:start="907:32" pos:end="907:32">s</name></expr></argument>, <argument pos:start="907:35" pos:end="907:36"><expr pos:start="907:35" pos:end="907:36"><name pos:start="907:35" pos:end="907:36">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="909:17" pos:end="909:39"><expr pos:start="909:17" pos:end="909:38"><name pos:start="909:17" pos:end="909:20">tmp2</name> <operator pos:start="909:22" pos:end="909:22">=</operator> <call pos:start="909:24" pos:end="909:38"><name pos:start="909:24" pos:end="909:31">load_reg</name><argument_list pos:start="909:32" pos:end="909:38">(<argument pos:start="909:33" pos:end="909:33"><expr pos:start="909:33" pos:end="909:33"><name pos:start="909:33" pos:end="909:33">s</name></expr></argument>, <argument pos:start="909:36" pos:end="909:37"><expr pos:start="909:36" pos:end="909:37"><name pos:start="909:36" pos:end="909:37">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="911:17" pos:end="913:66"><if pos:start="911:17" pos:end="913:66">if <condition pos:start="911:20" pos:end="911:27">(<expr pos:start="911:21" pos:end="911:26"><name pos:start="911:21" pos:end="911:22">op</name> <operator pos:start="911:24" pos:end="911:24">&amp;</operator> <literal type="number" pos:start="911:26" pos:end="911:26">1</literal></expr>)</condition><block type="pseudo" pos:start="913:21" pos:end="913:66"><block_content pos:start="913:21" pos:end="913:66">

                    <expr_stmt pos:start="913:21" pos:end="913:66"><expr pos:start="913:21" pos:end="913:65"><call pos:start="913:21" pos:end="913:65"><name pos:start="913:21" pos:end="913:46">gen_helper_double_saturate</name><argument_list pos:start="913:47" pos:end="913:65">(<argument pos:start="913:48" pos:end="913:50"><expr pos:start="913:48" pos:end="913:50"><name pos:start="913:48" pos:end="913:50">tmp</name></expr></argument>, <argument pos:start="913:53" pos:end="913:59"><expr pos:start="913:53" pos:end="913:59"><name pos:start="913:53" pos:end="913:59">cpu_env</name></expr></argument>, <argument pos:start="913:62" pos:end="913:64"><expr pos:start="913:62" pos:end="913:64"><name pos:start="913:62" pos:end="913:64">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="915:17" pos:end="921:69"><if pos:start="915:17" pos:end="917:69">if <condition pos:start="915:20" pos:end="915:27">(<expr pos:start="915:21" pos:end="915:26"><name pos:start="915:21" pos:end="915:22">op</name> <operator pos:start="915:24" pos:end="915:24">&amp;</operator> <literal type="number" pos:start="915:26" pos:end="915:26">2</literal></expr>)</condition><block type="pseudo" pos:start="917:21" pos:end="917:69"><block_content pos:start="917:21" pos:end="917:69">

                    <expr_stmt pos:start="917:21" pos:end="917:69"><expr pos:start="917:21" pos:end="917:68"><call pos:start="917:21" pos:end="917:68"><name pos:start="917:21" pos:end="917:43">gen_helper_sub_saturate</name><argument_list pos:start="917:44" pos:end="917:68">(<argument pos:start="917:45" pos:end="917:47"><expr pos:start="917:45" pos:end="917:47"><name pos:start="917:45" pos:end="917:47">tmp</name></expr></argument>, <argument pos:start="917:50" pos:end="917:56"><expr pos:start="917:50" pos:end="917:56"><name pos:start="917:50" pos:end="917:56">cpu_env</name></expr></argument>, <argument pos:start="917:59" pos:end="917:62"><expr pos:start="917:59" pos:end="917:62"><name pos:start="917:59" pos:end="917:62">tmp2</name></expr></argument>, <argument pos:start="917:65" pos:end="917:67"><expr pos:start="917:65" pos:end="917:67"><name pos:start="917:65" pos:end="917:67">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="919:17" pos:end="921:69">else<block type="pseudo" pos:start="921:21" pos:end="921:69"><block_content pos:start="921:21" pos:end="921:69">

                    <expr_stmt pos:start="921:21" pos:end="921:69"><expr pos:start="921:21" pos:end="921:68"><call pos:start="921:21" pos:end="921:68"><name pos:start="921:21" pos:end="921:43">gen_helper_add_saturate</name><argument_list pos:start="921:44" pos:end="921:68">(<argument pos:start="921:45" pos:end="921:47"><expr pos:start="921:45" pos:end="921:47"><name pos:start="921:45" pos:end="921:47">tmp</name></expr></argument>, <argument pos:start="921:50" pos:end="921:56"><expr pos:start="921:50" pos:end="921:56"><name pos:start="921:50" pos:end="921:56">cpu_env</name></expr></argument>, <argument pos:start="921:59" pos:end="921:61"><expr pos:start="921:59" pos:end="921:61"><name pos:start="921:59" pos:end="921:61">tmp</name></expr></argument>, <argument pos:start="921:64" pos:end="921:67"><expr pos:start="921:64" pos:end="921:67"><name pos:start="921:64" pos:end="921:67">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="923:17" pos:end="923:40"><expr pos:start="923:17" pos:end="923:39"><call pos:start="923:17" pos:end="923:39"><name pos:start="923:17" pos:end="923:33">tcg_temp_free_i32</name><argument_list pos:start="923:34" pos:end="923:39">(<argument pos:start="923:35" pos:end="923:38"><expr pos:start="923:35" pos:end="923:38"><name pos:start="923:35" pos:end="923:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="925:15" pos:end="1087:13">else <block pos:start="925:20" pos:end="1087:13">{<block_content pos:start="927:17" pos:end="1085:17">

                <switch pos:start="927:17" pos:end="975:17">switch <condition pos:start="927:24" pos:end="927:27">(<expr pos:start="927:25" pos:end="927:26"><name pos:start="927:25" pos:end="927:26">op</name></expr>)</condition> <block pos:start="927:29" pos:end="975:17">{<block_content pos:start="929:17" pos:end="973:36">

                <case pos:start="929:17" pos:end="929:26">case <expr pos:start="929:22" pos:end="929:25"><literal type="number" pos:start="929:22" pos:end="929:25">0x0a</literal></expr>:</case> <comment type="block" pos:start="929:28" pos:end="929:37">/* rbit */</comment>

                <case pos:start="931:17" pos:end="931:26">case <expr pos:start="931:22" pos:end="931:25"><literal type="number" pos:start="931:22" pos:end="931:25">0x08</literal></expr>:</case> <comment type="block" pos:start="931:28" pos:end="931:36">/* rev */</comment>

                <case pos:start="933:17" pos:end="933:26">case <expr pos:start="933:22" pos:end="933:25"><literal type="number" pos:start="933:22" pos:end="933:25">0x09</literal></expr>:</case> <comment type="block" pos:start="933:28" pos:end="933:38">/* rev16 */</comment>

                <case pos:start="935:17" pos:end="935:26">case <expr pos:start="935:22" pos:end="935:25"><literal type="number" pos:start="935:22" pos:end="935:25">0x0b</literal></expr>:</case> <comment type="block" pos:start="935:28" pos:end="935:38">/* revsh */</comment>

                <case pos:start="937:17" pos:end="937:26">case <expr pos:start="937:22" pos:end="937:25"><literal type="number" pos:start="937:22" pos:end="937:25">0x18</literal></expr>:</case> <comment type="block" pos:start="937:28" pos:end="937:36">/* clz */</comment>

                    <break pos:start="939:21" pos:end="939:26">break;</break>

                <case pos:start="941:17" pos:end="941:26">case <expr pos:start="941:22" pos:end="941:25"><literal type="number" pos:start="941:22" pos:end="941:25">0x10</literal></expr>:</case> <comment type="block" pos:start="941:28" pos:end="941:36">/* sel */</comment>

                    <if_stmt pos:start="943:21" pos:end="947:21"><if pos:start="943:21" pos:end="947:21">if <condition pos:start="943:24" pos:end="943:66">(<expr pos:start="943:25" pos:end="943:65"><operator pos:start="943:25" pos:end="943:25">!</operator><call pos:start="943:26" pos:end="943:65"><name pos:start="943:26" pos:end="943:39">arm_dc_feature</name><argument_list pos:start="943:40" pos:end="943:65">(<argument pos:start="943:41" pos:end="943:41"><expr pos:start="943:41" pos:end="943:41"><name pos:start="943:41" pos:end="943:41">s</name></expr></argument>, <argument pos:start="943:44" pos:end="943:64"><expr pos:start="943:44" pos:end="943:64"><name pos:start="943:44" pos:end="943:64">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="943:68" pos:end="947:21">{<block_content pos:start="945:25" pos:end="945:40">

                        <goto pos:start="945:25" pos:end="945:40">goto <name pos:start="945:30" pos:end="945:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="949:21" pos:end="949:26">break;</break>

                <case pos:start="951:17" pos:end="951:26">case <expr pos:start="951:22" pos:end="951:25"><literal type="number" pos:start="951:22" pos:end="951:25">0x20</literal></expr>:</case> <comment type="block" pos:start="951:28" pos:end="951:45">/* crc32/crc32c */</comment>

                <case pos:start="953:17" pos:end="953:26">case <expr pos:start="953:22" pos:end="953:25"><literal type="number" pos:start="953:22" pos:end="953:25">0x21</literal></expr>:</case>

                <case pos:start="955:17" pos:end="955:26">case <expr pos:start="955:22" pos:end="955:25"><literal type="number" pos:start="955:22" pos:end="955:25">0x22</literal></expr>:</case>

                <case pos:start="957:17" pos:end="957:26">case <expr pos:start="957:22" pos:end="957:25"><literal type="number" pos:start="957:22" pos:end="957:25">0x28</literal></expr>:</case>

                <case pos:start="959:17" pos:end="959:26">case <expr pos:start="959:22" pos:end="959:25"><literal type="number" pos:start="959:22" pos:end="959:25">0x29</literal></expr>:</case>

                <case pos:start="961:17" pos:end="961:26">case <expr pos:start="961:22" pos:end="961:25"><literal type="number" pos:start="961:22" pos:end="961:25">0x2a</literal></expr>:</case>

                    <if_stmt pos:start="963:21" pos:end="967:21"><if pos:start="963:21" pos:end="967:21">if <condition pos:start="963:24" pos:end="963:60">(<expr pos:start="963:25" pos:end="963:59"><operator pos:start="963:25" pos:end="963:25">!</operator><call pos:start="963:26" pos:end="963:59"><name pos:start="963:26" pos:end="963:39">arm_dc_feature</name><argument_list pos:start="963:40" pos:end="963:59">(<argument pos:start="963:41" pos:end="963:41"><expr pos:start="963:41" pos:end="963:41"><name pos:start="963:41" pos:end="963:41">s</name></expr></argument>, <argument pos:start="963:44" pos:end="963:58"><expr pos:start="963:44" pos:end="963:58"><name pos:start="963:44" pos:end="963:58">ARM_FEATURE_CRC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="963:62" pos:end="967:21">{<block_content pos:start="965:25" pos:end="965:40">

                        <goto pos:start="965:25" pos:end="965:40">goto <name pos:start="965:30" pos:end="965:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="969:21" pos:end="969:26">break;</break>

                <default pos:start="971:17" pos:end="971:24">default:</default>

                    <goto pos:start="973:21" pos:end="973:36">goto <name pos:start="973:26" pos:end="973:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <expr_stmt pos:start="977:17" pos:end="977:38"><expr pos:start="977:17" pos:end="977:37"><name pos:start="977:17" pos:end="977:19">tmp</name> <operator pos:start="977:21" pos:end="977:21">=</operator> <call pos:start="977:23" pos:end="977:37"><name pos:start="977:23" pos:end="977:30">load_reg</name><argument_list pos:start="977:31" pos:end="977:37">(<argument pos:start="977:32" pos:end="977:32"><expr pos:start="977:32" pos:end="977:32"><name pos:start="977:32" pos:end="977:32">s</name></expr></argument>, <argument pos:start="977:35" pos:end="977:36"><expr pos:start="977:35" pos:end="977:36"><name pos:start="977:35" pos:end="977:36">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="979:17" pos:end="1085:17">switch <condition pos:start="979:24" pos:end="979:27">(<expr pos:start="979:25" pos:end="979:26"><name pos:start="979:25" pos:end="979:26">op</name></expr>)</condition> <block pos:start="979:29" pos:end="1085:17">{<block_content pos:start="981:17" pos:end="1083:43">

                <case pos:start="981:17" pos:end="981:26">case <expr pos:start="981:22" pos:end="981:25"><literal type="number" pos:start="981:22" pos:end="981:25">0x0a</literal></expr>:</case> <comment type="block" pos:start="981:28" pos:end="981:37">/* rbit */</comment>

                    <expr_stmt pos:start="983:21" pos:end="983:46"><expr pos:start="983:21" pos:end="983:45"><call pos:start="983:21" pos:end="983:45"><name pos:start="983:21" pos:end="983:35">gen_helper_rbit</name><argument_list pos:start="983:36" pos:end="983:45">(<argument pos:start="983:37" pos:end="983:39"><expr pos:start="983:37" pos:end="983:39"><name pos:start="983:37" pos:end="983:39">tmp</name></expr></argument>, <argument pos:start="983:42" pos:end="983:44"><expr pos:start="983:42" pos:end="983:44"><name pos:start="983:42" pos:end="983:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="985:21" pos:end="985:26">break;</break>

                <case pos:start="987:17" pos:end="987:26">case <expr pos:start="987:22" pos:end="987:25"><literal type="number" pos:start="987:22" pos:end="987:25">0x08</literal></expr>:</case> <comment type="block" pos:start="987:28" pos:end="987:36">/* rev */</comment>

                    <expr_stmt pos:start="989:21" pos:end="989:50"><expr pos:start="989:21" pos:end="989:49"><call pos:start="989:21" pos:end="989:49"><name pos:start="989:21" pos:end="989:39">tcg_gen_bswap32_i32</name><argument_list pos:start="989:40" pos:end="989:49">(<argument pos:start="989:41" pos:end="989:43"><expr pos:start="989:41" pos:end="989:43"><name pos:start="989:41" pos:end="989:43">tmp</name></expr></argument>, <argument pos:start="989:46" pos:end="989:48"><expr pos:start="989:46" pos:end="989:48"><name pos:start="989:46" pos:end="989:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="991:21" pos:end="991:26">break;</break>

                <case pos:start="993:17" pos:end="993:26">case <expr pos:start="993:22" pos:end="993:25"><literal type="number" pos:start="993:22" pos:end="993:25">0x09</literal></expr>:</case> <comment type="block" pos:start="993:28" pos:end="993:38">/* rev16 */</comment>

                    <expr_stmt pos:start="995:21" pos:end="995:35"><expr pos:start="995:21" pos:end="995:34"><call pos:start="995:21" pos:end="995:34"><name pos:start="995:21" pos:end="995:29">gen_rev16</name><argument_list pos:start="995:30" pos:end="995:34">(<argument pos:start="995:31" pos:end="995:33"><expr pos:start="995:31" pos:end="995:33"><name pos:start="995:31" pos:end="995:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="997:21" pos:end="997:26">break;</break>

                <case pos:start="999:17" pos:end="999:26">case <expr pos:start="999:22" pos:end="999:25"><literal type="number" pos:start="999:22" pos:end="999:25">0x0b</literal></expr>:</case> <comment type="block" pos:start="999:28" pos:end="999:38">/* revsh */</comment>

                    <expr_stmt pos:start="1001:21" pos:end="1001:35"><expr pos:start="1001:21" pos:end="1001:34"><call pos:start="1001:21" pos:end="1001:34"><name pos:start="1001:21" pos:end="1001:29">gen_revsh</name><argument_list pos:start="1001:30" pos:end="1001:34">(<argument pos:start="1001:31" pos:end="1001:33"><expr pos:start="1001:31" pos:end="1001:33"><name pos:start="1001:31" pos:end="1001:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1003:21" pos:end="1003:26">break;</break>

                <case pos:start="1005:17" pos:end="1005:26">case <expr pos:start="1005:22" pos:end="1005:25"><literal type="number" pos:start="1005:22" pos:end="1005:25">0x10</literal></expr>:</case> <comment type="block" pos:start="1005:28" pos:end="1005:36">/* sel */</comment>

                    <expr_stmt pos:start="1007:21" pos:end="1007:43"><expr pos:start="1007:21" pos:end="1007:42"><name pos:start="1007:21" pos:end="1007:24">tmp2</name> <operator pos:start="1007:26" pos:end="1007:26">=</operator> <call pos:start="1007:28" pos:end="1007:42"><name pos:start="1007:28" pos:end="1007:35">load_reg</name><argument_list pos:start="1007:36" pos:end="1007:42">(<argument pos:start="1007:37" pos:end="1007:37"><expr pos:start="1007:37" pos:end="1007:37"><name pos:start="1007:37" pos:end="1007:37">s</name></expr></argument>, <argument pos:start="1007:40" pos:end="1007:41"><expr pos:start="1007:40" pos:end="1007:41"><name pos:start="1007:40" pos:end="1007:41">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1009:21" pos:end="1009:46"><expr pos:start="1009:21" pos:end="1009:45"><name pos:start="1009:21" pos:end="1009:24">tmp3</name> <operator pos:start="1009:26" pos:end="1009:26">=</operator> <call pos:start="1009:28" pos:end="1009:45"><name pos:start="1009:28" pos:end="1009:43">tcg_temp_new_i32</name><argument_list pos:start="1009:44" pos:end="1009:45">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1011:21" pos:end="1011:77"><expr pos:start="1011:21" pos:end="1011:76"><call pos:start="1011:21" pos:end="1011:76"><name pos:start="1011:21" pos:end="1011:34">tcg_gen_ld_i32</name><argument_list pos:start="1011:35" pos:end="1011:76">(<argument pos:start="1011:36" pos:end="1011:39"><expr pos:start="1011:36" pos:end="1011:39"><name pos:start="1011:36" pos:end="1011:39">tmp3</name></expr></argument>, <argument pos:start="1011:42" pos:end="1011:48"><expr pos:start="1011:42" pos:end="1011:48"><name pos:start="1011:42" pos:end="1011:48">cpu_env</name></expr></argument>, <argument pos:start="1011:51" pos:end="1011:75"><expr pos:start="1011:51" pos:end="1011:75"><call pos:start="1011:51" pos:end="1011:75"><name pos:start="1011:51" pos:end="1011:58">offsetof</name><argument_list pos:start="1011:59" pos:end="1011:75">(<argument pos:start="1011:60" pos:end="1011:70"><expr pos:start="1011:60" pos:end="1011:70"><name pos:start="1011:60" pos:end="1011:70">CPUARMState</name></expr></argument>, <argument pos:start="1011:73" pos:end="1011:74"><expr pos:start="1011:73" pos:end="1011:74"><name pos:start="1011:73" pos:end="1011:74">GE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1013:21" pos:end="1013:63"><expr pos:start="1013:21" pos:end="1013:62"><call pos:start="1013:21" pos:end="1013:62"><name pos:start="1013:21" pos:end="1013:40">gen_helper_sel_flags</name><argument_list pos:start="1013:41" pos:end="1013:62">(<argument pos:start="1013:42" pos:end="1013:44"><expr pos:start="1013:42" pos:end="1013:44"><name pos:start="1013:42" pos:end="1013:44">tmp</name></expr></argument>, <argument pos:start="1013:47" pos:end="1013:50"><expr pos:start="1013:47" pos:end="1013:50"><name pos:start="1013:47" pos:end="1013:50">tmp3</name></expr></argument>, <argument pos:start="1013:53" pos:end="1013:55"><expr pos:start="1013:53" pos:end="1013:55"><name pos:start="1013:53" pos:end="1013:55">tmp</name></expr></argument>, <argument pos:start="1013:58" pos:end="1013:61"><expr pos:start="1013:58" pos:end="1013:61"><name pos:start="1013:58" pos:end="1013:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1015:21" pos:end="1015:44"><expr pos:start="1015:21" pos:end="1015:43"><call pos:start="1015:21" pos:end="1015:43"><name pos:start="1015:21" pos:end="1015:37">tcg_temp_free_i32</name><argument_list pos:start="1015:38" pos:end="1015:43">(<argument pos:start="1015:39" pos:end="1015:42"><expr pos:start="1015:39" pos:end="1015:42"><name pos:start="1015:39" pos:end="1015:42">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1017:21" pos:end="1017:44"><expr pos:start="1017:21" pos:end="1017:43"><call pos:start="1017:21" pos:end="1017:43"><name pos:start="1017:21" pos:end="1017:37">tcg_temp_free_i32</name><argument_list pos:start="1017:38" pos:end="1017:43">(<argument pos:start="1017:39" pos:end="1017:42"><expr pos:start="1017:39" pos:end="1017:42"><name pos:start="1017:39" pos:end="1017:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1019:21" pos:end="1019:26">break;</break>

                <case pos:start="1021:17" pos:end="1021:26">case <expr pos:start="1021:22" pos:end="1021:25"><literal type="number" pos:start="1021:22" pos:end="1021:25">0x18</literal></expr>:</case> <comment type="block" pos:start="1021:28" pos:end="1021:36">/* clz */</comment>

                    <expr_stmt pos:start="1023:21" pos:end="1023:51"><expr pos:start="1023:21" pos:end="1023:50"><call pos:start="1023:21" pos:end="1023:50"><name pos:start="1023:21" pos:end="1023:36">tcg_gen_clzi_i32</name><argument_list pos:start="1023:37" pos:end="1023:50">(<argument pos:start="1023:38" pos:end="1023:40"><expr pos:start="1023:38" pos:end="1023:40"><name pos:start="1023:38" pos:end="1023:40">tmp</name></expr></argument>, <argument pos:start="1023:43" pos:end="1023:45"><expr pos:start="1023:43" pos:end="1023:45"><name pos:start="1023:43" pos:end="1023:45">tmp</name></expr></argument>, <argument pos:start="1023:48" pos:end="1023:49"><expr pos:start="1023:48" pos:end="1023:49"><literal type="number" pos:start="1023:48" pos:end="1023:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1025:21" pos:end="1025:26">break;</break>

                <case pos:start="1027:17" pos:end="1027:26">case <expr pos:start="1027:22" pos:end="1027:25"><literal type="number" pos:start="1027:22" pos:end="1027:25">0x20</literal></expr>:</case>

                <case pos:start="1029:17" pos:end="1029:26">case <expr pos:start="1029:22" pos:end="1029:25"><literal type="number" pos:start="1029:22" pos:end="1029:25">0x21</literal></expr>:</case>

                <case pos:start="1031:17" pos:end="1031:26">case <expr pos:start="1031:22" pos:end="1031:25"><literal type="number" pos:start="1031:22" pos:end="1031:25">0x22</literal></expr>:</case>

                <case pos:start="1033:17" pos:end="1033:26">case <expr pos:start="1033:22" pos:end="1033:25"><literal type="number" pos:start="1033:22" pos:end="1033:25">0x28</literal></expr>:</case>

                <case pos:start="1035:17" pos:end="1035:26">case <expr pos:start="1035:22" pos:end="1035:25"><literal type="number" pos:start="1035:22" pos:end="1035:25">0x29</literal></expr>:</case>

                <case pos:start="1037:17" pos:end="1037:26">case <expr pos:start="1037:22" pos:end="1037:25"><literal type="number" pos:start="1037:22" pos:end="1037:25">0x2a</literal></expr>:</case>

                <block pos:start="1039:17" pos:end="1079:17">{<block_content pos:start="1043:21" pos:end="1077:26">

                    <comment type="block" pos:start="1041:21" pos:end="1041:38">/* crc32/crc32c */</comment>

                    <decl_stmt pos:start="1043:21" pos:end="1043:43"><decl pos:start="1043:21" pos:end="1043:42"><type pos:start="1043:21" pos:end="1043:28"><name pos:start="1043:21" pos:end="1043:28">uint32_t</name></type> <name pos:start="1043:30" pos:end="1043:31">sz</name> <init pos:start="1043:33" pos:end="1043:42">= <expr pos:start="1043:35" pos:end="1043:42"><name pos:start="1043:35" pos:end="1043:36">op</name> <operator pos:start="1043:38" pos:end="1043:38">&amp;</operator> <literal type="number" pos:start="1043:40" pos:end="1043:42">0x3</literal></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="1045:21" pos:end="1045:42"><decl pos:start="1045:21" pos:end="1045:41"><type pos:start="1045:21" pos:end="1045:28"><name pos:start="1045:21" pos:end="1045:28">uint32_t</name></type> <name pos:start="1045:30" pos:end="1045:30">c</name> <init pos:start="1045:32" pos:end="1045:41">= <expr pos:start="1045:34" pos:end="1045:41"><name pos:start="1045:34" pos:end="1045:35">op</name> <operator pos:start="1045:37" pos:end="1045:37">&amp;</operator> <literal type="number" pos:start="1045:39" pos:end="1045:41">0x8</literal></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="1049:21" pos:end="1049:43"><expr pos:start="1049:21" pos:end="1049:42"><name pos:start="1049:21" pos:end="1049:24">tmp2</name> <operator pos:start="1049:26" pos:end="1049:26">=</operator> <call pos:start="1049:28" pos:end="1049:42"><name pos:start="1049:28" pos:end="1049:35">load_reg</name><argument_list pos:start="1049:36" pos:end="1049:42">(<argument pos:start="1049:37" pos:end="1049:37"><expr pos:start="1049:37" pos:end="1049:37"><name pos:start="1049:37" pos:end="1049:37">s</name></expr></argument>, <argument pos:start="1049:40" pos:end="1049:41"><expr pos:start="1049:40" pos:end="1049:41"><name pos:start="1049:40" pos:end="1049:41">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1051:21" pos:end="1059:21"><if pos:start="1051:21" pos:end="1055:21">if <condition pos:start="1051:24" pos:end="1051:32">(<expr pos:start="1051:25" pos:end="1051:31"><name pos:start="1051:25" pos:end="1051:26">sz</name> <operator pos:start="1051:28" pos:end="1051:29">==</operator> <literal type="number" pos:start="1051:31" pos:end="1051:31">0</literal></expr>)</condition> <block pos:start="1051:34" pos:end="1055:21">{<block_content pos:start="1053:25" pos:end="1053:59">

                        <expr_stmt pos:start="1053:25" pos:end="1053:59"><expr pos:start="1053:25" pos:end="1053:58"><call pos:start="1053:25" pos:end="1053:58"><name pos:start="1053:25" pos:end="1053:40">tcg_gen_andi_i32</name><argument_list pos:start="1053:41" pos:end="1053:58">(<argument pos:start="1053:42" pos:end="1053:45"><expr pos:start="1053:42" pos:end="1053:45"><name pos:start="1053:42" pos:end="1053:45">tmp2</name></expr></argument>, <argument pos:start="1053:48" pos:end="1053:51"><expr pos:start="1053:48" pos:end="1053:51"><name pos:start="1053:48" pos:end="1053:51">tmp2</name></expr></argument>, <argument pos:start="1053:54" pos:end="1053:57"><expr pos:start="1053:54" pos:end="1053:57"><literal type="number" pos:start="1053:54" pos:end="1053:57">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="1055:23" pos:end="1059:21">else if <condition pos:start="1055:31" pos:end="1055:39">(<expr pos:start="1055:32" pos:end="1055:38"><name pos:start="1055:32" pos:end="1055:33">sz</name> <operator pos:start="1055:35" pos:end="1055:36">==</operator> <literal type="number" pos:start="1055:38" pos:end="1055:38">1</literal></expr>)</condition> <block pos:start="1055:41" pos:end="1059:21">{<block_content pos:start="1057:25" pos:end="1057:61">

                        <expr_stmt pos:start="1057:25" pos:end="1057:61"><expr pos:start="1057:25" pos:end="1057:60"><call pos:start="1057:25" pos:end="1057:60"><name pos:start="1057:25" pos:end="1057:40">tcg_gen_andi_i32</name><argument_list pos:start="1057:41" pos:end="1057:60">(<argument pos:start="1057:42" pos:end="1057:45"><expr pos:start="1057:42" pos:end="1057:45"><name pos:start="1057:42" pos:end="1057:45">tmp2</name></expr></argument>, <argument pos:start="1057:48" pos:end="1057:51"><expr pos:start="1057:48" pos:end="1057:51"><name pos:start="1057:48" pos:end="1057:51">tmp2</name></expr></argument>, <argument pos:start="1057:54" pos:end="1057:59"><expr pos:start="1057:54" pos:end="1057:59"><literal type="number" pos:start="1057:54" pos:end="1057:59">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="1061:21" pos:end="1061:50"><expr pos:start="1061:21" pos:end="1061:49"><name pos:start="1061:21" pos:end="1061:24">tmp3</name> <operator pos:start="1061:26" pos:end="1061:26">=</operator> <call pos:start="1061:28" pos:end="1061:49"><name pos:start="1061:28" pos:end="1061:40">tcg_const_i32</name><argument_list pos:start="1061:41" pos:end="1061:49">(<argument pos:start="1061:42" pos:end="1061:48"><expr pos:start="1061:42" pos:end="1061:48"><literal type="number" pos:start="1061:42" pos:end="1061:42">1</literal> <operator pos:start="1061:44" pos:end="1061:45">&lt;&lt;</operator> <name pos:start="1061:47" pos:end="1061:48">sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1063:21" pos:end="1071:21"><if pos:start="1063:21" pos:end="1067:21">if <condition pos:start="1063:24" pos:end="1063:26">(<expr pos:start="1063:25" pos:end="1063:25"><name pos:start="1063:25" pos:end="1063:25">c</name></expr>)</condition> <block pos:start="1063:28" pos:end="1067:21">{<block_content pos:start="1065:25" pos:end="1065:64">

                        <expr_stmt pos:start="1065:25" pos:end="1065:64"><expr pos:start="1065:25" pos:end="1065:63"><call pos:start="1065:25" pos:end="1065:63"><name pos:start="1065:25" pos:end="1065:41">gen_helper_crc32c</name><argument_list pos:start="1065:42" pos:end="1065:63">(<argument pos:start="1065:43" pos:end="1065:45"><expr pos:start="1065:43" pos:end="1065:45"><name pos:start="1065:43" pos:end="1065:45">tmp</name></expr></argument>, <argument pos:start="1065:48" pos:end="1065:50"><expr pos:start="1065:48" pos:end="1065:50"><name pos:start="1065:48" pos:end="1065:50">tmp</name></expr></argument>, <argument pos:start="1065:53" pos:end="1065:56"><expr pos:start="1065:53" pos:end="1065:56"><name pos:start="1065:53" pos:end="1065:56">tmp2</name></expr></argument>, <argument pos:start="1065:59" pos:end="1065:62"><expr pos:start="1065:59" pos:end="1065:62"><name pos:start="1065:59" pos:end="1065:62">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1067:23" pos:end="1071:21">else <block pos:start="1067:28" pos:end="1071:21">{<block_content pos:start="1069:25" pos:end="1069:63">

                        <expr_stmt pos:start="1069:25" pos:end="1069:63"><expr pos:start="1069:25" pos:end="1069:62"><call pos:start="1069:25" pos:end="1069:62"><name pos:start="1069:25" pos:end="1069:40">gen_helper_crc32</name><argument_list pos:start="1069:41" pos:end="1069:62">(<argument pos:start="1069:42" pos:end="1069:44"><expr pos:start="1069:42" pos:end="1069:44"><name pos:start="1069:42" pos:end="1069:44">tmp</name></expr></argument>, <argument pos:start="1069:47" pos:end="1069:49"><expr pos:start="1069:47" pos:end="1069:49"><name pos:start="1069:47" pos:end="1069:49">tmp</name></expr></argument>, <argument pos:start="1069:52" pos:end="1069:55"><expr pos:start="1069:52" pos:end="1069:55"><name pos:start="1069:52" pos:end="1069:55">tmp2</name></expr></argument>, <argument pos:start="1069:58" pos:end="1069:61"><expr pos:start="1069:58" pos:end="1069:61"><name pos:start="1069:58" pos:end="1069:61">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1073:21" pos:end="1073:44"><expr pos:start="1073:21" pos:end="1073:43"><call pos:start="1073:21" pos:end="1073:43"><name pos:start="1073:21" pos:end="1073:37">tcg_temp_free_i32</name><argument_list pos:start="1073:38" pos:end="1073:43">(<argument pos:start="1073:39" pos:end="1073:42"><expr pos:start="1073:39" pos:end="1073:42"><name pos:start="1073:39" pos:end="1073:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1075:21" pos:end="1075:44"><expr pos:start="1075:21" pos:end="1075:43"><call pos:start="1075:21" pos:end="1075:43"><name pos:start="1075:21" pos:end="1075:37">tcg_temp_free_i32</name><argument_list pos:start="1075:38" pos:end="1075:43">(<argument pos:start="1075:39" pos:end="1075:42"><expr pos:start="1075:39" pos:end="1075:42"><name pos:start="1075:39" pos:end="1075:42">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1077:21" pos:end="1077:26">break;</break>

                </block_content>}</block>

                <default pos:start="1081:17" pos:end="1081:24">default:</default>

                    <expr_stmt pos:start="1083:21" pos:end="1083:43"><expr pos:start="1083:21" pos:end="1083:42"><call pos:start="1083:21" pos:end="1083:42"><name pos:start="1083:21" pos:end="1083:40">g_assert_not_reached</name><argument_list pos:start="1083:41" pos:end="1083:42">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1089:13" pos:end="1089:34"><expr pos:start="1089:13" pos:end="1089:33"><call pos:start="1089:13" pos:end="1089:33"><name pos:start="1089:13" pos:end="1089:21">store_reg</name><argument_list pos:start="1089:22" pos:end="1089:33">(<argument pos:start="1089:23" pos:end="1089:23"><expr pos:start="1089:23" pos:end="1089:23"><name pos:start="1089:23" pos:end="1089:23">s</name></expr></argument>, <argument pos:start="1089:26" pos:end="1089:27"><expr pos:start="1089:26" pos:end="1089:27"><name pos:start="1089:26" pos:end="1089:27">rd</name></expr></argument>, <argument pos:start="1089:30" pos:end="1089:32"><expr pos:start="1089:30" pos:end="1089:32"><name pos:start="1089:30" pos:end="1089:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1091:13" pos:end="1091:18">break;</break>

        <case pos:start="1093:9" pos:end="1093:15">case <expr pos:start="1093:14" pos:end="1093:14"><literal type="number" pos:start="1093:14" pos:end="1093:14">4</literal></expr>:</case> <case pos:start="1093:17" pos:end="1093:23">case <expr pos:start="1093:22" pos:end="1093:22"><literal type="number" pos:start="1093:22" pos:end="1093:22">5</literal></expr>:</case> <comment type="block" pos:start="1093:25" pos:end="1093:77">/* 32-bit multiply.  Sum of absolute differences.  */</comment>

            <switch pos:start="1095:13" pos:end="1121:13">switch <condition pos:start="1095:20" pos:end="1095:37">(<expr pos:start="1095:21" pos:end="1095:36"><operator pos:start="1095:21" pos:end="1095:21">(</operator><name pos:start="1095:22" pos:end="1095:25">insn</name> <operator pos:start="1095:27" pos:end="1095:28">&gt;&gt;</operator> <literal type="number" pos:start="1095:30" pos:end="1095:31">20</literal><operator pos:start="1095:32" pos:end="1095:32">)</operator> <operator pos:start="1095:34" pos:end="1095:34">&amp;</operator> <literal type="number" pos:start="1095:36" pos:end="1095:36">7</literal></expr>)</condition> <block pos:start="1095:39" pos:end="1121:13">{<block_content pos:start="1097:13" pos:end="1119:22">

            <case pos:start="1097:13" pos:end="1097:19">case <expr pos:start="1097:18" pos:end="1097:18"><literal type="number" pos:start="1097:18" pos:end="1097:18">0</literal></expr>:</case> <comment type="block" pos:start="1097:21" pos:end="1097:39">/* 32 x 32 -&gt; 32 */</comment>

            <case pos:start="1099:13" pos:end="1099:19">case <expr pos:start="1099:18" pos:end="1099:18"><literal type="number" pos:start="1099:18" pos:end="1099:18">7</literal></expr>:</case> <comment type="block" pos:start="1099:21" pos:end="1099:64">/* Unsigned sum of absolute differences.  */</comment>

                <break pos:start="1101:17" pos:end="1101:22">break;</break>

            <case pos:start="1103:13" pos:end="1103:19">case <expr pos:start="1103:18" pos:end="1103:18"><literal type="number" pos:start="1103:18" pos:end="1103:18">1</literal></expr>:</case> <comment type="block" pos:start="1103:21" pos:end="1103:39">/* 16 x 16 -&gt; 32 */</comment>

            <case pos:start="1105:13" pos:end="1105:19">case <expr pos:start="1105:18" pos:end="1105:18"><literal type="number" pos:start="1105:18" pos:end="1105:18">2</literal></expr>:</case> <comment type="block" pos:start="1105:21" pos:end="1105:45">/* Dual multiply add.  */</comment>

            <case pos:start="1107:13" pos:end="1107:19">case <expr pos:start="1107:18" pos:end="1107:18"><literal type="number" pos:start="1107:18" pos:end="1107:18">3</literal></expr>:</case> <comment type="block" pos:start="1107:21" pos:end="1107:42">/* 32 * 16 -&gt; 32msb */</comment>

            <case pos:start="1109:13" pos:end="1109:19">case <expr pos:start="1109:18" pos:end="1109:18"><literal type="number" pos:start="1109:18" pos:end="1109:18">4</literal></expr>:</case> <comment type="block" pos:start="1109:21" pos:end="1109:50">/* Dual multiply subtract.  */</comment>

            <case pos:start="1111:13" pos:end="1111:19">case <expr pos:start="1111:18" pos:end="1111:18"><literal type="number" pos:start="1111:18" pos:end="1111:18">5</literal></expr>:</case> <case pos:start="1111:21" pos:end="1111:27">case <expr pos:start="1111:26" pos:end="1111:26"><literal type="number" pos:start="1111:26" pos:end="1111:26">6</literal></expr>:</case> <comment type="block" pos:start="1111:29" pos:end="1111:72">/* 32 * 32 -&gt; 32msb (SMMUL, SMMLA, SMMLS) */</comment>

                <if_stmt pos:start="1113:17" pos:end="1117:17"><if pos:start="1113:17" pos:end="1117:17">if <condition pos:start="1113:20" pos:end="1113:62">(<expr pos:start="1113:21" pos:end="1113:61"><operator pos:start="1113:21" pos:end="1113:21">!</operator><call pos:start="1113:22" pos:end="1113:61"><name pos:start="1113:22" pos:end="1113:35">arm_dc_feature</name><argument_list pos:start="1113:36" pos:end="1113:61">(<argument pos:start="1113:37" pos:end="1113:37"><expr pos:start="1113:37" pos:end="1113:37"><name pos:start="1113:37" pos:end="1113:37">s</name></expr></argument>, <argument pos:start="1113:40" pos:end="1113:60"><expr pos:start="1113:40" pos:end="1113:60"><name pos:start="1113:40" pos:end="1113:60">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1113:64" pos:end="1117:17">{<block_content pos:start="1115:21" pos:end="1115:36">

                    <goto pos:start="1115:21" pos:end="1115:36">goto <name pos:start="1115:26" pos:end="1115:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1119:17" pos:end="1119:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="1123:13" pos:end="1123:35"><expr pos:start="1123:13" pos:end="1123:34"><name pos:start="1123:13" pos:end="1123:14">op</name> <operator pos:start="1123:16" pos:end="1123:16">=</operator> <operator pos:start="1123:18" pos:end="1123:18">(</operator><name pos:start="1123:19" pos:end="1123:22">insn</name> <operator pos:start="1123:24" pos:end="1123:25">&gt;&gt;</operator> <literal type="number" pos:start="1123:27" pos:end="1123:27">4</literal><operator pos:start="1123:28" pos:end="1123:28">)</operator> <operator pos:start="1123:30" pos:end="1123:30">&amp;</operator> <literal type="number" pos:start="1123:32" pos:end="1123:34">0xf</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1125:13" pos:end="1125:34"><expr pos:start="1125:13" pos:end="1125:33"><name pos:start="1125:13" pos:end="1125:15">tmp</name> <operator pos:start="1125:17" pos:end="1125:17">=</operator> <call pos:start="1125:19" pos:end="1125:33"><name pos:start="1125:19" pos:end="1125:26">load_reg</name><argument_list pos:start="1125:27" pos:end="1125:33">(<argument pos:start="1125:28" pos:end="1125:28"><expr pos:start="1125:28" pos:end="1125:28"><name pos:start="1125:28" pos:end="1125:28">s</name></expr></argument>, <argument pos:start="1125:31" pos:end="1125:32"><expr pos:start="1125:31" pos:end="1125:32"><name pos:start="1125:31" pos:end="1125:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1127:13" pos:end="1127:35"><expr pos:start="1127:13" pos:end="1127:34"><name pos:start="1127:13" pos:end="1127:16">tmp2</name> <operator pos:start="1127:18" pos:end="1127:18">=</operator> <call pos:start="1127:20" pos:end="1127:34"><name pos:start="1127:20" pos:end="1127:27">load_reg</name><argument_list pos:start="1127:28" pos:end="1127:34">(<argument pos:start="1127:29" pos:end="1127:29"><expr pos:start="1127:29" pos:end="1127:29"><name pos:start="1127:29" pos:end="1127:29">s</name></expr></argument>, <argument pos:start="1127:32" pos:end="1127:33"><expr pos:start="1127:32" pos:end="1127:33"><name pos:start="1127:32" pos:end="1127:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="1129:13" pos:end="1307:13">switch <condition pos:start="1129:20" pos:end="1129:37">(<expr pos:start="1129:21" pos:end="1129:36"><operator pos:start="1129:21" pos:end="1129:21">(</operator><name pos:start="1129:22" pos:end="1129:25">insn</name> <operator pos:start="1129:27" pos:end="1129:28">&gt;&gt;</operator> <literal type="number" pos:start="1129:30" pos:end="1129:31">20</literal><operator pos:start="1129:32" pos:end="1129:32">)</operator> <operator pos:start="1129:34" pos:end="1129:34">&amp;</operator> <literal type="number" pos:start="1129:36" pos:end="1129:36">7</literal></expr>)</condition> <block pos:start="1129:39" pos:end="1307:13">{<block_content pos:start="1131:13" pos:end="1305:22">

            <case pos:start="1131:13" pos:end="1131:19">case <expr pos:start="1131:18" pos:end="1131:18"><literal type="number" pos:start="1131:18" pos:end="1131:18">0</literal></expr>:</case> <comment type="block" pos:start="1131:21" pos:end="1131:39">/* 32 x 32 -&gt; 32 */</comment>

                <expr_stmt pos:start="1133:17" pos:end="1133:48"><expr pos:start="1133:17" pos:end="1133:47"><call pos:start="1133:17" pos:end="1133:47"><name pos:start="1133:17" pos:end="1133:31">tcg_gen_mul_i32</name><argument_list pos:start="1133:32" pos:end="1133:47">(<argument pos:start="1133:33" pos:end="1133:35"><expr pos:start="1133:33" pos:end="1133:35"><name pos:start="1133:33" pos:end="1133:35">tmp</name></expr></argument>, <argument pos:start="1133:38" pos:end="1133:40"><expr pos:start="1133:38" pos:end="1133:40"><name pos:start="1133:38" pos:end="1133:40">tmp</name></expr></argument>, <argument pos:start="1133:43" pos:end="1133:46"><expr pos:start="1133:43" pos:end="1133:46"><name pos:start="1133:43" pos:end="1133:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1135:17" pos:end="1135:40"><expr pos:start="1135:17" pos:end="1135:39"><call pos:start="1135:17" pos:end="1135:39"><name pos:start="1135:17" pos:end="1135:33">tcg_temp_free_i32</name><argument_list pos:start="1135:34" pos:end="1135:39">(<argument pos:start="1135:35" pos:end="1135:38"><expr pos:start="1135:35" pos:end="1135:38"><name pos:start="1135:35" pos:end="1135:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1137:17" pos:end="1151:17"><if pos:start="1137:17" pos:end="1151:17">if <condition pos:start="1137:20" pos:end="1137:29">(<expr pos:start="1137:21" pos:end="1137:28"><name pos:start="1137:21" pos:end="1137:22">rs</name> <operator pos:start="1137:24" pos:end="1137:25">!=</operator> <literal type="number" pos:start="1137:27" pos:end="1137:28">15</literal></expr>)</condition> <block pos:start="1137:31" pos:end="1151:17">{<block_content pos:start="1139:21" pos:end="1149:44">

                    <expr_stmt pos:start="1139:21" pos:end="1139:43"><expr pos:start="1139:21" pos:end="1139:42"><name pos:start="1139:21" pos:end="1139:24">tmp2</name> <operator pos:start="1139:26" pos:end="1139:26">=</operator> <call pos:start="1139:28" pos:end="1139:42"><name pos:start="1139:28" pos:end="1139:35">load_reg</name><argument_list pos:start="1139:36" pos:end="1139:42">(<argument pos:start="1139:37" pos:end="1139:37"><expr pos:start="1139:37" pos:end="1139:37"><name pos:start="1139:37" pos:end="1139:37">s</name></expr></argument>, <argument pos:start="1139:40" pos:end="1139:41"><expr pos:start="1139:40" pos:end="1139:41"><name pos:start="1139:40" pos:end="1139:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1141:21" pos:end="1147:56"><if pos:start="1141:21" pos:end="1143:56">if <condition pos:start="1141:24" pos:end="1141:27">(<expr pos:start="1141:25" pos:end="1141:26"><name pos:start="1141:25" pos:end="1141:26">op</name></expr>)</condition><block type="pseudo" pos:start="1143:25" pos:end="1143:56"><block_content pos:start="1143:25" pos:end="1143:56">

                        <expr_stmt pos:start="1143:25" pos:end="1143:56"><expr pos:start="1143:25" pos:end="1143:55"><call pos:start="1143:25" pos:end="1143:55"><name pos:start="1143:25" pos:end="1143:39">tcg_gen_sub_i32</name><argument_list pos:start="1143:40" pos:end="1143:55">(<argument pos:start="1143:41" pos:end="1143:43"><expr pos:start="1143:41" pos:end="1143:43"><name pos:start="1143:41" pos:end="1143:43">tmp</name></expr></argument>, <argument pos:start="1143:46" pos:end="1143:49"><expr pos:start="1143:46" pos:end="1143:49"><name pos:start="1143:46" pos:end="1143:49">tmp2</name></expr></argument>, <argument pos:start="1143:52" pos:end="1143:54"><expr pos:start="1143:52" pos:end="1143:54"><name pos:start="1143:52" pos:end="1143:54">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="1145:21" pos:end="1147:56">else<block type="pseudo" pos:start="1147:25" pos:end="1147:56"><block_content pos:start="1147:25" pos:end="1147:56">

                        <expr_stmt pos:start="1147:25" pos:end="1147:56"><expr pos:start="1147:25" pos:end="1147:55"><call pos:start="1147:25" pos:end="1147:55"><name pos:start="1147:25" pos:end="1147:39">tcg_gen_add_i32</name><argument_list pos:start="1147:40" pos:end="1147:55">(<argument pos:start="1147:41" pos:end="1147:43"><expr pos:start="1147:41" pos:end="1147:43"><name pos:start="1147:41" pos:end="1147:43">tmp</name></expr></argument>, <argument pos:start="1147:46" pos:end="1147:48"><expr pos:start="1147:46" pos:end="1147:48"><name pos:start="1147:46" pos:end="1147:48">tmp</name></expr></argument>, <argument pos:start="1147:51" pos:end="1147:54"><expr pos:start="1147:51" pos:end="1147:54"><name pos:start="1147:51" pos:end="1147:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt pos:start="1149:21" pos:end="1149:44"><expr pos:start="1149:21" pos:end="1149:43"><call pos:start="1149:21" pos:end="1149:43"><name pos:start="1149:21" pos:end="1149:37">tcg_temp_free_i32</name><argument_list pos:start="1149:38" pos:end="1149:43">(<argument pos:start="1149:39" pos:end="1149:42"><expr pos:start="1149:39" pos:end="1149:42"><name pos:start="1149:39" pos:end="1149:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1153:17" pos:end="1153:22">break;</break>

            <case pos:start="1155:13" pos:end="1155:19">case <expr pos:start="1155:18" pos:end="1155:18"><literal type="number" pos:start="1155:18" pos:end="1155:18">1</literal></expr>:</case> <comment type="block" pos:start="1155:21" pos:end="1155:39">/* 16 x 16 -&gt; 32 */</comment>

                <expr_stmt pos:start="1157:17" pos:end="1157:53"><expr pos:start="1157:17" pos:end="1157:52"><call pos:start="1157:17" pos:end="1157:52"><name pos:start="1157:17" pos:end="1157:25">gen_mulxy</name><argument_list pos:start="1157:26" pos:end="1157:52">(<argument pos:start="1157:27" pos:end="1157:29"><expr pos:start="1157:27" pos:end="1157:29"><name pos:start="1157:27" pos:end="1157:29">tmp</name></expr></argument>, <argument pos:start="1157:32" pos:end="1157:35"><expr pos:start="1157:32" pos:end="1157:35"><name pos:start="1157:32" pos:end="1157:35">tmp2</name></expr></argument>, <argument pos:start="1157:38" pos:end="1157:43"><expr pos:start="1157:38" pos:end="1157:43"><name pos:start="1157:38" pos:end="1157:39">op</name> <operator pos:start="1157:41" pos:end="1157:41">&amp;</operator> <literal type="number" pos:start="1157:43" pos:end="1157:43">2</literal></expr></argument>, <argument pos:start="1157:46" pos:end="1157:51"><expr pos:start="1157:46" pos:end="1157:51"><name pos:start="1157:46" pos:end="1157:47">op</name> <operator pos:start="1157:49" pos:end="1157:49">&amp;</operator> <literal type="number" pos:start="1157:51" pos:end="1157:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1159:17" pos:end="1159:40"><expr pos:start="1159:17" pos:end="1159:39"><call pos:start="1159:17" pos:end="1159:39"><name pos:start="1159:17" pos:end="1159:33">tcg_temp_free_i32</name><argument_list pos:start="1159:34" pos:end="1159:39">(<argument pos:start="1159:35" pos:end="1159:38"><expr pos:start="1159:35" pos:end="1159:38"><name pos:start="1159:35" pos:end="1159:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1161:17" pos:end="1169:17"><if pos:start="1161:17" pos:end="1169:17">if <condition pos:start="1161:20" pos:end="1161:29">(<expr pos:start="1161:21" pos:end="1161:28"><name pos:start="1161:21" pos:end="1161:22">rs</name> <operator pos:start="1161:24" pos:end="1161:25">!=</operator> <literal type="number" pos:start="1161:27" pos:end="1161:28">15</literal></expr>)</condition> <block pos:start="1161:31" pos:end="1169:17">{<block_content pos:start="1163:21" pos:end="1167:44">

                    <expr_stmt pos:start="1163:21" pos:end="1163:43"><expr pos:start="1163:21" pos:end="1163:42"><name pos:start="1163:21" pos:end="1163:24">tmp2</name> <operator pos:start="1163:26" pos:end="1163:26">=</operator> <call pos:start="1163:28" pos:end="1163:42"><name pos:start="1163:28" pos:end="1163:35">load_reg</name><argument_list pos:start="1163:36" pos:end="1163:42">(<argument pos:start="1163:37" pos:end="1163:37"><expr pos:start="1163:37" pos:end="1163:37"><name pos:start="1163:37" pos:end="1163:37">s</name></expr></argument>, <argument pos:start="1163:40" pos:end="1163:41"><expr pos:start="1163:40" pos:end="1163:41"><name pos:start="1163:40" pos:end="1163:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1165:21" pos:end="1165:65"><expr pos:start="1165:21" pos:end="1165:64"><call pos:start="1165:21" pos:end="1165:64"><name pos:start="1165:21" pos:end="1165:39">gen_helper_add_setq</name><argument_list pos:start="1165:40" pos:end="1165:64">(<argument pos:start="1165:41" pos:end="1165:43"><expr pos:start="1165:41" pos:end="1165:43"><name pos:start="1165:41" pos:end="1165:43">tmp</name></expr></argument>, <argument pos:start="1165:46" pos:end="1165:52"><expr pos:start="1165:46" pos:end="1165:52"><name pos:start="1165:46" pos:end="1165:52">cpu_env</name></expr></argument>, <argument pos:start="1165:55" pos:end="1165:57"><expr pos:start="1165:55" pos:end="1165:57"><name pos:start="1165:55" pos:end="1165:57">tmp</name></expr></argument>, <argument pos:start="1165:60" pos:end="1165:63"><expr pos:start="1165:60" pos:end="1165:63"><name pos:start="1165:60" pos:end="1165:63">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1167:21" pos:end="1167:44"><expr pos:start="1167:21" pos:end="1167:43"><call pos:start="1167:21" pos:end="1167:43"><name pos:start="1167:21" pos:end="1167:37">tcg_temp_free_i32</name><argument_list pos:start="1167:38" pos:end="1167:43">(<argument pos:start="1167:39" pos:end="1167:42"><expr pos:start="1167:39" pos:end="1167:42"><name pos:start="1167:39" pos:end="1167:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1171:17" pos:end="1171:22">break;</break>

            <case pos:start="1173:13" pos:end="1173:19">case <expr pos:start="1173:18" pos:end="1173:18"><literal type="number" pos:start="1173:18" pos:end="1173:18">2</literal></expr>:</case> <comment type="block" pos:start="1173:21" pos:end="1173:45">/* Dual multiply add.  */</comment>

            <case pos:start="1175:13" pos:end="1175:19">case <expr pos:start="1175:18" pos:end="1175:18"><literal type="number" pos:start="1175:18" pos:end="1175:18">4</literal></expr>:</case> <comment type="block" pos:start="1175:21" pos:end="1175:50">/* Dual multiply subtract.  */</comment>

                <if_stmt pos:start="1177:17" pos:end="1179:40"><if pos:start="1177:17" pos:end="1179:40">if <condition pos:start="1177:20" pos:end="1177:23">(<expr pos:start="1177:21" pos:end="1177:22"><name pos:start="1177:21" pos:end="1177:22">op</name></expr>)</condition><block type="pseudo" pos:start="1179:21" pos:end="1179:40"><block_content pos:start="1179:21" pos:end="1179:40">

                    <expr_stmt pos:start="1179:21" pos:end="1179:40"><expr pos:start="1179:21" pos:end="1179:39"><call pos:start="1179:21" pos:end="1179:39"><name pos:start="1179:21" pos:end="1179:33">gen_swap_half</name><argument_list pos:start="1179:34" pos:end="1179:39">(<argument pos:start="1179:35" pos:end="1179:38"><expr pos:start="1179:35" pos:end="1179:38"><name pos:start="1179:35" pos:end="1179:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1181:17" pos:end="1181:41"><expr pos:start="1181:17" pos:end="1181:40"><call pos:start="1181:17" pos:end="1181:40"><name pos:start="1181:17" pos:end="1181:29">gen_smul_dual</name><argument_list pos:start="1181:30" pos:end="1181:40">(<argument pos:start="1181:31" pos:end="1181:33"><expr pos:start="1181:31" pos:end="1181:33"><name pos:start="1181:31" pos:end="1181:33">tmp</name></expr></argument>, <argument pos:start="1181:36" pos:end="1181:39"><expr pos:start="1181:36" pos:end="1181:39"><name pos:start="1181:36" pos:end="1181:39">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1183:17" pos:end="1201:17"><if pos:start="1183:17" pos:end="1189:17">if <condition pos:start="1183:20" pos:end="1183:37">(<expr pos:start="1183:21" pos:end="1183:36"><name pos:start="1183:21" pos:end="1183:24">insn</name> <operator pos:start="1183:26" pos:end="1183:26">&amp;</operator> <operator pos:start="1183:28" pos:end="1183:28">(</operator><literal type="number" pos:start="1183:29" pos:end="1183:29">1</literal> <operator pos:start="1183:31" pos:end="1183:32">&lt;&lt;</operator> <literal type="number" pos:start="1183:34" pos:end="1183:35">22</literal><operator pos:start="1183:36" pos:end="1183:36">)</operator></expr>)</condition> <block pos:start="1183:39" pos:end="1189:17">{<block_content pos:start="1187:21" pos:end="1187:52">

                    <comment type="block" pos:start="1185:21" pos:end="1185:59">/* This subtraction cannot overflow. */</comment>

                    <expr_stmt pos:start="1187:21" pos:end="1187:52"><expr pos:start="1187:21" pos:end="1187:51"><call pos:start="1187:21" pos:end="1187:51"><name pos:start="1187:21" pos:end="1187:35">tcg_gen_sub_i32</name><argument_list pos:start="1187:36" pos:end="1187:51">(<argument pos:start="1187:37" pos:end="1187:39"><expr pos:start="1187:37" pos:end="1187:39"><name pos:start="1187:37" pos:end="1187:39">tmp</name></expr></argument>, <argument pos:start="1187:42" pos:end="1187:44"><expr pos:start="1187:42" pos:end="1187:44"><name pos:start="1187:42" pos:end="1187:44">tmp</name></expr></argument>, <argument pos:start="1187:47" pos:end="1187:50"><expr pos:start="1187:47" pos:end="1187:50"><name pos:start="1187:47" pos:end="1187:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1189:19" pos:end="1201:17">else <block pos:start="1189:24" pos:end="1201:17">{<block_content pos:start="1199:21" pos:end="1199:65">

                    <comment type="block" pos:start="1191:21" pos:end="1197:23">/* This addition cannot overflow 32 bits;

                     * however it may overflow considered as a signed

                     * operation, in which case we must set the Q flag.

                     */</comment>

                    <expr_stmt pos:start="1199:21" pos:end="1199:65"><expr pos:start="1199:21" pos:end="1199:64"><call pos:start="1199:21" pos:end="1199:64"><name pos:start="1199:21" pos:end="1199:39">gen_helper_add_setq</name><argument_list pos:start="1199:40" pos:end="1199:64">(<argument pos:start="1199:41" pos:end="1199:43"><expr pos:start="1199:41" pos:end="1199:43"><name pos:start="1199:41" pos:end="1199:43">tmp</name></expr></argument>, <argument pos:start="1199:46" pos:end="1199:52"><expr pos:start="1199:46" pos:end="1199:52"><name pos:start="1199:46" pos:end="1199:52">cpu_env</name></expr></argument>, <argument pos:start="1199:55" pos:end="1199:57"><expr pos:start="1199:55" pos:end="1199:57"><name pos:start="1199:55" pos:end="1199:57">tmp</name></expr></argument>, <argument pos:start="1199:60" pos:end="1199:63"><expr pos:start="1199:60" pos:end="1199:63"><name pos:start="1199:60" pos:end="1199:63">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1203:17" pos:end="1203:40"><expr pos:start="1203:17" pos:end="1203:39"><call pos:start="1203:17" pos:end="1203:39"><name pos:start="1203:17" pos:end="1203:33">tcg_temp_free_i32</name><argument_list pos:start="1203:34" pos:end="1203:39">(<argument pos:start="1203:35" pos:end="1203:38"><expr pos:start="1203:35" pos:end="1203:38"><name pos:start="1203:35" pos:end="1203:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1205:17" pos:end="1215:19"><if pos:start="1205:17" pos:end="1215:19">if <condition pos:start="1205:20" pos:end="1205:29">(<expr pos:start="1205:21" pos:end="1205:28"><name pos:start="1205:21" pos:end="1205:22">rs</name> <operator pos:start="1205:24" pos:end="1205:25">!=</operator> <literal type="number" pos:start="1205:27" pos:end="1205:28">15</literal></expr>)</condition>

                  <block pos:start="1207:19" pos:end="1215:19">{<block_content pos:start="1209:21" pos:end="1213:44">

                    <expr_stmt pos:start="1209:21" pos:end="1209:43"><expr pos:start="1209:21" pos:end="1209:42"><name pos:start="1209:21" pos:end="1209:24">tmp2</name> <operator pos:start="1209:26" pos:end="1209:26">=</operator> <call pos:start="1209:28" pos:end="1209:42"><name pos:start="1209:28" pos:end="1209:35">load_reg</name><argument_list pos:start="1209:36" pos:end="1209:42">(<argument pos:start="1209:37" pos:end="1209:37"><expr pos:start="1209:37" pos:end="1209:37"><name pos:start="1209:37" pos:end="1209:37">s</name></expr></argument>, <argument pos:start="1209:40" pos:end="1209:41"><expr pos:start="1209:40" pos:end="1209:41"><name pos:start="1209:40" pos:end="1209:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1211:21" pos:end="1211:65"><expr pos:start="1211:21" pos:end="1211:64"><call pos:start="1211:21" pos:end="1211:64"><name pos:start="1211:21" pos:end="1211:39">gen_helper_add_setq</name><argument_list pos:start="1211:40" pos:end="1211:64">(<argument pos:start="1211:41" pos:end="1211:43"><expr pos:start="1211:41" pos:end="1211:43"><name pos:start="1211:41" pos:end="1211:43">tmp</name></expr></argument>, <argument pos:start="1211:46" pos:end="1211:52"><expr pos:start="1211:46" pos:end="1211:52"><name pos:start="1211:46" pos:end="1211:52">cpu_env</name></expr></argument>, <argument pos:start="1211:55" pos:end="1211:57"><expr pos:start="1211:55" pos:end="1211:57"><name pos:start="1211:55" pos:end="1211:57">tmp</name></expr></argument>, <argument pos:start="1211:60" pos:end="1211:63"><expr pos:start="1211:60" pos:end="1211:63"><name pos:start="1211:60" pos:end="1211:63">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1213:21" pos:end="1213:44"><expr pos:start="1213:21" pos:end="1213:43"><call pos:start="1213:21" pos:end="1213:43"><name pos:start="1213:21" pos:end="1213:37">tcg_temp_free_i32</name><argument_list pos:start="1213:38" pos:end="1213:43">(<argument pos:start="1213:39" pos:end="1213:42"><expr pos:start="1213:39" pos:end="1213:42"><name pos:start="1213:39" pos:end="1213:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  </block_content>}</block></if></if_stmt>

                <break pos:start="1217:17" pos:end="1217:22">break;</break>

            <case pos:start="1219:13" pos:end="1219:19">case <expr pos:start="1219:18" pos:end="1219:18"><literal type="number" pos:start="1219:18" pos:end="1219:18">3</literal></expr>:</case> <comment type="block" pos:start="1219:21" pos:end="1219:42">/* 32 * 16 -&gt; 32msb */</comment>

                <if_stmt pos:start="1221:17" pos:end="1227:35"><if pos:start="1221:17" pos:end="1223:53">if <condition pos:start="1221:20" pos:end="1221:23">(<expr pos:start="1221:21" pos:end="1221:22"><name pos:start="1221:21" pos:end="1221:22">op</name></expr>)</condition><block type="pseudo" pos:start="1223:21" pos:end="1223:53"><block_content pos:start="1223:21" pos:end="1223:53">

                    <expr_stmt pos:start="1223:21" pos:end="1223:53"><expr pos:start="1223:21" pos:end="1223:52"><call pos:start="1223:21" pos:end="1223:52"><name pos:start="1223:21" pos:end="1223:36">tcg_gen_sari_i32</name><argument_list pos:start="1223:37" pos:end="1223:52">(<argument pos:start="1223:38" pos:end="1223:41"><expr pos:start="1223:38" pos:end="1223:41"><name pos:start="1223:38" pos:end="1223:41">tmp2</name></expr></argument>, <argument pos:start="1223:44" pos:end="1223:47"><expr pos:start="1223:44" pos:end="1223:47"><name pos:start="1223:44" pos:end="1223:47">tmp2</name></expr></argument>, <argument pos:start="1223:50" pos:end="1223:51"><expr pos:start="1223:50" pos:end="1223:51"><literal type="number" pos:start="1223:50" pos:end="1223:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1225:17" pos:end="1227:35">else<block type="pseudo" pos:start="1227:21" pos:end="1227:35"><block_content pos:start="1227:21" pos:end="1227:35">

                    <expr_stmt pos:start="1227:21" pos:end="1227:35"><expr pos:start="1227:21" pos:end="1227:34"><call pos:start="1227:21" pos:end="1227:34"><name pos:start="1227:21" pos:end="1227:28">gen_sxth</name><argument_list pos:start="1227:29" pos:end="1227:34">(<argument pos:start="1227:30" pos:end="1227:33"><expr pos:start="1227:30" pos:end="1227:33"><name pos:start="1227:30" pos:end="1227:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="1229:17" pos:end="1229:52"><expr pos:start="1229:17" pos:end="1229:51"><name pos:start="1229:17" pos:end="1229:21">tmp64</name> <operator pos:start="1229:23" pos:end="1229:23">=</operator> <call pos:start="1229:25" pos:end="1229:51"><name pos:start="1229:25" pos:end="1229:40">gen_muls_i64_i32</name><argument_list pos:start="1229:41" pos:end="1229:51">(<argument pos:start="1229:42" pos:end="1229:44"><expr pos:start="1229:42" pos:end="1229:44"><name pos:start="1229:42" pos:end="1229:44">tmp</name></expr></argument>, <argument pos:start="1229:47" pos:end="1229:50"><expr pos:start="1229:47" pos:end="1229:50"><name pos:start="1229:47" pos:end="1229:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1231:17" pos:end="1231:51"><expr pos:start="1231:17" pos:end="1231:50"><call pos:start="1231:17" pos:end="1231:50"><name pos:start="1231:17" pos:end="1231:32">tcg_gen_shri_i64</name><argument_list pos:start="1231:33" pos:end="1231:50">(<argument pos:start="1231:34" pos:end="1231:38"><expr pos:start="1231:34" pos:end="1231:38"><name pos:start="1231:34" pos:end="1231:38">tmp64</name></expr></argument>, <argument pos:start="1231:41" pos:end="1231:45"><expr pos:start="1231:41" pos:end="1231:45"><name pos:start="1231:41" pos:end="1231:45">tmp64</name></expr></argument>, <argument pos:start="1231:48" pos:end="1231:49"><expr pos:start="1231:48" pos:end="1231:49"><literal type="number" pos:start="1231:48" pos:end="1231:49">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1233:17" pos:end="1233:41"><expr pos:start="1233:17" pos:end="1233:40"><name pos:start="1233:17" pos:end="1233:19">tmp</name> <operator pos:start="1233:21" pos:end="1233:21">=</operator> <call pos:start="1233:23" pos:end="1233:40"><name pos:start="1233:23" pos:end="1233:38">tcg_temp_new_i32</name><argument_list pos:start="1233:39" pos:end="1233:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1235:17" pos:end="1235:50"><expr pos:start="1235:17" pos:end="1235:49"><call pos:start="1235:17" pos:end="1235:49"><name pos:start="1235:17" pos:end="1235:37">tcg_gen_extrl_i64_i32</name><argument_list pos:start="1235:38" pos:end="1235:49">(<argument pos:start="1235:39" pos:end="1235:41"><expr pos:start="1235:39" pos:end="1235:41"><name pos:start="1235:39" pos:end="1235:41">tmp</name></expr></argument>, <argument pos:start="1235:44" pos:end="1235:48"><expr pos:start="1235:44" pos:end="1235:48"><name pos:start="1235:44" pos:end="1235:48">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1237:17" pos:end="1237:41"><expr pos:start="1237:17" pos:end="1237:40"><call pos:start="1237:17" pos:end="1237:40"><name pos:start="1237:17" pos:end="1237:33">tcg_temp_free_i64</name><argument_list pos:start="1237:34" pos:end="1237:40">(<argument pos:start="1237:35" pos:end="1237:39"><expr pos:start="1237:35" pos:end="1237:39"><name pos:start="1237:35" pos:end="1237:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1239:17" pos:end="1249:19"><if pos:start="1239:17" pos:end="1249:19">if <condition pos:start="1239:20" pos:end="1239:29">(<expr pos:start="1239:21" pos:end="1239:28"><name pos:start="1239:21" pos:end="1239:22">rs</name> <operator pos:start="1239:24" pos:end="1239:25">!=</operator> <literal type="number" pos:start="1239:27" pos:end="1239:28">15</literal></expr>)</condition>

                  <block pos:start="1241:19" pos:end="1249:19">{<block_content pos:start="1243:21" pos:end="1247:44">

                    <expr_stmt pos:start="1243:21" pos:end="1243:43"><expr pos:start="1243:21" pos:end="1243:42"><name pos:start="1243:21" pos:end="1243:24">tmp2</name> <operator pos:start="1243:26" pos:end="1243:26">=</operator> <call pos:start="1243:28" pos:end="1243:42"><name pos:start="1243:28" pos:end="1243:35">load_reg</name><argument_list pos:start="1243:36" pos:end="1243:42">(<argument pos:start="1243:37" pos:end="1243:37"><expr pos:start="1243:37" pos:end="1243:37"><name pos:start="1243:37" pos:end="1243:37">s</name></expr></argument>, <argument pos:start="1243:40" pos:end="1243:41"><expr pos:start="1243:40" pos:end="1243:41"><name pos:start="1243:40" pos:end="1243:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1245:21" pos:end="1245:65"><expr pos:start="1245:21" pos:end="1245:64"><call pos:start="1245:21" pos:end="1245:64"><name pos:start="1245:21" pos:end="1245:39">gen_helper_add_setq</name><argument_list pos:start="1245:40" pos:end="1245:64">(<argument pos:start="1245:41" pos:end="1245:43"><expr pos:start="1245:41" pos:end="1245:43"><name pos:start="1245:41" pos:end="1245:43">tmp</name></expr></argument>, <argument pos:start="1245:46" pos:end="1245:52"><expr pos:start="1245:46" pos:end="1245:52"><name pos:start="1245:46" pos:end="1245:52">cpu_env</name></expr></argument>, <argument pos:start="1245:55" pos:end="1245:57"><expr pos:start="1245:55" pos:end="1245:57"><name pos:start="1245:55" pos:end="1245:57">tmp</name></expr></argument>, <argument pos:start="1245:60" pos:end="1245:63"><expr pos:start="1245:60" pos:end="1245:63"><name pos:start="1245:60" pos:end="1245:63">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1247:21" pos:end="1247:44"><expr pos:start="1247:21" pos:end="1247:43"><call pos:start="1247:21" pos:end="1247:43"><name pos:start="1247:21" pos:end="1247:37">tcg_temp_free_i32</name><argument_list pos:start="1247:38" pos:end="1247:43">(<argument pos:start="1247:39" pos:end="1247:42"><expr pos:start="1247:39" pos:end="1247:42"><name pos:start="1247:39" pos:end="1247:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  </block_content>}</block></if></if_stmt>

                <break pos:start="1251:17" pos:end="1251:22">break;</break>

            <case pos:start="1253:13" pos:end="1253:19">case <expr pos:start="1253:18" pos:end="1253:18"><literal type="number" pos:start="1253:18" pos:end="1253:18">5</literal></expr>:</case> <case pos:start="1253:21" pos:end="1253:27">case <expr pos:start="1253:26" pos:end="1253:26"><literal type="number" pos:start="1253:26" pos:end="1253:26">6</literal></expr>:</case> <comment type="block" pos:start="1253:29" pos:end="1253:72">/* 32 * 32 -&gt; 32msb (SMMUL, SMMLA, SMMLS) */</comment>

                <expr_stmt pos:start="1255:17" pos:end="1255:52"><expr pos:start="1255:17" pos:end="1255:51"><name pos:start="1255:17" pos:end="1255:21">tmp64</name> <operator pos:start="1255:23" pos:end="1255:23">=</operator> <call pos:start="1255:25" pos:end="1255:51"><name pos:start="1255:25" pos:end="1255:40">gen_muls_i64_i32</name><argument_list pos:start="1255:41" pos:end="1255:51">(<argument pos:start="1255:42" pos:end="1255:44"><expr pos:start="1255:42" pos:end="1255:44"><name pos:start="1255:42" pos:end="1255:44">tmp</name></expr></argument>, <argument pos:start="1255:47" pos:end="1255:50"><expr pos:start="1255:47" pos:end="1255:50"><name pos:start="1255:47" pos:end="1255:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1257:17" pos:end="1271:17"><if pos:start="1257:17" pos:end="1271:17">if <condition pos:start="1257:20" pos:end="1257:29">(<expr pos:start="1257:21" pos:end="1257:28"><name pos:start="1257:21" pos:end="1257:22">rs</name> <operator pos:start="1257:24" pos:end="1257:25">!=</operator> <literal type="number" pos:start="1257:27" pos:end="1257:28">15</literal></expr>)</condition> <block pos:start="1257:31" pos:end="1271:17">{<block_content pos:start="1259:21" pos:end="1269:21">

                    <expr_stmt pos:start="1259:21" pos:end="1259:42"><expr pos:start="1259:21" pos:end="1259:41"><name pos:start="1259:21" pos:end="1259:23">tmp</name> <operator pos:start="1259:25" pos:end="1259:25">=</operator> <call pos:start="1259:27" pos:end="1259:41"><name pos:start="1259:27" pos:end="1259:34">load_reg</name><argument_list pos:start="1259:35" pos:end="1259:41">(<argument pos:start="1259:36" pos:end="1259:36"><expr pos:start="1259:36" pos:end="1259:36"><name pos:start="1259:36" pos:end="1259:36">s</name></expr></argument>, <argument pos:start="1259:39" pos:end="1259:40"><expr pos:start="1259:39" pos:end="1259:40"><name pos:start="1259:39" pos:end="1259:40">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1261:21" pos:end="1269:21"><if pos:start="1261:21" pos:end="1265:21">if <condition pos:start="1261:24" pos:end="1261:41">(<expr pos:start="1261:25" pos:end="1261:40"><name pos:start="1261:25" pos:end="1261:28">insn</name> <operator pos:start="1261:30" pos:end="1261:30">&amp;</operator> <operator pos:start="1261:32" pos:end="1261:32">(</operator><literal type="number" pos:start="1261:33" pos:end="1261:33">1</literal> <operator pos:start="1261:35" pos:end="1261:36">&lt;&lt;</operator> <literal type="number" pos:start="1261:38" pos:end="1261:39">20</literal><operator pos:start="1261:40" pos:end="1261:40">)</operator></expr>)</condition> <block pos:start="1261:43" pos:end="1265:21">{<block_content pos:start="1263:25" pos:end="1263:57">

                        <expr_stmt pos:start="1263:25" pos:end="1263:57"><expr pos:start="1263:25" pos:end="1263:56"><name pos:start="1263:25" pos:end="1263:29">tmp64</name> <operator pos:start="1263:31" pos:end="1263:31">=</operator> <call pos:start="1263:33" pos:end="1263:56"><name pos:start="1263:33" pos:end="1263:44">gen_addq_msw</name><argument_list pos:start="1263:45" pos:end="1263:56">(<argument pos:start="1263:46" pos:end="1263:50"><expr pos:start="1263:46" pos:end="1263:50"><name pos:start="1263:46" pos:end="1263:50">tmp64</name></expr></argument>, <argument pos:start="1263:53" pos:end="1263:55"><expr pos:start="1263:53" pos:end="1263:55"><name pos:start="1263:53" pos:end="1263:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1265:23" pos:end="1269:21">else <block pos:start="1265:28" pos:end="1269:21">{<block_content pos:start="1267:25" pos:end="1267:57">

                        <expr_stmt pos:start="1267:25" pos:end="1267:57"><expr pos:start="1267:25" pos:end="1267:56"><name pos:start="1267:25" pos:end="1267:29">tmp64</name> <operator pos:start="1267:31" pos:end="1267:31">=</operator> <call pos:start="1267:33" pos:end="1267:56"><name pos:start="1267:33" pos:end="1267:44">gen_subq_msw</name><argument_list pos:start="1267:45" pos:end="1267:56">(<argument pos:start="1267:46" pos:end="1267:50"><expr pos:start="1267:46" pos:end="1267:50"><name pos:start="1267:46" pos:end="1267:50">tmp64</name></expr></argument>, <argument pos:start="1267:53" pos:end="1267:55"><expr pos:start="1267:53" pos:end="1267:55"><name pos:start="1267:53" pos:end="1267:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1273:17" pos:end="1277:17"><if pos:start="1273:17" pos:end="1277:17">if <condition pos:start="1273:20" pos:end="1273:36">(<expr pos:start="1273:21" pos:end="1273:35"><name pos:start="1273:21" pos:end="1273:24">insn</name> <operator pos:start="1273:26" pos:end="1273:26">&amp;</operator> <operator pos:start="1273:28" pos:end="1273:28">(</operator><literal type="number" pos:start="1273:29" pos:end="1273:29">1</literal> <operator pos:start="1273:31" pos:end="1273:32">&lt;&lt;</operator> <literal type="number" pos:start="1273:34" pos:end="1273:34">4</literal><operator pos:start="1273:35" pos:end="1273:35">)</operator></expr>)</condition> <block pos:start="1273:38" pos:end="1277:17">{<block_content pos:start="1275:21" pos:end="1275:64">

                    <expr_stmt pos:start="1275:21" pos:end="1275:64"><expr pos:start="1275:21" pos:end="1275:63"><call pos:start="1275:21" pos:end="1275:63"><name pos:start="1275:21" pos:end="1275:36">tcg_gen_addi_i64</name><argument_list pos:start="1275:37" pos:end="1275:63">(<argument pos:start="1275:38" pos:end="1275:42"><expr pos:start="1275:38" pos:end="1275:42"><name pos:start="1275:38" pos:end="1275:42">tmp64</name></expr></argument>, <argument pos:start="1275:45" pos:end="1275:49"><expr pos:start="1275:45" pos:end="1275:49"><name pos:start="1275:45" pos:end="1275:49">tmp64</name></expr></argument>, <argument pos:start="1275:52" pos:end="1275:62"><expr pos:start="1275:52" pos:end="1275:62"><literal type="number" pos:start="1275:52" pos:end="1275:62">0x80000000u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1279:17" pos:end="1279:51"><expr pos:start="1279:17" pos:end="1279:50"><call pos:start="1279:17" pos:end="1279:50"><name pos:start="1279:17" pos:end="1279:32">tcg_gen_shri_i64</name><argument_list pos:start="1279:33" pos:end="1279:50">(<argument pos:start="1279:34" pos:end="1279:38"><expr pos:start="1279:34" pos:end="1279:38"><name pos:start="1279:34" pos:end="1279:38">tmp64</name></expr></argument>, <argument pos:start="1279:41" pos:end="1279:45"><expr pos:start="1279:41" pos:end="1279:45"><name pos:start="1279:41" pos:end="1279:45">tmp64</name></expr></argument>, <argument pos:start="1279:48" pos:end="1279:49"><expr pos:start="1279:48" pos:end="1279:49"><literal type="number" pos:start="1279:48" pos:end="1279:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1281:17" pos:end="1281:41"><expr pos:start="1281:17" pos:end="1281:40"><name pos:start="1281:17" pos:end="1281:19">tmp</name> <operator pos:start="1281:21" pos:end="1281:21">=</operator> <call pos:start="1281:23" pos:end="1281:40"><name pos:start="1281:23" pos:end="1281:38">tcg_temp_new_i32</name><argument_list pos:start="1281:39" pos:end="1281:40">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1283:17" pos:end="1283:50"><expr pos:start="1283:17" pos:end="1283:49"><call pos:start="1283:17" pos:end="1283:49"><name pos:start="1283:17" pos:end="1283:37">tcg_gen_extrl_i64_i32</name><argument_list pos:start="1283:38" pos:end="1283:49">(<argument pos:start="1283:39" pos:end="1283:41"><expr pos:start="1283:39" pos:end="1283:41"><name pos:start="1283:39" pos:end="1283:41">tmp</name></expr></argument>, <argument pos:start="1283:44" pos:end="1283:48"><expr pos:start="1283:44" pos:end="1283:48"><name pos:start="1283:44" pos:end="1283:48">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1285:17" pos:end="1285:41"><expr pos:start="1285:17" pos:end="1285:40"><call pos:start="1285:17" pos:end="1285:40"><name pos:start="1285:17" pos:end="1285:33">tcg_temp_free_i64</name><argument_list pos:start="1285:34" pos:end="1285:40">(<argument pos:start="1285:35" pos:end="1285:39"><expr pos:start="1285:35" pos:end="1285:39"><name pos:start="1285:35" pos:end="1285:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1287:17" pos:end="1287:22">break;</break>

            <case pos:start="1289:13" pos:end="1289:19">case <expr pos:start="1289:18" pos:end="1289:18"><literal type="number" pos:start="1289:18" pos:end="1289:18">7</literal></expr>:</case> <comment type="block" pos:start="1289:21" pos:end="1289:64">/* Unsigned sum of absolute differences.  */</comment>

                <expr_stmt pos:start="1291:17" pos:end="1291:49"><expr pos:start="1291:17" pos:end="1291:48"><call pos:start="1291:17" pos:end="1291:48"><name pos:start="1291:17" pos:end="1291:32">gen_helper_usad8</name><argument_list pos:start="1291:33" pos:end="1291:48">(<argument pos:start="1291:34" pos:end="1291:36"><expr pos:start="1291:34" pos:end="1291:36"><name pos:start="1291:34" pos:end="1291:36">tmp</name></expr></argument>, <argument pos:start="1291:39" pos:end="1291:41"><expr pos:start="1291:39" pos:end="1291:41"><name pos:start="1291:39" pos:end="1291:41">tmp</name></expr></argument>, <argument pos:start="1291:44" pos:end="1291:47"><expr pos:start="1291:44" pos:end="1291:47"><name pos:start="1291:44" pos:end="1291:47">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1293:17" pos:end="1293:40"><expr pos:start="1293:17" pos:end="1293:39"><call pos:start="1293:17" pos:end="1293:39"><name pos:start="1293:17" pos:end="1293:33">tcg_temp_free_i32</name><argument_list pos:start="1293:34" pos:end="1293:39">(<argument pos:start="1293:35" pos:end="1293:38"><expr pos:start="1293:35" pos:end="1293:38"><name pos:start="1293:35" pos:end="1293:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1295:17" pos:end="1303:17"><if pos:start="1295:17" pos:end="1303:17">if <condition pos:start="1295:20" pos:end="1295:29">(<expr pos:start="1295:21" pos:end="1295:28"><name pos:start="1295:21" pos:end="1295:22">rs</name> <operator pos:start="1295:24" pos:end="1295:25">!=</operator> <literal type="number" pos:start="1295:27" pos:end="1295:28">15</literal></expr>)</condition> <block pos:start="1295:31" pos:end="1303:17">{<block_content pos:start="1297:21" pos:end="1301:44">

                    <expr_stmt pos:start="1297:21" pos:end="1297:43"><expr pos:start="1297:21" pos:end="1297:42"><name pos:start="1297:21" pos:end="1297:24">tmp2</name> <operator pos:start="1297:26" pos:end="1297:26">=</operator> <call pos:start="1297:28" pos:end="1297:42"><name pos:start="1297:28" pos:end="1297:35">load_reg</name><argument_list pos:start="1297:36" pos:end="1297:42">(<argument pos:start="1297:37" pos:end="1297:37"><expr pos:start="1297:37" pos:end="1297:37"><name pos:start="1297:37" pos:end="1297:37">s</name></expr></argument>, <argument pos:start="1297:40" pos:end="1297:41"><expr pos:start="1297:40" pos:end="1297:41"><name pos:start="1297:40" pos:end="1297:41">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1299:21" pos:end="1299:52"><expr pos:start="1299:21" pos:end="1299:51"><call pos:start="1299:21" pos:end="1299:51"><name pos:start="1299:21" pos:end="1299:35">tcg_gen_add_i32</name><argument_list pos:start="1299:36" pos:end="1299:51">(<argument pos:start="1299:37" pos:end="1299:39"><expr pos:start="1299:37" pos:end="1299:39"><name pos:start="1299:37" pos:end="1299:39">tmp</name></expr></argument>, <argument pos:start="1299:42" pos:end="1299:44"><expr pos:start="1299:42" pos:end="1299:44"><name pos:start="1299:42" pos:end="1299:44">tmp</name></expr></argument>, <argument pos:start="1299:47" pos:end="1299:50"><expr pos:start="1299:47" pos:end="1299:50"><name pos:start="1299:47" pos:end="1299:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1301:21" pos:end="1301:44"><expr pos:start="1301:21" pos:end="1301:43"><call pos:start="1301:21" pos:end="1301:43"><name pos:start="1301:21" pos:end="1301:37">tcg_temp_free_i32</name><argument_list pos:start="1301:38" pos:end="1301:43">(<argument pos:start="1301:39" pos:end="1301:42"><expr pos:start="1301:39" pos:end="1301:42"><name pos:start="1301:39" pos:end="1301:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="1305:17" pos:end="1305:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="1309:13" pos:end="1309:34"><expr pos:start="1309:13" pos:end="1309:33"><call pos:start="1309:13" pos:end="1309:33"><name pos:start="1309:13" pos:end="1309:21">store_reg</name><argument_list pos:start="1309:22" pos:end="1309:33">(<argument pos:start="1309:23" pos:end="1309:23"><expr pos:start="1309:23" pos:end="1309:23"><name pos:start="1309:23" pos:end="1309:23">s</name></expr></argument>, <argument pos:start="1309:26" pos:end="1309:27"><expr pos:start="1309:26" pos:end="1309:27"><name pos:start="1309:26" pos:end="1309:27">rd</name></expr></argument>, <argument pos:start="1309:30" pos:end="1309:32"><expr pos:start="1309:30" pos:end="1309:32"><name pos:start="1309:30" pos:end="1309:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1311:13" pos:end="1311:18">break;</break>

        <case pos:start="1313:9" pos:end="1313:15">case <expr pos:start="1313:14" pos:end="1313:14"><literal type="number" pos:start="1313:14" pos:end="1313:14">6</literal></expr>:</case> <case pos:start="1313:17" pos:end="1313:23">case <expr pos:start="1313:22" pos:end="1313:22"><literal type="number" pos:start="1313:22" pos:end="1313:22">7</literal></expr>:</case> <comment type="block" pos:start="1313:25" pos:end="1313:55">/* 64-bit multiply, Divide.  */</comment>

            <expr_stmt pos:start="1315:13" pos:end="1315:61"><expr pos:start="1315:13" pos:end="1315:60"><name pos:start="1315:13" pos:end="1315:14">op</name> <operator pos:start="1315:16" pos:end="1315:16">=</operator> <operator pos:start="1315:18" pos:end="1315:18">(</operator><operator pos:start="1315:19" pos:end="1315:19">(</operator><name pos:start="1315:20" pos:end="1315:23">insn</name> <operator pos:start="1315:25" pos:end="1315:26">&gt;&gt;</operator> <literal type="number" pos:start="1315:28" pos:end="1315:28">4</literal><operator pos:start="1315:29" pos:end="1315:29">)</operator> <operator pos:start="1315:31" pos:end="1315:31">&amp;</operator> <literal type="number" pos:start="1315:33" pos:end="1315:35">0xf</literal><operator pos:start="1315:36" pos:end="1315:36">)</operator> <operator pos:start="1315:38" pos:end="1315:38">|</operator> <operator pos:start="1315:40" pos:end="1315:40">(</operator><operator pos:start="1315:41" pos:end="1315:41">(</operator><name pos:start="1315:42" pos:end="1315:45">insn</name> <operator pos:start="1315:47" pos:end="1315:48">&gt;&gt;</operator> <literal type="number" pos:start="1315:50" pos:end="1315:51">16</literal><operator pos:start="1315:52" pos:end="1315:52">)</operator> <operator pos:start="1315:54" pos:end="1315:54">&amp;</operator> <literal type="number" pos:start="1315:56" pos:end="1315:59">0x70</literal><operator pos:start="1315:60" pos:end="1315:60">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1317:13" pos:end="1317:34"><expr pos:start="1317:13" pos:end="1317:33"><name pos:start="1317:13" pos:end="1317:15">tmp</name> <operator pos:start="1317:17" pos:end="1317:17">=</operator> <call pos:start="1317:19" pos:end="1317:33"><name pos:start="1317:19" pos:end="1317:26">load_reg</name><argument_list pos:start="1317:27" pos:end="1317:33">(<argument pos:start="1317:28" pos:end="1317:28"><expr pos:start="1317:28" pos:end="1317:28"><name pos:start="1317:28" pos:end="1317:28">s</name></expr></argument>, <argument pos:start="1317:31" pos:end="1317:32"><expr pos:start="1317:31" pos:end="1317:32"><name pos:start="1317:31" pos:end="1317:32">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1319:13" pos:end="1319:35"><expr pos:start="1319:13" pos:end="1319:34"><name pos:start="1319:13" pos:end="1319:16">tmp2</name> <operator pos:start="1319:18" pos:end="1319:18">=</operator> <call pos:start="1319:20" pos:end="1319:34"><name pos:start="1319:20" pos:end="1319:27">load_reg</name><argument_list pos:start="1319:28" pos:end="1319:34">(<argument pos:start="1319:29" pos:end="1319:29"><expr pos:start="1319:29" pos:end="1319:29"><name pos:start="1319:29" pos:end="1319:29">s</name></expr></argument>, <argument pos:start="1319:32" pos:end="1319:33"><expr pos:start="1319:32" pos:end="1319:33"><name pos:start="1319:32" pos:end="1319:33">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1321:13" pos:end="1461:13"><if pos:start="1321:13" pos:end="1343:13">if <condition pos:start="1321:16" pos:end="1321:36">(<expr pos:start="1321:17" pos:end="1321:35"><operator pos:start="1321:17" pos:end="1321:17">(</operator><name pos:start="1321:18" pos:end="1321:19">op</name> <operator pos:start="1321:21" pos:end="1321:21">&amp;</operator> <literal type="number" pos:start="1321:23" pos:end="1321:26">0x50</literal><operator pos:start="1321:27" pos:end="1321:27">)</operator> <operator pos:start="1321:29" pos:end="1321:30">==</operator> <literal type="number" pos:start="1321:32" pos:end="1321:35">0x10</literal></expr>)</condition> <block pos:start="1321:38" pos:end="1343:13">{<block_content pos:start="1325:17" pos:end="1341:38">

                <comment type="block" pos:start="1323:17" pos:end="1323:32">/* sdiv, udiv */</comment>

                <if_stmt pos:start="1325:17" pos:end="1329:17"><if pos:start="1325:17" pos:end="1329:17">if <condition pos:start="1325:20" pos:end="1325:62">(<expr pos:start="1325:21" pos:end="1325:61"><operator pos:start="1325:21" pos:end="1325:21">!</operator><call pos:start="1325:22" pos:end="1325:61"><name pos:start="1325:22" pos:end="1325:35">arm_dc_feature</name><argument_list pos:start="1325:36" pos:end="1325:61">(<argument pos:start="1325:37" pos:end="1325:37"><expr pos:start="1325:37" pos:end="1325:37"><name pos:start="1325:37" pos:end="1325:37">s</name></expr></argument>, <argument pos:start="1325:40" pos:end="1325:60"><expr pos:start="1325:40" pos:end="1325:60"><name pos:start="1325:40" pos:end="1325:60">ARM_FEATURE_THUMB_DIV</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1325:64" pos:end="1329:17">{<block_content pos:start="1327:21" pos:end="1327:36">

                    <goto pos:start="1327:21" pos:end="1327:36">goto <name pos:start="1327:26" pos:end="1327:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1331:17" pos:end="1337:52"><if pos:start="1331:17" pos:end="1333:52">if <condition pos:start="1331:20" pos:end="1331:30">(<expr pos:start="1331:21" pos:end="1331:29"><name pos:start="1331:21" pos:end="1331:22">op</name> <operator pos:start="1331:24" pos:end="1331:24">&amp;</operator> <literal type="number" pos:start="1331:26" pos:end="1331:29">0x20</literal></expr>)</condition><block type="pseudo" pos:start="1333:21" pos:end="1333:52"><block_content pos:start="1333:21" pos:end="1333:52">

                    <expr_stmt pos:start="1333:21" pos:end="1333:52"><expr pos:start="1333:21" pos:end="1333:51"><call pos:start="1333:21" pos:end="1333:51"><name pos:start="1333:21" pos:end="1333:35">gen_helper_udiv</name><argument_list pos:start="1333:36" pos:end="1333:51">(<argument pos:start="1333:37" pos:end="1333:39"><expr pos:start="1333:37" pos:end="1333:39"><name pos:start="1333:37" pos:end="1333:39">tmp</name></expr></argument>, <argument pos:start="1333:42" pos:end="1333:44"><expr pos:start="1333:42" pos:end="1333:44"><name pos:start="1333:42" pos:end="1333:44">tmp</name></expr></argument>, <argument pos:start="1333:47" pos:end="1333:50"><expr pos:start="1333:47" pos:end="1333:50"><name pos:start="1333:47" pos:end="1333:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1335:17" pos:end="1337:52">else<block type="pseudo" pos:start="1337:21" pos:end="1337:52"><block_content pos:start="1337:21" pos:end="1337:52">

                    <expr_stmt pos:start="1337:21" pos:end="1337:52"><expr pos:start="1337:21" pos:end="1337:51"><call pos:start="1337:21" pos:end="1337:51"><name pos:start="1337:21" pos:end="1337:35">gen_helper_sdiv</name><argument_list pos:start="1337:36" pos:end="1337:51">(<argument pos:start="1337:37" pos:end="1337:39"><expr pos:start="1337:37" pos:end="1337:39"><name pos:start="1337:37" pos:end="1337:39">tmp</name></expr></argument>, <argument pos:start="1337:42" pos:end="1337:44"><expr pos:start="1337:42" pos:end="1337:44"><name pos:start="1337:42" pos:end="1337:44">tmp</name></expr></argument>, <argument pos:start="1337:47" pos:end="1337:50"><expr pos:start="1337:47" pos:end="1337:50"><name pos:start="1337:47" pos:end="1337:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="1339:17" pos:end="1339:40"><expr pos:start="1339:17" pos:end="1339:39"><call pos:start="1339:17" pos:end="1339:39"><name pos:start="1339:17" pos:end="1339:33">tcg_temp_free_i32</name><argument_list pos:start="1339:34" pos:end="1339:39">(<argument pos:start="1339:35" pos:end="1339:38"><expr pos:start="1339:35" pos:end="1339:38"><name pos:start="1339:35" pos:end="1339:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1341:17" pos:end="1341:38"><expr pos:start="1341:17" pos:end="1341:37"><call pos:start="1341:17" pos:end="1341:37"><name pos:start="1341:17" pos:end="1341:25">store_reg</name><argument_list pos:start="1341:26" pos:end="1341:37">(<argument pos:start="1341:27" pos:end="1341:27"><expr pos:start="1341:27" pos:end="1341:27"><name pos:start="1341:27" pos:end="1341:27">s</name></expr></argument>, <argument pos:start="1341:30" pos:end="1341:31"><expr pos:start="1341:30" pos:end="1341:31"><name pos:start="1341:30" pos:end="1341:31">rd</name></expr></argument>, <argument pos:start="1341:34" pos:end="1341:36"><expr pos:start="1341:34" pos:end="1341:36"><name pos:start="1341:34" pos:end="1341:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1343:15" pos:end="1389:13">else if <condition pos:start="1343:23" pos:end="1343:41">(<expr pos:start="1343:24" pos:end="1343:40"><operator pos:start="1343:24" pos:end="1343:24">(</operator><name pos:start="1343:25" pos:end="1343:26">op</name> <operator pos:start="1343:28" pos:end="1343:28">&amp;</operator> <literal type="number" pos:start="1343:30" pos:end="1343:32">0xe</literal><operator pos:start="1343:33" pos:end="1343:33">)</operator> <operator pos:start="1343:35" pos:end="1343:36">==</operator> <literal type="number" pos:start="1343:38" pos:end="1343:40">0xc</literal></expr>)</condition> <block pos:start="1343:43" pos:end="1389:13">{<block_content pos:start="1347:17" pos:end="1387:41">

                <comment type="block" pos:start="1345:17" pos:end="1345:53">/* Dual multiply accumulate long.  */</comment>

                <if_stmt pos:start="1347:17" pos:end="1355:17"><if pos:start="1347:17" pos:end="1355:17">if <condition pos:start="1347:20" pos:end="1347:62">(<expr pos:start="1347:21" pos:end="1347:61"><operator pos:start="1347:21" pos:end="1347:21">!</operator><call pos:start="1347:22" pos:end="1347:61"><name pos:start="1347:22" pos:end="1347:35">arm_dc_feature</name><argument_list pos:start="1347:36" pos:end="1347:61">(<argument pos:start="1347:37" pos:end="1347:37"><expr pos:start="1347:37" pos:end="1347:37"><name pos:start="1347:37" pos:end="1347:37">s</name></expr></argument>, <argument pos:start="1347:40" pos:end="1347:60"><expr pos:start="1347:40" pos:end="1347:60"><name pos:start="1347:40" pos:end="1347:60">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1347:64" pos:end="1355:17">{<block_content pos:start="1349:21" pos:end="1353:36">

                    <expr_stmt pos:start="1349:21" pos:end="1349:43"><expr pos:start="1349:21" pos:end="1349:42"><call pos:start="1349:21" pos:end="1349:42"><name pos:start="1349:21" pos:end="1349:37">tcg_temp_free_i32</name><argument_list pos:start="1349:38" pos:end="1349:42">(<argument pos:start="1349:39" pos:end="1349:41"><expr pos:start="1349:39" pos:end="1349:41"><name pos:start="1349:39" pos:end="1349:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1351:21" pos:end="1351:44"><expr pos:start="1351:21" pos:end="1351:43"><call pos:start="1351:21" pos:end="1351:43"><name pos:start="1351:21" pos:end="1351:37">tcg_temp_free_i32</name><argument_list pos:start="1351:38" pos:end="1351:43">(<argument pos:start="1351:39" pos:end="1351:42"><expr pos:start="1351:39" pos:end="1351:42"><name pos:start="1351:39" pos:end="1351:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="1353:21" pos:end="1353:36">goto <name pos:start="1353:26" pos:end="1353:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="1357:17" pos:end="1359:40"><if pos:start="1357:17" pos:end="1359:40">if <condition pos:start="1357:20" pos:end="1357:27">(<expr pos:start="1357:21" pos:end="1357:26"><name pos:start="1357:21" pos:end="1357:22">op</name> <operator pos:start="1357:24" pos:end="1357:24">&amp;</operator> <literal type="number" pos:start="1357:26" pos:end="1357:26">1</literal></expr>)</condition><block type="pseudo" pos:start="1359:21" pos:end="1359:40"><block_content pos:start="1359:21" pos:end="1359:40">

                    <expr_stmt pos:start="1359:21" pos:end="1359:40"><expr pos:start="1359:21" pos:end="1359:39"><call pos:start="1359:21" pos:end="1359:39"><name pos:start="1359:21" pos:end="1359:33">gen_swap_half</name><argument_list pos:start="1359:34" pos:end="1359:39">(<argument pos:start="1359:35" pos:end="1359:38"><expr pos:start="1359:35" pos:end="1359:38"><name pos:start="1359:35" pos:end="1359:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1361:17" pos:end="1361:41"><expr pos:start="1361:17" pos:end="1361:40"><call pos:start="1361:17" pos:end="1361:40"><name pos:start="1361:17" pos:end="1361:29">gen_smul_dual</name><argument_list pos:start="1361:30" pos:end="1361:40">(<argument pos:start="1361:31" pos:end="1361:33"><expr pos:start="1361:31" pos:end="1361:33"><name pos:start="1361:31" pos:end="1361:33">tmp</name></expr></argument>, <argument pos:start="1361:36" pos:end="1361:39"><expr pos:start="1361:36" pos:end="1361:39"><name pos:start="1361:36" pos:end="1361:39">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1363:17" pos:end="1371:17"><if pos:start="1363:17" pos:end="1367:17">if <condition pos:start="1363:20" pos:end="1363:30">(<expr pos:start="1363:21" pos:end="1363:29"><name pos:start="1363:21" pos:end="1363:22">op</name> <operator pos:start="1363:24" pos:end="1363:24">&amp;</operator> <literal type="number" pos:start="1363:26" pos:end="1363:29">0x10</literal></expr>)</condition> <block pos:start="1363:32" pos:end="1367:17">{<block_content pos:start="1365:21" pos:end="1365:52">

                    <expr_stmt pos:start="1365:21" pos:end="1365:52"><expr pos:start="1365:21" pos:end="1365:51"><call pos:start="1365:21" pos:end="1365:51"><name pos:start="1365:21" pos:end="1365:35">tcg_gen_sub_i32</name><argument_list pos:start="1365:36" pos:end="1365:51">(<argument pos:start="1365:37" pos:end="1365:39"><expr pos:start="1365:37" pos:end="1365:39"><name pos:start="1365:37" pos:end="1365:39">tmp</name></expr></argument>, <argument pos:start="1365:42" pos:end="1365:44"><expr pos:start="1365:42" pos:end="1365:44"><name pos:start="1365:42" pos:end="1365:44">tmp</name></expr></argument>, <argument pos:start="1365:47" pos:end="1365:50"><expr pos:start="1365:47" pos:end="1365:50"><name pos:start="1365:47" pos:end="1365:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1367:19" pos:end="1371:17">else <block pos:start="1367:24" pos:end="1371:17">{<block_content pos:start="1369:21" pos:end="1369:52">

                    <expr_stmt pos:start="1369:21" pos:end="1369:52"><expr pos:start="1369:21" pos:end="1369:51"><call pos:start="1369:21" pos:end="1369:51"><name pos:start="1369:21" pos:end="1369:35">tcg_gen_add_i32</name><argument_list pos:start="1369:36" pos:end="1369:51">(<argument pos:start="1369:37" pos:end="1369:39"><expr pos:start="1369:37" pos:end="1369:39"><name pos:start="1369:37" pos:end="1369:39">tmp</name></expr></argument>, <argument pos:start="1369:42" pos:end="1369:44"><expr pos:start="1369:42" pos:end="1369:44"><name pos:start="1369:42" pos:end="1369:44">tmp</name></expr></argument>, <argument pos:start="1369:47" pos:end="1369:50"><expr pos:start="1369:47" pos:end="1369:50"><name pos:start="1369:47" pos:end="1369:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1373:17" pos:end="1373:40"><expr pos:start="1373:17" pos:end="1373:39"><call pos:start="1373:17" pos:end="1373:39"><name pos:start="1373:17" pos:end="1373:33">tcg_temp_free_i32</name><argument_list pos:start="1373:34" pos:end="1373:39">(<argument pos:start="1373:35" pos:end="1373:38"><expr pos:start="1373:35" pos:end="1373:38"><name pos:start="1373:35" pos:end="1373:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1375:17" pos:end="1375:28">/* BUGFIX */</comment>

                <expr_stmt pos:start="1377:17" pos:end="1377:43"><expr pos:start="1377:17" pos:end="1377:42"><name pos:start="1377:17" pos:end="1377:21">tmp64</name> <operator pos:start="1377:23" pos:end="1377:23">=</operator> <call pos:start="1377:25" pos:end="1377:42"><name pos:start="1377:25" pos:end="1377:40">tcg_temp_new_i64</name><argument_list pos:start="1377:41" pos:end="1377:42">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1379:17" pos:end="1379:48"><expr pos:start="1379:17" pos:end="1379:47"><call pos:start="1379:17" pos:end="1379:47"><name pos:start="1379:17" pos:end="1379:35">tcg_gen_ext_i32_i64</name><argument_list pos:start="1379:36" pos:end="1379:47">(<argument pos:start="1379:37" pos:end="1379:41"><expr pos:start="1379:37" pos:end="1379:41"><name pos:start="1379:37" pos:end="1379:41">tmp64</name></expr></argument>, <argument pos:start="1379:44" pos:end="1379:46"><expr pos:start="1379:44" pos:end="1379:46"><name pos:start="1379:44" pos:end="1379:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1381:17" pos:end="1381:39"><expr pos:start="1381:17" pos:end="1381:38"><call pos:start="1381:17" pos:end="1381:38"><name pos:start="1381:17" pos:end="1381:33">tcg_temp_free_i32</name><argument_list pos:start="1381:34" pos:end="1381:38">(<argument pos:start="1381:35" pos:end="1381:37"><expr pos:start="1381:35" pos:end="1381:37"><name pos:start="1381:35" pos:end="1381:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1383:17" pos:end="1383:43"><expr pos:start="1383:17" pos:end="1383:42"><call pos:start="1383:17" pos:end="1383:42"><name pos:start="1383:17" pos:end="1383:24">gen_addq</name><argument_list pos:start="1383:25" pos:end="1383:42">(<argument pos:start="1383:26" pos:end="1383:26"><expr pos:start="1383:26" pos:end="1383:26"><name pos:start="1383:26" pos:end="1383:26">s</name></expr></argument>, <argument pos:start="1383:29" pos:end="1383:33"><expr pos:start="1383:29" pos:end="1383:33"><name pos:start="1383:29" pos:end="1383:33">tmp64</name></expr></argument>, <argument pos:start="1383:36" pos:end="1383:37"><expr pos:start="1383:36" pos:end="1383:37"><name pos:start="1383:36" pos:end="1383:37">rs</name></expr></argument>, <argument pos:start="1383:40" pos:end="1383:41"><expr pos:start="1383:40" pos:end="1383:41"><name pos:start="1383:40" pos:end="1383:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1385:17" pos:end="1385:49"><expr pos:start="1385:17" pos:end="1385:48"><call pos:start="1385:17" pos:end="1385:48"><name pos:start="1385:17" pos:end="1385:30">gen_storeq_reg</name><argument_list pos:start="1385:31" pos:end="1385:48">(<argument pos:start="1385:32" pos:end="1385:32"><expr pos:start="1385:32" pos:end="1385:32"><name pos:start="1385:32" pos:end="1385:32">s</name></expr></argument>, <argument pos:start="1385:35" pos:end="1385:36"><expr pos:start="1385:35" pos:end="1385:36"><name pos:start="1385:35" pos:end="1385:36">rs</name></expr></argument>, <argument pos:start="1385:39" pos:end="1385:40"><expr pos:start="1385:39" pos:end="1385:40"><name pos:start="1385:39" pos:end="1385:40">rd</name></expr></argument>, <argument pos:start="1385:43" pos:end="1385:47"><expr pos:start="1385:43" pos:end="1385:47"><name pos:start="1385:43" pos:end="1385:47">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1387:17" pos:end="1387:41"><expr pos:start="1387:17" pos:end="1387:40"><call pos:start="1387:17" pos:end="1387:40"><name pos:start="1387:17" pos:end="1387:33">tcg_temp_free_i64</name><argument_list pos:start="1387:34" pos:end="1387:40">(<argument pos:start="1387:35" pos:end="1387:39"><expr pos:start="1387:35" pos:end="1387:39"><name pos:start="1387:35" pos:end="1387:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1389:15" pos:end="1461:13">else <block pos:start="1389:20" pos:end="1461:13">{<block_content pos:start="1391:17" pos:end="1459:41">

                <if_stmt pos:start="1391:17" pos:end="1431:17"><if pos:start="1391:17" pos:end="1397:17">if <condition pos:start="1391:20" pos:end="1391:30">(<expr pos:start="1391:21" pos:end="1391:29"><name pos:start="1391:21" pos:end="1391:22">op</name> <operator pos:start="1391:24" pos:end="1391:24">&amp;</operator> <literal type="number" pos:start="1391:26" pos:end="1391:29">0x20</literal></expr>)</condition> <block pos:start="1391:32" pos:end="1397:17">{<block_content pos:start="1395:21" pos:end="1395:56">

                    <comment type="block" pos:start="1393:21" pos:end="1393:51">/* Unsigned 64-bit multiply  */</comment>

                    <expr_stmt pos:start="1395:21" pos:end="1395:56"><expr pos:start="1395:21" pos:end="1395:55"><name pos:start="1395:21" pos:end="1395:25">tmp64</name> <operator pos:start="1395:27" pos:end="1395:27">=</operator> <call pos:start="1395:29" pos:end="1395:55"><name pos:start="1395:29" pos:end="1395:44">gen_mulu_i64_i32</name><argument_list pos:start="1395:45" pos:end="1395:55">(<argument pos:start="1395:46" pos:end="1395:48"><expr pos:start="1395:46" pos:end="1395:48"><name pos:start="1395:46" pos:end="1395:48">tmp</name></expr></argument>, <argument pos:start="1395:51" pos:end="1395:54"><expr pos:start="1395:51" pos:end="1395:54"><name pos:start="1395:51" pos:end="1395:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1397:19" pos:end="1431:17">else <block pos:start="1397:24" pos:end="1431:17">{<block_content pos:start="1399:21" pos:end="1429:21">

                    <if_stmt pos:start="1399:21" pos:end="1429:21"><if pos:start="1399:21" pos:end="1423:21">if <condition pos:start="1399:24" pos:end="1399:31">(<expr pos:start="1399:25" pos:end="1399:30"><name pos:start="1399:25" pos:end="1399:26">op</name> <operator pos:start="1399:28" pos:end="1399:28">&amp;</operator> <literal type="number" pos:start="1399:30" pos:end="1399:30">8</literal></expr>)</condition> <block pos:start="1399:33" pos:end="1423:21">{<block_content pos:start="1403:25" pos:end="1421:47">

                        <comment type="block" pos:start="1401:25" pos:end="1401:37">/* smlalxy */</comment>

                        <if_stmt pos:start="1403:25" pos:end="1411:25"><if pos:start="1403:25" pos:end="1411:25">if <condition pos:start="1403:28" pos:end="1403:70">(<expr pos:start="1403:29" pos:end="1403:69"><operator pos:start="1403:29" pos:end="1403:29">!</operator><call pos:start="1403:30" pos:end="1403:69"><name pos:start="1403:30" pos:end="1403:43">arm_dc_feature</name><argument_list pos:start="1403:44" pos:end="1403:69">(<argument pos:start="1403:45" pos:end="1403:45"><expr pos:start="1403:45" pos:end="1403:45"><name pos:start="1403:45" pos:end="1403:45">s</name></expr></argument>, <argument pos:start="1403:48" pos:end="1403:68"><expr pos:start="1403:48" pos:end="1403:68"><name pos:start="1403:48" pos:end="1403:68">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1403:72" pos:end="1411:25">{<block_content pos:start="1405:29" pos:end="1409:44">

                            <expr_stmt pos:start="1405:29" pos:end="1405:52"><expr pos:start="1405:29" pos:end="1405:51"><call pos:start="1405:29" pos:end="1405:51"><name pos:start="1405:29" pos:end="1405:45">tcg_temp_free_i32</name><argument_list pos:start="1405:46" pos:end="1405:51">(<argument pos:start="1405:47" pos:end="1405:50"><expr pos:start="1405:47" pos:end="1405:50"><name pos:start="1405:47" pos:end="1405:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1407:29" pos:end="1407:51"><expr pos:start="1407:29" pos:end="1407:50"><call pos:start="1407:29" pos:end="1407:50"><name pos:start="1407:29" pos:end="1407:45">tcg_temp_free_i32</name><argument_list pos:start="1407:46" pos:end="1407:50">(<argument pos:start="1407:47" pos:end="1407:49"><expr pos:start="1407:47" pos:end="1407:49"><name pos:start="1407:47" pos:end="1407:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="1409:29" pos:end="1409:44">goto <name pos:start="1409:34" pos:end="1409:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1413:25" pos:end="1413:61"><expr pos:start="1413:25" pos:end="1413:60"><call pos:start="1413:25" pos:end="1413:60"><name pos:start="1413:25" pos:end="1413:33">gen_mulxy</name><argument_list pos:start="1413:34" pos:end="1413:60">(<argument pos:start="1413:35" pos:end="1413:37"><expr pos:start="1413:35" pos:end="1413:37"><name pos:start="1413:35" pos:end="1413:37">tmp</name></expr></argument>, <argument pos:start="1413:40" pos:end="1413:43"><expr pos:start="1413:40" pos:end="1413:43"><name pos:start="1413:40" pos:end="1413:43">tmp2</name></expr></argument>, <argument pos:start="1413:46" pos:end="1413:51"><expr pos:start="1413:46" pos:end="1413:51"><name pos:start="1413:46" pos:end="1413:47">op</name> <operator pos:start="1413:49" pos:end="1413:49">&amp;</operator> <literal type="number" pos:start="1413:51" pos:end="1413:51">2</literal></expr></argument>, <argument pos:start="1413:54" pos:end="1413:59"><expr pos:start="1413:54" pos:end="1413:59"><name pos:start="1413:54" pos:end="1413:55">op</name> <operator pos:start="1413:57" pos:end="1413:57">&amp;</operator> <literal type="number" pos:start="1413:59" pos:end="1413:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1415:25" pos:end="1415:48"><expr pos:start="1415:25" pos:end="1415:47"><call pos:start="1415:25" pos:end="1415:47"><name pos:start="1415:25" pos:end="1415:41">tcg_temp_free_i32</name><argument_list pos:start="1415:42" pos:end="1415:47">(<argument pos:start="1415:43" pos:end="1415:46"><expr pos:start="1415:43" pos:end="1415:46"><name pos:start="1415:43" pos:end="1415:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1417:25" pos:end="1417:51"><expr pos:start="1417:25" pos:end="1417:50"><name pos:start="1417:25" pos:end="1417:29">tmp64</name> <operator pos:start="1417:31" pos:end="1417:31">=</operator> <call pos:start="1417:33" pos:end="1417:50"><name pos:start="1417:33" pos:end="1417:48">tcg_temp_new_i64</name><argument_list pos:start="1417:49" pos:end="1417:50">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1419:25" pos:end="1419:56"><expr pos:start="1419:25" pos:end="1419:55"><call pos:start="1419:25" pos:end="1419:55"><name pos:start="1419:25" pos:end="1419:43">tcg_gen_ext_i32_i64</name><argument_list pos:start="1419:44" pos:end="1419:55">(<argument pos:start="1419:45" pos:end="1419:49"><expr pos:start="1419:45" pos:end="1419:49"><name pos:start="1419:45" pos:end="1419:49">tmp64</name></expr></argument>, <argument pos:start="1419:52" pos:end="1419:54"><expr pos:start="1419:52" pos:end="1419:54"><name pos:start="1419:52" pos:end="1419:54">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1421:25" pos:end="1421:47"><expr pos:start="1421:25" pos:end="1421:46"><call pos:start="1421:25" pos:end="1421:46"><name pos:start="1421:25" pos:end="1421:41">tcg_temp_free_i32</name><argument_list pos:start="1421:42" pos:end="1421:46">(<argument pos:start="1421:43" pos:end="1421:45"><expr pos:start="1421:43" pos:end="1421:45"><name pos:start="1421:43" pos:end="1421:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1423:23" pos:end="1429:21">else <block pos:start="1423:28" pos:end="1429:21">{<block_content pos:start="1427:25" pos:end="1427:60">

                        <comment type="block" pos:start="1425:25" pos:end="1425:53">/* Signed 64-bit multiply  */</comment>

                        <expr_stmt pos:start="1427:25" pos:end="1427:60"><expr pos:start="1427:25" pos:end="1427:59"><name pos:start="1427:25" pos:end="1427:29">tmp64</name> <operator pos:start="1427:31" pos:end="1427:31">=</operator> <call pos:start="1427:33" pos:end="1427:59"><name pos:start="1427:33" pos:end="1427:48">gen_muls_i64_i32</name><argument_list pos:start="1427:49" pos:end="1427:59">(<argument pos:start="1427:50" pos:end="1427:52"><expr pos:start="1427:50" pos:end="1427:52"><name pos:start="1427:50" pos:end="1427:52">tmp</name></expr></argument>, <argument pos:start="1427:55" pos:end="1427:58"><expr pos:start="1427:55" pos:end="1427:58"><name pos:start="1427:55" pos:end="1427:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="1433:17" pos:end="1455:17"><if pos:start="1433:17" pos:end="1449:17">if <condition pos:start="1433:20" pos:end="1433:27">(<expr pos:start="1433:21" pos:end="1433:26"><name pos:start="1433:21" pos:end="1433:22">op</name> <operator pos:start="1433:24" pos:end="1433:24">&amp;</operator> <literal type="number" pos:start="1433:26" pos:end="1433:26">4</literal></expr>)</condition> <block pos:start="1433:29" pos:end="1449:17">{<block_content pos:start="1437:21" pos:end="1447:46">

                    <comment type="block" pos:start="1435:21" pos:end="1435:31">/* umaal */</comment>

                    <if_stmt pos:start="1437:21" pos:end="1443:21"><if pos:start="1437:21" pos:end="1443:21">if <condition pos:start="1437:24" pos:end="1437:66">(<expr pos:start="1437:25" pos:end="1437:65"><operator pos:start="1437:25" pos:end="1437:25">!</operator><call pos:start="1437:26" pos:end="1437:65"><name pos:start="1437:26" pos:end="1437:39">arm_dc_feature</name><argument_list pos:start="1437:40" pos:end="1437:65">(<argument pos:start="1437:41" pos:end="1437:41"><expr pos:start="1437:41" pos:end="1437:41"><name pos:start="1437:41" pos:end="1437:41">s</name></expr></argument>, <argument pos:start="1437:44" pos:end="1437:64"><expr pos:start="1437:44" pos:end="1437:64"><name pos:start="1437:44" pos:end="1437:64">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1437:68" pos:end="1443:21">{<block_content pos:start="1439:25" pos:end="1441:40">

                        <expr_stmt pos:start="1439:25" pos:end="1439:49"><expr pos:start="1439:25" pos:end="1439:48"><call pos:start="1439:25" pos:end="1439:48"><name pos:start="1439:25" pos:end="1439:41">tcg_temp_free_i64</name><argument_list pos:start="1439:42" pos:end="1439:48">(<argument pos:start="1439:43" pos:end="1439:47"><expr pos:start="1439:43" pos:end="1439:47"><name pos:start="1439:43" pos:end="1439:47">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="1441:25" pos:end="1441:40">goto <name pos:start="1441:30" pos:end="1441:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="1445:21" pos:end="1445:46"><expr pos:start="1445:21" pos:end="1445:45"><call pos:start="1445:21" pos:end="1445:45"><name pos:start="1445:21" pos:end="1445:31">gen_addq_lo</name><argument_list pos:start="1445:32" pos:end="1445:45">(<argument pos:start="1445:33" pos:end="1445:33"><expr pos:start="1445:33" pos:end="1445:33"><name pos:start="1445:33" pos:end="1445:33">s</name></expr></argument>, <argument pos:start="1445:36" pos:end="1445:40"><expr pos:start="1445:36" pos:end="1445:40"><name pos:start="1445:36" pos:end="1445:40">tmp64</name></expr></argument>, <argument pos:start="1445:43" pos:end="1445:44"><expr pos:start="1445:43" pos:end="1445:44"><name pos:start="1445:43" pos:end="1445:44">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1447:21" pos:end="1447:46"><expr pos:start="1447:21" pos:end="1447:45"><call pos:start="1447:21" pos:end="1447:45"><name pos:start="1447:21" pos:end="1447:31">gen_addq_lo</name><argument_list pos:start="1447:32" pos:end="1447:45">(<argument pos:start="1447:33" pos:end="1447:33"><expr pos:start="1447:33" pos:end="1447:33"><name pos:start="1447:33" pos:end="1447:33">s</name></expr></argument>, <argument pos:start="1447:36" pos:end="1447:40"><expr pos:start="1447:36" pos:end="1447:40"><name pos:start="1447:36" pos:end="1447:40">tmp64</name></expr></argument>, <argument pos:start="1447:43" pos:end="1447:44"><expr pos:start="1447:43" pos:end="1447:44"><name pos:start="1447:43" pos:end="1447:44">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="1449:19" pos:end="1455:17">else if <condition pos:start="1449:27" pos:end="1449:37">(<expr pos:start="1449:28" pos:end="1449:36"><name pos:start="1449:28" pos:end="1449:29">op</name> <operator pos:start="1449:31" pos:end="1449:31">&amp;</operator> <literal type="number" pos:start="1449:33" pos:end="1449:36">0x40</literal></expr>)</condition> <block pos:start="1449:39" pos:end="1455:17">{<block_content pos:start="1453:21" pos:end="1453:47">

                    <comment type="block" pos:start="1451:21" pos:end="1451:45">/* 64-bit accumulate.  */</comment>

                    <expr_stmt pos:start="1453:21" pos:end="1453:47"><expr pos:start="1453:21" pos:end="1453:46"><call pos:start="1453:21" pos:end="1453:46"><name pos:start="1453:21" pos:end="1453:28">gen_addq</name><argument_list pos:start="1453:29" pos:end="1453:46">(<argument pos:start="1453:30" pos:end="1453:30"><expr pos:start="1453:30" pos:end="1453:30"><name pos:start="1453:30" pos:end="1453:30">s</name></expr></argument>, <argument pos:start="1453:33" pos:end="1453:37"><expr pos:start="1453:33" pos:end="1453:37"><name pos:start="1453:33" pos:end="1453:37">tmp64</name></expr></argument>, <argument pos:start="1453:40" pos:end="1453:41"><expr pos:start="1453:40" pos:end="1453:41"><name pos:start="1453:40" pos:end="1453:41">rs</name></expr></argument>, <argument pos:start="1453:44" pos:end="1453:45"><expr pos:start="1453:44" pos:end="1453:45"><name pos:start="1453:44" pos:end="1453:45">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1457:17" pos:end="1457:49"><expr pos:start="1457:17" pos:end="1457:48"><call pos:start="1457:17" pos:end="1457:48"><name pos:start="1457:17" pos:end="1457:30">gen_storeq_reg</name><argument_list pos:start="1457:31" pos:end="1457:48">(<argument pos:start="1457:32" pos:end="1457:32"><expr pos:start="1457:32" pos:end="1457:32"><name pos:start="1457:32" pos:end="1457:32">s</name></expr></argument>, <argument pos:start="1457:35" pos:end="1457:36"><expr pos:start="1457:35" pos:end="1457:36"><name pos:start="1457:35" pos:end="1457:36">rs</name></expr></argument>, <argument pos:start="1457:39" pos:end="1457:40"><expr pos:start="1457:39" pos:end="1457:40"><name pos:start="1457:39" pos:end="1457:40">rd</name></expr></argument>, <argument pos:start="1457:43" pos:end="1457:47"><expr pos:start="1457:43" pos:end="1457:47"><name pos:start="1457:43" pos:end="1457:47">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1459:17" pos:end="1459:41"><expr pos:start="1459:17" pos:end="1459:40"><call pos:start="1459:17" pos:end="1459:40"><name pos:start="1459:17" pos:end="1459:33">tcg_temp_free_i64</name><argument_list pos:start="1459:34" pos:end="1459:40">(<argument pos:start="1459:35" pos:end="1459:39"><expr pos:start="1459:35" pos:end="1459:39"><name pos:start="1459:35" pos:end="1459:39">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="1463:13" pos:end="1463:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="1467:9" pos:end="1467:14">break;</break>

    <case pos:start="1469:5" pos:end="1469:11">case <expr pos:start="1469:10" pos:end="1469:10"><literal type="number" pos:start="1469:10" pos:end="1469:10">6</literal></expr>:</case> <case pos:start="1469:13" pos:end="1469:19">case <expr pos:start="1469:18" pos:end="1469:18"><literal type="number" pos:start="1469:18" pos:end="1469:18">7</literal></expr>:</case> <case pos:start="1469:21" pos:end="1469:28">case <expr pos:start="1469:26" pos:end="1469:27"><literal type="number" pos:start="1469:26" pos:end="1469:27">14</literal></expr>:</case> <case pos:start="1469:30" pos:end="1469:37">case <expr pos:start="1469:35" pos:end="1469:36"><literal type="number" pos:start="1469:35" pos:end="1469:36">15</literal></expr>:</case>

        <comment type="block" pos:start="1471:9" pos:end="1471:27">/* Coprocessor.  */</comment>

        <if_stmt pos:start="1473:9" pos:end="1487:9"><if pos:start="1473:9" pos:end="1487:9">if <condition pos:start="1473:12" pos:end="1473:45">(<expr pos:start="1473:13" pos:end="1473:44"><call pos:start="1473:13" pos:end="1473:44"><name pos:start="1473:13" pos:end="1473:26">arm_dc_feature</name><argument_list pos:start="1473:27" pos:end="1473:44">(<argument pos:start="1473:28" pos:end="1473:28"><expr pos:start="1473:28" pos:end="1473:28"><name pos:start="1473:28" pos:end="1473:28">s</name></expr></argument>, <argument pos:start="1473:31" pos:end="1473:43"><expr pos:start="1473:31" pos:end="1473:43"><name pos:start="1473:31" pos:end="1473:43">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1473:47" pos:end="1487:9">{<block_content pos:start="1481:13" pos:end="1485:18">

            <comment type="block" pos:start="1475:13" pos:end="1479:15">/* We don't currently implement M profile FP support,

             * so this entire space should give a NOCP fault.

             */</comment>

            <expr_stmt pos:start="1481:13" pos:end="1483:56"><expr pos:start="1481:13" pos:end="1483:55"><call pos:start="1481:13" pos:end="1483:55"><name pos:start="1481:13" pos:end="1481:30">gen_exception_insn</name><argument_list pos:start="1481:31" pos:end="1483:55">(<argument pos:start="1481:32" pos:end="1481:32"><expr pos:start="1481:32" pos:end="1481:32"><name pos:start="1481:32" pos:end="1481:32">s</name></expr></argument>, <argument pos:start="1481:35" pos:end="1481:35"><expr pos:start="1481:35" pos:end="1481:35"><literal type="number" pos:start="1481:35" pos:end="1481:35">4</literal></expr></argument>, <argument pos:start="1481:38" pos:end="1481:46"><expr pos:start="1481:38" pos:end="1481:46"><name pos:start="1481:38" pos:end="1481:46">EXCP_NOCP</name></expr></argument>, <argument pos:start="1481:49" pos:end="1481:67"><expr pos:start="1481:49" pos:end="1481:67"><call pos:start="1481:49" pos:end="1481:67"><name pos:start="1481:49" pos:end="1481:65">syn_uncategorized</name><argument_list pos:start="1481:66" pos:end="1481:67">()</argument_list></call></expr></argument>,

                               <argument pos:start="1483:32" pos:end="1483:54"><expr pos:start="1483:32" pos:end="1483:54"><call pos:start="1483:32" pos:end="1483:54"><name pos:start="1483:32" pos:end="1483:51">default_exception_el</name><argument_list pos:start="1483:52" pos:end="1483:54">(<argument pos:start="1483:53" pos:end="1483:53"><expr pos:start="1483:53" pos:end="1483:53"><name pos:start="1483:53" pos:end="1483:53">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1485:13" pos:end="1485:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1489:9" pos:end="1521:9"><if pos:start="1489:9" pos:end="1501:9">if <condition pos:start="1489:12" pos:end="1489:36">(<expr pos:start="1489:13" pos:end="1489:35"><operator pos:start="1489:13" pos:end="1489:13">(</operator><operator pos:start="1489:14" pos:end="1489:14">(</operator><name pos:start="1489:15" pos:end="1489:18">insn</name> <operator pos:start="1489:20" pos:end="1489:21">&gt;&gt;</operator> <literal type="number" pos:start="1489:23" pos:end="1489:24">24</literal><operator pos:start="1489:25" pos:end="1489:25">)</operator> <operator pos:start="1489:27" pos:end="1489:27">&amp;</operator> <literal type="number" pos:start="1489:29" pos:end="1489:29">3</literal><operator pos:start="1489:30" pos:end="1489:30">)</operator> <operator pos:start="1489:32" pos:end="1489:33">==</operator> <literal type="number" pos:start="1489:35" pos:end="1489:35">3</literal></expr>)</condition> <block pos:start="1489:38" pos:end="1501:9">{<block_content pos:start="1493:13" pos:end="1499:13">

            <comment type="block" pos:start="1491:13" pos:end="1491:62">/* Translate into the equivalent ARM encoding.  */</comment>

            <expr_stmt pos:start="1493:13" pos:end="1493:79"><expr pos:start="1493:13" pos:end="1493:78"><name pos:start="1493:13" pos:end="1493:16">insn</name> <operator pos:start="1493:18" pos:end="1493:18">=</operator> <operator pos:start="1493:20" pos:end="1493:20">(</operator><name pos:start="1493:21" pos:end="1493:24">insn</name> <operator pos:start="1493:26" pos:end="1493:26">&amp;</operator> <literal type="number" pos:start="1493:28" pos:end="1493:37">0xe2ffffff</literal><operator pos:start="1493:38" pos:end="1493:38">)</operator> <operator pos:start="1493:40" pos:end="1493:40">|</operator> <operator pos:start="1493:42" pos:end="1493:42">(</operator><operator pos:start="1493:43" pos:end="1493:43">(</operator><name pos:start="1493:44" pos:end="1493:47">insn</name> <operator pos:start="1493:49" pos:end="1493:49">&amp;</operator> <operator pos:start="1493:51" pos:end="1493:51">(</operator><literal type="number" pos:start="1493:52" pos:end="1493:52">1</literal> <operator pos:start="1493:54" pos:end="1493:55">&lt;&lt;</operator> <literal type="number" pos:start="1493:57" pos:end="1493:58">28</literal><operator pos:start="1493:59" pos:end="1493:59">)</operator><operator pos:start="1493:60" pos:end="1493:60">)</operator> <operator pos:start="1493:62" pos:end="1493:63">&gt;&gt;</operator> <literal type="number" pos:start="1493:65" pos:end="1493:65">4</literal><operator pos:start="1493:66" pos:end="1493:66">)</operator> <operator pos:start="1493:68" pos:end="1493:68">|</operator> <operator pos:start="1493:70" pos:end="1493:70">(</operator><literal type="number" pos:start="1493:71" pos:end="1493:71">1</literal> <operator pos:start="1493:73" pos:end="1493:74">&lt;&lt;</operator> <literal type="number" pos:start="1493:76" pos:end="1493:77">28</literal><operator pos:start="1493:78" pos:end="1493:78">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="1495:13" pos:end="1499:13"><if pos:start="1495:13" pos:end="1499:13">if <condition pos:start="1495:16" pos:end="1495:46">(<expr pos:start="1495:17" pos:end="1495:45"><call pos:start="1495:17" pos:end="1495:45"><name pos:start="1495:17" pos:end="1495:36">disas_neon_data_insn</name><argument_list pos:start="1495:37" pos:end="1495:45">(<argument pos:start="1495:38" pos:end="1495:38"><expr pos:start="1495:38" pos:end="1495:38"><name pos:start="1495:38" pos:end="1495:38">s</name></expr></argument>, <argument pos:start="1495:41" pos:end="1495:44"><expr pos:start="1495:41" pos:end="1495:44"><name pos:start="1495:41" pos:end="1495:44">insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1495:48" pos:end="1499:13">{<block_content pos:start="1497:17" pos:end="1497:32">

                <goto pos:start="1497:17" pos:end="1497:32">goto <name pos:start="1497:22" pos:end="1497:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1501:11" pos:end="1509:9">else if <condition pos:start="1501:19" pos:end="1501:45">(<expr pos:start="1501:20" pos:end="1501:44"><operator pos:start="1501:20" pos:end="1501:20">(</operator><operator pos:start="1501:21" pos:end="1501:21">(</operator><name pos:start="1501:22" pos:end="1501:25">insn</name> <operator pos:start="1501:27" pos:end="1501:28">&gt;&gt;</operator> <literal type="number" pos:start="1501:30" pos:end="1501:30">8</literal><operator pos:start="1501:31" pos:end="1501:31">)</operator> <operator pos:start="1501:33" pos:end="1501:33">&amp;</operator> <literal type="number" pos:start="1501:35" pos:end="1501:37">0xe</literal><operator pos:start="1501:38" pos:end="1501:38">)</operator> <operator pos:start="1501:40" pos:end="1501:41">==</operator> <literal type="number" pos:start="1501:43" pos:end="1501:44">10</literal></expr>)</condition> <block pos:start="1501:47" pos:end="1509:9">{<block_content pos:start="1503:13" pos:end="1507:13">

            <if_stmt pos:start="1503:13" pos:end="1507:13"><if pos:start="1503:13" pos:end="1507:13">if <condition pos:start="1503:16" pos:end="1503:40">(<expr pos:start="1503:17" pos:end="1503:39"><call pos:start="1503:17" pos:end="1503:39"><name pos:start="1503:17" pos:end="1503:30">disas_vfp_insn</name><argument_list pos:start="1503:31" pos:end="1503:39">(<argument pos:start="1503:32" pos:end="1503:32"><expr pos:start="1503:32" pos:end="1503:32"><name pos:start="1503:32" pos:end="1503:32">s</name></expr></argument>, <argument pos:start="1503:35" pos:end="1503:38"><expr pos:start="1503:35" pos:end="1503:38"><name pos:start="1503:35" pos:end="1503:38">insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1503:42" pos:end="1507:13">{<block_content pos:start="1505:17" pos:end="1505:32">

                <goto pos:start="1505:17" pos:end="1505:32">goto <name pos:start="1505:22" pos:end="1505:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="1509:11" pos:end="1521:9">else <block pos:start="1509:16" pos:end="1521:9">{<block_content pos:start="1511:13" pos:end="1519:13">

            <if_stmt pos:start="1511:13" pos:end="1513:32"><if pos:start="1511:13" pos:end="1513:32">if <condition pos:start="1511:16" pos:end="1511:33">(<expr pos:start="1511:17" pos:end="1511:32"><name pos:start="1511:17" pos:end="1511:20">insn</name> <operator pos:start="1511:22" pos:end="1511:22">&amp;</operator> <operator pos:start="1511:24" pos:end="1511:24">(</operator><literal type="number" pos:start="1511:25" pos:end="1511:25">1</literal> <operator pos:start="1511:27" pos:end="1511:28">&lt;&lt;</operator> <literal type="number" pos:start="1511:30" pos:end="1511:31">28</literal><operator pos:start="1511:32" pos:end="1511:32">)</operator></expr>)</condition><block type="pseudo" pos:start="1513:17" pos:end="1513:32"><block_content pos:start="1513:17" pos:end="1513:32">

                <goto pos:start="1513:17" pos:end="1513:32">goto <name pos:start="1513:22" pos:end="1513:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="1515:13" pos:end="1519:13"><if pos:start="1515:13" pos:end="1519:13">if <condition pos:start="1515:16" pos:end="1515:43">(<expr pos:start="1515:17" pos:end="1515:42"><call pos:start="1515:17" pos:end="1515:42"><name pos:start="1515:17" pos:end="1515:33">disas_coproc_insn</name><argument_list pos:start="1515:34" pos:end="1515:42">(<argument pos:start="1515:35" pos:end="1515:35"><expr pos:start="1515:35" pos:end="1515:35"><name pos:start="1515:35" pos:end="1515:35">s</name></expr></argument>, <argument pos:start="1515:38" pos:end="1515:41"><expr pos:start="1515:38" pos:end="1515:41"><name pos:start="1515:38" pos:end="1515:41">insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1515:45" pos:end="1519:13">{<block_content pos:start="1517:17" pos:end="1517:32">

                <goto pos:start="1517:17" pos:end="1517:32">goto <name pos:start="1517:22" pos:end="1517:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1523:9" pos:end="1523:14">break;</break>

    <case pos:start="1525:5" pos:end="1525:11">case <expr pos:start="1525:10" pos:end="1525:10"><literal type="number" pos:start="1525:10" pos:end="1525:10">8</literal></expr>:</case> <case pos:start="1525:13" pos:end="1525:19">case <expr pos:start="1525:18" pos:end="1525:18"><literal type="number" pos:start="1525:18" pos:end="1525:18">9</literal></expr>:</case> <case pos:start="1525:21" pos:end="1525:28">case <expr pos:start="1525:26" pos:end="1525:27"><literal type="number" pos:start="1525:26" pos:end="1525:27">10</literal></expr>:</case> <case pos:start="1525:30" pos:end="1525:37">case <expr pos:start="1525:35" pos:end="1525:36"><literal type="number" pos:start="1525:35" pos:end="1525:36">11</literal></expr>:</case>

        <if_stmt pos:start="1527:9" pos:end="2343:9"><if pos:start="1527:9" pos:end="2011:9">if <condition pos:start="1527:12" pos:end="1527:29">(<expr pos:start="1527:13" pos:end="1527:28"><name pos:start="1527:13" pos:end="1527:16">insn</name> <operator pos:start="1527:18" pos:end="1527:18">&amp;</operator> <operator pos:start="1527:20" pos:end="1527:20">(</operator><literal type="number" pos:start="1527:21" pos:end="1527:21">1</literal> <operator pos:start="1527:23" pos:end="1527:24">&lt;&lt;</operator> <literal type="number" pos:start="1527:26" pos:end="1527:27">15</literal><operator pos:start="1527:28" pos:end="1527:28">)</operator></expr>)</condition> <block pos:start="1527:31" pos:end="2011:9">{<block_content pos:start="1531:13" pos:end="2009:13">

            <comment type="block" pos:start="1529:13" pos:end="1529:42">/* Branches, misc control.  */</comment>

            <if_stmt pos:start="1531:13" pos:end="2009:13"><if pos:start="1531:13" pos:end="1585:13">if <condition pos:start="1531:16" pos:end="1531:30">(<expr pos:start="1531:17" pos:end="1531:29"><name pos:start="1531:17" pos:end="1531:20">insn</name> <operator pos:start="1531:22" pos:end="1531:22">&amp;</operator> <literal type="number" pos:start="1531:24" pos:end="1531:29">0x5000</literal></expr>)</condition> <block pos:start="1531:32" pos:end="1585:13">{<block_content pos:start="1537:17" pos:end="1583:17">

                <comment type="block" pos:start="1533:17" pos:end="1533:44">/* Unconditional branch.  */</comment>

                <comment type="block" pos:start="1535:17" pos:end="1535:60">/* signextend(hw1[10:0]) -&gt; offset[:12].  */</comment>

                <expr_stmt pos:start="1537:17" pos:end="1537:69"><expr pos:start="1537:17" pos:end="1537:68"><name pos:start="1537:17" pos:end="1537:22">offset</name> <operator pos:start="1537:24" pos:end="1537:24">=</operator> <operator pos:start="1537:26" pos:end="1537:26">(</operator><operator pos:start="1537:27" pos:end="1537:27">(</operator><name pos:start="1537:28" pos:end="1537:34">int32_t</name><operator pos:start="1537:35" pos:end="1537:35">)</operator><name pos:start="1537:36" pos:end="1537:39">insn</name> <operator pos:start="1537:41" pos:end="1537:42">&lt;&lt;</operator> <literal type="number" pos:start="1537:44" pos:end="1537:44">5</literal><operator pos:start="1537:45" pos:end="1537:45">)</operator> <operator pos:start="1537:47" pos:end="1537:48">&gt;&gt;</operator> <literal type="number" pos:start="1537:50" pos:end="1537:50">9</literal> <operator pos:start="1537:52" pos:end="1537:52">&amp;</operator> <operator pos:start="1537:54" pos:end="1537:54">~</operator><operator pos:start="1537:55" pos:end="1537:55">(</operator><name pos:start="1537:56" pos:end="1537:62">int32_t</name><operator pos:start="1537:63" pos:end="1537:63">)</operator><literal type="number" pos:start="1537:64" pos:end="1537:68">0xfff</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1539:17" pos:end="1539:49">/* hw1[10:0] -&gt; offset[11:1].  */</comment>

                <expr_stmt pos:start="1541:17" pos:end="1541:46"><expr pos:start="1541:17" pos:end="1541:45"><name pos:start="1541:17" pos:end="1541:22">offset</name> <operator pos:start="1541:24" pos:end="1541:25">|=</operator> <operator pos:start="1541:27" pos:end="1541:27">(</operator><name pos:start="1541:28" pos:end="1541:31">insn</name> <operator pos:start="1541:33" pos:end="1541:33">&amp;</operator> <literal type="number" pos:start="1541:35" pos:end="1541:39">0x7ff</literal><operator pos:start="1541:40" pos:end="1541:40">)</operator> <operator pos:start="1541:42" pos:end="1541:43">&lt;&lt;</operator> <literal type="number" pos:start="1541:45" pos:end="1541:45">1</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1543:17" pos:end="1547:44">/* (~hw2[13, 11] ^ offset[24]) -&gt; offset[23,22]

                   offset[24:22] already have the same value because of the

                   sign extension above.  */</comment>

                <expr_stmt pos:start="1549:17" pos:end="1549:54"><expr pos:start="1549:17" pos:end="1549:53"><name pos:start="1549:17" pos:end="1549:22">offset</name> <operator pos:start="1549:24" pos:end="1549:25">^=</operator> <operator pos:start="1549:27" pos:end="1549:27">(</operator><operator pos:start="1549:28" pos:end="1549:28">(</operator><operator pos:start="1549:29" pos:end="1549:29">~</operator><name pos:start="1549:30" pos:end="1549:33">insn</name><operator pos:start="1549:34" pos:end="1549:34">)</operator> <operator pos:start="1549:36" pos:end="1549:36">&amp;</operator> <operator pos:start="1549:38" pos:end="1549:38">(</operator><literal type="number" pos:start="1549:39" pos:end="1549:39">1</literal> <operator pos:start="1549:41" pos:end="1549:42">&lt;&lt;</operator> <literal type="number" pos:start="1549:44" pos:end="1549:45">13</literal><operator pos:start="1549:46" pos:end="1549:46">)</operator><operator pos:start="1549:47" pos:end="1549:47">)</operator> <operator pos:start="1549:49" pos:end="1549:50">&lt;&lt;</operator> <literal type="number" pos:start="1549:52" pos:end="1549:53">10</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1551:17" pos:end="1551:54"><expr pos:start="1551:17" pos:end="1551:53"><name pos:start="1551:17" pos:end="1551:22">offset</name> <operator pos:start="1551:24" pos:end="1551:25">^=</operator> <operator pos:start="1551:27" pos:end="1551:27">(</operator><operator pos:start="1551:28" pos:end="1551:28">(</operator><operator pos:start="1551:29" pos:end="1551:29">~</operator><name pos:start="1551:30" pos:end="1551:33">insn</name><operator pos:start="1551:34" pos:end="1551:34">)</operator> <operator pos:start="1551:36" pos:end="1551:36">&amp;</operator> <operator pos:start="1551:38" pos:end="1551:38">(</operator><literal type="number" pos:start="1551:39" pos:end="1551:39">1</literal> <operator pos:start="1551:41" pos:end="1551:42">&lt;&lt;</operator> <literal type="number" pos:start="1551:44" pos:end="1551:45">11</literal><operator pos:start="1551:46" pos:end="1551:46">)</operator><operator pos:start="1551:47" pos:end="1551:47">)</operator> <operator pos:start="1551:49" pos:end="1551:50">&lt;&lt;</operator> <literal type="number" pos:start="1551:52" pos:end="1551:53">11</literal></expr>;</expr_stmt>



                <if_stmt pos:start="1555:17" pos:end="1561:17"><if pos:start="1555:17" pos:end="1561:17">if <condition pos:start="1555:20" pos:end="1555:37">(<expr pos:start="1555:21" pos:end="1555:36"><name pos:start="1555:21" pos:end="1555:24">insn</name> <operator pos:start="1555:26" pos:end="1555:26">&amp;</operator> <operator pos:start="1555:28" pos:end="1555:28">(</operator><literal type="number" pos:start="1555:29" pos:end="1555:29">1</literal> <operator pos:start="1555:31" pos:end="1555:32">&lt;&lt;</operator> <literal type="number" pos:start="1555:34" pos:end="1555:35">14</literal><operator pos:start="1555:36" pos:end="1555:36">)</operator></expr>)</condition> <block pos:start="1555:39" pos:end="1561:17">{<block_content pos:start="1559:21" pos:end="1559:59">

                    <comment type="block" pos:start="1557:21" pos:end="1557:43">/* Branch and link.  */</comment>

                    <expr_stmt pos:start="1559:21" pos:end="1559:59"><expr pos:start="1559:21" pos:end="1559:58"><call pos:start="1559:21" pos:end="1559:58"><name pos:start="1559:21" pos:end="1559:36">tcg_gen_movi_i32</name><argument_list pos:start="1559:37" pos:end="1559:58">(<argument pos:start="1559:38" pos:end="1559:46"><expr pos:start="1559:38" pos:end="1559:46"><name pos:start="1559:38" pos:end="1559:46"><name pos:start="1559:38" pos:end="1559:42">cpu_R</name><index pos:start="1559:43" pos:end="1559:46">[<expr pos:start="1559:44" pos:end="1559:45"><literal type="number" pos:start="1559:44" pos:end="1559:45">14</literal></expr>]</index></name></expr></argument>, <argument pos:start="1559:49" pos:end="1559:57"><expr pos:start="1559:49" pos:end="1559:57"><name pos:start="1559:49" pos:end="1559:53"><name pos:start="1559:49" pos:end="1559:49">s</name><operator pos:start="1559:50" pos:end="1559:51">-&gt;</operator><name pos:start="1559:52" pos:end="1559:53">pc</name></name> <operator pos:start="1559:55" pos:end="1559:55">|</operator> <literal type="number" pos:start="1559:57" pos:end="1559:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="1565:17" pos:end="1565:32"><expr pos:start="1565:17" pos:end="1565:31"><name pos:start="1565:17" pos:end="1565:22">offset</name> <operator pos:start="1565:24" pos:end="1565:25">+=</operator> <name pos:start="1565:27" pos:end="1565:31"><name pos:start="1565:27" pos:end="1565:27">s</name><operator pos:start="1565:28" pos:end="1565:29">-&gt;</operator><name pos:start="1565:30" pos:end="1565:31">pc</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="1567:17" pos:end="1583:17"><if pos:start="1567:17" pos:end="1573:17">if <condition pos:start="1567:20" pos:end="1567:37">(<expr pos:start="1567:21" pos:end="1567:36"><name pos:start="1567:21" pos:end="1567:24">insn</name> <operator pos:start="1567:26" pos:end="1567:26">&amp;</operator> <operator pos:start="1567:28" pos:end="1567:28">(</operator><literal type="number" pos:start="1567:29" pos:end="1567:29">1</literal> <operator pos:start="1567:31" pos:end="1567:32">&lt;&lt;</operator> <literal type="number" pos:start="1567:34" pos:end="1567:35">12</literal><operator pos:start="1567:36" pos:end="1567:36">)</operator></expr>)</condition> <block pos:start="1567:39" pos:end="1573:17">{<block_content pos:start="1571:21" pos:end="1571:39">

                    <comment type="block" pos:start="1569:21" pos:end="1569:30">/* b/bl */</comment>

                    <expr_stmt pos:start="1571:21" pos:end="1571:39"><expr pos:start="1571:21" pos:end="1571:38"><call pos:start="1571:21" pos:end="1571:38"><name pos:start="1571:21" pos:end="1571:27">gen_jmp</name><argument_list pos:start="1571:28" pos:end="1571:38">(<argument pos:start="1571:29" pos:end="1571:29"><expr pos:start="1571:29" pos:end="1571:29"><name pos:start="1571:29" pos:end="1571:29">s</name></expr></argument>, <argument pos:start="1571:32" pos:end="1571:37"><expr pos:start="1571:32" pos:end="1571:37"><name pos:start="1571:32" pos:end="1571:37">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1573:19" pos:end="1583:17">else <block pos:start="1573:24" pos:end="1583:17">{<block_content pos:start="1577:21" pos:end="1581:41">

                    <comment type="block" pos:start="1575:21" pos:end="1575:29">/* blx */</comment>

                    <expr_stmt pos:start="1577:21" pos:end="1577:43"><expr pos:start="1577:21" pos:end="1577:42"><name pos:start="1577:21" pos:end="1577:26">offset</name> <operator pos:start="1577:28" pos:end="1577:29">&amp;=</operator> <operator pos:start="1577:31" pos:end="1577:31">~</operator><operator pos:start="1577:32" pos:end="1577:32">(</operator><name pos:start="1577:33" pos:end="1577:40">uint32_t</name><operator pos:start="1577:41" pos:end="1577:41">)</operator><literal type="number" pos:start="1577:42" pos:end="1577:42">2</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="1579:21" pos:end="1579:53">/* thumb2 bx, no need to check */</comment>

                    <expr_stmt pos:start="1581:21" pos:end="1581:41"><expr pos:start="1581:21" pos:end="1581:40"><call pos:start="1581:21" pos:end="1581:40"><name pos:start="1581:21" pos:end="1581:29">gen_bx_im</name><argument_list pos:start="1581:30" pos:end="1581:40">(<argument pos:start="1581:31" pos:end="1581:31"><expr pos:start="1581:31" pos:end="1581:31"><name pos:start="1581:31" pos:end="1581:31">s</name></expr></argument>, <argument pos:start="1581:34" pos:end="1581:39"><expr pos:start="1581:34" pos:end="1581:39"><name pos:start="1581:34" pos:end="1581:39">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1585:15" pos:end="1967:13">else if <condition pos:start="1585:23" pos:end="1585:47">(<expr pos:start="1585:24" pos:end="1585:46"><operator pos:start="1585:24" pos:end="1585:24">(</operator><operator pos:start="1585:25" pos:end="1585:25">(</operator><name pos:start="1585:26" pos:end="1585:29">insn</name> <operator pos:start="1585:31" pos:end="1585:32">&gt;&gt;</operator> <literal type="number" pos:start="1585:34" pos:end="1585:35">23</literal><operator pos:start="1585:36" pos:end="1585:36">)</operator> <operator pos:start="1585:38" pos:end="1585:38">&amp;</operator> <literal type="number" pos:start="1585:40" pos:end="1585:40">7</literal><operator pos:start="1585:41" pos:end="1585:41">)</operator> <operator pos:start="1585:43" pos:end="1585:44">==</operator> <literal type="number" pos:start="1585:46" pos:end="1585:46">7</literal></expr>)</condition> <block pos:start="1585:49" pos:end="1967:13">{<block_content pos:start="1589:17" pos:end="1965:17">

                <comment type="block" pos:start="1587:17" pos:end="1587:34">/* Misc control */</comment>

                <if_stmt pos:start="1589:17" pos:end="1591:36"><if pos:start="1589:17" pos:end="1591:36">if <condition pos:start="1589:20" pos:end="1589:37">(<expr pos:start="1589:21" pos:end="1589:36"><name pos:start="1589:21" pos:end="1589:24">insn</name> <operator pos:start="1589:26" pos:end="1589:26">&amp;</operator> <operator pos:start="1589:28" pos:end="1589:28">(</operator><literal type="number" pos:start="1589:29" pos:end="1589:29">1</literal> <operator pos:start="1589:31" pos:end="1589:32">&lt;&lt;</operator> <literal type="number" pos:start="1589:34" pos:end="1589:35">13</literal><operator pos:start="1589:36" pos:end="1589:36">)</operator></expr>)</condition><block type="pseudo" pos:start="1591:21" pos:end="1591:36"><block_content pos:start="1591:21" pos:end="1591:36">

                    <goto pos:start="1591:21" pos:end="1591:36">goto <name pos:start="1591:26" pos:end="1591:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>



                <if_stmt pos:start="1595:17" pos:end="1965:17"><if pos:start="1595:17" pos:end="1637:17">if <condition pos:start="1595:20" pos:end="1595:37">(<expr pos:start="1595:21" pos:end="1595:36"><name pos:start="1595:21" pos:end="1595:24">insn</name> <operator pos:start="1595:26" pos:end="1595:26">&amp;</operator> <operator pos:start="1595:28" pos:end="1595:28">(</operator><literal type="number" pos:start="1595:29" pos:end="1595:29">1</literal> <operator pos:start="1595:31" pos:end="1595:32">&lt;&lt;</operator> <literal type="number" pos:start="1595:34" pos:end="1595:35">26</literal><operator pos:start="1595:36" pos:end="1595:36">)</operator></expr>)</condition> <block pos:start="1595:39" pos:end="1637:17">{<block_content pos:start="1597:21" pos:end="1635:21">

                    <if_stmt pos:start="1597:21" pos:end="1601:21"><if pos:start="1597:21" pos:end="1601:21">if <condition pos:start="1597:24" pos:end="1597:57">(<expr pos:start="1597:25" pos:end="1597:56"><call pos:start="1597:25" pos:end="1597:56"><name pos:start="1597:25" pos:end="1597:38">arm_dc_feature</name><argument_list pos:start="1597:39" pos:end="1597:56">(<argument pos:start="1597:40" pos:end="1597:40"><expr pos:start="1597:40" pos:end="1597:40"><name pos:start="1597:40" pos:end="1597:40">s</name></expr></argument>, <argument pos:start="1597:43" pos:end="1597:55"><expr pos:start="1597:43" pos:end="1597:55"><name pos:start="1597:43" pos:end="1597:55">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1597:59" pos:end="1601:21">{<block_content pos:start="1599:25" pos:end="1599:40">

                        <goto pos:start="1599:25" pos:end="1599:40">goto <name pos:start="1599:30" pos:end="1599:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="1603:21" pos:end="1635:21"><if pos:start="1603:21" pos:end="1621:21">if <condition pos:start="1603:24" pos:end="1603:44">(<expr pos:start="1603:25" pos:end="1603:43"><operator pos:start="1603:25" pos:end="1603:25">!</operator><operator pos:start="1603:26" pos:end="1603:26">(</operator><name pos:start="1603:27" pos:end="1603:30">insn</name> <operator pos:start="1603:32" pos:end="1603:32">&amp;</operator> <operator pos:start="1603:34" pos:end="1603:34">(</operator><literal type="number" pos:start="1603:35" pos:end="1603:35">1</literal> <operator pos:start="1603:37" pos:end="1603:38">&lt;&lt;</operator> <literal type="number" pos:start="1603:40" pos:end="1603:41">20</literal><operator pos:start="1603:42" pos:end="1603:42">)</operator><operator pos:start="1603:43" pos:end="1603:43">)</operator></expr>)</condition> <block pos:start="1603:46" pos:end="1621:21">{<block_content pos:start="1607:25" pos:end="1619:42">

                        <comment type="block" pos:start="1605:25" pos:end="1605:50">/* Hypervisor call (v7) */</comment>

                        <decl_stmt pos:start="1607:25" pos:end="1609:53"><decl pos:start="1607:25" pos:end="1609:52"><type pos:start="1607:25" pos:end="1607:27"><name pos:start="1607:25" pos:end="1607:27">int</name></type> <name pos:start="1607:29" pos:end="1607:33">imm16</name> <init pos:start="1607:35" pos:end="1609:52">= <expr pos:start="1607:37" pos:end="1609:52"><call pos:start="1607:37" pos:end="1607:58"><name pos:start="1607:37" pos:end="1607:45">extract32</name><argument_list pos:start="1607:46" pos:end="1607:58">(<argument pos:start="1607:47" pos:end="1607:50"><expr pos:start="1607:47" pos:end="1607:50"><name pos:start="1607:47" pos:end="1607:50">insn</name></expr></argument>, <argument pos:start="1607:53" pos:end="1607:54"><expr pos:start="1607:53" pos:end="1607:54"><literal type="number" pos:start="1607:53" pos:end="1607:54">16</literal></expr></argument>, <argument pos:start="1607:57" pos:end="1607:57"><expr pos:start="1607:57" pos:end="1607:57"><literal type="number" pos:start="1607:57" pos:end="1607:57">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1607:60" pos:end="1607:61">&lt;&lt;</operator> <literal type="number" pos:start="1607:63" pos:end="1607:64">12</literal>

                            <operator pos:start="1609:29" pos:end="1609:29">|</operator> <call pos:start="1609:31" pos:end="1609:52"><name pos:start="1609:31" pos:end="1609:39">extract32</name><argument_list pos:start="1609:40" pos:end="1609:52">(<argument pos:start="1609:41" pos:end="1609:44"><expr pos:start="1609:41" pos:end="1609:44"><name pos:start="1609:41" pos:end="1609:44">insn</name></expr></argument>, <argument pos:start="1609:47" pos:end="1609:47"><expr pos:start="1609:47" pos:end="1609:47"><literal type="number" pos:start="1609:47" pos:end="1609:47">0</literal></expr></argument>, <argument pos:start="1609:50" pos:end="1609:51"><expr pos:start="1609:50" pos:end="1609:51"><literal type="number" pos:start="1609:50" pos:end="1609:51">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="1611:25" pos:end="1611:32"><expr pos:start="1611:25" pos:end="1611:31"><call pos:start="1611:25" pos:end="1611:31"><name pos:start="1611:25" pos:end="1611:28">ARCH</name><argument_list pos:start="1611:29" pos:end="1611:31">(<argument pos:start="1611:30" pos:end="1611:30"><expr pos:start="1611:30" pos:end="1611:30"><literal type="number" pos:start="1611:30" pos:end="1611:30">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1613:25" pos:end="1617:25"><if pos:start="1613:25" pos:end="1617:25">if <condition pos:start="1613:28" pos:end="1613:39">(<expr pos:start="1613:29" pos:end="1613:38"><call pos:start="1613:29" pos:end="1613:38"><name pos:start="1613:29" pos:end="1613:35">IS_USER</name><argument_list pos:start="1613:36" pos:end="1613:38">(<argument pos:start="1613:37" pos:end="1613:37"><expr pos:start="1613:37" pos:end="1613:37"><name pos:start="1613:37" pos:end="1613:37">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1613:41" pos:end="1617:25">{<block_content pos:start="1615:29" pos:end="1615:44">

                            <goto pos:start="1615:29" pos:end="1615:44">goto <name pos:start="1615:34" pos:end="1615:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1619:25" pos:end="1619:42"><expr pos:start="1619:25" pos:end="1619:41"><call pos:start="1619:25" pos:end="1619:41"><name pos:start="1619:25" pos:end="1619:31">gen_hvc</name><argument_list pos:start="1619:32" pos:end="1619:41">(<argument pos:start="1619:33" pos:end="1619:33"><expr pos:start="1619:33" pos:end="1619:33"><name pos:start="1619:33" pos:end="1619:33">s</name></expr></argument>, <argument pos:start="1619:36" pos:end="1619:40"><expr pos:start="1619:36" pos:end="1619:40"><name pos:start="1619:36" pos:end="1619:40">imm16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1621:23" pos:end="1635:21">else <block pos:start="1621:28" pos:end="1635:21">{<block_content pos:start="1625:25" pos:end="1633:35">

                        <comment type="block" pos:start="1623:25" pos:end="1623:55">/* Secure monitor call (v6+) */</comment>

                        <expr_stmt pos:start="1625:25" pos:end="1625:33"><expr pos:start="1625:25" pos:end="1625:32"><call pos:start="1625:25" pos:end="1625:32"><name pos:start="1625:25" pos:end="1625:28">ARCH</name><argument_list pos:start="1625:29" pos:end="1625:32">(<argument pos:start="1625:30" pos:end="1625:31"><expr pos:start="1625:30" pos:end="1625:31"><literal type="number" pos:start="1625:30" pos:end="1625:31">6K</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1627:25" pos:end="1631:25"><if pos:start="1627:25" pos:end="1631:25">if <condition pos:start="1627:28" pos:end="1627:39">(<expr pos:start="1627:29" pos:end="1627:38"><call pos:start="1627:29" pos:end="1627:38"><name pos:start="1627:29" pos:end="1627:35">IS_USER</name><argument_list pos:start="1627:36" pos:end="1627:38">(<argument pos:start="1627:37" pos:end="1627:37"><expr pos:start="1627:37" pos:end="1627:37"><name pos:start="1627:37" pos:end="1627:37">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1627:41" pos:end="1631:25">{<block_content pos:start="1629:29" pos:end="1629:44">

                            <goto pos:start="1629:29" pos:end="1629:44">goto <name pos:start="1629:34" pos:end="1629:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1633:25" pos:end="1633:35"><expr pos:start="1633:25" pos:end="1633:34"><call pos:start="1633:25" pos:end="1633:34"><name pos:start="1633:25" pos:end="1633:31">gen_smc</name><argument_list pos:start="1633:32" pos:end="1633:34">(<argument pos:start="1633:33" pos:end="1633:33"><expr pos:start="1633:33" pos:end="1633:33"><name pos:start="1633:33" pos:end="1633:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1637:19" pos:end="1965:17">else <block pos:start="1637:24" pos:end="1965:17">{<block_content pos:start="1639:21" pos:end="1963:21">

                    <expr_stmt pos:start="1639:21" pos:end="1639:42"><expr pos:start="1639:21" pos:end="1639:41"><name pos:start="1639:21" pos:end="1639:22">op</name> <operator pos:start="1639:24" pos:end="1639:24">=</operator> <operator pos:start="1639:26" pos:end="1639:26">(</operator><name pos:start="1639:27" pos:end="1639:30">insn</name> <operator pos:start="1639:32" pos:end="1639:33">&gt;&gt;</operator> <literal type="number" pos:start="1639:35" pos:end="1639:36">20</literal><operator pos:start="1639:37" pos:end="1639:37">)</operator> <operator pos:start="1639:39" pos:end="1639:39">&amp;</operator> <literal type="number" pos:start="1639:41" pos:end="1639:41">7</literal></expr>;</expr_stmt>

                    <switch pos:start="1641:21" pos:end="1963:21">switch <condition pos:start="1641:28" pos:end="1641:31">(<expr pos:start="1641:29" pos:end="1641:30"><name pos:start="1641:29" pos:end="1641:30">op</name></expr>)</condition> <block pos:start="1641:33" pos:end="1963:21">{<block_content pos:start="1643:21" pos:end="1961:30">

                    <case pos:start="1643:21" pos:end="1643:27">case <expr pos:start="1643:26" pos:end="1643:26"><literal type="number" pos:start="1643:26" pos:end="1643:26">0</literal></expr>:</case> <comment type="block" pos:start="1643:29" pos:end="1643:44">/* msr cpsr.  */</comment>

                        <if_stmt pos:start="1645:25" pos:end="1663:25"><if pos:start="1645:25" pos:end="1663:25">if <condition pos:start="1645:28" pos:end="1645:61">(<expr pos:start="1645:29" pos:end="1645:60"><call pos:start="1645:29" pos:end="1645:60"><name pos:start="1645:29" pos:end="1645:42">arm_dc_feature</name><argument_list pos:start="1645:43" pos:end="1645:60">(<argument pos:start="1645:44" pos:end="1645:44"><expr pos:start="1645:44" pos:end="1645:44"><name pos:start="1645:44" pos:end="1645:44">s</name></expr></argument>, <argument pos:start="1645:47" pos:end="1645:59"><expr pos:start="1645:47" pos:end="1645:59"><name pos:start="1645:47" pos:end="1645:59">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1645:63" pos:end="1663:25">{<block_content pos:start="1647:29" pos:end="1661:34">

                            <expr_stmt pos:start="1647:29" pos:end="1647:50"><expr pos:start="1647:29" pos:end="1647:49"><name pos:start="1647:29" pos:end="1647:31">tmp</name> <operator pos:start="1647:33" pos:end="1647:33">=</operator> <call pos:start="1647:35" pos:end="1647:49"><name pos:start="1647:35" pos:end="1647:42">load_reg</name><argument_list pos:start="1647:43" pos:end="1647:49">(<argument pos:start="1647:44" pos:end="1647:44"><expr pos:start="1647:44" pos:end="1647:44"><name pos:start="1647:44" pos:end="1647:44">s</name></expr></argument>, <argument pos:start="1647:47" pos:end="1647:48"><expr pos:start="1647:47" pos:end="1647:48"><name pos:start="1647:47" pos:end="1647:48">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="block" pos:start="1649:29" pos:end="1649:74">/* the constant is the mask and SYSm fields */</comment>

                            <expr_stmt pos:start="1651:29" pos:end="1651:63"><expr pos:start="1651:29" pos:end="1651:62"><name pos:start="1651:29" pos:end="1651:32">addr</name> <operator pos:start="1651:34" pos:end="1651:34">=</operator> <call pos:start="1651:36" pos:end="1651:62"><name pos:start="1651:36" pos:end="1651:48">tcg_const_i32</name><argument_list pos:start="1651:49" pos:end="1651:62">(<argument pos:start="1651:50" pos:end="1651:61"><expr pos:start="1651:50" pos:end="1651:61"><name pos:start="1651:50" pos:end="1651:53">insn</name> <operator pos:start="1651:55" pos:end="1651:55">&amp;</operator> <literal type="number" pos:start="1651:57" pos:end="1651:61">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1653:29" pos:end="1653:67"><expr pos:start="1653:29" pos:end="1653:66"><call pos:start="1653:29" pos:end="1653:66"><name pos:start="1653:29" pos:end="1653:46">gen_helper_v7m_msr</name><argument_list pos:start="1653:47" pos:end="1653:66">(<argument pos:start="1653:48" pos:end="1653:54"><expr pos:start="1653:48" pos:end="1653:54"><name pos:start="1653:48" pos:end="1653:54">cpu_env</name></expr></argument>, <argument pos:start="1653:57" pos:end="1653:60"><expr pos:start="1653:57" pos:end="1653:60"><name pos:start="1653:57" pos:end="1653:60">addr</name></expr></argument>, <argument pos:start="1653:63" pos:end="1653:65"><expr pos:start="1653:63" pos:end="1653:65"><name pos:start="1653:63" pos:end="1653:65">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1655:29" pos:end="1655:52"><expr pos:start="1655:29" pos:end="1655:51"><call pos:start="1655:29" pos:end="1655:51"><name pos:start="1655:29" pos:end="1655:45">tcg_temp_free_i32</name><argument_list pos:start="1655:46" pos:end="1655:51">(<argument pos:start="1655:47" pos:end="1655:50"><expr pos:start="1655:47" pos:end="1655:50"><name pos:start="1655:47" pos:end="1655:50">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1657:29" pos:end="1657:51"><expr pos:start="1657:29" pos:end="1657:50"><call pos:start="1657:29" pos:end="1657:50"><name pos:start="1657:29" pos:end="1657:45">tcg_temp_free_i32</name><argument_list pos:start="1657:46" pos:end="1657:50">(<argument pos:start="1657:47" pos:end="1657:49"><expr pos:start="1657:47" pos:end="1657:49"><name pos:start="1657:47" pos:end="1657:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1659:29" pos:end="1659:45"><expr pos:start="1659:29" pos:end="1659:44"><call pos:start="1659:29" pos:end="1659:44"><name pos:start="1659:29" pos:end="1659:41">gen_lookup_tb</name><argument_list pos:start="1659:42" pos:end="1659:44">(<argument pos:start="1659:43" pos:end="1659:43"><expr pos:start="1659:43" pos:end="1659:43"><name pos:start="1659:43" pos:end="1659:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1661:29" pos:end="1661:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                        <comment type="block" pos:start="1665:25" pos:end="1665:42">/* fall through */</comment>

                    <case pos:start="1667:21" pos:end="1667:27">case <expr pos:start="1667:26" pos:end="1667:26"><literal type="number" pos:start="1667:26" pos:end="1667:26">1</literal></expr>:</case> <comment type="block" pos:start="1667:29" pos:end="1667:44">/* msr spsr.  */</comment>

                        <if_stmt pos:start="1669:25" pos:end="1673:25"><if pos:start="1669:25" pos:end="1673:25">if <condition pos:start="1669:28" pos:end="1669:61">(<expr pos:start="1669:29" pos:end="1669:60"><call pos:start="1669:29" pos:end="1669:60"><name pos:start="1669:29" pos:end="1669:42">arm_dc_feature</name><argument_list pos:start="1669:43" pos:end="1669:60">(<argument pos:start="1669:44" pos:end="1669:44"><expr pos:start="1669:44" pos:end="1669:44"><name pos:start="1669:44" pos:end="1669:44">s</name></expr></argument>, <argument pos:start="1669:47" pos:end="1669:59"><expr pos:start="1669:47" pos:end="1669:59"><name pos:start="1669:47" pos:end="1669:59">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1669:63" pos:end="1673:25">{<block_content pos:start="1671:29" pos:end="1671:44">

                            <goto pos:start="1671:29" pos:end="1671:44">goto <name pos:start="1671:34" pos:end="1671:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>



                        <if_stmt pos:start="1677:25" pos:end="1693:25"><if pos:start="1677:25" pos:end="1693:25">if <condition pos:start="1677:28" pos:end="1677:50">(<expr pos:start="1677:29" pos:end="1677:49"><call pos:start="1677:29" pos:end="1677:49"><name pos:start="1677:29" pos:end="1677:37">extract32</name><argument_list pos:start="1677:38" pos:end="1677:49">(<argument pos:start="1677:39" pos:end="1677:42"><expr pos:start="1677:39" pos:end="1677:42"><name pos:start="1677:39" pos:end="1677:42">insn</name></expr></argument>, <argument pos:start="1677:45" pos:end="1677:45"><expr pos:start="1677:45" pos:end="1677:45"><literal type="number" pos:start="1677:45" pos:end="1677:45">5</literal></expr></argument>, <argument pos:start="1677:48" pos:end="1677:48"><expr pos:start="1677:48" pos:end="1677:48"><literal type="number" pos:start="1677:48" pos:end="1677:48">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1677:52" pos:end="1693:25">{<block_content pos:start="1681:29" pos:end="1691:34">

                            <comment type="block" pos:start="1679:29" pos:end="1679:46">/* MSR (banked) */</comment>

                            <decl_stmt pos:start="1681:29" pos:end="1683:61"><decl pos:start="1681:29" pos:end="1683:60"><type pos:start="1681:29" pos:end="1681:31"><name pos:start="1681:29" pos:end="1681:31">int</name></type> <name pos:start="1681:33" pos:end="1681:36">sysm</name> <init pos:start="1681:38" pos:end="1683:60">= <expr pos:start="1681:40" pos:end="1683:60"><call pos:start="1681:40" pos:end="1681:60"><name pos:start="1681:40" pos:end="1681:48">extract32</name><argument_list pos:start="1681:49" pos:end="1681:60">(<argument pos:start="1681:50" pos:end="1681:53"><expr pos:start="1681:50" pos:end="1681:53"><name pos:start="1681:50" pos:end="1681:53">insn</name></expr></argument>, <argument pos:start="1681:56" pos:end="1681:56"><expr pos:start="1681:56" pos:end="1681:56"><literal type="number" pos:start="1681:56" pos:end="1681:56">8</literal></expr></argument>, <argument pos:start="1681:59" pos:end="1681:59"><expr pos:start="1681:59" pos:end="1681:59"><literal type="number" pos:start="1681:59" pos:end="1681:59">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1681:62" pos:end="1681:62">|</operator>

                                <operator pos:start="1683:33" pos:end="1683:33">(</operator><call pos:start="1683:34" pos:end="1683:54"><name pos:start="1683:34" pos:end="1683:42">extract32</name><argument_list pos:start="1683:43" pos:end="1683:54">(<argument pos:start="1683:44" pos:end="1683:47"><expr pos:start="1683:44" pos:end="1683:47"><name pos:start="1683:44" pos:end="1683:47">insn</name></expr></argument>, <argument pos:start="1683:50" pos:end="1683:50"><expr pos:start="1683:50" pos:end="1683:50"><literal type="number" pos:start="1683:50" pos:end="1683:50">4</literal></expr></argument>, <argument pos:start="1683:53" pos:end="1683:53"><expr pos:start="1683:53" pos:end="1683:53"><literal type="number" pos:start="1683:53" pos:end="1683:53">1</literal></expr></argument>)</argument_list></call> <operator pos:start="1683:56" pos:end="1683:57">&lt;&lt;</operator> <literal type="number" pos:start="1683:59" pos:end="1683:59">4</literal><operator pos:start="1683:60" pos:end="1683:60">)</operator></expr></init></decl>;</decl_stmt>

                            <decl_stmt pos:start="1685:29" pos:end="1685:43"><decl pos:start="1685:29" pos:end="1685:42"><type pos:start="1685:29" pos:end="1685:31"><name pos:start="1685:29" pos:end="1685:31">int</name></type> <name pos:start="1685:33" pos:end="1685:33">r</name> <init pos:start="1685:35" pos:end="1685:42">= <expr pos:start="1685:37" pos:end="1685:42"><name pos:start="1685:37" pos:end="1685:38">op</name> <operator pos:start="1685:40" pos:end="1685:40">&amp;</operator> <literal type="number" pos:start="1685:42" pos:end="1685:42">1</literal></expr></init></decl>;</decl_stmt>



                            <expr_stmt pos:start="1689:29" pos:end="1689:59"><expr pos:start="1689:29" pos:end="1689:58"><call pos:start="1689:29" pos:end="1689:58"><name pos:start="1689:29" pos:end="1689:42">gen_msr_banked</name><argument_list pos:start="1689:43" pos:end="1689:58">(<argument pos:start="1689:44" pos:end="1689:44"><expr pos:start="1689:44" pos:end="1689:44"><name pos:start="1689:44" pos:end="1689:44">s</name></expr></argument>, <argument pos:start="1689:47" pos:end="1689:47"><expr pos:start="1689:47" pos:end="1689:47"><name pos:start="1689:47" pos:end="1689:47">r</name></expr></argument>, <argument pos:start="1689:50" pos:end="1689:53"><expr pos:start="1689:50" pos:end="1689:53"><name pos:start="1689:50" pos:end="1689:53">sysm</name></expr></argument>, <argument pos:start="1689:56" pos:end="1689:57"><expr pos:start="1689:56" pos:end="1689:57"><name pos:start="1689:56" pos:end="1689:57">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1691:29" pos:end="1691:34">break;</break>

                        </block_content>}</block></if></if_stmt>



                        <comment type="block" pos:start="1697:25" pos:end="1697:44">/* MSR (for PSRs) */</comment>

                        <expr_stmt pos:start="1699:25" pos:end="1699:46"><expr pos:start="1699:25" pos:end="1699:45"><name pos:start="1699:25" pos:end="1699:27">tmp</name> <operator pos:start="1699:29" pos:end="1699:29">=</operator> <call pos:start="1699:31" pos:end="1699:45"><name pos:start="1699:31" pos:end="1699:38">load_reg</name><argument_list pos:start="1699:39" pos:end="1699:45">(<argument pos:start="1699:40" pos:end="1699:40"><expr pos:start="1699:40" pos:end="1699:40"><name pos:start="1699:40" pos:end="1699:40">s</name></expr></argument>, <argument pos:start="1699:43" pos:end="1699:44"><expr pos:start="1699:43" pos:end="1699:44"><name pos:start="1699:43" pos:end="1699:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1701:25" pos:end="1707:44"><if pos:start="1701:25" pos:end="1707:44">if <condition pos:start="1701:28" pos:end="1705:44">(<expr pos:start="1701:29" pos:end="1705:43"><call pos:start="1701:29" pos:end="1705:43"><name pos:start="1701:29" pos:end="1701:39">gen_set_psr</name><argument_list pos:start="1701:40" pos:end="1705:43">(<argument pos:start="1701:41" pos:end="1701:41"><expr pos:start="1701:41" pos:end="1701:41"><name pos:start="1701:41" pos:end="1701:41">s</name></expr></argument>,

                              <argument pos:start="1703:31" pos:end="1703:69"><expr pos:start="1703:31" pos:end="1703:69"><call pos:start="1703:31" pos:end="1703:69"><name pos:start="1703:31" pos:end="1703:38">msr_mask</name><argument_list pos:start="1703:39" pos:end="1703:69">(<argument pos:start="1703:40" pos:end="1703:40"><expr pos:start="1703:40" pos:end="1703:40"><name pos:start="1703:40" pos:end="1703:40">s</name></expr></argument>, <argument pos:start="1703:43" pos:end="1703:59"><expr pos:start="1703:43" pos:end="1703:59"><operator pos:start="1703:43" pos:end="1703:43">(</operator><name pos:start="1703:44" pos:end="1703:47">insn</name> <operator pos:start="1703:49" pos:end="1703:50">&gt;&gt;</operator> <literal type="number" pos:start="1703:52" pos:end="1703:52">8</literal><operator pos:start="1703:53" pos:end="1703:53">)</operator> <operator pos:start="1703:55" pos:end="1703:55">&amp;</operator> <literal type="number" pos:start="1703:57" pos:end="1703:59">0xf</literal></expr></argument>, <argument pos:start="1703:62" pos:end="1703:68"><expr pos:start="1703:62" pos:end="1703:68"><name pos:start="1703:62" pos:end="1703:63">op</name> <operator pos:start="1703:65" pos:end="1703:66">==</operator> <literal type="number" pos:start="1703:68" pos:end="1703:68">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="1705:31" pos:end="1705:37"><expr pos:start="1705:31" pos:end="1705:37"><name pos:start="1705:31" pos:end="1705:32">op</name> <operator pos:start="1705:34" pos:end="1705:35">==</operator> <literal type="number" pos:start="1705:37" pos:end="1705:37">1</literal></expr></argument>, <argument pos:start="1705:40" pos:end="1705:42"><expr pos:start="1705:40" pos:end="1705:42"><name pos:start="1705:40" pos:end="1705:42">tmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1707:29" pos:end="1707:44"><block_content pos:start="1707:29" pos:end="1707:44">

                            <goto pos:start="1707:29" pos:end="1707:44">goto <name pos:start="1707:34" pos:end="1707:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <break pos:start="1709:25" pos:end="1709:30">break;</break>

                    <case pos:start="1711:21" pos:end="1711:27">case <expr pos:start="1711:26" pos:end="1711:26"><literal type="number" pos:start="1711:26" pos:end="1711:26">2</literal></expr>:</case> <comment type="block" pos:start="1711:29" pos:end="1711:49">/* cps, nop-hint.  */</comment>

                        <if_stmt pos:start="1713:25" pos:end="1717:25"><if pos:start="1713:25" pos:end="1717:25">if <condition pos:start="1713:28" pos:end="1713:51">(<expr pos:start="1713:29" pos:end="1713:50"><operator pos:start="1713:29" pos:end="1713:29">(</operator><operator pos:start="1713:30" pos:end="1713:30">(</operator><name pos:start="1713:31" pos:end="1713:34">insn</name> <operator pos:start="1713:36" pos:end="1713:37">&gt;&gt;</operator> <literal type="number" pos:start="1713:39" pos:end="1713:39">8</literal><operator pos:start="1713:40" pos:end="1713:40">)</operator> <operator pos:start="1713:42" pos:end="1713:42">&amp;</operator> <literal type="number" pos:start="1713:44" pos:end="1713:44">7</literal><operator pos:start="1713:45" pos:end="1713:45">)</operator> <operator pos:start="1713:47" pos:end="1713:48">==</operator> <literal type="number" pos:start="1713:50" pos:end="1713:50">0</literal></expr>)</condition> <block pos:start="1713:53" pos:end="1717:25">{<block_content pos:start="1715:29" pos:end="1715:57">

                            <expr_stmt pos:start="1715:29" pos:end="1715:57"><expr pos:start="1715:29" pos:end="1715:56"><call pos:start="1715:29" pos:end="1715:56"><name pos:start="1715:29" pos:end="1715:40">gen_nop_hint</name><argument_list pos:start="1715:41" pos:end="1715:56">(<argument pos:start="1715:42" pos:end="1715:42"><expr pos:start="1715:42" pos:end="1715:42"><name pos:start="1715:42" pos:end="1715:42">s</name></expr></argument>, <argument pos:start="1715:45" pos:end="1715:55"><expr pos:start="1715:45" pos:end="1715:55"><name pos:start="1715:45" pos:end="1715:48">insn</name> <operator pos:start="1715:50" pos:end="1715:50">&amp;</operator> <literal type="number" pos:start="1715:52" pos:end="1715:55">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <comment type="block" pos:start="1719:25" pos:end="1719:63">/* Implemented as NOP in user mode.  */</comment>

                        <if_stmt pos:start="1721:25" pos:end="1723:34"><if pos:start="1721:25" pos:end="1723:34">if <condition pos:start="1721:28" pos:end="1721:39">(<expr pos:start="1721:29" pos:end="1721:38"><call pos:start="1721:29" pos:end="1721:38"><name pos:start="1721:29" pos:end="1721:35">IS_USER</name><argument_list pos:start="1721:36" pos:end="1721:38">(<argument pos:start="1721:37" pos:end="1721:37"><expr pos:start="1721:37" pos:end="1721:37"><name pos:start="1721:37" pos:end="1721:37">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1723:29" pos:end="1723:34"><block_content pos:start="1723:29" pos:end="1723:34">

                            <break pos:start="1723:29" pos:end="1723:34">break;</break></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="1725:25" pos:end="1725:35"><expr pos:start="1725:25" pos:end="1725:34"><name pos:start="1725:25" pos:end="1725:30">offset</name> <operator pos:start="1725:32" pos:end="1725:32">=</operator> <literal type="number" pos:start="1725:34" pos:end="1725:34">0</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="1727:25" pos:end="1727:32"><expr pos:start="1727:25" pos:end="1727:31"><name pos:start="1727:25" pos:end="1727:27">imm</name> <operator pos:start="1727:29" pos:end="1727:29">=</operator> <literal type="number" pos:start="1727:31" pos:end="1727:31">0</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="1729:25" pos:end="1747:25"><if pos:start="1729:25" pos:end="1747:25">if <condition pos:start="1729:28" pos:end="1729:45">(<expr pos:start="1729:29" pos:end="1729:44"><name pos:start="1729:29" pos:end="1729:32">insn</name> <operator pos:start="1729:34" pos:end="1729:34">&amp;</operator> <operator pos:start="1729:36" pos:end="1729:36">(</operator><literal type="number" pos:start="1729:37" pos:end="1729:37">1</literal> <operator pos:start="1729:39" pos:end="1729:40">&lt;&lt;</operator> <literal type="number" pos:start="1729:42" pos:end="1729:43">10</literal><operator pos:start="1729:44" pos:end="1729:44">)</operator></expr>)</condition> <block pos:start="1729:47" pos:end="1747:25">{<block_content pos:start="1731:29" pos:end="1745:63">

                            <if_stmt pos:start="1731:29" pos:end="1733:49"><if pos:start="1731:29" pos:end="1733:49">if <condition pos:start="1731:32" pos:end="1731:48">(<expr pos:start="1731:33" pos:end="1731:47"><name pos:start="1731:33" pos:end="1731:36">insn</name> <operator pos:start="1731:38" pos:end="1731:38">&amp;</operator> <operator pos:start="1731:40" pos:end="1731:40">(</operator><literal type="number" pos:start="1731:41" pos:end="1731:41">1</literal> <operator pos:start="1731:43" pos:end="1731:44">&lt;&lt;</operator> <literal type="number" pos:start="1731:46" pos:end="1731:46">7</literal><operator pos:start="1731:47" pos:end="1731:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1733:33" pos:end="1733:49"><block_content pos:start="1733:33" pos:end="1733:49">

                                <expr_stmt pos:start="1733:33" pos:end="1733:49"><expr pos:start="1733:33" pos:end="1733:48"><name pos:start="1733:33" pos:end="1733:38">offset</name> <operator pos:start="1733:40" pos:end="1733:41">|=</operator> <name pos:start="1733:43" pos:end="1733:48">CPSR_A</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt pos:start="1735:29" pos:end="1737:49"><if pos:start="1735:29" pos:end="1737:49">if <condition pos:start="1735:32" pos:end="1735:48">(<expr pos:start="1735:33" pos:end="1735:47"><name pos:start="1735:33" pos:end="1735:36">insn</name> <operator pos:start="1735:38" pos:end="1735:38">&amp;</operator> <operator pos:start="1735:40" pos:end="1735:40">(</operator><literal type="number" pos:start="1735:41" pos:end="1735:41">1</literal> <operator pos:start="1735:43" pos:end="1735:44">&lt;&lt;</operator> <literal type="number" pos:start="1735:46" pos:end="1735:46">6</literal><operator pos:start="1735:47" pos:end="1735:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1737:33" pos:end="1737:49"><block_content pos:start="1737:33" pos:end="1737:49">

                                <expr_stmt pos:start="1737:33" pos:end="1737:49"><expr pos:start="1737:33" pos:end="1737:48"><name pos:start="1737:33" pos:end="1737:38">offset</name> <operator pos:start="1737:40" pos:end="1737:41">|=</operator> <name pos:start="1737:43" pos:end="1737:48">CPSR_I</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt pos:start="1739:29" pos:end="1741:49"><if pos:start="1739:29" pos:end="1741:49">if <condition pos:start="1739:32" pos:end="1739:48">(<expr pos:start="1739:33" pos:end="1739:47"><name pos:start="1739:33" pos:end="1739:36">insn</name> <operator pos:start="1739:38" pos:end="1739:38">&amp;</operator> <operator pos:start="1739:40" pos:end="1739:40">(</operator><literal type="number" pos:start="1739:41" pos:end="1739:41">1</literal> <operator pos:start="1739:43" pos:end="1739:44">&lt;&lt;</operator> <literal type="number" pos:start="1739:46" pos:end="1739:46">5</literal><operator pos:start="1739:47" pos:end="1739:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1741:33" pos:end="1741:49"><block_content pos:start="1741:33" pos:end="1741:49">

                                <expr_stmt pos:start="1741:33" pos:end="1741:49"><expr pos:start="1741:33" pos:end="1741:48"><name pos:start="1741:33" pos:end="1741:38">offset</name> <operator pos:start="1741:40" pos:end="1741:41">|=</operator> <name pos:start="1741:43" pos:end="1741:48">CPSR_F</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt pos:start="1743:29" pos:end="1745:63"><if pos:start="1743:29" pos:end="1745:63">if <condition pos:start="1743:32" pos:end="1743:48">(<expr pos:start="1743:33" pos:end="1743:47"><name pos:start="1743:33" pos:end="1743:36">insn</name> <operator pos:start="1743:38" pos:end="1743:38">&amp;</operator> <operator pos:start="1743:40" pos:end="1743:40">(</operator><literal type="number" pos:start="1743:41" pos:end="1743:41">1</literal> <operator pos:start="1743:43" pos:end="1743:44">&lt;&lt;</operator> <literal type="number" pos:start="1743:46" pos:end="1743:46">9</literal><operator pos:start="1743:47" pos:end="1743:47">)</operator></expr>)</condition><block type="pseudo" pos:start="1745:33" pos:end="1745:63"><block_content pos:start="1745:33" pos:end="1745:63">

                                <expr_stmt pos:start="1745:33" pos:end="1745:63"><expr pos:start="1745:33" pos:end="1745:62"><name pos:start="1745:33" pos:end="1745:35">imm</name> <operator pos:start="1745:37" pos:end="1745:37">=</operator> <name pos:start="1745:39" pos:end="1745:44">CPSR_A</name> <operator pos:start="1745:46" pos:end="1745:46">|</operator> <name pos:start="1745:48" pos:end="1745:53">CPSR_I</name> <operator pos:start="1745:55" pos:end="1745:55">|</operator> <name pos:start="1745:57" pos:end="1745:62">CPSR_F</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="1749:25" pos:end="1755:25"><if pos:start="1749:25" pos:end="1755:25">if <condition pos:start="1749:28" pos:end="1749:44">(<expr pos:start="1749:29" pos:end="1749:43"><name pos:start="1749:29" pos:end="1749:32">insn</name> <operator pos:start="1749:34" pos:end="1749:34">&amp;</operator> <operator pos:start="1749:36" pos:end="1749:36">(</operator><literal type="number" pos:start="1749:37" pos:end="1749:37">1</literal> <operator pos:start="1749:39" pos:end="1749:40">&lt;&lt;</operator> <literal type="number" pos:start="1749:42" pos:end="1749:42">8</literal><operator pos:start="1749:43" pos:end="1749:43">)</operator></expr>)</condition> <block pos:start="1749:46" pos:end="1755:25">{<block_content pos:start="1751:29" pos:end="1753:49">

                            <expr_stmt pos:start="1751:29" pos:end="1751:43"><expr pos:start="1751:29" pos:end="1751:42"><name pos:start="1751:29" pos:end="1751:34">offset</name> <operator pos:start="1751:36" pos:end="1751:37">|=</operator> <literal type="number" pos:start="1751:39" pos:end="1751:42">0x1f</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="1753:29" pos:end="1753:49"><expr pos:start="1753:29" pos:end="1753:48"><name pos:start="1753:29" pos:end="1753:31">imm</name> <operator pos:start="1753:33" pos:end="1753:34">|=</operator> <operator pos:start="1753:36" pos:end="1753:36">(</operator><name pos:start="1753:37" pos:end="1753:40">insn</name> <operator pos:start="1753:42" pos:end="1753:42">&amp;</operator> <literal type="number" pos:start="1753:44" pos:end="1753:47">0x1f</literal><operator pos:start="1753:48" pos:end="1753:48">)</operator></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="1757:25" pos:end="1761:25"><if pos:start="1757:25" pos:end="1761:25">if <condition pos:start="1757:28" pos:end="1757:35">(<expr pos:start="1757:29" pos:end="1757:34"><name pos:start="1757:29" pos:end="1757:34">offset</name></expr>)</condition> <block pos:start="1757:37" pos:end="1761:25">{<block_content pos:start="1759:29" pos:end="1759:62">

                            <expr_stmt pos:start="1759:29" pos:end="1759:62"><expr pos:start="1759:29" pos:end="1759:61"><call pos:start="1759:29" pos:end="1759:61"><name pos:start="1759:29" pos:end="1759:42">gen_set_psr_im</name><argument_list pos:start="1759:43" pos:end="1759:61">(<argument pos:start="1759:44" pos:end="1759:44"><expr pos:start="1759:44" pos:end="1759:44"><name pos:start="1759:44" pos:end="1759:44">s</name></expr></argument>, <argument pos:start="1759:47" pos:end="1759:52"><expr pos:start="1759:47" pos:end="1759:52"><name pos:start="1759:47" pos:end="1759:52">offset</name></expr></argument>, <argument pos:start="1759:55" pos:end="1759:55"><expr pos:start="1759:55" pos:end="1759:55"><literal type="number" pos:start="1759:55" pos:end="1759:55">0</literal></expr></argument>, <argument pos:start="1759:58" pos:end="1759:60"><expr pos:start="1759:58" pos:end="1759:60"><name pos:start="1759:58" pos:end="1759:60">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="1763:25" pos:end="1763:30">break;</break>

                    <case pos:start="1765:21" pos:end="1765:27">case <expr pos:start="1765:26" pos:end="1765:26"><literal type="number" pos:start="1765:26" pos:end="1765:26">3</literal></expr>:</case> <comment type="block" pos:start="1765:29" pos:end="1765:62">/* Special control operations.  */</comment>

                        <expr_stmt pos:start="1767:25" pos:end="1767:32"><expr pos:start="1767:25" pos:end="1767:31"><call pos:start="1767:25" pos:end="1767:31"><name pos:start="1767:25" pos:end="1767:28">ARCH</name><argument_list pos:start="1767:29" pos:end="1767:31">(<argument pos:start="1767:30" pos:end="1767:30"><expr pos:start="1767:30" pos:end="1767:30"><literal type="number" pos:start="1767:30" pos:end="1767:30">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1769:25" pos:end="1769:47"><expr pos:start="1769:25" pos:end="1769:46"><name pos:start="1769:25" pos:end="1769:26">op</name> <operator pos:start="1769:28" pos:end="1769:28">=</operator> <operator pos:start="1769:30" pos:end="1769:30">(</operator><name pos:start="1769:31" pos:end="1769:34">insn</name> <operator pos:start="1769:36" pos:end="1769:37">&gt;&gt;</operator> <literal type="number" pos:start="1769:39" pos:end="1769:39">4</literal><operator pos:start="1769:40" pos:end="1769:40">)</operator> <operator pos:start="1769:42" pos:end="1769:42">&amp;</operator> <literal type="number" pos:start="1769:44" pos:end="1769:46">0xf</literal></expr>;</expr_stmt>

                        <switch pos:start="1771:25" pos:end="1807:25">switch <condition pos:start="1771:32" pos:end="1771:35">(<expr pos:start="1771:33" pos:end="1771:34"><name pos:start="1771:33" pos:end="1771:34">op</name></expr>)</condition> <block pos:start="1771:37" pos:end="1807:25">{<block_content pos:start="1773:25" pos:end="1805:44">

                        <case pos:start="1773:25" pos:end="1773:31">case <expr pos:start="1773:30" pos:end="1773:30"><literal type="number" pos:start="1773:30" pos:end="1773:30">2</literal></expr>:</case> <comment type="block" pos:start="1773:33" pos:end="1773:43">/* clrex */</comment>

                            <expr_stmt pos:start="1775:29" pos:end="1775:41"><expr pos:start="1775:29" pos:end="1775:40"><call pos:start="1775:29" pos:end="1775:40"><name pos:start="1775:29" pos:end="1775:37">gen_clrex</name><argument_list pos:start="1775:38" pos:end="1775:40">(<argument pos:start="1775:39" pos:end="1775:39"><expr pos:start="1775:39" pos:end="1775:39"><name pos:start="1775:39" pos:end="1775:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1777:29" pos:end="1777:34">break;</break>

                        <case pos:start="1779:25" pos:end="1779:31">case <expr pos:start="1779:30" pos:end="1779:30"><literal type="number" pos:start="1779:30" pos:end="1779:30">4</literal></expr>:</case> <comment type="block" pos:start="1779:33" pos:end="1779:41">/* dsb */</comment>

                        <case pos:start="1781:25" pos:end="1781:31">case <expr pos:start="1781:30" pos:end="1781:30"><literal type="number" pos:start="1781:30" pos:end="1781:30">5</literal></expr>:</case> <comment type="block" pos:start="1781:33" pos:end="1781:41">/* dmb */</comment>

                            <expr_stmt pos:start="1783:29" pos:end="1783:64"><expr pos:start="1783:29" pos:end="1783:63"><call pos:start="1783:29" pos:end="1783:63"><name pos:start="1783:29" pos:end="1783:38">tcg_gen_mb</name><argument_list pos:start="1783:39" pos:end="1783:63">(<argument pos:start="1783:40" pos:end="1783:62"><expr pos:start="1783:40" pos:end="1783:62"><name pos:start="1783:40" pos:end="1783:49">TCG_MO_ALL</name> <operator pos:start="1783:51" pos:end="1783:51">|</operator> <name pos:start="1783:53" pos:end="1783:62">TCG_BAR_SC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1785:29" pos:end="1785:34">break;</break>

                        <case pos:start="1787:25" pos:end="1787:31">case <expr pos:start="1787:30" pos:end="1787:30"><literal type="number" pos:start="1787:30" pos:end="1787:30">6</literal></expr>:</case> <comment type="block" pos:start="1787:33" pos:end="1787:41">/* isb */</comment>

                            <comment type="block" pos:start="1789:29" pos:end="1797:31">/* We need to break the TB after this insn

                             * to execute self-modifying code correctly

                             * and also to take any pending interrupts

                             * immediately.

                             */</comment>

                            <expr_stmt pos:start="1799:29" pos:end="1799:58"><expr pos:start="1799:29" pos:end="1799:57"><call pos:start="1799:29" pos:end="1799:57"><name pos:start="1799:29" pos:end="1799:39">gen_goto_tb</name><argument_list pos:start="1799:40" pos:end="1799:57">(<argument pos:start="1799:41" pos:end="1799:41"><expr pos:start="1799:41" pos:end="1799:41"><name pos:start="1799:41" pos:end="1799:41">s</name></expr></argument>, <argument pos:start="1799:44" pos:end="1799:44"><expr pos:start="1799:44" pos:end="1799:44"><literal type="number" pos:start="1799:44" pos:end="1799:44">0</literal></expr></argument>, <argument pos:start="1799:47" pos:end="1799:56"><expr pos:start="1799:47" pos:end="1799:56"><name pos:start="1799:47" pos:end="1799:51"><name pos:start="1799:47" pos:end="1799:47">s</name><operator pos:start="1799:48" pos:end="1799:49">-&gt;</operator><name pos:start="1799:50" pos:end="1799:51">pc</name></name> <operator pos:start="1799:53" pos:end="1799:53">&amp;</operator> <operator pos:start="1799:55" pos:end="1799:55">~</operator><literal type="number" pos:start="1799:56" pos:end="1799:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1801:29" pos:end="1801:34">break;</break>

                        <default pos:start="1803:25" pos:end="1803:32">default:</default>

                            <goto pos:start="1805:29" pos:end="1805:44">goto <name pos:start="1805:34" pos:end="1805:43">illegal_op</name>;</goto>

                        </block_content>}</block></switch>

                        <break pos:start="1809:25" pos:end="1809:30">break;</break>

                    <case pos:start="1811:21" pos:end="1811:27">case <expr pos:start="1811:26" pos:end="1811:26"><literal type="number" pos:start="1811:26" pos:end="1811:26">4</literal></expr>:</case> <comment type="block" pos:start="1811:29" pos:end="1811:37">/* bxj */</comment>

                        <comment type="block" pos:start="1813:25" pos:end="1817:27">/* Trivial implementation equivalent to bx.

                         * This instruction doesn't exist at all for M-profile.

                         */</comment>

                        <if_stmt pos:start="1819:25" pos:end="1823:25"><if pos:start="1819:25" pos:end="1823:25">if <condition pos:start="1819:28" pos:end="1819:61">(<expr pos:start="1819:29" pos:end="1819:60"><call pos:start="1819:29" pos:end="1819:60"><name pos:start="1819:29" pos:end="1819:42">arm_dc_feature</name><argument_list pos:start="1819:43" pos:end="1819:60">(<argument pos:start="1819:44" pos:end="1819:44"><expr pos:start="1819:44" pos:end="1819:44"><name pos:start="1819:44" pos:end="1819:44">s</name></expr></argument>, <argument pos:start="1819:47" pos:end="1819:59"><expr pos:start="1819:47" pos:end="1819:59"><name pos:start="1819:47" pos:end="1819:59">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1819:63" pos:end="1823:25">{<block_content pos:start="1821:29" pos:end="1821:44">

                            <goto pos:start="1821:29" pos:end="1821:44">goto <name pos:start="1821:34" pos:end="1821:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1825:25" pos:end="1825:46"><expr pos:start="1825:25" pos:end="1825:45"><name pos:start="1825:25" pos:end="1825:27">tmp</name> <operator pos:start="1825:29" pos:end="1825:29">=</operator> <call pos:start="1825:31" pos:end="1825:45"><name pos:start="1825:31" pos:end="1825:38">load_reg</name><argument_list pos:start="1825:39" pos:end="1825:45">(<argument pos:start="1825:40" pos:end="1825:40"><expr pos:start="1825:40" pos:end="1825:40"><name pos:start="1825:40" pos:end="1825:40">s</name></expr></argument>, <argument pos:start="1825:43" pos:end="1825:44"><expr pos:start="1825:43" pos:end="1825:44"><name pos:start="1825:43" pos:end="1825:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1827:25" pos:end="1827:39"><expr pos:start="1827:25" pos:end="1827:38"><call pos:start="1827:25" pos:end="1827:38"><name pos:start="1827:25" pos:end="1827:30">gen_bx</name><argument_list pos:start="1827:31" pos:end="1827:38">(<argument pos:start="1827:32" pos:end="1827:32"><expr pos:start="1827:32" pos:end="1827:32"><name pos:start="1827:32" pos:end="1827:32">s</name></expr></argument>, <argument pos:start="1827:35" pos:end="1827:37"><expr pos:start="1827:35" pos:end="1827:37"><name pos:start="1827:35" pos:end="1827:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1829:25" pos:end="1829:30">break;</break>

                    <case pos:start="1831:21" pos:end="1831:27">case <expr pos:start="1831:26" pos:end="1831:26"><literal type="number" pos:start="1831:26" pos:end="1831:26">5</literal></expr>:</case> <comment type="block" pos:start="1831:29" pos:end="1831:52">/* Exception return.  */</comment>

                        <if_stmt pos:start="1833:25" pos:end="1837:25"><if pos:start="1833:25" pos:end="1837:25">if <condition pos:start="1833:28" pos:end="1833:39">(<expr pos:start="1833:29" pos:end="1833:38"><call pos:start="1833:29" pos:end="1833:38"><name pos:start="1833:29" pos:end="1833:35">IS_USER</name><argument_list pos:start="1833:36" pos:end="1833:38">(<argument pos:start="1833:37" pos:end="1833:37"><expr pos:start="1833:37" pos:end="1833:37"><name pos:start="1833:37" pos:end="1833:37">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1833:41" pos:end="1837:25">{<block_content pos:start="1835:29" pos:end="1835:44">

                            <goto pos:start="1835:29" pos:end="1835:44">goto <name pos:start="1835:34" pos:end="1835:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="1839:25" pos:end="1843:25"><if pos:start="1839:25" pos:end="1843:25">if <condition pos:start="1839:28" pos:end="1839:49">(<expr pos:start="1839:29" pos:end="1839:48"><name pos:start="1839:29" pos:end="1839:30">rn</name> <operator pos:start="1839:32" pos:end="1839:33">!=</operator> <literal type="number" pos:start="1839:35" pos:end="1839:36">14</literal> <operator pos:start="1839:38" pos:end="1839:39">||</operator> <name pos:start="1839:41" pos:end="1839:42">rd</name> <operator pos:start="1839:44" pos:end="1839:45">!=</operator> <literal type="number" pos:start="1839:47" pos:end="1839:48">15</literal></expr>)</condition> <block pos:start="1839:51" pos:end="1843:25">{<block_content pos:start="1841:29" pos:end="1841:44">

                            <goto pos:start="1841:29" pos:end="1841:44">goto <name pos:start="1841:34" pos:end="1841:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1845:25" pos:end="1845:46"><expr pos:start="1845:25" pos:end="1845:45"><name pos:start="1845:25" pos:end="1845:27">tmp</name> <operator pos:start="1845:29" pos:end="1845:29">=</operator> <call pos:start="1845:31" pos:end="1845:45"><name pos:start="1845:31" pos:end="1845:38">load_reg</name><argument_list pos:start="1845:39" pos:end="1845:45">(<argument pos:start="1845:40" pos:end="1845:40"><expr pos:start="1845:40" pos:end="1845:40"><name pos:start="1845:40" pos:end="1845:40">s</name></expr></argument>, <argument pos:start="1845:43" pos:end="1845:44"><expr pos:start="1845:43" pos:end="1845:44"><name pos:start="1845:43" pos:end="1845:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1847:25" pos:end="1847:64"><expr pos:start="1847:25" pos:end="1847:63"><call pos:start="1847:25" pos:end="1847:63"><name pos:start="1847:25" pos:end="1847:40">tcg_gen_subi_i32</name><argument_list pos:start="1847:41" pos:end="1847:63">(<argument pos:start="1847:42" pos:end="1847:44"><expr pos:start="1847:42" pos:end="1847:44"><name pos:start="1847:42" pos:end="1847:44">tmp</name></expr></argument>, <argument pos:start="1847:47" pos:end="1847:49"><expr pos:start="1847:47" pos:end="1847:49"><name pos:start="1847:47" pos:end="1847:49">tmp</name></expr></argument>, <argument pos:start="1847:52" pos:end="1847:62"><expr pos:start="1847:52" pos:end="1847:62"><name pos:start="1847:52" pos:end="1847:55">insn</name> <operator pos:start="1847:57" pos:end="1847:57">&amp;</operator> <literal type="number" pos:start="1847:59" pos:end="1847:62">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1849:25" pos:end="1849:53"><expr pos:start="1849:25" pos:end="1849:52"><call pos:start="1849:25" pos:end="1849:52"><name pos:start="1849:25" pos:end="1849:44">gen_exception_return</name><argument_list pos:start="1849:45" pos:end="1849:52">(<argument pos:start="1849:46" pos:end="1849:46"><expr pos:start="1849:46" pos:end="1849:46"><name pos:start="1849:46" pos:end="1849:46">s</name></expr></argument>, <argument pos:start="1849:49" pos:end="1849:51"><expr pos:start="1849:49" pos:end="1849:51"><name pos:start="1849:49" pos:end="1849:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1851:25" pos:end="1851:30">break;</break>

                    <case pos:start="1853:21" pos:end="1853:27">case <expr pos:start="1853:26" pos:end="1853:26"><literal type="number" pos:start="1853:26" pos:end="1853:26">6</literal></expr>:</case> <comment type="block" pos:start="1853:29" pos:end="1853:37">/* MRS */</comment>

                        <if_stmt pos:start="1855:25" pos:end="1871:25"><if pos:start="1855:25" pos:end="1871:25">if <condition pos:start="1855:28" pos:end="1857:62">(<expr pos:start="1855:29" pos:end="1857:61"><call pos:start="1855:29" pos:end="1855:49"><name pos:start="1855:29" pos:end="1855:37">extract32</name><argument_list pos:start="1855:38" pos:end="1855:49">(<argument pos:start="1855:39" pos:end="1855:42"><expr pos:start="1855:39" pos:end="1855:42"><name pos:start="1855:39" pos:end="1855:42">insn</name></expr></argument>, <argument pos:start="1855:45" pos:end="1855:45"><expr pos:start="1855:45" pos:end="1855:45"><literal type="number" pos:start="1855:45" pos:end="1855:45">5</literal></expr></argument>, <argument pos:start="1855:48" pos:end="1855:48"><expr pos:start="1855:48" pos:end="1855:48"><literal type="number" pos:start="1855:48" pos:end="1855:48">1</literal></expr></argument>)</argument_list></call> <operator pos:start="1855:51" pos:end="1855:52">&amp;&amp;</operator>

                            <operator pos:start="1857:29" pos:end="1857:29">!</operator><call pos:start="1857:30" pos:end="1857:61"><name pos:start="1857:30" pos:end="1857:43">arm_dc_feature</name><argument_list pos:start="1857:44" pos:end="1857:61">(<argument pos:start="1857:45" pos:end="1857:45"><expr pos:start="1857:45" pos:end="1857:45"><name pos:start="1857:45" pos:end="1857:45">s</name></expr></argument>, <argument pos:start="1857:48" pos:end="1857:60"><expr pos:start="1857:48" pos:end="1857:60"><name pos:start="1857:48" pos:end="1857:60">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1857:64" pos:end="1871:25">{<block_content pos:start="1861:29" pos:end="1869:34">

                            <comment type="block" pos:start="1859:29" pos:end="1859:46">/* MRS (banked) */</comment>

                            <decl_stmt pos:start="1861:29" pos:end="1863:61"><decl pos:start="1861:29" pos:end="1863:60"><type pos:start="1861:29" pos:end="1861:31"><name pos:start="1861:29" pos:end="1861:31">int</name></type> <name pos:start="1861:33" pos:end="1861:36">sysm</name> <init pos:start="1861:38" pos:end="1863:60">= <expr pos:start="1861:40" pos:end="1863:60"><call pos:start="1861:40" pos:end="1861:61"><name pos:start="1861:40" pos:end="1861:48">extract32</name><argument_list pos:start="1861:49" pos:end="1861:61">(<argument pos:start="1861:50" pos:end="1861:53"><expr pos:start="1861:50" pos:end="1861:53"><name pos:start="1861:50" pos:end="1861:53">insn</name></expr></argument>, <argument pos:start="1861:56" pos:end="1861:57"><expr pos:start="1861:56" pos:end="1861:57"><literal type="number" pos:start="1861:56" pos:end="1861:57">16</literal></expr></argument>, <argument pos:start="1861:60" pos:end="1861:60"><expr pos:start="1861:60" pos:end="1861:60"><literal type="number" pos:start="1861:60" pos:end="1861:60">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1861:63" pos:end="1861:63">|</operator>

                                <operator pos:start="1863:33" pos:end="1863:33">(</operator><call pos:start="1863:34" pos:end="1863:54"><name pos:start="1863:34" pos:end="1863:42">extract32</name><argument_list pos:start="1863:43" pos:end="1863:54">(<argument pos:start="1863:44" pos:end="1863:47"><expr pos:start="1863:44" pos:end="1863:47"><name pos:start="1863:44" pos:end="1863:47">insn</name></expr></argument>, <argument pos:start="1863:50" pos:end="1863:50"><expr pos:start="1863:50" pos:end="1863:50"><literal type="number" pos:start="1863:50" pos:end="1863:50">4</literal></expr></argument>, <argument pos:start="1863:53" pos:end="1863:53"><expr pos:start="1863:53" pos:end="1863:53"><literal type="number" pos:start="1863:53" pos:end="1863:53">1</literal></expr></argument>)</argument_list></call> <operator pos:start="1863:56" pos:end="1863:57">&lt;&lt;</operator> <literal type="number" pos:start="1863:59" pos:end="1863:59">4</literal><operator pos:start="1863:60" pos:end="1863:60">)</operator></expr></init></decl>;</decl_stmt>



                            <expr_stmt pos:start="1867:29" pos:end="1867:59"><expr pos:start="1867:29" pos:end="1867:58"><call pos:start="1867:29" pos:end="1867:58"><name pos:start="1867:29" pos:end="1867:42">gen_mrs_banked</name><argument_list pos:start="1867:43" pos:end="1867:58">(<argument pos:start="1867:44" pos:end="1867:44"><expr pos:start="1867:44" pos:end="1867:44"><name pos:start="1867:44" pos:end="1867:44">s</name></expr></argument>, <argument pos:start="1867:47" pos:end="1867:47"><expr pos:start="1867:47" pos:end="1867:47"><literal type="number" pos:start="1867:47" pos:end="1867:47">0</literal></expr></argument>, <argument pos:start="1867:50" pos:end="1867:53"><expr pos:start="1867:50" pos:end="1867:53"><name pos:start="1867:50" pos:end="1867:53">sysm</name></expr></argument>, <argument pos:start="1867:56" pos:end="1867:57"><expr pos:start="1867:56" pos:end="1867:57"><name pos:start="1867:56" pos:end="1867:57">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1869:29" pos:end="1869:34">break;</break>

                        </block_content>}</block></if></if_stmt>



                        <if_stmt pos:start="1875:25" pos:end="1879:25"><if pos:start="1875:25" pos:end="1879:25">if <condition pos:start="1875:28" pos:end="1875:58">(<expr pos:start="1875:29" pos:end="1875:57"><call pos:start="1875:29" pos:end="1875:50"><name pos:start="1875:29" pos:end="1875:37">extract32</name><argument_list pos:start="1875:38" pos:end="1875:50">(<argument pos:start="1875:39" pos:end="1875:42"><expr pos:start="1875:39" pos:end="1875:42"><name pos:start="1875:39" pos:end="1875:42">insn</name></expr></argument>, <argument pos:start="1875:45" pos:end="1875:46"><expr pos:start="1875:45" pos:end="1875:46"><literal type="number" pos:start="1875:45" pos:end="1875:46">16</literal></expr></argument>, <argument pos:start="1875:49" pos:end="1875:49"><expr pos:start="1875:49" pos:end="1875:49"><literal type="number" pos:start="1875:49" pos:end="1875:49">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1875:52" pos:end="1875:53">!=</operator> <literal type="number" pos:start="1875:55" pos:end="1875:57">0xf</literal></expr>)</condition> <block pos:start="1875:60" pos:end="1879:25">{<block_content pos:start="1877:29" pos:end="1877:44">

                            <goto pos:start="1877:29" pos:end="1877:44">goto <name pos:start="1877:34" pos:end="1877:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="1881:25" pos:end="1887:25"><if pos:start="1881:25" pos:end="1887:25">if <condition pos:start="1881:28" pos:end="1883:55">(<expr pos:start="1881:29" pos:end="1883:54"><operator pos:start="1881:29" pos:end="1881:29">!</operator><call pos:start="1881:30" pos:end="1881:61"><name pos:start="1881:30" pos:end="1881:43">arm_dc_feature</name><argument_list pos:start="1881:44" pos:end="1881:61">(<argument pos:start="1881:45" pos:end="1881:45"><expr pos:start="1881:45" pos:end="1881:45"><name pos:start="1881:45" pos:end="1881:45">s</name></expr></argument>, <argument pos:start="1881:48" pos:end="1881:60"><expr pos:start="1881:48" pos:end="1881:60"><name pos:start="1881:48" pos:end="1881:60">ARM_FEATURE_M</name></expr></argument>)</argument_list></call> <operator pos:start="1881:63" pos:end="1881:64">&amp;&amp;</operator>

                            <call pos:start="1883:29" pos:end="1883:49"><name pos:start="1883:29" pos:end="1883:37">extract32</name><argument_list pos:start="1883:38" pos:end="1883:49">(<argument pos:start="1883:39" pos:end="1883:42"><expr pos:start="1883:39" pos:end="1883:42"><name pos:start="1883:39" pos:end="1883:42">insn</name></expr></argument>, <argument pos:start="1883:45" pos:end="1883:45"><expr pos:start="1883:45" pos:end="1883:45"><literal type="number" pos:start="1883:45" pos:end="1883:45">0</literal></expr></argument>, <argument pos:start="1883:48" pos:end="1883:48"><expr pos:start="1883:48" pos:end="1883:48"><literal type="number" pos:start="1883:48" pos:end="1883:48">8</literal></expr></argument>)</argument_list></call> <operator pos:start="1883:51" pos:end="1883:52">!=</operator> <literal type="number" pos:start="1883:54" pos:end="1883:54">0</literal></expr>)</condition> <block pos:start="1883:57" pos:end="1887:25">{<block_content pos:start="1885:29" pos:end="1885:44">

                            <goto pos:start="1885:29" pos:end="1885:44">goto <name pos:start="1885:34" pos:end="1885:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>



                        <comment type="block" pos:start="1891:25" pos:end="1891:38">/* mrs cpsr */</comment>

                        <expr_stmt pos:start="1893:25" pos:end="1893:49"><expr pos:start="1893:25" pos:end="1893:48"><name pos:start="1893:25" pos:end="1893:27">tmp</name> <operator pos:start="1893:29" pos:end="1893:29">=</operator> <call pos:start="1893:31" pos:end="1893:48"><name pos:start="1893:31" pos:end="1893:46">tcg_temp_new_i32</name><argument_list pos:start="1893:47" pos:end="1893:48">()</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1895:25" pos:end="1907:25"><if pos:start="1895:25" pos:end="1903:25">if <condition pos:start="1895:28" pos:end="1895:61">(<expr pos:start="1895:29" pos:end="1895:60"><call pos:start="1895:29" pos:end="1895:60"><name pos:start="1895:29" pos:end="1895:42">arm_dc_feature</name><argument_list pos:start="1895:43" pos:end="1895:60">(<argument pos:start="1895:44" pos:end="1895:44"><expr pos:start="1895:44" pos:end="1895:44"><name pos:start="1895:44" pos:end="1895:44">s</name></expr></argument>, <argument pos:start="1895:47" pos:end="1895:59"><expr pos:start="1895:47" pos:end="1895:59"><name pos:start="1895:47" pos:end="1895:59">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1895:63" pos:end="1903:25">{<block_content pos:start="1897:29" pos:end="1901:52">

                            <expr_stmt pos:start="1897:29" pos:end="1897:62"><expr pos:start="1897:29" pos:end="1897:61"><name pos:start="1897:29" pos:end="1897:32">addr</name> <operator pos:start="1897:34" pos:end="1897:34">=</operator> <call pos:start="1897:36" pos:end="1897:61"><name pos:start="1897:36" pos:end="1897:48">tcg_const_i32</name><argument_list pos:start="1897:49" pos:end="1897:61">(<argument pos:start="1897:50" pos:end="1897:60"><expr pos:start="1897:50" pos:end="1897:60"><name pos:start="1897:50" pos:end="1897:53">insn</name> <operator pos:start="1897:55" pos:end="1897:55">&amp;</operator> <literal type="number" pos:start="1897:57" pos:end="1897:60">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1899:29" pos:end="1899:67"><expr pos:start="1899:29" pos:end="1899:66"><call pos:start="1899:29" pos:end="1899:66"><name pos:start="1899:29" pos:end="1899:46">gen_helper_v7m_mrs</name><argument_list pos:start="1899:47" pos:end="1899:66">(<argument pos:start="1899:48" pos:end="1899:50"><expr pos:start="1899:48" pos:end="1899:50"><name pos:start="1899:48" pos:end="1899:50">tmp</name></expr></argument>, <argument pos:start="1899:53" pos:end="1899:59"><expr pos:start="1899:53" pos:end="1899:59"><name pos:start="1899:53" pos:end="1899:59">cpu_env</name></expr></argument>, <argument pos:start="1899:62" pos:end="1899:65"><expr pos:start="1899:62" pos:end="1899:65"><name pos:start="1899:62" pos:end="1899:65">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1901:29" pos:end="1901:52"><expr pos:start="1901:29" pos:end="1901:51"><call pos:start="1901:29" pos:end="1901:51"><name pos:start="1901:29" pos:end="1901:45">tcg_temp_free_i32</name><argument_list pos:start="1901:46" pos:end="1901:51">(<argument pos:start="1901:47" pos:end="1901:50"><expr pos:start="1901:47" pos:end="1901:50"><name pos:start="1901:47" pos:end="1901:50">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1903:27" pos:end="1907:25">else <block pos:start="1903:32" pos:end="1907:25">{<block_content pos:start="1905:29" pos:end="1905:63">

                            <expr_stmt pos:start="1905:29" pos:end="1905:63"><expr pos:start="1905:29" pos:end="1905:62"><call pos:start="1905:29" pos:end="1905:62"><name pos:start="1905:29" pos:end="1905:48">gen_helper_cpsr_read</name><argument_list pos:start="1905:49" pos:end="1905:62">(<argument pos:start="1905:50" pos:end="1905:52"><expr pos:start="1905:50" pos:end="1905:52"><name pos:start="1905:50" pos:end="1905:52">tmp</name></expr></argument>, <argument pos:start="1905:55" pos:end="1905:61"><expr pos:start="1905:55" pos:end="1905:61"><name pos:start="1905:55" pos:end="1905:61">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="1909:25" pos:end="1909:46"><expr pos:start="1909:25" pos:end="1909:45"><call pos:start="1909:25" pos:end="1909:45"><name pos:start="1909:25" pos:end="1909:33">store_reg</name><argument_list pos:start="1909:34" pos:end="1909:45">(<argument pos:start="1909:35" pos:end="1909:35"><expr pos:start="1909:35" pos:end="1909:35"><name pos:start="1909:35" pos:end="1909:35">s</name></expr></argument>, <argument pos:start="1909:38" pos:end="1909:39"><expr pos:start="1909:38" pos:end="1909:39"><name pos:start="1909:38" pos:end="1909:39">rd</name></expr></argument>, <argument pos:start="1909:42" pos:end="1909:44"><expr pos:start="1909:42" pos:end="1909:44"><name pos:start="1909:42" pos:end="1909:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1911:25" pos:end="1911:30">break;</break>

                    <case pos:start="1913:21" pos:end="1913:27">case <expr pos:start="1913:26" pos:end="1913:26"><literal type="number" pos:start="1913:26" pos:end="1913:26">7</literal></expr>:</case> <comment type="block" pos:start="1913:29" pos:end="1913:37">/* MRS */</comment>

                        <if_stmt pos:start="1915:25" pos:end="1931:25"><if pos:start="1915:25" pos:end="1931:25">if <condition pos:start="1915:28" pos:end="1917:62">(<expr pos:start="1915:29" pos:end="1917:61"><call pos:start="1915:29" pos:end="1915:49"><name pos:start="1915:29" pos:end="1915:37">extract32</name><argument_list pos:start="1915:38" pos:end="1915:49">(<argument pos:start="1915:39" pos:end="1915:42"><expr pos:start="1915:39" pos:end="1915:42"><name pos:start="1915:39" pos:end="1915:42">insn</name></expr></argument>, <argument pos:start="1915:45" pos:end="1915:45"><expr pos:start="1915:45" pos:end="1915:45"><literal type="number" pos:start="1915:45" pos:end="1915:45">5</literal></expr></argument>, <argument pos:start="1915:48" pos:end="1915:48"><expr pos:start="1915:48" pos:end="1915:48"><literal type="number" pos:start="1915:48" pos:end="1915:48">1</literal></expr></argument>)</argument_list></call> <operator pos:start="1915:51" pos:end="1915:52">&amp;&amp;</operator>

                            <operator pos:start="1917:29" pos:end="1917:29">!</operator><call pos:start="1917:30" pos:end="1917:61"><name pos:start="1917:30" pos:end="1917:43">arm_dc_feature</name><argument_list pos:start="1917:44" pos:end="1917:61">(<argument pos:start="1917:45" pos:end="1917:45"><expr pos:start="1917:45" pos:end="1917:45"><name pos:start="1917:45" pos:end="1917:45">s</name></expr></argument>, <argument pos:start="1917:48" pos:end="1917:60"><expr pos:start="1917:48" pos:end="1917:60"><name pos:start="1917:48" pos:end="1917:60">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1917:64" pos:end="1931:25">{<block_content pos:start="1921:29" pos:end="1929:34">

                            <comment type="block" pos:start="1919:29" pos:end="1919:46">/* MRS (banked) */</comment>

                            <decl_stmt pos:start="1921:29" pos:end="1923:61"><decl pos:start="1921:29" pos:end="1923:60"><type pos:start="1921:29" pos:end="1921:31"><name pos:start="1921:29" pos:end="1921:31">int</name></type> <name pos:start="1921:33" pos:end="1921:36">sysm</name> <init pos:start="1921:38" pos:end="1923:60">= <expr pos:start="1921:40" pos:end="1923:60"><call pos:start="1921:40" pos:end="1921:61"><name pos:start="1921:40" pos:end="1921:48">extract32</name><argument_list pos:start="1921:49" pos:end="1921:61">(<argument pos:start="1921:50" pos:end="1921:53"><expr pos:start="1921:50" pos:end="1921:53"><name pos:start="1921:50" pos:end="1921:53">insn</name></expr></argument>, <argument pos:start="1921:56" pos:end="1921:57"><expr pos:start="1921:56" pos:end="1921:57"><literal type="number" pos:start="1921:56" pos:end="1921:57">16</literal></expr></argument>, <argument pos:start="1921:60" pos:end="1921:60"><expr pos:start="1921:60" pos:end="1921:60"><literal type="number" pos:start="1921:60" pos:end="1921:60">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1921:63" pos:end="1921:63">|</operator>

                                <operator pos:start="1923:33" pos:end="1923:33">(</operator><call pos:start="1923:34" pos:end="1923:54"><name pos:start="1923:34" pos:end="1923:42">extract32</name><argument_list pos:start="1923:43" pos:end="1923:54">(<argument pos:start="1923:44" pos:end="1923:47"><expr pos:start="1923:44" pos:end="1923:47"><name pos:start="1923:44" pos:end="1923:47">insn</name></expr></argument>, <argument pos:start="1923:50" pos:end="1923:50"><expr pos:start="1923:50" pos:end="1923:50"><literal type="number" pos:start="1923:50" pos:end="1923:50">4</literal></expr></argument>, <argument pos:start="1923:53" pos:end="1923:53"><expr pos:start="1923:53" pos:end="1923:53"><literal type="number" pos:start="1923:53" pos:end="1923:53">1</literal></expr></argument>)</argument_list></call> <operator pos:start="1923:56" pos:end="1923:57">&lt;&lt;</operator> <literal type="number" pos:start="1923:59" pos:end="1923:59">4</literal><operator pos:start="1923:60" pos:end="1923:60">)</operator></expr></init></decl>;</decl_stmt>



                            <expr_stmt pos:start="1927:29" pos:end="1927:59"><expr pos:start="1927:29" pos:end="1927:58"><call pos:start="1927:29" pos:end="1927:58"><name pos:start="1927:29" pos:end="1927:42">gen_mrs_banked</name><argument_list pos:start="1927:43" pos:end="1927:58">(<argument pos:start="1927:44" pos:end="1927:44"><expr pos:start="1927:44" pos:end="1927:44"><name pos:start="1927:44" pos:end="1927:44">s</name></expr></argument>, <argument pos:start="1927:47" pos:end="1927:47"><expr pos:start="1927:47" pos:end="1927:47"><literal type="number" pos:start="1927:47" pos:end="1927:47">1</literal></expr></argument>, <argument pos:start="1927:50" pos:end="1927:53"><expr pos:start="1927:50" pos:end="1927:53"><name pos:start="1927:50" pos:end="1927:53">sysm</name></expr></argument>, <argument pos:start="1927:56" pos:end="1927:57"><expr pos:start="1927:56" pos:end="1927:57"><name pos:start="1927:56" pos:end="1927:57">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1929:29" pos:end="1929:34">break;</break>

                        </block_content>}</block></if></if_stmt>



                        <comment type="block" pos:start="1935:25" pos:end="1935:40">/* mrs spsr.  */</comment>

                        <comment type="block" pos:start="1937:25" pos:end="1937:59">/* Not accessible in user mode.  */</comment>

                        <if_stmt pos:start="1939:25" pos:end="1943:25"><if pos:start="1939:25" pos:end="1943:25">if <condition pos:start="1939:28" pos:end="1939:75">(<expr pos:start="1939:29" pos:end="1939:74"><call pos:start="1939:29" pos:end="1939:38"><name pos:start="1939:29" pos:end="1939:35">IS_USER</name><argument_list pos:start="1939:36" pos:end="1939:38">(<argument pos:start="1939:37" pos:end="1939:37"><expr pos:start="1939:37" pos:end="1939:37"><name pos:start="1939:37" pos:end="1939:37">s</name></expr></argument>)</argument_list></call> <operator pos:start="1939:40" pos:end="1939:41">||</operator> <call pos:start="1939:43" pos:end="1939:74"><name pos:start="1939:43" pos:end="1939:56">arm_dc_feature</name><argument_list pos:start="1939:57" pos:end="1939:74">(<argument pos:start="1939:58" pos:end="1939:58"><expr pos:start="1939:58" pos:end="1939:58"><name pos:start="1939:58" pos:end="1939:58">s</name></expr></argument>, <argument pos:start="1939:61" pos:end="1939:73"><expr pos:start="1939:61" pos:end="1939:73"><name pos:start="1939:61" pos:end="1939:73">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1939:77" pos:end="1943:25">{<block_content pos:start="1941:29" pos:end="1941:44">

                            <goto pos:start="1941:29" pos:end="1941:44">goto <name pos:start="1941:34" pos:end="1941:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>



                        <if_stmt pos:start="1947:25" pos:end="1953:25"><if pos:start="1947:25" pos:end="1953:25">if <condition pos:start="1947:28" pos:end="1949:55">(<expr pos:start="1947:29" pos:end="1949:54"><call pos:start="1947:29" pos:end="1947:50"><name pos:start="1947:29" pos:end="1947:37">extract32</name><argument_list pos:start="1947:38" pos:end="1947:50">(<argument pos:start="1947:39" pos:end="1947:42"><expr pos:start="1947:39" pos:end="1947:42"><name pos:start="1947:39" pos:end="1947:42">insn</name></expr></argument>, <argument pos:start="1947:45" pos:end="1947:46"><expr pos:start="1947:45" pos:end="1947:46"><literal type="number" pos:start="1947:45" pos:end="1947:46">16</literal></expr></argument>, <argument pos:start="1947:49" pos:end="1947:49"><expr pos:start="1947:49" pos:end="1947:49"><literal type="number" pos:start="1947:49" pos:end="1947:49">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1947:52" pos:end="1947:53">!=</operator> <literal type="number" pos:start="1947:55" pos:end="1947:57">0xf</literal> <operator pos:start="1947:59" pos:end="1947:60">||</operator>

                            <call pos:start="1949:29" pos:end="1949:49"><name pos:start="1949:29" pos:end="1949:37">extract32</name><argument_list pos:start="1949:38" pos:end="1949:49">(<argument pos:start="1949:39" pos:end="1949:42"><expr pos:start="1949:39" pos:end="1949:42"><name pos:start="1949:39" pos:end="1949:42">insn</name></expr></argument>, <argument pos:start="1949:45" pos:end="1949:45"><expr pos:start="1949:45" pos:end="1949:45"><literal type="number" pos:start="1949:45" pos:end="1949:45">0</literal></expr></argument>, <argument pos:start="1949:48" pos:end="1949:48"><expr pos:start="1949:48" pos:end="1949:48"><literal type="number" pos:start="1949:48" pos:end="1949:48">8</literal></expr></argument>)</argument_list></call> <operator pos:start="1949:51" pos:end="1949:52">!=</operator> <literal type="number" pos:start="1949:54" pos:end="1949:54">0</literal></expr>)</condition> <block pos:start="1949:57" pos:end="1953:25">{<block_content pos:start="1951:29" pos:end="1951:44">

                            <goto pos:start="1951:29" pos:end="1951:44">goto <name pos:start="1951:34" pos:end="1951:43">illegal_op</name>;</goto>

                        </block_content>}</block></if></if_stmt>



                        <expr_stmt pos:start="1957:25" pos:end="1957:51"><expr pos:start="1957:25" pos:end="1957:50"><name pos:start="1957:25" pos:end="1957:27">tmp</name> <operator pos:start="1957:29" pos:end="1957:29">=</operator> <call pos:start="1957:31" pos:end="1957:50"><name pos:start="1957:31" pos:end="1957:44">load_cpu_field</name><argument_list pos:start="1957:45" pos:end="1957:50">(<argument pos:start="1957:46" pos:end="1957:49"><expr pos:start="1957:46" pos:end="1957:49"><name pos:start="1957:46" pos:end="1957:49">spsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1959:25" pos:end="1959:46"><expr pos:start="1959:25" pos:end="1959:45"><call pos:start="1959:25" pos:end="1959:45"><name pos:start="1959:25" pos:end="1959:33">store_reg</name><argument_list pos:start="1959:34" pos:end="1959:45">(<argument pos:start="1959:35" pos:end="1959:35"><expr pos:start="1959:35" pos:end="1959:35"><name pos:start="1959:35" pos:end="1959:35">s</name></expr></argument>, <argument pos:start="1959:38" pos:end="1959:39"><expr pos:start="1959:38" pos:end="1959:39"><name pos:start="1959:38" pos:end="1959:39">rd</name></expr></argument>, <argument pos:start="1959:42" pos:end="1959:44"><expr pos:start="1959:42" pos:end="1959:44"><name pos:start="1959:42" pos:end="1959:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1961:25" pos:end="1961:30">break;</break>

                    </block_content>}</block></switch>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1967:15" pos:end="2009:13">else <block pos:start="1967:20" pos:end="2009:13">{<block_content pos:start="1971:17" pos:end="2007:43">

                <comment type="block" pos:start="1969:17" pos:end="1969:42">/* Conditional branch.  */</comment>

                <expr_stmt pos:start="1971:17" pos:end="1971:40"><expr pos:start="1971:17" pos:end="1971:39"><name pos:start="1971:17" pos:end="1971:18">op</name> <operator pos:start="1971:20" pos:end="1971:20">=</operator> <operator pos:start="1971:22" pos:end="1971:22">(</operator><name pos:start="1971:23" pos:end="1971:26">insn</name> <operator pos:start="1971:28" pos:end="1971:29">&gt;&gt;</operator> <literal type="number" pos:start="1971:31" pos:end="1971:32">22</literal><operator pos:start="1971:33" pos:end="1971:33">)</operator> <operator pos:start="1971:35" pos:end="1971:35">&amp;</operator> <literal type="number" pos:start="1971:37" pos:end="1971:39">0xf</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1973:17" pos:end="1973:71">/* Generate a conditional jump to next instruction.  */</comment>

                <expr_stmt pos:start="1975:17" pos:end="1975:47"><expr pos:start="1975:17" pos:end="1975:46"><name pos:start="1975:17" pos:end="1975:28"><name pos:start="1975:17" pos:end="1975:17">s</name><operator pos:start="1975:18" pos:end="1975:19">-&gt;</operator><name pos:start="1975:20" pos:end="1975:28">condlabel</name></name> <operator pos:start="1975:30" pos:end="1975:30">=</operator> <call pos:start="1975:32" pos:end="1975:46"><name pos:start="1975:32" pos:end="1975:44">gen_new_label</name><argument_list pos:start="1975:45" pos:end="1975:46">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1977:17" pos:end="1977:54"><expr pos:start="1977:17" pos:end="1977:53"><call pos:start="1977:17" pos:end="1977:53"><name pos:start="1977:17" pos:end="1977:31">arm_gen_test_cc</name><argument_list pos:start="1977:32" pos:end="1977:53">(<argument pos:start="1977:33" pos:end="1977:38"><expr pos:start="1977:33" pos:end="1977:38"><name pos:start="1977:33" pos:end="1977:34">op</name> <operator pos:start="1977:36" pos:end="1977:36">^</operator> <literal type="number" pos:start="1977:38" pos:end="1977:38">1</literal></expr></argument>, <argument pos:start="1977:41" pos:end="1977:52"><expr pos:start="1977:41" pos:end="1977:52"><name pos:start="1977:41" pos:end="1977:52"><name pos:start="1977:41" pos:end="1977:41">s</name><operator pos:start="1977:42" pos:end="1977:43">-&gt;</operator><name pos:start="1977:44" pos:end="1977:52">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1979:17" pos:end="1979:31"><expr pos:start="1979:17" pos:end="1979:30"><name pos:start="1979:17" pos:end="1979:26"><name pos:start="1979:17" pos:end="1979:17">s</name><operator pos:start="1979:18" pos:end="1979:19">-&gt;</operator><name pos:start="1979:20" pos:end="1979:26">condjmp</name></name> <operator pos:start="1979:28" pos:end="1979:28">=</operator> <literal type="number" pos:start="1979:30" pos:end="1979:30">1</literal></expr>;</expr_stmt>



                <comment type="block" pos:start="1983:17" pos:end="1983:47">/* offset[11:1] = insn[10:0] */</comment>

                <expr_stmt pos:start="1985:17" pos:end="1985:45"><expr pos:start="1985:17" pos:end="1985:44"><name pos:start="1985:17" pos:end="1985:22">offset</name> <operator pos:start="1985:24" pos:end="1985:24">=</operator> <operator pos:start="1985:26" pos:end="1985:26">(</operator><name pos:start="1985:27" pos:end="1985:30">insn</name> <operator pos:start="1985:32" pos:end="1985:32">&amp;</operator> <literal type="number" pos:start="1985:34" pos:end="1985:38">0x7ff</literal><operator pos:start="1985:39" pos:end="1985:39">)</operator> <operator pos:start="1985:41" pos:end="1985:42">&lt;&lt;</operator> <literal type="number" pos:start="1985:44" pos:end="1985:44">1</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1987:17" pos:end="1987:51">/* offset[17:12] = insn[21:16].  */</comment>

                <expr_stmt pos:start="1989:17" pos:end="1989:51"><expr pos:start="1989:17" pos:end="1989:50"><name pos:start="1989:17" pos:end="1989:22">offset</name> <operator pos:start="1989:24" pos:end="1989:25">|=</operator> <operator pos:start="1989:27" pos:end="1989:27">(</operator><name pos:start="1989:28" pos:end="1989:31">insn</name> <operator pos:start="1989:33" pos:end="1989:33">&amp;</operator> <literal type="number" pos:start="1989:35" pos:end="1989:44">0x003f0000</literal><operator pos:start="1989:45" pos:end="1989:45">)</operator> <operator pos:start="1989:47" pos:end="1989:48">&gt;&gt;</operator> <literal type="number" pos:start="1989:50" pos:end="1989:50">4</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1991:17" pos:end="1991:48">/* offset[31:20] = insn[26].  */</comment>

                <expr_stmt pos:start="1993:17" pos:end="1993:70"><expr pos:start="1993:17" pos:end="1993:69"><name pos:start="1993:17" pos:end="1993:22">offset</name> <operator pos:start="1993:24" pos:end="1993:25">|=</operator> <operator pos:start="1993:27" pos:end="1993:27">(</operator><operator pos:start="1993:28" pos:end="1993:28">(</operator><name pos:start="1993:29" pos:end="1993:35">int32_t</name><operator pos:start="1993:36" pos:end="1993:36">)</operator><operator pos:start="1993:37" pos:end="1993:37">(</operator><operator pos:start="1993:38" pos:end="1993:38">(</operator><name pos:start="1993:39" pos:end="1993:42">insn</name> <operator pos:start="1993:44" pos:end="1993:45">&lt;&lt;</operator> <literal type="number" pos:start="1993:47" pos:end="1993:47">5</literal><operator pos:start="1993:48" pos:end="1993:48">)</operator> <operator pos:start="1993:50" pos:end="1993:50">&amp;</operator> <literal type="number" pos:start="1993:52" pos:end="1993:61">0x80000000</literal><operator pos:start="1993:62" pos:end="1993:62">)</operator><operator pos:start="1993:63" pos:end="1993:63">)</operator> <operator pos:start="1993:65" pos:end="1993:66">&gt;&gt;</operator> <literal type="number" pos:start="1993:68" pos:end="1993:69">11</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1995:17" pos:end="1995:45">/* offset[18] = insn[13].  */</comment>

                <expr_stmt pos:start="1997:17" pos:end="1997:50"><expr pos:start="1997:17" pos:end="1997:49"><name pos:start="1997:17" pos:end="1997:22">offset</name> <operator pos:start="1997:24" pos:end="1997:25">|=</operator> <operator pos:start="1997:27" pos:end="1997:27">(</operator><name pos:start="1997:28" pos:end="1997:31">insn</name> <operator pos:start="1997:33" pos:end="1997:33">&amp;</operator> <operator pos:start="1997:35" pos:end="1997:35">(</operator><literal type="number" pos:start="1997:36" pos:end="1997:36">1</literal> <operator pos:start="1997:38" pos:end="1997:39">&lt;&lt;</operator> <literal type="number" pos:start="1997:41" pos:end="1997:42">13</literal><operator pos:start="1997:43" pos:end="1997:43">)</operator><operator pos:start="1997:44" pos:end="1997:44">)</operator> <operator pos:start="1997:46" pos:end="1997:47">&lt;&lt;</operator> <literal type="number" pos:start="1997:49" pos:end="1997:49">5</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="1999:17" pos:end="1999:45">/* offset[19] = insn[11].  */</comment>

                <expr_stmt pos:start="2001:17" pos:end="2001:50"><expr pos:start="2001:17" pos:end="2001:49"><name pos:start="2001:17" pos:end="2001:22">offset</name> <operator pos:start="2001:24" pos:end="2001:25">|=</operator> <operator pos:start="2001:27" pos:end="2001:27">(</operator><name pos:start="2001:28" pos:end="2001:31">insn</name> <operator pos:start="2001:33" pos:end="2001:33">&amp;</operator> <operator pos:start="2001:35" pos:end="2001:35">(</operator><literal type="number" pos:start="2001:36" pos:end="2001:36">1</literal> <operator pos:start="2001:38" pos:end="2001:39">&lt;&lt;</operator> <literal type="number" pos:start="2001:41" pos:end="2001:42">11</literal><operator pos:start="2001:43" pos:end="2001:43">)</operator><operator pos:start="2001:44" pos:end="2001:44">)</operator> <operator pos:start="2001:46" pos:end="2001:47">&lt;&lt;</operator> <literal type="number" pos:start="2001:49" pos:end="2001:49">8</literal></expr>;</expr_stmt>



                <comment type="block" pos:start="2005:17" pos:end="2005:40">/* jump to the offset */</comment>

                <expr_stmt pos:start="2007:17" pos:end="2007:43"><expr pos:start="2007:17" pos:end="2007:42"><call pos:start="2007:17" pos:end="2007:42"><name pos:start="2007:17" pos:end="2007:23">gen_jmp</name><argument_list pos:start="2007:24" pos:end="2007:42">(<argument pos:start="2007:25" pos:end="2007:25"><expr pos:start="2007:25" pos:end="2007:25"><name pos:start="2007:25" pos:end="2007:25">s</name></expr></argument>, <argument pos:start="2007:28" pos:end="2007:41"><expr pos:start="2007:28" pos:end="2007:41"><name pos:start="2007:28" pos:end="2007:32"><name pos:start="2007:28" pos:end="2007:28">s</name><operator pos:start="2007:29" pos:end="2007:30">-&gt;</operator><name pos:start="2007:31" pos:end="2007:32">pc</name></name> <operator pos:start="2007:34" pos:end="2007:34">+</operator> <name pos:start="2007:36" pos:end="2007:41">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="2011:11" pos:end="2343:9">else <block pos:start="2011:16" pos:end="2343:9">{<block_content pos:start="2015:13" pos:end="2341:13">

            <comment type="block" pos:start="2013:13" pos:end="2013:45">/* Data processing immediate.  */</comment>

            <if_stmt pos:start="2015:13" pos:end="2341:13"><if pos:start="2015:13" pos:end="2247:13">if <condition pos:start="2015:16" pos:end="2015:33">(<expr pos:start="2015:17" pos:end="2015:32"><name pos:start="2015:17" pos:end="2015:20">insn</name> <operator pos:start="2015:22" pos:end="2015:22">&amp;</operator> <operator pos:start="2015:24" pos:end="2015:24">(</operator><literal type="number" pos:start="2015:25" pos:end="2015:25">1</literal> <operator pos:start="2015:27" pos:end="2015:28">&lt;&lt;</operator> <literal type="number" pos:start="2015:30" pos:end="2015:31">25</literal><operator pos:start="2015:32" pos:end="2015:32">)</operator></expr>)</condition> <block pos:start="2015:35" pos:end="2247:13">{<block_content pos:start="2017:17" pos:end="2245:17">

                <if_stmt pos:start="2017:17" pos:end="2245:17"><if pos:start="2017:17" pos:end="2175:17">if <condition pos:start="2017:20" pos:end="2017:37">(<expr pos:start="2017:21" pos:end="2017:36"><name pos:start="2017:21" pos:end="2017:24">insn</name> <operator pos:start="2017:26" pos:end="2017:26">&amp;</operator> <operator pos:start="2017:28" pos:end="2017:28">(</operator><literal type="number" pos:start="2017:29" pos:end="2017:29">1</literal> <operator pos:start="2017:31" pos:end="2017:32">&lt;&lt;</operator> <literal type="number" pos:start="2017:34" pos:end="2017:35">24</literal><operator pos:start="2017:36" pos:end="2017:36">)</operator></expr>)</condition> <block pos:start="2017:39" pos:end="2175:17">{<block_content pos:start="2019:21" pos:end="2173:42">

                    <if_stmt pos:start="2019:21" pos:end="2021:40"><if pos:start="2019:21" pos:end="2021:40">if <condition pos:start="2019:24" pos:end="2019:41">(<expr pos:start="2019:25" pos:end="2019:40"><name pos:start="2019:25" pos:end="2019:28">insn</name> <operator pos:start="2019:30" pos:end="2019:30">&amp;</operator> <operator pos:start="2019:32" pos:end="2019:32">(</operator><literal type="number" pos:start="2019:33" pos:end="2019:33">1</literal> <operator pos:start="2019:35" pos:end="2019:36">&lt;&lt;</operator> <literal type="number" pos:start="2019:38" pos:end="2019:39">20</literal><operator pos:start="2019:40" pos:end="2019:40">)</operator></expr>)</condition><block type="pseudo" pos:start="2021:25" pos:end="2021:40"><block_content pos:start="2021:25" pos:end="2021:40">

                        <goto pos:start="2021:25" pos:end="2021:40">goto <name pos:start="2021:30" pos:end="2021:39">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                    <comment type="block" pos:start="2023:21" pos:end="2023:45">/* Bitfield/Saturate.  */</comment>

                    <expr_stmt pos:start="2025:21" pos:end="2025:42"><expr pos:start="2025:21" pos:end="2025:41"><name pos:start="2025:21" pos:end="2025:22">op</name> <operator pos:start="2025:24" pos:end="2025:24">=</operator> <operator pos:start="2025:26" pos:end="2025:26">(</operator><name pos:start="2025:27" pos:end="2025:30">insn</name> <operator pos:start="2025:32" pos:end="2025:33">&gt;&gt;</operator> <literal type="number" pos:start="2025:35" pos:end="2025:36">21</literal><operator pos:start="2025:37" pos:end="2025:37">)</operator> <operator pos:start="2025:39" pos:end="2025:39">&amp;</operator> <literal type="number" pos:start="2025:41" pos:end="2025:41">7</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="2027:21" pos:end="2027:38"><expr pos:start="2027:21" pos:end="2027:37"><name pos:start="2027:21" pos:end="2027:23">imm</name> <operator pos:start="2027:25" pos:end="2027:25">=</operator> <name pos:start="2027:27" pos:end="2027:30">insn</name> <operator pos:start="2027:32" pos:end="2027:32">&amp;</operator> <literal type="number" pos:start="2027:34" pos:end="2027:37">0x1f</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="2029:21" pos:end="2029:70"><expr pos:start="2029:21" pos:end="2029:69"><name pos:start="2029:21" pos:end="2029:25">shift</name> <operator pos:start="2029:27" pos:end="2029:27">=</operator> <operator pos:start="2029:29" pos:end="2029:29">(</operator><operator pos:start="2029:30" pos:end="2029:30">(</operator><name pos:start="2029:31" pos:end="2029:34">insn</name> <operator pos:start="2029:36" pos:end="2029:37">&gt;&gt;</operator> <literal type="number" pos:start="2029:39" pos:end="2029:39">6</literal><operator pos:start="2029:40" pos:end="2029:40">)</operator> <operator pos:start="2029:42" pos:end="2029:42">&amp;</operator> <literal type="number" pos:start="2029:44" pos:end="2029:44">3</literal><operator pos:start="2029:45" pos:end="2029:45">)</operator> <operator pos:start="2029:47" pos:end="2029:47">|</operator> <operator pos:start="2029:49" pos:end="2029:49">(</operator><operator pos:start="2029:50" pos:end="2029:50">(</operator><name pos:start="2029:51" pos:end="2029:54">insn</name> <operator pos:start="2029:56" pos:end="2029:57">&gt;&gt;</operator> <literal type="number" pos:start="2029:59" pos:end="2029:60">10</literal><operator pos:start="2029:61" pos:end="2029:61">)</operator> <operator pos:start="2029:63" pos:end="2029:63">&amp;</operator> <literal type="number" pos:start="2029:65" pos:end="2029:68">0x1c</literal><operator pos:start="2029:69" pos:end="2029:69">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="2031:21" pos:end="2041:21"><if pos:start="2031:21" pos:end="2037:21">if <condition pos:start="2031:24" pos:end="2031:33">(<expr pos:start="2031:25" pos:end="2031:32"><name pos:start="2031:25" pos:end="2031:26">rn</name> <operator pos:start="2031:28" pos:end="2031:29">==</operator> <literal type="number" pos:start="2031:31" pos:end="2031:32">15</literal></expr>)</condition> <block pos:start="2031:35" pos:end="2037:21">{<block_content pos:start="2033:25" pos:end="2035:49">

                        <expr_stmt pos:start="2033:25" pos:end="2033:49"><expr pos:start="2033:25" pos:end="2033:48"><name pos:start="2033:25" pos:end="2033:27">tmp</name> <operator pos:start="2033:29" pos:end="2033:29">=</operator> <call pos:start="2033:31" pos:end="2033:48"><name pos:start="2033:31" pos:end="2033:46">tcg_temp_new_i32</name><argument_list pos:start="2033:47" pos:end="2033:48">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2035:25" pos:end="2035:49"><expr pos:start="2035:25" pos:end="2035:48"><call pos:start="2035:25" pos:end="2035:48"><name pos:start="2035:25" pos:end="2035:40">tcg_gen_movi_i32</name><argument_list pos:start="2035:41" pos:end="2035:48">(<argument pos:start="2035:42" pos:end="2035:44"><expr pos:start="2035:42" pos:end="2035:44"><name pos:start="2035:42" pos:end="2035:44">tmp</name></expr></argument>, <argument pos:start="2035:47" pos:end="2035:47"><expr pos:start="2035:47" pos:end="2035:47"><literal type="number" pos:start="2035:47" pos:end="2035:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2037:23" pos:end="2041:21">else <block pos:start="2037:28" pos:end="2041:21">{<block_content pos:start="2039:25" pos:end="2039:46">

                        <expr_stmt pos:start="2039:25" pos:end="2039:46"><expr pos:start="2039:25" pos:end="2039:45"><name pos:start="2039:25" pos:end="2039:27">tmp</name> <operator pos:start="2039:29" pos:end="2039:29">=</operator> <call pos:start="2039:31" pos:end="2039:45"><name pos:start="2039:31" pos:end="2039:38">load_reg</name><argument_list pos:start="2039:39" pos:end="2039:45">(<argument pos:start="2039:40" pos:end="2039:40"><expr pos:start="2039:40" pos:end="2039:40"><name pos:start="2039:40" pos:end="2039:40">s</name></expr></argument>, <argument pos:start="2039:43" pos:end="2039:44"><expr pos:start="2039:43" pos:end="2039:44"><name pos:start="2039:43" pos:end="2039:44">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <switch pos:start="2043:21" pos:end="2171:21">switch <condition pos:start="2043:28" pos:end="2043:31">(<expr pos:start="2043:29" pos:end="2043:30"><name pos:start="2043:29" pos:end="2043:30">op</name></expr>)</condition> <block pos:start="2043:33" pos:end="2171:21">{<block_content pos:start="2045:21" pos:end="2169:30">

                    <case pos:start="2045:21" pos:end="2045:27">case <expr pos:start="2045:26" pos:end="2045:26"><literal type="number" pos:start="2045:26" pos:end="2045:26">2</literal></expr>:</case> <comment type="block" pos:start="2045:29" pos:end="2045:59">/* Signed bitfield extract.  */</comment>

                        <expr_stmt pos:start="2047:25" pos:end="2047:30"><expr pos:start="2047:25" pos:end="2047:29"><name pos:start="2047:25" pos:end="2047:27">imm</name><operator pos:start="2047:28" pos:end="2047:29">++</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="2049:25" pos:end="2051:44"><if pos:start="2049:25" pos:end="2051:44">if <condition pos:start="2049:28" pos:end="2049:45">(<expr pos:start="2049:29" pos:end="2049:44"><name pos:start="2049:29" pos:end="2049:33">shift</name> <operator pos:start="2049:35" pos:end="2049:35">+</operator> <name pos:start="2049:37" pos:end="2049:39">imm</name> <operator pos:start="2049:41" pos:end="2049:41">&gt;</operator> <literal type="number" pos:start="2049:43" pos:end="2049:44">32</literal></expr>)</condition><block type="pseudo" pos:start="2051:29" pos:end="2051:44"><block_content pos:start="2051:29" pos:end="2051:44">

                            <goto pos:start="2051:29" pos:end="2051:44">goto <name pos:start="2051:34" pos:end="2051:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <if_stmt pos:start="2053:25" pos:end="2057:25"><if pos:start="2053:25" pos:end="2057:25">if <condition pos:start="2053:28" pos:end="2053:37">(<expr pos:start="2053:29" pos:end="2053:36"><name pos:start="2053:29" pos:end="2053:31">imm</name> <operator pos:start="2053:33" pos:end="2053:33">&lt;</operator> <literal type="number" pos:start="2053:35" pos:end="2053:36">32</literal></expr>)</condition> <block pos:start="2053:39" pos:end="2057:25">{<block_content pos:start="2055:29" pos:end="2055:71">

                            <expr_stmt pos:start="2055:29" pos:end="2055:71"><expr pos:start="2055:29" pos:end="2055:70"><call pos:start="2055:29" pos:end="2055:70"><name pos:start="2055:29" pos:end="2055:48">tcg_gen_sextract_i32</name><argument_list pos:start="2055:49" pos:end="2055:70">(<argument pos:start="2055:50" pos:end="2055:52"><expr pos:start="2055:50" pos:end="2055:52"><name pos:start="2055:50" pos:end="2055:52">tmp</name></expr></argument>, <argument pos:start="2055:55" pos:end="2055:57"><expr pos:start="2055:55" pos:end="2055:57"><name pos:start="2055:55" pos:end="2055:57">tmp</name></expr></argument>, <argument pos:start="2055:60" pos:end="2055:64"><expr pos:start="2055:60" pos:end="2055:64"><name pos:start="2055:60" pos:end="2055:64">shift</name></expr></argument>, <argument pos:start="2055:67" pos:end="2055:69"><expr pos:start="2055:67" pos:end="2055:69"><name pos:start="2055:67" pos:end="2055:69">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="2059:25" pos:end="2059:30">break;</break>

                    <case pos:start="2061:21" pos:end="2061:27">case <expr pos:start="2061:26" pos:end="2061:26"><literal type="number" pos:start="2061:26" pos:end="2061:26">6</literal></expr>:</case> <comment type="block" pos:start="2061:29" pos:end="2061:61">/* Unsigned bitfield extract.  */</comment>

                        <expr_stmt pos:start="2063:25" pos:end="2063:30"><expr pos:start="2063:25" pos:end="2063:29"><name pos:start="2063:25" pos:end="2063:27">imm</name><operator pos:start="2063:28" pos:end="2063:29">++</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="2065:25" pos:end="2067:44"><if pos:start="2065:25" pos:end="2067:44">if <condition pos:start="2065:28" pos:end="2065:45">(<expr pos:start="2065:29" pos:end="2065:44"><name pos:start="2065:29" pos:end="2065:33">shift</name> <operator pos:start="2065:35" pos:end="2065:35">+</operator> <name pos:start="2065:37" pos:end="2065:39">imm</name> <operator pos:start="2065:41" pos:end="2065:41">&gt;</operator> <literal type="number" pos:start="2065:43" pos:end="2065:44">32</literal></expr>)</condition><block type="pseudo" pos:start="2067:29" pos:end="2067:44"><block_content pos:start="2067:29" pos:end="2067:44">

                            <goto pos:start="2067:29" pos:end="2067:44">goto <name pos:start="2067:34" pos:end="2067:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <if_stmt pos:start="2069:25" pos:end="2073:25"><if pos:start="2069:25" pos:end="2073:25">if <condition pos:start="2069:28" pos:end="2069:37">(<expr pos:start="2069:29" pos:end="2069:36"><name pos:start="2069:29" pos:end="2069:31">imm</name> <operator pos:start="2069:33" pos:end="2069:33">&lt;</operator> <literal type="number" pos:start="2069:35" pos:end="2069:36">32</literal></expr>)</condition> <block pos:start="2069:39" pos:end="2073:25">{<block_content pos:start="2071:29" pos:end="2071:70">

                            <expr_stmt pos:start="2071:29" pos:end="2071:70"><expr pos:start="2071:29" pos:end="2071:69"><call pos:start="2071:29" pos:end="2071:69"><name pos:start="2071:29" pos:end="2071:47">tcg_gen_extract_i32</name><argument_list pos:start="2071:48" pos:end="2071:69">(<argument pos:start="2071:49" pos:end="2071:51"><expr pos:start="2071:49" pos:end="2071:51"><name pos:start="2071:49" pos:end="2071:51">tmp</name></expr></argument>, <argument pos:start="2071:54" pos:end="2071:56"><expr pos:start="2071:54" pos:end="2071:56"><name pos:start="2071:54" pos:end="2071:56">tmp</name></expr></argument>, <argument pos:start="2071:59" pos:end="2071:63"><expr pos:start="2071:59" pos:end="2071:63"><name pos:start="2071:59" pos:end="2071:63">shift</name></expr></argument>, <argument pos:start="2071:66" pos:end="2071:68"><expr pos:start="2071:66" pos:end="2071:68"><name pos:start="2071:66" pos:end="2071:68">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="2075:25" pos:end="2075:30">break;</break>

                    <case pos:start="2077:21" pos:end="2077:27">case <expr pos:start="2077:26" pos:end="2077:26"><literal type="number" pos:start="2077:26" pos:end="2077:26">3</literal></expr>:</case> <comment type="block" pos:start="2077:29" pos:end="2077:57">/* Bitfield insert/clear.  */</comment>

                        <if_stmt pos:start="2079:25" pos:end="2081:44"><if pos:start="2079:25" pos:end="2081:44">if <condition pos:start="2079:28" pos:end="2079:40">(<expr pos:start="2079:29" pos:end="2079:39"><name pos:start="2079:29" pos:end="2079:31">imm</name> <operator pos:start="2079:33" pos:end="2079:33">&lt;</operator> <name pos:start="2079:35" pos:end="2079:39">shift</name></expr>)</condition><block type="pseudo" pos:start="2081:29" pos:end="2081:44"><block_content pos:start="2081:29" pos:end="2081:44">

                            <goto pos:start="2081:29" pos:end="2081:44">goto <name pos:start="2081:34" pos:end="2081:43">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="2083:25" pos:end="2083:46"><expr pos:start="2083:25" pos:end="2083:45"><name pos:start="2083:25" pos:end="2083:27">imm</name> <operator pos:start="2083:29" pos:end="2083:29">=</operator> <name pos:start="2083:31" pos:end="2083:33">imm</name> <operator pos:start="2083:35" pos:end="2083:35">+</operator> <literal type="number" pos:start="2083:37" pos:end="2083:39">1</literal> <operator pos:start="2083:39" pos:end="2083:39">-</operator> <name pos:start="2083:41" pos:end="2083:45">shift</name></expr>;</expr_stmt>

                        <if_stmt pos:start="2085:25" pos:end="2093:25"><if pos:start="2085:25" pos:end="2093:25">if <condition pos:start="2085:28" pos:end="2085:38">(<expr pos:start="2085:29" pos:end="2085:37"><name pos:start="2085:29" pos:end="2085:31">imm</name> <operator pos:start="2085:33" pos:end="2085:34">!=</operator> <literal type="number" pos:start="2085:36" pos:end="2085:37">32</literal></expr>)</condition> <block pos:start="2085:40" pos:end="2093:25">{<block_content pos:start="2087:29" pos:end="2091:52">

                            <expr_stmt pos:start="2087:29" pos:end="2087:51"><expr pos:start="2087:29" pos:end="2087:50"><name pos:start="2087:29" pos:end="2087:32">tmp2</name> <operator pos:start="2087:34" pos:end="2087:34">=</operator> <call pos:start="2087:36" pos:end="2087:50"><name pos:start="2087:36" pos:end="2087:43">load_reg</name><argument_list pos:start="2087:44" pos:end="2087:50">(<argument pos:start="2087:45" pos:end="2087:45"><expr pos:start="2087:45" pos:end="2087:45"><name pos:start="2087:45" pos:end="2087:45">s</name></expr></argument>, <argument pos:start="2087:48" pos:end="2087:49"><expr pos:start="2087:48" pos:end="2087:49"><name pos:start="2087:48" pos:end="2087:49">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2089:29" pos:end="2089:76"><expr pos:start="2089:29" pos:end="2089:75"><call pos:start="2089:29" pos:end="2089:75"><name pos:start="2089:29" pos:end="2089:47">tcg_gen_deposit_i32</name><argument_list pos:start="2089:48" pos:end="2089:75">(<argument pos:start="2089:49" pos:end="2089:51"><expr pos:start="2089:49" pos:end="2089:51"><name pos:start="2089:49" pos:end="2089:51">tmp</name></expr></argument>, <argument pos:start="2089:54" pos:end="2089:57"><expr pos:start="2089:54" pos:end="2089:57"><name pos:start="2089:54" pos:end="2089:57">tmp2</name></expr></argument>, <argument pos:start="2089:60" pos:end="2089:62"><expr pos:start="2089:60" pos:end="2089:62"><name pos:start="2089:60" pos:end="2089:62">tmp</name></expr></argument>, <argument pos:start="2089:65" pos:end="2089:69"><expr pos:start="2089:65" pos:end="2089:69"><name pos:start="2089:65" pos:end="2089:69">shift</name></expr></argument>, <argument pos:start="2089:72" pos:end="2089:74"><expr pos:start="2089:72" pos:end="2089:74"><name pos:start="2089:72" pos:end="2089:74">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2091:29" pos:end="2091:52"><expr pos:start="2091:29" pos:end="2091:51"><call pos:start="2091:29" pos:end="2091:51"><name pos:start="2091:29" pos:end="2091:45">tcg_temp_free_i32</name><argument_list pos:start="2091:46" pos:end="2091:51">(<argument pos:start="2091:47" pos:end="2091:50"><expr pos:start="2091:47" pos:end="2091:50"><name pos:start="2091:47" pos:end="2091:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <break pos:start="2095:25" pos:end="2095:30">break;</break>

                    <case pos:start="2097:21" pos:end="2097:27">case <expr pos:start="2097:26" pos:end="2097:26"><literal type="number" pos:start="2097:26" pos:end="2097:26">7</literal></expr>:</case>

                        <goto pos:start="2099:25" pos:end="2099:40">goto <name pos:start="2099:30" pos:end="2099:39">illegal_op</name>;</goto>

                    <default pos:start="2101:21" pos:end="2101:28">default:</default> <comment type="block" pos:start="2101:30" pos:end="2101:45">/* Saturate.  */</comment>

                        <if_stmt pos:start="2103:25" pos:end="2113:25"><if pos:start="2103:25" pos:end="2113:25">if <condition pos:start="2103:28" pos:end="2103:34">(<expr pos:start="2103:29" pos:end="2103:33"><name pos:start="2103:29" pos:end="2103:33">shift</name></expr>)</condition> <block pos:start="2103:36" pos:end="2113:25">{<block_content pos:start="2105:29" pos:end="2111:66">

                            <if_stmt pos:start="2105:29" pos:end="2111:66"><if pos:start="2105:29" pos:end="2107:66">if <condition pos:start="2105:32" pos:end="2105:39">(<expr pos:start="2105:33" pos:end="2105:38"><name pos:start="2105:33" pos:end="2105:34">op</name> <operator pos:start="2105:36" pos:end="2105:36">&amp;</operator> <literal type="number" pos:start="2105:38" pos:end="2105:38">1</literal></expr>)</condition><block type="pseudo" pos:start="2107:33" pos:end="2107:66"><block_content pos:start="2107:33" pos:end="2107:66">

                                <expr_stmt pos:start="2107:33" pos:end="2107:66"><expr pos:start="2107:33" pos:end="2107:65"><call pos:start="2107:33" pos:end="2107:65"><name pos:start="2107:33" pos:end="2107:48">tcg_gen_sari_i32</name><argument_list pos:start="2107:49" pos:end="2107:65">(<argument pos:start="2107:50" pos:end="2107:52"><expr pos:start="2107:50" pos:end="2107:52"><name pos:start="2107:50" pos:end="2107:52">tmp</name></expr></argument>, <argument pos:start="2107:55" pos:end="2107:57"><expr pos:start="2107:55" pos:end="2107:57"><name pos:start="2107:55" pos:end="2107:57">tmp</name></expr></argument>, <argument pos:start="2107:60" pos:end="2107:64"><expr pos:start="2107:60" pos:end="2107:64"><name pos:start="2107:60" pos:end="2107:64">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="2109:29" pos:end="2111:66">else<block type="pseudo" pos:start="2111:33" pos:end="2111:66"><block_content pos:start="2111:33" pos:end="2111:66">

                                <expr_stmt pos:start="2111:33" pos:end="2111:66"><expr pos:start="2111:33" pos:end="2111:65"><call pos:start="2111:33" pos:end="2111:65"><name pos:start="2111:33" pos:end="2111:48">tcg_gen_shli_i32</name><argument_list pos:start="2111:49" pos:end="2111:65">(<argument pos:start="2111:50" pos:end="2111:52"><expr pos:start="2111:50" pos:end="2111:52"><name pos:start="2111:50" pos:end="2111:52">tmp</name></expr></argument>, <argument pos:start="2111:55" pos:end="2111:57"><expr pos:start="2111:55" pos:end="2111:57"><name pos:start="2111:55" pos:end="2111:57">tmp</name></expr></argument>, <argument pos:start="2111:60" pos:end="2111:64"><expr pos:start="2111:60" pos:end="2111:64"><name pos:start="2111:60" pos:end="2111:64">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="2115:25" pos:end="2115:50"><expr pos:start="2115:25" pos:end="2115:49"><name pos:start="2115:25" pos:end="2115:28">tmp2</name> <operator pos:start="2115:30" pos:end="2115:30">=</operator> <call pos:start="2115:32" pos:end="2115:49"><name pos:start="2115:32" pos:end="2115:44">tcg_const_i32</name><argument_list pos:start="2115:45" pos:end="2115:49">(<argument pos:start="2115:46" pos:end="2115:48"><expr pos:start="2115:46" pos:end="2115:48"><name pos:start="2115:46" pos:end="2115:48">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2117:25" pos:end="2165:25"><if pos:start="2117:25" pos:end="2141:25">if <condition pos:start="2117:28" pos:end="2117:35">(<expr pos:start="2117:29" pos:end="2117:34"><name pos:start="2117:29" pos:end="2117:30">op</name> <operator pos:start="2117:32" pos:end="2117:32">&amp;</operator> <literal type="number" pos:start="2117:34" pos:end="2117:34">4</literal></expr>)</condition> <block pos:start="2117:37" pos:end="2141:25">{<block_content pos:start="2121:29" pos:end="2139:29">

                            <comment type="block" pos:start="2119:29" pos:end="2119:44">/* Unsigned.  */</comment>

                            <if_stmt pos:start="2121:29" pos:end="2139:29"><if pos:start="2121:29" pos:end="2135:29">if <condition pos:start="2121:32" pos:end="2121:55">(<expr pos:start="2121:33" pos:end="2121:54"><operator pos:start="2121:33" pos:end="2121:33">(</operator><name pos:start="2121:34" pos:end="2121:35">op</name> <operator pos:start="2121:37" pos:end="2121:37">&amp;</operator> <literal type="number" pos:start="2121:39" pos:end="2121:39">1</literal><operator pos:start="2121:40" pos:end="2121:40">)</operator> <operator pos:start="2121:42" pos:end="2121:43">&amp;&amp;</operator> <name pos:start="2121:45" pos:end="2121:49">shift</name> <operator pos:start="2121:51" pos:end="2121:52">==</operator> <literal type="number" pos:start="2121:54" pos:end="2121:54">0</literal></expr>)</condition> <block pos:start="2121:57" pos:end="2135:29">{<block_content pos:start="2123:33" pos:end="2133:75">

                                <if_stmt pos:start="2123:33" pos:end="2131:33"><if pos:start="2123:33" pos:end="2131:33">if <condition pos:start="2123:36" pos:end="2123:78">(<expr pos:start="2123:37" pos:end="2123:77"><operator pos:start="2123:37" pos:end="2123:37">!</operator><call pos:start="2123:38" pos:end="2123:77"><name pos:start="2123:38" pos:end="2123:51">arm_dc_feature</name><argument_list pos:start="2123:52" pos:end="2123:77">(<argument pos:start="2123:53" pos:end="2123:53"><expr pos:start="2123:53" pos:end="2123:53"><name pos:start="2123:53" pos:end="2123:53">s</name></expr></argument>, <argument pos:start="2123:56" pos:end="2123:76"><expr pos:start="2123:56" pos:end="2123:76"><name pos:start="2123:56" pos:end="2123:76">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2123:80" pos:end="2131:33">{<block_content pos:start="2125:37" pos:end="2129:52">

                                    <expr_stmt pos:start="2125:37" pos:end="2125:59"><expr pos:start="2125:37" pos:end="2125:58"><call pos:start="2125:37" pos:end="2125:58"><name pos:start="2125:37" pos:end="2125:53">tcg_temp_free_i32</name><argument_list pos:start="2125:54" pos:end="2125:58">(<argument pos:start="2125:55" pos:end="2125:57"><expr pos:start="2125:55" pos:end="2125:57"><name pos:start="2125:55" pos:end="2125:57">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2127:37" pos:end="2127:60"><expr pos:start="2127:37" pos:end="2127:59"><call pos:start="2127:37" pos:end="2127:59"><name pos:start="2127:37" pos:end="2127:53">tcg_temp_free_i32</name><argument_list pos:start="2127:54" pos:end="2127:59">(<argument pos:start="2127:55" pos:end="2127:58"><expr pos:start="2127:55" pos:end="2127:58"><name pos:start="2127:55" pos:end="2127:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <goto pos:start="2129:37" pos:end="2129:52">goto <name pos:start="2129:42" pos:end="2129:51">illegal_op</name>;</goto>

                                </block_content>}</block></if></if_stmt>

                                <expr_stmt pos:start="2133:33" pos:end="2133:75"><expr pos:start="2133:33" pos:end="2133:74"><call pos:start="2133:33" pos:end="2133:74"><name pos:start="2133:33" pos:end="2133:49">gen_helper_usat16</name><argument_list pos:start="2133:50" pos:end="2133:74">(<argument pos:start="2133:51" pos:end="2133:53"><expr pos:start="2133:51" pos:end="2133:53"><name pos:start="2133:51" pos:end="2133:53">tmp</name></expr></argument>, <argument pos:start="2133:56" pos:end="2133:62"><expr pos:start="2133:56" pos:end="2133:62"><name pos:start="2133:56" pos:end="2133:62">cpu_env</name></expr></argument>, <argument pos:start="2133:65" pos:end="2133:67"><expr pos:start="2133:65" pos:end="2133:67"><name pos:start="2133:65" pos:end="2133:67">tmp</name></expr></argument>, <argument pos:start="2133:70" pos:end="2133:73"><expr pos:start="2133:70" pos:end="2133:73"><name pos:start="2133:70" pos:end="2133:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="2135:31" pos:end="2139:29">else <block pos:start="2135:36" pos:end="2139:29">{<block_content pos:start="2137:33" pos:end="2137:73">

                                <expr_stmt pos:start="2137:33" pos:end="2137:73"><expr pos:start="2137:33" pos:end="2137:72"><call pos:start="2137:33" pos:end="2137:72"><name pos:start="2137:33" pos:end="2137:47">gen_helper_usat</name><argument_list pos:start="2137:48" pos:end="2137:72">(<argument pos:start="2137:49" pos:end="2137:51"><expr pos:start="2137:49" pos:end="2137:51"><name pos:start="2137:49" pos:end="2137:51">tmp</name></expr></argument>, <argument pos:start="2137:54" pos:end="2137:60"><expr pos:start="2137:54" pos:end="2137:60"><name pos:start="2137:54" pos:end="2137:60">cpu_env</name></expr></argument>, <argument pos:start="2137:63" pos:end="2137:65"><expr pos:start="2137:63" pos:end="2137:65"><name pos:start="2137:63" pos:end="2137:65">tmp</name></expr></argument>, <argument pos:start="2137:68" pos:end="2137:71"><expr pos:start="2137:68" pos:end="2137:71"><name pos:start="2137:68" pos:end="2137:71">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="2141:27" pos:end="2165:25">else <block pos:start="2141:32" pos:end="2165:25">{<block_content pos:start="2145:29" pos:end="2163:29">

                            <comment type="block" pos:start="2143:29" pos:end="2143:42">/* Signed.  */</comment>

                            <if_stmt pos:start="2145:29" pos:end="2163:29"><if pos:start="2145:29" pos:end="2159:29">if <condition pos:start="2145:32" pos:end="2145:55">(<expr pos:start="2145:33" pos:end="2145:54"><operator pos:start="2145:33" pos:end="2145:33">(</operator><name pos:start="2145:34" pos:end="2145:35">op</name> <operator pos:start="2145:37" pos:end="2145:37">&amp;</operator> <literal type="number" pos:start="2145:39" pos:end="2145:39">1</literal><operator pos:start="2145:40" pos:end="2145:40">)</operator> <operator pos:start="2145:42" pos:end="2145:43">&amp;&amp;</operator> <name pos:start="2145:45" pos:end="2145:49">shift</name> <operator pos:start="2145:51" pos:end="2145:52">==</operator> <literal type="number" pos:start="2145:54" pos:end="2145:54">0</literal></expr>)</condition> <block pos:start="2145:57" pos:end="2159:29">{<block_content pos:start="2147:33" pos:end="2157:75">

                                <if_stmt pos:start="2147:33" pos:end="2155:33"><if pos:start="2147:33" pos:end="2155:33">if <condition pos:start="2147:36" pos:end="2147:78">(<expr pos:start="2147:37" pos:end="2147:77"><operator pos:start="2147:37" pos:end="2147:37">!</operator><call pos:start="2147:38" pos:end="2147:77"><name pos:start="2147:38" pos:end="2147:51">arm_dc_feature</name><argument_list pos:start="2147:52" pos:end="2147:77">(<argument pos:start="2147:53" pos:end="2147:53"><expr pos:start="2147:53" pos:end="2147:53"><name pos:start="2147:53" pos:end="2147:53">s</name></expr></argument>, <argument pos:start="2147:56" pos:end="2147:76"><expr pos:start="2147:56" pos:end="2147:76"><name pos:start="2147:56" pos:end="2147:76">ARM_FEATURE_THUMB_DSP</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2147:80" pos:end="2155:33">{<block_content pos:start="2149:37" pos:end="2153:52">

                                    <expr_stmt pos:start="2149:37" pos:end="2149:59"><expr pos:start="2149:37" pos:end="2149:58"><call pos:start="2149:37" pos:end="2149:58"><name pos:start="2149:37" pos:end="2149:53">tcg_temp_free_i32</name><argument_list pos:start="2149:54" pos:end="2149:58">(<argument pos:start="2149:55" pos:end="2149:57"><expr pos:start="2149:55" pos:end="2149:57"><name pos:start="2149:55" pos:end="2149:57">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="2151:37" pos:end="2151:60"><expr pos:start="2151:37" pos:end="2151:59"><call pos:start="2151:37" pos:end="2151:59"><name pos:start="2151:37" pos:end="2151:53">tcg_temp_free_i32</name><argument_list pos:start="2151:54" pos:end="2151:59">(<argument pos:start="2151:55" pos:end="2151:58"><expr pos:start="2151:55" pos:end="2151:58"><name pos:start="2151:55" pos:end="2151:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <goto pos:start="2153:37" pos:end="2153:52">goto <name pos:start="2153:42" pos:end="2153:51">illegal_op</name>;</goto>

                                </block_content>}</block></if></if_stmt>

                                <expr_stmt pos:start="2157:33" pos:end="2157:75"><expr pos:start="2157:33" pos:end="2157:74"><call pos:start="2157:33" pos:end="2157:74"><name pos:start="2157:33" pos:end="2157:49">gen_helper_ssat16</name><argument_list pos:start="2157:50" pos:end="2157:74">(<argument pos:start="2157:51" pos:end="2157:53"><expr pos:start="2157:51" pos:end="2157:53"><name pos:start="2157:51" pos:end="2157:53">tmp</name></expr></argument>, <argument pos:start="2157:56" pos:end="2157:62"><expr pos:start="2157:56" pos:end="2157:62"><name pos:start="2157:56" pos:end="2157:62">cpu_env</name></expr></argument>, <argument pos:start="2157:65" pos:end="2157:67"><expr pos:start="2157:65" pos:end="2157:67"><name pos:start="2157:65" pos:end="2157:67">tmp</name></expr></argument>, <argument pos:start="2157:70" pos:end="2157:73"><expr pos:start="2157:70" pos:end="2157:73"><name pos:start="2157:70" pos:end="2157:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="2159:31" pos:end="2163:29">else <block pos:start="2159:36" pos:end="2163:29">{<block_content pos:start="2161:33" pos:end="2161:73">

                                <expr_stmt pos:start="2161:33" pos:end="2161:73"><expr pos:start="2161:33" pos:end="2161:72"><call pos:start="2161:33" pos:end="2161:72"><name pos:start="2161:33" pos:end="2161:47">gen_helper_ssat</name><argument_list pos:start="2161:48" pos:end="2161:72">(<argument pos:start="2161:49" pos:end="2161:51"><expr pos:start="2161:49" pos:end="2161:51"><name pos:start="2161:49" pos:end="2161:51">tmp</name></expr></argument>, <argument pos:start="2161:54" pos:end="2161:60"><expr pos:start="2161:54" pos:end="2161:60"><name pos:start="2161:54" pos:end="2161:60">cpu_env</name></expr></argument>, <argument pos:start="2161:63" pos:end="2161:65"><expr pos:start="2161:63" pos:end="2161:65"><name pos:start="2161:63" pos:end="2161:65">tmp</name></expr></argument>, <argument pos:start="2161:68" pos:end="2161:71"><expr pos:start="2161:68" pos:end="2161:71"><name pos:start="2161:68" pos:end="2161:71">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2167:25" pos:end="2167:48"><expr pos:start="2167:25" pos:end="2167:47"><call pos:start="2167:25" pos:end="2167:47"><name pos:start="2167:25" pos:end="2167:41">tcg_temp_free_i32</name><argument_list pos:start="2167:42" pos:end="2167:47">(<argument pos:start="2167:43" pos:end="2167:46"><expr pos:start="2167:43" pos:end="2167:46"><name pos:start="2167:43" pos:end="2167:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2169:25" pos:end="2169:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="2173:21" pos:end="2173:42"><expr pos:start="2173:21" pos:end="2173:41"><call pos:start="2173:21" pos:end="2173:41"><name pos:start="2173:21" pos:end="2173:29">store_reg</name><argument_list pos:start="2173:30" pos:end="2173:41">(<argument pos:start="2173:31" pos:end="2173:31"><expr pos:start="2173:31" pos:end="2173:31"><name pos:start="2173:31" pos:end="2173:31">s</name></expr></argument>, <argument pos:start="2173:34" pos:end="2173:35"><expr pos:start="2173:34" pos:end="2173:35"><name pos:start="2173:34" pos:end="2173:35">rd</name></expr></argument>, <argument pos:start="2173:38" pos:end="2173:40"><expr pos:start="2173:38" pos:end="2173:40"><name pos:start="2173:38" pos:end="2173:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2175:19" pos:end="2245:17">else <block pos:start="2175:24" pos:end="2245:17">{<block_content pos:start="2177:21" pos:end="2243:42">

                    <expr_stmt pos:start="2177:21" pos:end="2179:67"><expr pos:start="2177:21" pos:end="2179:66"><name pos:start="2177:21" pos:end="2177:23">imm</name> <operator pos:start="2177:25" pos:end="2177:25">=</operator> <operator pos:start="2177:27" pos:end="2177:27">(</operator><operator pos:start="2177:28" pos:end="2177:28">(</operator><name pos:start="2177:29" pos:end="2177:32">insn</name> <operator pos:start="2177:34" pos:end="2177:34">&amp;</operator> <literal type="number" pos:start="2177:36" pos:end="2177:45">0x04000000</literal><operator pos:start="2177:46" pos:end="2177:46">)</operator> <operator pos:start="2177:48" pos:end="2177:49">&gt;&gt;</operator> <literal type="number" pos:start="2177:51" pos:end="2177:52">15</literal><operator pos:start="2177:53" pos:end="2177:53">)</operator>

                          <operator pos:start="2179:27" pos:end="2179:27">|</operator> <operator pos:start="2179:29" pos:end="2179:29">(</operator><operator pos:start="2179:30" pos:end="2179:30">(</operator><name pos:start="2179:31" pos:end="2179:34">insn</name> <operator pos:start="2179:36" pos:end="2179:36">&amp;</operator> <literal type="number" pos:start="2179:38" pos:end="2179:43">0x7000</literal><operator pos:start="2179:44" pos:end="2179:44">)</operator> <operator pos:start="2179:46" pos:end="2179:47">&gt;&gt;</operator> <literal type="number" pos:start="2179:49" pos:end="2179:49">4</literal><operator pos:start="2179:50" pos:end="2179:50">)</operator> <operator pos:start="2179:52" pos:end="2179:52">|</operator> <operator pos:start="2179:54" pos:end="2179:54">(</operator><name pos:start="2179:55" pos:end="2179:58">insn</name> <operator pos:start="2179:60" pos:end="2179:60">&amp;</operator> <literal type="number" pos:start="2179:62" pos:end="2179:65">0xff</literal><operator pos:start="2179:66" pos:end="2179:66">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="2181:21" pos:end="2241:21"><if pos:start="2181:21" pos:end="2207:21">if <condition pos:start="2181:24" pos:end="2181:41">(<expr pos:start="2181:25" pos:end="2181:40"><name pos:start="2181:25" pos:end="2181:28">insn</name> <operator pos:start="2181:30" pos:end="2181:30">&amp;</operator> <operator pos:start="2181:32" pos:end="2181:32">(</operator><literal type="number" pos:start="2181:33" pos:end="2181:33">1</literal> <operator pos:start="2181:35" pos:end="2181:36">&lt;&lt;</operator> <literal type="number" pos:start="2181:38" pos:end="2181:39">22</literal><operator pos:start="2181:40" pos:end="2181:40">)</operator></expr>)</condition> <block pos:start="2181:43" pos:end="2207:21">{<block_content pos:start="2185:25" pos:end="2205:25">

                        <comment type="block" pos:start="2183:25" pos:end="2183:48">/* 16-bit immediate.  */</comment>

                        <expr_stmt pos:start="2185:25" pos:end="2185:52"><expr pos:start="2185:25" pos:end="2185:51"><name pos:start="2185:25" pos:end="2185:27">imm</name> <operator pos:start="2185:29" pos:end="2185:30">|=</operator> <operator pos:start="2185:32" pos:end="2185:32">(</operator><name pos:start="2185:33" pos:end="2185:36">insn</name> <operator pos:start="2185:38" pos:end="2185:39">&gt;&gt;</operator> <literal type="number" pos:start="2185:41" pos:end="2185:41">4</literal><operator pos:start="2185:42" pos:end="2185:42">)</operator> <operator pos:start="2185:44" pos:end="2185:44">&amp;</operator> <literal type="number" pos:start="2185:46" pos:end="2185:51">0xf000</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="2187:25" pos:end="2205:25"><if pos:start="2187:25" pos:end="2197:25">if <condition pos:start="2187:28" pos:end="2187:45">(<expr pos:start="2187:29" pos:end="2187:44"><name pos:start="2187:29" pos:end="2187:32">insn</name> <operator pos:start="2187:34" pos:end="2187:34">&amp;</operator> <operator pos:start="2187:36" pos:end="2187:36">(</operator><literal type="number" pos:start="2187:37" pos:end="2187:37">1</literal> <operator pos:start="2187:39" pos:end="2187:40">&lt;&lt;</operator> <literal type="number" pos:start="2187:42" pos:end="2187:43">23</literal><operator pos:start="2187:44" pos:end="2187:44">)</operator></expr>)</condition> <block pos:start="2187:47" pos:end="2197:25">{<block_content pos:start="2191:29" pos:end="2195:65">

                            <comment type="block" pos:start="2189:29" pos:end="2189:38">/* movt */</comment>

                            <expr_stmt pos:start="2191:29" pos:end="2191:50"><expr pos:start="2191:29" pos:end="2191:49"><name pos:start="2191:29" pos:end="2191:31">tmp</name> <operator pos:start="2191:33" pos:end="2191:33">=</operator> <call pos:start="2191:35" pos:end="2191:49"><name pos:start="2191:35" pos:end="2191:42">load_reg</name><argument_list pos:start="2191:43" pos:end="2191:49">(<argument pos:start="2191:44" pos:end="2191:44"><expr pos:start="2191:44" pos:end="2191:44"><name pos:start="2191:44" pos:end="2191:44">s</name></expr></argument>, <argument pos:start="2191:47" pos:end="2191:48"><expr pos:start="2191:47" pos:end="2191:48"><name pos:start="2191:47" pos:end="2191:48">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2193:29" pos:end="2193:57"><expr pos:start="2193:29" pos:end="2193:56"><call pos:start="2193:29" pos:end="2193:56"><name pos:start="2193:29" pos:end="2193:46">tcg_gen_ext16u_i32</name><argument_list pos:start="2193:47" pos:end="2193:56">(<argument pos:start="2193:48" pos:end="2193:50"><expr pos:start="2193:48" pos:end="2193:50"><name pos:start="2193:48" pos:end="2193:50">tmp</name></expr></argument>, <argument pos:start="2193:53" pos:end="2193:55"><expr pos:start="2193:53" pos:end="2193:55"><name pos:start="2193:53" pos:end="2193:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2195:29" pos:end="2195:65"><expr pos:start="2195:29" pos:end="2195:64"><call pos:start="2195:29" pos:end="2195:64"><name pos:start="2195:29" pos:end="2195:43">tcg_gen_ori_i32</name><argument_list pos:start="2195:44" pos:end="2195:64">(<argument pos:start="2195:45" pos:end="2195:47"><expr pos:start="2195:45" pos:end="2195:47"><name pos:start="2195:45" pos:end="2195:47">tmp</name></expr></argument>, <argument pos:start="2195:50" pos:end="2195:52"><expr pos:start="2195:50" pos:end="2195:52"><name pos:start="2195:50" pos:end="2195:52">tmp</name></expr></argument>, <argument pos:start="2195:55" pos:end="2195:63"><expr pos:start="2195:55" pos:end="2195:63"><name pos:start="2195:55" pos:end="2195:57">imm</name> <operator pos:start="2195:59" pos:end="2195:60">&lt;&lt;</operator> <literal type="number" pos:start="2195:62" pos:end="2195:63">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2197:27" pos:end="2205:25">else <block pos:start="2197:32" pos:end="2205:25">{<block_content pos:start="2201:29" pos:end="2203:55">

                            <comment type="block" pos:start="2199:29" pos:end="2199:38">/* movw */</comment>

                            <expr_stmt pos:start="2201:29" pos:end="2201:53"><expr pos:start="2201:29" pos:end="2201:52"><name pos:start="2201:29" pos:end="2201:31">tmp</name> <operator pos:start="2201:33" pos:end="2201:33">=</operator> <call pos:start="2201:35" pos:end="2201:52"><name pos:start="2201:35" pos:end="2201:50">tcg_temp_new_i32</name><argument_list pos:start="2201:51" pos:end="2201:52">()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2203:29" pos:end="2203:55"><expr pos:start="2203:29" pos:end="2203:54"><call pos:start="2203:29" pos:end="2203:54"><name pos:start="2203:29" pos:end="2203:44">tcg_gen_movi_i32</name><argument_list pos:start="2203:45" pos:end="2203:54">(<argument pos:start="2203:46" pos:end="2203:48"><expr pos:start="2203:46" pos:end="2203:48"><name pos:start="2203:46" pos:end="2203:48">tmp</name></expr></argument>, <argument pos:start="2203:51" pos:end="2203:53"><expr pos:start="2203:51" pos:end="2203:53"><name pos:start="2203:51" pos:end="2203:53">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="2207:23" pos:end="2241:21">else <block pos:start="2207:28" pos:end="2241:21">{<block_content pos:start="2211:25" pos:end="2239:25">

                        <comment type="block" pos:start="2209:25" pos:end="2209:56">/* Add/sub 12-bit immediate.  */</comment>

                        <if_stmt pos:start="2211:25" pos:end="2239:25"><if pos:start="2211:25" pos:end="2227:25">if <condition pos:start="2211:28" pos:end="2211:37">(<expr pos:start="2211:29" pos:end="2211:36"><name pos:start="2211:29" pos:end="2211:30">rn</name> <operator pos:start="2211:32" pos:end="2211:33">==</operator> <literal type="number" pos:start="2211:35" pos:end="2211:36">15</literal></expr>)</condition> <block pos:start="2211:39" pos:end="2227:25">{<block_content pos:start="2213:29" pos:end="2225:58">

                            <expr_stmt pos:start="2213:29" pos:end="2213:58"><expr pos:start="2213:29" pos:end="2213:57"><name pos:start="2213:29" pos:end="2213:34">offset</name> <operator pos:start="2213:36" pos:end="2213:36">=</operator> <name pos:start="2213:38" pos:end="2213:42"><name pos:start="2213:38" pos:end="2213:38">s</name><operator pos:start="2213:39" pos:end="2213:40">-&gt;</operator><name pos:start="2213:41" pos:end="2213:42">pc</name></name> <operator pos:start="2213:44" pos:end="2213:44">&amp;</operator> <operator pos:start="2213:46" pos:end="2213:46">~</operator><operator pos:start="2213:47" pos:end="2213:47">(</operator><name pos:start="2213:48" pos:end="2213:55">uint32_t</name><operator pos:start="2213:56" pos:end="2213:56">)</operator><literal type="number" pos:start="2213:57" pos:end="2213:57">3</literal></expr>;</expr_stmt>

                            <if_stmt pos:start="2215:29" pos:end="2221:46"><if pos:start="2215:29" pos:end="2217:46">if <condition pos:start="2215:32" pos:end="2215:49">(<expr pos:start="2215:33" pos:end="2215:48"><name pos:start="2215:33" pos:end="2215:36">insn</name> <operator pos:start="2215:38" pos:end="2215:38">&amp;</operator> <operator pos:start="2215:40" pos:end="2215:40">(</operator><literal type="number" pos:start="2215:41" pos:end="2215:41">1</literal> <operator pos:start="2215:43" pos:end="2215:44">&lt;&lt;</operator> <literal type="number" pos:start="2215:46" pos:end="2215:47">23</literal><operator pos:start="2215:48" pos:end="2215:48">)</operator></expr>)</condition><block type="pseudo" pos:start="2217:33" pos:end="2217:46"><block_content pos:start="2217:33" pos:end="2217:46">

                                <expr_stmt pos:start="2217:33" pos:end="2217:46"><expr pos:start="2217:33" pos:end="2217:45"><name pos:start="2217:33" pos:end="2217:38">offset</name> <operator pos:start="2217:40" pos:end="2217:41">-=</operator> <name pos:start="2217:43" pos:end="2217:45">imm</name></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="2219:29" pos:end="2221:46">else<block type="pseudo" pos:start="2221:33" pos:end="2221:46"><block_content pos:start="2221:33" pos:end="2221:46">

                                <expr_stmt pos:start="2221:33" pos:end="2221:46"><expr pos:start="2221:33" pos:end="2221:45"><name pos:start="2221:33" pos:end="2221:38">offset</name> <operator pos:start="2221:40" pos:end="2221:41">+=</operator> <name pos:start="2221:43" pos:end="2221:45">imm</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <expr_stmt pos:start="2223:29" pos:end="2223:53"><expr pos:start="2223:29" pos:end="2223:52"><name pos:start="2223:29" pos:end="2223:31">tmp</name> <operator pos:start="2223:33" pos:end="2223:33">=</operator> <call pos:start="2223:35" pos:end="2223:52"><name pos:start="2223:35" pos:end="2223:50">tcg_temp_new_i32</name><argument_list pos:start="2223:51" pos:end="2223:52">()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2225:29" pos:end="2225:58"><expr pos:start="2225:29" pos:end="2225:57"><call pos:start="2225:29" pos:end="2225:57"><name pos:start="2225:29" pos:end="2225:44">tcg_gen_movi_i32</name><argument_list pos:start="2225:45" pos:end="2225:57">(<argument pos:start="2225:46" pos:end="2225:48"><expr pos:start="2225:46" pos:end="2225:48"><name pos:start="2225:46" pos:end="2225:48">tmp</name></expr></argument>, <argument pos:start="2225:51" pos:end="2225:56"><expr pos:start="2225:51" pos:end="2225:56"><name pos:start="2225:51" pos:end="2225:56">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2227:27" pos:end="2239:25">else <block pos:start="2227:32" pos:end="2239:25">{<block_content pos:start="2229:29" pos:end="2237:64">

                            <expr_stmt pos:start="2229:29" pos:end="2229:50"><expr pos:start="2229:29" pos:end="2229:49"><name pos:start="2229:29" pos:end="2229:31">tmp</name> <operator pos:start="2229:33" pos:end="2229:33">=</operator> <call pos:start="2229:35" pos:end="2229:49"><name pos:start="2229:35" pos:end="2229:42">load_reg</name><argument_list pos:start="2229:43" pos:end="2229:49">(<argument pos:start="2229:44" pos:end="2229:44"><expr pos:start="2229:44" pos:end="2229:44"><name pos:start="2229:44" pos:end="2229:44">s</name></expr></argument>, <argument pos:start="2229:47" pos:end="2229:48"><expr pos:start="2229:47" pos:end="2229:48"><name pos:start="2229:47" pos:end="2229:48">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2231:29" pos:end="2237:64"><if pos:start="2231:29" pos:end="2233:64">if <condition pos:start="2231:32" pos:end="2231:49">(<expr pos:start="2231:33" pos:end="2231:48"><name pos:start="2231:33" pos:end="2231:36">insn</name> <operator pos:start="2231:38" pos:end="2231:38">&amp;</operator> <operator pos:start="2231:40" pos:end="2231:40">(</operator><literal type="number" pos:start="2231:41" pos:end="2231:41">1</literal> <operator pos:start="2231:43" pos:end="2231:44">&lt;&lt;</operator> <literal type="number" pos:start="2231:46" pos:end="2231:47">23</literal><operator pos:start="2231:48" pos:end="2231:48">)</operator></expr>)</condition><block type="pseudo" pos:start="2233:33" pos:end="2233:64"><block_content pos:start="2233:33" pos:end="2233:64">

                                <expr_stmt pos:start="2233:33" pos:end="2233:64"><expr pos:start="2233:33" pos:end="2233:63"><call pos:start="2233:33" pos:end="2233:63"><name pos:start="2233:33" pos:end="2233:48">tcg_gen_subi_i32</name><argument_list pos:start="2233:49" pos:end="2233:63">(<argument pos:start="2233:50" pos:end="2233:52"><expr pos:start="2233:50" pos:end="2233:52"><name pos:start="2233:50" pos:end="2233:52">tmp</name></expr></argument>, <argument pos:start="2233:55" pos:end="2233:57"><expr pos:start="2233:55" pos:end="2233:57"><name pos:start="2233:55" pos:end="2233:57">tmp</name></expr></argument>, <argument pos:start="2233:60" pos:end="2233:62"><expr pos:start="2233:60" pos:end="2233:62"><name pos:start="2233:60" pos:end="2233:62">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="2235:29" pos:end="2237:64">else<block type="pseudo" pos:start="2237:33" pos:end="2237:64"><block_content pos:start="2237:33" pos:end="2237:64">

                                <expr_stmt pos:start="2237:33" pos:end="2237:64"><expr pos:start="2237:33" pos:end="2237:63"><call pos:start="2237:33" pos:end="2237:63"><name pos:start="2237:33" pos:end="2237:48">tcg_gen_addi_i32</name><argument_list pos:start="2237:49" pos:end="2237:63">(<argument pos:start="2237:50" pos:end="2237:52"><expr pos:start="2237:50" pos:end="2237:52"><name pos:start="2237:50" pos:end="2237:52">tmp</name></expr></argument>, <argument pos:start="2237:55" pos:end="2237:57"><expr pos:start="2237:55" pos:end="2237:57"><name pos:start="2237:55" pos:end="2237:57">tmp</name></expr></argument>, <argument pos:start="2237:60" pos:end="2237:62"><expr pos:start="2237:60" pos:end="2237:62"><name pos:start="2237:60" pos:end="2237:62">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2243:21" pos:end="2243:42"><expr pos:start="2243:21" pos:end="2243:41"><call pos:start="2243:21" pos:end="2243:41"><name pos:start="2243:21" pos:end="2243:29">store_reg</name><argument_list pos:start="2243:30" pos:end="2243:41">(<argument pos:start="2243:31" pos:end="2243:31"><expr pos:start="2243:31" pos:end="2243:31"><name pos:start="2243:31" pos:end="2243:31">s</name></expr></argument>, <argument pos:start="2243:34" pos:end="2243:35"><expr pos:start="2243:34" pos:end="2243:35"><name pos:start="2243:34" pos:end="2243:35">rd</name></expr></argument>, <argument pos:start="2243:38" pos:end="2243:40"><expr pos:start="2243:38" pos:end="2243:40"><name pos:start="2243:38" pos:end="2243:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="2247:15" pos:end="2341:13">else <block pos:start="2247:20" pos:end="2341:13">{<block_content pos:start="2249:17" pos:end="2339:17">

                <decl_stmt pos:start="2249:17" pos:end="2249:36"><decl pos:start="2249:17" pos:end="2249:35"><type pos:start="2249:17" pos:end="2249:19"><name pos:start="2249:17" pos:end="2249:19">int</name></type> <name pos:start="2249:21" pos:end="2249:31">shifter_out</name> <init pos:start="2249:33" pos:end="2249:35">= <expr pos:start="2249:35" pos:end="2249:35"><literal type="number" pos:start="2249:35" pos:end="2249:35">0</literal></expr></init></decl>;</decl_stmt>

                <comment type="block" pos:start="2251:17" pos:end="2251:49">/* modified 12-bit immediate.  */</comment>

                <expr_stmt pos:start="2253:17" pos:end="2253:78"><expr pos:start="2253:17" pos:end="2253:77"><name pos:start="2253:17" pos:end="2253:21">shift</name> <operator pos:start="2253:23" pos:end="2253:23">=</operator> <operator pos:start="2253:25" pos:end="2253:25">(</operator><operator pos:start="2253:26" pos:end="2253:26">(</operator><name pos:start="2253:27" pos:end="2253:30">insn</name> <operator pos:start="2253:32" pos:end="2253:32">&amp;</operator> <literal type="number" pos:start="2253:34" pos:end="2253:43">0x04000000</literal><operator pos:start="2253:44" pos:end="2253:44">)</operator> <operator pos:start="2253:46" pos:end="2253:47">&gt;&gt;</operator> <literal type="number" pos:start="2253:49" pos:end="2253:50">23</literal><operator pos:start="2253:51" pos:end="2253:51">)</operator> <operator pos:start="2253:53" pos:end="2253:53">|</operator> <operator pos:start="2253:55" pos:end="2253:55">(</operator><operator pos:start="2253:56" pos:end="2253:56">(</operator><name pos:start="2253:57" pos:end="2253:60">insn</name> <operator pos:start="2253:62" pos:end="2253:62">&amp;</operator> <literal type="number" pos:start="2253:64" pos:end="2253:69">0x7000</literal><operator pos:start="2253:70" pos:end="2253:70">)</operator> <operator pos:start="2253:72" pos:end="2253:73">&gt;&gt;</operator> <literal type="number" pos:start="2253:75" pos:end="2253:76">12</literal><operator pos:start="2253:77" pos:end="2253:77">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="2255:17" pos:end="2255:36"><expr pos:start="2255:17" pos:end="2255:35"><name pos:start="2255:17" pos:end="2255:19">imm</name> <operator pos:start="2255:21" pos:end="2255:21">=</operator> <operator pos:start="2255:23" pos:end="2255:23">(</operator><name pos:start="2255:24" pos:end="2255:27">insn</name> <operator pos:start="2255:29" pos:end="2255:29">&amp;</operator> <literal type="number" pos:start="2255:31" pos:end="2255:34">0xff</literal><operator pos:start="2255:35" pos:end="2255:35">)</operator></expr>;</expr_stmt>

                <switch pos:start="2257:17" pos:end="2299:17">switch <condition pos:start="2257:24" pos:end="2257:30">(<expr pos:start="2257:25" pos:end="2257:29"><name pos:start="2257:25" pos:end="2257:29">shift</name></expr>)</condition> <block pos:start="2257:32" pos:end="2299:17">{<block_content pos:start="2259:17" pos:end="2297:26">

                <case pos:start="2259:17" pos:end="2259:23">case <expr pos:start="2259:22" pos:end="2259:22"><literal type="number" pos:start="2259:22" pos:end="2259:22">0</literal></expr>:</case> <comment type="block" pos:start="2259:25" pos:end="2259:32">/* XY */</comment>

                    <comment type="block" pos:start="2261:21" pos:end="2261:41">/* Nothing to do.  */</comment>

                    <break pos:start="2263:21" pos:end="2263:26">break;</break>

                <case pos:start="2265:17" pos:end="2265:23">case <expr pos:start="2265:22" pos:end="2265:22"><literal type="number" pos:start="2265:22" pos:end="2265:22">1</literal></expr>:</case> <comment type="block" pos:start="2265:25" pos:end="2265:38">/* 00XY00XY */</comment>

                    <expr_stmt pos:start="2267:21" pos:end="2267:37"><expr pos:start="2267:21" pos:end="2267:36"><name pos:start="2267:21" pos:end="2267:23">imm</name> <operator pos:start="2267:25" pos:end="2267:26">|=</operator> <name pos:start="2267:28" pos:end="2267:30">imm</name> <operator pos:start="2267:32" pos:end="2267:33">&lt;&lt;</operator> <literal type="number" pos:start="2267:35" pos:end="2267:36">16</literal></expr>;</expr_stmt>

                    <break pos:start="2269:21" pos:end="2269:26">break;</break>

                <case pos:start="2271:17" pos:end="2271:23">case <expr pos:start="2271:22" pos:end="2271:22"><literal type="number" pos:start="2271:22" pos:end="2271:22">2</literal></expr>:</case> <comment type="block" pos:start="2271:25" pos:end="2271:38">/* XY00XY00 */</comment>

                    <expr_stmt pos:start="2273:21" pos:end="2273:37"><expr pos:start="2273:21" pos:end="2273:36"><name pos:start="2273:21" pos:end="2273:23">imm</name> <operator pos:start="2273:25" pos:end="2273:26">|=</operator> <name pos:start="2273:28" pos:end="2273:30">imm</name> <operator pos:start="2273:32" pos:end="2273:33">&lt;&lt;</operator> <literal type="number" pos:start="2273:35" pos:end="2273:36">16</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="2275:21" pos:end="2275:30"><expr pos:start="2275:21" pos:end="2275:29"><name pos:start="2275:21" pos:end="2275:23">imm</name> <operator pos:start="2275:25" pos:end="2275:27">&lt;&lt;=</operator> <literal type="number" pos:start="2275:29" pos:end="2275:29">8</literal></expr>;</expr_stmt>

                    <break pos:start="2277:21" pos:end="2277:26">break;</break>

                <case pos:start="2279:17" pos:end="2279:23">case <expr pos:start="2279:22" pos:end="2279:22"><literal type="number" pos:start="2279:22" pos:end="2279:22">3</literal></expr>:</case> <comment type="block" pos:start="2279:25" pos:end="2279:38">/* XYXYXYXY */</comment>

                    <expr_stmt pos:start="2281:21" pos:end="2281:37"><expr pos:start="2281:21" pos:end="2281:36"><name pos:start="2281:21" pos:end="2281:23">imm</name> <operator pos:start="2281:25" pos:end="2281:26">|=</operator> <name pos:start="2281:28" pos:end="2281:30">imm</name> <operator pos:start="2281:32" pos:end="2281:33">&lt;&lt;</operator> <literal type="number" pos:start="2281:35" pos:end="2281:36">16</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="2283:21" pos:end="2283:36"><expr pos:start="2283:21" pos:end="2283:35"><name pos:start="2283:21" pos:end="2283:23">imm</name> <operator pos:start="2283:25" pos:end="2283:26">|=</operator> <name pos:start="2283:28" pos:end="2283:30">imm</name> <operator pos:start="2283:32" pos:end="2283:33">&lt;&lt;</operator> <literal type="number" pos:start="2283:35" pos:end="2283:35">8</literal></expr>;</expr_stmt>

                    <break pos:start="2285:21" pos:end="2285:26">break;</break>

                <default pos:start="2287:17" pos:end="2287:24">default:</default> <comment type="block" pos:start="2287:26" pos:end="2287:49">/* Rotated constant.  */</comment>

                    <expr_stmt pos:start="2289:21" pos:end="2289:54"><expr pos:start="2289:21" pos:end="2289:53"><name pos:start="2289:21" pos:end="2289:25">shift</name> <operator pos:start="2289:27" pos:end="2289:27">=</operator> <operator pos:start="2289:29" pos:end="2289:29">(</operator><name pos:start="2289:30" pos:end="2289:34">shift</name> <operator pos:start="2289:36" pos:end="2289:37">&lt;&lt;</operator> <literal type="number" pos:start="2289:39" pos:end="2289:39">1</literal><operator pos:start="2289:40" pos:end="2289:40">)</operator> <operator pos:start="2289:42" pos:end="2289:42">|</operator> <operator pos:start="2289:44" pos:end="2289:44">(</operator><name pos:start="2289:45" pos:end="2289:47">imm</name> <operator pos:start="2289:49" pos:end="2289:50">&gt;&gt;</operator> <literal type="number" pos:start="2289:52" pos:end="2289:52">7</literal><operator pos:start="2289:53" pos:end="2289:53">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="2291:21" pos:end="2291:32"><expr pos:start="2291:21" pos:end="2291:31"><name pos:start="2291:21" pos:end="2291:23">imm</name> <operator pos:start="2291:25" pos:end="2291:26">|=</operator> <literal type="number" pos:start="2291:28" pos:end="2291:31">0x80</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="2293:21" pos:end="2293:46"><expr pos:start="2293:21" pos:end="2293:45"><name pos:start="2293:21" pos:end="2293:23">imm</name> <operator pos:start="2293:25" pos:end="2293:25">=</operator> <name pos:start="2293:27" pos:end="2293:29">imm</name> <operator pos:start="2293:31" pos:end="2293:32">&lt;&lt;</operator> <operator pos:start="2293:34" pos:end="2293:34">(</operator><literal type="number" pos:start="2293:35" pos:end="2293:38">32</literal> <operator pos:start="2293:38" pos:end="2293:38">-</operator> <name pos:start="2293:40" pos:end="2293:44">shift</name><operator pos:start="2293:45" pos:end="2293:45">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="2295:21" pos:end="2295:36"><expr pos:start="2295:21" pos:end="2295:35"><name pos:start="2295:21" pos:end="2295:31">shifter_out</name> <operator pos:start="2295:33" pos:end="2295:33">=</operator> <literal type="number" pos:start="2295:35" pos:end="2295:35">1</literal></expr>;</expr_stmt>

                    <break pos:start="2297:21" pos:end="2297:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="2301:17" pos:end="2301:42"><expr pos:start="2301:17" pos:end="2301:41"><name pos:start="2301:17" pos:end="2301:20">tmp2</name> <operator pos:start="2301:22" pos:end="2301:22">=</operator> <call pos:start="2301:24" pos:end="2301:41"><name pos:start="2301:24" pos:end="2301:39">tcg_temp_new_i32</name><argument_list pos:start="2301:40" pos:end="2301:41">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2303:17" pos:end="2303:44"><expr pos:start="2303:17" pos:end="2303:43"><call pos:start="2303:17" pos:end="2303:43"><name pos:start="2303:17" pos:end="2303:32">tcg_gen_movi_i32</name><argument_list pos:start="2303:33" pos:end="2303:43">(<argument pos:start="2303:34" pos:end="2303:37"><expr pos:start="2303:34" pos:end="2303:37"><name pos:start="2303:34" pos:end="2303:37">tmp2</name></expr></argument>, <argument pos:start="2303:40" pos:end="2303:42"><expr pos:start="2303:40" pos:end="2303:42"><name pos:start="2303:40" pos:end="2303:42">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2305:17" pos:end="2305:40"><expr pos:start="2305:17" pos:end="2305:39"><name pos:start="2305:17" pos:end="2305:18">rn</name> <operator pos:start="2305:20" pos:end="2305:20">=</operator> <operator pos:start="2305:22" pos:end="2305:22">(</operator><name pos:start="2305:23" pos:end="2305:26">insn</name> <operator pos:start="2305:28" pos:end="2305:29">&gt;&gt;</operator> <literal type="number" pos:start="2305:31" pos:end="2305:32">16</literal><operator pos:start="2305:33" pos:end="2305:33">)</operator> <operator pos:start="2305:35" pos:end="2305:35">&amp;</operator> <literal type="number" pos:start="2305:37" pos:end="2305:39">0xf</literal></expr>;</expr_stmt>

                <if_stmt pos:start="2307:17" pos:end="2317:17"><if pos:start="2307:17" pos:end="2313:17">if <condition pos:start="2307:20" pos:end="2307:29">(<expr pos:start="2307:21" pos:end="2307:28"><name pos:start="2307:21" pos:end="2307:22">rn</name> <operator pos:start="2307:24" pos:end="2307:25">==</operator> <literal type="number" pos:start="2307:27" pos:end="2307:28">15</literal></expr>)</condition> <block pos:start="2307:31" pos:end="2313:17">{<block_content pos:start="2309:21" pos:end="2311:45">

                    <expr_stmt pos:start="2309:21" pos:end="2309:45"><expr pos:start="2309:21" pos:end="2309:44"><name pos:start="2309:21" pos:end="2309:23">tmp</name> <operator pos:start="2309:25" pos:end="2309:25">=</operator> <call pos:start="2309:27" pos:end="2309:44"><name pos:start="2309:27" pos:end="2309:42">tcg_temp_new_i32</name><argument_list pos:start="2309:43" pos:end="2309:44">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2311:21" pos:end="2311:45"><expr pos:start="2311:21" pos:end="2311:44"><call pos:start="2311:21" pos:end="2311:44"><name pos:start="2311:21" pos:end="2311:36">tcg_gen_movi_i32</name><argument_list pos:start="2311:37" pos:end="2311:44">(<argument pos:start="2311:38" pos:end="2311:40"><expr pos:start="2311:38" pos:end="2311:40"><name pos:start="2311:38" pos:end="2311:40">tmp</name></expr></argument>, <argument pos:start="2311:43" pos:end="2311:43"><expr pos:start="2311:43" pos:end="2311:43"><literal type="number" pos:start="2311:43" pos:end="2311:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2313:19" pos:end="2317:17">else <block pos:start="2313:24" pos:end="2317:17">{<block_content pos:start="2315:21" pos:end="2315:42">

                    <expr_stmt pos:start="2315:21" pos:end="2315:42"><expr pos:start="2315:21" pos:end="2315:41"><name pos:start="2315:21" pos:end="2315:23">tmp</name> <operator pos:start="2315:25" pos:end="2315:25">=</operator> <call pos:start="2315:27" pos:end="2315:41"><name pos:start="2315:27" pos:end="2315:34">load_reg</name><argument_list pos:start="2315:35" pos:end="2315:41">(<argument pos:start="2315:36" pos:end="2315:36"><expr pos:start="2315:36" pos:end="2315:36"><name pos:start="2315:36" pos:end="2315:36">s</name></expr></argument>, <argument pos:start="2315:39" pos:end="2315:40"><expr pos:start="2315:39" pos:end="2315:40"><name pos:start="2315:39" pos:end="2315:40">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2319:17" pos:end="2319:40"><expr pos:start="2319:17" pos:end="2319:39"><name pos:start="2319:17" pos:end="2319:18">op</name> <operator pos:start="2319:20" pos:end="2319:20">=</operator> <operator pos:start="2319:22" pos:end="2319:22">(</operator><name pos:start="2319:23" pos:end="2319:26">insn</name> <operator pos:start="2319:28" pos:end="2319:29">&gt;&gt;</operator> <literal type="number" pos:start="2319:31" pos:end="2319:32">21</literal><operator pos:start="2319:33" pos:end="2319:33">)</operator> <operator pos:start="2319:35" pos:end="2319:35">&amp;</operator> <literal type="number" pos:start="2319:37" pos:end="2319:39">0xf</literal></expr>;</expr_stmt>

                <if_stmt pos:start="2321:17" pos:end="2325:36"><if pos:start="2321:17" pos:end="2325:36">if <condition pos:start="2321:20" pos:end="2323:63">(<expr pos:start="2321:21" pos:end="2323:62"><call pos:start="2321:21" pos:end="2323:62"><name pos:start="2321:21" pos:end="2321:38">gen_thumb2_data_op</name><argument_list pos:start="2321:39" pos:end="2323:62">(<argument pos:start="2321:40" pos:end="2321:40"><expr pos:start="2321:40" pos:end="2321:40"><name pos:start="2321:40" pos:end="2321:40">s</name></expr></argument>, <argument pos:start="2321:43" pos:end="2321:44"><expr pos:start="2321:43" pos:end="2321:44"><name pos:start="2321:43" pos:end="2321:44">op</name></expr></argument>, <argument pos:start="2321:47" pos:end="2321:69"><expr pos:start="2321:47" pos:end="2321:69"><operator pos:start="2321:47" pos:end="2321:47">(</operator><name pos:start="2321:48" pos:end="2321:51">insn</name> <operator pos:start="2321:53" pos:end="2321:53">&amp;</operator> <operator pos:start="2321:55" pos:end="2321:55">(</operator><literal type="number" pos:start="2321:56" pos:end="2321:56">1</literal> <operator pos:start="2321:58" pos:end="2321:59">&lt;&lt;</operator> <literal type="number" pos:start="2321:61" pos:end="2321:62">20</literal><operator pos:start="2321:63" pos:end="2321:63">)</operator><operator pos:start="2321:64" pos:end="2321:64">)</operator> <operator pos:start="2321:66" pos:end="2321:67">!=</operator> <literal type="number" pos:start="2321:69" pos:end="2321:69">0</literal></expr></argument>,

                                       <argument pos:start="2323:40" pos:end="2323:50"><expr pos:start="2323:40" pos:end="2323:50"><name pos:start="2323:40" pos:end="2323:50">shifter_out</name></expr></argument>, <argument pos:start="2323:53" pos:end="2323:55"><expr pos:start="2323:53" pos:end="2323:55"><name pos:start="2323:53" pos:end="2323:55">tmp</name></expr></argument>, <argument pos:start="2323:58" pos:end="2323:61"><expr pos:start="2323:58" pos:end="2323:61"><name pos:start="2323:58" pos:end="2323:61">tmp2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2325:21" pos:end="2325:36"><block_content pos:start="2325:21" pos:end="2325:36">

                    <goto pos:start="2325:21" pos:end="2325:36">goto <name pos:start="2325:26" pos:end="2325:35">illegal_op</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="2327:17" pos:end="2327:40"><expr pos:start="2327:17" pos:end="2327:39"><call pos:start="2327:17" pos:end="2327:39"><name pos:start="2327:17" pos:end="2327:33">tcg_temp_free_i32</name><argument_list pos:start="2327:34" pos:end="2327:39">(<argument pos:start="2327:35" pos:end="2327:38"><expr pos:start="2327:35" pos:end="2327:38"><name pos:start="2327:35" pos:end="2327:38">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2329:17" pos:end="2329:39"><expr pos:start="2329:17" pos:end="2329:38"><name pos:start="2329:17" pos:end="2329:18">rd</name> <operator pos:start="2329:20" pos:end="2329:20">=</operator> <operator pos:start="2329:22" pos:end="2329:22">(</operator><name pos:start="2329:23" pos:end="2329:26">insn</name> <operator pos:start="2329:28" pos:end="2329:29">&gt;&gt;</operator> <literal type="number" pos:start="2329:31" pos:end="2329:31">8</literal><operator pos:start="2329:32" pos:end="2329:32">)</operator> <operator pos:start="2329:34" pos:end="2329:34">&amp;</operator> <literal type="number" pos:start="2329:36" pos:end="2329:38">0xf</literal></expr>;</expr_stmt>

                <if_stmt pos:start="2331:17" pos:end="2339:17"><if pos:start="2331:17" pos:end="2335:17">if <condition pos:start="2331:20" pos:end="2331:29">(<expr pos:start="2331:21" pos:end="2331:28"><name pos:start="2331:21" pos:end="2331:22">rd</name> <operator pos:start="2331:24" pos:end="2331:25">!=</operator> <literal type="number" pos:start="2331:27" pos:end="2331:28">15</literal></expr>)</condition> <block pos:start="2331:31" pos:end="2335:17">{<block_content pos:start="2333:21" pos:end="2333:42">

                    <expr_stmt pos:start="2333:21" pos:end="2333:42"><expr pos:start="2333:21" pos:end="2333:41"><call pos:start="2333:21" pos:end="2333:41"><name pos:start="2333:21" pos:end="2333:29">store_reg</name><argument_list pos:start="2333:30" pos:end="2333:41">(<argument pos:start="2333:31" pos:end="2333:31"><expr pos:start="2333:31" pos:end="2333:31"><name pos:start="2333:31" pos:end="2333:31">s</name></expr></argument>, <argument pos:start="2333:34" pos:end="2333:35"><expr pos:start="2333:34" pos:end="2333:35"><name pos:start="2333:34" pos:end="2333:35">rd</name></expr></argument>, <argument pos:start="2333:38" pos:end="2333:40"><expr pos:start="2333:38" pos:end="2333:40"><name pos:start="2333:38" pos:end="2333:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2335:19" pos:end="2339:17">else <block pos:start="2335:24" pos:end="2339:17">{<block_content pos:start="2337:21" pos:end="2337:43">

                    <expr_stmt pos:start="2337:21" pos:end="2337:43"><expr pos:start="2337:21" pos:end="2337:42"><call pos:start="2337:21" pos:end="2337:42"><name pos:start="2337:21" pos:end="2337:37">tcg_temp_free_i32</name><argument_list pos:start="2337:38" pos:end="2337:42">(<argument pos:start="2337:39" pos:end="2337:41"><expr pos:start="2337:39" pos:end="2337:41"><name pos:start="2337:39" pos:end="2337:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2345:9" pos:end="2345:14">break;</break>

    <case pos:start="2347:5" pos:end="2347:12">case <expr pos:start="2347:10" pos:end="2347:11"><literal type="number" pos:start="2347:10" pos:end="2347:11">12</literal></expr>:</case> <comment type="block" pos:start="2347:14" pos:end="2347:48">/* Load/store single data item.  */</comment>

        <block pos:start="2349:9" pos:end="2685:9">{<block_content pos:start="2351:9" pos:end="2683:9">

        <decl_stmt pos:start="2351:9" pos:end="2351:24"><decl pos:start="2351:9" pos:end="2351:23"><type pos:start="2351:9" pos:end="2351:11"><name pos:start="2351:9" pos:end="2351:11">int</name></type> <name pos:start="2351:13" pos:end="2351:19">postinc</name> <init pos:start="2351:21" pos:end="2351:23">= <expr pos:start="2351:23" pos:end="2351:23"><literal type="number" pos:start="2351:23" pos:end="2351:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="2353:9" pos:end="2353:26"><decl pos:start="2353:9" pos:end="2353:25"><type pos:start="2353:9" pos:end="2353:11"><name pos:start="2353:9" pos:end="2353:11">int</name></type> <name pos:start="2353:13" pos:end="2353:21">writeback</name> <init pos:start="2353:23" pos:end="2353:25">= <expr pos:start="2353:25" pos:end="2353:25"><literal type="number" pos:start="2353:25" pos:end="2353:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="2355:9" pos:end="2355:19"><decl pos:start="2355:9" pos:end="2355:18"><type pos:start="2355:9" pos:end="2355:11"><name pos:start="2355:9" pos:end="2355:11">int</name></type> <name pos:start="2355:13" pos:end="2355:18">memidx</name></decl>;</decl_stmt>

        <decl_stmt pos:start="2357:9" pos:end="2357:24"><decl pos:start="2357:9" pos:end="2357:23"><type pos:start="2357:9" pos:end="2357:15"><name pos:start="2357:9" pos:end="2357:15">ISSInfo</name></type> <name pos:start="2357:17" pos:end="2357:23">issinfo</name></decl>;</decl_stmt>



        <if_stmt pos:start="2361:9" pos:end="2371:9"><if pos:start="2361:9" pos:end="2371:9">if <condition pos:start="2361:12" pos:end="2361:46">(<expr pos:start="2361:13" pos:end="2361:45"><operator pos:start="2361:13" pos:end="2361:13">(</operator><name pos:start="2361:14" pos:end="2361:17">insn</name> <operator pos:start="2361:19" pos:end="2361:19">&amp;</operator> <literal type="number" pos:start="2361:21" pos:end="2361:30">0x01100000</literal><operator pos:start="2361:31" pos:end="2361:31">)</operator> <operator pos:start="2361:33" pos:end="2361:34">==</operator> <literal type="number" pos:start="2361:36" pos:end="2361:45">0x01000000</literal></expr>)</condition> <block pos:start="2361:48" pos:end="2371:9">{<block_content pos:start="2363:13" pos:end="2369:18">

            <if_stmt pos:start="2363:13" pos:end="2367:13"><if pos:start="2363:13" pos:end="2367:13">if <condition pos:start="2363:16" pos:end="2363:44">(<expr pos:start="2363:17" pos:end="2363:43"><call pos:start="2363:17" pos:end="2363:43"><name pos:start="2363:17" pos:end="2363:34">disas_neon_ls_insn</name><argument_list pos:start="2363:35" pos:end="2363:43">(<argument pos:start="2363:36" pos:end="2363:36"><expr pos:start="2363:36" pos:end="2363:36"><name pos:start="2363:36" pos:end="2363:36">s</name></expr></argument>, <argument pos:start="2363:39" pos:end="2363:42"><expr pos:start="2363:39" pos:end="2363:42"><name pos:start="2363:39" pos:end="2363:42">insn</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="2363:46" pos:end="2367:13">{<block_content pos:start="2365:17" pos:end="2365:32">

                <goto pos:start="2365:17" pos:end="2365:32">goto <name pos:start="2365:22" pos:end="2365:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="2369:13" pos:end="2369:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2373:9" pos:end="2373:53"><expr pos:start="2373:9" pos:end="2373:52"><name pos:start="2373:9" pos:end="2373:10">op</name> <operator pos:start="2373:12" pos:end="2373:12">=</operator> <operator pos:start="2373:14" pos:end="2373:14">(</operator><operator pos:start="2373:15" pos:end="2373:15">(</operator><name pos:start="2373:16" pos:end="2373:19">insn</name> <operator pos:start="2373:21" pos:end="2373:22">&gt;&gt;</operator> <literal type="number" pos:start="2373:24" pos:end="2373:25">21</literal><operator pos:start="2373:26" pos:end="2373:26">)</operator> <operator pos:start="2373:28" pos:end="2373:28">&amp;</operator> <literal type="number" pos:start="2373:30" pos:end="2373:30">3</literal><operator pos:start="2373:31" pos:end="2373:31">)</operator> <operator pos:start="2373:33" pos:end="2373:33">|</operator> <operator pos:start="2373:35" pos:end="2373:35">(</operator><operator pos:start="2373:36" pos:end="2373:36">(</operator><name pos:start="2373:37" pos:end="2373:40">insn</name> <operator pos:start="2373:42" pos:end="2373:43">&gt;&gt;</operator> <literal type="number" pos:start="2373:45" pos:end="2373:46">22</literal><operator pos:start="2373:47" pos:end="2373:47">)</operator> <operator pos:start="2373:49" pos:end="2373:49">&amp;</operator> <literal type="number" pos:start="2373:51" pos:end="2373:51">4</literal><operator pos:start="2373:52" pos:end="2373:52">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="2375:9" pos:end="2447:9"><if pos:start="2375:9" pos:end="2447:9">if <condition pos:start="2375:12" pos:end="2375:21">(<expr pos:start="2375:13" pos:end="2375:20"><name pos:start="2375:13" pos:end="2375:14">rs</name> <operator pos:start="2375:16" pos:end="2375:17">==</operator> <literal type="number" pos:start="2375:19" pos:end="2375:20">15</literal></expr>)</condition> <block pos:start="2375:23" pos:end="2447:9">{<block_content pos:start="2377:13" pos:end="2445:13">

            <if_stmt pos:start="2377:13" pos:end="2381:13"><if pos:start="2377:13" pos:end="2381:13">if <condition pos:start="2377:16" pos:end="2377:36">(<expr pos:start="2377:17" pos:end="2377:35"><operator pos:start="2377:17" pos:end="2377:17">!</operator><operator pos:start="2377:18" pos:end="2377:18">(</operator><name pos:start="2377:19" pos:end="2377:22">insn</name> <operator pos:start="2377:24" pos:end="2377:24">&amp;</operator> <operator pos:start="2377:26" pos:end="2377:26">(</operator><literal type="number" pos:start="2377:27" pos:end="2377:27">1</literal> <operator pos:start="2377:29" pos:end="2377:30">&lt;&lt;</operator> <literal type="number" pos:start="2377:32" pos:end="2377:33">20</literal><operator pos:start="2377:34" pos:end="2377:34">)</operator><operator pos:start="2377:35" pos:end="2377:35">)</operator></expr>)</condition> <block pos:start="2377:38" pos:end="2381:13">{<block_content pos:start="2379:17" pos:end="2379:32">

                <goto pos:start="2379:17" pos:end="2379:32">goto <name pos:start="2379:22" pos:end="2379:31">illegal_op</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="2383:13" pos:end="2445:13"><if pos:start="2383:13" pos:end="2445:13">if <condition pos:start="2383:16" pos:end="2383:24">(<expr pos:start="2383:17" pos:end="2383:23"><name pos:start="2383:17" pos:end="2383:18">op</name> <operator pos:start="2383:20" pos:end="2383:21">!=</operator> <literal type="number" pos:start="2383:23" pos:end="2383:23">2</literal></expr>)</condition> <block pos:start="2383:26" pos:end="2445:13">{<block_content pos:start="2407:17" pos:end="2443:25">

                <comment type="block" pos:start="2385:17" pos:end="2405:19">/* Byte or halfword load space with dest == r15 : memory hints.

                 * Catch them early so we don't emit pointless addressing code.

                 * This space is a mix of:

                 *  PLD/PLDW/PLI,  which we implement as NOPs (note that unlike

                 *     the ARM encodings, PLDW space doesn't UNDEF for non-v7MP

                 *     cores)

                 *  unallocated hints, which must be treated as NOPs

                 *  UNPREDICTABLE space, which we NOP or UNDEF depending on

                 *     which is easiest for the decoding logic

                 *  Some space which must UNDEF

                 */</comment>

                <decl_stmt pos:start="2407:17" pos:end="2407:43"><decl pos:start="2407:17" pos:end="2407:42"><type pos:start="2407:17" pos:end="2407:19"><name pos:start="2407:17" pos:end="2407:19">int</name></type> <name pos:start="2407:21" pos:end="2407:23">op1</name> <init pos:start="2407:25" pos:end="2407:42">= <expr pos:start="2407:27" pos:end="2407:42"><operator pos:start="2407:27" pos:end="2407:27">(</operator><name pos:start="2407:28" pos:end="2407:31">insn</name> <operator pos:start="2407:33" pos:end="2407:34">&gt;&gt;</operator> <literal type="number" pos:start="2407:36" pos:end="2407:37">23</literal><operator pos:start="2407:38" pos:end="2407:38">)</operator> <operator pos:start="2407:40" pos:end="2407:40">&amp;</operator> <literal type="number" pos:start="2407:42" pos:end="2407:42">3</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="2409:17" pos:end="2409:45"><decl pos:start="2409:17" pos:end="2409:44"><type pos:start="2409:17" pos:end="2409:19"><name pos:start="2409:17" pos:end="2409:19">int</name></type> <name pos:start="2409:21" pos:end="2409:23">op2</name> <init pos:start="2409:25" pos:end="2409:44">= <expr pos:start="2409:27" pos:end="2409:44"><operator pos:start="2409:27" pos:end="2409:27">(</operator><name pos:start="2409:28" pos:end="2409:31">insn</name> <operator pos:start="2409:33" pos:end="2409:34">&gt;&gt;</operator> <literal type="number" pos:start="2409:36" pos:end="2409:36">6</literal><operator pos:start="2409:37" pos:end="2409:37">)</operator> <operator pos:start="2409:39" pos:end="2409:39">&amp;</operator> <literal type="number" pos:start="2409:41" pos:end="2409:44">0x3f</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="2411:17" pos:end="2415:17"><if pos:start="2411:17" pos:end="2415:17">if <condition pos:start="2411:20" pos:end="2411:27">(<expr pos:start="2411:21" pos:end="2411:26"><name pos:start="2411:21" pos:end="2411:22">op</name> <operator pos:start="2411:24" pos:end="2411:24">&amp;</operator> <literal type="number" pos:start="2411:26" pos:end="2411:26">2</literal></expr>)</condition> <block pos:start="2411:29" pos:end="2415:17">{<block_content pos:start="2413:21" pos:end="2413:36">

                    <goto pos:start="2413:21" pos:end="2413:36">goto <name pos:start="2413:26" pos:end="2413:35">illegal_op</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2417:17" pos:end="2427:17"><if pos:start="2417:17" pos:end="2427:17">if <condition pos:start="2417:20" pos:end="2417:29">(<expr pos:start="2417:21" pos:end="2417:28"><name pos:start="2417:21" pos:end="2417:22">rn</name> <operator pos:start="2417:24" pos:end="2417:25">==</operator> <literal type="number" pos:start="2417:27" pos:end="2417:28">15</literal></expr>)</condition> <block pos:start="2417:31" pos:end="2427:17">{<block_content pos:start="2425:21" pos:end="2425:29">

                    <comment type="block" pos:start="2419:21" pos:end="2423:23">/* UNPREDICTABLE, unallocated hint or

                     * PLD/PLDW/PLI (literal)

                     */</comment>

                    <return pos:start="2425:21" pos:end="2425:29">return <expr pos:start="2425:28" pos:end="2425:28"><literal type="number" pos:start="2425:28" pos:end="2425:28">0</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2429:17" pos:end="2433:17"><if pos:start="2429:17" pos:end="2433:17">if <condition pos:start="2429:20" pos:end="2429:28">(<expr pos:start="2429:21" pos:end="2429:27"><name pos:start="2429:21" pos:end="2429:23">op1</name> <operator pos:start="2429:25" pos:end="2429:25">&amp;</operator> <literal type="number" pos:start="2429:27" pos:end="2429:27">1</literal></expr>)</condition> <block pos:start="2429:30" pos:end="2433:17">{<block_content pos:start="2431:21" pos:end="2431:29">

                    <return pos:start="2431:21" pos:end="2431:29">return <expr pos:start="2431:28" pos:end="2431:28"><literal type="number" pos:start="2431:28" pos:end="2431:28">0</literal></expr>;</return> <comment type="block" pos:start="2431:31" pos:end="2431:68">/* PLD/PLDW/PLI or unallocated hint */</comment>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="2435:17" pos:end="2439:17"><if pos:start="2435:17" pos:end="2439:17">if <condition pos:start="2435:20" pos:end="2435:57">(<expr pos:start="2435:21" pos:end="2435:56"><operator pos:start="2435:21" pos:end="2435:21">(</operator><name pos:start="2435:22" pos:end="2435:24">op2</name> <operator pos:start="2435:26" pos:end="2435:27">==</operator> <literal type="number" pos:start="2435:29" pos:end="2435:29">0</literal><operator pos:start="2435:30" pos:end="2435:30">)</operator> <operator pos:start="2435:32" pos:end="2435:33">||</operator> <operator pos:start="2435:35" pos:end="2435:35">(</operator><operator pos:start="2435:36" pos:end="2435:36">(</operator><name pos:start="2435:37" pos:end="2435:39">op2</name> <operator pos:start="2435:41" pos:end="2435:41">&amp;</operator> <literal type="number" pos:start="2435:43" pos:end="2435:46">0x3c</literal><operator pos:start="2435:47" pos:end="2435:47">)</operator> <operator pos:start="2435:49" pos:end="2435:50">==</operator> <literal type="number" pos:start="2435:52" pos:end="2435:55">0x30</literal><operator pos:start="2435:56" pos:end="2435:56">)</operator></expr>)</condition> <block pos:start="2435:59" pos:end="2439:17">{<block_content pos:start="2437:21" pos:end="2437:29">

                    <return pos:start="2437:21" pos:end="2437:29">return <expr pos:start="2437:28" pos:end="2437:28"><literal type="number" pos:start="2437:28" pos:end="2437:28">0</literal></expr>;</return> <comment type="block" pos:start="2437:31" pos:end="2437:68">/* PLD/PLDW/PLI or unallocated hint */</comment>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="2441:17" pos:end="2441:54">/* UNDEF space, or an UNPREDICTABLE */</comment>

                <return pos:start="2443:17" pos:end="2443:25">return <expr pos:start="2443:24" pos:end="2443:24"><literal type="number" pos:start="2443:24" pos:end="2443:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="2449:9" pos:end="2449:34"><expr pos:start="2449:9" pos:end="2449:33"><name pos:start="2449:9" pos:end="2449:14">memidx</name> <operator pos:start="2449:16" pos:end="2449:16">=</operator> <call pos:start="2449:18" pos:end="2449:33"><name pos:start="2449:18" pos:end="2449:30">get_mem_index</name><argument_list pos:start="2449:31" pos:end="2449:33">(<argument pos:start="2449:32" pos:end="2449:32"><expr pos:start="2449:32" pos:end="2449:32"><name pos:start="2449:32" pos:end="2449:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2451:9" pos:end="2565:9"><if pos:start="2451:9" pos:end="2471:9">if <condition pos:start="2451:12" pos:end="2451:21">(<expr pos:start="2451:13" pos:end="2451:20"><name pos:start="2451:13" pos:end="2451:14">rn</name> <operator pos:start="2451:16" pos:end="2451:17">==</operator> <literal type="number" pos:start="2451:19" pos:end="2451:20">15</literal></expr>)</condition> <block pos:start="2451:23" pos:end="2471:9">{<block_content pos:start="2453:13" pos:end="2469:40">

            <expr_stmt pos:start="2453:13" pos:end="2453:38"><expr pos:start="2453:13" pos:end="2453:37"><name pos:start="2453:13" pos:end="2453:16">addr</name> <operator pos:start="2453:18" pos:end="2453:18">=</operator> <call pos:start="2453:20" pos:end="2453:37"><name pos:start="2453:20" pos:end="2453:35">tcg_temp_new_i32</name><argument_list pos:start="2453:36" pos:end="2453:37">()</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="2455:13" pos:end="2455:31">/* PC relative.  */</comment>

            <comment type="block" pos:start="2457:13" pos:end="2457:59">/* s-&gt;pc has already been incremented by 4.  */</comment>

            <expr_stmt pos:start="2459:13" pos:end="2459:37"><expr pos:start="2459:13" pos:end="2459:36"><name pos:start="2459:13" pos:end="2459:15">imm</name> <operator pos:start="2459:17" pos:end="2459:17">=</operator> <name pos:start="2459:19" pos:end="2459:23"><name pos:start="2459:19" pos:end="2459:19">s</name><operator pos:start="2459:20" pos:end="2459:21">-&gt;</operator><name pos:start="2459:22" pos:end="2459:23">pc</name></name> <operator pos:start="2459:25" pos:end="2459:25">&amp;</operator> <literal type="number" pos:start="2459:27" pos:end="2459:36">0xfffffffc</literal></expr>;</expr_stmt>

            <if_stmt pos:start="2461:13" pos:end="2467:36"><if pos:start="2461:13" pos:end="2463:36">if <condition pos:start="2461:16" pos:end="2461:33">(<expr pos:start="2461:17" pos:end="2461:32"><name pos:start="2461:17" pos:end="2461:20">insn</name> <operator pos:start="2461:22" pos:end="2461:22">&amp;</operator> <operator pos:start="2461:24" pos:end="2461:24">(</operator><literal type="number" pos:start="2461:25" pos:end="2461:25">1</literal> <operator pos:start="2461:27" pos:end="2461:28">&lt;&lt;</operator> <literal type="number" pos:start="2461:30" pos:end="2461:31">23</literal><operator pos:start="2461:32" pos:end="2461:32">)</operator></expr>)</condition><block type="pseudo" pos:start="2463:17" pos:end="2463:36"><block_content pos:start="2463:17" pos:end="2463:36">

                <expr_stmt pos:start="2463:17" pos:end="2463:36"><expr pos:start="2463:17" pos:end="2463:35"><name pos:start="2463:17" pos:end="2463:19">imm</name> <operator pos:start="2463:21" pos:end="2463:22">+=</operator> <name pos:start="2463:24" pos:end="2463:27">insn</name> <operator pos:start="2463:29" pos:end="2463:29">&amp;</operator> <literal type="number" pos:start="2463:31" pos:end="2463:35">0xfff</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2465:13" pos:end="2467:36">else<block type="pseudo" pos:start="2467:17" pos:end="2467:36"><block_content pos:start="2467:17" pos:end="2467:36">

                <expr_stmt pos:start="2467:17" pos:end="2467:36"><expr pos:start="2467:17" pos:end="2467:35"><name pos:start="2467:17" pos:end="2467:19">imm</name> <operator pos:start="2467:21" pos:end="2467:22">-=</operator> <name pos:start="2467:24" pos:end="2467:27">insn</name> <operator pos:start="2467:29" pos:end="2467:29">&amp;</operator> <literal type="number" pos:start="2467:31" pos:end="2467:35">0xfff</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2469:13" pos:end="2469:40"><expr pos:start="2469:13" pos:end="2469:39"><call pos:start="2469:13" pos:end="2469:39"><name pos:start="2469:13" pos:end="2469:28">tcg_gen_movi_i32</name><argument_list pos:start="2469:29" pos:end="2469:39">(<argument pos:start="2469:30" pos:end="2469:33"><expr pos:start="2469:30" pos:end="2469:33"><name pos:start="2469:30" pos:end="2469:33">addr</name></expr></argument>, <argument pos:start="2469:36" pos:end="2469:38"><expr pos:start="2469:36" pos:end="2469:38"><name pos:start="2469:36" pos:end="2469:38">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2471:11" pos:end="2565:9">else <block pos:start="2471:16" pos:end="2565:9">{<block_content pos:start="2473:13" pos:end="2563:13">

            <expr_stmt pos:start="2473:13" pos:end="2473:35"><expr pos:start="2473:13" pos:end="2473:34"><name pos:start="2473:13" pos:end="2473:16">addr</name> <operator pos:start="2473:18" pos:end="2473:18">=</operator> <call pos:start="2473:20" pos:end="2473:34"><name pos:start="2473:20" pos:end="2473:27">load_reg</name><argument_list pos:start="2473:28" pos:end="2473:34">(<argument pos:start="2473:29" pos:end="2473:29"><expr pos:start="2473:29" pos:end="2473:29"><name pos:start="2473:29" pos:end="2473:29">s</name></expr></argument>, <argument pos:start="2473:32" pos:end="2473:33"><expr pos:start="2473:32" pos:end="2473:33"><name pos:start="2473:32" pos:end="2473:33">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="2475:13" pos:end="2563:13"><if pos:start="2475:13" pos:end="2483:13">if <condition pos:start="2475:16" pos:end="2475:33">(<expr pos:start="2475:17" pos:end="2475:32"><name pos:start="2475:17" pos:end="2475:20">insn</name> <operator pos:start="2475:22" pos:end="2475:22">&amp;</operator> <operator pos:start="2475:24" pos:end="2475:24">(</operator><literal type="number" pos:start="2475:25" pos:end="2475:25">1</literal> <operator pos:start="2475:27" pos:end="2475:28">&lt;&lt;</operator> <literal type="number" pos:start="2475:30" pos:end="2475:31">23</literal><operator pos:start="2475:32" pos:end="2475:32">)</operator></expr>)</condition> <block pos:start="2475:35" pos:end="2483:13">{<block_content pos:start="2479:17" pos:end="2481:50">

                <comment type="block" pos:start="2477:17" pos:end="2477:39">/* Positive offset.  */</comment>

                <expr_stmt pos:start="2479:17" pos:end="2479:35"><expr pos:start="2479:17" pos:end="2479:34"><name pos:start="2479:17" pos:end="2479:19">imm</name> <operator pos:start="2479:21" pos:end="2479:21">=</operator> <name pos:start="2479:23" pos:end="2479:26">insn</name> <operator pos:start="2479:28" pos:end="2479:28">&amp;</operator> <literal type="number" pos:start="2479:30" pos:end="2479:34">0xfff</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="2481:17" pos:end="2481:50"><expr pos:start="2481:17" pos:end="2481:49"><call pos:start="2481:17" pos:end="2481:49"><name pos:start="2481:17" pos:end="2481:32">tcg_gen_addi_i32</name><argument_list pos:start="2481:33" pos:end="2481:49">(<argument pos:start="2481:34" pos:end="2481:37"><expr pos:start="2481:34" pos:end="2481:37"><name pos:start="2481:34" pos:end="2481:37">addr</name></expr></argument>, <argument pos:start="2481:40" pos:end="2481:43"><expr pos:start="2481:40" pos:end="2481:43"><name pos:start="2481:40" pos:end="2481:43">addr</name></expr></argument>, <argument pos:start="2481:46" pos:end="2481:48"><expr pos:start="2481:46" pos:end="2481:48"><name pos:start="2481:46" pos:end="2481:48">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2483:15" pos:end="2563:13">else <block pos:start="2483:20" pos:end="2563:13">{<block_content pos:start="2485:17" pos:end="2561:17">

                <expr_stmt pos:start="2485:17" pos:end="2485:34"><expr pos:start="2485:17" pos:end="2485:33"><name pos:start="2485:17" pos:end="2485:19">imm</name> <operator pos:start="2485:21" pos:end="2485:21">=</operator> <name pos:start="2485:23" pos:end="2485:26">insn</name> <operator pos:start="2485:28" pos:end="2485:28">&amp;</operator> <literal type="number" pos:start="2485:30" pos:end="2485:33">0xff</literal></expr>;</expr_stmt>

                <switch pos:start="2487:17" pos:end="2561:17">switch <condition pos:start="2487:24" pos:end="2487:42">(<expr pos:start="2487:25" pos:end="2487:41"><operator pos:start="2487:25" pos:end="2487:25">(</operator><name pos:start="2487:26" pos:end="2487:29">insn</name> <operator pos:start="2487:31" pos:end="2487:32">&gt;&gt;</operator> <literal type="number" pos:start="2487:34" pos:end="2487:34">8</literal><operator pos:start="2487:35" pos:end="2487:35">)</operator> <operator pos:start="2487:37" pos:end="2487:37">&amp;</operator> <literal type="number" pos:start="2487:39" pos:end="2487:41">0xf</literal></expr>)</condition> <block pos:start="2487:44" pos:end="2561:17">{<block_content pos:start="2489:17" pos:end="2559:36">

                <case pos:start="2489:17" pos:end="2489:25">case <expr pos:start="2489:22" pos:end="2489:24"><literal type="number" pos:start="2489:22" pos:end="2489:24">0x0</literal></expr>:</case> <comment type="block" pos:start="2489:27" pos:end="2489:50">/* Shifted Register.  */</comment>

                    <expr_stmt pos:start="2491:21" pos:end="2491:46"><expr pos:start="2491:21" pos:end="2491:45"><name pos:start="2491:21" pos:end="2491:25">shift</name> <operator pos:start="2491:27" pos:end="2491:27">=</operator> <operator pos:start="2491:29" pos:end="2491:29">(</operator><name pos:start="2491:30" pos:end="2491:33">insn</name> <operator pos:start="2491:35" pos:end="2491:36">&gt;&gt;</operator> <literal type="number" pos:start="2491:38" pos:end="2491:38">4</literal><operator pos:start="2491:39" pos:end="2491:39">)</operator> <operator pos:start="2491:41" pos:end="2491:41">&amp;</operator> <literal type="number" pos:start="2491:43" pos:end="2491:45">0xf</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="2493:21" pos:end="2499:21"><if pos:start="2493:21" pos:end="2499:21">if <condition pos:start="2493:24" pos:end="2493:34">(<expr pos:start="2493:25" pos:end="2493:33"><name pos:start="2493:25" pos:end="2493:29">shift</name> <operator pos:start="2493:31" pos:end="2493:31">&gt;</operator> <literal type="number" pos:start="2493:33" pos:end="2493:33">3</literal></expr>)</condition> <block pos:start="2493:36" pos:end="2499:21">{<block_content pos:start="2495:25" pos:end="2497:40">

                        <expr_stmt pos:start="2495:25" pos:end="2495:48"><expr pos:start="2495:25" pos:end="2495:47"><call pos:start="2495:25" pos:end="2495:47"><name pos:start="2495:25" pos:end="2495:41">tcg_temp_free_i32</name><argument_list pos:start="2495:42" pos:end="2495:47">(<argument pos:start="2495:43" pos:end="2495:46"><expr pos:start="2495:43" pos:end="2495:46"><name pos:start="2495:43" pos:end="2495:46">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="2497:25" pos:end="2497:40">goto <name pos:start="2497:30" pos:end="2497:39">illegal_op</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="2501:21" pos:end="2501:42"><expr pos:start="2501:21" pos:end="2501:41"><name pos:start="2501:21" pos:end="2501:23">tmp</name> <operator pos:start="2501:25" pos:end="2501:25">=</operator> <call pos:start="2501:27" pos:end="2501:41"><name pos:start="2501:27" pos:end="2501:34">load_reg</name><argument_list pos:start="2501:35" pos:end="2501:41">(<argument pos:start="2501:36" pos:end="2501:36"><expr pos:start="2501:36" pos:end="2501:36"><name pos:start="2501:36" pos:end="2501:36">s</name></expr></argument>, <argument pos:start="2501:39" pos:end="2501:40"><expr pos:start="2501:39" pos:end="2501:40"><name pos:start="2501:39" pos:end="2501:40">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2503:21" pos:end="2505:58"><if pos:start="2503:21" pos:end="2505:58">if <condition pos:start="2503:24" pos:end="2503:30">(<expr pos:start="2503:25" pos:end="2503:29"><name pos:start="2503:25" pos:end="2503:29">shift</name></expr>)</condition><block type="pseudo" pos:start="2505:25" pos:end="2505:58"><block_content pos:start="2505:25" pos:end="2505:58">

                        <expr_stmt pos:start="2505:25" pos:end="2505:58"><expr pos:start="2505:25" pos:end="2505:57"><call pos:start="2505:25" pos:end="2505:57"><name pos:start="2505:25" pos:end="2505:40">tcg_gen_shli_i32</name><argument_list pos:start="2505:41" pos:end="2505:57">(<argument pos:start="2505:42" pos:end="2505:44"><expr pos:start="2505:42" pos:end="2505:44"><name pos:start="2505:42" pos:end="2505:44">tmp</name></expr></argument>, <argument pos:start="2505:47" pos:end="2505:49"><expr pos:start="2505:47" pos:end="2505:49"><name pos:start="2505:47" pos:end="2505:49">tmp</name></expr></argument>, <argument pos:start="2505:52" pos:end="2505:56"><expr pos:start="2505:52" pos:end="2505:56"><name pos:start="2505:52" pos:end="2505:56">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="2507:21" pos:end="2507:53"><expr pos:start="2507:21" pos:end="2507:52"><call pos:start="2507:21" pos:end="2507:52"><name pos:start="2507:21" pos:end="2507:35">tcg_gen_add_i32</name><argument_list pos:start="2507:36" pos:end="2507:52">(<argument pos:start="2507:37" pos:end="2507:40"><expr pos:start="2507:37" pos:end="2507:40"><name pos:start="2507:37" pos:end="2507:40">addr</name></expr></argument>, <argument pos:start="2507:43" pos:end="2507:46"><expr pos:start="2507:43" pos:end="2507:46"><name pos:start="2507:43" pos:end="2507:46">addr</name></expr></argument>, <argument pos:start="2507:49" pos:end="2507:51"><expr pos:start="2507:49" pos:end="2507:51"><name pos:start="2507:49" pos:end="2507:51">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2509:21" pos:end="2509:43"><expr pos:start="2509:21" pos:end="2509:42"><call pos:start="2509:21" pos:end="2509:42"><name pos:start="2509:21" pos:end="2509:37">tcg_temp_free_i32</name><argument_list pos:start="2509:38" pos:end="2509:42">(<argument pos:start="2509:39" pos:end="2509:41"><expr pos:start="2509:39" pos:end="2509:41"><name pos:start="2509:39" pos:end="2509:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2511:21" pos:end="2511:26">break;</break>

                <case pos:start="2513:17" pos:end="2513:25">case <expr pos:start="2513:22" pos:end="2513:24"><literal type="number" pos:start="2513:22" pos:end="2513:24">0xc</literal></expr>:</case> <comment type="block" pos:start="2513:27" pos:end="2513:49">/* Negative offset.  */</comment>

                    <expr_stmt pos:start="2515:21" pos:end="2515:55"><expr pos:start="2515:21" pos:end="2515:54"><call pos:start="2515:21" pos:end="2515:54"><name pos:start="2515:21" pos:end="2515:36">tcg_gen_addi_i32</name><argument_list pos:start="2515:37" pos:end="2515:54">(<argument pos:start="2515:38" pos:end="2515:41"><expr pos:start="2515:38" pos:end="2515:41"><name pos:start="2515:38" pos:end="2515:41">addr</name></expr></argument>, <argument pos:start="2515:44" pos:end="2515:47"><expr pos:start="2515:44" pos:end="2515:47"><name pos:start="2515:44" pos:end="2515:47">addr</name></expr></argument>, <argument pos:start="2515:50" pos:end="2515:53"><expr pos:start="2515:50" pos:end="2515:53"><operator pos:start="2515:50" pos:end="2515:50">-</operator><name pos:start="2515:51" pos:end="2515:53">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2517:21" pos:end="2517:26">break;</break>

                <case pos:start="2519:17" pos:end="2519:25">case <expr pos:start="2519:22" pos:end="2519:24"><literal type="number" pos:start="2519:22" pos:end="2519:24">0xe</literal></expr>:</case> <comment type="block" pos:start="2519:27" pos:end="2519:48">/* User privilege.  */</comment>

                    <expr_stmt pos:start="2521:21" pos:end="2521:54"><expr pos:start="2521:21" pos:end="2521:53"><call pos:start="2521:21" pos:end="2521:53"><name pos:start="2521:21" pos:end="2521:36">tcg_gen_addi_i32</name><argument_list pos:start="2521:37" pos:end="2521:53">(<argument pos:start="2521:38" pos:end="2521:41"><expr pos:start="2521:38" pos:end="2521:41"><name pos:start="2521:38" pos:end="2521:41">addr</name></expr></argument>, <argument pos:start="2521:44" pos:end="2521:47"><expr pos:start="2521:44" pos:end="2521:47"><name pos:start="2521:44" pos:end="2521:47">addr</name></expr></argument>, <argument pos:start="2521:50" pos:end="2521:52"><expr pos:start="2521:50" pos:end="2521:52"><name pos:start="2521:50" pos:end="2521:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2523:21" pos:end="2523:55"><expr pos:start="2523:21" pos:end="2523:54"><name pos:start="2523:21" pos:end="2523:26">memidx</name> <operator pos:start="2523:28" pos:end="2523:28">=</operator> <call pos:start="2523:30" pos:end="2523:54"><name pos:start="2523:30" pos:end="2523:51">get_a32_user_mem_index</name><argument_list pos:start="2523:52" pos:end="2523:54">(<argument pos:start="2523:53" pos:end="2523:53"><expr pos:start="2523:53" pos:end="2523:53"><name pos:start="2523:53" pos:end="2523:53">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2525:21" pos:end="2525:26">break;</break>

                <case pos:start="2527:17" pos:end="2527:25">case <expr pos:start="2527:22" pos:end="2527:24"><literal type="number" pos:start="2527:22" pos:end="2527:24">0x9</literal></expr>:</case> <comment type="block" pos:start="2527:27" pos:end="2527:48">/* Post-decrement.  */</comment>

                    <expr_stmt pos:start="2529:21" pos:end="2529:31"><expr pos:start="2529:21" pos:end="2529:30"><name pos:start="2529:21" pos:end="2529:23">imm</name> <operator pos:start="2529:25" pos:end="2529:25">=</operator> <operator pos:start="2529:27" pos:end="2529:27">-</operator><name pos:start="2529:28" pos:end="2529:30">imm</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="2531:21" pos:end="2531:40">/* Fall through.  */</comment>

                <case pos:start="2533:17" pos:end="2533:25">case <expr pos:start="2533:22" pos:end="2533:24"><literal type="number" pos:start="2533:22" pos:end="2533:24">0xb</literal></expr>:</case> <comment type="block" pos:start="2533:27" pos:end="2533:48">/* Post-increment.  */</comment>

                    <expr_stmt pos:start="2535:21" pos:end="2535:32"><expr pos:start="2535:21" pos:end="2535:31"><name pos:start="2535:21" pos:end="2535:27">postinc</name> <operator pos:start="2535:29" pos:end="2535:29">=</operator> <literal type="number" pos:start="2535:31" pos:end="2535:31">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="2537:21" pos:end="2537:34"><expr pos:start="2537:21" pos:end="2537:33"><name pos:start="2537:21" pos:end="2537:29">writeback</name> <operator pos:start="2537:31" pos:end="2537:31">=</operator> <literal type="number" pos:start="2537:33" pos:end="2537:33">1</literal></expr>;</expr_stmt>

                    <break pos:start="2539:21" pos:end="2539:26">break;</break>

                <case pos:start="2541:17" pos:end="2541:25">case <expr pos:start="2541:22" pos:end="2541:24"><literal type="number" pos:start="2541:22" pos:end="2541:24">0xd</literal></expr>:</case> <comment type="block" pos:start="2541:27" pos:end="2541:47">/* Pre-decrement.  */</comment>

                    <expr_stmt pos:start="2543:21" pos:end="2543:31"><expr pos:start="2543:21" pos:end="2543:30"><name pos:start="2543:21" pos:end="2543:23">imm</name> <operator pos:start="2543:25" pos:end="2543:25">=</operator> <operator pos:start="2543:27" pos:end="2543:27">-</operator><name pos:start="2543:28" pos:end="2543:30">imm</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="2545:21" pos:end="2545:40">/* Fall through.  */</comment>

                <case pos:start="2547:17" pos:end="2547:25">case <expr pos:start="2547:22" pos:end="2547:24"><literal type="number" pos:start="2547:22" pos:end="2547:24">0xf</literal></expr>:</case> <comment type="block" pos:start="2547:27" pos:end="2547:47">/* Pre-increment.  */</comment>

                    <expr_stmt pos:start="2549:21" pos:end="2549:54"><expr pos:start="2549:21" pos:end="2549:53"><call pos:start="2549:21" pos:end="2549:53"><name pos:start="2549:21" pos:end="2549:36">tcg_gen_addi_i32</name><argument_list pos:start="2549:37" pos:end="2549:53">(<argument pos:start="2549:38" pos:end="2549:41"><expr pos:start="2549:38" pos:end="2549:41"><name pos:start="2549:38" pos:end="2549:41">addr</name></expr></argument>, <argument pos:start="2549:44" pos:end="2549:47"><expr pos:start="2549:44" pos:end="2549:47"><name pos:start="2549:44" pos:end="2549:47">addr</name></expr></argument>, <argument pos:start="2549:50" pos:end="2549:52"><expr pos:start="2549:50" pos:end="2549:52"><name pos:start="2549:50" pos:end="2549:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2551:21" pos:end="2551:34"><expr pos:start="2551:21" pos:end="2551:33"><name pos:start="2551:21" pos:end="2551:29">writeback</name> <operator pos:start="2551:31" pos:end="2551:31">=</operator> <literal type="number" pos:start="2551:33" pos:end="2551:33">1</literal></expr>;</expr_stmt>

                    <break pos:start="2553:21" pos:end="2553:26">break;</break>

                <default pos:start="2555:17" pos:end="2555:24">default:</default>

                    <expr_stmt pos:start="2557:21" pos:end="2557:44"><expr pos:start="2557:21" pos:end="2557:43"><call pos:start="2557:21" pos:end="2557:43"><name pos:start="2557:21" pos:end="2557:37">tcg_temp_free_i32</name><argument_list pos:start="2557:38" pos:end="2557:43">(<argument pos:start="2557:39" pos:end="2557:42"><expr pos:start="2557:39" pos:end="2557:42"><name pos:start="2557:39" pos:end="2557:42">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="2559:21" pos:end="2559:36">goto <name pos:start="2559:26" pos:end="2559:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="2569:9" pos:end="2569:46"><expr pos:start="2569:9" pos:end="2569:45"><name pos:start="2569:9" pos:end="2569:15">issinfo</name> <operator pos:start="2569:17" pos:end="2569:17">=</operator> <ternary pos:start="2569:19" pos:end="2569:45"><condition pos:start="2569:19" pos:end="2569:29"><expr pos:start="2569:19" pos:end="2569:27"><name pos:start="2569:19" pos:end="2569:27">writeback</name></expr> ?</condition><then pos:start="2569:31" pos:end="2569:40"> <expr pos:start="2569:31" pos:end="2569:40"><name pos:start="2569:31" pos:end="2569:40">ISSInvalid</name></expr> </then><else pos:start="2569:42" pos:end="2569:45">: <expr pos:start="2569:44" pos:end="2569:45"><name pos:start="2569:44" pos:end="2569:45">rs</name></expr></else></ternary></expr>;</expr_stmt>



        <if_stmt pos:start="2573:9" pos:end="2669:9"><if pos:start="2573:9" pos:end="2631:9">if <condition pos:start="2573:12" pos:end="2573:29">(<expr pos:start="2573:13" pos:end="2573:28"><name pos:start="2573:13" pos:end="2573:16">insn</name> <operator pos:start="2573:18" pos:end="2573:18">&amp;</operator> <operator pos:start="2573:20" pos:end="2573:20">(</operator><literal type="number" pos:start="2573:21" pos:end="2573:21">1</literal> <operator pos:start="2573:23" pos:end="2573:24">&lt;&lt;</operator> <literal type="number" pos:start="2573:26" pos:end="2573:27">20</literal><operator pos:start="2573:28" pos:end="2573:28">)</operator></expr>)</condition> <block pos:start="2573:31" pos:end="2631:9">{<block_content pos:start="2577:13" pos:end="2629:13">

            <comment type="block" pos:start="2575:13" pos:end="2575:24">/* Load.  */</comment>

            <expr_stmt pos:start="2577:13" pos:end="2577:37"><expr pos:start="2577:13" pos:end="2577:36"><name pos:start="2577:13" pos:end="2577:15">tmp</name> <operator pos:start="2577:17" pos:end="2577:17">=</operator> <call pos:start="2577:19" pos:end="2577:36"><name pos:start="2577:19" pos:end="2577:34">tcg_temp_new_i32</name><argument_list pos:start="2577:35" pos:end="2577:36">()</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2579:13" pos:end="2619:13">switch <condition pos:start="2579:20" pos:end="2579:23">(<expr pos:start="2579:21" pos:end="2579:22"><name pos:start="2579:21" pos:end="2579:22">op</name></expr>)</condition> <block pos:start="2579:25" pos:end="2619:13">{<block_content pos:start="2581:13" pos:end="2617:32">

            <case pos:start="2581:13" pos:end="2581:19">case <expr pos:start="2581:18" pos:end="2581:18"><literal type="number" pos:start="2581:18" pos:end="2581:18">0</literal></expr>:</case>

                <expr_stmt pos:start="2583:17" pos:end="2583:65"><expr pos:start="2583:17" pos:end="2583:64"><call pos:start="2583:17" pos:end="2583:64"><name pos:start="2583:17" pos:end="2583:33">gen_aa32_ld8u_iss</name><argument_list pos:start="2583:34" pos:end="2583:64">(<argument pos:start="2583:35" pos:end="2583:35"><expr pos:start="2583:35" pos:end="2583:35"><name pos:start="2583:35" pos:end="2583:35">s</name></expr></argument>, <argument pos:start="2583:38" pos:end="2583:40"><expr pos:start="2583:38" pos:end="2583:40"><name pos:start="2583:38" pos:end="2583:40">tmp</name></expr></argument>, <argument pos:start="2583:43" pos:end="2583:46"><expr pos:start="2583:43" pos:end="2583:46"><name pos:start="2583:43" pos:end="2583:46">addr</name></expr></argument>, <argument pos:start="2583:49" pos:end="2583:54"><expr pos:start="2583:49" pos:end="2583:54"><name pos:start="2583:49" pos:end="2583:54">memidx</name></expr></argument>, <argument pos:start="2583:57" pos:end="2583:63"><expr pos:start="2583:57" pos:end="2583:63"><name pos:start="2583:57" pos:end="2583:63">issinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2585:17" pos:end="2585:22">break;</break>

            <case pos:start="2587:13" pos:end="2587:19">case <expr pos:start="2587:18" pos:end="2587:18"><literal type="number" pos:start="2587:18" pos:end="2587:18">4</literal></expr>:</case>

                <expr_stmt pos:start="2589:17" pos:end="2589:65"><expr pos:start="2589:17" pos:end="2589:64"><call pos:start="2589:17" pos:end="2589:64"><name pos:start="2589:17" pos:end="2589:33">gen_aa32_ld8s_iss</name><argument_list pos:start="2589:34" pos:end="2589:64">(<argument pos:start="2589:35" pos:end="2589:35"><expr pos:start="2589:35" pos:end="2589:35"><name pos:start="2589:35" pos:end="2589:35">s</name></expr></argument>, <argument pos:start="2589:38" pos:end="2589:40"><expr pos:start="2589:38" pos:end="2589:40"><name pos:start="2589:38" pos:end="2589:40">tmp</name></expr></argument>, <argument pos:start="2589:43" pos:end="2589:46"><expr pos:start="2589:43" pos:end="2589:46"><name pos:start="2589:43" pos:end="2589:46">addr</name></expr></argument>, <argument pos:start="2589:49" pos:end="2589:54"><expr pos:start="2589:49" pos:end="2589:54"><name pos:start="2589:49" pos:end="2589:54">memidx</name></expr></argument>, <argument pos:start="2589:57" pos:end="2589:63"><expr pos:start="2589:57" pos:end="2589:63"><name pos:start="2589:57" pos:end="2589:63">issinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2591:17" pos:end="2591:22">break;</break>

            <case pos:start="2593:13" pos:end="2593:19">case <expr pos:start="2593:18" pos:end="2593:18"><literal type="number" pos:start="2593:18" pos:end="2593:18">1</literal></expr>:</case>

                <expr_stmt pos:start="2595:17" pos:end="2595:66"><expr pos:start="2595:17" pos:end="2595:65"><call pos:start="2595:17" pos:end="2595:65"><name pos:start="2595:17" pos:end="2595:34">gen_aa32_ld16u_iss</name><argument_list pos:start="2595:35" pos:end="2595:65">(<argument pos:start="2595:36" pos:end="2595:36"><expr pos:start="2595:36" pos:end="2595:36"><name pos:start="2595:36" pos:end="2595:36">s</name></expr></argument>, <argument pos:start="2595:39" pos:end="2595:41"><expr pos:start="2595:39" pos:end="2595:41"><name pos:start="2595:39" pos:end="2595:41">tmp</name></expr></argument>, <argument pos:start="2595:44" pos:end="2595:47"><expr pos:start="2595:44" pos:end="2595:47"><name pos:start="2595:44" pos:end="2595:47">addr</name></expr></argument>, <argument pos:start="2595:50" pos:end="2595:55"><expr pos:start="2595:50" pos:end="2595:55"><name pos:start="2595:50" pos:end="2595:55">memidx</name></expr></argument>, <argument pos:start="2595:58" pos:end="2595:64"><expr pos:start="2595:58" pos:end="2595:64"><name pos:start="2595:58" pos:end="2595:64">issinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2597:17" pos:end="2597:22">break;</break>

            <case pos:start="2599:13" pos:end="2599:19">case <expr pos:start="2599:18" pos:end="2599:18"><literal type="number" pos:start="2599:18" pos:end="2599:18">5</literal></expr>:</case>

                <expr_stmt pos:start="2601:17" pos:end="2601:66"><expr pos:start="2601:17" pos:end="2601:65"><call pos:start="2601:17" pos:end="2601:65"><name pos:start="2601:17" pos:end="2601:34">gen_aa32_ld16s_iss</name><argument_list pos:start="2601:35" pos:end="2601:65">(<argument pos:start="2601:36" pos:end="2601:36"><expr pos:start="2601:36" pos:end="2601:36"><name pos:start="2601:36" pos:end="2601:36">s</name></expr></argument>, <argument pos:start="2601:39" pos:end="2601:41"><expr pos:start="2601:39" pos:end="2601:41"><name pos:start="2601:39" pos:end="2601:41">tmp</name></expr></argument>, <argument pos:start="2601:44" pos:end="2601:47"><expr pos:start="2601:44" pos:end="2601:47"><name pos:start="2601:44" pos:end="2601:47">addr</name></expr></argument>, <argument pos:start="2601:50" pos:end="2601:55"><expr pos:start="2601:50" pos:end="2601:55"><name pos:start="2601:50" pos:end="2601:55">memidx</name></expr></argument>, <argument pos:start="2601:58" pos:end="2601:64"><expr pos:start="2601:58" pos:end="2601:64"><name pos:start="2601:58" pos:end="2601:64">issinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2603:17" pos:end="2603:22">break;</break>

            <case pos:start="2605:13" pos:end="2605:19">case <expr pos:start="2605:18" pos:end="2605:18"><literal type="number" pos:start="2605:18" pos:end="2605:18">2</literal></expr>:</case>

                <expr_stmt pos:start="2607:17" pos:end="2607:66"><expr pos:start="2607:17" pos:end="2607:65"><call pos:start="2607:17" pos:end="2607:65"><name pos:start="2607:17" pos:end="2607:34">gen_aa32_ld32u_iss</name><argument_list pos:start="2607:35" pos:end="2607:65">(<argument pos:start="2607:36" pos:end="2607:36"><expr pos:start="2607:36" pos:end="2607:36"><name pos:start="2607:36" pos:end="2607:36">s</name></expr></argument>, <argument pos:start="2607:39" pos:end="2607:41"><expr pos:start="2607:39" pos:end="2607:41"><name pos:start="2607:39" pos:end="2607:41">tmp</name></expr></argument>, <argument pos:start="2607:44" pos:end="2607:47"><expr pos:start="2607:44" pos:end="2607:47"><name pos:start="2607:44" pos:end="2607:47">addr</name></expr></argument>, <argument pos:start="2607:50" pos:end="2607:55"><expr pos:start="2607:50" pos:end="2607:55"><name pos:start="2607:50" pos:end="2607:55">memidx</name></expr></argument>, <argument pos:start="2607:58" pos:end="2607:64"><expr pos:start="2607:58" pos:end="2607:64"><name pos:start="2607:58" pos:end="2607:64">issinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2609:17" pos:end="2609:22">break;</break>

            <default pos:start="2611:13" pos:end="2611:20">default:</default>

                <expr_stmt pos:start="2613:17" pos:end="2613:39"><expr pos:start="2613:17" pos:end="2613:38"><call pos:start="2613:17" pos:end="2613:38"><name pos:start="2613:17" pos:end="2613:33">tcg_temp_free_i32</name><argument_list pos:start="2613:34" pos:end="2613:38">(<argument pos:start="2613:35" pos:end="2613:37"><expr pos:start="2613:35" pos:end="2613:37"><name pos:start="2613:35" pos:end="2613:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2615:17" pos:end="2615:40"><expr pos:start="2615:17" pos:end="2615:39"><call pos:start="2615:17" pos:end="2615:39"><name pos:start="2615:17" pos:end="2615:33">tcg_temp_free_i32</name><argument_list pos:start="2615:34" pos:end="2615:39">(<argument pos:start="2615:35" pos:end="2615:38"><expr pos:start="2615:35" pos:end="2615:38"><name pos:start="2615:35" pos:end="2615:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="2617:17" pos:end="2617:32">goto <name pos:start="2617:22" pos:end="2617:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <if_stmt pos:start="2621:13" pos:end="2629:13"><if pos:start="2621:13" pos:end="2625:13">if <condition pos:start="2621:16" pos:end="2621:25">(<expr pos:start="2621:17" pos:end="2621:24"><name pos:start="2621:17" pos:end="2621:18">rs</name> <operator pos:start="2621:20" pos:end="2621:21">==</operator> <literal type="number" pos:start="2621:23" pos:end="2621:24">15</literal></expr>)</condition> <block pos:start="2621:27" pos:end="2625:13">{<block_content pos:start="2623:17" pos:end="2623:38">

                <expr_stmt pos:start="2623:17" pos:end="2623:38"><expr pos:start="2623:17" pos:end="2623:37"><call pos:start="2623:17" pos:end="2623:37"><name pos:start="2623:17" pos:end="2623:29">gen_bx_excret</name><argument_list pos:start="2623:30" pos:end="2623:37">(<argument pos:start="2623:31" pos:end="2623:31"><expr pos:start="2623:31" pos:end="2623:31"><name pos:start="2623:31" pos:end="2623:31">s</name></expr></argument>, <argument pos:start="2623:34" pos:end="2623:36"><expr pos:start="2623:34" pos:end="2623:36"><name pos:start="2623:34" pos:end="2623:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2625:15" pos:end="2629:13">else <block pos:start="2625:20" pos:end="2629:13">{<block_content pos:start="2627:17" pos:end="2627:38">

                <expr_stmt pos:start="2627:17" pos:end="2627:38"><expr pos:start="2627:17" pos:end="2627:37"><call pos:start="2627:17" pos:end="2627:37"><name pos:start="2627:17" pos:end="2627:25">store_reg</name><argument_list pos:start="2627:26" pos:end="2627:37">(<argument pos:start="2627:27" pos:end="2627:27"><expr pos:start="2627:27" pos:end="2627:27"><name pos:start="2627:27" pos:end="2627:27">s</name></expr></argument>, <argument pos:start="2627:30" pos:end="2627:31"><expr pos:start="2627:30" pos:end="2627:31"><name pos:start="2627:30" pos:end="2627:31">rs</name></expr></argument>, <argument pos:start="2627:34" pos:end="2627:36"><expr pos:start="2627:34" pos:end="2627:36"><name pos:start="2627:34" pos:end="2627:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="2631:11" pos:end="2669:9">else <block pos:start="2631:16" pos:end="2669:9">{<block_content pos:start="2635:13" pos:end="2667:35">

            <comment type="block" pos:start="2633:13" pos:end="2633:25">/* Store.  */</comment>

            <expr_stmt pos:start="2635:13" pos:end="2635:34"><expr pos:start="2635:13" pos:end="2635:33"><name pos:start="2635:13" pos:end="2635:15">tmp</name> <operator pos:start="2635:17" pos:end="2635:17">=</operator> <call pos:start="2635:19" pos:end="2635:33"><name pos:start="2635:19" pos:end="2635:26">load_reg</name><argument_list pos:start="2635:27" pos:end="2635:33">(<argument pos:start="2635:28" pos:end="2635:28"><expr pos:start="2635:28" pos:end="2635:28"><name pos:start="2635:28" pos:end="2635:28">s</name></expr></argument>, <argument pos:start="2635:31" pos:end="2635:32"><expr pos:start="2635:31" pos:end="2635:32"><name pos:start="2635:31" pos:end="2635:32">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="2637:13" pos:end="2665:13">switch <condition pos:start="2637:20" pos:end="2637:23">(<expr pos:start="2637:21" pos:end="2637:22"><name pos:start="2637:21" pos:end="2637:22">op</name></expr>)</condition> <block pos:start="2637:25" pos:end="2665:13">{<block_content pos:start="2639:13" pos:end="2663:32">

            <case pos:start="2639:13" pos:end="2639:19">case <expr pos:start="2639:18" pos:end="2639:18"><literal type="number" pos:start="2639:18" pos:end="2639:18">0</literal></expr>:</case>

                <expr_stmt pos:start="2641:17" pos:end="2641:64"><expr pos:start="2641:17" pos:end="2641:63"><call pos:start="2641:17" pos:end="2641:63"><name pos:start="2641:17" pos:end="2641:32">gen_aa32_st8_iss</name><argument_list pos:start="2641:33" pos:end="2641:63">(<argument pos:start="2641:34" pos:end="2641:34"><expr pos:start="2641:34" pos:end="2641:34"><name pos:start="2641:34" pos:end="2641:34">s</name></expr></argument>, <argument pos:start="2641:37" pos:end="2641:39"><expr pos:start="2641:37" pos:end="2641:39"><name pos:start="2641:37" pos:end="2641:39">tmp</name></expr></argument>, <argument pos:start="2641:42" pos:end="2641:45"><expr pos:start="2641:42" pos:end="2641:45"><name pos:start="2641:42" pos:end="2641:45">addr</name></expr></argument>, <argument pos:start="2641:48" pos:end="2641:53"><expr pos:start="2641:48" pos:end="2641:53"><name pos:start="2641:48" pos:end="2641:53">memidx</name></expr></argument>, <argument pos:start="2641:56" pos:end="2641:62"><expr pos:start="2641:56" pos:end="2641:62"><name pos:start="2641:56" pos:end="2641:62">issinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2643:17" pos:end="2643:22">break;</break>

            <case pos:start="2645:13" pos:end="2645:19">case <expr pos:start="2645:18" pos:end="2645:18"><literal type="number" pos:start="2645:18" pos:end="2645:18">1</literal></expr>:</case>

                <expr_stmt pos:start="2647:17" pos:end="2647:65"><expr pos:start="2647:17" pos:end="2647:64"><call pos:start="2647:17" pos:end="2647:64"><name pos:start="2647:17" pos:end="2647:33">gen_aa32_st16_iss</name><argument_list pos:start="2647:34" pos:end="2647:64">(<argument pos:start="2647:35" pos:end="2647:35"><expr pos:start="2647:35" pos:end="2647:35"><name pos:start="2647:35" pos:end="2647:35">s</name></expr></argument>, <argument pos:start="2647:38" pos:end="2647:40"><expr pos:start="2647:38" pos:end="2647:40"><name pos:start="2647:38" pos:end="2647:40">tmp</name></expr></argument>, <argument pos:start="2647:43" pos:end="2647:46"><expr pos:start="2647:43" pos:end="2647:46"><name pos:start="2647:43" pos:end="2647:46">addr</name></expr></argument>, <argument pos:start="2647:49" pos:end="2647:54"><expr pos:start="2647:49" pos:end="2647:54"><name pos:start="2647:49" pos:end="2647:54">memidx</name></expr></argument>, <argument pos:start="2647:57" pos:end="2647:63"><expr pos:start="2647:57" pos:end="2647:63"><name pos:start="2647:57" pos:end="2647:63">issinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2649:17" pos:end="2649:22">break;</break>

            <case pos:start="2651:13" pos:end="2651:19">case <expr pos:start="2651:18" pos:end="2651:18"><literal type="number" pos:start="2651:18" pos:end="2651:18">2</literal></expr>:</case>

                <expr_stmt pos:start="2653:17" pos:end="2653:65"><expr pos:start="2653:17" pos:end="2653:64"><call pos:start="2653:17" pos:end="2653:64"><name pos:start="2653:17" pos:end="2653:33">gen_aa32_st32_iss</name><argument_list pos:start="2653:34" pos:end="2653:64">(<argument pos:start="2653:35" pos:end="2653:35"><expr pos:start="2653:35" pos:end="2653:35"><name pos:start="2653:35" pos:end="2653:35">s</name></expr></argument>, <argument pos:start="2653:38" pos:end="2653:40"><expr pos:start="2653:38" pos:end="2653:40"><name pos:start="2653:38" pos:end="2653:40">tmp</name></expr></argument>, <argument pos:start="2653:43" pos:end="2653:46"><expr pos:start="2653:43" pos:end="2653:46"><name pos:start="2653:43" pos:end="2653:46">addr</name></expr></argument>, <argument pos:start="2653:49" pos:end="2653:54"><expr pos:start="2653:49" pos:end="2653:54"><name pos:start="2653:49" pos:end="2653:54">memidx</name></expr></argument>, <argument pos:start="2653:57" pos:end="2653:63"><expr pos:start="2653:57" pos:end="2653:63"><name pos:start="2653:57" pos:end="2653:63">issinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2655:17" pos:end="2655:22">break;</break>

            <default pos:start="2657:13" pos:end="2657:20">default:</default>

                <expr_stmt pos:start="2659:17" pos:end="2659:39"><expr pos:start="2659:17" pos:end="2659:38"><call pos:start="2659:17" pos:end="2659:38"><name pos:start="2659:17" pos:end="2659:33">tcg_temp_free_i32</name><argument_list pos:start="2659:34" pos:end="2659:38">(<argument pos:start="2659:35" pos:end="2659:37"><expr pos:start="2659:35" pos:end="2659:37"><name pos:start="2659:35" pos:end="2659:37">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2661:17" pos:end="2661:40"><expr pos:start="2661:17" pos:end="2661:39"><call pos:start="2661:17" pos:end="2661:39"><name pos:start="2661:17" pos:end="2661:33">tcg_temp_free_i32</name><argument_list pos:start="2661:34" pos:end="2661:39">(<argument pos:start="2661:35" pos:end="2661:38"><expr pos:start="2661:35" pos:end="2661:38"><name pos:start="2661:35" pos:end="2661:38">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="2663:17" pos:end="2663:32">goto <name pos:start="2663:22" pos:end="2663:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

            <expr_stmt pos:start="2667:13" pos:end="2667:35"><expr pos:start="2667:13" pos:end="2667:34"><call pos:start="2667:13" pos:end="2667:34"><name pos:start="2667:13" pos:end="2667:29">tcg_temp_free_i32</name><argument_list pos:start="2667:30" pos:end="2667:34">(<argument pos:start="2667:31" pos:end="2667:33"><expr pos:start="2667:31" pos:end="2667:33"><name pos:start="2667:31" pos:end="2667:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="2671:9" pos:end="2673:46"><if pos:start="2671:9" pos:end="2673:46">if <condition pos:start="2671:12" pos:end="2671:20">(<expr pos:start="2671:13" pos:end="2671:19"><name pos:start="2671:13" pos:end="2671:19">postinc</name></expr>)</condition><block type="pseudo" pos:start="2673:13" pos:end="2673:46"><block_content pos:start="2673:13" pos:end="2673:46">

            <expr_stmt pos:start="2673:13" pos:end="2673:46"><expr pos:start="2673:13" pos:end="2673:45"><call pos:start="2673:13" pos:end="2673:45"><name pos:start="2673:13" pos:end="2673:28">tcg_gen_addi_i32</name><argument_list pos:start="2673:29" pos:end="2673:45">(<argument pos:start="2673:30" pos:end="2673:33"><expr pos:start="2673:30" pos:end="2673:33"><name pos:start="2673:30" pos:end="2673:33">addr</name></expr></argument>, <argument pos:start="2673:36" pos:end="2673:39"><expr pos:start="2673:36" pos:end="2673:39"><name pos:start="2673:36" pos:end="2673:39">addr</name></expr></argument>, <argument pos:start="2673:42" pos:end="2673:44"><expr pos:start="2673:42" pos:end="2673:44"><name pos:start="2673:42" pos:end="2673:44">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="2675:9" pos:end="2683:9"><if pos:start="2675:9" pos:end="2679:9">if <condition pos:start="2675:12" pos:end="2675:22">(<expr pos:start="2675:13" pos:end="2675:21"><name pos:start="2675:13" pos:end="2675:21">writeback</name></expr>)</condition> <block pos:start="2675:24" pos:end="2679:9">{<block_content pos:start="2677:13" pos:end="2677:35">

            <expr_stmt pos:start="2677:13" pos:end="2677:35"><expr pos:start="2677:13" pos:end="2677:34"><call pos:start="2677:13" pos:end="2677:34"><name pos:start="2677:13" pos:end="2677:21">store_reg</name><argument_list pos:start="2677:22" pos:end="2677:34">(<argument pos:start="2677:23" pos:end="2677:23"><expr pos:start="2677:23" pos:end="2677:23"><name pos:start="2677:23" pos:end="2677:23">s</name></expr></argument>, <argument pos:start="2677:26" pos:end="2677:27"><expr pos:start="2677:26" pos:end="2677:27"><name pos:start="2677:26" pos:end="2677:27">rn</name></expr></argument>, <argument pos:start="2677:30" pos:end="2677:33"><expr pos:start="2677:30" pos:end="2677:33"><name pos:start="2677:30" pos:end="2677:33">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2679:11" pos:end="2683:9">else <block pos:start="2679:16" pos:end="2683:9">{<block_content pos:start="2681:13" pos:end="2681:36">

            <expr_stmt pos:start="2681:13" pos:end="2681:36"><expr pos:start="2681:13" pos:end="2681:35"><call pos:start="2681:13" pos:end="2681:35"><name pos:start="2681:13" pos:end="2681:29">tcg_temp_free_i32</name><argument_list pos:start="2681:30" pos:end="2681:35">(<argument pos:start="2681:31" pos:end="2681:34"><expr pos:start="2681:31" pos:end="2681:34"><name pos:start="2681:31" pos:end="2681:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="2687:9" pos:end="2687:14">break;</break>

    <default pos:start="2689:5" pos:end="2689:12">default:</default>

        <goto pos:start="2691:9" pos:end="2691:24">goto <name pos:start="2691:14" pos:end="2691:23">illegal_op</name>;</goto>

    </block_content>}</block></switch>

    <return pos:start="2695:5" pos:end="2695:13">return <expr pos:start="2695:12" pos:end="2695:12"><literal type="number" pos:start="2695:12" pos:end="2695:12">0</literal></expr>;</return>

<label pos:start="2697:1" pos:end="2697:11"><name pos:start="2697:1" pos:end="2697:10">illegal_op</name>:</label>

    <return pos:start="2699:5" pos:end="2699:13">return <expr pos:start="2699:12" pos:end="2699:12"><literal type="number" pos:start="2699:12" pos:end="2699:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
