<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25520.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:31"><name pos:start="1:1" pos:end="1:10">START_TEST</name><argument_list pos:start="1:11" pos:end="1:31">(<argument pos:start="1:12" pos:end="1:30">single_quote_string</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:5">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <struct pos:start="7:5" pos:end="23:6">struct <block pos:start="7:12" pos:end="13:5">{

        <decl_stmt pos:start="9:9" pos:end="9:28"><decl pos:start="9:9" pos:end="9:27"><type pos:start="9:9" pos:end="9:20"><specifier pos:start="9:9" pos:end="9:13">const</specifier> <name pos:start="9:15" pos:end="9:18">char</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:27">encoded</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:28"><decl pos:start="11:9" pos:end="11:27"><type pos:start="11:9" pos:end="11:20"><specifier pos:start="11:9" pos:end="11:13">const</specifier> <name pos:start="11:15" pos:end="11:18">char</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:27">decoded</name></decl>;</decl_stmt>

    }</block> <decl pos:start="13:7" pos:end="23:5"><name pos:start="13:7" pos:end="13:18"><name pos:start="13:7" pos:end="13:16">test_cases</name><index pos:start="13:17" pos:end="13:18">[]</index></name> <init pos:start="13:20" pos:end="23:5">= <expr pos:start="13:22" pos:end="23:5"><block pos:start="13:22" pos:end="23:5">{

        <expr pos:start="15:9" pos:end="15:42"><block pos:start="15:9" pos:end="15:42">{ <expr pos:start="15:11" pos:end="15:25"><literal type="string" pos:start="15:11" pos:end="15:25">"'hello world'"</literal></expr>, <expr pos:start="15:28" pos:end="15:40"><literal type="string" pos:start="15:28" pos:end="15:40">"hello world"</literal></expr> }</block></expr>,

        <expr pos:start="17:9" pos:end="19:57"><block pos:start="17:9" pos:end="19:57">{ <expr pos:start="17:11" pos:end="17:59"><literal type="string" pos:start="17:11" pos:end="17:59">"'the quick brown fox \\' jumped over the fence'"</literal></expr>,

          <expr pos:start="19:11" pos:end="19:55"><literal type="string" pos:start="19:11" pos:end="19:55">"the quick brown fox ' jumped over the fence"</literal></expr> }</block></expr>,

        <expr pos:start="21:9" pos:end="21:10"><block pos:start="21:9" pos:end="21:10">{}</block></expr>

    }</block></expr></init></decl>;</struct>



    <for pos:start="27:5" pos:end="53:5">for <control pos:start="27:9" pos:end="27:43">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:38"><expr pos:start="27:17" pos:end="27:37"><name pos:start="27:17" pos:end="27:29"><name pos:start="27:17" pos:end="27:26">test_cases</name><index pos:start="27:27" pos:end="27:29">[<expr pos:start="27:28" pos:end="27:28"><name pos:start="27:28" pos:end="27:28">i</name></expr>]</index></name><operator pos:start="27:30" pos:end="27:30">.</operator><name pos:start="27:31" pos:end="27:37">encoded</name></expr>;</condition> <incr pos:start="27:40" pos:end="27:42"><expr pos:start="27:40" pos:end="27:42"><name pos:start="27:40" pos:end="27:40">i</name><operator pos:start="27:41" pos:end="27:42">++</operator></expr></incr>)</control> <block pos:start="27:45" pos:end="53:5">{<block_content pos:start="29:9" pos:end="51:21">

        <decl_stmt pos:start="29:9" pos:end="29:21"><decl pos:start="29:9" pos:end="29:20"><type pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:15">QObject</name> <modifier pos:start="29:17" pos:end="29:17">*</modifier></type><name pos:start="29:18" pos:end="29:20">obj</name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:21"><decl pos:start="31:9" pos:end="31:20"><type pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:15">QString</name> <modifier pos:start="31:17" pos:end="31:17">*</modifier></type><name pos:start="31:18" pos:end="31:20">str</name></decl>;</decl_stmt>



        <expr_stmt pos:start="35:9" pos:end="35:55"><expr pos:start="35:9" pos:end="35:54"><name pos:start="35:9" pos:end="35:11">obj</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <call pos:start="35:15" pos:end="35:54"><name pos:start="35:15" pos:end="35:31">qobject_from_json</name><argument_list pos:start="35:32" pos:end="35:54">(<argument pos:start="35:33" pos:end="35:53"><expr pos:start="35:33" pos:end="35:53"><name pos:start="35:33" pos:end="35:45"><name pos:start="35:33" pos:end="35:42">test_cases</name><index pos:start="35:43" pos:end="35:45">[<expr pos:start="35:44" pos:end="35:44"><name pos:start="35:44" pos:end="35:44">i</name></expr>]</index></name><operator pos:start="35:46" pos:end="35:46">.</operator><name pos:start="35:47" pos:end="35:53">encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><call pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:19">fail_unless</name><argument_list pos:start="39:20" pos:end="39:32">(<argument pos:start="39:21" pos:end="39:31"><expr pos:start="39:21" pos:end="39:31"><name pos:start="39:21" pos:end="39:23">obj</name> <operator pos:start="39:25" pos:end="39:26">!=</operator> <name pos:start="39:28" pos:end="39:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:56"><expr pos:start="41:9" pos:end="41:55"><call pos:start="41:9" pos:end="41:55"><name pos:start="41:9" pos:end="41:19">fail_unless</name><argument_list pos:start="41:20" pos:end="41:55">(<argument pos:start="41:21" pos:end="41:54"><expr pos:start="41:21" pos:end="41:54"><call pos:start="41:21" pos:end="41:37"><name pos:start="41:21" pos:end="41:32">qobject_type</name><argument_list pos:start="41:33" pos:end="41:37">(<argument pos:start="41:34" pos:end="41:36"><expr pos:start="41:34" pos:end="41:36"><name pos:start="41:34" pos:end="41:36">obj</name></expr></argument>)</argument_list></call> <operator pos:start="41:39" pos:end="41:40">==</operator> <name pos:start="41:42" pos:end="41:54">QTYPE_QSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <expr_stmt pos:start="45:9" pos:end="45:38"><expr pos:start="45:9" pos:end="45:37"><name pos:start="45:9" pos:end="45:11">str</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:37"><name pos:start="45:15" pos:end="45:32">qobject_to_qstring</name><argument_list pos:start="45:33" pos:end="45:37">(<argument pos:start="45:34" pos:end="45:36"><expr pos:start="45:34" pos:end="45:36"><name pos:start="45:34" pos:end="45:36">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:78"><expr pos:start="47:9" pos:end="47:77"><call pos:start="47:9" pos:end="47:77"><name pos:start="47:9" pos:end="47:19">fail_unless</name><argument_list pos:start="47:20" pos:end="47:77">(<argument pos:start="47:21" pos:end="47:76"><expr pos:start="47:21" pos:end="47:76"><call pos:start="47:21" pos:end="47:71"><name pos:start="47:21" pos:end="47:26">strcmp</name><argument_list pos:start="47:27" pos:end="47:71">(<argument pos:start="47:28" pos:end="47:47"><expr pos:start="47:28" pos:end="47:47"><call pos:start="47:28" pos:end="47:47"><name pos:start="47:28" pos:end="47:42">qstring_get_str</name><argument_list pos:start="47:43" pos:end="47:47">(<argument pos:start="47:44" pos:end="47:46"><expr pos:start="47:44" pos:end="47:46"><name pos:start="47:44" pos:end="47:46">str</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:50" pos:end="47:70"><expr pos:start="47:50" pos:end="47:70"><name pos:start="47:50" pos:end="47:62"><name pos:start="47:50" pos:end="47:59">test_cases</name><index pos:start="47:60" pos:end="47:62">[<expr pos:start="47:61" pos:end="47:61"><name pos:start="47:61" pos:end="47:61">i</name></expr>]</index></name><operator pos:start="47:63" pos:end="47:63">.</operator><name pos:start="47:64" pos:end="47:70">decoded</name></expr></argument>)</argument_list></call> <operator pos:start="47:73" pos:end="47:74">==</operator> <literal type="number" pos:start="47:76" pos:end="47:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:21"><expr pos:start="51:9" pos:end="51:20"><call pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:15">QDECREF</name><argument_list pos:start="51:16" pos:end="51:20">(<argument pos:start="51:17" pos:end="51:19"><expr pos:start="51:17" pos:end="51:19"><name pos:start="51:17" pos:end="51:19">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block>
</unit>
