<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2878.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">mpegts_probe</name><parameter_list pos:start="1:24" pos:end="1:39">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:35">AVProbeData</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:17">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:13"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:13">int</name></type> <name pos:start="5:15" pos:end="5:18">size</name> <init pos:start="5:20" pos:end="5:32">= <expr pos:start="5:22" pos:end="5:32"><name pos:start="5:22" pos:end="5:32"><name pos:start="5:22" pos:end="5:22">p</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:32">buf_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">maxscore</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">sumscore</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:47"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19">check_count</name> <init pos:start="13:21" pos:end="13:47">= <expr pos:start="13:23" pos:end="13:47"><name pos:start="13:23" pos:end="13:26">size</name> <operator pos:start="13:28" pos:end="13:28">/</operator> <name pos:start="13:30" pos:end="13:47">TS_FEC_PACKET_SIZE</name></expr></init></decl>;</decl_stmt>

<cpp:define pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:7">define</cpp:directive> <cpp:macro pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:19">CHECK_COUNT</name></cpp:macro> <cpp:value pos:start="15:21" pos:end="15:22">10</cpp:value></cpp:define>

<cpp:define pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:7">define</cpp:directive> <cpp:macro pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:19">CHECK_BLOCK</name></cpp:macro> <cpp:value pos:start="17:21" pos:end="17:23">100</cpp:value></cpp:define>



    <if_stmt pos:start="21:5" pos:end="23:17"><if pos:start="21:5" pos:end="23:17">if <condition pos:start="21:8" pos:end="21:34">(<expr pos:start="21:9" pos:end="21:33"><name pos:start="21:9" pos:end="21:19">check_count</name> <operator pos:start="21:21" pos:end="21:21">&lt;</operator> <name pos:start="21:23" pos:end="21:33">CHECK_COUNT</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:17"><block_content pos:start="23:9" pos:end="23:17">

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="27:5" pos:end="43:5">for <control pos:start="27:9" pos:end="27:46">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:30"><expr pos:start="27:17" pos:end="27:29"><name pos:start="27:17" pos:end="27:17">i</name><operator pos:start="27:18" pos:end="27:18">&lt;</operator><name pos:start="27:19" pos:end="27:29">check_count</name></expr>;</condition> <incr pos:start="27:32" pos:end="27:45"><expr pos:start="27:32" pos:end="27:45"><name pos:start="27:32" pos:end="27:32">i</name><operator pos:start="27:33" pos:end="27:34">+=</operator><name pos:start="27:35" pos:end="27:45">CHECK_BLOCK</name></expr></incr>)</control> <block pos:start="27:48" pos:end="43:5">{<block_content pos:start="29:9" pos:end="41:42">

        <decl_stmt pos:start="29:9" pos:end="29:55"><decl pos:start="29:9" pos:end="29:54"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:16">left</name> <init pos:start="29:18" pos:end="29:54">= <expr pos:start="29:20" pos:end="29:54"><call pos:start="29:20" pos:end="29:54"><name pos:start="29:20" pos:end="29:24">FFMIN</name><argument_list pos:start="29:25" pos:end="29:54">(<argument pos:start="29:26" pos:end="29:40"><expr pos:start="29:26" pos:end="29:40"><name pos:start="29:26" pos:end="29:36">check_count</name> <operator pos:start="29:38" pos:end="29:38">-</operator> <name pos:start="29:40" pos:end="29:40">i</name></expr></argument>, <argument pos:start="29:43" pos:end="29:53"><expr pos:start="29:43" pos:end="29:53"><name pos:start="29:43" pos:end="29:53">CHECK_BLOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:121"><decl pos:start="31:9" pos:end="31:120"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:17">score</name>      <init pos:start="31:24" pos:end="31:120">= <expr pos:start="31:26" pos:end="31:120"><call pos:start="31:26" pos:end="31:120"><name pos:start="31:26" pos:end="31:32">analyze</name><argument_list pos:start="31:33" pos:end="31:120">(<argument pos:start="31:34" pos:end="31:63"><expr pos:start="31:34" pos:end="31:63"><name pos:start="31:34" pos:end="31:39"><name pos:start="31:34" pos:end="31:34">p</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:39">buf</name></name> <operator pos:start="31:41" pos:end="31:41">+</operator> <name pos:start="31:43" pos:end="31:56">TS_PACKET_SIZE</name>     <operator pos:start="31:62" pos:end="31:62">*</operator><name pos:start="31:63" pos:end="31:63">i</name></expr></argument>, <argument pos:start="31:66" pos:end="31:89"><expr pos:start="31:66" pos:end="31:89"><name pos:start="31:66" pos:end="31:79">TS_PACKET_SIZE</name>     <operator pos:start="31:85" pos:end="31:85">*</operator><name pos:start="31:86" pos:end="31:89">left</name></expr></argument>, <argument pos:start="31:92" pos:end="31:105"><expr pos:start="31:92" pos:end="31:105"><name pos:start="31:92" pos:end="31:105">TS_PACKET_SIZE</name></expr></argument>     , <argument pos:start="31:113" pos:end="31:116"><expr pos:start="31:113" pos:end="31:116"><name pos:start="31:113" pos:end="31:116">NULL</name></expr></argument>, <argument pos:start="31:119" pos:end="31:119"><expr pos:start="31:119" pos:end="31:119"><literal type="number" pos:start="31:119" pos:end="31:119">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:121"><decl pos:start="33:9" pos:end="33:120"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:22">dvhs_score</name> <init pos:start="33:24" pos:end="33:120">= <expr pos:start="33:26" pos:end="33:120"><call pos:start="33:26" pos:end="33:120"><name pos:start="33:26" pos:end="33:32">analyze</name><argument_list pos:start="33:33" pos:end="33:120">(<argument pos:start="33:34" pos:end="33:63"><expr pos:start="33:34" pos:end="33:63"><name pos:start="33:34" pos:end="33:39"><name pos:start="33:34" pos:end="33:34">p</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:39">buf</name></name> <operator pos:start="33:41" pos:end="33:41">+</operator> <name pos:start="33:43" pos:end="33:61">TS_DVHS_PACKET_SIZE</name><operator pos:start="33:62" pos:end="33:62">*</operator><name pos:start="33:63" pos:end="33:63">i</name></expr></argument>, <argument pos:start="33:66" pos:end="33:89"><expr pos:start="33:66" pos:end="33:89"><name pos:start="33:66" pos:end="33:84">TS_DVHS_PACKET_SIZE</name><operator pos:start="33:85" pos:end="33:85">*</operator><name pos:start="33:86" pos:end="33:89">left</name></expr></argument>, <argument pos:start="33:92" pos:end="33:110"><expr pos:start="33:92" pos:end="33:110"><name pos:start="33:92" pos:end="33:110">TS_DVHS_PACKET_SIZE</name></expr></argument>, <argument pos:start="33:113" pos:end="33:116"><expr pos:start="33:113" pos:end="33:116"><name pos:start="33:113" pos:end="33:116">NULL</name></expr></argument>, <argument pos:start="33:119" pos:end="33:119"><expr pos:start="33:119" pos:end="33:119"><literal type="number" pos:start="33:119" pos:end="33:119">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:121"><decl pos:start="35:9" pos:end="35:120"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:21">fec_score</name>  <init pos:start="35:24" pos:end="35:120">= <expr pos:start="35:26" pos:end="35:120"><call pos:start="35:26" pos:end="35:120"><name pos:start="35:26" pos:end="35:32">analyze</name><argument_list pos:start="35:33" pos:end="35:120">(<argument pos:start="35:34" pos:end="35:63"><expr pos:start="35:34" pos:end="35:63"><name pos:start="35:34" pos:end="35:39"><name pos:start="35:34" pos:end="35:34">p</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:39">buf</name></name> <operator pos:start="35:41" pos:end="35:41">+</operator> <name pos:start="35:43" pos:end="35:60">TS_FEC_PACKET_SIZE</name> <operator pos:start="35:62" pos:end="35:62">*</operator><name pos:start="35:63" pos:end="35:63">i</name></expr></argument>, <argument pos:start="35:66" pos:end="35:89"><expr pos:start="35:66" pos:end="35:89"><name pos:start="35:66" pos:end="35:83">TS_FEC_PACKET_SIZE</name> <operator pos:start="35:85" pos:end="35:85">*</operator><name pos:start="35:86" pos:end="35:89">left</name></expr></argument>, <argument pos:start="35:92" pos:end="35:109"><expr pos:start="35:92" pos:end="35:109"><name pos:start="35:92" pos:end="35:109">TS_FEC_PACKET_SIZE</name></expr></argument> , <argument pos:start="35:113" pos:end="35:116"><expr pos:start="35:113" pos:end="35:116"><name pos:start="35:113" pos:end="35:116">NULL</name></expr></argument>, <argument pos:start="35:119" pos:end="35:119"><expr pos:start="35:119" pos:end="35:119"><literal type="number" pos:start="35:119" pos:end="35:119">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:53"><expr pos:start="37:9" pos:end="37:52"><name pos:start="37:9" pos:end="37:13">score</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:52"><name pos:start="37:17" pos:end="37:22">FFMAX3</name><argument_list pos:start="37:23" pos:end="37:52">(<argument pos:start="37:24" pos:end="37:28"><expr pos:start="37:24" pos:end="37:28"><name pos:start="37:24" pos:end="37:28">score</name></expr></argument>, <argument pos:start="37:31" pos:end="37:40"><expr pos:start="37:31" pos:end="37:40"><name pos:start="37:31" pos:end="37:40">dvhs_score</name></expr></argument>, <argument pos:start="37:43" pos:end="37:51"><expr pos:start="37:43" pos:end="37:51"><name pos:start="37:43" pos:end="37:51">fec_score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:26"><expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:16">sumscore</name> <operator pos:start="39:18" pos:end="39:19">+=</operator> <name pos:start="39:21" pos:end="39:25">score</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:42"><expr pos:start="41:9" pos:end="41:41"><name pos:start="41:9" pos:end="41:16">maxscore</name> <operator pos:start="41:18" pos:end="41:18">=</operator> <call pos:start="41:20" pos:end="41:41"><name pos:start="41:20" pos:end="41:24">FFMAX</name><argument_list pos:start="41:25" pos:end="41:41">(<argument pos:start="41:26" pos:end="41:33"><expr pos:start="41:26" pos:end="41:33"><name pos:start="41:26" pos:end="41:33">maxscore</name></expr></argument>, <argument pos:start="41:36" pos:end="41:40"><expr pos:start="41:36" pos:end="41:40"><name pos:start="41:36" pos:end="41:40">score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="47:5" pos:end="47:52"><expr pos:start="47:5" pos:end="47:51"><name pos:start="47:5" pos:end="47:12">sumscore</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:23">sumscore</name> <operator pos:start="47:25" pos:end="47:25">*</operator> <name pos:start="47:27" pos:end="47:37">CHECK_COUNT</name> <operator pos:start="47:39" pos:end="47:39">/</operator> <name pos:start="47:41" pos:end="47:51">check_count</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:52"><expr pos:start="49:5" pos:end="49:51"><name pos:start="49:5" pos:end="49:12">maxscore</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <name pos:start="49:16" pos:end="49:23">maxscore</name> <operator pos:start="49:25" pos:end="49:25">*</operator> <name pos:start="49:27" pos:end="49:37">CHECK_COUNT</name> <operator pos:start="49:39" pos:end="49:39">/</operator> <name pos:start="49:41" pos:end="49:51">CHECK_BLOCK</name></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:56"><expr pos:start="53:5" pos:end="53:55"><call pos:start="53:5" pos:end="53:55"><name pos:start="53:5" pos:end="53:11">av_dlog</name><argument_list pos:start="53:12" pos:end="53:55">(<argument pos:start="53:13" pos:end="53:13"><expr pos:start="53:13" pos:end="53:13"><literal type="number" pos:start="53:13" pos:end="53:13">0</literal></expr></argument>, <argument pos:start="53:16" pos:end="53:34"><expr pos:start="53:16" pos:end="53:34"><literal type="string" pos:start="53:16" pos:end="53:34">"TS score: %d %d\n"</literal></expr></argument>, <argument pos:start="53:37" pos:end="53:44"><expr pos:start="53:37" pos:end="53:44"><name pos:start="53:37" pos:end="53:44">sumscore</name></expr></argument>, <argument pos:start="53:47" pos:end="53:54"><expr pos:start="53:47" pos:end="53:54"><name pos:start="53:47" pos:end="53:54">maxscore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="57:5" pos:end="63:17"><if pos:start="57:5" pos:end="57:79">if      <condition pos:start="57:13" pos:end="57:26">(<expr pos:start="57:14" pos:end="57:25"><name pos:start="57:14" pos:end="57:21">sumscore</name> <operator pos:start="57:23" pos:end="57:23">&gt;</operator> <literal type="number" pos:start="57:25" pos:end="57:25">6</literal></expr>)</condition><block type="pseudo" pos:start="57:28" pos:end="57:79"><block_content pos:start="57:28" pos:end="57:79"> <return pos:start="57:28" pos:end="57:79">return <expr pos:start="57:35" pos:end="57:78"><name pos:start="57:35" pos:end="57:51">AVPROBE_SCORE_MAX</name>   <operator pos:start="57:55" pos:end="57:55">+</operator> <name pos:start="57:57" pos:end="57:64">sumscore</name> <operator pos:start="57:66" pos:end="57:66">-</operator> <name pos:start="57:68" pos:end="57:78">CHECK_COUNT</name></expr>;</return></block_content></block></if>

    <if type="elseif" pos:start="59:5" pos:end="59:79">else if <condition pos:start="59:13" pos:end="59:26">(<expr pos:start="59:14" pos:end="59:25"><name pos:start="59:14" pos:end="59:21">maxscore</name> <operator pos:start="59:23" pos:end="59:23">&gt;</operator> <literal type="number" pos:start="59:25" pos:end="59:25">6</literal></expr>)</condition><block type="pseudo" pos:start="59:28" pos:end="59:79"><block_content pos:start="59:28" pos:end="59:79"> <return pos:start="59:28" pos:end="59:79">return <expr pos:start="59:35" pos:end="59:78"><name pos:start="59:35" pos:end="59:51">AVPROBE_SCORE_MAX</name><operator pos:start="59:52" pos:end="59:52">/</operator><literal type="number" pos:start="59:53" pos:end="59:55">2</literal> <operator pos:start="59:55" pos:end="59:55">+</operator> <name pos:start="59:57" pos:end="59:64">sumscore</name> <operator pos:start="59:66" pos:end="59:66">-</operator> <name pos:start="59:68" pos:end="59:78">CHECK_COUNT</name></expr>;</return></block_content></block></if>

    <else pos:start="61:5" pos:end="63:17">else<block type="pseudo" pos:start="63:9" pos:end="63:17"><block_content pos:start="63:9" pos:end="63:17">

        <return pos:start="63:9" pos:end="63:17">return <expr pos:start="63:16" pos:end="63:16"><literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
