<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6731.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">qdm2_decode</name><parameter_list pos:start="1:23" pos:end="1:71">(<parameter pos:start="1:24" pos:end="1:37"><decl pos:start="1:24" pos:end="1:37"><type pos:start="1:24" pos:end="1:37"><name pos:start="1:24" pos:end="1:34">QDM2Context</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">q</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:52">uint8_t</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">in</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:65">int16_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">out</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:13">

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">ch</name></decl>, <decl pos:start="5:13" pos:end="5:13"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:13"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:13">int</name></type> <name pos:start="7:15" pos:end="7:24">frame_size</name> <init pos:start="7:26" pos:end="7:56">= <expr pos:start="7:28" pos:end="7:56"><operator pos:start="7:28" pos:end="7:28">(</operator><name pos:start="7:29" pos:end="7:41"><name pos:start="7:29" pos:end="7:29">q</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:41">frame_size</name></name> <operator pos:start="7:43" pos:end="7:43">*</operator> <name pos:start="7:45" pos:end="7:55"><name pos:start="7:45" pos:end="7:45">q</name><operator pos:start="7:46" pos:end="7:47">-&gt;</operator><name pos:start="7:48" pos:end="7:55">channels</name></name><operator pos:start="7:56" pos:end="7:56">)</operator></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:29">/* select input buffer */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:28"><expr pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:5">q</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:22">compressed_data</name></name> <operator pos:start="13:24" pos:end="13:24">=</operator> <name pos:start="13:26" pos:end="13:27">in</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:42"><expr pos:start="15:5" pos:end="15:41"><name pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:5">q</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:22">compressed_size</name></name> <operator pos:start="15:24" pos:end="15:24">=</operator> <name pos:start="15:26" pos:end="15:41"><name pos:start="15:26" pos:end="15:26">q</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:41">checksum_size</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:59">/* copy old block, clear new block of output samples */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:89"><expr pos:start="21:5" pos:end="21:88"><call pos:start="21:5" pos:end="21:88"><name pos:start="21:5" pos:end="21:11">memmove</name><argument_list pos:start="21:12" pos:end="21:88">(<argument pos:start="21:13" pos:end="21:28"><expr pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:13">q</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:28">output_buffer</name></name></expr></argument>, <argument pos:start="21:31" pos:end="21:59"><expr pos:start="21:31" pos:end="21:59"><operator pos:start="21:31" pos:end="21:31">&amp;</operator><name pos:start="21:32" pos:end="21:59"><name pos:start="21:32" pos:end="21:32">q</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:47">output_buffer</name><index pos:start="21:48" pos:end="21:59">[<expr pos:start="21:49" pos:end="21:58"><name pos:start="21:49" pos:end="21:58">frame_size</name></expr>]</index></name></expr></argument>, <argument pos:start="21:62" pos:end="21:87"><expr pos:start="21:62" pos:end="21:87"><name pos:start="21:62" pos:end="21:71">frame_size</name> <operator pos:start="21:73" pos:end="21:73">*</operator> <sizeof pos:start="21:75" pos:end="21:87">sizeof<argument_list pos:start="21:81" pos:end="21:87">(<argument pos:start="21:82" pos:end="21:86"><expr pos:start="21:82" pos:end="21:86"><name pos:start="21:82" pos:end="21:86">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:73"><expr pos:start="23:5" pos:end="23:72"><call pos:start="23:5" pos:end="23:72"><name pos:start="23:5" pos:end="23:10">memset</name><argument_list pos:start="23:11" pos:end="23:72">(<argument pos:start="23:12" pos:end="23:40"><expr pos:start="23:12" pos:end="23:40"><operator pos:start="23:12" pos:end="23:12">&amp;</operator><name pos:start="23:13" pos:end="23:40"><name pos:start="23:13" pos:end="23:13">q</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:28">output_buffer</name><index pos:start="23:29" pos:end="23:40">[<expr pos:start="23:30" pos:end="23:39"><name pos:start="23:30" pos:end="23:39">frame_size</name></expr>]</index></name></expr></argument>, <argument pos:start="23:43" pos:end="23:43"><expr pos:start="23:43" pos:end="23:43"><literal type="number" pos:start="23:43" pos:end="23:43">0</literal></expr></argument>, <argument pos:start="23:46" pos:end="23:71"><expr pos:start="23:46" pos:end="23:71"><name pos:start="23:46" pos:end="23:55">frame_size</name> <operator pos:start="23:57" pos:end="23:57">*</operator> <sizeof pos:start="23:59" pos:end="23:71">sizeof<argument_list pos:start="23:65" pos:end="23:71">(<argument pos:start="23:66" pos:end="23:70"><expr pos:start="23:66" pos:end="23:70"><name pos:start="23:66" pos:end="23:70">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:46">/* decode block of QDM2 compressed data */</comment>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:27">(<expr pos:start="29:9" pos:end="29:26"><name pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:9">q</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:21">sub_packet</name></name> <operator pos:start="29:23" pos:end="29:24">==</operator> <literal type="number" pos:start="29:26" pos:end="29:26">0</literal></expr>)</condition> <block pos:start="29:29" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:35">

        <expr_stmt pos:start="31:9" pos:end="31:26"><expr pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:9">q</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:21">has_errors</name></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <literal type="number" pos:start="31:25" pos:end="31:25">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="31:28" pos:end="31:59">// zero it for a new super block</comment>

        <expr_stmt pos:start="33:9" pos:end="33:57"><expr pos:start="33:9" pos:end="33:56"><call pos:start="33:9" pos:end="33:56"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:56">(<argument pos:start="33:16" pos:end="33:19"><expr pos:start="33:16" pos:end="33:19"><name pos:start="33:16" pos:end="33:19">NULL</name></expr></argument>,<argument pos:start="33:21" pos:end="33:32"><expr pos:start="33:21" pos:end="33:32"><name pos:start="33:21" pos:end="33:32">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="33:34" pos:end="33:55"><expr pos:start="33:34" pos:end="33:55"><literal type="string" pos:start="33:34" pos:end="33:55">"Superblock follows\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:35"><expr pos:start="35:9" pos:end="35:34"><call pos:start="35:9" pos:end="35:34"><name pos:start="35:9" pos:end="35:31">qdm2_decode_super_block</name><argument_list pos:start="35:32" pos:end="35:34">(<argument pos:start="35:33" pos:end="35:33"><expr pos:start="35:33" pos:end="35:33"><name pos:start="35:33" pos:end="35:33">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:26">/* parse subpackets */</comment>

    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="53:5">if <condition pos:start="43:8" pos:end="43:23">(<expr pos:start="43:9" pos:end="43:22"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:22"><name pos:start="43:10" pos:end="43:10">q</name><operator pos:start="43:11" pos:end="43:12">-&gt;</operator><name pos:start="43:13" pos:end="43:22">has_errors</name></name></expr>)</condition> <block pos:start="43:25" pos:end="53:5">{<block_content pos:start="45:9" pos:end="51:52">

        <if_stmt pos:start="45:9" pos:end="47:39"><if pos:start="45:9" pos:end="47:39">if <condition pos:start="45:12" pos:end="45:31">(<expr pos:start="45:13" pos:end="45:30"><name pos:start="45:13" pos:end="45:25"><name pos:start="45:13" pos:end="45:13">q</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:25">sub_packet</name></name> <operator pos:start="45:27" pos:end="45:28">==</operator> <literal type="number" pos:start="45:30" pos:end="45:30">2</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:39"><block_content pos:start="47:13" pos:end="47:39">

            <expr_stmt pos:start="47:13" pos:end="47:39"><expr pos:start="47:13" pos:end="47:38"><call pos:start="47:13" pos:end="47:38"><name pos:start="47:13" pos:end="47:35">qdm2_decode_fft_packets</name><argument_list pos:start="47:36" pos:end="47:38">(<argument pos:start="47:37" pos:end="47:37"><expr pos:start="47:37" pos:end="47:37"><name pos:start="47:37" pos:end="47:37">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:52"><expr pos:start="51:9" pos:end="51:51"><call pos:start="51:9" pos:end="51:51"><name pos:start="51:9" pos:end="51:33">qdm2_fft_tone_synthesizer</name><argument_list pos:start="51:34" pos:end="51:51">(<argument pos:start="51:35" pos:end="51:35"><expr pos:start="51:35" pos:end="51:35"><name pos:start="51:35" pos:end="51:35">q</name></expr></argument>, <argument pos:start="51:38" pos:end="51:50"><expr pos:start="51:38" pos:end="51:50"><name pos:start="51:38" pos:end="51:50"><name pos:start="51:38" pos:end="51:38">q</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:50">sub_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:39">/* sound synthesis stage 1 (FFT) */</comment>

    <for pos:start="59:5" pos:end="73:5">for <control pos:start="59:9" pos:end="59:40">(<init pos:start="59:10" pos:end="59:16"><expr pos:start="59:10" pos:end="59:15"><name pos:start="59:10" pos:end="59:11">ch</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>;</init> <condition pos:start="59:18" pos:end="59:34"><expr pos:start="59:18" pos:end="59:33"><name pos:start="59:18" pos:end="59:19">ch</name> <operator pos:start="59:21" pos:end="59:21">&lt;</operator> <name pos:start="59:23" pos:end="59:33"><name pos:start="59:23" pos:end="59:23">q</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:33">channels</name></name></expr>;</condition> <incr pos:start="59:36" pos:end="59:39"><expr pos:start="59:36" pos:end="59:39"><name pos:start="59:36" pos:end="59:37">ch</name><operator pos:start="59:38" pos:end="59:39">++</operator></expr></incr>)</control> <block pos:start="59:42" pos:end="73:5">{<block_content pos:start="61:9" pos:end="71:9">

        <expr_stmt pos:start="61:9" pos:end="61:49"><expr pos:start="61:9" pos:end="61:48"><call pos:start="61:9" pos:end="61:48"><name pos:start="61:9" pos:end="61:26">qdm2_calculate_fft</name><argument_list pos:start="61:27" pos:end="61:48">(<argument pos:start="61:28" pos:end="61:28"><expr pos:start="61:28" pos:end="61:28"><name pos:start="61:28" pos:end="61:28">q</name></expr></argument>, <argument pos:start="61:31" pos:end="61:32"><expr pos:start="61:31" pos:end="61:32"><name pos:start="61:31" pos:end="61:32">ch</name></expr></argument>, <argument pos:start="61:35" pos:end="61:47"><expr pos:start="61:35" pos:end="61:47"><name pos:start="61:35" pos:end="61:47"><name pos:start="61:35" pos:end="61:35">q</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:47">sub_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:69">(<expr pos:start="65:13" pos:end="65:68"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:26"><name pos:start="65:14" pos:end="65:14">q</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:26">has_errors</name></name> <operator pos:start="65:28" pos:end="65:29">&amp;&amp;</operator> <name pos:start="65:31" pos:end="65:53"><name pos:start="65:31" pos:end="65:31">q</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:50">sub_packet_list_C</name><index pos:start="65:51" pos:end="65:53">[<expr pos:start="65:52" pos:end="65:52"><literal type="number" pos:start="65:52" pos:end="65:52">0</literal></expr>]</index></name><operator pos:start="65:54" pos:end="65:54">.</operator><name pos:start="65:55" pos:end="65:60">packet</name> <operator pos:start="65:62" pos:end="65:63">!=</operator> <name pos:start="65:65" pos:end="65:68">NULL</name></expr>)</condition> <block pos:start="65:71" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:22">

            <macro pos:start="67:13" pos:end="67:67"><name pos:start="67:13" pos:end="67:28">SAMPLES_NEEDED_2</name><argument_list pos:start="67:29" pos:end="67:67">(<argument pos:start="67:30" pos:end="67:66"><literal type="string" pos:start="67:30" pos:end="67:66">"has errors, and C list is not empty"</literal></argument>)</argument_list></macro>

            <return pos:start="69:13" pos:end="69:22">return <expr pos:start="69:20" pos:end="69:21"><operator pos:start="69:20" pos:end="69:20">-</operator><literal type="number" pos:start="69:21" pos:end="69:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="77:5" pos:end="77:68">/* sound synthesis stage 2 (MPEG audio like synthesis filter) */</comment>

    <if_stmt pos:start="79:5" pos:end="81:48"><if pos:start="79:5" pos:end="81:48">if <condition pos:start="79:8" pos:end="79:45">(<expr pos:start="79:9" pos:end="79:44"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:22"><name pos:start="79:10" pos:end="79:10">q</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:22">has_errors</name></name> <operator pos:start="79:24" pos:end="79:25">&amp;&amp;</operator> <name pos:start="79:27" pos:end="79:44"><name pos:start="79:27" pos:end="79:27">q</name><operator pos:start="79:28" pos:end="79:29">-&gt;</operator><name pos:start="79:30" pos:end="79:44">do_synth_filter</name></name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:48"><block_content pos:start="81:9" pos:end="81:48">

        <expr_stmt pos:start="81:9" pos:end="81:48"><expr pos:start="81:9" pos:end="81:47"><call pos:start="81:9" pos:end="81:47"><name pos:start="81:9" pos:end="81:29">qdm2_synthesis_filter</name><argument_list pos:start="81:30" pos:end="81:47">(<argument pos:start="81:31" pos:end="81:31"><expr pos:start="81:31" pos:end="81:31"><name pos:start="81:31" pos:end="81:31">q</name></expr></argument>, <argument pos:start="81:34" pos:end="81:46"><expr pos:start="81:34" pos:end="81:46"><name pos:start="81:34" pos:end="81:46"><name pos:start="81:34" pos:end="81:34">q</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:46">sub_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:45"><expr pos:start="85:5" pos:end="85:44"><name pos:start="85:5" pos:end="85:17"><name pos:start="85:5" pos:end="85:5">q</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:17">sub_packet</name></name> <operator pos:start="85:19" pos:end="85:19">=</operator> <operator pos:start="85:21" pos:end="85:21">(</operator><name pos:start="85:22" pos:end="85:34"><name pos:start="85:22" pos:end="85:22">q</name><operator pos:start="85:23" pos:end="85:24">-&gt;</operator><name pos:start="85:25" pos:end="85:34">sub_packet</name></name> <operator pos:start="85:36" pos:end="85:36">+</operator> <literal type="number" pos:start="85:38" pos:end="85:38">1</literal><operator pos:start="85:39" pos:end="85:39">)</operator> <operator pos:start="85:41" pos:end="85:41">%</operator> <literal type="number" pos:start="85:43" pos:end="85:44">16</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:65">/* clip and convert output float[] to 16bit signed samples */</comment>

    <for pos:start="91:5" pos:end="109:5">for <control pos:start="91:9" pos:end="91:36">(<init pos:start="91:10" pos:end="91:15"><expr pos:start="91:10" pos:end="91:14"><name pos:start="91:10" pos:end="91:10">i</name> <operator pos:start="91:12" pos:end="91:12">=</operator> <literal type="number" pos:start="91:14" pos:end="91:14">0</literal></expr>;</init> <condition pos:start="91:17" pos:end="91:31"><expr pos:start="91:17" pos:end="91:30"><name pos:start="91:17" pos:end="91:17">i</name> <operator pos:start="91:19" pos:end="91:19">&lt;</operator> <name pos:start="91:21" pos:end="91:30">frame_size</name></expr>;</condition> <incr pos:start="91:33" pos:end="91:35"><expr pos:start="91:33" pos:end="91:35"><name pos:start="91:33" pos:end="91:33">i</name><operator pos:start="91:34" pos:end="91:35">++</operator></expr></incr>)</control> <block pos:start="91:38" pos:end="109:5">{<block_content pos:start="93:9" pos:end="107:23">

        <decl_stmt pos:start="93:9" pos:end="93:45"><decl pos:start="93:9" pos:end="93:44"><type pos:start="93:9" pos:end="93:11"><name pos:start="93:9" pos:end="93:11">int</name></type> <name pos:start="93:13" pos:end="93:17">value</name> <init pos:start="93:19" pos:end="93:44">= <expr pos:start="93:21" pos:end="93:44"><operator pos:start="93:21" pos:end="93:21">(</operator><name pos:start="93:22" pos:end="93:24">int</name><operator pos:start="93:25" pos:end="93:25">)</operator><name pos:start="93:26" pos:end="93:44"><name pos:start="93:26" pos:end="93:26">q</name><operator pos:start="93:27" pos:end="93:28">-&gt;</operator><name pos:start="93:29" pos:end="93:41">output_buffer</name><index pos:start="93:42" pos:end="93:44">[<expr pos:start="93:43" pos:end="93:43"><name pos:start="93:43" pos:end="93:43">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="97:9" pos:end="103:106"><if pos:start="97:9" pos:end="99:106">if <condition pos:start="97:12" pos:end="97:39">(<expr pos:start="97:13" pos:end="97:38"><name pos:start="97:13" pos:end="97:17">value</name> <operator pos:start="97:19" pos:end="97:19">&gt;</operator> <name pos:start="97:21" pos:end="97:38">SOFTCLIP_THRESHOLD</name></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:106"><block_content pos:start="99:13" pos:end="99:106">

            <expr_stmt pos:start="99:13" pos:end="99:106"><expr pos:start="99:13" pos:end="99:105"><name pos:start="99:13" pos:end="99:17">value</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <ternary pos:start="99:21" pos:end="99:105"><condition pos:start="99:21" pos:end="99:51"><expr pos:start="99:21" pos:end="99:49"><operator pos:start="99:21" pos:end="99:21">(</operator><name pos:start="99:22" pos:end="99:26">value</name> <operator pos:start="99:28" pos:end="99:28">&gt;</operator>  <name pos:start="99:31" pos:end="99:48">HARDCLIP_THRESHOLD</name><operator pos:start="99:49" pos:end="99:49">)</operator></expr> ?</condition><then pos:start="99:54" pos:end="99:58">  <expr pos:start="99:54" pos:end="99:58"><literal type="number" pos:start="99:54" pos:end="99:58">32767</literal></expr> </then><else pos:start="99:60" pos:end="99:105">:  <expr pos:start="99:63" pos:end="99:105"><name pos:start="99:63" pos:end="99:105"><name pos:start="99:63" pos:end="99:76">softclip_table</name><index pos:start="99:77" pos:end="99:105">[ <expr pos:start="99:79" pos:end="99:104"><name pos:start="99:79" pos:end="99:83">value</name> <operator pos:start="99:85" pos:end="99:85">-</operator> <name pos:start="99:87" pos:end="99:104">SOFTCLIP_THRESHOLD</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="101:9" pos:end="103:106">else if <condition pos:start="101:17" pos:end="101:45">(<expr pos:start="101:18" pos:end="101:44"><name pos:start="101:18" pos:end="101:22">value</name> <operator pos:start="101:24" pos:end="101:24">&lt;</operator> <operator pos:start="101:26" pos:end="101:26">-</operator><name pos:start="101:27" pos:end="101:44">SOFTCLIP_THRESHOLD</name></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:106"><block_content pos:start="103:13" pos:end="103:106">

            <expr_stmt pos:start="103:13" pos:end="103:106"><expr pos:start="103:13" pos:end="103:105"><name pos:start="103:13" pos:end="103:17">value</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <ternary pos:start="103:21" pos:end="103:105"><condition pos:start="103:21" pos:end="103:51"><expr pos:start="103:21" pos:end="103:49"><operator pos:start="103:21" pos:end="103:21">(</operator><name pos:start="103:22" pos:end="103:26">value</name> <operator pos:start="103:28" pos:end="103:28">&lt;</operator> <operator pos:start="103:30" pos:end="103:30">-</operator><name pos:start="103:31" pos:end="103:48">HARDCLIP_THRESHOLD</name><operator pos:start="103:49" pos:end="103:49">)</operator></expr> ?</condition><then pos:start="103:53" pos:end="103:58"> <expr pos:start="103:53" pos:end="103:58"><operator pos:start="103:53" pos:end="103:53">-</operator><literal type="number" pos:start="103:54" pos:end="103:58">32767</literal></expr> </then><else pos:start="103:60" pos:end="103:105">: <expr pos:start="103:62" pos:end="103:105"><operator pos:start="103:62" pos:end="103:62">-</operator><name pos:start="103:63" pos:end="103:105"><name pos:start="103:63" pos:end="103:76">softclip_table</name><index pos:start="103:77" pos:end="103:105">[<expr pos:start="103:78" pos:end="103:104"><operator pos:start="103:78" pos:end="103:78">-</operator><name pos:start="103:79" pos:end="103:83">value</name> <operator pos:start="103:85" pos:end="103:85">-</operator> <name pos:start="103:87" pos:end="103:104">SOFTCLIP_THRESHOLD</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:23"><expr pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:14"><name pos:start="107:9" pos:end="107:11">out</name><index pos:start="107:12" pos:end="107:14">[<expr pos:start="107:13" pos:end="107:13"><name pos:start="107:13" pos:end="107:13">i</name></expr>]</index></name> <operator pos:start="107:16" pos:end="107:16">=</operator> <name pos:start="107:18" pos:end="107:22">value</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="113:5" pos:end="113:13">return <expr pos:start="113:12" pos:end="113:12"><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
