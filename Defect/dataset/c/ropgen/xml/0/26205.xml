<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26205.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:42">qemu_rdma_exchange_get_response</name><parameter_list pos:start="1:43" pos:end="3:64">(<parameter pos:start="1:44" pos:end="1:60"><decl pos:start="1:44" pos:end="1:60"><type pos:start="1:44" pos:end="1:60"><name pos:start="1:44" pos:end="1:54">RDMAContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">rdma</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:39"><decl pos:start="3:17" pos:end="3:39"><type pos:start="3:17" pos:end="3:39"><name pos:start="3:17" pos:end="3:33">RDMAControlHeader</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">head</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:54"><decl pos:start="3:42" pos:end="3:54"><type pos:start="3:42" pos:end="3:54"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:54">expecting</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:63"><decl pos:start="3:57" pos:end="3:63"><type pos:start="3:57" pos:end="3:63"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:63">idx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="63:1">{<block_content pos:start="7:5" pos:end="61:13">

    <decl_stmt pos:start="7:5" pos:end="7:75"><decl pos:start="7:5" pos:end="7:74"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:74">= <expr pos:start="7:15" pos:end="7:74"><call pos:start="7:15" pos:end="7:74"><name pos:start="7:15" pos:end="7:38">qemu_rdma_block_for_wrid</name><argument_list pos:start="7:39" pos:end="7:74">(<argument pos:start="7:40" pos:end="7:43"><expr pos:start="7:40" pos:end="7:43"><name pos:start="7:40" pos:end="7:43">rdma</name></expr></argument>, <argument pos:start="7:46" pos:end="7:73"><expr pos:start="7:46" pos:end="7:73"><name pos:start="7:46" pos:end="7:67">RDMA_WRID_RECV_CONTROL</name> <operator pos:start="7:69" pos:end="7:69">+</operator> <name pos:start="7:71" pos:end="7:73">idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:16">(<expr pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:11">ret</name> <operator pos:start="11:13" pos:end="11:13">&lt;</operator> <literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr>)</condition> <block pos:start="11:18" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:19">

        <expr_stmt pos:start="13:9" pos:end="13:73"><expr pos:start="13:9" pos:end="13:72"><call pos:start="13:9" pos:end="13:72"><name pos:start="13:9" pos:end="13:15">fprintf</name><argument_list pos:start="13:16" pos:end="13:72">(<argument pos:start="13:17" pos:end="13:22"><expr pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:22">stderr</name></expr></argument>, <argument pos:start="13:25" pos:end="13:71"><expr pos:start="13:25" pos:end="13:71"><literal type="string" pos:start="13:25" pos:end="13:71">"rdma migration: recv polling control error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:19">return <expr pos:start="15:16" pos:end="15:18"><name pos:start="15:16" pos:end="15:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:60"><expr pos:start="21:5" pos:end="21:59"><call pos:start="21:5" pos:end="21:59"><name pos:start="21:5" pos:end="21:22">network_to_control</name><argument_list pos:start="21:23" pos:end="21:59">(<argument pos:start="21:24" pos:end="21:58"><expr pos:start="21:24" pos:end="21:58"><operator pos:start="21:24" pos:end="21:24">(</operator><name pos:start="21:25" pos:end="21:28">void</name> <operator pos:start="21:30" pos:end="21:30">*</operator><operator pos:start="21:31" pos:end="21:31">)</operator> <name pos:start="21:33" pos:end="21:50"><name pos:start="21:33" pos:end="21:36">rdma</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:45">wr_data</name><index pos:start="21:46" pos:end="21:50">[<expr pos:start="21:47" pos:end="21:49"><name pos:start="21:47" pos:end="21:49">idx</name></expr>]</index></name><operator pos:start="21:51" pos:end="21:51">.</operator><name pos:start="21:52" pos:end="21:58">control</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:72"><expr pos:start="23:5" pos:end="23:71"><call pos:start="23:5" pos:end="23:71"><name pos:start="23:5" pos:end="23:10">memcpy</name><argument_list pos:start="23:11" pos:end="23:71">(<argument pos:start="23:12" pos:end="23:15"><expr pos:start="23:12" pos:end="23:15"><name pos:start="23:12" pos:end="23:15">head</name></expr></argument>, <argument pos:start="23:18" pos:end="23:43"><expr pos:start="23:18" pos:end="23:43"><name pos:start="23:18" pos:end="23:35"><name pos:start="23:18" pos:end="23:21">rdma</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:30">wr_data</name><index pos:start="23:31" pos:end="23:35">[<expr pos:start="23:32" pos:end="23:34"><name pos:start="23:32" pos:end="23:34">idx</name></expr>]</index></name><operator pos:start="23:36" pos:end="23:36">.</operator><name pos:start="23:37" pos:end="23:43">control</name></expr></argument>, <argument pos:start="23:46" pos:end="23:70"><expr pos:start="23:46" pos:end="23:70"><sizeof pos:start="23:46" pos:end="23:70">sizeof<argument_list pos:start="23:52" pos:end="23:70">(<argument pos:start="23:53" pos:end="23:69"><expr pos:start="23:53" pos:end="23:69"><name pos:start="23:53" pos:end="23:69">RDMAControlHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:69"><expr pos:start="27:5" pos:end="27:68"><call pos:start="27:5" pos:end="27:68"><name pos:start="27:5" pos:end="27:13">DDDPRINTF</name><argument_list pos:start="27:14" pos:end="27:68">(<argument pos:start="27:15" pos:end="27:42"><expr pos:start="27:15" pos:end="27:42"><literal type="string" pos:start="27:15" pos:end="27:42">"CONTROL: %s receiving...\n"</literal></expr></argument>, <argument pos:start="27:45" pos:end="27:67"><expr pos:start="27:45" pos:end="27:67"><name pos:start="27:45" pos:end="27:67"><name pos:start="27:45" pos:end="27:56">control_desc</name><index pos:start="27:57" pos:end="27:67">[<expr pos:start="27:58" pos:end="27:66"><name pos:start="27:58" pos:end="27:66">expecting</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="49:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:39">(<expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:17">expecting</name> <operator pos:start="31:19" pos:end="31:20">==</operator> <name pos:start="31:22" pos:end="31:38">RDMA_CONTROL_NONE</name></expr>)</condition> <block pos:start="31:41" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:56">

        <expr_stmt pos:start="33:9" pos:end="35:56"><expr pos:start="33:9" pos:end="35:55"><call pos:start="33:9" pos:end="35:55"><name pos:start="33:9" pos:end="33:17">DDDPRINTF</name><argument_list pos:start="33:18" pos:end="35:55">(<argument pos:start="33:19" pos:end="33:43"><expr pos:start="33:19" pos:end="33:43"><literal type="string" pos:start="33:19" pos:end="33:43">"Surprise: got %s (%d)\n"</literal></expr></argument>,

                  <argument pos:start="35:19" pos:end="35:42"><expr pos:start="35:19" pos:end="35:42"><name pos:start="35:19" pos:end="35:42"><name pos:start="35:19" pos:end="35:30">control_desc</name><index pos:start="35:31" pos:end="35:42">[<expr pos:start="35:32" pos:end="35:41"><name pos:start="35:32" pos:end="35:41"><name pos:start="35:32" pos:end="35:35">head</name><operator pos:start="35:36" pos:end="35:37">-&gt;</operator><name pos:start="35:38" pos:end="35:41">type</name></name></expr>]</index></name></expr></argument>, <argument pos:start="35:45" pos:end="35:54"><expr pos:start="35:45" pos:end="35:54"><name pos:start="35:45" pos:end="35:54"><name pos:start="35:45" pos:end="35:48">head</name><operator pos:start="35:49" pos:end="35:50">-&gt;</operator><name pos:start="35:51" pos:end="35:54">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="37:7" pos:end="49:5">else if <condition pos:start="37:15" pos:end="37:75">(<expr pos:start="37:16" pos:end="37:74"><name pos:start="37:16" pos:end="37:25"><name pos:start="37:16" pos:end="37:19">head</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:25">type</name></name> <operator pos:start="37:27" pos:end="37:28">!=</operator> <name pos:start="37:30" pos:end="37:38">expecting</name> <operator pos:start="37:40" pos:end="37:41">||</operator> <name pos:start="37:43" pos:end="37:52"><name pos:start="37:43" pos:end="37:46">head</name><operator pos:start="37:47" pos:end="37:48">-&gt;</operator><name pos:start="37:49" pos:end="37:52">type</name></name> <operator pos:start="37:54" pos:end="37:55">==</operator> <name pos:start="37:57" pos:end="37:74">RDMA_CONTROL_ERROR</name></expr>)</condition> <block pos:start="37:77" pos:end="49:5">{<block_content pos:start="39:9" pos:end="47:20">

        <expr_stmt pos:start="39:9" pos:end="45:65"><expr pos:start="39:9" pos:end="45:64"><call pos:start="39:9" pos:end="45:64"><name pos:start="39:9" pos:end="39:15">fprintf</name><argument_list pos:start="39:16" pos:end="45:64">(<argument pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:22">stderr</name></expr></argument>, <argument pos:start="39:25" pos:end="41:50"><expr pos:start="39:25" pos:end="41:50"><literal type="string" pos:start="39:25" pos:end="39:65">"Was expecting a %s (%d) control message"</literal>

                <literal type="string" pos:start="41:17" pos:end="41:50">", but got: %s (%d), length: %d\n"</literal></expr></argument>,

                <argument pos:start="43:17" pos:end="43:39"><expr pos:start="43:17" pos:end="43:39"><name pos:start="43:17" pos:end="43:39"><name pos:start="43:17" pos:end="43:28">control_desc</name><index pos:start="43:29" pos:end="43:39">[<expr pos:start="43:30" pos:end="43:38"><name pos:start="43:30" pos:end="43:38">expecting</name></expr>]</index></name></expr></argument>, <argument pos:start="43:42" pos:end="43:50"><expr pos:start="43:42" pos:end="43:50"><name pos:start="43:42" pos:end="43:50">expecting</name></expr></argument>,

                <argument pos:start="45:17" pos:end="45:40"><expr pos:start="45:17" pos:end="45:40"><name pos:start="45:17" pos:end="45:40"><name pos:start="45:17" pos:end="45:28">control_desc</name><index pos:start="45:29" pos:end="45:40">[<expr pos:start="45:30" pos:end="45:39"><name pos:start="45:30" pos:end="45:39"><name pos:start="45:30" pos:end="45:33">head</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:39">type</name></name></expr>]</index></name></expr></argument>, <argument pos:start="45:43" pos:end="45:52"><expr pos:start="45:43" pos:end="45:52"><name pos:start="45:43" pos:end="45:52"><name pos:start="45:43" pos:end="45:46">head</name><operator pos:start="45:47" pos:end="45:48">-&gt;</operator><name pos:start="45:49" pos:end="45:52">type</name></name></expr></argument>, <argument pos:start="45:55" pos:end="45:63"><expr pos:start="45:55" pos:end="45:63"><name pos:start="45:55" pos:end="45:63"><name pos:start="45:55" pos:end="45:58">head</name><operator pos:start="45:59" pos:end="45:60">-&gt;</operator><name pos:start="45:61" pos:end="45:63">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:20">return <expr pos:start="47:16" pos:end="47:19"><operator pos:start="47:16" pos:end="47:16">-</operator><name pos:start="47:17" pos:end="47:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:60">(<expr pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:12">head</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:17">len</name></name> <operator pos:start="51:19" pos:end="51:19">&gt;</operator> <name pos:start="51:21" pos:end="51:43">RDMA_CONTROL_MAX_BUFFER</name> <operator pos:start="51:45" pos:end="51:45">-</operator> <sizeof pos:start="51:47" pos:end="51:59">sizeof<argument_list pos:start="51:53" pos:end="51:59">(<argument pos:start="51:54" pos:end="51:58"><expr pos:start="51:54" pos:end="51:58"><operator pos:start="51:54" pos:end="51:54">*</operator><name pos:start="51:55" pos:end="51:58">head</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="51:62" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:23">

        <expr_stmt pos:start="53:9" pos:end="53:60"><expr pos:start="53:9" pos:end="53:59"><call pos:start="53:9" pos:end="53:59"><name pos:start="53:9" pos:end="53:15">fprintf</name><argument_list pos:start="53:16" pos:end="53:59">(<argument pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:22">stderr</name></expr></argument>, <argument pos:start="53:25" pos:end="53:47"><expr pos:start="53:25" pos:end="53:47"><literal type="string" pos:start="53:25" pos:end="53:47">"too long length: %d\n"</literal></expr></argument>, <argument pos:start="53:50" pos:end="53:58"><expr pos:start="53:50" pos:end="53:58"><name pos:start="53:50" pos:end="53:58"><name pos:start="53:50" pos:end="53:53">head</name><operator pos:start="53:54" pos:end="53:55">-&gt;</operator><name pos:start="53:56" pos:end="53:58">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:23">return <expr pos:start="55:16" pos:end="55:22"><operator pos:start="55:16" pos:end="55:16">-</operator><name pos:start="55:17" pos:end="55:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="61:5" pos:end="61:13">return <expr pos:start="61:12" pos:end="61:12"><literal type="number" pos:start="61:12" pos:end="61:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
