<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2156.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">flashsv_encode_frame</name><parameter_list pos:start="1:32" pos:end="1:94">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:67"><decl pos:start="1:56" pos:end="1:67"><type pos:start="1:56" pos:end="1:67"><name pos:start="1:56" pos:end="1:62">uint8_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">buf</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:81"><decl pos:start="1:70" pos:end="1:81"><type pos:start="1:70" pos:end="1:81"><name pos:start="1:70" pos:end="1:72">int</name></type> <name pos:start="1:74" pos:end="1:81">buf_size</name></decl></parameter>, <parameter pos:start="1:84" pos:end="1:93"><decl pos:start="1:84" pos:end="1:93"><type pos:start="1:84" pos:end="1:93"><name pos:start="1:84" pos:end="1:87">void</name> <modifier pos:start="1:89" pos:end="1:89">*</modifier></type><name pos:start="1:90" pos:end="1:93">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="177:1">{<block_content pos:start="5:5" pos:end="175:15">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:18">FlashSVContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier> <specifier pos:start="5:22" pos:end="5:26">const</specifier></type> <name pos:start="5:28" pos:end="5:28">s</name> <init pos:start="5:30" pos:end="5:47">= <expr pos:start="5:32" pos:end="5:47"><name pos:start="5:32" pos:end="5:47"><name pos:start="5:32" pos:end="5:36">avctx</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:47">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:17">pict</name> <init pos:start="7:19" pos:end="7:24">= <expr pos:start="7:21" pos:end="7:24"><name pos:start="7:21" pos:end="7:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier> <specifier pos:start="9:15" pos:end="9:19">const</specifier></type> <name pos:start="9:21" pos:end="9:21">p</name> <init pos:start="9:23" pos:end="9:33">= <expr pos:start="9:25" pos:end="9:33"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:33"><name pos:start="9:26" pos:end="9:26">s</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:33">frame</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">I_frame</name> <init pos:start="13:17" pos:end="13:19">= <expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">opt_w</name></decl>, <decl pos:start="15:16" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:16" pos:end="15:20">opt_h</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:15"><expr pos:start="19:5" pos:end="19:14"><operator pos:start="19:5" pos:end="19:5">*</operator><name pos:start="19:6" pos:end="19:6">p</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <operator pos:start="19:10" pos:end="19:10">*</operator><name pos:start="19:11" pos:end="19:14">pict</name></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:44">/* First frame needs to be a keyframe */</comment>

    <if_stmt pos:start="25:5" pos:end="39:5"><if pos:start="25:5" pos:end="39:5">if <condition pos:start="25:8" pos:end="25:33">(<expr pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:13">avctx</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:27">frame_number</name></name> <operator pos:start="25:29" pos:end="25:30">==</operator> <literal type="number" pos:start="25:32" pos:end="25:32">0</literal></expr>)</condition> <block pos:start="25:35" pos:end="39:5">{<block_content pos:start="27:9" pos:end="37:20">

        <expr_stmt pos:start="27:9" pos:end="27:71"><expr pos:start="27:9" pos:end="27:70"><name pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:25">previous_frame</name></name> <operator pos:start="27:27" pos:end="27:27">=</operator> <call pos:start="27:29" pos:end="27:70"><name pos:start="27:29" pos:end="27:38">av_mallocz</name><argument_list pos:start="27:39" pos:end="27:70">(<argument pos:start="27:40" pos:end="27:69"><expr pos:start="27:40" pos:end="27:69"><name pos:start="27:40" pos:end="27:53"><name pos:start="27:40" pos:end="27:40">p</name><operator pos:start="27:41" pos:end="27:42">-&gt;</operator><name pos:start="27:43" pos:end="27:50">linesize</name><index pos:start="27:51" pos:end="27:53">[<expr pos:start="27:52" pos:end="27:52"><literal type="number" pos:start="27:52" pos:end="27:52">0</literal></expr>]</index></name><operator pos:start="27:54" pos:end="27:54">*</operator><name pos:start="27:55" pos:end="27:69"><name pos:start="27:55" pos:end="27:55">s</name><operator pos:start="27:56" pos:end="27:57">-&gt;</operator><name pos:start="27:58" pos:end="27:69">image_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:31">(<expr pos:start="29:13" pos:end="29:30"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:30"><name pos:start="29:14" pos:end="29:14">s</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:30">previous_frame</name></name></expr>)</condition> <block pos:start="29:33" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:22">

            <expr_stmt pos:start="31:13" pos:end="31:71"><expr pos:start="31:13" pos:end="31:70"><call pos:start="31:13" pos:end="31:70"><name pos:start="31:13" pos:end="31:18">av_log</name><argument_list pos:start="31:19" pos:end="31:70">(<argument pos:start="31:20" pos:end="31:24"><expr pos:start="31:20" pos:end="31:24"><name pos:start="31:20" pos:end="31:24">avctx</name></expr></argument>, <argument pos:start="31:27" pos:end="31:38"><expr pos:start="31:27" pos:end="31:38"><name pos:start="31:27" pos:end="31:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:41" pos:end="31:69"><expr pos:start="31:41" pos:end="31:69"><literal type="string" pos:start="31:41" pos:end="31:69">"Memory allocation failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="33:13" pos:end="33:22">return <expr pos:start="33:20" pos:end="33:21"><operator pos:start="33:20" pos:end="33:20">-</operator><literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:20"><expr pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:15">I_frame</name> <operator pos:start="37:17" pos:end="37:17">=</operator> <literal type="number" pos:start="37:19" pos:end="37:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:42">/* Check the placement of keyframes */</comment>

    <if_stmt pos:start="45:5" pos:end="120:0"><if pos:start="45:5" pos:end="120:0">if <condition pos:start="45:8" pos:end="45:28">(<expr pos:start="45:9" pos:end="45:27"><name pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:13">avctx</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:23">gop_size</name></name> <operator pos:start="45:25" pos:end="45:25">&gt;</operator> <literal type="number" pos:start="45:27" pos:end="45:27">0</literal></expr>)</condition> <block pos:start="45:30" pos:end="120:0">{<block_content pos:start="47:9" pos:end="51:9">

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:71">(<expr pos:start="47:13" pos:end="47:70"><name pos:start="47:13" pos:end="47:31"><name pos:start="47:13" pos:end="47:17">avctx</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:31">frame_number</name></name> <operator pos:start="47:33" pos:end="47:34">&gt;=</operator> <name pos:start="47:36" pos:end="47:52"><name pos:start="47:36" pos:end="47:36">s</name><operator pos:start="47:37" pos:end="47:38">-&gt;</operator><name pos:start="47:39" pos:end="47:52">last_key_frame</name></name> <operator pos:start="47:54" pos:end="47:54">+</operator> <name pos:start="47:56" pos:end="47:70"><name pos:start="47:56" pos:end="47:60">avctx</name><operator pos:start="47:61" pos:end="47:62">-&gt;</operator><name pos:start="47:63" pos:end="47:70">gop_size</name></name></expr>)</condition> <block pos:start="47:73" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:24">

            <expr_stmt pos:start="49:13" pos:end="49:24"><expr pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:19">I_frame</name> <operator pos:start="49:21" pos:end="49:21">=</operator> <literal type="number" pos:start="49:23" pos:end="49:23">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="57:1" pos:end="57:5">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:5"><literal type="number" pos:start="57:5" pos:end="57:5">0</literal></expr></cpp:if>

    int w, h;

    int optim_sizes[16][16];

    int smallest_size;

    <comment type="line" pos:start="65:5" pos:end="65:69">//Try all possible combinations and store the encoded frame sizes</comment>

    for (w=1 ; w&lt;17 ; w++) {

        for (h=1 ; h&lt;17 ; h++) {

            optim_sizes[w-1][h-1] = encode_bitstream(s, p, s-&gt;encbuffer, s-&gt;image_width*s-&gt;image_height*4, w*16, h*16, s-&gt;previous_frame);

            <comment type="line" pos:start="73:13" pos:end="73:91">//av_log(avctx, AV_LOG_ERROR, "[%d][%d]size = %d\n",w,h,optim_sizes[w-1][h-1]);</comment>

        }

    }



    <comment type="line" pos:start="81:5" pos:end="81:82">//Search for the smallest framesize and encode the frame with those parameters</comment>

    smallest_size=optim_sizes[0][0];

    opt_w = 0;

    opt_h = 0;

    for (w=0 ; w&lt;16 ; w++) {

        for (h=0 ; h&lt;16 ; h++) {

            if (optim_sizes[w][h] &lt; smallest_size) {

                smallest_size = optim_sizes[w][h];

                opt_w = w;

                opt_h = h;

            }

        }

    }

    res = encode_bitstream(s, p, buf, buf_size, (opt_w+1)*16, (opt_h+1)*16, s-&gt;previous_frame);

    av_log(avctx, AV_LOG_ERROR, "[%d][%d]optimal size = %d, res = %d|\n", opt_w, opt_h, smallest_size, res);



    if (buf_size &lt; res)

        av_log(avctx, AV_LOG_ERROR, "buf_size %d &lt; res %d\n", buf_size, res);



<cpp:else pos:start="119:1" pos:end="119:5">#<cpp:directive pos:start="119:2" pos:end="119:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="121:5" pos:end="121:12"><expr pos:start="121:5" pos:end="121:11"><name pos:start="121:5" pos:end="121:9">opt_w</name><operator pos:start="121:10" pos:end="121:10">=</operator><literal type="number" pos:start="121:11" pos:end="121:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:12"><expr pos:start="123:5" pos:end="123:11"><name pos:start="123:5" pos:end="123:9">opt_h</name><operator pos:start="123:10" pos:end="123:10">=</operator><literal type="number" pos:start="123:11" pos:end="123:11">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="127:5" pos:end="135:5"><if pos:start="127:5" pos:end="135:5">if <condition pos:start="127:8" pos:end="127:52">(<expr pos:start="127:9" pos:end="127:51"><name pos:start="127:9" pos:end="127:16">buf_size</name> <operator pos:start="127:18" pos:end="127:18">&lt;</operator> <name pos:start="127:20" pos:end="127:33"><name pos:start="127:20" pos:end="127:20">s</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:33">image_width</name></name><operator pos:start="127:34" pos:end="127:34">*</operator><name pos:start="127:35" pos:end="127:49"><name pos:start="127:35" pos:end="127:35">s</name><operator pos:start="127:36" pos:end="127:37">-&gt;</operator><name pos:start="127:38" pos:end="127:49">image_height</name></name><operator pos:start="127:50" pos:end="127:50">*</operator><literal type="number" pos:start="127:51" pos:end="127:51">3</literal></expr>)</condition> <block pos:start="127:54" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:18">

        <comment type="line" pos:start="129:9" pos:end="129:60">//Conservative upper bound check for compressed data</comment>

        <expr_stmt pos:start="131:9" pos:end="131:103"><expr pos:start="131:9" pos:end="131:102"><call pos:start="131:9" pos:end="131:102"><name pos:start="131:9" pos:end="131:14">av_log</name><argument_list pos:start="131:15" pos:end="131:102">(<argument pos:start="131:16" pos:end="131:20"><expr pos:start="131:16" pos:end="131:20"><name pos:start="131:16" pos:end="131:20">avctx</name></expr></argument>, <argument pos:start="131:23" pos:end="131:34"><expr pos:start="131:23" pos:end="131:34"><name pos:start="131:23" pos:end="131:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="131:37" pos:end="131:57"><expr pos:start="131:37" pos:end="131:57"><literal type="string" pos:start="131:37" pos:end="131:57">"buf_size %d &lt;  %d\n"</literal></expr></argument>, <argument pos:start="131:60" pos:end="131:67"><expr pos:start="131:60" pos:end="131:67"><name pos:start="131:60" pos:end="131:67">buf_size</name></expr></argument>, <argument pos:start="131:70" pos:end="131:101"><expr pos:start="131:70" pos:end="131:101"><name pos:start="131:70" pos:end="131:83"><name pos:start="131:70" pos:end="131:70">s</name><operator pos:start="131:71" pos:end="131:72">-&gt;</operator><name pos:start="131:73" pos:end="131:83">image_width</name></name><operator pos:start="131:84" pos:end="131:84">*</operator><name pos:start="131:85" pos:end="131:99"><name pos:start="131:85" pos:end="131:85">s</name><operator pos:start="131:86" pos:end="131:87">-&gt;</operator><name pos:start="131:88" pos:end="131:99">image_height</name></name><operator pos:start="131:100" pos:end="131:100">*</operator><literal type="number" pos:start="131:101" pos:end="131:101">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:18">return <expr pos:start="133:16" pos:end="133:17"><operator pos:start="133:16" pos:end="133:16">-</operator><literal type="number" pos:start="133:17" pos:end="133:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="139:5" pos:end="142:0"><expr pos:start="139:5" pos:end="139:96"><name pos:start="139:5" pos:end="139:7">res</name> <operator pos:start="139:9" pos:end="139:9">=</operator> <call pos:start="139:11" pos:end="139:96"><name pos:start="139:11" pos:end="139:26">encode_bitstream</name><argument_list pos:start="139:27" pos:end="139:96">(<argument pos:start="139:28" pos:end="139:28"><expr pos:start="139:28" pos:end="139:28"><name pos:start="139:28" pos:end="139:28">s</name></expr></argument>, <argument pos:start="139:31" pos:end="139:31"><expr pos:start="139:31" pos:end="139:31"><name pos:start="139:31" pos:end="139:31">p</name></expr></argument>, <argument pos:start="139:34" pos:end="139:36"><expr pos:start="139:34" pos:end="139:36"><name pos:start="139:34" pos:end="139:36">buf</name></expr></argument>, <argument pos:start="139:39" pos:end="139:46"><expr pos:start="139:39" pos:end="139:46"><name pos:start="139:39" pos:end="139:46">buf_size</name></expr></argument>, <argument pos:start="139:49" pos:end="139:56"><expr pos:start="139:49" pos:end="139:56"><name pos:start="139:49" pos:end="139:53">opt_w</name><operator pos:start="139:54" pos:end="139:54">*</operator><literal type="number" pos:start="139:55" pos:end="139:56">16</literal></expr></argument>, <argument pos:start="139:59" pos:end="139:66"><expr pos:start="139:59" pos:end="139:66"><name pos:start="139:59" pos:end="139:63">opt_h</name><operator pos:start="139:64" pos:end="139:64">*</operator><literal type="number" pos:start="139:65" pos:end="139:66">16</literal></expr></argument>, <argument pos:start="139:69" pos:end="139:85"><expr pos:start="139:69" pos:end="139:85"><name pos:start="139:69" pos:end="139:85"><name pos:start="139:69" pos:end="139:69">s</name><operator pos:start="139:70" pos:end="139:71">-&gt;</operator><name pos:start="139:72" pos:end="139:85">previous_frame</name></name></expr></argument>, <argument pos:start="139:88" pos:end="139:95"><expr pos:start="139:88" pos:end="139:95"><operator pos:start="139:88" pos:end="139:88">&amp;</operator><name pos:start="139:89" pos:end="139:95">I_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>

    <comment type="line" pos:start="143:5" pos:end="143:28">//save the current frame</comment>

    <expr_stmt pos:start="145:5" pos:end="145:74"><expr pos:start="145:5" pos:end="145:73"><call pos:start="145:5" pos:end="145:73"><name pos:start="145:5" pos:end="145:10">memcpy</name><argument_list pos:start="145:11" pos:end="145:73">(<argument pos:start="145:12" pos:end="145:28"><expr pos:start="145:12" pos:end="145:28"><name pos:start="145:12" pos:end="145:28"><name pos:start="145:12" pos:end="145:12">s</name><operator pos:start="145:13" pos:end="145:14">-&gt;</operator><name pos:start="145:15" pos:end="145:28">previous_frame</name></name></expr></argument>, <argument pos:start="145:31" pos:end="145:40"><expr pos:start="145:31" pos:end="145:40"><name pos:start="145:31" pos:end="145:40"><name pos:start="145:31" pos:end="145:31">p</name><operator pos:start="145:32" pos:end="145:33">-&gt;</operator><name pos:start="145:34" pos:end="145:37">data</name><index pos:start="145:38" pos:end="145:40">[<expr pos:start="145:39" pos:end="145:39"><literal type="number" pos:start="145:39" pos:end="145:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="145:43" pos:end="145:72"><expr pos:start="145:43" pos:end="145:72"><name pos:start="145:43" pos:end="145:57"><name pos:start="145:43" pos:end="145:43">s</name><operator pos:start="145:44" pos:end="145:45">-&gt;</operator><name pos:start="145:46" pos:end="145:57">image_height</name></name><operator pos:start="145:58" pos:end="145:58">*</operator><name pos:start="145:59" pos:end="145:72"><name pos:start="145:59" pos:end="145:59">p</name><operator pos:start="145:60" pos:end="145:61">-&gt;</operator><name pos:start="145:62" pos:end="145:69">linesize</name><index pos:start="145:70" pos:end="145:72">[<expr pos:start="145:71" pos:end="145:71"><literal type="number" pos:start="145:71" pos:end="145:71">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="149:5" pos:end="149:59">//mark the frame type so the muxer can mux it correctly</comment>

    <if_stmt pos:start="151:5" pos:end="167:5"><if pos:start="151:5" pos:end="161:5">if <condition pos:start="151:8" pos:end="151:16">(<expr pos:start="151:9" pos:end="151:15"><name pos:start="151:9" pos:end="151:15">I_frame</name></expr>)</condition> <block pos:start="151:18" pos:end="161:5">{<block_content pos:start="153:9" pos:end="159:93">

        <expr_stmt pos:start="153:9" pos:end="153:33"><expr pos:start="153:9" pos:end="153:32"><name pos:start="153:9" pos:end="153:20"><name pos:start="153:9" pos:end="153:9">p</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:20">pict_type</name></name> <operator pos:start="153:22" pos:end="153:22">=</operator> <name pos:start="153:24" pos:end="153:32">FF_I_TYPE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:25"><expr pos:start="155:9" pos:end="155:24"><name pos:start="155:9" pos:end="155:20"><name pos:start="155:9" pos:end="155:9">p</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:20">key_frame</name></name> <operator pos:start="155:22" pos:end="155:22">=</operator> <literal type="number" pos:start="155:24" pos:end="155:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:48"><expr pos:start="157:9" pos:end="157:47"><name pos:start="157:9" pos:end="157:25"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:25">last_key_frame</name></name> <operator pos:start="157:27" pos:end="157:27">=</operator> <name pos:start="157:29" pos:end="157:47"><name pos:start="157:29" pos:end="157:33">avctx</name><operator pos:start="157:34" pos:end="157:35">-&gt;</operator><name pos:start="157:36" pos:end="157:47">frame_number</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:93"><expr pos:start="159:9" pos:end="159:92"><call pos:start="159:9" pos:end="159:92"><name pos:start="159:9" pos:end="159:14">av_log</name><argument_list pos:start="159:15" pos:end="159:92">(<argument pos:start="159:16" pos:end="159:20"><expr pos:start="159:16" pos:end="159:20"><name pos:start="159:16" pos:end="159:20">avctx</name></expr></argument>, <argument pos:start="159:23" pos:end="159:34"><expr pos:start="159:23" pos:end="159:34"><name pos:start="159:23" pos:end="159:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="159:37" pos:end="159:71"><expr pos:start="159:37" pos:end="159:71"><literal type="string" pos:start="159:37" pos:end="159:71">"Inserting key frame at frame %d\n"</literal></expr></argument>,<argument pos:start="159:73" pos:end="159:91"><expr pos:start="159:73" pos:end="159:91"><name pos:start="159:73" pos:end="159:91"><name pos:start="159:73" pos:end="159:77">avctx</name><operator pos:start="159:78" pos:end="159:79">-&gt;</operator><name pos:start="159:80" pos:end="159:91">frame_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="161:7" pos:end="167:5">else <block pos:start="161:12" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:25">

        <expr_stmt pos:start="163:9" pos:end="163:33"><expr pos:start="163:9" pos:end="163:32"><name pos:start="163:9" pos:end="163:20"><name pos:start="163:9" pos:end="163:9">p</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:20">pict_type</name></name> <operator pos:start="163:22" pos:end="163:22">=</operator> <name pos:start="163:24" pos:end="163:32">FF_P_TYPE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:25"><expr pos:start="165:9" pos:end="165:24"><name pos:start="165:9" pos:end="165:20"><name pos:start="165:9" pos:end="165:9">p</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:20">key_frame</name></name> <operator pos:start="165:22" pos:end="165:22">=</operator> <literal type="number" pos:start="165:24" pos:end="165:24">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:27"><expr pos:start="171:5" pos:end="171:26"><name pos:start="171:5" pos:end="171:22"><name pos:start="171:5" pos:end="171:9">avctx</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:22">coded_frame</name></name> <operator pos:start="171:24" pos:end="171:24">=</operator> <name pos:start="171:26" pos:end="171:26">p</name></expr>;</expr_stmt>



    <return pos:start="175:5" pos:end="175:15">return <expr pos:start="175:12" pos:end="175:14"><name pos:start="175:12" pos:end="175:14">res</name></expr>;</return>

</block_content>}</block></function>
</unit>
