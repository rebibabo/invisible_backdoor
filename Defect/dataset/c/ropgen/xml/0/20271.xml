<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20271.c" pos:tabs="8"><function pos:start="1:1" pos:end="447:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="5:62">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:47"><decl pos:start="5:30" pos:end="5:47"><type pos:start="5:30" pos:end="5:47"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:42">uint8_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:47">buf</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:61"><decl pos:start="5:50" pos:end="5:61"><type pos:start="5:50" pos:end="5:61"><name pos:start="5:50" pos:end="5:52">int</name></type> <name pos:start="5:54" pos:end="5:61">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="447:1">{<block_content pos:start="9:5" pos:end="445:54">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">H264Context</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">h</name> <init pos:start="9:20" pos:end="9:37">= <expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">MpegEncContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name> <init pos:start="11:23" pos:end="11:29">= <expr pos:start="11:25" pos:end="11:29"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:26">h</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">pict</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">buf_index</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:27"><expr pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:12">flags</name></name><operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:26"><name pos:start="19:15" pos:end="19:19">avctx</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:26">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:13">flags2</name></name><operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:28"><name pos:start="21:16" pos:end="21:20">avctx</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:28">flags2</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="39:5"><if pos:start="25:5" pos:end="39:5">if<condition pos:start="25:7" pos:end="25:37">(<expr pos:start="25:8" pos:end="25:36"><name pos:start="25:8" pos:end="25:15"><name pos:start="25:8" pos:end="25:8">s</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:15">flags</name></name><operator pos:start="25:16" pos:end="25:16">&amp;</operator><name pos:start="25:17" pos:end="25:36">CODEC_FLAG_TRUNCATED</name></expr>)</condition><block pos:start="25:38" pos:end="39:5">{<block_content pos:start="27:9" pos:end="35:26">

        <decl_stmt pos:start="27:9" pos:end="27:65"><decl pos:start="27:9" pos:end="27:64"><type pos:start="27:9" pos:end="27:17"><specifier pos:start="27:9" pos:end="27:13">const</specifier> <name pos:start="27:15" pos:end="27:17">int</name></type> <name pos:start="27:19" pos:end="27:22">next</name><init pos:start="27:23" pos:end="27:64">= <expr pos:start="27:25" pos:end="27:64"><call pos:start="27:25" pos:end="27:64"><name pos:start="27:25" pos:end="27:46">ff_h264_find_frame_end</name><argument_list pos:start="27:47" pos:end="27:64">(<argument pos:start="27:48" pos:end="27:48"><expr pos:start="27:48" pos:end="27:48"><name pos:start="27:48" pos:end="27:48">h</name></expr></argument>, <argument pos:start="27:51" pos:end="27:53"><expr pos:start="27:51" pos:end="27:53"><name pos:start="27:51" pos:end="27:53">buf</name></expr></argument>, <argument pos:start="27:56" pos:end="27:63"><expr pos:start="27:56" pos:end="27:63"><name pos:start="27:56" pos:end="27:63">buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:58"><expr pos:start="29:9" pos:end="29:57"><call pos:start="29:9" pos:end="29:57"><name pos:start="29:9" pos:end="29:14">assert</name><argument_list pos:start="29:15" pos:end="29:57">(<argument pos:start="29:16" pos:end="29:56"><expr pos:start="29:16" pos:end="29:56"><operator pos:start="29:16" pos:end="29:16">(</operator><name pos:start="29:17" pos:end="29:24">buf_size</name> <operator pos:start="29:26" pos:end="29:26">&gt;</operator> <literal type="number" pos:start="29:28" pos:end="29:28">0</literal><operator pos:start="29:29" pos:end="29:29">)</operator> <operator pos:start="29:31" pos:end="29:32">||</operator> <operator pos:start="29:34" pos:end="29:34">(</operator><name pos:start="29:35" pos:end="29:38">next</name> <operator pos:start="29:40" pos:end="29:41">==</operator> <name pos:start="29:43" pos:end="29:55">END_NOT_FOUND</name><operator pos:start="29:56" pos:end="29:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="33:9" pos:end="35:26"><if pos:start="33:9" pos:end="35:26">if<condition pos:start="33:11" pos:end="33:76">( <expr pos:start="33:13" pos:end="33:74"><call pos:start="33:13" pos:end="33:70"><name pos:start="33:13" pos:end="33:28">ff_combine_frame</name><argument_list pos:start="33:29" pos:end="33:70">(<argument pos:start="33:30" pos:end="33:46"><expr pos:start="33:30" pos:end="33:46"><operator pos:start="33:30" pos:end="33:30">&amp;</operator><name pos:start="33:31" pos:end="33:46"><name pos:start="33:31" pos:end="33:31">s</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:46">parse_context</name></name></expr></argument>, <argument pos:start="33:49" pos:end="33:52"><expr pos:start="33:49" pos:end="33:52"><name pos:start="33:49" pos:end="33:52">next</name></expr></argument>, <argument pos:start="33:55" pos:end="33:58"><expr pos:start="33:55" pos:end="33:58"><operator pos:start="33:55" pos:end="33:55">&amp;</operator><name pos:start="33:56" pos:end="33:58">buf</name></expr></argument>, <argument pos:start="33:61" pos:end="33:69"><expr pos:start="33:61" pos:end="33:69"><operator pos:start="33:61" pos:end="33:61">&amp;</operator><name pos:start="33:62" pos:end="33:69">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="33:72" pos:end="33:72">&lt;</operator> <literal type="number" pos:start="33:74" pos:end="33:74">0</literal></expr> )</condition><block type="pseudo" pos:start="35:11" pos:end="35:26"><block_content pos:start="35:11" pos:end="35:26">

          <return pos:start="35:11" pos:end="35:26">return <expr pos:start="35:18" pos:end="35:25"><name pos:start="35:18" pos:end="35:25">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

<comment type="line" pos:start="37:1" pos:end="37:93">//printf("next:%d buf_size:%d last_index:%d\n", next, buf_size, s-&gt;parse_context.last_index);</comment>

    </block_content>}</block></if></if_stmt>



   <comment type="block" pos:start="43:4" pos:end="43:33">/* no supplementary picture */</comment>

    <if_stmt pos:start="45:5" pos:end="89:5"><if pos:start="45:5" pos:end="89:5">if <condition pos:start="45:8" pos:end="45:22">(<expr pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:16">buf_size</name> <operator pos:start="45:18" pos:end="45:19">==</operator> <literal type="number" pos:start="45:21" pos:end="45:21">0</literal></expr>)</condition> <block pos:start="45:24" pos:end="89:5">{<block_content pos:start="47:9" pos:end="87:17">

        <decl_stmt pos:start="47:9" pos:end="47:21"><decl pos:start="47:9" pos:end="47:20"><type pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:15">Picture</name> <modifier pos:start="47:17" pos:end="47:17">*</modifier></type><name pos:start="47:18" pos:end="47:20">out</name></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:23"><decl pos:start="49:9" pos:end="49:13"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:13">i</name></decl>, <decl pos:start="49:16" pos:end="49:22"><type ref="prev" pos:start="49:9" pos:end="49:11"/><name pos:start="49:16" pos:end="49:22">out_idx</name></decl>;</decl_stmt>



<comment type="line" pos:start="53:1" pos:end="53:49">//FIXME factorize this with the output code below</comment>

        <expr_stmt pos:start="55:9" pos:end="55:32"><expr pos:start="55:9" pos:end="55:31"><name pos:start="55:9" pos:end="55:11">out</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <name pos:start="55:15" pos:end="55:31"><name pos:start="55:15" pos:end="55:15">h</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:28">delayed_pic</name><index pos:start="55:29" pos:end="55:31">[<expr pos:start="55:30" pos:end="55:30"><literal type="number" pos:start="55:30" pos:end="55:30">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:20"><expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:15">out_idx</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>;</expr_stmt>

        <for pos:start="59:9" pos:end="67:13">for<control pos:start="59:12" pos:end="59:99">(<init pos:start="59:13" pos:end="59:16"><expr pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:13">i</name><operator pos:start="59:14" pos:end="59:14">=</operator><literal type="number" pos:start="59:15" pos:end="59:15">1</literal></expr>;</init> <condition pos:start="59:18" pos:end="59:94"><expr pos:start="59:18" pos:end="59:93"><name pos:start="59:18" pos:end="59:34"><name pos:start="59:18" pos:end="59:18">h</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:31">delayed_pic</name><index pos:start="59:32" pos:end="59:34">[<expr pos:start="59:33" pos:end="59:33"><name pos:start="59:33" pos:end="59:33">i</name></expr>]</index></name> <operator pos:start="59:36" pos:end="59:37">&amp;&amp;</operator> <operator pos:start="59:39" pos:end="59:39">!</operator><name pos:start="59:40" pos:end="59:56"><name pos:start="59:40" pos:end="59:40">h</name><operator pos:start="59:41" pos:end="59:42">-&gt;</operator><name pos:start="59:43" pos:end="59:53">delayed_pic</name><index pos:start="59:54" pos:end="59:56">[<expr pos:start="59:55" pos:end="59:55"><name pos:start="59:55" pos:end="59:55">i</name></expr>]</index></name><operator pos:start="59:57" pos:end="59:58">-&gt;</operator><name pos:start="59:59" pos:end="59:67">key_frame</name> <operator pos:start="59:69" pos:end="59:70">&amp;&amp;</operator> <name pos:start="59:72" pos:end="59:88"><name pos:start="59:72" pos:end="59:72">h</name><operator pos:start="59:73" pos:end="59:74">-&gt;</operator><name pos:start="59:75" pos:end="59:85">delayed_pic</name><index pos:start="59:86" pos:end="59:88">[<expr pos:start="59:87" pos:end="59:87"><name pos:start="59:87" pos:end="59:87">i</name></expr>]</index></name><operator pos:start="59:89" pos:end="59:90">-&gt;</operator><name pos:start="59:91" pos:end="59:93">poc</name></expr>;</condition> <incr pos:start="59:96" pos:end="59:98"><expr pos:start="59:96" pos:end="59:98"><name pos:start="59:96" pos:end="59:96">i</name><operator pos:start="59:97" pos:end="59:98">++</operator></expr></incr>)</control><block type="pseudo" pos:start="61:13" pos:end="67:13"><block_content pos:start="61:13" pos:end="67:13">

            <if_stmt pos:start="61:13" pos:end="67:13"><if pos:start="61:13" pos:end="67:13">if<condition pos:start="61:15" pos:end="61:49">(<expr pos:start="61:16" pos:end="61:48"><name pos:start="61:16" pos:end="61:32"><name pos:start="61:16" pos:end="61:16">h</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:29">delayed_pic</name><index pos:start="61:30" pos:end="61:32">[<expr pos:start="61:31" pos:end="61:31"><name pos:start="61:31" pos:end="61:31">i</name></expr>]</index></name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:37">poc</name> <operator pos:start="61:39" pos:end="61:39">&lt;</operator> <name pos:start="61:41" pos:end="61:48"><name pos:start="61:41" pos:end="61:43">out</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:48">poc</name></name></expr>)</condition><block pos:start="61:50" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:28">

                <expr_stmt pos:start="63:17" pos:end="63:40"><expr pos:start="63:17" pos:end="63:39"><name pos:start="63:17" pos:end="63:19">out</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:39"><name pos:start="63:23" pos:end="63:23">h</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:36">delayed_pic</name><index pos:start="63:37" pos:end="63:39">[<expr pos:start="63:38" pos:end="63:38"><name pos:start="63:38" pos:end="63:38">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:28"><expr pos:start="65:17" pos:end="65:27"><name pos:start="65:17" pos:end="65:23">out_idx</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <name pos:start="65:27" pos:end="65:27">i</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt></block_content></block></for>



        <for pos:start="71:9" pos:end="73:52">for<control pos:start="71:12" pos:end="71:46">(<init pos:start="71:13" pos:end="71:22"><expr pos:start="71:13" pos:end="71:21"><name pos:start="71:13" pos:end="71:13">i</name><operator pos:start="71:14" pos:end="71:14">=</operator><name pos:start="71:15" pos:end="71:21">out_idx</name></expr>;</init> <condition pos:start="71:24" pos:end="71:41"><expr pos:start="71:24" pos:end="71:40"><name pos:start="71:24" pos:end="71:40"><name pos:start="71:24" pos:end="71:24">h</name><operator pos:start="71:25" pos:end="71:26">-&gt;</operator><name pos:start="71:27" pos:end="71:37">delayed_pic</name><index pos:start="71:38" pos:end="71:40">[<expr pos:start="71:39" pos:end="71:39"><name pos:start="71:39" pos:end="71:39">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="71:43" pos:end="71:45"><expr pos:start="71:43" pos:end="71:45"><name pos:start="71:43" pos:end="71:43">i</name><operator pos:start="71:44" pos:end="71:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="73:13" pos:end="73:52"><block_content pos:start="73:13" pos:end="73:52">

            <expr_stmt pos:start="73:13" pos:end="73:52"><expr pos:start="73:13" pos:end="73:51"><name pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:13">h</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:26">delayed_pic</name><index pos:start="73:27" pos:end="73:29">[<expr pos:start="73:28" pos:end="73:28"><name pos:start="73:28" pos:end="73:28">i</name></expr>]</index></name> <operator pos:start="73:31" pos:end="73:31">=</operator> <name pos:start="73:33" pos:end="73:51"><name pos:start="73:33" pos:end="73:33">h</name><operator pos:start="73:34" pos:end="73:35">-&gt;</operator><name pos:start="73:36" pos:end="73:46">delayed_pic</name><index pos:start="73:47" pos:end="73:51">[<expr pos:start="73:48" pos:end="73:50"><name pos:start="73:48" pos:end="73:48">i</name><operator pos:start="73:49" pos:end="73:49">+</operator><literal type="number" pos:start="73:50" pos:end="73:50">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if<condition pos:start="77:11" pos:end="77:15">(<expr pos:start="77:12" pos:end="77:14"><name pos:start="77:12" pos:end="77:14">out</name></expr>)</condition><block pos:start="77:16" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:34">

            <expr_stmt pos:start="79:13" pos:end="79:41"><expr pos:start="79:13" pos:end="79:40"><operator pos:start="79:13" pos:end="79:13">*</operator><name pos:start="79:14" pos:end="79:22">data_size</name> <operator pos:start="79:24" pos:end="79:24">=</operator> <sizeof pos:start="79:26" pos:end="79:40">sizeof<argument_list pos:start="79:32" pos:end="79:40">(<argument pos:start="79:33" pos:end="79:39"><expr pos:start="79:33" pos:end="79:39"><name pos:start="79:33" pos:end="79:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:34"><expr pos:start="81:13" pos:end="81:33"><operator pos:start="81:13" pos:end="81:13">*</operator><name pos:start="81:14" pos:end="81:17">pict</name><operator pos:start="81:18" pos:end="81:18">=</operator> <operator pos:start="81:20" pos:end="81:20">*</operator><operator pos:start="81:21" pos:end="81:21">(</operator><name pos:start="81:22" pos:end="81:28">AVFrame</name><operator pos:start="81:29" pos:end="81:29">*</operator><operator pos:start="81:30" pos:end="81:30">)</operator><name pos:start="81:31" pos:end="81:33">out</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="87:9" pos:end="87:17">return <expr pos:start="87:16" pos:end="87:16"><literal type="number" pos:start="87:16" pos:end="87:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="93:5" pos:end="171:5"><if pos:start="93:5" pos:end="171:5">if<condition pos:start="93:7" pos:end="93:33">(<expr pos:start="93:8" pos:end="93:32"><name pos:start="93:8" pos:end="93:16"><name pos:start="93:8" pos:end="93:8">h</name><operator pos:start="93:9" pos:end="93:10">-&gt;</operator><name pos:start="93:11" pos:end="93:16">is_avc</name></name> <operator pos:start="93:18" pos:end="93:19">&amp;&amp;</operator> <operator pos:start="93:21" pos:end="93:21">!</operator><name pos:start="93:22" pos:end="93:32"><name pos:start="93:22" pos:end="93:22">h</name><operator pos:start="93:23" pos:end="93:24">-&gt;</operator><name pos:start="93:25" pos:end="93:32">got_avcC</name></name></expr>)</condition> <block pos:start="93:35" pos:end="171:5">{<block_content pos:start="95:9" pos:end="169:24">

        <decl_stmt pos:start="95:9" pos:end="95:28"><decl pos:start="95:9" pos:end="95:13"><type pos:start="95:9" pos:end="95:11"><name pos:start="95:9" pos:end="95:11">int</name></type> <name pos:start="95:13" pos:end="95:13">i</name></decl>, <decl pos:start="95:16" pos:end="95:18"><type ref="prev" pos:start="95:9" pos:end="95:11"/><name pos:start="95:16" pos:end="95:18">cnt</name></decl>, <decl pos:start="95:21" pos:end="95:27"><type ref="prev" pos:start="95:9" pos:end="95:11"/><name pos:start="95:21" pos:end="95:27">nalsize</name></decl>;</decl_stmt>

        <decl_stmt pos:start="97:9" pos:end="97:44"><decl pos:start="97:9" pos:end="97:43"><type pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:16">unsigned</name> <name pos:start="97:18" pos:end="97:21">char</name> <modifier pos:start="97:23" pos:end="97:23">*</modifier></type><name pos:start="97:24" pos:end="97:24">p</name> <init pos:start="97:26" pos:end="97:43">= <expr pos:start="97:28" pos:end="97:43"><name pos:start="97:28" pos:end="97:43"><name pos:start="97:28" pos:end="97:32">avctx</name><operator pos:start="97:33" pos:end="97:34">-&gt;</operator><name pos:start="97:35" pos:end="97:43">extradata</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if<condition pos:start="99:11" pos:end="99:37">(<expr pos:start="99:12" pos:end="99:36"><name pos:start="99:12" pos:end="99:32"><name pos:start="99:12" pos:end="99:16">avctx</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:32">extradata_size</name></name> <operator pos:start="99:34" pos:end="99:34">&lt;</operator> <literal type="number" pos:start="99:36" pos:end="99:36">7</literal></expr>)</condition> <block pos:start="99:39" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:22">

            <expr_stmt pos:start="101:13" pos:end="101:60"><expr pos:start="101:13" pos:end="101:59"><call pos:start="101:13" pos:end="101:59"><name pos:start="101:13" pos:end="101:18">av_log</name><argument_list pos:start="101:19" pos:end="101:59">(<argument pos:start="101:20" pos:end="101:24"><expr pos:start="101:20" pos:end="101:24"><name pos:start="101:20" pos:end="101:24">avctx</name></expr></argument>, <argument pos:start="101:27" pos:end="101:38"><expr pos:start="101:27" pos:end="101:38"><name pos:start="101:27" pos:end="101:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:41" pos:end="101:58"><expr pos:start="101:41" pos:end="101:58"><literal type="string" pos:start="101:41" pos:end="101:58">"avcC too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:22">return <expr pos:start="103:20" pos:end="103:21"><operator pos:start="103:20" pos:end="103:20">-</operator><literal type="number" pos:start="103:21" pos:end="103:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if<condition pos:start="107:11" pos:end="107:19">(<expr pos:start="107:12" pos:end="107:18"><operator pos:start="107:12" pos:end="107:12">*</operator><name pos:start="107:13" pos:end="107:13">p</name> <operator pos:start="107:15" pos:end="107:16">!=</operator> <literal type="number" pos:start="107:18" pos:end="107:18">1</literal></expr>)</condition> <block pos:start="107:21" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:22">

            <expr_stmt pos:start="109:13" pos:end="109:73"><expr pos:start="109:13" pos:end="109:72"><call pos:start="109:13" pos:end="109:72"><name pos:start="109:13" pos:end="109:18">av_log</name><argument_list pos:start="109:19" pos:end="109:72">(<argument pos:start="109:20" pos:end="109:24"><expr pos:start="109:20" pos:end="109:24"><name pos:start="109:20" pos:end="109:24">avctx</name></expr></argument>, <argument pos:start="109:27" pos:end="109:38"><expr pos:start="109:27" pos:end="109:38"><name pos:start="109:27" pos:end="109:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:41" pos:end="109:67"><expr pos:start="109:41" pos:end="109:67"><literal type="string" pos:start="109:41" pos:end="109:67">"Unknown avcC version %d\n"</literal></expr></argument>, <argument pos:start="109:70" pos:end="109:71"><expr pos:start="109:70" pos:end="109:71"><operator pos:start="109:70" pos:end="109:70">*</operator><name pos:start="109:71" pos:end="109:71">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:22">return <expr pos:start="111:20" pos:end="111:21"><operator pos:start="111:20" pos:end="111:20">-</operator><literal type="number" pos:start="111:21" pos:end="111:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="115:9" pos:end="117:66">/* sps and pps in the avcC always have length coded with 2 bytes,

           so put a fake nal_length_size = 2 while parsing them */</comment>

        <expr_stmt pos:start="119:9" pos:end="119:31"><expr pos:start="119:9" pos:end="119:30"><name pos:start="119:9" pos:end="119:26"><name pos:start="119:9" pos:end="119:9">h</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:26">nal_length_size</name></name> <operator pos:start="119:28" pos:end="119:28">=</operator> <literal type="number" pos:start="119:30" pos:end="119:30">2</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="121:9" pos:end="121:31">// Decode sps from avcC</comment>

        <expr_stmt pos:start="123:9" pos:end="123:28"><expr pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:11">cnt</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <operator pos:start="123:15" pos:end="123:15">*</operator><operator pos:start="123:16" pos:end="123:16">(</operator><name pos:start="123:17" pos:end="123:17">p</name><operator pos:start="123:18" pos:end="123:18">+</operator><literal type="number" pos:start="123:19" pos:end="123:19">5</literal><operator pos:start="123:20" pos:end="123:20">)</operator> <operator pos:start="123:22" pos:end="123:22">&amp;</operator> <literal type="number" pos:start="123:24" pos:end="123:27">0x1f</literal></expr>;</expr_stmt> <comment type="line" pos:start="123:30" pos:end="123:45">// Number of sps</comment>

        <expr_stmt pos:start="125:9" pos:end="125:15"><expr pos:start="125:9" pos:end="125:14"><name pos:start="125:9" pos:end="125:9">p</name> <operator pos:start="125:11" pos:end="125:12">+=</operator> <literal type="number" pos:start="125:14" pos:end="125:14">6</literal></expr>;</expr_stmt>

        <for pos:start="127:9" pos:end="141:9">for <control pos:start="127:13" pos:end="127:33">(<init pos:start="127:14" pos:end="127:19"><expr pos:start="127:14" pos:end="127:18"><name pos:start="127:14" pos:end="127:14">i</name> <operator pos:start="127:16" pos:end="127:16">=</operator> <literal type="number" pos:start="127:18" pos:end="127:18">0</literal></expr>;</init> <condition pos:start="127:21" pos:end="127:28"><expr pos:start="127:21" pos:end="127:27"><name pos:start="127:21" pos:end="127:21">i</name> <operator pos:start="127:23" pos:end="127:23">&lt;</operator> <name pos:start="127:25" pos:end="127:27">cnt</name></expr>;</condition> <incr pos:start="127:30" pos:end="127:32"><expr pos:start="127:30" pos:end="127:32"><name pos:start="127:30" pos:end="127:30">i</name><operator pos:start="127:31" pos:end="127:32">++</operator></expr></incr>)</control> <block pos:start="127:35" pos:end="141:9">{<block_content pos:start="129:13" pos:end="139:25">

            <expr_stmt pos:start="129:13" pos:end="129:37"><expr pos:start="129:13" pos:end="129:36"><name pos:start="129:13" pos:end="129:19">nalsize</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <call pos:start="129:23" pos:end="129:32"><name pos:start="129:23" pos:end="129:29">AV_RB16</name><argument_list pos:start="129:30" pos:end="129:32">(<argument pos:start="129:31" pos:end="129:31"><expr pos:start="129:31" pos:end="129:31"><name pos:start="129:31" pos:end="129:31">p</name></expr></argument>)</argument_list></call> <operator pos:start="129:34" pos:end="129:34">+</operator> <literal type="number" pos:start="129:36" pos:end="129:36">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="131:13" pos:end="137:13"><if pos:start="131:13" pos:end="137:13">if<condition pos:start="131:15" pos:end="131:51">(<expr pos:start="131:16" pos:end="131:50"><call pos:start="131:16" pos:end="131:46"><name pos:start="131:16" pos:end="131:31">decode_nal_units</name><argument_list pos:start="131:32" pos:end="131:46">(<argument pos:start="131:33" pos:end="131:33"><expr pos:start="131:33" pos:end="131:33"><name pos:start="131:33" pos:end="131:33">h</name></expr></argument>, <argument pos:start="131:36" pos:end="131:36"><expr pos:start="131:36" pos:end="131:36"><name pos:start="131:36" pos:end="131:36">p</name></expr></argument>, <argument pos:start="131:39" pos:end="131:45"><expr pos:start="131:39" pos:end="131:45"><name pos:start="131:39" pos:end="131:45">nalsize</name></expr></argument>)</argument_list></call> <operator pos:start="131:48" pos:end="131:48">&lt;</operator> <literal type="number" pos:start="131:50" pos:end="131:50">0</literal></expr>)</condition> <block pos:start="131:53" pos:end="137:13">{<block_content pos:start="133:17" pos:end="135:26">

                <expr_stmt pos:start="133:17" pos:end="133:85"><expr pos:start="133:17" pos:end="133:84"><call pos:start="133:17" pos:end="133:84"><name pos:start="133:17" pos:end="133:22">av_log</name><argument_list pos:start="133:23" pos:end="133:84">(<argument pos:start="133:24" pos:end="133:28"><expr pos:start="133:24" pos:end="133:28"><name pos:start="133:24" pos:end="133:28">avctx</name></expr></argument>, <argument pos:start="133:31" pos:end="133:42"><expr pos:start="133:31" pos:end="133:42"><name pos:start="133:31" pos:end="133:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:45" pos:end="133:80"><expr pos:start="133:45" pos:end="133:80"><literal type="string" pos:start="133:45" pos:end="133:80">"Decoding sps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="133:83" pos:end="133:83"><expr pos:start="133:83" pos:end="133:83"><name pos:start="133:83" pos:end="133:83">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="135:17" pos:end="135:26">return <expr pos:start="135:24" pos:end="135:25"><operator pos:start="135:24" pos:end="135:24">-</operator><literal type="number" pos:start="135:25" pos:end="135:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:25"><expr pos:start="139:13" pos:end="139:24"><name pos:start="139:13" pos:end="139:13">p</name> <operator pos:start="139:15" pos:end="139:16">+=</operator> <name pos:start="139:18" pos:end="139:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="143:9" pos:end="143:31">// Decode pps from avcC</comment>

        <expr_stmt pos:start="145:9" pos:end="145:21"><expr pos:start="145:9" pos:end="145:20"><name pos:start="145:9" pos:end="145:11">cnt</name> <operator pos:start="145:13" pos:end="145:13">=</operator> <operator pos:start="145:15" pos:end="145:15">*</operator><operator pos:start="145:16" pos:end="145:16">(</operator><name pos:start="145:17" pos:end="145:17">p</name><operator pos:start="145:18" pos:end="145:19">++</operator><operator pos:start="145:20" pos:end="145:20">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="145:23" pos:end="145:38">// Number of pps</comment>

        <for pos:start="147:9" pos:end="161:9">for <control pos:start="147:13" pos:end="147:33">(<init pos:start="147:14" pos:end="147:19"><expr pos:start="147:14" pos:end="147:18"><name pos:start="147:14" pos:end="147:14">i</name> <operator pos:start="147:16" pos:end="147:16">=</operator> <literal type="number" pos:start="147:18" pos:end="147:18">0</literal></expr>;</init> <condition pos:start="147:21" pos:end="147:28"><expr pos:start="147:21" pos:end="147:27"><name pos:start="147:21" pos:end="147:21">i</name> <operator pos:start="147:23" pos:end="147:23">&lt;</operator> <name pos:start="147:25" pos:end="147:27">cnt</name></expr>;</condition> <incr pos:start="147:30" pos:end="147:32"><expr pos:start="147:30" pos:end="147:32"><name pos:start="147:30" pos:end="147:30">i</name><operator pos:start="147:31" pos:end="147:32">++</operator></expr></incr>)</control> <block pos:start="147:35" pos:end="161:9">{<block_content pos:start="149:13" pos:end="159:25">

            <expr_stmt pos:start="149:13" pos:end="149:37"><expr pos:start="149:13" pos:end="149:36"><name pos:start="149:13" pos:end="149:19">nalsize</name> <operator pos:start="149:21" pos:end="149:21">=</operator> <call pos:start="149:23" pos:end="149:32"><name pos:start="149:23" pos:end="149:29">AV_RB16</name><argument_list pos:start="149:30" pos:end="149:32">(<argument pos:start="149:31" pos:end="149:31"><expr pos:start="149:31" pos:end="149:31"><name pos:start="149:31" pos:end="149:31">p</name></expr></argument>)</argument_list></call> <operator pos:start="149:34" pos:end="149:34">+</operator> <literal type="number" pos:start="149:36" pos:end="149:36">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="151:13" pos:end="157:13"><if pos:start="151:13" pos:end="157:13">if<condition pos:start="151:15" pos:end="151:59">(<expr pos:start="151:16" pos:end="151:58"><call pos:start="151:16" pos:end="151:46"><name pos:start="151:16" pos:end="151:31">decode_nal_units</name><argument_list pos:start="151:32" pos:end="151:46">(<argument pos:start="151:33" pos:end="151:33"><expr pos:start="151:33" pos:end="151:33"><name pos:start="151:33" pos:end="151:33">h</name></expr></argument>, <argument pos:start="151:36" pos:end="151:36"><expr pos:start="151:36" pos:end="151:36"><name pos:start="151:36" pos:end="151:36">p</name></expr></argument>, <argument pos:start="151:39" pos:end="151:45"><expr pos:start="151:39" pos:end="151:45"><name pos:start="151:39" pos:end="151:45">nalsize</name></expr></argument>)</argument_list></call>  <operator pos:start="151:49" pos:end="151:50">!=</operator> <name pos:start="151:52" pos:end="151:58">nalsize</name></expr>)</condition> <block pos:start="151:61" pos:end="157:13">{<block_content pos:start="153:17" pos:end="155:26">

                <expr_stmt pos:start="153:17" pos:end="153:85"><expr pos:start="153:17" pos:end="153:84"><call pos:start="153:17" pos:end="153:84"><name pos:start="153:17" pos:end="153:22">av_log</name><argument_list pos:start="153:23" pos:end="153:84">(<argument pos:start="153:24" pos:end="153:28"><expr pos:start="153:24" pos:end="153:28"><name pos:start="153:24" pos:end="153:28">avctx</name></expr></argument>, <argument pos:start="153:31" pos:end="153:42"><expr pos:start="153:31" pos:end="153:42"><name pos:start="153:31" pos:end="153:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="153:45" pos:end="153:80"><expr pos:start="153:45" pos:end="153:80"><literal type="string" pos:start="153:45" pos:end="153:80">"Decoding pps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="153:83" pos:end="153:83"><expr pos:start="153:83" pos:end="153:83"><name pos:start="153:83" pos:end="153:83">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="155:17" pos:end="155:26">return <expr pos:start="155:24" pos:end="155:25"><operator pos:start="155:24" pos:end="155:24">-</operator><literal type="number" pos:start="155:25" pos:end="155:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:25"><expr pos:start="159:13" pos:end="159:24"><name pos:start="159:13" pos:end="159:13">p</name> <operator pos:start="159:15" pos:end="159:16">+=</operator> <name pos:start="159:18" pos:end="159:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="163:9" pos:end="163:84">// Now store right nal length size, that will be use to parse all other nals</comment>

        <expr_stmt pos:start="165:9" pos:end="165:73"><expr pos:start="165:9" pos:end="165:72"><name pos:start="165:9" pos:end="165:26"><name pos:start="165:9" pos:end="165:9">h</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:26">nal_length_size</name></name> <operator pos:start="165:28" pos:end="165:28">=</operator> <operator pos:start="165:30" pos:end="165:30">(</operator><operator pos:start="165:31" pos:end="165:31">(</operator><operator pos:start="165:32" pos:end="165:32">*</operator><operator pos:start="165:33" pos:end="165:33">(</operator><operator pos:start="165:34" pos:end="165:34">(</operator><operator pos:start="165:35" pos:end="165:35">(</operator><name pos:start="165:36" pos:end="165:39">char</name><operator pos:start="165:40" pos:end="165:40">*</operator><operator pos:start="165:41" pos:end="165:41">)</operator><operator pos:start="165:42" pos:end="165:42">(</operator><name pos:start="165:43" pos:end="165:58"><name pos:start="165:43" pos:end="165:47">avctx</name><operator pos:start="165:48" pos:end="165:49">-&gt;</operator><name pos:start="165:50" pos:end="165:58">extradata</name></name><operator pos:start="165:59" pos:end="165:59">)</operator><operator pos:start="165:60" pos:end="165:60">)</operator><operator pos:start="165:61" pos:end="165:61">+</operator><literal type="number" pos:start="165:62" pos:end="165:62">4</literal><operator pos:start="165:63" pos:end="165:63">)</operator><operator pos:start="165:64" pos:end="165:64">)</operator><operator pos:start="165:65" pos:end="165:65">&amp;</operator><literal type="number" pos:start="165:66" pos:end="165:69">0x03</literal><operator pos:start="165:70" pos:end="165:70">)</operator><operator pos:start="165:71" pos:end="165:71">+</operator><literal type="number" pos:start="165:72" pos:end="165:72">1</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="167:9" pos:end="167:30">// Do not reparse avcC</comment>

        <expr_stmt pos:start="169:9" pos:end="169:24"><expr pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:19"><name pos:start="169:9" pos:end="169:9">h</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:19">got_avcC</name></name> <operator pos:start="169:21" pos:end="169:21">=</operator> <literal type="number" pos:start="169:23" pos:end="169:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="175:5" pos:end="181:5"><if pos:start="175:5" pos:end="181:5">if<condition pos:start="175:7" pos:end="175:72">(<expr pos:start="175:8" pos:end="175:71"><name pos:start="175:8" pos:end="175:26"><name pos:start="175:8" pos:end="175:12">avctx</name><operator pos:start="175:13" pos:end="175:14">-&gt;</operator><name pos:start="175:15" pos:end="175:26">frame_number</name></name><operator pos:start="175:27" pos:end="175:28">==</operator><literal type="number" pos:start="175:29" pos:end="175:29">0</literal> <operator pos:start="175:31" pos:end="175:32">&amp;&amp;</operator> <operator pos:start="175:34" pos:end="175:34">!</operator><name pos:start="175:35" pos:end="175:43"><name pos:start="175:35" pos:end="175:35">h</name><operator pos:start="175:36" pos:end="175:37">-&gt;</operator><name pos:start="175:38" pos:end="175:43">is_avc</name></name> <operator pos:start="175:45" pos:end="175:46">&amp;&amp;</operator> <name pos:start="175:48" pos:end="175:71"><name pos:start="175:48" pos:end="175:48">s</name><operator pos:start="175:49" pos:end="175:50">-&gt;</operator><name pos:start="175:51" pos:end="175:55">avctx</name><operator pos:start="175:56" pos:end="175:57">-&gt;</operator><name pos:start="175:58" pos:end="175:71">extradata_size</name></name></expr>)</condition><block pos:start="175:73" pos:end="181:5">{<block_content pos:start="177:9" pos:end="179:22">

        <if_stmt pos:start="177:9" pos:end="179:22"><if pos:start="177:9" pos:end="179:22">if<condition pos:start="177:11" pos:end="177:82">(<expr pos:start="177:12" pos:end="177:81"><call pos:start="177:12" pos:end="177:77"><name pos:start="177:12" pos:end="177:27">decode_nal_units</name><argument_list pos:start="177:28" pos:end="177:77">(<argument pos:start="177:29" pos:end="177:29"><expr pos:start="177:29" pos:end="177:29"><name pos:start="177:29" pos:end="177:29">h</name></expr></argument>, <argument pos:start="177:32" pos:end="177:50"><expr pos:start="177:32" pos:end="177:50"><name pos:start="177:32" pos:end="177:50"><name pos:start="177:32" pos:end="177:32">s</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:39">avctx</name><operator pos:start="177:40" pos:end="177:41">-&gt;</operator><name pos:start="177:42" pos:end="177:50">extradata</name></name></expr></argument>, <argument pos:start="177:53" pos:end="177:76"><expr pos:start="177:53" pos:end="177:76"><name pos:start="177:53" pos:end="177:76"><name pos:start="177:53" pos:end="177:53">s</name><operator pos:start="177:54" pos:end="177:55">-&gt;</operator><name pos:start="177:56" pos:end="177:60">avctx</name><operator pos:start="177:61" pos:end="177:62">-&gt;</operator><name pos:start="177:63" pos:end="177:76">extradata_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="177:79" pos:end="177:79">&lt;</operator> <literal type="number" pos:start="177:81" pos:end="177:81">0</literal></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="179:22"><block_content pos:start="179:13" pos:end="179:22">

            <return pos:start="179:13" pos:end="179:22">return <expr pos:start="179:20" pos:end="179:21"><operator pos:start="179:20" pos:end="179:20">-</operator><literal type="number" pos:start="179:21" pos:end="179:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:49"><expr pos:start="185:5" pos:end="185:48"><name pos:start="185:5" pos:end="185:13">buf_index</name><operator pos:start="185:14" pos:end="185:14">=</operator><call pos:start="185:15" pos:end="185:48"><name pos:start="185:15" pos:end="185:30">decode_nal_units</name><argument_list pos:start="185:31" pos:end="185:48">(<argument pos:start="185:32" pos:end="185:32"><expr pos:start="185:32" pos:end="185:32"><name pos:start="185:32" pos:end="185:32">h</name></expr></argument>, <argument pos:start="185:35" pos:end="185:37"><expr pos:start="185:35" pos:end="185:37"><name pos:start="185:35" pos:end="185:37">buf</name></expr></argument>, <argument pos:start="185:40" pos:end="185:47"><expr pos:start="185:40" pos:end="185:47"><name pos:start="185:40" pos:end="185:47">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="189:18"><if pos:start="187:5" pos:end="189:18">if<condition pos:start="187:7" pos:end="187:21">(<expr pos:start="187:8" pos:end="187:20"><name pos:start="187:8" pos:end="187:16">buf_index</name> <operator pos:start="187:18" pos:end="187:18">&lt;</operator> <literal type="number" pos:start="187:20" pos:end="187:20">0</literal></expr>)</condition><block type="pseudo" pos:start="189:9" pos:end="189:18"><block_content pos:start="189:9" pos:end="189:18">

        <return pos:start="189:9" pos:end="189:18">return <expr pos:start="189:16" pos:end="189:17"><operator pos:start="189:16" pos:end="189:16">-</operator><literal type="number" pos:start="189:17" pos:end="189:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="193:5" pos:end="201:5"><if pos:start="193:5" pos:end="201:5">if<condition pos:start="193:7" pos:end="193:68">(<expr pos:start="193:8" pos:end="193:67"><operator pos:start="193:8" pos:end="193:8">!</operator><operator pos:start="193:9" pos:end="193:9">(</operator><name pos:start="193:10" pos:end="193:18"><name pos:start="193:10" pos:end="193:10">s</name><operator pos:start="193:11" pos:end="193:12">-&gt;</operator><name pos:start="193:13" pos:end="193:18">flags2</name></name> <operator pos:start="193:20" pos:end="193:20">&amp;</operator> <name pos:start="193:22" pos:end="193:39">CODEC_FLAG2_CHUNKS</name><operator pos:start="193:40" pos:end="193:40">)</operator> <operator pos:start="193:42" pos:end="193:43">&amp;&amp;</operator> <operator pos:start="193:45" pos:end="193:45">!</operator><name pos:start="193:46" pos:end="193:67"><name pos:start="193:46" pos:end="193:46">s</name><operator pos:start="193:47" pos:end="193:48">-&gt;</operator><name pos:start="193:49" pos:end="193:67">current_picture_ptr</name></name></expr>)</condition><block pos:start="193:69" pos:end="201:5">{<block_content pos:start="195:9" pos:end="199:18">

        <if_stmt pos:start="195:9" pos:end="195:75"><if pos:start="195:9" pos:end="195:75">if <condition pos:start="195:12" pos:end="195:65">(<expr pos:start="195:13" pos:end="195:64"><name pos:start="195:13" pos:end="195:29"><name pos:start="195:13" pos:end="195:17">avctx</name><operator pos:start="195:18" pos:end="195:19">-&gt;</operator><name pos:start="195:20" pos:end="195:29">skip_frame</name></name> <operator pos:start="195:31" pos:end="195:32">&gt;=</operator> <name pos:start="195:34" pos:end="195:49">AVDISCARD_NONREF</name> <operator pos:start="195:51" pos:end="195:52">||</operator> <name pos:start="195:54" pos:end="195:64"><name pos:start="195:54" pos:end="195:54">s</name><operator pos:start="195:55" pos:end="195:56">-&gt;</operator><name pos:start="195:57" pos:end="195:64">hurry_up</name></name></expr>)</condition><block type="pseudo" pos:start="195:67" pos:end="195:75"><block_content pos:start="195:67" pos:end="195:75"> <return pos:start="195:67" pos:end="195:75">return <expr pos:start="195:74" pos:end="195:74"><literal type="number" pos:start="195:74" pos:end="195:74">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:51"><expr pos:start="197:9" pos:end="197:50"><call pos:start="197:9" pos:end="197:50"><name pos:start="197:9" pos:end="197:14">av_log</name><argument_list pos:start="197:15" pos:end="197:50">(<argument pos:start="197:16" pos:end="197:20"><expr pos:start="197:16" pos:end="197:20"><name pos:start="197:16" pos:end="197:20">avctx</name></expr></argument>, <argument pos:start="197:23" pos:end="197:34"><expr pos:start="197:23" pos:end="197:34"><name pos:start="197:23" pos:end="197:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:37" pos:end="197:49"><expr pos:start="197:37" pos:end="197:49"><literal type="string" pos:start="197:37" pos:end="197:49">"no frame!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="199:9" pos:end="199:18">return <expr pos:start="199:16" pos:end="199:17"><operator pos:start="199:16" pos:end="199:16">-</operator><literal type="number" pos:start="199:17" pos:end="199:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="205:5" pos:end="423:5"><if pos:start="205:5" pos:end="423:5">if<condition pos:start="205:7" pos:end="205:86">(<expr pos:start="205:8" pos:end="205:85"><operator pos:start="205:8" pos:end="205:8">!</operator><operator pos:start="205:9" pos:end="205:9">(</operator><name pos:start="205:10" pos:end="205:18"><name pos:start="205:10" pos:end="205:10">s</name><operator pos:start="205:11" pos:end="205:12">-&gt;</operator><name pos:start="205:13" pos:end="205:18">flags2</name></name> <operator pos:start="205:20" pos:end="205:20">&amp;</operator> <name pos:start="205:22" pos:end="205:39">CODEC_FLAG2_CHUNKS</name><operator pos:start="205:40" pos:end="205:40">)</operator> <operator pos:start="205:42" pos:end="205:43">||</operator> <operator pos:start="205:45" pos:end="205:45">(</operator><name pos:start="205:46" pos:end="205:52"><name pos:start="205:46" pos:end="205:46">s</name><operator pos:start="205:47" pos:end="205:48">-&gt;</operator><name pos:start="205:49" pos:end="205:52">mb_y</name></name> <operator pos:start="205:54" pos:end="205:55">&gt;=</operator> <name pos:start="205:57" pos:end="205:68"><name pos:start="205:57" pos:end="205:57">s</name><operator pos:start="205:58" pos:end="205:59">-&gt;</operator><name pos:start="205:60" pos:end="205:68">mb_height</name></name> <operator pos:start="205:70" pos:end="205:71">&amp;&amp;</operator> <name pos:start="205:73" pos:end="205:84"><name pos:start="205:73" pos:end="205:73">s</name><operator pos:start="205:74" pos:end="205:75">-&gt;</operator><name pos:start="205:76" pos:end="205:84">mb_height</name></name><operator pos:start="205:85" pos:end="205:85">)</operator></expr>)</condition><block pos:start="205:87" pos:end="423:5">{<block_content pos:start="207:9" pos:end="421:9">

        <decl_stmt pos:start="207:9" pos:end="207:46"><decl pos:start="207:9" pos:end="207:45"><type pos:start="207:9" pos:end="207:17"><name pos:start="207:9" pos:end="207:15">Picture</name> <modifier pos:start="207:17" pos:end="207:17">*</modifier></type><name pos:start="207:18" pos:end="207:20">out</name> <init pos:start="207:22" pos:end="207:45">= <expr pos:start="207:24" pos:end="207:45"><name pos:start="207:24" pos:end="207:45"><name pos:start="207:24" pos:end="207:24">s</name><operator pos:start="207:25" pos:end="207:26">-&gt;</operator><name pos:start="207:27" pos:end="207:45">current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="209:9" pos:end="209:46"><decl pos:start="209:9" pos:end="209:45"><type pos:start="209:9" pos:end="209:17"><name pos:start="209:9" pos:end="209:15">Picture</name> <modifier pos:start="209:17" pos:end="209:17">*</modifier></type><name pos:start="209:18" pos:end="209:20">cur</name> <init pos:start="209:22" pos:end="209:45">= <expr pos:start="209:24" pos:end="209:45"><name pos:start="209:24" pos:end="209:45"><name pos:start="209:24" pos:end="209:24">s</name><operator pos:start="209:25" pos:end="209:26">-&gt;</operator><name pos:start="209:27" pos:end="209:45">current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="211:9" pos:end="211:54"><decl pos:start="211:9" pos:end="211:13"><type pos:start="211:9" pos:end="211:11"><name pos:start="211:9" pos:end="211:11">int</name></type> <name pos:start="211:13" pos:end="211:13">i</name></decl>, <decl pos:start="211:16" pos:end="211:19"><type ref="prev" pos:start="211:9" pos:end="211:11"/><name pos:start="211:16" pos:end="211:19">pics</name></decl>, <decl pos:start="211:22" pos:end="211:30"><type ref="prev" pos:start="211:9" pos:end="211:11"/><name pos:start="211:22" pos:end="211:30">cross_idr</name></decl>, <decl pos:start="211:33" pos:end="211:44"><type ref="prev" pos:start="211:9" pos:end="211:11"/><name pos:start="211:33" pos:end="211:44">out_of_order</name></decl>, <decl pos:start="211:47" pos:end="211:53"><type ref="prev" pos:start="211:9" pos:end="211:11"/><name pos:start="211:47" pos:end="211:53">out_idx</name></decl>;</decl_stmt>



        <expr_stmt pos:start="215:9" pos:end="215:19"><expr pos:start="215:9" pos:end="215:18"><name pos:start="215:9" pos:end="215:15"><name pos:start="215:9" pos:end="215:9">s</name><operator pos:start="215:10" pos:end="215:11">-&gt;</operator><name pos:start="215:12" pos:end="215:15">mb_y</name></name><operator pos:start="215:16" pos:end="215:16">=</operator> <literal type="number" pos:start="215:18" pos:end="215:18">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="219:9" pos:end="219:65"><expr pos:start="219:9" pos:end="219:64"><name pos:start="219:9" pos:end="219:43"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:30">current_picture_ptr</name><operator pos:start="219:31" pos:end="219:32">-&gt;</operator><name pos:start="219:33" pos:end="219:43">qscale_type</name></name><operator pos:start="219:44" pos:end="219:44">=</operator> <name pos:start="219:46" pos:end="219:64">FF_QSCALE_TYPE_H264</name></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:56"><expr pos:start="221:9" pos:end="221:55"><name pos:start="221:9" pos:end="221:41"><name pos:start="221:9" pos:end="221:9">s</name><operator pos:start="221:10" pos:end="221:11">-&gt;</operator><name pos:start="221:12" pos:end="221:30">current_picture_ptr</name><operator pos:start="221:31" pos:end="221:32">-&gt;</operator><name pos:start="221:33" pos:end="221:41">pict_type</name></name><operator pos:start="221:42" pos:end="221:42">=</operator> <name pos:start="221:44" pos:end="221:55"><name pos:start="221:44" pos:end="221:44">s</name><operator pos:start="221:45" pos:end="221:46">-&gt;</operator><name pos:start="221:47" pos:end="221:55">pict_type</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="225:9" pos:end="233:9"><if pos:start="225:9" pos:end="233:9">if<condition pos:start="225:11" pos:end="225:24">(<expr pos:start="225:12" pos:end="225:23"><operator pos:start="225:12" pos:end="225:12">!</operator><name pos:start="225:13" pos:end="225:23"><name pos:start="225:13" pos:end="225:13">s</name><operator pos:start="225:14" pos:end="225:15">-&gt;</operator><name pos:start="225:16" pos:end="225:23">dropable</name></name></expr>)</condition> <block pos:start="225:26" pos:end="233:9">{<block_content pos:start="227:13" pos:end="231:40">

            <expr_stmt pos:start="227:13" pos:end="227:63"><expr pos:start="227:13" pos:end="227:62"><call pos:start="227:13" pos:end="227:62"><name pos:start="227:13" pos:end="227:35">execute_ref_pic_marking</name><argument_list pos:start="227:36" pos:end="227:62">(<argument pos:start="227:37" pos:end="227:37"><expr pos:start="227:37" pos:end="227:37"><name pos:start="227:37" pos:end="227:37">h</name></expr></argument>, <argument pos:start="227:40" pos:end="227:46"><expr pos:start="227:40" pos:end="227:46"><name pos:start="227:40" pos:end="227:46"><name pos:start="227:40" pos:end="227:40">h</name><operator pos:start="227:41" pos:end="227:42">-&gt;</operator><name pos:start="227:43" pos:end="227:46">mmco</name></name></expr></argument>, <argument pos:start="227:49" pos:end="227:61"><expr pos:start="227:49" pos:end="227:61"><name pos:start="227:49" pos:end="227:61"><name pos:start="227:49" pos:end="227:49">h</name><operator pos:start="227:50" pos:end="227:51">-&gt;</operator><name pos:start="227:52" pos:end="227:61">mmco_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:40"><expr pos:start="229:13" pos:end="229:39"><name pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:13">h</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:27">prev_poc_msb</name></name><operator pos:start="229:28" pos:end="229:28">=</operator> <name pos:start="229:30" pos:end="229:39"><name pos:start="229:30" pos:end="229:30">h</name><operator pos:start="229:31" pos:end="229:32">-&gt;</operator><name pos:start="229:33" pos:end="229:39">poc_msb</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:40"><expr pos:start="231:13" pos:end="231:39"><name pos:start="231:13" pos:end="231:27"><name pos:start="231:13" pos:end="231:13">h</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:27">prev_poc_lsb</name></name><operator pos:start="231:28" pos:end="231:28">=</operator> <name pos:start="231:30" pos:end="231:39"><name pos:start="231:30" pos:end="231:30">h</name><operator pos:start="231:31" pos:end="231:32">-&gt;</operator><name pos:start="231:33" pos:end="231:39">poc_lsb</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:54"><expr pos:start="235:9" pos:end="235:53"><name pos:start="235:9" pos:end="235:32"><name pos:start="235:9" pos:end="235:9">h</name><operator pos:start="235:10" pos:end="235:11">-&gt;</operator><name pos:start="235:12" pos:end="235:32">prev_frame_num_offset</name></name><operator pos:start="235:33" pos:end="235:33">=</operator> <name pos:start="235:35" pos:end="235:53"><name pos:start="235:35" pos:end="235:35">h</name><operator pos:start="235:36" pos:end="235:37">-&gt;</operator><name pos:start="235:38" pos:end="235:53">frame_num_offset</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:40"><expr pos:start="237:9" pos:end="237:39"><name pos:start="237:9" pos:end="237:25"><name pos:start="237:9" pos:end="237:9">h</name><operator pos:start="237:10" pos:end="237:11">-&gt;</operator><name pos:start="237:12" pos:end="237:25">prev_frame_num</name></name><operator pos:start="237:26" pos:end="237:26">=</operator> <name pos:start="237:28" pos:end="237:39"><name pos:start="237:28" pos:end="237:28">h</name><operator pos:start="237:29" pos:end="237:30">-&gt;</operator><name pos:start="237:31" pos:end="237:39">frame_num</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="241:9" pos:end="263:11">/*

         * FIXME: Error handling code does not seem to support interlaced

         * when slices span multiple rows

         * The ff_er_add_slice calls don't work right for bottom

         * fields; they cause massive erroneous error concealing

         * Error marking covers both fields (top and bottom).

         * This causes a mismatched s-&gt;error_count

         * and a bad error table. Further, the error count goes to

         * INT_MAX when called for bottom field, because mb_y is

         * past end by one (callers fault) and resync_mb_y != 0

         * causes problems for the first MB line, too.

         */</comment>

        <if_stmt pos:start="265:9" pos:end="267:31"><if pos:start="265:9" pos:end="267:31">if <condition pos:start="265:12" pos:end="265:27">(<expr pos:start="265:13" pos:end="265:26"><operator pos:start="265:13" pos:end="265:13">!</operator><name pos:start="265:14" pos:end="265:26">FIELD_PICTURE</name></expr>)</condition><block type="pseudo" pos:start="267:13" pos:end="267:31"><block_content pos:start="267:13" pos:end="267:31">

            <expr_stmt pos:start="267:13" pos:end="267:31"><expr pos:start="267:13" pos:end="267:30"><call pos:start="267:13" pos:end="267:30"><name pos:start="267:13" pos:end="267:27">ff_er_frame_end</name><argument_list pos:start="267:28" pos:end="267:30">(<argument pos:start="267:29" pos:end="267:29"><expr pos:start="267:29" pos:end="267:29"><name pos:start="267:29" pos:end="267:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="271:9" pos:end="271:25"><expr pos:start="271:9" pos:end="271:24"><call pos:start="271:9" pos:end="271:24"><name pos:start="271:9" pos:end="271:21">MPV_frame_end</name><argument_list pos:start="271:22" pos:end="271:24">(<argument pos:start="271:23" pos:end="271:23"><expr pos:start="271:23" pos:end="271:23"><name pos:start="271:23" pos:end="271:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="275:9" pos:end="421:9"><if pos:start="275:9" pos:end="283:9">if <condition pos:start="275:12" pos:end="275:27">(<expr pos:start="275:13" pos:end="275:26"><name pos:start="275:13" pos:end="275:26"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:26">first_field</name></name></expr>)</condition> <block pos:start="275:29" pos:end="283:9">{<block_content pos:start="279:13" pos:end="279:27">

            <comment type="block" pos:start="277:13" pos:end="277:40">/* Wait for second field. */</comment>

            <expr_stmt pos:start="279:13" pos:end="279:27"><expr pos:start="279:13" pos:end="279:26"><operator pos:start="279:13" pos:end="279:13">*</operator><name pos:start="279:14" pos:end="279:22">data_size</name> <operator pos:start="279:24" pos:end="279:24">=</operator> <literal type="number" pos:start="279:26" pos:end="279:26">0</literal></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="283:11" pos:end="421:9">else <block pos:start="283:16" pos:end="421:9">{<block_content pos:start="285:13" pos:end="419:13">

            <expr_stmt pos:start="285:13" pos:end="285:59"><expr pos:start="285:13" pos:end="285:58"><name pos:start="285:13" pos:end="285:33"><name pos:start="285:13" pos:end="285:15">cur</name><operator pos:start="285:16" pos:end="285:17">-&gt;</operator><name pos:start="285:18" pos:end="285:33">interlaced_frame</name></name> <operator pos:start="285:35" pos:end="285:35">=</operator> <name pos:start="285:37" pos:end="285:58">FIELD_OR_MBAFF_PICTURE</name></expr>;</expr_stmt>

            <comment type="block" pos:start="287:13" pos:end="287:57">/* Derive top_field_first from field pocs. */</comment>

            <expr_stmt pos:start="289:13" pos:end="289:73"><expr pos:start="289:13" pos:end="289:72"><name pos:start="289:13" pos:end="289:32"><name pos:start="289:13" pos:end="289:15">cur</name><operator pos:start="289:16" pos:end="289:17">-&gt;</operator><name pos:start="289:18" pos:end="289:32">top_field_first</name></name> <operator pos:start="289:34" pos:end="289:34">=</operator> <name pos:start="289:36" pos:end="289:52"><name pos:start="289:36" pos:end="289:38">cur</name><operator pos:start="289:39" pos:end="289:40">-&gt;</operator><name pos:start="289:41" pos:end="289:49">field_poc</name><index pos:start="289:50" pos:end="289:52">[<expr pos:start="289:51" pos:end="289:51"><literal type="number" pos:start="289:51" pos:end="289:51">0</literal></expr>]</index></name> <operator pos:start="289:54" pos:end="289:54">&lt;</operator> <name pos:start="289:56" pos:end="289:72"><name pos:start="289:56" pos:end="289:58">cur</name><operator pos:start="289:59" pos:end="289:60">-&gt;</operator><name pos:start="289:61" pos:end="289:69">field_poc</name><index pos:start="289:70" pos:end="289:72">[<expr pos:start="289:71" pos:end="289:71"><literal type="number" pos:start="289:71" pos:end="289:71">1</literal></expr>]</index></name></expr>;</expr_stmt>



        <comment type="line" pos:start="293:9" pos:end="293:62">//FIXME do something with unavailable reference frames</comment>



            <comment type="block" pos:start="297:13" pos:end="297:50">/* Sort B-frames into display order */</comment>



            <if_stmt pos:start="301:13" pos:end="309:13"><if pos:start="301:13" pos:end="309:13">if<condition pos:start="301:15" pos:end="303:69">(<expr pos:start="301:16" pos:end="303:68"><name pos:start="301:16" pos:end="301:48"><name pos:start="301:16" pos:end="301:16">h</name><operator pos:start="301:17" pos:end="301:18">-&gt;</operator><name pos:start="301:19" pos:end="301:21">sps</name><operator pos:start="301:22" pos:end="301:22">.</operator><name pos:start="301:23" pos:end="301:48">bitstream_restriction_flag</name></name>

               <operator pos:start="303:16" pos:end="303:17">&amp;&amp;</operator> <name pos:start="303:19" pos:end="303:40"><name pos:start="303:19" pos:end="303:19">s</name><operator pos:start="303:20" pos:end="303:21">-&gt;</operator><name pos:start="303:22" pos:end="303:26">avctx</name><operator pos:start="303:27" pos:end="303:28">-&gt;</operator><name pos:start="303:29" pos:end="303:40">has_b_frames</name></name> <operator pos:start="303:42" pos:end="303:42">&lt;</operator> <name pos:start="303:44" pos:end="303:68"><name pos:start="303:44" pos:end="303:44">h</name><operator pos:start="303:45" pos:end="303:46">-&gt;</operator><name pos:start="303:47" pos:end="303:49">sps</name><operator pos:start="303:50" pos:end="303:50">.</operator><name pos:start="303:51" pos:end="303:68">num_reorder_frames</name></name></expr>)</condition><block pos:start="303:70" pos:end="309:13">{<block_content pos:start="305:17" pos:end="307:33">

                <expr_stmt pos:start="305:17" pos:end="305:67"><expr pos:start="305:17" pos:end="305:66"><name pos:start="305:17" pos:end="305:38"><name pos:start="305:17" pos:end="305:17">s</name><operator pos:start="305:18" pos:end="305:19">-&gt;</operator><name pos:start="305:20" pos:end="305:24">avctx</name><operator pos:start="305:25" pos:end="305:26">-&gt;</operator><name pos:start="305:27" pos:end="305:38">has_b_frames</name></name> <operator pos:start="305:40" pos:end="305:40">=</operator> <name pos:start="305:42" pos:end="305:66"><name pos:start="305:42" pos:end="305:42">h</name><operator pos:start="305:43" pos:end="305:44">-&gt;</operator><name pos:start="305:45" pos:end="305:47">sps</name><operator pos:start="305:48" pos:end="305:48">.</operator><name pos:start="305:49" pos:end="305:66">num_reorder_frames</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="307:17" pos:end="307:33"><expr pos:start="307:17" pos:end="307:32"><name pos:start="307:17" pos:end="307:28"><name pos:start="307:17" pos:end="307:17">s</name><operator pos:start="307:18" pos:end="307:19">-&gt;</operator><name pos:start="307:20" pos:end="307:28">low_delay</name></name> <operator pos:start="307:30" pos:end="307:30">=</operator> <literal type="number" pos:start="307:32" pos:end="307:32">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="313:13" pos:end="321:13"><if pos:start="313:13" pos:end="321:13">if<condition pos:start="313:15" pos:end="315:53">(   <expr pos:start="313:19" pos:end="315:52"><name pos:start="313:19" pos:end="313:49"><name pos:start="313:19" pos:end="313:19">s</name><operator pos:start="313:20" pos:end="313:21">-&gt;</operator><name pos:start="313:22" pos:end="313:26">avctx</name><operator pos:start="313:27" pos:end="313:28">-&gt;</operator><name pos:start="313:29" pos:end="313:49">strict_std_compliance</name></name> <operator pos:start="313:51" pos:end="313:52">&gt;=</operator> <name pos:start="313:54" pos:end="313:73">FF_COMPLIANCE_STRICT</name>

               <operator pos:start="315:16" pos:end="315:17">&amp;&amp;</operator> <operator pos:start="315:19" pos:end="315:19">!</operator><name pos:start="315:20" pos:end="315:52"><name pos:start="315:20" pos:end="315:20">h</name><operator pos:start="315:21" pos:end="315:22">-&gt;</operator><name pos:start="315:23" pos:end="315:25">sps</name><operator pos:start="315:26" pos:end="315:26">.</operator><name pos:start="315:27" pos:end="315:52">bitstream_restriction_flag</name></name></expr>)</condition><block pos:start="315:54" pos:end="321:13">{<block_content pos:start="317:17" pos:end="319:32">

                <expr_stmt pos:start="317:17" pos:end="317:62"><expr pos:start="317:17" pos:end="317:61"><name pos:start="317:17" pos:end="317:38"><name pos:start="317:17" pos:end="317:17">s</name><operator pos:start="317:18" pos:end="317:19">-&gt;</operator><name pos:start="317:20" pos:end="317:24">avctx</name><operator pos:start="317:25" pos:end="317:26">-&gt;</operator><name pos:start="317:27" pos:end="317:38">has_b_frames</name></name><operator pos:start="317:39" pos:end="317:39">=</operator> <name pos:start="317:41" pos:end="317:61">MAX_DELAYED_PIC_COUNT</name></expr>;</expr_stmt>

                <expr_stmt pos:start="319:17" pos:end="319:32"><expr pos:start="319:17" pos:end="319:31"><name pos:start="319:17" pos:end="319:28"><name pos:start="319:17" pos:end="319:17">s</name><operator pos:start="319:18" pos:end="319:19">-&gt;</operator><name pos:start="319:20" pos:end="319:28">low_delay</name></name><operator pos:start="319:29" pos:end="319:29">=</operator> <literal type="number" pos:start="319:31" pos:end="319:31">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="325:13" pos:end="325:21"><expr pos:start="325:13" pos:end="325:20"><name pos:start="325:13" pos:end="325:16">pics</name> <operator pos:start="325:18" pos:end="325:18">=</operator> <literal type="number" pos:start="325:20" pos:end="325:20">0</literal></expr>;</expr_stmt>

            <while pos:start="327:13" pos:end="327:47">while<condition pos:start="327:18" pos:end="327:39">(<expr pos:start="327:19" pos:end="327:38"><name pos:start="327:19" pos:end="327:38"><name pos:start="327:19" pos:end="327:19">h</name><operator pos:start="327:20" pos:end="327:21">-&gt;</operator><name pos:start="327:22" pos:end="327:32">delayed_pic</name><index pos:start="327:33" pos:end="327:38">[<expr pos:start="327:34" pos:end="327:37"><name pos:start="327:34" pos:end="327:37">pics</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="327:41" pos:end="327:47"><block_content pos:start="327:41" pos:end="327:47"> <expr_stmt pos:start="327:41" pos:end="327:47"><expr pos:start="327:41" pos:end="327:46"><name pos:start="327:41" pos:end="327:44">pics</name><operator pos:start="327:45" pos:end="327:46">++</operator></expr>;</expr_stmt></block_content></block></while>



            <expr_stmt pos:start="331:13" pos:end="331:50"><expr pos:start="331:13" pos:end="331:49"><call pos:start="331:13" pos:end="331:49"><name pos:start="331:13" pos:end="331:18">assert</name><argument_list pos:start="331:19" pos:end="331:49">(<argument pos:start="331:20" pos:end="331:48"><expr pos:start="331:20" pos:end="331:48"><name pos:start="331:20" pos:end="331:23">pics</name> <operator pos:start="331:25" pos:end="331:26">&lt;=</operator> <name pos:start="331:28" pos:end="331:48">MAX_DELAYED_PIC_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="335:13" pos:end="335:41"><expr pos:start="335:13" pos:end="335:40"><name pos:start="335:13" pos:end="335:34"><name pos:start="335:13" pos:end="335:13">h</name><operator pos:start="335:14" pos:end="335:15">-&gt;</operator><name pos:start="335:16" pos:end="335:26">delayed_pic</name><index pos:start="335:27" pos:end="335:34">[<expr pos:start="335:28" pos:end="335:33"><name pos:start="335:28" pos:end="335:31">pics</name><operator pos:start="335:32" pos:end="335:33">++</operator></expr>]</index></name> <operator pos:start="335:36" pos:end="335:36">=</operator> <name pos:start="335:38" pos:end="335:40">cur</name></expr>;</expr_stmt>

            <if_stmt pos:start="337:13" pos:end="339:49"><if pos:start="337:13" pos:end="339:49">if<condition pos:start="337:15" pos:end="337:35">(<expr pos:start="337:16" pos:end="337:34"><name pos:start="337:16" pos:end="337:29"><name pos:start="337:16" pos:end="337:18">cur</name><operator pos:start="337:19" pos:end="337:20">-&gt;</operator><name pos:start="337:21" pos:end="337:29">reference</name></name> <operator pos:start="337:31" pos:end="337:32">==</operator> <literal type="number" pos:start="337:34" pos:end="337:34">0</literal></expr>)</condition><block type="pseudo" pos:start="339:17" pos:end="339:49"><block_content pos:start="339:17" pos:end="339:49">

                <expr_stmt pos:start="339:17" pos:end="339:49"><expr pos:start="339:17" pos:end="339:48"><name pos:start="339:17" pos:end="339:30"><name pos:start="339:17" pos:end="339:19">cur</name><operator pos:start="339:20" pos:end="339:21">-&gt;</operator><name pos:start="339:22" pos:end="339:30">reference</name></name> <operator pos:start="339:32" pos:end="339:32">=</operator> <name pos:start="339:34" pos:end="339:48">DELAYED_PIC_REF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="343:13" pos:end="343:26"><expr pos:start="343:13" pos:end="343:25"><name pos:start="343:13" pos:end="343:21">cross_idr</name> <operator pos:start="343:23" pos:end="343:23">=</operator> <literal type="number" pos:start="343:25" pos:end="343:25">0</literal></expr>;</expr_stmt>

            <for pos:start="345:13" pos:end="349:34">for<control pos:start="345:16" pos:end="345:44">(<init pos:start="345:17" pos:end="345:20"><expr pos:start="345:17" pos:end="345:19"><name pos:start="345:17" pos:end="345:17">i</name><operator pos:start="345:18" pos:end="345:18">=</operator><literal type="number" pos:start="345:19" pos:end="345:19">0</literal></expr>;</init> <condition pos:start="345:22" pos:end="345:39"><expr pos:start="345:22" pos:end="345:38"><name pos:start="345:22" pos:end="345:38"><name pos:start="345:22" pos:end="345:22">h</name><operator pos:start="345:23" pos:end="345:24">-&gt;</operator><name pos:start="345:25" pos:end="345:35">delayed_pic</name><index pos:start="345:36" pos:end="345:38">[<expr pos:start="345:37" pos:end="345:37"><name pos:start="345:37" pos:end="345:37">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="345:41" pos:end="345:43"><expr pos:start="345:41" pos:end="345:43"><name pos:start="345:41" pos:end="345:41">i</name><operator pos:start="345:42" pos:end="345:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="347:17" pos:end="349:34"><block_content pos:start="347:17" pos:end="349:34">

                <if_stmt pos:start="347:17" pos:end="349:34"><if pos:start="347:17" pos:end="349:34">if<condition pos:start="347:19" pos:end="347:77">(<expr pos:start="347:20" pos:end="347:76"><name pos:start="347:20" pos:end="347:36"><name pos:start="347:20" pos:end="347:20">h</name><operator pos:start="347:21" pos:end="347:22">-&gt;</operator><name pos:start="347:23" pos:end="347:33">delayed_pic</name><index pos:start="347:34" pos:end="347:36">[<expr pos:start="347:35" pos:end="347:35"><name pos:start="347:35" pos:end="347:35">i</name></expr>]</index></name><operator pos:start="347:37" pos:end="347:38">-&gt;</operator><name pos:start="347:39" pos:end="347:47">key_frame</name> <operator pos:start="347:49" pos:end="347:50">||</operator> <name pos:start="347:52" pos:end="347:68"><name pos:start="347:52" pos:end="347:52">h</name><operator pos:start="347:53" pos:end="347:54">-&gt;</operator><name pos:start="347:55" pos:end="347:65">delayed_pic</name><index pos:start="347:66" pos:end="347:68">[<expr pos:start="347:67" pos:end="347:67"><name pos:start="347:67" pos:end="347:67">i</name></expr>]</index></name><operator pos:start="347:69" pos:end="347:70">-&gt;</operator><name pos:start="347:71" pos:end="347:73">poc</name><operator pos:start="347:74" pos:end="347:75">==</operator><literal type="number" pos:start="347:76" pos:end="347:76">0</literal></expr>)</condition><block type="pseudo" pos:start="349:21" pos:end="349:34"><block_content pos:start="349:21" pos:end="349:34">

                    <expr_stmt pos:start="349:21" pos:end="349:34"><expr pos:start="349:21" pos:end="349:33"><name pos:start="349:21" pos:end="349:29">cross_idr</name> <operator pos:start="349:31" pos:end="349:31">=</operator> <literal type="number" pos:start="349:33" pos:end="349:33">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



            <expr_stmt pos:start="353:13" pos:end="353:36"><expr pos:start="353:13" pos:end="353:35"><name pos:start="353:13" pos:end="353:15">out</name> <operator pos:start="353:17" pos:end="353:17">=</operator> <name pos:start="353:19" pos:end="353:35"><name pos:start="353:19" pos:end="353:19">h</name><operator pos:start="353:20" pos:end="353:21">-&gt;</operator><name pos:start="353:22" pos:end="353:32">delayed_pic</name><index pos:start="353:33" pos:end="353:35">[<expr pos:start="353:34" pos:end="353:34"><literal type="number" pos:start="353:34" pos:end="353:34">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:24"><expr pos:start="355:13" pos:end="355:23"><name pos:start="355:13" pos:end="355:19">out_idx</name> <operator pos:start="355:21" pos:end="355:21">=</operator> <literal type="number" pos:start="355:23" pos:end="355:23">0</literal></expr>;</expr_stmt>

            <for pos:start="357:13" pos:end="365:17">for<control pos:start="357:16" pos:end="357:103">(<init pos:start="357:17" pos:end="357:20"><expr pos:start="357:17" pos:end="357:19"><name pos:start="357:17" pos:end="357:17">i</name><operator pos:start="357:18" pos:end="357:18">=</operator><literal type="number" pos:start="357:19" pos:end="357:19">1</literal></expr>;</init> <condition pos:start="357:22" pos:end="357:98"><expr pos:start="357:22" pos:end="357:97"><name pos:start="357:22" pos:end="357:38"><name pos:start="357:22" pos:end="357:22">h</name><operator pos:start="357:23" pos:end="357:24">-&gt;</operator><name pos:start="357:25" pos:end="357:35">delayed_pic</name><index pos:start="357:36" pos:end="357:38">[<expr pos:start="357:37" pos:end="357:37"><name pos:start="357:37" pos:end="357:37">i</name></expr>]</index></name> <operator pos:start="357:40" pos:end="357:41">&amp;&amp;</operator> <operator pos:start="357:43" pos:end="357:43">!</operator><name pos:start="357:44" pos:end="357:60"><name pos:start="357:44" pos:end="357:44">h</name><operator pos:start="357:45" pos:end="357:46">-&gt;</operator><name pos:start="357:47" pos:end="357:57">delayed_pic</name><index pos:start="357:58" pos:end="357:60">[<expr pos:start="357:59" pos:end="357:59"><name pos:start="357:59" pos:end="357:59">i</name></expr>]</index></name><operator pos:start="357:61" pos:end="357:62">-&gt;</operator><name pos:start="357:63" pos:end="357:71">key_frame</name> <operator pos:start="357:73" pos:end="357:74">&amp;&amp;</operator> <name pos:start="357:76" pos:end="357:92"><name pos:start="357:76" pos:end="357:76">h</name><operator pos:start="357:77" pos:end="357:78">-&gt;</operator><name pos:start="357:79" pos:end="357:89">delayed_pic</name><index pos:start="357:90" pos:end="357:92">[<expr pos:start="357:91" pos:end="357:91"><name pos:start="357:91" pos:end="357:91">i</name></expr>]</index></name><operator pos:start="357:93" pos:end="357:94">-&gt;</operator><name pos:start="357:95" pos:end="357:97">poc</name></expr>;</condition> <incr pos:start="357:100" pos:end="357:102"><expr pos:start="357:100" pos:end="357:102"><name pos:start="357:100" pos:end="357:100">i</name><operator pos:start="357:101" pos:end="357:102">++</operator></expr></incr>)</control><block type="pseudo" pos:start="359:17" pos:end="365:17"><block_content pos:start="359:17" pos:end="365:17">

                <if_stmt pos:start="359:17" pos:end="365:17"><if pos:start="359:17" pos:end="365:17">if<condition pos:start="359:19" pos:end="359:53">(<expr pos:start="359:20" pos:end="359:52"><name pos:start="359:20" pos:end="359:36"><name pos:start="359:20" pos:end="359:20">h</name><operator pos:start="359:21" pos:end="359:22">-&gt;</operator><name pos:start="359:23" pos:end="359:33">delayed_pic</name><index pos:start="359:34" pos:end="359:36">[<expr pos:start="359:35" pos:end="359:35"><name pos:start="359:35" pos:end="359:35">i</name></expr>]</index></name><operator pos:start="359:37" pos:end="359:38">-&gt;</operator><name pos:start="359:39" pos:end="359:41">poc</name> <operator pos:start="359:43" pos:end="359:43">&lt;</operator> <name pos:start="359:45" pos:end="359:52"><name pos:start="359:45" pos:end="359:47">out</name><operator pos:start="359:48" pos:end="359:49">-&gt;</operator><name pos:start="359:50" pos:end="359:52">poc</name></name></expr>)</condition><block pos:start="359:54" pos:end="365:17">{<block_content pos:start="361:21" pos:end="363:32">

                    <expr_stmt pos:start="361:21" pos:end="361:44"><expr pos:start="361:21" pos:end="361:43"><name pos:start="361:21" pos:end="361:23">out</name> <operator pos:start="361:25" pos:end="361:25">=</operator> <name pos:start="361:27" pos:end="361:43"><name pos:start="361:27" pos:end="361:27">h</name><operator pos:start="361:28" pos:end="361:29">-&gt;</operator><name pos:start="361:30" pos:end="361:40">delayed_pic</name><index pos:start="361:41" pos:end="361:43">[<expr pos:start="361:42" pos:end="361:42"><name pos:start="361:42" pos:end="361:42">i</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="363:21" pos:end="363:32"><expr pos:start="363:21" pos:end="363:31"><name pos:start="363:21" pos:end="363:27">out_idx</name> <operator pos:start="363:29" pos:end="363:29">=</operator> <name pos:start="363:31" pos:end="363:31">i</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt></block_content></block></for>



            <expr_stmt pos:start="369:13" pos:end="369:68"><expr pos:start="369:13" pos:end="369:67"><name pos:start="369:13" pos:end="369:24">out_of_order</name> <operator pos:start="369:26" pos:end="369:26">=</operator> <operator pos:start="369:28" pos:end="369:28">!</operator><name pos:start="369:29" pos:end="369:37">cross_idr</name> <operator pos:start="369:39" pos:end="369:40">&amp;&amp;</operator> <name pos:start="369:42" pos:end="369:49"><name pos:start="369:42" pos:end="369:44">out</name><operator pos:start="369:45" pos:end="369:46">-&gt;</operator><name pos:start="369:47" pos:end="369:49">poc</name></name> <operator pos:start="369:51" pos:end="369:51">&lt;</operator> <name pos:start="369:53" pos:end="369:67"><name pos:start="369:53" pos:end="369:53">h</name><operator pos:start="369:54" pos:end="369:55">-&gt;</operator><name pos:start="369:56" pos:end="369:67">outputed_poc</name></name></expr>;</expr_stmt>



            <if_stmt pos:start="373:13" pos:end="391:13"><if pos:start="373:13" pos:end="375:19">if<condition pos:start="373:15" pos:end="373:104">(<expr pos:start="373:16" pos:end="373:103"><name pos:start="373:16" pos:end="373:48"><name pos:start="373:16" pos:end="373:16">h</name><operator pos:start="373:17" pos:end="373:18">-&gt;</operator><name pos:start="373:19" pos:end="373:21">sps</name><operator pos:start="373:22" pos:end="373:22">.</operator><name pos:start="373:23" pos:end="373:48">bitstream_restriction_flag</name></name> <operator pos:start="373:50" pos:end="373:51">&amp;&amp;</operator> <name pos:start="373:53" pos:end="373:74"><name pos:start="373:53" pos:end="373:53">s</name><operator pos:start="373:54" pos:end="373:55">-&gt;</operator><name pos:start="373:56" pos:end="373:60">avctx</name><operator pos:start="373:61" pos:end="373:62">-&gt;</operator><name pos:start="373:63" pos:end="373:74">has_b_frames</name></name> <operator pos:start="373:76" pos:end="373:77">&gt;=</operator> <name pos:start="373:79" pos:end="373:103"><name pos:start="373:79" pos:end="373:79">h</name><operator pos:start="373:80" pos:end="373:81">-&gt;</operator><name pos:start="373:82" pos:end="373:84">sps</name><operator pos:start="373:85" pos:end="373:85">.</operator><name pos:start="373:86" pos:end="373:103">num_reorder_frames</name></name></expr>)</condition>

                <block pos:start="375:17" pos:end="375:19">{<block_content> </block_content>}</block></if>

            <if type="elseif" pos:start="377:13" pos:end="391:13">else if<condition pos:start="377:20" pos:end="383:50">(<expr pos:start="377:21" pos:end="383:49"><operator pos:start="377:21" pos:end="377:21">(</operator><name pos:start="377:22" pos:end="377:33">out_of_order</name> <operator pos:start="377:35" pos:end="377:36">&amp;&amp;</operator> <name pos:start="377:38" pos:end="377:41">pics</name><operator pos:start="377:42" pos:end="377:42">-</operator><literal type="number" pos:start="377:43" pos:end="377:43">1</literal> <operator pos:start="377:45" pos:end="377:46">==</operator> <name pos:start="377:48" pos:end="377:69"><name pos:start="377:48" pos:end="377:48">s</name><operator pos:start="377:49" pos:end="377:50">-&gt;</operator><name pos:start="377:51" pos:end="377:55">avctx</name><operator pos:start="377:56" pos:end="377:57">-&gt;</operator><name pos:start="377:58" pos:end="377:69">has_b_frames</name></name> <operator pos:start="377:71" pos:end="377:72">&amp;&amp;</operator> <name pos:start="377:74" pos:end="377:95"><name pos:start="377:74" pos:end="377:74">s</name><operator pos:start="377:75" pos:end="377:76">-&gt;</operator><name pos:start="377:77" pos:end="377:81">avctx</name><operator pos:start="377:82" pos:end="377:83">-&gt;</operator><name pos:start="377:84" pos:end="377:95">has_b_frames</name></name> <operator pos:start="377:97" pos:end="377:97">&lt;</operator> <name pos:start="377:99" pos:end="377:119">MAX_DELAYED_PIC_COUNT</name><operator pos:start="377:120" pos:end="377:120">)</operator>

               <operator pos:start="379:16" pos:end="379:17">||</operator> <operator pos:start="379:19" pos:end="379:19">(</operator><name pos:start="379:20" pos:end="379:31"><name pos:start="379:20" pos:end="379:20">s</name><operator pos:start="379:21" pos:end="379:22">-&gt;</operator><name pos:start="379:23" pos:end="379:31">low_delay</name></name> <operator pos:start="379:33" pos:end="379:34">&amp;&amp;</operator>

                <operator pos:start="381:17" pos:end="381:17">(</operator><operator pos:start="381:18" pos:end="381:18">(</operator><operator pos:start="381:19" pos:end="381:19">!</operator><name pos:start="381:20" pos:end="381:28">cross_idr</name> <operator pos:start="381:30" pos:end="381:31">&amp;&amp;</operator> <name pos:start="381:33" pos:end="381:40"><name pos:start="381:33" pos:end="381:35">out</name><operator pos:start="381:36" pos:end="381:37">-&gt;</operator><name pos:start="381:38" pos:end="381:40">poc</name></name> <operator pos:start="381:42" pos:end="381:42">&gt;</operator> <name pos:start="381:44" pos:end="381:58"><name pos:start="381:44" pos:end="381:44">h</name><operator pos:start="381:45" pos:end="381:46">-&gt;</operator><name pos:start="381:47" pos:end="381:58">outputed_poc</name></name> <operator pos:start="381:60" pos:end="381:60">+</operator> <literal type="number" pos:start="381:62" pos:end="381:62">2</literal><operator pos:start="381:63" pos:end="381:63">)</operator>

                 <operator pos:start="383:18" pos:end="383:19">||</operator> <name pos:start="383:21" pos:end="383:34"><name pos:start="383:21" pos:end="383:23">cur</name><operator pos:start="383:24" pos:end="383:25">-&gt;</operator><name pos:start="383:26" pos:end="383:34">pict_type</name></name> <operator pos:start="383:36" pos:end="383:37">==</operator> <name pos:start="383:39" pos:end="383:47">FF_B_TYPE</name><operator pos:start="383:48" pos:end="383:48">)</operator><operator pos:start="383:49" pos:end="383:49">)</operator></expr>)</condition>

            <block pos:start="385:13" pos:end="391:13">{<block_content pos:start="387:17" pos:end="389:41">

                <expr_stmt pos:start="387:17" pos:end="387:33"><expr pos:start="387:17" pos:end="387:32"><name pos:start="387:17" pos:end="387:28"><name pos:start="387:17" pos:end="387:17">s</name><operator pos:start="387:18" pos:end="387:19">-&gt;</operator><name pos:start="387:20" pos:end="387:28">low_delay</name></name> <operator pos:start="387:30" pos:end="387:30">=</operator> <literal type="number" pos:start="387:32" pos:end="387:32">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="389:17" pos:end="389:41"><expr pos:start="389:17" pos:end="389:40"><name pos:start="389:17" pos:end="389:38"><name pos:start="389:17" pos:end="389:17">s</name><operator pos:start="389:18" pos:end="389:19">-&gt;</operator><name pos:start="389:20" pos:end="389:24">avctx</name><operator pos:start="389:25" pos:end="389:26">-&gt;</operator><name pos:start="389:27" pos:end="389:38">has_b_frames</name></name><operator pos:start="389:39" pos:end="389:40">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="395:13" pos:end="403:13"><if pos:start="395:13" pos:end="403:13">if<condition pos:start="395:15" pos:end="395:61">(<expr pos:start="395:16" pos:end="395:60"><name pos:start="395:16" pos:end="395:27">out_of_order</name> <operator pos:start="395:29" pos:end="395:30">||</operator> <name pos:start="395:32" pos:end="395:35">pics</name> <operator pos:start="395:37" pos:end="395:37">&gt;</operator> <name pos:start="395:39" pos:end="395:60"><name pos:start="395:39" pos:end="395:39">s</name><operator pos:start="395:40" pos:end="395:41">-&gt;</operator><name pos:start="395:42" pos:end="395:46">avctx</name><operator pos:start="395:47" pos:end="395:48">-&gt;</operator><name pos:start="395:49" pos:end="395:60">has_b_frames</name></name></expr>)</condition><block pos:start="395:62" pos:end="403:13">{<block_content pos:start="397:17" pos:end="401:60">

                <expr_stmt pos:start="397:17" pos:end="397:51"><expr pos:start="397:17" pos:end="397:50"><name pos:start="397:17" pos:end="397:30"><name pos:start="397:17" pos:end="397:19">out</name><operator pos:start="397:20" pos:end="397:21">-&gt;</operator><name pos:start="397:22" pos:end="397:30">reference</name></name> <operator pos:start="397:32" pos:end="397:33">&amp;=</operator> <operator pos:start="397:35" pos:end="397:35">~</operator><name pos:start="397:36" pos:end="397:50">DELAYED_PIC_REF</name></expr>;</expr_stmt>

                <for pos:start="399:17" pos:end="401:60">for<control pos:start="399:20" pos:end="399:54">(<init pos:start="399:21" pos:end="399:30"><expr pos:start="399:21" pos:end="399:29"><name pos:start="399:21" pos:end="399:21">i</name><operator pos:start="399:22" pos:end="399:22">=</operator><name pos:start="399:23" pos:end="399:29">out_idx</name></expr>;</init> <condition pos:start="399:32" pos:end="399:49"><expr pos:start="399:32" pos:end="399:48"><name pos:start="399:32" pos:end="399:48"><name pos:start="399:32" pos:end="399:32">h</name><operator pos:start="399:33" pos:end="399:34">-&gt;</operator><name pos:start="399:35" pos:end="399:45">delayed_pic</name><index pos:start="399:46" pos:end="399:48">[<expr pos:start="399:47" pos:end="399:47"><name pos:start="399:47" pos:end="399:47">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="399:51" pos:end="399:53"><expr pos:start="399:51" pos:end="399:53"><name pos:start="399:51" pos:end="399:51">i</name><operator pos:start="399:52" pos:end="399:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="401:21" pos:end="401:60"><block_content pos:start="401:21" pos:end="401:60">

                    <expr_stmt pos:start="401:21" pos:end="401:60"><expr pos:start="401:21" pos:end="401:59"><name pos:start="401:21" pos:end="401:37"><name pos:start="401:21" pos:end="401:21">h</name><operator pos:start="401:22" pos:end="401:23">-&gt;</operator><name pos:start="401:24" pos:end="401:34">delayed_pic</name><index pos:start="401:35" pos:end="401:37">[<expr pos:start="401:36" pos:end="401:36"><name pos:start="401:36" pos:end="401:36">i</name></expr>]</index></name> <operator pos:start="401:39" pos:end="401:39">=</operator> <name pos:start="401:41" pos:end="401:59"><name pos:start="401:41" pos:end="401:41">h</name><operator pos:start="401:42" pos:end="401:43">-&gt;</operator><name pos:start="401:44" pos:end="401:54">delayed_pic</name><index pos:start="401:55" pos:end="401:59">[<expr pos:start="401:56" pos:end="401:58"><name pos:start="401:56" pos:end="401:56">i</name><operator pos:start="401:57" pos:end="401:57">+</operator><literal type="number" pos:start="401:58" pos:end="401:58">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="405:13" pos:end="419:13"><if pos:start="405:13" pos:end="415:13">if<condition pos:start="405:15" pos:end="405:62">(<expr pos:start="405:16" pos:end="405:61"><operator pos:start="405:16" pos:end="405:16">!</operator><name pos:start="405:17" pos:end="405:28">out_of_order</name> <operator pos:start="405:30" pos:end="405:31">&amp;&amp;</operator> <name pos:start="405:33" pos:end="405:36">pics</name> <operator pos:start="405:38" pos:end="405:38">&gt;</operator> <name pos:start="405:40" pos:end="405:61"><name pos:start="405:40" pos:end="405:40">s</name><operator pos:start="405:41" pos:end="405:42">-&gt;</operator><name pos:start="405:43" pos:end="405:47">avctx</name><operator pos:start="405:48" pos:end="405:49">-&gt;</operator><name pos:start="405:50" pos:end="405:61">has_b_frames</name></name></expr>)</condition><block pos:start="405:63" pos:end="415:13">{<block_content pos:start="407:17" pos:end="413:38">

                <expr_stmt pos:start="407:17" pos:end="407:45"><expr pos:start="407:17" pos:end="407:44"><operator pos:start="407:17" pos:end="407:17">*</operator><name pos:start="407:18" pos:end="407:26">data_size</name> <operator pos:start="407:28" pos:end="407:28">=</operator> <sizeof pos:start="407:30" pos:end="407:44">sizeof<argument_list pos:start="407:36" pos:end="407:44">(<argument pos:start="407:37" pos:end="407:43"><expr pos:start="407:37" pos:end="407:43"><name pos:start="407:37" pos:end="407:43">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



                <expr_stmt pos:start="411:17" pos:end="411:43"><expr pos:start="411:17" pos:end="411:42"><name pos:start="411:17" pos:end="411:31"><name pos:start="411:17" pos:end="411:17">h</name><operator pos:start="411:18" pos:end="411:19">-&gt;</operator><name pos:start="411:20" pos:end="411:31">outputed_poc</name></name> <operator pos:start="411:33" pos:end="411:33">=</operator> <name pos:start="411:35" pos:end="411:42"><name pos:start="411:35" pos:end="411:37">out</name><operator pos:start="411:38" pos:end="411:39">-&gt;</operator><name pos:start="411:40" pos:end="411:42">poc</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="413:17" pos:end="413:38"><expr pos:start="413:17" pos:end="413:37"><operator pos:start="413:17" pos:end="413:17">*</operator><name pos:start="413:18" pos:end="413:21">pict</name><operator pos:start="413:22" pos:end="413:22">=</operator> <operator pos:start="413:24" pos:end="413:24">*</operator><operator pos:start="413:25" pos:end="413:25">(</operator><name pos:start="413:26" pos:end="413:32">AVFrame</name><operator pos:start="413:33" pos:end="413:33">*</operator><operator pos:start="413:34" pos:end="413:34">)</operator><name pos:start="413:35" pos:end="413:37">out</name></expr>;</expr_stmt>

            </block_content>}</block></if><else pos:start="415:14" pos:end="419:13">else<block pos:start="415:18" pos:end="419:13">{<block_content pos:start="417:17" pos:end="417:60">

                <expr_stmt pos:start="417:17" pos:end="417:60"><expr pos:start="417:17" pos:end="417:59"><call pos:start="417:17" pos:end="417:59"><name pos:start="417:17" pos:end="417:22">av_log</name><argument_list pos:start="417:23" pos:end="417:59">(<argument pos:start="417:24" pos:end="417:28"><expr pos:start="417:24" pos:end="417:28"><name pos:start="417:24" pos:end="417:28">avctx</name></expr></argument>, <argument pos:start="417:31" pos:end="417:42"><expr pos:start="417:31" pos:end="417:42"><name pos:start="417:31" pos:end="417:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="417:45" pos:end="417:58"><expr pos:start="417:45" pos:end="417:58"><literal type="string" pos:start="417:45" pos:end="417:58">"no picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="427:5" pos:end="427:41"><expr pos:start="427:5" pos:end="427:40"><call pos:start="427:5" pos:end="427:40"><name pos:start="427:5" pos:end="427:10">assert</name><argument_list pos:start="427:11" pos:end="427:40">(<argument pos:start="427:12" pos:end="427:39"><expr pos:start="427:12" pos:end="427:39"><name pos:start="427:12" pos:end="427:24"><name pos:start="427:12" pos:end="427:15">pict</name><operator pos:start="427:16" pos:end="427:17">-&gt;</operator><name pos:start="427:18" pos:end="427:21">data</name><index pos:start="427:22" pos:end="427:24">[<expr pos:start="427:23" pos:end="427:23"><literal type="number" pos:start="427:23" pos:end="427:23">0</literal></expr>]</index></name> <operator pos:start="427:26" pos:end="427:27">||</operator> <operator pos:start="427:29" pos:end="427:29">!</operator><operator pos:start="427:30" pos:end="427:30">*</operator><name pos:start="427:31" pos:end="427:39">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="444:0"><expr pos:start="429:5" pos:end="429:32"><call pos:start="429:5" pos:end="429:32"><name pos:start="429:5" pos:end="429:23">ff_print_debug_info</name><argument_list pos:start="429:24" pos:end="429:32">(<argument pos:start="429:25" pos:end="429:25"><expr pos:start="429:25" pos:end="429:25"><name pos:start="429:25" pos:end="429:25">s</name></expr></argument>, <argument pos:start="429:28" pos:end="429:31"><expr pos:start="429:28" pos:end="429:31"><name pos:start="429:28" pos:end="429:31">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="431:1" pos:end="431:41">//printf("out %d\n", (int)pict-&gt;data[0]);</comment>

<cpp:if pos:start="433:1" pos:end="433:5">#<cpp:directive pos:start="433:2" pos:end="433:3">if</cpp:directive> <expr pos:start="433:5" pos:end="433:5"><literal type="number" pos:start="433:5" pos:end="433:5">0</literal></expr></cpp:if> <comment type="line" pos:start="433:7" pos:end="433:9">//?</comment>



    <comment type="block" pos:start="437:5" pos:end="437:58">/* Return the Picture timestamp as the frame number */</comment>

    <comment type="block" pos:start="439:5" pos:end="439:58">/* we subtract 1 because it is added on utils.c     */</comment>

    avctx-&gt;frame_number = s-&gt;picture_number - 1;

<cpp:endif pos:start="443:1" pos:end="443:6">#<cpp:directive pos:start="443:2" pos:end="443:6">endif</cpp:directive></cpp:endif>

    <return pos:start="445:5" pos:end="445:54">return <expr pos:start="445:12" pos:end="445:53"><call pos:start="445:12" pos:end="445:53"><name pos:start="445:12" pos:end="445:29">get_consumed_bytes</name><argument_list pos:start="445:30" pos:end="445:53">(<argument pos:start="445:31" pos:end="445:31"><expr pos:start="445:31" pos:end="445:31"><name pos:start="445:31" pos:end="445:31">s</name></expr></argument>, <argument pos:start="445:34" pos:end="445:42"><expr pos:start="445:34" pos:end="445:42"><name pos:start="445:34" pos:end="445:42">buf_index</name></expr></argument>, <argument pos:start="445:45" pos:end="445:52"><expr pos:start="445:45" pos:end="445:52"><name pos:start="445:45" pos:end="445:52">buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
