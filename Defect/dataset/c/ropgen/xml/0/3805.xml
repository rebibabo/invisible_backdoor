<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3805.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">readv_f</name><parameter_list pos:start="1:19" pos:end="1:60">(<parameter pos:start="1:20" pos:end="1:36"><decl pos:start="1:20" pos:end="1:36"><type pos:start="1:20" pos:end="1:36"><name pos:start="1:20" pos:end="1:31">BlockBackend</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">blk</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:46"><decl pos:start="1:39" pos:end="1:46"><type pos:start="1:39" pos:end="1:46"><name pos:start="1:39" pos:end="1:41">int</name></type> <name pos:start="1:43" pos:end="1:46">argc</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:59"><decl pos:start="1:49" pos:end="1:59"><type pos:start="1:49" pos:end="1:59"><name pos:start="1:49" pos:end="1:52">char</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier><modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="193:1">{<block_content pos:start="5:5" pos:end="191:13">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">timeval</name></name></type> <name pos:start="5:20" pos:end="5:21">t1</name></decl>, <decl pos:start="5:24" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:18"/><name pos:start="5:24" pos:end="5:25">t2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">Cflag</name> <init pos:start="7:15" pos:end="7:17">= <expr pos:start="7:17" pos:end="7:17"><literal type="number" pos:start="7:17" pos:end="7:17">0</literal></expr></init></decl>, <decl pos:start="7:20" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:24">qflag</name> <init pos:start="7:26" pos:end="7:28">= <expr pos:start="7:28" pos:end="7:28"><literal type="number" pos:start="7:28" pos:end="7:28">0</literal></expr></init></decl>, <decl pos:start="7:31" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:31" pos:end="7:35">vflag</name> <init pos:start="7:37" pos:end="7:39">= <expr pos:start="7:39" pos:end="7:39"><literal type="number" pos:start="7:39" pos:end="7:39">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">c</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">cnt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:18">offset</name></decl>;</decl_stmt>

    <comment type="block" pos:start="15:5" pos:end="15:75">/* Some compilers get confused and warn if this is not initialized.  */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">total</name> <init pos:start="17:15" pos:end="17:17">= <expr pos:start="17:17" pos:end="17:17"><literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">nr_iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:16">QEMUIOVector</name></type> <name pos:start="21:18" pos:end="21:21">qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:15">pattern</name> <init pos:start="23:17" pos:end="23:19">= <expr pos:start="23:19" pos:end="23:19"><literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">Pflag</name> <init pos:start="25:15" pos:end="25:17">= <expr pos:start="25:17" pos:end="25:17"><literal type="number" pos:start="25:17" pos:end="25:17">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="29:5" pos:end="71:5">while <condition pos:start="29:11" pos:end="29:52">(<expr pos:start="29:12" pos:end="29:51"><operator pos:start="29:12" pos:end="29:12">(</operator><name pos:start="29:13" pos:end="29:13">c</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:43"><name pos:start="29:17" pos:end="29:22">getopt</name><argument_list pos:start="29:23" pos:end="29:43">(<argument pos:start="29:24" pos:end="29:27"><expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">argc</name></expr></argument>, <argument pos:start="29:30" pos:end="29:33"><expr pos:start="29:30" pos:end="29:33"><name pos:start="29:30" pos:end="29:33">argv</name></expr></argument>, <argument pos:start="29:36" pos:end="29:42"><expr pos:start="29:36" pos:end="29:42"><literal type="string" pos:start="29:36" pos:end="29:42">"CP:qv"</literal></expr></argument>)</argument_list></call><operator pos:start="29:44" pos:end="29:44">)</operator> <operator pos:start="29:46" pos:end="29:47">!=</operator> <name pos:start="29:49" pos:end="29:51">EOF</name></expr>)</condition> <block pos:start="29:54" pos:end="71:5">{<block_content pos:start="31:9" pos:end="69:9">

        <switch pos:start="31:9" pos:end="69:9">switch <condition pos:start="31:16" pos:end="31:18">(<expr pos:start="31:17" pos:end="31:17"><name pos:start="31:17" pos:end="31:17">c</name></expr>)</condition> <block pos:start="31:20" pos:end="69:9">{<block_content pos:start="33:9" pos:end="67:52">

        <case pos:start="33:9" pos:end="33:17">case <expr pos:start="33:14" pos:end="33:16"><literal type="char" pos:start="33:14" pos:end="33:16">'C'</literal></expr>:</case>

            <expr_stmt pos:start="35:13" pos:end="35:22"><expr pos:start="35:13" pos:end="35:21"><name pos:start="35:13" pos:end="35:17">Cflag</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <literal type="number" pos:start="35:21" pos:end="35:21">1</literal></expr>;</expr_stmt>

            <break pos:start="37:13" pos:end="37:18">break;</break>

        <case pos:start="39:9" pos:end="39:17">case <expr pos:start="39:14" pos:end="39:16"><literal type="char" pos:start="39:14" pos:end="39:16">'P'</literal></expr>:</case>

            <expr_stmt pos:start="41:13" pos:end="41:22"><expr pos:start="41:13" pos:end="41:21"><name pos:start="41:13" pos:end="41:17">Pflag</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="number" pos:start="41:21" pos:end="41:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:44"><expr pos:start="43:13" pos:end="43:43"><name pos:start="43:13" pos:end="43:19">pattern</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:43"><name pos:start="43:23" pos:end="43:35">parse_pattern</name><argument_list pos:start="43:36" pos:end="43:43">(<argument pos:start="43:37" pos:end="43:42"><expr pos:start="43:37" pos:end="43:42"><name pos:start="43:37" pos:end="43:42">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="49:13"><if pos:start="45:13" pos:end="49:13">if <condition pos:start="45:16" pos:end="45:28">(<expr pos:start="45:17" pos:end="45:27"><name pos:start="45:17" pos:end="45:23">pattern</name> <operator pos:start="45:25" pos:end="45:25">&lt;</operator> <literal type="number" pos:start="45:27" pos:end="45:27">0</literal></expr>)</condition> <block pos:start="45:30" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:25">

                <return pos:start="47:17" pos:end="47:25">return <expr pos:start="47:24" pos:end="47:24"><literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="51:13" pos:end="51:18">break;</break>

        <case pos:start="53:9" pos:end="53:17">case <expr pos:start="53:14" pos:end="53:16"><literal type="char" pos:start="53:14" pos:end="53:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="55:13" pos:end="55:22"><expr pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:17">qflag</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <literal type="number" pos:start="55:21" pos:end="55:21">1</literal></expr>;</expr_stmt>

            <break pos:start="57:13" pos:end="57:18">break;</break>

        <case pos:start="59:9" pos:end="59:17">case <expr pos:start="59:14" pos:end="59:16"><literal type="char" pos:start="59:14" pos:end="59:16">'v'</literal></expr>:</case>

            <expr_stmt pos:start="61:13" pos:end="61:22"><expr pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:17">vflag</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <literal type="number" pos:start="61:21" pos:end="61:21">1</literal></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        <default pos:start="65:9" pos:end="65:16">default:</default>

            <return pos:start="67:13" pos:end="67:52">return <expr pos:start="67:20" pos:end="67:51"><call pos:start="67:20" pos:end="67:51"><name pos:start="67:20" pos:end="67:39">qemuio_command_usage</name><argument_list pos:start="67:40" pos:end="67:51">(<argument pos:start="67:41" pos:end="67:50"><expr pos:start="67:41" pos:end="67:50"><operator pos:start="67:41" pos:end="67:41">&amp;</operator><name pos:start="67:42" pos:end="67:50">readv_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:26">(<expr pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:14">optind</name> <operator pos:start="75:16" pos:end="75:16">&gt;</operator> <name pos:start="75:18" pos:end="75:21">argc</name> <operator pos:start="75:23" pos:end="75:23">-</operator> <literal type="number" pos:start="75:25" pos:end="75:25">2</literal></expr>)</condition> <block pos:start="75:28" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:48">

        <return pos:start="77:9" pos:end="77:48">return <expr pos:start="77:16" pos:end="77:47"><call pos:start="77:16" pos:end="77:47"><name pos:start="77:16" pos:end="77:35">qemuio_command_usage</name><argument_list pos:start="77:36" pos:end="77:47">(<argument pos:start="77:37" pos:end="77:46"><expr pos:start="77:37" pos:end="77:46"><operator pos:start="77:37" pos:end="77:37">&amp;</operator><name pos:start="77:38" pos:end="77:46">readv_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>





    <expr_stmt pos:start="85:5" pos:end="85:34"><expr pos:start="85:5" pos:end="85:33"><name pos:start="85:5" pos:end="85:10">offset</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <call pos:start="85:14" pos:end="85:33"><name pos:start="85:14" pos:end="85:19">cvtnum</name><argument_list pos:start="85:20" pos:end="85:33">(<argument pos:start="85:21" pos:end="85:32"><expr pos:start="85:21" pos:end="85:32"><name pos:start="85:21" pos:end="85:32"><name pos:start="85:21" pos:end="85:24">argv</name><index pos:start="85:25" pos:end="85:32">[<expr pos:start="85:26" pos:end="85:31"><name pos:start="85:26" pos:end="85:31">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:19">(<expr pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:14">offset</name> <operator pos:start="87:16" pos:end="87:16">&lt;</operator> <literal type="number" pos:start="87:18" pos:end="87:18">0</literal></expr>)</condition> <block pos:start="87:21" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:17">

        <expr_stmt pos:start="89:9" pos:end="89:68"><expr pos:start="89:9" pos:end="89:67"><call pos:start="89:9" pos:end="89:67"><name pos:start="89:9" pos:end="89:14">printf</name><argument_list pos:start="89:15" pos:end="89:67">(<argument pos:start="89:16" pos:end="89:52"><expr pos:start="89:16" pos:end="89:52"><literal type="string" pos:start="89:16" pos:end="89:52">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="89:55" pos:end="89:66"><expr pos:start="89:55" pos:end="89:66"><name pos:start="89:55" pos:end="89:66"><name pos:start="89:55" pos:end="89:58">argv</name><index pos:start="89:59" pos:end="89:66">[<expr pos:start="89:60" pos:end="89:65"><name pos:start="89:60" pos:end="89:65">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="91:9" pos:end="91:17">return <expr pos:start="91:16" pos:end="91:16"><literal type="number" pos:start="91:16" pos:end="91:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:13"><expr pos:start="95:5" pos:end="95:12"><name pos:start="95:5" pos:end="95:10">optind</name><operator pos:start="95:11" pos:end="95:12">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="107:5"><if pos:start="99:5" pos:end="107:5">if <condition pos:start="99:8" pos:end="99:23">(<expr pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:14">offset</name> <operator pos:start="99:16" pos:end="99:16">&amp;</operator> <literal type="number" pos:start="99:18" pos:end="99:22">0x1ff</literal></expr>)</condition> <block pos:start="99:25" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:17">

        <expr_stmt pos:start="101:9" pos:end="103:23"><expr pos:start="101:9" pos:end="103:22"><call pos:start="101:9" pos:end="103:22"><name pos:start="101:9" pos:end="101:14">printf</name><argument_list pos:start="101:15" pos:end="103:22">(<argument pos:start="101:16" pos:end="101:59"><expr pos:start="101:16" pos:end="101:59"><literal type="string" pos:start="101:16" pos:end="101:25">"offset %"</literal> <name pos:start="101:27" pos:end="101:32">PRId64</name> <literal type="string" pos:start="101:34" pos:end="101:59">" is not sector aligned\n"</literal></expr></argument>,

               <argument pos:start="103:16" pos:end="103:21"><expr pos:start="103:16" pos:end="103:21"><name pos:start="103:16" pos:end="103:21">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:17">return <expr pos:start="105:16" pos:end="105:16"><literal type="number" pos:start="105:16" pos:end="105:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:27"><expr pos:start="111:5" pos:end="111:26"><name pos:start="111:5" pos:end="111:10">nr_iov</name> <operator pos:start="111:12" pos:end="111:12">=</operator> <name pos:start="111:14" pos:end="111:17">argc</name> <operator pos:start="111:19" pos:end="111:19">-</operator> <name pos:start="111:21" pos:end="111:26">optind</name></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:64"><expr pos:start="113:5" pos:end="113:63"><name pos:start="113:5" pos:end="113:7">buf</name> <operator pos:start="113:9" pos:end="113:9">=</operator> <call pos:start="113:11" pos:end="113:63"><name pos:start="113:11" pos:end="113:22">create_iovec</name><argument_list pos:start="113:23" pos:end="113:63">(<argument pos:start="113:24" pos:end="113:26"><expr pos:start="113:24" pos:end="113:26"><name pos:start="113:24" pos:end="113:26">blk</name></expr></argument>, <argument pos:start="113:29" pos:end="113:33"><expr pos:start="113:29" pos:end="113:33"><operator pos:start="113:29" pos:end="113:29">&amp;</operator><name pos:start="113:30" pos:end="113:33">qiov</name></expr></argument>, <argument pos:start="113:36" pos:end="113:48"><expr pos:start="113:36" pos:end="113:48"><operator pos:start="113:36" pos:end="113:36">&amp;</operator><name pos:start="113:37" pos:end="113:48"><name pos:start="113:37" pos:end="113:40">argv</name><index pos:start="113:41" pos:end="113:48">[<expr pos:start="113:42" pos:end="113:47"><name pos:start="113:42" pos:end="113:47">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="113:51" pos:end="113:56"><expr pos:start="113:51" pos:end="113:56"><name pos:start="113:51" pos:end="113:56">nr_iov</name></expr></argument>, <argument pos:start="113:59" pos:end="113:62"><expr pos:start="113:59" pos:end="113:62"><literal type="number" pos:start="113:59" pos:end="113:62">0xab</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:20">(<expr pos:start="115:9" pos:end="115:19"><name pos:start="115:9" pos:end="115:11">buf</name> <operator pos:start="115:13" pos:end="115:14">==</operator> <name pos:start="115:16" pos:end="115:19">NULL</name></expr>)</condition> <block pos:start="115:22" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:17">

        <return pos:start="117:9" pos:end="117:17">return <expr pos:start="117:16" pos:end="117:16"><literal type="number" pos:start="117:16" pos:end="117:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:28"><expr pos:start="123:5" pos:end="123:27"><call pos:start="123:5" pos:end="123:27"><name pos:start="123:5" pos:end="123:16">gettimeofday</name><argument_list pos:start="123:17" pos:end="123:27">(<argument pos:start="123:18" pos:end="123:20"><expr pos:start="123:18" pos:end="123:20"><operator pos:start="123:18" pos:end="123:18">&amp;</operator><name pos:start="123:19" pos:end="123:20">t1</name></expr></argument>, <argument pos:start="123:23" pos:end="123:26"><expr pos:start="123:23" pos:end="123:26"><name pos:start="123:23" pos:end="123:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:51"><expr pos:start="125:5" pos:end="125:50"><name pos:start="125:5" pos:end="125:7">cnt</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <call pos:start="125:11" pos:end="125:50"><name pos:start="125:11" pos:end="125:22">do_aio_readv</name><argument_list pos:start="125:23" pos:end="125:50">(<argument pos:start="125:24" pos:end="125:26"><expr pos:start="125:24" pos:end="125:26"><name pos:start="125:24" pos:end="125:26">blk</name></expr></argument>, <argument pos:start="125:29" pos:end="125:33"><expr pos:start="125:29" pos:end="125:33"><operator pos:start="125:29" pos:end="125:29">&amp;</operator><name pos:start="125:30" pos:end="125:33">qiov</name></expr></argument>, <argument pos:start="125:36" pos:end="125:41"><expr pos:start="125:36" pos:end="125:41"><name pos:start="125:36" pos:end="125:41">offset</name></expr></argument>, <argument pos:start="125:44" pos:end="125:49"><expr pos:start="125:44" pos:end="125:49"><operator pos:start="125:44" pos:end="125:44">&amp;</operator><name pos:start="125:45" pos:end="125:49">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:28"><expr pos:start="127:5" pos:end="127:27"><call pos:start="127:5" pos:end="127:27"><name pos:start="127:5" pos:end="127:16">gettimeofday</name><argument_list pos:start="127:17" pos:end="127:27">(<argument pos:start="127:18" pos:end="127:20"><expr pos:start="127:18" pos:end="127:20"><operator pos:start="127:18" pos:end="127:18">&amp;</operator><name pos:start="127:19" pos:end="127:20">t2</name></expr></argument>, <argument pos:start="127:23" pos:end="127:26"><expr pos:start="127:23" pos:end="127:26"><name pos:start="127:23" pos:end="127:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="131:5" pos:end="137:5"><if pos:start="131:5" pos:end="137:5">if <condition pos:start="131:8" pos:end="131:16">(<expr pos:start="131:9" pos:end="131:15"><name pos:start="131:9" pos:end="131:11">cnt</name> <operator pos:start="131:13" pos:end="131:13">&lt;</operator> <literal type="number" pos:start="131:15" pos:end="131:15">0</literal></expr>)</condition> <block pos:start="131:18" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:17">

        <expr_stmt pos:start="133:9" pos:end="133:53"><expr pos:start="133:9" pos:end="133:52"><call pos:start="133:9" pos:end="133:52"><name pos:start="133:9" pos:end="133:14">printf</name><argument_list pos:start="133:15" pos:end="133:52">(<argument pos:start="133:16" pos:end="133:35"><expr pos:start="133:16" pos:end="133:35"><literal type="string" pos:start="133:16" pos:end="133:35">"readv failed: %s\n"</literal></expr></argument>, <argument pos:start="133:38" pos:end="133:51"><expr pos:start="133:38" pos:end="133:51"><call pos:start="133:38" pos:end="133:51"><name pos:start="133:38" pos:end="133:45">strerror</name><argument_list pos:start="133:46" pos:end="133:51">(<argument pos:start="133:47" pos:end="133:50"><expr pos:start="133:47" pos:end="133:50"><operator pos:start="133:47" pos:end="133:47">-</operator><name pos:start="133:48" pos:end="133:50">cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="135:9" pos:end="135:17">goto <name pos:start="135:14" pos:end="135:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="141:5" pos:end="157:5"><if pos:start="141:5" pos:end="157:5">if <condition pos:start="141:8" pos:end="141:14">(<expr pos:start="141:9" pos:end="141:13"><name pos:start="141:9" pos:end="141:13">Pflag</name></expr>)</condition> <block pos:start="141:16" pos:end="157:5">{<block_content pos:start="143:9" pos:end="155:24">

        <decl_stmt pos:start="143:9" pos:end="143:44"><decl pos:start="143:9" pos:end="143:43"><type pos:start="143:9" pos:end="143:14"><name pos:start="143:9" pos:end="143:12">void</name> <modifier pos:start="143:14" pos:end="143:14">*</modifier></type><name pos:start="143:15" pos:end="143:21">cmp_buf</name> <init pos:start="143:23" pos:end="143:43">= <expr pos:start="143:25" pos:end="143:43"><call pos:start="143:25" pos:end="143:43"><name pos:start="143:25" pos:end="143:32">g_malloc</name><argument_list pos:start="143:33" pos:end="143:43">(<argument pos:start="143:34" pos:end="143:42"><expr pos:start="143:34" pos:end="143:42"><name pos:start="143:34" pos:end="143:42"><name pos:start="143:34" pos:end="143:37">qiov</name><operator pos:start="143:38" pos:end="143:38">.</operator><name pos:start="143:39" pos:end="143:42">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:44"><expr pos:start="145:9" pos:end="145:43"><call pos:start="145:9" pos:end="145:43"><name pos:start="145:9" pos:end="145:14">memset</name><argument_list pos:start="145:15" pos:end="145:43">(<argument pos:start="145:16" pos:end="145:22"><expr pos:start="145:16" pos:end="145:22"><name pos:start="145:16" pos:end="145:22">cmp_buf</name></expr></argument>, <argument pos:start="145:25" pos:end="145:31"><expr pos:start="145:25" pos:end="145:31"><name pos:start="145:25" pos:end="145:31">pattern</name></expr></argument>, <argument pos:start="145:34" pos:end="145:42"><expr pos:start="145:34" pos:end="145:42"><name pos:start="145:34" pos:end="145:42"><name pos:start="145:34" pos:end="145:37">qiov</name><operator pos:start="145:38" pos:end="145:38">.</operator><name pos:start="145:39" pos:end="145:42">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="147:9" pos:end="153:9"><if pos:start="147:9" pos:end="153:9">if <condition pos:start="147:12" pos:end="147:44">(<expr pos:start="147:13" pos:end="147:43"><call pos:start="147:13" pos:end="147:43"><name pos:start="147:13" pos:end="147:18">memcmp</name><argument_list pos:start="147:19" pos:end="147:43">(<argument pos:start="147:20" pos:end="147:22"><expr pos:start="147:20" pos:end="147:22"><name pos:start="147:20" pos:end="147:22">buf</name></expr></argument>, <argument pos:start="147:25" pos:end="147:31"><expr pos:start="147:25" pos:end="147:31"><name pos:start="147:25" pos:end="147:31">cmp_buf</name></expr></argument>, <argument pos:start="147:34" pos:end="147:42"><expr pos:start="147:34" pos:end="147:42"><name pos:start="147:34" pos:end="147:42"><name pos:start="147:34" pos:end="147:37">qiov</name><operator pos:start="147:38" pos:end="147:38">.</operator><name pos:start="147:39" pos:end="147:42">size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:46" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:62">

            <expr_stmt pos:start="149:13" pos:end="151:62"><expr pos:start="149:13" pos:end="151:61"><call pos:start="149:13" pos:end="151:61"><name pos:start="149:13" pos:end="149:18">printf</name><argument_list pos:start="149:19" pos:end="151:61">(<argument pos:start="149:20" pos:end="151:41"><expr pos:start="149:20" pos:end="151:41"><literal type="string" pos:start="149:20" pos:end="149:60">"Pattern verification failed at offset %"</literal>

                   <name pos:start="151:20" pos:end="151:25">PRId64</name> <literal type="string" pos:start="151:27" pos:end="151:41">", %zd bytes\n"</literal></expr></argument>, <argument pos:start="151:44" pos:end="151:49"><expr pos:start="151:44" pos:end="151:49"><name pos:start="151:44" pos:end="151:49">offset</name></expr></argument>, <argument pos:start="151:52" pos:end="151:60"><expr pos:start="151:52" pos:end="151:60"><name pos:start="151:52" pos:end="151:60"><name pos:start="151:52" pos:end="151:55">qiov</name><operator pos:start="151:56" pos:end="151:56">.</operator><name pos:start="151:57" pos:end="151:60">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:24"><expr pos:start="155:9" pos:end="155:23"><call pos:start="155:9" pos:end="155:23"><name pos:start="155:9" pos:end="155:14">g_free</name><argument_list pos:start="155:15" pos:end="155:23">(<argument pos:start="155:16" pos:end="155:22"><expr pos:start="155:16" pos:end="155:22"><name pos:start="155:16" pos:end="155:22">cmp_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="161:5" pos:end="165:5"><if pos:start="161:5" pos:end="165:5">if <condition pos:start="161:8" pos:end="161:14">(<expr pos:start="161:9" pos:end="161:13"><name pos:start="161:9" pos:end="161:13">qflag</name></expr>)</condition> <block pos:start="161:16" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:17">

        <goto pos:start="163:9" pos:end="163:17">goto <name pos:start="163:14" pos:end="163:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="173:5"><if pos:start="169:5" pos:end="173:5">if <condition pos:start="169:8" pos:end="169:14">(<expr pos:start="169:9" pos:end="169:13"><name pos:start="169:9" pos:end="169:13">vflag</name></expr>)</condition> <block pos:start="169:16" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:44">

        <expr_stmt pos:start="171:9" pos:end="171:44"><expr pos:start="171:9" pos:end="171:43"><call pos:start="171:9" pos:end="171:43"><name pos:start="171:9" pos:end="171:19">dump_buffer</name><argument_list pos:start="171:20" pos:end="171:43">(<argument pos:start="171:21" pos:end="171:23"><expr pos:start="171:21" pos:end="171:23"><name pos:start="171:21" pos:end="171:23">buf</name></expr></argument>, <argument pos:start="171:26" pos:end="171:31"><expr pos:start="171:26" pos:end="171:31"><name pos:start="171:26" pos:end="171:31">offset</name></expr></argument>, <argument pos:start="171:34" pos:end="171:42"><expr pos:start="171:34" pos:end="171:42"><name pos:start="171:34" pos:end="171:42"><name pos:start="171:34" pos:end="171:37">qiov</name><operator pos:start="171:38" pos:end="171:38">.</operator><name pos:start="171:39" pos:end="171:42">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="177:5" pos:end="177:60">/* Finally, report back -- -C gives a parsable format */</comment>

    <expr_stmt pos:start="179:5" pos:end="179:22"><expr pos:start="179:5" pos:end="179:21"><name pos:start="179:5" pos:end="179:6">t2</name> <operator pos:start="179:8" pos:end="179:8">=</operator> <call pos:start="179:10" pos:end="179:21"><name pos:start="179:10" pos:end="179:13">tsub</name><argument_list pos:start="179:14" pos:end="179:21">(<argument pos:start="179:15" pos:end="179:16"><expr pos:start="179:15" pos:end="179:16"><name pos:start="179:15" pos:end="179:16">t2</name></expr></argument>, <argument pos:start="179:19" pos:end="179:20"><expr pos:start="179:19" pos:end="179:20"><name pos:start="179:19" pos:end="179:20">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:68"><expr pos:start="181:5" pos:end="181:67"><call pos:start="181:5" pos:end="181:67"><name pos:start="181:5" pos:end="181:16">print_report</name><argument_list pos:start="181:17" pos:end="181:67">(<argument pos:start="181:18" pos:end="181:23"><expr pos:start="181:18" pos:end="181:23"><literal type="string" pos:start="181:18" pos:end="181:23">"read"</literal></expr></argument>, <argument pos:start="181:26" pos:end="181:28"><expr pos:start="181:26" pos:end="181:28"><operator pos:start="181:26" pos:end="181:26">&amp;</operator><name pos:start="181:27" pos:end="181:28">t2</name></expr></argument>, <argument pos:start="181:31" pos:end="181:36"><expr pos:start="181:31" pos:end="181:36"><name pos:start="181:31" pos:end="181:36">offset</name></expr></argument>, <argument pos:start="181:39" pos:end="181:47"><expr pos:start="181:39" pos:end="181:47"><name pos:start="181:39" pos:end="181:47"><name pos:start="181:39" pos:end="181:42">qiov</name><operator pos:start="181:43" pos:end="181:43">.</operator><name pos:start="181:44" pos:end="181:47">size</name></name></expr></argument>, <argument pos:start="181:50" pos:end="181:54"><expr pos:start="181:50" pos:end="181:54"><name pos:start="181:50" pos:end="181:54">total</name></expr></argument>, <argument pos:start="181:57" pos:end="181:59"><expr pos:start="181:57" pos:end="181:59"><name pos:start="181:57" pos:end="181:59">cnt</name></expr></argument>, <argument pos:start="181:62" pos:end="181:66"><expr pos:start="181:62" pos:end="181:66"><name pos:start="181:62" pos:end="181:66">Cflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="185:1" pos:end="185:4"><name pos:start="185:1" pos:end="185:3">out</name>:</label>

    <expr_stmt pos:start="187:5" pos:end="187:30"><expr pos:start="187:5" pos:end="187:29"><call pos:start="187:5" pos:end="187:29"><name pos:start="187:5" pos:end="187:22">qemu_iovec_destroy</name><argument_list pos:start="187:23" pos:end="187:29">(<argument pos:start="187:24" pos:end="187:28"><expr pos:start="187:24" pos:end="187:28"><operator pos:start="187:24" pos:end="187:24">&amp;</operator><name pos:start="187:25" pos:end="187:28">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:22"><expr pos:start="189:5" pos:end="189:21"><call pos:start="189:5" pos:end="189:21"><name pos:start="189:5" pos:end="189:16">qemu_io_free</name><argument_list pos:start="189:17" pos:end="189:21">(<argument pos:start="189:18" pos:end="189:20"><expr pos:start="189:18" pos:end="189:20"><name pos:start="189:18" pos:end="189:20">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="191:5" pos:end="191:13">return <expr pos:start="191:12" pos:end="191:12"><literal type="number" pos:start="191:12" pos:end="191:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
