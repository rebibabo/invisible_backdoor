<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9053.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">create_gic</name><parameter_list pos:start="1:23" pos:end="1:80">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:36">VirtBoardInfo</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">vbi</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:51">qemu_irq</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">pic</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:66"><decl pos:start="1:59" pos:end="1:66"><type pos:start="1:59" pos:end="1:66"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:66">type</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:79"><decl pos:start="1:69" pos:end="1:79"><type pos:start="1:69" pos:end="1:79"><name pos:start="1:69" pos:end="1:72">bool</name></type> <name pos:start="1:74" pos:end="1:79">secure</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:5">

    <comment type="block" pos:start="5:5" pos:end="5:36">/* We create a standalone GIC */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">DeviceState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:23">gicdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">SysBusDevice</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:27">gicbusdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:23">gictype</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:66"><expr pos:start="17:5" pos:end="17:65"><name pos:start="17:5" pos:end="17:11">gictype</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <ternary pos:start="17:15" pos:end="17:65"><condition pos:start="17:15" pos:end="17:27"><expr pos:start="17:15" pos:end="17:25"><operator pos:start="17:15" pos:end="17:15">(</operator><name pos:start="17:16" pos:end="17:19">type</name> <operator pos:start="17:21" pos:end="17:22">==</operator> <literal type="number" pos:start="17:24" pos:end="17:24">3</literal><operator pos:start="17:25" pos:end="17:25">)</operator></expr> ?</condition><then pos:start="17:29" pos:end="17:46"> <expr pos:start="17:29" pos:end="17:46"><call pos:start="17:29" pos:end="17:46"><name pos:start="17:29" pos:end="17:44">gicv3_class_name</name><argument_list pos:start="17:45" pos:end="17:46">()</argument_list></call></expr> </then><else pos:start="17:48" pos:end="17:65">: <expr pos:start="17:50" pos:end="17:65"><call pos:start="17:50" pos:end="17:65"><name pos:start="17:50" pos:end="17:63">gic_class_name</name><argument_list pos:start="17:64" pos:end="17:65">()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:40"><expr pos:start="21:5" pos:end="21:39"><name pos:start="21:5" pos:end="21:10">gicdev</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <call pos:start="21:14" pos:end="21:39"><name pos:start="21:14" pos:end="21:24">qdev_create</name><argument_list pos:start="21:25" pos:end="21:39">(<argument pos:start="21:26" pos:end="21:29"><expr pos:start="21:26" pos:end="21:29"><name pos:start="21:26" pos:end="21:29">NULL</name></expr></argument>, <argument pos:start="21:32" pos:end="21:38"><expr pos:start="21:32" pos:end="21:38"><name pos:start="21:32" pos:end="21:38">gictype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:51"><expr pos:start="23:5" pos:end="23:50"><call pos:start="23:5" pos:end="23:50"><name pos:start="23:5" pos:end="23:24">qdev_prop_set_uint32</name><argument_list pos:start="23:25" pos:end="23:50">(<argument pos:start="23:26" pos:end="23:31"><expr pos:start="23:26" pos:end="23:31"><name pos:start="23:26" pos:end="23:31">gicdev</name></expr></argument>, <argument pos:start="23:34" pos:end="23:43"><expr pos:start="23:34" pos:end="23:43"><literal type="string" pos:start="23:34" pos:end="23:43">"revision"</literal></expr></argument>, <argument pos:start="23:46" pos:end="23:49"><expr pos:start="23:46" pos:end="23:49"><name pos:start="23:46" pos:end="23:49">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:54"><expr pos:start="25:5" pos:end="25:53"><call pos:start="25:5" pos:end="25:53"><name pos:start="25:5" pos:end="25:24">qdev_prop_set_uint32</name><argument_list pos:start="25:25" pos:end="25:53">(<argument pos:start="25:26" pos:end="25:31"><expr pos:start="25:26" pos:end="25:31"><name pos:start="25:26" pos:end="25:31">gicdev</name></expr></argument>, <argument pos:start="25:34" pos:end="25:42"><expr pos:start="25:34" pos:end="25:42"><literal type="string" pos:start="25:34" pos:end="25:42">"num-cpu"</literal></expr></argument>, <argument pos:start="25:45" pos:end="25:52"><expr pos:start="25:45" pos:end="25:52"><name pos:start="25:45" pos:end="25:52">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="31:7">/* Note that the num-irq property counts both internal and external

     * interrupts; there are always 32 of the former (mandated by GIC spec).

     */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:59"><expr pos:start="33:5" pos:end="33:58"><call pos:start="33:5" pos:end="33:58"><name pos:start="33:5" pos:end="33:24">qdev_prop_set_uint32</name><argument_list pos:start="33:25" pos:end="33:58">(<argument pos:start="33:26" pos:end="33:31"><expr pos:start="33:26" pos:end="33:31"><name pos:start="33:26" pos:end="33:31">gicdev</name></expr></argument>, <argument pos:start="33:34" pos:end="33:42"><expr pos:start="33:34" pos:end="33:42"><literal type="string" pos:start="33:34" pos:end="33:42">"num-irq"</literal></expr></argument>, <argument pos:start="33:45" pos:end="33:57"><expr pos:start="33:45" pos:end="33:57"><name pos:start="33:45" pos:end="33:52">NUM_IRQS</name> <operator pos:start="33:54" pos:end="33:54">+</operator> <literal type="number" pos:start="33:56" pos:end="33:57">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:33">(<expr pos:start="35:9" pos:end="35:32"><operator pos:start="35:9" pos:end="35:9">!</operator><call pos:start="35:10" pos:end="35:32"><name pos:start="35:10" pos:end="35:30">kvm_irqchip_in_kernel</name><argument_list pos:start="35:31" pos:end="35:32">()</argument_list></call></expr>)</condition> <block pos:start="35:35" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:69">

        <expr_stmt pos:start="37:9" pos:end="37:69"><expr pos:start="37:9" pos:end="37:68"><call pos:start="37:9" pos:end="37:68"><name pos:start="37:9" pos:end="37:25">qdev_prop_set_bit</name><argument_list pos:start="37:26" pos:end="37:68">(<argument pos:start="37:27" pos:end="37:32"><expr pos:start="37:27" pos:end="37:32"><name pos:start="37:27" pos:end="37:32">gicdev</name></expr></argument>, <argument pos:start="37:35" pos:end="37:59"><expr pos:start="37:35" pos:end="37:59"><literal type="string" pos:start="37:35" pos:end="37:59">"has-security-extensions"</literal></expr></argument>, <argument pos:start="37:62" pos:end="37:67"><expr pos:start="37:62" pos:end="37:67"><name pos:start="37:62" pos:end="37:67">secure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:29"><expr pos:start="41:5" pos:end="41:28"><call pos:start="41:5" pos:end="41:28"><name pos:start="41:5" pos:end="41:20">qdev_init_nofail</name><argument_list pos:start="41:21" pos:end="41:28">(<argument pos:start="41:22" pos:end="41:27"><expr pos:start="41:22" pos:end="41:27"><name pos:start="41:22" pos:end="41:27">gicdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:39"><expr pos:start="43:5" pos:end="43:38"><name pos:start="43:5" pos:end="43:13">gicbusdev</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:38"><name pos:start="43:17" pos:end="43:30">SYS_BUS_DEVICE</name><argument_list pos:start="43:31" pos:end="43:38">(<argument pos:start="43:32" pos:end="43:37"><expr pos:start="43:32" pos:end="43:37"><name pos:start="43:32" pos:end="43:37">gicdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:67"><expr pos:start="45:5" pos:end="45:66"><call pos:start="45:5" pos:end="45:66"><name pos:start="45:5" pos:end="45:19">sysbus_mmio_map</name><argument_list pos:start="45:20" pos:end="45:66">(<argument pos:start="45:21" pos:end="45:29"><expr pos:start="45:21" pos:end="45:29"><name pos:start="45:21" pos:end="45:29">gicbusdev</name></expr></argument>, <argument pos:start="45:32" pos:end="45:32"><expr pos:start="45:32" pos:end="45:32"><literal type="number" pos:start="45:32" pos:end="45:32">0</literal></expr></argument>, <argument pos:start="45:35" pos:end="45:65"><expr pos:start="45:35" pos:end="45:65"><name pos:start="45:35" pos:end="45:60"><name pos:start="45:35" pos:end="45:37">vbi</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:45">memmap</name><index pos:start="45:46" pos:end="45:60">[<expr pos:start="45:47" pos:end="45:59"><name pos:start="45:47" pos:end="45:59">VIRT_GIC_DIST</name></expr>]</index></name><operator pos:start="45:61" pos:end="45:61">.</operator><name pos:start="45:62" pos:end="45:65">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:18">(<expr pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:12">type</name> <operator pos:start="47:14" pos:end="47:15">==</operator> <literal type="number" pos:start="47:17" pos:end="47:17">3</literal></expr>)</condition> <block pos:start="47:20" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:73">

        <expr_stmt pos:start="49:9" pos:end="49:73"><expr pos:start="49:9" pos:end="49:72"><call pos:start="49:9" pos:end="49:72"><name pos:start="49:9" pos:end="49:23">sysbus_mmio_map</name><argument_list pos:start="49:24" pos:end="49:72">(<argument pos:start="49:25" pos:end="49:33"><expr pos:start="49:25" pos:end="49:33"><name pos:start="49:25" pos:end="49:33">gicbusdev</name></expr></argument>, <argument pos:start="49:36" pos:end="49:36"><expr pos:start="49:36" pos:end="49:36"><literal type="number" pos:start="49:36" pos:end="49:36">1</literal></expr></argument>, <argument pos:start="49:39" pos:end="49:71"><expr pos:start="49:39" pos:end="49:71"><name pos:start="49:39" pos:end="49:66"><name pos:start="49:39" pos:end="49:41">vbi</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:49">memmap</name><index pos:start="49:50" pos:end="49:66">[<expr pos:start="49:51" pos:end="49:65"><name pos:start="49:51" pos:end="49:65">VIRT_GIC_REDIST</name></expr>]</index></name><operator pos:start="49:67" pos:end="49:67">.</operator><name pos:start="49:68" pos:end="49:71">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="55:5">else <block pos:start="51:12" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:70">

        <expr_stmt pos:start="53:9" pos:end="53:70"><expr pos:start="53:9" pos:end="53:69"><call pos:start="53:9" pos:end="53:69"><name pos:start="53:9" pos:end="53:23">sysbus_mmio_map</name><argument_list pos:start="53:24" pos:end="53:69">(<argument pos:start="53:25" pos:end="53:33"><expr pos:start="53:25" pos:end="53:33"><name pos:start="53:25" pos:end="53:33">gicbusdev</name></expr></argument>, <argument pos:start="53:36" pos:end="53:36"><expr pos:start="53:36" pos:end="53:36"><literal type="number" pos:start="53:36" pos:end="53:36">1</literal></expr></argument>, <argument pos:start="53:39" pos:end="53:68"><expr pos:start="53:39" pos:end="53:68"><name pos:start="53:39" pos:end="53:63"><name pos:start="53:39" pos:end="53:41">vbi</name><operator pos:start="53:42" pos:end="53:43">-&gt;</operator><name pos:start="53:44" pos:end="53:49">memmap</name><index pos:start="53:50" pos:end="53:63">[<expr pos:start="53:51" pos:end="53:62"><name pos:start="53:51" pos:end="53:62">VIRT_GIC_CPU</name></expr>]</index></name><operator pos:start="53:64" pos:end="53:64">.</operator><name pos:start="53:65" pos:end="53:68">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="65:7">/* Wire the outputs from each CPU's generic timer to the

     * appropriate GIC PPI inputs, and the GIC's IRQ output to

     * the CPU's IRQ input.

     */</comment>

    <for pos:start="67:5" pos:end="113:5">for <control pos:start="67:9" pos:end="67:34">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:29"><expr pos:start="67:17" pos:end="67:28"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:28">smp_cpus</name></expr>;</condition> <incr pos:start="67:31" pos:end="67:33"><expr pos:start="67:31" pos:end="67:33"><name pos:start="67:31" pos:end="67:31">i</name><operator pos:start="67:32" pos:end="67:33">++</operator></expr></incr>)</control> <block pos:start="67:36" pos:end="113:5">{<block_content pos:start="69:9" pos:end="111:66">

        <decl_stmt pos:start="69:9" pos:end="69:54"><decl pos:start="69:9" pos:end="69:53"><type pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:19">DeviceState</name> <modifier pos:start="69:21" pos:end="69:21">*</modifier></type><name pos:start="69:22" pos:end="69:27">cpudev</name> <init pos:start="69:29" pos:end="69:53">= <expr pos:start="69:31" pos:end="69:53"><call pos:start="69:31" pos:end="69:53"><name pos:start="69:31" pos:end="69:36">DEVICE</name><argument_list pos:start="69:37" pos:end="69:53">(<argument pos:start="69:38" pos:end="69:52"><expr pos:start="69:38" pos:end="69:52"><call pos:start="69:38" pos:end="69:52"><name pos:start="69:38" pos:end="69:49">qemu_get_cpu</name><argument_list pos:start="69:50" pos:end="69:52">(<argument pos:start="69:51" pos:end="69:51"><expr pos:start="69:51" pos:end="69:51"><name pos:start="69:51" pos:end="69:51">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:64"><decl pos:start="71:9" pos:end="71:63"><type pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">int</name></type> <name pos:start="71:13" pos:end="71:19">ppibase</name> <init pos:start="71:21" pos:end="71:63">= <expr pos:start="71:23" pos:end="71:63"><name pos:start="71:23" pos:end="71:30">NUM_IRQS</name> <operator pos:start="71:32" pos:end="71:32">+</operator> <name pos:start="71:34" pos:end="71:34">i</name> <operator pos:start="71:36" pos:end="71:36">*</operator> <name pos:start="71:38" pos:end="71:49">GIC_INTERNAL</name> <operator pos:start="71:51" pos:end="71:51">+</operator> <name pos:start="71:53" pos:end="71:63">GIC_NR_SGIS</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:16"><decl pos:start="73:9" pos:end="73:15"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:15">irq</name></decl>;</decl_stmt>

        <comment type="block" pos:start="75:9" pos:end="79:11">/* Mapping from the output timer irq lines from the CPU to the

         * GIC PPI inputs we use for the virt board.

         */</comment>

        <decl_stmt pos:start="81:9" pos:end="91:10"><decl pos:start="81:9" pos:end="91:9"><type pos:start="81:9" pos:end="81:17"><specifier pos:start="81:9" pos:end="81:13">const</specifier> <name pos:start="81:15" pos:end="81:17">int</name></type> <name pos:start="81:19" pos:end="81:29"><name pos:start="81:19" pos:end="81:27">timer_irq</name><index pos:start="81:28" pos:end="81:29">[]</index></name> <init pos:start="81:31" pos:end="91:9">= <expr pos:start="81:33" pos:end="91:9"><block pos:start="81:33" pos:end="91:9">{

            <expr pos:start="83:13" pos:end="83:49"><index pos:start="83:13" pos:end="83:25">[<expr pos:start="83:14" pos:end="83:24"><name pos:start="83:14" pos:end="83:24">GTIMER_PHYS</name></expr>]</index> <operator pos:start="83:27" pos:end="83:27">=</operator> <name pos:start="83:29" pos:end="83:49">ARCH_TIMER_NS_EL1_IRQ</name></expr>,

            <expr pos:start="85:13" pos:end="85:47"><index pos:start="85:13" pos:end="85:25">[<expr pos:start="85:14" pos:end="85:24"><name pos:start="85:14" pos:end="85:24">GTIMER_VIRT</name></expr>]</index> <operator pos:start="85:27" pos:end="85:27">=</operator> <name pos:start="85:29" pos:end="85:47">ARCH_TIMER_VIRT_IRQ</name></expr>,

            <expr pos:start="87:13" pos:end="87:49"><index pos:start="87:13" pos:end="87:24">[<expr pos:start="87:14" pos:end="87:23"><name pos:start="87:14" pos:end="87:23">GTIMER_HYP</name></expr>]</index>  <operator pos:start="87:27" pos:end="87:27">=</operator> <name pos:start="87:29" pos:end="87:49">ARCH_TIMER_NS_EL2_IRQ</name></expr>,

            <expr pos:start="89:13" pos:end="89:48"><index pos:start="89:13" pos:end="89:24">[<expr pos:start="89:14" pos:end="89:23"><name pos:start="89:14" pos:end="89:23">GTIMER_SEC</name></expr>]</index>  <operator pos:start="89:27" pos:end="89:27">=</operator> <name pos:start="89:29" pos:end="89:48">ARCH_TIMER_S_EL1_IRQ</name></expr>,

        }</block></expr></init></decl>;</decl_stmt>



        <for pos:start="95:9" pos:end="103:9">for <control pos:start="95:13" pos:end="95:57">(<init pos:start="95:14" pos:end="95:21"><expr pos:start="95:14" pos:end="95:20"><name pos:start="95:14" pos:end="95:16">irq</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <literal type="number" pos:start="95:20" pos:end="95:20">0</literal></expr>;</init> <condition pos:start="95:23" pos:end="95:50"><expr pos:start="95:23" pos:end="95:49"><name pos:start="95:23" pos:end="95:25">irq</name> <operator pos:start="95:27" pos:end="95:27">&lt;</operator> <call pos:start="95:29" pos:end="95:49"><name pos:start="95:29" pos:end="95:38">ARRAY_SIZE</name><argument_list pos:start="95:39" pos:end="95:49">(<argument pos:start="95:40" pos:end="95:48"><expr pos:start="95:40" pos:end="95:48"><name pos:start="95:40" pos:end="95:48">timer_irq</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="95:52" pos:end="95:56"><expr pos:start="95:52" pos:end="95:56"><name pos:start="95:52" pos:end="95:54">irq</name><operator pos:start="95:55" pos:end="95:56">++</operator></expr></incr>)</control> <block pos:start="95:59" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:78">

            <expr_stmt pos:start="97:13" pos:end="101:78"><expr pos:start="97:13" pos:end="101:77"><call pos:start="97:13" pos:end="101:77"><name pos:start="97:13" pos:end="97:33">qdev_connect_gpio_out</name><argument_list pos:start="97:34" pos:end="101:77">(<argument pos:start="97:35" pos:end="97:40"><expr pos:start="97:35" pos:end="97:40"><name pos:start="97:35" pos:end="97:40">cpudev</name></expr></argument>, <argument pos:start="97:43" pos:end="97:45"><expr pos:start="97:43" pos:end="97:45"><name pos:start="97:43" pos:end="97:45">irq</name></expr></argument>,

                                  <argument pos:start="99:35" pos:end="101:76"><expr pos:start="99:35" pos:end="101:76"><call pos:start="99:35" pos:end="101:76"><name pos:start="99:35" pos:end="99:50">qdev_get_gpio_in</name><argument_list pos:start="99:51" pos:end="101:76">(<argument pos:start="99:52" pos:end="99:57"><expr pos:start="99:52" pos:end="99:57"><name pos:start="99:52" pos:end="99:57">gicdev</name></expr></argument>,

                                                   <argument pos:start="101:52" pos:end="101:75"><expr pos:start="101:52" pos:end="101:75"><name pos:start="101:52" pos:end="101:58">ppibase</name> <operator pos:start="101:60" pos:end="101:60">+</operator> <name pos:start="101:62" pos:end="101:75"><name pos:start="101:62" pos:end="101:70">timer_irq</name><index pos:start="101:71" pos:end="101:75">[<expr pos:start="101:72" pos:end="101:74"><name pos:start="101:72" pos:end="101:74">irq</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="107:9" pos:end="107:80"><expr pos:start="107:9" pos:end="107:79"><call pos:start="107:9" pos:end="107:79"><name pos:start="107:9" pos:end="107:26">sysbus_connect_irq</name><argument_list pos:start="107:27" pos:end="107:79">(<argument pos:start="107:28" pos:end="107:36"><expr pos:start="107:28" pos:end="107:36"><name pos:start="107:28" pos:end="107:36">gicbusdev</name></expr></argument>, <argument pos:start="107:39" pos:end="107:39"><expr pos:start="107:39" pos:end="107:39"><name pos:start="107:39" pos:end="107:39">i</name></expr></argument>, <argument pos:start="107:42" pos:end="107:78"><expr pos:start="107:42" pos:end="107:78"><call pos:start="107:42" pos:end="107:78"><name pos:start="107:42" pos:end="107:57">qdev_get_gpio_in</name><argument_list pos:start="107:58" pos:end="107:78">(<argument pos:start="107:59" pos:end="107:64"><expr pos:start="107:59" pos:end="107:64"><name pos:start="107:59" pos:end="107:64">cpudev</name></expr></argument>, <argument pos:start="107:67" pos:end="107:77"><expr pos:start="107:67" pos:end="107:77"><name pos:start="107:67" pos:end="107:77">ARM_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="111:66"><expr pos:start="109:9" pos:end="111:65"><call pos:start="109:9" pos:end="111:65"><name pos:start="109:9" pos:end="109:26">sysbus_connect_irq</name><argument_list pos:start="109:27" pos:end="111:65">(<argument pos:start="109:28" pos:end="109:36"><expr pos:start="109:28" pos:end="109:36"><name pos:start="109:28" pos:end="109:36">gicbusdev</name></expr></argument>, <argument pos:start="109:39" pos:end="109:50"><expr pos:start="109:39" pos:end="109:50"><name pos:start="109:39" pos:end="109:39">i</name> <operator pos:start="109:41" pos:end="109:41">+</operator> <name pos:start="109:43" pos:end="109:50">smp_cpus</name></expr></argument>,

                           <argument pos:start="111:28" pos:end="111:64"><expr pos:start="111:28" pos:end="111:64"><call pos:start="111:28" pos:end="111:64"><name pos:start="111:28" pos:end="111:43">qdev_get_gpio_in</name><argument_list pos:start="111:44" pos:end="111:64">(<argument pos:start="111:45" pos:end="111:50"><expr pos:start="111:45" pos:end="111:50"><name pos:start="111:45" pos:end="111:50">cpudev</name></expr></argument>, <argument pos:start="111:53" pos:end="111:63"><expr pos:start="111:53" pos:end="111:63"><name pos:start="111:53" pos:end="111:63">ARM_CPU_FIQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="117:5" pos:end="121:5">for <control pos:start="117:9" pos:end="117:34">(<init pos:start="117:10" pos:end="117:15"><expr pos:start="117:10" pos:end="117:14"><name pos:start="117:10" pos:end="117:10">i</name> <operator pos:start="117:12" pos:end="117:12">=</operator> <literal type="number" pos:start="117:14" pos:end="117:14">0</literal></expr>;</init> <condition pos:start="117:17" pos:end="117:29"><expr pos:start="117:17" pos:end="117:28"><name pos:start="117:17" pos:end="117:17">i</name> <operator pos:start="117:19" pos:end="117:19">&lt;</operator> <name pos:start="117:21" pos:end="117:28">NUM_IRQS</name></expr>;</condition> <incr pos:start="117:31" pos:end="117:33"><expr pos:start="117:31" pos:end="117:33"><name pos:start="117:31" pos:end="117:31">i</name><operator pos:start="117:32" pos:end="117:33">++</operator></expr></incr>)</control> <block pos:start="117:36" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:45">

        <expr_stmt pos:start="119:9" pos:end="119:45"><expr pos:start="119:9" pos:end="119:44"><name pos:start="119:9" pos:end="119:14"><name pos:start="119:9" pos:end="119:11">pic</name><index pos:start="119:12" pos:end="119:14">[<expr pos:start="119:13" pos:end="119:13"><name pos:start="119:13" pos:end="119:13">i</name></expr>]</index></name> <operator pos:start="119:16" pos:end="119:16">=</operator> <call pos:start="119:18" pos:end="119:44"><name pos:start="119:18" pos:end="119:33">qdev_get_gpio_in</name><argument_list pos:start="119:34" pos:end="119:44">(<argument pos:start="119:35" pos:end="119:40"><expr pos:start="119:35" pos:end="119:40"><name pos:start="119:35" pos:end="119:40">gicdev</name></expr></argument>, <argument pos:start="119:43" pos:end="119:43"><expr pos:start="119:43" pos:end="119:43"><name pos:start="119:43" pos:end="119:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="125:5" pos:end="125:32"><expr pos:start="125:5" pos:end="125:31"><call pos:start="125:5" pos:end="125:31"><name pos:start="125:5" pos:end="125:20">fdt_add_gic_node</name><argument_list pos:start="125:21" pos:end="125:31">(<argument pos:start="125:22" pos:end="125:24"><expr pos:start="125:22" pos:end="125:24"><name pos:start="125:22" pos:end="125:24">vbi</name></expr></argument>, <argument pos:start="125:27" pos:end="125:30"><expr pos:start="125:27" pos:end="125:30"><name pos:start="125:27" pos:end="125:30">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="129:5" pos:end="137:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:18">(<expr pos:start="129:9" pos:end="129:17"><name pos:start="129:9" pos:end="129:12">type</name> <operator pos:start="129:14" pos:end="129:15">==</operator> <literal type="number" pos:start="129:17" pos:end="129:17">3</literal></expr>)</condition> <block pos:start="129:20" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:32">

        <expr_stmt pos:start="131:9" pos:end="131:32"><expr pos:start="131:9" pos:end="131:31"><call pos:start="131:9" pos:end="131:31"><name pos:start="131:9" pos:end="131:18">create_its</name><argument_list pos:start="131:19" pos:end="131:31">(<argument pos:start="131:20" pos:end="131:22"><expr pos:start="131:20" pos:end="131:22"><name pos:start="131:20" pos:end="131:22">vbi</name></expr></argument>, <argument pos:start="131:25" pos:end="131:30"><expr pos:start="131:25" pos:end="131:30"><name pos:start="131:25" pos:end="131:30">gicdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="133:7" pos:end="137:5">else <block pos:start="133:12" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:29">

        <expr_stmt pos:start="135:9" pos:end="135:29"><expr pos:start="135:9" pos:end="135:28"><call pos:start="135:9" pos:end="135:28"><name pos:start="135:9" pos:end="135:18">create_v2m</name><argument_list pos:start="135:19" pos:end="135:28">(<argument pos:start="135:20" pos:end="135:22"><expr pos:start="135:20" pos:end="135:22"><name pos:start="135:20" pos:end="135:22">vbi</name></expr></argument>, <argument pos:start="135:25" pos:end="135:27"><expr pos:start="135:25" pos:end="135:27"><name pos:start="135:25" pos:end="135:27">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
