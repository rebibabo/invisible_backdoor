<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1444.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_user_data</name><parameter_list pos:start="1:28" pos:end="1:68">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:43">Mpeg4DecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">ctx</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:67"><decl pos:start="1:51" pos:end="1:67"><type pos:start="1:51" pos:end="1:67"><name pos:start="1:51" pos:end="1:63">GetBitContext</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:67">gb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MpegEncContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:31">= <expr pos:start="5:25" pos:end="5:31"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:31"><name pos:start="5:26" pos:end="5:28">ctx</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:31">m</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:17"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:17">[<expr pos:start="7:14" pos:end="7:16"><literal type="number" pos:start="7:14" pos:end="7:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ver</name> <init pos:start="13:13" pos:end="13:15">= <expr pos:start="13:15" pos:end="13:15"><literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr></init></decl>, <decl pos:start="13:18" pos:end="13:26"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:22">build</name> <init pos:start="13:24" pos:end="13:26">= <expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">0</literal></expr></init></decl>, <decl pos:start="13:29" pos:end="13:36"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:29" pos:end="13:32">ver2</name> <init pos:start="13:34" pos:end="13:36">= <expr pos:start="13:36" pos:end="13:36"><literal type="number" pos:start="13:36" pos:end="13:36">0</literal></expr></init></decl>, <decl pos:start="13:39" pos:end="13:46"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:39" pos:end="13:42">ver3</name> <init pos:start="13:44" pos:end="13:46">= <expr pos:start="13:46" pos:end="13:46"><literal type="number" pos:start="13:46" pos:end="13:46">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:13">last</name></decl>;</decl_stmt>



    <for pos:start="19:5" pos:end="27:5">for <control pos:start="19:9" pos:end="19:70">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:65"><expr pos:start="19:17" pos:end="19:64"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <literal type="number" pos:start="19:21" pos:end="19:23">255</literal> <operator pos:start="19:25" pos:end="19:26">&amp;&amp;</operator> <call pos:start="19:28" pos:end="19:45"><name pos:start="19:28" pos:end="19:41">get_bits_count</name><argument_list pos:start="19:42" pos:end="19:45">(<argument pos:start="19:43" pos:end="19:44"><expr pos:start="19:43" pos:end="19:44"><name pos:start="19:43" pos:end="19:44">gb</name></expr></argument>)</argument_list></call> <operator pos:start="19:47" pos:end="19:47">&lt;</operator> <name pos:start="19:49" pos:end="19:64"><name pos:start="19:49" pos:end="19:50">gb</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:64">size_in_bits</name></name></expr>;</condition> <incr pos:start="19:67" pos:end="19:69"><expr pos:start="19:67" pos:end="19:69"><name pos:start="19:67" pos:end="19:67">i</name><operator pos:start="19:68" pos:end="19:69">++</operator></expr></incr>)</control> <block pos:start="19:72" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:33">

        <if_stmt pos:start="21:9" pos:end="23:18"><if pos:start="21:9" pos:end="23:18">if <condition pos:start="21:12" pos:end="21:35">(<expr pos:start="21:13" pos:end="21:34"><call pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:21">show_bits</name><argument_list pos:start="21:22" pos:end="21:29">(<argument pos:start="21:23" pos:end="21:24"><expr pos:start="21:23" pos:end="21:24"><name pos:start="21:23" pos:end="21:24">gb</name></expr></argument>, <argument pos:start="21:27" pos:end="21:28"><expr pos:start="21:27" pos:end="21:28"><literal type="number" pos:start="21:27" pos:end="21:28">23</literal></expr></argument>)</argument_list></call> <operator pos:start="21:31" pos:end="21:32">==</operator> <literal type="number" pos:start="21:34" pos:end="21:34">0</literal></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:18"><block_content pos:start="23:13" pos:end="23:18">

            <break pos:start="23:13" pos:end="23:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:33"><expr pos:start="25:9" pos:end="25:32"><name pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:11">buf</name><index pos:start="25:12" pos:end="25:14">[<expr pos:start="25:13" pos:end="25:13"><name pos:start="25:13" pos:end="25:13">i</name></expr>]</index></name> <operator pos:start="25:16" pos:end="25:16">=</operator> <call pos:start="25:18" pos:end="25:32"><name pos:start="25:18" pos:end="25:25">get_bits</name><argument_list pos:start="25:26" pos:end="25:32">(<argument pos:start="25:27" pos:end="25:28"><expr pos:start="25:27" pos:end="25:28"><name pos:start="25:27" pos:end="25:28">gb</name></expr></argument>, <argument pos:start="25:31" pos:end="25:31"><expr pos:start="25:31" pos:end="25:31"><literal type="number" pos:start="25:31" pos:end="25:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="29:5" pos:end="29:15"><expr pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:7">buf</name><index pos:start="29:8" pos:end="29:10">[<expr pos:start="29:9" pos:end="29:9"><name pos:start="29:9" pos:end="29:9">i</name></expr>]</index></name> <operator pos:start="29:12" pos:end="29:12">=</operator> <literal type="number" pos:start="29:14" pos:end="29:14">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:24">/* divx detection */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:60"><expr pos:start="35:5" pos:end="35:59"><name pos:start="35:5" pos:end="35:5">e</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <call pos:start="35:9" pos:end="35:59"><name pos:start="35:9" pos:end="35:14">sscanf</name><argument_list pos:start="35:15" pos:end="35:59">(<argument pos:start="35:16" pos:end="35:18"><expr pos:start="35:16" pos:end="35:18"><name pos:start="35:16" pos:end="35:18">buf</name></expr></argument>, <argument pos:start="35:21" pos:end="35:37"><expr pos:start="35:21" pos:end="35:37"><literal type="string" pos:start="35:21" pos:end="35:37">"DivX%dBuild%d%c"</literal></expr></argument>, <argument pos:start="35:40" pos:end="35:43"><expr pos:start="35:40" pos:end="35:43"><operator pos:start="35:40" pos:end="35:40">&amp;</operator><name pos:start="35:41" pos:end="35:43">ver</name></expr></argument>, <argument pos:start="35:46" pos:end="35:51"><expr pos:start="35:46" pos:end="35:51"><operator pos:start="35:46" pos:end="35:46">&amp;</operator><name pos:start="35:47" pos:end="35:51">build</name></expr></argument>, <argument pos:start="35:54" pos:end="35:58"><expr pos:start="35:54" pos:end="35:58"><operator pos:start="35:54" pos:end="35:54">&amp;</operator><name pos:start="35:55" pos:end="35:58">last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="39:60"><if pos:start="37:5" pos:end="39:60">if <condition pos:start="37:8" pos:end="37:14">(<expr pos:start="37:9" pos:end="37:13"><name pos:start="37:9" pos:end="37:9">e</name> <operator pos:start="37:11" pos:end="37:11">&lt;</operator> <literal type="number" pos:start="37:13" pos:end="37:13">2</literal></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:60"><block_content pos:start="39:9" pos:end="39:60">

        <expr_stmt pos:start="39:9" pos:end="39:60"><expr pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:9">e</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <call pos:start="39:13" pos:end="39:59"><name pos:start="39:13" pos:end="39:18">sscanf</name><argument_list pos:start="39:19" pos:end="39:59">(<argument pos:start="39:20" pos:end="39:22"><expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">buf</name></expr></argument>, <argument pos:start="39:25" pos:end="39:37"><expr pos:start="39:25" pos:end="39:37"><literal type="string" pos:start="39:25" pos:end="39:37">"DivX%db%d%c"</literal></expr></argument>, <argument pos:start="39:40" pos:end="39:43"><expr pos:start="39:40" pos:end="39:43"><operator pos:start="39:40" pos:end="39:40">&amp;</operator><name pos:start="39:41" pos:end="39:43">ver</name></expr></argument>, <argument pos:start="39:46" pos:end="39:51"><expr pos:start="39:46" pos:end="39:51"><operator pos:start="39:46" pos:end="39:46">&amp;</operator><name pos:start="39:47" pos:end="39:51">build</name></expr></argument>, <argument pos:start="39:54" pos:end="39:58"><expr pos:start="39:54" pos:end="39:58"><operator pos:start="39:54" pos:end="39:54">&amp;</operator><name pos:start="39:55" pos:end="39:58">last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:15">(<expr pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:9">e</name> <operator pos:start="41:11" pos:end="41:12">&gt;=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">2</literal></expr>)</condition> <block pos:start="41:17" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:48">

        <expr_stmt pos:start="43:9" pos:end="43:32"><expr pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:11">ctx</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:25">divx_version</name></name> <operator pos:start="43:27" pos:end="43:27">=</operator> <name pos:start="43:29" pos:end="43:31">ver</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:11">ctx</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:23">divx_build</name></name>   <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:33">build</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:48"><expr pos:start="47:9" pos:end="47:47"><name pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:22">divx_packed</name></name>  <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:27">e</name> <operator pos:start="47:29" pos:end="47:30">==</operator> <literal type="number" pos:start="47:32" pos:end="47:32">3</literal> <operator pos:start="47:34" pos:end="47:35">&amp;&amp;</operator> <name pos:start="47:37" pos:end="47:40">last</name> <operator pos:start="47:42" pos:end="47:43">==</operator> <literal type="char" pos:start="47:45" pos:end="47:47">'p'</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:30">/* libavcodec detection */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:50"><expr pos:start="55:5" pos:end="55:49"><name pos:start="55:5" pos:end="55:5">e</name> <operator pos:start="55:7" pos:end="55:7">=</operator> <call pos:start="55:9" pos:end="55:45"><name pos:start="55:9" pos:end="55:14">sscanf</name><argument_list pos:start="55:15" pos:end="55:45">(<argument pos:start="55:16" pos:end="55:18"><expr pos:start="55:16" pos:end="55:18"><name pos:start="55:16" pos:end="55:18">buf</name></expr></argument>, <argument pos:start="55:21" pos:end="55:36"><expr pos:start="55:21" pos:end="55:36"><literal type="string" pos:start="55:21" pos:end="55:36">"FFmpe%*[^b]b%d"</literal></expr></argument>, <argument pos:start="55:39" pos:end="55:44"><expr pos:start="55:39" pos:end="55:44"><operator pos:start="55:39" pos:end="55:39">&amp;</operator><name pos:start="55:40" pos:end="55:44">build</name></expr></argument>)</argument_list></call> <operator pos:start="55:47" pos:end="55:47">+</operator> <literal type="number" pos:start="55:49" pos:end="55:49">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="59:95"><if pos:start="57:5" pos:end="59:95">if <condition pos:start="57:8" pos:end="57:15">(<expr pos:start="57:9" pos:end="57:14"><name pos:start="57:9" pos:end="57:9">e</name> <operator pos:start="57:11" pos:end="57:12">!=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">4</literal></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:95"><block_content pos:start="59:9" pos:end="59:95">

        <expr_stmt pos:start="59:9" pos:end="59:95"><expr pos:start="59:9" pos:end="59:94"><name pos:start="59:9" pos:end="59:9">e</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <call pos:start="59:13" pos:end="59:94"><name pos:start="59:13" pos:end="59:18">sscanf</name><argument_list pos:start="59:19" pos:end="59:94">(<argument pos:start="59:20" pos:end="59:22"><expr pos:start="59:20" pos:end="59:22"><name pos:start="59:20" pos:end="59:22">buf</name></expr></argument>, <argument pos:start="59:25" pos:end="59:65"><expr pos:start="59:25" pos:end="59:65"><literal type="string" pos:start="59:25" pos:end="59:65">"FFmpeg v%d.%d.%d / libavcodec build: %d"</literal></expr></argument>, <argument pos:start="59:68" pos:end="59:71"><expr pos:start="59:68" pos:end="59:71"><operator pos:start="59:68" pos:end="59:68">&amp;</operator><name pos:start="59:69" pos:end="59:71">ver</name></expr></argument>, <argument pos:start="59:74" pos:end="59:78"><expr pos:start="59:74" pos:end="59:78"><operator pos:start="59:74" pos:end="59:74">&amp;</operator><name pos:start="59:75" pos:end="59:78">ver2</name></expr></argument>, <argument pos:start="59:81" pos:end="59:85"><expr pos:start="59:81" pos:end="59:85"><operator pos:start="59:81" pos:end="59:81">&amp;</operator><name pos:start="59:82" pos:end="59:85">ver3</name></expr></argument>, <argument pos:start="59:88" pos:end="59:93"><expr pos:start="59:88" pos:end="59:93"><operator pos:start="59:88" pos:end="59:88">&amp;</operator><name pos:start="59:89" pos:end="59:93">build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="61:5" pos:end="83:5"><if pos:start="61:5" pos:end="83:5">if <condition pos:start="61:8" pos:end="61:15">(<expr pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:9">e</name> <operator pos:start="61:11" pos:end="61:12">!=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">4</literal></expr>)</condition> <block pos:start="61:17" pos:end="83:5">{<block_content pos:start="63:9" pos:end="81:9">

        <expr_stmt pos:start="63:9" pos:end="63:64"><expr pos:start="63:9" pos:end="63:63"><name pos:start="63:9" pos:end="63:9">e</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:59"><name pos:start="63:13" pos:end="63:18">sscanf</name><argument_list pos:start="63:19" pos:end="63:59">(<argument pos:start="63:20" pos:end="63:22"><expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:22">buf</name></expr></argument>, <argument pos:start="63:25" pos:end="63:38"><expr pos:start="63:25" pos:end="63:38"><literal type="string" pos:start="63:25" pos:end="63:38">"Lavc%d.%d.%d"</literal></expr></argument>, <argument pos:start="63:41" pos:end="63:44"><expr pos:start="63:41" pos:end="63:44"><operator pos:start="63:41" pos:end="63:41">&amp;</operator><name pos:start="63:42" pos:end="63:44">ver</name></expr></argument>, <argument pos:start="63:47" pos:end="63:51"><expr pos:start="63:47" pos:end="63:51"><operator pos:start="63:47" pos:end="63:47">&amp;</operator><name pos:start="63:48" pos:end="63:51">ver2</name></expr></argument>, <argument pos:start="63:54" pos:end="63:58"><expr pos:start="63:54" pos:end="63:58"><operator pos:start="63:54" pos:end="63:54">&amp;</operator><name pos:start="63:55" pos:end="63:58">ver3</name></expr></argument>)</argument_list></call> <operator pos:start="63:61" pos:end="63:61">+</operator> <literal type="number" pos:start="63:63" pos:end="63:63">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="81:9"><if pos:start="65:9" pos:end="81:9">if <condition pos:start="65:12" pos:end="65:18">(<expr pos:start="65:13" pos:end="65:17"><name pos:start="65:13" pos:end="65:13">e</name> <operator pos:start="65:15" pos:end="65:15">&gt;</operator> <literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>)</condition> <block pos:start="65:20" pos:end="81:9">{<block_content pos:start="67:13" pos:end="79:80">

            <if_stmt pos:start="67:13" pos:end="77:13"><if pos:start="67:13" pos:end="77:13">if <condition pos:start="67:16" pos:end="67:57">(<expr pos:start="67:17" pos:end="67:56"><name pos:start="67:17" pos:end="67:19">ver</name> <operator pos:start="67:21" pos:end="67:21">&gt;</operator> <literal type="number" pos:start="67:23" pos:end="67:26">0xFF</literal> <operator pos:start="67:28" pos:end="67:29">||</operator> <name pos:start="67:31" pos:end="67:34">ver2</name> <operator pos:start="67:36" pos:end="67:36">&gt;</operator> <literal type="number" pos:start="67:38" pos:end="67:41">0xFF</literal> <operator pos:start="67:43" pos:end="67:44">||</operator> <name pos:start="67:46" pos:end="67:49">ver3</name> <operator pos:start="67:51" pos:end="67:51">&gt;</operator> <literal type="number" pos:start="67:53" pos:end="67:56">0xFF</literal></expr>)</condition> <block pos:start="67:59" pos:end="77:13">{<block_content pos:start="69:17" pos:end="75:38">

                <expr_stmt pos:start="69:17" pos:end="75:38"><expr pos:start="69:17" pos:end="75:37"><call pos:start="69:17" pos:end="75:37"><name pos:start="69:17" pos:end="69:22">av_log</name><argument_list pos:start="69:23" pos:end="75:37">(<argument pos:start="69:24" pos:end="69:31"><expr pos:start="69:24" pos:end="69:31"><name pos:start="69:24" pos:end="69:31"><name pos:start="69:24" pos:end="69:24">s</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:31">avctx</name></name></expr></argument>, <argument pos:start="69:34" pos:end="69:47"><expr pos:start="69:34" pos:end="69:47"><name pos:start="69:34" pos:end="69:47">AV_LOG_WARNING</name></expr></argument>,

                     <argument pos:start="71:22" pos:end="73:63"><expr pos:start="71:22" pos:end="73:63"><literal type="string" pos:start="71:22" pos:end="71:74">"Unknown Lavc version string encountered, %d.%d.%d; "</literal>

                     <literal type="string" pos:start="73:22" pos:end="73:63">"clamping sub-version values to 8-bits.\n"</literal></expr></argument>,

                     <argument pos:start="75:22" pos:end="75:24"><expr pos:start="75:22" pos:end="75:24"><name pos:start="75:22" pos:end="75:24">ver</name></expr></argument>, <argument pos:start="75:27" pos:end="75:30"><expr pos:start="75:27" pos:end="75:30"><name pos:start="75:27" pos:end="75:30">ver2</name></expr></argument>, <argument pos:start="75:33" pos:end="75:36"><expr pos:start="75:33" pos:end="75:36"><name pos:start="75:33" pos:end="75:36">ver3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:80"><expr pos:start="79:13" pos:end="79:79"><name pos:start="79:13" pos:end="79:17">build</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <operator pos:start="79:21" pos:end="79:21">(</operator><operator pos:start="79:22" pos:end="79:22">(</operator><name pos:start="79:23" pos:end="79:25">ver</name> <operator pos:start="79:27" pos:end="79:27">&amp;</operator> <literal type="number" pos:start="79:29" pos:end="79:32">0xFF</literal><operator pos:start="79:33" pos:end="79:33">)</operator> <operator pos:start="79:35" pos:end="79:36">&lt;&lt;</operator> <literal type="number" pos:start="79:38" pos:end="79:39">16</literal><operator pos:start="79:40" pos:end="79:40">)</operator> <operator pos:start="79:42" pos:end="79:42">+</operator> <operator pos:start="79:44" pos:end="79:44">(</operator><operator pos:start="79:45" pos:end="79:45">(</operator><name pos:start="79:46" pos:end="79:49">ver2</name> <operator pos:start="79:51" pos:end="79:51">&amp;</operator> <literal type="number" pos:start="79:53" pos:end="79:56">0xFF</literal><operator pos:start="79:57" pos:end="79:57">)</operator> <operator pos:start="79:59" pos:end="79:60">&lt;&lt;</operator> <literal type="number" pos:start="79:62" pos:end="79:62">8</literal><operator pos:start="79:63" pos:end="79:63">)</operator> <operator pos:start="79:65" pos:end="79:65">+</operator> <operator pos:start="79:67" pos:end="79:67">(</operator><name pos:start="79:68" pos:end="79:71">ver3</name> <operator pos:start="79:73" pos:end="79:73">&amp;</operator> <literal type="number" pos:start="79:75" pos:end="79:78">0xFF</literal><operator pos:start="79:79" pos:end="79:79">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:15">(<expr pos:start="85:9" pos:end="85:14"><name pos:start="85:9" pos:end="85:9">e</name> <operator pos:start="85:11" pos:end="85:12">!=</operator> <literal type="number" pos:start="85:14" pos:end="85:14">4</literal></expr>)</condition> <block pos:start="85:17" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:35">

        <if_stmt pos:start="87:9" pos:end="89:35"><if pos:start="87:9" pos:end="89:35">if <condition pos:start="87:12" pos:end="87:39">(<expr pos:start="87:13" pos:end="87:38"><call pos:start="87:13" pos:end="87:33"><name pos:start="87:13" pos:end="87:18">strcmp</name><argument_list pos:start="87:19" pos:end="87:33">(<argument pos:start="87:20" pos:end="87:22"><expr pos:start="87:20" pos:end="87:22"><name pos:start="87:20" pos:end="87:22">buf</name></expr></argument>, <argument pos:start="87:25" pos:end="87:32"><expr pos:start="87:25" pos:end="87:32"><literal type="string" pos:start="87:25" pos:end="87:32">"ffmpeg"</literal></expr></argument>)</argument_list></call> <operator pos:start="87:35" pos:end="87:36">==</operator> <literal type="number" pos:start="87:38" pos:end="87:38">0</literal></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:35"><block_content pos:start="89:13" pos:end="89:35">

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:15">ctx</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:27">lavc_build</name></name> <operator pos:start="89:29" pos:end="89:29">=</operator> <literal type="number" pos:start="89:31" pos:end="89:34">4600</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="93:5" pos:end="95:32"><if pos:start="93:5" pos:end="95:32">if <condition pos:start="93:8" pos:end="93:15">(<expr pos:start="93:9" pos:end="93:14"><name pos:start="93:9" pos:end="93:9">e</name> <operator pos:start="93:11" pos:end="93:12">==</operator> <literal type="number" pos:start="93:14" pos:end="93:14">4</literal></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:32"><block_content pos:start="95:9" pos:end="95:32">

        <expr_stmt pos:start="95:9" pos:end="95:32"><expr pos:start="95:9" pos:end="95:31"><name pos:start="95:9" pos:end="95:23"><name pos:start="95:9" pos:end="95:11">ctx</name><operator pos:start="95:12" pos:end="95:13">-&gt;</operator><name pos:start="95:14" pos:end="95:23">lavc_build</name></name> <operator pos:start="95:25" pos:end="95:25">=</operator> <name pos:start="95:27" pos:end="95:31">build</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:24">/* Xvid detection */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:38"><expr pos:start="101:5" pos:end="101:37"><name pos:start="101:5" pos:end="101:5">e</name> <operator pos:start="101:7" pos:end="101:7">=</operator> <call pos:start="101:9" pos:end="101:37"><name pos:start="101:9" pos:end="101:14">sscanf</name><argument_list pos:start="101:15" pos:end="101:37">(<argument pos:start="101:16" pos:end="101:18"><expr pos:start="101:16" pos:end="101:18"><name pos:start="101:16" pos:end="101:18">buf</name></expr></argument>, <argument pos:start="101:21" pos:end="101:28"><expr pos:start="101:21" pos:end="101:28"><literal type="string" pos:start="101:21" pos:end="101:28">"XviD%d"</literal></expr></argument>, <argument pos:start="101:31" pos:end="101:36"><expr pos:start="101:31" pos:end="101:36"><operator pos:start="101:31" pos:end="101:31">&amp;</operator><name pos:start="101:32" pos:end="101:36">build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="105:32"><if pos:start="103:5" pos:end="105:32">if <condition pos:start="103:8" pos:end="103:15">(<expr pos:start="103:9" pos:end="103:14"><name pos:start="103:9" pos:end="103:9">e</name> <operator pos:start="103:11" pos:end="103:12">==</operator> <literal type="number" pos:start="103:14" pos:end="103:14">1</literal></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:32"><block_content pos:start="105:9" pos:end="105:32">

        <expr_stmt pos:start="105:9" pos:end="105:32"><expr pos:start="105:9" pos:end="105:31"><name pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:11">ctx</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:23">xvid_build</name></name> <operator pos:start="105:25" pos:end="105:25">=</operator> <name pos:start="105:27" pos:end="105:31">build</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="109:5" pos:end="109:13">return <expr pos:start="109:12" pos:end="109:12"><literal type="number" pos:start="109:12" pos:end="109:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
