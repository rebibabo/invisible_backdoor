<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20491.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">check_refblocks</name><parameter_list pos:start="1:27" pos:end="5:48">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:64">BdrvCheckResult</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">res</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:44"><decl pos:start="3:28" pos:end="3:44"><type pos:start="3:28" pos:end="3:44"><name pos:start="3:28" pos:end="3:40">BdrvCheckMode</name></type> <name pos:start="3:42" pos:end="3:44">fix</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:71"><decl pos:start="3:47" pos:end="3:71"><type pos:start="3:47" pos:end="3:71"><name pos:start="3:47" pos:end="3:54">uint16_t</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier><modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:71">refcount_table</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:47"><decl pos:start="5:28" pos:end="5:47"><type pos:start="5:28" pos:end="5:47"><name pos:start="5:28" pos:end="5:34">int64_t</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:47">nb_clusters</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="141:1">{<block_content pos:start="9:5" pos:end="139:13">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">BDRVQcowState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:33">= <expr pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:13">i</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="135:5">for<control pos:start="15:8" pos:end="15:47">(<init pos:start="15:9" pos:end="15:14"><expr pos:start="15:9" pos:end="15:13"><name pos:start="15:9" pos:end="15:9">i</name> <operator pos:start="15:11" pos:end="15:11">=</operator> <literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr>;</init> <condition pos:start="15:16" pos:end="15:42"><expr pos:start="15:16" pos:end="15:41"><name pos:start="15:16" pos:end="15:16">i</name> <operator pos:start="15:18" pos:end="15:18">&lt;</operator> <name pos:start="15:20" pos:end="15:41"><name pos:start="15:20" pos:end="15:20">s</name><operator pos:start="15:21" pos:end="15:22">-&gt;</operator><name pos:start="15:23" pos:end="15:41">refcount_table_size</name></name></expr>;</condition> <incr pos:start="15:44" pos:end="15:46"><expr pos:start="15:44" pos:end="15:46"><name pos:start="15:44" pos:end="15:44">i</name><operator pos:start="15:45" pos:end="15:46">++</operator></expr></incr>)</control> <block pos:start="15:49" pos:end="135:5">{<block_content pos:start="17:9" pos:end="133:9">

        <decl_stmt pos:start="17:9" pos:end="17:33"><decl pos:start="17:9" pos:end="17:23"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">uint64_t</name></type> <name pos:start="17:18" pos:end="17:23">offset</name></decl>, <decl pos:start="17:26" pos:end="17:32"><type ref="prev" pos:start="17:9" pos:end="17:16"/><name pos:start="17:26" pos:end="17:32">cluster</name></decl>;</decl_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:38"><expr pos:start="19:9" pos:end="19:37"><name pos:start="19:9" pos:end="19:14">offset</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <name pos:start="19:18" pos:end="19:37"><name pos:start="19:18" pos:end="19:18">s</name><operator pos:start="19:19" pos:end="19:20">-&gt;</operator><name pos:start="19:21" pos:end="19:34">refcount_table</name><index pos:start="19:35" pos:end="19:37">[<expr pos:start="19:36" pos:end="19:36"><name pos:start="19:36" pos:end="19:36">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:44"><expr pos:start="21:9" pos:end="21:43"><name pos:start="21:9" pos:end="21:15">cluster</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:24">offset</name> <operator pos:start="21:26" pos:end="21:27">&gt;&gt;</operator> <name pos:start="21:29" pos:end="21:43"><name pos:start="21:29" pos:end="21:29">s</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:43">cluster_bits</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="25:9" pos:end="25:49">/* Refcount blocks are cluster aligned */</comment>

        <if_stmt pos:start="27:9" pos:end="37:9"><if pos:start="27:9" pos:end="37:9">if <condition pos:start="27:12" pos:end="27:43">(<expr pos:start="27:13" pos:end="27:42"><call pos:start="27:13" pos:end="27:42"><name pos:start="27:13" pos:end="27:31">offset_into_cluster</name><argument_list pos:start="27:32" pos:end="27:42">(<argument pos:start="27:33" pos:end="27:33"><expr pos:start="27:33" pos:end="27:33"><name pos:start="27:33" pos:end="27:33">s</name></expr></argument>, <argument pos:start="27:36" pos:end="27:41"><expr pos:start="27:36" pos:end="27:41"><name pos:start="27:36" pos:end="27:41">offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:45" pos:end="37:9">{<block_content pos:start="29:13" pos:end="35:21">

            <expr_stmt pos:start="29:13" pos:end="31:72"><expr pos:start="29:13" pos:end="31:71"><call pos:start="29:13" pos:end="31:71"><name pos:start="29:13" pos:end="29:19">fprintf</name><argument_list pos:start="29:20" pos:end="31:71">(<argument pos:start="29:21" pos:end="29:26"><expr pos:start="29:21" pos:end="29:26"><name pos:start="29:21" pos:end="29:26">stderr</name></expr></argument>, <argument pos:start="29:29" pos:end="31:67"><expr pos:start="29:29" pos:end="31:67"><literal type="string" pos:start="29:29" pos:end="29:52">"ERROR refcount block %"</literal> <name pos:start="29:54" pos:end="29:59">PRId64</name> <literal type="string" pos:start="29:61" pos:end="29:70">" is not "</literal>

                <literal type="string" pos:start="31:17" pos:end="31:67">"cluster aligned; refcount table entry corrupted\n"</literal></expr></argument>, <argument pos:start="31:70" pos:end="31:70"><expr pos:start="31:70" pos:end="31:70"><name pos:start="31:70" pos:end="31:70">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:31"><expr pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:28"><name pos:start="33:13" pos:end="33:15">res</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:28">corruptions</name></name><operator pos:start="33:29" pos:end="33:30">++</operator></expr>;</expr_stmt>

            <continue pos:start="35:13" pos:end="35:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="41:9" pos:end="51:9"><if pos:start="41:9" pos:end="51:9">if <condition pos:start="41:12" pos:end="41:36">(<expr pos:start="41:13" pos:end="41:35"><name pos:start="41:13" pos:end="41:19">cluster</name> <operator pos:start="41:21" pos:end="41:22">&gt;=</operator> <operator pos:start="41:24" pos:end="41:24">*</operator><name pos:start="41:25" pos:end="41:35">nb_clusters</name></expr>)</condition> <block pos:start="41:38" pos:end="51:9">{<block_content pos:start="43:13" pos:end="49:21">

            <expr_stmt pos:start="43:13" pos:end="45:46"><expr pos:start="43:13" pos:end="45:45"><call pos:start="43:13" pos:end="45:45"><name pos:start="43:13" pos:end="43:19">fprintf</name><argument_list pos:start="43:20" pos:end="45:45">(<argument pos:start="43:21" pos:end="43:26"><expr pos:start="43:21" pos:end="43:26"><name pos:start="43:21" pos:end="43:26">stderr</name></expr></argument>, <argument pos:start="43:29" pos:end="45:41"><expr pos:start="43:29" pos:end="45:41"><literal type="string" pos:start="43:29" pos:end="43:52">"ERROR refcount block %"</literal> <name pos:start="43:54" pos:end="43:59">PRId64</name>

                    <literal type="string" pos:start="45:21" pos:end="45:41">" is outside image\n"</literal></expr></argument>, <argument pos:start="45:44" pos:end="45:44"><expr pos:start="45:44" pos:end="45:44"><name pos:start="45:44" pos:end="45:44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:31"><expr pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:15">res</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:28">corruptions</name></name><operator pos:start="47:29" pos:end="47:30">++</operator></expr>;</expr_stmt>

            <continue pos:start="49:13" pos:end="49:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="55:9" pos:end="133:9"><if pos:start="55:9" pos:end="133:9">if <condition pos:start="55:12" pos:end="55:24">(<expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:18">offset</name> <operator pos:start="55:20" pos:end="55:21">!=</operator> <literal type="number" pos:start="55:23" pos:end="55:23">0</literal></expr>)</condition> <block pos:start="55:26" pos:end="133:9">{<block_content pos:start="57:13" pos:end="131:13">

            <expr_stmt pos:start="57:13" pos:end="59:41"><expr pos:start="57:13" pos:end="59:40"><call pos:start="57:13" pos:end="59:40"><name pos:start="57:13" pos:end="57:25">inc_refcounts</name><argument_list pos:start="57:26" pos:end="59:40">(<argument pos:start="57:27" pos:end="57:28"><expr pos:start="57:27" pos:end="57:28"><name pos:start="57:27" pos:end="57:28">bs</name></expr></argument>, <argument pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:33">res</name></expr></argument>, <argument pos:start="57:36" pos:end="57:50"><expr pos:start="57:36" pos:end="57:50"><operator pos:start="57:36" pos:end="57:36">*</operator><name pos:start="57:37" pos:end="57:50">refcount_table</name></expr></argument>, <argument pos:start="57:53" pos:end="57:64"><expr pos:start="57:53" pos:end="57:64"><operator pos:start="57:53" pos:end="57:53">*</operator><name pos:start="57:54" pos:end="57:64">nb_clusters</name></expr></argument>,

                <argument pos:start="59:17" pos:end="59:22"><expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">offset</name></expr></argument>, <argument pos:start="59:25" pos:end="59:39"><expr pos:start="59:25" pos:end="59:39"><name pos:start="59:25" pos:end="59:39"><name pos:start="59:25" pos:end="59:25">s</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:39">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="131:13"><if pos:start="61:13" pos:end="131:13">if <condition pos:start="61:16" pos:end="61:48">(<expr pos:start="61:17" pos:end="61:47"><operator pos:start="61:17" pos:end="61:17">(</operator><operator pos:start="61:18" pos:end="61:18">*</operator><name pos:start="61:19" pos:end="61:32">refcount_table</name><operator pos:start="61:33" pos:end="61:33">)</operator><index pos:start="61:34" pos:end="61:42">[<expr pos:start="61:35" pos:end="61:41"><name pos:start="61:35" pos:end="61:41">cluster</name></expr>]</index> <operator pos:start="61:44" pos:end="61:45">!=</operator> <literal type="number" pos:start="61:47" pos:end="61:47">1</literal></expr>)</condition> <block pos:start="61:50" pos:end="131:13">{<block_content pos:start="63:17" pos:end="129:17">

                <expr_stmt pos:start="63:17" pos:end="71:51"><expr pos:start="63:17" pos:end="71:50"><call pos:start="63:17" pos:end="71:50"><name pos:start="63:17" pos:end="63:23">fprintf</name><argument_list pos:start="63:24" pos:end="71:50">(<argument pos:start="63:25" pos:end="63:30"><expr pos:start="63:25" pos:end="63:30"><name pos:start="63:25" pos:end="63:30">stderr</name></expr></argument>, <argument pos:start="63:33" pos:end="65:36"><expr pos:start="63:33" pos:end="65:36"><literal type="string" pos:start="63:33" pos:end="63:53">"%s refcount block %"</literal> <name pos:start="63:55" pos:end="63:60">PRId64</name>

                    <literal type="string" pos:start="65:21" pos:end="65:36">" refcount=%d\n"</literal></expr></argument>,

                    <argument pos:start="67:21" pos:end="69:51"><expr pos:start="67:21" pos:end="69:51"><ternary pos:start="67:21" pos:end="69:51"><condition pos:start="67:21" pos:end="67:43"><expr pos:start="67:21" pos:end="67:41"><name pos:start="67:21" pos:end="67:23">fix</name> <operator pos:start="67:25" pos:end="67:25">&amp;</operator> <name pos:start="67:27" pos:end="67:41">BDRV_FIX_ERRORS</name></expr> ?</condition><then pos:start="67:45" pos:end="67:55"> <expr pos:start="67:45" pos:end="67:55"><literal type="string" pos:start="67:45" pos:end="67:55">"Repairing"</literal></expr> </then><else pos:start="67:57" pos:end="69:51">:

                                            <expr pos:start="69:45" pos:end="69:51"><literal type="string" pos:start="69:45" pos:end="69:51">"ERROR"</literal></expr></else></ternary></expr></argument>,

                    <argument pos:start="71:21" pos:end="71:21"><expr pos:start="71:21" pos:end="71:21"><name pos:start="71:21" pos:end="71:21">i</name></expr></argument>, <argument pos:start="71:24" pos:end="71:49"><expr pos:start="71:24" pos:end="71:49"><operator pos:start="71:24" pos:end="71:24">(</operator><operator pos:start="71:25" pos:end="71:25">*</operator><name pos:start="71:26" pos:end="71:39">refcount_table</name><operator pos:start="71:40" pos:end="71:40">)</operator><index pos:start="71:41" pos:end="71:49">[<expr pos:start="71:42" pos:end="71:48"><name pos:start="71:42" pos:end="71:48">cluster</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="75:17" pos:end="129:17"><if pos:start="75:17" pos:end="125:17">if <condition pos:start="75:20" pos:end="75:42">(<expr pos:start="75:21" pos:end="75:41"><name pos:start="75:21" pos:end="75:23">fix</name> <operator pos:start="75:25" pos:end="75:25">&amp;</operator> <name pos:start="75:27" pos:end="75:41">BDRV_FIX_ERRORS</name></expr>)</condition> <block pos:start="75:44" pos:end="125:17">{<block_content pos:start="77:21" pos:end="123:45">

                    <decl_stmt pos:start="77:21" pos:end="77:39"><decl pos:start="77:21" pos:end="77:38"><type pos:start="77:21" pos:end="77:27"><name pos:start="77:21" pos:end="77:27">int64_t</name></type> <name pos:start="77:29" pos:end="77:38">new_offset</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="81:21" pos:end="81:71"><expr pos:start="81:21" pos:end="81:70"><name pos:start="81:21" pos:end="81:30">new_offset</name> <operator pos:start="81:32" pos:end="81:32">=</operator> <call pos:start="81:34" pos:end="81:70"><name pos:start="81:34" pos:end="81:55">realloc_refcount_block</name><argument_list pos:start="81:56" pos:end="81:70">(<argument pos:start="81:57" pos:end="81:58"><expr pos:start="81:57" pos:end="81:58"><name pos:start="81:57" pos:end="81:58">bs</name></expr></argument>, <argument pos:start="81:61" pos:end="81:61"><expr pos:start="81:61" pos:end="81:61"><name pos:start="81:61" pos:end="81:61">i</name></expr></argument>, <argument pos:start="81:64" pos:end="81:69"><expr pos:start="81:64" pos:end="81:69"><name pos:start="81:64" pos:end="81:69">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="83:21" pos:end="89:21"><if pos:start="83:21" pos:end="89:21">if <condition pos:start="83:24" pos:end="83:39">(<expr pos:start="83:25" pos:end="83:38"><name pos:start="83:25" pos:end="83:34">new_offset</name> <operator pos:start="83:36" pos:end="83:36">&lt;</operator> <literal type="number" pos:start="83:38" pos:end="83:38">0</literal></expr>)</condition> <block pos:start="83:41" pos:end="89:21">{<block_content pos:start="85:25" pos:end="87:33">

                        <expr_stmt pos:start="85:25" pos:end="85:43"><expr pos:start="85:25" pos:end="85:42"><name pos:start="85:25" pos:end="85:40"><name pos:start="85:25" pos:end="85:27">res</name><operator pos:start="85:28" pos:end="85:29">-&gt;</operator><name pos:start="85:30" pos:end="85:40">corruptions</name></name><operator pos:start="85:41" pos:end="85:42">++</operator></expr>;</expr_stmt>

                        <continue pos:start="87:25" pos:end="87:33">continue;</continue>

                    </block_content>}</block></if></if_stmt>



                    <comment type="block" pos:start="93:21" pos:end="93:42">/* update refcounts */</comment>

                    <if_stmt pos:start="95:21" pos:end="113:21"><if pos:start="95:21" pos:end="113:21">if <condition pos:start="95:24" pos:end="95:72">(<expr pos:start="95:25" pos:end="95:71"><operator pos:start="95:25" pos:end="95:25">(</operator><name pos:start="95:26" pos:end="95:35">new_offset</name> <operator pos:start="95:37" pos:end="95:38">&gt;&gt;</operator> <name pos:start="95:40" pos:end="95:54"><name pos:start="95:40" pos:end="95:40">s</name><operator pos:start="95:41" pos:end="95:42">-&gt;</operator><name pos:start="95:43" pos:end="95:54">cluster_bits</name></name><operator pos:start="95:55" pos:end="95:55">)</operator> <operator pos:start="95:57" pos:end="95:58">&gt;=</operator> <operator pos:start="95:60" pos:end="95:60">*</operator><name pos:start="95:61" pos:end="95:71">nb_clusters</name></expr>)</condition> <block pos:start="95:74" pos:end="113:21">{<block_content pos:start="99:25" pos:end="111:49">

                        <comment type="block" pos:start="97:25" pos:end="97:71">/* increase refcount_table size if necessary */</comment>

                        <decl_stmt pos:start="99:25" pos:end="99:59"><decl pos:start="99:25" pos:end="99:58"><type pos:start="99:25" pos:end="99:27"><name pos:start="99:25" pos:end="99:27">int</name></type> <name pos:start="99:29" pos:end="99:43">old_nb_clusters</name> <init pos:start="99:45" pos:end="99:58">= <expr pos:start="99:47" pos:end="99:58"><operator pos:start="99:47" pos:end="99:47">*</operator><name pos:start="99:48" pos:end="99:58">nb_clusters</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="101:25" pos:end="101:75"><expr pos:start="101:25" pos:end="101:74"><operator pos:start="101:25" pos:end="101:25">*</operator><name pos:start="101:26" pos:end="101:36">nb_clusters</name> <operator pos:start="101:38" pos:end="101:38">=</operator> <operator pos:start="101:40" pos:end="101:40">(</operator><name pos:start="101:41" pos:end="101:50">new_offset</name> <operator pos:start="101:52" pos:end="101:53">&gt;&gt;</operator> <name pos:start="101:55" pos:end="101:69"><name pos:start="101:55" pos:end="101:55">s</name><operator pos:start="101:56" pos:end="101:57">-&gt;</operator><name pos:start="101:58" pos:end="101:69">cluster_bits</name></name><operator pos:start="101:70" pos:end="101:70">)</operator> <operator pos:start="101:72" pos:end="101:72">+</operator> <literal type="number" pos:start="101:74" pos:end="101:74">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="103:25" pos:end="105:64"><expr pos:start="103:25" pos:end="105:63"><operator pos:start="103:25" pos:end="103:25">*</operator><name pos:start="103:26" pos:end="103:39">refcount_table</name> <operator pos:start="103:41" pos:end="103:41">=</operator> <call pos:start="103:43" pos:end="105:63"><name pos:start="103:43" pos:end="103:49">g_renew</name><argument_list pos:start="103:50" pos:end="105:63">(<argument pos:start="103:51" pos:end="103:58"><expr pos:start="103:51" pos:end="103:58"><name pos:start="103:51" pos:end="103:58">uint16_t</name></expr></argument>, <argument pos:start="103:61" pos:end="103:75"><expr pos:start="103:61" pos:end="103:75"><operator pos:start="103:61" pos:end="103:61">*</operator><name pos:start="103:62" pos:end="103:75">refcount_table</name></expr></argument>,

                                                  <argument pos:start="105:51" pos:end="105:62"><expr pos:start="105:51" pos:end="105:62"><operator pos:start="105:51" pos:end="105:51">*</operator><name pos:start="105:52" pos:end="105:62">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="107:25" pos:end="111:49"><expr pos:start="107:25" pos:end="111:48"><call pos:start="107:25" pos:end="111:48"><name pos:start="107:25" pos:end="107:30">memset</name><argument_list pos:start="107:31" pos:end="111:48">(<argument pos:start="107:32" pos:end="107:66"><expr pos:start="107:32" pos:end="107:66"><operator pos:start="107:32" pos:end="107:32">&amp;</operator><operator pos:start="107:33" pos:end="107:33">(</operator><operator pos:start="107:34" pos:end="107:34">*</operator><name pos:start="107:35" pos:end="107:48">refcount_table</name><operator pos:start="107:49" pos:end="107:49">)</operator><index pos:start="107:50" pos:end="107:66">[<expr pos:start="107:51" pos:end="107:65"><name pos:start="107:51" pos:end="107:65">old_nb_clusters</name></expr>]</index></expr></argument>, <argument pos:start="107:69" pos:end="107:69"><expr pos:start="107:69" pos:end="107:69"><literal type="number" pos:start="107:69" pos:end="107:69">0</literal></expr></argument>,

                               <argument pos:start="109:32" pos:end="111:47"><expr pos:start="109:32" pos:end="111:47"><operator pos:start="109:32" pos:end="109:32">(</operator><operator pos:start="109:33" pos:end="109:33">*</operator><name pos:start="109:34" pos:end="109:44">nb_clusters</name> <operator pos:start="109:46" pos:end="109:46">-</operator> <name pos:start="109:48" pos:end="109:62">old_nb_clusters</name><operator pos:start="109:63" pos:end="109:63">)</operator> <operator pos:start="109:65" pos:end="109:65">*</operator>

                               <sizeof pos:start="111:32" pos:end="111:47">sizeof<argument_list pos:start="111:38" pos:end="111:47">(<argument pos:start="111:39" pos:end="111:46"><expr pos:start="111:39" pos:end="111:46"><name pos:start="111:39" pos:end="111:46">uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="115:21" pos:end="115:49"><expr pos:start="115:21" pos:end="115:48"><operator pos:start="115:21" pos:end="115:21">(</operator><operator pos:start="115:22" pos:end="115:22">*</operator><name pos:start="115:23" pos:end="115:36">refcount_table</name><operator pos:start="115:37" pos:end="115:37">)</operator><index pos:start="115:38" pos:end="115:46">[<expr pos:start="115:39" pos:end="115:45"><name pos:start="115:39" pos:end="115:45">cluster</name></expr>]</index><operator pos:start="115:47" pos:end="115:48">--</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="117:21" pos:end="119:57"><expr pos:start="117:21" pos:end="119:56"><call pos:start="117:21" pos:end="119:56"><name pos:start="117:21" pos:end="117:33">inc_refcounts</name><argument_list pos:start="117:34" pos:end="119:56">(<argument pos:start="117:35" pos:end="117:36"><expr pos:start="117:35" pos:end="117:36"><name pos:start="117:35" pos:end="117:36">bs</name></expr></argument>, <argument pos:start="117:39" pos:end="117:41"><expr pos:start="117:39" pos:end="117:41"><name pos:start="117:39" pos:end="117:41">res</name></expr></argument>, <argument pos:start="117:44" pos:end="117:58"><expr pos:start="117:44" pos:end="117:58"><operator pos:start="117:44" pos:end="117:44">*</operator><name pos:start="117:45" pos:end="117:58">refcount_table</name></expr></argument>, <argument pos:start="117:61" pos:end="117:72"><expr pos:start="117:61" pos:end="117:72"><operator pos:start="117:61" pos:end="117:61">*</operator><name pos:start="117:62" pos:end="117:72">nb_clusters</name></expr></argument>,

                            <argument pos:start="119:29" pos:end="119:38"><expr pos:start="119:29" pos:end="119:38"><name pos:start="119:29" pos:end="119:38">new_offset</name></expr></argument>, <argument pos:start="119:41" pos:end="119:55"><expr pos:start="119:41" pos:end="119:55"><name pos:start="119:41" pos:end="119:55"><name pos:start="119:41" pos:end="119:41">s</name><operator pos:start="119:42" pos:end="119:43">-&gt;</operator><name pos:start="119:44" pos:end="119:55">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="123:21" pos:end="123:45"><expr pos:start="123:21" pos:end="123:44"><name pos:start="123:21" pos:end="123:42"><name pos:start="123:21" pos:end="123:23">res</name><operator pos:start="123:24" pos:end="123:25">-&gt;</operator><name pos:start="123:26" pos:end="123:42">corruptions_fixed</name></name><operator pos:start="123:43" pos:end="123:44">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="125:19" pos:end="129:17">else <block pos:start="125:24" pos:end="129:17">{<block_content pos:start="127:21" pos:end="127:39">

                    <expr_stmt pos:start="127:21" pos:end="127:39"><expr pos:start="127:21" pos:end="127:38"><name pos:start="127:21" pos:end="127:36"><name pos:start="127:21" pos:end="127:23">res</name><operator pos:start="127:24" pos:end="127:25">-&gt;</operator><name pos:start="127:26" pos:end="127:36">corruptions</name></name><operator pos:start="127:37" pos:end="127:38">++</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="139:5" pos:end="139:13">return <expr pos:start="139:12" pos:end="139:12"><literal type="number" pos:start="139:12" pos:end="139:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
