<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1304.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">slirp_init_once</name><parameter_list pos:start="1:28" pos:end="1:33">(<parameter pos:start="1:29" pos:end="1:32"><decl pos:start="1:29" pos:end="1:32"><type pos:start="1:29" pos:end="1:32"><name pos:start="1:29" pos:end="1:32">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:14"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <name pos:start="5:12" pos:end="5:14">int</name></type> <name pos:start="5:16" pos:end="5:26">initialized</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:18">hostent</name></name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">he</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:22"><name pos:start="9:10" pos:end="9:17">our_name</name><index pos:start="9:18" pos:end="9:22">[<expr pos:start="9:19" pos:end="9:21"><literal type="number" pos:start="9:19" pos:end="9:21">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:ifdef pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:13">_WIN32</name></cpp:ifdef>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">WSADATA</name></type> <name pos:start="13:13" pos:end="13:16">Data</name></decl>;</decl_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:19">initialized</name></expr>)</condition> <block pos:start="19:22" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:15">

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="30:0"><expr pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:15">initialized</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <literal type="number" pos:start="25:19" pos:end="25:19">1</literal></expr>;</expr_stmt>



<cpp:ifdef pos:start="29:1" pos:end="29:13">#<cpp:directive pos:start="29:2" pos:end="29:6">ifdef</cpp:directive> <name pos:start="29:8" pos:end="29:13">_WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><call pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:14">WSAStartup</name><argument_list pos:start="31:15" pos:end="31:36">(<argument pos:start="31:16" pos:end="31:28"><expr pos:start="31:16" pos:end="31:28"><call pos:start="31:16" pos:end="31:28"><name pos:start="31:16" pos:end="31:23">MAKEWORD</name><argument_list pos:start="31:24" pos:end="31:28">(<argument pos:start="31:25" pos:end="31:25"><expr pos:start="31:25" pos:end="31:25"><literal type="number" pos:start="31:25" pos:end="31:25">2</literal></expr></argument>,<argument pos:start="31:27" pos:end="31:27"><expr pos:start="31:27" pos:end="31:27"><literal type="number" pos:start="31:27" pos:end="31:27">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:31" pos:end="31:35"><expr pos:start="31:31" pos:end="31:35"><operator pos:start="31:31" pos:end="31:31">&amp;</operator><name pos:start="31:32" pos:end="31:35">Data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="36:0"><expr pos:start="33:5" pos:end="33:27"><call pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:10">atexit</name><argument_list pos:start="33:11" pos:end="33:27">(<argument pos:start="33:12" pos:end="33:26"><expr pos:start="33:12" pos:end="33:26"><name pos:start="33:12" pos:end="33:26">winsock_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="39:5" pos:end="39:50"><expr pos:start="39:5" pos:end="39:49"><name pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:17">loopback_addr</name><operator pos:start="39:18" pos:end="39:18">.</operator><name pos:start="39:19" pos:end="39:24">s_addr</name></name> <operator pos:start="39:26" pos:end="39:26">=</operator> <call pos:start="39:28" pos:end="39:49"><name pos:start="39:28" pos:end="39:32">htonl</name><argument_list pos:start="39:33" pos:end="39:49">(<argument pos:start="39:34" pos:end="39:48"><expr pos:start="39:34" pos:end="39:48"><name pos:start="39:34" pos:end="39:48">INADDR_LOOPBACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:55">/* FIXME: This address may change during runtime */</comment>

    <if_stmt pos:start="45:5" pos:end="55:5"><if pos:start="45:5" pos:end="55:5">if <condition pos:start="45:8" pos:end="45:53">(<expr pos:start="45:9" pos:end="45:52"><call pos:start="45:9" pos:end="45:47"><name pos:start="45:9" pos:end="45:19">gethostname</name><argument_list pos:start="45:20" pos:end="45:47">(<argument pos:start="45:21" pos:end="45:28"><expr pos:start="45:21" pos:end="45:28"><name pos:start="45:21" pos:end="45:28">our_name</name></expr></argument>, <argument pos:start="45:31" pos:end="45:46"><expr pos:start="45:31" pos:end="45:46"><sizeof pos:start="45:31" pos:end="45:46">sizeof<argument_list pos:start="45:37" pos:end="45:46">(<argument pos:start="45:38" pos:end="45:45"><expr pos:start="45:38" pos:end="45:45"><name pos:start="45:38" pos:end="45:45">our_name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="45:49" pos:end="45:50">==</operator> <literal type="number" pos:start="45:52" pos:end="45:52">0</literal></expr>)</condition> <block pos:start="45:55" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:9">

        <expr_stmt pos:start="47:9" pos:end="47:37"><expr pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:10">he</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <call pos:start="47:14" pos:end="47:36"><name pos:start="47:14" pos:end="47:26">gethostbyname</name><argument_list pos:start="47:27" pos:end="47:36">(<argument pos:start="47:28" pos:end="47:35"><expr pos:start="47:28" pos:end="47:35"><name pos:start="47:28" pos:end="47:35">our_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:15">(<expr pos:start="49:13" pos:end="49:14"><name pos:start="49:13" pos:end="49:14">he</name></expr>)</condition> <block pos:start="49:17" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:53">

            <expr_stmt pos:start="51:13" pos:end="51:53"><expr pos:start="51:13" pos:end="51:52"><name pos:start="51:13" pos:end="51:20">our_addr</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <operator pos:start="51:24" pos:end="51:24">*</operator><operator pos:start="51:25" pos:end="51:25">(</operator>struct <name pos:start="51:33" pos:end="51:39">in_addr</name> <operator pos:start="51:41" pos:end="51:41">*</operator><operator pos:start="51:42" pos:end="51:42">)</operator><name pos:start="51:43" pos:end="51:52"><name pos:start="51:43" pos:end="51:44">he</name><operator pos:start="51:45" pos:end="51:46">-&gt;</operator><name pos:start="51:47" pos:end="51:52">h_addr</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:29">(<expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:16">our_addr</name><operator pos:start="57:17" pos:end="57:17">.</operator><name pos:start="57:18" pos:end="57:23">s_addr</name></name> <operator pos:start="57:25" pos:end="57:26">==</operator> <literal type="number" pos:start="57:28" pos:end="57:28">0</literal></expr>)</condition> <block pos:start="57:31" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:33">

        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:16">our_addr</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:32">loopback_addr</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:55">/* FIXME: This address may change during runtime */</comment>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:36">(<expr pos:start="67:9" pos:end="67:35"><call pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:20">get_dns_addr</name><argument_list pos:start="67:21" pos:end="67:31">(<argument pos:start="67:22" pos:end="67:30"><expr pos:start="67:22" pos:end="67:30"><operator pos:start="67:22" pos:end="67:22">&amp;</operator><name pos:start="67:23" pos:end="67:30">dns_addr</name></expr></argument>)</argument_list></call> <operator pos:start="67:33" pos:end="67:33">&lt;</operator> <literal type="number" pos:start="67:35" pos:end="67:35">0</literal></expr>)</condition> <block pos:start="67:38" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:33">

        <expr_stmt pos:start="69:9" pos:end="69:33"><expr pos:start="69:9" pos:end="69:32"><name pos:start="69:9" pos:end="69:16">dns_addr</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:32">loopback_addr</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
