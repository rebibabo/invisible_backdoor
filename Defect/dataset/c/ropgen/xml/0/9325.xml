<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9325.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint64_t</name></type> <name pos:start="1:10" pos:end="1:20">helper_fdiv</name> <parameter_list pos:start="1:22" pos:end="1:51">(<parameter pos:start="1:23" pos:end="1:35"><decl pos:start="1:23" pos:end="1:35"><type pos:start="1:23" pos:end="1:35"><name pos:start="1:23" pos:end="1:30">uint64_t</name></type> <name pos:start="1:32" pos:end="1:35">arg1</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:50"><decl pos:start="1:38" pos:end="1:50"><type pos:start="1:38" pos:end="1:50"><name pos:start="1:38" pos:end="1:45">uint64_t</name></type> <name pos:start="1:47" pos:end="1:50">arg2</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:20">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:15">CPU_DoubleU</name></type> <name pos:start="5:17" pos:end="5:21">farg1</name></decl>, <decl pos:start="5:24" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:15"/><name pos:start="5:24" pos:end="5:28">farg2</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:20"><expr pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:9">farg1</name><operator pos:start="9:10" pos:end="9:10">.</operator><name pos:start="9:11" pos:end="9:12">ll</name></name> <operator pos:start="9:14" pos:end="9:14">=</operator> <name pos:start="9:16" pos:end="9:19">arg1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="14:0"><expr pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:9">farg2</name><operator pos:start="11:10" pos:end="11:10">.</operator><name pos:start="11:11" pos:end="11:12">ll</name></name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:19">arg2</name></expr>;</expr_stmt>

<cpp:if pos:start="13:1" pos:end="13:25">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:25">USE_PRECISE_EMULATION</name></expr></cpp:if>

    <if_stmt pos:start="15:5" pos:end="52:0"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="17:52">(<expr pos:start="15:9" pos:end="17:51"><call pos:start="15:9" pos:end="17:51"><name pos:start="15:9" pos:end="15:16">unlikely</name><argument_list pos:start="15:17" pos:end="17:51">(<argument pos:start="15:18" pos:end="17:50"><expr pos:start="15:18" pos:end="17:50"><call pos:start="15:18" pos:end="15:50"><name pos:start="15:18" pos:end="15:41">float64_is_signaling_nan</name><argument_list pos:start="15:42" pos:end="15:50">(<argument pos:start="15:43" pos:end="15:49"><expr pos:start="15:43" pos:end="15:49"><name pos:start="15:43" pos:end="15:49"><name pos:start="15:43" pos:end="15:47">farg1</name><operator pos:start="15:48" pos:end="15:48">.</operator><name pos:start="15:49" pos:end="15:49">d</name></name></expr></argument>)</argument_list></call> <operator pos:start="15:52" pos:end="15:53">||</operator>

                 <call pos:start="17:18" pos:end="17:50"><name pos:start="17:18" pos:end="17:41">float64_is_signaling_nan</name><argument_list pos:start="17:42" pos:end="17:50">(<argument pos:start="17:43" pos:end="17:49"><expr pos:start="17:43" pos:end="17:49"><name pos:start="17:43" pos:end="17:49"><name pos:start="17:43" pos:end="17:47">farg2</name><operator pos:start="17:48" pos:end="17:48">.</operator><name pos:start="17:49" pos:end="17:49">d</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:54" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:65">

        <comment type="block" pos:start="19:9" pos:end="19:27">/* sNaN division */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:65"><expr pos:start="21:9" pos:end="21:64"><name pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:13">farg1</name><operator pos:start="21:14" pos:end="21:14">.</operator><name pos:start="21:15" pos:end="21:16">ll</name></name> <operator pos:start="21:18" pos:end="21:18">=</operator> <call pos:start="21:20" pos:end="21:64"><name pos:start="21:20" pos:end="21:40">fload_invalid_op_excp</name><argument_list pos:start="21:41" pos:end="21:64">(<argument pos:start="21:42" pos:end="21:63"><expr pos:start="21:42" pos:end="21:63"><name pos:start="21:42" pos:end="21:63">POWERPC_EXCP_FP_VXSNAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="23:7" pos:end="29:5">else if <condition pos:start="23:15" pos:end="23:86">(<expr pos:start="23:16" pos:end="23:85"><call pos:start="23:16" pos:end="23:85"><name pos:start="23:16" pos:end="23:23">unlikely</name><argument_list pos:start="23:24" pos:end="23:85">(<argument pos:start="23:25" pos:end="23:84"><expr pos:start="23:25" pos:end="23:84"><call pos:start="23:25" pos:end="23:52"><name pos:start="23:25" pos:end="23:43">float64_is_infinity</name><argument_list pos:start="23:44" pos:end="23:52">(<argument pos:start="23:45" pos:end="23:51"><expr pos:start="23:45" pos:end="23:51"><name pos:start="23:45" pos:end="23:51"><name pos:start="23:45" pos:end="23:49">farg1</name><operator pos:start="23:50" pos:end="23:50">.</operator><name pos:start="23:51" pos:end="23:51">d</name></name></expr></argument>)</argument_list></call> <operator pos:start="23:54" pos:end="23:55">&amp;&amp;</operator> <call pos:start="23:57" pos:end="23:84"><name pos:start="23:57" pos:end="23:75">float64_is_infinity</name><argument_list pos:start="23:76" pos:end="23:84">(<argument pos:start="23:77" pos:end="23:83"><expr pos:start="23:77" pos:end="23:83"><name pos:start="23:77" pos:end="23:83"><name pos:start="23:77" pos:end="23:81">farg2</name><operator pos:start="23:82" pos:end="23:82">.</operator><name pos:start="23:83" pos:end="23:83">d</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:88" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:64">

        <comment type="block" pos:start="25:9" pos:end="25:46">/* Division of infinity by infinity */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:64"><expr pos:start="27:9" pos:end="27:63"><name pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:13">farg1</name><operator pos:start="27:14" pos:end="27:14">.</operator><name pos:start="27:15" pos:end="27:16">ll</name></name> <operator pos:start="27:18" pos:end="27:18">=</operator> <call pos:start="27:20" pos:end="27:63"><name pos:start="27:20" pos:end="27:40">fload_invalid_op_excp</name><argument_list pos:start="27:41" pos:end="27:63">(<argument pos:start="27:42" pos:end="27:62"><expr pos:start="27:42" pos:end="27:62"><name pos:start="27:42" pos:end="27:62">POWERPC_EXCP_FP_VXIDI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="29:7" pos:end="45:5">else if <condition pos:start="29:15" pos:end="29:78">(<expr pos:start="29:16" pos:end="29:77"><call pos:start="29:16" pos:end="29:77"><name pos:start="29:16" pos:end="29:23">unlikely</name><argument_list pos:start="29:24" pos:end="29:77">(<argument pos:start="29:25" pos:end="29:76"><expr pos:start="29:25" pos:end="29:76"><operator pos:start="29:25" pos:end="29:25">!</operator><call pos:start="29:26" pos:end="29:48"><name pos:start="29:26" pos:end="29:39">float64_is_nan</name><argument_list pos:start="29:40" pos:end="29:48">(<argument pos:start="29:41" pos:end="29:47"><expr pos:start="29:41" pos:end="29:47"><name pos:start="29:41" pos:end="29:47"><name pos:start="29:41" pos:end="29:45">farg1</name><operator pos:start="29:46" pos:end="29:46">.</operator><name pos:start="29:47" pos:end="29:47">d</name></name></expr></argument>)</argument_list></call> <operator pos:start="29:50" pos:end="29:51">&amp;&amp;</operator> <call pos:start="29:53" pos:end="29:76"><name pos:start="29:53" pos:end="29:67">float64_is_zero</name><argument_list pos:start="29:68" pos:end="29:76">(<argument pos:start="29:69" pos:end="29:75"><expr pos:start="29:69" pos:end="29:75"><name pos:start="29:69" pos:end="29:75"><name pos:start="29:69" pos:end="29:73">farg2</name><operator pos:start="29:74" pos:end="29:74">.</operator><name pos:start="29:75" pos:end="29:75">d</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:80" pos:end="45:5">{<block_content pos:start="31:9" pos:end="43:9">

        <if_stmt pos:start="31:9" pos:end="43:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:37">(<expr pos:start="31:13" pos:end="31:36"><call pos:start="31:13" pos:end="31:36"><name pos:start="31:13" pos:end="31:27">float64_is_zero</name><argument_list pos:start="31:28" pos:end="31:36">(<argument pos:start="31:29" pos:end="31:35"><expr pos:start="31:29" pos:end="31:35"><name pos:start="31:29" pos:end="31:35"><name pos:start="31:29" pos:end="31:33">farg1</name><operator pos:start="31:34" pos:end="31:34">.</operator><name pos:start="31:35" pos:end="31:35">d</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:39" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:68">

            <comment type="block" pos:start="33:13" pos:end="33:42">/* Division of zero by zero */</comment>

            <expr_stmt pos:start="35:13" pos:end="35:68"><expr pos:start="35:13" pos:end="35:67"><name pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:17">farg1</name><operator pos:start="35:18" pos:end="35:18">.</operator><name pos:start="35:19" pos:end="35:20">ll</name></name> <operator pos:start="35:22" pos:end="35:22">=</operator> <call pos:start="35:24" pos:end="35:67"><name pos:start="35:24" pos:end="35:44">fload_invalid_op_excp</name><argument_list pos:start="35:45" pos:end="35:67">(<argument pos:start="35:46" pos:end="35:66"><expr pos:start="35:46" pos:end="35:66"><name pos:start="35:46" pos:end="35:66">POWERPC_EXCP_FP_VXZDZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="43:9">else <block pos:start="37:16" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:64">

            <comment type="block" pos:start="39:13" pos:end="39:34">/* Division by zero */</comment>

            <expr_stmt pos:start="41:13" pos:end="41:64"><expr pos:start="41:13" pos:end="41:63"><name pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:17">farg1</name><operator pos:start="41:18" pos:end="41:18">.</operator><name pos:start="41:19" pos:end="41:20">ll</name></name> <operator pos:start="41:22" pos:end="41:22">=</operator> <call pos:start="41:24" pos:end="41:63"><name pos:start="41:24" pos:end="41:45">float_zero_divide_excp</name><argument_list pos:start="41:46" pos:end="41:63">(<argument pos:start="41:47" pos:end="41:53"><expr pos:start="41:47" pos:end="41:53"><name pos:start="41:47" pos:end="41:53"><name pos:start="41:47" pos:end="41:51">farg1</name><operator pos:start="41:52" pos:end="41:52">.</operator><name pos:start="41:53" pos:end="41:53">d</name></name></expr></argument>, <argument pos:start="41:56" pos:end="41:62"><expr pos:start="41:56" pos:end="41:62"><name pos:start="41:56" pos:end="41:62"><name pos:start="41:56" pos:end="41:60">farg2</name><operator pos:start="41:61" pos:end="41:61">.</operator><name pos:start="41:62" pos:end="41:62">d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="52:0">else <block pos:start="45:12" pos:end="52:0">{<block_content pos:start="47:9" pos:end="47:65">

        <expr_stmt pos:start="47:9" pos:end="47:65"><expr pos:start="47:9" pos:end="47:64"><name pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:13">farg1</name><operator pos:start="47:14" pos:end="47:14">.</operator><name pos:start="47:15" pos:end="47:15">d</name></name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:64"><name pos:start="47:19" pos:end="47:29">float64_div</name><argument_list pos:start="47:30" pos:end="47:64">(<argument pos:start="47:31" pos:end="47:37"><expr pos:start="47:31" pos:end="47:37"><name pos:start="47:31" pos:end="47:37"><name pos:start="47:31" pos:end="47:35">farg1</name><operator pos:start="47:36" pos:end="47:36">.</operator><name pos:start="47:37" pos:end="47:37">d</name></name></expr></argument>, <argument pos:start="47:40" pos:end="47:46"><expr pos:start="47:40" pos:end="47:46"><name pos:start="47:40" pos:end="47:46"><name pos:start="47:40" pos:end="47:44">farg2</name><operator pos:start="47:45" pos:end="47:45">.</operator><name pos:start="47:46" pos:end="47:46">d</name></name></expr></argument>, <argument pos:start="47:49" pos:end="47:63"><expr pos:start="47:49" pos:end="47:63"><operator pos:start="47:49" pos:end="47:49">&amp;</operator><name pos:start="47:50" pos:end="47:63"><name pos:start="47:50" pos:end="47:52">env</name><operator pos:start="47:53" pos:end="47:54">-&gt;</operator><name pos:start="47:55" pos:end="47:63">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:else pos:start="51:1" pos:end="51:5">#<cpp:directive pos:start="51:2" pos:end="51:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="53:5" pos:end="56:0"><expr pos:start="53:5" pos:end="53:60"><name pos:start="53:5" pos:end="53:11"><name pos:start="53:5" pos:end="53:9">farg1</name><operator pos:start="53:10" pos:end="53:10">.</operator><name pos:start="53:11" pos:end="53:11">d</name></name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:60"><name pos:start="53:15" pos:end="53:25">float64_div</name><argument_list pos:start="53:26" pos:end="53:60">(<argument pos:start="53:27" pos:end="53:33"><expr pos:start="53:27" pos:end="53:33"><name pos:start="53:27" pos:end="53:33"><name pos:start="53:27" pos:end="53:31">farg1</name><operator pos:start="53:32" pos:end="53:32">.</operator><name pos:start="53:33" pos:end="53:33">d</name></name></expr></argument>, <argument pos:start="53:36" pos:end="53:42"><expr pos:start="53:36" pos:end="53:42"><name pos:start="53:36" pos:end="53:42"><name pos:start="53:36" pos:end="53:40">farg2</name><operator pos:start="53:41" pos:end="53:41">.</operator><name pos:start="53:42" pos:end="53:42">d</name></name></expr></argument>, <argument pos:start="53:45" pos:end="53:59"><expr pos:start="53:45" pos:end="53:59"><operator pos:start="53:45" pos:end="53:45">&amp;</operator><name pos:start="53:46" pos:end="53:59"><name pos:start="53:46" pos:end="53:48">env</name><operator pos:start="53:49" pos:end="53:50">-&gt;</operator><name pos:start="53:51" pos:end="53:59">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

    <return pos:start="57:5" pos:end="57:20">return <expr pos:start="57:12" pos:end="57:19"><name pos:start="57:12" pos:end="57:19"><name pos:start="57:12" pos:end="57:16">farg1</name><operator pos:start="57:17" pos:end="57:17">.</operator><name pos:start="57:18" pos:end="57:19">ll</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
