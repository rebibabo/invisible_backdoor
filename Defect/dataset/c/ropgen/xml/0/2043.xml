<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2043.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">vmdk_parse_extents</name><parameter_list pos:start="1:30" pos:end="3:71">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:40">char</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">desc</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:68"><decl pos:start="1:49" pos:end="1:68"><type pos:start="1:49" pos:end="1:68"><name pos:start="1:49" pos:end="1:64">BlockDriverState</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">bs</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:56"><decl pos:start="3:31" pos:end="3:56"><type pos:start="3:31" pos:end="3:56"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:40">char</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:56">desc_file_path</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:70"><decl pos:start="3:59" pos:end="3:70"><type pos:start="3:59" pos:end="3:70"><name pos:start="3:59" pos:end="3:63">Error</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier><modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:70">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="175:1">{<block_content pos:start="7:5" pos:end="173:13">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:19"><name pos:start="9:10" pos:end="9:15">access</name><index pos:start="9:16" pos:end="9:19">[<expr pos:start="9:17" pos:end="9:18"><literal type="number" pos:start="9:17" pos:end="9:18">11</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:17"><name pos:start="11:10" pos:end="11:13">type</name><index pos:start="11:14" pos:end="11:17">[<expr pos:start="11:15" pos:end="11:16"><literal type="number" pos:start="11:15" pos:end="11:16">11</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:19"><name pos:start="13:10" pos:end="13:14">fname</name><index pos:start="13:15" pos:end="13:19">[<expr pos:start="13:16" pos:end="13:18"><literal type="number" pos:start="13:16" pos:end="13:18">512</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:17">p</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">desc</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:19">sectors</name> <init pos:start="17:21" pos:end="17:23">= <expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int64_t</name></type> <name pos:start="19:13" pos:end="19:23">flat_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">char</name></type> <name pos:start="21:10" pos:end="21:30"><name pos:start="21:10" pos:end="21:20">extent_path</name><index pos:start="21:21" pos:end="21:30">[<expr pos:start="21:22" pos:end="21:29"><name pos:start="21:22" pos:end="21:29">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:34"><decl pos:start="23:5" pos:end="23:33"><type pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:20">BlockDriverState</name> <modifier pos:start="23:22" pos:end="23:22">*</modifier></type><name pos:start="23:23" pos:end="23:33">extent_file</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:34"><decl pos:start="25:5" pos:end="25:33"><type pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:17">BDRVVmdkState</name> <modifier pos:start="25:19" pos:end="25:19">*</modifier></type><name pos:start="25:20" pos:end="25:20">s</name> <init pos:start="25:22" pos:end="25:33">= <expr pos:start="25:24" pos:end="25:33"><name pos:start="25:24" pos:end="25:33"><name pos:start="25:24" pos:end="25:25">bs</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:23"><decl pos:start="27:5" pos:end="27:22"><type pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:14">VmdkExtent</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:22">extent</name></decl>;</decl_stmt>



    <while pos:start="31:5" pos:end="171:5">while <condition pos:start="31:11" pos:end="31:14">(<expr pos:start="31:12" pos:end="31:13"><operator pos:start="31:12" pos:end="31:12">*</operator><name pos:start="31:13" pos:end="31:13">p</name></expr>)</condition> <block pos:start="31:16" pos:end="171:5">{<block_content pos:start="43:9" pos:end="169:9">

        <comment type="block" pos:start="33:9" pos:end="41:11">/* parse extent line:

         * RW [size in sectors] FLAT "file-name.vmdk" OFFSET

         * or

         * RW [size in sectors] SPARSE "file-name.vmdk"

         */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:25"><expr pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:19">flat_offset</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <operator pos:start="43:23" pos:end="43:23">-</operator><literal type="number" pos:start="43:24" pos:end="43:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="47:61"><expr pos:start="45:9" pos:end="47:60"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="47:60"><name pos:start="45:15" pos:end="45:20">sscanf</name><argument_list pos:start="45:21" pos:end="47:60">(<argument pos:start="45:22" pos:end="45:22"><expr pos:start="45:22" pos:end="45:22"><name pos:start="45:22" pos:end="45:22">p</name></expr></argument>, <argument pos:start="45:25" pos:end="45:74"><expr pos:start="45:25" pos:end="45:74"><literal type="string" pos:start="45:25" pos:end="45:32">"%10s %"</literal> <name pos:start="45:34" pos:end="45:39">SCNd64</name> <literal type="string" pos:start="45:41" pos:end="45:67">" %10s \"%511[^\n\r\"]\" %"</literal> <name pos:start="45:69" pos:end="45:74">SCNd64</name></expr></argument>,

                <argument pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:22">access</name></expr></argument>, <argument pos:start="47:25" pos:end="47:32"><expr pos:start="47:25" pos:end="47:32"><operator pos:start="47:25" pos:end="47:25">&amp;</operator><name pos:start="47:26" pos:end="47:32">sectors</name></expr></argument>, <argument pos:start="47:35" pos:end="47:38"><expr pos:start="47:35" pos:end="47:38"><name pos:start="47:35" pos:end="47:38">type</name></expr></argument>, <argument pos:start="47:41" pos:end="47:45"><expr pos:start="47:41" pos:end="47:45"><name pos:start="47:41" pos:end="47:45">fname</name></expr></argument>, <argument pos:start="47:48" pos:end="47:59"><expr pos:start="47:48" pos:end="47:59"><operator pos:start="47:48" pos:end="47:48">&amp;</operator><name pos:start="47:49" pos:end="47:59">flat_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="73:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:44">(<expr pos:start="49:13" pos:end="49:43"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:17">&lt;</operator> <literal type="number" pos:start="49:19" pos:end="49:19">4</literal> <operator pos:start="49:21" pos:end="49:22">||</operator> <call pos:start="49:24" pos:end="49:43"><name pos:start="49:24" pos:end="49:29">strcmp</name><argument_list pos:start="49:30" pos:end="49:43">(<argument pos:start="49:31" pos:end="49:36"><expr pos:start="49:31" pos:end="49:36"><name pos:start="49:31" pos:end="49:36">access</name></expr></argument>, <argument pos:start="49:39" pos:end="49:42"><expr pos:start="49:39" pos:end="49:42"><literal type="string" pos:start="49:39" pos:end="49:42">"RW"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:46" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:27">

            <goto pos:start="51:13" pos:end="51:27">goto <name pos:start="51:18" pos:end="51:26">next_line</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="53:11" pos:end="63:9">else if <condition pos:start="53:19" pos:end="53:41">(<expr pos:start="53:20" pos:end="53:40"><operator pos:start="53:20" pos:end="53:20">!</operator><call pos:start="53:21" pos:end="53:40"><name pos:start="53:21" pos:end="53:26">strcmp</name><argument_list pos:start="53:27" pos:end="53:40">(<argument pos:start="53:28" pos:end="53:31"><expr pos:start="53:28" pos:end="53:31"><name pos:start="53:28" pos:end="53:31">type</name></expr></argument>, <argument pos:start="53:34" pos:end="53:39"><expr pos:start="53:34" pos:end="53:39"><literal type="string" pos:start="53:34" pos:end="53:39">"FLAT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:43" pos:end="63:9">{<block_content pos:start="55:13" pos:end="61:13">

            <if_stmt pos:start="55:13" pos:end="61:13"><if pos:start="55:13" pos:end="61:13">if <condition pos:start="55:16" pos:end="55:44">(<expr pos:start="55:17" pos:end="55:43"><name pos:start="55:17" pos:end="55:19">ret</name> <operator pos:start="55:21" pos:end="55:22">!=</operator> <literal type="number" pos:start="55:24" pos:end="55:24">5</literal> <operator pos:start="55:26" pos:end="55:27">||</operator> <name pos:start="55:29" pos:end="55:39">flat_offset</name> <operator pos:start="55:41" pos:end="55:41">&lt;</operator> <literal type="number" pos:start="55:43" pos:end="55:43">0</literal></expr>)</condition> <block pos:start="55:46" pos:end="61:13">{<block_content pos:start="57:17" pos:end="59:31">

                <expr_stmt pos:start="57:17" pos:end="57:66"><expr pos:start="57:17" pos:end="57:65"><call pos:start="57:17" pos:end="57:65"><name pos:start="57:17" pos:end="57:26">error_setg</name><argument_list pos:start="57:27" pos:end="57:65">(<argument pos:start="57:28" pos:end="57:31"><expr pos:start="57:28" pos:end="57:31"><name pos:start="57:28" pos:end="57:31">errp</name></expr></argument>, <argument pos:start="57:34" pos:end="57:61"><expr pos:start="57:34" pos:end="57:61"><literal type="string" pos:start="57:34" pos:end="57:61">"Invalid extent lines: \n%s"</literal></expr></argument>, <argument pos:start="57:64" pos:end="57:64"><expr pos:start="57:64" pos:end="57:64"><name pos:start="57:64" pos:end="57:64">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="59:17" pos:end="59:31">return <expr pos:start="59:24" pos:end="59:30"><operator pos:start="59:24" pos:end="59:24">-</operator><name pos:start="59:25" pos:end="59:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="63:11" pos:end="67:9">else if <condition pos:start="63:19" pos:end="63:41">(<expr pos:start="63:20" pos:end="63:40"><operator pos:start="63:20" pos:end="63:20">!</operator><call pos:start="63:21" pos:end="63:40"><name pos:start="63:21" pos:end="63:26">strcmp</name><argument_list pos:start="63:27" pos:end="63:40">(<argument pos:start="63:28" pos:end="63:31"><expr pos:start="63:28" pos:end="63:31"><name pos:start="63:28" pos:end="63:31">type</name></expr></argument>, <argument pos:start="63:34" pos:end="63:39"><expr pos:start="63:34" pos:end="63:39"><literal type="string" pos:start="63:34" pos:end="63:39">"VMFS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:43" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:28">

            <expr_stmt pos:start="65:13" pos:end="65:28"><expr pos:start="65:13" pos:end="65:27"><name pos:start="65:13" pos:end="65:23">flat_offset</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <literal type="number" pos:start="65:27" pos:end="65:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="67:11" pos:end="73:9">else if <condition pos:start="67:19" pos:end="67:28">(<expr pos:start="67:20" pos:end="67:27"><name pos:start="67:20" pos:end="67:22">ret</name> <operator pos:start="67:24" pos:end="67:25">!=</operator> <literal type="number" pos:start="67:27" pos:end="67:27">4</literal></expr>)</condition> <block pos:start="67:30" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:27">

            <expr_stmt pos:start="69:13" pos:end="69:62"><expr pos:start="69:13" pos:end="69:61"><call pos:start="69:13" pos:end="69:61"><name pos:start="69:13" pos:end="69:22">error_setg</name><argument_list pos:start="69:23" pos:end="69:61">(<argument pos:start="69:24" pos:end="69:27"><expr pos:start="69:24" pos:end="69:27"><name pos:start="69:24" pos:end="69:27">errp</name></expr></argument>, <argument pos:start="69:30" pos:end="69:57"><expr pos:start="69:30" pos:end="69:57"><literal type="string" pos:start="69:30" pos:end="69:57">"Invalid extent lines: \n%s"</literal></expr></argument>, <argument pos:start="69:60" pos:end="69:60"><expr pos:start="69:60" pos:end="69:60"><name pos:start="69:60" pos:end="69:60">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:27">return <expr pos:start="71:20" pos:end="71:26"><operator pos:start="71:20" pos:end="71:20">-</operator><name pos:start="71:21" pos:end="71:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="87:9">if <condition pos:start="77:12" pos:end="83:35">(<expr pos:start="77:13" pos:end="83:34"><name pos:start="77:13" pos:end="77:19">sectors</name> <operator pos:start="77:21" pos:end="77:22">&lt;=</operator> <literal type="number" pos:start="77:24" pos:end="77:24">0</literal> <operator pos:start="77:26" pos:end="77:27">||</operator>

            <operator pos:start="79:13" pos:end="79:13">(</operator><call pos:start="79:14" pos:end="79:33"><name pos:start="79:14" pos:end="79:19">strcmp</name><argument_list pos:start="79:20" pos:end="79:33">(<argument pos:start="79:21" pos:end="79:24"><expr pos:start="79:21" pos:end="79:24"><name pos:start="79:21" pos:end="79:24">type</name></expr></argument>, <argument pos:start="79:27" pos:end="79:32"><expr pos:start="79:27" pos:end="79:32"><literal type="string" pos:start="79:27" pos:end="79:32">"FLAT"</literal></expr></argument>)</argument_list></call> <operator pos:start="79:35" pos:end="79:36">&amp;&amp;</operator> <call pos:start="79:38" pos:end="79:59"><name pos:start="79:38" pos:end="79:43">strcmp</name><argument_list pos:start="79:44" pos:end="79:59">(<argument pos:start="79:45" pos:end="79:48"><expr pos:start="79:45" pos:end="79:48"><name pos:start="79:45" pos:end="79:48">type</name></expr></argument>, <argument pos:start="79:51" pos:end="79:58"><expr pos:start="79:51" pos:end="79:58"><literal type="string" pos:start="79:51" pos:end="79:58">"SPARSE"</literal></expr></argument>)</argument_list></call> <operator pos:start="79:61" pos:end="79:62">&amp;&amp;</operator>

             <call pos:start="81:14" pos:end="81:33"><name pos:start="81:14" pos:end="81:19">strcmp</name><argument_list pos:start="81:20" pos:end="81:33">(<argument pos:start="81:21" pos:end="81:24"><expr pos:start="81:21" pos:end="81:24"><name pos:start="81:21" pos:end="81:24">type</name></expr></argument>, <argument pos:start="81:27" pos:end="81:32"><expr pos:start="81:27" pos:end="81:32"><literal type="string" pos:start="81:27" pos:end="81:32">"VMFS"</literal></expr></argument>)</argument_list></call> <operator pos:start="81:35" pos:end="81:36">&amp;&amp;</operator> <call pos:start="81:38" pos:end="81:63"><name pos:start="81:38" pos:end="81:43">strcmp</name><argument_list pos:start="81:44" pos:end="81:63">(<argument pos:start="81:45" pos:end="81:48"><expr pos:start="81:45" pos:end="81:48"><name pos:start="81:45" pos:end="81:48">type</name></expr></argument>, <argument pos:start="81:51" pos:end="81:62"><expr pos:start="81:51" pos:end="81:62"><literal type="string" pos:start="81:51" pos:end="81:62">"VMFSSPARSE"</literal></expr></argument>)</argument_list></call><operator pos:start="81:64" pos:end="81:64">)</operator> <operator pos:start="81:66" pos:end="81:67">||</operator>

            <operator pos:start="83:13" pos:end="83:13">(</operator><call pos:start="83:14" pos:end="83:33"><name pos:start="83:14" pos:end="83:19">strcmp</name><argument_list pos:start="83:20" pos:end="83:33">(<argument pos:start="83:21" pos:end="83:26"><expr pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:26">access</name></expr></argument>, <argument pos:start="83:29" pos:end="83:32"><expr pos:start="83:29" pos:end="83:32"><literal type="string" pos:start="83:29" pos:end="83:32">"RW"</literal></expr></argument>)</argument_list></call><operator pos:start="83:34" pos:end="83:34">)</operator></expr>)</condition> <block pos:start="83:37" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:27">

            <goto pos:start="85:13" pos:end="85:27">goto <name pos:start="85:18" pos:end="85:26">next_line</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="91:9" pos:end="93:39"><expr pos:start="91:9" pos:end="93:38"><call pos:start="91:9" pos:end="93:38"><name pos:start="91:9" pos:end="91:20">path_combine</name><argument_list pos:start="91:21" pos:end="93:38">(<argument pos:start="91:22" pos:end="91:32"><expr pos:start="91:22" pos:end="91:32"><name pos:start="91:22" pos:end="91:32">extent_path</name></expr></argument>, <argument pos:start="91:35" pos:end="91:53"><expr pos:start="91:35" pos:end="91:53"><sizeof pos:start="91:35" pos:end="91:53">sizeof<argument_list pos:start="91:41" pos:end="91:53">(<argument pos:start="91:42" pos:end="91:52"><expr pos:start="91:42" pos:end="91:52"><name pos:start="91:42" pos:end="91:52">extent_path</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                <argument pos:start="93:17" pos:end="93:30"><expr pos:start="93:17" pos:end="93:30"><name pos:start="93:17" pos:end="93:30">desc_file_path</name></expr></argument>, <argument pos:start="93:33" pos:end="93:37"><expr pos:start="93:33" pos:end="93:37"><name pos:start="93:33" pos:end="93:37">fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="97:35"><expr pos:start="95:9" pos:end="97:34"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="97:34"><name pos:start="95:15" pos:end="95:28">bdrv_file_open</name><argument_list pos:start="95:29" pos:end="97:34">(<argument pos:start="95:30" pos:end="95:41"><expr pos:start="95:30" pos:end="95:41"><operator pos:start="95:30" pos:end="95:30">&amp;</operator><name pos:start="95:31" pos:end="95:41">extent_file</name></expr></argument>, <argument pos:start="95:44" pos:end="95:54"><expr pos:start="95:44" pos:end="95:54"><name pos:start="95:44" pos:end="95:54">extent_path</name></expr></argument>, <argument pos:start="95:57" pos:end="95:60"><expr pos:start="95:57" pos:end="95:60"><name pos:start="95:57" pos:end="95:60">NULL</name></expr></argument>, <argument pos:start="95:63" pos:end="95:76"><expr pos:start="95:63" pos:end="95:76"><name pos:start="95:63" pos:end="95:76"><name pos:start="95:63" pos:end="95:64">bs</name><operator pos:start="95:65" pos:end="95:66">-&gt;</operator><name pos:start="95:67" pos:end="95:76">open_flags</name></name></expr></argument>,

                             <argument pos:start="97:30" pos:end="97:33"><expr pos:start="97:30" pos:end="97:33"><name pos:start="97:30" pos:end="97:33">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:16">(<expr pos:start="99:13" pos:end="99:15"><name pos:start="99:13" pos:end="99:15">ret</name></expr>)</condition> <block pos:start="99:18" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:23">

            <return pos:start="101:13" pos:end="101:23">return <expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="107:9" pos:end="107:35">/* save to extents array */</comment>

        <if_stmt pos:start="109:9" pos:end="149:9"><if pos:start="109:9" pos:end="127:9">if <condition pos:start="109:12" pos:end="109:59">(<expr pos:start="109:13" pos:end="109:58"><operator pos:start="109:13" pos:end="109:13">!</operator><call pos:start="109:14" pos:end="109:33"><name pos:start="109:14" pos:end="109:19">strcmp</name><argument_list pos:start="109:20" pos:end="109:33">(<argument pos:start="109:21" pos:end="109:24"><expr pos:start="109:21" pos:end="109:24"><name pos:start="109:21" pos:end="109:24">type</name></expr></argument>, <argument pos:start="109:27" pos:end="109:32"><expr pos:start="109:27" pos:end="109:32"><literal type="string" pos:start="109:27" pos:end="109:32">"FLAT"</literal></expr></argument>)</argument_list></call> <operator pos:start="109:35" pos:end="109:36">||</operator> <operator pos:start="109:38" pos:end="109:38">!</operator><call pos:start="109:39" pos:end="109:58"><name pos:start="109:39" pos:end="109:44">strcmp</name><argument_list pos:start="109:45" pos:end="109:58">(<argument pos:start="109:46" pos:end="109:49"><expr pos:start="109:46" pos:end="109:49"><name pos:start="109:46" pos:end="109:49">type</name></expr></argument>, <argument pos:start="109:52" pos:end="109:57"><expr pos:start="109:52" pos:end="109:57"><literal type="string" pos:start="109:52" pos:end="109:57">"VMFS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:61" pos:end="127:9">{<block_content pos:start="115:13" pos:end="125:57">

            <comment type="block" pos:start="111:13" pos:end="111:29">/* FLAT extent */</comment>



            <expr_stmt pos:start="115:13" pos:end="117:58"><expr pos:start="115:13" pos:end="117:57"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <call pos:start="115:19" pos:end="117:57"><name pos:start="115:19" pos:end="115:33">vmdk_add_extent</name><argument_list pos:start="115:34" pos:end="117:57">(<argument pos:start="115:35" pos:end="115:36"><expr pos:start="115:35" pos:end="115:36"><name pos:start="115:35" pos:end="115:36">bs</name></expr></argument>, <argument pos:start="115:39" pos:end="115:49"><expr pos:start="115:39" pos:end="115:49"><name pos:start="115:39" pos:end="115:49">extent_file</name></expr></argument>, <argument pos:start="115:52" pos:end="115:55"><expr pos:start="115:52" pos:end="115:55"><name pos:start="115:52" pos:end="115:55">true</name></expr></argument>, <argument pos:start="115:58" pos:end="115:64"><expr pos:start="115:58" pos:end="115:64"><name pos:start="115:58" pos:end="115:64">sectors</name></expr></argument>,

                            <argument pos:start="117:29" pos:end="117:29"><expr pos:start="117:29" pos:end="117:29"><literal type="number" pos:start="117:29" pos:end="117:29">0</literal></expr></argument>, <argument pos:start="117:32" pos:end="117:32"><expr pos:start="117:32" pos:end="117:32"><literal type="number" pos:start="117:32" pos:end="117:32">0</literal></expr></argument>, <argument pos:start="117:35" pos:end="117:35"><expr pos:start="117:35" pos:end="117:35"><literal type="number" pos:start="117:35" pos:end="117:35">0</literal></expr></argument>, <argument pos:start="117:38" pos:end="117:38"><expr pos:start="117:38" pos:end="117:38"><literal type="number" pos:start="117:38" pos:end="117:38">0</literal></expr></argument>, <argument pos:start="117:41" pos:end="117:41"><expr pos:start="117:41" pos:end="117:41"><literal type="number" pos:start="117:41" pos:end="117:41">0</literal></expr></argument>, <argument pos:start="117:44" pos:end="117:50"><expr pos:start="117:44" pos:end="117:50"><operator pos:start="117:44" pos:end="117:44">&amp;</operator><name pos:start="117:45" pos:end="117:50">extent</name></expr></argument>, <argument pos:start="117:53" pos:end="117:56"><expr pos:start="117:53" pos:end="117:56"><name pos:start="117:53" pos:end="117:56">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="119:13" pos:end="123:13"><if pos:start="119:13" pos:end="123:13">if <condition pos:start="119:16" pos:end="119:24">(<expr pos:start="119:17" pos:end="119:23"><name pos:start="119:17" pos:end="119:19">ret</name> <operator pos:start="119:21" pos:end="119:21">&lt;</operator> <literal type="number" pos:start="119:23" pos:end="119:23">0</literal></expr>)</condition> <block pos:start="119:26" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:27">

                <return pos:start="121:17" pos:end="121:27">return <expr pos:start="121:24" pos:end="121:26"><name pos:start="121:24" pos:end="121:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:57"><expr pos:start="125:13" pos:end="125:56"><name pos:start="125:13" pos:end="125:37"><name pos:start="125:13" pos:end="125:18">extent</name><operator pos:start="125:19" pos:end="125:20">-&gt;</operator><name pos:start="125:21" pos:end="125:37">flat_start_offset</name></name> <operator pos:start="125:39" pos:end="125:39">=</operator> <name pos:start="125:41" pos:end="125:51">flat_offset</name> <operator pos:start="125:53" pos:end="125:54">&lt;&lt;</operator> <literal type="number" pos:start="125:56" pos:end="125:56">9</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="127:11" pos:end="143:9">else if <condition pos:start="127:19" pos:end="127:74">(<expr pos:start="127:20" pos:end="127:73"><operator pos:start="127:20" pos:end="127:20">!</operator><call pos:start="127:21" pos:end="127:42"><name pos:start="127:21" pos:end="127:26">strcmp</name><argument_list pos:start="127:27" pos:end="127:42">(<argument pos:start="127:28" pos:end="127:31"><expr pos:start="127:28" pos:end="127:31"><name pos:start="127:28" pos:end="127:31">type</name></expr></argument>, <argument pos:start="127:34" pos:end="127:41"><expr pos:start="127:34" pos:end="127:41"><literal type="string" pos:start="127:34" pos:end="127:41">"SPARSE"</literal></expr></argument>)</argument_list></call> <operator pos:start="127:44" pos:end="127:45">||</operator> <operator pos:start="127:47" pos:end="127:47">!</operator><call pos:start="127:48" pos:end="127:73"><name pos:start="127:48" pos:end="127:53">strcmp</name><argument_list pos:start="127:54" pos:end="127:73">(<argument pos:start="127:55" pos:end="127:58"><expr pos:start="127:55" pos:end="127:58"><name pos:start="127:55" pos:end="127:58">type</name></expr></argument>, <argument pos:start="127:61" pos:end="127:72"><expr pos:start="127:61" pos:end="127:72"><literal type="string" pos:start="127:61" pos:end="127:72">"VMFSSPARSE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:76" pos:end="143:9">{<block_content pos:start="131:13" pos:end="141:53">

            <comment type="block" pos:start="129:13" pos:end="129:80">/* SPARSE extent and VMFSSPARSE extent are both "COWD" sparse file*/</comment>

            <expr_stmt pos:start="131:13" pos:end="131:74"><expr pos:start="131:13" pos:end="131:73"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <call pos:start="131:19" pos:end="131:73"><name pos:start="131:19" pos:end="131:34">vmdk_open_sparse</name><argument_list pos:start="131:35" pos:end="131:73">(<argument pos:start="131:36" pos:end="131:37"><expr pos:start="131:36" pos:end="131:37"><name pos:start="131:36" pos:end="131:37">bs</name></expr></argument>, <argument pos:start="131:40" pos:end="131:50"><expr pos:start="131:40" pos:end="131:50"><name pos:start="131:40" pos:end="131:50">extent_file</name></expr></argument>, <argument pos:start="131:53" pos:end="131:66"><expr pos:start="131:53" pos:end="131:66"><name pos:start="131:53" pos:end="131:66"><name pos:start="131:53" pos:end="131:54">bs</name><operator pos:start="131:55" pos:end="131:56">-&gt;</operator><name pos:start="131:57" pos:end="131:66">open_flags</name></name></expr></argument>, <argument pos:start="131:69" pos:end="131:72"><expr pos:start="131:69" pos:end="131:72"><name pos:start="131:69" pos:end="131:72">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="139:13"><if pos:start="133:13" pos:end="139:13">if <condition pos:start="133:16" pos:end="133:20">(<expr pos:start="133:17" pos:end="133:19"><name pos:start="133:17" pos:end="133:19">ret</name></expr>)</condition> <block pos:start="133:22" pos:end="139:13">{<block_content pos:start="135:17" pos:end="137:27">

                <expr_stmt pos:start="135:17" pos:end="135:40"><expr pos:start="135:17" pos:end="135:39"><call pos:start="135:17" pos:end="135:39"><name pos:start="135:17" pos:end="135:26">bdrv_unref</name><argument_list pos:start="135:27" pos:end="135:39">(<argument pos:start="135:28" pos:end="135:38"><expr pos:start="135:28" pos:end="135:38"><name pos:start="135:28" pos:end="135:38">extent_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="137:17" pos:end="137:27">return <expr pos:start="137:24" pos:end="137:26"><name pos:start="137:24" pos:end="137:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:53"><expr pos:start="141:13" pos:end="141:52"><name pos:start="141:13" pos:end="141:18">extent</name> <operator pos:start="141:20" pos:end="141:20">=</operator> <operator pos:start="141:22" pos:end="141:22">&amp;</operator><name pos:start="141:23" pos:end="141:52"><name pos:start="141:23" pos:end="141:23">s</name><operator pos:start="141:24" pos:end="141:25">-&gt;</operator><name pos:start="141:26" pos:end="141:32">extents</name><index pos:start="141:33" pos:end="141:52">[<expr pos:start="141:34" pos:end="141:51"><name pos:start="141:34" pos:end="141:47"><name pos:start="141:34" pos:end="141:34">s</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:47">num_extents</name></name> <operator pos:start="141:49" pos:end="141:49">-</operator> <literal type="number" pos:start="141:51" pos:end="141:51">1</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="143:11" pos:end="149:9">else <block pos:start="143:16" pos:end="149:9">{<block_content pos:start="145:13" pos:end="147:28">

            <expr_stmt pos:start="145:13" pos:end="145:67"><expr pos:start="145:13" pos:end="145:66"><call pos:start="145:13" pos:end="145:66"><name pos:start="145:13" pos:end="145:22">error_setg</name><argument_list pos:start="145:23" pos:end="145:66">(<argument pos:start="145:24" pos:end="145:27"><expr pos:start="145:24" pos:end="145:27"><name pos:start="145:24" pos:end="145:27">errp</name></expr></argument>, <argument pos:start="145:30" pos:end="145:59"><expr pos:start="145:30" pos:end="145:59"><literal type="string" pos:start="145:30" pos:end="145:59">"Unsupported extent type '%s'"</literal></expr></argument>, <argument pos:start="145:62" pos:end="145:65"><expr pos:start="145:62" pos:end="145:65"><name pos:start="145:62" pos:end="145:65">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="147:13" pos:end="147:28">return <expr pos:start="147:20" pos:end="147:27"><operator pos:start="147:20" pos:end="147:20">-</operator><name pos:start="147:21" pos:end="147:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:38"><expr pos:start="151:9" pos:end="151:37"><name pos:start="151:9" pos:end="151:20"><name pos:start="151:9" pos:end="151:14">extent</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:20">type</name></name> <operator pos:start="151:22" pos:end="151:22">=</operator> <call pos:start="151:24" pos:end="151:37"><name pos:start="151:24" pos:end="151:31">g_strdup</name><argument_list pos:start="151:32" pos:end="151:37">(<argument pos:start="151:33" pos:end="151:36"><expr pos:start="151:33" pos:end="151:36"><name pos:start="151:33" pos:end="151:36">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="153:1" pos:end="153:10"><name pos:start="153:1" pos:end="153:9">next_line</name>:</label>

        <comment type="block" pos:start="155:9" pos:end="155:31">/* move to next line */</comment>

        <while pos:start="157:9" pos:end="169:9">while <condition pos:start="157:15" pos:end="157:18">(<expr pos:start="157:16" pos:end="157:17"><operator pos:start="157:16" pos:end="157:16">*</operator><name pos:start="157:17" pos:end="157:17">p</name></expr>)</condition> <block pos:start="157:20" pos:end="169:9">{<block_content pos:start="159:13" pos:end="167:16">

            <if_stmt pos:start="159:13" pos:end="165:13"><if pos:start="159:13" pos:end="165:13">if <condition pos:start="159:16" pos:end="159:27">(<expr pos:start="159:17" pos:end="159:26"><operator pos:start="159:17" pos:end="159:17">*</operator><name pos:start="159:18" pos:end="159:18">p</name> <operator pos:start="159:20" pos:end="159:21">==</operator> <literal type="char" pos:start="159:23" pos:end="159:26">'\n'</literal></expr>)</condition> <block pos:start="159:29" pos:end="165:13">{<block_content pos:start="161:17" pos:end="163:22">

                <expr_stmt pos:start="161:17" pos:end="161:20"><expr pos:start="161:17" pos:end="161:19"><name pos:start="161:17" pos:end="161:17">p</name><operator pos:start="161:18" pos:end="161:19">++</operator></expr>;</expr_stmt>

                <break pos:start="163:17" pos:end="163:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:16"><expr pos:start="167:13" pos:end="167:15"><name pos:start="167:13" pos:end="167:13">p</name><operator pos:start="167:14" pos:end="167:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></while>

    <return pos:start="173:5" pos:end="173:13">return <expr pos:start="173:12" pos:end="173:12"><literal type="number" pos:start="173:12" pos:end="173:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
