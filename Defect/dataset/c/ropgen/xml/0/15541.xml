<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15541.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">imx_enet_do_tx</name><parameter_list pos:start="1:27" pos:end="1:42">(<parameter pos:start="1:28" pos:end="1:41"><decl pos:start="1:28" pos:end="1:41"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:38">IMXFECState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="139:1">{<block_content pos:start="5:5" pos:end="137:22">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:18">frame_size</name> <init pos:start="5:20" pos:end="5:22">= <expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:38"><name pos:start="7:13" pos:end="7:17">frame</name><index pos:start="7:18" pos:end="7:38">[<expr pos:start="7:19" pos:end="7:37"><name pos:start="7:19" pos:end="7:37">ENET_MAX_FRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">ptr</name> <init pos:start="9:18" pos:end="9:24">= <expr pos:start="9:20" pos:end="9:24"><name pos:start="9:20" pos:end="9:24">frame</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">addr</name> <init pos:start="11:19" pos:end="11:36">= <expr pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:21">s</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:36">tx_descriptor</name></name></expr></init></decl>;</decl_stmt>



    <while pos:start="15:5" pos:end="129:5">while <condition pos:start="15:11" pos:end="15:13">(<expr pos:start="15:12" pos:end="15:12"><literal type="number" pos:start="15:12" pos:end="15:12">1</literal></expr>)</condition> <block pos:start="15:15" pos:end="129:5">{<block_content pos:start="17:9" pos:end="127:9">

        <decl_stmt pos:start="17:9" pos:end="17:26"><decl pos:start="17:9" pos:end="17:25"><type pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:22">IMXENETBufDesc</name></type> <name pos:start="17:24" pos:end="17:25">bd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:16"><decl pos:start="19:9" pos:end="19:15"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:15">len</name></decl>;</decl_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:36"><expr pos:start="23:9" pos:end="23:35"><call pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:24">imx_enet_read_bd</name><argument_list pos:start="23:25" pos:end="23:35">(<argument pos:start="23:26" pos:end="23:28"><expr pos:start="23:26" pos:end="23:28"><operator pos:start="23:26" pos:end="23:26">&amp;</operator><name pos:start="23:27" pos:end="23:28">bd</name></expr></argument>, <argument pos:start="23:31" pos:end="23:34"><expr pos:start="23:31" pos:end="23:34"><name pos:start="23:31" pos:end="23:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="29:41"><expr pos:start="25:9" pos:end="29:40"><call pos:start="25:9" pos:end="29:40"><name pos:start="25:9" pos:end="25:18">FEC_PRINTF</name><argument_list pos:start="25:19" pos:end="29:40">(<argument pos:start="25:20" pos:end="27:34"><expr pos:start="25:20" pos:end="27:34"><literal type="string" pos:start="25:20" pos:end="25:70">"tx_bd %x flags %04x len %d data %08x option %04x "</literal>

                   <literal type="string" pos:start="27:20" pos:end="27:34">"status %04x\n"</literal></expr></argument>, <argument pos:start="27:37" pos:end="27:40"><expr pos:start="27:37" pos:end="27:40"><name pos:start="27:37" pos:end="27:40">addr</name></expr></argument>, <argument pos:start="27:43" pos:end="27:50"><expr pos:start="27:43" pos:end="27:50"><name pos:start="27:43" pos:end="27:50"><name pos:start="27:43" pos:end="27:44">bd</name><operator pos:start="27:45" pos:end="27:45">.</operator><name pos:start="27:46" pos:end="27:50">flags</name></name></expr></argument>, <argument pos:start="27:53" pos:end="27:61"><expr pos:start="27:53" pos:end="27:61"><name pos:start="27:53" pos:end="27:61"><name pos:start="27:53" pos:end="27:54">bd</name><operator pos:start="27:55" pos:end="27:55">.</operator><name pos:start="27:56" pos:end="27:61">length</name></name></expr></argument>, <argument pos:start="27:64" pos:end="27:70"><expr pos:start="27:64" pos:end="27:70"><name pos:start="27:64" pos:end="27:70"><name pos:start="27:64" pos:end="27:65">bd</name><operator pos:start="27:66" pos:end="27:66">.</operator><name pos:start="27:67" pos:end="27:70">data</name></name></expr></argument>,

                   <argument pos:start="29:20" pos:end="29:28"><expr pos:start="29:20" pos:end="29:28"><name pos:start="29:20" pos:end="29:28"><name pos:start="29:20" pos:end="29:21">bd</name><operator pos:start="29:22" pos:end="29:22">.</operator><name pos:start="29:23" pos:end="29:28">option</name></name></expr></argument>, <argument pos:start="29:31" pos:end="29:39"><expr pos:start="29:31" pos:end="29:39"><name pos:start="29:31" pos:end="29:39"><name pos:start="29:31" pos:end="29:32">bd</name><operator pos:start="29:33" pos:end="29:33">.</operator><name pos:start="29:34" pos:end="29:39">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:40">(<expr pos:start="31:13" pos:end="31:39"><operator pos:start="31:13" pos:end="31:13">(</operator><name pos:start="31:14" pos:end="31:21"><name pos:start="31:14" pos:end="31:15">bd</name><operator pos:start="31:16" pos:end="31:16">.</operator><name pos:start="31:17" pos:end="31:21">flags</name></name> <operator pos:start="31:23" pos:end="31:23">&amp;</operator> <name pos:start="31:25" pos:end="31:33">ENET_BD_R</name><operator pos:start="31:34" pos:end="31:34">)</operator> <operator pos:start="31:36" pos:end="31:37">==</operator> <literal type="number" pos:start="31:39" pos:end="31:39">0</literal></expr>)</condition> <block pos:start="31:42" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:18">

            <comment type="block" pos:start="33:13" pos:end="33:54">/* Run out of descriptors to transmit.  */</comment>

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:11">len</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:23"><name pos:start="39:15" pos:end="39:16">bd</name><operator pos:start="39:17" pos:end="39:17">.</operator><name pos:start="39:18" pos:end="39:23">length</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:51">(<expr pos:start="41:13" pos:end="41:50"><name pos:start="41:13" pos:end="41:22">frame_size</name> <operator pos:start="41:24" pos:end="41:24">+</operator> <name pos:start="41:26" pos:end="41:28">len</name> <operator pos:start="41:30" pos:end="41:30">&gt;</operator> <name pos:start="41:32" pos:end="41:50">ENET_MAX_FRAME_SIZE</name></expr>)</condition> <block pos:start="41:53" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:47">

            <expr_stmt pos:start="43:13" pos:end="43:51"><expr pos:start="43:13" pos:end="43:50"><name pos:start="43:13" pos:end="43:15">len</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:37">ENET_MAX_FRAME_SIZE</name> <operator pos:start="43:39" pos:end="43:39">-</operator> <name pos:start="43:41" pos:end="43:50">frame_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:47"><expr pos:start="45:13" pos:end="45:46"><name pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:19">regs</name><index pos:start="45:20" pos:end="45:29">[<expr pos:start="45:21" pos:end="45:28"><name pos:start="45:21" pos:end="45:28">ENET_EIR</name></expr>]</index></name> <operator pos:start="45:31" pos:end="45:32">|=</operator> <name pos:start="45:34" pos:end="45:46">ENET_INT_BABT</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:66"><expr pos:start="49:9" pos:end="49:65"><call pos:start="49:9" pos:end="49:65"><name pos:start="49:9" pos:end="49:23">dma_memory_read</name><argument_list pos:start="49:24" pos:end="49:65">(<argument pos:start="49:25" pos:end="49:45"><expr pos:start="49:25" pos:end="49:45"><operator pos:start="49:25" pos:end="49:25">&amp;</operator><name pos:start="49:26" pos:end="49:45">address_space_memory</name></expr></argument>, <argument pos:start="49:48" pos:end="49:54"><expr pos:start="49:48" pos:end="49:54"><name pos:start="49:48" pos:end="49:54"><name pos:start="49:48" pos:end="49:49">bd</name><operator pos:start="49:50" pos:end="49:50">.</operator><name pos:start="49:51" pos:end="49:54">data</name></name></expr></argument>, <argument pos:start="49:57" pos:end="49:59"><expr pos:start="49:57" pos:end="49:59"><name pos:start="49:57" pos:end="49:59">ptr</name></expr></argument>, <argument pos:start="49:62" pos:end="49:64"><expr pos:start="49:62" pos:end="49:64"><name pos:start="49:62" pos:end="49:64">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:19"><expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:11">ptr</name> <operator pos:start="51:13" pos:end="51:14">+=</operator> <name pos:start="51:16" pos:end="51:18">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:26"><expr pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:18">frame_size</name> <operator pos:start="53:20" pos:end="53:21">+=</operator> <name pos:start="53:23" pos:end="53:25">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="103:9"><if pos:start="55:9" pos:end="103:9">if <condition pos:start="55:12" pos:end="55:33">(<expr pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:14">bd</name><operator pos:start="55:15" pos:end="55:15">.</operator><name pos:start="55:16" pos:end="55:20">flags</name></name> <operator pos:start="55:22" pos:end="55:22">&amp;</operator> <name pos:start="55:24" pos:end="55:32">ENET_BD_L</name></expr>)</condition> <block pos:start="55:35" pos:end="103:9">{<block_content pos:start="57:13" pos:end="101:13">

            <if_stmt pos:start="57:13" pos:end="67:13"><if pos:start="57:13" pos:end="67:13">if <condition pos:start="57:16" pos:end="57:41">(<expr pos:start="57:17" pos:end="57:40"><name pos:start="57:17" pos:end="57:25"><name pos:start="57:17" pos:end="57:18">bd</name><operator pos:start="57:19" pos:end="57:19">.</operator><name pos:start="57:20" pos:end="57:25">option</name></name> <operator pos:start="57:27" pos:end="57:27">&amp;</operator> <name pos:start="57:29" pos:end="57:40">ENET_BD_PINS</name></expr>)</condition> <block pos:start="57:43" pos:end="67:13">{<block_content pos:start="59:17" pos:end="65:17">

                <decl_stmt pos:start="59:17" pos:end="59:64"><decl pos:start="59:17" pos:end="59:63"><type pos:start="59:17" pos:end="59:34"><name pos:start="59:17" pos:end="59:32"><name pos:start="59:17" pos:end="59:22">struct</name> <name pos:start="59:24" pos:end="59:32">ip_header</name></name> <modifier pos:start="59:34" pos:end="59:34">*</modifier></type><name pos:start="59:35" pos:end="59:39">ip_hd</name> <init pos:start="59:41" pos:end="59:63">= <expr pos:start="59:43" pos:end="59:63"><call pos:start="59:43" pos:end="59:63"><name pos:start="59:43" pos:end="59:56">PKT_GET_IP_HDR</name><argument_list pos:start="59:57" pos:end="59:63">(<argument pos:start="59:58" pos:end="59:62"><expr pos:start="59:58" pos:end="59:62"><name pos:start="59:58" pos:end="59:62">frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="61:17" pos:end="65:17"><if pos:start="61:17" pos:end="65:17">if <condition pos:start="61:20" pos:end="61:50">(<expr pos:start="61:21" pos:end="61:49"><call pos:start="61:21" pos:end="61:44"><name pos:start="61:21" pos:end="61:37">IP_HEADER_VERSION</name><argument_list pos:start="61:38" pos:end="61:44">(<argument pos:start="61:39" pos:end="61:43"><expr pos:start="61:39" pos:end="61:43"><name pos:start="61:39" pos:end="61:43">ip_hd</name></expr></argument>)</argument_list></call> <operator pos:start="61:46" pos:end="61:47">==</operator> <literal type="number" pos:start="61:49" pos:end="61:49">4</literal></expr>)</condition> <block pos:start="61:52" pos:end="65:17">{<block_content pos:start="63:21" pos:end="63:62">

                    <expr_stmt pos:start="63:21" pos:end="63:62"><expr pos:start="63:21" pos:end="63:61"><call pos:start="63:21" pos:end="63:61"><name pos:start="63:21" pos:end="63:42">net_checksum_calculate</name><argument_list pos:start="63:43" pos:end="63:61">(<argument pos:start="63:44" pos:end="63:48"><expr pos:start="63:44" pos:end="63:48"><name pos:start="63:44" pos:end="63:48">frame</name></expr></argument>, <argument pos:start="63:51" pos:end="63:60"><expr pos:start="63:51" pos:end="63:60"><name pos:start="63:51" pos:end="63:60">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="69:13" pos:end="87:13"><if pos:start="69:13" pos:end="87:13">if <condition pos:start="69:16" pos:end="69:41">(<expr pos:start="69:17" pos:end="69:40"><name pos:start="69:17" pos:end="69:25"><name pos:start="69:17" pos:end="69:18">bd</name><operator pos:start="69:19" pos:end="69:19">.</operator><name pos:start="69:20" pos:end="69:25">option</name></name> <operator pos:start="69:27" pos:end="69:27">&amp;</operator> <name pos:start="69:29" pos:end="69:40">ENET_BD_IINS</name></expr>)</condition> <block pos:start="69:43" pos:end="87:13">{<block_content pos:start="71:17" pos:end="85:17">

                <decl_stmt pos:start="71:17" pos:end="71:64"><decl pos:start="71:17" pos:end="71:63"><type pos:start="71:17" pos:end="71:34"><name pos:start="71:17" pos:end="71:32"><name pos:start="71:17" pos:end="71:22">struct</name> <name pos:start="71:24" pos:end="71:32">ip_header</name></name> <modifier pos:start="71:34" pos:end="71:34">*</modifier></type><name pos:start="71:35" pos:end="71:39">ip_hd</name> <init pos:start="71:41" pos:end="71:63">= <expr pos:start="71:43" pos:end="71:63"><call pos:start="71:43" pos:end="71:63"><name pos:start="71:43" pos:end="71:56">PKT_GET_IP_HDR</name><argument_list pos:start="71:57" pos:end="71:63">(<argument pos:start="71:58" pos:end="71:62"><expr pos:start="71:58" pos:end="71:62"><name pos:start="71:58" pos:end="71:62">frame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="block" pos:start="73:17" pos:end="73:62">/* We compute checksum only for IPv4 frames */</comment>

                <if_stmt pos:start="75:17" pos:end="85:17"><if pos:start="75:17" pos:end="85:17">if <condition pos:start="75:20" pos:end="75:50">(<expr pos:start="75:21" pos:end="75:49"><call pos:start="75:21" pos:end="75:44"><name pos:start="75:21" pos:end="75:37">IP_HEADER_VERSION</name><argument_list pos:start="75:38" pos:end="75:44">(<argument pos:start="75:39" pos:end="75:43"><expr pos:start="75:39" pos:end="75:43"><name pos:start="75:39" pos:end="75:43">ip_hd</name></expr></argument>)</argument_list></call> <operator pos:start="75:46" pos:end="75:47">==</operator> <literal type="number" pos:start="75:49" pos:end="75:49">4</literal></expr>)</condition> <block pos:start="75:52" pos:end="85:17">{<block_content pos:start="77:21" pos:end="83:54">

                    <decl_stmt pos:start="77:21" pos:end="77:34"><decl pos:start="77:21" pos:end="77:33"><type pos:start="77:21" pos:end="77:28"><name pos:start="77:21" pos:end="77:28">uint16_t</name></type> <name pos:start="77:30" pos:end="77:33">csum</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="79:21" pos:end="79:38"><expr pos:start="79:21" pos:end="79:37"><name pos:start="79:21" pos:end="79:33"><name pos:start="79:21" pos:end="79:25">ip_hd</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:33">ip_sum</name></name> <operator pos:start="79:35" pos:end="79:35">=</operator> <literal type="number" pos:start="79:37" pos:end="79:37">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="81:21" pos:end="81:78"><expr pos:start="81:21" pos:end="81:77"><name pos:start="81:21" pos:end="81:24">csum</name> <operator pos:start="81:26" pos:end="81:26">=</operator> <call pos:start="81:28" pos:end="81:77"><name pos:start="81:28" pos:end="81:43">net_raw_checksum</name><argument_list pos:start="81:44" pos:end="81:77">(<argument pos:start="81:45" pos:end="81:60"><expr pos:start="81:45" pos:end="81:60"><operator pos:start="81:45" pos:end="81:45">(</operator><name pos:start="81:46" pos:end="81:52">uint8_t</name> <operator pos:start="81:54" pos:end="81:54">*</operator><operator pos:start="81:55" pos:end="81:55">)</operator><name pos:start="81:56" pos:end="81:60">ip_hd</name></expr></argument>, <argument pos:start="81:63" pos:end="81:76"><expr pos:start="81:63" pos:end="81:76"><sizeof pos:start="81:63" pos:end="81:76">sizeof<argument_list pos:start="81:69" pos:end="81:76">(<argument pos:start="81:70" pos:end="81:75"><expr pos:start="81:70" pos:end="81:75"><operator pos:start="81:70" pos:end="81:70">*</operator><name pos:start="81:71" pos:end="81:75">ip_hd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="83:21" pos:end="83:54"><expr pos:start="83:21" pos:end="83:53"><name pos:start="83:21" pos:end="83:33"><name pos:start="83:21" pos:end="83:25">ip_hd</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:33">ip_sum</name></name> <operator pos:start="83:35" pos:end="83:35">=</operator> <call pos:start="83:37" pos:end="83:53"><name pos:start="83:37" pos:end="83:47">cpu_to_be16</name><argument_list pos:start="83:48" pos:end="83:53">(<argument pos:start="83:49" pos:end="83:52"><expr pos:start="83:49" pos:end="83:52"><name pos:start="83:49" pos:end="83:52">csum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="89:13" pos:end="89:40">/* Last buffer in frame.  */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:65"><expr pos:start="91:13" pos:end="91:64"><call pos:start="91:13" pos:end="91:64"><name pos:start="91:13" pos:end="91:28">qemu_send_packet</name><argument_list pos:start="91:29" pos:end="91:64">(<argument pos:start="91:30" pos:end="91:51"><expr pos:start="91:30" pos:end="91:51"><call pos:start="91:30" pos:end="91:51"><name pos:start="91:30" pos:end="91:43">qemu_get_queue</name><argument_list pos:start="91:44" pos:end="91:51">(<argument pos:start="91:45" pos:end="91:50"><expr pos:start="91:45" pos:end="91:50"><name pos:start="91:45" pos:end="91:50"><name pos:start="91:45" pos:end="91:45">s</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:50">nic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="91:54" pos:end="91:58"><expr pos:start="91:54" pos:end="91:58"><name pos:start="91:54" pos:end="91:58">frame</name></expr></argument>, <argument pos:start="91:61" pos:end="91:63"><expr pos:start="91:61" pos:end="91:63"><name pos:start="91:61" pos:end="91:63">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:24"><expr pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:15">ptr</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <name pos:start="93:19" pos:end="93:23">frame</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:27"><expr pos:start="95:13" pos:end="95:26"><name pos:start="95:13" pos:end="95:22">frame_size</name> <operator pos:start="95:24" pos:end="95:24">=</operator> <literal type="number" pos:start="95:26" pos:end="95:26">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="97:13" pos:end="101:13"><if pos:start="97:13" pos:end="101:13">if <condition pos:start="97:16" pos:end="97:43">(<expr pos:start="97:17" pos:end="97:42"><name pos:start="97:17" pos:end="97:25"><name pos:start="97:17" pos:end="97:18">bd</name><operator pos:start="97:19" pos:end="97:19">.</operator><name pos:start="97:20" pos:end="97:25">option</name></name> <operator pos:start="97:27" pos:end="97:27">&amp;</operator> <name pos:start="97:29" pos:end="97:42">ENET_BD_TX_INT</name></expr>)</condition> <block pos:start="97:45" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:50">

                <expr_stmt pos:start="99:17" pos:end="99:50"><expr pos:start="99:17" pos:end="99:49"><name pos:start="99:17" pos:end="99:33"><name pos:start="99:17" pos:end="99:17">s</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:23">regs</name><index pos:start="99:24" pos:end="99:33">[<expr pos:start="99:25" pos:end="99:32"><name pos:start="99:25" pos:end="99:32">ENET_EIR</name></expr>]</index></name> <operator pos:start="99:35" pos:end="99:36">|=</operator> <name pos:start="99:38" pos:end="99:49">ENET_INT_TXF</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:39">(<expr pos:start="105:13" pos:end="105:38"><name pos:start="105:13" pos:end="105:21"><name pos:start="105:13" pos:end="105:14">bd</name><operator pos:start="105:15" pos:end="105:15">.</operator><name pos:start="105:16" pos:end="105:21">option</name></name> <operator pos:start="105:23" pos:end="105:23">&amp;</operator> <name pos:start="105:25" pos:end="105:38">ENET_BD_TX_INT</name></expr>)</condition> <block pos:start="105:41" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:46">

            <expr_stmt pos:start="107:13" pos:end="107:46"><expr pos:start="107:13" pos:end="107:45"><name pos:start="107:13" pos:end="107:29"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:19">regs</name><index pos:start="107:20" pos:end="107:29">[<expr pos:start="107:21" pos:end="107:28"><name pos:start="107:21" pos:end="107:28">ENET_EIR</name></expr>]</index></name> <operator pos:start="107:31" pos:end="107:32">|=</operator> <name pos:start="107:34" pos:end="107:45">ENET_INT_TXB</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:31"><expr pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:10">bd</name><operator pos:start="111:11" pos:end="111:11">.</operator><name pos:start="111:12" pos:end="111:16">flags</name></name> <operator pos:start="111:18" pos:end="111:19">&amp;=</operator> <operator pos:start="111:21" pos:end="111:21">~</operator><name pos:start="111:22" pos:end="111:30">ENET_BD_R</name></expr>;</expr_stmt>

        <comment type="block" pos:start="113:9" pos:end="113:50">/* Write back the modified descriptor.  */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:37"><expr pos:start="115:9" pos:end="115:36"><call pos:start="115:9" pos:end="115:36"><name pos:start="115:9" pos:end="115:25">imx_enet_write_bd</name><argument_list pos:start="115:26" pos:end="115:36">(<argument pos:start="115:27" pos:end="115:29"><expr pos:start="115:27" pos:end="115:29"><operator pos:start="115:27" pos:end="115:27">&amp;</operator><name pos:start="115:28" pos:end="115:29">bd</name></expr></argument>, <argument pos:start="115:32" pos:end="115:35"><expr pos:start="115:32" pos:end="115:35"><name pos:start="115:32" pos:end="115:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="117:9" pos:end="117:46">/* Advance to the next descriptor.  */</comment>

        <if_stmt pos:start="119:9" pos:end="127:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:40">(<expr pos:start="119:13" pos:end="119:39"><operator pos:start="119:13" pos:end="119:13">(</operator><name pos:start="119:14" pos:end="119:21"><name pos:start="119:14" pos:end="119:15">bd</name><operator pos:start="119:16" pos:end="119:16">.</operator><name pos:start="119:17" pos:end="119:21">flags</name></name> <operator pos:start="119:23" pos:end="119:23">&amp;</operator> <name pos:start="119:25" pos:end="119:33">ENET_BD_W</name><operator pos:start="119:34" pos:end="119:34">)</operator> <operator pos:start="119:36" pos:end="119:37">!=</operator> <literal type="number" pos:start="119:39" pos:end="119:39">0</literal></expr>)</condition> <block pos:start="119:42" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:38">

            <expr_stmt pos:start="121:13" pos:end="121:38"><expr pos:start="121:13" pos:end="121:37"><name pos:start="121:13" pos:end="121:16">addr</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <name pos:start="121:20" pos:end="121:37"><name pos:start="121:20" pos:end="121:20">s</name><operator pos:start="121:21" pos:end="121:22">-&gt;</operator><name pos:start="121:23" pos:end="121:26">regs</name><index pos:start="121:27" pos:end="121:37">[<expr pos:start="121:28" pos:end="121:36"><name pos:start="121:28" pos:end="121:36">ENET_TDSR</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="123:11" pos:end="127:9">else <block pos:start="123:16" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:31">

            <expr_stmt pos:start="125:13" pos:end="125:31"><expr pos:start="125:13" pos:end="125:30"><name pos:start="125:13" pos:end="125:16">addr</name> <operator pos:start="125:18" pos:end="125:19">+=</operator> <sizeof pos:start="125:21" pos:end="125:30">sizeof<argument_list pos:start="125:27" pos:end="125:30">(<argument pos:start="125:28" pos:end="125:29"><expr pos:start="125:28" pos:end="125:29"><name pos:start="125:28" pos:end="125:29">bd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="133:5" pos:end="133:28"><expr pos:start="133:5" pos:end="133:27"><name pos:start="133:5" pos:end="133:20"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:20">tx_descriptor</name></name> <operator pos:start="133:22" pos:end="133:22">=</operator> <name pos:start="133:24" pos:end="133:27">addr</name></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:22"><expr pos:start="137:5" pos:end="137:21"><call pos:start="137:5" pos:end="137:21"><name pos:start="137:5" pos:end="137:18">imx_eth_update</name><argument_list pos:start="137:19" pos:end="137:21">(<argument pos:start="137:20" pos:end="137:20"><expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
