<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6937.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">load_elf</name><parameter_list pos:start="1:13" pos:end="3:30">(<parameter pos:start="1:14" pos:end="1:33"><decl pos:start="1:14" pos:end="1:33"><type pos:start="1:14" pos:end="1:33"><specifier pos:start="1:14" pos:end="1:18">const</specifier> <name pos:start="1:20" pos:end="1:23">char</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:33">filename</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:62"><decl pos:start="1:36" pos:end="1:62"><type pos:start="1:36" pos:end="1:62"><name pos:start="1:36" pos:end="1:42">int64_t</name></type> <name pos:start="1:44" pos:end="1:62">virt_to_phys_addend</name></decl></parameter>,

             <parameter pos:start="3:14" pos:end="3:29"><decl pos:start="3:14" pos:end="3:29"><type pos:start="3:14" pos:end="3:29"><name pos:start="3:14" pos:end="3:21">uint64_t</name> <modifier pos:start="3:23" pos:end="3:23">*</modifier></type><name pos:start="3:24" pos:end="3:29">pentry</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="77:1">{<block_content pos:start="7:5" pos:end="75:14">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>, <decl pos:start="7:13" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:22">data_order</name></decl>, <decl pos:start="7:25" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:33">must_swab</name></decl>, <decl pos:start="7:36" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:36" pos:end="7:38">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:30"><name pos:start="9:13" pos:end="9:19">e_ident</name><index pos:start="9:20" pos:end="9:30">[<expr pos:start="9:21" pos:end="9:29"><name pos:start="9:21" pos:end="9:29">EI_NIDENT</name></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:6">fd</name> <operator pos:start="13:8" pos:end="13:8">=</operator> <call pos:start="13:10" pos:end="13:44"><name pos:start="13:10" pos:end="13:13">open</name><argument_list pos:start="13:14" pos:end="13:44">(<argument pos:start="13:15" pos:end="13:22"><expr pos:start="13:15" pos:end="13:22"><name pos:start="13:15" pos:end="13:22">filename</name></expr></argument>, <argument pos:start="13:25" pos:end="13:43"><expr pos:start="13:25" pos:end="13:43"><name pos:start="13:25" pos:end="13:32">O_RDONLY</name> <operator pos:start="13:34" pos:end="13:34">|</operator> <name pos:start="13:36" pos:end="13:43">O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:15">(<expr pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:10">fd</name> <operator pos:start="15:12" pos:end="15:12">&lt;</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>)</condition> <block pos:start="15:17" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:25"><expr pos:start="17:9" pos:end="17:24"><call pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:14">perror</name><argument_list pos:start="17:15" pos:end="17:24">(<argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="25:18"><if pos:start="23:5" pos:end="25:18">if <condition pos:start="23:8" pos:end="23:62">(<expr pos:start="23:9" pos:end="23:61"><call pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:12">read</name><argument_list pos:start="23:13" pos:end="23:42">(<argument pos:start="23:14" pos:end="23:15"><expr pos:start="23:14" pos:end="23:15"><name pos:start="23:14" pos:end="23:15">fd</name></expr></argument>, <argument pos:start="23:18" pos:end="23:24"><expr pos:start="23:18" pos:end="23:24"><name pos:start="23:18" pos:end="23:24">e_ident</name></expr></argument>, <argument pos:start="23:27" pos:end="23:41"><expr pos:start="23:27" pos:end="23:41"><sizeof pos:start="23:27" pos:end="23:41">sizeof<argument_list pos:start="23:33" pos:end="23:41">(<argument pos:start="23:34" pos:end="23:40"><expr pos:start="23:34" pos:end="23:40"><name pos:start="23:34" pos:end="23:40">e_ident</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="23:44" pos:end="23:45">!=</operator> <sizeof pos:start="23:47" pos:end="23:61">sizeof<argument_list pos:start="23:53" pos:end="23:61">(<argument pos:start="23:54" pos:end="23:60"><expr pos:start="23:54" pos:end="23:60"><name pos:start="23:54" pos:end="23:60">e_ident</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:18"><block_content pos:start="25:9" pos:end="25:18">

        <goto pos:start="25:9" pos:end="25:18">goto <name pos:start="25:14" pos:end="25:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="38:0"><if pos:start="27:5" pos:end="38:0">if <condition pos:start="27:8" pos:end="33:30">(<expr pos:start="27:9" pos:end="33:29"><name pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:15">e_ident</name><index pos:start="27:16" pos:end="27:18">[<expr pos:start="27:17" pos:end="27:17"><literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr>]</index></name> <operator pos:start="27:20" pos:end="27:21">!=</operator> <name pos:start="27:23" pos:end="27:29">ELFMAG0</name> <operator pos:start="27:31" pos:end="27:32">||</operator>

        <name pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:15">e_ident</name><index pos:start="29:16" pos:end="29:18">[<expr pos:start="29:17" pos:end="29:17"><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>]</index></name> <operator pos:start="29:20" pos:end="29:21">!=</operator> <name pos:start="29:23" pos:end="29:29">ELFMAG1</name> <operator pos:start="29:31" pos:end="29:32">||</operator>

        <name pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:15">e_ident</name><index pos:start="31:16" pos:end="31:18">[<expr pos:start="31:17" pos:end="31:17"><literal type="number" pos:start="31:17" pos:end="31:17">2</literal></expr>]</index></name> <operator pos:start="31:20" pos:end="31:21">!=</operator> <name pos:start="31:23" pos:end="31:29">ELFMAG2</name> <operator pos:start="31:31" pos:end="31:32">||</operator>

        <name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:15">e_ident</name><index pos:start="33:16" pos:end="33:18">[<expr pos:start="33:17" pos:end="33:17"><literal type="number" pos:start="33:17" pos:end="33:17">3</literal></expr>]</index></name> <operator pos:start="33:20" pos:end="33:21">!=</operator> <name pos:start="33:23" pos:end="33:29">ELFMAG3</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="38:0"><block_content pos:start="35:9" pos:end="38:0">

        <goto pos:start="35:9" pos:end="38:0">goto <name pos:start="35:14" pos:end="35:17">fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="37:1" pos:end="37:22">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:22">WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="39:5" pos:end="42:0"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:14">data_order</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <name pos:start="39:18" pos:end="39:28">ELFDATA2MSB</name></expr>;</expr_stmt>

<cpp:else pos:start="41:1" pos:end="41:5">#<cpp:directive pos:start="41:2" pos:end="41:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="43:5" pos:end="46:0"><expr pos:start="43:5" pos:end="43:28"><name pos:start="43:5" pos:end="43:14">data_order</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <name pos:start="43:18" pos:end="43:28">ELFDATA2LSB</name></expr>;</expr_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="47:5" pos:end="47:47"><expr pos:start="47:5" pos:end="47:46"><name pos:start="47:5" pos:end="47:13">must_swab</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:26">data_order</name> <operator pos:start="47:28" pos:end="47:29">!=</operator> <name pos:start="47:31" pos:end="47:46"><name pos:start="47:31" pos:end="47:37">e_ident</name><index pos:start="47:38" pos:end="47:46">[<expr pos:start="47:39" pos:end="47:45"><name pos:start="47:39" pos:end="47:45">EI_DATA</name></expr>]</index></name></expr>;</expr_stmt>

    

    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><call pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:9">lseek</name><argument_list pos:start="51:10" pos:end="51:26">(<argument pos:start="51:11" pos:end="51:12"><expr pos:start="51:11" pos:end="51:12"><name pos:start="51:11" pos:end="51:12">fd</name></expr></argument>, <argument pos:start="51:15" pos:end="51:15"><expr pos:start="51:15" pos:end="51:15"><literal type="number" pos:start="51:15" pos:end="51:15">0</literal></expr></argument>, <argument pos:start="51:18" pos:end="51:25"><expr pos:start="51:18" pos:end="51:25"><name pos:start="51:18" pos:end="51:25">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:40">(<expr pos:start="53:9" pos:end="53:39"><name pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:15">e_ident</name><index pos:start="53:16" pos:end="53:25">[<expr pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:24">EI_CLASS</name></expr>]</index></name> <operator pos:start="53:27" pos:end="53:28">==</operator> <name pos:start="53:30" pos:end="53:39">ELFCLASS64</name></expr>)</condition> <block pos:start="53:42" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:69">

        <expr_stmt pos:start="55:9" pos:end="55:69"><expr pos:start="55:9" pos:end="55:68"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:68"><name pos:start="55:15" pos:end="55:24">load_elf64</name><argument_list pos:start="55:25" pos:end="55:68">(<argument pos:start="55:26" pos:end="55:27"><expr pos:start="55:26" pos:end="55:27"><name pos:start="55:26" pos:end="55:27">fd</name></expr></argument>, <argument pos:start="55:30" pos:end="55:48"><expr pos:start="55:30" pos:end="55:48"><name pos:start="55:30" pos:end="55:48">virt_to_phys_addend</name></expr></argument>, <argument pos:start="55:51" pos:end="55:59"><expr pos:start="55:51" pos:end="55:59"><name pos:start="55:51" pos:end="55:59">must_swab</name></expr></argument>, <argument pos:start="55:62" pos:end="55:67"><expr pos:start="55:62" pos:end="55:67"><name pos:start="55:62" pos:end="55:67">pentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="61:5">else <block pos:start="57:12" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:69">

        <expr_stmt pos:start="59:9" pos:end="59:69"><expr pos:start="59:9" pos:end="59:68"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:68"><name pos:start="59:15" pos:end="59:24">load_elf32</name><argument_list pos:start="59:25" pos:end="59:68">(<argument pos:start="59:26" pos:end="59:27"><expr pos:start="59:26" pos:end="59:27"><name pos:start="59:26" pos:end="59:27">fd</name></expr></argument>, <argument pos:start="59:30" pos:end="59:48"><expr pos:start="59:30" pos:end="59:48"><name pos:start="59:30" pos:end="59:48">virt_to_phys_addend</name></expr></argument>, <argument pos:start="59:51" pos:end="59:59"><expr pos:start="59:51" pos:end="59:59"><name pos:start="59:51" pos:end="59:59">must_swab</name></expr></argument>, <argument pos:start="59:62" pos:end="59:67"><expr pos:start="59:62" pos:end="59:67"><name pos:start="59:62" pos:end="59:67">pentry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:14"><expr pos:start="65:5" pos:end="65:13"><call pos:start="65:5" pos:end="65:13"><name pos:start="65:5" pos:end="65:9">close</name><argument_list pos:start="65:10" pos:end="65:13">(<argument pos:start="65:11" pos:end="65:12"><expr pos:start="65:11" pos:end="65:12"><name pos:start="65:11" pos:end="65:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="67:5" pos:end="67:15">return <expr pos:start="67:12" pos:end="67:14"><name pos:start="67:12" pos:end="67:14">ret</name></expr>;</return>



 <label pos:start="71:2" pos:end="71:6"><name pos:start="71:2" pos:end="71:5">fail</name>:</label>

    <expr_stmt pos:start="73:5" pos:end="73:14"><expr pos:start="73:5" pos:end="73:13"><call pos:start="73:5" pos:end="73:13"><name pos:start="73:5" pos:end="73:9">close</name><argument_list pos:start="73:10" pos:end="73:13">(<argument pos:start="73:11" pos:end="73:12"><expr pos:start="73:11" pos:end="73:12"><name pos:start="73:11" pos:end="73:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:14">return <expr pos:start="75:12" pos:end="75:13"><operator pos:start="75:12" pos:end="75:12">-</operator><literal type="number" pos:start="75:13" pos:end="75:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
