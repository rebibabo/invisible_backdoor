<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6143.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">encode_frame</name><parameter_list pos:start="1:24" pos:end="3:49">(<parameter pos:start="1:25" pos:end="1:51"><decl pos:start="1:25" pos:end="1:51"><type pos:start="1:25" pos:end="1:51"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name><modifier pos:start="1:39" pos:end="1:39">*</modifier></type> <name pos:start="1:41" pos:end="1:51">avc_context</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:60">uint8_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:68">outbuf</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:36">buf_size</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:48"><decl pos:start="3:39" pos:end="3:48"><type pos:start="3:39" pos:end="3:48"><name pos:start="3:39" pos:end="3:42">void</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:48">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="159:1">{<block_content pos:start="7:5" pos:end="157:26">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19">th_ycbcr_buffer</name></type> <name pos:start="7:21" pos:end="7:32">t_yuv_buffer</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:45"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">TheoraContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">h</name> <init pos:start="9:22" pos:end="9:45">= <expr pos:start="9:24" pos:end="9:45"><name pos:start="9:24" pos:end="9:45"><name pos:start="9:24" pos:end="9:34">avc_context</name><operator pos:start="9:35" pos:end="9:36">-&gt;</operator><name pos:start="9:37" pos:end="9:45">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:18">frame</name> <init pos:start="11:20" pos:end="11:25">= <expr pos:start="11:22" pos:end="11:25"><name pos:start="11:22" pos:end="11:25">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">ogg_packet</name></type> <name pos:start="13:16" pos:end="13:23">o_packet</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">result</name></decl>, <decl pos:start="15:17" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:17">i</name></decl>;</decl_stmt>



    <comment type="line" pos:start="19:5" pos:end="19:55">// EOS, finish and get 1st pass stats if applicable</comment>

    <if_stmt pos:start="21:5" pos:end="33:5"><if pos:start="21:5" pos:end="33:5">if <condition pos:start="21:8" pos:end="21:15">(<expr pos:start="21:9" pos:end="21:14"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:14">frame</name></expr>)</condition> <block pos:start="21:17" pos:end="33:5">{<block_content pos:start="23:9" pos:end="31:17">

        <expr_stmt pos:start="23:9" pos:end="23:54"><expr pos:start="23:9" pos:end="23:53"><call pos:start="23:9" pos:end="23:53"><name pos:start="23:9" pos:end="23:27">th_encode_packetout</name><argument_list pos:start="23:28" pos:end="23:53">(<argument pos:start="23:29" pos:end="23:38"><expr pos:start="23:29" pos:end="23:38"><name pos:start="23:29" pos:end="23:38"><name pos:start="23:29" pos:end="23:29">h</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:38">t_state</name></name></expr></argument>, <argument pos:start="23:41" pos:end="23:41"><expr pos:start="23:41" pos:end="23:41"><literal type="number" pos:start="23:41" pos:end="23:41">1</literal></expr></argument>, <argument pos:start="23:44" pos:end="23:52"><expr pos:start="23:44" pos:end="23:52"><operator pos:start="23:44" pos:end="23:44">&amp;</operator><name pos:start="23:45" pos:end="23:52">o_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:26"><if pos:start="25:9" pos:end="29:26">if <condition pos:start="25:12" pos:end="25:50">(<expr pos:start="25:13" pos:end="25:49"><name pos:start="25:13" pos:end="25:30"><name pos:start="25:13" pos:end="25:23">avc_context</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:30">flags</name></name> <operator pos:start="25:32" pos:end="25:32">&amp;</operator> <name pos:start="25:34" pos:end="25:49">CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="29:26"><block_content pos:start="27:13" pos:end="29:26">

            <if_stmt pos:start="27:13" pos:end="29:26"><if pos:start="27:13" pos:end="29:26">if <condition pos:start="27:16" pos:end="27:42">(<expr pos:start="27:17" pos:end="27:41"><call pos:start="27:17" pos:end="27:41"><name pos:start="27:17" pos:end="27:25">get_stats</name><argument_list pos:start="27:26" pos:end="27:41">(<argument pos:start="27:27" pos:end="27:37"><expr pos:start="27:27" pos:end="27:37"><name pos:start="27:27" pos:end="27:37">avc_context</name></expr></argument>, <argument pos:start="27:40" pos:end="27:40"><expr pos:start="27:40" pos:end="27:40"><literal type="number" pos:start="27:40" pos:end="27:40">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="29:17" pos:end="29:26"><block_content pos:start="29:17" pos:end="29:26">

                <return pos:start="29:17" pos:end="29:26">return <expr pos:start="29:24" pos:end="29:25"><operator pos:start="29:24" pos:end="29:24">-</operator><literal type="number" pos:start="29:25" pos:end="29:25">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:46">/* Copy planes to the theora yuv_buffer */</comment>

    <for pos:start="39:5" pos:end="49:5">for <control pos:start="39:9" pos:end="39:27">(<init pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</init> <condition pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:21"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <literal type="number" pos:start="39:21" pos:end="39:21">3</literal></expr>;</condition> <incr pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:24">i</name><operator pos:start="39:25" pos:end="39:26">++</operator></expr></incr>)</control> <block pos:start="39:29" pos:end="49:5">{<block_content pos:start="41:9" pos:end="47:48">

        <expr_stmt pos:start="41:9" pos:end="41:89"><expr pos:start="41:9" pos:end="41:88"><name pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:20">t_yuv_buffer</name><index pos:start="41:21" pos:end="41:23">[<expr pos:start="41:22" pos:end="41:22"><name pos:start="41:22" pos:end="41:22">i</name></expr>]</index></name><operator pos:start="41:24" pos:end="41:24">.</operator><name pos:start="41:25" pos:end="41:29">width</name>  <operator pos:start="41:32" pos:end="41:32">=</operator> <call pos:start="41:34" pos:end="41:65"><name pos:start="41:34" pos:end="41:40">FFALIGN</name><argument_list pos:start="41:41" pos:end="41:65">(<argument pos:start="41:42" pos:end="41:59"><expr pos:start="41:42" pos:end="41:59"><name pos:start="41:42" pos:end="41:59"><name pos:start="41:42" pos:end="41:52">avc_context</name><operator pos:start="41:53" pos:end="41:54">-&gt;</operator><name pos:start="41:55" pos:end="41:59">width</name></name></expr></argument>,  <argument pos:start="41:63" pos:end="41:64"><expr pos:start="41:63" pos:end="41:64"><literal type="number" pos:start="41:63" pos:end="41:64">16</literal></expr></argument>)</argument_list></call> <operator pos:start="41:67" pos:end="41:68">&gt;&gt;</operator> <operator pos:start="41:70" pos:end="41:70">(</operator><name pos:start="41:71" pos:end="41:71">i</name> <operator pos:start="41:73" pos:end="41:74">&amp;&amp;</operator> <name pos:start="41:76" pos:end="41:87"><name pos:start="41:76" pos:end="41:76">h</name><operator pos:start="41:77" pos:end="41:78">-&gt;</operator><name pos:start="41:79" pos:end="41:87">uv_hshift</name></name><operator pos:start="41:88" pos:end="41:88">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:89"><expr pos:start="43:9" pos:end="43:88"><name pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:20">t_yuv_buffer</name><index pos:start="43:21" pos:end="43:23">[<expr pos:start="43:22" pos:end="43:22"><name pos:start="43:22" pos:end="43:22">i</name></expr>]</index></name><operator pos:start="43:24" pos:end="43:24">.</operator><name pos:start="43:25" pos:end="43:30">height</name> <operator pos:start="43:32" pos:end="43:32">=</operator> <call pos:start="43:34" pos:end="43:65"><name pos:start="43:34" pos:end="43:40">FFALIGN</name><argument_list pos:start="43:41" pos:end="43:65">(<argument pos:start="43:42" pos:end="43:60"><expr pos:start="43:42" pos:end="43:60"><name pos:start="43:42" pos:end="43:60"><name pos:start="43:42" pos:end="43:52">avc_context</name><operator pos:start="43:53" pos:end="43:54">-&gt;</operator><name pos:start="43:55" pos:end="43:60">height</name></name></expr></argument>, <argument pos:start="43:63" pos:end="43:64"><expr pos:start="43:63" pos:end="43:64"><literal type="number" pos:start="43:63" pos:end="43:64">16</literal></expr></argument>)</argument_list></call> <operator pos:start="43:67" pos:end="43:68">&gt;&gt;</operator> <operator pos:start="43:70" pos:end="43:70">(</operator><name pos:start="43:71" pos:end="43:71">i</name> <operator pos:start="43:73" pos:end="43:74">&amp;&amp;</operator> <name pos:start="43:76" pos:end="43:87"><name pos:start="43:76" pos:end="43:76">h</name><operator pos:start="43:77" pos:end="43:78">-&gt;</operator><name pos:start="43:79" pos:end="43:87">uv_vshift</name></name><operator pos:start="43:88" pos:end="43:88">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:20">t_yuv_buffer</name><index pos:start="45:21" pos:end="45:23">[<expr pos:start="45:22" pos:end="45:22"><name pos:start="45:22" pos:end="45:22">i</name></expr>]</index></name><operator pos:start="45:24" pos:end="45:24">.</operator><name pos:start="45:25" pos:end="45:30">stride</name> <operator pos:start="45:32" pos:end="45:32">=</operator> <name pos:start="45:34" pos:end="45:51"><name pos:start="45:34" pos:end="45:38">frame</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:48">linesize</name><index pos:start="45:49" pos:end="45:51">[<expr pos:start="45:50" pos:end="45:50"><name pos:start="45:50" pos:end="45:50">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:48"><expr pos:start="47:9" pos:end="47:47"><name pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:20">t_yuv_buffer</name><index pos:start="47:21" pos:end="47:23">[<expr pos:start="47:22" pos:end="47:22"><name pos:start="47:22" pos:end="47:22">i</name></expr>]</index></name><operator pos:start="47:24" pos:end="47:24">.</operator><name pos:start="47:25" pos:end="47:28">data</name>   <operator pos:start="47:32" pos:end="47:32">=</operator> <name pos:start="47:34" pos:end="47:47"><name pos:start="47:34" pos:end="47:38">frame</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:44">data</name><index pos:start="47:45" pos:end="47:47">[<expr pos:start="47:46" pos:end="47:46"><name pos:start="47:46" pos:end="47:46">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="53:5" pos:end="57:22"><if pos:start="53:5" pos:end="57:22">if <condition pos:start="53:8" pos:end="53:46">(<expr pos:start="53:9" pos:end="53:45"><name pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:19">avc_context</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:26">flags</name></name> <operator pos:start="53:28" pos:end="53:28">&amp;</operator> <name pos:start="53:30" pos:end="53:45">CODEC_FLAG_PASS2</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="57:22"><block_content pos:start="55:9" pos:end="57:22">

        <if_stmt pos:start="55:9" pos:end="57:22"><if pos:start="55:9" pos:end="57:22">if <condition pos:start="55:12" pos:end="55:38">(<expr pos:start="55:13" pos:end="55:37"><call pos:start="55:13" pos:end="55:37"><name pos:start="55:13" pos:end="55:24">submit_stats</name><argument_list pos:start="55:25" pos:end="55:37">(<argument pos:start="55:26" pos:end="55:36"><expr pos:start="55:26" pos:end="55:36"><name pos:start="55:26" pos:end="55:36">avc_context</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:22"><block_content pos:start="57:13" pos:end="57:22">

            <return pos:start="57:13" pos:end="57:22">return <expr pos:start="57:20" pos:end="57:21"><operator pos:start="57:20" pos:end="57:20">-</operator><literal type="number" pos:start="57:21" pos:end="57:21">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:43">/* Now call into theora_encode_YUVin */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:58"><expr pos:start="63:5" pos:end="63:57"><name pos:start="63:5" pos:end="63:10">result</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:57"><name pos:start="63:14" pos:end="63:31">th_encode_ycbcr_in</name><argument_list pos:start="63:32" pos:end="63:57">(<argument pos:start="63:33" pos:end="63:42"><expr pos:start="63:33" pos:end="63:42"><name pos:start="63:33" pos:end="63:42"><name pos:start="63:33" pos:end="63:33">h</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:42">t_state</name></name></expr></argument>, <argument pos:start="63:45" pos:end="63:56"><expr pos:start="63:45" pos:end="63:56"><name pos:start="63:45" pos:end="63:56">t_yuv_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="95:5"><if pos:start="65:5" pos:end="95:5">if <condition pos:start="65:8" pos:end="65:15">(<expr pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:14">result</name></expr>)</condition> <block pos:start="65:17" pos:end="95:5">{<block_content pos:start="67:9" pos:end="93:18">

        <decl_stmt pos:start="67:9" pos:end="67:28"><decl pos:start="67:9" pos:end="67:27"><type pos:start="67:9" pos:end="67:19"><specifier pos:start="67:9" pos:end="67:13">const</specifier> <name pos:start="67:15" pos:end="67:18">char</name><modifier pos:start="67:19" pos:end="67:19">*</modifier></type> <name pos:start="67:21" pos:end="67:27">message</name></decl>;</decl_stmt>

        <switch pos:start="69:9" pos:end="89:9">switch <condition pos:start="69:16" pos:end="69:23">(<expr pos:start="69:17" pos:end="69:22"><name pos:start="69:17" pos:end="69:22">result</name></expr>)</condition> <block pos:start="69:25" pos:end="89:9">{<block_content pos:start="71:9" pos:end="87:18">

        <case pos:start="71:9" pos:end="71:16">case <expr pos:start="71:14" pos:end="71:15"><operator pos:start="71:14" pos:end="71:14">-</operator><literal type="number" pos:start="71:15" pos:end="71:15">1</literal></expr>:</case>

            <expr_stmt pos:start="73:13" pos:end="73:46"><expr pos:start="73:13" pos:end="73:45"><name pos:start="73:13" pos:end="73:19">message</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <literal type="string" pos:start="73:23" pos:end="73:45">"differing frame sizes"</literal></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        <case pos:start="77:9" pos:end="77:23">case <expr pos:start="77:14" pos:end="77:22"><name pos:start="77:14" pos:end="77:22">TH_EINVAL</name></expr>:</case>

            <expr_stmt pos:start="79:13" pos:end="79:60"><expr pos:start="79:13" pos:end="79:59"><name pos:start="79:13" pos:end="79:19">message</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <literal type="string" pos:start="79:23" pos:end="79:59">"encoder is not ready or is finished"</literal></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        <default pos:start="83:9" pos:end="83:16">default:</default>

            <expr_stmt pos:start="85:13" pos:end="85:39"><expr pos:start="85:13" pos:end="85:38"><name pos:start="85:13" pos:end="85:19">message</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <literal type="string" pos:start="85:23" pos:end="85:38">"unknown reason"</literal></expr>;</expr_stmt>

            <break pos:start="87:13" pos:end="87:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="91:9" pos:end="91:101"><expr pos:start="91:9" pos:end="91:100"><call pos:start="91:9" pos:end="91:100"><name pos:start="91:9" pos:end="91:14">av_log</name><argument_list pos:start="91:15" pos:end="91:100">(<argument pos:start="91:16" pos:end="91:26"><expr pos:start="91:16" pos:end="91:26"><name pos:start="91:16" pos:end="91:26">avc_context</name></expr></argument>, <argument pos:start="91:29" pos:end="91:40"><expr pos:start="91:29" pos:end="91:40"><name pos:start="91:29" pos:end="91:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:43" pos:end="91:82"><expr pos:start="91:43" pos:end="91:82"><literal type="string" pos:start="91:43" pos:end="91:82">"theora_encode_YUVin failed (%s) [%d]\n"</literal></expr></argument>, <argument pos:start="91:85" pos:end="91:91"><expr pos:start="91:85" pos:end="91:91"><name pos:start="91:85" pos:end="91:91">message</name></expr></argument>, <argument pos:start="91:94" pos:end="91:99"><expr pos:start="91:94" pos:end="91:99"><name pos:start="91:94" pos:end="91:99">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:18">return <expr pos:start="93:16" pos:end="93:17"><operator pos:start="93:16" pos:end="93:16">-</operator><literal type="number" pos:start="93:17" pos:end="93:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="103:22"><if pos:start="99:5" pos:end="103:22">if <condition pos:start="99:8" pos:end="99:46">(<expr pos:start="99:9" pos:end="99:45"><name pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:19">avc_context</name><operator pos:start="99:20" pos:end="99:21">-&gt;</operator><name pos:start="99:22" pos:end="99:26">flags</name></name> <operator pos:start="99:28" pos:end="99:28">&amp;</operator> <name pos:start="99:30" pos:end="99:45">CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="103:22"><block_content pos:start="101:9" pos:end="103:22">

        <if_stmt pos:start="101:9" pos:end="103:22"><if pos:start="101:9" pos:end="103:22">if <condition pos:start="101:12" pos:end="101:38">(<expr pos:start="101:13" pos:end="101:37"><call pos:start="101:13" pos:end="101:37"><name pos:start="101:13" pos:end="101:21">get_stats</name><argument_list pos:start="101:22" pos:end="101:37">(<argument pos:start="101:23" pos:end="101:33"><expr pos:start="101:23" pos:end="101:33"><name pos:start="101:23" pos:end="101:33">avc_context</name></expr></argument>, <argument pos:start="101:36" pos:end="101:36"><expr pos:start="101:36" pos:end="101:36"><literal type="number" pos:start="101:36" pos:end="101:36">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:22"><block_content pos:start="103:13" pos:end="103:22">

            <return pos:start="103:13" pos:end="103:22">return <expr pos:start="103:20" pos:end="103:21"><operator pos:start="103:20" pos:end="103:20">-</operator><literal type="number" pos:start="103:21" pos:end="103:21">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:37">/* Pick up returned ogg_packet */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:59"><expr pos:start="109:5" pos:end="109:58"><name pos:start="109:5" pos:end="109:10">result</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <call pos:start="109:14" pos:end="109:58"><name pos:start="109:14" pos:end="109:32">th_encode_packetout</name><argument_list pos:start="109:33" pos:end="109:58">(<argument pos:start="109:34" pos:end="109:43"><expr pos:start="109:34" pos:end="109:43"><name pos:start="109:34" pos:end="109:43"><name pos:start="109:34" pos:end="109:34">h</name><operator pos:start="109:35" pos:end="109:36">-&gt;</operator><name pos:start="109:37" pos:end="109:43">t_state</name></name></expr></argument>, <argument pos:start="109:46" pos:end="109:46"><expr pos:start="109:46" pos:end="109:46"><literal type="number" pos:start="109:46" pos:end="109:46">0</literal></expr></argument>, <argument pos:start="109:49" pos:end="109:57"><expr pos:start="109:49" pos:end="109:57"><operator pos:start="109:49" pos:end="109:49">&amp;</operator><name pos:start="109:50" pos:end="109:57">o_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="111:5" pos:end="131:5">switch <condition pos:start="111:12" pos:end="111:19">(<expr pos:start="111:13" pos:end="111:18"><name pos:start="111:13" pos:end="111:18">result</name></expr>)</condition> <block pos:start="111:21" pos:end="131:5">{<block_content pos:start="113:5" pos:end="129:18">

    <case pos:start="113:5" pos:end="113:11">case <expr pos:start="113:10" pos:end="113:10"><literal type="number" pos:start="113:10" pos:end="113:10">0</literal></expr>:</case>

        <comment type="block" pos:start="115:9" pos:end="115:32">/* No packet is ready */</comment>

        <return pos:start="117:9" pos:end="117:17">return <expr pos:start="117:16" pos:end="117:16"><literal type="number" pos:start="117:16" pos:end="117:16">0</literal></expr>;</return>

    <case pos:start="119:5" pos:end="119:11">case <expr pos:start="119:10" pos:end="119:10"><literal type="number" pos:start="119:10" pos:end="119:10">1</literal></expr>:</case>

        <comment type="block" pos:start="121:9" pos:end="121:39">/* Success, we have a packet */</comment>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    <default pos:start="125:5" pos:end="125:12">default:</default>

        <expr_stmt pos:start="127:9" pos:end="127:91"><expr pos:start="127:9" pos:end="127:90"><call pos:start="127:9" pos:end="127:90"><name pos:start="127:9" pos:end="127:14">av_log</name><argument_list pos:start="127:15" pos:end="127:90">(<argument pos:start="127:16" pos:end="127:26"><expr pos:start="127:16" pos:end="127:26"><name pos:start="127:16" pos:end="127:26">avc_context</name></expr></argument>, <argument pos:start="127:29" pos:end="127:40"><expr pos:start="127:29" pos:end="127:40"><name pos:start="127:29" pos:end="127:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:43" pos:end="127:81"><expr pos:start="127:43" pos:end="127:81"><literal type="string" pos:start="127:43" pos:end="127:81">"theora_encode_packetout failed [%d]\n"</literal></expr></argument>, <argument pos:start="127:84" pos:end="127:89"><expr pos:start="127:84" pos:end="127:89"><name pos:start="127:84" pos:end="127:89">result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:18">return <expr pos:start="129:16" pos:end="129:17"><operator pos:start="129:16" pos:end="129:16">-</operator><literal type="number" pos:start="129:17" pos:end="129:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="135:5" pos:end="135:47">/* Copy ogg_packet content out to buffer */</comment>

    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:34">(<expr pos:start="137:9" pos:end="137:33"><name pos:start="137:9" pos:end="137:16">buf_size</name> <operator pos:start="137:18" pos:end="137:18">&lt;</operator> <name pos:start="137:20" pos:end="137:33"><name pos:start="137:20" pos:end="137:27">o_packet</name><operator pos:start="137:28" pos:end="137:28">.</operator><name pos:start="137:29" pos:end="137:33">bytes</name></name></expr>)</condition> <block pos:start="137:36" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:18">

        <expr_stmt pos:start="139:9" pos:end="139:71"><expr pos:start="139:9" pos:end="139:70"><call pos:start="139:9" pos:end="139:70"><name pos:start="139:9" pos:end="139:14">av_log</name><argument_list pos:start="139:15" pos:end="139:70">(<argument pos:start="139:16" pos:end="139:26"><expr pos:start="139:16" pos:end="139:26"><name pos:start="139:16" pos:end="139:26">avc_context</name></expr></argument>, <argument pos:start="139:29" pos:end="139:40"><expr pos:start="139:29" pos:end="139:40"><name pos:start="139:29" pos:end="139:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:43" pos:end="139:69"><expr pos:start="139:43" pos:end="139:69"><literal type="string" pos:start="139:43" pos:end="139:69">"encoded frame too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:18">return <expr pos:start="141:16" pos:end="141:17"><operator pos:start="141:16" pos:end="141:16">-</operator><literal type="number" pos:start="141:17" pos:end="141:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:52"><expr pos:start="145:5" pos:end="145:51"><call pos:start="145:5" pos:end="145:51"><name pos:start="145:5" pos:end="145:10">memcpy</name><argument_list pos:start="145:11" pos:end="145:51">(<argument pos:start="145:12" pos:end="145:17"><expr pos:start="145:12" pos:end="145:17"><name pos:start="145:12" pos:end="145:17">outbuf</name></expr></argument>, <argument pos:start="145:20" pos:end="145:34"><expr pos:start="145:20" pos:end="145:34"><name pos:start="145:20" pos:end="145:34"><name pos:start="145:20" pos:end="145:27">o_packet</name><operator pos:start="145:28" pos:end="145:28">.</operator><name pos:start="145:29" pos:end="145:34">packet</name></name></expr></argument>, <argument pos:start="145:37" pos:end="145:50"><expr pos:start="145:37" pos:end="145:50"><name pos:start="145:37" pos:end="145:50"><name pos:start="145:37" pos:end="145:44">o_packet</name><operator pos:start="145:45" pos:end="145:45">.</operator><name pos:start="145:46" pos:end="145:50">bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="149:5" pos:end="149:85">// HACK: does not take codec delay into account (neither does the decoder though)</comment>

    <expr_stmt pos:start="151:5" pos:end="151:47"><expr pos:start="151:5" pos:end="151:46"><name pos:start="151:5" pos:end="151:33"><name pos:start="151:5" pos:end="151:15">avc_context</name><operator pos:start="151:16" pos:end="151:17">-&gt;</operator><name pos:start="151:18" pos:end="151:28">coded_frame</name><operator pos:start="151:29" pos:end="151:30">-&gt;</operator><name pos:start="151:31" pos:end="151:33">pts</name></name> <operator pos:start="151:35" pos:end="151:35">=</operator> <name pos:start="151:37" pos:end="151:46"><name pos:start="151:37" pos:end="151:41">frame</name><operator pos:start="151:42" pos:end="151:43">-&gt;</operator><name pos:start="151:44" pos:end="151:46">pts</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:84"><expr pos:start="153:5" pos:end="153:83"><name pos:start="153:5" pos:end="153:39"><name pos:start="153:5" pos:end="153:15">avc_context</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:28">coded_frame</name><operator pos:start="153:29" pos:end="153:30">-&gt;</operator><name pos:start="153:31" pos:end="153:39">key_frame</name></name> <operator pos:start="153:41" pos:end="153:41">=</operator> <operator pos:start="153:43" pos:end="153:43">!</operator><operator pos:start="153:44" pos:end="153:44">(</operator><name pos:start="153:45" pos:end="153:63"><name pos:start="153:45" pos:end="153:52">o_packet</name><operator pos:start="153:53" pos:end="153:53">.</operator><name pos:start="153:54" pos:end="153:63">granulepos</name></name> <operator pos:start="153:65" pos:end="153:65">&amp;</operator> <name pos:start="153:67" pos:end="153:82"><name pos:start="153:67" pos:end="153:67">h</name><operator pos:start="153:68" pos:end="153:69">-&gt;</operator><name pos:start="153:70" pos:end="153:82">keyframe_mask</name></name><operator pos:start="153:83" pos:end="153:83">)</operator></expr>;</expr_stmt>



    <return pos:start="157:5" pos:end="157:26">return <expr pos:start="157:12" pos:end="157:25"><name pos:start="157:12" pos:end="157:25"><name pos:start="157:12" pos:end="157:19">o_packet</name><operator pos:start="157:20" pos:end="157:20">.</operator><name pos:start="157:21" pos:end="157:25">bytes</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
