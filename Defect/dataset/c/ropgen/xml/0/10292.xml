<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10292.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:35">tcg_out_tlb_load</name><parameter_list pos:start="1:36" pos:end="5:73">(<parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:46">TCGContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:57">TCGReg</name></type> <name pos:start="1:59" pos:end="1:64">addrlo</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:79"><decl pos:start="1:67" pos:end="1:79"><type pos:start="1:67" pos:end="1:79"><name pos:start="1:67" pos:end="1:72">TCGReg</name></type> <name pos:start="1:74" pos:end="1:79">addrhi</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:49"><decl pos:start="3:37" pos:end="3:49"><type pos:start="3:37" pos:end="3:49"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:49">mem_index</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:66"><decl pos:start="3:52" pos:end="3:66"><type pos:start="3:52" pos:end="3:66"><name pos:start="3:52" pos:end="3:59">TCGMemOp</name></type> <name pos:start="3:61" pos:end="3:66">s_bits</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:61"><decl pos:start="5:37" pos:end="5:61"><type pos:start="5:37" pos:end="5:61"><name pos:start="5:37" pos:end="5:49">tcg_insn_unit</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier><modifier pos:start="5:52" pos:end="5:52">*</modifier></type><name pos:start="5:53" pos:end="5:61">label_ptr</name></decl></parameter>, <parameter pos:start="5:64" pos:end="5:72"><decl pos:start="5:64" pos:end="5:72"><type pos:start="5:64" pos:end="5:72"><name pos:start="5:64" pos:end="5:66">int</name></type> <name pos:start="5:68" pos:end="5:72">which</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="135:1">{<block_content pos:start="9:5" pos:end="133:64">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:16">TCGReg</name></type> <name pos:start="9:18" pos:end="9:19">r0</name> <init pos:start="9:21" pos:end="9:32">= <expr pos:start="9:23" pos:end="9:32"><name pos:start="9:23" pos:end="9:32">TCG_REG_L0</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:16">TCGReg</name></type> <name pos:start="11:18" pos:end="11:19">r1</name> <init pos:start="11:21" pos:end="11:32">= <expr pos:start="11:23" pos:end="11:32"><name pos:start="11:23" pos:end="11:32">TCG_REG_L1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">TCGType</name></type> <name pos:start="13:13" pos:end="13:17">ttype</name> <init pos:start="13:19" pos:end="13:32">= <expr pos:start="13:21" pos:end="13:32"><name pos:start="13:21" pos:end="13:32">TCG_TYPE_I32</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">TCGType</name></type> <name pos:start="15:13" pos:end="15:17">htype</name> <init pos:start="15:19" pos:end="15:32">= <expr pos:start="15:21" pos:end="15:32"><name pos:start="15:21" pos:end="15:32">TCG_TYPE_I32</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">trexw</name> <init pos:start="17:15" pos:end="17:17">= <expr pos:start="17:17" pos:end="17:17"><literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr></init></decl>, <decl pos:start="17:20" pos:end="17:28"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:20" pos:end="17:24">hrexw</name> <init pos:start="17:26" pos:end="17:28">= <expr pos:start="17:28" pos:end="17:28"><literal type="number" pos:start="17:28" pos:end="17:28">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="39:5"><if pos:start="21:5" pos:end="39:5">if <condition pos:start="21:8" pos:end="21:34">(<expr pos:start="21:9" pos:end="21:33"><name pos:start="21:9" pos:end="21:27">TCG_TARGET_REG_BITS</name> <operator pos:start="21:29" pos:end="21:30">==</operator> <literal type="number" pos:start="21:32" pos:end="21:33">64</literal></expr>)</condition> <block pos:start="21:36" pos:end="39:5">{<block_content pos:start="23:9" pos:end="37:9">

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:35">(<expr pos:start="23:13" pos:end="23:34"><name pos:start="23:13" pos:end="23:28">TARGET_LONG_BITS</name> <operator pos:start="23:30" pos:end="23:31">==</operator> <literal type="number" pos:start="23:33" pos:end="23:34">64</literal></expr>)</condition> <block pos:start="23:37" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:27">

            <expr_stmt pos:start="25:13" pos:end="25:33"><expr pos:start="25:13" pos:end="25:32"><name pos:start="25:13" pos:end="25:17">ttype</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <name pos:start="25:21" pos:end="25:32">TCG_TYPE_I64</name></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:27"><expr pos:start="27:13" pos:end="27:26"><name pos:start="27:13" pos:end="27:17">trexw</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:26">P_REXW</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:41">(<expr pos:start="31:13" pos:end="31:40"><name pos:start="31:13" pos:end="31:24">TCG_TYPE_PTR</name> <operator pos:start="31:26" pos:end="31:27">==</operator> <name pos:start="31:29" pos:end="31:40">TCG_TYPE_I64</name></expr>)</condition> <block pos:start="31:43" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:27">

            <expr_stmt pos:start="33:13" pos:end="33:33"><expr pos:start="33:13" pos:end="33:32"><name pos:start="33:13" pos:end="33:17">htype</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:32">TCG_TYPE_I64</name></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:27"><expr pos:start="35:13" pos:end="35:26"><name pos:start="35:13" pos:end="35:17">hrexw</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:26">P_REXW</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:38"><expr pos:start="43:5" pos:end="43:37"><call pos:start="43:5" pos:end="43:37"><name pos:start="43:5" pos:end="43:15">tcg_out_mov</name><argument_list pos:start="43:16" pos:end="43:37">(<argument pos:start="43:17" pos:end="43:17"><expr pos:start="43:17" pos:end="43:17"><name pos:start="43:17" pos:end="43:17">s</name></expr></argument>, <argument pos:start="43:20" pos:end="43:24"><expr pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:24">htype</name></expr></argument>, <argument pos:start="43:27" pos:end="43:28"><expr pos:start="43:27" pos:end="43:28"><name pos:start="43:27" pos:end="43:28">r0</name></expr></argument>, <argument pos:start="43:31" pos:end="43:36"><expr pos:start="43:31" pos:end="43:36"><name pos:start="43:31" pos:end="43:36">addrlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:38"><expr pos:start="45:5" pos:end="45:37"><call pos:start="45:5" pos:end="45:37"><name pos:start="45:5" pos:end="45:15">tcg_out_mov</name><argument_list pos:start="45:16" pos:end="45:37">(<argument pos:start="45:17" pos:end="45:17"><expr pos:start="45:17" pos:end="45:17"><name pos:start="45:17" pos:end="45:17">s</name></expr></argument>, <argument pos:start="45:20" pos:end="45:24"><expr pos:start="45:20" pos:end="45:24"><name pos:start="45:20" pos:end="45:24">ttype</name></expr></argument>, <argument pos:start="45:27" pos:end="45:28"><expr pos:start="45:27" pos:end="45:28"><name pos:start="45:27" pos:end="45:28">r1</name></expr></argument>, <argument pos:start="45:31" pos:end="45:36"><expr pos:start="45:31" pos:end="45:36"><name pos:start="45:31" pos:end="45:36">addrlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="51:58"><expr pos:start="49:5" pos:end="51:57"><call pos:start="49:5" pos:end="51:57"><name pos:start="49:5" pos:end="49:18">tcg_out_shifti</name><argument_list pos:start="49:19" pos:end="51:57">(<argument pos:start="49:20" pos:end="49:20"><expr pos:start="49:20" pos:end="49:20"><name pos:start="49:20" pos:end="49:20">s</name></expr></argument>, <argument pos:start="49:23" pos:end="49:39"><expr pos:start="49:23" pos:end="49:39"><name pos:start="49:23" pos:end="49:31">SHIFT_SHR</name> <operator pos:start="49:33" pos:end="49:33">+</operator> <name pos:start="49:35" pos:end="49:39">hrexw</name></expr></argument>, <argument pos:start="49:42" pos:end="49:43"><expr pos:start="49:42" pos:end="49:43"><name pos:start="49:42" pos:end="49:43">r0</name></expr></argument>,

                   <argument pos:start="51:20" pos:end="51:56"><expr pos:start="51:20" pos:end="51:56"><name pos:start="51:20" pos:end="51:35">TARGET_PAGE_BITS</name> <operator pos:start="51:37" pos:end="51:37">-</operator> <name pos:start="51:39" pos:end="51:56">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="57:59"><expr pos:start="55:5" pos:end="57:58"><call pos:start="55:5" pos:end="57:58"><name pos:start="55:5" pos:end="55:15">tgen_arithi</name><argument_list pos:start="55:16" pos:end="57:58">(<argument pos:start="55:17" pos:end="55:17"><expr pos:start="55:17" pos:end="55:17"><name pos:start="55:17" pos:end="55:17">s</name></expr></argument>, <argument pos:start="55:20" pos:end="55:36"><expr pos:start="55:20" pos:end="55:36"><name pos:start="55:20" pos:end="55:28">ARITH_AND</name> <operator pos:start="55:30" pos:end="55:30">+</operator> <name pos:start="55:32" pos:end="55:36">trexw</name></expr></argument>, <argument pos:start="55:39" pos:end="55:40"><expr pos:start="55:39" pos:end="55:40"><name pos:start="55:39" pos:end="55:40">r1</name></expr></argument>,

                <argument pos:start="57:17" pos:end="57:54"><expr pos:start="57:17" pos:end="57:54"><name pos:start="57:17" pos:end="57:32">TARGET_PAGE_MASK</name> <operator pos:start="57:34" pos:end="57:34">|</operator> <operator pos:start="57:36" pos:end="57:36">(</operator><operator pos:start="57:37" pos:end="57:37">(</operator><literal type="number" pos:start="57:38" pos:end="57:38">1</literal> <operator pos:start="57:40" pos:end="57:41">&lt;&lt;</operator> <name pos:start="57:43" pos:end="57:48">s_bits</name><operator pos:start="57:49" pos:end="57:49">)</operator> <operator pos:start="57:51" pos:end="57:51">-</operator> <literal type="number" pos:start="57:53" pos:end="57:53">1</literal><operator pos:start="57:54" pos:end="57:54">)</operator></expr></argument>, <argument pos:start="57:57" pos:end="57:57"><expr pos:start="57:57" pos:end="57:57"><literal type="number" pos:start="57:57" pos:end="57:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="61:61"><expr pos:start="59:5" pos:end="61:60"><call pos:start="59:5" pos:end="61:60"><name pos:start="59:5" pos:end="59:15">tgen_arithi</name><argument_list pos:start="59:16" pos:end="61:60">(<argument pos:start="59:17" pos:end="59:17"><expr pos:start="59:17" pos:end="59:17"><name pos:start="59:17" pos:end="59:17">s</name></expr></argument>, <argument pos:start="59:20" pos:end="59:36"><expr pos:start="59:20" pos:end="59:36"><name pos:start="59:20" pos:end="59:28">ARITH_AND</name> <operator pos:start="59:30" pos:end="59:30">+</operator> <name pos:start="59:32" pos:end="59:36">hrexw</name></expr></argument>, <argument pos:start="59:39" pos:end="59:40"><expr pos:start="59:39" pos:end="59:40"><name pos:start="59:39" pos:end="59:40">r0</name></expr></argument>,

                <argument pos:start="61:17" pos:end="61:56"><expr pos:start="61:17" pos:end="61:56"><operator pos:start="61:17" pos:end="61:17">(</operator><name pos:start="61:18" pos:end="61:29">CPU_TLB_SIZE</name> <operator pos:start="61:31" pos:end="61:31">-</operator> <literal type="number" pos:start="61:33" pos:end="61:33">1</literal><operator pos:start="61:34" pos:end="61:34">)</operator> <operator pos:start="61:36" pos:end="61:37">&lt;&lt;</operator> <name pos:start="61:39" pos:end="61:56">CPU_TLB_ENTRY_BITS</name></expr></argument>, <argument pos:start="61:59" pos:end="61:59"><expr pos:start="61:59" pos:end="61:59"><literal type="number" pos:start="61:59" pos:end="61:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="69:38"><expr pos:start="65:5" pos:end="69:37"><call pos:start="65:5" pos:end="69:37"><name pos:start="65:5" pos:end="65:28">tcg_out_modrm_sib_offset</name><argument_list pos:start="65:29" pos:end="69:37">(<argument pos:start="65:30" pos:end="65:30"><expr pos:start="65:30" pos:end="65:30"><name pos:start="65:30" pos:end="65:30">s</name></expr></argument>, <argument pos:start="65:33" pos:end="65:47"><expr pos:start="65:33" pos:end="65:47"><name pos:start="65:33" pos:end="65:39">OPC_LEA</name> <operator pos:start="65:41" pos:end="65:41">+</operator> <name pos:start="65:43" pos:end="65:47">hrexw</name></expr></argument>, <argument pos:start="65:50" pos:end="65:51"><expr pos:start="65:50" pos:end="65:51"><name pos:start="65:50" pos:end="65:51">r0</name></expr></argument>, <argument pos:start="65:54" pos:end="65:62"><expr pos:start="65:54" pos:end="65:62"><name pos:start="65:54" pos:end="65:62">TCG_AREG0</name></expr></argument>, <argument pos:start="65:65" pos:end="65:66"><expr pos:start="65:65" pos:end="65:66"><name pos:start="65:65" pos:end="65:66">r0</name></expr></argument>, <argument pos:start="65:69" pos:end="65:69"><expr pos:start="65:69" pos:end="65:69"><literal type="number" pos:start="65:69" pos:end="65:69">0</literal></expr></argument>,

                             <argument pos:start="67:30" pos:end="69:36"><expr pos:start="67:30" pos:end="69:36"><call pos:start="67:30" pos:end="67:76"><name pos:start="67:30" pos:end="67:37">offsetof</name><argument_list pos:start="67:38" pos:end="67:76">(<argument pos:start="67:39" pos:end="67:50"><expr pos:start="67:39" pos:end="67:50"><name pos:start="67:39" pos:end="67:50">CPUArchState</name></expr></argument>, <argument pos:start="67:53" pos:end="67:75"><expr pos:start="67:53" pos:end="67:75"><name pos:start="67:53" pos:end="67:75"><name pos:start="67:53" pos:end="67:61">tlb_table</name><index pos:start="67:62" pos:end="67:72">[<expr pos:start="67:63" pos:end="67:71"><name pos:start="67:63" pos:end="67:71">mem_index</name></expr>]</index><index pos:start="67:73" pos:end="67:75">[<expr pos:start="67:74" pos:end="67:74"><literal type="number" pos:start="67:74" pos:end="67:74">0</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                             <operator pos:start="69:30" pos:end="69:30">+</operator> <name pos:start="69:32" pos:end="69:36">which</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:23">/* cmp 0(r0), r1 */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:61"><expr pos:start="75:5" pos:end="75:60"><call pos:start="75:5" pos:end="75:60"><name pos:start="75:5" pos:end="75:24">tcg_out_modrm_offset</name><argument_list pos:start="75:25" pos:end="75:60">(<argument pos:start="75:26" pos:end="75:26"><expr pos:start="75:26" pos:end="75:26"><name pos:start="75:26" pos:end="75:26">s</name></expr></argument>, <argument pos:start="75:29" pos:end="75:48"><expr pos:start="75:29" pos:end="75:48"><name pos:start="75:29" pos:end="75:40">OPC_CMP_GvEv</name> <operator pos:start="75:42" pos:end="75:42">+</operator> <name pos:start="75:44" pos:end="75:48">trexw</name></expr></argument>, <argument pos:start="75:51" pos:end="75:52"><expr pos:start="75:51" pos:end="75:52"><name pos:start="75:51" pos:end="75:52">r1</name></expr></argument>, <argument pos:start="75:55" pos:end="75:56"><expr pos:start="75:55" pos:end="75:56"><name pos:start="75:55" pos:end="75:56">r0</name></expr></argument>, <argument pos:start="75:59" pos:end="75:59"><expr pos:start="75:59" pos:end="75:59"><literal type="number" pos:start="75:59" pos:end="75:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="89:68">/* Prepare for both the fast path add of the tlb addend, and the slow

       path function argument setup.  There are two cases worth note:

       For 32-bit guest and x86_64 host, MOVL zero-extends the guest address

       before the fastpath ADDQ below.  For 64-bit guest and x32 host, MOVQ

       copies the entire guest address for the slow path, while truncation

       for the 32-bit host happens with the fastpath ADDL below.  */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:38"><expr pos:start="91:5" pos:end="91:37"><call pos:start="91:5" pos:end="91:37"><name pos:start="91:5" pos:end="91:15">tcg_out_mov</name><argument_list pos:start="91:16" pos:end="91:37">(<argument pos:start="91:17" pos:end="91:17"><expr pos:start="91:17" pos:end="91:17"><name pos:start="91:17" pos:end="91:17">s</name></expr></argument>, <argument pos:start="91:20" pos:end="91:24"><expr pos:start="91:20" pos:end="91:24"><name pos:start="91:20" pos:end="91:24">ttype</name></expr></argument>, <argument pos:start="91:27" pos:end="91:28"><expr pos:start="91:27" pos:end="91:28"><name pos:start="91:27" pos:end="91:28">r1</name></expr></argument>, <argument pos:start="91:31" pos:end="91:36"><expr pos:start="91:31" pos:end="91:36"><name pos:start="91:31" pos:end="91:36">addrlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:23">/* jne slow_path */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:52"><expr pos:start="97:5" pos:end="97:51"><call pos:start="97:5" pos:end="97:51"><name pos:start="97:5" pos:end="97:15">tcg_out_opc</name><argument_list pos:start="97:16" pos:end="97:51">(<argument pos:start="97:17" pos:end="97:17"><expr pos:start="97:17" pos:end="97:17"><name pos:start="97:17" pos:end="97:17">s</name></expr></argument>, <argument pos:start="97:20" pos:end="97:41"><expr pos:start="97:20" pos:end="97:41"><name pos:start="97:20" pos:end="97:31">OPC_JCC_long</name> <operator pos:start="97:33" pos:end="97:33">+</operator> <name pos:start="97:35" pos:end="97:41">JCC_JNE</name></expr></argument>, <argument pos:start="97:44" pos:end="97:44"><expr pos:start="97:44" pos:end="97:44"><literal type="number" pos:start="97:44" pos:end="97:44">0</literal></expr></argument>, <argument pos:start="97:47" pos:end="97:47"><expr pos:start="97:47" pos:end="97:47"><literal type="number" pos:start="97:47" pos:end="97:47">0</literal></expr></argument>, <argument pos:start="97:50" pos:end="97:50"><expr pos:start="97:50" pos:end="97:50"><literal type="number" pos:start="97:50" pos:end="97:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:31"><expr pos:start="99:5" pos:end="99:30"><name pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:13">label_ptr</name><index pos:start="99:14" pos:end="99:16">[<expr pos:start="99:15" pos:end="99:15"><literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>]</index></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <name pos:start="99:20" pos:end="99:30"><name pos:start="99:20" pos:end="99:20">s</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:30">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:21"><expr pos:start="101:5" pos:end="101:20"><name pos:start="101:5" pos:end="101:15"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:15">code_ptr</name></name> <operator pos:start="101:17" pos:end="101:18">+=</operator> <literal type="number" pos:start="101:20" pos:end="101:20">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="121:5"><if pos:start="105:5" pos:end="121:5">if <condition pos:start="105:8" pos:end="105:47">(<expr pos:start="105:9" pos:end="105:46"><name pos:start="105:9" pos:end="105:24">TARGET_LONG_BITS</name> <operator pos:start="105:26" pos:end="105:26">&gt;</operator> <name pos:start="105:28" pos:end="105:46">TCG_TARGET_REG_BITS</name></expr>)</condition> <block pos:start="105:49" pos:end="121:5">{<block_content pos:start="109:9" pos:end="119:25">

        <comment type="block" pos:start="107:9" pos:end="107:31">/* cmp 4(r0), addrhi */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:61"><expr pos:start="109:9" pos:end="109:60"><call pos:start="109:9" pos:end="109:60"><name pos:start="109:9" pos:end="109:28">tcg_out_modrm_offset</name><argument_list pos:start="109:29" pos:end="109:60">(<argument pos:start="109:30" pos:end="109:30"><expr pos:start="109:30" pos:end="109:30"><name pos:start="109:30" pos:end="109:30">s</name></expr></argument>, <argument pos:start="109:33" pos:end="109:44"><expr pos:start="109:33" pos:end="109:44"><name pos:start="109:33" pos:end="109:44">OPC_CMP_GvEv</name></expr></argument>, <argument pos:start="109:47" pos:end="109:52"><expr pos:start="109:47" pos:end="109:52"><name pos:start="109:47" pos:end="109:52">addrhi</name></expr></argument>, <argument pos:start="109:55" pos:end="109:56"><expr pos:start="109:55" pos:end="109:56"><name pos:start="109:55" pos:end="109:56">r0</name></expr></argument>, <argument pos:start="109:59" pos:end="109:59"><expr pos:start="109:59" pos:end="109:59"><literal type="number" pos:start="109:59" pos:end="109:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="113:9" pos:end="113:27">/* jne slow_path */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:56"><expr pos:start="115:9" pos:end="115:55"><call pos:start="115:9" pos:end="115:55"><name pos:start="115:9" pos:end="115:19">tcg_out_opc</name><argument_list pos:start="115:20" pos:end="115:55">(<argument pos:start="115:21" pos:end="115:21"><expr pos:start="115:21" pos:end="115:21"><name pos:start="115:21" pos:end="115:21">s</name></expr></argument>, <argument pos:start="115:24" pos:end="115:45"><expr pos:start="115:24" pos:end="115:45"><name pos:start="115:24" pos:end="115:35">OPC_JCC_long</name> <operator pos:start="115:37" pos:end="115:37">+</operator> <name pos:start="115:39" pos:end="115:45">JCC_JNE</name></expr></argument>, <argument pos:start="115:48" pos:end="115:48"><expr pos:start="115:48" pos:end="115:48"><literal type="number" pos:start="115:48" pos:end="115:48">0</literal></expr></argument>, <argument pos:start="115:51" pos:end="115:51"><expr pos:start="115:51" pos:end="115:51"><literal type="number" pos:start="115:51" pos:end="115:51">0</literal></expr></argument>, <argument pos:start="115:54" pos:end="115:54"><expr pos:start="115:54" pos:end="115:54"><literal type="number" pos:start="115:54" pos:end="115:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:35"><expr pos:start="117:9" pos:end="117:34"><name pos:start="117:9" pos:end="117:20"><name pos:start="117:9" pos:end="117:17">label_ptr</name><index pos:start="117:18" pos:end="117:20">[<expr pos:start="117:19" pos:end="117:19"><literal type="number" pos:start="117:19" pos:end="117:19">1</literal></expr>]</index></name> <operator pos:start="117:22" pos:end="117:22">=</operator> <name pos:start="117:24" pos:end="117:34"><name pos:start="117:24" pos:end="117:24">s</name><operator pos:start="117:25" pos:end="117:26">-&gt;</operator><name pos:start="117:27" pos:end="117:34">code_ptr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:25"><expr pos:start="119:9" pos:end="119:24"><name pos:start="119:9" pos:end="119:19"><name pos:start="119:9" pos:end="119:9">s</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:19">code_ptr</name></name> <operator pos:start="119:21" pos:end="119:22">+=</operator> <literal type="number" pos:start="119:24" pos:end="119:24">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:19">/* TLB Hit.  */</comment>



    <comment type="block" pos:start="129:5" pos:end="129:28">/* add addend(r0), r1 */</comment>

    <expr_stmt pos:start="131:5" pos:end="133:64"><expr pos:start="131:5" pos:end="133:63"><call pos:start="131:5" pos:end="133:63"><name pos:start="131:5" pos:end="131:24">tcg_out_modrm_offset</name><argument_list pos:start="131:25" pos:end="133:63">(<argument pos:start="131:26" pos:end="131:26"><expr pos:start="131:26" pos:end="131:26"><name pos:start="131:26" pos:end="131:26">s</name></expr></argument>, <argument pos:start="131:29" pos:end="131:48"><expr pos:start="131:29" pos:end="131:48"><name pos:start="131:29" pos:end="131:40">OPC_ADD_GvEv</name> <operator pos:start="131:42" pos:end="131:42">+</operator> <name pos:start="131:44" pos:end="131:48">hrexw</name></expr></argument>, <argument pos:start="131:51" pos:end="131:52"><expr pos:start="131:51" pos:end="131:52"><name pos:start="131:51" pos:end="131:52">r1</name></expr></argument>, <argument pos:start="131:55" pos:end="131:56"><expr pos:start="131:55" pos:end="131:56"><name pos:start="131:55" pos:end="131:56">r0</name></expr></argument>,

                         <argument pos:start="133:26" pos:end="133:62"><expr pos:start="133:26" pos:end="133:62"><call pos:start="133:26" pos:end="133:54"><name pos:start="133:26" pos:end="133:33">offsetof</name><argument_list pos:start="133:34" pos:end="133:54">(<argument pos:start="133:35" pos:end="133:45"><expr pos:start="133:35" pos:end="133:45"><name pos:start="133:35" pos:end="133:45">CPUTLBEntry</name></expr></argument>, <argument pos:start="133:48" pos:end="133:53"><expr pos:start="133:48" pos:end="133:53"><name pos:start="133:48" pos:end="133:53">addend</name></expr></argument>)</argument_list></call> <operator pos:start="133:56" pos:end="133:56">-</operator> <name pos:start="133:58" pos:end="133:62">which</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
