<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8067.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">esp_pci_io_write</name><parameter_list pos:start="1:29" pos:end="3:61">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:66"><decl pos:start="1:44" pos:end="1:66"><type pos:start="1:44" pos:end="1:66"><name pos:start="1:44" pos:end="1:61">target_phys_addr_t</name></type> <name pos:start="1:63" pos:end="1:66">addr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:41"><decl pos:start="3:30" pos:end="3:41"><type pos:start="3:30" pos:end="3:41"><name pos:start="3:30" pos:end="3:37">uint64_t</name></type> <name pos:start="3:39" pos:end="3:41">val</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:60"><decl pos:start="3:44" pos:end="3:60"><type pos:start="3:44" pos:end="3:60"><name pos:start="3:44" pos:end="3:51">unsigned</name> <name pos:start="3:53" pos:end="3:55">int</name></type> <name pos:start="3:57" pos:end="3:60">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="83:1">{<block_content pos:start="7:5" pos:end="81:5">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">PCIESPState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">pci</name> <init pos:start="7:22" pos:end="7:29">= <expr pos:start="7:24" pos:end="7:29"><name pos:start="7:24" pos:end="7:29">opaque</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="53:5"><if pos:start="11:5" pos:end="53:5">if <condition pos:start="11:8" pos:end="11:29">(<expr pos:start="11:9" pos:end="11:28"><name pos:start="11:9" pos:end="11:12">size</name> <operator pos:start="11:14" pos:end="11:14">&lt;</operator> <literal type="number" pos:start="11:16" pos:end="11:16">4</literal> <operator pos:start="11:18" pos:end="11:19">||</operator> <name pos:start="11:21" pos:end="11:24">addr</name> <operator pos:start="11:26" pos:end="11:26">&amp;</operator> <literal type="number" pos:start="11:28" pos:end="11:28">3</literal></expr>)</condition> <block pos:start="11:31" pos:end="53:5">{<block_content pos:start="15:9" pos:end="51:17">

        <comment type="block" pos:start="13:9" pos:end="13:71">/* need to upgrade request: we only support 4-bytes accesses */</comment>

        <decl_stmt pos:start="15:9" pos:end="15:35"><decl pos:start="15:9" pos:end="15:28"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">uint32_t</name></type> <name pos:start="15:18" pos:end="15:24">current</name> <init pos:start="15:26" pos:end="15:28">= <expr pos:start="15:28" pos:end="15:28"><literal type="number" pos:start="15:28" pos:end="15:28">0</literal></expr></init></decl>, <decl pos:start="15:31" pos:end="15:34"><type ref="prev" pos:start="15:9" pos:end="15:16"/><name pos:start="15:31" pos:end="15:34">mask</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:18"><decl pos:start="17:9" pos:end="17:17"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:17">shift</name></decl>;</decl_stmt>



        <if_stmt pos:start="21:9" pos:end="33:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:24">(<expr pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:16">addr</name> <operator pos:start="21:18" pos:end="21:18">&lt;</operator> <literal type="number" pos:start="21:20" pos:end="21:23">0x40</literal></expr>)</condition> <block pos:start="21:26" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:48">

            <expr_stmt pos:start="23:13" pos:end="23:48"><expr pos:start="23:13" pos:end="23:47"><name pos:start="23:13" pos:end="23:19">current</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <name pos:start="23:23" pos:end="23:47"><name pos:start="23:23" pos:end="23:25">pci</name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:30">esp</name><operator pos:start="23:31" pos:end="23:31">.</operator><name pos:start="23:32" pos:end="23:36">wregs</name><index pos:start="23:37" pos:end="23:47">[<expr pos:start="23:38" pos:end="23:46"><name pos:start="23:38" pos:end="23:41">addr</name> <operator pos:start="23:43" pos:end="23:44">&gt;&gt;</operator> <literal type="number" pos:start="23:46" pos:end="23:46">2</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="25:11" pos:end="29:9">else if <condition pos:start="25:19" pos:end="25:31">(<expr pos:start="25:20" pos:end="25:30"><name pos:start="25:20" pos:end="25:23">addr</name> <operator pos:start="25:25" pos:end="25:25">&lt;</operator> <literal type="number" pos:start="25:27" pos:end="25:30">0x60</literal></expr>)</condition> <block pos:start="25:33" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:56">

            <expr_stmt pos:start="27:13" pos:end="27:56"><expr pos:start="27:13" pos:end="27:55"><name pos:start="27:13" pos:end="27:19">current</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <name pos:start="27:23" pos:end="27:55"><name pos:start="27:23" pos:end="27:25">pci</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:35">dma_regs</name><index pos:start="27:36" pos:end="27:55">[<expr pos:start="27:37" pos:end="27:54"><operator pos:start="27:37" pos:end="27:37">(</operator><name pos:start="27:38" pos:end="27:41">addr</name> <operator pos:start="27:43" pos:end="27:43">-</operator> <literal type="number" pos:start="27:45" pos:end="27:48">0x40</literal><operator pos:start="27:49" pos:end="27:49">)</operator> <operator pos:start="27:51" pos:end="27:52">&gt;&gt;</operator> <literal type="number" pos:start="27:54" pos:end="27:54">2</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="29:11" pos:end="33:9">else if <condition pos:start="29:19" pos:end="29:31">(<expr pos:start="29:20" pos:end="29:30"><name pos:start="29:20" pos:end="29:23">addr</name> <operator pos:start="29:25" pos:end="29:25">&lt;</operator> <literal type="number" pos:start="29:27" pos:end="29:30">0x74</literal></expr>)</condition> <block pos:start="29:33" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:32">

            <expr_stmt pos:start="31:13" pos:end="31:32"><expr pos:start="31:13" pos:end="31:31"><name pos:start="31:13" pos:end="31:19">current</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <name pos:start="31:23" pos:end="31:31"><name pos:start="31:23" pos:end="31:25">pci</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:31">sbac</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:31"><expr pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:13">shift</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <operator pos:start="37:17" pos:end="37:17">(</operator><literal type="number" pos:start="37:18" pos:end="37:20">4</literal> <operator pos:start="37:20" pos:end="37:20">-</operator> <name pos:start="37:22" pos:end="37:25">size</name><operator pos:start="37:26" pos:end="37:26">)</operator> <operator pos:start="37:28" pos:end="37:28">*</operator> <literal type="number" pos:start="37:30" pos:end="37:30">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:48"><expr pos:start="39:9" pos:end="39:47"><name pos:start="39:9" pos:end="39:12">mask</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <operator pos:start="39:16" pos:end="39:16">(</operator><operator pos:start="39:17" pos:end="39:17">~</operator><operator pos:start="39:18" pos:end="39:18">(</operator><name pos:start="39:19" pos:end="39:26">uint32_t</name><operator pos:start="39:27" pos:end="39:27">)</operator><literal type="number" pos:start="39:28" pos:end="39:28">0</literal> <operator pos:start="39:30" pos:end="39:31">&lt;&lt;</operator> <name pos:start="39:33" pos:end="39:37">shift</name><operator pos:start="39:38" pos:end="39:38">)</operator> <operator pos:start="39:40" pos:end="39:41">&gt;&gt;</operator> <name pos:start="39:43" pos:end="39:47">shift</name></expr>;</expr_stmt>



        <expr_stmt pos:start="43:9" pos:end="43:43"><expr pos:start="43:9" pos:end="43:42"><name pos:start="43:9" pos:end="43:13">shift</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <operator pos:start="43:17" pos:end="43:17">(</operator><operator pos:start="43:18" pos:end="43:18">(</operator><literal type="number" pos:start="43:19" pos:end="43:21">4</literal> <operator pos:start="43:21" pos:end="43:21">-</operator> <operator pos:start="43:23" pos:end="43:23">(</operator><name pos:start="43:24" pos:end="43:27">addr</name> <operator pos:start="43:29" pos:end="43:29">&amp;</operator> <literal type="number" pos:start="43:31" pos:end="43:31">3</literal><operator pos:start="43:32" pos:end="43:32">)</operator><operator pos:start="43:33" pos:end="43:33">)</operator> <operator pos:start="43:35" pos:end="43:35">&amp;</operator> <literal type="number" pos:start="43:37" pos:end="43:37">3</literal><operator pos:start="43:38" pos:end="43:38">)</operator> <operator pos:start="43:40" pos:end="43:40">*</operator> <literal type="number" pos:start="43:42" pos:end="43:42">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:22"><expr pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:11">val</name> <operator pos:start="45:13" pos:end="45:15">&lt;&lt;=</operator> <name pos:start="45:17" pos:end="45:21">shift</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:11">val</name> <operator pos:start="47:13" pos:end="47:14">|=</operator> <name pos:start="47:16" pos:end="47:22">current</name> <operator pos:start="47:24" pos:end="47:24">&amp;</operator> <operator pos:start="47:26" pos:end="47:26">~</operator><operator pos:start="47:27" pos:end="47:27">(</operator><name pos:start="47:28" pos:end="47:31">mask</name> <operator pos:start="47:33" pos:end="47:34">&lt;&lt;</operator> <name pos:start="47:36" pos:end="47:40">shift</name><operator pos:start="47:41" pos:end="47:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:19"><expr pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:12">addr</name> <operator pos:start="49:14" pos:end="49:15">&amp;=</operator> <operator pos:start="49:17" pos:end="49:17">~</operator><literal type="number" pos:start="49:18" pos:end="49:18">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:17"><expr pos:start="51:9" pos:end="51:16"><name pos:start="51:9" pos:end="51:12">size</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <literal type="number" pos:start="51:16" pos:end="51:16">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="81:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:20">(<expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:12">addr</name> <operator pos:start="57:14" pos:end="57:14">&lt;</operator> <literal type="number" pos:start="57:16" pos:end="57:19">0x40</literal></expr>)</condition> <block pos:start="57:22" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:49">

        <comment type="block" pos:start="59:9" pos:end="59:27">/* SCSI core reg */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:49"><expr pos:start="61:9" pos:end="61:48"><call pos:start="61:9" pos:end="61:48"><name pos:start="61:9" pos:end="61:21">esp_reg_write</name><argument_list pos:start="61:22" pos:end="61:48">(<argument pos:start="61:23" pos:end="61:31"><expr pos:start="61:23" pos:end="61:31"><operator pos:start="61:23" pos:end="61:23">&amp;</operator><name pos:start="61:24" pos:end="61:31"><name pos:start="61:24" pos:end="61:26">pci</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:31">esp</name></name></expr></argument>, <argument pos:start="61:34" pos:end="61:42"><expr pos:start="61:34" pos:end="61:42"><name pos:start="61:34" pos:end="61:37">addr</name> <operator pos:start="61:39" pos:end="61:40">&gt;&gt;</operator> <literal type="number" pos:start="61:42" pos:end="61:42">2</literal></expr></argument>, <argument pos:start="61:45" pos:end="61:47"><expr pos:start="61:45" pos:end="61:47"><name pos:start="61:45" pos:end="61:47">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="63:7" pos:end="69:5">else if <condition pos:start="63:15" pos:end="63:27">(<expr pos:start="63:16" pos:end="63:26"><name pos:start="63:16" pos:end="63:19">addr</name> <operator pos:start="63:21" pos:end="63:21">&lt;</operator> <literal type="number" pos:start="63:23" pos:end="63:26">0x60</literal></expr>)</condition> <block pos:start="63:29" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:56">

        <comment type="block" pos:start="65:9" pos:end="65:25">/* PCI DMA CCB */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:56"><expr pos:start="67:9" pos:end="67:55"><call pos:start="67:9" pos:end="67:55"><name pos:start="67:9" pos:end="67:25">esp_pci_dma_write</name><argument_list pos:start="67:26" pos:end="67:55">(<argument pos:start="67:27" pos:end="67:29"><expr pos:start="67:27" pos:end="67:29"><name pos:start="67:27" pos:end="67:29">pci</name></expr></argument>, <argument pos:start="67:32" pos:end="67:49"><expr pos:start="67:32" pos:end="67:49"><operator pos:start="67:32" pos:end="67:32">(</operator><name pos:start="67:33" pos:end="67:36">addr</name> <operator pos:start="67:38" pos:end="67:38">-</operator> <literal type="number" pos:start="67:40" pos:end="67:43">0x40</literal><operator pos:start="67:44" pos:end="67:44">)</operator> <operator pos:start="67:46" pos:end="67:47">&gt;&gt;</operator> <literal type="number" pos:start="67:49" pos:end="67:49">2</literal></expr></argument>, <argument pos:start="67:52" pos:end="67:54"><expr pos:start="67:52" pos:end="67:54"><name pos:start="67:52" pos:end="67:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="69:7" pos:end="77:5">else if <condition pos:start="69:15" pos:end="69:28">(<expr pos:start="69:16" pos:end="69:27"><name pos:start="69:16" pos:end="69:19">addr</name> <operator pos:start="69:21" pos:end="69:22">==</operator> <literal type="number" pos:start="69:24" pos:end="69:27">0x70</literal></expr>)</condition> <block pos:start="69:30" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:24">

        <comment type="block" pos:start="71:9" pos:end="71:38">/* DMA SCSI Bus and control */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:49"><expr pos:start="73:9" pos:end="73:48"><call pos:start="73:9" pos:end="73:48"><name pos:start="73:9" pos:end="73:32">trace_esp_pci_sbac_write</name><argument_list pos:start="73:33" pos:end="73:48">(<argument pos:start="73:34" pos:end="73:42"><expr pos:start="73:34" pos:end="73:42"><name pos:start="73:34" pos:end="73:42"><name pos:start="73:34" pos:end="73:36">pci</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:42">sbac</name></name></expr></argument>, <argument pos:start="73:45" pos:end="73:47"><expr pos:start="73:45" pos:end="73:47"><name pos:start="73:45" pos:end="73:47">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:24"><expr pos:start="75:9" pos:end="75:23"><name pos:start="75:9" pos:end="75:17"><name pos:start="75:9" pos:end="75:11">pci</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:17">sbac</name></name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:23">val</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="81:5">else <block pos:start="77:12" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:53">

        <expr_stmt pos:start="79:9" pos:end="79:53"><expr pos:start="79:9" pos:end="79:52"><call pos:start="79:9" pos:end="79:52"><name pos:start="79:9" pos:end="79:41">trace_esp_pci_error_invalid_write</name><argument_list pos:start="79:42" pos:end="79:52">(<argument pos:start="79:43" pos:end="79:51"><expr pos:start="79:43" pos:end="79:51"><operator pos:start="79:43" pos:end="79:43">(</operator><name pos:start="79:44" pos:end="79:46">int</name><operator pos:start="79:47" pos:end="79:47">)</operator><name pos:start="79:48" pos:end="79:51">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
