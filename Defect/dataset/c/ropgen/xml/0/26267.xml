<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26267.c" pos:tabs="8"><function pos:start="1:1" pos:end="227:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">load_uboot_image</name><parameter_list pos:start="1:28" pos:end="7:51">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:38">char</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:48">filename</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:60"><decl pos:start="1:51" pos:end="1:60"><type pos:start="1:51" pos:end="1:60"><name pos:start="1:51" pos:end="1:56">hwaddr</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:60">ep</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:78"><decl pos:start="1:63" pos:end="1:78"><type pos:start="1:63" pos:end="1:78"><name pos:start="1:63" pos:end="1:68">hwaddr</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:78">loadaddr</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:41"><decl pos:start="3:29" pos:end="3:41"><type pos:start="3:29" pos:end="3:41"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:41">is_linux</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:61"><decl pos:start="3:44" pos:end="3:61"><type pos:start="3:44" pos:end="3:61"><name pos:start="3:44" pos:end="3:50">uint8_t</name></type> <name pos:start="3:52" pos:end="3:61">image_type</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:70"><function_decl pos:start="5:29" pos:end="5:70"><type pos:start="5:29" pos:end="5:36"><name pos:start="5:29" pos:end="5:36">uint64_t</name></type> (<modifier pos:start="5:39" pos:end="5:39">*</modifier><name pos:start="5:40" pos:end="5:51">translate_fn</name>)<parameter_list pos:start="5:53" pos:end="5:70">(<parameter pos:start="5:54" pos:end="5:59"><decl pos:start="5:54" pos:end="5:59"><type pos:start="5:54" pos:end="5:59"><name pos:start="5:54" pos:end="5:57">void</name> <modifier pos:start="5:59" pos:end="5:59">*</modifier></type></decl></parameter>, <parameter pos:start="5:62" pos:end="5:69"><decl pos:start="5:62" pos:end="5:69"><type pos:start="5:62" pos:end="5:69"><name pos:start="5:62" pos:end="5:69">uint64_t</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:50"><decl pos:start="7:29" pos:end="7:50"><type pos:start="7:29" pos:end="7:50"><name pos:start="7:29" pos:end="7:32">void</name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:50">translate_opaque</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="227:1">{<block_content pos:start="11:5" pos:end="225:15">

    <decl_stmt pos:start="11:5" pos:end="11:11"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:10">hwaddr</name></type> <name pos:start="15:12" pos:end="15:18">address</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:24">uboot_image_header_t</name></type> <name pos:start="17:26" pos:end="17:26">h</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:35"><decl pos:start="19:5" pos:end="19:34"><type pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:24">uboot_image_header_t</name> <modifier pos:start="19:26" pos:end="19:26">*</modifier></type><name pos:start="19:27" pos:end="19:29">hdr</name> <init pos:start="19:31" pos:end="19:34">= <expr pos:start="19:33" pos:end="19:34"><operator pos:start="19:33" pos:end="19:33">&amp;</operator><name pos:start="19:34" pos:end="19:34">h</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:11">uint8_t</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier></type><name pos:start="21:14" pos:end="21:17">data</name> <init pos:start="21:19" pos:end="21:24">= <expr pos:start="21:21" pos:end="21:24"><name pos:start="21:21" pos:end="21:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name> <init pos:start="23:13" pos:end="23:16">= <expr pos:start="23:15" pos:end="23:16"><operator pos:start="23:15" pos:end="23:15">-</operator><literal type="number" pos:start="23:16" pos:end="23:16">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:21">do_uncompress</name> <init pos:start="25:23" pos:end="25:25">= <expr pos:start="25:25" pos:end="25:25"><literal type="number" pos:start="25:25" pos:end="25:25">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:45"><expr pos:start="29:5" pos:end="29:44"><name pos:start="29:5" pos:end="29:6">fd</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:44"><name pos:start="29:10" pos:end="29:13">open</name><argument_list pos:start="29:14" pos:end="29:44">(<argument pos:start="29:15" pos:end="29:22"><expr pos:start="29:15" pos:end="29:22"><name pos:start="29:15" pos:end="29:22">filename</name></expr></argument>, <argument pos:start="29:25" pos:end="29:43"><expr pos:start="29:25" pos:end="29:43"><name pos:start="29:25" pos:end="29:32">O_RDONLY</name> <operator pos:start="29:34" pos:end="29:34">|</operator> <name pos:start="29:36" pos:end="29:43">O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:18"><if pos:start="31:5" pos:end="33:18">if <condition pos:start="31:8" pos:end="31:15">(<expr pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:10">fd</name> <operator pos:start="31:12" pos:end="31:12">&lt;</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:18"><block_content pos:start="33:9" pos:end="33:18">

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:55"><expr pos:start="37:5" pos:end="37:54"><name pos:start="37:5" pos:end="37:8">size</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <call pos:start="37:12" pos:end="37:54"><name pos:start="37:12" pos:end="37:15">read</name><argument_list pos:start="37:16" pos:end="37:54">(<argument pos:start="37:17" pos:end="37:18"><expr pos:start="37:17" pos:end="37:18"><name pos:start="37:17" pos:end="37:18">fd</name></expr></argument>, <argument pos:start="37:21" pos:end="37:23"><expr pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:23">hdr</name></expr></argument>, <argument pos:start="37:26" pos:end="37:53"><expr pos:start="37:26" pos:end="37:53"><sizeof pos:start="37:26" pos:end="37:53">sizeof<argument_list pos:start="37:32" pos:end="37:53">(<argument pos:start="37:33" pos:end="37:52"><expr pos:start="37:33" pos:end="37:52"><name pos:start="37:33" pos:end="37:52">uboot_image_header_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:17"><if pos:start="39:5" pos:end="41:17">if <condition pos:start="39:8" pos:end="39:17">(<expr pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:12">size</name> <operator pos:start="39:14" pos:end="39:14">&lt;</operator> <literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:17"><block_content pos:start="41:9" pos:end="41:17">

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><call pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:22">bswap_uboot_header</name><argument_list pos:start="45:23" pos:end="45:27">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="51:17"><if pos:start="49:5" pos:end="51:17">if <condition pos:start="49:8" pos:end="49:34">(<expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:11">hdr</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:21">ih_magic</name></name> <operator pos:start="49:23" pos:end="49:24">!=</operator> <name pos:start="49:26" pos:end="49:33">IH_MAGIC</name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:17"><block_content pos:start="51:9" pos:end="51:17">

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">out</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:35">(<expr pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:11">hdr</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:20">ih_type</name></name> <operator pos:start="55:22" pos:end="55:23">!=</operator> <name pos:start="55:25" pos:end="55:34">image_type</name></expr>)</condition> <block pos:start="55:37" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:17">

        <expr_stmt pos:start="57:9" pos:end="59:28"><expr pos:start="57:9" pos:end="59:27"><call pos:start="57:9" pos:end="59:27"><name pos:start="57:9" pos:end="57:15">fprintf</name><argument_list pos:start="57:16" pos:end="59:27">(<argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">stderr</name></expr></argument>, <argument pos:start="57:25" pos:end="57:60"><expr pos:start="57:25" pos:end="57:60"><literal type="string" pos:start="57:25" pos:end="57:60">"Wrong image type %d, expected %d\n"</literal></expr></argument>, <argument pos:start="57:63" pos:end="57:74"><expr pos:start="57:63" pos:end="57:74"><name pos:start="57:63" pos:end="57:74"><name pos:start="57:63" pos:end="57:65">hdr</name><operator pos:start="57:66" pos:end="57:67">-&gt;</operator><name pos:start="57:68" pos:end="57:74">ih_type</name></name></expr></argument>,

                <argument pos:start="59:17" pos:end="59:26"><expr pos:start="59:17" pos:end="59:26"><name pos:start="59:17" pos:end="59:26">image_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:17">goto <name pos:start="61:14" pos:end="61:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:45">/* TODO: Implement other image types.  */</comment>

    <switch pos:start="69:5" pos:end="155:5">switch <condition pos:start="69:12" pos:end="69:25">(<expr pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:15">hdr</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:24">ih_type</name></name></expr>)</condition> <block pos:start="69:27" pos:end="155:5">{<block_content pos:start="71:5" pos:end="153:17">

    <case pos:start="71:5" pos:end="71:24">case <expr pos:start="71:10" pos:end="71:23"><name pos:start="71:10" pos:end="71:23">IH_TYPE_KERNEL</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:31"><expr pos:start="73:9" pos:end="73:30"><name pos:start="73:9" pos:end="73:15">address</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <name pos:start="73:19" pos:end="73:30"><name pos:start="73:19" pos:end="73:21">hdr</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:30">ih_load</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="75:9" pos:end="79:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:25">(<expr pos:start="75:13" pos:end="75:24"><name pos:start="75:13" pos:end="75:24">translate_fn</name></expr>)</condition> <block pos:start="75:27" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:62">

            <expr_stmt pos:start="77:13" pos:end="77:62"><expr pos:start="77:13" pos:end="77:61"><name pos:start="77:13" pos:end="77:19">address</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:61"><name pos:start="77:23" pos:end="77:34">translate_fn</name><argument_list pos:start="77:35" pos:end="77:61">(<argument pos:start="77:36" pos:end="77:51"><expr pos:start="77:36" pos:end="77:51"><name pos:start="77:36" pos:end="77:51">translate_opaque</name></expr></argument>, <argument pos:start="77:54" pos:end="77:60"><expr pos:start="77:54" pos:end="77:60"><name pos:start="77:54" pos:end="77:60">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="81:9" pos:end="85:9"><if pos:start="81:9" pos:end="85:9">if <condition pos:start="81:12" pos:end="81:21">(<expr pos:start="81:13" pos:end="81:20"><name pos:start="81:13" pos:end="81:20">loadaddr</name></expr>)</condition> <block pos:start="81:23" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:37">

            <expr_stmt pos:start="83:13" pos:end="83:37"><expr pos:start="83:13" pos:end="83:36"><operator pos:start="83:13" pos:end="83:13">*</operator><name pos:start="83:14" pos:end="83:21">loadaddr</name> <operator pos:start="83:23" pos:end="83:23">=</operator> <name pos:start="83:25" pos:end="83:36"><name pos:start="83:25" pos:end="83:27">hdr</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:36">ih_load</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="89:9" pos:end="111:9">switch <condition pos:start="89:16" pos:end="89:29">(<expr pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:19">hdr</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:28">ih_comp</name></name></expr>)</condition> <block pos:start="89:31" pos:end="111:9">{<block_content pos:start="91:9" pos:end="109:21">

        <case pos:start="91:9" pos:end="91:26">case <expr pos:start="91:14" pos:end="91:25"><name pos:start="91:14" pos:end="91:25">IH_COMP_NONE</name></expr>:</case>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        <case pos:start="95:9" pos:end="95:26">case <expr pos:start="95:14" pos:end="95:25"><name pos:start="95:14" pos:end="95:25">IH_COMP_GZIP</name></expr>:</case>

            <expr_stmt pos:start="97:13" pos:end="97:30"><expr pos:start="97:13" pos:end="97:29"><name pos:start="97:13" pos:end="97:25">do_uncompress</name> <operator pos:start="97:27" pos:end="97:27">=</operator> <literal type="number" pos:start="97:29" pos:end="97:29">1</literal></expr>;</expr_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        <default pos:start="101:9" pos:end="101:16">default:</default>

            <expr_stmt pos:start="103:13" pos:end="107:34"><expr pos:start="103:13" pos:end="107:33"><call pos:start="103:13" pos:end="107:33"><name pos:start="103:13" pos:end="103:19">fprintf</name><argument_list pos:start="103:20" pos:end="107:33">(<argument pos:start="103:21" pos:end="103:26"><expr pos:start="103:21" pos:end="103:26"><name pos:start="103:21" pos:end="103:26">stderr</name></expr></argument>,

                    <argument pos:start="105:21" pos:end="105:77"><expr pos:start="105:21" pos:end="105:77"><literal type="string" pos:start="105:21" pos:end="105:77">"Unable to load u-boot images with compression type %d\n"</literal></expr></argument>,

                    <argument pos:start="107:21" pos:end="107:32"><expr pos:start="107:21" pos:end="107:32"><name pos:start="107:21" pos:end="107:32"><name pos:start="107:21" pos:end="107:23">hdr</name><operator pos:start="107:24" pos:end="107:25">-&gt;</operator><name pos:start="107:26" pos:end="107:32">ih_comp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="109:13" pos:end="109:21">goto <name pos:start="109:18" pos:end="109:20">out</name>;</goto>

        </block_content>}</block></switch>



        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:15">(<expr pos:start="115:13" pos:end="115:14"><name pos:start="115:13" pos:end="115:14">ep</name></expr>)</condition> <block pos:start="115:17" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:29">

            <expr_stmt pos:start="117:13" pos:end="117:29"><expr pos:start="117:13" pos:end="117:28"><operator pos:start="117:13" pos:end="117:13">*</operator><name pos:start="117:14" pos:end="117:15">ep</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <name pos:start="117:19" pos:end="117:28"><name pos:start="117:19" pos:end="117:21">hdr</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:28">ih_ep</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="123:9" pos:end="123:36">/* TODO: Check CPU type.  */</comment>

        <if_stmt pos:start="125:9" pos:end="137:9"><if pos:start="125:9" pos:end="137:9">if <condition pos:start="125:12" pos:end="125:21">(<expr pos:start="125:13" pos:end="125:20"><name pos:start="125:13" pos:end="125:20">is_linux</name></expr>)</condition> <block pos:start="125:23" pos:end="137:9">{<block_content pos:start="127:13" pos:end="135:13">

            <if_stmt pos:start="127:13" pos:end="135:13"><if pos:start="127:13" pos:end="131:13">if <condition pos:start="127:16" pos:end="127:42">(<expr pos:start="127:17" pos:end="127:41"><name pos:start="127:17" pos:end="127:26"><name pos:start="127:17" pos:end="127:19">hdr</name><operator pos:start="127:20" pos:end="127:21">-&gt;</operator><name pos:start="127:22" pos:end="127:26">ih_os</name></name> <operator pos:start="127:28" pos:end="127:29">==</operator> <name pos:start="127:31" pos:end="127:41">IH_OS_LINUX</name></expr>)</condition> <block pos:start="127:44" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:30">

                <expr_stmt pos:start="129:17" pos:end="129:30"><expr pos:start="129:17" pos:end="129:29"><operator pos:start="129:17" pos:end="129:17">*</operator><name pos:start="129:18" pos:end="129:25">is_linux</name> <operator pos:start="129:27" pos:end="129:27">=</operator> <literal type="number" pos:start="129:29" pos:end="129:29">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="131:15" pos:end="135:13">else <block pos:start="131:20" pos:end="135:13">{<block_content pos:start="133:17" pos:end="133:30">

                <expr_stmt pos:start="133:17" pos:end="133:30"><expr pos:start="133:17" pos:end="133:29"><operator pos:start="133:17" pos:end="133:17">*</operator><name pos:start="133:18" pos:end="133:25">is_linux</name> <operator pos:start="133:27" pos:end="133:27">=</operator> <literal type="number" pos:start="133:29" pos:end="133:29">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <break pos:start="141:9" pos:end="141:14">break;</break>

    <case pos:start="143:5" pos:end="143:25">case <expr pos:start="143:10" pos:end="143:24"><name pos:start="143:10" pos:end="143:24">IH_TYPE_RAMDISK</name></expr>:</case>

        <expr_stmt pos:start="145:9" pos:end="145:28"><expr pos:start="145:9" pos:end="145:27"><name pos:start="145:9" pos:end="145:15">address</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <operator pos:start="145:19" pos:end="145:19">*</operator><name pos:start="145:20" pos:end="145:27">loadaddr</name></expr>;</expr_stmt>

        <break pos:start="147:9" pos:end="147:14">break;</break>

    <default pos:start="149:5" pos:end="149:12">default:</default>

        <expr_stmt pos:start="151:9" pos:end="151:76"><expr pos:start="151:9" pos:end="151:75"><call pos:start="151:9" pos:end="151:75"><name pos:start="151:9" pos:end="151:15">fprintf</name><argument_list pos:start="151:16" pos:end="151:75">(<argument pos:start="151:17" pos:end="151:22"><expr pos:start="151:17" pos:end="151:22"><name pos:start="151:17" pos:end="151:22">stderr</name></expr></argument>, <argument pos:start="151:25" pos:end="151:60"><expr pos:start="151:25" pos:end="151:60"><literal type="string" pos:start="151:25" pos:end="151:60">"Unsupported u-boot image type %d\n"</literal></expr></argument>, <argument pos:start="151:63" pos:end="151:74"><expr pos:start="151:63" pos:end="151:74"><name pos:start="151:63" pos:end="151:74"><name pos:start="151:63" pos:end="151:65">hdr</name><operator pos:start="151:66" pos:end="151:67">-&gt;</operator><name pos:start="151:68" pos:end="151:74">ih_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="153:9" pos:end="153:17">goto <name pos:start="153:14" pos:end="153:16">out</name>;</goto>

    </block_content>}</block></switch>



    <expr_stmt pos:start="159:5" pos:end="159:34"><expr pos:start="159:5" pos:end="159:33"><name pos:start="159:5" pos:end="159:8">data</name> <operator pos:start="159:10" pos:end="159:10">=</operator> <call pos:start="159:12" pos:end="159:33"><name pos:start="159:12" pos:end="159:19">g_malloc</name><argument_list pos:start="159:20" pos:end="159:33">(<argument pos:start="159:21" pos:end="159:32"><expr pos:start="159:21" pos:end="159:32"><name pos:start="159:21" pos:end="159:32"><name pos:start="159:21" pos:end="159:23">hdr</name><operator pos:start="159:24" pos:end="159:25">-&gt;</operator><name pos:start="159:26" pos:end="159:32">ih_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="163:5" pos:end="169:5"><if pos:start="163:5" pos:end="169:5">if <condition pos:start="163:8" pos:end="163:53">(<expr pos:start="163:9" pos:end="163:52"><call pos:start="163:9" pos:end="163:36"><name pos:start="163:9" pos:end="163:12">read</name><argument_list pos:start="163:13" pos:end="163:36">(<argument pos:start="163:14" pos:end="163:15"><expr pos:start="163:14" pos:end="163:15"><name pos:start="163:14" pos:end="163:15">fd</name></expr></argument>, <argument pos:start="163:18" pos:end="163:21"><expr pos:start="163:18" pos:end="163:21"><name pos:start="163:18" pos:end="163:21">data</name></expr></argument>, <argument pos:start="163:24" pos:end="163:35"><expr pos:start="163:24" pos:end="163:35"><name pos:start="163:24" pos:end="163:35"><name pos:start="163:24" pos:end="163:26">hdr</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:35">ih_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="163:38" pos:end="163:39">!=</operator> <name pos:start="163:41" pos:end="163:52"><name pos:start="163:41" pos:end="163:43">hdr</name><operator pos:start="163:44" pos:end="163:45">-&gt;</operator><name pos:start="163:46" pos:end="163:52">ih_size</name></name></expr>)</condition> <block pos:start="163:55" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:17">

        <expr_stmt pos:start="165:9" pos:end="165:48"><expr pos:start="165:9" pos:end="165:47"><call pos:start="165:9" pos:end="165:47"><name pos:start="165:9" pos:end="165:15">fprintf</name><argument_list pos:start="165:16" pos:end="165:47">(<argument pos:start="165:17" pos:end="165:22"><expr pos:start="165:17" pos:end="165:22"><name pos:start="165:17" pos:end="165:22">stderr</name></expr></argument>, <argument pos:start="165:25" pos:end="165:46"><expr pos:start="165:25" pos:end="165:46"><literal type="string" pos:start="165:25" pos:end="165:46">"Error reading file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="167:9" pos:end="167:17">goto <name pos:start="167:14" pos:end="167:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="173:5" pos:end="205:5"><if pos:start="173:5" pos:end="205:5">if <condition pos:start="173:8" pos:end="173:22">(<expr pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:21">do_uncompress</name></expr>)</condition> <block pos:start="173:24" pos:end="205:5">{<block_content pos:start="175:9" pos:end="203:29">

        <decl_stmt pos:start="175:9" pos:end="175:33"><decl pos:start="175:9" pos:end="175:32"><type pos:start="175:9" pos:end="175:17"><name pos:start="175:9" pos:end="175:15">uint8_t</name> <modifier pos:start="175:17" pos:end="175:17">*</modifier></type><name pos:start="175:18" pos:end="175:32">compressed_data</name></decl>;</decl_stmt>

        <decl_stmt pos:start="177:9" pos:end="177:25"><decl pos:start="177:9" pos:end="177:24"><type pos:start="177:9" pos:end="177:14"><name pos:start="177:9" pos:end="177:14">size_t</name></type> <name pos:start="177:16" pos:end="177:24">max_bytes</name></decl>;</decl_stmt>

        <decl_stmt pos:start="179:9" pos:end="179:22"><decl pos:start="179:9" pos:end="179:21"><type pos:start="179:9" pos:end="179:15"><name pos:start="179:9" pos:end="179:15">ssize_t</name></type> <name pos:start="179:17" pos:end="179:21">bytes</name></decl>;</decl_stmt>



        <expr_stmt pos:start="183:9" pos:end="183:31"><expr pos:start="183:9" pos:end="183:30"><name pos:start="183:9" pos:end="183:23">compressed_data</name> <operator pos:start="183:25" pos:end="183:25">=</operator> <name pos:start="183:27" pos:end="183:30">data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:43"><expr pos:start="185:9" pos:end="185:42"><name pos:start="185:9" pos:end="185:17">max_bytes</name> <operator pos:start="185:19" pos:end="185:19">=</operator> <name pos:start="185:21" pos:end="185:42">UBOOT_MAX_GUNZIP_BYTES</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:35"><expr pos:start="187:9" pos:end="187:34"><name pos:start="187:9" pos:end="187:12">data</name> <operator pos:start="187:14" pos:end="187:14">=</operator> <call pos:start="187:16" pos:end="187:34"><name pos:start="187:16" pos:end="187:23">g_malloc</name><argument_list pos:start="187:24" pos:end="187:34">(<argument pos:start="187:25" pos:end="187:33"><expr pos:start="187:25" pos:end="187:33"><name pos:start="187:25" pos:end="187:33">max_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="191:9" pos:end="191:71"><expr pos:start="191:9" pos:end="191:70"><name pos:start="191:9" pos:end="191:13">bytes</name> <operator pos:start="191:15" pos:end="191:15">=</operator> <call pos:start="191:17" pos:end="191:70"><name pos:start="191:17" pos:end="191:22">gunzip</name><argument_list pos:start="191:23" pos:end="191:70">(<argument pos:start="191:24" pos:end="191:27"><expr pos:start="191:24" pos:end="191:27"><name pos:start="191:24" pos:end="191:27">data</name></expr></argument>, <argument pos:start="191:30" pos:end="191:38"><expr pos:start="191:30" pos:end="191:38"><name pos:start="191:30" pos:end="191:38">max_bytes</name></expr></argument>, <argument pos:start="191:41" pos:end="191:55"><expr pos:start="191:41" pos:end="191:55"><name pos:start="191:41" pos:end="191:55">compressed_data</name></expr></argument>, <argument pos:start="191:58" pos:end="191:69"><expr pos:start="191:58" pos:end="191:69"><name pos:start="191:58" pos:end="191:69"><name pos:start="191:58" pos:end="191:60">hdr</name><operator pos:start="191:61" pos:end="191:62">-&gt;</operator><name pos:start="191:63" pos:end="191:69">ih_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:32"><expr pos:start="193:9" pos:end="193:31"><call pos:start="193:9" pos:end="193:31"><name pos:start="193:9" pos:end="193:14">g_free</name><argument_list pos:start="193:15" pos:end="193:31">(<argument pos:start="193:16" pos:end="193:30"><expr pos:start="193:16" pos:end="193:30"><name pos:start="193:16" pos:end="193:30">compressed_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="201:9"><if pos:start="195:9" pos:end="201:9">if <condition pos:start="195:12" pos:end="195:22">(<expr pos:start="195:13" pos:end="195:21"><name pos:start="195:13" pos:end="195:17">bytes</name> <operator pos:start="195:19" pos:end="195:19">&lt;</operator> <literal type="number" pos:start="195:21" pos:end="195:21">0</literal></expr>)</condition> <block pos:start="195:24" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:21">

            <expr_stmt pos:start="197:13" pos:end="197:69"><expr pos:start="197:13" pos:end="197:68"><call pos:start="197:13" pos:end="197:68"><name pos:start="197:13" pos:end="197:19">fprintf</name><argument_list pos:start="197:20" pos:end="197:68">(<argument pos:start="197:21" pos:end="197:26"><expr pos:start="197:21" pos:end="197:26"><name pos:start="197:21" pos:end="197:26">stderr</name></expr></argument>, <argument pos:start="197:29" pos:end="197:67"><expr pos:start="197:29" pos:end="197:67"><literal type="string" pos:start="197:29" pos:end="197:67">"Unable to decompress gzipped image!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="199:13" pos:end="199:21">goto <name pos:start="199:18" pos:end="199:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:29"><expr pos:start="203:9" pos:end="203:28"><name pos:start="203:9" pos:end="203:20"><name pos:start="203:9" pos:end="203:11">hdr</name><operator pos:start="203:12" pos:end="203:13">-&gt;</operator><name pos:start="203:14" pos:end="203:20">ih_size</name></name> <operator pos:start="203:22" pos:end="203:22">=</operator> <name pos:start="203:24" pos:end="203:28">bytes</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:62"><expr pos:start="209:5" pos:end="209:61"><call pos:start="209:5" pos:end="209:61"><name pos:start="209:5" pos:end="209:22">rom_add_blob_fixed</name><argument_list pos:start="209:23" pos:end="209:61">(<argument pos:start="209:24" pos:end="209:31"><expr pos:start="209:24" pos:end="209:31"><name pos:start="209:24" pos:end="209:31">filename</name></expr></argument>, <argument pos:start="209:34" pos:end="209:37"><expr pos:start="209:34" pos:end="209:37"><name pos:start="209:34" pos:end="209:37">data</name></expr></argument>, <argument pos:start="209:40" pos:end="209:51"><expr pos:start="209:40" pos:end="209:51"><name pos:start="209:40" pos:end="209:51"><name pos:start="209:40" pos:end="209:42">hdr</name><operator pos:start="209:43" pos:end="209:44">-&gt;</operator><name pos:start="209:45" pos:end="209:51">ih_size</name></name></expr></argument>, <argument pos:start="209:54" pos:end="209:60"><expr pos:start="209:54" pos:end="209:60"><name pos:start="209:54" pos:end="209:60">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="213:5" pos:end="213:23"><expr pos:start="213:5" pos:end="213:22"><name pos:start="213:5" pos:end="213:7">ret</name> <operator pos:start="213:9" pos:end="213:9">=</operator> <name pos:start="213:11" pos:end="213:22"><name pos:start="213:11" pos:end="213:13">hdr</name><operator pos:start="213:14" pos:end="213:15">-&gt;</operator><name pos:start="213:16" pos:end="213:22">ih_size</name></name></expr>;</expr_stmt>



<label pos:start="217:1" pos:end="217:4"><name pos:start="217:1" pos:end="217:3">out</name>:</label>

    <if_stmt pos:start="219:5" pos:end="221:21"><if pos:start="219:5" pos:end="221:21">if <condition pos:start="219:8" pos:end="219:13">(<expr pos:start="219:9" pos:end="219:12"><name pos:start="219:9" pos:end="219:12">data</name></expr>)</condition><block type="pseudo" pos:start="221:9" pos:end="221:21"><block_content pos:start="221:9" pos:end="221:21">

        <expr_stmt pos:start="221:9" pos:end="221:21"><expr pos:start="221:9" pos:end="221:20"><call pos:start="221:9" pos:end="221:20"><name pos:start="221:9" pos:end="221:14">g_free</name><argument_list pos:start="221:15" pos:end="221:20">(<argument pos:start="221:16" pos:end="221:19"><expr pos:start="221:16" pos:end="221:19"><name pos:start="221:16" pos:end="221:19">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:14"><expr pos:start="223:5" pos:end="223:13"><call pos:start="223:5" pos:end="223:13"><name pos:start="223:5" pos:end="223:9">close</name><argument_list pos:start="223:10" pos:end="223:13">(<argument pos:start="223:11" pos:end="223:12"><expr pos:start="223:11" pos:end="223:12"><name pos:start="223:11" pos:end="223:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="225:5" pos:end="225:15">return <expr pos:start="225:12" pos:end="225:14"><name pos:start="225:12" pos:end="225:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
