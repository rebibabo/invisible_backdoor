<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3311.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">DMA_read_memory</name> <parameter_list pos:start="1:21" pos:end="1:60">(<parameter pos:start="1:22" pos:end="1:30"><decl pos:start="1:22" pos:end="1:30"><type pos:start="1:22" pos:end="1:30"><name pos:start="1:22" pos:end="1:24">int</name></type> <name pos:start="1:26" pos:end="1:30">nchan</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:41"><decl pos:start="1:33" pos:end="1:41"><type pos:start="1:33" pos:end="1:41"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">buf</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:50"><decl pos:start="1:44" pos:end="1:50"><type pos:start="1:44" pos:end="1:50"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:50">pos</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:59"><decl pos:start="1:53" pos:end="1:59"><type pos:start="1:53" pos:end="1:59"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:59">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:15">

    <decl_stmt pos:start="5:5" pos:end="5:69"><decl pos:start="5:5" pos:end="5:68"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:19">dma_regs</name></name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">r</name> <init pos:start="5:24" pos:end="5:68">= <expr pos:start="5:26" pos:end="5:68"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:52"><name pos:start="5:27" pos:end="5:41">dma_controllers</name><index pos:start="5:42" pos:end="5:52">[<expr pos:start="5:43" pos:end="5:51"><name pos:start="5:43" pos:end="5:47">nchan</name> <operator pos:start="5:49" pos:end="5:49">&gt;</operator> <literal type="number" pos:start="5:51" pos:end="5:51">3</literal></expr>]</index></name><operator pos:start="5:53" pos:end="5:53">.</operator><name pos:start="5:54" pos:end="5:68"><name pos:start="5:54" pos:end="5:57">regs</name><index pos:start="5:58" pos:end="5:68">[<expr pos:start="5:59" pos:end="5:67"><name pos:start="5:59" pos:end="5:63">nchan</name> <operator pos:start="5:65" pos:end="5:65">&amp;</operator> <literal type="number" pos:start="5:67" pos:end="5:67">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:89"><decl pos:start="7:5" pos:end="7:88"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22">target_phys_addr_t</name></type> <name pos:start="7:24" pos:end="7:27">addr</name> <init pos:start="7:29" pos:end="7:88">= <expr pos:start="7:31" pos:end="7:88"><operator pos:start="7:31" pos:end="7:31">(</operator><operator pos:start="7:32" pos:end="7:32">(</operator><name pos:start="7:33" pos:end="7:40"><name pos:start="7:33" pos:end="7:33">r</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:40">pageh</name></name> <operator pos:start="7:42" pos:end="7:42">&amp;</operator> <literal type="number" pos:start="7:44" pos:end="7:47">0x7f</literal><operator pos:start="7:48" pos:end="7:48">)</operator> <operator pos:start="7:50" pos:end="7:51">&lt;&lt;</operator> <literal type="number" pos:start="7:53" pos:end="7:54">24</literal><operator pos:start="7:55" pos:end="7:55">)</operator> <operator pos:start="7:57" pos:end="7:57">|</operator> <operator pos:start="7:59" pos:end="7:59">(</operator><name pos:start="7:60" pos:end="7:66"><name pos:start="7:60" pos:end="7:60">r</name><operator pos:start="7:61" pos:end="7:62">-&gt;</operator><name pos:start="7:63" pos:end="7:66">page</name></name> <operator pos:start="7:68" pos:end="7:69">&lt;&lt;</operator> <literal type="number" pos:start="7:71" pos:end="7:72">16</literal><operator pos:start="7:73" pos:end="7:73">)</operator> <operator pos:start="7:75" pos:end="7:75">|</operator> <name pos:start="7:77" pos:end="7:88"><name pos:start="7:77" pos:end="7:77">r</name><operator pos:start="7:78" pos:end="7:79">-&gt;</operator><name pos:start="7:80" pos:end="7:82">now</name><index pos:start="7:83" pos:end="7:88">[<expr pos:start="7:84" pos:end="7:87"><name pos:start="7:84" pos:end="7:87">ADDR</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="35:56"><if pos:start="11:5" pos:end="31:5">if <condition pos:start="11:8" pos:end="11:23">(<expr pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:15"><name pos:start="11:9" pos:end="11:9">r</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:15">mode</name></name> <operator pos:start="11:17" pos:end="11:17">&amp;</operator> <literal type="number" pos:start="11:19" pos:end="11:22">0x20</literal></expr>)</condition> <block pos:start="11:25" pos:end="31:5">{<block_content pos:start="13:9" pos:end="29:9">

        <decl_stmt pos:start="13:9" pos:end="13:14"><decl pos:start="13:9" pos:end="13:13"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:25"><decl pos:start="15:9" pos:end="15:24"><type pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:15">uint8_t</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:18">p</name> <init pos:start="15:20" pos:end="15:24">= <expr pos:start="15:22" pos:end="15:24"><name pos:start="15:22" pos:end="15:24">buf</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="19:9" pos:end="19:62"><expr pos:start="19:9" pos:end="19:61"><call pos:start="19:9" pos:end="19:61"><name pos:start="19:9" pos:end="19:32">cpu_physical_memory_read</name> <argument_list pos:start="19:34" pos:end="19:61">(<argument pos:start="19:35" pos:end="19:50"><expr pos:start="19:35" pos:end="19:50"><name pos:start="19:35" pos:end="19:38">addr</name> <operator pos:start="19:40" pos:end="19:40">-</operator> <name pos:start="19:42" pos:end="19:44">pos</name> <operator pos:start="19:46" pos:end="19:46">-</operator> <name pos:start="19:48" pos:end="19:50">len</name></expr></argument>, <argument pos:start="19:53" pos:end="19:55"><expr pos:start="19:53" pos:end="19:55"><name pos:start="19:53" pos:end="19:55">buf</name></expr></argument>, <argument pos:start="19:58" pos:end="19:60"><expr pos:start="19:58" pos:end="19:60"><name pos:start="19:58" pos:end="19:60">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="21:9" pos:end="21:41">/* What about 16bit transfers? */</comment>

        <for pos:start="23:9" pos:end="29:9">for <control pos:start="23:13" pos:end="23:38">(<init pos:start="23:14" pos:end="23:19"><expr pos:start="23:14" pos:end="23:18"><name pos:start="23:14" pos:end="23:14">i</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <literal type="number" pos:start="23:18" pos:end="23:18">0</literal></expr>;</init> <condition pos:start="23:21" pos:end="23:33"><expr pos:start="23:21" pos:end="23:32"><name pos:start="23:21" pos:end="23:29"><name pos:start="23:21" pos:end="23:21">i</name> <argument_list type="generic" pos:start="23:23" pos:end="23:29">&lt; <argument pos:start="23:25" pos:end="23:27"><expr pos:start="23:25" pos:end="23:27"><name pos:start="23:25" pos:end="23:27">len</name></expr></argument> &gt;</argument_list></name><operator pos:start="23:30" pos:end="23:30">&gt;</operator> <literal type="number" pos:start="23:32" pos:end="23:32">1</literal></expr>;</condition> <incr pos:start="23:35" pos:end="23:37"><expr pos:start="23:35" pos:end="23:37"><name pos:start="23:35" pos:end="23:35">i</name><operator pos:start="23:36" pos:end="23:37">++</operator></expr></incr>)</control> <block pos:start="23:40" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:21">

            <decl_stmt pos:start="25:13" pos:end="25:39"><decl pos:start="25:13" pos:end="25:38"><type pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:19">uint8_t</name></type> <name pos:start="25:21" pos:end="25:21">b</name> <init pos:start="25:23" pos:end="25:38">= <expr pos:start="25:25" pos:end="25:38"><name pos:start="25:25" pos:end="25:38"><name pos:start="25:25" pos:end="25:25">p</name><index pos:start="25:26" pos:end="25:38">[<expr pos:start="25:27" pos:end="25:37"><name pos:start="25:27" pos:end="25:29">len</name> <operator pos:start="25:31" pos:end="25:31">-</operator> <name pos:start="25:33" pos:end="25:33">i</name> <operator pos:start="25:35" pos:end="25:35">-</operator> <literal type="number" pos:start="25:37" pos:end="25:37">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:21"><expr pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:16"><name pos:start="27:13" pos:end="27:13">p</name><index pos:start="27:14" pos:end="27:16">[<expr pos:start="27:15" pos:end="27:15"><name pos:start="27:15" pos:end="27:15">i</name></expr>]</index></name> <operator pos:start="27:18" pos:end="27:18">=</operator> <name pos:start="27:20" pos:end="27:20">b</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if>

    <else pos:start="33:5" pos:end="35:56">else<block type="pseudo" pos:start="35:9" pos:end="35:56"><block_content pos:start="35:9" pos:end="35:56">

        <expr_stmt pos:start="35:9" pos:end="35:56"><expr pos:start="35:9" pos:end="35:55"><call pos:start="35:9" pos:end="35:55"><name pos:start="35:9" pos:end="35:32">cpu_physical_memory_read</name> <argument_list pos:start="35:34" pos:end="35:55">(<argument pos:start="35:35" pos:end="35:44"><expr pos:start="35:35" pos:end="35:44"><name pos:start="35:35" pos:end="35:38">addr</name> <operator pos:start="35:40" pos:end="35:40">+</operator> <name pos:start="35:42" pos:end="35:44">pos</name></expr></argument>, <argument pos:start="35:47" pos:end="35:49"><expr pos:start="35:47" pos:end="35:49"><name pos:start="35:47" pos:end="35:49">buf</name></expr></argument>, <argument pos:start="35:52" pos:end="35:54"><expr pos:start="35:52" pos:end="35:54"><name pos:start="35:52" pos:end="35:54">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <return pos:start="39:5" pos:end="39:15">return <expr pos:start="39:12" pos:end="39:14"><name pos:start="39:12" pos:end="39:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
