<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24310.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">kvm_sclp_service_call</name><parameter_list pos:start="1:33" pos:end="3:48">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:40">S390CPU</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">cpu</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:66"><decl pos:start="1:48" pos:end="1:66"><type pos:start="1:48" pos:end="1:66"><name pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:53">struct</name> <name pos:start="1:55" pos:end="1:61">kvm_run</name></name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">run</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:47"><decl pos:start="3:34" pos:end="3:47"><type pos:start="3:34" pos:end="3:47"><name pos:start="3:34" pos:end="3:41">uint16_t</name></type> <name pos:start="3:43" pos:end="3:47">ipbh0</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="47:1">{<block_content pos:start="7:5" pos:end="45:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">CPUS390XState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">env</name> <init pos:start="7:24" pos:end="7:34">= <expr pos:start="7:26" pos:end="7:34"><operator pos:start="7:26" pos:end="7:26">&amp;</operator><name pos:start="7:27" pos:end="7:34"><name pos:start="7:27" pos:end="7:29">cpu</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">sccb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:17">code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">r</name> <init pos:start="13:11" pos:end="13:13">= <expr pos:start="13:13" pos:end="13:13"><literal type="number" pos:start="13:13" pos:end="13:13">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:36"><expr pos:start="17:5" pos:end="17:35"><call pos:start="17:5" pos:end="17:35"><name pos:start="17:5" pos:end="17:25">cpu_synchronize_state</name><argument_list pos:start="17:26" pos:end="17:35">(<argument pos:start="17:27" pos:end="17:34"><expr pos:start="17:27" pos:end="17:34"><call pos:start="17:27" pos:end="17:34"><name pos:start="17:27" pos:end="17:29">CPU</name><argument_list pos:start="17:30" pos:end="17:34">(<argument pos:start="17:31" pos:end="17:33"><expr pos:start="17:31" pos:end="17:33"><name pos:start="17:31" pos:end="17:33">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:40">(<expr pos:start="19:9" pos:end="19:39"><name pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:11">env</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:16">psw</name><operator pos:start="19:17" pos:end="19:17">.</operator><name pos:start="19:18" pos:end="19:21">mask</name></name> <operator pos:start="19:23" pos:end="19:23">&amp;</operator> <name pos:start="19:25" pos:end="19:39">PSW_MASK_PSTATE</name></expr>)</condition> <block pos:start="19:42" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:17">

        <expr_stmt pos:start="21:9" pos:end="21:44"><expr pos:start="21:9" pos:end="21:43"><call pos:start="21:9" pos:end="21:43"><name pos:start="21:9" pos:end="21:22">enter_pgmcheck</name><argument_list pos:start="21:23" pos:end="21:43">(<argument pos:start="21:24" pos:end="21:26"><expr pos:start="21:24" pos:end="21:26"><name pos:start="21:24" pos:end="21:26">cpu</name></expr></argument>, <argument pos:start="21:29" pos:end="21:42"><expr pos:start="21:29" pos:end="21:42"><name pos:start="21:29" pos:end="21:42">PGM_PRIVILEGED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:34"><expr pos:start="27:5" pos:end="27:33"><name pos:start="27:5" pos:end="27:8">sccb</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <name pos:start="27:12" pos:end="27:33"><name pos:start="27:12" pos:end="27:14">env</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:20">regs</name><index pos:start="27:21" pos:end="27:33">[<expr pos:start="27:22" pos:end="27:32"><name pos:start="27:22" pos:end="27:26">ipbh0</name> <operator pos:start="27:28" pos:end="27:28">&amp;</operator> <literal type="number" pos:start="27:30" pos:end="27:32">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:8">code</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <name pos:start="29:12" pos:end="29:41"><name pos:start="29:12" pos:end="29:14">env</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:20">regs</name><index pos:start="29:21" pos:end="29:41">[<expr pos:start="29:22" pos:end="29:40"><operator pos:start="29:22" pos:end="29:22">(</operator><name pos:start="29:23" pos:end="29:27">ipbh0</name> <operator pos:start="29:29" pos:end="29:29">&amp;</operator> <literal type="number" pos:start="29:31" pos:end="29:34">0xf0</literal><operator pos:start="29:35" pos:end="29:35">)</operator> <operator pos:start="29:37" pos:end="29:38">&gt;&gt;</operator> <literal type="number" pos:start="29:40" pos:end="29:40">4</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:38"><expr pos:start="33:5" pos:end="33:37"><name pos:start="33:5" pos:end="33:5">r</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <call pos:start="33:9" pos:end="33:37"><name pos:start="33:9" pos:end="33:25">sclp_service_call</name><argument_list pos:start="33:26" pos:end="33:37">(<argument pos:start="33:27" pos:end="33:30"><expr pos:start="33:27" pos:end="33:30"><name pos:start="33:27" pos:end="33:30">sccb</name></expr></argument>, <argument pos:start="33:33" pos:end="33:36"><expr pos:start="33:33" pos:end="33:36"><name pos:start="33:33" pos:end="33:36">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:14">(<expr pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:9">r</name> <operator pos:start="35:11" pos:end="35:11">&lt;</operator> <literal type="number" pos:start="35:13" pos:end="35:13">0</literal></expr>)</condition> <block pos:start="35:16" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:32">

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><call pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:22">enter_pgmcheck</name><argument_list pos:start="37:23" pos:end="37:31">(<argument pos:start="37:24" pos:end="37:26"><expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:26">cpu</name></expr></argument>, <argument pos:start="37:29" pos:end="37:30"><expr pos:start="37:29" pos:end="37:30"><operator pos:start="37:29" pos:end="37:29">-</operator><name pos:start="37:30" pos:end="37:30">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:18"><expr pos:start="41:5" pos:end="41:17"><call pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:9">setcc</name><argument_list pos:start="41:10" pos:end="41:17">(<argument pos:start="41:11" pos:end="41:13"><expr pos:start="41:11" pos:end="41:13"><name pos:start="41:11" pos:end="41:13">cpu</name></expr></argument>, <argument pos:start="41:16" pos:end="41:16"><expr pos:start="41:16" pos:end="41:16"><name pos:start="41:16" pos:end="41:16">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="45:5" pos:end="45:13">return <expr pos:start="45:12" pos:end="45:12"><literal type="number" pos:start="45:12" pos:end="45:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
