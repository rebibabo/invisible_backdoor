<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7847.c" pos:tabs="8"><function pos:start="1:1" pos:end="341:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">imc_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:50"><decl pos:start="1:29" pos:end="1:50"><type pos:start="1:29" pos:end="1:50"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="341:1">{<block_content pos:start="9:5" pos:end="339:26">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:36"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">IMCContext</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:17">q</name> <init pos:start="15:19" pos:end="15:36">= <expr pos:start="15:21" pos:end="15:36"><name pos:start="15:21" pos:end="15:36"><name pos:start="15:21" pos:end="15:25">avctx</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:36">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:26">stream_format_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:15">imc_hdr</name></decl>, <decl pos:start="21:18" pos:end="21:18"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:18" pos:end="21:18">i</name></decl>, <decl pos:start="21:21" pos:end="21:21"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:21" pos:end="21:21">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:13"><decl pos:start="23:5" pos:end="23:12"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">flag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:12"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:12">bits</name></decl>, <decl pos:start="25:15" pos:end="25:20"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:15" pos:end="25:20">summer</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:15"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:15">counter</name></decl>, <decl pos:start="27:18" pos:end="27:26"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:18" pos:end="27:26">bitscount</name></decl>;</decl_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:60"><expr pos:start="29:5" pos:end="29:59"><call pos:start="29:5" pos:end="29:59"><name pos:start="29:5" pos:end="29:20">LOCAL_ALIGNED_16</name><argument_list pos:start="29:21" pos:end="29:59">(<argument pos:start="29:22" pos:end="29:29"><expr pos:start="29:22" pos:end="29:29"><name pos:start="29:22" pos:end="29:29">uint16_t</name></expr></argument>, <argument pos:start="29:32" pos:end="29:36"><expr pos:start="29:32" pos:end="29:36"><name pos:start="29:32" pos:end="29:36">buf16</name></expr></argument>, <argument pos:start="29:39" pos:end="29:58"><expr pos:start="29:39" pos:end="29:58"><index pos:start="29:39" pos:end="29:58">[<expr pos:start="29:40" pos:end="29:57"><name pos:start="29:40" pos:end="29:53">IMC_BLOCK_SIZE</name> <operator pos:start="29:55" pos:end="29:55">/</operator> <literal type="number" pos:start="29:57" pos:end="29:57">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:34">(<expr pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:16">buf_size</name> <operator pos:start="33:18" pos:end="33:18">&lt;</operator> <name pos:start="33:20" pos:end="33:33">IMC_BLOCK_SIZE</name></expr>)</condition> <block pos:start="33:36" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:18">

        <expr_stmt pos:start="35:9" pos:end="35:62"><expr pos:start="35:9" pos:end="35:61"><call pos:start="35:9" pos:end="35:61"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:61">(<argument pos:start="35:16" pos:end="35:20"><expr pos:start="35:16" pos:end="35:20"><name pos:start="35:16" pos:end="35:20">avctx</name></expr></argument>, <argument pos:start="35:23" pos:end="35:34"><expr pos:start="35:23" pos:end="35:34"><name pos:start="35:23" pos:end="35:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:37" pos:end="35:60"><expr pos:start="35:37" pos:end="35:60"><literal type="string" pos:start="35:37" pos:end="35:60">"imc frame too small!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:72"><expr pos:start="43:5" pos:end="43:71"><call pos:start="43:5" pos:end="43:71"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:5">q</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:10">dsp</name><operator pos:start="43:11" pos:end="43:11">.</operator><name pos:start="43:12" pos:end="43:22">bswap16_buf</name></name><argument_list pos:start="43:23" pos:end="43:71">(<argument pos:start="43:24" pos:end="43:28"><expr pos:start="43:24" pos:end="43:28"><name pos:start="43:24" pos:end="43:28">buf16</name></expr></argument>, <argument pos:start="43:31" pos:end="43:50"><expr pos:start="43:31" pos:end="43:50"><operator pos:start="43:31" pos:end="43:31">(</operator><specifier pos:start="43:32" pos:end="43:36">const</specifier> <name pos:start="43:38" pos:end="43:45">uint16_t</name><operator pos:start="43:46" pos:end="43:46">*</operator><operator pos:start="43:47" pos:end="43:47">)</operator><name pos:start="43:48" pos:end="43:50">buf</name></expr></argument>, <argument pos:start="43:53" pos:end="43:70"><expr pos:start="43:53" pos:end="43:70"><name pos:start="43:53" pos:end="43:66">IMC_BLOCK_SIZE</name> <operator pos:start="43:68" pos:end="43:68">/</operator> <literal type="number" pos:start="43:70" pos:end="43:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:26"><expr pos:start="47:5" pos:end="47:25"><name pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:5">q</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:18">out_samples</name></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:25">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:69"><expr pos:start="49:5" pos:end="49:68"><call pos:start="49:5" pos:end="49:68"><name pos:start="49:5" pos:end="49:17">init_get_bits</name><argument_list pos:start="49:18" pos:end="49:68">(<argument pos:start="49:19" pos:end="49:24"><expr pos:start="49:19" pos:end="49:24"><operator pos:start="49:19" pos:end="49:19">&amp;</operator><name pos:start="49:20" pos:end="49:24"><name pos:start="49:20" pos:end="49:20">q</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:24">gb</name></name></expr></argument>, <argument pos:start="49:27" pos:end="49:47"><expr pos:start="49:27" pos:end="49:47"><operator pos:start="49:27" pos:end="49:27">(</operator><specifier pos:start="49:28" pos:end="49:32">const</specifier> <name pos:start="49:34" pos:end="49:40">uint8_t</name><operator pos:start="49:41" pos:end="49:41">*</operator><operator pos:start="49:42" pos:end="49:42">)</operator><name pos:start="49:43" pos:end="49:47">buf16</name></expr></argument>, <argument pos:start="49:50" pos:end="49:67"><expr pos:start="49:50" pos:end="49:67"><name pos:start="49:50" pos:end="49:63">IMC_BLOCK_SIZE</name> <operator pos:start="49:65" pos:end="49:65">*</operator> <literal type="number" pos:start="49:67" pos:end="49:67">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:32">/* Check the frame header */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:34"><expr pos:start="55:5" pos:end="55:33"><name pos:start="55:5" pos:end="55:11">imc_hdr</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:33"><name pos:start="55:15" pos:end="55:22">get_bits</name><argument_list pos:start="55:23" pos:end="55:33">(<argument pos:start="55:24" pos:end="55:29"><expr pos:start="55:24" pos:end="55:29"><operator pos:start="55:24" pos:end="55:24">&amp;</operator><name pos:start="55:25" pos:end="55:29"><name pos:start="55:25" pos:end="55:25">q</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:29">gb</name></name></expr></argument>, <argument pos:start="55:32" pos:end="55:32"><expr pos:start="55:32" pos:end="55:32"><literal type="number" pos:start="55:32" pos:end="55:32">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:32">(<expr pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:15">imc_hdr</name> <operator pos:start="57:17" pos:end="57:18">!=</operator> <name pos:start="57:20" pos:end="57:31">IMC_FRAME_ID</name></expr>)</condition> <block pos:start="57:34" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:18">

        <expr_stmt pos:start="59:9" pos:end="59:72"><expr pos:start="59:9" pos:end="59:71"><call pos:start="59:9" pos:end="59:71"><name pos:start="59:9" pos:end="59:14">av_log</name><argument_list pos:start="59:15" pos:end="59:71">(<argument pos:start="59:16" pos:end="59:20"><expr pos:start="59:16" pos:end="59:20"><name pos:start="59:16" pos:end="59:20">avctx</name></expr></argument>, <argument pos:start="59:23" pos:end="59:34"><expr pos:start="59:23" pos:end="59:34"><name pos:start="59:23" pos:end="59:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:37" pos:end="59:70"><expr pos:start="59:37" pos:end="59:70"><literal type="string" pos:start="59:37" pos:end="59:70">"imc frame header check failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:74"><expr pos:start="61:9" pos:end="61:73"><call pos:start="61:9" pos:end="61:73"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:73">(<argument pos:start="61:16" pos:end="61:20"><expr pos:start="61:16" pos:end="61:20"><name pos:start="61:16" pos:end="61:20">avctx</name></expr></argument>, <argument pos:start="61:23" pos:end="61:34"><expr pos:start="61:23" pos:end="61:34"><name pos:start="61:23" pos:end="61:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:37" pos:end="61:63"><expr pos:start="61:37" pos:end="61:63"><literal type="string" pos:start="61:37" pos:end="61:63">"got %x instead of 0x21.\n"</literal></expr></argument>, <argument pos:start="61:66" pos:end="61:72"><expr pos:start="61:66" pos:end="61:72"><name pos:start="61:66" pos:end="61:72">imc_hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:18">return <expr pos:start="63:16" pos:end="63:17"><operator pos:start="63:16" pos:end="63:16">-</operator><literal type="number" pos:start="63:17" pos:end="63:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:45"><expr pos:start="67:5" pos:end="67:44"><name pos:start="67:5" pos:end="67:22">stream_format_code</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <call pos:start="67:26" pos:end="67:44"><name pos:start="67:26" pos:end="67:33">get_bits</name><argument_list pos:start="67:34" pos:end="67:44">(<argument pos:start="67:35" pos:end="67:40"><expr pos:start="67:35" pos:end="67:40"><operator pos:start="67:35" pos:end="67:35">&amp;</operator><name pos:start="67:36" pos:end="67:40"><name pos:start="67:36" pos:end="67:36">q</name><operator pos:start="67:37" pos:end="67:38">-&gt;</operator><name pos:start="67:39" pos:end="67:40">gb</name></name></expr></argument>, <argument pos:start="67:43" pos:end="67:43"><expr pos:start="67:43" pos:end="67:43"><literal type="number" pos:start="67:43" pos:end="67:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="77:5"><if pos:start="71:5" pos:end="77:5">if<condition pos:start="71:7" pos:end="71:30">(<expr pos:start="71:8" pos:end="71:29"><name pos:start="71:8" pos:end="71:25">stream_format_code</name> <operator pos:start="71:27" pos:end="71:27">&amp;</operator> <literal type="number" pos:start="71:29" pos:end="71:29">1</literal></expr>)</condition><block pos:start="71:31" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:18">

        <expr_stmt pos:start="73:9" pos:end="73:100"><expr pos:start="73:9" pos:end="73:99"><call pos:start="73:9" pos:end="73:99"><name pos:start="73:9" pos:end="73:14">av_log</name><argument_list pos:start="73:15" pos:end="73:99">(<argument pos:start="73:16" pos:end="73:20"><expr pos:start="73:16" pos:end="73:20"><name pos:start="73:16" pos:end="73:20">avctx</name></expr></argument>, <argument pos:start="73:23" pos:end="73:34"><expr pos:start="73:23" pos:end="73:34"><name pos:start="73:23" pos:end="73:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="73:37" pos:end="73:78"><expr pos:start="73:37" pos:end="73:78"><literal type="string" pos:start="73:37" pos:end="73:78">"Stream code format %X is not supported\n"</literal></expr></argument>, <argument pos:start="73:81" pos:end="73:98"><expr pos:start="73:81" pos:end="73:98"><name pos:start="73:81" pos:end="73:98">stream_format_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:18">return <expr pos:start="75:16" pos:end="75:17"><operator pos:start="75:16" pos:end="75:16">-</operator><literal type="number" pos:start="75:17" pos:end="75:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="81:1" pos:end="81:83">//    av_log(avctx, AV_LOG_DEBUG, "stream_format_code = %d\n", stream_format_code);</comment>



    <if_stmt pos:start="85:5" pos:end="87:29"><if pos:start="85:5" pos:end="87:29">if <condition pos:start="85:8" pos:end="85:34">(<expr pos:start="85:9" pos:end="85:33"><name pos:start="85:9" pos:end="85:26">stream_format_code</name> <operator pos:start="85:28" pos:end="85:28">&amp;</operator> <literal type="number" pos:start="85:30" pos:end="85:33">0x04</literal></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:29"><block_content pos:start="87:9" pos:end="87:29">

        <expr_stmt pos:start="87:9" pos:end="87:29"><expr pos:start="87:9" pos:end="87:28"><name pos:start="87:9" pos:end="87:24"><name pos:start="87:9" pos:end="87:9">q</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:24">decoder_reset</name></name> <operator pos:start="87:26" pos:end="87:26">=</operator> <literal type="number" pos:start="87:28" pos:end="87:28">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="101:5"><if pos:start="91:5" pos:end="101:5">if<condition pos:start="91:7" pos:end="91:24">(<expr pos:start="91:8" pos:end="91:23"><name pos:start="91:8" pos:end="91:23"><name pos:start="91:8" pos:end="91:8">q</name><operator pos:start="91:9" pos:end="91:10">-&gt;</operator><name pos:start="91:11" pos:end="91:23">decoder_reset</name></name></expr>)</condition> <block pos:start="91:26" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:29">

        <expr_stmt pos:start="93:9" pos:end="93:58"><expr pos:start="93:9" pos:end="93:57"><call pos:start="93:9" pos:end="93:57"><name pos:start="93:9" pos:end="93:14">memset</name><argument_list pos:start="93:15" pos:end="93:57">(<argument pos:start="93:16" pos:end="93:29"><expr pos:start="93:16" pos:end="93:29"><name pos:start="93:16" pos:end="93:29"><name pos:start="93:16" pos:end="93:16">q</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:29">out_samples</name></name></expr></argument>, <argument pos:start="93:32" pos:end="93:32"><expr pos:start="93:32" pos:end="93:32"><literal type="number" pos:start="93:32" pos:end="93:32">0</literal></expr></argument>, <argument pos:start="93:35" pos:end="93:56"><expr pos:start="93:35" pos:end="93:56"><sizeof pos:start="93:35" pos:end="93:56">sizeof<argument_list pos:start="93:41" pos:end="93:56">(<argument pos:start="93:42" pos:end="93:55"><expr pos:start="93:42" pos:end="93:55"><name pos:start="93:42" pos:end="93:55"><name pos:start="93:42" pos:end="93:42">q</name><operator pos:start="93:43" pos:end="93:44">-&gt;</operator><name pos:start="93:45" pos:end="93:55">out_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="95:9" pos:end="95:56">for<control pos:start="95:12" pos:end="95:34">(<init pos:start="95:13" pos:end="95:18"><expr pos:start="95:13" pos:end="95:17"><name pos:start="95:13" pos:end="95:13">i</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <literal type="number" pos:start="95:17" pos:end="95:17">0</literal></expr>;</init> <condition pos:start="95:20" pos:end="95:29"><expr pos:start="95:20" pos:end="95:28"><name pos:start="95:20" pos:end="95:20">i</name> <operator pos:start="95:22" pos:end="95:22">&lt;</operator> <name pos:start="95:24" pos:end="95:28">BANDS</name></expr>;</condition> <incr pos:start="95:31" pos:end="95:33"><expr pos:start="95:31" pos:end="95:33"><name pos:start="95:31" pos:end="95:31">i</name><operator pos:start="95:32" pos:end="95:33">++</operator></expr></incr>)</control><block type="pseudo" pos:start="95:35" pos:end="95:56"><block_content pos:start="95:35" pos:end="95:56"><expr_stmt pos:start="95:35" pos:end="95:56"><expr pos:start="95:35" pos:end="95:55"><name pos:start="95:35" pos:end="95:49"><name pos:start="95:35" pos:end="95:35">q</name><operator pos:start="95:36" pos:end="95:37">-&gt;</operator><name pos:start="95:38" pos:end="95:46">old_floor</name><index pos:start="95:47" pos:end="95:49">[<expr pos:start="95:48" pos:end="95:48"><name pos:start="95:48" pos:end="95:48">i</name></expr>]</index></name> <operator pos:start="95:51" pos:end="95:51">=</operator> <literal type="number" pos:start="95:53" pos:end="95:55">1.0</literal></expr>;</expr_stmt></block_content></block></for>

        <for pos:start="97:9" pos:end="97:55">for<control pos:start="97:12" pos:end="97:35">(<init pos:start="97:13" pos:end="97:18"><expr pos:start="97:13" pos:end="97:17"><name pos:start="97:13" pos:end="97:13">i</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <literal type="number" pos:start="97:17" pos:end="97:17">0</literal></expr>;</init> <condition pos:start="97:20" pos:end="97:30"><expr pos:start="97:20" pos:end="97:29"><name pos:start="97:20" pos:end="97:20">i</name> <operator pos:start="97:22" pos:end="97:22">&lt;</operator> <name pos:start="97:24" pos:end="97:29">COEFFS</name></expr>;</condition> <incr pos:start="97:32" pos:end="97:34"><expr pos:start="97:32" pos:end="97:34"><name pos:start="97:32" pos:end="97:32">i</name><operator pos:start="97:33" pos:end="97:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="97:36" pos:end="97:55"><block_content pos:start="97:36" pos:end="97:55"><expr_stmt pos:start="97:36" pos:end="97:55"><expr pos:start="97:36" pos:end="97:54"><name pos:start="97:36" pos:end="97:50"><name pos:start="97:36" pos:end="97:36">q</name><operator pos:start="97:37" pos:end="97:38">-&gt;</operator><name pos:start="97:39" pos:end="97:47">CWdecoded</name><index pos:start="97:48" pos:end="97:50">[<expr pos:start="97:49" pos:end="97:49"><name pos:start="97:49" pos:end="97:49">i</name></expr>]</index></name> <operator pos:start="97:52" pos:end="97:52">=</operator> <literal type="number" pos:start="97:54" pos:end="97:54">0</literal></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="99:9" pos:end="99:29"><expr pos:start="99:9" pos:end="99:28"><name pos:start="99:9" pos:end="99:24"><name pos:start="99:9" pos:end="99:9">q</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:24">decoder_reset</name></name> <operator pos:start="99:26" pos:end="99:26">=</operator> <literal type="number" pos:start="99:28" pos:end="99:28">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:29"><expr pos:start="105:5" pos:end="105:28"><name pos:start="105:5" pos:end="105:8">flag</name> <operator pos:start="105:10" pos:end="105:10">=</operator> <call pos:start="105:12" pos:end="105:28"><name pos:start="105:12" pos:end="105:20">get_bits1</name><argument_list pos:start="105:21" pos:end="105:28">(<argument pos:start="105:22" pos:end="105:27"><expr pos:start="105:22" pos:end="105:27"><operator pos:start="105:22" pos:end="105:22">&amp;</operator><name pos:start="105:23" pos:end="105:27"><name pos:start="105:23" pos:end="105:23">q</name><operator pos:start="105:24" pos:end="105:25">-&gt;</operator><name pos:start="105:26" pos:end="105:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:66"><expr pos:start="107:5" pos:end="107:65"><call pos:start="107:5" pos:end="107:65"><name pos:start="107:5" pos:end="107:25">imc_read_level_coeffs</name><argument_list pos:start="107:26" pos:end="107:65">(<argument pos:start="107:27" pos:end="107:27"><expr pos:start="107:27" pos:end="107:27"><name pos:start="107:27" pos:end="107:27">q</name></expr></argument>, <argument pos:start="107:30" pos:end="107:47"><expr pos:start="107:30" pos:end="107:47"><name pos:start="107:30" pos:end="107:47">stream_format_code</name></expr></argument>, <argument pos:start="107:50" pos:end="107:64"><expr pos:start="107:50" pos:end="107:64"><name pos:start="107:50" pos:end="107:64"><name pos:start="107:50" pos:end="107:50">q</name><operator pos:start="107:51" pos:end="107:52">-&gt;</operator><name pos:start="107:53" pos:end="107:64">levlCoeffBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="111:5" pos:end="117:101"><if pos:start="111:5" pos:end="113:86">if <condition pos:start="111:8" pos:end="111:33">(<expr pos:start="111:9" pos:end="111:32"><name pos:start="111:9" pos:end="111:26">stream_format_code</name> <operator pos:start="111:28" pos:end="111:28">&amp;</operator> <literal type="number" pos:start="111:30" pos:end="111:32">0x4</literal></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:86"><block_content pos:start="113:9" pos:end="113:86">

        <expr_stmt pos:start="113:9" pos:end="113:86"><expr pos:start="113:9" pos:end="113:85"><call pos:start="113:9" pos:end="113:85"><name pos:start="113:9" pos:end="113:37">imc_decode_level_coefficients</name><argument_list pos:start="113:38" pos:end="113:85">(<argument pos:start="113:39" pos:end="113:39"><expr pos:start="113:39" pos:end="113:39"><name pos:start="113:39" pos:end="113:39">q</name></expr></argument>, <argument pos:start="113:42" pos:end="113:56"><expr pos:start="113:42" pos:end="113:56"><name pos:start="113:42" pos:end="113:56"><name pos:start="113:42" pos:end="113:42">q</name><operator pos:start="113:43" pos:end="113:44">-&gt;</operator><name pos:start="113:45" pos:end="113:56">levlCoeffBuf</name></name></expr></argument>, <argument pos:start="113:59" pos:end="113:70"><expr pos:start="113:59" pos:end="113:70"><name pos:start="113:59" pos:end="113:70"><name pos:start="113:59" pos:end="113:59">q</name><operator pos:start="113:60" pos:end="113:61">-&gt;</operator><name pos:start="113:62" pos:end="113:70">flcoeffs1</name></name></expr></argument>, <argument pos:start="113:73" pos:end="113:84"><expr pos:start="113:73" pos:end="113:84"><name pos:start="113:73" pos:end="113:84"><name pos:start="113:73" pos:end="113:73">q</name><operator pos:start="113:74" pos:end="113:75">-&gt;</operator><name pos:start="113:76" pos:end="113:84">flcoeffs2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="115:5" pos:end="117:101">else<block type="pseudo" pos:start="117:9" pos:end="117:101"><block_content pos:start="117:9" pos:end="117:101">

        <expr_stmt pos:start="117:9" pos:end="117:101"><expr pos:start="117:9" pos:end="117:100"><call pos:start="117:9" pos:end="117:100"><name pos:start="117:9" pos:end="117:38">imc_decode_level_coefficients2</name><argument_list pos:start="117:39" pos:end="117:100">(<argument pos:start="117:40" pos:end="117:40"><expr pos:start="117:40" pos:end="117:40"><name pos:start="117:40" pos:end="117:40">q</name></expr></argument>, <argument pos:start="117:43" pos:end="117:57"><expr pos:start="117:43" pos:end="117:57"><name pos:start="117:43" pos:end="117:57"><name pos:start="117:43" pos:end="117:43">q</name><operator pos:start="117:44" pos:end="117:45">-&gt;</operator><name pos:start="117:46" pos:end="117:57">levlCoeffBuf</name></name></expr></argument>, <argument pos:start="117:60" pos:end="117:71"><expr pos:start="117:60" pos:end="117:71"><name pos:start="117:60" pos:end="117:71"><name pos:start="117:60" pos:end="117:60">q</name><operator pos:start="117:61" pos:end="117:62">-&gt;</operator><name pos:start="117:63" pos:end="117:71">old_floor</name></name></expr></argument>, <argument pos:start="117:74" pos:end="117:85"><expr pos:start="117:74" pos:end="117:85"><name pos:start="117:74" pos:end="117:85"><name pos:start="117:74" pos:end="117:74">q</name><operator pos:start="117:75" pos:end="117:76">-&gt;</operator><name pos:start="117:77" pos:end="117:85">flcoeffs1</name></name></expr></argument>, <argument pos:start="117:88" pos:end="117:99"><expr pos:start="117:88" pos:end="117:99"><name pos:start="117:88" pos:end="117:99"><name pos:start="117:88" pos:end="117:88">q</name><operator pos:start="117:89" pos:end="117:90">-&gt;</operator><name pos:start="117:91" pos:end="117:99">flcoeffs2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:59"><expr pos:start="121:5" pos:end="121:58"><call pos:start="121:5" pos:end="121:58"><name pos:start="121:5" pos:end="121:10">memcpy</name><argument_list pos:start="121:11" pos:end="121:58">(<argument pos:start="121:12" pos:end="121:23"><expr pos:start="121:12" pos:end="121:23"><name pos:start="121:12" pos:end="121:23"><name pos:start="121:12" pos:end="121:12">q</name><operator pos:start="121:13" pos:end="121:14">-&gt;</operator><name pos:start="121:15" pos:end="121:23">old_floor</name></name></expr></argument>, <argument pos:start="121:26" pos:end="121:37"><expr pos:start="121:26" pos:end="121:37"><name pos:start="121:26" pos:end="121:37"><name pos:start="121:26" pos:end="121:26">q</name><operator pos:start="121:27" pos:end="121:28">-&gt;</operator><name pos:start="121:29" pos:end="121:37">flcoeffs1</name></name></expr></argument>, <argument pos:start="121:40" pos:end="121:57"><expr pos:start="121:40" pos:end="121:57"><literal type="number" pos:start="121:40" pos:end="121:41">32</literal> <operator pos:start="121:43" pos:end="121:43">*</operator> <sizeof pos:start="121:45" pos:end="121:57">sizeof<argument_list pos:start="121:51" pos:end="121:57">(<argument pos:start="121:52" pos:end="121:56"><expr pos:start="121:52" pos:end="121:56"><name pos:start="121:52" pos:end="121:56">float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:16"><expr pos:start="125:5" pos:end="125:15"><name pos:start="125:5" pos:end="125:11">counter</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <literal type="number" pos:start="125:15" pos:end="125:15">0</literal></expr>;</expr_stmt>

    <for pos:start="127:5" pos:end="139:5">for <control pos:start="127:9" pos:end="127:29">(<init pos:start="127:10" pos:end="127:14"><expr pos:start="127:10" pos:end="127:12"><name pos:start="127:10" pos:end="127:10">i</name><operator pos:start="127:11" pos:end="127:11">=</operator><literal type="number" pos:start="127:12" pos:end="127:12">0</literal></expr> ;</init> <condition pos:start="127:16" pos:end="127:24"><expr pos:start="127:16" pos:end="127:22"><name pos:start="127:16" pos:end="127:16">i</name><operator pos:start="127:17" pos:end="127:17">&lt;</operator><name pos:start="127:18" pos:end="127:22">BANDS</name></expr> ;</condition> <incr pos:start="127:26" pos:end="127:28"><expr pos:start="127:26" pos:end="127:28"><name pos:start="127:26" pos:end="127:26">i</name><operator pos:start="127:27" pos:end="127:28">++</operator></expr></incr>)</control> <block pos:start="127:31" pos:end="139:5">{<block_content pos:start="129:9" pos:end="137:59">

        <if_stmt pos:start="129:9" pos:end="137:59"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:37">(<expr pos:start="129:13" pos:end="129:36"><name pos:start="129:13" pos:end="129:30"><name pos:start="129:13" pos:end="129:13">q</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:27">levlCoeffBuf</name><index pos:start="129:28" pos:end="129:30">[<expr pos:start="129:29" pos:end="129:29"><name pos:start="129:29" pos:end="129:29">i</name></expr>]</index></name> <operator pos:start="129:32" pos:end="129:33">==</operator> <literal type="number" pos:start="129:35" pos:end="129:36">16</literal></expr>)</condition> <block pos:start="129:39" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:22">

            <expr_stmt pos:start="131:13" pos:end="131:33"><expr pos:start="131:13" pos:end="131:32"><name pos:start="131:13" pos:end="131:28"><name pos:start="131:13" pos:end="131:13">q</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:25">bandWidthT</name><index pos:start="131:26" pos:end="131:28">[<expr pos:start="131:27" pos:end="131:27"><name pos:start="131:27" pos:end="131:27">i</name></expr>]</index></name> <operator pos:start="131:30" pos:end="131:30">=</operator> <literal type="number" pos:start="131:32" pos:end="131:32">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:22"><expr pos:start="133:13" pos:end="133:21"><name pos:start="133:13" pos:end="133:19">counter</name><operator pos:start="133:20" pos:end="133:21">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="135:11" pos:end="137:59">else<block type="pseudo" pos:start="137:13" pos:end="137:59"><block_content pos:start="137:13" pos:end="137:59">

            <expr_stmt pos:start="137:13" pos:end="137:59"><expr pos:start="137:13" pos:end="137:58"><name pos:start="137:13" pos:end="137:28"><name pos:start="137:13" pos:end="137:13">q</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:25">bandWidthT</name><index pos:start="137:26" pos:end="137:28">[<expr pos:start="137:27" pos:end="137:27"><name pos:start="137:27" pos:end="137:27">i</name></expr>]</index></name> <operator pos:start="137:30" pos:end="137:30">=</operator> <name pos:start="137:32" pos:end="137:44"><name pos:start="137:32" pos:end="137:39">band_tab</name><index pos:start="137:40" pos:end="137:44">[<expr pos:start="137:41" pos:end="137:43"><name pos:start="137:41" pos:end="137:41">i</name><operator pos:start="137:42" pos:end="137:42">+</operator><literal type="number" pos:start="137:43" pos:end="137:43">1</literal></expr>]</index></name> <operator pos:start="137:46" pos:end="137:46">-</operator> <name pos:start="137:48" pos:end="137:58"><name pos:start="137:48" pos:end="137:55">band_tab</name><index pos:start="137:56" pos:end="137:58">[<expr pos:start="137:57" pos:end="137:57"><name pos:start="137:57" pos:end="137:57">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="141:5" pos:end="141:52"><expr pos:start="141:5" pos:end="141:51"><call pos:start="141:5" pos:end="141:51"><name pos:start="141:5" pos:end="141:10">memset</name><argument_list pos:start="141:11" pos:end="141:51">(<argument pos:start="141:12" pos:end="141:26"><expr pos:start="141:12" pos:end="141:26"><name pos:start="141:12" pos:end="141:26"><name pos:start="141:12" pos:end="141:12">q</name><operator pos:start="141:13" pos:end="141:14">-&gt;</operator><name pos:start="141:15" pos:end="141:26">bandFlagsBuf</name></name></expr></argument>, <argument pos:start="141:29" pos:end="141:29"><expr pos:start="141:29" pos:end="141:29"><literal type="number" pos:start="141:29" pos:end="141:29">0</literal></expr></argument>, <argument pos:start="141:32" pos:end="141:50"><expr pos:start="141:32" pos:end="141:50"><name pos:start="141:32" pos:end="141:36">BANDS</name> <operator pos:start="141:38" pos:end="141:38">*</operator> <sizeof pos:start="141:40" pos:end="141:50">sizeof<argument_list pos:start="141:46" pos:end="141:50">(<argument pos:start="141:47" pos:end="141:49"><expr pos:start="141:47" pos:end="141:49"><name pos:start="141:47" pos:end="141:49">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="143:5" pos:end="149:5">for<control pos:start="143:8" pos:end="143:32">(<init pos:start="143:9" pos:end="143:14"><expr pos:start="143:9" pos:end="143:13"><name pos:start="143:9" pos:end="143:9">i</name> <operator pos:start="143:11" pos:end="143:11">=</operator> <literal type="number" pos:start="143:13" pos:end="143:13">0</literal></expr>;</init> <condition pos:start="143:16" pos:end="143:27"><expr pos:start="143:16" pos:end="143:26"><name pos:start="143:16" pos:end="143:16">i</name> <operator pos:start="143:18" pos:end="143:18">&lt;</operator> <name pos:start="143:20" pos:end="143:24">BANDS</name><operator pos:start="143:25" pos:end="143:25">-</operator><literal type="number" pos:start="143:26" pos:end="143:26">1</literal></expr>;</condition> <incr pos:start="143:29" pos:end="143:31"><expr pos:start="143:29" pos:end="143:31"><name pos:start="143:29" pos:end="143:29">i</name><operator pos:start="143:30" pos:end="143:31">++</operator></expr></incr>)</control> <block pos:start="143:34" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:51">

        <if_stmt pos:start="145:9" pos:end="147:51"><if pos:start="145:9" pos:end="147:51">if <condition pos:start="145:12" pos:end="145:29">(<expr pos:start="145:13" pos:end="145:28"><name pos:start="145:13" pos:end="145:28"><name pos:start="145:13" pos:end="145:13">q</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:25">bandWidthT</name><index pos:start="145:26" pos:end="145:28">[<expr pos:start="145:27" pos:end="145:27"><name pos:start="145:27" pos:end="145:27">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="147:13" pos:end="147:51"><block_content pos:start="147:13" pos:end="147:51">

            <expr_stmt pos:start="147:13" pos:end="147:51"><expr pos:start="147:13" pos:end="147:50"><name pos:start="147:13" pos:end="147:30"><name pos:start="147:13" pos:end="147:13">q</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:27">bandFlagsBuf</name><index pos:start="147:28" pos:end="147:30">[<expr pos:start="147:29" pos:end="147:29"><name pos:start="147:29" pos:end="147:29">i</name></expr>]</index></name> <operator pos:start="147:32" pos:end="147:32">=</operator> <call pos:start="147:34" pos:end="147:50"><name pos:start="147:34" pos:end="147:42">get_bits1</name><argument_list pos:start="147:43" pos:end="147:50">(<argument pos:start="147:44" pos:end="147:49"><expr pos:start="147:44" pos:end="147:49"><operator pos:start="147:44" pos:end="147:44">&amp;</operator><name pos:start="147:45" pos:end="147:49"><name pos:start="147:45" pos:end="147:45">q</name><operator pos:start="147:46" pos:end="147:47">-&gt;</operator><name pos:start="147:48" pos:end="147:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="153:5" pos:end="153:99"><expr pos:start="153:5" pos:end="153:98"><call pos:start="153:5" pos:end="153:98"><name pos:start="153:5" pos:end="153:24">imc_calculate_coeffs</name><argument_list pos:start="153:25" pos:end="153:98">(<argument pos:start="153:26" pos:end="153:26"><expr pos:start="153:26" pos:end="153:26"><name pos:start="153:26" pos:end="153:26">q</name></expr></argument>, <argument pos:start="153:29" pos:end="153:40"><expr pos:start="153:29" pos:end="153:40"><name pos:start="153:29" pos:end="153:40"><name pos:start="153:29" pos:end="153:29">q</name><operator pos:start="153:30" pos:end="153:31">-&gt;</operator><name pos:start="153:32" pos:end="153:40">flcoeffs1</name></name></expr></argument>, <argument pos:start="153:43" pos:end="153:54"><expr pos:start="153:43" pos:end="153:54"><name pos:start="153:43" pos:end="153:54"><name pos:start="153:43" pos:end="153:43">q</name><operator pos:start="153:44" pos:end="153:45">-&gt;</operator><name pos:start="153:46" pos:end="153:54">flcoeffs2</name></name></expr></argument>, <argument pos:start="153:57" pos:end="153:69"><expr pos:start="153:57" pos:end="153:69"><name pos:start="153:57" pos:end="153:69"><name pos:start="153:57" pos:end="153:57">q</name><operator pos:start="153:58" pos:end="153:59">-&gt;</operator><name pos:start="153:60" pos:end="153:69">bandWidthT</name></name></expr></argument>, <argument pos:start="153:72" pos:end="153:83"><expr pos:start="153:72" pos:end="153:83"><name pos:start="153:72" pos:end="153:83"><name pos:start="153:72" pos:end="153:72">q</name><operator pos:start="153:73" pos:end="153:74">-&gt;</operator><name pos:start="153:75" pos:end="153:83">flcoeffs3</name></name></expr></argument>, <argument pos:start="153:86" pos:end="153:97"><expr pos:start="153:86" pos:end="153:97"><name pos:start="153:86" pos:end="153:97"><name pos:start="153:86" pos:end="153:86">q</name><operator pos:start="153:87" pos:end="153:88">-&gt;</operator><name pos:start="153:89" pos:end="153:97">flcoeffs5</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:18"><expr pos:start="157:5" pos:end="157:17"><name pos:start="157:5" pos:end="157:13">bitscount</name> <operator pos:start="157:15" pos:end="157:15">=</operator> <literal type="number" pos:start="157:17" pos:end="157:17">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="159:5" pos:end="159:63">/* first 4 bands will be assigned 5 bits per coefficient */</comment>

    <if_stmt pos:start="161:5" pos:end="191:5"><if pos:start="161:5" pos:end="191:5">if <condition pos:start="161:8" pos:end="161:33">(<expr pos:start="161:9" pos:end="161:32"><name pos:start="161:9" pos:end="161:26">stream_format_code</name> <operator pos:start="161:28" pos:end="161:28">&amp;</operator> <literal type="number" pos:start="161:30" pos:end="161:32">0x2</literal></expr>)</condition> <block pos:start="161:35" pos:end="191:5">{<block_content pos:start="163:9" pos:end="189:9">

        <expr_stmt pos:start="163:9" pos:end="163:24"><expr pos:start="163:9" pos:end="163:23"><name pos:start="163:9" pos:end="163:17">bitscount</name> <operator pos:start="163:19" pos:end="163:20">+=</operator> <literal type="number" pos:start="163:22" pos:end="163:23">15</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="167:9" pos:end="167:28"><expr pos:start="167:9" pos:end="167:27"><name pos:start="167:9" pos:end="167:23"><name pos:start="167:9" pos:end="167:9">q</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:20">bitsBandT</name><index pos:start="167:21" pos:end="167:23">[<expr pos:start="167:22" pos:end="167:22"><literal type="number" pos:start="167:22" pos:end="167:22">0</literal></expr>]</index></name> <operator pos:start="167:25" pos:end="167:25">=</operator> <literal type="number" pos:start="167:27" pos:end="167:27">5</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:28"><expr pos:start="169:9" pos:end="169:27"><name pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:9">q</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:20">CWlengthT</name><index pos:start="169:21" pos:end="169:23">[<expr pos:start="169:22" pos:end="169:22"><literal type="number" pos:start="169:22" pos:end="169:22">0</literal></expr>]</index></name> <operator pos:start="169:25" pos:end="169:25">=</operator> <literal type="number" pos:start="169:27" pos:end="169:27">5</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:28"><expr pos:start="171:9" pos:end="171:27"><name pos:start="171:9" pos:end="171:23"><name pos:start="171:9" pos:end="171:9">q</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:20">CWlengthT</name><index pos:start="171:21" pos:end="171:23">[<expr pos:start="171:22" pos:end="171:22"><literal type="number" pos:start="171:22" pos:end="171:22">1</literal></expr>]</index></name> <operator pos:start="171:25" pos:end="171:25">=</operator> <literal type="number" pos:start="171:27" pos:end="171:27">5</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:28"><expr pos:start="173:9" pos:end="173:27"><name pos:start="173:9" pos:end="173:23"><name pos:start="173:9" pos:end="173:9">q</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:20">CWlengthT</name><index pos:start="173:21" pos:end="173:23">[<expr pos:start="173:22" pos:end="173:22"><literal type="number" pos:start="173:22" pos:end="173:22">2</literal></expr>]</index></name> <operator pos:start="173:25" pos:end="173:25">=</operator> <literal type="number" pos:start="173:27" pos:end="173:27">5</literal></expr>;</expr_stmt>

        <for pos:start="175:9" pos:end="189:9">for<control pos:start="175:12" pos:end="175:30">(<init pos:start="175:13" pos:end="175:18"><expr pos:start="175:13" pos:end="175:17"><name pos:start="175:13" pos:end="175:13">i</name> <operator pos:start="175:15" pos:end="175:15">=</operator> <literal type="number" pos:start="175:17" pos:end="175:17">1</literal></expr>;</init> <condition pos:start="175:20" pos:end="175:25"><expr pos:start="175:20" pos:end="175:24"><name pos:start="175:20" pos:end="175:20">i</name> <operator pos:start="175:22" pos:end="175:22">&lt;</operator> <literal type="number" pos:start="175:24" pos:end="175:24">4</literal></expr>;</condition> <incr pos:start="175:27" pos:end="175:29"><expr pos:start="175:27" pos:end="175:29"><name pos:start="175:27" pos:end="175:27">i</name><operator pos:start="175:28" pos:end="175:29">++</operator></expr></incr>)</control><block pos:start="175:31" pos:end="189:9">{<block_content pos:start="177:13" pos:end="187:13">

            <expr_stmt pos:start="177:13" pos:end="177:54"><expr pos:start="177:13" pos:end="177:53"><name pos:start="177:13" pos:end="177:16">bits</name> <operator pos:start="177:18" pos:end="177:18">=</operator> <ternary pos:start="177:20" pos:end="177:53"><condition pos:start="177:20" pos:end="177:47"><expr pos:start="177:20" pos:end="177:45"><operator pos:start="177:20" pos:end="177:20">(</operator><name pos:start="177:21" pos:end="177:38"><name pos:start="177:21" pos:end="177:21">q</name><operator pos:start="177:22" pos:end="177:23">-&gt;</operator><name pos:start="177:24" pos:end="177:35">levlCoeffBuf</name><index pos:start="177:36" pos:end="177:38">[<expr pos:start="177:37" pos:end="177:37"><name pos:start="177:37" pos:end="177:37">i</name></expr>]</index></name> <operator pos:start="177:40" pos:end="177:41">==</operator> <literal type="number" pos:start="177:43" pos:end="177:44">16</literal><operator pos:start="177:45" pos:end="177:45">)</operator></expr> ?</condition><then pos:start="177:49" pos:end="177:49"> <expr pos:start="177:49" pos:end="177:49"><literal type="number" pos:start="177:49" pos:end="177:49">0</literal></expr> </then><else pos:start="177:51" pos:end="177:53">: <expr pos:start="177:53" pos:end="177:53"><literal type="number" pos:start="177:53" pos:end="177:53">5</literal></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:35"><expr pos:start="179:13" pos:end="179:34"><name pos:start="179:13" pos:end="179:27"><name pos:start="179:13" pos:end="179:13">q</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:24">bitsBandT</name><index pos:start="179:25" pos:end="179:27">[<expr pos:start="179:26" pos:end="179:26"><name pos:start="179:26" pos:end="179:26">i</name></expr>]</index></name> <operator pos:start="179:29" pos:end="179:29">=</operator> <name pos:start="179:31" pos:end="179:34">bits</name></expr>;</expr_stmt>

            <for pos:start="181:13" pos:end="187:13">for<control pos:start="181:16" pos:end="181:56">(<init pos:start="181:17" pos:end="181:32"><expr pos:start="181:17" pos:end="181:31"><name pos:start="181:17" pos:end="181:17">j</name> <operator pos:start="181:19" pos:end="181:19">=</operator> <name pos:start="181:21" pos:end="181:31"><name pos:start="181:21" pos:end="181:28">band_tab</name><index pos:start="181:29" pos:end="181:31">[<expr pos:start="181:30" pos:end="181:30"><name pos:start="181:30" pos:end="181:30">i</name></expr>]</index></name></expr>;</init> <condition pos:start="181:34" pos:end="181:51"><expr pos:start="181:34" pos:end="181:50"><name pos:start="181:34" pos:end="181:34">j</name> <operator pos:start="181:36" pos:end="181:36">&lt;</operator> <name pos:start="181:38" pos:end="181:50"><name pos:start="181:38" pos:end="181:45">band_tab</name><index pos:start="181:46" pos:end="181:50">[<expr pos:start="181:47" pos:end="181:49"><name pos:start="181:47" pos:end="181:47">i</name><operator pos:start="181:48" pos:end="181:48">+</operator><literal type="number" pos:start="181:49" pos:end="181:49">1</literal></expr>]</index></name></expr>;</condition> <incr pos:start="181:53" pos:end="181:55"><expr pos:start="181:53" pos:end="181:55"><name pos:start="181:53" pos:end="181:53">j</name><operator pos:start="181:54" pos:end="181:55">++</operator></expr></incr>)</control> <block pos:start="181:58" pos:end="187:13">{<block_content pos:start="183:17" pos:end="185:34">

                <expr_stmt pos:start="183:17" pos:end="183:39"><expr pos:start="183:17" pos:end="183:38"><name pos:start="183:17" pos:end="183:31"><name pos:start="183:17" pos:end="183:17">q</name><operator pos:start="183:18" pos:end="183:19">-&gt;</operator><name pos:start="183:20" pos:end="183:28">CWlengthT</name><index pos:start="183:29" pos:end="183:31">[<expr pos:start="183:30" pos:end="183:30"><name pos:start="183:30" pos:end="183:30">j</name></expr>]</index></name> <operator pos:start="183:33" pos:end="183:33">=</operator> <name pos:start="183:35" pos:end="183:38">bits</name></expr>;</expr_stmt>

                <expr_stmt pos:start="185:17" pos:end="185:34"><expr pos:start="185:17" pos:end="185:33"><name pos:start="185:17" pos:end="185:25">bitscount</name> <operator pos:start="185:27" pos:end="185:28">+=</operator> <name pos:start="185:30" pos:end="185:33">bits</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="195:5" pos:end="203:5"><if pos:start="195:5" pos:end="203:5">if<condition pos:start="195:7" pos:end="195:98">(<expr pos:start="195:8" pos:end="195:97"><call pos:start="195:8" pos:end="195:93"><name pos:start="195:8" pos:end="195:21">bit_allocation</name> <argument_list pos:start="195:23" pos:end="195:93">(<argument pos:start="195:24" pos:end="195:24"><expr pos:start="195:24" pos:end="195:24"><name pos:start="195:24" pos:end="195:24">q</name></expr></argument>, <argument pos:start="195:27" pos:end="195:44"><expr pos:start="195:27" pos:end="195:44"><name pos:start="195:27" pos:end="195:44">stream_format_code</name></expr></argument>, <argument pos:start="195:47" pos:end="195:86"><expr pos:start="195:47" pos:end="195:86"><literal type="number" pos:start="195:47" pos:end="195:51">512</literal> <operator pos:start="195:51" pos:end="195:51">-</operator> <name pos:start="195:53" pos:end="195:61">bitscount</name> <operator pos:start="195:63" pos:end="195:63">-</operator> <call pos:start="195:65" pos:end="195:86"><name pos:start="195:65" pos:end="195:78">get_bits_count</name><argument_list pos:start="195:79" pos:end="195:86">(<argument pos:start="195:80" pos:end="195:85"><expr pos:start="195:80" pos:end="195:85"><operator pos:start="195:80" pos:end="195:80">&amp;</operator><name pos:start="195:81" pos:end="195:85"><name pos:start="195:81" pos:end="195:81">q</name><operator pos:start="195:82" pos:end="195:83">-&gt;</operator><name pos:start="195:84" pos:end="195:85">gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="195:89" pos:end="195:92"><expr pos:start="195:89" pos:end="195:92"><name pos:start="195:89" pos:end="195:92">flag</name></expr></argument>)</argument_list></call> <operator pos:start="195:95" pos:end="195:95">&lt;</operator> <literal type="number" pos:start="195:97" pos:end="195:97">0</literal></expr>)</condition> <block pos:start="195:100" pos:end="203:5">{<block_content pos:start="197:9" pos:end="201:18">

        <expr_stmt pos:start="197:9" pos:end="197:64"><expr pos:start="197:9" pos:end="197:63"><call pos:start="197:9" pos:end="197:63"><name pos:start="197:9" pos:end="197:14">av_log</name><argument_list pos:start="197:15" pos:end="197:63">(<argument pos:start="197:16" pos:end="197:20"><expr pos:start="197:16" pos:end="197:20"><name pos:start="197:16" pos:end="197:20">avctx</name></expr></argument>, <argument pos:start="197:23" pos:end="197:34"><expr pos:start="197:23" pos:end="197:34"><name pos:start="197:23" pos:end="197:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:37" pos:end="197:62"><expr pos:start="197:37" pos:end="197:62"><literal type="string" pos:start="197:37" pos:end="197:62">"Bit allocations failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:29"><expr pos:start="199:9" pos:end="199:28"><name pos:start="199:9" pos:end="199:24"><name pos:start="199:9" pos:end="199:9">q</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:24">decoder_reset</name></name> <operator pos:start="199:26" pos:end="199:26">=</operator> <literal type="number" pos:start="199:28" pos:end="199:28">1</literal></expr>;</expr_stmt>

        <return pos:start="201:9" pos:end="201:18">return <expr pos:start="201:16" pos:end="201:17"><operator pos:start="201:16" pos:end="201:16">-</operator><literal type="number" pos:start="201:17" pos:end="201:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="207:5" pos:end="223:5">for<control pos:start="207:8" pos:end="207:30">(<init pos:start="207:9" pos:end="207:14"><expr pos:start="207:9" pos:end="207:13"><name pos:start="207:9" pos:end="207:9">i</name> <operator pos:start="207:11" pos:end="207:11">=</operator> <literal type="number" pos:start="207:13" pos:end="207:13">0</literal></expr>;</init> <condition pos:start="207:16" pos:end="207:25"><expr pos:start="207:16" pos:end="207:24"><name pos:start="207:16" pos:end="207:16">i</name> <operator pos:start="207:18" pos:end="207:18">&lt;</operator> <name pos:start="207:20" pos:end="207:24">BANDS</name></expr>;</condition> <incr pos:start="207:27" pos:end="207:29"><expr pos:start="207:27" pos:end="207:29"><name pos:start="207:27" pos:end="207:27">i</name><operator pos:start="207:28" pos:end="207:29">++</operator></expr></incr>)</control> <block pos:start="207:32" pos:end="223:5">{<block_content pos:start="209:9" pos:end="221:38">

        <expr_stmt pos:start="209:9" pos:end="209:28"><expr pos:start="209:9" pos:end="209:27"><name pos:start="209:9" pos:end="209:23"><name pos:start="209:9" pos:end="209:9">q</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:20">sumLenArr</name><index pos:start="209:21" pos:end="209:23">[<expr pos:start="209:22" pos:end="209:22"><name pos:start="209:22" pos:end="209:22">i</name></expr>]</index></name> <operator pos:start="209:25" pos:end="209:25">=</operator> <literal type="number" pos:start="209:27" pos:end="209:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:30"><expr pos:start="211:9" pos:end="211:29"><name pos:start="211:9" pos:end="211:25"><name pos:start="211:9" pos:end="211:9">q</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:22">skipFlagRaw</name><index pos:start="211:23" pos:end="211:25">[<expr pos:start="211:24" pos:end="211:24"><name pos:start="211:24" pos:end="211:24">i</name></expr>]</index></name> <operator pos:start="211:27" pos:end="211:27">=</operator> <literal type="number" pos:start="211:29" pos:end="211:29">0</literal></expr>;</expr_stmt>

        <for pos:start="213:9" pos:end="215:47">for<control pos:start="213:12" pos:end="213:52">(<init pos:start="213:13" pos:end="213:28"><expr pos:start="213:13" pos:end="213:27"><name pos:start="213:13" pos:end="213:13">j</name> <operator pos:start="213:15" pos:end="213:15">=</operator> <name pos:start="213:17" pos:end="213:27"><name pos:start="213:17" pos:end="213:24">band_tab</name><index pos:start="213:25" pos:end="213:27">[<expr pos:start="213:26" pos:end="213:26"><name pos:start="213:26" pos:end="213:26">i</name></expr>]</index></name></expr>;</init> <condition pos:start="213:30" pos:end="213:47"><expr pos:start="213:30" pos:end="213:46"><name pos:start="213:30" pos:end="213:30">j</name> <operator pos:start="213:32" pos:end="213:32">&lt;</operator> <name pos:start="213:34" pos:end="213:46"><name pos:start="213:34" pos:end="213:41">band_tab</name><index pos:start="213:42" pos:end="213:46">[<expr pos:start="213:43" pos:end="213:45"><name pos:start="213:43" pos:end="213:43">i</name><operator pos:start="213:44" pos:end="213:44">+</operator><literal type="number" pos:start="213:45" pos:end="213:45">1</literal></expr>]</index></name></expr>;</condition> <incr pos:start="213:49" pos:end="213:51"><expr pos:start="213:49" pos:end="213:51"><name pos:start="213:49" pos:end="213:49">j</name><operator pos:start="213:50" pos:end="213:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="215:13" pos:end="215:47"><block_content pos:start="215:13" pos:end="215:47">

            <expr_stmt pos:start="215:13" pos:end="215:47"><expr pos:start="215:13" pos:end="215:46"><name pos:start="215:13" pos:end="215:27"><name pos:start="215:13" pos:end="215:13">q</name><operator pos:start="215:14" pos:end="215:15">-&gt;</operator><name pos:start="215:16" pos:end="215:24">sumLenArr</name><index pos:start="215:25" pos:end="215:27">[<expr pos:start="215:26" pos:end="215:26"><name pos:start="215:26" pos:end="215:26">i</name></expr>]</index></name> <operator pos:start="215:29" pos:end="215:30">+=</operator> <name pos:start="215:32" pos:end="215:46"><name pos:start="215:32" pos:end="215:32">q</name><operator pos:start="215:33" pos:end="215:34">-&gt;</operator><name pos:start="215:35" pos:end="215:43">CWlengthT</name><index pos:start="215:44" pos:end="215:46">[<expr pos:start="215:45" pos:end="215:45"><name pos:start="215:45" pos:end="215:45">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <if_stmt pos:start="217:9" pos:end="221:38"><if pos:start="217:9" pos:end="221:38">if <condition pos:start="217:12" pos:end="217:31">(<expr pos:start="217:13" pos:end="217:30"><name pos:start="217:13" pos:end="217:30"><name pos:start="217:13" pos:end="217:13">q</name><operator pos:start="217:14" pos:end="217:15">-&gt;</operator><name pos:start="217:16" pos:end="217:27">bandFlagsBuf</name><index pos:start="217:28" pos:end="217:30">[<expr pos:start="217:29" pos:end="217:29"><name pos:start="217:29" pos:end="217:29">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="219:13" pos:end="221:38"><block_content pos:start="219:13" pos:end="221:38">

            <if_stmt pos:start="219:13" pos:end="221:38"><if pos:start="219:13" pos:end="221:38">if<condition pos:start="219:15" pos:end="219:99">( <expr pos:start="219:17" pos:end="219:98"><operator pos:start="219:17" pos:end="219:17">(</operator><operator pos:start="219:18" pos:end="219:18">(</operator><operator pos:start="219:19" pos:end="219:19">(</operator><name pos:start="219:20" pos:end="219:32"><name pos:start="219:20" pos:end="219:27">band_tab</name><index pos:start="219:28" pos:end="219:32">[<expr pos:start="219:29" pos:end="219:31"><name pos:start="219:29" pos:end="219:29">i</name><operator pos:start="219:30" pos:end="219:30">+</operator><literal type="number" pos:start="219:31" pos:end="219:31">1</literal></expr>]</index></name> <operator pos:start="219:34" pos:end="219:34">-</operator> <name pos:start="219:36" pos:end="219:46"><name pos:start="219:36" pos:end="219:43">band_tab</name><index pos:start="219:44" pos:end="219:46">[<expr pos:start="219:45" pos:end="219:45"><name pos:start="219:45" pos:end="219:45">i</name></expr>]</index></name><operator pos:start="219:47" pos:end="219:47">)</operator> <operator pos:start="219:49" pos:end="219:49">*</operator> <literal type="number" pos:start="219:51" pos:end="219:53">1.5</literal><operator pos:start="219:54" pos:end="219:54">)</operator> <operator pos:start="219:56" pos:end="219:56">&gt;</operator> <name pos:start="219:58" pos:end="219:72"><name pos:start="219:58" pos:end="219:58">q</name><operator pos:start="219:59" pos:end="219:60">-&gt;</operator><name pos:start="219:61" pos:end="219:69">sumLenArr</name><index pos:start="219:70" pos:end="219:72">[<expr pos:start="219:71" pos:end="219:71"><name pos:start="219:71" pos:end="219:71">i</name></expr>]</index></name><operator pos:start="219:73" pos:end="219:73">)</operator> <operator pos:start="219:75" pos:end="219:76">&amp;&amp;</operator> <operator pos:start="219:78" pos:end="219:78">(</operator><name pos:start="219:79" pos:end="219:93"><name pos:start="219:79" pos:end="219:79">q</name><operator pos:start="219:80" pos:end="219:81">-&gt;</operator><name pos:start="219:82" pos:end="219:90">sumLenArr</name><index pos:start="219:91" pos:end="219:93">[<expr pos:start="219:92" pos:end="219:92"><name pos:start="219:92" pos:end="219:92">i</name></expr>]</index></name> <operator pos:start="219:95" pos:end="219:95">&gt;</operator> <literal type="number" pos:start="219:97" pos:end="219:97">0</literal><operator pos:start="219:98" pos:end="219:98">)</operator></expr>)</condition><block type="pseudo" pos:start="221:17" pos:end="221:38"><block_content pos:start="221:17" pos:end="221:38">

                <expr_stmt pos:start="221:17" pos:end="221:38"><expr pos:start="221:17" pos:end="221:37"><name pos:start="221:17" pos:end="221:33"><name pos:start="221:17" pos:end="221:17">q</name><operator pos:start="221:18" pos:end="221:19">-&gt;</operator><name pos:start="221:20" pos:end="221:30">skipFlagRaw</name><index pos:start="221:31" pos:end="221:33">[<expr pos:start="221:32" pos:end="221:32"><name pos:start="221:32" pos:end="221:32">i</name></expr>]</index></name> <operator pos:start="221:35" pos:end="221:35">=</operator> <literal type="number" pos:start="221:37" pos:end="221:37">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="227:5" pos:end="227:26"><expr pos:start="227:5" pos:end="227:25"><call pos:start="227:5" pos:end="227:25"><name pos:start="227:5" pos:end="227:22">imc_get_skip_coeff</name><argument_list pos:start="227:23" pos:end="227:25">(<argument pos:start="227:24" pos:end="227:24"><expr pos:start="227:24" pos:end="227:24"><name pos:start="227:24" pos:end="227:24">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="231:5" pos:end="245:5">for<control pos:start="231:8" pos:end="231:30">(<init pos:start="231:9" pos:end="231:14"><expr pos:start="231:9" pos:end="231:13"><name pos:start="231:9" pos:end="231:9">i</name> <operator pos:start="231:11" pos:end="231:11">=</operator> <literal type="number" pos:start="231:13" pos:end="231:13">0</literal></expr>;</init> <condition pos:start="231:16" pos:end="231:25"><expr pos:start="231:16" pos:end="231:24"><name pos:start="231:16" pos:end="231:16">i</name> <operator pos:start="231:18" pos:end="231:18">&lt;</operator> <name pos:start="231:20" pos:end="231:24">BANDS</name></expr>;</condition> <incr pos:start="231:27" pos:end="231:29"><expr pos:start="231:27" pos:end="231:29"><name pos:start="231:27" pos:end="231:27">i</name><operator pos:start="231:28" pos:end="231:29">++</operator></expr></incr>)</control> <block pos:start="231:32" pos:end="245:5">{<block_content pos:start="233:9" pos:end="243:9">

        <expr_stmt pos:start="233:9" pos:end="233:42"><expr pos:start="233:9" pos:end="233:41"><name pos:start="233:9" pos:end="233:23"><name pos:start="233:9" pos:end="233:9">q</name><operator pos:start="233:10" pos:end="233:11">-&gt;</operator><name pos:start="233:12" pos:end="233:20">flcoeffs6</name><index pos:start="233:21" pos:end="233:23">[<expr pos:start="233:22" pos:end="233:22"><name pos:start="233:22" pos:end="233:22">i</name></expr>]</index></name> <operator pos:start="233:25" pos:end="233:25">=</operator> <name pos:start="233:27" pos:end="233:41"><name pos:start="233:27" pos:end="233:27">q</name><operator pos:start="233:28" pos:end="233:29">-&gt;</operator><name pos:start="233:30" pos:end="233:38">flcoeffs1</name><index pos:start="233:39" pos:end="233:41">[<expr pos:start="233:40" pos:end="233:40"><name pos:start="233:40" pos:end="233:40">i</name></expr>]</index></name></expr>;</expr_stmt>

        <comment type="block" pos:start="235:9" pos:end="235:66">/* band has flag set and at least one coded coefficient */</comment>

        <if_stmt pos:start="237:9" pos:end="243:9"><if pos:start="237:9" pos:end="243:9">if <condition pos:start="237:12" pos:end="237:87">(<expr pos:start="237:13" pos:end="237:86"><name pos:start="237:13" pos:end="237:30"><name pos:start="237:13" pos:end="237:13">q</name><operator pos:start="237:14" pos:end="237:15">-&gt;</operator><name pos:start="237:16" pos:end="237:27">bandFlagsBuf</name><index pos:start="237:28" pos:end="237:30">[<expr pos:start="237:29" pos:end="237:29"><name pos:start="237:29" pos:end="237:29">i</name></expr>]</index></name> <operator pos:start="237:32" pos:end="237:33">&amp;&amp;</operator> <operator pos:start="237:35" pos:end="237:35">(</operator><name pos:start="237:36" pos:end="237:48"><name pos:start="237:36" pos:end="237:43">band_tab</name><index pos:start="237:44" pos:end="237:48">[<expr pos:start="237:45" pos:end="237:47"><name pos:start="237:45" pos:end="237:45">i</name><operator pos:start="237:46" pos:end="237:46">+</operator><literal type="number" pos:start="237:47" pos:end="237:47">1</literal></expr>]</index></name> <operator pos:start="237:50" pos:end="237:50">-</operator> <name pos:start="237:52" pos:end="237:62"><name pos:start="237:52" pos:end="237:59">band_tab</name><index pos:start="237:60" pos:end="237:62">[<expr pos:start="237:61" pos:end="237:61"><name pos:start="237:61" pos:end="237:61">i</name></expr>]</index></name><operator pos:start="237:63" pos:end="237:63">)</operator> <operator pos:start="237:65" pos:end="237:66">!=</operator> <name pos:start="237:68" pos:end="237:86"><name pos:start="237:68" pos:end="237:68">q</name><operator pos:start="237:69" pos:end="237:70">-&gt;</operator><name pos:start="237:71" pos:end="237:83">skipFlagCount</name><index pos:start="237:84" pos:end="237:86">[<expr pos:start="237:85" pos:end="237:85"><name pos:start="237:85" pos:end="237:85">i</name></expr>]</index></name></expr>)</condition><block pos:start="237:88" pos:end="243:9">{<block_content pos:start="239:17" pos:end="241:100">

                <expr_stmt pos:start="239:17" pos:end="241:100"><expr pos:start="239:17" pos:end="241:99"><name pos:start="239:17" pos:end="239:31"><name pos:start="239:17" pos:end="239:17">q</name><operator pos:start="239:18" pos:end="239:19">-&gt;</operator><name pos:start="239:20" pos:end="239:28">flcoeffs6</name><index pos:start="239:29" pos:end="239:31">[<expr pos:start="239:30" pos:end="239:30"><name pos:start="239:30" pos:end="239:30">i</name></expr>]</index></name> <operator pos:start="239:33" pos:end="239:34">*=</operator> <name pos:start="239:36" pos:end="239:75"><name pos:start="239:36" pos:end="239:36">q</name><operator pos:start="239:37" pos:end="239:38">-&gt;</operator><name pos:start="239:39" pos:end="239:46">sqrt_tab</name><index pos:start="239:47" pos:end="239:75">[<expr pos:start="239:48" pos:end="239:74"><name pos:start="239:48" pos:end="239:60"><name pos:start="239:48" pos:end="239:55">band_tab</name><index pos:start="239:56" pos:end="239:60">[<expr pos:start="239:57" pos:end="239:59"><name pos:start="239:57" pos:end="239:57">i</name><operator pos:start="239:58" pos:end="239:58">+</operator><literal type="number" pos:start="239:59" pos:end="239:59">1</literal></expr>]</index></name> <operator pos:start="239:62" pos:end="239:62">-</operator> <name pos:start="239:64" pos:end="239:74"><name pos:start="239:64" pos:end="239:71">band_tab</name><index pos:start="239:72" pos:end="239:74">[<expr pos:start="239:73" pos:end="239:73"><name pos:start="239:73" pos:end="239:73">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="239:77" pos:end="239:77">/</operator>

                                   <name pos:start="241:36" pos:end="241:99"><name pos:start="241:36" pos:end="241:36">q</name><operator pos:start="241:37" pos:end="241:38">-&gt;</operator><name pos:start="241:39" pos:end="241:46">sqrt_tab</name><index pos:start="241:47" pos:end="241:99">[<expr pos:start="241:48" pos:end="241:98"><operator pos:start="241:48" pos:end="241:48">(</operator><name pos:start="241:49" pos:end="241:61"><name pos:start="241:49" pos:end="241:56">band_tab</name><index pos:start="241:57" pos:end="241:61">[<expr pos:start="241:58" pos:end="241:60"><name pos:start="241:58" pos:end="241:58">i</name><operator pos:start="241:59" pos:end="241:59">+</operator><literal type="number" pos:start="241:60" pos:end="241:60">1</literal></expr>]</index></name> <operator pos:start="241:63" pos:end="241:63">-</operator> <name pos:start="241:65" pos:end="241:75"><name pos:start="241:65" pos:end="241:72">band_tab</name><index pos:start="241:73" pos:end="241:75">[<expr pos:start="241:74" pos:end="241:74"><name pos:start="241:74" pos:end="241:74">i</name></expr>]</index></name> <operator pos:start="241:77" pos:end="241:77">-</operator> <name pos:start="241:79" pos:end="241:97"><name pos:start="241:79" pos:end="241:79">q</name><operator pos:start="241:80" pos:end="241:81">-&gt;</operator><name pos:start="241:82" pos:end="241:94">skipFlagCount</name><index pos:start="241:95" pos:end="241:97">[<expr pos:start="241:96" pos:end="241:96"><name pos:start="241:96" pos:end="241:96">i</name></expr>]</index></name><operator pos:start="241:98" pos:end="241:98">)</operator></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="249:5" pos:end="249:68">/* calculate bits left, bits needed and adjust bit allocation */</comment>

    <expr_stmt pos:start="251:5" pos:end="251:22"><expr pos:start="251:5" pos:end="251:21"><name pos:start="251:5" pos:end="251:8">bits</name> <operator pos:start="251:10" pos:end="251:10">=</operator> <name pos:start="251:12" pos:end="251:17">summer</name> <operator pos:start="251:19" pos:end="251:19">=</operator> <literal type="number" pos:start="251:21" pos:end="251:21">0</literal></expr>;</expr_stmt>



    <for pos:start="255:5" pos:end="277:5">for<control pos:start="255:8" pos:end="255:30">(<init pos:start="255:9" pos:end="255:14"><expr pos:start="255:9" pos:end="255:13"><name pos:start="255:9" pos:end="255:9">i</name> <operator pos:start="255:11" pos:end="255:11">=</operator> <literal type="number" pos:start="255:13" pos:end="255:13">0</literal></expr>;</init> <condition pos:start="255:16" pos:end="255:25"><expr pos:start="255:16" pos:end="255:24"><name pos:start="255:16" pos:end="255:16">i</name> <operator pos:start="255:18" pos:end="255:18">&lt;</operator> <name pos:start="255:20" pos:end="255:24">BANDS</name></expr>;</condition> <incr pos:start="255:27" pos:end="255:29"><expr pos:start="255:27" pos:end="255:29"><name pos:start="255:27" pos:end="255:27">i</name><operator pos:start="255:28" pos:end="255:29">++</operator></expr></incr>)</control> <block pos:start="255:32" pos:end="277:5">{<block_content pos:start="257:9" pos:end="275:9">

        <if_stmt pos:start="257:9" pos:end="275:9"><if pos:start="257:9" pos:end="275:9">if <condition pos:start="257:12" pos:end="257:31">(<expr pos:start="257:13" pos:end="257:30"><name pos:start="257:13" pos:end="257:30"><name pos:start="257:13" pos:end="257:13">q</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:27">bandFlagsBuf</name><index pos:start="257:28" pos:end="257:30">[<expr pos:start="257:29" pos:end="257:29"><name pos:start="257:29" pos:end="257:29">i</name></expr>]</index></name></expr>)</condition> <block pos:start="257:33" pos:end="275:9">{<block_content pos:start="259:13" pos:end="273:41">

            <for pos:start="259:13" pos:end="269:13">for<control pos:start="259:16" pos:end="259:56">(<init pos:start="259:17" pos:end="259:32"><expr pos:start="259:17" pos:end="259:31"><name pos:start="259:17" pos:end="259:17">j</name> <operator pos:start="259:19" pos:end="259:19">=</operator> <name pos:start="259:21" pos:end="259:31"><name pos:start="259:21" pos:end="259:28">band_tab</name><index pos:start="259:29" pos:end="259:31">[<expr pos:start="259:30" pos:end="259:30"><name pos:start="259:30" pos:end="259:30">i</name></expr>]</index></name></expr>;</init> <condition pos:start="259:34" pos:end="259:51"><expr pos:start="259:34" pos:end="259:50"><name pos:start="259:34" pos:end="259:34">j</name> <operator pos:start="259:36" pos:end="259:36">&lt;</operator> <name pos:start="259:38" pos:end="259:50"><name pos:start="259:38" pos:end="259:45">band_tab</name><index pos:start="259:46" pos:end="259:50">[<expr pos:start="259:47" pos:end="259:49"><name pos:start="259:47" pos:end="259:47">i</name><operator pos:start="259:48" pos:end="259:48">+</operator><literal type="number" pos:start="259:49" pos:end="259:49">1</literal></expr>]</index></name></expr>;</condition> <incr pos:start="259:53" pos:end="259:55"><expr pos:start="259:53" pos:end="259:55"><name pos:start="259:53" pos:end="259:53">j</name><operator pos:start="259:54" pos:end="259:55">++</operator></expr></incr>)</control> <block pos:start="259:58" pos:end="269:13">{<block_content pos:start="261:17" pos:end="267:17">

                <if_stmt pos:start="261:17" pos:end="267:17"><if pos:start="261:17" pos:end="267:17">if<condition pos:start="261:19" pos:end="261:35">(<expr pos:start="261:20" pos:end="261:34"><name pos:start="261:20" pos:end="261:34"><name pos:start="261:20" pos:end="261:20">q</name><operator pos:start="261:21" pos:end="261:22">-&gt;</operator><name pos:start="261:23" pos:end="261:31">skipFlags</name><index pos:start="261:32" pos:end="261:34">[<expr pos:start="261:33" pos:end="261:33"><name pos:start="261:33" pos:end="261:33">j</name></expr>]</index></name></expr>)</condition> <block pos:start="261:37" pos:end="267:17">{<block_content pos:start="263:21" pos:end="265:40">

                    <expr_stmt pos:start="263:21" pos:end="263:46"><expr pos:start="263:21" pos:end="263:45"><name pos:start="263:21" pos:end="263:26">summer</name> <operator pos:start="263:28" pos:end="263:29">+=</operator> <name pos:start="263:31" pos:end="263:45"><name pos:start="263:31" pos:end="263:31">q</name><operator pos:start="263:32" pos:end="263:33">-&gt;</operator><name pos:start="263:34" pos:end="263:42">CWlengthT</name><index pos:start="263:43" pos:end="263:45">[<expr pos:start="263:44" pos:end="263:44"><name pos:start="263:44" pos:end="263:44">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="265:21" pos:end="265:40"><expr pos:start="265:21" pos:end="265:39"><name pos:start="265:21" pos:end="265:35"><name pos:start="265:21" pos:end="265:21">q</name><operator pos:start="265:22" pos:end="265:23">-&gt;</operator><name pos:start="265:24" pos:end="265:32">CWlengthT</name><index pos:start="265:33" pos:end="265:35">[<expr pos:start="265:34" pos:end="265:34"><name pos:start="265:34" pos:end="265:34">j</name></expr>]</index></name> <operator pos:start="265:37" pos:end="265:37">=</operator> <literal type="number" pos:start="265:39" pos:end="265:39">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="271:13" pos:end="271:39"><expr pos:start="271:13" pos:end="271:38"><name pos:start="271:13" pos:end="271:16">bits</name> <operator pos:start="271:18" pos:end="271:19">+=</operator> <name pos:start="271:21" pos:end="271:38"><name pos:start="271:21" pos:end="271:21">q</name><operator pos:start="271:22" pos:end="271:23">-&gt;</operator><name pos:start="271:24" pos:end="271:35">skipFlagBits</name><index pos:start="271:36" pos:end="271:38">[<expr pos:start="271:37" pos:end="271:37"><name pos:start="271:37" pos:end="271:37">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:41"><expr pos:start="273:13" pos:end="273:40"><name pos:start="273:13" pos:end="273:18">summer</name> <operator pos:start="273:20" pos:end="273:21">-=</operator> <name pos:start="273:23" pos:end="273:40"><name pos:start="273:23" pos:end="273:23">q</name><operator pos:start="273:24" pos:end="273:25">-&gt;</operator><name pos:start="273:26" pos:end="273:37">skipFlagBits</name><index pos:start="273:38" pos:end="273:40">[<expr pos:start="273:39" pos:end="273:39"><name pos:start="273:39" pos:end="273:39">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="279:5" pos:end="279:41"><expr pos:start="279:5" pos:end="279:40"><call pos:start="279:5" pos:end="279:40"><name pos:start="279:5" pos:end="279:29">imc_adjust_bit_allocation</name><argument_list pos:start="279:30" pos:end="279:40">(<argument pos:start="279:31" pos:end="279:31"><expr pos:start="279:31" pos:end="279:31"><name pos:start="279:31" pos:end="279:31">q</name></expr></argument>, <argument pos:start="279:34" pos:end="279:39"><expr pos:start="279:34" pos:end="279:39"><name pos:start="279:34" pos:end="279:39">summer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="283:5" pos:end="295:5">for<control pos:start="283:8" pos:end="283:30">(<init pos:start="283:9" pos:end="283:14"><expr pos:start="283:9" pos:end="283:13"><name pos:start="283:9" pos:end="283:9">i</name> <operator pos:start="283:11" pos:end="283:11">=</operator> <literal type="number" pos:start="283:13" pos:end="283:13">0</literal></expr>;</init> <condition pos:start="283:16" pos:end="283:25"><expr pos:start="283:16" pos:end="283:24"><name pos:start="283:16" pos:end="283:16">i</name> <operator pos:start="283:18" pos:end="283:18">&lt;</operator> <name pos:start="283:20" pos:end="283:24">BANDS</name></expr>;</condition> <incr pos:start="283:27" pos:end="283:29"><expr pos:start="283:27" pos:end="283:29"><name pos:start="283:27" pos:end="283:27">i</name><operator pos:start="283:28" pos:end="283:29">++</operator></expr></incr>)</control> <block pos:start="283:32" pos:end="295:5">{<block_content pos:start="285:9" pos:end="293:51">

        <expr_stmt pos:start="285:9" pos:end="285:28"><expr pos:start="285:9" pos:end="285:27"><name pos:start="285:9" pos:end="285:23"><name pos:start="285:9" pos:end="285:9">q</name><operator pos:start="285:10" pos:end="285:11">-&gt;</operator><name pos:start="285:12" pos:end="285:20">sumLenArr</name><index pos:start="285:21" pos:end="285:23">[<expr pos:start="285:22" pos:end="285:22"><name pos:start="285:22" pos:end="285:22">i</name></expr>]</index></name> <operator pos:start="285:25" pos:end="285:25">=</operator> <literal type="number" pos:start="285:27" pos:end="285:27">0</literal></expr>;</expr_stmt>



        <for pos:start="289:9" pos:end="293:51">for<control pos:start="289:12" pos:end="289:52">(<init pos:start="289:13" pos:end="289:28"><expr pos:start="289:13" pos:end="289:27"><name pos:start="289:13" pos:end="289:13">j</name> <operator pos:start="289:15" pos:end="289:15">=</operator> <name pos:start="289:17" pos:end="289:27"><name pos:start="289:17" pos:end="289:24">band_tab</name><index pos:start="289:25" pos:end="289:27">[<expr pos:start="289:26" pos:end="289:26"><name pos:start="289:26" pos:end="289:26">i</name></expr>]</index></name></expr>;</init> <condition pos:start="289:30" pos:end="289:47"><expr pos:start="289:30" pos:end="289:46"><name pos:start="289:30" pos:end="289:30">j</name> <operator pos:start="289:32" pos:end="289:32">&lt;</operator> <name pos:start="289:34" pos:end="289:46"><name pos:start="289:34" pos:end="289:41">band_tab</name><index pos:start="289:42" pos:end="289:46">[<expr pos:start="289:43" pos:end="289:45"><name pos:start="289:43" pos:end="289:43">i</name><operator pos:start="289:44" pos:end="289:44">+</operator><literal type="number" pos:start="289:45" pos:end="289:45">1</literal></expr>]</index></name></expr>;</condition> <incr pos:start="289:49" pos:end="289:51"><expr pos:start="289:49" pos:end="289:51"><name pos:start="289:49" pos:end="289:49">j</name><operator pos:start="289:50" pos:end="289:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="291:13" pos:end="293:51"><block_content pos:start="291:13" pos:end="293:51">

            <if_stmt pos:start="291:13" pos:end="293:51"><if pos:start="291:13" pos:end="293:51">if <condition pos:start="291:16" pos:end="291:33">(<expr pos:start="291:17" pos:end="291:32"><operator pos:start="291:17" pos:end="291:17">!</operator><name pos:start="291:18" pos:end="291:32"><name pos:start="291:18" pos:end="291:18">q</name><operator pos:start="291:19" pos:end="291:20">-&gt;</operator><name pos:start="291:21" pos:end="291:29">skipFlags</name><index pos:start="291:30" pos:end="291:32">[<expr pos:start="291:31" pos:end="291:31"><name pos:start="291:31" pos:end="291:31">j</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="293:17" pos:end="293:51"><block_content pos:start="293:17" pos:end="293:51">

                <expr_stmt pos:start="293:17" pos:end="293:51"><expr pos:start="293:17" pos:end="293:50"><name pos:start="293:17" pos:end="293:31"><name pos:start="293:17" pos:end="293:17">q</name><operator pos:start="293:18" pos:end="293:19">-&gt;</operator><name pos:start="293:20" pos:end="293:28">sumLenArr</name><index pos:start="293:29" pos:end="293:31">[<expr pos:start="293:30" pos:end="293:30"><name pos:start="293:30" pos:end="293:30">i</name></expr>]</index></name> <operator pos:start="293:33" pos:end="293:34">+=</operator> <name pos:start="293:36" pos:end="293:50"><name pos:start="293:36" pos:end="293:36">q</name><operator pos:start="293:37" pos:end="293:38">-&gt;</operator><name pos:start="293:39" pos:end="293:47">CWlengthT</name><index pos:start="293:48" pos:end="293:50">[<expr pos:start="293:49" pos:end="293:49"><name pos:start="293:49" pos:end="293:49">j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="299:5" pos:end="299:50"><expr pos:start="299:5" pos:end="299:49"><call pos:start="299:5" pos:end="299:49"><name pos:start="299:5" pos:end="299:10">memset</name><argument_list pos:start="299:11" pos:end="299:49">(<argument pos:start="299:12" pos:end="299:23"><expr pos:start="299:12" pos:end="299:23"><name pos:start="299:12" pos:end="299:23"><name pos:start="299:12" pos:end="299:12">q</name><operator pos:start="299:13" pos:end="299:14">-&gt;</operator><name pos:start="299:15" pos:end="299:23">codewords</name></name></expr></argument>, <argument pos:start="299:26" pos:end="299:26"><expr pos:start="299:26" pos:end="299:26"><literal type="number" pos:start="299:26" pos:end="299:26">0</literal></expr></argument>, <argument pos:start="299:29" pos:end="299:48"><expr pos:start="299:29" pos:end="299:48"><sizeof pos:start="299:29" pos:end="299:48">sizeof<argument_list pos:start="299:35" pos:end="299:48">(<argument pos:start="299:36" pos:end="299:47"><expr pos:start="299:36" pos:end="299:47"><name pos:start="299:36" pos:end="299:47"><name pos:start="299:36" pos:end="299:36">q</name><operator pos:start="299:37" pos:end="299:38">-&gt;</operator><name pos:start="299:39" pos:end="299:47">codewords</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="303:5" pos:end="311:5"><if pos:start="303:5" pos:end="311:5">if<condition pos:start="303:7" pos:end="303:29">(<expr pos:start="303:8" pos:end="303:28"><call pos:start="303:8" pos:end="303:24"><name pos:start="303:8" pos:end="303:21">imc_get_coeffs</name><argument_list pos:start="303:22" pos:end="303:24">(<argument pos:start="303:23" pos:end="303:23"><expr pos:start="303:23" pos:end="303:23"><name pos:start="303:23" pos:end="303:23">q</name></expr></argument>)</argument_list></call> <operator pos:start="303:26" pos:end="303:26">&lt;</operator> <literal type="number" pos:start="303:28" pos:end="303:28">0</literal></expr>)</condition> <block pos:start="303:31" pos:end="311:5">{<block_content pos:start="305:9" pos:end="309:17">

        <expr_stmt pos:start="305:9" pos:end="305:66"><expr pos:start="305:9" pos:end="305:65"><call pos:start="305:9" pos:end="305:65"><name pos:start="305:9" pos:end="305:14">av_log</name><argument_list pos:start="305:15" pos:end="305:65">(<argument pos:start="305:16" pos:end="305:20"><expr pos:start="305:16" pos:end="305:20"><name pos:start="305:16" pos:end="305:20">avctx</name></expr></argument>, <argument pos:start="305:23" pos:end="305:34"><expr pos:start="305:23" pos:end="305:34"><name pos:start="305:23" pos:end="305:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="305:37" pos:end="305:64"><expr pos:start="305:37" pos:end="305:64"><literal type="string" pos:start="305:37" pos:end="305:64">"Read coefficients failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:29"><expr pos:start="307:9" pos:end="307:28"><name pos:start="307:9" pos:end="307:24"><name pos:start="307:9" pos:end="307:9">q</name><operator pos:start="307:10" pos:end="307:11">-&gt;</operator><name pos:start="307:12" pos:end="307:24">decoder_reset</name></name> <operator pos:start="307:26" pos:end="307:26">=</operator> <literal type="number" pos:start="307:28" pos:end="307:28">1</literal></expr>;</expr_stmt>

        <return pos:start="309:9" pos:end="309:17">return <expr pos:start="309:16" pos:end="309:16"><literal type="number" pos:start="309:16" pos:end="309:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="315:5" pos:end="323:5"><if pos:start="315:5" pos:end="323:5">if<condition pos:start="315:7" pos:end="315:54">(<expr pos:start="315:8" pos:end="315:53"><call pos:start="315:8" pos:end="315:49"><name pos:start="315:8" pos:end="315:26">inverse_quant_coeff</name><argument_list pos:start="315:27" pos:end="315:49">(<argument pos:start="315:28" pos:end="315:28"><expr pos:start="315:28" pos:end="315:28"><name pos:start="315:28" pos:end="315:28">q</name></expr></argument>, <argument pos:start="315:31" pos:end="315:48"><expr pos:start="315:31" pos:end="315:48"><name pos:start="315:31" pos:end="315:48">stream_format_code</name></expr></argument>)</argument_list></call> <operator pos:start="315:51" pos:end="315:51">&lt;</operator> <literal type="number" pos:start="315:53" pos:end="315:53">0</literal></expr>)</condition> <block pos:start="315:56" pos:end="323:5">{<block_content pos:start="317:9" pos:end="321:17">

        <expr_stmt pos:start="317:9" pos:end="317:85"><expr pos:start="317:9" pos:end="317:84"><call pos:start="317:9" pos:end="317:84"><name pos:start="317:9" pos:end="317:14">av_log</name><argument_list pos:start="317:15" pos:end="317:84">(<argument pos:start="317:16" pos:end="317:20"><expr pos:start="317:16" pos:end="317:20"><name pos:start="317:16" pos:end="317:20">avctx</name></expr></argument>, <argument pos:start="317:23" pos:end="317:34"><expr pos:start="317:23" pos:end="317:34"><name pos:start="317:23" pos:end="317:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="317:37" pos:end="317:83"><expr pos:start="317:37" pos:end="317:83"><literal type="string" pos:start="317:37" pos:end="317:83">"Inverse quantization of coefficients failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:29"><expr pos:start="319:9" pos:end="319:28"><name pos:start="319:9" pos:end="319:24"><name pos:start="319:9" pos:end="319:9">q</name><operator pos:start="319:10" pos:end="319:11">-&gt;</operator><name pos:start="319:12" pos:end="319:24">decoder_reset</name></name> <operator pos:start="319:26" pos:end="319:26">=</operator> <literal type="number" pos:start="319:28" pos:end="319:28">1</literal></expr>;</expr_stmt>

        <return pos:start="321:9" pos:end="321:17">return <expr pos:start="321:16" pos:end="321:16"><literal type="number" pos:start="321:16" pos:end="321:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="327:5" pos:end="327:50"><expr pos:start="327:5" pos:end="327:49"><call pos:start="327:5" pos:end="327:49"><name pos:start="327:5" pos:end="327:10">memset</name><argument_list pos:start="327:11" pos:end="327:49">(<argument pos:start="327:12" pos:end="327:23"><expr pos:start="327:12" pos:end="327:23"><name pos:start="327:12" pos:end="327:23"><name pos:start="327:12" pos:end="327:12">q</name><operator pos:start="327:13" pos:end="327:14">-&gt;</operator><name pos:start="327:15" pos:end="327:23">skipFlags</name></name></expr></argument>, <argument pos:start="327:26" pos:end="327:26"><expr pos:start="327:26" pos:end="327:26"><literal type="number" pos:start="327:26" pos:end="327:26">0</literal></expr></argument>, <argument pos:start="327:29" pos:end="327:48"><expr pos:start="327:29" pos:end="327:48"><sizeof pos:start="327:29" pos:end="327:48">sizeof<argument_list pos:start="327:35" pos:end="327:48">(<argument pos:start="327:36" pos:end="327:47"><expr pos:start="327:36" pos:end="327:47"><name pos:start="327:36" pos:end="327:47"><name pos:start="327:36" pos:end="327:36">q</name><operator pos:start="327:37" pos:end="327:38">-&gt;</operator><name pos:start="327:39" pos:end="327:47">skipFlags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="331:5" pos:end="331:20"><expr pos:start="331:5" pos:end="331:19"><call pos:start="331:5" pos:end="331:19"><name pos:start="331:5" pos:end="331:16">imc_imdct256</name><argument_list pos:start="331:17" pos:end="331:19">(<argument pos:start="331:18" pos:end="331:18"><expr pos:start="331:18" pos:end="331:18"><name pos:start="331:18" pos:end="331:18">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="335:5" pos:end="335:40"><expr pos:start="335:5" pos:end="335:39"><operator pos:start="335:5" pos:end="335:5">*</operator><name pos:start="335:6" pos:end="335:14">data_size</name> <operator pos:start="335:16" pos:end="335:16">=</operator> <name pos:start="335:18" pos:end="335:23">COEFFS</name> <operator pos:start="335:25" pos:end="335:25">*</operator> <sizeof pos:start="335:27" pos:end="335:39">sizeof<argument_list pos:start="335:33" pos:end="335:39">(<argument pos:start="335:34" pos:end="335:38"><expr pos:start="335:34" pos:end="335:38"><name pos:start="335:34" pos:end="335:38">float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <return pos:start="339:5" pos:end="339:26">return <expr pos:start="339:12" pos:end="339:25"><name pos:start="339:12" pos:end="339:25">IMC_BLOCK_SIZE</name></expr>;</return>

</block_content>}</block></function>
</unit>
