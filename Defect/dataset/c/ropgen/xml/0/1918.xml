<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1918.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">vnc_client_read</name><parameter_list pos:start="1:21" pos:end="1:34">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:27"><name pos:start="1:22" pos:end="1:25">void</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:33">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:5">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">VncState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">vs</name> <init pos:start="5:18" pos:end="5:25">= <expr pos:start="5:20" pos:end="5:25"><name pos:start="5:20" pos:end="5:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">long</name></type> <name pos:start="7:10" pos:end="7:12">ret</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="11:1" pos:end="11:22">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:22">CONFIG_VNC_SASL</name></cpp:ifdef>

    <if_stmt pos:start="13:5" pos:end="49:9"><if pos:start="13:5" pos:end="15:39">if <condition pos:start="13:8" pos:end="13:41">(<expr pos:start="13:9" pos:end="13:40"><name pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:10">vs</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:16">sasl</name><operator pos:start="13:17" pos:end="13:17">.</operator><name pos:start="13:18" pos:end="13:21">conn</name></name> <operator pos:start="13:23" pos:end="13:24">&amp;&amp;</operator> <name pos:start="13:26" pos:end="13:40"><name pos:start="13:26" pos:end="13:27">vs</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:33">sasl</name><operator pos:start="13:34" pos:end="13:34">.</operator><name pos:start="13:35" pos:end="13:40">runSSF</name></name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:39"><block_content pos:start="15:9" pos:end="15:39">

        <expr_stmt pos:start="15:9" pos:end="15:39"><expr pos:start="15:9" pos:end="15:38"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <call pos:start="15:15" pos:end="15:38"><name pos:start="15:15" pos:end="15:34">vnc_client_read_sasl</name><argument_list pos:start="15:35" pos:end="15:38">(<argument pos:start="15:36" pos:end="15:37"><expr pos:start="15:36" pos:end="15:37"><name pos:start="15:36" pos:end="15:37">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="17:5" pos:end="41:9">else

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="19:8" pos:end="19:28">/* CONFIG_VNC_SASL */</comment>

<cpp:ifdef pos:start="21:1" pos:end="21:20">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:20">CONFIG_VNC_WS</name></cpp:ifdef>

        if <condition pos:start="23:12" pos:end="23:26">(<expr pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:25"><name pos:start="23:13" pos:end="23:14">vs</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:25">encode_ws</name></name></expr>)</condition> <block pos:start="23:28" pos:end="41:9">{<block_content pos:start="25:13" pos:end="39:13">

            <expr_stmt pos:start="25:13" pos:end="25:41"><expr pos:start="25:13" pos:end="25:40"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:40"><name pos:start="25:19" pos:end="25:36">vnc_client_read_ws</name><argument_list pos:start="25:37" pos:end="25:40">(<argument pos:start="25:38" pos:end="25:39"><expr pos:start="25:38" pos:end="25:39"><name pos:start="25:38" pos:end="25:39">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="27:13" pos:end="39:13"><if pos:start="27:13" pos:end="33:13">if <condition pos:start="27:16" pos:end="27:26">(<expr pos:start="27:17" pos:end="27:25"><name pos:start="27:17" pos:end="27:19">ret</name> <operator pos:start="27:21" pos:end="27:22">==</operator> <operator pos:start="27:24" pos:end="27:24">-</operator><literal type="number" pos:start="27:25" pos:end="27:25">1</literal></expr>)</condition> <block pos:start="27:28" pos:end="33:13">{<block_content pos:start="29:17" pos:end="31:23">

                <expr_stmt pos:start="29:17" pos:end="29:41"><expr pos:start="29:17" pos:end="29:40"><call pos:start="29:17" pos:end="29:40"><name pos:start="29:17" pos:end="29:36">vnc_disconnect_start</name><argument_list pos:start="29:37" pos:end="29:40">(<argument pos:start="29:38" pos:end="29:39"><expr pos:start="29:38" pos:end="29:39"><name pos:start="29:38" pos:end="29:39">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="31:17" pos:end="31:23">return;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="33:15" pos:end="39:13">else if <condition pos:start="33:23" pos:end="33:33">(<expr pos:start="33:24" pos:end="33:32"><name pos:start="33:24" pos:end="33:26">ret</name> <operator pos:start="33:28" pos:end="33:29">==</operator> <operator pos:start="33:31" pos:end="33:31">-</operator><literal type="number" pos:start="33:32" pos:end="33:32">2</literal></expr>)</condition> <block pos:start="33:35" pos:end="39:13">{<block_content pos:start="35:17" pos:end="37:23">

                <expr_stmt pos:start="35:17" pos:end="35:37"><expr pos:start="35:17" pos:end="35:36"><call pos:start="35:17" pos:end="35:36"><name pos:start="35:17" pos:end="35:32">vnc_client_error</name><argument_list pos:start="35:33" pos:end="35:36">(<argument pos:start="35:34" pos:end="35:35"><expr pos:start="35:34" pos:end="35:35"><name pos:start="35:34" pos:end="35:35">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="37:17" pos:end="37:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="41:11" pos:end="49:9">else

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="43:8" pos:end="43:26">/* CONFIG_VNC_WS */</comment>

        <block pos:start="45:9" pos:end="49:9">{<block_content pos:start="47:9" pos:end="47:40">

        <expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:39"><name pos:start="47:15" pos:end="47:35">vnc_client_read_plain</name><argument_list pos:start="47:36" pos:end="47:39">(<argument pos:start="47:37" pos:end="47:38"><expr pos:start="47:37" pos:end="47:38"><name pos:start="47:37" pos:end="47:38">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:13">(<expr pos:start="51:9" pos:end="51:12"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:12">ret</name></expr>)</condition> <block pos:start="51:15" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:15">

        <if_stmt pos:start="53:9" pos:end="55:38"><if pos:start="53:9" pos:end="55:38">if <condition pos:start="53:12" pos:end="53:28">(<expr pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:14">vs</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:21">csock</name></name> <operator pos:start="53:23" pos:end="53:24">==</operator> <operator pos:start="53:26" pos:end="53:26">-</operator><literal type="number" pos:start="53:27" pos:end="53:27">1</literal></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:38"><block_content pos:start="55:13" pos:end="55:38">

            <expr_stmt pos:start="55:13" pos:end="55:38"><expr pos:start="55:13" pos:end="55:37"><call pos:start="55:13" pos:end="55:37"><name pos:start="55:13" pos:end="55:33">vnc_disconnect_finish</name><argument_list pos:start="55:34" pos:end="55:37">(<argument pos:start="55:35" pos:end="55:36"><expr pos:start="55:35" pos:end="55:36"><name pos:start="55:35" pos:end="55:36">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="63:5" pos:end="93:5">while <condition pos:start="63:11" pos:end="63:75">(<expr pos:start="63:12" pos:end="63:74"><name pos:start="63:12" pos:end="63:27"><name pos:start="63:12" pos:end="63:13">vs</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:27">read_handler</name></name> <operator pos:start="63:29" pos:end="63:30">&amp;&amp;</operator> <name pos:start="63:32" pos:end="63:47"><name pos:start="63:32" pos:end="63:33">vs</name><operator pos:start="63:34" pos:end="63:35">-&gt;</operator><name pos:start="63:36" pos:end="63:40">input</name><operator pos:start="63:41" pos:end="63:41">.</operator><name pos:start="63:42" pos:end="63:47">offset</name></name> <operator pos:start="63:49" pos:end="63:50">&gt;=</operator> <name pos:start="63:52" pos:end="63:74"><name pos:start="63:52" pos:end="63:53">vs</name><operator pos:start="63:54" pos:end="63:55">-&gt;</operator><name pos:start="63:56" pos:end="63:74">read_handler_expect</name></name></expr>)</condition> <block pos:start="63:77" pos:end="93:5">{<block_content pos:start="65:9" pos:end="91:9">

        <decl_stmt pos:start="65:9" pos:end="65:45"><decl pos:start="65:9" pos:end="65:44"><type pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:14">size_t</name></type> <name pos:start="65:16" pos:end="65:18">len</name> <init pos:start="65:20" pos:end="65:44">= <expr pos:start="65:22" pos:end="65:44"><name pos:start="65:22" pos:end="65:44"><name pos:start="65:22" pos:end="65:23">vs</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:44">read_handler_expect</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="67:9" pos:end="67:16"><decl pos:start="67:9" pos:end="67:15"><type pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:11">int</name></type> <name pos:start="67:13" pos:end="67:15">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:58"><expr pos:start="71:9" pos:end="71:57"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:57"><name pos:start="71:15" pos:end="71:30"><name pos:start="71:15" pos:end="71:16">vs</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:30">read_handler</name></name><argument_list pos:start="71:31" pos:end="71:57">(<argument pos:start="71:32" pos:end="71:33"><expr pos:start="71:32" pos:end="71:33"><name pos:start="71:32" pos:end="71:33">vs</name></expr></argument>, <argument pos:start="71:36" pos:end="71:51"><expr pos:start="71:36" pos:end="71:51"><name pos:start="71:36" pos:end="71:51"><name pos:start="71:36" pos:end="71:37">vs</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:44">input</name><operator pos:start="71:45" pos:end="71:45">.</operator><name pos:start="71:46" pos:end="71:51">buffer</name></name></expr></argument>, <argument pos:start="71:54" pos:end="71:56"><expr pos:start="71:54" pos:end="71:56"><name pos:start="71:54" pos:end="71:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:28">(<expr pos:start="73:13" pos:end="73:27"><name pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:14">vs</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:21">csock</name></name> <operator pos:start="73:23" pos:end="73:24">==</operator> <operator pos:start="73:26" pos:end="73:26">-</operator><literal type="number" pos:start="73:27" pos:end="73:27">1</literal></expr>)</condition> <block pos:start="73:30" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:19">

            <expr_stmt pos:start="75:13" pos:end="75:38"><expr pos:start="75:13" pos:end="75:37"><call pos:start="75:13" pos:end="75:37"><name pos:start="75:13" pos:end="75:33">vnc_disconnect_finish</name><argument_list pos:start="75:34" pos:end="75:37">(<argument pos:start="75:35" pos:end="75:36"><expr pos:start="75:35" pos:end="75:36"><name pos:start="75:35" pos:end="75:36">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="83:9" pos:end="91:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:17">(<expr pos:start="83:13" pos:end="83:16"><operator pos:start="83:13" pos:end="83:13">!</operator><name pos:start="83:14" pos:end="83:16">ret</name></expr>)</condition> <block pos:start="83:19" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:44">

            <expr_stmt pos:start="85:13" pos:end="85:44"><expr pos:start="85:13" pos:end="85:43"><call pos:start="85:13" pos:end="85:43"><name pos:start="85:13" pos:end="85:26">buffer_advance</name><argument_list pos:start="85:27" pos:end="85:43">(<argument pos:start="85:28" pos:end="85:37"><expr pos:start="85:28" pos:end="85:37"><operator pos:start="85:28" pos:end="85:28">&amp;</operator><name pos:start="85:29" pos:end="85:37"><name pos:start="85:29" pos:end="85:30">vs</name><operator pos:start="85:31" pos:end="85:32">-&gt;</operator><name pos:start="85:33" pos:end="85:37">input</name></name></expr></argument>, <argument pos:start="85:40" pos:end="85:42"><expr pos:start="85:40" pos:end="85:42"><name pos:start="85:40" pos:end="85:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="91:9">else <block pos:start="87:16" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:42">

            <expr_stmt pos:start="89:13" pos:end="89:42"><expr pos:start="89:13" pos:end="89:41"><name pos:start="89:13" pos:end="89:35"><name pos:start="89:13" pos:end="89:14">vs</name><operator pos:start="89:15" pos:end="89:16">-&gt;</operator><name pos:start="89:17" pos:end="89:35">read_handler_expect</name></name> <operator pos:start="89:37" pos:end="89:37">=</operator> <name pos:start="89:39" pos:end="89:41">ret</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
