<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26150.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:17">cas2l</name>)<parameter_list pos:start="1:19" pos:end="1:78">(<parameter pos:start="1:20" pos:end="1:36"><decl pos:start="1:20" pos:end="1:36"><type pos:start="1:20" pos:end="1:36"><name pos:start="1:20" pos:end="1:31">CPUM68KState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:46">uint32_t</name></type> <name pos:start="1:48" pos:end="1:51">regs</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:64"><decl pos:start="1:54" pos:end="1:64"><type pos:start="1:54" pos:end="1:64"><name pos:start="1:54" pos:end="1:61">uint32_t</name></type> <name pos:start="1:63" pos:end="1:64">a1</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:77"><decl pos:start="1:67" pos:end="1:77"><type pos:start="1:67" pos:end="1:77"><name pos:start="1:67" pos:end="1:74">uint32_t</name></type> <name pos:start="1:76" pos:end="1:77">a2</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="139:1">{<block_content pos:start="5:5" pos:end="137:25">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">Dc1</name> <init pos:start="5:18" pos:end="5:40">= <expr pos:start="5:20" pos:end="5:40"><call pos:start="5:20" pos:end="5:40"><name pos:start="5:20" pos:end="5:28">extract32</name><argument_list pos:start="5:29" pos:end="5:40">(<argument pos:start="5:30" pos:end="5:33"><expr pos:start="5:30" pos:end="5:33"><name pos:start="5:30" pos:end="5:33">regs</name></expr></argument>, <argument pos:start="5:36" pos:end="5:36"><expr pos:start="5:36" pos:end="5:36"><literal type="number" pos:start="5:36" pos:end="5:36">9</literal></expr></argument>, <argument pos:start="5:39" pos:end="5:39"><expr pos:start="5:39" pos:end="5:39"><literal type="number" pos:start="5:39" pos:end="5:39">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">Dc2</name> <init pos:start="7:18" pos:end="7:40">= <expr pos:start="7:20" pos:end="7:40"><call pos:start="7:20" pos:end="7:40"><name pos:start="7:20" pos:end="7:28">extract32</name><argument_list pos:start="7:29" pos:end="7:40">(<argument pos:start="7:30" pos:end="7:33"><expr pos:start="7:30" pos:end="7:33"><name pos:start="7:30" pos:end="7:33">regs</name></expr></argument>, <argument pos:start="7:36" pos:end="7:36"><expr pos:start="7:36" pos:end="7:36"><literal type="number" pos:start="7:36" pos:end="7:36">6</literal></expr></argument>, <argument pos:start="7:39" pos:end="7:39"><expr pos:start="7:39" pos:end="7:39"><literal type="number" pos:start="7:39" pos:end="7:39">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">Du1</name> <init pos:start="9:18" pos:end="9:40">= <expr pos:start="9:20" pos:end="9:40"><call pos:start="9:20" pos:end="9:40"><name pos:start="9:20" pos:end="9:28">extract32</name><argument_list pos:start="9:29" pos:end="9:40">(<argument pos:start="9:30" pos:end="9:33"><expr pos:start="9:30" pos:end="9:33"><name pos:start="9:30" pos:end="9:33">regs</name></expr></argument>, <argument pos:start="9:36" pos:end="9:36"><expr pos:start="9:36" pos:end="9:36"><literal type="number" pos:start="9:36" pos:end="9:36">3</literal></expr></argument>, <argument pos:start="9:39" pos:end="9:39"><expr pos:start="9:39" pos:end="9:39"><literal type="number" pos:start="9:39" pos:end="9:39">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">Du2</name> <init pos:start="11:18" pos:end="11:40">= <expr pos:start="11:20" pos:end="11:40"><call pos:start="11:20" pos:end="11:40"><name pos:start="11:20" pos:end="11:28">extract32</name><argument_list pos:start="11:29" pos:end="11:40">(<argument pos:start="11:30" pos:end="11:33"><expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">regs</name></expr></argument>, <argument pos:start="11:36" pos:end="11:36"><expr pos:start="11:36" pos:end="11:36"><literal type="number" pos:start="11:36" pos:end="11:36">0</literal></expr></argument>, <argument pos:start="11:39" pos:end="11:39"><expr pos:start="11:39" pos:end="11:39"><literal type="number" pos:start="11:39" pos:end="11:39">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:15">c1</name> <init pos:start="13:17" pos:end="13:33">= <expr pos:start="13:19" pos:end="13:33"><name pos:start="13:19" pos:end="13:33"><name pos:start="13:19" pos:end="13:21">env</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:28">dregs</name><index pos:start="13:29" pos:end="13:33">[<expr pos:start="13:30" pos:end="13:32"><name pos:start="13:30" pos:end="13:32">Dc1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:15">c2</name> <init pos:start="15:17" pos:end="15:33">= <expr pos:start="15:19" pos:end="15:33"><name pos:start="15:19" pos:end="15:33"><name pos:start="15:19" pos:end="15:21">env</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:28">dregs</name><index pos:start="15:29" pos:end="15:33">[<expr pos:start="15:30" pos:end="15:32"><name pos:start="15:30" pos:end="15:32">Dc2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:33"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:15">u1</name> <init pos:start="17:17" pos:end="17:33">= <expr pos:start="17:19" pos:end="17:33"><name pos:start="17:19" pos:end="17:33"><name pos:start="17:19" pos:end="17:21">env</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:28">dregs</name><index pos:start="17:29" pos:end="17:33">[<expr pos:start="17:30" pos:end="17:32"><name pos:start="17:30" pos:end="17:32">Du1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:33"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:15">u2</name> <init pos:start="19:17" pos:end="19:33">= <expr pos:start="19:19" pos:end="19:33"><name pos:start="19:19" pos:end="19:33"><name pos:start="19:19" pos:end="19:21">env</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:28">dregs</name><index pos:start="19:29" pos:end="19:33">[<expr pos:start="19:30" pos:end="19:32"><name pos:start="19:30" pos:end="19:32">Du2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:15">l1</name></decl>, <decl pos:start="21:18" pos:end="21:19"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:18" pos:end="21:19">l2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="26:0"><decl pos:start="23:5" pos:end="23:26"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:13">uintptr_t</name></type> <name pos:start="23:15" pos:end="23:16">ra</name> <init pos:start="23:18" pos:end="23:26">= <expr pos:start="23:20" pos:end="23:26"><call pos:start="23:20" pos:end="23:26"><name pos:start="23:20" pos:end="23:24">GETPC</name><argument_list pos:start="23:25" pos:end="23:26">()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="25:1" pos:end="25:58">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="25:58"><call pos:start="25:5" pos:end="25:28"><name pos:start="25:5" pos:end="25:11">defined</name><argument_list pos:start="25:12" pos:end="25:28">(<argument pos:start="25:13" pos:end="25:27"><expr pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:27">CONFIG_ATOMIC64</name></expr></argument>)</argument_list></call> <operator pos:start="25:30" pos:end="25:31">&amp;&amp;</operator> <operator pos:start="25:33" pos:end="25:33">!</operator><call pos:start="25:34" pos:end="25:58"><name pos:start="25:34" pos:end="25:40">defined</name><argument_list pos:start="25:41" pos:end="25:58">(<argument pos:start="25:42" pos:end="25:57"><expr pos:start="25:42" pos:end="25:57"><name pos:start="25:42" pos:end="25:57">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="27:5" pos:end="27:40"><decl pos:start="27:5" pos:end="27:39"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:15">mmu_idx</name> <init pos:start="27:17" pos:end="27:39">= <expr pos:start="27:19" pos:end="27:39"><call pos:start="27:19" pos:end="27:39"><name pos:start="27:19" pos:end="27:31">cpu_mmu_index</name><argument_list pos:start="27:32" pos:end="27:39">(<argument pos:start="27:33" pos:end="27:35"><expr pos:start="27:33" pos:end="27:35"><name pos:start="27:33" pos:end="27:35">env</name></expr></argument>, <argument pos:start="27:38" pos:end="27:38"><expr pos:start="27:38" pos:end="27:38"><literal type="number" pos:start="27:38" pos:end="27:38">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="32:0"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:15">TCGMemOpIdx</name></type> <name pos:start="29:17" pos:end="29:18">oi</name></decl>;</decl_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="35:5" pos:end="115:5"><if pos:start="35:5" pos:end="99:5">if <condition pos:start="35:8" pos:end="35:22">(<expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:21">parallel_cpus</name></expr>)</condition> <block pos:start="35:24" pos:end="99:5">{<block_content pos:start="41:9" pos:end="97:9">

        <comment type="block" pos:start="37:9" pos:end="37:71">/* We're executing in a parallel context -- must be atomic.  */</comment>

<cpp:ifdef pos:start="39:1" pos:end="39:22">#<cpp:directive pos:start="39:2" pos:end="39:6">ifdef</cpp:directive> <name pos:start="39:8" pos:end="39:22">CONFIG_ATOMIC64</name></cpp:ifdef>

        <decl_stmt pos:start="41:9" pos:end="41:25"><decl pos:start="41:9" pos:end="41:18"><type pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:16">uint64_t</name></type> <name pos:start="41:18" pos:end="41:18">c</name></decl>, <decl pos:start="41:21" pos:end="41:21"><type ref="prev" pos:start="41:9" pos:end="41:16"/><name pos:start="41:21" pos:end="41:21">u</name></decl>, <decl pos:start="41:24" pos:end="41:24"><type ref="prev" pos:start="41:9" pos:end="41:16"/><name pos:start="41:24" pos:end="41:24">l</name></decl>;</decl_stmt>

        <if_stmt pos:start="43:9" pos:end="97:9"><if pos:start="43:9" pos:end="65:9">if <condition pos:start="43:12" pos:end="43:42">(<expr pos:start="43:13" pos:end="43:41"><operator pos:start="43:13" pos:end="43:13">(</operator><name pos:start="43:14" pos:end="43:15">a1</name> <operator pos:start="43:17" pos:end="43:17">&amp;</operator> <literal type="number" pos:start="43:19" pos:end="43:19">7</literal><operator pos:start="43:20" pos:end="43:20">)</operator> <operator pos:start="43:22" pos:end="43:23">==</operator> <literal type="number" pos:start="43:25" pos:end="43:25">0</literal> <operator pos:start="43:27" pos:end="43:28">&amp;&amp;</operator> <name pos:start="43:30" pos:end="43:31">a2</name> <operator pos:start="43:33" pos:end="43:34">==</operator> <name pos:start="43:36" pos:end="43:37">a1</name> <operator pos:start="43:39" pos:end="43:39">+</operator> <literal type="number" pos:start="43:41" pos:end="43:41">4</literal></expr>)</condition> <block pos:start="43:44" pos:end="65:9">{<block_content pos:start="45:13" pos:end="63:19">

            <expr_stmt pos:start="45:13" pos:end="45:42"><expr pos:start="45:13" pos:end="45:41"><name pos:start="45:13" pos:end="45:13">c</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <call pos:start="45:17" pos:end="45:41"><name pos:start="45:17" pos:end="45:25">deposit64</name><argument_list pos:start="45:26" pos:end="45:41">(<argument pos:start="45:27" pos:end="45:28"><expr pos:start="45:27" pos:end="45:28"><name pos:start="45:27" pos:end="45:28">c2</name></expr></argument>, <argument pos:start="45:31" pos:end="45:32"><expr pos:start="45:31" pos:end="45:32"><literal type="number" pos:start="45:31" pos:end="45:32">32</literal></expr></argument>, <argument pos:start="45:35" pos:end="45:36"><expr pos:start="45:35" pos:end="45:36"><literal type="number" pos:start="45:35" pos:end="45:36">32</literal></expr></argument>, <argument pos:start="45:39" pos:end="45:40"><expr pos:start="45:39" pos:end="45:40"><name pos:start="45:39" pos:end="45:40">c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="50:0"><expr pos:start="47:13" pos:end="47:41"><name pos:start="47:13" pos:end="47:13">u</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:41"><name pos:start="47:17" pos:end="47:25">deposit64</name><argument_list pos:start="47:26" pos:end="47:41">(<argument pos:start="47:27" pos:end="47:28"><expr pos:start="47:27" pos:end="47:28"><name pos:start="47:27" pos:end="47:28">u2</name></expr></argument>, <argument pos:start="47:31" pos:end="47:32"><expr pos:start="47:31" pos:end="47:32"><literal type="number" pos:start="47:31" pos:end="47:32">32</literal></expr></argument>, <argument pos:start="47:35" pos:end="47:36"><expr pos:start="47:35" pos:end="47:36"><literal type="number" pos:start="47:35" pos:end="47:36">32</literal></expr></argument>, <argument pos:start="47:39" pos:end="47:40"><expr pos:start="47:39" pos:end="47:40"><name pos:start="47:39" pos:end="47:40">u1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="49:1" pos:end="49:23">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:23">CONFIG_USER_ONLY</name></cpp:ifdef>

            <expr_stmt pos:start="51:13" pos:end="54:0"><expr pos:start="51:13" pos:end="51:56"><name pos:start="51:13" pos:end="51:13">l</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:56"><name pos:start="51:17" pos:end="51:41">helper_atomic_cmpxchgq_be</name><argument_list pos:start="51:42" pos:end="51:56">(<argument pos:start="51:43" pos:end="51:45"><expr pos:start="51:43" pos:end="51:45"><name pos:start="51:43" pos:end="51:45">env</name></expr></argument>, <argument pos:start="51:48" pos:end="51:49"><expr pos:start="51:48" pos:end="51:49"><name pos:start="51:48" pos:end="51:49">a1</name></expr></argument>, <argument pos:start="51:52" pos:end="51:52"><expr pos:start="51:52" pos:end="51:52"><name pos:start="51:52" pos:end="51:52">c</name></expr></argument>, <argument pos:start="51:55" pos:end="51:55"><expr pos:start="51:55" pos:end="51:55"><name pos:start="51:55" pos:end="51:55">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="53:1" pos:end="53:5">#<cpp:directive pos:start="53:2" pos:end="53:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="55:13" pos:end="55:49"><expr pos:start="55:13" pos:end="55:48"><name pos:start="55:13" pos:end="55:14">oi</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <call pos:start="55:18" pos:end="55:48"><name pos:start="55:18" pos:end="55:31">make_memop_idx</name><argument_list pos:start="55:32" pos:end="55:48">(<argument pos:start="55:33" pos:end="55:38"><expr pos:start="55:33" pos:end="55:38"><name pos:start="55:33" pos:end="55:38">MO_BEQ</name></expr></argument>, <argument pos:start="55:41" pos:end="55:47"><expr pos:start="55:41" pos:end="55:47"><name pos:start="55:41" pos:end="55:47">mmu_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="60:0"><expr pos:start="57:13" pos:end="57:68"><name pos:start="57:13" pos:end="57:13">l</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:68"><name pos:start="57:17" pos:end="57:45">helper_atomic_cmpxchgq_be_mmu</name><argument_list pos:start="57:46" pos:end="57:68">(<argument pos:start="57:47" pos:end="57:49"><expr pos:start="57:47" pos:end="57:49"><name pos:start="57:47" pos:end="57:49">env</name></expr></argument>, <argument pos:start="57:52" pos:end="57:53"><expr pos:start="57:52" pos:end="57:53"><name pos:start="57:52" pos:end="57:53">a1</name></expr></argument>, <argument pos:start="57:56" pos:end="57:56"><expr pos:start="57:56" pos:end="57:56"><name pos:start="57:56" pos:end="57:56">c</name></expr></argument>, <argument pos:start="57:59" pos:end="57:59"><expr pos:start="57:59" pos:end="57:59"><name pos:start="57:59" pos:end="57:59">u</name></expr></argument>, <argument pos:start="57:62" pos:end="57:63"><expr pos:start="57:62" pos:end="57:63"><name pos:start="57:62" pos:end="57:63">oi</name></expr></argument>, <argument pos:start="57:66" pos:end="57:67"><expr pos:start="57:66" pos:end="57:67"><name pos:start="57:66" pos:end="57:67">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="61:13" pos:end="61:25"><expr pos:start="61:13" pos:end="61:24"><name pos:start="61:13" pos:end="61:14">l1</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:18">l</name> <operator pos:start="61:20" pos:end="61:21">&gt;&gt;</operator> <literal type="number" pos:start="61:23" pos:end="61:24">32</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:19"><expr pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:14">l2</name> <operator pos:start="63:16" pos:end="63:16">=</operator> <name pos:start="63:18" pos:end="63:18">l</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="65:11" pos:end="87:9">else if <condition pos:start="65:19" pos:end="65:49">(<expr pos:start="65:20" pos:end="65:48"><operator pos:start="65:20" pos:end="65:20">(</operator><name pos:start="65:21" pos:end="65:22">a2</name> <operator pos:start="65:24" pos:end="65:24">&amp;</operator> <literal type="number" pos:start="65:26" pos:end="65:26">7</literal><operator pos:start="65:27" pos:end="65:27">)</operator> <operator pos:start="65:29" pos:end="65:30">==</operator> <literal type="number" pos:start="65:32" pos:end="65:32">0</literal> <operator pos:start="65:34" pos:end="65:35">&amp;&amp;</operator> <name pos:start="65:37" pos:end="65:38">a1</name> <operator pos:start="65:40" pos:end="65:41">==</operator> <name pos:start="65:43" pos:end="65:44">a2</name> <operator pos:start="65:46" pos:end="65:46">+</operator> <literal type="number" pos:start="65:48" pos:end="65:48">4</literal></expr>)</condition> <block pos:start="65:51" pos:end="87:9">{<block_content pos:start="67:13" pos:end="85:19">

            <expr_stmt pos:start="67:13" pos:end="67:42"><expr pos:start="67:13" pos:end="67:41"><name pos:start="67:13" pos:end="67:13">c</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <call pos:start="67:17" pos:end="67:41"><name pos:start="67:17" pos:end="67:25">deposit64</name><argument_list pos:start="67:26" pos:end="67:41">(<argument pos:start="67:27" pos:end="67:28"><expr pos:start="67:27" pos:end="67:28"><name pos:start="67:27" pos:end="67:28">c1</name></expr></argument>, <argument pos:start="67:31" pos:end="67:32"><expr pos:start="67:31" pos:end="67:32"><literal type="number" pos:start="67:31" pos:end="67:32">32</literal></expr></argument>, <argument pos:start="67:35" pos:end="67:36"><expr pos:start="67:35" pos:end="67:36"><literal type="number" pos:start="67:35" pos:end="67:36">32</literal></expr></argument>, <argument pos:start="67:39" pos:end="67:40"><expr pos:start="67:39" pos:end="67:40"><name pos:start="67:39" pos:end="67:40">c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="72:0"><expr pos:start="69:13" pos:end="69:41"><name pos:start="69:13" pos:end="69:13">u</name> <operator pos:start="69:15" pos:end="69:15">=</operator> <call pos:start="69:17" pos:end="69:41"><name pos:start="69:17" pos:end="69:25">deposit64</name><argument_list pos:start="69:26" pos:end="69:41">(<argument pos:start="69:27" pos:end="69:28"><expr pos:start="69:27" pos:end="69:28"><name pos:start="69:27" pos:end="69:28">u1</name></expr></argument>, <argument pos:start="69:31" pos:end="69:32"><expr pos:start="69:31" pos:end="69:32"><literal type="number" pos:start="69:31" pos:end="69:32">32</literal></expr></argument>, <argument pos:start="69:35" pos:end="69:36"><expr pos:start="69:35" pos:end="69:36"><literal type="number" pos:start="69:35" pos:end="69:36">32</literal></expr></argument>, <argument pos:start="69:39" pos:end="69:40"><expr pos:start="69:39" pos:end="69:40"><name pos:start="69:39" pos:end="69:40">u2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="71:1" pos:end="71:23">#<cpp:directive pos:start="71:2" pos:end="71:6">ifdef</cpp:directive> <name pos:start="71:8" pos:end="71:23">CONFIG_USER_ONLY</name></cpp:ifdef>

            <expr_stmt pos:start="73:13" pos:end="76:0"><expr pos:start="73:13" pos:end="73:56"><name pos:start="73:13" pos:end="73:13">l</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <call pos:start="73:17" pos:end="73:56"><name pos:start="73:17" pos:end="73:41">helper_atomic_cmpxchgq_be</name><argument_list pos:start="73:42" pos:end="73:56">(<argument pos:start="73:43" pos:end="73:45"><expr pos:start="73:43" pos:end="73:45"><name pos:start="73:43" pos:end="73:45">env</name></expr></argument>, <argument pos:start="73:48" pos:end="73:49"><expr pos:start="73:48" pos:end="73:49"><name pos:start="73:48" pos:end="73:49">a2</name></expr></argument>, <argument pos:start="73:52" pos:end="73:52"><expr pos:start="73:52" pos:end="73:52"><name pos:start="73:52" pos:end="73:52">c</name></expr></argument>, <argument pos:start="73:55" pos:end="73:55"><expr pos:start="73:55" pos:end="73:55"><name pos:start="73:55" pos:end="73:55">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="75:1" pos:end="75:5">#<cpp:directive pos:start="75:2" pos:end="75:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="77:13" pos:end="77:49"><expr pos:start="77:13" pos:end="77:48"><name pos:start="77:13" pos:end="77:14">oi</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <call pos:start="77:18" pos:end="77:48"><name pos:start="77:18" pos:end="77:31">make_memop_idx</name><argument_list pos:start="77:32" pos:end="77:48">(<argument pos:start="77:33" pos:end="77:38"><expr pos:start="77:33" pos:end="77:38"><name pos:start="77:33" pos:end="77:38">MO_BEQ</name></expr></argument>, <argument pos:start="77:41" pos:end="77:47"><expr pos:start="77:41" pos:end="77:47"><name pos:start="77:41" pos:end="77:47">mmu_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="82:0"><expr pos:start="79:13" pos:end="79:68"><name pos:start="79:13" pos:end="79:13">l</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <call pos:start="79:17" pos:end="79:68"><name pos:start="79:17" pos:end="79:45">helper_atomic_cmpxchgq_be_mmu</name><argument_list pos:start="79:46" pos:end="79:68">(<argument pos:start="79:47" pos:end="79:49"><expr pos:start="79:47" pos:end="79:49"><name pos:start="79:47" pos:end="79:49">env</name></expr></argument>, <argument pos:start="79:52" pos:end="79:53"><expr pos:start="79:52" pos:end="79:53"><name pos:start="79:52" pos:end="79:53">a2</name></expr></argument>, <argument pos:start="79:56" pos:end="79:56"><expr pos:start="79:56" pos:end="79:56"><name pos:start="79:56" pos:end="79:56">c</name></expr></argument>, <argument pos:start="79:59" pos:end="79:59"><expr pos:start="79:59" pos:end="79:59"><name pos:start="79:59" pos:end="79:59">u</name></expr></argument>, <argument pos:start="79:62" pos:end="79:63"><expr pos:start="79:62" pos:end="79:63"><name pos:start="79:62" pos:end="79:63">oi</name></expr></argument>, <argument pos:start="79:66" pos:end="79:67"><expr pos:start="79:66" pos:end="79:67"><name pos:start="79:66" pos:end="79:67">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="83:13" pos:end="83:25"><expr pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:14">l2</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <name pos:start="83:18" pos:end="83:18">l</name> <operator pos:start="83:20" pos:end="83:21">&gt;&gt;</operator> <literal type="number" pos:start="83:23" pos:end="83:24">32</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:19"><expr pos:start="85:13" pos:end="85:18"><name pos:start="85:13" pos:end="85:14">l1</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <name pos:start="85:18" pos:end="85:18">l</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="97:9">else

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>

        <block pos:start="91:9" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:55">

            <comment type="block" pos:start="93:13" pos:end="93:69">/* Tell the main loop we need to serialize this insn.  */</comment>

            <expr_stmt pos:start="95:13" pos:end="95:55"><expr pos:start="95:13" pos:end="95:54"><call pos:start="95:13" pos:end="95:54"><name pos:start="95:13" pos:end="95:32">cpu_loop_exit_atomic</name><argument_list pos:start="95:33" pos:end="95:54">(<argument pos:start="95:34" pos:end="95:49"><expr pos:start="95:34" pos:end="95:49"><call pos:start="95:34" pos:end="95:49"><name pos:start="95:34" pos:end="95:44">ENV_GET_CPU</name><argument_list pos:start="95:45" pos:end="95:49">(<argument pos:start="95:46" pos:end="95:48"><expr pos:start="95:46" pos:end="95:48"><name pos:start="95:46" pos:end="95:48">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:52" pos:end="95:53"><expr pos:start="95:52" pos:end="95:53"><name pos:start="95:52" pos:end="95:53">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="115:5">else <block pos:start="99:12" pos:end="115:5">{<block_content pos:start="103:9" pos:end="113:9">

        <comment type="block" pos:start="101:9" pos:end="101:75">/* We're executing in a serial context -- no need to be atomic.  */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:42"><expr pos:start="103:9" pos:end="103:41"><name pos:start="103:9" pos:end="103:10">l1</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <call pos:start="103:14" pos:end="103:41"><name pos:start="103:14" pos:end="103:28">cpu_ldl_data_ra</name><argument_list pos:start="103:29" pos:end="103:41">(<argument pos:start="103:30" pos:end="103:32"><expr pos:start="103:30" pos:end="103:32"><name pos:start="103:30" pos:end="103:32">env</name></expr></argument>, <argument pos:start="103:35" pos:end="103:36"><expr pos:start="103:35" pos:end="103:36"><name pos:start="103:35" pos:end="103:36">a1</name></expr></argument>, <argument pos:start="103:39" pos:end="103:40"><expr pos:start="103:39" pos:end="103:40"><name pos:start="103:39" pos:end="103:40">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:42"><expr pos:start="105:9" pos:end="105:41"><name pos:start="105:9" pos:end="105:10">l2</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <call pos:start="105:14" pos:end="105:41"><name pos:start="105:14" pos:end="105:28">cpu_ldl_data_ra</name><argument_list pos:start="105:29" pos:end="105:41">(<argument pos:start="105:30" pos:end="105:32"><expr pos:start="105:30" pos:end="105:32"><name pos:start="105:30" pos:end="105:32">env</name></expr></argument>, <argument pos:start="105:35" pos:end="105:36"><expr pos:start="105:35" pos:end="105:36"><name pos:start="105:35" pos:end="105:36">a2</name></expr></argument>, <argument pos:start="105:39" pos:end="105:40"><expr pos:start="105:39" pos:end="105:40"><name pos:start="105:39" pos:end="105:40">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:33">(<expr pos:start="107:13" pos:end="107:32"><name pos:start="107:13" pos:end="107:14">l1</name> <operator pos:start="107:16" pos:end="107:17">==</operator> <name pos:start="107:19" pos:end="107:20">c1</name> <operator pos:start="107:22" pos:end="107:23">&amp;&amp;</operator> <name pos:start="107:25" pos:end="107:26">l2</name> <operator pos:start="107:28" pos:end="107:29">==</operator> <name pos:start="107:31" pos:end="107:32">c2</name></expr>)</condition> <block pos:start="107:35" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:45">

            <expr_stmt pos:start="109:13" pos:end="109:45"><expr pos:start="109:13" pos:end="109:44"><call pos:start="109:13" pos:end="109:44"><name pos:start="109:13" pos:end="109:27">cpu_stl_data_ra</name><argument_list pos:start="109:28" pos:end="109:44">(<argument pos:start="109:29" pos:end="109:31"><expr pos:start="109:29" pos:end="109:31"><name pos:start="109:29" pos:end="109:31">env</name></expr></argument>, <argument pos:start="109:34" pos:end="109:35"><expr pos:start="109:34" pos:end="109:35"><name pos:start="109:34" pos:end="109:35">a1</name></expr></argument>, <argument pos:start="109:38" pos:end="109:39"><expr pos:start="109:38" pos:end="109:39"><name pos:start="109:38" pos:end="109:39">u1</name></expr></argument>, <argument pos:start="109:42" pos:end="109:43"><expr pos:start="109:42" pos:end="109:43"><name pos:start="109:42" pos:end="109:43">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:45"><expr pos:start="111:13" pos:end="111:44"><call pos:start="111:13" pos:end="111:44"><name pos:start="111:13" pos:end="111:27">cpu_stl_data_ra</name><argument_list pos:start="111:28" pos:end="111:44">(<argument pos:start="111:29" pos:end="111:31"><expr pos:start="111:29" pos:end="111:31"><name pos:start="111:29" pos:end="111:31">env</name></expr></argument>, <argument pos:start="111:34" pos:end="111:35"><expr pos:start="111:34" pos:end="111:35"><name pos:start="111:34" pos:end="111:35">a2</name></expr></argument>, <argument pos:start="111:38" pos:end="111:39"><expr pos:start="111:38" pos:end="111:39"><name pos:start="111:38" pos:end="111:39">u2</name></expr></argument>, <argument pos:start="111:42" pos:end="111:43"><expr pos:start="111:42" pos:end="111:43"><name pos:start="111:42" pos:end="111:43">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="119:5" pos:end="131:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:17">(<expr pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:10">c1</name> <operator pos:start="119:12" pos:end="119:13">!=</operator> <name pos:start="119:15" pos:end="119:16">l1</name></expr>)</condition> <block pos:start="119:19" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:23">

        <expr_stmt pos:start="121:9" pos:end="121:23"><expr pos:start="121:9" pos:end="121:22"><name pos:start="121:9" pos:end="121:17"><name pos:start="121:9" pos:end="121:11">env</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:17">cc_n</name></name> <operator pos:start="121:19" pos:end="121:19">=</operator> <name pos:start="121:21" pos:end="121:22">l1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:23"><expr pos:start="123:9" pos:end="123:22"><name pos:start="123:9" pos:end="123:17"><name pos:start="123:9" pos:end="123:11">env</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:17">cc_v</name></name> <operator pos:start="123:19" pos:end="123:19">=</operator> <name pos:start="123:21" pos:end="123:22">c1</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="125:7" pos:end="131:5">else <block pos:start="125:12" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:23">

        <expr_stmt pos:start="127:9" pos:end="127:23"><expr pos:start="127:9" pos:end="127:22"><name pos:start="127:9" pos:end="127:17"><name pos:start="127:9" pos:end="127:11">env</name><operator pos:start="127:12" pos:end="127:13">-&gt;</operator><name pos:start="127:14" pos:end="127:17">cc_n</name></name> <operator pos:start="127:19" pos:end="127:19">=</operator> <name pos:start="127:21" pos:end="127:22">l2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:23"><expr pos:start="129:9" pos:end="129:22"><name pos:start="129:9" pos:end="129:17"><name pos:start="129:9" pos:end="129:11">env</name><operator pos:start="129:12" pos:end="129:13">-&gt;</operator><name pos:start="129:14" pos:end="129:17">cc_v</name></name> <operator pos:start="129:19" pos:end="129:19">=</operator> <name pos:start="129:21" pos:end="129:22">c2</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:28"><expr pos:start="133:5" pos:end="133:27"><name pos:start="133:5" pos:end="133:14"><name pos:start="133:5" pos:end="133:7">env</name><operator pos:start="133:8" pos:end="133:9">-&gt;</operator><name pos:start="133:10" pos:end="133:14">cc_op</name></name> <operator pos:start="133:16" pos:end="133:16">=</operator> <name pos:start="133:18" pos:end="133:27">CC_OP_CMPL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:25"><expr pos:start="135:5" pos:end="135:24"><name pos:start="135:5" pos:end="135:19"><name pos:start="135:5" pos:end="135:7">env</name><operator pos:start="135:8" pos:end="135:9">-&gt;</operator><name pos:start="135:10" pos:end="135:14">dregs</name><index pos:start="135:15" pos:end="135:19">[<expr pos:start="135:16" pos:end="135:18"><name pos:start="135:16" pos:end="135:18">Dc1</name></expr>]</index></name> <operator pos:start="135:21" pos:end="135:21">=</operator> <name pos:start="135:23" pos:end="135:24">l1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:25"><expr pos:start="137:5" pos:end="137:24"><name pos:start="137:5" pos:end="137:19"><name pos:start="137:5" pos:end="137:7">env</name><operator pos:start="137:8" pos:end="137:9">-&gt;</operator><name pos:start="137:10" pos:end="137:14">dregs</name><index pos:start="137:15" pos:end="137:19">[<expr pos:start="137:16" pos:end="137:18"><name pos:start="137:16" pos:end="137:18">Dc2</name></expr>]</index></name> <operator pos:start="137:21" pos:end="137:21">=</operator> <name pos:start="137:23" pos:end="137:24">l2</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
