<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14268.c" pos:tabs="8"><macro pos:start="1:1" pos:end="5:49"><name pos:start="1:1" pos:end="1:10">build_dsdt</name><argument_list pos:start="1:11" pos:end="5:49">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:45">GArray *linker</argument>,

           <argument pos:start="3:12" pos:end="3:27">AcpiCpuInfo *cpu</argument>, <argument pos:start="3:30" pos:end="3:43">AcpiPmInfo *pm</argument>, <argument pos:start="3:46" pos:end="3:63">AcpiMiscInfo *misc</argument>,

           <argument pos:start="5:12" pos:end="5:25">PcPciInfo *pci</argument>, <argument pos:start="5:28" pos:end="5:48">MachineState *machine</argument>)</argument_list></macro>

<block pos:start="7:1" pos:end="763:1">{<block_content pos:start="9:5" pos:end="761:25">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">CrsRangeEntry</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:24">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:68"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:7">Aml</name> <modifier pos:start="11:9" pos:end="11:9">*</modifier></type><name pos:start="11:10" pos:end="11:13">dsdt</name></decl>, <decl pos:start="11:16" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:24">sb_scope</name></decl>, <decl pos:start="11:27" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:27" pos:end="11:27">*</modifier></type><name pos:start="11:28" pos:end="11:32">scope</name></decl>, <decl pos:start="11:35" pos:end="11:38"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:35" pos:end="11:35">*</modifier></type><name pos:start="11:36" pos:end="11:38">dev</name></decl>, <decl pos:start="11:41" pos:end="11:47"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:41" pos:end="11:41">*</modifier></type><name pos:start="11:42" pos:end="11:47">method</name></decl>, <decl pos:start="11:50" pos:end="11:55"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:50" pos:end="11:50">*</modifier></type><name pos:start="11:51" pos:end="11:55">field</name></decl>, <decl pos:start="11:58" pos:end="11:61"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:58" pos:end="11:58">*</modifier></type><name pos:start="11:59" pos:end="11:61">pkg</name></decl>, <decl pos:start="11:64" pos:end="11:67"><type ref="prev" pos:start="11:5" pos:end="11:9"><modifier pos:start="11:64" pos:end="11:64">*</modifier></type><name pos:start="11:65" pos:end="11:67">crs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:75"><decl pos:start="13:5" pos:end="13:74"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">GPtrArray</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:25">mem_ranges</name> <init pos:start="13:27" pos:end="13:74">= <expr pos:start="13:29" pos:end="13:74"><call pos:start="13:29" pos:end="13:74"><name pos:start="13:29" pos:end="13:58">g_ptr_array_new_with_free_func</name><argument_list pos:start="13:59" pos:end="13:74">(<argument pos:start="13:60" pos:end="13:73"><expr pos:start="13:60" pos:end="13:73"><name pos:start="13:60" pos:end="13:73">crs_range_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:74"><decl pos:start="15:5" pos:end="15:73"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">GPtrArray</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:24">io_ranges</name> <init pos:start="15:26" pos:end="15:73">= <expr pos:start="15:28" pos:end="15:73"><call pos:start="15:28" pos:end="15:73"><name pos:start="15:28" pos:end="15:57">g_ptr_array_new_with_free_func</name><argument_list pos:start="15:58" pos:end="15:73">(<argument pos:start="15:59" pos:end="15:72"><expr pos:start="15:59" pos:end="15:72"><name pos:start="15:59" pos:end="15:72">crs_range_free</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:18">PCMachineState</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:24">pcms</name> <init pos:start="17:26" pos:end="17:46">= <expr pos:start="17:28" pos:end="17:46"><call pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:37">PC_MACHINE</name><argument_list pos:start="17:38" pos:end="17:46">(<argument pos:start="17:39" pos:end="17:45"><expr pos:start="17:39" pos:end="17:45"><name pos:start="17:39" pos:end="17:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:41"><decl pos:start="19:5" pos:end="19:40"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:19">nr_mem</name> <init pos:start="19:21" pos:end="19:40">= <expr pos:start="19:23" pos:end="19:40"><name pos:start="19:23" pos:end="19:40"><name pos:start="19:23" pos:end="19:29">machine</name><operator pos:start="19:30" pos:end="19:31">-&gt;</operator><name pos:start="19:32" pos:end="19:40">ram_slots</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:29"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:22">root_bus_limit</name> <init pos:start="21:24" pos:end="21:29">= <expr pos:start="21:26" pos:end="21:29"><literal type="number" pos:start="21:26" pos:end="21:29">0xFF</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:10">PCIBus</name> <modifier pos:start="23:12" pos:end="23:12">*</modifier></type><name pos:start="23:13" pos:end="23:15">bus</name> <init pos:start="23:17" pos:end="23:22">= <expr pos:start="23:19" pos:end="23:22"><name pos:start="23:19" pos:end="23:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:8">dsdt</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:31"><name pos:start="29:12" pos:end="29:29">init_aml_allocator</name><argument_list pos:start="29:30" pos:end="29:31">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:34">/* Reserve space for header */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:55"><expr pos:start="35:5" pos:end="35:54"><call pos:start="35:5" pos:end="35:54"><name pos:start="35:5" pos:end="35:18">acpi_data_push</name><argument_list pos:start="35:19" pos:end="35:54">(<argument pos:start="35:20" pos:end="35:28"><expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:23">dsdt</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:28">buf</name></name></expr></argument>, <argument pos:start="35:31" pos:end="35:53"><expr pos:start="35:31" pos:end="35:53"><sizeof pos:start="35:31" pos:end="35:53">sizeof<argument_list pos:start="35:37" pos:end="35:53">(<argument pos:start="35:38" pos:end="35:52"><expr pos:start="35:38" pos:end="35:52"><name pos:start="35:38" pos:end="35:52">AcpiTableHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><call pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:17">build_dbg_aml</name><argument_list pos:start="39:18" pos:end="39:23">(<argument pos:start="39:19" pos:end="39:22"><expr pos:start="39:19" pos:end="39:22"><name pos:start="39:19" pos:end="39:22">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="125:5"><if pos:start="41:5" pos:end="71:5">if <condition pos:start="41:8" pos:end="41:23">(<expr pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:12">misc</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:22">is_piix4</name></name></expr>)</condition> <block pos:start="41:25" pos:end="71:5">{<block_content pos:start="43:9" pos:end="69:35">

        <expr_stmt pos:start="43:9" pos:end="43:36"><expr pos:start="43:9" pos:end="43:35"><name pos:start="43:9" pos:end="43:16">sb_scope</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <call pos:start="43:20" pos:end="43:35"><name pos:start="43:20" pos:end="43:28">aml_scope</name><argument_list pos:start="43:29" pos:end="43:35">(<argument pos:start="43:30" pos:end="43:34"><expr pos:start="43:30" pos:end="43:34"><literal type="string" pos:start="43:30" pos:end="43:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:33"><expr pos:start="45:9" pos:end="45:32"><name pos:start="45:9" pos:end="45:11">dev</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:32"><name pos:start="45:15" pos:end="45:24">aml_device</name><argument_list pos:start="45:25" pos:end="45:32">(<argument pos:start="45:26" pos:end="45:31"><expr pos:start="45:26" pos:end="45:31"><literal type="string" pos:start="45:26" pos:end="45:31">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:70"><expr pos:start="47:9" pos:end="47:69"><call pos:start="47:9" pos:end="47:69"><name pos:start="47:9" pos:end="47:18">aml_append</name><argument_list pos:start="47:19" pos:end="47:69">(<argument pos:start="47:20" pos:end="47:22"><expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">dev</name></expr></argument>, <argument pos:start="47:25" pos:end="47:68"><expr pos:start="47:25" pos:end="47:68"><call pos:start="47:25" pos:end="47:68"><name pos:start="47:25" pos:end="47:37">aml_name_decl</name><argument_list pos:start="47:38" pos:end="47:68">(<argument pos:start="47:39" pos:end="47:44"><expr pos:start="47:39" pos:end="47:44"><literal type="string" pos:start="47:39" pos:end="47:44">"_HID"</literal></expr></argument>, <argument pos:start="47:47" pos:end="47:67"><expr pos:start="47:47" pos:end="47:67"><call pos:start="47:47" pos:end="47:67"><name pos:start="47:47" pos:end="47:56">aml_eisaid</name><argument_list pos:start="47:57" pos:end="47:67">(<argument pos:start="47:58" pos:end="47:66"><expr pos:start="47:58" pos:end="47:66"><literal type="string" pos:start="47:58" pos:end="47:66">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:59"><expr pos:start="49:9" pos:end="49:58"><call pos:start="49:9" pos:end="49:58"><name pos:start="49:9" pos:end="49:18">aml_append</name><argument_list pos:start="49:19" pos:end="49:58">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">dev</name></expr></argument>, <argument pos:start="49:25" pos:end="49:57"><expr pos:start="49:25" pos:end="49:57"><call pos:start="49:25" pos:end="49:57"><name pos:start="49:25" pos:end="49:37">aml_name_decl</name><argument_list pos:start="49:38" pos:end="49:57">(<argument pos:start="49:39" pos:end="49:44"><expr pos:start="49:39" pos:end="49:44"><literal type="string" pos:start="49:39" pos:end="49:44">"_ADR"</literal></expr></argument>, <argument pos:start="49:47" pos:end="49:56"><expr pos:start="49:47" pos:end="49:56"><call pos:start="49:47" pos:end="49:56"><name pos:start="49:47" pos:end="49:53">aml_int</name><argument_list pos:start="49:54" pos:end="49:56">(<argument pos:start="49:55" pos:end="49:55"><expr pos:start="49:55" pos:end="49:55"><literal type="number" pos:start="49:55" pos:end="49:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:59"><expr pos:start="51:9" pos:end="51:58"><call pos:start="51:9" pos:end="51:58"><name pos:start="51:9" pos:end="51:18">aml_append</name><argument_list pos:start="51:19" pos:end="51:58">(<argument pos:start="51:20" pos:end="51:22"><expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">dev</name></expr></argument>, <argument pos:start="51:25" pos:end="51:57"><expr pos:start="51:25" pos:end="51:57"><call pos:start="51:25" pos:end="51:57"><name pos:start="51:25" pos:end="51:37">aml_name_decl</name><argument_list pos:start="51:38" pos:end="51:57">(<argument pos:start="51:39" pos:end="51:44"><expr pos:start="51:39" pos:end="51:44"><literal type="string" pos:start="51:39" pos:end="51:44">"_UID"</literal></expr></argument>, <argument pos:start="51:47" pos:end="51:56"><expr pos:start="51:47" pos:end="51:56"><call pos:start="51:47" pos:end="51:56"><name pos:start="51:47" pos:end="51:53">aml_int</name><argument_list pos:start="51:54" pos:end="51:56">(<argument pos:start="51:55" pos:end="51:55"><expr pos:start="51:55" pos:end="51:55"><literal type="number" pos:start="51:55" pos:end="51:55">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:34"><expr pos:start="53:9" pos:end="53:33"><call pos:start="53:9" pos:end="53:33"><name pos:start="53:9" pos:end="53:18">aml_append</name><argument_list pos:start="53:19" pos:end="53:33">(<argument pos:start="53:20" pos:end="53:27"><expr pos:start="53:20" pos:end="53:27"><name pos:start="53:20" pos:end="53:27">sb_scope</name></expr></argument>, <argument pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:35"><expr pos:start="55:9" pos:end="55:34"><call pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:18">aml_append</name><argument_list pos:start="55:19" pos:end="55:34">(<argument pos:start="55:20" pos:end="55:23"><expr pos:start="55:20" pos:end="55:23"><name pos:start="55:20" pos:end="55:23">dsdt</name></expr></argument>, <argument pos:start="55:26" pos:end="55:33"><expr pos:start="55:26" pos:end="55:33"><name pos:start="55:26" pos:end="55:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:29"><expr pos:start="59:9" pos:end="59:28"><call pos:start="59:9" pos:end="59:28"><name pos:start="59:9" pos:end="59:22">build_hpet_aml</name><argument_list pos:start="59:23" pos:end="59:28">(<argument pos:start="59:24" pos:end="59:27"><expr pos:start="59:24" pos:end="59:27"><name pos:start="59:24" pos:end="59:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:29"><expr pos:start="61:9" pos:end="61:28"><call pos:start="61:9" pos:end="61:28"><name pos:start="61:9" pos:end="61:22">build_piix4_pm</name><argument_list pos:start="61:23" pos:end="61:28">(<argument pos:start="61:24" pos:end="61:27"><expr pos:start="61:24" pos:end="61:27"><name pos:start="61:24" pos:end="61:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:37"><expr pos:start="63:9" pos:end="63:36"><call pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:30">build_piix4_isa_bridge</name><argument_list pos:start="63:31" pos:end="63:36">(<argument pos:start="63:32" pos:end="63:35"><expr pos:start="63:32" pos:end="63:35"><name pos:start="63:32" pos:end="63:35">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:36"><expr pos:start="65:9" pos:end="65:35"><call pos:start="65:9" pos:end="65:35"><name pos:start="65:9" pos:end="65:29">build_isa_devices_aml</name><argument_list pos:start="65:30" pos:end="65:35">(<argument pos:start="65:31" pos:end="65:34"><expr pos:start="65:31" pos:end="65:34"><name pos:start="65:31" pos:end="65:34">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:38"><expr pos:start="67:9" pos:end="67:37"><call pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:31">build_piix4_pci_hotplug</name><argument_list pos:start="67:32" pos:end="67:37">(<argument pos:start="67:33" pos:end="67:36"><expr pos:start="67:33" pos:end="67:36"><name pos:start="67:33" pos:end="67:36">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:35"><expr pos:start="69:9" pos:end="69:34"><call pos:start="69:9" pos:end="69:34"><name pos:start="69:9" pos:end="69:28">build_piix4_pci0_int</name><argument_list pos:start="69:29" pos:end="69:34">(<argument pos:start="69:30" pos:end="69:33"><expr pos:start="69:30" pos:end="69:33"><name pos:start="69:30" pos:end="69:33">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="125:5">else <block pos:start="71:12" pos:end="125:5">{<block_content pos:start="73:9" pos:end="123:33">

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:16">sb_scope</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:35"><name pos:start="73:20" pos:end="73:28">aml_scope</name><argument_list pos:start="73:29" pos:end="73:35">(<argument pos:start="73:30" pos:end="73:34"><expr pos:start="73:30" pos:end="73:34"><literal type="string" pos:start="73:30" pos:end="73:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="77:80"><expr pos:start="75:9" pos:end="77:79"><call pos:start="75:9" pos:end="77:79"><name pos:start="75:9" pos:end="75:18">aml_append</name><argument_list pos:start="75:19" pos:end="77:79">(<argument pos:start="75:20" pos:end="75:27"><expr pos:start="75:20" pos:end="75:27"><name pos:start="75:20" pos:end="75:27">sb_scope</name></expr></argument>,

            <argument pos:start="77:13" pos:end="77:78"><expr pos:start="77:13" pos:end="77:78"><call pos:start="77:13" pos:end="77:78"><name pos:start="77:13" pos:end="77:32">aml_operation_region</name><argument_list pos:start="77:33" pos:end="77:78">(<argument pos:start="77:34" pos:end="77:39"><expr pos:start="77:34" pos:end="77:39"><literal type="string" pos:start="77:34" pos:end="77:39">"PCST"</literal></expr></argument>, <argument pos:start="77:42" pos:end="77:54"><expr pos:start="77:42" pos:end="77:54"><name pos:start="77:42" pos:end="77:54">AML_SYSTEM_IO</name></expr></argument>, <argument pos:start="77:57" pos:end="77:71"><expr pos:start="77:57" pos:end="77:71"><call pos:start="77:57" pos:end="77:71"><name pos:start="77:57" pos:end="77:63">aml_int</name><argument_list pos:start="77:64" pos:end="77:71">(<argument pos:start="77:65" pos:end="77:70"><expr pos:start="77:65" pos:end="77:70"><literal type="number" pos:start="77:65" pos:end="77:70">0xae00</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="77:74" pos:end="77:77"><expr pos:start="77:74" pos:end="77:77"><literal type="number" pos:start="77:74" pos:end="77:77">0x0c</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="81:80"><expr pos:start="79:9" pos:end="81:79"><call pos:start="79:9" pos:end="81:79"><name pos:start="79:9" pos:end="79:18">aml_append</name><argument_list pos:start="79:19" pos:end="81:79">(<argument pos:start="79:20" pos:end="79:27"><expr pos:start="79:20" pos:end="79:27"><name pos:start="79:20" pos:end="79:27">sb_scope</name></expr></argument>,

            <argument pos:start="81:13" pos:end="81:78"><expr pos:start="81:13" pos:end="81:78"><call pos:start="81:13" pos:end="81:78"><name pos:start="81:13" pos:end="81:32">aml_operation_region</name><argument_list pos:start="81:33" pos:end="81:78">(<argument pos:start="81:34" pos:end="81:39"><expr pos:start="81:34" pos:end="81:39"><literal type="string" pos:start="81:34" pos:end="81:39">"PCSB"</literal></expr></argument>, <argument pos:start="81:42" pos:end="81:54"><expr pos:start="81:42" pos:end="81:54"><name pos:start="81:42" pos:end="81:54">AML_SYSTEM_IO</name></expr></argument>, <argument pos:start="81:57" pos:end="81:71"><expr pos:start="81:57" pos:end="81:71"><call pos:start="81:57" pos:end="81:71"><name pos:start="81:57" pos:end="81:63">aml_int</name><argument_list pos:start="81:64" pos:end="81:71">(<argument pos:start="81:65" pos:end="81:70"><expr pos:start="81:65" pos:end="81:70"><literal type="number" pos:start="81:65" pos:end="81:70">0xae0c</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="81:74" pos:end="81:77"><expr pos:start="81:74" pos:end="81:77"><literal type="number" pos:start="81:74" pos:end="81:77">0x01</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:79"><expr pos:start="83:9" pos:end="83:78"><name pos:start="83:9" pos:end="83:13">field</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <call pos:start="83:17" pos:end="83:78"><name pos:start="83:17" pos:end="83:25">aml_field</name><argument_list pos:start="83:26" pos:end="83:78">(<argument pos:start="83:27" pos:end="83:32"><expr pos:start="83:27" pos:end="83:32"><literal type="string" pos:start="83:27" pos:end="83:32">"PCSB"</literal></expr></argument>, <argument pos:start="83:35" pos:end="83:45"><expr pos:start="83:35" pos:end="83:45"><name pos:start="83:35" pos:end="83:45">AML_ANY_ACC</name></expr></argument>, <argument pos:start="83:48" pos:end="83:57"><expr pos:start="83:48" pos:end="83:57"><name pos:start="83:48" pos:end="83:57">AML_NOLOCK</name></expr></argument>, <argument pos:start="83:60" pos:end="83:77"><expr pos:start="83:60" pos:end="83:77"><name pos:start="83:60" pos:end="83:77">AML_WRITE_AS_ZEROS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:54"><expr pos:start="85:9" pos:end="85:53"><call pos:start="85:9" pos:end="85:53"><name pos:start="85:9" pos:end="85:18">aml_append</name><argument_list pos:start="85:19" pos:end="85:53">(<argument pos:start="85:20" pos:end="85:24"><expr pos:start="85:20" pos:end="85:24"><name pos:start="85:20" pos:end="85:24">field</name></expr></argument>, <argument pos:start="85:27" pos:end="85:52"><expr pos:start="85:27" pos:end="85:52"><call pos:start="85:27" pos:end="85:52"><name pos:start="85:27" pos:end="85:41">aml_named_field</name><argument_list pos:start="85:42" pos:end="85:52">(<argument pos:start="85:43" pos:end="85:48"><expr pos:start="85:43" pos:end="85:48"><literal type="string" pos:start="85:43" pos:end="85:48">"PCIB"</literal></expr></argument>, <argument pos:start="85:51" pos:end="85:51"><expr pos:start="85:51" pos:end="85:51"><literal type="number" pos:start="85:51" pos:end="85:51">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><call pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:18">aml_append</name><argument_list pos:start="87:19" pos:end="87:35">(<argument pos:start="87:20" pos:end="87:27"><expr pos:start="87:20" pos:end="87:27"><name pos:start="87:20" pos:end="87:27">sb_scope</name></expr></argument>, <argument pos:start="87:30" pos:end="87:34"><expr pos:start="87:30" pos:end="87:34"><name pos:start="87:30" pos:end="87:34">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:35"><expr pos:start="89:9" pos:end="89:34"><call pos:start="89:9" pos:end="89:34"><name pos:start="89:9" pos:end="89:18">aml_append</name><argument_list pos:start="89:19" pos:end="89:34">(<argument pos:start="89:20" pos:end="89:23"><expr pos:start="89:20" pos:end="89:23"><name pos:start="89:20" pos:end="89:23">dsdt</name></expr></argument>, <argument pos:start="89:26" pos:end="89:33"><expr pos:start="89:26" pos:end="89:33"><name pos:start="89:26" pos:end="89:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:36"><expr pos:start="93:9" pos:end="93:35"><name pos:start="93:9" pos:end="93:16">sb_scope</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <call pos:start="93:20" pos:end="93:35"><name pos:start="93:20" pos:end="93:28">aml_scope</name><argument_list pos:start="93:29" pos:end="93:35">(<argument pos:start="93:30" pos:end="93:34"><expr pos:start="93:30" pos:end="93:34"><literal type="string" pos:start="93:30" pos:end="93:34">"_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:33"><expr pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:11">dev</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="95:32"><name pos:start="95:15" pos:end="95:24">aml_device</name><argument_list pos:start="95:25" pos:end="95:32">(<argument pos:start="95:26" pos:end="95:31"><expr pos:start="95:26" pos:end="95:31"><literal type="string" pos:start="95:26" pos:end="95:31">"PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:70"><expr pos:start="97:9" pos:end="97:69"><call pos:start="97:9" pos:end="97:69"><name pos:start="97:9" pos:end="97:18">aml_append</name><argument_list pos:start="97:19" pos:end="97:69">(<argument pos:start="97:20" pos:end="97:22"><expr pos:start="97:20" pos:end="97:22"><name pos:start="97:20" pos:end="97:22">dev</name></expr></argument>, <argument pos:start="97:25" pos:end="97:68"><expr pos:start="97:25" pos:end="97:68"><call pos:start="97:25" pos:end="97:68"><name pos:start="97:25" pos:end="97:37">aml_name_decl</name><argument_list pos:start="97:38" pos:end="97:68">(<argument pos:start="97:39" pos:end="97:44"><expr pos:start="97:39" pos:end="97:44"><literal type="string" pos:start="97:39" pos:end="97:44">"_HID"</literal></expr></argument>, <argument pos:start="97:47" pos:end="97:67"><expr pos:start="97:47" pos:end="97:67"><call pos:start="97:47" pos:end="97:67"><name pos:start="97:47" pos:end="97:56">aml_eisaid</name><argument_list pos:start="97:57" pos:end="97:67">(<argument pos:start="97:58" pos:end="97:66"><expr pos:start="97:58" pos:end="97:66"><literal type="string" pos:start="97:58" pos:end="97:66">"PNP0A08"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:70"><expr pos:start="99:9" pos:end="99:69"><call pos:start="99:9" pos:end="99:69"><name pos:start="99:9" pos:end="99:18">aml_append</name><argument_list pos:start="99:19" pos:end="99:69">(<argument pos:start="99:20" pos:end="99:22"><expr pos:start="99:20" pos:end="99:22"><name pos:start="99:20" pos:end="99:22">dev</name></expr></argument>, <argument pos:start="99:25" pos:end="99:68"><expr pos:start="99:25" pos:end="99:68"><call pos:start="99:25" pos:end="99:68"><name pos:start="99:25" pos:end="99:37">aml_name_decl</name><argument_list pos:start="99:38" pos:end="99:68">(<argument pos:start="99:39" pos:end="99:44"><expr pos:start="99:39" pos:end="99:44"><literal type="string" pos:start="99:39" pos:end="99:44">"_CID"</literal></expr></argument>, <argument pos:start="99:47" pos:end="99:67"><expr pos:start="99:47" pos:end="99:67"><call pos:start="99:47" pos:end="99:67"><name pos:start="99:47" pos:end="99:56">aml_eisaid</name><argument_list pos:start="99:57" pos:end="99:67">(<argument pos:start="99:58" pos:end="99:66"><expr pos:start="99:58" pos:end="99:66"><literal type="string" pos:start="99:58" pos:end="99:66">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:59"><expr pos:start="101:9" pos:end="101:58"><call pos:start="101:9" pos:end="101:58"><name pos:start="101:9" pos:end="101:18">aml_append</name><argument_list pos:start="101:19" pos:end="101:58">(<argument pos:start="101:20" pos:end="101:22"><expr pos:start="101:20" pos:end="101:22"><name pos:start="101:20" pos:end="101:22">dev</name></expr></argument>, <argument pos:start="101:25" pos:end="101:57"><expr pos:start="101:25" pos:end="101:57"><call pos:start="101:25" pos:end="101:57"><name pos:start="101:25" pos:end="101:37">aml_name_decl</name><argument_list pos:start="101:38" pos:end="101:57">(<argument pos:start="101:39" pos:end="101:44"><expr pos:start="101:39" pos:end="101:44"><literal type="string" pos:start="101:39" pos:end="101:44">"_ADR"</literal></expr></argument>, <argument pos:start="101:47" pos:end="101:56"><expr pos:start="101:47" pos:end="101:56"><call pos:start="101:47" pos:end="101:56"><name pos:start="101:47" pos:end="101:53">aml_int</name><argument_list pos:start="101:54" pos:end="101:56">(<argument pos:start="101:55" pos:end="101:55"><expr pos:start="101:55" pos:end="101:55"><literal type="number" pos:start="101:55" pos:end="101:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:59"><expr pos:start="103:9" pos:end="103:58"><call pos:start="103:9" pos:end="103:58"><name pos:start="103:9" pos:end="103:18">aml_append</name><argument_list pos:start="103:19" pos:end="103:58">(<argument pos:start="103:20" pos:end="103:22"><expr pos:start="103:20" pos:end="103:22"><name pos:start="103:20" pos:end="103:22">dev</name></expr></argument>, <argument pos:start="103:25" pos:end="103:57"><expr pos:start="103:25" pos:end="103:57"><call pos:start="103:25" pos:end="103:57"><name pos:start="103:25" pos:end="103:37">aml_name_decl</name><argument_list pos:start="103:38" pos:end="103:57">(<argument pos:start="103:39" pos:end="103:44"><expr pos:start="103:39" pos:end="103:44"><literal type="string" pos:start="103:39" pos:end="103:44">"_UID"</literal></expr></argument>, <argument pos:start="103:47" pos:end="103:56"><expr pos:start="103:47" pos:end="103:56"><call pos:start="103:47" pos:end="103:56"><name pos:start="103:47" pos:end="103:53">aml_int</name><argument_list pos:start="103:54" pos:end="103:56">(<argument pos:start="103:55" pos:end="103:55"><expr pos:start="103:55" pos:end="103:55"><literal type="number" pos:start="103:55" pos:end="103:55">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:59"><expr pos:start="105:9" pos:end="105:58"><call pos:start="105:9" pos:end="105:58"><name pos:start="105:9" pos:end="105:18">aml_append</name><argument_list pos:start="105:19" pos:end="105:58">(<argument pos:start="105:20" pos:end="105:22"><expr pos:start="105:20" pos:end="105:22"><name pos:start="105:20" pos:end="105:22">dev</name></expr></argument>, <argument pos:start="105:25" pos:end="105:57"><expr pos:start="105:25" pos:end="105:57"><call pos:start="105:25" pos:end="105:57"><name pos:start="105:25" pos:end="105:37">aml_name_decl</name><argument_list pos:start="105:38" pos:end="105:57">(<argument pos:start="105:39" pos:end="105:44"><expr pos:start="105:39" pos:end="105:44"><literal type="string" pos:start="105:39" pos:end="105:44">"SUPP"</literal></expr></argument>, <argument pos:start="105:47" pos:end="105:56"><expr pos:start="105:47" pos:end="105:56"><call pos:start="105:47" pos:end="105:56"><name pos:start="105:47" pos:end="105:53">aml_int</name><argument_list pos:start="105:54" pos:end="105:56">(<argument pos:start="105:55" pos:end="105:55"><expr pos:start="105:55" pos:end="105:55"><literal type="number" pos:start="105:55" pos:end="105:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:59"><expr pos:start="107:9" pos:end="107:58"><call pos:start="107:9" pos:end="107:58"><name pos:start="107:9" pos:end="107:18">aml_append</name><argument_list pos:start="107:19" pos:end="107:58">(<argument pos:start="107:20" pos:end="107:22"><expr pos:start="107:20" pos:end="107:22"><name pos:start="107:20" pos:end="107:22">dev</name></expr></argument>, <argument pos:start="107:25" pos:end="107:57"><expr pos:start="107:25" pos:end="107:57"><call pos:start="107:25" pos:end="107:57"><name pos:start="107:25" pos:end="107:37">aml_name_decl</name><argument_list pos:start="107:38" pos:end="107:57">(<argument pos:start="107:39" pos:end="107:44"><expr pos:start="107:39" pos:end="107:44"><literal type="string" pos:start="107:39" pos:end="107:44">"CTRL"</literal></expr></argument>, <argument pos:start="107:47" pos:end="107:56"><expr pos:start="107:47" pos:end="107:56"><call pos:start="107:47" pos:end="107:56"><name pos:start="107:47" pos:end="107:53">aml_int</name><argument_list pos:start="107:54" pos:end="107:56">(<argument pos:start="107:55" pos:end="107:55"><expr pos:start="107:55" pos:end="107:55"><literal type="number" pos:start="107:55" pos:end="107:55">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:48"><expr pos:start="109:9" pos:end="109:47"><call pos:start="109:9" pos:end="109:47"><name pos:start="109:9" pos:end="109:18">aml_append</name><argument_list pos:start="109:19" pos:end="109:47">(<argument pos:start="109:20" pos:end="109:22"><expr pos:start="109:20" pos:end="109:22"><name pos:start="109:20" pos:end="109:22">dev</name></expr></argument>, <argument pos:start="109:25" pos:end="109:46"><expr pos:start="109:25" pos:end="109:46"><call pos:start="109:25" pos:end="109:46"><name pos:start="109:25" pos:end="109:44">build_q35_osc_method</name><argument_list pos:start="109:45" pos:end="109:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:34"><expr pos:start="111:9" pos:end="111:33"><call pos:start="111:9" pos:end="111:33"><name pos:start="111:9" pos:end="111:18">aml_append</name><argument_list pos:start="111:19" pos:end="111:33">(<argument pos:start="111:20" pos:end="111:27"><expr pos:start="111:20" pos:end="111:27"><name pos:start="111:20" pos:end="111:27">sb_scope</name></expr></argument>, <argument pos:start="111:30" pos:end="111:32"><expr pos:start="111:30" pos:end="111:32"><name pos:start="111:30" pos:end="111:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:35"><expr pos:start="113:9" pos:end="113:34"><call pos:start="113:9" pos:end="113:34"><name pos:start="113:9" pos:end="113:18">aml_append</name><argument_list pos:start="113:19" pos:end="113:34">(<argument pos:start="113:20" pos:end="113:23"><expr pos:start="113:20" pos:end="113:23"><name pos:start="113:20" pos:end="113:23">dsdt</name></expr></argument>, <argument pos:start="113:26" pos:end="113:33"><expr pos:start="113:26" pos:end="113:33"><name pos:start="113:26" pos:end="113:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:29"><expr pos:start="117:9" pos:end="117:28"><call pos:start="117:9" pos:end="117:28"><name pos:start="117:9" pos:end="117:22">build_hpet_aml</name><argument_list pos:start="117:23" pos:end="117:28">(<argument pos:start="117:24" pos:end="117:27"><expr pos:start="117:24" pos:end="117:27"><name pos:start="117:24" pos:end="117:27">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:35"><expr pos:start="119:9" pos:end="119:34"><call pos:start="119:9" pos:end="119:34"><name pos:start="119:9" pos:end="119:28">build_q35_isa_bridge</name><argument_list pos:start="119:29" pos:end="119:34">(<argument pos:start="119:30" pos:end="119:33"><expr pos:start="119:30" pos:end="119:33"><name pos:start="119:30" pos:end="119:33">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:36"><expr pos:start="121:9" pos:end="121:35"><call pos:start="121:9" pos:end="121:35"><name pos:start="121:9" pos:end="121:29">build_isa_devices_aml</name><argument_list pos:start="121:30" pos:end="121:35">(<argument pos:start="121:31" pos:end="121:34"><expr pos:start="121:31" pos:end="121:34"><name pos:start="121:31" pos:end="121:34">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:33"><expr pos:start="123:9" pos:end="123:32"><call pos:start="123:9" pos:end="123:32"><name pos:start="123:9" pos:end="123:26">build_q35_pci0_int</name><argument_list pos:start="123:27" pos:end="123:32">(<argument pos:start="123:28" pos:end="123:31"><expr pos:start="123:28" pos:end="123:31"><name pos:start="123:28" pos:end="123:31">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:32"><expr pos:start="129:5" pos:end="129:31"><call pos:start="129:5" pos:end="129:31"><name pos:start="129:5" pos:end="129:25">build_cpu_hotplug_aml</name><argument_list pos:start="129:26" pos:end="129:31">(<argument pos:start="129:27" pos:end="129:30"><expr pos:start="129:27" pos:end="129:30"><name pos:start="129:27" pos:end="129:30">dsdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="133:48"><expr pos:start="131:5" pos:end="133:47"><call pos:start="131:5" pos:end="133:47"><name pos:start="131:5" pos:end="131:28">build_memory_hotplug_aml</name><argument_list pos:start="131:29" pos:end="133:47">(<argument pos:start="131:30" pos:end="131:33"><expr pos:start="131:30" pos:end="131:33"><name pos:start="131:30" pos:end="131:33">dsdt</name></expr></argument>, <argument pos:start="131:36" pos:end="131:41"><expr pos:start="131:36" pos:end="131:41"><name pos:start="131:36" pos:end="131:41">nr_mem</name></expr></argument>, <argument pos:start="131:44" pos:end="131:61"><expr pos:start="131:44" pos:end="131:61"><name pos:start="131:44" pos:end="131:61"><name pos:start="131:44" pos:end="131:45">pm</name><operator pos:start="131:46" pos:end="131:47">-&gt;</operator><name pos:start="131:48" pos:end="131:61">mem_hp_io_base</name></name></expr></argument>,

                             <argument pos:start="133:30" pos:end="133:46"><expr pos:start="133:30" pos:end="133:46"><name pos:start="133:30" pos:end="133:46"><name pos:start="133:30" pos:end="133:31">pm</name><operator pos:start="133:32" pos:end="133:33">-&gt;</operator><name pos:start="133:34" pos:end="133:46">mem_hp_io_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:31"><expr pos:start="137:5" pos:end="137:30"><name pos:start="137:5" pos:end="137:9">scope</name> <operator pos:start="137:11" pos:end="137:11">=</operator>  <call pos:start="137:14" pos:end="137:30"><name pos:start="137:14" pos:end="137:22">aml_scope</name><argument_list pos:start="137:23" pos:end="137:30">(<argument pos:start="137:24" pos:end="137:29"><expr pos:start="137:24" pos:end="137:29"><literal type="string" pos:start="137:24" pos:end="137:29">"_GPE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="139:5" pos:end="211:5">{<block_content pos:start="141:9" pos:end="209:68">

        <expr_stmt pos:start="141:9" pos:end="141:73"><expr pos:start="141:9" pos:end="141:72"><call pos:start="141:9" pos:end="141:72"><name pos:start="141:9" pos:end="141:18">aml_append</name><argument_list pos:start="141:19" pos:end="141:72">(<argument pos:start="141:20" pos:end="141:24"><expr pos:start="141:20" pos:end="141:24"><name pos:start="141:20" pos:end="141:24">scope</name></expr></argument>, <argument pos:start="141:27" pos:end="141:71"><expr pos:start="141:27" pos:end="141:71"><call pos:start="141:27" pos:end="141:71"><name pos:start="141:27" pos:end="141:39">aml_name_decl</name><argument_list pos:start="141:40" pos:end="141:71">(<argument pos:start="141:41" pos:end="141:46"><expr pos:start="141:41" pos:end="141:46"><literal type="string" pos:start="141:41" pos:end="141:46">"_HID"</literal></expr></argument>, <argument pos:start="141:49" pos:end="141:70"><expr pos:start="141:49" pos:end="141:70"><call pos:start="141:49" pos:end="141:70"><name pos:start="141:49" pos:end="141:58">aml_string</name><argument_list pos:start="141:59" pos:end="141:70">(<argument pos:start="141:60" pos:end="141:69"><expr pos:start="141:60" pos:end="141:69"><literal type="string" pos:start="141:60" pos:end="141:69">"ACPI0006"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:68"><expr pos:start="145:9" pos:end="145:67"><call pos:start="145:9" pos:end="145:67"><name pos:start="145:9" pos:end="145:18">aml_append</name><argument_list pos:start="145:19" pos:end="145:67">(<argument pos:start="145:20" pos:end="145:24"><expr pos:start="145:20" pos:end="145:24"><name pos:start="145:20" pos:end="145:24">scope</name></expr></argument>, <argument pos:start="145:27" pos:end="145:66"><expr pos:start="145:27" pos:end="145:66"><call pos:start="145:27" pos:end="145:66"><name pos:start="145:27" pos:end="145:36">aml_method</name><argument_list pos:start="145:37" pos:end="145:66">(<argument pos:start="145:38" pos:end="145:43"><expr pos:start="145:38" pos:end="145:43"><literal type="string" pos:start="145:38" pos:end="145:43">"_L00"</literal></expr></argument>, <argument pos:start="145:46" pos:end="145:46"><expr pos:start="145:46" pos:end="145:46"><literal type="number" pos:start="145:46" pos:end="145:46">0</literal></expr></argument>, <argument pos:start="145:49" pos:end="145:65"><expr pos:start="145:49" pos:end="145:65"><name pos:start="145:49" pos:end="145:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="149:9" pos:end="167:9"><if pos:start="149:9" pos:end="163:9">if <condition pos:start="149:12" pos:end="149:27">(<expr pos:start="149:13" pos:end="149:26"><name pos:start="149:13" pos:end="149:26"><name pos:start="149:13" pos:end="149:16">misc</name><operator pos:start="149:17" pos:end="149:18">-&gt;</operator><name pos:start="149:19" pos:end="149:26">is_piix4</name></name></expr>)</condition> <block pos:start="149:29" pos:end="163:9">{<block_content pos:start="151:13" pos:end="161:38">

            <expr_stmt pos:start="151:13" pos:end="151:62"><expr pos:start="151:13" pos:end="151:61"><name pos:start="151:13" pos:end="151:18">method</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <call pos:start="151:22" pos:end="151:61"><name pos:start="151:22" pos:end="151:31">aml_method</name><argument_list pos:start="151:32" pos:end="151:61">(<argument pos:start="151:33" pos:end="151:38"><expr pos:start="151:33" pos:end="151:38"><literal type="string" pos:start="151:33" pos:end="151:38">"_E01"</literal></expr></argument>, <argument pos:start="151:41" pos:end="151:41"><expr pos:start="151:41" pos:end="151:41"><literal type="number" pos:start="151:41" pos:end="151:41">0</literal></expr></argument>, <argument pos:start="151:44" pos:end="151:60"><expr pos:start="151:44" pos:end="151:60"><name pos:start="151:44" pos:end="151:60">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="155:66"><expr pos:start="153:13" pos:end="155:65"><call pos:start="153:13" pos:end="155:65"><name pos:start="153:13" pos:end="153:22">aml_append</name><argument_list pos:start="153:23" pos:end="155:65">(<argument pos:start="153:24" pos:end="153:29"><expr pos:start="153:24" pos:end="153:29"><name pos:start="153:24" pos:end="153:29">method</name></expr></argument>,

                <argument pos:start="155:17" pos:end="155:64"><expr pos:start="155:17" pos:end="155:64"><call pos:start="155:17" pos:end="155:64"><name pos:start="155:17" pos:end="155:27">aml_acquire</name><argument_list pos:start="155:28" pos:end="155:64">(<argument pos:start="155:29" pos:end="155:55"><expr pos:start="155:29" pos:end="155:55"><call pos:start="155:29" pos:end="155:55"><name pos:start="155:29" pos:end="155:36">aml_name</name><argument_list pos:start="155:37" pos:end="155:55">(<argument pos:start="155:38" pos:end="155:54"><expr pos:start="155:38" pos:end="155:54"><literal type="string" pos:start="155:38" pos:end="155:54">"\\_SB.PCI0.BLCK"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="155:58" pos:end="155:63"><expr pos:start="155:58" pos:end="155:63"><literal type="number" pos:start="155:58" pos:end="155:63">0xFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:61"><expr pos:start="157:13" pos:end="157:60"><call pos:start="157:13" pos:end="157:60"><name pos:start="157:13" pos:end="157:22">aml_append</name><argument_list pos:start="157:23" pos:end="157:60">(<argument pos:start="157:24" pos:end="157:29"><expr pos:start="157:24" pos:end="157:29"><name pos:start="157:24" pos:end="157:29">method</name></expr></argument>, <argument pos:start="157:32" pos:end="157:59"><expr pos:start="157:32" pos:end="157:59"><call pos:start="157:32" pos:end="157:59"><name pos:start="157:32" pos:end="157:40">aml_call0</name><argument_list pos:start="157:41" pos:end="157:59">(<argument pos:start="157:42" pos:end="157:58"><expr pos:start="157:42" pos:end="157:58"><literal type="string" pos:start="157:42" pos:end="157:58">"\\_SB.PCI0.PCNT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:73"><expr pos:start="159:13" pos:end="159:72"><call pos:start="159:13" pos:end="159:72"><name pos:start="159:13" pos:end="159:22">aml_append</name><argument_list pos:start="159:23" pos:end="159:72">(<argument pos:start="159:24" pos:end="159:29"><expr pos:start="159:24" pos:end="159:29"><name pos:start="159:24" pos:end="159:29">method</name></expr></argument>, <argument pos:start="159:32" pos:end="159:71"><expr pos:start="159:32" pos:end="159:71"><call pos:start="159:32" pos:end="159:71"><name pos:start="159:32" pos:end="159:42">aml_release</name><argument_list pos:start="159:43" pos:end="159:71">(<argument pos:start="159:44" pos:end="159:70"><expr pos:start="159:44" pos:end="159:70"><call pos:start="159:44" pos:end="159:70"><name pos:start="159:44" pos:end="159:51">aml_name</name><argument_list pos:start="159:52" pos:end="159:70">(<argument pos:start="159:53" pos:end="159:69"><expr pos:start="159:53" pos:end="159:69"><literal type="string" pos:start="159:53" pos:end="159:69">"\\_SB.PCI0.BLCK"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:38"><expr pos:start="161:13" pos:end="161:37"><call pos:start="161:13" pos:end="161:37"><name pos:start="161:13" pos:end="161:22">aml_append</name><argument_list pos:start="161:23" pos:end="161:37">(<argument pos:start="161:24" pos:end="161:28"><expr pos:start="161:24" pos:end="161:28"><name pos:start="161:24" pos:end="161:28">scope</name></expr></argument>, <argument pos:start="161:31" pos:end="161:36"><expr pos:start="161:31" pos:end="161:36"><name pos:start="161:31" pos:end="161:36">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="163:11" pos:end="167:9">else <block pos:start="163:16" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:72">

            <expr_stmt pos:start="165:13" pos:end="165:72"><expr pos:start="165:13" pos:end="165:71"><call pos:start="165:13" pos:end="165:71"><name pos:start="165:13" pos:end="165:22">aml_append</name><argument_list pos:start="165:23" pos:end="165:71">(<argument pos:start="165:24" pos:end="165:28"><expr pos:start="165:24" pos:end="165:28"><name pos:start="165:24" pos:end="165:28">scope</name></expr></argument>, <argument pos:start="165:31" pos:end="165:70"><expr pos:start="165:31" pos:end="165:70"><call pos:start="165:31" pos:end="165:70"><name pos:start="165:31" pos:end="165:40">aml_method</name><argument_list pos:start="165:41" pos:end="165:70">(<argument pos:start="165:42" pos:end="165:47"><expr pos:start="165:42" pos:end="165:47"><literal type="string" pos:start="165:42" pos:end="165:47">"_L01"</literal></expr></argument>, <argument pos:start="165:50" pos:end="165:50"><expr pos:start="165:50" pos:end="165:50"><literal type="number" pos:start="165:50" pos:end="165:50">0</literal></expr></argument>, <argument pos:start="165:53" pos:end="165:69"><expr pos:start="165:53" pos:end="165:69"><name pos:start="165:53" pos:end="165:69">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="171:9" pos:end="171:58"><expr pos:start="171:9" pos:end="171:57"><name pos:start="171:9" pos:end="171:14">method</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <call pos:start="171:18" pos:end="171:57"><name pos:start="171:18" pos:end="171:27">aml_method</name><argument_list pos:start="171:28" pos:end="171:57">(<argument pos:start="171:29" pos:end="171:34"><expr pos:start="171:29" pos:end="171:34"><literal type="string" pos:start="171:29" pos:end="171:34">"_E02"</literal></expr></argument>, <argument pos:start="171:37" pos:end="171:37"><expr pos:start="171:37" pos:end="171:37"><literal type="number" pos:start="171:37" pos:end="171:37">0</literal></expr></argument>, <argument pos:start="171:40" pos:end="171:56"><expr pos:start="171:40" pos:end="171:56"><name pos:start="171:40" pos:end="171:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:64"><expr pos:start="173:9" pos:end="173:63"><call pos:start="173:9" pos:end="173:63"><name pos:start="173:9" pos:end="173:18">aml_append</name><argument_list pos:start="173:19" pos:end="173:63">(<argument pos:start="173:20" pos:end="173:25"><expr pos:start="173:20" pos:end="173:25"><name pos:start="173:20" pos:end="173:25">method</name></expr></argument>, <argument pos:start="173:28" pos:end="173:62"><expr pos:start="173:28" pos:end="173:62"><call pos:start="173:28" pos:end="173:62"><name pos:start="173:28" pos:end="173:36">aml_call0</name><argument_list pos:start="173:37" pos:end="173:62">(<argument pos:start="173:38" pos:end="173:61"><expr pos:start="173:38" pos:end="173:61"><literal type="string" pos:start="173:38" pos:end="173:45">"\\_SB."</literal> <name pos:start="173:47" pos:end="173:61">CPU_SCAN_METHOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:34"><expr pos:start="175:9" pos:end="175:33"><call pos:start="175:9" pos:end="175:33"><name pos:start="175:9" pos:end="175:18">aml_append</name><argument_list pos:start="175:19" pos:end="175:33">(<argument pos:start="175:20" pos:end="175:24"><expr pos:start="175:20" pos:end="175:24"><name pos:start="175:20" pos:end="175:24">scope</name></expr></argument>, <argument pos:start="175:27" pos:end="175:32"><expr pos:start="175:27" pos:end="175:32"><name pos:start="175:27" pos:end="175:32">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="179:9" pos:end="179:58"><expr pos:start="179:9" pos:end="179:57"><name pos:start="179:9" pos:end="179:14">method</name> <operator pos:start="179:16" pos:end="179:16">=</operator> <call pos:start="179:18" pos:end="179:57"><name pos:start="179:18" pos:end="179:27">aml_method</name><argument_list pos:start="179:28" pos:end="179:57">(<argument pos:start="179:29" pos:end="179:34"><expr pos:start="179:29" pos:end="179:34"><literal type="string" pos:start="179:29" pos:end="179:34">"_E03"</literal></expr></argument>, <argument pos:start="179:37" pos:end="179:37"><expr pos:start="179:37" pos:end="179:37"><literal type="number" pos:start="179:37" pos:end="179:37">0</literal></expr></argument>, <argument pos:start="179:40" pos:end="179:56"><expr pos:start="179:40" pos:end="179:56"><name pos:start="179:40" pos:end="179:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:67"><expr pos:start="181:9" pos:end="181:66"><call pos:start="181:9" pos:end="181:66"><name pos:start="181:9" pos:end="181:18">aml_append</name><argument_list pos:start="181:19" pos:end="181:66">(<argument pos:start="181:20" pos:end="181:25"><expr pos:start="181:20" pos:end="181:25"><name pos:start="181:20" pos:end="181:25">method</name></expr></argument>, <argument pos:start="181:28" pos:end="181:65"><expr pos:start="181:28" pos:end="181:65"><call pos:start="181:28" pos:end="181:65"><name pos:start="181:28" pos:end="181:36">aml_call0</name><argument_list pos:start="181:37" pos:end="181:65">(<argument pos:start="181:38" pos:end="181:64"><expr pos:start="181:38" pos:end="181:64"><name pos:start="181:38" pos:end="181:64">MEMORY_HOTPLUG_HANDLER_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:34"><expr pos:start="183:9" pos:end="183:33"><call pos:start="183:9" pos:end="183:33"><name pos:start="183:9" pos:end="183:18">aml_append</name><argument_list pos:start="183:19" pos:end="183:33">(<argument pos:start="183:20" pos:end="183:24"><expr pos:start="183:20" pos:end="183:24"><name pos:start="183:20" pos:end="183:24">scope</name></expr></argument>, <argument pos:start="183:27" pos:end="183:32"><expr pos:start="183:27" pos:end="183:32"><name pos:start="183:27" pos:end="183:32">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="187:9" pos:end="187:68"><expr pos:start="187:9" pos:end="187:67"><call pos:start="187:9" pos:end="187:67"><name pos:start="187:9" pos:end="187:18">aml_append</name><argument_list pos:start="187:19" pos:end="187:67">(<argument pos:start="187:20" pos:end="187:24"><expr pos:start="187:20" pos:end="187:24"><name pos:start="187:20" pos:end="187:24">scope</name></expr></argument>, <argument pos:start="187:27" pos:end="187:66"><expr pos:start="187:27" pos:end="187:66"><call pos:start="187:27" pos:end="187:66"><name pos:start="187:27" pos:end="187:36">aml_method</name><argument_list pos:start="187:37" pos:end="187:66">(<argument pos:start="187:38" pos:end="187:43"><expr pos:start="187:38" pos:end="187:43"><literal type="string" pos:start="187:38" pos:end="187:43">"_L04"</literal></expr></argument>, <argument pos:start="187:46" pos:end="187:46"><expr pos:start="187:46" pos:end="187:46"><literal type="number" pos:start="187:46" pos:end="187:46">0</literal></expr></argument>, <argument pos:start="187:49" pos:end="187:65"><expr pos:start="187:49" pos:end="187:65"><name pos:start="187:49" pos:end="187:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:68"><expr pos:start="189:9" pos:end="189:67"><call pos:start="189:9" pos:end="189:67"><name pos:start="189:9" pos:end="189:18">aml_append</name><argument_list pos:start="189:19" pos:end="189:67">(<argument pos:start="189:20" pos:end="189:24"><expr pos:start="189:20" pos:end="189:24"><name pos:start="189:20" pos:end="189:24">scope</name></expr></argument>, <argument pos:start="189:27" pos:end="189:66"><expr pos:start="189:27" pos:end="189:66"><call pos:start="189:27" pos:end="189:66"><name pos:start="189:27" pos:end="189:36">aml_method</name><argument_list pos:start="189:37" pos:end="189:66">(<argument pos:start="189:38" pos:end="189:43"><expr pos:start="189:38" pos:end="189:43"><literal type="string" pos:start="189:38" pos:end="189:43">"_L05"</literal></expr></argument>, <argument pos:start="189:46" pos:end="189:46"><expr pos:start="189:46" pos:end="189:46"><literal type="number" pos:start="189:46" pos:end="189:46">0</literal></expr></argument>, <argument pos:start="189:49" pos:end="189:65"><expr pos:start="189:49" pos:end="189:65"><name pos:start="189:49" pos:end="189:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:68"><expr pos:start="191:9" pos:end="191:67"><call pos:start="191:9" pos:end="191:67"><name pos:start="191:9" pos:end="191:18">aml_append</name><argument_list pos:start="191:19" pos:end="191:67">(<argument pos:start="191:20" pos:end="191:24"><expr pos:start="191:20" pos:end="191:24"><name pos:start="191:20" pos:end="191:24">scope</name></expr></argument>, <argument pos:start="191:27" pos:end="191:66"><expr pos:start="191:27" pos:end="191:66"><call pos:start="191:27" pos:end="191:66"><name pos:start="191:27" pos:end="191:36">aml_method</name><argument_list pos:start="191:37" pos:end="191:66">(<argument pos:start="191:38" pos:end="191:43"><expr pos:start="191:38" pos:end="191:43"><literal type="string" pos:start="191:38" pos:end="191:43">"_L06"</literal></expr></argument>, <argument pos:start="191:46" pos:end="191:46"><expr pos:start="191:46" pos:end="191:46"><literal type="number" pos:start="191:46" pos:end="191:46">0</literal></expr></argument>, <argument pos:start="191:49" pos:end="191:65"><expr pos:start="191:49" pos:end="191:65"><name pos:start="191:49" pos:end="191:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:68"><expr pos:start="193:9" pos:end="193:67"><call pos:start="193:9" pos:end="193:67"><name pos:start="193:9" pos:end="193:18">aml_append</name><argument_list pos:start="193:19" pos:end="193:67">(<argument pos:start="193:20" pos:end="193:24"><expr pos:start="193:20" pos:end="193:24"><name pos:start="193:20" pos:end="193:24">scope</name></expr></argument>, <argument pos:start="193:27" pos:end="193:66"><expr pos:start="193:27" pos:end="193:66"><call pos:start="193:27" pos:end="193:66"><name pos:start="193:27" pos:end="193:36">aml_method</name><argument_list pos:start="193:37" pos:end="193:66">(<argument pos:start="193:38" pos:end="193:43"><expr pos:start="193:38" pos:end="193:43"><literal type="string" pos:start="193:38" pos:end="193:43">"_L07"</literal></expr></argument>, <argument pos:start="193:46" pos:end="193:46"><expr pos:start="193:46" pos:end="193:46"><literal type="number" pos:start="193:46" pos:end="193:46">0</literal></expr></argument>, <argument pos:start="193:49" pos:end="193:65"><expr pos:start="193:49" pos:end="193:65"><name pos:start="193:49" pos:end="193:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:68"><expr pos:start="195:9" pos:end="195:67"><call pos:start="195:9" pos:end="195:67"><name pos:start="195:9" pos:end="195:18">aml_append</name><argument_list pos:start="195:19" pos:end="195:67">(<argument pos:start="195:20" pos:end="195:24"><expr pos:start="195:20" pos:end="195:24"><name pos:start="195:20" pos:end="195:24">scope</name></expr></argument>, <argument pos:start="195:27" pos:end="195:66"><expr pos:start="195:27" pos:end="195:66"><call pos:start="195:27" pos:end="195:66"><name pos:start="195:27" pos:end="195:36">aml_method</name><argument_list pos:start="195:37" pos:end="195:66">(<argument pos:start="195:38" pos:end="195:43"><expr pos:start="195:38" pos:end="195:43"><literal type="string" pos:start="195:38" pos:end="195:43">"_L08"</literal></expr></argument>, <argument pos:start="195:46" pos:end="195:46"><expr pos:start="195:46" pos:end="195:46"><literal type="number" pos:start="195:46" pos:end="195:46">0</literal></expr></argument>, <argument pos:start="195:49" pos:end="195:65"><expr pos:start="195:49" pos:end="195:65"><name pos:start="195:49" pos:end="195:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:68"><expr pos:start="197:9" pos:end="197:67"><call pos:start="197:9" pos:end="197:67"><name pos:start="197:9" pos:end="197:18">aml_append</name><argument_list pos:start="197:19" pos:end="197:67">(<argument pos:start="197:20" pos:end="197:24"><expr pos:start="197:20" pos:end="197:24"><name pos:start="197:20" pos:end="197:24">scope</name></expr></argument>, <argument pos:start="197:27" pos:end="197:66"><expr pos:start="197:27" pos:end="197:66"><call pos:start="197:27" pos:end="197:66"><name pos:start="197:27" pos:end="197:36">aml_method</name><argument_list pos:start="197:37" pos:end="197:66">(<argument pos:start="197:38" pos:end="197:43"><expr pos:start="197:38" pos:end="197:43"><literal type="string" pos:start="197:38" pos:end="197:43">"_L09"</literal></expr></argument>, <argument pos:start="197:46" pos:end="197:46"><expr pos:start="197:46" pos:end="197:46"><literal type="number" pos:start="197:46" pos:end="197:46">0</literal></expr></argument>, <argument pos:start="197:49" pos:end="197:65"><expr pos:start="197:49" pos:end="197:65"><name pos:start="197:49" pos:end="197:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:68"><expr pos:start="199:9" pos:end="199:67"><call pos:start="199:9" pos:end="199:67"><name pos:start="199:9" pos:end="199:18">aml_append</name><argument_list pos:start="199:19" pos:end="199:67">(<argument pos:start="199:20" pos:end="199:24"><expr pos:start="199:20" pos:end="199:24"><name pos:start="199:20" pos:end="199:24">scope</name></expr></argument>, <argument pos:start="199:27" pos:end="199:66"><expr pos:start="199:27" pos:end="199:66"><call pos:start="199:27" pos:end="199:66"><name pos:start="199:27" pos:end="199:36">aml_method</name><argument_list pos:start="199:37" pos:end="199:66">(<argument pos:start="199:38" pos:end="199:43"><expr pos:start="199:38" pos:end="199:43"><literal type="string" pos:start="199:38" pos:end="199:43">"_L0A"</literal></expr></argument>, <argument pos:start="199:46" pos:end="199:46"><expr pos:start="199:46" pos:end="199:46"><literal type="number" pos:start="199:46" pos:end="199:46">0</literal></expr></argument>, <argument pos:start="199:49" pos:end="199:65"><expr pos:start="199:49" pos:end="199:65"><name pos:start="199:49" pos:end="199:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:68"><expr pos:start="201:9" pos:end="201:67"><call pos:start="201:9" pos:end="201:67"><name pos:start="201:9" pos:end="201:18">aml_append</name><argument_list pos:start="201:19" pos:end="201:67">(<argument pos:start="201:20" pos:end="201:24"><expr pos:start="201:20" pos:end="201:24"><name pos:start="201:20" pos:end="201:24">scope</name></expr></argument>, <argument pos:start="201:27" pos:end="201:66"><expr pos:start="201:27" pos:end="201:66"><call pos:start="201:27" pos:end="201:66"><name pos:start="201:27" pos:end="201:36">aml_method</name><argument_list pos:start="201:37" pos:end="201:66">(<argument pos:start="201:38" pos:end="201:43"><expr pos:start="201:38" pos:end="201:43"><literal type="string" pos:start="201:38" pos:end="201:43">"_L0B"</literal></expr></argument>, <argument pos:start="201:46" pos:end="201:46"><expr pos:start="201:46" pos:end="201:46"><literal type="number" pos:start="201:46" pos:end="201:46">0</literal></expr></argument>, <argument pos:start="201:49" pos:end="201:65"><expr pos:start="201:49" pos:end="201:65"><name pos:start="201:49" pos:end="201:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:68"><expr pos:start="203:9" pos:end="203:67"><call pos:start="203:9" pos:end="203:67"><name pos:start="203:9" pos:end="203:18">aml_append</name><argument_list pos:start="203:19" pos:end="203:67">(<argument pos:start="203:20" pos:end="203:24"><expr pos:start="203:20" pos:end="203:24"><name pos:start="203:20" pos:end="203:24">scope</name></expr></argument>, <argument pos:start="203:27" pos:end="203:66"><expr pos:start="203:27" pos:end="203:66"><call pos:start="203:27" pos:end="203:66"><name pos:start="203:27" pos:end="203:36">aml_method</name><argument_list pos:start="203:37" pos:end="203:66">(<argument pos:start="203:38" pos:end="203:43"><expr pos:start="203:38" pos:end="203:43"><literal type="string" pos:start="203:38" pos:end="203:43">"_L0C"</literal></expr></argument>, <argument pos:start="203:46" pos:end="203:46"><expr pos:start="203:46" pos:end="203:46"><literal type="number" pos:start="203:46" pos:end="203:46">0</literal></expr></argument>, <argument pos:start="203:49" pos:end="203:65"><expr pos:start="203:49" pos:end="203:65"><name pos:start="203:49" pos:end="203:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:68"><expr pos:start="205:9" pos:end="205:67"><call pos:start="205:9" pos:end="205:67"><name pos:start="205:9" pos:end="205:18">aml_append</name><argument_list pos:start="205:19" pos:end="205:67">(<argument pos:start="205:20" pos:end="205:24"><expr pos:start="205:20" pos:end="205:24"><name pos:start="205:20" pos:end="205:24">scope</name></expr></argument>, <argument pos:start="205:27" pos:end="205:66"><expr pos:start="205:27" pos:end="205:66"><call pos:start="205:27" pos:end="205:66"><name pos:start="205:27" pos:end="205:36">aml_method</name><argument_list pos:start="205:37" pos:end="205:66">(<argument pos:start="205:38" pos:end="205:43"><expr pos:start="205:38" pos:end="205:43"><literal type="string" pos:start="205:38" pos:end="205:43">"_L0D"</literal></expr></argument>, <argument pos:start="205:46" pos:end="205:46"><expr pos:start="205:46" pos:end="205:46"><literal type="number" pos:start="205:46" pos:end="205:46">0</literal></expr></argument>, <argument pos:start="205:49" pos:end="205:65"><expr pos:start="205:49" pos:end="205:65"><name pos:start="205:49" pos:end="205:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:68"><expr pos:start="207:9" pos:end="207:67"><call pos:start="207:9" pos:end="207:67"><name pos:start="207:9" pos:end="207:18">aml_append</name><argument_list pos:start="207:19" pos:end="207:67">(<argument pos:start="207:20" pos:end="207:24"><expr pos:start="207:20" pos:end="207:24"><name pos:start="207:20" pos:end="207:24">scope</name></expr></argument>, <argument pos:start="207:27" pos:end="207:66"><expr pos:start="207:27" pos:end="207:66"><call pos:start="207:27" pos:end="207:66"><name pos:start="207:27" pos:end="207:36">aml_method</name><argument_list pos:start="207:37" pos:end="207:66">(<argument pos:start="207:38" pos:end="207:43"><expr pos:start="207:38" pos:end="207:43"><literal type="string" pos:start="207:38" pos:end="207:43">"_L0E"</literal></expr></argument>, <argument pos:start="207:46" pos:end="207:46"><expr pos:start="207:46" pos:end="207:46"><literal type="number" pos:start="207:46" pos:end="207:46">0</literal></expr></argument>, <argument pos:start="207:49" pos:end="207:65"><expr pos:start="207:49" pos:end="207:65"><name pos:start="207:49" pos:end="207:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:68"><expr pos:start="209:9" pos:end="209:67"><call pos:start="209:9" pos:end="209:67"><name pos:start="209:9" pos:end="209:18">aml_append</name><argument_list pos:start="209:19" pos:end="209:67">(<argument pos:start="209:20" pos:end="209:24"><expr pos:start="209:20" pos:end="209:24"><name pos:start="209:20" pos:end="209:24">scope</name></expr></argument>, <argument pos:start="209:27" pos:end="209:66"><expr pos:start="209:27" pos:end="209:66"><call pos:start="209:27" pos:end="209:66"><name pos:start="209:27" pos:end="209:36">aml_method</name><argument_list pos:start="209:37" pos:end="209:66">(<argument pos:start="209:38" pos:end="209:43"><expr pos:start="209:38" pos:end="209:43"><literal type="string" pos:start="209:38" pos:end="209:43">"_L0F"</literal></expr></argument>, <argument pos:start="209:46" pos:end="209:46"><expr pos:start="209:46" pos:end="209:46"><literal type="number" pos:start="209:46" pos:end="209:46">0</literal></expr></argument>, <argument pos:start="209:49" pos:end="209:65"><expr pos:start="209:49" pos:end="209:65"><name pos:start="209:49" pos:end="209:65">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="213:5" pos:end="213:28"><expr pos:start="213:5" pos:end="213:27"><call pos:start="213:5" pos:end="213:27"><name pos:start="213:5" pos:end="213:14">aml_append</name><argument_list pos:start="213:15" pos:end="213:27">(<argument pos:start="213:16" pos:end="213:19"><expr pos:start="213:16" pos:end="213:19"><name pos:start="213:16" pos:end="213:19">dsdt</name></expr></argument>, <argument pos:start="213:22" pos:end="213:26"><expr pos:start="213:22" pos:end="213:26"><name pos:start="213:22" pos:end="213:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:35"><expr pos:start="217:5" pos:end="217:34"><name pos:start="217:5" pos:end="217:7">bus</name> <operator pos:start="217:9" pos:end="217:9">=</operator> <call pos:start="217:11" pos:end="217:29"><name pos:start="217:11" pos:end="217:20">PC_MACHINE</name><argument_list pos:start="217:21" pos:end="217:29">(<argument pos:start="217:22" pos:end="217:28"><expr pos:start="217:22" pos:end="217:28"><name pos:start="217:22" pos:end="217:28">machine</name></expr></argument>)</argument_list></call><operator pos:start="217:30" pos:end="217:31">-&gt;</operator><name pos:start="217:32" pos:end="217:34">bus</name></expr>;</expr_stmt>

    <if_stmt pos:start="219:5" pos:end="281:5"><if pos:start="219:5" pos:end="281:5">if <condition pos:start="219:8" pos:end="219:12">(<expr pos:start="219:9" pos:end="219:11"><name pos:start="219:9" pos:end="219:11">bus</name></expr>)</condition> <block pos:start="219:14" pos:end="281:5">{<block_content pos:start="221:9" pos:end="279:9">

        <macro pos:start="221:9" pos:end="221:48"><name pos:start="221:9" pos:end="221:21">QLIST_FOREACH</name><argument_list pos:start="221:22" pos:end="221:48">(<argument pos:start="221:23" pos:end="221:25">bus</argument>, <argument pos:start="221:28" pos:end="221:38">&amp;bus-&gt;child</argument>, <argument pos:start="221:41" pos:end="221:47">sibling</argument>)</argument_list></macro> <block pos:start="221:50" pos:end="279:9">{<block_content pos:start="223:13" pos:end="277:36">

            <decl_stmt pos:start="223:13" pos:end="223:47"><decl pos:start="223:13" pos:end="223:46"><type pos:start="223:13" pos:end="223:19"><name pos:start="223:13" pos:end="223:19">uint8_t</name></type> <name pos:start="223:21" pos:end="223:27">bus_num</name> <init pos:start="223:29" pos:end="223:46">= <expr pos:start="223:31" pos:end="223:46"><call pos:start="223:31" pos:end="223:46"><name pos:start="223:31" pos:end="223:41">pci_bus_num</name><argument_list pos:start="223:42" pos:end="223:46">(<argument pos:start="223:43" pos:end="223:45"><expr pos:start="223:43" pos:end="223:45"><name pos:start="223:43" pos:end="223:45">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="225:13" pos:end="225:55"><decl pos:start="225:13" pos:end="225:54"><type pos:start="225:13" pos:end="225:19"><name pos:start="225:13" pos:end="225:19">uint8_t</name></type> <name pos:start="225:21" pos:end="225:29">numa_node</name> <init pos:start="225:31" pos:end="225:54">= <expr pos:start="225:33" pos:end="225:54"><call pos:start="225:33" pos:end="225:54"><name pos:start="225:33" pos:end="225:49">pci_bus_numa_node</name><argument_list pos:start="225:50" pos:end="225:54">(<argument pos:start="225:51" pos:end="225:53"><expr pos:start="225:51" pos:end="225:53"><name pos:start="225:51" pos:end="225:53">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="229:13" pos:end="229:51">/* look only for expander root buses */</comment>

            <if_stmt pos:start="231:13" pos:end="235:13"><if pos:start="231:13" pos:end="235:13">if <condition pos:start="231:16" pos:end="231:38">(<expr pos:start="231:17" pos:end="231:37"><operator pos:start="231:17" pos:end="231:17">!</operator><call pos:start="231:18" pos:end="231:37"><name pos:start="231:18" pos:end="231:32">pci_bus_is_root</name><argument_list pos:start="231:33" pos:end="231:37">(<argument pos:start="231:34" pos:end="231:36"><expr pos:start="231:34" pos:end="231:36"><name pos:start="231:34" pos:end="231:36">bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="231:40" pos:end="235:13">{<block_content pos:start="233:17" pos:end="233:25">

                <continue pos:start="233:17" pos:end="233:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="239:13" pos:end="243:13"><if pos:start="239:13" pos:end="243:13">if <condition pos:start="239:16" pos:end="239:41">(<expr pos:start="239:17" pos:end="239:40"><name pos:start="239:17" pos:end="239:23">bus_num</name> <operator pos:start="239:25" pos:end="239:25">&lt;</operator> <name pos:start="239:27" pos:end="239:40">root_bus_limit</name></expr>)</condition> <block pos:start="239:43" pos:end="243:13">{<block_content pos:start="241:17" pos:end="241:45">

                <expr_stmt pos:start="241:17" pos:end="241:45"><expr pos:start="241:17" pos:end="241:44"><name pos:start="241:17" pos:end="241:30">root_bus_limit</name> <operator pos:start="241:32" pos:end="241:32">=</operator> <name pos:start="241:34" pos:end="241:40">bus_num</name> <operator pos:start="241:42" pos:end="241:42">-</operator> <literal type="number" pos:start="241:44" pos:end="241:44">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="247:13" pos:end="247:39"><expr pos:start="247:13" pos:end="247:38"><name pos:start="247:13" pos:end="247:17">scope</name> <operator pos:start="247:19" pos:end="247:19">=</operator> <call pos:start="247:21" pos:end="247:38"><name pos:start="247:21" pos:end="247:29">aml_scope</name><argument_list pos:start="247:30" pos:end="247:38">(<argument pos:start="247:31" pos:end="247:37"><expr pos:start="247:31" pos:end="247:37"><literal type="string" pos:start="247:31" pos:end="247:37">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:49"><expr pos:start="249:13" pos:end="249:48"><name pos:start="249:13" pos:end="249:15">dev</name> <operator pos:start="249:17" pos:end="249:17">=</operator> <call pos:start="249:19" pos:end="249:48"><name pos:start="249:19" pos:end="249:28">aml_device</name><argument_list pos:start="249:29" pos:end="249:48">(<argument pos:start="249:30" pos:end="249:38"><expr pos:start="249:30" pos:end="249:38"><literal type="string" pos:start="249:30" pos:end="249:38">"PC%.02X"</literal></expr></argument>, <argument pos:start="249:41" pos:end="249:47"><expr pos:start="249:41" pos:end="249:47"><name pos:start="249:41" pos:end="249:47">bus_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:69"><expr pos:start="251:13" pos:end="251:68"><call pos:start="251:13" pos:end="251:68"><name pos:start="251:13" pos:end="251:22">aml_append</name><argument_list pos:start="251:23" pos:end="251:68">(<argument pos:start="251:24" pos:end="251:26"><expr pos:start="251:24" pos:end="251:26"><name pos:start="251:24" pos:end="251:26">dev</name></expr></argument>, <argument pos:start="251:29" pos:end="251:67"><expr pos:start="251:29" pos:end="251:67"><call pos:start="251:29" pos:end="251:67"><name pos:start="251:29" pos:end="251:41">aml_name_decl</name><argument_list pos:start="251:42" pos:end="251:67">(<argument pos:start="251:43" pos:end="251:48"><expr pos:start="251:43" pos:end="251:48"><literal type="string" pos:start="251:43" pos:end="251:48">"_UID"</literal></expr></argument>, <argument pos:start="251:51" pos:end="251:66"><expr pos:start="251:51" pos:end="251:66"><call pos:start="251:51" pos:end="251:66"><name pos:start="251:51" pos:end="251:57">aml_int</name><argument_list pos:start="251:58" pos:end="251:66">(<argument pos:start="251:59" pos:end="251:65"><expr pos:start="251:59" pos:end="251:65"><name pos:start="251:59" pos:end="251:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:74"><expr pos:start="253:13" pos:end="253:73"><call pos:start="253:13" pos:end="253:73"><name pos:start="253:13" pos:end="253:22">aml_append</name><argument_list pos:start="253:23" pos:end="253:73">(<argument pos:start="253:24" pos:end="253:26"><expr pos:start="253:24" pos:end="253:26"><name pos:start="253:24" pos:end="253:26">dev</name></expr></argument>, <argument pos:start="253:29" pos:end="253:72"><expr pos:start="253:29" pos:end="253:72"><call pos:start="253:29" pos:end="253:72"><name pos:start="253:29" pos:end="253:41">aml_name_decl</name><argument_list pos:start="253:42" pos:end="253:72">(<argument pos:start="253:43" pos:end="253:48"><expr pos:start="253:43" pos:end="253:48"><literal type="string" pos:start="253:43" pos:end="253:48">"_HID"</literal></expr></argument>, <argument pos:start="253:51" pos:end="253:71"><expr pos:start="253:51" pos:end="253:71"><call pos:start="253:51" pos:end="253:71"><name pos:start="253:51" pos:end="253:60">aml_eisaid</name><argument_list pos:start="253:61" pos:end="253:71">(<argument pos:start="253:62" pos:end="253:70"><expr pos:start="253:62" pos:end="253:70"><literal type="string" pos:start="253:62" pos:end="253:70">"PNP0A03"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:69"><expr pos:start="255:13" pos:end="255:68"><call pos:start="255:13" pos:end="255:68"><name pos:start="255:13" pos:end="255:22">aml_append</name><argument_list pos:start="255:23" pos:end="255:68">(<argument pos:start="255:24" pos:end="255:26"><expr pos:start="255:24" pos:end="255:26"><name pos:start="255:24" pos:end="255:26">dev</name></expr></argument>, <argument pos:start="255:29" pos:end="255:67"><expr pos:start="255:29" pos:end="255:67"><call pos:start="255:29" pos:end="255:67"><name pos:start="255:29" pos:end="255:41">aml_name_decl</name><argument_list pos:start="255:42" pos:end="255:67">(<argument pos:start="255:43" pos:end="255:48"><expr pos:start="255:43" pos:end="255:48"><literal type="string" pos:start="255:43" pos:end="255:48">"_BBN"</literal></expr></argument>, <argument pos:start="255:51" pos:end="255:66"><expr pos:start="255:51" pos:end="255:66"><call pos:start="255:51" pos:end="255:66"><name pos:start="255:51" pos:end="255:57">aml_int</name><argument_list pos:start="255:58" pos:end="255:66">(<argument pos:start="255:59" pos:end="255:65"><expr pos:start="255:59" pos:end="255:65"><name pos:start="255:59" pos:end="255:65">bus_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="259:13" pos:end="263:13"><if pos:start="259:13" pos:end="263:13">if <condition pos:start="259:16" pos:end="259:50">(<expr pos:start="259:17" pos:end="259:49"><name pos:start="259:17" pos:end="259:25">numa_node</name> <operator pos:start="259:27" pos:end="259:28">!=</operator> <name pos:start="259:30" pos:end="259:49">NUMA_NODE_UNASSIGNED</name></expr>)</condition> <block pos:start="259:52" pos:end="263:13">{<block_content pos:start="261:17" pos:end="261:75">

                <expr_stmt pos:start="261:17" pos:end="261:75"><expr pos:start="261:17" pos:end="261:74"><call pos:start="261:17" pos:end="261:74"><name pos:start="261:17" pos:end="261:26">aml_append</name><argument_list pos:start="261:27" pos:end="261:74">(<argument pos:start="261:28" pos:end="261:30"><expr pos:start="261:28" pos:end="261:30"><name pos:start="261:28" pos:end="261:30">dev</name></expr></argument>, <argument pos:start="261:33" pos:end="261:73"><expr pos:start="261:33" pos:end="261:73"><call pos:start="261:33" pos:end="261:73"><name pos:start="261:33" pos:end="261:45">aml_name_decl</name><argument_list pos:start="261:46" pos:end="261:73">(<argument pos:start="261:47" pos:end="261:52"><expr pos:start="261:47" pos:end="261:52"><literal type="string" pos:start="261:47" pos:end="261:52">"_PXM"</literal></expr></argument>, <argument pos:start="261:55" pos:end="261:72"><expr pos:start="261:55" pos:end="261:72"><call pos:start="261:55" pos:end="261:72"><name pos:start="261:55" pos:end="261:61">aml_int</name><argument_list pos:start="261:62" pos:end="261:72">(<argument pos:start="261:63" pos:end="261:71"><expr pos:start="261:63" pos:end="261:71"><name pos:start="261:63" pos:end="261:71">numa_node</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="267:13" pos:end="267:46"><expr pos:start="267:13" pos:end="267:45"><call pos:start="267:13" pos:end="267:45"><name pos:start="267:13" pos:end="267:22">aml_append</name><argument_list pos:start="267:23" pos:end="267:45">(<argument pos:start="267:24" pos:end="267:26"><expr pos:start="267:24" pos:end="267:26"><name pos:start="267:24" pos:end="267:26">dev</name></expr></argument>, <argument pos:start="267:29" pos:end="267:44"><expr pos:start="267:29" pos:end="267:44"><call pos:start="267:29" pos:end="267:44"><name pos:start="267:29" pos:end="267:37">build_prt</name><argument_list pos:start="267:38" pos:end="267:44">(<argument pos:start="267:39" pos:end="267:43"><expr pos:start="267:39" pos:end="267:43"><name pos:start="267:39" pos:end="267:43">false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="269:13" pos:end="271:51"><expr pos:start="269:13" pos:end="271:50"><name pos:start="269:13" pos:end="269:15">crs</name> <operator pos:start="269:17" pos:end="269:17">=</operator> <call pos:start="269:19" pos:end="271:50"><name pos:start="269:19" pos:end="269:27">build_crs</name><argument_list pos:start="269:28" pos:end="271:50">(<argument pos:start="269:29" pos:end="269:61"><expr pos:start="269:29" pos:end="269:61"><call pos:start="269:29" pos:end="269:61"><name pos:start="269:29" pos:end="269:43">PCI_HOST_BRIDGE</name><argument_list pos:start="269:44" pos:end="269:61">(<argument pos:start="269:45" pos:end="269:60"><expr pos:start="269:45" pos:end="269:60"><call pos:start="269:45" pos:end="269:52"><name pos:start="269:45" pos:end="269:47">BUS</name><argument_list pos:start="269:48" pos:end="269:52">(<argument pos:start="269:49" pos:end="269:51"><expr pos:start="269:49" pos:end="269:51"><name pos:start="269:49" pos:end="269:51">bus</name></expr></argument>)</argument_list></call><operator pos:start="269:53" pos:end="269:54">-&gt;</operator><name pos:start="269:55" pos:end="269:60">parent</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="271:29" pos:end="271:37"><expr pos:start="271:29" pos:end="271:37"><name pos:start="271:29" pos:end="271:37">io_ranges</name></expr></argument>, <argument pos:start="271:40" pos:end="271:49"><expr pos:start="271:40" pos:end="271:49"><name pos:start="271:40" pos:end="271:49">mem_ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:56"><expr pos:start="273:13" pos:end="273:55"><call pos:start="273:13" pos:end="273:55"><name pos:start="273:13" pos:end="273:22">aml_append</name><argument_list pos:start="273:23" pos:end="273:55">(<argument pos:start="273:24" pos:end="273:26"><expr pos:start="273:24" pos:end="273:26"><name pos:start="273:24" pos:end="273:26">dev</name></expr></argument>, <argument pos:start="273:29" pos:end="273:54"><expr pos:start="273:29" pos:end="273:54"><call pos:start="273:29" pos:end="273:54"><name pos:start="273:29" pos:end="273:41">aml_name_decl</name><argument_list pos:start="273:42" pos:end="273:54">(<argument pos:start="273:43" pos:end="273:48"><expr pos:start="273:43" pos:end="273:48"><literal type="string" pos:start="273:43" pos:end="273:48">"_CRS"</literal></expr></argument>, <argument pos:start="273:51" pos:end="273:53"><expr pos:start="273:51" pos:end="273:53"><name pos:start="273:51" pos:end="273:53">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:35"><expr pos:start="275:13" pos:end="275:34"><call pos:start="275:13" pos:end="275:34"><name pos:start="275:13" pos:end="275:22">aml_append</name><argument_list pos:start="275:23" pos:end="275:34">(<argument pos:start="275:24" pos:end="275:28"><expr pos:start="275:24" pos:end="275:28"><name pos:start="275:24" pos:end="275:28">scope</name></expr></argument>, <argument pos:start="275:31" pos:end="275:33"><expr pos:start="275:31" pos:end="275:33"><name pos:start="275:31" pos:end="275:33">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:36"><expr pos:start="277:13" pos:end="277:35"><call pos:start="277:13" pos:end="277:35"><name pos:start="277:13" pos:end="277:22">aml_append</name><argument_list pos:start="277:23" pos:end="277:35">(<argument pos:start="277:24" pos:end="277:27"><expr pos:start="277:24" pos:end="277:27"><name pos:start="277:24" pos:end="277:27">dsdt</name></expr></argument>, <argument pos:start="277:30" pos:end="277:34"><expr pos:start="277:30" pos:end="277:34"><name pos:start="277:30" pos:end="277:34">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="285:5" pos:end="285:36"><expr pos:start="285:5" pos:end="285:35"><name pos:start="285:5" pos:end="285:9">scope</name> <operator pos:start="285:11" pos:end="285:11">=</operator> <call pos:start="285:13" pos:end="285:35"><name pos:start="285:13" pos:end="285:21">aml_scope</name><argument_list pos:start="285:22" pos:end="285:35">(<argument pos:start="285:23" pos:end="285:34"><expr pos:start="285:23" pos:end="285:34"><literal type="string" pos:start="285:23" pos:end="285:34">"\\_SB.PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="287:5" pos:end="287:25">/* build PCI0._CRS */</comment>

    <expr_stmt pos:start="289:5" pos:end="289:34"><expr pos:start="289:5" pos:end="289:33"><name pos:start="289:5" pos:end="289:7">crs</name> <operator pos:start="289:9" pos:end="289:9">=</operator> <call pos:start="289:11" pos:end="289:33"><name pos:start="289:11" pos:end="289:31">aml_resource_template</name><argument_list pos:start="289:32" pos:end="289:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="297:57"><expr pos:start="291:5" pos:end="297:56"><call pos:start="291:5" pos:end="297:56"><name pos:start="291:5" pos:end="291:14">aml_append</name><argument_list pos:start="291:15" pos:end="297:56">(<argument pos:start="291:16" pos:end="291:18"><expr pos:start="291:16" pos:end="291:18"><name pos:start="291:16" pos:end="291:18">crs</name></expr></argument>,

        <argument pos:start="293:9" pos:end="297:55"><expr pos:start="293:9" pos:end="297:55"><call pos:start="293:9" pos:end="297:55"><name pos:start="293:9" pos:end="293:27">aml_word_bus_number</name><argument_list pos:start="293:28" pos:end="297:55">(<argument pos:start="293:29" pos:end="293:41"><expr pos:start="293:29" pos:end="293:41"><name pos:start="293:29" pos:end="293:41">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="293:44" pos:end="293:56"><expr pos:start="293:44" pos:end="293:56"><name pos:start="293:44" pos:end="293:56">AML_MAX_FIXED</name></expr></argument>, <argument pos:start="293:59" pos:end="293:72"><expr pos:start="293:59" pos:end="293:72"><name pos:start="293:59" pos:end="293:72">AML_POS_DECODE</name></expr></argument>,

                            <argument pos:start="295:29" pos:end="295:34"><expr pos:start="295:29" pos:end="295:34"><literal type="number" pos:start="295:29" pos:end="295:34">0x0000</literal></expr></argument>, <argument pos:start="295:37" pos:end="295:39"><expr pos:start="295:37" pos:end="295:39"><literal type="number" pos:start="295:37" pos:end="295:39">0x0</literal></expr></argument>, <argument pos:start="295:42" pos:end="295:55"><expr pos:start="295:42" pos:end="295:55"><name pos:start="295:42" pos:end="295:55">root_bus_limit</name></expr></argument>,

                            <argument pos:start="297:29" pos:end="297:34"><expr pos:start="297:29" pos:end="297:34"><literal type="number" pos:start="297:29" pos:end="297:34">0x0000</literal></expr></argument>, <argument pos:start="297:37" pos:end="297:54"><expr pos:start="297:37" pos:end="297:54"><name pos:start="297:37" pos:end="297:50">root_bus_limit</name> <operator pos:start="297:52" pos:end="297:52">+</operator> <literal type="number" pos:start="297:54" pos:end="297:54">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:70"><expr pos:start="299:5" pos:end="299:69"><call pos:start="299:5" pos:end="299:69"><name pos:start="299:5" pos:end="299:14">aml_append</name><argument_list pos:start="299:15" pos:end="299:69">(<argument pos:start="299:16" pos:end="299:18"><expr pos:start="299:16" pos:end="299:18"><name pos:start="299:16" pos:end="299:18">crs</name></expr></argument>, <argument pos:start="299:21" pos:end="299:68"><expr pos:start="299:21" pos:end="299:68"><call pos:start="299:21" pos:end="299:68"><name pos:start="299:21" pos:end="299:26">aml_io</name><argument_list pos:start="299:27" pos:end="299:68">(<argument pos:start="299:28" pos:end="299:39"><expr pos:start="299:28" pos:end="299:39"><name pos:start="299:28" pos:end="299:39">AML_DECODE16</name></expr></argument>, <argument pos:start="299:42" pos:end="299:47"><expr pos:start="299:42" pos:end="299:47"><literal type="number" pos:start="299:42" pos:end="299:47">0x0CF8</literal></expr></argument>, <argument pos:start="299:50" pos:end="299:55"><expr pos:start="299:50" pos:end="299:55"><literal type="number" pos:start="299:50" pos:end="299:55">0x0CF8</literal></expr></argument>, <argument pos:start="299:58" pos:end="299:61"><expr pos:start="299:58" pos:end="299:61"><literal type="number" pos:start="299:58" pos:end="299:61">0x01</literal></expr></argument>, <argument pos:start="299:64" pos:end="299:67"><expr pos:start="299:64" pos:end="299:67"><literal type="number" pos:start="299:64" pos:end="299:67">0x08</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="303:5" pos:end="309:61"><expr pos:start="303:5" pos:end="309:60"><call pos:start="303:5" pos:end="309:60"><name pos:start="303:5" pos:end="303:14">aml_append</name><argument_list pos:start="303:15" pos:end="309:60">(<argument pos:start="303:16" pos:end="303:18"><expr pos:start="303:16" pos:end="303:18"><name pos:start="303:16" pos:end="303:18">crs</name></expr></argument>,

        <argument pos:start="305:9" pos:end="309:59"><expr pos:start="305:9" pos:end="309:59"><call pos:start="305:9" pos:end="309:59"><name pos:start="305:9" pos:end="305:19">aml_word_io</name><argument_list pos:start="305:20" pos:end="309:59">(<argument pos:start="305:21" pos:end="305:33"><expr pos:start="305:21" pos:end="305:33"><name pos:start="305:21" pos:end="305:33">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="305:36" pos:end="305:48"><expr pos:start="305:36" pos:end="305:48"><name pos:start="305:36" pos:end="305:48">AML_MAX_FIXED</name></expr></argument>,

                    <argument pos:start="307:21" pos:end="307:34"><expr pos:start="307:21" pos:end="307:34"><name pos:start="307:21" pos:end="307:34">AML_POS_DECODE</name></expr></argument>, <argument pos:start="307:37" pos:end="307:52"><expr pos:start="307:37" pos:end="307:52"><name pos:start="307:37" pos:end="307:52">AML_ENTIRE_RANGE</name></expr></argument>,

                    <argument pos:start="309:21" pos:end="309:26"><expr pos:start="309:21" pos:end="309:26"><literal type="number" pos:start="309:21" pos:end="309:26">0x0000</literal></expr></argument>, <argument pos:start="309:29" pos:end="309:34"><expr pos:start="309:29" pos:end="309:34"><literal type="number" pos:start="309:29" pos:end="309:34">0x0000</literal></expr></argument>, <argument pos:start="309:37" pos:end="309:42"><expr pos:start="309:37" pos:end="309:42"><literal type="number" pos:start="309:37" pos:end="309:42">0x0CF7</literal></expr></argument>, <argument pos:start="309:45" pos:end="309:50"><expr pos:start="309:45" pos:end="309:50"><literal type="number" pos:start="309:45" pos:end="309:50">0x0000</literal></expr></argument>, <argument pos:start="309:53" pos:end="309:58"><expr pos:start="309:53" pos:end="309:58"><literal type="number" pos:start="309:53" pos:end="309:58">0x0CF8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="313:5" pos:end="313:60"><expr pos:start="313:5" pos:end="313:59"><call pos:start="313:5" pos:end="313:59"><name pos:start="313:5" pos:end="313:32">crs_replace_with_free_ranges</name><argument_list pos:start="313:33" pos:end="313:59">(<argument pos:start="313:34" pos:end="313:42"><expr pos:start="313:34" pos:end="313:42"><name pos:start="313:34" pos:end="313:42">io_ranges</name></expr></argument>, <argument pos:start="313:45" pos:end="313:50"><expr pos:start="313:45" pos:end="313:50"><literal type="number" pos:start="313:45" pos:end="313:50">0x0D00</literal></expr></argument>, <argument pos:start="313:53" pos:end="313:58"><expr pos:start="313:53" pos:end="313:58"><literal type="number" pos:start="313:53" pos:end="313:58">0xFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="315:5" pos:end="329:5">for <control pos:start="315:9" pos:end="315:40">(<init pos:start="315:10" pos:end="315:15"><expr pos:start="315:10" pos:end="315:14"><name pos:start="315:10" pos:end="315:10">i</name> <operator pos:start="315:12" pos:end="315:12">=</operator> <literal type="number" pos:start="315:14" pos:end="315:14">0</literal></expr>;</init> <condition pos:start="315:17" pos:end="315:35"><expr pos:start="315:17" pos:end="315:34"><name pos:start="315:17" pos:end="315:17">i</name> <operator pos:start="315:19" pos:end="315:19">&lt;</operator> <name pos:start="315:21" pos:end="315:34"><name pos:start="315:21" pos:end="315:29">io_ranges</name><operator pos:start="315:30" pos:end="315:31">-&gt;</operator><name pos:start="315:32" pos:end="315:34">len</name></name></expr>;</condition> <incr pos:start="315:37" pos:end="315:39"><expr pos:start="315:37" pos:end="315:39"><name pos:start="315:37" pos:end="315:37">i</name><operator pos:start="315:38" pos:end="315:39">++</operator></expr></incr>)</control> <block pos:start="315:42" pos:end="329:5">{<block_content pos:start="317:9" pos:end="327:65">

        <expr_stmt pos:start="317:9" pos:end="317:48"><expr pos:start="317:9" pos:end="317:47"><name pos:start="317:9" pos:end="317:13">entry</name> <operator pos:start="317:15" pos:end="317:15">=</operator> <call pos:start="317:17" pos:end="317:47"><name pos:start="317:17" pos:end="317:33">g_ptr_array_index</name><argument_list pos:start="317:34" pos:end="317:47">(<argument pos:start="317:35" pos:end="317:43"><expr pos:start="317:35" pos:end="317:43"><name pos:start="317:35" pos:end="317:43">io_ranges</name></expr></argument>, <argument pos:start="317:46" pos:end="317:46"><expr pos:start="317:46" pos:end="317:46"><name pos:start="317:46" pos:end="317:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="327:65"><expr pos:start="319:9" pos:end="327:64"><call pos:start="319:9" pos:end="327:64"><name pos:start="319:9" pos:end="319:18">aml_append</name><argument_list pos:start="319:19" pos:end="327:64">(<argument pos:start="319:20" pos:end="319:22"><expr pos:start="319:20" pos:end="319:22"><name pos:start="319:20" pos:end="319:22">crs</name></expr></argument>,

            <argument pos:start="321:13" pos:end="327:63"><expr pos:start="321:13" pos:end="327:63"><call pos:start="321:13" pos:end="327:63"><name pos:start="321:13" pos:end="321:23">aml_word_io</name><argument_list pos:start="321:24" pos:end="327:63">(<argument pos:start="321:25" pos:end="321:37"><expr pos:start="321:25" pos:end="321:37"><name pos:start="321:25" pos:end="321:37">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="321:40" pos:end="321:52"><expr pos:start="321:40" pos:end="321:52"><name pos:start="321:40" pos:end="321:52">AML_MAX_FIXED</name></expr></argument>,

                        <argument pos:start="323:25" pos:end="323:38"><expr pos:start="323:25" pos:end="323:38"><name pos:start="323:25" pos:end="323:38">AML_POS_DECODE</name></expr></argument>, <argument pos:start="323:41" pos:end="323:56"><expr pos:start="323:41" pos:end="323:56"><name pos:start="323:41" pos:end="323:56">AML_ENTIRE_RANGE</name></expr></argument>,

                        <argument pos:start="325:25" pos:end="325:30"><expr pos:start="325:25" pos:end="325:30"><literal type="number" pos:start="325:25" pos:end="325:30">0x0000</literal></expr></argument>, <argument pos:start="325:33" pos:end="325:43"><expr pos:start="325:33" pos:end="325:43"><name pos:start="325:33" pos:end="325:43"><name pos:start="325:33" pos:end="325:37">entry</name><operator pos:start="325:38" pos:end="325:39">-&gt;</operator><name pos:start="325:40" pos:end="325:43">base</name></name></expr></argument>, <argument pos:start="325:46" pos:end="325:57"><expr pos:start="325:46" pos:end="325:57"><name pos:start="325:46" pos:end="325:57"><name pos:start="325:46" pos:end="325:50">entry</name><operator pos:start="325:51" pos:end="325:52">-&gt;</operator><name pos:start="325:53" pos:end="325:57">limit</name></name></expr></argument>,

                        <argument pos:start="327:25" pos:end="327:30"><expr pos:start="327:25" pos:end="327:30"><literal type="number" pos:start="327:25" pos:end="327:30">0x0000</literal></expr></argument>, <argument pos:start="327:33" pos:end="327:62"><expr pos:start="327:33" pos:end="327:62"><name pos:start="327:33" pos:end="327:44"><name pos:start="327:33" pos:end="327:37">entry</name><operator pos:start="327:38" pos:end="327:39">-&gt;</operator><name pos:start="327:40" pos:end="327:44">limit</name></name> <operator pos:start="327:46" pos:end="327:46">-</operator> <name pos:start="327:48" pos:end="327:58"><name pos:start="327:48" pos:end="327:52">entry</name><operator pos:start="327:53" pos:end="327:54">-&gt;</operator><name pos:start="327:55" pos:end="327:58">base</name></name> <operator pos:start="327:60" pos:end="327:60">+</operator> <literal type="number" pos:start="327:62" pos:end="327:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="333:5" pos:end="339:68"><expr pos:start="333:5" pos:end="339:67"><call pos:start="333:5" pos:end="339:67"><name pos:start="333:5" pos:end="333:14">aml_append</name><argument_list pos:start="333:15" pos:end="339:67">(<argument pos:start="333:16" pos:end="333:18"><expr pos:start="333:16" pos:end="333:18"><name pos:start="333:16" pos:end="333:18">crs</name></expr></argument>,

        <argument pos:start="335:9" pos:end="339:66"><expr pos:start="335:9" pos:end="339:66"><call pos:start="335:9" pos:end="339:66"><name pos:start="335:9" pos:end="335:24">aml_dword_memory</name><argument_list pos:start="335:25" pos:end="339:66">(<argument pos:start="335:26" pos:end="335:39"><expr pos:start="335:26" pos:end="335:39"><name pos:start="335:26" pos:end="335:39">AML_POS_DECODE</name></expr></argument>, <argument pos:start="335:42" pos:end="335:54"><expr pos:start="335:42" pos:end="335:54"><name pos:start="335:42" pos:end="335:54">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="335:57" pos:end="335:69"><expr pos:start="335:57" pos:end="335:69"><name pos:start="335:57" pos:end="335:69">AML_MAX_FIXED</name></expr></argument>,

                         <argument pos:start="337:26" pos:end="337:38"><expr pos:start="337:26" pos:end="337:38"><name pos:start="337:26" pos:end="337:38">AML_CACHEABLE</name></expr></argument>, <argument pos:start="337:41" pos:end="337:54"><expr pos:start="337:41" pos:end="337:54"><name pos:start="337:41" pos:end="337:54">AML_READ_WRITE</name></expr></argument>,

                         <argument pos:start="339:26" pos:end="339:26"><expr pos:start="339:26" pos:end="339:26"><literal type="number" pos:start="339:26" pos:end="339:26">0</literal></expr></argument>, <argument pos:start="339:29" pos:end="339:38"><expr pos:start="339:29" pos:end="339:38"><literal type="number" pos:start="339:29" pos:end="339:38">0x000A0000</literal></expr></argument>, <argument pos:start="339:41" pos:end="339:50"><expr pos:start="339:41" pos:end="339:50"><literal type="number" pos:start="339:41" pos:end="339:50">0x000BFFFF</literal></expr></argument>, <argument pos:start="339:53" pos:end="339:53"><expr pos:start="339:53" pos:end="339:53"><literal type="number" pos:start="339:53" pos:end="339:53">0</literal></expr></argument>, <argument pos:start="339:56" pos:end="339:65"><expr pos:start="339:56" pos:end="339:65"><literal type="number" pos:start="339:56" pos:end="339:65">0x00020000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:79"><expr pos:start="343:5" pos:end="343:78"><call pos:start="343:5" pos:end="343:78"><name pos:start="343:5" pos:end="343:32">crs_replace_with_free_ranges</name><argument_list pos:start="343:33" pos:end="343:78">(<argument pos:start="343:34" pos:end="343:43"><expr pos:start="343:34" pos:end="343:43"><name pos:start="343:34" pos:end="343:43">mem_ranges</name></expr></argument>, <argument pos:start="343:46" pos:end="343:59"><expr pos:start="343:46" pos:end="343:59"><name pos:start="343:46" pos:end="343:59"><name pos:start="343:46" pos:end="343:48">pci</name><operator pos:start="343:49" pos:end="343:50">-&gt;</operator><name pos:start="343:51" pos:end="343:53">w32</name><operator pos:start="343:54" pos:end="343:54">.</operator><name pos:start="343:55" pos:end="343:59">begin</name></name></expr></argument>, <argument pos:start="343:62" pos:end="343:77"><expr pos:start="343:62" pos:end="343:77"><name pos:start="343:62" pos:end="343:73"><name pos:start="343:62" pos:end="343:64">pci</name><operator pos:start="343:65" pos:end="343:66">-&gt;</operator><name pos:start="343:67" pos:end="343:69">w32</name><operator pos:start="343:70" pos:end="343:70">.</operator><name pos:start="343:71" pos:end="343:73">end</name></name> <operator pos:start="343:75" pos:end="343:75">-</operator> <literal type="number" pos:start="343:77" pos:end="343:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="345:5" pos:end="359:5">for <control pos:start="345:9" pos:end="345:41">(<init pos:start="345:10" pos:end="345:15"><expr pos:start="345:10" pos:end="345:14"><name pos:start="345:10" pos:end="345:10">i</name> <operator pos:start="345:12" pos:end="345:12">=</operator> <literal type="number" pos:start="345:14" pos:end="345:14">0</literal></expr>;</init> <condition pos:start="345:17" pos:end="345:36"><expr pos:start="345:17" pos:end="345:35"><name pos:start="345:17" pos:end="345:17">i</name> <operator pos:start="345:19" pos:end="345:19">&lt;</operator> <name pos:start="345:21" pos:end="345:35"><name pos:start="345:21" pos:end="345:30">mem_ranges</name><operator pos:start="345:31" pos:end="345:32">-&gt;</operator><name pos:start="345:33" pos:end="345:35">len</name></name></expr>;</condition> <incr pos:start="345:38" pos:end="345:40"><expr pos:start="345:38" pos:end="345:40"><name pos:start="345:38" pos:end="345:38">i</name><operator pos:start="345:39" pos:end="345:40">++</operator></expr></incr>)</control> <block pos:start="345:43" pos:end="359:5">{<block_content pos:start="347:9" pos:end="357:65">

        <expr_stmt pos:start="347:9" pos:end="347:49"><expr pos:start="347:9" pos:end="347:48"><name pos:start="347:9" pos:end="347:13">entry</name> <operator pos:start="347:15" pos:end="347:15">=</operator> <call pos:start="347:17" pos:end="347:48"><name pos:start="347:17" pos:end="347:33">g_ptr_array_index</name><argument_list pos:start="347:34" pos:end="347:48">(<argument pos:start="347:35" pos:end="347:44"><expr pos:start="347:35" pos:end="347:44"><name pos:start="347:35" pos:end="347:44">mem_ranges</name></expr></argument>, <argument pos:start="347:47" pos:end="347:47"><expr pos:start="347:47" pos:end="347:47"><name pos:start="347:47" pos:end="347:47">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="357:65"><expr pos:start="349:9" pos:end="357:64"><call pos:start="349:9" pos:end="357:64"><name pos:start="349:9" pos:end="349:18">aml_append</name><argument_list pos:start="349:19" pos:end="357:64">(<argument pos:start="349:20" pos:end="349:22"><expr pos:start="349:20" pos:end="349:22"><name pos:start="349:20" pos:end="349:22">crs</name></expr></argument>,

            <argument pos:start="351:13" pos:end="357:63"><expr pos:start="351:13" pos:end="357:63"><call pos:start="351:13" pos:end="357:63"><name pos:start="351:13" pos:end="351:28">aml_dword_memory</name><argument_list pos:start="351:29" pos:end="357:63">(<argument pos:start="351:30" pos:end="351:43"><expr pos:start="351:30" pos:end="351:43"><name pos:start="351:30" pos:end="351:43">AML_POS_DECODE</name></expr></argument>, <argument pos:start="351:46" pos:end="351:58"><expr pos:start="351:46" pos:end="351:58"><name pos:start="351:46" pos:end="351:58">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="351:61" pos:end="351:73"><expr pos:start="351:61" pos:end="351:73"><name pos:start="351:61" pos:end="351:73">AML_MAX_FIXED</name></expr></argument>,

                             <argument pos:start="353:30" pos:end="353:46"><expr pos:start="353:30" pos:end="353:46"><name pos:start="353:30" pos:end="353:46">AML_NON_CACHEABLE</name></expr></argument>, <argument pos:start="353:49" pos:end="353:62"><expr pos:start="353:49" pos:end="353:62"><name pos:start="353:49" pos:end="353:62">AML_READ_WRITE</name></expr></argument>,

                             <argument pos:start="355:30" pos:end="355:30"><expr pos:start="355:30" pos:end="355:30"><literal type="number" pos:start="355:30" pos:end="355:30">0</literal></expr></argument>, <argument pos:start="355:33" pos:end="355:43"><expr pos:start="355:33" pos:end="355:43"><name pos:start="355:33" pos:end="355:43"><name pos:start="355:33" pos:end="355:37">entry</name><operator pos:start="355:38" pos:end="355:39">-&gt;</operator><name pos:start="355:40" pos:end="355:43">base</name></name></expr></argument>, <argument pos:start="355:46" pos:end="355:57"><expr pos:start="355:46" pos:end="355:57"><name pos:start="355:46" pos:end="355:57"><name pos:start="355:46" pos:end="355:50">entry</name><operator pos:start="355:51" pos:end="355:52">-&gt;</operator><name pos:start="355:53" pos:end="355:57">limit</name></name></expr></argument>,

                             <argument pos:start="357:30" pos:end="357:30"><expr pos:start="357:30" pos:end="357:30"><literal type="number" pos:start="357:30" pos:end="357:30">0</literal></expr></argument>, <argument pos:start="357:33" pos:end="357:62"><expr pos:start="357:33" pos:end="357:62"><name pos:start="357:33" pos:end="357:44"><name pos:start="357:33" pos:end="357:37">entry</name><operator pos:start="357:38" pos:end="357:39">-&gt;</operator><name pos:start="357:40" pos:end="357:44">limit</name></name> <operator pos:start="357:46" pos:end="357:46">-</operator> <name pos:start="357:48" pos:end="357:58"><name pos:start="357:48" pos:end="357:52">entry</name><operator pos:start="357:53" pos:end="357:54">-&gt;</operator><name pos:start="357:55" pos:end="357:58">base</name></name> <operator pos:start="357:60" pos:end="357:60">+</operator> <literal type="number" pos:start="357:62" pos:end="357:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="363:5" pos:end="375:5"><if pos:start="363:5" pos:end="375:5">if <condition pos:start="363:8" pos:end="363:23">(<expr pos:start="363:9" pos:end="363:22"><name pos:start="363:9" pos:end="363:22"><name pos:start="363:9" pos:end="363:11">pci</name><operator pos:start="363:12" pos:end="363:13">-&gt;</operator><name pos:start="363:14" pos:end="363:16">w64</name><operator pos:start="363:17" pos:end="363:17">.</operator><name pos:start="363:18" pos:end="363:22">begin</name></name></expr>)</condition> <block pos:start="363:25" pos:end="375:5">{<block_content pos:start="365:9" pos:end="373:61">

        <expr_stmt pos:start="365:9" pos:end="373:61"><expr pos:start="365:9" pos:end="373:60"><call pos:start="365:9" pos:end="373:60"><name pos:start="365:9" pos:end="365:18">aml_append</name><argument_list pos:start="365:19" pos:end="373:60">(<argument pos:start="365:20" pos:end="365:22"><expr pos:start="365:20" pos:end="365:22"><name pos:start="365:20" pos:end="365:22">crs</name></expr></argument>,

            <argument pos:start="367:13" pos:end="373:59"><expr pos:start="367:13" pos:end="373:59"><call pos:start="367:13" pos:end="373:59"><name pos:start="367:13" pos:end="367:28">aml_qword_memory</name><argument_list pos:start="367:29" pos:end="373:59">(<argument pos:start="367:30" pos:end="367:43"><expr pos:start="367:30" pos:end="367:43"><name pos:start="367:30" pos:end="367:43">AML_POS_DECODE</name></expr></argument>, <argument pos:start="367:46" pos:end="367:58"><expr pos:start="367:46" pos:end="367:58"><name pos:start="367:46" pos:end="367:58">AML_MIN_FIXED</name></expr></argument>, <argument pos:start="367:61" pos:end="367:73"><expr pos:start="367:61" pos:end="367:73"><name pos:start="367:61" pos:end="367:73">AML_MAX_FIXED</name></expr></argument>,

                             <argument pos:start="369:30" pos:end="369:42"><expr pos:start="369:30" pos:end="369:42"><name pos:start="369:30" pos:end="369:42">AML_CACHEABLE</name></expr></argument>, <argument pos:start="369:45" pos:end="369:58"><expr pos:start="369:45" pos:end="369:58"><name pos:start="369:45" pos:end="369:58">AML_READ_WRITE</name></expr></argument>,

                             <argument pos:start="371:30" pos:end="371:30"><expr pos:start="371:30" pos:end="371:30"><literal type="number" pos:start="371:30" pos:end="371:30">0</literal></expr></argument>, <argument pos:start="371:33" pos:end="371:46"><expr pos:start="371:33" pos:end="371:46"><name pos:start="371:33" pos:end="371:46"><name pos:start="371:33" pos:end="371:35">pci</name><operator pos:start="371:36" pos:end="371:37">-&gt;</operator><name pos:start="371:38" pos:end="371:40">w64</name><operator pos:start="371:41" pos:end="371:41">.</operator><name pos:start="371:42" pos:end="371:46">begin</name></name></expr></argument>, <argument pos:start="371:49" pos:end="371:64"><expr pos:start="371:49" pos:end="371:64"><name pos:start="371:49" pos:end="371:60"><name pos:start="371:49" pos:end="371:51">pci</name><operator pos:start="371:52" pos:end="371:53">-&gt;</operator><name pos:start="371:54" pos:end="371:56">w64</name><operator pos:start="371:57" pos:end="371:57">.</operator><name pos:start="371:58" pos:end="371:60">end</name></name> <operator pos:start="371:62" pos:end="371:62">-</operator> <literal type="number" pos:start="371:64" pos:end="371:64">1</literal></expr></argument>, <argument pos:start="371:67" pos:end="371:67"><expr pos:start="371:67" pos:end="371:67"><literal type="number" pos:start="371:67" pos:end="371:67">0</literal></expr></argument>,

                             <argument pos:start="373:30" pos:end="373:58"><expr pos:start="373:30" pos:end="373:58"><name pos:start="373:30" pos:end="373:41"><name pos:start="373:30" pos:end="373:32">pci</name><operator pos:start="373:33" pos:end="373:34">-&gt;</operator><name pos:start="373:35" pos:end="373:37">w64</name><operator pos:start="373:38" pos:end="373:38">.</operator><name pos:start="373:39" pos:end="373:41">end</name></name> <operator pos:start="373:43" pos:end="373:43">-</operator> <name pos:start="373:45" pos:end="373:58"><name pos:start="373:45" pos:end="373:47">pci</name><operator pos:start="373:48" pos:end="373:49">-&gt;</operator><name pos:start="373:50" pos:end="373:52">w64</name><operator pos:start="373:53" pos:end="373:53">.</operator><name pos:start="373:54" pos:end="373:58">begin</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="377:5" pos:end="377:50"><expr pos:start="377:5" pos:end="377:49"><call pos:start="377:5" pos:end="377:49"><name pos:start="377:5" pos:end="377:14">aml_append</name><argument_list pos:start="377:15" pos:end="377:49">(<argument pos:start="377:16" pos:end="377:20"><expr pos:start="377:16" pos:end="377:20"><name pos:start="377:16" pos:end="377:20">scope</name></expr></argument>, <argument pos:start="377:23" pos:end="377:48"><expr pos:start="377:23" pos:end="377:48"><call pos:start="377:23" pos:end="377:48"><name pos:start="377:23" pos:end="377:35">aml_name_decl</name><argument_list pos:start="377:36" pos:end="377:48">(<argument pos:start="377:37" pos:end="377:42"><expr pos:start="377:37" pos:end="377:42"><literal type="string" pos:start="377:37" pos:end="377:42">"_CRS"</literal></expr></argument>, <argument pos:start="377:45" pos:end="377:47"><expr pos:start="377:45" pos:end="377:47"><name pos:start="377:45" pos:end="377:47">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="381:5" pos:end="381:38">/* reserve GPE0 block resources */</comment>

    <expr_stmt pos:start="383:5" pos:end="383:29"><expr pos:start="383:5" pos:end="383:28"><name pos:start="383:5" pos:end="383:7">dev</name> <operator pos:start="383:9" pos:end="383:9">=</operator> <call pos:start="383:11" pos:end="383:28"><name pos:start="383:11" pos:end="383:20">aml_device</name><argument_list pos:start="383:21" pos:end="383:28">(<argument pos:start="383:22" pos:end="383:27"><expr pos:start="383:22" pos:end="383:27"><literal type="string" pos:start="383:22" pos:end="383:27">"GPE0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="385:5" pos:end="385:66"><expr pos:start="385:5" pos:end="385:65"><call pos:start="385:5" pos:end="385:65"><name pos:start="385:5" pos:end="385:14">aml_append</name><argument_list pos:start="385:15" pos:end="385:65">(<argument pos:start="385:16" pos:end="385:18"><expr pos:start="385:16" pos:end="385:18"><name pos:start="385:16" pos:end="385:18">dev</name></expr></argument>, <argument pos:start="385:21" pos:end="385:64"><expr pos:start="385:21" pos:end="385:64"><call pos:start="385:21" pos:end="385:64"><name pos:start="385:21" pos:end="385:33">aml_name_decl</name><argument_list pos:start="385:34" pos:end="385:64">(<argument pos:start="385:35" pos:end="385:40"><expr pos:start="385:35" pos:end="385:40"><literal type="string" pos:start="385:35" pos:end="385:40">"_HID"</literal></expr></argument>, <argument pos:start="385:43" pos:end="385:63"><expr pos:start="385:43" pos:end="385:63"><call pos:start="385:43" pos:end="385:63"><name pos:start="385:43" pos:end="385:52">aml_string</name><argument_list pos:start="385:53" pos:end="385:63">(<argument pos:start="385:54" pos:end="385:62"><expr pos:start="385:54" pos:end="385:62"><literal type="string" pos:start="385:54" pos:end="385:62">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="387:5" pos:end="387:73"><expr pos:start="387:5" pos:end="387:72"><call pos:start="387:5" pos:end="387:72"><name pos:start="387:5" pos:end="387:14">aml_append</name><argument_list pos:start="387:15" pos:end="387:72">(<argument pos:start="387:16" pos:end="387:18"><expr pos:start="387:16" pos:end="387:18"><name pos:start="387:16" pos:end="387:18">dev</name></expr></argument>, <argument pos:start="387:21" pos:end="387:71"><expr pos:start="387:21" pos:end="387:71"><call pos:start="387:21" pos:end="387:71"><name pos:start="387:21" pos:end="387:33">aml_name_decl</name><argument_list pos:start="387:34" pos:end="387:71">(<argument pos:start="387:35" pos:end="387:40"><expr pos:start="387:35" pos:end="387:40"><literal type="string" pos:start="387:35" pos:end="387:40">"_UID"</literal></expr></argument>, <argument pos:start="387:43" pos:end="387:70"><expr pos:start="387:43" pos:end="387:70"><call pos:start="387:43" pos:end="387:70"><name pos:start="387:43" pos:end="387:52">aml_string</name><argument_list pos:start="387:53" pos:end="387:70">(<argument pos:start="387:54" pos:end="387:69"><expr pos:start="387:54" pos:end="387:69"><literal type="string" pos:start="387:54" pos:end="387:69">"GPE0 resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="389:5" pos:end="389:64">/* device present, functioning, decoding, not shown in UI */</comment>

    <expr_stmt pos:start="391:5" pos:end="391:57"><expr pos:start="391:5" pos:end="391:56"><call pos:start="391:5" pos:end="391:56"><name pos:start="391:5" pos:end="391:14">aml_append</name><argument_list pos:start="391:15" pos:end="391:56">(<argument pos:start="391:16" pos:end="391:18"><expr pos:start="391:16" pos:end="391:18"><name pos:start="391:16" pos:end="391:18">dev</name></expr></argument>, <argument pos:start="391:21" pos:end="391:55"><expr pos:start="391:21" pos:end="391:55"><call pos:start="391:21" pos:end="391:55"><name pos:start="391:21" pos:end="391:33">aml_name_decl</name><argument_list pos:start="391:34" pos:end="391:55">(<argument pos:start="391:35" pos:end="391:40"><expr pos:start="391:35" pos:end="391:40"><literal type="string" pos:start="391:35" pos:end="391:40">"_STA"</literal></expr></argument>, <argument pos:start="391:43" pos:end="391:54"><expr pos:start="391:43" pos:end="391:54"><call pos:start="391:43" pos:end="391:54"><name pos:start="391:43" pos:end="391:49">aml_int</name><argument_list pos:start="391:50" pos:end="391:54">(<argument pos:start="391:51" pos:end="391:53"><expr pos:start="391:51" pos:end="391:53"><literal type="number" pos:start="391:51" pos:end="391:53">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:34"><expr pos:start="393:5" pos:end="393:33"><name pos:start="393:5" pos:end="393:7">crs</name> <operator pos:start="393:9" pos:end="393:9">=</operator> <call pos:start="393:11" pos:end="393:33"><name pos:start="393:11" pos:end="393:31">aml_resource_template</name><argument_list pos:start="393:32" pos:end="393:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="399:6"><expr pos:start="395:5" pos:end="399:5"><call pos:start="395:5" pos:end="399:5"><name pos:start="395:5" pos:end="395:14">aml_append</name><argument_list pos:start="395:15" pos:end="399:5">(<argument pos:start="395:16" pos:end="395:18"><expr pos:start="395:16" pos:end="395:18"><name pos:start="395:16" pos:end="395:18">crs</name></expr></argument>,

        <argument pos:start="397:9" pos:end="397:77"><expr pos:start="397:9" pos:end="397:77"><call pos:start="397:9" pos:end="397:77"><name pos:start="397:9" pos:end="397:14">aml_io</name><argument_list pos:start="397:15" pos:end="397:77">(<argument pos:start="397:16" pos:end="397:27"><expr pos:start="397:16" pos:end="397:27"><name pos:start="397:16" pos:end="397:27">AML_DECODE16</name></expr></argument>, <argument pos:start="397:30" pos:end="397:41"><expr pos:start="397:30" pos:end="397:41"><name pos:start="397:30" pos:end="397:41"><name pos:start="397:30" pos:end="397:31">pm</name><operator pos:start="397:32" pos:end="397:33">-&gt;</operator><name pos:start="397:34" pos:end="397:41">gpe0_blk</name></name></expr></argument>, <argument pos:start="397:44" pos:end="397:55"><expr pos:start="397:44" pos:end="397:55"><name pos:start="397:44" pos:end="397:55"><name pos:start="397:44" pos:end="397:45">pm</name><operator pos:start="397:46" pos:end="397:47">-&gt;</operator><name pos:start="397:48" pos:end="397:55">gpe0_blk</name></name></expr></argument>, <argument pos:start="397:58" pos:end="397:58"><expr pos:start="397:58" pos:end="397:58"><literal type="number" pos:start="397:58" pos:end="397:58">1</literal></expr></argument>, <argument pos:start="397:61" pos:end="397:76"><expr pos:start="397:61" pos:end="397:76"><name pos:start="397:61" pos:end="397:76"><name pos:start="397:61" pos:end="397:62">pm</name><operator pos:start="397:63" pos:end="397:64">-&gt;</operator><name pos:start="397:65" pos:end="397:76">gpe0_blk_len</name></name></expr></argument>)</argument_list></call></expr></argument>

    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:48"><expr pos:start="401:5" pos:end="401:47"><call pos:start="401:5" pos:end="401:47"><name pos:start="401:5" pos:end="401:14">aml_append</name><argument_list pos:start="401:15" pos:end="401:47">(<argument pos:start="401:16" pos:end="401:18"><expr pos:start="401:16" pos:end="401:18"><name pos:start="401:16" pos:end="401:18">dev</name></expr></argument>, <argument pos:start="401:21" pos:end="401:46"><expr pos:start="401:21" pos:end="401:46"><call pos:start="401:21" pos:end="401:46"><name pos:start="401:21" pos:end="401:33">aml_name_decl</name><argument_list pos:start="401:34" pos:end="401:46">(<argument pos:start="401:35" pos:end="401:40"><expr pos:start="401:35" pos:end="401:40"><literal type="string" pos:start="401:35" pos:end="401:40">"_CRS"</literal></expr></argument>, <argument pos:start="401:43" pos:end="401:45"><expr pos:start="401:43" pos:end="401:45"><name pos:start="401:43" pos:end="401:45">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:27"><expr pos:start="403:5" pos:end="403:26"><call pos:start="403:5" pos:end="403:26"><name pos:start="403:5" pos:end="403:14">aml_append</name><argument_list pos:start="403:15" pos:end="403:26">(<argument pos:start="403:16" pos:end="403:20"><expr pos:start="403:16" pos:end="403:20"><name pos:start="403:16" pos:end="403:20">scope</name></expr></argument>, <argument pos:start="403:23" pos:end="403:25"><expr pos:start="403:23" pos:end="403:25"><name pos:start="403:23" pos:end="403:25">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="407:5" pos:end="407:38"><expr pos:start="407:5" pos:end="407:37"><call pos:start="407:5" pos:end="407:37"><name pos:start="407:5" pos:end="407:20">g_ptr_array_free</name><argument_list pos:start="407:21" pos:end="407:37">(<argument pos:start="407:22" pos:end="407:30"><expr pos:start="407:22" pos:end="407:30"><name pos:start="407:22" pos:end="407:30">io_ranges</name></expr></argument>, <argument pos:start="407:33" pos:end="407:36"><expr pos:start="407:33" pos:end="407:36"><name pos:start="407:33" pos:end="407:36">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="409:5" pos:end="409:39"><expr pos:start="409:5" pos:end="409:38"><call pos:start="409:5" pos:end="409:38"><name pos:start="409:5" pos:end="409:20">g_ptr_array_free</name><argument_list pos:start="409:21" pos:end="409:38">(<argument pos:start="409:22" pos:end="409:31"><expr pos:start="409:22" pos:end="409:31"><name pos:start="409:22" pos:end="409:31">mem_ranges</name></expr></argument>, <argument pos:start="409:34" pos:end="409:37"><expr pos:start="409:34" pos:end="409:37"><name pos:start="409:34" pos:end="409:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="413:5" pos:end="413:33">/* reserve PCIHP resources */</comment>

    <if_stmt pos:start="415:5" pos:end="443:5"><if pos:start="415:5" pos:end="443:5">if <condition pos:start="415:8" pos:end="415:25">(<expr pos:start="415:9" pos:end="415:24"><name pos:start="415:9" pos:end="415:24"><name pos:start="415:9" pos:end="415:10">pm</name><operator pos:start="415:11" pos:end="415:12">-&gt;</operator><name pos:start="415:13" pos:end="415:24">pcihp_io_len</name></name></expr>)</condition> <block pos:start="415:27" pos:end="443:5">{<block_content pos:start="417:9" pos:end="441:31">

        <expr_stmt pos:start="417:9" pos:end="417:33"><expr pos:start="417:9" pos:end="417:32"><name pos:start="417:9" pos:end="417:11">dev</name> <operator pos:start="417:13" pos:end="417:13">=</operator> <call pos:start="417:15" pos:end="417:32"><name pos:start="417:15" pos:end="417:24">aml_device</name><argument_list pos:start="417:25" pos:end="417:32">(<argument pos:start="417:26" pos:end="417:31"><expr pos:start="417:26" pos:end="417:31"><literal type="string" pos:start="417:26" pos:end="417:31">"PHPR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="419:9" pos:end="419:70"><expr pos:start="419:9" pos:end="419:69"><call pos:start="419:9" pos:end="419:69"><name pos:start="419:9" pos:end="419:18">aml_append</name><argument_list pos:start="419:19" pos:end="419:69">(<argument pos:start="419:20" pos:end="419:22"><expr pos:start="419:20" pos:end="419:22"><name pos:start="419:20" pos:end="419:22">dev</name></expr></argument>, <argument pos:start="419:25" pos:end="419:68"><expr pos:start="419:25" pos:end="419:68"><call pos:start="419:25" pos:end="419:68"><name pos:start="419:25" pos:end="419:37">aml_name_decl</name><argument_list pos:start="419:38" pos:end="419:68">(<argument pos:start="419:39" pos:end="419:44"><expr pos:start="419:39" pos:end="419:44"><literal type="string" pos:start="419:39" pos:end="419:44">"_HID"</literal></expr></argument>, <argument pos:start="419:47" pos:end="419:67"><expr pos:start="419:47" pos:end="419:67"><call pos:start="419:47" pos:end="419:67"><name pos:start="419:47" pos:end="419:56">aml_string</name><argument_list pos:start="419:57" pos:end="419:67">(<argument pos:start="419:58" pos:end="419:66"><expr pos:start="419:58" pos:end="419:66"><literal type="string" pos:start="419:58" pos:end="419:66">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="421:9" pos:end="423:72"><expr pos:start="421:9" pos:end="423:71"><call pos:start="421:9" pos:end="423:71"><name pos:start="421:9" pos:end="421:18">aml_append</name><argument_list pos:start="421:19" pos:end="423:71">(<argument pos:start="421:20" pos:end="421:22"><expr pos:start="421:20" pos:end="421:22"><name pos:start="421:20" pos:end="421:22">dev</name></expr></argument>,

            <argument pos:start="423:13" pos:end="423:70"><expr pos:start="423:13" pos:end="423:70"><call pos:start="423:13" pos:end="423:70"><name pos:start="423:13" pos:end="423:25">aml_name_decl</name><argument_list pos:start="423:26" pos:end="423:70">(<argument pos:start="423:27" pos:end="423:32"><expr pos:start="423:27" pos:end="423:32"><literal type="string" pos:start="423:27" pos:end="423:32">"_UID"</literal></expr></argument>, <argument pos:start="423:35" pos:end="423:69"><expr pos:start="423:35" pos:end="423:69"><call pos:start="423:35" pos:end="423:69"><name pos:start="423:35" pos:end="423:44">aml_string</name><argument_list pos:start="423:45" pos:end="423:69">(<argument pos:start="423:46" pos:end="423:68"><expr pos:start="423:46" pos:end="423:68"><literal type="string" pos:start="423:46" pos:end="423:68">"PCI Hotplug resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="425:9" pos:end="425:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="427:9" pos:end="427:61"><expr pos:start="427:9" pos:end="427:60"><call pos:start="427:9" pos:end="427:60"><name pos:start="427:9" pos:end="427:18">aml_append</name><argument_list pos:start="427:19" pos:end="427:60">(<argument pos:start="427:20" pos:end="427:22"><expr pos:start="427:20" pos:end="427:22"><name pos:start="427:20" pos:end="427:22">dev</name></expr></argument>, <argument pos:start="427:25" pos:end="427:59"><expr pos:start="427:25" pos:end="427:59"><call pos:start="427:25" pos:end="427:59"><name pos:start="427:25" pos:end="427:37">aml_name_decl</name><argument_list pos:start="427:38" pos:end="427:59">(<argument pos:start="427:39" pos:end="427:44"><expr pos:start="427:39" pos:end="427:44"><literal type="string" pos:start="427:39" pos:end="427:44">"_STA"</literal></expr></argument>, <argument pos:start="427:47" pos:end="427:58"><expr pos:start="427:47" pos:end="427:58"><call pos:start="427:47" pos:end="427:58"><name pos:start="427:47" pos:end="427:53">aml_int</name><argument_list pos:start="427:54" pos:end="427:58">(<argument pos:start="427:55" pos:end="427:57"><expr pos:start="427:55" pos:end="427:57"><literal type="number" pos:start="427:55" pos:end="427:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="429:9" pos:end="429:38"><expr pos:start="429:9" pos:end="429:37"><name pos:start="429:9" pos:end="429:11">crs</name> <operator pos:start="429:13" pos:end="429:13">=</operator> <call pos:start="429:15" pos:end="429:37"><name pos:start="429:15" pos:end="429:35">aml_resource_template</name><argument_list pos:start="429:36" pos:end="429:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="431:9" pos:end="437:10"><expr pos:start="431:9" pos:end="437:9"><call pos:start="431:9" pos:end="437:9"><name pos:start="431:9" pos:end="431:18">aml_append</name><argument_list pos:start="431:19" pos:end="437:9">(<argument pos:start="431:20" pos:end="431:22"><expr pos:start="431:20" pos:end="431:22"><name pos:start="431:20" pos:end="431:22">crs</name></expr></argument>,

            <argument pos:start="433:13" pos:end="435:36"><expr pos:start="433:13" pos:end="435:36"><call pos:start="433:13" pos:end="435:36"><name pos:start="433:13" pos:end="433:18">aml_io</name><argument_list pos:start="433:19" pos:end="435:36">(<argument pos:start="433:20" pos:end="433:31"><expr pos:start="433:20" pos:end="433:31"><name pos:start="433:20" pos:end="433:31">AML_DECODE16</name></expr></argument>, <argument pos:start="433:34" pos:end="433:50"><expr pos:start="433:34" pos:end="433:50"><name pos:start="433:34" pos:end="433:50"><name pos:start="433:34" pos:end="433:35">pm</name><operator pos:start="433:36" pos:end="433:37">-&gt;</operator><name pos:start="433:38" pos:end="433:50">pcihp_io_base</name></name></expr></argument>, <argument pos:start="433:53" pos:end="433:69"><expr pos:start="433:53" pos:end="433:69"><name pos:start="433:53" pos:end="433:69"><name pos:start="433:53" pos:end="433:54">pm</name><operator pos:start="433:55" pos:end="433:56">-&gt;</operator><name pos:start="433:57" pos:end="433:69">pcihp_io_base</name></name></expr></argument>, <argument pos:start="433:72" pos:end="433:72"><expr pos:start="433:72" pos:end="433:72"><literal type="number" pos:start="433:72" pos:end="433:72">1</literal></expr></argument>,

                   <argument pos:start="435:20" pos:end="435:35"><expr pos:start="435:20" pos:end="435:35"><name pos:start="435:20" pos:end="435:35"><name pos:start="435:20" pos:end="435:21">pm</name><operator pos:start="435:22" pos:end="435:23">-&gt;</operator><name pos:start="435:24" pos:end="435:35">pcihp_io_len</name></name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="439:9" pos:end="439:52"><expr pos:start="439:9" pos:end="439:51"><call pos:start="439:9" pos:end="439:51"><name pos:start="439:9" pos:end="439:18">aml_append</name><argument_list pos:start="439:19" pos:end="439:51">(<argument pos:start="439:20" pos:end="439:22"><expr pos:start="439:20" pos:end="439:22"><name pos:start="439:20" pos:end="439:22">dev</name></expr></argument>, <argument pos:start="439:25" pos:end="439:50"><expr pos:start="439:25" pos:end="439:50"><call pos:start="439:25" pos:end="439:50"><name pos:start="439:25" pos:end="439:37">aml_name_decl</name><argument_list pos:start="439:38" pos:end="439:50">(<argument pos:start="439:39" pos:end="439:44"><expr pos:start="439:39" pos:end="439:44"><literal type="string" pos:start="439:39" pos:end="439:44">"_CRS"</literal></expr></argument>, <argument pos:start="439:47" pos:end="439:49"><expr pos:start="439:47" pos:end="439:49"><name pos:start="439:47" pos:end="439:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="441:9" pos:end="441:31"><expr pos:start="441:9" pos:end="441:30"><call pos:start="441:9" pos:end="441:30"><name pos:start="441:9" pos:end="441:18">aml_append</name><argument_list pos:start="441:19" pos:end="441:30">(<argument pos:start="441:20" pos:end="441:24"><expr pos:start="441:20" pos:end="441:24"><name pos:start="441:20" pos:end="441:24">scope</name></expr></argument>, <argument pos:start="441:27" pos:end="441:29"><expr pos:start="441:27" pos:end="441:29"><name pos:start="441:27" pos:end="441:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="445:5" pos:end="445:28"><expr pos:start="445:5" pos:end="445:27"><call pos:start="445:5" pos:end="445:27"><name pos:start="445:5" pos:end="445:14">aml_append</name><argument_list pos:start="445:15" pos:end="445:27">(<argument pos:start="445:16" pos:end="445:19"><expr pos:start="445:16" pos:end="445:19"><name pos:start="445:16" pos:end="445:19">dsdt</name></expr></argument>, <argument pos:start="445:22" pos:end="445:26"><expr pos:start="445:22" pos:end="445:26"><name pos:start="445:22" pos:end="445:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="449:5" pos:end="449:55">/*  create S3_ / S4_ / S5_ packages if necessary */</comment>

    <expr_stmt pos:start="451:5" pos:end="451:28"><expr pos:start="451:5" pos:end="451:27"><name pos:start="451:5" pos:end="451:9">scope</name> <operator pos:start="451:11" pos:end="451:11">=</operator> <call pos:start="451:13" pos:end="451:27"><name pos:start="451:13" pos:end="451:21">aml_scope</name><argument_list pos:start="451:22" pos:end="451:27">(<argument pos:start="451:23" pos:end="451:26"><expr pos:start="451:23" pos:end="451:26"><literal type="string" pos:start="451:23" pos:end="451:26">"\\"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="453:5" pos:end="467:5"><if pos:start="453:5" pos:end="467:5">if <condition pos:start="453:8" pos:end="453:25">(<expr pos:start="453:9" pos:end="453:24"><operator pos:start="453:9" pos:end="453:9">!</operator><name pos:start="453:10" pos:end="453:24"><name pos:start="453:10" pos:end="453:11">pm</name><operator pos:start="453:12" pos:end="453:13">-&gt;</operator><name pos:start="453:14" pos:end="453:24">s3_disabled</name></name></expr>)</condition> <block pos:start="453:27" pos:end="467:5">{<block_content pos:start="455:9" pos:end="465:53">

        <expr_stmt pos:start="455:9" pos:end="455:29"><expr pos:start="455:9" pos:end="455:28"><name pos:start="455:9" pos:end="455:11">pkg</name> <operator pos:start="455:13" pos:end="455:13">=</operator> <call pos:start="455:15" pos:end="455:28"><name pos:start="455:15" pos:end="455:25">aml_package</name><argument_list pos:start="455:26" pos:end="455:28">(<argument pos:start="455:27" pos:end="455:27"><expr pos:start="455:27" pos:end="455:27"><literal type="number" pos:start="455:27" pos:end="455:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:36"><expr pos:start="457:9" pos:end="457:35"><call pos:start="457:9" pos:end="457:35"><name pos:start="457:9" pos:end="457:18">aml_append</name><argument_list pos:start="457:19" pos:end="457:35">(<argument pos:start="457:20" pos:end="457:22"><expr pos:start="457:20" pos:end="457:22"><name pos:start="457:20" pos:end="457:22">pkg</name></expr></argument>, <argument pos:start="457:25" pos:end="457:34"><expr pos:start="457:25" pos:end="457:34"><call pos:start="457:25" pos:end="457:34"><name pos:start="457:25" pos:end="457:31">aml_int</name><argument_list pos:start="457:32" pos:end="457:34">(<argument pos:start="457:33" pos:end="457:33"><expr pos:start="457:33" pos:end="457:33"><literal type="number" pos:start="457:33" pos:end="457:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="457:38" pos:end="457:59">/* PM1a_CNT.SLP_TYP */</comment>

        <expr_stmt pos:start="459:9" pos:end="459:36"><expr pos:start="459:9" pos:end="459:35"><call pos:start="459:9" pos:end="459:35"><name pos:start="459:9" pos:end="459:18">aml_append</name><argument_list pos:start="459:19" pos:end="459:35">(<argument pos:start="459:20" pos:end="459:22"><expr pos:start="459:20" pos:end="459:22"><name pos:start="459:20" pos:end="459:22">pkg</name></expr></argument>, <argument pos:start="459:25" pos:end="459:34"><expr pos:start="459:25" pos:end="459:34"><call pos:start="459:25" pos:end="459:34"><name pos:start="459:25" pos:end="459:31">aml_int</name><argument_list pos:start="459:32" pos:end="459:34">(<argument pos:start="459:33" pos:end="459:33"><expr pos:start="459:33" pos:end="459:33"><literal type="number" pos:start="459:33" pos:end="459:33">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="459:38" pos:end="459:77">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>

        <expr_stmt pos:start="461:9" pos:end="461:36"><expr pos:start="461:9" pos:end="461:35"><call pos:start="461:9" pos:end="461:35"><name pos:start="461:9" pos:end="461:18">aml_append</name><argument_list pos:start="461:19" pos:end="461:35">(<argument pos:start="461:20" pos:end="461:22"><expr pos:start="461:20" pos:end="461:22"><name pos:start="461:20" pos:end="461:22">pkg</name></expr></argument>, <argument pos:start="461:25" pos:end="461:34"><expr pos:start="461:25" pos:end="461:34"><call pos:start="461:25" pos:end="461:34"><name pos:start="461:25" pos:end="461:31">aml_int</name><argument_list pos:start="461:32" pos:end="461:34">(<argument pos:start="461:33" pos:end="461:33"><expr pos:start="461:33" pos:end="461:33"><literal type="number" pos:start="461:33" pos:end="461:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="461:38" pos:end="461:51">/* reserved */</comment>

        <expr_stmt pos:start="463:9" pos:end="463:36"><expr pos:start="463:9" pos:end="463:35"><call pos:start="463:9" pos:end="463:35"><name pos:start="463:9" pos:end="463:18">aml_append</name><argument_list pos:start="463:19" pos:end="463:35">(<argument pos:start="463:20" pos:end="463:22"><expr pos:start="463:20" pos:end="463:22"><name pos:start="463:20" pos:end="463:22">pkg</name></expr></argument>, <argument pos:start="463:25" pos:end="463:34"><expr pos:start="463:25" pos:end="463:34"><call pos:start="463:25" pos:end="463:34"><name pos:start="463:25" pos:end="463:31">aml_int</name><argument_list pos:start="463:32" pos:end="463:34">(<argument pos:start="463:33" pos:end="463:33"><expr pos:start="463:33" pos:end="463:33"><literal type="number" pos:start="463:33" pos:end="463:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="463:38" pos:end="463:51">/* reserved */</comment>

        <expr_stmt pos:start="465:9" pos:end="465:53"><expr pos:start="465:9" pos:end="465:52"><call pos:start="465:9" pos:end="465:52"><name pos:start="465:9" pos:end="465:18">aml_append</name><argument_list pos:start="465:19" pos:end="465:52">(<argument pos:start="465:20" pos:end="465:24"><expr pos:start="465:20" pos:end="465:24"><name pos:start="465:20" pos:end="465:24">scope</name></expr></argument>, <argument pos:start="465:27" pos:end="465:51"><expr pos:start="465:27" pos:end="465:51"><call pos:start="465:27" pos:end="465:51"><name pos:start="465:27" pos:end="465:39">aml_name_decl</name><argument_list pos:start="465:40" pos:end="465:51">(<argument pos:start="465:41" pos:end="465:45"><expr pos:start="465:41" pos:end="465:45"><literal type="string" pos:start="465:41" pos:end="465:45">"_S3"</literal></expr></argument>, <argument pos:start="465:48" pos:end="465:50"><expr pos:start="465:48" pos:end="465:50"><name pos:start="465:48" pos:end="465:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="471:5" pos:end="487:5"><if pos:start="471:5" pos:end="487:5">if <condition pos:start="471:8" pos:end="471:25">(<expr pos:start="471:9" pos:end="471:24"><operator pos:start="471:9" pos:end="471:9">!</operator><name pos:start="471:10" pos:end="471:24"><name pos:start="471:10" pos:end="471:11">pm</name><operator pos:start="471:12" pos:end="471:13">-&gt;</operator><name pos:start="471:14" pos:end="471:24">s4_disabled</name></name></expr>)</condition> <block pos:start="471:27" pos:end="487:5">{<block_content pos:start="473:9" pos:end="485:53">

        <expr_stmt pos:start="473:9" pos:end="473:29"><expr pos:start="473:9" pos:end="473:28"><name pos:start="473:9" pos:end="473:11">pkg</name> <operator pos:start="473:13" pos:end="473:13">=</operator> <call pos:start="473:15" pos:end="473:28"><name pos:start="473:15" pos:end="473:25">aml_package</name><argument_list pos:start="473:26" pos:end="473:28">(<argument pos:start="473:27" pos:end="473:27"><expr pos:start="473:27" pos:end="473:27"><literal type="number" pos:start="473:27" pos:end="473:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="475:9" pos:end="475:45"><expr pos:start="475:9" pos:end="475:44"><call pos:start="475:9" pos:end="475:44"><name pos:start="475:9" pos:end="475:18">aml_append</name><argument_list pos:start="475:19" pos:end="475:44">(<argument pos:start="475:20" pos:end="475:22"><expr pos:start="475:20" pos:end="475:22"><name pos:start="475:20" pos:end="475:22">pkg</name></expr></argument>, <argument pos:start="475:25" pos:end="475:43"><expr pos:start="475:25" pos:end="475:43"><call pos:start="475:25" pos:end="475:43"><name pos:start="475:25" pos:end="475:31">aml_int</name><argument_list pos:start="475:32" pos:end="475:43">(<argument pos:start="475:33" pos:end="475:42"><expr pos:start="475:33" pos:end="475:42"><name pos:start="475:33" pos:end="475:42"><name pos:start="475:33" pos:end="475:34">pm</name><operator pos:start="475:35" pos:end="475:36">-&gt;</operator><name pos:start="475:37" pos:end="475:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="475:47" pos:end="475:68">/* PM1a_CNT.SLP_TYP */</comment>

        <comment type="block" pos:start="477:9" pos:end="477:48">/* PM1b_CNT.SLP_TYP, FIXME: not impl. */</comment>

        <expr_stmt pos:start="479:9" pos:end="479:45"><expr pos:start="479:9" pos:end="479:44"><call pos:start="479:9" pos:end="479:44"><name pos:start="479:9" pos:end="479:18">aml_append</name><argument_list pos:start="479:19" pos:end="479:44">(<argument pos:start="479:20" pos:end="479:22"><expr pos:start="479:20" pos:end="479:22"><name pos:start="479:20" pos:end="479:22">pkg</name></expr></argument>, <argument pos:start="479:25" pos:end="479:43"><expr pos:start="479:25" pos:end="479:43"><call pos:start="479:25" pos:end="479:43"><name pos:start="479:25" pos:end="479:31">aml_int</name><argument_list pos:start="479:32" pos:end="479:43">(<argument pos:start="479:33" pos:end="479:42"><expr pos:start="479:33" pos:end="479:42"><name pos:start="479:33" pos:end="479:42"><name pos:start="479:33" pos:end="479:34">pm</name><operator pos:start="479:35" pos:end="479:36">-&gt;</operator><name pos:start="479:37" pos:end="479:42">s4_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="481:9" pos:end="481:36"><expr pos:start="481:9" pos:end="481:35"><call pos:start="481:9" pos:end="481:35"><name pos:start="481:9" pos:end="481:18">aml_append</name><argument_list pos:start="481:19" pos:end="481:35">(<argument pos:start="481:20" pos:end="481:22"><expr pos:start="481:20" pos:end="481:22"><name pos:start="481:20" pos:end="481:22">pkg</name></expr></argument>, <argument pos:start="481:25" pos:end="481:34"><expr pos:start="481:25" pos:end="481:34"><call pos:start="481:25" pos:end="481:34"><name pos:start="481:25" pos:end="481:31">aml_int</name><argument_list pos:start="481:32" pos:end="481:34">(<argument pos:start="481:33" pos:end="481:33"><expr pos:start="481:33" pos:end="481:33"><literal type="number" pos:start="481:33" pos:end="481:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="481:38" pos:end="481:51">/* reserved */</comment>

        <expr_stmt pos:start="483:9" pos:end="483:36"><expr pos:start="483:9" pos:end="483:35"><call pos:start="483:9" pos:end="483:35"><name pos:start="483:9" pos:end="483:18">aml_append</name><argument_list pos:start="483:19" pos:end="483:35">(<argument pos:start="483:20" pos:end="483:22"><expr pos:start="483:20" pos:end="483:22"><name pos:start="483:20" pos:end="483:22">pkg</name></expr></argument>, <argument pos:start="483:25" pos:end="483:34"><expr pos:start="483:25" pos:end="483:34"><call pos:start="483:25" pos:end="483:34"><name pos:start="483:25" pos:end="483:31">aml_int</name><argument_list pos:start="483:32" pos:end="483:34">(<argument pos:start="483:33" pos:end="483:33"><expr pos:start="483:33" pos:end="483:33"><literal type="number" pos:start="483:33" pos:end="483:33">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="483:38" pos:end="483:51">/* reserved */</comment>

        <expr_stmt pos:start="485:9" pos:end="485:53"><expr pos:start="485:9" pos:end="485:52"><call pos:start="485:9" pos:end="485:52"><name pos:start="485:9" pos:end="485:18">aml_append</name><argument_list pos:start="485:19" pos:end="485:52">(<argument pos:start="485:20" pos:end="485:24"><expr pos:start="485:20" pos:end="485:24"><name pos:start="485:20" pos:end="485:24">scope</name></expr></argument>, <argument pos:start="485:27" pos:end="485:51"><expr pos:start="485:27" pos:end="485:51"><call pos:start="485:27" pos:end="485:51"><name pos:start="485:27" pos:end="485:39">aml_name_decl</name><argument_list pos:start="485:40" pos:end="485:51">(<argument pos:start="485:41" pos:end="485:45"><expr pos:start="485:41" pos:end="485:45"><literal type="string" pos:start="485:41" pos:end="485:45">"_S4"</literal></expr></argument>, <argument pos:start="485:48" pos:end="485:50"><expr pos:start="485:48" pos:end="485:50"><name pos:start="485:48" pos:end="485:50">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="491:5" pos:end="491:25"><expr pos:start="491:5" pos:end="491:24"><name pos:start="491:5" pos:end="491:7">pkg</name> <operator pos:start="491:9" pos:end="491:9">=</operator> <call pos:start="491:11" pos:end="491:24"><name pos:start="491:11" pos:end="491:21">aml_package</name><argument_list pos:start="491:22" pos:end="491:24">(<argument pos:start="491:23" pos:end="491:23"><expr pos:start="491:23" pos:end="491:23"><literal type="number" pos:start="491:23" pos:end="491:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="493:5" pos:end="493:32"><expr pos:start="493:5" pos:end="493:31"><call pos:start="493:5" pos:end="493:31"><name pos:start="493:5" pos:end="493:14">aml_append</name><argument_list pos:start="493:15" pos:end="493:31">(<argument pos:start="493:16" pos:end="493:18"><expr pos:start="493:16" pos:end="493:18"><name pos:start="493:16" pos:end="493:18">pkg</name></expr></argument>, <argument pos:start="493:21" pos:end="493:30"><expr pos:start="493:21" pos:end="493:30"><call pos:start="493:21" pos:end="493:30"><name pos:start="493:21" pos:end="493:27">aml_int</name><argument_list pos:start="493:28" pos:end="493:30">(<argument pos:start="493:29" pos:end="493:29"><expr pos:start="493:29" pos:end="493:29"><literal type="number" pos:start="493:29" pos:end="493:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="493:34" pos:end="493:55">/* PM1a_CNT.SLP_TYP */</comment>

    <expr_stmt pos:start="495:5" pos:end="495:32"><expr pos:start="495:5" pos:end="495:31"><call pos:start="495:5" pos:end="495:31"><name pos:start="495:5" pos:end="495:14">aml_append</name><argument_list pos:start="495:15" pos:end="495:31">(<argument pos:start="495:16" pos:end="495:18"><expr pos:start="495:16" pos:end="495:18"><name pos:start="495:16" pos:end="495:18">pkg</name></expr></argument>, <argument pos:start="495:21" pos:end="495:30"><expr pos:start="495:21" pos:end="495:30"><call pos:start="495:21" pos:end="495:30"><name pos:start="495:21" pos:end="495:27">aml_int</name><argument_list pos:start="495:28" pos:end="495:30">(<argument pos:start="495:29" pos:end="495:29"><expr pos:start="495:29" pos:end="495:29"><literal type="number" pos:start="495:29" pos:end="495:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="495:34" pos:end="495:65">/* PM1b_CNT.SLP_TYP not impl. */</comment>

    <expr_stmt pos:start="497:5" pos:end="497:32"><expr pos:start="497:5" pos:end="497:31"><call pos:start="497:5" pos:end="497:31"><name pos:start="497:5" pos:end="497:14">aml_append</name><argument_list pos:start="497:15" pos:end="497:31">(<argument pos:start="497:16" pos:end="497:18"><expr pos:start="497:16" pos:end="497:18"><name pos:start="497:16" pos:end="497:18">pkg</name></expr></argument>, <argument pos:start="497:21" pos:end="497:30"><expr pos:start="497:21" pos:end="497:30"><call pos:start="497:21" pos:end="497:30"><name pos:start="497:21" pos:end="497:27">aml_int</name><argument_list pos:start="497:28" pos:end="497:30">(<argument pos:start="497:29" pos:end="497:29"><expr pos:start="497:29" pos:end="497:29"><literal type="number" pos:start="497:29" pos:end="497:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="497:34" pos:end="497:47">/* reserved */</comment>

    <expr_stmt pos:start="499:5" pos:end="499:32"><expr pos:start="499:5" pos:end="499:31"><call pos:start="499:5" pos:end="499:31"><name pos:start="499:5" pos:end="499:14">aml_append</name><argument_list pos:start="499:15" pos:end="499:31">(<argument pos:start="499:16" pos:end="499:18"><expr pos:start="499:16" pos:end="499:18"><name pos:start="499:16" pos:end="499:18">pkg</name></expr></argument>, <argument pos:start="499:21" pos:end="499:30"><expr pos:start="499:21" pos:end="499:30"><call pos:start="499:21" pos:end="499:30"><name pos:start="499:21" pos:end="499:27">aml_int</name><argument_list pos:start="499:28" pos:end="499:30">(<argument pos:start="499:29" pos:end="499:29"><expr pos:start="499:29" pos:end="499:29"><literal type="number" pos:start="499:29" pos:end="499:29">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="499:34" pos:end="499:47">/* reserved */</comment>

    <expr_stmt pos:start="501:5" pos:end="501:49"><expr pos:start="501:5" pos:end="501:48"><call pos:start="501:5" pos:end="501:48"><name pos:start="501:5" pos:end="501:14">aml_append</name><argument_list pos:start="501:15" pos:end="501:48">(<argument pos:start="501:16" pos:end="501:20"><expr pos:start="501:16" pos:end="501:20"><name pos:start="501:16" pos:end="501:20">scope</name></expr></argument>, <argument pos:start="501:23" pos:end="501:47"><expr pos:start="501:23" pos:end="501:47"><call pos:start="501:23" pos:end="501:47"><name pos:start="501:23" pos:end="501:35">aml_name_decl</name><argument_list pos:start="501:36" pos:end="501:47">(<argument pos:start="501:37" pos:end="501:41"><expr pos:start="501:37" pos:end="501:41"><literal type="string" pos:start="501:37" pos:end="501:41">"_S5"</literal></expr></argument>, <argument pos:start="501:44" pos:end="501:46"><expr pos:start="501:44" pos:end="501:46"><name pos:start="501:44" pos:end="501:46">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="503:5" pos:end="503:28"><expr pos:start="503:5" pos:end="503:27"><call pos:start="503:5" pos:end="503:27"><name pos:start="503:5" pos:end="503:14">aml_append</name><argument_list pos:start="503:15" pos:end="503:27">(<argument pos:start="503:16" pos:end="503:19"><expr pos:start="503:16" pos:end="503:19"><name pos:start="503:16" pos:end="503:19">dsdt</name></expr></argument>, <argument pos:start="503:22" pos:end="503:26"><expr pos:start="503:22" pos:end="503:26"><name pos:start="503:22" pos:end="503:26">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="507:5" pos:end="507:45">/* create fw_cfg node, unconditionally */</comment>

    <block pos:start="509:5" pos:end="561:5">{<block_content pos:start="519:9" pos:end="559:32">

        <comment type="block" pos:start="511:9" pos:end="517:71">/* when using port i/o, the 8-bit data register *always* overlaps

         * with half of the 16-bit control register. Hence, the total size

         * of the i/o region used is FW_CFG_CTL_SIZE; when using DMA, the

         * DMA control register is located at FW_CFG_DMA_IO_BASE + 4 */</comment>

        <decl_stmt pos:start="519:9" pos:end="525:42"><decl pos:start="519:9" pos:end="525:41"><type pos:start="519:9" pos:end="519:15"><name pos:start="519:9" pos:end="519:15">uint8_t</name></type> <name pos:start="519:17" pos:end="519:23">io_size</name> <init pos:start="519:25" pos:end="525:41">= <expr pos:start="519:27" pos:end="525:41"><ternary pos:start="519:27" pos:end="525:41"><condition pos:start="519:27" pos:end="521:73"><expr pos:start="519:27" pos:end="521:71"><call pos:start="519:27" pos:end="521:71"><name pos:start="519:27" pos:end="519:50">object_property_get_bool</name><argument_list pos:start="519:51" pos:end="521:71">(<argument pos:start="519:52" pos:end="519:71"><expr pos:start="519:52" pos:end="519:71"><call pos:start="519:52" pos:end="519:71"><name pos:start="519:52" pos:end="519:57">OBJECT</name><argument_list pos:start="519:58" pos:end="519:71">(<argument pos:start="519:59" pos:end="519:70"><expr pos:start="519:59" pos:end="519:70"><name pos:start="519:59" pos:end="519:70"><name pos:start="519:59" pos:end="519:62">pcms</name><operator pos:start="519:63" pos:end="519:64">-&gt;</operator><name pos:start="519:65" pos:end="519:70">fw_cfg</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                                   <argument pos:start="521:52" pos:end="521:64"><expr pos:start="521:52" pos:end="521:64"><literal type="string" pos:start="521:52" pos:end="521:64">"dma_enabled"</literal></expr></argument>, <argument pos:start="521:67" pos:end="521:70"><expr pos:start="521:67" pos:end="521:70"><name pos:start="521:67" pos:end="521:70">NULL</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="523:27" pos:end="523:75">

                          <expr pos:start="523:27" pos:end="523:75"><call pos:start="523:27" pos:end="523:54"><name pos:start="523:27" pos:end="523:34">ROUND_UP</name><argument_list pos:start="523:35" pos:end="523:54">(<argument pos:start="523:36" pos:end="523:50"><expr pos:start="523:36" pos:end="523:50"><name pos:start="523:36" pos:end="523:50">FW_CFG_CTL_SIZE</name></expr></argument>, <argument pos:start="523:53" pos:end="523:53"><expr pos:start="523:53" pos:end="523:53"><literal type="number" pos:start="523:53" pos:end="523:53">4</literal></expr></argument>)</argument_list></call> <operator pos:start="523:56" pos:end="523:56">+</operator> <sizeof pos:start="523:58" pos:end="523:75">sizeof<argument_list pos:start="523:64" pos:end="523:75">(<argument pos:start="523:65" pos:end="523:74"><expr pos:start="523:65" pos:end="523:74"><name pos:start="523:65" pos:end="523:74">dma_addr_t</name></expr></argument>)</argument_list></sizeof></expr> </then><else pos:start="523:77" pos:end="525:41">:

                          <expr pos:start="525:27" pos:end="525:41"><name pos:start="525:27" pos:end="525:41">FW_CFG_CTL_SIZE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="529:9" pos:end="529:40"><expr pos:start="529:9" pos:end="529:39"><name pos:start="529:9" pos:end="529:13">scope</name> <operator pos:start="529:15" pos:end="529:15">=</operator> <call pos:start="529:17" pos:end="529:39"><name pos:start="529:17" pos:end="529:25">aml_scope</name><argument_list pos:start="529:26" pos:end="529:39">(<argument pos:start="529:27" pos:end="529:38"><expr pos:start="529:27" pos:end="529:38"><literal type="string" pos:start="529:27" pos:end="529:38">"\\_SB.PCI0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="531:9" pos:end="531:33"><expr pos:start="531:9" pos:end="531:32"><name pos:start="531:9" pos:end="531:11">dev</name> <operator pos:start="531:13" pos:end="531:13">=</operator> <call pos:start="531:15" pos:end="531:32"><name pos:start="531:15" pos:end="531:24">aml_device</name><argument_list pos:start="531:25" pos:end="531:32">(<argument pos:start="531:26" pos:end="531:31"><expr pos:start="531:26" pos:end="531:31"><literal type="string" pos:start="531:26" pos:end="531:31">"FWCF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="535:9" pos:end="535:71"><expr pos:start="535:9" pos:end="535:70"><call pos:start="535:9" pos:end="535:70"><name pos:start="535:9" pos:end="535:18">aml_append</name><argument_list pos:start="535:19" pos:end="535:70">(<argument pos:start="535:20" pos:end="535:22"><expr pos:start="535:20" pos:end="535:22"><name pos:start="535:20" pos:end="535:22">dev</name></expr></argument>, <argument pos:start="535:25" pos:end="535:69"><expr pos:start="535:25" pos:end="535:69"><call pos:start="535:25" pos:end="535:69"><name pos:start="535:25" pos:end="535:37">aml_name_decl</name><argument_list pos:start="535:38" pos:end="535:69">(<argument pos:start="535:39" pos:end="535:44"><expr pos:start="535:39" pos:end="535:44"><literal type="string" pos:start="535:39" pos:end="535:44">"_HID"</literal></expr></argument>, <argument pos:start="535:47" pos:end="535:68"><expr pos:start="535:47" pos:end="535:68"><call pos:start="535:47" pos:end="535:68"><name pos:start="535:47" pos:end="535:56">aml_string</name><argument_list pos:start="535:57" pos:end="535:68">(<argument pos:start="535:58" pos:end="535:67"><expr pos:start="535:58" pos:end="535:67"><literal type="string" pos:start="535:58" pos:end="535:67">"QEMU0002"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="539:9" pos:end="539:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="541:9" pos:end="541:61"><expr pos:start="541:9" pos:end="541:60"><call pos:start="541:9" pos:end="541:60"><name pos:start="541:9" pos:end="541:18">aml_append</name><argument_list pos:start="541:19" pos:end="541:60">(<argument pos:start="541:20" pos:end="541:22"><expr pos:start="541:20" pos:end="541:22"><name pos:start="541:20" pos:end="541:22">dev</name></expr></argument>, <argument pos:start="541:25" pos:end="541:59"><expr pos:start="541:25" pos:end="541:59"><call pos:start="541:25" pos:end="541:59"><name pos:start="541:25" pos:end="541:37">aml_name_decl</name><argument_list pos:start="541:38" pos:end="541:59">(<argument pos:start="541:39" pos:end="541:44"><expr pos:start="541:39" pos:end="541:44"><literal type="string" pos:start="541:39" pos:end="541:44">"_STA"</literal></expr></argument>, <argument pos:start="541:47" pos:end="541:58"><expr pos:start="541:47" pos:end="541:58"><call pos:start="541:47" pos:end="541:58"><name pos:start="541:47" pos:end="541:53">aml_int</name><argument_list pos:start="541:54" pos:end="541:58">(<argument pos:start="541:55" pos:end="541:57"><expr pos:start="541:55" pos:end="541:57"><literal type="number" pos:start="541:55" pos:end="541:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="545:9" pos:end="545:38"><expr pos:start="545:9" pos:end="545:37"><name pos:start="545:9" pos:end="545:11">crs</name> <operator pos:start="545:13" pos:end="545:13">=</operator> <call pos:start="545:15" pos:end="545:37"><name pos:start="545:15" pos:end="545:35">aml_resource_template</name><argument_list pos:start="545:36" pos:end="545:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="547:9" pos:end="551:10"><expr pos:start="547:9" pos:end="551:9"><call pos:start="547:9" pos:end="551:9"><name pos:start="547:9" pos:end="547:18">aml_append</name><argument_list pos:start="547:19" pos:end="551:9">(<argument pos:start="547:20" pos:end="547:22"><expr pos:start="547:20" pos:end="547:22"><name pos:start="547:20" pos:end="547:22">crs</name></expr></argument>,

            <argument pos:start="549:13" pos:end="549:79"><expr pos:start="549:13" pos:end="549:79"><call pos:start="549:13" pos:end="549:79"><name pos:start="549:13" pos:end="549:18">aml_io</name><argument_list pos:start="549:19" pos:end="549:79">(<argument pos:start="549:20" pos:end="549:31"><expr pos:start="549:20" pos:end="549:31"><name pos:start="549:20" pos:end="549:31">AML_DECODE16</name></expr></argument>, <argument pos:start="549:34" pos:end="549:47"><expr pos:start="549:34" pos:end="549:47"><name pos:start="549:34" pos:end="549:47">FW_CFG_IO_BASE</name></expr></argument>, <argument pos:start="549:50" pos:end="549:63"><expr pos:start="549:50" pos:end="549:63"><name pos:start="549:50" pos:end="549:63">FW_CFG_IO_BASE</name></expr></argument>, <argument pos:start="549:66" pos:end="549:69"><expr pos:start="549:66" pos:end="549:69"><literal type="number" pos:start="549:66" pos:end="549:69">0x01</literal></expr></argument>, <argument pos:start="549:72" pos:end="549:78"><expr pos:start="549:72" pos:end="549:78"><name pos:start="549:72" pos:end="549:78">io_size</name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="553:9" pos:end="553:52"><expr pos:start="553:9" pos:end="553:51"><call pos:start="553:9" pos:end="553:51"><name pos:start="553:9" pos:end="553:18">aml_append</name><argument_list pos:start="553:19" pos:end="553:51">(<argument pos:start="553:20" pos:end="553:22"><expr pos:start="553:20" pos:end="553:22"><name pos:start="553:20" pos:end="553:22">dev</name></expr></argument>, <argument pos:start="553:25" pos:end="553:50"><expr pos:start="553:25" pos:end="553:50"><call pos:start="553:25" pos:end="553:50"><name pos:start="553:25" pos:end="553:37">aml_name_decl</name><argument_list pos:start="553:38" pos:end="553:50">(<argument pos:start="553:39" pos:end="553:44"><expr pos:start="553:39" pos:end="553:44"><literal type="string" pos:start="553:39" pos:end="553:44">"_CRS"</literal></expr></argument>, <argument pos:start="553:47" pos:end="553:49"><expr pos:start="553:47" pos:end="553:49"><name pos:start="553:47" pos:end="553:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="557:9" pos:end="557:31"><expr pos:start="557:9" pos:end="557:30"><call pos:start="557:9" pos:end="557:30"><name pos:start="557:9" pos:end="557:18">aml_append</name><argument_list pos:start="557:19" pos:end="557:30">(<argument pos:start="557:20" pos:end="557:24"><expr pos:start="557:20" pos:end="557:24"><name pos:start="557:20" pos:end="557:24">scope</name></expr></argument>, <argument pos:start="557:27" pos:end="557:29"><expr pos:start="557:27" pos:end="557:29"><name pos:start="557:27" pos:end="557:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="559:9" pos:end="559:32"><expr pos:start="559:9" pos:end="559:31"><call pos:start="559:9" pos:end="559:31"><name pos:start="559:9" pos:end="559:18">aml_append</name><argument_list pos:start="559:19" pos:end="559:31">(<argument pos:start="559:20" pos:end="559:23"><expr pos:start="559:20" pos:end="559:23"><name pos:start="559:20" pos:end="559:23">dsdt</name></expr></argument>, <argument pos:start="559:26" pos:end="559:30"><expr pos:start="559:26" pos:end="559:30"><name pos:start="559:26" pos:end="559:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <if_stmt pos:start="565:5" pos:end="601:5"><if pos:start="565:5" pos:end="601:5">if <condition pos:start="565:8" pos:end="565:31">(<expr pos:start="565:9" pos:end="565:30"><name pos:start="565:9" pos:end="565:30"><name pos:start="565:9" pos:end="565:12">misc</name><operator pos:start="565:13" pos:end="565:14">-&gt;</operator><name pos:start="565:15" pos:end="565:30">applesmc_io_base</name></name></expr>)</condition> <block pos:start="565:33" pos:end="601:5">{<block_content pos:start="567:9" pos:end="599:32">

        <expr_stmt pos:start="567:9" pos:end="567:44"><expr pos:start="567:9" pos:end="567:43"><name pos:start="567:9" pos:end="567:13">scope</name> <operator pos:start="567:15" pos:end="567:15">=</operator> <call pos:start="567:17" pos:end="567:43"><name pos:start="567:17" pos:end="567:25">aml_scope</name><argument_list pos:start="567:26" pos:end="567:43">(<argument pos:start="567:27" pos:end="567:42"><expr pos:start="567:27" pos:end="567:42"><literal type="string" pos:start="567:27" pos:end="567:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="569:9" pos:end="569:32"><expr pos:start="569:9" pos:end="569:31"><name pos:start="569:9" pos:end="569:11">dev</name> <operator pos:start="569:13" pos:end="569:13">=</operator> <call pos:start="569:15" pos:end="569:31"><name pos:start="569:15" pos:end="569:24">aml_device</name><argument_list pos:start="569:25" pos:end="569:31">(<argument pos:start="569:26" pos:end="569:30"><expr pos:start="569:26" pos:end="569:30"><literal type="string" pos:start="569:26" pos:end="569:30">"SMC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="573:9" pos:end="573:70"><expr pos:start="573:9" pos:end="573:69"><call pos:start="573:9" pos:end="573:69"><name pos:start="573:9" pos:end="573:18">aml_append</name><argument_list pos:start="573:19" pos:end="573:69">(<argument pos:start="573:20" pos:end="573:22"><expr pos:start="573:20" pos:end="573:22"><name pos:start="573:20" pos:end="573:22">dev</name></expr></argument>, <argument pos:start="573:25" pos:end="573:68"><expr pos:start="573:25" pos:end="573:68"><call pos:start="573:25" pos:end="573:68"><name pos:start="573:25" pos:end="573:37">aml_name_decl</name><argument_list pos:start="573:38" pos:end="573:68">(<argument pos:start="573:39" pos:end="573:44"><expr pos:start="573:39" pos:end="573:44"><literal type="string" pos:start="573:39" pos:end="573:44">"_HID"</literal></expr></argument>, <argument pos:start="573:47" pos:end="573:67"><expr pos:start="573:47" pos:end="573:67"><call pos:start="573:47" pos:end="573:67"><name pos:start="573:47" pos:end="573:56">aml_eisaid</name><argument_list pos:start="573:57" pos:end="573:67">(<argument pos:start="573:58" pos:end="573:66"><expr pos:start="573:58" pos:end="573:66"><literal type="string" pos:start="573:58" pos:end="573:66">"APP0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="575:9" pos:end="575:68">/* device present, functioning, decoding, not shown in UI */</comment>

        <expr_stmt pos:start="577:9" pos:end="577:61"><expr pos:start="577:9" pos:end="577:60"><call pos:start="577:9" pos:end="577:60"><name pos:start="577:9" pos:end="577:18">aml_append</name><argument_list pos:start="577:19" pos:end="577:60">(<argument pos:start="577:20" pos:end="577:22"><expr pos:start="577:20" pos:end="577:22"><name pos:start="577:20" pos:end="577:22">dev</name></expr></argument>, <argument pos:start="577:25" pos:end="577:59"><expr pos:start="577:25" pos:end="577:59"><call pos:start="577:25" pos:end="577:59"><name pos:start="577:25" pos:end="577:37">aml_name_decl</name><argument_list pos:start="577:38" pos:end="577:59">(<argument pos:start="577:39" pos:end="577:44"><expr pos:start="577:39" pos:end="577:44"><literal type="string" pos:start="577:39" pos:end="577:44">"_STA"</literal></expr></argument>, <argument pos:start="577:47" pos:end="577:58"><expr pos:start="577:47" pos:end="577:58"><call pos:start="577:47" pos:end="577:58"><name pos:start="577:47" pos:end="577:53">aml_int</name><argument_list pos:start="577:54" pos:end="577:58">(<argument pos:start="577:55" pos:end="577:57"><expr pos:start="577:55" pos:end="577:57"><literal type="number" pos:start="577:55" pos:end="577:57">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="581:9" pos:end="581:38"><expr pos:start="581:9" pos:end="581:37"><name pos:start="581:9" pos:end="581:11">crs</name> <operator pos:start="581:13" pos:end="581:13">=</operator> <call pos:start="581:15" pos:end="581:37"><name pos:start="581:15" pos:end="581:35">aml_resource_template</name><argument_list pos:start="581:36" pos:end="581:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="583:9" pos:end="589:10"><expr pos:start="583:9" pos:end="589:9"><call pos:start="583:9" pos:end="589:9"><name pos:start="583:9" pos:end="583:18">aml_append</name><argument_list pos:start="583:19" pos:end="589:9">(<argument pos:start="583:20" pos:end="583:22"><expr pos:start="583:20" pos:end="583:22"><name pos:start="583:20" pos:end="583:22">crs</name></expr></argument>,

            <argument pos:start="585:13" pos:end="587:50"><expr pos:start="585:13" pos:end="587:50"><call pos:start="585:13" pos:end="587:50"><name pos:start="585:13" pos:end="585:18">aml_io</name><argument_list pos:start="585:19" pos:end="587:50">(<argument pos:start="585:20" pos:end="585:31"><expr pos:start="585:20" pos:end="585:31"><name pos:start="585:20" pos:end="585:31">AML_DECODE16</name></expr></argument>, <argument pos:start="585:34" pos:end="585:55"><expr pos:start="585:34" pos:end="585:55"><name pos:start="585:34" pos:end="585:55"><name pos:start="585:34" pos:end="585:37">misc</name><operator pos:start="585:38" pos:end="585:39">-&gt;</operator><name pos:start="585:40" pos:end="585:55">applesmc_io_base</name></name></expr></argument>, <argument pos:start="585:58" pos:end="585:79"><expr pos:start="585:58" pos:end="585:79"><name pos:start="585:58" pos:end="585:79"><name pos:start="585:58" pos:end="585:61">misc</name><operator pos:start="585:62" pos:end="585:63">-&gt;</operator><name pos:start="585:64" pos:end="585:79">applesmc_io_base</name></name></expr></argument>,

                   <argument pos:start="587:20" pos:end="587:23"><expr pos:start="587:20" pos:end="587:23"><literal type="number" pos:start="587:20" pos:end="587:23">0x01</literal></expr></argument>, <argument pos:start="587:26" pos:end="587:49"><expr pos:start="587:26" pos:end="587:49"><name pos:start="587:26" pos:end="587:49">APPLESMC_MAX_DATA_LENGTH</name></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="591:9" pos:end="591:45"><expr pos:start="591:9" pos:end="591:44"><call pos:start="591:9" pos:end="591:44"><name pos:start="591:9" pos:end="591:18">aml_append</name><argument_list pos:start="591:19" pos:end="591:44">(<argument pos:start="591:20" pos:end="591:22"><expr pos:start="591:20" pos:end="591:22"><name pos:start="591:20" pos:end="591:22">crs</name></expr></argument>, <argument pos:start="591:25" pos:end="591:43"><expr pos:start="591:25" pos:end="591:43"><call pos:start="591:25" pos:end="591:43"><name pos:start="591:25" pos:end="591:40">aml_irq_no_flags</name><argument_list pos:start="591:41" pos:end="591:43">(<argument pos:start="591:42" pos:end="591:42"><expr pos:start="591:42" pos:end="591:42"><literal type="number" pos:start="591:42" pos:end="591:42">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="593:9" pos:end="593:52"><expr pos:start="593:9" pos:end="593:51"><call pos:start="593:9" pos:end="593:51"><name pos:start="593:9" pos:end="593:18">aml_append</name><argument_list pos:start="593:19" pos:end="593:51">(<argument pos:start="593:20" pos:end="593:22"><expr pos:start="593:20" pos:end="593:22"><name pos:start="593:20" pos:end="593:22">dev</name></expr></argument>, <argument pos:start="593:25" pos:end="593:50"><expr pos:start="593:25" pos:end="593:50"><call pos:start="593:25" pos:end="593:50"><name pos:start="593:25" pos:end="593:37">aml_name_decl</name><argument_list pos:start="593:38" pos:end="593:50">(<argument pos:start="593:39" pos:end="593:44"><expr pos:start="593:39" pos:end="593:44"><literal type="string" pos:start="593:39" pos:end="593:44">"_CRS"</literal></expr></argument>, <argument pos:start="593:47" pos:end="593:49"><expr pos:start="593:47" pos:end="593:49"><name pos:start="593:47" pos:end="593:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="597:9" pos:end="597:31"><expr pos:start="597:9" pos:end="597:30"><call pos:start="597:9" pos:end="597:30"><name pos:start="597:9" pos:end="597:18">aml_append</name><argument_list pos:start="597:19" pos:end="597:30">(<argument pos:start="597:20" pos:end="597:24"><expr pos:start="597:20" pos:end="597:24"><name pos:start="597:20" pos:end="597:24">scope</name></expr></argument>, <argument pos:start="597:27" pos:end="597:29"><expr pos:start="597:27" pos:end="597:29"><name pos:start="597:27" pos:end="597:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="599:9" pos:end="599:32"><expr pos:start="599:9" pos:end="599:31"><call pos:start="599:9" pos:end="599:31"><name pos:start="599:9" pos:end="599:18">aml_append</name><argument_list pos:start="599:19" pos:end="599:31">(<argument pos:start="599:20" pos:end="599:23"><expr pos:start="599:20" pos:end="599:23"><name pos:start="599:20" pos:end="599:23">dsdt</name></expr></argument>, <argument pos:start="599:26" pos:end="599:30"><expr pos:start="599:26" pos:end="599:30"><name pos:start="599:26" pos:end="599:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="605:5" pos:end="669:5"><if pos:start="605:5" pos:end="669:5">if <condition pos:start="605:8" pos:end="605:27">(<expr pos:start="605:9" pos:end="605:26"><name pos:start="605:9" pos:end="605:26"><name pos:start="605:9" pos:end="605:12">misc</name><operator pos:start="605:13" pos:end="605:14">-&gt;</operator><name pos:start="605:15" pos:end="605:26">pvpanic_port</name></name></expr>)</condition> <block pos:start="605:29" pos:end="669:5">{<block_content pos:start="607:9" pos:end="667:32">

        <expr_stmt pos:start="607:9" pos:end="607:44"><expr pos:start="607:9" pos:end="607:43"><name pos:start="607:9" pos:end="607:13">scope</name> <operator pos:start="607:15" pos:end="607:15">=</operator> <call pos:start="607:17" pos:end="607:43"><name pos:start="607:17" pos:end="607:25">aml_scope</name><argument_list pos:start="607:26" pos:end="607:43">(<argument pos:start="607:27" pos:end="607:42"><expr pos:start="607:27" pos:end="607:42"><literal type="string" pos:start="607:27" pos:end="607:42">"\\_SB.PCI0.ISA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="611:9" pos:end="611:33"><expr pos:start="611:9" pos:end="611:32"><name pos:start="611:9" pos:end="611:11">dev</name> <operator pos:start="611:13" pos:end="611:13">=</operator> <call pos:start="611:15" pos:end="611:32"><name pos:start="611:15" pos:end="611:24">aml_device</name><argument_list pos:start="611:25" pos:end="611:32">(<argument pos:start="611:26" pos:end="611:31"><expr pos:start="611:26" pos:end="611:31"><literal type="string" pos:start="611:26" pos:end="611:31">"PEVT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="613:9" pos:end="613:71"><expr pos:start="613:9" pos:end="613:70"><call pos:start="613:9" pos:end="613:70"><name pos:start="613:9" pos:end="613:18">aml_append</name><argument_list pos:start="613:19" pos:end="613:70">(<argument pos:start="613:20" pos:end="613:22"><expr pos:start="613:20" pos:end="613:22"><name pos:start="613:20" pos:end="613:22">dev</name></expr></argument>, <argument pos:start="613:25" pos:end="613:69"><expr pos:start="613:25" pos:end="613:69"><call pos:start="613:25" pos:end="613:69"><name pos:start="613:25" pos:end="613:37">aml_name_decl</name><argument_list pos:start="613:38" pos:end="613:69">(<argument pos:start="613:39" pos:end="613:44"><expr pos:start="613:39" pos:end="613:44"><literal type="string" pos:start="613:39" pos:end="613:44">"_HID"</literal></expr></argument>, <argument pos:start="613:47" pos:end="613:68"><expr pos:start="613:47" pos:end="613:68"><call pos:start="613:47" pos:end="613:68"><name pos:start="613:47" pos:end="613:56">aml_string</name><argument_list pos:start="613:57" pos:end="613:68">(<argument pos:start="613:58" pos:end="613:67"><expr pos:start="613:58" pos:end="613:67"><literal type="string" pos:start="613:58" pos:end="613:67">"QEMU0001"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="617:9" pos:end="617:38"><expr pos:start="617:9" pos:end="617:37"><name pos:start="617:9" pos:end="617:11">crs</name> <operator pos:start="617:13" pos:end="617:13">=</operator> <call pos:start="617:15" pos:end="617:37"><name pos:start="617:15" pos:end="617:35">aml_resource_template</name><argument_list pos:start="617:36" pos:end="617:37">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="619:9" pos:end="623:10"><expr pos:start="619:9" pos:end="623:9"><call pos:start="619:9" pos:end="623:9"><name pos:start="619:9" pos:end="619:18">aml_append</name><argument_list pos:start="619:19" pos:end="623:9">(<argument pos:start="619:20" pos:end="619:22"><expr pos:start="619:20" pos:end="619:22"><name pos:start="619:20" pos:end="619:22">crs</name></expr></argument>,

            <argument pos:start="621:13" pos:end="621:78"><expr pos:start="621:13" pos:end="621:78"><call pos:start="621:13" pos:end="621:78"><name pos:start="621:13" pos:end="621:18">aml_io</name><argument_list pos:start="621:19" pos:end="621:78">(<argument pos:start="621:20" pos:end="621:31"><expr pos:start="621:20" pos:end="621:31"><name pos:start="621:20" pos:end="621:31">AML_DECODE16</name></expr></argument>, <argument pos:start="621:34" pos:end="621:51"><expr pos:start="621:34" pos:end="621:51"><name pos:start="621:34" pos:end="621:51"><name pos:start="621:34" pos:end="621:37">misc</name><operator pos:start="621:38" pos:end="621:39">-&gt;</operator><name pos:start="621:40" pos:end="621:51">pvpanic_port</name></name></expr></argument>, <argument pos:start="621:54" pos:end="621:71"><expr pos:start="621:54" pos:end="621:71"><name pos:start="621:54" pos:end="621:71"><name pos:start="621:54" pos:end="621:57">misc</name><operator pos:start="621:58" pos:end="621:59">-&gt;</operator><name pos:start="621:60" pos:end="621:71">pvpanic_port</name></name></expr></argument>, <argument pos:start="621:74" pos:end="621:74"><expr pos:start="621:74" pos:end="621:74"><literal type="number" pos:start="621:74" pos:end="621:74">1</literal></expr></argument>, <argument pos:start="621:77" pos:end="621:77"><expr pos:start="621:77" pos:end="621:77"><literal type="number" pos:start="621:77" pos:end="621:77">1</literal></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="625:9" pos:end="625:52"><expr pos:start="625:9" pos:end="625:51"><call pos:start="625:9" pos:end="625:51"><name pos:start="625:9" pos:end="625:18">aml_append</name><argument_list pos:start="625:19" pos:end="625:51">(<argument pos:start="625:20" pos:end="625:22"><expr pos:start="625:20" pos:end="625:22"><name pos:start="625:20" pos:end="625:22">dev</name></expr></argument>, <argument pos:start="625:25" pos:end="625:50"><expr pos:start="625:25" pos:end="625:50"><call pos:start="625:25" pos:end="625:50"><name pos:start="625:25" pos:end="625:37">aml_name_decl</name><argument_list pos:start="625:38" pos:end="625:50">(<argument pos:start="625:39" pos:end="625:44"><expr pos:start="625:39" pos:end="625:44"><literal type="string" pos:start="625:39" pos:end="625:44">"_CRS"</literal></expr></argument>, <argument pos:start="625:47" pos:end="625:49"><expr pos:start="625:47" pos:end="625:49"><name pos:start="625:47" pos:end="625:49">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="629:9" pos:end="631:79"><expr pos:start="629:9" pos:end="631:78"><call pos:start="629:9" pos:end="631:78"><name pos:start="629:9" pos:end="629:18">aml_append</name><argument_list pos:start="629:19" pos:end="631:78">(<argument pos:start="629:20" pos:end="629:22"><expr pos:start="629:20" pos:end="629:22"><name pos:start="629:20" pos:end="629:22">dev</name></expr></argument>, <argument pos:start="629:25" pos:end="631:77"><expr pos:start="629:25" pos:end="631:77"><call pos:start="629:25" pos:end="631:77"><name pos:start="629:25" pos:end="629:44">aml_operation_region</name><argument_list pos:start="629:45" pos:end="631:77">(<argument pos:start="629:46" pos:end="629:51"><expr pos:start="629:46" pos:end="629:51"><literal type="string" pos:start="629:46" pos:end="629:51">"PEOR"</literal></expr></argument>, <argument pos:start="629:54" pos:end="629:66"><expr pos:start="629:54" pos:end="629:66"><name pos:start="629:54" pos:end="629:66">AML_SYSTEM_IO</name></expr></argument>,

                                              <argument pos:start="631:47" pos:end="631:73"><expr pos:start="631:47" pos:end="631:73"><call pos:start="631:47" pos:end="631:73"><name pos:start="631:47" pos:end="631:53">aml_int</name><argument_list pos:start="631:54" pos:end="631:73">(<argument pos:start="631:55" pos:end="631:72"><expr pos:start="631:55" pos:end="631:72"><name pos:start="631:55" pos:end="631:72"><name pos:start="631:55" pos:end="631:58">misc</name><operator pos:start="631:59" pos:end="631:60">-&gt;</operator><name pos:start="631:61" pos:end="631:72">pvpanic_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="631:76" pos:end="631:76"><expr pos:start="631:76" pos:end="631:76"><literal type="number" pos:start="631:76" pos:end="631:76">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="633:9" pos:end="633:74"><expr pos:start="633:9" pos:end="633:73"><name pos:start="633:9" pos:end="633:13">field</name> <operator pos:start="633:15" pos:end="633:15">=</operator> <call pos:start="633:17" pos:end="633:73"><name pos:start="633:17" pos:end="633:25">aml_field</name><argument_list pos:start="633:26" pos:end="633:73">(<argument pos:start="633:27" pos:end="633:32"><expr pos:start="633:27" pos:end="633:32"><literal type="string" pos:start="633:27" pos:end="633:32">"PEOR"</literal></expr></argument>, <argument pos:start="633:35" pos:end="633:46"><expr pos:start="633:35" pos:end="633:46"><name pos:start="633:35" pos:end="633:46">AML_BYTE_ACC</name></expr></argument>, <argument pos:start="633:49" pos:end="633:58"><expr pos:start="633:49" pos:end="633:58"><name pos:start="633:49" pos:end="633:58">AML_NOLOCK</name></expr></argument>, <argument pos:start="633:61" pos:end="633:72"><expr pos:start="633:61" pos:end="633:72"><name pos:start="633:61" pos:end="633:72">AML_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="635:9" pos:end="635:54"><expr pos:start="635:9" pos:end="635:53"><call pos:start="635:9" pos:end="635:53"><name pos:start="635:9" pos:end="635:18">aml_append</name><argument_list pos:start="635:19" pos:end="635:53">(<argument pos:start="635:20" pos:end="635:24"><expr pos:start="635:20" pos:end="635:24"><name pos:start="635:20" pos:end="635:24">field</name></expr></argument>, <argument pos:start="635:27" pos:end="635:52"><expr pos:start="635:27" pos:end="635:52"><call pos:start="635:27" pos:end="635:52"><name pos:start="635:27" pos:end="635:41">aml_named_field</name><argument_list pos:start="635:42" pos:end="635:52">(<argument pos:start="635:43" pos:end="635:48"><expr pos:start="635:43" pos:end="635:48"><literal type="string" pos:start="635:43" pos:end="635:48">"PEPT"</literal></expr></argument>, <argument pos:start="635:51" pos:end="635:51"><expr pos:start="635:51" pos:end="635:51"><literal type="number" pos:start="635:51" pos:end="635:51">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="637:9" pos:end="637:31"><expr pos:start="637:9" pos:end="637:30"><call pos:start="637:9" pos:end="637:30"><name pos:start="637:9" pos:end="637:18">aml_append</name><argument_list pos:start="637:19" pos:end="637:30">(<argument pos:start="637:20" pos:end="637:22"><expr pos:start="637:20" pos:end="637:22"><name pos:start="637:20" pos:end="637:22">dev</name></expr></argument>, <argument pos:start="637:25" pos:end="637:29"><expr pos:start="637:25" pos:end="637:29"><name pos:start="637:25" pos:end="637:29">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="641:9" pos:end="641:64">/* device present, functioning, decoding, shown in UI */</comment>

        <expr_stmt pos:start="643:9" pos:end="643:61"><expr pos:start="643:9" pos:end="643:60"><call pos:start="643:9" pos:end="643:60"><name pos:start="643:9" pos:end="643:18">aml_append</name><argument_list pos:start="643:19" pos:end="643:60">(<argument pos:start="643:20" pos:end="643:22"><expr pos:start="643:20" pos:end="643:22"><name pos:start="643:20" pos:end="643:22">dev</name></expr></argument>, <argument pos:start="643:25" pos:end="643:59"><expr pos:start="643:25" pos:end="643:59"><call pos:start="643:25" pos:end="643:59"><name pos:start="643:25" pos:end="643:37">aml_name_decl</name><argument_list pos:start="643:38" pos:end="643:59">(<argument pos:start="643:39" pos:end="643:44"><expr pos:start="643:39" pos:end="643:44"><literal type="string" pos:start="643:39" pos:end="643:44">"_STA"</literal></expr></argument>, <argument pos:start="643:47" pos:end="643:58"><expr pos:start="643:47" pos:end="643:58"><call pos:start="643:47" pos:end="643:58"><name pos:start="643:47" pos:end="643:53">aml_int</name><argument_list pos:start="643:54" pos:end="643:58">(<argument pos:start="643:55" pos:end="643:57"><expr pos:start="643:55" pos:end="643:57"><literal type="number" pos:start="643:55" pos:end="643:57">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="647:9" pos:end="647:58"><expr pos:start="647:9" pos:end="647:57"><name pos:start="647:9" pos:end="647:14">method</name> <operator pos:start="647:16" pos:end="647:16">=</operator> <call pos:start="647:18" pos:end="647:57"><name pos:start="647:18" pos:end="647:27">aml_method</name><argument_list pos:start="647:28" pos:end="647:57">(<argument pos:start="647:29" pos:end="647:34"><expr pos:start="647:29" pos:end="647:34"><literal type="string" pos:start="647:29" pos:end="647:34">"RDPT"</literal></expr></argument>, <argument pos:start="647:37" pos:end="647:37"><expr pos:start="647:37" pos:end="647:37"><literal type="number" pos:start="647:37" pos:end="647:37">0</literal></expr></argument>, <argument pos:start="647:40" pos:end="647:56"><expr pos:start="647:40" pos:end="647:56"><name pos:start="647:40" pos:end="647:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="649:9" pos:end="649:70"><expr pos:start="649:9" pos:end="649:69"><call pos:start="649:9" pos:end="649:69"><name pos:start="649:9" pos:end="649:18">aml_append</name><argument_list pos:start="649:19" pos:end="649:69">(<argument pos:start="649:20" pos:end="649:25"><expr pos:start="649:20" pos:end="649:25"><name pos:start="649:20" pos:end="649:25">method</name></expr></argument>, <argument pos:start="649:28" pos:end="649:68"><expr pos:start="649:28" pos:end="649:68"><call pos:start="649:28" pos:end="649:68"><name pos:start="649:28" pos:end="649:36">aml_store</name><argument_list pos:start="649:37" pos:end="649:68">(<argument pos:start="649:38" pos:end="649:53"><expr pos:start="649:38" pos:end="649:53"><call pos:start="649:38" pos:end="649:53"><name pos:start="649:38" pos:end="649:45">aml_name</name><argument_list pos:start="649:46" pos:end="649:53">(<argument pos:start="649:47" pos:end="649:52"><expr pos:start="649:47" pos:end="649:52"><literal type="string" pos:start="649:47" pos:end="649:52">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="649:56" pos:end="649:67"><expr pos:start="649:56" pos:end="649:67"><call pos:start="649:56" pos:end="649:67"><name pos:start="649:56" pos:end="649:64">aml_local</name><argument_list pos:start="649:65" pos:end="649:67">(<argument pos:start="649:66" pos:end="649:66"><expr pos:start="649:66" pos:end="649:66"><literal type="number" pos:start="649:66" pos:end="649:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="651:9" pos:end="651:53"><expr pos:start="651:9" pos:end="651:52"><call pos:start="651:9" pos:end="651:52"><name pos:start="651:9" pos:end="651:18">aml_append</name><argument_list pos:start="651:19" pos:end="651:52">(<argument pos:start="651:20" pos:end="651:25"><expr pos:start="651:20" pos:end="651:25"><name pos:start="651:20" pos:end="651:25">method</name></expr></argument>, <argument pos:start="651:28" pos:end="651:51"><expr pos:start="651:28" pos:end="651:51"><call pos:start="651:28" pos:end="651:51"><name pos:start="651:28" pos:end="651:37">aml_return</name><argument_list pos:start="651:38" pos:end="651:51">(<argument pos:start="651:39" pos:end="651:50"><expr pos:start="651:39" pos:end="651:50"><call pos:start="651:39" pos:end="651:50"><name pos:start="651:39" pos:end="651:47">aml_local</name><argument_list pos:start="651:48" pos:end="651:50">(<argument pos:start="651:49" pos:end="651:49"><expr pos:start="651:49" pos:end="651:49"><literal type="number" pos:start="651:49" pos:end="651:49">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="653:9" pos:end="653:32"><expr pos:start="653:9" pos:end="653:31"><call pos:start="653:9" pos:end="653:31"><name pos:start="653:9" pos:end="653:18">aml_append</name><argument_list pos:start="653:19" pos:end="653:31">(<argument pos:start="653:20" pos:end="653:22"><expr pos:start="653:20" pos:end="653:22"><name pos:start="653:20" pos:end="653:22">dev</name></expr></argument>, <argument pos:start="653:25" pos:end="653:30"><expr pos:start="653:25" pos:end="653:30"><name pos:start="653:25" pos:end="653:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="657:9" pos:end="657:58"><expr pos:start="657:9" pos:end="657:57"><name pos:start="657:9" pos:end="657:14">method</name> <operator pos:start="657:16" pos:end="657:16">=</operator> <call pos:start="657:18" pos:end="657:57"><name pos:start="657:18" pos:end="657:27">aml_method</name><argument_list pos:start="657:28" pos:end="657:57">(<argument pos:start="657:29" pos:end="657:34"><expr pos:start="657:29" pos:end="657:34"><literal type="string" pos:start="657:29" pos:end="657:34">"WRPT"</literal></expr></argument>, <argument pos:start="657:37" pos:end="657:37"><expr pos:start="657:37" pos:end="657:37"><literal type="number" pos:start="657:37" pos:end="657:37">1</literal></expr></argument>, <argument pos:start="657:40" pos:end="657:56"><expr pos:start="657:40" pos:end="657:56"><name pos:start="657:40" pos:end="657:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="659:9" pos:end="659:68"><expr pos:start="659:9" pos:end="659:67"><call pos:start="659:9" pos:end="659:67"><name pos:start="659:9" pos:end="659:18">aml_append</name><argument_list pos:start="659:19" pos:end="659:67">(<argument pos:start="659:20" pos:end="659:25"><expr pos:start="659:20" pos:end="659:25"><name pos:start="659:20" pos:end="659:25">method</name></expr></argument>, <argument pos:start="659:28" pos:end="659:66"><expr pos:start="659:28" pos:end="659:66"><call pos:start="659:28" pos:end="659:66"><name pos:start="659:28" pos:end="659:36">aml_store</name><argument_list pos:start="659:37" pos:end="659:66">(<argument pos:start="659:38" pos:end="659:47"><expr pos:start="659:38" pos:end="659:47"><call pos:start="659:38" pos:end="659:47"><name pos:start="659:38" pos:end="659:44">aml_arg</name><argument_list pos:start="659:45" pos:end="659:47">(<argument pos:start="659:46" pos:end="659:46"><expr pos:start="659:46" pos:end="659:46"><literal type="number" pos:start="659:46" pos:end="659:46">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="659:50" pos:end="659:65"><expr pos:start="659:50" pos:end="659:65"><call pos:start="659:50" pos:end="659:65"><name pos:start="659:50" pos:end="659:57">aml_name</name><argument_list pos:start="659:58" pos:end="659:65">(<argument pos:start="659:59" pos:end="659:64"><expr pos:start="659:59" pos:end="659:64"><literal type="string" pos:start="659:59" pos:end="659:64">"PEPT"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="661:9" pos:end="661:32"><expr pos:start="661:9" pos:end="661:31"><call pos:start="661:9" pos:end="661:31"><name pos:start="661:9" pos:end="661:18">aml_append</name><argument_list pos:start="661:19" pos:end="661:31">(<argument pos:start="661:20" pos:end="661:22"><expr pos:start="661:20" pos:end="661:22"><name pos:start="661:20" pos:end="661:22">dev</name></expr></argument>, <argument pos:start="661:25" pos:end="661:30"><expr pos:start="661:25" pos:end="661:30"><name pos:start="661:25" pos:end="661:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="665:9" pos:end="665:31"><expr pos:start="665:9" pos:end="665:30"><call pos:start="665:9" pos:end="665:30"><name pos:start="665:9" pos:end="665:18">aml_append</name><argument_list pos:start="665:19" pos:end="665:30">(<argument pos:start="665:20" pos:end="665:24"><expr pos:start="665:20" pos:end="665:24"><name pos:start="665:20" pos:end="665:24">scope</name></expr></argument>, <argument pos:start="665:27" pos:end="665:29"><expr pos:start="665:27" pos:end="665:29"><name pos:start="665:27" pos:end="665:29">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="667:9" pos:end="667:32"><expr pos:start="667:9" pos:end="667:31"><call pos:start="667:9" pos:end="667:31"><name pos:start="667:9" pos:end="667:18">aml_append</name><argument_list pos:start="667:19" pos:end="667:31">(<argument pos:start="667:20" pos:end="667:23"><expr pos:start="667:20" pos:end="667:23"><name pos:start="667:20" pos:end="667:23">dsdt</name></expr></argument>, <argument pos:start="667:26" pos:end="667:30"><expr pos:start="667:26" pos:end="667:30"><name pos:start="667:26" pos:end="667:30">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="673:5" pos:end="673:34"><expr pos:start="673:5" pos:end="673:33"><name pos:start="673:5" pos:end="673:12">sb_scope</name> <operator pos:start="673:14" pos:end="673:14">=</operator> <call pos:start="673:16" pos:end="673:33"><name pos:start="673:16" pos:end="673:24">aml_scope</name><argument_list pos:start="673:25" pos:end="673:33">(<argument pos:start="673:26" pos:end="673:32"><expr pos:start="673:26" pos:end="673:32"><literal type="string" pos:start="673:26" pos:end="673:32">"\\_SB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="675:5" pos:end="747:5">{<block_content pos:start="677:9" pos:end="745:35">

        <expr_stmt pos:start="677:9" pos:end="677:72"><expr pos:start="677:9" pos:end="677:71"><call pos:start="677:9" pos:end="677:71"><name pos:start="677:9" pos:end="677:31">build_processor_devices</name><argument_list pos:start="677:32" pos:end="677:71">(<argument pos:start="677:33" pos:end="677:40"><expr pos:start="677:33" pos:end="677:40"><name pos:start="677:33" pos:end="677:40">sb_scope</name></expr></argument>, <argument pos:start="677:43" pos:end="677:61"><expr pos:start="677:43" pos:end="677:61"><name pos:start="677:43" pos:end="677:61"><name pos:start="677:43" pos:end="677:46">pcms</name><operator pos:start="677:47" pos:end="677:48">-&gt;</operator><name pos:start="677:49" pos:end="677:61">apic_id_limit</name></name></expr></argument>, <argument pos:start="677:64" pos:end="677:66"><expr pos:start="677:64" pos:end="677:66"><name pos:start="677:64" pos:end="677:66">cpu</name></expr></argument>, <argument pos:start="677:69" pos:end="677:70"><expr pos:start="677:69" pos:end="677:70"><name pos:start="677:69" pos:end="677:70">pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="681:9" pos:end="683:48"><expr pos:start="681:9" pos:end="683:47"><call pos:start="681:9" pos:end="683:47"><name pos:start="681:9" pos:end="681:28">build_memory_devices</name><argument_list pos:start="681:29" pos:end="683:47">(<argument pos:start="681:30" pos:end="681:37"><expr pos:start="681:30" pos:end="681:37"><name pos:start="681:30" pos:end="681:37">sb_scope</name></expr></argument>, <argument pos:start="681:40" pos:end="681:45"><expr pos:start="681:40" pos:end="681:45"><name pos:start="681:40" pos:end="681:45">nr_mem</name></expr></argument>, <argument pos:start="681:48" pos:end="681:65"><expr pos:start="681:48" pos:end="681:65"><name pos:start="681:48" pos:end="681:65"><name pos:start="681:48" pos:end="681:49">pm</name><operator pos:start="681:50" pos:end="681:51">-&gt;</operator><name pos:start="681:52" pos:end="681:65">mem_hp_io_base</name></name></expr></argument>,

                             <argument pos:start="683:30" pos:end="683:46"><expr pos:start="683:30" pos:end="683:46"><name pos:start="683:30" pos:end="683:46"><name pos:start="683:30" pos:end="683:31">pm</name><operator pos:start="683:32" pos:end="683:33">-&gt;</operator><name pos:start="683:34" pos:end="683:46">mem_hp_io_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <block pos:start="687:9" pos:end="743:9">{<block_content pos:start="689:13" pos:end="741:13">

            <decl_stmt pos:start="689:13" pos:end="689:29"><decl pos:start="689:13" pos:end="689:28"><type pos:start="689:13" pos:end="689:20"><name pos:start="689:13" pos:end="689:18">Object</name> <modifier pos:start="689:20" pos:end="689:20">*</modifier></type><name pos:start="689:21" pos:end="689:28">pci_host</name></decl>;</decl_stmt>

            <decl_stmt pos:start="691:13" pos:end="691:31"><decl pos:start="691:13" pos:end="691:30"><type pos:start="691:13" pos:end="691:20"><name pos:start="691:13" pos:end="691:18">PCIBus</name> <modifier pos:start="691:20" pos:end="691:20">*</modifier></type><name pos:start="691:21" pos:end="691:23">bus</name> <init pos:start="691:25" pos:end="691:30">= <expr pos:start="691:27" pos:end="691:30"><name pos:start="691:27" pos:end="691:30">NULL</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="695:13" pos:end="695:48"><expr pos:start="695:13" pos:end="695:47"><name pos:start="695:13" pos:end="695:20">pci_host</name> <operator pos:start="695:22" pos:end="695:22">=</operator> <call pos:start="695:24" pos:end="695:47"><name pos:start="695:24" pos:end="695:45">acpi_get_i386_pci_host</name><argument_list pos:start="695:46" pos:end="695:47">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="697:13" pos:end="701:13"><if pos:start="697:13" pos:end="701:13">if <condition pos:start="697:16" pos:end="697:25">(<expr pos:start="697:17" pos:end="697:24"><name pos:start="697:17" pos:end="697:24">pci_host</name></expr>)</condition> <block pos:start="697:27" pos:end="701:13">{<block_content pos:start="699:17" pos:end="699:53">

                <expr_stmt pos:start="699:17" pos:end="699:53"><expr pos:start="699:17" pos:end="699:52"><name pos:start="699:17" pos:end="699:19">bus</name> <operator pos:start="699:21" pos:end="699:21">=</operator> <call pos:start="699:23" pos:end="699:47"><name pos:start="699:23" pos:end="699:37">PCI_HOST_BRIDGE</name><argument_list pos:start="699:38" pos:end="699:47">(<argument pos:start="699:39" pos:end="699:46"><expr pos:start="699:39" pos:end="699:46"><name pos:start="699:39" pos:end="699:46">pci_host</name></expr></argument>)</argument_list></call><operator pos:start="699:48" pos:end="699:49">-&gt;</operator><name pos:start="699:50" pos:end="699:52">bus</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="705:13" pos:end="741:13"><if pos:start="705:13" pos:end="741:13">if <condition pos:start="705:16" pos:end="705:20">(<expr pos:start="705:17" pos:end="705:19"><name pos:start="705:17" pos:end="705:19">bus</name></expr>)</condition> <block pos:start="705:22" pos:end="741:13">{<block_content pos:start="707:17" pos:end="739:44">

                <decl_stmt pos:start="707:17" pos:end="707:47"><decl pos:start="707:17" pos:end="707:46"><type pos:start="707:17" pos:end="707:21"><name pos:start="707:17" pos:end="707:19">Aml</name> <modifier pos:start="707:21" pos:end="707:21">*</modifier></type><name pos:start="707:22" pos:end="707:26">scope</name> <init pos:start="707:28" pos:end="707:46">= <expr pos:start="707:30" pos:end="707:46"><call pos:start="707:30" pos:end="707:46"><name pos:start="707:30" pos:end="707:38">aml_scope</name><argument_list pos:start="707:39" pos:end="707:46">(<argument pos:start="707:40" pos:end="707:45"><expr pos:start="707:40" pos:end="707:45"><literal type="string" pos:start="707:40" pos:end="707:45">"PCI0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="block" pos:start="709:17" pos:end="709:77">/* Scan all PCI buses. Generate tables to support hotplug. */</comment>

                <expr_stmt pos:start="711:17" pos:end="711:78"><expr pos:start="711:17" pos:end="711:77"><call pos:start="711:17" pos:end="711:77"><name pos:start="711:17" pos:end="711:44">build_append_pci_bus_devices</name><argument_list pos:start="711:45" pos:end="711:77">(<argument pos:start="711:46" pos:end="711:50"><expr pos:start="711:46" pos:end="711:50"><name pos:start="711:46" pos:end="711:50">scope</name></expr></argument>, <argument pos:start="711:53" pos:end="711:55"><expr pos:start="711:53" pos:end="711:55"><name pos:start="711:53" pos:end="711:55">bus</name></expr></argument>, <argument pos:start="711:58" pos:end="711:76"><expr pos:start="711:58" pos:end="711:76"><name pos:start="711:58" pos:end="711:76"><name pos:start="711:58" pos:end="711:59">pm</name><operator pos:start="711:60" pos:end="711:61">-&gt;</operator><name pos:start="711:62" pos:end="711:76">pcihp_bridge_en</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="715:17" pos:end="735:17"><if pos:start="715:17" pos:end="735:17">if <condition pos:start="715:20" pos:end="715:60">(<expr pos:start="715:21" pos:end="715:59"><name pos:start="715:21" pos:end="715:37"><name pos:start="715:21" pos:end="715:24">misc</name><operator pos:start="715:25" pos:end="715:26">-&gt;</operator><name pos:start="715:27" pos:end="715:37">tpm_version</name></name> <operator pos:start="715:39" pos:end="715:40">!=</operator> <name pos:start="715:42" pos:end="715:59">TPM_VERSION_UNSPEC</name></expr>)</condition> <block pos:start="715:62" pos:end="735:17">{<block_content pos:start="717:21" pos:end="733:43">

                    <expr_stmt pos:start="717:21" pos:end="717:48"><expr pos:start="717:21" pos:end="717:47"><name pos:start="717:21" pos:end="717:23">dev</name> <operator pos:start="717:25" pos:end="717:25">=</operator> <call pos:start="717:27" pos:end="717:47"><name pos:start="717:27" pos:end="717:36">aml_device</name><argument_list pos:start="717:37" pos:end="717:47">(<argument pos:start="717:38" pos:end="717:46"><expr pos:start="717:38" pos:end="717:46"><literal type="string" pos:start="717:38" pos:end="717:46">"ISA.TPM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="719:21" pos:end="719:82"><expr pos:start="719:21" pos:end="719:81"><call pos:start="719:21" pos:end="719:81"><name pos:start="719:21" pos:end="719:30">aml_append</name><argument_list pos:start="719:31" pos:end="719:81">(<argument pos:start="719:32" pos:end="719:34"><expr pos:start="719:32" pos:end="719:34"><name pos:start="719:32" pos:end="719:34">dev</name></expr></argument>, <argument pos:start="719:37" pos:end="719:80"><expr pos:start="719:37" pos:end="719:80"><call pos:start="719:37" pos:end="719:80"><name pos:start="719:37" pos:end="719:49">aml_name_decl</name><argument_list pos:start="719:50" pos:end="719:80">(<argument pos:start="719:51" pos:end="719:56"><expr pos:start="719:51" pos:end="719:56"><literal type="string" pos:start="719:51" pos:end="719:56">"_HID"</literal></expr></argument>, <argument pos:start="719:59" pos:end="719:79"><expr pos:start="719:59" pos:end="719:79"><call pos:start="719:59" pos:end="719:79"><name pos:start="719:59" pos:end="719:68">aml_eisaid</name><argument_list pos:start="719:69" pos:end="719:79">(<argument pos:start="719:70" pos:end="719:78"><expr pos:start="719:70" pos:end="719:78"><literal type="string" pos:start="719:70" pos:end="719:78">"PNP0C31"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="721:21" pos:end="721:73"><expr pos:start="721:21" pos:end="721:72"><call pos:start="721:21" pos:end="721:72"><name pos:start="721:21" pos:end="721:30">aml_append</name><argument_list pos:start="721:31" pos:end="721:72">(<argument pos:start="721:32" pos:end="721:34"><expr pos:start="721:32" pos:end="721:34"><name pos:start="721:32" pos:end="721:34">dev</name></expr></argument>, <argument pos:start="721:37" pos:end="721:71"><expr pos:start="721:37" pos:end="721:71"><call pos:start="721:37" pos:end="721:71"><name pos:start="721:37" pos:end="721:49">aml_name_decl</name><argument_list pos:start="721:50" pos:end="721:71">(<argument pos:start="721:51" pos:end="721:56"><expr pos:start="721:51" pos:end="721:56"><literal type="string" pos:start="721:51" pos:end="721:56">"_STA"</literal></expr></argument>, <argument pos:start="721:59" pos:end="721:70"><expr pos:start="721:59" pos:end="721:70"><call pos:start="721:59" pos:end="721:70"><name pos:start="721:59" pos:end="721:65">aml_int</name><argument_list pos:start="721:66" pos:end="721:70">(<argument pos:start="721:67" pos:end="721:69"><expr pos:start="721:67" pos:end="721:69"><literal type="number" pos:start="721:67" pos:end="721:69">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="723:21" pos:end="723:50"><expr pos:start="723:21" pos:end="723:49"><name pos:start="723:21" pos:end="723:23">crs</name> <operator pos:start="723:25" pos:end="723:25">=</operator> <call pos:start="723:27" pos:end="723:49"><name pos:start="723:27" pos:end="723:47">aml_resource_template</name><argument_list pos:start="723:48" pos:end="723:49">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="725:21" pos:end="727:67"><expr pos:start="725:21" pos:end="727:66"><call pos:start="725:21" pos:end="727:66"><name pos:start="725:21" pos:end="725:30">aml_append</name><argument_list pos:start="725:31" pos:end="727:66">(<argument pos:start="725:32" pos:end="725:34"><expr pos:start="725:32" pos:end="725:34"><name pos:start="725:32" pos:end="725:34">crs</name></expr></argument>, <argument pos:start="725:37" pos:end="727:65"><expr pos:start="725:37" pos:end="727:65"><call pos:start="725:37" pos:end="727:65"><name pos:start="725:37" pos:end="725:54">aml_memory32_fixed</name><argument_list pos:start="725:55" pos:end="727:65">(<argument pos:start="725:56" pos:end="725:72"><expr pos:start="725:56" pos:end="725:72"><name pos:start="725:56" pos:end="725:72">TPM_TIS_ADDR_BASE</name></expr></argument>,

                               <argument pos:start="727:32" pos:end="727:48"><expr pos:start="727:32" pos:end="727:48"><name pos:start="727:32" pos:end="727:48">TPM_TIS_ADDR_SIZE</name></expr></argument>, <argument pos:start="727:51" pos:end="727:64"><expr pos:start="727:51" pos:end="727:64"><name pos:start="727:51" pos:end="727:64">AML_READ_WRITE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="729:21" pos:end="729:67"><expr pos:start="729:21" pos:end="729:66"><call pos:start="729:21" pos:end="729:66"><name pos:start="729:21" pos:end="729:30">aml_append</name><argument_list pos:start="729:31" pos:end="729:66">(<argument pos:start="729:32" pos:end="729:34"><expr pos:start="729:32" pos:end="729:34"><name pos:start="729:32" pos:end="729:34">crs</name></expr></argument>, <argument pos:start="729:37" pos:end="729:65"><expr pos:start="729:37" pos:end="729:65"><call pos:start="729:37" pos:end="729:65"><name pos:start="729:37" pos:end="729:52">aml_irq_no_flags</name><argument_list pos:start="729:53" pos:end="729:65">(<argument pos:start="729:54" pos:end="729:64"><expr pos:start="729:54" pos:end="729:64"><name pos:start="729:54" pos:end="729:64">TPM_TIS_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="731:21" pos:end="731:64"><expr pos:start="731:21" pos:end="731:63"><call pos:start="731:21" pos:end="731:63"><name pos:start="731:21" pos:end="731:30">aml_append</name><argument_list pos:start="731:31" pos:end="731:63">(<argument pos:start="731:32" pos:end="731:34"><expr pos:start="731:32" pos:end="731:34"><name pos:start="731:32" pos:end="731:34">dev</name></expr></argument>, <argument pos:start="731:37" pos:end="731:62"><expr pos:start="731:37" pos:end="731:62"><call pos:start="731:37" pos:end="731:62"><name pos:start="731:37" pos:end="731:49">aml_name_decl</name><argument_list pos:start="731:50" pos:end="731:62">(<argument pos:start="731:51" pos:end="731:56"><expr pos:start="731:51" pos:end="731:56"><literal type="string" pos:start="731:51" pos:end="731:56">"_CRS"</literal></expr></argument>, <argument pos:start="731:59" pos:end="731:61"><expr pos:start="731:59" pos:end="731:61"><name pos:start="731:59" pos:end="731:61">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="733:21" pos:end="733:43"><expr pos:start="733:21" pos:end="733:42"><call pos:start="733:21" pos:end="733:42"><name pos:start="733:21" pos:end="733:30">aml_append</name><argument_list pos:start="733:31" pos:end="733:42">(<argument pos:start="733:32" pos:end="733:36"><expr pos:start="733:32" pos:end="733:36"><name pos:start="733:32" pos:end="733:36">scope</name></expr></argument>, <argument pos:start="733:39" pos:end="733:41"><expr pos:start="733:39" pos:end="733:41"><name pos:start="733:39" pos:end="733:41">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="739:17" pos:end="739:44"><expr pos:start="739:17" pos:end="739:43"><call pos:start="739:17" pos:end="739:43"><name pos:start="739:17" pos:end="739:26">aml_append</name><argument_list pos:start="739:27" pos:end="739:43">(<argument pos:start="739:28" pos:end="739:35"><expr pos:start="739:28" pos:end="739:35"><name pos:start="739:28" pos:end="739:35">sb_scope</name></expr></argument>, <argument pos:start="739:38" pos:end="739:42"><expr pos:start="739:38" pos:end="739:42"><name pos:start="739:38" pos:end="739:42">scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="745:9" pos:end="745:35"><expr pos:start="745:9" pos:end="745:34"><call pos:start="745:9" pos:end="745:34"><name pos:start="745:9" pos:end="745:18">aml_append</name><argument_list pos:start="745:19" pos:end="745:34">(<argument pos:start="745:20" pos:end="745:23"><expr pos:start="745:20" pos:end="745:23"><name pos:start="745:20" pos:end="745:23">dsdt</name></expr></argument>, <argument pos:start="745:26" pos:end="745:33"><expr pos:start="745:26" pos:end="745:33"><name pos:start="745:26" pos:end="745:33">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="751:5" pos:end="751:69">/* copy AML table into ACPI tables blob and patch header there */</comment>

    <expr_stmt pos:start="753:5" pos:end="753:69"><expr pos:start="753:5" pos:end="753:68"><call pos:start="753:5" pos:end="753:68"><name pos:start="753:5" pos:end="753:23">g_array_append_vals</name><argument_list pos:start="753:24" pos:end="753:68">(<argument pos:start="753:25" pos:end="753:34"><expr pos:start="753:25" pos:end="753:34"><name pos:start="753:25" pos:end="753:34">table_data</name></expr></argument>, <argument pos:start="753:37" pos:end="753:51"><expr pos:start="753:37" pos:end="753:51"><name pos:start="753:37" pos:end="753:51"><name pos:start="753:37" pos:end="753:40">dsdt</name><operator pos:start="753:41" pos:end="753:42">-&gt;</operator><name pos:start="753:43" pos:end="753:45">buf</name><operator pos:start="753:46" pos:end="753:47">-&gt;</operator><name pos:start="753:48" pos:end="753:51">data</name></name></expr></argument>, <argument pos:start="753:54" pos:end="753:67"><expr pos:start="753:54" pos:end="753:67"><name pos:start="753:54" pos:end="753:67"><name pos:start="753:54" pos:end="753:57">dsdt</name><operator pos:start="753:58" pos:end="753:59">-&gt;</operator><name pos:start="753:60" pos:end="753:62">buf</name><operator pos:start="753:63" pos:end="753:64">-&gt;</operator><name pos:start="753:65" pos:end="753:67">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="755:5" pos:end="759:47"><expr pos:start="755:5" pos:end="759:46"><call pos:start="755:5" pos:end="759:46"><name pos:start="755:5" pos:end="755:16">build_header</name><argument_list pos:start="755:17" pos:end="759:46">(<argument pos:start="755:18" pos:end="755:23"><expr pos:start="755:18" pos:end="755:23"><name pos:start="755:18" pos:end="755:23">linker</name></expr></argument>, <argument pos:start="755:26" pos:end="755:35"><expr pos:start="755:26" pos:end="755:35"><name pos:start="755:26" pos:end="755:35">table_data</name></expr></argument>,

        <argument pos:start="757:9" pos:end="757:69"><expr pos:start="757:9" pos:end="757:69"><operator pos:start="757:9" pos:end="757:9">(</operator><name pos:start="757:10" pos:end="757:13">void</name> <operator pos:start="757:15" pos:end="757:15">*</operator><operator pos:start="757:16" pos:end="757:16">)</operator><operator pos:start="757:17" pos:end="757:17">(</operator><name pos:start="757:18" pos:end="757:33"><name pos:start="757:18" pos:end="757:27">table_data</name><operator pos:start="757:28" pos:end="757:29">-&gt;</operator><name pos:start="757:30" pos:end="757:33">data</name></name> <operator pos:start="757:35" pos:end="757:35">+</operator> <name pos:start="757:37" pos:end="757:51"><name pos:start="757:37" pos:end="757:46">table_data</name><operator pos:start="757:47" pos:end="757:48">-&gt;</operator><name pos:start="757:49" pos:end="757:51">len</name></name> <operator pos:start="757:53" pos:end="757:53">-</operator> <name pos:start="757:55" pos:end="757:68"><name pos:start="757:55" pos:end="757:58">dsdt</name><operator pos:start="757:59" pos:end="757:60">-&gt;</operator><name pos:start="757:61" pos:end="757:63">buf</name><operator pos:start="757:64" pos:end="757:65">-&gt;</operator><name pos:start="757:66" pos:end="757:68">len</name></name><operator pos:start="757:69" pos:end="757:69">)</operator></expr></argument>,

        <argument pos:start="759:9" pos:end="759:14"><expr pos:start="759:9" pos:end="759:14"><literal type="string" pos:start="759:9" pos:end="759:14">"DSDT"</literal></expr></argument>, <argument pos:start="759:17" pos:end="759:30"><expr pos:start="759:17" pos:end="759:30"><name pos:start="759:17" pos:end="759:30"><name pos:start="759:17" pos:end="759:20">dsdt</name><operator pos:start="759:21" pos:end="759:22">-&gt;</operator><name pos:start="759:23" pos:end="759:25">buf</name><operator pos:start="759:26" pos:end="759:27">-&gt;</operator><name pos:start="759:28" pos:end="759:30">len</name></name></expr></argument>, <argument pos:start="759:33" pos:end="759:33"><expr pos:start="759:33" pos:end="759:33"><literal type="number" pos:start="759:33" pos:end="759:33">1</literal></expr></argument>, <argument pos:start="759:36" pos:end="759:39"><expr pos:start="759:36" pos:end="759:39"><name pos:start="759:36" pos:end="759:39">NULL</name></expr></argument>, <argument pos:start="759:42" pos:end="759:45"><expr pos:start="759:42" pos:end="759:45"><name pos:start="759:42" pos:end="759:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="761:5" pos:end="761:25"><expr pos:start="761:5" pos:end="761:24"><call pos:start="761:5" pos:end="761:24"><name pos:start="761:5" pos:end="761:22">free_aml_allocator</name><argument_list pos:start="761:23" pos:end="761:24">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
