<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26648.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">hqx_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:66">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:48"><decl pos:start="3:29" pos:end="3:48"><type pos:start="3:29" pos:end="3:48"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:48">got_picture_ptr</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:65"><decl pos:start="3:51" pos:end="3:65"><type pos:start="3:51" pos:end="3:65"><name pos:start="3:51" pos:end="3:58">AVPacket</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:65">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="209:1">{<block_content pos:start="7:5" pos:end="207:23">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">HQXContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">ctx</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:27">avctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">src</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:21">info_tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">data_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:14">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:28">(<expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:13">avpkt</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:19">size</name></name> <operator pos:start="19:21" pos:end="19:21">&lt;</operator> <literal type="number" pos:start="19:23" pos:end="19:25">4</literal> <operator pos:start="19:25" pos:end="19:25">+</operator> <literal type="number" pos:start="19:27" pos:end="19:27">4</literal></expr>)</condition> <block pos:start="19:30" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:35">

        <expr_stmt pos:start="21:9" pos:end="21:77"><expr pos:start="21:9" pos:end="21:76"><call pos:start="21:9" pos:end="21:76"><name pos:start="21:9" pos:end="21:14">av_log</name><argument_list pos:start="21:15" pos:end="21:76">(<argument pos:start="21:16" pos:end="21:20"><expr pos:start="21:16" pos:end="21:20"><name pos:start="21:16" pos:end="21:20">avctx</name></expr></argument>, <argument pos:start="21:23" pos:end="21:34"><expr pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:37" pos:end="21:62"><expr pos:start="21:37" pos:end="21:62"><literal type="string" pos:start="21:37" pos:end="21:62">"Frame is too small %d.\n"</literal></expr></argument>, <argument pos:start="21:65" pos:end="21:75"><expr pos:start="21:65" pos:end="21:75"><name pos:start="21:65" pos:end="21:75"><name pos:start="21:65" pos:end="21:69">avpkt</name><operator pos:start="21:70" pos:end="21:71">-&gt;</operator><name pos:start="21:72" pos:end="21:75">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:35">return <expr pos:start="23:16" pos:end="23:34"><name pos:start="23:16" pos:end="23:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:12">info_tag</name>    <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:30"><name pos:start="29:19" pos:end="29:25">AV_RL32</name><argument_list pos:start="29:26" pos:end="29:30">(<argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><name pos:start="29:27" pos:end="29:29">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="55:5"><if pos:start="31:5" pos:end="55:5">if <condition pos:start="31:8" pos:end="31:46">(<expr pos:start="31:9" pos:end="31:45"><name pos:start="31:9" pos:end="31:16">info_tag</name> <operator pos:start="31:18" pos:end="31:19">==</operator> <call pos:start="31:21" pos:end="31:45"><name pos:start="31:21" pos:end="31:25">MKTAG</name><argument_list pos:start="31:26" pos:end="31:45">(<argument pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><literal type="char" pos:start="31:27" pos:end="31:29">'I'</literal></expr></argument>, <argument pos:start="31:32" pos:end="31:34"><expr pos:start="31:32" pos:end="31:34"><literal type="char" pos:start="31:32" pos:end="31:34">'N'</literal></expr></argument>, <argument pos:start="31:37" pos:end="31:39"><expr pos:start="31:37" pos:end="31:39"><literal type="char" pos:start="31:37" pos:end="31:39">'F'</literal></expr></argument>, <argument pos:start="31:42" pos:end="31:44"><expr pos:start="31:42" pos:end="31:44"><literal type="char" pos:start="31:42" pos:end="31:44">'O'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:48" pos:end="55:5">{<block_content pos:start="33:9" pos:end="53:35">

        <decl_stmt pos:start="33:9" pos:end="33:43"><decl pos:start="33:9" pos:end="33:42"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:23">info_offset</name> <init pos:start="33:25" pos:end="33:42">= <expr pos:start="33:27" pos:end="33:42"><call pos:start="33:27" pos:end="33:42"><name pos:start="33:27" pos:end="33:33">AV_RL32</name><argument_list pos:start="33:34" pos:end="33:42">(<argument pos:start="33:35" pos:end="33:41"><expr pos:start="33:35" pos:end="33:41"><name pos:start="33:35" pos:end="33:37">src</name> <operator pos:start="33:39" pos:end="33:39">+</operator> <literal type="number" pos:start="33:41" pos:end="33:41">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="35:9" pos:end="45:9"><if pos:start="35:9" pos:end="45:9">if <condition pos:start="35:12" pos:end="35:74">(<expr pos:start="35:13" pos:end="35:73"><name pos:start="35:13" pos:end="35:23">info_offset</name> <operator pos:start="35:25" pos:end="35:25">&gt;</operator> <name pos:start="35:27" pos:end="35:36">UINT32_MAX</name> <operator pos:start="35:38" pos:end="35:38">-</operator> <literal type="number" pos:start="35:40" pos:end="35:40">8</literal> <operator pos:start="35:42" pos:end="35:43">||</operator> <name pos:start="35:45" pos:end="35:55">info_offset</name> <operator pos:start="35:57" pos:end="35:57">+</operator> <literal type="number" pos:start="35:59" pos:end="35:59">8</literal> <operator pos:start="35:61" pos:end="35:61">&gt;</operator> <name pos:start="35:63" pos:end="35:73"><name pos:start="35:63" pos:end="35:67">avpkt</name><operator pos:start="35:68" pos:end="35:69">-&gt;</operator><name pos:start="35:70" pos:end="35:73">size</name></name></expr>)</condition> <block pos:start="35:76" pos:end="45:9">{<block_content pos:start="37:13" pos:end="43:39">

            <expr_stmt pos:start="37:13" pos:end="41:32"><expr pos:start="37:13" pos:end="41:31"><call pos:start="37:13" pos:end="41:31"><name pos:start="37:13" pos:end="37:18">av_log</name><argument_list pos:start="37:19" pos:end="41:31">(<argument pos:start="37:20" pos:end="37:24"><expr pos:start="37:20" pos:end="37:24"><name pos:start="37:20" pos:end="37:24">avctx</name></expr></argument>, <argument pos:start="37:27" pos:end="37:38"><expr pos:start="37:27" pos:end="37:38"><name pos:start="37:27" pos:end="37:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="39:20" pos:end="39:78"><expr pos:start="39:20" pos:end="39:78"><literal type="string" pos:start="39:20" pos:end="39:54">"Invalid INFO header offset: 0x%08"</literal><name pos:start="39:55" pos:end="39:60">PRIX32</name><literal type="string" pos:start="39:61" pos:end="39:78">" is too large.\n"</literal></expr></argument>,

                   <argument pos:start="41:20" pos:end="41:30"><expr pos:start="41:20" pos:end="41:30"><name pos:start="41:20" pos:end="41:30">info_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:39">return <expr pos:start="43:20" pos:end="43:38"><name pos:start="43:20" pos:end="43:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:63"><expr pos:start="47:9" pos:end="47:62"><call pos:start="47:9" pos:end="47:62"><name pos:start="47:9" pos:end="47:33">ff_canopus_parse_info_tag</name><argument_list pos:start="47:34" pos:end="47:62">(<argument pos:start="47:35" pos:end="47:39"><expr pos:start="47:35" pos:end="47:39"><name pos:start="47:35" pos:end="47:39">avctx</name></expr></argument>, <argument pos:start="47:42" pos:end="47:48"><expr pos:start="47:42" pos:end="47:48"><name pos:start="47:42" pos:end="47:44">src</name> <operator pos:start="47:46" pos:end="47:46">+</operator> <literal type="number" pos:start="47:48" pos:end="47:48">8</literal></expr></argument>, <argument pos:start="47:51" pos:end="47:61"><expr pos:start="47:51" pos:end="47:61"><name pos:start="47:51" pos:end="47:61">info_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:25"><expr pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:19">info_offset</name> <operator pos:start="51:21" pos:end="51:22">+=</operator> <literal type="number" pos:start="51:24" pos:end="51:24">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:35"><expr pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:11">src</name>         <operator pos:start="53:21" pos:end="53:22">+=</operator> <name pos:start="53:24" pos:end="53:34">info_offset</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:39"><expr pos:start="59:5" pos:end="59:38"><name pos:start="59:5" pos:end="59:14">data_start</name>     <operator pos:start="59:20" pos:end="59:20">=</operator> <name pos:start="59:22" pos:end="59:24">src</name> <operator pos:start="59:26" pos:end="59:26">-</operator> <name pos:start="59:28" pos:end="59:38"><name pos:start="59:28" pos:end="59:32">avpkt</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:38">data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:46"><expr pos:start="61:5" pos:end="61:45"><name pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:7">ctx</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:18">data_size</name></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <name pos:start="61:22" pos:end="61:32"><name pos:start="61:22" pos:end="61:26">avpkt</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:32">size</name></name> <operator pos:start="61:34" pos:end="61:34">-</operator> <name pos:start="61:36" pos:end="61:45">data_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:25"><expr pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:12"><name pos:start="63:5" pos:end="63:7">ctx</name><operator pos:start="63:8" pos:end="63:9">-&gt;</operator><name pos:start="63:10" pos:end="63:12">src</name></name>       <operator pos:start="63:20" pos:end="63:20">=</operator> <name pos:start="63:22" pos:end="63:24">src</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:26"><expr pos:start="65:5" pos:end="65:25"><name pos:start="65:5" pos:end="65:12"><name pos:start="65:5" pos:end="65:7">ctx</name><operator pos:start="65:8" pos:end="65:9">-&gt;</operator><name pos:start="65:10" pos:end="65:12">pic</name></name>       <operator pos:start="65:20" pos:end="65:20">=</operator> <name pos:start="65:22" pos:end="65:25">data</name></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:41">(<expr pos:start="69:9" pos:end="69:40"><name pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:11">ctx</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:22">data_size</name></name> <operator pos:start="69:24" pos:end="69:24">&lt;</operator> <name pos:start="69:26" pos:end="69:40">HQX_HEADER_SIZE</name></expr>)</condition> <block pos:start="69:43" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:35">

        <expr_stmt pos:start="71:9" pos:end="71:58"><expr pos:start="71:9" pos:end="71:57"><call pos:start="71:9" pos:end="71:57"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="71:57">(<argument pos:start="71:16" pos:end="71:20"><expr pos:start="71:16" pos:end="71:20"><name pos:start="71:16" pos:end="71:20">avctx</name></expr></argument>, <argument pos:start="71:23" pos:end="71:34"><expr pos:start="71:23" pos:end="71:34"><name pos:start="71:23" pos:end="71:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:37" pos:end="71:56"><expr pos:start="71:37" pos:end="71:56"><literal type="string" pos:start="71:37" pos:end="71:56">"Frame too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:35">return <expr pos:start="73:16" pos:end="73:34"><name pos:start="73:16" pos:end="73:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:39">(<expr pos:start="79:9" pos:end="79:38"><name pos:start="79:9" pos:end="79:14"><name pos:start="79:9" pos:end="79:11">src</name><index pos:start="79:12" pos:end="79:14">[<expr pos:start="79:13" pos:end="79:13"><literal type="number" pos:start="79:13" pos:end="79:13">0</literal></expr>]</index></name> <operator pos:start="79:16" pos:end="79:17">!=</operator> <literal type="char" pos:start="79:19" pos:end="79:21">'H'</literal> <operator pos:start="79:23" pos:end="79:24">||</operator> <name pos:start="79:26" pos:end="79:31"><name pos:start="79:26" pos:end="79:28">src</name><index pos:start="79:29" pos:end="79:31">[<expr pos:start="79:30" pos:end="79:30"><literal type="number" pos:start="79:30" pos:end="79:30">1</literal></expr>]</index></name> <operator pos:start="79:33" pos:end="79:34">!=</operator> <literal type="char" pos:start="79:36" pos:end="79:38">'Q'</literal></expr>)</condition> <block pos:start="79:41" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:35">

        <expr_stmt pos:start="81:9" pos:end="81:59"><expr pos:start="81:9" pos:end="81:58"><call pos:start="81:9" pos:end="81:58"><name pos:start="81:9" pos:end="81:14">av_log</name><argument_list pos:start="81:15" pos:end="81:58">(<argument pos:start="81:16" pos:end="81:20"><expr pos:start="81:16" pos:end="81:20"><name pos:start="81:16" pos:end="81:20">avctx</name></expr></argument>, <argument pos:start="81:23" pos:end="81:34"><expr pos:start="81:23" pos:end="81:34"><name pos:start="81:23" pos:end="81:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:37" pos:end="81:57"><expr pos:start="81:37" pos:end="81:57"><literal type="string" pos:start="81:37" pos:end="81:57">"Not an HQX frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:35">return <expr pos:start="83:16" pos:end="83:34"><name pos:start="83:16" pos:end="83:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:39"><expr pos:start="87:5" pos:end="87:38"><name pos:start="87:5" pos:end="87:19"><name pos:start="87:5" pos:end="87:7">ctx</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:19">interlaced</name></name> <operator pos:start="87:21" pos:end="87:21">=</operator> <operator pos:start="87:23" pos:end="87:23">!</operator><operator pos:start="87:24" pos:end="87:24">(</operator><name pos:start="87:25" pos:end="87:30"><name pos:start="87:25" pos:end="87:27">src</name><index pos:start="87:28" pos:end="87:30">[<expr pos:start="87:29" pos:end="87:29"><literal type="number" pos:start="87:29" pos:end="87:29">2</literal></expr>]</index></name> <operator pos:start="87:32" pos:end="87:32">&amp;</operator> <literal type="number" pos:start="87:34" pos:end="87:37">0x80</literal><operator pos:start="87:38" pos:end="87:38">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:33"><expr pos:start="89:5" pos:end="89:32"><name pos:start="89:5" pos:end="89:15"><name pos:start="89:5" pos:end="89:7">ctx</name><operator pos:start="89:8" pos:end="89:9">-&gt;</operator><name pos:start="89:10" pos:end="89:15">format</name></name>     <operator pos:start="89:21" pos:end="89:21">=</operator> <name pos:start="89:23" pos:end="89:28"><name pos:start="89:23" pos:end="89:25">src</name><index pos:start="89:26" pos:end="89:28">[<expr pos:start="89:27" pos:end="89:27"><literal type="number" pos:start="89:27" pos:end="89:27">2</literal></expr>]</index></name> <operator pos:start="89:30" pos:end="89:30">&amp;</operator> <literal type="number" pos:start="89:32" pos:end="89:32">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:39"><expr pos:start="91:5" pos:end="91:38"><name pos:start="91:5" pos:end="91:12"><name pos:start="91:5" pos:end="91:7">ctx</name><operator pos:start="91:8" pos:end="91:9">-&gt;</operator><name pos:start="91:10" pos:end="91:12">dcb</name></name>        <operator pos:start="91:21" pos:end="91:21">=</operator> <operator pos:start="91:23" pos:end="91:23">(</operator><name pos:start="91:24" pos:end="91:29"><name pos:start="91:24" pos:end="91:26">src</name><index pos:start="91:27" pos:end="91:29">[<expr pos:start="91:28" pos:end="91:28"><literal type="number" pos:start="91:28" pos:end="91:28">3</literal></expr>]</index></name> <operator pos:start="91:31" pos:end="91:31">&amp;</operator> <literal type="number" pos:start="91:33" pos:end="91:33">3</literal><operator pos:start="91:34" pos:end="91:34">)</operator> <operator pos:start="91:36" pos:end="91:36">+</operator> <literal type="number" pos:start="91:38" pos:end="91:38">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:39"><expr pos:start="93:5" pos:end="93:38"><name pos:start="93:5" pos:end="93:14"><name pos:start="93:5" pos:end="93:7">ctx</name><operator pos:start="93:8" pos:end="93:9">-&gt;</operator><name pos:start="93:10" pos:end="93:14">width</name></name>      <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="93:38"><name pos:start="93:23" pos:end="93:29">AV_RB16</name><argument_list pos:start="93:30" pos:end="93:38">(<argument pos:start="93:31" pos:end="93:37"><expr pos:start="93:31" pos:end="93:37"><name pos:start="93:31" pos:end="93:33">src</name> <operator pos:start="93:35" pos:end="93:35">+</operator> <literal type="number" pos:start="93:37" pos:end="93:37">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:39"><expr pos:start="95:5" pos:end="95:38"><name pos:start="95:5" pos:end="95:15"><name pos:start="95:5" pos:end="95:7">ctx</name><operator pos:start="95:8" pos:end="95:9">-&gt;</operator><name pos:start="95:10" pos:end="95:15">height</name></name>     <operator pos:start="95:21" pos:end="95:21">=</operator> <call pos:start="95:23" pos:end="95:38"><name pos:start="95:23" pos:end="95:29">AV_RB16</name><argument_list pos:start="95:30" pos:end="95:38">(<argument pos:start="95:31" pos:end="95:37"><expr pos:start="95:31" pos:end="95:37"><name pos:start="95:31" pos:end="95:33">src</name> <operator pos:start="95:35" pos:end="95:35">+</operator> <literal type="number" pos:start="95:37" pos:end="95:37">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="97:5" pos:end="99:53">for <control pos:start="97:9" pos:end="97:28">(<init pos:start="97:10" pos:end="97:15"><expr pos:start="97:10" pos:end="97:14"><name pos:start="97:10" pos:end="97:10">i</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <literal type="number" pos:start="97:14" pos:end="97:14">0</literal></expr>;</init> <condition pos:start="97:17" pos:end="97:23"><expr pos:start="97:17" pos:end="97:22"><name pos:start="97:17" pos:end="97:17">i</name> <operator pos:start="97:19" pos:end="97:19">&lt;</operator> <literal type="number" pos:start="97:21" pos:end="97:22">17</literal></expr>;</condition> <incr pos:start="97:25" pos:end="97:27"><expr pos:start="97:25" pos:end="97:27"><name pos:start="97:25" pos:end="97:25">i</name><operator pos:start="97:26" pos:end="97:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="99:9" pos:end="99:53"><block_content pos:start="99:9" pos:end="99:53">

        <expr_stmt pos:start="99:9" pos:end="99:53"><expr pos:start="99:9" pos:end="99:52"><name pos:start="99:9" pos:end="99:25"><name pos:start="99:9" pos:end="99:11">ctx</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:22">slice_off</name><index pos:start="99:23" pos:end="99:25">[<expr pos:start="99:24" pos:end="99:24"><name pos:start="99:24" pos:end="99:24">i</name></expr>]</index></name> <operator pos:start="99:27" pos:end="99:27">=</operator> <call pos:start="99:29" pos:end="99:52"><name pos:start="99:29" pos:end="99:35">AV_RB24</name><argument_list pos:start="99:36" pos:end="99:52">(<argument pos:start="99:37" pos:end="99:51"><expr pos:start="99:37" pos:end="99:51"><name pos:start="99:37" pos:end="99:39">src</name> <operator pos:start="99:41" pos:end="99:41">+</operator> <literal type="number" pos:start="99:43" pos:end="99:45">8</literal> <operator pos:start="99:45" pos:end="99:45">+</operator> <name pos:start="99:47" pos:end="99:47">i</name> <operator pos:start="99:49" pos:end="99:49">*</operator> <literal type="number" pos:start="99:51" pos:end="99:51">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:22">(<expr pos:start="103:9" pos:end="103:21"><name pos:start="103:9" pos:end="103:16"><name pos:start="103:9" pos:end="103:11">ctx</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:16">dcb</name></name> <operator pos:start="103:18" pos:end="103:19">==</operator> <literal type="number" pos:start="103:21" pos:end="103:21">8</literal></expr>)</condition> <block pos:start="103:24" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:35">

        <expr_stmt pos:start="105:9" pos:end="105:76"><expr pos:start="105:9" pos:end="105:75"><call pos:start="105:9" pos:end="105:75"><name pos:start="105:9" pos:end="105:14">av_log</name><argument_list pos:start="105:15" pos:end="105:75">(<argument pos:start="105:16" pos:end="105:20"><expr pos:start="105:16" pos:end="105:20"><name pos:start="105:16" pos:end="105:20">avctx</name></expr></argument>, <argument pos:start="105:23" pos:end="105:34"><expr pos:start="105:23" pos:end="105:34"><name pos:start="105:23" pos:end="105:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="105:37" pos:end="105:64"><expr pos:start="105:37" pos:end="105:64"><literal type="string" pos:start="105:37" pos:end="105:64">"Invalid DC precision %d.\n"</literal></expr></argument>, <argument pos:start="105:67" pos:end="105:74"><expr pos:start="105:67" pos:end="105:74"><name pos:start="105:67" pos:end="105:74"><name pos:start="105:67" pos:end="105:69">ctx</name><operator pos:start="105:70" pos:end="105:71">-&gt;</operator><name pos:start="105:72" pos:end="105:74">dcb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="107:9" pos:end="107:35">return <expr pos:start="107:16" pos:end="107:34"><name pos:start="107:16" pos:end="107:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:65"><expr pos:start="111:5" pos:end="111:64"><name pos:start="111:5" pos:end="111:7">ret</name> <operator pos:start="111:9" pos:end="111:9">=</operator> <call pos:start="111:11" pos:end="111:64"><name pos:start="111:11" pos:end="111:29">av_image_check_size</name><argument_list pos:start="111:30" pos:end="111:64">(<argument pos:start="111:31" pos:end="111:40"><expr pos:start="111:31" pos:end="111:40"><name pos:start="111:31" pos:end="111:40"><name pos:start="111:31" pos:end="111:33">ctx</name><operator pos:start="111:34" pos:end="111:35">-&gt;</operator><name pos:start="111:36" pos:end="111:40">width</name></name></expr></argument>, <argument pos:start="111:43" pos:end="111:53"><expr pos:start="111:43" pos:end="111:53"><name pos:start="111:43" pos:end="111:53"><name pos:start="111:43" pos:end="111:45">ctx</name><operator pos:start="111:46" pos:end="111:47">-&gt;</operator><name pos:start="111:48" pos:end="111:53">height</name></name></expr></argument>, <argument pos:start="111:56" pos:end="111:56"><expr pos:start="111:56" pos:end="111:56"><literal type="number" pos:start="111:56" pos:end="111:56">0</literal></expr></argument>, <argument pos:start="111:59" pos:end="111:63"><expr pos:start="111:59" pos:end="111:63"><name pos:start="111:59" pos:end="111:63">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="121:5"><if pos:start="113:5" pos:end="121:5">if <condition pos:start="113:8" pos:end="113:16">(<expr pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">&lt;</operator> <literal type="number" pos:start="113:15" pos:end="113:15">0</literal></expr>)</condition> <block pos:start="113:18" pos:end="121:5">{<block_content pos:start="115:9" pos:end="119:35">

        <expr_stmt pos:start="115:9" pos:end="117:40"><expr pos:start="115:9" pos:end="117:39"><call pos:start="115:9" pos:end="117:39"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="117:39">(<argument pos:start="115:16" pos:end="115:20"><expr pos:start="115:16" pos:end="115:20"><name pos:start="115:16" pos:end="115:20">avctx</name></expr></argument>, <argument pos:start="115:23" pos:end="115:34"><expr pos:start="115:23" pos:end="115:34"><name pos:start="115:23" pos:end="115:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:37" pos:end="115:73"><expr pos:start="115:37" pos:end="115:73"><literal type="string" pos:start="115:37" pos:end="115:73">"Invalid stored dimenstions %dx%d.\n"</literal></expr></argument>,

               <argument pos:start="117:16" pos:end="117:25"><expr pos:start="117:16" pos:end="117:25"><name pos:start="117:16" pos:end="117:25"><name pos:start="117:16" pos:end="117:18">ctx</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:25">width</name></name></expr></argument>, <argument pos:start="117:28" pos:end="117:38"><expr pos:start="117:28" pos:end="117:38"><name pos:start="117:28" pos:end="117:38"><name pos:start="117:28" pos:end="117:30">ctx</name><operator pos:start="117:31" pos:end="117:32">-&gt;</operator><name pos:start="117:33" pos:end="117:38">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="119:9" pos:end="119:35">return <expr pos:start="119:16" pos:end="119:34"><name pos:start="119:16" pos:end="119:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:58"><expr pos:start="125:5" pos:end="125:57"><name pos:start="125:5" pos:end="125:22"><name pos:start="125:5" pos:end="125:9">avctx</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:22">coded_width</name></name>         <operator pos:start="125:32" pos:end="125:32">=</operator> <call pos:start="125:34" pos:end="125:57"><name pos:start="125:34" pos:end="125:40">FFALIGN</name><argument_list pos:start="125:41" pos:end="125:57">(<argument pos:start="125:42" pos:end="125:51"><expr pos:start="125:42" pos:end="125:51"><name pos:start="125:42" pos:end="125:51"><name pos:start="125:42" pos:end="125:44">ctx</name><operator pos:start="125:45" pos:end="125:46">-&gt;</operator><name pos:start="125:47" pos:end="125:51">width</name></name></expr></argument>,  <argument pos:start="125:55" pos:end="125:56"><expr pos:start="125:55" pos:end="125:56"><literal type="number" pos:start="125:55" pos:end="125:56">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:58"><expr pos:start="127:5" pos:end="127:57"><name pos:start="127:5" pos:end="127:23"><name pos:start="127:5" pos:end="127:9">avctx</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:23">coded_height</name></name>        <operator pos:start="127:32" pos:end="127:32">=</operator> <call pos:start="127:34" pos:end="127:57"><name pos:start="127:34" pos:end="127:40">FFALIGN</name><argument_list pos:start="127:41" pos:end="127:57">(<argument pos:start="127:42" pos:end="127:52"><expr pos:start="127:42" pos:end="127:52"><name pos:start="127:42" pos:end="127:52"><name pos:start="127:42" pos:end="127:44">ctx</name><operator pos:start="127:45" pos:end="127:46">-&gt;</operator><name pos:start="127:47" pos:end="127:52">height</name></name></expr></argument>, <argument pos:start="127:55" pos:end="127:56"><expr pos:start="127:55" pos:end="127:56"><literal type="number" pos:start="127:55" pos:end="127:56">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:44"><expr pos:start="129:5" pos:end="129:43"><name pos:start="129:5" pos:end="129:16"><name pos:start="129:5" pos:end="129:9">avctx</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:16">width</name></name>               <operator pos:start="129:32" pos:end="129:32">=</operator> <name pos:start="129:34" pos:end="129:43"><name pos:start="129:34" pos:end="129:36">ctx</name><operator pos:start="129:37" pos:end="129:38">-&gt;</operator><name pos:start="129:39" pos:end="129:43">width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:45"><expr pos:start="131:5" pos:end="131:44"><name pos:start="131:5" pos:end="131:17"><name pos:start="131:5" pos:end="131:9">avctx</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:17">height</name></name>              <operator pos:start="131:32" pos:end="131:32">=</operator> <name pos:start="131:34" pos:end="131:44"><name pos:start="131:34" pos:end="131:36">ctx</name><operator pos:start="131:37" pos:end="131:38">-&gt;</operator><name pos:start="131:39" pos:end="131:44">height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:36"><expr pos:start="133:5" pos:end="133:35"><name pos:start="133:5" pos:end="133:30"><name pos:start="133:5" pos:end="133:9">avctx</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:30">bits_per_raw_sample</name></name> <operator pos:start="133:32" pos:end="133:32">=</operator> <literal type="number" pos:start="133:34" pos:end="133:35">10</literal></expr>;</expr_stmt>



    <switch pos:start="137:5" pos:end="177:5">switch <condition pos:start="137:12" pos:end="137:24">(<expr pos:start="137:13" pos:end="137:23"><name pos:start="137:13" pos:end="137:23"><name pos:start="137:13" pos:end="137:15">ctx</name><operator pos:start="137:16" pos:end="137:17">-&gt;</operator><name pos:start="137:18" pos:end="137:23">format</name></name></expr>)</condition> <block pos:start="137:26" pos:end="177:5">{<block_content pos:start="139:5" pos:end="175:35">

    <case pos:start="139:5" pos:end="139:17">case <expr pos:start="139:10" pos:end="139:16"><name pos:start="139:10" pos:end="139:16">HQX_422</name></expr>:</case>

        <expr_stmt pos:start="141:9" pos:end="141:46"><expr pos:start="141:9" pos:end="141:45"><name pos:start="141:9" pos:end="141:22"><name pos:start="141:9" pos:end="141:13">avctx</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:22">pix_fmt</name></name> <operator pos:start="141:24" pos:end="141:24">=</operator> <name pos:start="141:26" pos:end="141:45">AV_PIX_FMT_YUV422P16</name></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:42"><expr pos:start="143:9" pos:end="143:41"><name pos:start="143:9" pos:end="143:24"><name pos:start="143:9" pos:end="143:11">ctx</name><operator pos:start="143:12" pos:end="143:13">-&gt;</operator><name pos:start="143:14" pos:end="143:24">decode_func</name></name> <operator pos:start="143:26" pos:end="143:26">=</operator> <name pos:start="143:28" pos:end="143:41">hqx_decode_422</name></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="145:14">break;</break>

    <case pos:start="147:5" pos:end="147:17">case <expr pos:start="147:10" pos:end="147:16"><name pos:start="147:10" pos:end="147:16">HQX_444</name></expr>:</case>

        <expr_stmt pos:start="149:9" pos:end="149:46"><expr pos:start="149:9" pos:end="149:45"><name pos:start="149:9" pos:end="149:22"><name pos:start="149:9" pos:end="149:13">avctx</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:22">pix_fmt</name></name> <operator pos:start="149:24" pos:end="149:24">=</operator> <name pos:start="149:26" pos:end="149:45">AV_PIX_FMT_YUV444P16</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:42"><expr pos:start="151:9" pos:end="151:41"><name pos:start="151:9" pos:end="151:24"><name pos:start="151:9" pos:end="151:11">ctx</name><operator pos:start="151:12" pos:end="151:13">-&gt;</operator><name pos:start="151:14" pos:end="151:24">decode_func</name></name> <operator pos:start="151:26" pos:end="151:26">=</operator> <name pos:start="151:28" pos:end="151:41">hqx_decode_444</name></expr>;</expr_stmt>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    <case pos:start="155:5" pos:end="155:18">case <expr pos:start="155:10" pos:end="155:17"><name pos:start="155:10" pos:end="155:17">HQX_422A</name></expr>:</case>

        <expr_stmt pos:start="157:9" pos:end="157:47"><expr pos:start="157:9" pos:end="157:46"><name pos:start="157:9" pos:end="157:22"><name pos:start="157:9" pos:end="157:13">avctx</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:22">pix_fmt</name></name> <operator pos:start="157:24" pos:end="157:24">=</operator> <name pos:start="157:26" pos:end="157:46">AV_PIX_FMT_YUVA422P16</name></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:43"><expr pos:start="159:9" pos:end="159:42"><name pos:start="159:9" pos:end="159:24"><name pos:start="159:9" pos:end="159:11">ctx</name><operator pos:start="159:12" pos:end="159:13">-&gt;</operator><name pos:start="159:14" pos:end="159:24">decode_func</name></name> <operator pos:start="159:26" pos:end="159:26">=</operator> <name pos:start="159:28" pos:end="159:42">hqx_decode_422a</name></expr>;</expr_stmt>

        <break pos:start="161:9" pos:end="161:14">break;</break>

    <case pos:start="163:5" pos:end="163:18">case <expr pos:start="163:10" pos:end="163:17"><name pos:start="163:10" pos:end="163:17">HQX_444A</name></expr>:</case>

        <expr_stmt pos:start="165:9" pos:end="165:47"><expr pos:start="165:9" pos:end="165:46"><name pos:start="165:9" pos:end="165:22"><name pos:start="165:9" pos:end="165:13">avctx</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:22">pix_fmt</name></name> <operator pos:start="165:24" pos:end="165:24">=</operator> <name pos:start="165:26" pos:end="165:46">AV_PIX_FMT_YUVA444P16</name></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:43"><expr pos:start="167:9" pos:end="167:42"><name pos:start="167:9" pos:end="167:24"><name pos:start="167:9" pos:end="167:11">ctx</name><operator pos:start="167:12" pos:end="167:13">-&gt;</operator><name pos:start="167:14" pos:end="167:24">decode_func</name></name> <operator pos:start="167:26" pos:end="167:26">=</operator> <name pos:start="167:28" pos:end="167:42">hqx_decode_444a</name></expr>;</expr_stmt>

        <break pos:start="169:9" pos:end="169:14">break;</break>

    <default pos:start="171:5" pos:end="171:12">default:</default>

        <expr_stmt pos:start="173:9" pos:end="173:74"><expr pos:start="173:9" pos:end="173:73"><call pos:start="173:9" pos:end="173:73"><name pos:start="173:9" pos:end="173:14">av_log</name><argument_list pos:start="173:15" pos:end="173:73">(<argument pos:start="173:16" pos:end="173:20"><expr pos:start="173:16" pos:end="173:20"><name pos:start="173:16" pos:end="173:20">avctx</name></expr></argument>, <argument pos:start="173:23" pos:end="173:34"><expr pos:start="173:23" pos:end="173:34"><name pos:start="173:23" pos:end="173:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="173:37" pos:end="173:59"><expr pos:start="173:37" pos:end="173:59"><literal type="string" pos:start="173:37" pos:end="173:59">"Invalid format: %d.\n"</literal></expr></argument>, <argument pos:start="173:62" pos:end="173:72"><expr pos:start="173:62" pos:end="173:72"><name pos:start="173:62" pos:end="173:72"><name pos:start="173:62" pos:end="173:64">ctx</name><operator pos:start="173:65" pos:end="173:66">-&gt;</operator><name pos:start="173:67" pos:end="173:72">format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="175:9" pos:end="175:35">return <expr pos:start="175:16" pos:end="175:34"><name pos:start="175:16" pos:end="175:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="181:5" pos:end="181:44"><expr pos:start="181:5" pos:end="181:43"><name pos:start="181:5" pos:end="181:7">ret</name> <operator pos:start="181:9" pos:end="181:9">=</operator> <call pos:start="181:11" pos:end="181:43"><name pos:start="181:11" pos:end="181:23">ff_get_buffer</name><argument_list pos:start="181:24" pos:end="181:43">(<argument pos:start="181:25" pos:end="181:29"><expr pos:start="181:25" pos:end="181:29"><name pos:start="181:25" pos:end="181:29">avctx</name></expr></argument>, <argument pos:start="181:32" pos:end="181:39"><expr pos:start="181:32" pos:end="181:39"><name pos:start="181:32" pos:end="181:39"><name pos:start="181:32" pos:end="181:34">ctx</name><operator pos:start="181:35" pos:end="181:36">-&gt;</operator><name pos:start="181:37" pos:end="181:39">pic</name></name></expr></argument>, <argument pos:start="181:42" pos:end="181:42"><expr pos:start="181:42" pos:end="181:42"><literal type="number" pos:start="181:42" pos:end="181:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="189:5"><if pos:start="183:5" pos:end="189:5">if <condition pos:start="183:8" pos:end="183:16">(<expr pos:start="183:9" pos:end="183:15"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">&lt;</operator> <literal type="number" pos:start="183:15" pos:end="183:15">0</literal></expr>)</condition> <block pos:start="183:18" pos:end="189:5">{<block_content pos:start="185:9" pos:end="187:19">

        <expr_stmt pos:start="185:9" pos:end="185:68"><expr pos:start="185:9" pos:end="185:67"><call pos:start="185:9" pos:end="185:67"><name pos:start="185:9" pos:end="185:14">av_log</name><argument_list pos:start="185:15" pos:end="185:67">(<argument pos:start="185:16" pos:end="185:20"><expr pos:start="185:16" pos:end="185:20"><name pos:start="185:16" pos:end="185:20">avctx</name></expr></argument>, <argument pos:start="185:23" pos:end="185:34"><expr pos:start="185:23" pos:end="185:34"><name pos:start="185:23" pos:end="185:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:37" pos:end="185:66"><expr pos:start="185:37" pos:end="185:66"><literal type="string" pos:start="185:37" pos:end="185:66">"Could not allocate buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="187:9" pos:end="187:19">return <expr pos:start="187:16" pos:end="187:18"><name pos:start="187:16" pos:end="187:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:64"><expr pos:start="193:5" pos:end="193:63"><call pos:start="193:5" pos:end="193:63"><name pos:start="193:5" pos:end="193:19"><name pos:start="193:5" pos:end="193:9">avctx</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:19">execute2</name></name><argument_list pos:start="193:20" pos:end="193:63">(<argument pos:start="193:21" pos:end="193:25"><expr pos:start="193:21" pos:end="193:25"><name pos:start="193:21" pos:end="193:25">avctx</name></expr></argument>, <argument pos:start="193:28" pos:end="193:46"><expr pos:start="193:28" pos:end="193:46"><name pos:start="193:28" pos:end="193:46">decode_slice_thread</name></expr></argument>, <argument pos:start="193:49" pos:end="193:52"><expr pos:start="193:49" pos:end="193:52"><name pos:start="193:49" pos:end="193:52">NULL</name></expr></argument>, <argument pos:start="193:55" pos:end="193:58"><expr pos:start="193:55" pos:end="193:58"><name pos:start="193:55" pos:end="193:58">NULL</name></expr></argument>, <argument pos:start="193:61" pos:end="193:62"><expr pos:start="193:61" pos:end="193:62"><literal type="number" pos:start="193:61" pos:end="193:62">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:28"><expr pos:start="197:5" pos:end="197:27"><name pos:start="197:5" pos:end="197:23"><name pos:start="197:5" pos:end="197:7">ctx</name><operator pos:start="197:8" pos:end="197:9">-&gt;</operator><name pos:start="197:10" pos:end="197:12">pic</name><operator pos:start="197:13" pos:end="197:14">-&gt;</operator><name pos:start="197:15" pos:end="197:23">key_frame</name></name> <operator pos:start="197:25" pos:end="197:25">=</operator> <literal type="number" pos:start="197:27" pos:end="197:27">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:44"><expr pos:start="199:5" pos:end="199:43"><name pos:start="199:5" pos:end="199:23"><name pos:start="199:5" pos:end="199:7">ctx</name><operator pos:start="199:8" pos:end="199:9">-&gt;</operator><name pos:start="199:10" pos:end="199:12">pic</name><operator pos:start="199:13" pos:end="199:14">-&gt;</operator><name pos:start="199:15" pos:end="199:23">pict_type</name></name> <operator pos:start="199:25" pos:end="199:25">=</operator> <name pos:start="199:27" pos:end="199:43">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <expr_stmt pos:start="203:5" pos:end="203:25"><expr pos:start="203:5" pos:end="203:24"><operator pos:start="203:5" pos:end="203:5">*</operator><name pos:start="203:6" pos:end="203:20">got_picture_ptr</name> <operator pos:start="203:22" pos:end="203:22">=</operator> <literal type="number" pos:start="203:24" pos:end="203:24">1</literal></expr>;</expr_stmt>



    <return pos:start="207:5" pos:end="207:23">return <expr pos:start="207:12" pos:end="207:22"><name pos:start="207:12" pos:end="207:22"><name pos:start="207:12" pos:end="207:16">avpkt</name><operator pos:start="207:17" pos:end="207:18">-&gt;</operator><name pos:start="207:19" pos:end="207:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
