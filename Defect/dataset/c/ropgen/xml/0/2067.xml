<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2067.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:27">ppc_tlb_invalidate_one</name><parameter_list pos:start="1:28" pos:end="1:64">(<parameter pos:start="1:29" pos:end="1:44"><decl pos:start="1:29" pos:end="1:44"><type pos:start="1:29" pos:end="1:44"><name pos:start="1:29" pos:end="1:39">CPUPPCState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><name pos:start="1:47" pos:end="1:58">target_ulong</name></type> <name pos:start="1:60" pos:end="1:63">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="7:5" pos:end="164:0">

<cpp:if pos:start="5:1" pos:end="5:28">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:28"><operator pos:start="5:5" pos:end="5:5">!</operator><call pos:start="5:6" pos:end="5:28"><name pos:start="5:6" pos:end="5:12">defined</name><argument_list pos:start="5:13" pos:end="5:28">(<argument pos:start="5:14" pos:end="5:27"><expr pos:start="5:14" pos:end="5:27"><name pos:start="5:14" pos:end="5:27">FLUSH_ALL_TLBS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">PowerPCCPU</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">cpu</name> <init pos:start="7:21" pos:end="7:42">= <expr pos:start="7:23" pos:end="7:42"><call pos:start="7:23" pos:end="7:42"><name pos:start="7:23" pos:end="7:37">ppc_env_get_cpu</name><argument_list pos:start="7:38" pos:end="7:42">(<argument pos:start="7:39" pos:end="7:41"><expr pos:start="7:39" pos:end="7:41"><name pos:start="7:39" pos:end="7:41">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cs</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:8">addr</name> <operator pos:start="13:10" pos:end="13:11">&amp;=</operator> <name pos:start="13:13" pos:end="13:28">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <switch pos:start="15:5" pos:end="160:0">switch <condition pos:start="15:12" pos:end="15:27">(<expr pos:start="15:13" pos:end="15:26"><name pos:start="15:13" pos:end="15:26"><name pos:start="15:13" pos:end="15:15">env</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:26">mmu_model</name></name></expr>)</condition> <block pos:start="15:29" pos:end="160:0">{<block_content pos:start="17:5" pos:end="155:14">

    <case pos:start="17:5" pos:end="17:30">case <expr pos:start="17:10" pos:end="17:29"><name pos:start="17:10" pos:end="17:29">POWERPC_MMU_SOFT_6xx</name></expr>:</case>

    <case pos:start="19:5" pos:end="19:31">case <expr pos:start="19:10" pos:end="19:30"><name pos:start="19:10" pos:end="19:30">POWERPC_MMU_SOFT_74xx</name></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:49"><expr pos:start="21:9" pos:end="21:48"><call pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:34">ppc6xx_tlb_invalidate_virt</name><argument_list pos:start="21:35" pos:end="21:48">(<argument pos:start="21:36" pos:end="21:38"><expr pos:start="21:36" pos:end="21:38"><name pos:start="21:36" pos:end="21:38">env</name></expr></argument>, <argument pos:start="21:41" pos:end="21:44"><expr pos:start="21:41" pos:end="21:44"><name pos:start="21:41" pos:end="21:44">addr</name></expr></argument>, <argument pos:start="21:47" pos:end="21:47"><expr pos:start="21:47" pos:end="21:47"><literal type="number" pos:start="21:47" pos:end="21:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:30">(<expr pos:start="23:13" pos:end="23:29"><name pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:15">env</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:24">id_tlbs</name></name> <operator pos:start="23:26" pos:end="23:27">==</operator> <literal type="number" pos:start="23:29" pos:end="23:29">1</literal></expr>)</condition> <block pos:start="23:32" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:53">

            <expr_stmt pos:start="25:13" pos:end="25:53"><expr pos:start="25:13" pos:end="25:52"><call pos:start="25:13" pos:end="25:52"><name pos:start="25:13" pos:end="25:38">ppc6xx_tlb_invalidate_virt</name><argument_list pos:start="25:39" pos:end="25:52">(<argument pos:start="25:40" pos:end="25:42"><expr pos:start="25:40" pos:end="25:42"><name pos:start="25:40" pos:end="25:42">env</name></expr></argument>, <argument pos:start="25:45" pos:end="25:48"><expr pos:start="25:45" pos:end="25:48"><name pos:start="25:45" pos:end="25:48">addr</name></expr></argument>, <argument pos:start="25:51" pos:end="25:51"><expr pos:start="25:51" pos:end="25:51"><literal type="number" pos:start="25:51" pos:end="25:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:30">case <expr pos:start="31:10" pos:end="31:29"><name pos:start="31:10" pos:end="31:29">POWERPC_MMU_SOFT_4xx</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:32">case <expr pos:start="33:10" pos:end="33:31"><name pos:start="33:10" pos:end="33:31">POWERPC_MMU_SOFT_4xx_Z</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:69"><expr pos:start="35:9" pos:end="35:68"><call pos:start="35:9" pos:end="35:68"><name pos:start="35:9" pos:end="35:34">ppc4xx_tlb_invalidate_virt</name><argument_list pos:start="35:35" pos:end="35:68">(<argument pos:start="35:36" pos:end="35:38"><expr pos:start="35:36" pos:end="35:38"><name pos:start="35:36" pos:end="35:38">env</name></expr></argument>, <argument pos:start="35:41" pos:end="35:44"><expr pos:start="35:41" pos:end="35:44"><name pos:start="35:41" pos:end="35:44">addr</name></expr></argument>, <argument pos:start="35:47" pos:end="35:67"><expr pos:start="35:47" pos:end="35:67"><name pos:start="35:47" pos:end="35:67"><name pos:start="35:47" pos:end="35:49">env</name><operator pos:start="35:50" pos:end="35:51">-&gt;</operator><name pos:start="35:52" pos:end="35:54">spr</name><index pos:start="35:55" pos:end="35:67">[<expr pos:start="35:56" pos:end="35:66"><name pos:start="35:56" pos:end="35:66">SPR_40x_PID</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:26">case <expr pos:start="39:10" pos:end="39:25"><name pos:start="39:10" pos:end="39:25">POWERPC_MMU_REAL</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:69"><expr pos:start="41:9" pos:end="41:68"><call pos:start="41:9" pos:end="41:68"><name pos:start="41:9" pos:end="41:17">cpu_abort</name><argument_list pos:start="41:18" pos:end="41:68">(<argument pos:start="41:19" pos:end="41:26"><expr pos:start="41:19" pos:end="41:26"><call pos:start="41:19" pos:end="41:26"><name pos:start="41:19" pos:end="41:21">CPU</name><argument_list pos:start="41:22" pos:end="41:26">(<argument pos:start="41:23" pos:end="41:25"><expr pos:start="41:23" pos:end="41:25"><name pos:start="41:23" pos:end="41:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:29" pos:end="41:67"><expr pos:start="41:29" pos:end="41:67"><literal type="string" pos:start="41:29" pos:end="41:67">"No TLB for PowerPC 4xx in real mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:28">case <expr pos:start="45:10" pos:end="45:27"><name pos:start="45:10" pos:end="45:27">POWERPC_MMU_MPC8xx</name></expr>:</case>

        <comment type="block" pos:start="47:9" pos:end="47:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:69"><expr pos:start="49:9" pos:end="49:68"><call pos:start="49:9" pos:end="49:68"><name pos:start="49:9" pos:end="49:17">cpu_abort</name><argument_list pos:start="49:18" pos:end="49:68">(<argument pos:start="49:19" pos:end="49:26"><expr pos:start="49:19" pos:end="49:26"><call pos:start="49:19" pos:end="49:26"><name pos:start="49:19" pos:end="49:21">CPU</name><argument_list pos:start="49:22" pos:end="49:26">(<argument pos:start="49:23" pos:end="49:25"><expr pos:start="49:23" pos:end="49:25"><name pos:start="49:23" pos:end="49:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:29" pos:end="49:67"><expr pos:start="49:29" pos:end="49:67"><literal type="string" pos:start="49:29" pos:end="49:67">"MPC8xx MMU model is not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:27">case <expr pos:start="53:10" pos:end="53:26"><name pos:start="53:10" pos:end="53:26">POWERPC_MMU_BOOKE</name></expr>:</case>

        <comment type="block" pos:start="55:9" pos:end="55:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:68"><expr pos:start="57:9" pos:end="57:67"><call pos:start="57:9" pos:end="57:67"><name pos:start="57:9" pos:end="57:17">cpu_abort</name><argument_list pos:start="57:18" pos:end="57:67">(<argument pos:start="57:19" pos:end="57:26"><expr pos:start="57:19" pos:end="57:26"><call pos:start="57:19" pos:end="57:26"><name pos:start="57:19" pos:end="57:21">CPU</name><argument_list pos:start="57:22" pos:end="57:26">(<argument pos:start="57:23" pos:end="57:25"><expr pos:start="57:23" pos:end="57:25"><name pos:start="57:23" pos:end="57:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="57:29" pos:end="57:66"><expr pos:start="57:29" pos:end="57:66"><literal type="string" pos:start="57:29" pos:end="57:66">"BookE MMU model is not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <case pos:start="61:5" pos:end="61:30">case <expr pos:start="61:10" pos:end="61:29"><name pos:start="61:10" pos:end="61:29">POWERPC_MMU_BOOKE206</name></expr>:</case>

        <comment type="block" pos:start="63:9" pos:end="63:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:73"><expr pos:start="65:9" pos:end="65:72"><call pos:start="65:9" pos:end="65:72"><name pos:start="65:9" pos:end="65:17">cpu_abort</name><argument_list pos:start="65:18" pos:end="65:72">(<argument pos:start="65:19" pos:end="65:26"><expr pos:start="65:19" pos:end="65:26"><call pos:start="65:19" pos:end="65:26"><name pos:start="65:19" pos:end="65:21">CPU</name><argument_list pos:start="65:22" pos:end="65:26">(<argument pos:start="65:23" pos:end="65:25"><expr pos:start="65:23" pos:end="65:25"><name pos:start="65:23" pos:end="65:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="65:29" pos:end="65:71"><expr pos:start="65:29" pos:end="65:71"><literal type="string" pos:start="65:29" pos:end="65:71">"BookE 2.06 MMU model is not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:25">case <expr pos:start="69:10" pos:end="69:24"><name pos:start="69:10" pos:end="69:24">POWERPC_MMU_32B</name></expr>:</case>

    <case pos:start="71:5" pos:end="71:25">case <expr pos:start="71:10" pos:end="71:24"><name pos:start="71:10" pos:end="71:24">POWERPC_MMU_601</name></expr>:</case>

        <comment type="block" pos:start="73:9" pos:end="73:52">/* tlbie invalidate TLBs for all segments */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:45"><expr pos:start="75:9" pos:end="75:44"><name pos:start="75:9" pos:end="75:12">addr</name> <operator pos:start="75:14" pos:end="75:15">&amp;=</operator> <operator pos:start="75:17" pos:end="75:17">~</operator><operator pos:start="75:18" pos:end="75:18">(</operator><operator pos:start="75:19" pos:end="75:19">(</operator><name pos:start="75:20" pos:end="75:31">target_ulong</name><operator pos:start="75:32" pos:end="75:32">)</operator><operator pos:start="75:33" pos:end="75:33">-</operator><literal type="number" pos:start="75:34" pos:end="75:37">1ULL</literal> <operator pos:start="75:39" pos:end="75:40">&lt;&lt;</operator> <literal type="number" pos:start="75:42" pos:end="75:43">28</literal><operator pos:start="75:44" pos:end="75:44">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:22"><expr pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:10">cs</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <call pos:start="77:14" pos:end="77:21"><name pos:start="77:14" pos:end="77:16">CPU</name><argument_list pos:start="77:17" pos:end="77:21">(<argument pos:start="77:18" pos:end="77:20"><expr pos:start="77:18" pos:end="77:20"><name pos:start="77:18" pos:end="77:20">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="79:9" pos:end="83:11">/* XXX: this case should be optimized,

         * giving a mask to tlb_flush_page

         */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:47"><expr pos:start="85:9" pos:end="85:46"><call pos:start="85:9" pos:end="85:46"><name pos:start="85:9" pos:end="85:22">tlb_flush_page</name><argument_list pos:start="85:23" pos:end="85:46">(<argument pos:start="85:24" pos:end="85:25"><expr pos:start="85:24" pos:end="85:25"><name pos:start="85:24" pos:end="85:25">cs</name></expr></argument>, <argument pos:start="85:28" pos:end="85:45"><expr pos:start="85:28" pos:end="85:45"><name pos:start="85:28" pos:end="85:31">addr</name> <operator pos:start="85:33" pos:end="85:33">|</operator> <operator pos:start="85:35" pos:end="85:35">(</operator><literal type="number" pos:start="85:36" pos:end="85:38">0x0</literal> <operator pos:start="85:40" pos:end="85:41">&lt;&lt;</operator> <literal type="number" pos:start="85:43" pos:end="85:44">28</literal><operator pos:start="85:45" pos:end="85:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:47"><expr pos:start="87:9" pos:end="87:46"><call pos:start="87:9" pos:end="87:46"><name pos:start="87:9" pos:end="87:22">tlb_flush_page</name><argument_list pos:start="87:23" pos:end="87:46">(<argument pos:start="87:24" pos:end="87:25"><expr pos:start="87:24" pos:end="87:25"><name pos:start="87:24" pos:end="87:25">cs</name></expr></argument>, <argument pos:start="87:28" pos:end="87:45"><expr pos:start="87:28" pos:end="87:45"><name pos:start="87:28" pos:end="87:31">addr</name> <operator pos:start="87:33" pos:end="87:33">|</operator> <operator pos:start="87:35" pos:end="87:35">(</operator><literal type="number" pos:start="87:36" pos:end="87:38">0x1</literal> <operator pos:start="87:40" pos:end="87:41">&lt;&lt;</operator> <literal type="number" pos:start="87:43" pos:end="87:44">28</literal><operator pos:start="87:45" pos:end="87:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:47"><expr pos:start="89:9" pos:end="89:46"><call pos:start="89:9" pos:end="89:46"><name pos:start="89:9" pos:end="89:22">tlb_flush_page</name><argument_list pos:start="89:23" pos:end="89:46">(<argument pos:start="89:24" pos:end="89:25"><expr pos:start="89:24" pos:end="89:25"><name pos:start="89:24" pos:end="89:25">cs</name></expr></argument>, <argument pos:start="89:28" pos:end="89:45"><expr pos:start="89:28" pos:end="89:45"><name pos:start="89:28" pos:end="89:31">addr</name> <operator pos:start="89:33" pos:end="89:33">|</operator> <operator pos:start="89:35" pos:end="89:35">(</operator><literal type="number" pos:start="89:36" pos:end="89:38">0x2</literal> <operator pos:start="89:40" pos:end="89:41">&lt;&lt;</operator> <literal type="number" pos:start="89:43" pos:end="89:44">28</literal><operator pos:start="89:45" pos:end="89:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:47"><expr pos:start="91:9" pos:end="91:46"><call pos:start="91:9" pos:end="91:46"><name pos:start="91:9" pos:end="91:22">tlb_flush_page</name><argument_list pos:start="91:23" pos:end="91:46">(<argument pos:start="91:24" pos:end="91:25"><expr pos:start="91:24" pos:end="91:25"><name pos:start="91:24" pos:end="91:25">cs</name></expr></argument>, <argument pos:start="91:28" pos:end="91:45"><expr pos:start="91:28" pos:end="91:45"><name pos:start="91:28" pos:end="91:31">addr</name> <operator pos:start="91:33" pos:end="91:33">|</operator> <operator pos:start="91:35" pos:end="91:35">(</operator><literal type="number" pos:start="91:36" pos:end="91:38">0x3</literal> <operator pos:start="91:40" pos:end="91:41">&lt;&lt;</operator> <literal type="number" pos:start="91:43" pos:end="91:44">28</literal><operator pos:start="91:45" pos:end="91:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:47"><expr pos:start="93:9" pos:end="93:46"><call pos:start="93:9" pos:end="93:46"><name pos:start="93:9" pos:end="93:22">tlb_flush_page</name><argument_list pos:start="93:23" pos:end="93:46">(<argument pos:start="93:24" pos:end="93:25"><expr pos:start="93:24" pos:end="93:25"><name pos:start="93:24" pos:end="93:25">cs</name></expr></argument>, <argument pos:start="93:28" pos:end="93:45"><expr pos:start="93:28" pos:end="93:45"><name pos:start="93:28" pos:end="93:31">addr</name> <operator pos:start="93:33" pos:end="93:33">|</operator> <operator pos:start="93:35" pos:end="93:35">(</operator><literal type="number" pos:start="93:36" pos:end="93:38">0x4</literal> <operator pos:start="93:40" pos:end="93:41">&lt;&lt;</operator> <literal type="number" pos:start="93:43" pos:end="93:44">28</literal><operator pos:start="93:45" pos:end="93:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:47"><expr pos:start="95:9" pos:end="95:46"><call pos:start="95:9" pos:end="95:46"><name pos:start="95:9" pos:end="95:22">tlb_flush_page</name><argument_list pos:start="95:23" pos:end="95:46">(<argument pos:start="95:24" pos:end="95:25"><expr pos:start="95:24" pos:end="95:25"><name pos:start="95:24" pos:end="95:25">cs</name></expr></argument>, <argument pos:start="95:28" pos:end="95:45"><expr pos:start="95:28" pos:end="95:45"><name pos:start="95:28" pos:end="95:31">addr</name> <operator pos:start="95:33" pos:end="95:33">|</operator> <operator pos:start="95:35" pos:end="95:35">(</operator><literal type="number" pos:start="95:36" pos:end="95:38">0x5</literal> <operator pos:start="95:40" pos:end="95:41">&lt;&lt;</operator> <literal type="number" pos:start="95:43" pos:end="95:44">28</literal><operator pos:start="95:45" pos:end="95:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:47"><expr pos:start="97:9" pos:end="97:46"><call pos:start="97:9" pos:end="97:46"><name pos:start="97:9" pos:end="97:22">tlb_flush_page</name><argument_list pos:start="97:23" pos:end="97:46">(<argument pos:start="97:24" pos:end="97:25"><expr pos:start="97:24" pos:end="97:25"><name pos:start="97:24" pos:end="97:25">cs</name></expr></argument>, <argument pos:start="97:28" pos:end="97:45"><expr pos:start="97:28" pos:end="97:45"><name pos:start="97:28" pos:end="97:31">addr</name> <operator pos:start="97:33" pos:end="97:33">|</operator> <operator pos:start="97:35" pos:end="97:35">(</operator><literal type="number" pos:start="97:36" pos:end="97:38">0x6</literal> <operator pos:start="97:40" pos:end="97:41">&lt;&lt;</operator> <literal type="number" pos:start="97:43" pos:end="97:44">28</literal><operator pos:start="97:45" pos:end="97:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:47"><expr pos:start="99:9" pos:end="99:46"><call pos:start="99:9" pos:end="99:46"><name pos:start="99:9" pos:end="99:22">tlb_flush_page</name><argument_list pos:start="99:23" pos:end="99:46">(<argument pos:start="99:24" pos:end="99:25"><expr pos:start="99:24" pos:end="99:25"><name pos:start="99:24" pos:end="99:25">cs</name></expr></argument>, <argument pos:start="99:28" pos:end="99:45"><expr pos:start="99:28" pos:end="99:45"><name pos:start="99:28" pos:end="99:31">addr</name> <operator pos:start="99:33" pos:end="99:33">|</operator> <operator pos:start="99:35" pos:end="99:35">(</operator><literal type="number" pos:start="99:36" pos:end="99:38">0x7</literal> <operator pos:start="99:40" pos:end="99:41">&lt;&lt;</operator> <literal type="number" pos:start="99:43" pos:end="99:44">28</literal><operator pos:start="99:45" pos:end="99:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:47"><expr pos:start="101:9" pos:end="101:46"><call pos:start="101:9" pos:end="101:46"><name pos:start="101:9" pos:end="101:22">tlb_flush_page</name><argument_list pos:start="101:23" pos:end="101:46">(<argument pos:start="101:24" pos:end="101:25"><expr pos:start="101:24" pos:end="101:25"><name pos:start="101:24" pos:end="101:25">cs</name></expr></argument>, <argument pos:start="101:28" pos:end="101:45"><expr pos:start="101:28" pos:end="101:45"><name pos:start="101:28" pos:end="101:31">addr</name> <operator pos:start="101:33" pos:end="101:33">|</operator> <operator pos:start="101:35" pos:end="101:35">(</operator><literal type="number" pos:start="101:36" pos:end="101:38">0x8</literal> <operator pos:start="101:40" pos:end="101:41">&lt;&lt;</operator> <literal type="number" pos:start="101:43" pos:end="101:44">28</literal><operator pos:start="101:45" pos:end="101:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:47"><expr pos:start="103:9" pos:end="103:46"><call pos:start="103:9" pos:end="103:46"><name pos:start="103:9" pos:end="103:22">tlb_flush_page</name><argument_list pos:start="103:23" pos:end="103:46">(<argument pos:start="103:24" pos:end="103:25"><expr pos:start="103:24" pos:end="103:25"><name pos:start="103:24" pos:end="103:25">cs</name></expr></argument>, <argument pos:start="103:28" pos:end="103:45"><expr pos:start="103:28" pos:end="103:45"><name pos:start="103:28" pos:end="103:31">addr</name> <operator pos:start="103:33" pos:end="103:33">|</operator> <operator pos:start="103:35" pos:end="103:35">(</operator><literal type="number" pos:start="103:36" pos:end="103:38">0x9</literal> <operator pos:start="103:40" pos:end="103:41">&lt;&lt;</operator> <literal type="number" pos:start="103:43" pos:end="103:44">28</literal><operator pos:start="103:45" pos:end="103:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:47"><expr pos:start="105:9" pos:end="105:46"><call pos:start="105:9" pos:end="105:46"><name pos:start="105:9" pos:end="105:22">tlb_flush_page</name><argument_list pos:start="105:23" pos:end="105:46">(<argument pos:start="105:24" pos:end="105:25"><expr pos:start="105:24" pos:end="105:25"><name pos:start="105:24" pos:end="105:25">cs</name></expr></argument>, <argument pos:start="105:28" pos:end="105:45"><expr pos:start="105:28" pos:end="105:45"><name pos:start="105:28" pos:end="105:31">addr</name> <operator pos:start="105:33" pos:end="105:33">|</operator> <operator pos:start="105:35" pos:end="105:35">(</operator><literal type="number" pos:start="105:36" pos:end="105:38">0xA</literal> <operator pos:start="105:40" pos:end="105:41">&lt;&lt;</operator> <literal type="number" pos:start="105:43" pos:end="105:44">28</literal><operator pos:start="105:45" pos:end="105:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:47"><expr pos:start="107:9" pos:end="107:46"><call pos:start="107:9" pos:end="107:46"><name pos:start="107:9" pos:end="107:22">tlb_flush_page</name><argument_list pos:start="107:23" pos:end="107:46">(<argument pos:start="107:24" pos:end="107:25"><expr pos:start="107:24" pos:end="107:25"><name pos:start="107:24" pos:end="107:25">cs</name></expr></argument>, <argument pos:start="107:28" pos:end="107:45"><expr pos:start="107:28" pos:end="107:45"><name pos:start="107:28" pos:end="107:31">addr</name> <operator pos:start="107:33" pos:end="107:33">|</operator> <operator pos:start="107:35" pos:end="107:35">(</operator><literal type="number" pos:start="107:36" pos:end="107:38">0xB</literal> <operator pos:start="107:40" pos:end="107:41">&lt;&lt;</operator> <literal type="number" pos:start="107:43" pos:end="107:44">28</literal><operator pos:start="107:45" pos:end="107:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:47"><expr pos:start="109:9" pos:end="109:46"><call pos:start="109:9" pos:end="109:46"><name pos:start="109:9" pos:end="109:22">tlb_flush_page</name><argument_list pos:start="109:23" pos:end="109:46">(<argument pos:start="109:24" pos:end="109:25"><expr pos:start="109:24" pos:end="109:25"><name pos:start="109:24" pos:end="109:25">cs</name></expr></argument>, <argument pos:start="109:28" pos:end="109:45"><expr pos:start="109:28" pos:end="109:45"><name pos:start="109:28" pos:end="109:31">addr</name> <operator pos:start="109:33" pos:end="109:33">|</operator> <operator pos:start="109:35" pos:end="109:35">(</operator><literal type="number" pos:start="109:36" pos:end="109:38">0xC</literal> <operator pos:start="109:40" pos:end="109:41">&lt;&lt;</operator> <literal type="number" pos:start="109:43" pos:end="109:44">28</literal><operator pos:start="109:45" pos:end="109:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:47"><expr pos:start="111:9" pos:end="111:46"><call pos:start="111:9" pos:end="111:46"><name pos:start="111:9" pos:end="111:22">tlb_flush_page</name><argument_list pos:start="111:23" pos:end="111:46">(<argument pos:start="111:24" pos:end="111:25"><expr pos:start="111:24" pos:end="111:25"><name pos:start="111:24" pos:end="111:25">cs</name></expr></argument>, <argument pos:start="111:28" pos:end="111:45"><expr pos:start="111:28" pos:end="111:45"><name pos:start="111:28" pos:end="111:31">addr</name> <operator pos:start="111:33" pos:end="111:33">|</operator> <operator pos:start="111:35" pos:end="111:35">(</operator><literal type="number" pos:start="111:36" pos:end="111:38">0xD</literal> <operator pos:start="111:40" pos:end="111:41">&lt;&lt;</operator> <literal type="number" pos:start="111:43" pos:end="111:44">28</literal><operator pos:start="111:45" pos:end="111:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:47"><expr pos:start="113:9" pos:end="113:46"><call pos:start="113:9" pos:end="113:46"><name pos:start="113:9" pos:end="113:22">tlb_flush_page</name><argument_list pos:start="113:23" pos:end="113:46">(<argument pos:start="113:24" pos:end="113:25"><expr pos:start="113:24" pos:end="113:25"><name pos:start="113:24" pos:end="113:25">cs</name></expr></argument>, <argument pos:start="113:28" pos:end="113:45"><expr pos:start="113:28" pos:end="113:45"><name pos:start="113:28" pos:end="113:31">addr</name> <operator pos:start="113:33" pos:end="113:33">|</operator> <operator pos:start="113:35" pos:end="113:35">(</operator><literal type="number" pos:start="113:36" pos:end="113:38">0xE</literal> <operator pos:start="113:40" pos:end="113:41">&lt;&lt;</operator> <literal type="number" pos:start="113:43" pos:end="113:44">28</literal><operator pos:start="113:45" pos:end="113:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:47"><expr pos:start="115:9" pos:end="115:46"><call pos:start="115:9" pos:end="115:46"><name pos:start="115:9" pos:end="115:22">tlb_flush_page</name><argument_list pos:start="115:23" pos:end="115:46">(<argument pos:start="115:24" pos:end="115:25"><expr pos:start="115:24" pos:end="115:25"><name pos:start="115:24" pos:end="115:25">cs</name></expr></argument>, <argument pos:start="115:28" pos:end="115:45"><expr pos:start="115:28" pos:end="115:45"><name pos:start="115:28" pos:end="115:31">addr</name> <operator pos:start="115:33" pos:end="115:33">|</operator> <operator pos:start="115:35" pos:end="115:35">(</operator><literal type="number" pos:start="115:36" pos:end="115:38">0xF</literal> <operator pos:start="115:40" pos:end="115:41">&lt;&lt;</operator> <literal type="number" pos:start="115:43" pos:end="115:44">28</literal><operator pos:start="115:45" pos:end="115:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="117:9" pos:end="120:0">break;</break>

<cpp:if pos:start="119:1" pos:end="119:25">#<cpp:directive pos:start="119:2" pos:end="119:3">if</cpp:directive> <expr pos:start="119:5" pos:end="119:25"><call pos:start="119:5" pos:end="119:25"><name pos:start="119:5" pos:end="119:11">defined</name><argument_list pos:start="119:12" pos:end="119:25">(<argument pos:start="119:13" pos:end="119:24"><expr pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="121:5" pos:end="121:25">case <expr pos:start="121:10" pos:end="121:24"><name pos:start="121:10" pos:end="121:24">POWERPC_MMU_64B</name></expr>:</case>

    <case pos:start="123:5" pos:end="123:26">case <expr pos:start="123:10" pos:end="123:25"><name pos:start="123:10" pos:end="123:25">POWERPC_MMU_2_03</name></expr>:</case>

    <case pos:start="125:5" pos:end="125:26">case <expr pos:start="125:10" pos:end="125:25"><name pos:start="125:10" pos:end="125:25">POWERPC_MMU_2_06</name></expr>:</case>

    <case pos:start="127:5" pos:end="127:27">case <expr pos:start="127:10" pos:end="127:26"><name pos:start="127:10" pos:end="127:26">POWERPC_MMU_2_06a</name></expr>:</case>

    <case pos:start="129:5" pos:end="129:26">case <expr pos:start="129:10" pos:end="129:25"><name pos:start="129:10" pos:end="129:25">POWERPC_MMU_2_07</name></expr>:</case>

    <case pos:start="131:5" pos:end="131:27">case <expr pos:start="131:10" pos:end="131:26"><name pos:start="131:10" pos:end="131:26">POWERPC_MMU_2_07a</name></expr>:</case>

        <comment type="block" pos:start="133:9" pos:end="133:52">/* tlbie invalidate TLBs for all segments */</comment>

        <comment type="block" pos:start="135:9" pos:end="141:11">/* XXX: given the fact that there are too many segments to invalidate,

         *      and we still don't have a tlb_flush_mask(env, n, mask) in QEMU,

         *      we just invalidate all TLBs

         */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:31"><expr pos:start="143:9" pos:end="143:30"><call pos:start="143:9" pos:end="143:30"><name pos:start="143:9" pos:end="143:17">tlb_flush</name><argument_list pos:start="143:18" pos:end="143:30">(<argument pos:start="143:19" pos:end="143:26"><expr pos:start="143:19" pos:end="143:26"><call pos:start="143:19" pos:end="143:26"><name pos:start="143:19" pos:end="143:21">CPU</name><argument_list pos:start="143:22" pos:end="143:26">(<argument pos:start="143:23" pos:end="143:25"><expr pos:start="143:23" pos:end="143:25"><name pos:start="143:23" pos:end="143:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="143:29" pos:end="143:29"><expr pos:start="143:29" pos:end="143:29"><literal type="number" pos:start="143:29" pos:end="143:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="145:9" pos:end="148:0">break;</break>

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="147:8" pos:end="147:34">/* defined(TARGET_PPC64) */</comment>

    <default pos:start="149:5" pos:end="149:12">default:</default>

        <comment type="block" pos:start="151:9" pos:end="151:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:51"><expr pos:start="153:9" pos:end="153:50"><call pos:start="153:9" pos:end="153:50"><name pos:start="153:9" pos:end="153:17">cpu_abort</name><argument_list pos:start="153:18" pos:end="153:50">(<argument pos:start="153:19" pos:end="153:26"><expr pos:start="153:19" pos:end="153:26"><call pos:start="153:19" pos:end="153:26"><name pos:start="153:19" pos:end="153:21">CPU</name><argument_list pos:start="153:22" pos:end="153:26">(<argument pos:start="153:23" pos:end="153:25"><expr pos:start="153:23" pos:end="153:25"><name pos:start="153:23" pos:end="153:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="153:29" pos:end="153:49"><expr pos:start="153:29" pos:end="153:49"><literal type="string" pos:start="153:29" pos:end="153:49">"Unknown MMU model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="155:9" pos:end="155:14">break;</break>

    </block_content>}</block></switch>

<cpp:else pos:start="159:1" pos:end="159:5">#<cpp:directive pos:start="159:2" pos:end="159:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="161:5" pos:end="164:0"><expr pos:start="161:5" pos:end="161:31"><call pos:start="161:5" pos:end="161:31"><name pos:start="161:5" pos:end="161:26">ppc_tlb_invalidate_all</name><argument_list pos:start="161:27" pos:end="161:31">(<argument pos:start="161:28" pos:end="161:30"><expr pos:start="161:28" pos:end="161:30"><name pos:start="161:28" pos:end="161:30">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="163:1" pos:end="163:6">#<cpp:directive pos:start="163:2" pos:end="163:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
