<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22358.c" pos:tabs="8"><function pos:start="1:1" pos:end="227:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ac3_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:44">(<parameter pos:start="1:29" pos:end="1:50"><decl pos:start="1:29" pos:end="1:50"><type pos:start="1:29" pos:end="1:50"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:67">int</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">data_size</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:43"><decl pos:start="3:29" pos:end="3:43"><type pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:36">AVPacket</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="227:1">{<block_content pos:start="7:5" pos:end="225:25">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">AC3DecodeContext</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">s</name> <init pos:start="11:25" pos:end="11:42">= <expr pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:31">avctx</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">int16_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:24">out_samples</name> <init pos:start="13:26" pos:end="13:42">= <expr pos:start="13:28" pos:end="13:42"><operator pos:start="13:28" pos:end="13:28">(</operator><name pos:start="13:29" pos:end="13:35">int16_t</name> <operator pos:start="13:37" pos:end="13:37">*</operator><operator pos:start="13:38" pos:end="13:38">)</operator><name pos:start="13:39" pos:end="13:42">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">blk</name></decl>, <decl pos:start="15:14" pos:end="15:15"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:15">ch</name></decl>, <decl pos:start="15:18" pos:end="15:20"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:18" pos:end="15:20">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">uint8_t</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:30">channel_map</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:42"><decl pos:start="19:5" pos:end="19:41"><type pos:start="19:5" pos:end="19:17"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:15">float</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:41"><name pos:start="19:18" pos:end="19:23">output</name><index pos:start="19:24" pos:end="19:41">[<expr pos:start="19:25" pos:end="19:40"><name pos:start="19:25" pos:end="19:40">AC3_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:73">/* initialize the GetBitContext with the start of valid AC-3 Frame */</comment>

    <if_stmt pos:start="25:5" pos:end="39:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:24">(<expr pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:23"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:23">input_buffer</name></name></expr>)</condition> <block pos:start="25:26" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:62">

        <comment type="block" pos:start="27:9" pos:end="29:75">/* copy input buffer to decoder context to avoid reading past the end

           of the buffer, which can be caused by a damaged input stream. */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:77"><expr pos:start="31:9" pos:end="31:76"><call pos:start="31:9" pos:end="31:76"><name pos:start="31:9" pos:end="31:14">memcpy</name><argument_list pos:start="31:15" pos:end="31:76">(<argument pos:start="31:16" pos:end="31:30"><expr pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:16">s</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:30">input_buffer</name></name></expr></argument>, <argument pos:start="31:33" pos:end="31:35"><expr pos:start="31:33" pos:end="31:35"><name pos:start="31:33" pos:end="31:35">buf</name></expr></argument>, <argument pos:start="31:38" pos:end="31:75"><expr pos:start="31:38" pos:end="31:75"><call pos:start="31:38" pos:end="31:75"><name pos:start="31:38" pos:end="31:42">FFMIN</name><argument_list pos:start="31:43" pos:end="31:75">(<argument pos:start="31:44" pos:end="31:51"><expr pos:start="31:44" pos:end="31:51"><name pos:start="31:44" pos:end="31:51">buf_size</name></expr></argument>, <argument pos:start="31:54" pos:end="31:74"><expr pos:start="31:54" pos:end="31:74"><name pos:start="31:54" pos:end="31:74">AC3_FRAME_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:62"><expr pos:start="33:9" pos:end="33:61"><call pos:start="33:9" pos:end="33:61"><name pos:start="33:9" pos:end="33:21">init_get_bits</name><argument_list pos:start="33:22" pos:end="33:61">(<argument pos:start="33:23" pos:end="33:29"><expr pos:start="33:23" pos:end="33:29"><operator pos:start="33:23" pos:end="33:23">&amp;</operator><name pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:24">s</name><operator pos:start="33:25" pos:end="33:26">-&gt;</operator><name pos:start="33:27" pos:end="33:29">gbc</name></name></expr></argument>, <argument pos:start="33:32" pos:end="33:46"><expr pos:start="33:32" pos:end="33:46"><name pos:start="33:32" pos:end="33:46"><name pos:start="33:32" pos:end="33:32">s</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:46">input_buffer</name></name></expr></argument>, <argument pos:start="33:49" pos:end="33:60"><expr pos:start="33:49" pos:end="33:60"><name pos:start="33:49" pos:end="33:56">buf_size</name> <operator pos:start="33:58" pos:end="33:58">*</operator> <literal type="number" pos:start="33:60" pos:end="33:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="39:5">else <block pos:start="35:12" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:50">

        <expr_stmt pos:start="37:9" pos:end="37:50"><expr pos:start="37:9" pos:end="37:49"><call pos:start="37:9" pos:end="37:49"><name pos:start="37:9" pos:end="37:21">init_get_bits</name><argument_list pos:start="37:22" pos:end="37:49">(<argument pos:start="37:23" pos:end="37:29"><expr pos:start="37:23" pos:end="37:29"><operator pos:start="37:23" pos:end="37:23">&amp;</operator><name pos:start="37:24" pos:end="37:29"><name pos:start="37:24" pos:end="37:24">s</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:29">gbc</name></name></expr></argument>, <argument pos:start="37:32" pos:end="37:34"><expr pos:start="37:32" pos:end="37:34"><name pos:start="37:32" pos:end="37:34">buf</name></expr></argument>, <argument pos:start="37:37" pos:end="37:48"><expr pos:start="37:37" pos:end="37:48"><name pos:start="37:37" pos:end="37:44">buf_size</name> <operator pos:start="37:46" pos:end="37:46">*</operator> <literal type="number" pos:start="37:48" pos:end="37:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:28">/* parse the syncinfo */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:19"><expr pos:start="45:5" pos:end="45:18"><operator pos:start="45:5" pos:end="45:5">*</operator><name pos:start="45:6" pos:end="45:14">data_size</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:7">err</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:31"><name pos:start="47:11" pos:end="47:28">parse_frame_header</name><argument_list pos:start="47:29" pos:end="47:31">(<argument pos:start="47:30" pos:end="47:30"><expr pos:start="47:30" pos:end="47:30"><name pos:start="47:30" pos:end="47:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:61">/* check that reported frame size fits in input buffer */</comment>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if<condition pos:start="53:7" pos:end="53:32">(<expr pos:start="53:8" pos:end="53:31"><name pos:start="53:8" pos:end="53:20"><name pos:start="53:8" pos:end="53:8">s</name><operator pos:start="53:9" pos:end="53:10">-&gt;</operator><name pos:start="53:11" pos:end="53:20">frame_size</name></name> <operator pos:start="53:22" pos:end="53:22">&gt;</operator> <name pos:start="53:24" pos:end="53:31">buf_size</name></expr>)</condition> <block pos:start="53:34" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:45">

        <expr_stmt pos:start="55:9" pos:end="55:58"><expr pos:start="55:9" pos:end="55:57"><call pos:start="55:9" pos:end="55:57"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:57">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">avctx</name></expr></argument>, <argument pos:start="55:23" pos:end="55:34"><expr pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:37" pos:end="55:56"><expr pos:start="55:37" pos:end="55:56"><literal type="string" pos:start="55:37" pos:end="55:56">"incomplete frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:45"><expr pos:start="57:9" pos:end="57:44"><name pos:start="57:9" pos:end="57:11">err</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:44">AAC_AC3_PARSE_ERROR_FRAME_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:32">/* check for crc mismatch */</comment>

    <if_stmt pos:start="65:5" pos:end="75:5"><if pos:start="65:5" pos:end="75:5">if<condition pos:start="65:7" pos:end="65:90">(<expr pos:start="65:8" pos:end="65:89"><name pos:start="65:8" pos:end="65:10">err</name> <operator pos:start="65:12" pos:end="65:13">!=</operator> <name pos:start="65:15" pos:end="65:44">AAC_AC3_PARSE_ERROR_FRAME_SIZE</name> <operator pos:start="65:46" pos:end="65:47">&amp;&amp;</operator> <name pos:start="65:49" pos:end="65:72"><name pos:start="65:49" pos:end="65:53">avctx</name><operator pos:start="65:54" pos:end="65:55">-&gt;</operator><name pos:start="65:56" pos:end="65:72">error_recognition</name></name> <operator pos:start="65:74" pos:end="65:75">&gt;=</operator> <name pos:start="65:77" pos:end="65:89">FF_ER_CAREFUL</name></expr>)</condition> <block pos:start="65:92" pos:end="75:5">{<block_content pos:start="67:9" pos:end="73:9">

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if<condition pos:start="67:11" pos:end="67:81">(<expr pos:start="67:12" pos:end="67:80"><call pos:start="67:12" pos:end="67:80"><name pos:start="67:12" pos:end="67:17">av_crc</name><argument_list pos:start="67:18" pos:end="67:80">(<argument pos:start="67:19" pos:end="67:50"><expr pos:start="67:19" pos:end="67:50"><call pos:start="67:19" pos:end="67:50"><name pos:start="67:19" pos:end="67:34">av_crc_get_table</name><argument_list pos:start="67:35" pos:end="67:50">(<argument pos:start="67:36" pos:end="67:49"><expr pos:start="67:36" pos:end="67:49"><name pos:start="67:36" pos:end="67:49">AV_CRC_16_ANSI</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:53" pos:end="67:53"><expr pos:start="67:53" pos:end="67:53"><literal type="number" pos:start="67:53" pos:end="67:53">0</literal></expr></argument>, <argument pos:start="67:56" pos:end="67:62"><expr pos:start="67:56" pos:end="67:62"><operator pos:start="67:56" pos:end="67:56">&amp;</operator><name pos:start="67:57" pos:end="67:62"><name pos:start="67:57" pos:end="67:59">buf</name><index pos:start="67:60" pos:end="67:62">[<expr pos:start="67:61" pos:end="67:61"><literal type="number" pos:start="67:61" pos:end="67:61">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="67:65" pos:end="67:79"><expr pos:start="67:65" pos:end="67:79"><name pos:start="67:65" pos:end="67:77"><name pos:start="67:65" pos:end="67:65">s</name><operator pos:start="67:66" pos:end="67:67">-&gt;</operator><name pos:start="67:68" pos:end="67:77">frame_size</name></name><operator pos:start="67:78" pos:end="67:78">-</operator><literal type="number" pos:start="67:79" pos:end="67:79">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:83" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:42">

            <expr_stmt pos:start="69:13" pos:end="69:64"><expr pos:start="69:13" pos:end="69:63"><call pos:start="69:13" pos:end="69:63"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="69:63">(<argument pos:start="69:20" pos:end="69:24"><expr pos:start="69:20" pos:end="69:24"><name pos:start="69:20" pos:end="69:24">avctx</name></expr></argument>, <argument pos:start="69:27" pos:end="69:38"><expr pos:start="69:27" pos:end="69:38"><name pos:start="69:27" pos:end="69:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:41" pos:end="69:62"><expr pos:start="69:41" pos:end="69:62"><literal type="string" pos:start="69:41" pos:end="69:62">"frame CRC mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:42"><expr pos:start="71:13" pos:end="71:41"><name pos:start="71:13" pos:end="71:15">err</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:41">AAC_AC3_PARSE_ERROR_CRC</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="135:5"><if pos:start="79:5" pos:end="135:5">if<condition pos:start="79:7" pos:end="79:45">(<expr pos:start="79:8" pos:end="79:44"><name pos:start="79:8" pos:end="79:10">err</name> <operator pos:start="79:12" pos:end="79:13">&amp;&amp;</operator> <name pos:start="79:15" pos:end="79:17">err</name> <operator pos:start="79:19" pos:end="79:20">!=</operator> <name pos:start="79:22" pos:end="79:44">AAC_AC3_PARSE_ERROR_CRC</name></expr>)</condition> <block pos:start="79:47" pos:end="135:5">{<block_content pos:start="81:9" pos:end="133:9">

        <switch pos:start="81:9" pos:end="133:9">switch<condition pos:start="81:15" pos:end="81:19">(<expr pos:start="81:16" pos:end="81:18"><name pos:start="81:16" pos:end="81:18">err</name></expr>)</condition> <block pos:start="81:21" pos:end="133:9">{<block_content pos:start="83:13" pos:end="131:22">

            <case pos:start="83:13" pos:end="83:42">case <expr pos:start="83:18" pos:end="83:41"><name pos:start="83:18" pos:end="83:41">AAC_AC3_PARSE_ERROR_SYNC</name></expr>:</case>

                <expr_stmt pos:start="85:17" pos:end="85:66"><expr pos:start="85:17" pos:end="85:65"><call pos:start="85:17" pos:end="85:65"><name pos:start="85:17" pos:end="85:22">av_log</name><argument_list pos:start="85:23" pos:end="85:65">(<argument pos:start="85:24" pos:end="85:28"><expr pos:start="85:24" pos:end="85:28"><name pos:start="85:24" pos:end="85:28">avctx</name></expr></argument>, <argument pos:start="85:31" pos:end="85:42"><expr pos:start="85:31" pos:end="85:42"><name pos:start="85:31" pos:end="85:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:45" pos:end="85:64"><expr pos:start="85:45" pos:end="85:64"><literal type="string" pos:start="85:45" pos:end="85:64">"frame sync error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="87:17" pos:end="87:26">return <expr pos:start="87:24" pos:end="87:25"><operator pos:start="87:24" pos:end="87:24">-</operator><literal type="number" pos:start="87:25" pos:end="87:25">1</literal></expr>;</return>

            <case pos:start="89:13" pos:end="89:42">case <expr pos:start="89:18" pos:end="89:41"><name pos:start="89:18" pos:end="89:41">AAC_AC3_PARSE_ERROR_BSID</name></expr>:</case>

                <expr_stmt pos:start="91:17" pos:end="91:70"><expr pos:start="91:17" pos:end="91:69"><call pos:start="91:17" pos:end="91:69"><name pos:start="91:17" pos:end="91:22">av_log</name><argument_list pos:start="91:23" pos:end="91:69">(<argument pos:start="91:24" pos:end="91:28"><expr pos:start="91:24" pos:end="91:28"><name pos:start="91:24" pos:end="91:28">avctx</name></expr></argument>, <argument pos:start="91:31" pos:end="91:42"><expr pos:start="91:31" pos:end="91:42"><name pos:start="91:31" pos:end="91:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:45" pos:end="91:68"><expr pos:start="91:45" pos:end="91:68"><literal type="string" pos:start="91:45" pos:end="91:68">"invalid bitstream id\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="93:17" pos:end="93:22">break;</break>

            <case pos:start="95:13" pos:end="95:49">case <expr pos:start="95:18" pos:end="95:48"><name pos:start="95:18" pos:end="95:48">AAC_AC3_PARSE_ERROR_SAMPLE_RATE</name></expr>:</case>

                <expr_stmt pos:start="97:17" pos:end="97:69"><expr pos:start="97:17" pos:end="97:68"><call pos:start="97:17" pos:end="97:68"><name pos:start="97:17" pos:end="97:22">av_log</name><argument_list pos:start="97:23" pos:end="97:68">(<argument pos:start="97:24" pos:end="97:28"><expr pos:start="97:24" pos:end="97:28"><name pos:start="97:24" pos:end="97:28">avctx</name></expr></argument>, <argument pos:start="97:31" pos:end="97:42"><expr pos:start="97:31" pos:end="97:42"><name pos:start="97:31" pos:end="97:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:45" pos:end="97:67"><expr pos:start="97:45" pos:end="97:67"><literal type="string" pos:start="97:45" pos:end="97:67">"invalid sample rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="99:17" pos:end="99:22">break;</break>

            <case pos:start="101:13" pos:end="101:48">case <expr pos:start="101:18" pos:end="101:47"><name pos:start="101:18" pos:end="101:47">AAC_AC3_PARSE_ERROR_FRAME_SIZE</name></expr>:</case>

                <expr_stmt pos:start="103:17" pos:end="103:68"><expr pos:start="103:17" pos:end="103:67"><call pos:start="103:17" pos:end="103:67"><name pos:start="103:17" pos:end="103:22">av_log</name><argument_list pos:start="103:23" pos:end="103:67">(<argument pos:start="103:24" pos:end="103:28"><expr pos:start="103:24" pos:end="103:28"><name pos:start="103:24" pos:end="103:28">avctx</name></expr></argument>, <argument pos:start="103:31" pos:end="103:42"><expr pos:start="103:31" pos:end="103:42"><name pos:start="103:31" pos:end="103:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:45" pos:end="103:66"><expr pos:start="103:45" pos:end="103:66"><literal type="string" pos:start="103:45" pos:end="103:66">"invalid frame size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="105:17" pos:end="105:22">break;</break>

            <case pos:start="107:13" pos:end="107:48">case <expr pos:start="107:18" pos:end="107:47"><name pos:start="107:18" pos:end="107:47">AAC_AC3_PARSE_ERROR_FRAME_TYPE</name></expr>:</case>

                <comment type="block" pos:start="109:17" pos:end="109:79">/* skip frame if CRC is ok. otherwise use error concealment. */</comment>

                <comment type="block" pos:start="111:17" pos:end="111:75">/* TODO: add support for substreams and dependent frames */</comment>

                <if_stmt pos:start="113:17" pos:end="123:17"><if pos:start="113:17" pos:end="119:17">if<condition pos:start="113:19" pos:end="113:80">(<expr pos:start="113:20" pos:end="113:79"><name pos:start="113:20" pos:end="113:32"><name pos:start="113:20" pos:end="113:20">s</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:32">frame_type</name></name> <operator pos:start="113:34" pos:end="113:35">==</operator> <name pos:start="113:37" pos:end="113:61">EAC3_FRAME_TYPE_DEPENDENT</name> <operator pos:start="113:63" pos:end="113:64">||</operator> <name pos:start="113:66" pos:end="113:79"><name pos:start="113:66" pos:end="113:66">s</name><operator pos:start="113:67" pos:end="113:68">-&gt;</operator><name pos:start="113:69" pos:end="113:79">substreamid</name></name></expr>)</condition> <block pos:start="113:82" pos:end="119:17">{<block_content pos:start="115:21" pos:end="117:41">

                    <expr_stmt pos:start="115:21" pos:end="115:93"><expr pos:start="115:21" pos:end="115:92"><call pos:start="115:21" pos:end="115:92"><name pos:start="115:21" pos:end="115:26">av_log</name><argument_list pos:start="115:27" pos:end="115:92">(<argument pos:start="115:28" pos:end="115:32"><expr pos:start="115:28" pos:end="115:32"><name pos:start="115:28" pos:end="115:32">avctx</name></expr></argument>, <argument pos:start="115:35" pos:end="115:46"><expr pos:start="115:35" pos:end="115:46"><name pos:start="115:35" pos:end="115:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:49" pos:end="115:91"><expr pos:start="115:49" pos:end="115:91"><literal type="string" pos:start="115:49" pos:end="115:91">"unsupported frame type : skipping frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="117:21" pos:end="117:41">return <expr pos:start="117:28" pos:end="117:40"><name pos:start="117:28" pos:end="117:40"><name pos:start="117:28" pos:end="117:28">s</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:40">frame_size</name></name></expr>;</return>

                </block_content>}</block></if> <else pos:start="119:19" pos:end="123:17">else <block pos:start="119:24" pos:end="123:17">{<block_content pos:start="121:21" pos:end="121:72">

                    <expr_stmt pos:start="121:21" pos:end="121:72"><expr pos:start="121:21" pos:end="121:71"><call pos:start="121:21" pos:end="121:71"><name pos:start="121:21" pos:end="121:26">av_log</name><argument_list pos:start="121:27" pos:end="121:71">(<argument pos:start="121:28" pos:end="121:32"><expr pos:start="121:28" pos:end="121:32"><name pos:start="121:28" pos:end="121:32">avctx</name></expr></argument>, <argument pos:start="121:35" pos:end="121:46"><expr pos:start="121:35" pos:end="121:46"><name pos:start="121:35" pos:end="121:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:49" pos:end="121:70"><expr pos:start="121:49" pos:end="121:70"><literal type="string" pos:start="121:49" pos:end="121:70">"invalid frame type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="125:17" pos:end="125:22">break;</break>

            <default pos:start="127:13" pos:end="127:20">default:</default>

                <expr_stmt pos:start="129:17" pos:end="129:64"><expr pos:start="129:17" pos:end="129:63"><call pos:start="129:17" pos:end="129:63"><name pos:start="129:17" pos:end="129:22">av_log</name><argument_list pos:start="129:23" pos:end="129:63">(<argument pos:start="129:24" pos:end="129:28"><expr pos:start="129:24" pos:end="129:28"><name pos:start="129:24" pos:end="129:28">avctx</name></expr></argument>, <argument pos:start="129:31" pos:end="129:42"><expr pos:start="129:31" pos:end="129:42"><name pos:start="129:31" pos:end="129:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:45" pos:end="129:62"><expr pos:start="129:45" pos:end="129:62"><literal type="string" pos:start="129:45" pos:end="129:62">"invalid header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="131:17" pos:end="131:22">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:46">/* if frame is ok, set audio parameters */</comment>

    <if_stmt pos:start="141:5" pos:end="195:5"><if pos:start="141:5" pos:end="187:5">if <condition pos:start="141:8" pos:end="141:13">(<expr pos:start="141:9" pos:end="141:12"><operator pos:start="141:9" pos:end="141:9">!</operator><name pos:start="141:10" pos:end="141:12">err</name></expr>)</condition> <block pos:start="141:15" pos:end="187:5">{<block_content pos:start="143:9" pos:end="185:9">

        <expr_stmt pos:start="143:9" pos:end="143:44"><expr pos:start="143:9" pos:end="143:43"><name pos:start="143:9" pos:end="143:26"><name pos:start="143:9" pos:end="143:13">avctx</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:26">sample_rate</name></name> <operator pos:start="143:28" pos:end="143:28">=</operator> <name pos:start="143:30" pos:end="143:43"><name pos:start="143:30" pos:end="143:30">s</name><operator pos:start="143:31" pos:end="143:32">-&gt;</operator><name pos:start="143:33" pos:end="143:43">sample_rate</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:38"><expr pos:start="145:9" pos:end="145:37"><name pos:start="145:9" pos:end="145:23"><name pos:start="145:9" pos:end="145:13">avctx</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:23">bit_rate</name></name> <operator pos:start="145:25" pos:end="145:25">=</operator> <name pos:start="145:27" pos:end="145:37"><name pos:start="145:27" pos:end="145:27">s</name><operator pos:start="145:28" pos:end="145:29">-&gt;</operator><name pos:start="145:30" pos:end="145:37">bit_rate</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="149:9" pos:end="149:28">/* channel config */</comment>

        <expr_stmt pos:start="151:9" pos:end="151:38"><expr pos:start="151:9" pos:end="151:37"><name pos:start="151:9" pos:end="151:23"><name pos:start="151:9" pos:end="151:9">s</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:23">out_channels</name></name> <operator pos:start="151:25" pos:end="151:25">=</operator> <name pos:start="151:27" pos:end="151:37"><name pos:start="151:27" pos:end="151:27">s</name><operator pos:start="151:28" pos:end="151:29">-&gt;</operator><name pos:start="151:30" pos:end="151:37">channels</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:41"><expr pos:start="153:9" pos:end="153:40"><name pos:start="153:9" pos:end="153:22"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:22">output_mode</name></name> <operator pos:start="153:24" pos:end="153:24">=</operator> <name pos:start="153:26" pos:end="153:40"><name pos:start="153:26" pos:end="153:26">s</name><operator pos:start="153:27" pos:end="153:28">-&gt;</operator><name pos:start="153:29" pos:end="153:40">channel_mode</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="157:47"><if pos:start="155:9" pos:end="157:47">if<condition pos:start="155:11" pos:end="155:21">(<expr pos:start="155:12" pos:end="155:20"><name pos:start="155:12" pos:end="155:20"><name pos:start="155:12" pos:end="155:12">s</name><operator pos:start="155:13" pos:end="155:14">-&gt;</operator><name pos:start="155:15" pos:end="155:20">lfe_on</name></name></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:47"><block_content pos:start="157:13" pos:end="157:47">

            <expr_stmt pos:start="157:13" pos:end="157:47"><expr pos:start="157:13" pos:end="157:46"><name pos:start="157:13" pos:end="157:26"><name pos:start="157:13" pos:end="157:13">s</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:26">output_mode</name></name> <operator pos:start="157:28" pos:end="157:29">|=</operator> <name pos:start="157:31" pos:end="157:46">AC3_OUTPUT_LFEON</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="159:9" pos:end="169:9"><if pos:start="159:9" pos:end="169:9">if <condition pos:start="159:12" pos:end="161:54">(<expr pos:start="159:13" pos:end="161:53"><name pos:start="159:13" pos:end="159:35"><name pos:start="159:13" pos:end="159:17">avctx</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:35">request_channels</name></name> <operator pos:start="159:37" pos:end="159:37">&gt;</operator> <literal type="number" pos:start="159:39" pos:end="159:39">0</literal> <operator pos:start="159:41" pos:end="159:42">&amp;&amp;</operator> <name pos:start="159:44" pos:end="159:66"><name pos:start="159:44" pos:end="159:48">avctx</name><operator pos:start="159:49" pos:end="159:50">-&gt;</operator><name pos:start="159:51" pos:end="159:66">request_channels</name></name> <operator pos:start="159:68" pos:end="159:69">&lt;=</operator> <literal type="number" pos:start="159:71" pos:end="159:71">2</literal> <operator pos:start="159:73" pos:end="159:74">&amp;&amp;</operator>

                <name pos:start="161:17" pos:end="161:39"><name pos:start="161:17" pos:end="161:21">avctx</name><operator pos:start="161:22" pos:end="161:23">-&gt;</operator><name pos:start="161:24" pos:end="161:39">request_channels</name></name> <operator pos:start="161:41" pos:end="161:41">&lt;</operator> <name pos:start="161:43" pos:end="161:53"><name pos:start="161:43" pos:end="161:43">s</name><operator pos:start="161:44" pos:end="161:45">-&gt;</operator><name pos:start="161:46" pos:end="161:53">channels</name></name></expr>)</condition> <block pos:start="161:56" pos:end="169:9">{<block_content pos:start="163:13" pos:end="167:74">

            <expr_stmt pos:start="163:13" pos:end="163:54"><expr pos:start="163:13" pos:end="163:53"><name pos:start="163:13" pos:end="163:27"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:27">out_channels</name></name> <operator pos:start="163:29" pos:end="163:29">=</operator> <name pos:start="163:31" pos:end="163:53"><name pos:start="163:31" pos:end="163:35">avctx</name><operator pos:start="163:36" pos:end="163:37">-&gt;</operator><name pos:start="163:38" pos:end="163:53">request_channels</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:97"><expr pos:start="165:13" pos:end="165:96"><name pos:start="165:13" pos:end="165:26"><name pos:start="165:13" pos:end="165:13">s</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:26">output_mode</name></name>  <operator pos:start="165:29" pos:end="165:29">=</operator> <ternary pos:start="165:31" pos:end="165:96"><condition pos:start="165:31" pos:end="165:60"><expr pos:start="165:31" pos:end="165:58"><name pos:start="165:31" pos:end="165:53"><name pos:start="165:31" pos:end="165:35">avctx</name><operator pos:start="165:36" pos:end="165:37">-&gt;</operator><name pos:start="165:38" pos:end="165:53">request_channels</name></name> <operator pos:start="165:55" pos:end="165:56">==</operator> <literal type="number" pos:start="165:58" pos:end="165:58">1</literal></expr> ?</condition><then pos:start="165:62" pos:end="165:76"> <expr pos:start="165:62" pos:end="165:76"><name pos:start="165:62" pos:end="165:76">AC3_CHMODE_MONO</name></expr> </then><else pos:start="165:78" pos:end="165:96">: <expr pos:start="165:80" pos:end="165:96"><name pos:start="165:80" pos:end="165:96">AC3_CHMODE_STEREO</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:74"><expr pos:start="167:13" pos:end="167:73"><name pos:start="167:13" pos:end="167:29"><name pos:start="167:13" pos:end="167:13">s</name><operator pos:start="167:14" pos:end="167:15">-&gt;</operator><name pos:start="167:16" pos:end="167:29">channel_layout</name></name> <operator pos:start="167:31" pos:end="167:31">=</operator> <name pos:start="167:33" pos:end="167:73"><name pos:start="167:33" pos:end="167:57">ff_ac3_channel_layout_tab</name><index pos:start="167:58" pos:end="167:73">[<expr pos:start="167:59" pos:end="167:72"><name pos:start="167:59" pos:end="167:72"><name pos:start="167:59" pos:end="167:59">s</name><operator pos:start="167:60" pos:end="167:61">-&gt;</operator><name pos:start="167:62" pos:end="167:72">output_mode</name></name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:42"><expr pos:start="171:9" pos:end="171:41"><name pos:start="171:9" pos:end="171:23"><name pos:start="171:9" pos:end="171:13">avctx</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:23">channels</name></name> <operator pos:start="171:25" pos:end="171:25">=</operator> <name pos:start="171:27" pos:end="171:41"><name pos:start="171:27" pos:end="171:27">s</name><operator pos:start="171:28" pos:end="171:29">-&gt;</operator><name pos:start="171:30" pos:end="171:41">out_channels</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:50"><expr pos:start="173:9" pos:end="173:49"><name pos:start="173:9" pos:end="173:29"><name pos:start="173:9" pos:end="173:13">avctx</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:29">channel_layout</name></name> <operator pos:start="173:31" pos:end="173:31">=</operator> <name pos:start="173:33" pos:end="173:49"><name pos:start="173:33" pos:end="173:33">s</name><operator pos:start="173:34" pos:end="173:35">-&gt;</operator><name pos:start="173:36" pos:end="173:49">channel_layout</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="177:9" pos:end="177:51">/* set downmixing coefficients if needed */</comment>

        <if_stmt pos:start="179:9" pos:end="185:9"><if pos:start="179:9" pos:end="185:9">if<condition pos:start="179:11" pos:end="181:52">(<expr pos:start="179:12" pos:end="181:51"><name pos:start="179:12" pos:end="179:22"><name pos:start="179:12" pos:end="179:12">s</name><operator pos:start="179:13" pos:end="179:14">-&gt;</operator><name pos:start="179:15" pos:end="179:22">channels</name></name> <operator pos:start="179:24" pos:end="179:25">!=</operator> <name pos:start="179:27" pos:end="179:41"><name pos:start="179:27" pos:end="179:27">s</name><operator pos:start="179:28" pos:end="179:29">-&gt;</operator><name pos:start="179:30" pos:end="179:41">out_channels</name></name> <operator pos:start="179:43" pos:end="179:44">&amp;&amp;</operator> <operator pos:start="179:46" pos:end="179:46">!</operator><operator pos:start="179:47" pos:end="179:47">(</operator><operator pos:start="179:48" pos:end="179:48">(</operator><name pos:start="179:49" pos:end="179:62"><name pos:start="179:49" pos:end="179:49">s</name><operator pos:start="179:50" pos:end="179:51">-&gt;</operator><name pos:start="179:52" pos:end="179:62">output_mode</name></name> <operator pos:start="179:64" pos:end="179:64">&amp;</operator> <name pos:start="179:66" pos:end="179:81">AC3_OUTPUT_LFEON</name><operator pos:start="179:82" pos:end="179:82">)</operator> <operator pos:start="179:84" pos:end="179:85">&amp;&amp;</operator>

                <name pos:start="181:17" pos:end="181:31"><name pos:start="181:17" pos:end="181:17">s</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:31">fbw_channels</name></name> <operator pos:start="181:33" pos:end="181:34">==</operator> <name pos:start="181:36" pos:end="181:50"><name pos:start="181:36" pos:end="181:36">s</name><operator pos:start="181:37" pos:end="181:38">-&gt;</operator><name pos:start="181:39" pos:end="181:50">out_channels</name></name><operator pos:start="181:51" pos:end="181:51">)</operator></expr>)</condition> <block pos:start="181:54" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:34">

            <expr_stmt pos:start="183:13" pos:end="183:34"><expr pos:start="183:13" pos:end="183:33"><call pos:start="183:13" pos:end="183:33"><name pos:start="183:13" pos:end="183:30">set_downmix_coeffs</name><argument_list pos:start="183:31" pos:end="183:33">(<argument pos:start="183:32" pos:end="183:32"><expr pos:start="183:32" pos:end="183:32"><name pos:start="183:32" pos:end="183:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="187:7" pos:end="195:5">else if <condition pos:start="187:15" pos:end="187:32">(<expr pos:start="187:16" pos:end="187:31"><operator pos:start="187:16" pos:end="187:16">!</operator><name pos:start="187:17" pos:end="187:31"><name pos:start="187:17" pos:end="187:17">s</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:31">out_channels</name></name></expr>)</condition> <block pos:start="187:34" pos:end="195:5">{<block_content pos:start="189:9" pos:end="193:89">

        <expr_stmt pos:start="189:9" pos:end="189:42"><expr pos:start="189:9" pos:end="189:41"><name pos:start="189:9" pos:end="189:23"><name pos:start="189:9" pos:end="189:9">s</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:23">out_channels</name></name> <operator pos:start="189:25" pos:end="189:25">=</operator> <name pos:start="189:27" pos:end="189:41"><name pos:start="189:27" pos:end="189:31">avctx</name><operator pos:start="189:32" pos:end="189:33">-&gt;</operator><name pos:start="189:34" pos:end="189:41">channels</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="191:9" pos:end="193:89"><if pos:start="191:9" pos:end="193:89">if<condition pos:start="191:11" pos:end="191:41">(<expr pos:start="191:12" pos:end="191:40"><name pos:start="191:12" pos:end="191:26"><name pos:start="191:12" pos:end="191:12">s</name><operator pos:start="191:13" pos:end="191:14">-&gt;</operator><name pos:start="191:15" pos:end="191:26">out_channels</name></name> <operator pos:start="191:28" pos:end="191:28">&lt;</operator> <name pos:start="191:30" pos:end="191:40"><name pos:start="191:30" pos:end="191:30">s</name><operator pos:start="191:31" pos:end="191:32">-&gt;</operator><name pos:start="191:33" pos:end="191:40">channels</name></name></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:89"><block_content pos:start="193:13" pos:end="193:89">

            <expr_stmt pos:start="193:13" pos:end="193:89"><expr pos:start="193:13" pos:end="193:88"><name pos:start="193:13" pos:end="193:26"><name pos:start="193:13" pos:end="193:13">s</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:26">output_mode</name></name>  <operator pos:start="193:29" pos:end="193:29">=</operator> <ternary pos:start="193:31" pos:end="193:88"><condition pos:start="193:31" pos:end="193:52"><expr pos:start="193:31" pos:end="193:50"><name pos:start="193:31" pos:end="193:45"><name pos:start="193:31" pos:end="193:31">s</name><operator pos:start="193:32" pos:end="193:33">-&gt;</operator><name pos:start="193:34" pos:end="193:45">out_channels</name></name> <operator pos:start="193:47" pos:end="193:48">==</operator> <literal type="number" pos:start="193:50" pos:end="193:50">1</literal></expr> ?</condition><then pos:start="193:54" pos:end="193:68"> <expr pos:start="193:54" pos:end="193:68"><name pos:start="193:54" pos:end="193:68">AC3_CHMODE_MONO</name></expr> </then><else pos:start="193:70" pos:end="193:88">: <expr pos:start="193:72" pos:end="193:88"><name pos:start="193:72" pos:end="193:88">AC3_CHMODE_STEREO</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="199:5" pos:end="199:33">/* decode the audio blocks */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:88"><expr pos:start="201:5" pos:end="201:87"><name pos:start="201:5" pos:end="201:15">channel_map</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <name pos:start="201:19" pos:end="201:87"><name pos:start="201:19" pos:end="201:40">ff_ac3_dec_channel_map</name><index pos:start="201:41" pos:end="201:76">[<expr pos:start="201:42" pos:end="201:75"><name pos:start="201:42" pos:end="201:55"><name pos:start="201:42" pos:end="201:42">s</name><operator pos:start="201:43" pos:end="201:44">-&gt;</operator><name pos:start="201:45" pos:end="201:55">output_mode</name></name> <operator pos:start="201:57" pos:end="201:57">&amp;</operator> <operator pos:start="201:59" pos:end="201:59">~</operator><name pos:start="201:60" pos:end="201:75">AC3_OUTPUT_LFEON</name></expr>]</index><index pos:start="201:77" pos:end="201:87">[<expr pos:start="201:78" pos:end="201:86"><name pos:start="201:78" pos:end="201:86"><name pos:start="201:78" pos:end="201:78">s</name><operator pos:start="201:79" pos:end="201:80">-&gt;</operator><name pos:start="201:81" pos:end="201:86">lfe_on</name></name></expr>]</index></name></expr>;</expr_stmt>

    <for pos:start="203:5" pos:end="205:48">for <control pos:start="203:9" pos:end="203:44">(<init pos:start="203:10" pos:end="203:16"><expr pos:start="203:10" pos:end="203:15"><name pos:start="203:10" pos:end="203:11">ch</name> <operator pos:start="203:13" pos:end="203:13">=</operator> <literal type="number" pos:start="203:15" pos:end="203:15">0</literal></expr>;</init> <condition pos:start="203:18" pos:end="203:38"><expr pos:start="203:18" pos:end="203:37"><name pos:start="203:18" pos:end="203:19">ch</name> <operator pos:start="203:21" pos:end="203:21">&lt;</operator> <name pos:start="203:23" pos:end="203:37"><name pos:start="203:23" pos:end="203:23">s</name><operator pos:start="203:24" pos:end="203:25">-&gt;</operator><name pos:start="203:26" pos:end="203:37">out_channels</name></name></expr>;</condition> <incr pos:start="203:40" pos:end="203:43"><expr pos:start="203:40" pos:end="203:43"><name pos:start="203:40" pos:end="203:41">ch</name><operator pos:start="203:42" pos:end="203:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="205:9" pos:end="205:48"><block_content pos:start="205:9" pos:end="205:48">

        <expr_stmt pos:start="205:9" pos:end="205:48"><expr pos:start="205:9" pos:end="205:47"><name pos:start="205:9" pos:end="205:18"><name pos:start="205:9" pos:end="205:14">output</name><index pos:start="205:15" pos:end="205:18">[<expr pos:start="205:16" pos:end="205:17"><name pos:start="205:16" pos:end="205:17">ch</name></expr>]</index></name> <operator pos:start="205:20" pos:end="205:20">=</operator> <name pos:start="205:22" pos:end="205:47"><name pos:start="205:22" pos:end="205:22">s</name><operator pos:start="205:23" pos:end="205:24">-&gt;</operator><name pos:start="205:25" pos:end="205:30">output</name><index pos:start="205:31" pos:end="205:47">[<expr pos:start="205:32" pos:end="205:46"><name pos:start="205:32" pos:end="205:46"><name pos:start="205:32" pos:end="205:42">channel_map</name><index pos:start="205:43" pos:end="205:46">[<expr pos:start="205:44" pos:end="205:45"><name pos:start="205:44" pos:end="205:45">ch</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

    <for pos:start="207:5" pos:end="221:5">for <control pos:start="207:9" pos:end="207:45">(<init pos:start="207:10" pos:end="207:17"><expr pos:start="207:10" pos:end="207:16"><name pos:start="207:10" pos:end="207:12">blk</name> <operator pos:start="207:14" pos:end="207:14">=</operator> <literal type="number" pos:start="207:16" pos:end="207:16">0</literal></expr>;</init> <condition pos:start="207:19" pos:end="207:38"><expr pos:start="207:19" pos:end="207:37"><name pos:start="207:19" pos:end="207:21">blk</name> <operator pos:start="207:23" pos:end="207:23">&lt;</operator> <name pos:start="207:25" pos:end="207:37"><name pos:start="207:25" pos:end="207:25">s</name><operator pos:start="207:26" pos:end="207:27">-&gt;</operator><name pos:start="207:28" pos:end="207:37">num_blocks</name></name></expr>;</condition> <incr pos:start="207:40" pos:end="207:44"><expr pos:start="207:40" pos:end="207:44"><name pos:start="207:40" pos:end="207:42">blk</name><operator pos:start="207:43" pos:end="207:44">++</operator></expr></incr>)</control> <block pos:start="207:47" pos:end="221:5">{<block_content pos:start="209:9" pos:end="219:45">

        <if_stmt pos:start="209:9" pos:end="215:9"><if pos:start="209:9" pos:end="215:9">if <condition pos:start="209:12" pos:end="209:47">(<expr pos:start="209:13" pos:end="209:46"><operator pos:start="209:13" pos:end="209:13">!</operator><name pos:start="209:14" pos:end="209:16">err</name> <operator pos:start="209:18" pos:end="209:19">&amp;&amp;</operator> <call pos:start="209:21" pos:end="209:46"><name pos:start="209:21" pos:end="209:38">decode_audio_block</name><argument_list pos:start="209:39" pos:end="209:46">(<argument pos:start="209:40" pos:end="209:40"><expr pos:start="209:40" pos:end="209:40"><name pos:start="209:40" pos:end="209:40">s</name></expr></argument>, <argument pos:start="209:43" pos:end="209:45"><expr pos:start="209:43" pos:end="209:45"><name pos:start="209:43" pos:end="209:45">blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="209:49" pos:end="215:9">{<block_content pos:start="211:13" pos:end="213:20">

            <expr_stmt pos:start="211:13" pos:end="211:76"><expr pos:start="211:13" pos:end="211:75"><call pos:start="211:13" pos:end="211:75"><name pos:start="211:13" pos:end="211:18">av_log</name><argument_list pos:start="211:19" pos:end="211:75">(<argument pos:start="211:20" pos:end="211:24"><expr pos:start="211:20" pos:end="211:24"><name pos:start="211:20" pos:end="211:24">avctx</name></expr></argument>, <argument pos:start="211:27" pos:end="211:38"><expr pos:start="211:27" pos:end="211:38"><name pos:start="211:27" pos:end="211:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="211:41" pos:end="211:74"><expr pos:start="211:41" pos:end="211:74"><literal type="string" pos:start="211:41" pos:end="211:74">"error decoding the audio block\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:20"><expr pos:start="213:13" pos:end="213:19"><name pos:start="213:13" pos:end="213:15">err</name> <operator pos:start="213:17" pos:end="213:17">=</operator> <literal type="number" pos:start="213:19" pos:end="213:19">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:84"><expr pos:start="217:9" pos:end="217:83"><call pos:start="217:9" pos:end="217:83"><name pos:start="217:9" pos:end="217:40"><name pos:start="217:9" pos:end="217:9">s</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:14">dsp</name><operator pos:start="217:15" pos:end="217:15">.</operator><name pos:start="217:16" pos:end="217:40">float_to_int16_interleave</name></name><argument_list pos:start="217:41" pos:end="217:83">(<argument pos:start="217:42" pos:end="217:52"><expr pos:start="217:42" pos:end="217:52"><name pos:start="217:42" pos:end="217:52">out_samples</name></expr></argument>, <argument pos:start="217:55" pos:end="217:60"><expr pos:start="217:55" pos:end="217:60"><name pos:start="217:55" pos:end="217:60">output</name></expr></argument>, <argument pos:start="217:63" pos:end="217:65"><expr pos:start="217:63" pos:end="217:65"><literal type="number" pos:start="217:63" pos:end="217:65">256</literal></expr></argument>, <argument pos:start="217:68" pos:end="217:82"><expr pos:start="217:68" pos:end="217:82"><name pos:start="217:68" pos:end="217:82"><name pos:start="217:68" pos:end="217:68">s</name><operator pos:start="217:69" pos:end="217:70">-&gt;</operator><name pos:start="217:71" pos:end="217:82">out_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:45"><expr pos:start="219:9" pos:end="219:44"><name pos:start="219:9" pos:end="219:19">out_samples</name> <operator pos:start="219:21" pos:end="219:22">+=</operator> <literal type="number" pos:start="219:24" pos:end="219:26">256</literal> <operator pos:start="219:28" pos:end="219:28">*</operator> <name pos:start="219:30" pos:end="219:44"><name pos:start="219:30" pos:end="219:30">s</name><operator pos:start="219:31" pos:end="219:32">-&gt;</operator><name pos:start="219:33" pos:end="219:44">out_channels</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="223:5" pos:end="223:74"><expr pos:start="223:5" pos:end="223:73"><operator pos:start="223:5" pos:end="223:5">*</operator><name pos:start="223:6" pos:end="223:14">data_size</name> <operator pos:start="223:16" pos:end="223:16">=</operator> <name pos:start="223:18" pos:end="223:30"><name pos:start="223:18" pos:end="223:18">s</name><operator pos:start="223:19" pos:end="223:20">-&gt;</operator><name pos:start="223:21" pos:end="223:30">num_blocks</name></name> <operator pos:start="223:32" pos:end="223:32">*</operator> <literal type="number" pos:start="223:34" pos:end="223:36">256</literal> <operator pos:start="223:38" pos:end="223:38">*</operator> <name pos:start="223:40" pos:end="223:54"><name pos:start="223:40" pos:end="223:44">avctx</name><operator pos:start="223:45" pos:end="223:46">-&gt;</operator><name pos:start="223:47" pos:end="223:54">channels</name></name> <operator pos:start="223:56" pos:end="223:56">*</operator> <sizeof pos:start="223:58" pos:end="223:73">sizeof <argument_list pos:start="223:65" pos:end="223:73">(<argument pos:start="223:66" pos:end="223:72"><expr pos:start="223:66" pos:end="223:72"><name pos:start="223:66" pos:end="223:72">int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <return pos:start="225:5" pos:end="225:25">return <expr pos:start="225:12" pos:end="225:24"><name pos:start="225:12" pos:end="225:24"><name pos:start="225:12" pos:end="225:12">s</name><operator pos:start="225:13" pos:end="225:14">-&gt;</operator><name pos:start="225:15" pos:end="225:24">frame_size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
