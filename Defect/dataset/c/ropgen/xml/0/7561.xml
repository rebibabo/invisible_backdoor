<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7561.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:35">handle_cpu_signal</name><parameter_list pos:start="1:36" pos:end="5:46">(<parameter pos:start="1:37" pos:end="1:52"><decl pos:start="1:37" pos:end="1:52"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:44">unsigned</name> <name pos:start="1:46" pos:end="1:49">long</name></type> <name pos:start="1:51" pos:end="1:52">pc</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:75"><decl pos:start="1:55" pos:end="1:75"><type pos:start="1:55" pos:end="1:75"><name pos:start="1:55" pos:end="1:62">unsigned</name> <name pos:start="1:64" pos:end="1:67">long</name></type> <name pos:start="1:69" pos:end="1:75">address</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:48"><decl pos:start="3:37" pos:end="3:48"><type pos:start="3:37" pos:end="3:48"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:48">is_write</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:67"><decl pos:start="3:51" pos:end="3:67"><type pos:start="3:51" pos:end="3:67"><name pos:start="3:51" pos:end="3:58">sigset_t</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:67">old_set</name></decl></parameter>, 

                                    <parameter pos:start="5:37" pos:end="5:45"><decl pos:start="5:37" pos:end="5:45"><type pos:start="5:37" pos:end="5:45"><name pos:start="5:37" pos:end="5:40">void</name> <modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:45">puc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="97:1">{<block_content pos:start="9:5" pos:end="95:13">

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">TranslationBlock</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="20:0"><if pos:start="15:5" pos:end="20:0">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:22">cpu_single_env</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="20:0"><block_content pos:start="17:9" pos:end="20:0">

        <expr_stmt pos:start="17:9" pos:end="20:0"><expr pos:start="17:9" pos:end="17:28"><name pos:start="17:9" pos:end="17:11">env</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:28">cpu_single_env</name></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="17:31" pos:end="17:80">/* XXX: find a correct solution for multithread */</comment>

<cpp:if pos:start="19:1" pos:end="19:25">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:25"><call pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:11">defined</name><argument_list pos:start="19:12" pos:end="19:25">(<argument pos:start="19:13" pos:end="19:24"><expr pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:24">DEBUG_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="21:5" pos:end="26:0"><expr pos:start="21:5" pos:end="23:65"><call pos:start="21:5" pos:end="23:65"><name pos:start="21:5" pos:end="21:15">qemu_printf</name><argument_list pos:start="21:16" pos:end="23:65">(<argument pos:start="21:17" pos:end="21:78"><expr pos:start="21:17" pos:end="21:78"><literal type="string" pos:start="21:17" pos:end="21:78">"qemu: SIGSEGV pc=0x%08lx address=%08lx w=%d oldset=0x%08lx\n"</literal></expr></argument>, 

                <argument pos:start="23:17" pos:end="23:18"><expr pos:start="23:17" pos:end="23:18"><name pos:start="23:17" pos:end="23:18">pc</name></expr></argument>, <argument pos:start="23:21" pos:end="23:27"><expr pos:start="23:21" pos:end="23:27"><name pos:start="23:21" pos:end="23:27">address</name></expr></argument>, <argument pos:start="23:30" pos:end="23:37"><expr pos:start="23:30" pos:end="23:37"><name pos:start="23:30" pos:end="23:37">is_write</name></expr></argument>, <argument pos:start="23:40" pos:end="23:64"><expr pos:start="23:40" pos:end="23:64"><operator pos:start="23:40" pos:end="23:40">*</operator><operator pos:start="23:41" pos:end="23:41">(</operator><name pos:start="23:42" pos:end="23:49">unsigned</name> <name pos:start="23:51" pos:end="23:54">long</name> <operator pos:start="23:56" pos:end="23:56">*</operator><operator pos:start="23:57" pos:end="23:57">)</operator><name pos:start="23:58" pos:end="23:64">old_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="27:5" pos:end="27:28">/* XXX: locking issue */</comment>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:53">(<expr pos:start="29:9" pos:end="29:52"><name pos:start="29:9" pos:end="29:16">is_write</name> <operator pos:start="29:18" pos:end="29:19">&amp;&amp;</operator> <call pos:start="29:21" pos:end="29:52"><name pos:start="29:21" pos:end="29:34">page_unprotect</name><argument_list pos:start="29:35" pos:end="29:52">(<argument pos:start="29:36" pos:end="29:42"><expr pos:start="29:36" pos:end="29:42"><name pos:start="29:36" pos:end="29:42">address</name></expr></argument>, <argument pos:start="29:45" pos:end="29:46"><expr pos:start="29:45" pos:end="29:46"><name pos:start="29:45" pos:end="29:46">pc</name></expr></argument>, <argument pos:start="29:49" pos:end="29:51"><expr pos:start="29:49" pos:end="29:51"><name pos:start="29:49" pos:end="29:51">puc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:55" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:17">

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:35">/* see if it is an MMU fault */</comment>

    <expr_stmt pos:start="39:5" pos:end="41:74"><expr pos:start="39:5" pos:end="41:73"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="41:73"><name pos:start="39:11" pos:end="39:34">cpu_x86_handle_mmu_fault</name><argument_list pos:start="39:35" pos:end="41:73">(<argument pos:start="39:36" pos:end="39:38"><expr pos:start="39:36" pos:end="39:38"><name pos:start="39:36" pos:end="39:38">env</name></expr></argument>, <argument pos:start="39:41" pos:end="39:47"><expr pos:start="39:41" pos:end="39:47"><name pos:start="39:41" pos:end="39:47">address</name></expr></argument>, <argument pos:start="39:50" pos:end="39:57"><expr pos:start="39:50" pos:end="39:57"><name pos:start="39:50" pos:end="39:57">is_write</name></expr></argument>, 

                                   <argument pos:start="41:36" pos:end="41:69"><expr pos:start="41:36" pos:end="41:69"><operator pos:start="41:36" pos:end="41:36">(</operator><operator pos:start="41:37" pos:end="41:37">(</operator><name pos:start="41:38" pos:end="41:48"><name pos:start="41:38" pos:end="41:40">env</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:48">hflags</name></name> <operator pos:start="41:50" pos:end="41:50">&amp;</operator> <name pos:start="41:52" pos:end="41:62">HF_CPL_MASK</name><operator pos:start="41:63" pos:end="41:63">)</operator> <operator pos:start="41:65" pos:end="41:66">==</operator> <literal type="number" pos:start="41:68" pos:end="41:68">3</literal><operator pos:start="41:69" pos:end="41:69">)</operator></expr></argument>, <argument pos:start="41:72" pos:end="41:72"><expr pos:start="41:72" pos:end="41:72"><literal type="number" pos:start="41:72" pos:end="41:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="45:17"><if pos:start="43:5" pos:end="45:17">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:17"><block_content pos:start="45:9" pos:end="45:17">

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="45:19" pos:end="45:40">/* not an MMU fault */</comment>

    <if_stmt pos:start="47:5" pos:end="49:17"><if pos:start="47:5" pos:end="49:17">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:14">==</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:17"><block_content pos:start="49:9" pos:end="49:17">

        <return pos:start="49:9" pos:end="49:17">return <expr pos:start="49:16" pos:end="49:16"><literal type="number" pos:start="49:16" pos:end="49:16">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="49:19" pos:end="49:80">/* the MMU fault was handled without causing real CPU fault */</comment>

    <comment type="block" pos:start="51:5" pos:end="51:38">/* now we have a real cpu fault */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:24"><expr pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:6">tb</name> <operator pos:start="53:8" pos:end="53:8">=</operator> <call pos:start="53:10" pos:end="53:23"><name pos:start="53:10" pos:end="53:19">tb_find_pc</name><argument_list pos:start="53:20" pos:end="53:23">(<argument pos:start="53:21" pos:end="53:22"><expr pos:start="53:21" pos:end="53:22"><name pos:start="53:21" pos:end="53:22">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:11">(<expr pos:start="55:9" pos:end="55:10"><name pos:start="55:9" pos:end="55:10">tb</name></expr>)</condition> <block pos:start="55:13" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:44">

        <comment type="block" pos:start="57:9" pos:end="59:33">/* the PC is inside the translated code. It means that we have

           a virtual CPU fault */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:44"><expr pos:start="61:9" pos:end="61:43"><call pos:start="61:9" pos:end="61:43"><name pos:start="61:9" pos:end="61:25">cpu_restore_state</name><argument_list pos:start="61:26" pos:end="61:43">(<argument pos:start="61:27" pos:end="61:28"><expr pos:start="61:27" pos:end="61:28"><name pos:start="61:27" pos:end="61:28">tb</name></expr></argument>, <argument pos:start="61:31" pos:end="61:33"><expr pos:start="61:31" pos:end="61:33"><name pos:start="61:31" pos:end="61:33">env</name></expr></argument>, <argument pos:start="61:36" pos:end="61:37"><expr pos:start="61:36" pos:end="61:37"><name pos:start="61:36" pos:end="61:37">pc</name></expr></argument>, <argument pos:start="61:40" pos:end="61:42"><expr pos:start="61:40" pos:end="61:42"><name pos:start="61:40" pos:end="61:42">puc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="91:5"><if pos:start="65:5" pos:end="83:5">if <condition pos:start="65:8" pos:end="65:17">(<expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:14">==</operator> <literal type="number" pos:start="65:16" pos:end="65:16">1</literal></expr>)</condition> <block pos:start="65:19" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:58">

<cpp:if pos:start="67:1" pos:end="67:5">#<cpp:directive pos:start="67:2" pos:end="67:3">if</cpp:directive> <expr pos:start="67:5" pos:end="67:5"><literal type="number" pos:start="67:5" pos:end="67:5">0</literal></expr></cpp:if>

        printf("PF exception: EIP=0x%08x CR2=0x%08x error=0x%x\n", 

               env-&gt;eip, env-&gt;cr[2], env-&gt;error_code);

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="75:9" pos:end="77:40">/* we restore the process signal mask as the sigreturn should

           do it (XXX: use sigsetjmp) */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:48"><expr pos:start="79:9" pos:end="79:47"><call pos:start="79:9" pos:end="79:47"><name pos:start="79:9" pos:end="79:19">sigprocmask</name><argument_list pos:start="79:20" pos:end="79:47">(<argument pos:start="79:21" pos:end="79:31"><expr pos:start="79:21" pos:end="79:31"><name pos:start="79:21" pos:end="79:31">SIG_SETMASK</name></expr></argument>, <argument pos:start="79:34" pos:end="79:40"><expr pos:start="79:34" pos:end="79:40"><name pos:start="79:34" pos:end="79:40">old_set</name></expr></argument>, <argument pos:start="79:43" pos:end="79:46"><expr pos:start="79:43" pos:end="79:46"><name pos:start="79:43" pos:end="79:46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:58"><expr pos:start="81:9" pos:end="81:57"><call pos:start="81:9" pos:end="81:57"><name pos:start="81:9" pos:end="81:27">raise_exception_err</name><argument_list pos:start="81:28" pos:end="81:57">(<argument pos:start="81:29" pos:end="81:39"><expr pos:start="81:29" pos:end="81:39"><name pos:start="81:29" pos:end="81:39">EXCP0E_PAGE</name></expr></argument>, <argument pos:start="81:42" pos:end="81:56"><expr pos:start="81:42" pos:end="81:56"><name pos:start="81:42" pos:end="81:56"><name pos:start="81:42" pos:end="81:44">env</name><operator pos:start="81:45" pos:end="81:46">-&gt;</operator><name pos:start="81:47" pos:end="81:56">error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="91:5">else <block pos:start="83:12" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:41">

        <comment type="block" pos:start="85:9" pos:end="85:46">/* activate soft MMU for this block */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:39"><expr pos:start="87:9" pos:end="87:38"><name pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:11">env</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:19">hflags</name></name> <operator pos:start="87:21" pos:end="87:22">|=</operator> <name pos:start="87:24" pos:end="87:38">HF_SOFTMMU_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:41"><expr pos:start="89:9" pos:end="89:40"><call pos:start="89:9" pos:end="89:40"><name pos:start="89:9" pos:end="89:30">cpu_resume_from_signal</name><argument_list pos:start="89:31" pos:end="89:40">(<argument pos:start="89:32" pos:end="89:34"><expr pos:start="89:32" pos:end="89:34"><name pos:start="89:32" pos:end="89:34">env</name></expr></argument>, <argument pos:start="89:37" pos:end="89:39"><expr pos:start="89:37" pos:end="89:39"><name pos:start="89:37" pos:end="89:39">puc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="93:5" pos:end="93:26">/* never comes here */</comment>

    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
