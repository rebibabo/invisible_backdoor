<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/869.c" pos:tabs="8"><function pos:start="1:1" pos:end="29:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:29">acpi_memory_hotplug_init</name><parameter_list pos:start="1:30" pos:end="3:53">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:42">MemoryRegion</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">as</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:54">Object</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">owner</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:52"><decl pos:start="3:31" pos:end="3:52"><type pos:start="3:31" pos:end="3:52"><name pos:start="3:31" pos:end="3:45">MemHotplugState</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:52">state</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="29:1">{<block_content pos:start="7:5" pos:end="27:74">

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MachineState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:25">machine</name> <init pos:start="7:27" pos:end="7:55">= <expr pos:start="7:29" pos:end="7:55"><call pos:start="7:29" pos:end="7:55"><name pos:start="7:29" pos:end="7:35">MACHINE</name><argument_list pos:start="7:36" pos:end="7:55">(<argument pos:start="7:37" pos:end="7:54"><expr pos:start="7:37" pos:end="7:54"><call pos:start="7:37" pos:end="7:54"><name pos:start="7:37" pos:end="7:52">qdev_get_machine</name><argument_list pos:start="7:53" pos:end="7:54">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:42"><expr pos:start="11:5" pos:end="11:41"><name pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:9">state</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:20">dev_count</name></name> <operator pos:start="11:22" pos:end="11:22">=</operator> <name pos:start="11:24" pos:end="11:41"><name pos:start="11:24" pos:end="11:30">machine</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:41">ram_slots</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:26">(<expr pos:start="13:9" pos:end="13:25"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:25"><name pos:start="13:10" pos:end="13:14">state</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:25">dev_count</name></name></expr>)</condition> <block pos:start="13:28" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:69"><expr pos:start="21:5" pos:end="21:68"><name pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:9">state</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:15">devs</name></name> <operator pos:start="21:17" pos:end="21:17">=</operator> <call pos:start="21:19" pos:end="21:68"><name pos:start="21:19" pos:end="21:27">g_malloc0</name><argument_list pos:start="21:28" pos:end="21:68">(<argument pos:start="21:29" pos:end="21:67"><expr pos:start="21:29" pos:end="21:67"><sizeof pos:start="21:29" pos:end="21:48">sizeof<argument_list pos:start="21:35" pos:end="21:48">(<argument pos:start="21:36" pos:end="21:47"><expr pos:start="21:36" pos:end="21:47"><operator pos:start="21:36" pos:end="21:36">*</operator><name pos:start="21:37" pos:end="21:47"><name pos:start="21:37" pos:end="21:41">state</name><operator pos:start="21:42" pos:end="21:43">-&gt;</operator><name pos:start="21:44" pos:end="21:47">devs</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="21:50" pos:end="21:50">*</operator> <name pos:start="21:52" pos:end="21:67"><name pos:start="21:52" pos:end="21:56">state</name><operator pos:start="21:57" pos:end="21:58">-&gt;</operator><name pos:start="21:59" pos:end="21:67">dev_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="25:74"><expr pos:start="23:5" pos:end="25:73"><call pos:start="23:5" pos:end="25:73"><name pos:start="23:5" pos:end="23:25">memory_region_init_io</name><argument_list pos:start="23:26" pos:end="25:73">(<argument pos:start="23:27" pos:end="23:36"><expr pos:start="23:27" pos:end="23:36"><operator pos:start="23:27" pos:end="23:27">&amp;</operator><name pos:start="23:28" pos:end="23:36"><name pos:start="23:28" pos:end="23:32">state</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:36">io</name></name></expr></argument>, <argument pos:start="23:39" pos:end="23:43"><expr pos:start="23:39" pos:end="23:43"><name pos:start="23:39" pos:end="23:43">owner</name></expr></argument>, <argument pos:start="23:46" pos:end="23:69"><expr pos:start="23:46" pos:end="23:69"><operator pos:start="23:46" pos:end="23:46">&amp;</operator><name pos:start="23:47" pos:end="23:69">acpi_memory_hotplug_ops</name></expr></argument>, <argument pos:start="23:72" pos:end="23:76"><expr pos:start="23:72" pos:end="23:76"><name pos:start="23:72" pos:end="23:76">state</name></expr></argument>,

                          <argument pos:start="25:27" pos:end="25:44"><expr pos:start="25:27" pos:end="25:44"><literal type="string" pos:start="25:27" pos:end="25:44">"acpi-mem-hotplug"</literal></expr></argument>, <argument pos:start="25:47" pos:end="25:72"><expr pos:start="25:47" pos:end="25:72"><name pos:start="25:47" pos:end="25:72">ACPI_MEMORY_HOTPLUG_IO_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:74"><expr pos:start="27:5" pos:end="27:73"><call pos:start="27:5" pos:end="27:73"><name pos:start="27:5" pos:end="27:31">memory_region_add_subregion</name><argument_list pos:start="27:32" pos:end="27:73">(<argument pos:start="27:33" pos:end="27:34"><expr pos:start="27:33" pos:end="27:34"><name pos:start="27:33" pos:end="27:34">as</name></expr></argument>, <argument pos:start="27:37" pos:end="27:60"><expr pos:start="27:37" pos:end="27:60"><name pos:start="27:37" pos:end="27:60">ACPI_MEMORY_HOTPLUG_BASE</name></expr></argument>, <argument pos:start="27:63" pos:end="27:72"><expr pos:start="27:63" pos:end="27:72"><operator pos:start="27:63" pos:end="27:63">&amp;</operator><name pos:start="27:64" pos:end="27:72"><name pos:start="27:64" pos:end="27:68">state</name><operator pos:start="27:69" pos:end="27:70">-&gt;</operator><name pos:start="27:71" pos:end="27:72">io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
