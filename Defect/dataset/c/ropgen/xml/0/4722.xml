<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4722.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:13">qmp_cont</name><parameter_list pos:start="1:14" pos:end="1:27">(<parameter pos:start="1:15" pos:end="1:26"><decl pos:start="1:15" pos:end="1:26"><type pos:start="1:15" pos:end="1:22"><name pos:start="1:15" pos:end="1:19">Error</name> <modifier pos:start="1:21" pos:end="1:21">*</modifier><modifier pos:start="1:22" pos:end="1:22">*</modifier></type><name pos:start="1:23" pos:end="1:26">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="113:1">{<block_content pos:start="5:5" pos:end="111:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">local_err</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BlockBackend</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:20">BdrvNextIterator</name></type> <name pos:start="11:22" pos:end="11:23">it</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="17:18">/* if there is a dump in background, we should wait until the dump

     * finished */</comment>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:27">(<expr pos:start="19:9" pos:end="19:26"><call pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:24">dump_in_progress</name><argument_list pos:start="19:25" pos:end="19:26">()</argument_list></call></expr>)</condition> <block pos:start="19:29" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:69"><expr pos:start="21:9" pos:end="21:68"><call pos:start="21:9" pos:end="21:68"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="21:68">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="21:67"><expr pos:start="21:26" pos:end="21:67"><literal type="string" pos:start="21:26" pos:end="21:67">"There is a dump in process, please wait."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="39:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:31">(<expr pos:start="29:9" pos:end="29:30"><call pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:28">runstate_needs_reset</name><argument_list pos:start="29:29" pos:end="29:30">()</argument_list></call></expr>)</condition> <block pos:start="29:33" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:15">

        <expr_stmt pos:start="31:9" pos:end="31:70"><expr pos:start="31:9" pos:end="31:69"><call pos:start="31:9" pos:end="31:69"><name pos:start="31:9" pos:end="31:18">error_setg</name><argument_list pos:start="31:19" pos:end="31:69">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">errp</name></expr></argument>, <argument pos:start="31:26" pos:end="31:68"><expr pos:start="31:26" pos:end="31:68"><literal type="string" pos:start="31:26" pos:end="31:68">"Resetting the Virtual Machine is required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="35:7" pos:end="39:5">else if <condition pos:start="35:15" pos:end="35:51">(<expr pos:start="35:16" pos:end="35:50"><call pos:start="35:16" pos:end="35:50"><name pos:start="35:16" pos:end="35:29">runstate_check</name><argument_list pos:start="35:30" pos:end="35:50">(<argument pos:start="35:31" pos:end="35:49"><expr pos:start="35:31" pos:end="35:49"><name pos:start="35:31" pos:end="35:49">RUN_STATE_SUSPENDED</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:53" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:15">

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="43:5" pos:end="47:5">for <control pos:start="43:9" pos:end="43:56">(<init pos:start="43:10" pos:end="43:30"><expr pos:start="43:10" pos:end="43:29"><name pos:start="43:10" pos:end="43:12">blk</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:29"><name pos:start="43:16" pos:end="43:23">blk_next</name><argument_list pos:start="43:24" pos:end="43:29">(<argument pos:start="43:25" pos:end="43:28"><expr pos:start="43:25" pos:end="43:28"><name pos:start="43:25" pos:end="43:28">NULL</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="43:32" pos:end="43:35"><expr pos:start="43:32" pos:end="43:34"><name pos:start="43:32" pos:end="43:34">blk</name></expr>;</condition> <incr pos:start="43:37" pos:end="43:55"><expr pos:start="43:37" pos:end="43:55"><name pos:start="43:37" pos:end="43:39">blk</name> <operator pos:start="43:41" pos:end="43:41">=</operator> <call pos:start="43:43" pos:end="43:55"><name pos:start="43:43" pos:end="43:50">blk_next</name><argument_list pos:start="43:51" pos:end="43:55">(<argument pos:start="43:52" pos:end="43:54"><expr pos:start="43:52" pos:end="43:54"><name pos:start="43:52" pos:end="43:54">blk</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="43:58" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:32">

        <expr_stmt pos:start="45:9" pos:end="45:32"><expr pos:start="45:9" pos:end="45:31"><call pos:start="45:9" pos:end="45:31"><name pos:start="45:9" pos:end="45:26">blk_iostatus_reset</name><argument_list pos:start="45:27" pos:end="45:31">(<argument pos:start="45:28" pos:end="45:30"><expr pos:start="45:28" pos:end="45:30"><name pos:start="45:28" pos:end="45:30">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="51:5" pos:end="63:5">for <control pos:start="51:9" pos:end="51:55">(<init pos:start="51:10" pos:end="51:30"><expr pos:start="51:10" pos:end="51:29"><name pos:start="51:10" pos:end="51:11">bs</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="51:29"><name pos:start="51:15" pos:end="51:24">bdrv_first</name><argument_list pos:start="51:25" pos:end="51:29">(<argument pos:start="51:26" pos:end="51:28"><expr pos:start="51:26" pos:end="51:28"><operator pos:start="51:26" pos:end="51:26">&amp;</operator><name pos:start="51:27" pos:end="51:28">it</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:33"><name pos:start="51:32" pos:end="51:33">bs</name></expr>;</condition> <incr pos:start="51:36" pos:end="51:54"><expr pos:start="51:36" pos:end="51:54"><name pos:start="51:36" pos:end="51:37">bs</name> <operator pos:start="51:39" pos:end="51:39">=</operator> <call pos:start="51:41" pos:end="51:54"><name pos:start="51:41" pos:end="51:49">bdrv_next</name><argument_list pos:start="51:50" pos:end="51:54">(<argument pos:start="51:51" pos:end="51:53"><expr pos:start="51:51" pos:end="51:53"><operator pos:start="51:51" pos:end="51:51">&amp;</operator><name pos:start="51:52" pos:end="51:53">it</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="51:57" pos:end="63:5">{<block_content pos:start="53:9" pos:end="61:9">

        <expr_stmt pos:start="53:9" pos:end="53:43"><expr pos:start="53:9" pos:end="53:42"><call pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:20">bdrv_add_key</name><argument_list pos:start="53:21" pos:end="53:42">(<argument pos:start="53:22" pos:end="53:23"><expr pos:start="53:22" pos:end="53:23"><name pos:start="53:22" pos:end="53:23">bs</name></expr></argument>, <argument pos:start="53:26" pos:end="53:29"><expr pos:start="53:26" pos:end="53:29"><name pos:start="53:26" pos:end="53:29">NULL</name></expr></argument>, <argument pos:start="53:32" pos:end="53:41"><expr pos:start="53:32" pos:end="53:41"><operator pos:start="53:32" pos:end="53:32">&amp;</operator><name pos:start="53:33" pos:end="53:41">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:22">(<expr pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:21">local_err</name></expr>)</condition> <block pos:start="55:24" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:19">

            <expr_stmt pos:start="57:13" pos:end="57:45"><expr pos:start="57:13" pos:end="57:44"><call pos:start="57:13" pos:end="57:44"><name pos:start="57:13" pos:end="57:27">error_propagate</name><argument_list pos:start="57:28" pos:end="57:44">(<argument pos:start="57:29" pos:end="57:32"><expr pos:start="57:29" pos:end="57:32"><name pos:start="57:29" pos:end="57:32">errp</name></expr></argument>, <argument pos:start="57:35" pos:end="57:43"><expr pos:start="57:35" pos:end="57:43"><name pos:start="57:35" pos:end="57:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="67:5" pos:end="77:30">/* Continuing after completed migration. Images have been inactivated to

     * allow the destination to take control. Need to get control back now.

     *

     * If there are no inactive block nodes (e.g. because the VM was just

     * paused rather than completing a migration), bdrv_inactivate_all() simply

     * doesn't do anything. */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:42"><expr pos:start="79:5" pos:end="79:41"><call pos:start="79:5" pos:end="79:41"><name pos:start="79:5" pos:end="79:29">bdrv_invalidate_cache_all</name><argument_list pos:start="79:30" pos:end="79:41">(<argument pos:start="79:31" pos:end="79:40"><expr pos:start="79:31" pos:end="79:40"><operator pos:start="79:31" pos:end="79:31">&amp;</operator><name pos:start="79:32" pos:end="79:40">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:18">(<expr pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:17">local_err</name></expr>)</condition> <block pos:start="81:20" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:15">

        <expr_stmt pos:start="83:9" pos:end="83:41"><expr pos:start="83:9" pos:end="83:40"><call pos:start="83:9" pos:end="83:40"><name pos:start="83:9" pos:end="83:23">error_propagate</name><argument_list pos:start="83:24" pos:end="83:40">(<argument pos:start="83:25" pos:end="83:28"><expr pos:start="83:25" pos:end="83:28"><name pos:start="83:25" pos:end="83:28">errp</name></expr></argument>, <argument pos:start="83:31" pos:end="83:39"><expr pos:start="83:31" pos:end="83:39"><name pos:start="83:31" pos:end="83:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:43"><expr pos:start="91:5" pos:end="91:42"><call pos:start="91:5" pos:end="91:42"><name pos:start="91:5" pos:end="91:30">blk_resume_after_migration</name><argument_list pos:start="91:31" pos:end="91:42">(<argument pos:start="91:32" pos:end="91:41"><expr pos:start="91:32" pos:end="91:41"><operator pos:start="91:32" pos:end="91:32">&amp;</operator><name pos:start="91:33" pos:end="91:41">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:18">(<expr pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:17">local_err</name></expr>)</condition> <block pos:start="93:20" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:15">

        <expr_stmt pos:start="95:9" pos:end="95:41"><expr pos:start="95:9" pos:end="95:40"><call pos:start="95:9" pos:end="95:40"><name pos:start="95:9" pos:end="95:23">error_propagate</name><argument_list pos:start="95:24" pos:end="95:40">(<argument pos:start="95:25" pos:end="95:28"><expr pos:start="95:25" pos:end="95:28"><name pos:start="95:25" pos:end="95:28">errp</name></expr></argument>, <argument pos:start="95:31" pos:end="95:39"><expr pos:start="95:31" pos:end="95:39"><name pos:start="95:31" pos:end="95:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="103:5" pos:end="111:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:44">(<expr pos:start="103:9" pos:end="103:43"><call pos:start="103:9" pos:end="103:43"><name pos:start="103:9" pos:end="103:22">runstate_check</name><argument_list pos:start="103:23" pos:end="103:43">(<argument pos:start="103:24" pos:end="103:42"><expr pos:start="103:24" pos:end="103:42"><name pos:start="103:24" pos:end="103:42">RUN_STATE_INMIGRATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:46" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:22">

        <expr_stmt pos:start="105:9" pos:end="105:22"><expr pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:17">autostart</name> <operator pos:start="105:19" pos:end="105:19">=</operator> <literal type="number" pos:start="105:21" pos:end="105:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="111:5">else <block pos:start="107:12" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:19">

        <expr_stmt pos:start="109:9" pos:end="109:19"><expr pos:start="109:9" pos:end="109:18"><call pos:start="109:9" pos:end="109:18"><name pos:start="109:9" pos:end="109:16">vm_start</name><argument_list pos:start="109:17" pos:end="109:18">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
