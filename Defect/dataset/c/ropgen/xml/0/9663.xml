<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9663.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:40">process_audio_header_elements</name><parameter_list pos:start="1:41" pos:end="1:60">(<parameter pos:start="1:42" pos:end="1:59"><decl pos:start="1:42" pos:end="1:59"><type pos:start="1:42" pos:end="1:58"><name pos:start="1:42" pos:end="1:56">AVFormatContext</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="129:1">{<block_content pos:start="5:5" pos:end="127:13">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">inHeader</name> <init pos:start="5:18" pos:end="5:20">= <expr pos:start="5:20" pos:end="5:20"><literal type="number" pos:start="5:20" pos:end="5:20">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">EaDemuxContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">ea</name> <init pos:start="7:24" pos:end="7:37">= <expr pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:37"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">ByteIOContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">pb</name> <init pos:start="9:23" pos:end="9:30">= <expr pos:start="9:25" pos:end="9:30"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:30"><name pos:start="9:26" pos:end="9:26">s</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:30">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:24">compression_type</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:25"><expr pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:6">ea</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:20">num_channels</name></name> <operator pos:start="15:22" pos:end="15:22">=</operator> <literal type="number" pos:start="15:24" pos:end="15:24">1</literal></expr>;</expr_stmt>



    <while pos:start="19:5" pos:end="119:5">while <condition pos:start="19:11" pos:end="19:20">(<expr pos:start="19:12" pos:end="19:19"><name pos:start="19:12" pos:end="19:19">inHeader</name></expr>)</condition> <block pos:start="19:22" pos:end="119:5">{<block_content pos:start="21:9" pos:end="117:9">

        <decl_stmt pos:start="21:9" pos:end="21:24"><decl pos:start="21:9" pos:end="21:23"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:23">inSubheader</name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:21"><decl pos:start="23:9" pos:end="23:20"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:15">uint8_t</name></type> <name pos:start="23:17" pos:end="23:20">byte</name></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:12">byte</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:27"><name pos:start="25:16" pos:end="25:23">get_byte</name><argument_list pos:start="25:24" pos:end="25:27">(<argument pos:start="25:25" pos:end="25:26"><expr pos:start="25:25" pos:end="25:26"><name pos:start="25:25" pos:end="25:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="29:9" pos:end="117:9">switch <condition pos:start="29:16" pos:end="29:21">(<expr pos:start="29:17" pos:end="29:20"><name pos:start="29:17" pos:end="29:20">byte</name></expr>)</condition> <block pos:start="29:23" pos:end="117:9">{<block_content pos:start="31:9" pos:end="115:18">

        <case pos:start="31:9" pos:end="31:18">case <expr pos:start="31:14" pos:end="31:17"><literal type="number" pos:start="31:14" pos:end="31:17">0xFD</literal></expr>:</case>

            <expr_stmt pos:start="33:13" pos:end="33:65"><expr pos:start="33:13" pos:end="33:64"><call pos:start="33:13" pos:end="33:64"><name pos:start="33:13" pos:end="33:18">av_log</name> <argument_list pos:start="33:20" pos:end="33:64">(<argument pos:start="33:21" pos:end="33:21"><expr pos:start="33:21" pos:end="33:21"><name pos:start="33:21" pos:end="33:21">s</name></expr></argument>, <argument pos:start="33:24" pos:end="33:34"><expr pos:start="33:24" pos:end="33:34"><name pos:start="33:24" pos:end="33:34">AV_LOG_INFO</name></expr></argument>, <argument pos:start="33:37" pos:end="33:63"><expr pos:start="33:37" pos:end="33:63"><literal type="string" pos:start="33:37" pos:end="33:63">"entered audio subheader\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:28"><expr pos:start="35:13" pos:end="35:27"><name pos:start="35:13" pos:end="35:23">inSubheader</name> <operator pos:start="35:25" pos:end="35:25">=</operator> <literal type="number" pos:start="35:27" pos:end="35:27">1</literal></expr>;</expr_stmt>

            <while pos:start="37:13" pos:end="99:13">while <condition pos:start="37:19" pos:end="37:31">(<expr pos:start="37:20" pos:end="37:30"><name pos:start="37:20" pos:end="37:30">inSubheader</name></expr>)</condition> <block pos:start="37:33" pos:end="99:13">{<block_content pos:start="39:17" pos:end="97:17">

                <decl_stmt pos:start="39:17" pos:end="39:32"><decl pos:start="39:17" pos:end="39:31"><type pos:start="39:17" pos:end="39:23"><name pos:start="39:17" pos:end="39:23">uint8_t</name></type> <name pos:start="39:25" pos:end="39:31">subbyte</name></decl>;</decl_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:39"><expr pos:start="41:17" pos:end="41:38"><name pos:start="41:17" pos:end="41:23">subbyte</name> <operator pos:start="41:25" pos:end="41:25">=</operator> <call pos:start="41:27" pos:end="41:38"><name pos:start="41:27" pos:end="41:34">get_byte</name><argument_list pos:start="41:35" pos:end="41:38">(<argument pos:start="41:36" pos:end="41:37"><expr pos:start="41:36" pos:end="41:37"><name pos:start="41:36" pos:end="41:37">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <switch pos:start="45:17" pos:end="97:17">switch <condition pos:start="45:24" pos:end="45:32">(<expr pos:start="45:25" pos:end="45:31"><name pos:start="45:25" pos:end="45:31">subbyte</name></expr>)</condition> <block pos:start="45:34" pos:end="97:17">{<block_content pos:start="47:17" pos:end="95:26">

                <case pos:start="47:17" pos:end="47:26">case <expr pos:start="47:22" pos:end="47:25"><literal type="number" pos:start="47:22" pos:end="47:25">0x82</literal></expr>:</case>

                    <expr_stmt pos:start="49:21" pos:end="49:57"><expr pos:start="49:21" pos:end="49:56"><name pos:start="49:21" pos:end="49:36"><name pos:start="49:21" pos:end="49:22">ea</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:36">num_channels</name></name> <operator pos:start="49:38" pos:end="49:38">=</operator> <call pos:start="49:40" pos:end="49:56"><name pos:start="49:40" pos:end="49:52">read_arbitary</name><argument_list pos:start="49:53" pos:end="49:56">(<argument pos:start="49:54" pos:end="49:55"><expr pos:start="49:54" pos:end="49:55"><name pos:start="49:54" pos:end="49:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="51:21" pos:end="51:109"><expr pos:start="51:21" pos:end="51:108"><call pos:start="51:21" pos:end="51:108"><name pos:start="51:21" pos:end="51:26">av_log</name> <argument_list pos:start="51:28" pos:end="51:108">(<argument pos:start="51:29" pos:end="51:29"><expr pos:start="51:29" pos:end="51:29"><name pos:start="51:29" pos:end="51:29">s</name></expr></argument>, <argument pos:start="51:32" pos:end="51:42"><expr pos:start="51:32" pos:end="51:42"><name pos:start="51:32" pos:end="51:42">AV_LOG_INFO</name></expr></argument>, <argument pos:start="51:45" pos:end="51:89"><expr pos:start="51:45" pos:end="51:89"><literal type="string" pos:start="51:45" pos:end="51:89">"num_channels (element 0x82) set to 0x%08x\n"</literal></expr></argument>, <argument pos:start="51:92" pos:end="51:107"><expr pos:start="51:92" pos:end="51:107"><name pos:start="51:92" pos:end="51:107"><name pos:start="51:92" pos:end="51:93">ea</name><operator pos:start="51:94" pos:end="51:95">-&gt;</operator><name pos:start="51:96" pos:end="51:107">num_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="53:21" pos:end="53:26">break;</break>

                <case pos:start="55:17" pos:end="55:26">case <expr pos:start="55:22" pos:end="55:25"><literal type="number" pos:start="55:22" pos:end="55:25">0x83</literal></expr>:</case>

                    <expr_stmt pos:start="57:21" pos:end="57:57"><expr pos:start="57:21" pos:end="57:56"><name pos:start="57:21" pos:end="57:36">compression_type</name> <operator pos:start="57:38" pos:end="57:38">=</operator> <call pos:start="57:40" pos:end="57:56"><name pos:start="57:40" pos:end="57:52">read_arbitary</name><argument_list pos:start="57:53" pos:end="57:56">(<argument pos:start="57:54" pos:end="57:55"><expr pos:start="57:54" pos:end="57:55"><name pos:start="57:54" pos:end="57:55">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="59:21" pos:end="59:113"><expr pos:start="59:21" pos:end="59:112"><call pos:start="59:21" pos:end="59:112"><name pos:start="59:21" pos:end="59:26">av_log</name> <argument_list pos:start="59:28" pos:end="59:112">(<argument pos:start="59:29" pos:end="59:29"><expr pos:start="59:29" pos:end="59:29"><name pos:start="59:29" pos:end="59:29">s</name></expr></argument>, <argument pos:start="59:32" pos:end="59:42"><expr pos:start="59:32" pos:end="59:42"><name pos:start="59:32" pos:end="59:42">AV_LOG_INFO</name></expr></argument>, <argument pos:start="59:45" pos:end="59:93"><expr pos:start="59:45" pos:end="59:93"><literal type="string" pos:start="59:45" pos:end="59:93">"compression_type (element 0x83) set to 0x%08x\n"</literal></expr></argument>, <argument pos:start="59:96" pos:end="59:111"><expr pos:start="59:96" pos:end="59:111"><name pos:start="59:96" pos:end="59:111">compression_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="61:21" pos:end="61:26">break;</break>

                <case pos:start="63:17" pos:end="63:26">case <expr pos:start="63:22" pos:end="63:25"><literal type="number" pos:start="63:22" pos:end="63:25">0x85</literal></expr>:</case>

                    <expr_stmt pos:start="65:21" pos:end="65:56"><expr pos:start="65:21" pos:end="65:55"><name pos:start="65:21" pos:end="65:35"><name pos:start="65:21" pos:end="65:22">ea</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:35">num_samples</name></name> <operator pos:start="65:37" pos:end="65:37">=</operator> <call pos:start="65:39" pos:end="65:55"><name pos:start="65:39" pos:end="65:51">read_arbitary</name><argument_list pos:start="65:52" pos:end="65:55">(<argument pos:start="65:53" pos:end="65:54"><expr pos:start="65:53" pos:end="65:54"><name pos:start="65:53" pos:end="65:54">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="67:21" pos:end="67:107"><expr pos:start="67:21" pos:end="67:106"><call pos:start="67:21" pos:end="67:106"><name pos:start="67:21" pos:end="67:26">av_log</name> <argument_list pos:start="67:28" pos:end="67:106">(<argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><name pos:start="67:29" pos:end="67:29">s</name></expr></argument>, <argument pos:start="67:32" pos:end="67:42"><expr pos:start="67:32" pos:end="67:42"><name pos:start="67:32" pos:end="67:42">AV_LOG_INFO</name></expr></argument>, <argument pos:start="67:45" pos:end="67:88"><expr pos:start="67:45" pos:end="67:88"><literal type="string" pos:start="67:45" pos:end="67:88">"num_samples (element 0x85) set to 0x%08x\n"</literal></expr></argument>, <argument pos:start="67:91" pos:end="67:105"><expr pos:start="67:91" pos:end="67:105"><name pos:start="67:91" pos:end="67:105"><name pos:start="67:91" pos:end="67:92">ea</name><operator pos:start="67:93" pos:end="67:94">-&gt;</operator><name pos:start="67:95" pos:end="67:105">num_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="69:21" pos:end="69:26">break;</break>

                <case pos:start="71:17" pos:end="71:26">case <expr pos:start="71:22" pos:end="71:25"><literal type="number" pos:start="71:22" pos:end="71:25">0x8A</literal></expr>:</case>

                    <expr_stmt pos:start="73:21" pos:end="73:106"><expr pos:start="73:21" pos:end="73:105"><call pos:start="73:21" pos:end="73:105"><name pos:start="73:21" pos:end="73:26">av_log</name> <argument_list pos:start="73:28" pos:end="73:105">(<argument pos:start="73:29" pos:end="73:29"><expr pos:start="73:29" pos:end="73:29"><name pos:start="73:29" pos:end="73:29">s</name></expr></argument>, <argument pos:start="73:32" pos:end="73:42"><expr pos:start="73:32" pos:end="73:42"><name pos:start="73:32" pos:end="73:42">AV_LOG_INFO</name></expr></argument>, <argument pos:start="73:45" pos:end="73:76"><expr pos:start="73:45" pos:end="73:76"><literal type="string" pos:start="73:45" pos:end="73:76">"element 0x%02x set to 0x%08x\n"</literal></expr></argument>, <argument pos:start="73:79" pos:end="73:85"><expr pos:start="73:79" pos:end="73:85"><name pos:start="73:79" pos:end="73:85">subbyte</name></expr></argument>, <argument pos:start="73:88" pos:end="73:104"><expr pos:start="73:88" pos:end="73:104"><call pos:start="73:88" pos:end="73:104"><name pos:start="73:88" pos:end="73:100">read_arbitary</name><argument_list pos:start="73:101" pos:end="73:104">(<argument pos:start="73:102" pos:end="73:103"><expr pos:start="73:102" pos:end="73:103"><name pos:start="73:102" pos:end="73:103">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="75:21" pos:end="75:72"><expr pos:start="75:21" pos:end="75:71"><call pos:start="75:21" pos:end="75:71"><name pos:start="75:21" pos:end="75:26">av_log</name> <argument_list pos:start="75:28" pos:end="75:71">(<argument pos:start="75:29" pos:end="75:29"><expr pos:start="75:29" pos:end="75:29"><name pos:start="75:29" pos:end="75:29">s</name></expr></argument>, <argument pos:start="75:32" pos:end="75:42"><expr pos:start="75:32" pos:end="75:42"><name pos:start="75:32" pos:end="75:42">AV_LOG_INFO</name></expr></argument>, <argument pos:start="75:45" pos:end="75:70"><expr pos:start="75:45" pos:end="75:70"><literal type="string" pos:start="75:45" pos:end="75:70">"exited audio subheader\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="77:21" pos:end="77:36"><expr pos:start="77:21" pos:end="77:35"><name pos:start="77:21" pos:end="77:31">inSubheader</name> <operator pos:start="77:33" pos:end="77:33">=</operator> <literal type="number" pos:start="77:35" pos:end="77:35">0</literal></expr>;</expr_stmt>

                    <break pos:start="79:21" pos:end="79:26">break;</break>

                <case pos:start="81:17" pos:end="81:26">case <expr pos:start="81:22" pos:end="81:25"><literal type="number" pos:start="81:22" pos:end="81:25">0xFF</literal></expr>:</case>

                    <expr_stmt pos:start="83:21" pos:end="83:102"><expr pos:start="83:21" pos:end="83:101"><call pos:start="83:21" pos:end="83:101"><name pos:start="83:21" pos:end="83:26">av_log</name> <argument_list pos:start="83:28" pos:end="83:101">(<argument pos:start="83:29" pos:end="83:29"><expr pos:start="83:29" pos:end="83:29"><name pos:start="83:29" pos:end="83:29">s</name></expr></argument>, <argument pos:start="83:32" pos:end="83:42"><expr pos:start="83:32" pos:end="83:42"><name pos:start="83:32" pos:end="83:42">AV_LOG_INFO</name></expr></argument>, <argument pos:start="83:45" pos:end="83:100"><expr pos:start="83:45" pos:end="83:100"><literal type="string" pos:start="83:45" pos:end="83:100">"end of header block reached (within audio subheader)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="85:21" pos:end="85:36"><expr pos:start="85:21" pos:end="85:35"><name pos:start="85:21" pos:end="85:31">inSubheader</name> <operator pos:start="85:33" pos:end="85:33">=</operator> <literal type="number" pos:start="85:35" pos:end="85:35">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="87:21" pos:end="87:33"><expr pos:start="87:21" pos:end="87:32"><name pos:start="87:21" pos:end="87:28">inHeader</name> <operator pos:start="87:30" pos:end="87:30">=</operator> <literal type="number" pos:start="87:32" pos:end="87:32">0</literal></expr>;</expr_stmt>

                    <break pos:start="89:21" pos:end="89:26">break;</break>

                <default pos:start="91:17" pos:end="91:24">default:</default>

                    <expr_stmt pos:start="93:21" pos:end="93:106"><expr pos:start="93:21" pos:end="93:105"><call pos:start="93:21" pos:end="93:105"><name pos:start="93:21" pos:end="93:26">av_log</name> <argument_list pos:start="93:28" pos:end="93:105">(<argument pos:start="93:29" pos:end="93:29"><expr pos:start="93:29" pos:end="93:29"><name pos:start="93:29" pos:end="93:29">s</name></expr></argument>, <argument pos:start="93:32" pos:end="93:42"><expr pos:start="93:32" pos:end="93:42"><name pos:start="93:32" pos:end="93:42">AV_LOG_INFO</name></expr></argument>, <argument pos:start="93:45" pos:end="93:76"><expr pos:start="93:45" pos:end="93:76"><literal type="string" pos:start="93:45" pos:end="93:76">"element 0x%02x set to 0x%08x\n"</literal></expr></argument>, <argument pos:start="93:79" pos:end="93:85"><expr pos:start="93:79" pos:end="93:85"><name pos:start="93:79" pos:end="93:85">subbyte</name></expr></argument>, <argument pos:start="93:88" pos:end="93:104"><expr pos:start="93:88" pos:end="93:104"><call pos:start="93:88" pos:end="93:104"><name pos:start="93:88" pos:end="93:100">read_arbitary</name><argument_list pos:start="93:101" pos:end="93:104">(<argument pos:start="93:102" pos:end="93:103"><expr pos:start="93:102" pos:end="93:103"><name pos:start="93:102" pos:end="93:103">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="95:21" pos:end="95:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></while>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="103:18">case <expr pos:start="103:14" pos:end="103:17"><literal type="number" pos:start="103:14" pos:end="103:17">0xFF</literal></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="105:69"><expr pos:start="105:13" pos:end="105:68"><call pos:start="105:13" pos:end="105:68"><name pos:start="105:13" pos:end="105:18">av_log</name> <argument_list pos:start="105:20" pos:end="105:68">(<argument pos:start="105:21" pos:end="105:21"><expr pos:start="105:21" pos:end="105:21"><name pos:start="105:21" pos:end="105:21">s</name></expr></argument>, <argument pos:start="105:24" pos:end="105:34"><expr pos:start="105:24" pos:end="105:34"><name pos:start="105:24" pos:end="105:34">AV_LOG_INFO</name></expr></argument>, <argument pos:start="105:37" pos:end="105:67"><expr pos:start="105:37" pos:end="105:67"><literal type="string" pos:start="105:37" pos:end="105:67">"end of header block reached\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:25"><expr pos:start="107:13" pos:end="107:24"><name pos:start="107:13" pos:end="107:20">inHeader</name> <operator pos:start="107:22" pos:end="107:22">=</operator> <literal type="number" pos:start="107:24" pos:end="107:24">0</literal></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        <default pos:start="111:9" pos:end="111:16">default:</default>

            <expr_stmt pos:start="113:13" pos:end="113:102"><expr pos:start="113:13" pos:end="113:101"><call pos:start="113:13" pos:end="113:101"><name pos:start="113:13" pos:end="113:18">av_log</name> <argument_list pos:start="113:20" pos:end="113:101">(<argument pos:start="113:21" pos:end="113:21"><expr pos:start="113:21" pos:end="113:21"><name pos:start="113:21" pos:end="113:21">s</name></expr></argument>, <argument pos:start="113:24" pos:end="113:34"><expr pos:start="113:24" pos:end="113:34"><name pos:start="113:24" pos:end="113:34">AV_LOG_INFO</name></expr></argument>, <argument pos:start="113:37" pos:end="113:75"><expr pos:start="113:37" pos:end="113:75"><literal type="string" pos:start="113:37" pos:end="113:75">"header element 0x%02x set to 0x%08x\n"</literal></expr></argument>, <argument pos:start="113:78" pos:end="113:81"><expr pos:start="113:78" pos:end="113:81"><name pos:start="113:78" pos:end="113:81">byte</name></expr></argument>, <argument pos:start="113:84" pos:end="113:100"><expr pos:start="113:84" pos:end="113:100"><call pos:start="113:84" pos:end="113:100"><name pos:start="113:84" pos:end="113:96">read_arbitary</name><argument_list pos:start="113:97" pos:end="113:100">(<argument pos:start="113:98" pos:end="113:99"><expr pos:start="113:98" pos:end="113:99"><name pos:start="113:98" pos:end="113:99">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="115:13" pos:end="115:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <expr_stmt pos:start="123:5" pos:end="123:40"><expr pos:start="123:5" pos:end="123:39"><name pos:start="123:5" pos:end="123:19"><name pos:start="123:5" pos:end="123:6">ea</name><operator pos:start="123:7" pos:end="123:8">-&gt;</operator><name pos:start="123:9" pos:end="123:19">audio_codec</name></name> <operator pos:start="123:21" pos:end="123:21">=</operator> <name pos:start="123:23" pos:end="123:39">CODEC_ID_ADPCM_EA</name></expr>;</expr_stmt>



    <return pos:start="127:5" pos:end="127:13">return <expr pos:start="127:12" pos:end="127:12"><literal type="number" pos:start="127:12" pos:end="127:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
