<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/46.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">find_allocation</name><parameter_list pos:start="1:27" pos:end="3:52">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:60"><decl pos:start="1:50" pos:end="1:60"><type pos:start="1:50" pos:end="1:60"><name pos:start="1:50" pos:end="1:54">off_t</name></type> <name pos:start="1:56" pos:end="1:60">start</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:38"><decl pos:start="3:28" pos:end="3:38"><type pos:start="3:28" pos:end="3:38"><name pos:start="3:28" pos:end="3:32">off_t</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:51"><decl pos:start="3:41" pos:end="3:51"><type pos:start="3:41" pos:end="3:51"><name pos:start="3:41" pos:end="3:45">off_t</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:51">hole</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="147:1">{<block_content pos:start="7:5" pos:end="145:18">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BDRVGlusterState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:23">s</name> <init pos:start="7:25" pos:end="7:36">= <expr pos:start="7:27" pos:end="7:36"><name pos:start="7:27" pos:end="7:36"><name pos:start="7:27" pos:end="7:28">bs</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:36">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">off_t</name></type> <name pos:start="9:11" pos:end="9:14">offs</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:31">(<expr pos:start="13:9" pos:end="13:30"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:30"><name pos:start="13:10" pos:end="13:10">s</name><operator pos:start="13:11" pos:end="13:12">-&gt;</operator><name pos:start="13:13" pos:end="13:30">supports_seek_data</name></name></expr>)</condition> <block pos:start="13:33" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:24">

        <return pos:start="15:9" pos:end="15:24">return <expr pos:start="15:16" pos:end="15:23"><operator pos:start="15:16" pos:end="15:16">-</operator><name pos:start="15:17" pos:end="15:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="21:5" pos:end="41:7">/*

     * SEEK_DATA cases:

     * D1. offs == start: start is in data

     * D2. offs &gt; start: start is in a hole, next data at offs

     * D3. offs &lt; 0, errno = ENXIO: either start is in a trailing hole

     *                              or start is beyond EOF

     *     If the latter happens, the file has been truncated behind

     *     our back since we opened it.  All bets are off then.

     *     Treating like a trailing hole is simplest.

     * D4. offs &lt; 0, errno != ENXIO: we learned nothing

     */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:47"><expr pos:start="43:5" pos:end="43:46"><name pos:start="43:5" pos:end="43:8">offs</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <call pos:start="43:12" pos:end="43:46"><name pos:start="43:12" pos:end="43:21">glfs_lseek</name><argument_list pos:start="43:22" pos:end="43:46">(<argument pos:start="43:23" pos:end="43:27"><expr pos:start="43:23" pos:end="43:27"><name pos:start="43:23" pos:end="43:27"><name pos:start="43:23" pos:end="43:23">s</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:27">fd</name></name></expr></argument>, <argument pos:start="43:30" pos:end="43:34"><expr pos:start="43:30" pos:end="43:34"><name pos:start="43:30" pos:end="43:34">start</name></expr></argument>, <argument pos:start="43:37" pos:end="43:45"><expr pos:start="43:37" pos:end="43:45"><name pos:start="43:37" pos:end="43:45">SEEK_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:17">(<expr pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:12">offs</name> <operator pos:start="45:14" pos:end="45:14">&lt;</operator> <literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>)</condition> <block pos:start="45:19" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:22">

        <return pos:start="47:9" pos:end="47:22">return <expr pos:start="47:16" pos:end="47:21"><operator pos:start="47:16" pos:end="47:16">-</operator><name pos:start="47:17" pos:end="47:21">errno</name></expr>;</return>          <comment type="block" pos:start="47:33" pos:end="47:46">/* D3 or D4 */</comment>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:26"><expr pos:start="51:5" pos:end="51:25"><call pos:start="51:5" pos:end="51:25"><name pos:start="51:5" pos:end="51:10">assert</name><argument_list pos:start="51:11" pos:end="51:25">(<argument pos:start="51:12" pos:end="51:24"><expr pos:start="51:12" pos:end="51:24"><name pos:start="51:12" pos:end="51:15">offs</name> <operator pos:start="51:17" pos:end="51:18">&gt;=</operator> <name pos:start="51:20" pos:end="51:24">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="65:5">if <condition pos:start="55:8" pos:end="55:21">(<expr pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:12">offs</name> <operator pos:start="55:14" pos:end="55:14">&gt;</operator> <name pos:start="55:16" pos:end="55:20">start</name></expr>)</condition> <block pos:start="55:23" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:17">

        <comment type="block" pos:start="57:9" pos:end="57:44">/* D2: in hole, next data at offs */</comment>

        <expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><operator pos:start="59:9" pos:end="59:9">*</operator><name pos:start="59:10" pos:end="59:13">hole</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:21">start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:21"><expr pos:start="61:9" pos:end="61:20"><operator pos:start="61:9" pos:end="61:9">*</operator><name pos:start="61:10" pos:end="61:13">data</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <name pos:start="61:17" pos:end="61:20">offs</name></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:17">return <expr pos:start="63:16" pos:end="63:16"><literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:40">/* D1: in data, end not yet known */</comment>



    <comment type="block" pos:start="73:5" pos:end="105:7">/*

     * SEEK_HOLE cases:

     * H1. offs == start: start is in a hole

     *     If this happens here, a hole has been dug behind our back

     *     since the previous lseek().

     * H2. offs &gt; start: either start is in data, next hole at offs,

     *                   or start is in trailing hole, EOF at offs

     *     Linux treats trailing holes like any other hole: offs ==

     *     start.  Solaris seeks to EOF instead: offs &gt; start (blech).

     *     If that happens here, a hole has been dug behind our back

     *     since the previous lseek().

     * H3. offs &lt; 0, errno = ENXIO: start is beyond EOF

     *     If this happens, the file has been truncated behind our

     *     back since we opened it.  Treat it like a trailing hole.

     * H4. offs &lt; 0, errno != ENXIO: we learned nothing

     *     Pretend we know nothing at all, i.e. "forget" about D1.

     */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:47"><expr pos:start="107:5" pos:end="107:46"><name pos:start="107:5" pos:end="107:8">offs</name> <operator pos:start="107:10" pos:end="107:10">=</operator> <call pos:start="107:12" pos:end="107:46"><name pos:start="107:12" pos:end="107:21">glfs_lseek</name><argument_list pos:start="107:22" pos:end="107:46">(<argument pos:start="107:23" pos:end="107:27"><expr pos:start="107:23" pos:end="107:27"><name pos:start="107:23" pos:end="107:27"><name pos:start="107:23" pos:end="107:23">s</name><operator pos:start="107:24" pos:end="107:25">-&gt;</operator><name pos:start="107:26" pos:end="107:27">fd</name></name></expr></argument>, <argument pos:start="107:30" pos:end="107:34"><expr pos:start="107:30" pos:end="107:34"><name pos:start="107:30" pos:end="107:34">start</name></expr></argument>, <argument pos:start="107:37" pos:end="107:45"><expr pos:start="107:37" pos:end="107:45"><name pos:start="107:37" pos:end="107:45">SEEK_HOLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="113:5"><if pos:start="109:5" pos:end="113:5">if <condition pos:start="109:8" pos:end="109:17">(<expr pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:12">offs</name> <operator pos:start="109:14" pos:end="109:14">&lt;</operator> <literal type="number" pos:start="109:16" pos:end="109:16">0</literal></expr>)</condition> <block pos:start="109:19" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:22">

        <return pos:start="111:9" pos:end="111:22">return <expr pos:start="111:16" pos:end="111:21"><operator pos:start="111:16" pos:end="111:16">-</operator><name pos:start="111:17" pos:end="111:21">errno</name></expr>;</return>          <comment type="block" pos:start="111:33" pos:end="111:55">/* D1 and (H3 or H4) */</comment>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:26"><expr pos:start="115:5" pos:end="115:25"><call pos:start="115:5" pos:end="115:25"><name pos:start="115:5" pos:end="115:10">assert</name><argument_list pos:start="115:11" pos:end="115:25">(<argument pos:start="115:12" pos:end="115:24"><expr pos:start="115:12" pos:end="115:24"><name pos:start="115:12" pos:end="115:15">offs</name> <operator pos:start="115:17" pos:end="115:18">&gt;=</operator> <name pos:start="115:20" pos:end="115:24">start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="139:5"><if pos:start="119:5" pos:end="139:5">if <condition pos:start="119:8" pos:end="119:21">(<expr pos:start="119:9" pos:end="119:20"><name pos:start="119:9" pos:end="119:12">offs</name> <operator pos:start="119:14" pos:end="119:14">&gt;</operator> <name pos:start="119:16" pos:end="119:20">start</name></expr>)</condition> <block pos:start="119:23" pos:end="139:5">{<block_content pos:start="133:9" pos:end="137:17">

        <comment type="block" pos:start="121:9" pos:end="131:11">/*

         * D1 and H2: either in data, next hole at offs, or it was in

         * data but is now in a trailing hole.  In the latter case,

         * all bets are off.  Treating it as if it there was data all

         * the way to EOF is safe, so simply do that.

         */</comment>

        <expr_stmt pos:start="133:9" pos:end="133:22"><expr pos:start="133:9" pos:end="133:21"><operator pos:start="133:9" pos:end="133:9">*</operator><name pos:start="133:10" pos:end="133:13">data</name> <operator pos:start="133:15" pos:end="133:15">=</operator> <name pos:start="133:17" pos:end="133:21">start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:21"><expr pos:start="135:9" pos:end="135:20"><operator pos:start="135:9" pos:end="135:9">*</operator><name pos:start="135:10" pos:end="135:13">hole</name> <operator pos:start="135:15" pos:end="135:15">=</operator> <name pos:start="135:17" pos:end="135:20">offs</name></expr>;</expr_stmt>

        <return pos:start="137:9" pos:end="137:17">return <expr pos:start="137:16" pos:end="137:16"><literal type="number" pos:start="137:16" pos:end="137:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:19">/* D1 and H1 */</comment>

    <return pos:start="145:5" pos:end="145:18">return <expr pos:start="145:12" pos:end="145:17"><operator pos:start="145:12" pos:end="145:12">-</operator><name pos:start="145:13" pos:end="145:17">EBUSY</name></expr>;</return>

</block_content>}</block></function>
</unit>
