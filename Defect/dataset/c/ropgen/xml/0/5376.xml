<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5376.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">long</name></type> <name pos:start="1:6" pos:end="1:20">do_rt_sigreturn</name><parameter_list pos:start="1:21" pos:end="1:39">(<parameter pos:start="1:22" pos:end="1:38"><decl pos:start="1:22" pos:end="1:38"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:33">CPUMIPSState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:13">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:31"><name pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:29">target_rt_sigframe</name></name> <modifier pos:start="5:31" pos:end="5:31">*</modifier></type><name pos:start="5:32" pos:end="5:36">frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">abi_ulong</name></type> <name pos:start="7:15" pos:end="7:24">frame_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">sigset_t</name></type> <name pos:start="9:14" pos:end="9:20">blocked</name></decl>;</decl_stmt>



<cpp:if pos:start="13:1" pos:end="13:25">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:25"><call pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:11">defined</name><argument_list pos:start="13:12" pos:end="13:25">(<argument pos:start="13:13" pos:end="13:24"><expr pos:start="13:13" pos:end="13:24"><name pos:start="13:13" pos:end="13:24">DEBUG_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="15:5" pos:end="18:0"><expr pos:start="15:5" pos:end="15:40"><call pos:start="15:5" pos:end="15:40"><name pos:start="15:5" pos:end="15:11">fprintf</name><argument_list pos:start="15:12" pos:end="15:40">(<argument pos:start="15:13" pos:end="15:18"><expr pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:18">stderr</name></expr></argument>, <argument pos:start="15:21" pos:end="15:39"><expr pos:start="15:21" pos:end="15:39"><literal type="string" pos:start="15:21" pos:end="15:39">"do_rt_sigreturn\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="19:5" pos:end="19:40"><expr pos:start="19:5" pos:end="19:39"><name pos:start="19:5" pos:end="19:14">frame_addr</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <name pos:start="19:18" pos:end="19:39"><name pos:start="19:18" pos:end="19:20">env</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:31">active_tc</name><operator pos:start="19:32" pos:end="19:32">.</operator><name pos:start="19:33" pos:end="19:35">gpr</name><index pos:start="19:36" pos:end="19:39">[<expr pos:start="19:37" pos:end="19:38"><literal type="number" pos:start="19:37" pos:end="19:38">29</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:22"><if pos:start="21:5" pos:end="23:22">if <condition pos:start="21:8" pos:end="21:61">(<expr pos:start="21:9" pos:end="21:60"><operator pos:start="21:9" pos:end="21:9">!</operator><call pos:start="21:10" pos:end="21:60"><name pos:start="21:10" pos:end="21:25">lock_user_struct</name><argument_list pos:start="21:26" pos:end="21:60">(<argument pos:start="21:27" pos:end="21:37"><expr pos:start="21:27" pos:end="21:37"><name pos:start="21:27" pos:end="21:37">VERIFY_READ</name></expr></argument>, <argument pos:start="21:40" pos:end="21:44"><expr pos:start="21:40" pos:end="21:44"><name pos:start="21:40" pos:end="21:44">frame</name></expr></argument>, <argument pos:start="21:47" pos:end="21:56"><expr pos:start="21:47" pos:end="21:56"><name pos:start="21:47" pos:end="21:56">frame_addr</name></expr></argument>, <argument pos:start="21:59" pos:end="21:59"><expr pos:start="21:59" pos:end="21:59"><literal type="number" pos:start="21:59" pos:end="21:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:22"><block_content pos:start="23:9" pos:end="23:22">

   	<goto pos:start="23:9" pos:end="23:22">goto <name pos:start="23:14" pos:end="23:21">badframe</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:63"><expr pos:start="27:5" pos:end="27:62"><call pos:start="27:5" pos:end="27:62"><name pos:start="27:5" pos:end="27:25">target_to_host_sigset</name><argument_list pos:start="27:26" pos:end="27:62">(<argument pos:start="27:27" pos:end="27:34"><expr pos:start="27:27" pos:end="27:34"><operator pos:start="27:27" pos:end="27:27">&amp;</operator><name pos:start="27:28" pos:end="27:34">blocked</name></expr></argument>, <argument pos:start="27:37" pos:end="27:61"><expr pos:start="27:37" pos:end="27:61"><operator pos:start="27:37" pos:end="27:37">&amp;</operator><name pos:start="27:38" pos:end="27:61"><name pos:start="27:38" pos:end="27:42">frame</name><operator pos:start="27:43" pos:end="27:44">-&gt;</operator><name pos:start="27:45" pos:end="27:49">rs_uc</name><operator pos:start="27:50" pos:end="27:50">.</operator><name pos:start="27:51" pos:end="27:61">tuc_sigmask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:45"><expr pos:start="29:5" pos:end="29:44"><call pos:start="29:5" pos:end="29:44"><name pos:start="29:5" pos:end="29:15">sigprocmask</name><argument_list pos:start="29:16" pos:end="29:44">(<argument pos:start="29:17" pos:end="29:27"><expr pos:start="29:17" pos:end="29:27"><name pos:start="29:17" pos:end="29:27">SIG_SETMASK</name></expr></argument>, <argument pos:start="29:30" pos:end="29:37"><expr pos:start="29:30" pos:end="29:37"><operator pos:start="29:30" pos:end="29:30">&amp;</operator><name pos:start="29:31" pos:end="29:37">blocked</name></expr></argument>, <argument pos:start="29:40" pos:end="29:43"><expr pos:start="29:40" pos:end="29:43"><name pos:start="29:40" pos:end="29:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="35:22"><if pos:start="33:5" pos:end="35:22">if <condition pos:start="33:8" pos:end="33:60">(<expr pos:start="33:9" pos:end="33:59"><call pos:start="33:9" pos:end="33:59"><name pos:start="33:9" pos:end="33:26">restore_sigcontext</name><argument_list pos:start="33:27" pos:end="33:59">(<argument pos:start="33:28" pos:end="33:30"><expr pos:start="33:28" pos:end="33:30"><name pos:start="33:28" pos:end="33:30">env</name></expr></argument>, <argument pos:start="33:33" pos:end="33:58"><expr pos:start="33:33" pos:end="33:58"><operator pos:start="33:33" pos:end="33:33">&amp;</operator><name pos:start="33:34" pos:end="33:58"><name pos:start="33:34" pos:end="33:38">frame</name><operator pos:start="33:39" pos:end="33:40">-&gt;</operator><name pos:start="33:41" pos:end="33:45">rs_uc</name><operator pos:start="33:46" pos:end="33:46">.</operator><name pos:start="33:47" pos:end="33:58">tuc_mcontext</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:22"><block_content pos:start="35:9" pos:end="35:22">

        <goto pos:start="35:9" pos:end="35:22">goto <name pos:start="35:14" pos:end="35:21">badframe</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="45:22"><if pos:start="39:5" pos:end="45:22">if <condition pos:start="39:8" pos:end="43:64">(<expr pos:start="39:9" pos:end="43:63"><call pos:start="39:9" pos:end="43:52"><name pos:start="39:9" pos:end="39:22">do_sigaltstack</name><argument_list pos:start="39:23" pos:end="43:52">(<argument pos:start="39:24" pos:end="41:75"><expr pos:start="39:24" pos:end="41:75"><name pos:start="39:24" pos:end="39:33">frame_addr</name> <operator pos:start="39:35" pos:end="39:35">+</operator>

		       <call pos:start="41:24" pos:end="41:75"><name pos:start="41:24" pos:end="41:31">offsetof</name><argument_list pos:start="41:32" pos:end="41:75">(<argument pos:start="41:33" pos:end="41:57"><expr pos:start="41:33" pos:end="41:57">struct <name pos:start="41:40" pos:end="41:57">target_rt_sigframe</name></expr></argument>, <argument pos:start="41:60" pos:end="41:74"><expr pos:start="41:60" pos:end="41:74"><name pos:start="41:60" pos:end="41:74"><name pos:start="41:60" pos:end="41:64">rs_uc</name><operator pos:start="41:65" pos:end="41:65">.</operator><name pos:start="41:66" pos:end="41:74">tuc_stack</name></name></expr></argument>)</argument_list></call></expr></argument>,

		       <argument pos:start="43:24" pos:end="43:24"><expr pos:start="43:24" pos:end="43:24"><literal type="number" pos:start="43:24" pos:end="43:24">0</literal></expr></argument>, <argument pos:start="43:27" pos:end="43:51"><expr pos:start="43:27" pos:end="43:51"><call pos:start="43:27" pos:end="43:51"><name pos:start="43:27" pos:end="43:46">get_sp_from_cpustate</name><argument_list pos:start="43:47" pos:end="43:51">(<argument pos:start="43:48" pos:end="43:50"><expr pos:start="43:48" pos:end="43:50"><name pos:start="43:48" pos:end="43:50">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="43:54" pos:end="43:55">==</operator> <operator pos:start="43:57" pos:end="43:57">-</operator><name pos:start="43:58" pos:end="43:63">EFAULT</name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:22"><block_content pos:start="45:9" pos:end="45:22">

        <goto pos:start="45:9" pos:end="45:22">goto <name pos:start="45:14" pos:end="45:21">badframe</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:37"><expr pos:start="49:5" pos:end="49:36"><name pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:7">env</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:18">active_tc</name><operator pos:start="49:19" pos:end="49:19">.</operator><name pos:start="49:20" pos:end="49:21">PC</name></name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:36"><name pos:start="49:25" pos:end="49:27">env</name><operator pos:start="49:28" pos:end="49:29">-&gt;</operator><name pos:start="49:30" pos:end="49:36">CP0_EPC</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:42"><expr pos:start="51:5" pos:end="51:41"><call pos:start="51:5" pos:end="51:41"><name pos:start="51:5" pos:end="51:36">mips_set_hflags_isa_mode_from_pc</name><argument_list pos:start="51:37" pos:end="51:41">(<argument pos:start="51:38" pos:end="51:40"><expr pos:start="51:38" pos:end="51:40"><name pos:start="51:38" pos:end="51:40">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="53:5" pos:end="55:46">/* I am not sure this is right, but it seems to work

    * maybe a problem with nested signals ? */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:21"><expr pos:start="57:5" pos:end="57:20"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:7">env</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:16">CP0_EPC</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <literal type="number" pos:start="57:20" pos:end="57:20">0</literal></expr>;</expr_stmt>

    <return pos:start="59:5" pos:end="59:35">return <expr pos:start="59:12" pos:end="59:34"><operator pos:start="59:12" pos:end="59:12">-</operator><name pos:start="59:13" pos:end="59:34">TARGET_QEMU_ESIGRETURN</name></expr>;</return>



<label pos:start="63:1" pos:end="63:9"><name pos:start="63:1" pos:end="63:8">badframe</name>:</label>

    <expr_stmt pos:start="65:5" pos:end="65:43"><expr pos:start="65:5" pos:end="65:42"><call pos:start="65:5" pos:end="65:42"><name pos:start="65:5" pos:end="65:13">force_sig</name><argument_list pos:start="65:14" pos:end="65:42">(<argument pos:start="65:15" pos:end="65:28"><expr pos:start="65:15" pos:end="65:28"><name pos:start="65:15" pos:end="65:28">TARGET_SIGSEGV</name></expr></argument><comment type="block" pos:start="65:29" pos:end="65:41">/*, current*/</comment>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="67:5" pos:end="67:13">return <expr pos:start="67:12" pos:end="67:12"><literal type="number" pos:start="67:12" pos:end="67:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
