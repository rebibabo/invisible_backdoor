<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20933.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:29">virtio_scsi_set_iothread</name><parameter_list pos:start="1:30" pos:end="1:64">(<parameter pos:start="1:31" pos:end="1:43"><decl pos:start="1:31" pos:end="1:43"><type pos:start="1:31" pos:end="1:43"><name pos:start="1:31" pos:end="1:40">VirtIOSCSI</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:63"><decl pos:start="1:46" pos:end="1:63"><type pos:start="1:46" pos:end="1:63"><name pos:start="1:46" pos:end="1:53">IOThread</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:63">iothread</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="5:5" pos:end="29:5">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">BusState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:18">qbus</name> <init pos:start="5:20" pos:end="5:56">= <expr pos:start="5:22" pos:end="5:56"><call pos:start="5:22" pos:end="5:56"><name pos:start="5:22" pos:end="5:24">BUS</name><argument_list pos:start="5:25" pos:end="5:56">(<argument pos:start="5:26" pos:end="5:55"><expr pos:start="5:26" pos:end="5:55"><call pos:start="5:26" pos:end="5:55"><name pos:start="5:26" pos:end="5:44">qdev_get_parent_bus</name><argument_list pos:start="5:45" pos:end="5:55">(<argument pos:start="5:46" pos:end="5:54"><expr pos:start="5:46" pos:end="5:54"><call pos:start="5:46" pos:end="5:54"><name pos:start="5:46" pos:end="5:51">DEVICE</name><argument_list pos:start="5:52" pos:end="5:54">(<argument pos:start="5:53" pos:end="5:53"><expr pos:start="5:53" pos:end="5:53"><name pos:start="5:53" pos:end="5:53">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:50"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">VirtioBusClass</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">k</name> <init pos:start="7:23" pos:end="7:50">= <expr pos:start="7:25" pos:end="7:50"><call pos:start="7:25" pos:end="7:50"><name pos:start="7:25" pos:end="7:44">VIRTIO_BUS_GET_CLASS</name><argument_list pos:start="7:45" pos:end="7:50">(<argument pos:start="7:46" pos:end="7:49"><expr pos:start="7:46" pos:end="7:49"><name pos:start="7:46" pos:end="7:49">qbus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">VirtIOSCSICommon</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">vs</name> <init pos:start="9:26" pos:end="9:48">= <expr pos:start="9:28" pos:end="9:48"><call pos:start="9:28" pos:end="9:48"><name pos:start="9:28" pos:end="9:45">VIRTIO_SCSI_COMMON</name><argument_list pos:start="9:46" pos:end="9:48">(<argument pos:start="9:47" pos:end="9:47"><expr pos:start="9:47" pos:end="9:47"><name pos:start="9:47" pos:end="9:47">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:20"><expr pos:start="13:5" pos:end="13:19"><call pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:10">assert</name><argument_list pos:start="13:11" pos:end="13:19">(<argument pos:start="13:12" pos:end="13:18"><expr pos:start="13:12" pos:end="13:18"><operator pos:start="13:12" pos:end="13:12">!</operator><name pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:13">s</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:18">ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:57"><expr pos:start="15:5" pos:end="15:56"><name pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:10">ctx</name></name> <operator pos:start="15:12" pos:end="15:12">=</operator> <call pos:start="15:14" pos:end="15:56"><name pos:start="15:14" pos:end="15:37">iothread_get_aio_context</name><argument_list pos:start="15:38" pos:end="15:56">(<argument pos:start="15:39" pos:end="15:55"><expr pos:start="15:39" pos:end="15:55"><name pos:start="15:39" pos:end="15:55"><name pos:start="15:39" pos:end="15:40">vs</name><operator pos:start="15:41" pos:end="15:42">-&gt;</operator><name pos:start="15:43" pos:end="15:46">conf</name><operator pos:start="15:47" pos:end="15:47">.</operator><name pos:start="15:48" pos:end="15:55">iothread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:60">/* Don't try if transport does not support notifiers. */</comment>

    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:56">(<expr pos:start="21:9" pos:end="21:55"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:31"><name pos:start="21:10" pos:end="21:10">k</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:31">set_guest_notifiers</name></name> <operator pos:start="21:33" pos:end="21:34">||</operator> <operator pos:start="21:36" pos:end="21:36">!</operator><name pos:start="21:37" pos:end="21:55"><name pos:start="21:37" pos:end="21:37">k</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:55">ioeventfd_assign</name></name></expr>)</condition> <block pos:start="21:58" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:16">

        <expr_stmt pos:start="23:9" pos:end="25:61"><expr pos:start="23:9" pos:end="25:60"><call pos:start="23:9" pos:end="25:60"><name pos:start="23:9" pos:end="23:15">fprintf</name><argument_list pos:start="23:16" pos:end="25:60">(<argument pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:22"><name pos:start="23:17" pos:end="23:22">stderr</name></expr></argument>, <argument pos:start="23:25" pos:end="25:59"><expr pos:start="23:25" pos:end="25:59"><literal type="string" pos:start="23:25" pos:end="23:62">"virtio-scsi: Failed to set iothread "</literal>

                   <literal type="string" pos:start="25:20" pos:end="25:59">"(transport does not support notifiers)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:16"><expr pos:start="27:9" pos:end="27:15"><call pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">exit</name><argument_list pos:start="27:13" pos:end="27:15">(<argument pos:start="27:14" pos:end="27:14"><expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
