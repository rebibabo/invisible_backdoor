<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/504.c" pos:tabs="8"><function pos:start="1:1" pos:end="393:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:48">gen_intermediate_code_internal</name> <parameter_list pos:start="1:50" pos:end="5:64">(<parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:58">CPUState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">env</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:70"><decl pos:start="3:51" pos:end="3:70"><type pos:start="3:51" pos:end="3:70"><name pos:start="3:51" pos:end="3:66">TranslationBlock</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:70">tb</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:63"><decl pos:start="5:51" pos:end="5:63"><type pos:start="5:51" pos:end="5:63"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:63">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="393:1">{<block_content pos:start="9:5" pos:end="391:13">

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">DisasContext</name></type> <name pos:start="9:18" pos:end="9:20">ctx</name></decl>, <decl pos:start="9:23" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:27">ctxp</name> <init pos:start="9:29" pos:end="9:34">= <expr pos:start="9:31" pos:end="9:34"><operator pos:start="9:31" pos:end="9:31">&amp;</operator><name pos:start="9:32" pos:end="9:34">ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:17">opc_handler_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier><modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:25">table</name></decl>, <decl pos:start="11:28" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:20"><modifier pos:start="11:28" pos:end="11:28">*</modifier></type><name pos:start="11:29" pos:end="11:35">handler</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint16_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">j</name></decl>, <decl pos:start="17:12" pos:end="17:18"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:13">lj</name> <init pos:start="17:15" pos:end="17:18">= <expr pos:start="17:17" pos:end="17:18"><operator pos:start="17:17" pos:end="17:17">-</operator><literal type="number" pos:start="17:18" pos:end="17:18">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:12">pc_start</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:21"><name pos:start="21:16" pos:end="21:17">tb</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:30"><expr pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:15">gen_opc_ptr</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <name pos:start="23:19" pos:end="23:29">gen_opc_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:45"><expr pos:start="25:5" pos:end="25:44"><name pos:start="25:5" pos:end="25:15">gen_opc_end</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:29">gen_opc_buf</name> <operator pos:start="25:31" pos:end="25:31">+</operator> <name pos:start="25:33" pos:end="25:44">OPC_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:19">gen_opparam_ptr</name> <operator pos:start="27:21" pos:end="27:21">=</operator> <name pos:start="27:23" pos:end="27:37">gen_opparam_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:17">nb_gen_labels</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:7">ctx</name><operator pos:start="31:8" pos:end="31:8">.</operator><name pos:start="31:9" pos:end="31:11">nip</name></name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:22">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:16"><expr pos:start="33:5" pos:end="33:15"><name pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:7">ctx</name><operator pos:start="33:8" pos:end="33:8">.</operator><name pos:start="33:9" pos:end="33:10">tb</name></name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:17"><name pos:start="35:5" pos:end="35:7">ctx</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:17">exception</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:29">EXCP_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="40:0"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:7">ctx</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:14">spr_cb</name></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:28"><name pos:start="37:18" pos:end="37:20">env</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:28">spr_cb</name></name></expr>;</expr_stmt>

<cpp:if pos:start="39:1" pos:end="39:29">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:29"><call pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:11">defined</name><argument_list pos:start="39:12" pos:end="39:29">(<argument pos:start="39:13" pos:end="39:28"><expr pos:start="39:13" pos:end="39:28"><name pos:start="39:13" pos:end="39:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="41:5" pos:end="44:0"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:7">ctx</name><operator pos:start="41:8" pos:end="41:8">.</operator><name pos:start="41:9" pos:end="41:15">mem_idx</name></name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:24">msr_le</name></expr>;</expr_stmt>

<cpp:if pos:start="43:1" pos:end="43:25">#<cpp:directive pos:start="43:2" pos:end="43:3">if</cpp:directive> <expr pos:start="43:5" pos:end="43:25"><call pos:start="43:5" pos:end="43:25"><name pos:start="43:5" pos:end="43:11">defined</name><argument_list pos:start="43:12" pos:end="43:25">(<argument pos:start="43:13" pos:end="43:24"><expr pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="45:5" pos:end="50:0"><expr pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:7">ctx</name><operator pos:start="45:8" pos:end="45:8">.</operator><name pos:start="45:9" pos:end="45:15">mem_idx</name></name> <operator pos:start="45:17" pos:end="45:18">|=</operator> <name pos:start="45:20" pos:end="45:25">msr_sf</name> <operator pos:start="45:27" pos:end="45:28">&lt;&lt;</operator> <literal type="number" pos:start="45:30" pos:end="45:30">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="51:5" pos:end="51:32"><expr pos:start="51:5" pos:end="51:31"><name pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:7">ctx</name><operator pos:start="51:8" pos:end="51:8">.</operator><name pos:start="51:9" pos:end="51:18">supervisor</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <literal type="number" pos:start="51:22" pos:end="51:24">1</literal> <operator pos:start="51:24" pos:end="51:24">-</operator> <name pos:start="51:26" pos:end="51:31">msr_pr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="56:0"><expr pos:start="53:5" pos:end="53:46"><name pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:7">ctx</name><operator pos:start="53:8" pos:end="53:8">.</operator><name pos:start="53:9" pos:end="53:15">mem_idx</name></name> <operator pos:start="53:17" pos:end="53:17">=</operator> <operator pos:start="53:19" pos:end="53:19">(</operator><operator pos:start="53:20" pos:end="53:20">(</operator><literal type="number" pos:start="53:21" pos:end="53:23">1</literal> <operator pos:start="53:23" pos:end="53:23">-</operator> <name pos:start="53:25" pos:end="53:30">msr_pr</name><operator pos:start="53:31" pos:end="53:31">)</operator> <operator pos:start="53:33" pos:end="53:34">&lt;&lt;</operator> <literal type="number" pos:start="53:36" pos:end="53:36">1</literal><operator pos:start="53:37" pos:end="53:37">)</operator> <operator pos:start="53:39" pos:end="53:39">|</operator> <name pos:start="53:41" pos:end="53:46">msr_le</name></expr>;</expr_stmt>

<cpp:if pos:start="55:1" pos:end="55:25">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:25"><call pos:start="55:5" pos:end="55:25"><name pos:start="55:5" pos:end="55:11">defined</name><argument_list pos:start="55:12" pos:end="55:25">(<argument pos:start="55:13" pos:end="55:24"><expr pos:start="55:13" pos:end="55:24"><name pos:start="55:13" pos:end="55:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="57:5" pos:end="64:0"><expr pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:7">ctx</name><operator pos:start="57:8" pos:end="57:8">.</operator><name pos:start="57:9" pos:end="57:15">mem_idx</name></name> <operator pos:start="57:17" pos:end="57:18">|=</operator> <name pos:start="57:20" pos:end="57:25">msr_sf</name> <operator pos:start="57:27" pos:end="57:28">&lt;&lt;</operator> <literal type="number" pos:start="57:30" pos:end="57:30">2</literal></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="63:1" pos:end="63:25">#<cpp:directive pos:start="63:2" pos:end="63:3">if</cpp:directive> <expr pos:start="63:5" pos:end="63:25"><call pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:11">defined</name><argument_list pos:start="63:12" pos:end="63:25">(<argument pos:start="63:13" pos:end="63:24"><expr pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="65:5" pos:end="68:0"><expr pos:start="65:5" pos:end="65:24"><name pos:start="65:5" pos:end="65:15"><name pos:start="65:5" pos:end="65:7">ctx</name><operator pos:start="65:8" pos:end="65:8">.</operator><name pos:start="65:9" pos:end="65:15">sf_mode</name></name> <operator pos:start="65:17" pos:end="65:17">=</operator> <name pos:start="65:19" pos:end="65:24">msr_sf</name></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="69:5" pos:end="72:0"><expr pos:start="69:5" pos:end="69:28"><name pos:start="69:5" pos:end="69:19"><name pos:start="69:5" pos:end="69:7">ctx</name><operator pos:start="69:8" pos:end="69:8">.</operator><name pos:start="69:9" pos:end="69:19">fpu_enabled</name></name> <operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:28">msr_fp</name></expr>;</expr_stmt>

<cpp:if pos:start="71:1" pos:end="71:26">#<cpp:directive pos:start="71:2" pos:end="71:3">if</cpp:directive> <expr pos:start="71:5" pos:end="71:26"><call pos:start="71:5" pos:end="71:26"><name pos:start="71:5" pos:end="71:11">defined</name><argument_list pos:start="71:12" pos:end="71:26">(<argument pos:start="71:13" pos:end="71:25"><expr pos:start="71:13" pos:end="71:25"><name pos:start="71:13" pos:end="71:25">TARGET_PPCEMB</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="73:5" pos:end="76:0"><expr pos:start="73:5" pos:end="73:29"><name pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:7">ctx</name><operator pos:start="73:8" pos:end="73:8">.</operator><name pos:start="73:9" pos:end="73:19">spe_enabled</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:29">msr_spe</name></expr>;</expr_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="77:5" pos:end="80:0"><expr pos:start="77:5" pos:end="77:52"><name pos:start="77:5" pos:end="77:26"><name pos:start="77:5" pos:end="77:7">ctx</name><operator pos:start="77:8" pos:end="77:8">.</operator><name pos:start="77:9" pos:end="77:26">singlestep_enabled</name></name> <operator pos:start="77:28" pos:end="77:28">=</operator> <name pos:start="77:30" pos:end="77:52"><name pos:start="77:30" pos:end="77:32">env</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:52">singlestep_enabled</name></name></expr>;</expr_stmt>

<cpp:if pos:start="79:1" pos:end="79:33">#<cpp:directive pos:start="79:2" pos:end="79:3">if</cpp:directive> <expr pos:start="79:5" pos:end="79:33"><call pos:start="79:5" pos:end="79:28"><name pos:start="79:5" pos:end="79:11">defined</name> <argument_list pos:start="79:13" pos:end="79:28">(<argument pos:start="79:14" pos:end="79:27"><expr pos:start="79:14" pos:end="79:27"><name pos:start="79:14" pos:end="79:27">DO_SINGLE_STEP</name></expr></argument>)</argument_list></call> <operator pos:start="79:30" pos:end="79:31">&amp;&amp;</operator> <literal type="number" pos:start="79:33" pos:end="79:33">0</literal></expr></cpp:if>

    <comment type="block" pos:start="81:5" pos:end="81:32">/* Single step trace mode */</comment>

    <expr_stmt pos:start="83:5" pos:end="86:0"><expr pos:start="83:5" pos:end="83:14"><name pos:start="83:5" pos:end="83:10">msr_se</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">1</literal></expr>;</expr_stmt>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="87:5" pos:end="87:55">/* Set env in case of segfault during code fetch */</comment>

    <while pos:start="89:5" pos:end="319:5">while <condition pos:start="89:11" pos:end="89:67">(<expr pos:start="89:12" pos:end="89:66"><name pos:start="89:12" pos:end="89:24"><name pos:start="89:12" pos:end="89:14">ctx</name><operator pos:start="89:15" pos:end="89:15">.</operator><name pos:start="89:16" pos:end="89:24">exception</name></name> <operator pos:start="89:26" pos:end="89:27">==</operator> <name pos:start="89:29" pos:end="89:37">EXCP_NONE</name> <operator pos:start="89:39" pos:end="89:40">&amp;&amp;</operator> <name pos:start="89:42" pos:end="89:52">gen_opc_ptr</name> <operator pos:start="89:54" pos:end="89:54">&lt;</operator> <name pos:start="89:56" pos:end="89:66">gen_opc_end</name></expr>)</condition> <block pos:start="89:69" pos:end="319:5">{<block_content pos:start="91:9" pos:end="318:0">

        <if_stmt pos:start="91:9" pos:end="107:9"><if pos:start="91:9" pos:end="107:9">if <condition pos:start="91:12" pos:end="91:46">(<expr pos:start="91:13" pos:end="91:45"><call pos:start="91:13" pos:end="91:45"><name pos:start="91:13" pos:end="91:20">unlikely</name><argument_list pos:start="91:21" pos:end="91:45">(<argument pos:start="91:22" pos:end="91:44"><expr pos:start="91:22" pos:end="91:44"><name pos:start="91:22" pos:end="91:40"><name pos:start="91:22" pos:end="91:24">env</name><operator pos:start="91:25" pos:end="91:26">-&gt;</operator><name pos:start="91:27" pos:end="91:40">nb_breakpoints</name></name> <operator pos:start="91:42" pos:end="91:42">&gt;</operator> <literal type="number" pos:start="91:44" pos:end="91:44">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:48" pos:end="107:9">{<block_content pos:start="93:13" pos:end="105:13">

            <for pos:start="93:13" pos:end="105:13">for <control pos:start="93:17" pos:end="93:53">(<init pos:start="93:18" pos:end="93:23"><expr pos:start="93:18" pos:end="93:22"><name pos:start="93:18" pos:end="93:18">j</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <literal type="number" pos:start="93:22" pos:end="93:22">0</literal></expr>;</init> <condition pos:start="93:25" pos:end="93:48"><expr pos:start="93:25" pos:end="93:47"><name pos:start="93:25" pos:end="93:25">j</name> <operator pos:start="93:27" pos:end="93:27">&lt;</operator> <name pos:start="93:29" pos:end="93:47"><name pos:start="93:29" pos:end="93:31">env</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:47">nb_breakpoints</name></name></expr>;</condition> <incr pos:start="93:50" pos:end="93:52"><expr pos:start="93:50" pos:end="93:52"><name pos:start="93:50" pos:end="93:50">j</name><operator pos:start="93:51" pos:end="93:52">++</operator></expr></incr>)</control> <block pos:start="93:55" pos:end="105:13">{<block_content pos:start="95:17" pos:end="103:17">

                <if_stmt pos:start="95:17" pos:end="103:17"><if pos:start="95:17" pos:end="103:17">if <condition pos:start="95:20" pos:end="95:51">(<expr pos:start="95:21" pos:end="95:50"><name pos:start="95:21" pos:end="95:39"><name pos:start="95:21" pos:end="95:23">env</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:36">breakpoints</name><index pos:start="95:37" pos:end="95:39">[<expr pos:start="95:38" pos:end="95:38"><name pos:start="95:38" pos:end="95:38">j</name></expr>]</index></name> <operator pos:start="95:41" pos:end="95:42">==</operator> <name pos:start="95:44" pos:end="95:50"><name pos:start="95:44" pos:end="95:46">ctx</name><operator pos:start="95:47" pos:end="95:47">.</operator><name pos:start="95:48" pos:end="95:50">nip</name></name></expr>)</condition> <block pos:start="95:53" pos:end="103:17">{<block_content pos:start="97:21" pos:end="101:26">

                    <expr_stmt pos:start="97:21" pos:end="97:50"><expr pos:start="97:21" pos:end="97:49"><call pos:start="97:21" pos:end="97:49"><name pos:start="97:21" pos:end="97:34">gen_update_nip</name><argument_list pos:start="97:35" pos:end="97:49">(<argument pos:start="97:36" pos:end="97:39"><expr pos:start="97:36" pos:end="97:39"><operator pos:start="97:36" pos:end="97:36">&amp;</operator><name pos:start="97:37" pos:end="97:39">ctx</name></expr></argument>, <argument pos:start="97:42" pos:end="97:48"><expr pos:start="97:42" pos:end="97:48"><name pos:start="97:42" pos:end="97:48"><name pos:start="97:42" pos:end="97:44">ctx</name><operator pos:start="97:45" pos:end="97:45">.</operator><name pos:start="97:46" pos:end="97:48">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:35"><expr pos:start="99:21" pos:end="99:34"><call pos:start="99:21" pos:end="99:34"><name pos:start="99:21" pos:end="99:32">gen_op_debug</name><argument_list pos:start="99:33" pos:end="99:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="101:21" pos:end="101:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="109:9" pos:end="130:0"><if pos:start="109:9" pos:end="130:0">if <condition pos:start="109:12" pos:end="109:32">(<expr pos:start="109:13" pos:end="109:31"><call pos:start="109:13" pos:end="109:31"><name pos:start="109:13" pos:end="109:20">unlikely</name><argument_list pos:start="109:21" pos:end="109:31">(<argument pos:start="109:22" pos:end="109:30"><expr pos:start="109:22" pos:end="109:30"><name pos:start="109:22" pos:end="109:30">search_pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:34" pos:end="130:0">{<block_content pos:start="111:13" pos:end="125:13">

            <expr_stmt pos:start="111:13" pos:end="111:42"><expr pos:start="111:13" pos:end="111:41"><name pos:start="111:13" pos:end="111:13">j</name> <operator pos:start="111:15" pos:end="111:15">=</operator> <name pos:start="111:17" pos:end="111:27">gen_opc_ptr</name> <operator pos:start="111:29" pos:end="111:29">-</operator> <name pos:start="111:31" pos:end="111:41">gen_opc_buf</name></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="125:13"><if pos:start="113:13" pos:end="125:13">if <condition pos:start="113:16" pos:end="113:23">(<expr pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:18">lj</name> <operator pos:start="113:20" pos:end="113:20">&lt;</operator> <name pos:start="113:22" pos:end="113:22">j</name></expr>)</condition> <block pos:start="113:25" pos:end="125:13">{<block_content pos:start="115:17" pos:end="123:44">

                <expr_stmt pos:start="115:17" pos:end="115:21"><expr pos:start="115:17" pos:end="115:20"><name pos:start="115:17" pos:end="115:18">lj</name><operator pos:start="115:19" pos:end="115:20">++</operator></expr>;</expr_stmt>

                <while pos:start="117:17" pos:end="119:50">while <condition pos:start="117:23" pos:end="117:30">(<expr pos:start="117:24" pos:end="117:29"><name pos:start="117:24" pos:end="117:25">lj</name> <operator pos:start="117:27" pos:end="117:27">&lt;</operator> <name pos:start="117:29" pos:end="117:29">j</name></expr>)</condition><block type="pseudo" pos:start="119:21" pos:end="119:50"><block_content pos:start="119:21" pos:end="119:50">

                    <expr_stmt pos:start="119:21" pos:end="119:50"><expr pos:start="119:21" pos:end="119:49"><name pos:start="119:21" pos:end="119:45"><name pos:start="119:21" pos:end="119:39">gen_opc_instr_start</name><index pos:start="119:40" pos:end="119:45">[<expr pos:start="119:41" pos:end="119:44"><name pos:start="119:41" pos:end="119:42">lj</name><operator pos:start="119:43" pos:end="119:44">++</operator></expr>]</index></name> <operator pos:start="119:47" pos:end="119:47">=</operator> <literal type="number" pos:start="119:49" pos:end="119:49">0</literal></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="121:17" pos:end="121:41"><expr pos:start="121:17" pos:end="121:40"><name pos:start="121:17" pos:end="121:30"><name pos:start="121:17" pos:end="121:26">gen_opc_pc</name><index pos:start="121:27" pos:end="121:30">[<expr pos:start="121:28" pos:end="121:29"><name pos:start="121:28" pos:end="121:29">lj</name></expr>]</index></name> <operator pos:start="121:32" pos:end="121:32">=</operator> <name pos:start="121:34" pos:end="121:40"><name pos:start="121:34" pos:end="121:36">ctx</name><operator pos:start="121:37" pos:end="121:37">.</operator><name pos:start="121:38" pos:end="121:40">nip</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:44"><expr pos:start="123:17" pos:end="123:43"><name pos:start="123:17" pos:end="123:39"><name pos:start="123:17" pos:end="123:35">gen_opc_instr_start</name><index pos:start="123:36" pos:end="123:39">[<expr pos:start="123:37" pos:end="123:38"><name pos:start="123:37" pos:end="123:38">lj</name></expr>]</index></name> <operator pos:start="123:41" pos:end="123:41">=</operator> <literal type="number" pos:start="123:43" pos:end="123:43">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:if pos:start="129:1" pos:end="129:27">#<cpp:directive pos:start="129:2" pos:end="129:3">if</cpp:directive> <expr pos:start="129:5" pos:end="129:27"><name pos:start="129:5" pos:end="129:11">defined</name> <name pos:start="129:13" pos:end="129:27">PPC_DEBUG_DISAS</name></expr></cpp:if>

        <if_stmt pos:start="131:9" pos:end="142:0"><if pos:start="131:9" pos:end="142:0">if <condition pos:start="131:12" pos:end="131:41">(<expr pos:start="131:13" pos:end="131:40"><name pos:start="131:13" pos:end="131:20">loglevel</name> <operator pos:start="131:22" pos:end="131:22">&amp;</operator> <name pos:start="131:24" pos:end="131:40">CPU_LOG_TB_IN_ASM</name></expr>)</condition> <block pos:start="131:43" pos:end="142:0">{<block_content pos:start="133:13" pos:end="137:49">

            <expr_stmt pos:start="133:13" pos:end="133:51"><expr pos:start="133:13" pos:end="133:50"><call pos:start="133:13" pos:end="133:50"><name pos:start="133:13" pos:end="133:19">fprintf</name><argument_list pos:start="133:20" pos:end="133:50">(<argument pos:start="133:21" pos:end="133:27"><expr pos:start="133:21" pos:end="133:27"><name pos:start="133:21" pos:end="133:27">logfile</name></expr></argument>, <argument pos:start="133:30" pos:end="133:49"><expr pos:start="133:30" pos:end="133:49"><literal type="string" pos:start="133:30" pos:end="133:49">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="137:49"><expr pos:start="135:13" pos:end="137:48"><call pos:start="135:13" pos:end="137:48"><name pos:start="135:13" pos:end="135:19">fprintf</name><argument_list pos:start="135:20" pos:end="137:48">(<argument pos:start="135:21" pos:end="135:27"><expr pos:start="135:21" pos:end="135:27"><name pos:start="135:21" pos:end="135:27">logfile</name></expr></argument>, <argument pos:start="135:30" pos:end="135:61"><expr pos:start="135:30" pos:end="135:61"><literal type="string" pos:start="135:30" pos:end="135:35">"nip="</literal> <name pos:start="135:37" pos:end="135:41">ADDRX</name> <literal type="string" pos:start="135:43" pos:end="135:61">" super=%d ir=%d\n"</literal></expr></argument>,

                    <argument pos:start="137:21" pos:end="137:27"><expr pos:start="137:21" pos:end="137:27"><name pos:start="137:21" pos:end="137:27"><name pos:start="137:21" pos:end="137:23">ctx</name><operator pos:start="137:24" pos:end="137:24">.</operator><name pos:start="137:25" pos:end="137:27">nip</name></name></expr></argument>, <argument pos:start="137:30" pos:end="137:39"><expr pos:start="137:30" pos:end="137:39"><literal type="number" pos:start="137:30" pos:end="137:32">1</literal> <operator pos:start="137:32" pos:end="137:32">-</operator> <name pos:start="137:34" pos:end="137:39">msr_pr</name></expr></argument>, <argument pos:start="137:42" pos:end="137:47"><expr pos:start="137:42" pos:end="137:47"><name pos:start="137:42" pos:end="137:47">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="143:9" pos:end="143:39"><expr pos:start="143:9" pos:end="143:38"><name pos:start="143:9" pos:end="143:18"><name pos:start="143:9" pos:end="143:11">ctx</name><operator pos:start="143:12" pos:end="143:12">.</operator><name pos:start="143:13" pos:end="143:18">opcode</name></name> <operator pos:start="143:20" pos:end="143:20">=</operator> <call pos:start="143:22" pos:end="143:38"><name pos:start="143:22" pos:end="143:29">ldl_code</name><argument_list pos:start="143:30" pos:end="143:38">(<argument pos:start="143:31" pos:end="143:37"><expr pos:start="143:31" pos:end="143:37"><name pos:start="143:31" pos:end="143:37"><name pos:start="143:31" pos:end="143:33">ctx</name><operator pos:start="143:34" pos:end="143:34">.</operator><name pos:start="143:35" pos:end="143:37">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="145:9" pos:end="158:0"><if pos:start="145:9" pos:end="158:0">if <condition pos:start="145:12" pos:end="145:19">(<expr pos:start="145:13" pos:end="145:18"><name pos:start="145:13" pos:end="145:18">msr_le</name></expr>)</condition> <block pos:start="145:21" pos:end="158:0">{<block_content pos:start="147:13" pos:end="153:50">

            <expr_stmt pos:start="147:13" pos:end="153:50"><expr pos:start="147:13" pos:end="153:49"><name pos:start="147:13" pos:end="147:22"><name pos:start="147:13" pos:end="147:15">ctx</name><operator pos:start="147:16" pos:end="147:16">.</operator><name pos:start="147:17" pos:end="147:22">opcode</name></name> <operator pos:start="147:24" pos:end="147:24">=</operator> <operator pos:start="147:26" pos:end="147:26">(</operator><operator pos:start="147:27" pos:end="147:27">(</operator><name pos:start="147:28" pos:end="147:37"><name pos:start="147:28" pos:end="147:30">ctx</name><operator pos:start="147:31" pos:end="147:31">.</operator><name pos:start="147:32" pos:end="147:37">opcode</name></name> <operator pos:start="147:39" pos:end="147:39">&amp;</operator> <literal type="number" pos:start="147:41" pos:end="147:50">0xFF000000</literal><operator pos:start="147:51" pos:end="147:51">)</operator> <operator pos:start="147:53" pos:end="147:54">&gt;&gt;</operator> <literal type="number" pos:start="147:56" pos:end="147:57">24</literal><operator pos:start="147:58" pos:end="147:58">)</operator> <operator pos:start="147:60" pos:end="147:60">|</operator>

                <operator pos:start="149:17" pos:end="149:17">(</operator><operator pos:start="149:18" pos:end="149:18">(</operator><name pos:start="149:19" pos:end="149:28"><name pos:start="149:19" pos:end="149:21">ctx</name><operator pos:start="149:22" pos:end="149:22">.</operator><name pos:start="149:23" pos:end="149:28">opcode</name></name> <operator pos:start="149:30" pos:end="149:30">&amp;</operator> <literal type="number" pos:start="149:32" pos:end="149:41">0x00FF0000</literal><operator pos:start="149:42" pos:end="149:42">)</operator> <operator pos:start="149:44" pos:end="149:45">&gt;&gt;</operator> <literal type="number" pos:start="149:47" pos:end="149:47">8</literal><operator pos:start="149:48" pos:end="149:48">)</operator> <operator pos:start="149:50" pos:end="149:50">|</operator>

                <operator pos:start="151:17" pos:end="151:17">(</operator><operator pos:start="151:18" pos:end="151:18">(</operator><name pos:start="151:19" pos:end="151:28"><name pos:start="151:19" pos:end="151:21">ctx</name><operator pos:start="151:22" pos:end="151:22">.</operator><name pos:start="151:23" pos:end="151:28">opcode</name></name> <operator pos:start="151:30" pos:end="151:30">&amp;</operator> <literal type="number" pos:start="151:32" pos:end="151:41">0x0000FF00</literal><operator pos:start="151:42" pos:end="151:42">)</operator> <operator pos:start="151:44" pos:end="151:45">&lt;&lt;</operator> <literal type="number" pos:start="151:47" pos:end="151:47">8</literal><operator pos:start="151:48" pos:end="151:48">)</operator> <operator pos:start="151:50" pos:end="151:50">|</operator>

                <operator pos:start="153:17" pos:end="153:17">(</operator><operator pos:start="153:18" pos:end="153:18">(</operator><name pos:start="153:19" pos:end="153:28"><name pos:start="153:19" pos:end="153:21">ctx</name><operator pos:start="153:22" pos:end="153:22">.</operator><name pos:start="153:23" pos:end="153:28">opcode</name></name> <operator pos:start="153:30" pos:end="153:30">&amp;</operator> <literal type="number" pos:start="153:32" pos:end="153:41">0x000000FF</literal><operator pos:start="153:42" pos:end="153:42">)</operator> <operator pos:start="153:44" pos:end="153:45">&lt;&lt;</operator> <literal type="number" pos:start="153:47" pos:end="153:48">24</literal><operator pos:start="153:49" pos:end="153:49">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:if pos:start="157:1" pos:end="157:27">#<cpp:directive pos:start="157:2" pos:end="157:3">if</cpp:directive> <expr pos:start="157:5" pos:end="157:27"><name pos:start="157:5" pos:end="157:11">defined</name> <name pos:start="157:13" pos:end="157:27">PPC_DEBUG_DISAS</name></expr></cpp:if>

        <if_stmt pos:start="159:9" pos:end="170:0"><if pos:start="159:9" pos:end="170:0">if <condition pos:start="159:12" pos:end="159:41">(<expr pos:start="159:13" pos:end="159:40"><name pos:start="159:13" pos:end="159:20">loglevel</name> <operator pos:start="159:22" pos:end="159:22">&amp;</operator> <name pos:start="159:24" pos:end="159:40">CPU_LOG_TB_IN_ASM</name></expr>)</condition> <block pos:start="159:43" pos:end="170:0">{<block_content pos:start="161:13" pos:end="165:65">

            <expr_stmt pos:start="161:13" pos:end="165:65"><expr pos:start="161:13" pos:end="165:64"><call pos:start="161:13" pos:end="165:64"><name pos:start="161:13" pos:end="161:19">fprintf</name><argument_list pos:start="161:20" pos:end="165:64">(<argument pos:start="161:21" pos:end="161:27"><expr pos:start="161:21" pos:end="161:27"><name pos:start="161:21" pos:end="161:27">logfile</name></expr></argument>, <argument pos:start="161:30" pos:end="161:76"><expr pos:start="161:30" pos:end="161:76"><literal type="string" pos:start="161:30" pos:end="161:76">"translate opcode %08x (%02x %02x %02x) (%s)\n"</literal></expr></argument>,

                    <argument pos:start="163:21" pos:end="163:30"><expr pos:start="163:21" pos:end="163:30"><name pos:start="163:21" pos:end="163:30"><name pos:start="163:21" pos:end="163:23">ctx</name><operator pos:start="163:24" pos:end="163:24">.</operator><name pos:start="163:25" pos:end="163:30">opcode</name></name></expr></argument>, <argument pos:start="163:33" pos:end="163:48"><expr pos:start="163:33" pos:end="163:48"><call pos:start="163:33" pos:end="163:48"><name pos:start="163:33" pos:end="163:36">opc1</name><argument_list pos:start="163:37" pos:end="163:48">(<argument pos:start="163:38" pos:end="163:47"><expr pos:start="163:38" pos:end="163:47"><name pos:start="163:38" pos:end="163:47"><name pos:start="163:38" pos:end="163:40">ctx</name><operator pos:start="163:41" pos:end="163:41">.</operator><name pos:start="163:42" pos:end="163:47">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="163:51" pos:end="163:66"><expr pos:start="163:51" pos:end="163:66"><call pos:start="163:51" pos:end="163:66"><name pos:start="163:51" pos:end="163:54">opc2</name><argument_list pos:start="163:55" pos:end="163:66">(<argument pos:start="163:56" pos:end="163:65"><expr pos:start="163:56" pos:end="163:65"><name pos:start="163:56" pos:end="163:65"><name pos:start="163:56" pos:end="163:58">ctx</name><operator pos:start="163:59" pos:end="163:59">.</operator><name pos:start="163:60" pos:end="163:65">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="165:21" pos:end="165:36"><expr pos:start="165:21" pos:end="165:36"><call pos:start="165:21" pos:end="165:36"><name pos:start="165:21" pos:end="165:24">opc3</name><argument_list pos:start="165:25" pos:end="165:36">(<argument pos:start="165:26" pos:end="165:35"><expr pos:start="165:26" pos:end="165:35"><name pos:start="165:26" pos:end="165:35"><name pos:start="165:26" pos:end="165:28">ctx</name><operator pos:start="165:29" pos:end="165:29">.</operator><name pos:start="165:30" pos:end="165:35">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="165:39" pos:end="165:63"><expr pos:start="165:39" pos:end="165:63"><ternary pos:start="165:39" pos:end="165:63"><condition pos:start="165:39" pos:end="165:46"><expr pos:start="165:39" pos:end="165:44"><name pos:start="165:39" pos:end="165:44">msr_le</name></expr> ?</condition><then pos:start="165:48" pos:end="165:55"> <expr pos:start="165:48" pos:end="165:55"><literal type="string" pos:start="165:48" pos:end="165:55">"little"</literal></expr> </then><else pos:start="165:57" pos:end="165:63">: <expr pos:start="165:59" pos:end="165:63"><literal type="string" pos:start="165:59" pos:end="165:63">"big"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="169:1" pos:end="169:6">#<cpp:directive pos:start="169:2" pos:end="169:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="171:9" pos:end="171:21"><expr pos:start="171:9" pos:end="171:20"><name pos:start="171:9" pos:end="171:15"><name pos:start="171:9" pos:end="171:11">ctx</name><operator pos:start="171:12" pos:end="171:12">.</operator><name pos:start="171:13" pos:end="171:15">nip</name></name> <operator pos:start="171:17" pos:end="171:18">+=</operator> <literal type="number" pos:start="171:20" pos:end="171:20">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:29"><expr pos:start="173:9" pos:end="173:28"><name pos:start="173:9" pos:end="173:13">table</name> <operator pos:start="173:15" pos:end="173:15">=</operator> <name pos:start="173:17" pos:end="173:28"><name pos:start="173:17" pos:end="173:19">env</name><operator pos:start="173:20" pos:end="173:21">-&gt;</operator><name pos:start="173:22" pos:end="173:28">opcodes</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:42"><expr pos:start="175:9" pos:end="175:41"><name pos:start="175:9" pos:end="175:15">handler</name> <operator pos:start="175:17" pos:end="175:17">=</operator> <name pos:start="175:19" pos:end="175:41"><name pos:start="175:19" pos:end="175:23">table</name><index pos:start="175:24" pos:end="175:41">[<expr pos:start="175:25" pos:end="175:40"><call pos:start="175:25" pos:end="175:40"><name pos:start="175:25" pos:end="175:28">opc1</name><argument_list pos:start="175:29" pos:end="175:40">(<argument pos:start="175:30" pos:end="175:39"><expr pos:start="175:30" pos:end="175:39"><name pos:start="175:30" pos:end="175:39"><name pos:start="175:30" pos:end="175:32">ctx</name><operator pos:start="175:33" pos:end="175:33">.</operator><name pos:start="175:34" pos:end="175:39">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="191:9"><if pos:start="177:9" pos:end="191:9">if <condition pos:start="177:12" pos:end="177:40">(<expr pos:start="177:13" pos:end="177:39"><call pos:start="177:13" pos:end="177:39"><name pos:start="177:13" pos:end="177:30">is_indirect_opcode</name><argument_list pos:start="177:31" pos:end="177:39">(<argument pos:start="177:32" pos:end="177:38"><expr pos:start="177:32" pos:end="177:38"><name pos:start="177:32" pos:end="177:38">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="177:42" pos:end="191:9">{<block_content pos:start="179:13" pos:end="189:13">

            <expr_stmt pos:start="179:13" pos:end="179:39"><expr pos:start="179:13" pos:end="179:38"><name pos:start="179:13" pos:end="179:17">table</name> <operator pos:start="179:19" pos:end="179:19">=</operator> <call pos:start="179:21" pos:end="179:38"><name pos:start="179:21" pos:end="179:29">ind_table</name><argument_list pos:start="179:30" pos:end="179:38">(<argument pos:start="179:31" pos:end="179:37"><expr pos:start="179:31" pos:end="179:37"><name pos:start="179:31" pos:end="179:37">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:46"><expr pos:start="181:13" pos:end="181:45"><name pos:start="181:13" pos:end="181:19">handler</name> <operator pos:start="181:21" pos:end="181:21">=</operator> <name pos:start="181:23" pos:end="181:45"><name pos:start="181:23" pos:end="181:27">table</name><index pos:start="181:28" pos:end="181:45">[<expr pos:start="181:29" pos:end="181:44"><call pos:start="181:29" pos:end="181:44"><name pos:start="181:29" pos:end="181:32">opc2</name><argument_list pos:start="181:33" pos:end="181:44">(<argument pos:start="181:34" pos:end="181:43"><expr pos:start="181:34" pos:end="181:43"><name pos:start="181:34" pos:end="181:43"><name pos:start="181:34" pos:end="181:36">ctx</name><operator pos:start="181:37" pos:end="181:37">.</operator><name pos:start="181:38" pos:end="181:43">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="183:13" pos:end="189:13"><if pos:start="183:13" pos:end="189:13">if <condition pos:start="183:16" pos:end="183:44">(<expr pos:start="183:17" pos:end="183:43"><call pos:start="183:17" pos:end="183:43"><name pos:start="183:17" pos:end="183:34">is_indirect_opcode</name><argument_list pos:start="183:35" pos:end="183:43">(<argument pos:start="183:36" pos:end="183:42"><expr pos:start="183:36" pos:end="183:42"><name pos:start="183:36" pos:end="183:42">handler</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="183:46" pos:end="189:13">{<block_content pos:start="185:17" pos:end="187:50">

                <expr_stmt pos:start="185:17" pos:end="185:43"><expr pos:start="185:17" pos:end="185:42"><name pos:start="185:17" pos:end="185:21">table</name> <operator pos:start="185:23" pos:end="185:23">=</operator> <call pos:start="185:25" pos:end="185:42"><name pos:start="185:25" pos:end="185:33">ind_table</name><argument_list pos:start="185:34" pos:end="185:42">(<argument pos:start="185:35" pos:end="185:41"><expr pos:start="185:35" pos:end="185:41"><name pos:start="185:35" pos:end="185:41">handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:50"><expr pos:start="187:17" pos:end="187:49"><name pos:start="187:17" pos:end="187:23">handler</name> <operator pos:start="187:25" pos:end="187:25">=</operator> <name pos:start="187:27" pos:end="187:49"><name pos:start="187:27" pos:end="187:31">table</name><index pos:start="187:32" pos:end="187:49">[<expr pos:start="187:33" pos:end="187:48"><call pos:start="187:33" pos:end="187:48"><name pos:start="187:33" pos:end="187:36">opc3</name><argument_list pos:start="187:37" pos:end="187:48">(<argument pos:start="187:38" pos:end="187:47"><expr pos:start="187:38" pos:end="187:47"><name pos:start="187:38" pos:end="187:47"><name pos:start="187:38" pos:end="187:40">ctx</name><operator pos:start="187:41" pos:end="187:41">.</operator><name pos:start="187:42" pos:end="187:47">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="193:9" pos:end="193:40">/* Is opcode *REALLY* valid ? */</comment>

        <if_stmt pos:start="195:9" pos:end="255:9"><if pos:start="195:9" pos:end="219:9">if <condition pos:start="195:12" pos:end="195:55">(<expr pos:start="195:13" pos:end="195:54"><call pos:start="195:13" pos:end="195:54"><name pos:start="195:13" pos:end="195:20">unlikely</name><argument_list pos:start="195:21" pos:end="195:54">(<argument pos:start="195:22" pos:end="195:53"><expr pos:start="195:22" pos:end="195:53"><name pos:start="195:22" pos:end="195:37"><name pos:start="195:22" pos:end="195:28">handler</name><operator pos:start="195:29" pos:end="195:30">-&gt;</operator><name pos:start="195:31" pos:end="195:37">handler</name></name> <operator pos:start="195:39" pos:end="195:40">==</operator> <operator pos:start="195:42" pos:end="195:42">&amp;</operator><name pos:start="195:43" pos:end="195:53">gen_invalid</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="195:57" pos:end="219:9">{<block_content pos:start="197:13" pos:end="217:13">

            <if_stmt pos:start="197:13" pos:end="217:13"><if pos:start="197:13" pos:end="207:13">if <condition pos:start="197:16" pos:end="197:30">(<expr pos:start="197:17" pos:end="197:29"><name pos:start="197:17" pos:end="197:24">loglevel</name> <operator pos:start="197:26" pos:end="197:27">!=</operator> <literal type="number" pos:start="197:29" pos:end="197:29">0</literal></expr>)</condition> <block pos:start="197:32" pos:end="207:13">{<block_content pos:start="199:17" pos:end="205:75">

                <expr_stmt pos:start="199:17" pos:end="205:75"><expr pos:start="199:17" pos:end="205:74"><call pos:start="199:17" pos:end="205:74"><name pos:start="199:17" pos:end="199:23">fprintf</name><argument_list pos:start="199:24" pos:end="205:74">(<argument pos:start="199:25" pos:end="199:31"><expr pos:start="199:25" pos:end="199:31"><name pos:start="199:25" pos:end="199:31">logfile</name></expr></argument>, <argument pos:start="199:34" pos:end="201:68"><expr pos:start="199:34" pos:end="201:68"><literal type="string" pos:start="199:34" pos:end="199:63">"invalid/unsupported opcode: "</literal>

                        <literal type="string" pos:start="201:25" pos:end="201:54">"%02x - %02x - %02x (%08x) 0x"</literal> <name pos:start="201:56" pos:end="201:60">ADDRX</name> <literal type="string" pos:start="201:62" pos:end="201:68">" %d\n"</literal></expr></argument>,

                        <argument pos:start="203:25" pos:end="203:40"><expr pos:start="203:25" pos:end="203:40"><call pos:start="203:25" pos:end="203:40"><name pos:start="203:25" pos:end="203:28">opc1</name><argument_list pos:start="203:29" pos:end="203:40">(<argument pos:start="203:30" pos:end="203:39"><expr pos:start="203:30" pos:end="203:39"><name pos:start="203:30" pos:end="203:39"><name pos:start="203:30" pos:end="203:32">ctx</name><operator pos:start="203:33" pos:end="203:33">.</operator><name pos:start="203:34" pos:end="203:39">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="203:43" pos:end="203:58"><expr pos:start="203:43" pos:end="203:58"><call pos:start="203:43" pos:end="203:58"><name pos:start="203:43" pos:end="203:46">opc2</name><argument_list pos:start="203:47" pos:end="203:58">(<argument pos:start="203:48" pos:end="203:57"><expr pos:start="203:48" pos:end="203:57"><name pos:start="203:48" pos:end="203:57"><name pos:start="203:48" pos:end="203:50">ctx</name><operator pos:start="203:51" pos:end="203:51">.</operator><name pos:start="203:52" pos:end="203:57">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="205:25" pos:end="205:40"><expr pos:start="205:25" pos:end="205:40"><call pos:start="205:25" pos:end="205:40"><name pos:start="205:25" pos:end="205:28">opc3</name><argument_list pos:start="205:29" pos:end="205:40">(<argument pos:start="205:30" pos:end="205:39"><expr pos:start="205:30" pos:end="205:39"><name pos:start="205:30" pos:end="205:39"><name pos:start="205:30" pos:end="205:32">ctx</name><operator pos:start="205:33" pos:end="205:33">.</operator><name pos:start="205:34" pos:end="205:39">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="205:43" pos:end="205:52"><expr pos:start="205:43" pos:end="205:52"><name pos:start="205:43" pos:end="205:52"><name pos:start="205:43" pos:end="205:45">ctx</name><operator pos:start="205:46" pos:end="205:46">.</operator><name pos:start="205:47" pos:end="205:52">opcode</name></name></expr></argument>, <argument pos:start="205:55" pos:end="205:65"><expr pos:start="205:55" pos:end="205:65"><name pos:start="205:55" pos:end="205:61"><name pos:start="205:55" pos:end="205:57">ctx</name><operator pos:start="205:58" pos:end="205:58">.</operator><name pos:start="205:59" pos:end="205:61">nip</name></name> <operator pos:start="205:63" pos:end="205:63">-</operator> <literal type="number" pos:start="205:65" pos:end="205:65">4</literal></expr></argument>, <argument pos:start="205:68" pos:end="205:73"><expr pos:start="205:68" pos:end="205:73"><name pos:start="205:68" pos:end="205:73">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="207:15" pos:end="217:13">else <block pos:start="207:20" pos:end="217:13">{<block_content pos:start="209:17" pos:end="215:74">

                <expr_stmt pos:start="209:17" pos:end="215:74"><expr pos:start="209:17" pos:end="215:73"><call pos:start="209:17" pos:end="215:73"><name pos:start="209:17" pos:end="209:22">printf</name><argument_list pos:start="209:23" pos:end="215:73">(<argument pos:start="209:24" pos:end="211:67"><expr pos:start="209:24" pos:end="211:67"><literal type="string" pos:start="209:24" pos:end="209:53">"invalid/unsupported opcode: "</literal>

                       <literal type="string" pos:start="211:24" pos:end="211:53">"%02x - %02x - %02x (%08x) 0x"</literal> <name pos:start="211:55" pos:end="211:59">ADDRX</name> <literal type="string" pos:start="211:61" pos:end="211:67">" %d\n"</literal></expr></argument>,

                       <argument pos:start="213:24" pos:end="213:39"><expr pos:start="213:24" pos:end="213:39"><call pos:start="213:24" pos:end="213:39"><name pos:start="213:24" pos:end="213:27">opc1</name><argument_list pos:start="213:28" pos:end="213:39">(<argument pos:start="213:29" pos:end="213:38"><expr pos:start="213:29" pos:end="213:38"><name pos:start="213:29" pos:end="213:38"><name pos:start="213:29" pos:end="213:31">ctx</name><operator pos:start="213:32" pos:end="213:32">.</operator><name pos:start="213:33" pos:end="213:38">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="213:42" pos:end="213:57"><expr pos:start="213:42" pos:end="213:57"><call pos:start="213:42" pos:end="213:57"><name pos:start="213:42" pos:end="213:45">opc2</name><argument_list pos:start="213:46" pos:end="213:57">(<argument pos:start="213:47" pos:end="213:56"><expr pos:start="213:47" pos:end="213:56"><name pos:start="213:47" pos:end="213:56"><name pos:start="213:47" pos:end="213:49">ctx</name><operator pos:start="213:50" pos:end="213:50">.</operator><name pos:start="213:51" pos:end="213:56">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="215:24" pos:end="215:39"><expr pos:start="215:24" pos:end="215:39"><call pos:start="215:24" pos:end="215:39"><name pos:start="215:24" pos:end="215:27">opc3</name><argument_list pos:start="215:28" pos:end="215:39">(<argument pos:start="215:29" pos:end="215:38"><expr pos:start="215:29" pos:end="215:38"><name pos:start="215:29" pos:end="215:38"><name pos:start="215:29" pos:end="215:31">ctx</name><operator pos:start="215:32" pos:end="215:32">.</operator><name pos:start="215:33" pos:end="215:38">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="215:42" pos:end="215:51"><expr pos:start="215:42" pos:end="215:51"><name pos:start="215:42" pos:end="215:51"><name pos:start="215:42" pos:end="215:44">ctx</name><operator pos:start="215:45" pos:end="215:45">.</operator><name pos:start="215:46" pos:end="215:51">opcode</name></name></expr></argument>, <argument pos:start="215:54" pos:end="215:64"><expr pos:start="215:54" pos:end="215:64"><name pos:start="215:54" pos:end="215:60"><name pos:start="215:54" pos:end="215:56">ctx</name><operator pos:start="215:57" pos:end="215:57">.</operator><name pos:start="215:58" pos:end="215:60">nip</name></name> <operator pos:start="215:62" pos:end="215:62">-</operator> <literal type="number" pos:start="215:64" pos:end="215:64">4</literal></expr></argument>, <argument pos:start="215:67" pos:end="215:72"><expr pos:start="215:67" pos:end="215:72"><name pos:start="215:67" pos:end="215:72">msr_ir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="219:11" pos:end="255:9">else <block pos:start="219:16" pos:end="255:9">{<block_content pos:start="221:13" pos:end="253:13">

            <if_stmt pos:start="221:13" pos:end="253:13"><if pos:start="221:13" pos:end="253:13">if <condition pos:start="221:16" pos:end="221:61">(<expr pos:start="221:17" pos:end="221:60"><call pos:start="221:17" pos:end="221:60"><name pos:start="221:17" pos:end="221:24">unlikely</name><argument_list pos:start="221:25" pos:end="221:60">(<argument pos:start="221:26" pos:end="221:59"><expr pos:start="221:26" pos:end="221:59"><operator pos:start="221:26" pos:end="221:26">(</operator><name pos:start="221:27" pos:end="221:36"><name pos:start="221:27" pos:end="221:29">ctx</name><operator pos:start="221:30" pos:end="221:30">.</operator><name pos:start="221:31" pos:end="221:36">opcode</name></name> <operator pos:start="221:38" pos:end="221:38">&amp;</operator> <name pos:start="221:40" pos:end="221:53"><name pos:start="221:40" pos:end="221:46">handler</name><operator pos:start="221:47" pos:end="221:48">-&gt;</operator><name pos:start="221:49" pos:end="221:53">inval</name></name><operator pos:start="221:54" pos:end="221:54">)</operator> <operator pos:start="221:56" pos:end="221:57">!=</operator> <literal type="number" pos:start="221:59" pos:end="221:59">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="221:63" pos:end="253:13">{<block_content pos:start="223:17" pos:end="251:22">

                <if_stmt pos:start="223:17" pos:end="247:17"><if pos:start="223:17" pos:end="235:17">if <condition pos:start="223:20" pos:end="223:34">(<expr pos:start="223:21" pos:end="223:33"><name pos:start="223:21" pos:end="223:28">loglevel</name> <operator pos:start="223:30" pos:end="223:31">!=</operator> <literal type="number" pos:start="223:33" pos:end="223:33">0</literal></expr>)</condition> <block pos:start="223:36" pos:end="235:17">{<block_content pos:start="225:21" pos:end="233:53">

                    <expr_stmt pos:start="225:21" pos:end="233:53"><expr pos:start="225:21" pos:end="233:52"><call pos:start="225:21" pos:end="233:52"><name pos:start="225:21" pos:end="225:27">fprintf</name><argument_list pos:start="225:28" pos:end="233:52">(<argument pos:start="225:29" pos:end="225:35"><expr pos:start="225:29" pos:end="225:35"><name pos:start="225:29" pos:end="225:35">logfile</name></expr></argument>, <argument pos:start="225:38" pos:end="227:68"><expr pos:start="225:38" pos:end="227:68"><literal type="string" pos:start="225:38" pos:end="225:70">"invalid bits: %08x for opcode: "</literal>

                            <literal type="string" pos:start="227:29" pos:end="227:57">"%02x -%02x - %02x (%08x) 0x"</literal> <name pos:start="227:59" pos:end="227:63">ADDRX</name> <literal type="string" pos:start="227:65" pos:end="227:68">"\n"</literal></expr></argument>,

                            <argument pos:start="229:29" pos:end="229:55"><expr pos:start="229:29" pos:end="229:55"><name pos:start="229:29" pos:end="229:38"><name pos:start="229:29" pos:end="229:31">ctx</name><operator pos:start="229:32" pos:end="229:32">.</operator><name pos:start="229:33" pos:end="229:38">opcode</name></name> <operator pos:start="229:40" pos:end="229:40">&amp;</operator> <name pos:start="229:42" pos:end="229:55"><name pos:start="229:42" pos:end="229:48">handler</name><operator pos:start="229:49" pos:end="229:50">-&gt;</operator><name pos:start="229:51" pos:end="229:55">inval</name></name></expr></argument>, <argument pos:start="229:58" pos:end="229:73"><expr pos:start="229:58" pos:end="229:73"><call pos:start="229:58" pos:end="229:73"><name pos:start="229:58" pos:end="229:61">opc1</name><argument_list pos:start="229:62" pos:end="229:73">(<argument pos:start="229:63" pos:end="229:72"><expr pos:start="229:63" pos:end="229:72"><name pos:start="229:63" pos:end="229:72"><name pos:start="229:63" pos:end="229:65">ctx</name><operator pos:start="229:66" pos:end="229:66">.</operator><name pos:start="229:67" pos:end="229:72">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="231:29" pos:end="231:44"><expr pos:start="231:29" pos:end="231:44"><call pos:start="231:29" pos:end="231:44"><name pos:start="231:29" pos:end="231:32">opc2</name><argument_list pos:start="231:33" pos:end="231:44">(<argument pos:start="231:34" pos:end="231:43"><expr pos:start="231:34" pos:end="231:43"><name pos:start="231:34" pos:end="231:43"><name pos:start="231:34" pos:end="231:36">ctx</name><operator pos:start="231:37" pos:end="231:37">.</operator><name pos:start="231:38" pos:end="231:43">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="231:47" pos:end="231:62"><expr pos:start="231:47" pos:end="231:62"><call pos:start="231:47" pos:end="231:62"><name pos:start="231:47" pos:end="231:50">opc3</name><argument_list pos:start="231:51" pos:end="231:62">(<argument pos:start="231:52" pos:end="231:61"><expr pos:start="231:52" pos:end="231:61"><name pos:start="231:52" pos:end="231:61"><name pos:start="231:52" pos:end="231:54">ctx</name><operator pos:start="231:55" pos:end="231:55">.</operator><name pos:start="231:56" pos:end="231:61">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="233:29" pos:end="233:38"><expr pos:start="233:29" pos:end="233:38"><name pos:start="233:29" pos:end="233:38"><name pos:start="233:29" pos:end="233:31">ctx</name><operator pos:start="233:32" pos:end="233:32">.</operator><name pos:start="233:33" pos:end="233:38">opcode</name></name></expr></argument>, <argument pos:start="233:41" pos:end="233:51"><expr pos:start="233:41" pos:end="233:51"><name pos:start="233:41" pos:end="233:47"><name pos:start="233:41" pos:end="233:43">ctx</name><operator pos:start="233:44" pos:end="233:44">.</operator><name pos:start="233:45" pos:end="233:47">nip</name></name> <operator pos:start="233:49" pos:end="233:49">-</operator> <literal type="number" pos:start="233:51" pos:end="233:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="235:19" pos:end="247:17">else <block pos:start="235:24" pos:end="247:17">{<block_content pos:start="237:21" pos:end="245:52">

                    <expr_stmt pos:start="237:21" pos:end="245:52"><expr pos:start="237:21" pos:end="245:51"><call pos:start="237:21" pos:end="245:51"><name pos:start="237:21" pos:end="237:26">printf</name><argument_list pos:start="237:27" pos:end="245:51">(<argument pos:start="237:28" pos:end="239:67"><expr pos:start="237:28" pos:end="239:67"><literal type="string" pos:start="237:28" pos:end="237:60">"invalid bits: %08x for opcode: "</literal>

                           <literal type="string" pos:start="239:28" pos:end="239:56">"%02x -%02x - %02x (%08x) 0x"</literal> <name pos:start="239:58" pos:end="239:62">ADDRX</name> <literal type="string" pos:start="239:64" pos:end="239:67">"\n"</literal></expr></argument>,

                           <argument pos:start="241:28" pos:end="241:54"><expr pos:start="241:28" pos:end="241:54"><name pos:start="241:28" pos:end="241:37"><name pos:start="241:28" pos:end="241:30">ctx</name><operator pos:start="241:31" pos:end="241:31">.</operator><name pos:start="241:32" pos:end="241:37">opcode</name></name> <operator pos:start="241:39" pos:end="241:39">&amp;</operator> <name pos:start="241:41" pos:end="241:54"><name pos:start="241:41" pos:end="241:47">handler</name><operator pos:start="241:48" pos:end="241:49">-&gt;</operator><name pos:start="241:50" pos:end="241:54">inval</name></name></expr></argument>, <argument pos:start="241:57" pos:end="241:72"><expr pos:start="241:57" pos:end="241:72"><call pos:start="241:57" pos:end="241:72"><name pos:start="241:57" pos:end="241:60">opc1</name><argument_list pos:start="241:61" pos:end="241:72">(<argument pos:start="241:62" pos:end="241:71"><expr pos:start="241:62" pos:end="241:71"><name pos:start="241:62" pos:end="241:71"><name pos:start="241:62" pos:end="241:64">ctx</name><operator pos:start="241:65" pos:end="241:65">.</operator><name pos:start="241:66" pos:end="241:71">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="243:28" pos:end="243:43"><expr pos:start="243:28" pos:end="243:43"><call pos:start="243:28" pos:end="243:43"><name pos:start="243:28" pos:end="243:31">opc2</name><argument_list pos:start="243:32" pos:end="243:43">(<argument pos:start="243:33" pos:end="243:42"><expr pos:start="243:33" pos:end="243:42"><name pos:start="243:33" pos:end="243:42"><name pos:start="243:33" pos:end="243:35">ctx</name><operator pos:start="243:36" pos:end="243:36">.</operator><name pos:start="243:37" pos:end="243:42">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="243:46" pos:end="243:61"><expr pos:start="243:46" pos:end="243:61"><call pos:start="243:46" pos:end="243:61"><name pos:start="243:46" pos:end="243:49">opc3</name><argument_list pos:start="243:50" pos:end="243:61">(<argument pos:start="243:51" pos:end="243:60"><expr pos:start="243:51" pos:end="243:60"><name pos:start="243:51" pos:end="243:60"><name pos:start="243:51" pos:end="243:53">ctx</name><operator pos:start="243:54" pos:end="243:54">.</operator><name pos:start="243:55" pos:end="243:60">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="245:28" pos:end="245:37"><expr pos:start="245:28" pos:end="245:37"><name pos:start="245:28" pos:end="245:37"><name pos:start="245:28" pos:end="245:30">ctx</name><operator pos:start="245:31" pos:end="245:31">.</operator><name pos:start="245:32" pos:end="245:37">opcode</name></name></expr></argument>, <argument pos:start="245:40" pos:end="245:50"><expr pos:start="245:40" pos:end="245:50"><name pos:start="245:40" pos:end="245:46"><name pos:start="245:40" pos:end="245:42">ctx</name><operator pos:start="245:43" pos:end="245:43">.</operator><name pos:start="245:44" pos:end="245:46">nip</name></name> <operator pos:start="245:48" pos:end="245:48">-</operator> <literal type="number" pos:start="245:50" pos:end="245:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:32"><expr pos:start="249:17" pos:end="249:31"><call pos:start="249:17" pos:end="249:31"><name pos:start="249:17" pos:end="249:25">RET_INVAL</name><argument_list pos:start="249:26" pos:end="249:31">(<argument pos:start="249:27" pos:end="249:30"><expr pos:start="249:27" pos:end="249:30"><name pos:start="249:27" pos:end="249:30">ctxp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="251:17" pos:end="251:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="257:9" pos:end="260:0"><expr pos:start="257:9" pos:end="257:35"><operator pos:start="257:9" pos:end="257:9">(</operator><operator pos:start="257:10" pos:end="257:10">*</operator><operator pos:start="257:11" pos:end="257:11">(</operator><name pos:start="257:12" pos:end="257:27"><name pos:start="257:12" pos:end="257:18">handler</name><operator pos:start="257:19" pos:end="257:20">-&gt;</operator><name pos:start="257:21" pos:end="257:27">handler</name></name><operator pos:start="257:28" pos:end="257:28">)</operator><operator pos:start="257:29" pos:end="257:29">)</operator><operator pos:start="257:30" pos:end="257:30">(</operator><operator pos:start="257:31" pos:end="257:31">&amp;</operator><name pos:start="257:32" pos:end="257:34">ctx</name><operator pos:start="257:35" pos:end="257:35">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="259:1" pos:end="259:30">#<cpp:directive pos:start="259:2" pos:end="259:3">if</cpp:directive> <expr pos:start="259:5" pos:end="259:30"><call pos:start="259:5" pos:end="259:30"><name pos:start="259:5" pos:end="259:11">defined</name><argument_list pos:start="259:12" pos:end="259:30">(<argument pos:start="259:13" pos:end="259:29"><expr pos:start="259:13" pos:end="259:29"><name pos:start="259:13" pos:end="259:29">DO_PPC_STATISTICS</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="261:9" pos:end="298:0"><expr pos:start="261:9" pos:end="261:24"><name pos:start="261:9" pos:end="261:22"><name pos:start="261:9" pos:end="261:15">handler</name><operator pos:start="261:16" pos:end="261:17">-&gt;</operator><name pos:start="261:18" pos:end="261:22">count</name></name><operator pos:start="261:23" pos:end="261:24">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="263:1" pos:end="263:6">#<cpp:directive pos:start="263:2" pos:end="263:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="265:9" pos:end="265:41">/* Check trace mode exceptions */</comment>

<cpp:if pos:start="267:1" pos:end="267:5">#<cpp:directive pos:start="267:2" pos:end="267:3">if</cpp:directive> <expr pos:start="267:5" pos:end="267:5"><literal type="number" pos:start="267:5" pos:end="267:5">0</literal></expr></cpp:if> <comment type="line" pos:start="267:7" pos:end="267:39">// XXX: buggy on embedded PowerPC</comment>

        if (unlikely((msr_be &amp;&amp; ctx.exception == EXCP_BRANCH) ||

                     <comment type="block" pos:start="271:22" pos:end="279:24">/* Check in single step trace mode

                      * we need to stop except if:

                      * - rfi, trap or syscall

                      * - first instruction of an exception handler

                      */</comment>

                     (msr_se &amp;&amp; (ctx.nip &lt; 0x100 ||

                                 ctx.nip &gt; 0xF00 ||

                                 (ctx.nip &amp; 0xFC) != 0x04) &amp;&amp;

                      ctx.exception != EXCP_SYSCALL &amp;&amp;

                      ctx.exception != EXCP_SYSCALL_USER &amp;&amp;

                      ctx.exception != EXCP_TRAP))) {

            RET_EXCP(ctxp, EXCP_TRACE, 0);

        }

<cpp:endif pos:start="297:1" pos:end="297:6">#<cpp:directive pos:start="297:2" pos:end="297:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="299:9" pos:end="303:11">/* if we reach a page boundary or are single stepping, stop

         * generation

         */</comment>

        <if_stmt pos:start="305:9" pos:end="314:0"><if pos:start="305:9" pos:end="314:0">if <condition pos:start="305:12" pos:end="307:48">(<expr pos:start="305:13" pos:end="307:47"><call pos:start="305:13" pos:end="307:47"><name pos:start="305:13" pos:end="305:20">unlikely</name><argument_list pos:start="305:21" pos:end="307:47">(<argument pos:start="305:22" pos:end="307:46"><expr pos:start="305:22" pos:end="307:46"><operator pos:start="305:22" pos:end="305:22">(</operator><operator pos:start="305:23" pos:end="305:23">(</operator><name pos:start="305:24" pos:end="305:30"><name pos:start="305:24" pos:end="305:26">ctx</name><operator pos:start="305:27" pos:end="305:27">.</operator><name pos:start="305:28" pos:end="305:30">nip</name></name> <operator pos:start="305:32" pos:end="305:32">&amp;</operator> <operator pos:start="305:34" pos:end="305:34">(</operator><name pos:start="305:35" pos:end="305:50">TARGET_PAGE_SIZE</name> <operator pos:start="305:52" pos:end="305:52">-</operator> <literal type="number" pos:start="305:54" pos:end="305:54">1</literal><operator pos:start="305:55" pos:end="305:55">)</operator><operator pos:start="305:56" pos:end="305:56">)</operator> <operator pos:start="305:58" pos:end="305:59">==</operator> <literal type="number" pos:start="305:61" pos:end="305:61">0</literal><operator pos:start="305:62" pos:end="305:62">)</operator> <operator pos:start="305:64" pos:end="305:65">||</operator>

                     <operator pos:start="307:22" pos:end="307:22">(</operator><name pos:start="307:23" pos:end="307:45"><name pos:start="307:23" pos:end="307:25">env</name><operator pos:start="307:26" pos:end="307:27">-&gt;</operator><name pos:start="307:28" pos:end="307:45">singlestep_enabled</name></name><operator pos:start="307:46" pos:end="307:46">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="307:50" pos:end="314:0">{<block_content pos:start="309:13" pos:end="309:18">

            <break pos:start="309:13" pos:end="309:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:if pos:start="313:1" pos:end="313:28">#<cpp:directive pos:start="313:2" pos:end="313:3">if</cpp:directive> <expr pos:start="313:5" pos:end="313:28"><call pos:start="313:5" pos:end="313:28"><name pos:start="313:5" pos:end="313:11">defined</name> <argument_list pos:start="313:13" pos:end="313:28">(<argument pos:start="313:14" pos:end="313:27"><expr pos:start="313:14" pos:end="313:27"><name pos:start="313:14" pos:end="313:27">DO_SINGLE_STEP</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <break pos:start="315:9" pos:end="318:0">break;</break>

<cpp:endif pos:start="317:1" pos:end="317:6">#<cpp:directive pos:start="317:2" pos:end="317:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></while>

    <if_stmt pos:start="321:5" pos:end="333:5"><if pos:start="321:5" pos:end="325:5">if <condition pos:start="321:8" pos:end="321:35">(<expr pos:start="321:9" pos:end="321:34"><name pos:start="321:9" pos:end="321:21"><name pos:start="321:9" pos:end="321:11">ctx</name><operator pos:start="321:12" pos:end="321:12">.</operator><name pos:start="321:13" pos:end="321:21">exception</name></name> <operator pos:start="321:23" pos:end="321:24">==</operator> <name pos:start="321:26" pos:end="321:34">EXCP_NONE</name></expr>)</condition> <block pos:start="321:37" pos:end="325:5">{<block_content pos:start="323:9" pos:end="323:38">

        <expr_stmt pos:start="323:9" pos:end="323:38"><expr pos:start="323:9" pos:end="323:37"><call pos:start="323:9" pos:end="323:37"><name pos:start="323:9" pos:end="323:19">gen_goto_tb</name><argument_list pos:start="323:20" pos:end="323:37">(<argument pos:start="323:21" pos:end="323:24"><expr pos:start="323:21" pos:end="323:24"><operator pos:start="323:21" pos:end="323:21">&amp;</operator><name pos:start="323:22" pos:end="323:24">ctx</name></expr></argument>, <argument pos:start="323:27" pos:end="323:27"><expr pos:start="323:27" pos:end="323:27"><literal type="number" pos:start="323:27" pos:end="323:27">0</literal></expr></argument>, <argument pos:start="323:30" pos:end="323:36"><expr pos:start="323:30" pos:end="323:36"><name pos:start="323:30" pos:end="323:36"><name pos:start="323:30" pos:end="323:32">ctx</name><operator pos:start="323:33" pos:end="323:33">.</operator><name pos:start="323:34" pos:end="323:36">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="325:7" pos:end="333:5">else if <condition pos:start="325:15" pos:end="325:44">(<expr pos:start="325:16" pos:end="325:43"><name pos:start="325:16" pos:end="325:28"><name pos:start="325:16" pos:end="325:18">ctx</name><operator pos:start="325:19" pos:end="325:19">.</operator><name pos:start="325:20" pos:end="325:28">exception</name></name> <operator pos:start="325:30" pos:end="325:31">!=</operator> <name pos:start="325:33" pos:end="325:43">EXCP_BRANCH</name></expr>)</condition> <block pos:start="325:46" pos:end="333:5">{<block_content pos:start="327:9" pos:end="331:25">

        <expr_stmt pos:start="327:9" pos:end="327:26"><expr pos:start="327:9" pos:end="327:25"><call pos:start="327:9" pos:end="327:25"><name pos:start="327:9" pos:end="327:23">gen_op_reset_T0</name><argument_list pos:start="327:24" pos:end="327:25">()</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="329:9" pos:end="329:45">/* Generate the return instruction */</comment>

        <expr_stmt pos:start="331:9" pos:end="331:25"><expr pos:start="331:9" pos:end="331:24"><call pos:start="331:9" pos:end="331:24"><name pos:start="331:9" pos:end="331:22">gen_op_exit_tb</name><argument_list pos:start="331:23" pos:end="331:24">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="335:5" pos:end="335:32"><expr pos:start="335:5" pos:end="335:31"><operator pos:start="335:5" pos:end="335:5">*</operator><name pos:start="335:6" pos:end="335:16">gen_opc_ptr</name> <operator pos:start="335:18" pos:end="335:18">=</operator> <name pos:start="335:20" pos:end="335:31">INDEX_op_end</name></expr>;</expr_stmt>

    <if_stmt pos:start="337:5" pos:end="354:0"><if pos:start="337:5" pos:end="347:5">if <condition pos:start="337:8" pos:end="337:28">(<expr pos:start="337:9" pos:end="337:27"><call pos:start="337:9" pos:end="337:27"><name pos:start="337:9" pos:end="337:16">unlikely</name><argument_list pos:start="337:17" pos:end="337:27">(<argument pos:start="337:18" pos:end="337:26"><expr pos:start="337:18" pos:end="337:26"><name pos:start="337:18" pos:end="337:26">search_pc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="337:30" pos:end="347:5">{<block_content pos:start="339:9" pos:end="345:42">

        <expr_stmt pos:start="339:9" pos:end="339:38"><expr pos:start="339:9" pos:end="339:37"><name pos:start="339:9" pos:end="339:9">j</name> <operator pos:start="339:11" pos:end="339:11">=</operator> <name pos:start="339:13" pos:end="339:23">gen_opc_ptr</name> <operator pos:start="339:25" pos:end="339:25">-</operator> <name pos:start="339:27" pos:end="339:37">gen_opc_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:13"><expr pos:start="341:9" pos:end="341:12"><name pos:start="341:9" pos:end="341:10">lj</name><operator pos:start="341:11" pos:end="341:12">++</operator></expr>;</expr_stmt>

        <while pos:start="343:9" pos:end="345:42">while <condition pos:start="343:15" pos:end="343:23">(<expr pos:start="343:16" pos:end="343:22"><name pos:start="343:16" pos:end="343:17">lj</name> <operator pos:start="343:19" pos:end="343:20">&lt;=</operator> <name pos:start="343:22" pos:end="343:22">j</name></expr>)</condition><block type="pseudo" pos:start="345:13" pos:end="345:42"><block_content pos:start="345:13" pos:end="345:42">

            <expr_stmt pos:start="345:13" pos:end="345:42"><expr pos:start="345:13" pos:end="345:41"><name pos:start="345:13" pos:end="345:37"><name pos:start="345:13" pos:end="345:31">gen_opc_instr_start</name><index pos:start="345:32" pos:end="345:37">[<expr pos:start="345:33" pos:end="345:36"><name pos:start="345:33" pos:end="345:34">lj</name><operator pos:start="345:35" pos:end="345:36">++</operator></expr>]</index></name> <operator pos:start="345:39" pos:end="345:39">=</operator> <literal type="number" pos:start="345:41" pos:end="345:41">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if> <else pos:start="347:7" pos:end="354:0">else <block pos:start="347:12" pos:end="354:0">{<block_content pos:start="349:9" pos:end="349:38">

        <expr_stmt pos:start="349:9" pos:end="349:38"><expr pos:start="349:9" pos:end="349:37"><name pos:start="349:9" pos:end="349:16"><name pos:start="349:9" pos:end="349:10">tb</name><operator pos:start="349:11" pos:end="349:12">-&gt;</operator><name pos:start="349:13" pos:end="349:16">size</name></name> <operator pos:start="349:18" pos:end="349:18">=</operator> <name pos:start="349:20" pos:end="349:26"><name pos:start="349:20" pos:end="349:22">ctx</name><operator pos:start="349:23" pos:end="349:23">.</operator><name pos:start="349:24" pos:end="349:26">nip</name></name> <operator pos:start="349:28" pos:end="349:28">-</operator> <name pos:start="349:30" pos:end="349:37">pc_start</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:if pos:start="353:1" pos:end="353:24">#<cpp:directive pos:start="353:2" pos:end="353:3">if</cpp:directive> <expr pos:start="353:5" pos:end="353:24"><call pos:start="353:5" pos:end="353:24"><name pos:start="353:5" pos:end="353:11">defined</name><argument_list pos:start="353:12" pos:end="353:24">(<argument pos:start="353:13" pos:end="353:23"><expr pos:start="353:13" pos:end="353:23"><name pos:start="353:13" pos:end="353:23">DEBUG_DISAS</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="355:5" pos:end="361:5"><if pos:start="355:5" pos:end="361:5">if <condition pos:start="355:8" pos:end="355:34">(<expr pos:start="355:9" pos:end="355:33"><name pos:start="355:9" pos:end="355:16">loglevel</name> <operator pos:start="355:18" pos:end="355:18">&amp;</operator> <name pos:start="355:20" pos:end="355:33">CPU_LOG_TB_CPU</name></expr>)</condition> <block pos:start="355:36" pos:end="361:5">{<block_content pos:start="357:9" pos:end="359:49">

        <expr_stmt pos:start="357:9" pos:end="357:73"><expr pos:start="357:9" pos:end="357:72"><call pos:start="357:9" pos:end="357:72"><name pos:start="357:9" pos:end="357:15">fprintf</name><argument_list pos:start="357:16" pos:end="357:72">(<argument pos:start="357:17" pos:end="357:23"><expr pos:start="357:17" pos:end="357:23"><name pos:start="357:17" pos:end="357:23">logfile</name></expr></argument>, <argument pos:start="357:26" pos:end="357:56"><expr pos:start="357:26" pos:end="357:56"><literal type="string" pos:start="357:26" pos:end="357:56">"---------------- excp: %04x\n"</literal></expr></argument>, <argument pos:start="357:59" pos:end="357:71"><expr pos:start="357:59" pos:end="357:71"><name pos:start="357:59" pos:end="357:71"><name pos:start="357:59" pos:end="357:61">ctx</name><operator pos:start="357:62" pos:end="357:62">.</operator><name pos:start="357:63" pos:end="357:71">exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="359:9" pos:end="359:49"><expr pos:start="359:9" pos:end="359:48"><call pos:start="359:9" pos:end="359:48"><name pos:start="359:9" pos:end="359:22">cpu_dump_state</name><argument_list pos:start="359:23" pos:end="359:48">(<argument pos:start="359:24" pos:end="359:26"><expr pos:start="359:24" pos:end="359:26"><name pos:start="359:24" pos:end="359:26">env</name></expr></argument>, <argument pos:start="359:29" pos:end="359:35"><expr pos:start="359:29" pos:end="359:35"><name pos:start="359:29" pos:end="359:35">logfile</name></expr></argument>, <argument pos:start="359:38" pos:end="359:44"><expr pos:start="359:38" pos:end="359:44"><name pos:start="359:38" pos:end="359:44">fprintf</name></expr></argument>, <argument pos:start="359:47" pos:end="359:47"><expr pos:start="359:47" pos:end="359:47"><literal type="number" pos:start="359:47" pos:end="359:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="363:5" pos:end="377:5"><if pos:start="363:5" pos:end="377:5">if <condition pos:start="363:8" pos:end="363:37">(<expr pos:start="363:9" pos:end="363:36"><name pos:start="363:9" pos:end="363:16">loglevel</name> <operator pos:start="363:18" pos:end="363:18">&amp;</operator> <name pos:start="363:20" pos:end="363:36">CPU_LOG_TB_IN_ASM</name></expr>)</condition> <block pos:start="363:39" pos:end="377:5">{<block_content pos:start="365:9" pos:end="375:31">

        <decl_stmt pos:start="365:9" pos:end="365:18"><decl pos:start="365:9" pos:end="365:17"><type pos:start="365:9" pos:end="365:11"><name pos:start="365:9" pos:end="365:11">int</name></type> <name pos:start="365:13" pos:end="365:17">flags</name></decl>;</decl_stmt>

        <expr_stmt pos:start="367:9" pos:end="367:30"><expr pos:start="367:9" pos:end="367:29"><name pos:start="367:9" pos:end="367:13">flags</name> <operator pos:start="367:15" pos:end="367:15">=</operator> <name pos:start="367:17" pos:end="367:29"><name pos:start="367:17" pos:end="367:19">env</name><operator pos:start="367:20" pos:end="367:21">-&gt;</operator><name pos:start="367:22" pos:end="367:29">bfd_mach</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:30"><expr pos:start="369:9" pos:end="369:29"><name pos:start="369:9" pos:end="369:13">flags</name> <operator pos:start="369:15" pos:end="369:16">|=</operator> <name pos:start="369:18" pos:end="369:23">msr_le</name> <operator pos:start="369:25" pos:end="369:26">&lt;&lt;</operator> <literal type="number" pos:start="369:28" pos:end="369:29">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:62"><expr pos:start="371:9" pos:end="371:61"><call pos:start="371:9" pos:end="371:61"><name pos:start="371:9" pos:end="371:15">fprintf</name><argument_list pos:start="371:16" pos:end="371:61">(<argument pos:start="371:17" pos:end="371:23"><expr pos:start="371:17" pos:end="371:23"><name pos:start="371:17" pos:end="371:23">logfile</name></expr></argument>, <argument pos:start="371:26" pos:end="371:35"><expr pos:start="371:26" pos:end="371:35"><literal type="string" pos:start="371:26" pos:end="371:35">"IN: %s\n"</literal></expr></argument>, <argument pos:start="371:38" pos:end="371:60"><expr pos:start="371:38" pos:end="371:60"><call pos:start="371:38" pos:end="371:60"><name pos:start="371:38" pos:end="371:50">lookup_symbol</name><argument_list pos:start="371:51" pos:end="371:60">(<argument pos:start="371:52" pos:end="371:59"><expr pos:start="371:52" pos:end="371:59"><name pos:start="371:52" pos:end="371:59">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="373:9" pos:end="373:67"><expr pos:start="373:9" pos:end="373:66"><call pos:start="373:9" pos:end="373:66"><name pos:start="373:9" pos:end="373:20">target_disas</name><argument_list pos:start="373:21" pos:end="373:66">(<argument pos:start="373:22" pos:end="373:28"><expr pos:start="373:22" pos:end="373:28"><name pos:start="373:22" pos:end="373:28">logfile</name></expr></argument>, <argument pos:start="373:31" pos:end="373:38"><expr pos:start="373:31" pos:end="373:38"><name pos:start="373:31" pos:end="373:38">pc_start</name></expr></argument>, <argument pos:start="373:41" pos:end="373:58"><expr pos:start="373:41" pos:end="373:58"><name pos:start="373:41" pos:end="373:47"><name pos:start="373:41" pos:end="373:43">ctx</name><operator pos:start="373:44" pos:end="373:44">.</operator><name pos:start="373:45" pos:end="373:47">nip</name></name> <operator pos:start="373:49" pos:end="373:49">-</operator> <name pos:start="373:51" pos:end="373:58">pc_start</name></expr></argument>, <argument pos:start="373:61" pos:end="373:65"><expr pos:start="373:61" pos:end="373:65"><name pos:start="373:61" pos:end="373:65">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:31"><expr pos:start="375:9" pos:end="375:30"><call pos:start="375:9" pos:end="375:30"><name pos:start="375:9" pos:end="375:15">fprintf</name><argument_list pos:start="375:16" pos:end="375:30">(<argument pos:start="375:17" pos:end="375:23"><expr pos:start="375:17" pos:end="375:23"><name pos:start="375:17" pos:end="375:23">logfile</name></expr></argument>, <argument pos:start="375:26" pos:end="375:29"><expr pos:start="375:26" pos:end="375:29"><literal type="string" pos:start="375:26" pos:end="375:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="379:5" pos:end="390:0"><if pos:start="379:5" pos:end="390:0">if <condition pos:start="379:8" pos:end="379:33">(<expr pos:start="379:9" pos:end="379:32"><name pos:start="379:9" pos:end="379:16">loglevel</name> <operator pos:start="379:18" pos:end="379:18">&amp;</operator> <name pos:start="379:20" pos:end="379:32">CPU_LOG_TB_OP</name></expr>)</condition> <block pos:start="379:35" pos:end="390:0">{<block_content pos:start="381:9" pos:end="385:31">

        <expr_stmt pos:start="381:9" pos:end="381:34"><expr pos:start="381:9" pos:end="381:33"><call pos:start="381:9" pos:end="381:33"><name pos:start="381:9" pos:end="381:15">fprintf</name><argument_list pos:start="381:16" pos:end="381:33">(<argument pos:start="381:17" pos:end="381:23"><expr pos:start="381:17" pos:end="381:23"><name pos:start="381:17" pos:end="381:23">logfile</name></expr></argument>, <argument pos:start="381:26" pos:end="381:32"><expr pos:start="381:26" pos:end="381:32"><literal type="string" pos:start="381:26" pos:end="381:32">"OP:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:47"><expr pos:start="383:9" pos:end="383:46"><call pos:start="383:9" pos:end="383:46"><name pos:start="383:9" pos:end="383:16">dump_ops</name><argument_list pos:start="383:17" pos:end="383:46">(<argument pos:start="383:18" pos:end="383:28"><expr pos:start="383:18" pos:end="383:28"><name pos:start="383:18" pos:end="383:28">gen_opc_buf</name></expr></argument>, <argument pos:start="383:31" pos:end="383:45"><expr pos:start="383:31" pos:end="383:45"><name pos:start="383:31" pos:end="383:45">gen_opparam_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:31"><expr pos:start="385:9" pos:end="385:30"><call pos:start="385:9" pos:end="385:30"><name pos:start="385:9" pos:end="385:15">fprintf</name><argument_list pos:start="385:16" pos:end="385:30">(<argument pos:start="385:17" pos:end="385:23"><expr pos:start="385:17" pos:end="385:23"><name pos:start="385:17" pos:end="385:23">logfile</name></expr></argument>, <argument pos:start="385:26" pos:end="385:29"><expr pos:start="385:26" pos:end="385:29"><literal type="string" pos:start="385:26" pos:end="385:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="389:1" pos:end="389:6">#<cpp:directive pos:start="389:2" pos:end="389:6">endif</cpp:directive></cpp:endif>

    <return pos:start="391:5" pos:end="391:13">return <expr pos:start="391:12" pos:end="391:12"><literal type="number" pos:start="391:12" pos:end="391:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
