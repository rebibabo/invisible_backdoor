<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10558.c" pos:tabs="8"><function pos:start="1:1" pos:end="363:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:8">main</name> <parameter_list pos:start="1:10" pos:end="1:32">(<parameter pos:start="1:11" pos:end="1:18"><decl pos:start="1:11" pos:end="1:18"><type pos:start="1:11" pos:end="1:18"><name pos:start="1:11" pos:end="1:13">int</name></type> <name pos:start="1:15" pos:end="1:18">argc</name></decl></parameter>, <parameter pos:start="1:21" pos:end="1:31"><decl pos:start="1:21" pos:end="1:31"><type pos:start="1:21" pos:end="1:31"><name pos:start="1:21" pos:end="1:24">char</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier><modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:31">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="363:1">{<block_content pos:start="5:5" pos:end="361:19">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:26">got_frame</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="35:5"><if pos:start="9:5" pos:end="35:5">if <condition pos:start="9:8" pos:end="9:31">(<expr pos:start="9:9" pos:end="9:30"><name pos:start="9:9" pos:end="9:12">argc</name> <operator pos:start="9:14" pos:end="9:15">!=</operator> <literal type="number" pos:start="9:17" pos:end="9:17">4</literal> <operator pos:start="9:19" pos:end="9:20">&amp;&amp;</operator> <name pos:start="9:22" pos:end="9:25">argc</name> <operator pos:start="9:27" pos:end="9:28">!=</operator> <literal type="number" pos:start="9:30" pos:end="9:30">5</literal></expr>)</condition> <block pos:start="9:33" pos:end="35:5">{<block_content pos:start="11:9" pos:end="33:16">

        <expr_stmt pos:start="11:9" pos:end="31:31"><expr pos:start="11:9" pos:end="31:30"><call pos:start="11:9" pos:end="31:30"><name pos:start="11:9" pos:end="11:15">fprintf</name><argument_list pos:start="11:16" pos:end="31:30">(<argument pos:start="11:17" pos:end="11:22"><expr pos:start="11:17" pos:end="11:22"><name pos:start="11:17" pos:end="11:22">stderr</name></expr></argument>, <argument pos:start="11:25" pos:end="31:20"><expr pos:start="11:25" pos:end="31:20"><literal type="string" pos:start="11:25" pos:end="11:82">"usage: %s [-refcount=&lt;old|new_norefcount|new_refcount&gt;] "</literal>

                <literal type="string" pos:start="13:17" pos:end="13:66">"input_file video_output_file audio_output_file\n"</literal>

                <literal type="string" pos:start="15:17" pos:end="15:86">"API example program to show how to read frames from an input file.\n"</literal>

                <literal type="string" pos:start="17:17" pos:end="17:91">"This program reads frames from a file, decodes them, and writes decoded\n"</literal>

                <literal type="string" pos:start="19:17" pos:end="19:88">"video frames to a rawvideo file named video_output_file, and decoded\n"</literal>

                <literal type="string" pos:start="21:17" pos:end="21:78">"audio frames to a rawaudio file named audio_output_file.\n\n"</literal>

                <literal type="string" pos:start="23:17" pos:end="23:77">"If the -refcount option is specified, the program use the\n"</literal>

                <literal type="string" pos:start="25:17" pos:end="25:82">"reference counting frame system which allows keeping a copy of\n"</literal>

                <literal type="string" pos:start="27:17" pos:end="27:82">"the data for longer than one decode call. If unset, it's using\n"</literal>

                <literal type="string" pos:start="29:17" pos:end="29:43">"the classic old method.\n"</literal>

                <literal type="string" pos:start="31:17" pos:end="31:20">"\n"</literal></expr></argument>, <argument pos:start="31:23" pos:end="31:29"><expr pos:start="31:23" pos:end="31:29"><name pos:start="31:23" pos:end="31:29"><name pos:start="31:23" pos:end="31:26">argv</name><index pos:start="31:27" pos:end="31:29">[<expr pos:start="31:28" pos:end="31:28"><literal type="number" pos:start="31:28" pos:end="31:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:15"><call pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:12">exit</name><argument_list pos:start="33:13" pos:end="33:15">(<argument pos:start="33:14" pos:end="33:14"><expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="57:5"><if pos:start="37:5" pos:end="57:5">if <condition pos:start="37:8" pos:end="37:18">(<expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:12">argc</name> <operator pos:start="37:14" pos:end="37:15">==</operator> <literal type="number" pos:start="37:17" pos:end="37:17">5</literal></expr>)</condition> <block pos:start="37:20" pos:end="57:5">{<block_content pos:start="39:9" pos:end="55:15">

        <decl_stmt pos:start="39:9" pos:end="39:58"><decl pos:start="39:9" pos:end="39:57"><type pos:start="39:9" pos:end="39:20"><specifier pos:start="39:9" pos:end="39:13">const</specifier> <name pos:start="39:15" pos:end="39:18">char</name> <modifier pos:start="39:20" pos:end="39:20">*</modifier></type><name pos:start="39:21" pos:end="39:24">mode</name> <init pos:start="39:26" pos:end="39:57">= <expr pos:start="39:28" pos:end="39:57"><name pos:start="39:28" pos:end="39:34"><name pos:start="39:28" pos:end="39:31">argv</name><index pos:start="39:32" pos:end="39:34">[<expr pos:start="39:33" pos:end="39:33"><literal type="number" pos:start="39:33" pos:end="39:33">1</literal></expr>]</index></name> <operator pos:start="39:36" pos:end="39:36">+</operator> <call pos:start="39:38" pos:end="39:57"><name pos:start="39:38" pos:end="39:43">strlen</name><argument_list pos:start="39:44" pos:end="39:57">(<argument pos:start="39:45" pos:end="39:56"><expr pos:start="39:45" pos:end="39:56"><literal type="string" pos:start="39:45" pos:end="39:56">"-refcount="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="41:9" pos:end="53:9"><if pos:start="41:9" pos:end="41:74">if      <condition pos:start="41:17" pos:end="41:38">(<expr pos:start="41:18" pos:end="41:37"><operator pos:start="41:18" pos:end="41:18">!</operator><call pos:start="41:19" pos:end="41:37"><name pos:start="41:19" pos:end="41:24">strcmp</name><argument_list pos:start="41:25" pos:end="41:37">(<argument pos:start="41:26" pos:end="41:29"><expr pos:start="41:26" pos:end="41:29"><name pos:start="41:26" pos:end="41:29">mode</name></expr></argument>, <argument pos:start="41:32" pos:end="41:36"><expr pos:start="41:32" pos:end="41:36"><literal type="string" pos:start="41:32" pos:end="41:36">"old"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="41:51" pos:end="41:74"><block_content pos:start="41:51" pos:end="41:74">            <expr_stmt pos:start="41:51" pos:end="41:74"><expr pos:start="41:51" pos:end="41:73"><name pos:start="41:51" pos:end="41:58">api_mode</name> <operator pos:start="41:60" pos:end="41:60">=</operator> <name pos:start="41:62" pos:end="41:73">API_MODE_OLD</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="43:9" pos:end="43:91">else if <condition pos:start="43:17" pos:end="43:49">(<expr pos:start="43:18" pos:end="43:48"><operator pos:start="43:18" pos:end="43:18">!</operator><call pos:start="43:19" pos:end="43:48"><name pos:start="43:19" pos:end="43:24">strcmp</name><argument_list pos:start="43:25" pos:end="43:48">(<argument pos:start="43:26" pos:end="43:29"><expr pos:start="43:26" pos:end="43:29"><name pos:start="43:26" pos:end="43:29">mode</name></expr></argument>, <argument pos:start="43:32" pos:end="43:47"><expr pos:start="43:32" pos:end="43:47"><literal type="string" pos:start="43:32" pos:end="43:47">"new_norefcount"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:51" pos:end="43:91"><block_content pos:start="43:51" pos:end="43:91"> <expr_stmt pos:start="43:51" pos:end="43:91"><expr pos:start="43:51" pos:end="43:90"><name pos:start="43:51" pos:end="43:58">api_mode</name> <operator pos:start="43:60" pos:end="43:60">=</operator> <name pos:start="43:62" pos:end="43:90">API_MODE_NEW_API_NO_REF_COUNT</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="45:9" pos:end="45:88">else if <condition pos:start="45:17" pos:end="45:47">(<expr pos:start="45:18" pos:end="45:46"><operator pos:start="45:18" pos:end="45:18">!</operator><call pos:start="45:19" pos:end="45:46"><name pos:start="45:19" pos:end="45:24">strcmp</name><argument_list pos:start="45:25" pos:end="45:46">(<argument pos:start="45:26" pos:end="45:29"><expr pos:start="45:26" pos:end="45:29"><name pos:start="45:26" pos:end="45:29">mode</name></expr></argument>, <argument pos:start="45:32" pos:end="45:45"><expr pos:start="45:32" pos:end="45:45"><literal type="string" pos:start="45:32" pos:end="45:45">"new_refcount"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="45:51" pos:end="45:88"><block_content pos:start="45:51" pos:end="45:88">   <expr_stmt pos:start="45:51" pos:end="45:88"><expr pos:start="45:51" pos:end="45:87"><name pos:start="45:51" pos:end="45:58">api_mode</name> <operator pos:start="45:60" pos:end="45:60">=</operator> <name pos:start="45:62" pos:end="45:87">API_MODE_NEW_API_REF_COUNT</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="47:9" pos:end="53:9">else <block pos:start="47:14" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:20">

            <expr_stmt pos:start="49:13" pos:end="49:56"><expr pos:start="49:13" pos:end="49:55"><call pos:start="49:13" pos:end="49:55"><name pos:start="49:13" pos:end="49:19">fprintf</name><argument_list pos:start="49:20" pos:end="49:55">(<argument pos:start="49:21" pos:end="49:26"><expr pos:start="49:21" pos:end="49:26"><name pos:start="49:21" pos:end="49:26">stderr</name></expr></argument>, <argument pos:start="49:29" pos:end="49:48"><expr pos:start="49:29" pos:end="49:48"><literal type="string" pos:start="49:29" pos:end="49:48">"unknow mode '%s'\n"</literal></expr></argument>, <argument pos:start="49:51" pos:end="49:54"><expr pos:start="49:51" pos:end="49:54"><name pos:start="49:51" pos:end="49:54">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:20"><expr pos:start="51:13" pos:end="51:19"><call pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:16">exit</name><argument_list pos:start="51:17" pos:end="51:19">(<argument pos:start="51:18" pos:end="51:18"><expr pos:start="51:18" pos:end="51:18"><literal type="number" pos:start="51:18" pos:end="51:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:15"><expr pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:12">argv</name><operator pos:start="55:13" pos:end="55:14">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:27"><expr pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:16">src_filename</name> <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:26"><name pos:start="59:20" pos:end="59:23">argv</name><index pos:start="59:24" pos:end="59:26">[<expr pos:start="59:25" pos:end="59:25"><literal type="number" pos:start="59:25" pos:end="59:25">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:33"><expr pos:start="61:5" pos:end="61:32"><name pos:start="61:5" pos:end="61:22">video_dst_filename</name> <operator pos:start="61:24" pos:end="61:24">=</operator> <name pos:start="61:26" pos:end="61:32"><name pos:start="61:26" pos:end="61:29">argv</name><index pos:start="61:30" pos:end="61:32">[<expr pos:start="61:31" pos:end="61:31"><literal type="number" pos:start="61:31" pos:end="61:31">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:33"><expr pos:start="63:5" pos:end="63:32"><name pos:start="63:5" pos:end="63:22">audio_dst_filename</name> <operator pos:start="63:24" pos:end="63:24">=</operator> <name pos:start="63:26" pos:end="63:32"><name pos:start="63:26" pos:end="63:29">argv</name><index pos:start="63:30" pos:end="63:32">[<expr pos:start="63:31" pos:end="63:31"><literal type="number" pos:start="63:31" pos:end="63:31">3</literal></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:41">/* register all formats and codecs */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:22"><expr pos:start="69:5" pos:end="69:21"><call pos:start="69:5" pos:end="69:21"><name pos:start="69:5" pos:end="69:19">av_register_all</name><argument_list pos:start="69:20" pos:end="69:21">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:54">/* open input file, and allocate format context */</comment>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:68">(<expr pos:start="75:9" pos:end="75:67"><call pos:start="75:9" pos:end="75:63"><name pos:start="75:9" pos:end="75:27">avformat_open_input</name><argument_list pos:start="75:28" pos:end="75:63">(<argument pos:start="75:29" pos:end="75:36"><expr pos:start="75:29" pos:end="75:36"><operator pos:start="75:29" pos:end="75:29">&amp;</operator><name pos:start="75:30" pos:end="75:36">fmt_ctx</name></expr></argument>, <argument pos:start="75:39" pos:end="75:50"><expr pos:start="75:39" pos:end="75:50"><name pos:start="75:39" pos:end="75:50">src_filename</name></expr></argument>, <argument pos:start="75:53" pos:end="75:56"><expr pos:start="75:53" pos:end="75:56"><name pos:start="75:53" pos:end="75:56">NULL</name></expr></argument>, <argument pos:start="75:59" pos:end="75:62"><expr pos:start="75:59" pos:end="75:62"><name pos:start="75:59" pos:end="75:62">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="75:65" pos:end="75:65">&lt;</operator> <literal type="number" pos:start="75:67" pos:end="75:67">0</literal></expr>)</condition> <block pos:start="75:70" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:16">

        <expr_stmt pos:start="77:9" pos:end="77:73"><expr pos:start="77:9" pos:end="77:72"><call pos:start="77:9" pos:end="77:72"><name pos:start="77:9" pos:end="77:15">fprintf</name><argument_list pos:start="77:16" pos:end="77:72">(<argument pos:start="77:17" pos:end="77:22"><expr pos:start="77:17" pos:end="77:22"><name pos:start="77:17" pos:end="77:22">stderr</name></expr></argument>, <argument pos:start="77:25" pos:end="77:57"><expr pos:start="77:25" pos:end="77:57"><literal type="string" pos:start="77:25" pos:end="77:57">"Could not open source file %s\n"</literal></expr></argument>, <argument pos:start="77:60" pos:end="77:71"><expr pos:start="77:60" pos:end="77:71"><name pos:start="77:60" pos:end="77:71">src_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:16"><expr pos:start="79:9" pos:end="79:15"><call pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:12">exit</name><argument_list pos:start="79:13" pos:end="79:15">(<argument pos:start="79:14" pos:end="79:14"><expr pos:start="79:14" pos:end="79:14"><literal type="number" pos:start="79:14" pos:end="79:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:37">/* retrieve stream information */</comment>

    <if_stmt pos:start="87:5" pos:end="93:5"><if pos:start="87:5" pos:end="93:5">if <condition pos:start="87:8" pos:end="87:53">(<expr pos:start="87:9" pos:end="87:52"><call pos:start="87:9" pos:end="87:48"><name pos:start="87:9" pos:end="87:33">avformat_find_stream_info</name><argument_list pos:start="87:34" pos:end="87:48">(<argument pos:start="87:35" pos:end="87:41"><expr pos:start="87:35" pos:end="87:41"><name pos:start="87:35" pos:end="87:41">fmt_ctx</name></expr></argument>, <argument pos:start="87:44" pos:end="87:47"><expr pos:start="87:44" pos:end="87:47"><name pos:start="87:44" pos:end="87:47">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="87:50" pos:end="87:50">&lt;</operator> <literal type="number" pos:start="87:52" pos:end="87:52">0</literal></expr>)</condition> <block pos:start="87:55" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:16">

        <expr_stmt pos:start="89:9" pos:end="89:63"><expr pos:start="89:9" pos:end="89:62"><call pos:start="89:9" pos:end="89:62"><name pos:start="89:9" pos:end="89:15">fprintf</name><argument_list pos:start="89:16" pos:end="89:62">(<argument pos:start="89:17" pos:end="89:22"><expr pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:22">stderr</name></expr></argument>, <argument pos:start="89:25" pos:end="89:61"><expr pos:start="89:25" pos:end="89:61"><literal type="string" pos:start="89:25" pos:end="89:61">"Could not find stream information\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:16"><expr pos:start="91:9" pos:end="91:15"><call pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:12">exit</name><argument_list pos:start="91:13" pos:end="91:15">(<argument pos:start="91:14" pos:end="91:14"><expr pos:start="91:14" pos:end="91:14"><literal type="number" pos:start="91:14" pos:end="91:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="137:5"><if pos:start="97:5" pos:end="137:5">if <condition pos:start="97:8" pos:end="97:80">(<expr pos:start="97:9" pos:end="97:79"><call pos:start="97:9" pos:end="97:74"><name pos:start="97:9" pos:end="97:26">open_codec_context</name><argument_list pos:start="97:27" pos:end="97:74">(<argument pos:start="97:28" pos:end="97:44"><expr pos:start="97:28" pos:end="97:44"><operator pos:start="97:28" pos:end="97:28">&amp;</operator><name pos:start="97:29" pos:end="97:44">video_stream_idx</name></expr></argument>, <argument pos:start="97:47" pos:end="97:53"><expr pos:start="97:47" pos:end="97:53"><name pos:start="97:47" pos:end="97:53">fmt_ctx</name></expr></argument>, <argument pos:start="97:56" pos:end="97:73"><expr pos:start="97:56" pos:end="97:73"><name pos:start="97:56" pos:end="97:73">AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call> <operator pos:start="97:76" pos:end="97:77">&gt;=</operator> <literal type="number" pos:start="97:79" pos:end="97:79">0</literal></expr>)</condition> <block pos:start="97:82" pos:end="137:5">{<block_content pos:start="99:9" pos:end="135:32">

        <expr_stmt pos:start="99:9" pos:end="99:58"><expr pos:start="99:9" pos:end="99:57"><name pos:start="99:9" pos:end="99:20">video_stream</name> <operator pos:start="99:22" pos:end="99:22">=</operator> <name pos:start="99:24" pos:end="99:57"><name pos:start="99:24" pos:end="99:30">fmt_ctx</name><operator pos:start="99:31" pos:end="99:32">-&gt;</operator><name pos:start="99:33" pos:end="99:39">streams</name><index pos:start="99:40" pos:end="99:57">[<expr pos:start="99:41" pos:end="99:56"><name pos:start="99:41" pos:end="99:56">video_stream_idx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:44"><expr pos:start="101:9" pos:end="101:43"><name pos:start="101:9" pos:end="101:21">video_dec_ctx</name> <operator pos:start="101:23" pos:end="101:23">=</operator> <name pos:start="101:25" pos:end="101:43"><name pos:start="101:25" pos:end="101:36">video_stream</name><operator pos:start="101:37" pos:end="101:38">-&gt;</operator><name pos:start="101:39" pos:end="101:43">codec</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:57"><expr pos:start="105:9" pos:end="105:56"><name pos:start="105:9" pos:end="105:22">video_dst_file</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <call pos:start="105:26" pos:end="105:56"><name pos:start="105:26" pos:end="105:30">fopen</name><argument_list pos:start="105:31" pos:end="105:56">(<argument pos:start="105:32" pos:end="105:49"><expr pos:start="105:32" pos:end="105:49"><name pos:start="105:32" pos:end="105:49">video_dst_filename</name></expr></argument>, <argument pos:start="105:52" pos:end="105:55"><expr pos:start="105:52" pos:end="105:55"><literal type="string" pos:start="105:52" pos:end="105:55">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="115:9"><if pos:start="107:9" pos:end="115:9">if <condition pos:start="107:12" pos:end="107:28">(<expr pos:start="107:13" pos:end="107:27"><operator pos:start="107:13" pos:end="107:13">!</operator><name pos:start="107:14" pos:end="107:27">video_dst_file</name></expr>)</condition> <block pos:start="107:30" pos:end="115:9">{<block_content pos:start="109:13" pos:end="113:21">

            <expr_stmt pos:start="109:13" pos:end="109:88"><expr pos:start="109:13" pos:end="109:87"><call pos:start="109:13" pos:end="109:87"><name pos:start="109:13" pos:end="109:19">fprintf</name><argument_list pos:start="109:20" pos:end="109:87">(<argument pos:start="109:21" pos:end="109:26"><expr pos:start="109:21" pos:end="109:26"><name pos:start="109:21" pos:end="109:26">stderr</name></expr></argument>, <argument pos:start="109:29" pos:end="109:66"><expr pos:start="109:29" pos:end="109:66"><literal type="string" pos:start="109:29" pos:end="109:66">"Could not open destination file %s\n"</literal></expr></argument>, <argument pos:start="109:69" pos:end="109:86"><expr pos:start="109:69" pos:end="109:86"><name pos:start="109:69" pos:end="109:86">video_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:20"><expr pos:start="111:13" pos:end="111:19"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <literal type="number" pos:start="111:19" pos:end="111:19">1</literal></expr>;</expr_stmt>

            <goto pos:start="113:13" pos:end="113:21">goto <name pos:start="113:18" pos:end="113:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="119:9" pos:end="119:64">/* allocate image where the decoded image will be put */</comment>

        <expr_stmt pos:start="121:9" pos:end="125:56"><expr pos:start="121:9" pos:end="125:55"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <call pos:start="121:15" pos:end="125:55"><name pos:start="121:15" pos:end="121:28">av_image_alloc</name><argument_list pos:start="121:29" pos:end="125:55">(<argument pos:start="121:30" pos:end="121:43"><expr pos:start="121:30" pos:end="121:43"><name pos:start="121:30" pos:end="121:43">video_dst_data</name></expr></argument>, <argument pos:start="121:46" pos:end="121:63"><expr pos:start="121:46" pos:end="121:63"><name pos:start="121:46" pos:end="121:63">video_dst_linesize</name></expr></argument>,

                             <argument pos:start="123:30" pos:end="123:49"><expr pos:start="123:30" pos:end="123:49"><name pos:start="123:30" pos:end="123:49"><name pos:start="123:30" pos:end="123:42">video_dec_ctx</name><operator pos:start="123:43" pos:end="123:44">-&gt;</operator><name pos:start="123:45" pos:end="123:49">width</name></name></expr></argument>, <argument pos:start="123:52" pos:end="123:72"><expr pos:start="123:52" pos:end="123:72"><name pos:start="123:52" pos:end="123:72"><name pos:start="123:52" pos:end="123:64">video_dec_ctx</name><operator pos:start="123:65" pos:end="123:66">-&gt;</operator><name pos:start="123:67" pos:end="123:72">height</name></name></expr></argument>,

                             <argument pos:start="125:30" pos:end="125:51"><expr pos:start="125:30" pos:end="125:51"><name pos:start="125:30" pos:end="125:51"><name pos:start="125:30" pos:end="125:42">video_dec_ctx</name><operator pos:start="125:43" pos:end="125:44">-&gt;</operator><name pos:start="125:45" pos:end="125:51">pix_fmt</name></name></expr></argument>, <argument pos:start="125:54" pos:end="125:54"><expr pos:start="125:54" pos:end="125:54"><literal type="number" pos:start="125:54" pos:end="125:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:20">(<expr pos:start="127:13" pos:end="127:19"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:17">&lt;</operator> <literal type="number" pos:start="127:19" pos:end="127:19">0</literal></expr>)</condition> <block pos:start="127:22" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:21">

            <expr_stmt pos:start="129:13" pos:end="129:69"><expr pos:start="129:13" pos:end="129:68"><call pos:start="129:13" pos:end="129:68"><name pos:start="129:13" pos:end="129:19">fprintf</name><argument_list pos:start="129:20" pos:end="129:68">(<argument pos:start="129:21" pos:end="129:26"><expr pos:start="129:21" pos:end="129:26"><name pos:start="129:21" pos:end="129:26">stderr</name></expr></argument>, <argument pos:start="129:29" pos:end="129:67"><expr pos:start="129:29" pos:end="129:67"><literal type="string" pos:start="129:29" pos:end="129:67">"Could not allocate raw video buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="131:13" pos:end="131:21">goto <name pos:start="131:18" pos:end="131:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:32"><expr pos:start="135:9" pos:end="135:31"><name pos:start="135:9" pos:end="135:25">video_dst_bufsize</name> <operator pos:start="135:27" pos:end="135:27">=</operator> <name pos:start="135:29" pos:end="135:31">ret</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="141:5" pos:end="159:5"><if pos:start="141:5" pos:end="159:5">if <condition pos:start="141:8" pos:end="141:80">(<expr pos:start="141:9" pos:end="141:79"><call pos:start="141:9" pos:end="141:74"><name pos:start="141:9" pos:end="141:26">open_codec_context</name><argument_list pos:start="141:27" pos:end="141:74">(<argument pos:start="141:28" pos:end="141:44"><expr pos:start="141:28" pos:end="141:44"><operator pos:start="141:28" pos:end="141:28">&amp;</operator><name pos:start="141:29" pos:end="141:44">audio_stream_idx</name></expr></argument>, <argument pos:start="141:47" pos:end="141:53"><expr pos:start="141:47" pos:end="141:53"><name pos:start="141:47" pos:end="141:53">fmt_ctx</name></expr></argument>, <argument pos:start="141:56" pos:end="141:73"><expr pos:start="141:56" pos:end="141:73"><name pos:start="141:56" pos:end="141:73">AVMEDIA_TYPE_AUDIO</name></expr></argument>)</argument_list></call> <operator pos:start="141:76" pos:end="141:77">&gt;=</operator> <literal type="number" pos:start="141:79" pos:end="141:79">0</literal></expr>)</condition> <block pos:start="141:82" pos:end="159:5">{<block_content pos:start="143:9" pos:end="157:9">

        <expr_stmt pos:start="143:9" pos:end="143:58"><expr pos:start="143:9" pos:end="143:57"><name pos:start="143:9" pos:end="143:20">audio_stream</name> <operator pos:start="143:22" pos:end="143:22">=</operator> <name pos:start="143:24" pos:end="143:57"><name pos:start="143:24" pos:end="143:30">fmt_ctx</name><operator pos:start="143:31" pos:end="143:32">-&gt;</operator><name pos:start="143:33" pos:end="143:39">streams</name><index pos:start="143:40" pos:end="143:57">[<expr pos:start="143:41" pos:end="143:56"><name pos:start="143:41" pos:end="143:56">audio_stream_idx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:44"><expr pos:start="145:9" pos:end="145:43"><name pos:start="145:9" pos:end="145:21">audio_dec_ctx</name> <operator pos:start="145:23" pos:end="145:23">=</operator> <name pos:start="145:25" pos:end="145:43"><name pos:start="145:25" pos:end="145:36">audio_stream</name><operator pos:start="145:37" pos:end="145:38">-&gt;</operator><name pos:start="145:39" pos:end="145:43">codec</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:57"><expr pos:start="147:9" pos:end="147:56"><name pos:start="147:9" pos:end="147:22">audio_dst_file</name> <operator pos:start="147:24" pos:end="147:24">=</operator> <call pos:start="147:26" pos:end="147:56"><name pos:start="147:26" pos:end="147:30">fopen</name><argument_list pos:start="147:31" pos:end="147:56">(<argument pos:start="147:32" pos:end="147:49"><expr pos:start="147:32" pos:end="147:49"><name pos:start="147:32" pos:end="147:49">audio_dst_filename</name></expr></argument>, <argument pos:start="147:52" pos:end="147:55"><expr pos:start="147:52" pos:end="147:55"><literal type="string" pos:start="147:52" pos:end="147:55">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="157:9"><if pos:start="149:9" pos:end="157:9">if <condition pos:start="149:12" pos:end="149:28">(<expr pos:start="149:13" pos:end="149:27"><operator pos:start="149:13" pos:end="149:13">!</operator><name pos:start="149:14" pos:end="149:27">audio_dst_file</name></expr>)</condition> <block pos:start="149:30" pos:end="157:9">{<block_content pos:start="151:13" pos:end="155:21">

            <expr_stmt pos:start="151:13" pos:end="151:88"><expr pos:start="151:13" pos:end="151:87"><call pos:start="151:13" pos:end="151:87"><name pos:start="151:13" pos:end="151:19">fprintf</name><argument_list pos:start="151:20" pos:end="151:87">(<argument pos:start="151:21" pos:end="151:26"><expr pos:start="151:21" pos:end="151:26"><name pos:start="151:21" pos:end="151:26">stderr</name></expr></argument>, <argument pos:start="151:29" pos:end="151:66"><expr pos:start="151:29" pos:end="151:66"><literal type="string" pos:start="151:29" pos:end="151:66">"Could not open destination file %s\n"</literal></expr></argument>, <argument pos:start="151:69" pos:end="151:86"><expr pos:start="151:69" pos:end="151:86"><name pos:start="151:69" pos:end="151:86">video_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:20"><expr pos:start="153:13" pos:end="153:19"><name pos:start="153:13" pos:end="153:15">ret</name> <operator pos:start="153:17" pos:end="153:17">=</operator> <literal type="number" pos:start="153:19" pos:end="153:19">1</literal></expr>;</expr_stmt>

            <goto pos:start="155:13" pos:end="155:21">goto <name pos:start="155:18" pos:end="155:20">end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:42">/* dump input information to stderr */</comment>

    <expr_stmt pos:start="165:5" pos:end="165:48"><expr pos:start="165:5" pos:end="165:47"><call pos:start="165:5" pos:end="165:47"><name pos:start="165:5" pos:end="165:18">av_dump_format</name><argument_list pos:start="165:19" pos:end="165:47">(<argument pos:start="165:20" pos:end="165:26"><expr pos:start="165:20" pos:end="165:26"><name pos:start="165:20" pos:end="165:26">fmt_ctx</name></expr></argument>, <argument pos:start="165:29" pos:end="165:29"><expr pos:start="165:29" pos:end="165:29"><literal type="number" pos:start="165:29" pos:end="165:29">0</literal></expr></argument>, <argument pos:start="165:32" pos:end="165:43"><expr pos:start="165:32" pos:end="165:43"><name pos:start="165:32" pos:end="165:43">src_filename</name></expr></argument>, <argument pos:start="165:46" pos:end="165:46"><expr pos:start="165:46" pos:end="165:46"><literal type="number" pos:start="165:46" pos:end="165:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="169:5" pos:end="177:5"><if pos:start="169:5" pos:end="177:5">if <condition pos:start="169:8" pos:end="169:39">(<expr pos:start="169:9" pos:end="169:38"><operator pos:start="169:9" pos:end="169:9">!</operator><name pos:start="169:10" pos:end="169:21">audio_stream</name> <operator pos:start="169:23" pos:end="169:24">&amp;&amp;</operator> <operator pos:start="169:26" pos:end="169:26">!</operator><name pos:start="169:27" pos:end="169:38">video_stream</name></expr>)</condition> <block pos:start="169:41" pos:end="177:5">{<block_content pos:start="171:9" pos:end="175:17">

        <expr_stmt pos:start="171:9" pos:end="171:89"><expr pos:start="171:9" pos:end="171:88"><call pos:start="171:9" pos:end="171:88"><name pos:start="171:9" pos:end="171:15">fprintf</name><argument_list pos:start="171:16" pos:end="171:88">(<argument pos:start="171:17" pos:end="171:22"><expr pos:start="171:17" pos:end="171:22"><name pos:start="171:17" pos:end="171:22">stderr</name></expr></argument>, <argument pos:start="171:25" pos:end="171:87"><expr pos:start="171:25" pos:end="171:87"><literal type="string" pos:start="171:25" pos:end="171:87">"Could not find audio or video stream in the input, aborting\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:16"><expr pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <literal type="number" pos:start="173:15" pos:end="173:15">1</literal></expr>;</expr_stmt>

        <goto pos:start="175:9" pos:end="175:17">goto <name pos:start="175:14" pos:end="175:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="181:5" pos:end="183:65">/* When using the new API, you need to use the libavutil/frame.h API, while

     * the classic frame management is available in libavcodec */</comment>

    <if_stmt pos:start="185:5" pos:end="191:33"><if pos:start="185:5" pos:end="187:38">if <condition pos:start="185:8" pos:end="185:33">(<expr pos:start="185:9" pos:end="185:32"><name pos:start="185:9" pos:end="185:16">api_mode</name> <operator pos:start="185:18" pos:end="185:19">==</operator> <name pos:start="185:21" pos:end="185:32">API_MODE_OLD</name></expr>)</condition><block type="pseudo" pos:start="187:9" pos:end="187:38"><block_content pos:start="187:9" pos:end="187:38">

        <expr_stmt pos:start="187:9" pos:end="187:38"><expr pos:start="187:9" pos:end="187:37"><name pos:start="187:9" pos:end="187:13">frame</name> <operator pos:start="187:15" pos:end="187:15">=</operator> <call pos:start="187:17" pos:end="187:37"><name pos:start="187:17" pos:end="187:35">avcodec_alloc_frame</name><argument_list pos:start="187:36" pos:end="187:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="189:5" pos:end="191:33">else<block type="pseudo" pos:start="191:9" pos:end="191:33"><block_content pos:start="191:9" pos:end="191:33">

        <expr_stmt pos:start="191:9" pos:end="191:33"><expr pos:start="191:9" pos:end="191:32"><name pos:start="191:9" pos:end="191:13">frame</name> <operator pos:start="191:15" pos:end="191:15">=</operator> <call pos:start="191:17" pos:end="191:32"><name pos:start="191:17" pos:end="191:30">av_frame_alloc</name><argument_list pos:start="191:31" pos:end="191:32">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="193:5" pos:end="201:5"><if pos:start="193:5" pos:end="201:5">if <condition pos:start="193:8" pos:end="193:15">(<expr pos:start="193:9" pos:end="193:14"><operator pos:start="193:9" pos:end="193:9">!</operator><name pos:start="193:10" pos:end="193:14">frame</name></expr>)</condition> <block pos:start="193:17" pos:end="201:5">{<block_content pos:start="195:9" pos:end="199:17">

        <expr_stmt pos:start="195:9" pos:end="195:54"><expr pos:start="195:9" pos:end="195:53"><call pos:start="195:9" pos:end="195:53"><name pos:start="195:9" pos:end="195:15">fprintf</name><argument_list pos:start="195:16" pos:end="195:53">(<argument pos:start="195:17" pos:end="195:22"><expr pos:start="195:17" pos:end="195:22"><name pos:start="195:17" pos:end="195:22">stderr</name></expr></argument>, <argument pos:start="195:25" pos:end="195:52"><expr pos:start="195:25" pos:end="195:52"><literal type="string" pos:start="195:25" pos:end="195:52">"Could not allocate frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:30"><expr pos:start="197:9" pos:end="197:29"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <call pos:start="197:15" pos:end="197:29"><name pos:start="197:15" pos:end="197:21">AVERROR</name><argument_list pos:start="197:22" pos:end="197:29">(<argument pos:start="197:23" pos:end="197:28"><expr pos:start="197:23" pos:end="197:28"><name pos:start="197:23" pos:end="197:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="199:9" pos:end="199:17">goto <name pos:start="199:14" pos:end="199:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="205:5" pos:end="205:70">/* initialize packet, set data to NULL, let the demuxer fill it */</comment>

    <expr_stmt pos:start="207:5" pos:end="207:25"><expr pos:start="207:5" pos:end="207:24"><call pos:start="207:5" pos:end="207:24"><name pos:start="207:5" pos:end="207:18">av_init_packet</name><argument_list pos:start="207:19" pos:end="207:24">(<argument pos:start="207:20" pos:end="207:23"><expr pos:start="207:20" pos:end="207:23"><operator pos:start="207:20" pos:end="207:20">&amp;</operator><name pos:start="207:21" pos:end="207:23">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:20"><expr pos:start="209:5" pos:end="209:19"><name pos:start="209:5" pos:end="209:12"><name pos:start="209:5" pos:end="209:7">pkt</name><operator pos:start="209:8" pos:end="209:8">.</operator><name pos:start="209:9" pos:end="209:12">data</name></name> <operator pos:start="209:14" pos:end="209:14">=</operator> <name pos:start="209:16" pos:end="209:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:17"><expr pos:start="211:5" pos:end="211:16"><name pos:start="211:5" pos:end="211:12"><name pos:start="211:5" pos:end="211:7">pkt</name><operator pos:start="211:8" pos:end="211:8">.</operator><name pos:start="211:9" pos:end="211:12">size</name></name> <operator pos:start="211:14" pos:end="211:14">=</operator> <literal type="number" pos:start="211:16" pos:end="211:16">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="215:5" pos:end="217:94"><if pos:start="215:5" pos:end="217:94">if <condition pos:start="215:8" pos:end="215:21">(<expr pos:start="215:9" pos:end="215:20"><name pos:start="215:9" pos:end="215:20">video_stream</name></expr>)</condition><block type="pseudo" pos:start="217:9" pos:end="217:94"><block_content pos:start="217:9" pos:end="217:94">

        <expr_stmt pos:start="217:9" pos:end="217:94"><expr pos:start="217:9" pos:end="217:93"><call pos:start="217:9" pos:end="217:93"><name pos:start="217:9" pos:end="217:14">printf</name><argument_list pos:start="217:15" pos:end="217:93">(<argument pos:start="217:16" pos:end="217:58"><expr pos:start="217:16" pos:end="217:58"><literal type="string" pos:start="217:16" pos:end="217:58">"Demuxing video from file '%s' into '%s'\n"</literal></expr></argument>, <argument pos:start="217:61" pos:end="217:72"><expr pos:start="217:61" pos:end="217:72"><name pos:start="217:61" pos:end="217:72">src_filename</name></expr></argument>, <argument pos:start="217:75" pos:end="217:92"><expr pos:start="217:75" pos:end="217:92"><name pos:start="217:75" pos:end="217:92">video_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="219:5" pos:end="221:94"><if pos:start="219:5" pos:end="221:94">if <condition pos:start="219:8" pos:end="219:21">(<expr pos:start="219:9" pos:end="219:20"><name pos:start="219:9" pos:end="219:20">audio_stream</name></expr>)</condition><block type="pseudo" pos:start="221:9" pos:end="221:94"><block_content pos:start="221:9" pos:end="221:94">

        <expr_stmt pos:start="221:9" pos:end="221:94"><expr pos:start="221:9" pos:end="221:93"><call pos:start="221:9" pos:end="221:93"><name pos:start="221:9" pos:end="221:14">printf</name><argument_list pos:start="221:15" pos:end="221:93">(<argument pos:start="221:16" pos:end="221:58"><expr pos:start="221:16" pos:end="221:58"><literal type="string" pos:start="221:16" pos:end="221:58">"Demuxing audio from file '%s' into '%s'\n"</literal></expr></argument>, <argument pos:start="221:61" pos:end="221:72"><expr pos:start="221:61" pos:end="221:72"><name pos:start="221:61" pos:end="221:72">src_filename</name></expr></argument>, <argument pos:start="221:75" pos:end="221:92"><expr pos:start="221:75" pos:end="221:92"><name pos:start="221:75" pos:end="221:92">audio_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="225:5" pos:end="225:35">/* read frames from the file */</comment>

    <while pos:start="227:5" pos:end="247:5">while <condition pos:start="227:11" pos:end="227:45">(<expr pos:start="227:12" pos:end="227:44"><call pos:start="227:12" pos:end="227:39"><name pos:start="227:12" pos:end="227:24">av_read_frame</name><argument_list pos:start="227:25" pos:end="227:39">(<argument pos:start="227:26" pos:end="227:32"><expr pos:start="227:26" pos:end="227:32"><name pos:start="227:26" pos:end="227:32">fmt_ctx</name></expr></argument>, <argument pos:start="227:35" pos:end="227:38"><expr pos:start="227:35" pos:end="227:38"><operator pos:start="227:35" pos:end="227:35">&amp;</operator><name pos:start="227:36" pos:end="227:38">pkt</name></expr></argument>)</argument_list></call> <operator pos:start="227:41" pos:end="227:42">&gt;=</operator> <literal type="number" pos:start="227:44" pos:end="227:44">0</literal></expr>)</condition> <block pos:start="227:47" pos:end="247:5">{<block_content pos:start="229:9" pos:end="245:34">

        <decl_stmt pos:start="229:9" pos:end="229:32"><decl pos:start="229:9" pos:end="229:31"><type pos:start="229:9" pos:end="229:16"><name pos:start="229:9" pos:end="229:16">AVPacket</name></type> <name pos:start="229:18" pos:end="229:25">orig_pkt</name> <init pos:start="229:27" pos:end="229:31">= <expr pos:start="229:29" pos:end="229:31"><name pos:start="229:29" pos:end="229:31">pkt</name></expr></init></decl>;</decl_stmt>

        <do pos:start="231:9" pos:end="243:31">do <block pos:start="231:12" pos:end="243:9">{<block_content pos:start="233:13" pos:end="241:28">

            <expr_stmt pos:start="233:13" pos:end="233:47"><expr pos:start="233:13" pos:end="233:46"><name pos:start="233:13" pos:end="233:15">ret</name> <operator pos:start="233:17" pos:end="233:17">=</operator> <call pos:start="233:19" pos:end="233:46"><name pos:start="233:19" pos:end="233:31">decode_packet</name><argument_list pos:start="233:32" pos:end="233:46">(<argument pos:start="233:33" pos:end="233:42"><expr pos:start="233:33" pos:end="233:42"><operator pos:start="233:33" pos:end="233:33">&amp;</operator><name pos:start="233:34" pos:end="233:42">got_frame</name></expr></argument>, <argument pos:start="233:45" pos:end="233:45"><expr pos:start="233:45" pos:end="233:45"><literal type="number" pos:start="233:45" pos:end="233:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="235:13" pos:end="237:22"><if pos:start="235:13" pos:end="237:22">if <condition pos:start="235:16" pos:end="235:24">(<expr pos:start="235:17" pos:end="235:23"><name pos:start="235:17" pos:end="235:19">ret</name> <operator pos:start="235:21" pos:end="235:21">&lt;</operator> <literal type="number" pos:start="235:23" pos:end="235:23">0</literal></expr>)</condition><block type="pseudo" pos:start="237:17" pos:end="237:22"><block_content pos:start="237:17" pos:end="237:22">

                <break pos:start="237:17" pos:end="237:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:28"><expr pos:start="239:13" pos:end="239:27"><name pos:start="239:13" pos:end="239:20"><name pos:start="239:13" pos:end="239:15">pkt</name><operator pos:start="239:16" pos:end="239:16">.</operator><name pos:start="239:17" pos:end="239:20">data</name></name> <operator pos:start="239:22" pos:end="239:23">+=</operator> <name pos:start="239:25" pos:end="239:27">ret</name></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:28"><expr pos:start="241:13" pos:end="241:27"><name pos:start="241:13" pos:end="241:20"><name pos:start="241:13" pos:end="241:15">pkt</name><operator pos:start="241:16" pos:end="241:16">.</operator><name pos:start="241:17" pos:end="241:20">size</name></name> <operator pos:start="241:22" pos:end="241:23">-=</operator> <name pos:start="241:25" pos:end="241:27">ret</name></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="243:17" pos:end="243:30">(<expr pos:start="243:18" pos:end="243:29"><name pos:start="243:18" pos:end="243:25"><name pos:start="243:18" pos:end="243:20">pkt</name><operator pos:start="243:21" pos:end="243:21">.</operator><name pos:start="243:22" pos:end="243:25">size</name></name> <operator pos:start="243:27" pos:end="243:27">&gt;</operator> <literal type="number" pos:start="243:29" pos:end="243:29">0</literal></expr>)</condition>;</do>

        <expr_stmt pos:start="245:9" pos:end="245:34"><expr pos:start="245:9" pos:end="245:33"><call pos:start="245:9" pos:end="245:33"><name pos:start="245:9" pos:end="245:22">av_free_packet</name><argument_list pos:start="245:23" pos:end="245:33">(<argument pos:start="245:24" pos:end="245:32"><expr pos:start="245:24" pos:end="245:32"><operator pos:start="245:24" pos:end="245:24">&amp;</operator><name pos:start="245:25" pos:end="245:32">orig_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="251:5" pos:end="251:29">/* flush cached frames */</comment>

    <expr_stmt pos:start="253:5" pos:end="253:20"><expr pos:start="253:5" pos:end="253:19"><name pos:start="253:5" pos:end="253:12"><name pos:start="253:5" pos:end="253:7">pkt</name><operator pos:start="253:8" pos:end="253:8">.</operator><name pos:start="253:9" pos:end="253:12">data</name></name> <operator pos:start="253:14" pos:end="253:14">=</operator> <name pos:start="253:16" pos:end="253:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:17"><expr pos:start="255:5" pos:end="255:16"><name pos:start="255:5" pos:end="255:12"><name pos:start="255:5" pos:end="255:7">pkt</name><operator pos:start="255:8" pos:end="255:8">.</operator><name pos:start="255:9" pos:end="255:12">size</name></name> <operator pos:start="255:14" pos:end="255:14">=</operator> <literal type="number" pos:start="255:16" pos:end="255:16">0</literal></expr>;</expr_stmt>

    <do pos:start="257:5" pos:end="261:24">do <block pos:start="257:8" pos:end="261:5">{<block_content pos:start="259:9" pos:end="259:37">

        <expr_stmt pos:start="259:9" pos:end="259:37"><expr pos:start="259:9" pos:end="259:36"><call pos:start="259:9" pos:end="259:36"><name pos:start="259:9" pos:end="259:21">decode_packet</name><argument_list pos:start="259:22" pos:end="259:36">(<argument pos:start="259:23" pos:end="259:32"><expr pos:start="259:23" pos:end="259:32"><operator pos:start="259:23" pos:end="259:23">&amp;</operator><name pos:start="259:24" pos:end="259:32">got_frame</name></expr></argument>, <argument pos:start="259:35" pos:end="259:35"><expr pos:start="259:35" pos:end="259:35"><literal type="number" pos:start="259:35" pos:end="259:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="261:13" pos:end="261:23">(<expr pos:start="261:14" pos:end="261:22"><name pos:start="261:14" pos:end="261:22">got_frame</name></expr>)</condition>;</do>



    <expr_stmt pos:start="265:5" pos:end="265:36"><expr pos:start="265:5" pos:end="265:35"><call pos:start="265:5" pos:end="265:35"><name pos:start="265:5" pos:end="265:10">printf</name><argument_list pos:start="265:11" pos:end="265:35">(<argument pos:start="265:12" pos:end="265:34"><expr pos:start="265:12" pos:end="265:34"><literal type="string" pos:start="265:12" pos:end="265:34">"Demuxing succeeded.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="269:5" pos:end="279:5"><if pos:start="269:5" pos:end="279:5">if <condition pos:start="269:8" pos:end="269:21">(<expr pos:start="269:9" pos:end="269:20"><name pos:start="269:9" pos:end="269:20">video_stream</name></expr>)</condition> <block pos:start="269:23" pos:end="279:5">{<block_content pos:start="271:9" pos:end="277:35">

        <expr_stmt pos:start="271:9" pos:end="277:35"><expr pos:start="271:9" pos:end="277:34"><call pos:start="271:9" pos:end="277:34"><name pos:start="271:9" pos:end="271:14">printf</name><argument_list pos:start="271:15" pos:end="277:34">(<argument pos:start="271:16" pos:end="273:70"><expr pos:start="271:16" pos:end="273:70"><literal type="string" pos:start="271:16" pos:end="271:63">"Play the output video file with the command:\n"</literal>

               <literal type="string" pos:start="273:16" pos:end="273:70">"ffplay -f rawvideo -pix_fmt %s -video_size %dx%d %s\n"</literal></expr></argument>,

               <argument pos:start="275:16" pos:end="275:58"><expr pos:start="275:16" pos:end="275:58"><call pos:start="275:16" pos:end="275:58"><name pos:start="275:16" pos:end="275:34">av_get_pix_fmt_name</name><argument_list pos:start="275:35" pos:end="275:58">(<argument pos:start="275:36" pos:end="275:57"><expr pos:start="275:36" pos:end="275:57"><name pos:start="275:36" pos:end="275:57"><name pos:start="275:36" pos:end="275:48">video_dec_ctx</name><operator pos:start="275:49" pos:end="275:50">-&gt;</operator><name pos:start="275:51" pos:end="275:57">pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="275:61" pos:end="275:80"><expr pos:start="275:61" pos:end="275:80"><name pos:start="275:61" pos:end="275:80"><name pos:start="275:61" pos:end="275:73">video_dec_ctx</name><operator pos:start="275:74" pos:end="275:75">-&gt;</operator><name pos:start="275:76" pos:end="275:80">width</name></name></expr></argument>, <argument pos:start="275:83" pos:end="275:103"><expr pos:start="275:83" pos:end="275:103"><name pos:start="275:83" pos:end="275:103"><name pos:start="275:83" pos:end="275:95">video_dec_ctx</name><operator pos:start="275:96" pos:end="275:97">-&gt;</operator><name pos:start="275:98" pos:end="275:103">height</name></name></expr></argument>,

               <argument pos:start="277:16" pos:end="277:33"><expr pos:start="277:16" pos:end="277:33"><name pos:start="277:16" pos:end="277:33">video_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="283:5" pos:end="325:5"><if pos:start="283:5" pos:end="325:5">if <condition pos:start="283:8" pos:end="283:21">(<expr pos:start="283:9" pos:end="283:20"><name pos:start="283:9" pos:end="283:20">audio_stream</name></expr>)</condition> <block pos:start="283:23" pos:end="325:5">{<block_content pos:start="285:9" pos:end="323:35">

        <decl_stmt pos:start="285:9" pos:end="285:61"><decl pos:start="285:9" pos:end="285:60"><type pos:start="285:9" pos:end="285:27"><name pos:start="285:9" pos:end="285:27"><name pos:start="285:9" pos:end="285:12">enum</name> <name pos:start="285:14" pos:end="285:27">AVSampleFormat</name></name></type> <name pos:start="285:29" pos:end="285:32">sfmt</name> <init pos:start="285:34" pos:end="285:60">= <expr pos:start="285:36" pos:end="285:60"><name pos:start="285:36" pos:end="285:60"><name pos:start="285:36" pos:end="285:48">audio_dec_ctx</name><operator pos:start="285:49" pos:end="285:50">-&gt;</operator><name pos:start="285:51" pos:end="285:60">sample_fmt</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="287:9" pos:end="287:49"><decl pos:start="287:9" pos:end="287:48"><type pos:start="287:9" pos:end="287:11"><name pos:start="287:9" pos:end="287:11">int</name></type> <name pos:start="287:13" pos:end="287:22">n_channels</name> <init pos:start="287:24" pos:end="287:48">= <expr pos:start="287:26" pos:end="287:48"><name pos:start="287:26" pos:end="287:48"><name pos:start="287:26" pos:end="287:38">audio_dec_ctx</name><operator pos:start="287:39" pos:end="287:40">-&gt;</operator><name pos:start="287:41" pos:end="287:48">channels</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="289:9" pos:end="289:24"><decl pos:start="289:9" pos:end="289:23"><type pos:start="289:9" pos:end="289:20"><specifier pos:start="289:9" pos:end="289:13">const</specifier> <name pos:start="289:15" pos:end="289:18">char</name> <modifier pos:start="289:20" pos:end="289:20">*</modifier></type><name pos:start="289:21" pos:end="289:23">fmt</name></decl>;</decl_stmt>



        <if_stmt pos:start="293:9" pos:end="307:9"><if pos:start="293:9" pos:end="307:9">if <condition pos:start="293:12" pos:end="293:42">(<expr pos:start="293:13" pos:end="293:41"><call pos:start="293:13" pos:end="293:41"><name pos:start="293:13" pos:end="293:35">av_sample_fmt_is_planar</name><argument_list pos:start="293:36" pos:end="293:41">(<argument pos:start="293:37" pos:end="293:40"><expr pos:start="293:37" pos:end="293:40"><name pos:start="293:37" pos:end="293:40">sfmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="293:44" pos:end="307:9">{<block_content pos:start="295:13" pos:end="305:27">

            <decl_stmt pos:start="295:13" pos:end="295:62"><decl pos:start="295:13" pos:end="295:61"><type pos:start="295:13" pos:end="295:24"><specifier pos:start="295:13" pos:end="295:17">const</specifier> <name pos:start="295:19" pos:end="295:22">char</name> <modifier pos:start="295:24" pos:end="295:24">*</modifier></type><name pos:start="295:25" pos:end="295:30">packed</name> <init pos:start="295:32" pos:end="295:61">= <expr pos:start="295:34" pos:end="295:61"><call pos:start="295:34" pos:end="295:61"><name pos:start="295:34" pos:end="295:55">av_get_sample_fmt_name</name><argument_list pos:start="295:56" pos:end="295:61">(<argument pos:start="295:57" pos:end="295:60"><expr pos:start="295:57" pos:end="295:60"><name pos:start="295:57" pos:end="295:60">sfmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="297:13" pos:end="301:42"><expr pos:start="297:13" pos:end="301:41"><call pos:start="297:13" pos:end="301:41"><name pos:start="297:13" pos:end="297:18">printf</name><argument_list pos:start="297:19" pos:end="301:41">(<argument pos:start="297:20" pos:end="299:77"><expr pos:start="297:20" pos:end="299:77"><literal type="string" pos:start="297:20" pos:end="297:79">"Warning: the sample format the decoder produced is planar "</literal>

                   <literal type="string" pos:start="299:20" pos:end="299:77">"(%s). This example will output the first channel only.\n"</literal></expr></argument>,

                   <argument pos:start="301:20" pos:end="301:40"><expr pos:start="301:20" pos:end="301:40"><ternary pos:start="301:20" pos:end="301:40"><condition pos:start="301:20" pos:end="301:27"><expr pos:start="301:20" pos:end="301:25"><name pos:start="301:20" pos:end="301:25">packed</name></expr> ?</condition><then pos:start="301:29" pos:end="301:34"> <expr pos:start="301:29" pos:end="301:34"><name pos:start="301:29" pos:end="301:34">packed</name></expr> </then><else pos:start="301:36" pos:end="301:40">: <expr pos:start="301:38" pos:end="301:40"><literal type="string" pos:start="301:38" pos:end="301:40">"?"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:50"><expr pos:start="303:13" pos:end="303:49"><name pos:start="303:13" pos:end="303:16">sfmt</name> <operator pos:start="303:18" pos:end="303:18">=</operator> <call pos:start="303:20" pos:end="303:49"><name pos:start="303:20" pos:end="303:43">av_get_packed_sample_fmt</name><argument_list pos:start="303:44" pos:end="303:49">(<argument pos:start="303:45" pos:end="303:48"><expr pos:start="303:45" pos:end="303:48"><name pos:start="303:45" pos:end="303:48">sfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:27"><expr pos:start="305:13" pos:end="305:26"><name pos:start="305:13" pos:end="305:22">n_channels</name> <operator pos:start="305:24" pos:end="305:24">=</operator> <literal type="number" pos:start="305:26" pos:end="305:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="311:9" pos:end="313:21"><if pos:start="311:9" pos:end="313:21">if <condition pos:start="311:12" pos:end="311:63">(<expr pos:start="311:13" pos:end="311:62"><operator pos:start="311:13" pos:end="311:13">(</operator><name pos:start="311:14" pos:end="311:16">ret</name> <operator pos:start="311:18" pos:end="311:18">=</operator> <call pos:start="311:20" pos:end="311:57"><name pos:start="311:20" pos:end="311:45">get_format_from_sample_fmt</name><argument_list pos:start="311:46" pos:end="311:57">(<argument pos:start="311:47" pos:end="311:50"><expr pos:start="311:47" pos:end="311:50"><operator pos:start="311:47" pos:end="311:47">&amp;</operator><name pos:start="311:48" pos:end="311:50">fmt</name></expr></argument>, <argument pos:start="311:53" pos:end="311:56"><expr pos:start="311:53" pos:end="311:56"><name pos:start="311:53" pos:end="311:56">sfmt</name></expr></argument>)</argument_list></call><operator pos:start="311:58" pos:end="311:58">)</operator> <operator pos:start="311:60" pos:end="311:60">&lt;</operator> <literal type="number" pos:start="311:62" pos:end="311:62">0</literal></expr>)</condition><block type="pseudo" pos:start="313:13" pos:end="313:21"><block_content pos:start="313:13" pos:end="313:21">

            <goto pos:start="313:13" pos:end="313:21">goto <name pos:start="313:18" pos:end="313:20">end</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="317:9" pos:end="323:35"><expr pos:start="317:9" pos:end="323:34"><call pos:start="317:9" pos:end="323:34"><name pos:start="317:9" pos:end="317:14">printf</name><argument_list pos:start="317:15" pos:end="323:34">(<argument pos:start="317:16" pos:end="319:48"><expr pos:start="317:16" pos:end="319:48"><literal type="string" pos:start="317:16" pos:end="317:63">"Play the output audio file with the command:\n"</literal>

               <literal type="string" pos:start="319:16" pos:end="319:48">"ffplay -f %s -ac %d -ar %d %s\n"</literal></expr></argument>,

               <argument pos:start="321:16" pos:end="321:18"><expr pos:start="321:16" pos:end="321:18"><name pos:start="321:16" pos:end="321:18">fmt</name></expr></argument>, <argument pos:start="321:21" pos:end="321:30"><expr pos:start="321:21" pos:end="321:30"><name pos:start="321:21" pos:end="321:30">n_channels</name></expr></argument>, <argument pos:start="321:33" pos:end="321:58"><expr pos:start="321:33" pos:end="321:58"><name pos:start="321:33" pos:end="321:58"><name pos:start="321:33" pos:end="321:45">audio_dec_ctx</name><operator pos:start="321:46" pos:end="321:47">-&gt;</operator><name pos:start="321:48" pos:end="321:58">sample_rate</name></name></expr></argument>,

               <argument pos:start="323:16" pos:end="323:33"><expr pos:start="323:16" pos:end="323:33"><name pos:start="323:16" pos:end="323:33">audio_dst_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="329:1" pos:end="329:4"><name pos:start="329:1" pos:end="329:3">end</name>:</label>

    <if_stmt pos:start="331:5" pos:end="333:37"><if pos:start="331:5" pos:end="333:37">if <condition pos:start="331:8" pos:end="331:22">(<expr pos:start="331:9" pos:end="331:21"><name pos:start="331:9" pos:end="331:21">video_dec_ctx</name></expr>)</condition><block type="pseudo" pos:start="333:9" pos:end="333:37"><block_content pos:start="333:9" pos:end="333:37">

        <expr_stmt pos:start="333:9" pos:end="333:37"><expr pos:start="333:9" pos:end="333:36"><call pos:start="333:9" pos:end="333:36"><name pos:start="333:9" pos:end="333:21">avcodec_close</name><argument_list pos:start="333:22" pos:end="333:36">(<argument pos:start="333:23" pos:end="333:35"><expr pos:start="333:23" pos:end="333:35"><name pos:start="333:23" pos:end="333:35">video_dec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="335:5" pos:end="337:37"><if pos:start="335:5" pos:end="337:37">if <condition pos:start="335:8" pos:end="335:22">(<expr pos:start="335:9" pos:end="335:21"><name pos:start="335:9" pos:end="335:21">audio_dec_ctx</name></expr>)</condition><block type="pseudo" pos:start="337:9" pos:end="337:37"><block_content pos:start="337:9" pos:end="337:37">

        <expr_stmt pos:start="337:9" pos:end="337:37"><expr pos:start="337:9" pos:end="337:36"><call pos:start="337:9" pos:end="337:36"><name pos:start="337:9" pos:end="337:21">avcodec_close</name><argument_list pos:start="337:22" pos:end="337:36">(<argument pos:start="337:23" pos:end="337:35"><expr pos:start="337:23" pos:end="337:35"><name pos:start="337:23" pos:end="337:35">audio_dec_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="339:5" pos:end="339:35"><expr pos:start="339:5" pos:end="339:34"><call pos:start="339:5" pos:end="339:34"><name pos:start="339:5" pos:end="339:24">avformat_close_input</name><argument_list pos:start="339:25" pos:end="339:34">(<argument pos:start="339:26" pos:end="339:33"><expr pos:start="339:26" pos:end="339:33"><operator pos:start="339:26" pos:end="339:26">&amp;</operator><name pos:start="339:27" pos:end="339:33">fmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="341:5" pos:end="343:31"><if pos:start="341:5" pos:end="343:31">if <condition pos:start="341:8" pos:end="341:23">(<expr pos:start="341:9" pos:end="341:22"><name pos:start="341:9" pos:end="341:22">video_dst_file</name></expr>)</condition><block type="pseudo" pos:start="343:9" pos:end="343:31"><block_content pos:start="343:9" pos:end="343:31">

        <expr_stmt pos:start="343:9" pos:end="343:31"><expr pos:start="343:9" pos:end="343:30"><call pos:start="343:9" pos:end="343:30"><name pos:start="343:9" pos:end="343:14">fclose</name><argument_list pos:start="343:15" pos:end="343:30">(<argument pos:start="343:16" pos:end="343:29"><expr pos:start="343:16" pos:end="343:29"><name pos:start="343:16" pos:end="343:29">video_dst_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="345:5" pos:end="347:31"><if pos:start="345:5" pos:end="347:31">if <condition pos:start="345:8" pos:end="345:23">(<expr pos:start="345:9" pos:end="345:22"><name pos:start="345:9" pos:end="345:22">audio_dst_file</name></expr>)</condition><block type="pseudo" pos:start="347:9" pos:end="347:31"><block_content pos:start="347:9" pos:end="347:31">

        <expr_stmt pos:start="347:9" pos:end="347:31"><expr pos:start="347:9" pos:end="347:30"><call pos:start="347:9" pos:end="347:30"><name pos:start="347:9" pos:end="347:14">fclose</name><argument_list pos:start="347:15" pos:end="347:30">(<argument pos:start="347:16" pos:end="347:29"><expr pos:start="347:16" pos:end="347:29"><name pos:start="347:16" pos:end="347:29">audio_dst_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="349:5" pos:end="355:30"><if pos:start="349:5" pos:end="351:35">if <condition pos:start="349:8" pos:end="349:33">(<expr pos:start="349:9" pos:end="349:32"><name pos:start="349:9" pos:end="349:16">api_mode</name> <operator pos:start="349:18" pos:end="349:19">==</operator> <name pos:start="349:21" pos:end="349:32">API_MODE_OLD</name></expr>)</condition><block type="pseudo" pos:start="351:9" pos:end="351:35"><block_content pos:start="351:9" pos:end="351:35">

        <expr_stmt pos:start="351:9" pos:end="351:35"><expr pos:start="351:9" pos:end="351:34"><call pos:start="351:9" pos:end="351:34"><name pos:start="351:9" pos:end="351:26">avcodec_free_frame</name><argument_list pos:start="351:27" pos:end="351:34">(<argument pos:start="351:28" pos:end="351:33"><expr pos:start="351:28" pos:end="351:33"><operator pos:start="351:28" pos:end="351:28">&amp;</operator><name pos:start="351:29" pos:end="351:33">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="353:5" pos:end="355:30">else<block type="pseudo" pos:start="355:9" pos:end="355:30"><block_content pos:start="355:9" pos:end="355:30">

        <expr_stmt pos:start="355:9" pos:end="355:30"><expr pos:start="355:9" pos:end="355:29"><call pos:start="355:9" pos:end="355:29"><name pos:start="355:9" pos:end="355:21">av_frame_free</name><argument_list pos:start="355:22" pos:end="355:29">(<argument pos:start="355:23" pos:end="355:28"><expr pos:start="355:23" pos:end="355:28"><operator pos:start="355:23" pos:end="355:23">&amp;</operator><name pos:start="355:24" pos:end="355:28">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:31"><expr pos:start="357:5" pos:end="357:30"><call pos:start="357:5" pos:end="357:30"><name pos:start="357:5" pos:end="357:11">av_free</name><argument_list pos:start="357:12" pos:end="357:30">(<argument pos:start="357:13" pos:end="357:29"><expr pos:start="357:13" pos:end="357:29"><name pos:start="357:13" pos:end="357:29"><name pos:start="357:13" pos:end="357:26">video_dst_data</name><index pos:start="357:27" pos:end="357:29">[<expr pos:start="357:28" pos:end="357:28"><literal type="number" pos:start="357:28" pos:end="357:28">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="361:5" pos:end="361:19">return <expr pos:start="361:12" pos:end="361:18"><name pos:start="361:12" pos:end="361:14">ret</name> <operator pos:start="361:16" pos:end="361:16">&lt;</operator> <literal type="number" pos:start="361:18" pos:end="361:18">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
