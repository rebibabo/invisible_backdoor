<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11267.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:13">TCGReg</name></type> <name pos:start="1:15" pos:end="1:30">tcg_out_tlb_read</name><parameter_list pos:start="1:31" pos:end="3:73">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:41">TCGContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:52">TCGReg</name></type> <name pos:start="1:54" pos:end="1:59">addrlo</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:74"><decl pos:start="1:62" pos:end="1:74"><type pos:start="1:62" pos:end="1:74"><name pos:start="1:62" pos:end="1:67">TCGReg</name></type> <name pos:start="1:69" pos:end="1:74">addrhi</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:43"><decl pos:start="3:32" pos:end="3:43"><type pos:start="3:32" pos:end="3:43"><name pos:start="3:32" pos:end="3:39">TCGMemOp</name></type> <name pos:start="3:41" pos:end="3:43">opc</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:58">mem_index</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:72"><decl pos:start="3:61" pos:end="3:72"><type pos:start="3:61" pos:end="3:72"><name pos:start="3:61" pos:end="3:64">bool</name></type> <name pos:start="3:66" pos:end="3:72">is_load</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="209:1">{<block_content pos:start="7:5" pos:end="207:22">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">TCGReg</name></type> <name pos:start="7:12" pos:end="7:15">base</name> <init pos:start="7:17" pos:end="7:27">= <expr pos:start="7:19" pos:end="7:27"><name pos:start="7:19" pos:end="7:27">TCG_AREG0</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="15:71"><decl pos:start="9:5" pos:end="15:70"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">cmp_off</name> <init pos:start="9:17" pos:end="15:70">=

        <expr pos:start="11:9" pos:end="15:70"><operator pos:start="11:9" pos:end="11:9">(</operator><ternary pos:start="11:10" pos:end="15:69"><condition pos:start="11:10" pos:end="13:10"><expr pos:start="11:10" pos:end="11:16"><name pos:start="11:10" pos:end="11:16">is_load</name></expr>

         ?</condition><then pos:start="13:12" pos:end="13:68"> <expr pos:start="13:12" pos:end="13:68"><call pos:start="13:12" pos:end="13:68"><name pos:start="13:12" pos:end="13:19">offsetof</name><argument_list pos:start="13:20" pos:end="13:68">(<argument pos:start="13:21" pos:end="13:32"><expr pos:start="13:21" pos:end="13:32"><name pos:start="13:21" pos:end="13:32">CPUArchState</name></expr></argument>, <argument pos:start="13:35" pos:end="13:67"><expr pos:start="13:35" pos:end="13:67"><name pos:start="13:35" pos:end="13:57"><name pos:start="13:35" pos:end="13:43">tlb_table</name><index pos:start="13:44" pos:end="13:54">[<expr pos:start="13:45" pos:end="13:53"><name pos:start="13:45" pos:end="13:53">mem_index</name></expr>]</index><index pos:start="13:55" pos:end="13:57">[<expr pos:start="13:56" pos:end="13:56"><literal type="number" pos:start="13:56" pos:end="13:56">0</literal></expr>]</index></name><operator pos:start="13:58" pos:end="13:58">.</operator><name pos:start="13:59" pos:end="13:67">addr_read</name></expr></argument>)</argument_list></call></expr>

         </then><else pos:start="15:10" pos:end="15:69">: <expr pos:start="15:12" pos:end="15:69"><call pos:start="15:12" pos:end="15:69"><name pos:start="15:12" pos:end="15:19">offsetof</name><argument_list pos:start="15:20" pos:end="15:69">(<argument pos:start="15:21" pos:end="15:32"><expr pos:start="15:21" pos:end="15:32"><name pos:start="15:21" pos:end="15:32">CPUArchState</name></expr></argument>, <argument pos:start="15:35" pos:end="15:68"><expr pos:start="15:35" pos:end="15:68"><name pos:start="15:35" pos:end="15:57"><name pos:start="15:35" pos:end="15:43">tlb_table</name><index pos:start="15:44" pos:end="15:54">[<expr pos:start="15:45" pos:end="15:53"><name pos:start="15:45" pos:end="15:53">mem_index</name></expr>]</index><index pos:start="15:55" pos:end="15:57">[<expr pos:start="15:56" pos:end="15:56"><literal type="number" pos:start="15:56" pos:end="15:56">0</literal></expr>]</index></name><operator pos:start="15:58" pos:end="15:58">.</operator><name pos:start="15:59" pos:end="15:68">addr_write</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="15:70" pos:end="15:70">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:73"><decl pos:start="17:5" pos:end="17:72"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">add_off</name> <init pos:start="17:17" pos:end="17:72">= <expr pos:start="17:19" pos:end="17:72"><call pos:start="17:19" pos:end="17:72"><name pos:start="17:19" pos:end="17:26">offsetof</name><argument_list pos:start="17:27" pos:end="17:72">(<argument pos:start="17:28" pos:end="17:39"><expr pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:39">CPUArchState</name></expr></argument>, <argument pos:start="17:42" pos:end="17:71"><expr pos:start="17:42" pos:end="17:71"><name pos:start="17:42" pos:end="17:64"><name pos:start="17:42" pos:end="17:50">tlb_table</name><index pos:start="17:51" pos:end="17:61">[<expr pos:start="17:52" pos:end="17:60"><name pos:start="17:52" pos:end="17:60">mem_index</name></expr>]</index><index pos:start="17:62" pos:end="17:64">[<expr pos:start="17:63" pos:end="17:63"><literal type="number" pos:start="17:63" pos:end="17:63">0</literal></expr>]</index></name><operator pos:start="17:65" pos:end="17:65">.</operator><name pos:start="17:66" pos:end="17:71">addend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">unsigned</name></type> <name pos:start="19:14" pos:end="19:19">s_bits</name> <init pos:start="19:21" pos:end="19:35">= <expr pos:start="19:23" pos:end="19:35"><name pos:start="19:23" pos:end="19:25">opc</name> <operator pos:start="19:27" pos:end="19:27">&amp;</operator> <name pos:start="19:29" pos:end="19:35">MO_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:46"><decl pos:start="21:5" pos:end="21:45"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">unsigned</name></type> <name pos:start="21:14" pos:end="21:19">a_bits</name> <init pos:start="21:21" pos:end="21:45">= <expr pos:start="21:23" pos:end="21:45"><call pos:start="21:23" pos:end="21:45"><name pos:start="21:23" pos:end="21:40">get_alignment_bits</name><argument_list pos:start="21:41" pos:end="21:45">(<argument pos:start="21:42" pos:end="21:44"><expr pos:start="21:42" pos:end="21:44"><name pos:start="21:42" pos:end="21:44">opc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="63:7">/* V7 generates the following:

     *   ubfx   r0, addrlo, #TARGET_PAGE_BITS, #CPU_TLB_BITS

     *   add    r2, env, #high

     *   add    r2, r2, r0, lsl #CPU_TLB_ENTRY_BITS

     *   ldr    r0, [r2, #cmp]

     *   ldr    r2, [r2, #add]

     *   movw   tmp, #page_align_mask

     *   bic    tmp, addrlo, tmp

     *   cmp    r0, tmp

     *

     * Otherwise we generate:

     *   shr    tmp, addrlo, #TARGET_PAGE_BITS

     *   add    r2, env, #high

     *   and    r0, tmp, #(CPU_TLB_SIZE - 1)

     *   add    r2, r2, r0, lsl #CPU_TLB_ENTRY_BITS

     *   ldr    r0, [r2, #cmp]

     *   ldr    r2, [r2, #add]

     *   tst    addrlo, #s_mask

     *   cmpeq  r0, tmp, lsl #TARGET_PAGE_BITS

     */</comment>

    <if_stmt pos:start="65:5" pos:end="77:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:31">(<expr pos:start="65:9" pos:end="65:30"><name pos:start="65:9" pos:end="65:30">use_armv7_instructions</name></expr>)</condition> <block pos:start="65:33" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:56">

        <expr_stmt pos:start="67:9" pos:end="69:56"><expr pos:start="67:9" pos:end="69:55"><call pos:start="67:9" pos:end="69:55"><name pos:start="67:9" pos:end="67:23">tcg_out_extract</name><argument_list pos:start="67:24" pos:end="69:55">(<argument pos:start="67:25" pos:end="67:25"><expr pos:start="67:25" pos:end="67:25"><name pos:start="67:25" pos:end="67:25">s</name></expr></argument>, <argument pos:start="67:28" pos:end="67:34"><expr pos:start="67:28" pos:end="67:34"><name pos:start="67:28" pos:end="67:34">COND_AL</name></expr></argument>, <argument pos:start="67:37" pos:end="67:46"><expr pos:start="67:37" pos:end="67:46"><name pos:start="67:37" pos:end="67:46">TCG_REG_R0</name></expr></argument>, <argument pos:start="67:49" pos:end="67:54"><expr pos:start="67:49" pos:end="67:54"><name pos:start="67:49" pos:end="67:54">addrlo</name></expr></argument>,

                        <argument pos:start="69:25" pos:end="69:40"><expr pos:start="69:25" pos:end="69:40"><name pos:start="69:25" pos:end="69:40">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="69:43" pos:end="69:54"><expr pos:start="69:43" pos:end="69:54"><name pos:start="69:43" pos:end="69:54">CPU_TLB_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="77:5">else <block pos:start="71:12" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:68">

        <expr_stmt pos:start="73:9" pos:end="75:68"><expr pos:start="73:9" pos:end="75:67"><call pos:start="73:9" pos:end="75:67"><name pos:start="73:9" pos:end="73:23">tcg_out_dat_reg</name><argument_list pos:start="73:24" pos:end="75:67">(<argument pos:start="73:25" pos:end="73:25"><expr pos:start="73:25" pos:end="73:25"><name pos:start="73:25" pos:end="73:25">s</name></expr></argument>, <argument pos:start="73:28" pos:end="73:34"><expr pos:start="73:28" pos:end="73:34"><name pos:start="73:28" pos:end="73:34">COND_AL</name></expr></argument>, <argument pos:start="73:37" pos:end="73:45"><expr pos:start="73:37" pos:end="73:45"><name pos:start="73:37" pos:end="73:45">ARITH_MOV</name></expr></argument>, <argument pos:start="73:48" pos:end="73:58"><expr pos:start="73:48" pos:end="73:58"><name pos:start="73:48" pos:end="73:58">TCG_REG_TMP</name></expr></argument>,

                        <argument pos:start="75:25" pos:end="75:25"><expr pos:start="75:25" pos:end="75:25"><literal type="number" pos:start="75:25" pos:end="75:25">0</literal></expr></argument>, <argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:33">addrlo</name></expr></argument>, <argument pos:start="75:36" pos:end="75:66"><expr pos:start="75:36" pos:end="75:66"><call pos:start="75:36" pos:end="75:66"><name pos:start="75:36" pos:end="75:48">SHIFT_IMM_LSR</name><argument_list pos:start="75:49" pos:end="75:66">(<argument pos:start="75:50" pos:end="75:65"><expr pos:start="75:50" pos:end="75:65"><name pos:start="75:50" pos:end="75:65">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:72">/* We checked that the offset is contained within 16 bits above.  */</comment>

    <if_stmt pos:start="83:5" pos:end="95:5"><if pos:start="83:5" pos:end="95:5">if <condition pos:start="83:8" pos:end="83:70">(<expr pos:start="83:9" pos:end="83:69"><name pos:start="83:9" pos:end="83:15">add_off</name> <operator pos:start="83:17" pos:end="83:17">&gt;</operator> <literal type="number" pos:start="83:19" pos:end="83:23">0xfff</literal> <operator pos:start="83:25" pos:end="83:26">||</operator> <operator pos:start="83:28" pos:end="83:28">(</operator><name pos:start="83:29" pos:end="83:50">use_armv6_instructions</name> <operator pos:start="83:52" pos:end="83:53">&amp;&amp;</operator> <name pos:start="83:55" pos:end="83:61">cmp_off</name> <operator pos:start="83:63" pos:end="83:63">&gt;</operator> <literal type="number" pos:start="83:65" pos:end="83:68">0xff</literal><operator pos:start="83:69" pos:end="83:69">)</operator></expr>)</condition> <block pos:start="83:72" pos:end="95:5">{<block_content pos:start="85:9" pos:end="93:24">

        <expr_stmt pos:start="85:9" pos:end="87:52"><expr pos:start="85:9" pos:end="87:51"><call pos:start="85:9" pos:end="87:51"><name pos:start="85:9" pos:end="85:23">tcg_out_dat_imm</name><argument_list pos:start="85:24" pos:end="87:51">(<argument pos:start="85:25" pos:end="85:25"><expr pos:start="85:25" pos:end="85:25"><name pos:start="85:25" pos:end="85:25">s</name></expr></argument>, <argument pos:start="85:28" pos:end="85:34"><expr pos:start="85:28" pos:end="85:34"><name pos:start="85:28" pos:end="85:34">COND_AL</name></expr></argument>, <argument pos:start="85:37" pos:end="85:45"><expr pos:start="85:37" pos:end="85:45"><name pos:start="85:37" pos:end="85:45">ARITH_ADD</name></expr></argument>, <argument pos:start="85:48" pos:end="85:57"><expr pos:start="85:48" pos:end="85:57"><name pos:start="85:48" pos:end="85:57">TCG_REG_R2</name></expr></argument>, <argument pos:start="85:60" pos:end="85:63"><expr pos:start="85:60" pos:end="85:63"><name pos:start="85:60" pos:end="85:63">base</name></expr></argument>,

                        <argument pos:start="87:25" pos:end="87:50"><expr pos:start="87:25" pos:end="87:50"><operator pos:start="87:25" pos:end="87:25">(</operator><literal type="number" pos:start="87:26" pos:end="87:27">24</literal> <operator pos:start="87:29" pos:end="87:30">&lt;&lt;</operator> <literal type="number" pos:start="87:32" pos:end="87:32">7</literal><operator pos:start="87:33" pos:end="87:33">)</operator> <operator pos:start="87:35" pos:end="87:35">|</operator> <operator pos:start="87:37" pos:end="87:37">(</operator><name pos:start="87:38" pos:end="87:44">cmp_off</name> <operator pos:start="87:46" pos:end="87:47">&gt;&gt;</operator> <literal type="number" pos:start="87:49" pos:end="87:49">8</literal><operator pos:start="87:50" pos:end="87:50">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:26"><expr pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:12">base</name> <operator pos:start="89:14" pos:end="89:14">=</operator> <name pos:start="89:16" pos:end="89:25">TCG_REG_R2</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:36"><expr pos:start="91:9" pos:end="91:35"><name pos:start="91:9" pos:end="91:15">add_off</name> <operator pos:start="91:17" pos:end="91:18">-=</operator> <name pos:start="91:20" pos:end="91:26">cmp_off</name> <operator pos:start="91:28" pos:end="91:28">&amp;</operator> <literal type="number" pos:start="91:30" pos:end="91:35">0xff00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:24"><expr pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:15">cmp_off</name> <operator pos:start="93:17" pos:end="93:18">&amp;=</operator> <literal type="number" pos:start="93:20" pos:end="93:23">0xff</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:32">(<expr pos:start="97:9" pos:end="97:31"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:31">use_armv7_instructions</name></expr>)</condition> <block pos:start="97:34" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:67">

        <expr_stmt pos:start="99:9" pos:end="101:67"><expr pos:start="99:9" pos:end="101:66"><call pos:start="99:9" pos:end="101:66"><name pos:start="99:9" pos:end="99:23">tcg_out_dat_imm</name><argument_list pos:start="99:24" pos:end="101:66">(<argument pos:start="99:25" pos:end="99:25"><expr pos:start="99:25" pos:end="99:25"><name pos:start="99:25" pos:end="99:25">s</name></expr></argument>, <argument pos:start="99:28" pos:end="99:34"><expr pos:start="99:28" pos:end="99:34"><name pos:start="99:28" pos:end="99:34">COND_AL</name></expr></argument>, <argument pos:start="99:37" pos:end="99:45"><expr pos:start="99:37" pos:end="99:45"><name pos:start="99:37" pos:end="99:45">ARITH_AND</name></expr></argument>,

                        <argument pos:start="101:25" pos:end="101:34"><expr pos:start="101:25" pos:end="101:34"><name pos:start="101:25" pos:end="101:34">TCG_REG_R0</name></expr></argument>, <argument pos:start="101:37" pos:end="101:47"><expr pos:start="101:37" pos:end="101:47"><name pos:start="101:37" pos:end="101:47">TCG_REG_TMP</name></expr></argument>, <argument pos:start="101:50" pos:end="101:65"><expr pos:start="101:50" pos:end="101:65"><name pos:start="101:50" pos:end="101:61">CPU_TLB_SIZE</name> <operator pos:start="101:63" pos:end="101:63">-</operator> <literal type="number" pos:start="101:65" pos:end="101:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="107:67"><expr pos:start="105:5" pos:end="107:66"><call pos:start="105:5" pos:end="107:66"><name pos:start="105:5" pos:end="105:19">tcg_out_dat_reg</name><argument_list pos:start="105:20" pos:end="107:66">(<argument pos:start="105:21" pos:end="105:21"><expr pos:start="105:21" pos:end="105:21"><name pos:start="105:21" pos:end="105:21">s</name></expr></argument>, <argument pos:start="105:24" pos:end="105:30"><expr pos:start="105:24" pos:end="105:30"><name pos:start="105:24" pos:end="105:30">COND_AL</name></expr></argument>, <argument pos:start="105:33" pos:end="105:41"><expr pos:start="105:33" pos:end="105:41"><name pos:start="105:33" pos:end="105:41">ARITH_ADD</name></expr></argument>, <argument pos:start="105:44" pos:end="105:53"><expr pos:start="105:44" pos:end="105:53"><name pos:start="105:44" pos:end="105:53">TCG_REG_R2</name></expr></argument>, <argument pos:start="105:56" pos:end="105:59"><expr pos:start="105:56" pos:end="105:59"><name pos:start="105:56" pos:end="105:59">base</name></expr></argument>,

                    <argument pos:start="107:21" pos:end="107:30"><expr pos:start="107:21" pos:end="107:30"><name pos:start="107:21" pos:end="107:30">TCG_REG_R0</name></expr></argument>, <argument pos:start="107:33" pos:end="107:65"><expr pos:start="107:33" pos:end="107:65"><call pos:start="107:33" pos:end="107:65"><name pos:start="107:33" pos:end="107:45">SHIFT_IMM_LSL</name><argument_list pos:start="107:46" pos:end="107:65">(<argument pos:start="107:47" pos:end="107:64"><expr pos:start="107:47" pos:end="107:64"><name pos:start="107:47" pos:end="107:64">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="111:5" pos:end="115:57">/* Load the tlb comparator.  Use ldrd if needed and available,

       but due to how the pointer needs setting up, ldm isn't useful.

       Base arm5 doesn't have ldrd, but armv5te does.  */</comment>

    <if_stmt pos:start="117:5" pos:end="131:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:57">(<expr pos:start="117:9" pos:end="117:56"><name pos:start="117:9" pos:end="117:30">use_armv6_instructions</name> <operator pos:start="117:32" pos:end="117:33">&amp;&amp;</operator> <name pos:start="117:35" pos:end="117:50">TARGET_LONG_BITS</name> <operator pos:start="117:52" pos:end="117:53">==</operator> <literal type="number" pos:start="117:55" pos:end="117:56">64</literal></expr>)</condition> <block pos:start="117:59" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:68">

        <expr_stmt pos:start="119:9" pos:end="119:68"><expr pos:start="119:9" pos:end="119:67"><call pos:start="119:9" pos:end="119:67"><name pos:start="119:9" pos:end="119:22">tcg_out_ldrd_8</name><argument_list pos:start="119:23" pos:end="119:67">(<argument pos:start="119:24" pos:end="119:24"><expr pos:start="119:24" pos:end="119:24"><name pos:start="119:24" pos:end="119:24">s</name></expr></argument>, <argument pos:start="119:27" pos:end="119:33"><expr pos:start="119:27" pos:end="119:33"><name pos:start="119:27" pos:end="119:33">COND_AL</name></expr></argument>, <argument pos:start="119:36" pos:end="119:45"><expr pos:start="119:36" pos:end="119:45"><name pos:start="119:36" pos:end="119:45">TCG_REG_R0</name></expr></argument>, <argument pos:start="119:48" pos:end="119:57"><expr pos:start="119:48" pos:end="119:57"><name pos:start="119:48" pos:end="119:57">TCG_REG_R2</name></expr></argument>, <argument pos:start="119:60" pos:end="119:66"><expr pos:start="119:60" pos:end="119:66"><name pos:start="119:60" pos:end="119:66">cmp_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="121:7" pos:end="131:5">else <block pos:start="121:12" pos:end="131:5">{<block_content pos:start="123:9" pos:end="129:9">

        <expr_stmt pos:start="123:9" pos:end="123:69"><expr pos:start="123:9" pos:end="123:68"><call pos:start="123:9" pos:end="123:68"><name pos:start="123:9" pos:end="123:23">tcg_out_ld32_12</name><argument_list pos:start="123:24" pos:end="123:68">(<argument pos:start="123:25" pos:end="123:25"><expr pos:start="123:25" pos:end="123:25"><name pos:start="123:25" pos:end="123:25">s</name></expr></argument>, <argument pos:start="123:28" pos:end="123:34"><expr pos:start="123:28" pos:end="123:34"><name pos:start="123:28" pos:end="123:34">COND_AL</name></expr></argument>, <argument pos:start="123:37" pos:end="123:46"><expr pos:start="123:37" pos:end="123:46"><name pos:start="123:37" pos:end="123:46">TCG_REG_R0</name></expr></argument>, <argument pos:start="123:49" pos:end="123:58"><expr pos:start="123:49" pos:end="123:58"><name pos:start="123:49" pos:end="123:58">TCG_REG_R2</name></expr></argument>, <argument pos:start="123:61" pos:end="123:67"><expr pos:start="123:61" pos:end="123:67"><name pos:start="123:61" pos:end="123:67">cmp_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="129:9"><if pos:start="125:9" pos:end="129:9">if <condition pos:start="125:12" pos:end="125:35">(<expr pos:start="125:13" pos:end="125:34"><name pos:start="125:13" pos:end="125:28">TARGET_LONG_BITS</name> <operator pos:start="125:30" pos:end="125:31">==</operator> <literal type="number" pos:start="125:33" pos:end="125:34">64</literal></expr>)</condition> <block pos:start="125:37" pos:end="129:9">{<block_content pos:start="127:13" pos:end="127:77">

            <expr_stmt pos:start="127:13" pos:end="127:77"><expr pos:start="127:13" pos:end="127:76"><call pos:start="127:13" pos:end="127:76"><name pos:start="127:13" pos:end="127:27">tcg_out_ld32_12</name><argument_list pos:start="127:28" pos:end="127:76">(<argument pos:start="127:29" pos:end="127:29"><expr pos:start="127:29" pos:end="127:29"><name pos:start="127:29" pos:end="127:29">s</name></expr></argument>, <argument pos:start="127:32" pos:end="127:38"><expr pos:start="127:32" pos:end="127:38"><name pos:start="127:32" pos:end="127:38">COND_AL</name></expr></argument>, <argument pos:start="127:41" pos:end="127:50"><expr pos:start="127:41" pos:end="127:50"><name pos:start="127:41" pos:end="127:50">TCG_REG_R1</name></expr></argument>, <argument pos:start="127:53" pos:end="127:62"><expr pos:start="127:53" pos:end="127:62"><name pos:start="127:53" pos:end="127:62">TCG_REG_R2</name></expr></argument>, <argument pos:start="127:65" pos:end="127:75"><expr pos:start="127:65" pos:end="127:75"><name pos:start="127:65" pos:end="127:71">cmp_off</name> <operator pos:start="127:73" pos:end="127:73">+</operator> <literal type="number" pos:start="127:75" pos:end="127:75">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:31">/* Load the tlb addend.  */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:65"><expr pos:start="137:5" pos:end="137:64"><call pos:start="137:5" pos:end="137:64"><name pos:start="137:5" pos:end="137:19">tcg_out_ld32_12</name><argument_list pos:start="137:20" pos:end="137:64">(<argument pos:start="137:21" pos:end="137:21"><expr pos:start="137:21" pos:end="137:21"><name pos:start="137:21" pos:end="137:21">s</name></expr></argument>, <argument pos:start="137:24" pos:end="137:30"><expr pos:start="137:24" pos:end="137:30"><name pos:start="137:24" pos:end="137:30">COND_AL</name></expr></argument>, <argument pos:start="137:33" pos:end="137:42"><expr pos:start="137:33" pos:end="137:42"><name pos:start="137:33" pos:end="137:42">TCG_REG_R2</name></expr></argument>, <argument pos:start="137:45" pos:end="137:54"><expr pos:start="137:45" pos:end="137:54"><name pos:start="137:45" pos:end="137:54">TCG_REG_R2</name></expr></argument>, <argument pos:start="137:57" pos:end="137:63"><expr pos:start="137:57" pos:end="137:63"><name pos:start="137:57" pos:end="137:63">add_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="143:58">/* Check alignment.  We don't support inline unaligned acceses,

       but we can easily support overalignment checks.  */</comment>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:24">(<expr pos:start="145:9" pos:end="145:23"><name pos:start="145:9" pos:end="145:14">a_bits</name> <operator pos:start="145:16" pos:end="145:16">&lt;</operator> <name pos:start="145:18" pos:end="145:23">s_bits</name></expr>)</condition> <block pos:start="145:26" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:24">

        <expr_stmt pos:start="147:9" pos:end="147:24"><expr pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:14">a_bits</name> <operator pos:start="147:16" pos:end="147:16">=</operator> <name pos:start="147:18" pos:end="147:23">s_bits</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="153:5" pos:end="195:5"><if pos:start="153:5" pos:end="179:5">if <condition pos:start="153:8" pos:end="153:31">(<expr pos:start="153:9" pos:end="153:30"><name pos:start="153:9" pos:end="153:30">use_armv7_instructions</name></expr>)</condition> <block pos:start="153:33" pos:end="179:5">{<block_content pos:start="155:9" pos:end="177:78">

        <decl_stmt pos:start="155:9" pos:end="155:74"><decl pos:start="155:9" pos:end="155:73"><type pos:start="155:9" pos:end="155:24"><name pos:start="155:9" pos:end="155:24">tcg_target_ulong</name></type> <name pos:start="155:26" pos:end="155:29">mask</name> <init pos:start="155:31" pos:end="155:73">= <expr pos:start="155:33" pos:end="155:73"><operator pos:start="155:33" pos:end="155:33">~</operator><operator pos:start="155:34" pos:end="155:34">(</operator><name pos:start="155:35" pos:end="155:50">TARGET_PAGE_MASK</name> <operator pos:start="155:52" pos:end="155:52">|</operator> <operator pos:start="155:54" pos:end="155:54">(</operator><operator pos:start="155:55" pos:end="155:55">(</operator><literal type="number" pos:start="155:56" pos:end="155:56">1</literal> <operator pos:start="155:58" pos:end="155:59">&lt;&lt;</operator> <name pos:start="155:61" pos:end="155:66">a_bits</name><operator pos:start="155:67" pos:end="155:67">)</operator> <operator pos:start="155:69" pos:end="155:69">-</operator> <literal type="number" pos:start="155:71" pos:end="155:71">1</literal><operator pos:start="155:72" pos:end="155:72">)</operator><operator pos:start="155:73" pos:end="155:73">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="157:9" pos:end="157:35"><decl pos:start="157:9" pos:end="157:34"><type pos:start="157:9" pos:end="157:11"><name pos:start="157:9" pos:end="157:11">int</name></type> <name pos:start="157:13" pos:end="157:15">rot</name> <init pos:start="157:17" pos:end="157:34">= <expr pos:start="157:19" pos:end="157:34"><call pos:start="157:19" pos:end="157:34"><name pos:start="157:19" pos:end="157:28">encode_imm</name><argument_list pos:start="157:29" pos:end="157:34">(<argument pos:start="157:30" pos:end="157:33"><expr pos:start="157:30" pos:end="157:33"><name pos:start="157:30" pos:end="157:33">mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="161:9" pos:end="175:9"><if pos:start="161:9" pos:end="167:9">if <condition pos:start="161:12" pos:end="161:21">(<expr pos:start="161:13" pos:end="161:20"><name pos:start="161:13" pos:end="161:15">rot</name> <operator pos:start="161:17" pos:end="161:18">&gt;=</operator> <literal type="number" pos:start="161:20" pos:end="161:20">0</literal></expr>)</condition> <block pos:start="161:23" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:58"> 

            <expr_stmt pos:start="163:13" pos:end="165:58"><expr pos:start="163:13" pos:end="165:57"><call pos:start="163:13" pos:end="165:57"><name pos:start="163:13" pos:end="163:27">tcg_out_dat_imm</name><argument_list pos:start="163:28" pos:end="165:57">(<argument pos:start="163:29" pos:end="163:29"><expr pos:start="163:29" pos:end="163:29"><name pos:start="163:29" pos:end="163:29">s</name></expr></argument>, <argument pos:start="163:32" pos:end="163:38"><expr pos:start="163:32" pos:end="163:38"><name pos:start="163:32" pos:end="163:38">COND_AL</name></expr></argument>, <argument pos:start="163:41" pos:end="163:49"><expr pos:start="163:41" pos:end="163:49"><name pos:start="163:41" pos:end="163:49">ARITH_BIC</name></expr></argument>, <argument pos:start="163:52" pos:end="163:62"><expr pos:start="163:52" pos:end="163:62"><name pos:start="163:52" pos:end="163:62">TCG_REG_TMP</name></expr></argument>, <argument pos:start="163:65" pos:end="163:70"><expr pos:start="163:65" pos:end="163:70"><name pos:start="163:65" pos:end="163:70">addrlo</name></expr></argument>,

                            <argument pos:start="165:29" pos:end="165:56"><expr pos:start="165:29" pos:end="165:56"><call pos:start="165:29" pos:end="165:43"><name pos:start="165:29" pos:end="165:32">rotl</name><argument_list pos:start="165:33" pos:end="165:43">(<argument pos:start="165:34" pos:end="165:37"><expr pos:start="165:34" pos:end="165:37"><name pos:start="165:34" pos:end="165:37">mask</name></expr></argument>, <argument pos:start="165:40" pos:end="165:42"><expr pos:start="165:40" pos:end="165:42"><name pos:start="165:40" pos:end="165:42">rot</name></expr></argument>)</argument_list></call> <operator pos:start="165:45" pos:end="165:45">|</operator> <operator pos:start="165:47" pos:end="165:47">(</operator><name pos:start="165:48" pos:end="165:50">rot</name> <operator pos:start="165:52" pos:end="165:53">&lt;&lt;</operator> <literal type="number" pos:start="165:55" pos:end="165:55">7</literal><operator pos:start="165:56" pos:end="165:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="167:11" pos:end="175:9">else <block pos:start="167:16" pos:end="175:9">{<block_content pos:start="169:13" pos:end="173:52">

            <expr_stmt pos:start="169:13" pos:end="169:58"><expr pos:start="169:13" pos:end="169:57"><call pos:start="169:13" pos:end="169:57"><name pos:start="169:13" pos:end="169:26">tcg_out_movi32</name><argument_list pos:start="169:27" pos:end="169:57">(<argument pos:start="169:28" pos:end="169:28"><expr pos:start="169:28" pos:end="169:28"><name pos:start="169:28" pos:end="169:28">s</name></expr></argument>, <argument pos:start="169:31" pos:end="169:37"><expr pos:start="169:31" pos:end="169:37"><name pos:start="169:31" pos:end="169:37">COND_AL</name></expr></argument>, <argument pos:start="169:40" pos:end="169:50"><expr pos:start="169:40" pos:end="169:50"><name pos:start="169:40" pos:end="169:50">TCG_REG_TMP</name></expr></argument>, <argument pos:start="169:53" pos:end="169:56"><expr pos:start="169:53" pos:end="169:56"><name pos:start="169:53" pos:end="169:56">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="173:52"><expr pos:start="171:13" pos:end="173:51"><call pos:start="171:13" pos:end="173:51"><name pos:start="171:13" pos:end="171:27">tcg_out_dat_reg</name><argument_list pos:start="171:28" pos:end="173:51">(<argument pos:start="171:29" pos:end="171:29"><expr pos:start="171:29" pos:end="171:29"><name pos:start="171:29" pos:end="171:29">s</name></expr></argument>, <argument pos:start="171:32" pos:end="171:38"><expr pos:start="171:32" pos:end="171:38"><name pos:start="171:32" pos:end="171:38">COND_AL</name></expr></argument>, <argument pos:start="171:41" pos:end="171:49"><expr pos:start="171:41" pos:end="171:49"><name pos:start="171:41" pos:end="171:49">ARITH_BIC</name></expr></argument>, <argument pos:start="171:52" pos:end="171:62"><expr pos:start="171:52" pos:end="171:62"><name pos:start="171:52" pos:end="171:62">TCG_REG_TMP</name></expr></argument>,

                            <argument pos:start="173:29" pos:end="173:34"><expr pos:start="173:29" pos:end="173:34"><name pos:start="173:29" pos:end="173:34">addrlo</name></expr></argument>, <argument pos:start="173:37" pos:end="173:47"><expr pos:start="173:37" pos:end="173:47"><name pos:start="173:37" pos:end="173:47">TCG_REG_TMP</name></expr></argument>, <argument pos:start="173:50" pos:end="173:50"><expr pos:start="173:50" pos:end="173:50"><literal type="number" pos:start="173:50" pos:end="173:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:78"><expr pos:start="177:9" pos:end="177:77"><call pos:start="177:9" pos:end="177:77"><name pos:start="177:9" pos:end="177:23">tcg_out_dat_reg</name><argument_list pos:start="177:24" pos:end="177:77">(<argument pos:start="177:25" pos:end="177:25"><expr pos:start="177:25" pos:end="177:25"><name pos:start="177:25" pos:end="177:25">s</name></expr></argument>, <argument pos:start="177:28" pos:end="177:34"><expr pos:start="177:28" pos:end="177:34"><name pos:start="177:28" pos:end="177:34">COND_AL</name></expr></argument>, <argument pos:start="177:37" pos:end="177:45"><expr pos:start="177:37" pos:end="177:45"><name pos:start="177:37" pos:end="177:45">ARITH_CMP</name></expr></argument>, <argument pos:start="177:48" pos:end="177:48"><expr pos:start="177:48" pos:end="177:48"><literal type="number" pos:start="177:48" pos:end="177:48">0</literal></expr></argument>, <argument pos:start="177:51" pos:end="177:60"><expr pos:start="177:51" pos:end="177:60"><name pos:start="177:51" pos:end="177:60">TCG_REG_R0</name></expr></argument>, <argument pos:start="177:63" pos:end="177:73"><expr pos:start="177:63" pos:end="177:73"><name pos:start="177:63" pos:end="177:73">TCG_REG_TMP</name></expr></argument>, <argument pos:start="177:76" pos:end="177:76"><expr pos:start="177:76" pos:end="177:76"><literal type="number" pos:start="177:76" pos:end="177:76">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="179:7" pos:end="195:5">else <block pos:start="179:12" pos:end="195:5">{<block_content pos:start="181:9" pos:end="193:57">

        <if_stmt pos:start="181:9" pos:end="187:9"><if pos:start="181:9" pos:end="187:9">if <condition pos:start="181:12" pos:end="181:19">(<expr pos:start="181:13" pos:end="181:18"><name pos:start="181:13" pos:end="181:18">a_bits</name></expr>)</condition> <block pos:start="181:21" pos:end="187:9">{<block_content pos:start="183:13" pos:end="185:47">

            <expr_stmt pos:start="183:13" pos:end="185:47"><expr pos:start="183:13" pos:end="185:46"><call pos:start="183:13" pos:end="185:46"><name pos:start="183:13" pos:end="183:27">tcg_out_dat_imm</name><argument_list pos:start="183:28" pos:end="185:46">(<argument pos:start="183:29" pos:end="183:29"><expr pos:start="183:29" pos:end="183:29"><name pos:start="183:29" pos:end="183:29">s</name></expr></argument>, <argument pos:start="183:32" pos:end="183:38"><expr pos:start="183:32" pos:end="183:38"><name pos:start="183:32" pos:end="183:38">COND_AL</name></expr></argument>, <argument pos:start="183:41" pos:end="183:49"><expr pos:start="183:41" pos:end="183:49"><name pos:start="183:41" pos:end="183:49">ARITH_TST</name></expr></argument>, <argument pos:start="183:52" pos:end="183:52"><expr pos:start="183:52" pos:end="183:52"><literal type="number" pos:start="183:52" pos:end="183:52">0</literal></expr></argument>, <argument pos:start="183:55" pos:end="183:60"><expr pos:start="183:55" pos:end="183:60"><name pos:start="183:55" pos:end="183:60">addrlo</name></expr></argument>,

                            <argument pos:start="185:29" pos:end="185:45"><expr pos:start="185:29" pos:end="185:45"><operator pos:start="185:29" pos:end="185:29">(</operator><literal type="number" pos:start="185:30" pos:end="185:30">1</literal> <operator pos:start="185:32" pos:end="185:33">&lt;&lt;</operator> <name pos:start="185:35" pos:end="185:40">a_bits</name><operator pos:start="185:41" pos:end="185:41">)</operator> <operator pos:start="185:43" pos:end="185:43">-</operator> <literal type="number" pos:start="185:45" pos:end="185:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="189:9" pos:end="193:57"><expr pos:start="189:9" pos:end="193:56"><call pos:start="189:9" pos:end="193:56"><name pos:start="189:9" pos:end="189:23">tcg_out_dat_reg</name><argument_list pos:start="189:24" pos:end="193:56">(<argument pos:start="189:25" pos:end="189:25"><expr pos:start="189:25" pos:end="189:25"><name pos:start="189:25" pos:end="189:25">s</name></expr></argument>, <argument pos:start="189:28" pos:end="189:55"><expr pos:start="189:28" pos:end="189:55"><operator pos:start="189:28" pos:end="189:28">(</operator><ternary pos:start="189:29" pos:end="189:54"><condition pos:start="189:29" pos:end="189:36"><expr pos:start="189:29" pos:end="189:34"><name pos:start="189:29" pos:end="189:34">a_bits</name></expr> ?</condition><then pos:start="189:38" pos:end="189:44"> <expr pos:start="189:38" pos:end="189:44"><name pos:start="189:38" pos:end="189:44">COND_EQ</name></expr> </then><else pos:start="189:46" pos:end="189:54">: <expr pos:start="189:48" pos:end="189:54"><name pos:start="189:48" pos:end="189:54">COND_AL</name></expr></else></ternary><operator pos:start="189:55" pos:end="189:55">)</operator></expr></argument>, <argument pos:start="189:58" pos:end="189:66"><expr pos:start="189:58" pos:end="189:66"><name pos:start="189:58" pos:end="189:66">ARITH_CMP</name></expr></argument>,

                        <argument pos:start="191:25" pos:end="191:25"><expr pos:start="191:25" pos:end="191:25"><literal type="number" pos:start="191:25" pos:end="191:25">0</literal></expr></argument>, <argument pos:start="191:28" pos:end="191:37"><expr pos:start="191:28" pos:end="191:37"><name pos:start="191:28" pos:end="191:37">TCG_REG_R0</name></expr></argument>, <argument pos:start="191:40" pos:end="191:50"><expr pos:start="191:40" pos:end="191:50"><name pos:start="191:40" pos:end="191:50">TCG_REG_TMP</name></expr></argument>,

                        <argument pos:start="193:25" pos:end="193:55"><expr pos:start="193:25" pos:end="193:55"><call pos:start="193:25" pos:end="193:55"><name pos:start="193:25" pos:end="193:37">SHIFT_IMM_LSL</name><argument_list pos:start="193:38" pos:end="193:55">(<argument pos:start="193:39" pos:end="193:54"><expr pos:start="193:39" pos:end="193:54"><name pos:start="193:39" pos:end="193:54">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="199:5" pos:end="203:5"><if pos:start="199:5" pos:end="203:5">if <condition pos:start="199:8" pos:end="199:31">(<expr pos:start="199:9" pos:end="199:30"><name pos:start="199:9" pos:end="199:24">TARGET_LONG_BITS</name> <operator pos:start="199:26" pos:end="199:27">==</operator> <literal type="number" pos:start="199:29" pos:end="199:30">64</literal></expr>)</condition> <block pos:start="199:33" pos:end="203:5">{<block_content pos:start="201:9" pos:end="201:73">

        <expr_stmt pos:start="201:9" pos:end="201:73"><expr pos:start="201:9" pos:end="201:72"><call pos:start="201:9" pos:end="201:72"><name pos:start="201:9" pos:end="201:23">tcg_out_dat_reg</name><argument_list pos:start="201:24" pos:end="201:72">(<argument pos:start="201:25" pos:end="201:25"><expr pos:start="201:25" pos:end="201:25"><name pos:start="201:25" pos:end="201:25">s</name></expr></argument>, <argument pos:start="201:28" pos:end="201:34"><expr pos:start="201:28" pos:end="201:34"><name pos:start="201:28" pos:end="201:34">COND_EQ</name></expr></argument>, <argument pos:start="201:37" pos:end="201:45"><expr pos:start="201:37" pos:end="201:45"><name pos:start="201:37" pos:end="201:45">ARITH_CMP</name></expr></argument>, <argument pos:start="201:48" pos:end="201:48"><expr pos:start="201:48" pos:end="201:48"><literal type="number" pos:start="201:48" pos:end="201:48">0</literal></expr></argument>, <argument pos:start="201:51" pos:end="201:60"><expr pos:start="201:51" pos:end="201:60"><name pos:start="201:51" pos:end="201:60">TCG_REG_R1</name></expr></argument>, <argument pos:start="201:63" pos:end="201:68"><expr pos:start="201:63" pos:end="201:68"><name pos:start="201:63" pos:end="201:68">addrhi</name></expr></argument>, <argument pos:start="201:71" pos:end="201:71"><expr pos:start="201:71" pos:end="201:71"><literal type="number" pos:start="201:71" pos:end="201:71">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="207:5" pos:end="207:22">return <expr pos:start="207:12" pos:end="207:21"><name pos:start="207:12" pos:end="207:21">TCG_REG_R2</name></expr>;</return>

</block_content>}</block></function>
</unit>
