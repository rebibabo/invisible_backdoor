<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25525.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">pcilg_service_call</name><parameter_list pos:start="1:23" pos:end="1:60">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:30">S390CPU</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">cpu</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:47"><decl pos:start="1:38" pos:end="1:47"><type pos:start="1:38" pos:end="1:47"><name pos:start="1:38" pos:end="1:44">uint8_t</name></type> <name pos:start="1:46" pos:end="1:47">r1</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:59"><decl pos:start="1:50" pos:end="1:59"><type pos:start="1:50" pos:end="1:59"><name pos:start="1:50" pos:end="1:56">uint8_t</name></type> <name pos:start="1:58" pos:end="1:59">r2</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">CPUS390XState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">env</name> <init pos:start="5:24" pos:end="5:34">= <expr pos:start="5:26" pos:end="5:34"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:34"><name pos:start="5:27" pos:end="5:29">cpu</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">S390PCIBusDevice</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:27">pbdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:17">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:15">fh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:17">pcias</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:36"><expr pos:start="21:5" pos:end="21:35"><call pos:start="21:5" pos:end="21:35"><name pos:start="21:5" pos:end="21:25">cpu_synchronize_state</name><argument_list pos:start="21:26" pos:end="21:35">(<argument pos:start="21:27" pos:end="21:34"><expr pos:start="21:27" pos:end="21:34"><call pos:start="21:27" pos:end="21:34"><name pos:start="21:27" pos:end="21:29">CPU</name><argument_list pos:start="21:30" pos:end="21:34">(<argument pos:start="21:31" pos:end="21:33"><expr pos:start="21:31" pos:end="21:33"><name pos:start="21:31" pos:end="21:33">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:40">(<expr pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:11">env</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:16">psw</name><operator pos:start="25:17" pos:end="25:17">.</operator><name pos:start="25:18" pos:end="25:21">mask</name></name> <operator pos:start="25:23" pos:end="25:23">&amp;</operator> <name pos:start="25:25" pos:end="25:39">PSW_MASK_PSTATE</name></expr>)</condition> <block pos:start="25:42" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:50"><expr pos:start="27:9" pos:end="27:49"><call pos:start="27:9" pos:end="27:49"><name pos:start="27:9" pos:end="27:25">program_interrupt</name><argument_list pos:start="27:26" pos:end="27:49">(<argument pos:start="27:27" pos:end="27:29"><expr pos:start="27:27" pos:end="27:29"><name pos:start="27:27" pos:end="27:29">env</name></expr></argument>, <argument pos:start="27:32" pos:end="27:45"><expr pos:start="27:32" pos:end="27:45"><name pos:start="27:32" pos:end="27:45">PGM_PRIVILEGED</name></expr></argument>, <argument pos:start="27:48" pos:end="27:48"><expr pos:start="27:48" pos:end="27:48"><literal type="number" pos:start="27:48" pos:end="27:48">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:17">(<expr pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:10">r2</name> <operator pos:start="35:12" pos:end="35:12">&amp;</operator> <literal type="number" pos:start="35:14" pos:end="35:16">0x1</literal></expr>)</condition> <block pos:start="35:19" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:17">

        <expr_stmt pos:start="37:9" pos:end="37:53"><expr pos:start="37:9" pos:end="37:52"><call pos:start="37:9" pos:end="37:52"><name pos:start="37:9" pos:end="37:25">program_interrupt</name><argument_list pos:start="37:26" pos:end="37:52">(<argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">env</name></expr></argument>, <argument pos:start="37:32" pos:end="37:48"><expr pos:start="37:32" pos:end="37:48"><name pos:start="37:32" pos:end="37:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="37:51" pos:end="37:51"><expr pos:start="37:51" pos:end="37:51"><literal type="number" pos:start="37:51" pos:end="37:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:17">return <expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:6">fh</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <name pos:start="45:10" pos:end="45:22"><name pos:start="45:10" pos:end="45:12">env</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:18">regs</name><index pos:start="45:19" pos:end="45:22">[<expr pos:start="45:20" pos:end="45:21"><name pos:start="45:20" pos:end="45:21">r2</name></expr>]</index></name> <operator pos:start="45:24" pos:end="45:25">&gt;&gt;</operator> <literal type="number" pos:start="45:27" pos:end="45:28">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:40"><expr pos:start="47:5" pos:end="47:39"><name pos:start="47:5" pos:end="47:9">pcias</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <operator pos:start="47:13" pos:end="47:13">(</operator><name pos:start="47:14" pos:end="47:26"><name pos:start="47:14" pos:end="47:16">env</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:22">regs</name><index pos:start="47:23" pos:end="47:26">[<expr pos:start="47:24" pos:end="47:25"><name pos:start="47:24" pos:end="47:25">r2</name></expr>]</index></name> <operator pos:start="47:28" pos:end="47:29">&gt;&gt;</operator> <literal type="number" pos:start="47:31" pos:end="47:32">16</literal><operator pos:start="47:33" pos:end="47:33">)</operator> <operator pos:start="47:35" pos:end="47:35">&amp;</operator> <literal type="number" pos:start="47:37" pos:end="47:39">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:30"><expr pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:7">len</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <name pos:start="49:11" pos:end="49:23"><name pos:start="49:11" pos:end="49:13">env</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:19">regs</name><index pos:start="49:20" pos:end="49:23">[<expr pos:start="49:21" pos:end="49:22"><name pos:start="49:21" pos:end="49:22">r2</name></expr>]</index></name> <operator pos:start="49:25" pos:end="49:25">&amp;</operator> <literal type="number" pos:start="49:27" pos:end="49:29">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:10">offset</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <name pos:start="51:14" pos:end="51:30"><name pos:start="51:14" pos:end="51:16">env</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:22">regs</name><index pos:start="51:23" pos:end="51:30">[<expr pos:start="51:24" pos:end="51:29"><name pos:start="51:24" pos:end="51:25">r2</name> <operator pos:start="51:27" pos:end="51:27">+</operator> <literal type="number" pos:start="51:29" pos:end="51:29">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:40"><expr pos:start="55:5" pos:end="55:39"><name pos:start="55:5" pos:end="55:9">pbdev</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <call pos:start="55:13" pos:end="55:39"><name pos:start="55:13" pos:end="55:35">s390_pci_find_dev_by_fh</name><argument_list pos:start="55:36" pos:end="55:39">(<argument pos:start="55:37" pos:end="55:38"><expr pos:start="55:37" pos:end="55:38"><name pos:start="55:37" pos:end="55:38">fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:48">(<expr pos:start="57:9" pos:end="57:47"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:14">pbdev</name> <operator pos:start="57:16" pos:end="57:17">||</operator> <operator pos:start="57:19" pos:end="57:19">!</operator><operator pos:start="57:20" pos:end="57:20">(</operator><name pos:start="57:21" pos:end="57:29"><name pos:start="57:21" pos:end="57:25">pbdev</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:29">fh</name></name> <operator pos:start="57:31" pos:end="57:31">&amp;</operator> <name pos:start="57:33" pos:end="57:46">FH_MASK_ENABLE</name><operator pos:start="57:47" pos:end="57:47">)</operator></expr>)</condition> <block pos:start="57:50" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:17">

        <expr_stmt pos:start="59:9" pos:end="59:38"><expr pos:start="59:9" pos:end="59:37"><call pos:start="59:9" pos:end="59:37"><name pos:start="59:9" pos:end="59:15">DPRINTF</name><argument_list pos:start="59:16" pos:end="59:37">(<argument pos:start="59:17" pos:end="59:36"><expr pos:start="59:17" pos:end="59:36"><literal type="string" pos:start="59:17" pos:end="59:36">"pcilg no pci dev\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:45"><expr pos:start="61:9" pos:end="61:44"><call pos:start="61:9" pos:end="61:44"><name pos:start="61:9" pos:end="61:13">setcc</name><argument_list pos:start="61:14" pos:end="61:44">(<argument pos:start="61:15" pos:end="61:17"><expr pos:start="61:15" pos:end="61:17"><name pos:start="61:15" pos:end="61:17">cpu</name></expr></argument>, <argument pos:start="61:20" pos:end="61:43"><expr pos:start="61:20" pos:end="61:43"><name pos:start="61:20" pos:end="61:43">ZPCI_PCI_LS_INVAL_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:17">return <expr pos:start="63:16" pos:end="63:16"><literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="77:5"><if pos:start="69:5" pos:end="77:5">if <condition pos:start="69:8" pos:end="69:29">(<expr pos:start="69:9" pos:end="69:28"><name pos:start="69:9" pos:end="69:28"><name pos:start="69:9" pos:end="69:13">pbdev</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:28">lgstg_blocked</name></name></expr>)</condition> <block pos:start="69:31" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:17">

        <expr_stmt pos:start="71:9" pos:end="71:36"><expr pos:start="71:9" pos:end="71:35"><call pos:start="71:9" pos:end="71:35"><name pos:start="71:9" pos:end="71:13">setcc</name><argument_list pos:start="71:14" pos:end="71:35">(<argument pos:start="71:15" pos:end="71:17"><expr pos:start="71:15" pos:end="71:17"><name pos:start="71:15" pos:end="71:17">cpu</name></expr></argument>, <argument pos:start="71:20" pos:end="71:34"><expr pos:start="71:20" pos:end="71:34"><name pos:start="71:20" pos:end="71:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:59"><expr pos:start="73:9" pos:end="73:58"><call pos:start="73:9" pos:end="73:58"><name pos:start="73:9" pos:end="73:28">s390_set_status_code</name><argument_list pos:start="73:29" pos:end="73:58">(<argument pos:start="73:30" pos:end="73:32"><expr pos:start="73:30" pos:end="73:32"><name pos:start="73:30" pos:end="73:32">env</name></expr></argument>, <argument pos:start="73:35" pos:end="73:36"><expr pos:start="73:35" pos:end="73:36"><name pos:start="73:35" pos:end="73:36">r2</name></expr></argument>, <argument pos:start="73:39" pos:end="73:57"><expr pos:start="73:39" pos:end="73:57"><name pos:start="73:39" pos:end="73:57">ZPCI_PCI_ST_BLOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:17">return <expr pos:start="75:16" pos:end="75:16"><literal type="number" pos:start="75:16" pos:end="75:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="155:5"><if pos:start="81:5" pos:end="97:5">if <condition pos:start="81:8" pos:end="81:18">(<expr pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:13">pcias</name> <operator pos:start="81:15" pos:end="81:15">&lt;</operator> <literal type="number" pos:start="81:17" pos:end="81:17">6</literal></expr>)</condition> <block pos:start="81:20" pos:end="97:5">{<block_content pos:start="83:9" pos:end="95:60">

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:39">(<expr pos:start="83:13" pos:end="83:38"><operator pos:start="83:13" pos:end="83:13">(</operator><literal type="number" pos:start="83:14" pos:end="83:16">8</literal> <operator pos:start="83:16" pos:end="83:16">-</operator> <operator pos:start="83:18" pos:end="83:18">(</operator><name pos:start="83:19" pos:end="83:24">offset</name> <operator pos:start="83:26" pos:end="83:26">&amp;</operator> <literal type="number" pos:start="83:28" pos:end="83:30">0x7</literal><operator pos:start="83:31" pos:end="83:31">)</operator><operator pos:start="83:32" pos:end="83:32">)</operator> <operator pos:start="83:34" pos:end="83:34">&lt;</operator> <name pos:start="83:36" pos:end="83:38">len</name></expr>)</condition> <block pos:start="83:41" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:21">

            <expr_stmt pos:start="85:13" pos:end="85:51"><expr pos:start="85:13" pos:end="85:50"><call pos:start="85:13" pos:end="85:50"><name pos:start="85:13" pos:end="85:29">program_interrupt</name><argument_list pos:start="85:30" pos:end="85:50">(<argument pos:start="85:31" pos:end="85:33"><expr pos:start="85:31" pos:end="85:33"><name pos:start="85:31" pos:end="85:33">env</name></expr></argument>, <argument pos:start="85:36" pos:end="85:46"><expr pos:start="85:36" pos:end="85:46"><name pos:start="85:36" pos:end="85:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="85:49" pos:end="85:49"><expr pos:start="85:49" pos:end="85:49"><literal type="number" pos:start="85:49" pos:end="85:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:21">return <expr pos:start="87:20" pos:end="87:20"><literal type="number" pos:start="87:20" pos:end="87:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <decl_stmt pos:start="91:9" pos:end="91:65"><decl pos:start="91:9" pos:end="91:64"><type pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:20">MemoryRegion</name> <modifier pos:start="91:22" pos:end="91:22">*</modifier></type><name pos:start="91:23" pos:end="91:24">mr</name> <init pos:start="91:26" pos:end="91:64">= <expr pos:start="91:28" pos:end="91:64"><name pos:start="91:28" pos:end="91:57"><name pos:start="91:28" pos:end="91:32">pbdev</name><operator pos:start="91:33" pos:end="91:34">-&gt;</operator><name pos:start="91:35" pos:end="91:38">pdev</name><operator pos:start="91:39" pos:end="91:40">-&gt;</operator><name pos:start="91:41" pos:end="91:50">io_regions</name><index pos:start="91:51" pos:end="91:57">[<expr pos:start="91:52" pos:end="91:56"><name pos:start="91:52" pos:end="91:56">pcias</name></expr>]</index></name><operator pos:start="91:58" pos:end="91:58">.</operator><name pos:start="91:59" pos:end="91:64">memory</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="93:9" pos:end="95:60"><expr pos:start="93:9" pos:end="95:59"><call pos:start="93:9" pos:end="95:59"><name pos:start="93:9" pos:end="93:35">memory_region_dispatch_read</name><argument_list pos:start="93:36" pos:end="95:59">(<argument pos:start="93:37" pos:end="93:38"><expr pos:start="93:37" pos:end="93:38"><name pos:start="93:37" pos:end="93:38">mr</name></expr></argument>, <argument pos:start="93:41" pos:end="93:46"><expr pos:start="93:41" pos:end="93:46"><name pos:start="93:41" pos:end="93:46">offset</name></expr></argument>, <argument pos:start="93:49" pos:end="93:53"><expr pos:start="93:49" pos:end="93:53"><operator pos:start="93:49" pos:end="93:49">&amp;</operator><name pos:start="93:50" pos:end="93:53">data</name></expr></argument>, <argument pos:start="93:56" pos:end="93:58"><expr pos:start="93:56" pos:end="93:58"><name pos:start="93:56" pos:end="93:58">len</name></expr></argument>,

                                    <argument pos:start="95:37" pos:end="95:58"><expr pos:start="95:37" pos:end="95:58"><name pos:start="95:37" pos:end="95:58">MEMTXATTRS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="97:7" pos:end="145:5">else if <condition pos:start="97:15" pos:end="97:27">(<expr pos:start="97:16" pos:end="97:26"><name pos:start="97:16" pos:end="97:20">pcias</name> <operator pos:start="97:22" pos:end="97:23">==</operator> <literal type="number" pos:start="97:25" pos:end="97:26">15</literal></expr>)</condition> <block pos:start="97:29" pos:end="145:5">{<block_content pos:start="99:9" pos:end="143:9">

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:39">(<expr pos:start="99:13" pos:end="99:38"><operator pos:start="99:13" pos:end="99:13">(</operator><literal type="number" pos:start="99:14" pos:end="99:16">4</literal> <operator pos:start="99:16" pos:end="99:16">-</operator> <operator pos:start="99:18" pos:end="99:18">(</operator><name pos:start="99:19" pos:end="99:24">offset</name> <operator pos:start="99:26" pos:end="99:26">&amp;</operator> <literal type="number" pos:start="99:28" pos:end="99:30">0x3</literal><operator pos:start="99:31" pos:end="99:31">)</operator><operator pos:start="99:32" pos:end="99:32">)</operator> <operator pos:start="99:34" pos:end="99:34">&lt;</operator> <name pos:start="99:36" pos:end="99:38">len</name></expr>)</condition> <block pos:start="99:41" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:21">

            <expr_stmt pos:start="101:13" pos:end="101:51"><expr pos:start="101:13" pos:end="101:50"><call pos:start="101:13" pos:end="101:50"><name pos:start="101:13" pos:end="101:29">program_interrupt</name><argument_list pos:start="101:30" pos:end="101:50">(<argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><name pos:start="101:31" pos:end="101:33">env</name></expr></argument>, <argument pos:start="101:36" pos:end="101:46"><expr pos:start="101:36" pos:end="101:46"><name pos:start="101:36" pos:end="101:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="101:49" pos:end="101:49"><expr pos:start="101:49" pos:end="101:49"><literal type="number" pos:start="101:49" pos:end="101:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:21">return <expr pos:start="103:20" pos:end="103:20"><literal type="number" pos:start="103:20" pos:end="103:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="109:75"><expr pos:start="107:9" pos:end="109:74"><name pos:start="107:9" pos:end="107:12">data</name> <operator pos:start="107:14" pos:end="107:14">=</operator>  <call pos:start="107:17" pos:end="109:74"><name pos:start="107:17" pos:end="107:43">pci_host_config_read_common</name><argument_list pos:start="107:44" pos:end="109:74">(

                   <argument pos:start="109:20" pos:end="109:30"><expr pos:start="109:20" pos:end="109:30"><name pos:start="109:20" pos:end="109:30"><name pos:start="109:20" pos:end="109:24">pbdev</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:30">pdev</name></name></expr></argument>, <argument pos:start="109:33" pos:end="109:38"><expr pos:start="109:33" pos:end="109:38"><name pos:start="109:33" pos:end="109:38">offset</name></expr></argument>, <argument pos:start="109:41" pos:end="109:68"><expr pos:start="109:41" pos:end="109:68"><call pos:start="109:41" pos:end="109:68"><name pos:start="109:41" pos:end="109:55">pci_config_size</name><argument_list pos:start="109:56" pos:end="109:68">(<argument pos:start="109:57" pos:end="109:67"><expr pos:start="109:57" pos:end="109:67"><name pos:start="109:57" pos:end="109:67"><name pos:start="109:57" pos:end="109:61">pbdev</name><operator pos:start="109:62" pos:end="109:63">-&gt;</operator><name pos:start="109:64" pos:end="109:67">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:71" pos:end="109:73"><expr pos:start="109:71" pos:end="109:73"><name pos:start="109:71" pos:end="109:73">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="113:9" pos:end="143:9">switch <condition pos:start="113:16" pos:end="113:20">(<expr pos:start="113:17" pos:end="113:19"><name pos:start="113:17" pos:end="113:19">len</name></expr>)</condition> <block pos:start="113:22" pos:end="143:9">{<block_content pos:start="115:9" pos:end="141:21">

        <case pos:start="115:9" pos:end="115:15">case <expr pos:start="115:14" pos:end="115:14"><literal type="number" pos:start="115:14" pos:end="115:14">1</literal></expr>:</case>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        <case pos:start="119:9" pos:end="119:15">case <expr pos:start="119:14" pos:end="119:14"><literal type="number" pos:start="119:14" pos:end="119:14">2</literal></expr>:</case>

            <expr_stmt pos:start="121:13" pos:end="121:33"><expr pos:start="121:13" pos:end="121:32"><name pos:start="121:13" pos:end="121:16">data</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <call pos:start="121:20" pos:end="121:32"><name pos:start="121:20" pos:end="121:26">bswap16</name><argument_list pos:start="121:27" pos:end="121:32">(<argument pos:start="121:28" pos:end="121:31"><expr pos:start="121:28" pos:end="121:31"><name pos:start="121:28" pos:end="121:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="123:13" pos:end="123:18">break;</break>

        <case pos:start="125:9" pos:end="125:15">case <expr pos:start="125:14" pos:end="125:14"><literal type="number" pos:start="125:14" pos:end="125:14">4</literal></expr>:</case>

            <expr_stmt pos:start="127:13" pos:end="127:33"><expr pos:start="127:13" pos:end="127:32"><name pos:start="127:13" pos:end="127:16">data</name> <operator pos:start="127:18" pos:end="127:18">=</operator> <call pos:start="127:20" pos:end="127:32"><name pos:start="127:20" pos:end="127:26">bswap32</name><argument_list pos:start="127:27" pos:end="127:32">(<argument pos:start="127:28" pos:end="127:31"><expr pos:start="127:28" pos:end="127:31"><name pos:start="127:28" pos:end="127:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="129:13" pos:end="129:18">break;</break>

        <case pos:start="131:9" pos:end="131:15">case <expr pos:start="131:14" pos:end="131:14"><literal type="number" pos:start="131:14" pos:end="131:14">8</literal></expr>:</case>

            <expr_stmt pos:start="133:13" pos:end="133:33"><expr pos:start="133:13" pos:end="133:32"><name pos:start="133:13" pos:end="133:16">data</name> <operator pos:start="133:18" pos:end="133:18">=</operator> <call pos:start="133:20" pos:end="133:32"><name pos:start="133:20" pos:end="133:26">bswap64</name><argument_list pos:start="133:27" pos:end="133:32">(<argument pos:start="133:28" pos:end="133:31"><expr pos:start="133:28" pos:end="133:31"><name pos:start="133:28" pos:end="133:31">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="135:13" pos:end="135:18">break;</break>

        <default pos:start="137:9" pos:end="137:16">default:</default>

            <expr_stmt pos:start="139:13" pos:end="139:51"><expr pos:start="139:13" pos:end="139:50"><call pos:start="139:13" pos:end="139:50"><name pos:start="139:13" pos:end="139:29">program_interrupt</name><argument_list pos:start="139:30" pos:end="139:50">(<argument pos:start="139:31" pos:end="139:33"><expr pos:start="139:31" pos:end="139:33"><name pos:start="139:31" pos:end="139:33">env</name></expr></argument>, <argument pos:start="139:36" pos:end="139:46"><expr pos:start="139:36" pos:end="139:46"><name pos:start="139:36" pos:end="139:46">PGM_OPERAND</name></expr></argument>, <argument pos:start="139:49" pos:end="139:49"><expr pos:start="139:49" pos:end="139:49"><literal type="number" pos:start="139:49" pos:end="139:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="141:13" pos:end="141:21">return <expr pos:start="141:20" pos:end="141:20"><literal type="number" pos:start="141:20" pos:end="141:20">0</literal></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="145:7" pos:end="155:5">else <block pos:start="145:12" pos:end="155:5">{<block_content pos:start="147:9" pos:end="153:17">

        <expr_stmt pos:start="147:9" pos:end="147:35"><expr pos:start="147:9" pos:end="147:34"><call pos:start="147:9" pos:end="147:34"><name pos:start="147:9" pos:end="147:15">DPRINTF</name><argument_list pos:start="147:16" pos:end="147:34">(<argument pos:start="147:17" pos:end="147:33"><expr pos:start="147:17" pos:end="147:33"><literal type="string" pos:start="147:17" pos:end="147:33">"invalid space\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:36"><expr pos:start="149:9" pos:end="149:35"><call pos:start="149:9" pos:end="149:35"><name pos:start="149:9" pos:end="149:13">setcc</name><argument_list pos:start="149:14" pos:end="149:35">(<argument pos:start="149:15" pos:end="149:17"><expr pos:start="149:15" pos:end="149:17"><name pos:start="149:15" pos:end="149:17">cpu</name></expr></argument>, <argument pos:start="149:20" pos:end="149:34"><expr pos:start="149:20" pos:end="149:34"><name pos:start="149:20" pos:end="149:34">ZPCI_PCI_LS_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:60"><expr pos:start="151:9" pos:end="151:59"><call pos:start="151:9" pos:end="151:59"><name pos:start="151:9" pos:end="151:28">s390_set_status_code</name><argument_list pos:start="151:29" pos:end="151:59">(<argument pos:start="151:30" pos:end="151:32"><expr pos:start="151:30" pos:end="151:32"><name pos:start="151:30" pos:end="151:32">env</name></expr></argument>, <argument pos:start="151:35" pos:end="151:36"><expr pos:start="151:35" pos:end="151:36"><name pos:start="151:35" pos:end="151:36">r2</name></expr></argument>, <argument pos:start="151:39" pos:end="151:58"><expr pos:start="151:39" pos:end="151:58"><name pos:start="151:39" pos:end="151:58">ZPCI_PCI_ST_INVAL_AS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="153:9" pos:end="153:17">return <expr pos:start="153:16" pos:end="153:16"><literal type="number" pos:start="153:16" pos:end="153:16">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:25"><expr pos:start="159:5" pos:end="159:24"><name pos:start="159:5" pos:end="159:17"><name pos:start="159:5" pos:end="159:7">env</name><operator pos:start="159:8" pos:end="159:9">-&gt;</operator><name pos:start="159:10" pos:end="159:13">regs</name><index pos:start="159:14" pos:end="159:17">[<expr pos:start="159:15" pos:end="159:16"><name pos:start="159:15" pos:end="159:16">r1</name></expr>]</index></name> <operator pos:start="159:19" pos:end="159:19">=</operator> <name pos:start="159:21" pos:end="159:24">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:31"><expr pos:start="161:5" pos:end="161:30"><call pos:start="161:5" pos:end="161:30"><name pos:start="161:5" pos:end="161:9">setcc</name><argument_list pos:start="161:10" pos:end="161:30">(<argument pos:start="161:11" pos:end="161:13"><expr pos:start="161:11" pos:end="161:13"><name pos:start="161:11" pos:end="161:13">cpu</name></expr></argument>, <argument pos:start="161:16" pos:end="161:29"><expr pos:start="161:16" pos:end="161:29"><name pos:start="161:16" pos:end="161:29">ZPCI_PCI_LS_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="163:5" pos:end="163:13">return <expr pos:start="163:12" pos:end="163:12"><literal type="number" pos:start="163:12" pos:end="163:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
