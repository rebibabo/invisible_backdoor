<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/550.c" pos:tabs="8"><function pos:start="1:1" pos:end="359:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">ssize_t</name></type> <name pos:start="1:9" pos:end="1:21">pcnet_receive</name><parameter_list pos:start="1:22" pos:end="1:76">(<parameter pos:start="1:23" pos:end="1:41"><decl pos:start="1:23" pos:end="1:41"><type pos:start="1:23" pos:end="1:41"><name pos:start="1:23" pos:end="1:37">VLANClientState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">nc</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:56">uint8_t</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">buf</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:75"><decl pos:start="1:64" pos:end="1:75"><type pos:start="1:64" pos:end="1:75"><name pos:start="1:64" pos:end="1:69">size_t</name></type> <name pos:start="1:71" pos:end="1:75">size_</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="359:1">{<block_content pos:start="5:5" pos:end="357:17">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">PCNetState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:55">= <expr pos:start="5:21" pos:end="5:55"><call pos:start="5:21" pos:end="5:47"><name pos:start="5:21" pos:end="5:29">DO_UPCAST</name><argument_list pos:start="5:30" pos:end="5:47">(<argument pos:start="5:31" pos:end="5:38"><expr pos:start="5:31" pos:end="5:38"><name pos:start="5:31" pos:end="5:38">NICState</name></expr></argument>, <argument pos:start="5:41" pos:end="5:42"><expr pos:start="5:41" pos:end="5:42"><name pos:start="5:41" pos:end="5:42">nc</name></expr></argument>, <argument pos:start="5:45" pos:end="5:46"><expr pos:start="5:45" pos:end="5:46"><name pos:start="5:45" pos:end="5:46">nc</name></expr></argument>)</argument_list></call><operator pos:start="5:48" pos:end="5:49">-&gt;</operator><name pos:start="5:50" pos:end="5:55">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">is_padr</name> <init pos:start="7:17" pos:end="7:19">= <expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">0</literal></expr></init></decl>, <decl pos:start="7:22" pos:end="7:33"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:29">is_bcast</name> <init pos:start="7:31" pos:end="7:33">= <expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">0</literal></expr></init></decl>, <decl pos:start="7:36" pos:end="7:46"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:36" pos:end="7:42">is_ladr</name> <init pos:start="7:44" pos:end="7:46">= <expr pos:start="7:46" pos:end="7:46"><literal type="number" pos:start="7:46" pos:end="7:46">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:20"><name pos:start="9:13" pos:end="9:16">buf1</name><index pos:start="9:17" pos:end="9:20">[<expr pos:start="9:18" pos:end="9:19"><literal type="number" pos:start="9:18" pos:end="9:19">60</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">remaining</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">crc_err</name> <init pos:start="13:17" pos:end="13:19">= <expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">size</name> <init pos:start="15:14" pos:end="15:20">= <expr pos:start="15:16" pos:end="15:20"><name pos:start="15:16" pos:end="15:20">size_</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="26:0"><if pos:start="19:5" pos:end="26:0">if <condition pos:start="19:8" pos:end="19:58">(<expr pos:start="19:9" pos:end="19:57"><call pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:15">CSR_DRX</name><argument_list pos:start="19:16" pos:end="19:18">(<argument pos:start="19:17" pos:end="19:17"><expr pos:start="19:17" pos:end="19:17"><name pos:start="19:17" pos:end="19:17">s</name></expr></argument>)</argument_list></call> <operator pos:start="19:20" pos:end="19:21">||</operator> <call pos:start="19:23" pos:end="19:33"><name pos:start="19:23" pos:end="19:30">CSR_STOP</name><argument_list pos:start="19:31" pos:end="19:33">(<argument pos:start="19:32" pos:end="19:32"><expr pos:start="19:32" pos:end="19:32"><name pos:start="19:32" pos:end="19:32">s</name></expr></argument>)</argument_list></call> <operator pos:start="19:35" pos:end="19:36">||</operator> <call pos:start="19:38" pos:end="19:48"><name pos:start="19:38" pos:end="19:45">CSR_SPND</name><argument_list pos:start="19:46" pos:end="19:48">(<argument pos:start="19:47" pos:end="19:47"><expr pos:start="19:47" pos:end="19:47"><name pos:start="19:47" pos:end="19:47">s</name></expr></argument>)</argument_list></call> <operator pos:start="19:50" pos:end="19:51">||</operator> <operator pos:start="19:53" pos:end="19:53">!</operator><name pos:start="19:54" pos:end="19:57">size</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="26:0"><block_content pos:start="21:9" pos:end="26:0">

        <return pos:start="21:9" pos:end="26:0">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



<cpp:ifdef pos:start="25:1" pos:end="25:18">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:18">PCNET_DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="27:5" pos:end="30:0"><expr pos:start="27:5" pos:end="27:43"><call pos:start="27:5" pos:end="27:43"><name pos:start="27:5" pos:end="27:10">printf</name><argument_list pos:start="27:11" pos:end="27:43">(<argument pos:start="27:12" pos:end="27:36"><expr pos:start="27:12" pos:end="27:36"><literal type="string" pos:start="27:12" pos:end="27:36">"pcnet_receive size=%d\n"</literal></expr></argument>, <argument pos:start="27:39" pos:end="27:42"><expr pos:start="27:39" pos:end="27:42"><name pos:start="27:39" pos:end="27:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="33:5" pos:end="33:45">/* if too small buffer, then expand it */</comment>

    <if_stmt pos:start="35:5" pos:end="45:5"><if pos:start="35:5" pos:end="45:5">if <condition pos:start="35:8" pos:end="35:28">(<expr pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:12">size</name> <operator pos:start="35:14" pos:end="35:14">&lt;</operator> <name pos:start="35:16" pos:end="35:27">MIN_BUF_SIZE</name></expr>)</condition> <block pos:start="35:30" pos:end="45:5">{<block_content pos:start="37:9" pos:end="43:28">

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><call pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:14">memcpy</name><argument_list pos:start="37:15" pos:end="37:31">(<argument pos:start="37:16" pos:end="37:19"><expr pos:start="37:16" pos:end="37:19"><name pos:start="37:16" pos:end="37:19">buf1</name></expr></argument>, <argument pos:start="37:22" pos:end="37:24"><expr pos:start="37:22" pos:end="37:24"><name pos:start="37:22" pos:end="37:24">buf</name></expr></argument>, <argument pos:start="37:27" pos:end="37:30"><expr pos:start="37:27" pos:end="37:30"><name pos:start="37:27" pos:end="37:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:52"><expr pos:start="39:9" pos:end="39:51"><call pos:start="39:9" pos:end="39:51"><name pos:start="39:9" pos:end="39:14">memset</name><argument_list pos:start="39:15" pos:end="39:51">(<argument pos:start="39:16" pos:end="39:26"><expr pos:start="39:16" pos:end="39:26"><name pos:start="39:16" pos:end="39:19">buf1</name> <operator pos:start="39:21" pos:end="39:21">+</operator> <name pos:start="39:23" pos:end="39:26">size</name></expr></argument>, <argument pos:start="39:29" pos:end="39:29"><expr pos:start="39:29" pos:end="39:29"><literal type="number" pos:start="39:29" pos:end="39:29">0</literal></expr></argument>, <argument pos:start="39:32" pos:end="39:50"><expr pos:start="39:32" pos:end="39:50"><name pos:start="39:32" pos:end="39:43">MIN_BUF_SIZE</name> <operator pos:start="39:45" pos:end="39:45">-</operator> <name pos:start="39:47" pos:end="39:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:19"><expr pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:11">buf</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <name pos:start="41:15" pos:end="41:18">buf1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:28"><expr pos:start="43:9" pos:end="43:27"><name pos:start="43:9" pos:end="43:12">size</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <name pos:start="43:16" pos:end="43:27">MIN_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="347:5"><if pos:start="49:5" pos:end="347:5">if <condition pos:start="49:8" pos:end="55:46">(<expr pos:start="49:9" pos:end="55:45"><call pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:16">CSR_PROM</name><argument_list pos:start="49:17" pos:end="49:19">(<argument pos:start="49:18" pos:end="49:18"><expr pos:start="49:18" pos:end="49:18"><name pos:start="49:18" pos:end="49:18">s</name></expr></argument>)</argument_list></call>

        <operator pos:start="51:9" pos:end="51:10">||</operator> <operator pos:start="51:12" pos:end="51:12">(</operator><name pos:start="51:13" pos:end="51:19">is_padr</name><operator pos:start="51:20" pos:end="51:20">=</operator><call pos:start="51:21" pos:end="51:44"><name pos:start="51:21" pos:end="51:30">padr_match</name><argument_list pos:start="51:31" pos:end="51:44">(<argument pos:start="51:32" pos:end="51:32"><expr pos:start="51:32" pos:end="51:32"><name pos:start="51:32" pos:end="51:32">s</name></expr></argument>, <argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:37">buf</name></expr></argument>, <argument pos:start="51:40" pos:end="51:43"><expr pos:start="51:40" pos:end="51:43"><name pos:start="51:40" pos:end="51:43">size</name></expr></argument>)</argument_list></call><operator pos:start="51:45" pos:end="51:45">)</operator>

        <operator pos:start="53:9" pos:end="53:10">||</operator> <operator pos:start="53:12" pos:end="53:12">(</operator><name pos:start="53:13" pos:end="53:20">is_bcast</name><operator pos:start="53:21" pos:end="53:21">=</operator><call pos:start="53:22" pos:end="53:45"><name pos:start="53:22" pos:end="53:31">padr_bcast</name><argument_list pos:start="53:32" pos:end="53:45">(<argument pos:start="53:33" pos:end="53:33"><expr pos:start="53:33" pos:end="53:33"><name pos:start="53:33" pos:end="53:33">s</name></expr></argument>, <argument pos:start="53:36" pos:end="53:38"><expr pos:start="53:36" pos:end="53:38"><name pos:start="53:36" pos:end="53:38">buf</name></expr></argument>, <argument pos:start="53:41" pos:end="53:44"><expr pos:start="53:41" pos:end="53:44"><name pos:start="53:41" pos:end="53:44">size</name></expr></argument>)</argument_list></call><operator pos:start="53:46" pos:end="53:46">)</operator>

        <operator pos:start="55:9" pos:end="55:10">||</operator> <operator pos:start="55:12" pos:end="55:12">(</operator><name pos:start="55:13" pos:end="55:19">is_ladr</name><operator pos:start="55:20" pos:end="55:20">=</operator><call pos:start="55:21" pos:end="55:44"><name pos:start="55:21" pos:end="55:30">ladr_match</name><argument_list pos:start="55:31" pos:end="55:44">(<argument pos:start="55:32" pos:end="55:32"><expr pos:start="55:32" pos:end="55:32"><name pos:start="55:32" pos:end="55:32">s</name></expr></argument>, <argument pos:start="55:35" pos:end="55:37"><expr pos:start="55:35" pos:end="55:37"><name pos:start="55:35" pos:end="55:37">buf</name></expr></argument>, <argument pos:start="55:40" pos:end="55:43"><expr pos:start="55:40" pos:end="55:43"><name pos:start="55:40" pos:end="55:43">size</name></expr></argument>)</argument_list></call><operator pos:start="55:45" pos:end="55:45">)</operator></expr>)</condition> <block pos:start="55:48" pos:end="347:5">{<block_content pos:start="59:9" pos:end="345:9">



        <expr_stmt pos:start="59:9" pos:end="59:27"><expr pos:start="59:9" pos:end="59:26"><call pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:23">pcnet_rdte_poll</name><argument_list pos:start="59:24" pos:end="59:26">(<argument pos:start="59:25" pos:end="59:25"><expr pos:start="59:25" pos:end="59:25"><name pos:start="59:25" pos:end="59:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="63:9" pos:end="105:9"><if pos:start="63:9" pos:end="105:9">if <condition pos:start="63:12" pos:end="63:47">(<expr pos:start="63:13" pos:end="63:46"><operator pos:start="63:13" pos:end="63:13">!</operator><operator pos:start="63:14" pos:end="63:14">(</operator><call pos:start="63:15" pos:end="63:25"><name pos:start="63:15" pos:end="63:22">CSR_CRST</name><argument_list pos:start="63:23" pos:end="63:25">(<argument pos:start="63:24" pos:end="63:24"><expr pos:start="63:24" pos:end="63:24"><name pos:start="63:24" pos:end="63:24">s</name></expr></argument>)</argument_list></call> <operator pos:start="63:27" pos:end="63:27">&amp;</operator> <literal type="number" pos:start="63:29" pos:end="63:34">0x8000</literal><operator pos:start="63:35" pos:end="63:35">)</operator> <operator pos:start="63:37" pos:end="63:38">&amp;&amp;</operator> <name pos:start="63:40" pos:end="63:46"><name pos:start="63:40" pos:end="63:40">s</name><operator pos:start="63:41" pos:end="63:42">-&gt;</operator><name pos:start="63:43" pos:end="63:46">rdra</name></name></expr>)</condition> <block pos:start="63:49" pos:end="105:9">{<block_content pos:start="65:13" pos:end="103:13">

            <decl_stmt pos:start="65:13" pos:end="65:33"><decl pos:start="65:13" pos:end="65:32"><type pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:28"><name pos:start="65:13" pos:end="65:18">struct</name> <name pos:start="65:20" pos:end="65:28">pcnet_RMD</name></name></type> <name pos:start="65:30" pos:end="65:32">rmd</name></decl>;</decl_stmt>

            <decl_stmt pos:start="67:13" pos:end="67:41"><decl pos:start="67:13" pos:end="67:38"><type pos:start="67:13" pos:end="67:15"><name pos:start="67:13" pos:end="67:15">int</name></type> <name pos:start="67:17" pos:end="67:21">rcvrc</name> <init pos:start="67:23" pos:end="67:38">= <expr pos:start="67:25" pos:end="67:38"><call pos:start="67:25" pos:end="67:36"><name pos:start="67:25" pos:end="67:33">CSR_RCVRC</name><argument_list pos:start="67:34" pos:end="67:36">(<argument pos:start="67:35" pos:end="67:35"><expr pos:start="67:35" pos:end="67:35"><name pos:start="67:35" pos:end="67:35">s</name></expr></argument>)</argument_list></call><operator pos:start="67:37" pos:end="67:37">-</operator><literal type="number" pos:start="67:38" pos:end="67:38">1</literal></expr></init></decl>,<decl pos:start="67:40" pos:end="67:40"><type ref="prev" pos:start="67:13" pos:end="67:15"/><name pos:start="67:40" pos:end="67:40">i</name></decl>;</decl_stmt>

            <decl_stmt pos:start="69:13" pos:end="69:36"><decl pos:start="69:13" pos:end="69:35"><type pos:start="69:13" pos:end="69:30"><name pos:start="69:13" pos:end="69:30">target_phys_addr_t</name></type> <name pos:start="69:32" pos:end="69:35">nrda</name></decl>;</decl_stmt>

            <for pos:start="71:13" pos:end="103:13">for <control pos:start="71:17" pos:end="71:57">(<init pos:start="71:18" pos:end="71:36"><expr pos:start="71:18" pos:end="71:35"><name pos:start="71:18" pos:end="71:18">i</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <call pos:start="71:22" pos:end="71:33"><name pos:start="71:22" pos:end="71:30">CSR_RCVRL</name><argument_list pos:start="71:31" pos:end="71:33">(<argument pos:start="71:32" pos:end="71:32"><expr pos:start="71:32" pos:end="71:32"><name pos:start="71:32" pos:end="71:32">s</name></expr></argument>)</argument_list></call><operator pos:start="71:34" pos:end="71:34">-</operator><literal type="number" pos:start="71:35" pos:end="71:35">1</literal></expr>;</init> <condition pos:start="71:38" pos:end="71:43"><expr pos:start="71:38" pos:end="71:42"><name pos:start="71:38" pos:end="71:38">i</name> <operator pos:start="71:40" pos:end="71:40">&gt;</operator> <literal type="number" pos:start="71:42" pos:end="71:42">0</literal></expr>;</condition> <incr pos:start="71:45" pos:end="71:56"><expr pos:start="71:45" pos:end="71:47"><name pos:start="71:45" pos:end="71:45">i</name><operator pos:start="71:46" pos:end="71:47">--</operator></expr><operator pos:start="71:48" pos:end="71:48">,</operator> <expr pos:start="71:50" pos:end="71:56"><name pos:start="71:50" pos:end="71:54">rcvrc</name><operator pos:start="71:55" pos:end="71:56">--</operator></expr></incr>)</control> <block pos:start="71:59" pos:end="103:13">{<block_content pos:start="73:17" pos:end="101:17">

                <if_stmt pos:start="73:17" pos:end="75:41"><if pos:start="73:17" pos:end="75:41">if <condition pos:start="73:20" pos:end="73:31">(<expr pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:25">rcvrc</name> <operator pos:start="73:27" pos:end="73:28">&lt;=</operator> <literal type="number" pos:start="73:30" pos:end="73:30">1</literal></expr>)</condition><block type="pseudo" pos:start="75:21" pos:end="75:41"><block_content pos:start="75:21" pos:end="75:41">

                    <expr_stmt pos:start="75:21" pos:end="75:41"><expr pos:start="75:21" pos:end="75:40"><name pos:start="75:21" pos:end="75:25">rcvrc</name> <operator pos:start="75:27" pos:end="75:27">=</operator> <call pos:start="75:29" pos:end="75:40"><name pos:start="75:29" pos:end="75:37">CSR_RCVRL</name><argument_list pos:start="75:38" pos:end="75:40">(<argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><name pos:start="75:39" pos:end="75:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="77:17" pos:end="81:47"><expr pos:start="77:17" pos:end="81:46"><name pos:start="77:17" pos:end="77:20">nrda</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <name pos:start="77:24" pos:end="77:30"><name pos:start="77:24" pos:end="77:24">s</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:30">rdra</name></name> <operator pos:start="77:32" pos:end="77:32">+</operator>

                    <operator pos:start="79:21" pos:end="79:21">(</operator><call pos:start="79:22" pos:end="79:33"><name pos:start="79:22" pos:end="79:30">CSR_RCVRL</name><argument_list pos:start="79:31" pos:end="79:33">(<argument pos:start="79:32" pos:end="79:32"><expr pos:start="79:32" pos:end="79:32"><name pos:start="79:32" pos:end="79:32">s</name></expr></argument>)</argument_list></call> <operator pos:start="79:35" pos:end="79:35">-</operator> <name pos:start="79:37" pos:end="79:41">rcvrc</name><operator pos:start="79:42" pos:end="79:42">)</operator> <operator pos:start="79:44" pos:end="79:44">*</operator>

                    <operator pos:start="81:21" pos:end="81:21">(</operator><ternary pos:start="81:22" pos:end="81:44"><condition pos:start="81:22" pos:end="81:37"><expr pos:start="81:22" pos:end="81:35"><call pos:start="81:22" pos:end="81:35"><name pos:start="81:22" pos:end="81:32">BCR_SWSTYLE</name><argument_list pos:start="81:33" pos:end="81:35">(<argument pos:start="81:34" pos:end="81:34"><expr pos:start="81:34" pos:end="81:34"><name pos:start="81:34" pos:end="81:34">s</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="81:39" pos:end="81:40"> <expr pos:start="81:39" pos:end="81:40"><literal type="number" pos:start="81:39" pos:end="81:40">16</literal></expr> </then><else pos:start="81:42" pos:end="81:44">: <expr pos:start="81:44" pos:end="81:44"><literal type="number" pos:start="81:44" pos:end="81:44">8</literal></expr></else></ternary> <operator pos:start="81:46" pos:end="81:46">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:36"><expr pos:start="83:17" pos:end="83:35"><call pos:start="83:17" pos:end="83:35"><name pos:start="83:17" pos:end="83:23">RMDLOAD</name><argument_list pos:start="83:24" pos:end="83:35">(<argument pos:start="83:25" pos:end="83:28"><expr pos:start="83:25" pos:end="83:28"><operator pos:start="83:25" pos:end="83:25">&amp;</operator><name pos:start="83:26" pos:end="83:28">rmd</name></expr></argument>, <argument pos:start="83:31" pos:end="83:34"><expr pos:start="83:31" pos:end="83:34"><name pos:start="83:31" pos:end="83:34">nrda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="85:17" pos:end="101:17"><if pos:start="85:17" pos:end="101:17">if <condition pos:start="85:20" pos:end="85:53">(<expr pos:start="85:21" pos:end="85:52"><call pos:start="85:21" pos:end="85:52"><name pos:start="85:21" pos:end="85:29">GET_FIELD</name><argument_list pos:start="85:30" pos:end="85:52">(<argument pos:start="85:31" pos:end="85:40"><expr pos:start="85:31" pos:end="85:40"><name pos:start="85:31" pos:end="85:40"><name pos:start="85:31" pos:end="85:33">rmd</name><operator pos:start="85:34" pos:end="85:34">.</operator><name pos:start="85:35" pos:end="85:40">status</name></name></expr></argument>, <argument pos:start="85:43" pos:end="85:46"><expr pos:start="85:43" pos:end="85:46"><name pos:start="85:43" pos:end="85:46">RMDS</name></expr></argument>, <argument pos:start="85:49" pos:end="85:51"><expr pos:start="85:49" pos:end="85:51"><name pos:start="85:49" pos:end="85:51">OWN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:55" pos:end="101:17">{<block_content pos:start="89:21" pos:end="99:26">

<cpp:ifdef pos:start="87:1" pos:end="87:22">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:22">PCNET_DEBUG_RMD</name></cpp:ifdef>

                    <expr_stmt pos:start="89:21" pos:end="94:0"><expr pos:start="89:21" pos:end="91:52"><call pos:start="89:21" pos:end="91:52"><name pos:start="89:21" pos:end="89:26">printf</name><argument_list pos:start="89:27" pos:end="91:52">(<argument pos:start="89:28" pos:end="89:74"><expr pos:start="89:28" pos:end="89:74"><literal type="string" pos:start="89:28" pos:end="89:74">"pcnet - scan buffer: RCVRC=%d PREV_RCVRC=%d\n"</literal></expr></argument>,

                                <argument pos:start="91:33" pos:end="91:37"><expr pos:start="91:33" pos:end="91:37"><name pos:start="91:33" pos:end="91:37">rcvrc</name></expr></argument>, <argument pos:start="91:40" pos:end="91:51"><expr pos:start="91:40" pos:end="91:51"><call pos:start="91:40" pos:end="91:51"><name pos:start="91:40" pos:end="91:48">CSR_RCVRC</name><argument_list pos:start="91:49" pos:end="91:51">(<argument pos:start="91:50" pos:end="91:50"><expr pos:start="91:50" pos:end="91:50"><name pos:start="91:50" pos:end="91:50">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="93:1" pos:end="93:6">#<cpp:directive pos:start="93:2" pos:end="93:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="95:21" pos:end="95:41"><expr pos:start="95:21" pos:end="95:40"><call pos:start="95:21" pos:end="95:32"><name pos:start="95:21" pos:end="95:29">CSR_RCVRC</name><argument_list pos:start="95:30" pos:end="95:32">(<argument pos:start="95:31" pos:end="95:31"><expr pos:start="95:31" pos:end="95:31"><name pos:start="95:31" pos:end="95:31">s</name></expr></argument>)</argument_list></call> <operator pos:start="95:34" pos:end="95:34">=</operator> <name pos:start="95:36" pos:end="95:40">rcvrc</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="97:21" pos:end="97:39"><expr pos:start="97:21" pos:end="97:38"><call pos:start="97:21" pos:end="97:38"><name pos:start="97:21" pos:end="97:35">pcnet_rdte_poll</name><argument_list pos:start="97:36" pos:end="97:38">(<argument pos:start="97:37" pos:end="97:37"><expr pos:start="97:37" pos:end="97:37"><name pos:start="97:37" pos:end="97:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="99:21" pos:end="99:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="109:9" pos:end="345:9"><if pos:start="109:9" pos:end="121:9">if <condition pos:start="109:12" pos:end="109:36">(<expr pos:start="109:13" pos:end="109:35"><operator pos:start="109:13" pos:end="109:13">!</operator><operator pos:start="109:14" pos:end="109:14">(</operator><call pos:start="109:15" pos:end="109:25"><name pos:start="109:15" pos:end="109:22">CSR_CRST</name><argument_list pos:start="109:23" pos:end="109:25">(<argument pos:start="109:24" pos:end="109:24"><expr pos:start="109:24" pos:end="109:24"><name pos:start="109:24" pos:end="109:24">s</name></expr></argument>)</argument_list></call> <operator pos:start="109:27" pos:end="109:27">&amp;</operator> <literal type="number" pos:start="109:29" pos:end="109:34">0x8000</literal><operator pos:start="109:35" pos:end="109:35">)</operator></expr>)</condition> <block pos:start="109:38" pos:end="121:9">{<block_content pos:start="113:13" pos:end="119:27">

<cpp:ifdef pos:start="111:1" pos:end="111:22">#<cpp:directive pos:start="111:2" pos:end="111:6">ifdef</cpp:directive> <name pos:start="111:8" pos:end="111:22">PCNET_DEBUG_RMD</name></cpp:ifdef>

            <expr_stmt pos:start="113:13" pos:end="116:0"><expr pos:start="113:13" pos:end="113:65"><call pos:start="113:13" pos:end="113:65"><name pos:start="113:13" pos:end="113:18">printf</name><argument_list pos:start="113:19" pos:end="113:65">(<argument pos:start="113:20" pos:end="113:50"><expr pos:start="113:20" pos:end="113:50"><literal type="string" pos:start="113:20" pos:end="113:50">"pcnet - no buffer: RCVRC=%d\n"</literal></expr></argument>, <argument pos:start="113:53" pos:end="113:64"><expr pos:start="113:53" pos:end="113:64"><call pos:start="113:53" pos:end="113:64"><name pos:start="113:53" pos:end="113:61">CSR_RCVRC</name><argument_list pos:start="113:62" pos:end="113:64">(<argument pos:start="113:63" pos:end="113:63"><expr pos:start="113:63" pos:end="113:63"><name pos:start="113:63" pos:end="113:63">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="115:1" pos:end="115:6">#<cpp:directive pos:start="115:2" pos:end="115:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="117:13" pos:end="117:32"><expr pos:start="117:13" pos:end="117:31"><name pos:start="117:13" pos:end="117:21"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:18">csr</name><index pos:start="117:19" pos:end="117:21">[<expr pos:start="117:20" pos:end="117:20"><literal type="number" pos:start="117:20" pos:end="117:20">0</literal></expr>]</index></name> <operator pos:start="117:23" pos:end="117:24">|=</operator> <literal type="number" pos:start="117:26" pos:end="117:31">0x1000</literal></expr>;</expr_stmt> <comment type="block" pos:start="117:34" pos:end="117:52">/* Set MISS flag */</comment>

            <expr_stmt pos:start="119:13" pos:end="119:27"><expr pos:start="119:13" pos:end="119:26"><call pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:21">CSR_MISSC</name><argument_list pos:start="119:22" pos:end="119:24">(<argument pos:start="119:23" pos:end="119:23"><expr pos:start="119:23" pos:end="119:23"><name pos:start="119:23" pos:end="119:23">s</name></expr></argument>)</argument_list></call><operator pos:start="119:25" pos:end="119:26">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="121:11" pos:end="345:9">else <block pos:start="121:16" pos:end="345:9">{<block_content pos:start="123:13" pos:end="341:31">

            <decl_stmt pos:start="123:13" pos:end="123:37"><decl pos:start="123:13" pos:end="123:36"><type pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:19">uint8_t</name> <modifier pos:start="123:21" pos:end="123:21">*</modifier></type><name pos:start="123:22" pos:end="123:24">src</name> <init pos:start="123:26" pos:end="123:36">= <expr pos:start="123:28" pos:end="123:36"><name pos:start="123:28" pos:end="123:36"><name pos:start="123:28" pos:end="123:28">s</name><operator pos:start="123:29" pos:end="123:30">-&gt;</operator><name pos:start="123:31" pos:end="123:36">buffer</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="125:13" pos:end="125:50"><decl pos:start="125:13" pos:end="125:49"><type pos:start="125:13" pos:end="125:30"><name pos:start="125:13" pos:end="125:30">target_phys_addr_t</name></type> <name pos:start="125:32" pos:end="125:35">crda</name> <init pos:start="125:37" pos:end="125:49">= <expr pos:start="125:39" pos:end="125:49"><call pos:start="125:39" pos:end="125:49"><name pos:start="125:39" pos:end="125:46">CSR_CRDA</name><argument_list pos:start="125:47" pos:end="125:49">(<argument pos:start="125:48" pos:end="125:48"><expr pos:start="125:48" pos:end="125:48"><name pos:start="125:48" pos:end="125:48">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="127:13" pos:end="127:33"><decl pos:start="127:13" pos:end="127:32"><type pos:start="127:13" pos:end="127:28"><name pos:start="127:13" pos:end="127:28"><name pos:start="127:13" pos:end="127:18">struct</name> <name pos:start="127:20" pos:end="127:28">pcnet_RMD</name></name></type> <name pos:start="127:30" pos:end="127:32">rmd</name></decl>;</decl_stmt>

            <decl_stmt pos:start="129:13" pos:end="129:29"><decl pos:start="129:13" pos:end="129:28"><type pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:15">int</name></type> <name pos:start="129:17" pos:end="129:24">pktcount</name> <init pos:start="129:26" pos:end="129:28">= <expr pos:start="129:28" pos:end="129:28"><literal type="number" pos:start="129:28" pos:end="129:28">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="133:13" pos:end="186:0"><if pos:start="133:13" pos:end="149:13">if <condition pos:start="133:16" pos:end="133:29">(<expr pos:start="133:17" pos:end="133:28"><operator pos:start="133:17" pos:end="133:17">!</operator><name pos:start="133:18" pos:end="133:28"><name pos:start="133:18" pos:end="133:18">s</name><operator pos:start="133:19" pos:end="133:20">-&gt;</operator><name pos:start="133:21" pos:end="133:28">looptest</name></name></expr>)</condition> <block pos:start="133:31" pos:end="149:13">{<block_content pos:start="135:17" pos:end="147:26">

                <expr_stmt pos:start="135:17" pos:end="135:39"><expr pos:start="135:17" pos:end="135:38"><call pos:start="135:17" pos:end="135:38"><name pos:start="135:17" pos:end="135:22">memcpy</name><argument_list pos:start="135:23" pos:end="135:38">(<argument pos:start="135:24" pos:end="135:26"><expr pos:start="135:24" pos:end="135:26"><name pos:start="135:24" pos:end="135:26">src</name></expr></argument>, <argument pos:start="135:29" pos:end="135:31"><expr pos:start="135:29" pos:end="135:31"><name pos:start="135:29" pos:end="135:31">buf</name></expr></argument>, <argument pos:start="135:34" pos:end="135:37"><expr pos:start="135:34" pos:end="135:37"><name pos:start="135:34" pos:end="135:37">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="137:17" pos:end="137:48">/* no need to compute the CRC */</comment>

                <expr_stmt pos:start="139:17" pos:end="139:30"><expr pos:start="139:17" pos:end="139:29"><name pos:start="139:17" pos:end="139:25"><name pos:start="139:17" pos:end="139:19">src</name><index pos:start="139:20" pos:end="139:25">[<expr pos:start="139:21" pos:end="139:24"><name pos:start="139:21" pos:end="139:24">size</name></expr>]</index></name> <operator pos:start="139:27" pos:end="139:27">=</operator> <literal type="number" pos:start="139:29" pos:end="139:29">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:34"><expr pos:start="141:17" pos:end="141:33"><name pos:start="141:17" pos:end="141:29"><name pos:start="141:17" pos:end="141:19">src</name><index pos:start="141:20" pos:end="141:29">[<expr pos:start="141:21" pos:end="141:28"><name pos:start="141:21" pos:end="141:24">size</name> <operator pos:start="141:26" pos:end="141:26">+</operator> <literal type="number" pos:start="141:28" pos:end="141:28">1</literal></expr>]</index></name> <operator pos:start="141:31" pos:end="141:31">=</operator> <literal type="number" pos:start="141:33" pos:end="141:33">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:34"><expr pos:start="143:17" pos:end="143:33"><name pos:start="143:17" pos:end="143:29"><name pos:start="143:17" pos:end="143:19">src</name><index pos:start="143:20" pos:end="143:29">[<expr pos:start="143:21" pos:end="143:28"><name pos:start="143:21" pos:end="143:24">size</name> <operator pos:start="143:26" pos:end="143:26">+</operator> <literal type="number" pos:start="143:28" pos:end="143:28">2</literal></expr>]</index></name> <operator pos:start="143:31" pos:end="143:31">=</operator> <literal type="number" pos:start="143:33" pos:end="143:33">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:34"><expr pos:start="145:17" pos:end="145:33"><name pos:start="145:17" pos:end="145:29"><name pos:start="145:17" pos:end="145:19">src</name><index pos:start="145:20" pos:end="145:29">[<expr pos:start="145:21" pos:end="145:28"><name pos:start="145:21" pos:end="145:24">size</name> <operator pos:start="145:26" pos:end="145:26">+</operator> <literal type="number" pos:start="145:28" pos:end="145:28">3</literal></expr>]</index></name> <operator pos:start="145:31" pos:end="145:31">=</operator> <literal type="number" pos:start="145:33" pos:end="145:33">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:26"><expr pos:start="147:17" pos:end="147:25"><name pos:start="147:17" pos:end="147:20">size</name> <operator pos:start="147:22" pos:end="147:23">+=</operator> <literal type="number" pos:start="147:25" pos:end="147:25">4</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="149:15" pos:end="167:13">else if <condition pos:start="149:23" pos:end="151:64">(<expr pos:start="149:24" pos:end="151:63"><name pos:start="149:24" pos:end="149:34"><name pos:start="149:24" pos:end="149:24">s</name><operator pos:start="149:25" pos:end="149:26">-&gt;</operator><name pos:start="149:27" pos:end="149:34">looptest</name></name> <operator pos:start="149:36" pos:end="149:37">==</operator> <name pos:start="149:39" pos:end="149:56">PCNET_LOOPTEST_CRC</name> <operator pos:start="149:58" pos:end="149:59">||</operator>

                       <operator pos:start="151:24" pos:end="151:24">!</operator><call pos:start="151:25" pos:end="151:38"><name pos:start="151:25" pos:end="151:35">CSR_DXMTFCS</name><argument_list pos:start="151:36" pos:end="151:38">(<argument pos:start="151:37" pos:end="151:37"><expr pos:start="151:37" pos:end="151:37"><name pos:start="151:37" pos:end="151:37">s</name></expr></argument>)</argument_list></call> <operator pos:start="151:40" pos:end="151:41">||</operator> <name pos:start="151:43" pos:end="151:46">size</name> <operator pos:start="151:48" pos:end="151:48">&lt;</operator> <name pos:start="151:50" pos:end="151:61">MIN_BUF_SIZE</name><operator pos:start="151:62" pos:end="151:62">+</operator><literal type="number" pos:start="151:63" pos:end="151:63">4</literal></expr>)</condition> <block pos:start="151:66" pos:end="167:13">{<block_content pos:start="153:17" pos:end="165:26">

                <decl_stmt pos:start="153:17" pos:end="153:34"><decl pos:start="153:17" pos:end="153:33"><type pos:start="153:17" pos:end="153:24"><name pos:start="153:17" pos:end="153:24">uint32_t</name></type> <name pos:start="153:26" pos:end="153:28">fcs</name> <init pos:start="153:30" pos:end="153:33">= <expr pos:start="153:32" pos:end="153:33"><operator pos:start="153:32" pos:end="153:32">~</operator><literal type="number" pos:start="153:33" pos:end="153:33">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="155:17" pos:end="155:33"><decl pos:start="155:17" pos:end="155:32"><type pos:start="155:17" pos:end="155:25"><name pos:start="155:17" pos:end="155:23">uint8_t</name> <modifier pos:start="155:25" pos:end="155:25">*</modifier></type><name pos:start="155:26" pos:end="155:26">p</name> <init pos:start="155:28" pos:end="155:32">= <expr pos:start="155:30" pos:end="155:32"><name pos:start="155:30" pos:end="155:32">src</name></expr></init></decl>;</decl_stmt>



                <while pos:start="159:17" pos:end="161:35">while <condition pos:start="159:23" pos:end="159:39">(<expr pos:start="159:24" pos:end="159:38"><name pos:start="159:24" pos:end="159:24">p</name> <operator pos:start="159:26" pos:end="159:27">!=</operator> <operator pos:start="159:29" pos:end="159:29">&amp;</operator><name pos:start="159:30" pos:end="159:38"><name pos:start="159:30" pos:end="159:32">src</name><index pos:start="159:33" pos:end="159:38">[<expr pos:start="159:34" pos:end="159:37"><name pos:start="159:34" pos:end="159:37">size</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="161:21" pos:end="161:35"><block_content pos:start="161:21" pos:end="161:35">

                    <expr_stmt pos:start="161:21" pos:end="161:35"><expr pos:start="161:21" pos:end="161:34"><call pos:start="161:21" pos:end="161:34"><name pos:start="161:21" pos:end="161:23">CRC</name><argument_list pos:start="161:24" pos:end="161:34">(<argument pos:start="161:25" pos:end="161:27"><expr pos:start="161:25" pos:end="161:27"><name pos:start="161:25" pos:end="161:27">fcs</name></expr></argument>, <argument pos:start="161:30" pos:end="161:33"><expr pos:start="161:30" pos:end="161:33"><operator pos:start="161:30" pos:end="161:30">*</operator><name pos:start="161:31" pos:end="161:31">p</name><operator pos:start="161:32" pos:end="161:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="163:17" pos:end="163:44"><expr pos:start="163:17" pos:end="163:43"><operator pos:start="163:17" pos:end="163:17">*</operator><operator pos:start="163:18" pos:end="163:18">(</operator><name pos:start="163:19" pos:end="163:26">uint32_t</name> <operator pos:start="163:28" pos:end="163:28">*</operator><operator pos:start="163:29" pos:end="163:29">)</operator><name pos:start="163:30" pos:end="163:30">p</name> <operator pos:start="163:32" pos:end="163:32">=</operator> <call pos:start="163:34" pos:end="163:43"><name pos:start="163:34" pos:end="163:38">htonl</name><argument_list pos:start="163:39" pos:end="163:43">(<argument pos:start="163:40" pos:end="163:42"><expr pos:start="163:40" pos:end="163:42"><name pos:start="163:40" pos:end="163:42">fcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:26"><expr pos:start="165:17" pos:end="165:25"><name pos:start="165:17" pos:end="165:20">size</name> <operator pos:start="165:22" pos:end="165:23">+=</operator> <literal type="number" pos:start="165:25" pos:end="165:25">4</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="167:15" pos:end="186:0">else <block pos:start="167:20" pos:end="186:0">{<block_content pos:start="169:17" pos:end="179:57">

                <decl_stmt pos:start="169:17" pos:end="169:34"><decl pos:start="169:17" pos:end="169:33"><type pos:start="169:17" pos:end="169:24"><name pos:start="169:17" pos:end="169:24">uint32_t</name></type> <name pos:start="169:26" pos:end="169:28">fcs</name> <init pos:start="169:30" pos:end="169:33">= <expr pos:start="169:32" pos:end="169:33"><operator pos:start="169:32" pos:end="169:32">~</operator><literal type="number" pos:start="169:33" pos:end="169:33">0</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="171:17" pos:end="171:33"><decl pos:start="171:17" pos:end="171:32"><type pos:start="171:17" pos:end="171:25"><name pos:start="171:17" pos:end="171:23">uint8_t</name> <modifier pos:start="171:25" pos:end="171:25">*</modifier></type><name pos:start="171:26" pos:end="171:26">p</name> <init pos:start="171:28" pos:end="171:32">= <expr pos:start="171:30" pos:end="171:32"><name pos:start="171:30" pos:end="171:32">src</name></expr></init></decl>;</decl_stmt>



                <while pos:start="175:17" pos:end="177:35">while <condition pos:start="175:23" pos:end="175:41">(<expr pos:start="175:24" pos:end="175:40"><name pos:start="175:24" pos:end="175:24">p</name> <operator pos:start="175:26" pos:end="175:27">!=</operator> <operator pos:start="175:29" pos:end="175:29">&amp;</operator><name pos:start="175:30" pos:end="175:40"><name pos:start="175:30" pos:end="175:32">src</name><index pos:start="175:33" pos:end="175:40">[<expr pos:start="175:34" pos:end="175:39"><name pos:start="175:34" pos:end="175:37">size</name><operator pos:start="175:38" pos:end="175:38">-</operator><literal type="number" pos:start="175:39" pos:end="175:39">4</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="177:21" pos:end="177:35"><block_content pos:start="177:21" pos:end="177:35">

                    <expr_stmt pos:start="177:21" pos:end="177:35"><expr pos:start="177:21" pos:end="177:34"><call pos:start="177:21" pos:end="177:34"><name pos:start="177:21" pos:end="177:23">CRC</name><argument_list pos:start="177:24" pos:end="177:34">(<argument pos:start="177:25" pos:end="177:27"><expr pos:start="177:25" pos:end="177:27"><name pos:start="177:25" pos:end="177:27">fcs</name></expr></argument>, <argument pos:start="177:30" pos:end="177:33"><expr pos:start="177:30" pos:end="177:33"><operator pos:start="177:30" pos:end="177:30">*</operator><name pos:start="177:31" pos:end="177:31">p</name><operator pos:start="177:32" pos:end="177:33">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="179:17" pos:end="179:57"><expr pos:start="179:17" pos:end="179:56"><name pos:start="179:17" pos:end="179:23">crc_err</name> <operator pos:start="179:25" pos:end="179:25">=</operator> <operator pos:start="179:27" pos:end="179:27">(</operator><operator pos:start="179:28" pos:end="179:28">*</operator><operator pos:start="179:29" pos:end="179:29">(</operator><name pos:start="179:30" pos:end="179:37">uint32_t</name> <operator pos:start="179:39" pos:end="179:39">*</operator><operator pos:start="179:40" pos:end="179:40">)</operator><name pos:start="179:41" pos:end="179:41">p</name> <operator pos:start="179:43" pos:end="179:44">!=</operator> <call pos:start="179:46" pos:end="179:55"><name pos:start="179:46" pos:end="179:50">htonl</name><argument_list pos:start="179:51" pos:end="179:55">(<argument pos:start="179:52" pos:end="179:54"><expr pos:start="179:52" pos:end="179:54"><name pos:start="179:52" pos:end="179:54">fcs</name></expr></argument>)</argument_list></call><operator pos:start="179:56" pos:end="179:56">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="185:1" pos:end="185:24">#<cpp:directive pos:start="185:2" pos:end="185:6">ifdef</cpp:directive> <name pos:start="185:8" pos:end="185:24">PCNET_DEBUG_MATCH</name></cpp:ifdef>

            <expr_stmt pos:start="187:13" pos:end="190:0"><expr pos:start="187:13" pos:end="187:29"><call pos:start="187:13" pos:end="187:29"><name pos:start="187:13" pos:end="187:24">PRINT_PKTHDR</name><argument_list pos:start="187:25" pos:end="187:29">(<argument pos:start="187:26" pos:end="187:28"><expr pos:start="187:26" pos:end="187:28"><name pos:start="187:26" pos:end="187:28">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>



            <expr_stmt pos:start="193:13" pos:end="193:44"><expr pos:start="193:13" pos:end="193:43"><call pos:start="193:13" pos:end="193:43"><name pos:start="193:13" pos:end="193:19">RMDLOAD</name><argument_list pos:start="193:20" pos:end="193:43">(<argument pos:start="193:21" pos:end="193:24"><expr pos:start="193:21" pos:end="193:24"><operator pos:start="193:21" pos:end="193:21">&amp;</operator><name pos:start="193:22" pos:end="193:24">rmd</name></expr></argument>, <argument pos:start="193:27" pos:end="193:42"><expr pos:start="193:27" pos:end="193:42"><call pos:start="193:27" pos:end="193:42"><name pos:start="193:27" pos:end="193:34">PHYSADDR</name><argument_list pos:start="193:35" pos:end="193:42">(<argument pos:start="193:36" pos:end="193:36"><expr pos:start="193:36" pos:end="193:36"><name pos:start="193:36" pos:end="193:36">s</name></expr></argument>,<argument pos:start="193:38" pos:end="193:41"><expr pos:start="193:38" pos:end="193:41"><name pos:start="193:38" pos:end="193:41">crda</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="195:13" pos:end="195:35">/*if (!CSR_LAPPEN(s))*/</comment>

                <expr_stmt pos:start="197:17" pos:end="218:0"><expr pos:start="197:17" pos:end="197:52"><call pos:start="197:17" pos:end="197:52"><name pos:start="197:17" pos:end="197:25">SET_FIELD</name><argument_list pos:start="197:26" pos:end="197:52">(<argument pos:start="197:27" pos:end="197:37"><expr pos:start="197:27" pos:end="197:37"><operator pos:start="197:27" pos:end="197:27">&amp;</operator><name pos:start="197:28" pos:end="197:37"><name pos:start="197:28" pos:end="197:30">rmd</name><operator pos:start="197:31" pos:end="197:31">.</operator><name pos:start="197:32" pos:end="197:37">status</name></name></expr></argument>, <argument pos:start="197:40" pos:end="197:43"><expr pos:start="197:40" pos:end="197:43"><name pos:start="197:40" pos:end="197:43">RMDS</name></expr></argument>, <argument pos:start="197:46" pos:end="197:48"><expr pos:start="197:46" pos:end="197:48"><name pos:start="197:46" pos:end="197:48">STP</name></expr></argument>, <argument pos:start="197:51" pos:end="197:51"><expr pos:start="197:51" pos:end="197:51"><literal type="number" pos:start="197:51" pos:end="197:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:define pos:start="201:1" pos:end="217:11">#<cpp:directive pos:start="201:2" pos:end="201:7">define</cpp:directive> <cpp:macro pos:start="201:9" pos:end="201:26"><name pos:start="201:9" pos:end="201:24">PCNET_RECV_STORE</name><parameter_list pos:start="201:25" pos:end="201:26">()</parameter_list></cpp:macro> <cpp:value pos:start="201:28" pos:end="217:11">do {                                 \

    int count = MIN(4096 - GET_FIELD(rmd.buf_length, RMDL, BCNT),remaining); \

    target_phys_addr_t rbadr = PHYSADDR(s, rmd.rbadr);          \

    s-&gt;phys_mem_write(s-&gt;dma_opaque, rbadr, src, count, CSR_BSWP(s)); \

    src += count; remaining -= count;                           \

    SET_FIELD(&amp;rmd.status, RMDS, OWN, 0);                       \

    RMDSTORE(&amp;rmd, PHYSADDR(s,crda));                           \

    pktcount++;                                                 \

} while (0)</cpp:value></cpp:define>



            <expr_stmt pos:start="221:13" pos:end="221:29"><expr pos:start="221:13" pos:end="221:28"><name pos:start="221:13" pos:end="221:21">remaining</name> <operator pos:start="221:23" pos:end="221:23">=</operator> <name pos:start="221:25" pos:end="221:28">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:31"><expr pos:start="223:13" pos:end="223:30"><call pos:start="223:13" pos:end="223:30"><name pos:start="223:13" pos:end="223:28">PCNET_RECV_STORE</name><argument_list pos:start="223:29" pos:end="223:30">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="225:13" pos:end="270:0"><if pos:start="225:13" pos:end="270:0">if <condition pos:start="225:16" pos:end="225:47">(<expr pos:start="225:17" pos:end="225:46"><operator pos:start="225:17" pos:end="225:17">(</operator><name pos:start="225:18" pos:end="225:26">remaining</name> <operator pos:start="225:28" pos:end="225:28">&gt;</operator> <literal type="number" pos:start="225:30" pos:end="225:30">0</literal><operator pos:start="225:31" pos:end="225:31">)</operator> <operator pos:start="225:33" pos:end="225:34">&amp;&amp;</operator> <call pos:start="225:36" pos:end="225:46"><name pos:start="225:36" pos:end="225:43">CSR_NRDA</name><argument_list pos:start="225:44" pos:end="225:46">(<argument pos:start="225:45" pos:end="225:45"><expr pos:start="225:45" pos:end="225:45"><name pos:start="225:45" pos:end="225:45">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:49" pos:end="270:0">{<block_content pos:start="227:17" pos:end="263:17">

                <decl_stmt pos:start="227:17" pos:end="230:0"><decl pos:start="227:17" pos:end="227:53"><type pos:start="227:17" pos:end="227:34"><name pos:start="227:17" pos:end="227:34">target_phys_addr_t</name></type> <name pos:start="227:36" pos:end="227:39">nrda</name> <init pos:start="227:41" pos:end="227:53">= <expr pos:start="227:43" pos:end="227:53"><call pos:start="227:43" pos:end="227:53"><name pos:start="227:43" pos:end="227:50">CSR_NRDA</name><argument_list pos:start="227:51" pos:end="227:53">(<argument pos:start="227:52" pos:end="227:52"><expr pos:start="227:52" pos:end="227:52"><name pos:start="227:52" pos:end="227:52">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="229:1" pos:end="229:22">#<cpp:directive pos:start="229:2" pos:end="229:6">ifdef</cpp:directive> <name pos:start="229:8" pos:end="229:22">PCNET_DEBUG_RMD</name></cpp:ifdef>

                <expr_stmt pos:start="231:17" pos:end="234:0"><expr pos:start="231:17" pos:end="231:31"><call pos:start="231:17" pos:end="231:31"><name pos:start="231:17" pos:end="231:25">PRINT_RMD</name><argument_list pos:start="231:26" pos:end="231:31">(<argument pos:start="231:27" pos:end="231:30"><expr pos:start="231:27" pos:end="231:30"><operator pos:start="231:27" pos:end="231:27">&amp;</operator><name pos:start="231:28" pos:end="231:30">rmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="233:1" pos:end="233:6">#<cpp:directive pos:start="233:2" pos:end="233:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="235:17" pos:end="235:48"><expr pos:start="235:17" pos:end="235:47"><call pos:start="235:17" pos:end="235:47"><name pos:start="235:17" pos:end="235:23">RMDLOAD</name><argument_list pos:start="235:24" pos:end="235:47">(<argument pos:start="235:25" pos:end="235:28"><expr pos:start="235:25" pos:end="235:28"><operator pos:start="235:25" pos:end="235:25">&amp;</operator><name pos:start="235:26" pos:end="235:28">rmd</name></expr></argument>, <argument pos:start="235:31" pos:end="235:46"><expr pos:start="235:31" pos:end="235:46"><call pos:start="235:31" pos:end="235:46"><name pos:start="235:31" pos:end="235:38">PHYSADDR</name><argument_list pos:start="235:39" pos:end="235:46">(<argument pos:start="235:40" pos:end="235:40"><expr pos:start="235:40" pos:end="235:40"><name pos:start="235:40" pos:end="235:40">s</name></expr></argument>,<argument pos:start="235:42" pos:end="235:45"><expr pos:start="235:42" pos:end="235:45"><name pos:start="235:42" pos:end="235:45">nrda</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="237:17" pos:end="263:17"><if pos:start="237:17" pos:end="263:17">if <condition pos:start="237:20" pos:end="237:53">(<expr pos:start="237:21" pos:end="237:52"><call pos:start="237:21" pos:end="237:52"><name pos:start="237:21" pos:end="237:29">GET_FIELD</name><argument_list pos:start="237:30" pos:end="237:52">(<argument pos:start="237:31" pos:end="237:40"><expr pos:start="237:31" pos:end="237:40"><name pos:start="237:31" pos:end="237:40"><name pos:start="237:31" pos:end="237:33">rmd</name><operator pos:start="237:34" pos:end="237:34">.</operator><name pos:start="237:35" pos:end="237:40">status</name></name></expr></argument>, <argument pos:start="237:43" pos:end="237:46"><expr pos:start="237:43" pos:end="237:46"><name pos:start="237:43" pos:end="237:46">RMDS</name></expr></argument>, <argument pos:start="237:49" pos:end="237:51"><expr pos:start="237:49" pos:end="237:51"><name pos:start="237:49" pos:end="237:51">OWN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="237:55" pos:end="263:17">{<block_content pos:start="239:21" pos:end="261:21">

                    <expr_stmt pos:start="239:21" pos:end="239:32"><expr pos:start="239:21" pos:end="239:31"><name pos:start="239:21" pos:end="239:24">crda</name> <operator pos:start="239:26" pos:end="239:26">=</operator> <name pos:start="239:28" pos:end="239:31">nrda</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="241:21" pos:end="244:0"><expr pos:start="241:21" pos:end="241:38"><call pos:start="241:21" pos:end="241:38"><name pos:start="241:21" pos:end="241:36">PCNET_RECV_STORE</name><argument_list pos:start="241:37" pos:end="241:38">()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="243:1" pos:end="243:22">#<cpp:directive pos:start="243:2" pos:end="243:6">ifdef</cpp:directive> <name pos:start="243:8" pos:end="243:22">PCNET_DEBUG_RMD</name></cpp:ifdef>

                    <expr_stmt pos:start="245:21" pos:end="248:0"><expr pos:start="245:21" pos:end="245:35"><call pos:start="245:21" pos:end="245:35"><name pos:start="245:21" pos:end="245:29">PRINT_RMD</name><argument_list pos:start="245:30" pos:end="245:35">(<argument pos:start="245:31" pos:end="245:34"><expr pos:start="245:31" pos:end="245:34"><operator pos:start="245:31" pos:end="245:31">&amp;</operator><name pos:start="245:32" pos:end="245:34">rmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="247:1" pos:end="247:6">#<cpp:directive pos:start="247:2" pos:end="247:6">endif</cpp:directive></cpp:endif>

                    <if_stmt pos:start="249:21" pos:end="261:21"><if pos:start="249:21" pos:end="261:21">if <condition pos:start="249:24" pos:end="249:62">(<expr pos:start="249:25" pos:end="249:61"><operator pos:start="249:25" pos:end="249:25">(</operator><name pos:start="249:26" pos:end="249:34">remaining</name> <operator pos:start="249:36" pos:end="249:36">&gt;</operator> <literal type="number" pos:start="249:38" pos:end="249:38">0</literal><operator pos:start="249:39" pos:end="249:39">)</operator> <operator pos:start="249:41" pos:end="249:42">&amp;&amp;</operator> <operator pos:start="249:44" pos:end="249:44">(</operator><name pos:start="249:45" pos:end="249:48">nrda</name><operator pos:start="249:49" pos:end="249:49">=</operator><call pos:start="249:50" pos:end="249:60"><name pos:start="249:50" pos:end="249:57">CSR_NNRD</name><argument_list pos:start="249:58" pos:end="249:60">(<argument pos:start="249:59" pos:end="249:59"><expr pos:start="249:59" pos:end="249:59"><name pos:start="249:59" pos:end="249:59">s</name></expr></argument>)</argument_list></call><operator pos:start="249:61" pos:end="249:61">)</operator></expr>)</condition> <block pos:start="249:64" pos:end="261:21">{<block_content pos:start="251:25" pos:end="259:25">

                        <expr_stmt pos:start="251:25" pos:end="251:56"><expr pos:start="251:25" pos:end="251:55"><call pos:start="251:25" pos:end="251:55"><name pos:start="251:25" pos:end="251:31">RMDLOAD</name><argument_list pos:start="251:32" pos:end="251:55">(<argument pos:start="251:33" pos:end="251:36"><expr pos:start="251:33" pos:end="251:36"><operator pos:start="251:33" pos:end="251:33">&amp;</operator><name pos:start="251:34" pos:end="251:36">rmd</name></expr></argument>, <argument pos:start="251:39" pos:end="251:54"><expr pos:start="251:39" pos:end="251:54"><call pos:start="251:39" pos:end="251:54"><name pos:start="251:39" pos:end="251:46">PHYSADDR</name><argument_list pos:start="251:47" pos:end="251:54">(<argument pos:start="251:48" pos:end="251:48"><expr pos:start="251:48" pos:end="251:48"><name pos:start="251:48" pos:end="251:48">s</name></expr></argument>,<argument pos:start="251:50" pos:end="251:53"><expr pos:start="251:50" pos:end="251:53"><name pos:start="251:50" pos:end="251:53">nrda</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="253:25" pos:end="259:25"><if pos:start="253:25" pos:end="259:25">if <condition pos:start="253:28" pos:end="253:61">(<expr pos:start="253:29" pos:end="253:60"><call pos:start="253:29" pos:end="253:60"><name pos:start="253:29" pos:end="253:37">GET_FIELD</name><argument_list pos:start="253:38" pos:end="253:60">(<argument pos:start="253:39" pos:end="253:48"><expr pos:start="253:39" pos:end="253:48"><name pos:start="253:39" pos:end="253:48"><name pos:start="253:39" pos:end="253:41">rmd</name><operator pos:start="253:42" pos:end="253:42">.</operator><name pos:start="253:43" pos:end="253:48">status</name></name></expr></argument>, <argument pos:start="253:51" pos:end="253:54"><expr pos:start="253:51" pos:end="253:54"><name pos:start="253:51" pos:end="253:54">RMDS</name></expr></argument>, <argument pos:start="253:57" pos:end="253:59"><expr pos:start="253:57" pos:end="253:59"><name pos:start="253:57" pos:end="253:59">OWN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="253:63" pos:end="259:25">{<block_content pos:start="255:29" pos:end="257:47">

                            <expr_stmt pos:start="255:29" pos:end="255:40"><expr pos:start="255:29" pos:end="255:39"><name pos:start="255:29" pos:end="255:32">crda</name> <operator pos:start="255:34" pos:end="255:34">=</operator> <name pos:start="255:36" pos:end="255:39">nrda</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="257:29" pos:end="257:47"><expr pos:start="257:29" pos:end="257:46"><call pos:start="257:29" pos:end="257:46"><name pos:start="257:29" pos:end="257:44">PCNET_RECV_STORE</name><argument_list pos:start="257:45" pos:end="257:46">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



<cpp:undef pos:start="269:1" pos:end="269:23">#<cpp:directive pos:start="269:2" pos:end="269:6">undef</cpp:directive> <name pos:start="269:8" pos:end="269:23">PCNET_RECV_STORE</name></cpp:undef>



            <expr_stmt pos:start="273:13" pos:end="273:44"><expr pos:start="273:13" pos:end="273:43"><call pos:start="273:13" pos:end="273:43"><name pos:start="273:13" pos:end="273:19">RMDLOAD</name><argument_list pos:start="273:20" pos:end="273:43">(<argument pos:start="273:21" pos:end="273:24"><expr pos:start="273:21" pos:end="273:24"><operator pos:start="273:21" pos:end="273:21">&amp;</operator><name pos:start="273:22" pos:end="273:24">rmd</name></expr></argument>, <argument pos:start="273:27" pos:end="273:42"><expr pos:start="273:27" pos:end="273:42"><call pos:start="273:27" pos:end="273:42"><name pos:start="273:27" pos:end="273:34">PHYSADDR</name><argument_list pos:start="273:35" pos:end="273:42">(<argument pos:start="273:36" pos:end="273:36"><expr pos:start="273:36" pos:end="273:36"><name pos:start="273:36" pos:end="273:36">s</name></expr></argument>,<argument pos:start="273:38" pos:end="273:41"><expr pos:start="273:38" pos:end="273:41"><name pos:start="273:38" pos:end="273:41">crda</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="275:13" pos:end="303:13"><if pos:start="275:13" pos:end="295:13">if <condition pos:start="275:16" pos:end="275:31">(<expr pos:start="275:17" pos:end="275:30"><name pos:start="275:17" pos:end="275:25">remaining</name> <operator pos:start="275:27" pos:end="275:28">==</operator> <literal type="number" pos:start="275:30" pos:end="275:30">0</literal></expr>)</condition> <block pos:start="275:33" pos:end="295:13">{<block_content pos:start="277:17" pos:end="293:17">

                <expr_stmt pos:start="277:17" pos:end="277:61"><expr pos:start="277:17" pos:end="277:60"><call pos:start="277:17" pos:end="277:60"><name pos:start="277:17" pos:end="277:25">SET_FIELD</name><argument_list pos:start="277:26" pos:end="277:60">(<argument pos:start="277:27" pos:end="277:41"><expr pos:start="277:27" pos:end="277:41"><operator pos:start="277:27" pos:end="277:27">&amp;</operator><name pos:start="277:28" pos:end="277:41"><name pos:start="277:28" pos:end="277:30">rmd</name><operator pos:start="277:31" pos:end="277:31">.</operator><name pos:start="277:32" pos:end="277:41">msg_length</name></name></expr></argument>, <argument pos:start="277:44" pos:end="277:47"><expr pos:start="277:44" pos:end="277:47"><name pos:start="277:44" pos:end="277:47">RMDM</name></expr></argument>, <argument pos:start="277:50" pos:end="277:53"><expr pos:start="277:50" pos:end="277:53"><name pos:start="277:50" pos:end="277:53">MCNT</name></expr></argument>, <argument pos:start="277:56" pos:end="277:59"><expr pos:start="277:56" pos:end="277:59"><name pos:start="277:56" pos:end="277:59">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="279:17" pos:end="279:53"><expr pos:start="279:17" pos:end="279:52"><call pos:start="279:17" pos:end="279:52"><name pos:start="279:17" pos:end="279:25">SET_FIELD</name><argument_list pos:start="279:26" pos:end="279:52">(<argument pos:start="279:27" pos:end="279:37"><expr pos:start="279:27" pos:end="279:37"><operator pos:start="279:27" pos:end="279:27">&amp;</operator><name pos:start="279:28" pos:end="279:37"><name pos:start="279:28" pos:end="279:30">rmd</name><operator pos:start="279:31" pos:end="279:31">.</operator><name pos:start="279:32" pos:end="279:37">status</name></name></expr></argument>, <argument pos:start="279:40" pos:end="279:43"><expr pos:start="279:40" pos:end="279:43"><name pos:start="279:40" pos:end="279:43">RMDS</name></expr></argument>, <argument pos:start="279:46" pos:end="279:48"><expr pos:start="279:46" pos:end="279:48"><name pos:start="279:46" pos:end="279:48">ENP</name></expr></argument>, <argument pos:start="279:51" pos:end="279:51"><expr pos:start="279:51" pos:end="279:51"><literal type="number" pos:start="279:51" pos:end="279:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:75"><expr pos:start="281:17" pos:end="281:74"><call pos:start="281:17" pos:end="281:74"><name pos:start="281:17" pos:end="281:25">SET_FIELD</name><argument_list pos:start="281:26" pos:end="281:74">(<argument pos:start="281:27" pos:end="281:37"><expr pos:start="281:27" pos:end="281:37"><operator pos:start="281:27" pos:end="281:27">&amp;</operator><name pos:start="281:28" pos:end="281:37"><name pos:start="281:28" pos:end="281:30">rmd</name><operator pos:start="281:31" pos:end="281:31">.</operator><name pos:start="281:32" pos:end="281:37">status</name></name></expr></argument>, <argument pos:start="281:40" pos:end="281:43"><expr pos:start="281:40" pos:end="281:43"><name pos:start="281:40" pos:end="281:43">RMDS</name></expr></argument>, <argument pos:start="281:46" pos:end="281:48"><expr pos:start="281:46" pos:end="281:48"><name pos:start="281:46" pos:end="281:48">PAM</name></expr></argument>, <argument pos:start="281:51" pos:end="281:73"><expr pos:start="281:51" pos:end="281:73"><operator pos:start="281:51" pos:end="281:51">!</operator><call pos:start="281:52" pos:end="281:62"><name pos:start="281:52" pos:end="281:59">CSR_PROM</name><argument_list pos:start="281:60" pos:end="281:62">(<argument pos:start="281:61" pos:end="281:61"><expr pos:start="281:61" pos:end="281:61"><name pos:start="281:61" pos:end="281:61">s</name></expr></argument>)</argument_list></call> <operator pos:start="281:64" pos:end="281:65">&amp;&amp;</operator> <name pos:start="281:67" pos:end="281:73">is_padr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="283:17" pos:end="283:76"><expr pos:start="283:17" pos:end="283:75"><call pos:start="283:17" pos:end="283:75"><name pos:start="283:17" pos:end="283:25">SET_FIELD</name><argument_list pos:start="283:26" pos:end="283:75">(<argument pos:start="283:27" pos:end="283:37"><expr pos:start="283:27" pos:end="283:37"><operator pos:start="283:27" pos:end="283:27">&amp;</operator><name pos:start="283:28" pos:end="283:37"><name pos:start="283:28" pos:end="283:30">rmd</name><operator pos:start="283:31" pos:end="283:31">.</operator><name pos:start="283:32" pos:end="283:37">status</name></name></expr></argument>, <argument pos:start="283:40" pos:end="283:43"><expr pos:start="283:40" pos:end="283:43"><name pos:start="283:40" pos:end="283:43">RMDS</name></expr></argument>, <argument pos:start="283:46" pos:end="283:49"><expr pos:start="283:46" pos:end="283:49"><name pos:start="283:46" pos:end="283:49">LFAM</name></expr></argument>, <argument pos:start="283:52" pos:end="283:74"><expr pos:start="283:52" pos:end="283:74"><operator pos:start="283:52" pos:end="283:52">!</operator><call pos:start="283:53" pos:end="283:63"><name pos:start="283:53" pos:end="283:60">CSR_PROM</name><argument_list pos:start="283:61" pos:end="283:63">(<argument pos:start="283:62" pos:end="283:62"><expr pos:start="283:62" pos:end="283:62"><name pos:start="283:62" pos:end="283:62">s</name></expr></argument>)</argument_list></call> <operator pos:start="283:65" pos:end="283:66">&amp;&amp;</operator> <name pos:start="283:68" pos:end="283:74">is_ladr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:76"><expr pos:start="285:17" pos:end="285:75"><call pos:start="285:17" pos:end="285:75"><name pos:start="285:17" pos:end="285:25">SET_FIELD</name><argument_list pos:start="285:26" pos:end="285:75">(<argument pos:start="285:27" pos:end="285:37"><expr pos:start="285:27" pos:end="285:37"><operator pos:start="285:27" pos:end="285:27">&amp;</operator><name pos:start="285:28" pos:end="285:37"><name pos:start="285:28" pos:end="285:30">rmd</name><operator pos:start="285:31" pos:end="285:31">.</operator><name pos:start="285:32" pos:end="285:37">status</name></name></expr></argument>, <argument pos:start="285:40" pos:end="285:43"><expr pos:start="285:40" pos:end="285:43"><name pos:start="285:40" pos:end="285:43">RMDS</name></expr></argument>, <argument pos:start="285:46" pos:end="285:48"><expr pos:start="285:46" pos:end="285:48"><name pos:start="285:46" pos:end="285:48">BAM</name></expr></argument>, <argument pos:start="285:51" pos:end="285:74"><expr pos:start="285:51" pos:end="285:74"><operator pos:start="285:51" pos:end="285:51">!</operator><call pos:start="285:52" pos:end="285:62"><name pos:start="285:52" pos:end="285:59">CSR_PROM</name><argument_list pos:start="285:60" pos:end="285:62">(<argument pos:start="285:61" pos:end="285:61"><expr pos:start="285:61" pos:end="285:61"><name pos:start="285:61" pos:end="285:61">s</name></expr></argument>)</argument_list></call> <operator pos:start="285:64" pos:end="285:65">&amp;&amp;</operator> <name pos:start="285:67" pos:end="285:74">is_bcast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="287:17" pos:end="293:17"><if pos:start="287:17" pos:end="293:17">if <condition pos:start="287:20" pos:end="287:28">(<expr pos:start="287:21" pos:end="287:27"><name pos:start="287:21" pos:end="287:27">crc_err</name></expr>)</condition> <block pos:start="287:30" pos:end="293:17">{<block_content pos:start="289:21" pos:end="291:57">

                    <expr_stmt pos:start="289:21" pos:end="289:57"><expr pos:start="289:21" pos:end="289:56"><call pos:start="289:21" pos:end="289:56"><name pos:start="289:21" pos:end="289:29">SET_FIELD</name><argument_list pos:start="289:30" pos:end="289:56">(<argument pos:start="289:31" pos:end="289:41"><expr pos:start="289:31" pos:end="289:41"><operator pos:start="289:31" pos:end="289:31">&amp;</operator><name pos:start="289:32" pos:end="289:41"><name pos:start="289:32" pos:end="289:34">rmd</name><operator pos:start="289:35" pos:end="289:35">.</operator><name pos:start="289:36" pos:end="289:41">status</name></name></expr></argument>, <argument pos:start="289:44" pos:end="289:47"><expr pos:start="289:44" pos:end="289:47"><name pos:start="289:44" pos:end="289:47">RMDS</name></expr></argument>, <argument pos:start="289:50" pos:end="289:52"><expr pos:start="289:50" pos:end="289:52"><name pos:start="289:50" pos:end="289:52">CRC</name></expr></argument>, <argument pos:start="289:55" pos:end="289:55"><expr pos:start="289:55" pos:end="289:55"><literal type="number" pos:start="289:55" pos:end="289:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="291:21" pos:end="291:57"><expr pos:start="291:21" pos:end="291:56"><call pos:start="291:21" pos:end="291:56"><name pos:start="291:21" pos:end="291:29">SET_FIELD</name><argument_list pos:start="291:30" pos:end="291:56">(<argument pos:start="291:31" pos:end="291:41"><expr pos:start="291:31" pos:end="291:41"><operator pos:start="291:31" pos:end="291:31">&amp;</operator><name pos:start="291:32" pos:end="291:41"><name pos:start="291:32" pos:end="291:34">rmd</name><operator pos:start="291:35" pos:end="291:35">.</operator><name pos:start="291:36" pos:end="291:41">status</name></name></expr></argument>, <argument pos:start="291:44" pos:end="291:47"><expr pos:start="291:44" pos:end="291:47"><name pos:start="291:44" pos:end="291:47">RMDS</name></expr></argument>, <argument pos:start="291:50" pos:end="291:52"><expr pos:start="291:50" pos:end="291:52"><name pos:start="291:50" pos:end="291:52">ERR</name></expr></argument>, <argument pos:start="291:55" pos:end="291:55"><expr pos:start="291:55" pos:end="291:55"><literal type="number" pos:start="291:55" pos:end="291:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="295:15" pos:end="303:13">else <block pos:start="295:20" pos:end="303:13">{<block_content pos:start="297:17" pos:end="301:53">

                <expr_stmt pos:start="297:17" pos:end="297:54"><expr pos:start="297:17" pos:end="297:53"><call pos:start="297:17" pos:end="297:53"><name pos:start="297:17" pos:end="297:25">SET_FIELD</name><argument_list pos:start="297:26" pos:end="297:53">(<argument pos:start="297:27" pos:end="297:37"><expr pos:start="297:27" pos:end="297:37"><operator pos:start="297:27" pos:end="297:27">&amp;</operator><name pos:start="297:28" pos:end="297:37"><name pos:start="297:28" pos:end="297:30">rmd</name><operator pos:start="297:31" pos:end="297:31">.</operator><name pos:start="297:32" pos:end="297:37">status</name></name></expr></argument>, <argument pos:start="297:40" pos:end="297:43"><expr pos:start="297:40" pos:end="297:43"><name pos:start="297:40" pos:end="297:43">RMDS</name></expr></argument>, <argument pos:start="297:46" pos:end="297:49"><expr pos:start="297:46" pos:end="297:49"><name pos:start="297:46" pos:end="297:49">OFLO</name></expr></argument>, <argument pos:start="297:52" pos:end="297:52"><expr pos:start="297:52" pos:end="297:52"><literal type="number" pos:start="297:52" pos:end="297:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="299:17" pos:end="299:54"><expr pos:start="299:17" pos:end="299:53"><call pos:start="299:17" pos:end="299:53"><name pos:start="299:17" pos:end="299:25">SET_FIELD</name><argument_list pos:start="299:26" pos:end="299:53">(<argument pos:start="299:27" pos:end="299:37"><expr pos:start="299:27" pos:end="299:37"><operator pos:start="299:27" pos:end="299:27">&amp;</operator><name pos:start="299:28" pos:end="299:37"><name pos:start="299:28" pos:end="299:30">rmd</name><operator pos:start="299:31" pos:end="299:31">.</operator><name pos:start="299:32" pos:end="299:37">status</name></name></expr></argument>, <argument pos:start="299:40" pos:end="299:43"><expr pos:start="299:40" pos:end="299:43"><name pos:start="299:40" pos:end="299:43">RMDS</name></expr></argument>, <argument pos:start="299:46" pos:end="299:49"><expr pos:start="299:46" pos:end="299:49"><name pos:start="299:46" pos:end="299:49">BUFF</name></expr></argument>, <argument pos:start="299:52" pos:end="299:52"><expr pos:start="299:52" pos:end="299:52"><literal type="number" pos:start="299:52" pos:end="299:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:53"><expr pos:start="301:17" pos:end="301:52"><call pos:start="301:17" pos:end="301:52"><name pos:start="301:17" pos:end="301:25">SET_FIELD</name><argument_list pos:start="301:26" pos:end="301:52">(<argument pos:start="301:27" pos:end="301:37"><expr pos:start="301:27" pos:end="301:37"><operator pos:start="301:27" pos:end="301:27">&amp;</operator><name pos:start="301:28" pos:end="301:37"><name pos:start="301:28" pos:end="301:30">rmd</name><operator pos:start="301:31" pos:end="301:31">.</operator><name pos:start="301:32" pos:end="301:37">status</name></name></expr></argument>, <argument pos:start="301:40" pos:end="301:43"><expr pos:start="301:40" pos:end="301:43"><name pos:start="301:40" pos:end="301:43">RMDS</name></expr></argument>, <argument pos:start="301:46" pos:end="301:48"><expr pos:start="301:46" pos:end="301:48"><name pos:start="301:46" pos:end="301:48">ERR</name></expr></argument>, <argument pos:start="301:51" pos:end="301:51"><expr pos:start="301:51" pos:end="301:51"><literal type="number" pos:start="301:51" pos:end="301:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:45"><expr pos:start="305:13" pos:end="305:44"><call pos:start="305:13" pos:end="305:44"><name pos:start="305:13" pos:end="305:20">RMDSTORE</name><argument_list pos:start="305:21" pos:end="305:44">(<argument pos:start="305:22" pos:end="305:25"><expr pos:start="305:22" pos:end="305:25"><operator pos:start="305:22" pos:end="305:22">&amp;</operator><name pos:start="305:23" pos:end="305:25">rmd</name></expr></argument>, <argument pos:start="305:28" pos:end="305:43"><expr pos:start="305:28" pos:end="305:43"><call pos:start="305:28" pos:end="305:43"><name pos:start="305:28" pos:end="305:35">PHYSADDR</name><argument_list pos:start="305:36" pos:end="305:43">(<argument pos:start="305:37" pos:end="305:37"><expr pos:start="305:37" pos:end="305:37"><name pos:start="305:37" pos:end="305:37">s</name></expr></argument>,<argument pos:start="305:39" pos:end="305:42"><expr pos:start="305:39" pos:end="305:42"><name pos:start="305:39" pos:end="305:42">crda</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="312:0"><expr pos:start="307:13" pos:end="307:31"><name pos:start="307:13" pos:end="307:21"><name pos:start="307:13" pos:end="307:13">s</name><operator pos:start="307:14" pos:end="307:15">-&gt;</operator><name pos:start="307:16" pos:end="307:18">csr</name><index pos:start="307:19" pos:end="307:21">[<expr pos:start="307:20" pos:end="307:20"><literal type="number" pos:start="307:20" pos:end="307:20">0</literal></expr>]</index></name> <operator pos:start="307:23" pos:end="307:24">|=</operator> <literal type="number" pos:start="307:26" pos:end="307:31">0x0400</literal></expr>;</expr_stmt>



<cpp:ifdef pos:start="311:1" pos:end="311:18">#<cpp:directive pos:start="311:2" pos:end="311:6">ifdef</cpp:directive> <name pos:start="311:8" pos:end="311:18">PCNET_DEBUG</name></cpp:ifdef>

            <expr_stmt pos:start="313:13" pos:end="320:0"><expr pos:start="313:13" pos:end="315:64"><call pos:start="313:13" pos:end="315:64"><name pos:start="313:13" pos:end="313:18">printf</name><argument_list pos:start="313:19" pos:end="315:64">(<argument pos:start="313:20" pos:end="313:51"><expr pos:start="313:20" pos:end="313:51"><literal type="string" pos:start="313:20" pos:end="313:51">"RCVRC=%d CRDA=0x%08x BLKS=%d\n"</literal></expr></argument>,

                <argument pos:start="315:17" pos:end="315:28"><expr pos:start="315:17" pos:end="315:28"><call pos:start="315:17" pos:end="315:28"><name pos:start="315:17" pos:end="315:25">CSR_RCVRC</name><argument_list pos:start="315:26" pos:end="315:28">(<argument pos:start="315:27" pos:end="315:27"><expr pos:start="315:27" pos:end="315:27"><name pos:start="315:27" pos:end="315:27">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="315:31" pos:end="315:53"><expr pos:start="315:31" pos:end="315:53"><call pos:start="315:31" pos:end="315:53"><name pos:start="315:31" pos:end="315:38">PHYSADDR</name><argument_list pos:start="315:39" pos:end="315:53">(<argument pos:start="315:40" pos:end="315:40"><expr pos:start="315:40" pos:end="315:40"><name pos:start="315:40" pos:end="315:40">s</name></expr></argument>,<argument pos:start="315:42" pos:end="315:52"><expr pos:start="315:42" pos:end="315:52"><call pos:start="315:42" pos:end="315:52"><name pos:start="315:42" pos:end="315:49">CSR_CRDA</name><argument_list pos:start="315:50" pos:end="315:52">(<argument pos:start="315:51" pos:end="315:51"><expr pos:start="315:51" pos:end="315:51"><name pos:start="315:51" pos:end="315:51">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="315:56" pos:end="315:63"><expr pos:start="315:56" pos:end="315:63"><name pos:start="315:56" pos:end="315:63">pktcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="317:1" pos:end="317:6">#<cpp:directive pos:start="317:2" pos:end="317:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="319:1" pos:end="319:22">#<cpp:directive pos:start="319:2" pos:end="319:6">ifdef</cpp:directive> <name pos:start="319:8" pos:end="319:22">PCNET_DEBUG_RMD</name></cpp:ifdef>

            <expr_stmt pos:start="321:13" pos:end="324:0"><expr pos:start="321:13" pos:end="321:27"><call pos:start="321:13" pos:end="321:27"><name pos:start="321:13" pos:end="321:21">PRINT_RMD</name><argument_list pos:start="321:22" pos:end="321:27">(<argument pos:start="321:23" pos:end="321:26"><expr pos:start="321:23" pos:end="321:26"><operator pos:start="321:23" pos:end="321:23">&amp;</operator><name pos:start="321:24" pos:end="321:26">rmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="323:1" pos:end="323:6">#<cpp:directive pos:start="323:2" pos:end="323:6">endif</cpp:directive></cpp:endif>



            <while pos:start="327:13" pos:end="337:13">while <condition pos:start="327:19" pos:end="327:30">(<expr pos:start="327:20" pos:end="327:29"><name pos:start="327:20" pos:end="327:27">pktcount</name><operator pos:start="327:28" pos:end="327:29">--</operator></expr>)</condition> <block pos:start="327:32" pos:end="337:13">{<block_content pos:start="329:17" pos:end="335:35">

                <if_stmt pos:start="329:17" pos:end="335:35"><if pos:start="329:17" pos:end="331:48">if <condition pos:start="329:20" pos:end="329:38">(<expr pos:start="329:21" pos:end="329:37"><call pos:start="329:21" pos:end="329:32"><name pos:start="329:21" pos:end="329:29">CSR_RCVRC</name><argument_list pos:start="329:30" pos:end="329:32">(<argument pos:start="329:31" pos:end="329:31"><expr pos:start="329:31" pos:end="329:31"><name pos:start="329:31" pos:end="329:31">s</name></expr></argument>)</argument_list></call> <operator pos:start="329:34" pos:end="329:35">&lt;=</operator> <literal type="number" pos:start="329:37" pos:end="329:37">1</literal></expr>)</condition><block type="pseudo" pos:start="331:21" pos:end="331:48"><block_content pos:start="331:21" pos:end="331:48">

                    <expr_stmt pos:start="331:21" pos:end="331:48"><expr pos:start="331:21" pos:end="331:47"><call pos:start="331:21" pos:end="331:32"><name pos:start="331:21" pos:end="331:29">CSR_RCVRC</name><argument_list pos:start="331:30" pos:end="331:32">(<argument pos:start="331:31" pos:end="331:31"><expr pos:start="331:31" pos:end="331:31"><name pos:start="331:31" pos:end="331:31">s</name></expr></argument>)</argument_list></call> <operator pos:start="331:34" pos:end="331:34">=</operator> <call pos:start="331:36" pos:end="331:47"><name pos:start="331:36" pos:end="331:44">CSR_RCVRL</name><argument_list pos:start="331:45" pos:end="331:47">(<argument pos:start="331:46" pos:end="331:46"><expr pos:start="331:46" pos:end="331:46"><name pos:start="331:46" pos:end="331:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="333:17" pos:end="335:35">else<block type="pseudo" pos:start="335:21" pos:end="335:35"><block_content pos:start="335:21" pos:end="335:35">

                    <expr_stmt pos:start="335:21" pos:end="335:35"><expr pos:start="335:21" pos:end="335:34"><call pos:start="335:21" pos:end="335:32"><name pos:start="335:21" pos:end="335:29">CSR_RCVRC</name><argument_list pos:start="335:30" pos:end="335:32">(<argument pos:start="335:31" pos:end="335:31"><expr pos:start="335:31" pos:end="335:31"><name pos:start="335:31" pos:end="335:31">s</name></expr></argument>)</argument_list></call><operator pos:start="335:33" pos:end="335:34">--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></while>



            <expr_stmt pos:start="341:13" pos:end="341:31"><expr pos:start="341:13" pos:end="341:30"><call pos:start="341:13" pos:end="341:30"><name pos:start="341:13" pos:end="341:27">pcnet_rdte_poll</name><argument_list pos:start="341:28" pos:end="341:30">(<argument pos:start="341:29" pos:end="341:29"><expr pos:start="341:29" pos:end="341:29"><name pos:start="341:29" pos:end="341:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="351:5" pos:end="351:18"><expr pos:start="351:5" pos:end="351:17"><call pos:start="351:5" pos:end="351:17"><name pos:start="351:5" pos:end="351:14">pcnet_poll</name><argument_list pos:start="351:15" pos:end="351:17">(<argument pos:start="351:16" pos:end="351:16"><expr pos:start="351:16" pos:end="351:16"><name pos:start="351:16" pos:end="351:16">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:24"><expr pos:start="353:5" pos:end="353:23"><call pos:start="353:5" pos:end="353:23"><name pos:start="353:5" pos:end="353:20">pcnet_update_irq</name><argument_list pos:start="353:21" pos:end="353:23">(<argument pos:start="353:22" pos:end="353:22"><expr pos:start="353:22" pos:end="353:22"><name pos:start="353:22" pos:end="353:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="357:5" pos:end="357:17">return <expr pos:start="357:12" pos:end="357:16"><name pos:start="357:12" pos:end="357:16">size_</name></expr>;</return>

</block_content>}</block></function>
</unit>
