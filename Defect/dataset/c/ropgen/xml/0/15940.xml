<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15940.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">imx_fec_do_tx</name><parameter_list pos:start="1:26" pos:end="1:41">(<parameter pos:start="1:27" pos:end="1:40"><decl pos:start="1:27" pos:end="1:40"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:37">IMXFECState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:22">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:18">frame_size</name> <init pos:start="5:20" pos:end="5:22">= <expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:38"><name pos:start="7:13" pos:end="7:17">frame</name><index pos:start="7:18" pos:end="7:38">[<expr pos:start="7:19" pos:end="7:37"><name pos:start="7:19" pos:end="7:37">ENET_MAX_FRAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">ptr</name> <init pos:start="9:18" pos:end="9:24">= <expr pos:start="9:20" pos:end="9:24"><name pos:start="9:20" pos:end="9:24">frame</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">addr</name> <init pos:start="11:19" pos:end="11:36">= <expr pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:36"><name pos:start="11:21" pos:end="11:21">s</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:36">tx_descriptor</name></name></expr></init></decl>;</decl_stmt>



    <while pos:start="15:5" pos:end="89:5">while <condition pos:start="15:11" pos:end="15:13">(<expr pos:start="15:12" pos:end="15:12"><literal type="number" pos:start="15:12" pos:end="15:12">1</literal></expr>)</condition> <block pos:start="15:15" pos:end="89:5">{<block_content pos:start="17:9" pos:end="87:9">

        <decl_stmt pos:start="17:9" pos:end="17:25"><decl pos:start="17:9" pos:end="17:24"><type pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:21">IMXFECBufDesc</name></type> <name pos:start="17:23" pos:end="17:24">bd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:16"><decl pos:start="19:9" pos:end="19:15"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:15">len</name></decl>;</decl_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:35"><expr pos:start="23:9" pos:end="23:34"><call pos:start="23:9" pos:end="23:34"><name pos:start="23:9" pos:end="23:23">imx_fec_read_bd</name><argument_list pos:start="23:24" pos:end="23:34">(<argument pos:start="23:25" pos:end="23:27"><expr pos:start="23:25" pos:end="23:27"><operator pos:start="23:25" pos:end="23:25">&amp;</operator><name pos:start="23:26" pos:end="23:27">bd</name></expr></argument>, <argument pos:start="23:30" pos:end="23:33"><expr pos:start="23:30" pos:end="23:33"><name pos:start="23:30" pos:end="23:33">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="27:55"><expr pos:start="25:9" pos:end="27:54"><call pos:start="25:9" pos:end="27:54"><name pos:start="25:9" pos:end="25:18">FEC_PRINTF</name><argument_list pos:start="25:19" pos:end="27:54">(<argument pos:start="25:20" pos:end="25:59"><expr pos:start="25:20" pos:end="25:59"><literal type="string" pos:start="25:20" pos:end="25:59">"tx_bd %x flags %04x len %d data %08x\n"</literal></expr></argument>,

                   <argument pos:start="27:20" pos:end="27:23"><expr pos:start="27:20" pos:end="27:23"><name pos:start="27:20" pos:end="27:23">addr</name></expr></argument>, <argument pos:start="27:26" pos:end="27:33"><expr pos:start="27:26" pos:end="27:33"><name pos:start="27:26" pos:end="27:33"><name pos:start="27:26" pos:end="27:27">bd</name><operator pos:start="27:28" pos:end="27:28">.</operator><name pos:start="27:29" pos:end="27:33">flags</name></name></expr></argument>, <argument pos:start="27:36" pos:end="27:44"><expr pos:start="27:36" pos:end="27:44"><name pos:start="27:36" pos:end="27:44"><name pos:start="27:36" pos:end="27:37">bd</name><operator pos:start="27:38" pos:end="27:38">.</operator><name pos:start="27:39" pos:end="27:44">length</name></name></expr></argument>, <argument pos:start="27:47" pos:end="27:53"><expr pos:start="27:47" pos:end="27:53"><name pos:start="27:47" pos:end="27:53"><name pos:start="27:47" pos:end="27:48">bd</name><operator pos:start="27:49" pos:end="27:49">.</operator><name pos:start="27:50" pos:end="27:53">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="37:9"><if pos:start="29:9" pos:end="37:9">if <condition pos:start="29:12" pos:end="29:40">(<expr pos:start="29:13" pos:end="29:39"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:21"><name pos:start="29:14" pos:end="29:15">bd</name><operator pos:start="29:16" pos:end="29:16">.</operator><name pos:start="29:17" pos:end="29:21">flags</name></name> <operator pos:start="29:23" pos:end="29:23">&amp;</operator> <name pos:start="29:25" pos:end="29:33">ENET_BD_R</name><operator pos:start="29:34" pos:end="29:34">)</operator> <operator pos:start="29:36" pos:end="29:37">==</operator> <literal type="number" pos:start="29:39" pos:end="29:39">0</literal></expr>)</condition> <block pos:start="29:42" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:18">

            <comment type="block" pos:start="31:13" pos:end="31:54">/* Run out of descriptors to transmit.  */</comment>

            <expr_stmt pos:start="33:13" pos:end="33:69"><expr pos:start="33:13" pos:end="33:68"><call pos:start="33:13" pos:end="33:68"><name pos:start="33:13" pos:end="33:22">FEC_PRINTF</name><argument_list pos:start="33:23" pos:end="33:68">(<argument pos:start="33:24" pos:end="33:67"><expr pos:start="33:24" pos:end="33:67"><literal type="string" pos:start="33:24" pos:end="33:67">"tx_bd ran out of descriptors to transmit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:24"><expr pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:11">len</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:23"><name pos:start="39:15" pos:end="39:16">bd</name><operator pos:start="39:17" pos:end="39:17">.</operator><name pos:start="39:18" pos:end="39:23">length</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:51">(<expr pos:start="41:13" pos:end="41:50"><name pos:start="41:13" pos:end="41:22">frame_size</name> <operator pos:start="41:24" pos:end="41:24">+</operator> <name pos:start="41:26" pos:end="41:28">len</name> <operator pos:start="41:30" pos:end="41:30">&gt;</operator> <name pos:start="41:32" pos:end="41:50">ENET_MAX_FRAME_SIZE</name></expr>)</condition> <block pos:start="41:53" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:47">

            <expr_stmt pos:start="43:13" pos:end="43:51"><expr pos:start="43:13" pos:end="43:50"><name pos:start="43:13" pos:end="43:15">len</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:37">ENET_MAX_FRAME_SIZE</name> <operator pos:start="43:39" pos:end="43:39">-</operator> <name pos:start="43:41" pos:end="43:50">frame_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:47"><expr pos:start="45:13" pos:end="45:46"><name pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:19">regs</name><index pos:start="45:20" pos:end="45:29">[<expr pos:start="45:21" pos:end="45:28"><name pos:start="45:21" pos:end="45:28">ENET_EIR</name></expr>]</index></name> <operator pos:start="45:31" pos:end="45:32">|=</operator> <name pos:start="45:34" pos:end="45:46">ENET_INT_BABT</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:66"><expr pos:start="49:9" pos:end="49:65"><call pos:start="49:9" pos:end="49:65"><name pos:start="49:9" pos:end="49:23">dma_memory_read</name><argument_list pos:start="49:24" pos:end="49:65">(<argument pos:start="49:25" pos:end="49:45"><expr pos:start="49:25" pos:end="49:45"><operator pos:start="49:25" pos:end="49:25">&amp;</operator><name pos:start="49:26" pos:end="49:45">address_space_memory</name></expr></argument>, <argument pos:start="49:48" pos:end="49:54"><expr pos:start="49:48" pos:end="49:54"><name pos:start="49:48" pos:end="49:54"><name pos:start="49:48" pos:end="49:49">bd</name><operator pos:start="49:50" pos:end="49:50">.</operator><name pos:start="49:51" pos:end="49:54">data</name></name></expr></argument>, <argument pos:start="49:57" pos:end="49:59"><expr pos:start="49:57" pos:end="49:59"><name pos:start="49:57" pos:end="49:59">ptr</name></expr></argument>, <argument pos:start="49:62" pos:end="49:64"><expr pos:start="49:62" pos:end="49:64"><name pos:start="49:62" pos:end="49:64">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:19"><expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:11">ptr</name> <operator pos:start="51:13" pos:end="51:14">+=</operator> <name pos:start="51:16" pos:end="51:18">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:26"><expr pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:18">frame_size</name> <operator pos:start="53:20" pos:end="53:21">+=</operator> <name pos:start="53:23" pos:end="53:25">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="67:9"><if pos:start="55:9" pos:end="67:9">if <condition pos:start="55:12" pos:end="55:33">(<expr pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:14">bd</name><operator pos:start="55:15" pos:end="55:15">.</operator><name pos:start="55:16" pos:end="55:20">flags</name></name> <operator pos:start="55:22" pos:end="55:22">&amp;</operator> <name pos:start="55:24" pos:end="55:32">ENET_BD_L</name></expr>)</condition> <block pos:start="55:35" pos:end="67:9">{<block_content pos:start="59:13" pos:end="65:46">

            <comment type="block" pos:start="57:13" pos:end="57:40">/* Last buffer in frame.  */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:72"><expr pos:start="59:13" pos:end="59:71"><call pos:start="59:13" pos:end="59:71"><name pos:start="59:13" pos:end="59:28">qemu_send_packet</name><argument_list pos:start="59:29" pos:end="59:71">(<argument pos:start="59:30" pos:end="59:51"><expr pos:start="59:30" pos:end="59:51"><call pos:start="59:30" pos:end="59:51"><name pos:start="59:30" pos:end="59:43">qemu_get_queue</name><argument_list pos:start="59:44" pos:end="59:51">(<argument pos:start="59:45" pos:end="59:50"><expr pos:start="59:45" pos:end="59:50"><name pos:start="59:45" pos:end="59:50"><name pos:start="59:45" pos:end="59:45">s</name><operator pos:start="59:46" pos:end="59:47">-&gt;</operator><name pos:start="59:48" pos:end="59:50">nic</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="59:54" pos:end="59:58"><expr pos:start="59:54" pos:end="59:58"><name pos:start="59:54" pos:end="59:58">frame</name></expr></argument>, <argument pos:start="59:61" pos:end="59:70"><expr pos:start="59:61" pos:end="59:70"><name pos:start="59:61" pos:end="59:70">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:24"><expr pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:15">ptr</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:23">frame</name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:27"><expr pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:22">frame_size</name> <operator pos:start="63:24" pos:end="63:24">=</operator> <literal type="number" pos:start="63:26" pos:end="63:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:46"><expr pos:start="65:13" pos:end="65:45"><name pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:19">regs</name><index pos:start="65:20" pos:end="65:29">[<expr pos:start="65:21" pos:end="65:28"><name pos:start="65:21" pos:end="65:28">ENET_EIR</name></expr>]</index></name> <operator pos:start="65:31" pos:end="65:32">|=</operator> <name pos:start="65:34" pos:end="65:45">ENET_INT_TXF</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:42"><expr pos:start="69:9" pos:end="69:41"><name pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:15">regs</name><index pos:start="69:16" pos:end="69:25">[<expr pos:start="69:17" pos:end="69:24"><name pos:start="69:17" pos:end="69:24">ENET_EIR</name></expr>]</index></name> <operator pos:start="69:27" pos:end="69:28">|=</operator> <name pos:start="69:30" pos:end="69:41">ENET_INT_TXB</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:31"><expr pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:10">bd</name><operator pos:start="71:11" pos:end="71:11">.</operator><name pos:start="71:12" pos:end="71:16">flags</name></name> <operator pos:start="71:18" pos:end="71:19">&amp;=</operator> <operator pos:start="71:21" pos:end="71:21">~</operator><name pos:start="71:22" pos:end="71:30">ENET_BD_R</name></expr>;</expr_stmt>

        <comment type="block" pos:start="73:9" pos:end="73:50">/* Write back the modified descriptor.  */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:36"><expr pos:start="75:9" pos:end="75:35"><call pos:start="75:9" pos:end="75:35"><name pos:start="75:9" pos:end="75:24">imx_fec_write_bd</name><argument_list pos:start="75:25" pos:end="75:35">(<argument pos:start="75:26" pos:end="75:28"><expr pos:start="75:26" pos:end="75:28"><operator pos:start="75:26" pos:end="75:26">&amp;</operator><name pos:start="75:27" pos:end="75:28">bd</name></expr></argument>, <argument pos:start="75:31" pos:end="75:34"><expr pos:start="75:31" pos:end="75:34"><name pos:start="75:31" pos:end="75:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="77:9" pos:end="77:46">/* Advance to the next descriptor.  */</comment>

        <if_stmt pos:start="79:9" pos:end="87:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:40">(<expr pos:start="79:13" pos:end="79:39"><operator pos:start="79:13" pos:end="79:13">(</operator><name pos:start="79:14" pos:end="79:21"><name pos:start="79:14" pos:end="79:15">bd</name><operator pos:start="79:16" pos:end="79:16">.</operator><name pos:start="79:17" pos:end="79:21">flags</name></name> <operator pos:start="79:23" pos:end="79:23">&amp;</operator> <name pos:start="79:25" pos:end="79:33">ENET_BD_W</name><operator pos:start="79:34" pos:end="79:34">)</operator> <operator pos:start="79:36" pos:end="79:37">!=</operator> <literal type="number" pos:start="79:39" pos:end="79:39">0</literal></expr>)</condition> <block pos:start="79:42" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:38">

            <expr_stmt pos:start="81:13" pos:end="81:38"><expr pos:start="81:13" pos:end="81:37"><name pos:start="81:13" pos:end="81:16">addr</name> <operator pos:start="81:18" pos:end="81:18">=</operator> <name pos:start="81:20" pos:end="81:37"><name pos:start="81:20" pos:end="81:20">s</name><operator pos:start="81:21" pos:end="81:22">-&gt;</operator><name pos:start="81:23" pos:end="81:26">regs</name><index pos:start="81:27" pos:end="81:37">[<expr pos:start="81:28" pos:end="81:36"><name pos:start="81:28" pos:end="81:36">ENET_TDSR</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="87:9">else <block pos:start="83:16" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:31">

            <expr_stmt pos:start="85:13" pos:end="85:31"><expr pos:start="85:13" pos:end="85:30"><name pos:start="85:13" pos:end="85:16">addr</name> <operator pos:start="85:18" pos:end="85:19">+=</operator> <sizeof pos:start="85:21" pos:end="85:30">sizeof<argument_list pos:start="85:27" pos:end="85:30">(<argument pos:start="85:28" pos:end="85:29"><expr pos:start="85:28" pos:end="85:29"><name pos:start="85:28" pos:end="85:29">bd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="93:5" pos:end="93:28"><expr pos:start="93:5" pos:end="93:27"><name pos:start="93:5" pos:end="93:20"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:20">tx_descriptor</name></name> <operator pos:start="93:22" pos:end="93:22">=</operator> <name pos:start="93:24" pos:end="93:27">addr</name></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:22"><expr pos:start="97:5" pos:end="97:21"><call pos:start="97:5" pos:end="97:21"><name pos:start="97:5" pos:end="97:18">imx_eth_update</name><argument_list pos:start="97:19" pos:end="97:21">(<argument pos:start="97:20" pos:end="97:20"><expr pos:start="97:20" pos:end="97:20"><name pos:start="97:20" pos:end="97:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
