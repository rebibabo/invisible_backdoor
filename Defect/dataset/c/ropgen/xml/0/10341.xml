<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10341.c" pos:tabs="8"><function pos:start="1:1" pos:end="423:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">get_segment</name> <parameter_list pos:start="1:24" pos:end="3:61">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:32">CPUState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">env</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:53"><decl pos:start="1:40" pos:end="1:53"><type pos:start="1:40" pos:end="1:53"><name pos:start="1:40" pos:end="1:48">mmu_ctx_t</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">ctx</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:42"><decl pos:start="3:25" pos:end="3:42"><type pos:start="3:25" pos:end="3:42"><name pos:start="3:25" pos:end="3:36">target_ulong</name></type> <name pos:start="3:38" pos:end="3:42">eaddr</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:50"><decl pos:start="3:45" pos:end="3:50"><type pos:start="3:45" pos:end="3:50"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:50">rw</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:60"><decl pos:start="3:53" pos:end="3:60"><type pos:start="3:53" pos:end="3:60"><name pos:start="3:53" pos:end="3:55">int</name></type> <name pos:start="3:57" pos:end="3:60">type</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="423:1">{<block_content pos:start="7:5" pos:end="421:15">

    <decl_stmt pos:start="7:5" pos:end="7:60"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22">target_phys_addr_t</name></type> <name pos:start="7:24" pos:end="7:26">sdr</name></decl>, <decl pos:start="7:29" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:29" pos:end="7:32">hash</name></decl>, <decl pos:start="7:35" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:35" pos:end="7:38">mask</name></decl>, <decl pos:start="7:41" pos:end="7:48"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:41" pos:end="7:48">sdr_mask</name></decl>, <decl pos:start="7:51" pos:end="7:59"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:51" pos:end="7:59">htab_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:19">sr</name></decl>, <decl pos:start="9:22" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:22" pos:end="9:25">vsid</name></decl>, <decl pos:start="9:28" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:28" pos:end="9:36">vsid_mask</name></decl>, <decl pos:start="9:39" pos:end="9:43"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:39" pos:end="9:43">pgidx</name></decl>, <decl pos:start="9:46" pos:end="9:54"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:46" pos:end="9:54">page_mask</name></decl>;</decl_stmt>

<cpp:if pos:start="11:1" pos:end="11:25">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:25"><call pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:25">(<argument pos:start="11:13" pos:end="11:24"><expr pos:start="11:13" pos:end="11:24"><name pos:start="11:13" pos:end="11:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="13:5" pos:end="16:0"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">attr</name></decl>;</decl_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:10"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">ds</name></decl>, <decl pos:start="17:13" pos:end="17:14"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:13" pos:end="17:14">nx</name></decl>, <decl pos:start="17:17" pos:end="17:23"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:17" pos:end="17:23">vsid_sh</name></decl>, <decl pos:start="17:26" pos:end="17:31"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:26" pos:end="17:31">sdr_sh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="24:0"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>, <decl pos:start="19:14" pos:end="19:17"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:14" pos:end="19:17">ret2</name></decl>;</decl_stmt>



<cpp:if pos:start="23:1" pos:end="23:25">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:25"><call pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:11">defined</name><argument_list pos:start="23:12" pos:end="23:25">(<argument pos:start="23:13" pos:end="23:24"><expr pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="25:5" pos:end="108:0"><if pos:start="25:5" pos:end="59:5">if <condition pos:start="25:8" pos:end="25:42">(<expr pos:start="25:9" pos:end="25:41"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:11">env</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:22">mmu_model</name></name> <operator pos:start="25:24" pos:end="25:25">==</operator> <name pos:start="25:27" pos:end="25:41">POWERPC_MMU_64B</name></expr>)</condition> <block pos:start="25:44" pos:end="59:5">{<block_content pos:start="29:9" pos:end="57:27">

<cpp:if pos:start="27:1" pos:end="27:23">#<cpp:directive pos:start="27:2" pos:end="27:3">if</cpp:directive> <expr pos:start="27:5" pos:end="27:23"><call pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:11">defined</name> <argument_list pos:start="27:13" pos:end="27:23">(<argument pos:start="27:14" pos:end="27:22"><expr pos:start="27:14" pos:end="27:22"><name pos:start="27:14" pos:end="27:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="29:9" pos:end="36:0"><if pos:start="29:9" pos:end="36:0">if <condition pos:start="29:12" pos:end="29:26">(<expr pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:20">loglevel</name> <operator pos:start="29:22" pos:end="29:23">!=</operator> <literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>)</condition> <block pos:start="29:28" pos:end="36:0">{<block_content pos:start="31:13" pos:end="31:45">

            <expr_stmt pos:start="31:13" pos:end="31:45"><expr pos:start="31:13" pos:end="31:44"><call pos:start="31:13" pos:end="31:44"><name pos:start="31:13" pos:end="31:19">fprintf</name><argument_list pos:start="31:20" pos:end="31:44">(<argument pos:start="31:21" pos:end="31:27"><expr pos:start="31:21" pos:end="31:27"><name pos:start="31:21" pos:end="31:27">logfile</name></expr></argument>, <argument pos:start="31:30" pos:end="31:43"><expr pos:start="31:30" pos:end="31:43"><literal type="string" pos:start="31:30" pos:end="31:43">"Check SLBs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="37:9" pos:end="37:63"><expr pos:start="37:9" pos:end="37:62"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:62"><name pos:start="37:15" pos:end="37:24">slb_lookup</name><argument_list pos:start="37:25" pos:end="37:62">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><name pos:start="37:26" pos:end="37:28">env</name></expr></argument>, <argument pos:start="37:31" pos:end="37:35"><expr pos:start="37:31" pos:end="37:35"><name pos:start="37:31" pos:end="37:35">eaddr</name></expr></argument>, <argument pos:start="37:38" pos:end="37:42"><expr pos:start="37:38" pos:end="37:42"><operator pos:start="37:38" pos:end="37:38">&amp;</operator><name pos:start="37:39" pos:end="37:42">vsid</name></expr></argument>, <argument pos:start="37:45" pos:end="37:54"><expr pos:start="37:45" pos:end="37:54"><operator pos:start="37:45" pos:end="37:45">&amp;</operator><name pos:start="37:46" pos:end="37:54">page_mask</name></expr></argument>, <argument pos:start="37:57" pos:end="37:61"><expr pos:start="37:57" pos:end="37:61"><operator pos:start="37:57" pos:end="37:57">&amp;</operator><name pos:start="37:58" pos:end="37:61">attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="41:23"><if pos:start="39:9" pos:end="41:23">if <condition pos:start="39:12" pos:end="39:20">(<expr pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">&lt;</operator> <literal type="number" pos:start="39:19" pos:end="39:19">0</literal></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:23"><block_content pos:start="41:13" pos:end="41:23">

            <return pos:start="41:13" pos:end="41:23">return <expr pos:start="41:20" pos:end="41:22"><name pos:start="41:20" pos:end="41:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="45:51"><expr pos:start="43:9" pos:end="45:50"><name pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:11">ctx</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:16">key</name></name> <operator pos:start="43:18" pos:end="43:18">=</operator> <ternary pos:start="43:20" pos:end="45:50"><condition pos:start="43:20" pos:end="45:44"><expr pos:start="43:20" pos:end="45:42"><operator pos:start="43:20" pos:end="43:20">(</operator><operator pos:start="43:21" pos:end="43:21">(</operator><name pos:start="43:22" pos:end="43:25">attr</name> <operator pos:start="43:27" pos:end="43:27">&amp;</operator> <literal type="number" pos:start="43:29" pos:end="43:32">0x40</literal><operator pos:start="43:33" pos:end="43:33">)</operator> <operator pos:start="43:35" pos:end="43:36">&amp;&amp;</operator> <name pos:start="43:38" pos:end="43:43">msr_pr</name> <operator pos:start="43:45" pos:end="43:46">==</operator> <literal type="number" pos:start="43:48" pos:end="43:48">1</literal><operator pos:start="43:49" pos:end="43:49">)</operator> <operator pos:start="43:51" pos:end="43:52">||</operator>

            <operator pos:start="45:13" pos:end="45:13">(</operator><operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:18">attr</name> <operator pos:start="45:20" pos:end="45:20">&amp;</operator> <literal type="number" pos:start="45:22" pos:end="45:25">0x80</literal><operator pos:start="45:26" pos:end="45:26">)</operator> <operator pos:start="45:28" pos:end="45:29">&amp;&amp;</operator> <name pos:start="45:31" pos:end="45:36">msr_pr</name> <operator pos:start="45:38" pos:end="45:39">==</operator> <literal type="number" pos:start="45:41" pos:end="45:41">0</literal><operator pos:start="45:42" pos:end="45:42">)</operator></expr> ?</condition><then pos:start="45:46" pos:end="45:46"> <expr pos:start="45:46" pos:end="45:46"><literal type="number" pos:start="45:46" pos:end="45:46">1</literal></expr> </then><else pos:start="45:48" pos:end="45:50">: <expr pos:start="45:50" pos:end="45:50"><literal type="number" pos:start="45:50" pos:end="45:50">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:15"><expr pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:10">ds</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:10">nx</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <ternary pos:start="49:14" pos:end="49:32"><condition pos:start="49:14" pos:end="49:26"><expr pos:start="49:14" pos:end="49:24"><name pos:start="49:14" pos:end="49:17">attr</name> <operator pos:start="49:19" pos:end="49:19">&amp;</operator> <literal type="number" pos:start="49:21" pos:end="49:24">0x20</literal></expr> ?</condition><then pos:start="49:28" pos:end="49:28"> <expr pos:start="49:28" pos:end="49:28"><literal type="number" pos:start="49:28" pos:end="49:28">1</literal></expr> </then><else pos:start="49:30" pos:end="49:32">: <expr pos:start="49:32" pos:end="49:32"><literal type="number" pos:start="49:32" pos:end="49:32">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:42"><expr pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:17">vsid_mask</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <literal type="number" pos:start="51:21" pos:end="51:41">0x00003FFFFFFFFF80ULL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:20"><expr pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:15">vsid_sh</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <literal type="number" pos:start="53:19" pos:end="53:19">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:20"><expr pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:14">sdr_sh</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:19">18</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:27"><expr pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:16">sdr_mask</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <literal type="number" pos:start="57:20" pos:end="57:26">0x3FF80</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="59:7" pos:end="108:0">else

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="61:8" pos:end="61:34">/* defined(TARGET_PPC64) */</comment>

    <block pos:start="63:5" pos:end="108:0">{<block_content pos:start="65:9" pos:end="104:0">

        <expr_stmt pos:start="65:9" pos:end="65:34"><expr pos:start="65:9" pos:end="65:33"><name pos:start="65:9" pos:end="65:10">sr</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <name pos:start="65:14" pos:end="65:33"><name pos:start="65:14" pos:end="65:16">env</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:20">sr</name><index pos:start="65:21" pos:end="65:33">[<expr pos:start="65:22" pos:end="65:32"><name pos:start="65:22" pos:end="65:26">eaddr</name> <operator pos:start="65:28" pos:end="65:29">&gt;&gt;</operator> <literal type="number" pos:start="65:31" pos:end="65:32">28</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:31"><expr pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:17">page_mask</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <literal type="number" pos:start="67:21" pos:end="67:30">0x0FFFFFFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="71:64"><expr pos:start="69:9" pos:end="71:63"><name pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:11">ctx</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:16">key</name></name> <operator pos:start="69:18" pos:end="69:18">=</operator> <ternary pos:start="69:20" pos:end="71:63"><condition pos:start="69:20" pos:end="71:57"><expr pos:start="69:20" pos:end="71:55"><operator pos:start="69:20" pos:end="69:20">(</operator><operator pos:start="69:21" pos:end="69:21">(</operator><operator pos:start="69:22" pos:end="69:22">(</operator><name pos:start="69:23" pos:end="69:24">sr</name> <operator pos:start="69:26" pos:end="69:26">&amp;</operator> <literal type="number" pos:start="69:28" pos:end="69:37">0x20000000</literal><operator pos:start="69:38" pos:end="69:38">)</operator> <operator pos:start="69:40" pos:end="69:41">&amp;&amp;</operator> <name pos:start="69:43" pos:end="69:48">msr_pr</name> <operator pos:start="69:50" pos:end="69:51">==</operator> <literal type="number" pos:start="69:53" pos:end="69:53">1</literal><operator pos:start="69:54" pos:end="69:54">)</operator> <operator pos:start="69:56" pos:end="69:57">||</operator>

                    <operator pos:start="71:21" pos:end="71:21">(</operator><operator pos:start="71:22" pos:end="71:22">(</operator><name pos:start="71:23" pos:end="71:24">sr</name> <operator pos:start="71:26" pos:end="71:26">&amp;</operator> <literal type="number" pos:start="71:28" pos:end="71:37">0x40000000</literal><operator pos:start="71:38" pos:end="71:38">)</operator> <operator pos:start="71:40" pos:end="71:41">&amp;&amp;</operator> <name pos:start="71:43" pos:end="71:48">msr_pr</name> <operator pos:start="71:50" pos:end="71:51">==</operator> <literal type="number" pos:start="71:53" pos:end="71:53">0</literal><operator pos:start="71:54" pos:end="71:54">)</operator><operator pos:start="71:55" pos:end="71:55">)</operator></expr> ?</condition><then pos:start="71:59" pos:end="71:59"> <expr pos:start="71:59" pos:end="71:59"><literal type="number" pos:start="71:59" pos:end="71:59">1</literal></expr> </then><else pos:start="71:61" pos:end="71:63">: <expr pos:start="71:63" pos:end="71:63"><literal type="number" pos:start="71:63" pos:end="71:63">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:37"><expr pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:10">ds</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <ternary pos:start="73:14" pos:end="73:36"><condition pos:start="73:14" pos:end="73:30"><expr pos:start="73:14" pos:end="73:28"><name pos:start="73:14" pos:end="73:15">sr</name> <operator pos:start="73:17" pos:end="73:17">&amp;</operator> <literal type="number" pos:start="73:19" pos:end="73:28">0x80000000</literal></expr> ?</condition><then pos:start="73:32" pos:end="73:32"> <expr pos:start="73:32" pos:end="73:32"><literal type="number" pos:start="73:32" pos:end="73:32">1</literal></expr> </then><else pos:start="73:34" pos:end="73:36">: <expr pos:start="73:36" pos:end="73:36"><literal type="number" pos:start="73:36" pos:end="73:36">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:37"><expr pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:10">nx</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <ternary pos:start="75:14" pos:end="75:36"><condition pos:start="75:14" pos:end="75:30"><expr pos:start="75:14" pos:end="75:28"><name pos:start="75:14" pos:end="75:15">sr</name> <operator pos:start="75:17" pos:end="75:17">&amp;</operator> <literal type="number" pos:start="75:19" pos:end="75:28">0x10000000</literal></expr> ?</condition><then pos:start="75:32" pos:end="75:32"> <expr pos:start="75:32" pos:end="75:32"><literal type="number" pos:start="75:32" pos:end="75:32">1</literal></expr> </then><else pos:start="75:34" pos:end="75:36">: <expr pos:start="75:36" pos:end="75:36"><literal type="number" pos:start="75:36" pos:end="75:36">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:31"><expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:12">vsid</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <name pos:start="77:16" pos:end="77:17">sr</name> <operator pos:start="77:19" pos:end="77:19">&amp;</operator> <literal type="number" pos:start="77:21" pos:end="77:30">0x00FFFFFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:17">vsid_mask</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <literal type="number" pos:start="79:21" pos:end="79:30">0x01FFFFC0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:20"><expr pos:start="81:9" pos:end="81:19"><name pos:start="81:9" pos:end="81:15">vsid_sh</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <literal type="number" pos:start="81:19" pos:end="81:19">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:20"><expr pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:14">sdr_sh</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <literal type="number" pos:start="83:18" pos:end="83:19">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="88:0"><expr pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:16">sdr_mask</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <literal type="number" pos:start="85:20" pos:end="85:25">0xFFC0</literal></expr>;</expr_stmt>

<cpp:if pos:start="87:1" pos:end="87:23">#<cpp:directive pos:start="87:2" pos:end="87:3">if</cpp:directive> <expr pos:start="87:5" pos:end="87:23"><call pos:start="87:5" pos:end="87:23"><name pos:start="87:5" pos:end="87:11">defined</name> <argument_list pos:start="87:13" pos:end="87:23">(<argument pos:start="87:14" pos:end="87:22"><expr pos:start="87:14" pos:end="87:22"><name pos:start="87:14" pos:end="87:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="89:9" pos:end="104:0"><if pos:start="89:9" pos:end="104:0">if <condition pos:start="89:12" pos:end="89:26">(<expr pos:start="89:13" pos:end="89:25"><name pos:start="89:13" pos:end="89:20">loglevel</name> <operator pos:start="89:22" pos:end="89:23">!=</operator> <literal type="number" pos:start="89:25" pos:end="89:25">0</literal></expr>)</condition> <block pos:start="89:28" pos:end="104:0">{<block_content pos:start="91:13" pos:end="99:63">

            <expr_stmt pos:start="91:13" pos:end="99:63"><expr pos:start="91:13" pos:end="99:62"><call pos:start="91:13" pos:end="99:62"><name pos:start="91:13" pos:end="91:19">fprintf</name><argument_list pos:start="91:20" pos:end="99:62">(<argument pos:start="91:21" pos:end="91:27"><expr pos:start="91:21" pos:end="91:27"><name pos:start="91:21" pos:end="91:27">logfile</name></expr></argument>, <argument pos:start="91:30" pos:end="95:50"><expr pos:start="91:30" pos:end="95:50"><literal type="string" pos:start="91:30" pos:end="91:49">"Check segment v=0x"</literal> <name pos:start="91:51" pos:end="91:55">ADDRX</name> <literal type="string" pos:start="91:57" pos:end="91:64">" %d 0x"</literal> <name pos:start="91:66" pos:end="91:70">ADDRX</name>

                    <literal type="string" pos:start="93:21" pos:end="93:29">" nip=0x"</literal> <name pos:start="93:31" pos:end="93:35">ADDRX</name> <literal type="string" pos:start="93:37" pos:end="93:44">" lr=0x"</literal> <name pos:start="93:46" pos:end="93:50">ADDRX</name>

                    <literal type="string" pos:start="95:21" pos:end="95:50">" ir=%d dr=%d pr=%d %d t=%d\n"</literal></expr></argument>,

                    <argument pos:start="97:21" pos:end="97:25"><expr pos:start="97:21" pos:end="97:25"><name pos:start="97:21" pos:end="97:25">eaddr</name></expr></argument>, <argument pos:start="97:28" pos:end="97:45"><expr pos:start="97:28" pos:end="97:45"><operator pos:start="97:28" pos:end="97:28">(</operator><name pos:start="97:29" pos:end="97:31">int</name><operator pos:start="97:32" pos:end="97:32">)</operator><operator pos:start="97:33" pos:end="97:33">(</operator><name pos:start="97:34" pos:end="97:38">eaddr</name> <operator pos:start="97:40" pos:end="97:41">&gt;&gt;</operator> <literal type="number" pos:start="97:43" pos:end="97:44">28</literal><operator pos:start="97:45" pos:end="97:45">)</operator></expr></argument>, <argument pos:start="97:48" pos:end="97:49"><expr pos:start="97:48" pos:end="97:49"><name pos:start="97:48" pos:end="97:49">sr</name></expr></argument>, <argument pos:start="97:52" pos:end="97:59"><expr pos:start="97:52" pos:end="97:59"><name pos:start="97:52" pos:end="97:59"><name pos:start="97:52" pos:end="97:54">env</name><operator pos:start="97:55" pos:end="97:56">-&gt;</operator><name pos:start="97:57" pos:end="97:59">nip</name></name></expr></argument>,

                    <argument pos:start="99:21" pos:end="99:27"><expr pos:start="99:21" pos:end="99:27"><name pos:start="99:21" pos:end="99:27"><name pos:start="99:21" pos:end="99:23">env</name><operator pos:start="99:24" pos:end="99:25">-&gt;</operator><name pos:start="99:26" pos:end="99:27">lr</name></name></expr></argument>, <argument pos:start="99:30" pos:end="99:35"><expr pos:start="99:30" pos:end="99:35"><name pos:start="99:30" pos:end="99:35">msr_ir</name></expr></argument>, <argument pos:start="99:38" pos:end="99:43"><expr pos:start="99:38" pos:end="99:43"><name pos:start="99:38" pos:end="99:43">msr_dr</name></expr></argument>, <argument pos:start="99:46" pos:end="99:51"><expr pos:start="99:46" pos:end="99:51"><name pos:start="99:46" pos:end="99:51">msr_pr</name></expr></argument>, <argument pos:start="99:54" pos:end="99:55"><expr pos:start="99:54" pos:end="99:55"><name pos:start="99:54" pos:end="99:55">rw</name></expr></argument>, <argument pos:start="99:58" pos:end="99:61"><expr pos:start="99:58" pos:end="99:61"><name pos:start="99:58" pos:end="99:61">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>

<cpp:if pos:start="107:1" pos:end="107:23">#<cpp:directive pos:start="107:2" pos:end="107:3">if</cpp:directive> <expr pos:start="107:5" pos:end="107:23"><call pos:start="107:5" pos:end="107:23"><name pos:start="107:5" pos:end="107:11">defined</name> <argument_list pos:start="107:13" pos:end="107:23">(<argument pos:start="107:14" pos:end="107:22"><expr pos:start="107:14" pos:end="107:22"><name pos:start="107:14" pos:end="107:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="109:5" pos:end="118:0"><if pos:start="109:5" pos:end="118:0">if <condition pos:start="109:8" pos:end="109:22">(<expr pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:16">loglevel</name> <operator pos:start="109:18" pos:end="109:19">!=</operator> <literal type="number" pos:start="109:21" pos:end="109:21">0</literal></expr>)</condition> <block pos:start="109:24" pos:end="118:0">{<block_content pos:start="111:9" pos:end="113:40">

        <expr_stmt pos:start="111:9" pos:end="113:40"><expr pos:start="111:9" pos:end="113:39"><call pos:start="111:9" pos:end="113:39"><name pos:start="111:9" pos:end="111:15">fprintf</name><argument_list pos:start="111:16" pos:end="113:39">(<argument pos:start="111:17" pos:end="111:23"><expr pos:start="111:17" pos:end="111:23"><name pos:start="111:17" pos:end="111:23">logfile</name></expr></argument>, <argument pos:start="111:26" pos:end="111:75"><expr pos:start="111:26" pos:end="111:75"><literal type="string" pos:start="111:26" pos:end="111:64">"pte segment: key=%d ds %d nx %d vsid "</literal> <name pos:start="111:66" pos:end="111:70">ADDRX</name> <literal type="string" pos:start="111:72" pos:end="111:75">"\n"</literal></expr></argument>,

                <argument pos:start="113:17" pos:end="113:24"><expr pos:start="113:17" pos:end="113:24"><name pos:start="113:17" pos:end="113:24"><name pos:start="113:17" pos:end="113:19">ctx</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:24">key</name></name></expr></argument>, <argument pos:start="113:27" pos:end="113:28"><expr pos:start="113:27" pos:end="113:28"><name pos:start="113:27" pos:end="113:28">ds</name></expr></argument>, <argument pos:start="113:31" pos:end="113:32"><expr pos:start="113:31" pos:end="113:32"><name pos:start="113:31" pos:end="113:32">nx</name></expr></argument>, <argument pos:start="113:35" pos:end="113:38"><expr pos:start="113:35" pos:end="113:38"><name pos:start="113:35" pos:end="113:38">vsid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="119:5" pos:end="119:13"><expr pos:start="119:5" pos:end="119:12"><name pos:start="119:5" pos:end="119:7">ret</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <operator pos:start="119:11" pos:end="119:11">-</operator><literal type="number" pos:start="119:12" pos:end="119:12">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="417:5"><if pos:start="121:5" pos:end="333:5">if <condition pos:start="121:8" pos:end="121:12">(<expr pos:start="121:9" pos:end="121:11"><operator pos:start="121:9" pos:end="121:9">!</operator><name pos:start="121:10" pos:end="121:11">ds</name></expr>)</condition> <block pos:start="121:14" pos:end="333:5">{<block_content pos:start="125:9" pos:end="331:9">

        <comment type="block" pos:start="123:9" pos:end="123:62">/* Check if instruction fetch is allowed, if needed */</comment>

        <if_stmt pos:start="125:9" pos:end="331:9"><if pos:start="125:9" pos:end="319:9">if <condition pos:start="125:12" pos:end="125:43">(<expr pos:start="125:13" pos:end="125:42"><name pos:start="125:13" pos:end="125:16">type</name> <operator pos:start="125:18" pos:end="125:19">!=</operator> <name pos:start="125:21" pos:end="125:31">ACCESS_CODE</name> <operator pos:start="125:33" pos:end="125:34">||</operator> <name pos:start="125:36" pos:end="125:37">nx</name> <operator pos:start="125:39" pos:end="125:40">==</operator> <literal type="number" pos:start="125:42" pos:end="125:42">0</literal></expr>)</condition> <block pos:start="125:45" pos:end="319:9">{<block_content pos:start="131:13" pos:end="318:0">

            <comment type="block" pos:start="127:13" pos:end="127:42">/* Page address translation */</comment>

            <comment type="block" pos:start="129:13" pos:end="129:39">/* Primary table address */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:28"><expr pos:start="131:13" pos:end="131:27"><name pos:start="131:13" pos:end="131:15">sdr</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <name pos:start="131:19" pos:end="131:27"><name pos:start="131:19" pos:end="131:21">env</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:27">sdr1</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="136:0"><expr pos:start="133:13" pos:end="133:59"><name pos:start="133:13" pos:end="133:17">pgidx</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <operator pos:start="133:21" pos:end="133:21">(</operator><name pos:start="133:22" pos:end="133:26">eaddr</name> <operator pos:start="133:28" pos:end="133:28">&amp;</operator> <name pos:start="133:30" pos:end="133:38">page_mask</name><operator pos:start="133:39" pos:end="133:39">)</operator> <operator pos:start="133:41" pos:end="133:42">&gt;&gt;</operator> <name pos:start="133:44" pos:end="133:59">TARGET_PAGE_BITS</name></expr>;</expr_stmt>

<cpp:if pos:start="135:1" pos:end="135:25">#<cpp:directive pos:start="135:2" pos:end="135:3">if</cpp:directive> <expr pos:start="135:5" pos:end="135:25"><call pos:start="135:5" pos:end="135:25"><name pos:start="135:5" pos:end="135:11">defined</name><argument_list pos:start="135:12" pos:end="135:25">(<argument pos:start="135:13" pos:end="135:24"><expr pos:start="135:13" pos:end="135:24"><name pos:start="135:13" pos:end="135:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="137:13" pos:end="155:13"><if pos:start="137:13" pos:end="145:13">if <condition pos:start="137:16" pos:end="137:50">(<expr pos:start="137:17" pos:end="137:49"><name pos:start="137:17" pos:end="137:30"><name pos:start="137:17" pos:end="137:19">env</name><operator pos:start="137:20" pos:end="137:21">-&gt;</operator><name pos:start="137:22" pos:end="137:30">mmu_model</name></name> <operator pos:start="137:32" pos:end="137:33">==</operator> <name pos:start="137:35" pos:end="137:49">POWERPC_MMU_64B</name></expr>)</condition> <block pos:start="137:52" pos:end="145:13">{<block_content pos:start="139:17" pos:end="143:63">

                <expr_stmt pos:start="139:17" pos:end="139:62"><expr pos:start="139:17" pos:end="139:61"><name pos:start="139:17" pos:end="139:25">htab_mask</name> <operator pos:start="139:27" pos:end="139:27">=</operator> <literal type="number" pos:start="139:29" pos:end="139:38">0x0FFFFFFF</literal> <operator pos:start="139:40" pos:end="139:41">&gt;&gt;</operator> <operator pos:start="139:43" pos:end="139:43">(</operator><literal type="number" pos:start="139:44" pos:end="139:47">28</literal> <operator pos:start="139:47" pos:end="139:47">-</operator> <operator pos:start="139:49" pos:end="139:49">(</operator><name pos:start="139:50" pos:end="139:52">sdr</name> <operator pos:start="139:54" pos:end="139:54">&amp;</operator> <literal type="number" pos:start="139:56" pos:end="139:59">0x1F</literal><operator pos:start="139:60" pos:end="139:60">)</operator><operator pos:start="139:61" pos:end="139:61">)</operator></expr>;</expr_stmt>

                <comment type="block" pos:start="141:17" pos:end="141:58">/* XXX: this is false for 1 TB segments */</comment>

                <expr_stmt pos:start="143:17" pos:end="143:63"><expr pos:start="143:17" pos:end="143:62"><name pos:start="143:17" pos:end="143:20">hash</name> <operator pos:start="143:22" pos:end="143:22">=</operator> <operator pos:start="143:24" pos:end="143:24">(</operator><operator pos:start="143:25" pos:end="143:25">(</operator><name pos:start="143:26" pos:end="143:29">vsid</name> <operator pos:start="143:31" pos:end="143:31">^</operator> <name pos:start="143:33" pos:end="143:37">pgidx</name><operator pos:start="143:38" pos:end="143:38">)</operator> <operator pos:start="143:40" pos:end="143:41">&lt;&lt;</operator> <name pos:start="143:43" pos:end="143:49">vsid_sh</name><operator pos:start="143:50" pos:end="143:50">)</operator> <operator pos:start="143:52" pos:end="143:52">&amp;</operator> <name pos:start="143:54" pos:end="143:62">vsid_mask</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="145:15" pos:end="155:13">else

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>

            <block pos:start="149:13" pos:end="155:13">{<block_content pos:start="151:17" pos:end="153:63">

                <expr_stmt pos:start="151:17" pos:end="151:45"><expr pos:start="151:17" pos:end="151:44"><name pos:start="151:17" pos:end="151:25">htab_mask</name> <operator pos:start="151:27" pos:end="151:27">=</operator> <name pos:start="151:29" pos:end="151:31">sdr</name> <operator pos:start="151:33" pos:end="151:33">&amp;</operator> <literal type="number" pos:start="151:35" pos:end="151:44">0x000001FF</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:63"><expr pos:start="153:17" pos:end="153:62"><name pos:start="153:17" pos:end="153:20">hash</name> <operator pos:start="153:22" pos:end="153:22">=</operator> <operator pos:start="153:24" pos:end="153:24">(</operator><operator pos:start="153:25" pos:end="153:25">(</operator><name pos:start="153:26" pos:end="153:29">vsid</name> <operator pos:start="153:31" pos:end="153:31">^</operator> <name pos:start="153:33" pos:end="153:37">pgidx</name><operator pos:start="153:38" pos:end="153:38">)</operator> <operator pos:start="153:40" pos:end="153:41">&lt;&lt;</operator> <name pos:start="153:43" pos:end="153:49">vsid_sh</name><operator pos:start="153:50" pos:end="153:50">)</operator> <operator pos:start="153:52" pos:end="153:52">&amp;</operator> <name pos:start="153:54" pos:end="153:62">vsid_mask</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="157:13" pos:end="160:0"><expr pos:start="157:13" pos:end="157:51"><name pos:start="157:13" pos:end="157:16">mask</name> <operator pos:start="157:18" pos:end="157:18">=</operator> <operator pos:start="157:20" pos:end="157:20">(</operator><name pos:start="157:21" pos:end="157:29">htab_mask</name> <operator pos:start="157:31" pos:end="157:32">&lt;&lt;</operator> <name pos:start="157:34" pos:end="157:39">sdr_sh</name><operator pos:start="157:40" pos:end="157:40">)</operator> <operator pos:start="157:42" pos:end="157:42">|</operator> <name pos:start="157:44" pos:end="157:51">sdr_mask</name></expr>;</expr_stmt>

<cpp:if pos:start="159:1" pos:end="159:23">#<cpp:directive pos:start="159:2" pos:end="159:3">if</cpp:directive> <expr pos:start="159:5" pos:end="159:23"><call pos:start="159:5" pos:end="159:23"><name pos:start="159:5" pos:end="159:11">defined</name> <argument_list pos:start="159:13" pos:end="159:23">(<argument pos:start="159:14" pos:end="159:22"><expr pos:start="159:14" pos:end="159:22"><name pos:start="159:14" pos:end="159:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="161:13" pos:end="172:0"><if pos:start="161:13" pos:end="172:0">if <condition pos:start="161:16" pos:end="161:30">(<expr pos:start="161:17" pos:end="161:29"><name pos:start="161:17" pos:end="161:24">loglevel</name> <operator pos:start="161:26" pos:end="161:27">!=</operator> <literal type="number" pos:start="161:29" pos:end="161:29">0</literal></expr>)</condition> <block pos:start="161:32" pos:end="172:0">{<block_content pos:start="163:17" pos:end="167:35">

                <expr_stmt pos:start="163:17" pos:end="167:35"><expr pos:start="163:17" pos:end="167:34"><call pos:start="163:17" pos:end="167:34"><name pos:start="163:17" pos:end="163:23">fprintf</name><argument_list pos:start="163:24" pos:end="167:34">(<argument pos:start="163:25" pos:end="163:31"><expr pos:start="163:25" pos:end="163:31"><name pos:start="163:25" pos:end="163:31">logfile</name></expr></argument>, <argument pos:start="163:34" pos:end="165:45"><expr pos:start="163:34" pos:end="165:45"><literal type="string" pos:start="163:34" pos:end="163:39">"sdr "</literal> <name pos:start="163:41" pos:end="163:46">PADDRX</name> <literal type="string" pos:start="163:48" pos:end="163:61">" sh %d hash "</literal> <name pos:start="163:63" pos:end="163:68">PADDRX</name> <literal type="string" pos:start="163:70" pos:end="163:77">" mask "</literal>

                        <name pos:start="165:25" pos:end="165:30">PADDRX</name> <literal type="string" pos:start="165:32" pos:end="165:34">" "</literal> <name pos:start="165:36" pos:end="165:40">ADDRX</name> <literal type="string" pos:start="165:42" pos:end="165:45">"\n"</literal></expr></argument>, <argument pos:start="165:48" pos:end="165:50"><expr pos:start="165:48" pos:end="165:50"><name pos:start="165:48" pos:end="165:50">sdr</name></expr></argument>, <argument pos:start="165:53" pos:end="165:58"><expr pos:start="165:53" pos:end="165:58"><name pos:start="165:53" pos:end="165:58">sdr_sh</name></expr></argument>, <argument pos:start="165:61" pos:end="165:64"><expr pos:start="165:61" pos:end="165:64"><name pos:start="165:61" pos:end="165:64">hash</name></expr></argument>, <argument pos:start="165:67" pos:end="165:70"><expr pos:start="165:67" pos:end="165:70"><name pos:start="165:67" pos:end="165:70">mask</name></expr></argument>,

                        <argument pos:start="167:25" pos:end="167:33"><expr pos:start="167:25" pos:end="167:33"><name pos:start="167:25" pos:end="167:33">page_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="171:1" pos:end="171:6">#<cpp:directive pos:start="171:2" pos:end="171:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="173:13" pos:end="173:66"><expr pos:start="173:13" pos:end="173:65"><name pos:start="173:13" pos:end="173:27"><name pos:start="173:13" pos:end="173:15">ctx</name><operator pos:start="173:16" pos:end="173:17">-&gt;</operator><name pos:start="173:18" pos:end="173:24">pg_addr</name><index pos:start="173:25" pos:end="173:27">[<expr pos:start="173:26" pos:end="173:26"><literal type="number" pos:start="173:26" pos:end="173:26">0</literal></expr>]</index></name> <operator pos:start="173:29" pos:end="173:29">=</operator> <call pos:start="173:31" pos:end="173:65"><name pos:start="173:31" pos:end="173:40">get_pgaddr</name><argument_list pos:start="173:41" pos:end="173:65">(<argument pos:start="173:42" pos:end="173:44"><expr pos:start="173:42" pos:end="173:44"><name pos:start="173:42" pos:end="173:44">sdr</name></expr></argument>, <argument pos:start="173:47" pos:end="173:52"><expr pos:start="173:47" pos:end="173:52"><name pos:start="173:47" pos:end="173:52">sdr_sh</name></expr></argument>, <argument pos:start="173:55" pos:end="173:58"><expr pos:start="173:55" pos:end="173:58"><name pos:start="173:55" pos:end="173:58">hash</name></expr></argument>, <argument pos:start="173:61" pos:end="173:64"><expr pos:start="173:61" pos:end="173:64"><name pos:start="173:61" pos:end="173:64">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="175:13" pos:end="175:41">/* Secondary table address */</comment>

            <expr_stmt pos:start="177:13" pos:end="180:0"><expr pos:start="177:13" pos:end="177:38"><name pos:start="177:13" pos:end="177:16">hash</name> <operator pos:start="177:18" pos:end="177:18">=</operator> <operator pos:start="177:20" pos:end="177:20">(</operator><operator pos:start="177:21" pos:end="177:21">~</operator><name pos:start="177:22" pos:end="177:25">hash</name><operator pos:start="177:26" pos:end="177:26">)</operator> <operator pos:start="177:28" pos:end="177:28">&amp;</operator> <name pos:start="177:30" pos:end="177:38">vsid_mask</name></expr>;</expr_stmt>

<cpp:if pos:start="179:1" pos:end="179:23">#<cpp:directive pos:start="179:2" pos:end="179:3">if</cpp:directive> <expr pos:start="179:5" pos:end="179:23"><call pos:start="179:5" pos:end="179:23"><name pos:start="179:5" pos:end="179:11">defined</name> <argument_list pos:start="179:13" pos:end="179:23">(<argument pos:start="179:14" pos:end="179:22"><expr pos:start="179:14" pos:end="179:22"><name pos:start="179:14" pos:end="179:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="181:13" pos:end="190:0"><if pos:start="181:13" pos:end="190:0">if <condition pos:start="181:16" pos:end="181:30">(<expr pos:start="181:17" pos:end="181:29"><name pos:start="181:17" pos:end="181:24">loglevel</name> <operator pos:start="181:26" pos:end="181:27">!=</operator> <literal type="number" pos:start="181:29" pos:end="181:29">0</literal></expr>)</condition> <block pos:start="181:32" pos:end="190:0">{<block_content pos:start="183:17" pos:end="185:62">

                <expr_stmt pos:start="183:17" pos:end="185:62"><expr pos:start="183:17" pos:end="185:61"><call pos:start="183:17" pos:end="185:61"><name pos:start="183:17" pos:end="183:23">fprintf</name><argument_list pos:start="183:24" pos:end="185:61">(<argument pos:start="183:25" pos:end="183:31"><expr pos:start="183:25" pos:end="183:31"><name pos:start="183:25" pos:end="183:31">logfile</name></expr></argument>, <argument pos:start="183:34" pos:end="185:35"><expr pos:start="183:34" pos:end="185:35"><literal type="string" pos:start="183:34" pos:end="183:39">"sdr "</literal> <name pos:start="183:41" pos:end="183:46">PADDRX</name> <literal type="string" pos:start="183:48" pos:end="183:61">" sh %d hash "</literal> <name pos:start="183:63" pos:end="183:68">PADDRX</name> <literal type="string" pos:start="183:70" pos:end="183:77">" mask "</literal>

                        <name pos:start="185:25" pos:end="185:30">PADDRX</name> <literal type="string" pos:start="185:32" pos:end="185:35">"\n"</literal></expr></argument>, <argument pos:start="185:38" pos:end="185:40"><expr pos:start="185:38" pos:end="185:40"><name pos:start="185:38" pos:end="185:40">sdr</name></expr></argument>, <argument pos:start="185:43" pos:end="185:48"><expr pos:start="185:43" pos:end="185:48"><name pos:start="185:43" pos:end="185:48">sdr_sh</name></expr></argument>, <argument pos:start="185:51" pos:end="185:54"><expr pos:start="185:51" pos:end="185:54"><name pos:start="185:51" pos:end="185:54">hash</name></expr></argument>, <argument pos:start="185:57" pos:end="185:60"><expr pos:start="185:57" pos:end="185:60"><name pos:start="185:57" pos:end="185:60">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="191:13" pos:end="194:0"><expr pos:start="191:13" pos:end="191:65"><name pos:start="191:13" pos:end="191:27"><name pos:start="191:13" pos:end="191:15">ctx</name><operator pos:start="191:16" pos:end="191:17">-&gt;</operator><name pos:start="191:18" pos:end="191:24">pg_addr</name><index pos:start="191:25" pos:end="191:27">[<expr pos:start="191:26" pos:end="191:26"><literal type="number" pos:start="191:26" pos:end="191:26">1</literal></expr>]</index></name> <operator pos:start="191:29" pos:end="191:29">=</operator> <call pos:start="191:31" pos:end="191:65"><name pos:start="191:31" pos:end="191:40">get_pgaddr</name><argument_list pos:start="191:41" pos:end="191:65">(<argument pos:start="191:42" pos:end="191:44"><expr pos:start="191:42" pos:end="191:44"><name pos:start="191:42" pos:end="191:44">sdr</name></expr></argument>, <argument pos:start="191:47" pos:end="191:52"><expr pos:start="191:47" pos:end="191:52"><name pos:start="191:47" pos:end="191:52">sdr_sh</name></expr></argument>, <argument pos:start="191:55" pos:end="191:58"><expr pos:start="191:55" pos:end="191:58"><name pos:start="191:55" pos:end="191:58">hash</name></expr></argument>, <argument pos:start="191:61" pos:end="191:64"><expr pos:start="191:61" pos:end="191:64"><name pos:start="191:61" pos:end="191:64">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="193:1" pos:end="193:25">#<cpp:directive pos:start="193:2" pos:end="193:3">if</cpp:directive> <expr pos:start="193:5" pos:end="193:25"><call pos:start="193:5" pos:end="193:25"><name pos:start="193:5" pos:end="193:11">defined</name><argument_list pos:start="193:12" pos:end="193:25">(<argument pos:start="193:13" pos:end="193:24"><expr pos:start="193:13" pos:end="193:24"><name pos:start="193:13" pos:end="193:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="195:13" pos:end="209:13"><if pos:start="195:13" pos:end="201:13">if <condition pos:start="195:16" pos:end="195:50">(<expr pos:start="195:17" pos:end="195:49"><name pos:start="195:17" pos:end="195:30"><name pos:start="195:17" pos:end="195:19">env</name><operator pos:start="195:20" pos:end="195:21">-&gt;</operator><name pos:start="195:22" pos:end="195:30">mmu_model</name></name> <operator pos:start="195:32" pos:end="195:33">==</operator> <name pos:start="195:35" pos:end="195:49">POWERPC_MMU_64B</name></expr>)</condition> <block pos:start="195:52" pos:end="201:13">{<block_content pos:start="199:17" pos:end="199:67">

                <comment type="block" pos:start="197:17" pos:end="197:72">/* Only 5 bits of the page index are used in the AVPN */</comment>

                <expr_stmt pos:start="199:17" pos:end="199:67"><expr pos:start="199:17" pos:end="199:66"><name pos:start="199:17" pos:end="199:25"><name pos:start="199:17" pos:end="199:19">ctx</name><operator pos:start="199:20" pos:end="199:21">-&gt;</operator><name pos:start="199:22" pos:end="199:25">ptem</name></name> <operator pos:start="199:27" pos:end="199:27">=</operator> <operator pos:start="199:29" pos:end="199:29">(</operator><name pos:start="199:30" pos:end="199:33">vsid</name> <operator pos:start="199:35" pos:end="199:36">&lt;&lt;</operator> <literal type="number" pos:start="199:38" pos:end="199:39">12</literal><operator pos:start="199:40" pos:end="199:40">)</operator> <operator pos:start="199:42" pos:end="199:42">|</operator> <operator pos:start="199:44" pos:end="199:44">(</operator><operator pos:start="199:45" pos:end="199:45">(</operator><name pos:start="199:46" pos:end="199:50">pgidx</name> <operator pos:start="199:52" pos:end="199:53">&gt;&gt;</operator> <literal type="number" pos:start="199:55" pos:end="199:55">4</literal><operator pos:start="199:56" pos:end="199:56">)</operator> <operator pos:start="199:58" pos:end="199:58">&amp;</operator> <literal type="number" pos:start="199:60" pos:end="199:65">0x0F80</literal><operator pos:start="199:66" pos:end="199:66">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="201:15" pos:end="209:13">else

<cpp:endif pos:start="203:1" pos:end="203:6">#<cpp:directive pos:start="203:2" pos:end="203:6">endif</cpp:directive></cpp:endif>

            <block pos:start="205:13" pos:end="209:13">{<block_content pos:start="207:17" pos:end="207:56">

                <expr_stmt pos:start="207:17" pos:end="207:56"><expr pos:start="207:17" pos:end="207:55"><name pos:start="207:17" pos:end="207:25"><name pos:start="207:17" pos:end="207:19">ctx</name><operator pos:start="207:20" pos:end="207:21">-&gt;</operator><name pos:start="207:22" pos:end="207:25">ptem</name></name> <operator pos:start="207:27" pos:end="207:27">=</operator> <operator pos:start="207:29" pos:end="207:29">(</operator><name pos:start="207:30" pos:end="207:33">vsid</name> <operator pos:start="207:35" pos:end="207:36">&lt;&lt;</operator> <literal type="number" pos:start="207:38" pos:end="207:38">7</literal><operator pos:start="207:39" pos:end="207:39">)</operator> <operator pos:start="207:41" pos:end="207:41">|</operator> <operator pos:start="207:43" pos:end="207:43">(</operator><name pos:start="207:44" pos:end="207:48">pgidx</name> <operator pos:start="207:50" pos:end="207:51">&gt;&gt;</operator> <literal type="number" pos:start="207:53" pos:end="207:54">10</literal><operator pos:start="207:55" pos:end="207:55">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <comment type="block" pos:start="211:13" pos:end="211:63">/* Initialize real address with an invalid value */</comment>

            <expr_stmt pos:start="213:13" pos:end="213:42"><expr pos:start="213:13" pos:end="213:41"><name pos:start="213:13" pos:end="213:22"><name pos:start="213:13" pos:end="213:15">ctx</name><operator pos:start="213:16" pos:end="213:17">-&gt;</operator><name pos:start="213:18" pos:end="213:22">raddr</name></name> <operator pos:start="213:24" pos:end="213:24">=</operator> <operator pos:start="213:26" pos:end="213:26">(</operator><name pos:start="213:27" pos:end="213:38">target_ulong</name><operator pos:start="213:39" pos:end="213:39">)</operator><operator pos:start="213:40" pos:end="213:40">-</operator><literal type="number" pos:start="213:41" pos:end="213:41">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="215:13" pos:end="278:0"><if pos:start="215:13" pos:end="223:13">if <condition pos:start="215:16" pos:end="217:66">(<expr pos:start="215:17" pos:end="217:65"><call pos:start="215:17" pos:end="217:65"><name pos:start="215:17" pos:end="215:24">unlikely</name><argument_list pos:start="215:25" pos:end="217:65">(<argument pos:start="215:26" pos:end="217:64"><expr pos:start="215:26" pos:end="217:64"><name pos:start="215:26" pos:end="215:39"><name pos:start="215:26" pos:end="215:28">env</name><operator pos:start="215:29" pos:end="215:30">-&gt;</operator><name pos:start="215:31" pos:end="215:39">mmu_model</name></name> <operator pos:start="215:41" pos:end="215:42">==</operator> <name pos:start="215:44" pos:end="215:63">POWERPC_MMU_SOFT_6xx</name> <operator pos:start="215:65" pos:end="215:66">||</operator>

                         <name pos:start="217:26" pos:end="217:39"><name pos:start="217:26" pos:end="217:28">env</name><operator pos:start="217:29" pos:end="217:30">-&gt;</operator><name pos:start="217:31" pos:end="217:39">mmu_model</name></name> <operator pos:start="217:41" pos:end="217:42">==</operator> <name pos:start="217:44" pos:end="217:64">POWERPC_MMU_SOFT_74xx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="217:68" pos:end="223:13">{<block_content pos:start="221:17" pos:end="221:66">

                <comment type="block" pos:start="219:17" pos:end="219:41">/* Software TLB search */</comment>

                <expr_stmt pos:start="221:17" pos:end="221:66"><expr pos:start="221:17" pos:end="221:65"><name pos:start="221:17" pos:end="221:19">ret</name> <operator pos:start="221:21" pos:end="221:21">=</operator> <call pos:start="221:23" pos:end="221:65"><name pos:start="221:23" pos:end="221:38">ppc6xx_tlb_check</name><argument_list pos:start="221:39" pos:end="221:65">(<argument pos:start="221:40" pos:end="221:42"><expr pos:start="221:40" pos:end="221:42"><name pos:start="221:40" pos:end="221:42">env</name></expr></argument>, <argument pos:start="221:45" pos:end="221:47"><expr pos:start="221:45" pos:end="221:47"><name pos:start="221:45" pos:end="221:47">ctx</name></expr></argument>, <argument pos:start="221:50" pos:end="221:54"><expr pos:start="221:50" pos:end="221:54"><name pos:start="221:50" pos:end="221:54">eaddr</name></expr></argument>, <argument pos:start="221:57" pos:end="221:58"><expr pos:start="221:57" pos:end="221:58"><name pos:start="221:57" pos:end="221:58">rw</name></expr></argument>, <argument pos:start="221:61" pos:end="221:64"><expr pos:start="221:61" pos:end="221:64"><name pos:start="221:61" pos:end="221:64">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="223:15" pos:end="278:0">else <block pos:start="223:20" pos:end="278:0">{<block_content pos:start="227:17" pos:end="273:17">

<cpp:if pos:start="225:1" pos:end="225:23">#<cpp:directive pos:start="225:2" pos:end="225:3">if</cpp:directive> <expr pos:start="225:5" pos:end="225:23"><call pos:start="225:5" pos:end="225:23"><name pos:start="225:5" pos:end="225:11">defined</name> <argument_list pos:start="225:13" pos:end="225:23">(<argument pos:start="225:14" pos:end="225:22"><expr pos:start="225:14" pos:end="225:22"><name pos:start="225:14" pos:end="225:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

                <if_stmt pos:start="227:17" pos:end="240:0"><if pos:start="227:17" pos:end="240:0">if <condition pos:start="227:20" pos:end="227:34">(<expr pos:start="227:21" pos:end="227:33"><name pos:start="227:21" pos:end="227:28">loglevel</name> <operator pos:start="227:30" pos:end="227:31">!=</operator> <literal type="number" pos:start="227:33" pos:end="227:33">0</literal></expr>)</condition> <block pos:start="227:36" pos:end="240:0">{<block_content pos:start="229:21" pos:end="235:61">

                    <expr_stmt pos:start="229:21" pos:end="235:61"><expr pos:start="229:21" pos:end="235:60"><call pos:start="229:21" pos:end="235:60"><name pos:start="229:21" pos:end="229:27">fprintf</name><argument_list pos:start="229:28" pos:end="235:60">(<argument pos:start="229:29" pos:end="229:35"><expr pos:start="229:29" pos:end="229:35"><name pos:start="229:29" pos:end="229:35">logfile</name></expr></argument>, <argument pos:start="229:38" pos:end="231:75"><expr pos:start="229:38" pos:end="231:75"><literal type="string" pos:start="229:38" pos:end="229:48">"0 sdr1=0x"</literal> <name pos:start="229:50" pos:end="229:55">PADDRX</name> <literal type="string" pos:start="229:57" pos:end="229:71">" vsid=0x%06x "</literal>

                            <literal type="string" pos:start="231:29" pos:end="231:63">"api=0x%04x hash=0x%07x pg_addr=0x"</literal> <name pos:start="231:65" pos:end="231:70">PADDRX</name> <literal type="string" pos:start="231:72" pos:end="231:75">"\n"</literal></expr></argument>,

                            <argument pos:start="233:29" pos:end="233:31"><expr pos:start="233:29" pos:end="233:31"><name pos:start="233:29" pos:end="233:31">sdr</name></expr></argument>, <argument pos:start="233:34" pos:end="233:47"><expr pos:start="233:34" pos:end="233:47"><operator pos:start="233:34" pos:end="233:34">(</operator><name pos:start="233:35" pos:end="233:42">uint32_t</name><operator pos:start="233:43" pos:end="233:43">)</operator><name pos:start="233:44" pos:end="233:47">vsid</name></expr></argument>, <argument pos:start="233:50" pos:end="233:64"><expr pos:start="233:50" pos:end="233:64"><operator pos:start="233:50" pos:end="233:50">(</operator><name pos:start="233:51" pos:end="233:58">uint32_t</name><operator pos:start="233:59" pos:end="233:59">)</operator><name pos:start="233:60" pos:end="233:64">pgidx</name></expr></argument>,

                            <argument pos:start="235:29" pos:end="235:42"><expr pos:start="235:29" pos:end="235:42"><operator pos:start="235:29" pos:end="235:29">(</operator><name pos:start="235:30" pos:end="235:37">uint32_t</name><operator pos:start="235:38" pos:end="235:38">)</operator><name pos:start="235:39" pos:end="235:42">hash</name></expr></argument>, <argument pos:start="235:45" pos:end="235:59"><expr pos:start="235:45" pos:end="235:59"><name pos:start="235:45" pos:end="235:59"><name pos:start="235:45" pos:end="235:47">ctx</name><operator pos:start="235:48" pos:end="235:49">-&gt;</operator><name pos:start="235:50" pos:end="235:56">pg_addr</name><index pos:start="235:57" pos:end="235:59">[<expr pos:start="235:58" pos:end="235:58"><literal type="number" pos:start="235:58" pos:end="235:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="239:1" pos:end="239:6">#<cpp:directive pos:start="239:2" pos:end="239:6">endif</cpp:directive></cpp:endif>

                <comment type="block" pos:start="241:17" pos:end="241:42">/* Primary table lookup */</comment>

                <expr_stmt pos:start="243:17" pos:end="243:48"><expr pos:start="243:17" pos:end="243:47"><name pos:start="243:17" pos:end="243:19">ret</name> <operator pos:start="243:21" pos:end="243:21">=</operator> <call pos:start="243:23" pos:end="243:47"><name pos:start="243:23" pos:end="243:30">find_pte</name><argument_list pos:start="243:31" pos:end="243:47">(<argument pos:start="243:32" pos:end="243:34"><expr pos:start="243:32" pos:end="243:34"><name pos:start="243:32" pos:end="243:34">env</name></expr></argument>, <argument pos:start="243:37" pos:end="243:39"><expr pos:start="243:37" pos:end="243:39"><name pos:start="243:37" pos:end="243:39">ctx</name></expr></argument>, <argument pos:start="243:42" pos:end="243:42"><expr pos:start="243:42" pos:end="243:42"><literal type="number" pos:start="243:42" pos:end="243:42">0</literal></expr></argument>, <argument pos:start="243:45" pos:end="243:46"><expr pos:start="243:45" pos:end="243:46"><name pos:start="243:45" pos:end="243:46">rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="245:17" pos:end="273:17"><if pos:start="245:17" pos:end="273:17">if <condition pos:start="245:20" pos:end="245:28">(<expr pos:start="245:21" pos:end="245:27"><name pos:start="245:21" pos:end="245:23">ret</name> <operator pos:start="245:25" pos:end="245:25">&lt;</operator> <literal type="number" pos:start="245:27" pos:end="245:27">0</literal></expr>)</condition> <block pos:start="245:30" pos:end="273:17">{<block_content pos:start="251:21" pos:end="271:35">

                    <comment type="block" pos:start="247:21" pos:end="247:48">/* Secondary table lookup */</comment>

<cpp:if pos:start="249:1" pos:end="249:23">#<cpp:directive pos:start="249:2" pos:end="249:3">if</cpp:directive> <expr pos:start="249:5" pos:end="249:23"><call pos:start="249:5" pos:end="249:23"><name pos:start="249:5" pos:end="249:11">defined</name> <argument_list pos:start="249:13" pos:end="249:23">(<argument pos:start="249:14" pos:end="249:22"><expr pos:start="249:14" pos:end="249:22"><name pos:start="249:14" pos:end="249:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

                    <if_stmt pos:start="251:21" pos:end="266:0"><if pos:start="251:21" pos:end="266:0">if <condition pos:start="251:24" pos:end="251:61">(<expr pos:start="251:25" pos:end="251:60"><name pos:start="251:25" pos:end="251:29">eaddr</name> <operator pos:start="251:31" pos:end="251:32">!=</operator> <literal type="number" pos:start="251:34" pos:end="251:43">0xEFFFFFFF</literal> <operator pos:start="251:45" pos:end="251:46">&amp;&amp;</operator> <name pos:start="251:48" pos:end="251:55">loglevel</name> <operator pos:start="251:57" pos:end="251:58">!=</operator> <literal type="number" pos:start="251:60" pos:end="251:60">0</literal></expr>)</condition> <block pos:start="251:63" pos:end="266:0">{<block_content pos:start="253:25" pos:end="261:65">

                        <expr_stmt pos:start="253:25" pos:end="261:65"><expr pos:start="253:25" pos:end="261:64"><call pos:start="253:25" pos:end="261:64"><name pos:start="253:25" pos:end="253:31">fprintf</name><argument_list pos:start="253:32" pos:end="261:64">(<argument pos:start="253:33" pos:end="253:39"><expr pos:start="253:33" pos:end="253:39"><name pos:start="253:33" pos:end="253:39">logfile</name></expr></argument>,

                                <argument pos:start="255:33" pos:end="257:68"><expr pos:start="255:33" pos:end="257:68"><literal type="string" pos:start="255:33" pos:end="255:43">"1 sdr1=0x"</literal> <name pos:start="255:45" pos:end="255:50">PADDRX</name> <literal type="string" pos:start="255:52" pos:end="255:77">" vsid=0x%06x api=0x%04x "</literal>

                                <literal type="string" pos:start="257:33" pos:end="257:56">"hash=0x%05x pg_addr=0x"</literal> <name pos:start="257:58" pos:end="257:63">PADDRX</name> <literal type="string" pos:start="257:65" pos:end="257:68">"\n"</literal></expr></argument>,

                                <argument pos:start="259:33" pos:end="259:35"><expr pos:start="259:33" pos:end="259:35"><name pos:start="259:33" pos:end="259:35">sdr</name></expr></argument>, <argument pos:start="259:38" pos:end="259:51"><expr pos:start="259:38" pos:end="259:51"><operator pos:start="259:38" pos:end="259:38">(</operator><name pos:start="259:39" pos:end="259:46">uint32_t</name><operator pos:start="259:47" pos:end="259:47">)</operator><name pos:start="259:48" pos:end="259:51">vsid</name></expr></argument>, <argument pos:start="259:54" pos:end="259:68"><expr pos:start="259:54" pos:end="259:68"><operator pos:start="259:54" pos:end="259:54">(</operator><name pos:start="259:55" pos:end="259:62">uint32_t</name><operator pos:start="259:63" pos:end="259:63">)</operator><name pos:start="259:64" pos:end="259:68">pgidx</name></expr></argument>,

                                <argument pos:start="261:33" pos:end="261:46"><expr pos:start="261:33" pos:end="261:46"><operator pos:start="261:33" pos:end="261:33">(</operator><name pos:start="261:34" pos:end="261:41">uint32_t</name><operator pos:start="261:42" pos:end="261:42">)</operator><name pos:start="261:43" pos:end="261:46">hash</name></expr></argument>, <argument pos:start="261:49" pos:end="261:63"><expr pos:start="261:49" pos:end="261:63"><name pos:start="261:49" pos:end="261:63"><name pos:start="261:49" pos:end="261:51">ctx</name><operator pos:start="261:52" pos:end="261:53">-&gt;</operator><name pos:start="261:54" pos:end="261:60">pg_addr</name><index pos:start="261:61" pos:end="261:63">[<expr pos:start="261:62" pos:end="261:62"><literal type="number" pos:start="261:62" pos:end="261:62">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="265:1" pos:end="265:6">#<cpp:directive pos:start="265:2" pos:end="265:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="267:21" pos:end="267:53"><expr pos:start="267:21" pos:end="267:52"><name pos:start="267:21" pos:end="267:24">ret2</name> <operator pos:start="267:26" pos:end="267:26">=</operator> <call pos:start="267:28" pos:end="267:52"><name pos:start="267:28" pos:end="267:35">find_pte</name><argument_list pos:start="267:36" pos:end="267:52">(<argument pos:start="267:37" pos:end="267:39"><expr pos:start="267:37" pos:end="267:39"><name pos:start="267:37" pos:end="267:39">env</name></expr></argument>, <argument pos:start="267:42" pos:end="267:44"><expr pos:start="267:42" pos:end="267:44"><name pos:start="267:42" pos:end="267:44">ctx</name></expr></argument>, <argument pos:start="267:47" pos:end="267:47"><expr pos:start="267:47" pos:end="267:47"><literal type="number" pos:start="267:47" pos:end="267:47">1</literal></expr></argument>, <argument pos:start="267:50" pos:end="267:51"><expr pos:start="267:50" pos:end="267:51"><name pos:start="267:50" pos:end="267:51">rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="269:21" pos:end="271:35"><if pos:start="269:21" pos:end="271:35">if <condition pos:start="269:24" pos:end="269:35">(<expr pos:start="269:25" pos:end="269:34"><name pos:start="269:25" pos:end="269:28">ret2</name> <operator pos:start="269:30" pos:end="269:31">!=</operator> <operator pos:start="269:33" pos:end="269:33">-</operator><literal type="number" pos:start="269:34" pos:end="269:34">1</literal></expr>)</condition><block type="pseudo" pos:start="271:25" pos:end="271:35"><block_content pos:start="271:25" pos:end="271:35">

                        <expr_stmt pos:start="271:25" pos:end="271:35"><expr pos:start="271:25" pos:end="271:34"><name pos:start="271:25" pos:end="271:27">ret</name> <operator pos:start="271:29" pos:end="271:29">=</operator> <name pos:start="271:31" pos:end="271:34">ret2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

<cpp:if pos:start="277:1" pos:end="277:23">#<cpp:directive pos:start="277:2" pos:end="277:3">if</cpp:directive> <expr pos:start="277:5" pos:end="277:23"><call pos:start="277:5" pos:end="277:23"><name pos:start="277:5" pos:end="277:11">defined</name> <argument_list pos:start="277:13" pos:end="277:23">(<argument pos:start="277:14" pos:end="277:22"><expr pos:start="277:14" pos:end="277:22"><name pos:start="277:14" pos:end="277:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="279:13" pos:end="318:0"><if pos:start="279:13" pos:end="318:0">if <condition pos:start="279:16" pos:end="279:30">(<expr pos:start="279:17" pos:end="279:29"><name pos:start="279:17" pos:end="279:24">loglevel</name> <operator pos:start="279:26" pos:end="279:27">!=</operator> <literal type="number" pos:start="279:29" pos:end="279:29">0</literal></expr>)</condition> <block pos:start="279:32" pos:end="318:0">{<block_content pos:start="281:17" pos:end="313:17">

                <decl_stmt pos:start="281:17" pos:end="281:43"><decl pos:start="281:17" pos:end="281:42"><type pos:start="281:17" pos:end="281:34"><name pos:start="281:17" pos:end="281:34">target_phys_addr_t</name></type> <name pos:start="281:36" pos:end="281:42">curaddr</name></decl>;</decl_stmt>

                <decl_stmt pos:start="283:17" pos:end="283:40"><decl pos:start="283:17" pos:end="283:27"><type pos:start="283:17" pos:end="283:24"><name pos:start="283:17" pos:end="283:24">uint32_t</name></type> <name pos:start="283:26" pos:end="283:27">a0</name></decl>, <decl pos:start="283:30" pos:end="283:31"><type ref="prev" pos:start="283:17" pos:end="283:24"/><name pos:start="283:30" pos:end="283:31">a1</name></decl>, <decl pos:start="283:34" pos:end="283:35"><type ref="prev" pos:start="283:17" pos:end="283:24"/><name pos:start="283:34" pos:end="283:35">a2</name></decl>, <decl pos:start="283:38" pos:end="283:39"><type ref="prev" pos:start="283:17" pos:end="283:24"/><name pos:start="283:38" pos:end="283:39">a3</name></decl>;</decl_stmt>

                <expr_stmt pos:start="285:17" pos:end="289:42"><expr pos:start="285:17" pos:end="289:41"><call pos:start="285:17" pos:end="289:41"><name pos:start="285:17" pos:end="285:23">fprintf</name><argument_list pos:start="285:24" pos:end="289:41">(<argument pos:start="285:25" pos:end="285:31"><expr pos:start="285:25" pos:end="285:31"><name pos:start="285:25" pos:end="285:31">logfile</name></expr></argument>,

                        <argument pos:start="287:25" pos:end="287:65"><expr pos:start="287:25" pos:end="287:65"><literal type="string" pos:start="287:25" pos:end="287:38">"Page table: "</literal> <name pos:start="287:40" pos:end="287:45">PADDRX</name> <literal type="string" pos:start="287:47" pos:end="287:53">" len "</literal> <name pos:start="287:55" pos:end="287:60">PADDRX</name> <literal type="string" pos:start="287:62" pos:end="287:65">"\n"</literal></expr></argument>,

                        <argument pos:start="289:25" pos:end="289:27"><expr pos:start="289:25" pos:end="289:27"><name pos:start="289:25" pos:end="289:27">sdr</name></expr></argument>, <argument pos:start="289:30" pos:end="289:40"><expr pos:start="289:30" pos:end="289:40"><name pos:start="289:30" pos:end="289:33">mask</name> <operator pos:start="289:35" pos:end="289:35">+</operator> <literal type="number" pos:start="289:37" pos:end="289:40">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="291:17" pos:end="313:17">for <control pos:start="291:21" pos:end="293:35">(<init pos:start="291:22" pos:end="291:35"><expr pos:start="291:22" pos:end="291:34"><name pos:start="291:22" pos:end="291:28">curaddr</name> <operator pos:start="291:30" pos:end="291:30">=</operator> <name pos:start="291:32" pos:end="291:34">sdr</name></expr>;</init> <condition pos:start="291:37" pos:end="291:66"><expr pos:start="291:37" pos:end="291:65"><name pos:start="291:37" pos:end="291:43">curaddr</name> <operator pos:start="291:45" pos:end="291:45">&lt;</operator> <operator pos:start="291:47" pos:end="291:47">(</operator><name pos:start="291:48" pos:end="291:50">sdr</name> <operator pos:start="291:52" pos:end="291:52">+</operator> <name pos:start="291:54" pos:end="291:57">mask</name> <operator pos:start="291:59" pos:end="291:59">+</operator> <literal type="number" pos:start="291:61" pos:end="291:64">0x80</literal><operator pos:start="291:65" pos:end="291:65">)</operator></expr>;</condition>

                     <incr pos:start="293:22" pos:end="293:34"><expr pos:start="293:22" pos:end="293:34"><name pos:start="293:22" pos:end="293:28">curaddr</name> <operator pos:start="293:30" pos:end="293:31">+=</operator> <literal type="number" pos:start="293:33" pos:end="293:34">16</literal></expr></incr>)</control> <block pos:start="293:37" pos:end="313:17">{<block_content pos:start="295:21" pos:end="311:21">

                    <expr_stmt pos:start="295:21" pos:end="295:43"><expr pos:start="295:21" pos:end="295:42"><name pos:start="295:21" pos:end="295:22">a0</name> <operator pos:start="295:24" pos:end="295:24">=</operator> <call pos:start="295:26" pos:end="295:42"><name pos:start="295:26" pos:end="295:33">ldl_phys</name><argument_list pos:start="295:34" pos:end="295:42">(<argument pos:start="295:35" pos:end="295:41"><expr pos:start="295:35" pos:end="295:41"><name pos:start="295:35" pos:end="295:41">curaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="297:21" pos:end="297:47"><expr pos:start="297:21" pos:end="297:46"><name pos:start="297:21" pos:end="297:22">a1</name> <operator pos:start="297:24" pos:end="297:24">=</operator> <call pos:start="297:26" pos:end="297:46"><name pos:start="297:26" pos:end="297:33">ldl_phys</name><argument_list pos:start="297:34" pos:end="297:46">(<argument pos:start="297:35" pos:end="297:45"><expr pos:start="297:35" pos:end="297:45"><name pos:start="297:35" pos:end="297:41">curaddr</name> <operator pos:start="297:43" pos:end="297:43">+</operator> <literal type="number" pos:start="297:45" pos:end="297:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="299:21" pos:end="299:47"><expr pos:start="299:21" pos:end="299:46"><name pos:start="299:21" pos:end="299:22">a2</name> <operator pos:start="299:24" pos:end="299:24">=</operator> <call pos:start="299:26" pos:end="299:46"><name pos:start="299:26" pos:end="299:33">ldl_phys</name><argument_list pos:start="299:34" pos:end="299:46">(<argument pos:start="299:35" pos:end="299:45"><expr pos:start="299:35" pos:end="299:45"><name pos:start="299:35" pos:end="299:41">curaddr</name> <operator pos:start="299:43" pos:end="299:43">+</operator> <literal type="number" pos:start="299:45" pos:end="299:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="301:21" pos:end="301:48"><expr pos:start="301:21" pos:end="301:47"><name pos:start="301:21" pos:end="301:22">a3</name> <operator pos:start="301:24" pos:end="301:24">=</operator> <call pos:start="301:26" pos:end="301:47"><name pos:start="301:26" pos:end="301:33">ldl_phys</name><argument_list pos:start="301:34" pos:end="301:47">(<argument pos:start="301:35" pos:end="301:46"><expr pos:start="301:35" pos:end="301:46"><name pos:start="301:35" pos:end="301:41">curaddr</name> <operator pos:start="301:43" pos:end="301:43">+</operator> <literal type="number" pos:start="301:45" pos:end="301:46">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="303:21" pos:end="311:21"><if pos:start="303:21" pos:end="311:21">if <condition pos:start="303:24" pos:end="303:65">(<expr pos:start="303:25" pos:end="303:64"><name pos:start="303:25" pos:end="303:26">a0</name> <operator pos:start="303:28" pos:end="303:29">!=</operator> <literal type="number" pos:start="303:31" pos:end="303:31">0</literal> <operator pos:start="303:33" pos:end="303:34">||</operator> <name pos:start="303:36" pos:end="303:37">a1</name> <operator pos:start="303:39" pos:end="303:40">!=</operator> <literal type="number" pos:start="303:42" pos:end="303:42">0</literal> <operator pos:start="303:44" pos:end="303:45">||</operator> <name pos:start="303:47" pos:end="303:48">a2</name> <operator pos:start="303:50" pos:end="303:51">!=</operator> <literal type="number" pos:start="303:53" pos:end="303:53">0</literal> <operator pos:start="303:55" pos:end="303:56">||</operator> <name pos:start="303:58" pos:end="303:59">a3</name> <operator pos:start="303:61" pos:end="303:62">!=</operator> <literal type="number" pos:start="303:64" pos:end="303:64">0</literal></expr>)</condition> <block pos:start="303:67" pos:end="311:21">{<block_content pos:start="305:25" pos:end="309:57">

                        <expr_stmt pos:start="305:25" pos:end="309:57"><expr pos:start="305:25" pos:end="309:56"><call pos:start="305:25" pos:end="309:56"><name pos:start="305:25" pos:end="305:31">fprintf</name><argument_list pos:start="305:32" pos:end="309:56">(<argument pos:start="305:33" pos:end="305:39"><expr pos:start="305:33" pos:end="305:39"><name pos:start="305:33" pos:end="305:39">logfile</name></expr></argument>,

                                <argument pos:start="307:33" pos:end="307:64"><expr pos:start="307:33" pos:end="307:64"><name pos:start="307:33" pos:end="307:38">PADDRX</name> <literal type="string" pos:start="307:40" pos:end="307:64">": %08x %08x %08x %08x\n"</literal></expr></argument>,

                                <argument pos:start="309:33" pos:end="309:39"><expr pos:start="309:33" pos:end="309:39"><name pos:start="309:33" pos:end="309:39">curaddr</name></expr></argument>, <argument pos:start="309:42" pos:end="309:43"><expr pos:start="309:42" pos:end="309:43"><name pos:start="309:42" pos:end="309:43">a0</name></expr></argument>, <argument pos:start="309:46" pos:end="309:47"><expr pos:start="309:46" pos:end="309:47"><name pos:start="309:46" pos:end="309:47">a1</name></expr></argument>, <argument pos:start="309:50" pos:end="309:51"><expr pos:start="309:50" pos:end="309:51"><name pos:start="309:50" pos:end="309:51">a2</name></expr></argument>, <argument pos:start="309:54" pos:end="309:55"><expr pos:start="309:54" pos:end="309:55"><name pos:start="309:54" pos:end="309:55">a3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="317:1" pos:end="317:6">#<cpp:directive pos:start="317:2" pos:end="317:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="319:11" pos:end="331:9">else <block pos:start="319:16" pos:end="331:9">{<block_content pos:start="323:13" pos:end="329:21">

<cpp:if pos:start="321:1" pos:end="321:23">#<cpp:directive pos:start="321:2" pos:end="321:3">if</cpp:directive> <expr pos:start="321:5" pos:end="321:23"><call pos:start="321:5" pos:end="321:23"><name pos:start="321:5" pos:end="321:11">defined</name> <argument_list pos:start="321:13" pos:end="321:23">(<argument pos:start="321:14" pos:end="321:22"><expr pos:start="321:14" pos:end="321:22"><name pos:start="321:14" pos:end="321:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="323:13" pos:end="328:0"><if pos:start="323:13" pos:end="328:0">if <condition pos:start="323:16" pos:end="323:30">(<expr pos:start="323:17" pos:end="323:29"><name pos:start="323:17" pos:end="323:24">loglevel</name> <operator pos:start="323:26" pos:end="323:27">!=</operator> <literal type="number" pos:start="323:29" pos:end="323:29">0</literal></expr>)</condition><block type="pseudo" pos:start="325:17" pos:end="328:0"><block_content pos:start="325:17" pos:end="328:0">

                <expr_stmt pos:start="325:17" pos:end="328:0"><expr pos:start="325:17" pos:end="325:55"><call pos:start="325:17" pos:end="325:55"><name pos:start="325:17" pos:end="325:23">fprintf</name><argument_list pos:start="325:24" pos:end="325:55">(<argument pos:start="325:25" pos:end="325:31"><expr pos:start="325:25" pos:end="325:31"><name pos:start="325:25" pos:end="325:31">logfile</name></expr></argument>, <argument pos:start="325:34" pos:end="325:54"><expr pos:start="325:34" pos:end="325:54"><literal type="string" pos:start="325:34" pos:end="325:54">"No access allowed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="327:1" pos:end="327:6">#<cpp:directive pos:start="327:2" pos:end="327:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="329:13" pos:end="329:21"><expr pos:start="329:13" pos:end="329:20"><name pos:start="329:13" pos:end="329:15">ret</name> <operator pos:start="329:17" pos:end="329:17">=</operator> <operator pos:start="329:19" pos:end="329:19">-</operator><literal type="number" pos:start="329:20" pos:end="329:20">3</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="333:7" pos:end="417:5">else <block pos:start="333:12" pos:end="417:5">{<block_content pos:start="337:9" pos:end="415:9">

<cpp:if pos:start="335:1" pos:end="335:23">#<cpp:directive pos:start="335:2" pos:end="335:3">if</cpp:directive> <expr pos:start="335:5" pos:end="335:23"><call pos:start="335:5" pos:end="335:23"><name pos:start="335:5" pos:end="335:11">defined</name> <argument_list pos:start="335:13" pos:end="335:23">(<argument pos:start="335:14" pos:end="335:22"><expr pos:start="335:14" pos:end="335:22"><name pos:start="335:14" pos:end="335:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="337:9" pos:end="342:0"><if pos:start="337:9" pos:end="342:0">if <condition pos:start="337:12" pos:end="337:26">(<expr pos:start="337:13" pos:end="337:25"><name pos:start="337:13" pos:end="337:20">loglevel</name> <operator pos:start="337:22" pos:end="337:23">!=</operator> <literal type="number" pos:start="337:25" pos:end="337:25">0</literal></expr>)</condition><block type="pseudo" pos:start="339:13" pos:end="342:0"><block_content pos:start="339:13" pos:end="342:0">

            <expr_stmt pos:start="339:13" pos:end="342:0"><expr pos:start="339:13" pos:end="339:49"><call pos:start="339:13" pos:end="339:49"><name pos:start="339:13" pos:end="339:19">fprintf</name><argument_list pos:start="339:20" pos:end="339:49">(<argument pos:start="339:21" pos:end="339:27"><expr pos:start="339:21" pos:end="339:27"><name pos:start="339:21" pos:end="339:27">logfile</name></expr></argument>, <argument pos:start="339:30" pos:end="339:48"><expr pos:start="339:30" pos:end="339:48"><literal type="string" pos:start="339:30" pos:end="339:48">"direct store...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="341:1" pos:end="341:6">#<cpp:directive pos:start="341:2" pos:end="341:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="343:9" pos:end="343:63">/* Direct-store segment : absolutely *BUGGY* for now */</comment>

        <switch pos:start="345:9" pos:end="403:9">switch <condition pos:start="345:16" pos:end="345:21">(<expr pos:start="345:17" pos:end="345:20"><name pos:start="345:17" pos:end="345:20">type</name></expr>)</condition> <block pos:start="345:23" pos:end="403:9">{<block_content pos:start="347:9" pos:end="401:22">

        <case pos:start="347:9" pos:end="347:24">case <expr pos:start="347:14" pos:end="347:23"><name pos:start="347:14" pos:end="347:23">ACCESS_INT</name></expr>:</case>

            <comment type="block" pos:start="349:13" pos:end="349:58">/* Integer load/store : only access allowed */</comment>

            <break pos:start="351:13" pos:end="351:18">break;</break>

        <case pos:start="353:9" pos:end="353:25">case <expr pos:start="353:14" pos:end="353:24"><name pos:start="353:14" pos:end="353:24">ACCESS_CODE</name></expr>:</case>

            <comment type="block" pos:start="355:13" pos:end="355:64">/* No code fetch is allowed in direct-store areas */</comment>

            <return pos:start="357:13" pos:end="357:22">return <expr pos:start="357:20" pos:end="357:21"><operator pos:start="357:20" pos:end="357:20">-</operator><literal type="number" pos:start="357:21" pos:end="357:21">4</literal></expr>;</return>

        <case pos:start="359:9" pos:end="359:26">case <expr pos:start="359:14" pos:end="359:25"><name pos:start="359:14" pos:end="359:25">ACCESS_FLOAT</name></expr>:</case>

            <comment type="block" pos:start="361:13" pos:end="361:43">/* Floating point load/store */</comment>

            <return pos:start="363:13" pos:end="363:22">return <expr pos:start="363:20" pos:end="363:21"><operator pos:start="363:20" pos:end="363:20">-</operator><literal type="number" pos:start="363:21" pos:end="363:21">4</literal></expr>;</return>

        <case pos:start="365:9" pos:end="365:24">case <expr pos:start="365:14" pos:end="365:23"><name pos:start="365:14" pos:end="365:23">ACCESS_RES</name></expr>:</case>

            <comment type="block" pos:start="367:13" pos:end="367:40">/* lwarx, ldarx or srwcx. */</comment>

            <return pos:start="369:13" pos:end="369:22">return <expr pos:start="369:20" pos:end="369:21"><operator pos:start="369:20" pos:end="369:20">-</operator><literal type="number" pos:start="369:21" pos:end="369:21">4</literal></expr>;</return>

        <case pos:start="371:9" pos:end="371:26">case <expr pos:start="371:14" pos:end="371:25"><name pos:start="371:14" pos:end="371:25">ACCESS_CACHE</name></expr>:</case>

            <comment type="block" pos:start="373:13" pos:end="373:70">/* dcba, dcbt, dcbtst, dcbf, dcbi, dcbst, dcbz, or icbi */</comment>

            <comment type="block" pos:start="375:13" pos:end="379:15">/* Should make the instruction do no-op.

             * As it already do no-op, it's quite easy :-)

             */</comment>

            <expr_stmt pos:start="381:13" pos:end="381:31"><expr pos:start="381:13" pos:end="381:30"><name pos:start="381:13" pos:end="381:22"><name pos:start="381:13" pos:end="381:15">ctx</name><operator pos:start="381:16" pos:end="381:17">-&gt;</operator><name pos:start="381:18" pos:end="381:22">raddr</name></name> <operator pos:start="381:24" pos:end="381:24">=</operator> <name pos:start="381:26" pos:end="381:30">eaddr</name></expr>;</expr_stmt>

            <return pos:start="383:13" pos:end="383:21">return <expr pos:start="383:20" pos:end="383:20"><literal type="number" pos:start="383:20" pos:end="383:20">0</literal></expr>;</return>

        <case pos:start="385:9" pos:end="385:24">case <expr pos:start="385:14" pos:end="385:23"><name pos:start="385:14" pos:end="385:23">ACCESS_EXT</name></expr>:</case>

            <comment type="block" pos:start="387:13" pos:end="387:32">/* eciwx or ecowx */</comment>

            <return pos:start="389:13" pos:end="389:22">return <expr pos:start="389:20" pos:end="389:21"><operator pos:start="389:20" pos:end="389:20">-</operator><literal type="number" pos:start="389:21" pos:end="389:21">4</literal></expr>;</return>

        <default pos:start="391:9" pos:end="391:16">default:</default>

            <if_stmt pos:start="393:13" pos:end="399:13"><if pos:start="393:13" pos:end="399:13">if <condition pos:start="393:16" pos:end="393:24">(<expr pos:start="393:17" pos:end="393:23"><name pos:start="393:17" pos:end="393:23">logfile</name></expr>)</condition> <block pos:start="393:26" pos:end="399:13">{<block_content pos:start="395:17" pos:end="397:49">

                <expr_stmt pos:start="395:17" pos:end="397:49"><expr pos:start="395:17" pos:end="397:48"><call pos:start="395:17" pos:end="397:48"><name pos:start="395:17" pos:end="395:23">fprintf</name><argument_list pos:start="395:24" pos:end="397:48">(<argument pos:start="395:25" pos:end="395:31"><expr pos:start="395:25" pos:end="395:31"><name pos:start="395:25" pos:end="395:31">logfile</name></expr></argument>, <argument pos:start="395:34" pos:end="397:47"><expr pos:start="395:34" pos:end="397:47"><literal type="string" pos:start="395:34" pos:end="395:70">"ERROR: instruction should not need "</literal>

                        <literal type="string" pos:start="397:25" pos:end="397:47">"address translation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <return pos:start="401:13" pos:end="401:22">return <expr pos:start="401:20" pos:end="401:21"><operator pos:start="401:20" pos:end="401:20">-</operator><literal type="number" pos:start="401:21" pos:end="401:21">4</literal></expr>;</return>

        </block_content>}</block></switch>

        <if_stmt pos:start="405:9" pos:end="415:9"><if pos:start="405:9" pos:end="411:9">if <condition pos:start="405:12" pos:end="405:69">(<expr pos:start="405:13" pos:end="405:68"><operator pos:start="405:13" pos:end="405:13">(</operator><name pos:start="405:14" pos:end="405:15">rw</name> <operator pos:start="405:17" pos:end="405:18">==</operator> <literal type="number" pos:start="405:20" pos:end="405:20">1</literal> <operator pos:start="405:22" pos:end="405:23">||</operator> <name pos:start="405:25" pos:end="405:32"><name pos:start="405:25" pos:end="405:27">ctx</name><operator pos:start="405:28" pos:end="405:29">-&gt;</operator><name pos:start="405:30" pos:end="405:32">key</name></name> <operator pos:start="405:34" pos:end="405:35">!=</operator> <literal type="number" pos:start="405:37" pos:end="405:37">1</literal><operator pos:start="405:38" pos:end="405:38">)</operator> <operator pos:start="405:40" pos:end="405:41">&amp;&amp;</operator> <operator pos:start="405:43" pos:end="405:43">(</operator><name pos:start="405:44" pos:end="405:45">rw</name> <operator pos:start="405:47" pos:end="405:48">==</operator> <literal type="number" pos:start="405:50" pos:end="405:50">0</literal> <operator pos:start="405:52" pos:end="405:53">||</operator> <name pos:start="405:55" pos:end="405:62"><name pos:start="405:55" pos:end="405:57">ctx</name><operator pos:start="405:58" pos:end="405:59">-&gt;</operator><name pos:start="405:60" pos:end="405:62">key</name></name> <operator pos:start="405:64" pos:end="405:65">!=</operator> <literal type="number" pos:start="405:67" pos:end="405:67">0</literal><operator pos:start="405:68" pos:end="405:68">)</operator></expr>)</condition> <block pos:start="405:71" pos:end="411:9">{<block_content pos:start="407:13" pos:end="409:20">

            <expr_stmt pos:start="407:13" pos:end="407:31"><expr pos:start="407:13" pos:end="407:30"><name pos:start="407:13" pos:end="407:22"><name pos:start="407:13" pos:end="407:15">ctx</name><operator pos:start="407:16" pos:end="407:17">-&gt;</operator><name pos:start="407:18" pos:end="407:22">raddr</name></name> <operator pos:start="407:24" pos:end="407:24">=</operator> <name pos:start="407:26" pos:end="407:30">eaddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:20"><expr pos:start="409:13" pos:end="409:19"><name pos:start="409:13" pos:end="409:15">ret</name> <operator pos:start="409:17" pos:end="409:17">=</operator> <literal type="number" pos:start="409:19" pos:end="409:19">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="411:11" pos:end="415:9">else <block pos:start="411:16" pos:end="415:9">{<block_content pos:start="413:13" pos:end="413:21">

            <expr_stmt pos:start="413:13" pos:end="413:21"><expr pos:start="413:13" pos:end="413:20"><name pos:start="413:13" pos:end="413:15">ret</name> <operator pos:start="413:17" pos:end="413:17">=</operator> <operator pos:start="413:19" pos:end="413:19">-</operator><literal type="number" pos:start="413:20" pos:end="413:20">2</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="421:5" pos:end="421:15">return <expr pos:start="421:12" pos:end="421:14"><name pos:start="421:12" pos:end="421:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
