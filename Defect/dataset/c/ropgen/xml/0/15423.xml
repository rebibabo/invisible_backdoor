<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15423.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:38">do_perform_cow</name><parameter_list pos:start="1:39" pos:end="9:49">(<parameter pos:start="1:40" pos:end="1:59"><decl pos:start="1:40" pos:end="1:59"><type pos:start="1:40" pos:end="1:59"><name pos:start="1:40" pos:end="1:55">BlockDriverState</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">bs</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:66"><decl pos:start="3:40" pos:end="3:66"><type pos:start="3:40" pos:end="3:66"><name pos:start="3:40" pos:end="3:47">uint64_t</name></type> <name pos:start="3:49" pos:end="3:66">src_cluster_offset</name></decl></parameter>,

                                       <parameter pos:start="5:40" pos:end="5:62"><decl pos:start="5:40" pos:end="5:62"><type pos:start="5:40" pos:end="5:62"><name pos:start="5:40" pos:end="5:47">uint64_t</name></type> <name pos:start="5:49" pos:end="5:62">cluster_offset</name></decl></parameter>,

                                       <parameter pos:start="7:40" pos:end="7:60"><decl pos:start="7:40" pos:end="7:60"><type pos:start="7:40" pos:end="7:60"><name pos:start="7:40" pos:end="7:42">int</name></type> <name pos:start="7:44" pos:end="7:60">offset_in_cluster</name></decl></parameter>,

                                       <parameter pos:start="9:40" pos:end="9:48"><decl pos:start="9:40" pos:end="9:48"><type pos:start="9:40" pos:end="9:48"><name pos:start="9:40" pos:end="9:42">int</name></type> <name pos:start="9:44" pos:end="9:48">bytes</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="137:1">{<block_content pos:start="13:5" pos:end="135:15">

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">BDRVQcow2State</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name> <init pos:start="13:23" pos:end="13:34">= <expr pos:start="13:25" pos:end="13:34"><name pos:start="13:25" pos:end="13:34"><name pos:start="13:25" pos:end="13:26">bs</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">QEMUIOVector</name></type> <name pos:start="15:18" pos:end="15:21">qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:16">iovec</name></name></type> <name pos:start="17:18" pos:end="17:20">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:24"><expr pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:7">iov</name><operator pos:start="23:8" pos:end="23:8">.</operator><name pos:start="23:9" pos:end="23:15">iov_len</name></name> <operator pos:start="23:17" pos:end="23:17">=</operator> <name pos:start="23:19" pos:end="23:23">bytes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:56"><expr pos:start="25:5" pos:end="25:55"><name pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:7">iov</name><operator pos:start="25:8" pos:end="25:8">.</operator><name pos:start="25:9" pos:end="25:16">iov_base</name></name> <operator pos:start="25:18" pos:end="25:18">=</operator> <call pos:start="25:20" pos:end="25:55"><name pos:start="25:20" pos:end="25:38">qemu_try_blockalign</name><argument_list pos:start="25:39" pos:end="25:55">(<argument pos:start="25:40" pos:end="25:41"><expr pos:start="25:40" pos:end="25:41"><name pos:start="25:40" pos:end="25:41">bs</name></expr></argument>, <argument pos:start="25:44" pos:end="25:54"><expr pos:start="25:44" pos:end="25:54"><name pos:start="25:44" pos:end="25:54"><name pos:start="25:44" pos:end="25:46">iov</name><operator pos:start="25:47" pos:end="25:47">.</operator><name pos:start="25:48" pos:end="25:54">iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:29">(<expr pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:11">iov</name><operator pos:start="27:12" pos:end="27:12">.</operator><name pos:start="27:13" pos:end="27:20">iov_base</name></name> <operator pos:start="27:22" pos:end="27:23">==</operator> <name pos:start="27:25" pos:end="27:28">NULL</name></expr>)</condition> <block pos:start="27:31" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:23">

        <return pos:start="29:9" pos:end="29:23">return <expr pos:start="29:16" pos:end="29:22"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:45"><expr pos:start="35:5" pos:end="35:44"><call pos:start="35:5" pos:end="35:44"><name pos:start="35:5" pos:end="35:28">qemu_iovec_init_external</name><argument_list pos:start="35:29" pos:end="35:44">(<argument pos:start="35:30" pos:end="35:34"><expr pos:start="35:30" pos:end="35:34"><operator pos:start="35:30" pos:end="35:30">&amp;</operator><name pos:start="35:31" pos:end="35:34">qiov</name></expr></argument>, <argument pos:start="35:37" pos:end="35:40"><expr pos:start="35:37" pos:end="35:40"><operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:40">iov</name></expr></argument>, <argument pos:start="35:43" pos:end="35:43"><expr pos:start="35:43" pos:end="35:43"><literal type="number" pos:start="35:43" pos:end="35:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:44"><expr pos:start="39:5" pos:end="39:43"><call pos:start="39:5" pos:end="39:43"><name pos:start="39:5" pos:end="39:16">BLKDBG_EVENT</name><argument_list pos:start="39:17" pos:end="39:43">(<argument pos:start="39:18" pos:end="39:25"><expr pos:start="39:18" pos:end="39:25"><name pos:start="39:18" pos:end="39:25"><name pos:start="39:18" pos:end="39:19">bs</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:25">file</name></name></expr></argument>, <argument pos:start="39:28" pos:end="39:42"><expr pos:start="39:28" pos:end="39:42"><name pos:start="39:28" pos:end="39:42">BLKDBG_COW_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:17">(<expr pos:start="43:9" pos:end="43:16"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:16"><name pos:start="43:10" pos:end="43:11">bs</name><operator pos:start="43:12" pos:end="43:13">-&gt;</operator><name pos:start="43:14" pos:end="43:16">drv</name></name></expr>)</condition> <block pos:start="43:19" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:17">

        <expr_stmt pos:start="45:9" pos:end="45:25"><expr pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <operator pos:start="45:15" pos:end="45:15">-</operator><name pos:start="45:16" pos:end="45:24">ENOMEDIUM</name></expr>;</expr_stmt>

        <goto pos:start="47:9" pos:end="47:17">goto <name pos:start="47:14" pos:end="47:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="59:7">/* Call .bdrv_co_readv() directly instead of using the public block-layer

     * interface.  This avoids double I/O throttling and request tracking,

     * which can lead to deadlock when block layer copy-on-read is enabled.

     */</comment>

    <expr_stmt pos:start="61:5" pos:end="63:51"><expr pos:start="61:5" pos:end="63:50"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="63:50"><name pos:start="61:11" pos:end="61:33"><name pos:start="61:11" pos:end="61:12">bs</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:17">drv</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:33">bdrv_co_preadv</name></name><argument_list pos:start="61:34" pos:end="63:50">(<argument pos:start="61:35" pos:end="61:36"><expr pos:start="61:35" pos:end="61:36"><name pos:start="61:35" pos:end="61:36">bs</name></expr></argument>, <argument pos:start="61:39" pos:end="61:76"><expr pos:start="61:39" pos:end="61:76"><name pos:start="61:39" pos:end="61:56">src_cluster_offset</name> <operator pos:start="61:58" pos:end="61:58">+</operator> <name pos:start="61:60" pos:end="61:76">offset_in_cluster</name></expr></argument>,

                                  <argument pos:start="63:35" pos:end="63:39"><expr pos:start="63:35" pos:end="63:39"><name pos:start="63:35" pos:end="63:39">bytes</name></expr></argument>, <argument pos:start="63:42" pos:end="63:46"><expr pos:start="63:42" pos:end="63:46"><operator pos:start="63:42" pos:end="63:42">&amp;</operator><name pos:start="63:43" pos:end="63:46">qiov</name></expr></argument>, <argument pos:start="63:49" pos:end="63:49"><expr pos:start="63:49" pos:end="63:49"><literal type="number" pos:start="63:49" pos:end="63:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:16">(<expr pos:start="65:9" pos:end="65:15"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">&lt;</operator> <literal type="number" pos:start="65:15" pos:end="65:15">0</literal></expr>)</condition> <block pos:start="65:18" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:17">

        <goto pos:start="67:9" pos:end="67:17">goto <name pos:start="67:14" pos:end="67:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="99:5"><if pos:start="73:5" pos:end="99:5">if <condition pos:start="73:8" pos:end="73:22">(<expr pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:10">bs</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:21">encrypted</name></name></expr>)</condition> <block pos:start="73:24" pos:end="99:5">{<block_content pos:start="75:9" pos:end="97:9">

        <decl_stmt pos:start="75:9" pos:end="75:26"><decl pos:start="75:9" pos:end="75:25"><type pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:13">Error</name> <modifier pos:start="75:15" pos:end="75:15">*</modifier></type><name pos:start="75:16" pos:end="75:18">err</name> <init pos:start="75:20" pos:end="75:25">= <expr pos:start="75:22" pos:end="75:25"><name pos:start="75:22" pos:end="75:25">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="77:9" pos:end="79:45"><decl pos:start="77:9" pos:end="79:44"><type pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:15">int64_t</name></type> <name pos:start="77:17" pos:end="77:22">sector</name> <init pos:start="77:24" pos:end="79:44">= <expr pos:start="77:26" pos:end="79:44"><operator pos:start="77:26" pos:end="77:26">(</operator><name pos:start="77:27" pos:end="77:40">cluster_offset</name> <operator pos:start="77:42" pos:end="77:42">+</operator> <name pos:start="77:44" pos:end="77:60">offset_in_cluster</name><operator pos:start="77:61" pos:end="77:61">)</operator>

                         <operator pos:start="79:26" pos:end="79:27">&gt;&gt;</operator> <name pos:start="79:29" pos:end="79:44">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><call pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:14">assert</name><argument_list pos:start="81:15" pos:end="81:25">(<argument pos:start="81:16" pos:end="81:24"><expr pos:start="81:16" pos:end="81:24"><name pos:start="81:16" pos:end="81:24"><name pos:start="81:16" pos:end="81:16">s</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:24">cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:61"><expr pos:start="83:9" pos:end="83:60"><call pos:start="83:9" pos:end="83:60"><name pos:start="83:9" pos:end="83:14">assert</name><argument_list pos:start="83:15" pos:end="83:60">(<argument pos:start="83:16" pos:end="83:59"><expr pos:start="83:16" pos:end="83:59"><operator pos:start="83:16" pos:end="83:16">(</operator><name pos:start="83:17" pos:end="83:33">offset_in_cluster</name> <operator pos:start="83:35" pos:end="83:35">&amp;</operator> <operator pos:start="83:37" pos:end="83:37">~</operator><name pos:start="83:38" pos:end="83:53">BDRV_SECTOR_MASK</name><operator pos:start="83:54" pos:end="83:54">)</operator> <operator pos:start="83:56" pos:end="83:57">==</operator> <literal type="number" pos:start="83:59" pos:end="83:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:49"><expr pos:start="85:9" pos:end="85:48"><call pos:start="85:9" pos:end="85:48"><name pos:start="85:9" pos:end="85:14">assert</name><argument_list pos:start="85:15" pos:end="85:48">(<argument pos:start="85:16" pos:end="85:47"><expr pos:start="85:16" pos:end="85:47"><operator pos:start="85:16" pos:end="85:16">(</operator><name pos:start="85:17" pos:end="85:21">bytes</name> <operator pos:start="85:23" pos:end="85:23">&amp;</operator> <operator pos:start="85:25" pos:end="85:25">~</operator><name pos:start="85:26" pos:end="85:41">BDRV_SECTOR_MASK</name><operator pos:start="85:42" pos:end="85:42">)</operator> <operator pos:start="85:44" pos:end="85:45">==</operator> <literal type="number" pos:start="85:47" pos:end="85:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="97:9"><if pos:start="87:9" pos:end="97:9">if <condition pos:start="87:12" pos:end="89:77">(<expr pos:start="87:13" pos:end="89:76"><call pos:start="87:13" pos:end="89:72"><name pos:start="87:13" pos:end="87:33">qcow2_encrypt_sectors</name><argument_list pos:start="87:34" pos:end="89:72">(<argument pos:start="87:35" pos:end="87:35"><expr pos:start="87:35" pos:end="87:35"><name pos:start="87:35" pos:end="87:35">s</name></expr></argument>, <argument pos:start="87:38" pos:end="87:43"><expr pos:start="87:38" pos:end="87:43"><name pos:start="87:38" pos:end="87:43">sector</name></expr></argument>, <argument pos:start="87:46" pos:end="87:57"><expr pos:start="87:46" pos:end="87:57"><name pos:start="87:46" pos:end="87:57"><name pos:start="87:46" pos:end="87:48">iov</name><operator pos:start="87:49" pos:end="87:49">.</operator><name pos:start="87:50" pos:end="87:57">iov_base</name></name></expr></argument>, <argument pos:start="87:60" pos:end="87:71"><expr pos:start="87:60" pos:end="87:71"><name pos:start="87:60" pos:end="87:71"><name pos:start="87:60" pos:end="87:62">iov</name><operator pos:start="87:63" pos:end="87:63">.</operator><name pos:start="87:64" pos:end="87:71">iov_base</name></name></expr></argument>,

                                  <argument pos:start="89:35" pos:end="89:59"><expr pos:start="89:35" pos:end="89:59"><name pos:start="89:35" pos:end="89:39">bytes</name> <operator pos:start="89:41" pos:end="89:42">&gt;&gt;</operator> <name pos:start="89:44" pos:end="89:59">BDRV_SECTOR_BITS</name></expr></argument>, <argument pos:start="89:62" pos:end="89:65"><expr pos:start="89:62" pos:end="89:65"><name pos:start="89:62" pos:end="89:65">true</name></expr></argument>, <argument pos:start="89:68" pos:end="89:71"><expr pos:start="89:68" pos:end="89:71"><operator pos:start="89:68" pos:end="89:68">&amp;</operator><name pos:start="89:69" pos:end="89:71">err</name></expr></argument>)</argument_list></call> <operator pos:start="89:74" pos:end="89:74">&lt;</operator> <literal type="number" pos:start="89:76" pos:end="89:76">0</literal></expr>)</condition> <block pos:start="89:79" pos:end="97:9">{<block_content pos:start="91:13" pos:end="95:21">

            <expr_stmt pos:start="91:13" pos:end="91:23"><expr pos:start="91:13" pos:end="91:22"><name pos:start="91:13" pos:end="91:15">ret</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <operator pos:start="91:19" pos:end="91:19">-</operator><name pos:start="91:20" pos:end="91:22">EIO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:28"><expr pos:start="93:13" pos:end="93:27"><call pos:start="93:13" pos:end="93:27"><name pos:start="93:13" pos:end="93:22">error_free</name><argument_list pos:start="93:23" pos:end="93:27">(<argument pos:start="93:24" pos:end="93:26"><expr pos:start="93:24" pos:end="93:26"><name pos:start="93:24" pos:end="93:26">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="95:13" pos:end="95:21">goto <name pos:start="95:18" pos:end="95:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="105:55"><expr pos:start="103:5" pos:end="105:54"><name pos:start="103:5" pos:end="103:7">ret</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="105:54"><name pos:start="103:11" pos:end="103:39">qcow2_pre_write_overlap_check</name><argument_list pos:start="103:40" pos:end="105:54">(<argument pos:start="103:41" pos:end="103:42"><expr pos:start="103:41" pos:end="103:42"><name pos:start="103:41" pos:end="103:42">bs</name></expr></argument>, <argument pos:start="103:45" pos:end="103:45"><expr pos:start="103:45" pos:end="103:45"><literal type="number" pos:start="103:45" pos:end="103:45">0</literal></expr></argument>,

            <argument pos:start="105:13" pos:end="105:46"><expr pos:start="105:13" pos:end="105:46"><name pos:start="105:13" pos:end="105:26">cluster_offset</name> <operator pos:start="105:28" pos:end="105:28">+</operator> <name pos:start="105:30" pos:end="105:46">offset_in_cluster</name></expr></argument>, <argument pos:start="105:49" pos:end="105:53"><expr pos:start="105:49" pos:end="105:53"><name pos:start="105:49" pos:end="105:53">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:16">(<expr pos:start="107:9" pos:end="107:15"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">&lt;</operator> <literal type="number" pos:start="107:15" pos:end="107:15">0</literal></expr>)</condition> <block pos:start="107:18" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:17">

        <goto pos:start="109:9" pos:end="109:17">goto <name pos:start="109:14" pos:end="109:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:45"><expr pos:start="115:5" pos:end="115:44"><call pos:start="115:5" pos:end="115:44"><name pos:start="115:5" pos:end="115:16">BLKDBG_EVENT</name><argument_list pos:start="115:17" pos:end="115:44">(<argument pos:start="115:18" pos:end="115:25"><expr pos:start="115:18" pos:end="115:25"><name pos:start="115:18" pos:end="115:25"><name pos:start="115:18" pos:end="115:19">bs</name><operator pos:start="115:20" pos:end="115:21">-&gt;</operator><name pos:start="115:22" pos:end="115:25">file</name></name></expr></argument>, <argument pos:start="115:28" pos:end="115:43"><expr pos:start="115:28" pos:end="115:43"><name pos:start="115:28" pos:end="115:43">BLKDBG_COW_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="119:43"><expr pos:start="117:5" pos:end="119:42"><name pos:start="117:5" pos:end="117:7">ret</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="119:42"><name pos:start="117:11" pos:end="117:25">bdrv_co_pwritev</name><argument_list pos:start="117:26" pos:end="119:42">(<argument pos:start="117:27" pos:end="117:38"><expr pos:start="117:27" pos:end="117:38"><name pos:start="117:27" pos:end="117:38"><name pos:start="117:27" pos:end="117:28">bs</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:34">file</name><operator pos:start="117:35" pos:end="117:36">-&gt;</operator><name pos:start="117:37" pos:end="117:38">bs</name></name></expr></argument>, <argument pos:start="117:41" pos:end="117:74"><expr pos:start="117:41" pos:end="117:74"><name pos:start="117:41" pos:end="117:54">cluster_offset</name> <operator pos:start="117:56" pos:end="117:56">+</operator> <name pos:start="117:58" pos:end="117:74">offset_in_cluster</name></expr></argument>,

                          <argument pos:start="119:27" pos:end="119:31"><expr pos:start="119:27" pos:end="119:31"><name pos:start="119:27" pos:end="119:31">bytes</name></expr></argument>, <argument pos:start="119:34" pos:end="119:38"><expr pos:start="119:34" pos:end="119:38"><operator pos:start="119:34" pos:end="119:34">&amp;</operator><name pos:start="119:35" pos:end="119:38">qiov</name></expr></argument>, <argument pos:start="119:41" pos:end="119:41"><expr pos:start="119:41" pos:end="119:41"><literal type="number" pos:start="119:41" pos:end="119:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:16">(<expr pos:start="121:9" pos:end="121:15"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">&lt;</operator> <literal type="number" pos:start="121:15" pos:end="121:15">0</literal></expr>)</condition> <block pos:start="121:18" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:17">

        <goto pos:start="123:9" pos:end="123:17">goto <name pos:start="123:14" pos:end="123:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:12"><expr pos:start="129:5" pos:end="129:11"><name pos:start="129:5" pos:end="129:7">ret</name> <operator pos:start="129:9" pos:end="129:9">=</operator> <literal type="number" pos:start="129:11" pos:end="129:11">0</literal></expr>;</expr_stmt>

<label pos:start="131:1" pos:end="131:4"><name pos:start="131:1" pos:end="131:3">out</name>:</label>

    <expr_stmt pos:start="133:5" pos:end="133:29"><expr pos:start="133:5" pos:end="133:28"><call pos:start="133:5" pos:end="133:28"><name pos:start="133:5" pos:end="133:14">qemu_vfree</name><argument_list pos:start="133:15" pos:end="133:28">(<argument pos:start="133:16" pos:end="133:27"><expr pos:start="133:16" pos:end="133:27"><name pos:start="133:16" pos:end="133:27"><name pos:start="133:16" pos:end="133:18">iov</name><operator pos:start="133:19" pos:end="133:19">.</operator><name pos:start="133:20" pos:end="133:27">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="135:5" pos:end="135:15">return <expr pos:start="135:12" pos:end="135:14"><name pos:start="135:12" pos:end="135:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
