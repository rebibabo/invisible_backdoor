<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15569.c" pos:tabs="8"><function pos:start="1:1" pos:end="237:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="3:40">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:57"><decl pos:start="1:48" pos:end="1:57"><type pos:start="1:48" pos:end="1:57"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">data</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:62">int</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:73">data_size</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:39"><decl pos:start="3:25" pos:end="3:39"><type pos:start="3:25" pos:end="3:39"><name pos:start="3:25" pos:end="3:32">AVPacket</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:39">avpkt</name></decl></parameter>)</parameter_list> <block pos:start="3:42" pos:end="237:1">{<block_content pos:start="5:5" pos:end="235:21">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">buf</name> <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:30">avpkt</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">buf_size</name> <init pos:start="7:18" pos:end="7:30">= <expr pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:30"><name pos:start="7:20" pos:end="7:24">avpkt</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">NuvContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">c</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:25">avctx</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">picture</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">orig_size</name> <init pos:start="13:19" pos:end="13:28">= <expr pos:start="13:21" pos:end="13:28"><name pos:start="13:21" pos:end="13:28">buf_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:16">keyframe</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">result</name></decl>;</decl_stmt>

    <enum pos:start="19:5" pos:end="23:57">enum <block pos:start="19:10" pos:end="23:47">{<decl pos:start="19:11" pos:end="19:32"><name pos:start="19:11" pos:end="19:26">NUV_UNCOMPRESSED</name> <init pos:start="19:28" pos:end="19:32">= <expr pos:start="19:30" pos:end="19:32"><literal type="char" pos:start="19:30" pos:end="19:32">'0'</literal></expr></init></decl>, <decl pos:start="19:35" pos:end="19:50"><name pos:start="19:35" pos:end="19:44">NUV_RTJPEG</name> <init pos:start="19:46" pos:end="19:50">= <expr pos:start="19:48" pos:end="19:50"><literal type="char" pos:start="19:48" pos:end="19:50">'1'</literal></expr></init></decl>,

          <decl pos:start="21:11" pos:end="21:33"><name pos:start="21:11" pos:end="21:27">NUV_RTJPEG_IN_LZO</name> <init pos:start="21:29" pos:end="21:33">= <expr pos:start="21:31" pos:end="21:33"><literal type="char" pos:start="21:31" pos:end="21:33">'2'</literal></expr></init></decl>, <decl pos:start="21:36" pos:end="21:48"><name pos:start="21:36" pos:end="21:42">NUV_LZO</name> <init pos:start="21:44" pos:end="21:48">= <expr pos:start="21:46" pos:end="21:48"><literal type="char" pos:start="21:46" pos:end="21:48">'3'</literal></expr></init></decl>,

          <decl pos:start="23:11" pos:end="23:25"><name pos:start="23:11" pos:end="23:19">NUV_BLACK</name> <init pos:start="23:21" pos:end="23:25">= <expr pos:start="23:23" pos:end="23:25"><literal type="char" pos:start="23:23" pos:end="23:25">'N'</literal></expr></init></decl>, <decl pos:start="23:28" pos:end="23:46"><name pos:start="23:28" pos:end="23:40">NUV_COPY_LAST</name> <init pos:start="23:42" pos:end="23:46">= <expr pos:start="23:44" pos:end="23:46"><literal type="char" pos:start="23:44" pos:end="23:46">'L'</literal></expr></init></decl>}</block> <decl pos:start="23:49" pos:end="23:56"><name pos:start="23:49" pos:end="23:56">comptype</name></decl>;</enum>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:22">(<expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:16">buf_size</name> <operator pos:start="27:18" pos:end="27:18">&lt;</operator> <literal type="number" pos:start="27:20" pos:end="27:21">12</literal></expr>)</condition> <block pos:start="27:24" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:63"><expr pos:start="29:9" pos:end="29:62"><call pos:start="29:9" pos:end="29:62"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:62">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:61"><expr pos:start="29:37" pos:end="29:61"><literal type="string" pos:start="29:37" pos:end="29:61">"coded frame too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="37:5" pos:end="37:39">// codec data (rtjpeg quant tables)</comment>

    <if_stmt pos:start="39:5" pos:end="59:5"><if pos:start="39:5" pos:end="59:5">if <condition pos:start="39:8" pos:end="39:39">(<expr pos:start="39:9" pos:end="39:38"><name pos:start="39:9" pos:end="39:14"><name pos:start="39:9" pos:end="39:11">buf</name><index pos:start="39:12" pos:end="39:14">[<expr pos:start="39:13" pos:end="39:13"><literal type="number" pos:start="39:13" pos:end="39:13">0</literal></expr>]</index></name> <operator pos:start="39:16" pos:end="39:17">==</operator> <literal type="char" pos:start="39:19" pos:end="39:21">'D'</literal> <operator pos:start="39:23" pos:end="39:24">&amp;&amp;</operator> <name pos:start="39:26" pos:end="39:31"><name pos:start="39:26" pos:end="39:28">buf</name><index pos:start="39:29" pos:end="39:31">[<expr pos:start="39:30" pos:end="39:30"><literal type="number" pos:start="39:30" pos:end="39:30">1</literal></expr>]</index></name> <operator pos:start="39:33" pos:end="39:34">==</operator> <literal type="char" pos:start="39:36" pos:end="39:38">'R'</literal></expr>)</condition> <block pos:start="39:41" pos:end="59:5">{<block_content pos:start="41:9" pos:end="57:25">

        <decl_stmt pos:start="41:9" pos:end="41:16"><decl pos:start="41:9" pos:end="41:15"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:15">ret</name></decl>;</decl_stmt>

        <comment type="line" pos:start="43:9" pos:end="43:40">// skip rest of the frameheader.</comment>

        <expr_stmt pos:start="45:9" pos:end="45:23"><expr pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:11">buf</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <operator pos:start="45:15" pos:end="45:15">&amp;</operator><name pos:start="45:16" pos:end="45:22"><name pos:start="45:16" pos:end="45:18">buf</name><index pos:start="45:19" pos:end="45:22">[<expr pos:start="45:20" pos:end="45:21"><literal type="number" pos:start="45:20" pos:end="45:21">12</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:23"><expr pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:16">buf_size</name> <operator pos:start="47:18" pos:end="47:19">-=</operator> <literal type="number" pos:start="47:21" pos:end="47:22">12</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:49"><expr pos:start="49:9" pos:end="49:48"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:48"><name pos:start="49:15" pos:end="49:23">get_quant</name><argument_list pos:start="49:24" pos:end="49:48">(<argument pos:start="49:25" pos:end="49:29"><expr pos:start="49:25" pos:end="49:29"><name pos:start="49:25" pos:end="49:29">avctx</name></expr></argument>, <argument pos:start="49:32" pos:end="49:32"><expr pos:start="49:32" pos:end="49:32"><name pos:start="49:32" pos:end="49:32">c</name></expr></argument>, <argument pos:start="49:35" pos:end="49:37"><expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:37">buf</name></expr></argument>, <argument pos:start="49:40" pos:end="49:47"><expr pos:start="49:40" pos:end="49:47"><name pos:start="49:40" pos:end="49:47">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="53:23"><if pos:start="51:9" pos:end="53:23">if <condition pos:start="51:12" pos:end="51:20">(<expr pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">&lt;</operator> <literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:23"><block_content pos:start="53:13" pos:end="53:23">

            <return pos:start="53:13" pos:end="53:23">return <expr pos:start="53:20" pos:end="53:22"><name pos:start="53:20" pos:end="53:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:83"><expr pos:start="55:9" pos:end="55:82"><call pos:start="55:9" pos:end="55:82"><name pos:start="55:9" pos:end="55:29">ff_rtjpeg_decode_init</name><argument_list pos:start="55:30" pos:end="55:82">(<argument pos:start="55:31" pos:end="55:37"><expr pos:start="55:31" pos:end="55:37"><operator pos:start="55:31" pos:end="55:31">&amp;</operator><name pos:start="55:32" pos:end="55:37"><name pos:start="55:32" pos:end="55:32">c</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:37">rtj</name></name></expr></argument>, <argument pos:start="55:40" pos:end="55:46"><expr pos:start="55:40" pos:end="55:46"><operator pos:start="55:40" pos:end="55:40">&amp;</operator><name pos:start="55:41" pos:end="55:46"><name pos:start="55:41" pos:end="55:41">c</name><operator pos:start="55:42" pos:end="55:43">-&gt;</operator><name pos:start="55:44" pos:end="55:46">dsp</name></name></expr></argument>, <argument pos:start="55:49" pos:end="55:56"><expr pos:start="55:49" pos:end="55:56"><name pos:start="55:49" pos:end="55:56"><name pos:start="55:49" pos:end="55:49">c</name><operator pos:start="55:50" pos:end="55:51">-&gt;</operator><name pos:start="55:52" pos:end="55:56">width</name></name></expr></argument>, <argument pos:start="55:59" pos:end="55:67"><expr pos:start="55:59" pos:end="55:67"><name pos:start="55:59" pos:end="55:67"><name pos:start="55:59" pos:end="55:59">c</name><operator pos:start="55:60" pos:end="55:61">-&gt;</operator><name pos:start="55:62" pos:end="55:67">height</name></name></expr></argument>, <argument pos:start="55:70" pos:end="55:74"><expr pos:start="55:70" pos:end="55:74"><name pos:start="55:70" pos:end="55:74"><name pos:start="55:70" pos:end="55:70">c</name><operator pos:start="55:71" pos:end="55:72">-&gt;</operator><name pos:start="55:73" pos:end="55:74">lq</name></name></expr></argument>, <argument pos:start="55:77" pos:end="55:81"><expr pos:start="55:77" pos:end="55:81"><name pos:start="55:77" pos:end="55:81"><name pos:start="55:77" pos:end="55:77">c</name><operator pos:start="55:78" pos:end="55:79">-&gt;</operator><name pos:start="55:80" pos:end="55:81">cq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:25">return <expr pos:start="57:16" pos:end="57:24"><name pos:start="57:16" pos:end="57:24">orig_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:39">(<expr pos:start="63:9" pos:end="63:38"><name pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:11">buf</name><index pos:start="63:12" pos:end="63:14">[<expr pos:start="63:13" pos:end="63:13"><literal type="number" pos:start="63:13" pos:end="63:13">0</literal></expr>]</index></name> <operator pos:start="63:16" pos:end="63:17">!=</operator> <literal type="char" pos:start="63:19" pos:end="63:21">'V'</literal> <operator pos:start="63:23" pos:end="63:24">||</operator> <name pos:start="63:26" pos:end="63:33">buf_size</name> <operator pos:start="63:35" pos:end="63:35">&lt;</operator> <literal type="number" pos:start="63:37" pos:end="63:38">12</literal></expr>)</condition> <block pos:start="63:41" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:18">

        <expr_stmt pos:start="65:9" pos:end="65:63"><expr pos:start="65:9" pos:end="65:62"><call pos:start="65:9" pos:end="65:62"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:62">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:34"><expr pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:37" pos:end="65:61"><expr pos:start="65:37" pos:end="65:61"><literal type="string" pos:start="65:37" pos:end="65:61">"not a nuv video frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:22"><expr pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:12">comptype</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <name pos:start="71:16" pos:end="71:21"><name pos:start="71:16" pos:end="71:18">buf</name><index pos:start="71:19" pos:end="71:21">[<expr pos:start="71:20" pos:end="71:20"><literal type="number" pos:start="71:20" pos:end="71:20">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <switch pos:start="73:5" pos:end="89:5">switch <condition pos:start="73:12" pos:end="73:21">(<expr pos:start="73:13" pos:end="73:20"><name pos:start="73:13" pos:end="73:20">comptype</name></expr>)</condition> <block pos:start="73:23" pos:end="89:5">{<block_content pos:start="75:9" pos:end="87:32">

        <case pos:start="75:9" pos:end="75:31">case <expr pos:start="75:14" pos:end="75:30"><name pos:start="75:14" pos:end="75:30">NUV_RTJPEG_IN_LZO</name></expr>:</case>

        <case pos:start="77:9" pos:end="77:24">case <expr pos:start="77:14" pos:end="77:23"><name pos:start="77:14" pos:end="77:23">NUV_RTJPEG</name></expr>:</case>

            <expr_stmt pos:start="79:13" pos:end="79:31"><expr pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:20">keyframe</name> <operator pos:start="79:22" pos:end="79:22">=</operator> <operator pos:start="79:24" pos:end="79:24">!</operator><name pos:start="79:25" pos:end="79:30"><name pos:start="79:25" pos:end="79:27">buf</name><index pos:start="79:28" pos:end="79:30">[<expr pos:start="79:29" pos:end="79:29"><literal type="number" pos:start="79:29" pos:end="79:29">2</literal></expr>]</index></name></expr>;</expr_stmt> <break pos:start="79:33" pos:end="79:38">break;</break>

        <case pos:start="81:9" pos:end="81:27">case <expr pos:start="81:14" pos:end="81:26"><name pos:start="81:14" pos:end="81:26">NUV_COPY_LAST</name></expr>:</case>

            <expr_stmt pos:start="83:13" pos:end="83:25"><expr pos:start="83:13" pos:end="83:24"><name pos:start="83:13" pos:end="83:20">keyframe</name> <operator pos:start="83:22" pos:end="83:22">=</operator> <literal type="number" pos:start="83:24" pos:end="83:24">0</literal></expr>;</expr_stmt> <break pos:start="83:27" pos:end="83:32">break;</break>

        <default pos:start="85:9" pos:end="85:16">default:</default>

            <expr_stmt pos:start="87:13" pos:end="87:25"><expr pos:start="87:13" pos:end="87:24"><name pos:start="87:13" pos:end="87:20">keyframe</name> <operator pos:start="87:22" pos:end="87:22">=</operator> <literal type="number" pos:start="87:24" pos:end="87:24">1</literal></expr>;</expr_stmt> <break pos:start="87:27" pos:end="87:32">break;</break>

    </block_content>}</block></switch>

    <comment type="line" pos:start="91:5" pos:end="91:36">// skip rest of the frameheader.</comment>

    <expr_stmt pos:start="93:5" pos:end="93:19"><expr pos:start="93:5" pos:end="93:18"><name pos:start="93:5" pos:end="93:7">buf</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <operator pos:start="93:11" pos:end="93:11">&amp;</operator><name pos:start="93:12" pos:end="93:18"><name pos:start="93:12" pos:end="93:14">buf</name><index pos:start="93:15" pos:end="93:18">[<expr pos:start="93:16" pos:end="93:17"><literal type="number" pos:start="93:16" pos:end="93:17">12</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:19"><expr pos:start="95:5" pos:end="95:18"><name pos:start="95:5" pos:end="95:12">buf_size</name> <operator pos:start="95:14" pos:end="95:15">-=</operator> <literal type="number" pos:start="95:17" pos:end="95:18">12</literal></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="109:5"><if pos:start="97:5" pos:end="109:5">if <condition pos:start="97:8" pos:end="97:61">(<expr pos:start="97:9" pos:end="97:60"><name pos:start="97:9" pos:end="97:16">comptype</name> <operator pos:start="97:18" pos:end="97:19">==</operator> <name pos:start="97:21" pos:end="97:37">NUV_RTJPEG_IN_LZO</name> <operator pos:start="97:39" pos:end="97:40">||</operator> <name pos:start="97:42" pos:end="97:49">comptype</name> <operator pos:start="97:51" pos:end="97:52">==</operator> <name pos:start="97:54" pos:end="97:60">NUV_LZO</name></expr>)</condition> <block pos:start="97:63" pos:end="109:5">{<block_content pos:start="99:9" pos:end="107:34">

        <decl_stmt pos:start="99:9" pos:end="99:54"><decl pos:start="99:9" pos:end="99:35"><type pos:start="99:9" pos:end="99:11"><name pos:start="99:9" pos:end="99:11">int</name></type> <name pos:start="99:13" pos:end="99:18">outlen</name> <init pos:start="99:20" pos:end="99:35">= <expr pos:start="99:22" pos:end="99:35"><name pos:start="99:22" pos:end="99:35"><name pos:start="99:22" pos:end="99:22">c</name><operator pos:start="99:23" pos:end="99:24">-&gt;</operator><name pos:start="99:25" pos:end="99:35">decomp_size</name></name></expr></init></decl>, <decl pos:start="99:38" pos:end="99:53"><type ref="prev" pos:start="99:9" pos:end="99:11"/><name pos:start="99:38" pos:end="99:42">inlen</name> <init pos:start="99:44" pos:end="99:53">= <expr pos:start="99:46" pos:end="99:53"><name pos:start="99:46" pos:end="99:53">buf_size</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="101:9" pos:end="103:76"><if pos:start="101:9" pos:end="103:76">if <condition pos:start="101:12" pos:end="101:65">(<expr pos:start="101:13" pos:end="101:64"><call pos:start="101:13" pos:end="101:64"><name pos:start="101:13" pos:end="101:27">av_lzo1x_decode</name><argument_list pos:start="101:28" pos:end="101:64">(<argument pos:start="101:29" pos:end="101:41"><expr pos:start="101:29" pos:end="101:41"><name pos:start="101:29" pos:end="101:41"><name pos:start="101:29" pos:end="101:29">c</name><operator pos:start="101:30" pos:end="101:31">-&gt;</operator><name pos:start="101:32" pos:end="101:41">decomp_buf</name></name></expr></argument>, <argument pos:start="101:44" pos:end="101:50"><expr pos:start="101:44" pos:end="101:50"><operator pos:start="101:44" pos:end="101:44">&amp;</operator><name pos:start="101:45" pos:end="101:50">outlen</name></expr></argument>, <argument pos:start="101:53" pos:end="101:55"><expr pos:start="101:53" pos:end="101:55"><name pos:start="101:53" pos:end="101:55">buf</name></expr></argument>, <argument pos:start="101:58" pos:end="101:63"><expr pos:start="101:58" pos:end="101:63"><operator pos:start="101:58" pos:end="101:58">&amp;</operator><name pos:start="101:59" pos:end="101:63">inlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:76"><block_content pos:start="103:13" pos:end="103:76">

            <expr_stmt pos:start="103:13" pos:end="103:76"><expr pos:start="103:13" pos:end="103:75"><call pos:start="103:13" pos:end="103:75"><name pos:start="103:13" pos:end="103:18">av_log</name><argument_list pos:start="103:19" pos:end="103:75">(<argument pos:start="103:20" pos:end="103:24"><expr pos:start="103:20" pos:end="103:24"><name pos:start="103:20" pos:end="103:24">avctx</name></expr></argument>, <argument pos:start="103:27" pos:end="103:38"><expr pos:start="103:27" pos:end="103:38"><name pos:start="103:27" pos:end="103:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:41" pos:end="103:74"><expr pos:start="103:41" pos:end="103:74"><literal type="string" pos:start="103:41" pos:end="103:74">"error during lzo decompression\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:28"><expr pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:11">buf</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <name pos:start="105:15" pos:end="105:27"><name pos:start="105:15" pos:end="105:15">c</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:27">decomp_buf</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:34"><expr pos:start="107:9" pos:end="107:33"><name pos:start="107:9" pos:end="107:16">buf_size</name> <operator pos:start="107:18" pos:end="107:18">=</operator> <name pos:start="107:20" pos:end="107:33"><name pos:start="107:20" pos:end="107:20">c</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:33">decomp_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="111:5" pos:end="137:5"><if pos:start="111:5" pos:end="137:5">if <condition pos:start="111:8" pos:end="111:29">(<expr pos:start="111:9" pos:end="111:28"><name pos:start="111:9" pos:end="111:28"><name pos:start="111:9" pos:end="111:9">c</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:28">codec_frameheader</name></name></expr>)</condition> <block pos:start="111:31" pos:end="137:5">{<block_content pos:start="113:9" pos:end="135:23">

        <decl_stmt pos:start="113:9" pos:end="113:20"><decl pos:start="113:9" pos:end="113:13"><type pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">int</name></type> <name pos:start="113:13" pos:end="113:13">w</name></decl>, <decl pos:start="113:16" pos:end="113:16"><type ref="prev" pos:start="113:9" pos:end="113:11"/><name pos:start="113:16" pos:end="113:16">h</name></decl>, <decl pos:start="113:19" pos:end="113:19"><type ref="prev" pos:start="113:9" pos:end="113:11"/><name pos:start="113:19" pos:end="113:19">q</name></decl>;</decl_stmt>

        <if_stmt pos:start="115:9" pos:end="121:9"><if pos:start="115:9" pos:end="121:9">if <condition pos:start="115:12" pos:end="115:26">(<expr pos:start="115:13" pos:end="115:25"><name pos:start="115:13" pos:end="115:20">buf_size</name> <operator pos:start="115:22" pos:end="115:22">&lt;</operator> <literal type="number" pos:start="115:24" pos:end="115:25">12</literal></expr>)</condition> <block pos:start="115:28" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:22">

            <expr_stmt pos:start="117:13" pos:end="117:69"><expr pos:start="117:13" pos:end="117:68"><call pos:start="117:13" pos:end="117:68"><name pos:start="117:13" pos:end="117:18">av_log</name><argument_list pos:start="117:19" pos:end="117:68">(<argument pos:start="117:20" pos:end="117:24"><expr pos:start="117:20" pos:end="117:24"><name pos:start="117:20" pos:end="117:24">avctx</name></expr></argument>, <argument pos:start="117:27" pos:end="117:38"><expr pos:start="117:27" pos:end="117:38"><name pos:start="117:27" pos:end="117:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:41" pos:end="117:67"><expr pos:start="117:41" pos:end="117:67"><literal type="string" pos:start="117:41" pos:end="117:67">"invalid nuv video frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:22">return <expr pos:start="119:20" pos:end="119:21"><operator pos:start="119:20" pos:end="119:20">-</operator><literal type="number" pos:start="119:21" pos:end="119:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:29"><expr pos:start="123:9" pos:end="123:28"><name pos:start="123:9" pos:end="123:9">w</name> <operator pos:start="123:11" pos:end="123:11">=</operator> <call pos:start="123:13" pos:end="123:28"><name pos:start="123:13" pos:end="123:19">AV_RL16</name><argument_list pos:start="123:20" pos:end="123:28">(<argument pos:start="123:21" pos:end="123:27"><expr pos:start="123:21" pos:end="123:27"><operator pos:start="123:21" pos:end="123:21">&amp;</operator><name pos:start="123:22" pos:end="123:27"><name pos:start="123:22" pos:end="123:24">buf</name><index pos:start="123:25" pos:end="123:27">[<expr pos:start="123:26" pos:end="123:26"><literal type="number" pos:start="123:26" pos:end="123:26">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:29"><expr pos:start="125:9" pos:end="125:28"><name pos:start="125:9" pos:end="125:9">h</name> <operator pos:start="125:11" pos:end="125:11">=</operator> <call pos:start="125:13" pos:end="125:28"><name pos:start="125:13" pos:end="125:19">AV_RL16</name><argument_list pos:start="125:20" pos:end="125:28">(<argument pos:start="125:21" pos:end="125:27"><expr pos:start="125:21" pos:end="125:27"><operator pos:start="125:21" pos:end="125:21">&amp;</operator><name pos:start="125:22" pos:end="125:27"><name pos:start="125:22" pos:end="125:24">buf</name><index pos:start="125:25" pos:end="125:27">[<expr pos:start="125:26" pos:end="125:26"><literal type="number" pos:start="125:26" pos:end="125:26">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:20"><expr pos:start="127:9" pos:end="127:19"><name pos:start="127:9" pos:end="127:9">q</name> <operator pos:start="127:11" pos:end="127:11">=</operator> <name pos:start="127:13" pos:end="127:19"><name pos:start="127:13" pos:end="127:15">buf</name><index pos:start="127:16" pos:end="127:19">[<expr pos:start="127:17" pos:end="127:18"><literal type="number" pos:start="127:17" pos:end="127:18">10</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="131:22"><if pos:start="129:9" pos:end="131:22">if <condition pos:start="129:12" pos:end="129:42">(<expr pos:start="129:13" pos:end="129:41"><operator pos:start="129:13" pos:end="129:13">!</operator><call pos:start="129:14" pos:end="129:41"><name pos:start="129:14" pos:end="129:25">codec_reinit</name><argument_list pos:start="129:26" pos:end="129:41">(<argument pos:start="129:27" pos:end="129:31"><expr pos:start="129:27" pos:end="129:31"><name pos:start="129:27" pos:end="129:31">avctx</name></expr></argument>, <argument pos:start="129:34" pos:end="129:34"><expr pos:start="129:34" pos:end="129:34"><name pos:start="129:34" pos:end="129:34">w</name></expr></argument>, <argument pos:start="129:37" pos:end="129:37"><expr pos:start="129:37" pos:end="129:37"><name pos:start="129:37" pos:end="129:37">h</name></expr></argument>, <argument pos:start="129:40" pos:end="129:40"><expr pos:start="129:40" pos:end="129:40"><name pos:start="129:40" pos:end="129:40">q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:22"><block_content pos:start="131:13" pos:end="131:22">

            <return pos:start="131:13" pos:end="131:22">return <expr pos:start="131:20" pos:end="131:21"><operator pos:start="131:20" pos:end="131:20">-</operator><literal type="number" pos:start="131:21" pos:end="131:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:23"><expr pos:start="133:9" pos:end="133:22"><name pos:start="133:9" pos:end="133:11">buf</name> <operator pos:start="133:13" pos:end="133:13">=</operator> <operator pos:start="133:15" pos:end="133:15">&amp;</operator><name pos:start="133:16" pos:end="133:22"><name pos:start="133:16" pos:end="133:18">buf</name><index pos:start="133:19" pos:end="133:22">[<expr pos:start="133:20" pos:end="133:21"><literal type="number" pos:start="133:20" pos:end="133:21">12</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:23"><expr pos:start="135:9" pos:end="135:22"><name pos:start="135:9" pos:end="135:16">buf_size</name> <operator pos:start="135:18" pos:end="135:19">-=</operator> <literal type="number" pos:start="135:21" pos:end="135:22">12</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="141:5" pos:end="143:46"><if pos:start="141:5" pos:end="143:46">if <condition pos:start="141:8" pos:end="141:35">(<expr pos:start="141:9" pos:end="141:34"><name pos:start="141:9" pos:end="141:16">keyframe</name> <operator pos:start="141:18" pos:end="141:19">&amp;&amp;</operator> <name pos:start="141:21" pos:end="141:34"><name pos:start="141:21" pos:end="141:21">c</name><operator pos:start="141:22" pos:end="141:23">-&gt;</operator><name pos:start="141:24" pos:end="141:26">pic</name><operator pos:start="141:27" pos:end="141:27">.</operator><name pos:start="141:28" pos:end="141:31">data</name><index pos:start="141:32" pos:end="141:34">[<expr pos:start="141:33" pos:end="141:33"><literal type="number" pos:start="141:33" pos:end="141:33">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="143:9" pos:end="143:46"><block_content pos:start="143:9" pos:end="143:46">

        <expr_stmt pos:start="143:9" pos:end="143:46"><expr pos:start="143:9" pos:end="143:45"><call pos:start="143:9" pos:end="143:45"><name pos:start="143:9" pos:end="143:29"><name pos:start="143:9" pos:end="143:13">avctx</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:29">release_buffer</name></name><argument_list pos:start="143:30" pos:end="143:45">(<argument pos:start="143:31" pos:end="143:35"><expr pos:start="143:31" pos:end="143:35"><name pos:start="143:31" pos:end="143:35">avctx</name></expr></argument>, <argument pos:start="143:38" pos:end="143:44"><expr pos:start="143:38" pos:end="143:44"><operator pos:start="143:38" pos:end="143:38">&amp;</operator><name pos:start="143:39" pos:end="143:44"><name pos:start="143:39" pos:end="143:39">c</name><operator pos:start="143:40" pos:end="143:41">-&gt;</operator><name pos:start="143:42" pos:end="143:44">pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:25"><expr pos:start="145:5" pos:end="145:24"><name pos:start="145:5" pos:end="145:20"><name pos:start="145:5" pos:end="145:5">c</name><operator pos:start="145:6" pos:end="145:7">-&gt;</operator><name pos:start="145:8" pos:end="145:10">pic</name><operator pos:start="145:11" pos:end="145:11">.</operator><name pos:start="145:12" pos:end="145:20">reference</name></name> <operator pos:start="145:22" pos:end="145:22">=</operator> <literal type="number" pos:start="145:24" pos:end="145:24">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="149:78"><expr pos:start="147:5" pos:end="149:77"><name pos:start="147:5" pos:end="147:23"><name pos:start="147:5" pos:end="147:5">c</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:10">pic</name><operator pos:start="147:11" pos:end="147:11">.</operator><name pos:start="147:12" pos:end="147:23">buffer_hints</name></name> <operator pos:start="147:25" pos:end="147:25">=</operator> <name pos:start="147:27" pos:end="147:47">FF_BUFFER_HINTS_VALID</name> <operator pos:start="147:49" pos:end="147:49">|</operator> <name pos:start="147:51" pos:end="147:74">FF_BUFFER_HINTS_READABLE</name> <operator pos:start="147:76" pos:end="147:76">|</operator>

                          <name pos:start="149:27" pos:end="149:50">FF_BUFFER_HINTS_PRESERVE</name> <operator pos:start="149:52" pos:end="149:52">|</operator> <name pos:start="149:54" pos:end="149:77">FF_BUFFER_HINTS_REUSABLE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:49"><expr pos:start="151:5" pos:end="151:48"><name pos:start="151:5" pos:end="151:10">result</name> <operator pos:start="151:12" pos:end="151:12">=</operator> <call pos:start="151:14" pos:end="151:48"><name pos:start="151:14" pos:end="151:32"><name pos:start="151:14" pos:end="151:18">avctx</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:32">reget_buffer</name></name><argument_list pos:start="151:33" pos:end="151:48">(<argument pos:start="151:34" pos:end="151:38"><expr pos:start="151:34" pos:end="151:38"><name pos:start="151:34" pos:end="151:38">avctx</name></expr></argument>, <argument pos:start="151:41" pos:end="151:47"><expr pos:start="151:41" pos:end="151:47"><operator pos:start="151:41" pos:end="151:41">&amp;</operator><name pos:start="151:42" pos:end="151:47"><name pos:start="151:42" pos:end="151:42">c</name><operator pos:start="151:43" pos:end="151:44">-&gt;</operator><name pos:start="151:45" pos:end="151:47">pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="159:5"><if pos:start="153:5" pos:end="159:5">if <condition pos:start="153:8" pos:end="153:19">(<expr pos:start="153:9" pos:end="153:18"><name pos:start="153:9" pos:end="153:14">result</name> <operator pos:start="153:16" pos:end="153:16">&lt;</operator> <literal type="number" pos:start="153:18" pos:end="153:18">0</literal></expr>)</condition> <block pos:start="153:21" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:18">

        <expr_stmt pos:start="155:9" pos:end="155:61"><expr pos:start="155:9" pos:end="155:60"><call pos:start="155:9" pos:end="155:60"><name pos:start="155:9" pos:end="155:14">av_log</name><argument_list pos:start="155:15" pos:end="155:60">(<argument pos:start="155:16" pos:end="155:20"><expr pos:start="155:16" pos:end="155:20"><name pos:start="155:16" pos:end="155:20">avctx</name></expr></argument>, <argument pos:start="155:23" pos:end="155:34"><expr pos:start="155:23" pos:end="155:34"><name pos:start="155:23" pos:end="155:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="155:37" pos:end="155:59"><expr pos:start="155:37" pos:end="155:59"><literal type="string" pos:start="155:37" pos:end="155:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="157:9" pos:end="157:18">return <expr pos:start="157:16" pos:end="157:17"><operator pos:start="157:16" pos:end="157:16">-</operator><literal type="number" pos:start="157:17" pos:end="157:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:72"><expr pos:start="163:5" pos:end="163:71"><name pos:start="163:5" pos:end="163:20"><name pos:start="163:5" pos:end="163:5">c</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:10">pic</name><operator pos:start="163:11" pos:end="163:11">.</operator><name pos:start="163:12" pos:end="163:20">pict_type</name></name> <operator pos:start="163:22" pos:end="163:22">=</operator> <ternary pos:start="163:24" pos:end="163:71"><condition pos:start="163:24" pos:end="163:33"><expr pos:start="163:24" pos:end="163:31"><name pos:start="163:24" pos:end="163:31">keyframe</name></expr> ?</condition><then pos:start="163:35" pos:end="163:51"> <expr pos:start="163:35" pos:end="163:51"><name pos:start="163:35" pos:end="163:51">AV_PICTURE_TYPE_I</name></expr> </then><else pos:start="163:53" pos:end="163:71">: <expr pos:start="163:55" pos:end="163:71"><name pos:start="163:55" pos:end="163:71">AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:32"><expr pos:start="165:5" pos:end="165:31"><name pos:start="165:5" pos:end="165:20"><name pos:start="165:5" pos:end="165:5">c</name><operator pos:start="165:6" pos:end="165:7">-&gt;</operator><name pos:start="165:8" pos:end="165:10">pic</name><operator pos:start="165:11" pos:end="165:11">.</operator><name pos:start="165:12" pos:end="165:20">key_frame</name></name> <operator pos:start="165:22" pos:end="165:22">=</operator> <name pos:start="165:24" pos:end="165:31">keyframe</name></expr>;</expr_stmt>

    <comment type="line" pos:start="167:5" pos:end="167:36">// decompress/copy/whatever data</comment>

    <switch pos:start="169:5" pos:end="227:5">switch <condition pos:start="169:12" pos:end="169:21">(<expr pos:start="169:13" pos:end="169:20"><name pos:start="169:13" pos:end="169:20">comptype</name></expr>)</condition> <block pos:start="169:23" pos:end="227:5">{<block_content pos:start="171:9" pos:end="225:22">

        <case pos:start="171:9" pos:end="171:21">case <expr pos:start="171:14" pos:end="171:20"><name pos:start="171:14" pos:end="171:20">NUV_LZO</name></expr>:</case>

        <case pos:start="173:9" pos:end="173:30">case <expr pos:start="173:14" pos:end="173:29"><name pos:start="173:14" pos:end="173:29">NUV_UNCOMPRESSED</name></expr>:</case> <block pos:start="173:32" pos:end="189:9">{<block_content pos:start="175:13" pos:end="187:18">

            <decl_stmt pos:start="175:13" pos:end="175:35"><decl pos:start="175:13" pos:end="175:34"><type pos:start="175:13" pos:end="175:15"><name pos:start="175:13" pos:end="175:15">int</name></type> <name pos:start="175:17" pos:end="175:22">height</name> <init pos:start="175:24" pos:end="175:34">= <expr pos:start="175:26" pos:end="175:34"><name pos:start="175:26" pos:end="175:34"><name pos:start="175:26" pos:end="175:26">c</name><operator pos:start="175:27" pos:end="175:28">-&gt;</operator><name pos:start="175:29" pos:end="175:34">height</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="177:13" pos:end="183:13"><if pos:start="177:13" pos:end="183:13">if <condition pos:start="177:16" pos:end="177:53">(<expr pos:start="177:17" pos:end="177:52"><name pos:start="177:17" pos:end="177:24">buf_size</name> <operator pos:start="177:26" pos:end="177:26">&lt;</operator> <name pos:start="177:28" pos:end="177:35"><name pos:start="177:28" pos:end="177:28">c</name><operator pos:start="177:29" pos:end="177:30">-&gt;</operator><name pos:start="177:31" pos:end="177:35">width</name></name> <operator pos:start="177:37" pos:end="177:37">*</operator> <name pos:start="177:39" pos:end="177:44">height</name> <operator pos:start="177:46" pos:end="177:46">*</operator> <literal type="number" pos:start="177:48" pos:end="177:48">3</literal> <operator pos:start="177:50" pos:end="177:50">/</operator> <literal type="number" pos:start="177:52" pos:end="177:52">2</literal></expr>)</condition> <block pos:start="177:55" pos:end="183:13">{<block_content pos:start="179:17" pos:end="181:53">

                <expr_stmt pos:start="179:17" pos:end="179:78"><expr pos:start="179:17" pos:end="179:77"><call pos:start="179:17" pos:end="179:77"><name pos:start="179:17" pos:end="179:22">av_log</name><argument_list pos:start="179:23" pos:end="179:77">(<argument pos:start="179:24" pos:end="179:28"><expr pos:start="179:24" pos:end="179:28"><name pos:start="179:24" pos:end="179:28">avctx</name></expr></argument>, <argument pos:start="179:31" pos:end="179:42"><expr pos:start="179:31" pos:end="179:42"><name pos:start="179:31" pos:end="179:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="179:45" pos:end="179:76"><expr pos:start="179:45" pos:end="179:76"><literal type="string" pos:start="179:45" pos:end="179:76">"uncompressed frame too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:53"><expr pos:start="181:17" pos:end="181:52"><name pos:start="181:17" pos:end="181:22">height</name> <operator pos:start="181:24" pos:end="181:24">=</operator> <name pos:start="181:26" pos:end="181:33">buf_size</name> <operator pos:start="181:35" pos:end="181:35">/</operator> <name pos:start="181:37" pos:end="181:44"><name pos:start="181:37" pos:end="181:37">c</name><operator pos:start="181:38" pos:end="181:39">-&gt;</operator><name pos:start="181:40" pos:end="181:44">width</name></name> <operator pos:start="181:46" pos:end="181:46">/</operator> <literal type="number" pos:start="181:48" pos:end="181:48">3</literal> <operator pos:start="181:50" pos:end="181:50">*</operator> <literal type="number" pos:start="181:52" pos:end="181:52">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:55"><expr pos:start="185:13" pos:end="185:54"><call pos:start="185:13" pos:end="185:54"><name pos:start="185:13" pos:end="185:22">copy_frame</name><argument_list pos:start="185:23" pos:end="185:54">(<argument pos:start="185:24" pos:end="185:30"><expr pos:start="185:24" pos:end="185:30"><operator pos:start="185:24" pos:end="185:24">&amp;</operator><name pos:start="185:25" pos:end="185:30"><name pos:start="185:25" pos:end="185:25">c</name><operator pos:start="185:26" pos:end="185:27">-&gt;</operator><name pos:start="185:28" pos:end="185:30">pic</name></name></expr></argument>, <argument pos:start="185:33" pos:end="185:35"><expr pos:start="185:33" pos:end="185:35"><name pos:start="185:33" pos:end="185:35">buf</name></expr></argument>, <argument pos:start="185:38" pos:end="185:45"><expr pos:start="185:38" pos:end="185:45"><name pos:start="185:38" pos:end="185:45"><name pos:start="185:38" pos:end="185:38">c</name><operator pos:start="185:39" pos:end="185:40">-&gt;</operator><name pos:start="185:41" pos:end="185:45">width</name></name></expr></argument>, <argument pos:start="185:48" pos:end="185:53"><expr pos:start="185:48" pos:end="185:53"><name pos:start="185:48" pos:end="185:53">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        </block_content>}</block>

        <case pos:start="191:9" pos:end="191:31">case <expr pos:start="191:14" pos:end="191:30"><name pos:start="191:14" pos:end="191:30">NUV_RTJPEG_IN_LZO</name></expr>:</case>

        <case pos:start="193:9" pos:end="193:24">case <expr pos:start="193:14" pos:end="193:23"><name pos:start="193:14" pos:end="193:23">NUV_RTJPEG</name></expr>:</case> <block pos:start="193:26" pos:end="199:9">{<block_content pos:start="195:13" pos:end="197:18">

            <expr_stmt pos:start="195:13" pos:end="195:75"><expr pos:start="195:13" pos:end="195:74"><call pos:start="195:13" pos:end="195:74"><name pos:start="195:13" pos:end="195:41">ff_rtjpeg_decode_frame_yuv420</name><argument_list pos:start="195:42" pos:end="195:74">(<argument pos:start="195:43" pos:end="195:49"><expr pos:start="195:43" pos:end="195:49"><operator pos:start="195:43" pos:end="195:43">&amp;</operator><name pos:start="195:44" pos:end="195:49"><name pos:start="195:44" pos:end="195:44">c</name><operator pos:start="195:45" pos:end="195:46">-&gt;</operator><name pos:start="195:47" pos:end="195:49">rtj</name></name></expr></argument>, <argument pos:start="195:52" pos:end="195:58"><expr pos:start="195:52" pos:end="195:58"><operator pos:start="195:52" pos:end="195:52">&amp;</operator><name pos:start="195:53" pos:end="195:58"><name pos:start="195:53" pos:end="195:53">c</name><operator pos:start="195:54" pos:end="195:55">-&gt;</operator><name pos:start="195:56" pos:end="195:58">pic</name></name></expr></argument>, <argument pos:start="195:61" pos:end="195:63"><expr pos:start="195:61" pos:end="195:63"><name pos:start="195:61" pos:end="195:63">buf</name></expr></argument>, <argument pos:start="195:66" pos:end="195:73"><expr pos:start="195:66" pos:end="195:73"><name pos:start="195:66" pos:end="195:73">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="197:13" pos:end="197:18">break;</break>

        </block_content>}</block>

        <case pos:start="201:9" pos:end="201:23">case <expr pos:start="201:14" pos:end="201:22"><name pos:start="201:14" pos:end="201:22">NUV_BLACK</name></expr>:</case> <block pos:start="201:25" pos:end="211:9">{<block_content pos:start="203:13" pos:end="209:18">

            <expr_stmt pos:start="203:13" pos:end="203:60"><expr pos:start="203:13" pos:end="203:59"><call pos:start="203:13" pos:end="203:59"><name pos:start="203:13" pos:end="203:18">memset</name><argument_list pos:start="203:19" pos:end="203:59">(<argument pos:start="203:20" pos:end="203:33"><expr pos:start="203:20" pos:end="203:33"><name pos:start="203:20" pos:end="203:33"><name pos:start="203:20" pos:end="203:20">c</name><operator pos:start="203:21" pos:end="203:22">-&gt;</operator><name pos:start="203:23" pos:end="203:25">pic</name><operator pos:start="203:26" pos:end="203:26">.</operator><name pos:start="203:27" pos:end="203:30">data</name><index pos:start="203:31" pos:end="203:33">[<expr pos:start="203:32" pos:end="203:32"><literal type="number" pos:start="203:32" pos:end="203:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="203:36" pos:end="203:36"><expr pos:start="203:36" pos:end="203:36"><literal type="number" pos:start="203:36" pos:end="203:36">0</literal></expr></argument>, <argument pos:start="203:39" pos:end="203:58"><expr pos:start="203:39" pos:end="203:58"><name pos:start="203:39" pos:end="203:46"><name pos:start="203:39" pos:end="203:39">c</name><operator pos:start="203:40" pos:end="203:41">-&gt;</operator><name pos:start="203:42" pos:end="203:46">width</name></name> <operator pos:start="203:48" pos:end="203:48">*</operator> <name pos:start="203:50" pos:end="203:58"><name pos:start="203:50" pos:end="203:50">c</name><operator pos:start="203:51" pos:end="203:52">-&gt;</operator><name pos:start="203:53" pos:end="203:58">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:66"><expr pos:start="205:13" pos:end="205:65"><call pos:start="205:13" pos:end="205:65"><name pos:start="205:13" pos:end="205:18">memset</name><argument_list pos:start="205:19" pos:end="205:65">(<argument pos:start="205:20" pos:end="205:33"><expr pos:start="205:20" pos:end="205:33"><name pos:start="205:20" pos:end="205:33"><name pos:start="205:20" pos:end="205:20">c</name><operator pos:start="205:21" pos:end="205:22">-&gt;</operator><name pos:start="205:23" pos:end="205:25">pic</name><operator pos:start="205:26" pos:end="205:26">.</operator><name pos:start="205:27" pos:end="205:30">data</name><index pos:start="205:31" pos:end="205:33">[<expr pos:start="205:32" pos:end="205:32"><literal type="number" pos:start="205:32" pos:end="205:32">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="205:36" pos:end="205:38"><expr pos:start="205:36" pos:end="205:38"><literal type="number" pos:start="205:36" pos:end="205:38">128</literal></expr></argument>, <argument pos:start="205:41" pos:end="205:64"><expr pos:start="205:41" pos:end="205:64"><name pos:start="205:41" pos:end="205:48"><name pos:start="205:41" pos:end="205:41">c</name><operator pos:start="205:42" pos:end="205:43">-&gt;</operator><name pos:start="205:44" pos:end="205:48">width</name></name> <operator pos:start="205:50" pos:end="205:50">*</operator> <name pos:start="205:52" pos:end="205:60"><name pos:start="205:52" pos:end="205:52">c</name><operator pos:start="205:53" pos:end="205:54">-&gt;</operator><name pos:start="205:55" pos:end="205:60">height</name></name> <operator pos:start="205:62" pos:end="205:62">/</operator> <literal type="number" pos:start="205:64" pos:end="205:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:66"><expr pos:start="207:13" pos:end="207:65"><call pos:start="207:13" pos:end="207:65"><name pos:start="207:13" pos:end="207:18">memset</name><argument_list pos:start="207:19" pos:end="207:65">(<argument pos:start="207:20" pos:end="207:33"><expr pos:start="207:20" pos:end="207:33"><name pos:start="207:20" pos:end="207:33"><name pos:start="207:20" pos:end="207:20">c</name><operator pos:start="207:21" pos:end="207:22">-&gt;</operator><name pos:start="207:23" pos:end="207:25">pic</name><operator pos:start="207:26" pos:end="207:26">.</operator><name pos:start="207:27" pos:end="207:30">data</name><index pos:start="207:31" pos:end="207:33">[<expr pos:start="207:32" pos:end="207:32"><literal type="number" pos:start="207:32" pos:end="207:32">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="207:36" pos:end="207:38"><expr pos:start="207:36" pos:end="207:38"><literal type="number" pos:start="207:36" pos:end="207:38">128</literal></expr></argument>, <argument pos:start="207:41" pos:end="207:64"><expr pos:start="207:41" pos:end="207:64"><name pos:start="207:41" pos:end="207:48"><name pos:start="207:41" pos:end="207:41">c</name><operator pos:start="207:42" pos:end="207:43">-&gt;</operator><name pos:start="207:44" pos:end="207:48">width</name></name> <operator pos:start="207:50" pos:end="207:50">*</operator> <name pos:start="207:52" pos:end="207:60"><name pos:start="207:52" pos:end="207:52">c</name><operator pos:start="207:53" pos:end="207:54">-&gt;</operator><name pos:start="207:55" pos:end="207:60">height</name></name> <operator pos:start="207:62" pos:end="207:62">/</operator> <literal type="number" pos:start="207:64" pos:end="207:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="209:13" pos:end="209:18">break;</break>

        </block_content>}</block>

        <case pos:start="213:9" pos:end="213:27">case <expr pos:start="213:14" pos:end="213:26"><name pos:start="213:14" pos:end="213:26">NUV_COPY_LAST</name></expr>:</case> <block pos:start="213:29" pos:end="219:9">{<block_content pos:start="217:13" pos:end="217:18">

            <comment type="block" pos:start="215:13" pos:end="215:41">/* nothing more to do here */</comment>

            <break pos:start="217:13" pos:end="217:18">break;</break>

        </block_content>}</block>

        <default pos:start="221:9" pos:end="221:16">default:</default>

            <expr_stmt pos:start="223:13" pos:end="223:65"><expr pos:start="223:13" pos:end="223:64"><call pos:start="223:13" pos:end="223:64"><name pos:start="223:13" pos:end="223:18">av_log</name><argument_list pos:start="223:19" pos:end="223:64">(<argument pos:start="223:20" pos:end="223:24"><expr pos:start="223:20" pos:end="223:24"><name pos:start="223:20" pos:end="223:24">avctx</name></expr></argument>, <argument pos:start="223:27" pos:end="223:38"><expr pos:start="223:27" pos:end="223:38"><name pos:start="223:27" pos:end="223:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="223:41" pos:end="223:63"><expr pos:start="223:41" pos:end="223:63"><literal type="string" pos:start="223:41" pos:end="223:63">"unknown compression\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="225:13" pos:end="225:22">return <expr pos:start="225:20" pos:end="225:21"><operator pos:start="225:20" pos:end="225:20">-</operator><literal type="number" pos:start="225:21" pos:end="225:21">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="231:5" pos:end="231:22"><expr pos:start="231:5" pos:end="231:21"><operator pos:start="231:5" pos:end="231:5">*</operator><name pos:start="231:6" pos:end="231:12">picture</name> <operator pos:start="231:14" pos:end="231:14">=</operator> <name pos:start="231:16" pos:end="231:21"><name pos:start="231:16" pos:end="231:16">c</name><operator pos:start="231:17" pos:end="231:18">-&gt;</operator><name pos:start="231:19" pos:end="231:21">pic</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:33"><expr pos:start="233:5" pos:end="233:32"><operator pos:start="233:5" pos:end="233:5">*</operator><name pos:start="233:6" pos:end="233:14">data_size</name> <operator pos:start="233:16" pos:end="233:16">=</operator> <sizeof pos:start="233:18" pos:end="233:32">sizeof<argument_list pos:start="233:24" pos:end="233:32">(<argument pos:start="233:25" pos:end="233:31"><expr pos:start="233:25" pos:end="233:31"><name pos:start="233:25" pos:end="233:31">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <return pos:start="235:5" pos:end="235:21">return <expr pos:start="235:12" pos:end="235:20"><name pos:start="235:12" pos:end="235:20">orig_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
