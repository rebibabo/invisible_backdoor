<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14787.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">vapic_map_rom_writable</name><parameter_list pos:start="1:35" pos:end="1:52">(<parameter pos:start="1:36" pos:end="1:51"><decl pos:start="1:36" pos:end="1:51"><type pos:start="1:36" pos:end="1:50"><name pos:start="1:36" pos:end="1:48">VAPICROMState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:34">

    <decl_stmt pos:start="5:5" pos:end="5:71"><decl pos:start="5:5" pos:end="5:70"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22">target_phys_addr_t</name></type> <name pos:start="5:24" pos:end="5:32">rom_paddr</name> <init pos:start="5:34" pos:end="5:70">= <expr pos:start="5:36" pos:end="5:70"><name pos:start="5:36" pos:end="5:53"><name pos:start="5:36" pos:end="5:36">s</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:53">rom_state_paddr</name></name> <operator pos:start="5:55" pos:end="5:55">&amp;</operator> <name pos:start="5:57" pos:end="5:70">ROM_BLOCK_MASK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:23">MemoryRegionSection</name></type> <name pos:start="7:25" pos:end="7:31">section</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">MemoryRegion</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:20">as</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:19">rom_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">ram</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:42"><expr pos:start="17:5" pos:end="17:41"><name pos:start="17:5" pos:end="17:6">as</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <call pos:start="17:10" pos:end="17:41"><name pos:start="17:10" pos:end="17:29">sysbus_address_space</name><argument_list pos:start="17:30" pos:end="17:41">(<argument pos:start="17:31" pos:end="17:40"><expr pos:start="17:31" pos:end="17:40"><operator pos:start="17:31" pos:end="17:31">&amp;</operator><name pos:start="17:32" pos:end="17:40"><name pos:start="17:32" pos:end="17:32">s</name><operator pos:start="17:33" pos:end="17:34">-&gt;</operator><name pos:start="17:35" pos:end="17:40">busdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:31">(<expr pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:30"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:30">rom_mapped_writable</name></name></expr>)</condition> <block pos:start="21:33" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:39">

        <expr_stmt pos:start="23:9" pos:end="23:49"><expr pos:start="23:9" pos:end="23:48"><call pos:start="23:9" pos:end="23:48"><name pos:start="23:9" pos:end="23:35">memory_region_del_subregion</name><argument_list pos:start="23:36" pos:end="23:48">(<argument pos:start="23:37" pos:end="23:38"><expr pos:start="23:37" pos:end="23:38"><name pos:start="23:37" pos:end="23:38">as</name></expr></argument>, <argument pos:start="23:41" pos:end="23:47"><expr pos:start="23:41" pos:end="23:47"><operator pos:start="23:41" pos:end="23:41">&amp;</operator><name pos:start="23:42" pos:end="23:47"><name pos:start="23:42" pos:end="23:42">s</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:47">rom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:39"><expr pos:start="25:9" pos:end="25:38"><call pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:29">memory_region_destroy</name><argument_list pos:start="25:30" pos:end="25:38">(<argument pos:start="25:31" pos:end="25:37"><expr pos:start="25:31" pos:end="25:37"><operator pos:start="25:31" pos:end="25:31">&amp;</operator><name pos:start="25:32" pos:end="25:37"><name pos:start="25:32" pos:end="25:32">s</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:37">rom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:72">/* grab RAM memory region (region @rom_paddr may still be pc.rom) */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:11">section</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:42"><name pos:start="33:15" pos:end="33:32">memory_region_find</name><argument_list pos:start="33:33" pos:end="33:42">(<argument pos:start="33:34" pos:end="33:35"><expr pos:start="33:34" pos:end="33:35"><name pos:start="33:34" pos:end="33:35">as</name></expr></argument>, <argument pos:start="33:38" pos:end="33:38"><expr pos:start="33:38" pos:end="33:38"><literal type="number" pos:start="33:38" pos:end="33:38">0</literal></expr></argument>, <argument pos:start="33:41" pos:end="33:41"><expr pos:start="33:41" pos:end="33:41"><literal type="number" pos:start="33:41" pos:end="33:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:39">/* read ROM size from RAM region */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:48"><expr pos:start="39:5" pos:end="39:47"><name pos:start="39:5" pos:end="39:7">ram</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:47"><name pos:start="39:11" pos:end="39:35">memory_region_get_ram_ptr</name><argument_list pos:start="39:36" pos:end="39:47">(<argument pos:start="39:37" pos:end="39:46"><expr pos:start="39:37" pos:end="39:46"><name pos:start="39:37" pos:end="39:46"><name pos:start="39:37" pos:end="39:43">section</name><operator pos:start="39:44" pos:end="39:44">.</operator><name pos:start="39:45" pos:end="39:46">mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:51"><expr pos:start="41:5" pos:end="41:50"><name pos:start="41:5" pos:end="41:12">rom_size</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <name pos:start="41:16" pos:end="41:33"><name pos:start="41:16" pos:end="41:18">ram</name><index pos:start="41:19" pos:end="41:33">[<expr pos:start="41:20" pos:end="41:32"><name pos:start="41:20" pos:end="41:28">rom_paddr</name> <operator pos:start="41:30" pos:end="41:30">+</operator> <literal type="number" pos:start="41:32" pos:end="41:32">2</literal></expr>]</index></name> <operator pos:start="41:35" pos:end="41:35">*</operator> <name pos:start="41:37" pos:end="41:50">ROM_BLOCK_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:27"><expr pos:start="43:5" pos:end="43:26"><name pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:15">rom_size</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <name pos:start="43:19" pos:end="43:26">rom_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="49:40">/* We need to round to avoid creating subpages

     * from which we cannot run code. */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:46"><expr pos:start="51:5" pos:end="51:45"><name pos:start="51:5" pos:end="51:12">rom_size</name> <operator pos:start="51:14" pos:end="51:15">+=</operator> <name pos:start="51:17" pos:end="51:25">rom_paddr</name> <operator pos:start="51:27" pos:end="51:27">&amp;</operator> <operator pos:start="51:29" pos:end="51:29">~</operator><name pos:start="51:30" pos:end="51:45">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:34"><expr pos:start="53:5" pos:end="53:33"><name pos:start="53:5" pos:end="53:13">rom_paddr</name> <operator pos:start="53:15" pos:end="53:16">&amp;=</operator> <name pos:start="53:18" pos:end="53:33">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:43"><expr pos:start="55:5" pos:end="55:42"><name pos:start="55:5" pos:end="55:12">rom_size</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <call pos:start="55:16" pos:end="55:42"><name pos:start="55:16" pos:end="55:32">TARGET_PAGE_ALIGN</name><argument_list pos:start="55:33" pos:end="55:42">(<argument pos:start="55:34" pos:end="55:41"><expr pos:start="55:34" pos:end="55:41"><name pos:start="55:34" pos:end="55:41">rom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="61:39"><expr pos:start="59:5" pos:end="61:38"><call pos:start="59:5" pos:end="61:38"><name pos:start="59:5" pos:end="59:28">memory_region_init_alias</name><argument_list pos:start="59:29" pos:end="61:38">(<argument pos:start="59:30" pos:end="59:36"><expr pos:start="59:30" pos:end="59:36"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:36"><name pos:start="59:31" pos:end="59:31">s</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:36">rom</name></name></expr></argument>, <argument pos:start="59:39" pos:end="59:52"><expr pos:start="59:39" pos:end="59:52"><literal type="string" pos:start="59:39" pos:end="59:52">"kvmvapic-rom"</literal></expr></argument>, <argument pos:start="59:55" pos:end="59:64"><expr pos:start="59:55" pos:end="59:64"><name pos:start="59:55" pos:end="59:64"><name pos:start="59:55" pos:end="59:61">section</name><operator pos:start="59:62" pos:end="59:62">.</operator><name pos:start="59:63" pos:end="59:64">mr</name></name></expr></argument>, <argument pos:start="59:67" pos:end="59:75"><expr pos:start="59:67" pos:end="59:75"><name pos:start="59:67" pos:end="59:75">rom_paddr</name></expr></argument>,

                             <argument pos:start="61:30" pos:end="61:37"><expr pos:start="61:30" pos:end="61:37"><name pos:start="61:30" pos:end="61:37">rom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:70"><expr pos:start="63:5" pos:end="63:69"><call pos:start="63:5" pos:end="63:69"><name pos:start="63:5" pos:end="63:39">memory_region_add_subregion_overlap</name><argument_list pos:start="63:40" pos:end="63:69">(<argument pos:start="63:41" pos:end="63:42"><expr pos:start="63:41" pos:end="63:42"><name pos:start="63:41" pos:end="63:42">as</name></expr></argument>, <argument pos:start="63:45" pos:end="63:53"><expr pos:start="63:45" pos:end="63:53"><name pos:start="63:45" pos:end="63:53">rom_paddr</name></expr></argument>, <argument pos:start="63:56" pos:end="63:62"><expr pos:start="63:56" pos:end="63:62"><operator pos:start="63:56" pos:end="63:56">&amp;</operator><name pos:start="63:57" pos:end="63:62"><name pos:start="63:57" pos:end="63:57">s</name><operator pos:start="63:58" pos:end="63:59">-&gt;</operator><name pos:start="63:60" pos:end="63:62">rom</name></name></expr></argument>, <argument pos:start="63:65" pos:end="63:68"><expr pos:start="63:65" pos:end="63:68"><literal type="number" pos:start="63:65" pos:end="63:68">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:34"><expr pos:start="65:5" pos:end="65:33"><name pos:start="65:5" pos:end="65:26"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:26">rom_mapped_writable</name></name> <operator pos:start="65:28" pos:end="65:28">=</operator> <name pos:start="65:30" pos:end="65:33">true</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
