<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1103.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">pci_register_bar</name><parameter_list pos:start="1:22" pos:end="3:57">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:31">PCIDevice</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:40">pci_dev</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:56">region_num</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:29">uint8_t</name></type> <name pos:start="3:31" pos:end="3:34">type</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:56"><decl pos:start="3:37" pos:end="3:56"><type pos:start="3:37" pos:end="3:56"><name pos:start="3:37" pos:end="3:48">MemoryRegion</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:56">memory</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="83:5">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">PCIIORegion</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">addr</name></decl>;</decl_stmt> <comment type="block" pos:start="9:20" pos:end="9:51">/* offset in pci config space */</comment>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:18">wmask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">pcibus_t</name></type> <name pos:start="13:14" pos:end="13:17">size</name> <init pos:start="13:19" pos:end="13:46">= <expr pos:start="13:21" pos:end="13:46"><call pos:start="13:21" pos:end="13:46"><name pos:start="13:21" pos:end="13:38">memory_region_size</name><argument_list pos:start="13:39" pos:end="13:46">(<argument pos:start="13:40" pos:end="13:45"><expr pos:start="13:40" pos:end="13:45"><name pos:start="13:40" pos:end="13:45">memory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:28"><expr pos:start="17:5" pos:end="17:27"><call pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:27">(<argument pos:start="17:12" pos:end="17:26"><expr pos:start="17:12" pos:end="17:26"><name pos:start="17:12" pos:end="17:21">region_num</name> <operator pos:start="17:23" pos:end="17:24">&gt;=</operator> <literal type="number" pos:start="17:26" pos:end="17:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:41"><expr pos:start="19:5" pos:end="19:40"><call pos:start="19:5" pos:end="19:40"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:40">(<argument pos:start="19:12" pos:end="19:39"><expr pos:start="19:12" pos:end="19:39"><name pos:start="19:12" pos:end="19:21">region_num</name> <operator pos:start="19:23" pos:end="19:23">&lt;</operator> <name pos:start="19:25" pos:end="19:39">PCI_NUM_REGIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:24">(<expr pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:12">size</name> <operator pos:start="21:14" pos:end="21:14">&amp;</operator> <operator pos:start="21:16" pos:end="21:16">(</operator><name pos:start="21:17" pos:end="21:20">size</name><operator pos:start="21:21" pos:end="21:21">-</operator><literal type="number" pos:start="21:22" pos:end="21:22">1</literal><operator pos:start="21:23" pos:end="21:23">)</operator></expr>)</condition> <block pos:start="21:26" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:16">

        <expr_stmt pos:start="23:9" pos:end="25:69"><expr pos:start="23:9" pos:end="25:68"><call pos:start="23:9" pos:end="25:68"><name pos:start="23:9" pos:end="23:15">fprintf</name><argument_list pos:start="23:16" pos:end="25:68">(<argument pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:22"><name pos:start="23:17" pos:end="23:22">stderr</name></expr></argument>, <argument pos:start="23:25" pos:end="25:55"><expr pos:start="23:25" pos:end="25:55"><literal type="string" pos:start="23:25" pos:end="23:62">"ERROR: PCI region size must be pow2 "</literal>

                    <literal type="string" pos:start="25:21" pos:end="25:41">"type=0x%x, size=0x%"</literal><name pos:start="25:42" pos:end="25:51">FMT_PCIBUS</name><literal type="string" pos:start="25:52" pos:end="25:55">"\n"</literal></expr></argument>, <argument pos:start="25:58" pos:end="25:61"><expr pos:start="25:58" pos:end="25:61"><name pos:start="25:58" pos:end="25:61">type</name></expr></argument>, <argument pos:start="25:64" pos:end="25:67"><expr pos:start="25:64" pos:end="25:67"><name pos:start="25:64" pos:end="25:67">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:16"><expr pos:start="27:9" pos:end="27:15"><call pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">exit</name><argument_list pos:start="27:13" pos:end="27:15">(<argument pos:start="27:14" pos:end="27:14"><expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:5">r</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <operator pos:start="33:9" pos:end="33:9">&amp;</operator><name pos:start="33:10" pos:end="33:40"><name pos:start="33:10" pos:end="33:16">pci_dev</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:28">io_regions</name><index pos:start="33:29" pos:end="33:40">[<expr pos:start="33:30" pos:end="33:39"><name pos:start="33:30" pos:end="33:39">region_num</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:5">r</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:11">addr</name></name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:30">PCI_BAR_UNMAPPED</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:19"><expr pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:5">r</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:11">size</name></name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:18">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:19"><expr pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:11"><name pos:start="39:5" pos:end="39:5">r</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:11">type</name></name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:18">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:23"><expr pos:start="41:5" pos:end="41:22"><name pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:5">r</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:13">memory</name></name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:22">memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="47:58"><expr pos:start="43:5" pos:end="47:57"><name pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:5">r</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:20">address_space</name></name> <operator pos:start="43:22" pos:end="43:22">=</operator> <ternary pos:start="43:24" pos:end="47:57"><condition pos:start="43:24" pos:end="45:25"><expr pos:start="43:24" pos:end="43:55"><name pos:start="43:24" pos:end="43:27">type</name> <operator pos:start="43:29" pos:end="43:29">&amp;</operator> <name pos:start="43:31" pos:end="43:55">PCI_BASE_ADDRESS_SPACE_IO</name></expr>

                        ?</condition><then pos:start="45:27" pos:end="45:56"> <expr pos:start="45:27" pos:end="45:56"><name pos:start="45:27" pos:end="45:56"><name pos:start="45:27" pos:end="45:33">pci_dev</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:38">bus</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:56">address_space_io</name></name></expr>

                        </then><else pos:start="47:25" pos:end="47:57">: <expr pos:start="47:27" pos:end="47:57"><name pos:start="47:27" pos:end="47:57"><name pos:start="47:27" pos:end="47:33">pci_dev</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:38">bus</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:57">address_space_mem</name></name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:24"><expr pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:9">wmask</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <operator pos:start="51:13" pos:end="51:13">~</operator><operator pos:start="51:14" pos:end="51:14">(</operator><name pos:start="51:15" pos:end="51:18">size</name> <operator pos:start="51:20" pos:end="51:20">-</operator> <literal type="number" pos:start="51:22" pos:end="51:22">1</literal><operator pos:start="51:23" pos:end="51:23">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:35">(<expr pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:18">region_num</name> <operator pos:start="53:20" pos:end="53:21">==</operator> <name pos:start="53:23" pos:end="53:34">PCI_ROM_SLOT</name></expr>)</condition> <block pos:start="53:37" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:40">

        <comment type="block" pos:start="55:9" pos:end="55:40">/* ROM enable bit is writable */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:40"><expr pos:start="57:9" pos:end="57:39"><name pos:start="57:9" pos:end="57:13">wmask</name> <operator pos:start="57:15" pos:end="57:16">|=</operator> <name pos:start="57:18" pos:end="57:39">PCI_ROM_ADDRESS_ENABLE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:40"><expr pos:start="63:5" pos:end="63:39"><name pos:start="63:5" pos:end="63:8">addr</name> <operator pos:start="63:10" pos:end="63:10">=</operator> <call pos:start="63:12" pos:end="63:39"><name pos:start="63:12" pos:end="63:18">pci_bar</name><argument_list pos:start="63:19" pos:end="63:39">(<argument pos:start="63:20" pos:end="63:26"><expr pos:start="63:20" pos:end="63:26"><name pos:start="63:20" pos:end="63:26">pci_dev</name></expr></argument>, <argument pos:start="63:29" pos:end="63:38"><expr pos:start="63:29" pos:end="63:38"><name pos:start="63:29" pos:end="63:38">region_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:47"><expr pos:start="65:5" pos:end="65:46"><call pos:start="65:5" pos:end="65:46"><name pos:start="65:5" pos:end="65:16">pci_set_long</name><argument_list pos:start="65:17" pos:end="65:46">(<argument pos:start="65:18" pos:end="65:39"><expr pos:start="65:18" pos:end="65:39"><name pos:start="65:18" pos:end="65:32"><name pos:start="65:18" pos:end="65:24">pci_dev</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:32">config</name></name> <operator pos:start="65:34" pos:end="65:34">+</operator> <name pos:start="65:36" pos:end="65:39">addr</name></expr></argument>, <argument pos:start="65:42" pos:end="65:45"><expr pos:start="65:42" pos:end="65:45"><name pos:start="65:42" pos:end="65:45">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="83:5"><if pos:start="69:5" pos:end="77:5">if <condition pos:start="69:8" pos:end="71:47">(<expr pos:start="69:9" pos:end="71:46"><operator pos:start="69:9" pos:end="69:9">!</operator><operator pos:start="69:10" pos:end="69:10">(</operator><name pos:start="69:11" pos:end="69:17"><name pos:start="69:11" pos:end="69:11">r</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:17">type</name></name> <operator pos:start="69:19" pos:end="69:19">&amp;</operator> <name pos:start="69:21" pos:end="69:45">PCI_BASE_ADDRESS_SPACE_IO</name><operator pos:start="69:46" pos:end="69:46">)</operator> <operator pos:start="69:48" pos:end="69:49">&amp;&amp;</operator>

        <name pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:9">r</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:15">type</name></name> <operator pos:start="71:17" pos:end="71:17">&amp;</operator> <name pos:start="71:19" pos:end="71:46">PCI_BASE_ADDRESS_MEM_TYPE_64</name></expr>)</condition> <block pos:start="71:49" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:51">

        <expr_stmt pos:start="73:9" pos:end="73:51"><expr pos:start="73:9" pos:end="73:50"><call pos:start="73:9" pos:end="73:50"><name pos:start="73:9" pos:end="73:20">pci_set_quad</name><argument_list pos:start="73:21" pos:end="73:50">(<argument pos:start="73:22" pos:end="73:42"><expr pos:start="73:22" pos:end="73:42"><name pos:start="73:22" pos:end="73:35"><name pos:start="73:22" pos:end="73:28">pci_dev</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:35">wmask</name></name> <operator pos:start="73:37" pos:end="73:37">+</operator> <name pos:start="73:39" pos:end="73:42">addr</name></expr></argument>, <argument pos:start="73:45" pos:end="73:49"><expr pos:start="73:45" pos:end="73:49"><name pos:start="73:45" pos:end="73:49">wmask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:51"><expr pos:start="75:9" pos:end="75:50"><call pos:start="75:9" pos:end="75:50"><name pos:start="75:9" pos:end="75:20">pci_set_quad</name><argument_list pos:start="75:21" pos:end="75:50">(<argument pos:start="75:22" pos:end="75:42"><expr pos:start="75:22" pos:end="75:42"><name pos:start="75:22" pos:end="75:35"><name pos:start="75:22" pos:end="75:28">pci_dev</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:35">cmask</name></name> <operator pos:start="75:37" pos:end="75:37">+</operator> <name pos:start="75:39" pos:end="75:42">addr</name></expr></argument>, <argument pos:start="75:45" pos:end="75:49"><expr pos:start="75:45" pos:end="75:49"><operator pos:start="75:45" pos:end="75:45">~</operator><literal type="number" pos:start="75:46" pos:end="75:49">0ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="83:5">else <block pos:start="77:12" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:56">

        <expr_stmt pos:start="79:9" pos:end="79:64"><expr pos:start="79:9" pos:end="79:63"><call pos:start="79:9" pos:end="79:63"><name pos:start="79:9" pos:end="79:20">pci_set_long</name><argument_list pos:start="79:21" pos:end="79:63">(<argument pos:start="79:22" pos:end="79:42"><expr pos:start="79:22" pos:end="79:42"><name pos:start="79:22" pos:end="79:35"><name pos:start="79:22" pos:end="79:28">pci_dev</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:35">wmask</name></name> <operator pos:start="79:37" pos:end="79:37">+</operator> <name pos:start="79:39" pos:end="79:42">addr</name></expr></argument>, <argument pos:start="79:45" pos:end="79:62"><expr pos:start="79:45" pos:end="79:62"><name pos:start="79:45" pos:end="79:49">wmask</name> <operator pos:start="79:51" pos:end="79:51">&amp;</operator> <literal type="number" pos:start="79:53" pos:end="79:62">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:56"><expr pos:start="81:9" pos:end="81:55"><call pos:start="81:9" pos:end="81:55"><name pos:start="81:9" pos:end="81:20">pci_set_long</name><argument_list pos:start="81:21" pos:end="81:55">(<argument pos:start="81:22" pos:end="81:42"><expr pos:start="81:22" pos:end="81:42"><name pos:start="81:22" pos:end="81:35"><name pos:start="81:22" pos:end="81:28">pci_dev</name><operator pos:start="81:29" pos:end="81:30">-&gt;</operator><name pos:start="81:31" pos:end="81:35">cmask</name></name> <operator pos:start="81:37" pos:end="81:37">+</operator> <name pos:start="81:39" pos:end="81:42">addr</name></expr></argument>, <argument pos:start="81:45" pos:end="81:54"><expr pos:start="81:45" pos:end="81:54"><literal type="number" pos:start="81:45" pos:end="81:54">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
