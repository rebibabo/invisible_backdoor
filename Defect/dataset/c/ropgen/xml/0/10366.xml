<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10366.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">kvm_handle_internal_error</name><parameter_list pos:start="1:37" pos:end="1:72">(<parameter pos:start="1:38" pos:end="1:50"><decl pos:start="1:38" pos:end="1:50"><type pos:start="1:38" pos:end="1:50"><name pos:start="1:38" pos:end="1:45">CPUState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">env</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:71"><decl pos:start="1:53" pos:end="1:71"><type pos:start="1:53" pos:end="1:71"><name pos:start="1:53" pos:end="1:66"><name pos:start="1:53" pos:end="1:58">struct</name> <name pos:start="1:60" pos:end="1:66">kvm_run</name></name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">run</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:14">

    <expr_stmt pos:start="5:5" pos:end="5:43"><expr pos:start="5:5" pos:end="5:42"><call pos:start="5:5" pos:end="5:42"><name pos:start="5:5" pos:end="5:11">fprintf</name><argument_list pos:start="5:12" pos:end="5:42">(<argument pos:start="5:13" pos:end="5:18"><expr pos:start="5:13" pos:end="5:18"><name pos:start="5:13" pos:end="5:18">stderr</name></expr></argument>, <argument pos:start="5:21" pos:end="5:41"><expr pos:start="5:21" pos:end="5:41"><literal type="string" pos:start="5:21" pos:end="5:41">"KVM internal error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="7:5" pos:end="27:5"><if pos:start="7:5" pos:end="23:5">if <condition pos:start="7:8" pos:end="7:68">(<expr pos:start="7:9" pos:end="7:67"><call pos:start="7:9" pos:end="7:67"><name pos:start="7:9" pos:end="7:27">kvm_check_extension</name><argument_list pos:start="7:28" pos:end="7:67">(<argument pos:start="7:29" pos:end="7:37"><expr pos:start="7:29" pos:end="7:37"><name pos:start="7:29" pos:end="7:37">kvm_state</name></expr></argument>, <argument pos:start="7:40" pos:end="7:66"><expr pos:start="7:40" pos:end="7:66"><name pos:start="7:40" pos:end="7:66">KVM_CAP_INTERNAL_ERROR_DATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7:70" pos:end="23:5">{<block_content pos:start="9:9" pos:end="21:9">

        <decl_stmt pos:start="9:9" pos:end="9:14"><decl pos:start="9:9" pos:end="9:13"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="13:9" pos:end="13:67"><expr pos:start="13:9" pos:end="13:66"><call pos:start="13:9" pos:end="13:66"><name pos:start="13:9" pos:end="13:15">fprintf</name><argument_list pos:start="13:16" pos:end="13:66">(<argument pos:start="13:17" pos:end="13:22"><expr pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:22">stderr</name></expr></argument>, <argument pos:start="13:25" pos:end="13:41"><expr pos:start="13:25" pos:end="13:41"><literal type="string" pos:start="13:25" pos:end="13:41">" Suberror: %d\n"</literal></expr></argument>, <argument pos:start="13:44" pos:end="13:65"><expr pos:start="13:44" pos:end="13:65"><name pos:start="13:44" pos:end="13:65"><name pos:start="13:44" pos:end="13:46">run</name><operator pos:start="13:47" pos:end="13:48">-&gt;</operator><name pos:start="13:49" pos:end="13:56">internal</name><operator pos:start="13:57" pos:end="13:57">.</operator><name pos:start="13:58" pos:end="13:65">suberror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="15:9" pos:end="21:9">for <control pos:start="15:13" pos:end="15:49">(<init pos:start="15:14" pos:end="15:19"><expr pos:start="15:14" pos:end="15:18"><name pos:start="15:14" pos:end="15:14">i</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <literal type="number" pos:start="15:18" pos:end="15:18">0</literal></expr>;</init> <condition pos:start="15:21" pos:end="15:44"><expr pos:start="15:21" pos:end="15:43"><name pos:start="15:21" pos:end="15:21">i</name> <operator pos:start="15:23" pos:end="15:23">&lt;</operator> <name pos:start="15:25" pos:end="15:43"><name pos:start="15:25" pos:end="15:27">run</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:37">internal</name><operator pos:start="15:38" pos:end="15:38">.</operator><name pos:start="15:39" pos:end="15:43">ndata</name></name></expr>;</condition> <incr pos:start="15:46" pos:end="15:48"><expr pos:start="15:46" pos:end="15:48"><operator pos:start="15:46" pos:end="15:47">++</operator><name pos:start="15:48" pos:end="15:48">i</name></expr></incr>)</control> <block pos:start="15:51" pos:end="21:9">{<block_content pos:start="17:13" pos:end="19:56">

            <expr_stmt pos:start="17:13" pos:end="19:56"><expr pos:start="17:13" pos:end="19:55"><call pos:start="17:13" pos:end="19:55"><name pos:start="17:13" pos:end="17:19">fprintf</name><argument_list pos:start="17:20" pos:end="19:55">(<argument pos:start="17:21" pos:end="17:26"><expr pos:start="17:21" pos:end="17:26"><name pos:start="17:21" pos:end="17:26">stderr</name></expr></argument>, <argument pos:start="17:29" pos:end="17:57"><expr pos:start="17:29" pos:end="17:57"><literal type="string" pos:start="17:29" pos:end="17:47">"extra data[%d]: %"</literal><name pos:start="17:48" pos:end="17:53">PRIx64</name><literal type="string" pos:start="17:54" pos:end="17:57">"\n"</literal></expr></argument>,

                    <argument pos:start="19:21" pos:end="19:21"><expr pos:start="19:21" pos:end="19:21"><name pos:start="19:21" pos:end="19:21">i</name></expr></argument>, <argument pos:start="19:24" pos:end="19:54"><expr pos:start="19:24" pos:end="19:54"><operator pos:start="19:24" pos:end="19:24">(</operator><name pos:start="19:25" pos:end="19:32">uint64_t</name><operator pos:start="19:33" pos:end="19:33">)</operator><name pos:start="19:34" pos:end="19:54"><name pos:start="19:34" pos:end="19:36">run</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:46">internal</name><operator pos:start="19:47" pos:end="19:47">.</operator><name pos:start="19:48" pos:end="19:51">data</name><index pos:start="19:52" pos:end="19:54">[<expr pos:start="19:53" pos:end="19:53"><name pos:start="19:53" pos:end="19:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="27:5">else <block pos:start="23:12" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:30">

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><call pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:15">fprintf</name><argument_list pos:start="25:16" pos:end="25:29">(<argument pos:start="25:17" pos:end="25:22"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:22">stderr</name></expr></argument>, <argument pos:start="25:25" pos:end="25:28"><expr pos:start="25:25" pos:end="25:28"><literal type="string" pos:start="25:25" pos:end="25:28">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="29:5" pos:end="41:5"><if pos:start="29:5" pos:end="41:5">if <condition pos:start="29:8" pos:end="29:63">(<expr pos:start="29:9" pos:end="29:62"><name pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:11">run</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:21">internal</name><operator pos:start="29:22" pos:end="29:22">.</operator><name pos:start="29:23" pos:end="29:30">suberror</name></name> <operator pos:start="29:32" pos:end="29:33">==</operator> <name pos:start="29:35" pos:end="29:62">KVM_INTERNAL_ERROR_EMULATION</name></expr>)</condition> <block pos:start="29:65" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:9">

        <expr_stmt pos:start="31:9" pos:end="31:47"><expr pos:start="31:9" pos:end="31:46"><call pos:start="31:9" pos:end="31:46"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="31:46">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:45"><expr pos:start="31:25" pos:end="31:45"><literal type="string" pos:start="31:25" pos:end="31:45">"emulation failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:51">(<expr pos:start="33:13" pos:end="33:50"><operator pos:start="33:13" pos:end="33:13">!</operator><call pos:start="33:14" pos:end="33:50"><name pos:start="33:14" pos:end="33:45">kvm_arch_stop_on_emulation_error</name><argument_list pos:start="33:46" pos:end="33:50">(<argument pos:start="33:47" pos:end="33:49"><expr pos:start="33:47" pos:end="33:49"><name pos:start="33:47" pos:end="33:49">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:53" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:21">

            <expr_stmt pos:start="35:13" pos:end="35:64"><expr pos:start="35:13" pos:end="35:63"><call pos:start="35:13" pos:end="35:63"><name pos:start="35:13" pos:end="35:26">cpu_dump_state</name><argument_list pos:start="35:27" pos:end="35:63">(<argument pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:30">env</name></expr></argument>, <argument pos:start="35:33" pos:end="35:38"><expr pos:start="35:33" pos:end="35:38"><name pos:start="35:33" pos:end="35:38">stderr</name></expr></argument>, <argument pos:start="35:41" pos:end="35:47"><expr pos:start="35:41" pos:end="35:47"><name pos:start="35:41" pos:end="35:47">fprintf</name></expr></argument>, <argument pos:start="35:50" pos:end="35:62"><expr pos:start="35:50" pos:end="35:62"><name pos:start="35:50" pos:end="35:62">CPU_DUMP_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:21">return <expr pos:start="37:20" pos:end="37:20"><literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="43:5" pos:end="47:7">/* FIXME: Should trigger a qmp message to let management know

     * something went wrong.

     */</comment>

    <return pos:start="49:5" pos:end="49:14">return <expr pos:start="49:12" pos:end="49:13"><operator pos:start="49:12" pos:end="49:12">-</operator><literal type="number" pos:start="49:13" pos:end="49:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
