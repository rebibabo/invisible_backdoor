<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20337.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">dnxhd_decode_dct_block</name><parameter_list pos:start="1:35" pos:end="1:88">(<parameter pos:start="1:36" pos:end="1:52"><decl pos:start="1:36" pos:end="1:52"><type pos:start="1:36" pos:end="1:52"><name pos:start="1:36" pos:end="1:47">DNXHDContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">ctx</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:68"><decl pos:start="1:55" pos:end="1:68"><type pos:start="1:55" pos:end="1:68"><name pos:start="1:55" pos:end="1:61">DCTELEM</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:68">block</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:75"><decl pos:start="1:71" pos:end="1:75"><type pos:start="1:71" pos:end="1:75"><name pos:start="1:71" pos:end="1:73">int</name></type> <name pos:start="1:75" pos:end="1:75">n</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:87"><decl pos:start="1:78" pos:end="1:87"><type pos:start="1:78" pos:end="1:87"><name pos:start="1:78" pos:end="1:80">int</name></type> <name pos:start="1:82" pos:end="1:87">qscale</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="107:1">{<block_content pos:start="5:5" pos:end="105:5">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">j</name></decl>, <decl pos:start="5:15" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:19">index</name></decl>, <decl pos:start="5:22" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:27">index2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">level</name></decl>, <decl pos:start="7:16" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:24">component</name></decl>, <decl pos:start="7:27" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:27" pos:end="7:30">sign</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:32">weigth_matrix</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="25:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:12">(<expr pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:9">n</name><operator pos:start="13:10" pos:end="13:10">&amp;</operator><literal type="number" pos:start="13:11" pos:end="13:11">2</literal></expr>)</condition> <block pos:start="13:14" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:54">

        <expr_stmt pos:start="15:9" pos:end="15:30"><expr pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:17">component</name> <operator pos:start="15:19" pos:end="15:19">=</operator> <literal type="number" pos:start="15:21" pos:end="15:23">1</literal> <operator pos:start="15:23" pos:end="15:23">+</operator> <operator pos:start="15:25" pos:end="15:25">(</operator><name pos:start="15:26" pos:end="15:26">n</name><operator pos:start="15:27" pos:end="15:27">&amp;</operator><literal type="number" pos:start="15:28" pos:end="15:28">1</literal><operator pos:start="15:29" pos:end="15:29">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:54"><expr pos:start="17:9" pos:end="17:53"><name pos:start="17:9" pos:end="17:21">weigth_matrix</name> <operator pos:start="17:23" pos:end="17:23">=</operator> <name pos:start="17:25" pos:end="17:53"><name pos:start="17:25" pos:end="17:27">ctx</name><operator pos:start="17:28" pos:end="17:29">-&gt;</operator><name pos:start="17:30" pos:end="17:38">cid_table</name><operator pos:start="17:39" pos:end="17:40">-&gt;</operator><name pos:start="17:41" pos:end="17:53">chroma_weigth</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="25:5">else <block pos:start="19:12" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:52">

        <expr_stmt pos:start="21:9" pos:end="21:22"><expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:17">component</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:52"><expr pos:start="23:9" pos:end="23:51"><name pos:start="23:9" pos:end="23:21">weigth_matrix</name> <operator pos:start="23:23" pos:end="23:23">=</operator> <name pos:start="23:25" pos:end="23:51"><name pos:start="23:25" pos:end="23:27">ctx</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:38">cid_table</name><operator pos:start="23:39" pos:end="23:40">-&gt;</operator><name pos:start="23:41" pos:end="23:51">luma_weigth</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:52"><expr pos:start="29:5" pos:end="29:51"><name pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:7">ctx</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:16">last_dc</name><index pos:start="29:17" pos:end="29:27">[<expr pos:start="29:18" pos:end="29:26"><name pos:start="29:18" pos:end="29:26">component</name></expr>]</index></name> <operator pos:start="29:29" pos:end="29:30">+=</operator> <call pos:start="29:32" pos:end="29:51"><name pos:start="29:32" pos:end="29:46">dnxhd_decode_dc</name><argument_list pos:start="29:47" pos:end="29:51">(<argument pos:start="29:48" pos:end="29:50"><expr pos:start="29:48" pos:end="29:50"><name pos:start="29:48" pos:end="29:50">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:39"><expr pos:start="31:5" pos:end="31:38"><name pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:9">block</name><index pos:start="31:10" pos:end="31:12">[<expr pos:start="31:11" pos:end="31:11"><literal type="number" pos:start="31:11" pos:end="31:11">0</literal></expr>]</index></name> <operator pos:start="31:14" pos:end="31:14">=</operator> <name pos:start="31:16" pos:end="31:38"><name pos:start="31:16" pos:end="31:18">ctx</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:27">last_dc</name><index pos:start="31:28" pos:end="31:38">[<expr pos:start="31:29" pos:end="31:37"><name pos:start="31:29" pos:end="31:37">component</name></expr>]</index></name></expr>;</expr_stmt>

    <comment type="line" pos:start="33:5" pos:end="33:60">//av_log(ctx-&gt;avctx, AV_LOG_DEBUG, "dc %d\n", block[0]);</comment>

    <for pos:start="35:5" pos:end="105:5">for <control pos:start="35:9" pos:end="35:22">(<init pos:start="35:10" pos:end="35:15"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">1</literal></expr>;</init> <condition pos:start="35:17" pos:end="35:17">;</condition> <incr pos:start="35:19" pos:end="35:21"><expr pos:start="35:19" pos:end="35:21"><name pos:start="35:19" pos:end="35:19">i</name><operator pos:start="35:20" pos:end="35:21">++</operator></expr></incr>)</control> <block pos:start="35:24" pos:end="105:5">{<block_content pos:start="37:9" pos:end="103:25">

        <expr_stmt pos:start="37:9" pos:end="37:73"><expr pos:start="37:9" pos:end="37:72"><name pos:start="37:9" pos:end="37:13">index</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:72"><name pos:start="37:17" pos:end="37:24">get_vlc2</name><argument_list pos:start="37:25" pos:end="37:72">(<argument pos:start="37:26" pos:end="37:33"><expr pos:start="37:26" pos:end="37:33"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:33"><name pos:start="37:27" pos:end="37:29">ctx</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:33">gb</name></name></expr></argument>, <argument pos:start="37:36" pos:end="37:52"><expr pos:start="37:36" pos:end="37:52"><name pos:start="37:36" pos:end="37:52"><name pos:start="37:36" pos:end="37:38">ctx</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:46">ac_vlc</name><operator pos:start="37:47" pos:end="37:47">.</operator><name pos:start="37:48" pos:end="37:52">table</name></name></expr></argument>, <argument pos:start="37:55" pos:end="37:68"><expr pos:start="37:55" pos:end="37:68"><name pos:start="37:55" pos:end="37:68">DNXHD_VLC_BITS</name></expr></argument>, <argument pos:start="37:71" pos:end="37:71"><expr pos:start="37:71" pos:end="37:71"><literal type="number" pos:start="37:71" pos:end="37:71">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="39:9" pos:end="39:64">//av_log(ctx-&gt;avctx, AV_LOG_DEBUG, "index %d\n", index);</comment>

        <expr_stmt pos:start="41:9" pos:end="41:48"><expr pos:start="41:9" pos:end="41:47"><name pos:start="41:9" pos:end="41:13">level</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:47"><name pos:start="41:17" pos:end="41:19">ctx</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:30">cid_table</name><operator pos:start="41:31" pos:end="41:32">-&gt;</operator><name pos:start="41:33" pos:end="41:40">ac_level</name><index pos:start="41:41" pos:end="41:47">[<expr pos:start="41:42" pos:end="41:46"><name pos:start="41:42" pos:end="41:46">index</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:19">(<expr pos:start="43:13" pos:end="43:18"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:18">level</name></expr>)</condition> <block pos:start="43:21" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:19"> <comment type="block" pos:start="43:23" pos:end="43:31">/* EOB */</comment>

            <comment type="line" pos:start="45:13" pos:end="45:56">//av_log(ctx-&gt;avctx, AV_LOG_DEBUG, "EOB\n");</comment>

            <return pos:start="47:13" pos:end="47:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:38"><expr pos:start="51:9" pos:end="51:37"><name pos:start="51:9" pos:end="51:12">sign</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <call pos:start="51:16" pos:end="51:37"><name pos:start="51:16" pos:end="51:24">get_sbits</name><argument_list pos:start="51:25" pos:end="51:37">(<argument pos:start="51:26" pos:end="51:33"><expr pos:start="51:26" pos:end="51:33"><operator pos:start="51:26" pos:end="51:26">&amp;</operator><name pos:start="51:27" pos:end="51:33"><name pos:start="51:27" pos:end="51:29">ctx</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:33">gb</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:36"><expr pos:start="51:36" pos:end="51:36"><literal type="number" pos:start="51:36" pos:end="51:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:49">(<expr pos:start="55:13" pos:end="55:48"><name pos:start="55:13" pos:end="55:48"><name pos:start="55:13" pos:end="55:15">ctx</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:26">cid_table</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:41">ac_index_flag</name><index pos:start="55:42" pos:end="55:48">[<expr pos:start="55:43" pos:end="55:47"><name pos:start="55:43" pos:end="55:47">index</name></expr>]</index></name></expr>)</condition> <block pos:start="55:51" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:71">

            <expr_stmt pos:start="57:13" pos:end="57:71"><expr pos:start="57:13" pos:end="57:70"><name pos:start="57:13" pos:end="57:17">level</name> <operator pos:start="57:19" pos:end="57:20">+=</operator> <call pos:start="57:22" pos:end="57:67"><name pos:start="57:22" pos:end="57:29">get_bits</name><argument_list pos:start="57:30" pos:end="57:67">(<argument pos:start="57:31" pos:end="57:38"><expr pos:start="57:31" pos:end="57:38"><operator pos:start="57:31" pos:end="57:31">&amp;</operator><name pos:start="57:32" pos:end="57:38"><name pos:start="57:32" pos:end="57:34">ctx</name><operator pos:start="57:35" pos:end="57:36">-&gt;</operator><name pos:start="57:37" pos:end="57:38">gb</name></name></expr></argument>, <argument pos:start="57:41" pos:end="57:66"><expr pos:start="57:41" pos:end="57:66"><name pos:start="57:41" pos:end="57:66"><name pos:start="57:41" pos:end="57:43">ctx</name><operator pos:start="57:44" pos:end="57:45">-&gt;</operator><name pos:start="57:46" pos:end="57:54">cid_table</name><operator pos:start="57:55" pos:end="57:56">-&gt;</operator><name pos:start="57:57" pos:end="57:66">index_bits</name></name></expr></argument>)</argument_list></call><operator pos:start="57:68" pos:end="57:69">&lt;&lt;</operator><literal type="number" pos:start="57:70" pos:end="57:70">6</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:47">(<expr pos:start="63:13" pos:end="63:46"><name pos:start="63:13" pos:end="63:46"><name pos:start="63:13" pos:end="63:15">ctx</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:26">cid_table</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:39">ac_run_flag</name><index pos:start="63:40" pos:end="63:46">[<expr pos:start="63:41" pos:end="63:45"><name pos:start="63:41" pos:end="63:45">index</name></expr>]</index></name></expr>)</condition> <block pos:start="63:49" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:45">

            <expr_stmt pos:start="65:13" pos:end="65:79"><expr pos:start="65:13" pos:end="65:78"><name pos:start="65:13" pos:end="65:18">index2</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <call pos:start="65:22" pos:end="65:78"><name pos:start="65:22" pos:end="65:29">get_vlc2</name><argument_list pos:start="65:30" pos:end="65:78">(<argument pos:start="65:31" pos:end="65:38"><expr pos:start="65:31" pos:end="65:38"><operator pos:start="65:31" pos:end="65:31">&amp;</operator><name pos:start="65:32" pos:end="65:38"><name pos:start="65:32" pos:end="65:34">ctx</name><operator pos:start="65:35" pos:end="65:36">-&gt;</operator><name pos:start="65:37" pos:end="65:38">gb</name></name></expr></argument>, <argument pos:start="65:41" pos:end="65:58"><expr pos:start="65:41" pos:end="65:58"><name pos:start="65:41" pos:end="65:58"><name pos:start="65:41" pos:end="65:43">ctx</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:52">run_vlc</name><operator pos:start="65:53" pos:end="65:53">.</operator><name pos:start="65:54" pos:end="65:58">table</name></name></expr></argument>, <argument pos:start="65:61" pos:end="65:74"><expr pos:start="65:61" pos:end="65:74"><name pos:start="65:61" pos:end="65:74">DNXHD_VLC_BITS</name></expr></argument>, <argument pos:start="65:77" pos:end="65:77"><expr pos:start="65:77" pos:end="65:77"><literal type="number" pos:start="65:77" pos:end="65:77">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:45"><expr pos:start="67:13" pos:end="67:44"><name pos:start="67:13" pos:end="67:13">i</name> <operator pos:start="67:15" pos:end="67:16">+=</operator> <name pos:start="67:18" pos:end="67:44"><name pos:start="67:18" pos:end="67:20">ctx</name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:31">cid_table</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:36">run</name><index pos:start="67:37" pos:end="67:44">[<expr pos:start="67:38" pos:end="67:43"><name pos:start="67:38" pos:end="67:43">index2</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:41"><expr pos:start="73:9" pos:end="73:40"><name pos:start="73:9" pos:end="73:9">j</name> <operator pos:start="73:11" pos:end="73:11">=</operator> <name pos:start="73:13" pos:end="73:40"><name pos:start="73:13" pos:end="73:15">ctx</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:26">scantable</name><operator pos:start="73:27" pos:end="73:27">.</operator><name pos:start="73:28" pos:end="73:37">permutated</name><index pos:start="73:38" pos:end="73:40">[<expr pos:start="73:39" pos:end="73:39"><name pos:start="73:39" pos:end="73:39">i</name></expr>]</index></name></expr>;</expr_stmt>

        <comment type="line" pos:start="75:9" pos:end="75:56">//av_log(ctx-&gt;avctx, AV_LOG_DEBUG, "j %d\n", j);</comment>

        <comment type="line" pos:start="77:9" pos:end="77:93">//av_log(ctx-&gt;avctx, AV_LOG_DEBUG, "level %d, weigth %d\n", level, weigth_matrix[i]);</comment>

        <expr_stmt pos:start="79:9" pos:end="79:56"><expr pos:start="79:9" pos:end="79:55"><name pos:start="79:9" pos:end="79:13">level</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <operator pos:start="79:17" pos:end="79:17">(</operator><literal type="number" pos:start="79:18" pos:end="79:18">2</literal><operator pos:start="79:19" pos:end="79:19">*</operator><name pos:start="79:20" pos:end="79:24">level</name><operator pos:start="79:25" pos:end="79:25">+</operator><literal type="number" pos:start="79:26" pos:end="79:26">1</literal><operator pos:start="79:27" pos:end="79:27">)</operator> <operator pos:start="79:29" pos:end="79:29">*</operator> <name pos:start="79:31" pos:end="79:36">qscale</name> <operator pos:start="79:38" pos:end="79:38">*</operator> <name pos:start="79:40" pos:end="79:55"><name pos:start="79:40" pos:end="79:52">weigth_matrix</name><index pos:start="79:53" pos:end="79:55">[<expr pos:start="79:54" pos:end="79:54"><name pos:start="79:54" pos:end="79:54">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="83:24"><if pos:start="81:9" pos:end="83:24">if <condition pos:start="81:12" pos:end="81:35">(<expr pos:start="81:13" pos:end="81:34"><name pos:start="81:13" pos:end="81:28"><name pos:start="81:13" pos:end="81:25">weigth_matrix</name><index pos:start="81:26" pos:end="81:28">[<expr pos:start="81:27" pos:end="81:27"><name pos:start="81:27" pos:end="81:27">i</name></expr>]</index></name> <operator pos:start="81:30" pos:end="81:31">!=</operator> <literal type="number" pos:start="81:33" pos:end="81:34">32</literal></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:24"><block_content pos:start="83:13" pos:end="83:24"> <comment type="line" pos:start="81:37" pos:end="81:50">// FIXME 10bit</comment>

            <expr_stmt pos:start="83:13" pos:end="83:24"><expr pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:17">level</name> <operator pos:start="83:19" pos:end="83:20">+=</operator> <literal type="number" pos:start="83:22" pos:end="83:23">32</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:20"><expr pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:13">level</name> <operator pos:start="85:15" pos:end="85:17">&gt;&gt;=</operator> <literal type="number" pos:start="85:19" pos:end="85:19">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:13">level</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <operator pos:start="87:17" pos:end="87:17">(</operator><name pos:start="87:18" pos:end="87:22">level</name><operator pos:start="87:23" pos:end="87:23">^</operator><name pos:start="87:24" pos:end="87:27">sign</name><operator pos:start="87:28" pos:end="87:28">)</operator> <operator pos:start="87:30" pos:end="87:30">-</operator> <name pos:start="87:32" pos:end="87:35">sign</name></expr>;</expr_stmt>



        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:19">(<expr pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:13">i</name> <operator pos:start="91:15" pos:end="91:15">&gt;</operator> <literal type="number" pos:start="91:17" pos:end="91:18">63</literal></expr>)</condition> <block pos:start="91:21" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:19">

            <expr_stmt pos:start="93:13" pos:end="93:78"><expr pos:start="93:13" pos:end="93:77"><call pos:start="93:13" pos:end="93:77"><name pos:start="93:13" pos:end="93:18">av_log</name><argument_list pos:start="93:19" pos:end="93:77">(<argument pos:start="93:20" pos:end="93:29"><expr pos:start="93:20" pos:end="93:29"><name pos:start="93:20" pos:end="93:29"><name pos:start="93:20" pos:end="93:22">ctx</name><operator pos:start="93:23" pos:end="93:24">-&gt;</operator><name pos:start="93:25" pos:end="93:29">avctx</name></name></expr></argument>, <argument pos:start="93:32" pos:end="93:43"><expr pos:start="93:32" pos:end="93:43"><name pos:start="93:32" pos:end="93:43">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="93:46" pos:end="93:70"><expr pos:start="93:46" pos:end="93:70"><literal type="string" pos:start="93:46" pos:end="93:70">"ac tex damaged %d, %d\n"</literal></expr></argument>, <argument pos:start="93:73" pos:end="93:73"><expr pos:start="93:73" pos:end="93:73"><name pos:start="93:73" pos:end="93:73">n</name></expr></argument>, <argument pos:start="93:76" pos:end="93:76"><expr pos:start="93:76" pos:end="93:76"><name pos:start="93:76" pos:end="93:76">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="95:13" pos:end="95:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="101:9" pos:end="101:80">//av_log(NULL, AV_LOG_DEBUG, "i %d, j %d, end level %d\n", i, j, level);</comment>

        <expr_stmt pos:start="103:9" pos:end="103:25"><expr pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:16"><name pos:start="103:9" pos:end="103:13">block</name><index pos:start="103:14" pos:end="103:16">[<expr pos:start="103:15" pos:end="103:15"><name pos:start="103:15" pos:end="103:15">j</name></expr>]</index></name> <operator pos:start="103:18" pos:end="103:18">=</operator> <name pos:start="103:20" pos:end="103:24">level</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
