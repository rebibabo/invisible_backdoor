<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5481.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_b_mbs</name><parameter_list pos:start="1:24" pos:end="1:38">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:34">VC9Context</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">v</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="169:1">{<block_content pos:start="5:5" pos:end="167:13">

    <decl_stmt pos:start="5:5" pos:end="7:43"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">x</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">y</name></decl>, <decl pos:start="5:15" pos:end="5:28"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:24">current_mb</name> <init pos:start="5:26" pos:end="5:28">= <expr pos:start="5:28" pos:end="5:28"><literal type="number" pos:start="5:28" pos:end="5:28">0</literal></expr></init></decl> , <decl pos:start="5:32" pos:end="5:65"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:32" pos:end="5:38">last_mb</name> <init pos:start="5:40" pos:end="5:65">= <expr pos:start="5:42" pos:end="5:65"><name pos:start="5:42" pos:end="5:53"><name pos:start="5:42" pos:end="5:42">v</name><operator pos:start="5:43" pos:end="5:44">-&gt;</operator><name pos:start="5:45" pos:end="5:53">height_mb</name></name><operator pos:start="5:54" pos:end="5:54">*</operator><name pos:start="5:55" pos:end="5:65"><name pos:start="5:55" pos:end="5:55">v</name><operator pos:start="5:56" pos:end="5:57">-&gt;</operator><name pos:start="5:58" pos:end="5:65">width_mb</name></name></expr></init></decl>,

        <decl pos:start="7:9" pos:end="7:9"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="7:9" pos:end="7:9">i</name></decl> <comment type="block" pos:start="7:11" pos:end="7:42">/* MB / B postion information */</comment>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">direct_b_bit</name> <init pos:start="9:22" pos:end="9:24">= <expr pos:start="9:24" pos:end="9:24"><literal type="number" pos:start="9:24" pos:end="9:24">0</literal></expr></init></decl>, <decl pos:start="9:27" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:27" pos:end="9:37">skip_mb_bit</name> <init pos:start="9:39" pos:end="9:41">= <expr pos:start="9:41" pos:end="9:41"><literal type="number" pos:start="9:41" pos:end="9:41">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">ac_pred</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">b_mv1</name> <init pos:start="13:15" pos:end="13:17">= <expr pos:start="13:17" pos:end="13:17"><literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr></init></decl>, <decl pos:start="13:20" pos:end="13:28"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:20" pos:end="13:24">b_mv2</name> <init pos:start="13:26" pos:end="13:28">= <expr pos:start="13:28" pos:end="13:28"><literal type="number" pos:start="13:28" pos:end="13:28">0</literal></expr></init></decl>, <decl pos:start="13:31" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:31" pos:end="13:39">b_mv_type</name> <init pos:start="13:41" pos:end="13:43">= <expr pos:start="13:43" pos:end="13:43"><literal type="number" pos:start="13:43" pos:end="13:43">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">mquant</name></decl>, <decl pos:start="15:17" pos:end="15:22"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:22">mqdiff</name></decl>;</decl_stmt> <comment type="block" pos:start="15:25" pos:end="15:44">/* MB quant stuff */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">tt_block</name></decl>;</decl_stmt> <comment type="block" pos:start="17:19" pos:end="17:44">/* Block transform type */</comment>

    

    <for pos:start="21:5" pos:end="165:5">for <control pos:start="21:9" pos:end="21:34">(<init pos:start="21:10" pos:end="21:13"><expr pos:start="21:10" pos:end="21:12"><name pos:start="21:10" pos:end="21:10">y</name><operator pos:start="21:11" pos:end="21:11">=</operator><literal type="number" pos:start="21:12" pos:end="21:12">0</literal></expr>;</init> <condition pos:start="21:15" pos:end="21:29"><expr pos:start="21:15" pos:end="21:28"><name pos:start="21:15" pos:end="21:15">y</name><operator pos:start="21:16" pos:end="21:16">&lt;</operator><name pos:start="21:17" pos:end="21:28"><name pos:start="21:17" pos:end="21:17">v</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:28">height_mb</name></name></expr>;</condition> <incr pos:start="21:31" pos:end="21:33"><expr pos:start="21:31" pos:end="21:33"><name pos:start="21:31" pos:end="21:31">y</name><operator pos:start="21:32" pos:end="21:33">++</operator></expr></incr>)</control>

    <block pos:start="23:5" pos:end="165:5">{<block_content pos:start="25:9" pos:end="163:21">

        <for pos:start="25:9" pos:end="149:9">for <control pos:start="25:13" pos:end="25:37">(<init pos:start="25:14" pos:end="25:17"><expr pos:start="25:14" pos:end="25:16"><name pos:start="25:14" pos:end="25:14">x</name><operator pos:start="25:15" pos:end="25:15">=</operator><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</init> <condition pos:start="25:19" pos:end="25:32"><expr pos:start="25:19" pos:end="25:31"><name pos:start="25:19" pos:end="25:19">x</name><operator pos:start="25:20" pos:end="25:20">&lt;</operator><name pos:start="25:21" pos:end="25:31"><name pos:start="25:21" pos:end="25:21">v</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:31">width_mb</name></name></expr>;</condition> <incr pos:start="25:34" pos:end="25:36"><expr pos:start="25:34" pos:end="25:36"><name pos:start="25:34" pos:end="25:34">x</name><operator pos:start="25:35" pos:end="25:36">++</operator></expr></incr>)</control>

        <block pos:start="27:9" pos:end="149:9">{<block_content pos:start="29:13" pos:end="148:0">

            <if_stmt pos:start="29:13" pos:end="31:49"><if pos:start="29:13" pos:end="31:49">if <condition pos:start="29:16" pos:end="29:47">(<expr pos:start="29:17" pos:end="29:46"><name pos:start="29:17" pos:end="29:46"><name pos:start="29:17" pos:end="29:17">v</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:34">direct_mb_plane</name><index pos:start="29:35" pos:end="29:46">[<expr pos:start="29:36" pos:end="29:45"><name pos:start="29:36" pos:end="29:45">current_mb</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="31:15" pos:end="31:49"><block_content pos:start="31:15" pos:end="31:49">

              <expr_stmt pos:start="31:15" pos:end="31:49"><expr pos:start="31:15" pos:end="31:48"><name pos:start="31:15" pos:end="31:26">direct_b_bit</name> <operator pos:start="31:28" pos:end="31:28">=</operator> <call pos:start="31:30" pos:end="31:48"><name pos:start="31:30" pos:end="31:37">get_bits</name><argument_list pos:start="31:38" pos:end="31:48">(<argument pos:start="31:39" pos:end="31:44"><expr pos:start="31:39" pos:end="31:44"><operator pos:start="31:39" pos:end="31:39">&amp;</operator><name pos:start="31:40" pos:end="31:44"><name pos:start="31:40" pos:end="31:40">v</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:44">gb</name></name></expr></argument>, <argument pos:start="31:47" pos:end="31:47"><expr pos:start="31:47" pos:end="31:47"><literal type="number" pos:start="31:47" pos:end="31:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="33:13" pos:end="45:13"><if pos:start="33:13" pos:end="45:13">if <condition pos:start="33:16" pos:end="33:41">(<expr pos:start="33:17" pos:end="33:17"><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr> <comment type="block" pos:start="33:19" pos:end="33:40">/* Skip mode is raw */</comment>)</condition>

            <block pos:start="35:13" pos:end="45:13">{<block_content>

                <comment type="block" pos:start="37:17" pos:end="37:52">/* FIXME getting tired commenting */</comment>

<cpp:if pos:start="39:1" pos:end="39:5">#<cpp:directive pos:start="39:2" pos:end="39:3">if</cpp:directive> <expr pos:start="39:5" pos:end="39:5"><literal type="number" pos:start="39:5" pos:end="39:5">0</literal></expr></cpp:if>

                skip_mb_bit = get_bits(&amp;v-&gt;gb, n); <comment type="line" pos:start="41:52" pos:end="41:56">//vlc</comment>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="47:13" pos:end="89:13"><if pos:start="47:13" pos:end="89:13">if <condition pos:start="47:16" pos:end="47:30">(<expr pos:start="47:17" pos:end="47:29"><operator pos:start="47:17" pos:end="47:17">!</operator><name pos:start="47:18" pos:end="47:29">direct_b_bit</name></expr>)</condition>

            <block pos:start="49:13" pos:end="89:13">{<block_content pos:start="51:17" pos:end="87:17">

                <if_stmt pos:start="51:17" pos:end="87:17"><if pos:start="51:17" pos:end="63:17">if <condition pos:start="51:20" pos:end="51:32">(<expr pos:start="51:21" pos:end="51:31"><name pos:start="51:21" pos:end="51:31">skip_mb_bit</name></expr>)</condition>

                <block pos:start="53:17" pos:end="63:17">{<block_content>

                    <comment type="block" pos:start="55:21" pos:end="55:56">/* FIXME getting tired commenting */</comment>

<cpp:if pos:start="57:1" pos:end="57:5">#<cpp:directive pos:start="57:2" pos:end="57:3">if</cpp:directive> <expr pos:start="57:5" pos:end="57:5"><literal type="number" pos:start="57:5" pos:end="57:5">0</literal></expr></cpp:if>

                    b_mv_type = get_bits(&amp;v-&gt;gb, n); <comment type="line" pos:start="59:54" pos:end="59:58">//vlc</comment>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if>

                <else pos:start="65:17" pos:end="87:17">else

                <block pos:start="67:17" pos:end="87:17">{<block_content pos:start="77:21" pos:end="85:21"> 

                    <comment type="block" pos:start="69:21" pos:end="69:56">/* FIXME getting tired commenting */</comment>

<cpp:if pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:3">if</cpp:directive> <expr pos:start="71:5" pos:end="71:5"><literal type="number" pos:start="71:5" pos:end="71:5">0</literal></expr></cpp:if>

                    b_mv1 = get_bits(&amp;v-&gt;gb, n); <comment type="line" pos:start="73:50" pos:end="73:54">//VLC</comment>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

                    <if_stmt pos:start="77:21" pos:end="85:21"><if pos:start="77:21" pos:end="85:21">if <condition pos:start="77:24" pos:end="77:50">(<expr pos:start="77:25" pos:end="77:25"><literal type="number" pos:start="77:25" pos:end="77:25">1</literal></expr> <comment type="block" pos:start="77:27" pos:end="77:49">/* b_mv1 isn't intra */</comment>)</condition>

                    <block pos:start="79:21" pos:end="85:21">{<block_content pos:start="83:25" pos:end="83:38">

                        <comment type="block" pos:start="81:25" pos:end="81:53">/* FIXME: actually read it */</comment>

                        <expr_stmt pos:start="83:25" pos:end="83:38"><expr pos:start="83:25" pos:end="83:37"><name pos:start="83:25" pos:end="83:33">b_mv_type</name> <operator pos:start="83:35" pos:end="83:35">=</operator> <literal type="number" pos:start="83:37" pos:end="83:37">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="83:40" pos:end="83:44">//vlc</comment>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="91:13" pos:end="148:0"><if pos:start="91:13" pos:end="148:0">if <condition pos:start="91:16" pos:end="91:29">(<expr pos:start="91:17" pos:end="91:28"><operator pos:start="91:17" pos:end="91:17">!</operator><name pos:start="91:18" pos:end="91:28">skip_mb_bit</name></expr>)</condition>

            <block pos:start="93:13" pos:end="148:0">{<block_content pos:start="95:17" pos:end="133:17">

                <if_stmt pos:start="95:17" pos:end="133:17"><if pos:start="95:17" pos:end="105:17">if <condition pos:start="95:20" pos:end="95:37">(<expr pos:start="95:21" pos:end="95:36"><name pos:start="95:21" pos:end="95:25">b_mv1</name> <operator pos:start="95:27" pos:end="95:28">!=</operator> <name pos:start="95:30" pos:end="95:36">last_mb</name></expr>)</condition>

                <block pos:start="97:17" pos:end="105:17">{<block_content pos:start="99:21" pos:end="103:54">

                    <expr_stmt pos:start="99:21" pos:end="99:33"><expr pos:start="99:21" pos:end="99:32"><call pos:start="99:21" pos:end="99:32"><name pos:start="99:21" pos:end="99:30">GET_MQUANT</name><argument_list pos:start="99:31" pos:end="99:32">()</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="101:21" pos:end="103:54"><if pos:start="101:21" pos:end="103:54">if <condition pos:start="101:24" pos:end="101:41">(<expr pos:start="101:25" pos:end="101:25"><literal type="number" pos:start="101:25" pos:end="101:25">1</literal></expr> <comment type="block" pos:start="101:27" pos:end="101:40">/* intra mb */</comment>)</condition><block type="pseudo" pos:start="103:25" pos:end="103:54"><block_content pos:start="103:25" pos:end="103:54">

                        <expr_stmt pos:start="103:25" pos:end="103:54"><expr pos:start="103:25" pos:end="103:53"><name pos:start="103:25" pos:end="103:31">ac_pred</name> <operator pos:start="103:33" pos:end="103:33">=</operator> <call pos:start="103:35" pos:end="103:53"><name pos:start="103:35" pos:end="103:42">get_bits</name><argument_list pos:start="103:43" pos:end="103:53">(<argument pos:start="103:44" pos:end="103:49"><expr pos:start="103:44" pos:end="103:49"><operator pos:start="103:44" pos:end="103:44">&amp;</operator><name pos:start="103:45" pos:end="103:49"><name pos:start="103:45" pos:end="103:45">v</name><operator pos:start="103:46" pos:end="103:47">-&gt;</operator><name pos:start="103:48" pos:end="103:49">gb</name></name></expr></argument>, <argument pos:start="103:52" pos:end="103:52"><expr pos:start="103:52" pos:end="103:52"><literal type="number" pos:start="103:52" pos:end="103:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if>

                <else pos:start="107:17" pos:end="133:17">else

                <block pos:start="109:17" pos:end="133:17">{<block_content pos:start="111:21" pos:end="131:21">

                    <if_stmt pos:start="111:21" pos:end="119:21"><if pos:start="111:21" pos:end="119:21">if <condition pos:start="111:24" pos:end="111:58">(<expr pos:start="111:25" pos:end="111:25"><literal type="number" pos:start="111:25" pos:end="111:25">1</literal></expr> <comment type="block" pos:start="111:27" pos:end="111:57">/* forward_mb is interpolate */</comment>)</condition>

                    <block pos:start="113:21" pos:end="119:21">{<block_content pos:start="117:25" pos:end="117:34">

                        <comment type="block" pos:start="115:25" pos:end="115:53">/* FIXME: actually read it */</comment>

                        <expr_stmt pos:start="117:25" pos:end="117:34"><expr pos:start="117:25" pos:end="117:33"><name pos:start="117:25" pos:end="117:29">b_mv2</name> <operator pos:start="117:31" pos:end="117:31">=</operator> <literal type="number" pos:start="117:33" pos:end="117:33">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="117:36" pos:end="117:40">//vlc</comment>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="121:21" pos:end="131:21"><if pos:start="121:21" pos:end="131:21">if <condition pos:start="121:24" pos:end="121:53">(<expr pos:start="121:25" pos:end="121:25"><literal type="number" pos:start="121:25" pos:end="121:25">1</literal></expr> <comment type="block" pos:start="121:27" pos:end="121:52">/* b_mv2 isn't the last */</comment>)</condition>

                    <block pos:start="123:21" pos:end="131:21">{<block_content pos:start="125:25" pos:end="129:37">

                        <if_stmt pos:start="125:25" pos:end="127:58"><if pos:start="125:25" pos:end="127:58">if <condition pos:start="125:28" pos:end="125:45">(<expr pos:start="125:29" pos:end="125:29"><literal type="number" pos:start="125:29" pos:end="125:29">1</literal></expr> <comment type="block" pos:start="125:31" pos:end="125:44">/* intra_mb */</comment>)</condition><block type="pseudo" pos:start="127:29" pos:end="127:58"><block_content pos:start="127:29" pos:end="127:58">

                            <expr_stmt pos:start="127:29" pos:end="127:58"><expr pos:start="127:29" pos:end="127:57"><name pos:start="127:29" pos:end="127:35">ac_pred</name> <operator pos:start="127:37" pos:end="127:37">=</operator> <call pos:start="127:39" pos:end="127:57"><name pos:start="127:39" pos:end="127:46">get_bits</name><argument_list pos:start="127:47" pos:end="127:57">(<argument pos:start="127:48" pos:end="127:53"><expr pos:start="127:48" pos:end="127:53"><operator pos:start="127:48" pos:end="127:48">&amp;</operator><name pos:start="127:49" pos:end="127:53"><name pos:start="127:49" pos:end="127:49">v</name><operator pos:start="127:50" pos:end="127:51">-&gt;</operator><name pos:start="127:52" pos:end="127:53">gb</name></name></expr></argument>, <argument pos:start="127:56" pos:end="127:56"><expr pos:start="127:56" pos:end="127:56"><literal type="number" pos:start="127:56" pos:end="127:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="129:25" pos:end="129:37"><expr pos:start="129:25" pos:end="129:36"><call pos:start="129:25" pos:end="129:36"><name pos:start="129:25" pos:end="129:34">GET_MQUANT</name><argument_list pos:start="129:35" pos:end="129:36">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="line" pos:start="137:13" pos:end="137:18">//End1</comment>

            <comment type="block" pos:start="139:13" pos:end="139:49">/* FIXME getting tired, commenting */</comment>

<cpp:if pos:start="141:1" pos:end="141:5">#<cpp:directive pos:start="141:2" pos:end="141:3">if</cpp:directive> <expr pos:start="141:5" pos:end="141:5"><literal type="number" pos:start="141:5" pos:end="141:5">0</literal></expr></cpp:if>

            if (v-&gt;ttmbf)

                v-&gt;ttmb = get_bits(&amp;v-&gt;gb, n); <comment type="line" pos:start="145:48" pos:end="145:52">//vlc</comment>

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></for>

        <comment type="line" pos:start="151:9" pos:end="151:14">//End2</comment>

        <for pos:start="153:9" pos:end="159:9">for <control pos:start="153:13" pos:end="153:27">(<init pos:start="153:14" pos:end="153:17"><expr pos:start="153:14" pos:end="153:16"><name pos:start="153:14" pos:end="153:14">i</name><operator pos:start="153:15" pos:end="153:15">=</operator><literal type="number" pos:start="153:16" pos:end="153:16">0</literal></expr>;</init> <condition pos:start="153:19" pos:end="153:22"><expr pos:start="153:19" pos:end="153:21"><name pos:start="153:19" pos:end="153:19">i</name><operator pos:start="153:20" pos:end="153:20">&lt;</operator><literal type="number" pos:start="153:21" pos:end="153:21">6</literal></expr>;</condition> <incr pos:start="153:24" pos:end="153:26"><expr pos:start="153:24" pos:end="153:26"><name pos:start="153:24" pos:end="153:24">i</name><operator pos:start="153:25" pos:end="153:26">++</operator></expr></incr>)</control>

        <block pos:start="155:9" pos:end="159:9">{<block_content>

            <comment type="block" pos:start="157:13" pos:end="157:42">/* FIXME: process the block */</comment>

        </block_content>}</block></for>



        <expr_stmt pos:start="163:9" pos:end="163:21"><expr pos:start="163:9" pos:end="163:20"><name pos:start="163:9" pos:end="163:18">current_mb</name><operator pos:start="163:19" pos:end="163:20">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="167:5" pos:end="167:13">return <expr pos:start="167:12" pos:end="167:12"><literal type="number" pos:start="167:12" pos:end="167:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
