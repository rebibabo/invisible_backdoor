<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19681.c" pos:tabs="8"><function pos:start="1:1" pos:end="239:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">ws_snd_decode_frame</name><parameter_list pos:start="1:31" pos:end="5:32">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:26"><decl pos:start="3:17" pos:end="3:26"><type pos:start="3:17" pos:end="3:26"><name pos:start="3:17" pos:end="3:20">void</name> <modifier pos:start="3:22" pos:end="3:22">*</modifier></type><name pos:start="3:23" pos:end="3:26">data</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">data_size</name></decl></parameter>,

                <parameter pos:start="5:17" pos:end="5:31"><decl pos:start="5:17" pos:end="5:31"><type pos:start="5:17" pos:end="5:31"><name pos:start="5:17" pos:end="5:24">AVPacket</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:31">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="239:1">{<block_content pos:start="9:5" pos:end="237:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="13:1" pos:end="13:41">//    WSSNDContext *c = avctx-&gt;priv_data;</comment>



    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">in_size</name></decl>, <decl pos:start="17:18" pos:end="17:25"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:18" pos:end="17:25">out_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">sample</name> <init pos:start="19:16" pos:end="19:20">= <expr pos:start="19:18" pos:end="19:20"><literal type="number" pos:start="19:18" pos:end="19:20">128</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">uint8_t</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:20">samples</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">uint8_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:24">samples_end</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="31:17"><if pos:start="29:5" pos:end="31:17">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:17">buf_size</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:17"><block_content pos:start="31:9" pos:end="31:17">

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:21">(<expr pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:16">buf_size</name> <operator pos:start="35:18" pos:end="35:18">&lt;</operator> <literal type="number" pos:start="35:20" pos:end="35:20">4</literal></expr>)</condition> <block pos:start="35:23" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:31">

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><call pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:60">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:59"><expr pos:start="37:37" pos:end="37:59"><literal type="string" pos:start="37:37" pos:end="37:59">"packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:31">return <expr pos:start="39:16" pos:end="39:30"><call pos:start="39:16" pos:end="39:30"><name pos:start="39:16" pos:end="39:22">AVERROR</name><argument_list pos:start="39:23" pos:end="39:30">(<argument pos:start="39:24" pos:end="39:29"><expr pos:start="39:24" pos:end="39:29"><name pos:start="39:24" pos:end="39:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:32"><expr pos:start="45:5" pos:end="45:31"><name pos:start="45:5" pos:end="45:12">out_size</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:31"><name pos:start="45:16" pos:end="45:22">AV_RL16</name><argument_list pos:start="45:23" pos:end="45:31">(<argument pos:start="45:24" pos:end="45:30"><expr pos:start="45:24" pos:end="45:30"><operator pos:start="45:24" pos:end="45:24">&amp;</operator><name pos:start="45:25" pos:end="45:30"><name pos:start="45:25" pos:end="45:27">buf</name><index pos:start="45:28" pos:end="45:30">[<expr pos:start="45:29" pos:end="45:29"><literal type="number" pos:start="45:29" pos:end="45:29">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:11">in_size</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:30"><name pos:start="47:15" pos:end="47:21">AV_RL16</name><argument_list pos:start="47:22" pos:end="47:30">(<argument pos:start="47:23" pos:end="47:29"><expr pos:start="47:23" pos:end="47:29"><operator pos:start="47:23" pos:end="47:23">&amp;</operator><name pos:start="47:24" pos:end="47:29"><name pos:start="47:24" pos:end="47:26">buf</name><index pos:start="47:27" pos:end="47:29">[<expr pos:start="47:28" pos:end="47:28"><literal type="number" pos:start="47:28" pos:end="47:28">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:13"><expr pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:7">buf</name> <operator pos:start="49:9" pos:end="49:10">+=</operator> <literal type="number" pos:start="49:12" pos:end="49:12">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:30">(<expr pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:16">out_size</name> <operator pos:start="53:18" pos:end="53:18">&gt;</operator> <operator pos:start="53:20" pos:end="53:20">*</operator><name pos:start="53:21" pos:end="53:29">data_size</name></expr>)</condition> <block pos:start="53:32" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:18">

        <expr_stmt pos:start="55:9" pos:end="55:77"><expr pos:start="55:9" pos:end="55:76"><call pos:start="55:9" pos:end="55:76"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:76">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">avctx</name></expr></argument>, <argument pos:start="55:23" pos:end="55:34"><expr pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:37" pos:end="55:75"><expr pos:start="55:37" pos:end="55:75"><literal type="string" pos:start="55:37" pos:end="55:75">"Frame is too large to fit in buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:27">(<expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:15">in_size</name> <operator pos:start="61:17" pos:end="61:17">&gt;</operator> <name pos:start="61:19" pos:end="61:26">buf_size</name></expr>)</condition> <block pos:start="61:29" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:18">

        <expr_stmt pos:start="63:9" pos:end="63:80"><expr pos:start="63:9" pos:end="63:79"><call pos:start="63:9" pos:end="63:79"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="63:79">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><name pos:start="63:16" pos:end="63:20">avctx</name></expr></argument>, <argument pos:start="63:23" pos:end="63:34"><expr pos:start="63:23" pos:end="63:34"><name pos:start="63:23" pos:end="63:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:37" pos:end="63:78"><expr pos:start="63:37" pos:end="63:78"><literal type="string" pos:start="63:37" pos:end="63:78">"Frame data is larger than input buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:37"><expr pos:start="69:5" pos:end="69:36"><name pos:start="69:5" pos:end="69:15">samples_end</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:25">samples</name> <operator pos:start="69:27" pos:end="69:27">+</operator> <name pos:start="69:29" pos:end="69:36">out_size</name></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="83:5"><if pos:start="73:5" pos:end="83:5">if <condition pos:start="73:8" pos:end="73:28">(<expr pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:15">in_size</name> <operator pos:start="73:17" pos:end="73:18">==</operator> <name pos:start="73:20" pos:end="73:27">out_size</name></expr>)</condition> <block pos:start="73:30" pos:end="83:5">{<block_content pos:start="75:9" pos:end="81:24">

        <for pos:start="75:9" pos:end="77:32">for <control pos:start="75:13" pos:end="75:38">(<init pos:start="75:14" pos:end="75:19"><expr pos:start="75:14" pos:end="75:18"><name pos:start="75:14" pos:end="75:14">i</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="number" pos:start="75:18" pos:end="75:18">0</literal></expr>;</init> <condition pos:start="75:21" pos:end="75:33"><expr pos:start="75:21" pos:end="75:32"><name pos:start="75:21" pos:end="75:21">i</name> <operator pos:start="75:23" pos:end="75:23">&lt;</operator> <name pos:start="75:25" pos:end="75:32">out_size</name></expr>;</condition> <incr pos:start="75:35" pos:end="75:37"><expr pos:start="75:35" pos:end="75:37"><name pos:start="75:35" pos:end="75:35">i</name><operator pos:start="75:36" pos:end="75:37">++</operator></expr></incr>)</control><block type="pseudo" pos:start="77:13" pos:end="77:32"><block_content pos:start="77:13" pos:end="77:32">

            <expr_stmt pos:start="77:13" pos:end="77:32"><expr pos:start="77:13" pos:end="77:31"><operator pos:start="77:13" pos:end="77:13">*</operator><name pos:start="77:14" pos:end="77:20">samples</name><operator pos:start="77:21" pos:end="77:22">++</operator> <operator pos:start="77:24" pos:end="77:24">=</operator> <operator pos:start="77:26" pos:end="77:26">*</operator><name pos:start="77:27" pos:end="77:29">buf</name><operator pos:start="77:30" pos:end="77:31">++</operator></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><operator pos:start="79:9" pos:end="79:9">*</operator><name pos:start="79:10" pos:end="79:18">data_size</name> <operator pos:start="79:20" pos:end="79:20">=</operator> <name pos:start="79:22" pos:end="79:29">out_size</name></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:24">return <expr pos:start="81:16" pos:end="81:23"><name pos:start="81:16" pos:end="81:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="87:5" pos:end="229:5">while <condition pos:start="87:11" pos:end="87:65">(<expr pos:start="87:12" pos:end="87:64"><name pos:start="87:12" pos:end="87:18">samples</name> <operator pos:start="87:20" pos:end="87:20">&lt;</operator> <name pos:start="87:22" pos:end="87:32">samples_end</name> <operator pos:start="87:34" pos:end="87:35">&amp;&amp;</operator> <name pos:start="87:37" pos:end="87:39">buf</name> <operator pos:start="87:41" pos:end="87:41">-</operator> <name pos:start="87:43" pos:end="87:53"><name pos:start="87:43" pos:end="87:47">avpkt</name><operator pos:start="87:48" pos:end="87:49">-&gt;</operator><name pos:start="87:50" pos:end="87:53">data</name></name> <operator pos:start="87:55" pos:end="87:55">&lt;</operator> <name pos:start="87:57" pos:end="87:64">buf_size</name></expr>)</condition> <block pos:start="87:67" pos:end="229:5">{<block_content pos:start="89:9" pos:end="227:9">

        <decl_stmt pos:start="89:9" pos:end="89:28"><decl pos:start="89:9" pos:end="89:16"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:16">code</name></decl>, <decl pos:start="89:19" pos:end="89:21"><type ref="prev" pos:start="89:9" pos:end="89:11"/><name pos:start="89:19" pos:end="89:21">smp</name></decl>, <decl pos:start="89:24" pos:end="89:27"><type ref="prev" pos:start="89:9" pos:end="89:11"/><name pos:start="89:24" pos:end="89:27">size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="91:9" pos:end="91:22"><decl pos:start="91:9" pos:end="91:21"><type pos:start="91:9" pos:end="91:15"><name pos:start="91:9" pos:end="91:15">uint8_t</name></type> <name pos:start="91:17" pos:end="91:21">count</name></decl>;</decl_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:27"><expr pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:12">code</name> <operator pos:start="93:14" pos:end="93:14">=</operator> <operator pos:start="93:16" pos:end="93:16">(</operator><operator pos:start="93:17" pos:end="93:17">*</operator><name pos:start="93:18" pos:end="93:20">buf</name><operator pos:start="93:21" pos:end="93:21">)</operator> <operator pos:start="93:23" pos:end="93:24">&gt;&gt;</operator> <literal type="number" pos:start="93:26" pos:end="93:26">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:30"><expr pos:start="95:9" pos:end="95:29"><name pos:start="95:9" pos:end="95:13">count</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <operator pos:start="95:17" pos:end="95:17">(</operator><operator pos:start="95:18" pos:end="95:18">*</operator><name pos:start="95:19" pos:end="95:21">buf</name><operator pos:start="95:22" pos:end="95:22">)</operator> <operator pos:start="95:24" pos:end="95:24">&amp;</operator> <literal type="number" pos:start="95:26" pos:end="95:29">0x3F</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:14"><expr pos:start="97:9" pos:end="97:13"><name pos:start="97:9" pos:end="97:11">buf</name><operator pos:start="97:12" pos:end="97:13">++</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="101:9" pos:end="101:61">/* make sure we don't write past the output buffer */</comment>

        <switch pos:start="103:9" pos:end="113:9">switch <condition pos:start="103:16" pos:end="103:21">(<expr pos:start="103:17" pos:end="103:20"><name pos:start="103:17" pos:end="103:20">code</name></expr>)</condition> <block pos:start="103:23" pos:end="113:9">{<block_content pos:start="105:9" pos:end="111:61">

        <case pos:start="105:9" pos:end="105:15">case <expr pos:start="105:14" pos:end="105:14"><literal type="number" pos:start="105:14" pos:end="105:14">0</literal></expr>:</case>  <expr_stmt pos:start="105:18" pos:end="105:25"><expr pos:start="105:18" pos:end="105:24"><name pos:start="105:18" pos:end="105:20">smp</name> <operator pos:start="105:22" pos:end="105:22">=</operator> <literal type="number" pos:start="105:24" pos:end="105:24">4</literal></expr>;</expr_stmt>                              <break pos:start="105:56" pos:end="105:61">break;</break>

        <case pos:start="107:9" pos:end="107:15">case <expr pos:start="107:14" pos:end="107:14"><literal type="number" pos:start="107:14" pos:end="107:14">1</literal></expr>:</case>  <expr_stmt pos:start="107:18" pos:end="107:25"><expr pos:start="107:18" pos:end="107:24"><name pos:start="107:18" pos:end="107:20">smp</name> <operator pos:start="107:22" pos:end="107:22">=</operator> <literal type="number" pos:start="107:24" pos:end="107:24">2</literal></expr>;</expr_stmt>                              <break pos:start="107:56" pos:end="107:61">break;</break>

        <case pos:start="109:9" pos:end="109:15">case <expr pos:start="109:14" pos:end="109:14"><literal type="number" pos:start="109:14" pos:end="109:14">2</literal></expr>:</case>  <expr_stmt pos:start="109:18" pos:end="109:54"><expr pos:start="109:18" pos:end="109:53"><name pos:start="109:18" pos:end="109:20">smp</name> <operator pos:start="109:22" pos:end="109:22">=</operator> <ternary pos:start="109:24" pos:end="109:53"><condition pos:start="109:24" pos:end="109:39"><expr pos:start="109:24" pos:end="109:37"><operator pos:start="109:24" pos:end="109:24">(</operator><name pos:start="109:25" pos:end="109:29">count</name> <operator pos:start="109:31" pos:end="109:31">&amp;</operator> <literal type="number" pos:start="109:33" pos:end="109:36">0x20</literal><operator pos:start="109:37" pos:end="109:37">)</operator></expr> ?</condition><then pos:start="109:41" pos:end="109:41"> <expr pos:start="109:41" pos:end="109:41"><literal type="number" pos:start="109:41" pos:end="109:41">1</literal></expr> </then><else pos:start="109:43" pos:end="109:53">: <expr pos:start="109:45" pos:end="109:53"><name pos:start="109:45" pos:end="109:49">count</name> <operator pos:start="109:51" pos:end="109:51">+</operator> <literal type="number" pos:start="109:53" pos:end="109:53">1</literal></expr></else></ternary></expr>;</expr_stmt> <break pos:start="109:56" pos:end="109:61">break;</break>

        <default pos:start="111:9" pos:end="111:16">default:</default> <expr_stmt pos:start="111:18" pos:end="111:33"><expr pos:start="111:18" pos:end="111:32"><name pos:start="111:18" pos:end="111:20">smp</name> <operator pos:start="111:22" pos:end="111:22">=</operator> <name pos:start="111:24" pos:end="111:28">count</name> <operator pos:start="111:30" pos:end="111:30">+</operator> <literal type="number" pos:start="111:32" pos:end="111:32">1</literal></expr>;</expr_stmt>                      <break pos:start="111:56" pos:end="111:61">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="115:9" pos:end="117:18"><if pos:start="115:9" pos:end="117:18">if <condition pos:start="115:12" pos:end="115:40">(<expr pos:start="115:13" pos:end="115:39"><name pos:start="115:13" pos:end="115:23">samples_end</name> <operator pos:start="115:25" pos:end="115:25">-</operator> <name pos:start="115:27" pos:end="115:33">samples</name> <operator pos:start="115:35" pos:end="115:35">&lt;</operator> <name pos:start="115:37" pos:end="115:39">smp</name></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:18"><block_content pos:start="117:13" pos:end="117:18">

            <break pos:start="117:13" pos:end="117:18">break;</break></block_content></block></if></if_stmt>



        <comment type="block" pos:start="121:9" pos:end="121:59">/* make sure we don't read past the input buffer */</comment>

        <expr_stmt pos:start="123:9" pos:end="123:76"><expr pos:start="123:9" pos:end="123:75"><name pos:start="123:9" pos:end="123:12">size</name> <operator pos:start="123:14" pos:end="123:14">=</operator> <ternary pos:start="123:16" pos:end="123:75"><condition pos:start="123:16" pos:end="123:61"><expr pos:start="123:16" pos:end="123:59"><operator pos:start="123:16" pos:end="123:16">(</operator><operator pos:start="123:17" pos:end="123:17">(</operator><name pos:start="123:18" pos:end="123:21">code</name> <operator pos:start="123:23" pos:end="123:24">==</operator> <literal type="number" pos:start="123:26" pos:end="123:26">2</literal> <operator pos:start="123:28" pos:end="123:29">&amp;&amp;</operator> <operator pos:start="123:31" pos:end="123:31">(</operator><name pos:start="123:32" pos:end="123:36">count</name> <operator pos:start="123:38" pos:end="123:38">&amp;</operator> <literal type="number" pos:start="123:40" pos:end="123:43">0x20</literal><operator pos:start="123:44" pos:end="123:44">)</operator><operator pos:start="123:45" pos:end="123:45">)</operator> <operator pos:start="123:47" pos:end="123:48">||</operator> <name pos:start="123:50" pos:end="123:53">code</name> <operator pos:start="123:55" pos:end="123:56">==</operator> <literal type="number" pos:start="123:58" pos:end="123:58">3</literal><operator pos:start="123:59" pos:end="123:59">)</operator></expr> ?</condition><then pos:start="123:63" pos:end="123:63"> <expr pos:start="123:63" pos:end="123:63"><literal type="number" pos:start="123:63" pos:end="123:63">0</literal></expr> </then><else pos:start="123:65" pos:end="123:75">: <expr pos:start="123:67" pos:end="123:75"><name pos:start="123:67" pos:end="123:71">count</name> <operator pos:start="123:73" pos:end="123:73">+</operator> <literal type="number" pos:start="123:75" pos:end="123:75">1</literal></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="127:18"><if pos:start="125:9" pos:end="127:18">if <condition pos:start="125:12" pos:end="125:50">(<expr pos:start="125:13" pos:end="125:49"><operator pos:start="125:13" pos:end="125:13">(</operator><name pos:start="125:14" pos:end="125:16">buf</name> <operator pos:start="125:18" pos:end="125:18">-</operator> <name pos:start="125:20" pos:end="125:30"><name pos:start="125:20" pos:end="125:24">avpkt</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:30">data</name></name><operator pos:start="125:31" pos:end="125:31">)</operator> <operator pos:start="125:33" pos:end="125:33">+</operator> <name pos:start="125:35" pos:end="125:38">size</name> <operator pos:start="125:40" pos:end="125:40">&gt;</operator> <name pos:start="125:42" pos:end="125:49">buf_size</name></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:18"><block_content pos:start="127:13" pos:end="127:18">

            <break pos:start="127:13" pos:end="127:18">break;</break></block_content></block></if></if_stmt>



        <switch pos:start="131:9" pos:end="227:9">switch<condition pos:start="131:15" pos:end="131:20">(<expr pos:start="131:16" pos:end="131:19"><name pos:start="131:16" pos:end="131:19">code</name></expr>)</condition> <block pos:start="131:22" pos:end="227:9">{<block_content pos:start="133:9" pos:end="225:13">

        <case pos:start="133:9" pos:end="133:15">case <expr pos:start="133:14" pos:end="133:14"><literal type="number" pos:start="133:14" pos:end="133:14">0</literal></expr>:</case> <comment type="block" pos:start="133:17" pos:end="133:33">/* ADPCM 2-bit */</comment>

            <for pos:start="135:13" pos:end="163:13">for <control pos:start="135:17" pos:end="135:45">(<init pos:start="135:18" pos:end="135:25"><expr pos:start="135:18" pos:end="135:24"><name pos:start="135:18" pos:end="135:22">count</name><operator pos:start="135:23" pos:end="135:24">++</operator></expr>;</init> <condition pos:start="135:27" pos:end="135:36"><expr pos:start="135:27" pos:end="135:35"><name pos:start="135:27" pos:end="135:31">count</name> <operator pos:start="135:33" pos:end="135:33">&gt;</operator> <literal type="number" pos:start="135:35" pos:end="135:35">0</literal></expr>;</condition> <incr pos:start="135:38" pos:end="135:44"><expr pos:start="135:38" pos:end="135:44"><name pos:start="135:38" pos:end="135:42">count</name><operator pos:start="135:43" pos:end="135:44">--</operator></expr></incr>)</control> <block pos:start="135:47" pos:end="163:13">{<block_content pos:start="137:17" pos:end="161:36">

                <expr_stmt pos:start="137:17" pos:end="137:30"><expr pos:start="137:17" pos:end="137:29"><name pos:start="137:17" pos:end="137:20">code</name> <operator pos:start="137:22" pos:end="137:22">=</operator> <operator pos:start="137:24" pos:end="137:24">*</operator><name pos:start="137:25" pos:end="137:27">buf</name><operator pos:start="137:28" pos:end="137:29">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:52"><expr pos:start="139:17" pos:end="139:51"><name pos:start="139:17" pos:end="139:22">sample</name> <operator pos:start="139:24" pos:end="139:25">+=</operator> <name pos:start="139:27" pos:end="139:51"><name pos:start="139:27" pos:end="139:39">ws_adpcm_2bit</name><index pos:start="139:40" pos:end="139:51">[<expr pos:start="139:41" pos:end="139:50"><name pos:start="139:41" pos:end="139:44">code</name> <operator pos:start="139:46" pos:end="139:46">&amp;</operator> <literal type="number" pos:start="139:48" pos:end="139:50">0x3</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:47"><expr pos:start="141:17" pos:end="141:46"><name pos:start="141:17" pos:end="141:22">sample</name> <operator pos:start="141:24" pos:end="141:24">=</operator> <call pos:start="141:26" pos:end="141:46"><name pos:start="141:26" pos:end="141:38">av_clip_uint8</name><argument_list pos:start="141:39" pos:end="141:46">(<argument pos:start="141:40" pos:end="141:45"><expr pos:start="141:40" pos:end="141:45"><name pos:start="141:40" pos:end="141:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:36"><expr pos:start="143:17" pos:end="143:35"><operator pos:start="143:17" pos:end="143:17">*</operator><name pos:start="143:18" pos:end="143:24">samples</name><operator pos:start="143:25" pos:end="143:26">++</operator> <operator pos:start="143:28" pos:end="143:28">=</operator> <name pos:start="143:30" pos:end="143:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="145:17" pos:end="145:59"><expr pos:start="145:17" pos:end="145:58"><name pos:start="145:17" pos:end="145:22">sample</name> <operator pos:start="145:24" pos:end="145:25">+=</operator> <name pos:start="145:27" pos:end="145:58"><name pos:start="145:27" pos:end="145:39">ws_adpcm_2bit</name><index pos:start="145:40" pos:end="145:58">[<expr pos:start="145:41" pos:end="145:57"><operator pos:start="145:41" pos:end="145:41">(</operator><name pos:start="145:42" pos:end="145:45">code</name> <operator pos:start="145:47" pos:end="145:48">&gt;&gt;</operator> <literal type="number" pos:start="145:50" pos:end="145:50">2</literal><operator pos:start="145:51" pos:end="145:51">)</operator> <operator pos:start="145:53" pos:end="145:53">&amp;</operator> <literal type="number" pos:start="145:55" pos:end="145:57">0x3</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="147:17" pos:end="147:47"><expr pos:start="147:17" pos:end="147:46"><name pos:start="147:17" pos:end="147:22">sample</name> <operator pos:start="147:24" pos:end="147:24">=</operator> <call pos:start="147:26" pos:end="147:46"><name pos:start="147:26" pos:end="147:38">av_clip_uint8</name><argument_list pos:start="147:39" pos:end="147:46">(<argument pos:start="147:40" pos:end="147:45"><expr pos:start="147:40" pos:end="147:45"><name pos:start="147:40" pos:end="147:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:36"><expr pos:start="149:17" pos:end="149:35"><operator pos:start="149:17" pos:end="149:17">*</operator><name pos:start="149:18" pos:end="149:24">samples</name><operator pos:start="149:25" pos:end="149:26">++</operator> <operator pos:start="149:28" pos:end="149:28">=</operator> <name pos:start="149:30" pos:end="149:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:59"><expr pos:start="151:17" pos:end="151:58"><name pos:start="151:17" pos:end="151:22">sample</name> <operator pos:start="151:24" pos:end="151:25">+=</operator> <name pos:start="151:27" pos:end="151:58"><name pos:start="151:27" pos:end="151:39">ws_adpcm_2bit</name><index pos:start="151:40" pos:end="151:58">[<expr pos:start="151:41" pos:end="151:57"><operator pos:start="151:41" pos:end="151:41">(</operator><name pos:start="151:42" pos:end="151:45">code</name> <operator pos:start="151:47" pos:end="151:48">&gt;&gt;</operator> <literal type="number" pos:start="151:50" pos:end="151:50">4</literal><operator pos:start="151:51" pos:end="151:51">)</operator> <operator pos:start="151:53" pos:end="151:53">&amp;</operator> <literal type="number" pos:start="151:55" pos:end="151:57">0x3</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:47"><expr pos:start="153:17" pos:end="153:46"><name pos:start="153:17" pos:end="153:22">sample</name> <operator pos:start="153:24" pos:end="153:24">=</operator> <call pos:start="153:26" pos:end="153:46"><name pos:start="153:26" pos:end="153:38">av_clip_uint8</name><argument_list pos:start="153:39" pos:end="153:46">(<argument pos:start="153:40" pos:end="153:45"><expr pos:start="153:40" pos:end="153:45"><name pos:start="153:40" pos:end="153:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:36"><expr pos:start="155:17" pos:end="155:35"><operator pos:start="155:17" pos:end="155:17">*</operator><name pos:start="155:18" pos:end="155:24">samples</name><operator pos:start="155:25" pos:end="155:26">++</operator> <operator pos:start="155:28" pos:end="155:28">=</operator> <name pos:start="155:30" pos:end="155:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:59"><expr pos:start="157:17" pos:end="157:58"><name pos:start="157:17" pos:end="157:22">sample</name> <operator pos:start="157:24" pos:end="157:25">+=</operator> <name pos:start="157:27" pos:end="157:58"><name pos:start="157:27" pos:end="157:39">ws_adpcm_2bit</name><index pos:start="157:40" pos:end="157:58">[<expr pos:start="157:41" pos:end="157:57"><operator pos:start="157:41" pos:end="157:41">(</operator><name pos:start="157:42" pos:end="157:45">code</name> <operator pos:start="157:47" pos:end="157:48">&gt;&gt;</operator> <literal type="number" pos:start="157:50" pos:end="157:50">6</literal><operator pos:start="157:51" pos:end="157:51">)</operator> <operator pos:start="157:53" pos:end="157:53">&amp;</operator> <literal type="number" pos:start="157:55" pos:end="157:57">0x3</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:47"><expr pos:start="159:17" pos:end="159:46"><name pos:start="159:17" pos:end="159:22">sample</name> <operator pos:start="159:24" pos:end="159:24">=</operator> <call pos:start="159:26" pos:end="159:46"><name pos:start="159:26" pos:end="159:38">av_clip_uint8</name><argument_list pos:start="159:39" pos:end="159:46">(<argument pos:start="159:40" pos:end="159:45"><expr pos:start="159:40" pos:end="159:45"><name pos:start="159:40" pos:end="159:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:36"><expr pos:start="161:17" pos:end="161:35"><operator pos:start="161:17" pos:end="161:17">*</operator><name pos:start="161:18" pos:end="161:24">samples</name><operator pos:start="161:25" pos:end="161:26">++</operator> <operator pos:start="161:28" pos:end="161:28">=</operator> <name pos:start="161:30" pos:end="161:35">sample</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <case pos:start="167:9" pos:end="167:15">case <expr pos:start="167:14" pos:end="167:14"><literal type="number" pos:start="167:14" pos:end="167:14">1</literal></expr>:</case> <comment type="block" pos:start="167:17" pos:end="167:33">/* ADPCM 4-bit */</comment>

            <for pos:start="169:13" pos:end="185:13">for <control pos:start="169:17" pos:end="169:45">(<init pos:start="169:18" pos:end="169:25"><expr pos:start="169:18" pos:end="169:24"><name pos:start="169:18" pos:end="169:22">count</name><operator pos:start="169:23" pos:end="169:24">++</operator></expr>;</init> <condition pos:start="169:27" pos:end="169:36"><expr pos:start="169:27" pos:end="169:35"><name pos:start="169:27" pos:end="169:31">count</name> <operator pos:start="169:33" pos:end="169:33">&gt;</operator> <literal type="number" pos:start="169:35" pos:end="169:35">0</literal></expr>;</condition> <incr pos:start="169:38" pos:end="169:44"><expr pos:start="169:38" pos:end="169:44"><name pos:start="169:38" pos:end="169:42">count</name><operator pos:start="169:43" pos:end="169:44">--</operator></expr></incr>)</control> <block pos:start="169:47" pos:end="185:13">{<block_content pos:start="171:17" pos:end="183:36">

                <expr_stmt pos:start="171:17" pos:end="171:30"><expr pos:start="171:17" pos:end="171:29"><name pos:start="171:17" pos:end="171:20">code</name> <operator pos:start="171:22" pos:end="171:22">=</operator> <operator pos:start="171:24" pos:end="171:24">*</operator><name pos:start="171:25" pos:end="171:27">buf</name><operator pos:start="171:28" pos:end="171:29">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:52"><expr pos:start="173:17" pos:end="173:51"><name pos:start="173:17" pos:end="173:22">sample</name> <operator pos:start="173:24" pos:end="173:25">+=</operator> <name pos:start="173:27" pos:end="173:51"><name pos:start="173:27" pos:end="173:39">ws_adpcm_4bit</name><index pos:start="173:40" pos:end="173:51">[<expr pos:start="173:41" pos:end="173:50"><name pos:start="173:41" pos:end="173:44">code</name> <operator pos:start="173:46" pos:end="173:46">&amp;</operator> <literal type="number" pos:start="173:48" pos:end="173:50">0xF</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:47"><expr pos:start="175:17" pos:end="175:46"><name pos:start="175:17" pos:end="175:22">sample</name> <operator pos:start="175:24" pos:end="175:24">=</operator> <call pos:start="175:26" pos:end="175:46"><name pos:start="175:26" pos:end="175:38">av_clip_uint8</name><argument_list pos:start="175:39" pos:end="175:46">(<argument pos:start="175:40" pos:end="175:45"><expr pos:start="175:40" pos:end="175:45"><name pos:start="175:40" pos:end="175:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:36"><expr pos:start="177:17" pos:end="177:35"><operator pos:start="177:17" pos:end="177:17">*</operator><name pos:start="177:18" pos:end="177:24">samples</name><operator pos:start="177:25" pos:end="177:26">++</operator> <operator pos:start="177:28" pos:end="177:28">=</operator> <name pos:start="177:30" pos:end="177:35">sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:51"><expr pos:start="179:17" pos:end="179:50"><name pos:start="179:17" pos:end="179:22">sample</name> <operator pos:start="179:24" pos:end="179:25">+=</operator> <name pos:start="179:27" pos:end="179:50"><name pos:start="179:27" pos:end="179:39">ws_adpcm_4bit</name><index pos:start="179:40" pos:end="179:50">[<expr pos:start="179:41" pos:end="179:49"><name pos:start="179:41" pos:end="179:44">code</name> <operator pos:start="179:46" pos:end="179:47">&gt;&gt;</operator> <literal type="number" pos:start="179:49" pos:end="179:49">4</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:47"><expr pos:start="181:17" pos:end="181:46"><name pos:start="181:17" pos:end="181:22">sample</name> <operator pos:start="181:24" pos:end="181:24">=</operator> <call pos:start="181:26" pos:end="181:46"><name pos:start="181:26" pos:end="181:38">av_clip_uint8</name><argument_list pos:start="181:39" pos:end="181:46">(<argument pos:start="181:40" pos:end="181:45"><expr pos:start="181:40" pos:end="181:45"><name pos:start="181:40" pos:end="181:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:36"><expr pos:start="183:17" pos:end="183:35"><operator pos:start="183:17" pos:end="183:17">*</operator><name pos:start="183:18" pos:end="183:24">samples</name><operator pos:start="183:25" pos:end="183:26">++</operator> <operator pos:start="183:28" pos:end="183:28">=</operator> <name pos:start="183:30" pos:end="183:35">sample</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="187:13" pos:end="187:18">break;</break>

        <case pos:start="189:9" pos:end="189:15">case <expr pos:start="189:14" pos:end="189:14"><literal type="number" pos:start="189:14" pos:end="189:14">2</literal></expr>:</case> <comment type="block" pos:start="189:17" pos:end="189:36">/* no compression */</comment>

            <if_stmt pos:start="191:13" pos:end="215:13"><if pos:start="191:13" pos:end="205:13">if <condition pos:start="191:16" pos:end="191:29">(<expr pos:start="191:17" pos:end="191:28"><name pos:start="191:17" pos:end="191:21">count</name> <operator pos:start="191:23" pos:end="191:23">&amp;</operator> <literal type="number" pos:start="191:25" pos:end="191:28">0x20</literal></expr>)</condition> <block pos:start="191:31" pos:end="205:13">{<block_content pos:start="193:17" pos:end="203:36"> <comment type="block" pos:start="191:33" pos:end="191:47">/* big delta */</comment>

                <decl_stmt pos:start="193:17" pos:end="193:25"><decl pos:start="193:17" pos:end="193:24"><type pos:start="193:17" pos:end="193:22"><name pos:start="193:17" pos:end="193:22">int8_t</name></type> <name pos:start="193:24" pos:end="193:24">t</name></decl>;</decl_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:26"><expr pos:start="195:17" pos:end="195:25"><name pos:start="195:17" pos:end="195:17">t</name> <operator pos:start="195:19" pos:end="195:19">=</operator> <name pos:start="195:21" pos:end="195:25">count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:24"><expr pos:start="197:17" pos:end="197:23"><name pos:start="197:17" pos:end="197:17">t</name> <operator pos:start="197:19" pos:end="197:21">&lt;&lt;=</operator> <literal type="number" pos:start="197:23" pos:end="197:23">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:33"><expr pos:start="199:17" pos:end="199:32"><name pos:start="199:17" pos:end="199:22">sample</name> <operator pos:start="199:24" pos:end="199:25">+=</operator> <name pos:start="199:27" pos:end="199:27">t</name> <operator pos:start="199:29" pos:end="199:30">&gt;&gt;</operator> <literal type="number" pos:start="199:32" pos:end="199:32">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:47"><expr pos:start="201:17" pos:end="201:46"><name pos:start="201:17" pos:end="201:22">sample</name> <operator pos:start="201:24" pos:end="201:24">=</operator> <call pos:start="201:26" pos:end="201:46"><name pos:start="201:26" pos:end="201:38">av_clip_uint8</name><argument_list pos:start="201:39" pos:end="201:46">(<argument pos:start="201:40" pos:end="201:45"><expr pos:start="201:40" pos:end="201:45"><name pos:start="201:40" pos:end="201:45">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:36"><expr pos:start="203:17" pos:end="203:35"><operator pos:start="203:17" pos:end="203:17">*</operator><name pos:start="203:18" pos:end="203:24">samples</name><operator pos:start="203:25" pos:end="203:26">++</operator> <operator pos:start="203:28" pos:end="203:28">=</operator> <name pos:start="203:30" pos:end="203:35">sample</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="205:15" pos:end="215:13">else <block pos:start="205:20" pos:end="215:13">{<block_content pos:start="207:17" pos:end="213:33"> <comment type="block" pos:start="205:22" pos:end="205:31">/* copy */</comment>

                <for pos:start="207:17" pos:end="211:17">for <control pos:start="207:21" pos:end="207:49">(<init pos:start="207:22" pos:end="207:29"><expr pos:start="207:22" pos:end="207:28"><name pos:start="207:22" pos:end="207:26">count</name><operator pos:start="207:27" pos:end="207:28">++</operator></expr>;</init> <condition pos:start="207:31" pos:end="207:40"><expr pos:start="207:31" pos:end="207:39"><name pos:start="207:31" pos:end="207:35">count</name> <operator pos:start="207:37" pos:end="207:37">&gt;</operator> <literal type="number" pos:start="207:39" pos:end="207:39">0</literal></expr>;</condition> <incr pos:start="207:42" pos:end="207:48"><expr pos:start="207:42" pos:end="207:48"><name pos:start="207:42" pos:end="207:46">count</name><operator pos:start="207:47" pos:end="207:48">--</operator></expr></incr>)</control> <block pos:start="207:51" pos:end="211:17">{<block_content pos:start="209:21" pos:end="209:40">

                    <expr_stmt pos:start="209:21" pos:end="209:40"><expr pos:start="209:21" pos:end="209:39"><operator pos:start="209:21" pos:end="209:21">*</operator><name pos:start="209:22" pos:end="209:28">samples</name><operator pos:start="209:29" pos:end="209:30">++</operator> <operator pos:start="209:32" pos:end="209:32">=</operator> <operator pos:start="209:34" pos:end="209:34">*</operator><name pos:start="209:35" pos:end="209:37">buf</name><operator pos:start="209:38" pos:end="209:39">++</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="213:17" pos:end="213:33"><expr pos:start="213:17" pos:end="213:32"><name pos:start="213:17" pos:end="213:22">sample</name> <operator pos:start="213:24" pos:end="213:24">=</operator> <name pos:start="213:26" pos:end="213:32"><name pos:start="213:26" pos:end="213:28">buf</name><index pos:start="213:29" pos:end="213:32">[<expr pos:start="213:30" pos:end="213:31"><operator pos:start="213:30" pos:end="213:30">-</operator><literal type="number" pos:start="213:31" pos:end="213:31">1</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="217:13" pos:end="217:18">break;</break>

        <default pos:start="219:9" pos:end="219:16">default:</default> <comment type="block" pos:start="219:18" pos:end="219:26">/* run */</comment>

            <for pos:start="221:13" pos:end="225:13">for<control pos:start="221:16" pos:end="221:44">(<init pos:start="221:17" pos:end="221:24"><expr pos:start="221:17" pos:end="221:23"><name pos:start="221:17" pos:end="221:21">count</name><operator pos:start="221:22" pos:end="221:23">++</operator></expr>;</init> <condition pos:start="221:26" pos:end="221:35"><expr pos:start="221:26" pos:end="221:34"><name pos:start="221:26" pos:end="221:30">count</name> <operator pos:start="221:32" pos:end="221:32">&gt;</operator> <literal type="number" pos:start="221:34" pos:end="221:34">0</literal></expr>;</condition> <incr pos:start="221:37" pos:end="221:43"><expr pos:start="221:37" pos:end="221:43"><name pos:start="221:37" pos:end="221:41">count</name><operator pos:start="221:42" pos:end="221:43">--</operator></expr></incr>)</control> <block pos:start="221:46" pos:end="225:13">{<block_content pos:start="223:17" pos:end="223:36">

                <expr_stmt pos:start="223:17" pos:end="223:36"><expr pos:start="223:17" pos:end="223:35"><operator pos:start="223:17" pos:end="223:17">*</operator><name pos:start="223:18" pos:end="223:24">samples</name><operator pos:start="223:25" pos:end="223:26">++</operator> <operator pos:start="223:28" pos:end="223:28">=</operator> <name pos:start="223:30" pos:end="223:35">sample</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <expr_stmt pos:start="233:5" pos:end="233:43"><expr pos:start="233:5" pos:end="233:42"><operator pos:start="233:5" pos:end="233:5">*</operator><name pos:start="233:6" pos:end="233:14">data_size</name> <operator pos:start="233:16" pos:end="233:16">=</operator> <name pos:start="233:18" pos:end="233:24">samples</name> <operator pos:start="233:26" pos:end="233:26">-</operator> <operator pos:start="233:28" pos:end="233:28">(</operator><name pos:start="233:29" pos:end="233:35">uint8_t</name> <operator pos:start="233:37" pos:end="233:37">*</operator><operator pos:start="233:38" pos:end="233:38">)</operator><name pos:start="233:39" pos:end="233:42">data</name></expr>;</expr_stmt>



    <return pos:start="237:5" pos:end="237:20">return <expr pos:start="237:12" pos:end="237:19"><name pos:start="237:12" pos:end="237:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
