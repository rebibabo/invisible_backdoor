<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23061.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">tcg_temp_free_internal</name><parameter_list pos:start="1:35" pos:end="1:43">(<parameter pos:start="1:36" pos:end="1:42"><decl pos:start="1:36" pos:end="1:42"><type pos:start="1:36" pos:end="1:38"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:42">idx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:37">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">TCGContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:28">= <expr pos:start="5:21" pos:end="5:28"><operator pos:start="5:21" pos:end="5:21">&amp;</operator><name pos:start="5:22" pos:end="5:28">tcg_ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">TCGTemp</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:15">ts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">k</name></decl>;</decl_stmt>



<cpp:if pos:start="13:1" pos:end="13:29">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:29"><call pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:11">defined</name><argument_list pos:start="13:12" pos:end="13:29">(<argument pos:start="13:13" pos:end="13:28"><expr pos:start="13:13" pos:end="13:28"><name pos:start="13:13" pos:end="13:28">CONFIG_DEBUG_TCG</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="15:5" pos:end="15:22"><expr pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:19">temps_in_use</name></name><operator pos:start="15:20" pos:end="15:21">--</operator></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="24:0"><if pos:start="17:5" pos:end="24:0">if <condition pos:start="17:8" pos:end="17:28">(<expr pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:23">temps_in_use</name></name> <operator pos:start="17:25" pos:end="17:25">&lt;</operator> <literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr>)</condition> <block pos:start="17:30" pos:end="24:0">{<block_content pos:start="19:9" pos:end="19:68">

        <expr_stmt pos:start="19:9" pos:end="19:68"><expr pos:start="19:9" pos:end="19:67"><call pos:start="19:9" pos:end="19:67"><name pos:start="19:9" pos:end="19:15">fprintf</name><argument_list pos:start="19:16" pos:end="19:67">(<argument pos:start="19:17" pos:end="19:22"><expr pos:start="19:17" pos:end="19:22"><name pos:start="19:17" pos:end="19:22">stderr</name></expr></argument>, <argument pos:start="19:25" pos:end="19:66"><expr pos:start="19:25" pos:end="19:66"><literal type="string" pos:start="19:25" pos:end="19:66">"More temporaries freed than allocated!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="27:5" pos:end="27:54"><expr pos:start="27:5" pos:end="27:53"><call pos:start="27:5" pos:end="27:53"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:53">(<argument pos:start="27:12" pos:end="27:52"><expr pos:start="27:12" pos:end="27:52"><name pos:start="27:12" pos:end="27:14">idx</name> <operator pos:start="27:16" pos:end="27:17">&gt;=</operator> <name pos:start="27:19" pos:end="27:31"><name pos:start="27:19" pos:end="27:19">s</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:31">nb_globals</name></name> <operator pos:start="27:33" pos:end="27:34">&amp;&amp;</operator> <name pos:start="27:36" pos:end="27:38">idx</name> <operator pos:start="27:40" pos:end="27:40">&lt;</operator> <name pos:start="27:42" pos:end="27:52"><name pos:start="27:42" pos:end="27:42">s</name><operator pos:start="27:43" pos:end="27:44">-&gt;</operator><name pos:start="27:45" pos:end="27:52">nb_temps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:24"><expr pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:6">ts</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <operator pos:start="29:10" pos:end="29:10">&amp;</operator><name pos:start="29:11" pos:end="29:23"><name pos:start="29:11" pos:end="29:11">s</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:18">temps</name><index pos:start="29:19" pos:end="29:23">[<expr pos:start="29:20" pos:end="29:22"><name pos:start="29:20" pos:end="29:22">idx</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:36"><expr pos:start="31:5" pos:end="31:35"><call pos:start="31:5" pos:end="31:35"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:35">(<argument pos:start="31:12" pos:end="31:34"><expr pos:start="31:12" pos:end="31:34"><name pos:start="31:12" pos:end="31:29"><name pos:start="31:12" pos:end="31:13">ts</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:29">temp_allocated</name></name> <operator pos:start="31:31" pos:end="31:32">!=</operator> <literal type="number" pos:start="31:34" pos:end="31:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:27"><expr pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:6">ts</name><operator pos:start="33:7" pos:end="33:8">-&gt;</operator><name pos:start="33:9" pos:end="33:22">temp_allocated</name></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <literal type="number" pos:start="33:26" pos:end="33:26">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:62"><expr pos:start="37:5" pos:end="37:61"><name pos:start="37:5" pos:end="37:5">k</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <name pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:10">ts</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:21">base_type</name></name> <operator pos:start="37:23" pos:end="37:23">+</operator> <operator pos:start="37:25" pos:end="37:25">(</operator><ternary pos:start="37:26" pos:end="37:60"><condition pos:start="37:26" pos:end="37:41"><expr pos:start="37:26" pos:end="37:39"><name pos:start="37:26" pos:end="37:39"><name pos:start="37:26" pos:end="37:27">ts</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:39">temp_local</name></name></expr> ?</condition><then pos:start="37:43" pos:end="37:56"> <expr pos:start="37:43" pos:end="37:56"><name pos:start="37:43" pos:end="37:56">TCG_TYPE_COUNT</name></expr> </then><else pos:start="37:58" pos:end="37:60">: <expr pos:start="37:60" pos:end="37:60"><literal type="number" pos:start="37:60" pos:end="37:60">0</literal></expr></else></ternary><operator pos:start="37:61" pos:end="37:61">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><call pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:11">set_bit</name><argument_list pos:start="39:12" pos:end="39:36">(<argument pos:start="39:13" pos:end="39:15"><expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">idx</name></expr></argument>, <argument pos:start="39:18" pos:end="39:35"><expr pos:start="39:18" pos:end="39:35"><name pos:start="39:18" pos:end="39:33"><name pos:start="39:18" pos:end="39:18">s</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:30">free_temps</name><index pos:start="39:31" pos:end="39:33">[<expr pos:start="39:32" pos:end="39:32"><name pos:start="39:32" pos:end="39:32">k</name></expr>]</index></name><operator pos:start="39:34" pos:end="39:34">.</operator><name pos:start="39:35" pos:end="39:35">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
