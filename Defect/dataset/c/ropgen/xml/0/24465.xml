<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24465.c" pos:tabs="8"><function pos:start="1:1" pos:end="217:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">read_sm_data</name><parameter_list pos:start="1:24" pos:end="1:104">(<parameter pos:start="1:25" pos:end="1:42"><decl pos:start="1:25" pos:end="1:42"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:39">AVFormatContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:59"><decl pos:start="1:45" pos:end="1:59"><type pos:start="1:45" pos:end="1:59"><name pos:start="1:45" pos:end="1:55">AVIOContext</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">bc</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:74"><decl pos:start="1:62" pos:end="1:74"><type pos:start="1:62" pos:end="1:74"><name pos:start="1:62" pos:end="1:69">AVPacket</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:74">pkt</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:87"><decl pos:start="1:77" pos:end="1:87"><type pos:start="1:77" pos:end="1:87"><name pos:start="1:77" pos:end="1:79">int</name></type> <name pos:start="1:81" pos:end="1:87">is_meta</name></decl></parameter>, <parameter pos:start="1:90" pos:end="1:103"><decl pos:start="1:90" pos:end="1:103"><type pos:start="1:90" pos:end="1:103"><name pos:start="1:90" pos:end="1:96">int64_t</name></type> <name pos:start="1:98" pos:end="1:103">maxpos</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="217:1">{<block_content pos:start="5:5" pos:end="215:13">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">count</name> <init pos:start="5:15" pos:end="5:36">= <expr pos:start="5:17" pos:end="5:36"><call pos:start="5:17" pos:end="5:36"><name pos:start="5:17" pos:end="5:32">ffio_read_varlen</name><argument_list pos:start="5:33" pos:end="5:36">(<argument pos:start="5:34" pos:end="5:35"><expr pos:start="5:34" pos:end="5:35"><name pos:start="5:34" pos:end="5:35">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">skip_start</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">skip_end</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">channels</name> <init pos:start="11:18" pos:end="11:20">= <expr pos:start="11:20" pos:end="11:20"><literal type="number" pos:start="11:20" pos:end="11:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:26">channel_layout</name> <init pos:start="13:28" pos:end="13:30">= <expr pos:start="13:30" pos:end="13:30"><literal type="number" pos:start="13:30" pos:end="13:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">sample_rate</name> <init pos:start="15:21" pos:end="15:23">= <expr pos:start="15:23" pos:end="15:23"><literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">width</name> <init pos:start="17:15" pos:end="17:17">= <expr pos:start="17:17" pos:end="17:17"><literal type="number" pos:start="17:17" pos:end="17:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">height</name> <init pos:start="19:16" pos:end="19:18">= <expr pos:start="19:18" pos:end="19:18"><literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>



    <for pos:start="25:5" pos:end="151:5">for <control pos:start="25:9" pos:end="25:27">(<init pos:start="25:10" pos:end="25:13"><expr pos:start="25:10" pos:end="25:12"><name pos:start="25:10" pos:end="25:10">i</name><operator pos:start="25:11" pos:end="25:11">=</operator><literal type="number" pos:start="25:12" pos:end="25:12">0</literal></expr>;</init> <condition pos:start="25:15" pos:end="25:22"><expr pos:start="25:15" pos:end="25:21"><name pos:start="25:15" pos:end="25:15">i</name><operator pos:start="25:16" pos:end="25:16">&lt;</operator><name pos:start="25:17" pos:end="25:21">count</name></expr>;</condition> <incr pos:start="25:24" pos:end="25:26"><expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:24">i</name><operator pos:start="25:25" pos:end="25:26">++</operator></expr></incr>)</control> <block pos:start="25:29" pos:end="151:5">{<block_content pos:start="27:9" pos:end="149:9">

        <decl_stmt pos:start="27:9" pos:end="27:57"><decl pos:start="27:9" pos:end="27:25"><type pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">uint8_t</name></type> <name pos:start="27:17" pos:end="27:25"><name pos:start="27:17" pos:end="27:20">name</name><index pos:start="27:21" pos:end="27:25">[<expr pos:start="27:22" pos:end="27:24"><literal type="number" pos:start="27:22" pos:end="27:24">256</literal></expr>]</index></name></decl>, <decl pos:start="27:28" pos:end="27:41"><type ref="prev" pos:start="27:9" pos:end="27:15"/><name pos:start="27:28" pos:end="27:41"><name pos:start="27:28" pos:end="27:36">str_value</name><index pos:start="27:37" pos:end="27:41">[<expr pos:start="27:38" pos:end="27:40"><literal type="number" pos:start="27:38" pos:end="27:40">256</literal></expr>]</index></name></decl>, <decl pos:start="27:44" pos:end="27:56"><type ref="prev" pos:start="27:9" pos:end="27:15"/><name pos:start="27:44" pos:end="27:56"><name pos:start="27:44" pos:end="27:51">type_str</name><index pos:start="27:52" pos:end="27:56">[<expr pos:start="27:53" pos:end="27:55"><literal type="number" pos:start="27:53" pos:end="27:55">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:18"><decl pos:start="29:9" pos:end="29:17"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:17">value</name></decl>;</decl_stmt>

        <if_stmt pos:start="31:9" pos:end="33:39"><if pos:start="31:9" pos:end="33:39">if <condition pos:start="31:12" pos:end="31:36">(<expr pos:start="31:13" pos:end="31:35"><call pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:21">avio_tell</name><argument_list pos:start="31:22" pos:end="31:25">(<argument pos:start="31:23" pos:end="31:24"><expr pos:start="31:23" pos:end="31:24"><name pos:start="31:23" pos:end="31:24">bc</name></expr></argument>)</argument_list></call> <operator pos:start="31:27" pos:end="31:28">&gt;=</operator> <name pos:start="31:30" pos:end="31:35">maxpos</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:39"><block_content pos:start="33:13" pos:end="33:39">

            <return pos:start="33:13" pos:end="33:39">return <expr pos:start="33:20" pos:end="33:38"><name pos:start="33:20" pos:end="33:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:40"><expr pos:start="35:9" pos:end="35:39"><call pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:15">get_str</name><argument_list pos:start="35:16" pos:end="35:39">(<argument pos:start="35:17" pos:end="35:18"><expr pos:start="35:17" pos:end="35:18"><name pos:start="35:17" pos:end="35:18">bc</name></expr></argument>, <argument pos:start="35:21" pos:end="35:24"><expr pos:start="35:21" pos:end="35:24"><name pos:start="35:21" pos:end="35:24">name</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><sizeof pos:start="35:27" pos:end="35:38">sizeof<argument_list pos:start="35:33" pos:end="35:38">(<argument pos:start="35:34" pos:end="35:37"><expr pos:start="35:34" pos:end="35:37"><name pos:start="35:34" pos:end="35:37">name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:26"><expr pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:13">value</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:25"><name pos:start="37:17" pos:end="37:21">get_s</name><argument_list pos:start="37:22" pos:end="37:25">(<argument pos:start="37:23" pos:end="37:24"><expr pos:start="37:23" pos:end="37:24"><name pos:start="37:23" pos:end="37:24">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="41:9" pos:end="149:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:24">(<expr pos:start="41:13" pos:end="41:23"><name pos:start="41:13" pos:end="41:17">value</name> <operator pos:start="41:19" pos:end="41:20">==</operator> <operator pos:start="41:22" pos:end="41:22">-</operator><literal type="number" pos:start="41:23" pos:end="41:23">1</literal></expr>)</condition> <block pos:start="41:26" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:83">

            <expr_stmt pos:start="43:13" pos:end="43:54"><expr pos:start="43:13" pos:end="43:53"><call pos:start="43:13" pos:end="43:53"><name pos:start="43:13" pos:end="43:19">get_str</name><argument_list pos:start="43:20" pos:end="43:53">(<argument pos:start="43:21" pos:end="43:22"><expr pos:start="43:21" pos:end="43:22"><name pos:start="43:21" pos:end="43:22">bc</name></expr></argument>, <argument pos:start="43:25" pos:end="43:33"><expr pos:start="43:25" pos:end="43:33"><name pos:start="43:25" pos:end="43:33">str_value</name></expr></argument>, <argument pos:start="43:36" pos:end="43:52"><expr pos:start="43:36" pos:end="43:52"><sizeof pos:start="43:36" pos:end="43:52">sizeof<argument_list pos:start="43:42" pos:end="43:52">(<argument pos:start="43:43" pos:end="43:51"><expr pos:start="43:43" pos:end="43:51"><name pos:start="43:43" pos:end="43:51">str_value</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:83"><expr pos:start="45:13" pos:end="45:82"><call pos:start="45:13" pos:end="45:82"><name pos:start="45:13" pos:end="45:18">av_log</name><argument_list pos:start="45:19" pos:end="45:82">(<argument pos:start="45:20" pos:end="45:20"><expr pos:start="45:20" pos:end="45:20"><name pos:start="45:20" pos:end="45:20">s</name></expr></argument>, <argument pos:start="45:23" pos:end="45:36"><expr pos:start="45:23" pos:end="45:36"><name pos:start="45:23" pos:end="45:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="45:39" pos:end="45:64"><expr pos:start="45:39" pos:end="45:64"><literal type="string" pos:start="45:39" pos:end="45:64">"Unknown string %s / %s\n"</literal></expr></argument>, <argument pos:start="45:67" pos:end="45:70"><expr pos:start="45:67" pos:end="45:70"><name pos:start="45:67" pos:end="45:70">name</name></expr></argument>, <argument pos:start="45:73" pos:end="45:81"><expr pos:start="45:73" pos:end="45:81"><name pos:start="45:73" pos:end="45:81">str_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="47:11" pos:end="105:9">else if <condition pos:start="47:19" pos:end="47:31">(<expr pos:start="47:20" pos:end="47:30"><name pos:start="47:20" pos:end="47:24">value</name> <operator pos:start="47:26" pos:end="47:27">==</operator> <operator pos:start="47:29" pos:end="47:29">-</operator><literal type="number" pos:start="47:30" pos:end="47:30">2</literal></expr>)</condition> <block pos:start="47:33" pos:end="105:9">{<block_content pos:start="49:13" pos:end="103:42">

            <decl_stmt pos:start="49:13" pos:end="49:32"><decl pos:start="49:13" pos:end="49:31"><type pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:19">uint8_t</name> <modifier pos:start="49:21" pos:end="49:21">*</modifier></type><name pos:start="49:22" pos:end="49:24">dst</name> <init pos:start="49:26" pos:end="49:31">= <expr pos:start="49:28" pos:end="49:31"><name pos:start="49:28" pos:end="49:31">NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="51:13" pos:end="51:35"><decl pos:start="51:13" pos:end="51:23"><type pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:19">int64_t</name></type> <name pos:start="51:21" pos:end="51:23">v64</name></decl>, <decl pos:start="51:26" pos:end="51:34"><type ref="prev" pos:start="51:13" pos:end="51:19"/><name pos:start="51:26" pos:end="51:34">value_len</name></decl>;</decl_stmt>



            <expr_stmt pos:start="55:13" pos:end="55:52"><expr pos:start="55:13" pos:end="55:51"><call pos:start="55:13" pos:end="55:51"><name pos:start="55:13" pos:end="55:19">get_str</name><argument_list pos:start="55:20" pos:end="55:51">(<argument pos:start="55:21" pos:end="55:22"><expr pos:start="55:21" pos:end="55:22"><name pos:start="55:21" pos:end="55:22">bc</name></expr></argument>, <argument pos:start="55:25" pos:end="55:32"><expr pos:start="55:25" pos:end="55:32"><name pos:start="55:25" pos:end="55:32">type_str</name></expr></argument>, <argument pos:start="55:35" pos:end="55:50"><expr pos:start="55:35" pos:end="55:50"><sizeof pos:start="55:35" pos:end="55:50">sizeof<argument_list pos:start="55:41" pos:end="55:50">(<argument pos:start="55:42" pos:end="55:49"><expr pos:start="55:42" pos:end="55:49"><name pos:start="55:42" pos:end="55:49">type_str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:45"><expr pos:start="57:13" pos:end="57:44"><name pos:start="57:13" pos:end="57:21">value_len</name> <operator pos:start="57:23" pos:end="57:23">=</operator> <call pos:start="57:25" pos:end="57:44"><name pos:start="57:25" pos:end="57:40">ffio_read_varlen</name><argument_list pos:start="57:41" pos:end="57:44">(<argument pos:start="57:42" pos:end="57:43"><expr pos:start="57:42" pos:end="57:43"><name pos:start="57:42" pos:end="57:43">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="61:43"><if pos:start="59:13" pos:end="61:43">if <condition pos:start="59:16" pos:end="59:52">(<expr pos:start="59:17" pos:end="59:51"><call pos:start="59:17" pos:end="59:29"><name pos:start="59:17" pos:end="59:25">avio_tell</name><argument_list pos:start="59:26" pos:end="59:29">(<argument pos:start="59:27" pos:end="59:28"><expr pos:start="59:27" pos:end="59:28"><name pos:start="59:27" pos:end="59:28">bc</name></expr></argument>)</argument_list></call> <operator pos:start="59:31" pos:end="59:31">+</operator> <name pos:start="59:33" pos:end="59:41">value_len</name> <operator pos:start="59:43" pos:end="59:44">&gt;=</operator> <name pos:start="59:46" pos:end="59:51">maxpos</name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:43"><block_content pos:start="61:17" pos:end="61:43">

                <return pos:start="61:17" pos:end="61:43">return <expr pos:start="61:24" pos:end="61:42"><name pos:start="61:24" pos:end="61:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="63:13" pos:end="97:13"><if pos:start="63:13" pos:end="67:13">if <condition pos:start="63:16" pos:end="63:41">(<expr pos:start="63:17" pos:end="63:40"><operator pos:start="63:17" pos:end="63:17">!</operator><call pos:start="63:18" pos:end="63:40"><name pos:start="63:18" pos:end="63:23">strcmp</name><argument_list pos:start="63:24" pos:end="63:40">(<argument pos:start="63:25" pos:end="63:28"><expr pos:start="63:25" pos:end="63:28"><name pos:start="63:25" pos:end="63:28">name</name></expr></argument>, <argument pos:start="63:31" pos:end="63:39"><expr pos:start="63:31" pos:end="63:39"><literal type="string" pos:start="63:31" pos:end="63:39">"Palette"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:43" pos:end="67:13">{<block_content pos:start="65:17" pos:end="65:83">

                <expr_stmt pos:start="65:17" pos:end="65:83"><expr pos:start="65:17" pos:end="65:82"><name pos:start="65:17" pos:end="65:19">dst</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="65:82"><name pos:start="65:23" pos:end="65:45">av_packet_new_side_data</name><argument_list pos:start="65:46" pos:end="65:82">(<argument pos:start="65:47" pos:end="65:49"><expr pos:start="65:47" pos:end="65:49"><name pos:start="65:47" pos:end="65:49">pkt</name></expr></argument>, <argument pos:start="65:52" pos:end="65:70"><expr pos:start="65:52" pos:end="65:70"><name pos:start="65:52" pos:end="65:70">AV_PKT_DATA_PALETTE</name></expr></argument>, <argument pos:start="65:73" pos:end="65:81"><expr pos:start="65:73" pos:end="65:81"><name pos:start="65:73" pos:end="65:81">value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="67:15" pos:end="71:13">else if <condition pos:start="67:23" pos:end="67:50">(<expr pos:start="67:24" pos:end="67:49"><operator pos:start="67:24" pos:end="67:24">!</operator><call pos:start="67:25" pos:end="67:49"><name pos:start="67:25" pos:end="67:30">strcmp</name><argument_list pos:start="67:31" pos:end="67:49">(<argument pos:start="67:32" pos:end="67:35"><expr pos:start="67:32" pos:end="67:35"><name pos:start="67:32" pos:end="67:35">name</name></expr></argument>, <argument pos:start="67:38" pos:end="67:48"><expr pos:start="67:38" pos:end="67:48"><literal type="string" pos:start="67:38" pos:end="67:48">"Extradata"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:52" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:89">

                <expr_stmt pos:start="69:17" pos:end="69:89"><expr pos:start="69:17" pos:end="69:88"><name pos:start="69:17" pos:end="69:19">dst</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:88"><name pos:start="69:23" pos:end="69:45">av_packet_new_side_data</name><argument_list pos:start="69:46" pos:end="69:88">(<argument pos:start="69:47" pos:end="69:49"><expr pos:start="69:47" pos:end="69:49"><name pos:start="69:47" pos:end="69:49">pkt</name></expr></argument>, <argument pos:start="69:52" pos:end="69:76"><expr pos:start="69:52" pos:end="69:76"><name pos:start="69:52" pos:end="69:76">AV_PKT_DATA_NEW_EXTRADATA</name></expr></argument>, <argument pos:start="69:79" pos:end="69:87"><expr pos:start="69:79" pos:end="69:87"><name pos:start="69:79" pos:end="69:87">value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="71:15" pos:end="83:13">else if <condition pos:start="71:23" pos:end="71:77">(<expr pos:start="71:24" pos:end="71:76"><call pos:start="71:24" pos:end="71:71"><name pos:start="71:24" pos:end="71:29">sscanf</name><argument_list pos:start="71:30" pos:end="71:71">(<argument pos:start="71:31" pos:end="71:34"><expr pos:start="71:31" pos:end="71:34"><name pos:start="71:31" pos:end="71:34">name</name></expr></argument>, <argument pos:start="71:37" pos:end="71:64"><expr pos:start="71:37" pos:end="71:64"><literal type="string" pos:start="71:37" pos:end="71:56">"CodecSpecificSide%"</literal><name pos:start="71:57" pos:end="71:62">SCNd64</name><literal type="string" pos:start="71:63" pos:end="71:64">""</literal></expr></argument>, <argument pos:start="71:67" pos:end="71:70"><expr pos:start="71:67" pos:end="71:70"><operator pos:start="71:67" pos:end="71:67">&amp;</operator><name pos:start="71:68" pos:end="71:70">v64</name></expr></argument>)</argument_list></call> <operator pos:start="71:73" pos:end="71:74">==</operator> <literal type="number" pos:start="71:76" pos:end="71:76">1</literal></expr>)</condition> <block pos:start="71:79" pos:end="83:13">{<block_content pos:start="73:17" pos:end="81:25">

                <expr_stmt pos:start="73:17" pos:end="73:104"><expr pos:start="73:17" pos:end="73:103"><name pos:start="73:17" pos:end="73:19">dst</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <call pos:start="73:23" pos:end="73:103"><name pos:start="73:23" pos:end="73:45">av_packet_new_side_data</name><argument_list pos:start="73:46" pos:end="73:103">(<argument pos:start="73:47" pos:end="73:49"><expr pos:start="73:47" pos:end="73:49"><name pos:start="73:47" pos:end="73:49">pkt</name></expr></argument>, <argument pos:start="73:52" pos:end="73:87"><expr pos:start="73:52" pos:end="73:87"><name pos:start="73:52" pos:end="73:87">AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL</name></expr></argument>, <argument pos:start="73:90" pos:end="73:102"><expr pos:start="73:90" pos:end="73:102"><name pos:start="73:90" pos:end="73:98">value_len</name> <operator pos:start="73:100" pos:end="73:100">+</operator> <literal type="number" pos:start="73:102" pos:end="73:102">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="75:17" pos:end="77:43"><if pos:start="75:17" pos:end="77:43">if<condition pos:start="75:19" pos:end="75:24">(<expr pos:start="75:20" pos:end="75:23"><operator pos:start="75:20" pos:end="75:20">!</operator><name pos:start="75:21" pos:end="75:23">dst</name></expr>)</condition><block type="pseudo" pos:start="77:21" pos:end="77:43"><block_content pos:start="77:21" pos:end="77:43">

                    <return pos:start="77:21" pos:end="77:43">return <expr pos:start="77:28" pos:end="77:42"><call pos:start="77:28" pos:end="77:42"><name pos:start="77:28" pos:end="77:34">AVERROR</name><argument_list pos:start="77:35" pos:end="77:42">(<argument pos:start="77:36" pos:end="77:41"><expr pos:start="77:36" pos:end="77:41"><name pos:start="77:36" pos:end="77:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:34"><expr pos:start="79:17" pos:end="79:33"><call pos:start="79:17" pos:end="79:33"><name pos:start="79:17" pos:end="79:23">AV_WB64</name><argument_list pos:start="79:24" pos:end="79:33">(<argument pos:start="79:25" pos:end="79:27"><expr pos:start="79:25" pos:end="79:27"><name pos:start="79:25" pos:end="79:27">dst</name></expr></argument>, <argument pos:start="79:30" pos:end="79:32"><expr pos:start="79:30" pos:end="79:32"><name pos:start="79:30" pos:end="79:32">v64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:25"><expr pos:start="81:17" pos:end="81:24"><name pos:start="81:17" pos:end="81:19">dst</name> <operator pos:start="81:21" pos:end="81:22">+=</operator> <literal type="number" pos:start="81:24" pos:end="81:24">8</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="83:15" pos:end="89:13">else if <condition pos:start="83:23" pos:end="83:72">(<expr pos:start="83:24" pos:end="83:71"><operator pos:start="83:24" pos:end="83:24">!</operator><call pos:start="83:25" pos:end="83:53"><name pos:start="83:25" pos:end="83:30">strcmp</name><argument_list pos:start="83:31" pos:end="83:53">(<argument pos:start="83:32" pos:end="83:35"><expr pos:start="83:32" pos:end="83:35"><name pos:start="83:32" pos:end="83:35">name</name></expr></argument>, <argument pos:start="83:38" pos:end="83:52"><expr pos:start="83:38" pos:end="83:52"><literal type="string" pos:start="83:38" pos:end="83:52">"ChannelLayout"</literal></expr></argument>)</argument_list></call> <operator pos:start="83:55" pos:end="83:56">&amp;&amp;</operator> <name pos:start="83:58" pos:end="83:66">value_len</name> <operator pos:start="83:68" pos:end="83:69">==</operator> <literal type="number" pos:start="83:71" pos:end="83:71">8</literal></expr>)</condition> <block pos:start="83:74" pos:end="89:13">{<block_content pos:start="85:17" pos:end="87:25">

                <expr_stmt pos:start="85:17" pos:end="85:47"><expr pos:start="85:17" pos:end="85:46"><name pos:start="85:17" pos:end="85:30">channel_layout</name> <operator pos:start="85:32" pos:end="85:32">=</operator> <call pos:start="85:34" pos:end="85:46"><name pos:start="85:34" pos:end="85:42">avio_rl64</name><argument_list pos:start="85:43" pos:end="85:46">(<argument pos:start="85:44" pos:end="85:45"><expr pos:start="85:44" pos:end="85:45"><name pos:start="85:44" pos:end="85:45">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="87:17" pos:end="87:25">continue;</continue>

            </block_content>}</block></if> <else pos:start="89:15" pos:end="97:13">else <block pos:start="89:20" pos:end="97:13">{<block_content pos:start="91:17" pos:end="95:25">

                <expr_stmt pos:start="91:17" pos:end="91:84"><expr pos:start="91:17" pos:end="91:83"><call pos:start="91:17" pos:end="91:83"><name pos:start="91:17" pos:end="91:22">av_log</name><argument_list pos:start="91:23" pos:end="91:83">(<argument pos:start="91:24" pos:end="91:24"><expr pos:start="91:24" pos:end="91:24"><name pos:start="91:24" pos:end="91:24">s</name></expr></argument>, <argument pos:start="91:27" pos:end="91:40"><expr pos:start="91:27" pos:end="91:40"><name pos:start="91:27" pos:end="91:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="91:43" pos:end="91:66"><expr pos:start="91:43" pos:end="91:66"><literal type="string" pos:start="91:43" pos:end="91:66">"Unknown data %s / %s\n"</literal></expr></argument>, <argument pos:start="91:69" pos:end="91:72"><expr pos:start="91:69" pos:end="91:72"><name pos:start="91:69" pos:end="91:72">name</name></expr></argument>, <argument pos:start="91:75" pos:end="91:82"><expr pos:start="91:75" pos:end="91:82"><name pos:start="91:75" pos:end="91:82">type_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:41"><expr pos:start="93:17" pos:end="93:40"><call pos:start="93:17" pos:end="93:40"><name pos:start="93:17" pos:end="93:25">avio_skip</name><argument_list pos:start="93:26" pos:end="93:40">(<argument pos:start="93:27" pos:end="93:28"><expr pos:start="93:27" pos:end="93:28"><name pos:start="93:27" pos:end="93:28">bc</name></expr></argument>, <argument pos:start="93:31" pos:end="93:39"><expr pos:start="93:31" pos:end="93:39"><name pos:start="93:31" pos:end="93:39">value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="95:17" pos:end="95:25">continue;</continue>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="99:13" pos:end="101:39"><if pos:start="99:13" pos:end="101:39">if<condition pos:start="99:15" pos:end="99:20">(<expr pos:start="99:16" pos:end="99:19"><operator pos:start="99:16" pos:end="99:16">!</operator><name pos:start="99:17" pos:end="99:19">dst</name></expr>)</condition><block type="pseudo" pos:start="101:17" pos:end="101:39"><block_content pos:start="101:17" pos:end="101:39">

                <return pos:start="101:17" pos:end="101:39">return <expr pos:start="101:24" pos:end="101:38"><call pos:start="101:24" pos:end="101:38"><name pos:start="101:24" pos:end="101:30">AVERROR</name><argument_list pos:start="101:31" pos:end="101:38">(<argument pos:start="101:32" pos:end="101:37"><expr pos:start="101:32" pos:end="101:37"><name pos:start="101:32" pos:end="101:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:42"><expr pos:start="103:13" pos:end="103:41"><call pos:start="103:13" pos:end="103:41"><name pos:start="103:13" pos:end="103:21">avio_read</name><argument_list pos:start="103:22" pos:end="103:41">(<argument pos:start="103:23" pos:end="103:24"><expr pos:start="103:23" pos:end="103:24"><name pos:start="103:23" pos:end="103:24">bc</name></expr></argument>, <argument pos:start="103:27" pos:end="103:29"><expr pos:start="103:27" pos:end="103:29"><name pos:start="103:27" pos:end="103:29">dst</name></expr></argument>, <argument pos:start="103:32" pos:end="103:40"><expr pos:start="103:32" pos:end="103:40"><name pos:start="103:32" pos:end="103:40">value_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="105:11" pos:end="109:9">else if <condition pos:start="105:19" pos:end="105:31">(<expr pos:start="105:20" pos:end="105:30"><name pos:start="105:20" pos:end="105:24">value</name> <operator pos:start="105:26" pos:end="105:27">==</operator> <operator pos:start="105:29" pos:end="105:29">-</operator><literal type="number" pos:start="105:30" pos:end="105:30">3</literal></expr>)</condition> <block pos:start="105:33" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:30">

            <expr_stmt pos:start="107:13" pos:end="107:30"><expr pos:start="107:13" pos:end="107:29"><name pos:start="107:13" pos:end="107:17">value</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <call pos:start="107:21" pos:end="107:29"><name pos:start="107:21" pos:end="107:25">get_s</name><argument_list pos:start="107:26" pos:end="107:29">(<argument pos:start="107:27" pos:end="107:28"><expr pos:start="107:27" pos:end="107:28"><name pos:start="107:27" pos:end="107:28">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="109:11" pos:end="113:9">else if <condition pos:start="109:19" pos:end="109:31">(<expr pos:start="109:20" pos:end="109:30"><name pos:start="109:20" pos:end="109:24">value</name> <operator pos:start="109:26" pos:end="109:27">==</operator> <operator pos:start="109:29" pos:end="109:29">-</operator><literal type="number" pos:start="109:30" pos:end="109:30">4</literal></expr>)</condition> <block pos:start="109:33" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:41">

            <expr_stmt pos:start="111:13" pos:end="111:41"><expr pos:start="111:13" pos:end="111:40"><name pos:start="111:13" pos:end="111:17">value</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <call pos:start="111:21" pos:end="111:40"><name pos:start="111:21" pos:end="111:36">ffio_read_varlen</name><argument_list pos:start="111:37" pos:end="111:40">(<argument pos:start="111:38" pos:end="111:39"><expr pos:start="111:38" pos:end="111:39"><name pos:start="111:38" pos:end="111:39">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="113:11" pos:end="117:9">else if <condition pos:start="113:19" pos:end="113:30">(<expr pos:start="113:20" pos:end="113:29"><name pos:start="113:20" pos:end="113:24">value</name> <operator pos:start="113:26" pos:end="113:26">&lt;</operator> <operator pos:start="113:28" pos:end="113:28">-</operator><literal type="number" pos:start="113:29" pos:end="113:29">4</literal></expr>)</condition> <block pos:start="113:32" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:22">

            <expr_stmt pos:start="115:13" pos:end="115:22"><expr pos:start="115:13" pos:end="115:21"><call pos:start="115:13" pos:end="115:21"><name pos:start="115:13" pos:end="115:17">get_s</name><argument_list pos:start="115:18" pos:end="115:21">(<argument pos:start="115:19" pos:end="115:20"><expr pos:start="115:19" pos:end="115:20"><name pos:start="115:19" pos:end="115:20">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="117:11" pos:end="149:9">else <block pos:start="117:16" pos:end="149:9">{<block_content pos:start="119:13" pos:end="147:13">

            <if_stmt pos:start="119:13" pos:end="147:13"><if pos:start="119:13" pos:end="123:13">if <condition pos:start="119:16" pos:end="119:43">(<expr pos:start="119:17" pos:end="119:42"><operator pos:start="119:17" pos:end="119:17">!</operator><call pos:start="119:18" pos:end="119:42"><name pos:start="119:18" pos:end="119:23">strcmp</name><argument_list pos:start="119:24" pos:end="119:42">(<argument pos:start="119:25" pos:end="119:28"><expr pos:start="119:25" pos:end="119:28"><name pos:start="119:25" pos:end="119:28">name</name></expr></argument>, <argument pos:start="119:31" pos:end="119:41"><expr pos:start="119:31" pos:end="119:41"><literal type="string" pos:start="119:31" pos:end="119:41">"SkipStart"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:45" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:35">

                <expr_stmt pos:start="121:17" pos:end="121:35"><expr pos:start="121:17" pos:end="121:34"><name pos:start="121:17" pos:end="121:26">skip_start</name> <operator pos:start="121:28" pos:end="121:28">=</operator> <name pos:start="121:30" pos:end="121:34">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="123:15" pos:end="127:13">else if <condition pos:start="123:23" pos:end="123:48">(<expr pos:start="123:24" pos:end="123:47"><operator pos:start="123:24" pos:end="123:24">!</operator><call pos:start="123:25" pos:end="123:47"><name pos:start="123:25" pos:end="123:30">strcmp</name><argument_list pos:start="123:31" pos:end="123:47">(<argument pos:start="123:32" pos:end="123:35"><expr pos:start="123:32" pos:end="123:35"><name pos:start="123:32" pos:end="123:35">name</name></expr></argument>, <argument pos:start="123:38" pos:end="123:46"><expr pos:start="123:38" pos:end="123:46"><literal type="string" pos:start="123:38" pos:end="123:46">"SkipEnd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:50" pos:end="127:13">{<block_content pos:start="125:17" pos:end="125:33">

                <expr_stmt pos:start="125:17" pos:end="125:33"><expr pos:start="125:17" pos:end="125:32"><name pos:start="125:17" pos:end="125:24">skip_end</name> <operator pos:start="125:26" pos:end="125:26">=</operator> <name pos:start="125:28" pos:end="125:32">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="127:15" pos:end="131:13">else if <condition pos:start="127:23" pos:end="127:49">(<expr pos:start="127:24" pos:end="127:48"><operator pos:start="127:24" pos:end="127:24">!</operator><call pos:start="127:25" pos:end="127:48"><name pos:start="127:25" pos:end="127:30">strcmp</name><argument_list pos:start="127:31" pos:end="127:48">(<argument pos:start="127:32" pos:end="127:35"><expr pos:start="127:32" pos:end="127:35"><name pos:start="127:32" pos:end="127:35">name</name></expr></argument>, <argument pos:start="127:38" pos:end="127:47"><expr pos:start="127:38" pos:end="127:47"><literal type="string" pos:start="127:38" pos:end="127:47">"Channels"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:51" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:33">

                <expr_stmt pos:start="129:17" pos:end="129:33"><expr pos:start="129:17" pos:end="129:32"><name pos:start="129:17" pos:end="129:24">channels</name> <operator pos:start="129:26" pos:end="129:26">=</operator> <name pos:start="129:28" pos:end="129:32">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="131:15" pos:end="135:13">else if <condition pos:start="131:23" pos:end="131:51">(<expr pos:start="131:24" pos:end="131:50"><operator pos:start="131:24" pos:end="131:24">!</operator><call pos:start="131:25" pos:end="131:50"><name pos:start="131:25" pos:end="131:30">strcmp</name><argument_list pos:start="131:31" pos:end="131:50">(<argument pos:start="131:32" pos:end="131:35"><expr pos:start="131:32" pos:end="131:35"><name pos:start="131:32" pos:end="131:35">name</name></expr></argument>, <argument pos:start="131:38" pos:end="131:49"><expr pos:start="131:38" pos:end="131:49"><literal type="string" pos:start="131:38" pos:end="131:49">"SampleRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:53" pos:end="135:13">{<block_content pos:start="133:17" pos:end="133:36">

                <expr_stmt pos:start="133:17" pos:end="133:36"><expr pos:start="133:17" pos:end="133:35"><name pos:start="133:17" pos:end="133:27">sample_rate</name> <operator pos:start="133:29" pos:end="133:29">=</operator> <name pos:start="133:31" pos:end="133:35">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="135:15" pos:end="139:13">else if <condition pos:start="135:23" pos:end="135:46">(<expr pos:start="135:24" pos:end="135:45"><operator pos:start="135:24" pos:end="135:24">!</operator><call pos:start="135:25" pos:end="135:45"><name pos:start="135:25" pos:end="135:30">strcmp</name><argument_list pos:start="135:31" pos:end="135:45">(<argument pos:start="135:32" pos:end="135:35"><expr pos:start="135:32" pos:end="135:35"><name pos:start="135:32" pos:end="135:35">name</name></expr></argument>, <argument pos:start="135:38" pos:end="135:44"><expr pos:start="135:38" pos:end="135:44"><literal type="string" pos:start="135:38" pos:end="135:44">"Width"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:48" pos:end="139:13">{<block_content pos:start="137:17" pos:end="137:30">

                <expr_stmt pos:start="137:17" pos:end="137:30"><expr pos:start="137:17" pos:end="137:29"><name pos:start="137:17" pos:end="137:21">width</name> <operator pos:start="137:23" pos:end="137:23">=</operator> <name pos:start="137:25" pos:end="137:29">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="139:15" pos:end="143:13">else if <condition pos:start="139:23" pos:end="139:47">(<expr pos:start="139:24" pos:end="139:46"><operator pos:start="139:24" pos:end="139:24">!</operator><call pos:start="139:25" pos:end="139:46"><name pos:start="139:25" pos:end="139:30">strcmp</name><argument_list pos:start="139:31" pos:end="139:46">(<argument pos:start="139:32" pos:end="139:35"><expr pos:start="139:32" pos:end="139:35"><name pos:start="139:32" pos:end="139:35">name</name></expr></argument>, <argument pos:start="139:38" pos:end="139:45"><expr pos:start="139:38" pos:end="139:45"><literal type="string" pos:start="139:38" pos:end="139:45">"Height"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:49" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:31">

                <expr_stmt pos:start="141:17" pos:end="141:31"><expr pos:start="141:17" pos:end="141:30"><name pos:start="141:17" pos:end="141:22">height</name> <operator pos:start="141:24" pos:end="141:24">=</operator> <name pos:start="141:26" pos:end="141:30">value</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="143:15" pos:end="147:13">else <block pos:start="143:20" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:72">

                <expr_stmt pos:start="145:17" pos:end="145:72"><expr pos:start="145:17" pos:end="145:71"><call pos:start="145:17" pos:end="145:71"><name pos:start="145:17" pos:end="145:22">av_log</name><argument_list pos:start="145:23" pos:end="145:71">(<argument pos:start="145:24" pos:end="145:24"><expr pos:start="145:24" pos:end="145:24"><name pos:start="145:24" pos:end="145:24">s</name></expr></argument>, <argument pos:start="145:27" pos:end="145:40"><expr pos:start="145:27" pos:end="145:40"><name pos:start="145:27" pos:end="145:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="145:43" pos:end="145:64"><expr pos:start="145:43" pos:end="145:64"><literal type="string" pos:start="145:43" pos:end="145:64">"Unknown integer %s\n"</literal></expr></argument>, <argument pos:start="145:67" pos:end="145:70"><expr pos:start="145:67" pos:end="145:70"><name pos:start="145:67" pos:end="145:70">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="155:5" pos:end="195:5"><if pos:start="155:5" pos:end="195:5">if <condition pos:start="155:8" pos:end="155:69">(<expr pos:start="155:9" pos:end="155:68"><name pos:start="155:9" pos:end="155:16">channels</name> <operator pos:start="155:18" pos:end="155:19">||</operator> <name pos:start="155:21" pos:end="155:34">channel_layout</name> <operator pos:start="155:36" pos:end="155:37">||</operator> <name pos:start="155:39" pos:end="155:49">sample_rate</name> <operator pos:start="155:51" pos:end="155:52">||</operator> <name pos:start="155:54" pos:end="155:58">width</name> <operator pos:start="155:60" pos:end="155:61">||</operator> <name pos:start="155:63" pos:end="155:68">height</name></expr>)</condition> <block pos:start="155:71" pos:end="195:5">{<block_content pos:start="157:9" pos:end="193:9">

        <decl_stmt pos:start="157:9" pos:end="157:82"><decl pos:start="157:9" pos:end="157:81"><type pos:start="157:9" pos:end="157:17"><name pos:start="157:9" pos:end="157:15">uint8_t</name> <modifier pos:start="157:17" pos:end="157:17">*</modifier></type><name pos:start="157:18" pos:end="157:20">dst</name> <init pos:start="157:22" pos:end="157:81">= <expr pos:start="157:24" pos:end="157:81"><call pos:start="157:24" pos:end="157:81"><name pos:start="157:24" pos:end="157:46">av_packet_new_side_data</name><argument_list pos:start="157:47" pos:end="157:81">(<argument pos:start="157:48" pos:end="157:50"><expr pos:start="157:48" pos:end="157:50"><name pos:start="157:48" pos:end="157:50">pkt</name></expr></argument>, <argument pos:start="157:53" pos:end="157:76"><expr pos:start="157:53" pos:end="157:76"><name pos:start="157:53" pos:end="157:76">AV_PKT_DATA_PARAM_CHANGE</name></expr></argument>, <argument pos:start="157:79" pos:end="157:80"><expr pos:start="157:79" pos:end="157:80"><literal type="number" pos:start="157:79" pos:end="157:80">28</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="159:9" pos:end="161:35"><if pos:start="159:9" pos:end="161:35">if <condition pos:start="159:12" pos:end="159:17">(<expr pos:start="159:13" pos:end="159:16"><operator pos:start="159:13" pos:end="159:13">!</operator><name pos:start="159:14" pos:end="159:16">dst</name></expr>)</condition><block type="pseudo" pos:start="161:13" pos:end="161:35"><block_content pos:start="161:13" pos:end="161:35">

            <return pos:start="161:13" pos:end="161:35">return <expr pos:start="161:20" pos:end="161:34"><call pos:start="161:20" pos:end="161:34"><name pos:start="161:20" pos:end="161:26">AVERROR</name><argument_list pos:start="161:27" pos:end="161:34">(<argument pos:start="161:28" pos:end="161:33"><expr pos:start="161:28" pos:end="161:33"><name pos:start="161:28" pos:end="161:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="173:29"><expr pos:start="163:9" pos:end="173:28"><call pos:start="163:9" pos:end="173:28"><name pos:start="163:9" pos:end="163:27">bytestream_put_le32</name><argument_list pos:start="163:28" pos:end="173:28">(<argument pos:start="163:29" pos:end="163:32"><expr pos:start="163:29" pos:end="163:32"><operator pos:start="163:29" pos:end="163:29">&amp;</operator><name pos:start="163:30" pos:end="163:32">dst</name></expr></argument>,

                            <argument pos:start="165:29" pos:end="171:83"><expr pos:start="165:29" pos:end="171:83"><name pos:start="165:29" pos:end="165:67">AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT</name><operator pos:start="165:68" pos:end="165:68">*</operator><operator pos:start="165:69" pos:end="165:69">(</operator><operator pos:start="165:70" pos:end="165:70">!</operator><operator pos:start="165:71" pos:end="165:71">!</operator><name pos:start="165:72" pos:end="165:79">channels</name><operator pos:start="165:80" pos:end="165:80">)</operator> <operator pos:start="165:82" pos:end="165:82">+</operator>

                            <name pos:start="167:29" pos:end="167:68">AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT</name><operator pos:start="167:69" pos:end="167:69">*</operator><operator pos:start="167:70" pos:end="167:70">(</operator><operator pos:start="167:71" pos:end="167:71">!</operator><operator pos:start="167:72" pos:end="167:72">!</operator><name pos:start="167:73" pos:end="167:86">channel_layout</name><operator pos:start="167:87" pos:end="167:87">)</operator> <operator pos:start="167:89" pos:end="167:89">+</operator>

                            <name pos:start="169:29" pos:end="169:65">AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE</name><operator pos:start="169:66" pos:end="169:66">*</operator><operator pos:start="169:67" pos:end="169:67">(</operator><operator pos:start="169:68" pos:end="169:68">!</operator><operator pos:start="169:69" pos:end="169:69">!</operator><name pos:start="169:70" pos:end="169:80">sample_rate</name><operator pos:start="169:81" pos:end="169:81">)</operator> <operator pos:start="169:83" pos:end="169:83">+</operator>

                            <name pos:start="171:29" pos:end="171:64">AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS</name><operator pos:start="171:65" pos:end="171:65">*</operator><operator pos:start="171:66" pos:end="171:66">(</operator><operator pos:start="171:67" pos:end="171:67">!</operator><operator pos:start="171:68" pos:end="171:68">!</operator><operator pos:start="171:69" pos:end="171:69">(</operator><name pos:start="171:70" pos:end="171:74">width</name><operator pos:start="171:75" pos:end="171:75">|</operator><name pos:start="171:76" pos:end="171:81">height</name><operator pos:start="171:82" pos:end="171:82">)</operator><operator pos:start="171:83" pos:end="171:83">)</operator></expr></argument>

                           )</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="175:9" pos:end="177:48"><if pos:start="175:9" pos:end="177:48">if <condition pos:start="175:12" pos:end="175:21">(<expr pos:start="175:13" pos:end="175:20"><name pos:start="175:13" pos:end="175:20">channels</name></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:48"><block_content pos:start="177:13" pos:end="177:48">

            <expr_stmt pos:start="177:13" pos:end="177:48"><expr pos:start="177:13" pos:end="177:47"><call pos:start="177:13" pos:end="177:47"><name pos:start="177:13" pos:end="177:31">bytestream_put_le32</name><argument_list pos:start="177:32" pos:end="177:47">(<argument pos:start="177:33" pos:end="177:36"><expr pos:start="177:33" pos:end="177:36"><operator pos:start="177:33" pos:end="177:33">&amp;</operator><name pos:start="177:34" pos:end="177:36">dst</name></expr></argument>, <argument pos:start="177:39" pos:end="177:46"><expr pos:start="177:39" pos:end="177:46"><name pos:start="177:39" pos:end="177:46">channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="179:9" pos:end="181:54"><if pos:start="179:9" pos:end="181:54">if <condition pos:start="179:12" pos:end="179:27">(<expr pos:start="179:13" pos:end="179:26"><name pos:start="179:13" pos:end="179:26">channel_layout</name></expr>)</condition><block type="pseudo" pos:start="181:13" pos:end="181:54"><block_content pos:start="181:13" pos:end="181:54">

            <expr_stmt pos:start="181:13" pos:end="181:54"><expr pos:start="181:13" pos:end="181:53"><call pos:start="181:13" pos:end="181:53"><name pos:start="181:13" pos:end="181:31">bytestream_put_le64</name><argument_list pos:start="181:32" pos:end="181:53">(<argument pos:start="181:33" pos:end="181:36"><expr pos:start="181:33" pos:end="181:36"><operator pos:start="181:33" pos:end="181:33">&amp;</operator><name pos:start="181:34" pos:end="181:36">dst</name></expr></argument>, <argument pos:start="181:39" pos:end="181:52"><expr pos:start="181:39" pos:end="181:52"><name pos:start="181:39" pos:end="181:52">channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="183:9" pos:end="185:51"><if pos:start="183:9" pos:end="185:51">if <condition pos:start="183:12" pos:end="183:24">(<expr pos:start="183:13" pos:end="183:23"><name pos:start="183:13" pos:end="183:23">sample_rate</name></expr>)</condition><block type="pseudo" pos:start="185:13" pos:end="185:51"><block_content pos:start="185:13" pos:end="185:51">

            <expr_stmt pos:start="185:13" pos:end="185:51"><expr pos:start="185:13" pos:end="185:50"><call pos:start="185:13" pos:end="185:50"><name pos:start="185:13" pos:end="185:31">bytestream_put_le32</name><argument_list pos:start="185:32" pos:end="185:50">(<argument pos:start="185:33" pos:end="185:36"><expr pos:start="185:33" pos:end="185:36"><operator pos:start="185:33" pos:end="185:33">&amp;</operator><name pos:start="185:34" pos:end="185:36">dst</name></expr></argument>, <argument pos:start="185:39" pos:end="185:49"><expr pos:start="185:39" pos:end="185:49"><name pos:start="185:39" pos:end="185:49">sample_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="187:9" pos:end="193:9"><if pos:start="187:9" pos:end="193:9">if <condition pos:start="187:12" pos:end="187:28">(<expr pos:start="187:13" pos:end="187:27"><name pos:start="187:13" pos:end="187:17">width</name> <operator pos:start="187:19" pos:end="187:20">||</operator> <name pos:start="187:22" pos:end="187:27">height</name></expr>)</condition><block pos:start="187:29" pos:end="193:9">{<block_content pos:start="189:13" pos:end="191:46">

            <expr_stmt pos:start="189:13" pos:end="189:45"><expr pos:start="189:13" pos:end="189:44"><call pos:start="189:13" pos:end="189:44"><name pos:start="189:13" pos:end="189:31">bytestream_put_le32</name><argument_list pos:start="189:32" pos:end="189:44">(<argument pos:start="189:33" pos:end="189:36"><expr pos:start="189:33" pos:end="189:36"><operator pos:start="189:33" pos:end="189:33">&amp;</operator><name pos:start="189:34" pos:end="189:36">dst</name></expr></argument>, <argument pos:start="189:39" pos:end="189:43"><expr pos:start="189:39" pos:end="189:43"><name pos:start="189:39" pos:end="189:43">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:46"><expr pos:start="191:13" pos:end="191:45"><call pos:start="191:13" pos:end="191:45"><name pos:start="191:13" pos:end="191:31">bytestream_put_le32</name><argument_list pos:start="191:32" pos:end="191:45">(<argument pos:start="191:33" pos:end="191:36"><expr pos:start="191:33" pos:end="191:36"><operator pos:start="191:33" pos:end="191:33">&amp;</operator><name pos:start="191:34" pos:end="191:36">dst</name></expr></argument>, <argument pos:start="191:39" pos:end="191:44"><expr pos:start="191:39" pos:end="191:44"><name pos:start="191:39" pos:end="191:44">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="199:5" pos:end="211:5"><if pos:start="199:5" pos:end="211:5">if <condition pos:start="199:8" pos:end="199:31">(<expr pos:start="199:9" pos:end="199:30"><name pos:start="199:9" pos:end="199:18">skip_start</name> <operator pos:start="199:20" pos:end="199:21">||</operator> <name pos:start="199:23" pos:end="199:30">skip_end</name></expr>)</condition> <block pos:start="199:33" pos:end="211:5">{<block_content pos:start="201:9" pos:end="209:33">

        <decl_stmt pos:start="201:9" pos:end="201:82"><decl pos:start="201:9" pos:end="201:81"><type pos:start="201:9" pos:end="201:17"><name pos:start="201:9" pos:end="201:15">uint8_t</name> <modifier pos:start="201:17" pos:end="201:17">*</modifier></type><name pos:start="201:18" pos:end="201:20">dst</name> <init pos:start="201:22" pos:end="201:81">= <expr pos:start="201:24" pos:end="201:81"><call pos:start="201:24" pos:end="201:81"><name pos:start="201:24" pos:end="201:46">av_packet_new_side_data</name><argument_list pos:start="201:47" pos:end="201:81">(<argument pos:start="201:48" pos:end="201:50"><expr pos:start="201:48" pos:end="201:50"><name pos:start="201:48" pos:end="201:50">pkt</name></expr></argument>, <argument pos:start="201:53" pos:end="201:76"><expr pos:start="201:53" pos:end="201:76"><name pos:start="201:53" pos:end="201:76">AV_PKT_DATA_SKIP_SAMPLES</name></expr></argument>, <argument pos:start="201:79" pos:end="201:80"><expr pos:start="201:79" pos:end="201:80"><literal type="number" pos:start="201:79" pos:end="201:80">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="203:9" pos:end="205:35"><if pos:start="203:9" pos:end="205:35">if <condition pos:start="203:12" pos:end="203:17">(<expr pos:start="203:13" pos:end="203:16"><operator pos:start="203:13" pos:end="203:13">!</operator><name pos:start="203:14" pos:end="203:16">dst</name></expr>)</condition><block type="pseudo" pos:start="205:13" pos:end="205:35"><block_content pos:start="205:13" pos:end="205:35">

            <return pos:start="205:13" pos:end="205:35">return <expr pos:start="205:20" pos:end="205:34"><call pos:start="205:20" pos:end="205:34"><name pos:start="205:20" pos:end="205:26">AVERROR</name><argument_list pos:start="205:27" pos:end="205:34">(<argument pos:start="205:28" pos:end="205:33"><expr pos:start="205:28" pos:end="205:33"><name pos:start="205:28" pos:end="205:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:33"><expr pos:start="207:9" pos:end="207:32"><call pos:start="207:9" pos:end="207:32"><name pos:start="207:9" pos:end="207:15">AV_WL32</name><argument_list pos:start="207:16" pos:end="207:32">(<argument pos:start="207:17" pos:end="207:19"><expr pos:start="207:17" pos:end="207:19"><name pos:start="207:17" pos:end="207:19">dst</name></expr></argument>, <argument pos:start="207:22" pos:end="207:31"><expr pos:start="207:22" pos:end="207:31"><name pos:start="207:22" pos:end="207:31">skip_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:33"><expr pos:start="209:9" pos:end="209:32"><call pos:start="209:9" pos:end="209:32"><name pos:start="209:9" pos:end="209:15">AV_WL32</name><argument_list pos:start="209:16" pos:end="209:32">(<argument pos:start="209:17" pos:end="209:21"><expr pos:start="209:17" pos:end="209:21"><name pos:start="209:17" pos:end="209:19">dst</name><operator pos:start="209:20" pos:end="209:20">+</operator><literal type="number" pos:start="209:21" pos:end="209:21">4</literal></expr></argument>, <argument pos:start="209:24" pos:end="209:31"><expr pos:start="209:24" pos:end="209:31"><name pos:start="209:24" pos:end="209:31">skip_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="215:5" pos:end="215:13">return <expr pos:start="215:12" pos:end="215:12"><literal type="number" pos:start="215:12" pos:end="215:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
