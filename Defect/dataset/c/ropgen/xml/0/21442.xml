<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21442.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">sd_snapshot_goto</name><parameter_list pos:start="1:28" pos:end="1:74">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:44">BlockDriverState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">bs</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:73"><decl pos:start="1:51" pos:end="1:73"><type pos:start="1:51" pos:end="1:73"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:60">char</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:73">snapshot_id</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="139:1">{<block_content pos:start="5:5" pos:end="137:15">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">BDRVSheepdogState</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:24">s</name> <init pos:start="5:26" pos:end="5:37">= <expr pos:start="5:28" pos:end="5:37"><name pos:start="5:28" pos:end="5:37"><name pos:start="5:28" pos:end="5:29">bs</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:37">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">BDRVSheepdogState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">old_s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:28"><name pos:start="9:10" pos:end="9:12">vdi</name><index pos:start="9:13" pos:end="9:28">[<expr pos:start="9:14" pos:end="9:27"><name pos:start="9:14" pos:end="9:27">SD_MAX_VDI_LEN</name></expr>]</index></name></decl>, <decl pos:start="9:31" pos:end="9:53"><type ref="prev" pos:start="9:5" pos:end="9:8"/><name pos:start="9:31" pos:end="9:53"><name pos:start="9:31" pos:end="9:33">tag</name><index pos:start="9:34" pos:end="9:53">[<expr pos:start="9:35" pos:end="9:52"><name pos:start="9:35" pos:end="9:52">SD_MAX_VDI_TAG_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">buf</name> <init pos:start="11:15" pos:end="11:20">= <expr pos:start="11:17" pos:end="11:20"><name pos:start="11:17" pos:end="11:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:16">vid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:19">snapid</name> <init pos:start="15:21" pos:end="15:23">= <expr pos:start="15:23" pos:end="15:23"><literal type="number" pos:start="15:23" pos:end="15:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name> <init pos:start="17:13" pos:end="17:15">= <expr pos:start="17:15" pos:end="17:15"><literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr></init></decl>, <decl pos:start="17:18" pos:end="17:19"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:18" pos:end="17:19">fd</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:48"><expr pos:start="21:5" pos:end="21:47"><name pos:start="21:5" pos:end="21:9">old_s</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <call pos:start="21:13" pos:end="21:47"><name pos:start="21:13" pos:end="21:20">g_malloc</name><argument_list pos:start="21:21" pos:end="21:47">(<argument pos:start="21:22" pos:end="21:46"><expr pos:start="21:22" pos:end="21:46"><sizeof pos:start="21:22" pos:end="21:46">sizeof<argument_list pos:start="21:28" pos:end="21:46">(<argument pos:start="21:29" pos:end="21:45"><expr pos:start="21:29" pos:end="21:45"><name pos:start="21:29" pos:end="21:45">BDRVSheepdogState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:48"><expr pos:start="25:5" pos:end="25:47"><call pos:start="25:5" pos:end="25:47"><name pos:start="25:5" pos:end="25:10">memcpy</name><argument_list pos:start="25:11" pos:end="25:47">(<argument pos:start="25:12" pos:end="25:16"><expr pos:start="25:12" pos:end="25:16"><name pos:start="25:12" pos:end="25:16">old_s</name></expr></argument>, <argument pos:start="25:19" pos:end="25:19"><expr pos:start="25:19" pos:end="25:19"><name pos:start="25:19" pos:end="25:19">s</name></expr></argument>, <argument pos:start="25:22" pos:end="25:46"><expr pos:start="25:22" pos:end="25:46"><sizeof pos:start="25:22" pos:end="25:46">sizeof<argument_list pos:start="25:28" pos:end="25:46">(<argument pos:start="25:29" pos:end="25:45"><expr pos:start="25:29" pos:end="25:45"><name pos:start="25:29" pos:end="25:45">BDRVSheepdogState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:39"><expr pos:start="29:5" pos:end="29:38"><call pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:11">pstrcpy</name><argument_list pos:start="29:12" pos:end="29:38">(<argument pos:start="29:13" pos:end="29:15"><expr pos:start="29:13" pos:end="29:15"><name pos:start="29:13" pos:end="29:15">vdi</name></expr></argument>, <argument pos:start="29:18" pos:end="29:28"><expr pos:start="29:18" pos:end="29:28"><sizeof pos:start="29:18" pos:end="29:28">sizeof<argument_list pos:start="29:24" pos:end="29:28">(<argument pos:start="29:25" pos:end="29:27"><expr pos:start="29:25" pos:end="29:27"><name pos:start="29:25" pos:end="29:27">vdi</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="29:31" pos:end="29:37"><expr pos:start="29:31" pos:end="29:37"><name pos:start="29:31" pos:end="29:37"><name pos:start="29:31" pos:end="29:31">s</name><operator pos:start="29:32" pos:end="29:33">-&gt;</operator><name pos:start="29:34" pos:end="29:37">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:44"><expr pos:start="33:5" pos:end="33:43"><name pos:start="33:5" pos:end="33:10">snapid</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:43"><name pos:start="33:14" pos:end="33:20">strtoul</name><argument_list pos:start="33:21" pos:end="33:43">(<argument pos:start="33:22" pos:end="33:32"><expr pos:start="33:22" pos:end="33:32"><name pos:start="33:22" pos:end="33:32">snapshot_id</name></expr></argument>, <argument pos:start="33:35" pos:end="33:38"><expr pos:start="33:35" pos:end="33:38"><name pos:start="33:35" pos:end="33:38">NULL</name></expr></argument>, <argument pos:start="33:41" pos:end="33:42"><expr pos:start="33:41" pos:end="33:42"><literal type="number" pos:start="33:41" pos:end="33:42">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:14">snapid</name></expr>)</condition> <block pos:start="35:17" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:19">

        <expr_stmt pos:start="37:9" pos:end="37:19"><expr pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:11">tag</name><index pos:start="37:12" pos:end="37:14">[<expr pos:start="37:13" pos:end="37:13"><literal type="number" pos:start="37:13" pos:end="37:13">0</literal></expr>]</index></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="43:5">else <block pos:start="39:12" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:43">

        <expr_stmt pos:start="41:9" pos:end="41:43"><expr pos:start="41:9" pos:end="41:42"><call pos:start="41:9" pos:end="41:42"><name pos:start="41:9" pos:end="41:15">pstrcpy</name><argument_list pos:start="41:16" pos:end="41:42">(<argument pos:start="41:17" pos:end="41:19"><expr pos:start="41:17" pos:end="41:19"><name pos:start="41:17" pos:end="41:19">tag</name></expr></argument>, <argument pos:start="41:22" pos:end="41:32"><expr pos:start="41:22" pos:end="41:32"><sizeof pos:start="41:22" pos:end="41:32">sizeof<argument_list pos:start="41:28" pos:end="41:32">(<argument pos:start="41:29" pos:end="41:31"><expr pos:start="41:29" pos:end="41:31"><name pos:start="41:29" pos:end="41:31">tag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="41:35" pos:end="41:41"><expr pos:start="41:35" pos:end="41:41"><name pos:start="41:35" pos:end="41:41"><name pos:start="41:35" pos:end="41:35">s</name><operator pos:start="41:36" pos:end="41:37">-&gt;</operator><name pos:start="41:38" pos:end="41:41">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:54"><expr pos:start="47:5" pos:end="47:53"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:53"><name pos:start="47:11" pos:end="47:23">find_vdi_name</name><argument_list pos:start="47:24" pos:end="47:53">(<argument pos:start="47:25" pos:end="47:25"><expr pos:start="47:25" pos:end="47:25"><name pos:start="47:25" pos:end="47:25">s</name></expr></argument>, <argument pos:start="47:28" pos:end="47:30"><expr pos:start="47:28" pos:end="47:30"><name pos:start="47:28" pos:end="47:30">vdi</name></expr></argument>, <argument pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><name pos:start="47:33" pos:end="47:38">snapid</name></expr></argument>, <argument pos:start="47:41" pos:end="47:43"><expr pos:start="47:41" pos:end="47:43"><name pos:start="47:41" pos:end="47:43">tag</name></expr></argument>, <argument pos:start="47:46" pos:end="47:49"><expr pos:start="47:46" pos:end="47:49"><operator pos:start="47:46" pos:end="47:46">&amp;</operator><name pos:start="47:47" pos:end="47:49">vid</name></expr></argument>, <argument pos:start="47:52" pos:end="47:52"><expr pos:start="47:52" pos:end="47:52"><literal type="number" pos:start="47:52" pos:end="47:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:12">(<expr pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">ret</name></expr>)</condition> <block pos:start="49:14" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:17">

        <expr_stmt pos:start="51:9" pos:end="51:48"><expr pos:start="51:9" pos:end="51:47"><call pos:start="51:9" pos:end="51:47"><name pos:start="51:9" pos:end="51:20">error_report</name><argument_list pos:start="51:21" pos:end="51:47">(<argument pos:start="51:22" pos:end="51:46"><expr pos:start="51:22" pos:end="51:46"><literal type="string" pos:start="51:22" pos:end="51:46">"Failed to find_vdi_name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:17">goto <name pos:start="53:14" pos:end="53:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:6">fd</name> <operator pos:start="59:8" pos:end="59:8">=</operator> <call pos:start="59:10" pos:end="59:42"><name pos:start="59:10" pos:end="59:24">connect_to_sdog</name><argument_list pos:start="59:25" pos:end="59:42">(<argument pos:start="59:26" pos:end="59:32"><expr pos:start="59:26" pos:end="59:32"><name pos:start="59:26" pos:end="59:32"><name pos:start="59:26" pos:end="59:26">s</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:32">addr</name></name></expr></argument>, <argument pos:start="59:35" pos:end="59:41"><expr pos:start="59:35" pos:end="59:41"><name pos:start="59:35" pos:end="59:41"><name pos:start="59:35" pos:end="59:35">s</name><operator pos:start="59:36" pos:end="59:37">-&gt;</operator><name pos:start="59:38" pos:end="59:41">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if <condition pos:start="61:8" pos:end="61:15">(<expr pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:10">fd</name> <operator pos:start="61:12" pos:end="61:12">&lt;</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>)</condition> <block pos:start="61:17" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:17">

        <expr_stmt pos:start="63:9" pos:end="63:42"><expr pos:start="63:9" pos:end="63:41"><call pos:start="63:9" pos:end="63:41"><name pos:start="63:9" pos:end="63:20">error_report</name><argument_list pos:start="63:21" pos:end="63:41">(<argument pos:start="63:22" pos:end="63:40"><expr pos:start="63:22" pos:end="63:40"><literal type="string" pos:start="63:22" pos:end="63:40">"failed to connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:17"><expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:16">fd</name></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:17">goto <name pos:start="67:14" pos:end="67:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:34"><expr pos:start="73:5" pos:end="73:33"><name pos:start="73:5" pos:end="73:7">buf</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:33"><name pos:start="73:11" pos:end="73:18">g_malloc</name><argument_list pos:start="73:19" pos:end="73:33">(<argument pos:start="73:20" pos:end="73:32"><expr pos:start="73:20" pos:end="73:32"><name pos:start="73:20" pos:end="73:32">SD_INODE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="77:58"><expr pos:start="75:5" pos:end="77:57"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="77:57"><name pos:start="75:11" pos:end="75:21">read_object</name><argument_list pos:start="75:22" pos:end="77:57">(<argument pos:start="75:23" pos:end="75:24"><expr pos:start="75:23" pos:end="75:24"><name pos:start="75:23" pos:end="75:24">fd</name></expr></argument>, <argument pos:start="75:27" pos:end="75:29"><expr pos:start="75:27" pos:end="75:29"><name pos:start="75:27" pos:end="75:29">buf</name></expr></argument>, <argument pos:start="75:32" pos:end="75:50"><expr pos:start="75:32" pos:end="75:50"><call pos:start="75:32" pos:end="75:50"><name pos:start="75:32" pos:end="75:45">vid_to_vdi_oid</name><argument_list pos:start="75:46" pos:end="75:50">(<argument pos:start="75:47" pos:end="75:49"><expr pos:start="75:47" pos:end="75:49"><name pos:start="75:47" pos:end="75:49">vid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:53" pos:end="75:70"><expr pos:start="75:53" pos:end="75:70"><name pos:start="75:53" pos:end="75:70"><name pos:start="75:53" pos:end="75:53">s</name><operator pos:start="75:54" pos:end="75:55">-&gt;</operator><name pos:start="75:56" pos:end="75:60">inode</name><operator pos:start="75:61" pos:end="75:61">.</operator><name pos:start="75:62" pos:end="75:70">nr_copies</name></name></expr></argument>,

                      <argument pos:start="77:23" pos:end="77:35"><expr pos:start="77:23" pos:end="77:35"><name pos:start="77:23" pos:end="77:35">SD_INODE_SIZE</name></expr></argument>, <argument pos:start="77:38" pos:end="77:38"><expr pos:start="77:38" pos:end="77:38"><literal type="number" pos:start="77:38" pos:end="77:38">0</literal></expr></argument>, <argument pos:start="77:41" pos:end="77:56"><expr pos:start="77:41" pos:end="77:56"><name pos:start="77:41" pos:end="77:56"><name pos:start="77:41" pos:end="77:41">s</name><operator pos:start="77:42" pos:end="77:43">-&gt;</operator><name pos:start="77:44" pos:end="77:56">cache_enabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:20"><expr pos:start="81:5" pos:end="81:19"><call pos:start="81:5" pos:end="81:19"><name pos:start="81:5" pos:end="81:15">closesocket</name><argument_list pos:start="81:16" pos:end="81:19">(<argument pos:start="81:17" pos:end="81:18"><expr pos:start="81:17" pos:end="81:18"><name pos:start="81:17" pos:end="81:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:12">(<expr pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">ret</name></expr>)</condition> <block pos:start="85:14" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:17">

        <goto pos:start="87:9" pos:end="87:17">goto <name pos:start="87:14" pos:end="87:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:45"><expr pos:start="93:5" pos:end="93:44"><call pos:start="93:5" pos:end="93:44"><name pos:start="93:5" pos:end="93:10">memcpy</name><argument_list pos:start="93:11" pos:end="93:44">(<argument pos:start="93:12" pos:end="93:20"><expr pos:start="93:12" pos:end="93:20"><operator pos:start="93:12" pos:end="93:12">&amp;</operator><name pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:20">inode</name></name></expr></argument>, <argument pos:start="93:23" pos:end="93:25"><expr pos:start="93:23" pos:end="93:25"><name pos:start="93:23" pos:end="93:25">buf</name></expr></argument>, <argument pos:start="93:28" pos:end="93:43"><expr pos:start="93:28" pos:end="93:43"><sizeof pos:start="93:28" pos:end="93:43">sizeof<argument_list pos:start="93:34" pos:end="93:43">(<argument pos:start="93:35" pos:end="93:42"><expr pos:start="93:35" pos:end="93:42"><name pos:start="93:35" pos:end="93:42"><name pos:start="93:35" pos:end="93:35">s</name><operator pos:start="93:36" pos:end="93:37">-&gt;</operator><name pos:start="93:38" pos:end="93:42">inode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:32">(<expr pos:start="97:9" pos:end="97:31"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:31"><name pos:start="97:10" pos:end="97:10">s</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:17">inode</name><operator pos:start="97:18" pos:end="97:18">.</operator><name pos:start="97:19" pos:end="97:31">vm_state_size</name></name></expr>)</condition> <block pos:start="97:34" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:17">

        <expr_stmt pos:start="99:9" pos:end="99:41"><expr pos:start="99:9" pos:end="99:40"><call pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:20">error_report</name><argument_list pos:start="99:21" pos:end="99:40">(<argument pos:start="99:22" pos:end="99:39"><expr pos:start="99:22" pos:end="99:39"><literal type="string" pos:start="99:22" pos:end="99:39">"Invalid snapshot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:22"><expr pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <operator pos:start="101:15" pos:end="101:15">-</operator><name pos:start="101:16" pos:end="101:21">ENOENT</name></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:17">goto <name pos:start="103:14" pos:end="103:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:26"><expr pos:start="109:5" pos:end="109:25"><name pos:start="109:5" pos:end="109:18"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:18">is_snapshot</name></name> <operator pos:start="109:20" pos:end="109:20">=</operator> <name pos:start="109:22" pos:end="109:25">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:16"><expr pos:start="113:5" pos:end="113:15"><call pos:start="113:5" pos:end="113:15"><name pos:start="113:5" pos:end="113:10">g_free</name><argument_list pos:start="113:11" pos:end="113:15">(<argument pos:start="113:12" pos:end="113:14"><expr pos:start="113:12" pos:end="113:14"><name pos:start="113:12" pos:end="113:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:18"><expr pos:start="115:5" pos:end="115:17"><call pos:start="115:5" pos:end="115:17"><name pos:start="115:5" pos:end="115:10">g_free</name><argument_list pos:start="115:11" pos:end="115:17">(<argument pos:start="115:12" pos:end="115:16"><expr pos:start="115:12" pos:end="115:16"><name pos:start="115:12" pos:end="115:16">old_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="119:5" pos:end="119:13">return <expr pos:start="119:12" pos:end="119:12"><literal type="number" pos:start="119:12" pos:end="119:12">0</literal></expr>;</return>

<label pos:start="121:1" pos:end="121:4"><name pos:start="121:1" pos:end="121:3">out</name>:</label>

    <comment type="block" pos:start="123:5" pos:end="123:31">/* recover bdrv_sd_state */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:48"><expr pos:start="125:5" pos:end="125:47"><call pos:start="125:5" pos:end="125:47"><name pos:start="125:5" pos:end="125:10">memcpy</name><argument_list pos:start="125:11" pos:end="125:47">(<argument pos:start="125:12" pos:end="125:12"><expr pos:start="125:12" pos:end="125:12"><name pos:start="125:12" pos:end="125:12">s</name></expr></argument>, <argument pos:start="125:15" pos:end="125:19"><expr pos:start="125:15" pos:end="125:19"><name pos:start="125:15" pos:end="125:19">old_s</name></expr></argument>, <argument pos:start="125:22" pos:end="125:46"><expr pos:start="125:22" pos:end="125:46"><sizeof pos:start="125:22" pos:end="125:46">sizeof<argument_list pos:start="125:28" pos:end="125:46">(<argument pos:start="125:29" pos:end="125:45"><expr pos:start="125:29" pos:end="125:45"><name pos:start="125:29" pos:end="125:45">BDRVSheepdogState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:16"><expr pos:start="127:5" pos:end="127:15"><call pos:start="127:5" pos:end="127:15"><name pos:start="127:5" pos:end="127:10">g_free</name><argument_list pos:start="127:11" pos:end="127:15">(<argument pos:start="127:12" pos:end="127:14"><expr pos:start="127:12" pos:end="127:14"><name pos:start="127:12" pos:end="127:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:18"><expr pos:start="129:5" pos:end="129:17"><call pos:start="129:5" pos:end="129:17"><name pos:start="129:5" pos:end="129:10">g_free</name><argument_list pos:start="129:11" pos:end="129:17">(<argument pos:start="129:12" pos:end="129:16"><expr pos:start="129:12" pos:end="129:16"><name pos:start="129:12" pos:end="129:16">old_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:63"><expr pos:start="133:5" pos:end="133:62"><call pos:start="133:5" pos:end="133:62"><name pos:start="133:5" pos:end="133:16">error_report</name><argument_list pos:start="133:17" pos:end="133:62">(<argument pos:start="133:18" pos:end="133:61"><expr pos:start="133:18" pos:end="133:61"><literal type="string" pos:start="133:18" pos:end="133:61">"failed to open. recover old bdrv_sd_state."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="137:5" pos:end="137:15">return <expr pos:start="137:12" pos:end="137:14"><name pos:start="137:12" pos:end="137:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
