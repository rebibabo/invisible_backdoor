<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20793.c" pos:tabs="8"><macro pos:start="1:1" pos:end="23:49"><name pos:start="1:1" pos:end="1:19">print_with_operands</name> <argument_list pos:start="1:21" pos:end="23:49">(<argument pos:start="1:22" pos:end="1:54">const struct cris_opcode *opcodep</argument>,

		     <argument pos:start="3:22" pos:end="3:38">unsigned int insn</argument>,

		     <argument pos:start="5:22" pos:end="5:42">unsigned char *buffer</argument>,

		     <argument pos:start="7:22" pos:end="7:33">bfd_vma addr</argument>,

		     <argument pos:start="9:22" pos:end="9:43">disassemble_info *info</argument>,

		     <comment type="block" pos:start="11:22" pos:end="15:31">/* If a prefix insn was before this insn (and is supposed

			to be output as an address), here is a description of

			it.  */</comment>

		     <argument pos:start="17:22" pos:end="17:61">const struct cris_opcode *prefix_opcodep</argument>,

		     <argument pos:start="19:22" pos:end="19:45">unsigned int prefix_insn</argument>,

		     <argument pos:start="21:22" pos:end="21:49">unsigned char *prefix_buffer</argument>,

		     <argument pos:start="23:22" pos:end="23:48">bfd_boolean with_reg_prefix</argument>)</argument_list></macro>

<block pos:start="25:1" pos:end="1305:1">{<block_content pos:start="31:3" pos:end="1303:5">

  <comment type="block" pos:start="27:3" pos:end="29:40">/* Get a buffer of somewhat reasonable size where we store

     intermediate parts of the insn.  */</comment>

  <decl_stmt pos:start="31:3" pos:end="31:59"><decl pos:start="31:3" pos:end="31:58"><type pos:start="31:3" pos:end="31:6"><name pos:start="31:3" pos:end="31:6">char</name></type> <name pos:start="31:8" pos:end="31:58"><name pos:start="31:8" pos:end="31:11">temp</name><index pos:start="31:12" pos:end="31:58">[<expr pos:start="31:13" pos:end="31:57"><sizeof pos:start="31:13" pos:end="31:53">sizeof <argument_list pos:start="31:20" pos:end="31:53">(<argument pos:start="31:21" pos:end="31:52"><expr pos:start="31:21" pos:end="31:52"><literal type="string" pos:start="31:21" pos:end="31:52">".d [$r13=$r12-2147483648],$r10"</literal></expr></argument>)</argument_list></sizeof> <operator pos:start="31:55" pos:end="31:55">*</operator> <literal type="number" pos:start="31:57" pos:end="31:57">2</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt pos:start="33:3" pos:end="33:18"><decl pos:start="33:3" pos:end="33:17"><type pos:start="33:3" pos:end="33:8"><name pos:start="33:3" pos:end="33:6">char</name> <modifier pos:start="33:8" pos:end="33:8">*</modifier></type><name pos:start="33:9" pos:end="33:10">tp</name> <init pos:start="33:12" pos:end="33:17">= <expr pos:start="33:14" pos:end="33:17"><name pos:start="33:14" pos:end="33:17">temp</name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="35:3" pos:end="35:41"><decl pos:start="35:3" pos:end="35:40"><type pos:start="35:3" pos:end="35:19"><specifier pos:start="35:3" pos:end="35:8">static</specifier> <specifier pos:start="35:10" pos:end="35:14">const</specifier> <name pos:start="35:16" pos:end="35:19">char</name></type> <name pos:start="35:21" pos:end="35:31"><name pos:start="35:21" pos:end="35:29">mode_char</name><index pos:start="35:30" pos:end="35:31">[]</index></name> <init pos:start="35:33" pos:end="35:40">= <expr pos:start="35:35" pos:end="35:40"><literal type="string" pos:start="35:35" pos:end="35:40">"bwd?"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="37:3" pos:end="37:16"><decl pos:start="37:3" pos:end="37:15"><type pos:start="37:3" pos:end="37:14"><specifier pos:start="37:3" pos:end="37:7">const</specifier> <name pos:start="37:9" pos:end="37:12">char</name> <modifier pos:start="37:14" pos:end="37:14">*</modifier></type><name pos:start="37:15" pos:end="37:15">s</name></decl>;</decl_stmt>

  <decl_stmt pos:start="39:3" pos:end="39:17"><decl pos:start="39:3" pos:end="39:16"><type pos:start="39:3" pos:end="39:14"><specifier pos:start="39:3" pos:end="39:7">const</specifier> <name pos:start="39:9" pos:end="39:12">char</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:16">cs</name></decl>;</decl_stmt>

  <decl_stmt pos:start="41:3" pos:end="43:53"><decl pos:start="41:3" pos:end="43:52"><type pos:start="41:3" pos:end="41:27"><name pos:start="41:3" pos:end="41:25"><name pos:start="41:3" pos:end="41:8">struct</name> <name pos:start="41:10" pos:end="41:25">cris_disasm_data</name></name> <modifier pos:start="41:27" pos:end="41:27">*</modifier></type><name pos:start="41:28" pos:end="41:34">disdata</name>

    <init pos:start="43:5" pos:end="43:52">= <expr pos:start="43:7" pos:end="43:52"><operator pos:start="43:7" pos:end="43:7">(</operator>struct <name pos:start="43:15" pos:end="43:30">cris_disasm_data</name> <operator pos:start="43:32" pos:end="43:32">*</operator><operator pos:start="43:33" pos:end="43:33">)</operator> <name pos:start="43:35" pos:end="43:52"><name pos:start="43:35" pos:end="43:38">info</name><operator pos:start="43:39" pos:end="43:40">-&gt;</operator><name pos:start="43:41" pos:end="43:52">private_data</name></name></expr></init></decl>;</decl_stmt>



  <comment type="block" pos:start="47:3" pos:end="47:46">/* Print out the name first thing we do.  */</comment>

  <expr_stmt pos:start="49:3" pos:end="49:60"><expr pos:start="49:3" pos:end="49:59"><call pos:start="49:3" pos:end="49:59">(<modifier pos:start="49:4" pos:end="49:4">*</modifier><name pos:start="49:5" pos:end="49:22"><name pos:start="49:5" pos:end="49:8">info</name><operator pos:start="49:9" pos:end="49:10">-&gt;</operator><name pos:start="49:11" pos:end="49:22">fprintf_func</name></name>) <argument_list pos:start="49:25" pos:end="49:59">(<argument pos:start="49:26" pos:end="49:37"><expr pos:start="49:26" pos:end="49:37"><name pos:start="49:26" pos:end="49:37"><name pos:start="49:26" pos:end="49:29">info</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:37">stream</name></name></expr></argument>, <argument pos:start="49:40" pos:end="49:43"><expr pos:start="49:40" pos:end="49:43"><literal type="string" pos:start="49:40" pos:end="49:43">"%s"</literal></expr></argument>, <argument pos:start="49:46" pos:end="49:58"><expr pos:start="49:46" pos:end="49:58"><name pos:start="49:46" pos:end="49:58"><name pos:start="49:46" pos:end="49:52">opcodep</name><operator pos:start="49:53" pos:end="49:54">-&gt;</operator><name pos:start="49:55" pos:end="49:58">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <expr_stmt pos:start="53:3" pos:end="53:21"><expr pos:start="53:3" pos:end="53:20"><name pos:start="53:3" pos:end="53:4">cs</name> <operator pos:start="53:6" pos:end="53:6">=</operator> <name pos:start="53:8" pos:end="53:20"><name pos:start="53:8" pos:end="53:14">opcodep</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:20">args</name></name></expr>;</expr_stmt>

  <expr_stmt pos:start="55:3" pos:end="55:9"><expr pos:start="55:3" pos:end="55:8"><name pos:start="55:3" pos:end="55:3">s</name> <operator pos:start="55:5" pos:end="55:5">=</operator> <name pos:start="55:7" pos:end="55:8">cs</name></expr>;</expr_stmt>



  <comment type="block" pos:start="59:3" pos:end="59:37">/* Ignore any prefix indicator.  */</comment>

  <if_stmt pos:start="61:3" pos:end="63:8"><if pos:start="61:3" pos:end="63:8">if <condition pos:start="61:6" pos:end="61:16">(<expr pos:start="61:7" pos:end="61:15"><operator pos:start="61:7" pos:end="61:7">*</operator><name pos:start="61:8" pos:end="61:8">s</name> <operator pos:start="61:10" pos:end="61:11">==</operator> <literal type="char" pos:start="61:13" pos:end="61:15">'p'</literal></expr>)</condition><block type="pseudo" pos:start="63:5" pos:end="63:8"><block_content pos:start="63:5" pos:end="63:8">

    <expr_stmt pos:start="63:5" pos:end="63:8"><expr pos:start="63:5" pos:end="63:7"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



  <if_stmt pos:start="67:3" pos:end="91:5"><if pos:start="67:3" pos:end="91:5">if <condition pos:start="67:6" pos:end="67:42">(<expr pos:start="67:7" pos:end="67:41"><operator pos:start="67:7" pos:end="67:7">*</operator><name pos:start="67:8" pos:end="67:8">s</name> <operator pos:start="67:10" pos:end="67:11">==</operator> <literal type="char" pos:start="67:13" pos:end="67:15">'m'</literal> <operator pos:start="67:17" pos:end="67:18">||</operator> <operator pos:start="67:20" pos:end="67:20">*</operator><name pos:start="67:21" pos:end="67:21">s</name> <operator pos:start="67:23" pos:end="67:24">==</operator> <literal type="char" pos:start="67:26" pos:end="67:28">'M'</literal> <operator pos:start="67:30" pos:end="67:31">||</operator> <operator pos:start="67:33" pos:end="67:33">*</operator><name pos:start="67:34" pos:end="67:34">s</name> <operator pos:start="67:36" pos:end="67:37">==</operator> <literal type="char" pos:start="67:39" pos:end="67:41">'z'</literal></expr>)</condition>

    <block pos:start="69:5" pos:end="91:5">{<block_content pos:start="71:7" pos:end="89:13">

      <expr_stmt pos:start="71:7" pos:end="71:18"><expr pos:start="71:7" pos:end="71:17"><operator pos:start="71:7" pos:end="71:7">*</operator><name pos:start="71:8" pos:end="71:9">tp</name><operator pos:start="71:10" pos:end="71:11">++</operator> <operator pos:start="71:13" pos:end="71:13">=</operator> <literal type="char" pos:start="71:15" pos:end="71:17">'.'</literal></expr>;</expr_stmt>



      <comment type="block" pos:start="75:7" pos:end="75:33">/* Get the size-letter.  */</comment>

      <expr_stmt pos:start="77:7" pos:end="83:55"><expr pos:start="77:7" pos:end="83:54"><operator pos:start="77:7" pos:end="77:7">*</operator><name pos:start="77:8" pos:end="77:9">tp</name><operator pos:start="77:10" pos:end="77:11">++</operator> <operator pos:start="77:13" pos:end="77:13">=</operator> <ternary pos:start="77:15" pos:end="83:54"><condition pos:start="77:15" pos:end="79:9"><expr pos:start="77:15" pos:end="77:23"><operator pos:start="77:15" pos:end="77:15">*</operator><name pos:start="77:16" pos:end="77:16">s</name> <operator pos:start="77:18" pos:end="77:19">==</operator> <literal type="char" pos:start="77:21" pos:end="77:23">'M'</literal></expr>

	?</condition><then pos:start="79:11" pos:end="81:39"> <expr pos:start="79:11" pos:end="81:39"><operator pos:start="79:11" pos:end="79:11">(</operator><ternary pos:start="79:12" pos:end="81:38"><condition pos:start="79:12" pos:end="79:26"><expr pos:start="79:12" pos:end="79:24"><name pos:start="79:12" pos:end="79:15">insn</name> <operator pos:start="79:17" pos:end="79:17">&amp;</operator> <literal type="number" pos:start="79:19" pos:end="79:24">0x8000</literal></expr> ?</condition><then pos:start="79:28" pos:end="79:30"> <expr pos:start="79:28" pos:end="79:30"><literal type="char" pos:start="79:28" pos:end="79:30">'d'</literal></expr>

	   </then><else pos:start="81:12" pos:end="81:38">: <expr pos:start="81:14" pos:end="81:38"><ternary pos:start="81:14" pos:end="81:38"><condition pos:start="81:14" pos:end="81:28"><expr pos:start="81:14" pos:end="81:26"><name pos:start="81:14" pos:end="81:17">insn</name> <operator pos:start="81:19" pos:end="81:19">&amp;</operator> <literal type="number" pos:start="81:21" pos:end="81:26">0x4000</literal></expr> ?</condition><then pos:start="81:30" pos:end="81:32"> <expr pos:start="81:30" pos:end="81:32"><literal type="char" pos:start="81:30" pos:end="81:32">'w'</literal></expr> </then><else pos:start="81:34" pos:end="81:38">: <expr pos:start="81:36" pos:end="81:38"><literal type="char" pos:start="81:36" pos:end="81:38">'b'</literal></expr></else></ternary></expr></else></ternary><operator pos:start="81:39" pos:end="81:39">)</operator></expr>

	</then><else pos:start="83:9" pos:end="83:54">: <expr pos:start="83:11" pos:end="83:54"><name pos:start="83:11" pos:end="83:54"><name pos:start="83:11" pos:end="83:19">mode_char</name><index pos:start="83:20" pos:end="83:54">[<expr pos:start="83:21" pos:end="83:53"><operator pos:start="83:21" pos:end="83:21">(</operator><name pos:start="83:22" pos:end="83:25">insn</name> <operator pos:start="83:27" pos:end="83:28">&gt;&gt;</operator> <literal type="number" pos:start="83:30" pos:end="83:30">4</literal><operator pos:start="83:31" pos:end="83:31">)</operator> <operator pos:start="83:33" pos:end="83:33">&amp;</operator> <operator pos:start="83:35" pos:end="83:35">(</operator><ternary pos:start="83:36" pos:end="83:52"><condition pos:start="83:36" pos:end="83:46"><expr pos:start="83:36" pos:end="83:44"><operator pos:start="83:36" pos:end="83:36">*</operator><name pos:start="83:37" pos:end="83:37">s</name> <operator pos:start="83:39" pos:end="83:40">==</operator> <literal type="char" pos:start="83:42" pos:end="83:44">'z'</literal></expr> ?</condition><then pos:start="83:48" pos:end="83:48"> <expr pos:start="83:48" pos:end="83:48"><literal type="number" pos:start="83:48" pos:end="83:48">1</literal></expr> </then><else pos:start="83:50" pos:end="83:52">: <expr pos:start="83:52" pos:end="83:52"><literal type="number" pos:start="83:52" pos:end="83:52">3</literal></expr></else></ternary><operator pos:start="83:53" pos:end="83:53">)</operator></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>



      <comment type="block" pos:start="87:7" pos:end="87:66">/* Ignore the size and the space character that follows.  */</comment>

      <expr_stmt pos:start="89:7" pos:end="89:13"><expr pos:start="89:7" pos:end="89:12"><name pos:start="89:7" pos:end="89:7">s</name> <operator pos:start="89:9" pos:end="89:10">+=</operator> <literal type="number" pos:start="89:12" pos:end="89:12">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



  <comment type="block" pos:start="95:3" pos:end="97:46">/* Add a space if this isn't a long-branch, because for those will add

     the condition part of the name later.  */</comment>

  <if_stmt pos:start="99:3" pos:end="101:16"><if pos:start="99:3" pos:end="101:16">if <condition pos:start="99:6" pos:end="99:65">(<expr pos:start="99:7" pos:end="99:64"><name pos:start="99:7" pos:end="99:20"><name pos:start="99:7" pos:end="99:13">opcodep</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:20">match</name></name> <operator pos:start="99:22" pos:end="99:23">!=</operator> <operator pos:start="99:25" pos:end="99:25">(</operator><name pos:start="99:26" pos:end="99:38">BRANCH_PC_LOW</name> <operator pos:start="99:40" pos:end="99:40">+</operator> <name pos:start="99:42" pos:end="99:57">BRANCH_INCR_HIGH</name> <operator pos:start="99:59" pos:end="99:59">*</operator> <literal type="number" pos:start="99:61" pos:end="99:63">256</literal><operator pos:start="99:64" pos:end="99:64">)</operator></expr>)</condition><block type="pseudo" pos:start="101:5" pos:end="101:16"><block_content pos:start="101:5" pos:end="101:16">

    <expr_stmt pos:start="101:5" pos:end="101:16"><expr pos:start="101:5" pos:end="101:15"><operator pos:start="101:5" pos:end="101:5">*</operator><name pos:start="101:6" pos:end="101:7">tp</name><operator pos:start="101:8" pos:end="101:9">++</operator> <operator pos:start="101:11" pos:end="101:11">=</operator> <literal type="char" pos:start="101:13" pos:end="101:15">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



  <comment type="block" pos:start="105:3" pos:end="107:21">/* Fill in the insn-type if deducible from the name (and there's no

     better way).  */</comment>

  <if_stmt pos:start="109:3" pos:end="125:5"><if pos:start="109:3" pos:end="125:5">if <condition pos:start="109:6" pos:end="109:30">(<expr pos:start="109:7" pos:end="109:29"><name pos:start="109:7" pos:end="109:22"><name pos:start="109:7" pos:end="109:13">opcodep</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:19">name</name><index pos:start="109:20" pos:end="109:22">[<expr pos:start="109:21" pos:end="109:21"><literal type="number" pos:start="109:21" pos:end="109:21">0</literal></expr>]</index></name> <operator pos:start="109:24" pos:end="109:25">==</operator> <literal type="char" pos:start="109:27" pos:end="109:29">'j'</literal></expr>)</condition>

    <block pos:start="111:5" pos:end="125:5">{<block_content pos:start="113:7" pos:end="123:37">

      <if_stmt pos:start="113:7" pos:end="123:37"><if pos:start="113:7" pos:end="117:34">if <condition pos:start="113:10" pos:end="113:46">(<expr pos:start="113:11" pos:end="113:45"><call pos:start="113:11" pos:end="113:45"><name pos:start="113:11" pos:end="113:22">CONST_STRNEQ</name> <argument_list pos:start="113:24" pos:end="113:45">(<argument pos:start="113:25" pos:end="113:37"><expr pos:start="113:25" pos:end="113:37"><name pos:start="113:25" pos:end="113:37"><name pos:start="113:25" pos:end="113:31">opcodep</name><operator pos:start="113:32" pos:end="113:33">-&gt;</operator><name pos:start="113:34" pos:end="113:37">name</name></name></expr></argument>, <argument pos:start="113:40" pos:end="113:44"><expr pos:start="113:40" pos:end="113:44"><literal type="string" pos:start="113:40" pos:end="113:44">"jsr"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="117:9" pos:end="117:34"><block_content pos:start="117:9" pos:end="117:34">

	<comment type="block" pos:start="115:9" pos:end="115:36">/* It's "jsr" or "jsrc".  */</comment>

	<expr_stmt pos:start="117:9" pos:end="117:34"><expr pos:start="117:9" pos:end="117:33"><name pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:12">info</name><operator pos:start="117:13" pos:end="117:14">-&gt;</operator><name pos:start="117:15" pos:end="117:23">insn_type</name></name> <operator pos:start="117:25" pos:end="117:25">=</operator> <name pos:start="117:27" pos:end="117:33">dis_jsr</name></expr>;</expr_stmt></block_content></block></if>

      <else pos:start="119:7" pos:end="123:37">else<block type="pseudo" pos:start="123:9" pos:end="123:37"><block_content pos:start="123:9" pos:end="123:37">

	<comment type="block" pos:start="121:9" pos:end="121:63">/* Any other jump-type insn is considered a branch.  */</comment>

	<expr_stmt pos:start="123:9" pos:end="123:37"><expr pos:start="123:9" pos:end="123:36"><name pos:start="123:9" pos:end="123:23"><name pos:start="123:9" pos:end="123:12">info</name><operator pos:start="123:13" pos:end="123:14">-&gt;</operator><name pos:start="123:15" pos:end="123:23">insn_type</name></name> <operator pos:start="123:25" pos:end="123:25">=</operator> <name pos:start="123:27" pos:end="123:36">dis_branch</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



  <comment type="block" pos:start="129:3" pos:end="129:50">/* We might know some more fields right now.  */</comment>

  <expr_stmt pos:start="131:3" pos:end="131:46"><expr pos:start="131:3" pos:end="131:45"><name pos:start="131:3" pos:end="131:26"><name pos:start="131:3" pos:end="131:6">info</name><operator pos:start="131:7" pos:end="131:8">-&gt;</operator><name pos:start="131:9" pos:end="131:26">branch_delay_insns</name></name> <operator pos:start="131:28" pos:end="131:28">=</operator> <name pos:start="131:30" pos:end="131:45"><name pos:start="131:30" pos:end="131:36">opcodep</name><operator pos:start="131:37" pos:end="131:38">-&gt;</operator><name pos:start="131:39" pos:end="131:45">delayed</name></name></expr>;</expr_stmt>



  <comment type="block" pos:start="135:3" pos:end="135:25">/* Handle operands.  */</comment>

  <for pos:start="137:3" pos:end="1237:3">for <control pos:start="137:7" pos:end="137:17">(<init pos:start="137:8" pos:end="137:8">;</init> <condition pos:start="137:10" pos:end="137:12"><expr pos:start="137:10" pos:end="137:11"><operator pos:start="137:10" pos:end="137:10">*</operator><name pos:start="137:11" pos:end="137:11">s</name></expr>;</condition> <incr pos:start="137:14" pos:end="137:16"><expr pos:start="137:14" pos:end="137:16"><name pos:start="137:14" pos:end="137:14">s</name><operator pos:start="137:15" pos:end="137:16">++</operator></expr></incr>)</control>

    <block pos:start="139:5" pos:end="1237:3">{<block_content pos:start="141:5" pos:end="1235:5">

    <switch pos:start="141:5" pos:end="1235:5">switch <condition pos:start="141:12" pos:end="141:15">(<expr pos:start="141:13" pos:end="141:14"><operator pos:start="141:13" pos:end="141:13">*</operator><name pos:start="141:14" pos:end="141:14">s</name></expr>)</condition>

      <block pos:start="143:7" pos:end="1235:5">{<block_content pos:start="145:7" pos:end="1233:14">

      <case pos:start="145:7" pos:end="145:15">case <expr pos:start="145:12" pos:end="145:14"><literal type="char" pos:start="145:12" pos:end="145:14">'T'</literal></expr>:</case>

	<expr_stmt pos:start="147:9" pos:end="147:69"><expr pos:start="147:9" pos:end="147:68"><name pos:start="147:9" pos:end="147:10">tp</name> <operator pos:start="147:12" pos:end="147:12">=</operator> <call pos:start="147:14" pos:end="147:68"><name pos:start="147:14" pos:end="147:27">format_sup_reg</name> <argument_list pos:start="147:29" pos:end="147:68">(<argument pos:start="147:30" pos:end="147:46"><expr pos:start="147:30" pos:end="147:46"><operator pos:start="147:30" pos:end="147:30">(</operator><name pos:start="147:31" pos:end="147:34">insn</name> <operator pos:start="147:36" pos:end="147:37">&gt;&gt;</operator> <literal type="number" pos:start="147:39" pos:end="147:40">12</literal><operator pos:start="147:41" pos:end="147:41">)</operator> <operator pos:start="147:43" pos:end="147:43">&amp;</operator> <literal type="number" pos:start="147:45" pos:end="147:46">15</literal></expr></argument>, <argument pos:start="147:49" pos:end="147:50"><expr pos:start="147:49" pos:end="147:50"><name pos:start="147:49" pos:end="147:50">tp</name></expr></argument>, <argument pos:start="147:53" pos:end="147:67"><expr pos:start="147:53" pos:end="147:67"><name pos:start="147:53" pos:end="147:67">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="149:9" pos:end="149:14">break;</break>



      <case pos:start="153:7" pos:end="153:15">case <expr pos:start="153:12" pos:end="153:14"><literal type="char" pos:start="153:12" pos:end="153:14">'A'</literal></expr>:</case>

	<if_stmt pos:start="155:9" pos:end="157:39"><if pos:start="155:9" pos:end="157:39">if <condition pos:start="155:12" pos:end="155:28">(<expr pos:start="155:13" pos:end="155:27"><name pos:start="155:13" pos:end="155:27">with_reg_prefix</name></expr>)</condition><block type="pseudo" pos:start="157:11" pos:end="157:39"><block_content pos:start="157:11" pos:end="157:39">

	  <expr_stmt pos:start="157:11" pos:end="157:39"><expr pos:start="157:11" pos:end="157:38"><operator pos:start="157:11" pos:end="157:11">*</operator><name pos:start="157:12" pos:end="157:13">tp</name><operator pos:start="157:14" pos:end="157:15">++</operator> <operator pos:start="157:17" pos:end="157:17">=</operator> <name pos:start="157:19" pos:end="157:38">REGISTER_PREFIX_CHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt pos:start="159:9" pos:end="159:20"><expr pos:start="159:9" pos:end="159:19"><operator pos:start="159:9" pos:end="159:9">*</operator><name pos:start="159:10" pos:end="159:11">tp</name><operator pos:start="159:12" pos:end="159:13">++</operator> <operator pos:start="159:15" pos:end="159:15">=</operator> <literal type="char" pos:start="159:17" pos:end="159:19">'a'</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="161:9" pos:end="161:20"><expr pos:start="161:9" pos:end="161:19"><operator pos:start="161:9" pos:end="161:9">*</operator><name pos:start="161:10" pos:end="161:11">tp</name><operator pos:start="161:12" pos:end="161:13">++</operator> <operator pos:start="161:15" pos:end="161:15">=</operator> <literal type="char" pos:start="161:17" pos:end="161:19">'c'</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="163:9" pos:end="163:20"><expr pos:start="163:9" pos:end="163:19"><operator pos:start="163:9" pos:end="163:9">*</operator><name pos:start="163:10" pos:end="163:11">tp</name><operator pos:start="163:12" pos:end="163:13">++</operator> <operator pos:start="163:15" pos:end="163:15">=</operator> <literal type="char" pos:start="163:17" pos:end="163:19">'r'</literal></expr>;</expr_stmt>

	<break pos:start="165:9" pos:end="165:14">break;</break>



      <case pos:start="169:7" pos:end="169:15">case <expr pos:start="169:12" pos:end="169:14"><literal type="char" pos:start="169:12" pos:end="169:14">'['</literal></expr>:</case>

      <case pos:start="171:7" pos:end="171:15">case <expr pos:start="171:12" pos:end="171:14"><literal type="char" pos:start="171:12" pos:end="171:14">']'</literal></expr>:</case>

      <case pos:start="173:7" pos:end="173:15">case <expr pos:start="173:12" pos:end="173:14"><literal type="char" pos:start="173:12" pos:end="173:14">','</literal></expr>:</case>

	<expr_stmt pos:start="175:9" pos:end="175:19"><expr pos:start="175:9" pos:end="175:18"><operator pos:start="175:9" pos:end="175:9">*</operator><name pos:start="175:10" pos:end="175:11">tp</name><operator pos:start="175:12" pos:end="175:13">++</operator> <operator pos:start="175:15" pos:end="175:15">=</operator> <operator pos:start="175:17" pos:end="175:17">*</operator><name pos:start="175:18" pos:end="175:18">s</name></expr>;</expr_stmt>

	<break pos:start="177:9" pos:end="177:14">break;</break>



      <case pos:start="181:7" pos:end="181:15">case <expr pos:start="181:12" pos:end="181:14"><literal type="char" pos:start="181:12" pos:end="181:14">'!'</literal></expr>:</case>

	<comment type="block" pos:start="183:9" pos:end="187:39">/* Ignore at this point; used at earlier stages to avoid

	   recognition if there's a prefix at something that in other

	   ways looks like a "pop".  */</comment>

	<break pos:start="189:9" pos:end="189:14">break;</break>



      <case pos:start="193:7" pos:end="193:15">case <expr pos:start="193:12" pos:end="193:14"><literal type="char" pos:start="193:12" pos:end="193:14">'d'</literal></expr>:</case>

	<comment type="block" pos:start="195:9" pos:end="197:31">/* Ignore.  This is an optional ".d " on the large one of

	   relaxable insns.  */</comment>

	<break pos:start="199:9" pos:end="199:14">break;</break>



      <case pos:start="203:7" pos:end="203:15">case <expr pos:start="203:12" pos:end="203:14"><literal type="char" pos:start="203:12" pos:end="203:14">'B'</literal></expr>:</case>

	<comment type="block" pos:start="205:9" pos:end="209:45">/* This was the prefix that made this a "push".  We've already

	   handled it by recognizing it, so signal that the prefix is

	   handled by setting it to NULL.  */</comment>

	<expr_stmt pos:start="211:9" pos:end="211:30"><expr pos:start="211:9" pos:end="211:29"><name pos:start="211:9" pos:end="211:22">prefix_opcodep</name> <operator pos:start="211:24" pos:end="211:24">=</operator> <name pos:start="211:26" pos:end="211:29">NULL</name></expr>;</expr_stmt>

	<break pos:start="213:9" pos:end="213:14">break;</break>



      <case pos:start="217:7" pos:end="217:15">case <expr pos:start="217:12" pos:end="217:14"><literal type="char" pos:start="217:12" pos:end="217:14">'D'</literal></expr>:</case>

      <case pos:start="219:7" pos:end="219:15">case <expr pos:start="219:12" pos:end="219:14"><literal type="char" pos:start="219:12" pos:end="219:14">'r'</literal></expr>:</case>

	<expr_stmt pos:start="221:9" pos:end="221:66"><expr pos:start="221:9" pos:end="221:65"><name pos:start="221:9" pos:end="221:10">tp</name> <operator pos:start="221:12" pos:end="221:12">=</operator> <call pos:start="221:14" pos:end="221:65"><name pos:start="221:14" pos:end="221:23">format_reg</name> <argument_list pos:start="221:25" pos:end="221:65">(<argument pos:start="221:26" pos:end="221:32"><expr pos:start="221:26" pos:end="221:32"><name pos:start="221:26" pos:end="221:32">disdata</name></expr></argument>, <argument pos:start="221:35" pos:end="221:43"><expr pos:start="221:35" pos:end="221:43"><name pos:start="221:35" pos:end="221:38">insn</name> <operator pos:start="221:40" pos:end="221:40">&amp;</operator> <literal type="number" pos:start="221:42" pos:end="221:43">15</literal></expr></argument>, <argument pos:start="221:46" pos:end="221:47"><expr pos:start="221:46" pos:end="221:47"><name pos:start="221:46" pos:end="221:47">tp</name></expr></argument>, <argument pos:start="221:50" pos:end="221:64"><expr pos:start="221:50" pos:end="221:64"><name pos:start="221:50" pos:end="221:64">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="223:9" pos:end="223:14">break;</break>



      <case pos:start="227:7" pos:end="227:15">case <expr pos:start="227:12" pos:end="227:14"><literal type="char" pos:start="227:12" pos:end="227:14">'R'</literal></expr>:</case>

	<expr_stmt pos:start="229:9" pos:end="229:74"><expr pos:start="229:9" pos:end="229:73"><name pos:start="229:9" pos:end="229:10">tp</name> <operator pos:start="229:12" pos:end="229:12">=</operator> <call pos:start="229:14" pos:end="229:73"><name pos:start="229:14" pos:end="229:23">format_reg</name> <argument_list pos:start="229:25" pos:end="229:73">(<argument pos:start="229:26" pos:end="229:32"><expr pos:start="229:26" pos:end="229:32"><name pos:start="229:26" pos:end="229:32">disdata</name></expr></argument>, <argument pos:start="229:35" pos:end="229:51"><expr pos:start="229:35" pos:end="229:51"><operator pos:start="229:35" pos:end="229:35">(</operator><name pos:start="229:36" pos:end="229:39">insn</name> <operator pos:start="229:41" pos:end="229:42">&gt;&gt;</operator> <literal type="number" pos:start="229:44" pos:end="229:45">12</literal><operator pos:start="229:46" pos:end="229:46">)</operator> <operator pos:start="229:48" pos:end="229:48">&amp;</operator> <literal type="number" pos:start="229:50" pos:end="229:51">15</literal></expr></argument>, <argument pos:start="229:54" pos:end="229:55"><expr pos:start="229:54" pos:end="229:55"><name pos:start="229:54" pos:end="229:55">tp</name></expr></argument>, <argument pos:start="229:58" pos:end="229:72"><expr pos:start="229:58" pos:end="229:72"><name pos:start="229:58" pos:end="229:72">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="231:9" pos:end="231:14">break;</break>



      <case pos:start="235:7" pos:end="235:15">case <expr pos:start="235:12" pos:end="235:14"><literal type="char" pos:start="235:12" pos:end="235:14">'n'</literal></expr>:</case>

	<block pos:start="237:9" pos:end="263:9">{<block_content pos:start="241:11" pos:end="261:63">

	  <comment type="block" pos:start="239:11" pos:end="239:65">/* Like N but pc-relative to the start of the insn.  */</comment>

	  <decl_stmt pos:start="241:11" pos:end="245:47"><decl pos:start="241:11" pos:end="245:46"><type pos:start="241:11" pos:end="241:23"><name pos:start="241:11" pos:end="241:18">unsigned</name> <name pos:start="241:20" pos:end="241:23">long</name></type> <name pos:start="241:25" pos:end="241:30">number</name>

	    <init pos:start="243:13" pos:end="245:46">= <expr pos:start="243:15" pos:end="245:46"><operator pos:start="243:15" pos:end="243:15">(</operator><name pos:start="243:16" pos:end="243:24"><name pos:start="243:16" pos:end="243:21">buffer</name><index pos:start="243:22" pos:end="243:24">[<expr pos:start="243:23" pos:end="243:23"><literal type="number" pos:start="243:23" pos:end="243:23">2</literal></expr>]</index></name> <operator pos:start="243:26" pos:end="243:26">+</operator> <name pos:start="243:28" pos:end="243:36"><name pos:start="243:28" pos:end="243:33">buffer</name><index pos:start="243:34" pos:end="243:36">[<expr pos:start="243:35" pos:end="243:35"><literal type="number" pos:start="243:35" pos:end="243:35">3</literal></expr>]</index></name> <operator pos:start="243:38" pos:end="243:38">*</operator> <literal type="number" pos:start="243:40" pos:end="243:44">256</literal> <operator pos:start="243:44" pos:end="243:44">+</operator> <name pos:start="243:46" pos:end="243:54"><name pos:start="243:46" pos:end="243:51">buffer</name><index pos:start="243:52" pos:end="243:54">[<expr pos:start="243:53" pos:end="243:53"><literal type="number" pos:start="243:53" pos:end="243:53">4</literal></expr>]</index></name> <operator pos:start="243:56" pos:end="243:56">*</operator> <literal type="number" pos:start="243:58" pos:end="245:16">65536</literal>

	       <operator pos:start="245:16" pos:end="245:16">+</operator> <name pos:start="245:18" pos:end="245:26"><name pos:start="245:18" pos:end="245:23">buffer</name><index pos:start="245:24" pos:end="245:26">[<expr pos:start="245:25" pos:end="245:25"><literal type="number" pos:start="245:25" pos:end="245:25">5</literal></expr>]</index></name> <operator pos:start="245:28" pos:end="245:28">*</operator> <literal type="number" pos:start="245:30" pos:end="245:40">0x1000000</literal> <operator pos:start="245:40" pos:end="245:40">+</operator> <name pos:start="245:42" pos:end="245:45">addr</name><operator pos:start="245:46" pos:end="245:46">)</operator></expr></init></decl>;</decl_stmt>



	  <comment type="block" pos:start="249:11" pos:end="249:64">/* Finish off and output previous formatted bytes.  */</comment>

	  <expr_stmt pos:start="251:11" pos:end="251:18"><expr pos:start="251:11" pos:end="251:17"><operator pos:start="251:11" pos:end="251:11">*</operator><name pos:start="251:12" pos:end="251:13">tp</name> <operator pos:start="251:15" pos:end="251:15">=</operator> <literal type="number" pos:start="251:17" pos:end="251:17">0</literal></expr>;</expr_stmt>

	  <if_stmt pos:start="253:11" pos:end="255:61"><if pos:start="253:11" pos:end="255:61">if <condition pos:start="253:14" pos:end="253:22">(<expr pos:start="253:15" pos:end="253:21"><name pos:start="253:15" pos:end="253:21"><name pos:start="253:15" pos:end="253:18">temp</name><index pos:start="253:19" pos:end="253:21">[<expr pos:start="253:20" pos:end="253:20"><literal type="number" pos:start="253:20" pos:end="253:20">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="255:13" pos:end="255:61"><block_content pos:start="255:13" pos:end="255:61">

	    <expr_stmt pos:start="255:13" pos:end="255:61"><expr pos:start="255:13" pos:end="255:60"><call pos:start="255:13" pos:end="255:60">(<modifier pos:start="255:14" pos:end="255:14">*</modifier><name pos:start="255:15" pos:end="255:32"><name pos:start="255:15" pos:end="255:18">info</name><operator pos:start="255:19" pos:end="255:20">-&gt;</operator><name pos:start="255:21" pos:end="255:32">fprintf_func</name></name>) <argument_list pos:start="255:35" pos:end="255:60">(<argument pos:start="255:36" pos:end="255:47"><expr pos:start="255:36" pos:end="255:47"><name pos:start="255:36" pos:end="255:47"><name pos:start="255:36" pos:end="255:39">info</name><operator pos:start="255:40" pos:end="255:41">-&gt;</operator><name pos:start="255:42" pos:end="255:47">stream</name></name></expr></argument>, <argument pos:start="255:50" pos:end="255:53"><expr pos:start="255:50" pos:end="255:53"><literal type="string" pos:start="255:50" pos:end="255:53">"%s"</literal></expr></argument>, <argument pos:start="255:56" pos:end="255:59"><expr pos:start="255:56" pos:end="255:59"><name pos:start="255:56" pos:end="255:59">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <expr_stmt pos:start="257:11" pos:end="257:20"><expr pos:start="257:11" pos:end="257:19"><name pos:start="257:11" pos:end="257:12">tp</name> <operator pos:start="257:14" pos:end="257:14">=</operator> <name pos:start="257:16" pos:end="257:19">temp</name></expr>;</expr_stmt>



	  <expr_stmt pos:start="261:11" pos:end="261:63"><expr pos:start="261:11" pos:end="261:62"><call pos:start="261:11" pos:end="261:62">(<modifier pos:start="261:12" pos:end="261:12">*</modifier><name pos:start="261:13" pos:end="261:36"><name pos:start="261:13" pos:end="261:16">info</name><operator pos:start="261:17" pos:end="261:18">-&gt;</operator><name pos:start="261:19" pos:end="261:36">print_address_func</name></name>) <argument_list pos:start="261:39" pos:end="261:62">(<argument pos:start="261:40" pos:end="261:55"><expr pos:start="261:40" pos:end="261:55"><operator pos:start="261:40" pos:end="261:40">(</operator><name pos:start="261:41" pos:end="261:47">bfd_vma</name><operator pos:start="261:48" pos:end="261:48">)</operator> <name pos:start="261:50" pos:end="261:55">number</name></expr></argument>, <argument pos:start="261:58" pos:end="261:61"><expr pos:start="261:58" pos:end="261:61"><name pos:start="261:58" pos:end="261:61">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block>

	<break pos:start="265:9" pos:end="265:14">break;</break>



      <case pos:start="269:7" pos:end="269:15">case <expr pos:start="269:12" pos:end="269:14"><literal type="char" pos:start="269:12" pos:end="269:14">'u'</literal></expr>:</case>

	<block pos:start="271:9" pos:end="293:9">{<block_content pos:start="275:11" pos:end="291:63">

	  <comment type="block" pos:start="273:11" pos:end="273:72">/* Like n but the offset is bits &lt;3:0&gt; in the instruction.  */</comment>

	  <decl_stmt pos:start="275:11" pos:end="275:62"><decl pos:start="275:11" pos:end="275:61"><type pos:start="275:11" pos:end="275:23"><name pos:start="275:11" pos:end="275:18">unsigned</name> <name pos:start="275:20" pos:end="275:23">long</name></type> <name pos:start="275:25" pos:end="275:30">number</name> <init pos:start="275:32" pos:end="275:61">= <expr pos:start="275:34" pos:end="275:61"><operator pos:start="275:34" pos:end="275:34">(</operator><name pos:start="275:35" pos:end="275:43"><name pos:start="275:35" pos:end="275:40">buffer</name><index pos:start="275:41" pos:end="275:43">[<expr pos:start="275:42" pos:end="275:42"><literal type="number" pos:start="275:42" pos:end="275:42">0</literal></expr>]</index></name> <operator pos:start="275:45" pos:end="275:45">&amp;</operator> <literal type="number" pos:start="275:47" pos:end="275:49">0xf</literal><operator pos:start="275:50" pos:end="275:50">)</operator> <operator pos:start="275:52" pos:end="275:52">*</operator> <literal type="number" pos:start="275:54" pos:end="275:56">2</literal> <operator pos:start="275:56" pos:end="275:56">+</operator> <name pos:start="275:58" pos:end="275:61">addr</name></expr></init></decl>;</decl_stmt>



	  <comment type="block" pos:start="279:11" pos:end="279:64">/* Finish off and output previous formatted bytes.  */</comment>

	  <expr_stmt pos:start="281:11" pos:end="281:18"><expr pos:start="281:11" pos:end="281:17"><operator pos:start="281:11" pos:end="281:11">*</operator><name pos:start="281:12" pos:end="281:13">tp</name> <operator pos:start="281:15" pos:end="281:15">=</operator> <literal type="number" pos:start="281:17" pos:end="281:17">0</literal></expr>;</expr_stmt>

	  <if_stmt pos:start="283:11" pos:end="285:61"><if pos:start="283:11" pos:end="285:61">if <condition pos:start="283:14" pos:end="283:22">(<expr pos:start="283:15" pos:end="283:21"><name pos:start="283:15" pos:end="283:21"><name pos:start="283:15" pos:end="283:18">temp</name><index pos:start="283:19" pos:end="283:21">[<expr pos:start="283:20" pos:end="283:20"><literal type="number" pos:start="283:20" pos:end="283:20">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="285:13" pos:end="285:61"><block_content pos:start="285:13" pos:end="285:61">

	    <expr_stmt pos:start="285:13" pos:end="285:61"><expr pos:start="285:13" pos:end="285:60"><call pos:start="285:13" pos:end="285:60">(<modifier pos:start="285:14" pos:end="285:14">*</modifier><name pos:start="285:15" pos:end="285:32"><name pos:start="285:15" pos:end="285:18">info</name><operator pos:start="285:19" pos:end="285:20">-&gt;</operator><name pos:start="285:21" pos:end="285:32">fprintf_func</name></name>) <argument_list pos:start="285:35" pos:end="285:60">(<argument pos:start="285:36" pos:end="285:47"><expr pos:start="285:36" pos:end="285:47"><name pos:start="285:36" pos:end="285:47"><name pos:start="285:36" pos:end="285:39">info</name><operator pos:start="285:40" pos:end="285:41">-&gt;</operator><name pos:start="285:42" pos:end="285:47">stream</name></name></expr></argument>, <argument pos:start="285:50" pos:end="285:53"><expr pos:start="285:50" pos:end="285:53"><literal type="string" pos:start="285:50" pos:end="285:53">"%s"</literal></expr></argument>, <argument pos:start="285:56" pos:end="285:59"><expr pos:start="285:56" pos:end="285:59"><name pos:start="285:56" pos:end="285:59">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <expr_stmt pos:start="287:11" pos:end="287:20"><expr pos:start="287:11" pos:end="287:19"><name pos:start="287:11" pos:end="287:12">tp</name> <operator pos:start="287:14" pos:end="287:14">=</operator> <name pos:start="287:16" pos:end="287:19">temp</name></expr>;</expr_stmt>



	  <expr_stmt pos:start="291:11" pos:end="291:63"><expr pos:start="291:11" pos:end="291:62"><call pos:start="291:11" pos:end="291:62">(<modifier pos:start="291:12" pos:end="291:12">*</modifier><name pos:start="291:13" pos:end="291:36"><name pos:start="291:13" pos:end="291:16">info</name><operator pos:start="291:17" pos:end="291:18">-&gt;</operator><name pos:start="291:19" pos:end="291:36">print_address_func</name></name>) <argument_list pos:start="291:39" pos:end="291:62">(<argument pos:start="291:40" pos:end="291:55"><expr pos:start="291:40" pos:end="291:55"><operator pos:start="291:40" pos:end="291:40">(</operator><name pos:start="291:41" pos:end="291:47">bfd_vma</name><operator pos:start="291:48" pos:end="291:48">)</operator> <name pos:start="291:50" pos:end="291:55">number</name></expr></argument>, <argument pos:start="291:58" pos:end="291:61"><expr pos:start="291:58" pos:end="291:61"><name pos:start="291:58" pos:end="291:61">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block>

	<break pos:start="295:9" pos:end="295:14">break;</break>



      <case pos:start="299:7" pos:end="299:15">case <expr pos:start="299:12" pos:end="299:14"><literal type="char" pos:start="299:12" pos:end="299:14">'N'</literal></expr>:</case>

      <case pos:start="301:7" pos:end="301:15">case <expr pos:start="301:12" pos:end="301:14"><literal type="char" pos:start="301:12" pos:end="301:14">'y'</literal></expr>:</case>

      <case pos:start="303:7" pos:end="303:15">case <expr pos:start="303:12" pos:end="303:14"><literal type="char" pos:start="303:12" pos:end="303:14">'Y'</literal></expr>:</case>

      <case pos:start="305:7" pos:end="305:15">case <expr pos:start="305:12" pos:end="305:14"><literal type="char" pos:start="305:12" pos:end="305:14">'S'</literal></expr>:</case>

      <case pos:start="307:7" pos:end="307:15">case <expr pos:start="307:12" pos:end="307:14"><literal type="char" pos:start="307:12" pos:end="307:14">'s'</literal></expr>:</case>

	<comment type="block" pos:start="309:9" pos:end="309:43">/* Any "normal" memory operand.  */</comment>

	<if_stmt pos:start="311:9" pos:end="1013:11"><if pos:start="311:9" pos:end="507:11">if <condition pos:start="311:12" pos:end="311:74">(<expr pos:start="311:13" pos:end="311:73"><operator pos:start="311:13" pos:end="311:13">(</operator><name pos:start="311:14" pos:end="311:17">insn</name> <operator pos:start="311:19" pos:end="311:19">&amp;</operator> <literal type="number" pos:start="311:21" pos:end="311:25">0x400</literal><operator pos:start="311:26" pos:end="311:26">)</operator> <operator pos:start="311:28" pos:end="311:29">&amp;&amp;</operator> <operator pos:start="311:31" pos:end="311:31">(</operator><name pos:start="311:32" pos:end="311:35">insn</name> <operator pos:start="311:37" pos:end="311:37">&amp;</operator> <literal type="number" pos:start="311:39" pos:end="311:40">15</literal><operator pos:start="311:41" pos:end="311:41">)</operator> <operator pos:start="311:43" pos:end="311:44">==</operator> <literal type="number" pos:start="311:46" pos:end="311:47">15</literal> <operator pos:start="311:49" pos:end="311:50">&amp;&amp;</operator> <name pos:start="311:52" pos:end="311:65">prefix_opcodep</name> <operator pos:start="311:67" pos:end="311:68">==</operator> <name pos:start="311:70" pos:end="311:73">NULL</name></expr>)</condition>

	  <block pos:start="313:11" pos:end="507:11">{<block_content pos:start="319:13" pos:end="505:15">

	    <comment type="block" pos:start="315:13" pos:end="317:73">/* We're looking at [pc+], i.e. we need to output an immediate

	       number, where the size can depend on different things.  */</comment>

	    <decl_stmt pos:start="319:13" pos:end="319:24"><decl pos:start="319:13" pos:end="319:23"><type pos:start="319:13" pos:end="319:16"><name pos:start="319:13" pos:end="319:16">long</name></type> <name pos:start="319:18" pos:end="319:23">number</name></decl>;</decl_stmt>

	    <decl_stmt pos:start="321:13" pos:end="325:57"><decl pos:start="321:13" pos:end="325:56"><type pos:start="321:13" pos:end="321:15"><name pos:start="321:13" pos:end="321:15">int</name></type> <name pos:start="321:17" pos:end="321:23">signedp</name>

	      <init pos:start="323:15" pos:end="325:56">= <expr pos:start="323:17" pos:end="325:56"><operator pos:start="323:17" pos:end="323:17">(</operator><operator pos:start="323:18" pos:end="323:18">(</operator><operator pos:start="323:19" pos:end="323:19">*</operator><name pos:start="323:20" pos:end="323:21">cs</name> <operator pos:start="323:23" pos:end="323:24">==</operator> <literal type="char" pos:start="323:26" pos:end="323:28">'z'</literal> <operator pos:start="323:30" pos:end="323:31">&amp;&amp;</operator> <operator pos:start="323:33" pos:end="323:33">(</operator><name pos:start="323:34" pos:end="323:37">insn</name> <operator pos:start="323:39" pos:end="323:39">&amp;</operator> <literal type="number" pos:start="323:41" pos:end="323:44">0x20</literal><operator pos:start="323:45" pos:end="323:45">)</operator><operator pos:start="323:46" pos:end="323:46">)</operator>

		 <operator pos:start="325:18" pos:end="325:19">||</operator> <name pos:start="325:21" pos:end="325:34"><name pos:start="325:21" pos:end="325:27">opcodep</name><operator pos:start="325:28" pos:end="325:29">-&gt;</operator><name pos:start="325:30" pos:end="325:34">match</name></name> <operator pos:start="325:36" pos:end="325:37">==</operator> <name pos:start="325:39" pos:end="325:55">BDAP_QUICK_OPCODE</name><operator pos:start="325:56" pos:end="325:56">)</operator></expr></init></decl>;</decl_stmt>

	    <decl_stmt pos:start="327:13" pos:end="327:23"><decl pos:start="327:13" pos:end="327:22"><type pos:start="327:13" pos:end="327:15"><name pos:start="327:13" pos:end="327:15">int</name></type> <name pos:start="327:17" pos:end="327:22">nbytes</name></decl>;</decl_stmt>



	    <if_stmt pos:start="331:13" pos:end="387:15"><if pos:start="331:13" pos:end="333:25">if <condition pos:start="331:16" pos:end="331:55">(<expr pos:start="331:17" pos:end="331:54"><name pos:start="331:17" pos:end="331:39"><name pos:start="331:17" pos:end="331:23">opcodep</name><operator pos:start="331:24" pos:end="331:25">-&gt;</operator><name pos:start="331:26" pos:end="331:39">imm_oprnd_size</name></name> <operator pos:start="331:41" pos:end="331:42">==</operator> <name pos:start="331:44" pos:end="331:54">SIZE_FIX_32</name></expr>)</condition><block type="pseudo" pos:start="333:15" pos:end="333:25"><block_content pos:start="333:15" pos:end="333:25">

	      <expr_stmt pos:start="333:15" pos:end="333:25"><expr pos:start="333:15" pos:end="333:24"><name pos:start="333:15" pos:end="333:20">nbytes</name> <operator pos:start="333:22" pos:end="333:22">=</operator> <literal type="number" pos:start="333:24" pos:end="333:24">4</literal></expr>;</expr_stmt></block_content></block></if>

	    <if type="elseif" pos:start="335:13" pos:end="369:15">else if <condition pos:start="335:21" pos:end="335:62">(<expr pos:start="335:22" pos:end="335:61"><name pos:start="335:22" pos:end="335:44"><name pos:start="335:22" pos:end="335:28">opcodep</name><operator pos:start="335:29" pos:end="335:30">-&gt;</operator><name pos:start="335:31" pos:end="335:44">imm_oprnd_size</name></name> <operator pos:start="335:46" pos:end="335:47">==</operator> <name pos:start="335:49" pos:end="335:61">SIZE_SPEC_REG</name></expr>)</condition>

	      <block pos:start="337:15" pos:end="369:15">{<block_content pos:start="339:17" pos:end="367:53">

		<decl_stmt pos:start="339:17" pos:end="341:72"><decl pos:start="339:17" pos:end="341:71"><type pos:start="339:17" pos:end="339:44"><specifier pos:start="339:17" pos:end="339:21">const</specifier> <name pos:start="339:23" pos:end="339:42"><name pos:start="339:23" pos:end="339:28">struct</name> <name pos:start="339:30" pos:end="339:42">cris_spec_reg</name></name> <modifier pos:start="339:44" pos:end="339:44">*</modifier></type><name pos:start="339:45" pos:end="339:49">sregp</name>

		  <init pos:start="341:19" pos:end="341:71">= <expr pos:start="341:21" pos:end="341:71"><call pos:start="341:21" pos:end="341:71"><name pos:start="341:21" pos:end="341:33">spec_reg_info</name> <argument_list pos:start="341:35" pos:end="341:71">(<argument pos:start="341:36" pos:end="341:52"><expr pos:start="341:36" pos:end="341:52"><operator pos:start="341:36" pos:end="341:36">(</operator><name pos:start="341:37" pos:end="341:40">insn</name> <operator pos:start="341:42" pos:end="341:43">&gt;&gt;</operator> <literal type="number" pos:start="341:45" pos:end="341:46">12</literal><operator pos:start="341:47" pos:end="341:47">)</operator> <operator pos:start="341:49" pos:end="341:49">&amp;</operator> <literal type="number" pos:start="341:51" pos:end="341:52">15</literal></expr></argument>, <argument pos:start="341:55" pos:end="341:70"><expr pos:start="341:55" pos:end="341:70"><name pos:start="341:55" pos:end="341:70"><name pos:start="341:55" pos:end="341:61">disdata</name><operator pos:start="341:62" pos:end="341:63">-&gt;</operator><name pos:start="341:64" pos:end="341:70">distype</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



		<comment type="block" pos:start="345:17" pos:end="349:29">/* A NULL return should have been as a non-match earlier,

		   so catch it as an internal error in the error-case

		   below.  */</comment>

		<if_stmt pos:start="351:17" pos:end="367:53"><if pos:start="351:17" pos:end="355:30">if <condition pos:start="351:20" pos:end="351:34">(<expr pos:start="351:21" pos:end="351:33"><name pos:start="351:21" pos:end="351:25">sregp</name> <operator pos:start="351:27" pos:end="351:28">==</operator> <name pos:start="351:30" pos:end="351:33">NULL</name></expr>)</condition><block type="pseudo" pos:start="355:19" pos:end="355:30"><block_content pos:start="355:19" pos:end="355:30">

		  <comment type="block" pos:start="353:19" pos:end="353:49">/* Whatever non-valid size.  */</comment>

		  <expr_stmt pos:start="355:19" pos:end="355:30"><expr pos:start="355:19" pos:end="355:29"><name pos:start="355:19" pos:end="355:24">nbytes</name> <operator pos:start="355:26" pos:end="355:26">=</operator> <literal type="number" pos:start="355:28" pos:end="355:29">42</literal></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="357:17" pos:end="367:53">else<block type="pseudo" pos:start="365:19" pos:end="367:53"><block_content pos:start="365:19" pos:end="367:53">

		  <comment type="block" pos:start="359:19" pos:end="363:43">/* PC is always incremented by a multiple of two.

		     For CRISv32, immediates are always 4 bytes for

		     special registers.  */</comment>

		  <expr_stmt pos:start="365:19" pos:end="367:53"><expr pos:start="365:19" pos:end="367:52"><name pos:start="365:19" pos:end="365:24">nbytes</name> <operator pos:start="365:26" pos:end="365:26">=</operator> <ternary pos:start="365:28" pos:end="367:52"><condition pos:start="365:28" pos:end="367:21"><expr pos:start="365:28" pos:end="365:59"><name pos:start="365:28" pos:end="365:43"><name pos:start="365:28" pos:end="365:34">disdata</name><operator pos:start="365:35" pos:end="365:36">-&gt;</operator><name pos:start="365:37" pos:end="365:43">distype</name></name> <operator pos:start="365:45" pos:end="365:46">==</operator> <name pos:start="365:48" pos:end="365:59">cris_dis_v32</name></expr>

		    ?</condition><then pos:start="367:23" pos:end="367:23"> <expr pos:start="367:23" pos:end="367:23"><literal type="number" pos:start="367:23" pos:end="367:23">4</literal></expr> </then><else pos:start="367:25" pos:end="367:52">: <expr pos:start="367:27" pos:end="367:52"><operator pos:start="367:27" pos:end="367:27">(</operator><name pos:start="367:28" pos:end="367:42"><name pos:start="367:28" pos:end="367:32">sregp</name><operator pos:start="367:33" pos:end="367:34">-&gt;</operator><name pos:start="367:35" pos:end="367:42">reg_size</name></name> <operator pos:start="367:44" pos:end="367:44">+</operator> <literal type="number" pos:start="367:46" pos:end="367:46">1</literal><operator pos:start="367:47" pos:end="367:47">)</operator> <operator pos:start="367:49" pos:end="367:49">&amp;</operator> <operator pos:start="367:51" pos:end="367:51">~</operator><literal type="number" pos:start="367:52" pos:end="367:52">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

	      </block_content>}</block></if>

	    <else pos:start="371:13" pos:end="387:15">else

	      <block pos:start="373:15" pos:end="387:15">{<block_content pos:start="375:17" pos:end="385:37">

		<decl_stmt pos:start="375:17" pos:end="375:74"><decl pos:start="375:17" pos:end="375:73"><type pos:start="375:17" pos:end="375:19"><name pos:start="375:17" pos:end="375:19">int</name></type> <name pos:start="375:21" pos:end="375:29">mode_size</name> <init pos:start="375:31" pos:end="375:73">= <expr pos:start="375:33" pos:end="375:73"><literal type="number" pos:start="375:33" pos:end="375:33">1</literal> <operator pos:start="375:35" pos:end="375:36">&lt;&lt;</operator> <operator pos:start="375:38" pos:end="375:38">(</operator><operator pos:start="375:39" pos:end="375:39">(</operator><name pos:start="375:40" pos:end="375:43">insn</name> <operator pos:start="375:45" pos:end="375:46">&gt;&gt;</operator> <literal type="number" pos:start="375:48" pos:end="375:48">4</literal><operator pos:start="375:49" pos:end="375:49">)</operator> <operator pos:start="375:51" pos:end="375:51">&amp;</operator> <operator pos:start="375:53" pos:end="375:53">(</operator><ternary pos:start="375:54" pos:end="375:71"><condition pos:start="375:54" pos:end="375:65"><expr pos:start="375:54" pos:end="375:63"><operator pos:start="375:54" pos:end="375:54">*</operator><name pos:start="375:55" pos:end="375:56">cs</name> <operator pos:start="375:58" pos:end="375:59">==</operator> <literal type="char" pos:start="375:61" pos:end="375:63">'z'</literal></expr> ?</condition><then pos:start="375:67" pos:end="375:67"> <expr pos:start="375:67" pos:end="375:67"><literal type="number" pos:start="375:67" pos:end="375:67">1</literal></expr> </then><else pos:start="375:69" pos:end="375:71">: <expr pos:start="375:71" pos:end="375:71"><literal type="number" pos:start="375:71" pos:end="375:71">3</literal></expr></else></ternary><operator pos:start="375:72" pos:end="375:72">)</operator><operator pos:start="375:73" pos:end="375:73">)</operator></expr></init></decl>;</decl_stmt>



		<if_stmt pos:start="379:17" pos:end="385:37"><if pos:start="379:17" pos:end="381:29">if <condition pos:start="379:20" pos:end="379:35">(<expr pos:start="379:21" pos:end="379:34"><name pos:start="379:21" pos:end="379:29">mode_size</name> <operator pos:start="379:31" pos:end="379:32">==</operator> <literal type="number" pos:start="379:34" pos:end="379:34">1</literal></expr>)</condition><block type="pseudo" pos:start="381:19" pos:end="381:29"><block_content pos:start="381:19" pos:end="381:29">

		  <expr_stmt pos:start="381:19" pos:end="381:29"><expr pos:start="381:19" pos:end="381:28"><name pos:start="381:19" pos:end="381:24">nbytes</name> <operator pos:start="381:26" pos:end="381:26">=</operator> <literal type="number" pos:start="381:28" pos:end="381:28">2</literal></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="383:17" pos:end="385:37">else<block type="pseudo" pos:start="385:19" pos:end="385:37"><block_content pos:start="385:19" pos:end="385:37">

		  <expr_stmt pos:start="385:19" pos:end="385:37"><expr pos:start="385:19" pos:end="385:36"><name pos:start="385:19" pos:end="385:24">nbytes</name> <operator pos:start="385:26" pos:end="385:26">=</operator> <name pos:start="385:28" pos:end="385:36">mode_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	      </block_content>}</block></else></if_stmt>



	    <switch pos:start="391:13" pos:end="439:15">switch <condition pos:start="391:20" pos:end="391:27">(<expr pos:start="391:21" pos:end="391:26"><name pos:start="391:21" pos:end="391:26">nbytes</name></expr>)</condition>

	      <block pos:start="393:15" pos:end="439:15">{<block_content pos:start="395:15" pos:end="437:28">

	      <case pos:start="395:15" pos:end="395:21">case <expr pos:start="395:20" pos:end="395:20"><literal type="number" pos:start="395:20" pos:end="395:20">1</literal></expr>:</case>

		<expr_stmt pos:start="397:17" pos:end="397:35"><expr pos:start="397:17" pos:end="397:34"><name pos:start="397:17" pos:end="397:22">number</name> <operator pos:start="397:24" pos:end="397:24">=</operator> <name pos:start="397:26" pos:end="397:34"><name pos:start="397:26" pos:end="397:31">buffer</name><index pos:start="397:32" pos:end="397:34">[<expr pos:start="397:33" pos:end="397:33"><literal type="number" pos:start="397:33" pos:end="397:33">2</literal></expr>]</index></name></expr>;</expr_stmt>

		<if_stmt pos:start="399:17" pos:end="401:32"><if pos:start="399:17" pos:end="401:32">if <condition pos:start="399:20" pos:end="399:44">(<expr pos:start="399:21" pos:end="399:43"><name pos:start="399:21" pos:end="399:27">signedp</name> <operator pos:start="399:29" pos:end="399:30">&amp;&amp;</operator> <name pos:start="399:32" pos:end="399:37">number</name> <operator pos:start="399:39" pos:end="399:39">&gt;</operator> <literal type="number" pos:start="399:41" pos:end="399:43">127</literal></expr>)</condition><block type="pseudo" pos:start="401:19" pos:end="401:32"><block_content pos:start="401:19" pos:end="401:32">

		  <expr_stmt pos:start="401:19" pos:end="401:32"><expr pos:start="401:19" pos:end="401:31"><name pos:start="401:19" pos:end="401:24">number</name> <operator pos:start="401:26" pos:end="401:27">-=</operator> <literal type="number" pos:start="401:29" pos:end="401:31">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<break pos:start="403:17" pos:end="403:22">break;</break>



	      <case pos:start="407:15" pos:end="407:21">case <expr pos:start="407:20" pos:end="407:20"><literal type="number" pos:start="407:20" pos:end="407:20">2</literal></expr>:</case>

		<expr_stmt pos:start="409:17" pos:end="409:53"><expr pos:start="409:17" pos:end="409:52"><name pos:start="409:17" pos:end="409:22">number</name> <operator pos:start="409:24" pos:end="409:24">=</operator> <name pos:start="409:26" pos:end="409:34"><name pos:start="409:26" pos:end="409:31">buffer</name><index pos:start="409:32" pos:end="409:34">[<expr pos:start="409:33" pos:end="409:33"><literal type="number" pos:start="409:33" pos:end="409:33">2</literal></expr>]</index></name> <operator pos:start="409:36" pos:end="409:36">+</operator> <name pos:start="409:38" pos:end="409:46"><name pos:start="409:38" pos:end="409:43">buffer</name><index pos:start="409:44" pos:end="409:46">[<expr pos:start="409:45" pos:end="409:45"><literal type="number" pos:start="409:45" pos:end="409:45">3</literal></expr>]</index></name> <operator pos:start="409:48" pos:end="409:48">*</operator> <literal type="number" pos:start="409:50" pos:end="409:52">256</literal></expr>;</expr_stmt>

		<if_stmt pos:start="411:17" pos:end="413:34"><if pos:start="411:17" pos:end="413:34">if <condition pos:start="411:20" pos:end="411:46">(<expr pos:start="411:21" pos:end="411:45"><name pos:start="411:21" pos:end="411:27">signedp</name> <operator pos:start="411:29" pos:end="411:30">&amp;&amp;</operator> <name pos:start="411:32" pos:end="411:37">number</name> <operator pos:start="411:39" pos:end="411:39">&gt;</operator> <literal type="number" pos:start="411:41" pos:end="411:45">32767</literal></expr>)</condition><block type="pseudo" pos:start="413:19" pos:end="413:34"><block_content pos:start="413:19" pos:end="413:34">

		  <expr_stmt pos:start="413:19" pos:end="413:34"><expr pos:start="413:19" pos:end="413:33"><name pos:start="413:19" pos:end="413:24">number</name> <operator pos:start="413:26" pos:end="413:27">-=</operator> <literal type="number" pos:start="413:29" pos:end="413:33">65536</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<break pos:start="415:17" pos:end="415:22">break;</break>



	      <case pos:start="419:15" pos:end="419:21">case <expr pos:start="419:20" pos:end="419:20"><literal type="number" pos:start="419:20" pos:end="419:20">4</literal></expr>:</case>

		<expr_stmt pos:start="421:17" pos:end="425:42"><expr pos:start="421:17" pos:end="425:41"><name pos:start="421:17" pos:end="421:22">number</name>

		  <operator pos:start="423:19" pos:end="423:19">=</operator> <name pos:start="423:21" pos:end="423:29"><name pos:start="423:21" pos:end="423:26">buffer</name><index pos:start="423:27" pos:end="423:29">[<expr pos:start="423:28" pos:end="423:28"><literal type="number" pos:start="423:28" pos:end="423:28">2</literal></expr>]</index></name> <operator pos:start="423:31" pos:end="423:31">+</operator> <name pos:start="423:33" pos:end="423:41"><name pos:start="423:33" pos:end="423:38">buffer</name><index pos:start="423:39" pos:end="423:41">[<expr pos:start="423:40" pos:end="423:40"><literal type="number" pos:start="423:40" pos:end="423:40">3</literal></expr>]</index></name> <operator pos:start="423:43" pos:end="423:43">*</operator> <literal type="number" pos:start="423:45" pos:end="423:49">256</literal> <operator pos:start="423:49" pos:end="423:49">+</operator> <name pos:start="423:51" pos:end="423:59"><name pos:start="423:51" pos:end="423:56">buffer</name><index pos:start="423:57" pos:end="423:59">[<expr pos:start="423:58" pos:end="423:58"><literal type="number" pos:start="423:58" pos:end="423:58">4</literal></expr>]</index></name> <operator pos:start="423:61" pos:end="423:61">*</operator> <literal type="number" pos:start="423:63" pos:end="425:19">65536</literal>

		  <operator pos:start="425:19" pos:end="425:19">+</operator> <name pos:start="425:21" pos:end="425:29"><name pos:start="425:21" pos:end="425:26">buffer</name><index pos:start="425:27" pos:end="425:29">[<expr pos:start="425:28" pos:end="425:28"><literal type="number" pos:start="425:28" pos:end="425:28">5</literal></expr>]</index></name> <operator pos:start="425:31" pos:end="425:31">*</operator> <literal type="number" pos:start="425:33" pos:end="425:41">0x1000000</literal></expr>;</expr_stmt>

		<break pos:start="427:17" pos:end="427:22">break;</break>



	      <default pos:start="431:15" pos:end="431:22">default:</default>

		<expr_stmt pos:start="433:17" pos:end="433:35"><expr pos:start="433:17" pos:end="433:34"><call pos:start="433:17" pos:end="433:34"><name pos:start="433:17" pos:end="433:22">strcpy</name> <argument_list pos:start="433:24" pos:end="433:34">(<argument pos:start="433:25" pos:end="433:26"><expr pos:start="433:25" pos:end="433:26"><name pos:start="433:25" pos:end="433:26">tp</name></expr></argument>, <argument pos:start="433:29" pos:end="433:33"><expr pos:start="433:29" pos:end="433:33"><literal type="string" pos:start="433:29" pos:end="433:33">"bug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="435:17" pos:end="435:24"><expr pos:start="435:17" pos:end="435:23"><name pos:start="435:17" pos:end="435:18">tp</name> <operator pos:start="435:20" pos:end="435:21">+=</operator> <literal type="number" pos:start="435:23" pos:end="435:23">3</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="437:17" pos:end="437:28"><expr pos:start="437:17" pos:end="437:27"><name pos:start="437:17" pos:end="437:22">number</name> <operator pos:start="437:24" pos:end="437:24">=</operator> <literal type="number" pos:start="437:26" pos:end="437:27">42</literal></expr>;</expr_stmt>

	      </block_content>}</block></switch>



	    <if_stmt pos:start="443:13" pos:end="505:15"><if pos:start="443:13" pos:end="449:52">if <condition pos:start="443:16" pos:end="447:65">(<expr pos:start="443:17" pos:end="447:64"><operator pos:start="443:17" pos:end="443:17">(</operator><operator pos:start="443:18" pos:end="443:18">*</operator><name pos:start="443:19" pos:end="443:20">cs</name> <operator pos:start="443:22" pos:end="443:23">==</operator> <literal type="char" pos:start="443:25" pos:end="443:27">'z'</literal> <operator pos:start="443:29" pos:end="443:30">&amp;&amp;</operator> <operator pos:start="443:32" pos:end="443:32">(</operator><name pos:start="443:33" pos:end="443:36">insn</name> <operator pos:start="443:38" pos:end="443:38">&amp;</operator> <literal type="number" pos:start="443:40" pos:end="443:43">0x20</literal><operator pos:start="443:44" pos:end="443:44">)</operator><operator pos:start="443:45" pos:end="443:45">)</operator>

		<operator pos:start="445:17" pos:end="445:18">||</operator> <operator pos:start="445:20" pos:end="445:20">(</operator><name pos:start="445:21" pos:end="445:34"><name pos:start="445:21" pos:end="445:27">opcodep</name><operator pos:start="445:28" pos:end="445:29">-&gt;</operator><name pos:start="445:30" pos:end="445:34">match</name></name> <operator pos:start="445:36" pos:end="445:37">==</operator> <name pos:start="445:39" pos:end="445:55">BDAP_QUICK_OPCODE</name>

		    <operator pos:start="447:21" pos:end="447:22">&amp;&amp;</operator> <operator pos:start="447:24" pos:end="447:24">(</operator><name pos:start="447:25" pos:end="447:30">nbytes</name> <operator pos:start="447:32" pos:end="447:33">&lt;=</operator> <literal type="number" pos:start="447:35" pos:end="447:35">2</literal> <operator pos:start="447:37" pos:end="447:38">||</operator> <name pos:start="447:40" pos:end="447:57"><name pos:start="447:40" pos:end="447:45">buffer</name><index pos:start="447:46" pos:end="447:57">[<expr pos:start="447:47" pos:end="447:56"><literal type="number" pos:start="447:47" pos:end="447:49">1</literal> <operator pos:start="447:49" pos:end="447:49">+</operator> <name pos:start="447:51" pos:end="447:56">nbytes</name></expr>]</index></name> <operator pos:start="447:59" pos:end="447:60">==</operator> <literal type="number" pos:start="447:62" pos:end="447:62">0</literal><operator pos:start="447:63" pos:end="447:63">)</operator><operator pos:start="447:64" pos:end="447:64">)</operator></expr>)</condition><block type="pseudo" pos:start="449:15" pos:end="449:52"><block_content pos:start="449:15" pos:end="449:52">

	      <expr_stmt pos:start="449:15" pos:end="449:52"><expr pos:start="449:15" pos:end="449:51"><name pos:start="449:15" pos:end="449:16">tp</name> <operator pos:start="449:18" pos:end="449:18">=</operator> <call pos:start="449:20" pos:end="449:51"><name pos:start="449:20" pos:end="449:29">format_dec</name> <argument_list pos:start="449:31" pos:end="449:51">(<argument pos:start="449:32" pos:end="449:37"><expr pos:start="449:32" pos:end="449:37"><name pos:start="449:32" pos:end="449:37">number</name></expr></argument>, <argument pos:start="449:40" pos:end="449:41"><expr pos:start="449:40" pos:end="449:41"><name pos:start="449:40" pos:end="449:41">tp</name></expr></argument>, <argument pos:start="449:44" pos:end="449:50"><expr pos:start="449:44" pos:end="449:50"><name pos:start="449:44" pos:end="449:50">signedp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	    <else pos:start="451:13" pos:end="505:15">else

	      <block pos:start="453:15" pos:end="505:15">{<block_content pos:start="455:17" pos:end="503:56">

		<decl_stmt pos:start="455:17" pos:end="455:62"><decl pos:start="455:17" pos:end="455:61"><type pos:start="455:17" pos:end="455:28"><name pos:start="455:17" pos:end="455:24">unsigned</name> <name pos:start="455:26" pos:end="455:28">int</name></type> <name pos:start="455:30" pos:end="455:37">highbyte</name> <init pos:start="455:39" pos:end="455:61">= <expr pos:start="455:41" pos:end="455:61"><operator pos:start="455:41" pos:end="455:41">(</operator><name pos:start="455:42" pos:end="455:47">number</name> <operator pos:start="455:49" pos:end="455:50">&gt;&gt;</operator> <literal type="number" pos:start="455:52" pos:end="455:53">24</literal><operator pos:start="455:54" pos:end="455:54">)</operator> <operator pos:start="455:56" pos:end="455:56">&amp;</operator> <literal type="number" pos:start="455:58" pos:end="455:61">0xff</literal></expr></init></decl>;</decl_stmt>



		<comment type="block" pos:start="459:17" pos:end="467:50">/* Either output this as an address or as a number.  If it's

		   a dword with the same high-byte as the address of the

		   insn, assume it's an address, and also if it's a non-zero

		   non-0xff high-byte.  If this is a jsr or a jump, then

		   it's definitely an address.  */</comment>

		<if_stmt pos:start="469:17" pos:end="503:56"><if pos:start="469:17" pos:end="499:19">if <condition pos:start="469:20" pos:end="477:55">(<expr pos:start="469:21" pos:end="477:54"><name pos:start="469:21" pos:end="469:26">nbytes</name> <operator pos:start="469:28" pos:end="469:29">==</operator> <literal type="number" pos:start="469:31" pos:end="469:31">4</literal>

		    <operator pos:start="471:21" pos:end="471:22">&amp;&amp;</operator> <operator pos:start="471:24" pos:end="471:24">(</operator><name pos:start="471:25" pos:end="471:32">highbyte</name> <operator pos:start="471:34" pos:end="471:35">==</operator> <operator pos:start="471:37" pos:end="471:37">(</operator><operator pos:start="471:38" pos:end="471:38">(</operator><name pos:start="471:39" pos:end="471:42">addr</name> <operator pos:start="471:44" pos:end="471:45">&gt;&gt;</operator> <literal type="number" pos:start="471:47" pos:end="471:48">24</literal><operator pos:start="471:49" pos:end="471:49">)</operator> <operator pos:start="471:51" pos:end="471:51">&amp;</operator> <literal type="number" pos:start="471:53" pos:end="471:56">0xff</literal><operator pos:start="471:57" pos:end="471:57">)</operator>

			<operator pos:start="473:25" pos:end="473:26">||</operator> <operator pos:start="473:28" pos:end="473:28">(</operator><name pos:start="473:29" pos:end="473:36">highbyte</name> <operator pos:start="473:38" pos:end="473:39">!=</operator> <literal type="number" pos:start="473:41" pos:end="473:41">0</literal> <operator pos:start="473:43" pos:end="473:44">&amp;&amp;</operator> <name pos:start="473:46" pos:end="473:53">highbyte</name> <operator pos:start="473:55" pos:end="473:56">!=</operator> <literal type="number" pos:start="473:58" pos:end="473:61">0xff</literal><operator pos:start="473:62" pos:end="473:62">)</operator>

			<operator pos:start="475:25" pos:end="475:26">||</operator> <name pos:start="475:28" pos:end="475:42"><name pos:start="475:28" pos:end="475:31">info</name><operator pos:start="475:32" pos:end="475:33">-&gt;</operator><name pos:start="475:34" pos:end="475:42">insn_type</name></name> <operator pos:start="475:44" pos:end="475:45">==</operator> <name pos:start="475:47" pos:end="475:56">dis_branch</name>

			<operator pos:start="477:25" pos:end="477:26">||</operator> <name pos:start="477:28" pos:end="477:42"><name pos:start="477:28" pos:end="477:31">info</name><operator pos:start="477:32" pos:end="477:33">-&gt;</operator><name pos:start="477:34" pos:end="477:42">insn_type</name></name> <operator pos:start="477:44" pos:end="477:45">==</operator> <name pos:start="477:47" pos:end="477:53">dis_jsr</name><operator pos:start="477:54" pos:end="477:54">)</operator></expr>)</condition>

		  <block pos:start="479:19" pos:end="499:19">{<block_content pos:start="483:21" pos:end="497:42">

		    <comment type="block" pos:start="481:21" pos:end="481:74">/* Finish off and output previous formatted bytes.  */</comment>

		    <expr_stmt pos:start="483:21" pos:end="483:28"><expr pos:start="483:21" pos:end="483:27"><operator pos:start="483:21" pos:end="483:21">*</operator><name pos:start="483:22" pos:end="483:23">tp</name> <operator pos:start="483:25" pos:end="483:25">=</operator> <literal type="number" pos:start="483:27" pos:end="483:27">0</literal></expr>;</expr_stmt>

		    <expr_stmt pos:start="485:21" pos:end="485:30"><expr pos:start="485:21" pos:end="485:29"><name pos:start="485:21" pos:end="485:22">tp</name> <operator pos:start="485:24" pos:end="485:24">=</operator> <name pos:start="485:26" pos:end="485:29">temp</name></expr>;</expr_stmt>

		    <if_stmt pos:start="487:21" pos:end="489:71"><if pos:start="487:21" pos:end="489:71">if <condition pos:start="487:24" pos:end="487:32">(<expr pos:start="487:25" pos:end="487:31"><name pos:start="487:25" pos:end="487:31"><name pos:start="487:25" pos:end="487:28">temp</name><index pos:start="487:29" pos:end="487:31">[<expr pos:start="487:30" pos:end="487:30"><literal type="number" pos:start="487:30" pos:end="487:30">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="489:23" pos:end="489:71"><block_content pos:start="489:23" pos:end="489:71">

		      <expr_stmt pos:start="489:23" pos:end="489:71"><expr pos:start="489:23" pos:end="489:70"><call pos:start="489:23" pos:end="489:70">(<modifier pos:start="489:24" pos:end="489:24">*</modifier><name pos:start="489:25" pos:end="489:42"><name pos:start="489:25" pos:end="489:28">info</name><operator pos:start="489:29" pos:end="489:30">-&gt;</operator><name pos:start="489:31" pos:end="489:42">fprintf_func</name></name>) <argument_list pos:start="489:45" pos:end="489:70">(<argument pos:start="489:46" pos:end="489:57"><expr pos:start="489:46" pos:end="489:57"><name pos:start="489:46" pos:end="489:57"><name pos:start="489:46" pos:end="489:49">info</name><operator pos:start="489:50" pos:end="489:51">-&gt;</operator><name pos:start="489:52" pos:end="489:57">stream</name></name></expr></argument>, <argument pos:start="489:60" pos:end="489:63"><expr pos:start="489:60" pos:end="489:63"><literal type="string" pos:start="489:60" pos:end="489:63">"%s"</literal></expr></argument>, <argument pos:start="489:66" pos:end="489:69"><expr pos:start="489:66" pos:end="489:69"><name pos:start="489:66" pos:end="489:69">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



		    <expr_stmt pos:start="493:21" pos:end="493:73"><expr pos:start="493:21" pos:end="493:72"><call pos:start="493:21" pos:end="493:72">(<modifier pos:start="493:22" pos:end="493:22">*</modifier><name pos:start="493:23" pos:end="493:46"><name pos:start="493:23" pos:end="493:26">info</name><operator pos:start="493:27" pos:end="493:28">-&gt;</operator><name pos:start="493:29" pos:end="493:46">print_address_func</name></name>) <argument_list pos:start="493:49" pos:end="493:72">(<argument pos:start="493:50" pos:end="493:65"><expr pos:start="493:50" pos:end="493:65"><operator pos:start="493:50" pos:end="493:50">(</operator><name pos:start="493:51" pos:end="493:57">bfd_vma</name><operator pos:start="493:58" pos:end="493:58">)</operator> <name pos:start="493:60" pos:end="493:65">number</name></expr></argument>, <argument pos:start="493:68" pos:end="493:71"><expr pos:start="493:68" pos:end="493:71"><name pos:start="493:68" pos:end="493:71">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



		    <expr_stmt pos:start="497:21" pos:end="497:42"><expr pos:start="497:21" pos:end="497:41"><name pos:start="497:21" pos:end="497:32"><name pos:start="497:21" pos:end="497:24">info</name><operator pos:start="497:25" pos:end="497:26">-&gt;</operator><name pos:start="497:27" pos:end="497:32">target</name></name> <operator pos:start="497:34" pos:end="497:34">=</operator> <name pos:start="497:36" pos:end="497:41">number</name></expr>;</expr_stmt>

		  </block_content>}</block></if>

		<else pos:start="501:17" pos:end="503:56">else<block type="pseudo" pos:start="503:19" pos:end="503:56"><block_content pos:start="503:19" pos:end="503:56">

		  <expr_stmt pos:start="503:19" pos:end="503:56"><expr pos:start="503:19" pos:end="503:55"><name pos:start="503:19" pos:end="503:20">tp</name> <operator pos:start="503:22" pos:end="503:22">=</operator> <call pos:start="503:24" pos:end="503:55"><name pos:start="503:24" pos:end="503:33">format_hex</name> <argument_list pos:start="503:35" pos:end="503:55">(<argument pos:start="503:36" pos:end="503:41"><expr pos:start="503:36" pos:end="503:41"><name pos:start="503:36" pos:end="503:41">number</name></expr></argument>, <argument pos:start="503:44" pos:end="503:45"><expr pos:start="503:44" pos:end="503:45"><name pos:start="503:44" pos:end="503:45">tp</name></expr></argument>, <argument pos:start="503:48" pos:end="503:54"><expr pos:start="503:48" pos:end="503:54"><name pos:start="503:48" pos:end="503:54">disdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	      </block_content>}</block></else></if_stmt>

	  </block_content>}</block></if>

	<else pos:start="509:9" pos:end="1013:11">else

	  <block pos:start="511:11" pos:end="1013:11">{<block_content pos:start="517:13" pos:end="1011:24">

	    <comment type="block" pos:start="513:13" pos:end="515:44">/* Not an immediate number.  Then this is a (possibly

	       prefixed) memory operand.  */</comment>

	    <if_stmt pos:start="517:13" pos:end="571:15"><if pos:start="517:13" pos:end="571:15">if <condition pos:start="517:16" pos:end="517:49">(<expr pos:start="517:17" pos:end="517:48"><name pos:start="517:17" pos:end="517:31"><name pos:start="517:17" pos:end="517:20">info</name><operator pos:start="517:21" pos:end="517:22">-&gt;</operator><name pos:start="517:23" pos:end="517:31">insn_type</name></name> <operator pos:start="517:33" pos:end="517:34">!=</operator> <name pos:start="517:36" pos:end="517:48">dis_nonbranch</name></expr>)</condition>

	      <block pos:start="519:15" pos:end="571:15">{<block_content pos:start="521:17" pos:end="569:39">

		<decl_stmt pos:start="521:17" pos:end="525:63"><decl pos:start="521:17" pos:end="525:62"><type pos:start="521:17" pos:end="521:19"><name pos:start="521:17" pos:end="521:19">int</name></type> <name pos:start="521:21" pos:end="521:29">mode_size</name>

		  <init pos:start="523:19" pos:end="525:62">= <expr pos:start="523:21" pos:end="525:62"><literal type="number" pos:start="523:21" pos:end="523:21">1</literal> <operator pos:start="523:23" pos:end="523:24">&lt;&lt;</operator> <operator pos:start="523:26" pos:end="523:26">(</operator><operator pos:start="523:27" pos:end="523:27">(</operator><name pos:start="523:28" pos:end="523:31">insn</name> <operator pos:start="523:33" pos:end="523:34">&gt;&gt;</operator> <literal type="number" pos:start="523:36" pos:end="523:36">4</literal><operator pos:start="523:37" pos:end="523:37">)</operator>

			  <operator pos:start="525:27" pos:end="525:27">&amp;</operator> <operator pos:start="525:29" pos:end="525:29">(</operator><ternary pos:start="525:30" pos:end="525:60"><condition pos:start="525:30" pos:end="525:54"><expr pos:start="525:30" pos:end="525:52"><name pos:start="525:30" pos:end="525:45"><name pos:start="525:30" pos:end="525:36">opcodep</name><operator pos:start="525:37" pos:end="525:38">-&gt;</operator><name pos:start="525:39" pos:end="525:42">args</name><index pos:start="525:43" pos:end="525:45">[<expr pos:start="525:44" pos:end="525:44"><literal type="number" pos:start="525:44" pos:end="525:44">0</literal></expr>]</index></name> <operator pos:start="525:47" pos:end="525:48">==</operator> <literal type="char" pos:start="525:50" pos:end="525:52">'z'</literal></expr> ?</condition><then pos:start="525:56" pos:end="525:56"> <expr pos:start="525:56" pos:end="525:56"><literal type="number" pos:start="525:56" pos:end="525:56">1</literal></expr> </then><else pos:start="525:58" pos:end="525:60">: <expr pos:start="525:60" pos:end="525:60"><literal type="number" pos:start="525:60" pos:end="525:60">3</literal></expr></else></ternary><operator pos:start="525:61" pos:end="525:61">)</operator><operator pos:start="525:62" pos:end="525:62">)</operator></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="527:17" pos:end="527:25"><decl pos:start="527:17" pos:end="527:24"><type pos:start="527:17" pos:end="527:19"><name pos:start="527:17" pos:end="527:19">int</name></type> <name pos:start="527:21" pos:end="527:24">size</name></decl>;</decl_stmt>

		<expr_stmt pos:start="529:17" pos:end="529:43"><expr pos:start="529:17" pos:end="529:42"><name pos:start="529:17" pos:end="529:31"><name pos:start="529:17" pos:end="529:20">info</name><operator pos:start="529:21" pos:end="529:22">-&gt;</operator><name pos:start="529:23" pos:end="529:31">insn_type</name></name> <operator pos:start="529:33" pos:end="529:33">=</operator> <name pos:start="529:35" pos:end="529:42">dis_dref</name></expr>;</expr_stmt>

		<expr_stmt pos:start="531:17" pos:end="531:52"><expr pos:start="531:17" pos:end="531:51"><name pos:start="531:17" pos:end="531:27"><name pos:start="531:17" pos:end="531:20">info</name><operator pos:start="531:21" pos:end="531:22">-&gt;</operator><name pos:start="531:23" pos:end="531:27">flags</name></name> <operator pos:start="531:29" pos:end="531:30">|=</operator> <name pos:start="531:32" pos:end="531:51">CRIS_DIS_FLAG_MEMREF</name></expr>;</expr_stmt>



		<if_stmt pos:start="535:17" pos:end="565:35"><if pos:start="535:17" pos:end="537:27">if <condition pos:start="535:20" pos:end="535:59">(<expr pos:start="535:21" pos:end="535:58"><name pos:start="535:21" pos:end="535:43"><name pos:start="535:21" pos:end="535:27">opcodep</name><operator pos:start="535:28" pos:end="535:29">-&gt;</operator><name pos:start="535:30" pos:end="535:43">imm_oprnd_size</name></name> <operator pos:start="535:45" pos:end="535:46">==</operator> <name pos:start="535:48" pos:end="535:58">SIZE_FIX_32</name></expr>)</condition><block type="pseudo" pos:start="537:19" pos:end="537:27"><block_content pos:start="537:19" pos:end="537:27">

		  <expr_stmt pos:start="537:19" pos:end="537:27"><expr pos:start="537:19" pos:end="537:26"><name pos:start="537:19" pos:end="537:22">size</name> <operator pos:start="537:24" pos:end="537:24">=</operator> <literal type="number" pos:start="537:26" pos:end="537:26">4</literal></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="539:17" pos:end="561:19">else if <condition pos:start="539:25" pos:end="539:66">(<expr pos:start="539:26" pos:end="539:65"><name pos:start="539:26" pos:end="539:48"><name pos:start="539:26" pos:end="539:32">opcodep</name><operator pos:start="539:33" pos:end="539:34">-&gt;</operator><name pos:start="539:35" pos:end="539:48">imm_oprnd_size</name></name> <operator pos:start="539:50" pos:end="539:51">==</operator> <name pos:start="539:53" pos:end="539:65">SIZE_SPEC_REG</name></expr>)</condition>

		  <block pos:start="541:19" pos:end="561:19">{<block_content pos:start="543:21" pos:end="559:45">

		    <decl_stmt pos:start="543:21" pos:end="545:76"><decl pos:start="543:21" pos:end="545:75"><type pos:start="543:21" pos:end="543:48"><specifier pos:start="543:21" pos:end="543:25">const</specifier> <name pos:start="543:27" pos:end="543:46"><name pos:start="543:27" pos:end="543:32">struct</name> <name pos:start="543:34" pos:end="543:46">cris_spec_reg</name></name> <modifier pos:start="543:48" pos:end="543:48">*</modifier></type><name pos:start="543:49" pos:end="543:53">sregp</name>

		      <init pos:start="545:23" pos:end="545:75">= <expr pos:start="545:25" pos:end="545:75"><call pos:start="545:25" pos:end="545:75"><name pos:start="545:25" pos:end="545:37">spec_reg_info</name> <argument_list pos:start="545:39" pos:end="545:75">(<argument pos:start="545:40" pos:end="545:56"><expr pos:start="545:40" pos:end="545:56"><operator pos:start="545:40" pos:end="545:40">(</operator><name pos:start="545:41" pos:end="545:44">insn</name> <operator pos:start="545:46" pos:end="545:47">&gt;&gt;</operator> <literal type="number" pos:start="545:49" pos:end="545:50">12</literal><operator pos:start="545:51" pos:end="545:51">)</operator> <operator pos:start="545:53" pos:end="545:53">&amp;</operator> <literal type="number" pos:start="545:55" pos:end="545:56">15</literal></expr></argument>, <argument pos:start="545:59" pos:end="545:74"><expr pos:start="545:59" pos:end="545:74"><name pos:start="545:59" pos:end="545:74"><name pos:start="545:59" pos:end="545:65">disdata</name><operator pos:start="545:66" pos:end="545:67">-&gt;</operator><name pos:start="545:68" pos:end="545:74">distype</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



		    <comment type="block" pos:start="549:21" pos:end="551:35">/* FIXME: Improve error handling; should have been caught

		       earlier.  */</comment>

		    <if_stmt pos:start="553:21" pos:end="559:45"><if pos:start="553:21" pos:end="555:31">if <condition pos:start="553:24" pos:end="553:38">(<expr pos:start="553:25" pos:end="553:37"><name pos:start="553:25" pos:end="553:29">sregp</name> <operator pos:start="553:31" pos:end="553:32">==</operator> <name pos:start="553:34" pos:end="553:37">NULL</name></expr>)</condition><block type="pseudo" pos:start="555:23" pos:end="555:31"><block_content pos:start="555:23" pos:end="555:31">

		      <expr_stmt pos:start="555:23" pos:end="555:31"><expr pos:start="555:23" pos:end="555:30"><name pos:start="555:23" pos:end="555:26">size</name> <operator pos:start="555:28" pos:end="555:28">=</operator> <literal type="number" pos:start="555:30" pos:end="555:30">4</literal></expr>;</expr_stmt></block_content></block></if>

		    <else pos:start="557:21" pos:end="559:45">else<block type="pseudo" pos:start="559:23" pos:end="559:45"><block_content pos:start="559:23" pos:end="559:45">

		      <expr_stmt pos:start="559:23" pos:end="559:45"><expr pos:start="559:23" pos:end="559:44"><name pos:start="559:23" pos:end="559:26">size</name> <operator pos:start="559:28" pos:end="559:28">=</operator> <name pos:start="559:30" pos:end="559:44"><name pos:start="559:30" pos:end="559:34">sregp</name><operator pos:start="559:35" pos:end="559:36">-&gt;</operator><name pos:start="559:37" pos:end="559:44">reg_size</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		  </block_content>}</block></if>

		<else pos:start="563:17" pos:end="565:35">else<block type="pseudo" pos:start="565:19" pos:end="565:35"><block_content pos:start="565:19" pos:end="565:35">

		  <expr_stmt pos:start="565:19" pos:end="565:35"><expr pos:start="565:19" pos:end="565:34"><name pos:start="565:19" pos:end="565:22">size</name> <operator pos:start="565:24" pos:end="565:24">=</operator> <name pos:start="565:26" pos:end="565:34">mode_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



		<expr_stmt pos:start="569:17" pos:end="569:39"><expr pos:start="569:17" pos:end="569:38"><name pos:start="569:17" pos:end="569:31"><name pos:start="569:17" pos:end="569:20">info</name><operator pos:start="569:21" pos:end="569:22">-&gt;</operator><name pos:start="569:23" pos:end="569:31">data_size</name></name> <operator pos:start="569:33" pos:end="569:33">=</operator> <name pos:start="569:35" pos:end="569:38">size</name></expr>;</expr_stmt>

	      </block_content>}</block></if></if_stmt>



	    <expr_stmt pos:start="575:13" pos:end="575:24"><expr pos:start="575:13" pos:end="575:23"><operator pos:start="575:13" pos:end="575:13">*</operator><name pos:start="575:14" pos:end="575:15">tp</name><operator pos:start="575:16" pos:end="575:17">++</operator> <operator pos:start="575:19" pos:end="575:19">=</operator> <literal type="char" pos:start="575:21" pos:end="575:23">'['</literal></expr>;</expr_stmt>



	    <if_stmt pos:start="579:13" pos:end="1009:15"><if pos:start="579:13" pos:end="989:15">if <condition pos:start="579:16" pos:end="587:60">(<expr pos:start="579:17" pos:end="587:59"><name pos:start="579:17" pos:end="579:30">prefix_opcodep</name>

		<comment type="block" pos:start="581:17" pos:end="583:53">/* We don't match dip with a postincremented field

		   as a side-effect address mode.  */</comment>

		<operator pos:start="585:17" pos:end="585:18">&amp;&amp;</operator> <operator pos:start="585:20" pos:end="585:20">(</operator><operator pos:start="585:21" pos:end="585:21">(</operator><name pos:start="585:22" pos:end="585:25">insn</name> <operator pos:start="585:27" pos:end="585:27">&amp;</operator> <literal type="number" pos:start="585:29" pos:end="585:33">0x400</literal><operator pos:start="585:34" pos:end="585:34">)</operator> <operator pos:start="585:36" pos:end="585:37">==</operator> <literal type="number" pos:start="585:39" pos:end="585:39">0</literal>

		    <operator pos:start="587:21" pos:end="587:22">||</operator> <name pos:start="587:24" pos:end="587:44"><name pos:start="587:24" pos:end="587:37">prefix_opcodep</name><operator pos:start="587:38" pos:end="587:39">-&gt;</operator><name pos:start="587:40" pos:end="587:44">match</name></name> <operator pos:start="587:46" pos:end="587:47">!=</operator> <name pos:start="587:49" pos:end="587:58">DIP_OPCODE</name><operator pos:start="587:59" pos:end="587:59">)</operator></expr>)</condition>

	      <block pos:start="589:15" pos:end="989:15">{<block_content pos:start="591:17" pos:end="987:38">

		<if_stmt pos:start="591:17" pos:end="599:19"><if pos:start="591:17" pos:end="599:19">if <condition pos:start="591:20" pos:end="591:33">(<expr pos:start="591:21" pos:end="591:32"><name pos:start="591:21" pos:end="591:24">insn</name> <operator pos:start="591:26" pos:end="591:26">&amp;</operator> <literal type="number" pos:start="591:28" pos:end="591:32">0x400</literal></expr>)</condition>

		  <block pos:start="593:19" pos:end="599:19">{<block_content pos:start="595:21" pos:end="597:32">

		    <expr_stmt pos:start="595:21" pos:end="595:78"><expr pos:start="595:21" pos:end="595:77"><name pos:start="595:21" pos:end="595:22">tp</name> <operator pos:start="595:24" pos:end="595:24">=</operator> <call pos:start="595:26" pos:end="595:77"><name pos:start="595:26" pos:end="595:35">format_reg</name> <argument_list pos:start="595:37" pos:end="595:77">(<argument pos:start="595:38" pos:end="595:44"><expr pos:start="595:38" pos:end="595:44"><name pos:start="595:38" pos:end="595:44">disdata</name></expr></argument>, <argument pos:start="595:47" pos:end="595:55"><expr pos:start="595:47" pos:end="595:55"><name pos:start="595:47" pos:end="595:50">insn</name> <operator pos:start="595:52" pos:end="595:52">&amp;</operator> <literal type="number" pos:start="595:54" pos:end="595:55">15</literal></expr></argument>, <argument pos:start="595:58" pos:end="595:59"><expr pos:start="595:58" pos:end="595:59"><name pos:start="595:58" pos:end="595:59">tp</name></expr></argument>, <argument pos:start="595:62" pos:end="595:76"><expr pos:start="595:62" pos:end="595:76"><name pos:start="595:62" pos:end="595:76">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="597:21" pos:end="597:32"><expr pos:start="597:21" pos:end="597:31"><operator pos:start="597:21" pos:end="597:21">*</operator><name pos:start="597:22" pos:end="597:23">tp</name><operator pos:start="597:24" pos:end="597:25">++</operator> <operator pos:start="597:27" pos:end="597:27">=</operator> <literal type="char" pos:start="597:29" pos:end="597:31">'='</literal></expr>;</expr_stmt>

		  </block_content>}</block></if></if_stmt>





		<comment type="block" pos:start="605:17" pos:end="607:53">/* We mainly ignore the prefix format string when the

		   address-mode syntax is output.  */</comment>

		<switch pos:start="609:17" pos:end="981:19">switch <condition pos:start="609:24" pos:end="609:46">(<expr pos:start="609:25" pos:end="609:45"><name pos:start="609:25" pos:end="609:45"><name pos:start="609:25" pos:end="609:38">prefix_opcodep</name><operator pos:start="609:39" pos:end="609:40">-&gt;</operator><name pos:start="609:41" pos:end="609:45">match</name></name></expr>)</condition>

		  <block pos:start="611:19" pos:end="981:19">{<block_content pos:start="613:19" pos:end="979:72">

		  <case pos:start="613:19" pos:end="613:34">case <expr pos:start="613:24" pos:end="613:33"><name pos:start="613:24" pos:end="613:33">DIP_OPCODE</name></expr>:</case>

		    <comment type="block" pos:start="615:21" pos:end="615:51">/* It's [r], [r+] or [pc+].  */</comment>

		    <if_stmt pos:start="617:21" pos:end="689:23"><if pos:start="617:21" pos:end="655:23">if <condition pos:start="617:24" pos:end="617:74">(<expr pos:start="617:25" pos:end="617:73"><operator pos:start="617:25" pos:end="617:25">(</operator><name pos:start="617:26" pos:end="617:36">prefix_insn</name> <operator pos:start="617:38" pos:end="617:38">&amp;</operator> <literal type="number" pos:start="617:40" pos:end="617:44">0x400</literal><operator pos:start="617:45" pos:end="617:45">)</operator> <operator pos:start="617:47" pos:end="617:48">&amp;&amp;</operator> <operator pos:start="617:50" pos:end="617:50">(</operator><name pos:start="617:51" pos:end="617:61">prefix_insn</name> <operator pos:start="617:63" pos:end="617:63">&amp;</operator> <literal type="number" pos:start="617:65" pos:end="617:66">15</literal><operator pos:start="617:67" pos:end="617:67">)</operator> <operator pos:start="617:69" pos:end="617:70">==</operator> <literal type="number" pos:start="617:72" pos:end="617:73">15</literal></expr>)</condition>

		      <block pos:start="619:23" pos:end="655:23">{<block_content pos:start="625:25" pos:end="653:77">

			<comment type="block" pos:start="621:25" pos:end="623:46">/* It's [pc+].  This cannot possibly be anything

			   but an address.  */</comment>

			<decl_stmt pos:start="625:25" pos:end="631:57"><decl pos:start="625:25" pos:end="631:56"><type pos:start="625:25" pos:end="625:37"><name pos:start="625:25" pos:end="625:32">unsigned</name> <name pos:start="625:34" pos:end="625:37">long</name></type> <name pos:start="625:39" pos:end="625:44">number</name>

			  <init pos:start="627:27" pos:end="631:56">= <expr pos:start="627:29" pos:end="631:56"><name pos:start="627:29" pos:end="627:44"><name pos:start="627:29" pos:end="627:41">prefix_buffer</name><index pos:start="627:42" pos:end="627:44">[<expr pos:start="627:43" pos:end="627:43"><literal type="number" pos:start="627:43" pos:end="627:43">2</literal></expr>]</index></name> <operator pos:start="627:46" pos:end="627:46">+</operator> <name pos:start="627:48" pos:end="627:63"><name pos:start="627:48" pos:end="627:60">prefix_buffer</name><index pos:start="627:61" pos:end="627:63">[<expr pos:start="627:62" pos:end="627:62"><literal type="number" pos:start="627:62" pos:end="627:62">3</literal></expr>]</index></name> <operator pos:start="627:65" pos:end="627:65">*</operator> <literal type="number" pos:start="627:67" pos:end="629:27">256</literal>

			  <operator pos:start="629:27" pos:end="629:27">+</operator> <name pos:start="629:29" pos:end="629:44"><name pos:start="629:29" pos:end="629:41">prefix_buffer</name><index pos:start="629:42" pos:end="629:44">[<expr pos:start="629:43" pos:end="629:43"><literal type="number" pos:start="629:43" pos:end="629:43">4</literal></expr>]</index></name> <operator pos:start="629:46" pos:end="629:46">*</operator> <literal type="number" pos:start="629:48" pos:end="631:27">65536</literal>

			  <operator pos:start="631:27" pos:end="631:27">+</operator> <name pos:start="631:29" pos:end="631:44"><name pos:start="631:29" pos:end="631:41">prefix_buffer</name><index pos:start="631:42" pos:end="631:44">[<expr pos:start="631:43" pos:end="631:43"><literal type="number" pos:start="631:43" pos:end="631:43">5</literal></expr>]</index></name> <operator pos:start="631:46" pos:end="631:46">*</operator> <literal type="number" pos:start="631:48" pos:end="631:56">0x1000000</literal></expr></init></decl>;</decl_stmt>



			<expr_stmt pos:start="635:25" pos:end="635:56"><expr pos:start="635:25" pos:end="635:55"><name pos:start="635:25" pos:end="635:36"><name pos:start="635:25" pos:end="635:28">info</name><operator pos:start="635:29" pos:end="635:30">-&gt;</operator><name pos:start="635:31" pos:end="635:36">target</name></name> <operator pos:start="635:38" pos:end="635:38">=</operator> <operator pos:start="635:40" pos:end="635:40">(</operator><name pos:start="635:41" pos:end="635:47">bfd_vma</name><operator pos:start="635:48" pos:end="635:48">)</operator> <name pos:start="635:50" pos:end="635:55">number</name></expr>;</expr_stmt>



			<comment type="block" pos:start="639:25" pos:end="641:36">/* Finish off and output previous formatted

			   data.  */</comment>

			<expr_stmt pos:start="643:25" pos:end="643:32"><expr pos:start="643:25" pos:end="643:31"><operator pos:start="643:25" pos:end="643:25">*</operator><name pos:start="643:26" pos:end="643:27">tp</name> <operator pos:start="643:29" pos:end="643:29">=</operator> <literal type="number" pos:start="643:31" pos:end="643:31">0</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="645:25" pos:end="645:34"><expr pos:start="645:25" pos:end="645:33"><name pos:start="645:25" pos:end="645:26">tp</name> <operator pos:start="645:28" pos:end="645:28">=</operator> <name pos:start="645:30" pos:end="645:33">temp</name></expr>;</expr_stmt>

			<if_stmt pos:start="647:25" pos:end="649:75"><if pos:start="647:25" pos:end="649:75">if <condition pos:start="647:28" pos:end="647:36">(<expr pos:start="647:29" pos:end="647:35"><name pos:start="647:29" pos:end="647:35"><name pos:start="647:29" pos:end="647:32">temp</name><index pos:start="647:33" pos:end="647:35">[<expr pos:start="647:34" pos:end="647:34"><literal type="number" pos:start="647:34" pos:end="647:34">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="649:27" pos:end="649:75"><block_content pos:start="649:27" pos:end="649:75">

			  <expr_stmt pos:start="649:27" pos:end="649:75"><expr pos:start="649:27" pos:end="649:74"><call pos:start="649:27" pos:end="649:74">(<modifier pos:start="649:28" pos:end="649:28">*</modifier><name pos:start="649:29" pos:end="649:46"><name pos:start="649:29" pos:end="649:32">info</name><operator pos:start="649:33" pos:end="649:34">-&gt;</operator><name pos:start="649:35" pos:end="649:46">fprintf_func</name></name>) <argument_list pos:start="649:49" pos:end="649:74">(<argument pos:start="649:50" pos:end="649:61"><expr pos:start="649:50" pos:end="649:61"><name pos:start="649:50" pos:end="649:61"><name pos:start="649:50" pos:end="649:53">info</name><operator pos:start="649:54" pos:end="649:55">-&gt;</operator><name pos:start="649:56" pos:end="649:61">stream</name></name></expr></argument>, <argument pos:start="649:64" pos:end="649:67"><expr pos:start="649:64" pos:end="649:67"><literal type="string" pos:start="649:64" pos:end="649:67">"%s"</literal></expr></argument>, <argument pos:start="649:70" pos:end="649:73"><expr pos:start="649:70" pos:end="649:73"><name pos:start="649:70" pos:end="649:73">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



			<expr_stmt pos:start="653:25" pos:end="653:77"><expr pos:start="653:25" pos:end="653:76"><call pos:start="653:25" pos:end="653:76">(<modifier pos:start="653:26" pos:end="653:26">*</modifier><name pos:start="653:27" pos:end="653:50"><name pos:start="653:27" pos:end="653:30">info</name><operator pos:start="653:31" pos:end="653:32">-&gt;</operator><name pos:start="653:33" pos:end="653:50">print_address_func</name></name>) <argument_list pos:start="653:53" pos:end="653:76">(<argument pos:start="653:54" pos:end="653:69"><expr pos:start="653:54" pos:end="653:69"><operator pos:start="653:54" pos:end="653:54">(</operator><name pos:start="653:55" pos:end="653:61">bfd_vma</name><operator pos:start="653:62" pos:end="653:62">)</operator> <name pos:start="653:64" pos:end="653:69">number</name></expr></argument>, <argument pos:start="653:72" pos:end="653:75"><expr pos:start="653:72" pos:end="653:75"><name pos:start="653:72" pos:end="653:75">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		      </block_content>}</block></if>

		    <else pos:start="657:21" pos:end="689:23">else

		      <block pos:start="659:23" pos:end="689:23">{<block_content pos:start="665:25" pos:end="687:36">

			<comment type="block" pos:start="661:25" pos:end="663:60">/* For a memref in an address, we use target2.

			   In this case, target is zero.  */</comment>

			<expr_stmt pos:start="665:25" pos:end="669:63"><expr pos:start="665:25" pos:end="669:62"><name pos:start="665:25" pos:end="665:35"><name pos:start="665:25" pos:end="665:28">info</name><operator pos:start="665:29" pos:end="665:30">-&gt;</operator><name pos:start="665:31" pos:end="665:35">flags</name></name>

			  <operator pos:start="667:27" pos:end="667:28">|=</operator> <operator pos:start="667:30" pos:end="667:30">(</operator><name pos:start="667:31" pos:end="667:62">CRIS_DIS_FLAG_MEM_TARGET2_IS_REG</name>

			      <operator pos:start="669:31" pos:end="669:31">|</operator> <name pos:start="669:33" pos:end="669:61">CRIS_DIS_FLAG_MEM_TARGET2_MEM</name><operator pos:start="669:62" pos:end="669:62">)</operator></expr>;</expr_stmt>



			<expr_stmt pos:start="673:25" pos:end="673:57"><expr pos:start="673:25" pos:end="673:56"><name pos:start="673:25" pos:end="673:37"><name pos:start="673:25" pos:end="673:28">info</name><operator pos:start="673:29" pos:end="673:30">-&gt;</operator><name pos:start="673:31" pos:end="673:37">target2</name></name> <operator pos:start="673:39" pos:end="673:39">=</operator> <name pos:start="673:41" pos:end="673:51">prefix_insn</name> <operator pos:start="673:53" pos:end="673:53">&amp;</operator> <literal type="number" pos:start="673:55" pos:end="673:56">15</literal></expr>;</expr_stmt>



			<expr_stmt pos:start="677:25" pos:end="677:36"><expr pos:start="677:25" pos:end="677:35"><operator pos:start="677:25" pos:end="677:25">*</operator><name pos:start="677:26" pos:end="677:27">tp</name><operator pos:start="677:28" pos:end="677:29">++</operator> <operator pos:start="677:31" pos:end="677:31">=</operator> <literal type="char" pos:start="677:33" pos:end="677:35">'['</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="679:25" pos:end="681:58"><expr pos:start="679:25" pos:end="681:57"><name pos:start="679:25" pos:end="679:26">tp</name> <operator pos:start="679:28" pos:end="679:28">=</operator> <call pos:start="679:30" pos:end="681:57"><name pos:start="679:30" pos:end="679:39">format_reg</name> <argument_list pos:start="679:41" pos:end="681:57">(<argument pos:start="679:42" pos:end="679:48"><expr pos:start="679:42" pos:end="679:48"><name pos:start="679:42" pos:end="679:48">disdata</name></expr></argument>, <argument pos:start="679:51" pos:end="679:66"><expr pos:start="679:51" pos:end="679:66"><name pos:start="679:51" pos:end="679:61">prefix_insn</name> <operator pos:start="679:63" pos:end="679:63">&amp;</operator> <literal type="number" pos:start="679:65" pos:end="679:66">15</literal></expr></argument>, <argument pos:start="679:69" pos:end="679:70"><expr pos:start="679:69" pos:end="679:70"><name pos:start="679:69" pos:end="679:70">tp</name></expr></argument>,

					 <argument pos:start="681:42" pos:end="681:56"><expr pos:start="681:42" pos:end="681:56"><name pos:start="681:42" pos:end="681:56">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt pos:start="683:25" pos:end="685:38"><if pos:start="683:25" pos:end="685:38">if <condition pos:start="683:28" pos:end="683:48">(<expr pos:start="683:29" pos:end="683:47"><name pos:start="683:29" pos:end="683:39">prefix_insn</name> <operator pos:start="683:41" pos:end="683:41">&amp;</operator> <literal type="number" pos:start="683:43" pos:end="683:47">0x400</literal></expr>)</condition><block type="pseudo" pos:start="685:27" pos:end="685:38"><block_content pos:start="685:27" pos:end="685:38">

			  <expr_stmt pos:start="685:27" pos:end="685:38"><expr pos:start="685:27" pos:end="685:37"><operator pos:start="685:27" pos:end="685:27">*</operator><name pos:start="685:28" pos:end="685:29">tp</name><operator pos:start="685:30" pos:end="685:31">++</operator> <operator pos:start="685:33" pos:end="685:33">=</operator> <literal type="char" pos:start="685:35" pos:end="685:37">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt pos:start="687:25" pos:end="687:36"><expr pos:start="687:25" pos:end="687:35"><operator pos:start="687:25" pos:end="687:25">*</operator><name pos:start="687:26" pos:end="687:27">tp</name><operator pos:start="687:28" pos:end="687:29">++</operator> <operator pos:start="687:31" pos:end="687:31">=</operator> <literal type="char" pos:start="687:33" pos:end="687:35">']'</literal></expr>;</expr_stmt>

		      </block_content>}</block></else></if_stmt>

		    <break pos:start="691:21" pos:end="691:26">break;</break>



		  <case pos:start="695:19" pos:end="695:41">case <expr pos:start="695:24" pos:end="695:40"><name pos:start="695:24" pos:end="695:40">BDAP_QUICK_OPCODE</name></expr>:</case>

		    <block pos:start="697:21" pos:end="733:21">{<block_content pos:start="699:23" pos:end="731:28">

		      <decl_stmt pos:start="699:23" pos:end="699:33"><decl pos:start="699:23" pos:end="699:32"><type pos:start="699:23" pos:end="699:25"><name pos:start="699:23" pos:end="699:25">int</name></type> <name pos:start="699:27" pos:end="699:32">number</name></decl>;</decl_stmt>



		      <expr_stmt pos:start="703:23" pos:end="703:48"><expr pos:start="703:23" pos:end="703:47"><name pos:start="703:23" pos:end="703:28">number</name> <operator pos:start="703:30" pos:end="703:30">=</operator> <name pos:start="703:32" pos:end="703:47"><name pos:start="703:32" pos:end="703:44">prefix_buffer</name><index pos:start="703:45" pos:end="703:47">[<expr pos:start="703:46" pos:end="703:46"><literal type="number" pos:start="703:46" pos:end="703:46">0</literal></expr>]</index></name></expr>;</expr_stmt>

		      <if_stmt pos:start="705:23" pos:end="707:38"><if pos:start="705:23" pos:end="707:38">if <condition pos:start="705:26" pos:end="705:39">(<expr pos:start="705:27" pos:end="705:38"><name pos:start="705:27" pos:end="705:32">number</name> <operator pos:start="705:34" pos:end="705:34">&gt;</operator> <literal type="number" pos:start="705:36" pos:end="705:38">127</literal></expr>)</condition><block type="pseudo" pos:start="707:25" pos:end="707:38"><block_content pos:start="707:25" pos:end="707:38">

			<expr_stmt pos:start="707:25" pos:end="707:38"><expr pos:start="707:25" pos:end="707:37"><name pos:start="707:25" pos:end="707:30">number</name> <operator pos:start="707:32" pos:end="707:33">-=</operator> <literal type="number" pos:start="707:35" pos:end="707:37">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



		      <comment type="block" pos:start="711:23" pos:end="711:72">/* Output "reg+num" or, if num &lt; 0, "reg-num".  */</comment>

		      <expr_stmt pos:start="713:23" pos:end="715:56"><expr pos:start="713:23" pos:end="715:55"><name pos:start="713:23" pos:end="713:24">tp</name> <operator pos:start="713:26" pos:end="713:26">=</operator> <call pos:start="713:28" pos:end="715:55"><name pos:start="713:28" pos:end="713:37">format_reg</name> <argument_list pos:start="713:39" pos:end="715:55">(<argument pos:start="713:40" pos:end="713:46"><expr pos:start="713:40" pos:end="713:46"><name pos:start="713:40" pos:end="713:46">disdata</name></expr></argument>, <argument pos:start="713:49" pos:end="713:72"><expr pos:start="713:49" pos:end="713:72"><operator pos:start="713:49" pos:end="713:49">(</operator><name pos:start="713:50" pos:end="713:60">prefix_insn</name> <operator pos:start="713:62" pos:end="713:63">&gt;&gt;</operator> <literal type="number" pos:start="713:65" pos:end="713:66">12</literal><operator pos:start="713:67" pos:end="713:67">)</operator> <operator pos:start="713:69" pos:end="713:69">&amp;</operator> <literal type="number" pos:start="713:71" pos:end="713:72">15</literal></expr></argument>, <argument pos:start="713:75" pos:end="713:76"><expr pos:start="713:75" pos:end="713:76"><name pos:start="713:75" pos:end="713:76">tp</name></expr></argument>,

				       <argument pos:start="715:40" pos:end="715:54"><expr pos:start="715:40" pos:end="715:54"><name pos:start="715:40" pos:end="715:54">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		      <if_stmt pos:start="717:23" pos:end="719:36"><if pos:start="717:23" pos:end="719:36">if <condition pos:start="717:26" pos:end="717:38">(<expr pos:start="717:27" pos:end="717:37"><name pos:start="717:27" pos:end="717:32">number</name> <operator pos:start="717:34" pos:end="717:35">&gt;=</operator> <literal type="number" pos:start="717:37" pos:end="717:37">0</literal></expr>)</condition><block type="pseudo" pos:start="719:25" pos:end="719:36"><block_content pos:start="719:25" pos:end="719:36">

			<expr_stmt pos:start="719:25" pos:end="719:36"><expr pos:start="719:25" pos:end="719:35"><operator pos:start="719:25" pos:end="719:25">*</operator><name pos:start="719:26" pos:end="719:27">tp</name><operator pos:start="719:28" pos:end="719:29">++</operator> <operator pos:start="719:31" pos:end="719:31">=</operator> <literal type="char" pos:start="719:33" pos:end="719:35">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		      <expr_stmt pos:start="721:23" pos:end="721:54"><expr pos:start="721:23" pos:end="721:53"><name pos:start="721:23" pos:end="721:24">tp</name> <operator pos:start="721:26" pos:end="721:26">=</operator> <call pos:start="721:28" pos:end="721:53"><name pos:start="721:28" pos:end="721:37">format_dec</name> <argument_list pos:start="721:39" pos:end="721:53">(<argument pos:start="721:40" pos:end="721:45"><expr pos:start="721:40" pos:end="721:45"><name pos:start="721:40" pos:end="721:45">number</name></expr></argument>, <argument pos:start="721:48" pos:end="721:49"><expr pos:start="721:48" pos:end="721:49"><name pos:start="721:48" pos:end="721:49">tp</name></expr></argument>, <argument pos:start="721:52" pos:end="721:52"><expr pos:start="721:52" pos:end="721:52"><literal type="number" pos:start="721:52" pos:end="721:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



		      <expr_stmt pos:start="725:23" pos:end="725:69"><expr pos:start="725:23" pos:end="725:68"><name pos:start="725:23" pos:end="725:33"><name pos:start="725:23" pos:end="725:26">info</name><operator pos:start="725:27" pos:end="725:28">-&gt;</operator><name pos:start="725:29" pos:end="725:33">flags</name></name> <operator pos:start="725:35" pos:end="725:36">|=</operator> <name pos:start="725:38" pos:end="725:68">CRIS_DIS_FLAG_MEM_TARGET_IS_REG</name></expr>;</expr_stmt>

		      <expr_stmt pos:start="727:23" pos:end="727:62"><expr pos:start="727:23" pos:end="727:61"><name pos:start="727:23" pos:end="727:34"><name pos:start="727:23" pos:end="727:26">info</name><operator pos:start="727:27" pos:end="727:28">-&gt;</operator><name pos:start="727:29" pos:end="727:34">target</name></name> <operator pos:start="727:36" pos:end="727:36">=</operator> <operator pos:start="727:38" pos:end="727:38">(</operator><name pos:start="727:39" pos:end="727:49">prefix_insn</name> <operator pos:start="727:51" pos:end="727:52">&gt;&gt;</operator> <literal type="number" pos:start="727:54" pos:end="727:55">12</literal><operator pos:start="727:56" pos:end="727:56">)</operator> <operator pos:start="727:58" pos:end="727:58">&amp;</operator> <literal type="number" pos:start="727:60" pos:end="727:61">15</literal></expr>;</expr_stmt>

		      <expr_stmt pos:start="729:23" pos:end="729:55"><expr pos:start="729:23" pos:end="729:54"><name pos:start="729:23" pos:end="729:35"><name pos:start="729:23" pos:end="729:26">info</name><operator pos:start="729:27" pos:end="729:28">-&gt;</operator><name pos:start="729:29" pos:end="729:35">target2</name></name> <operator pos:start="729:37" pos:end="729:37">=</operator> <operator pos:start="729:39" pos:end="729:39">(</operator><name pos:start="729:40" pos:end="729:46">bfd_vma</name><operator pos:start="729:47" pos:end="729:47">)</operator> <name pos:start="729:49" pos:end="729:54">number</name></expr>;</expr_stmt>

		      <break pos:start="731:23" pos:end="731:28">break;</break>

		    </block_content>}</block>



		  <case pos:start="737:19" pos:end="737:35">case <expr pos:start="737:24" pos:end="737:34"><name pos:start="737:24" pos:end="737:34">BIAP_OPCODE</name></expr>:</case>

		    <comment type="block" pos:start="739:21" pos:end="739:42">/* Output "r+R.m".  */</comment>

		    <expr_stmt pos:start="741:21" pos:end="743:54"><expr pos:start="741:21" pos:end="743:53"><name pos:start="741:21" pos:end="741:22">tp</name> <operator pos:start="741:24" pos:end="741:24">=</operator> <call pos:start="741:26" pos:end="743:53"><name pos:start="741:26" pos:end="741:35">format_reg</name> <argument_list pos:start="741:37" pos:end="743:53">(<argument pos:start="741:38" pos:end="741:44"><expr pos:start="741:38" pos:end="741:44"><name pos:start="741:38" pos:end="741:44">disdata</name></expr></argument>, <argument pos:start="741:47" pos:end="741:62"><expr pos:start="741:47" pos:end="741:62"><name pos:start="741:47" pos:end="741:57">prefix_insn</name> <operator pos:start="741:59" pos:end="741:59">&amp;</operator> <literal type="number" pos:start="741:61" pos:end="741:62">15</literal></expr></argument>, <argument pos:start="741:65" pos:end="741:66"><expr pos:start="741:65" pos:end="741:66"><name pos:start="741:65" pos:end="741:66">tp</name></expr></argument>,

				     <argument pos:start="743:38" pos:end="743:52"><expr pos:start="743:38" pos:end="743:52"><name pos:start="743:38" pos:end="743:52">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="745:21" pos:end="745:32"><expr pos:start="745:21" pos:end="745:31"><operator pos:start="745:21" pos:end="745:21">*</operator><name pos:start="745:22" pos:end="745:23">tp</name><operator pos:start="745:24" pos:end="745:25">++</operator> <operator pos:start="745:27" pos:end="745:27">=</operator> <literal type="char" pos:start="745:29" pos:end="745:31">'+'</literal></expr>;</expr_stmt>

		    <expr_stmt pos:start="747:21" pos:end="749:54"><expr pos:start="747:21" pos:end="749:53"><name pos:start="747:21" pos:end="747:22">tp</name> <operator pos:start="747:24" pos:end="747:24">=</operator> <call pos:start="747:26" pos:end="749:53"><name pos:start="747:26" pos:end="747:35">format_reg</name> <argument_list pos:start="747:37" pos:end="749:53">(<argument pos:start="747:38" pos:end="747:44"><expr pos:start="747:38" pos:end="747:44"><name pos:start="747:38" pos:end="747:44">disdata</name></expr></argument>, <argument pos:start="747:47" pos:end="747:70"><expr pos:start="747:47" pos:end="747:70"><operator pos:start="747:47" pos:end="747:47">(</operator><name pos:start="747:48" pos:end="747:58">prefix_insn</name> <operator pos:start="747:60" pos:end="747:61">&gt;&gt;</operator> <literal type="number" pos:start="747:63" pos:end="747:64">12</literal><operator pos:start="747:65" pos:end="747:65">)</operator> <operator pos:start="747:67" pos:end="747:67">&amp;</operator> <literal type="number" pos:start="747:69" pos:end="747:70">15</literal></expr></argument>, <argument pos:start="747:73" pos:end="747:74"><expr pos:start="747:73" pos:end="747:74"><name pos:start="747:73" pos:end="747:74">tp</name></expr></argument>,

				     <argument pos:start="749:38" pos:end="749:52"><expr pos:start="749:38" pos:end="749:52"><name pos:start="749:38" pos:end="749:52">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="751:21" pos:end="751:32"><expr pos:start="751:21" pos:end="751:31"><operator pos:start="751:21" pos:end="751:21">*</operator><name pos:start="751:22" pos:end="751:23">tp</name><operator pos:start="751:24" pos:end="751:25">++</operator> <operator pos:start="751:27" pos:end="751:27">=</operator> <literal type="char" pos:start="751:29" pos:end="751:31">'.'</literal></expr>;</expr_stmt>

		    <expr_stmt pos:start="753:21" pos:end="753:62"><expr pos:start="753:21" pos:end="753:61"><operator pos:start="753:21" pos:end="753:21">*</operator><name pos:start="753:22" pos:end="753:23">tp</name><operator pos:start="753:24" pos:end="753:25">++</operator> <operator pos:start="753:27" pos:end="753:27">=</operator> <name pos:start="753:29" pos:end="753:61"><name pos:start="753:29" pos:end="753:37">mode_char</name><index pos:start="753:38" pos:end="753:61">[<expr pos:start="753:39" pos:end="753:60"><operator pos:start="753:39" pos:end="753:39">(</operator><name pos:start="753:40" pos:end="753:50">prefix_insn</name> <operator pos:start="753:52" pos:end="753:53">&gt;&gt;</operator> <literal type="number" pos:start="753:55" pos:end="753:55">4</literal><operator pos:start="753:56" pos:end="753:56">)</operator> <operator pos:start="753:58" pos:end="753:58">&amp;</operator> <literal type="number" pos:start="753:60" pos:end="753:60">3</literal></expr>]</index></name></expr>;</expr_stmt>



		    <expr_stmt pos:start="757:21" pos:end="771:73"><expr pos:start="757:21" pos:end="771:72"><name pos:start="757:21" pos:end="757:31"><name pos:start="757:21" pos:end="757:24">info</name><operator pos:start="757:25" pos:end="757:26">-&gt;</operator><name pos:start="757:27" pos:end="757:31">flags</name></name>

		      <operator pos:start="759:23" pos:end="759:24">|=</operator> <operator pos:start="759:26" pos:end="759:26">(</operator><name pos:start="759:27" pos:end="759:58">CRIS_DIS_FLAG_MEM_TARGET2_IS_REG</name>

			  <operator pos:start="761:27" pos:end="761:27">|</operator> <name pos:start="761:29" pos:end="761:59">CRIS_DIS_FLAG_MEM_TARGET_IS_REG</name>



			  <operator pos:start="765:27" pos:end="765:27">|</operator> <operator pos:start="765:29" pos:end="765:29">(</operator><ternary pos:start="765:30" pos:end="771:70"><condition pos:start="765:30" pos:end="767:30"><expr pos:start="765:30" pos:end="765:51"><operator pos:start="765:30" pos:end="765:30">(</operator><name pos:start="765:31" pos:end="765:41">prefix_insn</name> <operator pos:start="765:43" pos:end="765:43">&amp;</operator> <literal type="number" pos:start="765:45" pos:end="765:50">0x8000</literal><operator pos:start="765:51" pos:end="765:51">)</operator></expr>

			     ?</condition><then pos:start="767:32" pos:end="767:62"> <expr pos:start="767:32" pos:end="767:62"><name pos:start="767:32" pos:end="767:62">CRIS_DIS_FLAG_MEM_TARGET2_MULT4</name></expr>

			     </then><else pos:start="769:30" pos:end="771:70">: <expr pos:start="769:32" pos:end="771:70"><operator pos:start="769:32" pos:end="769:32">(</operator><ternary pos:start="769:33" pos:end="771:69"><condition pos:start="769:33" pos:end="771:33"><expr pos:start="769:33" pos:end="769:54"><operator pos:start="769:33" pos:end="769:33">(</operator><name pos:start="769:34" pos:end="769:44">prefix_insn</name> <operator pos:start="769:46" pos:end="769:46">&amp;</operator> <literal type="number" pos:start="769:48" pos:end="769:53">0x8000</literal><operator pos:start="769:54" pos:end="769:54">)</operator></expr>

				?</condition><then pos:start="771:35" pos:end="771:65"> <expr pos:start="771:35" pos:end="771:65"><name pos:start="771:35" pos:end="771:65">CRIS_DIS_FLAG_MEM_TARGET2_MULT2</name></expr> </then><else pos:start="771:67" pos:end="771:69">: <expr pos:start="771:69" pos:end="771:69"><literal type="number" pos:start="771:69" pos:end="771:69">0</literal></expr></else></ternary><operator pos:start="771:70" pos:end="771:70">)</operator></expr></else></ternary><operator pos:start="771:71" pos:end="771:71">)</operator><operator pos:start="771:72" pos:end="771:72">)</operator></expr>;</expr_stmt>



		    <comment type="block" pos:start="775:21" pos:end="775:78">/* Is it the casejump?  It's a "adds.w [pc+r%d.w],pc".  */</comment>

		    <if_stmt pos:start="777:21" pos:end="781:63"><if pos:start="777:21" pos:end="781:63">if <condition pos:start="777:24" pos:end="777:75">(<expr pos:start="777:25" pos:end="777:74"><name pos:start="777:25" pos:end="777:28">insn</name> <operator pos:start="777:30" pos:end="777:31">==</operator> <literal type="number" pos:start="777:33" pos:end="777:38">0xf83f</literal> <operator pos:start="777:40" pos:end="777:41">&amp;&amp;</operator> <operator pos:start="777:43" pos:end="777:43">(</operator><name pos:start="777:44" pos:end="777:54">prefix_insn</name> <operator pos:start="777:56" pos:end="777:56">&amp;</operator> <operator pos:start="777:58" pos:end="777:58">~</operator><literal type="number" pos:start="777:59" pos:end="777:64">0xf000</literal><operator pos:start="777:65" pos:end="777:65">)</operator> <operator pos:start="777:67" pos:end="777:68">==</operator> <literal type="number" pos:start="777:70" pos:end="777:74">0x55f</literal></expr>)</condition><block type="pseudo" pos:start="781:23" pos:end="781:63"><block_content pos:start="781:23" pos:end="781:63">

		      <comment type="block" pos:start="779:23" pos:end="779:69">/* Then start interpreting data as offsets.  */</comment>

		      <expr_stmt pos:start="781:23" pos:end="781:63"><expr pos:start="781:23" pos:end="781:62"><name pos:start="781:23" pos:end="781:41">case_offset_counter</name> <operator pos:start="781:43" pos:end="781:43">=</operator> <name pos:start="781:45" pos:end="781:62">no_of_case_offsets</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		    <break pos:start="783:21" pos:end="783:26">break;</break>



		  <case pos:start="787:19" pos:end="787:41">case <expr pos:start="787:24" pos:end="787:40"><name pos:start="787:24" pos:end="787:40">BDAP_INDIR_OPCODE</name></expr>:</case>

		    <comment type="block" pos:start="789:21" pos:end="791:33">/* Output "r+s.m", or, if "s" is [pc+], "r+s" or

		       "r-s".  */</comment>

		    <expr_stmt pos:start="793:21" pos:end="795:54"><expr pos:start="793:21" pos:end="795:53"><name pos:start="793:21" pos:end="793:22">tp</name> <operator pos:start="793:24" pos:end="793:24">=</operator> <call pos:start="793:26" pos:end="795:53"><name pos:start="793:26" pos:end="793:35">format_reg</name> <argument_list pos:start="793:37" pos:end="795:53">(<argument pos:start="793:38" pos:end="793:44"><expr pos:start="793:38" pos:end="793:44"><name pos:start="793:38" pos:end="793:44">disdata</name></expr></argument>, <argument pos:start="793:47" pos:end="793:70"><expr pos:start="793:47" pos:end="793:70"><operator pos:start="793:47" pos:end="793:47">(</operator><name pos:start="793:48" pos:end="793:58">prefix_insn</name> <operator pos:start="793:60" pos:end="793:61">&gt;&gt;</operator> <literal type="number" pos:start="793:63" pos:end="793:64">12</literal><operator pos:start="793:65" pos:end="793:65">)</operator> <operator pos:start="793:67" pos:end="793:67">&amp;</operator> <literal type="number" pos:start="793:69" pos:end="793:70">15</literal></expr></argument>, <argument pos:start="793:73" pos:end="793:74"><expr pos:start="793:73" pos:end="793:74"><name pos:start="793:73" pos:end="793:74">tp</name></expr></argument>,

				     <argument pos:start="795:38" pos:end="795:52"><expr pos:start="795:38" pos:end="795:52"><name pos:start="795:38" pos:end="795:52">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



		    <if_stmt pos:start="799:21" pos:end="971:23"><if pos:start="799:21" pos:end="923:23">if <condition pos:start="799:24" pos:end="799:74">(<expr pos:start="799:25" pos:end="799:73"><operator pos:start="799:25" pos:end="799:25">(</operator><name pos:start="799:26" pos:end="799:36">prefix_insn</name> <operator pos:start="799:38" pos:end="799:38">&amp;</operator> <literal type="number" pos:start="799:40" pos:end="799:44">0x400</literal><operator pos:start="799:45" pos:end="799:45">)</operator> <operator pos:start="799:47" pos:end="799:48">&amp;&amp;</operator> <operator pos:start="799:50" pos:end="799:50">(</operator><name pos:start="799:51" pos:end="799:61">prefix_insn</name> <operator pos:start="799:63" pos:end="799:63">&amp;</operator> <literal type="number" pos:start="799:65" pos:end="799:66">15</literal><operator pos:start="799:67" pos:end="799:67">)</operator> <operator pos:start="799:69" pos:end="799:70">==</operator> <literal type="number" pos:start="799:72" pos:end="799:73">15</literal></expr>)</condition>

		      <block pos:start="801:23" pos:end="923:23">{<block_content pos:start="803:25" pos:end="921:27">

			<decl_stmt pos:start="803:25" pos:end="803:36"><decl pos:start="803:25" pos:end="803:35"><type pos:start="803:25" pos:end="803:28"><name pos:start="803:25" pos:end="803:28">long</name></type> <name pos:start="803:30" pos:end="803:35">number</name></decl>;</decl_stmt>

			<decl_stmt pos:start="805:25" pos:end="805:44"><decl pos:start="805:25" pos:end="805:43"><type pos:start="805:25" pos:end="805:36"><name pos:start="805:25" pos:end="805:32">unsigned</name> <name pos:start="805:34" pos:end="805:36">int</name></type> <name pos:start="805:38" pos:end="805:43">nbytes</name></decl>;</decl_stmt>



			<comment type="block" pos:start="809:25" pos:end="809:59">/* It's a value.  Get its size.  */</comment>

			<decl_stmt pos:start="811:25" pos:end="811:70"><decl pos:start="811:25" pos:end="811:69"><type pos:start="811:25" pos:end="811:27"><name pos:start="811:25" pos:end="811:27">int</name></type> <name pos:start="811:29" pos:end="811:37">mode_size</name> <init pos:start="811:39" pos:end="811:69">= <expr pos:start="811:41" pos:end="811:69"><literal type="number" pos:start="811:41" pos:end="811:41">1</literal> <operator pos:start="811:43" pos:end="811:44">&lt;&lt;</operator> <operator pos:start="811:46" pos:end="811:46">(</operator><operator pos:start="811:47" pos:end="811:47">(</operator><name pos:start="811:48" pos:end="811:58">prefix_insn</name> <operator pos:start="811:60" pos:end="811:61">&gt;&gt;</operator> <literal type="number" pos:start="811:63" pos:end="811:63">4</literal><operator pos:start="811:64" pos:end="811:64">)</operator> <operator pos:start="811:66" pos:end="811:66">&amp;</operator> <literal type="number" pos:start="811:68" pos:end="811:68">3</literal><operator pos:start="811:69" pos:end="811:69">)</operator></expr></init></decl>;</decl_stmt>



			<if_stmt pos:start="815:25" pos:end="821:45"><if pos:start="815:25" pos:end="817:37">if <condition pos:start="815:28" pos:end="815:43">(<expr pos:start="815:29" pos:end="815:42"><name pos:start="815:29" pos:end="815:37">mode_size</name> <operator pos:start="815:39" pos:end="815:40">==</operator> <literal type="number" pos:start="815:42" pos:end="815:42">1</literal></expr>)</condition><block type="pseudo" pos:start="817:27" pos:end="817:37"><block_content pos:start="817:27" pos:end="817:37">

			  <expr_stmt pos:start="817:27" pos:end="817:37"><expr pos:start="817:27" pos:end="817:36"><name pos:start="817:27" pos:end="817:32">nbytes</name> <operator pos:start="817:34" pos:end="817:34">=</operator> <literal type="number" pos:start="817:36" pos:end="817:36">2</literal></expr>;</expr_stmt></block_content></block></if>

			<else pos:start="819:25" pos:end="821:45">else<block type="pseudo" pos:start="821:27" pos:end="821:45"><block_content pos:start="821:27" pos:end="821:45">

			  <expr_stmt pos:start="821:27" pos:end="821:45"><expr pos:start="821:27" pos:end="821:44"><name pos:start="821:27" pos:end="821:32">nbytes</name> <operator pos:start="821:34" pos:end="821:34">=</operator> <name pos:start="821:36" pos:end="821:44">mode_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



			<switch pos:start="825:25" pos:end="875:27">switch <condition pos:start="825:32" pos:end="825:39">(<expr pos:start="825:33" pos:end="825:38"><name pos:start="825:33" pos:end="825:38">nbytes</name></expr>)</condition>

			  <block pos:start="827:27" pos:end="875:27">{<block_content pos:start="829:27" pos:end="873:40">

			  <case pos:start="829:27" pos:end="829:33">case <expr pos:start="829:32" pos:end="829:32"><literal type="number" pos:start="829:32" pos:end="829:32">1</literal></expr>:</case>

			    <expr_stmt pos:start="831:29" pos:end="831:54"><expr pos:start="831:29" pos:end="831:53"><name pos:start="831:29" pos:end="831:34">number</name> <operator pos:start="831:36" pos:end="831:36">=</operator> <name pos:start="831:38" pos:end="831:53"><name pos:start="831:38" pos:end="831:50">prefix_buffer</name><index pos:start="831:51" pos:end="831:53">[<expr pos:start="831:52" pos:end="831:52"><literal type="number" pos:start="831:52" pos:end="831:52">2</literal></expr>]</index></name></expr>;</expr_stmt>

			    <if_stmt pos:start="833:29" pos:end="835:44"><if pos:start="833:29" pos:end="835:44">if <condition pos:start="833:32" pos:end="833:45">(<expr pos:start="833:33" pos:end="833:44"><name pos:start="833:33" pos:end="833:38">number</name> <operator pos:start="833:40" pos:end="833:40">&gt;</operator> <literal type="number" pos:start="833:42" pos:end="833:44">127</literal></expr>)</condition><block type="pseudo" pos:start="835:31" pos:end="835:44"><block_content pos:start="835:31" pos:end="835:44">

			      <expr_stmt pos:start="835:31" pos:end="835:44"><expr pos:start="835:31" pos:end="835:43"><name pos:start="835:31" pos:end="835:36">number</name> <operator pos:start="835:38" pos:end="835:39">-=</operator> <literal type="number" pos:start="835:41" pos:end="835:43">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			    <break pos:start="837:29" pos:end="837:34">break;</break>



			  <case pos:start="841:27" pos:end="841:33">case <expr pos:start="841:32" pos:end="841:32"><literal type="number" pos:start="841:32" pos:end="841:32">2</literal></expr>:</case>

			    <expr_stmt pos:start="843:29" pos:end="843:79"><expr pos:start="843:29" pos:end="843:78"><name pos:start="843:29" pos:end="843:34">number</name> <operator pos:start="843:36" pos:end="843:36">=</operator> <name pos:start="843:38" pos:end="843:53"><name pos:start="843:38" pos:end="843:50">prefix_buffer</name><index pos:start="843:51" pos:end="843:53">[<expr pos:start="843:52" pos:end="843:52"><literal type="number" pos:start="843:52" pos:end="843:52">2</literal></expr>]</index></name> <operator pos:start="843:55" pos:end="843:55">+</operator> <name pos:start="843:57" pos:end="843:72"><name pos:start="843:57" pos:end="843:69">prefix_buffer</name><index pos:start="843:70" pos:end="843:72">[<expr pos:start="843:71" pos:end="843:71"><literal type="number" pos:start="843:71" pos:end="843:71">3</literal></expr>]</index></name> <operator pos:start="843:74" pos:end="843:74">*</operator> <literal type="number" pos:start="843:76" pos:end="843:78">256</literal></expr>;</expr_stmt>

			    <if_stmt pos:start="845:29" pos:end="847:46"><if pos:start="845:29" pos:end="847:46">if <condition pos:start="845:32" pos:end="845:47">(<expr pos:start="845:33" pos:end="845:46"><name pos:start="845:33" pos:end="845:38">number</name> <operator pos:start="845:40" pos:end="845:40">&gt;</operator> <literal type="number" pos:start="845:42" pos:end="845:46">32767</literal></expr>)</condition><block type="pseudo" pos:start="847:31" pos:end="847:46"><block_content pos:start="847:31" pos:end="847:46">

			      <expr_stmt pos:start="847:31" pos:end="847:46"><expr pos:start="847:31" pos:end="847:45"><name pos:start="847:31" pos:end="847:36">number</name> <operator pos:start="847:38" pos:end="847:39">-=</operator> <literal type="number" pos:start="847:41" pos:end="847:45">65536</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			    <break pos:start="849:29" pos:end="849:34">break;</break>



			  <case pos:start="853:27" pos:end="853:33">case <expr pos:start="853:32" pos:end="853:32"><literal type="number" pos:start="853:32" pos:end="853:32">4</literal></expr>:</case>

			    <expr_stmt pos:start="855:29" pos:end="861:61"><expr pos:start="855:29" pos:end="861:60"><name pos:start="855:29" pos:end="855:34">number</name>

			      <operator pos:start="857:31" pos:end="857:31">=</operator> <name pos:start="857:33" pos:end="857:48"><name pos:start="857:33" pos:end="857:45">prefix_buffer</name><index pos:start="857:46" pos:end="857:48">[<expr pos:start="857:47" pos:end="857:47"><literal type="number" pos:start="857:47" pos:end="857:47">2</literal></expr>]</index></name> <operator pos:start="857:50" pos:end="857:50">+</operator> <name pos:start="857:52" pos:end="857:67"><name pos:start="857:52" pos:end="857:64">prefix_buffer</name><index pos:start="857:65" pos:end="857:67">[<expr pos:start="857:66" pos:end="857:66"><literal type="number" pos:start="857:66" pos:end="857:66">3</literal></expr>]</index></name> <operator pos:start="857:69" pos:end="857:69">*</operator> <literal type="number" pos:start="857:71" pos:end="859:31">256</literal>

			      <operator pos:start="859:31" pos:end="859:31">+</operator> <name pos:start="859:33" pos:end="859:48"><name pos:start="859:33" pos:end="859:45">prefix_buffer</name><index pos:start="859:46" pos:end="859:48">[<expr pos:start="859:47" pos:end="859:47"><literal type="number" pos:start="859:47" pos:end="859:47">4</literal></expr>]</index></name> <operator pos:start="859:50" pos:end="859:50">*</operator> <literal type="number" pos:start="859:52" pos:end="861:31">65536</literal>

			      <operator pos:start="861:31" pos:end="861:31">+</operator> <name pos:start="861:33" pos:end="861:48"><name pos:start="861:33" pos:end="861:45">prefix_buffer</name><index pos:start="861:46" pos:end="861:48">[<expr pos:start="861:47" pos:end="861:47"><literal type="number" pos:start="861:47" pos:end="861:47">5</literal></expr>]</index></name> <operator pos:start="861:50" pos:end="861:50">*</operator> <literal type="number" pos:start="861:52" pos:end="861:60">0x1000000</literal></expr>;</expr_stmt>

			    <break pos:start="863:29" pos:end="863:34">break;</break>



			  <default pos:start="867:27" pos:end="867:34">default:</default>

			    <expr_stmt pos:start="869:29" pos:end="869:47"><expr pos:start="869:29" pos:end="869:46"><call pos:start="869:29" pos:end="869:46"><name pos:start="869:29" pos:end="869:34">strcpy</name> <argument_list pos:start="869:36" pos:end="869:46">(<argument pos:start="869:37" pos:end="869:38"><expr pos:start="869:37" pos:end="869:38"><name pos:start="869:37" pos:end="869:38">tp</name></expr></argument>, <argument pos:start="869:41" pos:end="869:45"><expr pos:start="869:41" pos:end="869:45"><literal type="string" pos:start="869:41" pos:end="869:45">"bug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			    <expr_stmt pos:start="871:29" pos:end="871:36"><expr pos:start="871:29" pos:end="871:35"><name pos:start="871:29" pos:end="871:30">tp</name> <operator pos:start="871:32" pos:end="871:33">+=</operator> <literal type="number" pos:start="871:35" pos:end="871:35">3</literal></expr>;</expr_stmt>

			    <expr_stmt pos:start="873:29" pos:end="873:40"><expr pos:start="873:29" pos:end="873:39"><name pos:start="873:29" pos:end="873:34">number</name> <operator pos:start="873:36" pos:end="873:36">=</operator> <literal type="number" pos:start="873:38" pos:end="873:39">42</literal></expr>;</expr_stmt>

			  </block_content>}</block></switch>



			<expr_stmt pos:start="879:25" pos:end="879:71"><expr pos:start="879:25" pos:end="879:70"><name pos:start="879:25" pos:end="879:35"><name pos:start="879:25" pos:end="879:28">info</name><operator pos:start="879:29" pos:end="879:30">-&gt;</operator><name pos:start="879:31" pos:end="879:35">flags</name></name> <operator pos:start="879:37" pos:end="879:38">|=</operator> <name pos:start="879:40" pos:end="879:70">CRIS_DIS_FLAG_MEM_TARGET_IS_REG</name></expr>;</expr_stmt>

			<expr_stmt pos:start="881:25" pos:end="881:57"><expr pos:start="881:25" pos:end="881:56"><name pos:start="881:25" pos:end="881:37"><name pos:start="881:25" pos:end="881:28">info</name><operator pos:start="881:29" pos:end="881:30">-&gt;</operator><name pos:start="881:31" pos:end="881:37">target2</name></name> <operator pos:start="881:39" pos:end="881:39">=</operator> <operator pos:start="881:41" pos:end="881:41">(</operator><name pos:start="881:42" pos:end="881:48">bfd_vma</name><operator pos:start="881:49" pos:end="881:49">)</operator> <name pos:start="881:51" pos:end="881:56">number</name></expr>;</expr_stmt>



			<comment type="block" pos:start="885:25" pos:end="887:39">/* If the size is dword, then assume it's an

			   address.  */</comment>

			<if_stmt pos:start="889:25" pos:end="921:27"><if pos:start="889:25" pos:end="909:27">if <condition pos:start="889:28" pos:end="889:40">(<expr pos:start="889:29" pos:end="889:39"><name pos:start="889:29" pos:end="889:34">nbytes</name> <operator pos:start="889:36" pos:end="889:37">==</operator> <literal type="number" pos:start="889:39" pos:end="889:39">4</literal></expr>)</condition>

			  <block pos:start="891:27" pos:end="909:27">{<block_content pos:start="897:29" pos:end="907:81">

			    <comment type="block" pos:start="893:29" pos:end="895:41">/* Finish off and output previous formatted

			       bytes.  */</comment>

			    <expr_stmt pos:start="897:29" pos:end="897:40"><expr pos:start="897:29" pos:end="897:39"><operator pos:start="897:29" pos:end="897:29">*</operator><name pos:start="897:30" pos:end="897:31">tp</name><operator pos:start="897:32" pos:end="897:33">++</operator> <operator pos:start="897:35" pos:end="897:35">=</operator> <literal type="char" pos:start="897:37" pos:end="897:39">'+'</literal></expr>;</expr_stmt>

			    <expr_stmt pos:start="899:29" pos:end="899:36"><expr pos:start="899:29" pos:end="899:35"><operator pos:start="899:29" pos:end="899:29">*</operator><name pos:start="899:30" pos:end="899:31">tp</name> <operator pos:start="899:33" pos:end="899:33">=</operator> <literal type="number" pos:start="899:35" pos:end="899:35">0</literal></expr>;</expr_stmt>

			    <expr_stmt pos:start="901:29" pos:end="901:38"><expr pos:start="901:29" pos:end="901:37"><name pos:start="901:29" pos:end="901:30">tp</name> <operator pos:start="901:32" pos:end="901:32">=</operator> <name pos:start="901:34" pos:end="901:37">temp</name></expr>;</expr_stmt>

			    <expr_stmt pos:start="903:29" pos:end="903:77"><expr pos:start="903:29" pos:end="903:76"><call pos:start="903:29" pos:end="903:76">(<modifier pos:start="903:30" pos:end="903:30">*</modifier><name pos:start="903:31" pos:end="903:48"><name pos:start="903:31" pos:end="903:34">info</name><operator pos:start="903:35" pos:end="903:36">-&gt;</operator><name pos:start="903:37" pos:end="903:48">fprintf_func</name></name>) <argument_list pos:start="903:51" pos:end="903:76">(<argument pos:start="903:52" pos:end="903:63"><expr pos:start="903:52" pos:end="903:63"><name pos:start="903:52" pos:end="903:63"><name pos:start="903:52" pos:end="903:55">info</name><operator pos:start="903:56" pos:end="903:57">-&gt;</operator><name pos:start="903:58" pos:end="903:63">stream</name></name></expr></argument>, <argument pos:start="903:66" pos:end="903:69"><expr pos:start="903:66" pos:end="903:69"><literal type="string" pos:start="903:66" pos:end="903:69">"%s"</literal></expr></argument>, <argument pos:start="903:72" pos:end="903:75"><expr pos:start="903:72" pos:end="903:75"><name pos:start="903:72" pos:end="903:75">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



			    <expr_stmt pos:start="907:29" pos:end="907:81"><expr pos:start="907:29" pos:end="907:80"><call pos:start="907:29" pos:end="907:80">(<modifier pos:start="907:30" pos:end="907:30">*</modifier><name pos:start="907:31" pos:end="907:54"><name pos:start="907:31" pos:end="907:34">info</name><operator pos:start="907:35" pos:end="907:36">-&gt;</operator><name pos:start="907:37" pos:end="907:54">print_address_func</name></name>) <argument_list pos:start="907:57" pos:end="907:80">(<argument pos:start="907:58" pos:end="907:73"><expr pos:start="907:58" pos:end="907:73"><operator pos:start="907:58" pos:end="907:58">(</operator><name pos:start="907:59" pos:end="907:65">bfd_vma</name><operator pos:start="907:66" pos:end="907:66">)</operator> <name pos:start="907:68" pos:end="907:73">number</name></expr></argument>, <argument pos:start="907:76" pos:end="907:79"><expr pos:start="907:76" pos:end="907:79"><name pos:start="907:76" pos:end="907:79">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			  </block_content>}</block></if>

			<else pos:start="911:25" pos:end="921:27">else

			  <block pos:start="913:27" pos:end="921:27">{<block_content pos:start="915:29" pos:end="919:60">

			    <if_stmt pos:start="915:29" pos:end="917:42"><if pos:start="915:29" pos:end="917:42">if <condition pos:start="915:32" pos:end="915:44">(<expr pos:start="915:33" pos:end="915:43"><name pos:start="915:33" pos:end="915:38">number</name> <operator pos:start="915:40" pos:end="915:41">&gt;=</operator> <literal type="number" pos:start="915:43" pos:end="915:43">0</literal></expr>)</condition><block type="pseudo" pos:start="917:31" pos:end="917:42"><block_content pos:start="917:31" pos:end="917:42">

			      <expr_stmt pos:start="917:31" pos:end="917:42"><expr pos:start="917:31" pos:end="917:41"><operator pos:start="917:31" pos:end="917:31">*</operator><name pos:start="917:32" pos:end="917:33">tp</name><operator pos:start="917:34" pos:end="917:35">++</operator> <operator pos:start="917:37" pos:end="917:37">=</operator> <literal type="char" pos:start="917:39" pos:end="917:41">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			    <expr_stmt pos:start="919:29" pos:end="919:60"><expr pos:start="919:29" pos:end="919:59"><name pos:start="919:29" pos:end="919:30">tp</name> <operator pos:start="919:32" pos:end="919:32">=</operator> <call pos:start="919:34" pos:end="919:59"><name pos:start="919:34" pos:end="919:43">format_dec</name> <argument_list pos:start="919:45" pos:end="919:59">(<argument pos:start="919:46" pos:end="919:51"><expr pos:start="919:46" pos:end="919:51"><name pos:start="919:46" pos:end="919:51">number</name></expr></argument>, <argument pos:start="919:54" pos:end="919:55"><expr pos:start="919:54" pos:end="919:55"><name pos:start="919:54" pos:end="919:55">tp</name></expr></argument>, <argument pos:start="919:58" pos:end="919:58"><expr pos:start="919:58" pos:end="919:58"><literal type="number" pos:start="919:58" pos:end="919:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			  </block_content>}</block></else></if_stmt>

		      </block_content>}</block></if>

		    <else pos:start="925:21" pos:end="971:23">else

		      <block pos:start="927:23" pos:end="971:23">{<block_content pos:start="931:25" pos:end="969:76">

			<comment type="block" pos:start="929:25" pos:end="929:62">/* Output "r+[R].m" or "r+[R+].m".  */</comment>

			<expr_stmt pos:start="931:25" pos:end="931:36"><expr pos:start="931:25" pos:end="931:35"><operator pos:start="931:25" pos:end="931:25">*</operator><name pos:start="931:26" pos:end="931:27">tp</name><operator pos:start="931:28" pos:end="931:29">++</operator> <operator pos:start="931:31" pos:end="931:31">=</operator> <literal type="char" pos:start="931:33" pos:end="931:35">'+'</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="933:25" pos:end="933:36"><expr pos:start="933:25" pos:end="933:35"><operator pos:start="933:25" pos:end="933:25">*</operator><name pos:start="933:26" pos:end="933:27">tp</name><operator pos:start="933:28" pos:end="933:29">++</operator> <operator pos:start="933:31" pos:end="933:31">=</operator> <literal type="char" pos:start="933:33" pos:end="933:35">'['</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="935:25" pos:end="937:58"><expr pos:start="935:25" pos:end="937:57"><name pos:start="935:25" pos:end="935:26">tp</name> <operator pos:start="935:28" pos:end="935:28">=</operator> <call pos:start="935:30" pos:end="937:57"><name pos:start="935:30" pos:end="935:39">format_reg</name> <argument_list pos:start="935:41" pos:end="937:57">(<argument pos:start="935:42" pos:end="935:48"><expr pos:start="935:42" pos:end="935:48"><name pos:start="935:42" pos:end="935:48">disdata</name></expr></argument>, <argument pos:start="935:51" pos:end="935:66"><expr pos:start="935:51" pos:end="935:66"><name pos:start="935:51" pos:end="935:61">prefix_insn</name> <operator pos:start="935:63" pos:end="935:63">&amp;</operator> <literal type="number" pos:start="935:65" pos:end="935:66">15</literal></expr></argument>, <argument pos:start="935:69" pos:end="935:70"><expr pos:start="935:69" pos:end="935:70"><name pos:start="935:69" pos:end="935:70">tp</name></expr></argument>,

					 <argument pos:start="937:42" pos:end="937:56"><expr pos:start="937:42" pos:end="937:56"><name pos:start="937:42" pos:end="937:56">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt pos:start="939:25" pos:end="941:38"><if pos:start="939:25" pos:end="941:38">if <condition pos:start="939:28" pos:end="939:48">(<expr pos:start="939:29" pos:end="939:47"><name pos:start="939:29" pos:end="939:39">prefix_insn</name> <operator pos:start="939:41" pos:end="939:41">&amp;</operator> <literal type="number" pos:start="939:43" pos:end="939:47">0x400</literal></expr>)</condition><block type="pseudo" pos:start="941:27" pos:end="941:38"><block_content pos:start="941:27" pos:end="941:38">

			  <expr_stmt pos:start="941:27" pos:end="941:38"><expr pos:start="941:27" pos:end="941:37"><operator pos:start="941:27" pos:end="941:27">*</operator><name pos:start="941:28" pos:end="941:29">tp</name><operator pos:start="941:30" pos:end="941:31">++</operator> <operator pos:start="941:33" pos:end="941:33">=</operator> <literal type="char" pos:start="941:35" pos:end="941:37">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt pos:start="943:25" pos:end="943:36"><expr pos:start="943:25" pos:end="943:35"><operator pos:start="943:25" pos:end="943:25">*</operator><name pos:start="943:26" pos:end="943:27">tp</name><operator pos:start="943:28" pos:end="943:29">++</operator> <operator pos:start="943:31" pos:end="943:31">=</operator> <literal type="char" pos:start="943:33" pos:end="943:35">']'</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="945:25" pos:end="945:36"><expr pos:start="945:25" pos:end="945:35"><operator pos:start="945:25" pos:end="945:25">*</operator><name pos:start="945:26" pos:end="945:27">tp</name><operator pos:start="945:28" pos:end="945:29">++</operator> <operator pos:start="945:31" pos:end="945:31">=</operator> <literal type="char" pos:start="945:33" pos:end="945:35">'.'</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="947:25" pos:end="947:66"><expr pos:start="947:25" pos:end="947:65"><operator pos:start="947:25" pos:end="947:25">*</operator><name pos:start="947:26" pos:end="947:27">tp</name><operator pos:start="947:28" pos:end="947:29">++</operator> <operator pos:start="947:31" pos:end="947:31">=</operator> <name pos:start="947:33" pos:end="947:65"><name pos:start="947:33" pos:end="947:41">mode_char</name><index pos:start="947:42" pos:end="947:65">[<expr pos:start="947:43" pos:end="947:64"><operator pos:start="947:43" pos:end="947:43">(</operator><name pos:start="947:44" pos:end="947:54">prefix_insn</name> <operator pos:start="947:56" pos:end="947:57">&gt;&gt;</operator> <literal type="number" pos:start="947:59" pos:end="947:59">4</literal><operator pos:start="947:60" pos:end="947:60">)</operator> <operator pos:start="947:62" pos:end="947:62">&amp;</operator> <literal type="number" pos:start="947:64" pos:end="947:64">3</literal></expr>]</index></name></expr>;</expr_stmt>



			<expr_stmt pos:start="951:25" pos:end="969:76"><expr pos:start="951:25" pos:end="969:75"><name pos:start="951:25" pos:end="951:35"><name pos:start="951:25" pos:end="951:28">info</name><operator pos:start="951:29" pos:end="951:30">-&gt;</operator><name pos:start="951:31" pos:end="951:35">flags</name></name>

			  <operator pos:start="953:27" pos:end="953:28">|=</operator> <operator pos:start="953:30" pos:end="953:30">(</operator><name pos:start="953:31" pos:end="953:62">CRIS_DIS_FLAG_MEM_TARGET2_IS_REG</name>

			      <operator pos:start="955:31" pos:end="955:31">|</operator> <name pos:start="955:33" pos:end="955:61">CRIS_DIS_FLAG_MEM_TARGET2_MEM</name>

			      <operator pos:start="957:31" pos:end="957:31">|</operator> <name pos:start="957:33" pos:end="957:63">CRIS_DIS_FLAG_MEM_TARGET_IS_REG</name>



			      <operator pos:start="961:31" pos:end="961:31">|</operator> <operator pos:start="961:33" pos:end="961:33">(</operator><ternary pos:start="961:34" pos:end="969:73"><condition pos:start="961:34" pos:end="963:34"><expr pos:start="961:34" pos:end="961:58"><operator pos:start="961:34" pos:end="961:34">(</operator><operator pos:start="961:35" pos:end="961:35">(</operator><name pos:start="961:36" pos:end="961:46">prefix_insn</name> <operator pos:start="961:48" pos:end="961:49">&gt;&gt;</operator> <literal type="number" pos:start="961:51" pos:end="961:51">4</literal><operator pos:start="961:52" pos:end="961:52">)</operator> <operator pos:start="961:54" pos:end="961:55">==</operator> <literal type="number" pos:start="961:57" pos:end="961:57">2</literal><operator pos:start="961:58" pos:end="961:58">)</operator></expr>

				 ?</condition><then pos:start="963:36" pos:end="963:36"> <expr pos:start="963:36" pos:end="963:36"><literal type="number" pos:start="963:36" pos:end="963:36">0</literal></expr>

				 </then><else pos:start="965:34" pos:end="969:73">: <expr pos:start="965:36" pos:end="969:73"><operator pos:start="965:36" pos:end="965:36">(</operator><ternary pos:start="965:37" pos:end="969:72"><condition pos:start="965:37" pos:end="967:37"><expr pos:start="965:37" pos:end="965:65"><operator pos:start="965:37" pos:end="965:37">(</operator><operator pos:start="965:38" pos:end="965:38">(</operator><name pos:start="965:39" pos:end="965:49">prefix_insn</name> <operator pos:start="965:51" pos:end="965:52">&gt;&gt;</operator> <literal type="number" pos:start="965:54" pos:end="965:54">4</literal><operator pos:start="965:55" pos:end="965:55">)</operator> <operator pos:start="965:57" pos:end="965:57">&amp;</operator> <literal type="number" pos:start="965:59" pos:end="965:59">3</literal><operator pos:start="965:60" pos:end="965:60">)</operator> <operator pos:start="965:62" pos:end="965:63">==</operator> <literal type="number" pos:start="965:65" pos:end="965:65">1</literal></expr>

				    ?</condition><then pos:start="967:39" pos:end="967:72"> <expr pos:start="967:39" pos:end="967:72"><name pos:start="967:39" pos:end="967:72">CRIS_DIS_FLAG_MEM_TARGET2_MEM_WORD</name></expr>

				    </then><else pos:start="969:37" pos:end="969:72">: <expr pos:start="969:39" pos:end="969:72"><name pos:start="969:39" pos:end="969:72">CRIS_DIS_FLAG_MEM_TARGET2_MEM_BYTE</name></expr></else></ternary><operator pos:start="969:73" pos:end="969:73">)</operator></expr></else></ternary><operator pos:start="969:74" pos:end="969:74">)</operator><operator pos:start="969:75" pos:end="969:75">)</operator></expr>;</expr_stmt>

		      </block_content>}</block></else></if_stmt>

		    <break pos:start="973:21" pos:end="973:26">break;</break>



		  <default pos:start="977:19" pos:end="977:26">default:</default>

		    <expr_stmt pos:start="979:21" pos:end="979:72"><expr pos:start="979:21" pos:end="979:71"><call pos:start="979:21" pos:end="979:71">(<modifier pos:start="979:22" pos:end="979:22">*</modifier><name pos:start="979:23" pos:end="979:40"><name pos:start="979:23" pos:end="979:26">info</name><operator pos:start="979:27" pos:end="979:28">-&gt;</operator><name pos:start="979:29" pos:end="979:40">fprintf_func</name></name>) <argument_list pos:start="979:43" pos:end="979:71">(<argument pos:start="979:44" pos:end="979:55"><expr pos:start="979:44" pos:end="979:55"><name pos:start="979:44" pos:end="979:55"><name pos:start="979:44" pos:end="979:47">info</name><operator pos:start="979:48" pos:end="979:49">-&gt;</operator><name pos:start="979:50" pos:end="979:55">stream</name></name></expr></argument>, <argument pos:start="979:58" pos:end="979:70"><expr pos:start="979:58" pos:end="979:70"><literal type="string" pos:start="979:58" pos:end="979:70">"?prefix-bug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  </block_content>}</block></switch>



		<comment type="block" pos:start="985:17" pos:end="985:65">/* To mark that the prefix is used, reset it.  */</comment>

		<expr_stmt pos:start="987:17" pos:end="987:38"><expr pos:start="987:17" pos:end="987:37"><name pos:start="987:17" pos:end="987:30">prefix_opcodep</name> <operator pos:start="987:32" pos:end="987:32">=</operator> <name pos:start="987:34" pos:end="987:37">NULL</name></expr>;</expr_stmt>

	      </block_content>}</block></if>

	    <else pos:start="991:13" pos:end="1009:15">else

	      <block pos:start="993:15" pos:end="1009:15">{<block_content pos:start="995:17" pos:end="1007:30">

		<expr_stmt pos:start="995:17" pos:end="995:74"><expr pos:start="995:17" pos:end="995:73"><name pos:start="995:17" pos:end="995:18">tp</name> <operator pos:start="995:20" pos:end="995:20">=</operator> <call pos:start="995:22" pos:end="995:73"><name pos:start="995:22" pos:end="995:31">format_reg</name> <argument_list pos:start="995:33" pos:end="995:73">(<argument pos:start="995:34" pos:end="995:40"><expr pos:start="995:34" pos:end="995:40"><name pos:start="995:34" pos:end="995:40">disdata</name></expr></argument>, <argument pos:start="995:43" pos:end="995:51"><expr pos:start="995:43" pos:end="995:51"><name pos:start="995:43" pos:end="995:46">insn</name> <operator pos:start="995:48" pos:end="995:48">&amp;</operator> <literal type="number" pos:start="995:50" pos:end="995:51">15</literal></expr></argument>, <argument pos:start="995:54" pos:end="995:55"><expr pos:start="995:54" pos:end="995:55"><name pos:start="995:54" pos:end="995:55">tp</name></expr></argument>, <argument pos:start="995:58" pos:end="995:72"><expr pos:start="995:58" pos:end="995:72"><name pos:start="995:58" pos:end="995:72">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



		<expr_stmt pos:start="999:17" pos:end="999:63"><expr pos:start="999:17" pos:end="999:62"><name pos:start="999:17" pos:end="999:27"><name pos:start="999:17" pos:end="999:20">info</name><operator pos:start="999:21" pos:end="999:22">-&gt;</operator><name pos:start="999:23" pos:end="999:27">flags</name></name> <operator pos:start="999:29" pos:end="999:30">|=</operator> <name pos:start="999:32" pos:end="999:62">CRIS_DIS_FLAG_MEM_TARGET_IS_REG</name></expr>;</expr_stmt>

		<expr_stmt pos:start="1001:17" pos:end="1001:41"><expr pos:start="1001:17" pos:end="1001:40"><name pos:start="1001:17" pos:end="1001:28"><name pos:start="1001:17" pos:end="1001:20">info</name><operator pos:start="1001:21" pos:end="1001:22">-&gt;</operator><name pos:start="1001:23" pos:end="1001:28">target</name></name> <operator pos:start="1001:30" pos:end="1001:30">=</operator> <name pos:start="1001:32" pos:end="1001:35">insn</name> <operator pos:start="1001:37" pos:end="1001:37">&amp;</operator> <literal type="number" pos:start="1001:39" pos:end="1001:40">15</literal></expr>;</expr_stmt>



		<if_stmt pos:start="1005:17" pos:end="1007:30"><if pos:start="1005:17" pos:end="1007:30">if <condition pos:start="1005:20" pos:end="1005:33">(<expr pos:start="1005:21" pos:end="1005:32"><name pos:start="1005:21" pos:end="1005:24">insn</name> <operator pos:start="1005:26" pos:end="1005:26">&amp;</operator> <literal type="number" pos:start="1005:28" pos:end="1005:32">0x400</literal></expr>)</condition><block type="pseudo" pos:start="1007:19" pos:end="1007:30"><block_content pos:start="1007:19" pos:end="1007:30">

		  <expr_stmt pos:start="1007:19" pos:end="1007:30"><expr pos:start="1007:19" pos:end="1007:29"><operator pos:start="1007:19" pos:end="1007:19">*</operator><name pos:start="1007:20" pos:end="1007:21">tp</name><operator pos:start="1007:22" pos:end="1007:23">++</operator> <operator pos:start="1007:25" pos:end="1007:25">=</operator> <literal type="char" pos:start="1007:27" pos:end="1007:29">'+'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	      </block_content>}</block></else></if_stmt>

	    <expr_stmt pos:start="1011:13" pos:end="1011:24"><expr pos:start="1011:13" pos:end="1011:23"><operator pos:start="1011:13" pos:end="1011:13">*</operator><name pos:start="1011:14" pos:end="1011:15">tp</name><operator pos:start="1011:16" pos:end="1011:17">++</operator> <operator pos:start="1011:19" pos:end="1011:19">=</operator> <literal type="char" pos:start="1011:21" pos:end="1011:23">']'</literal></expr>;</expr_stmt>

	  </block_content>}</block></else></if_stmt>

	<break pos:start="1015:9" pos:end="1015:14">break;</break>



      <case pos:start="1019:7" pos:end="1019:15">case <expr pos:start="1019:12" pos:end="1019:14"><literal type="char" pos:start="1019:12" pos:end="1019:14">'x'</literal></expr>:</case>

	<expr_stmt pos:start="1021:9" pos:end="1021:74"><expr pos:start="1021:9" pos:end="1021:73"><name pos:start="1021:9" pos:end="1021:10">tp</name> <operator pos:start="1021:12" pos:end="1021:12">=</operator> <call pos:start="1021:14" pos:end="1021:73"><name pos:start="1021:14" pos:end="1021:23">format_reg</name> <argument_list pos:start="1021:25" pos:end="1021:73">(<argument pos:start="1021:26" pos:end="1021:32"><expr pos:start="1021:26" pos:end="1021:32"><name pos:start="1021:26" pos:end="1021:32">disdata</name></expr></argument>, <argument pos:start="1021:35" pos:end="1021:51"><expr pos:start="1021:35" pos:end="1021:51"><operator pos:start="1021:35" pos:end="1021:35">(</operator><name pos:start="1021:36" pos:end="1021:39">insn</name> <operator pos:start="1021:41" pos:end="1021:42">&gt;&gt;</operator> <literal type="number" pos:start="1021:44" pos:end="1021:45">12</literal><operator pos:start="1021:46" pos:end="1021:46">)</operator> <operator pos:start="1021:48" pos:end="1021:48">&amp;</operator> <literal type="number" pos:start="1021:50" pos:end="1021:51">15</literal></expr></argument>, <argument pos:start="1021:54" pos:end="1021:55"><expr pos:start="1021:54" pos:end="1021:55"><name pos:start="1021:54" pos:end="1021:55">tp</name></expr></argument>, <argument pos:start="1021:58" pos:end="1021:72"><expr pos:start="1021:58" pos:end="1021:72"><name pos:start="1021:58" pos:end="1021:72">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="1023:9" pos:end="1023:20"><expr pos:start="1023:9" pos:end="1023:19"><operator pos:start="1023:9" pos:end="1023:9">*</operator><name pos:start="1023:10" pos:end="1023:11">tp</name><operator pos:start="1023:12" pos:end="1023:13">++</operator> <operator pos:start="1023:15" pos:end="1023:15">=</operator> <literal type="char" pos:start="1023:17" pos:end="1023:19">'.'</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="1025:9" pos:end="1025:43"><expr pos:start="1025:9" pos:end="1025:42"><operator pos:start="1025:9" pos:end="1025:9">*</operator><name pos:start="1025:10" pos:end="1025:11">tp</name><operator pos:start="1025:12" pos:end="1025:13">++</operator> <operator pos:start="1025:15" pos:end="1025:15">=</operator> <name pos:start="1025:17" pos:end="1025:42"><name pos:start="1025:17" pos:end="1025:25">mode_char</name><index pos:start="1025:26" pos:end="1025:42">[<expr pos:start="1025:27" pos:end="1025:41"><operator pos:start="1025:27" pos:end="1025:27">(</operator><name pos:start="1025:28" pos:end="1025:31">insn</name> <operator pos:start="1025:33" pos:end="1025:34">&gt;&gt;</operator> <literal type="number" pos:start="1025:36" pos:end="1025:36">4</literal><operator pos:start="1025:37" pos:end="1025:37">)</operator> <operator pos:start="1025:39" pos:end="1025:39">&amp;</operator> <literal type="number" pos:start="1025:41" pos:end="1025:41">3</literal></expr>]</index></name></expr>;</expr_stmt>

	<break pos:start="1027:9" pos:end="1027:14">break;</break>



      <case pos:start="1031:7" pos:end="1031:15">case <expr pos:start="1031:12" pos:end="1031:14"><literal type="char" pos:start="1031:12" pos:end="1031:14">'I'</literal></expr>:</case>

	<expr_stmt pos:start="1033:9" pos:end="1033:43"><expr pos:start="1033:9" pos:end="1033:42"><name pos:start="1033:9" pos:end="1033:10">tp</name> <operator pos:start="1033:12" pos:end="1033:12">=</operator> <call pos:start="1033:14" pos:end="1033:42"><name pos:start="1033:14" pos:end="1033:23">format_dec</name> <argument_list pos:start="1033:25" pos:end="1033:42">(<argument pos:start="1033:26" pos:end="1033:34"><expr pos:start="1033:26" pos:end="1033:34"><name pos:start="1033:26" pos:end="1033:29">insn</name> <operator pos:start="1033:31" pos:end="1033:31">&amp;</operator> <literal type="number" pos:start="1033:33" pos:end="1033:34">63</literal></expr></argument>, <argument pos:start="1033:37" pos:end="1033:38"><expr pos:start="1033:37" pos:end="1033:38"><name pos:start="1033:37" pos:end="1033:38">tp</name></expr></argument>, <argument pos:start="1033:41" pos:end="1033:41"><expr pos:start="1033:41" pos:end="1033:41"><literal type="number" pos:start="1033:41" pos:end="1033:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="1035:9" pos:end="1035:14">break;</break>



      <case pos:start="1039:7" pos:end="1039:15">case <expr pos:start="1039:12" pos:end="1039:14"><literal type="char" pos:start="1039:12" pos:end="1039:14">'b'</literal></expr>:</case>

	<block pos:start="1041:9" pos:end="1083:9">{<block_content pos:start="1043:11" pos:end="1081:62">

	  <decl_stmt pos:start="1043:11" pos:end="1043:50"><decl pos:start="1043:11" pos:end="1043:49"><type pos:start="1043:11" pos:end="1043:13"><name pos:start="1043:11" pos:end="1043:13">int</name></type> <name pos:start="1043:15" pos:end="1043:19">where</name> <init pos:start="1043:21" pos:end="1043:49">= <expr pos:start="1043:23" pos:end="1043:49"><name pos:start="1043:23" pos:end="1043:31"><name pos:start="1043:23" pos:end="1043:28">buffer</name><index pos:start="1043:29" pos:end="1043:31">[<expr pos:start="1043:30" pos:end="1043:30"><literal type="number" pos:start="1043:30" pos:end="1043:30">2</literal></expr>]</index></name> <operator pos:start="1043:33" pos:end="1043:33">+</operator> <name pos:start="1043:35" pos:end="1043:43"><name pos:start="1043:35" pos:end="1043:40">buffer</name><index pos:start="1043:41" pos:end="1043:43">[<expr pos:start="1043:42" pos:end="1043:42"><literal type="number" pos:start="1043:42" pos:end="1043:42">3</literal></expr>]</index></name> <operator pos:start="1043:45" pos:end="1043:45">*</operator> <literal type="number" pos:start="1043:47" pos:end="1043:49">256</literal></expr></init></decl>;</decl_stmt>



	  <if_stmt pos:start="1047:11" pos:end="1049:27"><if pos:start="1047:11" pos:end="1049:27">if <condition pos:start="1047:14" pos:end="1047:28">(<expr pos:start="1047:15" pos:end="1047:27"><name pos:start="1047:15" pos:end="1047:19">where</name> <operator pos:start="1047:21" pos:end="1047:21">&gt;</operator> <literal type="number" pos:start="1047:23" pos:end="1047:27">32767</literal></expr>)</condition><block type="pseudo" pos:start="1049:13" pos:end="1049:27"><block_content pos:start="1049:13" pos:end="1049:27">

	    <expr_stmt pos:start="1049:13" pos:end="1049:27"><expr pos:start="1049:13" pos:end="1049:26"><name pos:start="1049:13" pos:end="1049:17">where</name> <operator pos:start="1049:19" pos:end="1049:20">-=</operator> <literal type="number" pos:start="1049:22" pos:end="1049:26">65536</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



	  <expr_stmt pos:start="1053:11" pos:end="1053:71"><expr pos:start="1053:11" pos:end="1053:70"><name pos:start="1053:11" pos:end="1053:15">where</name> <operator pos:start="1053:17" pos:end="1053:18">+=</operator> <name pos:start="1053:20" pos:end="1053:23">addr</name> <operator pos:start="1053:25" pos:end="1053:25">+</operator> <operator pos:start="1053:27" pos:end="1053:27">(</operator><ternary pos:start="1053:28" pos:end="1053:69"><condition pos:start="1053:28" pos:end="1053:63"><expr pos:start="1053:28" pos:end="1053:61"><operator pos:start="1053:28" pos:end="1053:28">(</operator><name pos:start="1053:29" pos:end="1053:44"><name pos:start="1053:29" pos:end="1053:35">disdata</name><operator pos:start="1053:36" pos:end="1053:37">-&gt;</operator><name pos:start="1053:38" pos:end="1053:44">distype</name></name> <operator pos:start="1053:46" pos:end="1053:47">==</operator> <name pos:start="1053:49" pos:end="1053:60">cris_dis_v32</name><operator pos:start="1053:61" pos:end="1053:61">)</operator></expr> ?</condition><then pos:start="1053:65" pos:end="1053:65"> <expr pos:start="1053:65" pos:end="1053:65"><literal type="number" pos:start="1053:65" pos:end="1053:65">0</literal></expr> </then><else pos:start="1053:67" pos:end="1053:69">: <expr pos:start="1053:69" pos:end="1053:69"><literal type="number" pos:start="1053:69" pos:end="1053:69">4</literal></expr></else></ternary><operator pos:start="1053:70" pos:end="1053:70">)</operator></expr>;</expr_stmt>



	  <if_stmt pos:start="1057:11" pos:end="1063:45"><if pos:start="1057:11" pos:end="1059:41">if <condition pos:start="1057:14" pos:end="1057:40">(<expr pos:start="1057:15" pos:end="1057:39"><name pos:start="1057:15" pos:end="1057:18">insn</name> <operator pos:start="1057:20" pos:end="1057:21">==</operator> <name pos:start="1057:23" pos:end="1057:39">BA_PC_INCR_OPCODE</name></expr>)</condition><block type="pseudo" pos:start="1059:13" pos:end="1059:41"><block_content pos:start="1059:13" pos:end="1059:41">

	    <expr_stmt pos:start="1059:13" pos:end="1059:41"><expr pos:start="1059:13" pos:end="1059:40"><name pos:start="1059:13" pos:end="1059:27"><name pos:start="1059:13" pos:end="1059:16">info</name><operator pos:start="1059:17" pos:end="1059:18">-&gt;</operator><name pos:start="1059:19" pos:end="1059:27">insn_type</name></name> <operator pos:start="1059:29" pos:end="1059:29">=</operator> <name pos:start="1059:31" pos:end="1059:40">dis_branch</name></expr>;</expr_stmt></block_content></block></if>

	  <else pos:start="1061:11" pos:end="1063:45">else<block type="pseudo" pos:start="1063:13" pos:end="1063:45"><block_content pos:start="1063:13" pos:end="1063:45">

	    <expr_stmt pos:start="1063:13" pos:end="1063:45"><expr pos:start="1063:13" pos:end="1063:44"><name pos:start="1063:13" pos:end="1063:27"><name pos:start="1063:13" pos:end="1063:16">info</name><operator pos:start="1063:17" pos:end="1063:18">-&gt;</operator><name pos:start="1063:19" pos:end="1063:27">insn_type</name></name> <operator pos:start="1063:29" pos:end="1063:29">=</operator> <name pos:start="1063:31" pos:end="1063:44">dis_condbranch</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



	  <expr_stmt pos:start="1067:11" pos:end="1067:41"><expr pos:start="1067:11" pos:end="1067:40"><name pos:start="1067:11" pos:end="1067:22"><name pos:start="1067:11" pos:end="1067:14">info</name><operator pos:start="1067:15" pos:end="1067:16">-&gt;</operator><name pos:start="1067:17" pos:end="1067:22">target</name></name> <operator pos:start="1067:24" pos:end="1067:24">=</operator> <operator pos:start="1067:26" pos:end="1067:26">(</operator><name pos:start="1067:27" pos:end="1067:33">bfd_vma</name><operator pos:start="1067:34" pos:end="1067:34">)</operator> <name pos:start="1067:36" pos:end="1067:40">where</name></expr>;</expr_stmt>



	  <expr_stmt pos:start="1071:11" pos:end="1071:18"><expr pos:start="1071:11" pos:end="1071:17"><operator pos:start="1071:11" pos:end="1071:11">*</operator><name pos:start="1071:12" pos:end="1071:13">tp</name> <operator pos:start="1071:15" pos:end="1071:15">=</operator> <literal type="number" pos:start="1071:17" pos:end="1071:17">0</literal></expr>;</expr_stmt>

	  <expr_stmt pos:start="1073:11" pos:end="1073:20"><expr pos:start="1073:11" pos:end="1073:19"><name pos:start="1073:11" pos:end="1073:12">tp</name> <operator pos:start="1073:14" pos:end="1073:14">=</operator> <name pos:start="1073:16" pos:end="1073:19">temp</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="1075:11" pos:end="1077:68"><expr pos:start="1075:11" pos:end="1077:67"><call pos:start="1075:11" pos:end="1077:67">(<modifier pos:start="1075:12" pos:end="1075:12">*</modifier><name pos:start="1075:13" pos:end="1075:30"><name pos:start="1075:13" pos:end="1075:16">info</name><operator pos:start="1075:17" pos:end="1075:18">-&gt;</operator><name pos:start="1075:19" pos:end="1075:30">fprintf_func</name></name>) <argument_list pos:start="1075:33" pos:end="1077:67">(<argument pos:start="1075:34" pos:end="1075:45"><expr pos:start="1075:34" pos:end="1075:45"><name pos:start="1075:34" pos:end="1075:45"><name pos:start="1075:34" pos:end="1075:37">info</name><operator pos:start="1075:38" pos:end="1075:39">-&gt;</operator><name pos:start="1075:40" pos:end="1075:45">stream</name></name></expr></argument>, <argument pos:start="1075:48" pos:end="1075:54"><expr pos:start="1075:48" pos:end="1075:54"><literal type="string" pos:start="1075:48" pos:end="1075:54">"%s%s "</literal></expr></argument>,

				 <argument pos:start="1077:34" pos:end="1077:37"><expr pos:start="1077:34" pos:end="1077:37"><name pos:start="1077:34" pos:end="1077:37">temp</name></expr></argument>, <argument pos:start="1077:40" pos:end="1077:66"><expr pos:start="1077:40" pos:end="1077:66"><name pos:start="1077:40" pos:end="1077:66"><name pos:start="1077:40" pos:end="1077:54">cris_cc_strings</name><index pos:start="1077:55" pos:end="1077:66">[<expr pos:start="1077:56" pos:end="1077:65"><name pos:start="1077:56" pos:end="1077:59">insn</name> <operator pos:start="1077:61" pos:end="1077:62">&gt;&gt;</operator> <literal type="number" pos:start="1077:64" pos:end="1077:65">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	  <expr_stmt pos:start="1081:11" pos:end="1081:62"><expr pos:start="1081:11" pos:end="1081:61"><call pos:start="1081:11" pos:end="1081:61">(<modifier pos:start="1081:12" pos:end="1081:12">*</modifier><name pos:start="1081:13" pos:end="1081:36"><name pos:start="1081:13" pos:end="1081:16">info</name><operator pos:start="1081:17" pos:end="1081:18">-&gt;</operator><name pos:start="1081:19" pos:end="1081:36">print_address_func</name></name>) <argument_list pos:start="1081:39" pos:end="1081:61">(<argument pos:start="1081:40" pos:end="1081:54"><expr pos:start="1081:40" pos:end="1081:54"><operator pos:start="1081:40" pos:end="1081:40">(</operator><name pos:start="1081:41" pos:end="1081:47">bfd_vma</name><operator pos:start="1081:48" pos:end="1081:48">)</operator> <name pos:start="1081:50" pos:end="1081:54">where</name></expr></argument>, <argument pos:start="1081:57" pos:end="1081:60"><expr pos:start="1081:57" pos:end="1081:60"><name pos:start="1081:57" pos:end="1081:60">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block>

      <break pos:start="1085:7" pos:end="1085:12">break;</break>



    <case pos:start="1089:5" pos:end="1089:13">case <expr pos:start="1089:10" pos:end="1089:12"><literal type="char" pos:start="1089:10" pos:end="1089:12">'c'</literal></expr>:</case>

      <expr_stmt pos:start="1091:7" pos:end="1091:41"><expr pos:start="1091:7" pos:end="1091:40"><name pos:start="1091:7" pos:end="1091:8">tp</name> <operator pos:start="1091:10" pos:end="1091:10">=</operator> <call pos:start="1091:12" pos:end="1091:40"><name pos:start="1091:12" pos:end="1091:21">format_dec</name> <argument_list pos:start="1091:23" pos:end="1091:40">(<argument pos:start="1091:24" pos:end="1091:32"><expr pos:start="1091:24" pos:end="1091:32"><name pos:start="1091:24" pos:end="1091:27">insn</name> <operator pos:start="1091:29" pos:end="1091:29">&amp;</operator> <literal type="number" pos:start="1091:31" pos:end="1091:32">31</literal></expr></argument>, <argument pos:start="1091:35" pos:end="1091:36"><expr pos:start="1091:35" pos:end="1091:36"><name pos:start="1091:35" pos:end="1091:36">tp</name></expr></argument>, <argument pos:start="1091:39" pos:end="1091:39"><expr pos:start="1091:39" pos:end="1091:39"><literal type="number" pos:start="1091:39" pos:end="1091:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="1093:7" pos:end="1093:12">break;</break>



    <case pos:start="1097:5" pos:end="1097:13">case <expr pos:start="1097:10" pos:end="1097:12"><literal type="char" pos:start="1097:10" pos:end="1097:12">'C'</literal></expr>:</case>

      <expr_stmt pos:start="1099:7" pos:end="1099:41"><expr pos:start="1099:7" pos:end="1099:40"><name pos:start="1099:7" pos:end="1099:8">tp</name> <operator pos:start="1099:10" pos:end="1099:10">=</operator> <call pos:start="1099:12" pos:end="1099:40"><name pos:start="1099:12" pos:end="1099:21">format_dec</name> <argument_list pos:start="1099:23" pos:end="1099:40">(<argument pos:start="1099:24" pos:end="1099:32"><expr pos:start="1099:24" pos:end="1099:32"><name pos:start="1099:24" pos:end="1099:27">insn</name> <operator pos:start="1099:29" pos:end="1099:29">&amp;</operator> <literal type="number" pos:start="1099:31" pos:end="1099:32">15</literal></expr></argument>, <argument pos:start="1099:35" pos:end="1099:36"><expr pos:start="1099:35" pos:end="1099:36"><name pos:start="1099:35" pos:end="1099:36">tp</name></expr></argument>, <argument pos:start="1099:39" pos:end="1099:39"><expr pos:start="1099:39" pos:end="1099:39"><literal type="number" pos:start="1099:39" pos:end="1099:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="1101:7" pos:end="1101:12">break;</break>



    <case pos:start="1105:5" pos:end="1105:13">case <expr pos:start="1105:10" pos:end="1105:12"><literal type="char" pos:start="1105:10" pos:end="1105:12">'o'</literal></expr>:</case>

      <block pos:start="1107:7" pos:end="1143:7">{<block_content pos:start="1109:9" pos:end="1141:51">

	<decl_stmt pos:start="1109:9" pos:end="1109:34"><decl pos:start="1109:9" pos:end="1109:33"><type pos:start="1109:9" pos:end="1109:12"><name pos:start="1109:9" pos:end="1109:12">long</name></type> <name pos:start="1109:14" pos:end="1109:19">offset</name> <init pos:start="1109:21" pos:end="1109:33">= <expr pos:start="1109:23" pos:end="1109:33"><name pos:start="1109:23" pos:end="1109:26">insn</name> <operator pos:start="1109:28" pos:end="1109:28">&amp;</operator> <literal type="number" pos:start="1109:30" pos:end="1109:33">0xfe</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="1111:9" pos:end="1111:23"><decl pos:start="1111:9" pos:end="1111:22"><type pos:start="1111:9" pos:end="1111:15"><name pos:start="1111:9" pos:end="1111:15">bfd_vma</name></type> <name pos:start="1111:17" pos:end="1111:22">target</name></decl>;</decl_stmt>



	<if_stmt pos:start="1115:9" pos:end="1117:26"><if pos:start="1115:9" pos:end="1117:26">if <condition pos:start="1115:12" pos:end="1115:21">(<expr pos:start="1115:13" pos:end="1115:20"><name pos:start="1115:13" pos:end="1115:16">insn</name> <operator pos:start="1115:18" pos:end="1115:18">&amp;</operator> <literal type="number" pos:start="1115:20" pos:end="1115:20">1</literal></expr>)</condition><block type="pseudo" pos:start="1117:11" pos:end="1117:26"><block_content pos:start="1117:11" pos:end="1117:26">

	  <expr_stmt pos:start="1117:11" pos:end="1117:26"><expr pos:start="1117:11" pos:end="1117:25"><name pos:start="1117:11" pos:end="1117:16">offset</name> <operator pos:start="1117:18" pos:end="1117:19">|=</operator> <operator pos:start="1117:21" pos:end="1117:21">~</operator><literal type="number" pos:start="1117:22" pos:end="1117:25">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<if_stmt pos:start="1121:9" pos:end="1127:43"><if pos:start="1121:9" pos:end="1123:39">if <condition pos:start="1121:12" pos:end="1121:46">(<expr pos:start="1121:13" pos:end="1121:45"><name pos:start="1121:13" pos:end="1121:26"><name pos:start="1121:13" pos:end="1121:19">opcodep</name><operator pos:start="1121:20" pos:end="1121:21">-&gt;</operator><name pos:start="1121:22" pos:end="1121:26">match</name></name> <operator pos:start="1121:28" pos:end="1121:29">==</operator> <name pos:start="1121:31" pos:end="1121:45">BA_QUICK_OPCODE</name></expr>)</condition><block type="pseudo" pos:start="1123:11" pos:end="1123:39"><block_content pos:start="1123:11" pos:end="1123:39">

	  <expr_stmt pos:start="1123:11" pos:end="1123:39"><expr pos:start="1123:11" pos:end="1123:38"><name pos:start="1123:11" pos:end="1123:25"><name pos:start="1123:11" pos:end="1123:14">info</name><operator pos:start="1123:15" pos:end="1123:16">-&gt;</operator><name pos:start="1123:17" pos:end="1123:25">insn_type</name></name> <operator pos:start="1123:27" pos:end="1123:27">=</operator> <name pos:start="1123:29" pos:end="1123:38">dis_branch</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="1125:9" pos:end="1127:43">else<block type="pseudo" pos:start="1127:11" pos:end="1127:43"><block_content pos:start="1127:11" pos:end="1127:43">

	  <expr_stmt pos:start="1127:11" pos:end="1127:43"><expr pos:start="1127:11" pos:end="1127:42"><name pos:start="1127:11" pos:end="1127:25"><name pos:start="1127:11" pos:end="1127:14">info</name><operator pos:start="1127:15" pos:end="1127:16">-&gt;</operator><name pos:start="1127:17" pos:end="1127:25">insn_type</name></name> <operator pos:start="1127:27" pos:end="1127:27">=</operator> <name pos:start="1127:29" pos:end="1127:42">dis_condbranch</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<expr_stmt pos:start="1131:9" pos:end="1131:78"><expr pos:start="1131:9" pos:end="1131:77"><name pos:start="1131:9" pos:end="1131:14">target</name> <operator pos:start="1131:16" pos:end="1131:16">=</operator> <name pos:start="1131:18" pos:end="1131:21">addr</name> <operator pos:start="1131:23" pos:end="1131:23">+</operator> <operator pos:start="1131:25" pos:end="1131:25">(</operator><ternary pos:start="1131:26" pos:end="1131:67"><condition pos:start="1131:26" pos:end="1131:61"><expr pos:start="1131:26" pos:end="1131:59"><operator pos:start="1131:26" pos:end="1131:26">(</operator><name pos:start="1131:27" pos:end="1131:42"><name pos:start="1131:27" pos:end="1131:33">disdata</name><operator pos:start="1131:34" pos:end="1131:35">-&gt;</operator><name pos:start="1131:36" pos:end="1131:42">distype</name></name> <operator pos:start="1131:44" pos:end="1131:45">==</operator> <name pos:start="1131:47" pos:end="1131:58">cris_dis_v32</name><operator pos:start="1131:59" pos:end="1131:59">)</operator></expr> ?</condition><then pos:start="1131:63" pos:end="1131:63"> <expr pos:start="1131:63" pos:end="1131:63"><literal type="number" pos:start="1131:63" pos:end="1131:63">0</literal></expr> </then><else pos:start="1131:65" pos:end="1131:67">: <expr pos:start="1131:67" pos:end="1131:67"><literal type="number" pos:start="1131:67" pos:end="1131:67">2</literal></expr></else></ternary><operator pos:start="1131:68" pos:end="1131:68">)</operator> <operator pos:start="1131:70" pos:end="1131:70">+</operator> <name pos:start="1131:72" pos:end="1131:77">offset</name></expr>;</expr_stmt>

	<expr_stmt pos:start="1133:9" pos:end="1133:30"><expr pos:start="1133:9" pos:end="1133:29"><name pos:start="1133:9" pos:end="1133:20"><name pos:start="1133:9" pos:end="1133:12">info</name><operator pos:start="1133:13" pos:end="1133:14">-&gt;</operator><name pos:start="1133:15" pos:end="1133:20">target</name></name> <operator pos:start="1133:22" pos:end="1133:22">=</operator> <name pos:start="1133:24" pos:end="1133:29">target</name></expr>;</expr_stmt>

	<expr_stmt pos:start="1135:9" pos:end="1135:16"><expr pos:start="1135:9" pos:end="1135:15"><operator pos:start="1135:9" pos:end="1135:9">*</operator><name pos:start="1135:10" pos:end="1135:11">tp</name> <operator pos:start="1135:13" pos:end="1135:13">=</operator> <literal type="number" pos:start="1135:15" pos:end="1135:15">0</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="1137:9" pos:end="1137:18"><expr pos:start="1137:9" pos:end="1137:17"><name pos:start="1137:9" pos:end="1137:10">tp</name> <operator pos:start="1137:12" pos:end="1137:12">=</operator> <name pos:start="1137:14" pos:end="1137:17">temp</name></expr>;</expr_stmt>

	<expr_stmt pos:start="1139:9" pos:end="1139:57"><expr pos:start="1139:9" pos:end="1139:56"><call pos:start="1139:9" pos:end="1139:56">(<modifier pos:start="1139:10" pos:end="1139:10">*</modifier><name pos:start="1139:11" pos:end="1139:28"><name pos:start="1139:11" pos:end="1139:14">info</name><operator pos:start="1139:15" pos:end="1139:16">-&gt;</operator><name pos:start="1139:17" pos:end="1139:28">fprintf_func</name></name>) <argument_list pos:start="1139:31" pos:end="1139:56">(<argument pos:start="1139:32" pos:end="1139:43"><expr pos:start="1139:32" pos:end="1139:43"><name pos:start="1139:32" pos:end="1139:43"><name pos:start="1139:32" pos:end="1139:35">info</name><operator pos:start="1139:36" pos:end="1139:37">-&gt;</operator><name pos:start="1139:38" pos:end="1139:43">stream</name></name></expr></argument>, <argument pos:start="1139:46" pos:end="1139:49"><expr pos:start="1139:46" pos:end="1139:49"><literal type="string" pos:start="1139:46" pos:end="1139:49">"%s"</literal></expr></argument>, <argument pos:start="1139:52" pos:end="1139:55"><expr pos:start="1139:52" pos:end="1139:55"><name pos:start="1139:52" pos:end="1139:55">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="1141:9" pos:end="1141:51"><expr pos:start="1141:9" pos:end="1141:50"><call pos:start="1141:9" pos:end="1141:50">(<modifier pos:start="1141:10" pos:end="1141:10">*</modifier><name pos:start="1141:11" pos:end="1141:34"><name pos:start="1141:11" pos:end="1141:14">info</name><operator pos:start="1141:15" pos:end="1141:16">-&gt;</operator><name pos:start="1141:17" pos:end="1141:34">print_address_func</name></name>) <argument_list pos:start="1141:37" pos:end="1141:50">(<argument pos:start="1141:38" pos:end="1141:43"><expr pos:start="1141:38" pos:end="1141:43"><name pos:start="1141:38" pos:end="1141:43">target</name></expr></argument>, <argument pos:start="1141:46" pos:end="1141:49"><expr pos:start="1141:46" pos:end="1141:49"><name pos:start="1141:46" pos:end="1141:49">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block>

      <break pos:start="1145:7" pos:end="1145:12">break;</break>



    <case pos:start="1149:5" pos:end="1149:13">case <expr pos:start="1149:10" pos:end="1149:12"><literal type="char" pos:start="1149:10" pos:end="1149:12">'Q'</literal></expr>:</case>

    <case pos:start="1151:5" pos:end="1151:13">case <expr pos:start="1151:10" pos:end="1151:12"><literal type="char" pos:start="1151:10" pos:end="1151:12">'O'</literal></expr>:</case>

      <block pos:start="1153:7" pos:end="1171:7">{<block_content pos:start="1155:9" pos:end="1169:74">

	<decl_stmt pos:start="1155:9" pos:end="1155:32"><decl pos:start="1155:9" pos:end="1155:31"><type pos:start="1155:9" pos:end="1155:12"><name pos:start="1155:9" pos:end="1155:12">long</name></type> <name pos:start="1155:14" pos:end="1155:19">number</name> <init pos:start="1155:21" pos:end="1155:31">= <expr pos:start="1155:23" pos:end="1155:31"><name pos:start="1155:23" pos:end="1155:31"><name pos:start="1155:23" pos:end="1155:28">buffer</name><index pos:start="1155:29" pos:end="1155:31">[<expr pos:start="1155:30" pos:end="1155:30"><literal type="number" pos:start="1155:30" pos:end="1155:30">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



	<if_stmt pos:start="1159:9" pos:end="1161:32"><if pos:start="1159:9" pos:end="1161:32">if <condition pos:start="1159:12" pos:end="1159:25">(<expr pos:start="1159:13" pos:end="1159:24"><name pos:start="1159:13" pos:end="1159:18">number</name> <operator pos:start="1159:20" pos:end="1159:20">&gt;</operator> <literal type="number" pos:start="1159:22" pos:end="1159:24">127</literal></expr>)</condition><block type="pseudo" pos:start="1161:11" pos:end="1161:32"><block_content pos:start="1161:11" pos:end="1161:32">

	  <expr_stmt pos:start="1161:11" pos:end="1161:32"><expr pos:start="1161:11" pos:end="1161:31"><name pos:start="1161:11" pos:end="1161:16">number</name> <operator pos:start="1161:18" pos:end="1161:18">=</operator> <name pos:start="1161:20" pos:end="1161:25">number</name> <operator pos:start="1161:27" pos:end="1161:27">-</operator> <literal type="number" pos:start="1161:29" pos:end="1161:31">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<expr_stmt pos:start="1165:9" pos:end="1165:40"><expr pos:start="1165:9" pos:end="1165:39"><name pos:start="1165:9" pos:end="1165:10">tp</name> <operator pos:start="1165:12" pos:end="1165:12">=</operator> <call pos:start="1165:14" pos:end="1165:39"><name pos:start="1165:14" pos:end="1165:23">format_dec</name> <argument_list pos:start="1165:25" pos:end="1165:39">(<argument pos:start="1165:26" pos:end="1165:31"><expr pos:start="1165:26" pos:end="1165:31"><name pos:start="1165:26" pos:end="1165:31">number</name></expr></argument>, <argument pos:start="1165:34" pos:end="1165:35"><expr pos:start="1165:34" pos:end="1165:35"><name pos:start="1165:34" pos:end="1165:35">tp</name></expr></argument>, <argument pos:start="1165:38" pos:end="1165:38"><expr pos:start="1165:38" pos:end="1165:38"><literal type="number" pos:start="1165:38" pos:end="1165:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="1167:9" pos:end="1167:20"><expr pos:start="1167:9" pos:end="1167:19"><operator pos:start="1167:9" pos:end="1167:9">*</operator><name pos:start="1167:10" pos:end="1167:11">tp</name><operator pos:start="1167:12" pos:end="1167:13">++</operator> <operator pos:start="1167:15" pos:end="1167:15">=</operator> <literal type="char" pos:start="1167:17" pos:end="1167:19">','</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="1169:9" pos:end="1169:74"><expr pos:start="1169:9" pos:end="1169:73"><name pos:start="1169:9" pos:end="1169:10">tp</name> <operator pos:start="1169:12" pos:end="1169:12">=</operator> <call pos:start="1169:14" pos:end="1169:73"><name pos:start="1169:14" pos:end="1169:23">format_reg</name> <argument_list pos:start="1169:25" pos:end="1169:73">(<argument pos:start="1169:26" pos:end="1169:32"><expr pos:start="1169:26" pos:end="1169:32"><name pos:start="1169:26" pos:end="1169:32">disdata</name></expr></argument>, <argument pos:start="1169:35" pos:end="1169:51"><expr pos:start="1169:35" pos:end="1169:51"><operator pos:start="1169:35" pos:end="1169:35">(</operator><name pos:start="1169:36" pos:end="1169:39">insn</name> <operator pos:start="1169:41" pos:end="1169:42">&gt;&gt;</operator> <literal type="number" pos:start="1169:44" pos:end="1169:45">12</literal><operator pos:start="1169:46" pos:end="1169:46">)</operator> <operator pos:start="1169:48" pos:end="1169:48">&amp;</operator> <literal type="number" pos:start="1169:50" pos:end="1169:51">15</literal></expr></argument>, <argument pos:start="1169:54" pos:end="1169:55"><expr pos:start="1169:54" pos:end="1169:55"><name pos:start="1169:54" pos:end="1169:55">tp</name></expr></argument>, <argument pos:start="1169:58" pos:end="1169:72"><expr pos:start="1169:58" pos:end="1169:72"><name pos:start="1169:58" pos:end="1169:72">with_reg_prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block>

      <break pos:start="1173:7" pos:end="1173:12">break;</break>



    <case pos:start="1177:5" pos:end="1177:13">case <expr pos:start="1177:10" pos:end="1177:12"><literal type="char" pos:start="1177:10" pos:end="1177:12">'f'</literal></expr>:</case>

      <expr_stmt pos:start="1179:7" pos:end="1179:43"><expr pos:start="1179:7" pos:end="1179:42"><name pos:start="1179:7" pos:end="1179:8">tp</name> <operator pos:start="1179:10" pos:end="1179:10">=</operator> <call pos:start="1179:12" pos:end="1179:42"><name pos:start="1179:12" pos:end="1179:22">print_flags</name> <argument_list pos:start="1179:24" pos:end="1179:42">(<argument pos:start="1179:25" pos:end="1179:31"><expr pos:start="1179:25" pos:end="1179:31"><name pos:start="1179:25" pos:end="1179:31">disdata</name></expr></argument>, <argument pos:start="1179:34" pos:end="1179:37"><expr pos:start="1179:34" pos:end="1179:37"><name pos:start="1179:34" pos:end="1179:37">insn</name></expr></argument>, <argument pos:start="1179:40" pos:end="1179:41"><expr pos:start="1179:40" pos:end="1179:41"><name pos:start="1179:40" pos:end="1179:41">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="1181:7" pos:end="1181:12">break;</break>



    <case pos:start="1185:5" pos:end="1185:13">case <expr pos:start="1185:10" pos:end="1185:12"><literal type="char" pos:start="1185:10" pos:end="1185:12">'i'</literal></expr>:</case>

      <expr_stmt pos:start="1187:7" pos:end="1187:76"><expr pos:start="1187:7" pos:end="1187:75"><name pos:start="1187:7" pos:end="1187:8">tp</name> <operator pos:start="1187:10" pos:end="1187:10">=</operator> <call pos:start="1187:12" pos:end="1187:75"><name pos:start="1187:12" pos:end="1187:21">format_dec</name> <argument_list pos:start="1187:23" pos:end="1187:75">(<argument pos:start="1187:24" pos:end="1187:67"><expr pos:start="1187:24" pos:end="1187:67"><ternary pos:start="1187:24" pos:end="1187:67"><condition pos:start="1187:24" pos:end="1187:36"><expr pos:start="1187:24" pos:end="1187:34"><operator pos:start="1187:24" pos:end="1187:24">(</operator><name pos:start="1187:25" pos:end="1187:28">insn</name> <operator pos:start="1187:30" pos:end="1187:30">&amp;</operator> <literal type="number" pos:start="1187:32" pos:end="1187:33">32</literal><operator pos:start="1187:34" pos:end="1187:34">)</operator></expr> ?</condition><then pos:start="1187:38" pos:end="1187:55"> <expr pos:start="1187:38" pos:end="1187:55"><operator pos:start="1187:38" pos:end="1187:38">(</operator><name pos:start="1187:39" pos:end="1187:42">insn</name> <operator pos:start="1187:44" pos:end="1187:44">&amp;</operator> <literal type="number" pos:start="1187:46" pos:end="1187:47">31</literal><operator pos:start="1187:48" pos:end="1187:48">)</operator> <operator pos:start="1187:50" pos:end="1187:50">|</operator> <operator pos:start="1187:52" pos:end="1187:52">~</operator><literal type="number" pos:start="1187:53" pos:end="1187:55">31L</literal></expr> </then><else pos:start="1187:57" pos:end="1187:67">: <expr pos:start="1187:59" pos:end="1187:67"><name pos:start="1187:59" pos:end="1187:62">insn</name> <operator pos:start="1187:64" pos:end="1187:64">&amp;</operator> <literal type="number" pos:start="1187:66" pos:end="1187:67">31</literal></expr></else></ternary></expr></argument>, <argument pos:start="1187:70" pos:end="1187:71"><expr pos:start="1187:70" pos:end="1187:71"><name pos:start="1187:70" pos:end="1187:71">tp</name></expr></argument>, <argument pos:start="1187:74" pos:end="1187:74"><expr pos:start="1187:74" pos:end="1187:74"><literal type="number" pos:start="1187:74" pos:end="1187:74">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="1189:7" pos:end="1189:12">break;</break>



    <case pos:start="1193:5" pos:end="1193:13">case <expr pos:start="1193:10" pos:end="1193:12"><literal type="char" pos:start="1193:10" pos:end="1193:12">'P'</literal></expr>:</case>

      <block pos:start="1195:7" pos:end="1223:7">{<block_content pos:start="1197:9" pos:end="1221:11">

	<decl_stmt pos:start="1197:9" pos:end="1199:64"><decl pos:start="1197:9" pos:end="1199:63"><type pos:start="1197:9" pos:end="1197:36"><specifier pos:start="1197:9" pos:end="1197:13">const</specifier> <name pos:start="1197:15" pos:end="1197:34"><name pos:start="1197:15" pos:end="1197:20">struct</name> <name pos:start="1197:22" pos:end="1197:34">cris_spec_reg</name></name> <modifier pos:start="1197:36" pos:end="1197:36">*</modifier></type><name pos:start="1197:37" pos:end="1197:41">sregp</name>

	  <init pos:start="1199:11" pos:end="1199:63">= <expr pos:start="1199:13" pos:end="1199:63"><call pos:start="1199:13" pos:end="1199:63"><name pos:start="1199:13" pos:end="1199:25">spec_reg_info</name> <argument_list pos:start="1199:27" pos:end="1199:63">(<argument pos:start="1199:28" pos:end="1199:44"><expr pos:start="1199:28" pos:end="1199:44"><operator pos:start="1199:28" pos:end="1199:28">(</operator><name pos:start="1199:29" pos:end="1199:32">insn</name> <operator pos:start="1199:34" pos:end="1199:35">&gt;&gt;</operator> <literal type="number" pos:start="1199:37" pos:end="1199:38">12</literal><operator pos:start="1199:39" pos:end="1199:39">)</operator> <operator pos:start="1199:41" pos:end="1199:41">&amp;</operator> <literal type="number" pos:start="1199:43" pos:end="1199:44">15</literal></expr></argument>, <argument pos:start="1199:47" pos:end="1199:62"><expr pos:start="1199:47" pos:end="1199:62"><name pos:start="1199:47" pos:end="1199:62"><name pos:start="1199:47" pos:end="1199:53">disdata</name><operator pos:start="1199:54" pos:end="1199:55">-&gt;</operator><name pos:start="1199:56" pos:end="1199:62">distype</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



	<if_stmt pos:start="1203:9" pos:end="1221:11"><if pos:start="1203:9" pos:end="1207:22">if <condition pos:start="1203:12" pos:end="1203:32">(<expr pos:start="1203:13" pos:end="1203:31"><name pos:start="1203:13" pos:end="1203:23"><name pos:start="1203:13" pos:end="1203:17">sregp</name><operator pos:start="1203:18" pos:end="1203:19">-&gt;</operator><name pos:start="1203:20" pos:end="1203:23">name</name></name> <operator pos:start="1203:25" pos:end="1203:26">==</operator> <name pos:start="1203:28" pos:end="1203:31">NULL</name></expr>)</condition><block type="pseudo" pos:start="1207:11" pos:end="1207:22"><block_content pos:start="1207:11" pos:end="1207:22">

	  <comment type="block" pos:start="1205:11" pos:end="1205:64">/* Should have been caught as a non-match earlier.  */</comment>

	  <expr_stmt pos:start="1207:11" pos:end="1207:22"><expr pos:start="1207:11" pos:end="1207:21"><operator pos:start="1207:11" pos:end="1207:11">*</operator><name pos:start="1207:12" pos:end="1207:13">tp</name><operator pos:start="1207:14" pos:end="1207:15">++</operator> <operator pos:start="1207:17" pos:end="1207:17">=</operator> <literal type="char" pos:start="1207:19" pos:end="1207:21">'?'</literal></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="1209:9" pos:end="1221:11">else

	  <block pos:start="1211:11" pos:end="1221:11">{<block_content pos:start="1213:13" pos:end="1219:30">

	    <if_stmt pos:start="1213:13" pos:end="1215:43"><if pos:start="1213:13" pos:end="1215:43">if <condition pos:start="1213:16" pos:end="1213:32">(<expr pos:start="1213:17" pos:end="1213:31"><name pos:start="1213:17" pos:end="1213:31">with_reg_prefix</name></expr>)</condition><block type="pseudo" pos:start="1215:15" pos:end="1215:43"><block_content pos:start="1215:15" pos:end="1215:43">

	      <expr_stmt pos:start="1215:15" pos:end="1215:43"><expr pos:start="1215:15" pos:end="1215:42"><operator pos:start="1215:15" pos:end="1215:15">*</operator><name pos:start="1215:16" pos:end="1215:17">tp</name><operator pos:start="1215:18" pos:end="1215:19">++</operator> <operator pos:start="1215:21" pos:end="1215:21">=</operator> <name pos:start="1215:23" pos:end="1215:42">REGISTER_PREFIX_CHAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	    <expr_stmt pos:start="1217:13" pos:end="1217:37"><expr pos:start="1217:13" pos:end="1217:36"><call pos:start="1217:13" pos:end="1217:36"><name pos:start="1217:13" pos:end="1217:18">strcpy</name> <argument_list pos:start="1217:20" pos:end="1217:36">(<argument pos:start="1217:21" pos:end="1217:22"><expr pos:start="1217:21" pos:end="1217:22"><name pos:start="1217:21" pos:end="1217:22">tp</name></expr></argument>, <argument pos:start="1217:25" pos:end="1217:35"><expr pos:start="1217:25" pos:end="1217:35"><name pos:start="1217:25" pos:end="1217:35"><name pos:start="1217:25" pos:end="1217:29">sregp</name><operator pos:start="1217:30" pos:end="1217:31">-&gt;</operator><name pos:start="1217:32" pos:end="1217:35">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="1219:13" pos:end="1219:30"><expr pos:start="1219:13" pos:end="1219:29"><name pos:start="1219:13" pos:end="1219:14">tp</name> <operator pos:start="1219:16" pos:end="1219:17">+=</operator> <call pos:start="1219:19" pos:end="1219:29"><name pos:start="1219:19" pos:end="1219:24">strlen</name> <argument_list pos:start="1219:26" pos:end="1219:29">(<argument pos:start="1219:27" pos:end="1219:28"><expr pos:start="1219:27" pos:end="1219:28"><name pos:start="1219:27" pos:end="1219:28">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></else></if_stmt>

      </block_content>}</block>

      <break pos:start="1225:7" pos:end="1225:12">break;</break>



    <default pos:start="1229:5" pos:end="1229:12">default:</default>

      <expr_stmt pos:start="1231:7" pos:end="1231:25"><expr pos:start="1231:7" pos:end="1231:24"><call pos:start="1231:7" pos:end="1231:24"><name pos:start="1231:7" pos:end="1231:12">strcpy</name> <argument_list pos:start="1231:14" pos:end="1231:24">(<argument pos:start="1231:15" pos:end="1231:16"><expr pos:start="1231:15" pos:end="1231:16"><name pos:start="1231:15" pos:end="1231:16">tp</name></expr></argument>, <argument pos:start="1231:19" pos:end="1231:23"><expr pos:start="1231:19" pos:end="1231:23"><literal type="string" pos:start="1231:19" pos:end="1231:23">"???"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="1233:7" pos:end="1233:14"><expr pos:start="1233:7" pos:end="1233:13"><name pos:start="1233:7" pos:end="1233:8">tp</name> <operator pos:start="1233:10" pos:end="1233:11">+=</operator> <literal type="number" pos:start="1233:13" pos:end="1233:13">3</literal></expr>;</expr_stmt>

    </block_content>}</block></switch>

  </block_content>}</block></for>



  <expr_stmt pos:start="1241:3" pos:end="1241:10"><expr pos:start="1241:3" pos:end="1241:9"><operator pos:start="1241:3" pos:end="1241:3">*</operator><name pos:start="1241:4" pos:end="1241:5">tp</name> <operator pos:start="1241:7" pos:end="1241:7">=</operator> <literal type="number" pos:start="1241:9" pos:end="1241:9">0</literal></expr>;</expr_stmt>



  <if_stmt pos:start="1245:3" pos:end="1249:71"><if pos:start="1245:3" pos:end="1249:71">if <condition pos:start="1245:6" pos:end="1245:21">(<expr pos:start="1245:7" pos:end="1245:20"><name pos:start="1245:7" pos:end="1245:20">prefix_opcodep</name></expr>)</condition><block type="pseudo" pos:start="1247:5" pos:end="1249:71"><block_content pos:start="1247:5" pos:end="1249:71">

    <expr_stmt pos:start="1247:5" pos:end="1249:71"><expr pos:start="1247:5" pos:end="1249:70"><call pos:start="1247:5" pos:end="1249:70">(<modifier pos:start="1247:6" pos:end="1247:6">*</modifier><name pos:start="1247:7" pos:end="1247:24"><name pos:start="1247:7" pos:end="1247:10">info</name><operator pos:start="1247:11" pos:end="1247:12">-&gt;</operator><name pos:start="1247:13" pos:end="1247:24">fprintf_func</name></name>) <argument_list pos:start="1247:27" pos:end="1249:70">(<argument pos:start="1247:28" pos:end="1247:39"><expr pos:start="1247:28" pos:end="1247:39"><name pos:start="1247:28" pos:end="1247:39"><name pos:start="1247:28" pos:end="1247:31">info</name><operator pos:start="1247:32" pos:end="1247:33">-&gt;</operator><name pos:start="1247:34" pos:end="1247:39">stream</name></name></expr></argument>, <argument pos:start="1247:42" pos:end="1247:75"><expr pos:start="1247:42" pos:end="1247:75"><literal type="string" pos:start="1247:42" pos:end="1247:75">" (OOPS unused prefix \"%s: %s\")"</literal></expr></argument>,

			   <argument pos:start="1249:28" pos:end="1249:47"><expr pos:start="1249:28" pos:end="1249:47"><name pos:start="1249:28" pos:end="1249:47"><name pos:start="1249:28" pos:end="1249:41">prefix_opcodep</name><operator pos:start="1249:42" pos:end="1249:43">-&gt;</operator><name pos:start="1249:44" pos:end="1249:47">name</name></name></expr></argument>, <argument pos:start="1249:50" pos:end="1249:69"><expr pos:start="1249:50" pos:end="1249:69"><name pos:start="1249:50" pos:end="1249:69"><name pos:start="1249:50" pos:end="1249:63">prefix_opcodep</name><operator pos:start="1249:64" pos:end="1249:65">-&gt;</operator><name pos:start="1249:66" pos:end="1249:69">args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



  <expr_stmt pos:start="1253:3" pos:end="1253:51"><expr pos:start="1253:3" pos:end="1253:50"><call pos:start="1253:3" pos:end="1253:50">(<modifier pos:start="1253:4" pos:end="1253:4">*</modifier><name pos:start="1253:5" pos:end="1253:22"><name pos:start="1253:5" pos:end="1253:8">info</name><operator pos:start="1253:9" pos:end="1253:10">-&gt;</operator><name pos:start="1253:11" pos:end="1253:22">fprintf_func</name></name>) <argument_list pos:start="1253:25" pos:end="1253:50">(<argument pos:start="1253:26" pos:end="1253:37"><expr pos:start="1253:26" pos:end="1253:37"><name pos:start="1253:26" pos:end="1253:37"><name pos:start="1253:26" pos:end="1253:29">info</name><operator pos:start="1253:30" pos:end="1253:31">-&gt;</operator><name pos:start="1253:32" pos:end="1253:37">stream</name></name></expr></argument>, <argument pos:start="1253:40" pos:end="1253:43"><expr pos:start="1253:40" pos:end="1253:43"><literal type="string" pos:start="1253:40" pos:end="1253:43">"%s"</literal></expr></argument>, <argument pos:start="1253:46" pos:end="1253:49"><expr pos:start="1253:46" pos:end="1253:49"><name pos:start="1253:46" pos:end="1253:49">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <comment type="block" pos:start="1257:3" pos:end="1261:69">/* Get info for matching case-tables, if we don't have any active.

     We assume that the last constant seen is used; either in the insn

     itself or in a "move.d const,rN, sub.d rN,rM"-like sequence.  */</comment>

  <if_stmt pos:start="1263:3" pos:end="1303:5"><if pos:start="1263:3" pos:end="1303:5">if <condition pos:start="1263:6" pos:end="1263:45">(<expr pos:start="1263:7" pos:end="1263:44"><name pos:start="1263:7" pos:end="1263:16">TRACE_CASE</name> <operator pos:start="1263:18" pos:end="1263:19">&amp;&amp;</operator> <name pos:start="1263:21" pos:end="1263:39">case_offset_counter</name> <operator pos:start="1263:41" pos:end="1263:42">==</operator> <literal type="number" pos:start="1263:44" pos:end="1263:44">0</literal></expr>)</condition>

    <block pos:start="1265:5" pos:end="1303:5">{<block_content pos:start="1267:7" pos:end="1301:24">

      <if_stmt pos:start="1267:7" pos:end="1301:24"><if pos:start="1267:7" pos:end="1269:37">if <condition pos:start="1267:10" pos:end="1267:46">(<expr pos:start="1267:11" pos:end="1267:45"><call pos:start="1267:11" pos:end="1267:45"><name pos:start="1267:11" pos:end="1267:22">CONST_STRNEQ</name> <argument_list pos:start="1267:24" pos:end="1267:45">(<argument pos:start="1267:25" pos:end="1267:37"><expr pos:start="1267:25" pos:end="1267:37"><name pos:start="1267:25" pos:end="1267:37"><name pos:start="1267:25" pos:end="1267:31">opcodep</name><operator pos:start="1267:32" pos:end="1267:33">-&gt;</operator><name pos:start="1267:34" pos:end="1267:37">name</name></name></expr></argument>, <argument pos:start="1267:40" pos:end="1267:44"><expr pos:start="1267:40" pos:end="1267:44"><literal type="string" pos:start="1267:40" pos:end="1267:44">"sub"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1269:9" pos:end="1269:37"><block_content pos:start="1269:9" pos:end="1269:37">

	<expr_stmt pos:start="1269:9" pos:end="1269:37"><expr pos:start="1269:9" pos:end="1269:36"><name pos:start="1269:9" pos:end="1269:19">case_offset</name> <operator pos:start="1269:21" pos:end="1269:21">=</operator> <name pos:start="1269:23" pos:end="1269:36">last_immediate</name></expr>;</expr_stmt></block_content></block></if>



      <comment type="block" pos:start="1273:7" pos:end="1273:74">/* It could also be an "add", if there are negative case-values.  */</comment>

      <if type="elseif" pos:start="1275:7" pos:end="1279:38">else if <condition pos:start="1275:15" pos:end="1275:51">(<expr pos:start="1275:16" pos:end="1275:50"><call pos:start="1275:16" pos:end="1275:50"><name pos:start="1275:16" pos:end="1275:27">CONST_STRNEQ</name> <argument_list pos:start="1275:29" pos:end="1275:50">(<argument pos:start="1275:30" pos:end="1275:42"><expr pos:start="1275:30" pos:end="1275:42"><name pos:start="1275:30" pos:end="1275:42"><name pos:start="1275:30" pos:end="1275:36">opcodep</name><operator pos:start="1275:37" pos:end="1275:38">-&gt;</operator><name pos:start="1275:39" pos:end="1275:42">name</name></name></expr></argument>, <argument pos:start="1275:45" pos:end="1275:49"><expr pos:start="1275:45" pos:end="1275:49"><literal type="string" pos:start="1275:45" pos:end="1275:49">"add"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1279:9" pos:end="1279:38"><block_content pos:start="1279:9" pos:end="1279:38">

	<comment type="block" pos:start="1277:9" pos:end="1277:64">/* The first case is the negated operand to the add.  */</comment>

	<expr_stmt pos:start="1279:9" pos:end="1279:38"><expr pos:start="1279:9" pos:end="1279:37"><name pos:start="1279:9" pos:end="1279:19">case_offset</name> <operator pos:start="1279:21" pos:end="1279:21">=</operator> <operator pos:start="1279:23" pos:end="1279:23">-</operator><name pos:start="1279:24" pos:end="1279:37">last_immediate</name></expr>;</expr_stmt></block_content></block></if>



      <comment type="block" pos:start="1283:7" pos:end="1283:59">/* A bound insn will tell us the number of cases.  */</comment>

      <if type="elseif" pos:start="1285:7" pos:end="1287:48">else if <condition pos:start="1285:15" pos:end="1285:53">(<expr pos:start="1285:16" pos:end="1285:52"><call pos:start="1285:16" pos:end="1285:52"><name pos:start="1285:16" pos:end="1285:27">CONST_STRNEQ</name> <argument_list pos:start="1285:29" pos:end="1285:52">(<argument pos:start="1285:30" pos:end="1285:42"><expr pos:start="1285:30" pos:end="1285:42"><name pos:start="1285:30" pos:end="1285:42"><name pos:start="1285:30" pos:end="1285:36">opcodep</name><operator pos:start="1285:37" pos:end="1285:38">-&gt;</operator><name pos:start="1285:39" pos:end="1285:42">name</name></name></expr></argument>, <argument pos:start="1285:45" pos:end="1285:51"><expr pos:start="1285:45" pos:end="1285:51"><literal type="string" pos:start="1285:45" pos:end="1285:51">"bound"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1287:9" pos:end="1287:48"><block_content pos:start="1287:9" pos:end="1287:48">

	<expr_stmt pos:start="1287:9" pos:end="1287:48"><expr pos:start="1287:9" pos:end="1287:47"><name pos:start="1287:9" pos:end="1287:26">no_of_case_offsets</name> <operator pos:start="1287:28" pos:end="1287:28">=</operator> <name pos:start="1287:30" pos:end="1287:43">last_immediate</name> <operator pos:start="1287:45" pos:end="1287:45">+</operator> <literal type="number" pos:start="1287:47" pos:end="1287:47">1</literal></expr>;</expr_stmt></block_content></block></if>



      <comment type="block" pos:start="1291:7" pos:end="1293:60">/* A jump or jsr or branch breaks the chain of insns for a

	 case-table, so assume default first-case again.  */</comment>

      <if type="elseif" pos:start="1295:7" pos:end="1301:24">else if <condition pos:start="1295:15" pos:end="1299:52">(<expr pos:start="1295:16" pos:end="1299:51"><name pos:start="1295:16" pos:end="1295:30"><name pos:start="1295:16" pos:end="1295:19">info</name><operator pos:start="1295:20" pos:end="1295:21">-&gt;</operator><name pos:start="1295:22" pos:end="1295:30">insn_type</name></name> <operator pos:start="1295:32" pos:end="1295:33">==</operator> <name pos:start="1295:35" pos:end="1295:41">dis_jsr</name>

	       <operator pos:start="1297:16" pos:end="1297:17">||</operator> <name pos:start="1297:19" pos:end="1297:33"><name pos:start="1297:19" pos:end="1297:22">info</name><operator pos:start="1297:23" pos:end="1297:24">-&gt;</operator><name pos:start="1297:25" pos:end="1297:33">insn_type</name></name> <operator pos:start="1297:35" pos:end="1297:36">==</operator> <name pos:start="1297:38" pos:end="1297:47">dis_branch</name>

	       <operator pos:start="1299:16" pos:end="1299:17">||</operator> <name pos:start="1299:19" pos:end="1299:33"><name pos:start="1299:19" pos:end="1299:22">info</name><operator pos:start="1299:23" pos:end="1299:24">-&gt;</operator><name pos:start="1299:25" pos:end="1299:33">insn_type</name></name> <operator pos:start="1299:35" pos:end="1299:36">==</operator> <name pos:start="1299:38" pos:end="1299:51">dis_condbranch</name></expr>)</condition><block type="pseudo" pos:start="1301:9" pos:end="1301:24"><block_content pos:start="1301:9" pos:end="1301:24">

	<expr_stmt pos:start="1301:9" pos:end="1301:24"><expr pos:start="1301:9" pos:end="1301:23"><name pos:start="1301:9" pos:end="1301:19">case_offset</name> <operator pos:start="1301:21" pos:end="1301:21">=</operator> <literal type="number" pos:start="1301:23" pos:end="1301:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block>
</unit>
