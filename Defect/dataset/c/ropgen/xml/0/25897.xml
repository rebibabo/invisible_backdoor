<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25897.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_aclr</name><parameter_list pos:start="1:25" pos:end="1:70">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:51">AVIOContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">pb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">MOVAtom</name></type> <name pos:start="1:66" pos:end="1:69">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">length</name> <init pos:start="7:16" pos:end="7:18">= <expr pos:start="7:18" pos:end="7:18"><literal type="number" pos:start="7:18" pos:end="7:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:26">original_size</name></decl>;</decl_stmt>

    <if_stmt pos:start="11:5" pos:end="77:5"><if pos:start="11:5" pos:end="77:5">if <condition pos:start="11:8" pos:end="11:31">(<expr pos:start="11:9" pos:end="11:30"><name pos:start="11:9" pos:end="11:25"><name pos:start="11:9" pos:end="11:9">c</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:13">fc</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:25">nb_streams</name></name> <operator pos:start="11:27" pos:end="11:28">&gt;=</operator> <literal type="number" pos:start="11:30" pos:end="11:30">1</literal></expr>)</condition> <block pos:start="11:33" pos:end="77:5">{<block_content pos:start="13:9" pos:end="75:9">

        <decl_stmt pos:start="13:9" pos:end="13:75"><decl pos:start="13:9" pos:end="13:74"><type pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:22">AVCodecContext</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:29">codec</name> <init pos:start="13:31" pos:end="13:74">= <expr pos:start="13:33" pos:end="13:74"><name pos:start="13:33" pos:end="13:67"><name pos:start="13:33" pos:end="13:33">c</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:37">fc</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:46">streams</name><index pos:start="13:47" pos:end="13:67">[<expr pos:start="13:48" pos:end="13:66"><name pos:start="13:48" pos:end="13:64"><name pos:start="13:48" pos:end="13:48">c</name><operator pos:start="13:49" pos:end="13:50">-&gt;</operator><name pos:start="13:51" pos:end="13:52">fc</name><operator pos:start="13:53" pos:end="13:54">-&gt;</operator><name pos:start="13:55" pos:end="13:64">nb_streams</name></name><operator pos:start="13:65" pos:end="13:65">-</operator><literal type="number" pos:start="13:66" pos:end="13:66">1</literal></expr>]</index></name><operator pos:start="13:68" pos:end="13:69">-&gt;</operator><name pos:start="13:70" pos:end="13:74">codec</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="15:9" pos:end="17:21"><if pos:start="15:9" pos:end="17:21">if <condition pos:start="15:12" pos:end="15:48">(<expr pos:start="15:13" pos:end="15:47"><name pos:start="15:13" pos:end="15:27"><name pos:start="15:13" pos:end="15:17">codec</name><operator pos:start="15:18" pos:end="15:19">-&gt;</operator><name pos:start="15:20" pos:end="15:27">codec_id</name></name> <operator pos:start="15:29" pos:end="15:30">==</operator> <name pos:start="15:32" pos:end="15:47">AV_CODEC_ID_H264</name></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:21"><block_content pos:start="17:13" pos:end="17:21">

            <return pos:start="17:13" pos:end="17:21">return <expr pos:start="17:20" pos:end="17:20"><literal type="number" pos:start="17:20" pos:end="17:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="19:9" pos:end="75:9"><if pos:start="19:9" pos:end="71:9">if <condition pos:start="19:12" pos:end="19:28">(<expr pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:21"><name pos:start="19:13" pos:end="19:16">atom</name><operator pos:start="19:17" pos:end="19:17">.</operator><name pos:start="19:18" pos:end="19:21">size</name></name> <operator pos:start="19:23" pos:end="19:24">==</operator> <literal type="number" pos:start="19:26" pos:end="19:27">16</literal></expr>)</condition> <block pos:start="19:30" pos:end="71:9">{<block_content pos:start="21:13" pos:end="69:13">

            <expr_stmt pos:start="21:13" pos:end="21:50"><expr pos:start="21:13" pos:end="21:49"><name pos:start="21:13" pos:end="21:25">original_size</name> <operator pos:start="21:27" pos:end="21:27">=</operator> <name pos:start="21:29" pos:end="21:49"><name pos:start="21:29" pos:end="21:33">codec</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:49">extradata_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:53"><expr pos:start="23:13" pos:end="23:52"><name pos:start="23:13" pos:end="23:15">ret</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <call pos:start="23:19" pos:end="23:52"><name pos:start="23:19" pos:end="23:39">mov_realloc_extradata</name><argument_list pos:start="23:40" pos:end="23:52">(<argument pos:start="23:41" pos:end="23:45"><expr pos:start="23:41" pos:end="23:45"><name pos:start="23:41" pos:end="23:45">codec</name></expr></argument>, <argument pos:start="23:48" pos:end="23:51"><expr pos:start="23:48" pos:end="23:51"><name pos:start="23:48" pos:end="23:51">atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="25:13" pos:end="69:13"><if pos:start="25:13" pos:end="65:13">if <condition pos:start="25:16" pos:end="25:21">(<expr pos:start="25:17" pos:end="25:20"><operator pos:start="25:17" pos:end="25:17">!</operator><name pos:start="25:18" pos:end="25:20">ret</name></expr>)</condition> <block pos:start="25:23" pos:end="65:13">{<block_content pos:start="27:17" pos:end="63:17">

                <expr_stmt pos:start="27:17" pos:end="27:109"><expr pos:start="27:17" pos:end="27:108"><name pos:start="27:17" pos:end="27:22">length</name> <operator pos:start="27:24" pos:end="27:24">=</operator>  <call pos:start="27:27" pos:end="27:108"><name pos:start="27:27" pos:end="27:54">mov_read_atom_into_extradata</name><argument_list pos:start="27:55" pos:end="27:108">(<argument pos:start="27:56" pos:end="27:56"><expr pos:start="27:56" pos:end="27:56"><name pos:start="27:56" pos:end="27:56">c</name></expr></argument>, <argument pos:start="27:59" pos:end="27:60"><expr pos:start="27:59" pos:end="27:60"><name pos:start="27:59" pos:end="27:60">pb</name></expr></argument>, <argument pos:start="27:63" pos:end="27:66"><expr pos:start="27:63" pos:end="27:66"><name pos:start="27:63" pos:end="27:66">atom</name></expr></argument>, <argument pos:start="27:69" pos:end="27:73"><expr pos:start="27:69" pos:end="27:73"><name pos:start="27:69" pos:end="27:73">codec</name></expr></argument>, <argument pos:start="27:76" pos:end="27:107"><expr pos:start="27:76" pos:end="27:107"><name pos:start="27:76" pos:end="27:91"><name pos:start="27:76" pos:end="27:80">codec</name><operator pos:start="27:81" pos:end="27:82">-&gt;</operator><name pos:start="27:83" pos:end="27:91">extradata</name></name> <operator pos:start="27:93" pos:end="27:93">+</operator> <name pos:start="27:95" pos:end="27:107">original_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="29:17" pos:end="63:17"><if pos:start="29:17" pos:end="57:17">if <condition pos:start="29:20" pos:end="29:40">(<expr pos:start="29:21" pos:end="29:39"><name pos:start="29:21" pos:end="29:26">length</name> <operator pos:start="29:28" pos:end="29:29">==</operator> <name pos:start="29:31" pos:end="29:39"><name pos:start="29:31" pos:end="29:34">atom</name><operator pos:start="29:35" pos:end="29:35">.</operator><name pos:start="29:36" pos:end="29:39">size</name></name></expr>)</condition> <block pos:start="29:42" pos:end="57:17">{<block_content pos:start="31:21" pos:end="55:72">

                    <decl_stmt pos:start="31:21" pos:end="31:85"><decl pos:start="31:21" pos:end="31:84"><type pos:start="31:21" pos:end="31:33"><specifier pos:start="31:21" pos:end="31:25">const</specifier> <name pos:start="31:27" pos:end="31:33">uint8_t</name></type> <name pos:start="31:35" pos:end="31:45">range_value</name> <init pos:start="31:47" pos:end="31:84">= <expr pos:start="31:49" pos:end="31:84"><name pos:start="31:49" pos:end="31:84"><name pos:start="31:49" pos:end="31:53">codec</name><operator pos:start="31:54" pos:end="31:55">-&gt;</operator><name pos:start="31:56" pos:end="31:64">extradata</name><index pos:start="31:65" pos:end="31:84">[<expr pos:start="31:66" pos:end="31:83"><name pos:start="31:66" pos:end="31:78">original_size</name> <operator pos:start="31:80" pos:end="31:80">+</operator> <literal type="number" pos:start="31:82" pos:end="31:83">19</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <switch pos:start="33:21" pos:end="53:21">switch <condition pos:start="33:28" pos:end="33:40">(<expr pos:start="33:29" pos:end="33:39"><name pos:start="33:29" pos:end="33:39">range_value</name></expr>)</condition> <block pos:start="33:42" pos:end="53:21">{<block_content pos:start="35:21" pos:end="51:30">

                    <case pos:start="35:21" pos:end="35:27">case <expr pos:start="35:26" pos:end="35:26"><literal type="number" pos:start="35:26" pos:end="35:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="37:25" pos:end="37:62"><expr pos:start="37:25" pos:end="37:61"><name pos:start="37:25" pos:end="37:42"><name pos:start="37:25" pos:end="37:29">codec</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:42">color_range</name></name> <operator pos:start="37:44" pos:end="37:44">=</operator> <name pos:start="37:46" pos:end="37:61">AVCOL_RANGE_MPEG</name></expr>;</expr_stmt>

                        <break pos:start="39:25" pos:end="39:30">break;</break>

                    <case pos:start="41:21" pos:end="41:27">case <expr pos:start="41:26" pos:end="41:26"><literal type="number" pos:start="41:26" pos:end="41:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="43:25" pos:end="43:62"><expr pos:start="43:25" pos:end="43:61"><name pos:start="43:25" pos:end="43:42"><name pos:start="43:25" pos:end="43:29">codec</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:42">color_range</name></name> <operator pos:start="43:44" pos:end="43:44">=</operator> <name pos:start="43:46" pos:end="43:61">AVCOL_RANGE_JPEG</name></expr>;</expr_stmt>

                        <break pos:start="45:25" pos:end="45:30">break;</break>

                    <default pos:start="47:21" pos:end="47:28">default:</default>

                        <expr_stmt pos:start="49:25" pos:end="49:100"><expr pos:start="49:25" pos:end="49:99"><call pos:start="49:25" pos:end="49:99"><name pos:start="49:25" pos:end="49:30">av_log</name><argument_list pos:start="49:31" pos:end="49:99">(<argument pos:start="49:32" pos:end="49:32"><expr pos:start="49:32" pos:end="49:32"><name pos:start="49:32" pos:end="49:32">c</name></expr></argument>, <argument pos:start="49:35" pos:end="49:48"><expr pos:start="49:35" pos:end="49:48"><name pos:start="49:35" pos:end="49:48">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="49:51" pos:end="49:85"><expr pos:start="49:51" pos:end="49:85"><literal type="string" pos:start="49:51" pos:end="49:85">"ignored unknown aclr value (%d)\n"</literal></expr></argument>, <argument pos:start="49:88" pos:end="49:98"><expr pos:start="49:88" pos:end="49:98"><name pos:start="49:88" pos:end="49:98">range_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="51:25" pos:end="51:30">break;</break>

                    </block_content>}</block></switch>

                    <expr_stmt pos:start="55:21" pos:end="55:72"><expr pos:start="55:21" pos:end="55:71"><call pos:start="55:21" pos:end="55:71"><name pos:start="55:21" pos:end="55:27">av_dlog</name><argument_list pos:start="55:28" pos:end="55:71">(<argument pos:start="55:29" pos:end="55:29"><expr pos:start="55:29" pos:end="55:29"><name pos:start="55:29" pos:end="55:29">c</name></expr></argument>, <argument pos:start="55:32" pos:end="55:50"><expr pos:start="55:32" pos:end="55:50"><literal type="string" pos:start="55:32" pos:end="55:50">"color_range: %d\n"</literal></expr></argument>, <argument pos:start="55:53" pos:end="55:70"><expr pos:start="55:53" pos:end="55:70"><name pos:start="55:53" pos:end="55:70"><name pos:start="55:53" pos:end="55:57">codec</name><operator pos:start="55:58" pos:end="55:59">-&gt;</operator><name pos:start="55:60" pos:end="55:70">color_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="57:19" pos:end="63:17">else <block pos:start="57:24" pos:end="63:17">{<block_content pos:start="61:19" pos:end="61:82">

                  <comment type="block" pos:start="59:19" pos:end="59:85">/* For some reason the whole atom was not added to the extradata */</comment>

                  <expr_stmt pos:start="61:19" pos:end="61:82"><expr pos:start="61:19" pos:end="61:81"><call pos:start="61:19" pos:end="61:81"><name pos:start="61:19" pos:end="61:24">av_log</name><argument_list pos:start="61:25" pos:end="61:81">(<argument pos:start="61:26" pos:end="61:26"><expr pos:start="61:26" pos:end="61:26"><name pos:start="61:26" pos:end="61:26">c</name></expr></argument>, <argument pos:start="61:29" pos:end="61:40"><expr pos:start="61:29" pos:end="61:40"><name pos:start="61:29" pos:end="61:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:43" pos:end="61:80"><expr pos:start="61:43" pos:end="61:80"><literal type="string" pos:start="61:43" pos:end="61:80">"aclr not decoded - incomplete atom\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="65:15" pos:end="69:13">else <block pos:start="65:20" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:96">

                <expr_stmt pos:start="67:17" pos:end="67:96"><expr pos:start="67:17" pos:end="67:95"><call pos:start="67:17" pos:end="67:95"><name pos:start="67:17" pos:end="67:22">av_log</name><argument_list pos:start="67:23" pos:end="67:95">(<argument pos:start="67:24" pos:end="67:24"><expr pos:start="67:24" pos:end="67:24"><name pos:start="67:24" pos:end="67:24">c</name></expr></argument>, <argument pos:start="67:27" pos:end="67:38"><expr pos:start="67:27" pos:end="67:38"><name pos:start="67:27" pos:end="67:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:41" pos:end="67:94"><expr pos:start="67:41" pos:end="67:94"><literal type="string" pos:start="67:41" pos:end="67:94">"aclr not decoded - unable to add atom to extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="71:11" pos:end="75:9">else <block pos:start="71:16" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:99">

            <expr_stmt pos:start="73:13" pos:end="73:99"><expr pos:start="73:13" pos:end="73:98"><call pos:start="73:13" pos:end="73:98"><name pos:start="73:13" pos:end="73:18">av_log</name><argument_list pos:start="73:19" pos:end="73:98">(<argument pos:start="73:20" pos:end="73:20"><expr pos:start="73:20" pos:end="73:20"><name pos:start="73:20" pos:end="73:20">c</name></expr></argument>, <argument pos:start="73:23" pos:end="73:36"><expr pos:start="73:23" pos:end="73:36"><name pos:start="73:23" pos:end="73:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="73:39" pos:end="73:86"><expr pos:start="73:39" pos:end="73:86"><literal type="string" pos:start="73:39" pos:end="73:76">"aclr not decoded - unexpected size %"</literal><name pos:start="73:77" pos:end="73:82">PRId64</name><literal type="string" pos:start="73:83" pos:end="73:86">"\n"</literal></expr></argument>, <argument pos:start="73:89" pos:end="73:97"><expr pos:start="73:89" pos:end="73:97"><name pos:start="73:89" pos:end="73:97"><name pos:start="73:89" pos:end="73:92">atom</name><operator pos:start="73:93" pos:end="73:93">.</operator><name pos:start="73:94" pos:end="73:97">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="81:5" pos:end="81:15">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
