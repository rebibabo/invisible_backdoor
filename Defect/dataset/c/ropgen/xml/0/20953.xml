<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20953.c" pos:tabs="8"><function pos:start="1:1" pos:end="723:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:49">gen_intermediate_code_internal</name><parameter_list pos:start="1:50" pos:end="5:65">(<parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:56">ARMCPU</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">cpu</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:70"><decl pos:start="3:51" pos:end="3:70"><type pos:start="3:51" pos:end="3:70"><name pos:start="3:51" pos:end="3:66">TranslationBlock</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:70">tb</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:64"><decl pos:start="5:51" pos:end="5:64"><type pos:start="5:51" pos:end="5:64"><name pos:start="5:51" pos:end="5:54">bool</name></type> <name pos:start="5:56" pos:end="5:64">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="723:1">{<block_content pos:start="9:5" pos:end="721:5">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">cs</name> <init pos:start="9:18" pos:end="9:27">= <expr pos:start="9:20" pos:end="9:27"><call pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:22">CPU</name><argument_list pos:start="9:23" pos:end="9:27">(<argument pos:start="9:24" pos:end="9:26"><expr pos:start="9:24" pos:end="9:26"><name pos:start="9:24" pos:end="9:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">CPUARMState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">env</name> <init pos:start="11:22" pos:end="11:32">= <expr pos:start="11:24" pos:end="11:32"><operator pos:start="11:24" pos:end="11:24">&amp;</operator><name pos:start="11:25" pos:end="11:32"><name pos:start="11:25" pos:end="11:27">cpu</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">DisasContext</name></type> <name pos:start="13:18" pos:end="13:20">dc1</name></decl>, <decl pos:start="13:23" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:25">dc</name> <init pos:start="13:27" pos:end="13:32">= <expr pos:start="13:29" pos:end="13:32"><operator pos:start="13:29" pos:end="13:29">&amp;</operator><name pos:start="13:30" pos:end="13:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">CPUBreakpoint</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">j</name></decl>, <decl pos:start="17:12" pos:end="17:13"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:13">lj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:16">target_ulong</name></type> <name pos:start="19:18" pos:end="19:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:16">target_ulong</name></type> <name pos:start="21:18" pos:end="21:32">next_page_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">max_insns</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:36">/* generate intermediate code */</comment>



    <comment type="block" pos:start="33:5" pos:end="37:7">/* The A64 decoder has its own top level loop, because it doesn't need

     * the A32/T32 complexity to do with conditional execution/IT blocks/etc.

     */</comment>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:44">(<expr pos:start="39:9" pos:end="39:43"><call pos:start="39:9" pos:end="39:43"><name pos:start="39:9" pos:end="39:32">ARM_TBFLAG_AARCH64_STATE</name><argument_list pos:start="39:33" pos:end="39:43">(<argument pos:start="39:34" pos:end="39:42"><expr pos:start="39:34" pos:end="39:42"><name pos:start="39:34" pos:end="39:42"><name pos:start="39:34" pos:end="39:35">tb</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:42">flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:46" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:15">

        <expr_stmt pos:start="41:9" pos:end="41:63"><expr pos:start="41:9" pos:end="41:62"><call pos:start="41:9" pos:end="41:62"><name pos:start="41:9" pos:end="41:42">gen_intermediate_code_internal_a64</name><argument_list pos:start="41:43" pos:end="41:62">(<argument pos:start="41:44" pos:end="41:46"><expr pos:start="41:44" pos:end="41:46"><name pos:start="41:44" pos:end="41:46">cpu</name></expr></argument>, <argument pos:start="41:49" pos:end="41:50"><expr pos:start="41:49" pos:end="41:50"><name pos:start="41:49" pos:end="41:50">tb</name></expr></argument>, <argument pos:start="41:53" pos:end="41:61"><expr pos:start="41:53" pos:end="41:61"><name pos:start="41:53" pos:end="41:61">search_pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:22"><expr pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:12">pc_start</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <name pos:start="49:16" pos:end="49:21"><name pos:start="49:16" pos:end="49:17">tb</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:21">pc</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:16"><expr pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:10"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:10">tb</name></name> <operator pos:start="53:12" pos:end="53:12">=</operator> <name pos:start="53:14" pos:end="53:15">tb</name></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:28"><expr pos:start="57:5" pos:end="57:27"><name pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:14">is_jmp</name></name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:27">DISAS_NEXT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:22"><expr pos:start="59:5" pos:end="59:21"><name pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:6">dc</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:10">pc</name></name> <operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:52"><expr pos:start="61:5" pos:end="61:51"><name pos:start="61:5" pos:end="61:26"><name pos:start="61:5" pos:end="61:6">dc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:26">singlestep_enabled</name></name> <operator pos:start="61:28" pos:end="61:28">=</operator> <name pos:start="61:30" pos:end="61:51"><name pos:start="61:30" pos:end="61:31">cs</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:51">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:20"><expr pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:6">dc</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:15">condjmp</name></name> <operator pos:start="63:17" pos:end="63:17">=</operator> <literal type="number" pos:start="63:19" pos:end="63:19">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:20"><expr pos:start="67:5" pos:end="67:19"><name pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:6">dc</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:15">aarch64</name></name> <operator pos:start="67:17" pos:end="67:17">=</operator> <literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:45"><expr pos:start="69:5" pos:end="69:44"><name pos:start="69:5" pos:end="69:19"><name pos:start="69:5" pos:end="69:6">dc</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:19">el3_is_aa64</name></name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:44"><name pos:start="69:23" pos:end="69:36">arm_el_is_aa64</name><argument_list pos:start="69:37" pos:end="69:44">(<argument pos:start="69:38" pos:end="69:40"><expr pos:start="69:38" pos:end="69:40"><name pos:start="69:38" pos:end="69:40">env</name></expr></argument>, <argument pos:start="69:43" pos:end="69:43"><expr pos:start="69:43" pos:end="69:43"><literal type="number" pos:start="69:43" pos:end="69:43">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:44"><expr pos:start="71:5" pos:end="71:43"><name pos:start="71:5" pos:end="71:13"><name pos:start="71:5" pos:end="71:6">dc</name><operator pos:start="71:7" pos:end="71:8">-&gt;</operator><name pos:start="71:9" pos:end="71:13">thumb</name></name> <operator pos:start="71:15" pos:end="71:15">=</operator> <call pos:start="71:17" pos:end="71:43"><name pos:start="71:17" pos:end="71:32">ARM_TBFLAG_THUMB</name><argument_list pos:start="71:33" pos:end="71:43">(<argument pos:start="71:34" pos:end="71:42"><expr pos:start="71:34" pos:end="71:42"><name pos:start="71:34" pos:end="71:42"><name pos:start="71:34" pos:end="71:35">tb</name><operator pos:start="71:36" pos:end="71:37">-&gt;</operator><name pos:start="71:38" pos:end="71:42">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:54"><expr pos:start="73:5" pos:end="73:53"><name pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:6">dc</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:18">bswap_code</name></name> <operator pos:start="73:20" pos:end="73:20">=</operator> <call pos:start="73:22" pos:end="73:53"><name pos:start="73:22" pos:end="73:42">ARM_TBFLAG_BSWAP_CODE</name><argument_list pos:start="73:43" pos:end="73:53">(<argument pos:start="73:44" pos:end="73:52"><expr pos:start="73:44" pos:end="73:52"><name pos:start="73:44" pos:end="73:52"><name pos:start="73:44" pos:end="73:45">tb</name><operator pos:start="73:46" pos:end="73:47">-&gt;</operator><name pos:start="73:48" pos:end="73:52">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:68"><expr pos:start="75:5" pos:end="75:67"><name pos:start="75:5" pos:end="75:21"><name pos:start="75:5" pos:end="75:6">dc</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:21">condexec_mask</name></name> <operator pos:start="75:23" pos:end="75:23">=</operator> <operator pos:start="75:25" pos:end="75:25">(</operator><call pos:start="75:26" pos:end="75:55"><name pos:start="75:26" pos:end="75:44">ARM_TBFLAG_CONDEXEC</name><argument_list pos:start="75:45" pos:end="75:55">(<argument pos:start="75:46" pos:end="75:54"><expr pos:start="75:46" pos:end="75:54"><name pos:start="75:46" pos:end="75:54"><name pos:start="75:46" pos:end="75:47">tb</name><operator pos:start="75:48" pos:end="75:49">-&gt;</operator><name pos:start="75:50" pos:end="75:54">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="75:57" pos:end="75:57">&amp;</operator> <literal type="number" pos:start="75:59" pos:end="75:61">0xf</literal><operator pos:start="75:62" pos:end="75:62">)</operator> <operator pos:start="75:64" pos:end="75:65">&lt;&lt;</operator> <literal type="number" pos:start="75:67" pos:end="75:67">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:60"><expr pos:start="77:5" pos:end="77:59"><name pos:start="77:5" pos:end="77:21"><name pos:start="77:5" pos:end="77:6">dc</name><operator pos:start="77:7" pos:end="77:8">-&gt;</operator><name pos:start="77:9" pos:end="77:21">condexec_cond</name></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <call pos:start="77:25" pos:end="77:54"><name pos:start="77:25" pos:end="77:43">ARM_TBFLAG_CONDEXEC</name><argument_list pos:start="77:44" pos:end="77:54">(<argument pos:start="77:45" pos:end="77:53"><expr pos:start="77:45" pos:end="77:53"><name pos:start="77:45" pos:end="77:53"><name pos:start="77:45" pos:end="77:46">tb</name><operator pos:start="77:47" pos:end="77:48">-&gt;</operator><name pos:start="77:49" pos:end="77:53">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="77:56" pos:end="77:57">&gt;&gt;</operator> <literal type="number" pos:start="77:59" pos:end="77:59">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:47"><expr pos:start="79:5" pos:end="79:46"><name pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:6">dc</name><operator pos:start="79:7" pos:end="79:8">-&gt;</operator><name pos:start="79:9" pos:end="79:15">mmu_idx</name></name> <operator pos:start="79:17" pos:end="79:17">=</operator> <call pos:start="79:19" pos:end="79:46"><name pos:start="79:19" pos:end="79:35">ARM_TBFLAG_MMUIDX</name><argument_list pos:start="79:36" pos:end="79:46">(<argument pos:start="79:37" pos:end="79:45"><expr pos:start="79:37" pos:end="79:45"><name pos:start="79:37" pos:end="79:45"><name pos:start="79:37" pos:end="79:38">tb</name><operator pos:start="79:39" pos:end="79:40">-&gt;</operator><name pos:start="79:41" pos:end="79:45">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="84:0"><expr pos:start="81:5" pos:end="81:51"><name pos:start="81:5" pos:end="81:18"><name pos:start="81:5" pos:end="81:6">dc</name><operator pos:start="81:7" pos:end="81:8">-&gt;</operator><name pos:start="81:9" pos:end="81:18">current_el</name></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <call pos:start="81:22" pos:end="81:51"><name pos:start="81:22" pos:end="81:38">arm_mmu_idx_to_el</name><argument_list pos:start="81:39" pos:end="81:51">(<argument pos:start="81:40" pos:end="81:50"><expr pos:start="81:40" pos:end="81:50"><name pos:start="81:40" pos:end="81:50"><name pos:start="81:40" pos:end="81:41">dc</name><operator pos:start="81:42" pos:end="81:43">-&gt;</operator><name pos:start="81:44" pos:end="81:50">mmu_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="83:1" pos:end="83:30">#<cpp:directive pos:start="83:2" pos:end="83:3">if</cpp:directive> <expr pos:start="83:5" pos:end="83:30"><operator pos:start="83:5" pos:end="83:5">!</operator><call pos:start="83:6" pos:end="83:30"><name pos:start="83:6" pos:end="83:12">defined</name><argument_list pos:start="83:13" pos:end="83:30">(<argument pos:start="83:14" pos:end="83:29"><expr pos:start="83:14" pos:end="83:29"><name pos:start="83:14" pos:end="83:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="85:5" pos:end="88:0"><expr pos:start="85:5" pos:end="85:36"><name pos:start="85:5" pos:end="85:12"><name pos:start="85:5" pos:end="85:6">dc</name><operator pos:start="85:7" pos:end="85:8">-&gt;</operator><name pos:start="85:9" pos:end="85:12">user</name></name> <operator pos:start="85:14" pos:end="85:14">=</operator> <operator pos:start="85:16" pos:end="85:16">(</operator><name pos:start="85:17" pos:end="85:30"><name pos:start="85:17" pos:end="85:18">dc</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:30">current_el</name></name> <operator pos:start="85:32" pos:end="85:33">==</operator> <literal type="number" pos:start="85:35" pos:end="85:35">0</literal><operator pos:start="85:36" pos:end="85:36">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="89:5" pos:end="89:38"><expr pos:start="89:5" pos:end="89:37"><name pos:start="89:5" pos:end="89:10"><name pos:start="89:5" pos:end="89:6">dc</name><operator pos:start="89:7" pos:end="89:8">-&gt;</operator><name pos:start="89:9" pos:end="89:10">ns</name></name> <operator pos:start="89:12" pos:end="89:12">=</operator> <call pos:start="89:14" pos:end="89:37"><name pos:start="89:14" pos:end="89:26">ARM_TBFLAG_NS</name><argument_list pos:start="89:27" pos:end="89:37">(<argument pos:start="89:28" pos:end="89:36"><expr pos:start="89:28" pos:end="89:36"><name pos:start="89:28" pos:end="89:36"><name pos:start="89:28" pos:end="89:29">tb</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:36">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:54"><expr pos:start="91:5" pos:end="91:53"><name pos:start="91:5" pos:end="91:18"><name pos:start="91:5" pos:end="91:6">dc</name><operator pos:start="91:7" pos:end="91:8">-&gt;</operator><name pos:start="91:9" pos:end="91:18">cpacr_fpen</name></name> <operator pos:start="91:20" pos:end="91:20">=</operator> <call pos:start="91:22" pos:end="91:53"><name pos:start="91:22" pos:end="91:42">ARM_TBFLAG_CPACR_FPEN</name><argument_list pos:start="91:43" pos:end="91:53">(<argument pos:start="91:44" pos:end="91:52"><expr pos:start="91:44" pos:end="91:52"><name pos:start="91:44" pos:end="91:52"><name pos:start="91:44" pos:end="91:45">tb</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:52">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:50"><expr pos:start="93:5" pos:end="93:49"><name pos:start="93:5" pos:end="93:19"><name pos:start="93:5" pos:end="93:6">dc</name><operator pos:start="93:7" pos:end="93:8">-&gt;</operator><name pos:start="93:9" pos:end="93:19">vfp_enabled</name></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="93:49"><name pos:start="93:23" pos:end="93:38">ARM_TBFLAG_VFPEN</name><argument_list pos:start="93:39" pos:end="93:49">(<argument pos:start="93:40" pos:end="93:48"><expr pos:start="93:40" pos:end="93:48"><name pos:start="93:40" pos:end="93:48"><name pos:start="93:40" pos:end="93:41">tb</name><operator pos:start="93:42" pos:end="93:43">-&gt;</operator><name pos:start="93:44" pos:end="93:48">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:47"><expr pos:start="95:5" pos:end="95:46"><name pos:start="95:5" pos:end="95:15"><name pos:start="95:5" pos:end="95:6">dc</name><operator pos:start="95:7" pos:end="95:8">-&gt;</operator><name pos:start="95:9" pos:end="95:15">vec_len</name></name> <operator pos:start="95:17" pos:end="95:17">=</operator> <call pos:start="95:19" pos:end="95:46"><name pos:start="95:19" pos:end="95:35">ARM_TBFLAG_VECLEN</name><argument_list pos:start="95:36" pos:end="95:46">(<argument pos:start="95:37" pos:end="95:45"><expr pos:start="95:37" pos:end="95:45"><name pos:start="95:37" pos:end="95:45"><name pos:start="95:37" pos:end="95:38">tb</name><operator pos:start="95:39" pos:end="95:40">-&gt;</operator><name pos:start="95:41" pos:end="95:45">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:53"><expr pos:start="97:5" pos:end="97:52"><name pos:start="97:5" pos:end="97:18"><name pos:start="97:5" pos:end="97:6">dc</name><operator pos:start="97:7" pos:end="97:8">-&gt;</operator><name pos:start="97:9" pos:end="97:18">vec_stride</name></name> <operator pos:start="97:20" pos:end="97:20">=</operator> <call pos:start="97:22" pos:end="97:52"><name pos:start="97:22" pos:end="97:41">ARM_TBFLAG_VECSTRIDE</name><argument_list pos:start="97:42" pos:end="97:52">(<argument pos:start="97:43" pos:end="97:51"><expr pos:start="97:43" pos:end="97:51"><name pos:start="97:43" pos:end="97:51"><name pos:start="97:43" pos:end="97:44">tb</name><operator pos:start="97:45" pos:end="97:46">-&gt;</operator><name pos:start="97:47" pos:end="97:51">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:53"><expr pos:start="99:5" pos:end="99:52"><name pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:6">dc</name><operator pos:start="99:7" pos:end="99:8">-&gt;</operator><name pos:start="99:9" pos:end="99:16">c15_cpar</name></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <call pos:start="99:20" pos:end="99:52"><name pos:start="99:20" pos:end="99:41">ARM_TBFLAG_XSCALE_CPAR</name><argument_list pos:start="99:42" pos:end="99:52">(<argument pos:start="99:43" pos:end="99:51"><expr pos:start="99:43" pos:end="99:51"><name pos:start="99:43" pos:end="99:51"><name pos:start="99:43" pos:end="99:44">tb</name><operator pos:start="99:45" pos:end="99:46">-&gt;</operator><name pos:start="99:47" pos:end="99:51">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:31"><expr pos:start="101:5" pos:end="101:30"><name pos:start="101:5" pos:end="101:15"><name pos:start="101:5" pos:end="101:6">dc</name><operator pos:start="101:7" pos:end="101:8">-&gt;</operator><name pos:start="101:9" pos:end="101:15">cp_regs</name></name> <operator pos:start="101:17" pos:end="101:17">=</operator> <name pos:start="101:19" pos:end="101:30"><name pos:start="101:19" pos:end="101:21">cpu</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:30">cp_regs</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:33"><expr pos:start="103:5" pos:end="103:32"><name pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:6">dc</name><operator pos:start="103:7" pos:end="103:8">-&gt;</operator><name pos:start="103:9" pos:end="103:16">features</name></name> <operator pos:start="103:18" pos:end="103:18">=</operator> <name pos:start="103:20" pos:end="103:32"><name pos:start="103:20" pos:end="103:22">env</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:32">features</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="135:7">/* Single step state. The code-generation logic here is:

     *  SS_ACTIVE == 0:

     *   generate code with no special handling for single-stepping (except

     *   that anything that can make us go to SS_ACTIVE == 1 must end the TB;

     *   this happens anyway because those changes are all system register or

     *   PSTATE writes).

     *  SS_ACTIVE == 1, PSTATE.SS == 1: (active-not-pending)

     *   emit code for one insn

     *   emit code to clear PSTATE.SS

     *   emit code to generate software step exception for completed step

     *   end TB (as usual for having generated an exception)

     *  SS_ACTIVE == 1, PSTATE.SS == 0: (active-pending)

     *   emit code to generate a software step exception

     *   end the TB

     */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:52"><expr pos:start="137:5" pos:end="137:51"><name pos:start="137:5" pos:end="137:17"><name pos:start="137:5" pos:end="137:6">dc</name><operator pos:start="137:7" pos:end="137:8">-&gt;</operator><name pos:start="137:9" pos:end="137:17">ss_active</name></name> <operator pos:start="137:19" pos:end="137:19">=</operator> <call pos:start="137:21" pos:end="137:51"><name pos:start="137:21" pos:end="137:40">ARM_TBFLAG_SS_ACTIVE</name><argument_list pos:start="137:41" pos:end="137:51">(<argument pos:start="137:42" pos:end="137:50"><expr pos:start="137:42" pos:end="137:50"><name pos:start="137:42" pos:end="137:50"><name pos:start="137:42" pos:end="137:43">tb</name><operator pos:start="137:44" pos:end="137:45">-&gt;</operator><name pos:start="137:46" pos:end="137:50">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:52"><expr pos:start="139:5" pos:end="139:51"><name pos:start="139:5" pos:end="139:17"><name pos:start="139:5" pos:end="139:6">dc</name><operator pos:start="139:7" pos:end="139:8">-&gt;</operator><name pos:start="139:9" pos:end="139:17">pstate_ss</name></name> <operator pos:start="139:19" pos:end="139:19">=</operator> <call pos:start="139:21" pos:end="139:51"><name pos:start="139:21" pos:end="139:40">ARM_TBFLAG_PSTATE_SS</name><argument_list pos:start="139:41" pos:end="139:51">(<argument pos:start="139:42" pos:end="139:50"><expr pos:start="139:42" pos:end="139:50"><name pos:start="139:42" pos:end="139:50"><name pos:start="139:42" pos:end="139:43">tb</name><operator pos:start="139:44" pos:end="139:45">-&gt;</operator><name pos:start="139:46" pos:end="139:50">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:24"><expr pos:start="141:5" pos:end="141:23"><name pos:start="141:5" pos:end="141:15"><name pos:start="141:5" pos:end="141:6">dc</name><operator pos:start="141:7" pos:end="141:8">-&gt;</operator><name pos:start="141:9" pos:end="141:15">is_ldex</name></name> <operator pos:start="141:17" pos:end="141:17">=</operator> <name pos:start="141:19" pos:end="141:23">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:27"><expr pos:start="143:5" pos:end="143:26"><name pos:start="143:5" pos:end="143:18"><name pos:start="143:5" pos:end="143:6">dc</name><operator pos:start="143:7" pos:end="143:8">-&gt;</operator><name pos:start="143:9" pos:end="143:18">ss_same_el</name></name> <operator pos:start="143:20" pos:end="143:20">=</operator> <name pos:start="143:22" pos:end="143:26">false</name></expr>;</expr_stmt> <comment type="block" pos:start="143:29" pos:end="143:74">/* Can't be true since EL_d must be AArch64 */</comment>



    <expr_stmt pos:start="147:5" pos:end="147:33"><expr pos:start="147:5" pos:end="147:32"><name pos:start="147:5" pos:end="147:11">cpu_F0s</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <call pos:start="147:15" pos:end="147:32"><name pos:start="147:15" pos:end="147:30">tcg_temp_new_i32</name><argument_list pos:start="147:31" pos:end="147:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:33"><expr pos:start="149:5" pos:end="149:32"><name pos:start="149:5" pos:end="149:11">cpu_F1s</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <call pos:start="149:15" pos:end="149:32"><name pos:start="149:15" pos:end="149:30">tcg_temp_new_i32</name><argument_list pos:start="149:31" pos:end="149:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:33"><expr pos:start="151:5" pos:end="151:32"><name pos:start="151:5" pos:end="151:11">cpu_F0d</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <call pos:start="151:15" pos:end="151:32"><name pos:start="151:15" pos:end="151:30">tcg_temp_new_i64</name><argument_list pos:start="151:31" pos:end="151:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:33"><expr pos:start="153:5" pos:end="153:32"><name pos:start="153:5" pos:end="153:11">cpu_F1d</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <call pos:start="153:15" pos:end="153:32"><name pos:start="153:15" pos:end="153:30">tcg_temp_new_i64</name><argument_list pos:start="153:31" pos:end="153:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:21"><expr pos:start="155:5" pos:end="155:20"><name pos:start="155:5" pos:end="155:10">cpu_V0</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <name pos:start="155:14" pos:end="155:20">cpu_F0d</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:21"><expr pos:start="157:5" pos:end="157:20"><name pos:start="157:5" pos:end="157:10">cpu_V1</name> <operator pos:start="157:12" pos:end="157:12">=</operator> <name pos:start="157:14" pos:end="157:20">cpu_F1d</name></expr>;</expr_stmt>

    <comment type="block" pos:start="159:5" pos:end="159:60">/* FIXME: cpu_M0 can probably be the same as cpu_V0.  */</comment>

    <expr_stmt pos:start="161:5" pos:end="161:32"><expr pos:start="161:5" pos:end="161:31"><name pos:start="161:5" pos:end="161:10">cpu_M0</name> <operator pos:start="161:12" pos:end="161:12">=</operator> <call pos:start="161:14" pos:end="161:31"><name pos:start="161:14" pos:end="161:29">tcg_temp_new_i64</name><argument_list pos:start="161:30" pos:end="161:31">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:71"><expr pos:start="163:5" pos:end="163:70"><name pos:start="163:5" pos:end="163:19">next_page_start</name> <operator pos:start="163:21" pos:end="163:21">=</operator> <operator pos:start="163:23" pos:end="163:23">(</operator><name pos:start="163:24" pos:end="163:31">pc_start</name> <operator pos:start="163:33" pos:end="163:33">&amp;</operator> <name pos:start="163:35" pos:end="163:50">TARGET_PAGE_MASK</name><operator pos:start="163:51" pos:end="163:51">)</operator> <operator pos:start="163:53" pos:end="163:53">+</operator> <name pos:start="163:55" pos:end="163:70">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:12"><expr pos:start="165:5" pos:end="165:11"><name pos:start="165:5" pos:end="165:6">lj</name> <operator pos:start="165:8" pos:end="165:8">=</operator> <operator pos:start="165:10" pos:end="165:10">-</operator><literal type="number" pos:start="165:11" pos:end="165:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:18"><expr pos:start="167:5" pos:end="167:17"><name pos:start="167:5" pos:end="167:13">num_insns</name> <operator pos:start="167:15" pos:end="167:15">=</operator> <literal type="number" pos:start="167:17" pos:end="167:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:43"><expr pos:start="169:5" pos:end="169:42"><name pos:start="169:5" pos:end="169:13">max_insns</name> <operator pos:start="169:15" pos:end="169:15">=</operator> <name pos:start="169:17" pos:end="169:26"><name pos:start="169:17" pos:end="169:18">tb</name><operator pos:start="169:19" pos:end="169:20">-&gt;</operator><name pos:start="169:21" pos:end="169:26">cflags</name></name> <operator pos:start="169:28" pos:end="169:28">&amp;</operator> <name pos:start="169:30" pos:end="169:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="171:5" pos:end="173:34"><if pos:start="171:5" pos:end="173:34">if <condition pos:start="171:8" pos:end="171:23">(<expr pos:start="171:9" pos:end="171:22"><name pos:start="171:9" pos:end="171:17">max_insns</name> <operator pos:start="171:19" pos:end="171:20">==</operator> <literal type="number" pos:start="171:22" pos:end="171:22">0</literal></expr>)</condition><block type="pseudo" pos:start="173:9" pos:end="173:34"><block_content pos:start="173:9" pos:end="173:34">

        <expr_stmt pos:start="173:9" pos:end="173:34"><expr pos:start="173:9" pos:end="173:33"><name pos:start="173:9" pos:end="173:17">max_insns</name> <operator pos:start="173:19" pos:end="173:19">=</operator> <name pos:start="173:21" pos:end="173:33">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:21"><expr pos:start="177:5" pos:end="177:20"><call pos:start="177:5" pos:end="177:20"><name pos:start="177:5" pos:end="177:16">gen_tb_start</name><argument_list pos:start="177:17" pos:end="177:20">(<argument pos:start="177:18" pos:end="177:19"><expr pos:start="177:18" pos:end="177:19"><name pos:start="177:18" pos:end="177:19">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:27"><expr pos:start="181:5" pos:end="181:26"><call pos:start="181:5" pos:end="181:26"><name pos:start="181:5" pos:end="181:24">tcg_clear_temp_count</name><argument_list pos:start="181:25" pos:end="181:26">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="185:5" pos:end="243:7">/* A note on handling of the condexec (IT) bits:

     *

     * We want to avoid the overhead of having to write the updated condexec

     * bits back to the CPUARMState for every instruction in an IT block. So:

     * (1) if the condexec bits are not already zero then we write

     * zero back into the CPUARMState now. This avoids complications trying

     * to do it at the end of the block. (For example if we don't do this

     * it's hard to identify whether we can safely skip writing condexec

     * at the end of the TB, which we definitely want to do for the case

     * where a TB doesn't do anything with the IT state at all.)

     * (2) if we are going to leave the TB then we call gen_set_condexec()

     * which will write the correct value into CPUARMState if zero is wrong.

     * This is done both for leaving the TB at the end, and for leaving

     * it because of an exception we know will happen, which is done in

     * gen_exception_insn(). The latter is necessary because we need to

     * leave the TB with the PC/IT state just prior to execution of the

     * instruction which caused the exception.

     * (3) if we leave the TB unexpectedly (eg a data abort on a load)

     * then the CPUARMState will be wrong and we need to reset it.

     * This is handled in the same way as restoration of the

     * PC in these situations: we will be called again with search_pc=1

     * and generate a mapping of the condexec bits for each PC in

     * gen_opc_condexec_bits[]. restore_state_to_opc() then uses

     * this to restore the condexec bits.

     *

     * Note that there are no instructions which can read the condexec

     * bits, and none which can write non-static values to them, so

     * we don't need to care about whether CPUARMState is correct in the

     * middle of a TB.

     */</comment>



    <comment type="block" pos:start="247:5" pos:end="249:65">/* Reset the conditional execution bits immediately. This avoids

       complications trying to do it at the end of the block.  */</comment>

    <if_stmt pos:start="251:5" pos:end="261:7"><if pos:start="251:5" pos:end="261:7">if <condition pos:start="251:8" pos:end="251:47">(<expr pos:start="251:9" pos:end="251:46"><name pos:start="251:9" pos:end="251:25"><name pos:start="251:9" pos:end="251:10">dc</name><operator pos:start="251:11" pos:end="251:12">-&gt;</operator><name pos:start="251:13" pos:end="251:25">condexec_mask</name></name> <operator pos:start="251:27" pos:end="251:28">||</operator> <name pos:start="251:30" pos:end="251:46"><name pos:start="251:30" pos:end="251:31">dc</name><operator pos:start="251:32" pos:end="251:33">-&gt;</operator><name pos:start="251:34" pos:end="251:46">condexec_cond</name></name></expr>)</condition>

      <block pos:start="253:7" pos:end="261:7">{<block_content pos:start="255:9" pos:end="259:44">

        <decl_stmt pos:start="255:9" pos:end="255:42"><decl pos:start="255:9" pos:end="255:41"><type pos:start="255:9" pos:end="255:16"><name pos:start="255:9" pos:end="255:16">TCGv_i32</name></type> <name pos:start="255:18" pos:end="255:20">tmp</name> <init pos:start="255:22" pos:end="255:41">= <expr pos:start="255:24" pos:end="255:41"><call pos:start="255:24" pos:end="255:41"><name pos:start="255:24" pos:end="255:39">tcg_temp_new_i32</name><argument_list pos:start="255:40" pos:end="255:41">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:33"><expr pos:start="257:9" pos:end="257:32"><call pos:start="257:9" pos:end="257:32"><name pos:start="257:9" pos:end="257:24">tcg_gen_movi_i32</name><argument_list pos:start="257:25" pos:end="257:32">(<argument pos:start="257:26" pos:end="257:28"><expr pos:start="257:26" pos:end="257:28"><name pos:start="257:26" pos:end="257:28">tmp</name></expr></argument>, <argument pos:start="257:31" pos:end="257:31"><expr pos:start="257:31" pos:end="257:31"><literal type="number" pos:start="257:31" pos:end="257:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:44"><expr pos:start="259:9" pos:end="259:43"><call pos:start="259:9" pos:end="259:43"><name pos:start="259:9" pos:end="259:23">store_cpu_field</name><argument_list pos:start="259:24" pos:end="259:43">(<argument pos:start="259:25" pos:end="259:27"><expr pos:start="259:25" pos:end="259:27"><name pos:start="259:25" pos:end="259:27">tmp</name></expr></argument>, <argument pos:start="259:30" pos:end="259:42"><expr pos:start="259:30" pos:end="259:42"><name pos:start="259:30" pos:end="259:42">condexec_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if></if_stmt>

    <do pos:start="263:5" pos:end="471:36">do <block pos:start="263:8" pos:end="461:5">{<block_content pos:start="269:9" pos:end="459:21">

<cpp:ifdef pos:start="265:1" pos:end="265:23">#<cpp:directive pos:start="265:2" pos:end="265:6">ifdef</cpp:directive> <name pos:start="265:8" pos:end="265:23">CONFIG_USER_ONLY</name></cpp:ifdef>

        <comment type="block" pos:start="267:9" pos:end="267:55">/* Intercept jump to the magic kernel page.  */</comment>

        <if_stmt pos:start="269:9" pos:end="284:0"><if pos:start="269:9" pos:end="284:0">if <condition pos:start="269:12" pos:end="269:33">(<expr pos:start="269:13" pos:end="269:32"><name pos:start="269:13" pos:end="269:18"><name pos:start="269:13" pos:end="269:14">dc</name><operator pos:start="269:15" pos:end="269:16">-&gt;</operator><name pos:start="269:17" pos:end="269:18">pc</name></name> <operator pos:start="269:20" pos:end="269:21">&gt;=</operator> <literal type="number" pos:start="269:23" pos:end="269:32">0xffff0000</literal></expr>)</condition> <block pos:start="269:35" pos:end="284:0">{<block_content pos:start="275:13" pos:end="279:18">

            <comment type="block" pos:start="271:13" pos:end="273:47">/* We always get here via a jump, so know we are not in a

               conditional execution block.  */</comment>

            <expr_stmt pos:start="275:13" pos:end="275:53"><expr pos:start="275:13" pos:end="275:52"><call pos:start="275:13" pos:end="275:52"><name pos:start="275:13" pos:end="275:34">gen_exception_internal</name><argument_list pos:start="275:35" pos:end="275:52">(<argument pos:start="275:36" pos:end="275:51"><expr pos:start="275:36" pos:end="275:51"><name pos:start="275:36" pos:end="275:51">EXCP_KERNEL_TRAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:38"><expr pos:start="277:13" pos:end="277:37"><name pos:start="277:13" pos:end="277:22"><name pos:start="277:13" pos:end="277:14">dc</name><operator pos:start="277:15" pos:end="277:16">-&gt;</operator><name pos:start="277:17" pos:end="277:22">is_jmp</name></name> <operator pos:start="277:24" pos:end="277:24">=</operator> <name pos:start="277:26" pos:end="277:37">DISAS_UPDATE</name></expr>;</expr_stmt>

            <break pos:start="279:13" pos:end="279:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:else pos:start="283:1" pos:end="283:5">#<cpp:directive pos:start="283:2" pos:end="283:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="285:9" pos:end="300:0"><if pos:start="285:9" pos:end="300:0">if <condition pos:start="285:12" pos:end="285:70">(<expr pos:start="285:13" pos:end="285:69"><name pos:start="285:13" pos:end="285:18"><name pos:start="285:13" pos:end="285:14">dc</name><operator pos:start="285:15" pos:end="285:16">-&gt;</operator><name pos:start="285:17" pos:end="285:18">pc</name></name> <operator pos:start="285:20" pos:end="285:21">&gt;=</operator> <literal type="number" pos:start="285:23" pos:end="285:32">0xfffffff0</literal> <operator pos:start="285:34" pos:end="285:35">&amp;&amp;</operator> <call pos:start="285:37" pos:end="285:69"><name pos:start="285:37" pos:end="285:50">arm_dc_feature</name><argument_list pos:start="285:51" pos:end="285:69">(<argument pos:start="285:52" pos:end="285:53"><expr pos:start="285:52" pos:end="285:53"><name pos:start="285:52" pos:end="285:53">dc</name></expr></argument>, <argument pos:start="285:56" pos:end="285:68"><expr pos:start="285:56" pos:end="285:68"><name pos:start="285:56" pos:end="285:68">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="285:72" pos:end="300:0">{<block_content pos:start="291:13" pos:end="295:18">

            <comment type="block" pos:start="287:13" pos:end="289:47">/* We always get here via a jump, so know we are not in a

               conditional execution block.  */</comment>

            <expr_stmt pos:start="291:13" pos:end="291:56"><expr pos:start="291:13" pos:end="291:55"><call pos:start="291:13" pos:end="291:55"><name pos:start="291:13" pos:end="291:34">gen_exception_internal</name><argument_list pos:start="291:35" pos:end="291:55">(<argument pos:start="291:36" pos:end="291:54"><expr pos:start="291:36" pos:end="291:54"><name pos:start="291:36" pos:end="291:54">EXCP_EXCEPTION_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="293:13" pos:end="293:38"><expr pos:start="293:13" pos:end="293:37"><name pos:start="293:13" pos:end="293:22"><name pos:start="293:13" pos:end="293:14">dc</name><operator pos:start="293:15" pos:end="293:16">-&gt;</operator><name pos:start="293:17" pos:end="293:22">is_jmp</name></name> <operator pos:start="293:24" pos:end="293:24">=</operator> <name pos:start="293:26" pos:end="293:37">DISAS_UPDATE</name></expr>;</expr_stmt>

            <break pos:start="295:13" pos:end="295:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="299:1" pos:end="299:6">#<cpp:directive pos:start="299:2" pos:end="299:6">endif</cpp:directive></cpp:endif>



        <if_stmt pos:start="303:9" pos:end="323:9"><if pos:start="303:9" pos:end="323:9">if <condition pos:start="303:12" pos:end="303:54">(<expr pos:start="303:13" pos:end="303:53"><call pos:start="303:13" pos:end="303:53"><name pos:start="303:13" pos:end="303:20">unlikely</name><argument_list pos:start="303:21" pos:end="303:53">(<argument pos:start="303:22" pos:end="303:52"><expr pos:start="303:22" pos:end="303:52"><operator pos:start="303:22" pos:end="303:22">!</operator><call pos:start="303:23" pos:end="303:52"><name pos:start="303:23" pos:end="303:34">QTAILQ_EMPTY</name><argument_list pos:start="303:35" pos:end="303:52">(<argument pos:start="303:36" pos:end="303:51"><expr pos:start="303:36" pos:end="303:51"><operator pos:start="303:36" pos:end="303:36">&amp;</operator><name pos:start="303:37" pos:end="303:51"><name pos:start="303:37" pos:end="303:38">cs</name><operator pos:start="303:39" pos:end="303:40">-&gt;</operator><name pos:start="303:41" pos:end="303:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="303:56" pos:end="323:9">{<block_content pos:start="305:13" pos:end="321:13">

            <macro pos:start="305:13" pos:end="305:55"><name pos:start="305:13" pos:end="305:26">QTAILQ_FOREACH</name><argument_list pos:start="305:27" pos:end="305:55">(<argument pos:start="305:28" pos:end="305:29">bp</argument>, <argument pos:start="305:32" pos:end="305:47">&amp;cs-&gt;breakpoints</argument>, <argument pos:start="305:50" pos:end="305:54">entry</argument>)</argument_list></macro> <block pos:start="305:57" pos:end="321:13">{<block_content pos:start="307:17" pos:end="319:17">

                <if_stmt pos:start="307:17" pos:end="319:17"><if pos:start="307:17" pos:end="319:17">if <condition pos:start="307:20" pos:end="307:37">(<expr pos:start="307:21" pos:end="307:36"><name pos:start="307:21" pos:end="307:26"><name pos:start="307:21" pos:end="307:22">bp</name><operator pos:start="307:23" pos:end="307:24">-&gt;</operator><name pos:start="307:25" pos:end="307:26">pc</name></name> <operator pos:start="307:28" pos:end="307:29">==</operator> <name pos:start="307:31" pos:end="307:36"><name pos:start="307:31" pos:end="307:32">dc</name><operator pos:start="307:33" pos:end="307:34">-&gt;</operator><name pos:start="307:35" pos:end="307:36">pc</name></name></expr>)</condition> <block pos:start="307:39" pos:end="319:17">{<block_content pos:start="309:21" pos:end="317:41">

                    <expr_stmt pos:start="309:21" pos:end="309:67"><expr pos:start="309:21" pos:end="309:66"><call pos:start="309:21" pos:end="309:66"><name pos:start="309:21" pos:end="309:47">gen_exception_internal_insn</name><argument_list pos:start="309:48" pos:end="309:66">(<argument pos:start="309:49" pos:end="309:50"><expr pos:start="309:49" pos:end="309:50"><name pos:start="309:49" pos:end="309:50">dc</name></expr></argument>, <argument pos:start="309:53" pos:end="309:53"><expr pos:start="309:53" pos:end="309:53"><literal type="number" pos:start="309:53" pos:end="309:53">0</literal></expr></argument>, <argument pos:start="309:56" pos:end="309:65"><expr pos:start="309:56" pos:end="309:65"><name pos:start="309:56" pos:end="309:65">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="311:21" pos:end="313:46">/* Advance PC so that clearing the breakpoint will

                       invalidate this TB.  */</comment>

                    <expr_stmt pos:start="315:21" pos:end="315:32"><expr pos:start="315:21" pos:end="315:31"><name pos:start="315:21" pos:end="315:26"><name pos:start="315:21" pos:end="315:22">dc</name><operator pos:start="315:23" pos:end="315:24">-&gt;</operator><name pos:start="315:25" pos:end="315:26">pc</name></name> <operator pos:start="315:28" pos:end="315:29">+=</operator> <literal type="number" pos:start="315:31" pos:end="315:31">2</literal></expr>;</expr_stmt>

                    <goto pos:start="317:21" pos:end="317:41">goto <name pos:start="317:26" pos:end="317:40">done_generating</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="325:9" pos:end="347:9"><if pos:start="325:9" pos:end="347:9">if <condition pos:start="325:12" pos:end="325:22">(<expr pos:start="325:13" pos:end="325:21"><name pos:start="325:13" pos:end="325:21">search_pc</name></expr>)</condition> <block pos:start="325:24" pos:end="347:9">{<block_content pos:start="327:13" pos:end="345:51">

            <expr_stmt pos:start="327:13" pos:end="327:35"><expr pos:start="327:13" pos:end="327:34"><name pos:start="327:13" pos:end="327:13">j</name> <operator pos:start="327:15" pos:end="327:15">=</operator> <call pos:start="327:17" pos:end="327:34"><name pos:start="327:17" pos:end="327:32">tcg_op_buf_count</name><argument_list pos:start="327:33" pos:end="327:34">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="329:13" pos:end="337:13"><if pos:start="329:13" pos:end="337:13">if <condition pos:start="329:16" pos:end="329:23">(<expr pos:start="329:17" pos:end="329:22"><name pos:start="329:17" pos:end="329:18">lj</name> <operator pos:start="329:20" pos:end="329:20">&lt;</operator> <name pos:start="329:22" pos:end="329:22">j</name></expr>)</condition> <block pos:start="329:25" pos:end="337:13">{<block_content pos:start="331:17" pos:end="335:58">

                <expr_stmt pos:start="331:17" pos:end="331:21"><expr pos:start="331:17" pos:end="331:20"><name pos:start="331:17" pos:end="331:18">lj</name><operator pos:start="331:19" pos:end="331:20">++</operator></expr>;</expr_stmt>

                <while pos:start="333:17" pos:end="335:58">while <condition pos:start="333:23" pos:end="333:30">(<expr pos:start="333:24" pos:end="333:29"><name pos:start="333:24" pos:end="333:25">lj</name> <operator pos:start="333:27" pos:end="333:27">&lt;</operator> <name pos:start="333:29" pos:end="333:29">j</name></expr>)</condition><block type="pseudo" pos:start="335:21" pos:end="335:58"><block_content pos:start="335:21" pos:end="335:58">

                    <expr_stmt pos:start="335:21" pos:end="335:58"><expr pos:start="335:21" pos:end="335:57"><name pos:start="335:21" pos:end="335:53"><name pos:start="335:21" pos:end="335:27">tcg_ctx</name><operator pos:start="335:28" pos:end="335:28">.</operator><name pos:start="335:29" pos:end="335:47">gen_opc_instr_start</name><index pos:start="335:48" pos:end="335:53">[<expr pos:start="335:49" pos:end="335:52"><name pos:start="335:49" pos:end="335:50">lj</name><operator pos:start="335:51" pos:end="335:52">++</operator></expr>]</index></name> <operator pos:start="335:55" pos:end="335:55">=</operator> <literal type="number" pos:start="335:57" pos:end="335:57">0</literal></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:44"><expr pos:start="339:13" pos:end="339:43"><name pos:start="339:13" pos:end="339:34"><name pos:start="339:13" pos:end="339:19">tcg_ctx</name><operator pos:start="339:20" pos:end="339:20">.</operator><name pos:start="339:21" pos:end="339:30">gen_opc_pc</name><index pos:start="339:31" pos:end="339:34">[<expr pos:start="339:32" pos:end="339:33"><name pos:start="339:32" pos:end="339:33">lj</name></expr>]</index></name> <operator pos:start="339:36" pos:end="339:36">=</operator> <name pos:start="339:38" pos:end="339:43"><name pos:start="339:38" pos:end="339:39">dc</name><operator pos:start="339:40" pos:end="339:41">-&gt;</operator><name pos:start="339:42" pos:end="339:43">pc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:92"><expr pos:start="341:13" pos:end="341:91"><name pos:start="341:13" pos:end="341:37"><name pos:start="341:13" pos:end="341:33">gen_opc_condexec_bits</name><index pos:start="341:34" pos:end="341:37">[<expr pos:start="341:35" pos:end="341:36"><name pos:start="341:35" pos:end="341:36">lj</name></expr>]</index></name> <operator pos:start="341:39" pos:end="341:39">=</operator> <operator pos:start="341:41" pos:end="341:41">(</operator><name pos:start="341:42" pos:end="341:58"><name pos:start="341:42" pos:end="341:43">dc</name><operator pos:start="341:44" pos:end="341:45">-&gt;</operator><name pos:start="341:46" pos:end="341:58">condexec_cond</name></name> <operator pos:start="341:60" pos:end="341:61">&lt;&lt;</operator> <literal type="number" pos:start="341:63" pos:end="341:63">4</literal><operator pos:start="341:64" pos:end="341:64">)</operator> <operator pos:start="341:66" pos:end="341:66">|</operator> <operator pos:start="341:68" pos:end="341:68">(</operator><name pos:start="341:69" pos:end="341:85"><name pos:start="341:69" pos:end="341:70">dc</name><operator pos:start="341:71" pos:end="341:72">-&gt;</operator><name pos:start="341:73" pos:end="341:85">condexec_mask</name></name> <operator pos:start="341:87" pos:end="341:88">&gt;&gt;</operator> <literal type="number" pos:start="341:90" pos:end="341:90">1</literal><operator pos:start="341:91" pos:end="341:91">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:48"><expr pos:start="343:13" pos:end="343:47"><name pos:start="343:13" pos:end="343:43"><name pos:start="343:13" pos:end="343:19">tcg_ctx</name><operator pos:start="343:20" pos:end="343:20">.</operator><name pos:start="343:21" pos:end="343:39">gen_opc_instr_start</name><index pos:start="343:40" pos:end="343:43">[<expr pos:start="343:41" pos:end="343:42"><name pos:start="343:41" pos:end="343:42">lj</name></expr>]</index></name> <operator pos:start="343:45" pos:end="343:45">=</operator> <literal type="number" pos:start="343:47" pos:end="343:47">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:51"><expr pos:start="345:13" pos:end="345:50"><name pos:start="345:13" pos:end="345:38"><name pos:start="345:13" pos:end="345:19">tcg_ctx</name><operator pos:start="345:20" pos:end="345:20">.</operator><name pos:start="345:21" pos:end="345:34">gen_opc_icount</name><index pos:start="345:35" pos:end="345:38">[<expr pos:start="345:36" pos:end="345:37"><name pos:start="345:36" pos:end="345:37">lj</name></expr>]</index></name> <operator pos:start="345:40" pos:end="345:40">=</operator> <name pos:start="345:42" pos:end="345:50">num_insns</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="351:9" pos:end="353:27"><if pos:start="351:9" pos:end="353:27">if <condition pos:start="351:12" pos:end="351:68">(<expr pos:start="351:13" pos:end="351:67"><name pos:start="351:13" pos:end="351:21">num_insns</name> <operator pos:start="351:23" pos:end="351:23">+</operator> <literal type="number" pos:start="351:25" pos:end="351:25">1</literal> <operator pos:start="351:27" pos:end="351:28">==</operator> <name pos:start="351:30" pos:end="351:38">max_insns</name> <operator pos:start="351:40" pos:end="351:41">&amp;&amp;</operator> <operator pos:start="351:43" pos:end="351:43">(</operator><name pos:start="351:44" pos:end="351:53"><name pos:start="351:44" pos:end="351:45">tb</name><operator pos:start="351:46" pos:end="351:47">-&gt;</operator><name pos:start="351:48" pos:end="351:53">cflags</name></name> <operator pos:start="351:55" pos:end="351:55">&amp;</operator> <name pos:start="351:57" pos:end="351:66">CF_LAST_IO</name><operator pos:start="351:67" pos:end="351:67">)</operator></expr>)</condition><block type="pseudo" pos:start="353:13" pos:end="353:27"><block_content pos:start="353:13" pos:end="353:27">

            <expr_stmt pos:start="353:13" pos:end="353:27"><expr pos:start="353:13" pos:end="353:26"><call pos:start="353:13" pos:end="353:26"><name pos:start="353:13" pos:end="353:24">gen_io_start</name><argument_list pos:start="353:25" pos:end="353:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="357:9" pos:end="361:9"><if pos:start="357:9" pos:end="361:9">if <condition pos:start="357:12" pos:end="357:76">(<expr pos:start="357:13" pos:end="357:75"><call pos:start="357:13" pos:end="357:75"><name pos:start="357:13" pos:end="357:20">unlikely</name><argument_list pos:start="357:21" pos:end="357:75">(<argument pos:start="357:22" pos:end="357:74"><expr pos:start="357:22" pos:end="357:74"><call pos:start="357:22" pos:end="357:74"><name pos:start="357:22" pos:end="357:39">qemu_loglevel_mask</name><argument_list pos:start="357:40" pos:end="357:74">(<argument pos:start="357:41" pos:end="357:73"><expr pos:start="357:41" pos:end="357:73"><name pos:start="357:41" pos:end="357:53">CPU_LOG_TB_OP</name> <operator pos:start="357:55" pos:end="357:55">|</operator> <name pos:start="357:57" pos:end="357:73">CPU_LOG_TB_OP_OPT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="357:78" pos:end="361:9">{<block_content pos:start="359:13" pos:end="359:45">

            <expr_stmt pos:start="359:13" pos:end="359:45"><expr pos:start="359:13" pos:end="359:44"><call pos:start="359:13" pos:end="359:44"><name pos:start="359:13" pos:end="359:36">tcg_gen_debug_insn_start</name><argument_list pos:start="359:37" pos:end="359:44">(<argument pos:start="359:38" pos:end="359:43"><expr pos:start="359:38" pos:end="359:43"><name pos:start="359:38" pos:end="359:43"><name pos:start="359:38" pos:end="359:39">dc</name><operator pos:start="359:40" pos:end="359:41">-&gt;</operator><name pos:start="359:42" pos:end="359:43">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="365:9" pos:end="395:9"><if pos:start="365:9" pos:end="395:9">if <condition pos:start="365:12" pos:end="365:44">(<expr pos:start="365:13" pos:end="365:43"><name pos:start="365:13" pos:end="365:25"><name pos:start="365:13" pos:end="365:14">dc</name><operator pos:start="365:15" pos:end="365:16">-&gt;</operator><name pos:start="365:17" pos:end="365:25">ss_active</name></name> <operator pos:start="365:27" pos:end="365:28">&amp;&amp;</operator> <operator pos:start="365:30" pos:end="365:30">!</operator><name pos:start="365:31" pos:end="365:43"><name pos:start="365:31" pos:end="365:32">dc</name><operator pos:start="365:33" pos:end="365:34">-&gt;</operator><name pos:start="365:35" pos:end="365:43">pstate_ss</name></name></expr>)</condition> <block pos:start="365:46" pos:end="395:9">{<block_content pos:start="387:13" pos:end="393:33">

            <comment type="block" pos:start="367:13" pos:end="385:15">/* Singlestep state is Active-pending.

             * If we're in this state at the start of a TB then either

             *  a) we just took an exception to an EL which is being debugged

             *     and this is the first insn in the exception handler

             *  b) debug exceptions were masked and we just unmasked them

             *     without changing EL (eg by clearing PSTATE.D)

             * In either case we're going to take a swstep exception in the

             * "did not step an insn" case, and so the syndrome ISV and EX

             * bits should be zero.

             */</comment>

            <expr_stmt pos:start="387:13" pos:end="387:35"><expr pos:start="387:13" pos:end="387:34"><call pos:start="387:13" pos:end="387:34"><name pos:start="387:13" pos:end="387:18">assert</name><argument_list pos:start="387:19" pos:end="387:34">(<argument pos:start="387:20" pos:end="387:33"><expr pos:start="387:20" pos:end="387:33"><name pos:start="387:20" pos:end="387:28">num_insns</name> <operator pos:start="387:30" pos:end="387:31">==</operator> <literal type="number" pos:start="387:33" pos:end="387:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="391:52"><expr pos:start="389:13" pos:end="391:51"><call pos:start="389:13" pos:end="391:51"><name pos:start="389:13" pos:end="389:25">gen_exception</name><argument_list pos:start="389:26" pos:end="391:51">(<argument pos:start="389:27" pos:end="389:35"><expr pos:start="389:27" pos:end="389:35"><name pos:start="389:27" pos:end="389:35">EXCP_UDEF</name></expr></argument>, <argument pos:start="389:38" pos:end="389:69"><expr pos:start="389:38" pos:end="389:69"><call pos:start="389:38" pos:end="389:69"><name pos:start="389:38" pos:end="389:47">syn_swstep</name><argument_list pos:start="389:48" pos:end="389:69">(<argument pos:start="389:49" pos:end="389:62"><expr pos:start="389:49" pos:end="389:62"><name pos:start="389:49" pos:end="389:62"><name pos:start="389:49" pos:end="389:50">dc</name><operator pos:start="389:51" pos:end="389:52">-&gt;</operator><name pos:start="389:53" pos:end="389:62">ss_same_el</name></name></expr></argument>, <argument pos:start="389:65" pos:end="389:65"><expr pos:start="389:65" pos:end="389:65"><literal type="number" pos:start="389:65" pos:end="389:65">0</literal></expr></argument>, <argument pos:start="389:68" pos:end="389:68"><expr pos:start="389:68" pos:end="389:68"><literal type="number" pos:start="389:68" pos:end="389:68">0</literal></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="391:27" pos:end="391:50"><expr pos:start="391:27" pos:end="391:50"><call pos:start="391:27" pos:end="391:50"><name pos:start="391:27" pos:end="391:46">default_exception_el</name><argument_list pos:start="391:47" pos:end="391:50">(<argument pos:start="391:48" pos:end="391:49"><expr pos:start="391:48" pos:end="391:49"><name pos:start="391:48" pos:end="391:49">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="393:13" pos:end="393:33">goto <name pos:start="393:18" pos:end="393:32">done_generating</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="399:9" pos:end="427:9"><if pos:start="399:9" pos:end="419:9">if <condition pos:start="399:12" pos:end="399:22">(<expr pos:start="399:13" pos:end="399:21"><name pos:start="399:13" pos:end="399:21"><name pos:start="399:13" pos:end="399:14">dc</name><operator pos:start="399:15" pos:end="399:16">-&gt;</operator><name pos:start="399:17" pos:end="399:21">thumb</name></name></expr>)</condition> <block pos:start="399:24" pos:end="419:9">{<block_content pos:start="401:13" pos:end="417:13">

            <expr_stmt pos:start="401:13" pos:end="401:38"><expr pos:start="401:13" pos:end="401:37"><call pos:start="401:13" pos:end="401:37"><name pos:start="401:13" pos:end="401:28">disas_thumb_insn</name><argument_list pos:start="401:29" pos:end="401:37">(<argument pos:start="401:30" pos:end="401:32"><expr pos:start="401:30" pos:end="401:32"><name pos:start="401:30" pos:end="401:32">env</name></expr></argument>, <argument pos:start="401:35" pos:end="401:36"><expr pos:start="401:35" pos:end="401:36"><name pos:start="401:35" pos:end="401:36">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="403:13" pos:end="417:13"><if pos:start="403:13" pos:end="417:13">if <condition pos:start="403:16" pos:end="403:34">(<expr pos:start="403:17" pos:end="403:33"><name pos:start="403:17" pos:end="403:33"><name pos:start="403:17" pos:end="403:18">dc</name><operator pos:start="403:19" pos:end="403:20">-&gt;</operator><name pos:start="403:21" pos:end="403:33">condexec_mask</name></name></expr>)</condition> <block pos:start="403:36" pos:end="417:13">{<block_content pos:start="405:17" pos:end="415:17">

                <expr_stmt pos:start="405:17" pos:end="407:68"><expr pos:start="405:17" pos:end="407:67"><name pos:start="405:17" pos:end="405:33"><name pos:start="405:17" pos:end="405:18">dc</name><operator pos:start="405:19" pos:end="405:20">-&gt;</operator><name pos:start="405:21" pos:end="405:33">condexec_cond</name></name> <operator pos:start="405:35" pos:end="405:35">=</operator> <operator pos:start="405:37" pos:end="405:37">(</operator><name pos:start="405:38" pos:end="405:54"><name pos:start="405:38" pos:end="405:39">dc</name><operator pos:start="405:40" pos:end="405:41">-&gt;</operator><name pos:start="405:42" pos:end="405:54">condexec_cond</name></name> <operator pos:start="405:56" pos:end="405:56">&amp;</operator> <literal type="number" pos:start="405:58" pos:end="405:60">0xe</literal><operator pos:start="405:61" pos:end="405:61">)</operator>

                                   <operator pos:start="407:36" pos:end="407:36">|</operator> <operator pos:start="407:38" pos:end="407:38">(</operator><operator pos:start="407:39" pos:end="407:39">(</operator><name pos:start="407:40" pos:end="407:56"><name pos:start="407:40" pos:end="407:41">dc</name><operator pos:start="407:42" pos:end="407:43">-&gt;</operator><name pos:start="407:44" pos:end="407:56">condexec_mask</name></name> <operator pos:start="407:58" pos:end="407:59">&gt;&gt;</operator> <literal type="number" pos:start="407:61" pos:end="407:61">4</literal><operator pos:start="407:62" pos:end="407:62">)</operator> <operator pos:start="407:64" pos:end="407:64">&amp;</operator> <literal type="number" pos:start="407:66" pos:end="407:66">1</literal><operator pos:start="407:67" pos:end="407:67">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="409:17" pos:end="409:68"><expr pos:start="409:17" pos:end="409:67"><name pos:start="409:17" pos:end="409:33"><name pos:start="409:17" pos:end="409:18">dc</name><operator pos:start="409:19" pos:end="409:20">-&gt;</operator><name pos:start="409:21" pos:end="409:33">condexec_mask</name></name> <operator pos:start="409:35" pos:end="409:35">=</operator> <operator pos:start="409:37" pos:end="409:37">(</operator><name pos:start="409:38" pos:end="409:54"><name pos:start="409:38" pos:end="409:39">dc</name><operator pos:start="409:40" pos:end="409:41">-&gt;</operator><name pos:start="409:42" pos:end="409:54">condexec_mask</name></name> <operator pos:start="409:56" pos:end="409:57">&lt;&lt;</operator> <literal type="number" pos:start="409:59" pos:end="409:59">1</literal><operator pos:start="409:60" pos:end="409:60">)</operator> <operator pos:start="409:62" pos:end="409:62">&amp;</operator> <literal type="number" pos:start="409:64" pos:end="409:67">0x1f</literal></expr>;</expr_stmt>

                <if_stmt pos:start="411:17" pos:end="415:17"><if pos:start="411:17" pos:end="415:17">if <condition pos:start="411:20" pos:end="411:43">(<expr pos:start="411:21" pos:end="411:42"><name pos:start="411:21" pos:end="411:37"><name pos:start="411:21" pos:end="411:22">dc</name><operator pos:start="411:23" pos:end="411:24">-&gt;</operator><name pos:start="411:25" pos:end="411:37">condexec_mask</name></name> <operator pos:start="411:39" pos:end="411:40">==</operator> <literal type="number" pos:start="411:42" pos:end="411:42">0</literal></expr>)</condition> <block pos:start="411:45" pos:end="415:17">{<block_content pos:start="413:21" pos:end="413:42">

                    <expr_stmt pos:start="413:21" pos:end="413:42"><expr pos:start="413:21" pos:end="413:41"><name pos:start="413:21" pos:end="413:37"><name pos:start="413:21" pos:end="413:22">dc</name><operator pos:start="413:23" pos:end="413:24">-&gt;</operator><name pos:start="413:25" pos:end="413:37">condexec_cond</name></name> <operator pos:start="413:39" pos:end="413:39">=</operator> <literal type="number" pos:start="413:41" pos:end="413:41">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="419:11" pos:end="427:9">else <block pos:start="419:16" pos:end="427:9">{<block_content pos:start="421:13" pos:end="425:37">

            <decl_stmt pos:start="421:13" pos:end="421:74"><decl pos:start="421:13" pos:end="421:73"><type pos:start="421:13" pos:end="421:24"><name pos:start="421:13" pos:end="421:20">unsigned</name> <name pos:start="421:22" pos:end="421:24">int</name></type> <name pos:start="421:26" pos:end="421:29">insn</name> <init pos:start="421:31" pos:end="421:73">= <expr pos:start="421:33" pos:end="421:73"><call pos:start="421:33" pos:end="421:73"><name pos:start="421:33" pos:end="421:44">arm_ldl_code</name><argument_list pos:start="421:45" pos:end="421:73">(<argument pos:start="421:46" pos:end="421:48"><expr pos:start="421:46" pos:end="421:48"><name pos:start="421:46" pos:end="421:48">env</name></expr></argument>, <argument pos:start="421:51" pos:end="421:56"><expr pos:start="421:51" pos:end="421:56"><name pos:start="421:51" pos:end="421:56"><name pos:start="421:51" pos:end="421:52">dc</name><operator pos:start="421:53" pos:end="421:54">-&gt;</operator><name pos:start="421:55" pos:end="421:56">pc</name></name></expr></argument>, <argument pos:start="421:59" pos:end="421:72"><expr pos:start="421:59" pos:end="421:72"><name pos:start="421:59" pos:end="421:72"><name pos:start="421:59" pos:end="421:60">dc</name><operator pos:start="421:61" pos:end="421:62">-&gt;</operator><name pos:start="421:63" pos:end="421:72">bswap_code</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="423:13" pos:end="423:24"><expr pos:start="423:13" pos:end="423:23"><name pos:start="423:13" pos:end="423:18"><name pos:start="423:13" pos:end="423:14">dc</name><operator pos:start="423:15" pos:end="423:16">-&gt;</operator><name pos:start="423:17" pos:end="423:18">pc</name></name> <operator pos:start="423:20" pos:end="423:21">+=</operator> <literal type="number" pos:start="423:23" pos:end="423:23">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="425:13" pos:end="425:37"><expr pos:start="425:13" pos:end="425:36"><call pos:start="425:13" pos:end="425:36"><name pos:start="425:13" pos:end="425:26">disas_arm_insn</name><argument_list pos:start="425:27" pos:end="425:36">(<argument pos:start="425:28" pos:end="425:29"><expr pos:start="425:28" pos:end="425:29"><name pos:start="425:28" pos:end="425:29">dc</name></expr></argument>, <argument pos:start="425:32" pos:end="425:35"><expr pos:start="425:32" pos:end="425:35"><name pos:start="425:32" pos:end="425:35">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="431:9" pos:end="437:9"><if pos:start="431:9" pos:end="437:9">if <condition pos:start="431:12" pos:end="431:39">(<expr pos:start="431:13" pos:end="431:38"><name pos:start="431:13" pos:end="431:23"><name pos:start="431:13" pos:end="431:14">dc</name><operator pos:start="431:15" pos:end="431:16">-&gt;</operator><name pos:start="431:17" pos:end="431:23">condjmp</name></name> <operator pos:start="431:25" pos:end="431:26">&amp;&amp;</operator> <operator pos:start="431:28" pos:end="431:28">!</operator><name pos:start="431:29" pos:end="431:38"><name pos:start="431:29" pos:end="431:30">dc</name><operator pos:start="431:31" pos:end="431:32">-&gt;</operator><name pos:start="431:33" pos:end="431:38">is_jmp</name></name></expr>)</condition> <block pos:start="431:41" pos:end="437:9">{<block_content pos:start="433:13" pos:end="435:28">

            <expr_stmt pos:start="433:13" pos:end="433:41"><expr pos:start="433:13" pos:end="433:40"><call pos:start="433:13" pos:end="433:40"><name pos:start="433:13" pos:end="433:25">gen_set_label</name><argument_list pos:start="433:26" pos:end="433:40">(<argument pos:start="433:27" pos:end="433:39"><expr pos:start="433:27" pos:end="433:39"><name pos:start="433:27" pos:end="433:39"><name pos:start="433:27" pos:end="433:28">dc</name><operator pos:start="433:29" pos:end="433:30">-&gt;</operator><name pos:start="433:31" pos:end="433:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="435:13" pos:end="435:28"><expr pos:start="435:13" pos:end="435:27"><name pos:start="435:13" pos:end="435:23"><name pos:start="435:13" pos:end="435:14">dc</name><operator pos:start="435:15" pos:end="435:16">-&gt;</operator><name pos:start="435:17" pos:end="435:23">condjmp</name></name> <operator pos:start="435:25" pos:end="435:25">=</operator> <literal type="number" pos:start="435:27" pos:end="435:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="441:9" pos:end="447:9"><if pos:start="441:9" pos:end="447:9">if <condition pos:start="441:12" pos:end="441:35">(<expr pos:start="441:13" pos:end="441:34"><call pos:start="441:13" pos:end="441:34"><name pos:start="441:13" pos:end="441:32">tcg_check_temp_count</name><argument_list pos:start="441:33" pos:end="441:34">()</argument_list></call></expr>)</condition> <block pos:start="441:37" pos:end="447:9">{<block_content pos:start="443:13" pos:end="445:28">

            <expr_stmt pos:start="443:13" pos:end="445:28"><expr pos:start="443:13" pos:end="445:27"><call pos:start="443:13" pos:end="445:27"><name pos:start="443:13" pos:end="443:19">fprintf</name><argument_list pos:start="443:20" pos:end="445:27">(<argument pos:start="443:21" pos:end="443:26"><expr pos:start="443:21" pos:end="443:26"><name pos:start="443:21" pos:end="443:26">stderr</name></expr></argument>, <argument pos:start="443:29" pos:end="443:73"><expr pos:start="443:29" pos:end="443:73"><literal type="string" pos:start="443:29" pos:end="443:56">"TCG temporary leak before "</literal><name pos:start="443:57" pos:end="443:69">TARGET_FMT_lx</name><literal type="string" pos:start="443:70" pos:end="443:73">"\n"</literal></expr></argument>,

                    <argument pos:start="445:21" pos:end="445:26"><expr pos:start="445:21" pos:end="445:26"><name pos:start="445:21" pos:end="445:26"><name pos:start="445:21" pos:end="445:22">dc</name><operator pos:start="445:23" pos:end="445:24">-&gt;</operator><name pos:start="445:25" pos:end="445:26">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="451:9" pos:end="457:64">/* Translation stops when a conditional branch is encountered.

         * Otherwise the subsequent code could get translated several times.

         * Also stop translation when a page boundary is reached.  This

         * ensures prefetch aborts occur at the right place.  */</comment>

        <expr_stmt pos:start="459:9" pos:end="459:21"><expr pos:start="459:9" pos:end="459:20"><name pos:start="459:9" pos:end="459:17">num_insns</name> <operator pos:start="459:19" pos:end="459:20">++</operator></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="461:13" pos:end="471:35">(<expr pos:start="461:14" pos:end="471:34"><operator pos:start="461:14" pos:end="461:14">!</operator><name pos:start="461:15" pos:end="461:24"><name pos:start="461:15" pos:end="461:16">dc</name><operator pos:start="461:17" pos:end="461:18">-&gt;</operator><name pos:start="461:19" pos:end="461:24">is_jmp</name></name> <operator pos:start="461:26" pos:end="461:27">&amp;&amp;</operator> <operator pos:start="461:29" pos:end="461:29">!</operator><call pos:start="461:30" pos:end="461:46"><name pos:start="461:30" pos:end="461:44">tcg_op_buf_full</name><argument_list pos:start="461:45" pos:end="461:46">()</argument_list></call> <operator pos:start="461:48" pos:end="461:49">&amp;&amp;</operator>

             <operator pos:start="463:14" pos:end="463:14">!</operator><name pos:start="463:15" pos:end="463:36"><name pos:start="463:15" pos:end="463:16">cs</name><operator pos:start="463:17" pos:end="463:18">-&gt;</operator><name pos:start="463:19" pos:end="463:36">singlestep_enabled</name></name> <operator pos:start="463:38" pos:end="463:39">&amp;&amp;</operator>

             <operator pos:start="465:14" pos:end="465:14">!</operator><name pos:start="465:15" pos:end="465:24">singlestep</name> <operator pos:start="465:26" pos:end="465:27">&amp;&amp;</operator>

             <operator pos:start="467:14" pos:end="467:14">!</operator><name pos:start="467:15" pos:end="467:27"><name pos:start="467:15" pos:end="467:16">dc</name><operator pos:start="467:17" pos:end="467:18">-&gt;</operator><name pos:start="467:19" pos:end="467:27">ss_active</name></name> <operator pos:start="467:29" pos:end="467:30">&amp;&amp;</operator>

             <name pos:start="469:14" pos:end="469:19"><name pos:start="469:14" pos:end="469:15">dc</name><operator pos:start="469:16" pos:end="469:17">-&gt;</operator><name pos:start="469:18" pos:end="469:19">pc</name></name> <operator pos:start="469:21" pos:end="469:21">&lt;</operator> <name pos:start="469:23" pos:end="469:37">next_page_start</name> <operator pos:start="469:39" pos:end="469:40">&amp;&amp;</operator>

             <name pos:start="471:14" pos:end="471:22">num_insns</name> <operator pos:start="471:24" pos:end="471:24">&lt;</operator> <name pos:start="471:26" pos:end="471:34">max_insns</name></expr>)</condition>;</do>



    <if_stmt pos:start="475:5" pos:end="489:5"><if pos:start="475:5" pos:end="489:5">if <condition pos:start="475:8" pos:end="475:32">(<expr pos:start="475:9" pos:end="475:31"><name pos:start="475:9" pos:end="475:18"><name pos:start="475:9" pos:end="475:10">tb</name><operator pos:start="475:11" pos:end="475:12">-&gt;</operator><name pos:start="475:13" pos:end="475:18">cflags</name></name> <operator pos:start="475:20" pos:end="475:20">&amp;</operator> <name pos:start="475:22" pos:end="475:31">CF_LAST_IO</name></expr>)</condition> <block pos:start="475:34" pos:end="489:5">{<block_content pos:start="477:9" pos:end="487:21">

        <if_stmt pos:start="477:9" pos:end="485:9"><if pos:start="477:9" pos:end="485:9">if <condition pos:start="477:12" pos:end="477:24">(<expr pos:start="477:13" pos:end="477:23"><name pos:start="477:13" pos:end="477:23"><name pos:start="477:13" pos:end="477:14">dc</name><operator pos:start="477:15" pos:end="477:16">-&gt;</operator><name pos:start="477:17" pos:end="477:23">condjmp</name></name></expr>)</condition> <block pos:start="477:26" pos:end="485:9">{<block_content pos:start="483:13" pos:end="483:66">

            <comment type="block" pos:start="479:13" pos:end="481:24">/* FIXME:  This can theoretically happen with self-modifying

               code.  */</comment>

            <expr_stmt pos:start="483:13" pos:end="483:66"><expr pos:start="483:13" pos:end="483:65"><call pos:start="483:13" pos:end="483:65"><name pos:start="483:13" pos:end="483:21">cpu_abort</name><argument_list pos:start="483:22" pos:end="483:65">(<argument pos:start="483:23" pos:end="483:24"><expr pos:start="483:23" pos:end="483:24"><name pos:start="483:23" pos:end="483:24">cs</name></expr></argument>, <argument pos:start="483:27" pos:end="483:64"><expr pos:start="483:27" pos:end="483:64"><literal type="string" pos:start="483:27" pos:end="483:64">"IO on conditional branch instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="487:9" pos:end="487:21"><expr pos:start="487:9" pos:end="487:20"><call pos:start="487:9" pos:end="487:20"><name pos:start="487:9" pos:end="487:18">gen_io_end</name><argument_list pos:start="487:19" pos:end="487:20">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="493:5" pos:end="497:32">/* At this stage dc-&gt;condjmp will only be set when the skipped

       instruction was a conditional branch or trap, and the PC has

       already been written.  */</comment>

    <if_stmt pos:start="499:5" pos:end="677:5"><if pos:start="499:5" pos:end="585:5">if <condition pos:start="499:8" pos:end="499:58">(<expr pos:start="499:9" pos:end="499:57"><call pos:start="499:9" pos:end="499:57"><name pos:start="499:9" pos:end="499:16">unlikely</name><argument_list pos:start="499:17" pos:end="499:57">(<argument pos:start="499:18" pos:end="499:56"><expr pos:start="499:18" pos:end="499:56"><name pos:start="499:18" pos:end="499:39"><name pos:start="499:18" pos:end="499:19">cs</name><operator pos:start="499:20" pos:end="499:21">-&gt;</operator><name pos:start="499:22" pos:end="499:39">singlestep_enabled</name></name> <operator pos:start="499:41" pos:end="499:42">||</operator> <name pos:start="499:44" pos:end="499:56"><name pos:start="499:44" pos:end="499:45">dc</name><operator pos:start="499:46" pos:end="499:47">-&gt;</operator><name pos:start="499:48" pos:end="499:56">ss_active</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="499:60" pos:end="585:5">{<block_content pos:start="503:9" pos:end="583:9">

        <comment type="block" pos:start="501:9" pos:end="501:72">/* Make sure the pc is updated, and raise a debug exception.  */</comment>

        <if_stmt pos:start="503:9" pos:end="539:9"><if pos:start="503:9" pos:end="539:9">if <condition pos:start="503:12" pos:end="503:24">(<expr pos:start="503:13" pos:end="503:23"><name pos:start="503:13" pos:end="503:23"><name pos:start="503:13" pos:end="503:14">dc</name><operator pos:start="503:15" pos:end="503:16">-&gt;</operator><name pos:start="503:17" pos:end="503:23">condjmp</name></name></expr>)</condition> <block pos:start="503:26" pos:end="539:9">{<block_content pos:start="505:13" pos:end="537:41">

            <expr_stmt pos:start="505:13" pos:end="505:33"><expr pos:start="505:13" pos:end="505:32"><call pos:start="505:13" pos:end="505:32"><name pos:start="505:13" pos:end="505:28">gen_set_condexec</name><argument_list pos:start="505:29" pos:end="505:32">(<argument pos:start="505:30" pos:end="505:31"><expr pos:start="505:30" pos:end="505:31"><name pos:start="505:30" pos:end="505:31">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="507:13" pos:end="535:13"><if pos:start="507:13" pos:end="515:13">if <condition pos:start="507:16" pos:end="507:40">(<expr pos:start="507:17" pos:end="507:39"><name pos:start="507:17" pos:end="507:26"><name pos:start="507:17" pos:end="507:18">dc</name><operator pos:start="507:19" pos:end="507:20">-&gt;</operator><name pos:start="507:21" pos:end="507:26">is_jmp</name></name> <operator pos:start="507:28" pos:end="507:29">==</operator> <name pos:start="507:31" pos:end="507:39">DISAS_SWI</name></expr>)</condition> <block pos:start="507:42" pos:end="515:13">{<block_content pos:start="509:17" pos:end="513:56">

                <expr_stmt pos:start="509:17" pos:end="509:35"><expr pos:start="509:17" pos:end="509:34"><call pos:start="509:17" pos:end="509:34"><name pos:start="509:17" pos:end="509:30">gen_ss_advance</name><argument_list pos:start="509:31" pos:end="509:34">(<argument pos:start="509:32" pos:end="509:33"><expr pos:start="509:32" pos:end="509:33"><name pos:start="509:32" pos:end="509:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="511:17" pos:end="513:56"><expr pos:start="511:17" pos:end="513:55"><call pos:start="511:17" pos:end="513:55"><name pos:start="511:17" pos:end="511:29">gen_exception</name><argument_list pos:start="511:30" pos:end="513:55">(<argument pos:start="511:31" pos:end="511:38"><expr pos:start="511:31" pos:end="511:38"><name pos:start="511:31" pos:end="511:38">EXCP_SWI</name></expr></argument>, <argument pos:start="511:41" pos:end="511:76"><expr pos:start="511:41" pos:end="511:76"><call pos:start="511:41" pos:end="511:76"><name pos:start="511:41" pos:end="511:52">syn_aa32_svc</name><argument_list pos:start="511:53" pos:end="511:76">(<argument pos:start="511:54" pos:end="511:64"><expr pos:start="511:54" pos:end="511:64"><name pos:start="511:54" pos:end="511:64"><name pos:start="511:54" pos:end="511:55">dc</name><operator pos:start="511:56" pos:end="511:57">-&gt;</operator><name pos:start="511:58" pos:end="511:64">svc_imm</name></name></expr></argument>, <argument pos:start="511:67" pos:end="511:75"><expr pos:start="511:67" pos:end="511:75"><name pos:start="511:67" pos:end="511:75"><name pos:start="511:67" pos:end="511:68">dc</name><operator pos:start="511:69" pos:end="511:70">-&gt;</operator><name pos:start="511:71" pos:end="511:75">thumb</name></name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="513:31" pos:end="513:54"><expr pos:start="513:31" pos:end="513:54"><call pos:start="513:31" pos:end="513:54"><name pos:start="513:31" pos:end="513:50">default_exception_el</name><argument_list pos:start="513:51" pos:end="513:54">(<argument pos:start="513:52" pos:end="513:53"><expr pos:start="513:52" pos:end="513:53"><name pos:start="513:52" pos:end="513:53">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="515:15" pos:end="521:13">else if <condition pos:start="515:23" pos:end="515:47">(<expr pos:start="515:24" pos:end="515:46"><name pos:start="515:24" pos:end="515:33"><name pos:start="515:24" pos:end="515:25">dc</name><operator pos:start="515:26" pos:end="515:27">-&gt;</operator><name pos:start="515:28" pos:end="515:33">is_jmp</name></name> <operator pos:start="515:35" pos:end="515:36">==</operator> <name pos:start="515:38" pos:end="515:46">DISAS_HVC</name></expr>)</condition> <block pos:start="515:49" pos:end="521:13">{<block_content pos:start="517:17" pos:end="519:70">

                <expr_stmt pos:start="517:17" pos:end="517:35"><expr pos:start="517:17" pos:end="517:34"><call pos:start="517:17" pos:end="517:34"><name pos:start="517:17" pos:end="517:30">gen_ss_advance</name><argument_list pos:start="517:31" pos:end="517:34">(<argument pos:start="517:32" pos:end="517:33"><expr pos:start="517:32" pos:end="517:33"><name pos:start="517:32" pos:end="517:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="519:17" pos:end="519:70"><expr pos:start="519:17" pos:end="519:69"><call pos:start="519:17" pos:end="519:69"><name pos:start="519:17" pos:end="519:29">gen_exception</name><argument_list pos:start="519:30" pos:end="519:69">(<argument pos:start="519:31" pos:end="519:38"><expr pos:start="519:31" pos:end="519:38"><name pos:start="519:31" pos:end="519:38">EXCP_HVC</name></expr></argument>, <argument pos:start="519:41" pos:end="519:65"><expr pos:start="519:41" pos:end="519:65"><call pos:start="519:41" pos:end="519:65"><name pos:start="519:41" pos:end="519:52">syn_aa32_hvc</name><argument_list pos:start="519:53" pos:end="519:65">(<argument pos:start="519:54" pos:end="519:64"><expr pos:start="519:54" pos:end="519:64"><name pos:start="519:54" pos:end="519:64"><name pos:start="519:54" pos:end="519:55">dc</name><operator pos:start="519:56" pos:end="519:57">-&gt;</operator><name pos:start="519:58" pos:end="519:64">svc_imm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="519:68" pos:end="519:68"><expr pos:start="519:68" pos:end="519:68"><literal type="number" pos:start="519:68" pos:end="519:68">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="521:15" pos:end="527:13">else if <condition pos:start="521:23" pos:end="521:47">(<expr pos:start="521:24" pos:end="521:46"><name pos:start="521:24" pos:end="521:33"><name pos:start="521:24" pos:end="521:25">dc</name><operator pos:start="521:26" pos:end="521:27">-&gt;</operator><name pos:start="521:28" pos:end="521:33">is_jmp</name></name> <operator pos:start="521:35" pos:end="521:36">==</operator> <name pos:start="521:38" pos:end="521:46">DISAS_SMC</name></expr>)</condition> <block pos:start="521:49" pos:end="527:13">{<block_content pos:start="523:17" pos:end="525:59">

                <expr_stmt pos:start="523:17" pos:end="523:35"><expr pos:start="523:17" pos:end="523:34"><call pos:start="523:17" pos:end="523:34"><name pos:start="523:17" pos:end="523:30">gen_ss_advance</name><argument_list pos:start="523:31" pos:end="523:34">(<argument pos:start="523:32" pos:end="523:33"><expr pos:start="523:32" pos:end="523:33"><name pos:start="523:32" pos:end="523:33">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="525:17" pos:end="525:59"><expr pos:start="525:17" pos:end="525:58"><call pos:start="525:17" pos:end="525:58"><name pos:start="525:17" pos:end="525:29">gen_exception</name><argument_list pos:start="525:30" pos:end="525:58">(<argument pos:start="525:31" pos:end="525:38"><expr pos:start="525:31" pos:end="525:38"><name pos:start="525:31" pos:end="525:38">EXCP_SMC</name></expr></argument>, <argument pos:start="525:41" pos:end="525:54"><expr pos:start="525:41" pos:end="525:54"><call pos:start="525:41" pos:end="525:54"><name pos:start="525:41" pos:end="525:52">syn_aa32_smc</name><argument_list pos:start="525:53" pos:end="525:54">()</argument_list></call></expr></argument>, <argument pos:start="525:57" pos:end="525:57"><expr pos:start="525:57" pos:end="525:57"><literal type="number" pos:start="525:57" pos:end="525:57">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="527:15" pos:end="531:13">else if <condition pos:start="527:23" pos:end="527:37">(<expr pos:start="527:24" pos:end="527:36"><name pos:start="527:24" pos:end="527:36"><name pos:start="527:24" pos:end="527:25">dc</name><operator pos:start="527:26" pos:end="527:27">-&gt;</operator><name pos:start="527:28" pos:end="527:36">ss_active</name></name></expr>)</condition> <block pos:start="527:39" pos:end="531:13">{<block_content pos:start="529:17" pos:end="529:48">

                <expr_stmt pos:start="529:17" pos:end="529:48"><expr pos:start="529:17" pos:end="529:47"><call pos:start="529:17" pos:end="529:47"><name pos:start="529:17" pos:end="529:43">gen_step_complete_exception</name><argument_list pos:start="529:44" pos:end="529:47">(<argument pos:start="529:45" pos:end="529:46"><expr pos:start="529:45" pos:end="529:46"><name pos:start="529:45" pos:end="529:46">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="531:15" pos:end="535:13">else <block pos:start="531:20" pos:end="535:13">{<block_content pos:start="533:17" pos:end="533:51">

                <expr_stmt pos:start="533:17" pos:end="533:51"><expr pos:start="533:17" pos:end="533:50"><call pos:start="533:17" pos:end="533:50"><name pos:start="533:17" pos:end="533:38">gen_exception_internal</name><argument_list pos:start="533:39" pos:end="533:50">(<argument pos:start="533:40" pos:end="533:49"><expr pos:start="533:40" pos:end="533:49"><name pos:start="533:40" pos:end="533:49">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="537:13" pos:end="537:41"><expr pos:start="537:13" pos:end="537:40"><call pos:start="537:13" pos:end="537:40"><name pos:start="537:13" pos:end="537:25">gen_set_label</name><argument_list pos:start="537:26" pos:end="537:40">(<argument pos:start="537:27" pos:end="537:39"><expr pos:start="537:27" pos:end="537:39"><name pos:start="537:27" pos:end="537:39"><name pos:start="537:27" pos:end="537:28">dc</name><operator pos:start="537:29" pos:end="537:30">-&gt;</operator><name pos:start="537:31" pos:end="537:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="541:9" pos:end="547:9"><if pos:start="541:9" pos:end="547:9">if <condition pos:start="541:12" pos:end="541:39">(<expr pos:start="541:13" pos:end="541:38"><name pos:start="541:13" pos:end="541:23"><name pos:start="541:13" pos:end="541:14">dc</name><operator pos:start="541:15" pos:end="541:16">-&gt;</operator><name pos:start="541:17" pos:end="541:23">condjmp</name></name> <operator pos:start="541:25" pos:end="541:26">||</operator> <operator pos:start="541:28" pos:end="541:28">!</operator><name pos:start="541:29" pos:end="541:38"><name pos:start="541:29" pos:end="541:30">dc</name><operator pos:start="541:31" pos:end="541:32">-&gt;</operator><name pos:start="541:33" pos:end="541:38">is_jmp</name></name></expr>)</condition> <block pos:start="541:41" pos:end="547:9">{<block_content pos:start="543:13" pos:end="545:28">

            <expr_stmt pos:start="543:13" pos:end="543:38"><expr pos:start="543:13" pos:end="543:37"><call pos:start="543:13" pos:end="543:37"><name pos:start="543:13" pos:end="543:25">gen_set_pc_im</name><argument_list pos:start="543:26" pos:end="543:37">(<argument pos:start="543:27" pos:end="543:28"><expr pos:start="543:27" pos:end="543:28"><name pos:start="543:27" pos:end="543:28">dc</name></expr></argument>, <argument pos:start="543:31" pos:end="543:36"><expr pos:start="543:31" pos:end="543:36"><name pos:start="543:31" pos:end="543:36"><name pos:start="543:31" pos:end="543:32">dc</name><operator pos:start="543:33" pos:end="543:34">-&gt;</operator><name pos:start="543:35" pos:end="543:36">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="545:13" pos:end="545:28"><expr pos:start="545:13" pos:end="545:27"><name pos:start="545:13" pos:end="545:23"><name pos:start="545:13" pos:end="545:14">dc</name><operator pos:start="545:15" pos:end="545:16">-&gt;</operator><name pos:start="545:17" pos:end="545:23">condjmp</name></name> <operator pos:start="545:25" pos:end="545:25">=</operator> <literal type="number" pos:start="545:27" pos:end="545:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="549:9" pos:end="549:29"><expr pos:start="549:9" pos:end="549:28"><call pos:start="549:9" pos:end="549:28"><name pos:start="549:9" pos:end="549:24">gen_set_condexec</name><argument_list pos:start="549:25" pos:end="549:28">(<argument pos:start="549:26" pos:end="549:27"><expr pos:start="549:26" pos:end="549:27"><name pos:start="549:26" pos:end="549:27">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="551:9" pos:end="583:9"><if pos:start="551:9" pos:end="559:9">if <condition pos:start="551:12" pos:end="551:52">(<expr pos:start="551:13" pos:end="551:51"><name pos:start="551:13" pos:end="551:22"><name pos:start="551:13" pos:end="551:14">dc</name><operator pos:start="551:15" pos:end="551:16">-&gt;</operator><name pos:start="551:17" pos:end="551:22">is_jmp</name></name> <operator pos:start="551:24" pos:end="551:25">==</operator> <name pos:start="551:27" pos:end="551:35">DISAS_SWI</name> <operator pos:start="551:37" pos:end="551:38">&amp;&amp;</operator> <operator pos:start="551:40" pos:end="551:40">!</operator><name pos:start="551:41" pos:end="551:51"><name pos:start="551:41" pos:end="551:42">dc</name><operator pos:start="551:43" pos:end="551:44">-&gt;</operator><name pos:start="551:45" pos:end="551:51">condjmp</name></name></expr>)</condition> <block pos:start="551:54" pos:end="559:9">{<block_content pos:start="553:13" pos:end="557:52">

            <expr_stmt pos:start="553:13" pos:end="553:31"><expr pos:start="553:13" pos:end="553:30"><call pos:start="553:13" pos:end="553:30"><name pos:start="553:13" pos:end="553:26">gen_ss_advance</name><argument_list pos:start="553:27" pos:end="553:30">(<argument pos:start="553:28" pos:end="553:29"><expr pos:start="553:28" pos:end="553:29"><name pos:start="553:28" pos:end="553:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="555:13" pos:end="557:52"><expr pos:start="555:13" pos:end="557:51"><call pos:start="555:13" pos:end="557:51"><name pos:start="555:13" pos:end="555:25">gen_exception</name><argument_list pos:start="555:26" pos:end="557:51">(<argument pos:start="555:27" pos:end="555:34"><expr pos:start="555:27" pos:end="555:34"><name pos:start="555:27" pos:end="555:34">EXCP_SWI</name></expr></argument>, <argument pos:start="555:37" pos:end="555:72"><expr pos:start="555:37" pos:end="555:72"><call pos:start="555:37" pos:end="555:72"><name pos:start="555:37" pos:end="555:48">syn_aa32_svc</name><argument_list pos:start="555:49" pos:end="555:72">(<argument pos:start="555:50" pos:end="555:60"><expr pos:start="555:50" pos:end="555:60"><name pos:start="555:50" pos:end="555:60"><name pos:start="555:50" pos:end="555:51">dc</name><operator pos:start="555:52" pos:end="555:53">-&gt;</operator><name pos:start="555:54" pos:end="555:60">svc_imm</name></name></expr></argument>, <argument pos:start="555:63" pos:end="555:71"><expr pos:start="555:63" pos:end="555:71"><name pos:start="555:63" pos:end="555:71"><name pos:start="555:63" pos:end="555:64">dc</name><operator pos:start="555:65" pos:end="555:66">-&gt;</operator><name pos:start="555:67" pos:end="555:71">thumb</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="557:27" pos:end="557:50"><expr pos:start="557:27" pos:end="557:50"><call pos:start="557:27" pos:end="557:50"><name pos:start="557:27" pos:end="557:46">default_exception_el</name><argument_list pos:start="557:47" pos:end="557:50">(<argument pos:start="557:48" pos:end="557:49"><expr pos:start="557:48" pos:end="557:49"><name pos:start="557:48" pos:end="557:49">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="559:11" pos:end="565:9">else if <condition pos:start="559:19" pos:end="559:59">(<expr pos:start="559:20" pos:end="559:58"><name pos:start="559:20" pos:end="559:29"><name pos:start="559:20" pos:end="559:21">dc</name><operator pos:start="559:22" pos:end="559:23">-&gt;</operator><name pos:start="559:24" pos:end="559:29">is_jmp</name></name> <operator pos:start="559:31" pos:end="559:32">==</operator> <name pos:start="559:34" pos:end="559:42">DISAS_HVC</name> <operator pos:start="559:44" pos:end="559:45">&amp;&amp;</operator> <operator pos:start="559:47" pos:end="559:47">!</operator><name pos:start="559:48" pos:end="559:58"><name pos:start="559:48" pos:end="559:49">dc</name><operator pos:start="559:50" pos:end="559:51">-&gt;</operator><name pos:start="559:52" pos:end="559:58">condjmp</name></name></expr>)</condition> <block pos:start="559:61" pos:end="565:9">{<block_content pos:start="561:13" pos:end="563:66">

            <expr_stmt pos:start="561:13" pos:end="561:31"><expr pos:start="561:13" pos:end="561:30"><call pos:start="561:13" pos:end="561:30"><name pos:start="561:13" pos:end="561:26">gen_ss_advance</name><argument_list pos:start="561:27" pos:end="561:30">(<argument pos:start="561:28" pos:end="561:29"><expr pos:start="561:28" pos:end="561:29"><name pos:start="561:28" pos:end="561:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="563:13" pos:end="563:66"><expr pos:start="563:13" pos:end="563:65"><call pos:start="563:13" pos:end="563:65"><name pos:start="563:13" pos:end="563:25">gen_exception</name><argument_list pos:start="563:26" pos:end="563:65">(<argument pos:start="563:27" pos:end="563:34"><expr pos:start="563:27" pos:end="563:34"><name pos:start="563:27" pos:end="563:34">EXCP_HVC</name></expr></argument>, <argument pos:start="563:37" pos:end="563:61"><expr pos:start="563:37" pos:end="563:61"><call pos:start="563:37" pos:end="563:61"><name pos:start="563:37" pos:end="563:48">syn_aa32_hvc</name><argument_list pos:start="563:49" pos:end="563:61">(<argument pos:start="563:50" pos:end="563:60"><expr pos:start="563:50" pos:end="563:60"><name pos:start="563:50" pos:end="563:60"><name pos:start="563:50" pos:end="563:51">dc</name><operator pos:start="563:52" pos:end="563:53">-&gt;</operator><name pos:start="563:54" pos:end="563:60">svc_imm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="563:64" pos:end="563:64"><expr pos:start="563:64" pos:end="563:64"><literal type="number" pos:start="563:64" pos:end="563:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="565:11" pos:end="571:9">else if <condition pos:start="565:19" pos:end="565:59">(<expr pos:start="565:20" pos:end="565:58"><name pos:start="565:20" pos:end="565:29"><name pos:start="565:20" pos:end="565:21">dc</name><operator pos:start="565:22" pos:end="565:23">-&gt;</operator><name pos:start="565:24" pos:end="565:29">is_jmp</name></name> <operator pos:start="565:31" pos:end="565:32">==</operator> <name pos:start="565:34" pos:end="565:42">DISAS_SMC</name> <operator pos:start="565:44" pos:end="565:45">&amp;&amp;</operator> <operator pos:start="565:47" pos:end="565:47">!</operator><name pos:start="565:48" pos:end="565:58"><name pos:start="565:48" pos:end="565:49">dc</name><operator pos:start="565:50" pos:end="565:51">-&gt;</operator><name pos:start="565:52" pos:end="565:58">condjmp</name></name></expr>)</condition> <block pos:start="565:61" pos:end="571:9">{<block_content pos:start="567:13" pos:end="569:55">

            <expr_stmt pos:start="567:13" pos:end="567:31"><expr pos:start="567:13" pos:end="567:30"><call pos:start="567:13" pos:end="567:30"><name pos:start="567:13" pos:end="567:26">gen_ss_advance</name><argument_list pos:start="567:27" pos:end="567:30">(<argument pos:start="567:28" pos:end="567:29"><expr pos:start="567:28" pos:end="567:29"><name pos:start="567:28" pos:end="567:29">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="569:13" pos:end="569:55"><expr pos:start="569:13" pos:end="569:54"><call pos:start="569:13" pos:end="569:54"><name pos:start="569:13" pos:end="569:25">gen_exception</name><argument_list pos:start="569:26" pos:end="569:54">(<argument pos:start="569:27" pos:end="569:34"><expr pos:start="569:27" pos:end="569:34"><name pos:start="569:27" pos:end="569:34">EXCP_SMC</name></expr></argument>, <argument pos:start="569:37" pos:end="569:50"><expr pos:start="569:37" pos:end="569:50"><call pos:start="569:37" pos:end="569:50"><name pos:start="569:37" pos:end="569:48">syn_aa32_smc</name><argument_list pos:start="569:49" pos:end="569:50">()</argument_list></call></expr></argument>, <argument pos:start="569:53" pos:end="569:53"><expr pos:start="569:53" pos:end="569:53"><literal type="number" pos:start="569:53" pos:end="569:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="571:11" pos:end="575:9">else if <condition pos:start="571:19" pos:end="571:33">(<expr pos:start="571:20" pos:end="571:32"><name pos:start="571:20" pos:end="571:32"><name pos:start="571:20" pos:end="571:21">dc</name><operator pos:start="571:22" pos:end="571:23">-&gt;</operator><name pos:start="571:24" pos:end="571:32">ss_active</name></name></expr>)</condition> <block pos:start="571:35" pos:end="575:9">{<block_content pos:start="573:13" pos:end="573:44">

            <expr_stmt pos:start="573:13" pos:end="573:44"><expr pos:start="573:13" pos:end="573:43"><call pos:start="573:13" pos:end="573:43"><name pos:start="573:13" pos:end="573:39">gen_step_complete_exception</name><argument_list pos:start="573:40" pos:end="573:43">(<argument pos:start="573:41" pos:end="573:42"><expr pos:start="573:41" pos:end="573:42"><name pos:start="573:41" pos:end="573:42">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="575:11" pos:end="583:9">else <block pos:start="575:16" pos:end="583:9">{<block_content pos:start="581:13" pos:end="581:47">

            <comment type="block" pos:start="577:13" pos:end="579:27">/* FIXME: Single stepping a WFI insn will not halt

               the CPU.  */</comment>

            <expr_stmt pos:start="581:13" pos:end="581:47"><expr pos:start="581:13" pos:end="581:46"><call pos:start="581:13" pos:end="581:46"><name pos:start="581:13" pos:end="581:34">gen_exception_internal</name><argument_list pos:start="581:35" pos:end="581:46">(<argument pos:start="581:36" pos:end="581:45"><expr pos:start="581:36" pos:end="581:45"><name pos:start="581:36" pos:end="581:45">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="585:7" pos:end="677:5">else <block pos:start="585:12" pos:end="677:5">{<block_content pos:start="603:9" pos:end="675:9">

        <comment type="block" pos:start="587:9" pos:end="601:11">/* While branches must always occur at the end of an IT block,

           there are a few other things that can cause us to terminate

           the TB in the middle of an IT block:

            - Exception generating instructions (bkpt, swi, undefined).

            - Page boundaries.

            - Hardware watchpoints.

           Hardware breakpoints have already been handled and skip this code.

         */</comment>

        <expr_stmt pos:start="603:9" pos:end="603:29"><expr pos:start="603:9" pos:end="603:28"><call pos:start="603:9" pos:end="603:28"><name pos:start="603:9" pos:end="603:24">gen_set_condexec</name><argument_list pos:start="603:25" pos:end="603:28">(<argument pos:start="603:26" pos:end="603:27"><expr pos:start="603:26" pos:end="603:27"><name pos:start="603:26" pos:end="603:27">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="605:9" pos:end="663:9">switch<condition pos:start="605:15" pos:end="605:26">(<expr pos:start="605:16" pos:end="605:25"><name pos:start="605:16" pos:end="605:25"><name pos:start="605:16" pos:end="605:17">dc</name><operator pos:start="605:18" pos:end="605:19">-&gt;</operator><name pos:start="605:20" pos:end="605:25">is_jmp</name></name></expr>)</condition> <block pos:start="605:28" pos:end="663:9">{<block_content pos:start="607:9" pos:end="661:18">

        <case pos:start="607:9" pos:end="607:24">case <expr pos:start="607:14" pos:end="607:23"><name pos:start="607:14" pos:end="607:23">DISAS_NEXT</name></expr>:</case>

            <expr_stmt pos:start="609:13" pos:end="609:39"><expr pos:start="609:13" pos:end="609:38"><call pos:start="609:13" pos:end="609:38"><name pos:start="609:13" pos:end="609:23">gen_goto_tb</name><argument_list pos:start="609:24" pos:end="609:38">(<argument pos:start="609:25" pos:end="609:26"><expr pos:start="609:25" pos:end="609:26"><name pos:start="609:25" pos:end="609:26">dc</name></expr></argument>, <argument pos:start="609:29" pos:end="609:29"><expr pos:start="609:29" pos:end="609:29"><literal type="number" pos:start="609:29" pos:end="609:29">1</literal></expr></argument>, <argument pos:start="609:32" pos:end="609:37"><expr pos:start="609:32" pos:end="609:37"><name pos:start="609:32" pos:end="609:37"><name pos:start="609:32" pos:end="609:33">dc</name><operator pos:start="609:34" pos:end="609:35">-&gt;</operator><name pos:start="609:36" pos:end="609:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="611:13" pos:end="611:18">break;</break>

        <default pos:start="613:9" pos:end="613:16">default:</default>

        <case pos:start="615:9" pos:end="615:24">case <expr pos:start="615:14" pos:end="615:23"><name pos:start="615:14" pos:end="615:23">DISAS_JUMP</name></expr>:</case>

        <case pos:start="617:9" pos:end="617:26">case <expr pos:start="617:14" pos:end="617:25"><name pos:start="617:14" pos:end="617:25">DISAS_UPDATE</name></expr>:</case>

            <comment type="block" pos:start="619:13" pos:end="619:79">/* indicate that the hash table must be used to find the next TB */</comment>

            <expr_stmt pos:start="621:13" pos:end="621:31"><expr pos:start="621:13" pos:end="621:30"><call pos:start="621:13" pos:end="621:30"><name pos:start="621:13" pos:end="621:27">tcg_gen_exit_tb</name><argument_list pos:start="621:28" pos:end="621:30">(<argument pos:start="621:29" pos:end="621:29"><expr pos:start="621:29" pos:end="621:29"><literal type="number" pos:start="621:29" pos:end="621:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="623:13" pos:end="623:18">break;</break>

        <case pos:start="625:9" pos:end="625:27">case <expr pos:start="625:14" pos:end="625:26"><name pos:start="625:14" pos:end="625:26">DISAS_TB_JUMP</name></expr>:</case>

            <comment type="block" pos:start="627:13" pos:end="627:42">/* nothing more to generate */</comment>

            <break pos:start="629:13" pos:end="629:18">break;</break>

        <case pos:start="631:9" pos:end="631:23">case <expr pos:start="631:14" pos:end="631:22"><name pos:start="631:14" pos:end="631:22">DISAS_WFI</name></expr>:</case>

            <expr_stmt pos:start="633:13" pos:end="633:36"><expr pos:start="633:13" pos:end="633:35"><call pos:start="633:13" pos:end="633:35"><name pos:start="633:13" pos:end="633:26">gen_helper_wfi</name><argument_list pos:start="633:27" pos:end="633:35">(<argument pos:start="633:28" pos:end="633:34"><expr pos:start="633:28" pos:end="633:34"><name pos:start="633:28" pos:end="633:34">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="635:13" pos:end="635:18">break;</break>

        <case pos:start="637:9" pos:end="637:23">case <expr pos:start="637:14" pos:end="637:22"><name pos:start="637:14" pos:end="637:22">DISAS_WFE</name></expr>:</case>

            <expr_stmt pos:start="639:13" pos:end="639:36"><expr pos:start="639:13" pos:end="639:35"><call pos:start="639:13" pos:end="639:35"><name pos:start="639:13" pos:end="639:26">gen_helper_wfe</name><argument_list pos:start="639:27" pos:end="639:35">(<argument pos:start="639:28" pos:end="639:34"><expr pos:start="639:28" pos:end="639:34"><name pos:start="639:28" pos:end="639:34">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="641:13" pos:end="641:18">break;</break>

        <case pos:start="643:9" pos:end="643:23">case <expr pos:start="643:14" pos:end="643:22"><name pos:start="643:14" pos:end="643:22">DISAS_SWI</name></expr>:</case>

            <expr_stmt pos:start="645:13" pos:end="647:52"><expr pos:start="645:13" pos:end="647:51"><call pos:start="645:13" pos:end="647:51"><name pos:start="645:13" pos:end="645:25">gen_exception</name><argument_list pos:start="645:26" pos:end="647:51">(<argument pos:start="645:27" pos:end="645:34"><expr pos:start="645:27" pos:end="645:34"><name pos:start="645:27" pos:end="645:34">EXCP_SWI</name></expr></argument>, <argument pos:start="645:37" pos:end="645:72"><expr pos:start="645:37" pos:end="645:72"><call pos:start="645:37" pos:end="645:72"><name pos:start="645:37" pos:end="645:48">syn_aa32_svc</name><argument_list pos:start="645:49" pos:end="645:72">(<argument pos:start="645:50" pos:end="645:60"><expr pos:start="645:50" pos:end="645:60"><name pos:start="645:50" pos:end="645:60"><name pos:start="645:50" pos:end="645:51">dc</name><operator pos:start="645:52" pos:end="645:53">-&gt;</operator><name pos:start="645:54" pos:end="645:60">svc_imm</name></name></expr></argument>, <argument pos:start="645:63" pos:end="645:71"><expr pos:start="645:63" pos:end="645:71"><name pos:start="645:63" pos:end="645:71"><name pos:start="645:63" pos:end="645:64">dc</name><operator pos:start="645:65" pos:end="645:66">-&gt;</operator><name pos:start="645:67" pos:end="645:71">thumb</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="647:27" pos:end="647:50"><expr pos:start="647:27" pos:end="647:50"><call pos:start="647:27" pos:end="647:50"><name pos:start="647:27" pos:end="647:46">default_exception_el</name><argument_list pos:start="647:47" pos:end="647:50">(<argument pos:start="647:48" pos:end="647:49"><expr pos:start="647:48" pos:end="647:49"><name pos:start="647:48" pos:end="647:49">dc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="649:13" pos:end="649:18">break;</break>

        <case pos:start="651:9" pos:end="651:23">case <expr pos:start="651:14" pos:end="651:22"><name pos:start="651:14" pos:end="651:22">DISAS_HVC</name></expr>:</case>

            <expr_stmt pos:start="653:13" pos:end="653:66"><expr pos:start="653:13" pos:end="653:65"><call pos:start="653:13" pos:end="653:65"><name pos:start="653:13" pos:end="653:25">gen_exception</name><argument_list pos:start="653:26" pos:end="653:65">(<argument pos:start="653:27" pos:end="653:34"><expr pos:start="653:27" pos:end="653:34"><name pos:start="653:27" pos:end="653:34">EXCP_HVC</name></expr></argument>, <argument pos:start="653:37" pos:end="653:61"><expr pos:start="653:37" pos:end="653:61"><call pos:start="653:37" pos:end="653:61"><name pos:start="653:37" pos:end="653:48">syn_aa32_hvc</name><argument_list pos:start="653:49" pos:end="653:61">(<argument pos:start="653:50" pos:end="653:60"><expr pos:start="653:50" pos:end="653:60"><name pos:start="653:50" pos:end="653:60"><name pos:start="653:50" pos:end="653:51">dc</name><operator pos:start="653:52" pos:end="653:53">-&gt;</operator><name pos:start="653:54" pos:end="653:60">svc_imm</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="653:64" pos:end="653:64"><expr pos:start="653:64" pos:end="653:64"><literal type="number" pos:start="653:64" pos:end="653:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="655:13" pos:end="655:18">break;</break>

        <case pos:start="657:9" pos:end="657:23">case <expr pos:start="657:14" pos:end="657:22"><name pos:start="657:14" pos:end="657:22">DISAS_SMC</name></expr>:</case>

            <expr_stmt pos:start="659:13" pos:end="659:55"><expr pos:start="659:13" pos:end="659:54"><call pos:start="659:13" pos:end="659:54"><name pos:start="659:13" pos:end="659:25">gen_exception</name><argument_list pos:start="659:26" pos:end="659:54">(<argument pos:start="659:27" pos:end="659:34"><expr pos:start="659:27" pos:end="659:34"><name pos:start="659:27" pos:end="659:34">EXCP_SMC</name></expr></argument>, <argument pos:start="659:37" pos:end="659:50"><expr pos:start="659:37" pos:end="659:50"><call pos:start="659:37" pos:end="659:50"><name pos:start="659:37" pos:end="659:48">syn_aa32_smc</name><argument_list pos:start="659:49" pos:end="659:50">()</argument_list></call></expr></argument>, <argument pos:start="659:53" pos:end="659:53"><expr pos:start="659:53" pos:end="659:53"><literal type="number" pos:start="659:53" pos:end="659:53">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="661:13" pos:end="661:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="665:9" pos:end="675:9"><if pos:start="665:9" pos:end="675:9">if <condition pos:start="665:12" pos:end="665:24">(<expr pos:start="665:13" pos:end="665:23"><name pos:start="665:13" pos:end="665:23"><name pos:start="665:13" pos:end="665:14">dc</name><operator pos:start="665:15" pos:end="665:16">-&gt;</operator><name pos:start="665:17" pos:end="665:23">condjmp</name></name></expr>)</condition> <block pos:start="665:26" pos:end="675:9">{<block_content pos:start="667:13" pos:end="673:28">

            <expr_stmt pos:start="667:13" pos:end="667:41"><expr pos:start="667:13" pos:end="667:40"><call pos:start="667:13" pos:end="667:40"><name pos:start="667:13" pos:end="667:25">gen_set_label</name><argument_list pos:start="667:26" pos:end="667:40">(<argument pos:start="667:27" pos:end="667:39"><expr pos:start="667:27" pos:end="667:39"><name pos:start="667:27" pos:end="667:39"><name pos:start="667:27" pos:end="667:28">dc</name><operator pos:start="667:29" pos:end="667:30">-&gt;</operator><name pos:start="667:31" pos:end="667:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="669:13" pos:end="669:33"><expr pos:start="669:13" pos:end="669:32"><call pos:start="669:13" pos:end="669:32"><name pos:start="669:13" pos:end="669:28">gen_set_condexec</name><argument_list pos:start="669:29" pos:end="669:32">(<argument pos:start="669:30" pos:end="669:31"><expr pos:start="669:30" pos:end="669:31"><name pos:start="669:30" pos:end="669:31">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="671:13" pos:end="671:39"><expr pos:start="671:13" pos:end="671:38"><call pos:start="671:13" pos:end="671:38"><name pos:start="671:13" pos:end="671:23">gen_goto_tb</name><argument_list pos:start="671:24" pos:end="671:38">(<argument pos:start="671:25" pos:end="671:26"><expr pos:start="671:25" pos:end="671:26"><name pos:start="671:25" pos:end="671:26">dc</name></expr></argument>, <argument pos:start="671:29" pos:end="671:29"><expr pos:start="671:29" pos:end="671:29"><literal type="number" pos:start="671:29" pos:end="671:29">1</literal></expr></argument>, <argument pos:start="671:32" pos:end="671:37"><expr pos:start="671:32" pos:end="671:37"><name pos:start="671:32" pos:end="671:37"><name pos:start="671:32" pos:end="671:33">dc</name><operator pos:start="671:34" pos:end="671:35">-&gt;</operator><name pos:start="671:36" pos:end="671:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="673:13" pos:end="673:28"><expr pos:start="673:13" pos:end="673:27"><name pos:start="673:13" pos:end="673:23"><name pos:start="673:13" pos:end="673:14">dc</name><operator pos:start="673:15" pos:end="673:16">-&gt;</operator><name pos:start="673:17" pos:end="673:23">condjmp</name></name> <operator pos:start="673:25" pos:end="673:25">=</operator> <literal type="number" pos:start="673:27" pos:end="673:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="681:1" pos:end="681:16"><name pos:start="681:1" pos:end="681:15">done_generating</name>:</label>

    <expr_stmt pos:start="683:5" pos:end="688:0"><expr pos:start="683:5" pos:end="683:29"><call pos:start="683:5" pos:end="683:29"><name pos:start="683:5" pos:end="683:14">gen_tb_end</name><argument_list pos:start="683:15" pos:end="683:29">(<argument pos:start="683:16" pos:end="683:17"><expr pos:start="683:16" pos:end="683:17"><name pos:start="683:16" pos:end="683:17">tb</name></expr></argument>, <argument pos:start="683:20" pos:end="683:28"><expr pos:start="683:20" pos:end="683:28"><name pos:start="683:20" pos:end="683:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="687:1" pos:end="687:18">#<cpp:directive pos:start="687:2" pos:end="687:6">ifdef</cpp:directive> <name pos:start="687:8" pos:end="687:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="689:5" pos:end="704:0"><if pos:start="689:5" pos:end="704:0">if <condition pos:start="689:8" pos:end="689:46">(<expr pos:start="689:9" pos:end="689:45"><call pos:start="689:9" pos:end="689:45"><name pos:start="689:9" pos:end="689:26">qemu_loglevel_mask</name><argument_list pos:start="689:27" pos:end="689:45">(<argument pos:start="689:28" pos:end="689:44"><expr pos:start="689:28" pos:end="689:44"><name pos:start="689:28" pos:end="689:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="689:48" pos:end="704:0">{<block_content pos:start="691:9" pos:end="699:23">

        <expr_stmt pos:start="691:9" pos:end="691:39"><expr pos:start="691:9" pos:end="691:38"><call pos:start="691:9" pos:end="691:38"><name pos:start="691:9" pos:end="691:16">qemu_log</name><argument_list pos:start="691:17" pos:end="691:38">(<argument pos:start="691:18" pos:end="691:37"><expr pos:start="691:18" pos:end="691:37"><literal type="string" pos:start="691:18" pos:end="691:37">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="693:9" pos:end="693:54"><expr pos:start="693:9" pos:end="693:53"><call pos:start="693:9" pos:end="693:53"><name pos:start="693:9" pos:end="693:16">qemu_log</name><argument_list pos:start="693:17" pos:end="693:53">(<argument pos:start="693:18" pos:end="693:27"><expr pos:start="693:18" pos:end="693:27"><literal type="string" pos:start="693:18" pos:end="693:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="693:30" pos:end="693:52"><expr pos:start="693:30" pos:end="693:52"><call pos:start="693:30" pos:end="693:52"><name pos:start="693:30" pos:end="693:42">lookup_symbol</name><argument_list pos:start="693:43" pos:end="693:52">(<argument pos:start="693:44" pos:end="693:51"><expr pos:start="693:44" pos:end="693:51"><name pos:start="693:44" pos:end="693:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="695:9" pos:end="697:60"><expr pos:start="695:9" pos:end="697:59"><call pos:start="695:9" pos:end="697:59"><name pos:start="695:9" pos:end="695:24">log_target_disas</name><argument_list pos:start="695:25" pos:end="697:59">(<argument pos:start="695:26" pos:end="695:28"><expr pos:start="695:26" pos:end="695:28"><name pos:start="695:26" pos:end="695:28">env</name></expr></argument>, <argument pos:start="695:31" pos:end="695:38"><expr pos:start="695:31" pos:end="695:38"><name pos:start="695:31" pos:end="695:38">pc_start</name></expr></argument>, <argument pos:start="695:41" pos:end="695:57"><expr pos:start="695:41" pos:end="695:57"><name pos:start="695:41" pos:end="695:46"><name pos:start="695:41" pos:end="695:42">dc</name><operator pos:start="695:43" pos:end="695:44">-&gt;</operator><name pos:start="695:45" pos:end="695:46">pc</name></name> <operator pos:start="695:48" pos:end="695:48">-</operator> <name pos:start="695:50" pos:end="695:57">pc_start</name></expr></argument>,

                         <argument pos:start="697:26" pos:end="697:58"><expr pos:start="697:26" pos:end="697:58"><name pos:start="697:26" pos:end="697:34"><name pos:start="697:26" pos:end="697:27">dc</name><operator pos:start="697:28" pos:end="697:29">-&gt;</operator><name pos:start="697:30" pos:end="697:34">thumb</name></name> <operator pos:start="697:36" pos:end="697:36">|</operator> <operator pos:start="697:38" pos:end="697:38">(</operator><name pos:start="697:39" pos:end="697:52"><name pos:start="697:39" pos:end="697:40">dc</name><operator pos:start="697:41" pos:end="697:42">-&gt;</operator><name pos:start="697:43" pos:end="697:52">bswap_code</name></name> <operator pos:start="697:54" pos:end="697:55">&lt;&lt;</operator> <literal type="number" pos:start="697:57" pos:end="697:57">1</literal><operator pos:start="697:58" pos:end="697:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="699:9" pos:end="699:23"><expr pos:start="699:9" pos:end="699:22"><call pos:start="699:9" pos:end="699:22"><name pos:start="699:9" pos:end="699:16">qemu_log</name><argument_list pos:start="699:17" pos:end="699:22">(<argument pos:start="699:18" pos:end="699:21"><expr pos:start="699:18" pos:end="699:21"><literal type="string" pos:start="699:18" pos:end="699:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="703:1" pos:end="703:6">#<cpp:directive pos:start="703:2" pos:end="703:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="705:5" pos:end="721:5"><if pos:start="705:5" pos:end="715:5">if <condition pos:start="705:8" pos:end="705:18">(<expr pos:start="705:9" pos:end="705:17"><name pos:start="705:9" pos:end="705:17">search_pc</name></expr>)</condition> <block pos:start="705:20" pos:end="715:5">{<block_content pos:start="707:9" pos:end="713:50">

        <expr_stmt pos:start="707:9" pos:end="707:31"><expr pos:start="707:9" pos:end="707:30"><name pos:start="707:9" pos:end="707:9">j</name> <operator pos:start="707:11" pos:end="707:11">=</operator> <call pos:start="707:13" pos:end="707:30"><name pos:start="707:13" pos:end="707:28">tcg_op_buf_count</name><argument_list pos:start="707:29" pos:end="707:30">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="709:9" pos:end="709:13"><expr pos:start="709:9" pos:end="709:12"><name pos:start="709:9" pos:end="709:10">lj</name><operator pos:start="709:11" pos:end="709:12">++</operator></expr>;</expr_stmt>

        <while pos:start="711:9" pos:end="713:50">while <condition pos:start="711:15" pos:end="711:23">(<expr pos:start="711:16" pos:end="711:22"><name pos:start="711:16" pos:end="711:17">lj</name> <operator pos:start="711:19" pos:end="711:20">&lt;=</operator> <name pos:start="711:22" pos:end="711:22">j</name></expr>)</condition><block type="pseudo" pos:start="713:13" pos:end="713:50"><block_content pos:start="713:13" pos:end="713:50">

            <expr_stmt pos:start="713:13" pos:end="713:50"><expr pos:start="713:13" pos:end="713:49"><name pos:start="713:13" pos:end="713:45"><name pos:start="713:13" pos:end="713:19">tcg_ctx</name><operator pos:start="713:20" pos:end="713:20">.</operator><name pos:start="713:21" pos:end="713:39">gen_opc_instr_start</name><index pos:start="713:40" pos:end="713:45">[<expr pos:start="713:41" pos:end="713:44"><name pos:start="713:41" pos:end="713:42">lj</name><operator pos:start="713:43" pos:end="713:44">++</operator></expr>]</index></name> <operator pos:start="713:47" pos:end="713:47">=</operator> <literal type="number" pos:start="713:49" pos:end="713:49">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if> <else pos:start="715:7" pos:end="721:5">else <block pos:start="715:12" pos:end="721:5">{<block_content pos:start="717:9" pos:end="719:31">

        <expr_stmt pos:start="717:9" pos:end="717:37"><expr pos:start="717:9" pos:end="717:36"><name pos:start="717:9" pos:end="717:16"><name pos:start="717:9" pos:end="717:10">tb</name><operator pos:start="717:11" pos:end="717:12">-&gt;</operator><name pos:start="717:13" pos:end="717:16">size</name></name> <operator pos:start="717:18" pos:end="717:18">=</operator> <name pos:start="717:20" pos:end="717:25"><name pos:start="717:20" pos:end="717:21">dc</name><operator pos:start="717:22" pos:end="717:23">-&gt;</operator><name pos:start="717:24" pos:end="717:25">pc</name></name> <operator pos:start="717:27" pos:end="717:27">-</operator> <name pos:start="717:29" pos:end="717:36">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="719:9" pos:end="719:31"><expr pos:start="719:9" pos:end="719:30"><name pos:start="719:9" pos:end="719:18"><name pos:start="719:9" pos:end="719:10">tb</name><operator pos:start="719:11" pos:end="719:12">-&gt;</operator><name pos:start="719:13" pos:end="719:18">icount</name></name> <operator pos:start="719:20" pos:end="719:20">=</operator> <name pos:start="719:22" pos:end="719:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
