<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17997.c" pos:tabs="8"><function pos:start="1:1" pos:end="321:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">build_feed_streams</name><parameter_list pos:start="1:30" pos:end="1:35">(<parameter pos:start="1:31" pos:end="1:34"><decl pos:start="1:31" pos:end="1:34"><type pos:start="1:31" pos:end="1:34"><name pos:start="1:31" pos:end="1:34">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="321:1">{<block_content pos:start="5:5" pos:end="319:14">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">FFServerStream</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:26">stream</name></decl>, <decl pos:start="5:29" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:20"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:33">feed</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:28">/* gather all streams */</comment>

    <for pos:start="13:5" pos:end="41:5">for<control pos:start="13:8" pos:end="13:68">(<init pos:start="13:9" pos:end="13:37"><expr pos:start="13:9" pos:end="13:36"><name pos:start="13:9" pos:end="13:14">stream</name> <operator pos:start="13:16" pos:end="13:16">=</operator> <name pos:start="13:18" pos:end="13:36"><name pos:start="13:18" pos:end="13:23">config</name><operator pos:start="13:24" pos:end="13:24">.</operator><name pos:start="13:25" pos:end="13:36">first_stream</name></name></expr>;</init> <condition pos:start="13:39" pos:end="13:45"><expr pos:start="13:39" pos:end="13:44"><name pos:start="13:39" pos:end="13:44">stream</name></expr>;</condition> <incr pos:start="13:47" pos:end="13:67"><expr pos:start="13:47" pos:end="13:67"><name pos:start="13:47" pos:end="13:52">stream</name> <operator pos:start="13:54" pos:end="13:54">=</operator> <name pos:start="13:56" pos:end="13:67"><name pos:start="13:56" pos:end="13:61">stream</name><operator pos:start="13:62" pos:end="13:63">-&gt;</operator><name pos:start="13:64" pos:end="13:67">next</name></name></expr></incr>)</control> <block pos:start="13:70" pos:end="41:5">{<block_content pos:start="15:9" pos:end="39:9">

        <expr_stmt pos:start="15:9" pos:end="15:28"><expr pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:12">feed</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <name pos:start="15:16" pos:end="15:27"><name pos:start="15:16" pos:end="15:21">stream</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:27">feed</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="17:9" pos:end="19:21"><if pos:start="17:9" pos:end="19:21">if <condition pos:start="17:12" pos:end="17:18">(<expr pos:start="17:13" pos:end="17:17"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:17">feed</name></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:21"><block_content pos:start="19:13" pos:end="19:21">

            <continue pos:start="19:13" pos:end="19:21">continue;</continue></block_content></block></if></if_stmt>



        <if_stmt pos:start="23:9" pos:end="39:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:28">(<expr pos:start="23:13" pos:end="23:27"><name pos:start="23:13" pos:end="23:27"><name pos:start="23:13" pos:end="23:18">stream</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:27">is_feed</name></name></expr>)</condition> <block pos:start="23:30" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:44">

            <for pos:start="25:13" pos:end="27:44">for<control pos:start="25:16" pos:end="25:45">(<init pos:start="25:17" pos:end="25:20"><expr pos:start="25:17" pos:end="25:19"><name pos:start="25:17" pos:end="25:17">i</name><operator pos:start="25:18" pos:end="25:18">=</operator><literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr>;</init><condition pos:start="25:21" pos:end="25:41"><expr pos:start="25:21" pos:end="25:40"><name pos:start="25:21" pos:end="25:21">i</name><operator pos:start="25:22" pos:end="25:22">&lt;</operator><name pos:start="25:23" pos:end="25:40"><name pos:start="25:23" pos:end="25:28">stream</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:40">nb_streams</name></name></expr>;</condition><incr pos:start="25:42" pos:end="25:44"><expr pos:start="25:42" pos:end="25:44"><name pos:start="25:42" pos:end="25:42">i</name><operator pos:start="25:43" pos:end="25:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="27:17" pos:end="27:44"><block_content pos:start="27:17" pos:end="27:44">

                <expr_stmt pos:start="27:17" pos:end="27:44"><expr pos:start="27:17" pos:end="27:43"><name pos:start="27:17" pos:end="27:39"><name pos:start="27:17" pos:end="27:22">stream</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:36">feed_streams</name><index pos:start="27:37" pos:end="27:39">[<expr pos:start="27:38" pos:end="27:38"><name pos:start="27:38" pos:end="27:38">i</name></expr>]</index></name> <operator pos:start="27:41" pos:end="27:41">=</operator> <name pos:start="27:43" pos:end="27:43">i</name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="39:9">else <block pos:start="29:16" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:76">

            <comment type="block" pos:start="31:13" pos:end="31:55">/* we handle a stream coming from a feed */</comment>

            <for pos:start="33:13" pos:end="37:76">for<control pos:start="33:16" pos:end="33:45">(<init pos:start="33:17" pos:end="33:20"><expr pos:start="33:17" pos:end="33:19"><name pos:start="33:17" pos:end="33:17">i</name><operator pos:start="33:18" pos:end="33:18">=</operator><literal type="number" pos:start="33:19" pos:end="33:19">0</literal></expr>;</init><condition pos:start="33:21" pos:end="33:41"><expr pos:start="33:21" pos:end="33:40"><name pos:start="33:21" pos:end="33:21">i</name><operator pos:start="33:22" pos:end="33:22">&lt;</operator><name pos:start="33:23" pos:end="33:40"><name pos:start="33:23" pos:end="33:28">stream</name><operator pos:start="33:29" pos:end="33:30">-&gt;</operator><name pos:start="33:31" pos:end="33:40">nb_streams</name></name></expr>;</condition><incr pos:start="33:42" pos:end="33:44"><expr pos:start="33:42" pos:end="33:44"><name pos:start="33:42" pos:end="33:42">i</name><operator pos:start="33:43" pos:end="33:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="35:17" pos:end="37:76"><block_content pos:start="35:17" pos:end="37:76">

                <expr_stmt pos:start="35:17" pos:end="37:76"><expr pos:start="35:17" pos:end="37:75"><name pos:start="35:17" pos:end="35:39"><name pos:start="35:17" pos:end="35:22">stream</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:36">feed_streams</name><index pos:start="35:37" pos:end="35:39">[<expr pos:start="35:38" pos:end="35:38"><name pos:start="35:38" pos:end="35:38">i</name></expr>]</index></name> <operator pos:start="35:41" pos:end="35:41">=</operator> <call pos:start="35:43" pos:end="37:75"><name pos:start="35:43" pos:end="35:55">add_av_stream</name><argument_list pos:start="35:56" pos:end="37:75">(<argument pos:start="35:57" pos:end="35:60"><expr pos:start="35:57" pos:end="35:60"><name pos:start="35:57" pos:end="35:60">feed</name></expr></argument>,

                                                        <argument pos:start="37:57" pos:end="37:74"><expr pos:start="37:57" pos:end="37:74"><name pos:start="37:57" pos:end="37:74"><name pos:start="37:57" pos:end="37:62">stream</name><operator pos:start="37:63" pos:end="37:64">-&gt;</operator><name pos:start="37:65" pos:end="37:71">streams</name><index pos:start="37:72" pos:end="37:74">[<expr pos:start="37:73" pos:end="37:73"><name pos:start="37:73" pos:end="37:73">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="45:5" pos:end="45:37">/* create feed files if needed */</comment>

    <for pos:start="47:5" pos:end="311:5">for<control pos:start="47:8" pos:end="47:63">(<init pos:start="47:9" pos:end="47:33"><expr pos:start="47:9" pos:end="47:32"><name pos:start="47:9" pos:end="47:12">feed</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:32"><name pos:start="47:16" pos:end="47:21">config</name><operator pos:start="47:22" pos:end="47:22">.</operator><name pos:start="47:23" pos:end="47:32">first_feed</name></name></expr>;</init> <condition pos:start="47:35" pos:end="47:39"><expr pos:start="47:35" pos:end="47:38"><name pos:start="47:35" pos:end="47:38">feed</name></expr>;</condition> <incr pos:start="47:41" pos:end="47:62"><expr pos:start="47:41" pos:end="47:62"><name pos:start="47:41" pos:end="47:44">feed</name> <operator pos:start="47:46" pos:end="47:46">=</operator> <name pos:start="47:48" pos:end="47:62"><name pos:start="47:48" pos:end="47:51">feed</name><operator pos:start="47:52" pos:end="47:53">-&gt;</operator><name pos:start="47:54" pos:end="47:62">next_feed</name></name></expr></incr>)</control> <block pos:start="47:65" pos:end="311:5">{<block_content pos:start="49:9" pos:end="309:18">

        <decl_stmt pos:start="49:9" pos:end="49:15"><decl pos:start="49:9" pos:end="49:14"><type pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:11">int</name></type> <name pos:start="49:13" pos:end="49:14">fd</name></decl>;</decl_stmt>



        <if_stmt pos:start="53:9" pos:end="211:9"><if pos:start="53:9" pos:end="211:9">if <condition pos:start="53:12" pos:end="53:64">(<expr pos:start="53:13" pos:end="53:63"><call pos:start="53:13" pos:end="53:59"><name pos:start="53:13" pos:end="53:22">avio_check</name><argument_list pos:start="53:23" pos:end="53:59">(<argument pos:start="53:24" pos:end="53:42"><expr pos:start="53:24" pos:end="53:42"><name pos:start="53:24" pos:end="53:42"><name pos:start="53:24" pos:end="53:27">feed</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:42">feed_filename</name></name></expr></argument>, <argument pos:start="53:45" pos:end="53:58"><expr pos:start="53:45" pos:end="53:58"><name pos:start="53:45" pos:end="53:58">AVIO_FLAG_READ</name></expr></argument>)</argument_list></call> <operator pos:start="53:61" pos:end="53:61">&gt;</operator> <literal type="number" pos:start="53:63" pos:end="53:63">0</literal></expr>)</condition> <block pos:start="53:66" pos:end="211:9">{<block_content pos:start="57:13" pos:end="209:13">

            <comment type="block" pos:start="55:13" pos:end="55:35">/* See if it matches */</comment>

            <decl_stmt pos:start="57:13" pos:end="57:38"><decl pos:start="57:13" pos:end="57:37"><type pos:start="57:13" pos:end="57:29"><name pos:start="57:13" pos:end="57:27">AVFormatContext</name> <modifier pos:start="57:29" pos:end="57:29">*</modifier></type><name pos:start="57:30" pos:end="57:30">s</name> <init pos:start="57:32" pos:end="57:37">= <expr pos:start="57:34" pos:end="57:37"><name pos:start="57:34" pos:end="57:37">NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="59:13" pos:end="59:28"><decl pos:start="59:13" pos:end="59:27"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:23">matches</name> <init pos:start="59:25" pos:end="59:27">= <expr pos:start="59:27" pos:end="59:27"><literal type="number" pos:start="59:27" pos:end="59:27">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="63:13" pos:end="191:45"><if pos:start="63:13" pos:end="187:13">if <condition pos:start="63:16" pos:end="63:78">(<expr pos:start="63:17" pos:end="63:77"><call pos:start="63:17" pos:end="63:72"><name pos:start="63:17" pos:end="63:35">avformat_open_input</name><argument_list pos:start="63:36" pos:end="63:72">(<argument pos:start="63:37" pos:end="63:38"><expr pos:start="63:37" pos:end="63:38"><operator pos:start="63:37" pos:end="63:37">&amp;</operator><name pos:start="63:38" pos:end="63:38">s</name></expr></argument>, <argument pos:start="63:41" pos:end="63:59"><expr pos:start="63:41" pos:end="63:59"><name pos:start="63:41" pos:end="63:59"><name pos:start="63:41" pos:end="63:44">feed</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:59">feed_filename</name></name></expr></argument>, <argument pos:start="63:62" pos:end="63:65"><expr pos:start="63:62" pos:end="63:65"><name pos:start="63:62" pos:end="63:65">NULL</name></expr></argument>, <argument pos:start="63:68" pos:end="63:71"><expr pos:start="63:68" pos:end="63:71"><name pos:start="63:68" pos:end="63:71">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="63:74" pos:end="63:75">&gt;=</operator> <literal type="number" pos:start="63:77" pos:end="63:77">0</literal></expr>)</condition> <block pos:start="63:80" pos:end="187:13">{<block_content pos:start="67:17" pos:end="185:41">

                <comment type="block" pos:start="65:17" pos:end="65:37">/* set buffer size */</comment>

                <decl_stmt pos:start="67:17" pos:end="67:68"><decl pos:start="67:17" pos:end="67:67"><type pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:19">int</name></type> <name pos:start="67:21" pos:end="67:23">ret</name> <init pos:start="67:25" pos:end="67:67">= <expr pos:start="67:27" pos:end="67:67"><call pos:start="67:27" pos:end="67:67"><name pos:start="67:27" pos:end="67:43">ffio_set_buf_size</name><argument_list pos:start="67:44" pos:end="67:67">(<argument pos:start="67:45" pos:end="67:49"><expr pos:start="67:45" pos:end="67:49"><name pos:start="67:45" pos:end="67:49"><name pos:start="67:45" pos:end="67:45">s</name><operator pos:start="67:46" pos:end="67:47">-&gt;</operator><name pos:start="67:48" pos:end="67:49">pb</name></name></expr></argument>, <argument pos:start="67:52" pos:end="67:66"><expr pos:start="67:52" pos:end="67:66"><name pos:start="67:52" pos:end="67:66">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="69:17" pos:end="75:17"><if pos:start="69:17" pos:end="75:17">if <condition pos:start="69:20" pos:end="69:28">(<expr pos:start="69:21" pos:end="69:27"><name pos:start="69:21" pos:end="69:23">ret</name> <operator pos:start="69:25" pos:end="69:25">&lt;</operator> <literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr>)</condition> <block pos:start="69:30" pos:end="75:17">{<block_content pos:start="71:21" pos:end="73:30">

                    <expr_stmt pos:start="71:21" pos:end="71:60"><expr pos:start="71:21" pos:end="71:59"><call pos:start="71:21" pos:end="71:59"><name pos:start="71:21" pos:end="71:28">http_log</name><argument_list pos:start="71:29" pos:end="71:59">(<argument pos:start="71:30" pos:end="71:58"><expr pos:start="71:30" pos:end="71:58"><literal type="string" pos:start="71:30" pos:end="71:58">"Failed to set buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="73:21" pos:end="73:30">goto <name pos:start="73:26" pos:end="73:29">bail</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="79:17" pos:end="79:43">/* Now see if it matches */</comment>

                <if_stmt pos:start="81:17" pos:end="181:78"><if pos:start="81:17" pos:end="177:17">if <condition pos:start="81:20" pos:end="81:54">(<expr pos:start="81:21" pos:end="81:53"><name pos:start="81:21" pos:end="81:33"><name pos:start="81:21" pos:end="81:21">s</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:33">nb_streams</name></name> <operator pos:start="81:35" pos:end="81:36">==</operator> <name pos:start="81:38" pos:end="81:53"><name pos:start="81:38" pos:end="81:41">feed</name><operator pos:start="81:42" pos:end="81:43">-&gt;</operator><name pos:start="81:44" pos:end="81:53">nb_streams</name></name></expr>)</condition> <block pos:start="81:56" pos:end="177:17">{<block_content pos:start="83:21" pos:end="175:21">

                    <expr_stmt pos:start="83:21" pos:end="83:32"><expr pos:start="83:21" pos:end="83:31"><name pos:start="83:21" pos:end="83:27">matches</name> <operator pos:start="83:29" pos:end="83:29">=</operator> <literal type="number" pos:start="83:31" pos:end="83:31">1</literal></expr>;</expr_stmt>

                    <for pos:start="85:21" pos:end="175:21">for<control pos:start="85:24" pos:end="85:48">(<init pos:start="85:25" pos:end="85:28"><expr pos:start="85:25" pos:end="85:27"><name pos:start="85:25" pos:end="85:25">i</name><operator pos:start="85:26" pos:end="85:26">=</operator><literal type="number" pos:start="85:27" pos:end="85:27">0</literal></expr>;</init><condition pos:start="85:29" pos:end="85:44"><expr pos:start="85:29" pos:end="85:43"><name pos:start="85:29" pos:end="85:29">i</name><operator pos:start="85:30" pos:end="85:30">&lt;</operator><name pos:start="85:31" pos:end="85:43"><name pos:start="85:31" pos:end="85:31">s</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:43">nb_streams</name></name></expr>;</condition><incr pos:start="85:45" pos:end="85:47"><expr pos:start="85:45" pos:end="85:47"><name pos:start="85:45" pos:end="85:45">i</name><operator pos:start="85:46" pos:end="85:47">++</operator></expr></incr>)</control> <block pos:start="85:50" pos:end="175:21">{<block_content pos:start="87:25" pos:end="173:34">

                        <decl_stmt pos:start="87:25" pos:end="87:42"><decl pos:start="87:25" pos:end="87:36"><type pos:start="87:25" pos:end="87:34"><name pos:start="87:25" pos:end="87:32">AVStream</name> <modifier pos:start="87:34" pos:end="87:34">*</modifier></type><name pos:start="87:35" pos:end="87:36">sf</name></decl>, <decl pos:start="87:39" pos:end="87:41"><type ref="prev" pos:start="87:25" pos:end="87:34"><modifier pos:start="87:39" pos:end="87:39">*</modifier></type><name pos:start="87:40" pos:end="87:41">ss</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="89:25" pos:end="89:46"><expr pos:start="89:25" pos:end="89:45"><name pos:start="89:25" pos:end="89:26">sf</name> <operator pos:start="89:28" pos:end="89:28">=</operator> <name pos:start="89:30" pos:end="89:45"><name pos:start="89:30" pos:end="89:33">feed</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:42">streams</name><index pos:start="89:43" pos:end="89:45">[<expr pos:start="89:44" pos:end="89:44"><name pos:start="89:44" pos:end="89:44">i</name></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="91:25" pos:end="91:43"><expr pos:start="91:25" pos:end="91:42"><name pos:start="91:25" pos:end="91:26">ss</name> <operator pos:start="91:28" pos:end="91:28">=</operator> <name pos:start="91:30" pos:end="91:42"><name pos:start="91:30" pos:end="91:30">s</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:39">streams</name><index pos:start="91:40" pos:end="91:42">[<expr pos:start="91:41" pos:end="91:41"><name pos:start="91:41" pos:end="91:41">i</name></expr>]</index></name></expr>;</expr_stmt>



                        <if_stmt pos:start="95:25" pos:end="169:25"><if pos:start="95:25" pos:end="105:25">if <condition pos:start="95:28" pos:end="97:45">(<expr pos:start="95:29" pos:end="97:44"><name pos:start="95:29" pos:end="95:37"><name pos:start="95:29" pos:end="95:30">sf</name><operator pos:start="95:31" pos:end="95:32">-&gt;</operator><name pos:start="95:33" pos:end="95:37">index</name></name> <operator pos:start="95:39" pos:end="95:40">!=</operator> <name pos:start="95:42" pos:end="95:50"><name pos:start="95:42" pos:end="95:43">ss</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:50">index</name></name> <operator pos:start="95:52" pos:end="95:53">||</operator>

                            <name pos:start="97:29" pos:end="97:34"><name pos:start="97:29" pos:end="97:30">sf</name><operator pos:start="97:31" pos:end="97:32">-&gt;</operator><name pos:start="97:33" pos:end="97:34">id</name></name> <operator pos:start="97:36" pos:end="97:37">!=</operator> <name pos:start="97:39" pos:end="97:44"><name pos:start="97:39" pos:end="97:40">ss</name><operator pos:start="97:41" pos:end="97:42">-&gt;</operator><name pos:start="97:43" pos:end="97:44">id</name></name></expr>)</condition> <block pos:start="97:47" pos:end="105:25">{<block_content pos:start="99:29" pos:end="103:40">

                            <expr_stmt pos:start="99:29" pos:end="101:59"><expr pos:start="99:29" pos:end="101:58"><call pos:start="99:29" pos:end="101:58"><name pos:start="99:29" pos:end="99:36">http_log</name><argument_list pos:start="99:37" pos:end="101:58">(<argument pos:start="99:38" pos:end="99:83"><expr pos:start="99:38" pos:end="99:83"><literal type="string" pos:start="99:38" pos:end="99:83">"Index &amp; Id do not match for stream %d (%s)\n"</literal></expr></argument>,

                                   <argument pos:start="101:36" pos:end="101:36"><expr pos:start="101:36" pos:end="101:36"><name pos:start="101:36" pos:end="101:36">i</name></expr></argument>, <argument pos:start="101:39" pos:end="101:57"><expr pos:start="101:39" pos:end="101:57"><name pos:start="101:39" pos:end="101:57"><name pos:start="101:39" pos:end="101:42">feed</name><operator pos:start="101:43" pos:end="101:44">-&gt;</operator><name pos:start="101:45" pos:end="101:57">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="103:29" pos:end="103:40"><expr pos:start="103:29" pos:end="103:39"><name pos:start="103:29" pos:end="103:35">matches</name> <operator pos:start="103:37" pos:end="103:37">=</operator> <literal type="number" pos:start="103:39" pos:end="103:39">0</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="105:27" pos:end="169:25">else <block pos:start="105:32" pos:end="169:25">{<block_content pos:start="107:29" pos:end="167:29">

                            <decl_stmt pos:start="107:29" pos:end="107:54"><decl pos:start="107:29" pos:end="107:47"><type pos:start="107:29" pos:end="107:44"><name pos:start="107:29" pos:end="107:42">AVCodecContext</name> <modifier pos:start="107:44" pos:end="107:44">*</modifier></type><name pos:start="107:45" pos:end="107:47">ccf</name></decl>, <decl pos:start="107:50" pos:end="107:53"><type ref="prev" pos:start="107:29" pos:end="107:44"><modifier pos:start="107:50" pos:end="107:50">*</modifier></type><name pos:start="107:51" pos:end="107:53">ccs</name></decl>;</decl_stmt>



                            <expr_stmt pos:start="111:29" pos:end="111:44"><expr pos:start="111:29" pos:end="111:43"><name pos:start="111:29" pos:end="111:31">ccf</name> <operator pos:start="111:33" pos:end="111:33">=</operator> <name pos:start="111:35" pos:end="111:43"><name pos:start="111:35" pos:end="111:36">sf</name><operator pos:start="111:37" pos:end="111:38">-&gt;</operator><name pos:start="111:39" pos:end="111:43">codec</name></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="113:29" pos:end="116:0"><expr pos:start="113:29" pos:end="113:43"><name pos:start="113:29" pos:end="113:31">ccs</name> <operator pos:start="113:33" pos:end="113:33">=</operator> <name pos:start="113:35" pos:end="113:43"><name pos:start="113:35" pos:end="113:36">ss</name><operator pos:start="113:37" pos:end="113:38">-&gt;</operator><name pos:start="113:39" pos:end="113:43">codec</name></name></expr>;</expr_stmt>

<cpp:define pos:start="115:1" pos:end="115:42">#<cpp:directive pos:start="115:2" pos:end="115:7">define</cpp:directive> <cpp:macro pos:start="115:9" pos:end="115:22"><name pos:start="115:9" pos:end="115:19">CHECK_CODEC</name><parameter_list pos:start="115:20" pos:end="115:22">(<parameter pos:start="115:21" pos:end="115:21"><type pos:start="115:21" pos:end="115:21"><name pos:start="115:21" pos:end="115:21">x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value pos:start="115:25" pos:end="115:42">(ccf-&gt;x != ccs-&gt;x)</cpp:value></cpp:define>



                            <if_stmt pos:start="119:29" pos:end="167:29"><if pos:start="119:29" pos:end="125:29">if <condition pos:start="119:32" pos:end="119:81">(<expr pos:start="119:33" pos:end="119:80"><call pos:start="119:33" pos:end="119:53"><name pos:start="119:33" pos:end="119:43">CHECK_CODEC</name><argument_list pos:start="119:44" pos:end="119:53">(<argument pos:start="119:45" pos:end="119:52"><expr pos:start="119:45" pos:end="119:52"><name pos:start="119:45" pos:end="119:52">codec_id</name></expr></argument>)</argument_list></call> <operator pos:start="119:55" pos:end="119:56">||</operator> <call pos:start="119:58" pos:end="119:80"><name pos:start="119:58" pos:end="119:68">CHECK_CODEC</name><argument_list pos:start="119:69" pos:end="119:80">(<argument pos:start="119:70" pos:end="119:79"><expr pos:start="119:70" pos:end="119:79"><name pos:start="119:70" pos:end="119:79">codec_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:83" pos:end="125:29">{<block_content pos:start="121:33" pos:end="123:44">

                                <expr_stmt pos:start="121:33" pos:end="121:83"><expr pos:start="121:33" pos:end="121:82"><call pos:start="121:33" pos:end="121:82"><name pos:start="121:33" pos:end="121:40">http_log</name><argument_list pos:start="121:41" pos:end="121:82">(<argument pos:start="121:42" pos:end="121:78"><expr pos:start="121:42" pos:end="121:78"><literal type="string" pos:start="121:42" pos:end="121:78">"Codecs do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="121:81" pos:end="121:81"><expr pos:start="121:81" pos:end="121:81"><name pos:start="121:81" pos:end="121:81">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="123:33" pos:end="123:44"><expr pos:start="123:33" pos:end="123:43"><name pos:start="123:33" pos:end="123:39">matches</name> <operator pos:start="123:41" pos:end="123:41">=</operator> <literal type="number" pos:start="123:43" pos:end="123:43">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="125:31" pos:end="131:29">else if <condition pos:start="125:39" pos:end="125:83">(<expr pos:start="125:40" pos:end="125:82"><call pos:start="125:40" pos:end="125:60"><name pos:start="125:40" pos:end="125:50">CHECK_CODEC</name><argument_list pos:start="125:51" pos:end="125:60">(<argument pos:start="125:52" pos:end="125:59"><expr pos:start="125:52" pos:end="125:59"><name pos:start="125:52" pos:end="125:59">bit_rate</name></expr></argument>)</argument_list></call> <operator pos:start="125:62" pos:end="125:63">||</operator> <call pos:start="125:65" pos:end="125:82"><name pos:start="125:65" pos:end="125:75">CHECK_CODEC</name><argument_list pos:start="125:76" pos:end="125:82">(<argument pos:start="125:77" pos:end="125:81"><expr pos:start="125:77" pos:end="125:81"><name pos:start="125:77" pos:end="125:81">flags</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:85" pos:end="131:29">{<block_content pos:start="127:33" pos:end="129:44">

                                <expr_stmt pos:start="127:33" pos:end="127:91"><expr pos:start="127:33" pos:end="127:90"><call pos:start="127:33" pos:end="127:90"><name pos:start="127:33" pos:end="127:40">http_log</name><argument_list pos:start="127:41" pos:end="127:90">(<argument pos:start="127:42" pos:end="127:86"><expr pos:start="127:42" pos:end="127:86"><literal type="string" pos:start="127:42" pos:end="127:86">"Codec bitrates do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="127:89" pos:end="127:89"><expr pos:start="127:89" pos:end="127:89"><name pos:start="127:89" pos:end="127:89">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="129:33" pos:end="129:44"><expr pos:start="129:33" pos:end="129:43"><name pos:start="129:33" pos:end="129:39">matches</name> <operator pos:start="129:41" pos:end="129:41">=</operator> <literal type="number" pos:start="129:43" pos:end="129:43">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="131:31" pos:end="147:29">else if <condition pos:start="131:39" pos:end="131:77">(<expr pos:start="131:40" pos:end="131:76"><name pos:start="131:40" pos:end="131:54"><name pos:start="131:40" pos:end="131:42">ccf</name><operator pos:start="131:43" pos:end="131:44">-&gt;</operator><name pos:start="131:45" pos:end="131:54">codec_type</name></name> <operator pos:start="131:56" pos:end="131:57">==</operator> <name pos:start="131:59" pos:end="131:76">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="131:79" pos:end="147:29">{<block_content pos:start="133:33" pos:end="145:33">

                                <if_stmt pos:start="133:33" pos:end="145:33"><if pos:start="133:33" pos:end="145:33">if <condition pos:start="133:36" pos:end="139:56">(<expr pos:start="133:37" pos:end="139:55"><call pos:start="133:37" pos:end="133:62"><name pos:start="133:37" pos:end="133:47">CHECK_CODEC</name><argument_list pos:start="133:48" pos:end="133:62">(<argument pos:start="133:49" pos:end="133:61"><expr pos:start="133:49" pos:end="133:61"><name pos:start="133:49" pos:end="133:61"><name pos:start="133:49" pos:end="133:57">time_base</name><operator pos:start="133:58" pos:end="133:58">.</operator><name pos:start="133:59" pos:end="133:61">den</name></name></expr></argument>)</argument_list></call> <operator pos:start="133:64" pos:end="133:65">||</operator>

                                    <call pos:start="135:37" pos:end="135:62"><name pos:start="135:37" pos:end="135:47">CHECK_CODEC</name><argument_list pos:start="135:48" pos:end="135:62">(<argument pos:start="135:49" pos:end="135:61"><expr pos:start="135:49" pos:end="135:61"><name pos:start="135:49" pos:end="135:61"><name pos:start="135:49" pos:end="135:57">time_base</name><operator pos:start="135:58" pos:end="135:58">.</operator><name pos:start="135:59" pos:end="135:61">num</name></name></expr></argument>)</argument_list></call> <operator pos:start="135:64" pos:end="135:65">||</operator>

                                    <call pos:start="137:37" pos:end="137:54"><name pos:start="137:37" pos:end="137:47">CHECK_CODEC</name><argument_list pos:start="137:48" pos:end="137:54">(<argument pos:start="137:49" pos:end="137:53"><expr pos:start="137:49" pos:end="137:53"><name pos:start="137:49" pos:end="137:53">width</name></expr></argument>)</argument_list></call> <operator pos:start="137:56" pos:end="137:57">||</operator>

                                    <call pos:start="139:37" pos:end="139:55"><name pos:start="139:37" pos:end="139:47">CHECK_CODEC</name><argument_list pos:start="139:48" pos:end="139:55">(<argument pos:start="139:49" pos:end="139:54"><expr pos:start="139:49" pos:end="139:54"><name pos:start="139:49" pos:end="139:54">height</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:58" pos:end="145:33">{<block_content pos:start="141:37" pos:end="143:48">

                                    <expr_stmt pos:start="141:37" pos:end="141:114"><expr pos:start="141:37" pos:end="141:113"><call pos:start="141:37" pos:end="141:113"><name pos:start="141:37" pos:end="141:44">http_log</name><argument_list pos:start="141:45" pos:end="141:113">(<argument pos:start="141:46" pos:end="141:109"><expr pos:start="141:46" pos:end="141:109"><literal type="string" pos:start="141:46" pos:end="141:109">"Codec width, height and framerate do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="141:112" pos:end="141:112"><expr pos:start="141:112" pos:end="141:112"><name pos:start="141:112" pos:end="141:112">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="143:37" pos:end="143:48"><expr pos:start="143:37" pos:end="143:47"><name pos:start="143:37" pos:end="143:43">matches</name> <operator pos:start="143:45" pos:end="143:45">=</operator> <literal type="number" pos:start="143:47" pos:end="143:47">0</literal></expr>;</expr_stmt>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></if> <if type="elseif" pos:start="147:31" pos:end="161:29">else if <condition pos:start="147:39" pos:end="147:77">(<expr pos:start="147:40" pos:end="147:76"><name pos:start="147:40" pos:end="147:54"><name pos:start="147:40" pos:end="147:42">ccf</name><operator pos:start="147:43" pos:end="147:44">-&gt;</operator><name pos:start="147:45" pos:end="147:54">codec_type</name></name> <operator pos:start="147:56" pos:end="147:57">==</operator> <name pos:start="147:59" pos:end="147:76">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="147:79" pos:end="161:29">{<block_content pos:start="149:33" pos:end="159:33">

                                <if_stmt pos:start="149:33" pos:end="159:33"><if pos:start="149:33" pos:end="159:33">if <condition pos:start="149:36" pos:end="153:60">(<expr pos:start="149:37" pos:end="153:59"><call pos:start="149:37" pos:end="149:60"><name pos:start="149:37" pos:end="149:47">CHECK_CODEC</name><argument_list pos:start="149:48" pos:end="149:60">(<argument pos:start="149:49" pos:end="149:59"><expr pos:start="149:49" pos:end="149:59"><name pos:start="149:49" pos:end="149:59">sample_rate</name></expr></argument>)</argument_list></call> <operator pos:start="149:62" pos:end="149:63">||</operator>

                                    <call pos:start="151:37" pos:end="151:57"><name pos:start="151:37" pos:end="151:47">CHECK_CODEC</name><argument_list pos:start="151:48" pos:end="151:57">(<argument pos:start="151:49" pos:end="151:56"><expr pos:start="151:49" pos:end="151:56"><name pos:start="151:49" pos:end="151:56">channels</name></expr></argument>)</argument_list></call> <operator pos:start="151:59" pos:end="151:60">||</operator>

                                    <call pos:start="153:37" pos:end="153:59"><name pos:start="153:37" pos:end="153:47">CHECK_CODEC</name><argument_list pos:start="153:48" pos:end="153:59">(<argument pos:start="153:49" pos:end="153:58"><expr pos:start="153:49" pos:end="153:58"><name pos:start="153:49" pos:end="153:58">frame_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="153:62" pos:end="159:33">{<block_content pos:start="155:37" pos:end="157:48">

                                    <expr_stmt pos:start="155:37" pos:end="155:120"><expr pos:start="155:37" pos:end="155:119"><call pos:start="155:37" pos:end="155:119"><name pos:start="155:37" pos:end="155:44">http_log</name><argument_list pos:start="155:45" pos:end="155:119">(<argument pos:start="155:46" pos:end="155:115"><expr pos:start="155:46" pos:end="155:115"><literal type="string" pos:start="155:46" pos:end="155:115">"Codec sample_rate, channels, frame_size do not match for stream %d\n"</literal></expr></argument>, <argument pos:start="155:118" pos:end="155:118"><expr pos:start="155:118" pos:end="155:118"><name pos:start="155:118" pos:end="155:118">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <expr_stmt pos:start="157:37" pos:end="157:48"><expr pos:start="157:37" pos:end="157:47"><name pos:start="157:37" pos:end="157:43">matches</name> <operator pos:start="157:45" pos:end="157:45">=</operator> <literal type="number" pos:start="157:47" pos:end="157:47">0</literal></expr>;</expr_stmt>

                                </block_content>}</block></if></if_stmt>

                            </block_content>}</block></if> <else pos:start="161:31" pos:end="167:29">else <block pos:start="161:36" pos:end="167:29">{<block_content pos:start="163:33" pos:end="165:44">

                                <expr_stmt pos:start="163:33" pos:end="163:65"><expr pos:start="163:33" pos:end="163:64"><call pos:start="163:33" pos:end="163:64"><name pos:start="163:33" pos:end="163:40">http_log</name><argument_list pos:start="163:41" pos:end="163:64">(<argument pos:start="163:42" pos:end="163:63"><expr pos:start="163:42" pos:end="163:63"><literal type="string" pos:start="163:42" pos:end="163:63">"Unknown codec type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="165:33" pos:end="165:44"><expr pos:start="165:33" pos:end="165:43"><name pos:start="165:33" pos:end="165:39">matches</name> <operator pos:start="165:41" pos:end="165:41">=</operator> <literal type="number" pos:start="165:43" pos:end="165:43">0</literal></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="171:25" pos:end="173:34"><if pos:start="171:25" pos:end="173:34">if <condition pos:start="171:28" pos:end="171:37">(<expr pos:start="171:29" pos:end="171:36"><operator pos:start="171:29" pos:end="171:29">!</operator><name pos:start="171:30" pos:end="171:36">matches</name></expr>)</condition><block type="pseudo" pos:start="173:29" pos:end="173:34"><block_content pos:start="173:29" pos:end="173:34">

                            <break pos:start="173:29" pos:end="173:34">break;</break></block_content></block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if> <else pos:start="177:19" pos:end="181:78">else<block type="pseudo" pos:start="179:21" pos:end="181:78"><block_content pos:start="179:21" pos:end="181:78">

                    <expr_stmt pos:start="179:21" pos:end="181:78"><expr pos:start="179:21" pos:end="181:77"><call pos:start="179:21" pos:end="181:77"><name pos:start="179:21" pos:end="179:28">http_log</name><argument_list pos:start="179:29" pos:end="181:77">(<argument pos:start="179:30" pos:end="179:91"><expr pos:start="179:30" pos:end="179:91"><literal type="string" pos:start="179:30" pos:end="179:91">"Deleting feed file '%s' as stream counts differ (%d != %d)\n"</literal></expr></argument>,

                        <argument pos:start="181:25" pos:end="181:43"><expr pos:start="181:25" pos:end="181:43"><name pos:start="181:25" pos:end="181:43"><name pos:start="181:25" pos:end="181:28">feed</name><operator pos:start="181:29" pos:end="181:30">-&gt;</operator><name pos:start="181:31" pos:end="181:43">feed_filename</name></name></expr></argument>, <argument pos:start="181:46" pos:end="181:58"><expr pos:start="181:46" pos:end="181:58"><name pos:start="181:46" pos:end="181:58"><name pos:start="181:46" pos:end="181:46">s</name><operator pos:start="181:47" pos:end="181:48">-&gt;</operator><name pos:start="181:49" pos:end="181:58">nb_streams</name></name></expr></argument>, <argument pos:start="181:61" pos:end="181:76"><expr pos:start="181:61" pos:end="181:76"><name pos:start="181:61" pos:end="181:76"><name pos:start="181:61" pos:end="181:64">feed</name><operator pos:start="181:65" pos:end="181:66">-&gt;</operator><name pos:start="181:67" pos:end="181:76">nb_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <expr_stmt pos:start="185:17" pos:end="185:41"><expr pos:start="185:17" pos:end="185:40"><call pos:start="185:17" pos:end="185:40"><name pos:start="185:17" pos:end="185:36">avformat_close_input</name><argument_list pos:start="185:37" pos:end="185:40">(<argument pos:start="185:38" pos:end="185:39"><expr pos:start="185:38" pos:end="185:39"><operator pos:start="185:38" pos:end="185:38">&amp;</operator><name pos:start="185:39" pos:end="185:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="187:15" pos:end="191:45">else<block type="pseudo" pos:start="189:17" pos:end="191:45"><block_content pos:start="189:17" pos:end="191:45">

                <expr_stmt pos:start="189:17" pos:end="191:45"><expr pos:start="189:17" pos:end="191:44"><call pos:start="189:17" pos:end="191:44"><name pos:start="189:17" pos:end="189:24">http_log</name><argument_list pos:start="189:25" pos:end="191:44">(<argument pos:start="189:26" pos:end="189:80"><expr pos:start="189:26" pos:end="189:80"><literal type="string" pos:start="189:26" pos:end="189:80">"Deleting feed file '%s' as it appears to be corrupt\n"</literal></expr></argument>,

                        <argument pos:start="191:25" pos:end="191:43"><expr pos:start="191:25" pos:end="191:43"><name pos:start="191:25" pos:end="191:43"><name pos:start="191:25" pos:end="191:28">feed</name><operator pos:start="191:29" pos:end="191:30">-&gt;</operator><name pos:start="191:31" pos:end="191:43">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <if_stmt pos:start="195:13" pos:end="209:13"><if pos:start="195:13" pos:end="209:13">if <condition pos:start="195:16" pos:end="195:25">(<expr pos:start="195:17" pos:end="195:24"><operator pos:start="195:17" pos:end="195:17">!</operator><name pos:start="195:18" pos:end="195:24">matches</name></expr>)</condition> <block pos:start="195:27" pos:end="209:13">{<block_content pos:start="197:17" pos:end="207:44">

                <if_stmt pos:start="197:17" pos:end="205:17"><if pos:start="197:17" pos:end="205:17">if <condition pos:start="197:20" pos:end="197:35">(<expr pos:start="197:21" pos:end="197:34"><name pos:start="197:21" pos:end="197:34"><name pos:start="197:21" pos:end="197:24">feed</name><operator pos:start="197:25" pos:end="197:26">-&gt;</operator><name pos:start="197:27" pos:end="197:34">readonly</name></name></expr>)</condition> <block pos:start="197:37" pos:end="205:17">{<block_content pos:start="199:21" pos:end="203:30">

                    <expr_stmt pos:start="199:21" pos:end="201:45"><expr pos:start="199:21" pos:end="201:44"><call pos:start="199:21" pos:end="201:44"><name pos:start="199:21" pos:end="199:28">http_log</name><argument_list pos:start="199:29" pos:end="201:44">(<argument pos:start="199:30" pos:end="199:89"><expr pos:start="199:30" pos:end="199:89"><literal type="string" pos:start="199:30" pos:end="199:89">"Unable to delete feed file '%s' as it is marked readonly\n"</literal></expr></argument>,

                        <argument pos:start="201:25" pos:end="201:43"><expr pos:start="201:25" pos:end="201:43"><name pos:start="201:25" pos:end="201:43"><name pos:start="201:25" pos:end="201:28">feed</name><operator pos:start="201:29" pos:end="201:30">-&gt;</operator><name pos:start="201:31" pos:end="201:43">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="203:21" pos:end="203:30">goto <name pos:start="203:26" pos:end="203:29">bail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:44"><expr pos:start="207:17" pos:end="207:43"><call pos:start="207:17" pos:end="207:43"><name pos:start="207:17" pos:end="207:22">unlink</name><argument_list pos:start="207:23" pos:end="207:43">(<argument pos:start="207:24" pos:end="207:42"><expr pos:start="207:24" pos:end="207:42"><name pos:start="207:24" pos:end="207:42"><name pos:start="207:24" pos:end="207:27">feed</name><operator pos:start="207:28" pos:end="207:29">-&gt;</operator><name pos:start="207:30" pos:end="207:42">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="213:9" pos:end="279:9"><if pos:start="213:9" pos:end="279:9">if <condition pos:start="213:12" pos:end="213:66">(<expr pos:start="213:13" pos:end="213:65"><call pos:start="213:13" pos:end="213:60"><name pos:start="213:13" pos:end="213:22">avio_check</name><argument_list pos:start="213:23" pos:end="213:60">(<argument pos:start="213:24" pos:end="213:42"><expr pos:start="213:24" pos:end="213:42"><name pos:start="213:24" pos:end="213:42"><name pos:start="213:24" pos:end="213:27">feed</name><operator pos:start="213:28" pos:end="213:29">-&gt;</operator><name pos:start="213:30" pos:end="213:42">feed_filename</name></name></expr></argument>, <argument pos:start="213:45" pos:end="213:59"><expr pos:start="213:45" pos:end="213:59"><name pos:start="213:45" pos:end="213:59">AVIO_FLAG_WRITE</name></expr></argument>)</argument_list></call> <operator pos:start="213:62" pos:end="213:63">&lt;=</operator> <literal type="number" pos:start="213:65" pos:end="213:65">0</literal></expr>)</condition> <block pos:start="213:68" pos:end="279:9">{<block_content pos:start="215:13" pos:end="277:37">

            <decl_stmt pos:start="215:13" pos:end="215:58"><decl pos:start="215:13" pos:end="215:57"><type pos:start="215:13" pos:end="215:29"><name pos:start="215:13" pos:end="215:27">AVFormatContext</name> <modifier pos:start="215:29" pos:end="215:29">*</modifier></type><name pos:start="215:30" pos:end="215:30">s</name> <init pos:start="215:32" pos:end="215:57">= <expr pos:start="215:34" pos:end="215:57"><call pos:start="215:34" pos:end="215:57"><name pos:start="215:34" pos:end="215:55">avformat_alloc_context</name><argument_list pos:start="215:56" pos:end="215:57">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="219:13" pos:end="225:13"><if pos:start="219:13" pos:end="225:13">if <condition pos:start="219:16" pos:end="219:19">(<expr pos:start="219:17" pos:end="219:18"><operator pos:start="219:17" pos:end="219:17">!</operator><name pos:start="219:18" pos:end="219:18">s</name></expr>)</condition> <block pos:start="219:21" pos:end="225:13">{<block_content pos:start="221:17" pos:end="223:26">

                <expr_stmt pos:start="221:17" pos:end="221:57"><expr pos:start="221:17" pos:end="221:56"><call pos:start="221:17" pos:end="221:56"><name pos:start="221:17" pos:end="221:24">http_log</name><argument_list pos:start="221:25" pos:end="221:56">(<argument pos:start="221:26" pos:end="221:55"><expr pos:start="221:26" pos:end="221:55"><literal type="string" pos:start="221:26" pos:end="221:55">"Failed to allocate context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="223:17" pos:end="223:26">goto <name pos:start="223:22" pos:end="223:25">bail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="229:13" pos:end="237:13"><if pos:start="229:13" pos:end="237:13">if <condition pos:start="229:16" pos:end="229:31">(<expr pos:start="229:17" pos:end="229:30"><name pos:start="229:17" pos:end="229:30"><name pos:start="229:17" pos:end="229:20">feed</name><operator pos:start="229:21" pos:end="229:22">-&gt;</operator><name pos:start="229:23" pos:end="229:30">readonly</name></name></expr>)</condition> <block pos:start="229:33" pos:end="237:13">{<block_content pos:start="231:17" pos:end="235:26">

                <expr_stmt pos:start="231:17" pos:end="233:41"><expr pos:start="231:17" pos:end="233:40"><call pos:start="231:17" pos:end="233:40"><name pos:start="231:17" pos:end="231:24">http_log</name><argument_list pos:start="231:25" pos:end="233:40">(<argument pos:start="231:26" pos:end="231:85"><expr pos:start="231:26" pos:end="231:85"><literal type="string" pos:start="231:26" pos:end="231:85">"Unable to create feed file '%s' as it is marked readonly\n"</literal></expr></argument>,

                    <argument pos:start="233:21" pos:end="233:39"><expr pos:start="233:21" pos:end="233:39"><name pos:start="233:21" pos:end="233:39"><name pos:start="233:21" pos:end="233:24">feed</name><operator pos:start="233:25" pos:end="233:26">-&gt;</operator><name pos:start="233:27" pos:end="233:39">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="235:17" pos:end="235:26">goto <name pos:start="235:22" pos:end="235:25">bail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="241:13" pos:end="241:55">/* only write the header of the ffm file */</comment>

            <if_stmt pos:start="243:13" pos:end="251:13"><if pos:start="243:13" pos:end="251:13">if <condition pos:start="243:16" pos:end="243:76">(<expr pos:start="243:17" pos:end="243:75"><call pos:start="243:17" pos:end="243:71"><name pos:start="243:17" pos:end="243:25">avio_open</name><argument_list pos:start="243:26" pos:end="243:71">(<argument pos:start="243:27" pos:end="243:32"><expr pos:start="243:27" pos:end="243:32"><operator pos:start="243:27" pos:end="243:27">&amp;</operator><name pos:start="243:28" pos:end="243:32"><name pos:start="243:28" pos:end="243:28">s</name><operator pos:start="243:29" pos:end="243:30">-&gt;</operator><name pos:start="243:31" pos:end="243:32">pb</name></name></expr></argument>, <argument pos:start="243:35" pos:end="243:53"><expr pos:start="243:35" pos:end="243:53"><name pos:start="243:35" pos:end="243:53"><name pos:start="243:35" pos:end="243:38">feed</name><operator pos:start="243:39" pos:end="243:40">-&gt;</operator><name pos:start="243:41" pos:end="243:53">feed_filename</name></name></expr></argument>, <argument pos:start="243:56" pos:end="243:70"><expr pos:start="243:56" pos:end="243:70"><name pos:start="243:56" pos:end="243:70">AVIO_FLAG_WRITE</name></expr></argument>)</argument_list></call> <operator pos:start="243:73" pos:end="243:73">&lt;</operator> <literal type="number" pos:start="243:75" pos:end="243:75">0</literal></expr>)</condition> <block pos:start="243:78" pos:end="251:13">{<block_content pos:start="245:17" pos:end="249:26">

                <expr_stmt pos:start="245:17" pos:end="247:46"><expr pos:start="245:17" pos:end="247:45"><call pos:start="245:17" pos:end="247:45"><name pos:start="245:17" pos:end="245:24">http_log</name><argument_list pos:start="245:25" pos:end="247:45">(<argument pos:start="245:26" pos:end="245:65"><expr pos:start="245:26" pos:end="245:65"><literal type="string" pos:start="245:26" pos:end="245:65">"Could not open output feed file '%s'\n"</literal></expr></argument>,

                         <argument pos:start="247:26" pos:end="247:44"><expr pos:start="247:26" pos:end="247:44"><name pos:start="247:26" pos:end="247:44"><name pos:start="247:26" pos:end="247:29">feed</name><operator pos:start="247:30" pos:end="247:31">-&gt;</operator><name pos:start="247:32" pos:end="247:44">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="249:17" pos:end="249:26">goto <name pos:start="249:22" pos:end="249:25">bail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:35"><expr pos:start="253:13" pos:end="253:34"><name pos:start="253:13" pos:end="253:22"><name pos:start="253:13" pos:end="253:13">s</name><operator pos:start="253:14" pos:end="253:15">-&gt;</operator><name pos:start="253:16" pos:end="253:22">oformat</name></name> <operator pos:start="253:24" pos:end="253:24">=</operator> <name pos:start="253:26" pos:end="253:34"><name pos:start="253:26" pos:end="253:29">feed</name><operator pos:start="253:30" pos:end="253:31">-&gt;</operator><name pos:start="253:32" pos:end="253:34">fmt</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:45"><expr pos:start="255:13" pos:end="255:44"><name pos:start="255:13" pos:end="255:25"><name pos:start="255:13" pos:end="255:13">s</name><operator pos:start="255:14" pos:end="255:15">-&gt;</operator><name pos:start="255:16" pos:end="255:25">nb_streams</name></name> <operator pos:start="255:27" pos:end="255:27">=</operator> <name pos:start="255:29" pos:end="255:44"><name pos:start="255:29" pos:end="255:32">feed</name><operator pos:start="255:33" pos:end="255:34">-&gt;</operator><name pos:start="255:35" pos:end="255:44">nb_streams</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:39"><expr pos:start="257:13" pos:end="257:38"><name pos:start="257:13" pos:end="257:22"><name pos:start="257:13" pos:end="257:13">s</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:22">streams</name></name> <operator pos:start="257:24" pos:end="257:24">=</operator> <name pos:start="257:26" pos:end="257:38"><name pos:start="257:26" pos:end="257:29">feed</name><operator pos:start="257:30" pos:end="257:31">-&gt;</operator><name pos:start="257:32" pos:end="257:38">streams</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="259:13" pos:end="265:13"><if pos:start="259:13" pos:end="265:13">if <condition pos:start="259:16" pos:end="259:51">(<expr pos:start="259:17" pos:end="259:50"><call pos:start="259:17" pos:end="259:46"><name pos:start="259:17" pos:end="259:37">avformat_write_header</name><argument_list pos:start="259:38" pos:end="259:46">(<argument pos:start="259:39" pos:end="259:39"><expr pos:start="259:39" pos:end="259:39"><name pos:start="259:39" pos:end="259:39">s</name></expr></argument>, <argument pos:start="259:42" pos:end="259:45"><expr pos:start="259:42" pos:end="259:45"><name pos:start="259:42" pos:end="259:45">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="259:48" pos:end="259:48">&lt;</operator> <literal type="number" pos:start="259:50" pos:end="259:50">0</literal></expr>)</condition> <block pos:start="259:53" pos:end="265:13">{<block_content pos:start="261:17" pos:end="263:26">

                <expr_stmt pos:start="261:17" pos:end="261:80"><expr pos:start="261:17" pos:end="261:79"><call pos:start="261:17" pos:end="261:79"><name pos:start="261:17" pos:end="261:24">http_log</name><argument_list pos:start="261:25" pos:end="261:79">(<argument pos:start="261:26" pos:end="261:78"><expr pos:start="261:26" pos:end="261:78"><literal type="string" pos:start="261:26" pos:end="261:78">"Container doesn't support the required parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="263:17" pos:end="263:26">goto <name pos:start="263:22" pos:end="263:25">bail</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="267:13" pos:end="267:38">/* XXX: need better API */</comment>

            <expr_stmt pos:start="269:13" pos:end="269:36"><expr pos:start="269:13" pos:end="269:35"><call pos:start="269:13" pos:end="269:35"><name pos:start="269:13" pos:end="269:20">av_freep</name><argument_list pos:start="269:21" pos:end="269:35">(<argument pos:start="269:22" pos:end="269:34"><expr pos:start="269:22" pos:end="269:34"><operator pos:start="269:22" pos:end="269:22">&amp;</operator><name pos:start="269:23" pos:end="269:34"><name pos:start="269:23" pos:end="269:23">s</name><operator pos:start="269:24" pos:end="269:25">-&gt;</operator><name pos:start="269:26" pos:end="269:34">priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:32"><expr pos:start="271:13" pos:end="271:31"><call pos:start="271:13" pos:end="271:31"><name pos:start="271:13" pos:end="271:23">avio_closep</name><argument_list pos:start="271:24" pos:end="271:31">(<argument pos:start="271:25" pos:end="271:30"><expr pos:start="271:25" pos:end="271:30"><operator pos:start="271:25" pos:end="271:25">&amp;</operator><name pos:start="271:26" pos:end="271:30"><name pos:start="271:26" pos:end="271:26">s</name><operator pos:start="271:27" pos:end="271:28">-&gt;</operator><name pos:start="271:29" pos:end="271:30">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:30"><expr pos:start="273:13" pos:end="273:29"><name pos:start="273:13" pos:end="273:22"><name pos:start="273:13" pos:end="273:13">s</name><operator pos:start="273:14" pos:end="273:15">-&gt;</operator><name pos:start="273:16" pos:end="273:22">streams</name></name> <operator pos:start="273:24" pos:end="273:24">=</operator> <name pos:start="273:26" pos:end="273:29">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:30"><expr pos:start="275:13" pos:end="275:29"><name pos:start="275:13" pos:end="275:25"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:25">nb_streams</name></name> <operator pos:start="275:27" pos:end="275:27">=</operator> <literal type="number" pos:start="275:29" pos:end="275:29">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:37"><expr pos:start="277:13" pos:end="277:36"><call pos:start="277:13" pos:end="277:36"><name pos:start="277:13" pos:end="277:33">avformat_free_context</name><argument_list pos:start="277:34" pos:end="277:36">(<argument pos:start="277:35" pos:end="277:35"><expr pos:start="277:35" pos:end="277:35"><name pos:start="277:35" pos:end="277:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="281:9" pos:end="281:43">/* get feed size and write index */</comment>

        <expr_stmt pos:start="283:9" pos:end="283:49"><expr pos:start="283:9" pos:end="283:48"><name pos:start="283:9" pos:end="283:10">fd</name> <operator pos:start="283:12" pos:end="283:12">=</operator> <call pos:start="283:14" pos:end="283:48"><name pos:start="283:14" pos:end="283:17">open</name><argument_list pos:start="283:18" pos:end="283:48">(<argument pos:start="283:19" pos:end="283:37"><expr pos:start="283:19" pos:end="283:37"><name pos:start="283:19" pos:end="283:37"><name pos:start="283:19" pos:end="283:22">feed</name><operator pos:start="283:23" pos:end="283:24">-&gt;</operator><name pos:start="283:25" pos:end="283:37">feed_filename</name></name></expr></argument>, <argument pos:start="283:40" pos:end="283:47"><expr pos:start="283:40" pos:end="283:47"><name pos:start="283:40" pos:end="283:47">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="285:9" pos:end="293:9"><if pos:start="285:9" pos:end="293:9">if <condition pos:start="285:12" pos:end="285:19">(<expr pos:start="285:13" pos:end="285:18"><name pos:start="285:13" pos:end="285:14">fd</name> <operator pos:start="285:16" pos:end="285:16">&lt;</operator> <literal type="number" pos:start="285:18" pos:end="285:18">0</literal></expr>)</condition> <block pos:start="285:21" pos:end="293:9">{<block_content pos:start="287:13" pos:end="291:22">

            <expr_stmt pos:start="287:13" pos:end="289:41"><expr pos:start="287:13" pos:end="289:40"><call pos:start="287:13" pos:end="289:40"><name pos:start="287:13" pos:end="287:20">http_log</name><argument_list pos:start="287:21" pos:end="289:40">(<argument pos:start="287:22" pos:end="287:61"><expr pos:start="287:22" pos:end="287:61"><literal type="string" pos:start="287:22" pos:end="287:61">"Could not open output feed file '%s'\n"</literal></expr></argument>,

                    <argument pos:start="289:21" pos:end="289:39"><expr pos:start="289:21" pos:end="289:39"><name pos:start="289:21" pos:end="289:39"><name pos:start="289:21" pos:end="289:24">feed</name><operator pos:start="289:25" pos:end="289:26">-&gt;</operator><name pos:start="289:27" pos:end="289:39">feed_filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="291:13" pos:end="291:22">goto <name pos:start="291:18" pos:end="291:21">bail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="297:9" pos:end="297:82"><expr pos:start="297:9" pos:end="297:81"><name pos:start="297:9" pos:end="297:30"><name pos:start="297:9" pos:end="297:12">feed</name><operator pos:start="297:13" pos:end="297:14">-&gt;</operator><name pos:start="297:15" pos:end="297:30">feed_write_index</name></name> <operator pos:start="297:32" pos:end="297:32">=</operator> <call pos:start="297:34" pos:end="297:81"><name pos:start="297:34" pos:end="297:38">FFMAX</name><argument_list pos:start="297:39" pos:end="297:81">(<argument pos:start="297:40" pos:end="297:63"><expr pos:start="297:40" pos:end="297:63"><call pos:start="297:40" pos:end="297:63"><name pos:start="297:40" pos:end="297:59">ffm_read_write_index</name><argument_list pos:start="297:60" pos:end="297:63">(<argument pos:start="297:61" pos:end="297:62"><expr pos:start="297:61" pos:end="297:62"><name pos:start="297:61" pos:end="297:62">fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="297:66" pos:end="297:80"><expr pos:start="297:66" pos:end="297:80"><name pos:start="297:66" pos:end="297:80">FFM_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:49"><expr pos:start="299:9" pos:end="299:48"><name pos:start="299:9" pos:end="299:23"><name pos:start="299:9" pos:end="299:12">feed</name><operator pos:start="299:13" pos:end="299:14">-&gt;</operator><name pos:start="299:15" pos:end="299:23">feed_size</name></name> <operator pos:start="299:25" pos:end="299:25">=</operator> <call pos:start="299:27" pos:end="299:48"><name pos:start="299:27" pos:end="299:31">lseek</name><argument_list pos:start="299:32" pos:end="299:48">(<argument pos:start="299:33" pos:end="299:34"><expr pos:start="299:33" pos:end="299:34"><name pos:start="299:33" pos:end="299:34">fd</name></expr></argument>, <argument pos:start="299:37" pos:end="299:37"><expr pos:start="299:37" pos:end="299:37"><literal type="number" pos:start="299:37" pos:end="299:37">0</literal></expr></argument>, <argument pos:start="299:40" pos:end="299:47"><expr pos:start="299:40" pos:end="299:47"><name pos:start="299:40" pos:end="299:47">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="301:9" pos:end="301:63">/* ensure that we do not wrap before the end of file */</comment>

        <if_stmt pos:start="303:9" pos:end="305:50"><if pos:start="303:9" pos:end="305:50">if <condition pos:start="303:12" pos:end="303:73">(<expr pos:start="303:13" pos:end="303:72"><name pos:start="303:13" pos:end="303:31"><name pos:start="303:13" pos:end="303:16">feed</name><operator pos:start="303:17" pos:end="303:18">-&gt;</operator><name pos:start="303:19" pos:end="303:31">feed_max_size</name></name> <operator pos:start="303:33" pos:end="303:34">&amp;&amp;</operator> <name pos:start="303:36" pos:end="303:54"><name pos:start="303:36" pos:end="303:39">feed</name><operator pos:start="303:40" pos:end="303:41">-&gt;</operator><name pos:start="303:42" pos:end="303:54">feed_max_size</name></name> <operator pos:start="303:56" pos:end="303:56">&lt;</operator> <name pos:start="303:58" pos:end="303:72"><name pos:start="303:58" pos:end="303:61">feed</name><operator pos:start="303:62" pos:end="303:63">-&gt;</operator><name pos:start="303:64" pos:end="303:72">feed_size</name></name></expr>)</condition><block type="pseudo" pos:start="305:13" pos:end="305:50"><block_content pos:start="305:13" pos:end="305:50">

            <expr_stmt pos:start="305:13" pos:end="305:50"><expr pos:start="305:13" pos:end="305:49"><name pos:start="305:13" pos:end="305:31"><name pos:start="305:13" pos:end="305:16">feed</name><operator pos:start="305:17" pos:end="305:18">-&gt;</operator><name pos:start="305:19" pos:end="305:31">feed_max_size</name></name> <operator pos:start="305:33" pos:end="305:33">=</operator> <name pos:start="305:35" pos:end="305:49"><name pos:start="305:35" pos:end="305:38">feed</name><operator pos:start="305:39" pos:end="305:40">-&gt;</operator><name pos:start="305:41" pos:end="305:49">feed_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="309:9" pos:end="309:18"><expr pos:start="309:9" pos:end="309:17"><call pos:start="309:9" pos:end="309:17"><name pos:start="309:9" pos:end="309:13">close</name><argument_list pos:start="309:14" pos:end="309:17">(<argument pos:start="309:15" pos:end="309:16"><expr pos:start="309:15" pos:end="309:16"><name pos:start="309:15" pos:end="309:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="313:5" pos:end="313:13">return <expr pos:start="313:12" pos:end="313:12"><literal type="number" pos:start="313:12" pos:end="313:12">0</literal></expr>;</return>



<label pos:start="317:1" pos:end="317:5"><name pos:start="317:1" pos:end="317:4">bail</name>:</label>

    <return pos:start="319:5" pos:end="319:14">return <expr pos:start="319:12" pos:end="319:13"><operator pos:start="319:12" pos:end="319:12">-</operator><literal type="number" pos:start="319:13" pos:end="319:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
