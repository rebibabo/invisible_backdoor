<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19565.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">vnc_display_open</name><parameter_list pos:start="1:21" pos:end="1:55">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:37"><name pos:start="1:22" pos:end="1:33">DisplayState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:37">ds</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:54"><decl pos:start="1:40" pos:end="1:54"><type pos:start="1:40" pos:end="1:54"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="183:1">{<block_content pos:start="5:5" pos:end="181:87">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:19">sockaddr</name></name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:25">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">sockaddr_in</name></name></type> <name pos:start="7:24" pos:end="7:28">iaddr</name></decl>;</decl_stmt>

<cpp:ifndef pos:start="9:1" pos:end="9:14">#<cpp:directive pos:start="9:2" pos:end="9:7">ifndef</cpp:directive> <name pos:start="9:9" pos:end="9:14">_WIN32</name></cpp:ifndef>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:22">sockaddr_un</name></name></type> <name pos:start="11:24" pos:end="11:28">uaddr</name></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18">reuse_addr</name></decl>, <decl pos:start="15:21" pos:end="15:23"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:21" pos:end="15:23">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:13">socklen_t</name></type> <name pos:start="17:15" pos:end="17:21">addrlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:59"><decl pos:start="21:5" pos:end="21:58"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">VncState</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:16">vs</name> <init pos:start="21:18" pos:end="21:58">= <expr pos:start="21:20" pos:end="21:58"><ternary pos:start="21:20" pos:end="21:58"><condition pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:21"><name pos:start="21:20" pos:end="21:21">ds</name></expr> ?</condition><then pos:start="21:25" pos:end="21:46"> <expr pos:start="21:25" pos:end="21:46"><operator pos:start="21:25" pos:end="21:25">(</operator><name pos:start="21:26" pos:end="21:33">VncState</name> <operator pos:start="21:35" pos:end="21:35">*</operator><operator pos:start="21:36" pos:end="21:36">)</operator><name pos:start="21:37" pos:end="21:46"><name pos:start="21:37" pos:end="21:38">ds</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:46">opaque</name></name></expr> </then><else pos:start="21:48" pos:end="21:58">: <expr pos:start="21:50" pos:end="21:58"><name pos:start="21:50" pos:end="21:58">vnc_state</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><call pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:21">vnc_display_close</name><argument_list pos:start="25:22" pos:end="25:25">(<argument pos:start="25:23" pos:end="25:24"><expr pos:start="25:23" pos:end="25:24"><name pos:start="25:23" pos:end="25:24">ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:17"><if pos:start="27:5" pos:end="29:17">if <condition pos:start="27:8" pos:end="27:33">(<expr pos:start="27:9" pos:end="27:32"><call pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:14">strcmp</name><argument_list pos:start="27:15" pos:end="27:27">(<argument pos:start="27:16" pos:end="27:18"><expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">arg</name></expr></argument>, <argument pos:start="27:21" pos:end="27:26"><expr pos:start="27:21" pos:end="27:26"><literal type="string" pos:start="27:21" pos:end="27:26">"none"</literal></expr></argument>)</argument_list></call> <operator pos:start="27:29" pos:end="27:30">==</operator> <literal type="number" pos:start="27:32" pos:end="27:32">0</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:17"><block_content pos:start="29:9" pos:end="29:17">

	<return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="38:0"><if pos:start="33:5" pos:end="38:0">if <condition pos:start="33:8" pos:end="33:37">(<expr pos:start="33:9" pos:end="33:36"><operator pos:start="33:9" pos:end="33:9">!</operator><operator pos:start="33:10" pos:end="33:10">(</operator><name pos:start="33:11" pos:end="33:21"><name pos:start="33:11" pos:end="33:12">vs</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:21">display</name></name> <operator pos:start="33:23" pos:end="33:23">=</operator> <call pos:start="33:25" pos:end="33:35"><name pos:start="33:25" pos:end="33:30">strdup</name><argument_list pos:start="33:31" pos:end="33:35">(<argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><name pos:start="33:32" pos:end="33:34">arg</name></expr></argument>)</argument_list></call><operator pos:start="33:36" pos:end="33:36">)</operator></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="38:0"><block_content pos:start="35:9" pos:end="38:0">

	<return pos:start="35:9" pos:end="38:0">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifndef pos:start="37:1" pos:end="37:14">#<cpp:directive pos:start="37:2" pos:end="37:7">ifndef</cpp:directive> <name pos:start="37:9" pos:end="37:14">_WIN32</name></cpp:ifndef>

    <if_stmt pos:start="39:5" pos:end="141:5"><if pos:start="39:5" pos:end="73:5">if <condition pos:start="39:8" pos:end="39:35">(<expr pos:start="39:9" pos:end="39:34"><call pos:start="39:9" pos:end="39:34"><name pos:start="39:9" pos:end="39:16">strstart</name><argument_list pos:start="39:17" pos:end="39:34">(<argument pos:start="39:18" pos:end="39:20"><expr pos:start="39:18" pos:end="39:20"><name pos:start="39:18" pos:end="39:20">arg</name></expr></argument>, <argument pos:start="39:23" pos:end="39:29"><expr pos:start="39:23" pos:end="39:29"><literal type="string" pos:start="39:23" pos:end="39:29">"unix:"</literal></expr></argument>, <argument pos:start="39:32" pos:end="39:33"><expr pos:start="39:32" pos:end="39:33"><operator pos:start="39:32" pos:end="39:32">&amp;</operator><name pos:start="39:33" pos:end="39:33">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:37" pos:end="73:5">{<block_content pos:start="41:9" pos:end="71:31">

	<expr_stmt pos:start="41:9" pos:end="41:41"><expr pos:start="41:9" pos:end="41:40"><name pos:start="41:9" pos:end="41:12">addr</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <operator pos:start="41:16" pos:end="41:16">(</operator>struct <name pos:start="41:24" pos:end="41:31">sockaddr</name> <operator pos:start="41:33" pos:end="41:33">*</operator><operator pos:start="41:34" pos:end="41:34">)</operator><operator pos:start="41:35" pos:end="41:35">&amp;</operator><name pos:start="41:36" pos:end="41:40">uaddr</name></expr>;</expr_stmt>

	<expr_stmt pos:start="43:9" pos:end="43:32"><expr pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:15">addrlen</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <sizeof pos:start="43:19" pos:end="43:31">sizeof<argument_list pos:start="43:25" pos:end="43:31">(<argument pos:start="43:26" pos:end="43:30"><expr pos:start="43:26" pos:end="43:30"><name pos:start="43:26" pos:end="43:30">uaddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



	<expr_stmt pos:start="47:9" pos:end="47:52"><expr pos:start="47:9" pos:end="47:51"><name pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:10">vs</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:17">lsock</name></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:51"><name pos:start="47:21" pos:end="47:26">socket</name><argument_list pos:start="47:27" pos:end="47:51">(<argument pos:start="47:28" pos:end="47:34"><expr pos:start="47:28" pos:end="47:34"><name pos:start="47:28" pos:end="47:34">PF_UNIX</name></expr></argument>, <argument pos:start="47:37" pos:end="47:47"><expr pos:start="47:37" pos:end="47:47"><name pos:start="47:37" pos:end="47:47">SOCK_STREAM</name></expr></argument>, <argument pos:start="47:50" pos:end="47:50"><expr pos:start="47:50" pos:end="47:50"><literal type="number" pos:start="47:50" pos:end="47:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="49:9" pos:end="59:9"><if pos:start="49:9" pos:end="59:9">if <condition pos:start="49:12" pos:end="49:28">(<expr pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:14">vs</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:21">lsock</name></name> <operator pos:start="49:23" pos:end="49:24">==</operator> <operator pos:start="49:26" pos:end="49:26">-</operator><literal type="number" pos:start="49:27" pos:end="49:27">1</literal></expr>)</condition> <block pos:start="49:30" pos:end="59:9">{<block_content pos:start="51:13" pos:end="57:22">

	    <expr_stmt pos:start="51:13" pos:end="51:57"><expr pos:start="51:13" pos:end="51:56"><call pos:start="51:13" pos:end="51:56"><name pos:start="51:13" pos:end="51:19">fprintf</name><argument_list pos:start="51:20" pos:end="51:56">(<argument pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:26">stderr</name></expr></argument>, <argument pos:start="51:29" pos:end="51:55"><expr pos:start="51:29" pos:end="51:55"><literal type="string" pos:start="51:29" pos:end="51:55">"Could not create socket\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="53:13" pos:end="53:30"><expr pos:start="53:13" pos:end="53:29"><call pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:16">free</name><argument_list pos:start="53:17" pos:end="53:29">(<argument pos:start="53:18" pos:end="53:28"><expr pos:start="53:18" pos:end="53:28"><name pos:start="53:18" pos:end="53:28"><name pos:start="53:18" pos:end="53:19">vs</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:28">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="55:13" pos:end="55:31"><expr pos:start="55:13" pos:end="55:30"><name pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:14">vs</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:23">display</name></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <name pos:start="55:27" pos:end="55:30">NULL</name></expr>;</expr_stmt>

	    <return pos:start="57:13" pos:end="57:22">return <expr pos:start="57:20" pos:end="57:21"><operator pos:start="57:20" pos:end="57:20">-</operator><literal type="number" pos:start="57:21" pos:end="57:21">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="63:9" pos:end="63:35"><expr pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:13">uaddr</name><operator pos:start="63:14" pos:end="63:14">.</operator><name pos:start="63:15" pos:end="63:24">sun_family</name></name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:34">AF_UNIX</name></expr>;</expr_stmt>

	<expr_stmt pos:start="65:9" pos:end="65:39"><expr pos:start="65:9" pos:end="65:38"><call pos:start="65:9" pos:end="65:38"><name pos:start="65:9" pos:end="65:14">memset</name><argument_list pos:start="65:15" pos:end="65:38">(<argument pos:start="65:16" pos:end="65:29"><expr pos:start="65:16" pos:end="65:29"><name pos:start="65:16" pos:end="65:29"><name pos:start="65:16" pos:end="65:20">uaddr</name><operator pos:start="65:21" pos:end="65:21">.</operator><name pos:start="65:22" pos:end="65:29">sun_path</name></name></expr></argument>, <argument pos:start="65:32" pos:end="65:32"><expr pos:start="65:32" pos:end="65:32"><literal type="number" pos:start="65:32" pos:end="65:32">0</literal></expr></argument>, <argument pos:start="65:35" pos:end="65:37"><expr pos:start="65:35" pos:end="65:37"><literal type="number" pos:start="65:35" pos:end="65:37">108</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="67:9" pos:end="67:47"><expr pos:start="67:9" pos:end="67:46"><call pos:start="67:9" pos:end="67:46"><name pos:start="67:9" pos:end="67:16">snprintf</name><argument_list pos:start="67:17" pos:end="67:46">(<argument pos:start="67:18" pos:end="67:31"><expr pos:start="67:18" pos:end="67:31"><name pos:start="67:18" pos:end="67:31"><name pos:start="67:18" pos:end="67:22">uaddr</name><operator pos:start="67:23" pos:end="67:23">.</operator><name pos:start="67:24" pos:end="67:31">sun_path</name></name></expr></argument>, <argument pos:start="67:34" pos:end="67:36"><expr pos:start="67:34" pos:end="67:36"><literal type="number" pos:start="67:34" pos:end="67:36">108</literal></expr></argument>, <argument pos:start="67:39" pos:end="67:42"><expr pos:start="67:39" pos:end="67:42"><literal type="string" pos:start="67:39" pos:end="67:42">"%s"</literal></expr></argument>, <argument pos:start="67:45" pos:end="67:45"><expr pos:start="67:45" pos:end="67:45"><name pos:start="67:45" pos:end="67:45">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="71:9" pos:end="71:31"><expr pos:start="71:9" pos:end="71:30"><call pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:14">unlink</name><argument_list pos:start="71:15" pos:end="71:30">(<argument pos:start="71:16" pos:end="71:29"><expr pos:start="71:16" pos:end="71:29"><name pos:start="71:16" pos:end="71:29"><name pos:start="71:16" pos:end="71:20">uaddr</name><operator pos:start="71:21" pos:end="71:21">.</operator><name pos:start="71:22" pos:end="71:29">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="141:5">else

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

    <block pos:start="77:5" pos:end="141:5">{<block_content pos:start="79:9" pos:end="139:9">

	<expr_stmt pos:start="79:9" pos:end="79:41"><expr pos:start="79:9" pos:end="79:40"><name pos:start="79:9" pos:end="79:12">addr</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <operator pos:start="79:16" pos:end="79:16">(</operator>struct <name pos:start="79:24" pos:end="79:31">sockaddr</name> <operator pos:start="79:33" pos:end="79:33">*</operator><operator pos:start="79:34" pos:end="79:34">)</operator><operator pos:start="79:35" pos:end="79:35">&amp;</operator><name pos:start="79:36" pos:end="79:40">iaddr</name></expr>;</expr_stmt>

	<expr_stmt pos:start="81:9" pos:end="81:32"><expr pos:start="81:9" pos:end="81:31"><name pos:start="81:9" pos:end="81:15">addrlen</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <sizeof pos:start="81:19" pos:end="81:31">sizeof<argument_list pos:start="81:25" pos:end="81:31">(<argument pos:start="81:26" pos:end="81:30"><expr pos:start="81:26" pos:end="81:30"><name pos:start="81:26" pos:end="81:30">iaddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



	<if_stmt pos:start="85:9" pos:end="95:9"><if pos:start="85:9" pos:end="95:9">if <condition pos:start="85:12" pos:end="85:45">(<expr pos:start="85:13" pos:end="85:44"><call pos:start="85:13" pos:end="85:40"><name pos:start="85:13" pos:end="85:27">parse_host_port</name><argument_list pos:start="85:28" pos:end="85:40">(<argument pos:start="85:29" pos:end="85:34"><expr pos:start="85:29" pos:end="85:34"><operator pos:start="85:29" pos:end="85:29">&amp;</operator><name pos:start="85:30" pos:end="85:34">iaddr</name></expr></argument>, <argument pos:start="85:37" pos:end="85:39"><expr pos:start="85:37" pos:end="85:39"><name pos:start="85:37" pos:end="85:39">arg</name></expr></argument>)</argument_list></call> <operator pos:start="85:42" pos:end="85:42">&lt;</operator> <literal type="number" pos:start="85:44" pos:end="85:44">0</literal></expr>)</condition> <block pos:start="85:47" pos:end="95:9">{<block_content pos:start="87:13" pos:end="93:22">

	    <expr_stmt pos:start="87:13" pos:end="87:61"><expr pos:start="87:13" pos:end="87:60"><call pos:start="87:13" pos:end="87:60"><name pos:start="87:13" pos:end="87:19">fprintf</name><argument_list pos:start="87:20" pos:end="87:60">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26">stderr</name></expr></argument>, <argument pos:start="87:29" pos:end="87:59"><expr pos:start="87:29" pos:end="87:59"><literal type="string" pos:start="87:29" pos:end="87:59">"Could not parse VNC address\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="89:13" pos:end="89:30"><expr pos:start="89:13" pos:end="89:29"><call pos:start="89:13" pos:end="89:29"><name pos:start="89:13" pos:end="89:16">free</name><argument_list pos:start="89:17" pos:end="89:29">(<argument pos:start="89:18" pos:end="89:28"><expr pos:start="89:18" pos:end="89:28"><name pos:start="89:18" pos:end="89:28"><name pos:start="89:18" pos:end="89:19">vs</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:28">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="91:13" pos:end="91:31"><expr pos:start="91:13" pos:end="91:30"><name pos:start="91:13" pos:end="91:23"><name pos:start="91:13" pos:end="91:14">vs</name><operator pos:start="91:15" pos:end="91:16">-&gt;</operator><name pos:start="91:17" pos:end="91:23">display</name></name> <operator pos:start="91:25" pos:end="91:25">=</operator> <name pos:start="91:27" pos:end="91:30">NULL</name></expr>;</expr_stmt>

	    <return pos:start="93:13" pos:end="93:22">return <expr pos:start="93:20" pos:end="93:21"><operator pos:start="93:20" pos:end="93:20">-</operator><literal type="number" pos:start="93:21" pos:end="93:21">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="99:9" pos:end="99:61"><expr pos:start="99:9" pos:end="99:60"><name pos:start="99:9" pos:end="99:22"><name pos:start="99:9" pos:end="99:13">iaddr</name><operator pos:start="99:14" pos:end="99:14">.</operator><name pos:start="99:15" pos:end="99:22">sin_port</name></name> <operator pos:start="99:24" pos:end="99:24">=</operator> <call pos:start="99:26" pos:end="99:60"><name pos:start="99:26" pos:end="99:30">htons</name><argument_list pos:start="99:31" pos:end="99:60">(<argument pos:start="99:32" pos:end="99:59"><expr pos:start="99:32" pos:end="99:59"><call pos:start="99:32" pos:end="99:52"><name pos:start="99:32" pos:end="99:36">ntohs</name><argument_list pos:start="99:37" pos:end="99:52">(<argument pos:start="99:38" pos:end="99:51"><expr pos:start="99:38" pos:end="99:51"><name pos:start="99:38" pos:end="99:51"><name pos:start="99:38" pos:end="99:42">iaddr</name><operator pos:start="99:43" pos:end="99:43">.</operator><name pos:start="99:44" pos:end="99:51">sin_port</name></name></expr></argument>)</argument_list></call> <operator pos:start="99:54" pos:end="99:54">+</operator> <literal type="number" pos:start="99:56" pos:end="99:59">5900</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="103:9" pos:end="103:52"><expr pos:start="103:9" pos:end="103:51"><name pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:10">vs</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:17">lsock</name></name> <operator pos:start="103:19" pos:end="103:19">=</operator> <call pos:start="103:21" pos:end="103:51"><name pos:start="103:21" pos:end="103:26">socket</name><argument_list pos:start="103:27" pos:end="103:51">(<argument pos:start="103:28" pos:end="103:34"><expr pos:start="103:28" pos:end="103:34"><name pos:start="103:28" pos:end="103:34">PF_INET</name></expr></argument>, <argument pos:start="103:37" pos:end="103:47"><expr pos:start="103:37" pos:end="103:47"><name pos:start="103:37" pos:end="103:47">SOCK_STREAM</name></expr></argument>, <argument pos:start="103:50" pos:end="103:50"><expr pos:start="103:50" pos:end="103:50"><literal type="number" pos:start="103:50" pos:end="103:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="105:9" pos:end="115:9"><if pos:start="105:9" pos:end="115:9">if <condition pos:start="105:12" pos:end="105:28">(<expr pos:start="105:13" pos:end="105:27"><name pos:start="105:13" pos:end="105:21"><name pos:start="105:13" pos:end="105:14">vs</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:21">lsock</name></name> <operator pos:start="105:23" pos:end="105:24">==</operator> <operator pos:start="105:26" pos:end="105:26">-</operator><literal type="number" pos:start="105:27" pos:end="105:27">1</literal></expr>)</condition> <block pos:start="105:30" pos:end="115:9">{<block_content pos:start="107:13" pos:end="113:22">

	    <expr_stmt pos:start="107:13" pos:end="107:57"><expr pos:start="107:13" pos:end="107:56"><call pos:start="107:13" pos:end="107:56"><name pos:start="107:13" pos:end="107:19">fprintf</name><argument_list pos:start="107:20" pos:end="107:56">(<argument pos:start="107:21" pos:end="107:26"><expr pos:start="107:21" pos:end="107:26"><name pos:start="107:21" pos:end="107:26">stderr</name></expr></argument>, <argument pos:start="107:29" pos:end="107:55"><expr pos:start="107:29" pos:end="107:55"><literal type="string" pos:start="107:29" pos:end="107:55">"Could not create socket\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="109:13" pos:end="109:30"><expr pos:start="109:13" pos:end="109:29"><call pos:start="109:13" pos:end="109:29"><name pos:start="109:13" pos:end="109:16">free</name><argument_list pos:start="109:17" pos:end="109:29">(<argument pos:start="109:18" pos:end="109:28"><expr pos:start="109:18" pos:end="109:28"><name pos:start="109:18" pos:end="109:28"><name pos:start="109:18" pos:end="109:19">vs</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:28">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="111:13" pos:end="111:31"><expr pos:start="111:13" pos:end="111:30"><name pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:14">vs</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:23">display</name></name> <operator pos:start="111:25" pos:end="111:25">=</operator> <name pos:start="111:27" pos:end="111:30">NULL</name></expr>;</expr_stmt>

	    <return pos:start="113:13" pos:end="113:22">return <expr pos:start="113:20" pos:end="113:21"><operator pos:start="113:20" pos:end="113:20">-</operator><literal type="number" pos:start="113:21" pos:end="113:21">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="119:9" pos:end="119:23"><expr pos:start="119:9" pos:end="119:22"><name pos:start="119:9" pos:end="119:18">reuse_addr</name> <operator pos:start="119:20" pos:end="119:20">=</operator> <literal type="number" pos:start="119:22" pos:end="119:22">1</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="121:9" pos:end="123:72"><expr pos:start="121:9" pos:end="123:71"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <call pos:start="121:15" pos:end="123:71"><name pos:start="121:15" pos:end="121:24">setsockopt</name><argument_list pos:start="121:25" pos:end="123:71">(<argument pos:start="121:26" pos:end="121:34"><expr pos:start="121:26" pos:end="121:34"><name pos:start="121:26" pos:end="121:34"><name pos:start="121:26" pos:end="121:27">vs</name><operator pos:start="121:28" pos:end="121:29">-&gt;</operator><name pos:start="121:30" pos:end="121:34">lsock</name></name></expr></argument>, <argument pos:start="121:37" pos:end="121:46"><expr pos:start="121:37" pos:end="121:46"><name pos:start="121:37" pos:end="121:46">SOL_SOCKET</name></expr></argument>, <argument pos:start="121:49" pos:end="121:60"><expr pos:start="121:49" pos:end="121:60"><name pos:start="121:49" pos:end="121:60">SO_REUSEADDR</name></expr></argument>,

			 <argument pos:start="123:26" pos:end="123:50"><expr pos:start="123:26" pos:end="123:50"><operator pos:start="123:26" pos:end="123:26">(</operator><specifier pos:start="123:27" pos:end="123:31">const</specifier> <name pos:start="123:33" pos:end="123:36">char</name> <operator pos:start="123:38" pos:end="123:38">*</operator><operator pos:start="123:39" pos:end="123:39">)</operator><operator pos:start="123:40" pos:end="123:40">&amp;</operator><name pos:start="123:41" pos:end="123:50">reuse_addr</name></expr></argument>, <argument pos:start="123:53" pos:end="123:70"><expr pos:start="123:53" pos:end="123:70"><sizeof pos:start="123:53" pos:end="123:70">sizeof<argument_list pos:start="123:59" pos:end="123:70">(<argument pos:start="123:60" pos:end="123:69"><expr pos:start="123:60" pos:end="123:69"><name pos:start="123:60" pos:end="123:69">reuse_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="125:9" pos:end="139:9"><if pos:start="125:9" pos:end="139:9">if <condition pos:start="125:12" pos:end="125:22">(<expr pos:start="125:13" pos:end="125:21"><name pos:start="125:13" pos:end="125:15">ret</name> <operator pos:start="125:17" pos:end="125:18">==</operator> <operator pos:start="125:20" pos:end="125:20">-</operator><literal type="number" pos:start="125:21" pos:end="125:21">1</literal></expr>)</condition> <block pos:start="125:24" pos:end="139:9">{<block_content pos:start="127:13" pos:end="137:22">

	    <expr_stmt pos:start="127:13" pos:end="127:53"><expr pos:start="127:13" pos:end="127:52"><call pos:start="127:13" pos:end="127:52"><name pos:start="127:13" pos:end="127:19">fprintf</name><argument_list pos:start="127:20" pos:end="127:52">(<argument pos:start="127:21" pos:end="127:26"><expr pos:start="127:21" pos:end="127:26"><name pos:start="127:21" pos:end="127:26">stderr</name></expr></argument>, <argument pos:start="127:29" pos:end="127:51"><expr pos:start="127:29" pos:end="127:51"><literal type="string" pos:start="127:29" pos:end="127:51">"setsockopt() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="129:13" pos:end="129:29"><expr pos:start="129:13" pos:end="129:28"><call pos:start="129:13" pos:end="129:28"><name pos:start="129:13" pos:end="129:17">close</name><argument_list pos:start="129:18" pos:end="129:28">(<argument pos:start="129:19" pos:end="129:27"><expr pos:start="129:19" pos:end="129:27"><name pos:start="129:19" pos:end="129:27"><name pos:start="129:19" pos:end="129:20">vs</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:27">lsock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="131:13" pos:end="131:27"><expr pos:start="131:13" pos:end="131:26"><name pos:start="131:13" pos:end="131:21"><name pos:start="131:13" pos:end="131:14">vs</name><operator pos:start="131:15" pos:end="131:16">-&gt;</operator><name pos:start="131:17" pos:end="131:21">lsock</name></name> <operator pos:start="131:23" pos:end="131:23">=</operator> <operator pos:start="131:25" pos:end="131:25">-</operator><literal type="number" pos:start="131:26" pos:end="131:26">1</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="133:13" pos:end="133:30"><expr pos:start="133:13" pos:end="133:29"><call pos:start="133:13" pos:end="133:29"><name pos:start="133:13" pos:end="133:16">free</name><argument_list pos:start="133:17" pos:end="133:29">(<argument pos:start="133:18" pos:end="133:28"><expr pos:start="133:18" pos:end="133:28"><name pos:start="133:18" pos:end="133:28"><name pos:start="133:18" pos:end="133:19">vs</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:28">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="135:13" pos:end="135:31"><expr pos:start="135:13" pos:end="135:30"><name pos:start="135:13" pos:end="135:23"><name pos:start="135:13" pos:end="135:14">vs</name><operator pos:start="135:15" pos:end="135:16">-&gt;</operator><name pos:start="135:17" pos:end="135:23">display</name></name> <operator pos:start="135:25" pos:end="135:25">=</operator> <name pos:start="135:27" pos:end="135:30">NULL</name></expr>;</expr_stmt>

	    <return pos:start="137:13" pos:end="137:22">return <expr pos:start="137:20" pos:end="137:21"><operator pos:start="137:20" pos:end="137:20">-</operator><literal type="number" pos:start="137:21" pos:end="137:21">1</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="145:5" pos:end="159:5"><if pos:start="145:5" pos:end="159:5">if <condition pos:start="145:8" pos:end="145:45">(<expr pos:start="145:9" pos:end="145:44"><call pos:start="145:9" pos:end="145:38"><name pos:start="145:9" pos:end="145:12">bind</name><argument_list pos:start="145:13" pos:end="145:38">(<argument pos:start="145:14" pos:end="145:22"><expr pos:start="145:14" pos:end="145:22"><name pos:start="145:14" pos:end="145:22"><name pos:start="145:14" pos:end="145:15">vs</name><operator pos:start="145:16" pos:end="145:17">-&gt;</operator><name pos:start="145:18" pos:end="145:22">lsock</name></name></expr></argument>, <argument pos:start="145:25" pos:end="145:28"><expr pos:start="145:25" pos:end="145:28"><name pos:start="145:25" pos:end="145:28">addr</name></expr></argument>, <argument pos:start="145:31" pos:end="145:37"><expr pos:start="145:31" pos:end="145:37"><name pos:start="145:31" pos:end="145:37">addrlen</name></expr></argument>)</argument_list></call> <operator pos:start="145:40" pos:end="145:41">==</operator> <operator pos:start="145:43" pos:end="145:43">-</operator><literal type="number" pos:start="145:44" pos:end="145:44">1</literal></expr>)</condition> <block pos:start="145:47" pos:end="159:5">{<block_content pos:start="147:9" pos:end="157:18">

	<expr_stmt pos:start="147:9" pos:end="147:43"><expr pos:start="147:9" pos:end="147:42"><call pos:start="147:9" pos:end="147:42"><name pos:start="147:9" pos:end="147:15">fprintf</name><argument_list pos:start="147:16" pos:end="147:42">(<argument pos:start="147:17" pos:end="147:22"><expr pos:start="147:17" pos:end="147:22"><name pos:start="147:17" pos:end="147:22">stderr</name></expr></argument>, <argument pos:start="147:25" pos:end="147:41"><expr pos:start="147:25" pos:end="147:41"><literal type="string" pos:start="147:25" pos:end="147:41">"bind() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="149:9" pos:end="149:25"><expr pos:start="149:9" pos:end="149:24"><call pos:start="149:9" pos:end="149:24"><name pos:start="149:9" pos:end="149:13">close</name><argument_list pos:start="149:14" pos:end="149:24">(<argument pos:start="149:15" pos:end="149:23"><expr pos:start="149:15" pos:end="149:23"><name pos:start="149:15" pos:end="149:23"><name pos:start="149:15" pos:end="149:16">vs</name><operator pos:start="149:17" pos:end="149:18">-&gt;</operator><name pos:start="149:19" pos:end="149:23">lsock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="151:9" pos:end="151:23"><expr pos:start="151:9" pos:end="151:22"><name pos:start="151:9" pos:end="151:17"><name pos:start="151:9" pos:end="151:10">vs</name><operator pos:start="151:11" pos:end="151:12">-&gt;</operator><name pos:start="151:13" pos:end="151:17">lsock</name></name> <operator pos:start="151:19" pos:end="151:19">=</operator> <operator pos:start="151:21" pos:end="151:21">-</operator><literal type="number" pos:start="151:22" pos:end="151:22">1</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="153:9" pos:end="153:26"><expr pos:start="153:9" pos:end="153:25"><call pos:start="153:9" pos:end="153:25"><name pos:start="153:9" pos:end="153:12">free</name><argument_list pos:start="153:13" pos:end="153:25">(<argument pos:start="153:14" pos:end="153:24"><expr pos:start="153:14" pos:end="153:24"><name pos:start="153:14" pos:end="153:24"><name pos:start="153:14" pos:end="153:15">vs</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:24">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="155:9" pos:end="155:27"><expr pos:start="155:9" pos:end="155:26"><name pos:start="155:9" pos:end="155:19"><name pos:start="155:9" pos:end="155:10">vs</name><operator pos:start="155:11" pos:end="155:12">-&gt;</operator><name pos:start="155:13" pos:end="155:19">display</name></name> <operator pos:start="155:21" pos:end="155:21">=</operator> <name pos:start="155:23" pos:end="155:26">NULL</name></expr>;</expr_stmt>

	<return pos:start="157:9" pos:end="157:18">return <expr pos:start="157:16" pos:end="157:17"><operator pos:start="157:16" pos:end="157:16">-</operator><literal type="number" pos:start="157:17" pos:end="157:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="163:5" pos:end="177:5"><if pos:start="163:5" pos:end="177:5">if <condition pos:start="163:8" pos:end="163:35">(<expr pos:start="163:9" pos:end="163:34"><call pos:start="163:9" pos:end="163:28"><name pos:start="163:9" pos:end="163:14">listen</name><argument_list pos:start="163:15" pos:end="163:28">(<argument pos:start="163:16" pos:end="163:24"><expr pos:start="163:16" pos:end="163:24"><name pos:start="163:16" pos:end="163:24"><name pos:start="163:16" pos:end="163:17">vs</name><operator pos:start="163:18" pos:end="163:19">-&gt;</operator><name pos:start="163:20" pos:end="163:24">lsock</name></name></expr></argument>, <argument pos:start="163:27" pos:end="163:27"><expr pos:start="163:27" pos:end="163:27"><literal type="number" pos:start="163:27" pos:end="163:27">1</literal></expr></argument>)</argument_list></call> <operator pos:start="163:30" pos:end="163:31">==</operator> <operator pos:start="163:33" pos:end="163:33">-</operator><literal type="number" pos:start="163:34" pos:end="163:34">1</literal></expr>)</condition> <block pos:start="163:37" pos:end="177:5">{<block_content pos:start="165:9" pos:end="175:18">

	<expr_stmt pos:start="165:9" pos:end="165:45"><expr pos:start="165:9" pos:end="165:44"><call pos:start="165:9" pos:end="165:44"><name pos:start="165:9" pos:end="165:15">fprintf</name><argument_list pos:start="165:16" pos:end="165:44">(<argument pos:start="165:17" pos:end="165:22"><expr pos:start="165:17" pos:end="165:22"><name pos:start="165:17" pos:end="165:22">stderr</name></expr></argument>, <argument pos:start="165:25" pos:end="165:43"><expr pos:start="165:25" pos:end="165:43"><literal type="string" pos:start="165:25" pos:end="165:43">"listen() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="167:9" pos:end="167:25"><expr pos:start="167:9" pos:end="167:24"><call pos:start="167:9" pos:end="167:24"><name pos:start="167:9" pos:end="167:13">close</name><argument_list pos:start="167:14" pos:end="167:24">(<argument pos:start="167:15" pos:end="167:23"><expr pos:start="167:15" pos:end="167:23"><name pos:start="167:15" pos:end="167:23"><name pos:start="167:15" pos:end="167:16">vs</name><operator pos:start="167:17" pos:end="167:18">-&gt;</operator><name pos:start="167:19" pos:end="167:23">lsock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="169:9" pos:end="169:23"><expr pos:start="169:9" pos:end="169:22"><name pos:start="169:9" pos:end="169:17"><name pos:start="169:9" pos:end="169:10">vs</name><operator pos:start="169:11" pos:end="169:12">-&gt;</operator><name pos:start="169:13" pos:end="169:17">lsock</name></name> <operator pos:start="169:19" pos:end="169:19">=</operator> <operator pos:start="169:21" pos:end="169:21">-</operator><literal type="number" pos:start="169:22" pos:end="169:22">1</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="171:9" pos:end="171:26"><expr pos:start="171:9" pos:end="171:25"><call pos:start="171:9" pos:end="171:25"><name pos:start="171:9" pos:end="171:12">free</name><argument_list pos:start="171:13" pos:end="171:25">(<argument pos:start="171:14" pos:end="171:24"><expr pos:start="171:14" pos:end="171:24"><name pos:start="171:14" pos:end="171:24"><name pos:start="171:14" pos:end="171:15">vs</name><operator pos:start="171:16" pos:end="171:17">-&gt;</operator><name pos:start="171:18" pos:end="171:24">display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="173:9" pos:end="173:27"><expr pos:start="173:9" pos:end="173:26"><name pos:start="173:9" pos:end="173:19"><name pos:start="173:9" pos:end="173:10">vs</name><operator pos:start="173:11" pos:end="173:12">-&gt;</operator><name pos:start="173:13" pos:end="173:19">display</name></name> <operator pos:start="173:21" pos:end="173:21">=</operator> <name pos:start="173:23" pos:end="173:26">NULL</name></expr>;</expr_stmt>

	<return pos:start="175:9" pos:end="175:18">return <expr pos:start="175:16" pos:end="175:17"><operator pos:start="175:16" pos:end="175:16">-</operator><literal type="number" pos:start="175:17" pos:end="175:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="181:5" pos:end="181:87">return <expr pos:start="181:12" pos:end="181:86"><call pos:start="181:12" pos:end="181:86"><name pos:start="181:12" pos:end="181:31">qemu_set_fd_handler2</name><argument_list pos:start="181:32" pos:end="181:86">(<argument pos:start="181:33" pos:end="181:41"><expr pos:start="181:33" pos:end="181:41"><name pos:start="181:33" pos:end="181:41"><name pos:start="181:33" pos:end="181:34">vs</name><operator pos:start="181:35" pos:end="181:36">-&gt;</operator><name pos:start="181:37" pos:end="181:41">lsock</name></name></expr></argument>, <argument pos:start="181:44" pos:end="181:58"><expr pos:start="181:44" pos:end="181:58"><name pos:start="181:44" pos:end="181:58">vnc_listen_poll</name></expr></argument>, <argument pos:start="181:61" pos:end="181:75"><expr pos:start="181:61" pos:end="181:75"><name pos:start="181:61" pos:end="181:75">vnc_listen_read</name></expr></argument>, <argument pos:start="181:78" pos:end="181:81"><expr pos:start="181:78" pos:end="181:81"><name pos:start="181:78" pos:end="181:81">NULL</name></expr></argument>, <argument pos:start="181:84" pos:end="181:85"><expr pos:start="181:84" pos:end="181:85"><name pos:start="181:84" pos:end="181:85">vs</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
