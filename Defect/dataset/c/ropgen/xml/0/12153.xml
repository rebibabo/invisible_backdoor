<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12153.c" pos:tabs="8"><function pos:start="1:1" pos:end="689:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">rtl8139_do_receive</name><parameter_list pos:start="1:31" pos:end="1:92">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">opaque</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:63"><decl pos:start="1:46" pos:end="1:63"><type pos:start="1:46" pos:end="1:63"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:58">uint8_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">buf</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:73"><decl pos:start="1:66" pos:end="1:73"><type pos:start="1:66" pos:end="1:73"><name pos:start="1:66" pos:end="1:68">int</name></type> <name pos:start="1:70" pos:end="1:73">size</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:91"><decl pos:start="1:76" pos:end="1:91"><type pos:start="1:76" pos:end="1:91"><name pos:start="1:76" pos:end="1:78">int</name></type> <name pos:start="1:80" pos:end="1:91">do_interrupt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="689:1">{<block_content pos:start="5:5" pos:end="687:5">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">RTL8139State</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:28">= <expr pos:start="5:23" pos:end="5:28"><name pos:start="5:23" pos:end="5:28">opaque</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:26">packet_header</name> <init pos:start="9:28" pos:end="9:30">= <expr pos:start="9:30" pos:end="9:30"><literal type="number" pos:start="9:30" pos:end="9:30">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:20"><name pos:start="13:13" pos:end="13:16">buf1</name><index pos:start="13:17" pos:end="13:20">[<expr pos:start="13:18" pos:end="13:19"><literal type="number" pos:start="13:18" pos:end="13:19">60</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="17:47"><decl pos:start="15:5" pos:end="17:46"><type pos:start="15:5" pos:end="15:24"><specifier pos:start="15:5" pos:end="15:10">static</specifier> <specifier pos:start="15:12" pos:end="15:16">const</specifier> <name pos:start="15:18" pos:end="15:24">uint8_t</name></type> <name pos:start="15:26" pos:end="15:45"><name pos:start="15:26" pos:end="15:42">broadcast_macaddr</name><index pos:start="15:43" pos:end="15:45">[<expr pos:start="15:44" pos:end="15:44"><literal type="number" pos:start="15:44" pos:end="15:44">6</literal></expr>]</index></name> <init pos:start="15:47" pos:end="17:46">= 

        <expr pos:start="17:9" pos:end="17:46"><block pos:start="17:9" pos:end="17:46">{ <expr pos:start="17:11" pos:end="17:14"><literal type="number" pos:start="17:11" pos:end="17:14">0xff</literal></expr>, <expr pos:start="17:17" pos:end="17:20"><literal type="number" pos:start="17:17" pos:end="17:20">0xff</literal></expr>, <expr pos:start="17:23" pos:end="17:26"><literal type="number" pos:start="17:23" pos:end="17:26">0xff</literal></expr>, <expr pos:start="17:29" pos:end="17:32"><literal type="number" pos:start="17:29" pos:end="17:32">0xff</literal></expr>, <expr pos:start="17:35" pos:end="17:38"><literal type="number" pos:start="17:35" pos:end="17:38">0xff</literal></expr>, <expr pos:start="17:41" pos:end="17:44"><literal type="number" pos:start="17:41" pos:end="17:44">0xff</literal></expr> }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:58"><expr pos:start="21:5" pos:end="21:57"><call pos:start="21:5" pos:end="21:57"><name pos:start="21:5" pos:end="21:15">DEBUG_PRINT</name><argument_list pos:start="21:16" pos:end="21:57">(<argument pos:start="21:17" pos:end="21:56"><expr pos:start="21:17" pos:end="21:56"><operator pos:start="21:17" pos:end="21:17">(</operator><literal type="string" pos:start="21:18" pos:end="21:49">"&gt;&gt;&gt; RTL8139: received len=%d\n"</literal><operator pos:start="21:50" pos:end="21:50">,</operator> <name pos:start="21:52" pos:end="21:55">size</name><operator pos:start="21:56" pos:end="21:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:40">/* test if board clock is stopped */</comment>

    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:26">(<expr pos:start="27:9" pos:end="27:25"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:25"><name pos:start="27:10" pos:end="27:10">s</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:25">clock_enabled</name></name></expr>)</condition>

    <block pos:start="29:5" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:15">

        <expr_stmt pos:start="31:9" pos:end="31:71"><expr pos:start="31:9" pos:end="31:70"><call pos:start="31:9" pos:end="31:70"><name pos:start="31:9" pos:end="31:19">DEBUG_PRINT</name><argument_list pos:start="31:20" pos:end="31:70">(<argument pos:start="31:21" pos:end="31:69"><expr pos:start="31:21" pos:end="31:69"><operator pos:start="31:21" pos:end="31:21">(</operator><literal type="string" pos:start="31:22" pos:end="31:68">"RTL8139: stopped ==========================\n"</literal><operator pos:start="31:69" pos:end="31:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:44">/* first check if receiver is enabled */</comment>



    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:37">(<expr pos:start="43:9" pos:end="43:36"><operator pos:start="43:9" pos:end="43:9">!</operator><call pos:start="43:10" pos:end="43:36"><name pos:start="43:10" pos:end="43:33">rtl8139_receiver_enabled</name><argument_list pos:start="43:34" pos:end="43:36">(<argument pos:start="43:35" pos:end="43:35"><expr pos:start="43:35" pos:end="43:35"><name pos:start="43:35" pos:end="43:35">s</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="45:5" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:15">

        <expr_stmt pos:start="47:9" pos:end="47:71"><expr pos:start="47:9" pos:end="47:70"><call pos:start="47:9" pos:end="47:70"><name pos:start="47:9" pos:end="47:19">DEBUG_PRINT</name><argument_list pos:start="47:20" pos:end="47:70">(<argument pos:start="47:21" pos:end="47:69"><expr pos:start="47:21" pos:end="47:69"><operator pos:start="47:21" pos:end="47:21">(</operator><literal type="string" pos:start="47:22" pos:end="47:68">"RTL8139: receiver disabled ================\n"</literal><operator pos:start="47:69" pos:end="47:69">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:25">/* XXX: check this */</comment>

    <if_stmt pos:start="57:5" pos:end="233:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:36">(<expr pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:19">RxConfig</name></name> <operator pos:start="57:21" pos:end="57:21">&amp;</operator> <name pos:start="57:23" pos:end="57:35">AcceptAllPhys</name></expr>)</condition> <block pos:start="57:38" pos:end="65:5">{<block_content pos:start="61:9" pos:end="61:76">

        <comment type="block" pos:start="59:9" pos:end="59:38">/* promiscuous: receive all */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:76"><expr pos:start="61:9" pos:end="61:75"><call pos:start="61:9" pos:end="61:75"><name pos:start="61:9" pos:end="61:19">DEBUG_PRINT</name><argument_list pos:start="61:20" pos:end="61:75">(<argument pos:start="61:21" pos:end="61:74"><expr pos:start="61:21" pos:end="61:74"><operator pos:start="61:21" pos:end="61:21">(</operator><literal type="string" pos:start="61:22" pos:end="61:73">"&gt;&gt;&gt; RTL8139: packet received in promiscuous mode\n"</literal><operator pos:start="61:74" pos:end="61:74">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="65:7" pos:end="233:5">else <block pos:start="65:12" pos:end="233:5">{<block_content pos:start="67:9" pos:end="231:9">

        <if_stmt pos:start="67:9" pos:end="231:9"><if pos:start="67:9" pos:end="105:9">if <condition pos:start="67:12" pos:end="67:48">(<expr pos:start="67:13" pos:end="67:47"><operator pos:start="67:13" pos:end="67:13">!</operator><call pos:start="67:14" pos:end="67:47"><name pos:start="67:14" pos:end="67:19">memcmp</name><argument_list pos:start="67:20" pos:end="67:47">(<argument pos:start="67:21" pos:end="67:23"><expr pos:start="67:21" pos:end="67:23"><name pos:start="67:21" pos:end="67:23">buf</name></expr></argument>,  <argument pos:start="67:27" pos:end="67:43"><expr pos:start="67:27" pos:end="67:43"><name pos:start="67:27" pos:end="67:43">broadcast_macaddr</name></expr></argument>, <argument pos:start="67:46" pos:end="67:46"><expr pos:start="67:46" pos:end="67:46"><literal type="number" pos:start="67:46" pos:end="67:46">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:50" pos:end="105:9">{<block_content pos:start="71:13" pos:end="101:40">

            <comment type="block" pos:start="69:13" pos:end="69:35">/* broadcast address */</comment>

            <if_stmt pos:start="71:13" pos:end="87:13"><if pos:start="71:13" pos:end="87:13">if <condition pos:start="71:16" pos:end="71:49">(<expr pos:start="71:17" pos:end="71:48"><operator pos:start="71:17" pos:end="71:17">!</operator><operator pos:start="71:18" pos:end="71:18">(</operator><name pos:start="71:19" pos:end="71:29"><name pos:start="71:19" pos:end="71:19">s</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:29">RxConfig</name></name> <operator pos:start="71:31" pos:end="71:31">&amp;</operator> <name pos:start="71:33" pos:end="71:47">AcceptBroadcast</name><operator pos:start="71:48" pos:end="71:48">)</operator></expr>)</condition>

            <block pos:start="73:13" pos:end="87:13">{<block_content pos:start="75:17" pos:end="85:23">

                <expr_stmt pos:start="75:17" pos:end="75:74"><expr pos:start="75:17" pos:end="75:73"><call pos:start="75:17" pos:end="75:73"><name pos:start="75:17" pos:end="75:27">DEBUG_PRINT</name><argument_list pos:start="75:28" pos:end="75:73">(<argument pos:start="75:29" pos:end="75:72"><expr pos:start="75:29" pos:end="75:72"><operator pos:start="75:29" pos:end="75:29">(</operator><literal type="string" pos:start="75:30" pos:end="75:71">"&gt;&gt;&gt; RTL8139: broadcast packet rejected\n"</literal><operator pos:start="75:72" pos:end="75:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="79:17" pos:end="79:42">/* update tally counter */</comment>

                <expr_stmt pos:start="81:17" pos:end="81:42"><expr pos:start="81:17" pos:end="81:41"><operator pos:start="81:17" pos:end="81:18">++</operator><name pos:start="81:19" pos:end="81:41"><name pos:start="81:19" pos:end="81:19">s</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:35">tally_counters</name><operator pos:start="81:36" pos:end="81:36">.</operator><name pos:start="81:37" pos:end="81:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="85:17" pos:end="85:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="91:13" pos:end="91:41"><expr pos:start="91:13" pos:end="91:40"><name pos:start="91:13" pos:end="91:25">packet_header</name> <operator pos:start="91:27" pos:end="91:28">|=</operator> <name pos:start="91:30" pos:end="91:40">RxBroadcast</name></expr>;</expr_stmt>



            <expr_stmt pos:start="95:13" pos:end="95:70"><expr pos:start="95:13" pos:end="95:69"><call pos:start="95:13" pos:end="95:69"><name pos:start="95:13" pos:end="95:23">DEBUG_PRINT</name><argument_list pos:start="95:24" pos:end="95:69">(<argument pos:start="95:25" pos:end="95:68"><expr pos:start="95:25" pos:end="95:68"><operator pos:start="95:25" pos:end="95:25">(</operator><literal type="string" pos:start="95:26" pos:end="95:67">"&gt;&gt;&gt; RTL8139: broadcast packet received\n"</literal><operator pos:start="95:68" pos:end="95:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="99:13" pos:end="99:38">/* update tally counter */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:40"><expr pos:start="101:13" pos:end="101:39"><operator pos:start="101:13" pos:end="101:14">++</operator><name pos:start="101:15" pos:end="101:39"><name pos:start="101:15" pos:end="101:15">s</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:31">tally_counters</name><operator pos:start="101:32" pos:end="101:32">.</operator><name pos:start="101:33" pos:end="101:39">RxOkBrd</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="105:11" pos:end="167:9">else if <condition pos:start="105:19" pos:end="105:33">(<expr pos:start="105:20" pos:end="105:32"><name pos:start="105:20" pos:end="105:25"><name pos:start="105:20" pos:end="105:22">buf</name><index pos:start="105:23" pos:end="105:25">[<expr pos:start="105:24" pos:end="105:24"><literal type="number" pos:start="105:24" pos:end="105:24">0</literal></expr>]</index></name> <operator pos:start="105:27" pos:end="105:27">&amp;</operator> <literal type="number" pos:start="105:29" pos:end="105:32">0x01</literal></expr>)</condition> <block pos:start="105:35" pos:end="167:9">{<block_content pos:start="109:13" pos:end="163:40">

            <comment type="block" pos:start="107:13" pos:end="107:27">/* multicast */</comment>

            <if_stmt pos:start="109:13" pos:end="125:13"><if pos:start="109:13" pos:end="125:13">if <condition pos:start="109:16" pos:end="109:49">(<expr pos:start="109:17" pos:end="109:48"><operator pos:start="109:17" pos:end="109:17">!</operator><operator pos:start="109:18" pos:end="109:18">(</operator><name pos:start="109:19" pos:end="109:29"><name pos:start="109:19" pos:end="109:19">s</name><operator pos:start="109:20" pos:end="109:21">-&gt;</operator><name pos:start="109:22" pos:end="109:29">RxConfig</name></name> <operator pos:start="109:31" pos:end="109:31">&amp;</operator> <name pos:start="109:33" pos:end="109:47">AcceptMulticast</name><operator pos:start="109:48" pos:end="109:48">)</operator></expr>)</condition>

            <block pos:start="111:13" pos:end="125:13">{<block_content pos:start="113:17" pos:end="123:23">

                <expr_stmt pos:start="113:17" pos:end="113:74"><expr pos:start="113:17" pos:end="113:73"><call pos:start="113:17" pos:end="113:73"><name pos:start="113:17" pos:end="113:27">DEBUG_PRINT</name><argument_list pos:start="113:28" pos:end="113:73">(<argument pos:start="113:29" pos:end="113:72"><expr pos:start="113:29" pos:end="113:72"><operator pos:start="113:29" pos:end="113:29">(</operator><literal type="string" pos:start="113:30" pos:end="113:71">"&gt;&gt;&gt; RTL8139: multicast packet rejected\n"</literal><operator pos:start="113:72" pos:end="113:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="117:17" pos:end="117:42">/* update tally counter */</comment>

                <expr_stmt pos:start="119:17" pos:end="119:42"><expr pos:start="119:17" pos:end="119:41"><operator pos:start="119:17" pos:end="119:18">++</operator><name pos:start="119:19" pos:end="119:41"><name pos:start="119:19" pos:end="119:19">s</name><operator pos:start="119:20" pos:end="119:21">-&gt;</operator><name pos:start="119:22" pos:end="119:35">tally_counters</name><operator pos:start="119:36" pos:end="119:36">.</operator><name pos:start="119:37" pos:end="119:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="123:17" pos:end="123:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <decl_stmt pos:start="129:13" pos:end="129:51"><decl pos:start="129:13" pos:end="129:50"><type pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:15">int</name></type> <name pos:start="129:17" pos:end="129:25">mcast_idx</name> <init pos:start="129:27" pos:end="129:50">= <expr pos:start="129:29" pos:end="129:50"><call pos:start="129:29" pos:end="129:50"><name pos:start="129:29" pos:end="129:45">compute_mcast_idx</name><argument_list pos:start="129:46" pos:end="129:50">(<argument pos:start="129:47" pos:end="129:49"><expr pos:start="129:47" pos:end="129:49"><name pos:start="129:47" pos:end="129:49">buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="133:13" pos:end="149:13"><if pos:start="133:13" pos:end="149:13">if <condition pos:start="133:16" pos:end="133:68">(<expr pos:start="133:17" pos:end="133:67"><operator pos:start="133:17" pos:end="133:17">!</operator><operator pos:start="133:18" pos:end="133:18">(</operator><name pos:start="133:19" pos:end="133:41"><name pos:start="133:19" pos:end="133:19">s</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:25">mult</name><index pos:start="133:26" pos:end="133:41">[<expr pos:start="133:27" pos:end="133:40"><name pos:start="133:27" pos:end="133:35">mcast_idx</name> <operator pos:start="133:37" pos:end="133:38">&gt;&gt;</operator> <literal type="number" pos:start="133:40" pos:end="133:40">3</literal></expr>]</index></name> <operator pos:start="133:43" pos:end="133:43">&amp;</operator> <operator pos:start="133:45" pos:end="133:45">(</operator><literal type="number" pos:start="133:46" pos:end="133:46">1</literal> <operator pos:start="133:48" pos:end="133:49">&lt;&lt;</operator> <operator pos:start="133:51" pos:end="133:51">(</operator><name pos:start="133:52" pos:end="133:60">mcast_idx</name> <operator pos:start="133:62" pos:end="133:62">&amp;</operator> <literal type="number" pos:start="133:64" pos:end="133:64">7</literal><operator pos:start="133:65" pos:end="133:65">)</operator><operator pos:start="133:66" pos:end="133:66">)</operator><operator pos:start="133:67" pos:end="133:67">)</operator></expr>)</condition>

            <block pos:start="135:13" pos:end="149:13">{<block_content pos:start="137:17" pos:end="147:23">

                <expr_stmt pos:start="137:17" pos:end="137:75"><expr pos:start="137:17" pos:end="137:74"><call pos:start="137:17" pos:end="137:74"><name pos:start="137:17" pos:end="137:27">DEBUG_PRINT</name><argument_list pos:start="137:28" pos:end="137:74">(<argument pos:start="137:29" pos:end="137:73"><expr pos:start="137:29" pos:end="137:73"><operator pos:start="137:29" pos:end="137:29">(</operator><literal type="string" pos:start="137:30" pos:end="137:72">"&gt;&gt;&gt; RTL8139: multicast address mismatch\n"</literal><operator pos:start="137:73" pos:end="137:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="141:17" pos:end="141:42">/* update tally counter */</comment>

                <expr_stmt pos:start="143:17" pos:end="143:42"><expr pos:start="143:17" pos:end="143:41"><operator pos:start="143:17" pos:end="143:18">++</operator><name pos:start="143:19" pos:end="143:41"><name pos:start="143:19" pos:end="143:19">s</name><operator pos:start="143:20" pos:end="143:21">-&gt;</operator><name pos:start="143:22" pos:end="143:35">tally_counters</name><operator pos:start="143:36" pos:end="143:36">.</operator><name pos:start="143:37" pos:end="143:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="147:17" pos:end="147:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="153:13" pos:end="153:41"><expr pos:start="153:13" pos:end="153:40"><name pos:start="153:13" pos:end="153:25">packet_header</name> <operator pos:start="153:27" pos:end="153:28">|=</operator> <name pos:start="153:30" pos:end="153:40">RxMulticast</name></expr>;</expr_stmt>



            <expr_stmt pos:start="157:13" pos:end="157:70"><expr pos:start="157:13" pos:end="157:69"><call pos:start="157:13" pos:end="157:69"><name pos:start="157:13" pos:end="157:23">DEBUG_PRINT</name><argument_list pos:start="157:24" pos:end="157:69">(<argument pos:start="157:25" pos:end="157:68"><expr pos:start="157:25" pos:end="157:68"><operator pos:start="157:25" pos:end="157:25">(</operator><literal type="string" pos:start="157:26" pos:end="157:67">"&gt;&gt;&gt; RTL8139: multicast packet received\n"</literal><operator pos:start="157:68" pos:end="157:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="161:13" pos:end="161:38">/* update tally counter */</comment>

            <expr_stmt pos:start="163:13" pos:end="163:40"><expr pos:start="163:13" pos:end="163:39"><operator pos:start="163:13" pos:end="163:14">++</operator><name pos:start="163:15" pos:end="163:39"><name pos:start="163:15" pos:end="163:15">s</name><operator pos:start="163:16" pos:end="163:17">-&gt;</operator><name pos:start="163:18" pos:end="163:31">tally_counters</name><operator pos:start="163:32" pos:end="163:32">.</operator><name pos:start="163:33" pos:end="163:39">RxOkMul</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="167:11" pos:end="215:9">else if <condition pos:start="167:19" pos:end="177:40">(<expr pos:start="167:20" pos:end="177:39"><name pos:start="167:20" pos:end="167:29"><name pos:start="167:20" pos:end="167:20">s</name><operator pos:start="167:21" pos:end="167:22">-&gt;</operator><name pos:start="167:23" pos:end="167:26">phys</name><index pos:start="167:27" pos:end="167:29">[<expr pos:start="167:28" pos:end="167:28"><literal type="number" pos:start="167:28" pos:end="167:28">0</literal></expr>]</index></name> <operator pos:start="167:31" pos:end="167:32">==</operator> <name pos:start="167:34" pos:end="167:39"><name pos:start="167:34" pos:end="167:36">buf</name><index pos:start="167:37" pos:end="167:39">[<expr pos:start="167:38" pos:end="167:38"><literal type="number" pos:start="167:38" pos:end="167:38">0</literal></expr>]</index></name> <operator pos:start="167:41" pos:end="167:42">&amp;&amp;</operator>

                   <name pos:start="169:20" pos:end="169:29"><name pos:start="169:20" pos:end="169:20">s</name><operator pos:start="169:21" pos:end="169:22">-&gt;</operator><name pos:start="169:23" pos:end="169:26">phys</name><index pos:start="169:27" pos:end="169:29">[<expr pos:start="169:28" pos:end="169:28"><literal type="number" pos:start="169:28" pos:end="169:28">1</literal></expr>]</index></name> <operator pos:start="169:31" pos:end="169:32">==</operator> <name pos:start="169:34" pos:end="169:39"><name pos:start="169:34" pos:end="169:36">buf</name><index pos:start="169:37" pos:end="169:39">[<expr pos:start="169:38" pos:end="169:38"><literal type="number" pos:start="169:38" pos:end="169:38">1</literal></expr>]</index></name> <operator pos:start="169:41" pos:end="169:42">&amp;&amp;</operator>                   

                   <name pos:start="171:20" pos:end="171:29"><name pos:start="171:20" pos:end="171:20">s</name><operator pos:start="171:21" pos:end="171:22">-&gt;</operator><name pos:start="171:23" pos:end="171:26">phys</name><index pos:start="171:27" pos:end="171:29">[<expr pos:start="171:28" pos:end="171:28"><literal type="number" pos:start="171:28" pos:end="171:28">2</literal></expr>]</index></name> <operator pos:start="171:31" pos:end="171:32">==</operator> <name pos:start="171:34" pos:end="171:39"><name pos:start="171:34" pos:end="171:36">buf</name><index pos:start="171:37" pos:end="171:39">[<expr pos:start="171:38" pos:end="171:38"><literal type="number" pos:start="171:38" pos:end="171:38">2</literal></expr>]</index></name> <operator pos:start="171:41" pos:end="171:42">&amp;&amp;</operator>            

                   <name pos:start="173:20" pos:end="173:29"><name pos:start="173:20" pos:end="173:20">s</name><operator pos:start="173:21" pos:end="173:22">-&gt;</operator><name pos:start="173:23" pos:end="173:26">phys</name><index pos:start="173:27" pos:end="173:29">[<expr pos:start="173:28" pos:end="173:28"><literal type="number" pos:start="173:28" pos:end="173:28">3</literal></expr>]</index></name> <operator pos:start="173:31" pos:end="173:32">==</operator> <name pos:start="173:34" pos:end="173:39"><name pos:start="173:34" pos:end="173:36">buf</name><index pos:start="173:37" pos:end="173:39">[<expr pos:start="173:38" pos:end="173:38"><literal type="number" pos:start="173:38" pos:end="173:38">3</literal></expr>]</index></name> <operator pos:start="173:41" pos:end="173:42">&amp;&amp;</operator>            

                   <name pos:start="175:20" pos:end="175:29"><name pos:start="175:20" pos:end="175:20">s</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:26">phys</name><index pos:start="175:27" pos:end="175:29">[<expr pos:start="175:28" pos:end="175:28"><literal type="number" pos:start="175:28" pos:end="175:28">4</literal></expr>]</index></name> <operator pos:start="175:31" pos:end="175:32">==</operator> <name pos:start="175:34" pos:end="175:39"><name pos:start="175:34" pos:end="175:36">buf</name><index pos:start="175:37" pos:end="175:39">[<expr pos:start="175:38" pos:end="175:38"><literal type="number" pos:start="175:38" pos:end="175:38">4</literal></expr>]</index></name> <operator pos:start="175:41" pos:end="175:42">&amp;&amp;</operator>            

                   <name pos:start="177:20" pos:end="177:29"><name pos:start="177:20" pos:end="177:20">s</name><operator pos:start="177:21" pos:end="177:22">-&gt;</operator><name pos:start="177:23" pos:end="177:26">phys</name><index pos:start="177:27" pos:end="177:29">[<expr pos:start="177:28" pos:end="177:28"><literal type="number" pos:start="177:28" pos:end="177:28">5</literal></expr>]</index></name> <operator pos:start="177:31" pos:end="177:32">==</operator> <name pos:start="177:34" pos:end="177:39"><name pos:start="177:34" pos:end="177:36">buf</name><index pos:start="177:37" pos:end="177:39">[<expr pos:start="177:38" pos:end="177:38"><literal type="number" pos:start="177:38" pos:end="177:38">5</literal></expr>]</index></name></expr>)</condition> <block pos:start="177:42" pos:end="215:9">{<block_content pos:start="181:13" pos:end="211:40">

            <comment type="block" pos:start="179:13" pos:end="179:23">/* match */</comment>

            <if_stmt pos:start="181:13" pos:end="197:13"><if pos:start="181:13" pos:end="197:13">if <condition pos:start="181:16" pos:end="181:46">(<expr pos:start="181:17" pos:end="181:45"><operator pos:start="181:17" pos:end="181:17">!</operator><operator pos:start="181:18" pos:end="181:18">(</operator><name pos:start="181:19" pos:end="181:29"><name pos:start="181:19" pos:end="181:19">s</name><operator pos:start="181:20" pos:end="181:21">-&gt;</operator><name pos:start="181:22" pos:end="181:29">RxConfig</name></name> <operator pos:start="181:31" pos:end="181:31">&amp;</operator> <name pos:start="181:33" pos:end="181:44">AcceptMyPhys</name><operator pos:start="181:45" pos:end="181:45">)</operator></expr>)</condition>

            <block pos:start="183:13" pos:end="197:13">{<block_content pos:start="185:17" pos:end="195:23">

                <expr_stmt pos:start="185:17" pos:end="185:91"><expr pos:start="185:17" pos:end="185:90"><call pos:start="185:17" pos:end="185:90"><name pos:start="185:17" pos:end="185:27">DEBUG_PRINT</name><argument_list pos:start="185:28" pos:end="185:90">(<argument pos:start="185:29" pos:end="185:89"><expr pos:start="185:29" pos:end="185:89"><operator pos:start="185:29" pos:end="185:29">(</operator><literal type="string" pos:start="185:30" pos:end="185:88">"&gt;&gt;&gt; RTL8139: rejecting physical address matching packet\n"</literal><operator pos:start="185:89" pos:end="185:89">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="189:17" pos:end="189:42">/* update tally counter */</comment>

                <expr_stmt pos:start="191:17" pos:end="191:42"><expr pos:start="191:17" pos:end="191:41"><operator pos:start="191:17" pos:end="191:18">++</operator><name pos:start="191:19" pos:end="191:41"><name pos:start="191:19" pos:end="191:19">s</name><operator pos:start="191:20" pos:end="191:21">-&gt;</operator><name pos:start="191:22" pos:end="191:35">tally_counters</name><operator pos:start="191:36" pos:end="191:36">.</operator><name pos:start="191:37" pos:end="191:41">RxERR</name></name></expr>;</expr_stmt>



                <return pos:start="195:17" pos:end="195:23">return;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="201:13" pos:end="201:40"><expr pos:start="201:13" pos:end="201:39"><name pos:start="201:13" pos:end="201:25">packet_header</name> <operator pos:start="201:27" pos:end="201:28">|=</operator> <name pos:start="201:30" pos:end="201:39">RxPhysical</name></expr>;</expr_stmt>



            <expr_stmt pos:start="205:13" pos:end="205:86"><expr pos:start="205:13" pos:end="205:85"><call pos:start="205:13" pos:end="205:85"><name pos:start="205:13" pos:end="205:23">DEBUG_PRINT</name><argument_list pos:start="205:24" pos:end="205:85">(<argument pos:start="205:25" pos:end="205:84"><expr pos:start="205:25" pos:end="205:84"><operator pos:start="205:25" pos:end="205:25">(</operator><literal type="string" pos:start="205:26" pos:end="205:83">"&gt;&gt;&gt; RTL8139: physical address matching packet received\n"</literal><operator pos:start="205:84" pos:end="205:84">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="209:13" pos:end="209:38">/* update tally counter */</comment>

            <expr_stmt pos:start="211:13" pos:end="211:40"><expr pos:start="211:13" pos:end="211:39"><operator pos:start="211:13" pos:end="211:14">++</operator><name pos:start="211:15" pos:end="211:39"><name pos:start="211:15" pos:end="211:15">s</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:31">tally_counters</name><operator pos:start="211:32" pos:end="211:32">.</operator><name pos:start="211:33" pos:end="211:39">RxOkPhy</name></name></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="215:11" pos:end="231:9">else <block pos:start="215:16" pos:end="231:9">{<block_content pos:start="219:13" pos:end="229:19">



            <expr_stmt pos:start="219:13" pos:end="219:59"><expr pos:start="219:13" pos:end="219:58"><call pos:start="219:13" pos:end="219:58"><name pos:start="219:13" pos:end="219:23">DEBUG_PRINT</name><argument_list pos:start="219:24" pos:end="219:58">(<argument pos:start="219:25" pos:end="219:57"><expr pos:start="219:25" pos:end="219:57"><operator pos:start="219:25" pos:end="219:25">(</operator><literal type="string" pos:start="219:26" pos:end="219:56">"&gt;&gt;&gt; RTL8139: unknown packet\n"</literal><operator pos:start="219:57" pos:end="219:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="223:13" pos:end="223:38">/* update tally counter */</comment>

            <expr_stmt pos:start="225:13" pos:end="225:38"><expr pos:start="225:13" pos:end="225:37"><operator pos:start="225:13" pos:end="225:14">++</operator><name pos:start="225:15" pos:end="225:37"><name pos:start="225:15" pos:end="225:15">s</name><operator pos:start="225:16" pos:end="225:17">-&gt;</operator><name pos:start="225:18" pos:end="225:31">tally_counters</name><operator pos:start="225:32" pos:end="225:32">.</operator><name pos:start="225:33" pos:end="225:37">RxERR</name></name></expr>;</expr_stmt>



            <return pos:start="229:13" pos:end="229:19">return;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="237:5" pos:end="237:45">/* if too small buffer, then expand it */</comment>

    <if_stmt pos:start="239:5" pos:end="249:5"><if pos:start="239:5" pos:end="249:5">if <condition pos:start="239:8" pos:end="239:28">(<expr pos:start="239:9" pos:end="239:27"><name pos:start="239:9" pos:end="239:12">size</name> <operator pos:start="239:14" pos:end="239:14">&lt;</operator> <name pos:start="239:16" pos:end="239:27">MIN_BUF_SIZE</name></expr>)</condition> <block pos:start="239:30" pos:end="249:5">{<block_content pos:start="241:9" pos:end="247:28">

        <expr_stmt pos:start="241:9" pos:end="241:32"><expr pos:start="241:9" pos:end="241:31"><call pos:start="241:9" pos:end="241:31"><name pos:start="241:9" pos:end="241:14">memcpy</name><argument_list pos:start="241:15" pos:end="241:31">(<argument pos:start="241:16" pos:end="241:19"><expr pos:start="241:16" pos:end="241:19"><name pos:start="241:16" pos:end="241:19">buf1</name></expr></argument>, <argument pos:start="241:22" pos:end="241:24"><expr pos:start="241:22" pos:end="241:24"><name pos:start="241:22" pos:end="241:24">buf</name></expr></argument>, <argument pos:start="241:27" pos:end="241:30"><expr pos:start="241:27" pos:end="241:30"><name pos:start="241:27" pos:end="241:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:52"><expr pos:start="243:9" pos:end="243:51"><call pos:start="243:9" pos:end="243:51"><name pos:start="243:9" pos:end="243:14">memset</name><argument_list pos:start="243:15" pos:end="243:51">(<argument pos:start="243:16" pos:end="243:26"><expr pos:start="243:16" pos:end="243:26"><name pos:start="243:16" pos:end="243:19">buf1</name> <operator pos:start="243:21" pos:end="243:21">+</operator> <name pos:start="243:23" pos:end="243:26">size</name></expr></argument>, <argument pos:start="243:29" pos:end="243:29"><expr pos:start="243:29" pos:end="243:29"><literal type="number" pos:start="243:29" pos:end="243:29">0</literal></expr></argument>, <argument pos:start="243:32" pos:end="243:50"><expr pos:start="243:32" pos:end="243:50"><name pos:start="243:32" pos:end="243:43">MIN_BUF_SIZE</name> <operator pos:start="243:45" pos:end="243:45">-</operator> <name pos:start="243:47" pos:end="243:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:19"><expr pos:start="245:9" pos:end="245:18"><name pos:start="245:9" pos:end="245:11">buf</name> <operator pos:start="245:13" pos:end="245:13">=</operator> <name pos:start="245:15" pos:end="245:18">buf1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:28"><expr pos:start="247:9" pos:end="247:27"><name pos:start="247:9" pos:end="247:12">size</name> <operator pos:start="247:14" pos:end="247:14">=</operator> <name pos:start="247:16" pos:end="247:27">MIN_BUF_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="253:5" pos:end="673:5"><if pos:start="253:5" pos:end="577:5">if <condition pos:start="253:8" pos:end="253:39">(<expr pos:start="253:9" pos:end="253:38"><call pos:start="253:9" pos:end="253:38"><name pos:start="253:9" pos:end="253:35">rtl8139_cp_receiver_enabled</name><argument_list pos:start="253:36" pos:end="253:38">(<argument pos:start="253:37" pos:end="253:37"><expr pos:start="253:37" pos:end="253:37"><name pos:start="253:37" pos:end="253:37">s</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="255:5" pos:end="577:5">{<block_content pos:start="257:9" pos:end="573:69">

        <expr_stmt pos:start="257:9" pos:end="284:0"><expr pos:start="257:9" pos:end="257:66"><call pos:start="257:9" pos:end="257:66"><name pos:start="257:9" pos:end="257:19">DEBUG_PRINT</name><argument_list pos:start="257:20" pos:end="257:66">(<argument pos:start="257:21" pos:end="257:65"><expr pos:start="257:21" pos:end="257:65"><operator pos:start="257:21" pos:end="257:21">(</operator><literal type="string" pos:start="257:22" pos:end="257:64">"RTL8139: in C+ Rx mode ================\n"</literal><operator pos:start="257:65" pos:end="257:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="261:9" pos:end="261:36">/* begin C+ receiver mode */</comment>



<comment type="block" pos:start="265:1" pos:end="265:23">/* w0 ownership flag */</comment>

<cpp:define pos:start="267:1" pos:end="267:25">#<cpp:directive pos:start="267:2" pos:end="267:7">define</cpp:directive> <cpp:macro pos:start="267:9" pos:end="267:17"><name pos:start="267:9" pos:end="267:17">CP_RX_OWN</name></cpp:macro> <cpp:value pos:start="267:19" pos:end="267:25">(1&lt;&lt;31)</cpp:value></cpp:define>

<comment type="block" pos:start="269:1" pos:end="269:25">/* w0 end of ring flag */</comment>

<cpp:define pos:start="271:1" pos:end="271:25">#<cpp:directive pos:start="271:2" pos:end="271:7">define</cpp:directive> <cpp:macro pos:start="271:9" pos:end="271:17"><name pos:start="271:9" pos:end="271:17">CP_RX_EOR</name></cpp:macro> <cpp:value pos:start="271:19" pos:end="271:25">(1&lt;&lt;30)</cpp:value></cpp:define>

<comment type="block" pos:start="273:1" pos:end="273:34">/* w0 bits 0...12 : buffer size */</comment>

<cpp:define pos:start="275:1" pos:end="275:44">#<cpp:directive pos:start="275:2" pos:end="275:7">define</cpp:directive> <cpp:macro pos:start="275:9" pos:end="275:30"><name pos:start="275:9" pos:end="275:30">CP_RX_BUFFER_SIZE_MASK</name></cpp:macro> <cpp:value pos:start="275:32" pos:end="275:44">((1&lt;&lt;13) - 1)</cpp:value></cpp:define>

<comment type="block" pos:start="277:1" pos:end="277:27">/* w1 tag available flag */</comment>

<cpp:define pos:start="279:1" pos:end="279:26">#<cpp:directive pos:start="279:2" pos:end="279:7">define</cpp:directive> <cpp:macro pos:start="279:9" pos:end="279:18"><name pos:start="279:9" pos:end="279:18">CP_RX_TAVA</name></cpp:macro> <cpp:value pos:start="279:20" pos:end="279:26">(1&lt;&lt;16)</cpp:value></cpp:define>

<comment type="block" pos:start="281:1" pos:end="281:31">/* w1 bits 0...15 : VLAN tag */</comment>

<cpp:define pos:start="283:1" pos:end="283:41">#<cpp:directive pos:start="283:2" pos:end="283:7">define</cpp:directive> <cpp:macro pos:start="283:9" pos:end="283:27"><name pos:start="283:9" pos:end="283:27">CP_RX_VLAN_TAG_MASK</name></cpp:macro> <cpp:value pos:start="283:29" pos:end="283:41">((1&lt;&lt;16) - 1)</cpp:value></cpp:define>

<comment type="block" pos:start="285:1" pos:end="285:36">/* w2 low  32bit of Rx buffer ptr */</comment>

<comment type="block" pos:start="287:1" pos:end="287:36">/* w3 high 32bit of Rx buffer ptr */</comment>



        <decl_stmt pos:start="291:9" pos:end="291:44"><decl pos:start="291:9" pos:end="291:43"><type pos:start="291:9" pos:end="291:11"><name pos:start="291:9" pos:end="291:11">int</name></type> <name pos:start="291:13" pos:end="291:22">descriptor</name> <init pos:start="291:24" pos:end="291:43">= <expr pos:start="291:26" pos:end="291:43"><name pos:start="291:26" pos:end="291:43"><name pos:start="291:26" pos:end="291:26">s</name><operator pos:start="291:27" pos:end="291:28">-&gt;</operator><name pos:start="291:29" pos:end="291:43">currCPlusRxDesc</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="293:9" pos:end="293:46"><decl pos:start="293:9" pos:end="293:45"><type pos:start="293:9" pos:end="293:26"><name pos:start="293:9" pos:end="293:26">target_phys_addr_t</name></type> <name pos:start="293:28" pos:end="293:45">cplus_rx_ring_desc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="297:9" pos:end="297:78"><expr pos:start="297:9" pos:end="297:77"><name pos:start="297:9" pos:end="297:26">cplus_rx_ring_desc</name> <operator pos:start="297:28" pos:end="297:28">=</operator> <call pos:start="297:30" pos:end="297:77"><name pos:start="297:30" pos:end="297:43">rtl8139_addr64</name><argument_list pos:start="297:44" pos:end="297:77">(<argument pos:start="297:45" pos:end="297:59"><expr pos:start="297:45" pos:end="297:59"><name pos:start="297:45" pos:end="297:59"><name pos:start="297:45" pos:end="297:45">s</name><operator pos:start="297:46" pos:end="297:47">-&gt;</operator><name pos:start="297:48" pos:end="297:59">RxRingAddrLO</name></name></expr></argument>, <argument pos:start="297:62" pos:end="297:76"><expr pos:start="297:62" pos:end="297:76"><name pos:start="297:62" pos:end="297:76"><name pos:start="297:62" pos:end="297:62">s</name><operator pos:start="297:63" pos:end="297:64">-&gt;</operator><name pos:start="297:65" pos:end="297:76">RxRingAddrHI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:46"><expr pos:start="299:9" pos:end="299:45"><name pos:start="299:9" pos:end="299:26">cplus_rx_ring_desc</name> <operator pos:start="299:28" pos:end="299:29">+=</operator> <literal type="number" pos:start="299:31" pos:end="299:32">16</literal> <operator pos:start="299:34" pos:end="299:34">*</operator> <name pos:start="299:36" pos:end="299:45">descriptor</name></expr>;</expr_stmt>



        <expr_stmt pos:start="303:9" pos:end="305:92"><expr pos:start="303:9" pos:end="305:91"><call pos:start="303:9" pos:end="305:91"><name pos:start="303:9" pos:end="303:19">DEBUG_PRINT</name><argument_list pos:start="303:20" pos:end="305:91">(<argument pos:start="303:21" pos:end="305:90"><expr pos:start="303:21" pos:end="305:90"><operator pos:start="303:21" pos:end="303:21">(</operator><literal type="string" pos:start="303:22" pos:end="303:105">"RTL8139: +++ C+ mode reading RX descriptor %d from host memory at %08x %08x = %016"</literal> <name pos:start="303:107" pos:end="303:112">PRIx64</name> <literal type="string" pos:start="303:114" pos:end="303:117">"\n"</literal><operator pos:start="303:118" pos:end="303:118">,</operator>

               <name pos:start="305:16" pos:end="305:25">descriptor</name><operator pos:start="305:26" pos:end="305:26">,</operator> <name pos:start="305:28" pos:end="305:42"><name pos:start="305:28" pos:end="305:28">s</name><operator pos:start="305:29" pos:end="305:30">-&gt;</operator><name pos:start="305:31" pos:end="305:42">RxRingAddrHI</name></name><operator pos:start="305:43" pos:end="305:43">,</operator> <name pos:start="305:45" pos:end="305:59"><name pos:start="305:45" pos:end="305:45">s</name><operator pos:start="305:46" pos:end="305:47">-&gt;</operator><name pos:start="305:48" pos:end="305:59">RxRingAddrLO</name></name><operator pos:start="305:60" pos:end="305:60">,</operator> <operator pos:start="305:62" pos:end="305:62">(</operator><name pos:start="305:63" pos:end="305:70">uint64_t</name><operator pos:start="305:71" pos:end="305:71">)</operator><name pos:start="305:72" pos:end="305:89">cplus_rx_ring_desc</name><operator pos:start="305:90" pos:end="305:90">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <decl_stmt pos:start="309:9" pos:end="309:50"><decl pos:start="309:9" pos:end="309:20"><type pos:start="309:9" pos:end="309:16"><name pos:start="309:9" pos:end="309:16">uint32_t</name></type> <name pos:start="309:18" pos:end="309:20">val</name></decl>, <decl pos:start="309:23" pos:end="309:27"><type ref="prev" pos:start="309:9" pos:end="309:16"/><name pos:start="309:23" pos:end="309:27">rxdw0</name></decl>,<decl pos:start="309:29" pos:end="309:33"><type ref="prev" pos:start="309:9" pos:end="309:16"/><name pos:start="309:29" pos:end="309:33">rxdw1</name></decl>,<decl pos:start="309:35" pos:end="309:41"><type ref="prev" pos:start="309:9" pos:end="309:16"/><name pos:start="309:35" pos:end="309:41">rxbufLO</name></decl>,<decl pos:start="309:43" pos:end="309:49"><type ref="prev" pos:start="309:9" pos:end="309:16"/><name pos:start="309:43" pos:end="309:49">rxbufHI</name></decl>;</decl_stmt>



        <expr_stmt pos:start="313:9" pos:end="313:76"><expr pos:start="313:9" pos:end="313:75"><call pos:start="313:9" pos:end="313:75"><name pos:start="313:9" pos:end="313:32">cpu_physical_memory_read</name><argument_list pos:start="313:33" pos:end="313:75">(<argument pos:start="313:34" pos:end="313:51"><expr pos:start="313:34" pos:end="313:51"><name pos:start="313:34" pos:end="313:51">cplus_rx_ring_desc</name></expr></argument>,    <argument pos:start="313:57" pos:end="313:71"><expr pos:start="313:57" pos:end="313:71"><operator pos:start="313:57" pos:end="313:57">(</operator><name pos:start="313:58" pos:end="313:64">uint8_t</name> <operator pos:start="313:66" pos:end="313:66">*</operator><operator pos:start="313:67" pos:end="313:67">)</operator><operator pos:start="313:68" pos:end="313:68">&amp;</operator><name pos:start="313:69" pos:end="313:71">val</name></expr></argument>, <argument pos:start="313:74" pos:end="313:74"><expr pos:start="313:74" pos:end="313:74"><literal type="number" pos:start="313:74" pos:end="313:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:33"><expr pos:start="315:9" pos:end="315:32"><name pos:start="315:9" pos:end="315:13">rxdw0</name> <operator pos:start="315:15" pos:end="315:15">=</operator> <call pos:start="315:17" pos:end="315:32"><name pos:start="315:17" pos:end="315:27">le32_to_cpu</name><argument_list pos:start="315:28" pos:end="315:32">(<argument pos:start="315:29" pos:end="315:31"><expr pos:start="315:29" pos:end="315:31"><name pos:start="315:29" pos:end="315:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:76"><expr pos:start="317:9" pos:end="317:75"><call pos:start="317:9" pos:end="317:75"><name pos:start="317:9" pos:end="317:32">cpu_physical_memory_read</name><argument_list pos:start="317:33" pos:end="317:75">(<argument pos:start="317:34" pos:end="317:53"><expr pos:start="317:34" pos:end="317:53"><name pos:start="317:34" pos:end="317:51">cplus_rx_ring_desc</name><operator pos:start="317:52" pos:end="317:52">+</operator><literal type="number" pos:start="317:53" pos:end="317:53">4</literal></expr></argument>,  <argument pos:start="317:57" pos:end="317:71"><expr pos:start="317:57" pos:end="317:71"><operator pos:start="317:57" pos:end="317:57">(</operator><name pos:start="317:58" pos:end="317:64">uint8_t</name> <operator pos:start="317:66" pos:end="317:66">*</operator><operator pos:start="317:67" pos:end="317:67">)</operator><operator pos:start="317:68" pos:end="317:68">&amp;</operator><name pos:start="317:69" pos:end="317:71">val</name></expr></argument>, <argument pos:start="317:74" pos:end="317:74"><expr pos:start="317:74" pos:end="317:74"><literal type="number" pos:start="317:74" pos:end="317:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:33"><expr pos:start="319:9" pos:end="319:32"><name pos:start="319:9" pos:end="319:13">rxdw1</name> <operator pos:start="319:15" pos:end="319:15">=</operator> <call pos:start="319:17" pos:end="319:32"><name pos:start="319:17" pos:end="319:27">le32_to_cpu</name><argument_list pos:start="319:28" pos:end="319:32">(<argument pos:start="319:29" pos:end="319:31"><expr pos:start="319:29" pos:end="319:31"><name pos:start="319:29" pos:end="319:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:76"><expr pos:start="321:9" pos:end="321:75"><call pos:start="321:9" pos:end="321:75"><name pos:start="321:9" pos:end="321:32">cpu_physical_memory_read</name><argument_list pos:start="321:33" pos:end="321:75">(<argument pos:start="321:34" pos:end="321:53"><expr pos:start="321:34" pos:end="321:53"><name pos:start="321:34" pos:end="321:51">cplus_rx_ring_desc</name><operator pos:start="321:52" pos:end="321:52">+</operator><literal type="number" pos:start="321:53" pos:end="321:53">8</literal></expr></argument>,  <argument pos:start="321:57" pos:end="321:71"><expr pos:start="321:57" pos:end="321:71"><operator pos:start="321:57" pos:end="321:57">(</operator><name pos:start="321:58" pos:end="321:64">uint8_t</name> <operator pos:start="321:66" pos:end="321:66">*</operator><operator pos:start="321:67" pos:end="321:67">)</operator><operator pos:start="321:68" pos:end="321:68">&amp;</operator><name pos:start="321:69" pos:end="321:71">val</name></expr></argument>, <argument pos:start="321:74" pos:end="321:74"><expr pos:start="321:74" pos:end="321:74"><literal type="number" pos:start="321:74" pos:end="321:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:35"><expr pos:start="323:9" pos:end="323:34"><name pos:start="323:9" pos:end="323:15">rxbufLO</name> <operator pos:start="323:17" pos:end="323:17">=</operator> <call pos:start="323:19" pos:end="323:34"><name pos:start="323:19" pos:end="323:29">le32_to_cpu</name><argument_list pos:start="323:30" pos:end="323:34">(<argument pos:start="323:31" pos:end="323:33"><expr pos:start="323:31" pos:end="323:33"><name pos:start="323:31" pos:end="323:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:76"><expr pos:start="325:9" pos:end="325:75"><call pos:start="325:9" pos:end="325:75"><name pos:start="325:9" pos:end="325:32">cpu_physical_memory_read</name><argument_list pos:start="325:33" pos:end="325:75">(<argument pos:start="325:34" pos:end="325:54"><expr pos:start="325:34" pos:end="325:54"><name pos:start="325:34" pos:end="325:51">cplus_rx_ring_desc</name><operator pos:start="325:52" pos:end="325:52">+</operator><literal type="number" pos:start="325:53" pos:end="325:54">12</literal></expr></argument>, <argument pos:start="325:57" pos:end="325:71"><expr pos:start="325:57" pos:end="325:71"><operator pos:start="325:57" pos:end="325:57">(</operator><name pos:start="325:58" pos:end="325:64">uint8_t</name> <operator pos:start="325:66" pos:end="325:66">*</operator><operator pos:start="325:67" pos:end="325:67">)</operator><operator pos:start="325:68" pos:end="325:68">&amp;</operator><name pos:start="325:69" pos:end="325:71">val</name></expr></argument>, <argument pos:start="325:74" pos:end="325:74"><expr pos:start="325:74" pos:end="325:74"><literal type="number" pos:start="325:74" pos:end="325:74">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:35"><expr pos:start="327:9" pos:end="327:34"><name pos:start="327:9" pos:end="327:15">rxbufHI</name> <operator pos:start="327:17" pos:end="327:17">=</operator> <call pos:start="327:19" pos:end="327:34"><name pos:start="327:19" pos:end="327:29">le32_to_cpu</name><argument_list pos:start="327:30" pos:end="327:34">(<argument pos:start="327:31" pos:end="327:33"><expr pos:start="327:31" pos:end="327:33"><name pos:start="327:31" pos:end="327:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="331:9" pos:end="335:48"><expr pos:start="331:9" pos:end="335:47"><call pos:start="331:9" pos:end="335:47"><name pos:start="331:9" pos:end="331:19">DEBUG_PRINT</name><argument_list pos:start="331:20" pos:end="335:47">(<argument pos:start="331:21" pos:end="335:46"><expr pos:start="331:21" pos:end="335:46"><operator pos:start="331:21" pos:end="331:21">(</operator><literal type="string" pos:start="331:22" pos:end="331:82">"RTL8139: +++ C+ mode RX descriptor %d %08x %08x %08x %08x\n"</literal><operator pos:start="331:83" pos:end="331:83">,</operator>

               <name pos:start="333:16" pos:end="333:25">descriptor</name><operator pos:start="333:26" pos:end="333:26">,</operator>

               <name pos:start="335:16" pos:end="335:20">rxdw0</name><operator pos:start="335:21" pos:end="335:21">,</operator> <name pos:start="335:23" pos:end="335:27">rxdw1</name><operator pos:start="335:28" pos:end="335:28">,</operator> <name pos:start="335:30" pos:end="335:36">rxbufLO</name><operator pos:start="335:37" pos:end="335:37">,</operator> <name pos:start="335:39" pos:end="335:45">rxbufHI</name><operator pos:start="335:46" pos:end="335:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="339:9" pos:end="365:9"><if pos:start="339:9" pos:end="365:9">if <condition pos:start="339:12" pos:end="339:33">(<expr pos:start="339:13" pos:end="339:32"><operator pos:start="339:13" pos:end="339:13">!</operator><operator pos:start="339:14" pos:end="339:14">(</operator><name pos:start="339:15" pos:end="339:19">rxdw0</name> <operator pos:start="339:21" pos:end="339:21">&amp;</operator> <name pos:start="339:23" pos:end="339:31">CP_RX_OWN</name><operator pos:start="339:32" pos:end="339:32">)</operator></expr>)</condition>

        <block pos:start="341:9" pos:end="365:9">{<block_content pos:start="343:13" pos:end="363:19">

            <expr_stmt pos:start="343:13" pos:end="343:96"><expr pos:start="343:13" pos:end="343:95"><call pos:start="343:13" pos:end="343:95"><name pos:start="343:13" pos:end="343:23">DEBUG_PRINT</name><argument_list pos:start="343:24" pos:end="343:95">(<argument pos:start="343:25" pos:end="343:94"><expr pos:start="343:25" pos:end="343:94"><operator pos:start="343:25" pos:end="343:25">(</operator><literal type="string" pos:start="343:26" pos:end="343:81">"RTL8139: C+ Rx mode : descriptor %d is owned by host\n"</literal><operator pos:start="343:82" pos:end="343:82">,</operator> <name pos:start="343:84" pos:end="343:93">descriptor</name><operator pos:start="343:94" pos:end="343:94">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="347:13" pos:end="347:40"><expr pos:start="347:13" pos:end="347:39"><name pos:start="347:13" pos:end="347:25"><name pos:start="347:13" pos:end="347:13">s</name><operator pos:start="347:14" pos:end="347:15">-&gt;</operator><name pos:start="347:16" pos:end="347:25">IntrStatus</name></name> <operator pos:start="347:27" pos:end="347:28">|=</operator> <name pos:start="347:30" pos:end="347:39">RxOverflow</name></expr>;</expr_stmt>

            <expr_stmt pos:start="349:13" pos:end="349:26"><expr pos:start="349:13" pos:end="349:25"><operator pos:start="349:13" pos:end="349:14">++</operator><name pos:start="349:15" pos:end="349:25"><name pos:start="349:15" pos:end="349:15">s</name><operator pos:start="349:16" pos:end="349:17">-&gt;</operator><name pos:start="349:18" pos:end="349:25">RxMissed</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="353:13" pos:end="353:38">/* update tally counter */</comment>

            <expr_stmt pos:start="355:13" pos:end="355:38"><expr pos:start="355:13" pos:end="355:37"><operator pos:start="355:13" pos:end="355:14">++</operator><name pos:start="355:15" pos:end="355:37"><name pos:start="355:15" pos:end="355:15">s</name><operator pos:start="355:16" pos:end="355:17">-&gt;</operator><name pos:start="355:18" pos:end="355:31">tally_counters</name><operator pos:start="355:32" pos:end="355:32">.</operator><name pos:start="355:33" pos:end="355:37">RxERR</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:40"><expr pos:start="357:13" pos:end="357:39"><operator pos:start="357:13" pos:end="357:14">++</operator><name pos:start="357:15" pos:end="357:39"><name pos:start="357:15" pos:end="357:15">s</name><operator pos:start="357:16" pos:end="357:17">-&gt;</operator><name pos:start="357:18" pos:end="357:31">tally_counters</name><operator pos:start="357:32" pos:end="357:32">.</operator><name pos:start="357:33" pos:end="357:39">MissPkt</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="361:13" pos:end="361:34"><expr pos:start="361:13" pos:end="361:33"><call pos:start="361:13" pos:end="361:33"><name pos:start="361:13" pos:end="361:30">rtl8139_update_irq</name><argument_list pos:start="361:31" pos:end="361:33">(<argument pos:start="361:32" pos:end="361:32"><expr pos:start="361:32" pos:end="361:32"><name pos:start="361:32" pos:end="361:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="363:13" pos:end="363:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <decl_stmt pos:start="369:9" pos:end="369:59"><decl pos:start="369:9" pos:end="369:58"><type pos:start="369:9" pos:end="369:16"><name pos:start="369:9" pos:end="369:16">uint32_t</name></type> <name pos:start="369:18" pos:end="369:25">rx_space</name> <init pos:start="369:27" pos:end="369:58">= <expr pos:start="369:29" pos:end="369:58"><name pos:start="369:29" pos:end="369:33">rxdw0</name> <operator pos:start="369:35" pos:end="369:35">&amp;</operator> <name pos:start="369:37" pos:end="369:58">CP_RX_BUFFER_SIZE_MASK</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="373:9" pos:end="373:84">/* TODO: scatter the packet over available receive ring descriptors space */</comment>



        <if_stmt pos:start="377:9" pos:end="405:9"><if pos:start="377:9" pos:end="405:9">if <condition pos:start="377:12" pos:end="377:30">(<expr pos:start="377:13" pos:end="377:29"><name pos:start="377:13" pos:end="377:16">size</name><operator pos:start="377:17" pos:end="377:17">+</operator><literal type="number" pos:start="377:18" pos:end="377:18">4</literal> <operator pos:start="377:20" pos:end="377:20">&gt;</operator> <name pos:start="377:22" pos:end="377:29">rx_space</name></expr>)</condition>

        <block pos:start="379:9" pos:end="405:9">{<block_content pos:start="381:13" pos:end="403:19">

            <expr_stmt pos:start="381:13" pos:end="383:48"><expr pos:start="381:13" pos:end="383:47"><call pos:start="381:13" pos:end="383:47"><name pos:start="381:13" pos:end="381:23">DEBUG_PRINT</name><argument_list pos:start="381:24" pos:end="383:47">(<argument pos:start="381:25" pos:end="383:46"><expr pos:start="381:25" pos:end="383:46"><operator pos:start="381:25" pos:end="381:25">(</operator><literal type="string" pos:start="381:26" pos:end="381:88">"RTL8139: C+ Rx mode : descriptor %d size %d received %d + 4\n"</literal><operator pos:start="381:89" pos:end="381:89">,</operator>

                   <name pos:start="383:20" pos:end="383:29">descriptor</name><operator pos:start="383:30" pos:end="383:30">,</operator> <name pos:start="383:32" pos:end="383:39">rx_space</name><operator pos:start="383:40" pos:end="383:40">,</operator> <name pos:start="383:42" pos:end="383:45">size</name><operator pos:start="383:46" pos:end="383:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="387:13" pos:end="387:40"><expr pos:start="387:13" pos:end="387:39"><name pos:start="387:13" pos:end="387:25"><name pos:start="387:13" pos:end="387:13">s</name><operator pos:start="387:14" pos:end="387:15">-&gt;</operator><name pos:start="387:16" pos:end="387:25">IntrStatus</name></name> <operator pos:start="387:27" pos:end="387:28">|=</operator> <name pos:start="387:30" pos:end="387:39">RxOverflow</name></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:26"><expr pos:start="389:13" pos:end="389:25"><operator pos:start="389:13" pos:end="389:14">++</operator><name pos:start="389:15" pos:end="389:25"><name pos:start="389:15" pos:end="389:15">s</name><operator pos:start="389:16" pos:end="389:17">-&gt;</operator><name pos:start="389:18" pos:end="389:25">RxMissed</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="393:13" pos:end="393:38">/* update tally counter */</comment>

            <expr_stmt pos:start="395:13" pos:end="395:38"><expr pos:start="395:13" pos:end="395:37"><operator pos:start="395:13" pos:end="395:14">++</operator><name pos:start="395:15" pos:end="395:37"><name pos:start="395:15" pos:end="395:15">s</name><operator pos:start="395:16" pos:end="395:17">-&gt;</operator><name pos:start="395:18" pos:end="395:31">tally_counters</name><operator pos:start="395:32" pos:end="395:32">.</operator><name pos:start="395:33" pos:end="395:37">RxERR</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:40"><expr pos:start="397:13" pos:end="397:39"><operator pos:start="397:13" pos:end="397:14">++</operator><name pos:start="397:15" pos:end="397:39"><name pos:start="397:15" pos:end="397:15">s</name><operator pos:start="397:16" pos:end="397:17">-&gt;</operator><name pos:start="397:18" pos:end="397:31">tally_counters</name><operator pos:start="397:32" pos:end="397:32">.</operator><name pos:start="397:33" pos:end="397:39">MissPkt</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="401:13" pos:end="401:34"><expr pos:start="401:13" pos:end="401:33"><call pos:start="401:13" pos:end="401:33"><name pos:start="401:13" pos:end="401:30">rtl8139_update_irq</name><argument_list pos:start="401:31" pos:end="401:33">(<argument pos:start="401:32" pos:end="401:32"><expr pos:start="401:32" pos:end="401:32"><name pos:start="401:32" pos:end="401:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="403:13" pos:end="403:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <decl_stmt pos:start="409:9" pos:end="409:70"><decl pos:start="409:9" pos:end="409:69"><type pos:start="409:9" pos:end="409:26"><name pos:start="409:9" pos:end="409:26">target_phys_addr_t</name></type> <name pos:start="409:28" pos:end="409:34">rx_addr</name> <init pos:start="409:36" pos:end="409:69">= <expr pos:start="409:38" pos:end="409:69"><call pos:start="409:38" pos:end="409:69"><name pos:start="409:38" pos:end="409:51">rtl8139_addr64</name><argument_list pos:start="409:52" pos:end="409:69">(<argument pos:start="409:53" pos:end="409:59"><expr pos:start="409:53" pos:end="409:59"><name pos:start="409:53" pos:end="409:59">rxbufLO</name></expr></argument>, <argument pos:start="409:62" pos:end="409:68"><expr pos:start="409:62" pos:end="409:68"><name pos:start="409:62" pos:end="409:68">rxbufHI</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="413:9" pos:end="413:43">/* receive/copy to target memory */</comment>

        <expr_stmt pos:start="415:9" pos:end="415:56"><expr pos:start="415:9" pos:end="415:55"><call pos:start="415:9" pos:end="415:55"><name pos:start="415:9" pos:end="415:33">cpu_physical_memory_write</name><argument_list pos:start="415:34" pos:end="415:55">( <argument pos:start="415:36" pos:end="415:42"><expr pos:start="415:36" pos:end="415:42"><name pos:start="415:36" pos:end="415:42">rx_addr</name></expr></argument>, <argument pos:start="415:45" pos:end="415:47"><expr pos:start="415:45" pos:end="415:47"><name pos:start="415:45" pos:end="415:47">buf</name></expr></argument>, <argument pos:start="415:50" pos:end="415:53"><expr pos:start="415:50" pos:end="415:53"><name pos:start="415:50" pos:end="415:53">size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="419:9" pos:end="432:0"><if pos:start="419:9" pos:end="432:0">if <condition pos:start="419:12" pos:end="419:37">(<expr pos:start="419:13" pos:end="419:36"><name pos:start="419:13" pos:end="419:20"><name pos:start="419:13" pos:end="419:13">s</name><operator pos:start="419:14" pos:end="419:15">-&gt;</operator><name pos:start="419:16" pos:end="419:20">CpCmd</name></name> <operator pos:start="419:22" pos:end="419:22">&amp;</operator> <name pos:start="419:24" pos:end="419:36">CPlusRxChkSum</name></expr>)</condition>

        <block pos:start="421:9" pos:end="432:0">{<block_content>

            <comment type="block" pos:start="423:13" pos:end="423:45">/* do some packet checksumming */</comment>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="429:9" pos:end="429:28">/* write checksum */</comment>

<cpp:if pos:start="431:1" pos:end="431:37">#<cpp:directive pos:start="431:2" pos:end="431:3">if</cpp:directive> <expr pos:start="431:5" pos:end="431:37"><call pos:start="431:5" pos:end="431:37"><name pos:start="431:5" pos:end="431:11">defined</name> <argument_list pos:start="431:13" pos:end="431:37">(<argument pos:start="431:14" pos:end="431:36"><expr pos:start="431:14" pos:end="431:36"><name pos:start="431:14" pos:end="431:36">RTL8139_CALCULATE_RXCRC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="433:9" pos:end="436:0"><expr pos:start="433:9" pos:end="433:47"><name pos:start="433:9" pos:end="433:11">val</name> <operator pos:start="433:13" pos:end="433:13">=</operator> <call pos:start="433:15" pos:end="433:47"><name pos:start="433:15" pos:end="433:25">cpu_to_le32</name><argument_list pos:start="433:26" pos:end="433:47">(<argument pos:start="433:27" pos:end="433:46"><expr pos:start="433:27" pos:end="433:46"><call pos:start="433:27" pos:end="433:46"><name pos:start="433:27" pos:end="433:31">crc32</name><argument_list pos:start="433:32" pos:end="433:46">(<argument pos:start="433:33" pos:end="433:34"><expr pos:start="433:33" pos:end="433:34"><operator pos:start="433:33" pos:end="433:33">~</operator><literal type="number" pos:start="433:34" pos:end="433:34">0</literal></expr></argument>, <argument pos:start="433:37" pos:end="433:39"><expr pos:start="433:37" pos:end="433:39"><name pos:start="433:37" pos:end="433:39">buf</name></expr></argument>, <argument pos:start="433:42" pos:end="433:45"><expr pos:start="433:42" pos:end="433:45"><name pos:start="433:42" pos:end="433:45">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="435:1" pos:end="435:5">#<cpp:directive pos:start="435:2" pos:end="435:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="437:9" pos:end="440:0"><expr pos:start="437:9" pos:end="437:15"><name pos:start="437:9" pos:end="437:11">val</name> <operator pos:start="437:13" pos:end="437:13">=</operator> <literal type="number" pos:start="437:15" pos:end="437:15">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="439:1" pos:end="439:6">#<cpp:directive pos:start="439:2" pos:end="439:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="441:9" pos:end="484:0"><expr pos:start="441:9" pos:end="441:68"><call pos:start="441:9" pos:end="441:68"><name pos:start="441:9" pos:end="441:33">cpu_physical_memory_write</name><argument_list pos:start="441:34" pos:end="441:68">( <argument pos:start="441:36" pos:end="441:47"><expr pos:start="441:36" pos:end="441:47"><name pos:start="441:36" pos:end="441:42">rx_addr</name><operator pos:start="441:43" pos:end="441:43">+</operator><name pos:start="441:44" pos:end="441:47">size</name></expr></argument>, <argument pos:start="441:50" pos:end="441:64"><expr pos:start="441:50" pos:end="441:64"><operator pos:start="441:50" pos:end="441:50">(</operator><name pos:start="441:51" pos:end="441:57">uint8_t</name> <operator pos:start="441:59" pos:end="441:59">*</operator><operator pos:start="441:60" pos:end="441:60">)</operator><operator pos:start="441:61" pos:end="441:61">&amp;</operator><name pos:start="441:62" pos:end="441:64">val</name></expr></argument>, <argument pos:start="441:67" pos:end="441:67"><expr pos:start="441:67" pos:end="441:67"><literal type="number" pos:start="441:67" pos:end="441:67">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<comment type="block" pos:start="445:1" pos:end="445:43">/* first segment of received packet flag */</comment>

<cpp:define pos:start="447:1" pos:end="447:31">#<cpp:directive pos:start="447:2" pos:end="447:7">define</cpp:directive> <cpp:macro pos:start="447:9" pos:end="447:23"><name pos:start="447:9" pos:end="447:23">CP_RX_STATUS_FS</name></cpp:macro> <cpp:value pos:start="447:25" pos:end="447:31">(1&lt;&lt;29)</cpp:value></cpp:define>

<comment type="block" pos:start="449:1" pos:end="449:42">/* last segment of received packet flag */</comment>

<cpp:define pos:start="451:1" pos:end="451:31">#<cpp:directive pos:start="451:2" pos:end="451:7">define</cpp:directive> <cpp:macro pos:start="451:9" pos:end="451:23"><name pos:start="451:9" pos:end="451:23">CP_RX_STATUS_LS</name></cpp:macro> <cpp:value pos:start="451:25" pos:end="451:31">(1&lt;&lt;28)</cpp:value></cpp:define>

<comment type="block" pos:start="453:1" pos:end="453:27">/* multicast packet flag */</comment>

<cpp:define pos:start="455:1" pos:end="455:32">#<cpp:directive pos:start="455:2" pos:end="455:7">define</cpp:directive> <cpp:macro pos:start="455:9" pos:end="455:24"><name pos:start="455:9" pos:end="455:24">CP_RX_STATUS_MAR</name></cpp:macro> <cpp:value pos:start="455:26" pos:end="455:32">(1&lt;&lt;26)</cpp:value></cpp:define>

<comment type="block" pos:start="457:1" pos:end="457:35">/* physical-matching packet flag */</comment>

<cpp:define pos:start="459:1" pos:end="459:32">#<cpp:directive pos:start="459:2" pos:end="459:7">define</cpp:directive> <cpp:macro pos:start="459:9" pos:end="459:24"><name pos:start="459:9" pos:end="459:24">CP_RX_STATUS_PAM</name></cpp:macro> <cpp:value pos:start="459:26" pos:end="459:32">(1&lt;&lt;25)</cpp:value></cpp:define>

<comment type="block" pos:start="461:1" pos:end="461:27">/* broadcast packet flag */</comment>

<cpp:define pos:start="463:1" pos:end="463:32">#<cpp:directive pos:start="463:2" pos:end="463:7">define</cpp:directive> <cpp:macro pos:start="463:9" pos:end="463:24"><name pos:start="463:9" pos:end="463:24">CP_RX_STATUS_BAR</name></cpp:macro> <cpp:value pos:start="463:26" pos:end="463:32">(1&lt;&lt;24)</cpp:value></cpp:define>

<comment type="block" pos:start="465:1" pos:end="465:22">/* runt packet flag */</comment>

<cpp:define pos:start="467:1" pos:end="467:33">#<cpp:directive pos:start="467:2" pos:end="467:7">define</cpp:directive> <cpp:macro pos:start="467:9" pos:end="467:25"><name pos:start="467:9" pos:end="467:25">CP_RX_STATUS_RUNT</name></cpp:macro> <cpp:value pos:start="467:27" pos:end="467:33">(1&lt;&lt;19)</cpp:value></cpp:define>

<comment type="block" pos:start="469:1" pos:end="469:20">/* crc error flag */</comment>

<cpp:define pos:start="471:1" pos:end="471:32">#<cpp:directive pos:start="471:2" pos:end="471:7">define</cpp:directive> <cpp:macro pos:start="471:9" pos:end="471:24"><name pos:start="471:9" pos:end="471:24">CP_RX_STATUS_CRC</name></cpp:macro> <cpp:value pos:start="471:26" pos:end="471:32">(1&lt;&lt;18)</cpp:value></cpp:define>

<comment type="block" pos:start="473:1" pos:end="473:28">/* IP checksum error flag */</comment>

<cpp:define pos:start="475:1" pos:end="475:32">#<cpp:directive pos:start="475:2" pos:end="475:7">define</cpp:directive> <cpp:macro pos:start="475:9" pos:end="475:24"><name pos:start="475:9" pos:end="475:24">CP_RX_STATUS_IPF</name></cpp:macro> <cpp:value pos:start="475:26" pos:end="475:32">(1&lt;&lt;15)</cpp:value></cpp:define>

<comment type="block" pos:start="477:1" pos:end="477:29">/* UDP checksum error flag */</comment>

<cpp:define pos:start="479:1" pos:end="479:33">#<cpp:directive pos:start="479:2" pos:end="479:7">define</cpp:directive> <cpp:macro pos:start="479:9" pos:end="479:25"><name pos:start="479:9" pos:end="479:25">CP_RX_STATUS_UDPF</name></cpp:macro> <cpp:value pos:start="479:27" pos:end="479:33">(1&lt;&lt;14)</cpp:value></cpp:define>

<comment type="block" pos:start="481:1" pos:end="481:29">/* TCP checksum error flag */</comment>

<cpp:define pos:start="483:1" pos:end="483:33">#<cpp:directive pos:start="483:2" pos:end="483:7">define</cpp:directive> <cpp:macro pos:start="483:9" pos:end="483:25"><name pos:start="483:9" pos:end="483:25">CP_RX_STATUS_TCPF</name></cpp:macro> <cpp:value pos:start="483:27" pos:end="483:33">(1&lt;&lt;13)</cpp:value></cpp:define>



        <comment type="block" pos:start="487:9" pos:end="487:42">/* transfer ownership to target */</comment>

        <expr_stmt pos:start="489:9" pos:end="489:28"><expr pos:start="489:9" pos:end="489:27"><name pos:start="489:9" pos:end="489:13">rxdw0</name> <operator pos:start="489:15" pos:end="489:16">&amp;=</operator> <operator pos:start="489:18" pos:end="489:18">~</operator><name pos:start="489:19" pos:end="489:27">CP_RX_OWN</name></expr>;</expr_stmt>



        <comment type="block" pos:start="493:9" pos:end="493:35">/* set first segment bit */</comment>

        <expr_stmt pos:start="495:9" pos:end="495:33"><expr pos:start="495:9" pos:end="495:32"><name pos:start="495:9" pos:end="495:13">rxdw0</name> <operator pos:start="495:15" pos:end="495:16">|=</operator> <name pos:start="495:18" pos:end="495:32">CP_RX_STATUS_FS</name></expr>;</expr_stmt>



        <comment type="block" pos:start="499:9" pos:end="499:34">/* set last segment bit */</comment>

        <expr_stmt pos:start="501:9" pos:end="501:33"><expr pos:start="501:9" pos:end="501:32"><name pos:start="501:9" pos:end="501:13">rxdw0</name> <operator pos:start="501:15" pos:end="501:16">|=</operator> <name pos:start="501:18" pos:end="501:32">CP_RX_STATUS_LS</name></expr>;</expr_stmt>



        <comment type="block" pos:start="505:9" pos:end="505:44">/* set received packet type flags */</comment>

        <if_stmt pos:start="507:9" pos:end="509:38"><if pos:start="507:9" pos:end="509:38">if <condition pos:start="507:12" pos:end="507:40">(<expr pos:start="507:13" pos:end="507:39"><name pos:start="507:13" pos:end="507:25">packet_header</name> <operator pos:start="507:27" pos:end="507:27">&amp;</operator> <name pos:start="507:29" pos:end="507:39">RxBroadcast</name></expr>)</condition><block type="pseudo" pos:start="509:13" pos:end="509:38"><block_content pos:start="509:13" pos:end="509:38">

            <expr_stmt pos:start="509:13" pos:end="509:38"><expr pos:start="509:13" pos:end="509:37"><name pos:start="509:13" pos:end="509:17">rxdw0</name> <operator pos:start="509:19" pos:end="509:20">|=</operator> <name pos:start="509:22" pos:end="509:37">CP_RX_STATUS_BAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="511:9" pos:end="513:38"><if pos:start="511:9" pos:end="513:38">if <condition pos:start="511:12" pos:end="511:40">(<expr pos:start="511:13" pos:end="511:39"><name pos:start="511:13" pos:end="511:25">packet_header</name> <operator pos:start="511:27" pos:end="511:27">&amp;</operator> <name pos:start="511:29" pos:end="511:39">RxMulticast</name></expr>)</condition><block type="pseudo" pos:start="513:13" pos:end="513:38"><block_content pos:start="513:13" pos:end="513:38">

            <expr_stmt pos:start="513:13" pos:end="513:38"><expr pos:start="513:13" pos:end="513:37"><name pos:start="513:13" pos:end="513:17">rxdw0</name> <operator pos:start="513:19" pos:end="513:20">|=</operator> <name pos:start="513:22" pos:end="513:37">CP_RX_STATUS_MAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="515:9" pos:end="517:38"><if pos:start="515:9" pos:end="517:38">if <condition pos:start="515:12" pos:end="515:39">(<expr pos:start="515:13" pos:end="515:38"><name pos:start="515:13" pos:end="515:25">packet_header</name> <operator pos:start="515:27" pos:end="515:27">&amp;</operator> <name pos:start="515:29" pos:end="515:38">RxPhysical</name></expr>)</condition><block type="pseudo" pos:start="517:13" pos:end="517:38"><block_content pos:start="517:13" pos:end="517:38">

            <expr_stmt pos:start="517:13" pos:end="517:38"><expr pos:start="517:13" pos:end="517:37"><name pos:start="517:13" pos:end="517:17">rxdw0</name> <operator pos:start="517:19" pos:end="517:20">|=</operator> <name pos:start="517:22" pos:end="517:37">CP_RX_STATUS_PAM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="521:9" pos:end="521:31">/* set received size */</comment>

        <expr_stmt pos:start="523:9" pos:end="523:41"><expr pos:start="523:9" pos:end="523:40"><name pos:start="523:9" pos:end="523:13">rxdw0</name> <operator pos:start="523:15" pos:end="523:16">&amp;=</operator> <operator pos:start="523:18" pos:end="523:18">~</operator><name pos:start="523:19" pos:end="523:40">CP_RX_BUFFER_SIZE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="525:9" pos:end="525:26"><expr pos:start="525:9" pos:end="525:25"><name pos:start="525:9" pos:end="525:13">rxdw0</name> <operator pos:start="525:15" pos:end="525:16">|=</operator> <operator pos:start="525:18" pos:end="525:18">(</operator><name pos:start="525:19" pos:end="525:22">size</name><operator pos:start="525:23" pos:end="525:23">+</operator><literal type="number" pos:start="525:24" pos:end="525:24">4</literal><operator pos:start="525:25" pos:end="525:25">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="529:9" pos:end="529:33">/* reset VLAN tag flag */</comment>

        <expr_stmt pos:start="531:9" pos:end="531:29"><expr pos:start="531:9" pos:end="531:28"><name pos:start="531:9" pos:end="531:13">rxdw1</name> <operator pos:start="531:15" pos:end="531:16">&amp;=</operator> <operator pos:start="531:18" pos:end="531:18">~</operator><name pos:start="531:19" pos:end="531:28">CP_RX_TAVA</name></expr>;</expr_stmt>



        <comment type="block" pos:start="535:9" pos:end="535:30">/* update ring data */</comment>

        <expr_stmt pos:start="537:9" pos:end="537:33"><expr pos:start="537:9" pos:end="537:32"><name pos:start="537:9" pos:end="537:11">val</name> <operator pos:start="537:13" pos:end="537:13">=</operator> <call pos:start="537:15" pos:end="537:32"><name pos:start="537:15" pos:end="537:25">cpu_to_le32</name><argument_list pos:start="537:26" pos:end="537:32">(<argument pos:start="537:27" pos:end="537:31"><expr pos:start="537:27" pos:end="537:31"><name pos:start="537:27" pos:end="537:31">rxdw0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="539:9" pos:end="539:77"><expr pos:start="539:9" pos:end="539:76"><call pos:start="539:9" pos:end="539:76"><name pos:start="539:9" pos:end="539:33">cpu_physical_memory_write</name><argument_list pos:start="539:34" pos:end="539:76">(<argument pos:start="539:35" pos:end="539:52"><expr pos:start="539:35" pos:end="539:52"><name pos:start="539:35" pos:end="539:52">cplus_rx_ring_desc</name></expr></argument>,    <argument pos:start="539:58" pos:end="539:72"><expr pos:start="539:58" pos:end="539:72"><operator pos:start="539:58" pos:end="539:58">(</operator><name pos:start="539:59" pos:end="539:65">uint8_t</name> <operator pos:start="539:67" pos:end="539:67">*</operator><operator pos:start="539:68" pos:end="539:68">)</operator><operator pos:start="539:69" pos:end="539:69">&amp;</operator><name pos:start="539:70" pos:end="539:72">val</name></expr></argument>, <argument pos:start="539:75" pos:end="539:75"><expr pos:start="539:75" pos:end="539:75"><literal type="number" pos:start="539:75" pos:end="539:75">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="541:9" pos:end="541:33"><expr pos:start="541:9" pos:end="541:32"><name pos:start="541:9" pos:end="541:11">val</name> <operator pos:start="541:13" pos:end="541:13">=</operator> <call pos:start="541:15" pos:end="541:32"><name pos:start="541:15" pos:end="541:25">cpu_to_le32</name><argument_list pos:start="541:26" pos:end="541:32">(<argument pos:start="541:27" pos:end="541:31"><expr pos:start="541:27" pos:end="541:31"><name pos:start="541:27" pos:end="541:31">rxdw1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="543:9" pos:end="543:77"><expr pos:start="543:9" pos:end="543:76"><call pos:start="543:9" pos:end="543:76"><name pos:start="543:9" pos:end="543:33">cpu_physical_memory_write</name><argument_list pos:start="543:34" pos:end="543:76">(<argument pos:start="543:35" pos:end="543:54"><expr pos:start="543:35" pos:end="543:54"><name pos:start="543:35" pos:end="543:52">cplus_rx_ring_desc</name><operator pos:start="543:53" pos:end="543:53">+</operator><literal type="number" pos:start="543:54" pos:end="543:54">4</literal></expr></argument>,  <argument pos:start="543:58" pos:end="543:72"><expr pos:start="543:58" pos:end="543:72"><operator pos:start="543:58" pos:end="543:58">(</operator><name pos:start="543:59" pos:end="543:65">uint8_t</name> <operator pos:start="543:67" pos:end="543:67">*</operator><operator pos:start="543:68" pos:end="543:68">)</operator><operator pos:start="543:69" pos:end="543:69">&amp;</operator><name pos:start="543:70" pos:end="543:72">val</name></expr></argument>, <argument pos:start="543:75" pos:end="543:75"><expr pos:start="543:75" pos:end="543:75"><literal type="number" pos:start="543:75" pos:end="543:75">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="547:9" pos:end="547:34">/* update tally counter */</comment>

        <expr_stmt pos:start="549:9" pos:end="549:33"><expr pos:start="549:9" pos:end="549:32"><operator pos:start="549:9" pos:end="549:10">++</operator><name pos:start="549:11" pos:end="549:32"><name pos:start="549:11" pos:end="549:11">s</name><operator pos:start="549:12" pos:end="549:13">-&gt;</operator><name pos:start="549:14" pos:end="549:27">tally_counters</name><operator pos:start="549:28" pos:end="549:28">.</operator><name pos:start="549:29" pos:end="549:32">RxOk</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="553:9" pos:end="553:40">/* seek to next Rx descriptor */</comment>

        <if_stmt pos:start="555:9" pos:end="569:9"><if pos:start="555:9" pos:end="561:9">if <condition pos:start="555:12" pos:end="555:30">(<expr pos:start="555:13" pos:end="555:29"><name pos:start="555:13" pos:end="555:17">rxdw0</name> <operator pos:start="555:19" pos:end="555:19">&amp;</operator> <name pos:start="555:21" pos:end="555:29">CP_RX_EOR</name></expr>)</condition>

        <block pos:start="557:9" pos:end="561:9">{<block_content pos:start="559:13" pos:end="559:35">

            <expr_stmt pos:start="559:13" pos:end="559:35"><expr pos:start="559:13" pos:end="559:34"><name pos:start="559:13" pos:end="559:30"><name pos:start="559:13" pos:end="559:13">s</name><operator pos:start="559:14" pos:end="559:15">-&gt;</operator><name pos:start="559:16" pos:end="559:30">currCPlusRxDesc</name></name> <operator pos:start="559:32" pos:end="559:32">=</operator> <literal type="number" pos:start="559:34" pos:end="559:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if>

        <else pos:start="563:9" pos:end="569:9">else

        <block pos:start="565:9" pos:end="569:9">{<block_content pos:start="567:13" pos:end="567:33">

            <expr_stmt pos:start="567:13" pos:end="567:33"><expr pos:start="567:13" pos:end="567:32"><operator pos:start="567:13" pos:end="567:14">++</operator><name pos:start="567:15" pos:end="567:32"><name pos:start="567:15" pos:end="567:15">s</name><operator pos:start="567:16" pos:end="567:17">-&gt;</operator><name pos:start="567:18" pos:end="567:32">currCPlusRxDesc</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="573:9" pos:end="573:69"><expr pos:start="573:9" pos:end="573:68"><call pos:start="573:9" pos:end="573:68"><name pos:start="573:9" pos:end="573:19">DEBUG_PRINT</name><argument_list pos:start="573:20" pos:end="573:68">(<argument pos:start="573:21" pos:end="573:67"><expr pos:start="573:21" pos:end="573:67"><operator pos:start="573:21" pos:end="573:21">(</operator><literal type="string" pos:start="573:22" pos:end="573:66">"RTL8139: done C+ Rx mode ----------------\n"</literal><operator pos:start="573:67" pos:end="573:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if>

    <else pos:start="579:5" pos:end="673:5">else

    <block pos:start="581:5" pos:end="673:5">{<block_content pos:start="583:9" pos:end="671:60">

        <expr_stmt pos:start="583:9" pos:end="583:69"><expr pos:start="583:9" pos:end="583:68"><call pos:start="583:9" pos:end="583:68"><name pos:start="583:9" pos:end="583:19">DEBUG_PRINT</name><argument_list pos:start="583:20" pos:end="583:68">(<argument pos:start="583:21" pos:end="583:67"><expr pos:start="583:21" pos:end="583:67"><operator pos:start="583:21" pos:end="583:21">(</operator><literal type="string" pos:start="583:22" pos:end="583:66">"RTL8139: in ring Rx mode ================\n"</literal><operator pos:start="583:67" pos:end="583:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="587:9" pos:end="587:38">/* begin ring receiver mode */</comment>

        <decl_stmt pos:start="589:9" pos:end="589:88"><decl pos:start="589:9" pos:end="589:87"><type pos:start="589:9" pos:end="589:11"><name pos:start="589:9" pos:end="589:11">int</name></type> <name pos:start="589:13" pos:end="589:17">avail</name> <init pos:start="589:19" pos:end="589:87">= <expr pos:start="589:21" pos:end="589:87"><call pos:start="589:21" pos:end="589:87"><name pos:start="589:21" pos:end="589:24">MOD2</name><argument_list pos:start="589:25" pos:end="589:87">(<argument pos:start="589:26" pos:end="589:69"><expr pos:start="589:26" pos:end="589:69"><name pos:start="589:26" pos:end="589:40"><name pos:start="589:26" pos:end="589:26">s</name><operator pos:start="589:27" pos:end="589:28">-&gt;</operator><name pos:start="589:29" pos:end="589:40">RxBufferSize</name></name> <operator pos:start="589:42" pos:end="589:42">+</operator> <name pos:start="589:44" pos:end="589:54"><name pos:start="589:44" pos:end="589:44">s</name><operator pos:start="589:45" pos:end="589:46">-&gt;</operator><name pos:start="589:47" pos:end="589:54">RxBufPtr</name></name> <operator pos:start="589:56" pos:end="589:56">-</operator> <name pos:start="589:58" pos:end="589:69"><name pos:start="589:58" pos:end="589:58">s</name><operator pos:start="589:59" pos:end="589:60">-&gt;</operator><name pos:start="589:61" pos:end="589:69">RxBufAddr</name></name></expr></argument>, <argument pos:start="589:72" pos:end="589:86"><expr pos:start="589:72" pos:end="589:86"><name pos:start="589:72" pos:end="589:86"><name pos:start="589:72" pos:end="589:72">s</name><operator pos:start="589:73" pos:end="589:74">-&gt;</operator><name pos:start="589:75" pos:end="589:86">RxBufferSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="593:9" pos:end="593:57">/* if receiver buffer is empty then avail == 0 */</comment>



        <if_stmt pos:start="597:9" pos:end="615:9"><if pos:start="597:9" pos:end="615:9">if <condition pos:start="597:12" pos:end="597:44">(<expr pos:start="597:13" pos:end="597:43"><name pos:start="597:13" pos:end="597:17">avail</name> <operator pos:start="597:19" pos:end="597:20">!=</operator> <literal type="number" pos:start="597:22" pos:end="597:22">0</literal> <operator pos:start="597:24" pos:end="597:25">&amp;&amp;</operator> <name pos:start="597:27" pos:end="597:30">size</name> <operator pos:start="597:32" pos:end="597:32">+</operator> <literal type="number" pos:start="597:34" pos:end="597:34">8</literal> <operator pos:start="597:36" pos:end="597:37">&gt;=</operator> <name pos:start="597:39" pos:end="597:43">avail</name></expr>)</condition>

        <block pos:start="599:9" pos:end="615:9">{<block_content pos:start="601:13" pos:end="613:19">

            <expr_stmt pos:start="601:13" pos:end="603:81"><expr pos:start="601:13" pos:end="603:80"><call pos:start="601:13" pos:end="603:80"><name pos:start="601:13" pos:end="601:23">DEBUG_PRINT</name><argument_list pos:start="601:24" pos:end="603:80">(<argument pos:start="601:25" pos:end="603:79"><expr pos:start="601:25" pos:end="603:79"><operator pos:start="601:25" pos:end="601:25">(</operator><literal type="string" pos:start="601:26" pos:end="601:118">"rx overflow: rx buffer length %d head 0x%04x read 0x%04x === available 0x%04x need 0x%04x\n"</literal><operator pos:start="601:119" pos:end="601:119">,</operator>

                   <name pos:start="603:20" pos:end="603:34"><name pos:start="603:20" pos:end="603:20">s</name><operator pos:start="603:21" pos:end="603:22">-&gt;</operator><name pos:start="603:23" pos:end="603:34">RxBufferSize</name></name><operator pos:start="603:35" pos:end="603:35">,</operator> <name pos:start="603:37" pos:end="603:48"><name pos:start="603:37" pos:end="603:37">s</name><operator pos:start="603:38" pos:end="603:39">-&gt;</operator><name pos:start="603:40" pos:end="603:48">RxBufAddr</name></name><operator pos:start="603:49" pos:end="603:49">,</operator> <name pos:start="603:51" pos:end="603:61"><name pos:start="603:51" pos:end="603:51">s</name><operator pos:start="603:52" pos:end="603:53">-&gt;</operator><name pos:start="603:54" pos:end="603:61">RxBufPtr</name></name><operator pos:start="603:62" pos:end="603:62">,</operator> <name pos:start="603:64" pos:end="603:68">avail</name><operator pos:start="603:69" pos:end="603:69">,</operator> <name pos:start="603:71" pos:end="603:74">size</name> <operator pos:start="603:76" pos:end="603:76">+</operator> <literal type="number" pos:start="603:78" pos:end="603:78">8</literal><operator pos:start="603:79" pos:end="603:79">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="607:13" pos:end="607:40"><expr pos:start="607:13" pos:end="607:39"><name pos:start="607:13" pos:end="607:25"><name pos:start="607:13" pos:end="607:13">s</name><operator pos:start="607:14" pos:end="607:15">-&gt;</operator><name pos:start="607:16" pos:end="607:25">IntrStatus</name></name> <operator pos:start="607:27" pos:end="607:28">|=</operator> <name pos:start="607:30" pos:end="607:39">RxOverflow</name></expr>;</expr_stmt>

            <expr_stmt pos:start="609:13" pos:end="609:26"><expr pos:start="609:13" pos:end="609:25"><operator pos:start="609:13" pos:end="609:14">++</operator><name pos:start="609:15" pos:end="609:25"><name pos:start="609:15" pos:end="609:15">s</name><operator pos:start="609:16" pos:end="609:17">-&gt;</operator><name pos:start="609:18" pos:end="609:25">RxMissed</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="611:13" pos:end="611:34"><expr pos:start="611:13" pos:end="611:33"><call pos:start="611:13" pos:end="611:33"><name pos:start="611:13" pos:end="611:30">rtl8139_update_irq</name><argument_list pos:start="611:31" pos:end="611:33">(<argument pos:start="611:32" pos:end="611:32"><expr pos:start="611:32" pos:end="611:32"><name pos:start="611:32" pos:end="611:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="613:13" pos:end="613:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="619:9" pos:end="619:36"><expr pos:start="619:9" pos:end="619:35"><name pos:start="619:9" pos:end="619:21">packet_header</name> <operator pos:start="619:23" pos:end="619:24">|=</operator> <name pos:start="619:26" pos:end="619:35">RxStatusOK</name></expr>;</expr_stmt>



        <expr_stmt pos:start="623:9" pos:end="623:57"><expr pos:start="623:9" pos:end="623:56"><name pos:start="623:9" pos:end="623:21">packet_header</name> <operator pos:start="623:23" pos:end="623:24">|=</operator> <operator pos:start="623:26" pos:end="623:26">(</operator><operator pos:start="623:27" pos:end="623:27">(</operator><operator pos:start="623:28" pos:end="623:28">(</operator><name pos:start="623:29" pos:end="623:32">size</name><operator pos:start="623:33" pos:end="623:33">+</operator><literal type="number" pos:start="623:34" pos:end="623:34">4</literal><operator pos:start="623:35" pos:end="623:35">)</operator> <operator pos:start="623:37" pos:end="623:38">&lt;&lt;</operator> <literal type="number" pos:start="623:40" pos:end="623:41">16</literal><operator pos:start="623:42" pos:end="623:42">)</operator> <operator pos:start="623:44" pos:end="623:44">&amp;</operator> <literal type="number" pos:start="623:46" pos:end="623:55">0xffff0000</literal><operator pos:start="623:56" pos:end="623:56">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="627:9" pos:end="627:26">/* write header */</comment>

        <decl_stmt pos:start="629:9" pos:end="629:50"><decl pos:start="629:9" pos:end="629:49"><type pos:start="629:9" pos:end="629:16"><name pos:start="629:9" pos:end="629:16">uint32_t</name></type> <name pos:start="629:18" pos:end="629:20">val</name> <init pos:start="629:22" pos:end="629:49">= <expr pos:start="629:24" pos:end="629:49"><call pos:start="629:24" pos:end="629:49"><name pos:start="629:24" pos:end="629:34">cpu_to_le32</name><argument_list pos:start="629:35" pos:end="629:49">(<argument pos:start="629:36" pos:end="629:48"><expr pos:start="629:36" pos:end="629:48"><name pos:start="629:36" pos:end="629:48">packet_header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="633:9" pos:end="633:52"><expr pos:start="633:9" pos:end="633:51"><call pos:start="633:9" pos:end="633:51"><name pos:start="633:9" pos:end="633:28">rtl8139_write_buffer</name><argument_list pos:start="633:29" pos:end="633:51">(<argument pos:start="633:30" pos:end="633:30"><expr pos:start="633:30" pos:end="633:30"><name pos:start="633:30" pos:end="633:30">s</name></expr></argument>, <argument pos:start="633:33" pos:end="633:47"><expr pos:start="633:33" pos:end="633:47"><operator pos:start="633:33" pos:end="633:33">(</operator><name pos:start="633:34" pos:end="633:40">uint8_t</name> <operator pos:start="633:42" pos:end="633:42">*</operator><operator pos:start="633:43" pos:end="633:43">)</operator><operator pos:start="633:44" pos:end="633:44">&amp;</operator><name pos:start="633:45" pos:end="633:47">val</name></expr></argument>, <argument pos:start="633:50" pos:end="633:50"><expr pos:start="633:50" pos:end="633:50"><literal type="number" pos:start="633:50" pos:end="633:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="637:9" pos:end="644:0"><expr pos:start="637:9" pos:end="637:42"><call pos:start="637:9" pos:end="637:42"><name pos:start="637:9" pos:end="637:28">rtl8139_write_buffer</name><argument_list pos:start="637:29" pos:end="637:42">(<argument pos:start="637:30" pos:end="637:30"><expr pos:start="637:30" pos:end="637:30"><name pos:start="637:30" pos:end="637:30">s</name></expr></argument>, <argument pos:start="637:33" pos:end="637:35"><expr pos:start="637:33" pos:end="637:35"><name pos:start="637:33" pos:end="637:35">buf</name></expr></argument>, <argument pos:start="637:38" pos:end="637:41"><expr pos:start="637:38" pos:end="637:41"><name pos:start="637:38" pos:end="637:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="641:9" pos:end="641:28">/* write checksum */</comment>

<cpp:if pos:start="643:1" pos:end="643:37">#<cpp:directive pos:start="643:2" pos:end="643:3">if</cpp:directive> <expr pos:start="643:5" pos:end="643:37"><call pos:start="643:5" pos:end="643:37"><name pos:start="643:5" pos:end="643:11">defined</name> <argument_list pos:start="643:13" pos:end="643:37">(<argument pos:start="643:14" pos:end="643:36"><expr pos:start="643:14" pos:end="643:36"><name pos:start="643:14" pos:end="643:36">RTL8139_CALCULATE_RXCRC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="645:9" pos:end="648:0"><expr pos:start="645:9" pos:end="645:47"><name pos:start="645:9" pos:end="645:11">val</name> <operator pos:start="645:13" pos:end="645:13">=</operator> <call pos:start="645:15" pos:end="645:47"><name pos:start="645:15" pos:end="645:25">cpu_to_le32</name><argument_list pos:start="645:26" pos:end="645:47">(<argument pos:start="645:27" pos:end="645:46"><expr pos:start="645:27" pos:end="645:46"><call pos:start="645:27" pos:end="645:46"><name pos:start="645:27" pos:end="645:31">crc32</name><argument_list pos:start="645:32" pos:end="645:46">(<argument pos:start="645:33" pos:end="645:34"><expr pos:start="645:33" pos:end="645:34"><operator pos:start="645:33" pos:end="645:33">~</operator><literal type="number" pos:start="645:34" pos:end="645:34">0</literal></expr></argument>, <argument pos:start="645:37" pos:end="645:39"><expr pos:start="645:37" pos:end="645:39"><name pos:start="645:37" pos:end="645:39">buf</name></expr></argument>, <argument pos:start="645:42" pos:end="645:45"><expr pos:start="645:42" pos:end="645:45"><name pos:start="645:42" pos:end="645:45">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="647:1" pos:end="647:5">#<cpp:directive pos:start="647:2" pos:end="647:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="649:9" pos:end="652:0"><expr pos:start="649:9" pos:end="649:15"><name pos:start="649:9" pos:end="649:11">val</name> <operator pos:start="649:13" pos:end="649:13">=</operator> <literal type="number" pos:start="649:15" pos:end="649:15">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="651:1" pos:end="651:6">#<cpp:directive pos:start="651:2" pos:end="651:6">endif</cpp:directive></cpp:endif>



        <expr_stmt pos:start="655:9" pos:end="655:52"><expr pos:start="655:9" pos:end="655:51"><call pos:start="655:9" pos:end="655:51"><name pos:start="655:9" pos:end="655:28">rtl8139_write_buffer</name><argument_list pos:start="655:29" pos:end="655:51">(<argument pos:start="655:30" pos:end="655:30"><expr pos:start="655:30" pos:end="655:30"><name pos:start="655:30" pos:end="655:30">s</name></expr></argument>, <argument pos:start="655:33" pos:end="655:47"><expr pos:start="655:33" pos:end="655:47"><operator pos:start="655:33" pos:end="655:33">(</operator><name pos:start="655:34" pos:end="655:40">uint8_t</name> <operator pos:start="655:42" pos:end="655:42">*</operator><operator pos:start="655:43" pos:end="655:43">)</operator><operator pos:start="655:44" pos:end="655:44">&amp;</operator><name pos:start="655:45" pos:end="655:47">val</name></expr></argument>, <argument pos:start="655:50" pos:end="655:50"><expr pos:start="655:50" pos:end="655:50"><literal type="number" pos:start="655:50" pos:end="655:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="659:9" pos:end="659:42">/* correct buffer write pointer */</comment>

        <expr_stmt pos:start="661:9" pos:end="661:72"><expr pos:start="661:9" pos:end="661:71"><name pos:start="661:9" pos:end="661:20"><name pos:start="661:9" pos:end="661:9">s</name><operator pos:start="661:10" pos:end="661:11">-&gt;</operator><name pos:start="661:12" pos:end="661:20">RxBufAddr</name></name> <operator pos:start="661:22" pos:end="661:22">=</operator> <call pos:start="661:24" pos:end="661:71"><name pos:start="661:24" pos:end="661:27">MOD2</name><argument_list pos:start="661:28" pos:end="661:71">(<argument pos:start="661:29" pos:end="661:53"><expr pos:start="661:29" pos:end="661:53"><operator pos:start="661:29" pos:end="661:29">(</operator><name pos:start="661:30" pos:end="661:41"><name pos:start="661:30" pos:end="661:30">s</name><operator pos:start="661:31" pos:end="661:32">-&gt;</operator><name pos:start="661:33" pos:end="661:41">RxBufAddr</name></name> <operator pos:start="661:43" pos:end="661:43">+</operator> <literal type="number" pos:start="661:45" pos:end="661:45">3</literal><operator pos:start="661:46" pos:end="661:46">)</operator> <operator pos:start="661:48" pos:end="661:48">&amp;</operator> <operator pos:start="661:50" pos:end="661:50">~</operator><literal type="number" pos:start="661:51" pos:end="661:53">0x3</literal></expr></argument>, <argument pos:start="661:56" pos:end="661:70"><expr pos:start="661:56" pos:end="661:70"><name pos:start="661:56" pos:end="661:70"><name pos:start="661:56" pos:end="661:56">s</name><operator pos:start="661:57" pos:end="661:58">-&gt;</operator><name pos:start="661:59" pos:end="661:70">RxBufferSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="665:9" pos:end="665:58">/* now we can signal we have received something */</comment>



        <expr_stmt pos:start="669:9" pos:end="671:60"><expr pos:start="669:9" pos:end="671:59"><call pos:start="669:9" pos:end="671:59"><name pos:start="669:9" pos:end="669:19">DEBUG_PRINT</name><argument_list pos:start="669:20" pos:end="671:59">(<argument pos:start="669:21" pos:end="671:58"><expr pos:start="669:21" pos:end="671:58"><operator pos:start="669:21" pos:end="669:21">(</operator><literal type="string" pos:start="669:22" pos:end="669:81">"   received: rx buffer length %d head 0x%04x read 0x%04x\n"</literal><operator pos:start="669:82" pos:end="669:82">,</operator>

               <name pos:start="671:16" pos:end="671:30"><name pos:start="671:16" pos:end="671:16">s</name><operator pos:start="671:17" pos:end="671:18">-&gt;</operator><name pos:start="671:19" pos:end="671:30">RxBufferSize</name></name><operator pos:start="671:31" pos:end="671:31">,</operator> <name pos:start="671:33" pos:end="671:44"><name pos:start="671:33" pos:end="671:33">s</name><operator pos:start="671:34" pos:end="671:35">-&gt;</operator><name pos:start="671:36" pos:end="671:44">RxBufAddr</name></name><operator pos:start="671:45" pos:end="671:45">,</operator> <name pos:start="671:47" pos:end="671:57"><name pos:start="671:47" pos:end="671:47">s</name><operator pos:start="671:48" pos:end="671:49">-&gt;</operator><name pos:start="671:50" pos:end="671:57">RxBufPtr</name></name><operator pos:start="671:58" pos:end="671:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="677:5" pos:end="677:26"><expr pos:start="677:5" pos:end="677:25"><name pos:start="677:5" pos:end="677:17"><name pos:start="677:5" pos:end="677:5">s</name><operator pos:start="677:6" pos:end="677:7">-&gt;</operator><name pos:start="677:8" pos:end="677:17">IntrStatus</name></name> <operator pos:start="677:19" pos:end="677:20">|=</operator> <name pos:start="677:22" pos:end="677:25">RxOK</name></expr>;</expr_stmt>



    <if_stmt pos:start="681:5" pos:end="687:5"><if pos:start="681:5" pos:end="687:5">if <condition pos:start="681:8" pos:end="681:21">(<expr pos:start="681:9" pos:end="681:20"><name pos:start="681:9" pos:end="681:20">do_interrupt</name></expr>)</condition>

    <block pos:start="683:5" pos:end="687:5">{<block_content pos:start="685:9" pos:end="685:30">

        <expr_stmt pos:start="685:9" pos:end="685:30"><expr pos:start="685:9" pos:end="685:29"><call pos:start="685:9" pos:end="685:29"><name pos:start="685:9" pos:end="685:26">rtl8139_update_irq</name><argument_list pos:start="685:27" pos:end="685:29">(<argument pos:start="685:28" pos:end="685:28"><expr pos:start="685:28" pos:end="685:28"><name pos:start="685:28" pos:end="685:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
