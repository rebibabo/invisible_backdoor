<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15085.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">unpack_alpha</name><parameter_list pos:start="1:25" pos:end="3:44">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:38">GetBitContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">gb</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:57"><decl pos:start="1:45" pos:end="1:57"><type pos:start="1:45" pos:end="1:57"><name pos:start="1:45" pos:end="1:52">uint16_t</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">dst</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:73">num_coeffs</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:43"><decl pos:start="3:26" pos:end="3:43"><type pos:start="3:26" pos:end="3:43"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:43">num_bits</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:31">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:13"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:13">int</name></type> <name pos:start="7:15" pos:end="7:18">mask</name> <init pos:start="7:20" pos:end="7:40">= <expr pos:start="7:22" pos:end="7:40"><operator pos:start="7:22" pos:end="7:22">(</operator><literal type="number" pos:start="7:23" pos:end="7:23">1</literal> <operator pos:start="7:25" pos:end="7:26">&lt;&lt;</operator> <name pos:start="7:28" pos:end="7:35">num_bits</name><operator pos:start="7:36" pos:end="7:36">)</operator> <operator pos:start="7:38" pos:end="7:38">-</operator> <literal type="number" pos:start="7:40" pos:end="7:40">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">idx</name></decl>, <decl pos:start="9:17" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:19">val</name></decl>, <decl pos:start="9:22" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:30">alpha_val</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:18"><expr pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:7">idx</name>       <operator pos:start="13:15" pos:end="13:15">=</operator> <literal type="number" pos:start="13:17" pos:end="13:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:21"><expr pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:13">alpha_val</name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:20">mask</name></expr>;</expr_stmt>

    <do pos:start="17:5" pos:end="79:31">do <block pos:start="17:8" pos:end="79:5">{<block_content pos:start="19:9" pos:end="77:65">

        <do pos:start="19:9" pos:end="55:32">do <block pos:start="19:12" pos:end="55:9">{<block_content pos:start="21:13" pos:end="53:22">

            <if_stmt pos:start="21:13" pos:end="39:13"><if pos:start="21:13" pos:end="23:45">if <condition pos:start="21:16" pos:end="21:30">(<expr pos:start="21:17" pos:end="21:29"><call pos:start="21:17" pos:end="21:29"><name pos:start="21:17" pos:end="21:25">get_bits1</name><argument_list pos:start="21:26" pos:end="21:29">(<argument pos:start="21:27" pos:end="21:28"><expr pos:start="21:27" pos:end="21:28"><name pos:start="21:27" pos:end="21:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="23:17" pos:end="23:45"><block_content pos:start="23:17" pos:end="23:45">

                <expr_stmt pos:start="23:17" pos:end="23:45"><expr pos:start="23:17" pos:end="23:44"><name pos:start="23:17" pos:end="23:19">val</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <call pos:start="23:23" pos:end="23:44"><name pos:start="23:23" pos:end="23:30">get_bits</name><argument_list pos:start="23:31" pos:end="23:44">(<argument pos:start="23:32" pos:end="23:33"><expr pos:start="23:32" pos:end="23:33"><name pos:start="23:32" pos:end="23:33">gb</name></expr></argument>, <argument pos:start="23:36" pos:end="23:43"><expr pos:start="23:36" pos:end="23:43"><name pos:start="23:36" pos:end="23:43">num_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="25:13" pos:end="39:13">else <block pos:start="25:18" pos:end="39:13">{<block_content pos:start="27:17" pos:end="37:31">

                <decl_stmt pos:start="27:17" pos:end="27:25"><decl pos:start="27:17" pos:end="27:24"><type pos:start="27:17" pos:end="27:19"><name pos:start="27:17" pos:end="27:19">int</name></type> <name pos:start="27:21" pos:end="27:24">sign</name></decl>;</decl_stmt>

                <expr_stmt pos:start="29:17" pos:end="29:60"><expr pos:start="29:17" pos:end="29:59"><name pos:start="29:17" pos:end="29:19">val</name>  <operator pos:start="29:22" pos:end="29:22">=</operator> <call pos:start="29:24" pos:end="29:59"><name pos:start="29:24" pos:end="29:31">get_bits</name><argument_list pos:start="29:32" pos:end="29:59">(<argument pos:start="29:33" pos:end="29:34"><expr pos:start="29:33" pos:end="29:34"><name pos:start="29:33" pos:end="29:34">gb</name></expr></argument>, <argument pos:start="29:37" pos:end="29:58"><expr pos:start="29:37" pos:end="29:58"><ternary pos:start="29:37" pos:end="29:58"><condition pos:start="29:37" pos:end="29:52"><expr pos:start="29:37" pos:end="29:50"><name pos:start="29:37" pos:end="29:44">num_bits</name> <operator pos:start="29:46" pos:end="29:47">==</operator> <literal type="number" pos:start="29:49" pos:end="29:50">16</literal></expr> ?</condition><then pos:start="29:54" pos:end="29:54"> <expr pos:start="29:54" pos:end="29:54"><literal type="number" pos:start="29:54" pos:end="29:54">7</literal></expr> </then><else pos:start="29:56" pos:end="29:58">: <expr pos:start="29:58" pos:end="29:58"><literal type="number" pos:start="29:58" pos:end="29:58">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="31:17" pos:end="31:31"><expr pos:start="31:17" pos:end="31:30"><name pos:start="31:17" pos:end="31:20">sign</name> <operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:26">val</name> <operator pos:start="31:28" pos:end="31:28">&amp;</operator> <literal type="number" pos:start="31:30" pos:end="31:30">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:38"><expr pos:start="33:17" pos:end="33:37"><name pos:start="33:17" pos:end="33:19">val</name>  <operator pos:start="33:22" pos:end="33:22">=</operator> <operator pos:start="33:24" pos:end="33:24">(</operator><name pos:start="33:25" pos:end="33:27">val</name> <operator pos:start="33:29" pos:end="33:29">+</operator> <literal type="number" pos:start="33:31" pos:end="33:31">2</literal><operator pos:start="33:32" pos:end="33:32">)</operator> <operator pos:start="33:34" pos:end="33:35">&gt;&gt;</operator> <literal type="number" pos:start="33:37" pos:end="33:37">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="35:17" pos:end="37:31"><if pos:start="35:17" pos:end="37:31">if <condition pos:start="35:20" pos:end="35:25">(<expr pos:start="35:21" pos:end="35:24"><name pos:start="35:21" pos:end="35:24">sign</name></expr>)</condition><block type="pseudo" pos:start="37:21" pos:end="37:31"><block_content pos:start="37:21" pos:end="37:31">

                    <expr_stmt pos:start="37:21" pos:end="37:31"><expr pos:start="37:21" pos:end="37:30"><name pos:start="37:21" pos:end="37:23">val</name> <operator pos:start="37:25" pos:end="37:25">=</operator> <operator pos:start="37:27" pos:end="37:27">-</operator><name pos:start="37:28" pos:end="37:30">val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:49"><expr pos:start="41:13" pos:end="41:48"><name pos:start="41:13" pos:end="41:21">alpha_val</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <operator pos:start="41:25" pos:end="41:25">(</operator><name pos:start="41:26" pos:end="41:34">alpha_val</name> <operator pos:start="41:36" pos:end="41:36">+</operator> <name pos:start="41:38" pos:end="41:40">val</name><operator pos:start="41:41" pos:end="41:41">)</operator> <operator pos:start="41:43" pos:end="41:43">&amp;</operator> <name pos:start="41:45" pos:end="41:48">mask</name></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="49:65"><if pos:start="43:13" pos:end="45:44">if <condition pos:start="43:16" pos:end="43:31">(<expr pos:start="43:17" pos:end="43:30"><name pos:start="43:17" pos:end="43:24">num_bits</name> <operator pos:start="43:26" pos:end="43:27">==</operator> <literal type="number" pos:start="43:29" pos:end="43:30">16</literal></expr>)</condition><block type="pseudo" pos:start="45:17" pos:end="45:44"><block_content pos:start="45:17" pos:end="45:44">

                <expr_stmt pos:start="45:17" pos:end="45:44"><expr pos:start="45:17" pos:end="45:43"><name pos:start="45:17" pos:end="45:26"><name pos:start="45:17" pos:end="45:19">dst</name><index pos:start="45:20" pos:end="45:26">[<expr pos:start="45:21" pos:end="45:25"><name pos:start="45:21" pos:end="45:23">idx</name><operator pos:start="45:24" pos:end="45:25">++</operator></expr>]</index></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <name pos:start="45:30" pos:end="45:38">alpha_val</name> <operator pos:start="45:40" pos:end="45:41">&gt;&gt;</operator> <literal type="number" pos:start="45:43" pos:end="45:43">6</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="47:13" pos:end="49:65">else<block type="pseudo" pos:start="49:17" pos:end="49:65"><block_content pos:start="49:17" pos:end="49:65">

                <expr_stmt pos:start="49:17" pos:end="49:65"><expr pos:start="49:17" pos:end="49:64"><name pos:start="49:17" pos:end="49:26"><name pos:start="49:17" pos:end="49:19">dst</name><index pos:start="49:20" pos:end="49:26">[<expr pos:start="49:21" pos:end="49:25"><name pos:start="49:21" pos:end="49:23">idx</name><operator pos:start="49:24" pos:end="49:25">++</operator></expr>]</index></name> <operator pos:start="49:28" pos:end="49:28">=</operator> <operator pos:start="49:30" pos:end="49:30">(</operator><name pos:start="49:31" pos:end="49:39">alpha_val</name> <operator pos:start="49:41" pos:end="49:42">&lt;&lt;</operator> <literal type="number" pos:start="49:44" pos:end="49:44">2</literal><operator pos:start="49:45" pos:end="49:45">)</operator> <operator pos:start="49:47" pos:end="49:47">|</operator> <operator pos:start="49:49" pos:end="49:49">(</operator><name pos:start="49:50" pos:end="49:58">alpha_val</name> <operator pos:start="49:60" pos:end="49:61">&gt;&gt;</operator> <literal type="number" pos:start="49:63" pos:end="49:63">6</literal><operator pos:start="49:64" pos:end="49:64">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="51:13" pos:end="53:22"><if pos:start="51:13" pos:end="53:22">if <condition pos:start="51:16" pos:end="51:38">(<expr pos:start="51:17" pos:end="51:37"><name pos:start="51:17" pos:end="51:19">idx</name> <operator pos:start="51:21" pos:end="51:22">==</operator> <name pos:start="51:24" pos:end="51:33">num_coeffs</name> <operator pos:start="51:35" pos:end="51:35">-</operator> <literal type="number" pos:start="51:37" pos:end="51:37">1</literal></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:22"><block_content pos:start="53:17" pos:end="53:22">

                <break pos:start="53:17" pos:end="53:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block> while <condition pos:start="55:17" pos:end="55:31">(<expr pos:start="55:18" pos:end="55:30"><call pos:start="55:18" pos:end="55:30"><name pos:start="55:18" pos:end="55:26">get_bits1</name><argument_list pos:start="55:27" pos:end="55:30">(<argument pos:start="55:28" pos:end="55:29"><expr pos:start="55:28" pos:end="55:29"><name pos:start="55:28" pos:end="55:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

        <expr_stmt pos:start="57:9" pos:end="57:30"><expr pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:11">val</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:29"><name pos:start="57:15" pos:end="57:22">get_bits</name><argument_list pos:start="57:23" pos:end="57:29">(<argument pos:start="57:24" pos:end="57:25"><expr pos:start="57:24" pos:end="57:25"><name pos:start="57:24" pos:end="57:25">gb</name></expr></argument>, <argument pos:start="57:28" pos:end="57:28"><expr pos:start="57:28" pos:end="57:28"><literal type="number" pos:start="57:28" pos:end="57:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="61:35"><if pos:start="59:9" pos:end="61:35">if <condition pos:start="59:12" pos:end="59:17">(<expr pos:start="59:13" pos:end="59:16"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:16">val</name></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:35"><block_content pos:start="61:13" pos:end="61:35">

            <expr_stmt pos:start="61:13" pos:end="61:35"><expr pos:start="61:13" pos:end="61:34"><name pos:start="61:13" pos:end="61:15">val</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:34"><name pos:start="61:19" pos:end="61:26">get_bits</name><argument_list pos:start="61:27" pos:end="61:34">(<argument pos:start="61:28" pos:end="61:29"><expr pos:start="61:28" pos:end="61:29"><name pos:start="61:28" pos:end="61:29">gb</name></expr></argument>, <argument pos:start="61:32" pos:end="61:33"><expr pos:start="61:32" pos:end="61:33"><literal type="number" pos:start="61:32" pos:end="61:33">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="65:35"><if pos:start="63:9" pos:end="65:35">if <condition pos:start="63:12" pos:end="63:35">(<expr pos:start="63:13" pos:end="63:34"><name pos:start="63:13" pos:end="63:15">idx</name> <operator pos:start="63:17" pos:end="63:17">+</operator> <name pos:start="63:19" pos:end="63:21">val</name> <operator pos:start="63:23" pos:end="63:23">&gt;</operator> <name pos:start="63:25" pos:end="63:34">num_coeffs</name></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:35"><block_content pos:start="65:13" pos:end="65:35">

            <expr_stmt pos:start="65:13" pos:end="65:35"><expr pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:15">val</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <name pos:start="65:19" pos:end="65:28">num_coeffs</name> <operator pos:start="65:30" pos:end="65:30">-</operator> <name pos:start="65:32" pos:end="65:34">idx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="77:65"><if pos:start="67:9" pos:end="71:44">if <condition pos:start="67:12" pos:end="67:27">(<expr pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:20">num_bits</name> <operator pos:start="67:22" pos:end="67:23">==</operator> <literal type="number" pos:start="67:25" pos:end="67:26">16</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="71:44"><block_content pos:start="69:13" pos:end="71:44">

            <for pos:start="69:13" pos:end="71:44">for <control pos:start="69:17" pos:end="69:37">(<init pos:start="69:18" pos:end="69:23"><expr pos:start="69:18" pos:end="69:22"><name pos:start="69:18" pos:end="69:18">i</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr>;</init> <condition pos:start="69:25" pos:end="69:32"><expr pos:start="69:25" pos:end="69:31"><name pos:start="69:25" pos:end="69:25">i</name> <operator pos:start="69:27" pos:end="69:27">&lt;</operator> <name pos:start="69:29" pos:end="69:31">val</name></expr>;</condition> <incr pos:start="69:34" pos:end="69:36"><expr pos:start="69:34" pos:end="69:36"><name pos:start="69:34" pos:end="69:34">i</name><operator pos:start="69:35" pos:end="69:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="71:17" pos:end="71:44"><block_content pos:start="71:17" pos:end="71:44">

                <expr_stmt pos:start="71:17" pos:end="71:44"><expr pos:start="71:17" pos:end="71:43"><name pos:start="71:17" pos:end="71:26"><name pos:start="71:17" pos:end="71:19">dst</name><index pos:start="71:20" pos:end="71:26">[<expr pos:start="71:21" pos:end="71:25"><name pos:start="71:21" pos:end="71:23">idx</name><operator pos:start="71:24" pos:end="71:25">++</operator></expr>]</index></name> <operator pos:start="71:28" pos:end="71:28">=</operator> <name pos:start="71:30" pos:end="71:38">alpha_val</name> <operator pos:start="71:40" pos:end="71:41">&gt;&gt;</operator> <literal type="number" pos:start="71:43" pos:end="71:43">6</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

        <else pos:start="73:9" pos:end="77:65">else<block type="pseudo" pos:start="75:13" pos:end="77:65"><block_content pos:start="75:13" pos:end="77:65">

            <for pos:start="75:13" pos:end="77:65">for <control pos:start="75:17" pos:end="75:37">(<init pos:start="75:18" pos:end="75:23"><expr pos:start="75:18" pos:end="75:22"><name pos:start="75:18" pos:end="75:18">i</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <literal type="number" pos:start="75:22" pos:end="75:22">0</literal></expr>;</init> <condition pos:start="75:25" pos:end="75:32"><expr pos:start="75:25" pos:end="75:31"><name pos:start="75:25" pos:end="75:25">i</name> <operator pos:start="75:27" pos:end="75:27">&lt;</operator> <name pos:start="75:29" pos:end="75:31">val</name></expr>;</condition> <incr pos:start="75:34" pos:end="75:36"><expr pos:start="75:34" pos:end="75:36"><name pos:start="75:34" pos:end="75:34">i</name><operator pos:start="75:35" pos:end="75:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="77:17" pos:end="77:65"><block_content pos:start="77:17" pos:end="77:65">

                <expr_stmt pos:start="77:17" pos:end="77:65"><expr pos:start="77:17" pos:end="77:64"><name pos:start="77:17" pos:end="77:26"><name pos:start="77:17" pos:end="77:19">dst</name><index pos:start="77:20" pos:end="77:26">[<expr pos:start="77:21" pos:end="77:25"><name pos:start="77:21" pos:end="77:23">idx</name><operator pos:start="77:24" pos:end="77:25">++</operator></expr>]</index></name> <operator pos:start="77:28" pos:end="77:28">=</operator> <operator pos:start="77:30" pos:end="77:30">(</operator><name pos:start="77:31" pos:end="77:39">alpha_val</name> <operator pos:start="77:41" pos:end="77:42">&lt;&lt;</operator> <literal type="number" pos:start="77:44" pos:end="77:44">2</literal><operator pos:start="77:45" pos:end="77:45">)</operator> <operator pos:start="77:47" pos:end="77:47">|</operator> <operator pos:start="77:49" pos:end="77:49">(</operator><name pos:start="77:50" pos:end="77:58">alpha_val</name> <operator pos:start="77:60" pos:end="77:61">&gt;&gt;</operator> <literal type="number" pos:start="77:63" pos:end="77:63">6</literal><operator pos:start="77:64" pos:end="77:64">)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

    </block_content>}</block> while <condition pos:start="79:13" pos:end="79:30">(<expr pos:start="79:14" pos:end="79:29"><name pos:start="79:14" pos:end="79:16">idx</name> <operator pos:start="79:18" pos:end="79:18">&lt;</operator> <name pos:start="79:20" pos:end="79:29">num_coeffs</name></expr>)</condition>;</do>

</block_content>}</block></function>
</unit>
