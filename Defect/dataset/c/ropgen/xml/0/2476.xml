<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2476.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint64_t</name></type> <name pos:start="1:10" pos:end="1:25">ptimer_get_count</name><parameter_list pos:start="1:26" pos:end="1:42">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">ptimer_state</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:19">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:15">now</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:20">counter</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="105:5"><if pos:start="11:5" pos:end="101:5">if <condition pos:start="11:8" pos:end="11:19">(<expr pos:start="11:9" pos:end="11:18"><name pos:start="11:9" pos:end="11:18"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:18">enabled</name></name></expr>)</condition> <block pos:start="11:21" pos:end="101:5">{<block_content pos:start="13:9" pos:end="99:9">

        <expr_stmt pos:start="13:9" pos:end="13:52"><expr pos:start="13:9" pos:end="13:51"><name pos:start="13:9" pos:end="13:11">now</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <call pos:start="13:15" pos:end="13:51"><name pos:start="13:15" pos:end="13:31">qemu_clock_get_ns</name><argument_list pos:start="13:32" pos:end="13:51">(<argument pos:start="13:33" pos:end="13:50"><expr pos:start="13:33" pos:end="13:50"><name pos:start="13:33" pos:end="13:50">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="15:9" pos:end="15:52">/* Figure out the current counter value.  */</comment>

        <if_stmt pos:start="17:9" pos:end="99:9"><if pos:start="17:9" pos:end="27:9">if <condition pos:start="17:12" pos:end="19:30">(<expr pos:start="17:13" pos:end="19:29"><name pos:start="17:13" pos:end="17:15">now</name> <operator pos:start="17:17" pos:end="17:17">-</operator> <name pos:start="17:19" pos:end="17:31"><name pos:start="17:19" pos:end="17:19">s</name><operator pos:start="17:20" pos:end="17:21">-&gt;</operator><name pos:start="17:22" pos:end="17:31">next_event</name></name> <operator pos:start="17:33" pos:end="17:33">&gt;</operator> <literal type="number" pos:start="17:35" pos:end="17:35">0</literal>

            <operator pos:start="19:13" pos:end="19:14">||</operator> <name pos:start="19:16" pos:end="19:24"><name pos:start="19:16" pos:end="19:16">s</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:24">period</name></name> <operator pos:start="19:26" pos:end="19:27">==</operator> <literal type="number" pos:start="19:29" pos:end="19:29">0</literal></expr>)</condition> <block pos:start="19:32" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:24">

            <comment type="block" pos:start="21:13" pos:end="23:29">/* Prevent timer underflowing if it should already have

               triggered.  */</comment>

            <expr_stmt pos:start="25:13" pos:end="25:24"><expr pos:start="25:13" pos:end="25:23"><name pos:start="25:13" pos:end="25:19">counter</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <literal type="number" pos:start="25:23" pos:end="25:23">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="27:11" pos:end="99:9">else <block pos:start="27:16" pos:end="99:9">{<block_content pos:start="29:13" pos:end="97:32">

            <decl_stmt pos:start="29:13" pos:end="29:25"><decl pos:start="29:13" pos:end="29:24"><type pos:start="29:13" pos:end="29:20"><name pos:start="29:13" pos:end="29:20">uint64_t</name></type> <name pos:start="29:22" pos:end="29:24">rem</name></decl>;</decl_stmt>

            <decl_stmt pos:start="31:13" pos:end="31:25"><decl pos:start="31:13" pos:end="31:24"><type pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:20">uint64_t</name></type> <name pos:start="31:22" pos:end="31:24">div</name></decl>;</decl_stmt>

            <decl_stmt pos:start="33:13" pos:end="33:27"><decl pos:start="33:13" pos:end="33:20"><type pos:start="33:13" pos:end="33:15"><name pos:start="33:13" pos:end="33:15">int</name></type> <name pos:start="33:17" pos:end="33:20">clz1</name></decl>, <decl pos:start="33:23" pos:end="33:26"><type ref="prev" pos:start="33:13" pos:end="33:15"/><name pos:start="33:23" pos:end="33:26">clz2</name></decl>;</decl_stmt>

            <decl_stmt pos:start="35:13" pos:end="35:22"><decl pos:start="35:13" pos:end="35:21"><type pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">int</name></type> <name pos:start="35:17" pos:end="35:21">shift</name></decl>;</decl_stmt>



            <comment type="block" pos:start="39:13" pos:end="55:14">/* We need to divide time by period, where time is stored in

               rem (64-bit integer) and period is stored in period/period_frac

               (64.32 fixed point).

              

               Doing full precision division is hard, so scale values and

               do a 64-bit division.  The result should be rounded down,

               so that the rounding error never causes the timer to go

               backwards.

            */</comment>



            <expr_stmt pos:start="59:13" pos:end="59:38"><expr pos:start="59:13" pos:end="59:37"><name pos:start="59:13" pos:end="59:15">rem</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <name pos:start="59:19" pos:end="59:31"><name pos:start="59:19" pos:end="59:19">s</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:31">next_event</name></name> <operator pos:start="59:33" pos:end="59:33">-</operator> <name pos:start="59:35" pos:end="59:37">now</name></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:28"><expr pos:start="61:13" pos:end="61:27"><name pos:start="61:13" pos:end="61:15">div</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:27"><name pos:start="61:19" pos:end="61:19">s</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:27">period</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="65:13" pos:end="65:30"><expr pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:16">clz1</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:29"><name pos:start="65:20" pos:end="65:24">clz64</name><argument_list pos:start="65:25" pos:end="65:29">(<argument pos:start="65:26" pos:end="65:28"><expr pos:start="65:26" pos:end="65:28"><name pos:start="65:26" pos:end="65:28">rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:30"><expr pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:16">clz2</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <call pos:start="67:20" pos:end="67:29"><name pos:start="67:20" pos:end="67:24">clz64</name><argument_list pos:start="67:25" pos:end="67:29">(<argument pos:start="67:26" pos:end="67:28"><expr pos:start="67:26" pos:end="67:28"><name pos:start="67:26" pos:end="67:28">div</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:46"><expr pos:start="69:13" pos:end="69:45"><name pos:start="69:13" pos:end="69:17">shift</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <ternary pos:start="69:21" pos:end="69:45"><condition pos:start="69:21" pos:end="69:33"><expr pos:start="69:21" pos:end="69:31"><name pos:start="69:21" pos:end="69:24">clz1</name> <operator pos:start="69:26" pos:end="69:26">&lt;</operator> <name pos:start="69:28" pos:end="69:31">clz2</name></expr> ?</condition><then pos:start="69:35" pos:end="69:38"> <expr pos:start="69:35" pos:end="69:38"><name pos:start="69:35" pos:end="69:38">clz1</name></expr> </then><else pos:start="69:40" pos:end="69:45">: <expr pos:start="69:42" pos:end="69:45"><name pos:start="69:42" pos:end="69:45">clz2</name></expr></else></ternary></expr>;</expr_stmt>



            <expr_stmt pos:start="73:13" pos:end="73:26"><expr pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:15">rem</name> <operator pos:start="73:17" pos:end="73:19">&lt;&lt;=</operator> <name pos:start="73:21" pos:end="73:25">shift</name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:26"><expr pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:15">div</name> <operator pos:start="75:17" pos:end="75:19">&lt;&lt;=</operator> <name pos:start="75:21" pos:end="75:25">shift</name></expr>;</expr_stmt>

            <if_stmt pos:start="77:13" pos:end="95:13"><if pos:start="77:13" pos:end="81:13">if <condition pos:start="77:16" pos:end="77:28">(<expr pos:start="77:17" pos:end="77:27"><name pos:start="77:17" pos:end="77:21">shift</name> <operator pos:start="77:23" pos:end="77:24">&gt;=</operator> <literal type="number" pos:start="77:26" pos:end="77:27">32</literal></expr>)</condition> <block pos:start="77:30" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:66">

                <expr_stmt pos:start="79:17" pos:end="79:66"><expr pos:start="79:17" pos:end="79:65"><name pos:start="79:17" pos:end="79:19">div</name> <operator pos:start="79:21" pos:end="79:22">|=</operator> <operator pos:start="79:24" pos:end="79:24">(</operator><operator pos:start="79:25" pos:end="79:25">(</operator><name pos:start="79:26" pos:end="79:33">uint64_t</name><operator pos:start="79:34" pos:end="79:34">)</operator><name pos:start="79:35" pos:end="79:48"><name pos:start="79:35" pos:end="79:35">s</name><operator pos:start="79:36" pos:end="79:37">-&gt;</operator><name pos:start="79:38" pos:end="79:48">period_frac</name></name> <operator pos:start="79:50" pos:end="79:51">&lt;&lt;</operator> <operator pos:start="79:53" pos:end="79:53">(</operator><name pos:start="79:54" pos:end="79:58">shift</name> <operator pos:start="79:60" pos:end="79:60">-</operator> <literal type="number" pos:start="79:62" pos:end="79:63">32</literal><operator pos:start="79:64" pos:end="79:64">)</operator><operator pos:start="79:65" pos:end="79:65">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="81:15" pos:end="95:13">else <block pos:start="81:20" pos:end="95:13">{<block_content pos:start="83:17" pos:end="93:29">

                <if_stmt pos:start="83:17" pos:end="85:60"><if pos:start="83:17" pos:end="85:60">if <condition pos:start="83:20" pos:end="83:31">(<expr pos:start="83:21" pos:end="83:30"><name pos:start="83:21" pos:end="83:25">shift</name> <operator pos:start="83:27" pos:end="83:28">!=</operator> <literal type="number" pos:start="83:30" pos:end="83:30">0</literal></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="85:60"><block_content pos:start="85:21" pos:end="85:60">

                    <expr_stmt pos:start="85:21" pos:end="85:60"><expr pos:start="85:21" pos:end="85:59"><name pos:start="85:21" pos:end="85:23">div</name> <operator pos:start="85:25" pos:end="85:26">|=</operator> <operator pos:start="85:28" pos:end="85:28">(</operator><name pos:start="85:29" pos:end="85:42"><name pos:start="85:29" pos:end="85:29">s</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:42">period_frac</name></name> <operator pos:start="85:44" pos:end="85:45">&gt;&gt;</operator> <operator pos:start="85:47" pos:end="85:47">(</operator><literal type="number" pos:start="85:48" pos:end="85:51">32</literal> <operator pos:start="85:51" pos:end="85:51">-</operator> <name pos:start="85:53" pos:end="85:57">shift</name><operator pos:start="85:58" pos:end="85:58">)</operator><operator pos:start="85:59" pos:end="85:59">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="block" pos:start="87:17" pos:end="89:33">/* Look at remaining bits of period_frac and round div up if 

                   necessary.  */</comment>

                <if_stmt pos:start="91:17" pos:end="93:29"><if pos:start="91:17" pos:end="93:29">if <condition pos:start="91:20" pos:end="91:56">(<expr pos:start="91:21" pos:end="91:55"><operator pos:start="91:21" pos:end="91:21">(</operator><name pos:start="91:22" pos:end="91:29">uint32_t</name><operator pos:start="91:30" pos:end="91:30">)</operator><operator pos:start="91:31" pos:end="91:31">(</operator><name pos:start="91:32" pos:end="91:45"><name pos:start="91:32" pos:end="91:32">s</name><operator pos:start="91:33" pos:end="91:34">-&gt;</operator><name pos:start="91:35" pos:end="91:45">period_frac</name></name> <operator pos:start="91:47" pos:end="91:48">&lt;&lt;</operator> <name pos:start="91:50" pos:end="91:54">shift</name><operator pos:start="91:55" pos:end="91:55">)</operator></expr>)</condition><block type="pseudo" pos:start="93:21" pos:end="93:29"><block_content pos:start="93:21" pos:end="93:29">

                    <expr_stmt pos:start="93:21" pos:end="93:29"><expr pos:start="93:21" pos:end="93:28"><name pos:start="93:21" pos:end="93:23">div</name> <operator pos:start="93:25" pos:end="93:26">+=</operator> <literal type="number" pos:start="93:28" pos:end="93:28">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:32"><expr pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:19">counter</name> <operator pos:start="97:21" pos:end="97:21">=</operator> <name pos:start="97:23" pos:end="97:25">rem</name> <operator pos:start="97:27" pos:end="97:27">/</operator> <name pos:start="97:29" pos:end="97:31">div</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="101:7" pos:end="105:5">else <block pos:start="101:12" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:27">

        <expr_stmt pos:start="103:9" pos:end="103:27"><expr pos:start="103:9" pos:end="103:26"><name pos:start="103:9" pos:end="103:15">counter</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <name pos:start="103:19" pos:end="103:26"><name pos:start="103:19" pos:end="103:19">s</name><operator pos:start="103:20" pos:end="103:21">-&gt;</operator><name pos:start="103:22" pos:end="103:26">delta</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="107:5" pos:end="107:19">return <expr pos:start="107:12" pos:end="107:18"><name pos:start="107:12" pos:end="107:18">counter</name></expr>;</return>

</block_content>}</block></function>
</unit>
