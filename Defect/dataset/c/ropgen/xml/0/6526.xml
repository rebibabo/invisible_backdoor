<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6526.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">get_cpuid_vendor</name><parameter_list pos:start="1:29" pos:end="3:58">(<parameter pos:start="1:30" pos:end="1:45"><decl pos:start="1:30" pos:end="1:45"><type pos:start="1:30" pos:end="1:45"><name pos:start="1:30" pos:end="1:40">CPUX86State</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">env</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:60"><decl pos:start="1:48" pos:end="1:60"><type pos:start="1:48" pos:end="1:60"><name pos:start="1:48" pos:end="1:55">uint32_t</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:60">ebx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:42"><decl pos:start="3:30" pos:end="3:42"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:37">uint32_t</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:42">ecx</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:52">uint32_t</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:57">edx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="33:1">{<block_content pos:start="7:5" pos:end="31:5">

    <expr_stmt pos:start="7:5" pos:end="7:30"><expr pos:start="7:5" pos:end="7:29"><operator pos:start="7:5" pos:end="7:5">*</operator><name pos:start="7:6" pos:end="7:8">ebx</name> <operator pos:start="7:10" pos:end="7:10">=</operator> <name pos:start="7:12" pos:end="7:29"><name pos:start="7:12" pos:end="7:14">env</name><operator pos:start="7:15" pos:end="7:16">-&gt;</operator><name pos:start="7:17" pos:end="7:29">cpuid_vendor1</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:30"><expr pos:start="9:5" pos:end="9:29"><operator pos:start="9:5" pos:end="9:5">*</operator><name pos:start="9:6" pos:end="9:8">edx</name> <operator pos:start="9:10" pos:end="9:10">=</operator> <name pos:start="9:12" pos:end="9:29"><name pos:start="9:12" pos:end="9:14">env</name><operator pos:start="9:15" pos:end="9:16">-&gt;</operator><name pos:start="9:17" pos:end="9:29">cpuid_vendor2</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:30"><expr pos:start="11:5" pos:end="11:29"><operator pos:start="11:5" pos:end="11:5">*</operator><name pos:start="11:6" pos:end="11:8">ecx</name> <operator pos:start="11:10" pos:end="11:10">=</operator> <name pos:start="11:12" pos:end="11:29"><name pos:start="11:12" pos:end="11:14">env</name><operator pos:start="11:15" pos:end="11:16">-&gt;</operator><name pos:start="11:17" pos:end="11:29">cpuid_vendor3</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="25:7">/* sysenter isn't supported on compatibility mode on AMD, syscall

     * isn't supported in compatibility mode on Intel.

     * Normally we advertise the actual cpu vendor, but you can override

     * this if you want to use KVM's sysenter/syscall emulation

     * in compatibility mode and when doing cross vendor migration

     */</comment>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:52">(<expr pos:start="27:9" pos:end="27:51"><call pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:19">kvm_enabled</name><argument_list pos:start="27:20" pos:end="27:21">()</argument_list></call> <operator pos:start="27:23" pos:end="27:24">&amp;&amp;</operator> <name pos:start="27:26" pos:end="27:51"><name pos:start="27:26" pos:end="27:28">env</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:51">cpuid_vendor_override</name></name></expr>)</condition> <block pos:start="27:54" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:46">

        <expr_stmt pos:start="29:9" pos:end="29:46"><expr pos:start="29:9" pos:end="29:45"><call pos:start="29:9" pos:end="29:45"><name pos:start="29:9" pos:end="29:18">host_cpuid</name><argument_list pos:start="29:19" pos:end="29:45">(<argument pos:start="29:20" pos:end="29:20"><expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr></argument>, <argument pos:start="29:23" pos:end="29:23"><expr pos:start="29:23" pos:end="29:23"><literal type="number" pos:start="29:23" pos:end="29:23">0</literal></expr></argument>, <argument pos:start="29:26" pos:end="29:29"><expr pos:start="29:26" pos:end="29:29"><name pos:start="29:26" pos:end="29:29">NULL</name></expr></argument>, <argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><name pos:start="29:32" pos:end="29:34">ebx</name></expr></argument>, <argument pos:start="29:37" pos:end="29:39"><expr pos:start="29:37" pos:end="29:39"><name pos:start="29:37" pos:end="29:39">ecx</name></expr></argument>, <argument pos:start="29:42" pos:end="29:44"><expr pos:start="29:42" pos:end="29:44"><name pos:start="29:42" pos:end="29:44">edx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
