<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/458.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">char</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:24">assign_name</name><parameter_list pos:start="1:25" pos:end="1:64">(<parameter pos:start="1:26" pos:end="1:44"><decl pos:start="1:26" pos:end="1:44"><type pos:start="1:26" pos:end="1:44"><name pos:start="1:26" pos:end="1:39">NetClientState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">nc1</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><specifier pos:start="1:47" pos:end="1:51">const</specifier> <name pos:start="1:53" pos:end="1:56">char</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:63">model</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:25">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">NetClientState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:22">nc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:17"><name pos:start="7:10" pos:end="7:12">buf</name><index pos:start="7:13" pos:end="7:17">[<expr pos:start="7:14" pos:end="7:16"><literal type="number" pos:start="7:14" pos:end="7:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">id</name> <init pos:start="9:12" pos:end="9:14">= <expr pos:start="9:14" pos:end="9:14"><literal type="number" pos:start="9:14" pos:end="9:14">0</literal></expr></init></decl>;</decl_stmt>



    <macro pos:start="13:5" pos:end="13:42"><name pos:start="13:5" pos:end="13:18">QTAILQ_FOREACH</name><argument_list pos:start="13:19" pos:end="13:42">(<argument pos:start="13:20" pos:end="13:21">nc</argument>, <argument pos:start="13:24" pos:end="13:35">&amp;net_clients</argument>, <argument pos:start="13:38" pos:end="13:41">next</argument>)</argument_list></macro> <block pos:start="13:44" pos:end="31:5">{<block_content pos:start="15:9" pos:end="29:9">

        <if_stmt pos:start="15:9" pos:end="19:9"><if pos:start="15:9" pos:end="19:9">if <condition pos:start="15:12" pos:end="15:22">(<expr pos:start="15:13" pos:end="15:21"><name pos:start="15:13" pos:end="15:14">nc</name> <operator pos:start="15:16" pos:end="15:17">==</operator> <name pos:start="15:19" pos:end="15:21">nc1</name></expr>)</condition> <block pos:start="15:24" pos:end="19:9">{<block_content pos:start="17:13" pos:end="17:21">

            <continue pos:start="17:13" pos:end="17:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="21:9" pos:end="21:70">/* For compatibility only bump id for net clients on a vlan */</comment>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="25:49">(<expr pos:start="23:13" pos:end="25:48"><call pos:start="23:13" pos:end="23:36"><name pos:start="23:13" pos:end="23:18">strcmp</name><argument_list pos:start="23:19" pos:end="23:36">(<argument pos:start="23:20" pos:end="23:28"><expr pos:start="23:20" pos:end="23:28"><name pos:start="23:20" pos:end="23:28"><name pos:start="23:20" pos:end="23:21">nc</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:28">model</name></name></expr></argument>, <argument pos:start="23:31" pos:end="23:35"><expr pos:start="23:31" pos:end="23:35"><name pos:start="23:31" pos:end="23:35">model</name></expr></argument>)</argument_list></call> <operator pos:start="23:38" pos:end="23:39">==</operator> <literal type="number" pos:start="23:41" pos:end="23:41">0</literal> <operator pos:start="23:43" pos:end="23:44">&amp;&amp;</operator>

            <call pos:start="25:13" pos:end="25:43"><name pos:start="25:13" pos:end="25:33">net_hub_id_for_client</name><argument_list pos:start="25:34" pos:end="25:43">(<argument pos:start="25:35" pos:end="25:36"><expr pos:start="25:35" pos:end="25:36"><name pos:start="25:35" pos:end="25:36">nc</name></expr></argument>, <argument pos:start="25:39" pos:end="25:42"><expr pos:start="25:39" pos:end="25:42"><name pos:start="25:39" pos:end="25:42">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="25:45" pos:end="25:46">==</operator> <literal type="number" pos:start="25:48" pos:end="25:48">0</literal></expr>)</condition> <block pos:start="25:51" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:17">

            <expr_stmt pos:start="27:13" pos:end="27:17"><expr pos:start="27:13" pos:end="27:16"><name pos:start="27:13" pos:end="27:14">id</name><operator pos:start="27:15" pos:end="27:16">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="35:5" pos:end="35:51"><expr pos:start="35:5" pos:end="35:50"><call pos:start="35:5" pos:end="35:50"><name pos:start="35:5" pos:end="35:12">snprintf</name><argument_list pos:start="35:13" pos:end="35:50">(<argument pos:start="35:14" pos:end="35:16"><expr pos:start="35:14" pos:end="35:16"><name pos:start="35:14" pos:end="35:16">buf</name></expr></argument>, <argument pos:start="35:19" pos:end="35:29"><expr pos:start="35:19" pos:end="35:29"><sizeof pos:start="35:19" pos:end="35:29">sizeof<argument_list pos:start="35:25" pos:end="35:29">(<argument pos:start="35:26" pos:end="35:28"><expr pos:start="35:26" pos:end="35:28"><name pos:start="35:26" pos:end="35:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:32" pos:end="35:38"><expr pos:start="35:32" pos:end="35:38"><literal type="string" pos:start="35:32" pos:end="35:38">"%s.%d"</literal></expr></argument>, <argument pos:start="35:41" pos:end="35:45"><expr pos:start="35:41" pos:end="35:45"><name pos:start="35:41" pos:end="35:45">model</name></expr></argument>, <argument pos:start="35:48" pos:end="35:49"><expr pos:start="35:48" pos:end="35:49"><name pos:start="35:48" pos:end="35:49">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="39:5" pos:end="39:25">return <expr pos:start="39:12" pos:end="39:24"><call pos:start="39:12" pos:end="39:24"><name pos:start="39:12" pos:end="39:19">g_strdup</name><argument_list pos:start="39:20" pos:end="39:24">(<argument pos:start="39:21" pos:end="39:23"><expr pos:start="39:21" pos:end="39:23"><name pos:start="39:21" pos:end="39:23">buf</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
