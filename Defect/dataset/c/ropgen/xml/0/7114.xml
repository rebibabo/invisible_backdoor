<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7114.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:23">BlockDriverAIOCB</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:38">raw_aio_write</name><parameter_list pos:start="1:39" pos:end="5:52">(<parameter pos:start="1:40" pos:end="1:59"><decl pos:start="1:40" pos:end="1:59"><type pos:start="1:40" pos:end="1:59"><name pos:start="1:40" pos:end="1:55">BlockDriverState</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:26"><decl pos:start="3:9" pos:end="3:26"><type pos:start="3:9" pos:end="3:26"><name pos:start="3:9" pos:end="3:15">int64_t</name></type> <name pos:start="3:17" pos:end="3:26">sector_num</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><specifier pos:start="3:29" pos:end="3:33">const</specifier> <name pos:start="3:35" pos:end="3:41">uint8_t</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:46">buf</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:62"><decl pos:start="3:49" pos:end="3:62"><type pos:start="3:49" pos:end="3:62"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:62">nb_sectors</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:37"><decl pos:start="5:9" pos:end="5:37"><type pos:start="5:9" pos:end="5:37"><name pos:start="5:9" pos:end="5:33">BlockDriverCompletionFunc</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:37">cb</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:51"><decl pos:start="5:40" pos:end="5:51"><type pos:start="5:40" pos:end="5:51"><name pos:start="5:40" pos:end="5:43">void</name> <modifier pos:start="5:45" pos:end="5:45">*</modifier></type><name pos:start="5:46" pos:end="5:51">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="59:1">{<block_content pos:start="9:5" pos:end="57:24">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">RawAIOCB</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">acb</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="19:7">/*

     * If O_DIRECT is used and the buffer is not aligned fall back

     * to synchronous IO.

     */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">BDRVRawState</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:19">s</name> <init pos:start="21:21" pos:end="21:32">= <expr pos:start="21:23" pos:end="21:32"><name pos:start="21:23" pos:end="21:32"><name pos:start="21:23" pos:end="21:24">bs</name><operator pos:start="21:25" pos:end="21:26">-&gt;</operator><name pos:start="21:27" pos:end="21:32">opaque</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="39:5"><if pos:start="25:5" pos:end="39:5">if <condition pos:start="25:8" pos:end="25:68">(<expr pos:start="25:9" pos:end="25:67"><call pos:start="25:9" pos:end="25:67"><name pos:start="25:9" pos:end="25:16">unlikely</name><argument_list pos:start="25:17" pos:end="25:67">(<argument pos:start="25:18" pos:end="25:66"><expr pos:start="25:18" pos:end="25:66"><name pos:start="25:18" pos:end="25:31"><name pos:start="25:18" pos:end="25:18">s</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:31">aligned_buf</name></name> <operator pos:start="25:33" pos:end="25:34">!=</operator> <name pos:start="25:36" pos:end="25:39">NULL</name> <operator pos:start="25:41" pos:end="25:42">&amp;&amp;</operator> <operator pos:start="25:44" pos:end="25:44">(</operator><operator pos:start="25:45" pos:end="25:45">(</operator><name pos:start="25:46" pos:end="25:54">uintptr_t</name><operator pos:start="25:55" pos:end="25:55">)</operator> <name pos:start="25:57" pos:end="25:59">buf</name> <operator pos:start="25:61" pos:end="25:61">%</operator> <literal type="number" pos:start="25:63" pos:end="25:65">512</literal><operator pos:start="25:66" pos:end="25:66">)</operator></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:70" pos:end="39:5">{<block_content pos:start="27:9" pos:end="37:28">

        <decl_stmt pos:start="27:9" pos:end="27:19"><decl pos:start="27:9" pos:end="27:18"><type pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:14">QEMUBH</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:18">bh</name></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:43"><expr pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:11">acb</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:42"><name pos:start="29:15" pos:end="29:26">qemu_aio_get</name><argument_list pos:start="29:27" pos:end="29:42">(<argument pos:start="29:28" pos:end="29:29"><expr pos:start="29:28" pos:end="29:29"><name pos:start="29:28" pos:end="29:29">bs</name></expr></argument>, <argument pos:start="29:32" pos:end="29:33"><expr pos:start="29:32" pos:end="29:33"><name pos:start="29:32" pos:end="29:33">cb</name></expr></argument>, <argument pos:start="29:36" pos:end="29:41"><expr pos:start="29:36" pos:end="29:41"><name pos:start="29:36" pos:end="29:41">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:75"><expr pos:start="31:9" pos:end="31:74"><name pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:11">acb</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:16">ret</name></name> <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:74"><name pos:start="31:20" pos:end="31:29">raw_pwrite</name><argument_list pos:start="31:30" pos:end="31:74">(<argument pos:start="31:31" pos:end="31:32"><expr pos:start="31:31" pos:end="31:32"><name pos:start="31:31" pos:end="31:32">bs</name></expr></argument>, <argument pos:start="31:35" pos:end="31:50"><expr pos:start="31:35" pos:end="31:50"><literal type="number" pos:start="31:35" pos:end="31:37">512</literal> <operator pos:start="31:39" pos:end="31:39">*</operator> <name pos:start="31:41" pos:end="31:50">sector_num</name></expr></argument>, <argument pos:start="31:53" pos:end="31:55"><expr pos:start="31:53" pos:end="31:55"><name pos:start="31:53" pos:end="31:55">buf</name></expr></argument>, <argument pos:start="31:58" pos:end="31:73"><expr pos:start="31:58" pos:end="31:73"><literal type="number" pos:start="31:58" pos:end="31:60">512</literal> <operator pos:start="31:62" pos:end="31:62">*</operator> <name pos:start="31:64" pos:end="31:73">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:45"><expr pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:10">bh</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:44"><name pos:start="33:14" pos:end="33:24">qemu_bh_new</name><argument_list pos:start="33:25" pos:end="33:44">(<argument pos:start="33:26" pos:end="33:38"><expr pos:start="33:26" pos:end="33:38"><name pos:start="33:26" pos:end="33:38">raw_aio_em_cb</name></expr></argument>, <argument pos:start="33:41" pos:end="33:43"><expr pos:start="33:41" pos:end="33:43"><name pos:start="33:41" pos:end="33:43">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:29"><expr pos:start="35:9" pos:end="35:28"><call pos:start="35:9" pos:end="35:28"><name pos:start="35:9" pos:end="35:24">qemu_bh_schedule</name><argument_list pos:start="35:25" pos:end="35:28">(<argument pos:start="35:26" pos:end="35:27"><expr pos:start="35:26" pos:end="35:27"><name pos:start="35:26" pos:end="35:27">bh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:28">return <expr pos:start="37:16" pos:end="37:27"><operator pos:start="37:16" pos:end="37:16">&amp;</operator><name pos:start="37:17" pos:end="37:27"><name pos:start="37:17" pos:end="37:19">acb</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:27">common</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:79"><expr pos:start="43:5" pos:end="43:78"><name pos:start="43:5" pos:end="43:7">acb</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:78"><name pos:start="43:11" pos:end="43:23">raw_aio_setup</name><argument_list pos:start="43:24" pos:end="43:78">(<argument pos:start="43:25" pos:end="43:26"><expr pos:start="43:25" pos:end="43:26"><name pos:start="43:25" pos:end="43:26">bs</name></expr></argument>, <argument pos:start="43:29" pos:end="43:38"><expr pos:start="43:29" pos:end="43:38"><name pos:start="43:29" pos:end="43:38">sector_num</name></expr></argument>, <argument pos:start="43:41" pos:end="43:53"><expr pos:start="43:41" pos:end="43:53"><operator pos:start="43:41" pos:end="43:41">(</operator><name pos:start="43:42" pos:end="43:48">uint8_t</name><operator pos:start="43:49" pos:end="43:49">*</operator><operator pos:start="43:50" pos:end="43:50">)</operator><name pos:start="43:51" pos:end="43:53">buf</name></expr></argument>, <argument pos:start="43:56" pos:end="43:65"><expr pos:start="43:56" pos:end="43:65"><name pos:start="43:56" pos:end="43:65">nb_sectors</name></expr></argument>, <argument pos:start="43:68" pos:end="43:69"><expr pos:start="43:68" pos:end="43:69"><name pos:start="43:68" pos:end="43:69">cb</name></expr></argument>, <argument pos:start="43:72" pos:end="43:77"><expr pos:start="43:72" pos:end="43:77"><name pos:start="43:72" pos:end="43:77">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="47:20"><if pos:start="45:5" pos:end="47:20">if <condition pos:start="45:8" pos:end="45:13">(<expr pos:start="45:9" pos:end="45:12"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:12">acb</name></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:20"><block_content pos:start="47:9" pos:end="47:20">

        <return pos:start="47:9" pos:end="47:20">return <expr pos:start="47:16" pos:end="47:19"><name pos:start="47:16" pos:end="47:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:35">(<expr pos:start="49:9" pos:end="49:34"><call pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:17">aio_write</name><argument_list pos:start="49:18" pos:end="49:30">(<argument pos:start="49:19" pos:end="49:29"><expr pos:start="49:19" pos:end="49:29"><operator pos:start="49:19" pos:end="49:19">&amp;</operator><name pos:start="49:20" pos:end="49:29"><name pos:start="49:20" pos:end="49:22">acb</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:29">aiocb</name></name></expr></argument>)</argument_list></call> <operator pos:start="49:32" pos:end="49:32">&lt;</operator> <literal type="number" pos:start="49:34" pos:end="49:34">0</literal></expr>)</condition> <block pos:start="49:37" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:20">

        <expr_stmt pos:start="51:9" pos:end="51:30"><expr pos:start="51:9" pos:end="51:29"><call pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:24">qemu_aio_release</name><argument_list pos:start="51:25" pos:end="51:29">(<argument pos:start="51:26" pos:end="51:28"><expr pos:start="51:26" pos:end="51:28"><name pos:start="51:26" pos:end="51:28">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:20">return <expr pos:start="53:16" pos:end="53:19"><name pos:start="53:16" pos:end="53:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="57:5" pos:end="57:24">return <expr pos:start="57:12" pos:end="57:23"><operator pos:start="57:12" pos:end="57:12">&amp;</operator><name pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:15">acb</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:23">common</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
