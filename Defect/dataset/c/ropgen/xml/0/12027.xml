<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12027.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">pxa2xx_i2c_write</name><parameter_list pos:start="1:29" pos:end="3:61">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:54"><decl pos:start="1:44" pos:end="1:54"><type pos:start="1:44" pos:end="1:54"><name pos:start="1:44" pos:end="1:49">hwaddr</name></type> <name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:45"><decl pos:start="3:30" pos:end="3:45"><type pos:start="3:30" pos:end="3:45"><name pos:start="3:30" pos:end="3:37">uint64_t</name></type> <name pos:start="3:39" pos:end="3:45">value64</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:60"><decl pos:start="3:48" pos:end="3:60"><type pos:start="3:48" pos:end="3:60"><name pos:start="3:48" pos:end="3:55">unsigned</name></type> <name pos:start="3:57" pos:end="3:60">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:5">

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">PXA2xxI2CState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:49">= <expr pos:start="7:25" pos:end="7:49"><operator pos:start="7:25" pos:end="7:25">(</operator><name pos:start="7:26" pos:end="7:39">PXA2xxI2CState</name> <operator pos:start="7:41" pos:end="7:41">*</operator><operator pos:start="7:42" pos:end="7:42">)</operator> <name pos:start="7:44" pos:end="7:49">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">value</name> <init pos:start="9:20" pos:end="9:28">= <expr pos:start="9:22" pos:end="9:28"><name pos:start="9:22" pos:end="9:28">value64</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ack</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:22"><expr pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:8">addr</name> <operator pos:start="15:10" pos:end="15:11">-=</operator> <name pos:start="15:13" pos:end="15:21"><name pos:start="15:13" pos:end="15:13">s</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:21">offset</name></name></expr>;</expr_stmt>

    <switch pos:start="17:5" pos:end="137:5">switch <condition pos:start="17:12" pos:end="17:17">(<expr pos:start="17:13" pos:end="17:16"><name pos:start="17:13" pos:end="17:16">addr</name></expr>)</condition> <block pos:start="17:19" pos:end="137:5">{<block_content pos:start="19:5" pos:end="135:69">

    <case pos:start="19:5" pos:end="19:13">case <expr pos:start="19:10" pos:end="19:12"><name pos:start="19:10" pos:end="19:12">ICR</name></expr>:</case>

        <expr_stmt pos:start="21:9" pos:end="21:36"><expr pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:18">control</name></name> <operator pos:start="21:20" pos:end="21:20">=</operator> <name pos:start="21:22" pos:end="21:26">value</name> <operator pos:start="21:28" pos:end="21:28">&amp;</operator> <literal type="number" pos:start="21:30" pos:end="21:35">0xfff7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="93:9"><if pos:start="23:9" pos:end="93:9">if <condition pos:start="23:12" pos:end="23:53">(<expr pos:start="23:13" pos:end="23:52"><operator pos:start="23:13" pos:end="23:13">(</operator><name pos:start="23:14" pos:end="23:18">value</name> <operator pos:start="23:20" pos:end="23:20">&amp;</operator> <operator pos:start="23:22" pos:end="23:22">(</operator><literal type="number" pos:start="23:23" pos:end="23:23">1</literal> <operator pos:start="23:25" pos:end="23:26">&lt;&lt;</operator> <literal type="number" pos:start="23:28" pos:end="23:28">3</literal><operator pos:start="23:29" pos:end="23:29">)</operator><operator pos:start="23:30" pos:end="23:30">)</operator> <operator pos:start="23:32" pos:end="23:33">&amp;&amp;</operator> <operator pos:start="23:35" pos:end="23:35">(</operator><name pos:start="23:36" pos:end="23:40">value</name> <operator pos:start="23:42" pos:end="23:42">&amp;</operator> <operator pos:start="23:44" pos:end="23:44">(</operator><literal type="number" pos:start="23:45" pos:end="23:45">1</literal> <operator pos:start="23:47" pos:end="23:48">&lt;&lt;</operator> <literal type="number" pos:start="23:50" pos:end="23:50">6</literal><operator pos:start="23:51" pos:end="23:51">)</operator><operator pos:start="23:52" pos:end="23:52">)</operator></expr>)</condition> <block pos:start="23:55" pos:end="93:9">{<block_content pos:start="27:13" pos:end="91:13">	<comment type="block" pos:start="23:57" pos:end="23:72">/* TB and IUE */</comment>

            <comment type="block" pos:start="25:13" pos:end="25:34">/* TODO: slave mode */</comment>

            <if_stmt pos:start="27:13" pos:end="55:13"><if pos:start="27:13" pos:end="39:13">if <condition pos:start="27:16" pos:end="27:33">(<expr pos:start="27:17" pos:end="27:32"><name pos:start="27:17" pos:end="27:21">value</name> <operator pos:start="27:23" pos:end="27:23">&amp;</operator> <operator pos:start="27:25" pos:end="27:25">(</operator><literal type="number" pos:start="27:26" pos:end="27:26">1</literal> <operator pos:start="27:28" pos:end="27:29">&lt;&lt;</operator> <literal type="number" pos:start="27:31" pos:end="27:31">0</literal><operator pos:start="27:32" pos:end="27:32">)</operator></expr>)</condition> <block pos:start="27:35" pos:end="39:13">{<block_content pos:start="29:17" pos:end="37:77">			<comment type="block" pos:start="27:57" pos:end="27:77">/* START condition */</comment>

                <if_stmt pos:start="29:17" pos:end="35:43"><if pos:start="29:17" pos:end="31:40">if <condition pos:start="29:20" pos:end="29:32">(<expr pos:start="29:21" pos:end="29:31"><name pos:start="29:21" pos:end="29:27"><name pos:start="29:21" pos:end="29:21">s</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:27">data</name></name> <operator pos:start="29:29" pos:end="29:29">&amp;</operator> <literal type="number" pos:start="29:31" pos:end="29:31">1</literal></expr>)</condition><block type="pseudo" pos:start="31:21" pos:end="31:40"><block_content pos:start="31:21" pos:end="31:40">

                    <expr_stmt pos:start="31:21" pos:end="31:40"><expr pos:start="31:21" pos:end="31:39"><name pos:start="31:21" pos:end="31:29"><name pos:start="31:21" pos:end="31:21">s</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:29">status</name></name> <operator pos:start="31:31" pos:end="31:32">|=</operator> <literal type="number" pos:start="31:34" pos:end="31:34">1</literal> <operator pos:start="31:36" pos:end="31:37">&lt;&lt;</operator> <literal type="number" pos:start="31:39" pos:end="31:39">0</literal></expr>;</expr_stmt></block_content></block></if>		<comment type="block" pos:start="31:57" pos:end="31:69">/* set RWM */</comment>

                <else pos:start="33:17" pos:end="35:43">else<block type="pseudo" pos:start="35:21" pos:end="35:43"><block_content pos:start="35:21" pos:end="35:43">

                    <expr_stmt pos:start="35:21" pos:end="35:43"><expr pos:start="35:21" pos:end="35:42"><name pos:start="35:21" pos:end="35:29"><name pos:start="35:21" pos:end="35:21">s</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:29">status</name></name> <operator pos:start="35:31" pos:end="35:32">&amp;=</operator> <operator pos:start="35:34" pos:end="35:34">~</operator><operator pos:start="35:35" pos:end="35:35">(</operator><literal type="number" pos:start="35:36" pos:end="35:36">1</literal> <operator pos:start="35:38" pos:end="35:39">&lt;&lt;</operator> <literal type="number" pos:start="35:41" pos:end="35:41">0</literal><operator pos:start="35:42" pos:end="35:42">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>		<comment type="block" pos:start="35:57" pos:end="35:71">/* clear RWM */</comment>

                <expr_stmt pos:start="37:17" pos:end="37:77"><expr pos:start="37:17" pos:end="37:76"><name pos:start="37:17" pos:end="37:19">ack</name> <operator pos:start="37:21" pos:end="37:21">=</operator> <operator pos:start="37:23" pos:end="37:23">!</operator><call pos:start="37:24" pos:end="37:76"><name pos:start="37:24" pos:end="37:41">i2c_start_transfer</name><argument_list pos:start="37:42" pos:end="37:76">(<argument pos:start="37:43" pos:end="37:48"><expr pos:start="37:43" pos:end="37:48"><name pos:start="37:43" pos:end="37:48"><name pos:start="37:43" pos:end="37:43">s</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:48">bus</name></name></expr></argument>, <argument pos:start="37:51" pos:end="37:62"><expr pos:start="37:51" pos:end="37:62"><name pos:start="37:51" pos:end="37:57"><name pos:start="37:51" pos:end="37:51">s</name><operator pos:start="37:52" pos:end="37:53">-&gt;</operator><name pos:start="37:54" pos:end="37:57">data</name></name> <operator pos:start="37:59" pos:end="37:60">&gt;&gt;</operator> <literal type="number" pos:start="37:62" pos:end="37:62">1</literal></expr></argument>, <argument pos:start="37:65" pos:end="37:75"><expr pos:start="37:65" pos:end="37:75"><name pos:start="37:65" pos:end="37:71"><name pos:start="37:65" pos:end="37:65">s</name><operator pos:start="37:66" pos:end="37:67">-&gt;</operator><name pos:start="37:68" pos:end="37:71">data</name></name> <operator pos:start="37:73" pos:end="37:73">&amp;</operator> <literal type="number" pos:start="37:75" pos:end="37:75">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="39:15" pos:end="55:13">else <block pos:start="39:20" pos:end="55:13">{<block_content pos:start="41:17" pos:end="53:53">

                <if_stmt pos:start="41:17" pos:end="53:53"><if pos:start="41:17" pos:end="51:17">if <condition pos:start="41:20" pos:end="41:41">(<expr pos:start="41:21" pos:end="41:40"><name pos:start="41:21" pos:end="41:29"><name pos:start="41:21" pos:end="41:21">s</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:29">status</name></name> <operator pos:start="41:31" pos:end="41:31">&amp;</operator> <operator pos:start="41:33" pos:end="41:33">(</operator><literal type="number" pos:start="41:34" pos:end="41:34">1</literal> <operator pos:start="41:36" pos:end="41:37">&lt;&lt;</operator> <literal type="number" pos:start="41:39" pos:end="41:39">0</literal><operator pos:start="41:40" pos:end="41:40">)</operator></expr>)</condition> <block pos:start="41:43" pos:end="51:17">{<block_content pos:start="43:21" pos:end="49:28">		<comment type="block" pos:start="41:57" pos:end="41:65">/* RWM */</comment>

                    <expr_stmt pos:start="43:21" pos:end="43:47"><expr pos:start="43:21" pos:end="43:46"><name pos:start="43:21" pos:end="43:27"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:27">data</name></name> <operator pos:start="43:29" pos:end="43:29">=</operator> <call pos:start="43:31" pos:end="43:46"><name pos:start="43:31" pos:end="43:38">i2c_recv</name><argument_list pos:start="43:39" pos:end="43:46">(<argument pos:start="43:40" pos:end="43:45"><expr pos:start="43:40" pos:end="43:45"><name pos:start="43:40" pos:end="43:45"><name pos:start="43:40" pos:end="43:40">s</name><operator pos:start="43:41" pos:end="43:42">-&gt;</operator><name pos:start="43:43" pos:end="43:45">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="45:21" pos:end="47:41"><if pos:start="45:21" pos:end="47:41">if <condition pos:start="45:24" pos:end="45:41">(<expr pos:start="45:25" pos:end="45:40"><name pos:start="45:25" pos:end="45:29">value</name> <operator pos:start="45:31" pos:end="45:31">&amp;</operator> <operator pos:start="45:33" pos:end="45:33">(</operator><literal type="number" pos:start="45:34" pos:end="45:34">1</literal> <operator pos:start="45:36" pos:end="45:37">&lt;&lt;</operator> <literal type="number" pos:start="45:39" pos:end="45:39">2</literal><operator pos:start="45:40" pos:end="45:40">)</operator></expr>)</condition><block type="pseudo" pos:start="47:25" pos:end="47:41"><block_content pos:start="47:25" pos:end="47:41">		<comment type="block" pos:start="45:57" pos:end="45:68">/* ACKNAK */</comment>

                        <expr_stmt pos:start="47:25" pos:end="47:41"><expr pos:start="47:25" pos:end="47:40"><call pos:start="47:25" pos:end="47:40"><name pos:start="47:25" pos:end="47:32">i2c_nack</name><argument_list pos:start="47:33" pos:end="47:40">(<argument pos:start="47:34" pos:end="47:39"><expr pos:start="47:34" pos:end="47:39"><name pos:start="47:34" pos:end="47:39"><name pos:start="47:34" pos:end="47:34">s</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:39">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="49:21" pos:end="49:28"><expr pos:start="49:21" pos:end="49:27"><name pos:start="49:21" pos:end="49:23">ack</name> <operator pos:start="49:25" pos:end="49:25">=</operator> <literal type="number" pos:start="49:27" pos:end="49:27">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="51:19" pos:end="53:53">else<block type="pseudo" pos:start="53:21" pos:end="53:53"><block_content pos:start="53:21" pos:end="53:53">

                    <expr_stmt pos:start="53:21" pos:end="53:53"><expr pos:start="53:21" pos:end="53:52"><name pos:start="53:21" pos:end="53:23">ack</name> <operator pos:start="53:25" pos:end="53:25">=</operator> <operator pos:start="53:27" pos:end="53:27">!</operator><call pos:start="53:28" pos:end="53:52"><name pos:start="53:28" pos:end="53:35">i2c_send</name><argument_list pos:start="53:36" pos:end="53:52">(<argument pos:start="53:37" pos:end="53:42"><expr pos:start="53:37" pos:end="53:42"><name pos:start="53:37" pos:end="53:42"><name pos:start="53:37" pos:end="53:37">s</name><operator pos:start="53:38" pos:end="53:39">-&gt;</operator><name pos:start="53:40" pos:end="53:42">bus</name></name></expr></argument>, <argument pos:start="53:45" pos:end="53:51"><expr pos:start="53:45" pos:end="53:51"><name pos:start="53:45" pos:end="53:51"><name pos:start="53:45" pos:end="53:45">s</name><operator pos:start="53:46" pos:end="53:47">-&gt;</operator><name pos:start="53:48" pos:end="53:51">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="59:13" pos:end="61:41"><if pos:start="59:13" pos:end="61:41">if <condition pos:start="59:16" pos:end="59:33">(<expr pos:start="59:17" pos:end="59:32"><name pos:start="59:17" pos:end="59:21">value</name> <operator pos:start="59:23" pos:end="59:23">&amp;</operator> <operator pos:start="59:25" pos:end="59:25">(</operator><literal type="number" pos:start="59:26" pos:end="59:26">1</literal> <operator pos:start="59:28" pos:end="59:29">&lt;&lt;</operator> <literal type="number" pos:start="59:31" pos:end="59:31">1</literal><operator pos:start="59:32" pos:end="59:32">)</operator></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:41"><block_content pos:start="61:17" pos:end="61:41">			<comment type="block" pos:start="59:57" pos:end="59:76">/* STOP condition */</comment>

                <expr_stmt pos:start="61:17" pos:end="61:41"><expr pos:start="61:17" pos:end="61:40"><call pos:start="61:17" pos:end="61:40"><name pos:start="61:17" pos:end="61:32">i2c_end_transfer</name><argument_list pos:start="61:33" pos:end="61:40">(<argument pos:start="61:34" pos:end="61:39"><expr pos:start="61:34" pos:end="61:39"><name pos:start="61:34" pos:end="61:39"><name pos:start="61:34" pos:end="61:34">s</name><operator pos:start="61:35" pos:end="61:36">-&gt;</operator><name pos:start="61:37" pos:end="61:39">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="65:13" pos:end="91:13"><if pos:start="65:13" pos:end="83:13">if <condition pos:start="65:16" pos:end="65:20">(<expr pos:start="65:17" pos:end="65:19"><name pos:start="65:17" pos:end="65:19">ack</name></expr>)</condition> <block pos:start="65:22" pos:end="83:13">{<block_content pos:start="67:17" pos:end="81:39">

                <if_stmt pos:start="67:17" pos:end="79:44"><if pos:start="67:17" pos:end="69:40">if <condition pos:start="67:20" pos:end="67:37">(<expr pos:start="67:21" pos:end="67:36"><name pos:start="67:21" pos:end="67:25">value</name> <operator pos:start="67:27" pos:end="67:27">&amp;</operator> <operator pos:start="67:29" pos:end="67:29">(</operator><literal type="number" pos:start="67:30" pos:end="67:30">1</literal> <operator pos:start="67:32" pos:end="67:33">&lt;&lt;</operator> <literal type="number" pos:start="67:35" pos:end="67:35">0</literal><operator pos:start="67:36" pos:end="67:36">)</operator></expr>)</condition><block type="pseudo" pos:start="69:21" pos:end="69:40"><block_content pos:start="69:21" pos:end="69:40">			<comment type="block" pos:start="67:57" pos:end="67:77">/* START condition */</comment>

                    <expr_stmt pos:start="69:21" pos:end="69:40"><expr pos:start="69:21" pos:end="69:39"><name pos:start="69:21" pos:end="69:29"><name pos:start="69:21" pos:end="69:21">s</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:29">status</name></name> <operator pos:start="69:31" pos:end="69:32">|=</operator> <literal type="number" pos:start="69:34" pos:end="69:34">1</literal> <operator pos:start="69:36" pos:end="69:37">&lt;&lt;</operator> <literal type="number" pos:start="69:39" pos:end="69:39">6</literal></expr>;</expr_stmt></block_content></block></if>		<comment type="block" pos:start="69:57" pos:end="69:69">/* set ITE */</comment>

                <if type="elseif" pos:start="71:17" pos:end="75:44">else

                    if <condition pos:start="73:24" pos:end="73:45">(<expr pos:start="73:25" pos:end="73:44"><name pos:start="73:25" pos:end="73:33"><name pos:start="73:25" pos:end="73:25">s</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:33">status</name></name> <operator pos:start="73:35" pos:end="73:35">&amp;</operator> <operator pos:start="73:37" pos:end="73:37">(</operator><literal type="number" pos:start="73:38" pos:end="73:38">1</literal> <operator pos:start="73:40" pos:end="73:41">&lt;&lt;</operator> <literal type="number" pos:start="73:43" pos:end="73:43">0</literal><operator pos:start="73:44" pos:end="73:44">)</operator></expr>)</condition><block type="pseudo" pos:start="75:25" pos:end="75:44"><block_content pos:start="75:25" pos:end="75:44">		<comment type="block" pos:start="73:57" pos:end="73:65">/* RWM */</comment>

                        <expr_stmt pos:start="75:25" pos:end="75:44"><expr pos:start="75:25" pos:end="75:43"><name pos:start="75:25" pos:end="75:33"><name pos:start="75:25" pos:end="75:25">s</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:33">status</name></name> <operator pos:start="75:35" pos:end="75:36">|=</operator> <literal type="number" pos:start="75:38" pos:end="75:38">1</literal> <operator pos:start="75:40" pos:end="75:41">&lt;&lt;</operator> <literal type="number" pos:start="75:43" pos:end="75:43">7</literal></expr>;</expr_stmt></block_content></block></if>		<comment type="block" pos:start="75:57" pos:end="75:69">/* set IRF */</comment>

                    <else pos:start="77:21" pos:end="79:44">else<block type="pseudo" pos:start="79:25" pos:end="79:44"><block_content pos:start="79:25" pos:end="79:44">

                        <expr_stmt pos:start="79:25" pos:end="79:44"><expr pos:start="79:25" pos:end="79:43"><name pos:start="79:25" pos:end="79:33"><name pos:start="79:25" pos:end="79:25">s</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:33">status</name></name> <operator pos:start="79:35" pos:end="79:36">|=</operator> <literal type="number" pos:start="79:38" pos:end="79:38">1</literal> <operator pos:start="79:40" pos:end="79:41">&lt;&lt;</operator> <literal type="number" pos:start="79:43" pos:end="79:43">6</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>		<comment type="block" pos:start="79:57" pos:end="79:69">/* set ITE */</comment>

                <expr_stmt pos:start="81:17" pos:end="81:39"><expr pos:start="81:17" pos:end="81:38"><name pos:start="81:17" pos:end="81:25"><name pos:start="81:17" pos:end="81:17">s</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:25">status</name></name> <operator pos:start="81:27" pos:end="81:28">&amp;=</operator> <operator pos:start="81:30" pos:end="81:30">~</operator><operator pos:start="81:31" pos:end="81:31">(</operator><literal type="number" pos:start="81:32" pos:end="81:32">1</literal> <operator pos:start="81:34" pos:end="81:35">&lt;&lt;</operator> <literal type="number" pos:start="81:37" pos:end="81:37">1</literal><operator pos:start="81:38" pos:end="81:38">)</operator></expr>;</expr_stmt>			<comment type="block" pos:start="81:57" pos:end="81:74">/* clear ACKNAK */</comment>

            </block_content>}</block></if> <else pos:start="83:15" pos:end="91:13">else <block pos:start="83:20" pos:end="91:13">{<block_content pos:start="85:17" pos:end="89:36">

                <expr_stmt pos:start="85:17" pos:end="85:36"><expr pos:start="85:17" pos:end="85:35"><name pos:start="85:17" pos:end="85:25"><name pos:start="85:17" pos:end="85:17">s</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:25">status</name></name> <operator pos:start="85:27" pos:end="85:28">|=</operator> <literal type="number" pos:start="85:30" pos:end="85:30">1</literal> <operator pos:start="85:32" pos:end="85:33">&lt;&lt;</operator> <literal type="number" pos:start="85:35" pos:end="85:35">6</literal></expr>;</expr_stmt>			<comment type="block" pos:start="85:57" pos:end="85:69">/* set ITE */</comment>

                <expr_stmt pos:start="87:17" pos:end="87:37"><expr pos:start="87:17" pos:end="87:36"><name pos:start="87:17" pos:end="87:25"><name pos:start="87:17" pos:end="87:17">s</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:25">status</name></name> <operator pos:start="87:27" pos:end="87:28">|=</operator> <literal type="number" pos:start="87:30" pos:end="87:30">1</literal> <operator pos:start="87:32" pos:end="87:33">&lt;&lt;</operator> <literal type="number" pos:start="87:35" pos:end="87:36">10</literal></expr>;</expr_stmt>			<comment type="block" pos:start="87:57" pos:end="87:69">/* set BED */</comment>

                <expr_stmt pos:start="89:17" pos:end="89:36"><expr pos:start="89:17" pos:end="89:35"><name pos:start="89:17" pos:end="89:25"><name pos:start="89:17" pos:end="89:17">s</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:25">status</name></name> <operator pos:start="89:27" pos:end="89:28">|=</operator> <literal type="number" pos:start="89:30" pos:end="89:30">1</literal> <operator pos:start="89:32" pos:end="89:33">&lt;&lt;</operator> <literal type="number" pos:start="89:35" pos:end="89:35">1</literal></expr>;</expr_stmt>			<comment type="block" pos:start="89:57" pos:end="89:72">/* set ACKNAK */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="95:9" pos:end="99:41"><if pos:start="95:9" pos:end="99:41">if <condition pos:start="95:12" pos:end="95:54">(<expr pos:start="95:13" pos:end="95:53"><operator pos:start="95:13" pos:end="95:13">!</operator><operator pos:start="95:14" pos:end="95:14">(</operator><name pos:start="95:15" pos:end="95:19">value</name> <operator pos:start="95:21" pos:end="95:21">&amp;</operator> <operator pos:start="95:23" pos:end="95:23">(</operator><literal type="number" pos:start="95:24" pos:end="95:24">1</literal> <operator pos:start="95:26" pos:end="95:27">&lt;&lt;</operator> <literal type="number" pos:start="95:29" pos:end="95:29">3</literal><operator pos:start="95:30" pos:end="95:30">)</operator><operator pos:start="95:31" pos:end="95:31">)</operator> <operator pos:start="95:33" pos:end="95:34">&amp;&amp;</operator> <operator pos:start="95:36" pos:end="95:36">(</operator><name pos:start="95:37" pos:end="95:41">value</name> <operator pos:start="95:43" pos:end="95:43">&amp;</operator> <operator pos:start="95:45" pos:end="95:45">(</operator><literal type="number" pos:start="95:46" pos:end="95:46">1</literal> <operator pos:start="95:48" pos:end="95:49">&lt;&lt;</operator> <literal type="number" pos:start="95:51" pos:end="95:51">6</literal><operator pos:start="95:52" pos:end="95:52">)</operator><operator pos:start="95:53" pos:end="95:53">)</operator></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="99:41"><block_content pos:start="97:13" pos:end="99:41">	<comment type="block" pos:start="95:57" pos:end="95:73">/* !TB and IUE */</comment>

            <if_stmt pos:start="97:13" pos:end="99:41"><if pos:start="97:13" pos:end="99:41">if <condition pos:start="97:16" pos:end="97:33">(<expr pos:start="97:17" pos:end="97:32"><name pos:start="97:17" pos:end="97:21">value</name> <operator pos:start="97:23" pos:end="97:23">&amp;</operator> <operator pos:start="97:25" pos:end="97:25">(</operator><literal type="number" pos:start="97:26" pos:end="97:26">1</literal> <operator pos:start="97:28" pos:end="97:29">&lt;&lt;</operator> <literal type="number" pos:start="97:31" pos:end="97:31">4</literal><operator pos:start="97:32" pos:end="97:32">)</operator></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:41"><block_content pos:start="99:17" pos:end="99:41">			<comment type="block" pos:start="97:57" pos:end="97:64">/* MA */</comment>

                <expr_stmt pos:start="99:17" pos:end="99:41"><expr pos:start="99:17" pos:end="99:40"><call pos:start="99:17" pos:end="99:40"><name pos:start="99:17" pos:end="99:32">i2c_end_transfer</name><argument_list pos:start="99:33" pos:end="99:40">(<argument pos:start="99:34" pos:end="99:39"><expr pos:start="99:34" pos:end="99:39"><name pos:start="99:34" pos:end="99:39"><name pos:start="99:34" pos:end="99:34">s</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:39">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:29"><expr pos:start="101:9" pos:end="101:28"><call pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:25">pxa2xx_i2c_update</name><argument_list pos:start="101:26" pos:end="101:28">(<argument pos:start="101:27" pos:end="101:27"><expr pos:start="101:27" pos:end="101:27"><name pos:start="101:27" pos:end="101:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>



    <case pos:start="107:5" pos:end="107:13">case <expr pos:start="107:10" pos:end="107:12"><name pos:start="107:10" pos:end="107:12">ISR</name></expr>:</case>

        <expr_stmt pos:start="109:9" pos:end="109:39"><expr pos:start="109:9" pos:end="109:38"><name pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:17">status</name></name> <operator pos:start="109:19" pos:end="109:20">&amp;=</operator> <operator pos:start="109:22" pos:end="109:22">~</operator><operator pos:start="109:23" pos:end="109:23">(</operator><name pos:start="109:24" pos:end="109:28">value</name> <operator pos:start="109:30" pos:end="109:30">&amp;</operator> <literal type="number" pos:start="109:32" pos:end="109:37">0x07f0</literal><operator pos:start="109:38" pos:end="109:38">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:29"><expr pos:start="111:9" pos:end="111:28"><call pos:start="111:9" pos:end="111:28"><name pos:start="111:9" pos:end="111:25">pxa2xx_i2c_update</name><argument_list pos:start="111:26" pos:end="111:28">(<argument pos:start="111:27" pos:end="111:27"><expr pos:start="111:27" pos:end="111:27"><name pos:start="111:27" pos:end="111:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>



    <case pos:start="117:5" pos:end="117:14">case <expr pos:start="117:10" pos:end="117:13"><name pos:start="117:10" pos:end="117:13">ISAR</name></expr>:</case>

        <expr_stmt pos:start="119:9" pos:end="119:65"><expr pos:start="119:9" pos:end="119:64"><call pos:start="119:9" pos:end="119:64"><name pos:start="119:9" pos:end="119:29">i2c_set_slave_address</name><argument_list pos:start="119:30" pos:end="119:64">(<argument pos:start="119:31" pos:end="119:49"><expr pos:start="119:31" pos:end="119:49"><call pos:start="119:31" pos:end="119:49"><name pos:start="119:31" pos:end="119:39">I2C_SLAVE</name><argument_list pos:start="119:40" pos:end="119:49">(<argument pos:start="119:41" pos:end="119:48"><expr pos:start="119:41" pos:end="119:48"><name pos:start="119:41" pos:end="119:48"><name pos:start="119:41" pos:end="119:41">s</name><operator pos:start="119:42" pos:end="119:43">-&gt;</operator><name pos:start="119:44" pos:end="119:48">slave</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="119:52" pos:end="119:63"><expr pos:start="119:52" pos:end="119:63"><name pos:start="119:52" pos:end="119:56">value</name> <operator pos:start="119:58" pos:end="119:58">&amp;</operator> <literal type="number" pos:start="119:60" pos:end="119:63">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="121:9" pos:end="121:14">break;</break>



    <case pos:start="125:5" pos:end="125:14">case <expr pos:start="125:10" pos:end="125:13"><name pos:start="125:10" pos:end="125:13">IDBR</name></expr>:</case>

        <expr_stmt pos:start="127:9" pos:end="127:31"><expr pos:start="127:9" pos:end="127:30"><name pos:start="127:9" pos:end="127:15"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:15">data</name></name> <operator pos:start="127:17" pos:end="127:17">=</operator> <name pos:start="127:19" pos:end="127:23">value</name> <operator pos:start="127:25" pos:end="127:25">&amp;</operator> <literal type="number" pos:start="127:27" pos:end="127:30">0xff</literal></expr>;</expr_stmt>

        <break pos:start="129:9" pos:end="129:14">break;</break>



    <default pos:start="133:5" pos:end="133:12">default:</default>

        <expr_stmt pos:start="135:9" pos:end="135:69"><expr pos:start="135:9" pos:end="135:68"><call pos:start="135:9" pos:end="135:68"><name pos:start="135:9" pos:end="135:14">printf</name><argument_list pos:start="135:15" pos:end="135:68">(<argument pos:start="135:16" pos:end="135:47"><expr pos:start="135:16" pos:end="135:47"><literal type="string" pos:start="135:16" pos:end="135:34">"%s: Bad register "</literal> <name pos:start="135:36" pos:end="135:42">REG_FMT</name> <literal type="string" pos:start="135:44" pos:end="135:47">"\n"</literal></expr></argument>, <argument pos:start="135:50" pos:end="135:61"><expr pos:start="135:50" pos:end="135:61"><name pos:start="135:50" pos:end="135:61">__FUNCTION__</name></expr></argument>, <argument pos:start="135:64" pos:end="135:67"><expr pos:start="135:64" pos:end="135:67"><name pos:start="135:64" pos:end="135:67">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
