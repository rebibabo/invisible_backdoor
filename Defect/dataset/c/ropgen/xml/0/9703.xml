<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9703.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">intel_hda_send_command</name><parameter_list pos:start="1:34" pos:end="1:66">(<parameter pos:start="1:35" pos:end="1:50"><decl pos:start="1:35" pos:end="1:50"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:47">IntelHDAState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">d</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:65"><decl pos:start="1:53" pos:end="1:65"><type pos:start="1:53" pos:end="1:65"><name pos:start="1:53" pos:end="1:60">uint32_t</name></type> <name pos:start="1:62" pos:end="1:65">verb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">cad</name></decl>, <decl pos:start="5:19" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:19" pos:end="5:21">nid</name></decl>, <decl pos:start="5:24" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:12"/><name pos:start="5:24" pos:end="5:27">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">HDACodecDevice</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:25">codec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">HDACodecDeviceClass</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:28">cdc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:30"><expr pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:7">cad</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <operator pos:start="13:11" pos:end="13:11">(</operator><name pos:start="13:12" pos:end="13:15">verb</name> <operator pos:start="13:17" pos:end="13:18">&gt;&gt;</operator> <literal type="number" pos:start="13:20" pos:end="13:21">28</literal><operator pos:start="13:22" pos:end="13:22">)</operator> <operator pos:start="13:24" pos:end="13:24">&amp;</operator> <literal type="number" pos:start="13:26" pos:end="13:29">0x0f</literal></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:25">(<expr pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:12">verb</name> <operator pos:start="15:14" pos:end="15:14">&amp;</operator> <operator pos:start="15:16" pos:end="15:16">(</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal> <operator pos:start="15:19" pos:end="15:20">&lt;&lt;</operator> <literal type="number" pos:start="15:22" pos:end="15:23">27</literal><operator pos:start="15:24" pos:end="15:24">)</operator></expr>)</condition> <block pos:start="15:27" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:18">

        <comment type="block" pos:start="17:9" pos:end="17:64">/* indirect node addressing, not specified in HDA 1.0 */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:82"><expr pos:start="19:9" pos:end="19:81"><call pos:start="19:9" pos:end="19:81"><name pos:start="19:9" pos:end="19:14">dprint</name><argument_list pos:start="19:15" pos:end="19:81">(<argument pos:start="19:16" pos:end="19:16"><expr pos:start="19:16" pos:end="19:16"><name pos:start="19:16" pos:end="19:16">d</name></expr></argument>, <argument pos:start="19:19" pos:end="19:19"><expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">1</literal></expr></argument>, <argument pos:start="19:22" pos:end="19:66"><expr pos:start="19:22" pos:end="19:66"><literal type="string" pos:start="19:22" pos:end="19:66">"%s: indirect node addressing (guest bug?)\n"</literal></expr></argument>, <argument pos:start="19:69" pos:end="19:80"><expr pos:start="19:69" pos:end="19:80"><name pos:start="19:69" pos:end="19:80">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:30"><expr pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:7">nid</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <operator pos:start="25:11" pos:end="25:11">(</operator><name pos:start="25:12" pos:end="25:15">verb</name> <operator pos:start="25:17" pos:end="25:18">&gt;&gt;</operator> <literal type="number" pos:start="25:20" pos:end="25:21">20</literal><operator pos:start="25:22" pos:end="25:22">)</operator> <operator pos:start="25:24" pos:end="25:24">&amp;</operator> <literal type="number" pos:start="25:26" pos:end="25:29">0x7f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:8">data</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <name pos:start="27:12" pos:end="27:15">verb</name> <operator pos:start="27:17" pos:end="27:17">&amp;</operator> <literal type="number" pos:start="27:19" pos:end="27:25">0xfffff</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:44"><expr pos:start="31:5" pos:end="31:43"><name pos:start="31:5" pos:end="31:9">codec</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <call pos:start="31:13" pos:end="31:43"><name pos:start="31:13" pos:end="31:26">hda_codec_find</name><argument_list pos:start="31:27" pos:end="31:43">(<argument pos:start="31:28" pos:end="31:37"><expr pos:start="31:28" pos:end="31:37"><operator pos:start="31:28" pos:end="31:28">&amp;</operator><name pos:start="31:29" pos:end="31:37"><name pos:start="31:29" pos:end="31:29">d</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:37">codecs</name></name></expr></argument>, <argument pos:start="31:40" pos:end="31:42"><expr pos:start="31:40" pos:end="31:42"><name pos:start="31:40" pos:end="31:42">cad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:22">(<expr pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:13">codec</name> <operator pos:start="33:15" pos:end="33:16">==</operator> <name pos:start="33:18" pos:end="33:21">NULL</name></expr>)</condition> <block pos:start="33:24" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:18">

        <expr_stmt pos:start="35:9" pos:end="35:73"><expr pos:start="35:9" pos:end="35:72"><call pos:start="35:9" pos:end="35:72"><name pos:start="35:9" pos:end="35:14">dprint</name><argument_list pos:start="35:15" pos:end="35:72">(<argument pos:start="35:16" pos:end="35:16"><expr pos:start="35:16" pos:end="35:16"><name pos:start="35:16" pos:end="35:16">d</name></expr></argument>, <argument pos:start="35:19" pos:end="35:19"><expr pos:start="35:19" pos:end="35:19"><literal type="number" pos:start="35:19" pos:end="35:19">1</literal></expr></argument>, <argument pos:start="35:22" pos:end="35:57"><expr pos:start="35:22" pos:end="35:57"><literal type="string" pos:start="35:22" pos:end="35:57">"%s: addressed non-existing codec\n"</literal></expr></argument>, <argument pos:start="35:60" pos:end="35:71"><expr pos:start="35:60" pos:end="35:71"><name pos:start="35:60" pos:end="35:71">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:7">cdc</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:43"><name pos:start="41:11" pos:end="41:36">HDA_CODEC_DEVICE_GET_CLASS</name><argument_list pos:start="41:37" pos:end="41:43">(<argument pos:start="41:38" pos:end="41:42"><expr pos:start="41:38" pos:end="41:42"><name pos:start="41:38" pos:end="41:42">codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:35"><expr pos:start="43:5" pos:end="43:34"><call pos:start="43:5" pos:end="43:34"><name pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:7">cdc</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:16">command</name></name><argument_list pos:start="43:17" pos:end="43:34">(<argument pos:start="43:18" pos:end="43:22"><expr pos:start="43:18" pos:end="43:22"><name pos:start="43:18" pos:end="43:22">codec</name></expr></argument>, <argument pos:start="43:25" pos:end="43:27"><expr pos:start="43:25" pos:end="43:27"><name pos:start="43:25" pos:end="43:27">nid</name></expr></argument>, <argument pos:start="43:30" pos:end="43:33"><expr pos:start="43:30" pos:end="43:33"><name pos:start="43:30" pos:end="43:33">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="45:5" pos:end="45:13">return <expr pos:start="45:12" pos:end="45:12"><literal type="number" pos:start="45:12" pos:end="45:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
