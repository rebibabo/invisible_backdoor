<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14505.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:26">ppc_tb_set_jmp_target</name><parameter_list pos:start="1:27" pos:end="1:62">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:36">uintptr_t</name></type> <name pos:start="1:38" pos:end="1:45">jmp_addr</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:56">uintptr_t</name></type> <name pos:start="1:58" pos:end="1:61">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:47">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17">tcg_insn_unit</name></type> <name pos:start="5:19" pos:end="5:20">i1</name></decl>, <decl pos:start="5:23" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:17"/><name pos:start="5:23" pos:end="5:24">i2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:17">pair</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">intptr_t</name></type> <name pos:start="9:14" pos:end="9:17">diff</name> <init pos:start="9:19" pos:end="9:35">= <expr pos:start="9:21" pos:end="9:35"><name pos:start="9:21" pos:end="9:24">addr</name> <operator pos:start="9:26" pos:end="9:26">-</operator> <name pos:start="9:28" pos:end="9:35">jmp_addr</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="46:0"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:25">(<expr pos:start="13:9" pos:end="13:24"><call pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:18">in_range_b</name><argument_list pos:start="13:19" pos:end="13:24">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">diff</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:27" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:17">

        <expr_stmt pos:start="15:9" pos:end="15:36"><expr pos:start="15:9" pos:end="15:35"><name pos:start="15:9" pos:end="15:10">i1</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <name pos:start="15:14" pos:end="15:14">B</name> <operator pos:start="15:16" pos:end="15:16">|</operator> <operator pos:start="15:18" pos:end="15:18">(</operator><name pos:start="15:19" pos:end="15:22">diff</name> <operator pos:start="15:24" pos:end="15:24">&amp;</operator> <literal type="number" pos:start="15:26" pos:end="15:34">0x3fffffc</literal><operator pos:start="15:35" pos:end="15:35">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:17"><expr pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:10">i2</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:16">NOP</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="19:7" pos:end="35:5">else if <condition pos:start="19:15" pos:end="19:26">(<expr pos:start="19:16" pos:end="19:25"><name pos:start="19:16" pos:end="19:25">USE_REG_RA</name></expr>)</condition> <block pos:start="19:28" pos:end="35:5">{<block_content pos:start="21:9" pos:end="33:56">

        <decl_stmt pos:start="21:9" pos:end="21:24"><decl pos:start="21:9" pos:end="21:19"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">intptr_t</name></type> <name pos:start="21:18" pos:end="21:19">lo</name></decl>, <decl pos:start="21:22" pos:end="21:23"><type ref="prev" pos:start="21:9" pos:end="21:16"/><name pos:start="21:22" pos:end="21:23">hi</name></decl>;</decl_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:45"><expr pos:start="23:9" pos:end="23:44"><name pos:start="23:9" pos:end="23:12">diff</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:19">addr</name> <operator pos:start="23:21" pos:end="23:21">-</operator> <operator pos:start="23:23" pos:end="23:23">(</operator><name pos:start="23:24" pos:end="23:32">uintptr_t</name><operator pos:start="23:33" pos:end="23:33">)</operator><name pos:start="23:34" pos:end="23:44">tb_ret_addr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:10">lo</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <operator pos:start="25:14" pos:end="25:14">(</operator><name pos:start="25:15" pos:end="25:21">int16_t</name><operator pos:start="25:22" pos:end="25:22">)</operator><name pos:start="25:23" pos:end="25:26">diff</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:34"><expr pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:10">hi</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <operator pos:start="27:14" pos:end="27:14">(</operator><name pos:start="27:15" pos:end="27:21">int32_t</name><operator pos:start="27:22" pos:end="27:22">)</operator><operator pos:start="27:23" pos:end="27:23">(</operator><name pos:start="27:24" pos:end="27:27">diff</name> <operator pos:start="27:29" pos:end="27:29">-</operator> <name pos:start="27:31" pos:end="27:32">lo</name><operator pos:start="27:33" pos:end="27:33">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:32"><expr pos:start="29:9" pos:end="29:31"><call pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:14">assert</name><argument_list pos:start="29:15" pos:end="29:31">(<argument pos:start="29:16" pos:end="29:30"><expr pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:19">diff</name> <operator pos:start="29:21" pos:end="29:22">==</operator> <name pos:start="29:24" pos:end="29:25">hi</name> <operator pos:start="29:27" pos:end="29:27">+</operator> <name pos:start="29:29" pos:end="29:30">lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:61"><expr pos:start="31:9" pos:end="31:60"><name pos:start="31:9" pos:end="31:10">i1</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:18">ADDIS</name> <operator pos:start="31:20" pos:end="31:20">|</operator> <call pos:start="31:22" pos:end="31:60"><name pos:start="31:22" pos:end="31:24">TAI</name><argument_list pos:start="31:25" pos:end="31:60">(<argument pos:start="31:26" pos:end="31:37"><expr pos:start="31:26" pos:end="31:37"><name pos:start="31:26" pos:end="31:37">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="31:40" pos:end="31:49"><expr pos:start="31:40" pos:end="31:49"><name pos:start="31:40" pos:end="31:49">TCG_REG_RA</name></expr></argument>, <argument pos:start="31:52" pos:end="31:59"><expr pos:start="31:52" pos:end="31:59"><name pos:start="31:52" pos:end="31:53">hi</name> <operator pos:start="31:55" pos:end="31:56">&gt;&gt;</operator> <literal type="number" pos:start="31:58" pos:end="31:59">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:56"><expr pos:start="33:9" pos:end="33:55"><name pos:start="33:9" pos:end="33:10">i2</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <name pos:start="33:14" pos:end="33:17">ADDI</name> <operator pos:start="33:19" pos:end="33:19">|</operator> <call pos:start="33:21" pos:end="33:55"><name pos:start="33:21" pos:end="33:23">TAI</name><argument_list pos:start="33:24" pos:end="33:55">(<argument pos:start="33:25" pos:end="33:36"><expr pos:start="33:25" pos:end="33:36"><name pos:start="33:25" pos:end="33:36">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="33:39" pos:end="33:50"><expr pos:start="33:39" pos:end="33:50"><name pos:start="33:39" pos:end="33:50">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="33:53" pos:end="33:54"><expr pos:start="33:53" pos:end="33:54"><name pos:start="33:53" pos:end="33:54">lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="46:0">else <block pos:start="35:12" pos:end="46:0">{<block_content pos:start="37:9" pos:end="41:57">

        <expr_stmt pos:start="37:9" pos:end="37:67"><expr pos:start="37:9" pos:end="37:66"><call pos:start="37:9" pos:end="37:66"><name pos:start="37:9" pos:end="37:14">assert</name><argument_list pos:start="37:15" pos:end="37:66">(<argument pos:start="37:16" pos:end="37:65"><expr pos:start="37:16" pos:end="37:65"><name pos:start="37:16" pos:end="37:34">TCG_TARGET_REG_BITS</name> <operator pos:start="37:36" pos:end="37:37">==</operator> <literal type="number" pos:start="37:39" pos:end="37:40">32</literal> <operator pos:start="37:42" pos:end="37:43">||</operator> <name pos:start="37:45" pos:end="37:48">addr</name> <operator pos:start="37:50" pos:end="37:51">==</operator> <operator pos:start="37:53" pos:end="37:53">(</operator><name pos:start="37:54" pos:end="37:60">int32_t</name><operator pos:start="37:61" pos:end="37:61">)</operator><name pos:start="37:62" pos:end="37:65">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:54"><expr pos:start="39:9" pos:end="39:53"><name pos:start="39:9" pos:end="39:10">i1</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:18">ADDIS</name> <operator pos:start="39:20" pos:end="39:20">|</operator> <call pos:start="39:22" pos:end="39:53"><name pos:start="39:22" pos:end="39:24">TAI</name><argument_list pos:start="39:25" pos:end="39:53">(<argument pos:start="39:26" pos:end="39:37"><expr pos:start="39:26" pos:end="39:37"><name pos:start="39:26" pos:end="39:37">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="39:40" pos:end="39:40"><expr pos:start="39:40" pos:end="39:40"><literal type="number" pos:start="39:40" pos:end="39:40">0</literal></expr></argument>, <argument pos:start="39:43" pos:end="39:52"><expr pos:start="39:43" pos:end="39:52"><name pos:start="39:43" pos:end="39:46">addr</name> <operator pos:start="39:48" pos:end="39:49">&gt;&gt;</operator> <literal type="number" pos:start="39:51" pos:end="39:52">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:57"><expr pos:start="41:9" pos:end="41:56"><name pos:start="41:9" pos:end="41:10">i2</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <name pos:start="41:14" pos:end="41:16">ORI</name> <operator pos:start="41:18" pos:end="41:18">|</operator> <call pos:start="41:20" pos:end="41:56"><name pos:start="41:20" pos:end="41:22">SAI</name><argument_list pos:start="41:23" pos:end="41:56">(<argument pos:start="41:24" pos:end="41:35"><expr pos:start="41:24" pos:end="41:35"><name pos:start="41:24" pos:end="41:35">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="41:38" pos:end="41:49"><expr pos:start="41:38" pos:end="41:49"><name pos:start="41:38" pos:end="41:49">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="41:52" pos:end="41:55"><expr pos:start="41:52" pos:end="41:55"><name pos:start="41:52" pos:end="41:55">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="45:1" pos:end="45:27">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:27">HOST_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:34"><name pos:start="47:5" pos:end="47:8">pair</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <operator pos:start="47:12" pos:end="47:12">(</operator><name pos:start="47:13" pos:end="47:20">uint64_t</name><operator pos:start="47:21" pos:end="47:21">)</operator><name pos:start="47:22" pos:end="47:23">i1</name> <operator pos:start="47:25" pos:end="47:26">&lt;&lt;</operator> <literal type="number" pos:start="47:28" pos:end="47:29">32</literal> <operator pos:start="47:31" pos:end="47:31">|</operator> <name pos:start="47:33" pos:end="47:34">i2</name></expr>;</expr_stmt>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:34"><name pos:start="51:5" pos:end="51:8">pair</name> <operator pos:start="51:10" pos:end="51:10">=</operator> <operator pos:start="51:12" pos:end="51:12">(</operator><name pos:start="51:13" pos:end="51:20">uint64_t</name><operator pos:start="51:21" pos:end="51:21">)</operator><name pos:start="51:22" pos:end="51:23">i2</name> <operator pos:start="51:25" pos:end="51:26">&lt;&lt;</operator> <literal type="number" pos:start="51:28" pos:end="51:29">32</literal> <operator pos:start="51:31" pos:end="51:31">|</operator> <name pos:start="51:33" pos:end="51:34">i1</name></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="57:5" pos:end="59:64">/* ??? __atomic_store_8, presuming there's some way to do that

       for 32-bit, otherwise this is good enough for 64-bit.  */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:33"><expr pos:start="61:5" pos:end="61:32"><operator pos:start="61:5" pos:end="61:5">*</operator><operator pos:start="61:6" pos:end="61:6">(</operator><name pos:start="61:7" pos:end="61:14">uint64_t</name> <operator pos:start="61:16" pos:end="61:16">*</operator><operator pos:start="61:17" pos:end="61:17">)</operator><name pos:start="61:18" pos:end="61:25">jmp_addr</name> <operator pos:start="61:27" pos:end="61:27">=</operator> <name pos:start="61:29" pos:end="61:32">pair</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:47"><expr pos:start="63:5" pos:end="63:46"><call pos:start="63:5" pos:end="63:46"><name pos:start="63:5" pos:end="63:22">flush_icache_range</name><argument_list pos:start="63:23" pos:end="63:46">(<argument pos:start="63:24" pos:end="63:31"><expr pos:start="63:24" pos:end="63:31"><name pos:start="63:24" pos:end="63:31">jmp_addr</name></expr></argument>, <argument pos:start="63:34" pos:end="63:45"><expr pos:start="63:34" pos:end="63:45"><name pos:start="63:34" pos:end="63:41">jmp_addr</name> <operator pos:start="63:43" pos:end="63:43">+</operator> <literal type="number" pos:start="63:45" pos:end="63:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
