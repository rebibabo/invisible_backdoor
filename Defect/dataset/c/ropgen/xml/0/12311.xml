<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12311.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">cpu_check_irqs</name><parameter_list pos:start="1:20" pos:end="1:39">(<parameter pos:start="1:21" pos:end="1:38"><decl pos:start="1:21" pos:end="1:38"><type pos:start="1:21" pos:end="1:35"><name pos:start="1:21" pos:end="1:33">CPUSPARCState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:5">

    <decl_stmt pos:start="5:5" pos:end="7:69"><decl pos:start="5:5" pos:end="7:68"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:16">pil</name> <init pos:start="5:18" pos:end="7:68">= <expr pos:start="5:20" pos:end="7:68"><name pos:start="5:20" pos:end="5:30"><name pos:start="5:20" pos:end="5:22">env</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:30">pil_in</name></name> <operator pos:start="5:32" pos:end="5:32">|</operator>

                  <operator pos:start="7:19" pos:end="7:19">(</operator><name pos:start="7:20" pos:end="7:31"><name pos:start="7:20" pos:end="7:22">env</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:31">softint</name></name> <operator pos:start="7:33" pos:end="7:33">&amp;</operator> <operator pos:start="7:35" pos:end="7:35">~</operator><operator pos:start="7:36" pos:end="7:36">(</operator><name pos:start="7:37" pos:end="7:49">SOFTINT_TIMER</name> <operator pos:start="7:51" pos:end="7:51">|</operator> <name pos:start="7:53" pos:end="7:66">SOFTINT_STIMER</name><operator pos:start="7:67" pos:end="7:67">)</operator><operator pos:start="7:68" pos:end="7:68">)</operator></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="13:48">/* check if TM or SM in SOFTINT are set

       setting these also causes interrupt 14 */</comment>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:56">(<expr pos:start="15:9" pos:end="15:55"><name pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:11">env</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:20">softint</name></name> <operator pos:start="15:22" pos:end="15:22">&amp;</operator> <operator pos:start="15:24" pos:end="15:24">(</operator><name pos:start="15:25" pos:end="15:37">SOFTINT_TIMER</name> <operator pos:start="15:39" pos:end="15:39">|</operator> <name pos:start="15:41" pos:end="15:54">SOFTINT_STIMER</name><operator pos:start="15:55" pos:end="15:55">)</operator></expr>)</condition> <block pos:start="15:58" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:23">

        <expr_stmt pos:start="17:9" pos:end="17:23"><expr pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:11">pil</name> <operator pos:start="17:13" pos:end="17:14">|=</operator> <literal type="number" pos:start="17:16" pos:end="17:16">1</literal> <operator pos:start="17:18" pos:end="17:19">&lt;&lt;</operator> <literal type="number" pos:start="17:21" pos:end="17:22">14</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="25:27">/* The bit corresponding to psrpil is (1&lt;&lt; psrpil), the next bit

       is (2 &lt;&lt; psrpil). */</comment>

    <if_stmt pos:start="27:5" pos:end="43:5"><if pos:start="27:5" pos:end="43:5">if <condition pos:start="27:8" pos:end="27:33">(<expr pos:start="27:9" pos:end="27:32"><name pos:start="27:9" pos:end="27:11">pil</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <operator pos:start="27:15" pos:end="27:15">(</operator><literal type="number" pos:start="27:16" pos:end="27:16">2</literal> <operator pos:start="27:18" pos:end="27:19">&lt;&lt;</operator> <name pos:start="27:21" pos:end="27:31"><name pos:start="27:21" pos:end="27:23">env</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:31">psrpil</name></name><operator pos:start="27:32" pos:end="27:32">)</operator></expr>)</condition><block pos:start="27:34" pos:end="43:5">{<block_content pos:start="29:9" pos:end="41:15">

        <if_stmt pos:start="29:9" pos:end="39:9"><if pos:start="29:9" pos:end="39:9">if <condition pos:start="29:12" pos:end="29:56">(<expr pos:start="29:13" pos:end="29:55"><name pos:start="29:13" pos:end="29:34"><name pos:start="29:13" pos:end="29:15">env</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:34">interrupt_request</name></name> <operator pos:start="29:36" pos:end="29:36">&amp;</operator> <name pos:start="29:38" pos:end="29:55">CPU_INTERRUPT_HARD</name></expr>)</condition> <block pos:start="29:58" pos:end="39:9">{<block_content pos:start="31:13" pos:end="37:57">

            <expr_stmt pos:start="31:13" pos:end="33:49"><expr pos:start="31:13" pos:end="33:48"><call pos:start="31:13" pos:end="33:48"><name pos:start="31:13" pos:end="31:26">CPUIRQ_DPRINTF</name><argument_list pos:start="31:27" pos:end="33:48">(<argument pos:start="31:28" pos:end="31:67"><expr pos:start="31:28" pos:end="31:67"><literal type="string" pos:start="31:28" pos:end="31:67">"Reset CPU IRQ (current interrupt %x)\n"</literal></expr></argument>,

                           <argument pos:start="33:28" pos:end="33:47"><expr pos:start="33:28" pos:end="33:47"><name pos:start="33:28" pos:end="33:47"><name pos:start="33:28" pos:end="33:30">env</name><operator pos:start="33:31" pos:end="33:32">-&gt;</operator><name pos:start="33:33" pos:end="33:47">interrupt_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:37"><expr pos:start="35:13" pos:end="35:36"><name pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:15">env</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:32">interrupt_index</name></name> <operator pos:start="35:34" pos:end="35:34">=</operator> <literal type="number" pos:start="35:36" pos:end="35:36">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:57"><expr pos:start="37:13" pos:end="37:56"><call pos:start="37:13" pos:end="37:56"><name pos:start="37:13" pos:end="37:31">cpu_reset_interrupt</name><argument_list pos:start="37:32" pos:end="37:56">(<argument pos:start="37:33" pos:end="37:35"><expr pos:start="37:33" pos:end="37:35"><name pos:start="37:33" pos:end="37:35">env</name></expr></argument>, <argument pos:start="37:38" pos:end="37:55"><expr pos:start="37:38" pos:end="37:55"><name pos:start="37:38" pos:end="37:55">CPU_INTERRUPT_HARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="103:5"><if pos:start="47:5" pos:end="91:5">if <condition pos:start="47:8" pos:end="47:36">(<expr pos:start="47:9" pos:end="47:35"><call pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:30">cpu_interrupts_enabled</name><argument_list pos:start="47:31" pos:end="47:35">(<argument pos:start="47:32" pos:end="47:34"><expr pos:start="47:32" pos:end="47:34"><name pos:start="47:32" pos:end="47:34">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:38" pos:end="91:5">{<block_content pos:start="51:9" pos:end="89:9">



        <decl_stmt pos:start="51:9" pos:end="51:23"><decl pos:start="51:9" pos:end="51:22"><type pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:16">unsigned</name> <name pos:start="51:18" pos:end="51:20">int</name></type> <name pos:start="51:22" pos:end="51:22">i</name></decl>;</decl_stmt>



        <for pos:start="55:9" pos:end="89:9">for <control pos:start="55:13" pos:end="55:42">(<init pos:start="55:14" pos:end="55:20"><expr pos:start="55:14" pos:end="55:19"><name pos:start="55:14" pos:end="55:14">i</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <literal type="number" pos:start="55:18" pos:end="55:19">15</literal></expr>;</init> <condition pos:start="55:22" pos:end="55:37"><expr pos:start="55:22" pos:end="55:36"><name pos:start="55:22" pos:end="55:22">i</name> <operator pos:start="55:24" pos:end="55:24">&gt;</operator> <name pos:start="55:26" pos:end="55:36"><name pos:start="55:26" pos:end="55:28">env</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:36">psrpil</name></name></expr>;</condition> <incr pos:start="55:39" pos:end="55:41"><expr pos:start="55:39" pos:end="55:41"><name pos:start="55:39" pos:end="55:39">i</name><operator pos:start="55:40" pos:end="55:41">--</operator></expr></incr>)</control> <block pos:start="55:44" pos:end="89:9">{<block_content pos:start="57:13" pos:end="87:13">

            <if_stmt pos:start="57:13" pos:end="87:13"><if pos:start="57:13" pos:end="87:13">if <condition pos:start="57:16" pos:end="57:31">(<expr pos:start="57:17" pos:end="57:30"><name pos:start="57:17" pos:end="57:19">pil</name> <operator pos:start="57:21" pos:end="57:21">&amp;</operator> <operator pos:start="57:23" pos:end="57:23">(</operator><literal type="number" pos:start="57:24" pos:end="57:24">1</literal> <operator pos:start="57:26" pos:end="57:27">&lt;&lt;</operator> <name pos:start="57:29" pos:end="57:29">i</name><operator pos:start="57:30" pos:end="57:30">)</operator></expr>)</condition> <block pos:start="57:33" pos:end="87:13">{<block_content pos:start="59:17" pos:end="85:22">

                <decl_stmt pos:start="59:17" pos:end="59:57"><decl pos:start="59:17" pos:end="59:56"><type pos:start="59:17" pos:end="59:19"><name pos:start="59:17" pos:end="59:19">int</name></type> <name pos:start="59:21" pos:end="59:33">old_interrupt</name> <init pos:start="59:35" pos:end="59:56">= <expr pos:start="59:37" pos:end="59:56"><name pos:start="59:37" pos:end="59:56"><name pos:start="59:37" pos:end="59:39">env</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:56">interrupt_index</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="61:17" pos:end="61:50"><decl pos:start="61:17" pos:end="61:49"><type pos:start="61:17" pos:end="61:19"><name pos:start="61:17" pos:end="61:19">int</name></type> <name pos:start="61:21" pos:end="61:33">new_interrupt</name> <init pos:start="61:35" pos:end="61:49">= <expr pos:start="61:37" pos:end="61:49"><name pos:start="61:37" pos:end="61:45">TT_EXTINT</name> <operator pos:start="61:47" pos:end="61:47">|</operator> <name pos:start="61:49" pos:end="61:49">i</name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="65:17" pos:end="83:17"><if pos:start="65:17" pos:end="73:17">if <condition pos:start="65:20" pos:end="65:70">(<expr pos:start="65:21" pos:end="65:69"><name pos:start="65:21" pos:end="65:27"><name pos:start="65:21" pos:end="65:23">env</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:27">tl</name></name> <operator pos:start="65:29" pos:end="65:29">&gt;</operator> <literal type="number" pos:start="65:31" pos:end="65:31">0</literal> <operator pos:start="65:33" pos:end="65:34">&amp;&amp;</operator> <call pos:start="65:36" pos:end="65:49"><name pos:start="65:36" pos:end="65:44">cpu_tsptr</name><argument_list pos:start="65:45" pos:end="65:49">(<argument pos:start="65:46" pos:end="65:48"><expr pos:start="65:46" pos:end="65:48"><name pos:start="65:46" pos:end="65:48">env</name></expr></argument>)</argument_list></call><operator pos:start="65:50" pos:end="65:51">-&gt;</operator><name pos:start="65:52" pos:end="65:53">tt</name> <operator pos:start="65:55" pos:end="65:55">&gt;</operator> <name pos:start="65:57" pos:end="65:69">new_interrupt</name></expr>)</condition> <block pos:start="65:72" pos:end="73:17">{<block_content pos:start="67:21" pos:end="71:79">

                    <expr_stmt pos:start="67:21" pos:end="71:79"><expr pos:start="67:21" pos:end="71:78"><call pos:start="67:21" pos:end="71:78"><name pos:start="67:21" pos:end="67:34">CPUIRQ_DPRINTF</name><argument_list pos:start="67:35" pos:end="71:78">(<argument pos:start="67:36" pos:end="69:63"><expr pos:start="67:36" pos:end="69:63"><literal type="string" pos:start="67:36" pos:end="67:64">"Not setting CPU IRQ: TL=%d "</literal>

                                   <literal type="string" pos:start="69:36" pos:end="69:63">"current %x &gt;= pending %x\n"</literal></expr></argument>,

                                   <argument pos:start="71:36" pos:end="71:42"><expr pos:start="71:36" pos:end="71:42"><name pos:start="71:36" pos:end="71:42"><name pos:start="71:36" pos:end="71:38">env</name><operator pos:start="71:39" pos:end="71:40">-&gt;</operator><name pos:start="71:41" pos:end="71:42">tl</name></name></expr></argument>, <argument pos:start="71:45" pos:end="71:62"><expr pos:start="71:45" pos:end="71:62"><call pos:start="71:45" pos:end="71:58"><name pos:start="71:45" pos:end="71:53">cpu_tsptr</name><argument_list pos:start="71:54" pos:end="71:58">(<argument pos:start="71:55" pos:end="71:57"><expr pos:start="71:55" pos:end="71:57"><name pos:start="71:55" pos:end="71:57">env</name></expr></argument>)</argument_list></call><operator pos:start="71:59" pos:end="71:60">-&gt;</operator><name pos:start="71:61" pos:end="71:62">tt</name></expr></argument>, <argument pos:start="71:65" pos:end="71:77"><expr pos:start="71:65" pos:end="71:77"><name pos:start="71:65" pos:end="71:77">new_interrupt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="73:19" pos:end="83:17">else if <condition pos:start="73:27" pos:end="73:58">(<expr pos:start="73:28" pos:end="73:57"><name pos:start="73:28" pos:end="73:40">old_interrupt</name> <operator pos:start="73:42" pos:end="73:43">!=</operator> <name pos:start="73:45" pos:end="73:57">new_interrupt</name></expr>)</condition> <block pos:start="73:60" pos:end="83:17">{<block_content pos:start="75:21" pos:end="81:59">

                    <expr_stmt pos:start="75:21" pos:end="75:57"><expr pos:start="75:21" pos:end="75:56"><name pos:start="75:21" pos:end="75:40"><name pos:start="75:21" pos:end="75:23">env</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:40">interrupt_index</name></name> <operator pos:start="75:42" pos:end="75:42">=</operator> <name pos:start="75:44" pos:end="75:56">new_interrupt</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="77:21" pos:end="79:65"><expr pos:start="77:21" pos:end="79:64"><call pos:start="77:21" pos:end="79:64"><name pos:start="77:21" pos:end="77:34">CPUIRQ_DPRINTF</name><argument_list pos:start="77:35" pos:end="79:64">(<argument pos:start="77:36" pos:end="77:67"><expr pos:start="77:36" pos:end="77:67"><literal type="string" pos:start="77:36" pos:end="77:67">"Set CPU IRQ %d old=%x new=%x\n"</literal></expr></argument>, <argument pos:start="77:70" pos:end="77:70"><expr pos:start="77:70" pos:end="77:70"><name pos:start="77:70" pos:end="77:70">i</name></expr></argument>,

                                   <argument pos:start="79:36" pos:end="79:48"><expr pos:start="79:36" pos:end="79:48"><name pos:start="79:36" pos:end="79:48">old_interrupt</name></expr></argument>, <argument pos:start="79:51" pos:end="79:63"><expr pos:start="79:51" pos:end="79:63"><name pos:start="79:51" pos:end="79:63">new_interrupt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="81:21" pos:end="81:59"><expr pos:start="81:21" pos:end="81:58"><call pos:start="81:21" pos:end="81:58"><name pos:start="81:21" pos:end="81:33">cpu_interrupt</name><argument_list pos:start="81:34" pos:end="81:58">(<argument pos:start="81:35" pos:end="81:37"><expr pos:start="81:35" pos:end="81:37"><name pos:start="81:35" pos:end="81:37">env</name></expr></argument>, <argument pos:start="81:40" pos:end="81:57"><expr pos:start="81:40" pos:end="81:57"><name pos:start="81:40" pos:end="81:57">CPU_INTERRUPT_HARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="85:17" pos:end="85:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="91:7" pos:end="103:5">else if <condition pos:start="91:15" pos:end="91:59">(<expr pos:start="91:16" pos:end="91:58"><name pos:start="91:16" pos:end="91:37"><name pos:start="91:16" pos:end="91:18">env</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:37">interrupt_request</name></name> <operator pos:start="91:39" pos:end="91:39">&amp;</operator> <name pos:start="91:41" pos:end="91:58">CPU_INTERRUPT_HARD</name></expr>)</condition> <block pos:start="91:61" pos:end="103:5">{<block_content pos:start="93:9" pos:end="101:53">

        <expr_stmt pos:start="93:9" pos:end="97:77"><expr pos:start="93:9" pos:end="97:76"><call pos:start="93:9" pos:end="97:76"><name pos:start="93:9" pos:end="93:22">CPUIRQ_DPRINTF</name><argument_list pos:start="93:23" pos:end="97:76">(<argument pos:start="93:24" pos:end="95:47"><expr pos:start="93:24" pos:end="95:47"><literal type="string" pos:start="93:24" pos:end="93:80">"Interrupts disabled, pil=%08x pil_in=%08x softint=%08x "</literal>

                       <literal type="string" pos:start="95:24" pos:end="95:47">"current interrupt %x\n"</literal></expr></argument>,

                       <argument pos:start="97:24" pos:end="97:26"><expr pos:start="97:24" pos:end="97:26"><name pos:start="97:24" pos:end="97:26">pil</name></expr></argument>, <argument pos:start="97:29" pos:end="97:39"><expr pos:start="97:29" pos:end="97:39"><name pos:start="97:29" pos:end="97:39"><name pos:start="97:29" pos:end="97:31">env</name><operator pos:start="97:32" pos:end="97:33">-&gt;</operator><name pos:start="97:34" pos:end="97:39">pil_in</name></name></expr></argument>, <argument pos:start="97:42" pos:end="97:53"><expr pos:start="97:42" pos:end="97:53"><name pos:start="97:42" pos:end="97:53"><name pos:start="97:42" pos:end="97:44">env</name><operator pos:start="97:45" pos:end="97:46">-&gt;</operator><name pos:start="97:47" pos:end="97:53">softint</name></name></expr></argument>, <argument pos:start="97:56" pos:end="97:75"><expr pos:start="97:56" pos:end="97:75"><name pos:start="97:56" pos:end="97:75"><name pos:start="97:56" pos:end="97:58">env</name><operator pos:start="97:59" pos:end="97:60">-&gt;</operator><name pos:start="97:61" pos:end="97:75">interrupt_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:33"><expr pos:start="99:9" pos:end="99:32"><name pos:start="99:9" pos:end="99:28"><name pos:start="99:9" pos:end="99:11">env</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:28">interrupt_index</name></name> <operator pos:start="99:30" pos:end="99:30">=</operator> <literal type="number" pos:start="99:32" pos:end="99:32">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:53"><expr pos:start="101:9" pos:end="101:52"><call pos:start="101:9" pos:end="101:52"><name pos:start="101:9" pos:end="101:27">cpu_reset_interrupt</name><argument_list pos:start="101:28" pos:end="101:52">(<argument pos:start="101:29" pos:end="101:31"><expr pos:start="101:29" pos:end="101:31"><name pos:start="101:29" pos:end="101:31">env</name></expr></argument>, <argument pos:start="101:34" pos:end="101:51"><expr pos:start="101:34" pos:end="101:51"><name pos:start="101:34" pos:end="101:51">CPU_INTERRUPT_HARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
