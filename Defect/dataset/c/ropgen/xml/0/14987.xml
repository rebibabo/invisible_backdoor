<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14987.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">test_visitor_in_alternate</name><parameter_list pos:start="1:38" pos:end="3:57">(<parameter pos:start="1:39" pos:end="1:64"><decl pos:start="1:39" pos:end="1:64"><type pos:start="1:39" pos:end="1:64"><name pos:start="1:39" pos:end="1:58">TestInputVisitorData</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">data</name></decl></parameter>,

                                      <parameter pos:start="3:39" pos:end="3:56"><decl pos:start="3:39" pos:end="3:56"><type pos:start="3:39" pos:end="3:56"><specifier pos:start="3:39" pos:end="3:43">const</specifier> <name pos:start="3:45" pos:end="3:48">void</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:56">unused</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="117:1">{<block_content pos:start="7:5" pos:end="115:34">

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">Visitor</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:14">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">UserDefAlternate</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:25">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">WrapAlternate</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:23">wrap</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:44"><expr pos:start="17:5" pos:end="17:43"><name pos:start="17:5" pos:end="17:5">v</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <call pos:start="17:9" pos:end="17:43"><name pos:start="17:9" pos:end="17:31">visitor_input_test_init</name><argument_list pos:start="17:32" pos:end="17:43">(<argument pos:start="17:33" pos:end="17:36"><expr pos:start="17:33" pos:end="17:36"><name pos:start="17:33" pos:end="17:36">data</name></expr></argument>, <argument pos:start="17:39" pos:end="17:42"><expr pos:start="17:39" pos:end="17:42"><literal type="string" pos:start="17:39" pos:end="17:42">"42"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:61"><expr pos:start="19:5" pos:end="19:60"><call pos:start="19:5" pos:end="19:60"><name pos:start="19:5" pos:end="19:31">visit_type_UserDefAlternate</name><argument_list pos:start="19:32" pos:end="19:60">(<argument pos:start="19:33" pos:end="19:33"><expr pos:start="19:33" pos:end="19:33"><name pos:start="19:33" pos:end="19:33">v</name></expr></argument>, <argument pos:start="19:36" pos:end="19:39"><expr pos:start="19:36" pos:end="19:39"><name pos:start="19:36" pos:end="19:39">NULL</name></expr></argument>, <argument pos:start="19:42" pos:end="19:45"><expr pos:start="19:42" pos:end="19:45"><operator pos:start="19:42" pos:end="19:42">&amp;</operator><name pos:start="19:43" pos:end="19:45">tmp</name></expr></argument>, <argument pos:start="19:48" pos:end="19:59"><expr pos:start="19:48" pos:end="19:59"><operator pos:start="19:48" pos:end="19:48">&amp;</operator><name pos:start="19:49" pos:end="19:59">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:47"><expr pos:start="21:5" pos:end="21:46"><call pos:start="21:5" pos:end="21:46"><name pos:start="21:5" pos:end="21:19">g_assert_cmpint</name><argument_list pos:start="21:20" pos:end="21:46">(<argument pos:start="21:21" pos:end="21:29"><expr pos:start="21:21" pos:end="21:29"><name pos:start="21:21" pos:end="21:29"><name pos:start="21:21" pos:end="21:23">tmp</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:29">type</name></name></expr></argument>, <argument pos:start="21:32" pos:end="21:33"><expr pos:start="21:32" pos:end="21:33"><operator pos:start="21:32" pos:end="21:33">==</operator></expr></argument>, <argument pos:start="21:36" pos:end="21:45"><expr pos:start="21:36" pos:end="21:45"><name pos:start="21:36" pos:end="21:45">QTYPE_QINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><call pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:19">g_assert_cmpint</name><argument_list pos:start="23:20" pos:end="23:37">(<argument pos:start="23:21" pos:end="23:28"><expr pos:start="23:21" pos:end="23:28"><name pos:start="23:21" pos:end="23:28"><name pos:start="23:21" pos:end="23:23">tmp</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:26">u</name><operator pos:start="23:27" pos:end="23:27">.</operator><name pos:start="23:28" pos:end="23:28">i</name></name></expr></argument>, <argument pos:start="23:31" pos:end="23:32"><expr pos:start="23:31" pos:end="23:32"><operator pos:start="23:31" pos:end="23:32">==</operator></expr></argument>, <argument pos:start="23:35" pos:end="23:36"><expr pos:start="23:35" pos:end="23:36"><literal type="number" pos:start="23:35" pos:end="23:36">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><call pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:30">qapi_free_UserDefAlternate</name><argument_list pos:start="25:31" pos:end="25:35">(<argument pos:start="25:32" pos:end="25:34"><expr pos:start="25:32" pos:end="25:34"><name pos:start="25:32" pos:end="25:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:50"><expr pos:start="29:5" pos:end="29:49"><name pos:start="29:5" pos:end="29:5">v</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <call pos:start="29:9" pos:end="29:49"><name pos:start="29:9" pos:end="29:31">visitor_input_test_init</name><argument_list pos:start="29:32" pos:end="29:49">(<argument pos:start="29:33" pos:end="29:36"><expr pos:start="29:33" pos:end="29:36"><name pos:start="29:33" pos:end="29:36">data</name></expr></argument>, <argument pos:start="29:39" pos:end="29:48"><expr pos:start="29:39" pos:end="29:48"><literal type="string" pos:start="29:39" pos:end="29:48">"'string'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:61"><expr pos:start="31:5" pos:end="31:60"><call pos:start="31:5" pos:end="31:60"><name pos:start="31:5" pos:end="31:31">visit_type_UserDefAlternate</name><argument_list pos:start="31:32" pos:end="31:60">(<argument pos:start="31:33" pos:end="31:33"><expr pos:start="31:33" pos:end="31:33"><name pos:start="31:33" pos:end="31:33">v</name></expr></argument>, <argument pos:start="31:36" pos:end="31:39"><expr pos:start="31:36" pos:end="31:39"><name pos:start="31:36" pos:end="31:39">NULL</name></expr></argument>, <argument pos:start="31:42" pos:end="31:45"><expr pos:start="31:42" pos:end="31:45"><operator pos:start="31:42" pos:end="31:42">&amp;</operator><name pos:start="31:43" pos:end="31:45">tmp</name></expr></argument>, <argument pos:start="31:48" pos:end="31:59"><expr pos:start="31:48" pos:end="31:59"><operator pos:start="31:48" pos:end="31:48">&amp;</operator><name pos:start="31:49" pos:end="31:59">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:50"><expr pos:start="33:5" pos:end="33:49"><call pos:start="33:5" pos:end="33:49"><name pos:start="33:5" pos:end="33:19">g_assert_cmpint</name><argument_list pos:start="33:20" pos:end="33:49">(<argument pos:start="33:21" pos:end="33:29"><expr pos:start="33:21" pos:end="33:29"><name pos:start="33:21" pos:end="33:29"><name pos:start="33:21" pos:end="33:23">tmp</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:29">type</name></name></expr></argument>, <argument pos:start="33:32" pos:end="33:33"><expr pos:start="33:32" pos:end="33:33"><operator pos:start="33:32" pos:end="33:33">==</operator></expr></argument>, <argument pos:start="33:36" pos:end="33:48"><expr pos:start="33:36" pos:end="33:48"><name pos:start="33:36" pos:end="33:48">QTYPE_QSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:44"><expr pos:start="35:5" pos:end="35:43"><call pos:start="35:5" pos:end="35:43"><name pos:start="35:5" pos:end="35:19">g_assert_cmpstr</name><argument_list pos:start="35:20" pos:end="35:43">(<argument pos:start="35:21" pos:end="35:28"><expr pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:23">tmp</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:26">u</name><operator pos:start="35:27" pos:end="35:27">.</operator><name pos:start="35:28" pos:end="35:28">s</name></name></expr></argument>, <argument pos:start="35:31" pos:end="35:32"><expr pos:start="35:31" pos:end="35:32"><operator pos:start="35:31" pos:end="35:32">==</operator></expr></argument>, <argument pos:start="35:35" pos:end="35:42"><expr pos:start="35:35" pos:end="35:42"><literal type="string" pos:start="35:35" pos:end="35:42">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:36"><expr pos:start="37:5" pos:end="37:35"><call pos:start="37:5" pos:end="37:35"><name pos:start="37:5" pos:end="37:30">qapi_free_UserDefAlternate</name><argument_list pos:start="37:31" pos:end="37:35">(<argument pos:start="37:32" pos:end="37:34"><expr pos:start="37:32" pos:end="37:34"><name pos:start="37:32" pos:end="37:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="43:69"><expr pos:start="41:5" pos:end="43:68"><name pos:start="41:5" pos:end="41:5">v</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <call pos:start="41:9" pos:end="43:68"><name pos:start="41:9" pos:end="41:31">visitor_input_test_init</name><argument_list pos:start="41:32" pos:end="43:68">(<argument pos:start="41:33" pos:end="41:36"><expr pos:start="41:33" pos:end="41:36"><name pos:start="41:33" pos:end="41:36">data</name></expr></argument>, <argument pos:start="41:39" pos:end="43:67"><expr pos:start="41:39" pos:end="43:67"><literal type="string" pos:start="41:39" pos:end="41:70">"{'integer':1, 'string':'str', "</literal>

                                <literal type="string" pos:start="43:33" pos:end="43:67">"'enum1':'value1', 'boolean':true}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:61"><expr pos:start="45:5" pos:end="45:60"><call pos:start="45:5" pos:end="45:60"><name pos:start="45:5" pos:end="45:31">visit_type_UserDefAlternate</name><argument_list pos:start="45:32" pos:end="45:60">(<argument pos:start="45:33" pos:end="45:33"><expr pos:start="45:33" pos:end="45:33"><name pos:start="45:33" pos:end="45:33">v</name></expr></argument>, <argument pos:start="45:36" pos:end="45:39"><expr pos:start="45:36" pos:end="45:39"><name pos:start="45:36" pos:end="45:39">NULL</name></expr></argument>, <argument pos:start="45:42" pos:end="45:45"><expr pos:start="45:42" pos:end="45:45"><operator pos:start="45:42" pos:end="45:42">&amp;</operator><name pos:start="45:43" pos:end="45:45">tmp</name></expr></argument>, <argument pos:start="45:48" pos:end="45:59"><expr pos:start="45:48" pos:end="45:59"><operator pos:start="45:48" pos:end="45:48">&amp;</operator><name pos:start="45:49" pos:end="45:59">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:48"><expr pos:start="47:5" pos:end="47:47"><call pos:start="47:5" pos:end="47:47"><name pos:start="47:5" pos:end="47:19">g_assert_cmpint</name><argument_list pos:start="47:20" pos:end="47:47">(<argument pos:start="47:21" pos:end="47:29"><expr pos:start="47:21" pos:end="47:29"><name pos:start="47:21" pos:end="47:29"><name pos:start="47:21" pos:end="47:23">tmp</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:29">type</name></name></expr></argument>, <argument pos:start="47:32" pos:end="47:33"><expr pos:start="47:32" pos:end="47:33"><operator pos:start="47:32" pos:end="47:33">==</operator></expr></argument>, <argument pos:start="47:36" pos:end="47:46"><expr pos:start="47:36" pos:end="47:46"><name pos:start="47:36" pos:end="47:46">QTYPE_QDICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:49"><expr pos:start="49:5" pos:end="49:48"><call pos:start="49:5" pos:end="49:48"><name pos:start="49:5" pos:end="49:19">g_assert_cmpint</name><argument_list pos:start="49:20" pos:end="49:48">(<argument pos:start="49:21" pos:end="49:40"><expr pos:start="49:21" pos:end="49:40"><name pos:start="49:21" pos:end="49:40"><name pos:start="49:21" pos:end="49:23">tmp</name><operator pos:start="49:24" pos:end="49:25">-&gt;</operator><name pos:start="49:26" pos:end="49:26">u</name><operator pos:start="49:27" pos:end="49:27">.</operator><name pos:start="49:28" pos:end="49:31">udfu</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:40">integer</name></name></expr></argument>, <argument pos:start="49:43" pos:end="49:44"><expr pos:start="49:43" pos:end="49:44"><operator pos:start="49:43" pos:end="49:44">==</operator></expr></argument>, <argument pos:start="49:47" pos:end="49:47"><expr pos:start="49:47" pos:end="49:47"><literal type="number" pos:start="49:47" pos:end="49:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:52"><expr pos:start="51:5" pos:end="51:51"><call pos:start="51:5" pos:end="51:51"><name pos:start="51:5" pos:end="51:19">g_assert_cmpstr</name><argument_list pos:start="51:20" pos:end="51:51">(<argument pos:start="51:21" pos:end="51:39"><expr pos:start="51:21" pos:end="51:39"><name pos:start="51:21" pos:end="51:39"><name pos:start="51:21" pos:end="51:23">tmp</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:26">u</name><operator pos:start="51:27" pos:end="51:27">.</operator><name pos:start="51:28" pos:end="51:31">udfu</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:39">string</name></name></expr></argument>, <argument pos:start="51:42" pos:end="51:43"><expr pos:start="51:42" pos:end="51:43"><operator pos:start="51:42" pos:end="51:43">==</operator></expr></argument>, <argument pos:start="51:46" pos:end="51:50"><expr pos:start="51:46" pos:end="51:50"><literal type="string" pos:start="51:46" pos:end="51:50">"str"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:61"><expr pos:start="53:5" pos:end="53:60"><call pos:start="53:5" pos:end="53:60"><name pos:start="53:5" pos:end="53:19">g_assert_cmpint</name><argument_list pos:start="53:20" pos:end="53:60">(<argument pos:start="53:21" pos:end="53:38"><expr pos:start="53:21" pos:end="53:38"><name pos:start="53:21" pos:end="53:38"><name pos:start="53:21" pos:end="53:23">tmp</name><operator pos:start="53:24" pos:end="53:25">-&gt;</operator><name pos:start="53:26" pos:end="53:26">u</name><operator pos:start="53:27" pos:end="53:27">.</operator><name pos:start="53:28" pos:end="53:31">udfu</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:38">enum1</name></name></expr></argument>, <argument pos:start="53:41" pos:end="53:42"><expr pos:start="53:41" pos:end="53:42"><operator pos:start="53:41" pos:end="53:42">==</operator></expr></argument>, <argument pos:start="53:45" pos:end="53:59"><expr pos:start="53:45" pos:end="53:59"><name pos:start="53:45" pos:end="53:59">ENUM_ONE_VALUE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:62"><expr pos:start="55:5" pos:end="55:61"><call pos:start="55:5" pos:end="55:61"><name pos:start="55:5" pos:end="55:19">g_assert_cmpint</name><argument_list pos:start="55:20" pos:end="55:61">(<argument pos:start="55:21" pos:end="55:50"><expr pos:start="55:21" pos:end="55:50"><name pos:start="55:21" pos:end="55:50"><name pos:start="55:21" pos:end="55:23">tmp</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:26">u</name><operator pos:start="55:27" pos:end="55:27">.</operator><name pos:start="55:28" pos:end="55:31">udfu</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:34">u</name><operator pos:start="55:35" pos:end="55:35">.</operator><name pos:start="55:36" pos:end="55:41">value1</name><operator pos:start="55:42" pos:end="55:43">-&gt;</operator><name pos:start="55:44" pos:end="55:50">boolean</name></name></expr></argument>, <argument pos:start="55:53" pos:end="55:54"><expr pos:start="55:53" pos:end="55:54"><operator pos:start="55:53" pos:end="55:54">==</operator></expr></argument>, <argument pos:start="55:57" pos:end="55:60"><expr pos:start="55:57" pos:end="55:60"><name pos:start="55:57" pos:end="55:60">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:63"><expr pos:start="57:5" pos:end="57:62"><call pos:start="57:5" pos:end="57:62"><name pos:start="57:5" pos:end="57:19">g_assert_cmpint</name><argument_list pos:start="57:20" pos:end="57:62">(<argument pos:start="57:21" pos:end="57:50"><expr pos:start="57:21" pos:end="57:50"><name pos:start="57:21" pos:end="57:50"><name pos:start="57:21" pos:end="57:23">tmp</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:26">u</name><operator pos:start="57:27" pos:end="57:27">.</operator><name pos:start="57:28" pos:end="57:31">udfu</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:34">u</name><operator pos:start="57:35" pos:end="57:35">.</operator><name pos:start="57:36" pos:end="57:41">value1</name><operator pos:start="57:42" pos:end="57:43">-&gt;</operator><name pos:start="57:44" pos:end="57:50">has_a_b</name></name></expr></argument>, <argument pos:start="57:53" pos:end="57:54"><expr pos:start="57:53" pos:end="57:54"><operator pos:start="57:53" pos:end="57:54">==</operator></expr></argument>, <argument pos:start="57:57" pos:end="57:61"><expr pos:start="57:57" pos:end="57:61"><name pos:start="57:57" pos:end="57:61">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:36"><expr pos:start="59:5" pos:end="59:35"><call pos:start="59:5" pos:end="59:35"><name pos:start="59:5" pos:end="59:30">qapi_free_UserDefAlternate</name><argument_list pos:start="59:31" pos:end="59:35">(<argument pos:start="59:32" pos:end="59:34"><expr pos:start="59:32" pos:end="59:34"><name pos:start="59:32" pos:end="59:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:47"><expr pos:start="63:5" pos:end="63:46"><name pos:start="63:5" pos:end="63:5">v</name> <operator pos:start="63:7" pos:end="63:7">=</operator> <call pos:start="63:9" pos:end="63:46"><name pos:start="63:9" pos:end="63:31">visitor_input_test_init</name><argument_list pos:start="63:32" pos:end="63:46">(<argument pos:start="63:33" pos:end="63:36"><expr pos:start="63:33" pos:end="63:36"><name pos:start="63:33" pos:end="63:36">data</name></expr></argument>, <argument pos:start="63:39" pos:end="63:45"><expr pos:start="63:39" pos:end="63:45"><literal type="string" pos:start="63:39" pos:end="63:45">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:53"><expr pos:start="65:5" pos:end="65:52"><call pos:start="65:5" pos:end="65:52"><name pos:start="65:5" pos:end="65:31">visit_type_UserDefAlternate</name><argument_list pos:start="65:32" pos:end="65:52">(<argument pos:start="65:33" pos:end="65:33"><expr pos:start="65:33" pos:end="65:33"><name pos:start="65:33" pos:end="65:33">v</name></expr></argument>, <argument pos:start="65:36" pos:end="65:39"><expr pos:start="65:36" pos:end="65:39"><name pos:start="65:36" pos:end="65:39">NULL</name></expr></argument>, <argument pos:start="65:42" pos:end="65:45"><expr pos:start="65:42" pos:end="65:45"><operator pos:start="65:42" pos:end="65:42">&amp;</operator><name pos:start="65:43" pos:end="65:45">tmp</name></expr></argument>, <argument pos:start="65:48" pos:end="65:51"><expr pos:start="65:48" pos:end="65:51"><operator pos:start="65:48" pos:end="65:48">&amp;</operator><name pos:start="65:49" pos:end="65:51">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:30"><expr pos:start="67:5" pos:end="67:29"><call pos:start="67:5" pos:end="67:29"><name pos:start="67:5" pos:end="67:23">error_free_or_abort</name><argument_list pos:start="67:24" pos:end="67:29">(<argument pos:start="67:25" pos:end="67:28"><expr pos:start="67:25" pos:end="67:28"><operator pos:start="67:25" pos:end="67:25">&amp;</operator><name pos:start="67:26" pos:end="67:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:36"><expr pos:start="69:5" pos:end="69:35"><call pos:start="69:5" pos:end="69:35"><name pos:start="69:5" pos:end="69:30">qapi_free_UserDefAlternate</name><argument_list pos:start="69:31" pos:end="69:35">(<argument pos:start="69:32" pos:end="69:34"><expr pos:start="69:32" pos:end="69:34"><name pos:start="69:32" pos:end="69:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:55"><expr pos:start="73:5" pos:end="73:54"><name pos:start="73:5" pos:end="73:5">v</name> <operator pos:start="73:7" pos:end="73:7">=</operator> <call pos:start="73:9" pos:end="73:54"><name pos:start="73:9" pos:end="73:31">visitor_input_test_init</name><argument_list pos:start="73:32" pos:end="73:54">(<argument pos:start="73:33" pos:end="73:36"><expr pos:start="73:33" pos:end="73:36"><name pos:start="73:33" pos:end="73:36">data</name></expr></argument>, <argument pos:start="73:39" pos:end="73:53"><expr pos:start="73:39" pos:end="73:53"><literal type="string" pos:start="73:39" pos:end="73:53">"{ 'alt': 42 }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:59"><expr pos:start="75:5" pos:end="75:58"><call pos:start="75:5" pos:end="75:58"><name pos:start="75:5" pos:end="75:28">visit_type_WrapAlternate</name><argument_list pos:start="75:29" pos:end="75:58">(<argument pos:start="75:30" pos:end="75:30"><expr pos:start="75:30" pos:end="75:30"><name pos:start="75:30" pos:end="75:30">v</name></expr></argument>, <argument pos:start="75:33" pos:end="75:36"><expr pos:start="75:33" pos:end="75:36"><name pos:start="75:33" pos:end="75:36">NULL</name></expr></argument>, <argument pos:start="75:39" pos:end="75:43"><expr pos:start="75:39" pos:end="75:43"><operator pos:start="75:39" pos:end="75:39">&amp;</operator><name pos:start="75:40" pos:end="75:43">wrap</name></expr></argument>, <argument pos:start="75:46" pos:end="75:57"><expr pos:start="75:46" pos:end="75:57"><operator pos:start="75:46" pos:end="75:46">&amp;</operator><name pos:start="75:47" pos:end="75:57">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:53"><expr pos:start="77:5" pos:end="77:52"><call pos:start="77:5" pos:end="77:52"><name pos:start="77:5" pos:end="77:19">g_assert_cmpint</name><argument_list pos:start="77:20" pos:end="77:52">(<argument pos:start="77:21" pos:end="77:35"><expr pos:start="77:21" pos:end="77:35"><name pos:start="77:21" pos:end="77:35"><name pos:start="77:21" pos:end="77:24">wrap</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:29">alt</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:35">type</name></name></expr></argument>, <argument pos:start="77:38" pos:end="77:39"><expr pos:start="77:38" pos:end="77:39"><operator pos:start="77:38" pos:end="77:39">==</operator></expr></argument>, <argument pos:start="77:42" pos:end="77:51"><expr pos:start="77:42" pos:end="77:51"><name pos:start="77:42" pos:end="77:51">QTYPE_QINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:44"><expr pos:start="79:5" pos:end="79:43"><call pos:start="79:5" pos:end="79:43"><name pos:start="79:5" pos:end="79:19">g_assert_cmpint</name><argument_list pos:start="79:20" pos:end="79:43">(<argument pos:start="79:21" pos:end="79:34"><expr pos:start="79:21" pos:end="79:34"><name pos:start="79:21" pos:end="79:34"><name pos:start="79:21" pos:end="79:24">wrap</name><operator pos:start="79:25" pos:end="79:26">-&gt;</operator><name pos:start="79:27" pos:end="79:29">alt</name><operator pos:start="79:30" pos:end="79:31">-&gt;</operator><name pos:start="79:32" pos:end="79:32">u</name><operator pos:start="79:33" pos:end="79:33">.</operator><name pos:start="79:34" pos:end="79:34">i</name></name></expr></argument>, <argument pos:start="79:37" pos:end="79:38"><expr pos:start="79:37" pos:end="79:38"><operator pos:start="79:37" pos:end="79:38">==</operator></expr></argument>, <argument pos:start="79:41" pos:end="79:42"><expr pos:start="79:41" pos:end="79:42"><literal type="number" pos:start="79:41" pos:end="79:42">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:34"><expr pos:start="81:5" pos:end="81:33"><call pos:start="81:5" pos:end="81:33"><name pos:start="81:5" pos:end="81:27">qapi_free_WrapAlternate</name><argument_list pos:start="81:28" pos:end="81:33">(<argument pos:start="81:29" pos:end="81:32"><expr pos:start="81:29" pos:end="81:32"><name pos:start="81:29" pos:end="81:32">wrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:61"><expr pos:start="85:5" pos:end="85:60"><name pos:start="85:5" pos:end="85:5">v</name> <operator pos:start="85:7" pos:end="85:7">=</operator> <call pos:start="85:9" pos:end="85:60"><name pos:start="85:9" pos:end="85:31">visitor_input_test_init</name><argument_list pos:start="85:32" pos:end="85:60">(<argument pos:start="85:33" pos:end="85:36"><expr pos:start="85:33" pos:end="85:36"><name pos:start="85:33" pos:end="85:36">data</name></expr></argument>, <argument pos:start="85:39" pos:end="85:59"><expr pos:start="85:39" pos:end="85:59"><literal type="string" pos:start="85:39" pos:end="85:59">"{ 'alt': 'string' }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:59"><expr pos:start="87:5" pos:end="87:58"><call pos:start="87:5" pos:end="87:58"><name pos:start="87:5" pos:end="87:28">visit_type_WrapAlternate</name><argument_list pos:start="87:29" pos:end="87:58">(<argument pos:start="87:30" pos:end="87:30"><expr pos:start="87:30" pos:end="87:30"><name pos:start="87:30" pos:end="87:30">v</name></expr></argument>, <argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">NULL</name></expr></argument>, <argument pos:start="87:39" pos:end="87:43"><expr pos:start="87:39" pos:end="87:43"><operator pos:start="87:39" pos:end="87:39">&amp;</operator><name pos:start="87:40" pos:end="87:43">wrap</name></expr></argument>, <argument pos:start="87:46" pos:end="87:57"><expr pos:start="87:46" pos:end="87:57"><operator pos:start="87:46" pos:end="87:46">&amp;</operator><name pos:start="87:47" pos:end="87:57">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:56"><expr pos:start="89:5" pos:end="89:55"><call pos:start="89:5" pos:end="89:55"><name pos:start="89:5" pos:end="89:19">g_assert_cmpint</name><argument_list pos:start="89:20" pos:end="89:55">(<argument pos:start="89:21" pos:end="89:35"><expr pos:start="89:21" pos:end="89:35"><name pos:start="89:21" pos:end="89:35"><name pos:start="89:21" pos:end="89:24">wrap</name><operator pos:start="89:25" pos:end="89:26">-&gt;</operator><name pos:start="89:27" pos:end="89:29">alt</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:35">type</name></name></expr></argument>, <argument pos:start="89:38" pos:end="89:39"><expr pos:start="89:38" pos:end="89:39"><operator pos:start="89:38" pos:end="89:39">==</operator></expr></argument>, <argument pos:start="89:42" pos:end="89:54"><expr pos:start="89:42" pos:end="89:54"><name pos:start="89:42" pos:end="89:54">QTYPE_QSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:50"><expr pos:start="91:5" pos:end="91:49"><call pos:start="91:5" pos:end="91:49"><name pos:start="91:5" pos:end="91:19">g_assert_cmpstr</name><argument_list pos:start="91:20" pos:end="91:49">(<argument pos:start="91:21" pos:end="91:34"><expr pos:start="91:21" pos:end="91:34"><name pos:start="91:21" pos:end="91:34"><name pos:start="91:21" pos:end="91:24">wrap</name><operator pos:start="91:25" pos:end="91:26">-&gt;</operator><name pos:start="91:27" pos:end="91:29">alt</name><operator pos:start="91:30" pos:end="91:31">-&gt;</operator><name pos:start="91:32" pos:end="91:32">u</name><operator pos:start="91:33" pos:end="91:33">.</operator><name pos:start="91:34" pos:end="91:34">s</name></name></expr></argument>, <argument pos:start="91:37" pos:end="91:38"><expr pos:start="91:37" pos:end="91:38"><operator pos:start="91:37" pos:end="91:38">==</operator></expr></argument>, <argument pos:start="91:41" pos:end="91:48"><expr pos:start="91:41" pos:end="91:48"><literal type="string" pos:start="91:41" pos:end="91:48">"string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:34"><expr pos:start="93:5" pos:end="93:33"><call pos:start="93:5" pos:end="93:33"><name pos:start="93:5" pos:end="93:27">qapi_free_WrapAlternate</name><argument_list pos:start="93:28" pos:end="93:33">(<argument pos:start="93:29" pos:end="93:32"><expr pos:start="93:29" pos:end="93:32"><name pos:start="93:29" pos:end="93:32">wrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="99:71"><expr pos:start="97:5" pos:end="99:70"><name pos:start="97:5" pos:end="97:5">v</name> <operator pos:start="97:7" pos:end="97:7">=</operator> <call pos:start="97:9" pos:end="99:70"><name pos:start="97:9" pos:end="97:31">visitor_input_test_init</name><argument_list pos:start="97:32" pos:end="99:70">(<argument pos:start="97:33" pos:end="97:36"><expr pos:start="97:33" pos:end="97:36"><name pos:start="97:33" pos:end="97:36">data</name></expr></argument>, <argument pos:start="97:39" pos:end="99:69"><expr pos:start="97:39" pos:end="99:69"><literal type="string" pos:start="97:39" pos:end="97:79">"{ 'alt': {'integer':1, 'string':'str', "</literal>

                                <literal type="string" pos:start="99:33" pos:end="99:69">"'enum1':'value1', 'boolean':true} }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:59"><expr pos:start="101:5" pos:end="101:58"><call pos:start="101:5" pos:end="101:58"><name pos:start="101:5" pos:end="101:28">visit_type_WrapAlternate</name><argument_list pos:start="101:29" pos:end="101:58">(<argument pos:start="101:30" pos:end="101:30"><expr pos:start="101:30" pos:end="101:30"><name pos:start="101:30" pos:end="101:30">v</name></expr></argument>, <argument pos:start="101:33" pos:end="101:36"><expr pos:start="101:33" pos:end="101:36"><name pos:start="101:33" pos:end="101:36">NULL</name></expr></argument>, <argument pos:start="101:39" pos:end="101:43"><expr pos:start="101:39" pos:end="101:43"><operator pos:start="101:39" pos:end="101:39">&amp;</operator><name pos:start="101:40" pos:end="101:43">wrap</name></expr></argument>, <argument pos:start="101:46" pos:end="101:57"><expr pos:start="101:46" pos:end="101:57"><operator pos:start="101:46" pos:end="101:46">&amp;</operator><name pos:start="101:47" pos:end="101:57">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:54"><expr pos:start="103:5" pos:end="103:53"><call pos:start="103:5" pos:end="103:53"><name pos:start="103:5" pos:end="103:19">g_assert_cmpint</name><argument_list pos:start="103:20" pos:end="103:53">(<argument pos:start="103:21" pos:end="103:35"><expr pos:start="103:21" pos:end="103:35"><name pos:start="103:21" pos:end="103:35"><name pos:start="103:21" pos:end="103:24">wrap</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:29">alt</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:35">type</name></name></expr></argument>, <argument pos:start="103:38" pos:end="103:39"><expr pos:start="103:38" pos:end="103:39"><operator pos:start="103:38" pos:end="103:39">==</operator></expr></argument>, <argument pos:start="103:42" pos:end="103:52"><expr pos:start="103:42" pos:end="103:52"><name pos:start="103:42" pos:end="103:52">QTYPE_QDICT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:55"><expr pos:start="105:5" pos:end="105:54"><call pos:start="105:5" pos:end="105:54"><name pos:start="105:5" pos:end="105:19">g_assert_cmpint</name><argument_list pos:start="105:20" pos:end="105:54">(<argument pos:start="105:21" pos:end="105:46"><expr pos:start="105:21" pos:end="105:46"><name pos:start="105:21" pos:end="105:46"><name pos:start="105:21" pos:end="105:24">wrap</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:29">alt</name><operator pos:start="105:30" pos:end="105:31">-&gt;</operator><name pos:start="105:32" pos:end="105:32">u</name><operator pos:start="105:33" pos:end="105:33">.</operator><name pos:start="105:34" pos:end="105:37">udfu</name><operator pos:start="105:38" pos:end="105:39">-&gt;</operator><name pos:start="105:40" pos:end="105:46">integer</name></name></expr></argument>, <argument pos:start="105:49" pos:end="105:50"><expr pos:start="105:49" pos:end="105:50"><operator pos:start="105:49" pos:end="105:50">==</operator></expr></argument>, <argument pos:start="105:53" pos:end="105:53"><expr pos:start="105:53" pos:end="105:53"><literal type="number" pos:start="105:53" pos:end="105:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:58"><expr pos:start="107:5" pos:end="107:57"><call pos:start="107:5" pos:end="107:57"><name pos:start="107:5" pos:end="107:19">g_assert_cmpstr</name><argument_list pos:start="107:20" pos:end="107:57">(<argument pos:start="107:21" pos:end="107:45"><expr pos:start="107:21" pos:end="107:45"><name pos:start="107:21" pos:end="107:45"><name pos:start="107:21" pos:end="107:24">wrap</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:29">alt</name><operator pos:start="107:30" pos:end="107:31">-&gt;</operator><name pos:start="107:32" pos:end="107:32">u</name><operator pos:start="107:33" pos:end="107:33">.</operator><name pos:start="107:34" pos:end="107:37">udfu</name><operator pos:start="107:38" pos:end="107:39">-&gt;</operator><name pos:start="107:40" pos:end="107:45">string</name></name></expr></argument>, <argument pos:start="107:48" pos:end="107:49"><expr pos:start="107:48" pos:end="107:49"><operator pos:start="107:48" pos:end="107:49">==</operator></expr></argument>, <argument pos:start="107:52" pos:end="107:56"><expr pos:start="107:52" pos:end="107:56"><literal type="string" pos:start="107:52" pos:end="107:56">"str"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:67"><expr pos:start="109:5" pos:end="109:66"><call pos:start="109:5" pos:end="109:66"><name pos:start="109:5" pos:end="109:19">g_assert_cmpint</name><argument_list pos:start="109:20" pos:end="109:66">(<argument pos:start="109:21" pos:end="109:44"><expr pos:start="109:21" pos:end="109:44"><name pos:start="109:21" pos:end="109:44"><name pos:start="109:21" pos:end="109:24">wrap</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:29">alt</name><operator pos:start="109:30" pos:end="109:31">-&gt;</operator><name pos:start="109:32" pos:end="109:32">u</name><operator pos:start="109:33" pos:end="109:33">.</operator><name pos:start="109:34" pos:end="109:37">udfu</name><operator pos:start="109:38" pos:end="109:39">-&gt;</operator><name pos:start="109:40" pos:end="109:44">enum1</name></name></expr></argument>, <argument pos:start="109:47" pos:end="109:48"><expr pos:start="109:47" pos:end="109:48"><operator pos:start="109:47" pos:end="109:48">==</operator></expr></argument>, <argument pos:start="109:51" pos:end="109:65"><expr pos:start="109:51" pos:end="109:65"><name pos:start="109:51" pos:end="109:65">ENUM_ONE_VALUE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:68"><expr pos:start="111:5" pos:end="111:67"><call pos:start="111:5" pos:end="111:67"><name pos:start="111:5" pos:end="111:19">g_assert_cmpint</name><argument_list pos:start="111:20" pos:end="111:67">(<argument pos:start="111:21" pos:end="111:56"><expr pos:start="111:21" pos:end="111:56"><name pos:start="111:21" pos:end="111:56"><name pos:start="111:21" pos:end="111:24">wrap</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:29">alt</name><operator pos:start="111:30" pos:end="111:31">-&gt;</operator><name pos:start="111:32" pos:end="111:32">u</name><operator pos:start="111:33" pos:end="111:33">.</operator><name pos:start="111:34" pos:end="111:37">udfu</name><operator pos:start="111:38" pos:end="111:39">-&gt;</operator><name pos:start="111:40" pos:end="111:40">u</name><operator pos:start="111:41" pos:end="111:41">.</operator><name pos:start="111:42" pos:end="111:47">value1</name><operator pos:start="111:48" pos:end="111:49">-&gt;</operator><name pos:start="111:50" pos:end="111:56">boolean</name></name></expr></argument>, <argument pos:start="111:59" pos:end="111:60"><expr pos:start="111:59" pos:end="111:60"><operator pos:start="111:59" pos:end="111:60">==</operator></expr></argument>, <argument pos:start="111:63" pos:end="111:66"><expr pos:start="111:63" pos:end="111:66"><name pos:start="111:63" pos:end="111:66">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:69"><expr pos:start="113:5" pos:end="113:68"><call pos:start="113:5" pos:end="113:68"><name pos:start="113:5" pos:end="113:19">g_assert_cmpint</name><argument_list pos:start="113:20" pos:end="113:68">(<argument pos:start="113:21" pos:end="113:56"><expr pos:start="113:21" pos:end="113:56"><name pos:start="113:21" pos:end="113:56"><name pos:start="113:21" pos:end="113:24">wrap</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:29">alt</name><operator pos:start="113:30" pos:end="113:31">-&gt;</operator><name pos:start="113:32" pos:end="113:32">u</name><operator pos:start="113:33" pos:end="113:33">.</operator><name pos:start="113:34" pos:end="113:37">udfu</name><operator pos:start="113:38" pos:end="113:39">-&gt;</operator><name pos:start="113:40" pos:end="113:40">u</name><operator pos:start="113:41" pos:end="113:41">.</operator><name pos:start="113:42" pos:end="113:47">value1</name><operator pos:start="113:48" pos:end="113:49">-&gt;</operator><name pos:start="113:50" pos:end="113:56">has_a_b</name></name></expr></argument>, <argument pos:start="113:59" pos:end="113:60"><expr pos:start="113:59" pos:end="113:60"><operator pos:start="113:59" pos:end="113:60">==</operator></expr></argument>, <argument pos:start="113:63" pos:end="113:67"><expr pos:start="113:63" pos:end="113:67"><name pos:start="113:63" pos:end="113:67">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:34"><expr pos:start="115:5" pos:end="115:33"><call pos:start="115:5" pos:end="115:33"><name pos:start="115:5" pos:end="115:27">qapi_free_WrapAlternate</name><argument_list pos:start="115:28" pos:end="115:33">(<argument pos:start="115:29" pos:end="115:32"><expr pos:start="115:29" pos:end="115:32"><name pos:start="115:29" pos:end="115:32">wrap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
