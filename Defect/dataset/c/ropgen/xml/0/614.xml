<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/614.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">decode_block_refinement</name><parameter_list pos:start="1:35" pos:end="5:60">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:56"><name pos:start="1:36" pos:end="1:53">MJpegDecodeContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:56">s</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:72"><decl pos:start="1:59" pos:end="1:72"><type pos:start="1:59" pos:end="1:72"><name pos:start="1:59" pos:end="1:65">DCTELEM</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:72">block</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:91"><decl pos:start="1:75" pos:end="1:91"><type pos:start="1:75" pos:end="1:91"><name pos:start="1:75" pos:end="1:81">uint8_t</name> <modifier pos:start="1:83" pos:end="1:83">*</modifier></type><name pos:start="1:84" pos:end="1:91">last_nnz</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:36">ac_index</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:59"><decl pos:start="3:39" pos:end="3:59"><type pos:start="3:39" pos:end="3:59"><name pos:start="3:39" pos:end="3:45">int16_t</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:59">quant_matrix</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:30"><decl pos:start="5:25" pos:end="5:30"><type pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:30">ss</name></decl></parameter>, <parameter pos:start="5:33" pos:end="5:38"><decl pos:start="5:33" pos:end="5:38"><type pos:start="5:33" pos:end="5:38"><name pos:start="5:33" pos:end="5:35">int</name></type> <name pos:start="5:37" pos:end="5:38">se</name></decl></parameter>, <parameter pos:start="5:41" pos:end="5:46"><decl pos:start="5:41" pos:end="5:46"><type pos:start="5:41" pos:end="5:46"><name pos:start="5:41" pos:end="5:43">int</name></type> <name pos:start="5:45" pos:end="5:46">Al</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:59"><decl pos:start="5:49" pos:end="5:59"><type pos:start="5:49" pos:end="5:59"><name pos:start="5:49" pos:end="5:51">int</name> <modifier pos:start="5:53" pos:end="5:53">*</modifier></type><name pos:start="5:54" pos:end="5:59">EOBRUN</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="123:1">{<block_content pos:start="9:5" pos:end="121:13">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">code</name></decl>, <decl pos:start="9:15" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:15">i</name><init pos:start="9:16" pos:end="9:18">=<expr pos:start="9:17" pos:end="9:18"><name pos:start="9:17" pos:end="9:18">ss</name></expr></init></decl>, <decl pos:start="9:21" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:21">j</name></decl>, <decl pos:start="9:24" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:27">sign</name></decl>, <decl pos:start="9:30" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:32">val</name></decl>, <decl pos:start="9:35" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:35" pos:end="9:37">run</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">last</name> <init pos:start="11:14" pos:end="11:35">= <expr pos:start="11:16" pos:end="11:35"><call pos:start="11:16" pos:end="11:35"><name pos:start="11:16" pos:end="11:20">FFMIN</name><argument_list pos:start="11:21" pos:end="11:35">(<argument pos:start="11:22" pos:end="11:23"><expr pos:start="11:22" pos:end="11:23"><name pos:start="11:22" pos:end="11:23">se</name></expr></argument>, <argument pos:start="11:26" pos:end="11:34"><expr pos:start="11:26" pos:end="11:34"><operator pos:start="11:26" pos:end="11:26">*</operator><name pos:start="11:27" pos:end="11:34">last_nnz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:28"><expr pos:start="15:5" pos:end="15:27"><call pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:15">OPEN_READER</name><argument_list pos:start="15:16" pos:end="15:27">(<argument pos:start="15:17" pos:end="15:18"><expr pos:start="15:17" pos:end="15:18"><name pos:start="15:17" pos:end="15:18">re</name></expr></argument>, <argument pos:start="15:21" pos:end="15:26"><expr pos:start="15:21" pos:end="15:26"><operator pos:start="15:21" pos:end="15:21">&amp;</operator><name pos:start="15:22" pos:end="15:26"><name pos:start="15:22" pos:end="15:22">s</name><operator pos:start="15:23" pos:end="15:24">-&gt;</operator><name pos:start="15:25" pos:end="15:26">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="103:5"><if pos:start="17:5" pos:end="19:20">if<condition pos:start="17:7" pos:end="17:15">(<expr pos:start="17:8" pos:end="17:14"><operator pos:start="17:8" pos:end="17:8">*</operator><name pos:start="17:9" pos:end="17:14">EOBRUN</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:20"><block_content pos:start="19:9" pos:end="19:20">

        <expr_stmt pos:start="19:9" pos:end="19:20"><expr pos:start="19:9" pos:end="19:19"><operator pos:start="19:9" pos:end="19:9">(</operator><operator pos:start="19:10" pos:end="19:10">*</operator><name pos:start="19:11" pos:end="19:16">EOBRUN</name><operator pos:start="19:17" pos:end="19:17">)</operator><operator pos:start="19:18" pos:end="19:19">--</operator></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="21:5" pos:end="103:5">else <block pos:start="21:10" pos:end="103:5">{<block_content pos:start="23:9" pos:end="101:26">

        <for pos:start="23:9" pos:end="95:9">for<control pos:start="23:12" pos:end="23:18">(<init pos:start="23:13" pos:end="23:13">;</init><condition pos:start="23:14" pos:end="23:14">;</condition><incr pos:start="23:15" pos:end="23:17"><expr pos:start="23:15" pos:end="23:17"><name pos:start="23:15" pos:end="23:15">i</name><operator pos:start="23:16" pos:end="23:17">++</operator></expr></incr>)</control> <block pos:start="23:20" pos:end="95:9">{<block_content pos:start="25:13" pos:end="93:13">

            <expr_stmt pos:start="25:13" pos:end="25:37"><expr pos:start="25:13" pos:end="25:36"><call pos:start="25:13" pos:end="25:36"><name pos:start="25:13" pos:end="25:24">UPDATE_CACHE</name><argument_list pos:start="25:25" pos:end="25:36">(<argument pos:start="25:26" pos:end="25:27"><expr pos:start="25:26" pos:end="25:27"><name pos:start="25:26" pos:end="25:27">re</name></expr></argument>, <argument pos:start="25:30" pos:end="25:35"><expr pos:start="25:30" pos:end="25:35"><operator pos:start="25:30" pos:end="25:30">&amp;</operator><name pos:start="25:31" pos:end="25:35"><name pos:start="25:31" pos:end="25:31">s</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:35">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro pos:start="27:13" pos:end="27:71"><name pos:start="27:13" pos:end="27:19">GET_VLC</name><argument_list pos:start="27:20" pos:end="27:71">(<argument pos:start="27:21" pos:end="27:24">code</argument>, <argument pos:start="27:27" pos:end="27:28">re</argument>, <argument pos:start="27:31" pos:end="27:36">&amp;s-&gt;gb</argument>, <argument pos:start="27:39" pos:end="27:64">s-&gt;vlcs[<literal type="number" pos:start="27:47" pos:end="27:47">1</literal>][ac_index].table</argument>, <argument pos:start="27:67" pos:end="27:67"><literal type="number" pos:start="27:67" pos:end="27:67">9</literal></argument>, <argument pos:start="27:70" pos:end="27:70"><literal type="number" pos:start="27:70" pos:end="27:70">2</literal></argument>)</argument_list></macro>

            <comment type="block" pos:start="29:13" pos:end="29:101">/* Progressive JPEG use AC coeffs from zero and this decoder sets offset 16 by default */</comment>

            <expr_stmt pos:start="31:13" pos:end="31:23"><expr pos:start="31:13" pos:end="31:22"><name pos:start="31:13" pos:end="31:16">code</name> <operator pos:start="31:18" pos:end="31:19">-=</operator> <literal type="number" pos:start="31:21" pos:end="31:22">16</literal></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="93:13"><if pos:start="33:13" pos:end="63:13">if<condition pos:start="33:15" pos:end="33:26">(<expr pos:start="33:16" pos:end="33:25"><name pos:start="33:16" pos:end="33:19">code</name> <operator pos:start="33:21" pos:end="33:21">&amp;</operator> <literal type="number" pos:start="33:23" pos:end="33:25">0xF</literal></expr>)</condition> <block pos:start="33:28" pos:end="63:13">{<block_content pos:start="35:17" pos:end="61:17">

                <expr_stmt pos:start="35:17" pos:end="35:45"><expr pos:start="35:17" pos:end="35:44"><name pos:start="35:17" pos:end="35:19">run</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <operator pos:start="35:23" pos:end="35:23">(</operator><operator pos:start="35:24" pos:end="35:24">(</operator><name pos:start="35:25" pos:end="35:32">unsigned</name><operator pos:start="35:33" pos:end="35:33">)</operator> <name pos:start="35:35" pos:end="35:38">code</name><operator pos:start="35:39" pos:end="35:39">)</operator> <operator pos:start="35:41" pos:end="35:42">&gt;&gt;</operator> <literal type="number" pos:start="35:44" pos:end="35:44">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:41"><expr pos:start="37:17" pos:end="37:40"><call pos:start="37:17" pos:end="37:40"><name pos:start="37:17" pos:end="37:28">UPDATE_CACHE</name><argument_list pos:start="37:29" pos:end="37:40">(<argument pos:start="37:30" pos:end="37:31"><expr pos:start="37:30" pos:end="37:31"><name pos:start="37:30" pos:end="37:31">re</name></expr></argument>, <argument pos:start="37:34" pos:end="37:39"><expr pos:start="37:34" pos:end="37:39"><operator pos:start="37:34" pos:end="37:34">&amp;</operator><name pos:start="37:35" pos:end="37:39"><name pos:start="37:35" pos:end="37:35">s</name><operator pos:start="37:36" pos:end="37:37">-&gt;</operator><name pos:start="37:38" pos:end="37:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="39:17" pos:end="39:48"><expr pos:start="39:17" pos:end="39:47"><name pos:start="39:17" pos:end="39:19">val</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <call pos:start="39:23" pos:end="39:47"><name pos:start="39:23" pos:end="39:32">SHOW_UBITS</name><argument_list pos:start="39:33" pos:end="39:47">(<argument pos:start="39:34" pos:end="39:35"><expr pos:start="39:34" pos:end="39:35"><name pos:start="39:34" pos:end="39:35">re</name></expr></argument>, <argument pos:start="39:38" pos:end="39:43"><expr pos:start="39:38" pos:end="39:43"><operator pos:start="39:38" pos:end="39:38">&amp;</operator><name pos:start="39:39" pos:end="39:43"><name pos:start="39:39" pos:end="39:39">s</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:43">gb</name></name></expr></argument>, <argument pos:start="39:46" pos:end="39:46"><expr pos:start="39:46" pos:end="39:46"><literal type="number" pos:start="39:46" pos:end="39:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="41:17" pos:end="41:46"><expr pos:start="41:17" pos:end="41:45"><call pos:start="41:17" pos:end="41:45"><name pos:start="41:17" pos:end="41:30">LAST_SKIP_BITS</name><argument_list pos:start="41:31" pos:end="41:45">(<argument pos:start="41:32" pos:end="41:33"><expr pos:start="41:32" pos:end="41:33"><name pos:start="41:32" pos:end="41:33">re</name></expr></argument>, <argument pos:start="41:36" pos:end="41:41"><expr pos:start="41:36" pos:end="41:41"><operator pos:start="41:36" pos:end="41:36">&amp;</operator><name pos:start="41:37" pos:end="41:41"><name pos:start="41:37" pos:end="41:37">s</name><operator pos:start="41:38" pos:end="41:39">-&gt;</operator><name pos:start="41:40" pos:end="41:41">gb</name></name></expr></argument>, <argument pos:start="41:44" pos:end="41:44"><expr pos:start="41:44" pos:end="41:44"><literal type="number" pos:start="41:44" pos:end="41:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="43:17" pos:end="43:25"><expr pos:start="43:17" pos:end="43:24"><name pos:start="43:17" pos:end="43:24">ZERO_RUN</name></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:47"><expr pos:start="45:17" pos:end="45:46"><name pos:start="45:17" pos:end="45:17">j</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:46"><name pos:start="45:21" pos:end="45:21">s</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:32">scantable</name><operator pos:start="45:33" pos:end="45:33">.</operator><name pos:start="45:34" pos:end="45:43">permutated</name><index pos:start="45:44" pos:end="45:46">[<expr pos:start="45:45" pos:end="45:45"><name pos:start="45:45" pos:end="45:45">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:21"><name pos:start="47:17" pos:end="47:19">val</name><operator pos:start="47:20" pos:end="47:21">--</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:61"><expr pos:start="49:17" pos:end="49:60"><name pos:start="49:17" pos:end="49:24"><name pos:start="49:17" pos:end="49:21">block</name><index pos:start="49:22" pos:end="49:24">[<expr pos:start="49:23" pos:end="49:23"><name pos:start="49:23" pos:end="49:23">j</name></expr>]</index></name> <operator pos:start="49:26" pos:end="49:26">=</operator> <operator pos:start="49:28" pos:end="49:28">(</operator><operator pos:start="49:29" pos:end="49:29">(</operator><name pos:start="49:30" pos:end="49:44"><name pos:start="49:30" pos:end="49:41">quant_matrix</name><index pos:start="49:42" pos:end="49:44">[<expr pos:start="49:43" pos:end="49:43"><name pos:start="49:43" pos:end="49:43">j</name></expr>]</index></name><operator pos:start="49:45" pos:end="49:45">^</operator><name pos:start="49:46" pos:end="49:48">val</name><operator pos:start="49:49" pos:end="49:49">)</operator><operator pos:start="49:50" pos:end="49:50">-</operator><name pos:start="49:51" pos:end="49:53">val</name><operator pos:start="49:54" pos:end="49:54">)</operator> <operator pos:start="49:56" pos:end="49:57">&lt;&lt;</operator> <name pos:start="49:59" pos:end="49:60">Al</name></expr>;</expr_stmt>

                <if_stmt pos:start="51:17" pos:end="61:17"><if pos:start="51:17" pos:end="61:17">if<condition pos:start="51:19" pos:end="51:27">(<expr pos:start="51:20" pos:end="51:26"><name pos:start="51:20" pos:end="51:20">i</name> <operator pos:start="51:22" pos:end="51:23">==</operator> <name pos:start="51:25" pos:end="51:26">se</name></expr>)</condition> <block pos:start="51:29" pos:end="61:17">{<block_content pos:start="53:21" pos:end="59:29">

                    <if_stmt pos:start="53:21" pos:end="55:38"><if pos:start="53:21" pos:end="55:38">if<condition pos:start="53:23" pos:end="53:37">(<expr pos:start="53:24" pos:end="53:36"><name pos:start="53:24" pos:end="53:24">i</name> <operator pos:start="53:26" pos:end="53:26">&gt;</operator> <operator pos:start="53:28" pos:end="53:28">*</operator><name pos:start="53:29" pos:end="53:36">last_nnz</name></expr>)</condition><block type="pseudo" pos:start="55:25" pos:end="55:38"><block_content pos:start="55:25" pos:end="55:38">

                        <expr_stmt pos:start="55:25" pos:end="55:38"><expr pos:start="55:25" pos:end="55:37"><operator pos:start="55:25" pos:end="55:25">*</operator><name pos:start="55:26" pos:end="55:33">last_nnz</name> <operator pos:start="55:35" pos:end="55:35">=</operator> <name pos:start="55:37" pos:end="55:37">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <macro pos:start="57:21" pos:end="57:44"><name pos:start="57:21" pos:end="57:32">CLOSE_READER</name><argument_list pos:start="57:33" pos:end="57:44">(<argument pos:start="57:34" pos:end="57:35">re</argument>, <argument pos:start="57:38" pos:end="57:43">&amp;s-&gt;gb</argument>)</argument_list></macro>

                    <return pos:start="59:21" pos:end="59:29">return <expr pos:start="59:28" pos:end="59:28"><literal type="number" pos:start="59:28" pos:end="59:28">0</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if><else pos:start="63:14" pos:end="93:13">else<block pos:start="63:18" pos:end="93:13">{<block_content pos:start="65:17" pos:end="91:17">

                <expr_stmt pos:start="65:17" pos:end="65:45"><expr pos:start="65:17" pos:end="65:44"><name pos:start="65:17" pos:end="65:19">run</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <operator pos:start="65:23" pos:end="65:23">(</operator><operator pos:start="65:24" pos:end="65:24">(</operator><name pos:start="65:25" pos:end="65:32">unsigned</name><operator pos:start="65:33" pos:end="65:33">)</operator> <name pos:start="65:35" pos:end="65:38">code</name><operator pos:start="65:39" pos:end="65:39">)</operator> <operator pos:start="65:41" pos:end="65:42">&gt;&gt;</operator> <literal type="number" pos:start="65:44" pos:end="65:44">4</literal></expr>;</expr_stmt>

                <if_stmt pos:start="67:17" pos:end="91:17"><if pos:start="67:17" pos:end="71:17">if<condition pos:start="67:19" pos:end="67:30">(<expr pos:start="67:20" pos:end="67:29"><name pos:start="67:20" pos:end="67:22">run</name> <operator pos:start="67:24" pos:end="67:25">==</operator> <literal type="number" pos:start="67:27" pos:end="67:29">0xF</literal></expr>)</condition><block pos:start="67:31" pos:end="71:17">{<block_content pos:start="69:21" pos:end="69:29">

                    <expr_stmt pos:start="69:21" pos:end="69:29"><expr pos:start="69:21" pos:end="69:28"><name pos:start="69:21" pos:end="69:28">ZERO_RUN</name></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="71:18" pos:end="91:17">else<block pos:start="71:22" pos:end="91:17">{<block_content pos:start="73:21" pos:end="89:26">

                    <expr_stmt pos:start="73:21" pos:end="73:30"><expr pos:start="73:21" pos:end="73:29"><name pos:start="73:21" pos:end="73:23">val</name> <operator pos:start="73:25" pos:end="73:25">=</operator> <name pos:start="73:27" pos:end="73:29">run</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="75:21" pos:end="75:37"><expr pos:start="75:21" pos:end="75:36"><name pos:start="75:21" pos:end="75:23">run</name> <operator pos:start="75:25" pos:end="75:25">=</operator> <operator pos:start="75:27" pos:end="75:27">(</operator><literal type="number" pos:start="75:28" pos:end="75:28">1</literal> <operator pos:start="75:30" pos:end="75:31">&lt;&lt;</operator> <name pos:start="75:33" pos:end="75:35">run</name><operator pos:start="75:36" pos:end="75:36">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="77:21" pos:end="85:21"><if pos:start="77:21" pos:end="85:21">if<condition pos:start="77:23" pos:end="77:27">(<expr pos:start="77:24" pos:end="77:26"><name pos:start="77:24" pos:end="77:26">val</name></expr>)</condition> <block pos:start="77:29" pos:end="85:21">{<block_content pos:start="79:25" pos:end="83:56">

                        <expr_stmt pos:start="79:25" pos:end="79:49"><expr pos:start="79:25" pos:end="79:48"><call pos:start="79:25" pos:end="79:48"><name pos:start="79:25" pos:end="79:36">UPDATE_CACHE</name><argument_list pos:start="79:37" pos:end="79:48">(<argument pos:start="79:38" pos:end="79:39"><expr pos:start="79:38" pos:end="79:39"><name pos:start="79:38" pos:end="79:39">re</name></expr></argument>, <argument pos:start="79:42" pos:end="79:47"><expr pos:start="79:42" pos:end="79:47"><operator pos:start="79:42" pos:end="79:42">&amp;</operator><name pos:start="79:43" pos:end="79:47"><name pos:start="79:43" pos:end="79:43">s</name><operator pos:start="79:44" pos:end="79:45">-&gt;</operator><name pos:start="79:46" pos:end="79:47">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="81:25" pos:end="81:59"><expr pos:start="81:25" pos:end="81:58"><name pos:start="81:25" pos:end="81:27">run</name> <operator pos:start="81:29" pos:end="81:30">+=</operator> <call pos:start="81:32" pos:end="81:58"><name pos:start="81:32" pos:end="81:41">SHOW_UBITS</name><argument_list pos:start="81:42" pos:end="81:58">(<argument pos:start="81:43" pos:end="81:44"><expr pos:start="81:43" pos:end="81:44"><name pos:start="81:43" pos:end="81:44">re</name></expr></argument>, <argument pos:start="81:47" pos:end="81:52"><expr pos:start="81:47" pos:end="81:52"><operator pos:start="81:47" pos:end="81:47">&amp;</operator><name pos:start="81:48" pos:end="81:52"><name pos:start="81:48" pos:end="81:48">s</name><operator pos:start="81:49" pos:end="81:50">-&gt;</operator><name pos:start="81:51" pos:end="81:52">gb</name></name></expr></argument>, <argument pos:start="81:55" pos:end="81:57"><expr pos:start="81:55" pos:end="81:57"><name pos:start="81:55" pos:end="81:57">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="83:25" pos:end="83:56"><expr pos:start="83:25" pos:end="83:55"><call pos:start="83:25" pos:end="83:55"><name pos:start="83:25" pos:end="83:38">LAST_SKIP_BITS</name><argument_list pos:start="83:39" pos:end="83:55">(<argument pos:start="83:40" pos:end="83:41"><expr pos:start="83:40" pos:end="83:41"><name pos:start="83:40" pos:end="83:41">re</name></expr></argument>, <argument pos:start="83:44" pos:end="83:49"><expr pos:start="83:44" pos:end="83:49"><operator pos:start="83:44" pos:end="83:44">&amp;</operator><name pos:start="83:45" pos:end="83:49"><name pos:start="83:45" pos:end="83:45">s</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:49">gb</name></name></expr></argument>, <argument pos:start="83:52" pos:end="83:54"><expr pos:start="83:52" pos:end="83:54"><name pos:start="83:52" pos:end="83:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="87:21" pos:end="87:38"><expr pos:start="87:21" pos:end="87:37"><operator pos:start="87:21" pos:end="87:21">*</operator><name pos:start="87:22" pos:end="87:27">EOBRUN</name> <operator pos:start="87:29" pos:end="87:29">=</operator> <name pos:start="87:31" pos:end="87:33">run</name> <operator pos:start="87:35" pos:end="87:35">-</operator> <literal type="number" pos:start="87:37" pos:end="87:37">1</literal></expr>;</expr_stmt>

                    <break pos:start="89:21" pos:end="89:26">break;</break>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="99:9" pos:end="101:26"><if pos:start="99:9" pos:end="101:26">if<condition pos:start="99:11" pos:end="99:25">(<expr pos:start="99:12" pos:end="99:24"><name pos:start="99:12" pos:end="99:12">i</name> <operator pos:start="99:14" pos:end="99:14">&gt;</operator> <operator pos:start="99:16" pos:end="99:16">*</operator><name pos:start="99:17" pos:end="99:24">last_nnz</name></expr>)</condition><block type="pseudo" pos:start="101:13" pos:end="101:26"><block_content pos:start="101:13" pos:end="101:26">

            <expr_stmt pos:start="101:13" pos:end="101:26"><expr pos:start="101:13" pos:end="101:25"><operator pos:start="101:13" pos:end="101:13">*</operator><name pos:start="101:14" pos:end="101:21">last_nnz</name> <operator pos:start="101:23" pos:end="101:23">=</operator> <name pos:start="101:25" pos:end="101:25">i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="107:5" pos:end="115:5">for<control pos:start="107:8" pos:end="107:21">(<init pos:start="107:9" pos:end="107:9">;</init><condition pos:start="107:10" pos:end="107:17"><expr pos:start="107:10" pos:end="107:16"><name pos:start="107:10" pos:end="107:10">i</name><operator pos:start="107:11" pos:end="107:12">&lt;=</operator><name pos:start="107:13" pos:end="107:16">last</name></expr>;</condition><incr pos:start="107:18" pos:end="107:20"><expr pos:start="107:18" pos:end="107:20"><name pos:start="107:18" pos:end="107:18">i</name><operator pos:start="107:19" pos:end="107:20">++</operator></expr></incr>)</control> <block pos:start="107:23" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:25">

        <expr_stmt pos:start="109:9" pos:end="109:39"><expr pos:start="109:9" pos:end="109:38"><name pos:start="109:9" pos:end="109:9">j</name> <operator pos:start="109:11" pos:end="109:11">=</operator> <name pos:start="109:13" pos:end="109:38"><name pos:start="109:13" pos:end="109:13">s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:24">scantable</name><operator pos:start="109:25" pos:end="109:25">.</operator><name pos:start="109:26" pos:end="109:35">permutated</name><index pos:start="109:36" pos:end="109:38">[<expr pos:start="109:37" pos:end="109:37"><name pos:start="109:37" pos:end="109:37">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="113:25"><if pos:start="111:9" pos:end="113:25">if<condition pos:start="111:11" pos:end="111:20">(<expr pos:start="111:12" pos:end="111:19"><name pos:start="111:12" pos:end="111:19"><name pos:start="111:12" pos:end="111:16">block</name><index pos:start="111:17" pos:end="111:19">[<expr pos:start="111:18" pos:end="111:18"><name pos:start="111:18" pos:end="111:18">j</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:25"><block_content pos:start="113:13" pos:end="113:25">

            <macro pos:start="113:13" pos:end="113:25"><name pos:start="113:13" pos:end="113:22">REFINE_BIT</name><argument_list pos:start="113:23" pos:end="113:25">(<argument pos:start="113:24" pos:end="113:24">j</argument>)</argument_list></macro></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="117:5" pos:end="117:29"><expr pos:start="117:5" pos:end="117:28"><call pos:start="117:5" pos:end="117:28"><name pos:start="117:5" pos:end="117:16">CLOSE_READER</name><argument_list pos:start="117:17" pos:end="117:28">(<argument pos:start="117:18" pos:end="117:19"><expr pos:start="117:18" pos:end="117:19"><name pos:start="117:18" pos:end="117:19">re</name></expr></argument>, <argument pos:start="117:22" pos:end="117:27"><expr pos:start="117:22" pos:end="117:27"><operator pos:start="117:22" pos:end="117:22">&amp;</operator><name pos:start="117:23" pos:end="117:27"><name pos:start="117:23" pos:end="117:23">s</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
