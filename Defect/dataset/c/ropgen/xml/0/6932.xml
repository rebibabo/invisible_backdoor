<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6932.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">net_init_socket</name><parameter_list pos:start="1:20" pos:end="7:36">(<parameter pos:start="1:21" pos:end="1:34"><decl pos:start="1:21" pos:end="1:34"><type pos:start="1:21" pos:end="1:34"><name pos:start="1:21" pos:end="1:28">QemuOpts</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:34">opts</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:32"><decl pos:start="3:21" pos:end="3:32"><type pos:start="3:21" pos:end="3:32"><name pos:start="3:21" pos:end="3:27">Monitor</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:32">mon</name></decl></parameter>,

                    <parameter pos:start="5:21" pos:end="5:36"><decl pos:start="5:21" pos:end="5:36"><type pos:start="5:21" pos:end="5:36"><specifier pos:start="5:21" pos:end="5:25">const</specifier> <name pos:start="5:27" pos:end="5:30">char</name> <modifier pos:start="5:32" pos:end="5:32">*</modifier></type><name pos:start="5:33" pos:end="5:36">name</name></decl></parameter>,

                    <parameter pos:start="7:21" pos:end="7:35"><decl pos:start="7:21" pos:end="7:35"><type pos:start="7:21" pos:end="7:35"><name pos:start="7:21" pos:end="7:29">VLANState</name> <modifier pos:start="7:31" pos:end="7:31">*</modifier></type><name pos:start="7:32" pos:end="7:35">vlan</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="159:1">{<block_content pos:start="11:5" pos:end="157:13">

    <if_stmt pos:start="11:5" pos:end="145:5"><if pos:start="11:5" pos:end="49:5">if <condition pos:start="11:8" pos:end="11:33">(<expr pos:start="11:9" pos:end="11:32"><call pos:start="11:9" pos:end="11:32"><name pos:start="11:9" pos:end="11:20">qemu_opt_get</name><argument_list pos:start="11:21" pos:end="11:32">(<argument pos:start="11:22" pos:end="11:25"><expr pos:start="11:22" pos:end="11:25"><name pos:start="11:22" pos:end="11:25">opts</name></expr></argument>, <argument pos:start="11:28" pos:end="11:31"><expr pos:start="11:28" pos:end="11:31"><literal type="string" pos:start="11:28" pos:end="11:31">"fd"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:35" pos:end="49:5">{<block_content pos:start="13:9" pos:end="47:9">

        <decl_stmt pos:start="13:9" pos:end="13:15"><decl pos:start="13:9" pos:end="13:14"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:14">fd</name></decl>;</decl_stmt>



        <if_stmt pos:start="17:9" pos:end="27:9"><if pos:start="17:9" pos:end="27:9">if <condition pos:start="17:12" pos:end="21:40">(<expr pos:start="17:13" pos:end="21:39"><call pos:start="17:13" pos:end="17:40"><name pos:start="17:13" pos:end="17:24">qemu_opt_get</name><argument_list pos:start="17:25" pos:end="17:40">(<argument pos:start="17:26" pos:end="17:29"><expr pos:start="17:26" pos:end="17:29"><name pos:start="17:26" pos:end="17:29">opts</name></expr></argument>, <argument pos:start="17:32" pos:end="17:39"><expr pos:start="17:32" pos:end="17:39"><literal type="string" pos:start="17:32" pos:end="17:39">"listen"</literal></expr></argument>)</argument_list></call> <operator pos:start="17:42" pos:end="17:43">||</operator>

            <call pos:start="19:13" pos:end="19:41"><name pos:start="19:13" pos:end="19:24">qemu_opt_get</name><argument_list pos:start="19:25" pos:end="19:41">(<argument pos:start="19:26" pos:end="19:29"><expr pos:start="19:26" pos:end="19:29"><name pos:start="19:26" pos:end="19:29">opts</name></expr></argument>, <argument pos:start="19:32" pos:end="19:40"><expr pos:start="19:32" pos:end="19:40"><literal type="string" pos:start="19:32" pos:end="19:40">"connect"</literal></expr></argument>)</argument_list></call> <operator pos:start="19:43" pos:end="19:44">||</operator>

            <call pos:start="21:13" pos:end="21:39"><name pos:start="21:13" pos:end="21:24">qemu_opt_get</name><argument_list pos:start="21:25" pos:end="21:39">(<argument pos:start="21:26" pos:end="21:29"><expr pos:start="21:26" pos:end="21:29"><name pos:start="21:26" pos:end="21:29">opts</name></expr></argument>, <argument pos:start="21:32" pos:end="21:38"><expr pos:start="21:32" pos:end="21:38"><literal type="string" pos:start="21:32" pos:end="21:38">"mcast"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:42" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:22">

            <expr_stmt pos:start="23:13" pos:end="23:77"><expr pos:start="23:13" pos:end="23:76"><call pos:start="23:13" pos:end="23:76"><name pos:start="23:13" pos:end="23:22">qemu_error</name><argument_list pos:start="23:23" pos:end="23:76">(<argument pos:start="23:24" pos:end="23:75"><expr pos:start="23:24" pos:end="23:75"><literal type="string" pos:start="23:24" pos:end="23:75">"listen=, connect= and mcast= is invalid with fd=\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="25:13" pos:end="25:22">return <expr pos:start="25:20" pos:end="25:21"><operator pos:start="25:20" pos:end="25:20">-</operator><literal type="number" pos:start="25:21" pos:end="25:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:64"><expr pos:start="31:9" pos:end="31:63"><name pos:start="31:9" pos:end="31:10">fd</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:63"><name pos:start="31:14" pos:end="31:32">net_handle_fd_param</name><argument_list pos:start="31:33" pos:end="31:63">(<argument pos:start="31:34" pos:end="31:36"><expr pos:start="31:34" pos:end="31:36"><name pos:start="31:34" pos:end="31:36">mon</name></expr></argument>, <argument pos:start="31:39" pos:end="31:62"><expr pos:start="31:39" pos:end="31:62"><call pos:start="31:39" pos:end="31:62"><name pos:start="31:39" pos:end="31:50">qemu_opt_get</name><argument_list pos:start="31:51" pos:end="31:62">(<argument pos:start="31:52" pos:end="31:55"><expr pos:start="31:52" pos:end="31:55"><name pos:start="31:52" pos:end="31:55">opts</name></expr></argument>, <argument pos:start="31:58" pos:end="31:61"><expr pos:start="31:58" pos:end="31:61"><literal type="string" pos:start="31:58" pos:end="31:61">"fd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:21">(<expr pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:14">fd</name> <operator pos:start="33:16" pos:end="33:17">==</operator> <operator pos:start="33:19" pos:end="33:19">-</operator><literal type="number" pos:start="33:20" pos:end="33:20">1</literal></expr>)</condition> <block pos:start="33:23" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:22">

            <return pos:start="35:13" pos:end="35:22">return <expr pos:start="35:20" pos:end="35:21"><operator pos:start="35:20" pos:end="35:20">-</operator><literal type="number" pos:start="35:21" pos:end="35:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:61">(<expr pos:start="41:13" pos:end="41:60"><operator pos:start="41:13" pos:end="41:13">!</operator><call pos:start="41:14" pos:end="41:60"><name pos:start="41:14" pos:end="41:31">net_socket_fd_init</name><argument_list pos:start="41:32" pos:end="41:60">(<argument pos:start="41:33" pos:end="41:36"><expr pos:start="41:33" pos:end="41:36"><name pos:start="41:33" pos:end="41:36">vlan</name></expr></argument>, <argument pos:start="41:39" pos:end="41:46"><expr pos:start="41:39" pos:end="41:46"><literal type="string" pos:start="41:39" pos:end="41:46">"socket"</literal></expr></argument>, <argument pos:start="41:49" pos:end="41:52"><expr pos:start="41:49" pos:end="41:52"><name pos:start="41:49" pos:end="41:52">name</name></expr></argument>, <argument pos:start="41:55" pos:end="41:56"><expr pos:start="41:55" pos:end="41:56"><name pos:start="41:55" pos:end="41:56">fd</name></expr></argument>, <argument pos:start="41:59" pos:end="41:59"><expr pos:start="41:59" pos:end="41:59"><literal type="number" pos:start="41:59" pos:end="41:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:63" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:22">

            <expr_stmt pos:start="43:13" pos:end="43:22"><expr pos:start="43:13" pos:end="43:21"><call pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:17">close</name><argument_list pos:start="43:18" pos:end="43:21">(<argument pos:start="43:19" pos:end="43:20"><expr pos:start="43:19" pos:end="43:20"><name pos:start="43:19" pos:end="43:20">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:22">return <expr pos:start="45:20" pos:end="45:21"><operator pos:start="45:20" pos:end="45:20">-</operator><literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="49:7" pos:end="79:5">else if <condition pos:start="49:15" pos:end="49:44">(<expr pos:start="49:16" pos:end="49:43"><call pos:start="49:16" pos:end="49:43"><name pos:start="49:16" pos:end="49:27">qemu_opt_get</name><argument_list pos:start="49:28" pos:end="49:43">(<argument pos:start="49:29" pos:end="49:32"><expr pos:start="49:29" pos:end="49:32"><name pos:start="49:29" pos:end="49:32">opts</name></expr></argument>, <argument pos:start="49:35" pos:end="49:42"><expr pos:start="49:35" pos:end="49:42"><literal type="string" pos:start="49:35" pos:end="49:42">"listen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:46" pos:end="79:5">{<block_content pos:start="51:9" pos:end="77:9">

        <decl_stmt pos:start="51:9" pos:end="51:27"><decl pos:start="51:9" pos:end="51:26"><type pos:start="51:9" pos:end="51:20"><specifier pos:start="51:9" pos:end="51:13">const</specifier> <name pos:start="51:15" pos:end="51:18">char</name> <modifier pos:start="51:20" pos:end="51:20">*</modifier></type><name pos:start="51:21" pos:end="51:26">listen</name></decl>;</decl_stmt>



        <if_stmt pos:start="55:9" pos:end="65:9"><if pos:start="55:9" pos:end="65:9">if <condition pos:start="55:12" pos:end="59:40">(<expr pos:start="55:13" pos:end="59:39"><call pos:start="55:13" pos:end="55:36"><name pos:start="55:13" pos:end="55:24">qemu_opt_get</name><argument_list pos:start="55:25" pos:end="55:36">(<argument pos:start="55:26" pos:end="55:29"><expr pos:start="55:26" pos:end="55:29"><name pos:start="55:26" pos:end="55:29">opts</name></expr></argument>, <argument pos:start="55:32" pos:end="55:35"><expr pos:start="55:32" pos:end="55:35"><literal type="string" pos:start="55:32" pos:end="55:35">"fd"</literal></expr></argument>)</argument_list></call> <operator pos:start="55:38" pos:end="55:39">||</operator>

            <call pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:24">qemu_opt_get</name><argument_list pos:start="57:25" pos:end="57:41">(<argument pos:start="57:26" pos:end="57:29"><expr pos:start="57:26" pos:end="57:29"><name pos:start="57:26" pos:end="57:29">opts</name></expr></argument>, <argument pos:start="57:32" pos:end="57:40"><expr pos:start="57:32" pos:end="57:40"><literal type="string" pos:start="57:32" pos:end="57:40">"connect"</literal></expr></argument>)</argument_list></call> <operator pos:start="57:43" pos:end="57:44">||</operator>

            <call pos:start="59:13" pos:end="59:39"><name pos:start="59:13" pos:end="59:24">qemu_opt_get</name><argument_list pos:start="59:25" pos:end="59:39">(<argument pos:start="59:26" pos:end="59:29"><expr pos:start="59:26" pos:end="59:29"><name pos:start="59:26" pos:end="59:29">opts</name></expr></argument>, <argument pos:start="59:32" pos:end="59:38"><expr pos:start="59:32" pos:end="59:38"><literal type="string" pos:start="59:32" pos:end="59:38">"mcast"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:42" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:22">

            <expr_stmt pos:start="61:13" pos:end="61:77"><expr pos:start="61:13" pos:end="61:76"><call pos:start="61:13" pos:end="61:76"><name pos:start="61:13" pos:end="61:22">qemu_error</name><argument_list pos:start="61:23" pos:end="61:76">(<argument pos:start="61:24" pos:end="61:75"><expr pos:start="61:24" pos:end="61:75"><literal type="string" pos:start="61:24" pos:end="61:75">"fd=, connect= and mcast= is invalid with listen=\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="63:13" pos:end="63:22">return <expr pos:start="63:20" pos:end="63:21"><operator pos:start="63:20" pos:end="63:20">-</operator><literal type="number" pos:start="63:21" pos:end="63:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:46"><expr pos:start="69:9" pos:end="69:45"><name pos:start="69:9" pos:end="69:14">listen</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <call pos:start="69:18" pos:end="69:45"><name pos:start="69:18" pos:end="69:29">qemu_opt_get</name><argument_list pos:start="69:30" pos:end="69:45">(<argument pos:start="69:31" pos:end="69:34"><expr pos:start="69:31" pos:end="69:34"><name pos:start="69:31" pos:end="69:34">opts</name></expr></argument>, <argument pos:start="69:37" pos:end="69:44"><expr pos:start="69:37" pos:end="69:44"><literal type="string" pos:start="69:37" pos:end="69:44">"listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:71">(<expr pos:start="73:13" pos:end="73:70"><call pos:start="73:13" pos:end="73:64"><name pos:start="73:13" pos:end="73:34">net_socket_listen_init</name><argument_list pos:start="73:35" pos:end="73:64">(<argument pos:start="73:36" pos:end="73:39"><expr pos:start="73:36" pos:end="73:39"><name pos:start="73:36" pos:end="73:39">vlan</name></expr></argument>, <argument pos:start="73:42" pos:end="73:49"><expr pos:start="73:42" pos:end="73:49"><literal type="string" pos:start="73:42" pos:end="73:49">"socket"</literal></expr></argument>, <argument pos:start="73:52" pos:end="73:55"><expr pos:start="73:52" pos:end="73:55"><name pos:start="73:52" pos:end="73:55">name</name></expr></argument>, <argument pos:start="73:58" pos:end="73:63"><expr pos:start="73:58" pos:end="73:63"><name pos:start="73:58" pos:end="73:63">listen</name></expr></argument>)</argument_list></call> <operator pos:start="73:66" pos:end="73:67">==</operator> <operator pos:start="73:69" pos:end="73:69">-</operator><literal type="number" pos:start="73:70" pos:end="73:70">1</literal></expr>)</condition> <block pos:start="73:73" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:22">

            <return pos:start="75:13" pos:end="75:22">return <expr pos:start="75:20" pos:end="75:21"><operator pos:start="75:20" pos:end="75:20">-</operator><literal type="number" pos:start="75:21" pos:end="75:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="79:7" pos:end="109:5">else if <condition pos:start="79:15" pos:end="79:45">(<expr pos:start="79:16" pos:end="79:44"><call pos:start="79:16" pos:end="79:44"><name pos:start="79:16" pos:end="79:27">qemu_opt_get</name><argument_list pos:start="79:28" pos:end="79:44">(<argument pos:start="79:29" pos:end="79:32"><expr pos:start="79:29" pos:end="79:32"><name pos:start="79:29" pos:end="79:32">opts</name></expr></argument>, <argument pos:start="79:35" pos:end="79:43"><expr pos:start="79:35" pos:end="79:43"><literal type="string" pos:start="79:35" pos:end="79:43">"connect"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:47" pos:end="109:5">{<block_content pos:start="81:9" pos:end="107:9">

        <decl_stmt pos:start="81:9" pos:end="81:28"><decl pos:start="81:9" pos:end="81:27"><type pos:start="81:9" pos:end="81:20"><specifier pos:start="81:9" pos:end="81:13">const</specifier> <name pos:start="81:15" pos:end="81:18">char</name> <modifier pos:start="81:20" pos:end="81:20">*</modifier></type><name pos:start="81:21" pos:end="81:27">connect</name></decl>;</decl_stmt>



        <if_stmt pos:start="85:9" pos:end="95:9"><if pos:start="85:9" pos:end="95:9">if <condition pos:start="85:12" pos:end="89:40">(<expr pos:start="85:13" pos:end="89:39"><call pos:start="85:13" pos:end="85:36"><name pos:start="85:13" pos:end="85:24">qemu_opt_get</name><argument_list pos:start="85:25" pos:end="85:36">(<argument pos:start="85:26" pos:end="85:29"><expr pos:start="85:26" pos:end="85:29"><name pos:start="85:26" pos:end="85:29">opts</name></expr></argument>, <argument pos:start="85:32" pos:end="85:35"><expr pos:start="85:32" pos:end="85:35"><literal type="string" pos:start="85:32" pos:end="85:35">"fd"</literal></expr></argument>)</argument_list></call> <operator pos:start="85:38" pos:end="85:39">||</operator>

            <call pos:start="87:13" pos:end="87:40"><name pos:start="87:13" pos:end="87:24">qemu_opt_get</name><argument_list pos:start="87:25" pos:end="87:40">(<argument pos:start="87:26" pos:end="87:29"><expr pos:start="87:26" pos:end="87:29"><name pos:start="87:26" pos:end="87:29">opts</name></expr></argument>, <argument pos:start="87:32" pos:end="87:39"><expr pos:start="87:32" pos:end="87:39"><literal type="string" pos:start="87:32" pos:end="87:39">"listen"</literal></expr></argument>)</argument_list></call> <operator pos:start="87:42" pos:end="87:43">||</operator>

            <call pos:start="89:13" pos:end="89:39"><name pos:start="89:13" pos:end="89:24">qemu_opt_get</name><argument_list pos:start="89:25" pos:end="89:39">(<argument pos:start="89:26" pos:end="89:29"><expr pos:start="89:26" pos:end="89:29"><name pos:start="89:26" pos:end="89:29">opts</name></expr></argument>, <argument pos:start="89:32" pos:end="89:38"><expr pos:start="89:32" pos:end="89:38"><literal type="string" pos:start="89:32" pos:end="89:38">"mcast"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:42" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:22">

            <expr_stmt pos:start="91:13" pos:end="91:77"><expr pos:start="91:13" pos:end="91:76"><call pos:start="91:13" pos:end="91:76"><name pos:start="91:13" pos:end="91:22">qemu_error</name><argument_list pos:start="91:23" pos:end="91:76">(<argument pos:start="91:24" pos:end="91:75"><expr pos:start="91:24" pos:end="91:75"><literal type="string" pos:start="91:24" pos:end="91:75">"fd=, listen= and mcast= is invalid with connect=\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:22">return <expr pos:start="93:20" pos:end="93:21"><operator pos:start="93:20" pos:end="93:20">-</operator><literal type="number" pos:start="93:21" pos:end="93:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:48"><expr pos:start="99:9" pos:end="99:47"><name pos:start="99:9" pos:end="99:15">connect</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:47"><name pos:start="99:19" pos:end="99:30">qemu_opt_get</name><argument_list pos:start="99:31" pos:end="99:47">(<argument pos:start="99:32" pos:end="99:35"><expr pos:start="99:32" pos:end="99:35"><name pos:start="99:32" pos:end="99:35">opts</name></expr></argument>, <argument pos:start="99:38" pos:end="99:46"><expr pos:start="99:38" pos:end="99:46"><literal type="string" pos:start="99:38" pos:end="99:46">"connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:73">(<expr pos:start="103:13" pos:end="103:72"><call pos:start="103:13" pos:end="103:66"><name pos:start="103:13" pos:end="103:35">net_socket_connect_init</name><argument_list pos:start="103:36" pos:end="103:66">(<argument pos:start="103:37" pos:end="103:40"><expr pos:start="103:37" pos:end="103:40"><name pos:start="103:37" pos:end="103:40">vlan</name></expr></argument>, <argument pos:start="103:43" pos:end="103:50"><expr pos:start="103:43" pos:end="103:50"><literal type="string" pos:start="103:43" pos:end="103:50">"socket"</literal></expr></argument>, <argument pos:start="103:53" pos:end="103:56"><expr pos:start="103:53" pos:end="103:56"><name pos:start="103:53" pos:end="103:56">name</name></expr></argument>, <argument pos:start="103:59" pos:end="103:65"><expr pos:start="103:59" pos:end="103:65"><name pos:start="103:59" pos:end="103:65">connect</name></expr></argument>)</argument_list></call> <operator pos:start="103:68" pos:end="103:69">==</operator> <operator pos:start="103:71" pos:end="103:71">-</operator><literal type="number" pos:start="103:72" pos:end="103:72">1</literal></expr>)</condition> <block pos:start="103:75" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:22">

            <return pos:start="105:13" pos:end="105:22">return <expr pos:start="105:20" pos:end="105:21"><operator pos:start="105:20" pos:end="105:20">-</operator><literal type="number" pos:start="105:21" pos:end="105:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="109:7" pos:end="139:5">else if <condition pos:start="109:15" pos:end="109:43">(<expr pos:start="109:16" pos:end="109:42"><call pos:start="109:16" pos:end="109:42"><name pos:start="109:16" pos:end="109:27">qemu_opt_get</name><argument_list pos:start="109:28" pos:end="109:42">(<argument pos:start="109:29" pos:end="109:32"><expr pos:start="109:29" pos:end="109:32"><name pos:start="109:29" pos:end="109:32">opts</name></expr></argument>, <argument pos:start="109:35" pos:end="109:41"><expr pos:start="109:35" pos:end="109:41"><literal type="string" pos:start="109:35" pos:end="109:41">"mcast"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:45" pos:end="139:5">{<block_content pos:start="111:9" pos:end="137:9">

        <decl_stmt pos:start="111:9" pos:end="111:26"><decl pos:start="111:9" pos:end="111:25"><type pos:start="111:9" pos:end="111:20"><specifier pos:start="111:9" pos:end="111:13">const</specifier> <name pos:start="111:15" pos:end="111:18">char</name> <modifier pos:start="111:20" pos:end="111:20">*</modifier></type><name pos:start="111:21" pos:end="111:25">mcast</name></decl>;</decl_stmt>



        <if_stmt pos:start="115:9" pos:end="125:9"><if pos:start="115:9" pos:end="125:9">if <condition pos:start="115:12" pos:end="119:41">(<expr pos:start="115:13" pos:end="119:40"><call pos:start="115:13" pos:end="115:36"><name pos:start="115:13" pos:end="115:24">qemu_opt_get</name><argument_list pos:start="115:25" pos:end="115:36">(<argument pos:start="115:26" pos:end="115:29"><expr pos:start="115:26" pos:end="115:29"><name pos:start="115:26" pos:end="115:29">opts</name></expr></argument>, <argument pos:start="115:32" pos:end="115:35"><expr pos:start="115:32" pos:end="115:35"><literal type="string" pos:start="115:32" pos:end="115:35">"fd"</literal></expr></argument>)</argument_list></call> <operator pos:start="115:38" pos:end="115:39">||</operator>

            <call pos:start="117:13" pos:end="117:41"><name pos:start="117:13" pos:end="117:24">qemu_opt_get</name><argument_list pos:start="117:25" pos:end="117:41">(<argument pos:start="117:26" pos:end="117:29"><expr pos:start="117:26" pos:end="117:29"><name pos:start="117:26" pos:end="117:29">opts</name></expr></argument>, <argument pos:start="117:32" pos:end="117:40"><expr pos:start="117:32" pos:end="117:40"><literal type="string" pos:start="117:32" pos:end="117:40">"connect"</literal></expr></argument>)</argument_list></call> <operator pos:start="117:43" pos:end="117:44">||</operator>

            <call pos:start="119:13" pos:end="119:40"><name pos:start="119:13" pos:end="119:24">qemu_opt_get</name><argument_list pos:start="119:25" pos:end="119:40">(<argument pos:start="119:26" pos:end="119:29"><expr pos:start="119:26" pos:end="119:29"><name pos:start="119:26" pos:end="119:29">opts</name></expr></argument>, <argument pos:start="119:32" pos:end="119:39"><expr pos:start="119:32" pos:end="119:39"><literal type="string" pos:start="119:32" pos:end="119:39">"listen"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:43" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:22">

            <expr_stmt pos:start="121:13" pos:end="121:77"><expr pos:start="121:13" pos:end="121:76"><call pos:start="121:13" pos:end="121:76"><name pos:start="121:13" pos:end="121:22">qemu_error</name><argument_list pos:start="121:23" pos:end="121:76">(<argument pos:start="121:24" pos:end="121:75"><expr pos:start="121:24" pos:end="121:75"><literal type="string" pos:start="121:24" pos:end="121:75">"fd=, connect= and listen= is invalid with mcast=\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:22">return <expr pos:start="123:20" pos:end="123:21"><operator pos:start="123:20" pos:end="123:20">-</operator><literal type="number" pos:start="123:21" pos:end="123:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:44"><expr pos:start="129:9" pos:end="129:43"><name pos:start="129:9" pos:end="129:13">mcast</name> <operator pos:start="129:15" pos:end="129:15">=</operator> <call pos:start="129:17" pos:end="129:43"><name pos:start="129:17" pos:end="129:28">qemu_opt_get</name><argument_list pos:start="129:29" pos:end="129:43">(<argument pos:start="129:30" pos:end="129:33"><expr pos:start="129:30" pos:end="129:33"><name pos:start="129:30" pos:end="129:33">opts</name></expr></argument>, <argument pos:start="129:36" pos:end="129:42"><expr pos:start="129:36" pos:end="129:42"><literal type="string" pos:start="129:36" pos:end="129:42">"mcast"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="133:9" pos:end="137:9"><if pos:start="133:9" pos:end="137:9">if <condition pos:start="133:12" pos:end="133:69">(<expr pos:start="133:13" pos:end="133:68"><call pos:start="133:13" pos:end="133:62"><name pos:start="133:13" pos:end="133:33">net_socket_mcast_init</name><argument_list pos:start="133:34" pos:end="133:62">(<argument pos:start="133:35" pos:end="133:38"><expr pos:start="133:35" pos:end="133:38"><name pos:start="133:35" pos:end="133:38">vlan</name></expr></argument>, <argument pos:start="133:41" pos:end="133:48"><expr pos:start="133:41" pos:end="133:48"><literal type="string" pos:start="133:41" pos:end="133:48">"socket"</literal></expr></argument>, <argument pos:start="133:51" pos:end="133:54"><expr pos:start="133:51" pos:end="133:54"><name pos:start="133:51" pos:end="133:54">name</name></expr></argument>, <argument pos:start="133:57" pos:end="133:61"><expr pos:start="133:57" pos:end="133:61"><name pos:start="133:57" pos:end="133:61">mcast</name></expr></argument>)</argument_list></call> <operator pos:start="133:64" pos:end="133:65">==</operator> <operator pos:start="133:67" pos:end="133:67">-</operator><literal type="number" pos:start="133:68" pos:end="133:68">1</literal></expr>)</condition> <block pos:start="133:71" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:22">

            <return pos:start="135:13" pos:end="135:22">return <expr pos:start="135:20" pos:end="135:21"><operator pos:start="135:20" pos:end="135:20">-</operator><literal type="number" pos:start="135:21" pos:end="135:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="139:7" pos:end="145:5">else <block pos:start="139:12" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:18">

        <expr_stmt pos:start="141:9" pos:end="141:74"><expr pos:start="141:9" pos:end="141:73"><call pos:start="141:9" pos:end="141:73"><name pos:start="141:9" pos:end="141:18">qemu_error</name><argument_list pos:start="141:19" pos:end="141:73">(<argument pos:start="141:20" pos:end="141:72"><expr pos:start="141:20" pos:end="141:72"><literal type="string" pos:start="141:20" pos:end="141:72">"-socket requires fd=, listen=, connect= or mcast=\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:18">return <expr pos:start="143:16" pos:end="143:17"><operator pos:start="143:16" pos:end="143:16">-</operator><literal type="number" pos:start="143:17" pos:end="143:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:13">(<expr pos:start="149:9" pos:end="149:12"><name pos:start="149:9" pos:end="149:12">vlan</name></expr>)</condition> <block pos:start="149:15" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:29">

        <expr_stmt pos:start="151:9" pos:end="151:29"><expr pos:start="151:9" pos:end="151:28"><name pos:start="151:9" pos:end="151:26"><name pos:start="151:9" pos:end="151:12">vlan</name><operator pos:start="151:13" pos:end="151:14">-&gt;</operator><name pos:start="151:15" pos:end="151:26">nb_host_devs</name></name><operator pos:start="151:27" pos:end="151:28">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="157:5" pos:end="157:13">return <expr pos:start="157:12" pos:end="157:12"><literal type="number" pos:start="157:12" pos:end="157:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
