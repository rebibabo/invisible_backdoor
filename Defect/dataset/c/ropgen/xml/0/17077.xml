<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17077.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">inet_connect_opts</name><parameter_list pos:start="1:22" pos:end="3:72">(<parameter pos:start="1:23" pos:end="1:36"><decl pos:start="1:23" pos:end="1:36"><type pos:start="1:23" pos:end="1:36"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">opts</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:43">Error</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier><modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">errp</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:57"><decl pos:start="3:23" pos:end="3:57"><type pos:start="3:23" pos:end="3:57"><name pos:start="3:23" pos:end="3:47">NonBlockingConnectHandler</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:57">callback</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:71"><decl pos:start="3:60" pos:end="3:71"><type pos:start="3:60" pos:end="3:71"><name pos:start="3:60" pos:end="3:63">void</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:71">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="83:16">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:19">addrinfo</name></name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:24">res</name></decl>, <decl pos:start="7:27" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:21"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:28">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">sock</name> <init pos:start="9:14" pos:end="9:17">= <expr pos:start="9:16" pos:end="9:17"><operator pos:start="9:16" pos:end="9:16">-</operator><literal type="number" pos:start="9:17" pos:end="9:17">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:20">in_progress</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:38"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">ConnectState</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:31">connect_state</name> <init pos:start="13:33" pos:end="13:38">= <expr pos:start="13:35" pos:end="13:38"><name pos:start="13:35" pos:end="13:38">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:46"><expr pos:start="17:5" pos:end="17:45"><name pos:start="17:5" pos:end="17:7">res</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:45"><name pos:start="17:11" pos:end="17:33">inet_parse_connect_opts</name><argument_list pos:start="17:34" pos:end="17:45">(<argument pos:start="17:35" pos:end="17:38"><expr pos:start="17:35" pos:end="17:38"><name pos:start="17:35" pos:end="17:38">opts</name></expr></argument>, <argument pos:start="17:41" pos:end="17:44"><expr pos:start="17:41" pos:end="17:44"><name pos:start="17:41" pos:end="17:44">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:13">(<expr pos:start="19:9" pos:end="19:12"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:12">res</name></expr>)</condition> <block pos:start="19:15" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:18">

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:25">(<expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:16">callback</name> <operator pos:start="27:18" pos:end="27:19">!=</operator> <name pos:start="27:21" pos:end="27:24">NULL</name></expr>)</condition> <block pos:start="27:27" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:39">

        <expr_stmt pos:start="29:9" pos:end="29:58"><expr pos:start="29:9" pos:end="29:57"><name pos:start="29:9" pos:end="29:21">connect_state</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <call pos:start="29:25" pos:end="29:57"><name pos:start="29:25" pos:end="29:33">g_malloc0</name><argument_list pos:start="29:34" pos:end="29:57">(<argument pos:start="29:35" pos:end="29:56"><expr pos:start="29:35" pos:end="29:56"><sizeof pos:start="29:35" pos:end="29:56">sizeof<argument_list pos:start="29:41" pos:end="29:56">(<argument pos:start="29:42" pos:end="29:55"><expr pos:start="29:42" pos:end="29:55"><operator pos:start="29:42" pos:end="29:42">*</operator><name pos:start="29:43" pos:end="29:55">connect_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:21">connect_state</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:32">addr_list</name></name> <operator pos:start="31:34" pos:end="31:34">=</operator> <name pos:start="31:36" pos:end="31:38">res</name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:43"><expr pos:start="33:9" pos:end="33:42"><name pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:21">connect_state</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:31">callback</name></name> <operator pos:start="33:33" pos:end="33:33">=</operator> <name pos:start="33:35" pos:end="33:42">callback</name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:39"><expr pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:21">connect_state</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:29">opaque</name></name> <operator pos:start="35:31" pos:end="35:31">=</operator> <name pos:start="35:33" pos:end="35:38">opaque</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="41:5" pos:end="77:5">for <control pos:start="41:9" pos:end="41:44">(<init pos:start="41:10" pos:end="41:17"><expr pos:start="41:10" pos:end="41:16"><name pos:start="41:10" pos:end="41:10">e</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <name pos:start="41:14" pos:end="41:16">res</name></expr>;</init> <condition pos:start="41:19" pos:end="41:28"><expr pos:start="41:19" pos:end="41:27"><name pos:start="41:19" pos:end="41:19">e</name> <operator pos:start="41:21" pos:end="41:22">!=</operator> <name pos:start="41:24" pos:end="41:27">NULL</name></expr>;</condition> <incr pos:start="41:30" pos:end="41:43"><expr pos:start="41:30" pos:end="41:43"><name pos:start="41:30" pos:end="41:30">e</name> <operator pos:start="41:32" pos:end="41:32">=</operator> <name pos:start="41:34" pos:end="41:43"><name pos:start="41:34" pos:end="41:34">e</name><operator pos:start="41:35" pos:end="41:36">-&gt;</operator><name pos:start="41:37" pos:end="41:43">ai_next</name></name></expr></incr>)</control> <block pos:start="41:46" pos:end="77:5">{<block_content pos:start="43:9" pos:end="75:9">

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:31">(<expr pos:start="43:13" pos:end="43:30"><call pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:24">error_is_set</name><argument_list pos:start="43:25" pos:end="43:30">(<argument pos:start="43:26" pos:end="43:29"><expr pos:start="43:26" pos:end="43:29"><name pos:start="43:26" pos:end="43:29">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:33" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:25">

            <expr_stmt pos:start="45:13" pos:end="45:30"><expr pos:start="45:13" pos:end="45:29"><call pos:start="45:13" pos:end="45:29"><name pos:start="45:13" pos:end="45:22">error_free</name><argument_list pos:start="45:23" pos:end="45:29">(<argument pos:start="45:24" pos:end="45:28"><expr pos:start="45:24" pos:end="45:28"><operator pos:start="45:24" pos:end="45:24">*</operator><name pos:start="45:25" pos:end="45:28">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:25"><expr pos:start="47:13" pos:end="47:24"><operator pos:start="47:13" pos:end="47:13">*</operator><name pos:start="47:14" pos:end="47:17">errp</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:24">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:34">(<expr pos:start="51:13" pos:end="51:33"><name pos:start="51:13" pos:end="51:25">connect_state</name> <operator pos:start="51:27" pos:end="51:28">!=</operator> <name pos:start="51:30" pos:end="51:33">NULL</name></expr>)</condition> <block pos:start="51:36" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:44">

            <expr_stmt pos:start="53:13" pos:end="53:44"><expr pos:start="53:13" pos:end="53:43"><name pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:25">connect_state</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:39">current_addr</name></name> <operator pos:start="53:41" pos:end="53:41">=</operator> <name pos:start="53:43" pos:end="53:43">e</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:71"><expr pos:start="57:9" pos:end="57:70"><name pos:start="57:9" pos:end="57:12">sock</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <call pos:start="57:16" pos:end="57:70"><name pos:start="57:16" pos:end="57:32">inet_connect_addr</name><argument_list pos:start="57:33" pos:end="57:70">(<argument pos:start="57:34" pos:end="57:34"><expr pos:start="57:34" pos:end="57:34"><name pos:start="57:34" pos:end="57:34">e</name></expr></argument>, <argument pos:start="57:37" pos:end="57:48"><expr pos:start="57:37" pos:end="57:48"><operator pos:start="57:37" pos:end="57:37">&amp;</operator><name pos:start="57:38" pos:end="57:48">in_progress</name></expr></argument>, <argument pos:start="57:51" pos:end="57:63"><expr pos:start="57:51" pos:end="57:63"><name pos:start="57:51" pos:end="57:63">connect_state</name></expr></argument>, <argument pos:start="57:66" pos:end="57:69"><expr pos:start="57:66" pos:end="57:69"><name pos:start="57:66" pos:end="57:69">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="75:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:24">(<expr pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:23">in_progress</name></expr>)</condition> <block pos:start="59:26" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:24">

            <return pos:start="61:13" pos:end="61:24">return <expr pos:start="61:20" pos:end="61:23"><name pos:start="61:20" pos:end="61:23">sock</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="63:11" pos:end="75:9">else if <condition pos:start="63:19" pos:end="63:29">(<expr pos:start="63:20" pos:end="63:28"><name pos:start="63:20" pos:end="63:23">sock</name> <operator pos:start="63:25" pos:end="63:26">&gt;=</operator> <literal type="number" pos:start="63:28" pos:end="63:28">0</literal></expr>)</condition> <block pos:start="63:31" pos:end="75:9">{<block_content pos:start="67:13" pos:end="73:18">

            <comment type="block" pos:start="65:13" pos:end="65:70">/* non blocking socket immediate success, call callback */</comment>

            <if_stmt pos:start="67:13" pos:end="71:13"><if pos:start="67:13" pos:end="71:13">if <condition pos:start="67:16" pos:end="67:33">(<expr pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:24">callback</name> <operator pos:start="67:26" pos:end="67:27">!=</operator> <name pos:start="67:29" pos:end="67:32">NULL</name></expr>)</condition> <block pos:start="67:35" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:39">

                <expr_stmt pos:start="69:17" pos:end="69:39"><expr pos:start="69:17" pos:end="69:38"><call pos:start="69:17" pos:end="69:38"><name pos:start="69:17" pos:end="69:24">callback</name><argument_list pos:start="69:25" pos:end="69:38">(<argument pos:start="69:26" pos:end="69:29"><expr pos:start="69:26" pos:end="69:29"><name pos:start="69:26" pos:end="69:29">sock</name></expr></argument>, <argument pos:start="69:32" pos:end="69:37"><expr pos:start="69:32" pos:end="69:37"><name pos:start="69:32" pos:end="69:37">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="79:5" pos:end="79:26"><expr pos:start="79:5" pos:end="79:25"><call pos:start="79:5" pos:end="79:25"><name pos:start="79:5" pos:end="79:10">g_free</name><argument_list pos:start="79:11" pos:end="79:25">(<argument pos:start="79:12" pos:end="79:24"><expr pos:start="79:12" pos:end="79:24"><name pos:start="79:12" pos:end="79:24">connect_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:22"><expr pos:start="81:5" pos:end="81:21"><call pos:start="81:5" pos:end="81:21"><name pos:start="81:5" pos:end="81:16">freeaddrinfo</name><argument_list pos:start="81:17" pos:end="81:21">(<argument pos:start="81:18" pos:end="81:20"><expr pos:start="81:18" pos:end="81:20"><name pos:start="81:18" pos:end="81:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="83:5" pos:end="83:16">return <expr pos:start="83:12" pos:end="83:15"><name pos:start="83:12" pos:end="83:15">sock</name></expr>;</return>

</block_content>}</block></function>
</unit>
