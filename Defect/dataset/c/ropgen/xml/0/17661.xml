<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17661.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:44">bdrv_aligned_pwritev</name><parameter_list pos:start="1:45" pos:end="5:34">(<parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><name pos:start="1:46" pos:end="1:61">BlockDriverState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:27"><decl pos:start="3:5" pos:end="3:27"><type pos:start="3:5" pos:end="3:27"><name pos:start="3:5" pos:end="3:22">BdrvTrackedRequest</name> <modifier pos:start="3:24" pos:end="3:24">*</modifier></type><name pos:start="3:25" pos:end="3:27">req</name></decl></parameter>, <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:36">int64_t</name></type> <name pos:start="3:38" pos:end="3:43">offset</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:63"><decl pos:start="3:46" pos:end="3:63"><type pos:start="3:46" pos:end="3:63"><name pos:start="3:46" pos:end="3:53">unsigned</name> <name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:63">bytes</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:16">QEMUIOVector</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:22">qiov</name></decl></parameter>, <parameter pos:start="5:25" pos:end="5:33"><decl pos:start="5:25" pos:end="5:33"><type pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:33">flags</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="83:1">{<block_content pos:start="9:5" pos:end="81:15">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">BlockDriver</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">drv</name> <init pos:start="9:22" pos:end="9:30">= <expr pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:30"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:22">sector_num</name> <init pos:start="15:24" pos:end="15:51">= <expr pos:start="15:26" pos:end="15:51"><name pos:start="15:26" pos:end="15:31">offset</name> <operator pos:start="15:33" pos:end="15:34">&gt;&gt;</operator> <name pos:start="15:36" pos:end="15:51">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:56"><decl pos:start="17:5" pos:end="17:55"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:27">nb_sectors</name> <init pos:start="17:29" pos:end="17:55">= <expr pos:start="17:31" pos:end="17:55"><name pos:start="17:31" pos:end="17:35">bytes</name> <operator pos:start="17:37" pos:end="17:38">&gt;&gt;</operator> <name pos:start="17:40" pos:end="17:55">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><call pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:50">(<argument pos:start="21:12" pos:end="21:49"><expr pos:start="21:12" pos:end="21:49"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:18">offset</name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <operator pos:start="21:22" pos:end="21:22">(</operator><name pos:start="21:23" pos:end="21:38">BDRV_SECTOR_SIZE</name> <operator pos:start="21:40" pos:end="21:40">-</operator> <literal type="number" pos:start="21:42" pos:end="21:42">1</literal><operator pos:start="21:43" pos:end="21:43">)</operator><operator pos:start="21:44" pos:end="21:44">)</operator> <operator pos:start="21:46" pos:end="21:47">==</operator> <literal type="number" pos:start="21:49" pos:end="21:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:50"><expr pos:start="23:5" pos:end="23:49"><call pos:start="23:5" pos:end="23:49"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:49">(<argument pos:start="23:12" pos:end="23:48"><expr pos:start="23:12" pos:end="23:48"><operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:17">bytes</name> <operator pos:start="23:19" pos:end="23:19">&amp;</operator> <operator pos:start="23:21" pos:end="23:21">(</operator><name pos:start="23:22" pos:end="23:37">BDRV_SECTOR_SIZE</name> <operator pos:start="23:39" pos:end="23:39">-</operator> <literal type="number" pos:start="23:41" pos:end="23:41">1</literal><operator pos:start="23:42" pos:end="23:42">)</operator><operator pos:start="23:43" pos:end="23:43">)</operator> <operator pos:start="23:45" pos:end="23:46">==</operator> <literal type="number" pos:start="23:48" pos:end="23:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:35">(<expr pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:10">bs</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:34">copy_on_read_in_flight</name></name></expr>)</condition> <block pos:start="27:37" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:62">

        <expr_stmt pos:start="29:9" pos:end="29:62"><expr pos:start="29:9" pos:end="29:61"><call pos:start="29:9" pos:end="29:61"><name pos:start="29:9" pos:end="29:37">wait_for_overlapping_requests</name><argument_list pos:start="29:38" pos:end="29:61">(<argument pos:start="29:39" pos:end="29:40"><expr pos:start="29:39" pos:end="29:40"><name pos:start="29:39" pos:end="29:40">bs</name></expr></argument>, <argument pos:start="29:43" pos:end="29:45"><expr pos:start="29:43" pos:end="29:45"><name pos:start="29:43" pos:end="29:45">req</name></expr></argument>, <argument pos:start="29:48" pos:end="29:53"><expr pos:start="29:48" pos:end="29:53"><name pos:start="29:48" pos:end="29:53">offset</name></expr></argument>, <argument pos:start="29:56" pos:end="29:60"><expr pos:start="29:56" pos:end="29:60"><name pos:start="29:56" pos:end="29:60">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:77"><expr pos:start="35:5" pos:end="35:76"><name pos:start="35:5" pos:end="35:7">ret</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:76"><name pos:start="35:11" pos:end="35:42">notifier_with_return_list_notify</name><argument_list pos:start="35:43" pos:end="35:76">(<argument pos:start="35:44" pos:end="35:70"><expr pos:start="35:44" pos:end="35:70"><operator pos:start="35:44" pos:end="35:44">&amp;</operator><name pos:start="35:45" pos:end="35:70"><name pos:start="35:45" pos:end="35:46">bs</name><operator pos:start="35:47" pos:end="35:48">-&gt;</operator><name pos:start="35:49" pos:end="35:70">before_write_notifiers</name></name></expr></argument>, <argument pos:start="35:73" pos:end="35:75"><expr pos:start="35:73" pos:end="35:75"><name pos:start="35:73" pos:end="35:75">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="51:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">&lt;</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>)</condition> <block pos:start="39:18" pos:end="43:5">{<block_content>

        <comment type="block" pos:start="41:9" pos:end="41:69">/* Do nothing, write notifier decided to fail this request */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="43:7" pos:end="47:5">else if <condition pos:start="43:15" pos:end="43:43">(<expr pos:start="43:16" pos:end="43:42"><name pos:start="43:16" pos:end="43:20">flags</name> <operator pos:start="43:22" pos:end="43:22">&amp;</operator> <name pos:start="43:24" pos:end="43:42">BDRV_REQ_ZERO_WRITE</name></expr>)</condition> <block pos:start="43:45" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:73">

        <expr_stmt pos:start="45:9" pos:end="45:73"><expr pos:start="45:9" pos:end="45:72"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:72"><name pos:start="45:15" pos:end="45:37">bdrv_co_do_write_zeroes</name><argument_list pos:start="45:38" pos:end="45:72">(<argument pos:start="45:39" pos:end="45:40"><expr pos:start="45:39" pos:end="45:40"><name pos:start="45:39" pos:end="45:40">bs</name></expr></argument>, <argument pos:start="45:43" pos:end="45:52"><expr pos:start="45:43" pos:end="45:52"><name pos:start="45:43" pos:end="45:52">sector_num</name></expr></argument>, <argument pos:start="45:55" pos:end="45:64"><expr pos:start="45:55" pos:end="45:64"><name pos:start="45:55" pos:end="45:64">nb_sectors</name></expr></argument>, <argument pos:start="45:67" pos:end="45:71"><expr pos:start="45:67" pos:end="45:71"><name pos:start="45:67" pos:end="45:71">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="51:5">else <block pos:start="47:12" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:68">

        <expr_stmt pos:start="49:9" pos:end="49:68"><expr pos:start="49:9" pos:end="49:67"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:67"><name pos:start="49:15" pos:end="49:33"><name pos:start="49:15" pos:end="49:17">drv</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:33">bdrv_co_writev</name></name><argument_list pos:start="49:34" pos:end="49:67">(<argument pos:start="49:35" pos:end="49:36"><expr pos:start="49:35" pos:end="49:36"><name pos:start="49:35" pos:end="49:36">bs</name></expr></argument>, <argument pos:start="49:39" pos:end="49:48"><expr pos:start="49:39" pos:end="49:48"><name pos:start="49:39" pos:end="49:48">sector_num</name></expr></argument>, <argument pos:start="49:51" pos:end="49:60"><expr pos:start="49:51" pos:end="49:60"><name pos:start="49:51" pos:end="49:60">nb_sectors</name></expr></argument>, <argument pos:start="49:63" pos:end="49:66"><expr pos:start="49:63" pos:end="49:66"><name pos:start="49:63" pos:end="49:66">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:44">(<expr pos:start="55:9" pos:end="55:43"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:14">==</operator> <literal type="number" pos:start="55:16" pos:end="55:16">0</literal> <operator pos:start="55:18" pos:end="55:19">&amp;&amp;</operator> <operator pos:start="55:21" pos:end="55:21">!</operator><name pos:start="55:22" pos:end="55:43"><name pos:start="55:22" pos:end="55:23">bs</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:43">enable_write_cache</name></name></expr>)</condition> <block pos:start="55:46" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:32">

        <expr_stmt pos:start="57:9" pos:end="57:32"><expr pos:start="57:9" pos:end="57:31"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <call pos:start="57:15" pos:end="57:31"><name pos:start="57:15" pos:end="57:27">bdrv_co_flush</name><argument_list pos:start="57:28" pos:end="57:31">(<argument pos:start="57:29" pos:end="57:30"><expr pos:start="57:29" pos:end="57:30"><name pos:start="57:29" pos:end="57:30">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:47"><expr pos:start="63:5" pos:end="63:46"><call pos:start="63:5" pos:end="63:46"><name pos:start="63:5" pos:end="63:18">bdrv_set_dirty</name><argument_list pos:start="63:19" pos:end="63:46">(<argument pos:start="63:20" pos:end="63:21"><expr pos:start="63:20" pos:end="63:21"><name pos:start="63:20" pos:end="63:21">bs</name></expr></argument>, <argument pos:start="63:24" pos:end="63:33"><expr pos:start="63:24" pos:end="63:33"><name pos:start="63:24" pos:end="63:33">sector_num</name></expr></argument>, <argument pos:start="63:36" pos:end="63:45"><expr pos:start="63:36" pos:end="63:45"><name pos:start="63:36" pos:end="63:45">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:60">(<expr pos:start="67:9" pos:end="67:59"><name pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:10">bs</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:29">wr_highest_sector</name></name> <operator pos:start="67:31" pos:end="67:31">&lt;</operator> <name pos:start="67:33" pos:end="67:42">sector_num</name> <operator pos:start="67:44" pos:end="67:44">+</operator> <name pos:start="67:46" pos:end="67:55">nb_sectors</name> <operator pos:start="67:57" pos:end="67:57">-</operator> <literal type="number" pos:start="67:59" pos:end="67:59">1</literal></expr>)</condition> <block pos:start="67:62" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:60">

        <expr_stmt pos:start="69:9" pos:end="69:60"><expr pos:start="69:9" pos:end="69:59"><name pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:10">bs</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:29">wr_highest_sector</name></name> <operator pos:start="69:31" pos:end="69:31">=</operator> <name pos:start="69:33" pos:end="69:42">sector_num</name> <operator pos:start="69:44" pos:end="69:44">+</operator> <name pos:start="69:46" pos:end="69:55">nb_sectors</name> <operator pos:start="69:57" pos:end="69:57">-</operator> <literal type="number" pos:start="69:59" pos:end="69:59">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:33">(<expr pos:start="73:9" pos:end="73:32"><name pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:10">bs</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:20">growable</name></name> <operator pos:start="73:22" pos:end="73:23">&amp;&amp;</operator> <name pos:start="73:25" pos:end="73:27">ret</name> <operator pos:start="73:29" pos:end="73:30">&gt;=</operator> <literal type="number" pos:start="73:32" pos:end="73:32">0</literal></expr>)</condition> <block pos:start="73:35" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:76">

        <expr_stmt pos:start="75:9" pos:end="75:76"><expr pos:start="75:9" pos:end="75:75"><name pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:10">bs</name><operator pos:start="75:11" pos:end="75:12">-&gt;</operator><name pos:start="75:13" pos:end="75:25">total_sectors</name></name> <operator pos:start="75:27" pos:end="75:27">=</operator> <call pos:start="75:29" pos:end="75:75"><name pos:start="75:29" pos:end="75:31">MAX</name><argument_list pos:start="75:32" pos:end="75:75">(<argument pos:start="75:33" pos:end="75:49"><expr pos:start="75:33" pos:end="75:49"><name pos:start="75:33" pos:end="75:49"><name pos:start="75:33" pos:end="75:34">bs</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:49">total_sectors</name></name></expr></argument>, <argument pos:start="75:52" pos:end="75:74"><expr pos:start="75:52" pos:end="75:74"><name pos:start="75:52" pos:end="75:61">sector_num</name> <operator pos:start="75:63" pos:end="75:63">+</operator> <name pos:start="75:65" pos:end="75:74">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="81:5" pos:end="81:15">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
