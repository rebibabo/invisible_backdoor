<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6447.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">vdpau_alloc</name><parameter_list pos:start="1:23" pos:end="1:41">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:37">AVCodecContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="219:1">{<block_content pos:start="5:5" pos:end="217:27">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:15">InputStream</name>  <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">ist</name> <init pos:start="5:23" pos:end="5:33">= <expr pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:25">s</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:85"><decl pos:start="7:5" pos:end="7:84"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">loglevel</name> <init pos:start="7:18" pos:end="7:84">= <expr pos:start="7:20" pos:end="7:84"><ternary pos:start="7:20" pos:end="7:84"><condition pos:start="7:20" pos:end="7:54"><expr pos:start="7:20" pos:end="7:52"><operator pos:start="7:20" pos:end="7:20">(</operator><name pos:start="7:21" pos:end="7:35"><name pos:start="7:21" pos:end="7:23">ist</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:35">hwaccel_id</name></name> <operator pos:start="7:37" pos:end="7:38">==</operator> <name pos:start="7:40" pos:end="7:51">HWACCEL_AUTO</name><operator pos:start="7:52" pos:end="7:52">)</operator></expr> ?</condition><then pos:start="7:56" pos:end="7:69"> <expr pos:start="7:56" pos:end="7:69"><name pos:start="7:56" pos:end="7:69">AV_LOG_VERBOSE</name></expr> </then><else pos:start="7:71" pos:end="7:84">: <expr pos:start="7:73" pos:end="7:84"><name pos:start="7:73" pos:end="7:84">AV_LOG_ERROR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">AVVDPAUContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:29">vdpau_ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">VDPAUContext</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:23">display</name></decl>, <decl pos:start="13:26" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:26" pos:end="13:26">*</modifier></type><name pos:start="13:27" pos:end="13:32">vendor</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:13">VdpStatus</name></type> <name pos:start="15:15" pos:end="15:17">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:35"><expr pos:start="21:5" pos:end="21:34"><name pos:start="21:5" pos:end="21:7">ctx</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:34"><name pos:start="21:11" pos:end="21:20">av_mallocz</name><argument_list pos:start="21:21" pos:end="21:34">(<argument pos:start="21:22" pos:end="21:33"><expr pos:start="21:22" pos:end="21:33"><sizeof pos:start="21:22" pos:end="21:33">sizeof<argument_list pos:start="21:28" pos:end="21:33">(<argument pos:start="21:29" pos:end="21:32"><expr pos:start="21:29" pos:end="21:32"><operator pos:start="21:29" pos:end="21:29">*</operator><name pos:start="21:30" pos:end="21:32">ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="25:31"><if pos:start="23:5" pos:end="25:31">if <condition pos:start="23:8" pos:end="23:13">(<expr pos:start="23:9" pos:end="23:12"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:12">ctx</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:31"><block_content pos:start="25:9" pos:end="25:31">

        <return pos:start="25:9" pos:end="25:31">return <expr pos:start="25:16" pos:end="25:30"><call pos:start="25:16" pos:end="25:30"><name pos:start="25:16" pos:end="25:22">AVERROR</name><argument_list pos:start="25:23" pos:end="25:30">(<argument pos:start="25:24" pos:end="25:29"><expr pos:start="25:24" pos:end="25:29"><name pos:start="25:24" pos:end="25:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:7">ist</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:20">hwaccel_ctx</name></name>           <operator pos:start="29:32" pos:end="29:32">=</operator> <name pos:start="29:34" pos:end="29:36">ctx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:46"><expr pos:start="31:5" pos:end="31:45"><name pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:7">ist</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:23">hwaccel_uninit</name></name>        <operator pos:start="31:32" pos:end="31:32">=</operator> <name pos:start="31:34" pos:end="31:45">vdpau_uninit</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:50"><expr pos:start="33:5" pos:end="33:49"><name pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:7">ist</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:27">hwaccel_get_buffer</name></name>    <operator pos:start="33:32" pos:end="33:32">=</operator> <name pos:start="33:34" pos:end="33:49">vdpau_get_buffer</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:53"><expr pos:start="35:5" pos:end="35:52"><name pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:7">ist</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:30">hwaccel_retrieve_data</name></name> <operator pos:start="35:32" pos:end="35:32">=</operator> <name pos:start="35:34" pos:end="35:52">vdpau_retrieve_data</name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:7">ctx</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:18">tmp_frame</name></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <call pos:start="39:22" pos:end="39:37"><name pos:start="39:22" pos:end="39:35">av_frame_alloc</name><argument_list pos:start="39:36" pos:end="39:37">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="43:18"><if pos:start="41:5" pos:end="43:18">if <condition pos:start="41:8" pos:end="41:24">(<expr pos:start="41:9" pos:end="41:23"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:23"><name pos:start="41:10" pos:end="41:12">ctx</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:23">tmp_frame</name></name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:18"><block_content pos:start="43:9" pos:end="43:18">

        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:49"><expr pos:start="47:5" pos:end="47:48"><name pos:start="47:5" pos:end="47:12"><name pos:start="47:5" pos:end="47:7">ctx</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:12">dpy</name></name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:48"><name pos:start="47:16" pos:end="47:27">XOpenDisplay</name><argument_list pos:start="47:28" pos:end="47:48">(<argument pos:start="47:29" pos:end="47:47"><expr pos:start="47:29" pos:end="47:47"><name pos:start="47:29" pos:end="47:47"><name pos:start="47:29" pos:end="47:31">ist</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:47">hwaccel_device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:18">(<expr pos:start="49:9" pos:end="49:17"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:17"><name pos:start="49:10" pos:end="49:12">ctx</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:17">dpy</name></name></expr>)</condition> <block pos:start="49:20" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:18">

        <expr_stmt pos:start="51:9" pos:end="53:50"><expr pos:start="51:9" pos:end="53:49"><call pos:start="51:9" pos:end="53:49"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="53:49">(<argument pos:start="51:16" pos:end="51:19"><expr pos:start="51:16" pos:end="51:19"><name pos:start="51:16" pos:end="51:19">NULL</name></expr></argument>, <argument pos:start="51:22" pos:end="51:29"><expr pos:start="51:22" pos:end="51:29"><name pos:start="51:22" pos:end="51:29">loglevel</name></expr></argument>, <argument pos:start="51:32" pos:end="51:66"><expr pos:start="51:32" pos:end="51:66"><literal type="string" pos:start="51:32" pos:end="51:66">"Cannot open the X11 display %s.\n"</literal></expr></argument>,

               <argument pos:start="53:16" pos:end="53:48"><expr pos:start="53:16" pos:end="53:48"><call pos:start="53:16" pos:end="53:48"><name pos:start="53:16" pos:end="53:27">XDisplayName</name><argument_list pos:start="53:28" pos:end="53:48">(<argument pos:start="53:29" pos:end="53:47"><expr pos:start="53:29" pos:end="53:47"><name pos:start="53:29" pos:end="53:47"><name pos:start="53:29" pos:end="53:31">ist</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:47">hwaccel_device</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:39"><expr pos:start="59:5" pos:end="59:38"><name pos:start="59:5" pos:end="59:11">display</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:38"><name pos:start="59:15" pos:end="59:28">XDisplayString</name><argument_list pos:start="59:29" pos:end="59:38">(<argument pos:start="59:30" pos:end="59:37"><expr pos:start="59:30" pos:end="59:37"><name pos:start="59:30" pos:end="59:37"><name pos:start="59:30" pos:end="59:32">ctx</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:37">dpy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="65:56"><expr pos:start="63:5" pos:end="65:55"><name pos:start="63:5" pos:end="63:7">err</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="65:55"><name pos:start="63:11" pos:end="63:31">vdp_device_create_x11</name><argument_list pos:start="63:32" pos:end="65:55">(<argument pos:start="63:33" pos:end="63:40"><expr pos:start="63:33" pos:end="63:40"><name pos:start="63:33" pos:end="63:40"><name pos:start="63:33" pos:end="63:35">ctx</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:40">dpy</name></name></expr></argument>, <argument pos:start="63:43" pos:end="63:66"><expr pos:start="63:43" pos:end="63:66"><call pos:start="63:43" pos:end="63:66"><name pos:start="63:43" pos:end="63:56">XDefaultScreen</name><argument_list pos:start="63:57" pos:end="63:66">(<argument pos:start="63:58" pos:end="63:65"><expr pos:start="63:58" pos:end="63:65"><name pos:start="63:58" pos:end="63:65"><name pos:start="63:58" pos:end="63:60">ctx</name><operator pos:start="63:61" pos:end="63:62">-&gt;</operator><name pos:start="63:63" pos:end="63:65">dpy</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="63:69" pos:end="63:80"><expr pos:start="63:69" pos:end="63:80"><operator pos:start="63:69" pos:end="63:69">&amp;</operator><name pos:start="63:70" pos:end="63:80"><name pos:start="63:70" pos:end="63:72">ctx</name><operator pos:start="63:73" pos:end="63:74">-&gt;</operator><name pos:start="63:75" pos:end="63:80">device</name></name></expr></argument>,

                                <argument pos:start="65:33" pos:end="65:54"><expr pos:start="65:33" pos:end="65:54"><operator pos:start="65:33" pos:end="65:33">&amp;</operator><name pos:start="65:34" pos:end="65:54"><name pos:start="65:34" pos:end="65:36">ctx</name><operator pos:start="65:37" pos:end="65:38">-&gt;</operator><name pos:start="65:39" pos:end="65:54">get_proc_address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="98:0"><if pos:start="67:5" pos:end="98:0">if <condition pos:start="67:8" pos:end="67:29">(<expr pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:11">err</name> <operator pos:start="67:13" pos:end="67:14">!=</operator> <name pos:start="67:16" pos:end="67:28">VDP_STATUS_OK</name></expr>)</condition> <block pos:start="67:31" pos:end="98:0">{<block_content pos:start="69:9" pos:end="73:18">

        <expr_stmt pos:start="69:9" pos:end="71:24"><expr pos:start="69:9" pos:end="71:23"><call pos:start="69:9" pos:end="71:23"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="71:23">(<argument pos:start="69:16" pos:end="69:19"><expr pos:start="69:16" pos:end="69:19"><name pos:start="69:16" pos:end="69:19">NULL</name></expr></argument>, <argument pos:start="69:22" pos:end="69:29"><expr pos:start="69:22" pos:end="69:29"><name pos:start="69:22" pos:end="69:29">loglevel</name></expr></argument>, <argument pos:start="69:32" pos:end="69:82"><expr pos:start="69:32" pos:end="69:82"><literal type="string" pos:start="69:32" pos:end="69:82">"VDPAU device creation on X11 display %s failed.\n"</literal></expr></argument>,

               <argument pos:start="71:16" pos:end="71:22"><expr pos:start="71:16" pos:end="71:22"><name pos:start="71:16" pos:end="71:22">display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:18">goto <name pos:start="73:14" pos:end="73:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:define pos:start="79:1" pos:end="97:11">#<cpp:directive pos:start="79:2" pos:end="79:7">define</cpp:directive> <cpp:macro pos:start="79:9" pos:end="79:32"><name pos:start="79:9" pos:end="79:20">GET_CALLBACK</name><parameter_list pos:start="79:21" pos:end="79:32">(<parameter pos:start="79:22" pos:end="79:23"><type pos:start="79:22" pos:end="79:23"><name pos:start="79:22" pos:end="79:23">id</name></type></parameter>, <parameter pos:start="79:26" pos:end="79:31"><type pos:start="79:26" pos:end="79:31"><name pos:start="79:26" pos:end="79:31">result</name></type></parameter>)</parameter_list></cpp:macro>                                                \

<cpp:value pos:start="81:1" pos:end="97:11">do {                                                                            \

    void *tmp;                                                                  \

    err = ctx-&gt;get_proc_address(ctx-&gt;device, id, &amp;tmp);                         \

    if (err != VDP_STATUS_OK) {                                                 \

        av_log(NULL, loglevel, "Error getting the " #id " callback.\n");        \

        goto fail;                                                              \

    }                                                                           \

    ctx-&gt;result = tmp;                                                          \

} while (0)</cpp:value></cpp:define>



    <expr_stmt pos:start="101:5" pos:end="101:79"><expr pos:start="101:5" pos:end="101:78"><call pos:start="101:5" pos:end="101:78"><name pos:start="101:5" pos:end="101:16">GET_CALLBACK</name><argument_list pos:start="101:17" pos:end="101:78">(<argument pos:start="101:18" pos:end="101:45"><expr pos:start="101:18" pos:end="101:45"><name pos:start="101:18" pos:end="101:45">VDP_FUNC_ID_GET_ERROR_STRING</name></expr></argument>,               <argument pos:start="101:62" pos:end="101:77"><expr pos:start="101:62" pos:end="101:77"><name pos:start="101:62" pos:end="101:77">get_error_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:85"><expr pos:start="103:5" pos:end="103:84"><call pos:start="103:5" pos:end="103:84"><name pos:start="103:5" pos:end="103:16">GET_CALLBACK</name><argument_list pos:start="103:17" pos:end="103:84">(<argument pos:start="103:18" pos:end="103:51"><expr pos:start="103:18" pos:end="103:51"><name pos:start="103:18" pos:end="103:51">VDP_FUNC_ID_GET_INFORMATION_STRING</name></expr></argument>,         <argument pos:start="103:62" pos:end="103:83"><expr pos:start="103:62" pos:end="103:83"><name pos:start="103:62" pos:end="103:83">get_information_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:77"><expr pos:start="105:5" pos:end="105:76"><call pos:start="105:5" pos:end="105:76"><name pos:start="105:5" pos:end="105:16">GET_CALLBACK</name><argument_list pos:start="105:17" pos:end="105:76">(<argument pos:start="105:18" pos:end="105:43"><expr pos:start="105:18" pos:end="105:43"><name pos:start="105:18" pos:end="105:43">VDP_FUNC_ID_DEVICE_DESTROY</name></expr></argument>,                 <argument pos:start="105:62" pos:end="105:75"><expr pos:start="105:62" pos:end="105:75"><name pos:start="105:62" pos:end="105:75">device_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="115:5"><if pos:start="107:5" pos:end="115:5">if <condition pos:start="107:8" pos:end="107:27">(<expr pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:21">vdpau_api_ver</name> <operator pos:start="107:23" pos:end="107:24">==</operator> <literal type="number" pos:start="107:26" pos:end="107:26">1</literal></expr>)</condition> <block pos:start="107:29" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:81">

        <expr_stmt pos:start="109:9" pos:end="109:81"><expr pos:start="109:9" pos:end="109:80"><call pos:start="109:9" pos:end="109:80"><name pos:start="109:9" pos:end="109:20">GET_CALLBACK</name><argument_list pos:start="109:21" pos:end="109:80">(<argument pos:start="109:22" pos:end="109:47"><expr pos:start="109:22" pos:end="109:47"><name pos:start="109:22" pos:end="109:47">VDP_FUNC_ID_DECODER_CREATE</name></expr></argument>,                 <argument pos:start="109:66" pos:end="109:79"><expr pos:start="109:66" pos:end="109:79"><name pos:start="109:66" pos:end="109:79">decoder_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:82"><expr pos:start="111:9" pos:end="111:81"><call pos:start="111:9" pos:end="111:81"><name pos:start="111:9" pos:end="111:20">GET_CALLBACK</name><argument_list pos:start="111:21" pos:end="111:81">(<argument pos:start="111:22" pos:end="111:48"><expr pos:start="111:22" pos:end="111:48"><name pos:start="111:22" pos:end="111:48">VDP_FUNC_ID_DECODER_DESTROY</name></expr></argument>,                <argument pos:start="111:66" pos:end="111:80"><expr pos:start="111:66" pos:end="111:80"><name pos:start="111:66" pos:end="111:80">decoder_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:81"><expr pos:start="113:9" pos:end="113:80"><call pos:start="113:9" pos:end="113:80"><name pos:start="113:9" pos:end="113:20">GET_CALLBACK</name><argument_list pos:start="113:21" pos:end="113:80">(<argument pos:start="113:22" pos:end="113:47"><expr pos:start="113:22" pos:end="113:47"><name pos:start="113:22" pos:end="113:47">VDP_FUNC_ID_DECODER_RENDER</name></expr></argument>,                 <argument pos:start="113:66" pos:end="113:79"><expr pos:start="113:66" pos:end="113:79"><name pos:start="113:66" pos:end="113:79">decoder_render</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:83"><expr pos:start="117:5" pos:end="117:82"><call pos:start="117:5" pos:end="117:82"><name pos:start="117:5" pos:end="117:16">GET_CALLBACK</name><argument_list pos:start="117:17" pos:end="117:82">(<argument pos:start="117:18" pos:end="117:49"><expr pos:start="117:18" pos:end="117:49"><name pos:start="117:18" pos:end="117:49">VDP_FUNC_ID_VIDEO_SURFACE_CREATE</name></expr></argument>,           <argument pos:start="117:62" pos:end="117:81"><expr pos:start="117:62" pos:end="117:81"><name pos:start="117:62" pos:end="117:81">video_surface_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:84"><expr pos:start="119:5" pos:end="119:83"><call pos:start="119:5" pos:end="119:83"><name pos:start="119:5" pos:end="119:16">GET_CALLBACK</name><argument_list pos:start="119:17" pos:end="119:83">(<argument pos:start="119:18" pos:end="119:50"><expr pos:start="119:18" pos:end="119:50"><name pos:start="119:18" pos:end="119:50">VDP_FUNC_ID_VIDEO_SURFACE_DESTROY</name></expr></argument>,          <argument pos:start="119:62" pos:end="119:82"><expr pos:start="119:62" pos:end="119:82"><name pos:start="119:62" pos:end="119:82">video_surface_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:85"><expr pos:start="121:5" pos:end="121:84"><call pos:start="121:5" pos:end="121:84"><name pos:start="121:5" pos:end="121:16">GET_CALLBACK</name><argument_list pos:start="121:17" pos:end="121:84">(<argument pos:start="121:18" pos:end="121:59"><expr pos:start="121:18" pos:end="121:59"><name pos:start="121:18" pos:end="121:59">VDP_FUNC_ID_VIDEO_SURFACE_GET_BITS_Y_CB_CR</name></expr></argument>, <argument pos:start="121:62" pos:end="121:83"><expr pos:start="121:62" pos:end="121:83"><name pos:start="121:62" pos:end="121:83">video_surface_get_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:91"><expr pos:start="123:5" pos:end="123:90"><call pos:start="123:5" pos:end="123:90"><name pos:start="123:5" pos:end="123:16">GET_CALLBACK</name><argument_list pos:start="123:17" pos:end="123:90">(<argument pos:start="123:18" pos:end="123:57"><expr pos:start="123:18" pos:end="123:57"><name pos:start="123:18" pos:end="123:57">VDP_FUNC_ID_VIDEO_SURFACE_GET_PARAMETERS</name></expr></argument>,   <argument pos:start="123:62" pos:end="123:89"><expr pos:start="123:62" pos:end="123:89"><name pos:start="123:62" pos:end="123:89">video_surface_get_parameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="127:38"><expr pos:start="125:5" pos:end="127:37"><call pos:start="125:5" pos:end="127:37"><name pos:start="125:5" pos:end="125:16">GET_CALLBACK</name><argument_list pos:start="125:17" pos:end="127:37">(<argument pos:start="125:18" pos:end="125:82"><expr pos:start="125:18" pos:end="125:82"><name pos:start="125:18" pos:end="125:82">VDP_FUNC_ID_VIDEO_SURFACE_QUERY_GET_PUT_BITS_Y_CB_CR_CAPABILITIES</name></expr></argument>,

                 <argument pos:start="127:18" pos:end="127:36"><expr pos:start="127:18" pos:end="127:36"><name pos:start="127:18" pos:end="127:36">video_surface_query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="131:5" pos:end="155:5">for <control pos:start="131:9" pos:end="131:55">(<init pos:start="131:10" pos:end="131:15"><expr pos:start="131:10" pos:end="131:14"><name pos:start="131:10" pos:end="131:10">i</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <literal type="number" pos:start="131:14" pos:end="131:14">0</literal></expr>;</init> <condition pos:start="131:17" pos:end="131:50"><expr pos:start="131:17" pos:end="131:49"><name pos:start="131:17" pos:end="131:17">i</name> <operator pos:start="131:19" pos:end="131:19">&lt;</operator> <call pos:start="131:21" pos:end="131:49"><name pos:start="131:21" pos:end="131:34">FF_ARRAY_ELEMS</name><argument_list pos:start="131:35" pos:end="131:49">(<argument pos:start="131:36" pos:end="131:48"><expr pos:start="131:36" pos:end="131:48"><name pos:start="131:36" pos:end="131:48">vdpau_formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="131:52" pos:end="131:54"><expr pos:start="131:52" pos:end="131:54"><name pos:start="131:52" pos:end="131:52">i</name><operator pos:start="131:53" pos:end="131:54">++</operator></expr></incr>)</control> <block pos:start="131:57" pos:end="155:5">{<block_content pos:start="133:9" pos:end="153:18">

        <decl_stmt pos:start="133:9" pos:end="133:26"><decl pos:start="133:9" pos:end="133:25"><type pos:start="133:9" pos:end="133:15"><name pos:start="133:9" pos:end="133:15">VdpBool</name></type> <name pos:start="133:17" pos:end="133:25">supported</name></decl>;</decl_stmt>

        <expr_stmt pos:start="135:9" pos:end="137:72"><expr pos:start="135:9" pos:end="137:71"><name pos:start="135:9" pos:end="135:11">err</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <call pos:start="135:15" pos:end="137:71"><name pos:start="135:15" pos:end="135:38"><name pos:start="135:15" pos:end="135:17">ctx</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:38">video_surface_query</name></name><argument_list pos:start="135:39" pos:end="137:71">(<argument pos:start="135:40" pos:end="135:50"><expr pos:start="135:40" pos:end="135:50"><name pos:start="135:40" pos:end="135:50"><name pos:start="135:40" pos:end="135:42">ctx</name><operator pos:start="135:43" pos:end="135:44">-&gt;</operator><name pos:start="135:45" pos:end="135:50">device</name></name></expr></argument>, <argument pos:start="135:53" pos:end="135:71"><expr pos:start="135:53" pos:end="135:71"><name pos:start="135:53" pos:end="135:71">VDP_CHROMA_TYPE_420</name></expr></argument>,

                                       <argument pos:start="137:40" pos:end="137:58"><expr pos:start="137:40" pos:end="137:58"><name pos:start="137:40" pos:end="137:58"><name pos:start="137:40" pos:end="137:52">vdpau_formats</name><index pos:start="137:53" pos:end="137:55">[<expr pos:start="137:54" pos:end="137:54"><name pos:start="137:54" pos:end="137:54">i</name></expr>]</index><index pos:start="137:56" pos:end="137:58">[<expr pos:start="137:57" pos:end="137:57"><literal type="number" pos:start="137:57" pos:end="137:57">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="137:61" pos:end="137:70"><expr pos:start="137:61" pos:end="137:70"><operator pos:start="137:61" pos:end="137:61">&amp;</operator><name pos:start="137:62" pos:end="137:70">supported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="149:9"><if pos:start="139:9" pos:end="149:9">if <condition pos:start="139:12" pos:end="139:33">(<expr pos:start="139:13" pos:end="139:32"><name pos:start="139:13" pos:end="139:15">err</name> <operator pos:start="139:17" pos:end="139:18">!=</operator> <name pos:start="139:20" pos:end="139:32">VDP_STATUS_OK</name></expr>)</condition> <block pos:start="139:35" pos:end="149:9">{<block_content pos:start="141:13" pos:end="147:22">

            <expr_stmt pos:start="141:13" pos:end="145:47"><expr pos:start="141:13" pos:end="145:46"><call pos:start="141:13" pos:end="145:46"><name pos:start="141:13" pos:end="141:18">av_log</name><argument_list pos:start="141:19" pos:end="145:46">(<argument pos:start="141:20" pos:end="141:23"><expr pos:start="141:20" pos:end="141:23"><name pos:start="141:20" pos:end="141:23">NULL</name></expr></argument>, <argument pos:start="141:26" pos:end="141:33"><expr pos:start="141:26" pos:end="141:33"><name pos:start="141:26" pos:end="141:33">loglevel</name></expr></argument>,

                   <argument pos:start="143:20" pos:end="143:68"><expr pos:start="143:20" pos:end="143:68"><literal type="string" pos:start="143:20" pos:end="143:68">"Error querying VDPAU surface capabilities: %s\n"</literal></expr></argument>,

                   <argument pos:start="145:20" pos:end="145:45"><expr pos:start="145:20" pos:end="145:45"><call pos:start="145:20" pos:end="145:45"><name pos:start="145:20" pos:end="145:40"><name pos:start="145:20" pos:end="145:22">ctx</name><operator pos:start="145:23" pos:end="145:24">-&gt;</operator><name pos:start="145:25" pos:end="145:40">get_error_string</name></name><argument_list pos:start="145:41" pos:end="145:45">(<argument pos:start="145:42" pos:end="145:44"><expr pos:start="145:42" pos:end="145:44"><name pos:start="145:42" pos:end="145:44">err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="147:13" pos:end="147:22">goto <name pos:start="147:18" pos:end="147:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="151:9" pos:end="153:18"><if pos:start="151:9" pos:end="153:18">if <condition pos:start="151:12" pos:end="151:22">(<expr pos:start="151:13" pos:end="151:21"><name pos:start="151:13" pos:end="151:21">supported</name></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:18"><block_content pos:start="153:13" pos:end="153:18">

            <break pos:start="153:13" pos:end="153:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="157:5" pos:end="165:5"><if pos:start="157:5" pos:end="165:5">if <condition pos:start="157:8" pos:end="157:43">(<expr pos:start="157:9" pos:end="157:42"><name pos:start="157:9" pos:end="157:9">i</name> <operator pos:start="157:11" pos:end="157:12">==</operator> <call pos:start="157:14" pos:end="157:42"><name pos:start="157:14" pos:end="157:27">FF_ARRAY_ELEMS</name><argument_list pos:start="157:28" pos:end="157:42">(<argument pos:start="157:29" pos:end="157:41"><expr pos:start="157:29" pos:end="157:41"><name pos:start="157:29" pos:end="157:41">vdpau_formats</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:45" pos:end="165:5">{<block_content pos:start="159:9" pos:end="163:31">

        <expr_stmt pos:start="159:9" pos:end="161:71"><expr pos:start="159:9" pos:end="161:70"><call pos:start="159:9" pos:end="161:70"><name pos:start="159:9" pos:end="159:14">av_log</name><argument_list pos:start="159:15" pos:end="161:70">(<argument pos:start="159:16" pos:end="159:19"><expr pos:start="159:16" pos:end="159:19"><name pos:start="159:16" pos:end="159:19">NULL</name></expr></argument>, <argument pos:start="159:22" pos:end="159:29"><expr pos:start="159:22" pos:end="159:29"><name pos:start="159:22" pos:end="159:29">loglevel</name></expr></argument>,

               <argument pos:start="161:16" pos:end="161:69"><expr pos:start="161:16" pos:end="161:69"><literal type="string" pos:start="161:16" pos:end="161:69">"No supported VDPAU format for retrieving the data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="163:9" pos:end="163:31">return <expr pos:start="163:16" pos:end="163:30"><call pos:start="163:16" pos:end="163:30"><name pos:start="163:16" pos:end="163:22">AVERROR</name><argument_list pos:start="163:23" pos:end="163:30">(<argument pos:start="163:24" pos:end="163:29"><expr pos:start="163:24" pos:end="163:29"><name pos:start="163:24" pos:end="163:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:44"><expr pos:start="167:5" pos:end="167:43"><name pos:start="167:5" pos:end="167:21"><name pos:start="167:5" pos:end="167:7">ctx</name><operator pos:start="167:8" pos:end="167:9">-&gt;</operator><name pos:start="167:10" pos:end="167:21">vdpau_format</name></name> <operator pos:start="167:23" pos:end="167:23">=</operator> <name pos:start="167:25" pos:end="167:43"><name pos:start="167:25" pos:end="167:37">vdpau_formats</name><index pos:start="167:38" pos:end="167:40">[<expr pos:start="167:39" pos:end="167:39"><name pos:start="167:39" pos:end="167:39">i</name></expr>]</index><index pos:start="167:41" pos:end="167:43">[<expr pos:start="167:42" pos:end="167:42"><literal type="number" pos:start="167:42" pos:end="167:42">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:44"><expr pos:start="169:5" pos:end="169:43"><name pos:start="169:5" pos:end="169:16"><name pos:start="169:5" pos:end="169:7">ctx</name><operator pos:start="169:8" pos:end="169:9">-&gt;</operator><name pos:start="169:10" pos:end="169:16">pix_fmt</name></name>      <operator pos:start="169:23" pos:end="169:23">=</operator> <name pos:start="169:25" pos:end="169:43"><name pos:start="169:25" pos:end="169:37">vdpau_formats</name><index pos:start="169:38" pos:end="169:40">[<expr pos:start="169:39" pos:end="169:39"><name pos:start="169:39" pos:end="169:39">i</name></expr>]</index><index pos:start="169:41" pos:end="169:43">[<expr pos:start="169:42" pos:end="169:42"><literal type="number" pos:start="169:42" pos:end="169:42">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="173:5" pos:end="191:18"><if pos:start="173:5" pos:end="187:5">if <condition pos:start="173:8" pos:end="173:27">(<expr pos:start="173:9" pos:end="173:26"><name pos:start="173:9" pos:end="173:21">vdpau_api_ver</name> <operator pos:start="173:23" pos:end="173:24">==</operator> <literal type="number" pos:start="173:26" pos:end="173:26">1</literal></expr>)</condition> <block pos:start="173:29" pos:end="187:5">{<block_content pos:start="175:9" pos:end="185:39">

        <expr_stmt pos:start="175:9" pos:end="175:45"><expr pos:start="175:9" pos:end="175:44"><name pos:start="175:9" pos:end="175:17">vdpau_ctx</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <call pos:start="175:21" pos:end="175:44"><name pos:start="175:21" pos:end="175:42">av_vdpau_alloc_context</name><argument_list pos:start="175:43" pos:end="175:44">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="179:22"><if pos:start="177:9" pos:end="179:22">if <condition pos:start="177:12" pos:end="177:23">(<expr pos:start="177:13" pos:end="177:22"><operator pos:start="177:13" pos:end="177:13">!</operator><name pos:start="177:14" pos:end="177:22">vdpau_ctx</name></expr>)</condition><block type="pseudo" pos:start="179:13" pos:end="179:22"><block_content pos:start="179:13" pos:end="179:22">

            <goto pos:start="179:13" pos:end="179:22">goto <name pos:start="179:18" pos:end="179:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:48"><expr pos:start="181:9" pos:end="181:47"><name pos:start="181:9" pos:end="181:25"><name pos:start="181:9" pos:end="181:17">vdpau_ctx</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:25">render</name></name> <operator pos:start="181:27" pos:end="181:27">=</operator> <name pos:start="181:29" pos:end="181:47"><name pos:start="181:29" pos:end="181:31">ctx</name><operator pos:start="181:32" pos:end="181:33">-&gt;</operator><name pos:start="181:34" pos:end="181:47">decoder_render</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="185:9" pos:end="185:39"><expr pos:start="185:9" pos:end="185:38"><name pos:start="185:9" pos:end="185:26"><name pos:start="185:9" pos:end="185:9">s</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:26">hwaccel_context</name></name> <operator pos:start="185:28" pos:end="185:28">=</operator> <name pos:start="185:30" pos:end="185:38">vdpau_ctx</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="187:7" pos:end="191:18">else

    if <condition pos:start="189:8" pos:end="189:72">(<expr pos:start="189:9" pos:end="189:71"><call pos:start="189:9" pos:end="189:71"><name pos:start="189:9" pos:end="189:29">av_vdpau_bind_context</name><argument_list pos:start="189:30" pos:end="189:71">(<argument pos:start="189:31" pos:end="189:31"><expr pos:start="189:31" pos:end="189:31"><name pos:start="189:31" pos:end="189:31">s</name></expr></argument>, <argument pos:start="189:34" pos:end="189:44"><expr pos:start="189:34" pos:end="189:44"><name pos:start="189:34" pos:end="189:44"><name pos:start="189:34" pos:end="189:36">ctx</name><operator pos:start="189:37" pos:end="189:38">-&gt;</operator><name pos:start="189:39" pos:end="189:44">device</name></name></expr></argument>, <argument pos:start="189:47" pos:end="189:67"><expr pos:start="189:47" pos:end="189:67"><name pos:start="189:47" pos:end="189:67"><name pos:start="189:47" pos:end="189:49">ctx</name><operator pos:start="189:50" pos:end="189:51">-&gt;</operator><name pos:start="189:52" pos:end="189:67">get_proc_address</name></name></expr></argument>, <argument pos:start="189:70" pos:end="189:70"><expr pos:start="189:70" pos:end="189:70"><literal type="number" pos:start="189:70" pos:end="189:70">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="191:18"><block_content pos:start="191:9" pos:end="191:18">

        <goto pos:start="191:9" pos:end="191:18">goto <name pos:start="191:14" pos:end="191:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="195:5" pos:end="195:41"><expr pos:start="195:5" pos:end="195:40"><call pos:start="195:5" pos:end="195:40"><name pos:start="195:5" pos:end="195:31"><name pos:start="195:5" pos:end="195:7">ctx</name><operator pos:start="195:8" pos:end="195:9">-&gt;</operator><name pos:start="195:10" pos:end="195:31">get_information_string</name></name><argument_list pos:start="195:32" pos:end="195:40">(<argument pos:start="195:33" pos:end="195:39"><expr pos:start="195:33" pos:end="195:39"><operator pos:start="195:33" pos:end="195:33">&amp;</operator><name pos:start="195:34" pos:end="195:39">vendor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="201:53"><expr pos:start="197:5" pos:end="201:52"><call pos:start="197:5" pos:end="201:52"><name pos:start="197:5" pos:end="197:10">av_log</name><argument_list pos:start="197:11" pos:end="201:52">(<argument pos:start="197:12" pos:end="197:15"><expr pos:start="197:12" pos:end="197:15"><name pos:start="197:12" pos:end="197:15">NULL</name></expr></argument>, <argument pos:start="197:18" pos:end="197:31"><expr pos:start="197:18" pos:end="197:31"><name pos:start="197:18" pos:end="197:31">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="197:34" pos:end="199:45"><expr pos:start="197:34" pos:end="199:45"><literal type="string" pos:start="197:34" pos:end="197:75">"Using VDPAU -- %s -- on X11 display %s, "</literal>

           <literal type="string" pos:start="199:12" pos:end="199:45">"to decode input stream #%d:%d.\n"</literal></expr></argument>, <argument pos:start="199:48" pos:end="199:53"><expr pos:start="199:48" pos:end="199:53"><name pos:start="199:48" pos:end="199:53">vendor</name></expr></argument>,

           <argument pos:start="201:12" pos:end="201:18"><expr pos:start="201:12" pos:end="201:18"><name pos:start="201:12" pos:end="201:18">display</name></expr></argument>, <argument pos:start="201:21" pos:end="201:35"><expr pos:start="201:21" pos:end="201:35"><name pos:start="201:21" pos:end="201:35"><name pos:start="201:21" pos:end="201:23">ist</name><operator pos:start="201:24" pos:end="201:25">-&gt;</operator><name pos:start="201:26" pos:end="201:35">file_index</name></name></expr></argument>, <argument pos:start="201:38" pos:end="201:51"><expr pos:start="201:38" pos:end="201:51"><name pos:start="201:38" pos:end="201:51"><name pos:start="201:38" pos:end="201:40">ist</name><operator pos:start="201:41" pos:end="201:42">-&gt;</operator><name pos:start="201:43" pos:end="201:44">st</name><operator pos:start="201:45" pos:end="201:46">-&gt;</operator><name pos:start="201:47" pos:end="201:51">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="205:5" pos:end="205:13">return <expr pos:start="205:12" pos:end="205:12"><literal type="number" pos:start="205:12" pos:end="205:12">0</literal></expr>;</return>



<label pos:start="209:1" pos:end="209:5"><name pos:start="209:1" pos:end="209:4">fail</name>:</label>

    <expr_stmt pos:start="211:5" pos:end="213:44"><expr pos:start="211:5" pos:end="213:43"><call pos:start="211:5" pos:end="213:43"><name pos:start="211:5" pos:end="211:10">av_log</name><argument_list pos:start="211:11" pos:end="213:43">(<argument pos:start="211:12" pos:end="211:15"><expr pos:start="211:12" pos:end="211:15"><name pos:start="211:12" pos:end="211:15">NULL</name></expr></argument>, <argument pos:start="211:18" pos:end="211:25"><expr pos:start="211:18" pos:end="211:25"><name pos:start="211:18" pos:end="211:25">loglevel</name></expr></argument>, <argument pos:start="211:28" pos:end="211:67"><expr pos:start="211:28" pos:end="211:67"><literal type="string" pos:start="211:28" pos:end="211:67">"VDPAU init failed for stream #%d:%d.\n"</literal></expr></argument>,

           <argument pos:start="213:12" pos:end="213:26"><expr pos:start="213:12" pos:end="213:26"><name pos:start="213:12" pos:end="213:26"><name pos:start="213:12" pos:end="213:14">ist</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:26">file_index</name></name></expr></argument>, <argument pos:start="213:29" pos:end="213:42"><expr pos:start="213:29" pos:end="213:42"><name pos:start="213:29" pos:end="213:42"><name pos:start="213:29" pos:end="213:31">ist</name><operator pos:start="213:32" pos:end="213:33">-&gt;</operator><name pos:start="213:34" pos:end="213:35">st</name><operator pos:start="213:36" pos:end="213:37">-&gt;</operator><name pos:start="213:38" pos:end="213:42">index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:20"><expr pos:start="215:5" pos:end="215:19"><call pos:start="215:5" pos:end="215:19"><name pos:start="215:5" pos:end="215:16">vdpau_uninit</name><argument_list pos:start="215:17" pos:end="215:19">(<argument pos:start="215:18" pos:end="215:18"><expr pos:start="215:18" pos:end="215:18"><name pos:start="215:18" pos:end="215:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="217:5" pos:end="217:27">return <expr pos:start="217:12" pos:end="217:26"><call pos:start="217:12" pos:end="217:26"><name pos:start="217:12" pos:end="217:18">AVERROR</name><argument_list pos:start="217:19" pos:end="217:26">(<argument pos:start="217:20" pos:end="217:25"><expr pos:start="217:20" pos:end="217:25"><name pos:start="217:20" pos:end="217:25">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
