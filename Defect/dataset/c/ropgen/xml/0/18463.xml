<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18463.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">decode_interframe_v4a</name><parameter_list pos:start="1:34" pos:end="3:48">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">avctx</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">src</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:47"><decl pos:start="3:35" pos:end="3:47"><type pos:start="3:35" pos:end="3:47"><name pos:start="3:35" pos:end="3:42">uint32_t</name></type> <name pos:start="3:44" pos:end="3:47">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="145:1">{<block_content pos:start="7:5" pos:end="143:5">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">Hnm4VideoContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:25">hnm</name> <init pos:start="7:27" pos:end="7:44">= <expr pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:44"><name pos:start="7:29" pos:end="7:33">avctx</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18">GetByteContext</name></type> <name pos:start="9:20" pos:end="9:21">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:24">writeoffset</name> <init pos:start="11:26" pos:end="11:28">= <expr pos:start="11:28" pos:end="11:28"><literal type="number" pos:start="11:28" pos:end="11:28">0</literal></expr></init></decl>, <decl pos:start="11:31" pos:end="11:36"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:31" pos:end="11:36">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:15">tag</name></decl>, <decl pos:start="13:18" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:18" pos:end="13:22">count</name></decl>, <decl pos:start="13:25" pos:end="13:32"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:25" pos:end="13:32">previous</name></decl>, <decl pos:start="13:35" pos:end="13:39"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:35" pos:end="13:39">delta</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:37"><expr pos:start="17:5" pos:end="17:36"><call pos:start="17:5" pos:end="17:36"><name pos:start="17:5" pos:end="17:20">bytestream2_init</name><argument_list pos:start="17:21" pos:end="17:36">(<argument pos:start="17:22" pos:end="17:24"><expr pos:start="17:22" pos:end="17:24"><operator pos:start="17:22" pos:end="17:22">&amp;</operator><name pos:start="17:23" pos:end="17:24">gb</name></expr></argument>, <argument pos:start="17:27" pos:end="17:29"><expr pos:start="17:27" pos:end="17:29"><name pos:start="17:27" pos:end="17:29">src</name></expr></argument>, <argument pos:start="17:32" pos:end="17:35"><expr pos:start="17:32" pos:end="17:35"><name pos:start="17:32" pos:end="17:35">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="21:5" pos:end="143:5">while <condition pos:start="21:11" pos:end="21:40">(<expr pos:start="21:12" pos:end="21:39"><call pos:start="21:12" pos:end="21:32"><name pos:start="21:12" pos:end="21:27">bytestream2_tell</name><argument_list pos:start="21:28" pos:end="21:32">(<argument pos:start="21:29" pos:end="21:31"><expr pos:start="21:29" pos:end="21:31"><operator pos:start="21:29" pos:end="21:29">&amp;</operator><name pos:start="21:30" pos:end="21:31">gb</name></expr></argument>)</argument_list></call> <operator pos:start="21:34" pos:end="21:34">&lt;</operator> <name pos:start="21:36" pos:end="21:39">size</name></expr>)</condition> <block pos:start="21:42" pos:end="143:5">{<block_content pos:start="23:9" pos:end="141:9">

        <expr_stmt pos:start="23:9" pos:end="23:50"><expr pos:start="23:9" pos:end="23:49"><name pos:start="23:9" pos:end="23:13">count</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <call pos:start="23:17" pos:end="23:42"><name pos:start="23:17" pos:end="23:37">bytestream2_peek_byte</name><argument_list pos:start="23:38" pos:end="23:42">(<argument pos:start="23:39" pos:end="23:41"><expr pos:start="23:39" pos:end="23:41"><operator pos:start="23:39" pos:end="23:39">&amp;</operator><name pos:start="23:40" pos:end="23:41">gb</name></expr></argument>)</argument_list></call> <operator pos:start="23:44" pos:end="23:44">&amp;</operator> <literal type="number" pos:start="23:46" pos:end="23:49">0x3F</literal></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="141:9"><if pos:start="25:9" pos:end="69:9">if <condition pos:start="25:12" pos:end="25:23">(<expr pos:start="25:13" pos:end="25:22"><name pos:start="25:13" pos:end="25:17">count</name> <operator pos:start="25:19" pos:end="25:20">==</operator> <literal type="number" pos:start="25:22" pos:end="25:22">0</literal></expr>)</condition> <block pos:start="25:25" pos:end="69:9">{<block_content pos:start="27:13" pos:end="67:13">

            <expr_stmt pos:start="27:13" pos:end="27:51"><expr pos:start="27:13" pos:end="27:50"><name pos:start="27:13" pos:end="27:15">tag</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:43"><name pos:start="27:19" pos:end="27:38">bytestream2_get_byte</name><argument_list pos:start="27:39" pos:end="27:43">(<argument pos:start="27:40" pos:end="27:42"><expr pos:start="27:40" pos:end="27:42"><operator pos:start="27:40" pos:end="27:40">&amp;</operator><name pos:start="27:41" pos:end="27:42">gb</name></expr></argument>)</argument_list></call> <operator pos:start="27:45" pos:end="27:45">&amp;</operator> <literal type="number" pos:start="27:47" pos:end="27:50">0xC0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:27"><expr pos:start="29:13" pos:end="29:26"><name pos:start="29:13" pos:end="29:15">tag</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <name pos:start="29:19" pos:end="29:21">tag</name> <operator pos:start="29:23" pos:end="29:24">&gt;&gt;</operator> <literal type="number" pos:start="29:26" pos:end="29:26">6</literal></expr>;</expr_stmt>

            <if_stmt pos:start="31:13" pos:end="59:13"><if pos:start="31:13" pos:end="35:13">if <condition pos:start="31:16" pos:end="31:25">(<expr pos:start="31:17" pos:end="31:24"><name pos:start="31:17" pos:end="31:19">tag</name> <operator pos:start="31:21" pos:end="31:22">==</operator> <literal type="number" pos:start="31:24" pos:end="31:24">0</literal></expr>)</condition> <block pos:start="31:27" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:57">

                <expr_stmt pos:start="33:17" pos:end="33:57"><expr pos:start="33:17" pos:end="33:56"><name pos:start="33:17" pos:end="33:27">writeoffset</name> <operator pos:start="33:29" pos:end="33:30">+=</operator> <call pos:start="33:32" pos:end="33:56"><name pos:start="33:32" pos:end="33:51">bytestream2_get_byte</name><argument_list pos:start="33:52" pos:end="33:56">(<argument pos:start="33:53" pos:end="33:55"><expr pos:start="33:53" pos:end="33:55"><operator pos:start="33:53" pos:end="33:53">&amp;</operator><name pos:start="33:54" pos:end="33:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="35:15" pos:end="51:13">else if <condition pos:start="35:23" pos:end="35:32">(<expr pos:start="35:24" pos:end="35:31"><name pos:start="35:24" pos:end="35:26">tag</name> <operator pos:start="35:28" pos:end="35:29">==</operator> <literal type="number" pos:start="35:31" pos:end="35:31">1</literal></expr>)</condition> <block pos:start="35:34" pos:end="51:13">{<block_content pos:start="37:17" pos:end="49:30">

                <if_stmt pos:start="37:17" pos:end="43:17"><if pos:start="37:17" pos:end="43:17">if <condition pos:start="37:20" pos:end="37:73">(<expr pos:start="37:21" pos:end="37:72"><name pos:start="37:21" pos:end="37:31">writeoffset</name> <operator pos:start="37:33" pos:end="37:33">+</operator> <name pos:start="37:35" pos:end="37:44"><name pos:start="37:35" pos:end="37:37">hnm</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:44">width</name></name> <operator pos:start="37:46" pos:end="37:47">&gt;=</operator> <name pos:start="37:49" pos:end="37:58"><name pos:start="37:49" pos:end="37:51">hnm</name><operator pos:start="37:52" pos:end="37:53">-&gt;</operator><name pos:start="37:54" pos:end="37:58">width</name></name> <operator pos:start="37:60" pos:end="37:60">*</operator> <name pos:start="37:62" pos:end="37:72"><name pos:start="37:62" pos:end="37:64">hnm</name><operator pos:start="37:65" pos:end="37:66">-&gt;</operator><name pos:start="37:67" pos:end="37:72">height</name></name></expr>)</condition> <block pos:start="37:75" pos:end="43:17">{<block_content pos:start="39:21" pos:end="41:26">

                    <expr_stmt pos:start="39:21" pos:end="39:79"><expr pos:start="39:21" pos:end="39:78"><call pos:start="39:21" pos:end="39:78"><name pos:start="39:21" pos:end="39:26">av_log</name><argument_list pos:start="39:27" pos:end="39:78">(<argument pos:start="39:28" pos:end="39:32"><expr pos:start="39:28" pos:end="39:32"><name pos:start="39:28" pos:end="39:32">avctx</name></expr></argument>, <argument pos:start="39:35" pos:end="39:46"><expr pos:start="39:35" pos:end="39:46"><name pos:start="39:35" pos:end="39:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:49" pos:end="39:77"><expr pos:start="39:49" pos:end="39:77"><literal type="string" pos:start="39:49" pos:end="39:77">"writeoffset out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="41:21" pos:end="41:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:83"><expr pos:start="45:17" pos:end="45:82"><name pos:start="45:17" pos:end="45:41"><name pos:start="45:17" pos:end="45:19">hnm</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:28">current</name><index pos:start="45:29" pos:end="45:41">[<expr pos:start="45:30" pos:end="45:40"><name pos:start="45:30" pos:end="45:40">writeoffset</name></expr>]</index></name>              <operator pos:start="45:56" pos:end="45:56">=</operator> <call pos:start="45:58" pos:end="45:82"><name pos:start="45:58" pos:end="45:77">bytestream2_get_byte</name><argument_list pos:start="45:78" pos:end="45:82">(<argument pos:start="45:79" pos:end="45:81"><expr pos:start="45:79" pos:end="45:81"><operator pos:start="45:79" pos:end="45:79">&amp;</operator><name pos:start="45:80" pos:end="45:81">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:83"><expr pos:start="47:17" pos:end="47:82"><name pos:start="47:17" pos:end="47:54"><name pos:start="47:17" pos:end="47:19">hnm</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:28">current</name><index pos:start="47:29" pos:end="47:54">[<expr pos:start="47:30" pos:end="47:53"><name pos:start="47:30" pos:end="47:40">writeoffset</name> <operator pos:start="47:42" pos:end="47:42">+</operator> <name pos:start="47:44" pos:end="47:53"><name pos:start="47:44" pos:end="47:46">hnm</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:53">width</name></name></expr>]</index></name> <operator pos:start="47:56" pos:end="47:56">=</operator> <call pos:start="47:58" pos:end="47:82"><name pos:start="47:58" pos:end="47:77">bytestream2_get_byte</name><argument_list pos:start="47:78" pos:end="47:82">(<argument pos:start="47:79" pos:end="47:81"><expr pos:start="47:79" pos:end="47:81"><operator pos:start="47:79" pos:end="47:79">&amp;</operator><name pos:start="47:80" pos:end="47:81">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:30"><expr pos:start="49:17" pos:end="49:29"><name pos:start="49:17" pos:end="49:27">writeoffset</name><operator pos:start="49:28" pos:end="49:29">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="51:15" pos:end="55:13">else if <condition pos:start="51:23" pos:end="51:32">(<expr pos:start="51:24" pos:end="51:31"><name pos:start="51:24" pos:end="51:26">tag</name> <operator pos:start="51:28" pos:end="51:29">==</operator> <literal type="number" pos:start="51:31" pos:end="51:31">2</literal></expr>)</condition> <block pos:start="51:34" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:42">

                <expr_stmt pos:start="53:17" pos:end="53:42"><expr pos:start="53:17" pos:end="53:41"><name pos:start="53:17" pos:end="53:27">writeoffset</name> <operator pos:start="53:29" pos:end="53:30">+=</operator> <name pos:start="53:32" pos:end="53:41"><name pos:start="53:32" pos:end="53:34">hnm</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:41">width</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="55:15" pos:end="59:13">else if <condition pos:start="55:23" pos:end="55:32">(<expr pos:start="55:24" pos:end="55:31"><name pos:start="55:24" pos:end="55:26">tag</name> <operator pos:start="55:28" pos:end="55:29">==</operator> <literal type="number" pos:start="55:31" pos:end="55:31">3</literal></expr>)</condition> <block pos:start="55:34" pos:end="59:13">{<block_content pos:start="57:17" pos:end="57:22">

                <break pos:start="57:17" pos:end="57:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="61:13" pos:end="67:13"><if pos:start="61:13" pos:end="67:13">if <condition pos:start="61:16" pos:end="61:55">(<expr pos:start="61:17" pos:end="61:54"><name pos:start="61:17" pos:end="61:27">writeoffset</name> <operator pos:start="61:29" pos:end="61:29">&gt;</operator> <name pos:start="61:31" pos:end="61:40"><name pos:start="61:31" pos:end="61:33">hnm</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:40">width</name></name> <operator pos:start="61:42" pos:end="61:42">*</operator> <name pos:start="61:44" pos:end="61:54"><name pos:start="61:44" pos:end="61:46">hnm</name><operator pos:start="61:47" pos:end="61:48">-&gt;</operator><name pos:start="61:49" pos:end="61:54">height</name></name></expr>)</condition> <block pos:start="61:57" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:22">

                <expr_stmt pos:start="63:17" pos:end="63:75"><expr pos:start="63:17" pos:end="63:74"><call pos:start="63:17" pos:end="63:74"><name pos:start="63:17" pos:end="63:22">av_log</name><argument_list pos:start="63:23" pos:end="63:74">(<argument pos:start="63:24" pos:end="63:28"><expr pos:start="63:24" pos:end="63:28"><name pos:start="63:24" pos:end="63:28">avctx</name></expr></argument>, <argument pos:start="63:31" pos:end="63:42"><expr pos:start="63:31" pos:end="63:42"><name pos:start="63:31" pos:end="63:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:45" pos:end="63:73"><expr pos:start="63:45" pos:end="63:73"><literal type="string" pos:start="63:45" pos:end="63:73">"writeoffset out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="65:17" pos:end="65:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="69:11" pos:end="141:9">else <block pos:start="69:16" pos:end="141:9">{<block_content pos:start="71:13" pos:end="139:13">

            <expr_stmt pos:start="71:13" pos:end="71:57"><expr pos:start="71:13" pos:end="71:56"><name pos:start="71:13" pos:end="71:17">delta</name>    <operator pos:start="71:22" pos:end="71:22">=</operator> <call pos:start="71:24" pos:end="71:49"><name pos:start="71:24" pos:end="71:44">bytestream2_peek_byte</name><argument_list pos:start="71:45" pos:end="71:49">(<argument pos:start="71:46" pos:end="71:48"><expr pos:start="71:46" pos:end="71:48"><operator pos:start="71:46" pos:end="71:46">&amp;</operator><name pos:start="71:47" pos:end="71:48">gb</name></expr></argument>)</argument_list></call> <operator pos:start="71:51" pos:end="71:51">&amp;</operator> <literal type="number" pos:start="71:53" pos:end="71:56">0x80</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:57"><expr pos:start="73:13" pos:end="73:56"><name pos:start="73:13" pos:end="73:20">previous</name> <operator pos:start="73:22" pos:end="73:22">=</operator> <call pos:start="73:24" pos:end="73:49"><name pos:start="73:24" pos:end="73:44">bytestream2_peek_byte</name><argument_list pos:start="73:45" pos:end="73:49">(<argument pos:start="73:46" pos:end="73:48"><expr pos:start="73:46" pos:end="73:48"><operator pos:start="73:46" pos:end="73:46">&amp;</operator><name pos:start="73:47" pos:end="73:48">gb</name></expr></argument>)</argument_list></call> <operator pos:start="73:51" pos:end="73:51">&amp;</operator> <literal type="number" pos:start="73:53" pos:end="73:56">0x40</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:37"><expr pos:start="75:13" pos:end="75:36"><call pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:28">bytestream2_skip</name><argument_list pos:start="75:29" pos:end="75:36">(<argument pos:start="75:30" pos:end="75:32"><expr pos:start="75:30" pos:end="75:32"><operator pos:start="75:30" pos:end="75:30">&amp;</operator><name pos:start="75:31" pos:end="75:32">gb</name></expr></argument>, <argument pos:start="75:35" pos:end="75:35"><expr pos:start="75:35" pos:end="75:35"><literal type="number" pos:start="75:35" pos:end="75:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="79:13" pos:end="79:34"><expr pos:start="79:13" pos:end="79:33"><name pos:start="79:13" pos:end="79:18">offset</name>  <operator pos:start="79:21" pos:end="79:21">=</operator> <name pos:start="79:23" pos:end="79:33">writeoffset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:48"><expr pos:start="81:13" pos:end="81:47"><name pos:start="81:13" pos:end="81:18">offset</name> <operator pos:start="81:20" pos:end="81:21">+=</operator> <call pos:start="81:23" pos:end="81:47"><name pos:start="81:23" pos:end="81:42">bytestream2_get_le16</name><argument_list pos:start="81:43" pos:end="81:47">(<argument pos:start="81:44" pos:end="81:46"><expr pos:start="81:44" pos:end="81:46"><operator pos:start="81:44" pos:end="81:44">&amp;</operator><name pos:start="81:45" pos:end="81:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="85:13" pos:end="87:34"><if pos:start="85:13" pos:end="87:34">if <condition pos:start="85:16" pos:end="85:22">(<expr pos:start="85:17" pos:end="85:21"><name pos:start="85:17" pos:end="85:21">delta</name></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:34"><block_content pos:start="87:17" pos:end="87:34">

                <expr_stmt pos:start="87:17" pos:end="87:34"><expr pos:start="87:17" pos:end="87:33"><name pos:start="87:17" pos:end="87:22">offset</name> <operator pos:start="87:24" pos:end="87:25">-=</operator> <literal type="number" pos:start="87:27" pos:end="87:33">0x10000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="91:13" pos:end="103:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:72">(<expr pos:start="91:17" pos:end="91:71"><name pos:start="91:17" pos:end="91:22">offset</name> <operator pos:start="91:24" pos:end="91:24">+</operator> <name pos:start="91:26" pos:end="91:35"><name pos:start="91:26" pos:end="91:28">hnm</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:35">width</name></name> <operator pos:start="91:37" pos:end="91:37">+</operator> <name pos:start="91:39" pos:end="91:43">count</name> <operator pos:start="91:45" pos:end="91:46">&gt;=</operator> <name pos:start="91:48" pos:end="91:57"><name pos:start="91:48" pos:end="91:50">hnm</name><operator pos:start="91:51" pos:end="91:52">-&gt;</operator><name pos:start="91:53" pos:end="91:57">width</name></name> <operator pos:start="91:59" pos:end="91:59">*</operator> <name pos:start="91:61" pos:end="91:71"><name pos:start="91:61" pos:end="91:63">hnm</name><operator pos:start="91:64" pos:end="91:65">-&gt;</operator><name pos:start="91:66" pos:end="91:71">height</name></name></expr>)</condition> <block pos:start="91:74" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:22">

                <expr_stmt pos:start="93:17" pos:end="93:82"><expr pos:start="93:17" pos:end="93:81"><call pos:start="93:17" pos:end="93:81"><name pos:start="93:17" pos:end="93:22">av_log</name><argument_list pos:start="93:23" pos:end="93:81">(<argument pos:start="93:24" pos:end="93:28"><expr pos:start="93:24" pos:end="93:28"><name pos:start="93:24" pos:end="93:28">avctx</name></expr></argument>, <argument pos:start="93:31" pos:end="93:42"><expr pos:start="93:31" pos:end="93:42"><name pos:start="93:31" pos:end="93:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="93:45" pos:end="93:80"><expr pos:start="93:45" pos:end="93:80"><literal type="string" pos:start="93:45" pos:end="93:80">"Attempting to read out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="95:17" pos:end="95:22">break;</break>

            </block_content>}</block></if> <if type="elseif" pos:start="97:15" pos:end="103:13">else if <condition pos:start="97:23" pos:end="97:84">(<expr pos:start="97:24" pos:end="97:83"><name pos:start="97:24" pos:end="97:34">writeoffset</name> <operator pos:start="97:36" pos:end="97:36">+</operator> <name pos:start="97:38" pos:end="97:47"><name pos:start="97:38" pos:end="97:40">hnm</name><operator pos:start="97:41" pos:end="97:42">-&gt;</operator><name pos:start="97:43" pos:end="97:47">width</name></name> <operator pos:start="97:49" pos:end="97:49">+</operator> <name pos:start="97:51" pos:end="97:55">count</name> <operator pos:start="97:57" pos:end="97:58">&gt;=</operator> <name pos:start="97:60" pos:end="97:69"><name pos:start="97:60" pos:end="97:62">hnm</name><operator pos:start="97:63" pos:end="97:64">-&gt;</operator><name pos:start="97:65" pos:end="97:69">width</name></name> <operator pos:start="97:71" pos:end="97:71">*</operator> <name pos:start="97:73" pos:end="97:83"><name pos:start="97:73" pos:end="97:75">hnm</name><operator pos:start="97:76" pos:end="97:77">-&gt;</operator><name pos:start="97:78" pos:end="97:83">height</name></name></expr>)</condition> <block pos:start="97:86" pos:end="103:13">{<block_content pos:start="99:17" pos:end="101:22">

                <expr_stmt pos:start="99:17" pos:end="99:83"><expr pos:start="99:17" pos:end="99:82"><call pos:start="99:17" pos:end="99:82"><name pos:start="99:17" pos:end="99:22">av_log</name><argument_list pos:start="99:23" pos:end="99:82">(<argument pos:start="99:24" pos:end="99:28"><expr pos:start="99:24" pos:end="99:28"><name pos:start="99:24" pos:end="99:28">avctx</name></expr></argument>, <argument pos:start="99:31" pos:end="99:42"><expr pos:start="99:31" pos:end="99:42"><name pos:start="99:31" pos:end="99:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:45" pos:end="99:81"><expr pos:start="99:45" pos:end="99:81"><literal type="string" pos:start="99:45" pos:end="99:81">"Attempting to write out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="101:17" pos:end="101:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="107:13" pos:end="139:13"><if pos:start="107:13" pos:end="123:13">if <condition pos:start="107:16" pos:end="107:25">(<expr pos:start="107:17" pos:end="107:24"><name pos:start="107:17" pos:end="107:24">previous</name></expr>)</condition> <block pos:start="107:27" pos:end="123:13">{<block_content pos:start="109:17" pos:end="121:17">

                <while pos:start="109:17" pos:end="121:17">while <condition pos:start="109:23" pos:end="109:33">(<expr pos:start="109:24" pos:end="109:32"><name pos:start="109:24" pos:end="109:28">count</name> <operator pos:start="109:30" pos:end="109:30">&gt;</operator> <literal type="number" pos:start="109:32" pos:end="109:32">0</literal></expr>)</condition> <block pos:start="109:35" pos:end="121:17">{<block_content pos:start="111:21" pos:end="119:28">

                    <expr_stmt pos:start="111:21" pos:end="111:83"><expr pos:start="111:21" pos:end="111:82"><name pos:start="111:21" pos:end="111:45"><name pos:start="111:21" pos:end="111:23">hnm</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:32">current</name><index pos:start="111:33" pos:end="111:45">[<expr pos:start="111:34" pos:end="111:44"><name pos:start="111:34" pos:end="111:44">writeoffset</name></expr>]</index></name>              <operator pos:start="111:60" pos:end="111:60">=</operator> <name pos:start="111:62" pos:end="111:82"><name pos:start="111:62" pos:end="111:64">hnm</name><operator pos:start="111:65" pos:end="111:66">-&gt;</operator><name pos:start="111:67" pos:end="111:74">previous</name><index pos:start="111:75" pos:end="111:82">[<expr pos:start="111:76" pos:end="111:81"><name pos:start="111:76" pos:end="111:81">offset</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="113:21" pos:end="113:96"><expr pos:start="113:21" pos:end="113:95"><name pos:start="113:21" pos:end="113:58"><name pos:start="113:21" pos:end="113:23">hnm</name><operator pos:start="113:24" pos:end="113:25">-&gt;</operator><name pos:start="113:26" pos:end="113:32">current</name><index pos:start="113:33" pos:end="113:58">[<expr pos:start="113:34" pos:end="113:57"><name pos:start="113:34" pos:end="113:44">writeoffset</name> <operator pos:start="113:46" pos:end="113:46">+</operator> <name pos:start="113:48" pos:end="113:57"><name pos:start="113:48" pos:end="113:50">hnm</name><operator pos:start="113:51" pos:end="113:52">-&gt;</operator><name pos:start="113:53" pos:end="113:57">width</name></name></expr>]</index></name> <operator pos:start="113:60" pos:end="113:60">=</operator> <name pos:start="113:62" pos:end="113:95"><name pos:start="113:62" pos:end="113:64">hnm</name><operator pos:start="113:65" pos:end="113:66">-&gt;</operator><name pos:start="113:67" pos:end="113:74">previous</name><index pos:start="113:75" pos:end="113:95">[<expr pos:start="113:76" pos:end="113:94"><name pos:start="113:76" pos:end="113:81">offset</name> <operator pos:start="113:83" pos:end="113:83">+</operator> <name pos:start="113:85" pos:end="113:94"><name pos:start="113:85" pos:end="113:87">hnm</name><operator pos:start="113:88" pos:end="113:89">-&gt;</operator><name pos:start="113:90" pos:end="113:94">width</name></name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="115:21" pos:end="115:34"><expr pos:start="115:21" pos:end="115:33"><name pos:start="115:21" pos:end="115:31">writeoffset</name><operator pos:start="115:32" pos:end="115:33">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:29"><expr pos:start="117:21" pos:end="117:28"><name pos:start="117:21" pos:end="117:26">offset</name><operator pos:start="117:27" pos:end="117:28">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:28"><expr pos:start="119:21" pos:end="119:27"><name pos:start="119:21" pos:end="119:25">count</name><operator pos:start="119:26" pos:end="119:27">--</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></if> <else pos:start="123:15" pos:end="139:13">else <block pos:start="123:20" pos:end="139:13">{<block_content pos:start="125:17" pos:end="137:17">

                <while pos:start="125:17" pos:end="137:17">while <condition pos:start="125:23" pos:end="125:33">(<expr pos:start="125:24" pos:end="125:32"><name pos:start="125:24" pos:end="125:28">count</name> <operator pos:start="125:30" pos:end="125:30">&gt;</operator> <literal type="number" pos:start="125:32" pos:end="125:32">0</literal></expr>)</condition> <block pos:start="125:35" pos:end="137:17">{<block_content pos:start="127:21" pos:end="135:28">

                    <expr_stmt pos:start="127:21" pos:end="127:82"><expr pos:start="127:21" pos:end="127:81"><name pos:start="127:21" pos:end="127:45"><name pos:start="127:21" pos:end="127:23">hnm</name><operator pos:start="127:24" pos:end="127:25">-&gt;</operator><name pos:start="127:26" pos:end="127:32">current</name><index pos:start="127:33" pos:end="127:45">[<expr pos:start="127:34" pos:end="127:44"><name pos:start="127:34" pos:end="127:44">writeoffset</name></expr>]</index></name>              <operator pos:start="127:60" pos:end="127:60">=</operator> <name pos:start="127:62" pos:end="127:81"><name pos:start="127:62" pos:end="127:64">hnm</name><operator pos:start="127:65" pos:end="127:66">-&gt;</operator><name pos:start="127:67" pos:end="127:73">current</name><index pos:start="127:74" pos:end="127:81">[<expr pos:start="127:75" pos:end="127:80"><name pos:start="127:75" pos:end="127:80">offset</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:95"><expr pos:start="129:21" pos:end="129:94"><name pos:start="129:21" pos:end="129:58"><name pos:start="129:21" pos:end="129:23">hnm</name><operator pos:start="129:24" pos:end="129:25">-&gt;</operator><name pos:start="129:26" pos:end="129:32">current</name><index pos:start="129:33" pos:end="129:58">[<expr pos:start="129:34" pos:end="129:57"><name pos:start="129:34" pos:end="129:44">writeoffset</name> <operator pos:start="129:46" pos:end="129:46">+</operator> <name pos:start="129:48" pos:end="129:57"><name pos:start="129:48" pos:end="129:50">hnm</name><operator pos:start="129:51" pos:end="129:52">-&gt;</operator><name pos:start="129:53" pos:end="129:57">width</name></name></expr>]</index></name> <operator pos:start="129:60" pos:end="129:60">=</operator> <name pos:start="129:62" pos:end="129:94"><name pos:start="129:62" pos:end="129:64">hnm</name><operator pos:start="129:65" pos:end="129:66">-&gt;</operator><name pos:start="129:67" pos:end="129:73">current</name><index pos:start="129:74" pos:end="129:94">[<expr pos:start="129:75" pos:end="129:93"><name pos:start="129:75" pos:end="129:80">offset</name> <operator pos:start="129:82" pos:end="129:82">+</operator> <name pos:start="129:84" pos:end="129:93"><name pos:start="129:84" pos:end="129:86">hnm</name><operator pos:start="129:87" pos:end="129:88">-&gt;</operator><name pos:start="129:89" pos:end="129:93">width</name></name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="131:21" pos:end="131:34"><expr pos:start="131:21" pos:end="131:33"><name pos:start="131:21" pos:end="131:31">writeoffset</name><operator pos:start="131:32" pos:end="131:33">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="133:21" pos:end="133:29"><expr pos:start="133:21" pos:end="133:28"><name pos:start="133:21" pos:end="133:26">offset</name><operator pos:start="133:27" pos:end="133:28">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="135:21" pos:end="135:28"><expr pos:start="135:21" pos:end="135:27"><name pos:start="135:21" pos:end="135:25">count</name><operator pos:start="135:26" pos:end="135:27">--</operator></expr>;</expr_stmt>

                </block_content>}</block></while>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
