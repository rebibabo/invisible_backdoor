<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25996.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:37">kvm_handle_internal_error</name><parameter_list pos:start="1:38" pos:end="1:73">(<parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:46">CPUState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">env</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:72"><decl pos:start="1:54" pos:end="1:72"><type pos:start="1:54" pos:end="1:72"><name pos:start="1:54" pos:end="1:67"><name pos:start="1:54" pos:end="1:59">struct</name> <name pos:start="1:61" pos:end="1:67">kvm_run</name></name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">run</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="7:5" pos:end="49:15">



    <if_stmt pos:start="7:5" pos:end="27:5"><if pos:start="7:5" pos:end="27:5">if <condition pos:start="7:8" pos:end="7:68">(<expr pos:start="7:9" pos:end="7:67"><call pos:start="7:9" pos:end="7:67"><name pos:start="7:9" pos:end="7:27">kvm_check_extension</name><argument_list pos:start="7:28" pos:end="7:67">(<argument pos:start="7:29" pos:end="7:37"><expr pos:start="7:29" pos:end="7:37"><name pos:start="7:29" pos:end="7:37">kvm_state</name></expr></argument>, <argument pos:start="7:40" pos:end="7:66"><expr pos:start="7:40" pos:end="7:66"><name pos:start="7:40" pos:end="7:66">KVM_CAP_INTERNAL_ERROR_DATA</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7:70" pos:end="27:5">{<block_content pos:start="9:9" pos:end="25:9">

        <decl_stmt pos:start="9:9" pos:end="9:14"><decl pos:start="9:9" pos:end="9:13"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="13:9" pos:end="15:40"><expr pos:start="13:9" pos:end="15:39"><call pos:start="13:9" pos:end="15:39"><name pos:start="13:9" pos:end="13:15">fprintf</name><argument_list pos:start="13:16" pos:end="15:39">(<argument pos:start="13:17" pos:end="13:22"><expr pos:start="13:17" pos:end="13:22"><name pos:start="13:17" pos:end="13:22">stderr</name></expr></argument>, <argument pos:start="13:25" pos:end="13:60"><expr pos:start="13:25" pos:end="13:60"><literal type="string" pos:start="13:25" pos:end="13:60">"KVM internal error. Suberror: %d\n"</literal></expr></argument>,

                <argument pos:start="15:17" pos:end="15:38"><expr pos:start="15:17" pos:end="15:38"><name pos:start="15:17" pos:end="15:38"><name pos:start="15:17" pos:end="15:19">run</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:29">internal</name><operator pos:start="15:30" pos:end="15:30">.</operator><name pos:start="15:31" pos:end="15:38">suberror</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="19:9" pos:end="25:9">for <control pos:start="19:13" pos:end="19:49">(<init pos:start="19:14" pos:end="19:19"><expr pos:start="19:14" pos:end="19:18"><name pos:start="19:14" pos:end="19:14">i</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>;</init> <condition pos:start="19:21" pos:end="19:44"><expr pos:start="19:21" pos:end="19:43"><name pos:start="19:21" pos:end="19:21">i</name> <operator pos:start="19:23" pos:end="19:23">&lt;</operator> <name pos:start="19:25" pos:end="19:43"><name pos:start="19:25" pos:end="19:27">run</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:37">internal</name><operator pos:start="19:38" pos:end="19:38">.</operator><name pos:start="19:39" pos:end="19:43">ndata</name></name></expr>;</condition> <incr pos:start="19:46" pos:end="19:48"><expr pos:start="19:46" pos:end="19:48"><operator pos:start="19:46" pos:end="19:47">++</operator><name pos:start="19:48" pos:end="19:48">i</name></expr></incr>)</control> <block pos:start="19:51" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:56">

            <expr_stmt pos:start="21:13" pos:end="23:56"><expr pos:start="21:13" pos:end="23:55"><call pos:start="21:13" pos:end="23:55"><name pos:start="21:13" pos:end="21:19">fprintf</name><argument_list pos:start="21:20" pos:end="23:55">(<argument pos:start="21:21" pos:end="21:26"><expr pos:start="21:21" pos:end="21:26"><name pos:start="21:21" pos:end="21:26">stderr</name></expr></argument>, <argument pos:start="21:29" pos:end="21:57"><expr pos:start="21:29" pos:end="21:57"><literal type="string" pos:start="21:29" pos:end="21:47">"extra data[%d]: %"</literal><name pos:start="21:48" pos:end="21:53">PRIx64</name><literal type="string" pos:start="21:54" pos:end="21:57">"\n"</literal></expr></argument>,

                    <argument pos:start="23:21" pos:end="23:21"><expr pos:start="23:21" pos:end="23:21"><name pos:start="23:21" pos:end="23:21">i</name></expr></argument>, <argument pos:start="23:24" pos:end="23:54"><expr pos:start="23:24" pos:end="23:54"><operator pos:start="23:24" pos:end="23:24">(</operator><name pos:start="23:25" pos:end="23:32">uint64_t</name><operator pos:start="23:33" pos:end="23:33">)</operator><name pos:start="23:34" pos:end="23:54"><name pos:start="23:34" pos:end="23:36">run</name><operator pos:start="23:37" pos:end="23:38">-&gt;</operator><name pos:start="23:39" pos:end="23:46">internal</name><operator pos:start="23:47" pos:end="23:47">.</operator><name pos:start="23:48" pos:end="23:51">data</name><index pos:start="23:52" pos:end="23:54">[<expr pos:start="23:53" pos:end="23:53"><name pos:start="23:53" pos:end="23:53">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:44"><expr pos:start="29:5" pos:end="29:43"><call pos:start="29:5" pos:end="29:43"><name pos:start="29:5" pos:end="29:18">cpu_dump_state</name><argument_list pos:start="29:19" pos:end="29:43">(<argument pos:start="29:20" pos:end="29:22"><expr pos:start="29:20" pos:end="29:22"><name pos:start="29:20" pos:end="29:22">env</name></expr></argument>, <argument pos:start="29:25" pos:end="29:30"><expr pos:start="29:25" pos:end="29:30"><name pos:start="29:25" pos:end="29:30">stderr</name></expr></argument>, <argument pos:start="29:33" pos:end="29:39"><expr pos:start="29:33" pos:end="29:39"><name pos:start="29:33" pos:end="29:39">fprintf</name></expr></argument>, <argument pos:start="29:42" pos:end="29:42"><expr pos:start="29:42" pos:end="29:42"><literal type="number" pos:start="29:42" pos:end="29:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="41:5"><if pos:start="31:5" pos:end="41:5">if <condition pos:start="31:8" pos:end="31:63">(<expr pos:start="31:9" pos:end="31:62"><name pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:11">run</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:21">internal</name><operator pos:start="31:22" pos:end="31:22">.</operator><name pos:start="31:23" pos:end="31:30">suberror</name></name> <operator pos:start="31:32" pos:end="31:33">==</operator> <name pos:start="31:35" pos:end="31:62">KVM_INTERNAL_ERROR_EMULATION</name></expr>)</condition> <block pos:start="31:65" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:9">

        <expr_stmt pos:start="33:9" pos:end="33:47"><expr pos:start="33:9" pos:end="33:46"><call pos:start="33:9" pos:end="33:46"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:46">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:45"><expr pos:start="33:25" pos:end="33:45"><literal type="string" pos:start="33:25" pos:end="33:45">"emulation failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:51">(<expr pos:start="35:13" pos:end="35:50"><operator pos:start="35:13" pos:end="35:13">!</operator><call pos:start="35:14" pos:end="35:50"><name pos:start="35:14" pos:end="35:45">kvm_arch_stop_on_emulation_error</name><argument_list pos:start="35:46" pos:end="35:50">(<argument pos:start="35:47" pos:end="35:49"><expr pos:start="35:47" pos:end="35:49"><name pos:start="35:47" pos:end="35:49">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:53" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:19">

            <return pos:start="37:13" pos:end="37:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="43:5" pos:end="47:7">/* FIXME: Should trigger a qmp message to let management know

     * something went wrong.

     */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:15"><expr pos:start="49:5" pos:end="49:14"><call pos:start="49:5" pos:end="49:14"><name pos:start="49:5" pos:end="49:11">vm_stop</name><argument_list pos:start="49:12" pos:end="49:14">(<argument pos:start="49:13" pos:end="49:13"><expr pos:start="49:13" pos:end="49:13"><literal type="number" pos:start="49:13" pos:end="49:13">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
