<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7759.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <modifier pos:start="1:20" pos:end="1:20">*</modifier></type><name pos:start="1:21" pos:end="1:41">alloc_code_gen_buffer</name><parameter_list pos:start="1:42" pos:end="1:47">(<parameter pos:start="1:43" pos:end="1:46"><decl pos:start="1:43" pos:end="1:46"><type pos:start="1:43" pos:end="1:46"><name pos:start="1:43" pos:end="1:46">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="165:1">{<block_content pos:start="5:5" pos:end="163:15">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">flags</name> <init pos:start="5:15" pos:end="5:43">= <expr pos:start="5:17" pos:end="5:43"><name pos:start="5:17" pos:end="5:27">MAP_PRIVATE</name> <operator pos:start="5:29" pos:end="5:29">|</operator> <name pos:start="5:31" pos:end="5:43">MAP_ANONYMOUS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">uintptr_t</name></type> <name pos:start="7:15" pos:end="7:19">start</name> <init pos:start="7:21" pos:end="7:23">= <expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:15">size</name> <init pos:start="9:17" pos:end="9:46">= <expr pos:start="9:19" pos:end="9:46"><name pos:start="9:19" pos:end="9:46"><name pos:start="9:19" pos:end="9:25">tcg_ctx</name><operator pos:start="9:26" pos:end="9:26">.</operator><name pos:start="9:27" pos:end="9:46">code_gen_buffer_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="32:0"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:13">buf</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="19:65">/* Constrain the position of the buffer based on the host cpu.

       Note that these addresses are chosen in concert with the

       addresses assigned in the relevant linker script file.  */</comment>

<cpp:if pos:start="21:1" pos:end="21:41"># <cpp:directive pos:start="21:3" pos:end="21:4">if</cpp:directive> <expr pos:start="21:6" pos:end="21:41"><call pos:start="21:6" pos:end="21:21"><name pos:start="21:6" pos:end="21:12">defined</name><argument_list pos:start="21:13" pos:end="21:21">(<argument pos:start="21:14" pos:end="21:20"><expr pos:start="21:14" pos:end="21:20"><name pos:start="21:14" pos:end="21:20">__PIE__</name></expr></argument>)</argument_list></call> <operator pos:start="21:23" pos:end="21:24">||</operator> <call pos:start="21:26" pos:end="21:41"><name pos:start="21:26" pos:end="21:32">defined</name><argument_list pos:start="21:33" pos:end="21:41">(<argument pos:start="21:34" pos:end="21:40"><expr pos:start="21:34" pos:end="21:40"><name pos:start="21:34" pos:end="21:40">__PIC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="23:5" pos:end="29:30">/* Don't bother setting a preferred location if we're building

       a position-independent executable.  We're more likely to get

       an address near the main executable if we let the kernel

       choose the address.  */</comment>

<cpp:elif pos:start="31:1" pos:end="31:48"># <cpp:directive pos:start="31:3" pos:end="31:6">elif</cpp:directive> <expr pos:start="31:8" pos:end="31:48"><call pos:start="31:8" pos:end="31:26"><name pos:start="31:8" pos:end="31:14">defined</name><argument_list pos:start="31:15" pos:end="31:26">(<argument pos:start="31:16" pos:end="31:25"><expr pos:start="31:16" pos:end="31:25"><name pos:start="31:16" pos:end="31:25">__x86_64__</name></expr></argument>)</argument_list></call> <operator pos:start="31:28" pos:end="31:29">&amp;&amp;</operator> <call pos:start="31:31" pos:end="31:48"><name pos:start="31:31" pos:end="31:37">defined</name><argument_list pos:start="31:38" pos:end="31:48">(<argument pos:start="31:39" pos:end="31:47"><expr pos:start="31:39" pos:end="31:47"><name pos:start="31:39" pos:end="31:47">MAP_32BIT</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <comment type="block" pos:start="33:5" pos:end="35:62">/* Force the memory down into low memory with the executable.

       Leave the choice of exact location with the kernel.  */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:23"><expr pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:9">flags</name> <operator pos:start="37:11" pos:end="37:12">|=</operator> <name pos:start="37:14" pos:end="37:22">MAP_32BIT</name></expr>;</expr_stmt>

    <comment type="block" pos:start="39:5" pos:end="39:62">/* Cannot expect to map more than 800MB in low memory.  */</comment>

    <if_stmt pos:start="41:5" pos:end="48:0"><if pos:start="41:5" pos:end="48:0">if <condition pos:start="41:8" pos:end="41:34">(<expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:12">size</name> <operator pos:start="41:14" pos:end="41:14">&gt;</operator> <literal type="number" pos:start="41:16" pos:end="41:19">800u</literal> <operator pos:start="41:21" pos:end="41:21">*</operator> <literal type="number" pos:start="41:23" pos:end="41:26">1024</literal> <operator pos:start="41:28" pos:end="41:28">*</operator> <literal type="number" pos:start="41:30" pos:end="41:33">1024</literal></expr>)</condition> <block pos:start="41:36" pos:end="48:0">{<block_content pos:start="43:9" pos:end="43:65">

        <expr_stmt pos:start="43:9" pos:end="43:65"><expr pos:start="43:9" pos:end="43:64"><name pos:start="43:9" pos:end="43:36"><name pos:start="43:9" pos:end="43:15">tcg_ctx</name><operator pos:start="43:16" pos:end="43:16">.</operator><name pos:start="43:17" pos:end="43:36">code_gen_buffer_size</name></name> <operator pos:start="43:38" pos:end="43:38">=</operator> <name pos:start="43:40" pos:end="43:43">size</name> <operator pos:start="43:45" pos:end="43:45">=</operator> <literal type="number" pos:start="43:47" pos:end="43:50">800u</literal> <operator pos:start="43:52" pos:end="43:52">*</operator> <literal type="number" pos:start="43:54" pos:end="43:57">1024</literal> <operator pos:start="43:59" pos:end="43:59">*</operator> <literal type="number" pos:start="43:61" pos:end="43:64">1024</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:elif pos:start="47:1" pos:end="47:25"># <cpp:directive pos:start="47:3" pos:end="47:6">elif</cpp:directive> <expr pos:start="47:8" pos:end="47:25"><call pos:start="47:8" pos:end="47:25"><name pos:start="47:8" pos:end="47:14">defined</name><argument_list pos:start="47:15" pos:end="47:25">(<argument pos:start="47:16" pos:end="47:24"><expr pos:start="47:16" pos:end="47:24"><name pos:start="47:16" pos:end="47:24">__sparc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:9">start</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <literal type="number" pos:start="49:13" pos:end="49:24">0x40000000ul</literal></expr>;</expr_stmt>

<cpp:elif pos:start="51:1" pos:end="51:25"># <cpp:directive pos:start="51:3" pos:end="51:6">elif</cpp:directive> <expr pos:start="51:8" pos:end="51:25"><call pos:start="51:8" pos:end="51:25"><name pos:start="51:8" pos:end="51:14">defined</name><argument_list pos:start="51:15" pos:end="51:25">(<argument pos:start="51:16" pos:end="51:24"><expr pos:start="51:16" pos:end="51:24"><name pos:start="51:16" pos:end="51:24">__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <expr_stmt pos:start="53:5" pos:end="58:0"><expr pos:start="53:5" pos:end="53:24"><name pos:start="53:5" pos:end="53:9">start</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <literal type="number" pos:start="53:13" pos:end="53:24">0x90000000ul</literal></expr>;</expr_stmt>

<cpp:elif pos:start="55:1" pos:end="55:24"># <cpp:directive pos:start="55:3" pos:end="55:6">elif</cpp:directive> <expr pos:start="55:8" pos:end="55:24"><call pos:start="55:8" pos:end="55:24"><name pos:start="55:8" pos:end="55:14">defined</name><argument_list pos:start="55:15" pos:end="55:24">(<argument pos:start="55:16" pos:end="55:23"><expr pos:start="55:16" pos:end="55:23"><name pos:start="55:16" pos:end="55:23">__mips__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:if pos:start="57:1" pos:end="57:25">#  <cpp:directive pos:start="57:4" pos:end="57:5">if</cpp:directive> <expr pos:start="57:7" pos:end="57:25"><name pos:start="57:7" pos:end="57:15">_MIPS_SIM</name> <operator pos:start="57:17" pos:end="57:18">==</operator> <name pos:start="57:20" pos:end="57:25">_ABI64</name></expr></cpp:if>

    <expr_stmt pos:start="59:5" pos:end="62:0"><expr pos:start="59:5" pos:end="59:25"><name pos:start="59:5" pos:end="59:9">start</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <literal type="number" pos:start="59:13" pos:end="59:25">0x128000000ul</literal></expr>;</expr_stmt>

<cpp:else pos:start="61:1" pos:end="61:7">#  <cpp:directive pos:start="61:4" pos:end="61:7">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="63:5" pos:end="68:0"><expr pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:9">start</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <literal type="number" pos:start="63:13" pos:end="63:24">0x08000000ul</literal></expr>;</expr_stmt>

<cpp:endif pos:start="65:1" pos:end="65:8">#  <cpp:directive pos:start="65:4" pos:end="65:8">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="67:1" pos:end="67:7"># <cpp:directive pos:start="67:3" pos:end="67:7">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="71:5" pos:end="73:40"><expr pos:start="71:5" pos:end="73:39"><name pos:start="71:5" pos:end="71:7">buf</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="73:39"><name pos:start="71:11" pos:end="71:14">mmap</name><argument_list pos:start="71:15" pos:end="73:39">(<argument pos:start="71:16" pos:end="71:28"><expr pos:start="71:16" pos:end="71:28"><operator pos:start="71:16" pos:end="71:16">(</operator><name pos:start="71:17" pos:end="71:20">void</name> <operator pos:start="71:22" pos:end="71:22">*</operator><operator pos:start="71:23" pos:end="71:23">)</operator><name pos:start="71:24" pos:end="71:28">start</name></expr></argument>, <argument pos:start="71:31" pos:end="71:61"><expr pos:start="71:31" pos:end="71:61"><name pos:start="71:31" pos:end="71:34">size</name> <operator pos:start="71:36" pos:end="71:36">+</operator> <name pos:start="71:38" pos:end="71:61">qemu_real_host_page_size</name></expr></argument>,

               <argument pos:start="73:16" pos:end="73:24"><expr pos:start="73:16" pos:end="73:24"><name pos:start="73:16" pos:end="73:24">PROT_NONE</name></expr></argument>, <argument pos:start="73:27" pos:end="73:31"><expr pos:start="73:27" pos:end="73:31"><name pos:start="73:27" pos:end="73:31">flags</name></expr></argument>, <argument pos:start="73:34" pos:end="73:35"><expr pos:start="73:34" pos:end="73:35"><operator pos:start="73:34" pos:end="73:34">-</operator><literal type="number" pos:start="73:35" pos:end="73:35">1</literal></expr></argument>, <argument pos:start="73:38" pos:end="73:38"><expr pos:start="73:38" pos:end="73:38"><literal type="number" pos:start="73:38" pos:end="73:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="84:0"><if pos:start="75:5" pos:end="84:0">if <condition pos:start="75:8" pos:end="75:26">(<expr pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:11">buf</name> <operator pos:start="75:13" pos:end="75:14">==</operator> <name pos:start="75:16" pos:end="75:25">MAP_FAILED</name></expr>)</condition> <block pos:start="75:28" pos:end="84:0">{<block_content pos:start="77:9" pos:end="77:20">

        <return pos:start="77:9" pos:end="77:20">return <expr pos:start="77:16" pos:end="77:19"><name pos:start="77:16" pos:end="77:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="83:1" pos:end="83:15">#<cpp:directive pos:start="83:2" pos:end="83:6">ifdef</cpp:directive> <name pos:start="83:8" pos:end="83:15">__mips__</name></cpp:ifdef>

    <if_stmt pos:start="85:5" pos:end="146:0"><if pos:start="85:5" pos:end="146:0">if <condition pos:start="85:8" pos:end="85:31">(<expr pos:start="85:9" pos:end="85:30"><call pos:start="85:9" pos:end="85:30"><name pos:start="85:9" pos:end="85:19">cross_256mb</name><argument_list pos:start="85:20" pos:end="85:30">(<argument pos:start="85:21" pos:end="85:23"><expr pos:start="85:21" pos:end="85:23"><name pos:start="85:21" pos:end="85:23">buf</name></expr></argument>, <argument pos:start="85:26" pos:end="85:29"><expr pos:start="85:26" pos:end="85:29"><name pos:start="85:26" pos:end="85:29">size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:33" pos:end="146:0">{<block_content pos:start="91:9" pos:end="141:19">

        <comment type="block" pos:start="87:9" pos:end="89:72">/* Try again, with the original still mapped, to avoid re-acquiring

           that 256mb crossing.  This time don't specify an address.  */</comment>

        <decl_stmt pos:start="91:9" pos:end="91:21"><decl pos:start="91:9" pos:end="91:20"><type pos:start="91:9" pos:end="91:14"><name pos:start="91:9" pos:end="91:14">size_t</name></type> <name pos:start="91:16" pos:end="91:20">size2</name></decl>;</decl_stmt>

        <decl_stmt pos:start="93:9" pos:end="95:51"><decl pos:start="93:9" pos:end="95:50"><type pos:start="93:9" pos:end="93:14"><name pos:start="93:9" pos:end="93:12">void</name> <modifier pos:start="93:14" pos:end="93:14">*</modifier></type><name pos:start="93:15" pos:end="93:18">buf2</name> <init pos:start="93:20" pos:end="95:50">= <expr pos:start="93:22" pos:end="95:50"><call pos:start="93:22" pos:end="95:50"><name pos:start="93:22" pos:end="93:25">mmap</name><argument_list pos:start="93:26" pos:end="95:50">(<argument pos:start="93:27" pos:end="93:30"><expr pos:start="93:27" pos:end="93:30"><name pos:start="93:27" pos:end="93:30">NULL</name></expr></argument>, <argument pos:start="93:33" pos:end="93:63"><expr pos:start="93:33" pos:end="93:63"><name pos:start="93:33" pos:end="93:36">size</name> <operator pos:start="93:38" pos:end="93:38">+</operator> <name pos:start="93:40" pos:end="93:63">qemu_real_host_page_size</name></expr></argument>,

                          <argument pos:start="95:27" pos:end="95:35"><expr pos:start="95:27" pos:end="95:35"><name pos:start="95:27" pos:end="95:35">PROT_NONE</name></expr></argument>, <argument pos:start="95:38" pos:end="95:42"><expr pos:start="95:38" pos:end="95:42"><name pos:start="95:38" pos:end="95:42">flags</name></expr></argument>, <argument pos:start="95:45" pos:end="95:46"><expr pos:start="95:45" pos:end="95:46"><operator pos:start="95:45" pos:end="95:45">-</operator><literal type="number" pos:start="95:46" pos:end="95:46">1</literal></expr></argument>, <argument pos:start="95:49" pos:end="95:49"><expr pos:start="95:49" pos:end="95:49"><literal type="number" pos:start="95:49" pos:end="95:49">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <switch pos:start="97:9" pos:end="139:9">switch <condition pos:start="97:16" pos:end="97:35">(<expr pos:start="97:17" pos:end="97:34"><name pos:start="97:17" pos:end="97:20">buf2</name> <operator pos:start="97:22" pos:end="97:23">!=</operator> <name pos:start="97:25" pos:end="97:34">MAP_FAILED</name></expr>)</condition> <block pos:start="97:37" pos:end="139:9">{<block_content pos:start="99:9" pos:end="137:18">

        <case pos:start="99:9" pos:end="99:15">case <expr pos:start="99:14" pos:end="99:14"><literal type="number" pos:start="99:14" pos:end="99:14">1</literal></expr>:</case>

            <if_stmt pos:start="101:13" pos:end="109:13"><if pos:start="101:13" pos:end="109:13">if <condition pos:start="101:16" pos:end="101:41">(<expr pos:start="101:17" pos:end="101:40"><operator pos:start="101:17" pos:end="101:17">!</operator><call pos:start="101:18" pos:end="101:40"><name pos:start="101:18" pos:end="101:28">cross_256mb</name><argument_list pos:start="101:29" pos:end="101:40">(<argument pos:start="101:30" pos:end="101:33"><expr pos:start="101:30" pos:end="101:33"><name pos:start="101:30" pos:end="101:33">buf2</name></expr></argument>, <argument pos:start="101:36" pos:end="101:39"><expr pos:start="101:36" pos:end="101:39"><name pos:start="101:36" pos:end="101:39">size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:43" pos:end="109:13">{<block_content pos:start="105:17" pos:end="107:22">

                <comment type="block" pos:start="103:17" pos:end="103:52">/* Success!  Use the new buffer.  */</comment>

                <expr_stmt pos:start="105:17" pos:end="105:34"><expr pos:start="105:17" pos:end="105:33"><call pos:start="105:17" pos:end="105:33"><name pos:start="105:17" pos:end="105:22">munmap</name><argument_list pos:start="105:23" pos:end="105:33">(<argument pos:start="105:24" pos:end="105:26"><expr pos:start="105:24" pos:end="105:26"><name pos:start="105:24" pos:end="105:26">buf</name></expr></argument>, <argument pos:start="105:29" pos:end="105:32"><expr pos:start="105:29" pos:end="105:32"><name pos:start="105:29" pos:end="105:32">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="107:17" pos:end="107:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="111:13" pos:end="111:51">/* Failure.  Work with what we had.  */</comment>

            <expr_stmt pos:start="113:13" pos:end="113:31"><expr pos:start="113:13" pos:end="113:30"><call pos:start="113:13" pos:end="113:30"><name pos:start="113:13" pos:end="113:18">munmap</name><argument_list pos:start="113:19" pos:end="113:30">(<argument pos:start="113:20" pos:end="113:23"><expr pos:start="113:20" pos:end="113:23"><name pos:start="113:20" pos:end="113:23">buf2</name></expr></argument>, <argument pos:start="113:26" pos:end="113:29"><expr pos:start="113:26" pos:end="113:29"><name pos:start="113:26" pos:end="113:29">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="115:13" pos:end="115:26">/* fallthru */</comment>

        <default pos:start="117:9" pos:end="117:16">default:</default>

            <comment type="block" pos:start="119:13" pos:end="119:69">/* Split the original buffer.  Free the smaller half.  */</comment>

            <expr_stmt pos:start="121:13" pos:end="121:48"><expr pos:start="121:13" pos:end="121:47"><name pos:start="121:13" pos:end="121:16">buf2</name> <operator pos:start="121:18" pos:end="121:18">=</operator> <call pos:start="121:20" pos:end="121:47"><name pos:start="121:20" pos:end="121:36">split_cross_256mb</name><argument_list pos:start="121:37" pos:end="121:47">(<argument pos:start="121:38" pos:end="121:40"><expr pos:start="121:38" pos:end="121:40"><name pos:start="121:38" pos:end="121:40">buf</name></expr></argument>, <argument pos:start="121:43" pos:end="121:46"><expr pos:start="121:43" pos:end="121:46"><name pos:start="121:43" pos:end="121:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:49"><expr pos:start="123:13" pos:end="123:48"><name pos:start="123:13" pos:end="123:17">size2</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <name pos:start="123:21" pos:end="123:48"><name pos:start="123:21" pos:end="123:27">tcg_ctx</name><operator pos:start="123:28" pos:end="123:28">.</operator><name pos:start="123:29" pos:end="123:48">code_gen_buffer_size</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="125:13" pos:end="133:13"><if pos:start="125:13" pos:end="129:13">if <condition pos:start="125:16" pos:end="125:28">(<expr pos:start="125:17" pos:end="125:27"><name pos:start="125:17" pos:end="125:19">buf</name> <operator pos:start="125:21" pos:end="125:22">==</operator> <name pos:start="125:24" pos:end="125:27">buf2</name></expr>)</condition> <block pos:start="125:30" pos:end="129:13">{<block_content pos:start="127:17" pos:end="127:77">

                <expr_stmt pos:start="127:17" pos:end="127:77"><expr pos:start="127:17" pos:end="127:76"><call pos:start="127:17" pos:end="127:76"><name pos:start="127:17" pos:end="127:22">munmap</name><argument_list pos:start="127:23" pos:end="127:76">(<argument pos:start="127:24" pos:end="127:61"><expr pos:start="127:24" pos:end="127:61"><name pos:start="127:24" pos:end="127:26">buf</name> <operator pos:start="127:28" pos:end="127:28">+</operator> <name pos:start="127:30" pos:end="127:34">size2</name> <operator pos:start="127:36" pos:end="127:36">+</operator> <name pos:start="127:38" pos:end="127:61">qemu_real_host_page_size</name></expr></argument>, <argument pos:start="127:64" pos:end="127:75"><expr pos:start="127:64" pos:end="127:75"><name pos:start="127:64" pos:end="127:67">size</name> <operator pos:start="127:69" pos:end="127:69">-</operator> <name pos:start="127:71" pos:end="127:75">size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="129:15" pos:end="133:13">else <block pos:start="129:20" pos:end="133:13">{<block_content pos:start="131:17" pos:end="131:42">

                <expr_stmt pos:start="131:17" pos:end="131:42"><expr pos:start="131:17" pos:end="131:41"><call pos:start="131:17" pos:end="131:41"><name pos:start="131:17" pos:end="131:22">munmap</name><argument_list pos:start="131:23" pos:end="131:41">(<argument pos:start="131:24" pos:end="131:26"><expr pos:start="131:24" pos:end="131:26"><name pos:start="131:24" pos:end="131:26">buf</name></expr></argument>, <argument pos:start="131:29" pos:end="131:40"><expr pos:start="131:29" pos:end="131:40"><name pos:start="131:29" pos:end="131:32">size</name> <operator pos:start="131:34" pos:end="131:34">-</operator> <name pos:start="131:36" pos:end="131:40">size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:25"><expr pos:start="135:13" pos:end="135:24"><name pos:start="135:13" pos:end="135:16">size</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <name pos:start="135:20" pos:end="135:24">size2</name></expr>;</expr_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="141:9" pos:end="141:19"><expr pos:start="141:9" pos:end="141:18"><name pos:start="141:9" pos:end="141:11">buf</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <name pos:start="141:15" pos:end="141:18">buf2</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="145:1" pos:end="145:6">#<cpp:directive pos:start="145:2" pos:end="145:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="149:5" pos:end="151:51">/* Make the final buffer accessible.  The guard page at the end

       will remain inaccessible with PROT_NONE.  */</comment>

    <expr_stmt pos:start="153:5" pos:end="153:60"><expr pos:start="153:5" pos:end="153:59"><call pos:start="153:5" pos:end="153:59"><name pos:start="153:5" pos:end="153:12">mprotect</name><argument_list pos:start="153:13" pos:end="153:59">(<argument pos:start="153:14" pos:end="153:16"><expr pos:start="153:14" pos:end="153:16"><name pos:start="153:14" pos:end="153:16">buf</name></expr></argument>, <argument pos:start="153:19" pos:end="153:22"><expr pos:start="153:19" pos:end="153:22"><name pos:start="153:19" pos:end="153:22">size</name></expr></argument>, <argument pos:start="153:25" pos:end="153:58"><expr pos:start="153:25" pos:end="153:58"><name pos:start="153:25" pos:end="153:34">PROT_WRITE</name> <operator pos:start="153:36" pos:end="153:36">|</operator> <name pos:start="153:38" pos:end="153:46">PROT_READ</name> <operator pos:start="153:48" pos:end="153:48">|</operator> <name pos:start="153:50" pos:end="153:58">PROT_EXEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:46">/* Request large pages for the buffer.  */</comment>

    <expr_stmt pos:start="159:5" pos:end="159:48"><expr pos:start="159:5" pos:end="159:47"><call pos:start="159:5" pos:end="159:47"><name pos:start="159:5" pos:end="159:16">qemu_madvise</name><argument_list pos:start="159:17" pos:end="159:47">(<argument pos:start="159:18" pos:end="159:20"><expr pos:start="159:18" pos:end="159:20"><name pos:start="159:18" pos:end="159:20">buf</name></expr></argument>, <argument pos:start="159:23" pos:end="159:26"><expr pos:start="159:23" pos:end="159:26"><name pos:start="159:23" pos:end="159:26">size</name></expr></argument>, <argument pos:start="159:29" pos:end="159:46"><expr pos:start="159:29" pos:end="159:46"><name pos:start="159:29" pos:end="159:46">QEMU_MADV_HUGEPAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="163:5" pos:end="163:15">return <expr pos:start="163:12" pos:end="163:14"><name pos:start="163:12" pos:end="163:14">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
