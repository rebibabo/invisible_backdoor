<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22725.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">qcow2_set_key</name><parameter_list pos:start="1:25" pos:end="1:63">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:41">BlockDriverState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">bs</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:62"><decl pos:start="1:48" pos:end="1:62"><type pos:start="1:48" pos:end="1:62"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:57">char</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">key</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">BDRVQcow2State</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:34">= <expr pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:26">bs</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:22"><name pos:start="7:13" pos:end="7:18">keybuf</name><index pos:start="7:19" pos:end="7:22">[<expr pos:start="7:20" pos:end="7:21"><literal type="number" pos:start="7:20" pos:end="7:21">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">err</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:10">memset</name><argument_list pos:start="15:11" pos:end="15:25">(<argument pos:start="15:12" pos:end="15:17"><expr pos:start="15:12" pos:end="15:17"><name pos:start="15:12" pos:end="15:17">keybuf</name></expr></argument>, <argument pos:start="15:20" pos:end="15:20"><expr pos:start="15:20" pos:end="15:20"><literal type="number" pos:start="15:20" pos:end="15:20">0</literal></expr></argument>, <argument pos:start="15:23" pos:end="15:24"><expr pos:start="15:23" pos:end="15:24"><literal type="number" pos:start="15:23" pos:end="15:24">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:22"><expr pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:7">len</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:21"><name pos:start="17:11" pos:end="17:16">strlen</name><argument_list pos:start="17:17" pos:end="17:21">(<argument pos:start="17:18" pos:end="17:20"><expr pos:start="17:18" pos:end="17:20"><name pos:start="17:18" pos:end="17:20">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="21:17"><if pos:start="19:5" pos:end="21:17">if <condition pos:start="19:8" pos:end="19:17">(<expr pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:11">len</name> <operator pos:start="19:13" pos:end="19:13">&gt;</operator> <literal type="number" pos:start="19:15" pos:end="19:16">16</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:17"><block_content pos:start="21:9" pos:end="21:17">

        <expr_stmt pos:start="21:9" pos:end="21:17"><expr pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:11">len</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <literal type="number" pos:start="21:15" pos:end="21:16">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="23:5" pos:end="25:17">/* XXX: we could compress the chars to 7 bits to increase

       entropy */</comment>

    <for pos:start="27:5" pos:end="31:5">for<control pos:start="27:8" pos:end="27:26">(<init pos:start="27:9" pos:end="27:14"><expr pos:start="27:9" pos:end="27:13"><name pos:start="27:9" pos:end="27:9">i</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <literal type="number" pos:start="27:13" pos:end="27:13">0</literal></expr>;</init><condition pos:start="27:15" pos:end="27:22"><expr pos:start="27:15" pos:end="27:21"><name pos:start="27:15" pos:end="27:15">i</name> <operator pos:start="27:17" pos:end="27:17">&lt;</operator> <name pos:start="27:19" pos:end="27:21">len</name></expr>;</condition><incr pos:start="27:23" pos:end="27:25"><expr pos:start="27:23" pos:end="27:25"><name pos:start="27:23" pos:end="27:23">i</name><operator pos:start="27:24" pos:end="27:25">++</operator></expr></incr>)</control> <block pos:start="27:28" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:27">

        <expr_stmt pos:start="29:9" pos:end="29:27"><expr pos:start="29:9" pos:end="29:26"><name pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:14">keybuf</name><index pos:start="29:15" pos:end="29:17">[<expr pos:start="29:16" pos:end="29:16"><name pos:start="29:16" pos:end="29:16">i</name></expr>]</index></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <name pos:start="29:21" pos:end="29:26"><name pos:start="29:21" pos:end="29:23">key</name><index pos:start="29:24" pos:end="29:26">[<expr pos:start="29:25" pos:end="29:25"><name pos:start="29:25" pos:end="29:25">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="33:5" pos:end="33:26"><expr pos:start="33:5" pos:end="33:25"><call pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:10">assert</name><argument_list pos:start="33:11" pos:end="33:25">(<argument pos:start="33:12" pos:end="33:24"><expr pos:start="33:12" pos:end="33:24"><name pos:start="33:12" pos:end="33:24"><name pos:start="33:12" pos:end="33:13">bs</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:24">encrypted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:35"><expr pos:start="37:5" pos:end="37:34"><call pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:23">qcrypto_cipher_free</name><argument_list pos:start="37:24" pos:end="37:34">(<argument pos:start="37:25" pos:end="37:33"><expr pos:start="37:25" pos:end="37:33"><name pos:start="37:25" pos:end="37:33"><name pos:start="37:25" pos:end="37:25">s</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:33">cipher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="47:14"><expr pos:start="39:5" pos:end="47:13"><name pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:13">cipher</name></name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="47:13"><name pos:start="39:17" pos:end="39:34">qcrypto_cipher_new</name><argument_list pos:start="39:35" pos:end="47:13">(

        <argument pos:start="41:9" pos:end="41:34"><expr pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:34">QCRYPTO_CIPHER_ALG_AES_128</name></expr></argument>,

        <argument pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:31">QCRYPTO_CIPHER_MODE_CBC</name></expr></argument>,

        <argument pos:start="45:9" pos:end="45:14"><expr pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:14">keybuf</name></expr></argument>, <argument pos:start="45:17" pos:end="45:36"><expr pos:start="45:17" pos:end="45:36"><call pos:start="45:17" pos:end="45:36"><name pos:start="45:17" pos:end="45:28">G_N_ELEMENTS</name><argument_list pos:start="45:29" pos:end="45:36">(<argument pos:start="45:30" pos:end="45:35"><expr pos:start="45:30" pos:end="45:35"><name pos:start="45:30" pos:end="45:35">keybuf</name></expr></argument>)</argument_list></call></expr></argument>,

        <argument pos:start="47:9" pos:end="47:12"><expr pos:start="47:9" pos:end="47:12"><operator pos:start="47:9" pos:end="47:9">&amp;</operator><name pos:start="47:10" pos:end="47:12">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="63:5"><if pos:start="51:5" pos:end="63:5">if <condition pos:start="51:8" pos:end="51:19">(<expr pos:start="51:9" pos:end="51:18"><operator pos:start="51:9" pos:end="51:9">!</operator><name pos:start="51:10" pos:end="51:18"><name pos:start="51:10" pos:end="51:10">s</name><operator pos:start="51:11" pos:end="51:12">-&gt;</operator><name pos:start="51:13" pos:end="51:18">cipher</name></name></expr>)</condition> <block pos:start="51:21" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:18">

        <comment type="block" pos:start="53:9" pos:end="57:59">/* XXX would be nice if errors in this method could

         * be properly propagate to the caller. Would need

         * the bdrv_set_key() API signature to be fixed. */</comment>

        <expr_stmt pos:start="59:9" pos:end="59:24"><expr pos:start="59:9" pos:end="59:23"><call pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:18">error_free</name><argument_list pos:start="59:19" pos:end="59:23">(<argument pos:start="59:20" pos:end="59:22"><expr pos:start="59:20" pos:end="59:22"><name pos:start="59:20" pos:end="59:22">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:18">return <expr pos:start="61:16" pos:end="61:17"><operator pos:start="61:16" pos:end="61:16">-</operator><literal type="number" pos:start="61:17" pos:end="61:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="65:5" pos:end="65:13">return <expr pos:start="65:12" pos:end="65:12"><literal type="number" pos:start="65:12" pos:end="65:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
