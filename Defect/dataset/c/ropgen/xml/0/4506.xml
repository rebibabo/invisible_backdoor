<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4506.c" pos:tabs="8"><function pos:start="1:1" pos:end="589:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">load_flat_file</name><parameter_list pos:start="1:26" pos:end="3:73">(<parameter pos:start="1:27" pos:end="1:52"><decl pos:start="1:27" pos:end="1:52"><type pos:start="1:27" pos:end="1:52"><name pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:32">struct</name> <name pos:start="1:34" pos:end="1:45">linux_binprm</name></name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type> <name pos:start="1:49" pos:end="1:52">bprm</name></decl></parameter>,

		<parameter pos:start="3:17" pos:end="3:40"><decl pos:start="3:17" pos:end="3:40"><type pos:start="3:17" pos:end="3:40"><name pos:start="3:17" pos:end="3:31"><name pos:start="3:17" pos:end="3:22">struct</name> <name pos:start="3:24" pos:end="3:31">lib_info</name></name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:40">libinfo</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:48"><decl pos:start="3:43" pos:end="3:48"><type pos:start="3:43" pos:end="3:48"><name pos:start="3:43" pos:end="3:45">int</name></type> <name pos:start="3:47" pos:end="3:48">id</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:72"><decl pos:start="3:51" pos:end="3:72"><type pos:start="3:51" pos:end="3:72"><name pos:start="3:51" pos:end="3:59">abi_ulong</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:72">extra_stack</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="589:1">{<block_content pos:start="7:5" pos:end="587:13">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:19">flat_hdr</name></name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type> <name pos:start="7:23" pos:end="7:25">hdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">abi_ulong</name></type> <name pos:start="9:15" pos:end="9:21">textpos</name> <init pos:start="9:23" pos:end="9:25">= <expr pos:start="9:25" pos:end="9:25"><literal type="number" pos:start="9:25" pos:end="9:25">0</literal></expr></init></decl>, <decl pos:start="9:28" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:13"/><name pos:start="9:28" pos:end="9:34">datapos</name> <init pos:start="9:36" pos:end="9:38">= <expr pos:start="9:38" pos:end="9:38"><literal type="number" pos:start="9:38" pos:end="9:38">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">abi_long</name></type> <name pos:start="11:14" pos:end="11:19">result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:13">abi_ulong</name></type> <name pos:start="13:15" pos:end="13:27">realdatastart</name> <init pos:start="13:29" pos:end="13:31">= <expr pos:start="13:31" pos:end="13:31"><literal type="number" pos:start="13:31" pos:end="13:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:60"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:13">abi_ulong</name></type> <name pos:start="15:15" pos:end="15:22">text_len</name></decl>, <decl pos:start="15:25" pos:end="15:32"><type ref="prev" pos:start="15:5" pos:end="15:13"/><name pos:start="15:25" pos:end="15:32">data_len</name></decl>, <decl pos:start="15:35" pos:end="15:41"><type ref="prev" pos:start="15:5" pos:end="15:13"/><name pos:start="15:35" pos:end="15:41">bss_len</name></decl>, <decl pos:start="15:44" pos:end="15:52"><type ref="prev" pos:start="15:5" pos:end="15:13"/><name pos:start="15:44" pos:end="15:52">stack_len</name></decl>, <decl pos:start="15:55" pos:end="15:59"><type ref="prev" pos:start="15:5" pos:end="15:13"/><name pos:start="15:55" pos:end="15:59">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:13">abi_ulong</name></type> <name pos:start="17:15" pos:end="17:18">memp</name> <init pos:start="17:20" pos:end="17:22">= <expr pos:start="17:22" pos:end="17:22"><literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="17:25" pos:end="17:54">/* for finding the brk area */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:13">abi_ulong</name></type> <name pos:start="19:15" pos:end="19:19">extra</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">abi_ulong</name></type> <name pos:start="21:15" pos:end="21:19">reloc</name> <init pos:start="21:21" pos:end="21:23">= <expr pos:start="21:23" pos:end="21:23"><literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr></init></decl>, <decl pos:start="21:26" pos:end="21:27"><type ref="prev" pos:start="21:5" pos:end="21:13"/><name pos:start="21:26" pos:end="21:27">rp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:27"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>, <decl pos:start="23:12" pos:end="23:14"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:14">rev</name></decl>, <decl pos:start="23:17" pos:end="23:26"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:17" pos:end="23:22">relocs</name> <init pos:start="23:24" pos:end="23:26">= <expr pos:start="23:26" pos:end="23:26"><literal type="number" pos:start="23:26" pos:end="23:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:13">abi_ulong</name></type> <name pos:start="25:15" pos:end="25:18">fpos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:35"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:13">abi_ulong</name></type> <name pos:start="27:15" pos:end="27:24">start_code</name></decl>, <decl pos:start="27:27" pos:end="27:34"><type ref="prev" pos:start="27:5" pos:end="27:13"/><name pos:start="27:27" pos:end="27:34">end_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:13">abi_ulong</name></type> <name pos:start="29:15" pos:end="29:22">indx_len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:42"><expr pos:start="33:5" pos:end="33:41"><name pos:start="33:5" pos:end="33:7">hdr</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <operator pos:start="33:11" pos:end="33:11">(</operator><operator pos:start="33:12" pos:end="33:12">(</operator>struct <name pos:start="33:20" pos:end="33:27">flat_hdr</name> <operator pos:start="33:29" pos:end="33:29">*</operator><operator pos:start="33:30" pos:end="33:30">)</operator> <name pos:start="33:32" pos:end="33:40"><name pos:start="33:32" pos:end="33:35">bprm</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:40">buf</name></name><operator pos:start="33:41" pos:end="33:41">)</operator></expr>;</expr_stmt>		<comment type="block" pos:start="33:57" pos:end="33:73">/* exec-header */</comment>



    <expr_stmt pos:start="37:5" pos:end="37:39"><expr pos:start="37:5" pos:end="37:38"><name pos:start="37:5" pos:end="37:12">text_len</name>  <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:38"><name pos:start="37:17" pos:end="37:21">ntohl</name><argument_list pos:start="37:22" pos:end="37:38">(<argument pos:start="37:23" pos:end="37:37"><expr pos:start="37:23" pos:end="37:37"><name pos:start="37:23" pos:end="37:37"><name pos:start="37:23" pos:end="37:25">hdr</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:37">data_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:62"><expr pos:start="39:5" pos:end="39:61"><name pos:start="39:5" pos:end="39:12">data_len</name>  <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:36"><name pos:start="39:17" pos:end="39:21">ntohl</name><argument_list pos:start="39:22" pos:end="39:36">(<argument pos:start="39:23" pos:end="39:35"><expr pos:start="39:23" pos:end="39:35"><name pos:start="39:23" pos:end="39:35"><name pos:start="39:23" pos:end="39:25">hdr</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:35">data_end</name></name></expr></argument>)</argument_list></call> <operator pos:start="39:38" pos:end="39:38">-</operator> <call pos:start="39:40" pos:end="39:61"><name pos:start="39:40" pos:end="39:44">ntohl</name><argument_list pos:start="39:45" pos:end="39:61">(<argument pos:start="39:46" pos:end="39:60"><expr pos:start="39:46" pos:end="39:60"><name pos:start="39:46" pos:end="39:60"><name pos:start="39:46" pos:end="39:48">hdr</name><operator pos:start="39:49" pos:end="39:50">-&gt;</operator><name pos:start="39:51" pos:end="39:60">data_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:59"><expr pos:start="41:5" pos:end="41:58"><name pos:start="41:5" pos:end="41:11">bss_len</name>   <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:21">ntohl</name><argument_list pos:start="41:22" pos:end="41:35">(<argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:25">hdr</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:34">bss_end</name></name></expr></argument>)</argument_list></call> <operator pos:start="41:37" pos:end="41:37">-</operator> <call pos:start="41:39" pos:end="41:58"><name pos:start="41:39" pos:end="41:43">ntohl</name><argument_list pos:start="41:44" pos:end="41:58">(<argument pos:start="41:45" pos:end="41:57"><expr pos:start="41:45" pos:end="41:57"><name pos:start="41:45" pos:end="41:57"><name pos:start="41:45" pos:end="41:47">hdr</name><operator pos:start="41:48" pos:end="41:49">-&gt;</operator><name pos:start="41:50" pos:end="41:57">data_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:39"><expr pos:start="43:5" pos:end="43:38"><name pos:start="43:5" pos:end="43:13">stack_len</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <call pos:start="43:17" pos:end="43:38"><name pos:start="43:17" pos:end="43:21">ntohl</name><argument_list pos:start="43:22" pos:end="43:38">(<argument pos:start="43:23" pos:end="43:37"><expr pos:start="43:23" pos:end="43:37"><name pos:start="43:23" pos:end="43:37"><name pos:start="43:23" pos:end="43:25">hdr</name><operator pos:start="43:26" pos:end="43:27">-&gt;</operator><name pos:start="43:28" pos:end="43:37">stack_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:20">(<expr pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:19">extra_stack</name></expr>)</condition> <block pos:start="45:22" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:33">

        <expr_stmt pos:start="47:9" pos:end="47:34"><expr pos:start="47:9" pos:end="47:33"><name pos:start="47:9" pos:end="47:17">stack_len</name> <operator pos:start="47:19" pos:end="47:20">+=</operator> <operator pos:start="47:22" pos:end="47:22">*</operator><name pos:start="47:23" pos:end="47:33">extra_stack</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><operator pos:start="49:9" pos:end="49:9">*</operator><name pos:start="49:10" pos:end="49:20">extra_stack</name> <operator pos:start="49:22" pos:end="49:22">=</operator> <name pos:start="49:24" pos:end="49:32">stack_len</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:10">relocs</name>    <operator pos:start="53:15" pos:end="53:15">=</operator> <call pos:start="53:17" pos:end="53:39"><name pos:start="53:17" pos:end="53:21">ntohl</name><argument_list pos:start="53:22" pos:end="53:39">(<argument pos:start="53:23" pos:end="53:38"><expr pos:start="53:23" pos:end="53:38"><name pos:start="53:23" pos:end="53:38"><name pos:start="53:23" pos:end="53:25">hdr</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:38">reloc_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:34"><expr pos:start="55:5" pos:end="55:33"><name pos:start="55:5" pos:end="55:9">flags</name>     <operator pos:start="55:15" pos:end="55:15">=</operator> <call pos:start="55:17" pos:end="55:33"><name pos:start="55:17" pos:end="55:21">ntohl</name><argument_list pos:start="55:22" pos:end="55:33">(<argument pos:start="55:23" pos:end="55:32"><expr pos:start="55:23" pos:end="55:32"><name pos:start="55:23" pos:end="55:32"><name pos:start="55:23" pos:end="55:25">hdr</name><operator pos:start="55:26" pos:end="55:27">-&gt;</operator><name pos:start="55:28" pos:end="55:32">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:32"><expr pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:7">rev</name>       <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:31"><name pos:start="57:17" pos:end="57:21">ntohl</name><argument_list pos:start="57:22" pos:end="57:31">(<argument pos:start="57:23" pos:end="57:30"><expr pos:start="57:23" pos:end="57:30"><name pos:start="57:23" pos:end="57:30"><name pos:start="57:23" pos:end="57:25">hdr</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:30">rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:63"><expr pos:start="61:5" pos:end="61:62"><call pos:start="61:5" pos:end="61:62"><name pos:start="61:5" pos:end="61:11">DBG_FLT</name><argument_list pos:start="61:12" pos:end="61:62">(<argument pos:start="61:13" pos:end="61:45"><expr pos:start="61:13" pos:end="61:45"><literal type="string" pos:start="61:13" pos:end="61:45">"BINFMT_FLAT: Loading file: %s\n"</literal></expr></argument>, <argument pos:start="61:48" pos:end="61:61"><expr pos:start="61:48" pos:end="61:61"><name pos:start="61:48" pos:end="61:61"><name pos:start="61:48" pos:end="61:51">bprm</name><operator pos:start="61:52" pos:end="61:53">-&gt;</operator><name pos:start="61:54" pos:end="61:61">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:55">(<expr pos:start="65:9" pos:end="65:54"><name pos:start="65:9" pos:end="65:11">rev</name> <operator pos:start="65:13" pos:end="65:14">!=</operator> <name pos:start="65:16" pos:end="65:27">FLAT_VERSION</name> <operator pos:start="65:29" pos:end="65:30">&amp;&amp;</operator> <name pos:start="65:32" pos:end="65:34">rev</name> <operator pos:start="65:36" pos:end="65:37">!=</operator> <name pos:start="65:39" pos:end="65:54">OLD_FLAT_VERSION</name></expr>)</condition> <block pos:start="65:57" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:24">

        <expr_stmt pos:start="67:9" pos:end="69:41"><expr pos:start="67:9" pos:end="69:40"><call pos:start="67:9" pos:end="69:40"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="69:40">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>, <argument pos:start="67:25" pos:end="67:72"><expr pos:start="67:25" pos:end="67:72"><literal type="string" pos:start="67:25" pos:end="67:72">"BINFMT_FLAT: bad magic/rev (0x%x, need 0x%x)\n"</literal></expr></argument>,

                <argument pos:start="69:17" pos:end="69:19"><expr pos:start="69:17" pos:end="69:19"><name pos:start="69:17" pos:end="69:19">rev</name></expr></argument>, <argument pos:start="69:22" pos:end="69:39"><expr pos:start="69:22" pos:end="69:39"><operator pos:start="69:22" pos:end="69:22">(</operator><name pos:start="69:23" pos:end="69:25">int</name><operator pos:start="69:26" pos:end="69:26">)</operator> <name pos:start="69:28" pos:end="69:39">FLAT_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:24">return <expr pos:start="71:16" pos:end="71:23"><operator pos:start="71:16" pos:end="71:16">-</operator><name pos:start="71:17" pos:end="71:23">ENOEXEC</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:68">/* Don't allow old format executables to use shared libraries */</comment>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:43">(<expr pos:start="79:9" pos:end="79:42"><name pos:start="79:9" pos:end="79:11">rev</name> <operator pos:start="79:13" pos:end="79:14">==</operator> <name pos:start="79:16" pos:end="79:31">OLD_FLAT_VERSION</name> <operator pos:start="79:33" pos:end="79:34">&amp;&amp;</operator> <name pos:start="79:36" pos:end="79:37">id</name> <operator pos:start="79:39" pos:end="79:40">!=</operator> <literal type="number" pos:start="79:42" pos:end="79:42">0</literal></expr>)</condition> <block pos:start="79:45" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:24">

        <expr_stmt pos:start="81:9" pos:end="81:77"><expr pos:start="81:9" pos:end="81:76"><call pos:start="81:9" pos:end="81:76"><name pos:start="81:9" pos:end="81:15">fprintf</name><argument_list pos:start="81:16" pos:end="81:76">(<argument pos:start="81:17" pos:end="81:22"><expr pos:start="81:17" pos:end="81:22"><name pos:start="81:17" pos:end="81:22">stderr</name></expr></argument>, <argument pos:start="81:25" pos:end="81:75"><expr pos:start="81:25" pos:end="81:75"><literal type="string" pos:start="81:25" pos:end="81:75">"BINFMT_FLAT: shared libraries are not available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:24">return <expr pos:start="83:16" pos:end="83:23"><operator pos:start="83:16" pos:end="83:16">-</operator><name pos:start="83:17" pos:end="83:23">ENOEXEC</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="89:5" pos:end="95:7">/*

     * fix up the flags for the older format,  there were all kinds

     * of endian hacks,  this only works for the simple cases

     */</comment>

    <if_stmt pos:start="97:5" pos:end="104:0"><if pos:start="97:5" pos:end="104:0">if <condition pos:start="97:8" pos:end="97:60">(<expr pos:start="97:9" pos:end="97:59"><name pos:start="97:9" pos:end="97:11">rev</name> <operator pos:start="97:13" pos:end="97:14">==</operator> <name pos:start="97:16" pos:end="97:31">OLD_FLAT_VERSION</name> <operator pos:start="97:33" pos:end="97:34">&amp;&amp;</operator> <call pos:start="97:36" pos:end="97:59"><name pos:start="97:36" pos:end="97:52">flat_old_ram_flag</name><argument_list pos:start="97:53" pos:end="97:59">(<argument pos:start="97:54" pos:end="97:58"><expr pos:start="97:54" pos:end="97:58"><name pos:start="97:54" pos:end="97:58">flags</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="104:0"><block_content pos:start="99:9" pos:end="104:0">

        <expr_stmt pos:start="99:9" pos:end="104:0"><expr pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:13">flags</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <name pos:start="99:17" pos:end="99:29">FLAT_FLAG_RAM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:ifndef pos:start="103:1" pos:end="103:27">#<cpp:directive pos:start="103:2" pos:end="103:7">ifndef</cpp:directive> <name pos:start="103:9" pos:end="103:27">CONFIG_BINFMT_ZFLAT</name></cpp:ifndef>

    <if_stmt pos:start="105:5" pos:end="114:0"><if pos:start="105:5" pos:end="114:0">if <condition pos:start="105:8" pos:end="105:50">(<expr pos:start="105:9" pos:end="105:49"><name pos:start="105:9" pos:end="105:13">flags</name> <operator pos:start="105:15" pos:end="105:15">&amp;</operator> <operator pos:start="105:17" pos:end="105:17">(</operator><name pos:start="105:18" pos:end="105:31">FLAT_FLAG_GZIP</name><operator pos:start="105:32" pos:end="105:32">|</operator><name pos:start="105:33" pos:end="105:48">FLAT_FLAG_GZDATA</name><operator pos:start="105:49" pos:end="105:49">)</operator></expr>)</condition> <block pos:start="105:52" pos:end="114:0">{<block_content pos:start="107:9" pos:end="109:24">

        <expr_stmt pos:start="107:9" pos:end="107:74"><expr pos:start="107:9" pos:end="107:73"><call pos:start="107:9" pos:end="107:73"><name pos:start="107:9" pos:end="107:15">fprintf</name><argument_list pos:start="107:16" pos:end="107:73">(<argument pos:start="107:17" pos:end="107:22"><expr pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:22">stderr</name></expr></argument>, <argument pos:start="107:25" pos:end="107:72"><expr pos:start="107:25" pos:end="107:72"><literal type="string" pos:start="107:25" pos:end="107:72">"Support for ZFLAT executables is not enabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:24">return <expr pos:start="109:16" pos:end="109:23"><operator pos:start="109:16" pos:end="109:16">-</operator><name pos:start="109:17" pos:end="109:23">ENOEXEC</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="113:1" pos:end="113:6">#<cpp:directive pos:start="113:2" pos:end="113:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="117:5" pos:end="121:7">/*

     * calculate the extra space we need to map in

     */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:39"><expr pos:start="123:5" pos:end="123:38"><name pos:start="123:5" pos:end="123:9">extra</name> <operator pos:start="123:11" pos:end="123:11">=</operator> <name pos:start="123:13" pos:end="123:18">relocs</name> <operator pos:start="123:20" pos:end="123:20">*</operator> <sizeof pos:start="123:22" pos:end="123:38">sizeof<argument_list pos:start="123:28" pos:end="123:38">(<argument pos:start="123:29" pos:end="123:37"><expr pos:start="123:29" pos:end="123:37"><name pos:start="123:29" pos:end="123:37">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="127:36"><if pos:start="125:5" pos:end="127:36">if <condition pos:start="125:8" pos:end="125:36">(<expr pos:start="125:9" pos:end="125:35"><name pos:start="125:9" pos:end="125:13">extra</name> <operator pos:start="125:15" pos:end="125:15">&lt;</operator> <name pos:start="125:17" pos:end="125:23">bss_len</name> <operator pos:start="125:25" pos:end="125:25">+</operator> <name pos:start="125:27" pos:end="125:35">stack_len</name></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="127:36"><block_content pos:start="127:9" pos:end="127:36">

        <expr_stmt pos:start="127:9" pos:end="127:36"><expr pos:start="127:9" pos:end="127:35"><name pos:start="127:9" pos:end="127:13">extra</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <name pos:start="127:17" pos:end="127:23">bss_len</name> <operator pos:start="127:25" pos:end="127:25">+</operator> <name pos:start="127:27" pos:end="127:35">stack_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="131:5" pos:end="133:59">/* Add space for library base pointers.  Make sure this does not

       misalign the  doesn't misalign the data segment.  */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:51"><expr pos:start="135:5" pos:end="135:50"><name pos:start="135:5" pos:end="135:12">indx_len</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <name pos:start="135:16" pos:end="135:30">MAX_SHARED_LIBS</name> <operator pos:start="135:32" pos:end="135:32">*</operator> <sizeof pos:start="135:34" pos:end="135:50">sizeof<argument_list pos:start="135:40" pos:end="135:50">(<argument pos:start="135:41" pos:end="135:49"><expr pos:start="135:41" pos:end="135:49"><name pos:start="135:41" pos:end="135:49">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:48"><expr pos:start="137:5" pos:end="137:47"><name pos:start="137:5" pos:end="137:12">indx_len</name> <operator pos:start="137:14" pos:end="137:14">=</operator> <operator pos:start="137:16" pos:end="137:16">(</operator><name pos:start="137:17" pos:end="137:24">indx_len</name> <operator pos:start="137:26" pos:end="137:26">+</operator> <literal type="number" pos:start="137:28" pos:end="137:29">15</literal><operator pos:start="137:30" pos:end="137:30">)</operator> <operator pos:start="137:32" pos:end="137:32">&amp;</operator> <operator pos:start="137:34" pos:end="137:34">~</operator><operator pos:start="137:35" pos:end="137:35">(</operator><name pos:start="137:36" pos:end="137:44">abi_ulong</name><operator pos:start="137:45" pos:end="137:45">)</operator><literal type="number" pos:start="137:46" pos:end="137:47">15</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="149:7">/*

     * there are a couple of cases here,  the separate code/data

     * case,  and then the fully copied to RAM case which lumps

     * it all together.

     */</comment>

    <if_stmt pos:start="151:5" pos:end="347:5"><if pos:start="151:5" pos:end="245:5">if <condition pos:start="151:8" pos:end="151:54">(<expr pos:start="151:9" pos:end="151:53"><operator pos:start="151:9" pos:end="151:9">(</operator><name pos:start="151:10" pos:end="151:14">flags</name> <operator pos:start="151:16" pos:end="151:16">&amp;</operator> <operator pos:start="151:18" pos:end="151:18">(</operator><name pos:start="151:19" pos:end="151:31">FLAT_FLAG_RAM</name><operator pos:start="151:32" pos:end="151:32">|</operator><name pos:start="151:33" pos:end="151:46">FLAT_FLAG_GZIP</name><operator pos:start="151:47" pos:end="151:47">)</operator><operator pos:start="151:48" pos:end="151:48">)</operator> <operator pos:start="151:50" pos:end="151:51">==</operator> <literal type="number" pos:start="151:53" pos:end="151:53">0</literal></expr>)</condition> <block pos:start="151:56" pos:end="245:5">{<block_content pos:start="161:9" pos:end="241:29">

        <comment type="block" pos:start="153:9" pos:end="159:11">/*

         * this should give us a ROM ptr,  but if it doesn't we don't

         * really care

         */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:64"><expr pos:start="161:9" pos:end="161:63"><call pos:start="161:9" pos:end="161:63"><name pos:start="161:9" pos:end="161:15">DBG_FLT</name><argument_list pos:start="161:16" pos:end="161:63">(<argument pos:start="161:17" pos:end="161:62"><expr pos:start="161:17" pos:end="161:62"><literal type="string" pos:start="161:17" pos:end="161:62">"BINFMT_FLAT: ROM mapping of file (we hope)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="165:9" pos:end="167:56"><expr pos:start="165:9" pos:end="167:55"><name pos:start="165:9" pos:end="165:15">textpos</name> <operator pos:start="165:17" pos:end="165:17">=</operator> <call pos:start="165:19" pos:end="167:55"><name pos:start="165:19" pos:end="165:29">target_mmap</name><argument_list pos:start="165:30" pos:end="167:55">(<argument pos:start="165:31" pos:end="165:31"><expr pos:start="165:31" pos:end="165:31"><literal type="number" pos:start="165:31" pos:end="165:31">0</literal></expr></argument>, <argument pos:start="165:34" pos:end="165:41"><expr pos:start="165:34" pos:end="165:41"><name pos:start="165:34" pos:end="165:41">text_len</name></expr></argument>, <argument pos:start="165:44" pos:end="165:62"><expr pos:start="165:44" pos:end="165:62"><name pos:start="165:44" pos:end="165:52">PROT_READ</name><operator pos:start="165:53" pos:end="165:53">|</operator><name pos:start="165:54" pos:end="165:62">PROT_EXEC</name></expr></argument>,

                              <argument pos:start="167:31" pos:end="167:41"><expr pos:start="167:31" pos:end="167:41"><name pos:start="167:31" pos:end="167:41">MAP_PRIVATE</name></expr></argument>, <argument pos:start="167:44" pos:end="167:51"><expr pos:start="167:44" pos:end="167:51"><name pos:start="167:44" pos:end="167:51"><name pos:start="167:44" pos:end="167:47">bprm</name><operator pos:start="167:48" pos:end="167:49">-&gt;</operator><name pos:start="167:50" pos:end="167:51">fd</name></name></expr></argument>, <argument pos:start="167:54" pos:end="167:54"><expr pos:start="167:54" pos:end="167:54"><literal type="number" pos:start="167:54" pos:end="167:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="175:9"><if pos:start="169:9" pos:end="175:9">if <condition pos:start="169:12" pos:end="169:26">(<expr pos:start="169:13" pos:end="169:25"><name pos:start="169:13" pos:end="169:19">textpos</name> <operator pos:start="169:21" pos:end="169:22">==</operator> <operator pos:start="169:24" pos:end="169:24">-</operator><literal type="number" pos:start="169:25" pos:end="169:25">1</literal></expr>)</condition> <block pos:start="169:28" pos:end="175:9">{<block_content pos:start="171:13" pos:end="173:22">

            <expr_stmt pos:start="171:13" pos:end="171:61"><expr pos:start="171:13" pos:end="171:60"><call pos:start="171:13" pos:end="171:60"><name pos:start="171:13" pos:end="171:19">fprintf</name><argument_list pos:start="171:20" pos:end="171:60">(<argument pos:start="171:21" pos:end="171:26"><expr pos:start="171:21" pos:end="171:26"><name pos:start="171:21" pos:end="171:26">stderr</name></expr></argument>, <argument pos:start="171:29" pos:end="171:59"><expr pos:start="171:29" pos:end="171:59"><literal type="string" pos:start="171:29" pos:end="171:59">"Unable to mmap process text\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="173:13" pos:end="173:22">return <expr pos:start="173:20" pos:end="173:21"><operator pos:start="173:20" pos:end="173:20">-</operator><literal type="number" pos:start="173:21" pos:end="173:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="179:9" pos:end="183:72"><expr pos:start="179:9" pos:end="183:71"><name pos:start="179:9" pos:end="179:21">realdatastart</name> <operator pos:start="179:23" pos:end="179:23">=</operator> <call pos:start="179:25" pos:end="183:71"><name pos:start="179:25" pos:end="179:35">target_mmap</name><argument_list pos:start="179:36" pos:end="183:71">(<argument pos:start="179:37" pos:end="179:37"><expr pos:start="179:37" pos:end="179:37"><literal type="number" pos:start="179:37" pos:end="179:37">0</literal></expr></argument>, <argument pos:start="179:40" pos:end="179:66"><expr pos:start="179:40" pos:end="179:66"><name pos:start="179:40" pos:end="179:47">data_len</name> <operator pos:start="179:49" pos:end="179:49">+</operator> <name pos:start="179:51" pos:end="179:55">extra</name> <operator pos:start="179:57" pos:end="179:57">+</operator> <name pos:start="179:59" pos:end="179:66">indx_len</name></expr></argument>,

                                    <argument pos:start="181:37" pos:end="181:66"><expr pos:start="181:37" pos:end="181:66"><name pos:start="181:37" pos:end="181:45">PROT_READ</name><operator pos:start="181:46" pos:end="181:46">|</operator><name pos:start="181:47" pos:end="181:56">PROT_WRITE</name><operator pos:start="181:57" pos:end="181:57">|</operator><name pos:start="181:58" pos:end="181:66">PROT_EXEC</name></expr></argument>,

                                    <argument pos:start="183:37" pos:end="183:63"><expr pos:start="183:37" pos:end="183:63"><name pos:start="183:37" pos:end="183:47">MAP_PRIVATE</name> <operator pos:start="183:49" pos:end="183:49">|</operator> <name pos:start="183:51" pos:end="183:63">MAP_ANONYMOUS</name></expr></argument>, <argument pos:start="183:66" pos:end="183:67"><expr pos:start="183:66" pos:end="183:67"><operator pos:start="183:66" pos:end="183:66">-</operator><literal type="number" pos:start="183:67" pos:end="183:67">1</literal></expr></argument>, <argument pos:start="183:70" pos:end="183:70"><expr pos:start="183:70" pos:end="183:70"><literal type="number" pos:start="183:70" pos:end="183:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="187:9" pos:end="193:9"><if pos:start="187:9" pos:end="193:9">if <condition pos:start="187:12" pos:end="187:32">(<expr pos:start="187:13" pos:end="187:31"><name pos:start="187:13" pos:end="187:25">realdatastart</name> <operator pos:start="187:27" pos:end="187:28">==</operator> <operator pos:start="187:30" pos:end="187:30">-</operator><literal type="number" pos:start="187:31" pos:end="187:31">1</literal></expr>)</condition> <block pos:start="187:34" pos:end="193:9">{<block_content pos:start="189:13" pos:end="191:33">

            <expr_stmt pos:start="189:13" pos:end="189:73"><expr pos:start="189:13" pos:end="189:72"><call pos:start="189:13" pos:end="189:72"><name pos:start="189:13" pos:end="189:19">fprintf</name><argument_list pos:start="189:20" pos:end="189:72">(<argument pos:start="189:21" pos:end="189:26"><expr pos:start="189:21" pos:end="189:26"><name pos:start="189:21" pos:end="189:26">stderr</name></expr></argument>, <argument pos:start="189:29" pos:end="189:71"><expr pos:start="189:29" pos:end="189:71"><literal type="string" pos:start="189:29" pos:end="189:71">"Unable to allocate RAM for process data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="191:13" pos:end="191:33">return <expr pos:start="191:20" pos:end="191:32"><name pos:start="191:20" pos:end="191:32">realdatastart</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:43"><expr pos:start="195:9" pos:end="195:42"><name pos:start="195:9" pos:end="195:15">datapos</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <name pos:start="195:19" pos:end="195:31">realdatastart</name> <operator pos:start="195:33" pos:end="195:33">+</operator> <name pos:start="195:35" pos:end="195:42">indx_len</name></expr>;</expr_stmt>



        <expr_stmt pos:start="199:9" pos:end="201:77"><expr pos:start="199:9" pos:end="201:76"><call pos:start="199:9" pos:end="201:76"><name pos:start="199:9" pos:end="199:15">DBG_FLT</name><argument_list pos:start="199:16" pos:end="201:76">(<argument pos:start="199:17" pos:end="199:72"><expr pos:start="199:17" pos:end="199:72"><literal type="string" pos:start="199:17" pos:end="199:72">"BINFMT_FLAT: Allocated data+bss+stack (%d bytes): %x\n"</literal></expr></argument>,

                        <argument pos:start="201:25" pos:end="201:61"><expr pos:start="201:25" pos:end="201:61"><operator pos:start="201:25" pos:end="201:25">(</operator><name pos:start="201:26" pos:end="201:28">int</name><operator pos:start="201:29" pos:end="201:29">)</operator><operator pos:start="201:30" pos:end="201:30">(</operator><name pos:start="201:31" pos:end="201:38">data_len</name> <operator pos:start="201:40" pos:end="201:40">+</operator> <name pos:start="201:42" pos:end="201:48">bss_len</name> <operator pos:start="201:50" pos:end="201:50">+</operator> <name pos:start="201:52" pos:end="201:60">stack_len</name><operator pos:start="201:61" pos:end="201:61">)</operator></expr></argument>, <argument pos:start="201:64" pos:end="201:75"><expr pos:start="201:64" pos:end="201:75"><operator pos:start="201:64" pos:end="201:64">(</operator><name pos:start="201:65" pos:end="201:67">int</name><operator pos:start="201:68" pos:end="201:68">)</operator><name pos:start="201:69" pos:end="201:75">datapos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="205:9" pos:end="208:0"><expr pos:start="205:9" pos:end="205:37"><name pos:start="205:9" pos:end="205:12">fpos</name> <operator pos:start="205:14" pos:end="205:14">=</operator> <call pos:start="205:16" pos:end="205:37"><name pos:start="205:16" pos:end="205:20">ntohl</name><argument_list pos:start="205:21" pos:end="205:37">(<argument pos:start="205:22" pos:end="205:36"><expr pos:start="205:22" pos:end="205:36"><name pos:start="205:22" pos:end="205:36"><name pos:start="205:22" pos:end="205:24">hdr</name><operator pos:start="205:25" pos:end="205:26">-&gt;</operator><name pos:start="205:27" pos:end="205:36">data_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="207:1" pos:end="207:26">#<cpp:directive pos:start="207:2" pos:end="207:6">ifdef</cpp:directive> <name pos:start="207:8" pos:end="207:26">CONFIG_BINFMT_ZFLAT</name></cpp:ifdef>

        <if_stmt pos:start="209:9" pos:end="227:9"><if pos:start="209:9" pos:end="215:9">if <condition pos:start="209:12" pos:end="209:37">(<expr pos:start="209:13" pos:end="209:36"><name pos:start="209:13" pos:end="209:17">flags</name> <operator pos:start="209:19" pos:end="209:19">&amp;</operator> <name pos:start="209:21" pos:end="209:36">FLAT_FLAG_GZDATA</name></expr>)</condition> <block pos:start="209:39" pos:end="215:9">{<block_content pos:start="211:13" pos:end="213:77">

            <expr_stmt pos:start="211:13" pos:end="213:77"><expr pos:start="211:13" pos:end="213:77"><name pos:start="211:13" pos:end="211:18">result</name> <operator pos:start="211:20" pos:end="211:20">=</operator> <macro pos:start="211:22" pos:end="213:77"><name pos:start="211:22" pos:end="211:36">decompress_exec</name><argument_list pos:start="211:37" pos:end="213:77">(<argument pos:start="211:38" pos:end="211:41">bprm</argument>, <argument pos:start="211:44" pos:end="211:47">fpos</argument>, <argument pos:start="211:50" pos:end="211:65">(char *) datapos</argument>,

                                     <argument pos:start="213:38" pos:end="213:76">data_len + (relocs * sizeof(abi_ulong))</argument>)</argument_list></macro></expr></expr_stmt>

        </block_content>}</block></if> <else pos:start="215:11" pos:end="227:9">else

<cpp:endif pos:start="217:1" pos:end="217:6">#<cpp:directive pos:start="217:2" pos:end="217:6">endif</cpp:directive></cpp:endif>

        <block pos:start="219:9" pos:end="227:9">{<block_content pos:start="221:13" pos:end="225:40">

            <expr_stmt pos:start="221:13" pos:end="225:40"><expr pos:start="221:13" pos:end="225:39"><name pos:start="221:13" pos:end="221:18">result</name> <operator pos:start="221:20" pos:end="221:20">=</operator> <call pos:start="221:22" pos:end="225:39"><name pos:start="221:22" pos:end="221:33">target_pread</name><argument_list pos:start="221:34" pos:end="225:39">(<argument pos:start="221:35" pos:end="221:42"><expr pos:start="221:35" pos:end="221:42"><name pos:start="221:35" pos:end="221:42"><name pos:start="221:35" pos:end="221:38">bprm</name><operator pos:start="221:39" pos:end="221:40">-&gt;</operator><name pos:start="221:41" pos:end="221:42">fd</name></name></expr></argument>, <argument pos:start="221:45" pos:end="221:51"><expr pos:start="221:45" pos:end="221:51"><name pos:start="221:45" pos:end="221:51">datapos</name></expr></argument>,

                                  <argument pos:start="223:35" pos:end="223:73"><expr pos:start="223:35" pos:end="223:73"><name pos:start="223:35" pos:end="223:42">data_len</name> <operator pos:start="223:44" pos:end="223:44">+</operator> <operator pos:start="223:46" pos:end="223:46">(</operator><name pos:start="223:47" pos:end="223:52">relocs</name> <operator pos:start="223:54" pos:end="223:54">*</operator> <sizeof pos:start="223:56" pos:end="223:72">sizeof<argument_list pos:start="223:62" pos:end="223:72">(<argument pos:start="223:63" pos:end="223:71"><expr pos:start="223:63" pos:end="223:71"><name pos:start="223:63" pos:end="223:71">abi_ulong</name></expr></argument>)</argument_list></sizeof><operator pos:start="223:73" pos:end="223:73">)</operator></expr></argument>,

                                  <argument pos:start="225:35" pos:end="225:38"><expr pos:start="225:35" pos:end="225:38"><name pos:start="225:35" pos:end="225:38">fpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="229:9" pos:end="235:9"><if pos:start="229:9" pos:end="235:9">if <condition pos:start="229:12" pos:end="229:23">(<expr pos:start="229:13" pos:end="229:22"><name pos:start="229:13" pos:end="229:18">result</name> <operator pos:start="229:20" pos:end="229:20">&lt;</operator> <literal type="number" pos:start="229:22" pos:end="229:22">0</literal></expr>)</condition> <block pos:start="229:25" pos:end="235:9">{<block_content pos:start="231:13" pos:end="233:26">

            <expr_stmt pos:start="231:13" pos:end="231:57"><expr pos:start="231:13" pos:end="231:56"><call pos:start="231:13" pos:end="231:56"><name pos:start="231:13" pos:end="231:19">fprintf</name><argument_list pos:start="231:20" pos:end="231:56">(<argument pos:start="231:21" pos:end="231:26"><expr pos:start="231:21" pos:end="231:26"><name pos:start="231:21" pos:end="231:26">stderr</name></expr></argument>, <argument pos:start="231:29" pos:end="231:55"><expr pos:start="231:29" pos:end="231:55"><literal type="string" pos:start="231:29" pos:end="231:55">"Unable to read data+bss\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="233:13" pos:end="233:26">return <expr pos:start="233:20" pos:end="233:25"><name pos:start="233:20" pos:end="233:25">result</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="239:9" pos:end="239:63"><expr pos:start="239:9" pos:end="239:62"><name pos:start="239:9" pos:end="239:13">reloc</name> <operator pos:start="239:15" pos:end="239:15">=</operator> <name pos:start="239:17" pos:end="239:23">datapos</name> <operator pos:start="239:25" pos:end="239:25">+</operator> <operator pos:start="239:27" pos:end="239:27">(</operator><call pos:start="239:28" pos:end="239:50"><name pos:start="239:28" pos:end="239:32">ntohl</name><argument_list pos:start="239:33" pos:end="239:50">(<argument pos:start="239:34" pos:end="239:49"><expr pos:start="239:34" pos:end="239:49"><name pos:start="239:34" pos:end="239:49"><name pos:start="239:34" pos:end="239:36">hdr</name><operator pos:start="239:37" pos:end="239:38">-&gt;</operator><name pos:start="239:39" pos:end="239:49">reloc_start</name></name></expr></argument>)</argument_list></call> <operator pos:start="239:52" pos:end="239:52">-</operator> <name pos:start="239:54" pos:end="239:61">text_len</name><operator pos:start="239:62" pos:end="239:62">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:29"><expr pos:start="241:9" pos:end="241:28"><name pos:start="241:9" pos:end="241:12">memp</name> <operator pos:start="241:14" pos:end="241:14">=</operator> <name pos:start="241:16" pos:end="241:28">realdatastart</name></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="245:7" pos:end="347:5">else <block pos:start="245:12" pos:end="347:5">{<block_content pos:start="249:9" pos:end="345:9">



        <expr_stmt pos:start="249:9" pos:end="253:66"><expr pos:start="249:9" pos:end="253:65"><name pos:start="249:9" pos:end="249:15">textpos</name> <operator pos:start="249:17" pos:end="249:17">=</operator> <call pos:start="249:19" pos:end="253:65"><name pos:start="249:19" pos:end="249:29">target_mmap</name><argument_list pos:start="249:30" pos:end="253:65">(<argument pos:start="249:31" pos:end="249:31"><expr pos:start="249:31" pos:end="249:31"><literal type="number" pos:start="249:31" pos:end="249:31">0</literal></expr></argument>, <argument pos:start="249:34" pos:end="249:71"><expr pos:start="249:34" pos:end="249:71"><name pos:start="249:34" pos:end="249:41">text_len</name> <operator pos:start="249:43" pos:end="249:43">+</operator> <name pos:start="249:45" pos:end="249:52">data_len</name> <operator pos:start="249:54" pos:end="249:54">+</operator> <name pos:start="249:56" pos:end="249:60">extra</name> <operator pos:start="249:62" pos:end="249:62">+</operator> <name pos:start="249:64" pos:end="249:71">indx_len</name></expr></argument>,

                              <argument pos:start="251:31" pos:end="251:64"><expr pos:start="251:31" pos:end="251:64"><name pos:start="251:31" pos:end="251:39">PROT_READ</name> <operator pos:start="251:41" pos:end="251:41">|</operator> <name pos:start="251:43" pos:end="251:51">PROT_EXEC</name> <operator pos:start="251:53" pos:end="251:53">|</operator> <name pos:start="251:55" pos:end="251:64">PROT_WRITE</name></expr></argument>,

                              <argument pos:start="253:31" pos:end="253:57"><expr pos:start="253:31" pos:end="253:57"><name pos:start="253:31" pos:end="253:41">MAP_PRIVATE</name> <operator pos:start="253:43" pos:end="253:43">|</operator> <name pos:start="253:45" pos:end="253:57">MAP_ANONYMOUS</name></expr></argument>, <argument pos:start="253:60" pos:end="253:61"><expr pos:start="253:60" pos:end="253:61"><operator pos:start="253:60" pos:end="253:60">-</operator><literal type="number" pos:start="253:61" pos:end="253:61">1</literal></expr></argument>, <argument pos:start="253:64" pos:end="253:64"><expr pos:start="253:64" pos:end="253:64"><literal type="number" pos:start="253:64" pos:end="253:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="255:9" pos:end="261:9"><if pos:start="255:9" pos:end="261:9">if <condition pos:start="255:12" pos:end="255:27">(<expr pos:start="255:13" pos:end="255:25"><name pos:start="255:13" pos:end="255:19">textpos</name> <operator pos:start="255:21" pos:end="255:22">==</operator> <operator pos:start="255:24" pos:end="255:24">-</operator><literal type="number" pos:start="255:25" pos:end="255:25">1</literal></expr> )</condition> <block pos:start="255:29" pos:end="261:9">{<block_content pos:start="257:13" pos:end="259:22">

            <expr_stmt pos:start="257:13" pos:end="257:78"><expr pos:start="257:13" pos:end="257:77"><call pos:start="257:13" pos:end="257:77"><name pos:start="257:13" pos:end="257:19">fprintf</name><argument_list pos:start="257:20" pos:end="257:77">(<argument pos:start="257:21" pos:end="257:26"><expr pos:start="257:21" pos:end="257:26"><name pos:start="257:21" pos:end="257:26">stderr</name></expr></argument>, <argument pos:start="257:29" pos:end="257:76"><expr pos:start="257:29" pos:end="257:76"><literal type="string" pos:start="257:29" pos:end="257:76">"Unable to allocate RAM for process text/data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="259:13" pos:end="259:22">return <expr pos:start="259:20" pos:end="259:21"><operator pos:start="259:20" pos:end="259:20">-</operator><literal type="number" pos:start="259:21" pos:end="259:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="265:9" pos:end="265:57"><expr pos:start="265:9" pos:end="265:56"><name pos:start="265:9" pos:end="265:21">realdatastart</name> <operator pos:start="265:23" pos:end="265:23">=</operator> <name pos:start="265:25" pos:end="265:31">textpos</name> <operator pos:start="265:33" pos:end="265:33">+</operator> <call pos:start="265:35" pos:end="265:56"><name pos:start="265:35" pos:end="265:39">ntohl</name><argument_list pos:start="265:40" pos:end="265:56">(<argument pos:start="265:41" pos:end="265:55"><expr pos:start="265:41" pos:end="265:55"><name pos:start="265:41" pos:end="265:55"><name pos:start="265:41" pos:end="265:43">hdr</name><operator pos:start="265:44" pos:end="265:45">-&gt;</operator><name pos:start="265:46" pos:end="265:55">data_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:43"><expr pos:start="267:9" pos:end="267:42"><name pos:start="267:9" pos:end="267:15">datapos</name> <operator pos:start="267:17" pos:end="267:17">=</operator> <name pos:start="267:19" pos:end="267:31">realdatastart</name> <operator pos:start="267:33" pos:end="267:33">+</operator> <name pos:start="267:35" pos:end="267:42">indx_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:63"><expr pos:start="269:9" pos:end="269:62"><name pos:start="269:9" pos:end="269:13">reloc</name> <operator pos:start="269:15" pos:end="269:15">=</operator> <operator pos:start="269:17" pos:end="269:17">(</operator><name pos:start="269:18" pos:end="269:24">textpos</name> <operator pos:start="269:26" pos:end="269:26">+</operator> <call pos:start="269:28" pos:end="269:50"><name pos:start="269:28" pos:end="269:32">ntohl</name><argument_list pos:start="269:33" pos:end="269:50">(<argument pos:start="269:34" pos:end="269:49"><expr pos:start="269:34" pos:end="269:49"><name pos:start="269:34" pos:end="269:49"><name pos:start="269:34" pos:end="269:36">hdr</name><operator pos:start="269:37" pos:end="269:38">-&gt;</operator><name pos:start="269:39" pos:end="269:49">reloc_start</name></name></expr></argument>)</argument_list></call> <operator pos:start="269:52" pos:end="269:52">+</operator> <name pos:start="269:54" pos:end="269:61">indx_len</name><operator pos:start="269:62" pos:end="269:62">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="278:0"><expr pos:start="271:9" pos:end="271:22"><name pos:start="271:9" pos:end="271:12">memp</name> <operator pos:start="271:14" pos:end="271:14">=</operator> <name pos:start="271:16" pos:end="271:22">textpos</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="275:1" pos:end="275:26">#<cpp:directive pos:start="275:2" pos:end="275:6">ifdef</cpp:directive> <name pos:start="275:8" pos:end="275:26">CONFIG_BINFMT_ZFLAT</name></cpp:ifdef>

<cpp:error pos:start="277:1" pos:end="277:26">#<cpp:directive pos:start="277:2" pos:end="277:6">error</cpp:directive> code needs checking</cpp:error>

        <comment type="block" pos:start="279:9" pos:end="283:11">/*

         * load it all in and treat it like a RAM load from now on

         */</comment>

        <if_stmt pos:start="285:9" pos:end="337:9"><if pos:start="285:9" pos:end="301:9">if <condition pos:start="285:12" pos:end="285:35">(<expr pos:start="285:13" pos:end="285:34"><name pos:start="285:13" pos:end="285:17">flags</name> <operator pos:start="285:19" pos:end="285:19">&amp;</operator> <name pos:start="285:21" pos:end="285:34">FLAT_FLAG_GZIP</name></expr>)</condition> <block pos:start="285:37" pos:end="301:9">{<block_content pos:start="287:17" pos:end="299:77">

                <expr_stmt pos:start="287:17" pos:end="295:36"><expr pos:start="287:17" pos:end="295:35"><name pos:start="287:17" pos:end="287:22">result</name> <operator pos:start="287:24" pos:end="287:24">=</operator> <call pos:start="287:26" pos:end="295:35"><name pos:start="287:26" pos:end="287:40">decompress_exec</name><argument_list pos:start="287:41" pos:end="295:35">(<argument pos:start="287:42" pos:end="287:45"><expr pos:start="287:42" pos:end="287:45"><name pos:start="287:42" pos:end="287:45">bprm</name></expr></argument>, <argument pos:start="287:48" pos:end="287:71"><expr pos:start="287:48" pos:end="287:71"><sizeof pos:start="287:48" pos:end="287:71">sizeof <argument_list pos:start="287:55" pos:end="287:71">(<argument pos:start="287:56" pos:end="287:70"><expr pos:start="287:56" pos:end="287:70">struct <name pos:start="287:63" pos:end="287:70">flat_hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                 <argument pos:start="289:34" pos:end="289:80"><expr pos:start="289:34" pos:end="289:80"><operator pos:start="289:34" pos:end="289:34">(</operator><operator pos:start="289:35" pos:end="289:35">(</operator><operator pos:start="289:36" pos:end="289:36">(</operator><name pos:start="289:37" pos:end="289:40">char</name> <operator pos:start="289:42" pos:end="289:42">*</operator><operator pos:start="289:43" pos:end="289:43">)</operator> <name pos:start="289:45" pos:end="289:51">textpos</name><operator pos:start="289:52" pos:end="289:52">)</operator> <operator pos:start="289:54" pos:end="289:54">+</operator> <sizeof pos:start="289:56" pos:end="289:79">sizeof <argument_list pos:start="289:63" pos:end="289:79">(<argument pos:start="289:64" pos:end="289:78"><expr pos:start="289:64" pos:end="289:78">struct <name pos:start="289:71" pos:end="289:78">flat_hdr</name></expr></argument>)</argument_list></sizeof><operator pos:start="289:80" pos:end="289:80">)</operator></expr></argument>,

                                 <argument pos:start="291:34" pos:end="293:69"><expr pos:start="291:34" pos:end="293:69"><operator pos:start="291:34" pos:end="291:34">(</operator><name pos:start="291:35" pos:end="291:42">text_len</name> <operator pos:start="291:44" pos:end="291:44">+</operator> <name pos:start="291:46" pos:end="291:53">data_len</name> <operator pos:start="291:55" pos:end="291:55">+</operator> <operator pos:start="291:57" pos:end="291:57">(</operator><name pos:start="291:58" pos:end="291:63">relocs</name> <operator pos:start="291:65" pos:end="291:65">*</operator> sizeof<operator pos:start="291:73" pos:end="291:73">(</operator><name pos:start="291:74" pos:end="291:81">unsigned</name> <name pos:start="291:83" pos:end="291:86">long</name><operator pos:start="291:87" pos:end="291:87">)</operator><operator pos:start="291:88" pos:end="291:88">)</operator>

                                          <operator pos:start="293:43" pos:end="293:43">-</operator> <sizeof pos:start="293:45" pos:end="293:68">sizeof <argument_list pos:start="293:52" pos:end="293:68">(<argument pos:start="293:53" pos:end="293:67"><expr pos:start="293:53" pos:end="293:67">struct <name pos:start="293:60" pos:end="293:67">flat_hdr</name></expr></argument>)</argument_list></sizeof><operator pos:start="293:69" pos:end="293:69">)</operator></expr></argument>,

                                 <argument pos:start="295:34" pos:end="295:34"><expr pos:start="295:34" pos:end="295:34"><literal type="number" pos:start="295:34" pos:end="295:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="297:17" pos:end="299:77"><expr pos:start="297:17" pos:end="299:76"><call pos:start="297:17" pos:end="299:76"><name pos:start="297:17" pos:end="297:23">memmove</name><argument_list pos:start="297:24" pos:end="299:76">(<argument pos:start="297:25" pos:end="297:40"><expr pos:start="297:25" pos:end="297:40"><operator pos:start="297:25" pos:end="297:25">(</operator><name pos:start="297:26" pos:end="297:29">void</name> <operator pos:start="297:31" pos:end="297:31">*</operator><operator pos:start="297:32" pos:end="297:32">)</operator> <name pos:start="297:34" pos:end="297:40">datapos</name></expr></argument>, <argument pos:start="297:43" pos:end="297:64"><expr pos:start="297:43" pos:end="297:64"><operator pos:start="297:43" pos:end="297:43">(</operator><name pos:start="297:44" pos:end="297:47">void</name> <operator pos:start="297:49" pos:end="297:49">*</operator><operator pos:start="297:50" pos:end="297:50">)</operator> <name pos:start="297:52" pos:end="297:64">realdatastart</name></expr></argument>,

                                <argument pos:start="299:33" pos:end="299:75"><expr pos:start="299:33" pos:end="299:75"><name pos:start="299:33" pos:end="299:40">data_len</name> <operator pos:start="299:42" pos:end="299:42">+</operator> <operator pos:start="299:44" pos:end="299:44">(</operator><name pos:start="299:45" pos:end="299:50">relocs</name> <operator pos:start="299:52" pos:end="299:52">*</operator> sizeof<operator pos:start="299:60" pos:end="299:60">(</operator><name pos:start="299:61" pos:end="299:68">unsigned</name> <name pos:start="299:70" pos:end="299:73">long</name><operator pos:start="299:74" pos:end="299:74">)</operator><operator pos:start="299:75" pos:end="299:75">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="301:11" pos:end="315:9">else if <condition pos:start="301:19" pos:end="301:44">(<expr pos:start="301:20" pos:end="301:43"><name pos:start="301:20" pos:end="301:24">flags</name> <operator pos:start="301:26" pos:end="301:26">&amp;</operator> <name pos:start="301:28" pos:end="301:43">FLAT_FLAG_GZDATA</name></expr>)</condition> <block pos:start="301:46" pos:end="315:9">{<block_content pos:start="303:17" pos:end="313:89">

                <expr_stmt pos:start="303:17" pos:end="303:25"><expr pos:start="303:17" pos:end="303:24"><name pos:start="303:17" pos:end="303:20">fpos</name> <operator pos:start="303:22" pos:end="303:22">=</operator> <literal type="number" pos:start="303:24" pos:end="303:24">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="305:17" pos:end="307:67"><expr pos:start="305:17" pos:end="307:66"><name pos:start="305:17" pos:end="305:22">result</name> <operator pos:start="305:24" pos:end="305:24">=</operator> <call pos:start="305:26" pos:end="307:66"><name pos:start="305:26" pos:end="305:47"><name pos:start="305:26" pos:end="305:29">bprm</name><operator pos:start="305:30" pos:end="305:31">-&gt;</operator><name pos:start="305:32" pos:end="305:35">file</name><operator pos:start="305:36" pos:end="305:37">-&gt;</operator><name pos:start="305:38" pos:end="305:41">f_op</name><operator pos:start="305:42" pos:end="305:43">-&gt;</operator><name pos:start="305:44" pos:end="305:47">read</name></name><argument_list pos:start="305:48" pos:end="307:66">(<argument pos:start="305:49" pos:end="305:58"><expr pos:start="305:49" pos:end="305:58"><name pos:start="305:49" pos:end="305:58"><name pos:start="305:49" pos:end="305:52">bprm</name><operator pos:start="305:53" pos:end="305:54">-&gt;</operator><name pos:start="305:55" pos:end="305:58">file</name></name></expr></argument>,

                                <argument pos:start="307:33" pos:end="307:48"><expr pos:start="307:33" pos:end="307:48"><operator pos:start="307:33" pos:end="307:33">(</operator><name pos:start="307:34" pos:end="307:37">char</name> <operator pos:start="307:39" pos:end="307:39">*</operator><operator pos:start="307:40" pos:end="307:40">)</operator> <name pos:start="307:42" pos:end="307:48">textpos</name></expr></argument>, <argument pos:start="307:51" pos:end="307:58"><expr pos:start="307:51" pos:end="307:58"><name pos:start="307:51" pos:end="307:58">text_len</name></expr></argument>, <argument pos:start="307:61" pos:end="307:65"><expr pos:start="307:61" pos:end="307:65"><operator pos:start="307:61" pos:end="307:61">&amp;</operator><name pos:start="307:62" pos:end="307:65">fpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="309:17" pos:end="313:89"><if pos:start="309:17" pos:end="313:89">if <condition pos:start="309:20" pos:end="309:51">(<expr pos:start="309:21" pos:end="309:50"><name pos:start="309:21" pos:end="309:26">result</name> <operator pos:start="309:28" pos:end="309:28">&lt;</operator> <operator pos:start="309:30" pos:end="309:30">(</operator><name pos:start="309:31" pos:end="309:38">unsigned</name> <name pos:start="309:40" pos:end="309:43">long</name><operator pos:start="309:44" pos:end="309:44">)</operator> <operator pos:start="309:46" pos:end="309:46">-</operator><literal type="number" pos:start="309:47" pos:end="309:50">4096</literal></expr>)</condition><block type="pseudo" pos:start="311:25" pos:end="313:89"><block_content pos:start="311:25" pos:end="313:89">

                        <expr_stmt pos:start="311:25" pos:end="313:89"><expr pos:start="311:25" pos:end="313:88"><name pos:start="311:25" pos:end="311:30">result</name> <operator pos:start="311:32" pos:end="311:32">=</operator> <call pos:start="311:34" pos:end="313:88"><name pos:start="311:34" pos:end="311:48">decompress_exec</name><argument_list pos:start="311:49" pos:end="313:88">(<argument pos:start="311:50" pos:end="311:53"><expr pos:start="311:50" pos:end="311:53"><name pos:start="311:50" pos:end="311:53">bprm</name></expr></argument>, <argument pos:start="311:56" pos:end="311:63"><expr pos:start="311:56" pos:end="311:63"><name pos:start="311:56" pos:end="311:63">text_len</name></expr></argument>, <argument pos:start="311:66" pos:end="311:81"><expr pos:start="311:66" pos:end="311:81"><operator pos:start="311:66" pos:end="311:66">(</operator><name pos:start="311:67" pos:end="311:70">char</name> <operator pos:start="311:72" pos:end="311:72">*</operator><operator pos:start="311:73" pos:end="311:73">)</operator> <name pos:start="311:75" pos:end="311:81">datapos</name></expr></argument>,

                                         <argument pos:start="313:42" pos:end="313:84"><expr pos:start="313:42" pos:end="313:84"><name pos:start="313:42" pos:end="313:49">data_len</name> <operator pos:start="313:51" pos:end="313:51">+</operator> <operator pos:start="313:53" pos:end="313:53">(</operator><name pos:start="313:54" pos:end="313:59">relocs</name> <operator pos:start="313:61" pos:end="313:61">*</operator> sizeof<operator pos:start="313:69" pos:end="313:69">(</operator><name pos:start="313:70" pos:end="313:77">unsigned</name> <name pos:start="313:79" pos:end="313:82">long</name><operator pos:start="313:83" pos:end="313:83">)</operator><operator pos:start="313:84" pos:end="313:84">)</operator></expr></argument>, <argument pos:start="313:87" pos:end="313:87"><expr pos:start="313:87" pos:end="313:87"><literal type="number" pos:start="313:87" pos:end="313:87">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if>

        <else pos:start="317:9" pos:end="337:9">else

<cpp:endif pos:start="319:1" pos:end="319:6">#<cpp:directive pos:start="319:2" pos:end="319:6">endif</cpp:directive></cpp:endif>

        <block pos:start="321:9" pos:end="337:9">{<block_content pos:start="323:13" pos:end="335:13">

            <expr_stmt pos:start="323:13" pos:end="325:47"><expr pos:start="323:13" pos:end="325:46"><name pos:start="323:13" pos:end="323:18">result</name> <operator pos:start="323:20" pos:end="323:20">=</operator> <call pos:start="323:22" pos:end="325:46"><name pos:start="323:22" pos:end="323:33">target_pread</name><argument_list pos:start="323:34" pos:end="325:46">(<argument pos:start="323:35" pos:end="323:42"><expr pos:start="323:35" pos:end="323:42"><name pos:start="323:35" pos:end="323:42"><name pos:start="323:35" pos:end="323:38">bprm</name><operator pos:start="323:39" pos:end="323:40">-&gt;</operator><name pos:start="323:41" pos:end="323:42">fd</name></name></expr></argument>, <argument pos:start="323:45" pos:end="323:51"><expr pos:start="323:45" pos:end="323:51"><name pos:start="323:45" pos:end="323:51">textpos</name></expr></argument>,

                                  <argument pos:start="325:35" pos:end="325:42"><expr pos:start="325:35" pos:end="325:42"><name pos:start="325:35" pos:end="325:42">text_len</name></expr></argument>, <argument pos:start="325:45" pos:end="325:45"><expr pos:start="325:45" pos:end="325:45"><literal type="number" pos:start="325:45" pos:end="325:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="327:13" pos:end="335:13"><if pos:start="327:13" pos:end="335:13">if <condition pos:start="327:16" pos:end="327:28">(<expr pos:start="327:17" pos:end="327:27"><name pos:start="327:17" pos:end="327:22">result</name> <operator pos:start="327:24" pos:end="327:25">&gt;=</operator> <literal type="number" pos:start="327:27" pos:end="327:27">0</literal></expr>)</condition> <block pos:start="327:30" pos:end="335:13">{<block_content pos:start="329:17" pos:end="333:44">

                <expr_stmt pos:start="329:17" pos:end="333:44"><expr pos:start="329:17" pos:end="333:43"><name pos:start="329:17" pos:end="329:22">result</name> <operator pos:start="329:24" pos:end="329:24">=</operator> <call pos:start="329:26" pos:end="333:43"><name pos:start="329:26" pos:end="329:37">target_pread</name><argument_list pos:start="329:38" pos:end="333:43">(<argument pos:start="329:39" pos:end="329:46"><expr pos:start="329:39" pos:end="329:46"><name pos:start="329:39" pos:end="329:46"><name pos:start="329:39" pos:end="329:42">bprm</name><operator pos:start="329:43" pos:end="329:44">-&gt;</operator><name pos:start="329:45" pos:end="329:46">fd</name></name></expr></argument>, <argument pos:start="329:49" pos:end="329:55"><expr pos:start="329:49" pos:end="329:55"><name pos:start="329:49" pos:end="329:55">datapos</name></expr></argument>,

                    <argument pos:start="331:21" pos:end="331:59"><expr pos:start="331:21" pos:end="331:59"><name pos:start="331:21" pos:end="331:28">data_len</name> <operator pos:start="331:30" pos:end="331:30">+</operator> <operator pos:start="331:32" pos:end="331:32">(</operator><name pos:start="331:33" pos:end="331:38">relocs</name> <operator pos:start="331:40" pos:end="331:40">*</operator> <sizeof pos:start="331:42" pos:end="331:58">sizeof<argument_list pos:start="331:48" pos:end="331:58">(<argument pos:start="331:49" pos:end="331:57"><expr pos:start="331:49" pos:end="331:57"><name pos:start="331:49" pos:end="331:57">abi_ulong</name></expr></argument>)</argument_list></sizeof><operator pos:start="331:59" pos:end="331:59">)</operator></expr></argument>,

                    <argument pos:start="333:21" pos:end="333:42"><expr pos:start="333:21" pos:end="333:42"><call pos:start="333:21" pos:end="333:42"><name pos:start="333:21" pos:end="333:25">ntohl</name><argument_list pos:start="333:26" pos:end="333:42">(<argument pos:start="333:27" pos:end="333:41"><expr pos:start="333:27" pos:end="333:41"><name pos:start="333:27" pos:end="333:41"><name pos:start="333:27" pos:end="333:29">hdr</name><operator pos:start="333:30" pos:end="333:31">-&gt;</operator><name pos:start="333:32" pos:end="333:41">data_start</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="339:9" pos:end="345:9"><if pos:start="339:9" pos:end="345:9">if <condition pos:start="339:12" pos:end="339:23">(<expr pos:start="339:13" pos:end="339:22"><name pos:start="339:13" pos:end="339:18">result</name> <operator pos:start="339:20" pos:end="339:20">&lt;</operator> <literal type="number" pos:start="339:22" pos:end="339:22">0</literal></expr>)</condition> <block pos:start="339:25" pos:end="345:9">{<block_content pos:start="341:13" pos:end="343:26">

            <expr_stmt pos:start="341:13" pos:end="341:62"><expr pos:start="341:13" pos:end="341:61"><call pos:start="341:13" pos:end="341:61"><name pos:start="341:13" pos:end="341:19">fprintf</name><argument_list pos:start="341:20" pos:end="341:61">(<argument pos:start="341:21" pos:end="341:26"><expr pos:start="341:21" pos:end="341:26"><name pos:start="341:21" pos:end="341:26">stderr</name></expr></argument>, <argument pos:start="341:29" pos:end="341:60"><expr pos:start="341:29" pos:end="341:60"><literal type="string" pos:start="341:29" pos:end="341:60">"Unable to read code+data+bss\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="343:13" pos:end="343:26">return <expr pos:start="343:20" pos:end="343:25"><name pos:start="343:20" pos:end="343:25">result</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="351:5" pos:end="355:36"><expr pos:start="351:5" pos:end="355:35"><call pos:start="351:5" pos:end="355:35"><name pos:start="351:5" pos:end="351:11">DBG_FLT</name><argument_list pos:start="351:12" pos:end="355:35">(<argument pos:start="351:13" pos:end="351:72"><expr pos:start="351:13" pos:end="351:72"><literal type="string" pos:start="351:13" pos:end="351:72">"Mapping is 0x%x, Entry point is 0x%x, data_start is 0x%x\n"</literal></expr></argument>,

            <argument pos:start="353:13" pos:end="353:24"><expr pos:start="353:13" pos:end="353:24"><operator pos:start="353:13" pos:end="353:13">(</operator><name pos:start="353:14" pos:end="353:16">int</name><operator pos:start="353:17" pos:end="353:17">)</operator><name pos:start="353:18" pos:end="353:24">textpos</name></expr></argument>, <argument pos:start="353:27" pos:end="353:54"><expr pos:start="353:27" pos:end="353:54"><literal type="number" pos:start="353:27" pos:end="353:36">0x00ffffff</literal><operator pos:start="353:37" pos:end="353:37">&amp;</operator><call pos:start="353:38" pos:end="353:54"><name pos:start="353:38" pos:end="353:42">ntohl</name><argument_list pos:start="353:43" pos:end="353:54">(<argument pos:start="353:44" pos:end="353:53"><expr pos:start="353:44" pos:end="353:53"><name pos:start="353:44" pos:end="353:53"><name pos:start="353:44" pos:end="353:46">hdr</name><operator pos:start="353:47" pos:end="353:48">-&gt;</operator><name pos:start="353:49" pos:end="353:53">entry</name></name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="355:13" pos:end="355:34"><expr pos:start="355:13" pos:end="355:34"><call pos:start="355:13" pos:end="355:34"><name pos:start="355:13" pos:end="355:17">ntohl</name><argument_list pos:start="355:18" pos:end="355:34">(<argument pos:start="355:19" pos:end="355:33"><expr pos:start="355:19" pos:end="355:33"><name pos:start="355:19" pos:end="355:33"><name pos:start="355:19" pos:end="355:21">hdr</name><operator pos:start="355:22" pos:end="355:23">-&gt;</operator><name pos:start="355:24" pos:end="355:33">data_start</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="359:5" pos:end="359:75">/* The main program needs a little extra setup in the task structure */</comment>

    <expr_stmt pos:start="361:5" pos:end="361:52"><expr pos:start="361:5" pos:end="361:51"><name pos:start="361:5" pos:end="361:14">start_code</name> <operator pos:start="361:16" pos:end="361:16">=</operator> <name pos:start="361:18" pos:end="361:24">textpos</name> <operator pos:start="361:26" pos:end="361:26">+</operator> <sizeof pos:start="361:28" pos:end="361:51">sizeof <argument_list pos:start="361:35" pos:end="361:51">(<argument pos:start="361:36" pos:end="361:50"><expr pos:start="361:36" pos:end="361:50">struct <name pos:start="361:43" pos:end="361:50">flat_hdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:34"><expr pos:start="363:5" pos:end="363:33"><name pos:start="363:5" pos:end="363:12">end_code</name> <operator pos:start="363:14" pos:end="363:14">=</operator> <name pos:start="363:16" pos:end="363:22">textpos</name> <operator pos:start="363:24" pos:end="363:24">+</operator> <name pos:start="363:26" pos:end="363:33">text_len</name></expr>;</expr_stmt>



    <expr_stmt pos:start="367:5" pos:end="379:63"><expr pos:start="367:5" pos:end="379:62"><call pos:start="367:5" pos:end="379:62"><name pos:start="367:5" pos:end="367:11">DBG_FLT</name><argument_list pos:start="367:12" pos:end="379:62">(<argument pos:start="367:13" pos:end="367:54"><expr pos:start="367:13" pos:end="367:54"><literal type="string" pos:start="367:13" pos:end="367:54">"%s %s: TEXT=%x-%x DATA=%x-%x BSS=%x-%x\n"</literal></expr></argument>,

            <argument pos:start="369:13" pos:end="369:31"><expr pos:start="369:13" pos:end="369:31"><ternary pos:start="369:13" pos:end="369:31"><condition pos:start="369:13" pos:end="369:16"><expr pos:start="369:13" pos:end="369:14"><name pos:start="369:13" pos:end="369:14">id</name></expr> ?</condition><then pos:start="369:18" pos:end="369:22"> <expr pos:start="369:18" pos:end="369:22"><literal type="string" pos:start="369:18" pos:end="369:22">"Lib"</literal></expr> </then><else pos:start="369:24" pos:end="369:31">: <expr pos:start="369:26" pos:end="369:31"><literal type="string" pos:start="369:26" pos:end="369:31">"Load"</literal></expr></else></ternary></expr></argument>, <argument pos:start="369:34" pos:end="369:47"><expr pos:start="369:34" pos:end="369:47"><name pos:start="369:34" pos:end="369:47"><name pos:start="369:34" pos:end="369:37">bprm</name><operator pos:start="369:38" pos:end="369:39">-&gt;</operator><name pos:start="369:40" pos:end="369:47">filename</name></name></expr></argument>,

            <argument pos:start="371:13" pos:end="371:28"><expr pos:start="371:13" pos:end="371:28"><operator pos:start="371:13" pos:end="371:13">(</operator><name pos:start="371:14" pos:end="371:16">int</name><operator pos:start="371:17" pos:end="371:17">)</operator> <name pos:start="371:19" pos:end="371:28">start_code</name></expr></argument>, <argument pos:start="371:31" pos:end="371:44"><expr pos:start="371:31" pos:end="371:44"><operator pos:start="371:31" pos:end="371:31">(</operator><name pos:start="371:32" pos:end="371:34">int</name><operator pos:start="371:35" pos:end="371:35">)</operator> <name pos:start="371:37" pos:end="371:44">end_code</name></expr></argument>,

            <argument pos:start="373:13" pos:end="373:25"><expr pos:start="373:13" pos:end="373:25"><operator pos:start="373:13" pos:end="373:13">(</operator><name pos:start="373:14" pos:end="373:16">int</name><operator pos:start="373:17" pos:end="373:17">)</operator> <name pos:start="373:19" pos:end="373:25">datapos</name></expr></argument>,

            <argument pos:start="375:13" pos:end="375:38"><expr pos:start="375:13" pos:end="375:38"><operator pos:start="375:13" pos:end="375:13">(</operator><name pos:start="375:14" pos:end="375:16">int</name><operator pos:start="375:17" pos:end="375:17">)</operator> <operator pos:start="375:19" pos:end="375:19">(</operator><name pos:start="375:20" pos:end="375:26">datapos</name> <operator pos:start="375:28" pos:end="375:28">+</operator> <name pos:start="375:30" pos:end="375:37">data_len</name><operator pos:start="375:38" pos:end="375:38">)</operator></expr></argument>,

            <argument pos:start="377:13" pos:end="377:38"><expr pos:start="377:13" pos:end="377:38"><operator pos:start="377:13" pos:end="377:13">(</operator><name pos:start="377:14" pos:end="377:16">int</name><operator pos:start="377:17" pos:end="377:17">)</operator> <operator pos:start="377:19" pos:end="377:19">(</operator><name pos:start="377:20" pos:end="377:26">datapos</name> <operator pos:start="377:28" pos:end="377:28">+</operator> <name pos:start="377:30" pos:end="377:37">data_len</name><operator pos:start="377:38" pos:end="377:38">)</operator></expr></argument>,

            <argument pos:start="379:13" pos:end="379:61"><expr pos:start="379:13" pos:end="379:61"><operator pos:start="379:13" pos:end="379:13">(</operator><name pos:start="379:14" pos:end="379:16">int</name><operator pos:start="379:17" pos:end="379:17">)</operator> <operator pos:start="379:19" pos:end="379:19">(</operator><operator pos:start="379:20" pos:end="379:20">(</operator><operator pos:start="379:21" pos:end="379:21">(</operator><name pos:start="379:22" pos:end="379:28">datapos</name> <operator pos:start="379:30" pos:end="379:30">+</operator> <name pos:start="379:32" pos:end="379:39">data_len</name> <operator pos:start="379:41" pos:end="379:41">+</operator> <name pos:start="379:43" pos:end="379:49">bss_len</name><operator pos:start="379:50" pos:end="379:50">)</operator> <operator pos:start="379:52" pos:end="379:52">+</operator> <literal type="number" pos:start="379:54" pos:end="379:54">3</literal><operator pos:start="379:55" pos:end="379:55">)</operator> <operator pos:start="379:57" pos:end="379:57">&amp;</operator> <operator pos:start="379:59" pos:end="379:59">~</operator><literal type="number" pos:start="379:60" pos:end="379:60">3</literal><operator pos:start="379:61" pos:end="379:61">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="383:5" pos:end="383:40"><expr pos:start="383:5" pos:end="383:39"><name pos:start="383:5" pos:end="383:12">text_len</name> <operator pos:start="383:14" pos:end="383:15">-=</operator> <sizeof pos:start="383:17" pos:end="383:39">sizeof<argument_list pos:start="383:23" pos:end="383:39">(<argument pos:start="383:24" pos:end="383:38"><expr pos:start="383:24" pos:end="383:38">struct <name pos:start="383:31" pos:end="383:38">flat_hdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <comment type="block" pos:start="383:42" pos:end="383:64">/* the real code len */</comment>



    <comment type="block" pos:start="387:5" pos:end="387:75">/* Store the current module values into the global library structure */</comment>

    <expr_stmt pos:start="389:5" pos:end="389:40"><expr pos:start="389:5" pos:end="389:39"><name pos:start="389:5" pos:end="389:15"><name pos:start="389:5" pos:end="389:11">libinfo</name><index pos:start="389:12" pos:end="389:15">[<expr pos:start="389:13" pos:end="389:14"><name pos:start="389:13" pos:end="389:14">id</name></expr>]</index></name><operator pos:start="389:16" pos:end="389:16">.</operator><name pos:start="389:17" pos:end="389:26">start_code</name> <operator pos:start="389:28" pos:end="389:28">=</operator> <name pos:start="389:30" pos:end="389:39">start_code</name></expr>;</expr_stmt>

    <expr_stmt pos:start="391:5" pos:end="391:37"><expr pos:start="391:5" pos:end="391:36"><name pos:start="391:5" pos:end="391:15"><name pos:start="391:5" pos:end="391:11">libinfo</name><index pos:start="391:12" pos:end="391:15">[<expr pos:start="391:13" pos:end="391:14"><name pos:start="391:13" pos:end="391:14">id</name></expr>]</index></name><operator pos:start="391:16" pos:end="391:16">.</operator><name pos:start="391:17" pos:end="391:26">start_data</name> <operator pos:start="391:28" pos:end="391:28">=</operator> <name pos:start="391:30" pos:end="391:36">datapos</name></expr>;</expr_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:46"><expr pos:start="393:5" pos:end="393:45"><name pos:start="393:5" pos:end="393:15"><name pos:start="393:5" pos:end="393:11">libinfo</name><index pos:start="393:12" pos:end="393:15">[<expr pos:start="393:13" pos:end="393:14"><name pos:start="393:13" pos:end="393:14">id</name></expr>]</index></name><operator pos:start="393:16" pos:end="393:16">.</operator><name pos:start="393:17" pos:end="393:24">end_data</name> <operator pos:start="393:26" pos:end="393:26">=</operator> <name pos:start="393:28" pos:end="393:34">datapos</name> <operator pos:start="393:36" pos:end="393:36">+</operator> <name pos:start="393:38" pos:end="393:45">data_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="395:57"><expr pos:start="395:5" pos:end="395:56"><name pos:start="395:5" pos:end="395:15"><name pos:start="395:5" pos:end="395:11">libinfo</name><index pos:start="395:12" pos:end="395:15">[<expr pos:start="395:13" pos:end="395:14"><name pos:start="395:13" pos:end="395:14">id</name></expr>]</index></name><operator pos:start="395:16" pos:end="395:16">.</operator><name pos:start="395:17" pos:end="395:25">start_brk</name> <operator pos:start="395:27" pos:end="395:27">=</operator> <name pos:start="395:29" pos:end="395:35">datapos</name> <operator pos:start="395:37" pos:end="395:37">+</operator> <name pos:start="395:39" pos:end="395:46">data_len</name> <operator pos:start="395:48" pos:end="395:48">+</operator> <name pos:start="395:50" pos:end="395:56">bss_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="397:36"><expr pos:start="397:5" pos:end="397:35"><name pos:start="397:5" pos:end="397:15"><name pos:start="397:5" pos:end="397:11">libinfo</name><index pos:start="397:12" pos:end="397:15">[<expr pos:start="397:13" pos:end="397:14"><name pos:start="397:13" pos:end="397:14">id</name></expr>]</index></name><operator pos:start="397:16" pos:end="397:16">.</operator><name pos:start="397:17" pos:end="397:24">text_len</name> <operator pos:start="397:26" pos:end="397:26">=</operator> <name pos:start="397:28" pos:end="397:35">text_len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="399:5" pos:end="399:27"><expr pos:start="399:5" pos:end="399:26"><name pos:start="399:5" pos:end="399:15"><name pos:start="399:5" pos:end="399:11">libinfo</name><index pos:start="399:12" pos:end="399:15">[<expr pos:start="399:13" pos:end="399:14"><name pos:start="399:13" pos:end="399:14">id</name></expr>]</index></name><operator pos:start="399:16" pos:end="399:16">.</operator><name pos:start="399:17" pos:end="399:22">loaded</name> <operator pos:start="399:24" pos:end="399:24">=</operator> <literal type="number" pos:start="399:26" pos:end="399:26">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="401:67"><expr pos:start="401:5" pos:end="401:66"><name pos:start="401:5" pos:end="401:15"><name pos:start="401:5" pos:end="401:11">libinfo</name><index pos:start="401:12" pos:end="401:15">[<expr pos:start="401:13" pos:end="401:14"><name pos:start="401:13" pos:end="401:14">id</name></expr>]</index></name><operator pos:start="401:16" pos:end="401:16">.</operator><name pos:start="401:17" pos:end="401:21">entry</name> <operator pos:start="401:23" pos:end="401:23">=</operator> <operator pos:start="401:25" pos:end="401:25">(</operator><literal type="number" pos:start="401:26" pos:end="401:35">0x00ffffff</literal> <operator pos:start="401:37" pos:end="401:37">&amp;</operator> <call pos:start="401:39" pos:end="401:55"><name pos:start="401:39" pos:end="401:43">ntohl</name><argument_list pos:start="401:44" pos:end="401:55">(<argument pos:start="401:45" pos:end="401:54"><expr pos:start="401:45" pos:end="401:54"><name pos:start="401:45" pos:end="401:54"><name pos:start="401:45" pos:end="401:47">hdr</name><operator pos:start="401:48" pos:end="401:49">-&gt;</operator><name pos:start="401:50" pos:end="401:54">entry</name></name></expr></argument>)</argument_list></call><operator pos:start="401:56" pos:end="401:56">)</operator> <operator pos:start="401:58" pos:end="401:58">+</operator> <name pos:start="401:60" pos:end="401:66">textpos</name></expr>;</expr_stmt>

    <expr_stmt pos:start="403:5" pos:end="403:52"><expr pos:start="403:5" pos:end="403:51"><name pos:start="403:5" pos:end="403:15"><name pos:start="403:5" pos:end="403:11">libinfo</name><index pos:start="403:12" pos:end="403:15">[<expr pos:start="403:13" pos:end="403:14"><name pos:start="403:13" pos:end="403:14">id</name></expr>]</index></name><operator pos:start="403:16" pos:end="403:16">.</operator><name pos:start="403:17" pos:end="403:26">build_date</name> <operator pos:start="403:28" pos:end="403:28">=</operator> <call pos:start="403:30" pos:end="403:51"><name pos:start="403:30" pos:end="403:34">ntohl</name><argument_list pos:start="403:35" pos:end="403:51">(<argument pos:start="403:36" pos:end="403:50"><expr pos:start="403:36" pos:end="403:50"><name pos:start="403:36" pos:end="403:50"><name pos:start="403:36" pos:end="403:38">hdr</name><operator pos:start="403:39" pos:end="403:40">-&gt;</operator><name pos:start="403:41" pos:end="403:50">build_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="407:5" pos:end="429:7">/*

     * We just load the allocations into some temporary memory to

     * help simplify all this mumbo jumbo

     *

     * We've got two different sections of relocation entries.

     * The first is the GOT which resides at the begining of the data segment

     * and is terminated with a -1.  This one can be relocated in place.

     * The second is the extra relocation entries tacked after the image's

     * data segment. These require a little more processing as the entry is

     * really an offset into the image which contains an offset into the

     * image.

     */</comment>

    <if_stmt pos:start="431:5" pos:end="465:5"><if pos:start="431:5" pos:end="465:5">if <condition pos:start="431:8" pos:end="431:33">(<expr pos:start="431:9" pos:end="431:32"><name pos:start="431:9" pos:end="431:13">flags</name> <operator pos:start="431:15" pos:end="431:15">&amp;</operator> <name pos:start="431:17" pos:end="431:32">FLAT_FLAG_GOTPIC</name></expr>)</condition> <block pos:start="431:35" pos:end="465:5">{<block_content pos:start="433:9" pos:end="463:9">

        <expr_stmt pos:start="433:9" pos:end="433:21"><expr pos:start="433:9" pos:end="433:20"><name pos:start="433:9" pos:end="433:10">rp</name> <operator pos:start="433:12" pos:end="433:12">=</operator> <name pos:start="433:14" pos:end="433:20">datapos</name></expr>;</expr_stmt>

        <while pos:start="435:9" pos:end="463:9">while <condition pos:start="435:15" pos:end="435:17">(<expr pos:start="435:16" pos:end="435:16"><literal type="number" pos:start="435:16" pos:end="435:16">1</literal></expr>)</condition> <block pos:start="435:19" pos:end="463:9">{<block_content pos:start="437:13" pos:end="461:36">

            <decl_stmt pos:start="437:13" pos:end="437:27"><decl pos:start="437:13" pos:end="437:26"><type pos:start="437:13" pos:end="437:21"><name pos:start="437:13" pos:end="437:21">abi_ulong</name></type> <name pos:start="437:23" pos:end="437:26">addr</name></decl>;</decl_stmt>

            <if_stmt pos:start="439:13" pos:end="441:31"><if pos:start="439:13" pos:end="441:31">if <condition pos:start="439:16" pos:end="439:39">(<expr pos:start="439:17" pos:end="439:38"><call pos:start="439:17" pos:end="439:38"><name pos:start="439:17" pos:end="439:28">get_user_ual</name><argument_list pos:start="439:29" pos:end="439:38">(<argument pos:start="439:30" pos:end="439:33"><expr pos:start="439:30" pos:end="439:33"><name pos:start="439:30" pos:end="439:33">addr</name></expr></argument>, <argument pos:start="439:36" pos:end="439:37"><expr pos:start="439:36" pos:end="439:37"><name pos:start="439:36" pos:end="439:37">rp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="441:17" pos:end="441:31"><block_content pos:start="441:17" pos:end="441:31">

                <return pos:start="441:17" pos:end="441:31">return <expr pos:start="441:24" pos:end="441:30"><operator pos:start="441:24" pos:end="441:24">-</operator><name pos:start="441:25" pos:end="441:30">EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="443:13" pos:end="445:22"><if pos:start="443:13" pos:end="445:22">if <condition pos:start="443:16" pos:end="443:27">(<expr pos:start="443:17" pos:end="443:26"><name pos:start="443:17" pos:end="443:20">addr</name> <operator pos:start="443:22" pos:end="443:23">==</operator> <operator pos:start="443:25" pos:end="443:25">-</operator><literal type="number" pos:start="443:26" pos:end="443:26">1</literal></expr>)</condition><block type="pseudo" pos:start="445:17" pos:end="445:22"><block_content pos:start="445:17" pos:end="445:22">

                <break pos:start="445:17" pos:end="445:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="447:13" pos:end="459:13"><if pos:start="447:13" pos:end="459:13">if <condition pos:start="447:16" pos:end="447:21">(<expr pos:start="447:17" pos:end="447:20"><name pos:start="447:17" pos:end="447:20">addr</name></expr>)</condition> <block pos:start="447:23" pos:end="459:13">{<block_content pos:start="449:17" pos:end="457:35">

                <expr_stmt pos:start="449:17" pos:end="449:56"><expr pos:start="449:17" pos:end="449:55"><name pos:start="449:17" pos:end="449:20">addr</name> <operator pos:start="449:22" pos:end="449:22">=</operator> <call pos:start="449:24" pos:end="449:55"><name pos:start="449:24" pos:end="449:33">calc_reloc</name><argument_list pos:start="449:34" pos:end="449:55">(<argument pos:start="449:35" pos:end="449:38"><expr pos:start="449:35" pos:end="449:38"><name pos:start="449:35" pos:end="449:38">addr</name></expr></argument>, <argument pos:start="449:41" pos:end="449:47"><expr pos:start="449:41" pos:end="449:47"><name pos:start="449:41" pos:end="449:47">libinfo</name></expr></argument>, <argument pos:start="449:50" pos:end="449:51"><expr pos:start="449:50" pos:end="449:51"><name pos:start="449:50" pos:end="449:51">id</name></expr></argument>, <argument pos:start="449:54" pos:end="449:54"><expr pos:start="449:54" pos:end="449:54"><literal type="number" pos:start="449:54" pos:end="449:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="451:17" pos:end="453:36"><if pos:start="451:17" pos:end="453:36">if <condition pos:start="451:20" pos:end="451:41">(<expr pos:start="451:21" pos:end="451:40"><name pos:start="451:21" pos:end="451:24">addr</name> <operator pos:start="451:26" pos:end="451:27">==</operator> <name pos:start="451:29" pos:end="451:40">RELOC_FAILED</name></expr>)</condition><block type="pseudo" pos:start="453:21" pos:end="453:36"><block_content pos:start="453:21" pos:end="453:36">

                    <return pos:start="453:21" pos:end="453:36">return <expr pos:start="453:28" pos:end="453:35"><operator pos:start="453:28" pos:end="453:28">-</operator><name pos:start="453:29" pos:end="453:35">ENOEXEC</name></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="455:17" pos:end="457:35"><if pos:start="455:17" pos:end="457:35">if <condition pos:start="455:20" pos:end="455:43">(<expr pos:start="455:21" pos:end="455:42"><call pos:start="455:21" pos:end="455:42"><name pos:start="455:21" pos:end="455:32">put_user_ual</name><argument_list pos:start="455:33" pos:end="455:42">(<argument pos:start="455:34" pos:end="455:37"><expr pos:start="455:34" pos:end="455:37"><name pos:start="455:34" pos:end="455:37">addr</name></expr></argument>, <argument pos:start="455:40" pos:end="455:41"><expr pos:start="455:40" pos:end="455:41"><name pos:start="455:40" pos:end="455:41">rp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="457:21" pos:end="457:35"><block_content pos:start="457:21" pos:end="457:35">

                    <return pos:start="457:21" pos:end="457:35">return <expr pos:start="457:28" pos:end="457:34"><operator pos:start="457:28" pos:end="457:28">-</operator><name pos:start="457:29" pos:end="457:34">EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="461:13" pos:end="461:36"><expr pos:start="461:13" pos:end="461:35"><name pos:start="461:13" pos:end="461:14">rp</name> <operator pos:start="461:16" pos:end="461:17">+=</operator> <sizeof pos:start="461:19" pos:end="461:35">sizeof<argument_list pos:start="461:25" pos:end="461:35">(<argument pos:start="461:26" pos:end="461:34"><expr pos:start="461:26" pos:end="461:34"><name pos:start="461:26" pos:end="461:34">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="469:5" pos:end="489:7">/*

     * Now run through the relocation entries.

     * We've got to be careful here as C++ produces relocatable zero

     * entries in the constructor and destructor tables which are then

     * tested for being not zero (which will always occur unless we're

     * based from address zero).  This causes an endless loop as __start

     * is at zero.  The solution used is to not relocate zero addresses.

     * This has the negative side effect of not allowing a global data

     * reference to be statically initialised to _stext (I've moved

     * __start to address 4 so that is okay).

     */</comment>

    <if_stmt pos:start="491:5" pos:end="577:5"><if pos:start="491:5" pos:end="563:5">if <condition pos:start="491:8" pos:end="491:31">(<expr pos:start="491:9" pos:end="491:30"><name pos:start="491:9" pos:end="491:11">rev</name> <operator pos:start="491:13" pos:end="491:13">&gt;</operator> <name pos:start="491:15" pos:end="491:30">OLD_FLAT_VERSION</name></expr>)</condition> <block pos:start="491:33" pos:end="563:5">{<block_content pos:start="493:9" pos:end="561:9">

        <for pos:start="493:9" pos:end="561:9">for <control pos:start="493:13" pos:end="493:36">(<init pos:start="493:14" pos:end="493:19"><expr pos:start="493:14" pos:end="493:18"><name pos:start="493:14" pos:end="493:14">i</name> <operator pos:start="493:16" pos:end="493:16">=</operator> <literal type="number" pos:start="493:18" pos:end="493:18">0</literal></expr>;</init> <condition pos:start="493:21" pos:end="493:31"><expr pos:start="493:21" pos:end="493:30"><name pos:start="493:21" pos:end="493:21">i</name> <operator pos:start="493:23" pos:end="493:23">&lt;</operator> <name pos:start="493:25" pos:end="493:30">relocs</name></expr>;</condition> <incr pos:start="493:33" pos:end="493:35"><expr pos:start="493:33" pos:end="493:35"><name pos:start="493:33" pos:end="493:33">i</name><operator pos:start="493:34" pos:end="493:35">++</operator></expr></incr>)</control> <block pos:start="493:38" pos:end="561:9">{<block_content pos:start="495:13" pos:end="559:13">

            <decl_stmt pos:start="495:13" pos:end="495:35"><decl pos:start="495:13" pos:end="495:26"><type pos:start="495:13" pos:end="495:21"><name pos:start="495:13" pos:end="495:21">abi_ulong</name></type> <name pos:start="495:23" pos:end="495:26">addr</name></decl>, <decl pos:start="495:29" pos:end="495:34"><type ref="prev" pos:start="495:13" pos:end="495:21"/><name pos:start="495:29" pos:end="495:34">relval</name></decl>;</decl_stmt>



            <comment type="block" pos:start="499:13" pos:end="503:36">/* Get the address of the pointer to be

               relocated (of course, the address has to be

               relocated first).  */</comment>

            <if_stmt pos:start="505:13" pos:end="507:31"><if pos:start="505:13" pos:end="507:31">if <condition pos:start="505:16" pos:end="505:68">(<expr pos:start="505:17" pos:end="505:67"><call pos:start="505:17" pos:end="505:67"><name pos:start="505:17" pos:end="505:28">get_user_ual</name><argument_list pos:start="505:29" pos:end="505:67">(<argument pos:start="505:30" pos:end="505:35"><expr pos:start="505:30" pos:end="505:35"><name pos:start="505:30" pos:end="505:35">relval</name></expr></argument>, <argument pos:start="505:38" pos:end="505:66"><expr pos:start="505:38" pos:end="505:66"><name pos:start="505:38" pos:end="505:42">reloc</name> <operator pos:start="505:44" pos:end="505:44">+</operator> <name pos:start="505:46" pos:end="505:46">i</name> <operator pos:start="505:48" pos:end="505:48">*</operator> <sizeof pos:start="505:50" pos:end="505:66">sizeof<argument_list pos:start="505:56" pos:end="505:66">(<argument pos:start="505:57" pos:end="505:65"><expr pos:start="505:57" pos:end="505:65"><name pos:start="505:57" pos:end="505:65">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="507:17" pos:end="507:31"><block_content pos:start="507:17" pos:end="507:31">

                <return pos:start="507:17" pos:end="507:31">return <expr pos:start="507:24" pos:end="507:30"><operator pos:start="507:24" pos:end="507:24">-</operator><name pos:start="507:25" pos:end="507:30">EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="509:13" pos:end="509:50"><expr pos:start="509:13" pos:end="509:49"><name pos:start="509:13" pos:end="509:16">addr</name> <operator pos:start="509:18" pos:end="509:18">=</operator> <call pos:start="509:20" pos:end="509:49"><name pos:start="509:20" pos:end="509:41">flat_get_relocate_addr</name><argument_list pos:start="509:42" pos:end="509:49">(<argument pos:start="509:43" pos:end="509:48"><expr pos:start="509:43" pos:end="509:48"><name pos:start="509:43" pos:end="509:48">relval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="511:13" pos:end="511:50"><expr pos:start="511:13" pos:end="511:49"><name pos:start="511:13" pos:end="511:14">rp</name> <operator pos:start="511:16" pos:end="511:16">=</operator> <call pos:start="511:18" pos:end="511:49"><name pos:start="511:18" pos:end="511:27">calc_reloc</name><argument_list pos:start="511:28" pos:end="511:49">(<argument pos:start="511:29" pos:end="511:32"><expr pos:start="511:29" pos:end="511:32"><name pos:start="511:29" pos:end="511:32">addr</name></expr></argument>, <argument pos:start="511:35" pos:end="511:41"><expr pos:start="511:35" pos:end="511:41"><name pos:start="511:35" pos:end="511:41">libinfo</name></expr></argument>, <argument pos:start="511:44" pos:end="511:45"><expr pos:start="511:44" pos:end="511:45"><name pos:start="511:44" pos:end="511:45">id</name></expr></argument>, <argument pos:start="511:48" pos:end="511:48"><expr pos:start="511:48" pos:end="511:48"><literal type="number" pos:start="511:48" pos:end="511:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="513:13" pos:end="515:32"><if pos:start="513:13" pos:end="515:32">if <condition pos:start="513:16" pos:end="513:35">(<expr pos:start="513:17" pos:end="513:34"><name pos:start="513:17" pos:end="513:18">rp</name> <operator pos:start="513:20" pos:end="513:21">==</operator> <name pos:start="513:23" pos:end="513:34">RELOC_FAILED</name></expr>)</condition><block type="pseudo" pos:start="515:17" pos:end="515:32"><block_content pos:start="515:17" pos:end="515:32">

                <return pos:start="515:17" pos:end="515:32">return <expr pos:start="515:24" pos:end="515:31"><operator pos:start="515:24" pos:end="515:24">-</operator><name pos:start="515:25" pos:end="515:31">ENOEXEC</name></expr>;</return></block_content></block></if></if_stmt>



            <comment type="block" pos:start="519:13" pos:end="519:43">/* Get the pointer's value.  */</comment>

            <if_stmt pos:start="521:13" pos:end="523:31"><if pos:start="521:13" pos:end="523:31">if <condition pos:start="521:16" pos:end="521:39">(<expr pos:start="521:17" pos:end="521:38"><call pos:start="521:17" pos:end="521:38"><name pos:start="521:17" pos:end="521:28">get_user_ual</name><argument_list pos:start="521:29" pos:end="521:38">(<argument pos:start="521:30" pos:end="521:33"><expr pos:start="521:30" pos:end="521:33"><name pos:start="521:30" pos:end="521:33">addr</name></expr></argument>, <argument pos:start="521:36" pos:end="521:37"><expr pos:start="521:36" pos:end="521:37"><name pos:start="521:36" pos:end="521:37">rp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="523:17" pos:end="523:31"><block_content pos:start="523:17" pos:end="523:31">

                <return pos:start="523:17" pos:end="523:31">return <expr pos:start="523:24" pos:end="523:30"><operator pos:start="523:24" pos:end="523:24">-</operator><name pos:start="523:25" pos:end="523:30">EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="525:13" pos:end="559:13"><if pos:start="525:13" pos:end="559:13">if <condition pos:start="525:16" pos:end="525:26">(<expr pos:start="525:17" pos:end="525:25"><name pos:start="525:17" pos:end="525:20">addr</name> <operator pos:start="525:22" pos:end="525:23">!=</operator> <literal type="number" pos:start="525:25" pos:end="525:25">0</literal></expr>)</condition> <block pos:start="525:28" pos:end="559:13">{<block_content pos:start="539:17" pos:end="557:35">

                <comment type="block" pos:start="527:17" pos:end="533:19">/*

                 * Do the relocation.  PIC relocs in the data section are

                 * already in target order

                 */</comment>



<cpp:ifndef pos:start="537:1" pos:end="537:30">#<cpp:directive pos:start="537:2" pos:end="537:7">ifndef</cpp:directive> <name pos:start="537:9" pos:end="537:30">TARGET_WORDS_BIGENDIAN</name></cpp:ifndef>

                <if_stmt pos:start="539:17" pos:end="544:0"><if pos:start="539:17" pos:end="544:0">if <condition pos:start="539:20" pos:end="539:52">(<expr pos:start="539:21" pos:end="539:51"><operator pos:start="539:21" pos:end="539:21">(</operator><name pos:start="539:22" pos:end="539:26">flags</name> <operator pos:start="539:28" pos:end="539:28">&amp;</operator> <name pos:start="539:30" pos:end="539:45">FLAT_FLAG_GOTPIC</name><operator pos:start="539:46" pos:end="539:46">)</operator> <operator pos:start="539:48" pos:end="539:49">==</operator> <literal type="number" pos:start="539:51" pos:end="539:51">0</literal></expr>)</condition><block type="pseudo" pos:start="541:21" pos:end="544:0"><block_content pos:start="541:21" pos:end="544:0">

                    <expr_stmt pos:start="541:21" pos:end="544:0"><expr pos:start="541:21" pos:end="541:40"><name pos:start="541:21" pos:end="541:24">addr</name> <operator pos:start="541:26" pos:end="541:26">=</operator> <call pos:start="541:28" pos:end="541:40"><name pos:start="541:28" pos:end="541:34">bswap32</name><argument_list pos:start="541:35" pos:end="541:40">(<argument pos:start="541:36" pos:end="541:39"><expr pos:start="541:36" pos:end="541:39"><name pos:start="541:36" pos:end="541:39">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="543:1" pos:end="543:6">#<cpp:directive pos:start="543:2" pos:end="543:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="545:17" pos:end="545:56"><expr pos:start="545:17" pos:end="545:55"><name pos:start="545:17" pos:end="545:20">addr</name> <operator pos:start="545:22" pos:end="545:22">=</operator> <call pos:start="545:24" pos:end="545:55"><name pos:start="545:24" pos:end="545:33">calc_reloc</name><argument_list pos:start="545:34" pos:end="545:55">(<argument pos:start="545:35" pos:end="545:38"><expr pos:start="545:35" pos:end="545:38"><name pos:start="545:35" pos:end="545:38">addr</name></expr></argument>, <argument pos:start="545:41" pos:end="545:47"><expr pos:start="545:41" pos:end="545:47"><name pos:start="545:41" pos:end="545:47">libinfo</name></expr></argument>, <argument pos:start="545:50" pos:end="545:51"><expr pos:start="545:50" pos:end="545:51"><name pos:start="545:50" pos:end="545:51">id</name></expr></argument>, <argument pos:start="545:54" pos:end="545:54"><expr pos:start="545:54" pos:end="545:54"><literal type="number" pos:start="545:54" pos:end="545:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="547:17" pos:end="549:36"><if pos:start="547:17" pos:end="549:36">if <condition pos:start="547:20" pos:end="547:41">(<expr pos:start="547:21" pos:end="547:40"><name pos:start="547:21" pos:end="547:24">addr</name> <operator pos:start="547:26" pos:end="547:27">==</operator> <name pos:start="547:29" pos:end="547:40">RELOC_FAILED</name></expr>)</condition><block type="pseudo" pos:start="549:21" pos:end="549:36"><block_content pos:start="549:21" pos:end="549:36">

                    <return pos:start="549:21" pos:end="549:36">return <expr pos:start="549:28" pos:end="549:35"><operator pos:start="549:28" pos:end="549:28">-</operator><name pos:start="549:29" pos:end="549:35">ENOEXEC</name></expr>;</return></block_content></block></if></if_stmt>



                <comment type="block" pos:start="553:17" pos:end="553:56">/* Write back the relocated pointer.  */</comment>

                <if_stmt pos:start="555:17" pos:end="557:35"><if pos:start="555:17" pos:end="557:35">if <condition pos:start="555:20" pos:end="555:43">(<expr pos:start="555:21" pos:end="555:42"><call pos:start="555:21" pos:end="555:42"><name pos:start="555:21" pos:end="555:32">put_user_ual</name><argument_list pos:start="555:33" pos:end="555:42">(<argument pos:start="555:34" pos:end="555:37"><expr pos:start="555:34" pos:end="555:37"><name pos:start="555:34" pos:end="555:37">addr</name></expr></argument>, <argument pos:start="555:40" pos:end="555:41"><expr pos:start="555:40" pos:end="555:41"><name pos:start="555:40" pos:end="555:41">rp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="557:21" pos:end="557:35"><block_content pos:start="557:21" pos:end="557:35">

                    <return pos:start="557:21" pos:end="557:35">return <expr pos:start="557:28" pos:end="557:34"><operator pos:start="557:28" pos:end="557:28">-</operator><name pos:start="557:29" pos:end="557:34">EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="563:7" pos:end="577:5">else <block pos:start="563:12" pos:end="577:5">{<block_content pos:start="565:9" pos:end="575:9">

        <for pos:start="565:9" pos:end="575:9">for <control pos:start="565:13" pos:end="565:36">(<init pos:start="565:14" pos:end="565:19"><expr pos:start="565:14" pos:end="565:18"><name pos:start="565:14" pos:end="565:14">i</name> <operator pos:start="565:16" pos:end="565:16">=</operator> <literal type="number" pos:start="565:18" pos:end="565:18">0</literal></expr>;</init> <condition pos:start="565:21" pos:end="565:31"><expr pos:start="565:21" pos:end="565:30"><name pos:start="565:21" pos:end="565:21">i</name> <operator pos:start="565:23" pos:end="565:23">&lt;</operator> <name pos:start="565:25" pos:end="565:30">relocs</name></expr>;</condition> <incr pos:start="565:33" pos:end="565:35"><expr pos:start="565:33" pos:end="565:35"><name pos:start="565:33" pos:end="565:33">i</name><operator pos:start="565:34" pos:end="565:35">++</operator></expr></incr>)</control> <block pos:start="565:38" pos:end="575:9">{<block_content pos:start="567:13" pos:end="573:43">

            <decl_stmt pos:start="567:13" pos:end="567:29"><decl pos:start="567:13" pos:end="567:28"><type pos:start="567:13" pos:end="567:21"><name pos:start="567:13" pos:end="567:21">abi_ulong</name></type> <name pos:start="567:23" pos:end="567:28">relval</name></decl>;</decl_stmt>

            <if_stmt pos:start="569:13" pos:end="571:31"><if pos:start="569:13" pos:end="571:31">if <condition pos:start="569:16" pos:end="569:68">(<expr pos:start="569:17" pos:end="569:67"><call pos:start="569:17" pos:end="569:67"><name pos:start="569:17" pos:end="569:28">get_user_ual</name><argument_list pos:start="569:29" pos:end="569:67">(<argument pos:start="569:30" pos:end="569:35"><expr pos:start="569:30" pos:end="569:35"><name pos:start="569:30" pos:end="569:35">relval</name></expr></argument>, <argument pos:start="569:38" pos:end="569:66"><expr pos:start="569:38" pos:end="569:66"><name pos:start="569:38" pos:end="569:42">reloc</name> <operator pos:start="569:44" pos:end="569:44">+</operator> <name pos:start="569:46" pos:end="569:46">i</name> <operator pos:start="569:48" pos:end="569:48">*</operator> <sizeof pos:start="569:50" pos:end="569:66">sizeof<argument_list pos:start="569:56" pos:end="569:66">(<argument pos:start="569:57" pos:end="569:65"><expr pos:start="569:57" pos:end="569:65"><name pos:start="569:57" pos:end="569:65">abi_ulong</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="571:17" pos:end="571:31"><block_content pos:start="571:17" pos:end="571:31">

                <return pos:start="571:17" pos:end="571:31">return <expr pos:start="571:24" pos:end="571:30"><operator pos:start="571:24" pos:end="571:24">-</operator><name pos:start="571:25" pos:end="571:30">EFAULT</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="573:13" pos:end="573:43"><expr pos:start="573:13" pos:end="573:42"><call pos:start="573:13" pos:end="573:42"><name pos:start="573:13" pos:end="573:21">old_reloc</name><argument_list pos:start="573:22" pos:end="573:42">(<argument pos:start="573:23" pos:end="573:33"><expr pos:start="573:23" pos:end="573:33"><operator pos:start="573:23" pos:end="573:23">&amp;</operator><name pos:start="573:24" pos:end="573:33"><name pos:start="573:24" pos:end="573:30">libinfo</name><index pos:start="573:31" pos:end="573:33">[<expr pos:start="573:32" pos:end="573:32"><literal type="number" pos:start="573:32" pos:end="573:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="573:36" pos:end="573:41"><expr pos:start="573:36" pos:end="573:41"><name pos:start="573:36" pos:end="573:41">relval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="581:5" pos:end="581:24">/* zero the BSS.  */</comment>

    <expr_stmt pos:start="583:5" pos:end="583:68"><expr pos:start="583:5" pos:end="583:67"><call pos:start="583:5" pos:end="583:67"><name pos:start="583:5" pos:end="583:10">memset</name><argument_list pos:start="583:11" pos:end="583:67">(<argument pos:start="583:12" pos:end="583:54"><expr pos:start="583:12" pos:end="583:54"><operator pos:start="583:12" pos:end="583:12">(</operator><name pos:start="583:13" pos:end="583:16">void</name> <operator pos:start="583:18" pos:end="583:18">*</operator><operator pos:start="583:19" pos:end="583:19">)</operator><operator pos:start="583:20" pos:end="583:20">(</operator><operator pos:start="583:21" pos:end="583:21">(</operator><name pos:start="583:22" pos:end="583:29">unsigned</name> <name pos:start="583:31" pos:end="583:34">long</name><operator pos:start="583:35" pos:end="583:35">)</operator><name pos:start="583:36" pos:end="583:42">datapos</name> <operator pos:start="583:44" pos:end="583:44">+</operator> <name pos:start="583:46" pos:end="583:53">data_len</name><operator pos:start="583:54" pos:end="583:54">)</operator></expr></argument>, <argument pos:start="583:57" pos:end="583:57"><expr pos:start="583:57" pos:end="583:57"><literal type="number" pos:start="583:57" pos:end="583:57">0</literal></expr></argument>, <argument pos:start="583:60" pos:end="583:66"><expr pos:start="583:60" pos:end="583:66"><name pos:start="583:60" pos:end="583:66">bss_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="587:5" pos:end="587:13">return <expr pos:start="587:12" pos:end="587:12"><literal type="number" pos:start="587:12" pos:end="587:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
