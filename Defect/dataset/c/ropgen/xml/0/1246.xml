<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1246.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:37">qemu_dummy_cpu_thread_fn</name><parameter_list pos:start="1:38" pos:end="1:48">(<parameter pos:start="1:39" pos:end="1:47"><decl pos:start="1:39" pos:end="1:47"><type pos:start="1:39" pos:end="1:44"><name pos:start="1:39" pos:end="1:42">void</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="7:5" pos:end="84:0">

<cpp:ifdef pos:start="5:1" pos:end="5:13">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:13">_WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="7:5" pos:end="7:62"><expr pos:start="7:5" pos:end="7:61"><call pos:start="7:5" pos:end="7:61"><name pos:start="7:5" pos:end="7:11">fprintf</name><argument_list pos:start="7:12" pos:end="7:61">(<argument pos:start="7:13" pos:end="7:18"><expr pos:start="7:13" pos:end="7:18"><name pos:start="7:13" pos:end="7:18">stderr</name></expr></argument>, <argument pos:start="7:21" pos:end="7:60"><expr pos:start="7:21" pos:end="7:60"><literal type="string" pos:start="7:21" pos:end="7:60">"qtest is not supported under Windows\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="12:0"><expr pos:start="9:5" pos:end="9:11"><call pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:8">exit</name><argument_list pos:start="9:9" pos:end="9:11">(<argument pos:start="9:10" pos:end="9:10"><expr pos:start="9:10" pos:end="9:10"><literal type="number" pos:start="9:10" pos:end="9:10">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="11:1" pos:end="11:5">#<cpp:directive pos:start="11:2" pos:end="11:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">CPUState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:17">cpu</name> <init pos:start="13:19" pos:end="13:23">= <expr pos:start="13:21" pos:end="13:23"><name pos:start="13:21" pos:end="13:23">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">sigset_t</name></type> <name pos:start="15:14" pos:end="15:20">waitset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><call pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:28">qemu_mutex_lock_iothread</name><argument_list pos:start="21:29" pos:end="21:30">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><call pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:24">qemu_thread_get_self</name><argument_list pos:start="23:25" pos:end="23:37">(<argument pos:start="23:26" pos:end="23:36"><expr pos:start="23:26" pos:end="23:36"><name pos:start="23:26" pos:end="23:36"><name pos:start="23:26" pos:end="23:28">cpu</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:36">thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:42"><expr pos:start="25:5" pos:end="25:41"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:7">cpu</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:18">thread_id</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="25:41"><name pos:start="25:22" pos:end="25:39">qemu_get_thread_id</name><argument_list pos:start="25:40" pos:end="25:41">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:7">cpu</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:24">exception_index</name></name> <operator pos:start="27:26" pos:end="27:26">=</operator> <operator pos:start="27:28" pos:end="27:28">-</operator><literal type="number" pos:start="27:29" pos:end="27:29">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:7">cpu</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:18">can_do_io</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <literal type="number" pos:start="29:22" pos:end="29:22">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:26"><expr pos:start="33:5" pos:end="33:25"><call pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:15">sigemptyset</name><argument_list pos:start="33:16" pos:end="33:25">(<argument pos:start="33:17" pos:end="33:24"><expr pos:start="33:17" pos:end="33:24"><operator pos:start="33:17" pos:end="33:17">&amp;</operator><name pos:start="33:18" pos:end="33:24">waitset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:33"><expr pos:start="35:5" pos:end="35:32"><call pos:start="35:5" pos:end="35:32"><name pos:start="35:5" pos:end="35:13">sigaddset</name><argument_list pos:start="35:14" pos:end="35:32">(<argument pos:start="35:15" pos:end="35:22"><expr pos:start="35:15" pos:end="35:22"><operator pos:start="35:15" pos:end="35:15">&amp;</operator><name pos:start="35:16" pos:end="35:22">waitset</name></expr></argument>, <argument pos:start="35:25" pos:end="35:31"><expr pos:start="35:25" pos:end="35:31"><name pos:start="35:25" pos:end="35:31">SIG_IPI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:29">/* signal CPU creation */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:24"><expr pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:7">cpu</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:16">created</name></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <name pos:start="41:20" pos:end="41:23">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><call pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:20">qemu_cond_signal</name><argument_list pos:start="43:21" pos:end="43:36">(<argument pos:start="43:22" pos:end="43:35"><expr pos:start="43:22" pos:end="43:35"><operator pos:start="43:22" pos:end="43:22">&amp;</operator><name pos:start="43:23" pos:end="43:35">qemu_cpu_cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:15">current_cpu</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <name pos:start="47:19" pos:end="47:21">cpu</name></expr>;</expr_stmt>

    <while pos:start="49:5" pos:end="77:5">while <condition pos:start="49:11" pos:end="49:13">(<expr pos:start="49:12" pos:end="49:12"><literal type="number" pos:start="49:12" pos:end="49:12">1</literal></expr>)</condition> <block pos:start="49:15" pos:end="77:5">{<block_content pos:start="51:9" pos:end="75:39">

        <expr_stmt pos:start="51:9" pos:end="51:27"><expr pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:19">current_cpu</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <name pos:start="51:23" pos:end="51:26">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:37"><expr pos:start="53:9" pos:end="53:36"><call pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:34">qemu_mutex_unlock_iothread</name><argument_list pos:start="53:35" pos:end="53:36">()</argument_list></call></expr>;</expr_stmt>

        <do pos:start="55:9" pos:end="61:65">do <block pos:start="55:12" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:40">

            <decl_stmt pos:start="57:13" pos:end="57:20"><decl pos:start="57:13" pos:end="57:19"><type pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:15">int</name></type> <name pos:start="57:17" pos:end="57:19">sig</name></decl>;</decl_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:40"><expr pos:start="59:13" pos:end="59:39"><name pos:start="59:13" pos:end="59:13">r</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:39"><name pos:start="59:17" pos:end="59:23">sigwait</name><argument_list pos:start="59:24" pos:end="59:39">(<argument pos:start="59:25" pos:end="59:32"><expr pos:start="59:25" pos:end="59:32"><operator pos:start="59:25" pos:end="59:25">&amp;</operator><name pos:start="59:26" pos:end="59:32">waitset</name></expr></argument>, <argument pos:start="59:35" pos:end="59:38"><expr pos:start="59:35" pos:end="59:38"><operator pos:start="59:35" pos:end="59:35">&amp;</operator><name pos:start="59:36" pos:end="59:38">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="61:17" pos:end="61:64">(<expr pos:start="61:18" pos:end="61:63"><name pos:start="61:18" pos:end="61:18">r</name> <operator pos:start="61:20" pos:end="61:21">==</operator> <operator pos:start="61:23" pos:end="61:23">-</operator><literal type="number" pos:start="61:24" pos:end="61:24">1</literal> <operator pos:start="61:26" pos:end="61:27">&amp;&amp;</operator> <operator pos:start="61:29" pos:end="61:29">(</operator><name pos:start="61:30" pos:end="61:34">errno</name> <operator pos:start="61:36" pos:end="61:37">==</operator> <name pos:start="61:39" pos:end="61:44">EAGAIN</name> <operator pos:start="61:46" pos:end="61:47">||</operator> <name pos:start="61:49" pos:end="61:53">errno</name> <operator pos:start="61:55" pos:end="61:56">==</operator> <name pos:start="61:58" pos:end="61:62">EINTR</name><operator pos:start="61:63" pos:end="61:63">)</operator></expr>)</condition>;</do>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:20">(<expr pos:start="63:13" pos:end="63:19"><name pos:start="63:13" pos:end="63:13">r</name> <operator pos:start="63:15" pos:end="63:16">==</operator> <operator pos:start="63:18" pos:end="63:18">-</operator><literal type="number" pos:start="63:19" pos:end="63:19">1</literal></expr>)</condition> <block pos:start="63:22" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:20">

            <expr_stmt pos:start="65:13" pos:end="65:30"><expr pos:start="65:13" pos:end="65:29"><call pos:start="65:13" pos:end="65:29"><name pos:start="65:13" pos:end="65:18">perror</name><argument_list pos:start="65:19" pos:end="65:29">(<argument pos:start="65:20" pos:end="65:28"><expr pos:start="65:20" pos:end="65:28"><literal type="string" pos:start="65:20" pos:end="65:28">"sigwait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:20"><expr pos:start="67:13" pos:end="67:19"><call pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:16">exit</name><argument_list pos:start="67:17" pos:end="67:19">(<argument pos:start="67:18" pos:end="67:18"><expr pos:start="67:18" pos:end="67:18"><literal type="number" pos:start="67:18" pos:end="67:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:35"><expr pos:start="71:9" pos:end="71:34"><call pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:32">qemu_mutex_lock_iothread</name><argument_list pos:start="71:33" pos:end="71:34">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:26"><expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:19">current_cpu</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:25">cpu</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:39"><expr pos:start="75:9" pos:end="75:38"><call pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:33">qemu_wait_io_event_common</name><argument_list pos:start="75:34" pos:end="75:38">(<argument pos:start="75:35" pos:end="75:37"><expr pos:start="75:35" pos:end="75:37"><name pos:start="75:35" pos:end="75:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="81:5" pos:end="84:0">return <expr pos:start="81:12" pos:end="81:15"><name pos:start="81:12" pos:end="81:15">NULL</name></expr>;</return>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
