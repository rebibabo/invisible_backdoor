<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17599.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:32">apb_config_readl</name> <parameter_list pos:start="1:34" pos:end="3:73">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">opaque</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:57"><decl pos:start="3:35" pos:end="3:57"><type pos:start="3:35" pos:end="3:57"><name pos:start="3:35" pos:end="3:52">target_phys_addr_t</name></type> <name pos:start="3:54" pos:end="3:57">addr</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:72"><decl pos:start="3:60" pos:end="3:72"><type pos:start="3:60" pos:end="3:72"><name pos:start="3:60" pos:end="3:67">unsigned</name></type> <name pos:start="3:69" pos:end="3:72">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:15">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">APBState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:24">= <expr pos:start="7:19" pos:end="7:24"><name pos:start="7:19" pos:end="7:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">val</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="99:5">switch <condition pos:start="13:12" pos:end="13:26">(<expr pos:start="13:13" pos:end="13:25"><name pos:start="13:13" pos:end="13:16">addr</name> <operator pos:start="13:18" pos:end="13:18">&amp;</operator> <literal type="number" pos:start="13:20" pos:end="13:25">0xffff</literal></expr>)</condition> <block pos:start="13:28" pos:end="99:5">{<block_content pos:start="15:5" pos:end="97:14">

    <case pos:start="15:5" pos:end="15:23">case <expr pos:start="15:10" pos:end="15:22"><literal type="number" pos:start="15:10" pos:end="15:13">0x30</literal> <operator pos:start="15:15" pos:end="15:17">...</operator> <literal type="number" pos:start="15:19" pos:end="15:22">0x4f</literal></expr>:</case> <comment type="block" pos:start="15:25" pos:end="15:49">/* DMA error registers */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:16"><expr pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:11">val</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <literal type="number" pos:start="17:15" pos:end="17:15">0</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="19:9" pos:end="19:38">/* XXX: not implemented yet */</comment>

        <break pos:start="21:9" pos:end="21:14">break;</break>

    <case pos:start="23:5" pos:end="23:25">case <expr pos:start="23:10" pos:end="23:24"><literal type="number" pos:start="23:10" pos:end="23:14">0x200</literal> <operator pos:start="23:16" pos:end="23:18">...</operator> <literal type="number" pos:start="23:20" pos:end="23:24">0x20b</literal></expr>:</case> <comment type="block" pos:start="23:27" pos:end="23:37">/* IOMMU */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:42"><expr pos:start="25:9" pos:end="25:41"><name pos:start="25:9" pos:end="25:11">val</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <name pos:start="25:15" pos:end="25:41"><name pos:start="25:15" pos:end="25:15">s</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:22">iommu</name><index pos:start="25:23" pos:end="25:41">[<expr pos:start="25:24" pos:end="25:40"><operator pos:start="25:24" pos:end="25:24">(</operator><name pos:start="25:25" pos:end="25:28">addr</name> <operator pos:start="25:30" pos:end="25:30">&amp;</operator> <literal type="number" pos:start="25:32" pos:end="25:34">0xf</literal><operator pos:start="25:35" pos:end="25:35">)</operator> <operator pos:start="25:37" pos:end="25:38">&gt;&gt;</operator> <literal type="number" pos:start="25:40" pos:end="25:40">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="27:9" pos:end="27:14">break;</break>

    <case pos:start="29:5" pos:end="29:25">case <expr pos:start="29:10" pos:end="29:24"><literal type="number" pos:start="29:10" pos:end="29:14">0x20c</literal> <operator pos:start="29:16" pos:end="29:18">...</operator> <literal type="number" pos:start="29:20" pos:end="29:24">0x3ff</literal></expr>:</case> <comment type="block" pos:start="29:27" pos:end="29:43">/* IOMMU flush */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:16"><expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:11">val</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>;</expr_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:25">case <expr pos:start="35:10" pos:end="35:24"><literal type="number" pos:start="35:10" pos:end="35:14">0xc00</literal> <operator pos:start="35:16" pos:end="35:18">...</operator> <literal type="number" pos:start="35:20" pos:end="35:24">0xc3f</literal></expr>:</case> <comment type="block" pos:start="35:27" pos:end="35:53">/* PCI interrupt control */</comment>

        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:21">(<expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:16">addr</name> <operator pos:start="37:18" pos:end="37:18">&amp;</operator> <literal type="number" pos:start="37:20" pos:end="37:20">4</literal></expr>)</condition> <block pos:start="37:23" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:53">

            <expr_stmt pos:start="39:13" pos:end="39:53"><expr pos:start="39:13" pos:end="39:52"><name pos:start="39:13" pos:end="39:15">val</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:52"><name pos:start="39:19" pos:end="39:19">s</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:32">pci_irq_map</name><index pos:start="39:33" pos:end="39:52">[<expr pos:start="39:34" pos:end="39:51"><operator pos:start="39:34" pos:end="39:34">(</operator><name pos:start="39:35" pos:end="39:38">addr</name> <operator pos:start="39:40" pos:end="39:40">&amp;</operator> <literal type="number" pos:start="39:42" pos:end="39:45">0x3f</literal><operator pos:start="39:46" pos:end="39:46">)</operator> <operator pos:start="39:48" pos:end="39:49">&gt;&gt;</operator> <literal type="number" pos:start="39:51" pos:end="39:51">3</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="41:11" pos:end="45:9">else <block pos:start="41:16" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:20">

            <expr_stmt pos:start="43:13" pos:end="43:20"><expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:15">val</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:27">case <expr pos:start="49:10" pos:end="49:26"><literal type="number" pos:start="49:10" pos:end="49:15">0x1000</literal> <operator pos:start="49:17" pos:end="49:19">...</operator> <literal type="number" pos:start="49:21" pos:end="49:26">0x1080</literal></expr>:</case> <comment type="block" pos:start="49:29" pos:end="49:56">/* OBIO interrupt control */</comment>

        <if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:21">(<expr pos:start="51:13" pos:end="51:20"><name pos:start="51:13" pos:end="51:16">addr</name> <operator pos:start="51:18" pos:end="51:18">&amp;</operator> <literal type="number" pos:start="51:20" pos:end="51:20">4</literal></expr>)</condition> <block pos:start="51:23" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:54">

            <expr_stmt pos:start="53:13" pos:end="53:54"><expr pos:start="53:13" pos:end="53:53"><name pos:start="53:13" pos:end="53:15">val</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <name pos:start="53:19" pos:end="53:53"><name pos:start="53:19" pos:end="53:19">s</name><operator pos:start="53:20" pos:end="53:21">-&gt;</operator><name pos:start="53:22" pos:end="53:33">obio_irq_map</name><index pos:start="53:34" pos:end="53:53">[<expr pos:start="53:35" pos:end="53:52"><operator pos:start="53:35" pos:end="53:35">(</operator><name pos:start="53:36" pos:end="53:39">addr</name> <operator pos:start="53:41" pos:end="53:41">&amp;</operator> <literal type="number" pos:start="53:43" pos:end="53:46">0xff</literal><operator pos:start="53:47" pos:end="53:47">)</operator> <operator pos:start="53:49" pos:end="53:50">&gt;&gt;</operator> <literal type="number" pos:start="53:52" pos:end="53:52">3</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="55:11" pos:end="59:9">else <block pos:start="55:16" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:20">

            <expr_stmt pos:start="57:13" pos:end="57:20"><expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:15">val</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <literal type="number" pos:start="57:19" pos:end="57:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <case pos:start="63:5" pos:end="63:27">case <expr pos:start="63:10" pos:end="63:26"><literal type="number" pos:start="63:10" pos:end="63:15">0x2000</literal> <operator pos:start="63:17" pos:end="63:19">...</operator> <literal type="number" pos:start="63:21" pos:end="63:26">0x202f</literal></expr>:</case> <comment type="block" pos:start="63:29" pos:end="63:45">/* PCI control */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:11">val</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:48"><name pos:start="65:15" pos:end="65:15">s</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:28">pci_control</name><index pos:start="65:29" pos:end="65:48">[<expr pos:start="65:30" pos:end="65:47"><operator pos:start="65:30" pos:end="65:30">(</operator><name pos:start="65:31" pos:end="65:34">addr</name> <operator pos:start="65:36" pos:end="65:36">&amp;</operator> <literal type="number" pos:start="65:38" pos:end="65:41">0x3f</literal><operator pos:start="65:42" pos:end="65:42">)</operator> <operator pos:start="65:44" pos:end="65:45">&gt;&gt;</operator> <literal type="number" pos:start="65:47" pos:end="65:47">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:27">case <expr pos:start="69:10" pos:end="69:26"><literal type="number" pos:start="69:10" pos:end="69:15">0xf020</literal> <operator pos:start="69:17" pos:end="69:19">...</operator> <literal type="number" pos:start="69:21" pos:end="69:26">0xf027</literal></expr>:</case> <comment type="block" pos:start="69:29" pos:end="69:47">/* Reset control */</comment>

        <if_stmt pos:start="71:9" pos:end="79:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:21">(<expr pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:16">addr</name> <operator pos:start="71:18" pos:end="71:18">&amp;</operator> <literal type="number" pos:start="71:20" pos:end="71:20">4</literal></expr>)</condition> <block pos:start="71:23" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:35">

            <expr_stmt pos:start="73:13" pos:end="73:35"><expr pos:start="73:13" pos:end="73:34"><name pos:start="73:13" pos:end="73:15">val</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <name pos:start="73:19" pos:end="73:34"><name pos:start="73:19" pos:end="73:19">s</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:34">reset_control</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="79:9">else <block pos:start="75:16" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:20">

            <expr_stmt pos:start="77:13" pos:end="77:20"><expr pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:15">val</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <literal type="number" pos:start="77:19" pos:end="77:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:27">case <expr pos:start="83:10" pos:end="83:26"><literal type="number" pos:start="83:10" pos:end="83:15">0x5000</literal> <operator pos:start="83:17" pos:end="83:19">...</operator> <literal type="number" pos:start="83:21" pos:end="83:26">0x51cf</literal></expr>:</case> <comment type="block" pos:start="83:29" pos:end="83:53">/* PIO/DMA diagnostics */</comment>

    <case pos:start="85:5" pos:end="85:27">case <expr pos:start="85:10" pos:end="85:26"><literal type="number" pos:start="85:10" pos:end="85:15">0xa400</literal> <operator pos:start="85:17" pos:end="85:19">...</operator> <literal type="number" pos:start="85:21" pos:end="85:26">0xa67f</literal></expr>:</case> <comment type="block" pos:start="85:29" pos:end="85:51">/* IOMMU diagnostics */</comment>

    <case pos:start="87:5" pos:end="87:27">case <expr pos:start="87:10" pos:end="87:26"><literal type="number" pos:start="87:10" pos:end="87:15">0xa800</literal> <operator pos:start="87:17" pos:end="87:19">...</operator> <literal type="number" pos:start="87:21" pos:end="87:26">0xa80f</literal></expr>:</case> <comment type="block" pos:start="87:29" pos:end="87:55">/* Interrupt diagnostics */</comment>

    <case pos:start="89:5" pos:end="89:27">case <expr pos:start="89:10" pos:end="89:26"><literal type="number" pos:start="89:10" pos:end="89:15">0xf000</literal> <operator pos:start="89:17" pos:end="89:19">...</operator> <literal type="number" pos:start="89:21" pos:end="89:26">0xf01f</literal></expr>:</case> <comment type="block" pos:start="89:29" pos:end="89:60">/* FFB config, memory control */</comment>

        <comment type="block" pos:start="91:9" pos:end="91:27">/* we don't care */</comment>

    <default pos:start="93:5" pos:end="93:12">default:</default>

        <expr_stmt pos:start="95:9" pos:end="95:16"><expr pos:start="95:9" pos:end="95:15"><name pos:start="95:9" pos:end="95:11">val</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <literal type="number" pos:start="95:15" pos:end="95:15">0</literal></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="101:5" pos:end="101:75"><expr pos:start="101:5" pos:end="101:74"><call pos:start="101:5" pos:end="101:74"><name pos:start="101:5" pos:end="101:15">APB_DPRINTF</name><argument_list pos:start="101:16" pos:end="101:74">(<argument pos:start="101:17" pos:end="101:52"><expr pos:start="101:17" pos:end="101:52"><literal type="string" pos:start="101:17" pos:end="101:27">"%s: addr "</literal> <name pos:start="101:29" pos:end="101:41">TARGET_FMT_lx</name> <literal type="string" pos:start="101:43" pos:end="101:52">" -&gt; %x\n"</literal></expr></argument>, <argument pos:start="101:55" pos:end="101:62"><expr pos:start="101:55" pos:end="101:62"><name pos:start="101:55" pos:end="101:62">__func__</name></expr></argument>, <argument pos:start="101:65" pos:end="101:68"><expr pos:start="101:65" pos:end="101:68"><name pos:start="101:65" pos:end="101:68">addr</name></expr></argument>, <argument pos:start="101:71" pos:end="101:73"><expr pos:start="101:71" pos:end="101:73"><name pos:start="101:71" pos:end="101:73">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="105:5" pos:end="105:15">return <expr pos:start="105:12" pos:end="105:14"><name pos:start="105:12" pos:end="105:14">val</name></expr>;</return>

</block_content>}</block></function>
</unit>
