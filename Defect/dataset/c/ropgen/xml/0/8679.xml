<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8679.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:35">tb_invalidate_phys_page</name><parameter_list pos:start="1:36" pos:end="1:70">(<parameter pos:start="1:37" pos:end="1:55"><decl pos:start="1:37" pos:end="1:55"><type pos:start="1:37" pos:end="1:55"><name pos:start="1:37" pos:end="1:50">tb_page_addr_t</name></type> <name pos:start="1:52" pos:end="1:55">addr</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:66">uintptr_t</name></type> <name pos:start="1:68" pos:end="1:69">pc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="5:5" pos:end="139:17">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">TranslationBlock</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">tb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">PageDesc</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">n</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="11:1" pos:end="11:29">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:29">TARGET_HAS_PRECISE_SMC</name></cpp:ifdef>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">TranslationBlock</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:32">current_tb</name> <init pos:start="13:34" pos:end="13:39">= <expr pos:start="13:36" pos:end="13:39"><name pos:start="13:36" pos:end="13:39">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">cpu</name> <init pos:start="15:19" pos:end="15:31">= <expr pos:start="15:21" pos:end="15:31"><name pos:start="15:21" pos:end="15:31">current_cpu</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">CPUArchState</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:21">env</name> <init pos:start="17:23" pos:end="17:28">= <expr pos:start="17:25" pos:end="17:28"><name pos:start="17:25" pos:end="17:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:27">current_tb_modified</name> <init pos:start="19:29" pos:end="19:31">= <expr pos:start="19:31" pos:end="19:31"><literal type="number" pos:start="19:31" pos:end="19:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:16">target_ulong</name></type> <name pos:start="21:18" pos:end="21:27">current_pc</name> <init pos:start="21:29" pos:end="21:31">= <expr pos:start="21:31" pos:end="21:31"><literal type="number" pos:start="21:31" pos:end="21:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:37"><decl pos:start="23:5" pos:end="23:36"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16">target_ulong</name></type> <name pos:start="23:18" pos:end="23:32">current_cs_base</name> <init pos:start="23:34" pos:end="23:36">= <expr pos:start="23:36" pos:end="23:36"><literal type="number" pos:start="23:36" pos:end="23:36">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="28:0"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:26">current_flags</name> <init pos:start="25:28" pos:end="25:30">= <expr pos:start="25:30" pos:end="25:30"><literal type="number" pos:start="25:30" pos:end="25:30">0</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="31:5" pos:end="31:25"><expr pos:start="31:5" pos:end="31:24"><call pos:start="31:5" pos:end="31:24"><name pos:start="31:5" pos:end="31:22">assert_memory_lock</name><argument_list pos:start="31:23" pos:end="31:24">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:29"><expr pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:8">addr</name> <operator pos:start="35:10" pos:end="35:11">&amp;=</operator> <name pos:start="35:13" pos:end="35:28">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:44"><expr pos:start="37:5" pos:end="37:43"><name pos:start="37:5" pos:end="37:5">p</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <call pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:17">page_find</name><argument_list pos:start="37:18" pos:end="37:43">(<argument pos:start="37:19" pos:end="37:42"><expr pos:start="37:19" pos:end="37:42"><name pos:start="37:19" pos:end="37:22">addr</name> <operator pos:start="37:24" pos:end="37:25">&gt;&gt;</operator> <name pos:start="37:27" pos:end="37:42">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:11">(<expr pos:start="39:9" pos:end="39:10"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:10">p</name></expr>)</condition> <block pos:start="39:13" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:21">

        <return pos:start="41:9" pos:end="41:21">return <expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:14"><expr pos:start="47:5" pos:end="47:13"><call pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:11">tb_lock</name><argument_list pos:start="47:12" pos:end="47:13">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:20"><name pos:start="49:5" pos:end="49:6">tb</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <name pos:start="49:10" pos:end="49:20"><name pos:start="49:10" pos:end="49:10">p</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:20">first_tb</name></name></expr>;</expr_stmt>

<cpp:ifdef pos:start="51:1" pos:end="51:29">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:29">TARGET_HAS_PRECISE_SMC</name></cpp:ifdef>

    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:22">(<expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:10">tb</name> <operator pos:start="53:12" pos:end="53:13">&amp;&amp;</operator> <name pos:start="53:15" pos:end="53:16">pc</name> <operator pos:start="53:18" pos:end="53:19">!=</operator> <literal type="number" pos:start="53:21" pos:end="53:21">0</literal></expr>)</condition> <block pos:start="53:24" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:36">

        <expr_stmt pos:start="55:9" pos:end="55:36"><expr pos:start="55:9" pos:end="55:35"><name pos:start="55:9" pos:end="55:18">current_tb</name> <operator pos:start="55:20" pos:end="55:20">=</operator> <call pos:start="55:22" pos:end="55:35"><name pos:start="55:22" pos:end="55:31">tb_find_pc</name><argument_list pos:start="55:32" pos:end="55:35">(<argument pos:start="55:33" pos:end="55:34"><expr pos:start="55:33" pos:end="55:34"><name pos:start="55:33" pos:end="55:34">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="66:0"><if pos:start="59:5" pos:end="66:0">if <condition pos:start="59:8" pos:end="59:20">(<expr pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:11">cpu</name> <operator pos:start="59:13" pos:end="59:14">!=</operator> <name pos:start="59:16" pos:end="59:19">NULL</name></expr>)</condition> <block pos:start="59:22" pos:end="66:0">{<block_content pos:start="61:9" pos:end="61:27">

        <expr_stmt pos:start="61:9" pos:end="61:27"><expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:11">env</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <name pos:start="61:15" pos:end="61:26"><name pos:start="61:15" pos:end="61:17">cpu</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:26">env_ptr</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

    <while pos:start="67:5" pos:end="107:5">while <condition pos:start="67:11" pos:end="67:22">(<expr pos:start="67:12" pos:end="67:21"><name pos:start="67:12" pos:end="67:13">tb</name> <operator pos:start="67:15" pos:end="67:16">!=</operator> <name pos:start="67:18" pos:end="67:21">NULL</name></expr>)</condition> <block pos:start="67:24" pos:end="107:5">{<block_content pos:start="69:9" pos:end="105:30">

        <expr_stmt pos:start="69:9" pos:end="69:30"><expr pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:9">n</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <operator pos:start="69:13" pos:end="69:13">(</operator><name pos:start="69:14" pos:end="69:22">uintptr_t</name><operator pos:start="69:23" pos:end="69:23">)</operator><name pos:start="69:24" pos:end="69:25">tb</name> <operator pos:start="69:27" pos:end="69:27">&amp;</operator> <literal type="number" pos:start="69:29" pos:end="69:29">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="74:0"><expr pos:start="71:9" pos:end="71:53"><name pos:start="71:9" pos:end="71:10">tb</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <operator pos:start="71:14" pos:end="71:14">(</operator><name pos:start="71:15" pos:end="71:30">TranslationBlock</name> <operator pos:start="71:32" pos:end="71:32">*</operator><operator pos:start="71:33" pos:end="71:33">)</operator><operator pos:start="71:34" pos:end="71:34">(</operator><operator pos:start="71:35" pos:end="71:35">(</operator><name pos:start="71:36" pos:end="71:44">uintptr_t</name><operator pos:start="71:45" pos:end="71:45">)</operator><name pos:start="71:46" pos:end="71:47">tb</name> <operator pos:start="71:49" pos:end="71:49">&amp;</operator> <operator pos:start="71:51" pos:end="71:51">~</operator><literal type="number" pos:start="71:52" pos:end="71:52">3</literal><operator pos:start="71:53" pos:end="71:53">)</operator></expr>;</expr_stmt>

<cpp:ifdef pos:start="73:1" pos:end="73:29">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:29">TARGET_HAS_PRECISE_SMC</name></cpp:ifdef>

        <if_stmt pos:start="75:9" pos:end="102:0"><if pos:start="75:9" pos:end="102:0">if <condition pos:start="75:12" pos:end="77:54">(<expr pos:start="75:13" pos:end="77:53"><name pos:start="75:13" pos:end="75:22">current_tb</name> <operator pos:start="75:24" pos:end="75:25">==</operator> <name pos:start="75:27" pos:end="75:28">tb</name> <operator pos:start="75:30" pos:end="75:31">&amp;&amp;</operator>

            <operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:31"><name pos:start="77:14" pos:end="77:23">current_tb</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:31">cflags</name></name> <operator pos:start="77:33" pos:end="77:33">&amp;</operator> <name pos:start="77:35" pos:end="77:47">CF_COUNT_MASK</name><operator pos:start="77:48" pos:end="77:48">)</operator> <operator pos:start="77:50" pos:end="77:51">!=</operator> <literal type="number" pos:start="77:53" pos:end="77:53">1</literal></expr>)</condition> <block pos:start="77:56" pos:end="102:0">{<block_content pos:start="91:13" pos:end="97:49">

                <comment type="block" pos:start="79:17" pos:end="87:43">/* If we are modifying the current TB, we must stop

                   its execution. We could be more precise by checking

                   that the modification is after the current PC, but it

                   would require a specialized function to partially

                   restore the CPU state */</comment>



            <expr_stmt pos:start="91:13" pos:end="91:36"><expr pos:start="91:13" pos:end="91:35"><name pos:start="91:13" pos:end="91:31">current_tb_modified</name> <operator pos:start="91:33" pos:end="91:33">=</operator> <literal type="number" pos:start="91:35" pos:end="91:35">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:59"><expr pos:start="93:13" pos:end="93:58"><call pos:start="93:13" pos:end="93:58"><name pos:start="93:13" pos:end="93:37">cpu_restore_state_from_tb</name><argument_list pos:start="93:38" pos:end="93:58">(<argument pos:start="93:39" pos:end="93:41"><expr pos:start="93:39" pos:end="93:41"><name pos:start="93:39" pos:end="93:41">cpu</name></expr></argument>, <argument pos:start="93:44" pos:end="93:53"><expr pos:start="93:44" pos:end="93:53"><name pos:start="93:44" pos:end="93:53">current_tb</name></expr></argument>, <argument pos:start="93:56" pos:end="93:57"><expr pos:start="93:56" pos:end="93:57"><name pos:start="93:56" pos:end="93:57">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="97:49"><expr pos:start="95:13" pos:end="97:48"><call pos:start="95:13" pos:end="97:48"><name pos:start="95:13" pos:end="95:32">cpu_get_tb_cpu_state</name><argument_list pos:start="95:33" pos:end="97:48">(<argument pos:start="95:34" pos:end="95:36"><expr pos:start="95:34" pos:end="95:36"><name pos:start="95:34" pos:end="95:36">env</name></expr></argument>, <argument pos:start="95:39" pos:end="95:49"><expr pos:start="95:39" pos:end="95:49"><operator pos:start="95:39" pos:end="95:39">&amp;</operator><name pos:start="95:40" pos:end="95:49">current_pc</name></expr></argument>, <argument pos:start="95:52" pos:end="95:67"><expr pos:start="95:52" pos:end="95:67"><operator pos:start="95:52" pos:end="95:52">&amp;</operator><name pos:start="95:53" pos:end="95:67">current_cs_base</name></expr></argument>,

                                 <argument pos:start="97:34" pos:end="97:47"><expr pos:start="97:34" pos:end="97:47"><operator pos:start="97:34" pos:end="97:34">&amp;</operator><name pos:start="97:35" pos:end="97:47">current_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="101:8" pos:end="101:35">/* TARGET_HAS_PRECISE_SMC */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:37"><expr pos:start="103:9" pos:end="103:36"><call pos:start="103:9" pos:end="103:36"><name pos:start="103:9" pos:end="103:26">tb_phys_invalidate</name><argument_list pos:start="103:27" pos:end="103:36">(<argument pos:start="103:28" pos:end="103:29"><expr pos:start="103:28" pos:end="103:29"><name pos:start="103:28" pos:end="103:29">tb</name></expr></argument>, <argument pos:start="103:32" pos:end="103:35"><expr pos:start="103:32" pos:end="103:35"><name pos:start="103:32" pos:end="103:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:30"><expr pos:start="105:9" pos:end="105:29"><name pos:start="105:9" pos:end="105:10">tb</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <name pos:start="105:14" pos:end="105:29"><name pos:start="105:14" pos:end="105:15">tb</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:26">page_next</name><index pos:start="105:27" pos:end="105:29">[<expr pos:start="105:28" pos:end="105:28"><name pos:start="105:28" pos:end="105:28">n</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="109:5" pos:end="112:0"><expr pos:start="109:5" pos:end="109:22"><name pos:start="109:5" pos:end="109:15"><name pos:start="109:5" pos:end="109:5">p</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:15">first_tb</name></name> <operator pos:start="109:17" pos:end="109:17">=</operator> <name pos:start="109:19" pos:end="109:22">NULL</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="111:1" pos:end="111:29">#<cpp:directive pos:start="111:2" pos:end="111:6">ifdef</cpp:directive> <name pos:start="111:8" pos:end="111:29">TARGET_HAS_PRECISE_SMC</name></cpp:ifdef>

    <if_stmt pos:start="113:5" pos:end="134:0"><if pos:start="113:5" pos:end="134:0">if <condition pos:start="113:8" pos:end="113:28">(<expr pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:27">current_tb_modified</name></expr>)</condition> <block pos:start="113:30" pos:end="134:0">{<block_content pos:start="121:9" pos:end="129:20">

        <comment type="block" pos:start="115:9" pos:end="119:20">/* we generate a block containing just the instruction

           modifying the memory. It will ensure that it cannot modify

           itself */</comment>

        <expr_stmt pos:start="121:9" pos:end="123:39"><expr pos:start="121:9" pos:end="123:38"><call pos:start="121:9" pos:end="123:38"><name pos:start="121:9" pos:end="121:19">tb_gen_code</name><argument_list pos:start="121:20" pos:end="123:38">(<argument pos:start="121:21" pos:end="121:23"><expr pos:start="121:21" pos:end="121:23"><name pos:start="121:21" pos:end="121:23">cpu</name></expr></argument>, <argument pos:start="121:26" pos:end="121:35"><expr pos:start="121:26" pos:end="121:35"><name pos:start="121:26" pos:end="121:35">current_pc</name></expr></argument>, <argument pos:start="121:38" pos:end="121:52"><expr pos:start="121:38" pos:end="121:52"><name pos:start="121:38" pos:end="121:52">current_cs_base</name></expr></argument>, <argument pos:start="121:55" pos:end="121:67"><expr pos:start="121:55" pos:end="121:67"><name pos:start="121:55" pos:end="121:67">current_flags</name></expr></argument>,

                    <argument pos:start="123:21" pos:end="123:37"><expr pos:start="123:21" pos:end="123:37"><literal type="number" pos:start="123:21" pos:end="123:21">1</literal> <operator pos:start="123:23" pos:end="123:23">|</operator> <call pos:start="123:25" pos:end="123:37"><name pos:start="123:25" pos:end="123:35">curr_cflags</name><argument_list pos:start="123:36" pos:end="123:37">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="125:9" pos:end="127:42">/* tb_lock will be reset after cpu_loop_exit_noexc longjmps

         * back into the cpu_exec loop. */</comment>

        <return pos:start="129:9" pos:end="129:20">return <expr pos:start="129:16" pos:end="129:19"><name pos:start="129:16" pos:end="129:19">true</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="135:5" pos:end="135:16"><expr pos:start="135:5" pos:end="135:15"><call pos:start="135:5" pos:end="135:15"><name pos:start="135:5" pos:end="135:13">tb_unlock</name><argument_list pos:start="135:14" pos:end="135:15">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="139:5" pos:end="139:17">return <expr pos:start="139:12" pos:end="139:16"><name pos:start="139:12" pos:end="139:16">false</name></expr>;</return>

</block_content>}</block></function>
</unit>
