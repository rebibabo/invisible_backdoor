<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5636.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint32_t</name></type> <name pos:start="1:10" pos:end="1:28">cpu_mips_get_random</name> <parameter_list pos:start="1:30" pos:end="1:48">(<parameter pos:start="1:31" pos:end="1:47"><decl pos:start="1:31" pos:end="1:47"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:42">CPUMIPSState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="31:1">{<block_content pos:start="5:5" pos:end="29:15">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <name pos:start="5:12" pos:end="5:19">uint32_t</name></type> <name pos:start="5:21" pos:end="5:24">seed</name> <init pos:start="5:26" pos:end="5:28">= <expr pos:start="5:28" pos:end="5:28"><literal type="number" pos:start="5:28" pos:end="5:28">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:19">uint32_t</name></type> <name pos:start="7:21" pos:end="7:28">prev_idx</name> <init pos:start="7:30" pos:end="7:32">= <expr pos:start="7:32" pos:end="7:32"><literal type="number" pos:start="7:32" pos:end="7:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">idx</name></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="11:61">/* Don't return same value twice, so get another value */</comment>

    <do pos:start="13:5" pos:end="25:30">do <block pos:start="13:8" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:29">

        <comment type="block" pos:start="15:9" pos:end="17:41">/* Use a simple algorithm of Linear Congruential Generator

         * from ISO/IEC 9899 standard. */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:41"><expr pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:12">seed</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <literal type="number" pos:start="19:16" pos:end="19:25">1103515245</literal> <operator pos:start="19:27" pos:end="19:27">*</operator> <name pos:start="19:29" pos:end="19:32">seed</name> <operator pos:start="19:34" pos:end="19:34">+</operator> <literal type="number" pos:start="19:36" pos:end="19:40">12345</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="23:29"><expr pos:start="21:9" pos:end="23:28"><name pos:start="21:9" pos:end="21:11">idx</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <operator pos:start="21:15" pos:end="21:15">(</operator><name pos:start="21:16" pos:end="21:19">seed</name> <operator pos:start="21:21" pos:end="21:22">&gt;&gt;</operator> <literal type="number" pos:start="21:24" pos:end="21:25">16</literal><operator pos:start="21:26" pos:end="21:26">)</operator> <operator pos:start="21:28" pos:end="21:28">%</operator> <operator pos:start="21:30" pos:end="21:30">(</operator><name pos:start="21:31" pos:end="21:46"><name pos:start="21:31" pos:end="21:33">env</name><operator pos:start="21:34" pos:end="21:35">-&gt;</operator><name pos:start="21:36" pos:end="21:38">tlb</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:46">nb_tlb</name></name> <operator pos:start="21:48" pos:end="21:48">-</operator> <name pos:start="21:50" pos:end="21:63"><name pos:start="21:50" pos:end="21:52">env</name><operator pos:start="21:53" pos:end="21:54">-&gt;</operator><name pos:start="21:55" pos:end="21:63">CP0_Wired</name></name><operator pos:start="21:64" pos:end="21:64">)</operator> <operator pos:start="21:66" pos:end="21:66">+</operator>

              <name pos:start="23:15" pos:end="23:28"><name pos:start="23:15" pos:end="23:17">env</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:28">CP0_Wired</name></name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="25:13" pos:end="25:29">(<expr pos:start="25:14" pos:end="25:28"><name pos:start="25:14" pos:end="25:16">idx</name> <operator pos:start="25:18" pos:end="25:19">==</operator> <name pos:start="25:21" pos:end="25:28">prev_idx</name></expr>)</condition>;</do>

    <expr_stmt pos:start="27:5" pos:end="27:19"><expr pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:12">prev_idx</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:18">idx</name></expr>;</expr_stmt>

    <return pos:start="29:5" pos:end="29:15">return <expr pos:start="29:12" pos:end="29:14"><name pos:start="29:12" pos:end="29:14">idx</name></expr>;</return>

</block_content>}</block></function>
</unit>
