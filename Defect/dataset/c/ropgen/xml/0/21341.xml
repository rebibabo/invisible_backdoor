<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21341.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">abi_long</name></type> <name pos:start="1:17" pos:end="1:30">do_getsockname</name><parameter_list pos:start="1:31" pos:end="3:61">(<parameter pos:start="1:32" pos:end="1:37"><decl pos:start="1:32" pos:end="1:37"><type pos:start="1:32" pos:end="1:37"><name pos:start="1:32" pos:end="1:34">int</name></type> <name pos:start="1:36" pos:end="1:37">fd</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:60"><decl pos:start="1:40" pos:end="1:60"><type pos:start="1:40" pos:end="1:60"><name pos:start="1:40" pos:end="1:48">abi_ulong</name></type> <name pos:start="1:50" pos:end="1:60">target_addr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:60"><decl pos:start="3:32" pos:end="3:60"><type pos:start="3:32" pos:end="3:60"><name pos:start="3:32" pos:end="3:40">abi_ulong</name></type> <name pos:start="3:42" pos:end="3:60">target_addrlen_addr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="51:1">{<block_content pos:start="7:5" pos:end="49:15">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">socklen_t</name></type> <name pos:start="7:15" pos:end="7:21">addrlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">void</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:14">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">abi_long</name></type> <name pos:start="11:14" pos:end="11:16">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:48"><if pos:start="15:5" pos:end="17:48">if <condition pos:start="15:8" pos:end="15:25">(<expr pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:19">target_addr</name> <operator pos:start="15:21" pos:end="15:22">==</operator> <literal type="number" pos:start="15:24" pos:end="15:24">0</literal></expr>)</condition><block type="pseudo" pos:start="17:8" pos:end="17:48"><block_content pos:start="17:8" pos:end="17:48">

       <return pos:start="17:8" pos:end="17:48">return <expr pos:start="17:15" pos:end="17:47"><call pos:start="17:15" pos:end="17:47"><name pos:start="17:15" pos:end="17:23">get_errno</name><argument_list pos:start="17:24" pos:end="17:47">(<argument pos:start="17:25" pos:end="17:46"><expr pos:start="17:25" pos:end="17:46"><call pos:start="17:25" pos:end="17:46"><name pos:start="17:25" pos:end="17:30">accept</name><argument_list pos:start="17:31" pos:end="17:46">(<argument pos:start="17:32" pos:end="17:33"><expr pos:start="17:32" pos:end="17:33"><name pos:start="17:32" pos:end="17:33">fd</name></expr></argument>, <argument pos:start="17:36" pos:end="17:39"><expr pos:start="17:36" pos:end="17:39"><name pos:start="17:36" pos:end="17:39">NULL</name></expr></argument>, <argument pos:start="17:42" pos:end="17:45"><expr pos:start="17:42" pos:end="17:45"><name pos:start="17:42" pos:end="17:45">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="23:30"><if pos:start="21:5" pos:end="23:30">if <condition pos:start="21:8" pos:end="21:51">(<expr pos:start="21:9" pos:end="21:50"><call pos:start="21:9" pos:end="21:50"><name pos:start="21:9" pos:end="21:20">get_user_u32</name><argument_list pos:start="21:21" pos:end="21:50">(<argument pos:start="21:22" pos:end="21:28"><expr pos:start="21:22" pos:end="21:28"><name pos:start="21:22" pos:end="21:28">addrlen</name></expr></argument>, <argument pos:start="21:31" pos:end="21:49"><expr pos:start="21:31" pos:end="21:49"><name pos:start="21:31" pos:end="21:49">target_addrlen_addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:30"><block_content pos:start="23:9" pos:end="23:30">

        <return pos:start="23:9" pos:end="23:30">return <expr pos:start="23:16" pos:end="23:29"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:29">TARGET_EFAULT</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="29:30"><if pos:start="27:5" pos:end="29:30">if <condition pos:start="27:8" pos:end="27:20">(<expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:15">addrlen</name> <operator pos:start="27:17" pos:end="27:17">&lt;</operator> <literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:30"><block_content pos:start="29:9" pos:end="29:30">

        <return pos:start="29:9" pos:end="29:30">return <expr pos:start="29:16" pos:end="29:29"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:29">TARGET_EINVAL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:27"><expr pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:8">addr</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:26"><name pos:start="33:12" pos:end="33:17">alloca</name><argument_list pos:start="33:18" pos:end="33:26">(<argument pos:start="33:19" pos:end="33:25"><expr pos:start="33:19" pos:end="33:25"><name pos:start="33:19" pos:end="33:25">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:53"><expr pos:start="37:5" pos:end="37:52"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:52"><name pos:start="37:11" pos:end="37:19">get_errno</name><argument_list pos:start="37:20" pos:end="37:52">(<argument pos:start="37:21" pos:end="37:51"><expr pos:start="37:21" pos:end="37:51"><call pos:start="37:21" pos:end="37:51"><name pos:start="37:21" pos:end="37:31">getsockname</name><argument_list pos:start="37:32" pos:end="37:51">(<argument pos:start="37:33" pos:end="37:34"><expr pos:start="37:33" pos:end="37:34"><name pos:start="37:33" pos:end="37:34">fd</name></expr></argument>, <argument pos:start="37:37" pos:end="37:40"><expr pos:start="37:37" pos:end="37:40"><name pos:start="37:37" pos:end="37:40">addr</name></expr></argument>, <argument pos:start="37:43" pos:end="37:50"><expr pos:start="37:43" pos:end="37:50"><operator pos:start="37:43" pos:end="37:43">&amp;</operator><name pos:start="37:44" pos:end="37:50">addrlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:23">(<expr pos:start="39:9" pos:end="39:22"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:22"><name pos:start="39:10" pos:end="39:17">is_error</name><argument_list pos:start="39:18" pos:end="39:22">(<argument pos:start="39:19" pos:end="39:21"><expr pos:start="39:19" pos:end="39:21"><name pos:start="39:19" pos:end="39:21">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:25" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:33">

        <expr_stmt pos:start="41:9" pos:end="41:60"><expr pos:start="41:9" pos:end="41:59"><call pos:start="41:9" pos:end="41:59"><name pos:start="41:9" pos:end="41:31">host_to_target_sockaddr</name><argument_list pos:start="41:32" pos:end="41:59">(<argument pos:start="41:33" pos:end="41:43"><expr pos:start="41:33" pos:end="41:43"><name pos:start="41:33" pos:end="41:43">target_addr</name></expr></argument>, <argument pos:start="41:46" pos:end="41:49"><expr pos:start="41:46" pos:end="41:49"><name pos:start="41:46" pos:end="41:49">addr</name></expr></argument>, <argument pos:start="41:52" pos:end="41:58"><expr pos:start="41:52" pos:end="41:58"><name pos:start="41:52" pos:end="41:58">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="45:33"><if pos:start="43:9" pos:end="45:33">if <condition pos:start="43:12" pos:end="43:55">(<expr pos:start="43:13" pos:end="43:54"><call pos:start="43:13" pos:end="43:54"><name pos:start="43:13" pos:end="43:24">put_user_u32</name><argument_list pos:start="43:25" pos:end="43:54">(<argument pos:start="43:26" pos:end="43:32"><expr pos:start="43:26" pos:end="43:32"><name pos:start="43:26" pos:end="43:32">addrlen</name></expr></argument>, <argument pos:start="43:35" pos:end="43:53"><expr pos:start="43:35" pos:end="43:53"><name pos:start="43:35" pos:end="43:53">target_addrlen_addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:33"><block_content pos:start="45:13" pos:end="45:33">

            <expr_stmt pos:start="45:13" pos:end="45:33"><expr pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <operator pos:start="45:19" pos:end="45:19">-</operator><name pos:start="45:20" pos:end="45:32">TARGET_EFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="49:5" pos:end="49:15">return <expr pos:start="49:12" pos:end="49:14"><name pos:start="49:12" pos:end="49:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
