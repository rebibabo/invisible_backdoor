<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16306.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">IRQ_local_pipe</name><parameter_list pos:start="1:27" pos:end="1:67">(<parameter pos:start="1:28" pos:end="1:44"><decl pos:start="1:28" pos:end="1:44"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:39">OpenPICState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">opp</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:55"><decl pos:start="1:47" pos:end="1:55"><type pos:start="1:47" pos:end="1:55"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:55">n_CPU</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:66"><decl pos:start="1:58" pos:end="1:66"><type pos:start="1:58" pos:end="1:66"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:66">n_IRQ</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:61">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">IRQDest</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">IRQSource</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">src</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">priority</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:27"><expr pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:7">dst</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <operator pos:start="13:11" pos:end="13:11">&amp;</operator><name pos:start="13:12" pos:end="13:26"><name pos:start="13:12" pos:end="13:14">opp</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:19">dst</name><index pos:start="13:20" pos:end="13:26">[<expr pos:start="13:21" pos:end="13:25"><name pos:start="13:21" pos:end="13:25">n_CPU</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:27"><expr pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:7">src</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <operator pos:start="15:11" pos:end="15:11">&amp;</operator><name pos:start="15:12" pos:end="15:26"><name pos:start="15:12" pos:end="15:14">opp</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:19">src</name><index pos:start="15:20" pos:end="15:26">[<expr pos:start="15:21" pos:end="15:25"><name pos:start="15:21" pos:end="15:25">n_IRQ</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="39:5"><if pos:start="19:5" pos:end="39:5">if <condition pos:start="19:8" pos:end="19:42">(<expr pos:start="19:9" pos:end="19:41"><name pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:11">src</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:19">output</name></name> <operator pos:start="19:21" pos:end="19:22">!=</operator> <name pos:start="19:24" pos:end="19:41">OPENPIC_OUTPUT_INT</name></expr>)</condition> <block pos:start="19:44" pos:end="39:5">{<block_content pos:start="29:9" pos:end="37:15">

        <comment type="block" pos:start="21:9" pos:end="27:11">/* On Freescale MPIC, critical interrupts ignore priority,

         * IACK, EOI, etc.  Before MPIC v4.1 they also ignore

         * masking.

         */</comment>

        <expr_stmt pos:start="29:9" pos:end="29:40"><expr pos:start="29:9" pos:end="29:39"><name pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:11">src</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:17">ivpr</name></name> <operator pos:start="29:19" pos:end="29:20">|=</operator> <name pos:start="29:22" pos:end="29:39">IVPR_ACTIVITY_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="33:53"><expr pos:start="31:9" pos:end="33:52"><call pos:start="31:9" pos:end="33:52"><name pos:start="31:9" pos:end="31:15">DPRINTF</name><argument_list pos:start="31:16" pos:end="33:52">(<argument pos:start="31:17" pos:end="31:61"><expr pos:start="31:17" pos:end="31:61"><literal type="string" pos:start="31:17" pos:end="31:61">"%s: Raise OpenPIC output %d cpu %d irq %d\n"</literal></expr></argument>,

                <argument pos:start="33:17" pos:end="33:24"><expr pos:start="33:17" pos:end="33:24"><name pos:start="33:17" pos:end="33:24">__func__</name></expr></argument>, <argument pos:start="33:27" pos:end="33:37"><expr pos:start="33:27" pos:end="33:37"><name pos:start="33:27" pos:end="33:37"><name pos:start="33:27" pos:end="33:29">src</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:37">output</name></name></expr></argument>, <argument pos:start="33:40" pos:end="33:44"><expr pos:start="33:40" pos:end="33:44"><name pos:start="33:40" pos:end="33:44">n_CPU</name></expr></argument>, <argument pos:start="33:47" pos:end="33:51"><expr pos:start="33:47" pos:end="33:51"><name pos:start="33:47" pos:end="33:51">n_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:58"><expr pos:start="35:9" pos:end="35:57"><call pos:start="35:9" pos:end="35:57"><name pos:start="35:9" pos:end="35:22">qemu_irq_raise</name><argument_list pos:start="35:23" pos:end="35:57">(<argument pos:start="35:24" pos:end="35:56"><expr pos:start="35:24" pos:end="35:56"><name pos:start="35:24" pos:end="35:38"><name pos:start="35:24" pos:end="35:26">opp</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:31">dst</name><index pos:start="35:32" pos:end="35:38">[<expr pos:start="35:33" pos:end="35:37"><name pos:start="35:33" pos:end="35:37">n_CPU</name></expr>]</index></name><operator pos:start="35:39" pos:end="35:39">.</operator><name pos:start="35:40" pos:end="35:56"><name pos:start="35:40" pos:end="35:43">irqs</name><index pos:start="35:44" pos:end="35:56">[<expr pos:start="35:45" pos:end="35:55"><name pos:start="35:45" pos:end="35:55"><name pos:start="35:45" pos:end="35:47">src</name><operator pos:start="35:48" pos:end="35:49">-&gt;</operator><name pos:start="35:50" pos:end="35:55">output</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:40"><expr pos:start="43:5" pos:end="43:39"><name pos:start="43:5" pos:end="43:12">priority</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <call pos:start="43:16" pos:end="43:39"><name pos:start="43:16" pos:end="43:28">IVPR_PRIORITY</name><argument_list pos:start="43:29" pos:end="43:39">(<argument pos:start="43:30" pos:end="43:38"><expr pos:start="43:30" pos:end="43:38"><name pos:start="43:30" pos:end="43:38"><name pos:start="43:30" pos:end="43:32">src</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:38">ivpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="55:5"><if pos:start="45:5" pos:end="55:5">if <condition pos:start="45:8" pos:end="45:30">(<expr pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:16">priority</name> <operator pos:start="45:18" pos:end="45:19">&lt;=</operator> <name pos:start="45:21" pos:end="45:29"><name pos:start="45:21" pos:end="45:23">dst</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:29">ctpr</name></name></expr>)</condition> <block pos:start="45:32" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:15">

        <comment type="block" pos:start="47:9" pos:end="47:30">/* Too low priority */</comment>

        <expr_stmt pos:start="49:9" pos:end="51:40"><expr pos:start="49:9" pos:end="51:39"><call pos:start="49:9" pos:end="51:39"><name pos:start="49:9" pos:end="49:15">DPRINTF</name><argument_list pos:start="49:16" pos:end="51:39">(<argument pos:start="49:17" pos:end="49:61"><expr pos:start="49:17" pos:end="49:61"><literal type="string" pos:start="49:17" pos:end="49:61">"%s: IRQ %d has too low priority on CPU %d\n"</literal></expr></argument>,

                <argument pos:start="51:17" pos:end="51:24"><expr pos:start="51:17" pos:end="51:24"><name pos:start="51:17" pos:end="51:24">__func__</name></expr></argument>, <argument pos:start="51:27" pos:end="51:31"><expr pos:start="51:27" pos:end="51:31"><name pos:start="51:27" pos:end="51:31">n_IRQ</name></expr></argument>, <argument pos:start="51:34" pos:end="51:38"><expr pos:start="51:34" pos:end="51:38"><name pos:start="51:34" pos:end="51:38">n_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="67:5"><if pos:start="57:5" pos:end="67:5">if <condition pos:start="57:8" pos:end="57:41">(<expr pos:start="57:9" pos:end="57:40"><call pos:start="57:9" pos:end="57:40"><name pos:start="57:9" pos:end="57:19">IRQ_testbit</name><argument_list pos:start="57:20" pos:end="57:40">(<argument pos:start="57:21" pos:end="57:32"><expr pos:start="57:21" pos:end="57:32"><operator pos:start="57:21" pos:end="57:21">&amp;</operator><name pos:start="57:22" pos:end="57:32"><name pos:start="57:22" pos:end="57:24">dst</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:32">raised</name></name></expr></argument>, <argument pos:start="57:35" pos:end="57:39"><expr pos:start="57:35" pos:end="57:39"><name pos:start="57:35" pos:end="57:39">n_IRQ</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:43" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:15">

        <comment type="block" pos:start="59:9" pos:end="59:28">/* Interrupt miss */</comment>

        <expr_stmt pos:start="61:9" pos:end="63:40"><expr pos:start="61:9" pos:end="63:39"><call pos:start="61:9" pos:end="63:39"><name pos:start="61:9" pos:end="61:15">DPRINTF</name><argument_list pos:start="61:16" pos:end="63:39">(<argument pos:start="61:17" pos:end="61:51"><expr pos:start="61:17" pos:end="61:51"><literal type="string" pos:start="61:17" pos:end="61:51">"%s: IRQ %d was missed on CPU %d\n"</literal></expr></argument>,

                <argument pos:start="63:17" pos:end="63:24"><expr pos:start="63:17" pos:end="63:24"><name pos:start="63:17" pos:end="63:24">__func__</name></expr></argument>, <argument pos:start="63:27" pos:end="63:31"><expr pos:start="63:27" pos:end="63:31"><name pos:start="63:27" pos:end="63:31">n_IRQ</name></expr></argument>, <argument pos:start="63:34" pos:end="63:38"><expr pos:start="63:34" pos:end="63:38"><name pos:start="63:34" pos:end="63:38">n_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:36"><expr pos:start="69:5" pos:end="69:35"><name pos:start="69:5" pos:end="69:13"><name pos:start="69:5" pos:end="69:7">src</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:13">ivpr</name></name> <operator pos:start="69:15" pos:end="69:16">|=</operator> <name pos:start="69:18" pos:end="69:35">IVPR_ACTIVITY_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:36"><expr pos:start="71:5" pos:end="71:35"><call pos:start="71:5" pos:end="71:35"><name pos:start="71:5" pos:end="71:14">IRQ_setbit</name><argument_list pos:start="71:15" pos:end="71:35">(<argument pos:start="71:16" pos:end="71:27"><expr pos:start="71:16" pos:end="71:27"><operator pos:start="71:16" pos:end="71:16">&amp;</operator><name pos:start="71:17" pos:end="71:27"><name pos:start="71:17" pos:end="71:19">dst</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:27">raised</name></name></expr></argument>, <argument pos:start="71:30" pos:end="71:34"><expr pos:start="71:30" pos:end="71:34"><name pos:start="71:30" pos:end="71:34">n_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="83:5"><if pos:start="73:5" pos:end="83:5">if <condition pos:start="73:8" pos:end="73:40">(<expr pos:start="73:9" pos:end="73:39"><name pos:start="73:9" pos:end="73:16">priority</name> <operator pos:start="73:18" pos:end="73:18">&lt;</operator> <name pos:start="73:20" pos:end="73:39"><name pos:start="73:20" pos:end="73:22">dst</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:30">raised</name><operator pos:start="73:31" pos:end="73:31">.</operator><name pos:start="73:32" pos:end="73:39">priority</name></name></expr>)</condition> <block pos:start="73:42" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:15">

        <comment type="block" pos:start="75:9" pos:end="75:54">/* An higher priority IRQ is already raised */</comment>

        <expr_stmt pos:start="77:9" pos:end="79:58"><expr pos:start="77:9" pos:end="79:57"><call pos:start="77:9" pos:end="79:57"><name pos:start="77:9" pos:end="77:15">DPRINTF</name><argument_list pos:start="77:16" pos:end="79:57">(<argument pos:start="77:17" pos:end="77:67"><expr pos:start="77:17" pos:end="77:67"><literal type="string" pos:start="77:17" pos:end="77:67">"%s: IRQ %d is hidden by raised IRQ %d on CPU %d\n"</literal></expr></argument>,

                <argument pos:start="79:17" pos:end="79:24"><expr pos:start="79:17" pos:end="79:24"><name pos:start="79:17" pos:end="79:24">__func__</name></expr></argument>, <argument pos:start="79:27" pos:end="79:31"><expr pos:start="79:27" pos:end="79:31"><name pos:start="79:27" pos:end="79:31">n_IRQ</name></expr></argument>, <argument pos:start="79:34" pos:end="79:49"><expr pos:start="79:34" pos:end="79:49"><name pos:start="79:34" pos:end="79:49"><name pos:start="79:34" pos:end="79:36">dst</name><operator pos:start="79:37" pos:end="79:38">-&gt;</operator><name pos:start="79:39" pos:end="79:44">raised</name><operator pos:start="79:45" pos:end="79:45">.</operator><name pos:start="79:46" pos:end="79:49">next</name></name></expr></argument>, <argument pos:start="79:52" pos:end="79:56"><expr pos:start="79:52" pos:end="79:56"><name pos:start="79:52" pos:end="79:56">n_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:33"><expr pos:start="85:5" pos:end="85:32"><call pos:start="85:5" pos:end="85:32"><name pos:start="85:5" pos:end="85:13">IRQ_check</name><argument_list pos:start="85:14" pos:end="85:32">(<argument pos:start="85:15" pos:end="85:17"><expr pos:start="85:15" pos:end="85:17"><name pos:start="85:15" pos:end="85:17">opp</name></expr></argument>, <argument pos:start="85:20" pos:end="85:31"><expr pos:start="85:20" pos:end="85:31"><operator pos:start="85:20" pos:end="85:20">&amp;</operator><name pos:start="85:21" pos:end="85:31"><name pos:start="85:21" pos:end="85:23">dst</name><operator pos:start="85:24" pos:end="85:25">-&gt;</operator><name pos:start="85:26" pos:end="85:31">raised</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="99:5"><if pos:start="87:5" pos:end="99:5">if <condition pos:start="87:8" pos:end="89:44">(<expr pos:start="87:9" pos:end="89:43"><call pos:start="87:9" pos:end="87:42"><name pos:start="87:9" pos:end="87:20">IRQ_get_next</name><argument_list pos:start="87:21" pos:end="87:42">(<argument pos:start="87:22" pos:end="87:24"><expr pos:start="87:22" pos:end="87:24"><name pos:start="87:22" pos:end="87:24">opp</name></expr></argument>, <argument pos:start="87:27" pos:end="87:41"><expr pos:start="87:27" pos:end="87:41"><operator pos:start="87:27" pos:end="87:27">&amp;</operator><name pos:start="87:28" pos:end="87:41"><name pos:start="87:28" pos:end="87:30">dst</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:41">servicing</name></name></expr></argument>)</argument_list></call> <operator pos:start="87:44" pos:end="87:45">!=</operator> <operator pos:start="87:47" pos:end="87:47">-</operator><literal type="number" pos:start="87:48" pos:end="87:48">1</literal> <operator pos:start="87:50" pos:end="87:51">&amp;&amp;</operator>

        <name pos:start="89:9" pos:end="89:16">priority</name> <operator pos:start="89:18" pos:end="89:19">&lt;=</operator> <name pos:start="89:21" pos:end="89:43"><name pos:start="89:21" pos:end="89:23">dst</name><operator pos:start="89:24" pos:end="89:25">-&gt;</operator><name pos:start="89:26" pos:end="89:34">servicing</name><operator pos:start="89:35" pos:end="89:35">.</operator><name pos:start="89:36" pos:end="89:43">priority</name></name></expr>)</condition> <block pos:start="89:46" pos:end="99:5">{<block_content pos:start="91:9" pos:end="97:15">

        <expr_stmt pos:start="91:9" pos:end="93:61"><expr pos:start="91:9" pos:end="93:60"><call pos:start="91:9" pos:end="93:60"><name pos:start="91:9" pos:end="91:15">DPRINTF</name><argument_list pos:start="91:16" pos:end="93:60">(<argument pos:start="91:17" pos:end="91:70"><expr pos:start="91:17" pos:end="91:70"><literal type="string" pos:start="91:17" pos:end="91:70">"%s: IRQ %d is hidden by servicing IRQ %d on CPU %d\n"</literal></expr></argument>,

                <argument pos:start="93:17" pos:end="93:24"><expr pos:start="93:17" pos:end="93:24"><name pos:start="93:17" pos:end="93:24">__func__</name></expr></argument>, <argument pos:start="93:27" pos:end="93:31"><expr pos:start="93:27" pos:end="93:31"><name pos:start="93:27" pos:end="93:31">n_IRQ</name></expr></argument>, <argument pos:start="93:34" pos:end="93:52"><expr pos:start="93:34" pos:end="93:52"><name pos:start="93:34" pos:end="93:52"><name pos:start="93:34" pos:end="93:36">dst</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:47">servicing</name><operator pos:start="93:48" pos:end="93:48">.</operator><name pos:start="93:49" pos:end="93:52">next</name></name></expr></argument>, <argument pos:start="93:55" pos:end="93:59"><expr pos:start="93:55" pos:end="93:59"><name pos:start="93:55" pos:end="93:59">n_CPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="95:9" pos:end="95:53">/* Already servicing a higher priority IRQ */</comment>

        <return pos:start="97:9" pos:end="97:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:70"><expr pos:start="101:5" pos:end="101:69"><call pos:start="101:5" pos:end="101:69"><name pos:start="101:5" pos:end="101:11">DPRINTF</name><argument_list pos:start="101:12" pos:end="101:69">(<argument pos:start="101:13" pos:end="101:54"><expr pos:start="101:13" pos:end="101:54"><literal type="string" pos:start="101:13" pos:end="101:54">"Raise OpenPIC INT output cpu %d irq %d\n"</literal></expr></argument>, <argument pos:start="101:57" pos:end="101:61"><expr pos:start="101:57" pos:end="101:61"><name pos:start="101:57" pos:end="101:61">n_CPU</name></expr></argument>, <argument pos:start="101:64" pos:end="101:68"><expr pos:start="101:64" pos:end="101:68"><name pos:start="101:64" pos:end="101:68">n_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:61"><expr pos:start="103:5" pos:end="103:60"><call pos:start="103:5" pos:end="103:60"><name pos:start="103:5" pos:end="103:18">qemu_irq_raise</name><argument_list pos:start="103:19" pos:end="103:60">(<argument pos:start="103:20" pos:end="103:59"><expr pos:start="103:20" pos:end="103:59"><name pos:start="103:20" pos:end="103:34"><name pos:start="103:20" pos:end="103:22">opp</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:27">dst</name><index pos:start="103:28" pos:end="103:34">[<expr pos:start="103:29" pos:end="103:33"><name pos:start="103:29" pos:end="103:33">n_CPU</name></expr>]</index></name><operator pos:start="103:35" pos:end="103:35">.</operator><name pos:start="103:36" pos:end="103:59"><name pos:start="103:36" pos:end="103:39">irqs</name><index pos:start="103:40" pos:end="103:59">[<expr pos:start="103:41" pos:end="103:58"><name pos:start="103:41" pos:end="103:58">OPENPIC_OUTPUT_INT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
