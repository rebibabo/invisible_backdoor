<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5885.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">numa_add</name><parameter_list pos:start="1:21" pos:end="1:40">(<parameter pos:start="1:22" pos:end="1:39"><decl pos:start="1:22" pos:end="1:39"><type pos:start="1:22" pos:end="1:33"><specifier pos:start="1:22" pos:end="1:26">const</specifier> <name pos:start="1:28" pos:end="1:31">char</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">optarg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:11">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:20"><name pos:start="5:10" pos:end="5:15">option</name><index pos:start="5:16" pos:end="5:20">[<expr pos:start="5:17" pos:end="5:19"><literal type="number" pos:start="5:17" pos:end="5:19">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:16">endptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:17">long</name> <name pos:start="9:19" pos:end="9:22">long</name></type> <name pos:start="9:24" pos:end="9:28">value</name></decl>, <decl pos:start="9:31" pos:end="9:38"><type ref="prev" pos:start="9:5" pos:end="9:22"/><name pos:start="9:31" pos:end="9:38">endvalue</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:14">nodenr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:56"><expr pos:start="15:5" pos:end="15:55"><name pos:start="15:5" pos:end="15:10">optarg</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <call pos:start="15:14" pos:end="15:51"><name pos:start="15:14" pos:end="15:25">get_opt_name</name><argument_list pos:start="15:26" pos:end="15:51">(<argument pos:start="15:27" pos:end="15:32"><expr pos:start="15:27" pos:end="15:32"><name pos:start="15:27" pos:end="15:32">option</name></expr></argument>, <argument pos:start="15:35" pos:end="15:37"><expr pos:start="15:35" pos:end="15:37"><literal type="number" pos:start="15:35" pos:end="15:37">128</literal></expr></argument>, <argument pos:start="15:40" pos:end="15:45"><expr pos:start="15:40" pos:end="15:45"><name pos:start="15:40" pos:end="15:45">optarg</name></expr></argument>, <argument pos:start="15:48" pos:end="15:50"><expr pos:start="15:48" pos:end="15:50"><literal type="char" pos:start="15:48" pos:end="15:50">','</literal></expr></argument>)</argument_list></call> <operator pos:start="15:53" pos:end="15:53">+</operator> <literal type="number" pos:start="15:55" pos:end="15:55">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="99:5"><if pos:start="17:5" pos:end="99:5">if <condition pos:start="17:8" pos:end="17:32">(<expr pos:start="17:9" pos:end="17:31"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:31"><name pos:start="17:10" pos:end="17:15">strcmp</name><argument_list pos:start="17:16" pos:end="17:31">(<argument pos:start="17:17" pos:end="17:22"><expr pos:start="17:17" pos:end="17:22"><name pos:start="17:17" pos:end="17:22">option</name></expr></argument>, <argument pos:start="17:25" pos:end="17:30"><expr pos:start="17:25" pos:end="17:30"><literal type="string" pos:start="17:25" pos:end="17:30">"node"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:34" pos:end="99:5">{<block_content pos:start="19:9" pos:end="97:24">

        <if_stmt pos:start="19:9" pos:end="27:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:64">(<expr pos:start="19:13" pos:end="19:63"><call pos:start="19:13" pos:end="19:58"><name pos:start="19:13" pos:end="19:27">get_param_value</name><argument_list pos:start="19:28" pos:end="19:58">(<argument pos:start="19:29" pos:end="19:34"><expr pos:start="19:29" pos:end="19:34"><name pos:start="19:29" pos:end="19:34">option</name></expr></argument>, <argument pos:start="19:37" pos:end="19:39"><expr pos:start="19:37" pos:end="19:39"><literal type="number" pos:start="19:37" pos:end="19:39">128</literal></expr></argument>, <argument pos:start="19:42" pos:end="19:49"><expr pos:start="19:42" pos:end="19:49"><literal type="string" pos:start="19:42" pos:end="19:49">"nodeid"</literal></expr></argument>, <argument pos:start="19:52" pos:end="19:57"><expr pos:start="19:52" pos:end="19:57"><name pos:start="19:52" pos:end="19:57">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="19:60" pos:end="19:61">==</operator> <literal type="number" pos:start="19:63" pos:end="19:63">0</literal></expr>)</condition> <block pos:start="19:66" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:35">

            <expr_stmt pos:start="21:13" pos:end="21:35"><expr pos:start="21:13" pos:end="21:34"><name pos:start="21:13" pos:end="21:18">nodenr</name> <operator pos:start="21:20" pos:end="21:20">=</operator> <name pos:start="21:22" pos:end="21:34">nb_numa_nodes</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="23:11" pos:end="27:9">else <block pos:start="23:16" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:48">

            <expr_stmt pos:start="25:13" pos:end="25:48"><expr pos:start="25:13" pos:end="25:47"><name pos:start="25:13" pos:end="25:18">nodenr</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="25:47"><name pos:start="25:22" pos:end="25:29">strtoull</name><argument_list pos:start="25:30" pos:end="25:47">(<argument pos:start="25:31" pos:end="25:36"><expr pos:start="25:31" pos:end="25:36"><name pos:start="25:31" pos:end="25:36">option</name></expr></argument>, <argument pos:start="25:39" pos:end="25:42"><expr pos:start="25:39" pos:end="25:42"><name pos:start="25:39" pos:end="25:42">NULL</name></expr></argument>, <argument pos:start="25:45" pos:end="25:46"><expr pos:start="25:45" pos:end="25:46"><literal type="number" pos:start="25:45" pos:end="25:46">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="31:9" pos:end="51:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:61">(<expr pos:start="31:13" pos:end="31:60"><call pos:start="31:13" pos:end="31:55"><name pos:start="31:13" pos:end="31:27">get_param_value</name><argument_list pos:start="31:28" pos:end="31:55">(<argument pos:start="31:29" pos:end="31:34"><expr pos:start="31:29" pos:end="31:34"><name pos:start="31:29" pos:end="31:34">option</name></expr></argument>, <argument pos:start="31:37" pos:end="31:39"><expr pos:start="31:37" pos:end="31:39"><literal type="number" pos:start="31:37" pos:end="31:39">128</literal></expr></argument>, <argument pos:start="31:42" pos:end="31:46"><expr pos:start="31:42" pos:end="31:46"><literal type="string" pos:start="31:42" pos:end="31:46">"mem"</literal></expr></argument>, <argument pos:start="31:49" pos:end="31:54"><expr pos:start="31:49" pos:end="31:54"><name pos:start="31:49" pos:end="31:54">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="31:57" pos:end="31:58">==</operator> <literal type="number" pos:start="31:60" pos:end="31:60">0</literal></expr>)</condition> <block pos:start="31:63" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:33">

            <expr_stmt pos:start="33:13" pos:end="33:33"><expr pos:start="33:13" pos:end="33:32"><name pos:start="33:13" pos:end="33:28"><name pos:start="33:13" pos:end="33:20">node_mem</name><index pos:start="33:21" pos:end="33:28">[<expr pos:start="33:22" pos:end="33:27"><name pos:start="33:22" pos:end="33:27">nodenr</name></expr>]</index></name> <operator pos:start="33:30" pos:end="33:30">=</operator> <literal type="number" pos:start="33:32" pos:end="33:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="35:11" pos:end="51:9">else <block pos:start="35:16" pos:end="51:9">{<block_content pos:start="37:13" pos:end="49:36">

            <decl_stmt pos:start="37:13" pos:end="37:25"><decl pos:start="37:13" pos:end="37:24"><type pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:19">int64_t</name></type> <name pos:start="37:21" pos:end="37:24">sval</name></decl>;</decl_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:44"><expr pos:start="39:13" pos:end="39:43"><name pos:start="39:13" pos:end="39:16">sval</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:43"><name pos:start="39:20" pos:end="39:26">strtosz</name><argument_list pos:start="39:27" pos:end="39:43">(<argument pos:start="39:28" pos:end="39:33"><expr pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:33">option</name></expr></argument>, <argument pos:start="39:36" pos:end="39:42"><expr pos:start="39:36" pos:end="39:42"><operator pos:start="39:36" pos:end="39:36">&amp;</operator><name pos:start="39:37" pos:end="39:42">endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="47:13"><if pos:start="41:13" pos:end="47:13">if <condition pos:start="41:16" pos:end="41:36">(<expr pos:start="41:17" pos:end="41:35"><name pos:start="41:17" pos:end="41:20">sval</name> <operator pos:start="41:22" pos:end="41:22">&lt;</operator> <literal type="number" pos:start="41:24" pos:end="41:24">0</literal> <operator pos:start="41:26" pos:end="41:27">||</operator> <operator pos:start="41:29" pos:end="41:29">*</operator><name pos:start="41:30" pos:end="41:35">endptr</name></expr>)</condition> <block pos:start="41:38" pos:end="47:13">{<block_content pos:start="43:17" pos:end="45:24">

                <expr_stmt pos:start="43:17" pos:end="43:77"><expr pos:start="43:17" pos:end="43:76"><call pos:start="43:17" pos:end="43:76"><name pos:start="43:17" pos:end="43:23">fprintf</name><argument_list pos:start="43:24" pos:end="43:76">(<argument pos:start="43:25" pos:end="43:30"><expr pos:start="43:25" pos:end="43:30"><name pos:start="43:25" pos:end="43:30">stderr</name></expr></argument>, <argument pos:start="43:33" pos:end="43:67"><expr pos:start="43:33" pos:end="43:67"><literal type="string" pos:start="43:33" pos:end="43:67">"qemu: invalid numa mem size: %s\n"</literal></expr></argument>, <argument pos:start="43:70" pos:end="43:75"><expr pos:start="43:70" pos:end="43:75"><name pos:start="43:70" pos:end="43:75">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:24"><expr pos:start="45:17" pos:end="45:23"><call pos:start="45:17" pos:end="45:23"><name pos:start="45:17" pos:end="45:20">exit</name><argument_list pos:start="45:21" pos:end="45:23">(<argument pos:start="45:22" pos:end="45:22"><expr pos:start="45:22" pos:end="45:22"><literal type="number" pos:start="45:22" pos:end="45:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:36"><expr pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:28"><name pos:start="49:13" pos:end="49:20">node_mem</name><index pos:start="49:21" pos:end="49:28">[<expr pos:start="49:22" pos:end="49:27"><name pos:start="49:22" pos:end="49:27">nodenr</name></expr>]</index></name> <operator pos:start="49:30" pos:end="49:30">=</operator> <name pos:start="49:32" pos:end="49:35">sval</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="53:9" pos:end="95:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:62">(<expr pos:start="53:13" pos:end="53:61"><call pos:start="53:13" pos:end="53:56"><name pos:start="53:13" pos:end="53:27">get_param_value</name><argument_list pos:start="53:28" pos:end="53:56">(<argument pos:start="53:29" pos:end="53:34"><expr pos:start="53:29" pos:end="53:34"><name pos:start="53:29" pos:end="53:34">option</name></expr></argument>, <argument pos:start="53:37" pos:end="53:39"><expr pos:start="53:37" pos:end="53:39"><literal type="number" pos:start="53:37" pos:end="53:39">128</literal></expr></argument>, <argument pos:start="53:42" pos:end="53:47"><expr pos:start="53:42" pos:end="53:47"><literal type="string" pos:start="53:42" pos:end="53:47">"cpus"</literal></expr></argument>, <argument pos:start="53:50" pos:end="53:55"><expr pos:start="53:50" pos:end="53:55"><name pos:start="53:50" pos:end="53:55">optarg</name></expr></argument>)</argument_list></call> <operator pos:start="53:58" pos:end="53:59">==</operator> <literal type="number" pos:start="53:61" pos:end="53:61">0</literal></expr>)</condition> <block pos:start="53:64" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:37">

            <expr_stmt pos:start="55:13" pos:end="55:37"><expr pos:start="55:13" pos:end="55:36"><name pos:start="55:13" pos:end="55:32"><name pos:start="55:13" pos:end="55:24">node_cpumask</name><index pos:start="55:25" pos:end="55:32">[<expr pos:start="55:26" pos:end="55:31"><name pos:start="55:26" pos:end="55:31">nodenr</name></expr>]</index></name> <operator pos:start="55:34" pos:end="55:34">=</operator> <literal type="number" pos:start="55:36" pos:end="55:36">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="57:11" pos:end="95:9">else <block pos:start="57:16" pos:end="95:9">{<block_content pos:start="59:13" pos:end="93:41">

            <expr_stmt pos:start="59:13" pos:end="59:50"><expr pos:start="59:13" pos:end="59:49"><name pos:start="59:13" pos:end="59:17">value</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:49"><name pos:start="59:21" pos:end="59:28">strtoull</name><argument_list pos:start="59:29" pos:end="59:49">(<argument pos:start="59:30" pos:end="59:35"><expr pos:start="59:30" pos:end="59:35"><name pos:start="59:30" pos:end="59:35">option</name></expr></argument>, <argument pos:start="59:38" pos:end="59:44"><expr pos:start="59:38" pos:end="59:44"><operator pos:start="59:38" pos:end="59:38">&amp;</operator><name pos:start="59:39" pos:end="59:44">endptr</name></expr></argument>, <argument pos:start="59:47" pos:end="59:48"><expr pos:start="59:47" pos:end="59:48"><literal type="number" pos:start="59:47" pos:end="59:48">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="91:13"><if pos:start="61:13" pos:end="67:13">if <condition pos:start="61:16" pos:end="61:28">(<expr pos:start="61:17" pos:end="61:27"><name pos:start="61:17" pos:end="61:21">value</name> <operator pos:start="61:23" pos:end="61:24">&gt;=</operator> <literal type="number" pos:start="61:26" pos:end="61:27">64</literal></expr>)</condition> <block pos:start="61:30" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:74">

                <expr_stmt pos:start="63:17" pos:end="63:27"><expr pos:start="63:17" pos:end="63:26"><name pos:start="63:17" pos:end="63:21">value</name> <operator pos:start="63:23" pos:end="63:23">=</operator> <literal type="number" pos:start="63:25" pos:end="63:26">63</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:74"><expr pos:start="65:17" pos:end="65:73"><call pos:start="65:17" pos:end="65:73"><name pos:start="65:17" pos:end="65:23">fprintf</name><argument_list pos:start="65:24" pos:end="65:73">(<argument pos:start="65:25" pos:end="65:30"><expr pos:start="65:25" pos:end="65:30"><name pos:start="65:25" pos:end="65:30">stderr</name></expr></argument>, <argument pos:start="65:33" pos:end="65:72"><expr pos:start="65:33" pos:end="65:72"><literal type="string" pos:start="65:33" pos:end="65:72">"only 64 CPUs in NUMA mode supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="67:15" pos:end="91:13">else <block pos:start="67:20" pos:end="91:13">{<block_content pos:start="69:17" pos:end="89:17">

                <if_stmt pos:start="69:17" pos:end="89:17"><if pos:start="69:17" pos:end="85:17">if <condition pos:start="69:20" pos:end="69:35">(<expr pos:start="69:21" pos:end="69:34"><operator pos:start="69:21" pos:end="69:21">*</operator><name pos:start="69:22" pos:end="69:27">endptr</name> <operator pos:start="69:29" pos:end="69:30">==</operator> <literal type="char" pos:start="69:32" pos:end="69:34">'-'</literal></expr>)</condition> <block pos:start="69:37" pos:end="85:17">{<block_content pos:start="71:21" pos:end="83:65">

                    <expr_stmt pos:start="71:21" pos:end="71:63"><expr pos:start="71:21" pos:end="71:62"><name pos:start="71:21" pos:end="71:28">endvalue</name> <operator pos:start="71:30" pos:end="71:30">=</operator> <call pos:start="71:32" pos:end="71:62"><name pos:start="71:32" pos:end="71:39">strtoull</name><argument_list pos:start="71:40" pos:end="71:62">(<argument pos:start="71:41" pos:end="71:48"><expr pos:start="71:41" pos:end="71:48"><name pos:start="71:41" pos:end="71:46">endptr</name><operator pos:start="71:47" pos:end="71:47">+</operator><literal type="number" pos:start="71:48" pos:end="71:48">1</literal></expr></argument>, <argument pos:start="71:51" pos:end="71:57"><expr pos:start="71:51" pos:end="71:57"><operator pos:start="71:51" pos:end="71:51">&amp;</operator><name pos:start="71:52" pos:end="71:57">endptr</name></expr></argument>, <argument pos:start="71:60" pos:end="71:61"><expr pos:start="71:60" pos:end="71:61"><literal type="number" pos:start="71:60" pos:end="71:61">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="73:21" pos:end="81:21"><if pos:start="73:21" pos:end="81:21">if <condition pos:start="73:24" pos:end="73:39">(<expr pos:start="73:25" pos:end="73:38"><name pos:start="73:25" pos:end="73:32">endvalue</name> <operator pos:start="73:34" pos:end="73:35">&gt;=</operator> <literal type="number" pos:start="73:37" pos:end="73:38">63</literal></expr>)</condition> <block pos:start="73:41" pos:end="81:21">{<block_content pos:start="75:25" pos:end="79:70">

                        <expr_stmt pos:start="75:25" pos:end="75:38"><expr pos:start="75:25" pos:end="75:37"><name pos:start="75:25" pos:end="75:32">endvalue</name> <operator pos:start="75:34" pos:end="75:34">=</operator> <literal type="number" pos:start="75:36" pos:end="75:37">62</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="77:25" pos:end="79:70"><expr pos:start="77:25" pos:end="79:69"><call pos:start="77:25" pos:end="79:69"><name pos:start="77:25" pos:end="77:31">fprintf</name><argument_list pos:start="77:32" pos:end="79:69">(<argument pos:start="77:33" pos:end="77:38"><expr pos:start="77:33" pos:end="77:38"><name pos:start="77:33" pos:end="77:38">stderr</name></expr></argument>,

                            <argument pos:start="79:29" pos:end="79:68"><expr pos:start="79:29" pos:end="79:68"><literal type="string" pos:start="79:29" pos:end="79:68">"only 63 CPUs in NUMA mode supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="83:21" pos:end="83:65"><expr pos:start="83:21" pos:end="83:64"><name pos:start="83:21" pos:end="83:25">value</name> <operator pos:start="83:27" pos:end="83:27">=</operator> <operator pos:start="83:29" pos:end="83:29">(</operator><literal type="number" pos:start="83:30" pos:end="83:33">2ULL</literal> <operator pos:start="83:35" pos:end="83:36">&lt;&lt;</operator> <name pos:start="83:38" pos:end="83:45">endvalue</name><operator pos:start="83:46" pos:end="83:46">)</operator> <operator pos:start="83:48" pos:end="83:48">-</operator> <operator pos:start="83:50" pos:end="83:50">(</operator><literal type="number" pos:start="83:51" pos:end="83:54">1ULL</literal> <operator pos:start="83:56" pos:end="83:57">&lt;&lt;</operator> <name pos:start="83:59" pos:end="83:63">value</name><operator pos:start="83:64" pos:end="83:64">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="85:19" pos:end="89:17">else <block pos:start="85:24" pos:end="89:17">{<block_content pos:start="87:21" pos:end="87:42">

                    <expr_stmt pos:start="87:21" pos:end="87:42"><expr pos:start="87:21" pos:end="87:41"><name pos:start="87:21" pos:end="87:25">value</name> <operator pos:start="87:27" pos:end="87:27">=</operator> <literal type="number" pos:start="87:29" pos:end="87:32">1ULL</literal> <operator pos:start="87:34" pos:end="87:35">&lt;&lt;</operator> <name pos:start="87:37" pos:end="87:41">value</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:41"><expr pos:start="93:13" pos:end="93:40"><name pos:start="93:13" pos:end="93:32"><name pos:start="93:13" pos:end="93:24">node_cpumask</name><index pos:start="93:25" pos:end="93:32">[<expr pos:start="93:26" pos:end="93:31"><name pos:start="93:26" pos:end="93:31">nodenr</name></expr>]</index></name> <operator pos:start="93:34" pos:end="93:34">=</operator> <name pos:start="93:36" pos:end="93:40">value</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:24"><expr pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:21">nb_numa_nodes</name><operator pos:start="97:22" pos:end="97:23">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="101:5" pos:end="101:11">return;</return>

</block_content>}</block></function>
</unit>
