<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23604.c" pos:tabs="8"><function pos:start="1:1" pos:end="383:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">vmdk_create</name><parameter_list pos:start="1:23" pos:end="3:36">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:43">filename</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:73"><decl pos:start="1:46" pos:end="1:73"><type pos:start="1:46" pos:end="1:73"><name pos:start="1:46" pos:end="1:64">QEMUOptionParameter</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:73">options</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:35"><decl pos:start="3:24" pos:end="3:35"><type pos:start="3:24" pos:end="3:35"><name pos:start="3:24" pos:end="3:28">Error</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier><modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:35">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="383:1">{<block_content pos:start="7:5" pos:end="381:15">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>, <decl pos:start="7:13" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:15">idx</name> <init pos:start="7:17" pos:end="7:19">= <expr pos:start="7:19" pos:end="7:19"><literal type="number" pos:start="7:19" pos:end="7:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:23"><name pos:start="9:10" pos:end="9:13">desc</name><index pos:start="9:14" pos:end="9:23">[<expr pos:start="9:15" pos:end="9:22"><name pos:start="9:15" pos:end="9:22">BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:22">total_size</name> <init pos:start="11:24" pos:end="11:26">= <expr pos:start="11:26" pos:end="11:26"><literal type="number" pos:start="11:26" pos:end="11:26">0</literal></expr></init></decl>, <decl pos:start="11:29" pos:end="11:36"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:29" pos:end="11:36">filesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:28">adapter_type</name> <init pos:start="13:30" pos:end="13:35">= <expr pos:start="13:32" pos:end="13:35"><name pos:start="13:32" pos:end="13:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:35"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:28">backing_file</name> <init pos:start="15:30" pos:end="15:35">= <expr pos:start="15:32" pos:end="15:35"><name pos:start="15:32" pos:end="15:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:19">fmt</name> <init pos:start="17:21" pos:end="17:26">= <expr pos:start="17:23" pos:end="17:26"><name pos:start="17:23" pos:end="17:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:13">flags</name> <init pos:start="19:15" pos:end="19:17">= <expr pos:start="19:17" pos:end="19:17"><literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">ret</name> <init pos:start="21:13" pos:end="21:15">= <expr pos:start="21:15" pos:end="21:15"><literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:31"><decl pos:start="23:5" pos:end="23:13"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:13">flat</name></decl>, <decl pos:start="23:16" pos:end="23:20"><type ref="prev" pos:start="23:5" pos:end="23:8"/><name pos:start="23:16" pos:end="23:20">split</name></decl>, <decl pos:start="23:23" pos:end="23:30"><type ref="prev" pos:start="23:5" pos:end="23:8"/><name pos:start="23:23" pos:end="23:30">compress</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:39"><decl pos:start="25:5" pos:end="25:38"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">char</name></type> <name pos:start="25:10" pos:end="25:33"><name pos:start="25:10" pos:end="25:23">ext_desc_lines</name><index pos:start="25:24" pos:end="25:33">[<expr pos:start="25:25" pos:end="25:32"><name pos:start="25:25" pos:end="25:32">BUF_SIZE</name></expr>]</index></name> <init pos:start="25:35" pos:end="25:38">= <expr pos:start="25:37" pos:end="25:38"><literal type="string" pos:start="25:37" pos:end="25:38">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:61"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">char</name></type> <name pos:start="27:10" pos:end="27:23"><name pos:start="27:10" pos:end="27:13">path</name><index pos:start="27:14" pos:end="27:23">[<expr pos:start="27:15" pos:end="27:22"><name pos:start="27:15" pos:end="27:22">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="27:26" pos:end="27:41"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:26" pos:end="27:41"><name pos:start="27:26" pos:end="27:31">prefix</name><index pos:start="27:32" pos:end="27:41">[<expr pos:start="27:33" pos:end="27:40"><name pos:start="27:33" pos:end="27:40">PATH_MAX</name></expr>]</index></name></decl>, <decl pos:start="27:44" pos:end="27:60"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:44" pos:end="27:60"><name pos:start="27:44" pos:end="27:50">postfix</name><index pos:start="27:51" pos:end="27:60">[<expr pos:start="27:52" pos:end="27:59"><name pos:start="27:52" pos:end="27:59">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:42"><decl pos:start="29:5" pos:end="29:41"><type pos:start="29:5" pos:end="29:17"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:17">int64_t</name></type> <name pos:start="29:19" pos:end="29:28">split_size</name> <init pos:start="29:30" pos:end="29:41">= <expr pos:start="29:32" pos:end="29:41"><literal type="number" pos:start="29:32" pos:end="29:41">0x80000000</literal></expr></init></decl>;</decl_stmt>  <comment type="block" pos:start="29:45" pos:end="29:78">/* VMDK has constant split size */</comment>

    <decl_stmt pos:start="31:5" pos:end="31:33"><decl pos:start="31:5" pos:end="31:32"><type pos:start="31:5" pos:end="31:16"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:14">char</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:32">desc_extent_line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:41"><decl pos:start="33:5" pos:end="33:40"><type pos:start="33:5" pos:end="33:8"><name pos:start="33:5" pos:end="33:8">char</name></type> <name pos:start="33:10" pos:end="33:35"><name pos:start="33:10" pos:end="33:25">parent_desc_line</name><index pos:start="33:26" pos:end="33:35">[<expr pos:start="33:27" pos:end="33:34"><name pos:start="33:27" pos:end="33:34">BUF_SIZE</name></expr>]</index></name> <init pos:start="33:37" pos:end="33:40">= <expr pos:start="33:39" pos:end="33:40"><literal type="string" pos:start="33:39" pos:end="33:40">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:37"><decl pos:start="35:5" pos:end="35:36"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">uint32_t</name></type> <name pos:start="35:14" pos:end="35:23">parent_cid</name> <init pos:start="35:25" pos:end="35:36">= <expr pos:start="35:27" pos:end="35:36"><literal type="number" pos:start="35:27" pos:end="35:36">0xffffffff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:31"><decl pos:start="37:5" pos:end="37:30"><type pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:12">uint32_t</name></type> <name pos:start="37:14" pos:end="37:25">number_heads</name> <init pos:start="37:27" pos:end="37:30">= <expr pos:start="37:29" pos:end="37:30"><literal type="number" pos:start="37:29" pos:end="37:30">16</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:30"><decl pos:start="39:5" pos:end="39:29"><type pos:start="39:5" pos:end="39:8"><name pos:start="39:5" pos:end="39:8">bool</name></type> <name pos:start="39:10" pos:end="39:21">zeroed_grain</name> <init pos:start="39:23" pos:end="39:29">= <expr pos:start="39:25" pos:end="39:29"><name pos:start="39:25" pos:end="39:29">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="77:37"><decl pos:start="41:5" pos:end="77:36"><type pos:start="41:5" pos:end="41:14"><specifier pos:start="41:5" pos:end="41:9">const</specifier> <name pos:start="41:11" pos:end="41:14">char</name></type> <name pos:start="41:16" pos:end="41:30"><name pos:start="41:16" pos:end="41:28">desc_template</name><index pos:start="41:29" pos:end="41:30">[]</index></name> <init pos:start="41:32" pos:end="77:36">=

        <expr pos:start="43:9" pos:end="77:36"><literal type="string" pos:start="43:9" pos:end="43:33">"# Disk DescriptorFile\n"</literal>

        <literal type="string" pos:start="45:9" pos:end="45:21">"version=1\n"</literal>

        <literal type="string" pos:start="47:9" pos:end="47:18">"CID=%x\n"</literal>

        <literal type="string" pos:start="49:9" pos:end="49:24">"parentCID=%x\n"</literal>

        <literal type="string" pos:start="51:9" pos:end="51:29">"createType=\"%s\"\n"</literal>

        <literal type="string" pos:start="53:9" pos:end="53:12">"%s"</literal>

        <literal type="string" pos:start="55:9" pos:end="55:12">"\n"</literal>

        <literal type="string" pos:start="57:9" pos:end="57:32">"# Extent description\n"</literal>

        <literal type="string" pos:start="59:9" pos:end="59:12">"%s"</literal>

        <literal type="string" pos:start="61:9" pos:end="61:12">"\n"</literal>

        <literal type="string" pos:start="63:9" pos:end="63:32">"# The Disk Data Base\n"</literal>

        <literal type="string" pos:start="65:9" pos:end="65:16">"#DDB\n"</literal>

        <literal type="string" pos:start="67:9" pos:end="67:12">"\n"</literal>

        <literal type="string" pos:start="69:9" pos:end="69:41">"ddb.virtualHWVersion = \"%d\"\n"</literal>

        <literal type="string" pos:start="71:9" pos:end="71:38">"ddb.geometry.cylinders = \"%"</literal> <name pos:start="71:40" pos:end="71:45">PRId64</name> <literal type="string" pos:start="71:47" pos:end="71:52">"\"\n"</literal>

        <literal type="string" pos:start="73:9" pos:end="73:39">"ddb.geometry.heads = \"%d\"\n"</literal>

        <literal type="string" pos:start="75:9" pos:end="75:41">"ddb.geometry.sectors = \"63\"\n"</literal>

        <literal type="string" pos:start="77:9" pos:end="77:36">"ddb.adapterType = \"%s\"\n"</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="81:5" pos:end="85:5"><if pos:start="81:5" pos:end="85:5">if <condition pos:start="81:8" pos:end="81:76">(<expr pos:start="81:9" pos:end="81:75"><call pos:start="81:9" pos:end="81:75"><name pos:start="81:9" pos:end="81:26">filename_decompose</name><argument_list pos:start="81:27" pos:end="81:75">(<argument pos:start="81:28" pos:end="81:35"><expr pos:start="81:28" pos:end="81:35"><name pos:start="81:28" pos:end="81:35">filename</name></expr></argument>, <argument pos:start="81:38" pos:end="81:41"><expr pos:start="81:38" pos:end="81:41"><name pos:start="81:38" pos:end="81:41">path</name></expr></argument>, <argument pos:start="81:44" pos:end="81:49"><expr pos:start="81:44" pos:end="81:49"><name pos:start="81:44" pos:end="81:49">prefix</name></expr></argument>, <argument pos:start="81:52" pos:end="81:58"><expr pos:start="81:52" pos:end="81:58"><name pos:start="81:52" pos:end="81:58">postfix</name></expr></argument>, <argument pos:start="81:61" pos:end="81:68"><expr pos:start="81:61" pos:end="81:68"><name pos:start="81:61" pos:end="81:68">PATH_MAX</name></expr></argument>, <argument pos:start="81:71" pos:end="81:74"><expr pos:start="81:71" pos:end="81:74"><name pos:start="81:71" pos:end="81:74">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:78" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:23">

        <return pos:start="83:9" pos:end="83:23">return <expr pos:start="83:16" pos:end="83:22"><operator pos:start="83:16" pos:end="83:16">-</operator><name pos:start="83:17" pos:end="83:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="87:5" pos:end="87:26">/* Read out options */</comment>

    <while pos:start="89:5" pos:end="119:5">while <condition pos:start="89:11" pos:end="89:36">(<expr pos:start="89:12" pos:end="89:35"><name pos:start="89:12" pos:end="89:18">options</name> <operator pos:start="89:20" pos:end="89:21">&amp;&amp;</operator> <name pos:start="89:23" pos:end="89:35"><name pos:start="89:23" pos:end="89:29">options</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:35">name</name></name></expr>)</condition> <block pos:start="89:38" pos:end="119:5">{<block_content pos:start="91:9" pos:end="117:18">

        <if_stmt pos:start="91:9" pos:end="115:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:51">(<expr pos:start="91:13" pos:end="91:50"><operator pos:start="91:13" pos:end="91:13">!</operator><call pos:start="91:14" pos:end="91:50"><name pos:start="91:14" pos:end="91:19">strcmp</name><argument_list pos:start="91:20" pos:end="91:50">(<argument pos:start="91:21" pos:end="91:33"><expr pos:start="91:21" pos:end="91:33"><name pos:start="91:21" pos:end="91:33"><name pos:start="91:21" pos:end="91:27">options</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:33">name</name></name></expr></argument>, <argument pos:start="91:36" pos:end="91:49"><expr pos:start="91:36" pos:end="91:49"><name pos:start="91:36" pos:end="91:49">BLOCK_OPT_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:53" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:42">

            <expr_stmt pos:start="93:13" pos:end="93:42"><expr pos:start="93:13" pos:end="93:41"><name pos:start="93:13" pos:end="93:22">total_size</name> <operator pos:start="93:24" pos:end="93:24">=</operator> <name pos:start="93:26" pos:end="93:41"><name pos:start="93:26" pos:end="93:32">options</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:39">value</name><operator pos:start="93:40" pos:end="93:40">.</operator><name pos:start="93:41" pos:end="93:41">n</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="95:11" pos:end="99:9">else if <condition pos:start="95:19" pos:end="95:66">(<expr pos:start="95:20" pos:end="95:65"><operator pos:start="95:20" pos:end="95:20">!</operator><call pos:start="95:21" pos:end="95:65"><name pos:start="95:21" pos:end="95:26">strcmp</name><argument_list pos:start="95:27" pos:end="95:65">(<argument pos:start="95:28" pos:end="95:40"><expr pos:start="95:28" pos:end="95:40"><name pos:start="95:28" pos:end="95:40"><name pos:start="95:28" pos:end="95:34">options</name><operator pos:start="95:35" pos:end="95:36">-&gt;</operator><name pos:start="95:37" pos:end="95:40">name</name></name></expr></argument>, <argument pos:start="95:43" pos:end="95:64"><expr pos:start="95:43" pos:end="95:64"><name pos:start="95:43" pos:end="95:64">BLOCK_OPT_ADAPTER_TYPE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:68" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:44">

            <expr_stmt pos:start="97:13" pos:end="97:44"><expr pos:start="97:13" pos:end="97:43"><name pos:start="97:13" pos:end="97:24">adapter_type</name> <operator pos:start="97:26" pos:end="97:26">=</operator> <name pos:start="97:28" pos:end="97:43"><name pos:start="97:28" pos:end="97:34">options</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:41">value</name><operator pos:start="97:42" pos:end="97:42">.</operator><name pos:start="97:43" pos:end="97:43">s</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="99:11" pos:end="103:9">else if <condition pos:start="99:19" pos:end="99:66">(<expr pos:start="99:20" pos:end="99:65"><operator pos:start="99:20" pos:end="99:20">!</operator><call pos:start="99:21" pos:end="99:65"><name pos:start="99:21" pos:end="99:26">strcmp</name><argument_list pos:start="99:27" pos:end="99:65">(<argument pos:start="99:28" pos:end="99:40"><expr pos:start="99:28" pos:end="99:40"><name pos:start="99:28" pos:end="99:40"><name pos:start="99:28" pos:end="99:34">options</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:40">name</name></name></expr></argument>, <argument pos:start="99:43" pos:end="99:64"><expr pos:start="99:43" pos:end="99:64"><name pos:start="99:43" pos:end="99:64">BLOCK_OPT_BACKING_FILE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:68" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:44">

            <expr_stmt pos:start="101:13" pos:end="101:44"><expr pos:start="101:13" pos:end="101:43"><name pos:start="101:13" pos:end="101:24">backing_file</name> <operator pos:start="101:26" pos:end="101:26">=</operator> <name pos:start="101:28" pos:end="101:43"><name pos:start="101:28" pos:end="101:34">options</name><operator pos:start="101:35" pos:end="101:36">-&gt;</operator><name pos:start="101:37" pos:end="101:41">value</name><operator pos:start="101:42" pos:end="101:42">.</operator><name pos:start="101:43" pos:end="101:43">s</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="103:11" pos:end="107:9">else if <condition pos:start="103:19" pos:end="103:61">(<expr pos:start="103:20" pos:end="103:60"><operator pos:start="103:20" pos:end="103:20">!</operator><call pos:start="103:21" pos:end="103:60"><name pos:start="103:21" pos:end="103:26">strcmp</name><argument_list pos:start="103:27" pos:end="103:60">(<argument pos:start="103:28" pos:end="103:40"><expr pos:start="103:28" pos:end="103:40"><name pos:start="103:28" pos:end="103:40"><name pos:start="103:28" pos:end="103:34">options</name><operator pos:start="103:35" pos:end="103:36">-&gt;</operator><name pos:start="103:37" pos:end="103:40">name</name></name></expr></argument>, <argument pos:start="103:43" pos:end="103:59"><expr pos:start="103:43" pos:end="103:59"><name pos:start="103:43" pos:end="103:59">BLOCK_OPT_COMPAT6</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:63" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:63">

            <expr_stmt pos:start="105:13" pos:end="105:63"><expr pos:start="105:13" pos:end="105:62"><name pos:start="105:13" pos:end="105:17">flags</name> <operator pos:start="105:19" pos:end="105:20">|=</operator> <ternary pos:start="105:22" pos:end="105:62"><condition pos:start="105:22" pos:end="105:39"><expr pos:start="105:22" pos:end="105:37"><name pos:start="105:22" pos:end="105:37"><name pos:start="105:22" pos:end="105:28">options</name><operator pos:start="105:29" pos:end="105:30">-&gt;</operator><name pos:start="105:31" pos:end="105:35">value</name><operator pos:start="105:36" pos:end="105:36">.</operator><name pos:start="105:37" pos:end="105:37">n</name></name></expr> ?</condition><then pos:start="105:41" pos:end="105:58"> <expr pos:start="105:41" pos:end="105:58"><name pos:start="105:41" pos:end="105:58">BLOCK_FLAG_COMPAT6</name></expr> </then><else pos:start="105:60" pos:end="105:62">: <expr pos:start="105:62" pos:end="105:62"><literal type="number" pos:start="105:62" pos:end="105:62">0</literal></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="107:11" pos:end="111:9">else if <condition pos:start="107:19" pos:end="107:60">(<expr pos:start="107:20" pos:end="107:59"><operator pos:start="107:20" pos:end="107:20">!</operator><call pos:start="107:21" pos:end="107:59"><name pos:start="107:21" pos:end="107:26">strcmp</name><argument_list pos:start="107:27" pos:end="107:59">(<argument pos:start="107:28" pos:end="107:40"><expr pos:start="107:28" pos:end="107:40"><name pos:start="107:28" pos:end="107:40"><name pos:start="107:28" pos:end="107:34">options</name><operator pos:start="107:35" pos:end="107:36">-&gt;</operator><name pos:start="107:37" pos:end="107:40">name</name></name></expr></argument>, <argument pos:start="107:43" pos:end="107:58"><expr pos:start="107:43" pos:end="107:58"><name pos:start="107:43" pos:end="107:58">BLOCK_OPT_SUBFMT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:62" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:35">

            <expr_stmt pos:start="109:13" pos:end="109:35"><expr pos:start="109:13" pos:end="109:34"><name pos:start="109:13" pos:end="109:15">fmt</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <name pos:start="109:19" pos:end="109:34"><name pos:start="109:19" pos:end="109:25">options</name><operator pos:start="109:26" pos:end="109:27">-&gt;</operator><name pos:start="109:28" pos:end="109:32">value</name><operator pos:start="109:33" pos:end="109:33">.</operator><name pos:start="109:34" pos:end="109:34">s</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="111:11" pos:end="115:9">else if <condition pos:start="111:19" pos:end="111:66">(<expr pos:start="111:20" pos:end="111:65"><operator pos:start="111:20" pos:end="111:20">!</operator><call pos:start="111:21" pos:end="111:65"><name pos:start="111:21" pos:end="111:26">strcmp</name><argument_list pos:start="111:27" pos:end="111:65">(<argument pos:start="111:28" pos:end="111:40"><expr pos:start="111:28" pos:end="111:40"><name pos:start="111:28" pos:end="111:40"><name pos:start="111:28" pos:end="111:34">options</name><operator pos:start="111:35" pos:end="111:36">-&gt;</operator><name pos:start="111:37" pos:end="111:40">name</name></name></expr></argument>, <argument pos:start="111:43" pos:end="111:64"><expr pos:start="111:43" pos:end="111:64"><name pos:start="111:43" pos:end="111:64">BLOCK_OPT_ZEROED_GRAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:68" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:45">

            <expr_stmt pos:start="113:13" pos:end="113:45"><expr pos:start="113:13" pos:end="113:44"><name pos:start="113:13" pos:end="113:24">zeroed_grain</name> <operator pos:start="113:26" pos:end="113:27">|=</operator> <name pos:start="113:29" pos:end="113:44"><name pos:start="113:29" pos:end="113:35">options</name><operator pos:start="113:36" pos:end="113:37">-&gt;</operator><name pos:start="113:38" pos:end="113:42">value</name><operator pos:start="113:43" pos:end="113:43">.</operator><name pos:start="113:44" pos:end="113:44">n</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:18"><expr pos:start="117:9" pos:end="117:17"><name pos:start="117:9" pos:end="117:15">options</name><operator pos:start="117:16" pos:end="117:17">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="121:5" pos:end="137:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:22">(<expr pos:start="121:9" pos:end="121:21"><operator pos:start="121:9" pos:end="121:9">!</operator><name pos:start="121:10" pos:end="121:21">adapter_type</name></expr>)</condition> <block pos:start="121:24" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:29">

        <expr_stmt pos:start="123:9" pos:end="123:29"><expr pos:start="123:9" pos:end="123:28"><name pos:start="123:9" pos:end="123:20">adapter_type</name> <operator pos:start="123:22" pos:end="123:22">=</operator> <literal type="string" pos:start="123:24" pos:end="123:28">"ide"</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="125:7" pos:end="137:5">else if <condition pos:start="125:15" pos:end="131:49">(<expr pos:start="125:16" pos:end="131:48"><call pos:start="125:16" pos:end="125:42"><name pos:start="125:16" pos:end="125:21">strcmp</name><argument_list pos:start="125:22" pos:end="125:42">(<argument pos:start="125:23" pos:end="125:34"><expr pos:start="125:23" pos:end="125:34"><name pos:start="125:23" pos:end="125:34">adapter_type</name></expr></argument>, <argument pos:start="125:37" pos:end="125:41"><expr pos:start="125:37" pos:end="125:41"><literal type="string" pos:start="125:37" pos:end="125:41">"ide"</literal></expr></argument>)</argument_list></call> <operator pos:start="125:44" pos:end="125:45">&amp;&amp;</operator>

               <call pos:start="127:16" pos:end="127:47"><name pos:start="127:16" pos:end="127:21">strcmp</name><argument_list pos:start="127:22" pos:end="127:47">(<argument pos:start="127:23" pos:end="127:34"><expr pos:start="127:23" pos:end="127:34"><name pos:start="127:23" pos:end="127:34">adapter_type</name></expr></argument>, <argument pos:start="127:37" pos:end="127:46"><expr pos:start="127:37" pos:end="127:46"><literal type="string" pos:start="127:37" pos:end="127:46">"buslogic"</literal></expr></argument>)</argument_list></call> <operator pos:start="127:49" pos:end="127:50">&amp;&amp;</operator>

               <call pos:start="129:16" pos:end="129:47"><name pos:start="129:16" pos:end="129:21">strcmp</name><argument_list pos:start="129:22" pos:end="129:47">(<argument pos:start="129:23" pos:end="129:34"><expr pos:start="129:23" pos:end="129:34"><name pos:start="129:23" pos:end="129:34">adapter_type</name></expr></argument>, <argument pos:start="129:37" pos:end="129:46"><expr pos:start="129:37" pos:end="129:46"><literal type="string" pos:start="129:37" pos:end="129:46">"lsilogic"</literal></expr></argument>)</argument_list></call> <operator pos:start="129:49" pos:end="129:50">&amp;&amp;</operator>

               <call pos:start="131:16" pos:end="131:48"><name pos:start="131:16" pos:end="131:21">strcmp</name><argument_list pos:start="131:22" pos:end="131:48">(<argument pos:start="131:23" pos:end="131:34"><expr pos:start="131:23" pos:end="131:34"><name pos:start="131:23" pos:end="131:34">adapter_type</name></expr></argument>, <argument pos:start="131:37" pos:end="131:47"><expr pos:start="131:37" pos:end="131:47"><literal type="string" pos:start="131:37" pos:end="131:47">"legacyESX"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:51" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:23">

        <expr_stmt pos:start="133:9" pos:end="133:69"><expr pos:start="133:9" pos:end="133:68"><call pos:start="133:9" pos:end="133:68"><name pos:start="133:9" pos:end="133:18">error_setg</name><argument_list pos:start="133:19" pos:end="133:68">(<argument pos:start="133:20" pos:end="133:23"><expr pos:start="133:20" pos:end="133:23"><name pos:start="133:20" pos:end="133:23">errp</name></expr></argument>, <argument pos:start="133:26" pos:end="133:53"><expr pos:start="133:26" pos:end="133:53"><literal type="string" pos:start="133:26" pos:end="133:53">"Unknown adapter type: '%s'"</literal></expr></argument>, <argument pos:start="133:56" pos:end="133:67"><expr pos:start="133:56" pos:end="133:67"><name pos:start="133:56" pos:end="133:67">adapter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="135:9" pos:end="135:23">return <expr pos:start="135:16" pos:end="135:22"><operator pos:start="135:16" pos:end="135:16">-</operator><name pos:start="135:17" pos:end="135:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="139:5" pos:end="147:5"><if pos:start="139:5" pos:end="147:5">if <condition pos:start="139:8" pos:end="139:41">(<expr pos:start="139:9" pos:end="139:40"><call pos:start="139:9" pos:end="139:35"><name pos:start="139:9" pos:end="139:14">strcmp</name><argument_list pos:start="139:15" pos:end="139:35">(<argument pos:start="139:16" pos:end="139:27"><expr pos:start="139:16" pos:end="139:27"><name pos:start="139:16" pos:end="139:27">adapter_type</name></expr></argument>, <argument pos:start="139:30" pos:end="139:34"><expr pos:start="139:30" pos:end="139:34"><literal type="string" pos:start="139:30" pos:end="139:34">"ide"</literal></expr></argument>)</argument_list></call> <operator pos:start="139:37" pos:end="139:38">!=</operator> <literal type="number" pos:start="139:40" pos:end="139:40">0</literal></expr>)</condition> <block pos:start="139:43" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:27">

        <comment type="block" pos:start="141:9" pos:end="143:78">/* that's the number of heads with which vmware operates when

           creating, exporting, etc. vmdk files with a non-ide adapter type */</comment>

        <expr_stmt pos:start="145:9" pos:end="145:27"><expr pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:20">number_heads</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <literal type="number" pos:start="145:24" pos:end="145:26">255</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="149:5" pos:end="169:5"><if pos:start="149:5" pos:end="155:5">if <condition pos:start="149:8" pos:end="149:13">(<expr pos:start="149:9" pos:end="149:12"><operator pos:start="149:9" pos:end="149:9">!</operator><name pos:start="149:10" pos:end="149:12">fmt</name></expr>)</condition> <block pos:start="149:15" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:33">

        <comment type="block" pos:start="151:9" pos:end="151:48">/* Default format to monolithicSparse */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:33"><expr pos:start="153:9" pos:end="153:32"><name pos:start="153:9" pos:end="153:11">fmt</name> <operator pos:start="153:13" pos:end="153:13">=</operator> <literal type="string" pos:start="153:15" pos:end="153:32">"monolithicSparse"</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="155:7" pos:end="169:5">else if <condition pos:start="155:15" pos:end="163:46">(<expr pos:start="155:16" pos:end="163:45"><call pos:start="155:16" pos:end="155:44"><name pos:start="155:16" pos:end="155:21">strcmp</name><argument_list pos:start="155:22" pos:end="155:44">(<argument pos:start="155:23" pos:end="155:25"><expr pos:start="155:23" pos:end="155:25"><name pos:start="155:23" pos:end="155:25">fmt</name></expr></argument>, <argument pos:start="155:28" pos:end="155:43"><expr pos:start="155:28" pos:end="155:43"><literal type="string" pos:start="155:28" pos:end="155:43">"monolithicFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="155:46" pos:end="155:47">&amp;&amp;</operator>

               <call pos:start="157:16" pos:end="157:46"><name pos:start="157:16" pos:end="157:21">strcmp</name><argument_list pos:start="157:22" pos:end="157:46">(<argument pos:start="157:23" pos:end="157:25"><expr pos:start="157:23" pos:end="157:25"><name pos:start="157:23" pos:end="157:25">fmt</name></expr></argument>, <argument pos:start="157:28" pos:end="157:45"><expr pos:start="157:28" pos:end="157:45"><literal type="string" pos:start="157:28" pos:end="157:45">"monolithicSparse"</literal></expr></argument>)</argument_list></call> <operator pos:start="157:48" pos:end="157:49">&amp;&amp;</operator>

               <call pos:start="159:16" pos:end="159:50"><name pos:start="159:16" pos:end="159:21">strcmp</name><argument_list pos:start="159:22" pos:end="159:50">(<argument pos:start="159:23" pos:end="159:25"><expr pos:start="159:23" pos:end="159:25"><name pos:start="159:23" pos:end="159:25">fmt</name></expr></argument>, <argument pos:start="159:28" pos:end="159:49"><expr pos:start="159:28" pos:end="159:49"><literal type="string" pos:start="159:28" pos:end="159:49">"twoGbMaxExtentSparse"</literal></expr></argument>)</argument_list></call> <operator pos:start="159:52" pos:end="159:53">&amp;&amp;</operator>

               <call pos:start="161:16" pos:end="161:48"><name pos:start="161:16" pos:end="161:21">strcmp</name><argument_list pos:start="161:22" pos:end="161:48">(<argument pos:start="161:23" pos:end="161:25"><expr pos:start="161:23" pos:end="161:25"><name pos:start="161:23" pos:end="161:25">fmt</name></expr></argument>, <argument pos:start="161:28" pos:end="161:47"><expr pos:start="161:28" pos:end="161:47"><literal type="string" pos:start="161:28" pos:end="161:47">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="161:50" pos:end="161:51">&amp;&amp;</operator>

               <call pos:start="163:16" pos:end="163:45"><name pos:start="163:16" pos:end="163:21">strcmp</name><argument_list pos:start="163:22" pos:end="163:45">(<argument pos:start="163:23" pos:end="163:25"><expr pos:start="163:23" pos:end="163:25"><name pos:start="163:23" pos:end="163:25">fmt</name></expr></argument>, <argument pos:start="163:28" pos:end="163:44"><expr pos:start="163:28" pos:end="163:44"><literal type="string" pos:start="163:28" pos:end="163:44">"streamOptimized"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="163:48" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:23">

        <expr_stmt pos:start="165:9" pos:end="165:57"><expr pos:start="165:9" pos:end="165:56"><call pos:start="165:9" pos:end="165:56"><name pos:start="165:9" pos:end="165:18">error_setg</name><argument_list pos:start="165:19" pos:end="165:56">(<argument pos:start="165:20" pos:end="165:23"><expr pos:start="165:20" pos:end="165:23"><name pos:start="165:20" pos:end="165:23">errp</name></expr></argument>, <argument pos:start="165:26" pos:end="165:50"><expr pos:start="165:26" pos:end="165:50"><literal type="string" pos:start="165:26" pos:end="165:50">"Unknown subformat: '%s'"</literal></expr></argument>, <argument pos:start="165:53" pos:end="165:55"><expr pos:start="165:53" pos:end="165:55"><name pos:start="165:53" pos:end="165:55">fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="167:9" pos:end="167:23">return <expr pos:start="167:16" pos:end="167:22"><operator pos:start="167:16" pos:end="167:16">-</operator><name pos:start="167:17" pos:end="167:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="171:5" pos:end="173:51"><expr pos:start="171:5" pos:end="173:50"><name pos:start="171:5" pos:end="171:9">split</name> <operator pos:start="171:11" pos:end="171:11">=</operator> <operator pos:start="171:13" pos:end="171:13">!</operator><operator pos:start="171:14" pos:end="171:14">(</operator><call pos:start="171:15" pos:end="171:47"><name pos:start="171:15" pos:end="171:20">strcmp</name><argument_list pos:start="171:21" pos:end="171:47">(<argument pos:start="171:22" pos:end="171:24"><expr pos:start="171:22" pos:end="171:24"><name pos:start="171:22" pos:end="171:24">fmt</name></expr></argument>, <argument pos:start="171:27" pos:end="171:46"><expr pos:start="171:27" pos:end="171:46"><literal type="string" pos:start="171:27" pos:end="171:46">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="171:49" pos:end="171:50">&amp;&amp;</operator>

              <call pos:start="173:15" pos:end="173:49"><name pos:start="173:15" pos:end="173:20">strcmp</name><argument_list pos:start="173:21" pos:end="173:49">(<argument pos:start="173:22" pos:end="173:24"><expr pos:start="173:22" pos:end="173:24"><name pos:start="173:22" pos:end="173:24">fmt</name></expr></argument>, <argument pos:start="173:27" pos:end="173:48"><expr pos:start="173:27" pos:end="173:48"><literal type="string" pos:start="173:27" pos:end="173:48">"twoGbMaxExtentSparse"</literal></expr></argument>)</argument_list></call><operator pos:start="173:50" pos:end="173:50">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="177:48"><expr pos:start="175:5" pos:end="177:47"><name pos:start="175:5" pos:end="175:8">flat</name> <operator pos:start="175:10" pos:end="175:10">=</operator> <operator pos:start="175:12" pos:end="175:12">!</operator><operator pos:start="175:13" pos:end="175:13">(</operator><call pos:start="175:14" pos:end="175:42"><name pos:start="175:14" pos:end="175:19">strcmp</name><argument_list pos:start="175:20" pos:end="175:42">(<argument pos:start="175:21" pos:end="175:23"><expr pos:start="175:21" pos:end="175:23"><name pos:start="175:21" pos:end="175:23">fmt</name></expr></argument>, <argument pos:start="175:26" pos:end="175:41"><expr pos:start="175:26" pos:end="175:41"><literal type="string" pos:start="175:26" pos:end="175:41">"monolithicFlat"</literal></expr></argument>)</argument_list></call> <operator pos:start="175:44" pos:end="175:45">&amp;&amp;</operator>

             <call pos:start="177:14" pos:end="177:46"><name pos:start="177:14" pos:end="177:19">strcmp</name><argument_list pos:start="177:20" pos:end="177:46">(<argument pos:start="177:21" pos:end="177:23"><expr pos:start="177:21" pos:end="177:23"><name pos:start="177:21" pos:end="177:23">fmt</name></expr></argument>, <argument pos:start="177:26" pos:end="177:45"><expr pos:start="177:26" pos:end="177:45"><literal type="string" pos:start="177:26" pos:end="177:45">"twoGbMaxExtentFlat"</literal></expr></argument>)</argument_list></call><operator pos:start="177:47" pos:end="177:47">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:47"><expr pos:start="179:5" pos:end="179:46"><name pos:start="179:5" pos:end="179:12">compress</name> <operator pos:start="179:14" pos:end="179:14">=</operator> <operator pos:start="179:16" pos:end="179:16">!</operator><call pos:start="179:17" pos:end="179:46"><name pos:start="179:17" pos:end="179:22">strcmp</name><argument_list pos:start="179:23" pos:end="179:46">(<argument pos:start="179:24" pos:end="179:26"><expr pos:start="179:24" pos:end="179:26"><name pos:start="179:24" pos:end="179:26">fmt</name></expr></argument>, <argument pos:start="179:29" pos:end="179:45"><expr pos:start="179:29" pos:end="179:45"><literal type="string" pos:start="179:29" pos:end="179:45">"streamOptimized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="181:5" pos:end="189:5"><if pos:start="181:5" pos:end="185:5">if <condition pos:start="181:8" pos:end="181:13">(<expr pos:start="181:9" pos:end="181:12"><name pos:start="181:9" pos:end="181:12">flat</name></expr>)</condition> <block pos:start="181:15" pos:end="185:5">{<block_content pos:start="183:9" pos:end="183:53">

        <expr_stmt pos:start="183:9" pos:end="183:53"><expr pos:start="183:9" pos:end="183:52"><name pos:start="183:9" pos:end="183:24">desc_extent_line</name> <operator pos:start="183:26" pos:end="183:26">=</operator> <literal type="string" pos:start="183:28" pos:end="183:52">"RW %lld FLAT \"%s\" 0\n"</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="185:7" pos:end="189:5">else <block pos:start="185:12" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:53">

        <expr_stmt pos:start="187:9" pos:end="187:53"><expr pos:start="187:9" pos:end="187:52"><name pos:start="187:9" pos:end="187:24">desc_extent_line</name> <operator pos:start="187:26" pos:end="187:26">=</operator> <literal type="string" pos:start="187:28" pos:end="187:52">"RW %lld SPARSE \"%s\"\n"</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="191:5" pos:end="197:5"><if pos:start="191:5" pos:end="197:5">if <condition pos:start="191:8" pos:end="191:29">(<expr pos:start="191:9" pos:end="191:28"><name pos:start="191:9" pos:end="191:12">flat</name> <operator pos:start="191:14" pos:end="191:15">&amp;&amp;</operator> <name pos:start="191:17" pos:end="191:28">backing_file</name></expr>)</condition> <block pos:start="191:31" pos:end="197:5">{<block_content pos:start="193:9" pos:end="195:24">

        <expr_stmt pos:start="193:9" pos:end="193:63"><expr pos:start="193:9" pos:end="193:62"><call pos:start="193:9" pos:end="193:62"><name pos:start="193:9" pos:end="193:18">error_setg</name><argument_list pos:start="193:19" pos:end="193:62">(<argument pos:start="193:20" pos:end="193:23"><expr pos:start="193:20" pos:end="193:23"><name pos:start="193:20" pos:end="193:23">errp</name></expr></argument>, <argument pos:start="193:26" pos:end="193:61"><expr pos:start="193:26" pos:end="193:61"><literal type="string" pos:start="193:26" pos:end="193:61">"Flat image can't have backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="195:9" pos:end="195:24">return <expr pos:start="195:16" pos:end="195:23"><operator pos:start="195:16" pos:end="195:16">-</operator><name pos:start="195:17" pos:end="195:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="199:5" pos:end="205:5"><if pos:start="199:5" pos:end="205:5">if <condition pos:start="199:8" pos:end="199:29">(<expr pos:start="199:9" pos:end="199:28"><name pos:start="199:9" pos:end="199:12">flat</name> <operator pos:start="199:14" pos:end="199:15">&amp;&amp;</operator> <name pos:start="199:17" pos:end="199:28">zeroed_grain</name></expr>)</condition> <block pos:start="199:31" pos:end="205:5">{<block_content pos:start="201:9" pos:end="203:24">

        <expr_stmt pos:start="201:9" pos:end="201:65"><expr pos:start="201:9" pos:end="201:64"><call pos:start="201:9" pos:end="201:64"><name pos:start="201:9" pos:end="201:18">error_setg</name><argument_list pos:start="201:19" pos:end="201:64">(<argument pos:start="201:20" pos:end="201:23"><expr pos:start="201:20" pos:end="201:23"><name pos:start="201:20" pos:end="201:23">errp</name></expr></argument>, <argument pos:start="201:26" pos:end="201:63"><expr pos:start="201:26" pos:end="201:63"><literal type="string" pos:start="201:26" pos:end="201:63">"Flat image can't enable zeroed grain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="203:9" pos:end="203:24">return <expr pos:start="203:16" pos:end="203:23"><operator pos:start="203:16" pos:end="203:16">-</operator><name pos:start="203:17" pos:end="203:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="207:5" pos:end="237:5"><if pos:start="207:5" pos:end="237:5">if <condition pos:start="207:8" pos:end="207:21">(<expr pos:start="207:9" pos:end="207:20"><name pos:start="207:9" pos:end="207:20">backing_file</name></expr>)</condition> <block pos:start="207:23" pos:end="237:5">{<block_content pos:start="209:9" pos:end="235:59">

        <decl_stmt pos:start="209:9" pos:end="209:44"><decl pos:start="209:9" pos:end="209:43"><type pos:start="209:9" pos:end="209:26"><name pos:start="209:9" pos:end="209:24">BlockDriverState</name> <modifier pos:start="209:26" pos:end="209:26">*</modifier></type><name pos:start="209:27" pos:end="209:28">bs</name> <init pos:start="209:30" pos:end="209:43">= <expr pos:start="209:32" pos:end="209:43"><call pos:start="209:32" pos:end="209:43"><name pos:start="209:32" pos:end="209:39">bdrv_new</name><argument_list pos:start="209:40" pos:end="209:43">(<argument pos:start="209:41" pos:end="209:42"><expr pos:start="209:41" pos:end="209:42"><literal type="string" pos:start="209:41" pos:end="209:42">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:63"><expr pos:start="211:9" pos:end="211:62"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <call pos:start="211:15" pos:end="211:62"><name pos:start="211:15" pos:end="211:23">bdrv_open</name><argument_list pos:start="211:24" pos:end="211:62">(<argument pos:start="211:25" pos:end="211:26"><expr pos:start="211:25" pos:end="211:26"><name pos:start="211:25" pos:end="211:26">bs</name></expr></argument>, <argument pos:start="211:29" pos:end="211:40"><expr pos:start="211:29" pos:end="211:40"><name pos:start="211:29" pos:end="211:40">backing_file</name></expr></argument>, <argument pos:start="211:43" pos:end="211:46"><expr pos:start="211:43" pos:end="211:46"><name pos:start="211:43" pos:end="211:46">NULL</name></expr></argument>, <argument pos:start="211:49" pos:end="211:49"><expr pos:start="211:49" pos:end="211:49"><literal type="number" pos:start="211:49" pos:end="211:49">0</literal></expr></argument>, <argument pos:start="211:52" pos:end="211:55"><expr pos:start="211:52" pos:end="211:55"><name pos:start="211:52" pos:end="211:55">NULL</name></expr></argument>, <argument pos:start="211:58" pos:end="211:61"><expr pos:start="211:58" pos:end="211:61"><name pos:start="211:58" pos:end="211:61">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="219:9"><if pos:start="213:9" pos:end="219:9">if <condition pos:start="213:12" pos:end="213:21">(<expr pos:start="213:13" pos:end="213:20"><name pos:start="213:13" pos:end="213:15">ret</name> <operator pos:start="213:17" pos:end="213:18">!=</operator> <literal type="number" pos:start="213:20" pos:end="213:20">0</literal></expr>)</condition> <block pos:start="213:23" pos:end="219:9">{<block_content pos:start="215:13" pos:end="217:23">

            <expr_stmt pos:start="215:13" pos:end="215:27"><expr pos:start="215:13" pos:end="215:26"><call pos:start="215:13" pos:end="215:26"><name pos:start="215:13" pos:end="215:22">bdrv_unref</name><argument_list pos:start="215:23" pos:end="215:26">(<argument pos:start="215:24" pos:end="215:25"><expr pos:start="215:24" pos:end="215:25"><name pos:start="215:24" pos:end="215:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="217:13" pos:end="217:23">return <expr pos:start="217:20" pos:end="217:22"><name pos:start="217:20" pos:end="217:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="221:9" pos:end="227:9"><if pos:start="221:9" pos:end="227:9">if <condition pos:start="221:12" pos:end="221:49">(<expr pos:start="221:13" pos:end="221:48"><call pos:start="221:13" pos:end="221:48"><name pos:start="221:13" pos:end="221:18">strcmp</name><argument_list pos:start="221:19" pos:end="221:48">(<argument pos:start="221:20" pos:end="221:39"><expr pos:start="221:20" pos:end="221:39"><name pos:start="221:20" pos:end="221:39"><name pos:start="221:20" pos:end="221:21">bs</name><operator pos:start="221:22" pos:end="221:23">-&gt;</operator><name pos:start="221:24" pos:end="221:26">drv</name><operator pos:start="221:27" pos:end="221:28">-&gt;</operator><name pos:start="221:29" pos:end="221:39">format_name</name></name></expr></argument>, <argument pos:start="221:42" pos:end="221:47"><expr pos:start="221:42" pos:end="221:47"><literal type="string" pos:start="221:42" pos:end="221:47">"vmdk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="221:51" pos:end="227:9">{<block_content pos:start="223:13" pos:end="225:27">

            <expr_stmt pos:start="223:13" pos:end="223:27"><expr pos:start="223:13" pos:end="223:26"><call pos:start="223:13" pos:end="223:26"><name pos:start="223:13" pos:end="223:22">bdrv_unref</name><argument_list pos:start="223:23" pos:end="223:26">(<argument pos:start="223:24" pos:end="223:25"><expr pos:start="223:24" pos:end="223:25"><name pos:start="223:24" pos:end="223:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="225:13" pos:end="225:27">return <expr pos:start="225:20" pos:end="225:26"><operator pos:start="225:20" pos:end="225:20">-</operator><name pos:start="225:21" pos:end="225:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:42"><expr pos:start="229:9" pos:end="229:41"><name pos:start="229:9" pos:end="229:18">parent_cid</name> <operator pos:start="229:20" pos:end="229:20">=</operator> <call pos:start="229:22" pos:end="229:41"><name pos:start="229:22" pos:end="229:34">vmdk_read_cid</name><argument_list pos:start="229:35" pos:end="229:41">(<argument pos:start="229:36" pos:end="229:37"><expr pos:start="229:36" pos:end="229:37"><name pos:start="229:36" pos:end="229:37">bs</name></expr></argument>, <argument pos:start="229:40" pos:end="229:40"><expr pos:start="229:40" pos:end="229:40"><literal type="number" pos:start="229:40" pos:end="229:40">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:23"><expr pos:start="231:9" pos:end="231:22"><call pos:start="231:9" pos:end="231:22"><name pos:start="231:9" pos:end="231:18">bdrv_unref</name><argument_list pos:start="231:19" pos:end="231:22">(<argument pos:start="231:20" pos:end="231:21"><expr pos:start="231:20" pos:end="231:21"><name pos:start="231:20" pos:end="231:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="235:59"><expr pos:start="233:9" pos:end="235:58"><call pos:start="233:9" pos:end="235:58"><name pos:start="233:9" pos:end="233:16">snprintf</name><argument_list pos:start="233:17" pos:end="235:58">(<argument pos:start="233:18" pos:end="233:33"><expr pos:start="233:18" pos:end="233:33"><name pos:start="233:18" pos:end="233:33">parent_desc_line</name></expr></argument>, <argument pos:start="233:36" pos:end="233:59"><expr pos:start="233:36" pos:end="233:59"><sizeof pos:start="233:36" pos:end="233:59">sizeof<argument_list pos:start="233:42" pos:end="233:59">(<argument pos:start="233:43" pos:end="233:58"><expr pos:start="233:43" pos:end="233:58"><name pos:start="233:43" pos:end="233:58">parent_desc_line</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                <argument pos:start="235:17" pos:end="235:43"><expr pos:start="235:17" pos:end="235:43"><literal type="string" pos:start="235:17" pos:end="235:43">"parentFileNameHint=\"%s\""</literal></expr></argument>, <argument pos:start="235:46" pos:end="235:57"><expr pos:start="235:46" pos:end="235:57"><name pos:start="235:46" pos:end="235:57">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="241:5" pos:end="241:24">/* Create extents */</comment>

    <expr_stmt pos:start="243:5" pos:end="243:26"><expr pos:start="243:5" pos:end="243:25"><name pos:start="243:5" pos:end="243:12">filesize</name> <operator pos:start="243:14" pos:end="243:14">=</operator> <name pos:start="243:16" pos:end="243:25">total_size</name></expr>;</expr_stmt>

    <while pos:start="245:5" pos:end="309:5">while <condition pos:start="245:11" pos:end="245:24">(<expr pos:start="245:12" pos:end="245:23"><name pos:start="245:12" pos:end="245:19">filesize</name> <operator pos:start="245:21" pos:end="245:21">&gt;</operator> <literal type="number" pos:start="245:23" pos:end="245:23">0</literal></expr>)</condition> <block pos:start="245:26" pos:end="309:5">{<block_content pos:start="247:9" pos:end="307:67">

        <decl_stmt pos:start="247:9" pos:end="247:33"><decl pos:start="247:9" pos:end="247:32"><type pos:start="247:9" pos:end="247:12"><name pos:start="247:9" pos:end="247:12">char</name></type> <name pos:start="247:14" pos:end="247:32"><name pos:start="247:14" pos:end="247:22">desc_line</name><index pos:start="247:23" pos:end="247:32">[<expr pos:start="247:24" pos:end="247:31"><name pos:start="247:24" pos:end="247:31">BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="249:9" pos:end="249:36"><decl pos:start="249:9" pos:end="249:35"><type pos:start="249:9" pos:end="249:12"><name pos:start="249:9" pos:end="249:12">char</name></type> <name pos:start="249:14" pos:end="249:35"><name pos:start="249:14" pos:end="249:25">ext_filename</name><index pos:start="249:26" pos:end="249:35">[<expr pos:start="249:27" pos:end="249:34"><name pos:start="249:27" pos:end="249:34">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="251:9" pos:end="251:37"><decl pos:start="251:9" pos:end="251:36"><type pos:start="251:9" pos:end="251:12"><name pos:start="251:9" pos:end="251:12">char</name></type> <name pos:start="251:14" pos:end="251:36"><name pos:start="251:14" pos:end="251:26">desc_filename</name><index pos:start="251:27" pos:end="251:36">[<expr pos:start="251:28" pos:end="251:35"><name pos:start="251:28" pos:end="251:35">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="253:9" pos:end="253:32"><decl pos:start="253:9" pos:end="253:31"><type pos:start="253:9" pos:end="253:15"><name pos:start="253:9" pos:end="253:15">int64_t</name></type> <name pos:start="253:17" pos:end="253:20">size</name> <init pos:start="253:22" pos:end="253:31">= <expr pos:start="253:24" pos:end="253:31"><name pos:start="253:24" pos:end="253:31">filesize</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="257:9" pos:end="261:9"><if pos:start="257:9" pos:end="261:9">if <condition pos:start="257:12" pos:end="257:39">(<expr pos:start="257:13" pos:end="257:38"><name pos:start="257:13" pos:end="257:17">split</name> <operator pos:start="257:19" pos:end="257:20">&amp;&amp;</operator> <name pos:start="257:22" pos:end="257:25">size</name> <operator pos:start="257:27" pos:end="257:27">&gt;</operator> <name pos:start="257:29" pos:end="257:38">split_size</name></expr>)</condition> <block pos:start="257:41" pos:end="261:9">{<block_content pos:start="259:13" pos:end="259:30">

            <expr_stmt pos:start="259:13" pos:end="259:30"><expr pos:start="259:13" pos:end="259:29"><name pos:start="259:13" pos:end="259:16">size</name> <operator pos:start="259:18" pos:end="259:18">=</operator> <name pos:start="259:20" pos:end="259:29">split_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="263:9" pos:end="281:9"><if pos:start="263:9" pos:end="269:9">if <condition pos:start="263:12" pos:end="263:18">(<expr pos:start="263:13" pos:end="263:17"><name pos:start="263:13" pos:end="263:17">split</name></expr>)</condition> <block pos:start="263:20" pos:end="269:9">{<block_content pos:start="265:13" pos:end="267:62">

            <expr_stmt pos:start="265:13" pos:end="267:62"><expr pos:start="265:13" pos:end="267:61"><call pos:start="265:13" pos:end="267:61"><name pos:start="265:13" pos:end="265:20">snprintf</name><argument_list pos:start="265:21" pos:end="267:61">(<argument pos:start="265:22" pos:end="265:34"><expr pos:start="265:22" pos:end="265:34"><name pos:start="265:22" pos:end="265:34">desc_filename</name></expr></argument>, <argument pos:start="265:37" pos:end="265:57"><expr pos:start="265:37" pos:end="265:57"><sizeof pos:start="265:37" pos:end="265:57">sizeof<argument_list pos:start="265:43" pos:end="265:57">(<argument pos:start="265:44" pos:end="265:56"><expr pos:start="265:44" pos:end="265:56"><name pos:start="265:44" pos:end="265:56">desc_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="265:60" pos:end="265:72"><expr pos:start="265:60" pos:end="265:72"><literal type="string" pos:start="265:60" pos:end="265:72">"%s-%c%03d%s"</literal></expr></argument>,

                    <argument pos:start="267:21" pos:end="267:26"><expr pos:start="267:21" pos:end="267:26"><name pos:start="267:21" pos:end="267:26">prefix</name></expr></argument>, <argument pos:start="267:29" pos:end="267:44"><expr pos:start="267:29" pos:end="267:44"><ternary pos:start="267:29" pos:end="267:44"><condition pos:start="267:29" pos:end="267:34"><expr pos:start="267:29" pos:end="267:32"><name pos:start="267:29" pos:end="267:32">flat</name></expr> ?</condition><then pos:start="267:36" pos:end="267:38"> <expr pos:start="267:36" pos:end="267:38"><literal type="char" pos:start="267:36" pos:end="267:38">'f'</literal></expr> </then><else pos:start="267:40" pos:end="267:44">: <expr pos:start="267:42" pos:end="267:44"><literal type="char" pos:start="267:42" pos:end="267:44">'s'</literal></expr></else></ternary></expr></argument>, <argument pos:start="267:47" pos:end="267:51"><expr pos:start="267:47" pos:end="267:51"><operator pos:start="267:47" pos:end="267:48">++</operator><name pos:start="267:49" pos:end="267:51">idx</name></expr></argument>, <argument pos:start="267:54" pos:end="267:60"><expr pos:start="267:54" pos:end="267:60"><name pos:start="267:54" pos:end="267:60">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="269:11" pos:end="275:9">else if <condition pos:start="269:19" pos:end="269:24">(<expr pos:start="269:20" pos:end="269:23"><name pos:start="269:20" pos:end="269:23">flat</name></expr>)</condition> <block pos:start="269:26" pos:end="275:9">{<block_content pos:start="271:13" pos:end="273:37">

            <expr_stmt pos:start="271:13" pos:end="273:37"><expr pos:start="271:13" pos:end="273:36"><call pos:start="271:13" pos:end="273:36"><name pos:start="271:13" pos:end="271:20">snprintf</name><argument_list pos:start="271:21" pos:end="273:36">(<argument pos:start="271:22" pos:end="271:34"><expr pos:start="271:22" pos:end="271:34"><name pos:start="271:22" pos:end="271:34">desc_filename</name></expr></argument>, <argument pos:start="271:37" pos:end="271:57"><expr pos:start="271:37" pos:end="271:57"><sizeof pos:start="271:37" pos:end="271:57">sizeof<argument_list pos:start="271:43" pos:end="271:57">(<argument pos:start="271:44" pos:end="271:56"><expr pos:start="271:44" pos:end="271:56"><name pos:start="271:44" pos:end="271:56">desc_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="271:60" pos:end="271:70"><expr pos:start="271:60" pos:end="271:70"><literal type="string" pos:start="271:60" pos:end="271:70">"%s-flat%s"</literal></expr></argument>,

                    <argument pos:start="273:21" pos:end="273:26"><expr pos:start="273:21" pos:end="273:26"><name pos:start="273:21" pos:end="273:26">prefix</name></expr></argument>, <argument pos:start="273:29" pos:end="273:35"><expr pos:start="273:29" pos:end="273:35"><name pos:start="273:29" pos:end="273:35">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="275:11" pos:end="281:9">else <block pos:start="275:16" pos:end="281:9">{<block_content pos:start="277:13" pos:end="279:37">

            <expr_stmt pos:start="277:13" pos:end="279:37"><expr pos:start="277:13" pos:end="279:36"><call pos:start="277:13" pos:end="279:36"><name pos:start="277:13" pos:end="277:20">snprintf</name><argument_list pos:start="277:21" pos:end="279:36">(<argument pos:start="277:22" pos:end="277:34"><expr pos:start="277:22" pos:end="277:34"><name pos:start="277:22" pos:end="277:34">desc_filename</name></expr></argument>, <argument pos:start="277:37" pos:end="277:57"><expr pos:start="277:37" pos:end="277:57"><sizeof pos:start="277:37" pos:end="277:57">sizeof<argument_list pos:start="277:43" pos:end="277:57">(<argument pos:start="277:44" pos:end="277:56"><expr pos:start="277:44" pos:end="277:56"><name pos:start="277:44" pos:end="277:56">desc_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="277:60" pos:end="277:65"><expr pos:start="277:60" pos:end="277:65"><literal type="string" pos:start="277:60" pos:end="277:65">"%s%s"</literal></expr></argument>,

                    <argument pos:start="279:21" pos:end="279:26"><expr pos:start="279:21" pos:end="279:26"><name pos:start="279:21" pos:end="279:26">prefix</name></expr></argument>, <argument pos:start="279:29" pos:end="279:35"><expr pos:start="279:29" pos:end="279:35"><name pos:start="279:29" pos:end="279:35">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="283:9" pos:end="285:37"><expr pos:start="283:9" pos:end="285:36"><call pos:start="283:9" pos:end="285:36"><name pos:start="283:9" pos:end="283:16">snprintf</name><argument_list pos:start="283:17" pos:end="285:36">(<argument pos:start="283:18" pos:end="283:29"><expr pos:start="283:18" pos:end="283:29"><name pos:start="283:18" pos:end="283:29">ext_filename</name></expr></argument>, <argument pos:start="283:32" pos:end="283:51"><expr pos:start="283:32" pos:end="283:51"><sizeof pos:start="283:32" pos:end="283:51">sizeof<argument_list pos:start="283:38" pos:end="283:51">(<argument pos:start="283:39" pos:end="283:50"><expr pos:start="283:39" pos:end="283:50"><name pos:start="283:39" pos:end="283:50">ext_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="283:54" pos:end="283:59"><expr pos:start="283:54" pos:end="283:59"><literal type="string" pos:start="283:54" pos:end="283:59">"%s%s"</literal></expr></argument>,

                <argument pos:start="285:17" pos:end="285:20"><expr pos:start="285:17" pos:end="285:20"><name pos:start="285:17" pos:end="285:20">path</name></expr></argument>, <argument pos:start="285:23" pos:end="285:35"><expr pos:start="285:23" pos:end="285:35"><name pos:start="285:23" pos:end="285:35">desc_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="289:9" pos:end="295:9"><if pos:start="289:9" pos:end="295:9">if <condition pos:start="289:12" pos:end="291:61">(<expr pos:start="289:13" pos:end="291:60"><call pos:start="289:13" pos:end="291:60"><name pos:start="289:13" pos:end="289:30">vmdk_create_extent</name><argument_list pos:start="289:31" pos:end="291:60">(<argument pos:start="289:32" pos:end="289:43"><expr pos:start="289:32" pos:end="289:43"><name pos:start="289:32" pos:end="289:43">ext_filename</name></expr></argument>, <argument pos:start="289:46" pos:end="289:49"><expr pos:start="289:46" pos:end="289:49"><name pos:start="289:46" pos:end="289:49">size</name></expr></argument>,

                               <argument pos:start="291:32" pos:end="291:35"><expr pos:start="291:32" pos:end="291:35"><name pos:start="291:32" pos:end="291:35">flat</name></expr></argument>, <argument pos:start="291:38" pos:end="291:45"><expr pos:start="291:38" pos:end="291:45"><name pos:start="291:38" pos:end="291:45">compress</name></expr></argument>, <argument pos:start="291:48" pos:end="291:59"><expr pos:start="291:48" pos:end="291:59"><name pos:start="291:48" pos:end="291:59">zeroed_grain</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="291:63" pos:end="295:9">{<block_content pos:start="293:13" pos:end="293:27">

            <return pos:start="293:13" pos:end="293:27">return <expr pos:start="293:20" pos:end="293:26"><operator pos:start="293:20" pos:end="293:20">-</operator><name pos:start="293:21" pos:end="293:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:25"><expr pos:start="297:9" pos:end="297:24"><name pos:start="297:9" pos:end="297:16">filesize</name> <operator pos:start="297:18" pos:end="297:19">-=</operator> <name pos:start="297:21" pos:end="297:24">size</name></expr>;</expr_stmt>



        <comment type="block" pos:start="301:9" pos:end="301:37">/* Format description line */</comment>

        <expr_stmt pos:start="303:9" pos:end="305:65"><expr pos:start="303:9" pos:end="305:64"><call pos:start="303:9" pos:end="305:64"><name pos:start="303:9" pos:end="303:16">snprintf</name><argument_list pos:start="303:17" pos:end="305:64">(<argument pos:start="303:18" pos:end="303:26"><expr pos:start="303:18" pos:end="303:26"><name pos:start="303:18" pos:end="303:26">desc_line</name></expr></argument>, <argument pos:start="303:29" pos:end="303:45"><expr pos:start="303:29" pos:end="303:45"><sizeof pos:start="303:29" pos:end="303:45">sizeof<argument_list pos:start="303:35" pos:end="303:45">(<argument pos:start="303:36" pos:end="303:44"><expr pos:start="303:36" pos:end="303:44"><name pos:start="303:36" pos:end="303:44">desc_line</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                    <argument pos:start="305:21" pos:end="305:36"><expr pos:start="305:21" pos:end="305:36"><name pos:start="305:21" pos:end="305:36">desc_extent_line</name></expr></argument>, <argument pos:start="305:39" pos:end="305:48"><expr pos:start="305:39" pos:end="305:48"><name pos:start="305:39" pos:end="305:42">size</name> <operator pos:start="305:44" pos:end="305:44">/</operator> <literal type="number" pos:start="305:46" pos:end="305:48">512</literal></expr></argument>, <argument pos:start="305:51" pos:end="305:63"><expr pos:start="305:51" pos:end="305:63"><name pos:start="305:51" pos:end="305:63">desc_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:67"><expr pos:start="307:9" pos:end="307:66"><call pos:start="307:9" pos:end="307:66"><name pos:start="307:9" pos:end="307:15">pstrcat</name><argument_list pos:start="307:16" pos:end="307:66">(<argument pos:start="307:17" pos:end="307:30"><expr pos:start="307:17" pos:end="307:30"><name pos:start="307:17" pos:end="307:30">ext_desc_lines</name></expr></argument>, <argument pos:start="307:33" pos:end="307:54"><expr pos:start="307:33" pos:end="307:54"><sizeof pos:start="307:33" pos:end="307:54">sizeof<argument_list pos:start="307:39" pos:end="307:54">(<argument pos:start="307:40" pos:end="307:53"><expr pos:start="307:40" pos:end="307:53"><name pos:start="307:40" pos:end="307:53">ext_desc_lines</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="307:57" pos:end="307:65"><expr pos:start="307:57" pos:end="307:65"><name pos:start="307:57" pos:end="307:65">desc_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <comment type="block" pos:start="311:5" pos:end="311:34">/* generate descriptor file */</comment>

    <expr_stmt pos:start="313:5" pos:end="329:30"><expr pos:start="313:5" pos:end="329:29"><call pos:start="313:5" pos:end="329:29"><name pos:start="313:5" pos:end="313:12">snprintf</name><argument_list pos:start="313:13" pos:end="329:29">(<argument pos:start="313:14" pos:end="313:17"><expr pos:start="313:14" pos:end="313:17"><name pos:start="313:14" pos:end="313:17">desc</name></expr></argument>, <argument pos:start="313:20" pos:end="313:31"><expr pos:start="313:20" pos:end="313:31"><sizeof pos:start="313:20" pos:end="313:31">sizeof<argument_list pos:start="313:26" pos:end="313:31">(<argument pos:start="313:27" pos:end="313:30"><expr pos:start="313:27" pos:end="313:30"><name pos:start="313:27" pos:end="313:30">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="313:34" pos:end="313:46"><expr pos:start="313:34" pos:end="313:46"><name pos:start="313:34" pos:end="313:46">desc_template</name></expr></argument>,

            <argument pos:start="315:13" pos:end="315:36"><expr pos:start="315:13" pos:end="315:36"><operator pos:start="315:13" pos:end="315:13">(</operator><name pos:start="315:14" pos:end="315:21">unsigned</name> <name pos:start="315:23" pos:end="315:25">int</name><operator pos:start="315:26" pos:end="315:26">)</operator><call pos:start="315:27" pos:end="315:36"><name pos:start="315:27" pos:end="315:30">time</name><argument_list pos:start="315:31" pos:end="315:36">(<argument pos:start="315:32" pos:end="315:35"><expr pos:start="315:32" pos:end="315:35"><name pos:start="315:32" pos:end="315:35">NULL</name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="317:13" pos:end="317:22"><expr pos:start="317:13" pos:end="317:22"><name pos:start="317:13" pos:end="317:22">parent_cid</name></expr></argument>,

            <argument pos:start="319:13" pos:end="319:15"><expr pos:start="319:13" pos:end="319:15"><name pos:start="319:13" pos:end="319:15">fmt</name></expr></argument>,

            <argument pos:start="321:13" pos:end="321:28"><expr pos:start="321:13" pos:end="321:28"><name pos:start="321:13" pos:end="321:28">parent_desc_line</name></expr></argument>,

            <argument pos:start="323:13" pos:end="323:26"><expr pos:start="323:13" pos:end="323:26"><name pos:start="323:13" pos:end="323:26">ext_desc_lines</name></expr></argument>,

            <argument pos:start="325:13" pos:end="325:48"><expr pos:start="325:13" pos:end="325:48"><operator pos:start="325:13" pos:end="325:13">(</operator><ternary pos:start="325:14" pos:end="325:47"><condition pos:start="325:14" pos:end="325:41"><expr pos:start="325:14" pos:end="325:39"><name pos:start="325:14" pos:end="325:18">flags</name> <operator pos:start="325:20" pos:end="325:20">&amp;</operator> <name pos:start="325:22" pos:end="325:39">BLOCK_FLAG_COMPAT6</name></expr> ?</condition><then pos:start="325:43" pos:end="325:43"> <expr pos:start="325:43" pos:end="325:43"><literal type="number" pos:start="325:43" pos:end="325:43">6</literal></expr> </then><else pos:start="325:45" pos:end="325:47">: <expr pos:start="325:47" pos:end="325:47"><literal type="number" pos:start="325:47" pos:end="325:47">4</literal></expr></else></ternary><operator pos:start="325:48" pos:end="325:48">)</operator></expr></argument>,

            <argument pos:start="327:13" pos:end="327:59"><expr pos:start="327:13" pos:end="327:59"><name pos:start="327:13" pos:end="327:22">total_size</name> <operator pos:start="327:24" pos:end="327:24">/</operator> <operator pos:start="327:26" pos:end="327:26">(</operator><name pos:start="327:27" pos:end="327:33">int64_t</name><operator pos:start="327:34" pos:end="327:34">)</operator><operator pos:start="327:35" pos:end="327:35">(</operator><literal type="number" pos:start="327:36" pos:end="327:37">63</literal> <operator pos:start="327:39" pos:end="327:39">*</operator> <name pos:start="327:41" pos:end="327:52">number_heads</name> <operator pos:start="327:54" pos:end="327:54">*</operator> <literal type="number" pos:start="327:56" pos:end="327:58">512</literal><operator pos:start="327:59" pos:end="327:59">)</operator></expr></argument>, <argument pos:start="327:62" pos:end="327:73"><expr pos:start="327:62" pos:end="327:73"><name pos:start="327:62" pos:end="327:73">number_heads</name></expr></argument>,

                <argument pos:start="329:17" pos:end="329:28"><expr pos:start="329:17" pos:end="329:28"><name pos:start="329:17" pos:end="329:28">adapter_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="331:5" pos:end="347:5"><if pos:start="331:5" pos:end="339:5">if <condition pos:start="331:8" pos:end="331:22">(<expr pos:start="331:9" pos:end="331:21"><name pos:start="331:9" pos:end="331:13">split</name> <operator pos:start="331:15" pos:end="331:16">||</operator> <name pos:start="331:18" pos:end="331:21">flat</name></expr>)</condition> <block pos:start="331:24" pos:end="339:5">{<block_content pos:start="333:9" pos:end="337:29">

        <expr_stmt pos:start="333:9" pos:end="337:29"><expr pos:start="333:9" pos:end="337:28"><name pos:start="333:9" pos:end="333:10">fd</name> <operator pos:start="333:12" pos:end="333:12">=</operator> <call pos:start="333:14" pos:end="337:28"><name pos:start="333:14" pos:end="333:22">qemu_open</name><argument_list pos:start="333:23" pos:end="337:28">(<argument pos:start="333:24" pos:end="333:31"><expr pos:start="333:24" pos:end="333:31"><name pos:start="333:24" pos:end="333:31">filename</name></expr></argument>,

                       <argument pos:start="335:24" pos:end="335:76"><expr pos:start="335:24" pos:end="335:76"><name pos:start="335:24" pos:end="335:31">O_WRONLY</name> <operator pos:start="335:33" pos:end="335:33">|</operator> <name pos:start="335:35" pos:end="335:41">O_CREAT</name> <operator pos:start="335:43" pos:end="335:43">|</operator> <name pos:start="335:45" pos:end="335:51">O_TRUNC</name> <operator pos:start="335:53" pos:end="335:53">|</operator> <name pos:start="335:55" pos:end="335:62">O_BINARY</name> <operator pos:start="335:64" pos:end="335:64">|</operator> <name pos:start="335:66" pos:end="335:76">O_LARGEFILE</name></expr></argument>,

                       <argument pos:start="337:24" pos:end="337:27"><expr pos:start="337:24" pos:end="337:27"><literal type="number" pos:start="337:24" pos:end="337:27">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="339:7" pos:end="347:5">else <block pos:start="339:12" pos:end="347:5">{<block_content pos:start="341:9" pos:end="345:29">

        <expr_stmt pos:start="341:9" pos:end="345:29"><expr pos:start="341:9" pos:end="345:28"><name pos:start="341:9" pos:end="341:10">fd</name> <operator pos:start="341:12" pos:end="341:12">=</operator> <call pos:start="341:14" pos:end="345:28"><name pos:start="341:14" pos:end="341:22">qemu_open</name><argument_list pos:start="341:23" pos:end="345:28">(<argument pos:start="341:24" pos:end="341:31"><expr pos:start="341:24" pos:end="341:31"><name pos:start="341:24" pos:end="341:31">filename</name></expr></argument>,

                       <argument pos:start="343:24" pos:end="343:56"><expr pos:start="343:24" pos:end="343:56"><name pos:start="343:24" pos:end="343:31">O_WRONLY</name> <operator pos:start="343:33" pos:end="343:33">|</operator> <name pos:start="343:35" pos:end="343:42">O_BINARY</name> <operator pos:start="343:44" pos:end="343:44">|</operator> <name pos:start="343:46" pos:end="343:56">O_LARGEFILE</name></expr></argument>,

                       <argument pos:start="345:24" pos:end="345:27"><expr pos:start="345:24" pos:end="345:27"><literal type="number" pos:start="345:24" pos:end="345:27">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="349:5" pos:end="353:5"><if pos:start="349:5" pos:end="353:5">if <condition pos:start="349:8" pos:end="349:15">(<expr pos:start="349:9" pos:end="349:14"><name pos:start="349:9" pos:end="349:10">fd</name> <operator pos:start="349:12" pos:end="349:12">&lt;</operator> <literal type="number" pos:start="349:14" pos:end="349:14">0</literal></expr>)</condition> <block pos:start="349:17" pos:end="353:5">{<block_content pos:start="351:9" pos:end="351:22">

        <return pos:start="351:9" pos:end="351:22">return <expr pos:start="351:16" pos:end="351:21"><operator pos:start="351:16" pos:end="351:16">-</operator><name pos:start="351:17" pos:end="351:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="355:5" pos:end="355:39">/* the descriptor offset = 0x200 */</comment>

    <if_stmt pos:start="357:5" pos:end="363:5"><if pos:start="357:5" pos:end="363:5">if <condition pos:start="357:8" pos:end="357:63">(<expr pos:start="357:9" pos:end="357:62"><operator pos:start="357:9" pos:end="357:9">!</operator><name pos:start="357:10" pos:end="357:14">split</name> <operator pos:start="357:16" pos:end="357:17">&amp;&amp;</operator> <operator pos:start="357:19" pos:end="357:19">!</operator><name pos:start="357:20" pos:end="357:23">flat</name> <operator pos:start="357:25" pos:end="357:26">&amp;&amp;</operator> <literal type="number" pos:start="357:28" pos:end="357:32">0x200</literal> <operator pos:start="357:34" pos:end="357:35">!=</operator> <call pos:start="357:37" pos:end="357:62"><name pos:start="357:37" pos:end="357:41">lseek</name><argument_list pos:start="357:42" pos:end="357:62">(<argument pos:start="357:43" pos:end="357:44"><expr pos:start="357:43" pos:end="357:44"><name pos:start="357:43" pos:end="357:44">fd</name></expr></argument>, <argument pos:start="357:47" pos:end="357:51"><expr pos:start="357:47" pos:end="357:51"><literal type="number" pos:start="357:47" pos:end="357:51">0x200</literal></expr></argument>, <argument pos:start="357:54" pos:end="357:61"><expr pos:start="357:54" pos:end="357:61"><name pos:start="357:54" pos:end="357:61">SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="357:65" pos:end="363:5">{<block_content pos:start="359:9" pos:end="361:18">

        <expr_stmt pos:start="359:9" pos:end="359:21"><expr pos:start="359:9" pos:end="359:20"><name pos:start="359:9" pos:end="359:11">ret</name> <operator pos:start="359:13" pos:end="359:13">=</operator> <operator pos:start="359:15" pos:end="359:15">-</operator><name pos:start="359:16" pos:end="359:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="361:9" pos:end="361:18">goto <name pos:start="361:14" pos:end="361:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:50"><expr pos:start="365:5" pos:end="365:49"><name pos:start="365:5" pos:end="365:7">ret</name> <operator pos:start="365:9" pos:end="365:9">=</operator> <call pos:start="365:11" pos:end="365:49"><name pos:start="365:11" pos:end="365:25">qemu_write_full</name><argument_list pos:start="365:26" pos:end="365:49">(<argument pos:start="365:27" pos:end="365:28"><expr pos:start="365:27" pos:end="365:28"><name pos:start="365:27" pos:end="365:28">fd</name></expr></argument>, <argument pos:start="365:31" pos:end="365:34"><expr pos:start="365:31" pos:end="365:34"><name pos:start="365:31" pos:end="365:34">desc</name></expr></argument>, <argument pos:start="365:37" pos:end="365:48"><expr pos:start="365:37" pos:end="365:48"><call pos:start="365:37" pos:end="365:48"><name pos:start="365:37" pos:end="365:42">strlen</name><argument_list pos:start="365:43" pos:end="365:48">(<argument pos:start="365:44" pos:end="365:47"><expr pos:start="365:44" pos:end="365:47"><name pos:start="365:44" pos:end="365:47">desc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="367:5" pos:end="373:5"><if pos:start="367:5" pos:end="373:5">if <condition pos:start="367:8" pos:end="367:28">(<expr pos:start="367:9" pos:end="367:27"><name pos:start="367:9" pos:end="367:11">ret</name> <operator pos:start="367:13" pos:end="367:14">!=</operator> <call pos:start="367:16" pos:end="367:27"><name pos:start="367:16" pos:end="367:21">strlen</name><argument_list pos:start="367:22" pos:end="367:27">(<argument pos:start="367:23" pos:end="367:26"><expr pos:start="367:23" pos:end="367:26"><name pos:start="367:23" pos:end="367:26">desc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="367:30" pos:end="373:5">{<block_content pos:start="369:9" pos:end="371:18">

        <expr_stmt pos:start="369:9" pos:end="369:21"><expr pos:start="369:9" pos:end="369:20"><name pos:start="369:9" pos:end="369:11">ret</name> <operator pos:start="369:13" pos:end="369:13">=</operator> <operator pos:start="369:15" pos:end="369:15">-</operator><name pos:start="369:16" pos:end="369:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="371:9" pos:end="371:18">goto <name pos:start="371:14" pos:end="371:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:12"><expr pos:start="375:5" pos:end="375:11"><name pos:start="375:5" pos:end="375:7">ret</name> <operator pos:start="375:9" pos:end="375:9">=</operator> <literal type="number" pos:start="375:11" pos:end="375:11">0</literal></expr>;</expr_stmt>

<label pos:start="377:1" pos:end="377:5"><name pos:start="377:1" pos:end="377:4">exit</name>:</label>

    <expr_stmt pos:start="379:5" pos:end="379:19"><expr pos:start="379:5" pos:end="379:18"><call pos:start="379:5" pos:end="379:18"><name pos:start="379:5" pos:end="379:14">qemu_close</name><argument_list pos:start="379:15" pos:end="379:18">(<argument pos:start="379:16" pos:end="379:17"><expr pos:start="379:16" pos:end="379:17"><name pos:start="379:16" pos:end="379:17">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="381:5" pos:end="381:15">return <expr pos:start="381:12" pos:end="381:14"><name pos:start="381:12" pos:end="381:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
