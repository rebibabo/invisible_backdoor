<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11673.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">ioinst_handle_tpi</name><parameter_list pos:start="1:22" pos:end="1:49">(<parameter pos:start="1:23" pos:end="1:34"><decl pos:start="1:23" pos:end="1:34"><type pos:start="1:23" pos:end="1:34"><name pos:start="1:23" pos:end="1:29">S390CPU</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:34">cpu</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:44">uint32_t</name></type> <name pos:start="1:46" pos:end="1:48">ipb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:15">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">CPUS390XState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">env</name> <init pos:start="5:24" pos:end="5:34">= <expr pos:start="5:26" pos:end="5:34"><operator pos:start="5:26" pos:end="5:26">&amp;</operator><name pos:start="5:27" pos:end="5:34"><name pos:start="5:27" pos:end="5:29">cpu</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">lowcore</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">IOIntCode</name></type> <name pos:start="11:15" pos:end="11:22">int_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:14">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:14">ar</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><call pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:16">trace_ioinst</name><argument_list pos:start="21:17" pos:end="21:23">(<argument pos:start="21:18" pos:end="21:22"><expr pos:start="21:18" pos:end="21:22"><literal type="string" pos:start="21:18" pos:end="21:22">"tpi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:44"><expr pos:start="23:5" pos:end="23:43"><name pos:start="23:5" pos:end="23:8">addr</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:43"><name pos:start="23:12" pos:end="23:28">decode_basedisp_s</name><argument_list pos:start="23:29" pos:end="23:43">(<argument pos:start="23:30" pos:end="23:32"><expr pos:start="23:30" pos:end="23:32"><name pos:start="23:30" pos:end="23:32">env</name></expr></argument>, <argument pos:start="23:35" pos:end="23:37"><expr pos:start="23:35" pos:end="23:37"><name pos:start="23:35" pos:end="23:37">ipb</name></expr></argument>, <argument pos:start="23:40" pos:end="23:42"><expr pos:start="23:40" pos:end="23:42"><operator pos:start="23:40" pos:end="23:40">&amp;</operator><name pos:start="23:41" pos:end="23:42">ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:17">(<expr pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:12">addr</name> <operator pos:start="25:14" pos:end="25:14">&amp;</operator> <literal type="number" pos:start="25:16" pos:end="25:16">3</literal></expr>)</condition> <block pos:start="25:19" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:20">

        <expr_stmt pos:start="27:9" pos:end="27:53"><expr pos:start="27:9" pos:end="27:52"><call pos:start="27:9" pos:end="27:52"><name pos:start="27:9" pos:end="27:25">program_interrupt</name><argument_list pos:start="27:26" pos:end="27:52">(<argument pos:start="27:27" pos:end="27:29"><expr pos:start="27:27" pos:end="27:29"><name pos:start="27:27" pos:end="27:29">env</name></expr></argument>, <argument pos:start="27:32" pos:end="27:48"><expr pos:start="27:32" pos:end="27:48"><name pos:start="27:32" pos:end="27:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="27:51" pos:end="27:51"><expr pos:start="27:51" pos:end="27:51"><literal type="number" pos:start="27:51" pos:end="27:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:20">return <expr pos:start="29:16" pos:end="29:19"><operator pos:start="29:16" pos:end="29:16">-</operator><name pos:start="29:17" pos:end="29:19">EIO</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:27"><expr pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:11">lowcore</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <ternary pos:start="35:15" pos:end="35:26"><condition pos:start="35:15" pos:end="35:20"><expr pos:start="35:15" pos:end="35:18"><name pos:start="35:15" pos:end="35:18">addr</name></expr> ?</condition><then pos:start="35:22" pos:end="35:22"> <expr pos:start="35:22" pos:end="35:22"><literal type="number" pos:start="35:22" pos:end="35:22">0</literal></expr> </then><else pos:start="35:24" pos:end="35:26">: <expr pos:start="35:26" pos:end="35:26"><literal type="number" pos:start="35:26" pos:end="35:26">1</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:61"><expr pos:start="37:5" pos:end="37:42"><name pos:start="37:5" pos:end="37:7">len</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <ternary pos:start="37:11" pos:end="37:42"><condition pos:start="37:11" pos:end="37:19"><expr pos:start="37:11" pos:end="37:17"><name pos:start="37:11" pos:end="37:17">lowcore</name></expr> ?</condition><then pos:start="37:21" pos:end="37:21"> <expr pos:start="37:21" pos:end="37:21"><literal type="number" pos:start="37:21" pos:end="37:21">8</literal></expr> <comment type="block" pos:start="37:23" pos:end="37:37">/* two words */</comment> </then><else pos:start="37:39" pos:end="37:42">: <expr pos:start="37:41" pos:end="37:42"><literal type="number" pos:start="37:41" pos:end="37:42">12</literal></expr></else></ternary></expr> <comment type="block" pos:start="37:44" pos:end="37:60">/* three words */</comment>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:41"><expr pos:start="39:5" pos:end="39:40"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:40"><name pos:start="39:11" pos:end="39:20">css_do_tpi</name><argument_list pos:start="39:21" pos:end="39:40">(<argument pos:start="39:22" pos:end="39:30"><expr pos:start="39:22" pos:end="39:30"><operator pos:start="39:22" pos:end="39:22">&amp;</operator><name pos:start="39:23" pos:end="39:30">int_code</name></expr></argument>, <argument pos:start="39:33" pos:end="39:39"><expr pos:start="39:33" pos:end="39:39"><name pos:start="39:33" pos:end="39:39">lowcore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:17">(<expr pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:14">==</operator> <literal type="number" pos:start="41:16" pos:end="41:16">1</literal></expr>)</condition> <block pos:start="41:19" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:79">

        <expr_stmt pos:start="43:9" pos:end="43:79"><expr pos:start="43:9" pos:end="43:78"><call pos:start="43:9" pos:end="43:78"><name pos:start="43:9" pos:end="43:31">s390_cpu_virt_mem_write</name><argument_list pos:start="43:32" pos:end="43:78">(<argument pos:start="43:33" pos:end="43:35"><expr pos:start="43:33" pos:end="43:35"><name pos:start="43:33" pos:end="43:35">cpu</name></expr></argument>, <argument pos:start="43:38" pos:end="43:57"><expr pos:start="43:38" pos:end="43:57"><ternary pos:start="43:38" pos:end="43:57"><condition pos:start="43:38" pos:end="43:46"><expr pos:start="43:38" pos:end="43:44"><name pos:start="43:38" pos:end="43:44">lowcore</name></expr> ?</condition><then pos:start="43:48" pos:end="43:50"> <expr pos:start="43:48" pos:end="43:50"><literal type="number" pos:start="43:48" pos:end="43:50">184</literal></expr> </then><else pos:start="43:52" pos:end="43:57">: <expr pos:start="43:54" pos:end="43:57"><name pos:start="43:54" pos:end="43:57">addr</name></expr></else></ternary></expr></argument>, <argument pos:start="43:60" pos:end="43:61"><expr pos:start="43:60" pos:end="43:61"><name pos:start="43:60" pos:end="43:61">ar</name></expr></argument>, <argument pos:start="43:64" pos:end="43:72"><expr pos:start="43:64" pos:end="43:72"><operator pos:start="43:64" pos:end="43:64">&amp;</operator><name pos:start="43:65" pos:end="43:72">int_code</name></expr></argument>, <argument pos:start="43:75" pos:end="43:77"><expr pos:start="43:75" pos:end="43:77"><name pos:start="43:75" pos:end="43:77">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="47:5" pos:end="47:15">return <expr pos:start="47:12" pos:end="47:14"><name pos:start="47:12" pos:end="47:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
