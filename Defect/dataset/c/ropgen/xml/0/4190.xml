<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4190.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:44">ucf64_exceptbits_from_host</name><parameter_list pos:start="1:45" pos:end="1:59">(<parameter pos:start="1:46" pos:end="1:58"><decl pos:start="1:46" pos:end="1:58"><type pos:start="1:46" pos:end="1:48"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:58">host_bits</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:23">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">target_bits</name> <init pos:start="5:21" pos:end="5:23">= <expr pos:start="5:23" pos:end="5:23"><literal type="number" pos:start="5:23" pos:end="5:23">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:39">(<expr pos:start="9:9" pos:end="9:38"><name pos:start="9:9" pos:end="9:17">host_bits</name> <operator pos:start="9:19" pos:end="9:19">&amp;</operator> <name pos:start="9:21" pos:end="9:38">float_flag_invalid</name></expr>)</condition> <block pos:start="9:41" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:48">

        <expr_stmt pos:start="11:9" pos:end="11:48"><expr pos:start="11:9" pos:end="11:47"><name pos:start="11:9" pos:end="11:19">target_bits</name> <operator pos:start="11:21" pos:end="11:22">|=</operator> <name pos:start="11:24" pos:end="11:47">UCF64_FPSCR_FLAG_INVALID</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:41">(<expr pos:start="15:9" pos:end="15:40"><name pos:start="15:9" pos:end="15:17">host_bits</name> <operator pos:start="15:19" pos:end="15:19">&amp;</operator> <name pos:start="15:21" pos:end="15:40">float_flag_divbyzero</name></expr>)</condition> <block pos:start="15:43" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:48">

        <expr_stmt pos:start="17:9" pos:end="17:48"><expr pos:start="17:9" pos:end="17:47"><name pos:start="17:9" pos:end="17:19">target_bits</name> <operator pos:start="17:21" pos:end="17:22">|=</operator> <name pos:start="17:24" pos:end="17:47">UCF64_FPSCR_FLAG_DIVZERO</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:40">(<expr pos:start="21:9" pos:end="21:39"><name pos:start="21:9" pos:end="21:17">host_bits</name> <operator pos:start="21:19" pos:end="21:19">&amp;</operator> <name pos:start="21:21" pos:end="21:39">float_flag_overflow</name></expr>)</condition> <block pos:start="21:42" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:49">

        <expr_stmt pos:start="23:9" pos:end="23:49"><expr pos:start="23:9" pos:end="23:48"><name pos:start="23:9" pos:end="23:19">target_bits</name> <operator pos:start="23:21" pos:end="23:22">|=</operator> <name pos:start="23:24" pos:end="23:48">UCF64_FPSCR_FLAG_OVERFLOW</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:41">(<expr pos:start="27:9" pos:end="27:40"><name pos:start="27:9" pos:end="27:17">host_bits</name> <operator pos:start="27:19" pos:end="27:19">&amp;</operator> <name pos:start="27:21" pos:end="27:40">float_flag_underflow</name></expr>)</condition> <block pos:start="27:43" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:50">

        <expr_stmt pos:start="29:9" pos:end="29:50"><expr pos:start="29:9" pos:end="29:49"><name pos:start="29:9" pos:end="29:19">target_bits</name> <operator pos:start="29:21" pos:end="29:22">|=</operator> <name pos:start="29:24" pos:end="29:49">UCF64_FPSCR_FLAG_UNDERFLOW</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:39">(<expr pos:start="33:9" pos:end="33:38"><name pos:start="33:9" pos:end="33:17">host_bits</name> <operator pos:start="33:19" pos:end="33:19">&amp;</operator> <name pos:start="33:21" pos:end="33:38">float_flag_inexact</name></expr>)</condition> <block pos:start="33:41" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:48">

        <expr_stmt pos:start="35:9" pos:end="35:48"><expr pos:start="35:9" pos:end="35:47"><name pos:start="35:9" pos:end="35:19">target_bits</name> <operator pos:start="35:21" pos:end="35:22">|=</operator> <name pos:start="35:24" pos:end="35:47">UCF64_FPSCR_FLAG_INEXACT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="39:5" pos:end="39:23">return <expr pos:start="39:12" pos:end="39:22"><name pos:start="39:12" pos:end="39:22">target_bits</name></expr>;</return>

</block_content>}</block></function>
</unit>
