<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13507.c" pos:tabs="8"><function pos:start="1:1" pos:end="275:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">tcg_dump_ops</name><parameter_list pos:start="1:18" pos:end="1:32">(<parameter pos:start="1:19" pos:end="1:31"><decl pos:start="1:19" pos:end="1:31"><type pos:start="1:19" pos:end="1:30"><name pos:start="1:19" pos:end="1:28">TCGContext</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:31">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="275:1">{<block_content pos:start="5:5" pos:end="273:5">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:17"><name pos:start="5:10" pos:end="5:12">buf</name><index pos:start="5:13" pos:end="5:17">[<expr pos:start="5:14" pos:end="5:16"><literal type="number" pos:start="5:14" pos:end="5:16">128</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">TCGOp</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:13">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">oi</name></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="273:5">for <control pos:start="13:9" pos:end="13:58">(<init pos:start="13:10" pos:end="13:34"><expr pos:start="13:10" pos:end="13:33"><name pos:start="13:10" pos:end="13:11">oi</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <name pos:start="13:15" pos:end="13:33"><name pos:start="13:15" pos:end="13:15">s</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:33">gen_first_op_idx</name></name></expr>;</init> <condition pos:start="13:36" pos:end="13:43"><expr pos:start="13:36" pos:end="13:42"><name pos:start="13:36" pos:end="13:37">oi</name> <operator pos:start="13:39" pos:end="13:40">&gt;=</operator> <literal type="number" pos:start="13:42" pos:end="13:42">0</literal></expr>;</condition> <incr pos:start="13:45" pos:end="13:57"><expr pos:start="13:45" pos:end="13:57"><name pos:start="13:45" pos:end="13:46">oi</name> <operator pos:start="13:48" pos:end="13:48">=</operator> <name pos:start="13:50" pos:end="13:57"><name pos:start="13:50" pos:end="13:51">op</name><operator pos:start="13:52" pos:end="13:53">-&gt;</operator><name pos:start="13:54" pos:end="13:57">next</name></name></expr></incr>)</control> <block pos:start="13:60" pos:end="273:5">{<block_content pos:start="15:9" pos:end="271:23">

        <decl_stmt pos:start="15:9" pos:end="15:47"><decl pos:start="15:9" pos:end="15:13"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:13">i</name></decl>, <decl pos:start="15:16" pos:end="15:16"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:16" pos:end="15:16">k</name></decl>, <decl pos:start="15:19" pos:end="15:26"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:19" pos:end="15:26">nb_oargs</name></decl>, <decl pos:start="15:29" pos:end="15:36"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:29" pos:end="15:36">nb_iargs</name></decl>, <decl pos:start="15:39" pos:end="15:46"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:39" pos:end="15:46">nb_cargs</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:28"><decl pos:start="17:9" pos:end="17:27"><type pos:start="17:9" pos:end="17:24"><specifier pos:start="17:9" pos:end="17:13">const</specifier> <name pos:start="17:15" pos:end="17:22">TCGOpDef</name> <modifier pos:start="17:24" pos:end="17:24">*</modifier></type><name pos:start="17:25" pos:end="17:27">def</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:27"><decl pos:start="19:9" pos:end="19:26"><type pos:start="19:9" pos:end="19:22"><specifier pos:start="19:9" pos:end="19:13">const</specifier> <name pos:start="19:15" pos:end="19:20">TCGArg</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:26">args</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:20"><decl pos:start="21:9" pos:end="21:19"><type pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:17">TCGOpcode</name></type> <name pos:start="21:19" pos:end="21:19">c</name></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:32"><expr pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:10">op</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <operator pos:start="25:14" pos:end="25:14">&amp;</operator><name pos:start="25:15" pos:end="25:31"><name pos:start="25:15" pos:end="25:15">s</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:27">gen_op_buf</name><index pos:start="25:28" pos:end="25:31">[<expr pos:start="25:29" pos:end="25:30"><name pos:start="25:29" pos:end="25:30">oi</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:20"><expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:9">c</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:14">op</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:19">opc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:11">def</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <operator pos:start="29:15" pos:end="29:15">&amp;</operator><name pos:start="29:16" pos:end="29:29"><name pos:start="29:16" pos:end="29:26">tcg_op_defs</name><index pos:start="29:27" pos:end="29:29">[<expr pos:start="29:28" pos:end="29:28"><name pos:start="29:28" pos:end="29:28">c</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:12">args</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <operator pos:start="31:16" pos:end="31:16">&amp;</operator><name pos:start="31:17" pos:end="31:44"><name pos:start="31:17" pos:end="31:17">s</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:34">gen_opparam_buf</name><index pos:start="31:35" pos:end="31:44">[<expr pos:start="31:36" pos:end="31:43"><name pos:start="31:36" pos:end="31:43"><name pos:start="31:36" pos:end="31:37">op</name><operator pos:start="31:38" pos:end="31:39">-&gt;</operator><name pos:start="31:40" pos:end="31:43">args</name></name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="35:9" pos:end="269:9"><if pos:start="35:9" pos:end="59:9">if <condition pos:start="35:12" pos:end="35:37">(<expr pos:start="35:13" pos:end="35:36"><name pos:start="35:13" pos:end="35:13">c</name> <operator pos:start="35:15" pos:end="35:16">==</operator> <name pos:start="35:18" pos:end="35:36">INDEX_op_insn_start</name></expr>)</condition> <block pos:start="35:39" pos:end="59:9">{<block_content pos:start="37:13" pos:end="57:13">

            <expr_stmt pos:start="37:13" pos:end="37:71"><expr pos:start="37:13" pos:end="37:70"><call pos:start="37:13" pos:end="37:70"><name pos:start="37:13" pos:end="37:20">qemu_log</name><argument_list pos:start="37:21" pos:end="37:70">(<argument pos:start="37:22" pos:end="37:30"><expr pos:start="37:22" pos:end="37:30"><literal type="string" pos:start="37:22" pos:end="37:30">"%s ----"</literal></expr></argument>, <argument pos:start="37:33" pos:end="37:69"><expr pos:start="37:33" pos:end="37:69"><ternary pos:start="37:33" pos:end="37:69"><condition pos:start="37:33" pos:end="37:59"><expr pos:start="37:33" pos:end="37:57"><name pos:start="37:33" pos:end="37:34">oi</name> <operator pos:start="37:36" pos:end="37:37">!=</operator> <name pos:start="37:39" pos:end="37:57"><name pos:start="37:39" pos:end="37:39">s</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:57">gen_first_op_idx</name></name></expr> ?</condition><then pos:start="37:61" pos:end="37:64"> <expr pos:start="37:61" pos:end="37:64"><literal type="string" pos:start="37:61" pos:end="37:64">"\n"</literal></expr> </then><else pos:start="37:66" pos:end="37:69">: <expr pos:start="37:68" pos:end="37:69"><literal type="string" pos:start="37:68" pos:end="37:69">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="41:13" pos:end="57:13">for <control pos:start="41:17" pos:end="41:57">(<init pos:start="41:18" pos:end="41:23"><expr pos:start="41:18" pos:end="41:22"><name pos:start="41:18" pos:end="41:18">i</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <literal type="number" pos:start="41:22" pos:end="41:22">0</literal></expr>;</init> <condition pos:start="41:25" pos:end="41:52"><expr pos:start="41:25" pos:end="41:51"><name pos:start="41:25" pos:end="41:25">i</name> <operator pos:start="41:27" pos:end="41:27">&lt;</operator> <name pos:start="41:29" pos:end="41:51">TARGET_INSN_START_WORDS</name></expr>;</condition> <incr pos:start="41:54" pos:end="41:56"><expr pos:start="41:54" pos:end="41:56"><operator pos:start="41:54" pos:end="41:55">++</operator><name pos:start="41:56" pos:end="41:56">i</name></expr></incr>)</control> <block pos:start="41:59" pos:end="57:13">{<block_content pos:start="43:17" pos:end="55:47">

                <decl_stmt pos:start="43:17" pos:end="46:0"><decl pos:start="43:17" pos:end="43:30"><type pos:start="43:17" pos:end="43:28"><name pos:start="43:17" pos:end="43:28">target_ulong</name></type> <name pos:start="43:30" pos:end="43:30">a</name></decl>;</decl_stmt>

<cpp:if pos:start="45:1" pos:end="45:42">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:42"><name pos:start="45:5" pos:end="45:20">TARGET_LONG_BITS</name> <operator pos:start="45:22" pos:end="45:22">&gt;</operator> <name pos:start="45:24" pos:end="45:42">TCG_TARGET_REG_BITS</name></expr></cpp:if>

                <expr_stmt pos:start="47:17" pos:end="50:0"><expr pos:start="47:17" pos:end="47:71"><name pos:start="47:17" pos:end="47:17">a</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <operator pos:start="47:21" pos:end="47:21">(</operator><operator pos:start="47:22" pos:end="47:22">(</operator><name pos:start="47:23" pos:end="47:34">target_ulong</name><operator pos:start="47:35" pos:end="47:35">)</operator><name pos:start="47:36" pos:end="47:50"><name pos:start="47:36" pos:end="47:39">args</name><index pos:start="47:40" pos:end="47:50">[<expr pos:start="47:41" pos:end="47:49"><name pos:start="47:41" pos:end="47:41">i</name> <operator pos:start="47:43" pos:end="47:43">*</operator> <literal type="number" pos:start="47:45" pos:end="47:47">2</literal> <operator pos:start="47:47" pos:end="47:47">+</operator> <literal type="number" pos:start="47:49" pos:end="47:49">1</literal></expr>]</index></name> <operator pos:start="47:52" pos:end="47:53">&lt;&lt;</operator> <literal type="number" pos:start="47:55" pos:end="47:56">32</literal><operator pos:start="47:57" pos:end="47:57">)</operator> <operator pos:start="47:59" pos:end="47:59">|</operator> <name pos:start="47:61" pos:end="47:71"><name pos:start="47:61" pos:end="47:64">args</name><index pos:start="47:65" pos:end="47:71">[<expr pos:start="47:66" pos:end="47:70"><name pos:start="47:66" pos:end="47:66">i</name> <operator pos:start="47:68" pos:end="47:68">*</operator> <literal type="number" pos:start="47:70" pos:end="47:70">2</literal></expr>]</index></name></expr>;</expr_stmt>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

                <expr_stmt pos:start="51:17" pos:end="54:0"><expr pos:start="51:17" pos:end="51:27"><name pos:start="51:17" pos:end="51:17">a</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:27"><name pos:start="51:21" pos:end="51:24">args</name><index pos:start="51:25" pos:end="51:27">[<expr pos:start="51:26" pos:end="51:26"><name pos:start="51:26" pos:end="51:26">i</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

                <expr_stmt pos:start="55:17" pos:end="55:47"><expr pos:start="55:17" pos:end="55:46"><call pos:start="55:17" pos:end="55:46"><name pos:start="55:17" pos:end="55:24">qemu_log</name><argument_list pos:start="55:25" pos:end="55:46">(<argument pos:start="55:26" pos:end="55:42"><expr pos:start="55:26" pos:end="55:42"><literal type="string" pos:start="55:26" pos:end="55:28">" "</literal> <name pos:start="55:30" pos:end="55:42">TARGET_FMT_lx</name></expr></argument>, <argument pos:start="55:45" pos:end="55:45"><expr pos:start="55:45" pos:end="55:45"><name pos:start="55:45" pos:end="55:45">a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="59:11" pos:end="103:9">else if <condition pos:start="59:19" pos:end="59:38">(<expr pos:start="59:20" pos:end="59:37"><name pos:start="59:20" pos:end="59:20">c</name> <operator pos:start="59:22" pos:end="59:23">==</operator> <name pos:start="59:25" pos:end="59:37">INDEX_op_call</name></expr>)</condition> <block pos:start="59:40" pos:end="103:9">{<block_content pos:start="63:13" pos:end="101:13">

            <comment type="block" pos:start="61:13" pos:end="61:46">/* variable number of arguments */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:33"><expr pos:start="63:13" pos:end="63:32"><name pos:start="63:13" pos:end="63:20">nb_oargs</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <name pos:start="63:24" pos:end="63:32"><name pos:start="63:24" pos:end="63:25">op</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:32">callo</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:33"><expr pos:start="65:13" pos:end="65:32"><name pos:start="65:13" pos:end="65:20">nb_iargs</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:32"><name pos:start="65:24" pos:end="65:25">op</name><operator pos:start="65:26" pos:end="65:27">-&gt;</operator><name pos:start="65:28" pos:end="65:32">calli</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:37"><expr pos:start="67:13" pos:end="67:36"><name pos:start="67:13" pos:end="67:20">nb_cargs</name> <operator pos:start="67:22" pos:end="67:22">=</operator> <name pos:start="67:24" pos:end="67:36"><name pos:start="67:24" pos:end="67:26">def</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:36">nb_cargs</name></name></expr>;</expr_stmt>



            <comment type="block" pos:start="71:13" pos:end="71:48">/* function name, flags, out args */</comment>

            <expr_stmt pos:start="73:13" pos:end="77:62"><expr pos:start="73:13" pos:end="77:61"><call pos:start="73:13" pos:end="77:61"><name pos:start="73:13" pos:end="73:20">qemu_log</name><argument_list pos:start="73:21" pos:end="77:61">(<argument pos:start="73:22" pos:end="73:51"><expr pos:start="73:22" pos:end="73:51"><literal type="string" pos:start="73:22" pos:end="73:34">" %s %s,$0x%"</literal> <name pos:start="73:36" pos:end="73:44">TCG_PRIlx</name> <literal type="string" pos:start="73:46" pos:end="73:51">",$%d"</literal></expr></argument>, <argument pos:start="73:54" pos:end="73:62"><expr pos:start="73:54" pos:end="73:62"><name pos:start="73:54" pos:end="73:62"><name pos:start="73:54" pos:end="73:56">def</name><operator pos:start="73:57" pos:end="73:58">-&gt;</operator><name pos:start="73:59" pos:end="73:62">name</name></name></expr></argument>,

                     <argument pos:start="75:22" pos:end="75:66"><expr pos:start="75:22" pos:end="75:66"><call pos:start="75:22" pos:end="75:66"><name pos:start="75:22" pos:end="75:36">tcg_find_helper</name><argument_list pos:start="75:37" pos:end="75:66">(<argument pos:start="75:38" pos:end="75:38"><expr pos:start="75:38" pos:end="75:38"><name pos:start="75:38" pos:end="75:38">s</name></expr></argument>, <argument pos:start="75:41" pos:end="75:65"><expr pos:start="75:41" pos:end="75:65"><name pos:start="75:41" pos:end="75:65"><name pos:start="75:41" pos:end="75:44">args</name><index pos:start="75:45" pos:end="75:65">[<expr pos:start="75:46" pos:end="75:64"><name pos:start="75:46" pos:end="75:53">nb_oargs</name> <operator pos:start="75:55" pos:end="75:55">+</operator> <name pos:start="75:57" pos:end="75:64">nb_iargs</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                     <argument pos:start="77:22" pos:end="77:50"><expr pos:start="77:22" pos:end="77:50"><name pos:start="77:22" pos:end="77:50"><name pos:start="77:22" pos:end="77:25">args</name><index pos:start="77:26" pos:end="77:50">[<expr pos:start="77:27" pos:end="77:49"><name pos:start="77:27" pos:end="77:34">nb_oargs</name> <operator pos:start="77:36" pos:end="77:36">+</operator> <name pos:start="77:38" pos:end="77:45">nb_iargs</name> <operator pos:start="77:47" pos:end="77:47">+</operator> <literal type="number" pos:start="77:49" pos:end="77:49">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="77:53" pos:end="77:60"><expr pos:start="77:53" pos:end="77:60"><name pos:start="77:53" pos:end="77:60">nb_oargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="79:13" pos:end="85:13">for <control pos:start="79:17" pos:end="79:42">(<init pos:start="79:18" pos:end="79:23"><expr pos:start="79:18" pos:end="79:22"><name pos:start="79:18" pos:end="79:18">i</name> <operator pos:start="79:20" pos:end="79:20">=</operator> <literal type="number" pos:start="79:22" pos:end="79:22">0</literal></expr>;</init> <condition pos:start="79:25" pos:end="79:37"><expr pos:start="79:25" pos:end="79:36"><name pos:start="79:25" pos:end="79:25">i</name> <operator pos:start="79:27" pos:end="79:27">&lt;</operator> <name pos:start="79:29" pos:end="79:36">nb_oargs</name></expr>;</condition> <incr pos:start="79:39" pos:end="79:41"><expr pos:start="79:39" pos:end="79:41"><name pos:start="79:39" pos:end="79:39">i</name><operator pos:start="79:40" pos:end="79:41">++</operator></expr></incr>)</control> <block pos:start="79:44" pos:end="85:13">{<block_content pos:start="81:17" pos:end="83:61">

                <expr_stmt pos:start="81:17" pos:end="83:61"><expr pos:start="81:17" pos:end="83:60"><call pos:start="81:17" pos:end="83:60"><name pos:start="81:17" pos:end="81:24">qemu_log</name><argument_list pos:start="81:25" pos:end="83:60">(<argument pos:start="81:26" pos:end="81:30"><expr pos:start="81:26" pos:end="81:30"><literal type="string" pos:start="81:26" pos:end="81:30">",%s"</literal></expr></argument>, <argument pos:start="81:33" pos:end="83:59"><expr pos:start="81:33" pos:end="83:59"><call pos:start="81:33" pos:end="83:59"><name pos:start="81:33" pos:end="81:51">tcg_get_arg_str_idx</name><argument_list pos:start="81:52" pos:end="83:59">(<argument pos:start="81:53" pos:end="81:53"><expr pos:start="81:53" pos:end="81:53"><name pos:start="81:53" pos:end="81:53">s</name></expr></argument>, <argument pos:start="81:56" pos:end="81:58"><expr pos:start="81:56" pos:end="81:58"><name pos:start="81:56" pos:end="81:58">buf</name></expr></argument>, <argument pos:start="81:61" pos:end="81:71"><expr pos:start="81:61" pos:end="81:71"><sizeof pos:start="81:61" pos:end="81:71">sizeof<argument_list pos:start="81:67" pos:end="81:71">(<argument pos:start="81:68" pos:end="81:70"><expr pos:start="81:68" pos:end="81:70"><name pos:start="81:68" pos:end="81:70">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                                   <argument pos:start="83:52" pos:end="83:58"><expr pos:start="83:52" pos:end="83:58"><name pos:start="83:52" pos:end="83:58"><name pos:start="83:52" pos:end="83:55">args</name><index pos:start="83:56" pos:end="83:58">[<expr pos:start="83:57" pos:end="83:57"><name pos:start="83:57" pos:end="83:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <for pos:start="87:13" pos:end="101:13">for <control pos:start="87:17" pos:end="87:42">(<init pos:start="87:18" pos:end="87:23"><expr pos:start="87:18" pos:end="87:22"><name pos:start="87:18" pos:end="87:18">i</name> <operator pos:start="87:20" pos:end="87:20">=</operator> <literal type="number" pos:start="87:22" pos:end="87:22">0</literal></expr>;</init> <condition pos:start="87:25" pos:end="87:37"><expr pos:start="87:25" pos:end="87:36"><name pos:start="87:25" pos:end="87:25">i</name> <operator pos:start="87:27" pos:end="87:27">&lt;</operator> <name pos:start="87:29" pos:end="87:36">nb_iargs</name></expr>;</condition> <incr pos:start="87:39" pos:end="87:41"><expr pos:start="87:39" pos:end="87:41"><name pos:start="87:39" pos:end="87:39">i</name><operator pos:start="87:40" pos:end="87:41">++</operator></expr></incr>)</control> <block pos:start="87:44" pos:end="101:13">{<block_content pos:start="89:17" pos:end="99:35">

                <decl_stmt pos:start="89:17" pos:end="89:48"><decl pos:start="89:17" pos:end="89:47"><type pos:start="89:17" pos:end="89:22"><name pos:start="89:17" pos:end="89:22">TCGArg</name></type> <name pos:start="89:24" pos:end="89:26">arg</name> <init pos:start="89:28" pos:end="89:47">= <expr pos:start="89:30" pos:end="89:47"><name pos:start="89:30" pos:end="89:47"><name pos:start="89:30" pos:end="89:33">args</name><index pos:start="89:34" pos:end="89:47">[<expr pos:start="89:35" pos:end="89:46"><name pos:start="89:35" pos:end="89:42">nb_oargs</name> <operator pos:start="89:44" pos:end="89:44">+</operator> <name pos:start="89:46" pos:end="89:46">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="91:17" pos:end="91:42"><decl pos:start="91:17" pos:end="91:41"><type pos:start="91:17" pos:end="91:28"><specifier pos:start="91:17" pos:end="91:21">const</specifier> <name pos:start="91:23" pos:end="91:26">char</name> <modifier pos:start="91:28" pos:end="91:28">*</modifier></type><name pos:start="91:29" pos:end="91:29">t</name> <init pos:start="91:31" pos:end="91:41">= <expr pos:start="91:33" pos:end="91:41"><literal type="string" pos:start="91:33" pos:end="91:41">"&lt;dummy&gt;"</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="93:17" pos:end="97:17"><if pos:start="93:17" pos:end="97:17">if <condition pos:start="93:20" pos:end="93:46">(<expr pos:start="93:21" pos:end="93:45"><name pos:start="93:21" pos:end="93:23">arg</name> <operator pos:start="93:25" pos:end="93:26">!=</operator> <name pos:start="93:28" pos:end="93:45">TCG_CALL_DUMMY_ARG</name></expr>)</condition> <block pos:start="93:48" pos:end="97:17">{<block_content pos:start="95:21" pos:end="95:70">

                    <expr_stmt pos:start="95:21" pos:end="95:70"><expr pos:start="95:21" pos:end="95:69"><name pos:start="95:21" pos:end="95:21">t</name> <operator pos:start="95:23" pos:end="95:23">=</operator> <call pos:start="95:25" pos:end="95:69"><name pos:start="95:25" pos:end="95:43">tcg_get_arg_str_idx</name><argument_list pos:start="95:44" pos:end="95:69">(<argument pos:start="95:45" pos:end="95:45"><expr pos:start="95:45" pos:end="95:45"><name pos:start="95:45" pos:end="95:45">s</name></expr></argument>, <argument pos:start="95:48" pos:end="95:50"><expr pos:start="95:48" pos:end="95:50"><name pos:start="95:48" pos:end="95:50">buf</name></expr></argument>, <argument pos:start="95:53" pos:end="95:63"><expr pos:start="95:53" pos:end="95:63"><sizeof pos:start="95:53" pos:end="95:63">sizeof<argument_list pos:start="95:59" pos:end="95:63">(<argument pos:start="95:60" pos:end="95:62"><expr pos:start="95:60" pos:end="95:62"><name pos:start="95:60" pos:end="95:62">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="95:66" pos:end="95:68"><expr pos:start="95:66" pos:end="95:68"><name pos:start="95:66" pos:end="95:68">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:35"><expr pos:start="99:17" pos:end="99:34"><call pos:start="99:17" pos:end="99:34"><name pos:start="99:17" pos:end="99:24">qemu_log</name><argument_list pos:start="99:25" pos:end="99:34">(<argument pos:start="99:26" pos:end="99:30"><expr pos:start="99:26" pos:end="99:30"><literal type="string" pos:start="99:26" pos:end="99:30">",%s"</literal></expr></argument>, <argument pos:start="99:33" pos:end="99:33"><expr pos:start="99:33" pos:end="99:33"><name pos:start="99:33" pos:end="99:33">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="269:9">else <block pos:start="103:16" pos:end="269:9">{<block_content pos:start="105:13" pos:end="267:13">

            <expr_stmt pos:start="105:13" pos:end="105:40"><expr pos:start="105:13" pos:end="105:39"><call pos:start="105:13" pos:end="105:39"><name pos:start="105:13" pos:end="105:20">qemu_log</name><argument_list pos:start="105:21" pos:end="105:39">(<argument pos:start="105:22" pos:end="105:27"><expr pos:start="105:22" pos:end="105:27"><literal type="string" pos:start="105:22" pos:end="105:27">" %s "</literal></expr></argument>, <argument pos:start="105:30" pos:end="105:38"><expr pos:start="105:30" pos:end="105:38"><name pos:start="105:30" pos:end="105:38"><name pos:start="105:30" pos:end="105:32">def</name><operator pos:start="105:33" pos:end="105:34">-&gt;</operator><name pos:start="105:35" pos:end="105:38">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:37"><expr pos:start="109:13" pos:end="109:36"><name pos:start="109:13" pos:end="109:20">nb_oargs</name> <operator pos:start="109:22" pos:end="109:22">=</operator> <name pos:start="109:24" pos:end="109:36"><name pos:start="109:24" pos:end="109:26">def</name><operator pos:start="109:27" pos:end="109:28">-&gt;</operator><name pos:start="109:29" pos:end="109:36">nb_oargs</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:37"><expr pos:start="111:13" pos:end="111:36"><name pos:start="111:13" pos:end="111:20">nb_iargs</name> <operator pos:start="111:22" pos:end="111:22">=</operator> <name pos:start="111:24" pos:end="111:36"><name pos:start="111:24" pos:end="111:26">def</name><operator pos:start="111:27" pos:end="111:28">-&gt;</operator><name pos:start="111:29" pos:end="111:36">nb_iargs</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:37"><expr pos:start="113:13" pos:end="113:36"><name pos:start="113:13" pos:end="113:20">nb_cargs</name> <operator pos:start="113:22" pos:end="113:22">=</operator> <name pos:start="113:24" pos:end="113:36"><name pos:start="113:24" pos:end="113:26">def</name><operator pos:start="113:27" pos:end="113:28">-&gt;</operator><name pos:start="113:29" pos:end="113:36">nb_cargs</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="117:13" pos:end="117:18"><expr pos:start="117:13" pos:end="117:17"><name pos:start="117:13" pos:end="117:13">k</name> <operator pos:start="117:15" pos:end="117:15">=</operator> <literal type="number" pos:start="117:17" pos:end="117:17">0</literal></expr>;</expr_stmt>

            <for pos:start="119:13" pos:end="131:13">for <control pos:start="119:17" pos:end="119:42">(<init pos:start="119:18" pos:end="119:23"><expr pos:start="119:18" pos:end="119:22"><name pos:start="119:18" pos:end="119:18">i</name> <operator pos:start="119:20" pos:end="119:20">=</operator> <literal type="number" pos:start="119:22" pos:end="119:22">0</literal></expr>;</init> <condition pos:start="119:25" pos:end="119:37"><expr pos:start="119:25" pos:end="119:36"><name pos:start="119:25" pos:end="119:25">i</name> <operator pos:start="119:27" pos:end="119:27">&lt;</operator> <name pos:start="119:29" pos:end="119:36">nb_oargs</name></expr>;</condition> <incr pos:start="119:39" pos:end="119:41"><expr pos:start="119:39" pos:end="119:41"><name pos:start="119:39" pos:end="119:39">i</name><operator pos:start="119:40" pos:end="119:41">++</operator></expr></incr>)</control> <block pos:start="119:44" pos:end="131:13">{<block_content pos:start="121:17" pos:end="129:63">

                <if_stmt pos:start="121:17" pos:end="125:17"><if pos:start="121:17" pos:end="125:17">if <condition pos:start="121:20" pos:end="121:27">(<expr pos:start="121:21" pos:end="121:26"><name pos:start="121:21" pos:end="121:21">k</name> <operator pos:start="121:23" pos:end="121:24">!=</operator> <literal type="number" pos:start="121:26" pos:end="121:26">0</literal></expr>)</condition> <block pos:start="121:29" pos:end="125:17">{<block_content pos:start="123:21" pos:end="123:34">

                    <expr_stmt pos:start="123:21" pos:end="123:34"><expr pos:start="123:21" pos:end="123:33"><call pos:start="123:21" pos:end="123:33"><name pos:start="123:21" pos:end="123:28">qemu_log</name><argument_list pos:start="123:29" pos:end="123:33">(<argument pos:start="123:30" pos:end="123:32"><expr pos:start="123:30" pos:end="123:32"><literal type="string" pos:start="123:30" pos:end="123:32">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="127:17" pos:end="129:63"><expr pos:start="127:17" pos:end="129:62"><call pos:start="127:17" pos:end="129:62"><name pos:start="127:17" pos:end="127:24">qemu_log</name><argument_list pos:start="127:25" pos:end="129:62">(<argument pos:start="127:26" pos:end="127:29"><expr pos:start="127:26" pos:end="127:29"><literal type="string" pos:start="127:26" pos:end="127:29">"%s"</literal></expr></argument>, <argument pos:start="127:32" pos:end="129:61"><expr pos:start="127:32" pos:end="129:61"><call pos:start="127:32" pos:end="129:61"><name pos:start="127:32" pos:end="127:50">tcg_get_arg_str_idx</name><argument_list pos:start="127:51" pos:end="129:61">(<argument pos:start="127:52" pos:end="127:52"><expr pos:start="127:52" pos:end="127:52"><name pos:start="127:52" pos:end="127:52">s</name></expr></argument>, <argument pos:start="127:55" pos:end="127:57"><expr pos:start="127:55" pos:end="127:57"><name pos:start="127:55" pos:end="127:57">buf</name></expr></argument>, <argument pos:start="127:60" pos:end="127:70"><expr pos:start="127:60" pos:end="127:70"><sizeof pos:start="127:60" pos:end="127:70">sizeof<argument_list pos:start="127:66" pos:end="127:70">(<argument pos:start="127:67" pos:end="127:69"><expr pos:start="127:67" pos:end="127:69"><name pos:start="127:67" pos:end="127:69">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                                   <argument pos:start="129:52" pos:end="129:60"><expr pos:start="129:52" pos:end="129:60"><name pos:start="129:52" pos:end="129:60"><name pos:start="129:52" pos:end="129:55">args</name><index pos:start="129:56" pos:end="129:60">[<expr pos:start="129:57" pos:end="129:59"><name pos:start="129:57" pos:end="129:57">k</name><operator pos:start="129:58" pos:end="129:59">++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <for pos:start="133:13" pos:end="145:13">for <control pos:start="133:17" pos:end="133:42">(<init pos:start="133:18" pos:end="133:23"><expr pos:start="133:18" pos:end="133:22"><name pos:start="133:18" pos:end="133:18">i</name> <operator pos:start="133:20" pos:end="133:20">=</operator> <literal type="number" pos:start="133:22" pos:end="133:22">0</literal></expr>;</init> <condition pos:start="133:25" pos:end="133:37"><expr pos:start="133:25" pos:end="133:36"><name pos:start="133:25" pos:end="133:25">i</name> <operator pos:start="133:27" pos:end="133:27">&lt;</operator> <name pos:start="133:29" pos:end="133:36">nb_iargs</name></expr>;</condition> <incr pos:start="133:39" pos:end="133:41"><expr pos:start="133:39" pos:end="133:41"><name pos:start="133:39" pos:end="133:39">i</name><operator pos:start="133:40" pos:end="133:41">++</operator></expr></incr>)</control> <block pos:start="133:44" pos:end="145:13">{<block_content pos:start="135:17" pos:end="143:63">

                <if_stmt pos:start="135:17" pos:end="139:17"><if pos:start="135:17" pos:end="139:17">if <condition pos:start="135:20" pos:end="135:27">(<expr pos:start="135:21" pos:end="135:26"><name pos:start="135:21" pos:end="135:21">k</name> <operator pos:start="135:23" pos:end="135:24">!=</operator> <literal type="number" pos:start="135:26" pos:end="135:26">0</literal></expr>)</condition> <block pos:start="135:29" pos:end="139:17">{<block_content pos:start="137:21" pos:end="137:34">

                    <expr_stmt pos:start="137:21" pos:end="137:34"><expr pos:start="137:21" pos:end="137:33"><call pos:start="137:21" pos:end="137:33"><name pos:start="137:21" pos:end="137:28">qemu_log</name><argument_list pos:start="137:29" pos:end="137:33">(<argument pos:start="137:30" pos:end="137:32"><expr pos:start="137:30" pos:end="137:32"><literal type="string" pos:start="137:30" pos:end="137:32">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="141:17" pos:end="143:63"><expr pos:start="141:17" pos:end="143:62"><call pos:start="141:17" pos:end="143:62"><name pos:start="141:17" pos:end="141:24">qemu_log</name><argument_list pos:start="141:25" pos:end="143:62">(<argument pos:start="141:26" pos:end="141:29"><expr pos:start="141:26" pos:end="141:29"><literal type="string" pos:start="141:26" pos:end="141:29">"%s"</literal></expr></argument>, <argument pos:start="141:32" pos:end="143:61"><expr pos:start="141:32" pos:end="143:61"><call pos:start="141:32" pos:end="143:61"><name pos:start="141:32" pos:end="141:50">tcg_get_arg_str_idx</name><argument_list pos:start="141:51" pos:end="143:61">(<argument pos:start="141:52" pos:end="141:52"><expr pos:start="141:52" pos:end="141:52"><name pos:start="141:52" pos:end="141:52">s</name></expr></argument>, <argument pos:start="141:55" pos:end="141:57"><expr pos:start="141:55" pos:end="141:57"><name pos:start="141:55" pos:end="141:57">buf</name></expr></argument>, <argument pos:start="141:60" pos:end="141:70"><expr pos:start="141:60" pos:end="141:70"><sizeof pos:start="141:60" pos:end="141:70">sizeof<argument_list pos:start="141:66" pos:end="141:70">(<argument pos:start="141:67" pos:end="141:69"><expr pos:start="141:67" pos:end="141:69"><name pos:start="141:67" pos:end="141:69">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                                   <argument pos:start="143:52" pos:end="143:60"><expr pos:start="143:52" pos:end="143:60"><name pos:start="143:52" pos:end="143:60"><name pos:start="143:52" pos:end="143:55">args</name><index pos:start="143:56" pos:end="143:60">[<expr pos:start="143:57" pos:end="143:59"><name pos:start="143:57" pos:end="143:57">k</name><operator pos:start="143:58" pos:end="143:59">++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <switch pos:start="147:13" pos:end="237:13">switch <condition pos:start="147:20" pos:end="147:22">(<expr pos:start="147:21" pos:end="147:21"><name pos:start="147:21" pos:end="147:21">c</name></expr>)</condition> <block pos:start="147:24" pos:end="237:13">{<block_content pos:start="149:13" pos:end="235:22">

            <case pos:start="149:13" pos:end="149:37">case <expr pos:start="149:18" pos:end="149:36"><name pos:start="149:18" pos:end="149:36">INDEX_op_brcond_i32</name></expr>:</case>

            <case pos:start="151:13" pos:end="151:38">case <expr pos:start="151:18" pos:end="151:37"><name pos:start="151:18" pos:end="151:37">INDEX_op_setcond_i32</name></expr>:</case>

            <case pos:start="153:13" pos:end="153:38">case <expr pos:start="153:18" pos:end="153:37"><name pos:start="153:18" pos:end="153:37">INDEX_op_movcond_i32</name></expr>:</case>

            <case pos:start="155:13" pos:end="155:38">case <expr pos:start="155:18" pos:end="155:37"><name pos:start="155:18" pos:end="155:37">INDEX_op_brcond2_i32</name></expr>:</case>

            <case pos:start="157:13" pos:end="157:39">case <expr pos:start="157:18" pos:end="157:38"><name pos:start="157:18" pos:end="157:38">INDEX_op_setcond2_i32</name></expr>:</case>

            <case pos:start="159:13" pos:end="159:37">case <expr pos:start="159:18" pos:end="159:36"><name pos:start="159:18" pos:end="159:36">INDEX_op_brcond_i64</name></expr>:</case>

            <case pos:start="161:13" pos:end="161:38">case <expr pos:start="161:18" pos:end="161:37"><name pos:start="161:18" pos:end="161:37">INDEX_op_setcond_i64</name></expr>:</case>

            <case pos:start="163:13" pos:end="163:38">case <expr pos:start="163:18" pos:end="163:37"><name pos:start="163:18" pos:end="163:37">INDEX_op_movcond_i64</name></expr>:</case>

                <if_stmt pos:start="165:17" pos:end="173:17"><if pos:start="165:17" pos:end="169:17">if <condition pos:start="165:20" pos:end="165:74">(<expr pos:start="165:21" pos:end="165:73"><name pos:start="165:21" pos:end="165:27"><name pos:start="165:21" pos:end="165:24">args</name><index pos:start="165:25" pos:end="165:27">[<expr pos:start="165:26" pos:end="165:26"><name pos:start="165:26" pos:end="165:26">k</name></expr>]</index></name> <operator pos:start="165:29" pos:end="165:29">&lt;</operator> <call pos:start="165:31" pos:end="165:51"><name pos:start="165:31" pos:end="165:40">ARRAY_SIZE</name><argument_list pos:start="165:41" pos:end="165:51">(<argument pos:start="165:42" pos:end="165:50"><expr pos:start="165:42" pos:end="165:50"><name pos:start="165:42" pos:end="165:50">cond_name</name></expr></argument>)</argument_list></call> <operator pos:start="165:53" pos:end="165:54">&amp;&amp;</operator> <name pos:start="165:56" pos:end="165:73"><name pos:start="165:56" pos:end="165:64">cond_name</name><index pos:start="165:65" pos:end="165:73">[<expr pos:start="165:66" pos:end="165:72"><name pos:start="165:66" pos:end="165:72"><name pos:start="165:66" pos:end="165:69">args</name><index pos:start="165:70" pos:end="165:72">[<expr pos:start="165:71" pos:end="165:71"><name pos:start="165:71" pos:end="165:71">k</name></expr>]</index></name></expr>]</index></name></expr>)</condition> <block pos:start="165:76" pos:end="169:17">{<block_content pos:start="167:21" pos:end="167:58">

                    <expr_stmt pos:start="167:21" pos:end="167:58"><expr pos:start="167:21" pos:end="167:57"><call pos:start="167:21" pos:end="167:57"><name pos:start="167:21" pos:end="167:28">qemu_log</name><argument_list pos:start="167:29" pos:end="167:57">(<argument pos:start="167:30" pos:end="167:34"><expr pos:start="167:30" pos:end="167:34"><literal type="string" pos:start="167:30" pos:end="167:34">",%s"</literal></expr></argument>, <argument pos:start="167:37" pos:end="167:56"><expr pos:start="167:37" pos:end="167:56"><name pos:start="167:37" pos:end="167:56"><name pos:start="167:37" pos:end="167:45">cond_name</name><index pos:start="167:46" pos:end="167:56">[<expr pos:start="167:47" pos:end="167:55"><name pos:start="167:47" pos:end="167:55"><name pos:start="167:47" pos:end="167:50">args</name><index pos:start="167:51" pos:end="167:55">[<expr pos:start="167:52" pos:end="167:54"><name pos:start="167:52" pos:end="167:52">k</name><operator pos:start="167:53" pos:end="167:54">++</operator></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="169:19" pos:end="173:17">else <block pos:start="169:24" pos:end="173:17">{<block_content pos:start="171:21" pos:end="171:59">

                    <expr_stmt pos:start="171:21" pos:end="171:59"><expr pos:start="171:21" pos:end="171:58"><call pos:start="171:21" pos:end="171:58"><name pos:start="171:21" pos:end="171:28">qemu_log</name><argument_list pos:start="171:29" pos:end="171:58">(<argument pos:start="171:30" pos:end="171:46"><expr pos:start="171:30" pos:end="171:46"><literal type="string" pos:start="171:30" pos:end="171:36">",$0x%"</literal> <name pos:start="171:38" pos:end="171:46">TCG_PRIlx</name></expr></argument>, <argument pos:start="171:49" pos:end="171:57"><expr pos:start="171:49" pos:end="171:57"><name pos:start="171:49" pos:end="171:57"><name pos:start="171:49" pos:end="171:52">args</name><index pos:start="171:53" pos:end="171:57">[<expr pos:start="171:54" pos:end="171:56"><name pos:start="171:54" pos:end="171:54">k</name><operator pos:start="171:55" pos:end="171:56">++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:22"><expr pos:start="175:17" pos:end="175:21"><name pos:start="175:17" pos:end="175:17">i</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <literal type="number" pos:start="175:21" pos:end="175:21">1</literal></expr>;</expr_stmt>

                <break pos:start="177:17" pos:end="177:22">break;</break>

            <case pos:start="179:13" pos:end="179:38">case <expr pos:start="179:18" pos:end="179:37"><name pos:start="179:18" pos:end="179:37">INDEX_op_qemu_ld_i32</name></expr>:</case>

            <case pos:start="181:13" pos:end="181:38">case <expr pos:start="181:18" pos:end="181:37"><name pos:start="181:18" pos:end="181:37">INDEX_op_qemu_st_i32</name></expr>:</case>

            <case pos:start="183:13" pos:end="183:38">case <expr pos:start="183:18" pos:end="183:37"><name pos:start="183:18" pos:end="183:37">INDEX_op_qemu_ld_i64</name></expr>:</case>

            <case pos:start="185:13" pos:end="185:38">case <expr pos:start="185:18" pos:end="185:37"><name pos:start="185:18" pos:end="185:37">INDEX_op_qemu_st_i64</name></expr>:</case>

                <block pos:start="187:17" pos:end="227:17">{<block_content pos:start="189:21" pos:end="225:26">

                    <decl_stmt pos:start="189:21" pos:end="189:47"><decl pos:start="189:21" pos:end="189:46"><type pos:start="189:21" pos:end="189:31"><name pos:start="189:21" pos:end="189:31">TCGMemOpIdx</name></type> <name pos:start="189:33" pos:end="189:34">oi</name> <init pos:start="189:36" pos:end="189:46">= <expr pos:start="189:38" pos:end="189:46"><name pos:start="189:38" pos:end="189:46"><name pos:start="189:38" pos:end="189:41">args</name><index pos:start="189:42" pos:end="189:46">[<expr pos:start="189:43" pos:end="189:45"><name pos:start="189:43" pos:end="189:43">k</name><operator pos:start="189:44" pos:end="189:45">++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="191:21" pos:end="191:48"><decl pos:start="191:21" pos:end="191:47"><type pos:start="191:21" pos:end="191:28"><name pos:start="191:21" pos:end="191:28">TCGMemOp</name></type> <name pos:start="191:30" pos:end="191:31">op</name> <init pos:start="191:33" pos:end="191:47">= <expr pos:start="191:35" pos:end="191:47"><call pos:start="191:35" pos:end="191:47"><name pos:start="191:35" pos:end="191:43">get_memop</name><argument_list pos:start="191:44" pos:end="191:47">(<argument pos:start="191:45" pos:end="191:46"><expr pos:start="191:45" pos:end="191:46"><name pos:start="191:45" pos:end="191:46">oi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="193:21" pos:end="193:49"><decl pos:start="193:21" pos:end="193:48"><type pos:start="193:21" pos:end="193:28"><name pos:start="193:21" pos:end="193:28">unsigned</name></type> <name pos:start="193:30" pos:end="193:31">ix</name> <init pos:start="193:33" pos:end="193:48">= <expr pos:start="193:35" pos:end="193:48"><call pos:start="193:35" pos:end="193:48"><name pos:start="193:35" pos:end="193:44">get_mmuidx</name><argument_list pos:start="193:45" pos:end="193:48">(<argument pos:start="193:46" pos:end="193:47"><expr pos:start="193:46" pos:end="193:47"><name pos:start="193:46" pos:end="193:47">oi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <if_stmt pos:start="197:21" pos:end="223:21"><if pos:start="197:21" pos:end="201:21">if <condition pos:start="197:24" pos:end="197:63">(<expr pos:start="197:25" pos:end="197:62"><name pos:start="197:25" pos:end="197:26">op</name> <operator pos:start="197:28" pos:end="197:28">&amp;</operator> <operator pos:start="197:30" pos:end="197:30">~</operator><operator pos:start="197:31" pos:end="197:31">(</operator><name pos:start="197:32" pos:end="197:39">MO_AMASK</name> <operator pos:start="197:41" pos:end="197:41">|</operator> <name pos:start="197:43" pos:end="197:50">MO_BSWAP</name> <operator pos:start="197:52" pos:end="197:52">|</operator> <name pos:start="197:54" pos:end="197:61">MO_SSIZE</name><operator pos:start="197:62" pos:end="197:62">)</operator></expr>)</condition> <block pos:start="197:65" pos:end="201:21">{<block_content pos:start="199:25" pos:end="199:54">

                        <expr_stmt pos:start="199:25" pos:end="199:54"><expr pos:start="199:25" pos:end="199:53"><call pos:start="199:25" pos:end="199:53"><name pos:start="199:25" pos:end="199:32">qemu_log</name><argument_list pos:start="199:33" pos:end="199:53">(<argument pos:start="199:34" pos:end="199:44"><expr pos:start="199:34" pos:end="199:44"><literal type="string" pos:start="199:34" pos:end="199:44">",$0x%x,%u"</literal></expr></argument>, <argument pos:start="199:47" pos:end="199:48"><expr pos:start="199:47" pos:end="199:48"><name pos:start="199:47" pos:end="199:48">op</name></expr></argument>, <argument pos:start="199:51" pos:end="199:52"><expr pos:start="199:51" pos:end="199:52"><name pos:start="199:51" pos:end="199:52">ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="201:23" pos:end="223:21">else <block pos:start="201:28" pos:end="223:21">{<block_content pos:start="203:25" pos:end="221:61">

                        <decl_stmt pos:start="203:25" pos:end="203:53"><decl pos:start="203:25" pos:end="203:45"><type pos:start="203:25" pos:end="203:36"><specifier pos:start="203:25" pos:end="203:29">const</specifier> <name pos:start="203:31" pos:end="203:34">char</name> <modifier pos:start="203:36" pos:end="203:36">*</modifier></type><name pos:start="203:37" pos:end="203:40">s_al</name> <init pos:start="203:42" pos:end="203:45">= <expr pos:start="203:44" pos:end="203:45"><literal type="string" pos:start="203:44" pos:end="203:45">""</literal></expr></init></decl>, <decl pos:start="203:48" pos:end="203:52"><type ref="prev" pos:start="203:25" pos:end="203:36"><modifier pos:start="203:48" pos:end="203:48">*</modifier></type><name pos:start="203:49" pos:end="203:52">s_op</name></decl>;</decl_stmt>

                        <if_stmt pos:start="205:25" pos:end="217:25"><if pos:start="205:25" pos:end="217:25">if <condition pos:start="205:28" pos:end="205:42">(<expr pos:start="205:29" pos:end="205:41"><name pos:start="205:29" pos:end="205:30">op</name> <operator pos:start="205:32" pos:end="205:32">&amp;</operator> <name pos:start="205:34" pos:end="205:41">MO_AMASK</name></expr>)</condition> <block pos:start="205:44" pos:end="217:25">{<block_content pos:start="207:29" pos:end="215:29">

                            <if_stmt pos:start="207:29" pos:end="215:29"><if pos:start="207:29" pos:end="211:29">if <condition pos:start="207:32" pos:end="207:60">(<expr pos:start="207:33" pos:end="207:59"><operator pos:start="207:33" pos:end="207:33">(</operator><name pos:start="207:34" pos:end="207:35">op</name> <operator pos:start="207:37" pos:end="207:37">&amp;</operator> <name pos:start="207:39" pos:end="207:46">MO_AMASK</name><operator pos:start="207:47" pos:end="207:47">)</operator> <operator pos:start="207:49" pos:end="207:50">==</operator> <name pos:start="207:52" pos:end="207:59">MO_ALIGN</name></expr>)</condition> <block pos:start="207:62" pos:end="211:29">{<block_content pos:start="209:33" pos:end="209:45">

                                <expr_stmt pos:start="209:33" pos:end="209:45"><expr pos:start="209:33" pos:end="209:44"><name pos:start="209:33" pos:end="209:36">s_al</name> <operator pos:start="209:38" pos:end="209:38">=</operator> <literal type="string" pos:start="209:40" pos:end="209:44">"al+"</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="211:31" pos:end="215:29">else <block pos:start="211:36" pos:end="215:29">{<block_content pos:start="213:33" pos:end="213:45">

                                <expr_stmt pos:start="213:33" pos:end="213:45"><expr pos:start="213:33" pos:end="213:44"><name pos:start="213:33" pos:end="213:36">s_al</name> <operator pos:start="213:38" pos:end="213:38">=</operator> <literal type="string" pos:start="213:40" pos:end="213:44">"un+"</literal></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="219:25" pos:end="219:69"><expr pos:start="219:25" pos:end="219:68"><name pos:start="219:25" pos:end="219:28">s_op</name> <operator pos:start="219:30" pos:end="219:30">=</operator> <name pos:start="219:32" pos:end="219:68"><name pos:start="219:32" pos:end="219:40">ldst_name</name><index pos:start="219:41" pos:end="219:68">[<expr pos:start="219:42" pos:end="219:67"><name pos:start="219:42" pos:end="219:43">op</name> <operator pos:start="219:45" pos:end="219:45">&amp;</operator> <operator pos:start="219:47" pos:end="219:47">(</operator><name pos:start="219:48" pos:end="219:55">MO_BSWAP</name> <operator pos:start="219:57" pos:end="219:57">|</operator> <name pos:start="219:59" pos:end="219:66">MO_SSIZE</name><operator pos:start="219:67" pos:end="219:67">)</operator></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="221:25" pos:end="221:61"><expr pos:start="221:25" pos:end="221:60"><call pos:start="221:25" pos:end="221:60"><name pos:start="221:25" pos:end="221:32">qemu_log</name><argument_list pos:start="221:33" pos:end="221:60">(<argument pos:start="221:34" pos:end="221:43"><expr pos:start="221:34" pos:end="221:43"><literal type="string" pos:start="221:34" pos:end="221:43">",%s%s,%u"</literal></expr></argument>, <argument pos:start="221:46" pos:end="221:49"><expr pos:start="221:46" pos:end="221:49"><name pos:start="221:46" pos:end="221:49">s_al</name></expr></argument>, <argument pos:start="221:52" pos:end="221:55"><expr pos:start="221:52" pos:end="221:55"><name pos:start="221:52" pos:end="221:55">s_op</name></expr></argument>, <argument pos:start="221:58" pos:end="221:59"><expr pos:start="221:58" pos:end="221:59"><name pos:start="221:58" pos:end="221:59">ix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="225:21" pos:end="225:26"><expr pos:start="225:21" pos:end="225:25"><name pos:start="225:21" pos:end="225:21">i</name> <operator pos:start="225:23" pos:end="225:23">=</operator> <literal type="number" pos:start="225:25" pos:end="225:25">1</literal></expr>;</expr_stmt>

                </block_content>}</block>

                <break pos:start="229:17" pos:end="229:22">break;</break>

            <default pos:start="231:13" pos:end="231:20">default:</default>

                <expr_stmt pos:start="233:17" pos:end="233:22"><expr pos:start="233:17" pos:end="233:21"><name pos:start="233:17" pos:end="233:17">i</name> <operator pos:start="233:19" pos:end="233:19">=</operator> <literal type="number" pos:start="233:21" pos:end="233:21">0</literal></expr>;</expr_stmt>

                <break pos:start="235:17" pos:end="235:22">break;</break>

            </block_content>}</block></switch>

            <switch pos:start="239:13" pos:end="261:13">switch <condition pos:start="239:20" pos:end="239:22">(<expr pos:start="239:21" pos:end="239:21"><name pos:start="239:21" pos:end="239:21">c</name></expr>)</condition> <block pos:start="239:24" pos:end="261:13">{<block_content pos:start="241:13" pos:end="259:22">

            <case pos:start="241:13" pos:end="241:36">case <expr pos:start="241:18" pos:end="241:35"><name pos:start="241:18" pos:end="241:35">INDEX_op_set_label</name></expr>:</case>

            <case pos:start="243:13" pos:end="243:29">case <expr pos:start="243:18" pos:end="243:28"><name pos:start="243:18" pos:end="243:28">INDEX_op_br</name></expr>:</case>

            <case pos:start="245:13" pos:end="245:37">case <expr pos:start="245:18" pos:end="245:36"><name pos:start="245:18" pos:end="245:36">INDEX_op_brcond_i32</name></expr>:</case>

            <case pos:start="247:13" pos:end="247:37">case <expr pos:start="247:18" pos:end="247:36"><name pos:start="247:18" pos:end="247:36">INDEX_op_brcond_i64</name></expr>:</case>

            <case pos:start="249:13" pos:end="249:38">case <expr pos:start="249:18" pos:end="249:37"><name pos:start="249:18" pos:end="249:37">INDEX_op_brcond2_i32</name></expr>:</case>

                <expr_stmt pos:start="251:17" pos:end="251:73"><expr pos:start="251:17" pos:end="251:72"><call pos:start="251:17" pos:end="251:72"><name pos:start="251:17" pos:end="251:24">qemu_log</name><argument_list pos:start="251:25" pos:end="251:72">(<argument pos:start="251:26" pos:end="251:33"><expr pos:start="251:26" pos:end="251:33"><literal type="string" pos:start="251:26" pos:end="251:33">"%s$L%d"</literal></expr></argument>, <argument pos:start="251:36" pos:end="251:47"><expr pos:start="251:36" pos:end="251:47"><ternary pos:start="251:36" pos:end="251:47"><condition pos:start="251:36" pos:end="251:38"><expr pos:start="251:36" pos:end="251:36"><name pos:start="251:36" pos:end="251:36">k</name></expr> ?</condition><then pos:start="251:40" pos:end="251:42"> <expr pos:start="251:40" pos:end="251:42"><literal type="string" pos:start="251:40" pos:end="251:42">","</literal></expr> </then><else pos:start="251:44" pos:end="251:47">: <expr pos:start="251:46" pos:end="251:47"><literal type="string" pos:start="251:46" pos:end="251:47">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="251:50" pos:end="251:71"><expr pos:start="251:50" pos:end="251:71"><call pos:start="251:50" pos:end="251:67"><name pos:start="251:50" pos:end="251:58">arg_label</name><argument_list pos:start="251:59" pos:end="251:67">(<argument pos:start="251:60" pos:end="251:66"><expr pos:start="251:60" pos:end="251:66"><name pos:start="251:60" pos:end="251:66"><name pos:start="251:60" pos:end="251:63">args</name><index pos:start="251:64" pos:end="251:66">[<expr pos:start="251:65" pos:end="251:65"><name pos:start="251:65" pos:end="251:65">k</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="251:68" pos:end="251:69">-&gt;</operator><name pos:start="251:70" pos:end="251:71">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:25"><expr pos:start="253:17" pos:end="253:19"><name pos:start="253:17" pos:end="253:17">i</name><operator pos:start="253:18" pos:end="253:19">++</operator></expr><operator pos:start="253:20" pos:end="253:20">,</operator> <expr pos:start="253:22" pos:end="253:24"><name pos:start="253:22" pos:end="253:22">k</name><operator pos:start="253:23" pos:end="253:24">++</operator></expr>;</expr_stmt>

                <break pos:start="255:17" pos:end="255:22">break;</break>

            <default pos:start="257:13" pos:end="257:20">default:</default>

                <break pos:start="259:17" pos:end="259:22">break;</break>

            </block_content>}</block></switch>

            <for pos:start="263:13" pos:end="267:13">for <control pos:start="263:17" pos:end="263:42">(<init pos:start="263:18" pos:end="263:18">;</init> <condition pos:start="263:20" pos:end="263:32"><expr pos:start="263:20" pos:end="263:31"><name pos:start="263:20" pos:end="263:20">i</name> <operator pos:start="263:22" pos:end="263:22">&lt;</operator> <name pos:start="263:24" pos:end="263:31">nb_cargs</name></expr>;</condition> <incr pos:start="263:34" pos:end="263:41"><expr pos:start="263:34" pos:end="263:36"><name pos:start="263:34" pos:end="263:34">i</name><operator pos:start="263:35" pos:end="263:36">++</operator></expr><operator pos:start="263:37" pos:end="263:37">,</operator> <expr pos:start="263:39" pos:end="263:41"><name pos:start="263:39" pos:end="263:39">k</name><operator pos:start="263:40" pos:end="263:41">++</operator></expr></incr>)</control> <block pos:start="263:44" pos:end="267:13">{<block_content pos:start="265:17" pos:end="265:68">

                <expr_stmt pos:start="265:17" pos:end="265:68"><expr pos:start="265:17" pos:end="265:67"><call pos:start="265:17" pos:end="265:67"><name pos:start="265:17" pos:end="265:24">qemu_log</name><argument_list pos:start="265:25" pos:end="265:67">(<argument pos:start="265:26" pos:end="265:43"><expr pos:start="265:26" pos:end="265:43"><literal type="string" pos:start="265:26" pos:end="265:33">"%s$0x%"</literal> <name pos:start="265:35" pos:end="265:43">TCG_PRIlx</name></expr></argument>, <argument pos:start="265:46" pos:end="265:57"><expr pos:start="265:46" pos:end="265:57"><ternary pos:start="265:46" pos:end="265:57"><condition pos:start="265:46" pos:end="265:48"><expr pos:start="265:46" pos:end="265:46"><name pos:start="265:46" pos:end="265:46">k</name></expr> ?</condition><then pos:start="265:50" pos:end="265:52"> <expr pos:start="265:50" pos:end="265:52"><literal type="string" pos:start="265:50" pos:end="265:52">","</literal></expr> </then><else pos:start="265:54" pos:end="265:57">: <expr pos:start="265:56" pos:end="265:57"><literal type="string" pos:start="265:56" pos:end="265:57">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="265:60" pos:end="265:66"><expr pos:start="265:60" pos:end="265:66"><name pos:start="265:60" pos:end="265:66"><name pos:start="265:60" pos:end="265:63">args</name><index pos:start="265:64" pos:end="265:66">[<expr pos:start="265:65" pos:end="265:65"><name pos:start="265:65" pos:end="265:65">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:23"><expr pos:start="271:9" pos:end="271:22"><call pos:start="271:9" pos:end="271:22"><name pos:start="271:9" pos:end="271:16">qemu_log</name><argument_list pos:start="271:17" pos:end="271:22">(<argument pos:start="271:18" pos:end="271:21"><expr pos:start="271:18" pos:end="271:21"><literal type="string" pos:start="271:18" pos:end="271:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
