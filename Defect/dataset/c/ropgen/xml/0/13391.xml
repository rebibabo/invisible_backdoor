<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13391.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">vaapi_encode_h264_write_sei</name><parameter_list pos:start="1:40" pos:end="5:64">(<parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:58"><name pos:start="1:41" pos:end="1:53">PutBitContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">pbc</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:63"><decl pos:start="3:41" pos:end="3:63"><type pos:start="3:41" pos:end="3:63"><name pos:start="3:41" pos:end="3:58">VAAPIEncodeContext</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:63">ctx</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:63"><decl pos:start="5:41" pos:end="5:63"><type pos:start="5:41" pos:end="5:63"><name pos:start="5:41" pos:end="5:58">VAAPIEncodePicture</name> <modifier pos:start="5:60" pos:end="5:60">*</modifier></type><name pos:start="5:61" pos:end="5:63">pic</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="107:1">{<block_content pos:start="9:5" pos:end="105:47">

    <decl_stmt pos:start="9:5" pos:end="9:50"><decl pos:start="9:5" pos:end="9:49"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:26">VAAPIEncodeH264Context</name> <modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:32">priv</name> <init pos:start="9:34" pos:end="9:49">= <expr pos:start="9:36" pos:end="9:49"><name pos:start="9:36" pos:end="9:49"><name pos:start="9:36" pos:end="9:38">ctx</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:49">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">PutBitContext</name></type> <name pos:start="11:19" pos:end="11:30">payload_bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:21"><name pos:start="13:10" pos:end="13:16">payload</name><index pos:start="13:17" pos:end="13:21">[<expr pos:start="13:18" pos:end="13:20"><literal type="number" pos:start="13:18" pos:end="13:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:38"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:20">payload_type</name></decl>, <decl pos:start="15:23" pos:end="15:34"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:23" pos:end="15:34">payload_size</name></decl>, <decl pos:start="15:37" pos:end="15:37"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:37" pos:end="15:37">i</name></decl>;</decl_stmt>

    <function_decl pos:start="17:5" pos:end="21:58"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">void</name></type> (<modifier pos:start="17:11" pos:end="17:11">*</modifier><name pos:start="17:12" pos:end="17:24">write_payload</name>)<parameter_list pos:start="17:26" pos:end="21:50">(<parameter pos:start="17:27" pos:end="17:44"><decl pos:start="17:27" pos:end="17:44"><type pos:start="17:27" pos:end="17:44"><name pos:start="17:27" pos:end="17:39">PutBitContext</name> <modifier pos:start="17:41" pos:end="17:41">*</modifier></type><name pos:start="17:42" pos:end="17:44">pbc</name></decl></parameter>,

                          <parameter pos:start="19:27" pos:end="19:49"><decl pos:start="19:27" pos:end="19:49"><type pos:start="19:27" pos:end="19:49"><name pos:start="19:27" pos:end="19:44">VAAPIEncodeContext</name> <modifier pos:start="19:46" pos:end="19:46">*</modifier></type><name pos:start="19:47" pos:end="19:49">ctx</name></decl></parameter>,

                          <parameter pos:start="21:27" pos:end="21:49"><decl pos:start="21:27" pos:end="21:49"><type pos:start="21:27" pos:end="21:49"><name pos:start="21:27" pos:end="21:44">VAAPIEncodePicture</name> <modifier pos:start="21:46" pos:end="21:46">*</modifier></type><name pos:start="21:47" pos:end="21:49">pic</name></decl></parameter>)</parameter_list> <init pos:start="21:52" pos:end="21:57">= <expr pos:start="21:54" pos:end="21:57"><name pos:start="21:54" pos:end="21:57">NULL</name></expr></init>;</function_decl>



    <expr_stmt pos:start="25:5" pos:end="25:56"><expr pos:start="25:5" pos:end="25:55"><call pos:start="25:5" pos:end="25:55"><name pos:start="25:5" pos:end="25:38">vaapi_encode_h264_write_nal_header</name><argument_list pos:start="25:39" pos:end="25:55">(<argument pos:start="25:40" pos:end="25:42"><expr pos:start="25:40" pos:end="25:42"><name pos:start="25:40" pos:end="25:42">pbc</name></expr></argument>, <argument pos:start="25:45" pos:end="25:51"><expr pos:start="25:45" pos:end="25:51"><name pos:start="25:45" pos:end="25:51">NAL_SEI</name></expr></argument>, <argument pos:start="25:54" pos:end="25:54"><expr pos:start="25:54" pos:end="25:54"><literal type="number" pos:start="25:54" pos:end="25:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="29:5" pos:end="101:5">for <control pos:start="29:9" pos:end="29:61">(<init pos:start="29:10" pos:end="29:26"><expr pos:start="29:10" pos:end="29:25"><name pos:start="29:10" pos:end="29:21">payload_type</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>;</init> <condition pos:start="29:28" pos:end="29:45"><expr pos:start="29:28" pos:end="29:44"><name pos:start="29:28" pos:end="29:39">payload_type</name> <operator pos:start="29:41" pos:end="29:41">&lt;</operator> <literal type="number" pos:start="29:43" pos:end="29:44">64</literal></expr>;</condition> <incr pos:start="29:47" pos:end="29:60"><expr pos:start="29:47" pos:end="29:60"><name pos:start="29:47" pos:end="29:58">payload_type</name><operator pos:start="29:59" pos:end="29:60">++</operator></expr></incr>)</control> <block pos:start="29:63" pos:end="101:5">{<block_content pos:start="31:9" pos:end="99:49">

        <switch pos:start="31:9" pos:end="69:9">switch <condition pos:start="31:16" pos:end="31:29">(<expr pos:start="31:17" pos:end="31:28"><name pos:start="31:17" pos:end="31:28">payload_type</name></expr>)</condition> <block pos:start="31:31" pos:end="69:9">{<block_content pos:start="33:9" pos:end="67:21">

        <case pos:start="33:9" pos:end="33:39">case <expr pos:start="33:14" pos:end="33:38"><name pos:start="33:14" pos:end="33:38">SEI_TYPE_BUFFERING_PERIOD</name></expr>:</case>

            <if_stmt pos:start="35:13" pos:end="39:25"><if pos:start="35:13" pos:end="39:25">if <condition pos:start="35:16" pos:end="37:46">(<expr pos:start="35:17" pos:end="37:45"><operator pos:start="35:17" pos:end="35:17">!</operator><name pos:start="35:18" pos:end="35:38"><name pos:start="35:18" pos:end="35:21">priv</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:38">send_timing_sei</name></name> <operator pos:start="35:40" pos:end="35:41">||</operator>

                <name pos:start="37:17" pos:end="37:25"><name pos:start="37:17" pos:end="37:19">pic</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:25">type</name></name> <operator pos:start="37:27" pos:end="37:28">!=</operator> <name pos:start="37:30" pos:end="37:45">PICTURE_TYPE_IDR</name></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:25"><block_content pos:start="39:17" pos:end="39:25">

                <continue pos:start="39:17" pos:end="39:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:70"><expr pos:start="41:13" pos:end="41:69"><name pos:start="41:13" pos:end="41:25">write_payload</name> <operator pos:start="41:27" pos:end="41:27">=</operator> <operator pos:start="41:29" pos:end="41:29">&amp;</operator><name pos:start="41:30" pos:end="41:69">vaapi_encode_h264_write_buffering_period</name></expr>;</expr_stmt>

            <break pos:start="43:13" pos:end="43:18">break;</break>

        <case pos:start="45:9" pos:end="45:33">case <expr pos:start="45:14" pos:end="45:32"><name pos:start="45:14" pos:end="45:32">SEI_TYPE_PIC_TIMING</name></expr>:</case>

            <if_stmt pos:start="47:13" pos:end="49:25"><if pos:start="47:13" pos:end="49:25">if <condition pos:start="47:16" pos:end="47:39">(<expr pos:start="47:17" pos:end="47:38"><operator pos:start="47:17" pos:end="47:17">!</operator><name pos:start="47:18" pos:end="47:38"><name pos:start="47:18" pos:end="47:21">priv</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:38">send_timing_sei</name></name></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:25"><block_content pos:start="49:17" pos:end="49:25">

                <continue pos:start="49:17" pos:end="49:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:64"><expr pos:start="51:13" pos:end="51:63"><name pos:start="51:13" pos:end="51:25">write_payload</name> <operator pos:start="51:27" pos:end="51:27">=</operator> <operator pos:start="51:29" pos:end="51:29">&amp;</operator><name pos:start="51:30" pos:end="51:63">vaapi_encode_h264_write_pic_timing</name></expr>;</expr_stmt>

            <break pos:start="53:13" pos:end="53:18">break;</break>

        <case pos:start="55:9" pos:end="55:45">case <expr pos:start="55:14" pos:end="55:44"><name pos:start="55:14" pos:end="55:44">SEI_TYPE_USER_DATA_UNREGISTERED</name></expr>:</case>

            <if_stmt pos:start="57:13" pos:end="59:25"><if pos:start="57:13" pos:end="59:25">if <condition pos:start="57:16" pos:end="57:39">(<expr pos:start="57:17" pos:end="57:38"><name pos:start="57:17" pos:end="57:33"><name pos:start="57:17" pos:end="57:19">pic</name><operator pos:start="57:20" pos:end="57:21">-&gt;</operator><name pos:start="57:22" pos:end="57:33">encode_order</name></name> <operator pos:start="57:35" pos:end="57:36">!=</operator> <literal type="number" pos:start="57:38" pos:end="57:38">0</literal></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:25"><block_content pos:start="59:17" pos:end="59:25">

                <continue pos:start="59:17" pos:end="59:25">continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:64"><expr pos:start="61:13" pos:end="61:63"><name pos:start="61:13" pos:end="61:25">write_payload</name> <operator pos:start="61:27" pos:end="61:27">=</operator> <operator pos:start="61:29" pos:end="61:29">&amp;</operator><name pos:start="61:30" pos:end="61:63">vaapi_encode_h264_write_identifier</name></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        <default pos:start="65:9" pos:end="65:16">default:</default>

            <continue pos:start="67:13" pos:end="67:21">continue;</continue>

        </block_content>}</block></switch>



        <expr_stmt pos:start="73:9" pos:end="73:63"><expr pos:start="73:9" pos:end="73:62"><call pos:start="73:9" pos:end="73:62"><name pos:start="73:9" pos:end="73:21">init_put_bits</name><argument_list pos:start="73:22" pos:end="73:62">(<argument pos:start="73:23" pos:end="73:35"><expr pos:start="73:23" pos:end="73:35"><operator pos:start="73:23" pos:end="73:23">&amp;</operator><name pos:start="73:24" pos:end="73:35">payload_bits</name></expr></argument>, <argument pos:start="73:38" pos:end="73:44"><expr pos:start="73:38" pos:end="73:44"><name pos:start="73:38" pos:end="73:44">payload</name></expr></argument>, <argument pos:start="73:47" pos:end="73:61"><expr pos:start="73:47" pos:end="73:61"><sizeof pos:start="73:47" pos:end="73:61">sizeof<argument_list pos:start="73:53" pos:end="73:61">(<argument pos:start="73:54" pos:end="73:60"><expr pos:start="73:54" pos:end="73:60"><name pos:start="73:54" pos:end="73:60">payload</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:47"><expr pos:start="75:9" pos:end="75:46"><call pos:start="75:9" pos:end="75:46"><name pos:start="75:9" pos:end="75:21">write_payload</name><argument_list pos:start="75:22" pos:end="75:46">(<argument pos:start="75:23" pos:end="75:35"><expr pos:start="75:23" pos:end="75:35"><operator pos:start="75:23" pos:end="75:23">&amp;</operator><name pos:start="75:24" pos:end="75:35">payload_bits</name></expr></argument>, <argument pos:start="75:38" pos:end="75:40"><expr pos:start="75:38" pos:end="75:40"><name pos:start="75:38" pos:end="75:40">ctx</name></expr></argument>, <argument pos:start="75:43" pos:end="75:45"><expr pos:start="75:43" pos:end="75:45"><name pos:start="75:43" pos:end="75:45">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="85:9"><if pos:start="77:9" pos:end="85:9">if <condition pos:start="77:12" pos:end="77:46">(<expr pos:start="77:13" pos:end="77:45"><call pos:start="77:13" pos:end="77:41"><name pos:start="77:13" pos:end="77:26">put_bits_count</name><argument_list pos:start="77:27" pos:end="77:41">(<argument pos:start="77:28" pos:end="77:40"><expr pos:start="77:28" pos:end="77:40"><operator pos:start="77:28" pos:end="77:28">&amp;</operator><name pos:start="77:29" pos:end="77:40">payload_bits</name></expr></argument>)</argument_list></call> <operator pos:start="77:43" pos:end="77:43">&amp;</operator> <literal type="number" pos:start="77:45" pos:end="77:45">7</literal></expr>)</condition> <block pos:start="77:48" pos:end="85:9">{<block_content pos:start="79:13" pos:end="83:64">

            <expr_stmt pos:start="79:13" pos:end="79:59"><expr pos:start="79:13" pos:end="79:58"><call pos:start="79:13" pos:end="79:58"><name pos:start="79:13" pos:end="79:19">write_u</name><argument_list pos:start="79:20" pos:end="79:58">(<argument pos:start="79:21" pos:end="79:33"><expr pos:start="79:21" pos:end="79:33"><operator pos:start="79:21" pos:end="79:21">&amp;</operator><name pos:start="79:22" pos:end="79:33">payload_bits</name></expr></argument>, <argument pos:start="79:36" pos:end="79:36"><expr pos:start="79:36" pos:end="79:36"><literal type="number" pos:start="79:36" pos:end="79:36">1</literal></expr></argument>, <argument pos:start="79:39" pos:end="79:39"><expr pos:start="79:39" pos:end="79:39"><literal type="number" pos:start="79:39" pos:end="79:39">1</literal></expr></argument>, <argument pos:start="79:42" pos:end="79:57"><expr pos:start="79:42" pos:end="79:57"><name pos:start="79:42" pos:end="79:57">bit_equal_to_one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="81:13" pos:end="83:64">while <condition pos:start="81:19" pos:end="81:53">(<expr pos:start="81:20" pos:end="81:52"><call pos:start="81:20" pos:end="81:48"><name pos:start="81:20" pos:end="81:33">put_bits_count</name><argument_list pos:start="81:34" pos:end="81:48">(<argument pos:start="81:35" pos:end="81:47"><expr pos:start="81:35" pos:end="81:47"><operator pos:start="81:35" pos:end="81:35">&amp;</operator><name pos:start="81:36" pos:end="81:47">payload_bits</name></expr></argument>)</argument_list></call> <operator pos:start="81:50" pos:end="81:50">&amp;</operator> <literal type="number" pos:start="81:52" pos:end="81:52">7</literal></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="83:64"><block_content pos:start="83:17" pos:end="83:64">

                <expr_stmt pos:start="83:17" pos:end="83:64"><expr pos:start="83:17" pos:end="83:63"><call pos:start="83:17" pos:end="83:63"><name pos:start="83:17" pos:end="83:23">write_u</name><argument_list pos:start="83:24" pos:end="83:63">(<argument pos:start="83:25" pos:end="83:37"><expr pos:start="83:25" pos:end="83:37"><operator pos:start="83:25" pos:end="83:25">&amp;</operator><name pos:start="83:26" pos:end="83:37">payload_bits</name></expr></argument>, <argument pos:start="83:40" pos:end="83:40"><expr pos:start="83:40" pos:end="83:40"><literal type="number" pos:start="83:40" pos:end="83:40">1</literal></expr></argument>, <argument pos:start="83:43" pos:end="83:43"><expr pos:start="83:43" pos:end="83:43"><literal type="number" pos:start="83:43" pos:end="83:43">0</literal></expr></argument>, <argument pos:start="83:46" pos:end="83:62"><expr pos:start="83:46" pos:end="83:62"><name pos:start="83:46" pos:end="83:62">bit_equal_to_zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:57"><expr pos:start="87:9" pos:end="87:56"><name pos:start="87:9" pos:end="87:20">payload_size</name> <operator pos:start="87:22" pos:end="87:22">=</operator> <call pos:start="87:24" pos:end="87:52"><name pos:start="87:24" pos:end="87:37">put_bits_count</name><argument_list pos:start="87:38" pos:end="87:52">(<argument pos:start="87:39" pos:end="87:51"><expr pos:start="87:39" pos:end="87:51"><operator pos:start="87:39" pos:end="87:39">&amp;</operator><name pos:start="87:40" pos:end="87:51">payload_bits</name></expr></argument>)</argument_list></call> <operator pos:start="87:54" pos:end="87:54">/</operator> <literal type="number" pos:start="87:56" pos:end="87:56">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:38"><expr pos:start="89:9" pos:end="89:37"><call pos:start="89:9" pos:end="89:37"><name pos:start="89:9" pos:end="89:22">flush_put_bits</name><argument_list pos:start="89:23" pos:end="89:37">(<argument pos:start="89:24" pos:end="89:36"><expr pos:start="89:24" pos:end="89:36"><operator pos:start="89:24" pos:end="89:24">&amp;</operator><name pos:start="89:25" pos:end="89:36">payload_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:51"><expr pos:start="93:9" pos:end="93:50"><call pos:start="93:9" pos:end="93:50"><name pos:start="93:9" pos:end="93:9">u</name><argument_list pos:start="93:10" pos:end="93:50">(<argument pos:start="93:11" pos:end="93:11"><expr pos:start="93:11" pos:end="93:11"><literal type="number" pos:start="93:11" pos:end="93:11">8</literal></expr></argument>, <argument pos:start="93:14" pos:end="93:25"><expr pos:start="93:14" pos:end="93:25"><name pos:start="93:14" pos:end="93:25">payload_type</name></expr></argument>, <argument pos:start="93:28" pos:end="93:49"><expr pos:start="93:28" pos:end="93:49"><name pos:start="93:28" pos:end="93:49">last_payload_type_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:51"><expr pos:start="95:9" pos:end="95:50"><call pos:start="95:9" pos:end="95:50"><name pos:start="95:9" pos:end="95:9">u</name><argument_list pos:start="95:10" pos:end="95:50">(<argument pos:start="95:11" pos:end="95:11"><expr pos:start="95:11" pos:end="95:11"><literal type="number" pos:start="95:11" pos:end="95:11">8</literal></expr></argument>, <argument pos:start="95:14" pos:end="95:25"><expr pos:start="95:14" pos:end="95:25"><name pos:start="95:14" pos:end="95:25">payload_size</name></expr></argument>, <argument pos:start="95:28" pos:end="95:49"><expr pos:start="95:28" pos:end="95:49"><name pos:start="95:28" pos:end="95:49">last_payload_size_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="97:9" pos:end="99:49">for <control pos:start="97:13" pos:end="97:42">(<init pos:start="97:14" pos:end="97:19"><expr pos:start="97:14" pos:end="97:18"><name pos:start="97:14" pos:end="97:14">i</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <literal type="number" pos:start="97:18" pos:end="97:18">0</literal></expr>;</init> <condition pos:start="97:21" pos:end="97:37"><expr pos:start="97:21" pos:end="97:36"><name pos:start="97:21" pos:end="97:21">i</name> <operator pos:start="97:23" pos:end="97:23">&lt;</operator> <name pos:start="97:25" pos:end="97:36">payload_size</name></expr>;</condition> <incr pos:start="97:39" pos:end="97:41"><expr pos:start="97:39" pos:end="97:41"><name pos:start="97:39" pos:end="97:39">i</name><operator pos:start="97:40" pos:end="97:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="99:13" pos:end="99:49"><block_content pos:start="99:13" pos:end="99:49">

            <expr_stmt pos:start="99:13" pos:end="99:49"><expr pos:start="99:13" pos:end="99:48"><call pos:start="99:13" pos:end="99:48"><name pos:start="99:13" pos:end="99:13">u</name><argument_list pos:start="99:14" pos:end="99:48">(<argument pos:start="99:15" pos:end="99:15"><expr pos:start="99:15" pos:end="99:15"><literal type="number" pos:start="99:15" pos:end="99:15">8</literal></expr></argument>, <argument pos:start="99:18" pos:end="99:34"><expr pos:start="99:18" pos:end="99:34"><name pos:start="99:18" pos:end="99:27"><name pos:start="99:18" pos:end="99:24">payload</name><index pos:start="99:25" pos:end="99:27">[<expr pos:start="99:26" pos:end="99:26"><name pos:start="99:26" pos:end="99:26">i</name></expr>]</index></name> <operator pos:start="99:29" pos:end="99:29">&amp;</operator> <literal type="number" pos:start="99:31" pos:end="99:34">0xff</literal></expr></argument>, <argument pos:start="99:37" pos:end="99:47"><expr pos:start="99:37" pos:end="99:47"><name pos:start="99:37" pos:end="99:47">sei_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="105:5" pos:end="105:47"><expr pos:start="105:5" pos:end="105:46"><call pos:start="105:5" pos:end="105:46"><name pos:start="105:5" pos:end="105:41">vaapi_encode_h264_write_trailing_rbsp</name><argument_list pos:start="105:42" pos:end="105:46">(<argument pos:start="105:43" pos:end="105:45"><expr pos:start="105:43" pos:end="105:45"><name pos:start="105:43" pos:end="105:45">pbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
