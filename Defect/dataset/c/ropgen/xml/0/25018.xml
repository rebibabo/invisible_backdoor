<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25018.c" pos:tabs="8"><function pos:start="1:1" pos:end="197:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">amf_parse_object</name><parameter_list pos:start="1:28" pos:end="1:135">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:65"><decl pos:start="1:49" pos:end="1:65"><type pos:start="1:49" pos:end="1:65"><name pos:start="1:49" pos:end="1:56">AVStream</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:65">astream</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:84"><decl pos:start="1:68" pos:end="1:84"><type pos:start="1:68" pos:end="1:84"><name pos:start="1:68" pos:end="1:75">AVStream</name> <modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:84">vstream</name></decl></parameter>, <parameter pos:start="1:87" pos:end="1:101"><decl pos:start="1:87" pos:end="1:101"><type pos:start="1:87" pos:end="1:101"><specifier pos:start="1:87" pos:end="1:91">const</specifier> <name pos:start="1:93" pos:end="1:96">char</name> <modifier pos:start="1:98" pos:end="1:98">*</modifier></type><name pos:start="1:99" pos:end="1:101">key</name></decl></parameter>, <parameter pos:start="1:104" pos:end="1:123"><decl pos:start="1:104" pos:end="1:123"><type pos:start="1:104" pos:end="1:123"><name pos:start="1:104" pos:end="1:111">unsigned</name> <name pos:start="1:113" pos:end="1:115">int</name></type> <name pos:start="1:117" pos:end="1:123">max_pos</name></decl></parameter>, <parameter pos:start="1:126" pos:end="1:134"><decl pos:start="1:126" pos:end="1:134"><type pos:start="1:126" pos:end="1:134"><name pos:start="1:126" pos:end="1:128">int</name></type> <name pos:start="1:130" pos:end="1:134">depth</name></decl></parameter>)</parameter_list> <block pos:start="1:137" pos:end="197:1">{<block_content pos:start="3:5" pos:end="195:13">

    <decl_stmt pos:start="3:5" pos:end="3:36"><decl pos:start="3:5" pos:end="3:26"><type pos:start="3:5" pos:end="3:20"><name pos:start="3:5" pos:end="3:18">AVCodecContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier></type><name pos:start="3:21" pos:end="3:26">acodec</name></decl>, <decl pos:start="3:29" pos:end="3:35"><type ref="prev" pos:start="3:5" pos:end="3:20"><modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:35">vcodec</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">ByteIOContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">ioc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:15">AMFDataType</name></type> <name pos:start="7:17" pos:end="7:24">amf_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:21"><name pos:start="9:10" pos:end="9:16">str_val</name><index pos:start="9:17" pos:end="9:21">[<expr pos:start="9:18" pos:end="9:20"><literal type="number" pos:start="9:18" pos:end="9:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">double</name></type> <name pos:start="11:12" pos:end="11:18">num_val</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:16"><expr pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:11">num_val</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:16"><expr pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:7">ioc</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:15"><name pos:start="17:11" pos:end="17:11">s</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:15">pb</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:12">amf_type</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:28"><name pos:start="21:16" pos:end="21:23">get_byte</name><argument_list pos:start="21:24" pos:end="21:28">(<argument pos:start="21:25" pos:end="21:27"><expr pos:start="21:25" pos:end="21:27"><name pos:start="21:25" pos:end="21:27">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="25:5" pos:end="125:5">switch<condition pos:start="25:11" pos:end="25:20">(<expr pos:start="25:12" pos:end="25:19"><name pos:start="25:12" pos:end="25:19">amf_type</name></expr>)</condition> <block pos:start="25:22" pos:end="125:5">{<block_content pos:start="27:9" pos:end="123:22">

        <case pos:start="27:9" pos:end="27:34">case <expr pos:start="27:14" pos:end="27:33"><name pos:start="27:14" pos:end="27:33">AMF_DATA_TYPE_NUMBER</name></expr>:</case>

            <expr_stmt pos:start="29:13" pos:end="29:48"><expr pos:start="29:13" pos:end="29:47"><name pos:start="29:13" pos:end="29:19">num_val</name> <operator pos:start="29:21" pos:end="29:21">=</operator> <call pos:start="29:23" pos:end="29:47"><name pos:start="29:23" pos:end="29:32">av_int2dbl</name><argument_list pos:start="29:33" pos:end="29:47">(<argument pos:start="29:34" pos:end="29:46"><expr pos:start="29:34" pos:end="29:46"><call pos:start="29:34" pos:end="29:46"><name pos:start="29:34" pos:end="29:41">get_be64</name><argument_list pos:start="29:42" pos:end="29:46">(<argument pos:start="29:43" pos:end="29:45"><expr pos:start="29:43" pos:end="29:45"><name pos:start="29:43" pos:end="29:45">ioc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="29:50" pos:end="29:55">break;</break>

        <case pos:start="31:9" pos:end="31:32">case <expr pos:start="31:14" pos:end="31:31"><name pos:start="31:14" pos:end="31:31">AMF_DATA_TYPE_BOOL</name></expr>:</case>

            <expr_stmt pos:start="33:13" pos:end="33:36"><expr pos:start="33:13" pos:end="33:35"><name pos:start="33:13" pos:end="33:19">num_val</name> <operator pos:start="33:21" pos:end="33:21">=</operator> <call pos:start="33:23" pos:end="33:35"><name pos:start="33:23" pos:end="33:30">get_byte</name><argument_list pos:start="33:31" pos:end="33:35">(<argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><name pos:start="33:32" pos:end="33:34">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="33:38" pos:end="33:43">break;</break>

        <case pos:start="35:9" pos:end="35:34">case <expr pos:start="35:14" pos:end="35:33"><name pos:start="35:14" pos:end="35:33">AMF_DATA_TYPE_STRING</name></expr>:</case>

            <if_stmt pos:start="37:13" pos:end="39:26"><if pos:start="37:13" pos:end="39:26">if<condition pos:start="37:15" pos:end="37:65">(<expr pos:start="37:16" pos:end="37:64"><call pos:start="37:16" pos:end="37:60"><name pos:start="37:16" pos:end="37:29">amf_get_string</name><argument_list pos:start="37:30" pos:end="37:60">(<argument pos:start="37:31" pos:end="37:33"><expr pos:start="37:31" pos:end="37:33"><name pos:start="37:31" pos:end="37:33">ioc</name></expr></argument>, <argument pos:start="37:36" pos:end="37:42"><expr pos:start="37:36" pos:end="37:42"><name pos:start="37:36" pos:end="37:42">str_val</name></expr></argument>, <argument pos:start="37:45" pos:end="37:59"><expr pos:start="37:45" pos:end="37:59"><sizeof pos:start="37:45" pos:end="37:59">sizeof<argument_list pos:start="37:51" pos:end="37:59">(<argument pos:start="37:52" pos:end="37:58"><expr pos:start="37:52" pos:end="37:58"><name pos:start="37:52" pos:end="37:58">str_val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="37:62" pos:end="37:62">&lt;</operator> <literal type="number" pos:start="37:64" pos:end="37:64">0</literal></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:26"><block_content pos:start="39:17" pos:end="39:26">

                <return pos:start="39:17" pos:end="39:26">return <expr pos:start="39:24" pos:end="39:25"><operator pos:start="39:24" pos:end="39:24">-</operator><literal type="number" pos:start="39:25" pos:end="39:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        <case pos:start="43:9" pos:end="43:34">case <expr pos:start="43:14" pos:end="43:33"><name pos:start="43:14" pos:end="43:33">AMF_DATA_TYPE_OBJECT</name></expr>:</case> <block pos:start="43:36" pos:end="63:9">{<block_content pos:start="45:13" pos:end="61:26">

            <decl_stmt pos:start="45:13" pos:end="45:32"><decl pos:start="45:13" pos:end="45:31"><type pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:20">unsigned</name> <name pos:start="45:22" pos:end="45:24">int</name></type> <name pos:start="45:26" pos:end="45:31">keylen</name></decl>;</decl_stmt>



            <while pos:start="49:13" pos:end="57:13">while<condition pos:start="49:18" pos:end="49:75">(<expr pos:start="49:19" pos:end="49:74"><call pos:start="49:19" pos:end="49:32"><name pos:start="49:19" pos:end="49:27">url_ftell</name><argument_list pos:start="49:28" pos:end="49:32">(<argument pos:start="49:29" pos:end="49:31"><expr pos:start="49:29" pos:end="49:31"><name pos:start="49:29" pos:end="49:31">ioc</name></expr></argument>)</argument_list></call> <operator pos:start="49:34" pos:end="49:34">&lt;</operator> <name pos:start="49:36" pos:end="49:42">max_pos</name> <operator pos:start="49:44" pos:end="49:44">-</operator> <literal type="number" pos:start="49:46" pos:end="49:46">2</literal> <operator pos:start="49:48" pos:end="49:49">&amp;&amp;</operator> <operator pos:start="49:51" pos:end="49:51">(</operator><name pos:start="49:52" pos:end="49:57">keylen</name> <operator pos:start="49:59" pos:end="49:59">=</operator> <call pos:start="49:61" pos:end="49:73"><name pos:start="49:61" pos:end="49:68">get_be16</name><argument_list pos:start="49:69" pos:end="49:73">(<argument pos:start="49:70" pos:end="49:72"><expr pos:start="49:70" pos:end="49:72"><name pos:start="49:70" pos:end="49:72">ioc</name></expr></argument>)</argument_list></call><operator pos:start="49:74" pos:end="49:74">)</operator></expr>)</condition> <block pos:start="49:77" pos:end="57:13">{<block_content pos:start="51:17" pos:end="55:30">

                <expr_stmt pos:start="51:17" pos:end="51:39"><expr pos:start="51:17" pos:end="51:38"><call pos:start="51:17" pos:end="51:38"><name pos:start="51:17" pos:end="51:25">url_fskip</name><argument_list pos:start="51:26" pos:end="51:38">(<argument pos:start="51:27" pos:end="51:29"><expr pos:start="51:27" pos:end="51:29"><name pos:start="51:27" pos:end="51:29">ioc</name></expr></argument>, <argument pos:start="51:32" pos:end="51:37"><expr pos:start="51:32" pos:end="51:37"><name pos:start="51:32" pos:end="51:37">keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="51:41" pos:end="51:57">//skip key string</comment>

                <if_stmt pos:start="53:17" pos:end="55:30"><if pos:start="53:17" pos:end="55:30">if<condition pos:start="53:19" pos:end="53:81">(<expr pos:start="53:20" pos:end="53:80"><call pos:start="53:20" pos:end="53:76"><name pos:start="53:20" pos:end="53:35">amf_parse_object</name><argument_list pos:start="53:36" pos:end="53:76">(<argument pos:start="53:37" pos:end="53:37"><expr pos:start="53:37" pos:end="53:37"><name pos:start="53:37" pos:end="53:37">s</name></expr></argument>, <argument pos:start="53:40" pos:end="53:43"><expr pos:start="53:40" pos:end="53:43"><name pos:start="53:40" pos:end="53:43">NULL</name></expr></argument>, <argument pos:start="53:46" pos:end="53:49"><expr pos:start="53:46" pos:end="53:49"><name pos:start="53:46" pos:end="53:49">NULL</name></expr></argument>, <argument pos:start="53:52" pos:end="53:55"><expr pos:start="53:52" pos:end="53:55"><name pos:start="53:52" pos:end="53:55">NULL</name></expr></argument>, <argument pos:start="53:58" pos:end="53:64"><expr pos:start="53:58" pos:end="53:64"><name pos:start="53:58" pos:end="53:64">max_pos</name></expr></argument>, <argument pos:start="53:67" pos:end="53:75"><expr pos:start="53:67" pos:end="53:75"><name pos:start="53:67" pos:end="53:71">depth</name> <operator pos:start="53:73" pos:end="53:73">+</operator> <literal type="number" pos:start="53:75" pos:end="53:75">1</literal></expr></argument>)</argument_list></call> <operator pos:start="53:78" pos:end="53:78">&lt;</operator> <literal type="number" pos:start="53:80" pos:end="53:80">0</literal></expr>)</condition><block type="pseudo" pos:start="55:21" pos:end="55:30"><block_content pos:start="55:21" pos:end="55:30">

                    <return pos:start="55:21" pos:end="55:30">return <expr pos:start="55:28" pos:end="55:29"><operator pos:start="55:28" pos:end="55:28">-</operator><literal type="number" pos:start="55:29" pos:end="55:29">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="55:32" pos:end="55:63">//if we couldn't skip, bomb out.</comment>

            </block_content>}</block></while>

            <if_stmt pos:start="59:13" pos:end="61:26"><if pos:start="59:13" pos:end="61:26">if<condition pos:start="59:15" pos:end="59:50">(<expr pos:start="59:16" pos:end="59:49"><call pos:start="59:16" pos:end="59:28"><name pos:start="59:16" pos:end="59:23">get_byte</name><argument_list pos:start="59:24" pos:end="59:28">(<argument pos:start="59:25" pos:end="59:27"><expr pos:start="59:25" pos:end="59:27"><name pos:start="59:25" pos:end="59:27">ioc</name></expr></argument>)</argument_list></call> <operator pos:start="59:30" pos:end="59:31">!=</operator> <name pos:start="59:33" pos:end="59:49">AMF_END_OF_OBJECT</name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:26"><block_content pos:start="61:17" pos:end="61:26">

                <return pos:start="61:17" pos:end="61:26">return <expr pos:start="61:24" pos:end="61:25"><operator pos:start="61:24" pos:end="61:24">-</operator><literal type="number" pos:start="61:25" pos:end="61:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block>

            <break pos:start="65:13" pos:end="65:18">break;</break>

        <case pos:start="67:9" pos:end="67:32">case <expr pos:start="67:14" pos:end="67:31"><name pos:start="67:14" pos:end="67:31">AMF_DATA_TYPE_NULL</name></expr>:</case>

        <case pos:start="69:9" pos:end="69:37">case <expr pos:start="69:14" pos:end="69:36"><name pos:start="69:14" pos:end="69:36">AMF_DATA_TYPE_UNDEFINED</name></expr>:</case>

        <case pos:start="71:9" pos:end="71:39">case <expr pos:start="71:14" pos:end="71:38"><name pos:start="71:14" pos:end="71:38">AMF_DATA_TYPE_UNSUPPORTED</name></expr>:</case>

            <break pos:start="73:13" pos:end="73:18">break;</break> <comment type="line" pos:start="73:20" pos:end="73:54">//these take up no additional space</comment>

        <case pos:start="75:9" pos:end="75:38">case <expr pos:start="75:14" pos:end="75:37"><name pos:start="75:14" pos:end="75:37">AMF_DATA_TYPE_MIXEDARRAY</name></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:30"><expr pos:start="77:13" pos:end="77:29"><call pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:21">url_fskip</name><argument_list pos:start="77:22" pos:end="77:29">(<argument pos:start="77:23" pos:end="77:25"><expr pos:start="77:23" pos:end="77:25"><name pos:start="77:23" pos:end="77:25">ioc</name></expr></argument>, <argument pos:start="77:28" pos:end="77:28"><expr pos:start="77:28" pos:end="77:28"><literal type="number" pos:start="77:28" pos:end="77:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="77:32" pos:end="77:60">//skip 32-bit max array index</comment>

            <while pos:start="79:13" pos:end="87:13">while<condition pos:start="79:18" pos:end="79:100">(<expr pos:start="79:19" pos:end="79:99"><call pos:start="79:19" pos:end="79:32"><name pos:start="79:19" pos:end="79:27">url_ftell</name><argument_list pos:start="79:28" pos:end="79:32">(<argument pos:start="79:29" pos:end="79:31"><expr pos:start="79:29" pos:end="79:31"><name pos:start="79:29" pos:end="79:31">ioc</name></expr></argument>)</argument_list></call> <operator pos:start="79:34" pos:end="79:34">&lt;</operator> <name pos:start="79:36" pos:end="79:42">max_pos</name> <operator pos:start="79:44" pos:end="79:44">-</operator> <literal type="number" pos:start="79:46" pos:end="79:46">2</literal> <operator pos:start="79:48" pos:end="79:49">&amp;&amp;</operator> <call pos:start="79:51" pos:end="79:95"><name pos:start="79:51" pos:end="79:64">amf_get_string</name><argument_list pos:start="79:65" pos:end="79:95">(<argument pos:start="79:66" pos:end="79:68"><expr pos:start="79:66" pos:end="79:68"><name pos:start="79:66" pos:end="79:68">ioc</name></expr></argument>, <argument pos:start="79:71" pos:end="79:77"><expr pos:start="79:71" pos:end="79:77"><name pos:start="79:71" pos:end="79:77">str_val</name></expr></argument>, <argument pos:start="79:80" pos:end="79:94"><expr pos:start="79:80" pos:end="79:94"><sizeof pos:start="79:80" pos:end="79:94">sizeof<argument_list pos:start="79:86" pos:end="79:94">(<argument pos:start="79:87" pos:end="79:93"><expr pos:start="79:87" pos:end="79:93"><name pos:start="79:87" pos:end="79:93">str_val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="79:97" pos:end="79:97">&gt;</operator> <literal type="number" pos:start="79:99" pos:end="79:99">0</literal></expr>)</condition> <block pos:start="79:102" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:30">

                <comment type="line" pos:start="81:17" pos:end="81:105">//this is the only case in which we would want a nested parse to not skip over the object</comment>

                <if_stmt pos:start="83:17" pos:end="85:30"><if pos:start="83:17" pos:end="85:30">if<condition pos:start="83:19" pos:end="83:90">(<expr pos:start="83:20" pos:end="83:89"><call pos:start="83:20" pos:end="83:85"><name pos:start="83:20" pos:end="83:35">amf_parse_object</name><argument_list pos:start="83:36" pos:end="83:85">(<argument pos:start="83:37" pos:end="83:37"><expr pos:start="83:37" pos:end="83:37"><name pos:start="83:37" pos:end="83:37">s</name></expr></argument>, <argument pos:start="83:40" pos:end="83:46"><expr pos:start="83:40" pos:end="83:46"><name pos:start="83:40" pos:end="83:46">astream</name></expr></argument>, <argument pos:start="83:49" pos:end="83:55"><expr pos:start="83:49" pos:end="83:55"><name pos:start="83:49" pos:end="83:55">vstream</name></expr></argument>, <argument pos:start="83:58" pos:end="83:64"><expr pos:start="83:58" pos:end="83:64"><name pos:start="83:58" pos:end="83:64">str_val</name></expr></argument>, <argument pos:start="83:67" pos:end="83:73"><expr pos:start="83:67" pos:end="83:73"><name pos:start="83:67" pos:end="83:73">max_pos</name></expr></argument>, <argument pos:start="83:76" pos:end="83:84"><expr pos:start="83:76" pos:end="83:84"><name pos:start="83:76" pos:end="83:80">depth</name> <operator pos:start="83:82" pos:end="83:82">+</operator> <literal type="number" pos:start="83:84" pos:end="83:84">1</literal></expr></argument>)</argument_list></call> <operator pos:start="83:87" pos:end="83:87">&lt;</operator> <literal type="number" pos:start="83:89" pos:end="83:89">0</literal></expr>)</condition><block type="pseudo" pos:start="85:21" pos:end="85:30"><block_content pos:start="85:21" pos:end="85:30">

                    <return pos:start="85:21" pos:end="85:30">return <expr pos:start="85:28" pos:end="85:29"><operator pos:start="85:28" pos:end="85:28">-</operator><literal type="number" pos:start="85:29" pos:end="85:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></while>

            <if_stmt pos:start="89:13" pos:end="91:26"><if pos:start="89:13" pos:end="91:26">if<condition pos:start="89:15" pos:end="89:50">(<expr pos:start="89:16" pos:end="89:49"><call pos:start="89:16" pos:end="89:28"><name pos:start="89:16" pos:end="89:23">get_byte</name><argument_list pos:start="89:24" pos:end="89:28">(<argument pos:start="89:25" pos:end="89:27"><expr pos:start="89:25" pos:end="89:27"><name pos:start="89:25" pos:end="89:27">ioc</name></expr></argument>)</argument_list></call> <operator pos:start="89:30" pos:end="89:31">!=</operator> <name pos:start="89:33" pos:end="89:49">AMF_END_OF_OBJECT</name></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:26"><block_content pos:start="91:17" pos:end="91:26">

                <return pos:start="91:17" pos:end="91:26">return <expr pos:start="91:24" pos:end="91:25"><operator pos:start="91:24" pos:end="91:24">-</operator><literal type="number" pos:start="91:25" pos:end="91:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        <case pos:start="95:9" pos:end="95:33">case <expr pos:start="95:14" pos:end="95:32"><name pos:start="95:14" pos:end="95:32">AMF_DATA_TYPE_ARRAY</name></expr>:</case> <block pos:start="95:35" pos:end="111:9">{<block_content pos:start="97:13" pos:end="109:13">

            <decl_stmt pos:start="97:13" pos:end="97:37"><decl pos:start="97:13" pos:end="97:33"><type pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:20">unsigned</name> <name pos:start="97:22" pos:end="97:24">int</name></type> <name pos:start="97:26" pos:end="97:33">arraylen</name></decl>, <decl pos:start="97:36" pos:end="97:36"><type ref="prev" pos:start="97:13" pos:end="97:24"/><name pos:start="97:36" pos:end="97:36">i</name></decl>;</decl_stmt>



            <expr_stmt pos:start="101:13" pos:end="101:37"><expr pos:start="101:13" pos:end="101:36"><name pos:start="101:13" pos:end="101:20">arraylen</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <call pos:start="101:24" pos:end="101:36"><name pos:start="101:24" pos:end="101:31">get_be32</name><argument_list pos:start="101:32" pos:end="101:36">(<argument pos:start="101:33" pos:end="101:35"><expr pos:start="101:33" pos:end="101:35"><name pos:start="101:33" pos:end="101:35">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="103:13" pos:end="109:13">for<control pos:start="103:16" pos:end="103:73">(<init pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:21"><name pos:start="103:17" pos:end="103:17">i</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <literal type="number" pos:start="103:21" pos:end="103:21">0</literal></expr>;</init> <condition pos:start="103:24" pos:end="103:68"><expr pos:start="103:24" pos:end="103:67"><name pos:start="103:24" pos:end="103:24">i</name> <operator pos:start="103:26" pos:end="103:26">&lt;</operator> <name pos:start="103:28" pos:end="103:35">arraylen</name> <operator pos:start="103:37" pos:end="103:38">&amp;&amp;</operator> <call pos:start="103:40" pos:end="103:53"><name pos:start="103:40" pos:end="103:48">url_ftell</name><argument_list pos:start="103:49" pos:end="103:53">(<argument pos:start="103:50" pos:end="103:52"><expr pos:start="103:50" pos:end="103:52"><name pos:start="103:50" pos:end="103:52">ioc</name></expr></argument>)</argument_list></call> <operator pos:start="103:55" pos:end="103:55">&lt;</operator> <name pos:start="103:57" pos:end="103:63">max_pos</name> <operator pos:start="103:65" pos:end="103:65">-</operator> <literal type="number" pos:start="103:67" pos:end="103:67">1</literal></expr>;</condition> <incr pos:start="103:70" pos:end="103:72"><expr pos:start="103:70" pos:end="103:72"><name pos:start="103:70" pos:end="103:70">i</name><operator pos:start="103:71" pos:end="103:72">++</operator></expr></incr>)</control> <block pos:start="103:75" pos:end="109:13">{<block_content pos:start="105:17" pos:end="107:30">

                <if_stmt pos:start="105:17" pos:end="107:30"><if pos:start="105:17" pos:end="107:30">if<condition pos:start="105:19" pos:end="105:81">(<expr pos:start="105:20" pos:end="105:80"><call pos:start="105:20" pos:end="105:76"><name pos:start="105:20" pos:end="105:35">amf_parse_object</name><argument_list pos:start="105:36" pos:end="105:76">(<argument pos:start="105:37" pos:end="105:37"><expr pos:start="105:37" pos:end="105:37"><name pos:start="105:37" pos:end="105:37">s</name></expr></argument>, <argument pos:start="105:40" pos:end="105:43"><expr pos:start="105:40" pos:end="105:43"><name pos:start="105:40" pos:end="105:43">NULL</name></expr></argument>, <argument pos:start="105:46" pos:end="105:49"><expr pos:start="105:46" pos:end="105:49"><name pos:start="105:46" pos:end="105:49">NULL</name></expr></argument>, <argument pos:start="105:52" pos:end="105:55"><expr pos:start="105:52" pos:end="105:55"><name pos:start="105:52" pos:end="105:55">NULL</name></expr></argument>, <argument pos:start="105:58" pos:end="105:64"><expr pos:start="105:58" pos:end="105:64"><name pos:start="105:58" pos:end="105:64">max_pos</name></expr></argument>, <argument pos:start="105:67" pos:end="105:75"><expr pos:start="105:67" pos:end="105:75"><name pos:start="105:67" pos:end="105:71">depth</name> <operator pos:start="105:73" pos:end="105:73">+</operator> <literal type="number" pos:start="105:75" pos:end="105:75">1</literal></expr></argument>)</argument_list></call> <operator pos:start="105:78" pos:end="105:78">&lt;</operator> <literal type="number" pos:start="105:80" pos:end="105:80">0</literal></expr>)</condition><block type="pseudo" pos:start="107:21" pos:end="107:30"><block_content pos:start="107:21" pos:end="107:30">

                    <return pos:start="107:21" pos:end="107:30">return <expr pos:start="107:28" pos:end="107:29"><operator pos:start="107:28" pos:end="107:28">-</operator><literal type="number" pos:start="107:29" pos:end="107:29">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="107:32" pos:end="107:63">//if we couldn't skip, bomb out.</comment>

            </block_content>}</block></for>

        </block_content>}</block>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        <case pos:start="115:9" pos:end="115:32">case <expr pos:start="115:14" pos:end="115:31"><name pos:start="115:14" pos:end="115:31">AMF_DATA_TYPE_DATE</name></expr>:</case>

            <expr_stmt pos:start="117:13" pos:end="117:34"><expr pos:start="117:13" pos:end="117:33"><call pos:start="117:13" pos:end="117:33"><name pos:start="117:13" pos:end="117:21">url_fskip</name><argument_list pos:start="117:22" pos:end="117:33">(<argument pos:start="117:23" pos:end="117:25"><expr pos:start="117:23" pos:end="117:25"><name pos:start="117:23" pos:end="117:25">ioc</name></expr></argument>, <argument pos:start="117:28" pos:end="117:32"><expr pos:start="117:28" pos:end="117:32"><literal type="number" pos:start="117:28" pos:end="117:30">8</literal> <operator pos:start="117:30" pos:end="117:30">+</operator> <literal type="number" pos:start="117:32" pos:end="117:32">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="117:36" pos:end="117:78">//timestamp (double) and UTC offset (int16)</comment>

            <break pos:start="119:13" pos:end="119:18">break;</break>

        <default pos:start="121:9" pos:end="121:16">default:</default> <comment type="line" pos:start="121:18" pos:end="121:53">//unsupported type, we couldn't skip</comment>

            <return pos:start="123:13" pos:end="123:22">return <expr pos:start="123:20" pos:end="123:21"><operator pos:start="123:20" pos:end="123:20">-</operator><literal type="number" pos:start="123:21" pos:end="123:21">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="129:5" pos:end="191:5"><if pos:start="129:5" pos:end="191:5">if<condition pos:start="129:7" pos:end="129:25">(<expr pos:start="129:8" pos:end="129:24"><name pos:start="129:8" pos:end="129:12">depth</name> <operator pos:start="129:14" pos:end="129:15">==</operator> <literal type="number" pos:start="129:17" pos:end="129:17">1</literal> <operator pos:start="129:19" pos:end="129:20">&amp;&amp;</operator> <name pos:start="129:22" pos:end="129:24">key</name></expr>)</condition> <block pos:start="129:27" pos:end="191:5">{<block_content pos:start="131:9" pos:end="189:9"> <comment type="line" pos:start="129:29" pos:end="129:98">//only look for metadata values when we are not nested and key != NULL</comment>

        <expr_stmt pos:start="131:9" pos:end="131:49"><expr pos:start="131:9" pos:end="131:48"><name pos:start="131:9" pos:end="131:14">acodec</name> <operator pos:start="131:16" pos:end="131:16">=</operator> <ternary pos:start="131:18" pos:end="131:48"><condition pos:start="131:18" pos:end="131:26"><expr pos:start="131:18" pos:end="131:24"><name pos:start="131:18" pos:end="131:24">astream</name></expr> ?</condition><then pos:start="131:28" pos:end="131:41"> <expr pos:start="131:28" pos:end="131:41"><name pos:start="131:28" pos:end="131:41"><name pos:start="131:28" pos:end="131:34">astream</name><operator pos:start="131:35" pos:end="131:36">-&gt;</operator><name pos:start="131:37" pos:end="131:41">codec</name></name></expr> </then><else pos:start="131:43" pos:end="131:48">: <expr pos:start="131:45" pos:end="131:48"><name pos:start="131:45" pos:end="131:48">NULL</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:49"><expr pos:start="133:9" pos:end="133:48"><name pos:start="133:9" pos:end="133:14">vcodec</name> <operator pos:start="133:16" pos:end="133:16">=</operator> <ternary pos:start="133:18" pos:end="133:48"><condition pos:start="133:18" pos:end="133:26"><expr pos:start="133:18" pos:end="133:24"><name pos:start="133:18" pos:end="133:24">vstream</name></expr> ?</condition><then pos:start="133:28" pos:end="133:41"> <expr pos:start="133:28" pos:end="133:41"><name pos:start="133:28" pos:end="133:41"><name pos:start="133:28" pos:end="133:34">vstream</name><operator pos:start="133:35" pos:end="133:36">-&gt;</operator><name pos:start="133:37" pos:end="133:41">codec</name></name></expr> </then><else pos:start="133:43" pos:end="133:48">: <expr pos:start="133:45" pos:end="133:48"><name pos:start="133:45" pos:end="133:48">NULL</name></expr></else></ternary></expr>;</expr_stmt>



        <if_stmt pos:start="137:9" pos:end="189:9"><if pos:start="137:9" pos:end="141:9">if<condition pos:start="137:11" pos:end="137:42">(<expr pos:start="137:12" pos:end="137:41"><name pos:start="137:12" pos:end="137:19">amf_type</name> <operator pos:start="137:21" pos:end="137:22">==</operator> <name pos:start="137:24" pos:end="137:41">AMF_DATA_TYPE_BOOL</name></expr>)</condition> <block pos:start="137:44" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:88">

            <if_stmt pos:start="139:13" pos:end="139:88"><if pos:start="139:13" pos:end="139:88">if<condition pos:start="139:15" pos:end="139:48">(<expr pos:start="139:16" pos:end="139:47"><operator pos:start="139:16" pos:end="139:16">!</operator><call pos:start="139:17" pos:end="139:37"><name pos:start="139:17" pos:end="139:22">strcmp</name><argument_list pos:start="139:23" pos:end="139:37">(<argument pos:start="139:24" pos:end="139:26"><expr pos:start="139:24" pos:end="139:26"><name pos:start="139:24" pos:end="139:26">key</name></expr></argument>, <argument pos:start="139:29" pos:end="139:36"><expr pos:start="139:29" pos:end="139:36"><literal type="string" pos:start="139:29" pos:end="139:36">"stereo"</literal></expr></argument>)</argument_list></call> <operator pos:start="139:39" pos:end="139:40">&amp;&amp;</operator> <name pos:start="139:42" pos:end="139:47">acodec</name></expr>)</condition><block type="pseudo" pos:start="139:50" pos:end="139:88"><block_content pos:start="139:50" pos:end="139:88"> <expr_stmt pos:start="139:50" pos:end="139:88"><expr pos:start="139:50" pos:end="139:87"><name pos:start="139:50" pos:end="139:65"><name pos:start="139:50" pos:end="139:55">acodec</name><operator pos:start="139:56" pos:end="139:57">-&gt;</operator><name pos:start="139:58" pos:end="139:65">channels</name></name> <operator pos:start="139:67" pos:end="139:67">=</operator> <ternary pos:start="139:69" pos:end="139:87"><condition pos:start="139:69" pos:end="139:81"><expr pos:start="139:69" pos:end="139:79"><name pos:start="139:69" pos:end="139:75">num_val</name> <operator pos:start="139:77" pos:end="139:77">&gt;</operator> <literal type="number" pos:start="139:79" pos:end="139:79">0</literal></expr> ?</condition><then pos:start="139:83" pos:end="139:83"> <expr pos:start="139:83" pos:end="139:83"><literal type="number" pos:start="139:83" pos:end="139:83">2</literal></expr> </then><else pos:start="139:85" pos:end="139:87">: <expr pos:start="139:87" pos:end="139:87"><literal type="number" pos:start="139:87" pos:end="139:87">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="141:11" pos:end="189:9">else if<condition pos:start="141:18" pos:end="141:51">(<expr pos:start="141:19" pos:end="141:50"><name pos:start="141:19" pos:end="141:26">amf_type</name> <operator pos:start="141:28" pos:end="141:29">==</operator> <name pos:start="141:31" pos:end="141:50">AMF_DATA_TYPE_NUMBER</name></expr>)</condition> <block pos:start="141:53" pos:end="189:9">{<block_content pos:start="143:13" pos:end="187:13">

            <if_stmt pos:start="143:13" pos:end="187:13"><if pos:start="143:13" pos:end="143:78">if<condition pos:start="143:15" pos:end="143:40">(<expr pos:start="143:16" pos:end="143:39"><operator pos:start="143:16" pos:end="143:16">!</operator><call pos:start="143:17" pos:end="143:39"><name pos:start="143:17" pos:end="143:22">strcmp</name><argument_list pos:start="143:23" pos:end="143:39">(<argument pos:start="143:24" pos:end="143:26"><expr pos:start="143:24" pos:end="143:26"><name pos:start="143:24" pos:end="143:26">key</name></expr></argument>, <argument pos:start="143:29" pos:end="143:38"><expr pos:start="143:29" pos:end="143:38"><literal type="string" pos:start="143:29" pos:end="143:38">"duration"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="143:42" pos:end="143:78"><block_content pos:start="143:42" pos:end="143:78"> <expr_stmt pos:start="143:42" pos:end="143:78"><expr pos:start="143:42" pos:end="143:77"><name pos:start="143:42" pos:end="143:52"><name pos:start="143:42" pos:end="143:42">s</name><operator pos:start="143:43" pos:end="143:44">-&gt;</operator><name pos:start="143:45" pos:end="143:52">duration</name></name> <operator pos:start="143:54" pos:end="143:54">=</operator> <name pos:start="143:56" pos:end="143:62">num_val</name> <operator pos:start="143:64" pos:end="143:64">*</operator> <name pos:start="143:66" pos:end="143:77">AV_TIME_BASE</name></expr>;</expr_stmt></block_content></block></if>

<comment type="line" pos:start="145:1" pos:end="145:96">//            else if(!strcmp(key, "width")  &amp;&amp; vcodec &amp;&amp; num_val &gt; 0) vcodec-&gt;width  = num_val;</comment>

<comment type="line" pos:start="147:1" pos:end="147:96">//            else if(!strcmp(key, "height") &amp;&amp; vcodec &amp;&amp; num_val &gt; 0) vcodec-&gt;height = num_val;</comment>

            <if type="elseif" pos:start="149:13" pos:end="149:134">else if<condition pos:start="149:20" pos:end="149:59">(<expr pos:start="149:21" pos:end="149:58"><operator pos:start="149:21" pos:end="149:21">!</operator><call pos:start="149:22" pos:end="149:48"><name pos:start="149:22" pos:end="149:27">strcmp</name><argument_list pos:start="149:28" pos:end="149:48">(<argument pos:start="149:29" pos:end="149:31"><expr pos:start="149:29" pos:end="149:31"><name pos:start="149:29" pos:end="149:31">key</name></expr></argument>, <argument pos:start="149:34" pos:end="149:47"><expr pos:start="149:34" pos:end="149:47"><literal type="string" pos:start="149:34" pos:end="149:47">"audiocodecid"</literal></expr></argument>)</argument_list></call> <operator pos:start="149:50" pos:end="149:51">&amp;&amp;</operator> <name pos:start="149:53" pos:end="149:58">acodec</name></expr>)</condition><block type="pseudo" pos:start="149:61" pos:end="149:134"><block_content pos:start="149:61" pos:end="149:134"> <expr_stmt pos:start="149:61" pos:end="149:134"><expr pos:start="149:61" pos:end="149:133"><call pos:start="149:61" pos:end="149:133"><name pos:start="149:61" pos:end="149:79">flv_set_audio_codec</name><argument_list pos:start="149:80" pos:end="149:133">(<argument pos:start="149:81" pos:end="149:81"><expr pos:start="149:81" pos:end="149:81"><name pos:start="149:81" pos:end="149:81">s</name></expr></argument>, <argument pos:start="149:84" pos:end="149:90"><expr pos:start="149:84" pos:end="149:90"><name pos:start="149:84" pos:end="149:90">astream</name></expr></argument>, <argument pos:start="149:93" pos:end="149:132"><expr pos:start="149:93" pos:end="149:132"><operator pos:start="149:93" pos:end="149:93">(</operator><name pos:start="149:94" pos:end="149:96">int</name><operator pos:start="149:97" pos:end="149:97">)</operator><name pos:start="149:98" pos:end="149:104">num_val</name> <operator pos:start="149:106" pos:end="149:107">&lt;&lt;</operator> <name pos:start="149:109" pos:end="149:132">FLV_AUDIO_CODECID_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="151:13" pos:end="151:106">else if<condition pos:start="151:20" pos:end="151:59">(<expr pos:start="151:21" pos:end="151:58"><operator pos:start="151:21" pos:end="151:21">!</operator><call pos:start="151:22" pos:end="151:48"><name pos:start="151:22" pos:end="151:27">strcmp</name><argument_list pos:start="151:28" pos:end="151:48">(<argument pos:start="151:29" pos:end="151:31"><expr pos:start="151:29" pos:end="151:31"><name pos:start="151:29" pos:end="151:31">key</name></expr></argument>, <argument pos:start="151:34" pos:end="151:47"><expr pos:start="151:34" pos:end="151:47"><literal type="string" pos:start="151:34" pos:end="151:47">"videocodecid"</literal></expr></argument>)</argument_list></call> <operator pos:start="151:50" pos:end="151:51">&amp;&amp;</operator> <name pos:start="151:53" pos:end="151:58">vcodec</name></expr>)</condition><block type="pseudo" pos:start="151:61" pos:end="151:106"><block_content pos:start="151:61" pos:end="151:106"> <expr_stmt pos:start="151:61" pos:end="151:106"><expr pos:start="151:61" pos:end="151:105"><call pos:start="151:61" pos:end="151:105"><name pos:start="151:61" pos:end="151:79">flv_set_video_codec</name><argument_list pos:start="151:80" pos:end="151:105">(<argument pos:start="151:81" pos:end="151:81"><expr pos:start="151:81" pos:end="151:81"><name pos:start="151:81" pos:end="151:81">s</name></expr></argument>, <argument pos:start="151:84" pos:end="151:90"><expr pos:start="151:84" pos:end="151:90"><name pos:start="151:84" pos:end="151:90">vstream</name></expr></argument>, <argument pos:start="151:93" pos:end="151:104"><expr pos:start="151:93" pos:end="151:104"><operator pos:start="151:93" pos:end="151:93">(</operator><name pos:start="151:94" pos:end="151:96">int</name><operator pos:start="151:97" pos:end="151:97">)</operator><name pos:start="151:98" pos:end="151:104">num_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="153:13" pos:end="163:13">else if<condition pos:start="153:20" pos:end="153:78">(<expr pos:start="153:21" pos:end="153:77"><operator pos:start="153:21" pos:end="153:21">!</operator><call pos:start="153:22" pos:end="153:51"><name pos:start="153:22" pos:end="153:27">strcmp</name><argument_list pos:start="153:28" pos:end="153:51">(<argument pos:start="153:29" pos:end="153:31"><expr pos:start="153:29" pos:end="153:31"><name pos:start="153:29" pos:end="153:31">key</name></expr></argument>, <argument pos:start="153:34" pos:end="153:50"><expr pos:start="153:34" pos:end="153:50"><literal type="string" pos:start="153:34" pos:end="153:50">"audiosamplesize"</literal></expr></argument>)</argument_list></call> <operator pos:start="153:53" pos:end="153:54">&amp;&amp;</operator> <name pos:start="153:56" pos:end="153:61">acodec</name> <operator pos:start="153:63" pos:end="153:64">&amp;&amp;</operator> <name pos:start="153:66" pos:end="153:72">num_val</name> <operator pos:start="153:74" pos:end="153:75">&gt;=</operator> <literal type="number" pos:start="153:77" pos:end="153:77">0</literal></expr>)</condition> <block pos:start="153:80" pos:end="163:13">{<block_content pos:start="155:17" pos:end="161:55">

                <expr_stmt pos:start="155:17" pos:end="155:50"><expr pos:start="155:17" pos:end="155:49"><name pos:start="155:17" pos:end="155:39"><name pos:start="155:17" pos:end="155:22">acodec</name><operator pos:start="155:23" pos:end="155:24">-&gt;</operator><name pos:start="155:25" pos:end="155:39">bits_per_sample</name></name> <operator pos:start="155:41" pos:end="155:41">=</operator> <name pos:start="155:43" pos:end="155:49">num_val</name></expr>;</expr_stmt>

                <comment type="line" pos:start="157:17" pos:end="157:105">//we may have to rewrite a previously read codecid because FLV only marks PCM endianness.</comment>

                <if_stmt pos:start="159:17" pos:end="161:55"><if pos:start="159:17" pos:end="161:55">if<condition pos:start="159:19" pos:end="159:118">(<expr pos:start="159:20" pos:end="159:117"><name pos:start="159:20" pos:end="159:26">num_val</name> <operator pos:start="159:28" pos:end="159:29">==</operator> <literal type="number" pos:start="159:31" pos:end="159:31">8</literal> <operator pos:start="159:33" pos:end="159:34">&amp;&amp;</operator> <operator pos:start="159:36" pos:end="159:36">(</operator><name pos:start="159:37" pos:end="159:52"><name pos:start="159:37" pos:end="159:42">acodec</name><operator pos:start="159:43" pos:end="159:44">-&gt;</operator><name pos:start="159:45" pos:end="159:52">codec_id</name></name> <operator pos:start="159:54" pos:end="159:55">==</operator> <name pos:start="159:57" pos:end="159:74">CODEC_ID_PCM_S16BE</name> <operator pos:start="159:76" pos:end="159:77">||</operator> <name pos:start="159:79" pos:end="159:94"><name pos:start="159:79" pos:end="159:84">acodec</name><operator pos:start="159:85" pos:end="159:86">-&gt;</operator><name pos:start="159:87" pos:end="159:94">codec_id</name></name> <operator pos:start="159:96" pos:end="159:97">==</operator> <name pos:start="159:99" pos:end="159:116">CODEC_ID_PCM_S16LE</name><operator pos:start="159:117" pos:end="159:117">)</operator></expr>)</condition><block type="pseudo" pos:start="161:21" pos:end="161:55"><block_content pos:start="161:21" pos:end="161:55">

                    <expr_stmt pos:start="161:21" pos:end="161:55"><expr pos:start="161:21" pos:end="161:54"><name pos:start="161:21" pos:end="161:36"><name pos:start="161:21" pos:end="161:26">acodec</name><operator pos:start="161:27" pos:end="161:28">-&gt;</operator><name pos:start="161:29" pos:end="161:36">codec_id</name></name> <operator pos:start="161:38" pos:end="161:38">=</operator> <name pos:start="161:40" pos:end="161:54">CODEC_ID_PCM_S8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if>

            <if type="elseif" pos:start="165:13" pos:end="187:13">else if<condition pos:start="165:20" pos:end="165:78">(<expr pos:start="165:21" pos:end="165:77"><operator pos:start="165:21" pos:end="165:21">!</operator><call pos:start="165:22" pos:end="165:51"><name pos:start="165:22" pos:end="165:27">strcmp</name><argument_list pos:start="165:28" pos:end="165:51">(<argument pos:start="165:29" pos:end="165:31"><expr pos:start="165:29" pos:end="165:31"><name pos:start="165:29" pos:end="165:31">key</name></expr></argument>, <argument pos:start="165:34" pos:end="165:50"><expr pos:start="165:34" pos:end="165:50"><literal type="string" pos:start="165:34" pos:end="165:50">"audiosamplerate"</literal></expr></argument>)</argument_list></call> <operator pos:start="165:53" pos:end="165:54">&amp;&amp;</operator> <name pos:start="165:56" pos:end="165:61">acodec</name> <operator pos:start="165:63" pos:end="165:64">&amp;&amp;</operator> <name pos:start="165:66" pos:end="165:72">num_val</name> <operator pos:start="165:74" pos:end="165:75">&gt;=</operator> <literal type="number" pos:start="165:77" pos:end="165:77">0</literal></expr>)</condition> <block pos:start="165:80" pos:end="187:13">{<block_content pos:start="169:17" pos:end="185:17">

                <comment type="line" pos:start="167:17" pos:end="167:97">//some tools, like FLVTool2, write consistently approximate metadata sample rates</comment>

                <if_stmt pos:start="169:17" pos:end="185:17"><if pos:start="169:17" pos:end="185:17">if <condition pos:start="169:20" pos:end="169:41">(<expr pos:start="169:21" pos:end="169:40"><operator pos:start="169:21" pos:end="169:21">!</operator><name pos:start="169:22" pos:end="169:40"><name pos:start="169:22" pos:end="169:27">acodec</name><operator pos:start="169:28" pos:end="169:29">-&gt;</operator><name pos:start="169:30" pos:end="169:40">sample_rate</name></name></expr>)</condition> <block pos:start="169:43" pos:end="185:17">{<block_content pos:start="171:21" pos:end="183:21">

                    <switch pos:start="171:21" pos:end="183:21">switch<condition pos:start="171:27" pos:end="171:40">(<expr pos:start="171:28" pos:end="171:39"><operator pos:start="171:28" pos:end="171:28">(</operator><name pos:start="171:29" pos:end="171:31">int</name><operator pos:start="171:32" pos:end="171:32">)</operator><name pos:start="171:33" pos:end="171:39">num_val</name></expr>)</condition> <block pos:start="171:42" pos:end="183:21">{<block_content pos:start="173:25" pos:end="181:66">

                        <case pos:start="173:25" pos:end="173:35">case <expr pos:start="173:30" pos:end="173:34"><literal type="number" pos:start="173:30" pos:end="173:34">44000</literal></expr>:</case> <expr_stmt pos:start="173:37" pos:end="173:66"><expr pos:start="173:37" pos:end="173:63"><name pos:start="173:37" pos:end="173:55"><name pos:start="173:37" pos:end="173:42">acodec</name><operator pos:start="173:43" pos:end="173:44">-&gt;</operator><name pos:start="173:45" pos:end="173:55">sample_rate</name></name> <operator pos:start="173:57" pos:end="173:57">=</operator> <literal type="number" pos:start="173:59" pos:end="173:63">44100</literal></expr>  ;</expr_stmt> <break pos:start="173:68" pos:end="173:73">break;</break>

                        <case pos:start="175:25" pos:end="175:35">case <expr pos:start="175:30" pos:end="175:34"><literal type="number" pos:start="175:30" pos:end="175:34">22000</literal></expr>:</case> <expr_stmt pos:start="175:37" pos:end="175:66"><expr pos:start="175:37" pos:end="175:63"><name pos:start="175:37" pos:end="175:55"><name pos:start="175:37" pos:end="175:42">acodec</name><operator pos:start="175:43" pos:end="175:44">-&gt;</operator><name pos:start="175:45" pos:end="175:55">sample_rate</name></name> <operator pos:start="175:57" pos:end="175:57">=</operator> <literal type="number" pos:start="175:59" pos:end="175:63">22050</literal></expr>  ;</expr_stmt> <break pos:start="175:68" pos:end="175:73">break;</break>

                        <case pos:start="177:25" pos:end="177:35">case <expr pos:start="177:30" pos:end="177:34"><literal type="number" pos:start="177:30" pos:end="177:34">11000</literal></expr>:</case> <expr_stmt pos:start="177:37" pos:end="177:66"><expr pos:start="177:37" pos:end="177:63"><name pos:start="177:37" pos:end="177:55"><name pos:start="177:37" pos:end="177:42">acodec</name><operator pos:start="177:43" pos:end="177:44">-&gt;</operator><name pos:start="177:45" pos:end="177:55">sample_rate</name></name> <operator pos:start="177:57" pos:end="177:57">=</operator> <literal type="number" pos:start="177:59" pos:end="177:63">11025</literal></expr>  ;</expr_stmt> <break pos:start="177:68" pos:end="177:73">break;</break>

                        <case pos:start="179:25" pos:end="179:35">case <expr pos:start="179:30" pos:end="179:33"><literal type="number" pos:start="179:30" pos:end="179:33">5000</literal></expr> :</case> <expr_stmt pos:start="179:37" pos:end="179:66"><expr pos:start="179:37" pos:end="179:62"><name pos:start="179:37" pos:end="179:55"><name pos:start="179:37" pos:end="179:42">acodec</name><operator pos:start="179:43" pos:end="179:44">-&gt;</operator><name pos:start="179:45" pos:end="179:55">sample_rate</name></name> <operator pos:start="179:57" pos:end="179:57">=</operator> <literal type="number" pos:start="179:59" pos:end="179:62">5512</literal></expr>   ;</expr_stmt> <break pos:start="179:68" pos:end="179:73">break;</break>

                        <default pos:start="181:25" pos:end="181:35">default   :</default> <expr_stmt pos:start="181:37" pos:end="181:66"><expr pos:start="181:37" pos:end="181:65"><name pos:start="181:37" pos:end="181:55"><name pos:start="181:37" pos:end="181:42">acodec</name><operator pos:start="181:43" pos:end="181:44">-&gt;</operator><name pos:start="181:45" pos:end="181:55">sample_rate</name></name> <operator pos:start="181:57" pos:end="181:57">=</operator> <name pos:start="181:59" pos:end="181:65">num_val</name></expr>;</expr_stmt>

                    </block_content>}</block></switch>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="195:5" pos:end="195:13">return <expr pos:start="195:12" pos:end="195:12"><literal type="number" pos:start="195:12" pos:end="195:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
