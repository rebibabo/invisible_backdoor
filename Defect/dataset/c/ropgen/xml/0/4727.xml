<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4727.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">cpu_x86_find_by_name</name><parameter_list pos:start="1:32" pos:end="1:78">(<parameter pos:start="1:33" pos:end="1:54"><decl pos:start="1:33" pos:end="1:54"><type pos:start="1:33" pos:end="1:54"><name pos:start="1:33" pos:end="1:41">x86_def_t</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:54">x86_cpu_def</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:77"><decl pos:start="1:57" pos:end="1:77"><type pos:start="1:57" pos:end="1:77"><specifier pos:start="1:57" pos:end="1:61">const</specifier> <name pos:start="1:63" pos:end="1:66">char</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:77">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="209:1">{<block_content pos:start="5:5" pos:end="207:14">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:18">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">x86_def_t</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">def</name></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:11">s</name> <init pos:start="11:13" pos:end="11:31">= <expr pos:start="11:15" pos:end="11:31"><call pos:start="11:15" pos:end="11:31"><name pos:start="11:15" pos:end="11:20">strdup</name><argument_list pos:start="11:21" pos:end="11:31">(<argument pos:start="11:22" pos:end="11:30"><expr pos:start="11:22" pos:end="11:30"><name pos:start="11:22" pos:end="11:30">cpu_model</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:20">featurestr</name></decl>, <decl pos:start="13:23" pos:end="13:44"><type ref="prev" pos:start="13:5" pos:end="13:10"><modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:27">name</name> <init pos:start="13:29" pos:end="13:44">= <expr pos:start="13:31" pos:end="13:44"><call pos:start="13:31" pos:end="13:44"><name pos:start="13:31" pos:end="13:36">strtok</name><argument_list pos:start="13:37" pos:end="13:44">(<argument pos:start="13:38" pos:end="13:38"><expr pos:start="13:38" pos:end="13:38"><name pos:start="13:38" pos:end="13:38">s</name></expr></argument>, <argument pos:start="13:41" pos:end="13:43"><expr pos:start="13:41" pos:end="13:43"><literal type="string" pos:start="13:41" pos:end="13:43">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:102"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:26">plus_features</name> <init pos:start="15:28" pos:end="15:30">= <expr pos:start="15:30" pos:end="15:30"><literal type="number" pos:start="15:30" pos:end="15:30">0</literal></expr></init></decl>, <decl pos:start="15:33" pos:end="15:53"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:33" pos:end="15:49">plus_ext_features</name> <init pos:start="15:51" pos:end="15:53">= <expr pos:start="15:53" pos:end="15:53"><literal type="number" pos:start="15:53" pos:end="15:53">0</literal></expr></init></decl>, <decl pos:start="15:56" pos:end="15:77"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:56" pos:end="15:73">plus_ext2_features</name> <init pos:start="15:75" pos:end="15:77">= <expr pos:start="15:77" pos:end="15:77"><literal type="number" pos:start="15:77" pos:end="15:77">0</literal></expr></init></decl>, <decl pos:start="15:80" pos:end="15:101"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:80" pos:end="15:97">plus_ext3_features</name> <init pos:start="15:99" pos:end="15:101">= <expr pos:start="15:101" pos:end="15:101"><literal type="number" pos:start="15:101" pos:end="15:101">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:106"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:27">minus_features</name> <init pos:start="17:29" pos:end="17:31">= <expr pos:start="17:31" pos:end="17:31"><literal type="number" pos:start="17:31" pos:end="17:31">0</literal></expr></init></decl>, <decl pos:start="17:34" pos:end="17:55"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:34" pos:end="17:51">minus_ext_features</name> <init pos:start="17:53" pos:end="17:55">= <expr pos:start="17:55" pos:end="17:55"><literal type="number" pos:start="17:55" pos:end="17:55">0</literal></expr></init></decl>, <decl pos:start="17:58" pos:end="17:80"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:58" pos:end="17:76">minus_ext2_features</name> <init pos:start="17:78" pos:end="17:80">= <expr pos:start="17:80" pos:end="17:80"><literal type="number" pos:start="17:80" pos:end="17:80">0</literal></expr></init></decl>, <decl pos:start="17:83" pos:end="17:105"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:83" pos:end="17:101">minus_ext3_features</name> <init pos:start="17:103" pos:end="17:105">= <expr pos:start="17:105" pos:end="17:105"><literal type="number" pos:start="17:105" pos:end="17:105">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">family</name> <init pos:start="19:16" pos:end="19:19">= <expr pos:start="19:18" pos:end="19:19"><operator pos:start="19:18" pos:end="19:18">-</operator><literal type="number" pos:start="19:19" pos:end="19:19">1</literal></expr></init></decl>, <decl pos:start="19:22" pos:end="19:31"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:22" pos:end="19:26">model</name> <init pos:start="19:28" pos:end="19:31">= <expr pos:start="19:30" pos:end="19:31"><operator pos:start="19:30" pos:end="19:30">-</operator><literal type="number" pos:start="19:31" pos:end="19:31">1</literal></expr></init></decl>, <decl pos:start="19:34" pos:end="19:46"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:34" pos:end="19:41">stepping</name> <init pos:start="19:43" pos:end="19:46">= <expr pos:start="19:45" pos:end="19:46"><operator pos:start="19:45" pos:end="19:45">-</operator><literal type="number" pos:start="19:46" pos:end="19:46">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:15"><expr pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:7">def</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <name pos:start="23:11" pos:end="23:14">NULL</name></expr>;</expr_stmt>

    <for pos:start="25:5" pos:end="35:5">for <control pos:start="25:9" pos:end="25:46">(<init pos:start="25:10" pos:end="25:15"><expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:10">i</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>;</init> <condition pos:start="25:17" pos:end="25:41"><expr pos:start="25:17" pos:end="25:40"><name pos:start="25:17" pos:end="25:17">i</name> <operator pos:start="25:19" pos:end="25:19">&lt;</operator> <call pos:start="25:21" pos:end="25:40"><name pos:start="25:21" pos:end="25:30">ARRAY_SIZE</name><argument_list pos:start="25:31" pos:end="25:40">(<argument pos:start="25:32" pos:end="25:39"><expr pos:start="25:32" pos:end="25:39"><name pos:start="25:32" pos:end="25:39">x86_defs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="25:43" pos:end="25:45"><expr pos:start="25:43" pos:end="25:45"><name pos:start="25:43" pos:end="25:43">i</name><operator pos:start="25:44" pos:end="25:45">++</operator></expr></incr>)</control> <block pos:start="25:48" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:9">

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:48">(<expr pos:start="27:13" pos:end="27:47"><call pos:start="27:13" pos:end="27:42"><name pos:start="27:13" pos:end="27:18">strcmp</name><argument_list pos:start="27:19" pos:end="27:42">(<argument pos:start="27:20" pos:end="27:23"><expr pos:start="27:20" pos:end="27:23"><name pos:start="27:20" pos:end="27:23">name</name></expr></argument>, <argument pos:start="27:26" pos:end="27:41"><expr pos:start="27:26" pos:end="27:41"><name pos:start="27:26" pos:end="27:36"><name pos:start="27:26" pos:end="27:33">x86_defs</name><index pos:start="27:34" pos:end="27:36">[<expr pos:start="27:35" pos:end="27:35"><name pos:start="27:35" pos:end="27:35">i</name></expr>]</index></name><operator pos:start="27:37" pos:end="27:37">.</operator><name pos:start="27:38" pos:end="27:41">name</name></expr></argument>)</argument_list></call> <operator pos:start="27:44" pos:end="27:45">==</operator> <literal type="number" pos:start="27:47" pos:end="27:47">0</literal></expr>)</condition> <block pos:start="27:50" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:18">

            <expr_stmt pos:start="29:13" pos:end="29:31"><expr pos:start="29:13" pos:end="29:30"><name pos:start="29:13" pos:end="29:15">def</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <operator pos:start="29:19" pos:end="29:19">&amp;</operator><name pos:start="29:20" pos:end="29:30"><name pos:start="29:20" pos:end="29:27">x86_defs</name><index pos:start="29:28" pos:end="29:30">[<expr pos:start="29:29" pos:end="29:29"><name pos:start="29:29" pos:end="29:29">i</name></expr>]</index></name></expr>;</expr_stmt>

            <break pos:start="31:13" pos:end="31:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="37:5" pos:end="49:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:51">(<expr pos:start="37:9" pos:end="37:50"><call pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:19">kvm_enabled</name><argument_list pos:start="37:20" pos:end="37:21">()</argument_list></call> <operator pos:start="37:23" pos:end="37:24">&amp;&amp;</operator> <call pos:start="37:26" pos:end="37:45"><name pos:start="37:26" pos:end="37:31">strcmp</name><argument_list pos:start="37:32" pos:end="37:45">(<argument pos:start="37:33" pos:end="37:36"><expr pos:start="37:33" pos:end="37:36"><name pos:start="37:33" pos:end="37:36">name</name></expr></argument>, <argument pos:start="37:39" pos:end="37:44"><expr pos:start="37:39" pos:end="37:44"><literal type="string" pos:start="37:39" pos:end="37:44">"host"</literal></expr></argument>)</argument_list></call> <operator pos:start="37:47" pos:end="37:48">==</operator> <literal type="number" pos:start="37:50" pos:end="37:50">0</literal></expr>)</condition> <block pos:start="37:53" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:39">

        <expr_stmt pos:start="39:9" pos:end="39:39"><expr pos:start="39:9" pos:end="39:38"><call pos:start="39:9" pos:end="39:38"><name pos:start="39:9" pos:end="39:25">cpu_x86_fill_host</name><argument_list pos:start="39:26" pos:end="39:38">(<argument pos:start="39:27" pos:end="39:37"><expr pos:start="39:27" pos:end="39:37"><name pos:start="39:27" pos:end="39:37">x86_cpu_def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="45:5">else if <condition pos:start="41:15" pos:end="41:20">(<expr pos:start="41:16" pos:end="41:19"><operator pos:start="41:16" pos:end="41:16">!</operator><name pos:start="41:17" pos:end="41:19">def</name></expr>)</condition> <block pos:start="41:22" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:19">

        <goto pos:start="43:9" pos:end="43:19">goto <name pos:start="43:14" pos:end="43:18">error</name>;</goto>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="49:5">else <block pos:start="45:12" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:47">

        <expr_stmt pos:start="47:9" pos:end="47:47"><expr pos:start="47:9" pos:end="47:46"><call pos:start="47:9" pos:end="47:46"><name pos:start="47:9" pos:end="47:14">memcpy</name><argument_list pos:start="47:15" pos:end="47:46">(<argument pos:start="47:16" pos:end="47:26"><expr pos:start="47:16" pos:end="47:26"><name pos:start="47:16" pos:end="47:26">x86_cpu_def</name></expr></argument>, <argument pos:start="47:29" pos:end="47:31"><expr pos:start="47:29" pos:end="47:31"><name pos:start="47:29" pos:end="47:31">def</name></expr></argument>, <argument pos:start="47:34" pos:end="47:45"><expr pos:start="47:34" pos:end="47:45"><sizeof pos:start="47:34" pos:end="47:45">sizeof<argument_list pos:start="47:40" pos:end="47:45">(<argument pos:start="47:41" pos:end="47:44"><expr pos:start="47:41" pos:end="47:44"><operator pos:start="47:41" pos:end="47:41">*</operator><name pos:start="47:42" pos:end="47:44">def</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="55:70"><expr pos:start="53:5" pos:end="55:69"><call pos:start="53:5" pos:end="55:69"><name pos:start="53:5" pos:end="53:27">add_flagname_to_bitmaps</name><argument_list pos:start="53:28" pos:end="55:69">(<argument pos:start="53:29" pos:end="53:40"><expr pos:start="53:29" pos:end="53:40"><literal type="string" pos:start="53:29" pos:end="53:40">"hypervisor"</literal></expr></argument>, <argument pos:start="53:43" pos:end="53:56"><expr pos:start="53:43" pos:end="53:56"><operator pos:start="53:43" pos:end="53:43">&amp;</operator><name pos:start="53:44" pos:end="53:56">plus_features</name></expr></argument>,

        <argument pos:start="55:9" pos:end="55:26"><expr pos:start="55:9" pos:end="55:26"><operator pos:start="55:9" pos:end="55:9">&amp;</operator><name pos:start="55:10" pos:end="55:26">plus_ext_features</name></expr></argument>, <argument pos:start="55:29" pos:end="55:47"><expr pos:start="55:29" pos:end="55:47"><operator pos:start="55:29" pos:end="55:29">&amp;</operator><name pos:start="55:30" pos:end="55:47">plus_ext2_features</name></expr></argument>, <argument pos:start="55:50" pos:end="55:68"><expr pos:start="55:50" pos:end="55:68"><operator pos:start="55:50" pos:end="55:50">&amp;</operator><name pos:start="55:51" pos:end="55:68">plus_ext3_features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:35"><expr pos:start="59:5" pos:end="59:34"><name pos:start="59:5" pos:end="59:14">featurestr</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <call pos:start="59:18" pos:end="59:34"><name pos:start="59:18" pos:end="59:23">strtok</name><argument_list pos:start="59:24" pos:end="59:34">(<argument pos:start="59:25" pos:end="59:28"><expr pos:start="59:25" pos:end="59:28"><name pos:start="59:25" pos:end="59:28">NULL</name></expr></argument>, <argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><literal type="string" pos:start="59:31" pos:end="59:33">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="63:5" pos:end="179:5">while <condition pos:start="63:11" pos:end="63:22">(<expr pos:start="63:12" pos:end="63:21"><name pos:start="63:12" pos:end="63:21">featurestr</name></expr>)</condition> <block pos:start="63:24" pos:end="179:5">{<block_content pos:start="65:9" pos:end="177:39">

        <decl_stmt pos:start="65:9" pos:end="65:18"><decl pos:start="65:9" pos:end="65:17"><type pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:12">char</name> <modifier pos:start="65:14" pos:end="65:14">*</modifier></type><name pos:start="65:15" pos:end="65:17">val</name></decl>;</decl_stmt>

        <if_stmt pos:start="67:9" pos:end="175:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:33">(<expr pos:start="67:13" pos:end="67:32"><name pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:22">featurestr</name><index pos:start="67:23" pos:end="67:25">[<expr pos:start="67:24" pos:end="67:24"><literal type="number" pos:start="67:24" pos:end="67:24">0</literal></expr>]</index></name> <operator pos:start="67:27" pos:end="67:28">==</operator> <literal type="char" pos:start="67:30" pos:end="67:32">'+'</literal></expr>)</condition> <block pos:start="67:35" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:130">

            <expr_stmt pos:start="69:13" pos:end="69:130"><expr pos:start="69:13" pos:end="69:129"><call pos:start="69:13" pos:end="69:129"><name pos:start="69:13" pos:end="69:35">add_flagname_to_bitmaps</name><argument_list pos:start="69:36" pos:end="69:129">(<argument pos:start="69:37" pos:end="69:50"><expr pos:start="69:37" pos:end="69:50"><name pos:start="69:37" pos:end="69:46">featurestr</name> <operator pos:start="69:48" pos:end="69:48">+</operator> <literal type="number" pos:start="69:50" pos:end="69:50">1</literal></expr></argument>, <argument pos:start="69:53" pos:end="69:66"><expr pos:start="69:53" pos:end="69:66"><operator pos:start="69:53" pos:end="69:53">&amp;</operator><name pos:start="69:54" pos:end="69:66">plus_features</name></expr></argument>, <argument pos:start="69:69" pos:end="69:86"><expr pos:start="69:69" pos:end="69:86"><operator pos:start="69:69" pos:end="69:69">&amp;</operator><name pos:start="69:70" pos:end="69:86">plus_ext_features</name></expr></argument>, <argument pos:start="69:89" pos:end="69:107"><expr pos:start="69:89" pos:end="69:107"><operator pos:start="69:89" pos:end="69:89">&amp;</operator><name pos:start="69:90" pos:end="69:107">plus_ext2_features</name></expr></argument>, <argument pos:start="69:110" pos:end="69:128"><expr pos:start="69:110" pos:end="69:128"><operator pos:start="69:110" pos:end="69:110">&amp;</operator><name pos:start="69:111" pos:end="69:128">plus_ext3_features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="71:11" pos:end="75:9">else if <condition pos:start="71:19" pos:end="71:40">(<expr pos:start="71:20" pos:end="71:39"><name pos:start="71:20" pos:end="71:32"><name pos:start="71:20" pos:end="71:29">featurestr</name><index pos:start="71:30" pos:end="71:32">[<expr pos:start="71:31" pos:end="71:31"><literal type="number" pos:start="71:31" pos:end="71:31">0</literal></expr>]</index></name> <operator pos:start="71:34" pos:end="71:35">==</operator> <literal type="char" pos:start="71:37" pos:end="71:39">'-'</literal></expr>)</condition> <block pos:start="71:42" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:134">

            <expr_stmt pos:start="73:13" pos:end="73:134"><expr pos:start="73:13" pos:end="73:133"><call pos:start="73:13" pos:end="73:133"><name pos:start="73:13" pos:end="73:35">add_flagname_to_bitmaps</name><argument_list pos:start="73:36" pos:end="73:133">(<argument pos:start="73:37" pos:end="73:50"><expr pos:start="73:37" pos:end="73:50"><name pos:start="73:37" pos:end="73:46">featurestr</name> <operator pos:start="73:48" pos:end="73:48">+</operator> <literal type="number" pos:start="73:50" pos:end="73:50">1</literal></expr></argument>, <argument pos:start="73:53" pos:end="73:67"><expr pos:start="73:53" pos:end="73:67"><operator pos:start="73:53" pos:end="73:53">&amp;</operator><name pos:start="73:54" pos:end="73:67">minus_features</name></expr></argument>, <argument pos:start="73:70" pos:end="73:88"><expr pos:start="73:70" pos:end="73:88"><operator pos:start="73:70" pos:end="73:70">&amp;</operator><name pos:start="73:71" pos:end="73:88">minus_ext_features</name></expr></argument>, <argument pos:start="73:91" pos:end="73:110"><expr pos:start="73:91" pos:end="73:110"><operator pos:start="73:91" pos:end="73:91">&amp;</operator><name pos:start="73:92" pos:end="73:110">minus_ext2_features</name></expr></argument>, <argument pos:start="73:113" pos:end="73:132"><expr pos:start="73:113" pos:end="73:132"><operator pos:start="73:113" pos:end="73:113">&amp;</operator><name pos:start="73:114" pos:end="73:132">minus_ext3_features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="75:11" pos:end="169:9">else if <condition pos:start="75:19" pos:end="75:51">(<expr pos:start="75:20" pos:end="75:50"><operator pos:start="75:20" pos:end="75:20">(</operator><name pos:start="75:21" pos:end="75:23">val</name> <operator pos:start="75:25" pos:end="75:25">=</operator> <call pos:start="75:27" pos:end="75:49"><name pos:start="75:27" pos:end="75:32">strchr</name><argument_list pos:start="75:33" pos:end="75:49">(<argument pos:start="75:34" pos:end="75:43"><expr pos:start="75:34" pos:end="75:43"><name pos:start="75:34" pos:end="75:43">featurestr</name></expr></argument>, <argument pos:start="75:46" pos:end="75:48"><expr pos:start="75:46" pos:end="75:48"><literal type="char" pos:start="75:46" pos:end="75:48">'='</literal></expr></argument>)</argument_list></call><operator pos:start="75:50" pos:end="75:50">)</operator></expr>)</condition> <block pos:start="75:53" pos:end="169:9">{<block_content pos:start="77:13" pos:end="167:13">

            <expr_stmt pos:start="77:13" pos:end="77:21"><expr pos:start="77:13" pos:end="77:20"><operator pos:start="77:13" pos:end="77:13">*</operator><name pos:start="77:14" pos:end="77:16">val</name> <operator pos:start="77:18" pos:end="77:18">=</operator> <literal type="number" pos:start="77:20" pos:end="77:20">0</literal></expr>;</expr_stmt> <expr_stmt pos:start="77:23" pos:end="77:28"><expr pos:start="77:23" pos:end="77:27"><name pos:start="77:23" pos:end="77:25">val</name><operator pos:start="77:26" pos:end="77:27">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="167:13"><if pos:start="79:13" pos:end="95:13">if <condition pos:start="79:16" pos:end="79:46">(<expr pos:start="79:17" pos:end="79:45"><operator pos:start="79:17" pos:end="79:17">!</operator><call pos:start="79:18" pos:end="79:45"><name pos:start="79:18" pos:end="79:23">strcmp</name><argument_list pos:start="79:24" pos:end="79:45">(<argument pos:start="79:25" pos:end="79:34"><expr pos:start="79:25" pos:end="79:34"><name pos:start="79:25" pos:end="79:34">featurestr</name></expr></argument>, <argument pos:start="79:37" pos:end="79:44"><expr pos:start="79:37" pos:end="79:44"><literal type="string" pos:start="79:37" pos:end="79:44">"family"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:48" pos:end="95:13">{<block_content pos:start="81:17" pos:end="93:45">

                <decl_stmt pos:start="81:17" pos:end="81:26"><decl pos:start="81:17" pos:end="81:25"><type pos:start="81:17" pos:end="81:22"><name pos:start="81:17" pos:end="81:20">char</name> <modifier pos:start="81:22" pos:end="81:22">*</modifier></type><name pos:start="81:23" pos:end="81:25">err</name></decl>;</decl_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:47"><expr pos:start="83:17" pos:end="83:46"><name pos:start="83:17" pos:end="83:22">family</name> <operator pos:start="83:24" pos:end="83:24">=</operator> <call pos:start="83:26" pos:end="83:46"><name pos:start="83:26" pos:end="83:31">strtol</name><argument_list pos:start="83:32" pos:end="83:46">(<argument pos:start="83:33" pos:end="83:35"><expr pos:start="83:33" pos:end="83:35"><name pos:start="83:33" pos:end="83:35">val</name></expr></argument>, <argument pos:start="83:38" pos:end="83:41"><expr pos:start="83:38" pos:end="83:41"><operator pos:start="83:38" pos:end="83:38">&amp;</operator><name pos:start="83:39" pos:end="83:41">err</name></expr></argument>, <argument pos:start="83:44" pos:end="83:45"><expr pos:start="83:44" pos:end="83:45"><literal type="number" pos:start="83:44" pos:end="83:45">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="85:17" pos:end="91:17"><if pos:start="85:17" pos:end="91:17">if <condition pos:start="85:20" pos:end="85:48">(<expr pos:start="85:21" pos:end="85:47"><operator pos:start="85:21" pos:end="85:21">!</operator><operator pos:start="85:22" pos:end="85:22">*</operator><name pos:start="85:23" pos:end="85:25">val</name> <operator pos:start="85:27" pos:end="85:28">||</operator> <operator pos:start="85:30" pos:end="85:30">*</operator><name pos:start="85:31" pos:end="85:33">err</name> <operator pos:start="85:35" pos:end="85:36">||</operator> <name pos:start="85:38" pos:end="85:43">family</name> <operator pos:start="85:45" pos:end="85:45">&lt;</operator> <literal type="number" pos:start="85:47" pos:end="85:47">0</literal></expr>)</condition> <block pos:start="85:50" pos:end="91:17">{<block_content pos:start="87:21" pos:end="89:31">

                    <expr_stmt pos:start="87:21" pos:end="87:69"><expr pos:start="87:21" pos:end="87:68"><call pos:start="87:21" pos:end="87:68"><name pos:start="87:21" pos:end="87:27">fprintf</name><argument_list pos:start="87:28" pos:end="87:68">(<argument pos:start="87:29" pos:end="87:34"><expr pos:start="87:29" pos:end="87:34"><name pos:start="87:29" pos:end="87:34">stderr</name></expr></argument>, <argument pos:start="87:37" pos:end="87:62"><expr pos:start="87:37" pos:end="87:62"><literal type="string" pos:start="87:37" pos:end="87:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="87:65" pos:end="87:67"><expr pos:start="87:65" pos:end="87:67"><name pos:start="87:65" pos:end="87:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="89:21" pos:end="89:31">goto <name pos:start="89:26" pos:end="89:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:45"><expr pos:start="93:17" pos:end="93:44"><name pos:start="93:17" pos:end="93:35"><name pos:start="93:17" pos:end="93:27">x86_cpu_def</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:35">family</name></name> <operator pos:start="93:37" pos:end="93:37">=</operator> <name pos:start="93:39" pos:end="93:44">family</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="95:15" pos:end="111:13">else if <condition pos:start="95:23" pos:end="95:52">(<expr pos:start="95:24" pos:end="95:51"><operator pos:start="95:24" pos:end="95:24">!</operator><call pos:start="95:25" pos:end="95:51"><name pos:start="95:25" pos:end="95:30">strcmp</name><argument_list pos:start="95:31" pos:end="95:51">(<argument pos:start="95:32" pos:end="95:41"><expr pos:start="95:32" pos:end="95:41"><name pos:start="95:32" pos:end="95:41">featurestr</name></expr></argument>, <argument pos:start="95:44" pos:end="95:50"><expr pos:start="95:44" pos:end="95:50"><literal type="string" pos:start="95:44" pos:end="95:50">"model"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:54" pos:end="111:13">{<block_content pos:start="97:17" pos:end="109:43">

                <decl_stmt pos:start="97:17" pos:end="97:26"><decl pos:start="97:17" pos:end="97:25"><type pos:start="97:17" pos:end="97:22"><name pos:start="97:17" pos:end="97:20">char</name> <modifier pos:start="97:22" pos:end="97:22">*</modifier></type><name pos:start="97:23" pos:end="97:25">err</name></decl>;</decl_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:46"><expr pos:start="99:17" pos:end="99:45"><name pos:start="99:17" pos:end="99:21">model</name> <operator pos:start="99:23" pos:end="99:23">=</operator> <call pos:start="99:25" pos:end="99:45"><name pos:start="99:25" pos:end="99:30">strtol</name><argument_list pos:start="99:31" pos:end="99:45">(<argument pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><name pos:start="99:32" pos:end="99:34">val</name></expr></argument>, <argument pos:start="99:37" pos:end="99:40"><expr pos:start="99:37" pos:end="99:40"><operator pos:start="99:37" pos:end="99:37">&amp;</operator><name pos:start="99:38" pos:end="99:40">err</name></expr></argument>, <argument pos:start="99:43" pos:end="99:44"><expr pos:start="99:43" pos:end="99:44"><literal type="number" pos:start="99:43" pos:end="99:44">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="101:17" pos:end="107:17"><if pos:start="101:17" pos:end="107:17">if <condition pos:start="101:20" pos:end="101:63">(<expr pos:start="101:21" pos:end="101:62"><operator pos:start="101:21" pos:end="101:21">!</operator><operator pos:start="101:22" pos:end="101:22">*</operator><name pos:start="101:23" pos:end="101:25">val</name> <operator pos:start="101:27" pos:end="101:28">||</operator> <operator pos:start="101:30" pos:end="101:30">*</operator><name pos:start="101:31" pos:end="101:33">err</name> <operator pos:start="101:35" pos:end="101:36">||</operator> <name pos:start="101:38" pos:end="101:57"><name pos:start="101:38" pos:end="101:42">model</name> <argument_list type="generic" pos:start="101:44" pos:end="101:57">&lt; <argument pos:start="101:46" pos:end="101:55"><expr pos:start="101:46" pos:end="101:55"><literal type="number" pos:start="101:46" pos:end="101:46">0</literal> <operator pos:start="101:48" pos:end="101:49">||</operator> <name pos:start="101:51" pos:end="101:55">model</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="101:59" pos:end="101:62">0xff</literal></expr>)</condition> <block pos:start="101:65" pos:end="107:17">{<block_content pos:start="103:21" pos:end="105:31">

                    <expr_stmt pos:start="103:21" pos:end="103:69"><expr pos:start="103:21" pos:end="103:68"><call pos:start="103:21" pos:end="103:68"><name pos:start="103:21" pos:end="103:27">fprintf</name><argument_list pos:start="103:28" pos:end="103:68">(<argument pos:start="103:29" pos:end="103:34"><expr pos:start="103:29" pos:end="103:34"><name pos:start="103:29" pos:end="103:34">stderr</name></expr></argument>, <argument pos:start="103:37" pos:end="103:62"><expr pos:start="103:37" pos:end="103:62"><literal type="string" pos:start="103:37" pos:end="103:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="103:65" pos:end="103:67"><expr pos:start="103:65" pos:end="103:67"><name pos:start="103:65" pos:end="103:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="105:21" pos:end="105:31">goto <name pos:start="105:26" pos:end="105:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:43"><expr pos:start="109:17" pos:end="109:42"><name pos:start="109:17" pos:end="109:34"><name pos:start="109:17" pos:end="109:27">x86_cpu_def</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:34">model</name></name> <operator pos:start="109:36" pos:end="109:36">=</operator> <name pos:start="109:38" pos:end="109:42">model</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="111:15" pos:end="127:13">else if <condition pos:start="111:23" pos:end="111:55">(<expr pos:start="111:24" pos:end="111:54"><operator pos:start="111:24" pos:end="111:24">!</operator><call pos:start="111:25" pos:end="111:54"><name pos:start="111:25" pos:end="111:30">strcmp</name><argument_list pos:start="111:31" pos:end="111:54">(<argument pos:start="111:32" pos:end="111:41"><expr pos:start="111:32" pos:end="111:41"><name pos:start="111:32" pos:end="111:41">featurestr</name></expr></argument>, <argument pos:start="111:44" pos:end="111:53"><expr pos:start="111:44" pos:end="111:53"><literal type="string" pos:start="111:44" pos:end="111:53">"stepping"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:57" pos:end="127:13">{<block_content pos:start="113:17" pos:end="125:49">

                <decl_stmt pos:start="113:17" pos:end="113:26"><decl pos:start="113:17" pos:end="113:25"><type pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:20">char</name> <modifier pos:start="113:22" pos:end="113:22">*</modifier></type><name pos:start="113:23" pos:end="113:25">err</name></decl>;</decl_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:49"><expr pos:start="115:17" pos:end="115:48"><name pos:start="115:17" pos:end="115:24">stepping</name> <operator pos:start="115:26" pos:end="115:26">=</operator> <call pos:start="115:28" pos:end="115:48"><name pos:start="115:28" pos:end="115:33">strtol</name><argument_list pos:start="115:34" pos:end="115:48">(<argument pos:start="115:35" pos:end="115:37"><expr pos:start="115:35" pos:end="115:37"><name pos:start="115:35" pos:end="115:37">val</name></expr></argument>, <argument pos:start="115:40" pos:end="115:43"><expr pos:start="115:40" pos:end="115:43"><operator pos:start="115:40" pos:end="115:40">&amp;</operator><name pos:start="115:41" pos:end="115:43">err</name></expr></argument>, <argument pos:start="115:46" pos:end="115:47"><expr pos:start="115:46" pos:end="115:47"><literal type="number" pos:start="115:46" pos:end="115:47">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="117:17" pos:end="123:17"><if pos:start="117:17" pos:end="123:17">if <condition pos:start="117:20" pos:end="117:68">(<expr pos:start="117:21" pos:end="117:67"><operator pos:start="117:21" pos:end="117:21">!</operator><operator pos:start="117:22" pos:end="117:22">*</operator><name pos:start="117:23" pos:end="117:25">val</name> <operator pos:start="117:27" pos:end="117:28">||</operator> <operator pos:start="117:30" pos:end="117:30">*</operator><name pos:start="117:31" pos:end="117:33">err</name> <operator pos:start="117:35" pos:end="117:36">||</operator> <name pos:start="117:38" pos:end="117:63"><name pos:start="117:38" pos:end="117:45">stepping</name> <argument_list type="generic" pos:start="117:47" pos:end="117:63">&lt; <argument pos:start="117:49" pos:end="117:61"><expr pos:start="117:49" pos:end="117:61"><literal type="number" pos:start="117:49" pos:end="117:49">0</literal> <operator pos:start="117:51" pos:end="117:52">||</operator> <name pos:start="117:54" pos:end="117:61">stepping</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="117:65" pos:end="117:67">0xf</literal></expr>)</condition> <block pos:start="117:70" pos:end="123:17">{<block_content pos:start="119:21" pos:end="121:31">

                    <expr_stmt pos:start="119:21" pos:end="119:69"><expr pos:start="119:21" pos:end="119:68"><call pos:start="119:21" pos:end="119:68"><name pos:start="119:21" pos:end="119:27">fprintf</name><argument_list pos:start="119:28" pos:end="119:68">(<argument pos:start="119:29" pos:end="119:34"><expr pos:start="119:29" pos:end="119:34"><name pos:start="119:29" pos:end="119:34">stderr</name></expr></argument>, <argument pos:start="119:37" pos:end="119:62"><expr pos:start="119:37" pos:end="119:62"><literal type="string" pos:start="119:37" pos:end="119:62">"bad numerical value %s\n"</literal></expr></argument>, <argument pos:start="119:65" pos:end="119:67"><expr pos:start="119:65" pos:end="119:67"><name pos:start="119:65" pos:end="119:67">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="121:21" pos:end="121:31">goto <name pos:start="121:26" pos:end="121:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:49"><expr pos:start="125:17" pos:end="125:48"><name pos:start="125:17" pos:end="125:37"><name pos:start="125:17" pos:end="125:27">x86_cpu_def</name><operator pos:start="125:28" pos:end="125:29">-&gt;</operator><name pos:start="125:30" pos:end="125:37">stepping</name></name> <operator pos:start="125:39" pos:end="125:39">=</operator> <name pos:start="125:41" pos:end="125:48">stepping</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="127:15" pos:end="155:13">else if <condition pos:start="127:23" pos:end="127:53">(<expr pos:start="127:24" pos:end="127:52"><operator pos:start="127:24" pos:end="127:24">!</operator><call pos:start="127:25" pos:end="127:52"><name pos:start="127:25" pos:end="127:30">strcmp</name><argument_list pos:start="127:31" pos:end="127:52">(<argument pos:start="127:32" pos:end="127:41"><expr pos:start="127:32" pos:end="127:41"><name pos:start="127:32" pos:end="127:41">featurestr</name></expr></argument>, <argument pos:start="127:44" pos:end="127:51"><expr pos:start="127:44" pos:end="127:51"><literal type="string" pos:start="127:44" pos:end="127:51">"vendor"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:55" pos:end="155:13">{<block_content pos:start="129:17" pos:end="153:49">

                <if_stmt pos:start="129:17" pos:end="135:17"><if pos:start="129:17" pos:end="135:17">if <condition pos:start="129:20" pos:end="129:38">(<expr pos:start="129:21" pos:end="129:37"><call pos:start="129:21" pos:end="129:31"><name pos:start="129:21" pos:end="129:26">strlen</name><argument_list pos:start="129:27" pos:end="129:31">(<argument pos:start="129:28" pos:end="129:30"><expr pos:start="129:28" pos:end="129:30"><name pos:start="129:28" pos:end="129:30">val</name></expr></argument>)</argument_list></call> <operator pos:start="129:33" pos:end="129:34">!=</operator> <literal type="number" pos:start="129:36" pos:end="129:37">12</literal></expr>)</condition> <block pos:start="129:40" pos:end="135:17">{<block_content pos:start="131:21" pos:end="133:31">

                    <expr_stmt pos:start="131:21" pos:end="131:77"><expr pos:start="131:21" pos:end="131:76"><call pos:start="131:21" pos:end="131:76"><name pos:start="131:21" pos:end="131:27">fprintf</name><argument_list pos:start="131:28" pos:end="131:76">(<argument pos:start="131:29" pos:end="131:34"><expr pos:start="131:29" pos:end="131:34"><name pos:start="131:29" pos:end="131:34">stderr</name></expr></argument>, <argument pos:start="131:37" pos:end="131:75"><expr pos:start="131:37" pos:end="131:75"><literal type="string" pos:start="131:37" pos:end="131:75">"vendor string must be 12 chars long\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="133:21" pos:end="133:31">goto <name pos:start="133:26" pos:end="133:30">error</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="137:17" pos:end="137:41"><expr pos:start="137:17" pos:end="137:40"><name pos:start="137:17" pos:end="137:36"><name pos:start="137:17" pos:end="137:27">x86_cpu_def</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:36">vendor1</name></name> <operator pos:start="137:38" pos:end="137:38">=</operator> <literal type="number" pos:start="137:40" pos:end="137:40">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:41"><expr pos:start="139:17" pos:end="139:40"><name pos:start="139:17" pos:end="139:36"><name pos:start="139:17" pos:end="139:27">x86_cpu_def</name><operator pos:start="139:28" pos:end="139:29">-&gt;</operator><name pos:start="139:30" pos:end="139:36">vendor2</name></name> <operator pos:start="139:38" pos:end="139:38">=</operator> <literal type="number" pos:start="139:40" pos:end="139:40">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:41"><expr pos:start="141:17" pos:end="141:40"><name pos:start="141:17" pos:end="141:36"><name pos:start="141:17" pos:end="141:27">x86_cpu_def</name><operator pos:start="141:28" pos:end="141:29">-&gt;</operator><name pos:start="141:30" pos:end="141:36">vendor3</name></name> <operator pos:start="141:38" pos:end="141:38">=</operator> <literal type="number" pos:start="141:40" pos:end="141:40">0</literal></expr>;</expr_stmt>

                <for pos:start="143:17" pos:end="151:17">for<control pos:start="143:20" pos:end="143:38">(<init pos:start="143:21" pos:end="143:26"><expr pos:start="143:21" pos:end="143:25"><name pos:start="143:21" pos:end="143:21">i</name> <operator pos:start="143:23" pos:end="143:23">=</operator> <literal type="number" pos:start="143:25" pos:end="143:25">0</literal></expr>;</init> <condition pos:start="143:28" pos:end="143:33"><expr pos:start="143:28" pos:end="143:32"><name pos:start="143:28" pos:end="143:28">i</name> <operator pos:start="143:30" pos:end="143:30">&lt;</operator> <literal type="number" pos:start="143:32" pos:end="143:32">4</literal></expr>;</condition> <incr pos:start="143:35" pos:end="143:37"><expr pos:start="143:35" pos:end="143:37"><name pos:start="143:35" pos:end="143:35">i</name><operator pos:start="143:36" pos:end="143:37">++</operator></expr></incr>)</control> <block pos:start="143:40" pos:end="151:17">{<block_content pos:start="145:21" pos:end="149:77">

                    <expr_stmt pos:start="145:21" pos:end="145:77"><expr pos:start="145:21" pos:end="145:76"><name pos:start="145:21" pos:end="145:40"><name pos:start="145:21" pos:end="145:31">x86_cpu_def</name><operator pos:start="145:32" pos:end="145:33">-&gt;</operator><name pos:start="145:34" pos:end="145:40">vendor1</name></name> <operator pos:start="145:42" pos:end="145:43">|=</operator> <operator pos:start="145:45" pos:end="145:45">(</operator><operator pos:start="145:46" pos:end="145:46">(</operator><name pos:start="145:47" pos:end="145:53">uint8_t</name><operator pos:start="145:54" pos:end="145:54">)</operator><name pos:start="145:55" pos:end="145:64"><name pos:start="145:55" pos:end="145:57">val</name><index pos:start="145:58" pos:end="145:64">[<expr pos:start="145:59" pos:end="145:59"><name pos:start="145:59" pos:end="145:59">i</name></expr>    ]</index></name><operator pos:start="145:65" pos:end="145:65">)</operator> <operator pos:start="145:67" pos:end="145:68">&lt;&lt;</operator> <operator pos:start="145:70" pos:end="145:70">(</operator><literal type="number" pos:start="145:71" pos:end="145:71">8</literal> <operator pos:start="145:73" pos:end="145:73">*</operator> <name pos:start="145:75" pos:end="145:75">i</name><operator pos:start="145:76" pos:end="145:76">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="147:21" pos:end="147:77"><expr pos:start="147:21" pos:end="147:76"><name pos:start="147:21" pos:end="147:40"><name pos:start="147:21" pos:end="147:31">x86_cpu_def</name><operator pos:start="147:32" pos:end="147:33">-&gt;</operator><name pos:start="147:34" pos:end="147:40">vendor2</name></name> <operator pos:start="147:42" pos:end="147:43">|=</operator> <operator pos:start="147:45" pos:end="147:45">(</operator><operator pos:start="147:46" pos:end="147:46">(</operator><name pos:start="147:47" pos:end="147:53">uint8_t</name><operator pos:start="147:54" pos:end="147:54">)</operator><name pos:start="147:55" pos:end="147:64"><name pos:start="147:55" pos:end="147:57">val</name><index pos:start="147:58" pos:end="147:64">[<expr pos:start="147:59" pos:end="147:63"><name pos:start="147:59" pos:end="147:59">i</name> <operator pos:start="147:61" pos:end="147:61">+</operator> <literal type="number" pos:start="147:63" pos:end="147:63">4</literal></expr>]</index></name><operator pos:start="147:65" pos:end="147:65">)</operator> <operator pos:start="147:67" pos:end="147:68">&lt;&lt;</operator> <operator pos:start="147:70" pos:end="147:70">(</operator><literal type="number" pos:start="147:71" pos:end="147:71">8</literal> <operator pos:start="147:73" pos:end="147:73">*</operator> <name pos:start="147:75" pos:end="147:75">i</name><operator pos:start="147:76" pos:end="147:76">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="149:21" pos:end="149:77"><expr pos:start="149:21" pos:end="149:76"><name pos:start="149:21" pos:end="149:40"><name pos:start="149:21" pos:end="149:31">x86_cpu_def</name><operator pos:start="149:32" pos:end="149:33">-&gt;</operator><name pos:start="149:34" pos:end="149:40">vendor3</name></name> <operator pos:start="149:42" pos:end="149:43">|=</operator> <operator pos:start="149:45" pos:end="149:45">(</operator><operator pos:start="149:46" pos:end="149:46">(</operator><name pos:start="149:47" pos:end="149:53">uint8_t</name><operator pos:start="149:54" pos:end="149:54">)</operator><name pos:start="149:55" pos:end="149:64"><name pos:start="149:55" pos:end="149:57">val</name><index pos:start="149:58" pos:end="149:64">[<expr pos:start="149:59" pos:end="149:63"><name pos:start="149:59" pos:end="149:59">i</name> <operator pos:start="149:61" pos:end="149:61">+</operator> <literal type="number" pos:start="149:63" pos:end="149:63">8</literal></expr>]</index></name><operator pos:start="149:65" pos:end="149:65">)</operator> <operator pos:start="149:67" pos:end="149:68">&lt;&lt;</operator> <operator pos:start="149:70" pos:end="149:70">(</operator><literal type="number" pos:start="149:71" pos:end="149:71">8</literal> <operator pos:start="149:73" pos:end="149:73">*</operator> <name pos:start="149:75" pos:end="149:75">i</name><operator pos:start="149:76" pos:end="149:76">)</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="153:17" pos:end="153:49"><expr pos:start="153:17" pos:end="153:48"><name pos:start="153:17" pos:end="153:44"><name pos:start="153:17" pos:end="153:27">x86_cpu_def</name><operator pos:start="153:28" pos:end="153:29">-&gt;</operator><name pos:start="153:30" pos:end="153:44">vendor_override</name></name> <operator pos:start="153:46" pos:end="153:46">=</operator> <literal type="number" pos:start="153:48" pos:end="153:48">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="155:15" pos:end="161:13">else if <condition pos:start="155:23" pos:end="155:55">(<expr pos:start="155:24" pos:end="155:54"><operator pos:start="155:24" pos:end="155:24">!</operator><call pos:start="155:25" pos:end="155:54"><name pos:start="155:25" pos:end="155:30">strcmp</name><argument_list pos:start="155:31" pos:end="155:54">(<argument pos:start="155:32" pos:end="155:41"><expr pos:start="155:32" pos:end="155:41"><name pos:start="155:32" pos:end="155:41">featurestr</name></expr></argument>, <argument pos:start="155:44" pos:end="155:53"><expr pos:start="155:44" pos:end="155:53"><literal type="string" pos:start="155:44" pos:end="155:53">"model_id"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="155:57" pos:end="161:13">{<block_content pos:start="157:17" pos:end="159:29">

                <expr_stmt pos:start="157:17" pos:end="159:29"><expr pos:start="157:17" pos:end="159:28"><call pos:start="157:17" pos:end="159:28"><name pos:start="157:17" pos:end="157:23">pstrcpy</name><argument_list pos:start="157:24" pos:end="159:28">(<argument pos:start="157:25" pos:end="157:45"><expr pos:start="157:25" pos:end="157:45"><name pos:start="157:25" pos:end="157:45"><name pos:start="157:25" pos:end="157:35">x86_cpu_def</name><operator pos:start="157:36" pos:end="157:37">-&gt;</operator><name pos:start="157:38" pos:end="157:45">model_id</name></name></expr></argument>, <argument pos:start="157:48" pos:end="157:76"><expr pos:start="157:48" pos:end="157:76"><sizeof pos:start="157:48" pos:end="157:76">sizeof<argument_list pos:start="157:54" pos:end="157:76">(<argument pos:start="157:55" pos:end="157:75"><expr pos:start="157:55" pos:end="157:75"><name pos:start="157:55" pos:end="157:75"><name pos:start="157:55" pos:end="157:65">x86_cpu_def</name><operator pos:start="157:66" pos:end="157:67">-&gt;</operator><name pos:start="157:68" pos:end="157:75">model_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                        <argument pos:start="159:25" pos:end="159:27"><expr pos:start="159:25" pos:end="159:27"><name pos:start="159:25" pos:end="159:27">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="161:15" pos:end="167:13">else <block pos:start="161:20" pos:end="167:13">{<block_content pos:start="163:17" pos:end="165:27">

                <expr_stmt pos:start="163:17" pos:end="163:73"><expr pos:start="163:17" pos:end="163:72"><call pos:start="163:17" pos:end="163:72"><name pos:start="163:17" pos:end="163:23">fprintf</name><argument_list pos:start="163:24" pos:end="163:72">(<argument pos:start="163:25" pos:end="163:30"><expr pos:start="163:25" pos:end="163:30"><name pos:start="163:25" pos:end="163:30">stderr</name></expr></argument>, <argument pos:start="163:33" pos:end="163:59"><expr pos:start="163:33" pos:end="163:59"><literal type="string" pos:start="163:33" pos:end="163:59">"unrecognized feature %s\n"</literal></expr></argument>, <argument pos:start="163:62" pos:end="163:71"><expr pos:start="163:62" pos:end="163:71"><name pos:start="163:62" pos:end="163:71">featurestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="165:17" pos:end="165:27">goto <name pos:start="165:22" pos:end="165:26">error</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="169:11" pos:end="175:9">else <block pos:start="169:16" pos:end="175:9">{<block_content pos:start="171:13" pos:end="173:23">

            <expr_stmt pos:start="171:13" pos:end="171:111"><expr pos:start="171:13" pos:end="171:110"><call pos:start="171:13" pos:end="171:110"><name pos:start="171:13" pos:end="171:19">fprintf</name><argument_list pos:start="171:20" pos:end="171:110">(<argument pos:start="171:21" pos:end="171:26"><expr pos:start="171:21" pos:end="171:26"><name pos:start="171:21" pos:end="171:26">stderr</name></expr></argument>, <argument pos:start="171:29" pos:end="171:97"><expr pos:start="171:29" pos:end="171:97"><literal type="string" pos:start="171:29" pos:end="171:97">"feature string `%s' not in format (+feature|-feature|feature=xyz)\n"</literal></expr></argument>, <argument pos:start="171:100" pos:end="171:109"><expr pos:start="171:100" pos:end="171:109"><name pos:start="171:100" pos:end="171:109">featurestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="173:13" pos:end="173:23">goto <name pos:start="173:18" pos:end="173:22">error</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:39"><expr pos:start="177:9" pos:end="177:38"><name pos:start="177:9" pos:end="177:18">featurestr</name> <operator pos:start="177:20" pos:end="177:20">=</operator> <call pos:start="177:22" pos:end="177:38"><name pos:start="177:22" pos:end="177:27">strtok</name><argument_list pos:start="177:28" pos:end="177:38">(<argument pos:start="177:29" pos:end="177:32"><expr pos:start="177:29" pos:end="177:32"><name pos:start="177:29" pos:end="177:32">NULL</name></expr></argument>, <argument pos:start="177:35" pos:end="177:37"><expr pos:start="177:35" pos:end="177:37"><literal type="string" pos:start="177:35" pos:end="177:37">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="181:5" pos:end="181:43"><expr pos:start="181:5" pos:end="181:42"><name pos:start="181:5" pos:end="181:25"><name pos:start="181:5" pos:end="181:15">x86_cpu_def</name><operator pos:start="181:16" pos:end="181:17">-&gt;</operator><name pos:start="181:18" pos:end="181:25">features</name></name> <operator pos:start="181:27" pos:end="181:28">|=</operator> <name pos:start="181:30" pos:end="181:42">plus_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:51"><expr pos:start="183:5" pos:end="183:50"><name pos:start="183:5" pos:end="183:29"><name pos:start="183:5" pos:end="183:15">x86_cpu_def</name><operator pos:start="183:16" pos:end="183:17">-&gt;</operator><name pos:start="183:18" pos:end="183:29">ext_features</name></name> <operator pos:start="183:31" pos:end="183:32">|=</operator> <name pos:start="183:34" pos:end="183:50">plus_ext_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:53"><expr pos:start="185:5" pos:end="185:52"><name pos:start="185:5" pos:end="185:30"><name pos:start="185:5" pos:end="185:15">x86_cpu_def</name><operator pos:start="185:16" pos:end="185:17">-&gt;</operator><name pos:start="185:18" pos:end="185:30">ext2_features</name></name> <operator pos:start="185:32" pos:end="185:33">|=</operator> <name pos:start="185:35" pos:end="185:52">plus_ext2_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:53"><expr pos:start="187:5" pos:end="187:52"><name pos:start="187:5" pos:end="187:30"><name pos:start="187:5" pos:end="187:15">x86_cpu_def</name><operator pos:start="187:16" pos:end="187:17">-&gt;</operator><name pos:start="187:18" pos:end="187:30">ext3_features</name></name> <operator pos:start="187:32" pos:end="187:33">|=</operator> <name pos:start="187:35" pos:end="187:52">plus_ext3_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:45"><expr pos:start="189:5" pos:end="189:44"><name pos:start="189:5" pos:end="189:25"><name pos:start="189:5" pos:end="189:15">x86_cpu_def</name><operator pos:start="189:16" pos:end="189:17">-&gt;</operator><name pos:start="189:18" pos:end="189:25">features</name></name> <operator pos:start="189:27" pos:end="189:28">&amp;=</operator> <operator pos:start="189:30" pos:end="189:30">~</operator><name pos:start="189:31" pos:end="189:44">minus_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:53"><expr pos:start="191:5" pos:end="191:52"><name pos:start="191:5" pos:end="191:29"><name pos:start="191:5" pos:end="191:15">x86_cpu_def</name><operator pos:start="191:16" pos:end="191:17">-&gt;</operator><name pos:start="191:18" pos:end="191:29">ext_features</name></name> <operator pos:start="191:31" pos:end="191:32">&amp;=</operator> <operator pos:start="191:34" pos:end="191:34">~</operator><name pos:start="191:35" pos:end="191:52">minus_ext_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:55"><expr pos:start="193:5" pos:end="193:54"><name pos:start="193:5" pos:end="193:30"><name pos:start="193:5" pos:end="193:15">x86_cpu_def</name><operator pos:start="193:16" pos:end="193:17">-&gt;</operator><name pos:start="193:18" pos:end="193:30">ext2_features</name></name> <operator pos:start="193:32" pos:end="193:33">&amp;=</operator> <operator pos:start="193:35" pos:end="193:35">~</operator><name pos:start="193:36" pos:end="193:54">minus_ext2_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:55"><expr pos:start="195:5" pos:end="195:54"><name pos:start="195:5" pos:end="195:30"><name pos:start="195:5" pos:end="195:15">x86_cpu_def</name><operator pos:start="195:16" pos:end="195:17">-&gt;</operator><name pos:start="195:18" pos:end="195:30">ext3_features</name></name> <operator pos:start="195:32" pos:end="195:33">&amp;=</operator> <operator pos:start="195:35" pos:end="195:35">~</operator><name pos:start="195:36" pos:end="195:54">minus_ext3_features</name></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:12"><expr pos:start="197:5" pos:end="197:11"><call pos:start="197:5" pos:end="197:11"><name pos:start="197:5" pos:end="197:8">free</name><argument_list pos:start="197:9" pos:end="197:11">(<argument pos:start="197:10" pos:end="197:10"><expr pos:start="197:10" pos:end="197:10"><name pos:start="197:10" pos:end="197:10">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="199:5" pos:end="199:13">return <expr pos:start="199:12" pos:end="199:12"><literal type="number" pos:start="199:12" pos:end="199:12">0</literal></expr>;</return>



<label pos:start="203:1" pos:end="203:6"><name pos:start="203:1" pos:end="203:5">error</name>:</label>

    <expr_stmt pos:start="205:5" pos:end="205:12"><expr pos:start="205:5" pos:end="205:11"><call pos:start="205:5" pos:end="205:11"><name pos:start="205:5" pos:end="205:8">free</name><argument_list pos:start="205:9" pos:end="205:11">(<argument pos:start="205:10" pos:end="205:10"><expr pos:start="205:10" pos:end="205:10"><name pos:start="205:10" pos:end="205:10">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="207:5" pos:end="207:14">return <expr pos:start="207:12" pos:end="207:13"><operator pos:start="207:12" pos:end="207:12">-</operator><literal type="number" pos:start="207:13" pos:end="207:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
