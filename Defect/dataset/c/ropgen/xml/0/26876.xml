<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26876.c" pos:tabs="8"><function pos:start="1:1" pos:end="463:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">kvm_init</name><parameter_list pos:start="1:20" pos:end="1:37">(<parameter pos:start="1:21" pos:end="1:36"><decl pos:start="1:21" pos:end="1:36"><type pos:start="1:21" pos:end="1:34"><name pos:start="1:21" pos:end="1:32">MachineState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:36">ms</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="463:1">{<block_content pos:start="5:5" pos:end="461:15">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">MachineClass</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:20">mc</name> <init pos:start="5:22" pos:end="5:44">= <expr pos:start="5:24" pos:end="5:44"><call pos:start="5:24" pos:end="5:44"><name pos:start="5:24" pos:end="5:40">MACHINE_GET_CLASS</name><argument_list pos:start="5:41" pos:end="5:44">(<argument pos:start="5:42" pos:end="5:43"><expr pos:start="5:42" pos:end="5:43"><name pos:start="5:42" pos:end="5:43">ms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="11:55"><decl pos:start="7:5" pos:end="11:54"><type pos:start="7:5" pos:end="7:21"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <specifier pos:start="7:12" pos:end="7:16">const</specifier> <name pos:start="7:18" pos:end="7:21">char</name></type> <name pos:start="7:23" pos:end="7:36"><name pos:start="7:23" pos:end="7:34">upgrade_note</name><index pos:start="7:35" pos:end="7:36">[]</index></name> <init pos:start="7:38" pos:end="11:54">=

        <expr pos:start="9:9" pos:end="11:54"><literal type="string" pos:start="9:9" pos:end="9:71">"Please upgrade to at least kernel 2.6.29 or recent kvm-kmod\n"</literal>

        <literal type="string" pos:start="11:9" pos:end="11:54">"(see http://sourceforge.net/projects/kvm).\n"</literal></expr></init></decl>;</decl_stmt>

    <struct pos:start="13:5" pos:end="27:22">struct <block pos:start="13:12" pos:end="19:5">{

        <decl_stmt pos:start="15:9" pos:end="15:25"><decl pos:start="15:9" pos:end="15:24"><type pos:start="15:9" pos:end="15:20"><specifier pos:start="15:9" pos:end="15:13">const</specifier> <name pos:start="15:15" pos:end="15:18">char</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:24">name</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:16"><decl pos:start="17:9" pos:end="17:15"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:15">num</name></decl>;</decl_stmt>

    }</block> <decl pos:start="19:7" pos:end="27:5"><name pos:start="19:7" pos:end="19:16"><name pos:start="19:7" pos:end="19:14">num_cpus</name><index pos:start="19:15" pos:end="19:16">[]</index></name> <init pos:start="19:18" pos:end="27:5">= <expr pos:start="19:20" pos:end="27:5"><block pos:start="19:20" pos:end="27:5">{

        <expr pos:start="21:9" pos:end="21:36"><block pos:start="21:9" pos:end="21:36">{ <expr pos:start="21:11" pos:end="21:15"><literal type="string" pos:start="21:11" pos:end="21:15">"SMP"</literal></expr>,          <expr pos:start="21:27" pos:end="21:34"><name pos:start="21:27" pos:end="21:34">smp_cpus</name></expr> }</block></expr>,

        <expr pos:start="23:9" pos:end="23:36"><block pos:start="23:9" pos:end="23:36">{ <expr pos:start="23:11" pos:end="23:24"><literal type="string" pos:start="23:11" pos:end="23:24">"hotpluggable"</literal></expr>, <expr pos:start="23:27" pos:end="23:34"><name pos:start="23:27" pos:end="23:34">max_cpus</name></expr> }</block></expr>,

        <expr pos:start="25:9" pos:end="25:17"><block pos:start="25:9" pos:end="25:17">{ <expr pos:start="25:11" pos:end="25:14"><name pos:start="25:11" pos:end="25:14">NULL</name></expr>, }</block></expr>

    }</block></expr></init></decl>, <decl pos:start="27:8" pos:end="27:21"><type ref="prev" pos:start="17:9" pos:end="17:11"><modifier pos:start="27:8" pos:end="27:8">*</modifier></type><name pos:start="27:9" pos:end="27:10">nc</name> <init pos:start="27:12" pos:end="27:21">= <expr pos:start="27:14" pos:end="27:21"><name pos:start="27:14" pos:end="27:21">num_cpus</name></expr></init></decl>;</struct>

    <decl_stmt pos:start="29:5" pos:end="29:43"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:24">soft_vcpus_limit</name></decl>, <decl pos:start="29:27" pos:end="29:42"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:27" pos:end="29:42">hard_vcpus_limit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:16"><decl pos:start="31:5" pos:end="31:15"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">KVMState</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:15">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:41"><decl pos:start="33:5" pos:end="33:40"><type pos:start="33:5" pos:end="33:29"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:27">KVMCapabilityInfo</name> <modifier pos:start="33:29" pos:end="33:29">*</modifier></type><name pos:start="33:30" pos:end="33:40">missing_cap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:12"><decl pos:start="35:5" pos:end="35:11"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:17"><decl pos:start="37:5" pos:end="37:16"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:12">type</name> <init pos:start="37:14" pos:end="37:16">= <expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:25"><decl pos:start="39:5" pos:end="39:24"><type pos:start="39:5" pos:end="39:16"><specifier pos:start="39:5" pos:end="39:9">const</specifier> <name pos:start="39:11" pos:end="39:14">char</name> <modifier pos:start="39:16" pos:end="39:16">*</modifier></type><name pos:start="39:17" pos:end="39:24">kvm_type</name></decl>;</decl_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:35"><expr pos:start="43:5" pos:end="43:34"><name pos:start="43:5" pos:end="43:5">s</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <call pos:start="43:9" pos:end="43:34"><name pos:start="43:9" pos:end="43:17">KVM_STATE</name><argument_list pos:start="43:18" pos:end="43:34">(<argument pos:start="43:19" pos:end="43:33"><expr pos:start="43:19" pos:end="43:33"><name pos:start="43:19" pos:end="43:33"><name pos:start="43:19" pos:end="43:20">ms</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:33">accelerator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="57:7">/*

     * On systems where the kernel can support different base page

     * sizes, host page size may be different from TARGET_PAGE_SIZE,

     * even with KVM.  TARGET_PAGE_SIZE is assumed to be the minimum

     * page size for the system though.

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:46"><expr pos:start="59:5" pos:end="59:45"><call pos:start="59:5" pos:end="59:45"><name pos:start="59:5" pos:end="59:10">assert</name><argument_list pos:start="59:11" pos:end="59:45">(<argument pos:start="59:12" pos:end="59:44"><expr pos:start="59:12" pos:end="59:44"><name pos:start="59:12" pos:end="59:27">TARGET_PAGE_SIZE</name> <operator pos:start="59:29" pos:end="59:30">&lt;=</operator> <call pos:start="59:32" pos:end="59:44"><name pos:start="59:32" pos:end="59:42">getpagesize</name><argument_list pos:start="59:43" pos:end="59:44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:21"><expr pos:start="61:5" pos:end="61:20"><call pos:start="61:5" pos:end="61:20"><name pos:start="61:5" pos:end="61:18">page_size_init</name><argument_list pos:start="61:19" pos:end="61:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="70:0"><expr pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:18"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:18">sigmask_len</name></name> <operator pos:start="65:20" pos:end="65:20">=</operator> <literal type="number" pos:start="65:22" pos:end="65:22">8</literal></expr>;</expr_stmt>



<cpp:ifdef pos:start="69:1" pos:end="69:30">#<cpp:directive pos:start="69:2" pos:end="69:6">ifdef</cpp:directive> <name pos:start="69:8" pos:end="69:30">KVM_CAP_SET_GUEST_DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="71:5" pos:end="74:0"><expr pos:start="71:5" pos:end="71:39"><call pos:start="71:5" pos:end="71:39"><name pos:start="71:5" pos:end="71:15">QTAILQ_INIT</name><argument_list pos:start="71:16" pos:end="71:39">(<argument pos:start="71:17" pos:end="71:38"><expr pos:start="71:17" pos:end="71:38"><operator pos:start="71:17" pos:end="71:17">&amp;</operator><name pos:start="71:18" pos:end="71:38"><name pos:start="71:18" pos:end="71:18">s</name><operator pos:start="71:19" pos:end="71:20">-&gt;</operator><name pos:start="71:21" pos:end="71:38">kvm_sw_breakpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="75:5" pos:end="75:17"><expr pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:11"><name pos:start="75:5" pos:end="75:5">s</name><operator pos:start="75:6" pos:end="75:7">-&gt;</operator><name pos:start="75:8" pos:end="75:11">vmfd</name></name> <operator pos:start="75:13" pos:end="75:13">=</operator> <operator pos:start="75:15" pos:end="75:15">-</operator><literal type="number" pos:start="75:16" pos:end="75:16">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:42"><expr pos:start="77:5" pos:end="77:41"><name pos:start="77:5" pos:end="77:9"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:9">fd</name></name> <operator pos:start="77:11" pos:end="77:11">=</operator> <call pos:start="77:13" pos:end="77:41"><name pos:start="77:13" pos:end="77:21">qemu_open</name><argument_list pos:start="77:22" pos:end="77:41">(<argument pos:start="77:23" pos:end="77:32"><expr pos:start="77:23" pos:end="77:32"><literal type="string" pos:start="77:23" pos:end="77:32">"/dev/kvm"</literal></expr></argument>, <argument pos:start="77:35" pos:end="77:40"><expr pos:start="77:35" pos:end="77:40"><name pos:start="77:35" pos:end="77:40">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="87:5"><if pos:start="79:5" pos:end="87:5">if <condition pos:start="79:8" pos:end="79:20">(<expr pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:13"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:13">fd</name></name> <operator pos:start="79:15" pos:end="79:16">==</operator> <operator pos:start="79:18" pos:end="79:18">-</operator><literal type="number" pos:start="79:19" pos:end="79:19">1</literal></expr>)</condition> <block pos:start="79:22" pos:end="87:5">{<block_content pos:start="81:9" pos:end="85:17">

        <expr_stmt pos:start="81:9" pos:end="81:68"><expr pos:start="81:9" pos:end="81:67"><call pos:start="81:9" pos:end="81:67"><name pos:start="81:9" pos:end="81:15">fprintf</name><argument_list pos:start="81:16" pos:end="81:67">(<argument pos:start="81:17" pos:end="81:22"><expr pos:start="81:17" pos:end="81:22"><name pos:start="81:17" pos:end="81:22">stderr</name></expr></argument>, <argument pos:start="81:25" pos:end="81:66"><expr pos:start="81:25" pos:end="81:66"><literal type="string" pos:start="81:25" pos:end="81:66">"Could not access KVM kernel module: %m\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:21"><expr pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <operator pos:start="83:15" pos:end="83:15">-</operator><name pos:start="83:16" pos:end="83:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:17">goto <name pos:start="85:14" pos:end="85:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:47"><expr pos:start="91:5" pos:end="91:46"><name pos:start="91:5" pos:end="91:7">ret</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:46"><name pos:start="91:11" pos:end="91:19">kvm_ioctl</name><argument_list pos:start="91:20" pos:end="91:46">(<argument pos:start="91:21" pos:end="91:21"><expr pos:start="91:21" pos:end="91:21"><name pos:start="91:21" pos:end="91:21">s</name></expr></argument>, <argument pos:start="91:24" pos:end="91:42"><expr pos:start="91:24" pos:end="91:42"><name pos:start="91:24" pos:end="91:42">KVM_GET_API_VERSION</name></expr></argument>, <argument pos:start="91:45" pos:end="91:45"><expr pos:start="91:45" pos:end="91:45"><literal type="number" pos:start="91:45" pos:end="91:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="105:5"><if pos:start="93:5" pos:end="105:5">if <condition pos:start="93:8" pos:end="93:30">(<expr pos:start="93:9" pos:end="93:29"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">&lt;</operator> <name pos:start="93:15" pos:end="93:29">KVM_API_VERSION</name></expr>)</condition> <block pos:start="93:32" pos:end="105:5">{<block_content pos:start="95:9" pos:end="103:17">

        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:21">(<expr pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:15">ret</name> <operator pos:start="95:17" pos:end="95:18">&gt;=</operator> <literal type="number" pos:start="95:20" pos:end="95:20">0</literal></expr>)</condition> <block pos:start="95:23" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:26">

            <expr_stmt pos:start="97:13" pos:end="97:26"><expr pos:start="97:13" pos:end="97:25"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <operator pos:start="97:19" pos:end="97:19">-</operator><name pos:start="97:20" pos:end="97:25">EINVAL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:49"><expr pos:start="101:9" pos:end="101:48"><call pos:start="101:9" pos:end="101:48"><name pos:start="101:9" pos:end="101:15">fprintf</name><argument_list pos:start="101:16" pos:end="101:48">(<argument pos:start="101:17" pos:end="101:22"><expr pos:start="101:17" pos:end="101:22"><name pos:start="101:17" pos:end="101:22">stderr</name></expr></argument>, <argument pos:start="101:25" pos:end="101:47"><expr pos:start="101:25" pos:end="101:47"><literal type="string" pos:start="101:25" pos:end="101:47">"kvm version too old\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:17">goto <name pos:start="103:14" pos:end="103:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="117:5"><if pos:start="109:5" pos:end="117:5">if <condition pos:start="109:8" pos:end="109:30">(<expr pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">&gt;</operator> <name pos:start="109:15" pos:end="109:29">KVM_API_VERSION</name></expr>)</condition> <block pos:start="109:32" pos:end="117:5">{<block_content pos:start="111:9" pos:end="115:17">

        <expr_stmt pos:start="111:9" pos:end="111:22"><expr pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <operator pos:start="111:15" pos:end="111:15">-</operator><name pos:start="111:16" pos:end="111:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:55"><expr pos:start="113:9" pos:end="113:54"><call pos:start="113:9" pos:end="113:54"><name pos:start="113:9" pos:end="113:15">fprintf</name><argument_list pos:start="113:16" pos:end="113:54">(<argument pos:start="113:17" pos:end="113:22"><expr pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:22">stderr</name></expr></argument>, <argument pos:start="113:25" pos:end="113:53"><expr pos:start="113:25" pos:end="113:53"><literal type="string" pos:start="113:25" pos:end="113:53">"kvm version not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="115:9" pos:end="115:17">goto <name pos:start="115:14" pos:end="115:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:62"><expr pos:start="121:5" pos:end="121:61"><name pos:start="121:5" pos:end="121:15"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:15">nr_slots</name></name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:61"><name pos:start="121:19" pos:end="121:37">kvm_check_extension</name><argument_list pos:start="121:38" pos:end="121:61">(<argument pos:start="121:39" pos:end="121:39"><expr pos:start="121:39" pos:end="121:39"><name pos:start="121:39" pos:end="121:39">s</name></expr></argument>, <argument pos:start="121:42" pos:end="121:60"><expr pos:start="121:42" pos:end="121:60"><name pos:start="121:42" pos:end="121:60">KVM_CAP_NR_MEMSLOTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:47">/* If unspecified, use the default value */</comment>

    <if_stmt pos:start="127:5" pos:end="131:5"><if pos:start="127:5" pos:end="131:5">if <condition pos:start="127:8" pos:end="127:21">(<expr pos:start="127:9" pos:end="127:20"><operator pos:start="127:9" pos:end="127:9">!</operator><name pos:start="127:10" pos:end="127:20"><name pos:start="127:10" pos:end="127:10">s</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:20">nr_slots</name></name></expr>)</condition> <block pos:start="127:23" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:25">

        <expr_stmt pos:start="129:9" pos:end="129:25"><expr pos:start="129:9" pos:end="129:24"><name pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:19">nr_slots</name></name> <operator pos:start="129:21" pos:end="129:21">=</operator> <literal type="number" pos:start="129:23" pos:end="129:24">32</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:31">/* check the vcpu limits */</comment>

    <expr_stmt pos:start="137:5" pos:end="137:48"><expr pos:start="137:5" pos:end="137:47"><name pos:start="137:5" pos:end="137:20">soft_vcpus_limit</name> <operator pos:start="137:22" pos:end="137:22">=</operator> <call pos:start="137:24" pos:end="137:47"><name pos:start="137:24" pos:end="137:44">kvm_recommended_vcpus</name><argument_list pos:start="137:45" pos:end="137:47">(<argument pos:start="137:46" pos:end="137:46"><expr pos:start="137:46" pos:end="137:46"><name pos:start="137:46" pos:end="137:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:40"><expr pos:start="139:5" pos:end="139:39"><name pos:start="139:5" pos:end="139:20">hard_vcpus_limit</name> <operator pos:start="139:22" pos:end="139:22">=</operator> <call pos:start="139:24" pos:end="139:39"><name pos:start="139:24" pos:end="139:36">kvm_max_vcpus</name><argument_list pos:start="139:37" pos:end="139:39">(<argument pos:start="139:38" pos:end="139:38"><expr pos:start="139:38" pos:end="139:38"><name pos:start="139:38" pos:end="139:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="143:5" pos:end="173:5">while <condition pos:start="143:11" pos:end="143:20">(<expr pos:start="143:12" pos:end="143:19"><name pos:start="143:12" pos:end="143:19"><name pos:start="143:12" pos:end="143:13">nc</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:19">name</name></name></expr>)</condition> <block pos:start="143:22" pos:end="173:5">{<block_content pos:start="145:9" pos:end="171:13">

        <if_stmt pos:start="145:9" pos:end="169:9"><if pos:start="145:9" pos:end="169:9">if <condition pos:start="145:12" pos:end="145:39">(<expr pos:start="145:13" pos:end="145:38"><name pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:14">nc</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:19">num</name></name> <operator pos:start="145:21" pos:end="145:21">&gt;</operator> <name pos:start="145:23" pos:end="145:38">soft_vcpus_limit</name></expr>)</condition> <block pos:start="145:41" pos:end="169:9">{<block_content pos:start="147:13" pos:end="167:13">

            <expr_stmt pos:start="147:13" pos:end="153:57"><expr pos:start="147:13" pos:end="153:56"><call pos:start="147:13" pos:end="153:56"><name pos:start="147:13" pos:end="147:19">fprintf</name><argument_list pos:start="147:20" pos:end="153:56">(<argument pos:start="147:21" pos:end="147:26"><expr pos:start="147:21" pos:end="147:26"><name pos:start="147:21" pos:end="147:26">stderr</name></expr></argument>,

                    <argument pos:start="149:21" pos:end="151:66"><expr pos:start="149:21" pos:end="151:66"><literal type="string" pos:start="149:21" pos:end="149:72">"Warning: Number of %s cpus requested (%d) exceeds "</literal>

                    <literal type="string" pos:start="151:21" pos:end="151:66">"the recommended cpus supported by KVM (%d)\n"</literal></expr></argument>,

                    <argument pos:start="153:21" pos:end="153:28"><expr pos:start="153:21" pos:end="153:28"><name pos:start="153:21" pos:end="153:28"><name pos:start="153:21" pos:end="153:22">nc</name><operator pos:start="153:23" pos:end="153:24">-&gt;</operator><name pos:start="153:25" pos:end="153:28">name</name></name></expr></argument>, <argument pos:start="153:31" pos:end="153:37"><expr pos:start="153:31" pos:end="153:37"><name pos:start="153:31" pos:end="153:37"><name pos:start="153:31" pos:end="153:32">nc</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:37">num</name></name></expr></argument>, <argument pos:start="153:40" pos:end="153:55"><expr pos:start="153:40" pos:end="153:55"><name pos:start="153:40" pos:end="153:55">soft_vcpus_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="157:13" pos:end="167:13"><if pos:start="157:13" pos:end="167:13">if <condition pos:start="157:16" pos:end="157:43">(<expr pos:start="157:17" pos:end="157:42"><name pos:start="157:17" pos:end="157:23"><name pos:start="157:17" pos:end="157:18">nc</name><operator pos:start="157:19" pos:end="157:20">-&gt;</operator><name pos:start="157:21" pos:end="157:23">num</name></name> <operator pos:start="157:25" pos:end="157:25">&gt;</operator> <name pos:start="157:27" pos:end="157:42">hard_vcpus_limit</name></expr>)</condition> <block pos:start="157:45" pos:end="167:13">{<block_content pos:start="159:17" pos:end="165:24">

                <expr_stmt pos:start="159:17" pos:end="163:61"><expr pos:start="159:17" pos:end="163:60"><call pos:start="159:17" pos:end="163:60"><name pos:start="159:17" pos:end="159:23">fprintf</name><argument_list pos:start="159:24" pos:end="163:60">(<argument pos:start="159:25" pos:end="159:30"><expr pos:start="159:25" pos:end="159:30"><name pos:start="159:25" pos:end="159:30">stderr</name></expr></argument>, <argument pos:start="159:33" pos:end="161:66"><expr pos:start="159:33" pos:end="161:66"><literal type="string" pos:start="159:33" pos:end="159:75">"Number of %s cpus requested (%d) exceeds "</literal>

                        <literal type="string" pos:start="161:25" pos:end="161:66">"the maximum cpus supported by KVM (%d)\n"</literal></expr></argument>,

                        <argument pos:start="163:25" pos:end="163:32"><expr pos:start="163:25" pos:end="163:32"><name pos:start="163:25" pos:end="163:32"><name pos:start="163:25" pos:end="163:26">nc</name><operator pos:start="163:27" pos:end="163:28">-&gt;</operator><name pos:start="163:29" pos:end="163:32">name</name></name></expr></argument>, <argument pos:start="163:35" pos:end="163:41"><expr pos:start="163:35" pos:end="163:41"><name pos:start="163:35" pos:end="163:41"><name pos:start="163:35" pos:end="163:36">nc</name><operator pos:start="163:37" pos:end="163:38">-&gt;</operator><name pos:start="163:39" pos:end="163:41">num</name></name></expr></argument>, <argument pos:start="163:44" pos:end="163:59"><expr pos:start="163:44" pos:end="163:59"><name pos:start="163:44" pos:end="163:59">hard_vcpus_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:24"><expr pos:start="165:17" pos:end="165:23"><call pos:start="165:17" pos:end="165:23"><name pos:start="165:17" pos:end="165:20">exit</name><argument_list pos:start="165:21" pos:end="165:23">(<argument pos:start="165:22" pos:end="165:22"><expr pos:start="165:22" pos:end="165:22"><literal type="number" pos:start="165:22" pos:end="165:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:13"><expr pos:start="171:9" pos:end="171:12"><name pos:start="171:9" pos:end="171:10">nc</name><operator pos:start="171:11" pos:end="171:12">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="177:5" pos:end="177:65"><expr pos:start="177:5" pos:end="177:64"><name pos:start="177:5" pos:end="177:12">kvm_type</name> <operator pos:start="177:14" pos:end="177:14">=</operator> <call pos:start="177:16" pos:end="177:64"><name pos:start="177:16" pos:end="177:27">qemu_opt_get</name><argument_list pos:start="177:28" pos:end="177:64">(<argument pos:start="177:29" pos:end="177:51"><expr pos:start="177:29" pos:end="177:51"><call pos:start="177:29" pos:end="177:51"><name pos:start="177:29" pos:end="177:49">qemu_get_machine_opts</name><argument_list pos:start="177:50" pos:end="177:51">()</argument_list></call></expr></argument>, <argument pos:start="177:54" pos:end="177:63"><expr pos:start="177:54" pos:end="177:63"><literal type="string" pos:start="177:54" pos:end="177:63">"kvm-type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="179:5" pos:end="191:5"><if pos:start="179:5" pos:end="183:5">if <condition pos:start="179:8" pos:end="179:21">(<expr pos:start="179:9" pos:end="179:20"><name pos:start="179:9" pos:end="179:20"><name pos:start="179:9" pos:end="179:10">mc</name><operator pos:start="179:11" pos:end="179:12">-&gt;</operator><name pos:start="179:13" pos:end="179:20">kvm_type</name></name></expr>)</condition> <block pos:start="179:23" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:38">

        <expr_stmt pos:start="181:9" pos:end="181:38"><expr pos:start="181:9" pos:end="181:37"><name pos:start="181:9" pos:end="181:12">type</name> <operator pos:start="181:14" pos:end="181:14">=</operator> <call pos:start="181:16" pos:end="181:37"><name pos:start="181:16" pos:end="181:27"><name pos:start="181:16" pos:end="181:17">mc</name><operator pos:start="181:18" pos:end="181:19">-&gt;</operator><name pos:start="181:20" pos:end="181:27">kvm_type</name></name><argument_list pos:start="181:28" pos:end="181:37">(<argument pos:start="181:29" pos:end="181:36"><expr pos:start="181:29" pos:end="181:36"><name pos:start="181:29" pos:end="181:36">kvm_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="183:7" pos:end="191:5">else if <condition pos:start="183:15" pos:end="183:24">(<expr pos:start="183:16" pos:end="183:23"><name pos:start="183:16" pos:end="183:23">kvm_type</name></expr>)</condition> <block pos:start="183:26" pos:end="191:5">{<block_content pos:start="185:9" pos:end="189:17">

        <expr_stmt pos:start="185:9" pos:end="185:22"><expr pos:start="185:9" pos:end="185:21"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <operator pos:start="185:15" pos:end="185:15">-</operator><name pos:start="185:16" pos:end="185:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:68"><expr pos:start="187:9" pos:end="187:67"><call pos:start="187:9" pos:end="187:67"><name pos:start="187:9" pos:end="187:15">fprintf</name><argument_list pos:start="187:16" pos:end="187:67">(<argument pos:start="187:17" pos:end="187:22"><expr pos:start="187:17" pos:end="187:22"><name pos:start="187:17" pos:end="187:22">stderr</name></expr></argument>, <argument pos:start="187:25" pos:end="187:56"><expr pos:start="187:25" pos:end="187:56"><literal type="string" pos:start="187:25" pos:end="187:56">"Invalid argument kvm-type=%s\n"</literal></expr></argument>, <argument pos:start="187:59" pos:end="187:66"><expr pos:start="187:59" pos:end="187:66"><name pos:start="187:59" pos:end="187:66">kvm_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="189:9" pos:end="189:17">goto <name pos:start="189:14" pos:end="189:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <do pos:start="195:5" pos:end="199:28">do <block pos:start="195:8" pos:end="199:5">{<block_content pos:start="197:9" pos:end="197:48">

        <expr_stmt pos:start="197:9" pos:end="197:48"><expr pos:start="197:9" pos:end="197:47"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <call pos:start="197:15" pos:end="197:47"><name pos:start="197:15" pos:end="197:23">kvm_ioctl</name><argument_list pos:start="197:24" pos:end="197:47">(<argument pos:start="197:25" pos:end="197:25"><expr pos:start="197:25" pos:end="197:25"><name pos:start="197:25" pos:end="197:25">s</name></expr></argument>, <argument pos:start="197:28" pos:end="197:40"><expr pos:start="197:28" pos:end="197:40"><name pos:start="197:28" pos:end="197:40">KVM_CREATE_VM</name></expr></argument>, <argument pos:start="197:43" pos:end="197:46"><expr pos:start="197:43" pos:end="197:46"><name pos:start="197:43" pos:end="197:46">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="199:13" pos:end="199:27">(<expr pos:start="199:14" pos:end="199:26"><name pos:start="199:14" pos:end="199:16">ret</name> <operator pos:start="199:18" pos:end="199:19">==</operator> <operator pos:start="199:21" pos:end="199:21">-</operator><name pos:start="199:22" pos:end="199:26">EINTR</name></expr>)</condition>;</do>



    <if_stmt pos:start="203:5" pos:end="239:5"><if pos:start="203:5" pos:end="239:5">if <condition pos:start="203:8" pos:end="203:16">(<expr pos:start="203:9" pos:end="203:15"><name pos:start="203:9" pos:end="203:11">ret</name> <operator pos:start="203:13" pos:end="203:13">&lt;</operator> <literal type="number" pos:start="203:15" pos:end="203:15">0</literal></expr>)</condition> <block pos:start="203:18" pos:end="239:5">{<block_content pos:start="205:9" pos:end="237:17">

        <expr_stmt pos:start="205:9" pos:end="212:0"><expr pos:start="205:9" pos:end="207:31"><call pos:start="205:9" pos:end="207:31"><name pos:start="205:9" pos:end="205:15">fprintf</name><argument_list pos:start="205:16" pos:end="207:31">(<argument pos:start="205:17" pos:end="205:22"><expr pos:start="205:17" pos:end="205:22"><name pos:start="205:17" pos:end="205:22">stderr</name></expr></argument>, <argument pos:start="205:25" pos:end="205:62"><expr pos:start="205:25" pos:end="205:62"><literal type="string" pos:start="205:25" pos:end="205:62">"ioctl(KVM_CREATE_VM) failed: %d %s\n"</literal></expr></argument>, <argument pos:start="205:65" pos:end="205:68"><expr pos:start="205:65" pos:end="205:68"><operator pos:start="205:65" pos:end="205:65">-</operator><name pos:start="205:66" pos:end="205:68">ret</name></expr></argument>,

                <argument pos:start="207:17" pos:end="207:30"><expr pos:start="207:17" pos:end="207:30"><call pos:start="207:17" pos:end="207:30"><name pos:start="207:17" pos:end="207:24">strerror</name><argument_list pos:start="207:25" pos:end="207:30">(<argument pos:start="207:26" pos:end="207:29"><expr pos:start="207:26" pos:end="207:29"><operator pos:start="207:26" pos:end="207:26">-</operator><name pos:start="207:27" pos:end="207:29">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="211:1" pos:end="211:19">#<cpp:directive pos:start="211:2" pos:end="211:6">ifdef</cpp:directive> <name pos:start="211:8" pos:end="211:19">TARGET_S390X</name></cpp:ifdef>

        <if_stmt pos:start="213:9" pos:end="236:0"><if pos:start="213:9" pos:end="236:0">if <condition pos:start="213:12" pos:end="213:27">(<expr pos:start="213:13" pos:end="213:26"><name pos:start="213:13" pos:end="213:15">ret</name> <operator pos:start="213:17" pos:end="213:18">==</operator> <operator pos:start="213:20" pos:end="213:20">-</operator><name pos:start="213:21" pos:end="213:26">EINVAL</name></expr>)</condition> <block pos:start="213:29" pos:end="236:0">{<block_content pos:start="215:13" pos:end="231:47">

            <expr_stmt pos:start="215:13" pos:end="217:76"><expr pos:start="215:13" pos:end="217:75"><call pos:start="215:13" pos:end="217:75"><name pos:start="215:13" pos:end="215:19">fprintf</name><argument_list pos:start="215:20" pos:end="217:75">(<argument pos:start="215:21" pos:end="215:26"><expr pos:start="215:21" pos:end="215:26"><name pos:start="215:21" pos:end="215:26">stderr</name></expr></argument>,

                    <argument pos:start="217:21" pos:end="217:74"><expr pos:start="217:21" pos:end="217:74"><literal type="string" pos:start="217:21" pos:end="217:74">"Host kernel setup problem detected. Please verify:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="221:56"><expr pos:start="219:13" pos:end="221:55"><call pos:start="219:13" pos:end="221:55"><name pos:start="219:13" pos:end="219:19">fprintf</name><argument_list pos:start="219:20" pos:end="221:55">(<argument pos:start="219:21" pos:end="219:26"><expr pos:start="219:21" pos:end="219:26"><name pos:start="219:21" pos:end="219:26">stderr</name></expr></argument>, <argument pos:start="219:29" pos:end="221:54"><expr pos:start="219:29" pos:end="221:54"><literal type="string" pos:start="219:29" pos:end="219:74">"- for kernels supporting the switch_amode or"</literal>

                    <literal type="string" pos:start="221:21" pos:end="221:54">" user_mode parameters, whether\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="225:74"><expr pos:start="223:13" pos:end="225:73"><call pos:start="223:13" pos:end="225:73"><name pos:start="223:13" pos:end="223:19">fprintf</name><argument_list pos:start="223:20" pos:end="225:73">(<argument pos:start="223:21" pos:end="223:26"><expr pos:start="223:21" pos:end="223:26"><name pos:start="223:21" pos:end="223:26">stderr</name></expr></argument>,

                    <argument pos:start="225:21" pos:end="225:72"><expr pos:start="225:21" pos:end="225:72"><literal type="string" pos:start="225:21" pos:end="225:72">"  user space is running in primary address space\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="231:47"><expr pos:start="227:13" pos:end="231:46"><call pos:start="227:13" pos:end="231:46"><name pos:start="227:13" pos:end="227:19">fprintf</name><argument_list pos:start="227:20" pos:end="231:46">(<argument pos:start="227:21" pos:end="227:26"><expr pos:start="227:21" pos:end="227:26"><name pos:start="227:21" pos:end="227:26">stderr</name></expr></argument>,

                    <argument pos:start="229:21" pos:end="231:45"><expr pos:start="229:21" pos:end="231:45"><literal type="string" pos:start="229:21" pos:end="229:77">"- for kernels supporting the vm.allocate_pgste sysctl, "</literal>

                    <literal type="string" pos:start="231:21" pos:end="231:45">"whether it is enabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="235:1" pos:end="235:6">#<cpp:directive pos:start="235:2" pos:end="235:6">endif</cpp:directive></cpp:endif>

        <goto pos:start="237:9" pos:end="237:17">goto <name pos:start="237:14" pos:end="237:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:18"><expr pos:start="243:5" pos:end="243:17"><name pos:start="243:5" pos:end="243:11"><name pos:start="243:5" pos:end="243:5">s</name><operator pos:start="243:6" pos:end="243:7">-&gt;</operator><name pos:start="243:8" pos:end="243:11">vmfd</name></name> <operator pos:start="243:13" pos:end="243:13">=</operator> <name pos:start="243:15" pos:end="243:17">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:72"><expr pos:start="245:5" pos:end="245:71"><name pos:start="245:5" pos:end="245:15">missing_cap</name> <operator pos:start="245:17" pos:end="245:17">=</operator> <call pos:start="245:19" pos:end="245:71"><name pos:start="245:19" pos:end="245:42">kvm_check_extension_list</name><argument_list pos:start="245:43" pos:end="245:71">(<argument pos:start="245:44" pos:end="245:44"><expr pos:start="245:44" pos:end="245:44"><name pos:start="245:44" pos:end="245:44">s</name></expr></argument>, <argument pos:start="245:47" pos:end="245:70"><expr pos:start="245:47" pos:end="245:70"><name pos:start="245:47" pos:end="245:70">kvm_required_capabilites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="247:5" pos:end="253:5"><if pos:start="247:5" pos:end="253:5">if <condition pos:start="247:8" pos:end="247:21">(<expr pos:start="247:9" pos:end="247:20"><operator pos:start="247:9" pos:end="247:9">!</operator><name pos:start="247:10" pos:end="247:20">missing_cap</name></expr>)</condition> <block pos:start="247:23" pos:end="253:5">{<block_content pos:start="249:9" pos:end="251:72">

        <expr_stmt pos:start="249:9" pos:end="251:72"><expr pos:start="249:9" pos:end="251:71"><name pos:start="249:9" pos:end="249:19">missing_cap</name> <operator pos:start="249:21" pos:end="249:21">=</operator>

            <call pos:start="251:13" pos:end="251:71"><name pos:start="251:13" pos:end="251:36">kvm_check_extension_list</name><argument_list pos:start="251:37" pos:end="251:71">(<argument pos:start="251:38" pos:end="251:38"><expr pos:start="251:38" pos:end="251:38"><name pos:start="251:38" pos:end="251:38">s</name></expr></argument>, <argument pos:start="251:41" pos:end="251:70"><expr pos:start="251:41" pos:end="251:70"><name pos:start="251:41" pos:end="251:70">kvm_arch_required_capabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="255:5" pos:end="265:5"><if pos:start="255:5" pos:end="265:5">if <condition pos:start="255:8" pos:end="255:20">(<expr pos:start="255:9" pos:end="255:19"><name pos:start="255:9" pos:end="255:19">missing_cap</name></expr>)</condition> <block pos:start="255:22" pos:end="265:5">{<block_content pos:start="257:9" pos:end="263:17">

        <expr_stmt pos:start="257:9" pos:end="257:22"><expr pos:start="257:9" pos:end="257:21"><name pos:start="257:9" pos:end="257:11">ret</name> <operator pos:start="257:13" pos:end="257:13">=</operator> <operator pos:start="257:15" pos:end="257:15">-</operator><name pos:start="257:16" pos:end="257:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="261:49"><expr pos:start="259:9" pos:end="261:48"><call pos:start="259:9" pos:end="261:48"><name pos:start="259:9" pos:end="259:15">fprintf</name><argument_list pos:start="259:16" pos:end="261:48">(<argument pos:start="259:17" pos:end="259:22"><expr pos:start="259:17" pos:end="259:22"><name pos:start="259:17" pos:end="259:22">stderr</name></expr></argument>, <argument pos:start="259:25" pos:end="259:53"><expr pos:start="259:25" pos:end="259:53"><literal type="string" pos:start="259:25" pos:end="259:53">"kvm does not support %s\n%s"</literal></expr></argument>,

                <argument pos:start="261:17" pos:end="261:33"><expr pos:start="261:17" pos:end="261:33"><name pos:start="261:17" pos:end="261:33"><name pos:start="261:17" pos:end="261:27">missing_cap</name><operator pos:start="261:28" pos:end="261:29">-&gt;</operator><name pos:start="261:30" pos:end="261:33">name</name></name></expr></argument>, <argument pos:start="261:36" pos:end="261:47"><expr pos:start="261:36" pos:end="261:47"><name pos:start="261:36" pos:end="261:47">upgrade_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="263:9" pos:end="263:17">goto <name pos:start="263:14" pos:end="263:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="269:5" pos:end="269:71"><expr pos:start="269:5" pos:end="269:70"><name pos:start="269:5" pos:end="269:21"><name pos:start="269:5" pos:end="269:5">s</name><operator pos:start="269:6" pos:end="269:7">-&gt;</operator><name pos:start="269:8" pos:end="269:21">coalesced_mmio</name></name> <operator pos:start="269:23" pos:end="269:23">=</operator> <call pos:start="269:25" pos:end="269:70"><name pos:start="269:25" pos:end="269:43">kvm_check_extension</name><argument_list pos:start="269:44" pos:end="269:70">(<argument pos:start="269:45" pos:end="269:45"><expr pos:start="269:45" pos:end="269:45"><name pos:start="269:45" pos:end="269:45">s</name></expr></argument>, <argument pos:start="269:48" pos:end="269:69"><expr pos:start="269:48" pos:end="269:69"><name pos:start="269:48" pos:end="269:69">KVM_CAP_COALESCED_MMIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="273:5" pos:end="273:33"><expr pos:start="273:5" pos:end="273:32"><name pos:start="273:5" pos:end="273:28"><name pos:start="273:5" pos:end="273:5">s</name><operator pos:start="273:6" pos:end="273:7">-&gt;</operator><name pos:start="273:8" pos:end="273:28">broken_set_mem_region</name></name> <operator pos:start="273:30" pos:end="273:30">=</operator> <literal type="number" pos:start="273:32" pos:end="273:32">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:68"><expr pos:start="275:5" pos:end="275:67"><name pos:start="275:5" pos:end="275:7">ret</name> <operator pos:start="275:9" pos:end="275:9">=</operator> <call pos:start="275:11" pos:end="275:67"><name pos:start="275:11" pos:end="275:29">kvm_check_extension</name><argument_list pos:start="275:30" pos:end="275:67">(<argument pos:start="275:31" pos:end="275:31"><expr pos:start="275:31" pos:end="275:31"><name pos:start="275:31" pos:end="275:31">s</name></expr></argument>, <argument pos:start="275:34" pos:end="275:66"><expr pos:start="275:34" pos:end="275:66"><name pos:start="275:34" pos:end="275:66">KVM_CAP_JOIN_MEMORY_REGIONS_WORKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="277:5" pos:end="286:0"><if pos:start="277:5" pos:end="286:0">if <condition pos:start="277:8" pos:end="277:16">(<expr pos:start="277:9" pos:end="277:15"><name pos:start="277:9" pos:end="277:11">ret</name> <operator pos:start="277:13" pos:end="277:13">&gt;</operator> <literal type="number" pos:start="277:15" pos:end="277:15">0</literal></expr>)</condition> <block pos:start="277:18" pos:end="286:0">{<block_content pos:start="279:9" pos:end="279:37">

        <expr_stmt pos:start="279:9" pos:end="279:37"><expr pos:start="279:9" pos:end="279:36"><name pos:start="279:9" pos:end="279:32"><name pos:start="279:9" pos:end="279:9">s</name><operator pos:start="279:10" pos:end="279:11">-&gt;</operator><name pos:start="279:12" pos:end="279:32">broken_set_mem_region</name></name> <operator pos:start="279:34" pos:end="279:34">=</operator> <literal type="number" pos:start="279:36" pos:end="279:36">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="285:1" pos:end="285:26">#<cpp:directive pos:start="285:2" pos:end="285:6">ifdef</cpp:directive> <name pos:start="285:8" pos:end="285:26">KVM_CAP_VCPU_EVENTS</name></cpp:ifdef>

    <expr_stmt pos:start="287:5" pos:end="290:0"><expr pos:start="287:5" pos:end="287:64"><name pos:start="287:5" pos:end="287:18"><name pos:start="287:5" pos:end="287:5">s</name><operator pos:start="287:6" pos:end="287:7">-&gt;</operator><name pos:start="287:8" pos:end="287:18">vcpu_events</name></name> <operator pos:start="287:20" pos:end="287:20">=</operator> <call pos:start="287:22" pos:end="287:64"><name pos:start="287:22" pos:end="287:40">kvm_check_extension</name><argument_list pos:start="287:41" pos:end="287:64">(<argument pos:start="287:42" pos:end="287:42"><expr pos:start="287:42" pos:end="287:42"><name pos:start="287:42" pos:end="287:42">s</name></expr></argument>, <argument pos:start="287:45" pos:end="287:63"><expr pos:start="287:45" pos:end="287:63"><name pos:start="287:45" pos:end="287:63">KVM_CAP_VCPU_EVENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="289:1" pos:end="289:6">#<cpp:directive pos:start="289:2" pos:end="289:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="293:5" pos:end="300:0"><expr pos:start="293:5" pos:end="295:61"><name pos:start="293:5" pos:end="293:24"><name pos:start="293:5" pos:end="293:5">s</name><operator pos:start="293:6" pos:end="293:7">-&gt;</operator><name pos:start="293:8" pos:end="293:24">robust_singlestep</name></name> <operator pos:start="293:26" pos:end="293:26">=</operator>

        <call pos:start="295:9" pos:end="295:61"><name pos:start="295:9" pos:end="295:27">kvm_check_extension</name><argument_list pos:start="295:28" pos:end="295:61">(<argument pos:start="295:29" pos:end="295:29"><expr pos:start="295:29" pos:end="295:29"><name pos:start="295:29" pos:end="295:29">s</name></expr></argument>, <argument pos:start="295:32" pos:end="295:60"><expr pos:start="295:32" pos:end="295:60"><name pos:start="295:32" pos:end="295:60">KVM_CAP_X86_ROBUST_SINGLESTEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="299:1" pos:end="299:24">#<cpp:directive pos:start="299:2" pos:end="299:6">ifdef</cpp:directive> <name pos:start="299:8" pos:end="299:24">KVM_CAP_DEBUGREGS</name></cpp:ifdef>

    <expr_stmt pos:start="301:5" pos:end="308:0"><expr pos:start="301:5" pos:end="301:60"><name pos:start="301:5" pos:end="301:16"><name pos:start="301:5" pos:end="301:5">s</name><operator pos:start="301:6" pos:end="301:7">-&gt;</operator><name pos:start="301:8" pos:end="301:16">debugregs</name></name> <operator pos:start="301:18" pos:end="301:18">=</operator> <call pos:start="301:20" pos:end="301:60"><name pos:start="301:20" pos:end="301:38">kvm_check_extension</name><argument_list pos:start="301:39" pos:end="301:60">(<argument pos:start="301:40" pos:end="301:40"><expr pos:start="301:40" pos:end="301:40"><name pos:start="301:40" pos:end="301:40">s</name></expr></argument>, <argument pos:start="301:43" pos:end="301:59"><expr pos:start="301:43" pos:end="301:59"><name pos:start="301:43" pos:end="301:59">KVM_CAP_DEBUGREGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="303:1" pos:end="303:6">#<cpp:directive pos:start="303:2" pos:end="303:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="307:1" pos:end="307:20">#<cpp:directive pos:start="307:2" pos:end="307:6">ifdef</cpp:directive> <name pos:start="307:8" pos:end="307:20">KVM_CAP_XSAVE</name></cpp:ifdef>

    <expr_stmt pos:start="309:5" pos:end="316:0"><expr pos:start="309:5" pos:end="309:52"><name pos:start="309:5" pos:end="309:12"><name pos:start="309:5" pos:end="309:5">s</name><operator pos:start="309:6" pos:end="309:7">-&gt;</operator><name pos:start="309:8" pos:end="309:12">xsave</name></name> <operator pos:start="309:14" pos:end="309:14">=</operator> <call pos:start="309:16" pos:end="309:52"><name pos:start="309:16" pos:end="309:34">kvm_check_extension</name><argument_list pos:start="309:35" pos:end="309:52">(<argument pos:start="309:36" pos:end="309:36"><expr pos:start="309:36" pos:end="309:36"><name pos:start="309:36" pos:end="309:36">s</name></expr></argument>, <argument pos:start="309:39" pos:end="309:51"><expr pos:start="309:39" pos:end="309:51"><name pos:start="309:39" pos:end="309:51">KVM_CAP_XSAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="311:1" pos:end="311:6">#<cpp:directive pos:start="311:2" pos:end="311:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="315:1" pos:end="315:19">#<cpp:directive pos:start="315:2" pos:end="315:6">ifdef</cpp:directive> <name pos:start="315:8" pos:end="315:19">KVM_CAP_XCRS</name></cpp:ifdef>

    <expr_stmt pos:start="317:5" pos:end="324:0"><expr pos:start="317:5" pos:end="317:50"><name pos:start="317:5" pos:end="317:11"><name pos:start="317:5" pos:end="317:5">s</name><operator pos:start="317:6" pos:end="317:7">-&gt;</operator><name pos:start="317:8" pos:end="317:11">xcrs</name></name> <operator pos:start="317:13" pos:end="317:13">=</operator> <call pos:start="317:15" pos:end="317:50"><name pos:start="317:15" pos:end="317:33">kvm_check_extension</name><argument_list pos:start="317:34" pos:end="317:50">(<argument pos:start="317:35" pos:end="317:35"><expr pos:start="317:35" pos:end="317:35"><name pos:start="317:35" pos:end="317:35">s</name></expr></argument>, <argument pos:start="317:38" pos:end="317:49"><expr pos:start="317:38" pos:end="317:49"><name pos:start="317:38" pos:end="317:49">KVM_CAP_XCRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="319:1" pos:end="319:6">#<cpp:directive pos:start="319:2" pos:end="319:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="323:1" pos:end="323:25">#<cpp:directive pos:start="323:2" pos:end="323:6">ifdef</cpp:directive> <name pos:start="323:8" pos:end="323:25">KVM_CAP_PIT_STATE2</name></cpp:ifdef>

    <expr_stmt pos:start="325:5" pos:end="332:0"><expr pos:start="325:5" pos:end="325:62"><name pos:start="325:5" pos:end="325:17"><name pos:start="325:5" pos:end="325:5">s</name><operator pos:start="325:6" pos:end="325:7">-&gt;</operator><name pos:start="325:8" pos:end="325:17">pit_state2</name></name> <operator pos:start="325:19" pos:end="325:19">=</operator> <call pos:start="325:21" pos:end="325:62"><name pos:start="325:21" pos:end="325:39">kvm_check_extension</name><argument_list pos:start="325:40" pos:end="325:62">(<argument pos:start="325:41" pos:end="325:41"><expr pos:start="325:41" pos:end="325:41"><name pos:start="325:41" pos:end="325:41">s</name></expr></argument>, <argument pos:start="325:44" pos:end="325:61"><expr pos:start="325:44" pos:end="325:61"><name pos:start="325:44" pos:end="325:61">KVM_CAP_PIT_STATE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="327:1" pos:end="327:6">#<cpp:directive pos:start="327:2" pos:end="327:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="331:1" pos:end="331:26">#<cpp:directive pos:start="331:2" pos:end="331:6">ifdef</cpp:directive> <name pos:start="331:8" pos:end="331:26">KVM_CAP_IRQ_ROUTING</name></cpp:ifdef>

    <expr_stmt pos:start="333:5" pos:end="336:0"><expr pos:start="333:5" pos:end="333:77"><name pos:start="333:5" pos:end="333:26">kvm_direct_msi_allowed</name> <operator pos:start="333:28" pos:end="333:28">=</operator> <operator pos:start="333:30" pos:end="333:30">(</operator><call pos:start="333:31" pos:end="333:72"><name pos:start="333:31" pos:end="333:49">kvm_check_extension</name><argument_list pos:start="333:50" pos:end="333:72">(<argument pos:start="333:51" pos:end="333:51"><expr pos:start="333:51" pos:end="333:51"><name pos:start="333:51" pos:end="333:51">s</name></expr></argument>, <argument pos:start="333:54" pos:end="333:71"><expr pos:start="333:54" pos:end="333:71"><name pos:start="333:54" pos:end="333:71">KVM_CAP_SIGNAL_MSI</name></expr></argument>)</argument_list></call> <operator pos:start="333:74" pos:end="333:74">&gt;</operator> <literal type="number" pos:start="333:76" pos:end="333:76">0</literal><operator pos:start="333:77" pos:end="333:77">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="335:1" pos:end="335:6">#<cpp:directive pos:start="335:2" pos:end="335:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="339:5" pos:end="339:63"><expr pos:start="339:5" pos:end="339:62"><name pos:start="339:5" pos:end="339:20"><name pos:start="339:5" pos:end="339:5">s</name><operator pos:start="339:6" pos:end="339:7">-&gt;</operator><name pos:start="339:8" pos:end="339:20">intx_set_mask</name></name> <operator pos:start="339:22" pos:end="339:22">=</operator> <call pos:start="339:24" pos:end="339:62"><name pos:start="339:24" pos:end="339:42">kvm_check_extension</name><argument_list pos:start="339:43" pos:end="339:62">(<argument pos:start="339:44" pos:end="339:44"><expr pos:start="339:44" pos:end="339:44"><name pos:start="339:44" pos:end="339:44">s</name></expr></argument>, <argument pos:start="339:47" pos:end="339:61"><expr pos:start="339:47" pos:end="339:61"><name pos:start="339:47" pos:end="339:61">KVM_CAP_PCI_2_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:36"><expr pos:start="343:5" pos:end="343:35"><name pos:start="343:5" pos:end="343:20"><name pos:start="343:5" pos:end="343:5">s</name><operator pos:start="343:6" pos:end="343:7">-&gt;</operator><name pos:start="343:8" pos:end="343:20">irq_set_ioctl</name></name> <operator pos:start="343:22" pos:end="343:22">=</operator> <name pos:start="343:24" pos:end="343:35">KVM_IRQ_LINE</name></expr>;</expr_stmt>

    <if_stmt pos:start="345:5" pos:end="354:0"><if pos:start="345:5" pos:end="354:0">if <condition pos:start="345:8" pos:end="345:58">(<expr pos:start="345:9" pos:end="345:57"><call pos:start="345:9" pos:end="345:57"><name pos:start="345:9" pos:end="345:27">kvm_check_extension</name><argument_list pos:start="345:28" pos:end="345:57">(<argument pos:start="345:29" pos:end="345:29"><expr pos:start="345:29" pos:end="345:29"><name pos:start="345:29" pos:end="345:29">s</name></expr></argument>, <argument pos:start="345:32" pos:end="345:56"><expr pos:start="345:32" pos:end="345:56"><name pos:start="345:32" pos:end="345:56">KVM_CAP_IRQ_INJECT_STATUS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="345:60" pos:end="354:0">{<block_content pos:start="347:9" pos:end="347:47">

        <expr_stmt pos:start="347:9" pos:end="347:47"><expr pos:start="347:9" pos:end="347:46"><name pos:start="347:9" pos:end="347:24"><name pos:start="347:9" pos:end="347:9">s</name><operator pos:start="347:10" pos:end="347:11">-&gt;</operator><name pos:start="347:12" pos:end="347:24">irq_set_ioctl</name></name> <operator pos:start="347:26" pos:end="347:26">=</operator> <name pos:start="347:28" pos:end="347:46">KVM_IRQ_LINE_STATUS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="353:1" pos:end="353:27">#<cpp:directive pos:start="353:2" pos:end="353:6">ifdef</cpp:directive> <name pos:start="353:8" pos:end="353:27">KVM_CAP_READONLY_MEM</name></cpp:ifdef>

    <expr_stmt pos:start="355:5" pos:end="360:0"><expr pos:start="355:5" pos:end="357:58"><name pos:start="355:5" pos:end="355:28">kvm_readonly_mem_allowed</name> <operator pos:start="355:30" pos:end="355:30">=</operator>

        <operator pos:start="357:9" pos:end="357:9">(</operator><call pos:start="357:10" pos:end="357:53"><name pos:start="357:10" pos:end="357:28">kvm_check_extension</name><argument_list pos:start="357:29" pos:end="357:53">(<argument pos:start="357:30" pos:end="357:30"><expr pos:start="357:30" pos:end="357:30"><name pos:start="357:30" pos:end="357:30">s</name></expr></argument>, <argument pos:start="357:33" pos:end="357:52"><expr pos:start="357:33" pos:end="357:52"><name pos:start="357:33" pos:end="357:52">KVM_CAP_READONLY_MEM</name></expr></argument>)</argument_list></call> <operator pos:start="357:55" pos:end="357:55">&gt;</operator> <literal type="number" pos:start="357:57" pos:end="357:57">0</literal><operator pos:start="357:58" pos:end="357:58">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="359:1" pos:end="359:6">#<cpp:directive pos:start="359:2" pos:end="359:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="363:5" pos:end="365:56"><expr pos:start="363:5" pos:end="365:55"><name pos:start="363:5" pos:end="363:24">kvm_eventfds_allowed</name> <operator pos:start="363:26" pos:end="363:26">=</operator>

        <operator pos:start="365:9" pos:end="365:9">(</operator><call pos:start="365:10" pos:end="365:50"><name pos:start="365:10" pos:end="365:28">kvm_check_extension</name><argument_list pos:start="365:29" pos:end="365:50">(<argument pos:start="365:30" pos:end="365:30"><expr pos:start="365:30" pos:end="365:30"><name pos:start="365:30" pos:end="365:30">s</name></expr></argument>, <argument pos:start="365:33" pos:end="365:49"><expr pos:start="365:33" pos:end="365:49"><name pos:start="365:33" pos:end="365:49">KVM_CAP_IOEVENTFD</name></expr></argument>)</argument_list></call> <operator pos:start="365:52" pos:end="365:52">&gt;</operator> <literal type="number" pos:start="365:54" pos:end="365:54">0</literal><operator pos:start="365:55" pos:end="365:55">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="369:5" pos:end="371:52"><expr pos:start="369:5" pos:end="371:51"><name pos:start="369:5" pos:end="369:22">kvm_irqfds_allowed</name> <operator pos:start="369:24" pos:end="369:24">=</operator>

        <operator pos:start="371:9" pos:end="371:9">(</operator><call pos:start="371:10" pos:end="371:46"><name pos:start="371:10" pos:end="371:28">kvm_check_extension</name><argument_list pos:start="371:29" pos:end="371:46">(<argument pos:start="371:30" pos:end="371:30"><expr pos:start="371:30" pos:end="371:30"><name pos:start="371:30" pos:end="371:30">s</name></expr></argument>, <argument pos:start="371:33" pos:end="371:45"><expr pos:start="371:33" pos:end="371:45"><name pos:start="371:33" pos:end="371:45">KVM_CAP_IRQFD</name></expr></argument>)</argument_list></call> <operator pos:start="371:48" pos:end="371:48">&gt;</operator> <literal type="number" pos:start="371:50" pos:end="371:50">0</literal><operator pos:start="371:51" pos:end="371:51">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="375:5" pos:end="377:61"><expr pos:start="375:5" pos:end="377:60"><name pos:start="375:5" pos:end="375:27">kvm_resamplefds_allowed</name> <operator pos:start="375:29" pos:end="375:29">=</operator>

        <operator pos:start="377:9" pos:end="377:9">(</operator><call pos:start="377:10" pos:end="377:55"><name pos:start="377:10" pos:end="377:28">kvm_check_extension</name><argument_list pos:start="377:29" pos:end="377:55">(<argument pos:start="377:30" pos:end="377:30"><expr pos:start="377:30" pos:end="377:30"><name pos:start="377:30" pos:end="377:30">s</name></expr></argument>, <argument pos:start="377:33" pos:end="377:54"><expr pos:start="377:33" pos:end="377:54"><name pos:start="377:33" pos:end="377:54">KVM_CAP_IRQFD_RESAMPLE</name></expr></argument>)</argument_list></call> <operator pos:start="377:57" pos:end="377:57">&gt;</operator> <literal type="number" pos:start="377:59" pos:end="377:59">0</literal><operator pos:start="377:60" pos:end="377:60">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="381:5" pos:end="383:60"><expr pos:start="381:5" pos:end="383:59"><name pos:start="381:5" pos:end="381:29">kvm_vm_attributes_allowed</name> <operator pos:start="381:31" pos:end="381:31">=</operator>

        <operator pos:start="383:9" pos:end="383:9">(</operator><call pos:start="383:10" pos:end="383:54"><name pos:start="383:10" pos:end="383:28">kvm_check_extension</name><argument_list pos:start="383:29" pos:end="383:54">(<argument pos:start="383:30" pos:end="383:30"><expr pos:start="383:30" pos:end="383:30"><name pos:start="383:30" pos:end="383:30">s</name></expr></argument>, <argument pos:start="383:33" pos:end="383:53"><expr pos:start="383:33" pos:end="383:53"><name pos:start="383:33" pos:end="383:53">KVM_CAP_VM_ATTRIBUTES</name></expr></argument>)</argument_list></call> <operator pos:start="383:56" pos:end="383:56">&gt;</operator> <literal type="number" pos:start="383:58" pos:end="383:58">0</literal><operator pos:start="383:59" pos:end="383:59">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="387:5" pos:end="387:31"><expr pos:start="387:5" pos:end="387:30"><name pos:start="387:5" pos:end="387:7">ret</name> <operator pos:start="387:9" pos:end="387:9">=</operator> <call pos:start="387:11" pos:end="387:30"><name pos:start="387:11" pos:end="387:23">kvm_arch_init</name><argument_list pos:start="387:24" pos:end="387:30">(<argument pos:start="387:25" pos:end="387:26"><expr pos:start="387:25" pos:end="387:26"><name pos:start="387:25" pos:end="387:26">ms</name></expr></argument>, <argument pos:start="387:29" pos:end="387:29"><expr pos:start="387:29" pos:end="387:29"><name pos:start="387:29" pos:end="387:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="389:5" pos:end="393:5"><if pos:start="389:5" pos:end="393:5">if <condition pos:start="389:8" pos:end="389:16">(<expr pos:start="389:9" pos:end="389:15"><name pos:start="389:9" pos:end="389:11">ret</name> <operator pos:start="389:13" pos:end="389:13">&lt;</operator> <literal type="number" pos:start="389:15" pos:end="389:15">0</literal></expr>)</condition> <block pos:start="389:18" pos:end="393:5">{<block_content pos:start="391:9" pos:end="391:17">

        <goto pos:start="391:9" pos:end="391:17">goto <name pos:start="391:14" pos:end="391:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="397:5" pos:end="401:5"><if pos:start="397:5" pos:end="401:5">if <condition pos:start="397:8" pos:end="397:43">(<expr pos:start="397:9" pos:end="397:42"><call pos:start="397:9" pos:end="397:42"><name pos:start="397:9" pos:end="397:38">machine_kernel_irqchip_allowed</name><argument_list pos:start="397:39" pos:end="397:42">(<argument pos:start="397:40" pos:end="397:41"><expr pos:start="397:40" pos:end="397:41"><name pos:start="397:40" pos:end="397:41">ms</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="397:45" pos:end="401:5">{<block_content pos:start="399:9" pos:end="399:34">

        <expr_stmt pos:start="399:9" pos:end="399:34"><expr pos:start="399:9" pos:end="399:33"><call pos:start="399:9" pos:end="399:33"><name pos:start="399:9" pos:end="399:26">kvm_irqchip_create</name><argument_list pos:start="399:27" pos:end="399:33">(<argument pos:start="399:28" pos:end="399:29"><expr pos:start="399:28" pos:end="399:29"><name pos:start="399:28" pos:end="399:29">ms</name></expr></argument>, <argument pos:start="399:32" pos:end="399:32"><expr pos:start="399:32" pos:end="399:32"><name pos:start="399:32" pos:end="399:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="405:5" pos:end="405:18"><expr pos:start="405:5" pos:end="405:17"><name pos:start="405:5" pos:end="405:13">kvm_state</name> <operator pos:start="405:15" pos:end="405:15">=</operator> <name pos:start="405:17" pos:end="405:17">s</name></expr>;</expr_stmt>



    <expr_stmt pos:start="409:5" pos:end="409:68"><expr pos:start="409:5" pos:end="409:67"><name pos:start="409:5" pos:end="409:43"><name pos:start="409:5" pos:end="409:5">s</name><operator pos:start="409:6" pos:end="409:7">-&gt;</operator><name pos:start="409:8" pos:end="409:22">memory_listener</name><operator pos:start="409:23" pos:end="409:23">.</operator><name pos:start="409:24" pos:end="409:31">listener</name><operator pos:start="409:32" pos:end="409:32">.</operator><name pos:start="409:33" pos:end="409:43">eventfd_add</name></name> <operator pos:start="409:45" pos:end="409:45">=</operator> <name pos:start="409:47" pos:end="409:67">kvm_mem_ioeventfd_add</name></expr>;</expr_stmt>

    <expr_stmt pos:start="411:5" pos:end="411:68"><expr pos:start="411:5" pos:end="411:67"><name pos:start="411:5" pos:end="411:43"><name pos:start="411:5" pos:end="411:5">s</name><operator pos:start="411:6" pos:end="411:7">-&gt;</operator><name pos:start="411:8" pos:end="411:22">memory_listener</name><operator pos:start="411:23" pos:end="411:23">.</operator><name pos:start="411:24" pos:end="411:31">listener</name><operator pos:start="411:32" pos:end="411:32">.</operator><name pos:start="411:33" pos:end="411:43">eventfd_del</name></name> <operator pos:start="411:45" pos:end="411:45">=</operator> <name pos:start="411:47" pos:end="411:67">kvm_mem_ioeventfd_del</name></expr>;</expr_stmt>

    <expr_stmt pos:start="413:5" pos:end="413:78"><expr pos:start="413:5" pos:end="413:77"><name pos:start="413:5" pos:end="413:50"><name pos:start="413:5" pos:end="413:5">s</name><operator pos:start="413:6" pos:end="413:7">-&gt;</operator><name pos:start="413:8" pos:end="413:22">memory_listener</name><operator pos:start="413:23" pos:end="413:23">.</operator><name pos:start="413:24" pos:end="413:31">listener</name><operator pos:start="413:32" pos:end="413:32">.</operator><name pos:start="413:33" pos:end="413:50">coalesced_mmio_add</name></name> <operator pos:start="413:52" pos:end="413:52">=</operator> <name pos:start="413:54" pos:end="413:77">kvm_coalesce_mmio_region</name></expr>;</expr_stmt>

    <expr_stmt pos:start="415:5" pos:end="415:80"><expr pos:start="415:5" pos:end="415:79"><name pos:start="415:5" pos:end="415:50"><name pos:start="415:5" pos:end="415:5">s</name><operator pos:start="415:6" pos:end="415:7">-&gt;</operator><name pos:start="415:8" pos:end="415:22">memory_listener</name><operator pos:start="415:23" pos:end="415:23">.</operator><name pos:start="415:24" pos:end="415:31">listener</name><operator pos:start="415:32" pos:end="415:32">.</operator><name pos:start="415:33" pos:end="415:50">coalesced_mmio_del</name></name> <operator pos:start="415:52" pos:end="415:52">=</operator> <name pos:start="415:54" pos:end="415:79">kvm_uncoalesce_mmio_region</name></expr>;</expr_stmt>



    <expr_stmt pos:start="419:5" pos:end="421:59"><expr pos:start="419:5" pos:end="421:58"><call pos:start="419:5" pos:end="421:58"><name pos:start="419:5" pos:end="419:32">kvm_memory_listener_register</name><argument_list pos:start="419:33" pos:end="421:58">(<argument pos:start="419:34" pos:end="419:34"><expr pos:start="419:34" pos:end="419:34"><name pos:start="419:34" pos:end="419:34">s</name></expr></argument>, <argument pos:start="419:37" pos:end="419:55"><expr pos:start="419:37" pos:end="419:55"><operator pos:start="419:37" pos:end="419:37">&amp;</operator><name pos:start="419:38" pos:end="419:55"><name pos:start="419:38" pos:end="419:38">s</name><operator pos:start="419:39" pos:end="419:40">-&gt;</operator><name pos:start="419:41" pos:end="419:55">memory_listener</name></name></expr></argument>,

                                 <argument pos:start="421:34" pos:end="421:54"><expr pos:start="421:34" pos:end="421:54"><operator pos:start="421:34" pos:end="421:34">&amp;</operator><name pos:start="421:35" pos:end="421:54">address_space_memory</name></expr></argument>, <argument pos:start="421:57" pos:end="421:57"><expr pos:start="421:57" pos:end="421:57"><literal type="number" pos:start="421:57" pos:end="421:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="425:48"><expr pos:start="423:5" pos:end="425:47"><call pos:start="423:5" pos:end="425:47"><name pos:start="423:5" pos:end="423:28">memory_listener_register</name><argument_list pos:start="423:29" pos:end="425:47">(<argument pos:start="423:30" pos:end="423:45"><expr pos:start="423:30" pos:end="423:45"><operator pos:start="423:30" pos:end="423:30">&amp;</operator><name pos:start="423:31" pos:end="423:45">kvm_io_listener</name></expr></argument>,

                             <argument pos:start="425:30" pos:end="425:46"><expr pos:start="425:30" pos:end="425:46"><operator pos:start="425:30" pos:end="425:30">&amp;</operator><name pos:start="425:31" pos:end="425:46">address_space_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="429:5" pos:end="429:53"><expr pos:start="429:5" pos:end="429:52"><name pos:start="429:5" pos:end="429:22"><name pos:start="429:5" pos:end="429:5">s</name><operator pos:start="429:6" pos:end="429:7">-&gt;</operator><name pos:start="429:8" pos:end="429:22">many_ioeventfds</name></name> <operator pos:start="429:24" pos:end="429:24">=</operator> <call pos:start="429:26" pos:end="429:52"><name pos:start="429:26" pos:end="429:50">kvm_check_many_ioeventfds</name><argument_list pos:start="429:51" pos:end="429:52">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="433:5" pos:end="433:49"><expr pos:start="433:5" pos:end="433:48"><name pos:start="433:5" pos:end="433:25">cpu_interrupt_handler</name> <operator pos:start="433:27" pos:end="433:27">=</operator> <name pos:start="433:29" pos:end="433:48">kvm_handle_interrupt</name></expr>;</expr_stmt>



    <return pos:start="437:5" pos:end="437:13">return <expr pos:start="437:12" pos:end="437:12"><literal type="number" pos:start="437:12" pos:end="437:12">0</literal></expr>;</return>



<label pos:start="441:1" pos:end="441:4"><name pos:start="441:1" pos:end="441:3">err</name>:</label>

    <expr_stmt pos:start="443:5" pos:end="443:20"><expr pos:start="443:5" pos:end="443:19"><call pos:start="443:5" pos:end="443:19"><name pos:start="443:5" pos:end="443:10">assert</name><argument_list pos:start="443:11" pos:end="443:19">(<argument pos:start="443:12" pos:end="443:18"><expr pos:start="443:12" pos:end="443:18"><name pos:start="443:12" pos:end="443:14">ret</name> <operator pos:start="443:16" pos:end="443:16">&lt;</operator> <literal type="number" pos:start="443:18" pos:end="443:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="445:5" pos:end="449:5"><if pos:start="445:5" pos:end="449:5">if <condition pos:start="445:8" pos:end="445:21">(<expr pos:start="445:9" pos:end="445:20"><name pos:start="445:9" pos:end="445:15"><name pos:start="445:9" pos:end="445:9">s</name><operator pos:start="445:10" pos:end="445:11">-&gt;</operator><name pos:start="445:12" pos:end="445:15">vmfd</name></name> <operator pos:start="445:17" pos:end="445:18">&gt;=</operator> <literal type="number" pos:start="445:20" pos:end="445:20">0</literal></expr>)</condition> <block pos:start="445:23" pos:end="449:5">{<block_content pos:start="447:9" pos:end="447:23">

        <expr_stmt pos:start="447:9" pos:end="447:23"><expr pos:start="447:9" pos:end="447:22"><call pos:start="447:9" pos:end="447:22"><name pos:start="447:9" pos:end="447:13">close</name><argument_list pos:start="447:14" pos:end="447:22">(<argument pos:start="447:15" pos:end="447:21"><expr pos:start="447:15" pos:end="447:21"><name pos:start="447:15" pos:end="447:21"><name pos:start="447:15" pos:end="447:15">s</name><operator pos:start="447:16" pos:end="447:17">-&gt;</operator><name pos:start="447:18" pos:end="447:21">vmfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="451:5" pos:end="455:5"><if pos:start="451:5" pos:end="455:5">if <condition pos:start="451:8" pos:end="451:20">(<expr pos:start="451:9" pos:end="451:19"><name pos:start="451:9" pos:end="451:13"><name pos:start="451:9" pos:end="451:9">s</name><operator pos:start="451:10" pos:end="451:11">-&gt;</operator><name pos:start="451:12" pos:end="451:13">fd</name></name> <operator pos:start="451:15" pos:end="451:16">!=</operator> <operator pos:start="451:18" pos:end="451:18">-</operator><literal type="number" pos:start="451:19" pos:end="451:19">1</literal></expr>)</condition> <block pos:start="451:22" pos:end="455:5">{<block_content pos:start="453:9" pos:end="453:21">

        <expr_stmt pos:start="453:9" pos:end="453:21"><expr pos:start="453:9" pos:end="453:20"><call pos:start="453:9" pos:end="453:20"><name pos:start="453:9" pos:end="453:13">close</name><argument_list pos:start="453:14" pos:end="453:20">(<argument pos:start="453:15" pos:end="453:19"><expr pos:start="453:15" pos:end="453:19"><name pos:start="453:15" pos:end="453:19"><name pos:start="453:15" pos:end="453:15">s</name><operator pos:start="453:16" pos:end="453:17">-&gt;</operator><name pos:start="453:18" pos:end="453:19">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="457:5" pos:end="457:37"><expr pos:start="457:5" pos:end="457:36"><call pos:start="457:5" pos:end="457:36"><name pos:start="457:5" pos:end="457:10">g_free</name><argument_list pos:start="457:11" pos:end="457:36">(<argument pos:start="457:12" pos:end="457:35"><expr pos:start="457:12" pos:end="457:35"><name pos:start="457:12" pos:end="457:35"><name pos:start="457:12" pos:end="457:12">s</name><operator pos:start="457:13" pos:end="457:14">-&gt;</operator><name pos:start="457:15" pos:end="457:29">memory_listener</name><operator pos:start="457:30" pos:end="457:30">.</operator><name pos:start="457:31" pos:end="457:35">slots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="461:5" pos:end="461:15">return <expr pos:start="461:12" pos:end="461:14"><name pos:start="461:12" pos:end="461:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
