<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24314.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">qemu_tcg_init_vcpu</name><parameter_list pos:start="1:31" pos:end="1:45">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:41"><name pos:start="1:32" pos:end="1:39">CPUState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:5">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:43"><name pos:start="5:10" pos:end="5:20">thread_name</name><index pos:start="5:21" pos:end="5:43">[<expr pos:start="5:22" pos:end="5:42"><name pos:start="5:22" pos:end="5:42">VCPU_THREAD_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:21"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:19">QemuCond</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:34">tcg_halt_cond</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:23"><specifier pos:start="9:5" pos:end="9:10">static</specifier> <name pos:start="9:12" pos:end="9:21">QemuThread</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:37">tcg_cpu_thread</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><call pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:30">tcg_cpu_address_space_init</name><argument_list pos:start="13:31" pos:end="13:44">(<argument pos:start="13:32" pos:end="13:34"><expr pos:start="13:32" pos:end="13:34"><name pos:start="13:32" pos:end="13:34">cpu</name></expr></argument>, <argument pos:start="13:37" pos:end="13:43"><expr pos:start="13:37" pos:end="13:43"><name pos:start="13:37" pos:end="13:43"><name pos:start="13:37" pos:end="13:39">cpu</name><operator pos:start="13:40" pos:end="13:41">-&gt;</operator><name pos:start="13:42" pos:end="13:43">as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:53">/* share a single thread for all cpus with TCG */</comment>

    <if_stmt pos:start="19:5" pos:end="57:5"><if pos:start="19:5" pos:end="51:5">if <condition pos:start="19:8" pos:end="19:24">(<expr pos:start="19:9" pos:end="19:23"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:23">tcg_cpu_thread</name></expr>)</condition> <block pos:start="19:26" pos:end="51:5">{<block_content pos:start="21:9" pos:end="49:37">

        <expr_stmt pos:start="21:9" pos:end="21:52"><expr pos:start="21:9" pos:end="21:51"><name pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:11">cpu</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:19">thread</name></name> <operator pos:start="21:21" pos:end="21:21">=</operator> <call pos:start="21:23" pos:end="21:51"><name pos:start="21:23" pos:end="21:31">g_malloc0</name><argument_list pos:start="21:32" pos:end="21:51">(<argument pos:start="21:33" pos:end="21:50"><expr pos:start="21:33" pos:end="21:50"><sizeof pos:start="21:33" pos:end="21:50">sizeof<argument_list pos:start="21:39" pos:end="21:50">(<argument pos:start="21:40" pos:end="21:49"><expr pos:start="21:40" pos:end="21:49"><name pos:start="21:40" pos:end="21:49">QemuThread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:53"><expr pos:start="23:9" pos:end="23:52"><name pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:11">cpu</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:22">halt_cond</name></name> <operator pos:start="23:24" pos:end="23:24">=</operator> <call pos:start="23:26" pos:end="23:52"><name pos:start="23:26" pos:end="23:34">g_malloc0</name><argument_list pos:start="23:35" pos:end="23:52">(<argument pos:start="23:36" pos:end="23:51"><expr pos:start="23:36" pos:end="23:51"><sizeof pos:start="23:36" pos:end="23:51">sizeof<argument_list pos:start="23:42" pos:end="23:51">(<argument pos:start="23:43" pos:end="23:50"><expr pos:start="23:43" pos:end="23:50"><name pos:start="23:43" pos:end="23:50">QemuCond</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:39"><expr pos:start="25:9" pos:end="25:38"><call pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:22">qemu_cond_init</name><argument_list pos:start="25:23" pos:end="25:38">(<argument pos:start="25:24" pos:end="25:37"><expr pos:start="25:24" pos:end="25:37"><name pos:start="25:24" pos:end="25:37"><name pos:start="25:24" pos:end="25:26">cpu</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:37">halt_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:39"><expr pos:start="27:9" pos:end="27:38"><name pos:start="27:9" pos:end="27:21">tcg_halt_cond</name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:38"><name pos:start="27:25" pos:end="27:27">cpu</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:38">halt_cond</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="31:33"><expr pos:start="29:9" pos:end="31:32"><call pos:start="29:9" pos:end="31:32"><name pos:start="29:9" pos:end="29:16">snprintf</name><argument_list pos:start="29:17" pos:end="31:32">(<argument pos:start="29:18" pos:end="29:28"><expr pos:start="29:18" pos:end="29:28"><name pos:start="29:18" pos:end="29:28">thread_name</name></expr></argument>, <argument pos:start="29:31" pos:end="29:51"><expr pos:start="29:31" pos:end="29:51"><name pos:start="29:31" pos:end="29:51">VCPU_THREAD_NAME_SIZE</name></expr></argument>, <argument pos:start="29:54" pos:end="29:65"><expr pos:start="29:54" pos:end="29:65"><literal type="string" pos:start="29:54" pos:end="29:65">"CPU %d/TCG"</literal></expr></argument>,

                 <argument pos:start="31:18" pos:end="31:31"><expr pos:start="31:18" pos:end="31:31"><name pos:start="31:18" pos:end="31:31"><name pos:start="31:18" pos:end="31:20">cpu</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:31">cpu_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="38:0"><expr pos:start="33:9" pos:end="35:53"><call pos:start="33:9" pos:end="35:53"><name pos:start="33:9" pos:end="33:26">qemu_thread_create</name><argument_list pos:start="33:27" pos:end="35:53">(<argument pos:start="33:28" pos:end="33:38"><expr pos:start="33:28" pos:end="33:38"><name pos:start="33:28" pos:end="33:38"><name pos:start="33:28" pos:end="33:30">cpu</name><operator pos:start="33:31" pos:end="33:32">-&gt;</operator><name pos:start="33:33" pos:end="33:38">thread</name></name></expr></argument>, <argument pos:start="33:41" pos:end="33:51"><expr pos:start="33:41" pos:end="33:51"><name pos:start="33:41" pos:end="33:51">thread_name</name></expr></argument>, <argument pos:start="33:54" pos:end="33:75"><expr pos:start="33:54" pos:end="33:75"><name pos:start="33:54" pos:end="33:75">qemu_tcg_cpu_thread_fn</name></expr></argument>,

                           <argument pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:30">cpu</name></expr></argument>, <argument pos:start="35:33" pos:end="35:52"><expr pos:start="35:33" pos:end="35:52"><name pos:start="35:33" pos:end="35:52">QEMU_THREAD_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="37:1" pos:end="37:13">#<cpp:directive pos:start="37:2" pos:end="37:6">ifdef</cpp:directive> <name pos:start="37:8" pos:end="37:13">_WIN32</name></cpp:ifdef>

        <expr_stmt pos:start="39:9" pos:end="42:0"><expr pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:11">cpu</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:20">hThread</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <call pos:start="39:24" pos:end="39:58"><name pos:start="39:24" pos:end="39:45">qemu_thread_get_handle</name><argument_list pos:start="39:46" pos:end="39:58">(<argument pos:start="39:47" pos:end="39:57"><expr pos:start="39:47" pos:end="39:57"><name pos:start="39:47" pos:end="39:57"><name pos:start="39:47" pos:end="39:49">cpu</name><operator pos:start="39:50" pos:end="39:51">-&gt;</operator><name pos:start="39:52" pos:end="39:57">thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

        <while pos:start="43:9" pos:end="47:9">while <condition pos:start="43:15" pos:end="43:29">(<expr pos:start="43:16" pos:end="43:28"><operator pos:start="43:16" pos:end="43:16">!</operator><name pos:start="43:17" pos:end="43:28"><name pos:start="43:17" pos:end="43:19">cpu</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:28">created</name></name></expr>)</condition> <block pos:start="43:31" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:63">

            <expr_stmt pos:start="45:13" pos:end="45:63"><expr pos:start="45:13" pos:end="45:62"><call pos:start="45:13" pos:end="45:62"><name pos:start="45:13" pos:end="45:26">qemu_cond_wait</name><argument_list pos:start="45:27" pos:end="45:62">(<argument pos:start="45:28" pos:end="45:41"><expr pos:start="45:28" pos:end="45:41"><operator pos:start="45:28" pos:end="45:28">&amp;</operator><name pos:start="45:29" pos:end="45:41">qemu_cpu_cond</name></expr></argument>, <argument pos:start="45:44" pos:end="45:61"><expr pos:start="45:44" pos:end="45:61"><operator pos:start="45:44" pos:end="45:44">&amp;</operator><name pos:start="45:45" pos:end="45:61">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="49:9" pos:end="49:37"><expr pos:start="49:9" pos:end="49:36"><name pos:start="49:9" pos:end="49:22">tcg_cpu_thread</name> <operator pos:start="49:24" pos:end="49:24">=</operator> <name pos:start="49:26" pos:end="49:36"><name pos:start="49:26" pos:end="49:28">cpu</name><operator pos:start="49:29" pos:end="49:30">-&gt;</operator><name pos:start="49:31" pos:end="49:36">thread</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="57:5">else <block pos:start="51:12" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:39">

        <expr_stmt pos:start="53:9" pos:end="53:37"><expr pos:start="53:9" pos:end="53:36"><name pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:11">cpu</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:19">thread</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <name pos:start="53:23" pos:end="53:36">tcg_cpu_thread</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:11">cpu</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:22">halt_cond</name></name> <operator pos:start="55:24" pos:end="55:24">=</operator> <name pos:start="55:26" pos:end="55:38">tcg_halt_cond</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
