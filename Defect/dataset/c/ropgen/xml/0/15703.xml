<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15703.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:48"><name pos:start="1:1" pos:end="1:25">petalogix_s3adsp1800_init</name><argument_list pos:start="1:26" pos:end="1:48">(<argument pos:start="1:27" pos:end="1:47">MachineState *machine</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="5:5" pos:end="147:46">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">DeviceState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">MicroBlazeCPU</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">DriveInfo</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:37"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">hwaddr</name></type> <name pos:start="17:12" pos:end="17:19">ddr_base</name> <init pos:start="17:21" pos:end="17:37">= <expr pos:start="17:23" pos:end="17:37"><name pos:start="17:23" pos:end="17:37">MEMORY_BASEADDR</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:57"><decl pos:start="19:5" pos:end="19:56"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:31">phys_lmb_bram</name> <init pos:start="19:33" pos:end="19:56">= <expr pos:start="19:35" pos:end="19:56"><call pos:start="19:35" pos:end="19:56"><name pos:start="19:35" pos:end="19:39">g_new</name><argument_list pos:start="19:40" pos:end="19:56">(<argument pos:start="19:41" pos:end="19:52"><expr pos:start="19:41" pos:end="19:52"><name pos:start="19:41" pos:end="19:52">MemoryRegion</name></expr></argument>, <argument pos:start="19:55" pos:end="19:55"><expr pos:start="19:55" pos:end="19:55"><literal type="number" pos:start="19:55" pos:end="19:55">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:52"><decl pos:start="21:5" pos:end="21:51"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:26">phys_ram</name> <init pos:start="21:28" pos:end="21:51">= <expr pos:start="21:30" pos:end="21:51"><call pos:start="21:30" pos:end="21:51"><name pos:start="21:30" pos:end="21:34">g_new</name><argument_list pos:start="21:35" pos:end="21:51">(<argument pos:start="21:36" pos:end="21:47"><expr pos:start="21:36" pos:end="21:47"><name pos:start="21:36" pos:end="21:47">MemoryRegion</name></expr></argument>, <argument pos:start="21:50" pos:end="21:50"><expr pos:start="21:50" pos:end="21:50"><literal type="number" pos:start="21:50" pos:end="21:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">qemu_irq</name></type> <name pos:start="23:14" pos:end="23:20"><name pos:start="23:14" pos:end="23:16">irq</name><index pos:start="23:17" pos:end="23:20">[<expr pos:start="23:18" pos:end="23:19"><literal type="number" pos:start="23:18" pos:end="23:19">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:47"><decl pos:start="25:5" pos:end="25:46"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:24">sysmem</name> <init pos:start="25:26" pos:end="25:46">= <expr pos:start="25:28" pos:end="25:46"><call pos:start="25:28" pos:end="25:46"><name pos:start="25:28" pos:end="25:44">get_system_memory</name><argument_list pos:start="25:45" pos:end="25:46">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:19">/* init CPUs */</comment>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:26">(<expr pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:17">cpu_model</name> <operator pos:start="31:19" pos:end="31:20">==</operator> <name pos:start="31:22" pos:end="31:25">NULL</name></expr>)</condition> <block pos:start="31:28" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:33">

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:17">cpu_model</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="string" pos:start="33:21" pos:end="33:32">"microblaze"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:7">cpu</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:32"><name pos:start="37:11" pos:end="37:21">cpu_mb_init</name><argument_list pos:start="37:22" pos:end="37:32">(<argument pos:start="37:23" pos:end="37:31"><expr pos:start="37:23" pos:end="37:31"><name pos:start="37:23" pos:end="37:31">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:48">/* Attach emulated BRAM through the LMB.  */</comment>

    <expr_stmt pos:start="43:5" pos:end="47:41"><expr pos:start="43:5" pos:end="47:40"><call pos:start="43:5" pos:end="47:40"><name pos:start="43:5" pos:end="43:26">memory_region_init_ram</name><argument_list pos:start="43:27" pos:end="47:40">(<argument pos:start="43:28" pos:end="43:40"><expr pos:start="43:28" pos:end="43:40"><name pos:start="43:28" pos:end="43:40">phys_lmb_bram</name></expr></argument>, <argument pos:start="43:43" pos:end="43:46"><expr pos:start="43:43" pos:end="43:46"><name pos:start="43:43" pos:end="43:46">NULL</name></expr></argument>,

                           <argument pos:start="45:28" pos:end="45:58"><expr pos:start="45:28" pos:end="45:58"><literal type="string" pos:start="45:28" pos:end="45:58">"petalogix_s3adsp1800.lmb_bram"</literal></expr></argument>, <argument pos:start="45:61" pos:end="45:73"><expr pos:start="45:61" pos:end="45:73"><name pos:start="45:61" pos:end="45:73">LMB_BRAM_SIZE</name></expr></argument>,

                           <argument pos:start="47:28" pos:end="47:39"><expr pos:start="47:28" pos:end="47:39"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:47"><expr pos:start="49:5" pos:end="49:46"><call pos:start="49:5" pos:end="49:46"><name pos:start="49:5" pos:end="49:31">vmstate_register_ram_global</name><argument_list pos:start="49:32" pos:end="49:46">(<argument pos:start="49:33" pos:end="49:45"><expr pos:start="49:33" pos:end="49:45"><name pos:start="49:33" pos:end="49:45">phys_lmb_bram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:67"><expr pos:start="51:5" pos:end="51:66"><call pos:start="51:5" pos:end="51:66"><name pos:start="51:5" pos:end="51:31">memory_region_add_subregion</name><argument_list pos:start="51:32" pos:end="51:66">(<argument pos:start="51:33" pos:end="51:38"><expr pos:start="51:33" pos:end="51:38"><name pos:start="51:33" pos:end="51:38">sysmem</name></expr></argument>, <argument pos:start="51:41" pos:end="51:50"><expr pos:start="51:41" pos:end="51:50"><literal type="number" pos:start="51:41" pos:end="51:50">0x00000000</literal></expr></argument>, <argument pos:start="51:53" pos:end="51:65"><expr pos:start="51:53" pos:end="51:65"><name pos:start="51:53" pos:end="51:65">phys_lmb_bram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="57:51"><expr pos:start="55:5" pos:end="57:50"><call pos:start="55:5" pos:end="57:50"><name pos:start="55:5" pos:end="55:26">memory_region_init_ram</name><argument_list pos:start="55:27" pos:end="57:50">(<argument pos:start="55:28" pos:end="55:35"><expr pos:start="55:28" pos:end="55:35"><name pos:start="55:28" pos:end="55:35">phys_ram</name></expr></argument>, <argument pos:start="55:38" pos:end="55:41"><expr pos:start="55:38" pos:end="55:41"><name pos:start="55:38" pos:end="55:41">NULL</name></expr></argument>, <argument pos:start="55:44" pos:end="55:69"><expr pos:start="55:44" pos:end="55:69"><literal type="string" pos:start="55:44" pos:end="55:69">"petalogix_s3adsp1800.ram"</literal></expr></argument>,

                           <argument pos:start="57:28" pos:end="57:35"><expr pos:start="57:28" pos:end="57:35"><name pos:start="57:28" pos:end="57:35">ram_size</name></expr></argument>, <argument pos:start="57:38" pos:end="57:49"><expr pos:start="57:38" pos:end="57:49"><operator pos:start="57:38" pos:end="57:38">&amp;</operator><name pos:start="57:39" pos:end="57:49">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:42"><expr pos:start="59:5" pos:end="59:41"><call pos:start="59:5" pos:end="59:41"><name pos:start="59:5" pos:end="59:31">vmstate_register_ram_global</name><argument_list pos:start="59:32" pos:end="59:41">(<argument pos:start="59:33" pos:end="59:40"><expr pos:start="59:33" pos:end="59:40"><name pos:start="59:33" pos:end="59:40">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:60"><expr pos:start="61:5" pos:end="61:59"><call pos:start="61:5" pos:end="61:59"><name pos:start="61:5" pos:end="61:31">memory_region_add_subregion</name><argument_list pos:start="61:32" pos:end="61:59">(<argument pos:start="61:33" pos:end="61:38"><expr pos:start="61:33" pos:end="61:38"><name pos:start="61:33" pos:end="61:38">sysmem</name></expr></argument>, <argument pos:start="61:41" pos:end="61:48"><expr pos:start="61:41" pos:end="61:48"><name pos:start="61:41" pos:end="61:48">ddr_base</name></expr></argument>, <argument pos:start="61:51" pos:end="61:58"><expr pos:start="61:51" pos:end="61:58"><name pos:start="61:51" pos:end="61:58">phys_ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:39"><expr pos:start="65:5" pos:end="65:38"><name pos:start="65:5" pos:end="65:9">dinfo</name> <operator pos:start="65:11" pos:end="65:11">=</operator> <call pos:start="65:13" pos:end="65:38"><name pos:start="65:13" pos:end="65:21">drive_get</name><argument_list pos:start="65:22" pos:end="65:38">(<argument pos:start="65:23" pos:end="65:31"><expr pos:start="65:23" pos:end="65:31"><name pos:start="65:23" pos:end="65:31">IF_PFLASH</name></expr></argument>, <argument pos:start="65:34" pos:end="65:34"><expr pos:start="65:34" pos:end="65:34"><literal type="number" pos:start="65:34" pos:end="65:34">0</literal></expr></argument>, <argument pos:start="65:37" pos:end="65:37"><expr pos:start="65:37" pos:end="65:37"><literal type="number" pos:start="65:37" pos:end="65:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="75:57"><expr pos:start="67:5" pos:end="75:56"><call pos:start="67:5" pos:end="75:56"><name pos:start="67:5" pos:end="67:25">pflash_cfi01_register</name><argument_list pos:start="67:26" pos:end="75:56">(<argument pos:start="67:27" pos:end="67:40"><expr pos:start="67:27" pos:end="67:40"><name pos:start="67:27" pos:end="67:40">FLASH_BASEADDR</name></expr></argument>,

                          <argument pos:start="69:27" pos:end="69:30"><expr pos:start="69:27" pos:end="69:30"><name pos:start="69:27" pos:end="69:30">NULL</name></expr></argument>, <argument pos:start="69:33" pos:end="69:60"><expr pos:start="69:33" pos:end="69:60"><literal type="string" pos:start="69:33" pos:end="69:60">"petalogix_s3adsp1800.flash"</literal></expr></argument>, <argument pos:start="69:63" pos:end="69:72"><expr pos:start="69:63" pos:end="69:72"><name pos:start="69:63" pos:end="69:72">FLASH_SIZE</name></expr></argument>,

                          <argument pos:start="71:27" pos:end="71:75"><expr pos:start="71:27" pos:end="71:75"><ternary pos:start="71:27" pos:end="71:75"><condition pos:start="71:27" pos:end="71:33"><expr pos:start="71:27" pos:end="71:31"><name pos:start="71:27" pos:end="71:31">dinfo</name></expr> ?</condition><then pos:start="71:35" pos:end="71:68"> <expr pos:start="71:35" pos:end="71:68"><call pos:start="71:35" pos:end="71:68"><name pos:start="71:35" pos:end="71:40">blk_bs</name><argument_list pos:start="71:41" pos:end="71:68">(<argument pos:start="71:42" pos:end="71:67"><expr pos:start="71:42" pos:end="71:67"><call pos:start="71:42" pos:end="71:67"><name pos:start="71:42" pos:end="71:60">blk_by_legacy_dinfo</name><argument_list pos:start="71:61" pos:end="71:67">(<argument pos:start="71:62" pos:end="71:66"><expr pos:start="71:62" pos:end="71:66"><name pos:start="71:62" pos:end="71:66">dinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else pos:start="71:70" pos:end="71:75">: <expr pos:start="71:72" pos:end="71:75"><name pos:start="71:72" pos:end="71:75">NULL</name></expr></else></ternary></expr></argument>,

                          <argument pos:start="73:27" pos:end="73:37"><expr pos:start="73:27" pos:end="73:37"><operator pos:start="73:27" pos:end="73:27">(</operator><literal type="number" pos:start="73:28" pos:end="73:29">64</literal> <operator pos:start="73:31" pos:end="73:31">*</operator> <literal type="number" pos:start="73:33" pos:end="73:36">1024</literal><operator pos:start="73:37" pos:end="73:37">)</operator></expr></argument>, <argument pos:start="73:40" pos:end="73:55"><expr pos:start="73:40" pos:end="73:55"><name pos:start="73:40" pos:end="73:49">FLASH_SIZE</name> <operator pos:start="73:51" pos:end="73:52">&gt;&gt;</operator> <literal type="number" pos:start="73:54" pos:end="73:55">16</literal></expr></argument>,

                          <argument pos:start="75:27" pos:end="75:27"><expr pos:start="75:27" pos:end="75:27"><literal type="number" pos:start="75:27" pos:end="75:27">1</literal></expr></argument>, <argument pos:start="75:30" pos:end="75:33"><expr pos:start="75:30" pos:end="75:33"><literal type="number" pos:start="75:30" pos:end="75:33">0x89</literal></expr></argument>, <argument pos:start="75:36" pos:end="75:39"><expr pos:start="75:36" pos:end="75:39"><literal type="number" pos:start="75:36" pos:end="75:39">0x18</literal></expr></argument>, <argument pos:start="75:42" pos:end="75:47"><expr pos:start="75:42" pos:end="75:47"><literal type="number" pos:start="75:42" pos:end="75:47">0x0000</literal></expr></argument>, <argument pos:start="75:50" pos:end="75:52"><expr pos:start="75:50" pos:end="75:52"><literal type="number" pos:start="75:50" pos:end="75:52">0x0</literal></expr></argument>, <argument pos:start="75:55" pos:end="75:55"><expr pos:start="75:55" pos:end="75:55"><literal type="number" pos:start="75:55" pos:end="75:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:45"><expr pos:start="79:5" pos:end="79:44"><name pos:start="79:5" pos:end="79:7">dev</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:44"><name pos:start="79:11" pos:end="79:21">qdev_create</name><argument_list pos:start="79:22" pos:end="79:44">(<argument pos:start="79:23" pos:end="79:26"><expr pos:start="79:23" pos:end="79:26"><name pos:start="79:23" pos:end="79:26">NULL</name></expr></argument>, <argument pos:start="79:29" pos:end="79:43"><expr pos:start="79:29" pos:end="79:43"><literal type="string" pos:start="79:29" pos:end="79:43">"xlnx.xps-intc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:63"><expr pos:start="81:5" pos:end="83:62"><call pos:start="81:5" pos:end="83:62"><name pos:start="81:5" pos:end="81:24">qdev_prop_set_uint32</name><argument_list pos:start="81:25" pos:end="83:62">(<argument pos:start="81:26" pos:end="81:28"><expr pos:start="81:26" pos:end="81:28"><name pos:start="81:26" pos:end="81:28">dev</name></expr></argument>, <argument pos:start="81:31" pos:end="81:44"><expr pos:start="81:31" pos:end="81:44"><literal type="string" pos:start="81:31" pos:end="81:44">"kind-of-intr"</literal></expr></argument>,

                         <argument pos:start="83:26" pos:end="83:61"><expr pos:start="83:26" pos:end="83:61"><literal type="number" pos:start="83:26" pos:end="83:26">1</literal> <operator pos:start="83:28" pos:end="83:29">&lt;&lt;</operator> <name pos:start="83:31" pos:end="83:41">ETHLITE_IRQ</name> <operator pos:start="83:43" pos:end="83:43">|</operator> <literal type="number" pos:start="83:45" pos:end="83:45">1</literal> <operator pos:start="83:47" pos:end="83:48">&lt;&lt;</operator> <name pos:start="83:50" pos:end="83:61">UARTLITE_IRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><call pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:20">qdev_init_nofail</name><argument_list pos:start="85:21" pos:end="85:25">(<argument pos:start="85:22" pos:end="85:24"><expr pos:start="85:22" pos:end="85:24"><name pos:start="85:22" pos:end="85:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:59"><expr pos:start="87:5" pos:end="87:58"><call pos:start="87:5" pos:end="87:58"><name pos:start="87:5" pos:end="87:19">sysbus_mmio_map</name><argument_list pos:start="87:20" pos:end="87:58">(<argument pos:start="87:21" pos:end="87:39"><expr pos:start="87:21" pos:end="87:39"><call pos:start="87:21" pos:end="87:39"><name pos:start="87:21" pos:end="87:34">SYS_BUS_DEVICE</name><argument_list pos:start="87:35" pos:end="87:39">(<argument pos:start="87:36" pos:end="87:38"><expr pos:start="87:36" pos:end="87:38"><name pos:start="87:36" pos:end="87:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="87:42" pos:end="87:42"><expr pos:start="87:42" pos:end="87:42"><literal type="number" pos:start="87:42" pos:end="87:42">0</literal></expr></argument>, <argument pos:start="87:45" pos:end="87:57"><expr pos:start="87:45" pos:end="87:57"><name pos:start="87:45" pos:end="87:57">INTC_BASEADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="91:66"><expr pos:start="89:5" pos:end="91:65"><call pos:start="89:5" pos:end="91:65"><name pos:start="89:5" pos:end="89:22">sysbus_connect_irq</name><argument_list pos:start="89:23" pos:end="91:65">(<argument pos:start="89:24" pos:end="89:42"><expr pos:start="89:24" pos:end="89:42"><call pos:start="89:24" pos:end="89:42"><name pos:start="89:24" pos:end="89:37">SYS_BUS_DEVICE</name><argument_list pos:start="89:38" pos:end="89:42">(<argument pos:start="89:39" pos:end="89:41"><expr pos:start="89:39" pos:end="89:41"><name pos:start="89:39" pos:end="89:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="89:45" pos:end="89:45"><expr pos:start="89:45" pos:end="89:45"><literal type="number" pos:start="89:45" pos:end="89:45">0</literal></expr></argument>,

                       <argument pos:start="91:24" pos:end="91:64"><expr pos:start="91:24" pos:end="91:64"><call pos:start="91:24" pos:end="91:64"><name pos:start="91:24" pos:end="91:39">qdev_get_gpio_in</name><argument_list pos:start="91:40" pos:end="91:64">(<argument pos:start="91:41" pos:end="91:51"><expr pos:start="91:41" pos:end="91:51"><call pos:start="91:41" pos:end="91:51"><name pos:start="91:41" pos:end="91:46">DEVICE</name><argument_list pos:start="91:47" pos:end="91:51">(<argument pos:start="91:48" pos:end="91:50"><expr pos:start="91:48" pos:end="91:50"><name pos:start="91:48" pos:end="91:50">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="91:54" pos:end="91:63"><expr pos:start="91:54" pos:end="91:63"><name pos:start="91:54" pos:end="91:63">MB_CPU_IRQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="93:5" pos:end="97:5">for <control pos:start="93:9" pos:end="93:28">(<init pos:start="93:10" pos:end="93:15"><expr pos:start="93:10" pos:end="93:14"><name pos:start="93:10" pos:end="93:10">i</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <literal type="number" pos:start="93:14" pos:end="93:14">0</literal></expr>;</init> <condition pos:start="93:17" pos:end="93:23"><expr pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:17">i</name> <operator pos:start="93:19" pos:end="93:19">&lt;</operator> <literal type="number" pos:start="93:21" pos:end="93:22">32</literal></expr>;</condition> <incr pos:start="93:25" pos:end="93:27"><expr pos:start="93:25" pos:end="93:27"><name pos:start="93:25" pos:end="93:25">i</name><operator pos:start="93:26" pos:end="93:27">++</operator></expr></incr>)</control> <block pos:start="93:30" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:42">

        <expr_stmt pos:start="95:9" pos:end="95:42"><expr pos:start="95:9" pos:end="95:41"><name pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:11">irq</name><index pos:start="95:12" pos:end="95:14">[<expr pos:start="95:13" pos:end="95:13"><name pos:start="95:13" pos:end="95:13">i</name></expr>]</index></name> <operator pos:start="95:16" pos:end="95:16">=</operator> <call pos:start="95:18" pos:end="95:41"><name pos:start="95:18" pos:end="95:33">qdev_get_gpio_in</name><argument_list pos:start="95:34" pos:end="95:41">(<argument pos:start="95:35" pos:end="95:37"><expr pos:start="95:35" pos:end="95:37"><name pos:start="95:35" pos:end="95:37">dev</name></expr></argument>, <argument pos:start="95:40" pos:end="95:40"><expr pos:start="95:40" pos:end="95:40"><name pos:start="95:40" pos:end="95:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="101:5" pos:end="103:44"><expr pos:start="101:5" pos:end="103:43"><call pos:start="101:5" pos:end="103:43"><name pos:start="101:5" pos:end="101:24">sysbus_create_simple</name><argument_list pos:start="101:25" pos:end="103:43">(<argument pos:start="101:26" pos:end="101:44"><expr pos:start="101:26" pos:end="101:44"><literal type="string" pos:start="101:26" pos:end="101:44">"xlnx.xps-uartlite"</literal></expr></argument>, <argument pos:start="101:47" pos:end="101:63"><expr pos:start="101:47" pos:end="101:63"><name pos:start="101:47" pos:end="101:63">UARTLITE_BASEADDR</name></expr></argument>,

                         <argument pos:start="103:26" pos:end="103:42"><expr pos:start="103:26" pos:end="103:42"><name pos:start="103:26" pos:end="103:42"><name pos:start="103:26" pos:end="103:28">irq</name><index pos:start="103:29" pos:end="103:42">[<expr pos:start="103:30" pos:end="103:41"><name pos:start="103:30" pos:end="103:41">UARTLITE_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:38">/* 2 timers at irq 2 @ 62 Mhz.  */</comment>

    <expr_stmt pos:start="109:5" pos:end="109:46"><expr pos:start="109:5" pos:end="109:45"><name pos:start="109:5" pos:end="109:7">dev</name> <operator pos:start="109:9" pos:end="109:9">=</operator> <call pos:start="109:11" pos:end="109:45"><name pos:start="109:11" pos:end="109:21">qdev_create</name><argument_list pos:start="109:22" pos:end="109:45">(<argument pos:start="109:23" pos:end="109:26"><expr pos:start="109:23" pos:end="109:26"><name pos:start="109:23" pos:end="109:26">NULL</name></expr></argument>, <argument pos:start="109:29" pos:end="109:44"><expr pos:start="109:29" pos:end="109:44"><literal type="string" pos:start="109:29" pos:end="109:44">"xlnx.xps-timer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:51"><expr pos:start="111:5" pos:end="111:50"><call pos:start="111:5" pos:end="111:50"><name pos:start="111:5" pos:end="111:24">qdev_prop_set_uint32</name><argument_list pos:start="111:25" pos:end="111:50">(<argument pos:start="111:26" pos:end="111:28"><expr pos:start="111:26" pos:end="111:28"><name pos:start="111:26" pos:end="111:28">dev</name></expr></argument>, <argument pos:start="111:31" pos:end="111:46"><expr pos:start="111:31" pos:end="111:46"><literal type="string" pos:start="111:31" pos:end="111:46">"one-timer-only"</literal></expr></argument>, <argument pos:start="111:49" pos:end="111:49"><expr pos:start="111:49" pos:end="111:49"><literal type="number" pos:start="111:49" pos:end="111:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:63"><expr pos:start="113:5" pos:end="113:62"><call pos:start="113:5" pos:end="113:62"><name pos:start="113:5" pos:end="113:24">qdev_prop_set_uint32</name><argument_list pos:start="113:25" pos:end="113:62">(<argument pos:start="113:26" pos:end="113:28"><expr pos:start="113:26" pos:end="113:28"><name pos:start="113:26" pos:end="113:28">dev</name></expr></argument>, <argument pos:start="113:31" pos:end="113:47"><expr pos:start="113:31" pos:end="113:47"><literal type="string" pos:start="113:31" pos:end="113:47">"clock-frequency"</literal></expr></argument>, <argument pos:start="113:50" pos:end="113:61"><expr pos:start="113:50" pos:end="113:61"><literal type="number" pos:start="113:50" pos:end="113:51">62</literal> <operator pos:start="113:53" pos:end="113:53">*</operator> <literal type="number" pos:start="113:55" pos:end="113:61">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:26"><expr pos:start="115:5" pos:end="115:25"><call pos:start="115:5" pos:end="115:25"><name pos:start="115:5" pos:end="115:20">qdev_init_nofail</name><argument_list pos:start="115:21" pos:end="115:25">(<argument pos:start="115:22" pos:end="115:24"><expr pos:start="115:22" pos:end="115:24"><name pos:start="115:22" pos:end="115:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:60"><expr pos:start="117:5" pos:end="117:59"><call pos:start="117:5" pos:end="117:59"><name pos:start="117:5" pos:end="117:19">sysbus_mmio_map</name><argument_list pos:start="117:20" pos:end="117:59">(<argument pos:start="117:21" pos:end="117:39"><expr pos:start="117:21" pos:end="117:39"><call pos:start="117:21" pos:end="117:39"><name pos:start="117:21" pos:end="117:34">SYS_BUS_DEVICE</name><argument_list pos:start="117:35" pos:end="117:39">(<argument pos:start="117:36" pos:end="117:38"><expr pos:start="117:36" pos:end="117:38"><name pos:start="117:36" pos:end="117:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="117:42" pos:end="117:42"><expr pos:start="117:42" pos:end="117:42"><literal type="number" pos:start="117:42" pos:end="117:42">0</literal></expr></argument>, <argument pos:start="117:45" pos:end="117:58"><expr pos:start="117:45" pos:end="117:58"><name pos:start="117:45" pos:end="117:58">TIMER_BASEADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:63"><expr pos:start="119:5" pos:end="119:62"><call pos:start="119:5" pos:end="119:62"><name pos:start="119:5" pos:end="119:22">sysbus_connect_irq</name><argument_list pos:start="119:23" pos:end="119:62">(<argument pos:start="119:24" pos:end="119:42"><expr pos:start="119:24" pos:end="119:42"><call pos:start="119:24" pos:end="119:42"><name pos:start="119:24" pos:end="119:37">SYS_BUS_DEVICE</name><argument_list pos:start="119:38" pos:end="119:42">(<argument pos:start="119:39" pos:end="119:41"><expr pos:start="119:39" pos:end="119:41"><name pos:start="119:39" pos:end="119:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="119:45" pos:end="119:45"><expr pos:start="119:45" pos:end="119:45"><literal type="number" pos:start="119:45" pos:end="119:45">0</literal></expr></argument>, <argument pos:start="119:48" pos:end="119:61"><expr pos:start="119:48" pos:end="119:61"><name pos:start="119:48" pos:end="119:61"><name pos:start="119:48" pos:end="119:50">irq</name><index pos:start="119:51" pos:end="119:61">[<expr pos:start="119:52" pos:end="119:60"><name pos:start="119:52" pos:end="119:60">TIMER_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:64"><expr pos:start="123:5" pos:end="123:63"><call pos:start="123:5" pos:end="123:63"><name pos:start="123:5" pos:end="123:24">qemu_check_nic_model</name><argument_list pos:start="123:25" pos:end="123:63">(<argument pos:start="123:26" pos:end="123:37"><expr pos:start="123:26" pos:end="123:37"><operator pos:start="123:26" pos:end="123:26">&amp;</operator><name pos:start="123:27" pos:end="123:37"><name pos:start="123:27" pos:end="123:34">nd_table</name><index pos:start="123:35" pos:end="123:37">[<expr pos:start="123:36" pos:end="123:36"><literal type="number" pos:start="123:36" pos:end="123:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="123:40" pos:end="123:62"><expr pos:start="123:40" pos:end="123:62"><literal type="string" pos:start="123:40" pos:end="123:62">"xlnx.xps-ethernetlite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:53"><expr pos:start="125:5" pos:end="125:52"><name pos:start="125:5" pos:end="125:7">dev</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <call pos:start="125:11" pos:end="125:52"><name pos:start="125:11" pos:end="125:21">qdev_create</name><argument_list pos:start="125:22" pos:end="125:52">(<argument pos:start="125:23" pos:end="125:26"><expr pos:start="125:23" pos:end="125:26"><name pos:start="125:23" pos:end="125:26">NULL</name></expr></argument>, <argument pos:start="125:29" pos:end="125:51"><expr pos:start="125:29" pos:end="125:51"><literal type="string" pos:start="125:29" pos:end="125:51">"xlnx.xps-ethernetlite"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:47"><expr pos:start="127:5" pos:end="127:46"><call pos:start="127:5" pos:end="127:46"><name pos:start="127:5" pos:end="127:27">qdev_set_nic_properties</name><argument_list pos:start="127:28" pos:end="127:46">(<argument pos:start="127:29" pos:end="127:31"><expr pos:start="127:29" pos:end="127:31"><name pos:start="127:29" pos:end="127:31">dev</name></expr></argument>, <argument pos:start="127:34" pos:end="127:45"><expr pos:start="127:34" pos:end="127:45"><operator pos:start="127:34" pos:end="127:34">&amp;</operator><name pos:start="127:35" pos:end="127:45"><name pos:start="127:35" pos:end="127:42">nd_table</name><index pos:start="127:43" pos:end="127:45">[<expr pos:start="127:44" pos:end="127:44"><literal type="number" pos:start="127:44" pos:end="127:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:49"><expr pos:start="129:5" pos:end="129:48"><call pos:start="129:5" pos:end="129:48"><name pos:start="129:5" pos:end="129:24">qdev_prop_set_uint32</name><argument_list pos:start="129:25" pos:end="129:48">(<argument pos:start="129:26" pos:end="129:28"><expr pos:start="129:26" pos:end="129:28"><name pos:start="129:26" pos:end="129:28">dev</name></expr></argument>, <argument pos:start="129:31" pos:end="129:44"><expr pos:start="129:31" pos:end="129:44"><literal type="string" pos:start="129:31" pos:end="129:44">"tx-ping-pong"</literal></expr></argument>, <argument pos:start="129:47" pos:end="129:47"><expr pos:start="129:47" pos:end="129:47"><literal type="number" pos:start="129:47" pos:end="129:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:49"><expr pos:start="131:5" pos:end="131:48"><call pos:start="131:5" pos:end="131:48"><name pos:start="131:5" pos:end="131:24">qdev_prop_set_uint32</name><argument_list pos:start="131:25" pos:end="131:48">(<argument pos:start="131:26" pos:end="131:28"><expr pos:start="131:26" pos:end="131:28"><name pos:start="131:26" pos:end="131:28">dev</name></expr></argument>, <argument pos:start="131:31" pos:end="131:44"><expr pos:start="131:31" pos:end="131:44"><literal type="string" pos:start="131:31" pos:end="131:44">"rx-ping-pong"</literal></expr></argument>, <argument pos:start="131:47" pos:end="131:47"><expr pos:start="131:47" pos:end="131:47"><literal type="number" pos:start="131:47" pos:end="131:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:26"><expr pos:start="133:5" pos:end="133:25"><call pos:start="133:5" pos:end="133:25"><name pos:start="133:5" pos:end="133:20">qdev_init_nofail</name><argument_list pos:start="133:21" pos:end="133:25">(<argument pos:start="133:22" pos:end="133:24"><expr pos:start="133:22" pos:end="133:24"><name pos:start="133:22" pos:end="133:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:62"><expr pos:start="135:5" pos:end="135:61"><call pos:start="135:5" pos:end="135:61"><name pos:start="135:5" pos:end="135:19">sysbus_mmio_map</name><argument_list pos:start="135:20" pos:end="135:61">(<argument pos:start="135:21" pos:end="135:39"><expr pos:start="135:21" pos:end="135:39"><call pos:start="135:21" pos:end="135:39"><name pos:start="135:21" pos:end="135:34">SYS_BUS_DEVICE</name><argument_list pos:start="135:35" pos:end="135:39">(<argument pos:start="135:36" pos:end="135:38"><expr pos:start="135:36" pos:end="135:38"><name pos:start="135:36" pos:end="135:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="135:42" pos:end="135:42"><expr pos:start="135:42" pos:end="135:42"><literal type="number" pos:start="135:42" pos:end="135:42">0</literal></expr></argument>, <argument pos:start="135:45" pos:end="135:60"><expr pos:start="135:45" pos:end="135:60"><name pos:start="135:45" pos:end="135:60">ETHLITE_BASEADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:65"><expr pos:start="137:5" pos:end="137:64"><call pos:start="137:5" pos:end="137:64"><name pos:start="137:5" pos:end="137:22">sysbus_connect_irq</name><argument_list pos:start="137:23" pos:end="137:64">(<argument pos:start="137:24" pos:end="137:42"><expr pos:start="137:24" pos:end="137:42"><call pos:start="137:24" pos:end="137:42"><name pos:start="137:24" pos:end="137:37">SYS_BUS_DEVICE</name><argument_list pos:start="137:38" pos:end="137:42">(<argument pos:start="137:39" pos:end="137:41"><expr pos:start="137:39" pos:end="137:41"><name pos:start="137:39" pos:end="137:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="137:45" pos:end="137:45"><expr pos:start="137:45" pos:end="137:45"><literal type="number" pos:start="137:45" pos:end="137:45">0</literal></expr></argument>, <argument pos:start="137:48" pos:end="137:63"><expr pos:start="137:48" pos:end="137:63"><name pos:start="137:48" pos:end="137:63"><name pos:start="137:48" pos:end="137:50">irq</name><index pos:start="137:51" pos:end="137:63">[<expr pos:start="137:52" pos:end="137:62"><name pos:start="137:52" pos:end="137:62">ETHLITE_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="147:46"><expr pos:start="141:5" pos:end="147:45"><call pos:start="141:5" pos:end="147:45"><name pos:start="141:5" pos:end="141:26">microblaze_load_kernel</name><argument_list pos:start="141:27" pos:end="147:45">(<argument pos:start="141:28" pos:end="141:30"><expr pos:start="141:28" pos:end="141:30"><name pos:start="141:28" pos:end="141:30">cpu</name></expr></argument>, <argument pos:start="141:33" pos:end="141:40"><expr pos:start="141:33" pos:end="141:40"><name pos:start="141:33" pos:end="141:40">ddr_base</name></expr></argument>, <argument pos:start="141:43" pos:end="141:50"><expr pos:start="141:43" pos:end="141:50"><name pos:start="141:43" pos:end="141:50">ram_size</name></expr></argument>,

                           <argument pos:start="143:28" pos:end="143:51"><expr pos:start="143:28" pos:end="143:51"><name pos:start="143:28" pos:end="143:51"><name pos:start="143:28" pos:end="143:34">machine</name><operator pos:start="143:35" pos:end="143:36">-&gt;</operator><name pos:start="143:37" pos:end="143:51">initrd_filename</name></name></expr></argument>,

                           <argument pos:start="145:28" pos:end="145:50"><expr pos:start="145:28" pos:end="145:50"><name pos:start="145:28" pos:end="145:50">BINARY_DEVICE_TREE_FILE</name></expr></argument>,

                           <argument pos:start="147:28" pos:end="147:44"><expr pos:start="147:28" pos:end="147:44"><name pos:start="147:28" pos:end="147:44">machine_cpu_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
