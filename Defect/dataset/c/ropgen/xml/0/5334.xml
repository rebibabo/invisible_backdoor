<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5334.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">theora_decode_init</name><parameter_list pos:start="1:30" pos:end="1:52">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">Vp3DecodeContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">s</name> <init pos:start="5:25" pos:end="5:42">= <expr pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:42"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">GetBitContext</name></type> <name pos:start="7:19" pos:end="7:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">ptype</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:14">p</name><init pos:start="11:15" pos:end="11:32">= <expr pos:start="11:17" pos:end="11:32"><name pos:start="11:17" pos:end="11:32"><name pos:start="11:17" pos:end="11:21">avctx</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:32">extradata</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:16">op_bytes</name></decl>, <decl pos:start="13:19" pos:end="13:19"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:19" pos:end="13:19">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:18"><expr pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:13">theora</name></name> <operator pos:start="17:15" pos:end="17:15">=</operator> <literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:31">(<expr pos:start="21:9" pos:end="21:30"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:30"><name pos:start="21:10" pos:end="21:14">avctx</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:30">extradata_size</name></name></expr>)</condition>

    <block pos:start="23:5" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <expr_stmt pos:start="25:9" pos:end="25:60"><expr pos:start="25:9" pos:end="25:59"><call pos:start="25:9" pos:end="25:59"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:59">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:37" pos:end="25:58"><expr pos:start="25:37" pos:end="25:58"><literal type="string" pos:start="25:37" pos:end="25:58">"Missing extradata!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



  <for pos:start="33:3" pos:end="103:3">for<control pos:start="33:6" pos:end="33:18">(<init pos:start="33:7" pos:end="33:10"><expr pos:start="33:7" pos:end="33:9"><name pos:start="33:7" pos:end="33:7">i</name><operator pos:start="33:8" pos:end="33:8">=</operator><literal type="number" pos:start="33:9" pos:end="33:9">0</literal></expr>;</init><condition pos:start="33:11" pos:end="33:14"><expr pos:start="33:11" pos:end="33:13"><name pos:start="33:11" pos:end="33:11">i</name><operator pos:start="33:12" pos:end="33:12">&lt;</operator><literal type="number" pos:start="33:13" pos:end="33:13">3</literal></expr>;</condition><incr pos:start="33:15" pos:end="33:17"><expr pos:start="33:15" pos:end="33:17"><name pos:start="33:15" pos:end="33:15">i</name><operator pos:start="33:16" pos:end="33:17">++</operator></expr></incr>)</control> <block pos:start="33:20" pos:end="103:3">{<block_content pos:start="35:5" pos:end="101:5">

    <expr_stmt pos:start="35:5" pos:end="35:25"><expr pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:12">op_bytes</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <operator pos:start="35:16" pos:end="35:16">*</operator><operator pos:start="35:17" pos:end="35:17">(</operator><name pos:start="35:18" pos:end="35:18">p</name><operator pos:start="35:19" pos:end="35:20">++</operator><operator pos:start="35:21" pos:end="35:21">)</operator><operator pos:start="35:22" pos:end="35:23">&lt;&lt;</operator><literal type="number" pos:start="35:24" pos:end="35:24">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:23"><expr pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:12">op_bytes</name> <operator pos:start="37:14" pos:end="37:15">+=</operator> <operator pos:start="37:17" pos:end="37:17">*</operator><operator pos:start="37:18" pos:end="37:18">(</operator><name pos:start="37:19" pos:end="37:19">p</name><operator pos:start="37:20" pos:end="37:21">++</operator><operator pos:start="37:22" pos:end="37:22">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:36"><expr pos:start="41:5" pos:end="41:35"><call pos:start="41:5" pos:end="41:35"><name pos:start="41:5" pos:end="41:17">init_get_bits</name><argument_list pos:start="41:18" pos:end="41:35">(<argument pos:start="41:19" pos:end="41:21"><expr pos:start="41:19" pos:end="41:21"><operator pos:start="41:19" pos:end="41:19">&amp;</operator><name pos:start="41:20" pos:end="41:21">gb</name></expr></argument>, <argument pos:start="41:24" pos:end="41:24"><expr pos:start="41:24" pos:end="41:24"><name pos:start="41:24" pos:end="41:24">p</name></expr></argument>, <argument pos:start="41:27" pos:end="41:34"><expr pos:start="41:27" pos:end="41:34"><name pos:start="41:27" pos:end="41:34">op_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:18"><expr pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:5">p</name> <operator pos:start="43:7" pos:end="43:8">+=</operator> <name pos:start="43:10" pos:end="43:17">op_bytes</name></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:9">ptype</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:20">get_bits</name><argument_list pos:start="47:21" pos:end="47:28">(<argument pos:start="47:22" pos:end="47:24"><expr pos:start="47:22" pos:end="47:24"><operator pos:start="47:22" pos:end="47:22">&amp;</operator><name pos:start="47:23" pos:end="47:24">gb</name></expr></argument>, <argument pos:start="47:27" pos:end="47:27"><expr pos:start="47:27" pos:end="47:27"><literal type="number" pos:start="47:27" pos:end="47:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:55"><expr pos:start="49:5" pos:end="49:54"><call pos:start="49:5" pos:end="49:54"><name pos:start="49:5" pos:end="49:13">debug_vp3</name><argument_list pos:start="49:14" pos:end="49:54">(<argument pos:start="49:15" pos:end="49:46"><expr pos:start="49:15" pos:end="49:46"><literal type="string" pos:start="49:15" pos:end="49:46">"Theora headerpacket type: %x\n"</literal></expr></argument>, <argument pos:start="49:49" pos:end="49:53"><expr pos:start="49:49" pos:end="49:53"><name pos:start="49:49" pos:end="49:53">ptype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



     <if_stmt pos:start="53:6" pos:end="61:6"><if pos:start="53:6" pos:end="61:6">if <condition pos:start="53:9" pos:end="53:25">(<expr pos:start="53:10" pos:end="53:24"><operator pos:start="53:10" pos:end="53:10">!</operator><operator pos:start="53:11" pos:end="53:11">(</operator><name pos:start="53:12" pos:end="53:16">ptype</name> <operator pos:start="53:18" pos:end="53:18">&amp;</operator> <literal type="number" pos:start="53:20" pos:end="53:23">0x80</literal><operator pos:start="53:24" pos:end="53:24">)</operator></expr>)</condition>

     <block pos:start="55:6" pos:end="61:6">{<block_content pos:start="57:9" pos:end="59:18">

        <expr_stmt pos:start="57:9" pos:end="57:60"><expr pos:start="57:9" pos:end="57:59"><call pos:start="57:9" pos:end="57:59"><name pos:start="57:9" pos:end="57:14">av_log</name><argument_list pos:start="57:15" pos:end="57:59">(<argument pos:start="57:16" pos:end="57:20"><expr pos:start="57:16" pos:end="57:20"><name pos:start="57:16" pos:end="57:20">avctx</name></expr></argument>, <argument pos:start="57:23" pos:end="57:34"><expr pos:start="57:23" pos:end="57:34"><name pos:start="57:23" pos:end="57:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:37" pos:end="57:58"><expr pos:start="57:37" pos:end="57:58"><literal type="string" pos:start="57:37" pos:end="57:58">"Invalid extradata!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:18">return <expr pos:start="59:16" pos:end="59:17"><operator pos:start="59:16" pos:end="59:16">-</operator><literal type="number" pos:start="59:17" pos:end="59:17">1</literal></expr>;</return>

     </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="65:5" pos:end="65:35">// FIXME: check for this aswell</comment>

    <expr_stmt pos:start="67:5" pos:end="67:24"><expr pos:start="67:5" pos:end="67:23"><call pos:start="67:5" pos:end="67:23"><name pos:start="67:5" pos:end="67:13">skip_bits</name><argument_list pos:start="67:14" pos:end="67:23">(<argument pos:start="67:15" pos:end="67:17"><expr pos:start="67:15" pos:end="67:17"><operator pos:start="67:15" pos:end="67:15">&amp;</operator><name pos:start="67:16" pos:end="67:17">gb</name></expr></argument>, <argument pos:start="67:20" pos:end="67:22"><expr pos:start="67:20" pos:end="67:22"><literal type="number" pos:start="67:20" pos:end="67:20">6</literal><operator pos:start="67:21" pos:end="67:21">*</operator><literal type="number" pos:start="67:22" pos:end="67:22">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="67:26" pos:end="67:39">/* "theora" */</comment>



    <switch pos:start="71:5" pos:end="101:5">switch<condition pos:start="71:11" pos:end="71:17">(<expr pos:start="71:12" pos:end="71:16"><name pos:start="71:12" pos:end="71:16">ptype</name></expr>)</condition>

    <block pos:start="73:5" pos:end="101:5">{<block_content pos:start="75:9" pos:end="99:18">

        <case pos:start="75:9" pos:end="75:18">case <expr pos:start="75:14" pos:end="75:17"><literal type="number" pos:start="75:14" pos:end="75:17">0x80</literal></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:44"><expr pos:start="77:13" pos:end="77:43"><call pos:start="77:13" pos:end="77:43"><name pos:start="77:13" pos:end="77:32">theora_decode_header</name><argument_list pos:start="77:33" pos:end="77:43">(<argument pos:start="77:34" pos:end="77:38"><expr pos:start="77:34" pos:end="77:38"><name pos:start="77:34" pos:end="77:38">avctx</name></expr></argument>, <argument pos:start="77:41" pos:end="77:42"><expr pos:start="77:41" pos:end="77:42"><name pos:start="77:41" pos:end="77:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="79:17" pos:end="79:22">break;</break>

        <case pos:start="81:9" pos:end="81:18">case <expr pos:start="81:14" pos:end="81:17"><literal type="number" pos:start="81:14" pos:end="81:17">0x81</literal></expr>:</case>

<comment type="line" pos:start="83:1" pos:end="83:45">// FIXME: is this needed? it breaks sometimes</comment>

<comment type="line" pos:start="85:1" pos:end="85:48">//            theora_decode_comments(avctx, gb);</comment>

            <break pos:start="87:13" pos:end="87:18">break;</break>

        <case pos:start="89:9" pos:end="89:18">case <expr pos:start="89:14" pos:end="89:17"><literal type="number" pos:start="89:14" pos:end="89:17">0x82</literal></expr>:</case>

            <expr_stmt pos:start="91:13" pos:end="91:44"><expr pos:start="91:13" pos:end="91:43"><call pos:start="91:13" pos:end="91:43"><name pos:start="91:13" pos:end="91:32">theora_decode_tables</name><argument_list pos:start="91:33" pos:end="91:43">(<argument pos:start="91:34" pos:end="91:38"><expr pos:start="91:34" pos:end="91:38"><name pos:start="91:34" pos:end="91:38">avctx</name></expr></argument>, <argument pos:start="91:41" pos:end="91:42"><expr pos:start="91:41" pos:end="91:42"><name pos:start="91:41" pos:end="91:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        <default pos:start="95:9" pos:end="95:16">default:</default>

            <expr_stmt pos:start="97:13" pos:end="97:91"><expr pos:start="97:13" pos:end="97:90"><call pos:start="97:13" pos:end="97:90"><name pos:start="97:13" pos:end="97:18">av_log</name><argument_list pos:start="97:19" pos:end="97:90">(<argument pos:start="97:20" pos:end="97:24"><expr pos:start="97:20" pos:end="97:24"><name pos:start="97:20" pos:end="97:24">avctx</name></expr></argument>, <argument pos:start="97:27" pos:end="97:38"><expr pos:start="97:27" pos:end="97:38"><name pos:start="97:27" pos:end="97:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:41" pos:end="97:76"><expr pos:start="97:41" pos:end="97:76"><literal type="string" pos:start="97:41" pos:end="97:76">"Unknown Theora config packet: %d\n"</literal></expr></argument>, <argument pos:start="97:79" pos:end="97:89"><expr pos:start="97:79" pos:end="97:89"><name pos:start="97:79" pos:end="97:83">ptype</name><operator pos:start="97:84" pos:end="97:84">&amp;</operator><operator pos:start="97:85" pos:end="97:85">~</operator><literal type="number" pos:start="97:86" pos:end="97:89">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

    </block_content>}</block></switch>

  </block_content>}</block></for>



    <expr_stmt pos:start="107:5" pos:end="107:27"><expr pos:start="107:5" pos:end="107:26"><call pos:start="107:5" pos:end="107:26"><name pos:start="107:5" pos:end="107:19">vp3_decode_init</name><argument_list pos:start="107:20" pos:end="107:26">(<argument pos:start="107:21" pos:end="107:25"><expr pos:start="107:21" pos:end="107:25"><name pos:start="107:21" pos:end="107:25">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="109:5" pos:end="109:13">return <expr pos:start="109:12" pos:end="109:12"><literal type="number" pos:start="109:12" pos:end="109:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
