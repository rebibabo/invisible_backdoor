<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26026.c" pos:tabs="8"><function pos:start="1:1" pos:end="599:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">alloc_refcount_block</name><parameter_list pos:start="1:32" pos:end="3:77">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:53"><decl pos:start="3:33" pos:end="3:53"><type pos:start="3:33" pos:end="3:53"><name pos:start="3:33" pos:end="3:39">int64_t</name></type> <name pos:start="3:41" pos:end="3:53">cluster_index</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:76"><decl pos:start="3:56" pos:end="3:76"><type pos:start="3:56" pos:end="3:76"><name pos:start="3:56" pos:end="3:59">void</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier><modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:76">refcount_block</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="599:1">{<block_content pos:start="7:5" pos:end="597:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:37">refcount_table_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:50"><expr pos:start="15:5" pos:end="15:49"><call pos:start="15:5" pos:end="15:49"><name pos:start="15:5" pos:end="15:16">BLKDBG_EVENT</name><argument_list pos:start="15:17" pos:end="15:49">(<argument pos:start="15:18" pos:end="15:25"><expr pos:start="15:18" pos:end="15:25"><name pos:start="15:18" pos:end="15:25"><name pos:start="15:18" pos:end="15:19">bs</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:25">file</name></name></expr></argument>, <argument pos:start="15:28" pos:end="15:48"><expr pos:start="15:28" pos:end="15:48"><name pos:start="15:28" pos:end="15:48">BLKDBG_REFBLOCK_ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:55">/* Find the refcount block for the given cluster */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:67"><expr pos:start="21:5" pos:end="21:66"><name pos:start="21:5" pos:end="21:24">refcount_table_index</name> <operator pos:start="21:26" pos:end="21:26">=</operator> <name pos:start="21:28" pos:end="21:40">cluster_index</name> <operator pos:start="21:42" pos:end="21:43">&gt;&gt;</operator> <name pos:start="21:45" pos:end="21:66"><name pos:start="21:45" pos:end="21:45">s</name><operator pos:start="21:46" pos:end="21:47">-&gt;</operator><name pos:start="21:48" pos:end="21:66">refcount_block_bits</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="61:5"><if pos:start="25:5" pos:end="61:5">if <condition pos:start="25:8" pos:end="25:54">(<expr pos:start="25:9" pos:end="25:53"><name pos:start="25:9" pos:end="25:28">refcount_table_index</name> <operator pos:start="25:30" pos:end="25:30">&lt;</operator> <name pos:start="25:32" pos:end="25:53"><name pos:start="25:32" pos:end="25:32">s</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:53">refcount_table_size</name></name></expr>)</condition> <block pos:start="25:56" pos:end="61:5">{<block_content pos:start="29:9" pos:end="59:9">



        <decl_stmt pos:start="29:9" pos:end="31:71"><decl pos:start="29:9" pos:end="31:70"><type pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:16">uint64_t</name></type> <name pos:start="29:18" pos:end="29:38">refcount_block_offset</name> <init pos:start="29:40" pos:end="31:70">=

            <expr pos:start="31:13" pos:end="31:70"><name pos:start="31:13" pos:end="31:51"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:29">refcount_table</name><index pos:start="31:30" pos:end="31:51">[<expr pos:start="31:31" pos:end="31:50"><name pos:start="31:31" pos:end="31:50">refcount_table_index</name></expr>]</index></name> <operator pos:start="31:53" pos:end="31:53">&amp;</operator> <name pos:start="31:55" pos:end="31:70">REFT_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="35:9" pos:end="35:47">/* If it's already there, we're done */</comment>

        <if_stmt pos:start="37:9" pos:end="59:9"><if pos:start="37:9" pos:end="59:9">if <condition pos:start="37:12" pos:end="37:34">(<expr pos:start="37:13" pos:end="37:33"><name pos:start="37:13" pos:end="37:33">refcount_block_offset</name></expr>)</condition> <block pos:start="37:36" pos:end="59:9">{<block_content pos:start="39:13" pos:end="57:56">

            <if_stmt pos:start="39:13" pos:end="51:13"><if pos:start="39:13" pos:end="51:13">if <condition pos:start="39:16" pos:end="39:62">(<expr pos:start="39:17" pos:end="39:61"><call pos:start="39:17" pos:end="39:61"><name pos:start="39:17" pos:end="39:35">offset_into_cluster</name><argument_list pos:start="39:36" pos:end="39:61">(<argument pos:start="39:37" pos:end="39:37"><expr pos:start="39:37" pos:end="39:37"><name pos:start="39:37" pos:end="39:37">s</name></expr></argument>, <argument pos:start="39:40" pos:end="39:60"><expr pos:start="39:40" pos:end="39:60"><name pos:start="39:40" pos:end="39:60">refcount_block_offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:64" pos:end="51:13">{<block_content pos:start="41:17" pos:end="49:28">

                <expr_stmt pos:start="41:17" pos:end="47:62"><expr pos:start="41:17" pos:end="47:61"><call pos:start="41:17" pos:end="47:61"><name pos:start="41:17" pos:end="41:39">qcow2_signal_corruption</name><argument_list pos:start="41:40" pos:end="47:61">(<argument pos:start="41:41" pos:end="41:42"><expr pos:start="41:41" pos:end="41:42"><name pos:start="41:41" pos:end="41:42">bs</name></expr></argument>, <argument pos:start="41:45" pos:end="41:48"><expr pos:start="41:45" pos:end="41:48"><name pos:start="41:45" pos:end="41:48">true</name></expr></argument>, <argument pos:start="41:51" pos:end="41:52"><expr pos:start="41:51" pos:end="41:52"><operator pos:start="41:51" pos:end="41:51">-</operator><literal type="number" pos:start="41:52" pos:end="41:52">1</literal></expr></argument>, <argument pos:start="41:55" pos:end="41:56"><expr pos:start="41:55" pos:end="41:56"><operator pos:start="41:55" pos:end="41:55">-</operator><literal type="number" pos:start="41:56" pos:end="41:56">1</literal></expr></argument>, <argument pos:start="41:59" pos:end="45:46"><expr pos:start="41:59" pos:end="45:46"><literal type="string" pos:start="41:59" pos:end="41:78">"Refblock offset %#"</literal>

                                        <name pos:start="43:41" pos:end="43:46">PRIx64</name> <literal type="string" pos:start="43:48" pos:end="43:77">" unaligned (reftable index: "</literal>

                                        <literal type="string" pos:start="45:41" pos:end="45:46">"%#x)"</literal></expr></argument>, <argument pos:start="45:49" pos:end="45:69"><expr pos:start="45:49" pos:end="45:69"><name pos:start="45:49" pos:end="45:69">refcount_block_offset</name></expr></argument>,

                                        <argument pos:start="47:41" pos:end="47:60"><expr pos:start="47:41" pos:end="47:60"><name pos:start="47:41" pos:end="47:60">refcount_table_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="49:17" pos:end="49:28">return <expr pos:start="49:24" pos:end="49:27"><operator pos:start="49:24" pos:end="49:24">-</operator><name pos:start="49:25" pos:end="49:27">EIO</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



             <return pos:start="55:14" pos:end="57:56">return <expr pos:start="55:21" pos:end="57:55"><call pos:start="55:21" pos:end="57:55"><name pos:start="55:21" pos:end="55:39">load_refcount_block</name><argument_list pos:start="55:40" pos:end="57:55">(<argument pos:start="55:41" pos:end="55:42"><expr pos:start="55:41" pos:end="55:42"><name pos:start="55:41" pos:end="55:42">bs</name></expr></argument>, <argument pos:start="55:45" pos:end="55:65"><expr pos:start="55:45" pos:end="55:65"><name pos:start="55:45" pos:end="55:65">refcount_block_offset</name></expr></argument>,

                                        <argument pos:start="57:41" pos:end="57:54"><expr pos:start="57:41" pos:end="57:54"><name pos:start="57:41" pos:end="57:54">refcount_block</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="107:7">/*

     * If we came here, we need to allocate something. Something is at least

     * a cluster for the new refcount block. It may also include a new refcount

     * table if the old refcount table is too small.

     *

     * Note that allocating clusters here needs some special care:

     *

     * - We can't use the normal qcow2_alloc_clusters(), it would try to

     *   increase the refcount and very likely we would end up with an endless

     *   recursion. Instead we must place the refcount blocks in a way that

     *   they can describe them themselves.

     *

     * - We need to consider that at this point we are inside update_refcounts

     *   and potentially doing an initial refcount increase. This means that

     *   some clusters have already been allocated by the caller, but their

     *   refcount isn't accurate yet. If we allocate clusters for metadata, we

     *   need to return -EAGAIN to signal the caller that it needs to restart

     *   the search for free clusters.

     *

     * - alloc_clusters_noref and qcow2_free_clusters may load a different

     *   refcount block into the cache

     */</comment>



    <expr_stmt pos:start="111:5" pos:end="111:27"><expr pos:start="111:5" pos:end="111:26"><operator pos:start="111:5" pos:end="111:5">*</operator><name pos:start="111:6" pos:end="111:19">refcount_block</name> <operator pos:start="111:21" pos:end="111:21">=</operator> <name pos:start="111:23" pos:end="111:26">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:73">/* We write to the refcount table, so we might depend on L2 tables */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:51"><expr pos:start="117:5" pos:end="117:50"><name pos:start="117:5" pos:end="117:7">ret</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:50"><name pos:start="117:11" pos:end="117:27">qcow2_cache_flush</name><argument_list pos:start="117:28" pos:end="117:50">(<argument pos:start="117:29" pos:end="117:30"><expr pos:start="117:29" pos:end="117:30"><name pos:start="117:29" pos:end="117:30">bs</name></expr></argument>, <argument pos:start="117:33" pos:end="117:49"><expr pos:start="117:33" pos:end="117:49"><name pos:start="117:33" pos:end="117:49"><name pos:start="117:33" pos:end="117:33">s</name><operator pos:start="117:34" pos:end="117:35">-&gt;</operator><name pos:start="117:36" pos:end="117:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:16">(<expr pos:start="119:9" pos:end="119:15"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">&lt;</operator> <literal type="number" pos:start="119:15" pos:end="119:15">0</literal></expr>)</condition> <block pos:start="119:18" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:19">

        <return pos:start="121:9" pos:end="121:19">return <expr pos:start="121:16" pos:end="121:18"><name pos:start="121:16" pos:end="121:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:64">/* Allocate the refcount block itself and mark it as used */</comment>

    <decl_stmt pos:start="129:5" pos:end="129:66"><decl pos:start="129:5" pos:end="129:65"><type pos:start="129:5" pos:end="129:11"><name pos:start="129:5" pos:end="129:11">int64_t</name></type> <name pos:start="129:13" pos:end="129:21">new_block</name> <init pos:start="129:23" pos:end="129:65">= <expr pos:start="129:25" pos:end="129:65"><call pos:start="129:25" pos:end="129:65"><name pos:start="129:25" pos:end="129:44">alloc_clusters_noref</name><argument_list pos:start="129:45" pos:end="129:65">(<argument pos:start="129:46" pos:end="129:47"><expr pos:start="129:46" pos:end="129:47"><name pos:start="129:46" pos:end="129:47">bs</name></expr></argument>, <argument pos:start="129:50" pos:end="129:64"><expr pos:start="129:50" pos:end="129:64"><name pos:start="129:50" pos:end="129:64"><name pos:start="129:50" pos:end="129:50">s</name><operator pos:start="129:51" pos:end="129:52">-&gt;</operator><name pos:start="129:53" pos:end="129:64">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="131:5" pos:end="140:0"><if pos:start="131:5" pos:end="140:0">if <condition pos:start="131:8" pos:end="131:22">(<expr pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:17">new_block</name> <operator pos:start="131:19" pos:end="131:19">&lt;</operator> <literal type="number" pos:start="131:21" pos:end="131:21">0</literal></expr>)</condition> <block pos:start="131:24" pos:end="140:0">{<block_content pos:start="133:9" pos:end="133:25">

        <return pos:start="133:9" pos:end="133:25">return <expr pos:start="133:16" pos:end="133:24"><name pos:start="133:16" pos:end="133:24">new_block</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="139:1" pos:end="139:19">#<cpp:directive pos:start="139:2" pos:end="139:6">ifdef</cpp:directive> <name pos:start="139:8" pos:end="139:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="141:5" pos:end="148:0"><expr pos:start="141:5" pos:end="145:74"><call pos:start="141:5" pos:end="145:74"><name pos:start="141:5" pos:end="141:11">fprintf</name><argument_list pos:start="141:12" pos:end="145:74">(<argument pos:start="141:13" pos:end="141:18"><expr pos:start="141:13" pos:end="141:18"><name pos:start="141:13" pos:end="141:18">stderr</name></expr></argument>, <argument pos:start="141:21" pos:end="143:27"><expr pos:start="141:21" pos:end="143:27"><literal type="string" pos:start="141:21" pos:end="141:61">"qcow2: Allocate refcount block %d for %"</literal> <name pos:start="141:63" pos:end="141:68">PRIx64</name>

        <literal type="string" pos:start="143:9" pos:end="143:15">" at %"</literal> <name pos:start="143:17" pos:end="143:22">PRIx64</name> <literal type="string" pos:start="143:24" pos:end="143:27">"\n"</literal></expr></argument>,

        <argument pos:start="145:9" pos:end="145:28"><expr pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:28">refcount_table_index</name></expr></argument>, <argument pos:start="145:31" pos:end="145:62"><expr pos:start="145:31" pos:end="145:62"><name pos:start="145:31" pos:end="145:43">cluster_index</name> <operator pos:start="145:45" pos:end="145:46">&lt;&lt;</operator> <name pos:start="145:48" pos:end="145:62"><name pos:start="145:48" pos:end="145:48">s</name><operator pos:start="145:49" pos:end="145:50">-&gt;</operator><name pos:start="145:51" pos:end="145:62">cluster_bits</name></name></expr></argument>, <argument pos:start="145:65" pos:end="145:73"><expr pos:start="145:65" pos:end="145:73"><name pos:start="145:65" pos:end="145:73">new_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="151:5" pos:end="225:5"><if pos:start="151:5" pos:end="179:5">if <condition pos:start="151:8" pos:end="151:79">(<expr pos:start="151:9" pos:end="151:78"><call pos:start="151:9" pos:end="151:78"><name pos:start="151:9" pos:end="151:30">in_same_refcount_block</name><argument_list pos:start="151:31" pos:end="151:78">(<argument pos:start="151:32" pos:end="151:32"><expr pos:start="151:32" pos:end="151:32"><name pos:start="151:32" pos:end="151:32">s</name></expr></argument>, <argument pos:start="151:35" pos:end="151:43"><expr pos:start="151:35" pos:end="151:43"><name pos:start="151:35" pos:end="151:43">new_block</name></expr></argument>, <argument pos:start="151:46" pos:end="151:77"><expr pos:start="151:46" pos:end="151:77"><name pos:start="151:46" pos:end="151:58">cluster_index</name> <operator pos:start="151:60" pos:end="151:61">&lt;&lt;</operator> <name pos:start="151:63" pos:end="151:77"><name pos:start="151:63" pos:end="151:63">s</name><operator pos:start="151:64" pos:end="151:65">-&gt;</operator><name pos:start="151:66" pos:end="151:77">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:81" pos:end="179:5">{<block_content pos:start="155:9" pos:end="177:57">

        <comment type="block" pos:start="153:9" pos:end="153:60">/* Zero the new refcount block before updating it */</comment>

        <expr_stmt pos:start="155:9" pos:end="157:52"><expr pos:start="155:9" pos:end="157:51"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <call pos:start="155:15" pos:end="157:51"><name pos:start="155:15" pos:end="155:35">qcow2_cache_get_empty</name><argument_list pos:start="155:36" pos:end="157:51">(<argument pos:start="155:37" pos:end="155:38"><expr pos:start="155:37" pos:end="155:38"><name pos:start="155:37" pos:end="155:38">bs</name></expr></argument>, <argument pos:start="155:41" pos:end="155:63"><expr pos:start="155:41" pos:end="155:63"><name pos:start="155:41" pos:end="155:63"><name pos:start="155:41" pos:end="155:41">s</name><operator pos:start="155:42" pos:end="155:43">-&gt;</operator><name pos:start="155:44" pos:end="155:63">refcount_block_cache</name></name></expr></argument>, <argument pos:start="155:66" pos:end="155:74"><expr pos:start="155:66" pos:end="155:74"><name pos:start="155:66" pos:end="155:74">new_block</name></expr></argument>,

                                    <argument pos:start="157:37" pos:end="157:50"><expr pos:start="157:37" pos:end="157:50"><name pos:start="157:37" pos:end="157:50">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="163:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:20">(<expr pos:start="159:13" pos:end="159:19"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:17">&lt;</operator> <literal type="number" pos:start="159:19" pos:end="159:19">0</literal></expr>)</condition> <block pos:start="159:22" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:28">

            <goto pos:start="161:13" pos:end="161:28">goto <name pos:start="161:18" pos:end="161:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="167:9" pos:end="167:52"><expr pos:start="167:9" pos:end="167:51"><call pos:start="167:9" pos:end="167:51"><name pos:start="167:9" pos:end="167:14">memset</name><argument_list pos:start="167:15" pos:end="167:51">(<argument pos:start="167:16" pos:end="167:30"><expr pos:start="167:16" pos:end="167:30"><operator pos:start="167:16" pos:end="167:16">*</operator><name pos:start="167:17" pos:end="167:30">refcount_block</name></expr></argument>, <argument pos:start="167:33" pos:end="167:33"><expr pos:start="167:33" pos:end="167:33"><literal type="number" pos:start="167:33" pos:end="167:33">0</literal></expr></argument>, <argument pos:start="167:36" pos:end="167:50"><expr pos:start="167:36" pos:end="167:50"><name pos:start="167:36" pos:end="167:50"><name pos:start="167:36" pos:end="167:36">s</name><operator pos:start="167:37" pos:end="167:38">-&gt;</operator><name pos:start="167:39" pos:end="167:50">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="171:9" pos:end="171:66">/* The block describes itself, need to update the cache */</comment>

        <decl_stmt pos:start="173:9" pos:end="175:41"><decl pos:start="173:9" pos:end="175:40"><type pos:start="173:9" pos:end="173:11"><name pos:start="173:9" pos:end="173:11">int</name></type> <name pos:start="173:13" pos:end="173:23">block_index</name> <init pos:start="173:25" pos:end="175:40">= <expr pos:start="173:27" pos:end="175:40"><operator pos:start="173:27" pos:end="173:27">(</operator><name pos:start="173:28" pos:end="173:36">new_block</name> <operator pos:start="173:38" pos:end="173:39">&gt;&gt;</operator> <name pos:start="173:41" pos:end="173:55"><name pos:start="173:41" pos:end="173:41">s</name><operator pos:start="173:42" pos:end="173:43">-&gt;</operator><name pos:start="173:44" pos:end="173:55">cluster_bits</name></name><operator pos:start="173:56" pos:end="173:56">)</operator> <operator pos:start="173:58" pos:end="173:58">&amp;</operator>

            <operator pos:start="175:13" pos:end="175:13">(</operator><name pos:start="175:14" pos:end="175:35"><name pos:start="175:14" pos:end="175:14">s</name><operator pos:start="175:15" pos:end="175:16">-&gt;</operator><name pos:start="175:17" pos:end="175:35">refcount_block_size</name></name> <operator pos:start="175:37" pos:end="175:37">-</operator> <literal type="number" pos:start="175:39" pos:end="175:39">1</literal><operator pos:start="175:40" pos:end="175:40">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:57"><expr pos:start="177:9" pos:end="177:56"><call pos:start="177:9" pos:end="177:56"><name pos:start="177:9" pos:end="177:23"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:23">set_refcount</name></name><argument_list pos:start="177:24" pos:end="177:56">(<argument pos:start="177:25" pos:end="177:39"><expr pos:start="177:25" pos:end="177:39"><operator pos:start="177:25" pos:end="177:25">*</operator><name pos:start="177:26" pos:end="177:39">refcount_block</name></expr></argument>, <argument pos:start="177:42" pos:end="177:52"><expr pos:start="177:42" pos:end="177:52"><name pos:start="177:42" pos:end="177:52">block_index</name></expr></argument>, <argument pos:start="177:55" pos:end="177:55"><expr pos:start="177:55" pos:end="177:55"><literal type="number" pos:start="177:55" pos:end="177:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="179:7" pos:end="225:5">else <block pos:start="179:12" pos:end="225:5">{<block_content pos:start="185:9" pos:end="223:52">

        <comment type="block" pos:start="181:9" pos:end="183:54">/* Described somewhere else. This can recurse at most twice before we

         * arrive at a block that describes itself. */</comment>

        <expr_stmt pos:start="185:9" pos:end="187:51"><expr pos:start="185:9" pos:end="187:50"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <call pos:start="185:15" pos:end="187:50"><name pos:start="185:15" pos:end="185:29">update_refcount</name><argument_list pos:start="185:30" pos:end="187:50">(<argument pos:start="185:31" pos:end="185:32"><expr pos:start="185:31" pos:end="185:32"><name pos:start="185:31" pos:end="185:32">bs</name></expr></argument>, <argument pos:start="185:35" pos:end="185:43"><expr pos:start="185:35" pos:end="185:43"><name pos:start="185:35" pos:end="185:43">new_block</name></expr></argument>, <argument pos:start="185:46" pos:end="185:60"><expr pos:start="185:46" pos:end="185:60"><name pos:start="185:46" pos:end="185:60"><name pos:start="185:46" pos:end="185:46">s</name><operator pos:start="185:47" pos:end="185:48">-&gt;</operator><name pos:start="185:49" pos:end="185:60">cluster_size</name></name></expr></argument>, <argument pos:start="185:63" pos:end="185:63"><expr pos:start="185:63" pos:end="185:63"><literal type="number" pos:start="185:63" pos:end="185:63">1</literal></expr></argument>, <argument pos:start="185:66" pos:end="185:70"><expr pos:start="185:66" pos:end="185:70"><name pos:start="185:66" pos:end="185:70">false</name></expr></argument>,

                              <argument pos:start="187:31" pos:end="187:49"><expr pos:start="187:31" pos:end="187:49"><name pos:start="187:31" pos:end="187:49">QCOW2_DISCARD_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="189:9" pos:end="193:9"><if pos:start="189:9" pos:end="193:9">if <condition pos:start="189:12" pos:end="189:20">(<expr pos:start="189:13" pos:end="189:19"><name pos:start="189:13" pos:end="189:15">ret</name> <operator pos:start="189:17" pos:end="189:17">&lt;</operator> <literal type="number" pos:start="189:19" pos:end="189:19">0</literal></expr>)</condition> <block pos:start="189:22" pos:end="193:9">{<block_content pos:start="191:13" pos:end="191:28">

            <goto pos:start="191:13" pos:end="191:28">goto <name pos:start="191:18" pos:end="191:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:61"><expr pos:start="197:9" pos:end="197:60"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <call pos:start="197:15" pos:end="197:60"><name pos:start="197:15" pos:end="197:31">qcow2_cache_flush</name><argument_list pos:start="197:32" pos:end="197:60">(<argument pos:start="197:33" pos:end="197:34"><expr pos:start="197:33" pos:end="197:34"><name pos:start="197:33" pos:end="197:34">bs</name></expr></argument>, <argument pos:start="197:37" pos:end="197:59"><expr pos:start="197:37" pos:end="197:59"><name pos:start="197:37" pos:end="197:59"><name pos:start="197:37" pos:end="197:37">s</name><operator pos:start="197:38" pos:end="197:39">-&gt;</operator><name pos:start="197:40" pos:end="197:59">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="203:9"><if pos:start="199:9" pos:end="203:9">if <condition pos:start="199:12" pos:end="199:20">(<expr pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:15">ret</name> <operator pos:start="199:17" pos:end="199:17">&lt;</operator> <literal type="number" pos:start="199:19" pos:end="199:19">0</literal></expr>)</condition> <block pos:start="199:22" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:28">

            <goto pos:start="201:13" pos:end="201:28">goto <name pos:start="201:18" pos:end="201:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="207:9" pos:end="209:60">/* Initialize the new refcount block only after updating its refcount,

         * update_refcount uses the refcount cache itself */</comment>

        <expr_stmt pos:start="211:9" pos:end="213:52"><expr pos:start="211:9" pos:end="213:51"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">=</operator> <call pos:start="211:15" pos:end="213:51"><name pos:start="211:15" pos:end="211:35">qcow2_cache_get_empty</name><argument_list pos:start="211:36" pos:end="213:51">(<argument pos:start="211:37" pos:end="211:38"><expr pos:start="211:37" pos:end="211:38"><name pos:start="211:37" pos:end="211:38">bs</name></expr></argument>, <argument pos:start="211:41" pos:end="211:63"><expr pos:start="211:41" pos:end="211:63"><name pos:start="211:41" pos:end="211:63"><name pos:start="211:41" pos:end="211:41">s</name><operator pos:start="211:42" pos:end="211:43">-&gt;</operator><name pos:start="211:44" pos:end="211:63">refcount_block_cache</name></name></expr></argument>, <argument pos:start="211:66" pos:end="211:74"><expr pos:start="211:66" pos:end="211:74"><name pos:start="211:66" pos:end="211:74">new_block</name></expr></argument>,

                                    <argument pos:start="213:37" pos:end="213:50"><expr pos:start="213:37" pos:end="213:50"><name pos:start="213:37" pos:end="213:50">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="215:9" pos:end="219:9"><if pos:start="215:9" pos:end="219:9">if <condition pos:start="215:12" pos:end="215:20">(<expr pos:start="215:13" pos:end="215:19"><name pos:start="215:13" pos:end="215:15">ret</name> <operator pos:start="215:17" pos:end="215:17">&lt;</operator> <literal type="number" pos:start="215:19" pos:end="215:19">0</literal></expr>)</condition> <block pos:start="215:22" pos:end="219:9">{<block_content pos:start="217:13" pos:end="217:28">

            <goto pos:start="217:13" pos:end="217:28">goto <name pos:start="217:18" pos:end="217:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="223:9" pos:end="223:52"><expr pos:start="223:9" pos:end="223:51"><call pos:start="223:9" pos:end="223:51"><name pos:start="223:9" pos:end="223:14">memset</name><argument_list pos:start="223:15" pos:end="223:51">(<argument pos:start="223:16" pos:end="223:30"><expr pos:start="223:16" pos:end="223:30"><operator pos:start="223:16" pos:end="223:16">*</operator><name pos:start="223:17" pos:end="223:30">refcount_block</name></expr></argument>, <argument pos:start="223:33" pos:end="223:33"><expr pos:start="223:33" pos:end="223:33"><literal type="number" pos:start="223:33" pos:end="223:33">0</literal></expr></argument>, <argument pos:start="223:36" pos:end="223:50"><expr pos:start="223:36" pos:end="223:50"><name pos:start="223:36" pos:end="223:50"><name pos:start="223:36" pos:end="223:36">s</name><operator pos:start="223:37" pos:end="223:38">-&gt;</operator><name pos:start="223:39" pos:end="223:50">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="229:5" pos:end="229:64">/* Now the new refcount block needs to be written to disk */</comment>

    <expr_stmt pos:start="231:5" pos:end="231:56"><expr pos:start="231:5" pos:end="231:55"><call pos:start="231:5" pos:end="231:55"><name pos:start="231:5" pos:end="231:16">BLKDBG_EVENT</name><argument_list pos:start="231:17" pos:end="231:55">(<argument pos:start="231:18" pos:end="231:25"><expr pos:start="231:18" pos:end="231:25"><name pos:start="231:18" pos:end="231:25"><name pos:start="231:18" pos:end="231:19">bs</name><operator pos:start="231:20" pos:end="231:21">-&gt;</operator><name pos:start="231:22" pos:end="231:25">file</name></name></expr></argument>, <argument pos:start="231:28" pos:end="231:54"><expr pos:start="231:28" pos:end="231:54"><name pos:start="231:28" pos:end="231:54">BLKDBG_REFBLOCK_ALLOC_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:79"><expr pos:start="233:5" pos:end="233:78"><call pos:start="233:5" pos:end="233:78"><name pos:start="233:5" pos:end="233:32">qcow2_cache_entry_mark_dirty</name><argument_list pos:start="233:33" pos:end="233:78">(<argument pos:start="233:34" pos:end="233:35"><expr pos:start="233:34" pos:end="233:35"><name pos:start="233:34" pos:end="233:35">bs</name></expr></argument>, <argument pos:start="233:38" pos:end="233:60"><expr pos:start="233:38" pos:end="233:60"><name pos:start="233:38" pos:end="233:60"><name pos:start="233:38" pos:end="233:38">s</name><operator pos:start="233:39" pos:end="233:40">-&gt;</operator><name pos:start="233:41" pos:end="233:60">refcount_block_cache</name></name></expr></argument>, <argument pos:start="233:63" pos:end="233:77"><expr pos:start="233:63" pos:end="233:77"><operator pos:start="233:63" pos:end="233:63">*</operator><name pos:start="233:64" pos:end="233:77">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:57"><expr pos:start="235:5" pos:end="235:56"><name pos:start="235:5" pos:end="235:7">ret</name> <operator pos:start="235:9" pos:end="235:9">=</operator> <call pos:start="235:11" pos:end="235:56"><name pos:start="235:11" pos:end="235:27">qcow2_cache_flush</name><argument_list pos:start="235:28" pos:end="235:56">(<argument pos:start="235:29" pos:end="235:30"><expr pos:start="235:29" pos:end="235:30"><name pos:start="235:29" pos:end="235:30">bs</name></expr></argument>, <argument pos:start="235:33" pos:end="235:55"><expr pos:start="235:33" pos:end="235:55"><name pos:start="235:33" pos:end="235:55"><name pos:start="235:33" pos:end="235:33">s</name><operator pos:start="235:34" pos:end="235:35">-&gt;</operator><name pos:start="235:36" pos:end="235:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="237:5" pos:end="241:5"><if pos:start="237:5" pos:end="241:5">if <condition pos:start="237:8" pos:end="237:16">(<expr pos:start="237:9" pos:end="237:15"><name pos:start="237:9" pos:end="237:11">ret</name> <operator pos:start="237:13" pos:end="237:13">&lt;</operator> <literal type="number" pos:start="237:15" pos:end="237:15">0</literal></expr>)</condition> <block pos:start="237:18" pos:end="241:5">{<block_content pos:start="239:9" pos:end="239:24">

        <goto pos:start="239:9" pos:end="239:24">goto <name pos:start="239:14" pos:end="239:23">fail_block</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="245:5" pos:end="245:75">/* If the refcount table is big enough, just hook the block up there */</comment>

    <if_stmt pos:start="247:5" pos:end="277:5"><if pos:start="247:5" pos:end="277:5">if <condition pos:start="247:8" pos:end="247:54">(<expr pos:start="247:9" pos:end="247:53"><name pos:start="247:9" pos:end="247:28">refcount_table_index</name> <operator pos:start="247:30" pos:end="247:30">&lt;</operator> <name pos:start="247:32" pos:end="247:53"><name pos:start="247:32" pos:end="247:32">s</name><operator pos:start="247:33" pos:end="247:34">-&gt;</operator><name pos:start="247:35" pos:end="247:53">refcount_table_size</name></name></expr>)</condition> <block pos:start="247:56" pos:end="277:5">{<block_content pos:start="249:9" pos:end="275:23">

        <decl_stmt pos:start="249:9" pos:end="249:49"><decl pos:start="249:9" pos:end="249:48"><type pos:start="249:9" pos:end="249:16"><name pos:start="249:9" pos:end="249:16">uint64_t</name></type> <name pos:start="249:18" pos:end="249:23">data64</name> <init pos:start="249:25" pos:end="249:48">= <expr pos:start="249:27" pos:end="249:48"><call pos:start="249:27" pos:end="249:48"><name pos:start="249:27" pos:end="249:37">cpu_to_be64</name><argument_list pos:start="249:38" pos:end="249:48">(<argument pos:start="249:39" pos:end="249:47"><expr pos:start="249:39" pos:end="249:47"><name pos:start="249:39" pos:end="249:47">new_block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:61"><expr pos:start="251:9" pos:end="251:60"><call pos:start="251:9" pos:end="251:60"><name pos:start="251:9" pos:end="251:20">BLKDBG_EVENT</name><argument_list pos:start="251:21" pos:end="251:60">(<argument pos:start="251:22" pos:end="251:29"><expr pos:start="251:22" pos:end="251:29"><name pos:start="251:22" pos:end="251:29"><name pos:start="251:22" pos:end="251:23">bs</name><operator pos:start="251:24" pos:end="251:25">-&gt;</operator><name pos:start="251:26" pos:end="251:29">file</name></name></expr></argument>, <argument pos:start="251:32" pos:end="251:59"><expr pos:start="251:32" pos:end="251:59"><name pos:start="251:32" pos:end="251:59">BLKDBG_REFBLOCK_ALLOC_HOOKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="257:37"><expr pos:start="253:9" pos:end="257:36"><name pos:start="253:9" pos:end="253:11">ret</name> <operator pos:start="253:13" pos:end="253:13">=</operator> <call pos:start="253:15" pos:end="257:36"><name pos:start="253:15" pos:end="253:30">bdrv_pwrite_sync</name><argument_list pos:start="253:31" pos:end="257:36">(<argument pos:start="253:32" pos:end="253:39"><expr pos:start="253:32" pos:end="253:39"><name pos:start="253:32" pos:end="253:39"><name pos:start="253:32" pos:end="253:33">bs</name><operator pos:start="253:34" pos:end="253:35">-&gt;</operator><name pos:start="253:36" pos:end="253:39">file</name></name></expr></argument>,

            <argument pos:start="255:13" pos:end="255:78"><expr pos:start="255:13" pos:end="255:78"><name pos:start="255:13" pos:end="255:36"><name pos:start="255:13" pos:end="255:13">s</name><operator pos:start="255:14" pos:end="255:15">-&gt;</operator><name pos:start="255:16" pos:end="255:36">refcount_table_offset</name></name> <operator pos:start="255:38" pos:end="255:38">+</operator> <name pos:start="255:40" pos:end="255:59">refcount_table_index</name> <operator pos:start="255:61" pos:end="255:61">*</operator> <sizeof pos:start="255:63" pos:end="255:78">sizeof<argument_list pos:start="255:69" pos:end="255:78">(<argument pos:start="255:70" pos:end="255:77"><expr pos:start="255:70" pos:end="255:77"><name pos:start="255:70" pos:end="255:77">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

            <argument pos:start="257:13" pos:end="257:19"><expr pos:start="257:13" pos:end="257:19"><operator pos:start="257:13" pos:end="257:13">&amp;</operator><name pos:start="257:14" pos:end="257:19">data64</name></expr></argument>, <argument pos:start="257:22" pos:end="257:35"><expr pos:start="257:22" pos:end="257:35"><sizeof pos:start="257:22" pos:end="257:35">sizeof<argument_list pos:start="257:28" pos:end="257:35">(<argument pos:start="257:29" pos:end="257:34"><expr pos:start="257:29" pos:end="257:34"><name pos:start="257:29" pos:end="257:34">data64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="259:9" pos:end="263:9"><if pos:start="259:9" pos:end="263:9">if <condition pos:start="259:12" pos:end="259:20">(<expr pos:start="259:13" pos:end="259:19"><name pos:start="259:13" pos:end="259:15">ret</name> <operator pos:start="259:17" pos:end="259:17">&lt;</operator> <literal type="number" pos:start="259:19" pos:end="259:19">0</literal></expr>)</condition> <block pos:start="259:22" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:28">

            <goto pos:start="261:13" pos:end="261:28">goto <name pos:start="261:18" pos:end="261:27">fail_block</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="267:9" pos:end="267:60"><expr pos:start="267:9" pos:end="267:59"><name pos:start="267:9" pos:end="267:47"><name pos:start="267:9" pos:end="267:9">s</name><operator pos:start="267:10" pos:end="267:11">-&gt;</operator><name pos:start="267:12" pos:end="267:25">refcount_table</name><index pos:start="267:26" pos:end="267:47">[<expr pos:start="267:27" pos:end="267:46"><name pos:start="267:27" pos:end="267:46">refcount_table_index</name></expr>]</index></name> <operator pos:start="267:49" pos:end="267:49">=</operator> <name pos:start="267:51" pos:end="267:59">new_block</name></expr>;</expr_stmt>



        <comment type="block" pos:start="271:9" pos:end="273:49">/* The new refcount block may be where the caller intended to put its

         * data, so let it restart the search. */</comment>

        <return pos:start="275:9" pos:end="275:23">return <expr pos:start="275:16" pos:end="275:22"><operator pos:start="275:16" pos:end="275:16">-</operator><name pos:start="275:17" pos:end="275:22">EAGAIN</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="281:5" pos:end="281:71"><expr pos:start="281:5" pos:end="281:70"><name pos:start="281:5" pos:end="281:7">ret</name> <operator pos:start="281:9" pos:end="281:9">=</operator> <call pos:start="281:11" pos:end="281:70"><name pos:start="281:11" pos:end="281:25">qcow2_cache_put</name><argument_list pos:start="281:26" pos:end="281:70">(<argument pos:start="281:27" pos:end="281:28"><expr pos:start="281:27" pos:end="281:28"><name pos:start="281:27" pos:end="281:28">bs</name></expr></argument>, <argument pos:start="281:31" pos:end="281:53"><expr pos:start="281:31" pos:end="281:53"><name pos:start="281:31" pos:end="281:53"><name pos:start="281:31" pos:end="281:31">s</name><operator pos:start="281:32" pos:end="281:33">-&gt;</operator><name pos:start="281:34" pos:end="281:53">refcount_block_cache</name></name></expr></argument>, <argument pos:start="281:56" pos:end="281:69"><expr pos:start="281:56" pos:end="281:69"><name pos:start="281:56" pos:end="281:69">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="283:5" pos:end="287:5"><if pos:start="283:5" pos:end="287:5">if <condition pos:start="283:8" pos:end="283:16">(<expr pos:start="283:9" pos:end="283:15"><name pos:start="283:9" pos:end="283:11">ret</name> <operator pos:start="283:13" pos:end="283:13">&lt;</operator> <literal type="number" pos:start="283:15" pos:end="283:15">0</literal></expr>)</condition> <block pos:start="283:18" pos:end="287:5">{<block_content pos:start="285:9" pos:end="285:24">

        <goto pos:start="285:9" pos:end="285:24">goto <name pos:start="285:14" pos:end="285:23">fail_block</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="291:5" pos:end="311:7">/*

     * If we come here, we need to grow the refcount table. Again, a new

     * refcount table needs some space and we can't simply allocate to avoid

     * endless recursion.

     *

     * Therefore let's grab new refcount blocks at the end of the image, which

     * will describe themselves and the new refcount table. This way we can

     * reference them only in the new table and do the switch to the new

     * refcount table at once without producing an inconsistent state in

     * between.

     */</comment>

    <expr_stmt pos:start="313:5" pos:end="313:49"><expr pos:start="313:5" pos:end="313:48"><call pos:start="313:5" pos:end="313:48"><name pos:start="313:5" pos:end="313:16">BLKDBG_EVENT</name><argument_list pos:start="313:17" pos:end="313:48">(<argument pos:start="313:18" pos:end="313:25"><expr pos:start="313:18" pos:end="313:25"><name pos:start="313:18" pos:end="313:25"><name pos:start="313:18" pos:end="313:19">bs</name><operator pos:start="313:20" pos:end="313:21">-&gt;</operator><name pos:start="313:22" pos:end="313:25">file</name></name></expr></argument>, <argument pos:start="313:28" pos:end="313:47"><expr pos:start="313:28" pos:end="313:47"><name pos:start="313:28" pos:end="313:47">BLKDBG_REFTABLE_GROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="317:5" pos:end="337:7">/* Calculate the number of refcount blocks needed so far; this will be the

     * basis for calculating the index of the first cluster used for the

     * self-describing refcount structures which we are about to create.

     *

     * Because we reached this point, there cannot be any refcount entries for

     * cluster_index or higher indices yet. However, because new_block has been

     * allocated to describe that cluster (and it will assume this role later

     * on), we cannot use that index; also, new_block may actually have a higher

     * cluster index than cluster_index, so it needs to be taken into account

     * here (and 1 needs to be added to its value because that cluster is used).

     */</comment>

    <decl_stmt pos:start="339:5" pos:end="343:64"><decl pos:start="339:5" pos:end="343:63"><type pos:start="339:5" pos:end="339:12"><name pos:start="339:5" pos:end="339:12">uint64_t</name></type> <name pos:start="339:14" pos:end="339:24">blocks_used</name> <init pos:start="339:26" pos:end="343:63">= <expr pos:start="339:28" pos:end="343:63"><call pos:start="339:28" pos:end="343:63"><name pos:start="339:28" pos:end="339:39">DIV_ROUND_UP</name><argument_list pos:start="339:40" pos:end="343:63">(<argument pos:start="339:41" pos:end="341:79"><expr pos:start="339:41" pos:end="341:79"><call pos:start="339:41" pos:end="341:79"><name pos:start="339:41" pos:end="339:43">MAX</name><argument_list pos:start="339:44" pos:end="341:79">(<argument pos:start="339:45" pos:end="339:61"><expr pos:start="339:45" pos:end="339:61"><name pos:start="339:45" pos:end="339:57">cluster_index</name> <operator pos:start="339:59" pos:end="339:59">+</operator> <literal type="number" pos:start="339:61" pos:end="339:61">1</literal></expr></argument>,

                                            <argument pos:start="341:45" pos:end="341:78"><expr pos:start="341:45" pos:end="341:78"><operator pos:start="341:45" pos:end="341:45">(</operator><name pos:start="341:46" pos:end="341:54">new_block</name> <operator pos:start="341:56" pos:end="341:57">&gt;&gt;</operator> <name pos:start="341:59" pos:end="341:73"><name pos:start="341:59" pos:end="341:59">s</name><operator pos:start="341:60" pos:end="341:61">-&gt;</operator><name pos:start="341:62" pos:end="341:73">cluster_bits</name></name><operator pos:start="341:74" pos:end="341:74">)</operator> <operator pos:start="341:76" pos:end="341:76">+</operator> <literal type="number" pos:start="341:78" pos:end="341:78">1</literal></expr></argument>)</argument_list></call></expr></argument>,

                                        <argument pos:start="343:41" pos:end="343:62"><expr pos:start="343:41" pos:end="343:62"><name pos:start="343:41" pos:end="343:62"><name pos:start="343:41" pos:end="343:41">s</name><operator pos:start="343:42" pos:end="343:43">-&gt;</operator><name pos:start="343:44" pos:end="343:62">refcount_block_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="347:5" pos:end="351:5"><if pos:start="347:5" pos:end="351:5">if <condition pos:start="347:8" pos:end="347:64">(<expr pos:start="347:9" pos:end="347:63"><name pos:start="347:9" pos:end="347:19">blocks_used</name> <operator pos:start="347:21" pos:end="347:21">&gt;</operator> <name pos:start="347:23" pos:end="347:44">QCOW_MAX_REFTABLE_SIZE</name> <operator pos:start="347:46" pos:end="347:46">/</operator> <sizeof pos:start="347:48" pos:end="347:63">sizeof<argument_list pos:start="347:54" pos:end="347:63">(<argument pos:start="347:55" pos:end="347:62"><expr pos:start="347:55" pos:end="347:62"><name pos:start="347:55" pos:end="347:62">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="347:66" pos:end="351:5">{<block_content pos:start="349:9" pos:end="349:22">

        <return pos:start="349:9" pos:end="349:22">return <expr pos:start="349:16" pos:end="349:21"><operator pos:start="349:16" pos:end="349:16">-</operator><name pos:start="349:17" pos:end="349:21">EFBIG</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="355:5" pos:end="355:70">/* And now we need at least one block more for the new metadata */</comment>

    <decl_stmt pos:start="357:5" pos:end="357:71"><decl pos:start="357:5" pos:end="357:70"><type pos:start="357:5" pos:end="357:12"><name pos:start="357:5" pos:end="357:12">uint64_t</name></type> <name pos:start="357:14" pos:end="357:23">table_size</name> <init pos:start="357:25" pos:end="357:70">= <expr pos:start="357:27" pos:end="357:70"><call pos:start="357:27" pos:end="357:70"><name pos:start="357:27" pos:end="357:50">next_refcount_table_size</name><argument_list pos:start="357:51" pos:end="357:70">(<argument pos:start="357:52" pos:end="357:52"><expr pos:start="357:52" pos:end="357:52"><name pos:start="357:52" pos:end="357:52">s</name></expr></argument>, <argument pos:start="357:55" pos:end="357:69"><expr pos:start="357:55" pos:end="357:69"><name pos:start="357:55" pos:end="357:65">blocks_used</name> <operator pos:start="357:67" pos:end="357:67">+</operator> <literal type="number" pos:start="357:69" pos:end="357:69">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="359:5" pos:end="359:29"><decl pos:start="359:5" pos:end="359:28"><type pos:start="359:5" pos:end="359:12"><name pos:start="359:5" pos:end="359:12">uint64_t</name></type> <name pos:start="359:14" pos:end="359:28">last_table_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="361:5" pos:end="361:29"><decl pos:start="361:5" pos:end="361:28"><type pos:start="361:5" pos:end="361:12"><name pos:start="361:5" pos:end="361:12">uint64_t</name></type> <name pos:start="361:14" pos:end="361:28">blocks_clusters</name></decl>;</decl_stmt>

    <do pos:start="363:5" pos:end="394:0">do <block pos:start="363:8" pos:end="389:5">{<block_content pos:start="365:9" pos:end="385:39">

        <decl_stmt pos:start="365:9" pos:end="367:63"><decl pos:start="365:9" pos:end="367:62"><type pos:start="365:9" pos:end="365:16"><name pos:start="365:9" pos:end="365:16">uint64_t</name></type> <name pos:start="365:18" pos:end="365:31">table_clusters</name> <init pos:start="365:33" pos:end="367:62">=

            <expr pos:start="367:13" pos:end="367:62"><call pos:start="367:13" pos:end="367:62"><name pos:start="367:13" pos:end="367:28">size_to_clusters</name><argument_list pos:start="367:29" pos:end="367:62">(<argument pos:start="367:30" pos:end="367:30"><expr pos:start="367:30" pos:end="367:30"><name pos:start="367:30" pos:end="367:30">s</name></expr></argument>, <argument pos:start="367:33" pos:end="367:61"><expr pos:start="367:33" pos:end="367:61"><name pos:start="367:33" pos:end="367:42">table_size</name> <operator pos:start="367:44" pos:end="367:44">*</operator> <sizeof pos:start="367:46" pos:end="367:61">sizeof<argument_list pos:start="367:52" pos:end="367:61">(<argument pos:start="367:53" pos:end="367:60"><expr pos:start="367:53" pos:end="367:60"><name pos:start="367:53" pos:end="367:60">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="369:9" pos:end="373:38"><expr pos:start="369:9" pos:end="373:37"><name pos:start="369:9" pos:end="369:23">blocks_clusters</name> <operator pos:start="369:25" pos:end="369:25">=</operator> <literal type="number" pos:start="369:27" pos:end="369:29">1</literal> <operator pos:start="369:29" pos:end="369:29">+</operator>

            <operator pos:start="371:13" pos:end="371:13">(</operator><operator pos:start="371:14" pos:end="371:14">(</operator><name pos:start="371:15" pos:end="371:28">table_clusters</name> <operator pos:start="371:30" pos:end="371:30">+</operator> <name pos:start="371:32" pos:end="371:53"><name pos:start="371:32" pos:end="371:32">s</name><operator pos:start="371:33" pos:end="371:34">-&gt;</operator><name pos:start="371:35" pos:end="371:53">refcount_block_size</name></name> <operator pos:start="371:55" pos:end="371:55">-</operator> <literal type="number" pos:start="371:57" pos:end="371:57">1</literal><operator pos:start="371:58" pos:end="371:58">)</operator>

            <operator pos:start="373:13" pos:end="373:13">/</operator> <name pos:start="373:15" pos:end="373:36"><name pos:start="373:15" pos:end="373:15">s</name><operator pos:start="373:16" pos:end="373:17">-&gt;</operator><name pos:start="373:18" pos:end="373:36">refcount_block_size</name></name><operator pos:start="373:37" pos:end="373:37">)</operator></expr>;</expr_stmt>

        <decl_stmt pos:start="375:9" pos:end="375:66"><decl pos:start="375:9" pos:end="375:65"><type pos:start="375:9" pos:end="375:16"><name pos:start="375:9" pos:end="375:16">uint64_t</name></type> <name pos:start="375:18" pos:end="375:30">meta_clusters</name> <init pos:start="375:32" pos:end="375:65">= <expr pos:start="375:34" pos:end="375:65"><name pos:start="375:34" pos:end="375:47">table_clusters</name> <operator pos:start="375:49" pos:end="375:49">+</operator> <name pos:start="375:51" pos:end="375:65">blocks_clusters</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="379:9" pos:end="379:37"><expr pos:start="379:9" pos:end="379:36"><name pos:start="379:9" pos:end="379:23">last_table_size</name> <operator pos:start="379:25" pos:end="379:25">=</operator> <name pos:start="379:27" pos:end="379:36">table_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="381:9" pos:end="385:39"><expr pos:start="381:9" pos:end="385:38"><name pos:start="381:9" pos:end="381:18">table_size</name> <operator pos:start="381:20" pos:end="381:20">=</operator> <call pos:start="381:22" pos:end="385:38"><name pos:start="381:22" pos:end="381:45">next_refcount_table_size</name><argument_list pos:start="381:46" pos:end="385:38">(<argument pos:start="381:47" pos:end="381:47"><expr pos:start="381:47" pos:end="381:47"><name pos:start="381:47" pos:end="381:47">s</name></expr></argument>, <argument pos:start="381:50" pos:end="385:37"><expr pos:start="381:50" pos:end="385:37"><name pos:start="381:50" pos:end="381:60">blocks_used</name> <operator pos:start="381:62" pos:end="381:62">+</operator>

            <operator pos:start="383:13" pos:end="383:13">(</operator><operator pos:start="383:14" pos:end="383:14">(</operator><name pos:start="383:15" pos:end="383:27">meta_clusters</name> <operator pos:start="383:29" pos:end="383:29">+</operator> <name pos:start="383:31" pos:end="383:52"><name pos:start="383:31" pos:end="383:31">s</name><operator pos:start="383:32" pos:end="383:33">-&gt;</operator><name pos:start="383:34" pos:end="383:52">refcount_block_size</name></name> <operator pos:start="383:54" pos:end="383:54">-</operator> <literal type="number" pos:start="383:56" pos:end="383:56">1</literal><operator pos:start="383:57" pos:end="383:57">)</operator>

            <operator pos:start="385:13" pos:end="385:13">/</operator> <name pos:start="385:15" pos:end="385:36"><name pos:start="385:15" pos:end="385:15">s</name><operator pos:start="385:16" pos:end="385:17">-&gt;</operator><name pos:start="385:18" pos:end="385:36">refcount_block_size</name></name><operator pos:start="385:37" pos:end="385:37">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block> while <condition pos:start="389:13" pos:end="389:43">(<expr pos:start="389:14" pos:end="389:42"><name pos:start="389:14" pos:end="389:28">last_table_size</name> <operator pos:start="389:30" pos:end="389:31">!=</operator> <name pos:start="389:33" pos:end="389:42">table_size</name></expr>)</condition>;</do>



<cpp:ifdef pos:start="393:1" pos:end="393:19">#<cpp:directive pos:start="393:2" pos:end="393:6">ifdef</cpp:directive> <name pos:start="393:8" pos:end="393:19">DEBUG_ALLOC2</name></cpp:ifdef>

    <expr_stmt pos:start="395:5" pos:end="400:0"><expr pos:start="395:5" pos:end="397:43"><call pos:start="395:5" pos:end="397:43"><name pos:start="395:5" pos:end="395:11">fprintf</name><argument_list pos:start="395:12" pos:end="397:43">(<argument pos:start="395:13" pos:end="395:18"><expr pos:start="395:13" pos:end="395:18"><name pos:start="395:13" pos:end="395:18">stderr</name></expr></argument>, <argument pos:start="395:21" pos:end="395:77"><expr pos:start="395:21" pos:end="395:77"><literal type="string" pos:start="395:21" pos:end="395:50">"qcow2: Grow refcount table %"</literal> <name pos:start="395:52" pos:end="395:57">PRId32</name> <literal type="string" pos:start="395:59" pos:end="395:65">" =&gt; %"</literal> <name pos:start="395:67" pos:end="395:72">PRId64</name> <literal type="string" pos:start="395:74" pos:end="395:77">"\n"</literal></expr></argument>,

        <argument pos:start="397:9" pos:end="397:30"><expr pos:start="397:9" pos:end="397:30"><name pos:start="397:9" pos:end="397:30"><name pos:start="397:9" pos:end="397:9">s</name><operator pos:start="397:10" pos:end="397:11">-&gt;</operator><name pos:start="397:12" pos:end="397:30">refcount_table_size</name></name></expr></argument>, <argument pos:start="397:33" pos:end="397:42"><expr pos:start="397:33" pos:end="397:42"><name pos:start="397:33" pos:end="397:42">table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="399:1" pos:end="399:6">#<cpp:directive pos:start="399:2" pos:end="399:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="403:5" pos:end="403:50">/* Create the new refcount table and blocks */</comment>

    <decl_stmt pos:start="405:5" pos:end="407:24"><decl pos:start="405:5" pos:end="407:23"><type pos:start="405:5" pos:end="405:12"><name pos:start="405:5" pos:end="405:12">uint64_t</name></type> <name pos:start="405:14" pos:end="405:24">meta_offset</name> <init pos:start="405:26" pos:end="407:23">= <expr pos:start="405:28" pos:end="407:23"><operator pos:start="405:28" pos:end="405:28">(</operator><name pos:start="405:29" pos:end="405:39">blocks_used</name> <operator pos:start="405:41" pos:end="405:41">*</operator> <name pos:start="405:43" pos:end="405:64"><name pos:start="405:43" pos:end="405:43">s</name><operator pos:start="405:44" pos:end="405:45">-&gt;</operator><name pos:start="405:46" pos:end="405:64">refcount_block_size</name></name><operator pos:start="405:65" pos:end="405:65">)</operator> <operator pos:start="405:67" pos:end="405:67">*</operator>

        <name pos:start="407:9" pos:end="407:23"><name pos:start="407:9" pos:end="407:9">s</name><operator pos:start="407:10" pos:end="407:11">-&gt;</operator><name pos:start="407:12" pos:end="407:23">cluster_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="409:5" pos:end="409:76"><decl pos:start="409:5" pos:end="409:75"><type pos:start="409:5" pos:end="409:12"><name pos:start="409:5" pos:end="409:12">uint64_t</name></type> <name pos:start="409:14" pos:end="409:25">table_offset</name> <init pos:start="409:27" pos:end="409:75">= <expr pos:start="409:29" pos:end="409:75"><name pos:start="409:29" pos:end="409:39">meta_offset</name> <operator pos:start="409:41" pos:end="409:41">+</operator> <name pos:start="409:43" pos:end="409:57">blocks_clusters</name> <operator pos:start="409:59" pos:end="409:59">*</operator> <name pos:start="409:61" pos:end="409:75"><name pos:start="409:61" pos:end="409:61">s</name><operator pos:start="409:62" pos:end="409:63">-&gt;</operator><name pos:start="409:64" pos:end="409:75">cluster_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="411:5" pos:end="411:59"><decl pos:start="411:5" pos:end="411:58"><type pos:start="411:5" pos:end="411:14"><name pos:start="411:5" pos:end="411:12">uint64_t</name> <modifier pos:start="411:14" pos:end="411:14">*</modifier></type><name pos:start="411:15" pos:end="411:23">new_table</name> <init pos:start="411:25" pos:end="411:58">= <expr pos:start="411:27" pos:end="411:58"><call pos:start="411:27" pos:end="411:58"><name pos:start="411:27" pos:end="411:36">g_try_new0</name><argument_list pos:start="411:37" pos:end="411:58">(<argument pos:start="411:38" pos:end="411:45"><expr pos:start="411:38" pos:end="411:45"><name pos:start="411:38" pos:end="411:45">uint64_t</name></expr></argument>, <argument pos:start="411:48" pos:end="411:57"><expr pos:start="411:48" pos:end="411:57"><name pos:start="411:48" pos:end="411:57">table_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="413:5" pos:end="413:72"><decl pos:start="413:5" pos:end="413:71"><type pos:start="413:5" pos:end="413:10"><name pos:start="413:5" pos:end="413:8">void</name> <modifier pos:start="413:10" pos:end="413:10">*</modifier></type><name pos:start="413:11" pos:end="413:20">new_blocks</name> <init pos:start="413:22" pos:end="413:71">= <expr pos:start="413:24" pos:end="413:71"><call pos:start="413:24" pos:end="413:71"><name pos:start="413:24" pos:end="413:36">g_try_malloc0</name><argument_list pos:start="413:37" pos:end="413:71">(<argument pos:start="413:38" pos:end="413:70"><expr pos:start="413:38" pos:end="413:70"><name pos:start="413:38" pos:end="413:52">blocks_clusters</name> <operator pos:start="413:54" pos:end="413:54">*</operator> <name pos:start="413:56" pos:end="413:70"><name pos:start="413:56" pos:end="413:56">s</name><operator pos:start="413:57" pos:end="413:58">-&gt;</operator><name pos:start="413:59" pos:end="413:70">cluster_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="417:5" pos:end="417:50"><expr pos:start="417:5" pos:end="417:49"><call pos:start="417:5" pos:end="417:49"><name pos:start="417:5" pos:end="417:10">assert</name><argument_list pos:start="417:11" pos:end="417:49">(<argument pos:start="417:12" pos:end="417:48"><expr pos:start="417:12" pos:end="417:48"><name pos:start="417:12" pos:end="417:21">table_size</name> <operator pos:start="417:23" pos:end="417:23">&gt;</operator> <literal type="number" pos:start="417:25" pos:end="417:25">0</literal> <operator pos:start="417:27" pos:end="417:28">&amp;&amp;</operator> <name pos:start="417:30" pos:end="417:44">blocks_clusters</name> <operator pos:start="417:46" pos:end="417:46">&gt;</operator> <literal type="number" pos:start="417:48" pos:end="417:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="419:5" pos:end="425:5"><if pos:start="419:5" pos:end="425:5">if <condition pos:start="419:8" pos:end="419:48">(<expr pos:start="419:9" pos:end="419:47"><name pos:start="419:9" pos:end="419:17">new_table</name> <operator pos:start="419:19" pos:end="419:20">==</operator> <name pos:start="419:22" pos:end="419:25">NULL</name> <operator pos:start="419:27" pos:end="419:28">||</operator> <name pos:start="419:30" pos:end="419:39">new_blocks</name> <operator pos:start="419:41" pos:end="419:42">==</operator> <name pos:start="419:44" pos:end="419:47">NULL</name></expr>)</condition> <block pos:start="419:50" pos:end="425:5">{<block_content pos:start="421:9" pos:end="423:24">

        <expr_stmt pos:start="421:9" pos:end="421:22"><expr pos:start="421:9" pos:end="421:21"><name pos:start="421:9" pos:end="421:11">ret</name> <operator pos:start="421:13" pos:end="421:13">=</operator> <operator pos:start="421:15" pos:end="421:15">-</operator><name pos:start="421:16" pos:end="421:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="423:9" pos:end="423:24">goto <name pos:start="423:14" pos:end="423:23">fail_table</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="429:5" pos:end="429:37">/* Fill the new refcount table */</comment>

    <expr_stmt pos:start="431:5" pos:end="433:51"><expr pos:start="431:5" pos:end="433:50"><call pos:start="431:5" pos:end="433:50"><name pos:start="431:5" pos:end="431:10">memcpy</name><argument_list pos:start="431:11" pos:end="433:50">(<argument pos:start="431:12" pos:end="431:20"><expr pos:start="431:12" pos:end="431:20"><name pos:start="431:12" pos:end="431:20">new_table</name></expr></argument>, <argument pos:start="431:23" pos:end="431:39"><expr pos:start="431:23" pos:end="431:39"><name pos:start="431:23" pos:end="431:39"><name pos:start="431:23" pos:end="431:23">s</name><operator pos:start="431:24" pos:end="431:25">-&gt;</operator><name pos:start="431:26" pos:end="431:39">refcount_table</name></name></expr></argument>,

        <argument pos:start="433:9" pos:end="433:49"><expr pos:start="433:9" pos:end="433:49"><name pos:start="433:9" pos:end="433:30"><name pos:start="433:9" pos:end="433:9">s</name><operator pos:start="433:10" pos:end="433:11">-&gt;</operator><name pos:start="433:12" pos:end="433:30">refcount_table_size</name></name> <operator pos:start="433:32" pos:end="433:32">*</operator> <sizeof pos:start="433:34" pos:end="433:49">sizeof<argument_list pos:start="433:40" pos:end="433:49">(<argument pos:start="433:41" pos:end="433:48"><expr pos:start="433:41" pos:end="433:48"><name pos:start="433:41" pos:end="433:48">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="435:5" pos:end="435:48"><expr pos:start="435:5" pos:end="435:47"><name pos:start="435:5" pos:end="435:35"><name pos:start="435:5" pos:end="435:13">new_table</name><index pos:start="435:14" pos:end="435:35">[<expr pos:start="435:15" pos:end="435:34"><name pos:start="435:15" pos:end="435:34">refcount_table_index</name></expr>]</index></name> <operator pos:start="435:37" pos:end="435:37">=</operator> <name pos:start="435:39" pos:end="435:47">new_block</name></expr>;</expr_stmt>



    <decl_stmt pos:start="439:5" pos:end="439:10"><decl pos:start="439:5" pos:end="439:9"><type pos:start="439:5" pos:end="439:7"><name pos:start="439:5" pos:end="439:7">int</name></type> <name pos:start="439:9" pos:end="439:9">i</name></decl>;</decl_stmt>

    <for pos:start="441:5" pos:end="445:5">for <control pos:start="441:9" pos:end="441:41">(<init pos:start="441:10" pos:end="441:15"><expr pos:start="441:10" pos:end="441:14"><name pos:start="441:10" pos:end="441:10">i</name> <operator pos:start="441:12" pos:end="441:12">=</operator> <literal type="number" pos:start="441:14" pos:end="441:14">0</literal></expr>;</init> <condition pos:start="441:17" pos:end="441:36"><expr pos:start="441:17" pos:end="441:35"><name pos:start="441:17" pos:end="441:17">i</name> <operator pos:start="441:19" pos:end="441:19">&lt;</operator> <name pos:start="441:21" pos:end="441:35">blocks_clusters</name></expr>;</condition> <incr pos:start="441:38" pos:end="441:40"><expr pos:start="441:38" pos:end="441:40"><name pos:start="441:38" pos:end="441:38">i</name><operator pos:start="441:39" pos:end="441:40">++</operator></expr></incr>)</control> <block pos:start="441:43" pos:end="445:5">{<block_content pos:start="443:9" pos:end="443:73">

        <expr_stmt pos:start="443:9" pos:end="443:73"><expr pos:start="443:9" pos:end="443:72"><name pos:start="443:9" pos:end="443:34"><name pos:start="443:9" pos:end="443:17">new_table</name><index pos:start="443:18" pos:end="443:34">[<expr pos:start="443:19" pos:end="443:33"><name pos:start="443:19" pos:end="443:29">blocks_used</name> <operator pos:start="443:31" pos:end="443:31">+</operator> <name pos:start="443:33" pos:end="443:33">i</name></expr>]</index></name> <operator pos:start="443:36" pos:end="443:36">=</operator> <name pos:start="443:38" pos:end="443:48">meta_offset</name> <operator pos:start="443:50" pos:end="443:50">+</operator> <operator pos:start="443:52" pos:end="443:52">(</operator><name pos:start="443:53" pos:end="443:53">i</name> <operator pos:start="443:55" pos:end="443:55">*</operator> <name pos:start="443:57" pos:end="443:71"><name pos:start="443:57" pos:end="443:57">s</name><operator pos:start="443:58" pos:end="443:59">-&gt;</operator><name pos:start="443:60" pos:end="443:71">cluster_size</name></name><operator pos:start="443:72" pos:end="443:72">)</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="449:5" pos:end="449:34">/* Fill the refcount blocks */</comment>

    <decl_stmt pos:start="451:5" pos:end="451:81"><decl pos:start="451:5" pos:end="451:80"><type pos:start="451:5" pos:end="451:12"><name pos:start="451:5" pos:end="451:12">uint64_t</name></type> <name pos:start="451:14" pos:end="451:27">table_clusters</name> <init pos:start="451:29" pos:end="451:80">= <expr pos:start="451:31" pos:end="451:80"><call pos:start="451:31" pos:end="451:80"><name pos:start="451:31" pos:end="451:46">size_to_clusters</name><argument_list pos:start="451:47" pos:end="451:80">(<argument pos:start="451:48" pos:end="451:48"><expr pos:start="451:48" pos:end="451:48"><name pos:start="451:48" pos:end="451:48">s</name></expr></argument>, <argument pos:start="451:51" pos:end="451:79"><expr pos:start="451:51" pos:end="451:79"><name pos:start="451:51" pos:end="451:60">table_size</name> <operator pos:start="451:62" pos:end="451:62">*</operator> <sizeof pos:start="451:64" pos:end="451:79">sizeof<argument_list pos:start="451:70" pos:end="451:79">(<argument pos:start="451:71" pos:end="451:78"><expr pos:start="451:71" pos:end="451:78"><name pos:start="451:71" pos:end="451:78">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="453:5" pos:end="453:18"><decl pos:start="453:5" pos:end="453:17"><type pos:start="453:5" pos:end="453:7"><name pos:start="453:5" pos:end="453:7">int</name></type> <name pos:start="453:9" pos:end="453:13">block</name> <init pos:start="453:15" pos:end="453:17">= <expr pos:start="453:17" pos:end="453:17"><literal type="number" pos:start="453:17" pos:end="453:17">0</literal></expr></init></decl>;</decl_stmt>

    <for pos:start="455:5" pos:end="459:5">for <control pos:start="455:9" pos:end="455:58">(<init pos:start="455:10" pos:end="455:15"><expr pos:start="455:10" pos:end="455:14"><name pos:start="455:10" pos:end="455:10">i</name> <operator pos:start="455:12" pos:end="455:12">=</operator> <literal type="number" pos:start="455:14" pos:end="455:14">0</literal></expr>;</init> <condition pos:start="455:17" pos:end="455:53"><expr pos:start="455:17" pos:end="455:52"><name pos:start="455:17" pos:end="455:17">i</name> <operator pos:start="455:19" pos:end="455:19">&lt;</operator> <name pos:start="455:21" pos:end="455:34">table_clusters</name> <operator pos:start="455:36" pos:end="455:36">+</operator> <name pos:start="455:38" pos:end="455:52">blocks_clusters</name></expr>;</condition> <incr pos:start="455:55" pos:end="455:57"><expr pos:start="455:55" pos:end="455:57"><name pos:start="455:55" pos:end="455:55">i</name><operator pos:start="455:56" pos:end="455:57">++</operator></expr></incr>)</control> <block pos:start="455:60" pos:end="459:5">{<block_content pos:start="457:9" pos:end="457:48">

        <expr_stmt pos:start="457:9" pos:end="457:48"><expr pos:start="457:9" pos:end="457:47"><call pos:start="457:9" pos:end="457:47"><name pos:start="457:9" pos:end="457:23"><name pos:start="457:9" pos:end="457:9">s</name><operator pos:start="457:10" pos:end="457:11">-&gt;</operator><name pos:start="457:12" pos:end="457:23">set_refcount</name></name><argument_list pos:start="457:24" pos:end="457:47">(<argument pos:start="457:25" pos:end="457:34"><expr pos:start="457:25" pos:end="457:34"><name pos:start="457:25" pos:end="457:34">new_blocks</name></expr></argument>, <argument pos:start="457:37" pos:end="457:43"><expr pos:start="457:37" pos:end="457:43"><name pos:start="457:37" pos:end="457:41">block</name><operator pos:start="457:42" pos:end="457:43">++</operator></expr></argument>, <argument pos:start="457:46" pos:end="457:46"><expr pos:start="457:46" pos:end="457:46"><literal type="number" pos:start="457:46" pos:end="457:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="463:5" pos:end="463:39">/* Write refcount blocks to disk */</comment>

    <expr_stmt pos:start="465:5" pos:end="465:63"><expr pos:start="465:5" pos:end="465:62"><call pos:start="465:5" pos:end="465:62"><name pos:start="465:5" pos:end="465:16">BLKDBG_EVENT</name><argument_list pos:start="465:17" pos:end="465:62">(<argument pos:start="465:18" pos:end="465:25"><expr pos:start="465:18" pos:end="465:25"><name pos:start="465:18" pos:end="465:25"><name pos:start="465:18" pos:end="465:19">bs</name><operator pos:start="465:20" pos:end="465:21">-&gt;</operator><name pos:start="465:22" pos:end="465:25">file</name></name></expr></argument>, <argument pos:start="465:28" pos:end="465:61"><expr pos:start="465:28" pos:end="465:61"><name pos:start="465:28" pos:end="465:61">BLKDBG_REFBLOCK_ALLOC_WRITE_BLOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="467:5" pos:end="469:43"><expr pos:start="467:5" pos:end="469:42"><name pos:start="467:5" pos:end="467:7">ret</name> <operator pos:start="467:9" pos:end="467:9">=</operator> <call pos:start="467:11" pos:end="469:42"><name pos:start="467:11" pos:end="467:26">bdrv_pwrite_sync</name><argument_list pos:start="467:27" pos:end="469:42">(<argument pos:start="467:28" pos:end="467:35"><expr pos:start="467:28" pos:end="467:35"><name pos:start="467:28" pos:end="467:35"><name pos:start="467:28" pos:end="467:29">bs</name><operator pos:start="467:30" pos:end="467:31">-&gt;</operator><name pos:start="467:32" pos:end="467:35">file</name></name></expr></argument>, <argument pos:start="467:38" pos:end="467:48"><expr pos:start="467:38" pos:end="467:48"><name pos:start="467:38" pos:end="467:48">meta_offset</name></expr></argument>, <argument pos:start="467:51" pos:end="467:60"><expr pos:start="467:51" pos:end="467:60"><name pos:start="467:51" pos:end="467:60">new_blocks</name></expr></argument>,

        <argument pos:start="469:9" pos:end="469:41"><expr pos:start="469:9" pos:end="469:41"><name pos:start="469:9" pos:end="469:23">blocks_clusters</name> <operator pos:start="469:25" pos:end="469:25">*</operator> <name pos:start="469:27" pos:end="469:41"><name pos:start="469:27" pos:end="469:27">s</name><operator pos:start="469:28" pos:end="469:29">-&gt;</operator><name pos:start="469:30" pos:end="469:41">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="471:5" pos:end="471:23"><expr pos:start="471:5" pos:end="471:22"><call pos:start="471:5" pos:end="471:22"><name pos:start="471:5" pos:end="471:10">g_free</name><argument_list pos:start="471:11" pos:end="471:22">(<argument pos:start="471:12" pos:end="471:21"><expr pos:start="471:12" pos:end="471:21"><name pos:start="471:12" pos:end="471:21">new_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="473:5" pos:end="473:22"><expr pos:start="473:5" pos:end="473:21"><name pos:start="473:5" pos:end="473:14">new_blocks</name> <operator pos:start="473:16" pos:end="473:16">=</operator> <name pos:start="473:18" pos:end="473:21">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="475:5" pos:end="479:5"><if pos:start="475:5" pos:end="479:5">if <condition pos:start="475:8" pos:end="475:16">(<expr pos:start="475:9" pos:end="475:15"><name pos:start="475:9" pos:end="475:11">ret</name> <operator pos:start="475:13" pos:end="475:13">&lt;</operator> <literal type="number" pos:start="475:15" pos:end="475:15">0</literal></expr>)</condition> <block pos:start="475:18" pos:end="479:5">{<block_content pos:start="477:9" pos:end="477:24">

        <goto pos:start="477:9" pos:end="477:24">goto <name pos:start="477:14" pos:end="477:23">fail_table</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="483:5" pos:end="483:38">/* Write refcount table to disk */</comment>

    <for pos:start="485:5" pos:end="489:5">for<control pos:start="485:8" pos:end="485:35">(<init pos:start="485:9" pos:end="485:14"><expr pos:start="485:9" pos:end="485:13"><name pos:start="485:9" pos:end="485:9">i</name> <operator pos:start="485:11" pos:end="485:11">=</operator> <literal type="number" pos:start="485:13" pos:end="485:13">0</literal></expr>;</init> <condition pos:start="485:16" pos:end="485:30"><expr pos:start="485:16" pos:end="485:29"><name pos:start="485:16" pos:end="485:16">i</name> <operator pos:start="485:18" pos:end="485:18">&lt;</operator> <name pos:start="485:20" pos:end="485:29">table_size</name></expr>;</condition> <incr pos:start="485:32" pos:end="485:34"><expr pos:start="485:32" pos:end="485:34"><name pos:start="485:32" pos:end="485:32">i</name><operator pos:start="485:33" pos:end="485:34">++</operator></expr></incr>)</control> <block pos:start="485:37" pos:end="489:5">{<block_content pos:start="487:9" pos:end="487:36">

        <expr_stmt pos:start="487:9" pos:end="487:36"><expr pos:start="487:9" pos:end="487:35"><call pos:start="487:9" pos:end="487:35"><name pos:start="487:9" pos:end="487:20">cpu_to_be64s</name><argument_list pos:start="487:21" pos:end="487:35">(<argument pos:start="487:22" pos:end="487:34"><expr pos:start="487:22" pos:end="487:34"><operator pos:start="487:22" pos:end="487:22">&amp;</operator><name pos:start="487:23" pos:end="487:34"><name pos:start="487:23" pos:end="487:31">new_table</name><index pos:start="487:32" pos:end="487:34">[<expr pos:start="487:33" pos:end="487:33"><name pos:start="487:33" pos:end="487:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="493:5" pos:end="493:62"><expr pos:start="493:5" pos:end="493:61"><call pos:start="493:5" pos:end="493:61"><name pos:start="493:5" pos:end="493:16">BLKDBG_EVENT</name><argument_list pos:start="493:17" pos:end="493:61">(<argument pos:start="493:18" pos:end="493:25"><expr pos:start="493:18" pos:end="493:25"><name pos:start="493:18" pos:end="493:25"><name pos:start="493:18" pos:end="493:19">bs</name><operator pos:start="493:20" pos:end="493:21">-&gt;</operator><name pos:start="493:22" pos:end="493:25">file</name></name></expr></argument>, <argument pos:start="493:28" pos:end="493:60"><expr pos:start="493:28" pos:end="493:60"><name pos:start="493:28" pos:end="493:60">BLKDBG_REFBLOCK_ALLOC_WRITE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="495:5" pos:end="497:39"><expr pos:start="495:5" pos:end="497:38"><name pos:start="495:5" pos:end="495:7">ret</name> <operator pos:start="495:9" pos:end="495:9">=</operator> <call pos:start="495:11" pos:end="497:38"><name pos:start="495:11" pos:end="495:26">bdrv_pwrite_sync</name><argument_list pos:start="495:27" pos:end="497:38">(<argument pos:start="495:28" pos:end="495:35"><expr pos:start="495:28" pos:end="495:35"><name pos:start="495:28" pos:end="495:35"><name pos:start="495:28" pos:end="495:29">bs</name><operator pos:start="495:30" pos:end="495:31">-&gt;</operator><name pos:start="495:32" pos:end="495:35">file</name></name></expr></argument>, <argument pos:start="495:38" pos:end="495:49"><expr pos:start="495:38" pos:end="495:49"><name pos:start="495:38" pos:end="495:49">table_offset</name></expr></argument>, <argument pos:start="495:52" pos:end="495:60"><expr pos:start="495:52" pos:end="495:60"><name pos:start="495:52" pos:end="495:60">new_table</name></expr></argument>,

        <argument pos:start="497:9" pos:end="497:37"><expr pos:start="497:9" pos:end="497:37"><name pos:start="497:9" pos:end="497:18">table_size</name> <operator pos:start="497:20" pos:end="497:20">*</operator> <sizeof pos:start="497:22" pos:end="497:37">sizeof<argument_list pos:start="497:28" pos:end="497:37">(<argument pos:start="497:29" pos:end="497:36"><expr pos:start="497:29" pos:end="497:36"><name pos:start="497:29" pos:end="497:36">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="499:5" pos:end="503:5"><if pos:start="499:5" pos:end="503:5">if <condition pos:start="499:8" pos:end="499:16">(<expr pos:start="499:9" pos:end="499:15"><name pos:start="499:9" pos:end="499:11">ret</name> <operator pos:start="499:13" pos:end="499:13">&lt;</operator> <literal type="number" pos:start="499:15" pos:end="499:15">0</literal></expr>)</condition> <block pos:start="499:18" pos:end="503:5">{<block_content pos:start="501:9" pos:end="501:24">

        <goto pos:start="501:9" pos:end="501:24">goto <name pos:start="501:14" pos:end="501:23">fail_table</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="507:5" pos:end="511:5">for<control pos:start="507:8" pos:end="507:35">(<init pos:start="507:9" pos:end="507:14"><expr pos:start="507:9" pos:end="507:13"><name pos:start="507:9" pos:end="507:9">i</name> <operator pos:start="507:11" pos:end="507:11">=</operator> <literal type="number" pos:start="507:13" pos:end="507:13">0</literal></expr>;</init> <condition pos:start="507:16" pos:end="507:30"><expr pos:start="507:16" pos:end="507:29"><name pos:start="507:16" pos:end="507:16">i</name> <operator pos:start="507:18" pos:end="507:18">&lt;</operator> <name pos:start="507:20" pos:end="507:29">table_size</name></expr>;</condition> <incr pos:start="507:32" pos:end="507:34"><expr pos:start="507:32" pos:end="507:34"><name pos:start="507:32" pos:end="507:32">i</name><operator pos:start="507:33" pos:end="507:34">++</operator></expr></incr>)</control> <block pos:start="507:37" pos:end="511:5">{<block_content pos:start="509:9" pos:end="509:36">

        <expr_stmt pos:start="509:9" pos:end="509:36"><expr pos:start="509:9" pos:end="509:35"><call pos:start="509:9" pos:end="509:35"><name pos:start="509:9" pos:end="509:20">be64_to_cpus</name><argument_list pos:start="509:21" pos:end="509:35">(<argument pos:start="509:22" pos:end="509:34"><expr pos:start="509:22" pos:end="509:34"><operator pos:start="509:22" pos:end="509:22">&amp;</operator><name pos:start="509:23" pos:end="509:34"><name pos:start="509:23" pos:end="509:31">new_table</name><index pos:start="509:32" pos:end="509:34">[<expr pos:start="509:33" pos:end="509:33"><name pos:start="509:33" pos:end="509:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="515:5" pos:end="515:60">/* Hook up the new refcount table in the qcow2 header */</comment>

    <decl_stmt pos:start="517:5" pos:end="517:21"><decl pos:start="517:5" pos:end="517:20"><type pos:start="517:5" pos:end="517:11"><name pos:start="517:5" pos:end="517:11">uint8_t</name></type> <name pos:start="517:13" pos:end="517:20"><name pos:start="517:13" pos:end="517:16">data</name><index pos:start="517:17" pos:end="517:20">[<expr pos:start="517:18" pos:end="517:19"><literal type="number" pos:start="517:18" pos:end="517:19">12</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt pos:start="519:5" pos:end="519:48"><expr pos:start="519:5" pos:end="519:47"><call pos:start="519:5" pos:end="519:47"><name pos:start="519:5" pos:end="519:16">cpu_to_be64w</name><argument_list pos:start="519:17" pos:end="519:47">(<argument pos:start="519:18" pos:end="519:32"><expr pos:start="519:18" pos:end="519:32"><operator pos:start="519:18" pos:end="519:18">(</operator><name pos:start="519:19" pos:end="519:26">uint64_t</name><operator pos:start="519:27" pos:end="519:27">*</operator><operator pos:start="519:28" pos:end="519:28">)</operator><name pos:start="519:29" pos:end="519:32">data</name></expr></argument>, <argument pos:start="519:35" pos:end="519:46"><expr pos:start="519:35" pos:end="519:46"><name pos:start="519:35" pos:end="519:46">table_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="521:5" pos:end="521:56"><expr pos:start="521:5" pos:end="521:55"><call pos:start="521:5" pos:end="521:55"><name pos:start="521:5" pos:end="521:16">cpu_to_be32w</name><argument_list pos:start="521:17" pos:end="521:55">(<argument pos:start="521:18" pos:end="521:38"><expr pos:start="521:18" pos:end="521:38"><operator pos:start="521:18" pos:end="521:18">(</operator><name pos:start="521:19" pos:end="521:26">uint32_t</name><operator pos:start="521:27" pos:end="521:27">*</operator><operator pos:start="521:28" pos:end="521:28">)</operator><operator pos:start="521:29" pos:end="521:29">(</operator><name pos:start="521:30" pos:end="521:33">data</name> <operator pos:start="521:35" pos:end="521:35">+</operator> <literal type="number" pos:start="521:37" pos:end="521:37">8</literal><operator pos:start="521:38" pos:end="521:38">)</operator></expr></argument>, <argument pos:start="521:41" pos:end="521:54"><expr pos:start="521:41" pos:end="521:54"><name pos:start="521:41" pos:end="521:54">table_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="523:5" pos:end="523:63"><expr pos:start="523:5" pos:end="523:62"><call pos:start="523:5" pos:end="523:62"><name pos:start="523:5" pos:end="523:16">BLKDBG_EVENT</name><argument_list pos:start="523:17" pos:end="523:62">(<argument pos:start="523:18" pos:end="523:25"><expr pos:start="523:18" pos:end="523:25"><name pos:start="523:18" pos:end="523:25"><name pos:start="523:18" pos:end="523:19">bs</name><operator pos:start="523:20" pos:end="523:21">-&gt;</operator><name pos:start="523:22" pos:end="523:25">file</name></name></expr></argument>, <argument pos:start="523:28" pos:end="523:61"><expr pos:start="523:28" pos:end="523:61"><name pos:start="523:28" pos:end="523:61">BLKDBG_REFBLOCK_ALLOC_SWITCH_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="525:5" pos:end="527:28"><expr pos:start="525:5" pos:end="527:27"><name pos:start="525:5" pos:end="525:7">ret</name> <operator pos:start="525:9" pos:end="525:9">=</operator> <call pos:start="525:11" pos:end="527:27"><name pos:start="525:11" pos:end="525:26">bdrv_pwrite_sync</name><argument_list pos:start="525:27" pos:end="527:27">(<argument pos:start="525:28" pos:end="525:35"><expr pos:start="525:28" pos:end="525:35"><name pos:start="525:28" pos:end="525:35"><name pos:start="525:28" pos:end="525:29">bs</name><operator pos:start="525:30" pos:end="525:31">-&gt;</operator><name pos:start="525:32" pos:end="525:35">file</name></name></expr></argument>, <argument pos:start="525:38" pos:end="525:80"><expr pos:start="525:38" pos:end="525:80"><call pos:start="525:38" pos:end="525:80"><name pos:start="525:38" pos:end="525:45">offsetof</name><argument_list pos:start="525:46" pos:end="525:80">(<argument pos:start="525:47" pos:end="525:56"><expr pos:start="525:47" pos:end="525:56"><name pos:start="525:47" pos:end="525:56">QCowHeader</name></expr></argument>, <argument pos:start="525:59" pos:end="525:79"><expr pos:start="525:59" pos:end="525:79"><name pos:start="525:59" pos:end="525:79">refcount_table_offset</name></expr></argument>)</argument_list></call></expr></argument>,

        <argument pos:start="527:9" pos:end="527:12"><expr pos:start="527:9" pos:end="527:12"><name pos:start="527:9" pos:end="527:12">data</name></expr></argument>, <argument pos:start="527:15" pos:end="527:26"><expr pos:start="527:15" pos:end="527:26"><sizeof pos:start="527:15" pos:end="527:26">sizeof<argument_list pos:start="527:21" pos:end="527:26">(<argument pos:start="527:22" pos:end="527:25"><expr pos:start="527:22" pos:end="527:25"><name pos:start="527:22" pos:end="527:25">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="529:5" pos:end="533:5"><if pos:start="529:5" pos:end="533:5">if <condition pos:start="529:8" pos:end="529:16">(<expr pos:start="529:9" pos:end="529:15"><name pos:start="529:9" pos:end="529:11">ret</name> <operator pos:start="529:13" pos:end="529:13">&lt;</operator> <literal type="number" pos:start="529:15" pos:end="529:15">0</literal></expr>)</condition> <block pos:start="529:18" pos:end="533:5">{<block_content pos:start="531:9" pos:end="531:24">

        <goto pos:start="531:9" pos:end="531:24">goto <name pos:start="531:14" pos:end="531:23">fail_table</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="537:5" pos:end="537:33">/* And switch it in memory */</comment>

    <decl_stmt pos:start="539:5" pos:end="539:57"><decl pos:start="539:5" pos:end="539:56"><type pos:start="539:5" pos:end="539:12"><name pos:start="539:5" pos:end="539:12">uint64_t</name></type> <name pos:start="539:14" pos:end="539:29">old_table_offset</name> <init pos:start="539:31" pos:end="539:56">= <expr pos:start="539:33" pos:end="539:56"><name pos:start="539:33" pos:end="539:56"><name pos:start="539:33" pos:end="539:33">s</name><operator pos:start="539:34" pos:end="539:35">-&gt;</operator><name pos:start="539:36" pos:end="539:56">refcount_table_offset</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="541:5" pos:end="541:53"><decl pos:start="541:5" pos:end="541:52"><type pos:start="541:5" pos:end="541:12"><name pos:start="541:5" pos:end="541:12">uint64_t</name></type> <name pos:start="541:14" pos:end="541:27">old_table_size</name> <init pos:start="541:29" pos:end="541:52">= <expr pos:start="541:31" pos:end="541:52"><name pos:start="541:31" pos:end="541:52"><name pos:start="541:31" pos:end="541:31">s</name><operator pos:start="541:32" pos:end="541:33">-&gt;</operator><name pos:start="541:34" pos:end="541:52">refcount_table_size</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="545:5" pos:end="545:30"><expr pos:start="545:5" pos:end="545:29"><call pos:start="545:5" pos:end="545:29"><name pos:start="545:5" pos:end="545:10">g_free</name><argument_list pos:start="545:11" pos:end="545:29">(<argument pos:start="545:12" pos:end="545:28"><expr pos:start="545:12" pos:end="545:28"><name pos:start="545:12" pos:end="545:28"><name pos:start="545:12" pos:end="545:12">s</name><operator pos:start="545:13" pos:end="545:14">-&gt;</operator><name pos:start="545:15" pos:end="545:28">refcount_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="547:5" pos:end="547:34"><expr pos:start="547:5" pos:end="547:33"><name pos:start="547:5" pos:end="547:21"><name pos:start="547:5" pos:end="547:5">s</name><operator pos:start="547:6" pos:end="547:7">-&gt;</operator><name pos:start="547:8" pos:end="547:21">refcount_table</name></name> <operator pos:start="547:23" pos:end="547:23">=</operator> <name pos:start="547:25" pos:end="547:33">new_table</name></expr>;</expr_stmt>

    <expr_stmt pos:start="549:5" pos:end="549:40"><expr pos:start="549:5" pos:end="549:39"><name pos:start="549:5" pos:end="549:26"><name pos:start="549:5" pos:end="549:5">s</name><operator pos:start="549:6" pos:end="549:7">-&gt;</operator><name pos:start="549:8" pos:end="549:26">refcount_table_size</name></name> <operator pos:start="549:28" pos:end="549:28">=</operator> <name pos:start="549:30" pos:end="549:39">table_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="551:5" pos:end="551:44"><expr pos:start="551:5" pos:end="551:43"><name pos:start="551:5" pos:end="551:28"><name pos:start="551:5" pos:end="551:5">s</name><operator pos:start="551:6" pos:end="551:7">-&gt;</operator><name pos:start="551:8" pos:end="551:28">refcount_table_offset</name></name> <operator pos:start="551:30" pos:end="551:30">=</operator> <name pos:start="551:32" pos:end="551:43">table_offset</name></expr>;</expr_stmt>



    <comment type="block" pos:start="555:5" pos:end="555:25">/* Free old table. */</comment>

    <expr_stmt pos:start="557:5" pos:end="559:45"><expr pos:start="557:5" pos:end="559:44"><call pos:start="557:5" pos:end="559:44"><name pos:start="557:5" pos:end="557:23">qcow2_free_clusters</name><argument_list pos:start="557:24" pos:end="559:44">(<argument pos:start="557:25" pos:end="557:26"><expr pos:start="557:25" pos:end="557:26"><name pos:start="557:25" pos:end="557:26">bs</name></expr></argument>, <argument pos:start="557:29" pos:end="557:44"><expr pos:start="557:29" pos:end="557:44"><name pos:start="557:29" pos:end="557:44">old_table_offset</name></expr></argument>, <argument pos:start="557:47" pos:end="557:79"><expr pos:start="557:47" pos:end="557:79"><name pos:start="557:47" pos:end="557:60">old_table_size</name> <operator pos:start="557:62" pos:end="557:62">*</operator> <sizeof pos:start="557:64" pos:end="557:79">sizeof<argument_list pos:start="557:70" pos:end="557:79">(<argument pos:start="557:71" pos:end="557:78"><expr pos:start="557:71" pos:end="557:78"><name pos:start="557:71" pos:end="557:78">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                        <argument pos:start="559:25" pos:end="559:43"><expr pos:start="559:25" pos:end="559:43"><name pos:start="559:25" pos:end="559:43">QCOW2_DISCARD_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="563:5" pos:end="563:61"><expr pos:start="563:5" pos:end="563:60"><name pos:start="563:5" pos:end="563:7">ret</name> <operator pos:start="563:9" pos:end="563:9">=</operator> <call pos:start="563:11" pos:end="563:60"><name pos:start="563:11" pos:end="563:29">load_refcount_block</name><argument_list pos:start="563:30" pos:end="563:60">(<argument pos:start="563:31" pos:end="563:32"><expr pos:start="563:31" pos:end="563:32"><name pos:start="563:31" pos:end="563:32">bs</name></expr></argument>, <argument pos:start="563:35" pos:end="563:43"><expr pos:start="563:35" pos:end="563:43"><name pos:start="563:35" pos:end="563:43">new_block</name></expr></argument>, <argument pos:start="563:46" pos:end="563:59"><expr pos:start="563:46" pos:end="563:59"><name pos:start="563:46" pos:end="563:59">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="565:5" pos:end="569:5"><if pos:start="565:5" pos:end="569:5">if <condition pos:start="565:8" pos:end="565:16">(<expr pos:start="565:9" pos:end="565:15"><name pos:start="565:9" pos:end="565:11">ret</name> <operator pos:start="565:13" pos:end="565:13">&lt;</operator> <literal type="number" pos:start="565:15" pos:end="565:15">0</literal></expr>)</condition> <block pos:start="565:18" pos:end="569:5">{<block_content pos:start="567:9" pos:end="567:19">

        <return pos:start="567:9" pos:end="567:19">return <expr pos:start="567:16" pos:end="567:18"><name pos:start="567:16" pos:end="567:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="573:5" pos:end="577:68">/* If we were trying to do the initial refcount update for some cluster

     * allocation, we might have used the same clusters to store newly

     * allocated metadata. Make the caller search some new space. */</comment>

    <return pos:start="579:5" pos:end="579:19">return <expr pos:start="579:12" pos:end="579:18"><operator pos:start="579:12" pos:end="579:12">-</operator><name pos:start="579:13" pos:end="579:18">EAGAIN</name></expr>;</return>



<label pos:start="583:1" pos:end="583:11"><name pos:start="583:1" pos:end="583:10">fail_table</name>:</label>

    <expr_stmt pos:start="585:5" pos:end="585:23"><expr pos:start="585:5" pos:end="585:22"><call pos:start="585:5" pos:end="585:22"><name pos:start="585:5" pos:end="585:10">g_free</name><argument_list pos:start="585:11" pos:end="585:22">(<argument pos:start="585:12" pos:end="585:21"><expr pos:start="585:12" pos:end="585:21"><name pos:start="585:12" pos:end="585:21">new_blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="587:5" pos:end="587:22"><expr pos:start="587:5" pos:end="587:21"><call pos:start="587:5" pos:end="587:21"><name pos:start="587:5" pos:end="587:10">g_free</name><argument_list pos:start="587:11" pos:end="587:21">(<argument pos:start="587:12" pos:end="587:20"><expr pos:start="587:12" pos:end="587:20"><name pos:start="587:12" pos:end="587:20">new_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="589:1" pos:end="589:11"><name pos:start="589:1" pos:end="589:10">fail_block</name>:</label>

    <if_stmt pos:start="591:5" pos:end="595:5"><if pos:start="591:5" pos:end="595:5">if <condition pos:start="591:8" pos:end="591:32">(<expr pos:start="591:9" pos:end="591:31"><operator pos:start="591:9" pos:end="591:9">*</operator><name pos:start="591:10" pos:end="591:23">refcount_block</name> <operator pos:start="591:25" pos:end="591:26">!=</operator> <name pos:start="591:28" pos:end="591:31">NULL</name></expr>)</condition> <block pos:start="591:34" pos:end="595:5">{<block_content pos:start="593:9" pos:end="593:69">

        <expr_stmt pos:start="593:9" pos:end="593:69"><expr pos:start="593:9" pos:end="593:68"><call pos:start="593:9" pos:end="593:68"><name pos:start="593:9" pos:end="593:23">qcow2_cache_put</name><argument_list pos:start="593:24" pos:end="593:68">(<argument pos:start="593:25" pos:end="593:26"><expr pos:start="593:25" pos:end="593:26"><name pos:start="593:25" pos:end="593:26">bs</name></expr></argument>, <argument pos:start="593:29" pos:end="593:51"><expr pos:start="593:29" pos:end="593:51"><name pos:start="593:29" pos:end="593:51"><name pos:start="593:29" pos:end="593:29">s</name><operator pos:start="593:30" pos:end="593:31">-&gt;</operator><name pos:start="593:32" pos:end="593:51">refcount_block_cache</name></name></expr></argument>, <argument pos:start="593:54" pos:end="593:67"><expr pos:start="593:54" pos:end="593:67"><name pos:start="593:54" pos:end="593:67">refcount_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="597:5" pos:end="597:15">return <expr pos:start="597:12" pos:end="597:14"><name pos:start="597:12" pos:end="597:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
