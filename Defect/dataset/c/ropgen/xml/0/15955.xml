<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15955.c" pos:tabs="8"><function pos:start="1:1" pos:end="679:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">gdb_handle_packet</name><parameter_list pos:start="1:29" pos:end="1:78">(<parameter pos:start="1:30" pos:end="1:40"><decl pos:start="1:30" pos:end="1:40"><type pos:start="1:30" pos:end="1:40"><name pos:start="1:30" pos:end="1:37">GDBState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:50">CPUState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">env</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:77"><decl pos:start="1:58" pos:end="1:77"><type pos:start="1:58" pos:end="1:77"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:67">char</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:77">line_buf</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="679:1">{<block_content pos:start="5:5" pos:end="677:19">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">ch</name></decl>, <decl pos:start="7:13" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:20">reg_size</name></decl>, <decl pos:start="7:23" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:26">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:31"><name pos:start="9:10" pos:end="9:12">buf</name><index pos:start="9:13" pos:end="9:31">[<expr pos:start="9:14" pos:end="9:30"><name pos:start="9:14" pos:end="9:30">MAX_PACKET_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:38"><name pos:start="11:13" pos:end="11:19">mem_buf</name><index pos:start="11:20" pos:end="11:38">[<expr pos:start="11:21" pos:end="11:37"><name pos:start="11:21" pos:end="11:37">MAX_PACKET_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:22">registers</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="20:0"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">target_ulong</name></type> <name pos:start="15:18" pos:end="15:21">addr</name></decl>, <decl pos:start="15:24" pos:end="15:26"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:24" pos:end="15:26">len</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="19:1" pos:end="19:16">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:16">DEBUG_GDB</name></cpp:ifdef>

    <expr_stmt pos:start="21:5" pos:end="24:0"><expr pos:start="21:5" pos:end="21:38"><call pos:start="21:5" pos:end="21:38"><name pos:start="21:5" pos:end="21:10">printf</name><argument_list pos:start="21:11" pos:end="21:38">(<argument pos:start="21:12" pos:end="21:27"><expr pos:start="21:12" pos:end="21:27"><literal type="string" pos:start="21:12" pos:end="21:27">"command='%s'\n"</literal></expr></argument>, <argument pos:start="21:30" pos:end="21:37"><expr pos:start="21:30" pos:end="21:37"><name pos:start="21:30" pos:end="21:37">line_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="25:5" pos:end="25:17"><expr pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:5">p</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <name pos:start="25:9" pos:end="25:16">line_buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:14"><expr pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:6">ch</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <operator pos:start="27:10" pos:end="27:10">*</operator><name pos:start="27:11" pos:end="27:11">p</name><operator pos:start="27:12" pos:end="27:13">++</operator></expr>;</expr_stmt>

    <switch pos:start="29:5" pos:end="675:5">switch<condition pos:start="29:11" pos:end="29:14">(<expr pos:start="29:12" pos:end="29:13"><name pos:start="29:12" pos:end="29:13">ch</name></expr>)</condition> <block pos:start="29:16" pos:end="675:5">{<block_content pos:start="31:5" pos:end="673:14">

    <case pos:start="31:5" pos:end="31:13">case <expr pos:start="31:10" pos:end="31:12"><literal type="char" pos:start="31:10" pos:end="31:12">'?'</literal></expr>:</case>

        <comment type="block" pos:start="33:9" pos:end="33:70">/* TODO: Make this return the correct value for user-mode.  */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:53"><expr pos:start="35:9" pos:end="35:52"><call pos:start="35:9" pos:end="35:52"><name pos:start="35:9" pos:end="35:16">snprintf</name><argument_list pos:start="35:17" pos:end="35:52">(<argument pos:start="35:18" pos:end="35:20"><expr pos:start="35:18" pos:end="35:20"><name pos:start="35:18" pos:end="35:20">buf</name></expr></argument>, <argument pos:start="35:23" pos:end="35:33"><expr pos:start="35:23" pos:end="35:33"><sizeof pos:start="35:23" pos:end="35:33">sizeof<argument_list pos:start="35:29" pos:end="35:33">(<argument pos:start="35:30" pos:end="35:32"><expr pos:start="35:30" pos:end="35:32"><name pos:start="35:30" pos:end="35:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="35:36" pos:end="35:42"><expr pos:start="35:36" pos:end="35:42"><literal type="string" pos:start="35:36" pos:end="35:42">"S%02x"</literal></expr></argument>, <argument pos:start="35:45" pos:end="35:51"><expr pos:start="35:45" pos:end="35:51"><name pos:start="35:45" pos:end="35:51">SIGTRAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:27"><expr pos:start="37:9" pos:end="37:26"><call pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:18">put_packet</name><argument_list pos:start="37:19" pos:end="37:26">(<argument pos:start="37:20" pos:end="37:20"><expr pos:start="37:20" pos:end="37:20"><name pos:start="37:20" pos:end="37:20">s</name></expr></argument>, <argument pos:start="37:23" pos:end="37:25"><expr pos:start="37:23" pos:end="37:25"><name pos:start="37:23" pos:end="37:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="39:9" pos:end="45:11">/* Remove all the breakpoints when this query is issued,

         * because gdb is doing and initial connect and the state

         * should be cleaned up.

         */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:39"><expr pos:start="47:9" pos:end="47:38"><call pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:33">cpu_breakpoint_remove_all</name><argument_list pos:start="47:34" pos:end="47:38">(<argument pos:start="47:35" pos:end="47:37"><expr pos:start="47:35" pos:end="47:37"><name pos:start="47:35" pos:end="47:37">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><call pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:33">cpu_watchpoint_remove_all</name><argument_list pos:start="49:34" pos:end="49:38">(<argument pos:start="49:35" pos:end="49:37"><expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:37">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:13">case <expr pos:start="53:10" pos:end="53:12"><literal type="char" pos:start="53:10" pos:end="53:12">'c'</literal></expr>:</case>

        <if_stmt pos:start="55:9" pos:end="91:9"><if pos:start="55:9" pos:end="91:9">if <condition pos:start="55:12" pos:end="55:23">(<expr pos:start="55:13" pos:end="55:22"><operator pos:start="55:13" pos:end="55:13">*</operator><name pos:start="55:14" pos:end="55:14">p</name> <operator pos:start="55:16" pos:end="55:17">!=</operator> <literal type="char" pos:start="55:19" pos:end="55:22">'\0'</literal></expr>)</condition> <block pos:start="55:25" pos:end="91:9">{<block_content pos:start="57:13" pos:end="90:0">

            <expr_stmt pos:start="57:13" pos:end="60:0"><expr pos:start="57:13" pos:end="57:47"><name pos:start="57:13" pos:end="57:16">addr</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="57:47"><name pos:start="57:20" pos:end="57:27">strtoull</name><argument_list pos:start="57:28" pos:end="57:47">(<argument pos:start="57:29" pos:end="57:29"><expr pos:start="57:29" pos:end="57:29"><name pos:start="57:29" pos:end="57:29">p</name></expr></argument>, <argument pos:start="57:32" pos:end="57:42"><expr pos:start="57:32" pos:end="57:42"><operator pos:start="57:32" pos:end="57:32">(</operator><name pos:start="57:33" pos:end="57:36">char</name> <operator pos:start="57:38" pos:end="57:38">*</operator><operator pos:start="57:39" pos:end="57:39">*</operator><operator pos:start="57:40" pos:end="57:40">)</operator><operator pos:start="57:41" pos:end="57:41">&amp;</operator><name pos:start="57:42" pos:end="57:42">p</name></expr></argument>, <argument pos:start="57:45" pos:end="57:46"><expr pos:start="57:45" pos:end="57:46"><literal type="number" pos:start="57:45" pos:end="57:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="59:1" pos:end="59:24">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:24"><call pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:11">defined</name><argument_list pos:start="59:12" pos:end="59:24">(<argument pos:start="59:13" pos:end="59:23"><expr pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="61:13" pos:end="64:0"><expr pos:start="61:13" pos:end="61:27"><name pos:start="61:13" pos:end="61:20"><name pos:start="61:13" pos:end="61:15">env</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:20">eip</name></name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:27">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="63:1" pos:end="63:26">#<cpp:directive pos:start="63:2" pos:end="63:5">elif</cpp:directive> <expr pos:start="63:7" pos:end="63:26"><call pos:start="63:7" pos:end="63:26"><name pos:start="63:7" pos:end="63:13">defined</name> <argument_list pos:start="63:15" pos:end="63:26">(<argument pos:start="63:16" pos:end="63:25"><expr pos:start="63:16" pos:end="63:25"><name pos:start="63:16" pos:end="63:25">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="65:13" pos:end="68:0"><expr pos:start="65:13" pos:end="65:27"><name pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:15">env</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:20">nip</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:27">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="67:1" pos:end="67:28">#<cpp:directive pos:start="67:2" pos:end="67:5">elif</cpp:directive> <expr pos:start="67:7" pos:end="67:28"><call pos:start="67:7" pos:end="67:28"><name pos:start="67:7" pos:end="67:13">defined</name> <argument_list pos:start="67:15" pos:end="67:28">(<argument pos:start="67:16" pos:end="67:27"><expr pos:start="67:16" pos:end="67:27"><name pos:start="67:16" pos:end="67:27">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:15">env</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:19">pc</name></name> <operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:26">addr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="74:0"><expr pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:15">env</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:20">npc</name></name> <operator pos:start="71:22" pos:end="71:22">=</operator> <name pos:start="71:24" pos:end="71:27">addr</name> <operator pos:start="71:29" pos:end="71:29">+</operator> <literal type="number" pos:start="71:31" pos:end="71:31">4</literal></expr>;</expr_stmt>

<cpp:elif pos:start="73:1" pos:end="73:26">#<cpp:directive pos:start="73:2" pos:end="73:5">elif</cpp:directive> <expr pos:start="73:7" pos:end="73:26"><call pos:start="73:7" pos:end="73:26"><name pos:start="73:7" pos:end="73:13">defined</name> <argument_list pos:start="73:15" pos:end="73:26">(<argument pos:start="73:16" pos:end="73:25"><expr pos:start="73:16" pos:end="73:25"><name pos:start="73:16" pos:end="73:25">TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="75:13" pos:end="78:0"><expr pos:start="75:13" pos:end="75:32"><name pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:15">env</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:21">regs</name><index pos:start="75:22" pos:end="75:25">[<expr pos:start="75:23" pos:end="75:24"><literal type="number" pos:start="75:23" pos:end="75:24">15</literal></expr>]</index></name> <operator pos:start="75:27" pos:end="75:27">=</operator> <name pos:start="75:29" pos:end="75:32">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="77:1" pos:end="77:26">#<cpp:directive pos:start="77:2" pos:end="77:5">elif</cpp:directive> <expr pos:start="77:7" pos:end="77:26"><call pos:start="77:7" pos:end="77:26"><name pos:start="77:7" pos:end="77:13">defined</name> <argument_list pos:start="77:15" pos:end="77:26">(<argument pos:start="77:16" pos:end="77:25"><expr pos:start="77:16" pos:end="77:25"><name pos:start="77:16" pos:end="77:25">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="79:13" pos:end="82:0"><expr pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:15">env</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:19">pc</name></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <name pos:start="79:23" pos:end="79:26">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="81:1" pos:end="81:27">#<cpp:directive pos:start="81:2" pos:end="81:5">elif</cpp:directive> <expr pos:start="81:7" pos:end="81:27"><call pos:start="81:7" pos:end="81:27"><name pos:start="81:7" pos:end="81:13">defined</name> <argument_list pos:start="81:15" pos:end="81:27">(<argument pos:start="81:16" pos:end="81:26"><expr pos:start="81:16" pos:end="81:26"><name pos:start="81:16" pos:end="81:26">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="83:13" pos:end="86:0"><expr pos:start="83:13" pos:end="83:36"><name pos:start="83:13" pos:end="83:29"><name pos:start="83:13" pos:end="83:15">env</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:26">active_tc</name><operator pos:start="83:27" pos:end="83:27">.</operator><name pos:start="83:28" pos:end="83:29">PC</name></name> <operator pos:start="83:31" pos:end="83:31">=</operator> <name pos:start="83:33" pos:end="83:36">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="85:1" pos:end="85:27">#<cpp:directive pos:start="85:2" pos:end="85:5">elif</cpp:directive> <expr pos:start="85:7" pos:end="85:27"><call pos:start="85:7" pos:end="85:27"><name pos:start="85:7" pos:end="85:13">defined</name> <argument_list pos:start="85:15" pos:end="85:27">(<argument pos:start="85:16" pos:end="85:26"><expr pos:start="85:16" pos:end="85:26"><name pos:start="85:16" pos:end="85:26">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="87:13" pos:end="90:0"><expr pos:start="87:13" pos:end="87:26"><name pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:15">env</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:19">pc</name></name> <operator pos:start="87:21" pos:end="87:21">=</operator> <name pos:start="87:23" pos:end="87:26">addr</name></expr>;</expr_stmt>

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:24"><expr pos:start="93:9" pos:end="93:23"><call pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:20">gdb_continue</name><argument_list pos:start="93:21" pos:end="93:23">(<argument pos:start="93:22" pos:end="93:22"><expr pos:start="93:22" pos:end="93:22"><name pos:start="93:22" pos:end="93:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="95:9" pos:end="95:23">return <expr pos:start="95:16" pos:end="95:22"><name pos:start="95:16" pos:end="95:22">RS_IDLE</name></expr>;</return>

    <case pos:start="97:5" pos:end="97:13">case <expr pos:start="97:10" pos:end="97:12"><literal type="char" pos:start="97:10" pos:end="97:12">'C'</literal></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="99:48"><expr pos:start="99:9" pos:end="99:47"><name pos:start="99:9" pos:end="99:17"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:17">signal</name></name> <operator pos:start="99:19" pos:end="99:19">=</operator> <call pos:start="99:21" pos:end="99:47"><name pos:start="99:21" pos:end="99:27">strtoul</name><argument_list pos:start="99:28" pos:end="99:47">(<argument pos:start="99:29" pos:end="99:29"><expr pos:start="99:29" pos:end="99:29"><name pos:start="99:29" pos:end="99:29">p</name></expr></argument>, <argument pos:start="99:32" pos:end="99:42"><expr pos:start="99:32" pos:end="99:42"><operator pos:start="99:32" pos:end="99:32">(</operator><name pos:start="99:33" pos:end="99:36">char</name> <operator pos:start="99:38" pos:end="99:38">*</operator><operator pos:start="99:39" pos:end="99:39">*</operator><operator pos:start="99:40" pos:end="99:40">)</operator><operator pos:start="99:41" pos:end="99:41">&amp;</operator><name pos:start="99:42" pos:end="99:42">p</name></expr></argument>, <argument pos:start="99:45" pos:end="99:46"><expr pos:start="99:45" pos:end="99:46"><literal type="number" pos:start="99:45" pos:end="99:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:24"><expr pos:start="101:9" pos:end="101:23"><call pos:start="101:9" pos:end="101:23"><name pos:start="101:9" pos:end="101:20">gdb_continue</name><argument_list pos:start="101:21" pos:end="101:23">(<argument pos:start="101:22" pos:end="101:22"><expr pos:start="101:22" pos:end="101:22"><name pos:start="101:22" pos:end="101:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:23">return <expr pos:start="103:16" pos:end="103:22"><name pos:start="103:16" pos:end="103:22">RS_IDLE</name></expr>;</return>

    <case pos:start="105:5" pos:end="105:13">case <expr pos:start="105:10" pos:end="105:12"><literal type="char" pos:start="105:10" pos:end="105:12">'k'</literal></expr>:</case>

        <comment type="block" pos:start="107:9" pos:end="107:29">/* Kill the target */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:60"><expr pos:start="109:9" pos:end="109:59"><call pos:start="109:9" pos:end="109:59"><name pos:start="109:9" pos:end="109:15">fprintf</name><argument_list pos:start="109:16" pos:end="109:59">(<argument pos:start="109:17" pos:end="109:22"><expr pos:start="109:17" pos:end="109:22"><name pos:start="109:17" pos:end="109:22">stderr</name></expr></argument>, <argument pos:start="109:25" pos:end="109:58"><expr pos:start="109:25" pos:end="109:58"><literal type="string" pos:start="109:25" pos:end="109:58">"\nQEMU: Terminated via GDBstub\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:16"><expr pos:start="111:9" pos:end="111:15"><call pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:12">exit</name><argument_list pos:start="111:13" pos:end="111:15">(<argument pos:start="111:14" pos:end="111:14"><expr pos:start="111:14" pos:end="111:14"><literal type="number" pos:start="111:14" pos:end="111:14">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <case pos:start="113:5" pos:end="113:13">case <expr pos:start="113:10" pos:end="113:12"><literal type="char" pos:start="113:10" pos:end="113:12">'D'</literal></expr>:</case>

        <comment type="block" pos:start="115:9" pos:end="115:27">/* Detach packet */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:39"><expr pos:start="117:9" pos:end="117:38"><call pos:start="117:9" pos:end="117:38"><name pos:start="117:9" pos:end="117:33">cpu_breakpoint_remove_all</name><argument_list pos:start="117:34" pos:end="117:38">(<argument pos:start="117:35" pos:end="117:37"><expr pos:start="117:35" pos:end="117:37"><name pos:start="117:35" pos:end="117:37">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:39"><expr pos:start="119:9" pos:end="119:38"><call pos:start="119:9" pos:end="119:38"><name pos:start="119:9" pos:end="119:33">cpu_watchpoint_remove_all</name><argument_list pos:start="119:34" pos:end="119:38">(<argument pos:start="119:35" pos:end="119:37"><expr pos:start="119:35" pos:end="119:37"><name pos:start="119:35" pos:end="119:37">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:24"><expr pos:start="121:9" pos:end="121:23"><call pos:start="121:9" pos:end="121:23"><name pos:start="121:9" pos:end="121:20">gdb_continue</name><argument_list pos:start="121:21" pos:end="121:23">(<argument pos:start="121:22" pos:end="121:22"><expr pos:start="121:22" pos:end="121:22"><name pos:start="121:22" pos:end="121:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:28"><expr pos:start="123:9" pos:end="123:27"><call pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:18">put_packet</name><argument_list pos:start="123:19" pos:end="123:27">(<argument pos:start="123:20" pos:end="123:20"><expr pos:start="123:20" pos:end="123:20"><name pos:start="123:20" pos:end="123:20">s</name></expr></argument>, <argument pos:start="123:23" pos:end="123:26"><expr pos:start="123:23" pos:end="123:26"><literal type="string" pos:start="123:23" pos:end="123:26">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:13">case <expr pos:start="127:10" pos:end="127:12"><literal type="char" pos:start="127:10" pos:end="127:12">'s'</literal></expr>:</case>

        <if_stmt pos:start="129:9" pos:end="165:9"><if pos:start="129:9" pos:end="165:9">if <condition pos:start="129:12" pos:end="129:23">(<expr pos:start="129:13" pos:end="129:22"><operator pos:start="129:13" pos:end="129:13">*</operator><name pos:start="129:14" pos:end="129:14">p</name> <operator pos:start="129:16" pos:end="129:17">!=</operator> <literal type="char" pos:start="129:19" pos:end="129:22">'\0'</literal></expr>)</condition> <block pos:start="129:25" pos:end="165:9">{<block_content pos:start="131:13" pos:end="164:0">

            <expr_stmt pos:start="131:13" pos:end="134:0"><expr pos:start="131:13" pos:end="131:47"><name pos:start="131:13" pos:end="131:16">addr</name> <operator pos:start="131:18" pos:end="131:18">=</operator> <call pos:start="131:20" pos:end="131:47"><name pos:start="131:20" pos:end="131:27">strtoull</name><argument_list pos:start="131:28" pos:end="131:47">(<argument pos:start="131:29" pos:end="131:29"><expr pos:start="131:29" pos:end="131:29"><name pos:start="131:29" pos:end="131:29">p</name></expr></argument>, <argument pos:start="131:32" pos:end="131:42"><expr pos:start="131:32" pos:end="131:42"><operator pos:start="131:32" pos:end="131:32">(</operator><name pos:start="131:33" pos:end="131:36">char</name> <operator pos:start="131:38" pos:end="131:38">*</operator><operator pos:start="131:39" pos:end="131:39">*</operator><operator pos:start="131:40" pos:end="131:40">)</operator><operator pos:start="131:41" pos:end="131:41">&amp;</operator><name pos:start="131:42" pos:end="131:42">p</name></expr></argument>, <argument pos:start="131:45" pos:end="131:46"><expr pos:start="131:45" pos:end="131:46"><literal type="number" pos:start="131:45" pos:end="131:46">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="133:1" pos:end="133:24">#<cpp:directive pos:start="133:2" pos:end="133:3">if</cpp:directive> <expr pos:start="133:5" pos:end="133:24"><call pos:start="133:5" pos:end="133:24"><name pos:start="133:5" pos:end="133:11">defined</name><argument_list pos:start="133:12" pos:end="133:24">(<argument pos:start="133:13" pos:end="133:23"><expr pos:start="133:13" pos:end="133:23"><name pos:start="133:13" pos:end="133:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <expr_stmt pos:start="135:13" pos:end="138:0"><expr pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:20"><name pos:start="135:13" pos:end="135:15">env</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:20">eip</name></name> <operator pos:start="135:22" pos:end="135:22">=</operator> <name pos:start="135:24" pos:end="135:27">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="137:1" pos:end="137:26">#<cpp:directive pos:start="137:2" pos:end="137:5">elif</cpp:directive> <expr pos:start="137:7" pos:end="137:26"><call pos:start="137:7" pos:end="137:26"><name pos:start="137:7" pos:end="137:13">defined</name> <argument_list pos:start="137:15" pos:end="137:26">(<argument pos:start="137:16" pos:end="137:25"><expr pos:start="137:16" pos:end="137:25"><name pos:start="137:16" pos:end="137:25">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="139:13" pos:end="142:0"><expr pos:start="139:13" pos:end="139:27"><name pos:start="139:13" pos:end="139:20"><name pos:start="139:13" pos:end="139:15">env</name><operator pos:start="139:16" pos:end="139:17">-&gt;</operator><name pos:start="139:18" pos:end="139:20">nip</name></name> <operator pos:start="139:22" pos:end="139:22">=</operator> <name pos:start="139:24" pos:end="139:27">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="141:1" pos:end="141:28">#<cpp:directive pos:start="141:2" pos:end="141:5">elif</cpp:directive> <expr pos:start="141:7" pos:end="141:28"><call pos:start="141:7" pos:end="141:28"><name pos:start="141:7" pos:end="141:13">defined</name> <argument_list pos:start="141:15" pos:end="141:28">(<argument pos:start="141:16" pos:end="141:27"><expr pos:start="141:16" pos:end="141:27"><name pos:start="141:16" pos:end="141:27">TARGET_SPARC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="143:13" pos:end="143:27"><expr pos:start="143:13" pos:end="143:26"><name pos:start="143:13" pos:end="143:19"><name pos:start="143:13" pos:end="143:15">env</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:19">pc</name></name> <operator pos:start="143:21" pos:end="143:21">=</operator> <name pos:start="143:23" pos:end="143:26">addr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="148:0"><expr pos:start="145:13" pos:end="145:31"><name pos:start="145:13" pos:end="145:20"><name pos:start="145:13" pos:end="145:15">env</name><operator pos:start="145:16" pos:end="145:17">-&gt;</operator><name pos:start="145:18" pos:end="145:20">npc</name></name> <operator pos:start="145:22" pos:end="145:22">=</operator> <name pos:start="145:24" pos:end="145:27">addr</name> <operator pos:start="145:29" pos:end="145:29">+</operator> <literal type="number" pos:start="145:31" pos:end="145:31">4</literal></expr>;</expr_stmt>

<cpp:elif pos:start="147:1" pos:end="147:26">#<cpp:directive pos:start="147:2" pos:end="147:5">elif</cpp:directive> <expr pos:start="147:7" pos:end="147:26"><call pos:start="147:7" pos:end="147:26"><name pos:start="147:7" pos:end="147:13">defined</name> <argument_list pos:start="147:15" pos:end="147:26">(<argument pos:start="147:16" pos:end="147:25"><expr pos:start="147:16" pos:end="147:25"><name pos:start="147:16" pos:end="147:25">TARGET_ARM</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="149:13" pos:end="152:0"><expr pos:start="149:13" pos:end="149:32"><name pos:start="149:13" pos:end="149:25"><name pos:start="149:13" pos:end="149:15">env</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:21">regs</name><index pos:start="149:22" pos:end="149:25">[<expr pos:start="149:23" pos:end="149:24"><literal type="number" pos:start="149:23" pos:end="149:24">15</literal></expr>]</index></name> <operator pos:start="149:27" pos:end="149:27">=</operator> <name pos:start="149:29" pos:end="149:32">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="151:1" pos:end="151:26">#<cpp:directive pos:start="151:2" pos:end="151:5">elif</cpp:directive> <expr pos:start="151:7" pos:end="151:26"><call pos:start="151:7" pos:end="151:26"><name pos:start="151:7" pos:end="151:13">defined</name> <argument_list pos:start="151:15" pos:end="151:26">(<argument pos:start="151:16" pos:end="151:25"><expr pos:start="151:16" pos:end="151:25"><name pos:start="151:16" pos:end="151:25">TARGET_SH4</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="153:13" pos:end="156:0"><expr pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:19"><name pos:start="153:13" pos:end="153:15">env</name><operator pos:start="153:16" pos:end="153:17">-&gt;</operator><name pos:start="153:18" pos:end="153:19">pc</name></name> <operator pos:start="153:21" pos:end="153:21">=</operator> <name pos:start="153:23" pos:end="153:26">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="155:1" pos:end="155:27">#<cpp:directive pos:start="155:2" pos:end="155:5">elif</cpp:directive> <expr pos:start="155:7" pos:end="155:27"><call pos:start="155:7" pos:end="155:27"><name pos:start="155:7" pos:end="155:13">defined</name> <argument_list pos:start="155:15" pos:end="155:27">(<argument pos:start="155:16" pos:end="155:26"><expr pos:start="155:16" pos:end="155:26"><name pos:start="155:16" pos:end="155:26">TARGET_MIPS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="157:13" pos:end="160:0"><expr pos:start="157:13" pos:end="157:36"><name pos:start="157:13" pos:end="157:29"><name pos:start="157:13" pos:end="157:15">env</name><operator pos:start="157:16" pos:end="157:17">-&gt;</operator><name pos:start="157:18" pos:end="157:26">active_tc</name><operator pos:start="157:27" pos:end="157:27">.</operator><name pos:start="157:28" pos:end="157:29">PC</name></name> <operator pos:start="157:31" pos:end="157:31">=</operator> <name pos:start="157:33" pos:end="157:36">addr</name></expr>;</expr_stmt>

<cpp:elif pos:start="159:1" pos:end="159:27">#<cpp:directive pos:start="159:2" pos:end="159:5">elif</cpp:directive> <expr pos:start="159:7" pos:end="159:27"><call pos:start="159:7" pos:end="159:27"><name pos:start="159:7" pos:end="159:13">defined</name> <argument_list pos:start="159:15" pos:end="159:27">(<argument pos:start="159:16" pos:end="159:26"><expr pos:start="159:16" pos:end="159:26"><name pos:start="159:16" pos:end="159:26">TARGET_CRIS</name></expr></argument>)</argument_list></call></expr></cpp:elif>

            <expr_stmt pos:start="161:13" pos:end="164:0"><expr pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:19"><name pos:start="161:13" pos:end="161:15">env</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:19">pc</name></name> <operator pos:start="161:21" pos:end="161:21">=</operator> <name pos:start="161:23" pos:end="161:26">addr</name></expr>;</expr_stmt>

<cpp:endif pos:start="163:1" pos:end="163:6">#<cpp:directive pos:start="163:2" pos:end="163:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:42"><expr pos:start="167:9" pos:end="167:41"><call pos:start="167:9" pos:end="167:41"><name pos:start="167:9" pos:end="167:23">cpu_single_step</name><argument_list pos:start="167:24" pos:end="167:41">(<argument pos:start="167:25" pos:end="167:27"><expr pos:start="167:25" pos:end="167:27"><name pos:start="167:25" pos:end="167:27">env</name></expr></argument>, <argument pos:start="167:30" pos:end="167:40"><expr pos:start="167:30" pos:end="167:40"><name pos:start="167:30" pos:end="167:40">sstep_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:24"><expr pos:start="169:9" pos:end="169:23"><call pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:20">gdb_continue</name><argument_list pos:start="169:21" pos:end="169:23">(<argument pos:start="169:22" pos:end="169:22"><expr pos:start="169:22" pos:end="169:22"><name pos:start="169:22" pos:end="169:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="171:9" pos:end="171:23">return <expr pos:start="171:16" pos:end="171:22"><name pos:start="171:16" pos:end="171:22">RS_IDLE</name></expr>;</return>

    <case pos:start="173:5" pos:end="173:13">case <expr pos:start="173:10" pos:end="173:12"><literal type="char" pos:start="173:10" pos:end="173:12">'F'</literal></expr>:</case>

        <block pos:start="175:9" pos:end="217:9">{<block_content pos:start="177:13" pos:end="215:13">

            <decl_stmt pos:start="177:13" pos:end="177:29"><decl pos:start="177:13" pos:end="177:28"><type pos:start="177:13" pos:end="177:24"><name pos:start="177:13" pos:end="177:24">target_ulong</name></type> <name pos:start="177:26" pos:end="177:28">ret</name></decl>;</decl_stmt>

            <decl_stmt pos:start="179:13" pos:end="179:29"><decl pos:start="179:13" pos:end="179:28"><type pos:start="179:13" pos:end="179:24"><name pos:start="179:13" pos:end="179:24">target_ulong</name></type> <name pos:start="179:26" pos:end="179:28">err</name></decl>;</decl_stmt>



            <expr_stmt pos:start="183:13" pos:end="183:47"><expr pos:start="183:13" pos:end="183:46"><name pos:start="183:13" pos:end="183:15">ret</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <call pos:start="183:19" pos:end="183:46"><name pos:start="183:19" pos:end="183:26">strtoull</name><argument_list pos:start="183:27" pos:end="183:46">(<argument pos:start="183:28" pos:end="183:28"><expr pos:start="183:28" pos:end="183:28"><name pos:start="183:28" pos:end="183:28">p</name></expr></argument>, <argument pos:start="183:31" pos:end="183:41"><expr pos:start="183:31" pos:end="183:41"><operator pos:start="183:31" pos:end="183:31">(</operator><name pos:start="183:32" pos:end="183:35">char</name> <operator pos:start="183:37" pos:end="183:37">*</operator><operator pos:start="183:38" pos:end="183:38">*</operator><operator pos:start="183:39" pos:end="183:39">)</operator><operator pos:start="183:40" pos:end="183:40">&amp;</operator><name pos:start="183:41" pos:end="183:41">p</name></expr></argument>, <argument pos:start="183:44" pos:end="183:45"><expr pos:start="183:44" pos:end="183:45"><literal type="number" pos:start="183:44" pos:end="183:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="185:13" pos:end="195:13"><if pos:start="185:13" pos:end="191:13">if <condition pos:start="185:16" pos:end="185:26">(<expr pos:start="185:17" pos:end="185:25"><operator pos:start="185:17" pos:end="185:17">*</operator><name pos:start="185:18" pos:end="185:18">p</name> <operator pos:start="185:20" pos:end="185:21">==</operator> <literal type="char" pos:start="185:23" pos:end="185:25">','</literal></expr>)</condition> <block pos:start="185:28" pos:end="191:13">{<block_content pos:start="187:17" pos:end="189:51">

                <expr_stmt pos:start="187:17" pos:end="187:20"><expr pos:start="187:17" pos:end="187:19"><name pos:start="187:17" pos:end="187:17">p</name><operator pos:start="187:18" pos:end="187:19">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="189:17" pos:end="189:51"><expr pos:start="189:17" pos:end="189:50"><name pos:start="189:17" pos:end="189:19">err</name> <operator pos:start="189:21" pos:end="189:21">=</operator> <call pos:start="189:23" pos:end="189:50"><name pos:start="189:23" pos:end="189:30">strtoull</name><argument_list pos:start="189:31" pos:end="189:50">(<argument pos:start="189:32" pos:end="189:32"><expr pos:start="189:32" pos:end="189:32"><name pos:start="189:32" pos:end="189:32">p</name></expr></argument>, <argument pos:start="189:35" pos:end="189:45"><expr pos:start="189:35" pos:end="189:45"><operator pos:start="189:35" pos:end="189:35">(</operator><name pos:start="189:36" pos:end="189:39">char</name> <operator pos:start="189:41" pos:end="189:41">*</operator><operator pos:start="189:42" pos:end="189:42">*</operator><operator pos:start="189:43" pos:end="189:43">)</operator><operator pos:start="189:44" pos:end="189:44">&amp;</operator><name pos:start="189:45" pos:end="189:45">p</name></expr></argument>, <argument pos:start="189:48" pos:end="189:49"><expr pos:start="189:48" pos:end="189:49"><literal type="number" pos:start="189:48" pos:end="189:49">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="191:15" pos:end="195:13">else <block pos:start="191:20" pos:end="195:13">{<block_content pos:start="193:17" pos:end="193:24">

                <expr_stmt pos:start="193:17" pos:end="193:24"><expr pos:start="193:17" pos:end="193:23"><name pos:start="193:17" pos:end="193:19">err</name> <operator pos:start="193:21" pos:end="193:21">=</operator> <literal type="number" pos:start="193:23" pos:end="193:23">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="197:13" pos:end="199:20"><if pos:start="197:13" pos:end="199:20">if <condition pos:start="197:16" pos:end="197:26">(<expr pos:start="197:17" pos:end="197:25"><operator pos:start="197:17" pos:end="197:17">*</operator><name pos:start="197:18" pos:end="197:18">p</name> <operator pos:start="197:20" pos:end="197:21">==</operator> <literal type="char" pos:start="197:23" pos:end="197:25">','</literal></expr>)</condition><block type="pseudo" pos:start="199:17" pos:end="199:20"><block_content pos:start="199:17" pos:end="199:20">

                <expr_stmt pos:start="199:17" pos:end="199:20"><expr pos:start="199:17" pos:end="199:19"><name pos:start="199:17" pos:end="199:17">p</name><operator pos:start="199:18" pos:end="199:19">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:22"><expr pos:start="201:13" pos:end="201:21"><name pos:start="201:13" pos:end="201:16">type</name> <operator pos:start="201:18" pos:end="201:18">=</operator> <operator pos:start="201:20" pos:end="201:20">*</operator><name pos:start="201:21" pos:end="201:21">p</name></expr>;</expr_stmt>

            <if_stmt pos:start="203:13" pos:end="205:57"><if pos:start="203:13" pos:end="205:57">if <condition pos:start="203:16" pos:end="203:39">(<expr pos:start="203:17" pos:end="203:38"><name pos:start="203:17" pos:end="203:38">gdb_current_syscall_cb</name></expr>)</condition><block type="pseudo" pos:start="205:17" pos:end="205:57"><block_content pos:start="205:17" pos:end="205:57">

                <expr_stmt pos:start="205:17" pos:end="205:57"><expr pos:start="205:17" pos:end="205:56"><call pos:start="205:17" pos:end="205:56"><name pos:start="205:17" pos:end="205:38">gdb_current_syscall_cb</name><argument_list pos:start="205:39" pos:end="205:56">(<argument pos:start="205:40" pos:end="205:45"><expr pos:start="205:40" pos:end="205:45"><name pos:start="205:40" pos:end="205:45"><name pos:start="205:40" pos:end="205:40">s</name><operator pos:start="205:41" pos:end="205:42">-&gt;</operator><name pos:start="205:43" pos:end="205:45">env</name></name></expr></argument>, <argument pos:start="205:48" pos:end="205:50"><expr pos:start="205:48" pos:end="205:50"><name pos:start="205:48" pos:end="205:50">ret</name></expr></argument>, <argument pos:start="205:53" pos:end="205:55"><expr pos:start="205:53" pos:end="205:55"><name pos:start="205:53" pos:end="205:55">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="207:13" pos:end="215:13"><if pos:start="207:13" pos:end="211:13">if <condition pos:start="207:16" pos:end="207:28">(<expr pos:start="207:17" pos:end="207:27"><name pos:start="207:17" pos:end="207:20">type</name> <operator pos:start="207:22" pos:end="207:23">==</operator> <literal type="char" pos:start="207:25" pos:end="207:27">'C'</literal></expr>)</condition> <block pos:start="207:30" pos:end="211:13">{<block_content pos:start="209:17" pos:end="209:37">

                <expr_stmt pos:start="209:17" pos:end="209:37"><expr pos:start="209:17" pos:end="209:36"><call pos:start="209:17" pos:end="209:36"><name pos:start="209:17" pos:end="209:26">put_packet</name><argument_list pos:start="209:27" pos:end="209:36">(<argument pos:start="209:28" pos:end="209:28"><expr pos:start="209:28" pos:end="209:28"><name pos:start="209:28" pos:end="209:28">s</name></expr></argument>, <argument pos:start="209:31" pos:end="209:35"><expr pos:start="209:31" pos:end="209:35"><literal type="string" pos:start="209:31" pos:end="209:35">"T02"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="211:15" pos:end="215:13">else <block pos:start="211:20" pos:end="215:13">{<block_content pos:start="213:17" pos:end="213:32">

                <expr_stmt pos:start="213:17" pos:end="213:32"><expr pos:start="213:17" pos:end="213:31"><call pos:start="213:17" pos:end="213:31"><name pos:start="213:17" pos:end="213:28">gdb_continue</name><argument_list pos:start="213:29" pos:end="213:31">(<argument pos:start="213:30" pos:end="213:30"><expr pos:start="213:30" pos:end="213:30"><name pos:start="213:30" pos:end="213:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="219:9" pos:end="219:14">break;</break>

    <case pos:start="221:5" pos:end="221:13">case <expr pos:start="221:10" pos:end="221:12"><literal type="char" pos:start="221:10" pos:end="221:12">'g'</literal></expr>:</case>

        <expr_stmt pos:start="223:9" pos:end="223:16"><expr pos:start="223:9" pos:end="223:15"><name pos:start="223:9" pos:end="223:11">len</name> <operator pos:start="223:13" pos:end="223:13">=</operator> <literal type="number" pos:start="223:15" pos:end="223:15">0</literal></expr>;</expr_stmt>

        <for pos:start="225:9" pos:end="231:9">for <control pos:start="225:13" pos:end="225:49">(<init pos:start="225:14" pos:end="225:22"><expr pos:start="225:14" pos:end="225:21"><name pos:start="225:14" pos:end="225:17">addr</name> <operator pos:start="225:19" pos:end="225:19">=</operator> <literal type="number" pos:start="225:21" pos:end="225:21">0</literal></expr>;</init> <condition pos:start="225:24" pos:end="225:41"><expr pos:start="225:24" pos:end="225:40"><name pos:start="225:24" pos:end="225:27">addr</name> <operator pos:start="225:29" pos:end="225:29">&lt;</operator> <name pos:start="225:31" pos:end="225:40">num_g_regs</name></expr>;</condition> <incr pos:start="225:43" pos:end="225:48"><expr pos:start="225:43" pos:end="225:48"><name pos:start="225:43" pos:end="225:46">addr</name><operator pos:start="225:47" pos:end="225:48">++</operator></expr></incr>)</control> <block pos:start="225:51" pos:end="231:9">{<block_content pos:start="227:13" pos:end="229:28">

            <expr_stmt pos:start="227:13" pos:end="227:67"><expr pos:start="227:13" pos:end="227:66"><name pos:start="227:13" pos:end="227:20">reg_size</name> <operator pos:start="227:22" pos:end="227:22">=</operator> <call pos:start="227:24" pos:end="227:66"><name pos:start="227:24" pos:end="227:40">gdb_read_register</name><argument_list pos:start="227:41" pos:end="227:66">(<argument pos:start="227:42" pos:end="227:44"><expr pos:start="227:42" pos:end="227:44"><name pos:start="227:42" pos:end="227:44">env</name></expr></argument>, <argument pos:start="227:47" pos:end="227:59"><expr pos:start="227:47" pos:end="227:59"><name pos:start="227:47" pos:end="227:53">mem_buf</name> <operator pos:start="227:55" pos:end="227:55">+</operator> <name pos:start="227:57" pos:end="227:59">len</name></expr></argument>, <argument pos:start="227:62" pos:end="227:65"><expr pos:start="227:62" pos:end="227:65"><name pos:start="227:62" pos:end="227:65">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:28"><expr pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:15">len</name> <operator pos:start="229:17" pos:end="229:18">+=</operator> <name pos:start="229:20" pos:end="229:27">reg_size</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="233:9" pos:end="233:36"><expr pos:start="233:9" pos:end="233:35"><call pos:start="233:9" pos:end="233:35"><name pos:start="233:9" pos:end="233:16">memtohex</name><argument_list pos:start="233:17" pos:end="233:35">(<argument pos:start="233:18" pos:end="233:20"><expr pos:start="233:18" pos:end="233:20"><name pos:start="233:18" pos:end="233:20">buf</name></expr></argument>, <argument pos:start="233:23" pos:end="233:29"><expr pos:start="233:23" pos:end="233:29"><name pos:start="233:23" pos:end="233:29">mem_buf</name></expr></argument>, <argument pos:start="233:32" pos:end="233:34"><expr pos:start="233:32" pos:end="233:34"><name pos:start="233:32" pos:end="233:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:27"><expr pos:start="235:9" pos:end="235:26"><call pos:start="235:9" pos:end="235:26"><name pos:start="235:9" pos:end="235:18">put_packet</name><argument_list pos:start="235:19" pos:end="235:26">(<argument pos:start="235:20" pos:end="235:20"><expr pos:start="235:20" pos:end="235:20"><name pos:start="235:20" pos:end="235:20">s</name></expr></argument>, <argument pos:start="235:23" pos:end="235:25"><expr pos:start="235:23" pos:end="235:25"><name pos:start="235:23" pos:end="235:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="237:9" pos:end="237:14">break;</break>

    <case pos:start="239:5" pos:end="239:13">case <expr pos:start="239:10" pos:end="239:12"><literal type="char" pos:start="239:10" pos:end="239:12">'G'</literal></expr>:</case>

        <expr_stmt pos:start="241:9" pos:end="241:28"><expr pos:start="241:9" pos:end="241:27"><name pos:start="241:9" pos:end="241:17">registers</name> <operator pos:start="241:19" pos:end="241:19">=</operator> <name pos:start="241:21" pos:end="241:27">mem_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:28"><expr pos:start="243:9" pos:end="243:27"><name pos:start="243:9" pos:end="243:11">len</name> <operator pos:start="243:13" pos:end="243:13">=</operator> <call pos:start="243:15" pos:end="243:23"><name pos:start="243:15" pos:end="243:20">strlen</name><argument_list pos:start="243:21" pos:end="243:23">(<argument pos:start="243:22" pos:end="243:22"><expr pos:start="243:22" pos:end="243:22"><name pos:start="243:22" pos:end="243:22">p</name></expr></argument>)</argument_list></call> <operator pos:start="243:25" pos:end="243:25">/</operator> <literal type="number" pos:start="243:27" pos:end="243:27">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="245:9" pos:end="245:47"><expr pos:start="245:9" pos:end="245:46"><call pos:start="245:9" pos:end="245:46"><name pos:start="245:9" pos:end="245:16">hextomem</name><argument_list pos:start="245:17" pos:end="245:46">(<argument pos:start="245:18" pos:end="245:37"><expr pos:start="245:18" pos:end="245:37"><operator pos:start="245:18" pos:end="245:18">(</operator><name pos:start="245:19" pos:end="245:25">uint8_t</name> <operator pos:start="245:27" pos:end="245:27">*</operator><operator pos:start="245:28" pos:end="245:28">)</operator><name pos:start="245:29" pos:end="245:37">registers</name></expr></argument>, <argument pos:start="245:40" pos:end="245:40"><expr pos:start="245:40" pos:end="245:40"><name pos:start="245:40" pos:end="245:40">p</name></expr></argument>, <argument pos:start="245:43" pos:end="245:45"><expr pos:start="245:43" pos:end="245:45"><name pos:start="245:43" pos:end="245:45">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="247:9" pos:end="255:9">for <control pos:start="247:13" pos:end="247:60">(<init pos:start="247:14" pos:end="247:22"><expr pos:start="247:14" pos:end="247:21"><name pos:start="247:14" pos:end="247:17">addr</name> <operator pos:start="247:19" pos:end="247:19">=</operator> <literal type="number" pos:start="247:21" pos:end="247:21">0</literal></expr>;</init> <condition pos:start="247:24" pos:end="247:52"><expr pos:start="247:24" pos:end="247:51"><name pos:start="247:24" pos:end="247:49"><name pos:start="247:24" pos:end="247:27">addr</name> <argument_list type="generic" pos:start="247:29" pos:end="247:49">&lt; <argument pos:start="247:31" pos:end="247:47"><expr pos:start="247:31" pos:end="247:47"><name pos:start="247:31" pos:end="247:40">num_g_regs</name> <operator pos:start="247:42" pos:end="247:43">&amp;&amp;</operator> <name pos:start="247:45" pos:end="247:47">len</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="247:51" pos:end="247:51">0</literal></expr>;</condition> <incr pos:start="247:54" pos:end="247:59"><expr pos:start="247:54" pos:end="247:59"><name pos:start="247:54" pos:end="247:57">addr</name><operator pos:start="247:58" pos:end="247:59">++</operator></expr></incr>)</control> <block pos:start="247:62" pos:end="255:9">{<block_content pos:start="249:13" pos:end="253:34">

            <expr_stmt pos:start="249:13" pos:end="249:64"><expr pos:start="249:13" pos:end="249:63"><name pos:start="249:13" pos:end="249:20">reg_size</name> <operator pos:start="249:22" pos:end="249:22">=</operator> <call pos:start="249:24" pos:end="249:63"><name pos:start="249:24" pos:end="249:41">gdb_write_register</name><argument_list pos:start="249:42" pos:end="249:63">(<argument pos:start="249:43" pos:end="249:45"><expr pos:start="249:43" pos:end="249:45"><name pos:start="249:43" pos:end="249:45">env</name></expr></argument>, <argument pos:start="249:48" pos:end="249:56"><expr pos:start="249:48" pos:end="249:56"><name pos:start="249:48" pos:end="249:56">registers</name></expr></argument>, <argument pos:start="249:59" pos:end="249:62"><expr pos:start="249:59" pos:end="249:62"><name pos:start="249:59" pos:end="249:62">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:28"><expr pos:start="251:13" pos:end="251:27"><name pos:start="251:13" pos:end="251:15">len</name> <operator pos:start="251:17" pos:end="251:18">-=</operator> <name pos:start="251:20" pos:end="251:27">reg_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:34"><expr pos:start="253:13" pos:end="253:33"><name pos:start="253:13" pos:end="253:21">registers</name> <operator pos:start="253:23" pos:end="253:24">+=</operator> <name pos:start="253:26" pos:end="253:33">reg_size</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="257:9" pos:end="257:28"><expr pos:start="257:9" pos:end="257:27"><call pos:start="257:9" pos:end="257:27"><name pos:start="257:9" pos:end="257:18">put_packet</name><argument_list pos:start="257:19" pos:end="257:27">(<argument pos:start="257:20" pos:end="257:20"><expr pos:start="257:20" pos:end="257:20"><name pos:start="257:20" pos:end="257:20">s</name></expr></argument>, <argument pos:start="257:23" pos:end="257:26"><expr pos:start="257:23" pos:end="257:26"><literal type="string" pos:start="257:23" pos:end="257:26">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="259:9" pos:end="259:14">break;</break>

    <case pos:start="261:5" pos:end="261:13">case <expr pos:start="261:10" pos:end="261:12"><literal type="char" pos:start="261:10" pos:end="261:12">'m'</literal></expr>:</case>

        <expr_stmt pos:start="263:9" pos:end="263:44"><expr pos:start="263:9" pos:end="263:43"><name pos:start="263:9" pos:end="263:12">addr</name> <operator pos:start="263:14" pos:end="263:14">=</operator> <call pos:start="263:16" pos:end="263:43"><name pos:start="263:16" pos:end="263:23">strtoull</name><argument_list pos:start="263:24" pos:end="263:43">(<argument pos:start="263:25" pos:end="263:25"><expr pos:start="263:25" pos:end="263:25"><name pos:start="263:25" pos:end="263:25">p</name></expr></argument>, <argument pos:start="263:28" pos:end="263:38"><expr pos:start="263:28" pos:end="263:38"><operator pos:start="263:28" pos:end="263:28">(</operator><name pos:start="263:29" pos:end="263:32">char</name> <operator pos:start="263:34" pos:end="263:34">*</operator><operator pos:start="263:35" pos:end="263:35">*</operator><operator pos:start="263:36" pos:end="263:36">)</operator><operator pos:start="263:37" pos:end="263:37">&amp;</operator><name pos:start="263:38" pos:end="263:38">p</name></expr></argument>, <argument pos:start="263:41" pos:end="263:42"><expr pos:start="263:41" pos:end="263:42"><literal type="number" pos:start="263:41" pos:end="263:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="265:9" pos:end="267:16"><if pos:start="265:9" pos:end="267:16">if <condition pos:start="265:12" pos:end="265:22">(<expr pos:start="265:13" pos:end="265:21"><operator pos:start="265:13" pos:end="265:13">*</operator><name pos:start="265:14" pos:end="265:14">p</name> <operator pos:start="265:16" pos:end="265:17">==</operator> <literal type="char" pos:start="265:19" pos:end="265:21">','</literal></expr>)</condition><block type="pseudo" pos:start="267:13" pos:end="267:16"><block_content pos:start="267:13" pos:end="267:16">

            <expr_stmt pos:start="267:13" pos:end="267:16"><expr pos:start="267:13" pos:end="267:15"><name pos:start="267:13" pos:end="267:13">p</name><operator pos:start="267:14" pos:end="267:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:36"><expr pos:start="269:9" pos:end="269:35"><name pos:start="269:9" pos:end="269:11">len</name> <operator pos:start="269:13" pos:end="269:13">=</operator> <call pos:start="269:15" pos:end="269:35"><name pos:start="269:15" pos:end="269:22">strtoull</name><argument_list pos:start="269:23" pos:end="269:35">(<argument pos:start="269:24" pos:end="269:24"><expr pos:start="269:24" pos:end="269:24"><name pos:start="269:24" pos:end="269:24">p</name></expr></argument>, <argument pos:start="269:27" pos:end="269:30"><expr pos:start="269:27" pos:end="269:30"><name pos:start="269:27" pos:end="269:30">NULL</name></expr></argument>, <argument pos:start="269:33" pos:end="269:34"><expr pos:start="269:33" pos:end="269:34"><literal type="number" pos:start="269:33" pos:end="269:34">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="271:9" pos:end="281:9"><if pos:start="271:9" pos:end="275:9">if <condition pos:start="271:12" pos:end="271:65">(<expr pos:start="271:13" pos:end="271:64"><call pos:start="271:13" pos:end="271:59"><name pos:start="271:13" pos:end="271:31">cpu_memory_rw_debug</name><argument_list pos:start="271:32" pos:end="271:59">(<argument pos:start="271:33" pos:end="271:35"><expr pos:start="271:33" pos:end="271:35"><name pos:start="271:33" pos:end="271:35">env</name></expr></argument>, <argument pos:start="271:38" pos:end="271:41"><expr pos:start="271:38" pos:end="271:41"><name pos:start="271:38" pos:end="271:41">addr</name></expr></argument>, <argument pos:start="271:44" pos:end="271:50"><expr pos:start="271:44" pos:end="271:50"><name pos:start="271:44" pos:end="271:50">mem_buf</name></expr></argument>, <argument pos:start="271:53" pos:end="271:55"><expr pos:start="271:53" pos:end="271:55"><name pos:start="271:53" pos:end="271:55">len</name></expr></argument>, <argument pos:start="271:58" pos:end="271:58"><expr pos:start="271:58" pos:end="271:58"><literal type="number" pos:start="271:58" pos:end="271:58">0</literal></expr></argument>)</argument_list></call> <operator pos:start="271:61" pos:end="271:62">!=</operator> <literal type="number" pos:start="271:64" pos:end="271:64">0</literal></expr>)</condition> <block pos:start="271:67" pos:end="275:9">{<block_content pos:start="273:13" pos:end="273:34">

            <expr_stmt pos:start="273:13" pos:end="273:34"><expr pos:start="273:13" pos:end="273:33"><call pos:start="273:13" pos:end="273:33"><name pos:start="273:13" pos:end="273:22">put_packet</name> <argument_list pos:start="273:24" pos:end="273:33">(<argument pos:start="273:25" pos:end="273:25"><expr pos:start="273:25" pos:end="273:25"><name pos:start="273:25" pos:end="273:25">s</name></expr></argument>, <argument pos:start="273:28" pos:end="273:32"><expr pos:start="273:28" pos:end="273:32"><literal type="string" pos:start="273:28" pos:end="273:32">"E14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="275:11" pos:end="281:9">else <block pos:start="275:16" pos:end="281:9">{<block_content pos:start="277:13" pos:end="279:31">

            <expr_stmt pos:start="277:13" pos:end="277:40"><expr pos:start="277:13" pos:end="277:39"><call pos:start="277:13" pos:end="277:39"><name pos:start="277:13" pos:end="277:20">memtohex</name><argument_list pos:start="277:21" pos:end="277:39">(<argument pos:start="277:22" pos:end="277:24"><expr pos:start="277:22" pos:end="277:24"><name pos:start="277:22" pos:end="277:24">buf</name></expr></argument>, <argument pos:start="277:27" pos:end="277:33"><expr pos:start="277:27" pos:end="277:33"><name pos:start="277:27" pos:end="277:33">mem_buf</name></expr></argument>, <argument pos:start="277:36" pos:end="277:38"><expr pos:start="277:36" pos:end="277:38"><name pos:start="277:36" pos:end="277:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:31"><expr pos:start="279:13" pos:end="279:30"><call pos:start="279:13" pos:end="279:30"><name pos:start="279:13" pos:end="279:22">put_packet</name><argument_list pos:start="279:23" pos:end="279:30">(<argument pos:start="279:24" pos:end="279:24"><expr pos:start="279:24" pos:end="279:24"><name pos:start="279:24" pos:end="279:24">s</name></expr></argument>, <argument pos:start="279:27" pos:end="279:29"><expr pos:start="279:27" pos:end="279:29"><name pos:start="279:27" pos:end="279:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="283:9" pos:end="283:14">break;</break>

    <case pos:start="285:5" pos:end="285:13">case <expr pos:start="285:10" pos:end="285:12"><literal type="char" pos:start="285:10" pos:end="285:12">'M'</literal></expr>:</case>

        <expr_stmt pos:start="287:9" pos:end="287:44"><expr pos:start="287:9" pos:end="287:43"><name pos:start="287:9" pos:end="287:12">addr</name> <operator pos:start="287:14" pos:end="287:14">=</operator> <call pos:start="287:16" pos:end="287:43"><name pos:start="287:16" pos:end="287:23">strtoull</name><argument_list pos:start="287:24" pos:end="287:43">(<argument pos:start="287:25" pos:end="287:25"><expr pos:start="287:25" pos:end="287:25"><name pos:start="287:25" pos:end="287:25">p</name></expr></argument>, <argument pos:start="287:28" pos:end="287:38"><expr pos:start="287:28" pos:end="287:38"><operator pos:start="287:28" pos:end="287:28">(</operator><name pos:start="287:29" pos:end="287:32">char</name> <operator pos:start="287:34" pos:end="287:34">*</operator><operator pos:start="287:35" pos:end="287:35">*</operator><operator pos:start="287:36" pos:end="287:36">)</operator><operator pos:start="287:37" pos:end="287:37">&amp;</operator><name pos:start="287:38" pos:end="287:38">p</name></expr></argument>, <argument pos:start="287:41" pos:end="287:42"><expr pos:start="287:41" pos:end="287:42"><literal type="number" pos:start="287:41" pos:end="287:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="289:9" pos:end="291:16"><if pos:start="289:9" pos:end="291:16">if <condition pos:start="289:12" pos:end="289:22">(<expr pos:start="289:13" pos:end="289:21"><operator pos:start="289:13" pos:end="289:13">*</operator><name pos:start="289:14" pos:end="289:14">p</name> <operator pos:start="289:16" pos:end="289:17">==</operator> <literal type="char" pos:start="289:19" pos:end="289:21">','</literal></expr>)</condition><block type="pseudo" pos:start="291:13" pos:end="291:16"><block_content pos:start="291:13" pos:end="291:16">

            <expr_stmt pos:start="291:13" pos:end="291:16"><expr pos:start="291:13" pos:end="291:15"><name pos:start="291:13" pos:end="291:13">p</name><operator pos:start="291:14" pos:end="291:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:43"><expr pos:start="293:9" pos:end="293:42"><name pos:start="293:9" pos:end="293:11">len</name> <operator pos:start="293:13" pos:end="293:13">=</operator> <call pos:start="293:15" pos:end="293:42"><name pos:start="293:15" pos:end="293:22">strtoull</name><argument_list pos:start="293:23" pos:end="293:42">(<argument pos:start="293:24" pos:end="293:24"><expr pos:start="293:24" pos:end="293:24"><name pos:start="293:24" pos:end="293:24">p</name></expr></argument>, <argument pos:start="293:27" pos:end="293:37"><expr pos:start="293:27" pos:end="293:37"><operator pos:start="293:27" pos:end="293:27">(</operator><name pos:start="293:28" pos:end="293:31">char</name> <operator pos:start="293:33" pos:end="293:33">*</operator><operator pos:start="293:34" pos:end="293:34">*</operator><operator pos:start="293:35" pos:end="293:35">)</operator><operator pos:start="293:36" pos:end="293:36">&amp;</operator><name pos:start="293:37" pos:end="293:37">p</name></expr></argument>, <argument pos:start="293:40" pos:end="293:41"><expr pos:start="293:40" pos:end="293:41"><literal type="number" pos:start="293:40" pos:end="293:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="295:9" pos:end="297:16"><if pos:start="295:9" pos:end="297:16">if <condition pos:start="295:12" pos:end="295:22">(<expr pos:start="295:13" pos:end="295:21"><operator pos:start="295:13" pos:end="295:13">*</operator><name pos:start="295:14" pos:end="295:14">p</name> <operator pos:start="295:16" pos:end="295:17">==</operator> <literal type="char" pos:start="295:19" pos:end="295:21">':'</literal></expr>)</condition><block type="pseudo" pos:start="297:13" pos:end="297:16"><block_content pos:start="297:13" pos:end="297:16">

            <expr_stmt pos:start="297:13" pos:end="297:16"><expr pos:start="297:13" pos:end="297:15"><name pos:start="297:13" pos:end="297:13">p</name><operator pos:start="297:14" pos:end="297:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:34"><expr pos:start="299:9" pos:end="299:33"><call pos:start="299:9" pos:end="299:33"><name pos:start="299:9" pos:end="299:16">hextomem</name><argument_list pos:start="299:17" pos:end="299:33">(<argument pos:start="299:18" pos:end="299:24"><expr pos:start="299:18" pos:end="299:24"><name pos:start="299:18" pos:end="299:24">mem_buf</name></expr></argument>, <argument pos:start="299:27" pos:end="299:27"><expr pos:start="299:27" pos:end="299:27"><name pos:start="299:27" pos:end="299:27">p</name></expr></argument>, <argument pos:start="299:30" pos:end="299:32"><expr pos:start="299:30" pos:end="299:32"><name pos:start="299:30" pos:end="299:32">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="301:9" pos:end="307:32"><if pos:start="301:9" pos:end="303:33">if <condition pos:start="301:12" pos:end="301:65">(<expr pos:start="301:13" pos:end="301:64"><call pos:start="301:13" pos:end="301:59"><name pos:start="301:13" pos:end="301:31">cpu_memory_rw_debug</name><argument_list pos:start="301:32" pos:end="301:59">(<argument pos:start="301:33" pos:end="301:35"><expr pos:start="301:33" pos:end="301:35"><name pos:start="301:33" pos:end="301:35">env</name></expr></argument>, <argument pos:start="301:38" pos:end="301:41"><expr pos:start="301:38" pos:end="301:41"><name pos:start="301:38" pos:end="301:41">addr</name></expr></argument>, <argument pos:start="301:44" pos:end="301:50"><expr pos:start="301:44" pos:end="301:50"><name pos:start="301:44" pos:end="301:50">mem_buf</name></expr></argument>, <argument pos:start="301:53" pos:end="301:55"><expr pos:start="301:53" pos:end="301:55"><name pos:start="301:53" pos:end="301:55">len</name></expr></argument>, <argument pos:start="301:58" pos:end="301:58"><expr pos:start="301:58" pos:end="301:58"><literal type="number" pos:start="301:58" pos:end="301:58">1</literal></expr></argument>)</argument_list></call> <operator pos:start="301:61" pos:end="301:62">!=</operator> <literal type="number" pos:start="301:64" pos:end="301:64">0</literal></expr>)</condition><block type="pseudo" pos:start="303:13" pos:end="303:33"><block_content pos:start="303:13" pos:end="303:33">

            <expr_stmt pos:start="303:13" pos:end="303:33"><expr pos:start="303:13" pos:end="303:32"><call pos:start="303:13" pos:end="303:32"><name pos:start="303:13" pos:end="303:22">put_packet</name><argument_list pos:start="303:23" pos:end="303:32">(<argument pos:start="303:24" pos:end="303:24"><expr pos:start="303:24" pos:end="303:24"><name pos:start="303:24" pos:end="303:24">s</name></expr></argument>, <argument pos:start="303:27" pos:end="303:31"><expr pos:start="303:27" pos:end="303:31"><literal type="string" pos:start="303:27" pos:end="303:31">"E14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="305:9" pos:end="307:32">else<block type="pseudo" pos:start="307:13" pos:end="307:32"><block_content pos:start="307:13" pos:end="307:32">

            <expr_stmt pos:start="307:13" pos:end="307:32"><expr pos:start="307:13" pos:end="307:31"><call pos:start="307:13" pos:end="307:31"><name pos:start="307:13" pos:end="307:22">put_packet</name><argument_list pos:start="307:23" pos:end="307:31">(<argument pos:start="307:24" pos:end="307:24"><expr pos:start="307:24" pos:end="307:24"><name pos:start="307:24" pos:end="307:24">s</name></expr></argument>, <argument pos:start="307:27" pos:end="307:30"><expr pos:start="307:27" pos:end="307:30"><literal type="string" pos:start="307:27" pos:end="307:30">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="309:9" pos:end="309:14">break;</break>

    <case pos:start="311:5" pos:end="311:13">case <expr pos:start="311:10" pos:end="311:12"><literal type="char" pos:start="311:10" pos:end="311:12">'p'</literal></expr>:</case>

        <comment type="block" pos:start="313:9" pos:end="317:66">/* Older gdb are really dumb, and don't use 'g' if 'p' is avaialable.

           This works, but can be very slow.  Anything new enough to

           understand XML also knows how to use this properly.  */</comment>

        <if_stmt pos:start="319:9" pos:end="321:33"><if pos:start="319:9" pos:end="321:33">if <condition pos:start="319:12" pos:end="319:25">(<expr pos:start="319:13" pos:end="319:24"><operator pos:start="319:13" pos:end="319:13">!</operator><name pos:start="319:14" pos:end="319:24">gdb_has_xml</name></expr>)</condition><block type="pseudo" pos:start="321:13" pos:end="321:33"><block_content pos:start="321:13" pos:end="321:33">

            <goto pos:start="321:13" pos:end="321:33">goto <name pos:start="321:18" pos:end="321:32">unknown_command</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:44"><expr pos:start="323:9" pos:end="323:43"><name pos:start="323:9" pos:end="323:12">addr</name> <operator pos:start="323:14" pos:end="323:14">=</operator> <call pos:start="323:16" pos:end="323:43"><name pos:start="323:16" pos:end="323:23">strtoull</name><argument_list pos:start="323:24" pos:end="323:43">(<argument pos:start="323:25" pos:end="323:25"><expr pos:start="323:25" pos:end="323:25"><name pos:start="323:25" pos:end="323:25">p</name></expr></argument>, <argument pos:start="323:28" pos:end="323:38"><expr pos:start="323:28" pos:end="323:38"><operator pos:start="323:28" pos:end="323:28">(</operator><name pos:start="323:29" pos:end="323:32">char</name> <operator pos:start="323:34" pos:end="323:34">*</operator><operator pos:start="323:35" pos:end="323:35">*</operator><operator pos:start="323:36" pos:end="323:36">)</operator><operator pos:start="323:37" pos:end="323:37">&amp;</operator><name pos:start="323:38" pos:end="323:38">p</name></expr></argument>, <argument pos:start="323:41" pos:end="323:42"><expr pos:start="323:41" pos:end="323:42"><literal type="number" pos:start="323:41" pos:end="323:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:57"><expr pos:start="325:9" pos:end="325:56"><name pos:start="325:9" pos:end="325:16">reg_size</name> <operator pos:start="325:18" pos:end="325:18">=</operator> <call pos:start="325:20" pos:end="325:56"><name pos:start="325:20" pos:end="325:36">gdb_read_register</name><argument_list pos:start="325:37" pos:end="325:56">(<argument pos:start="325:38" pos:end="325:40"><expr pos:start="325:38" pos:end="325:40"><name pos:start="325:38" pos:end="325:40">env</name></expr></argument>, <argument pos:start="325:43" pos:end="325:49"><expr pos:start="325:43" pos:end="325:49"><name pos:start="325:43" pos:end="325:49">mem_buf</name></expr></argument>, <argument pos:start="325:52" pos:end="325:55"><expr pos:start="325:52" pos:end="325:55"><name pos:start="325:52" pos:end="325:55">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="327:9" pos:end="337:9"><if pos:start="327:9" pos:end="333:9">if <condition pos:start="327:12" pos:end="327:21">(<expr pos:start="327:13" pos:end="327:20"><name pos:start="327:13" pos:end="327:20">reg_size</name></expr>)</condition> <block pos:start="327:23" pos:end="333:9">{<block_content pos:start="329:13" pos:end="331:31">

            <expr_stmt pos:start="329:13" pos:end="329:45"><expr pos:start="329:13" pos:end="329:44"><call pos:start="329:13" pos:end="329:44"><name pos:start="329:13" pos:end="329:20">memtohex</name><argument_list pos:start="329:21" pos:end="329:44">(<argument pos:start="329:22" pos:end="329:24"><expr pos:start="329:22" pos:end="329:24"><name pos:start="329:22" pos:end="329:24">buf</name></expr></argument>, <argument pos:start="329:27" pos:end="329:33"><expr pos:start="329:27" pos:end="329:33"><name pos:start="329:27" pos:end="329:33">mem_buf</name></expr></argument>, <argument pos:start="329:36" pos:end="329:43"><expr pos:start="329:36" pos:end="329:43"><name pos:start="329:36" pos:end="329:43">reg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:31"><expr pos:start="331:13" pos:end="331:30"><call pos:start="331:13" pos:end="331:30"><name pos:start="331:13" pos:end="331:22">put_packet</name><argument_list pos:start="331:23" pos:end="331:30">(<argument pos:start="331:24" pos:end="331:24"><expr pos:start="331:24" pos:end="331:24"><name pos:start="331:24" pos:end="331:24">s</name></expr></argument>, <argument pos:start="331:27" pos:end="331:29"><expr pos:start="331:27" pos:end="331:29"><name pos:start="331:27" pos:end="331:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="333:11" pos:end="337:9">else <block pos:start="333:16" pos:end="337:9">{<block_content pos:start="335:13" pos:end="335:33">

            <expr_stmt pos:start="335:13" pos:end="335:33"><expr pos:start="335:13" pos:end="335:32"><call pos:start="335:13" pos:end="335:32"><name pos:start="335:13" pos:end="335:22">put_packet</name><argument_list pos:start="335:23" pos:end="335:32">(<argument pos:start="335:24" pos:end="335:24"><expr pos:start="335:24" pos:end="335:24"><name pos:start="335:24" pos:end="335:24">s</name></expr></argument>, <argument pos:start="335:27" pos:end="335:31"><expr pos:start="335:27" pos:end="335:31"><literal type="string" pos:start="335:27" pos:end="335:31">"E14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="339:9" pos:end="339:14">break;</break>

    <case pos:start="341:5" pos:end="341:13">case <expr pos:start="341:10" pos:end="341:12"><literal type="char" pos:start="341:10" pos:end="341:12">'P'</literal></expr>:</case>

        <if_stmt pos:start="343:9" pos:end="345:33"><if pos:start="343:9" pos:end="345:33">if <condition pos:start="343:12" pos:end="343:25">(<expr pos:start="343:13" pos:end="343:24"><operator pos:start="343:13" pos:end="343:13">!</operator><name pos:start="343:14" pos:end="343:24">gdb_has_xml</name></expr>)</condition><block type="pseudo" pos:start="345:13" pos:end="345:33"><block_content pos:start="345:13" pos:end="345:33">

            <goto pos:start="345:13" pos:end="345:33">goto <name pos:start="345:18" pos:end="345:32">unknown_command</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:44"><expr pos:start="347:9" pos:end="347:43"><name pos:start="347:9" pos:end="347:12">addr</name> <operator pos:start="347:14" pos:end="347:14">=</operator> <call pos:start="347:16" pos:end="347:43"><name pos:start="347:16" pos:end="347:23">strtoull</name><argument_list pos:start="347:24" pos:end="347:43">(<argument pos:start="347:25" pos:end="347:25"><expr pos:start="347:25" pos:end="347:25"><name pos:start="347:25" pos:end="347:25">p</name></expr></argument>, <argument pos:start="347:28" pos:end="347:38"><expr pos:start="347:28" pos:end="347:38"><operator pos:start="347:28" pos:end="347:28">(</operator><name pos:start="347:29" pos:end="347:32">char</name> <operator pos:start="347:34" pos:end="347:34">*</operator><operator pos:start="347:35" pos:end="347:35">*</operator><operator pos:start="347:36" pos:end="347:36">)</operator><operator pos:start="347:37" pos:end="347:37">&amp;</operator><name pos:start="347:38" pos:end="347:38">p</name></expr></argument>, <argument pos:start="347:41" pos:end="347:42"><expr pos:start="347:41" pos:end="347:42"><literal type="number" pos:start="347:41" pos:end="347:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="349:9" pos:end="351:16"><if pos:start="349:9" pos:end="351:16">if <condition pos:start="349:12" pos:end="349:22">(<expr pos:start="349:13" pos:end="349:21"><operator pos:start="349:13" pos:end="349:13">*</operator><name pos:start="349:14" pos:end="349:14">p</name> <operator pos:start="349:16" pos:end="349:17">==</operator> <literal type="char" pos:start="349:19" pos:end="349:21">'='</literal></expr>)</condition><block type="pseudo" pos:start="351:13" pos:end="351:16"><block_content pos:start="351:13" pos:end="351:16">

            <expr_stmt pos:start="351:13" pos:end="351:16"><expr pos:start="351:13" pos:end="351:15"><name pos:start="351:13" pos:end="351:13">p</name><operator pos:start="351:14" pos:end="351:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="353:9" pos:end="353:33"><expr pos:start="353:9" pos:end="353:32"><name pos:start="353:9" pos:end="353:16">reg_size</name> <operator pos:start="353:18" pos:end="353:18">=</operator> <call pos:start="353:20" pos:end="353:28"><name pos:start="353:20" pos:end="353:25">strlen</name><argument_list pos:start="353:26" pos:end="353:28">(<argument pos:start="353:27" pos:end="353:27"><expr pos:start="353:27" pos:end="353:27"><name pos:start="353:27" pos:end="353:27">p</name></expr></argument>)</argument_list></call> <operator pos:start="353:30" pos:end="353:30">/</operator> <literal type="number" pos:start="353:32" pos:end="353:32">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="355:9" pos:end="355:39"><expr pos:start="355:9" pos:end="355:38"><call pos:start="355:9" pos:end="355:38"><name pos:start="355:9" pos:end="355:16">hextomem</name><argument_list pos:start="355:17" pos:end="355:38">(<argument pos:start="355:18" pos:end="355:24"><expr pos:start="355:18" pos:end="355:24"><name pos:start="355:18" pos:end="355:24">mem_buf</name></expr></argument>, <argument pos:start="355:27" pos:end="355:27"><expr pos:start="355:27" pos:end="355:27"><name pos:start="355:27" pos:end="355:27">p</name></expr></argument>, <argument pos:start="355:30" pos:end="355:37"><expr pos:start="355:30" pos:end="355:37"><name pos:start="355:30" pos:end="355:37">reg_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="357:9" pos:end="357:47"><expr pos:start="357:9" pos:end="357:46"><call pos:start="357:9" pos:end="357:46"><name pos:start="357:9" pos:end="357:26">gdb_write_register</name><argument_list pos:start="357:27" pos:end="357:46">(<argument pos:start="357:28" pos:end="357:30"><expr pos:start="357:28" pos:end="357:30"><name pos:start="357:28" pos:end="357:30">env</name></expr></argument>, <argument pos:start="357:33" pos:end="357:39"><expr pos:start="357:33" pos:end="357:39"><name pos:start="357:33" pos:end="357:39">mem_buf</name></expr></argument>, <argument pos:start="357:42" pos:end="357:45"><expr pos:start="357:42" pos:end="357:45"><name pos:start="357:42" pos:end="357:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="359:9" pos:end="359:28"><expr pos:start="359:9" pos:end="359:27"><call pos:start="359:9" pos:end="359:27"><name pos:start="359:9" pos:end="359:18">put_packet</name><argument_list pos:start="359:19" pos:end="359:27">(<argument pos:start="359:20" pos:end="359:20"><expr pos:start="359:20" pos:end="359:20"><name pos:start="359:20" pos:end="359:20">s</name></expr></argument>, <argument pos:start="359:23" pos:end="359:26"><expr pos:start="359:23" pos:end="359:26"><literal type="string" pos:start="359:23" pos:end="359:26">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="361:9" pos:end="361:14">break;</break>

    <case pos:start="363:5" pos:end="363:13">case <expr pos:start="363:10" pos:end="363:12"><literal type="char" pos:start="363:10" pos:end="363:12">'Z'</literal></expr>:</case>

        <expr_stmt pos:start="365:9" pos:end="365:43"><expr pos:start="365:9" pos:end="365:42"><name pos:start="365:9" pos:end="365:12">type</name> <operator pos:start="365:14" pos:end="365:14">=</operator> <call pos:start="365:16" pos:end="365:42"><name pos:start="365:16" pos:end="365:22">strtoul</name><argument_list pos:start="365:23" pos:end="365:42">(<argument pos:start="365:24" pos:end="365:24"><expr pos:start="365:24" pos:end="365:24"><name pos:start="365:24" pos:end="365:24">p</name></expr></argument>, <argument pos:start="365:27" pos:end="365:37"><expr pos:start="365:27" pos:end="365:37"><operator pos:start="365:27" pos:end="365:27">(</operator><name pos:start="365:28" pos:end="365:31">char</name> <operator pos:start="365:33" pos:end="365:33">*</operator><operator pos:start="365:34" pos:end="365:34">*</operator><operator pos:start="365:35" pos:end="365:35">)</operator><operator pos:start="365:36" pos:end="365:36">&amp;</operator><name pos:start="365:37" pos:end="365:37">p</name></expr></argument>, <argument pos:start="365:40" pos:end="365:41"><expr pos:start="365:40" pos:end="365:41"><literal type="number" pos:start="365:40" pos:end="365:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="367:9" pos:end="369:16"><if pos:start="367:9" pos:end="369:16">if <condition pos:start="367:12" pos:end="367:22">(<expr pos:start="367:13" pos:end="367:21"><operator pos:start="367:13" pos:end="367:13">*</operator><name pos:start="367:14" pos:end="367:14">p</name> <operator pos:start="367:16" pos:end="367:17">==</operator> <literal type="char" pos:start="367:19" pos:end="367:21">','</literal></expr>)</condition><block type="pseudo" pos:start="369:13" pos:end="369:16"><block_content pos:start="369:13" pos:end="369:16">

            <expr_stmt pos:start="369:13" pos:end="369:16"><expr pos:start="369:13" pos:end="369:15"><name pos:start="369:13" pos:end="369:13">p</name><operator pos:start="369:14" pos:end="369:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:44"><expr pos:start="371:9" pos:end="371:43"><name pos:start="371:9" pos:end="371:12">addr</name> <operator pos:start="371:14" pos:end="371:14">=</operator> <call pos:start="371:16" pos:end="371:43"><name pos:start="371:16" pos:end="371:23">strtoull</name><argument_list pos:start="371:24" pos:end="371:43">(<argument pos:start="371:25" pos:end="371:25"><expr pos:start="371:25" pos:end="371:25"><name pos:start="371:25" pos:end="371:25">p</name></expr></argument>, <argument pos:start="371:28" pos:end="371:38"><expr pos:start="371:28" pos:end="371:38"><operator pos:start="371:28" pos:end="371:28">(</operator><name pos:start="371:29" pos:end="371:32">char</name> <operator pos:start="371:34" pos:end="371:34">*</operator><operator pos:start="371:35" pos:end="371:35">*</operator><operator pos:start="371:36" pos:end="371:36">)</operator><operator pos:start="371:37" pos:end="371:37">&amp;</operator><name pos:start="371:38" pos:end="371:38">p</name></expr></argument>, <argument pos:start="371:41" pos:end="371:42"><expr pos:start="371:41" pos:end="371:42"><literal type="number" pos:start="371:41" pos:end="371:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="373:9" pos:end="375:16"><if pos:start="373:9" pos:end="375:16">if <condition pos:start="373:12" pos:end="373:22">(<expr pos:start="373:13" pos:end="373:21"><operator pos:start="373:13" pos:end="373:13">*</operator><name pos:start="373:14" pos:end="373:14">p</name> <operator pos:start="373:16" pos:end="373:17">==</operator> <literal type="char" pos:start="373:19" pos:end="373:21">','</literal></expr>)</condition><block type="pseudo" pos:start="375:13" pos:end="375:16"><block_content pos:start="375:13" pos:end="375:16">

            <expr_stmt pos:start="375:13" pos:end="375:16"><expr pos:start="375:13" pos:end="375:15"><name pos:start="375:13" pos:end="375:13">p</name><operator pos:start="375:14" pos:end="375:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="377:9" pos:end="377:43"><expr pos:start="377:9" pos:end="377:42"><name pos:start="377:9" pos:end="377:11">len</name> <operator pos:start="377:13" pos:end="377:13">=</operator> <call pos:start="377:15" pos:end="377:42"><name pos:start="377:15" pos:end="377:22">strtoull</name><argument_list pos:start="377:23" pos:end="377:42">(<argument pos:start="377:24" pos:end="377:24"><expr pos:start="377:24" pos:end="377:24"><name pos:start="377:24" pos:end="377:24">p</name></expr></argument>, <argument pos:start="377:27" pos:end="377:37"><expr pos:start="377:27" pos:end="377:37"><operator pos:start="377:27" pos:end="377:27">(</operator><name pos:start="377:28" pos:end="377:31">char</name> <operator pos:start="377:33" pos:end="377:33">*</operator><operator pos:start="377:34" pos:end="377:34">*</operator><operator pos:start="377:35" pos:end="377:35">)</operator><operator pos:start="377:36" pos:end="377:36">&amp;</operator><name pos:start="377:37" pos:end="377:37">p</name></expr></argument>, <argument pos:start="377:40" pos:end="377:41"><expr pos:start="377:40" pos:end="377:41"><literal type="number" pos:start="377:40" pos:end="377:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="379:9" pos:end="429:9">switch <condition pos:start="379:16" pos:end="379:21">(<expr pos:start="379:17" pos:end="379:20"><name pos:start="379:17" pos:end="379:20">type</name></expr>)</condition> <block pos:start="379:23" pos:end="429:9">{<block_content pos:start="381:9" pos:end="427:18">

        <case pos:start="381:9" pos:end="381:15">case <expr pos:start="381:14" pos:end="381:14"><literal type="number" pos:start="381:14" pos:end="381:14">0</literal></expr>:</case>

        <case pos:start="383:9" pos:end="383:15">case <expr pos:start="383:14" pos:end="383:14"><literal type="number" pos:start="383:14" pos:end="383:14">1</literal></expr>:</case>

            <if_stmt pos:start="385:13" pos:end="387:38"><if pos:start="385:13" pos:end="387:38">if <condition pos:start="385:16" pos:end="385:53">(<expr pos:start="385:17" pos:end="385:52"><call pos:start="385:17" pos:end="385:48"><name pos:start="385:17" pos:end="385:37">cpu_breakpoint_insert</name><argument_list pos:start="385:38" pos:end="385:48">(<argument pos:start="385:39" pos:end="385:41"><expr pos:start="385:39" pos:end="385:41"><name pos:start="385:39" pos:end="385:41">env</name></expr></argument>, <argument pos:start="385:44" pos:end="385:47"><expr pos:start="385:44" pos:end="385:47"><name pos:start="385:44" pos:end="385:47">addr</name></expr></argument>)</argument_list></call> <operator pos:start="385:50" pos:end="385:50">&lt;</operator> <literal type="number" pos:start="385:52" pos:end="385:52">0</literal></expr>)</condition><block type="pseudo" pos:start="387:17" pos:end="387:38"><block_content pos:start="387:17" pos:end="387:38">

                <goto pos:start="387:17" pos:end="387:38">goto <name pos:start="387:22" pos:end="387:37">breakpoint_error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:32"><expr pos:start="389:13" pos:end="389:31"><call pos:start="389:13" pos:end="389:31"><name pos:start="389:13" pos:end="389:22">put_packet</name><argument_list pos:start="389:23" pos:end="389:31">(<argument pos:start="389:24" pos:end="389:24"><expr pos:start="389:24" pos:end="389:24"><name pos:start="389:24" pos:end="389:24">s</name></expr></argument>, <argument pos:start="389:27" pos:end="389:30"><expr pos:start="389:27" pos:end="389:30"><literal type="string" pos:start="389:27" pos:end="389:30">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="391:13" pos:end="394:0">break;</break>

<cpp:ifndef pos:start="393:1" pos:end="393:24">#<cpp:directive pos:start="393:2" pos:end="393:7">ifndef</cpp:directive> <name pos:start="393:9" pos:end="393:24">CONFIG_USER_ONLY</name></cpp:ifndef>

        <case pos:start="395:9" pos:end="395:15">case <expr pos:start="395:14" pos:end="395:14"><literal type="number" pos:start="395:14" pos:end="395:14">2</literal></expr>:</case>

            <expr_stmt pos:start="397:13" pos:end="397:30"><expr pos:start="397:13" pos:end="397:29"><name pos:start="397:13" pos:end="397:16">type</name> <operator pos:start="397:18" pos:end="397:18">=</operator> <name pos:start="397:20" pos:end="397:29">PAGE_WRITE</name></expr>;</expr_stmt>

            <goto pos:start="399:13" pos:end="399:35">goto <name pos:start="399:18" pos:end="399:34">insert_watchpoint</name>;</goto>

        <case pos:start="401:9" pos:end="401:15">case <expr pos:start="401:14" pos:end="401:14"><literal type="number" pos:start="401:14" pos:end="401:14">3</literal></expr>:</case>

            <expr_stmt pos:start="403:13" pos:end="403:29"><expr pos:start="403:13" pos:end="403:28"><name pos:start="403:13" pos:end="403:16">type</name> <operator pos:start="403:18" pos:end="403:18">=</operator> <name pos:start="403:20" pos:end="403:28">PAGE_READ</name></expr>;</expr_stmt>

            <goto pos:start="405:13" pos:end="405:35">goto <name pos:start="405:18" pos:end="405:34">insert_watchpoint</name>;</goto>

        <case pos:start="407:9" pos:end="407:15">case <expr pos:start="407:14" pos:end="407:14"><literal type="number" pos:start="407:14" pos:end="407:14">4</literal></expr>:</case>

            <expr_stmt pos:start="409:13" pos:end="409:42"><expr pos:start="409:13" pos:end="409:41"><name pos:start="409:13" pos:end="409:16">type</name> <operator pos:start="409:18" pos:end="409:18">=</operator> <name pos:start="409:20" pos:end="409:28">PAGE_READ</name> <operator pos:start="409:30" pos:end="409:30">|</operator> <name pos:start="409:32" pos:end="409:41">PAGE_WRITE</name></expr>;</expr_stmt>

        <label pos:start="411:9" pos:end="411:26"><name pos:start="411:9" pos:end="411:25">insert_watchpoint</name>:</label>

            <if_stmt pos:start="413:13" pos:end="415:38"><if pos:start="413:13" pos:end="415:38">if <condition pos:start="413:16" pos:end="413:59">(<expr pos:start="413:17" pos:end="413:58"><call pos:start="413:17" pos:end="413:54"><name pos:start="413:17" pos:end="413:37">cpu_watchpoint_insert</name><argument_list pos:start="413:38" pos:end="413:54">(<argument pos:start="413:39" pos:end="413:41"><expr pos:start="413:39" pos:end="413:41"><name pos:start="413:39" pos:end="413:41">env</name></expr></argument>, <argument pos:start="413:44" pos:end="413:47"><expr pos:start="413:44" pos:end="413:47"><name pos:start="413:44" pos:end="413:47">addr</name></expr></argument>, <argument pos:start="413:50" pos:end="413:53"><expr pos:start="413:50" pos:end="413:53"><name pos:start="413:50" pos:end="413:53">type</name></expr></argument>)</argument_list></call> <operator pos:start="413:56" pos:end="413:56">&lt;</operator> <literal type="number" pos:start="413:58" pos:end="413:58">0</literal></expr>)</condition><block type="pseudo" pos:start="415:17" pos:end="415:38"><block_content pos:start="415:17" pos:end="415:38">

                <goto pos:start="415:17" pos:end="415:38">goto <name pos:start="415:22" pos:end="415:37">breakpoint_error</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="417:13" pos:end="417:32"><expr pos:start="417:13" pos:end="417:31"><call pos:start="417:13" pos:end="417:31"><name pos:start="417:13" pos:end="417:22">put_packet</name><argument_list pos:start="417:23" pos:end="417:31">(<argument pos:start="417:24" pos:end="417:24"><expr pos:start="417:24" pos:end="417:24"><name pos:start="417:24" pos:end="417:24">s</name></expr></argument>, <argument pos:start="417:27" pos:end="417:30"><expr pos:start="417:27" pos:end="417:30"><literal type="string" pos:start="417:27" pos:end="417:30">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="419:13" pos:end="422:0">break;</break>

<cpp:endif pos:start="421:1" pos:end="421:6">#<cpp:directive pos:start="421:2" pos:end="421:6">endif</cpp:directive></cpp:endif>

        <default pos:start="423:9" pos:end="423:16">default:</default>

            <expr_stmt pos:start="425:13" pos:end="425:30"><expr pos:start="425:13" pos:end="425:29"><call pos:start="425:13" pos:end="425:29"><name pos:start="425:13" pos:end="425:22">put_packet</name><argument_list pos:start="425:23" pos:end="425:29">(<argument pos:start="425:24" pos:end="425:24"><expr pos:start="425:24" pos:end="425:24"><name pos:start="425:24" pos:end="425:24">s</name></expr></argument>, <argument pos:start="425:27" pos:end="425:28"><expr pos:start="425:27" pos:end="425:28"><literal type="string" pos:start="425:27" pos:end="425:28">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="427:13" pos:end="427:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="431:9" pos:end="431:14">break;</break>

    <label pos:start="433:5" pos:end="433:21"><name pos:start="433:5" pos:end="433:20">breakpoint_error</name>:</label>

        <expr_stmt pos:start="435:9" pos:end="435:29"><expr pos:start="435:9" pos:end="435:28"><call pos:start="435:9" pos:end="435:28"><name pos:start="435:9" pos:end="435:18">put_packet</name><argument_list pos:start="435:19" pos:end="435:28">(<argument pos:start="435:20" pos:end="435:20"><expr pos:start="435:20" pos:end="435:20"><name pos:start="435:20" pos:end="435:20">s</name></expr></argument>, <argument pos:start="435:23" pos:end="435:27"><expr pos:start="435:23" pos:end="435:27"><literal type="string" pos:start="435:23" pos:end="435:27">"E22"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="437:9" pos:end="437:14">break;</break>



    <case pos:start="441:5" pos:end="441:13">case <expr pos:start="441:10" pos:end="441:12"><literal type="char" pos:start="441:10" pos:end="441:12">'z'</literal></expr>:</case>

        <expr_stmt pos:start="443:9" pos:end="443:43"><expr pos:start="443:9" pos:end="443:42"><name pos:start="443:9" pos:end="443:12">type</name> <operator pos:start="443:14" pos:end="443:14">=</operator> <call pos:start="443:16" pos:end="443:42"><name pos:start="443:16" pos:end="443:22">strtoul</name><argument_list pos:start="443:23" pos:end="443:42">(<argument pos:start="443:24" pos:end="443:24"><expr pos:start="443:24" pos:end="443:24"><name pos:start="443:24" pos:end="443:24">p</name></expr></argument>, <argument pos:start="443:27" pos:end="443:37"><expr pos:start="443:27" pos:end="443:37"><operator pos:start="443:27" pos:end="443:27">(</operator><name pos:start="443:28" pos:end="443:31">char</name> <operator pos:start="443:33" pos:end="443:33">*</operator><operator pos:start="443:34" pos:end="443:34">*</operator><operator pos:start="443:35" pos:end="443:35">)</operator><operator pos:start="443:36" pos:end="443:36">&amp;</operator><name pos:start="443:37" pos:end="443:37">p</name></expr></argument>, <argument pos:start="443:40" pos:end="443:41"><expr pos:start="443:40" pos:end="443:41"><literal type="number" pos:start="443:40" pos:end="443:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="445:9" pos:end="447:16"><if pos:start="445:9" pos:end="447:16">if <condition pos:start="445:12" pos:end="445:22">(<expr pos:start="445:13" pos:end="445:21"><operator pos:start="445:13" pos:end="445:13">*</operator><name pos:start="445:14" pos:end="445:14">p</name> <operator pos:start="445:16" pos:end="445:17">==</operator> <literal type="char" pos:start="445:19" pos:end="445:21">','</literal></expr>)</condition><block type="pseudo" pos:start="447:13" pos:end="447:16"><block_content pos:start="447:13" pos:end="447:16">

            <expr_stmt pos:start="447:13" pos:end="447:16"><expr pos:start="447:13" pos:end="447:15"><name pos:start="447:13" pos:end="447:13">p</name><operator pos:start="447:14" pos:end="447:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="449:9" pos:end="449:44"><expr pos:start="449:9" pos:end="449:43"><name pos:start="449:9" pos:end="449:12">addr</name> <operator pos:start="449:14" pos:end="449:14">=</operator> <call pos:start="449:16" pos:end="449:43"><name pos:start="449:16" pos:end="449:23">strtoull</name><argument_list pos:start="449:24" pos:end="449:43">(<argument pos:start="449:25" pos:end="449:25"><expr pos:start="449:25" pos:end="449:25"><name pos:start="449:25" pos:end="449:25">p</name></expr></argument>, <argument pos:start="449:28" pos:end="449:38"><expr pos:start="449:28" pos:end="449:38"><operator pos:start="449:28" pos:end="449:28">(</operator><name pos:start="449:29" pos:end="449:32">char</name> <operator pos:start="449:34" pos:end="449:34">*</operator><operator pos:start="449:35" pos:end="449:35">*</operator><operator pos:start="449:36" pos:end="449:36">)</operator><operator pos:start="449:37" pos:end="449:37">&amp;</operator><name pos:start="449:38" pos:end="449:38">p</name></expr></argument>, <argument pos:start="449:41" pos:end="449:42"><expr pos:start="449:41" pos:end="449:42"><literal type="number" pos:start="449:41" pos:end="449:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="451:9" pos:end="453:16"><if pos:start="451:9" pos:end="453:16">if <condition pos:start="451:12" pos:end="451:22">(<expr pos:start="451:13" pos:end="451:21"><operator pos:start="451:13" pos:end="451:13">*</operator><name pos:start="451:14" pos:end="451:14">p</name> <operator pos:start="451:16" pos:end="451:17">==</operator> <literal type="char" pos:start="451:19" pos:end="451:21">','</literal></expr>)</condition><block type="pseudo" pos:start="453:13" pos:end="453:16"><block_content pos:start="453:13" pos:end="453:16">

            <expr_stmt pos:start="453:13" pos:end="453:16"><expr pos:start="453:13" pos:end="453:15"><name pos:start="453:13" pos:end="453:13">p</name><operator pos:start="453:14" pos:end="453:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:43"><expr pos:start="455:9" pos:end="455:42"><name pos:start="455:9" pos:end="455:11">len</name> <operator pos:start="455:13" pos:end="455:13">=</operator> <call pos:start="455:15" pos:end="455:42"><name pos:start="455:15" pos:end="455:22">strtoull</name><argument_list pos:start="455:23" pos:end="455:42">(<argument pos:start="455:24" pos:end="455:24"><expr pos:start="455:24" pos:end="455:24"><name pos:start="455:24" pos:end="455:24">p</name></expr></argument>, <argument pos:start="455:27" pos:end="455:37"><expr pos:start="455:27" pos:end="455:37"><operator pos:start="455:27" pos:end="455:27">(</operator><name pos:start="455:28" pos:end="455:31">char</name> <operator pos:start="455:33" pos:end="455:33">*</operator><operator pos:start="455:34" pos:end="455:34">*</operator><operator pos:start="455:35" pos:end="455:35">)</operator><operator pos:start="455:36" pos:end="455:36">&amp;</operator><name pos:start="455:37" pos:end="455:37">p</name></expr></argument>, <argument pos:start="455:40" pos:end="455:41"><expr pos:start="455:40" pos:end="455:41"><literal type="number" pos:start="455:40" pos:end="455:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="457:9" pos:end="477:9"><if pos:start="457:9" pos:end="465:9">if <condition pos:start="457:12" pos:end="457:35">(<expr pos:start="457:13" pos:end="457:34"><name pos:start="457:13" pos:end="457:16">type</name> <operator pos:start="457:18" pos:end="457:19">==</operator> <literal type="number" pos:start="457:21" pos:end="457:21">0</literal> <operator pos:start="457:23" pos:end="457:24">||</operator> <name pos:start="457:26" pos:end="457:29">type</name> <operator pos:start="457:31" pos:end="457:32">==</operator> <literal type="number" pos:start="457:34" pos:end="457:34">1</literal></expr>)</condition> <block pos:start="457:37" pos:end="465:9">{<block_content pos:start="459:13" pos:end="464:0">

            <expr_stmt pos:start="459:13" pos:end="459:45"><expr pos:start="459:13" pos:end="459:44"><call pos:start="459:13" pos:end="459:44"><name pos:start="459:13" pos:end="459:33">cpu_breakpoint_remove</name><argument_list pos:start="459:34" pos:end="459:44">(<argument pos:start="459:35" pos:end="459:37"><expr pos:start="459:35" pos:end="459:37"><name pos:start="459:35" pos:end="459:37">env</name></expr></argument>, <argument pos:start="459:40" pos:end="459:43"><expr pos:start="459:40" pos:end="459:43"><name pos:start="459:40" pos:end="459:43">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="461:13" pos:end="464:0"><expr pos:start="461:13" pos:end="461:31"><call pos:start="461:13" pos:end="461:31"><name pos:start="461:13" pos:end="461:22">put_packet</name><argument_list pos:start="461:23" pos:end="461:31">(<argument pos:start="461:24" pos:end="461:24"><expr pos:start="461:24" pos:end="461:24"><name pos:start="461:24" pos:end="461:24">s</name></expr></argument>, <argument pos:start="461:27" pos:end="461:30"><expr pos:start="461:27" pos:end="461:30"><literal type="string" pos:start="461:27" pos:end="461:30">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="463:1" pos:end="463:24">#<cpp:directive pos:start="463:2" pos:end="463:7">ifndef</cpp:directive> <name pos:start="463:9" pos:end="463:24">CONFIG_USER_ONLY</name></cpp:ifndef>

        </block_content>}</block></if> <if type="elseif" pos:start="465:11" pos:end="473:9">else if <condition pos:start="465:19" pos:end="465:42">(<expr pos:start="465:20" pos:end="465:41"><name pos:start="465:20" pos:end="465:23">type</name> <operator pos:start="465:25" pos:end="465:26">&gt;=</operator> <literal type="number" pos:start="465:28" pos:end="465:28">2</literal> <operator pos:start="465:30" pos:end="465:31">||</operator> <name pos:start="465:33" pos:end="465:36">type</name> <operator pos:start="465:38" pos:end="465:39">&lt;=</operator> <literal type="number" pos:start="465:41" pos:end="465:41">4</literal></expr>)</condition> <block pos:start="465:44" pos:end="473:9">{<block_content pos:start="467:13" pos:end="472:0">

            <expr_stmt pos:start="467:13" pos:end="467:45"><expr pos:start="467:13" pos:end="467:44"><call pos:start="467:13" pos:end="467:44"><name pos:start="467:13" pos:end="467:33">cpu_watchpoint_remove</name><argument_list pos:start="467:34" pos:end="467:44">(<argument pos:start="467:35" pos:end="467:37"><expr pos:start="467:35" pos:end="467:37"><name pos:start="467:35" pos:end="467:37">env</name></expr></argument>, <argument pos:start="467:40" pos:end="467:43"><expr pos:start="467:40" pos:end="467:43"><name pos:start="467:40" pos:end="467:43">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="469:13" pos:end="472:0"><expr pos:start="469:13" pos:end="469:31"><call pos:start="469:13" pos:end="469:31"><name pos:start="469:13" pos:end="469:22">put_packet</name><argument_list pos:start="469:23" pos:end="469:31">(<argument pos:start="469:24" pos:end="469:24"><expr pos:start="469:24" pos:end="469:24"><name pos:start="469:24" pos:end="469:24">s</name></expr></argument>, <argument pos:start="469:27" pos:end="469:30"><expr pos:start="469:27" pos:end="469:30"><literal type="string" pos:start="469:27" pos:end="469:30">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="471:1" pos:end="471:6">#<cpp:directive pos:start="471:2" pos:end="471:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="473:11" pos:end="477:9">else <block pos:start="473:16" pos:end="477:9">{<block_content pos:start="475:13" pos:end="475:30">

            <expr_stmt pos:start="475:13" pos:end="475:30"><expr pos:start="475:13" pos:end="475:29"><call pos:start="475:13" pos:end="475:29"><name pos:start="475:13" pos:end="475:22">put_packet</name><argument_list pos:start="475:23" pos:end="475:29">(<argument pos:start="475:24" pos:end="475:24"><expr pos:start="475:24" pos:end="475:24"><name pos:start="475:24" pos:end="475:24">s</name></expr></argument>, <argument pos:start="475:27" pos:end="475:28"><expr pos:start="475:27" pos:end="475:28"><literal type="string" pos:start="475:27" pos:end="475:28">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="479:9" pos:end="479:14">break;</break>

    <case pos:start="481:5" pos:end="481:13">case <expr pos:start="481:10" pos:end="481:12"><literal type="char" pos:start="481:10" pos:end="481:12">'q'</literal></expr>:</case>

    <case pos:start="483:5" pos:end="483:13">case <expr pos:start="483:10" pos:end="483:12"><literal type="char" pos:start="483:10" pos:end="483:12">'Q'</literal></expr>:</case>

        <comment type="block" pos:start="485:9" pos:end="485:40">/* parse any 'q' packets here */</comment>

        <if_stmt pos:start="487:9" pos:end="560:0"><if pos:start="487:9" pos:end="503:9">if <condition pos:start="487:12" pos:end="487:40">(<expr pos:start="487:13" pos:end="487:39"><operator pos:start="487:13" pos:end="487:13">!</operator><call pos:start="487:14" pos:end="487:39"><name pos:start="487:14" pos:end="487:19">strcmp</name><argument_list pos:start="487:20" pos:end="487:39">(<argument pos:start="487:21" pos:end="487:21"><expr pos:start="487:21" pos:end="487:21"><name pos:start="487:21" pos:end="487:21">p</name></expr></argument>,<argument pos:start="487:23" pos:end="487:38"><expr pos:start="487:23" pos:end="487:38"><literal type="string" pos:start="487:23" pos:end="487:38">"qemu.sstepbits"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="487:42" pos:end="503:9">{<block_content pos:start="491:13" pos:end="501:18">

            <comment type="block" pos:start="489:13" pos:end="489:50">/* Query Breakpoint bit definitions */</comment>

            <expr_stmt pos:start="491:13" pos:end="497:36"><expr pos:start="491:13" pos:end="497:35"><call pos:start="491:13" pos:end="497:35"><name pos:start="491:13" pos:end="491:20">snprintf</name><argument_list pos:start="491:21" pos:end="497:35">(<argument pos:start="491:22" pos:end="491:24"><expr pos:start="491:22" pos:end="491:24"><name pos:start="491:22" pos:end="491:24">buf</name></expr></argument>, <argument pos:start="491:27" pos:end="491:37"><expr pos:start="491:27" pos:end="491:37"><sizeof pos:start="491:27" pos:end="491:37">sizeof<argument_list pos:start="491:33" pos:end="491:37">(<argument pos:start="491:34" pos:end="491:36"><expr pos:start="491:34" pos:end="491:36"><name pos:start="491:34" pos:end="491:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="491:40" pos:end="491:70"><expr pos:start="491:40" pos:end="491:70"><literal type="string" pos:start="491:40" pos:end="491:70">"ENABLE=%x,NOIRQ=%x,NOTIMER=%x"</literal></expr></argument>,

                     <argument pos:start="493:22" pos:end="493:33"><expr pos:start="493:22" pos:end="493:33"><name pos:start="493:22" pos:end="493:33">SSTEP_ENABLE</name></expr></argument>,

                     <argument pos:start="495:22" pos:end="495:32"><expr pos:start="495:22" pos:end="495:32"><name pos:start="495:22" pos:end="495:32">SSTEP_NOIRQ</name></expr></argument>,

                     <argument pos:start="497:22" pos:end="497:34"><expr pos:start="497:22" pos:end="497:34"><name pos:start="497:22" pos:end="497:34">SSTEP_NOTIMER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="499:13" pos:end="499:31"><expr pos:start="499:13" pos:end="499:30"><call pos:start="499:13" pos:end="499:30"><name pos:start="499:13" pos:end="499:22">put_packet</name><argument_list pos:start="499:23" pos:end="499:30">(<argument pos:start="499:24" pos:end="499:24"><expr pos:start="499:24" pos:end="499:24"><name pos:start="499:24" pos:end="499:24">s</name></expr></argument>, <argument pos:start="499:27" pos:end="499:29"><expr pos:start="499:27" pos:end="499:29"><name pos:start="499:27" pos:end="499:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="501:13" pos:end="501:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="503:11" pos:end="534:0">else if <condition pos:start="503:19" pos:end="503:51">(<expr pos:start="503:20" pos:end="503:50"><call pos:start="503:20" pos:end="503:45"><name pos:start="503:20" pos:end="503:26">strncmp</name><argument_list pos:start="503:27" pos:end="503:45">(<argument pos:start="503:28" pos:end="503:28"><expr pos:start="503:28" pos:end="503:28"><name pos:start="503:28" pos:end="503:28">p</name></expr></argument>,<argument pos:start="503:30" pos:end="503:41"><expr pos:start="503:30" pos:end="503:41"><literal type="string" pos:start="503:30" pos:end="503:41">"qemu.sstep"</literal></expr></argument>,<argument pos:start="503:43" pos:end="503:44"><expr pos:start="503:43" pos:end="503:44"><literal type="number" pos:start="503:43" pos:end="503:44">10</literal></expr></argument>)</argument_list></call> <operator pos:start="503:47" pos:end="503:48">==</operator> <literal type="number" pos:start="503:50" pos:end="503:50">0</literal></expr>)</condition> <block pos:start="503:53" pos:end="534:0">{<block_content pos:start="507:13" pos:end="529:18">

            <comment type="block" pos:start="505:13" pos:end="505:51">/* Display or change the sstep_flags */</comment>

            <expr_stmt pos:start="507:13" pos:end="507:20"><expr pos:start="507:13" pos:end="507:19"><name pos:start="507:13" pos:end="507:13">p</name> <operator pos:start="507:15" pos:end="507:16">+=</operator> <literal type="number" pos:start="507:18" pos:end="507:19">10</literal></expr>;</expr_stmt>

            <if_stmt pos:start="509:13" pos:end="519:13"><if pos:start="509:13" pos:end="519:13">if <condition pos:start="509:16" pos:end="509:26">(<expr pos:start="509:17" pos:end="509:25"><operator pos:start="509:17" pos:end="509:17">*</operator><name pos:start="509:18" pos:end="509:18">p</name> <operator pos:start="509:20" pos:end="509:21">!=</operator> <literal type="char" pos:start="509:23" pos:end="509:25">'='</literal></expr>)</condition> <block pos:start="509:28" pos:end="519:13">{<block_content pos:start="513:17" pos:end="517:22">

                <comment type="block" pos:start="511:17" pos:end="511:45">/* Display current setting */</comment>

                <expr_stmt pos:start="513:17" pos:end="513:64"><expr pos:start="513:17" pos:end="513:63"><call pos:start="513:17" pos:end="513:63"><name pos:start="513:17" pos:end="513:24">snprintf</name><argument_list pos:start="513:25" pos:end="513:63">(<argument pos:start="513:26" pos:end="513:28"><expr pos:start="513:26" pos:end="513:28"><name pos:start="513:26" pos:end="513:28">buf</name></expr></argument>, <argument pos:start="513:31" pos:end="513:41"><expr pos:start="513:31" pos:end="513:41"><sizeof pos:start="513:31" pos:end="513:41">sizeof<argument_list pos:start="513:37" pos:end="513:41">(<argument pos:start="513:38" pos:end="513:40"><expr pos:start="513:38" pos:end="513:40"><name pos:start="513:38" pos:end="513:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="513:44" pos:end="513:49"><expr pos:start="513:44" pos:end="513:49"><literal type="string" pos:start="513:44" pos:end="513:49">"0x%x"</literal></expr></argument>, <argument pos:start="513:52" pos:end="513:62"><expr pos:start="513:52" pos:end="513:62"><name pos:start="513:52" pos:end="513:62">sstep_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="515:17" pos:end="515:35"><expr pos:start="515:17" pos:end="515:34"><call pos:start="515:17" pos:end="515:34"><name pos:start="515:17" pos:end="515:26">put_packet</name><argument_list pos:start="515:27" pos:end="515:34">(<argument pos:start="515:28" pos:end="515:28"><expr pos:start="515:28" pos:end="515:28"><name pos:start="515:28" pos:end="515:28">s</name></expr></argument>, <argument pos:start="515:31" pos:end="515:33"><expr pos:start="515:31" pos:end="515:33"><name pos:start="515:31" pos:end="515:33">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="517:17" pos:end="517:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="521:13" pos:end="521:16"><expr pos:start="521:13" pos:end="521:15"><name pos:start="521:13" pos:end="521:13">p</name><operator pos:start="521:14" pos:end="521:15">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="523:13" pos:end="523:47"><expr pos:start="523:13" pos:end="523:46"><name pos:start="523:13" pos:end="523:16">type</name> <operator pos:start="523:18" pos:end="523:18">=</operator> <call pos:start="523:20" pos:end="523:46"><name pos:start="523:20" pos:end="523:26">strtoul</name><argument_list pos:start="523:27" pos:end="523:46">(<argument pos:start="523:28" pos:end="523:28"><expr pos:start="523:28" pos:end="523:28"><name pos:start="523:28" pos:end="523:28">p</name></expr></argument>, <argument pos:start="523:31" pos:end="523:41"><expr pos:start="523:31" pos:end="523:41"><operator pos:start="523:31" pos:end="523:31">(</operator><name pos:start="523:32" pos:end="523:35">char</name> <operator pos:start="523:37" pos:end="523:37">*</operator><operator pos:start="523:38" pos:end="523:38">*</operator><operator pos:start="523:39" pos:end="523:39">)</operator><operator pos:start="523:40" pos:end="523:40">&amp;</operator><name pos:start="523:41" pos:end="523:41">p</name></expr></argument>, <argument pos:start="523:44" pos:end="523:45"><expr pos:start="523:44" pos:end="523:45"><literal type="number" pos:start="523:44" pos:end="523:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="525:13" pos:end="525:31"><expr pos:start="525:13" pos:end="525:30"><name pos:start="525:13" pos:end="525:23">sstep_flags</name> <operator pos:start="525:25" pos:end="525:25">=</operator> <name pos:start="525:27" pos:end="525:30">type</name></expr>;</expr_stmt>

            <expr_stmt pos:start="527:13" pos:end="527:32"><expr pos:start="527:13" pos:end="527:31"><call pos:start="527:13" pos:end="527:31"><name pos:start="527:13" pos:end="527:22">put_packet</name><argument_list pos:start="527:23" pos:end="527:31">(<argument pos:start="527:24" pos:end="527:24"><expr pos:start="527:24" pos:end="527:24"><name pos:start="527:24" pos:end="527:24">s</name></expr></argument>, <argument pos:start="527:27" pos:end="527:30"><expr pos:start="527:27" pos:end="527:30"><literal type="string" pos:start="527:27" pos:end="527:30">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="529:13" pos:end="529:18">break;</break>

        </block_content>}</block></if>

<cpp:ifdef pos:start="533:1" pos:end="533:24">#<cpp:directive pos:start="533:2" pos:end="533:6">ifdef</cpp:directive> <name pos:start="533:8" pos:end="533:24">CONFIG_LINUX_USER</name></cpp:ifdef>

        <if type="elseif" pos:start="535:9" pos:end="560:0">else if <condition pos:start="535:17" pos:end="535:47">(<expr pos:start="535:18" pos:end="535:46"><call pos:start="535:18" pos:end="535:41"><name pos:start="535:18" pos:end="535:24">strncmp</name><argument_list pos:start="535:25" pos:end="535:41">(<argument pos:start="535:26" pos:end="535:26"><expr pos:start="535:26" pos:end="535:26"><name pos:start="535:26" pos:end="535:26">p</name></expr></argument>, <argument pos:start="535:29" pos:end="535:37"><expr pos:start="535:29" pos:end="535:37"><literal type="string" pos:start="535:29" pos:end="535:37">"Offsets"</literal></expr></argument>, <argument pos:start="535:40" pos:end="535:40"><expr pos:start="535:40" pos:end="535:40"><literal type="number" pos:start="535:40" pos:end="535:40">7</literal></expr></argument>)</argument_list></call> <operator pos:start="535:43" pos:end="535:44">==</operator> <literal type="number" pos:start="535:46" pos:end="535:46">0</literal></expr>)</condition> <block pos:start="535:49" pos:end="560:0">{<block_content pos:start="537:13" pos:end="555:18">

            <decl_stmt pos:start="537:13" pos:end="537:40"><decl pos:start="537:13" pos:end="537:39"><type pos:start="537:13" pos:end="537:23"><name pos:start="537:13" pos:end="537:21">TaskState</name> <modifier pos:start="537:23" pos:end="537:23">*</modifier></type><name pos:start="537:24" pos:end="537:25">ts</name> <init pos:start="537:27" pos:end="537:39">= <expr pos:start="537:29" pos:end="537:39"><name pos:start="537:29" pos:end="537:39"><name pos:start="537:29" pos:end="537:31">env</name><operator pos:start="537:32" pos:end="537:33">-&gt;</operator><name pos:start="537:34" pos:end="537:39">opaque</name></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="541:13" pos:end="551:44"><expr pos:start="541:13" pos:end="551:43"><call pos:start="541:13" pos:end="551:43"><name pos:start="541:13" pos:end="541:20">snprintf</name><argument_list pos:start="541:21" pos:end="551:43">(<argument pos:start="541:22" pos:end="541:24"><expr pos:start="541:22" pos:end="541:24"><name pos:start="541:22" pos:end="541:24">buf</name></expr></argument>, <argument pos:start="541:27" pos:end="541:37"><expr pos:start="541:27" pos:end="541:37"><sizeof pos:start="541:27" pos:end="541:37">sizeof<argument_list pos:start="541:33" pos:end="541:37">(<argument pos:start="541:34" pos:end="541:36"><expr pos:start="541:34" pos:end="541:36"><name pos:start="541:34" pos:end="541:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                     <argument pos:start="543:22" pos:end="545:46"><expr pos:start="543:22" pos:end="545:46"><literal type="string" pos:start="543:22" pos:end="543:28">"Text="</literal> <name pos:start="543:30" pos:end="543:46">TARGET_ABI_FMT_lx</name> <literal type="string" pos:start="543:48" pos:end="543:55">";Data="</literal> <name pos:start="543:57" pos:end="543:73">TARGET_ABI_FMT_lx</name>

                     <literal type="string" pos:start="545:22" pos:end="545:28">";Bss="</literal> <name pos:start="545:30" pos:end="545:46">TARGET_ABI_FMT_lx</name></expr></argument>,

                     <argument pos:start="547:22" pos:end="547:42"><expr pos:start="547:22" pos:end="547:42"><name pos:start="547:22" pos:end="547:42"><name pos:start="547:22" pos:end="547:23">ts</name><operator pos:start="547:24" pos:end="547:25">-&gt;</operator><name pos:start="547:26" pos:end="547:29">info</name><operator pos:start="547:30" pos:end="547:31">-&gt;</operator><name pos:start="547:32" pos:end="547:42">code_offset</name></name></expr></argument>,

                     <argument pos:start="549:22" pos:end="549:42"><expr pos:start="549:22" pos:end="549:42"><name pos:start="549:22" pos:end="549:42"><name pos:start="549:22" pos:end="549:23">ts</name><operator pos:start="549:24" pos:end="549:25">-&gt;</operator><name pos:start="549:26" pos:end="549:29">info</name><operator pos:start="549:30" pos:end="549:31">-&gt;</operator><name pos:start="549:32" pos:end="549:42">data_offset</name></name></expr></argument>,

                     <argument pos:start="551:22" pos:end="551:42"><expr pos:start="551:22" pos:end="551:42"><name pos:start="551:22" pos:end="551:42"><name pos:start="551:22" pos:end="551:23">ts</name><operator pos:start="551:24" pos:end="551:25">-&gt;</operator><name pos:start="551:26" pos:end="551:29">info</name><operator pos:start="551:30" pos:end="551:31">-&gt;</operator><name pos:start="551:32" pos:end="551:42">data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="553:13" pos:end="553:31"><expr pos:start="553:13" pos:end="553:30"><call pos:start="553:13" pos:end="553:30"><name pos:start="553:13" pos:end="553:22">put_packet</name><argument_list pos:start="553:23" pos:end="553:30">(<argument pos:start="553:24" pos:end="553:24"><expr pos:start="553:24" pos:end="553:24"><name pos:start="553:24" pos:end="553:24">s</name></expr></argument>, <argument pos:start="553:27" pos:end="553:29"><expr pos:start="553:27" pos:end="553:29"><name pos:start="553:27" pos:end="553:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="555:13" pos:end="555:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="559:1" pos:end="559:6">#<cpp:directive pos:start="559:2" pos:end="559:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="561:9" pos:end="578:0"><if pos:start="561:9" pos:end="578:0">if <condition pos:start="561:12" pos:end="561:44">(<expr pos:start="561:13" pos:end="561:43"><call pos:start="561:13" pos:end="561:38"><name pos:start="561:13" pos:end="561:19">strncmp</name><argument_list pos:start="561:20" pos:end="561:38">(<argument pos:start="561:21" pos:end="561:21"><expr pos:start="561:21" pos:end="561:21"><name pos:start="561:21" pos:end="561:21">p</name></expr></argument>, <argument pos:start="561:24" pos:end="561:34"><expr pos:start="561:24" pos:end="561:34"><literal type="string" pos:start="561:24" pos:end="561:34">"Supported"</literal></expr></argument>, <argument pos:start="561:37" pos:end="561:37"><expr pos:start="561:37" pos:end="561:37"><literal type="number" pos:start="561:37" pos:end="561:37">9</literal></expr></argument>)</argument_list></call> <operator pos:start="561:40" pos:end="561:41">==</operator> <literal type="number" pos:start="561:43" pos:end="561:43">0</literal></expr>)</condition> <block pos:start="561:46" pos:end="578:0">{<block_content pos:start="563:13" pos:end="573:18">

            <expr_stmt pos:start="563:13" pos:end="566:0"><expr pos:start="563:13" pos:end="563:60"><call pos:start="563:13" pos:end="563:60"><name pos:start="563:13" pos:end="563:19">sprintf</name><argument_list pos:start="563:20" pos:end="563:60">(<argument pos:start="563:21" pos:end="563:23"><expr pos:start="563:21" pos:end="563:23"><name pos:start="563:21" pos:end="563:23">buf</name></expr></argument>, <argument pos:start="563:26" pos:end="563:40"><expr pos:start="563:26" pos:end="563:40"><literal type="string" pos:start="563:26" pos:end="563:40">"PacketSize=%x"</literal></expr></argument>, <argument pos:start="563:43" pos:end="563:59"><expr pos:start="563:43" pos:end="563:59"><name pos:start="563:43" pos:end="563:59">MAX_PACKET_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="565:1" pos:end="565:19">#<cpp:directive pos:start="565:2" pos:end="565:6">ifdef</cpp:directive> <name pos:start="565:8" pos:end="565:19">GDB_CORE_XML</name></cpp:ifdef>

            <expr_stmt pos:start="567:13" pos:end="570:0"><expr pos:start="567:13" pos:end="567:48"><call pos:start="567:13" pos:end="567:48"><name pos:start="567:13" pos:end="567:18">strcat</name><argument_list pos:start="567:19" pos:end="567:48">(<argument pos:start="567:20" pos:end="567:22"><expr pos:start="567:20" pos:end="567:22"><name pos:start="567:20" pos:end="567:22">buf</name></expr></argument>, <argument pos:start="567:25" pos:end="567:47"><expr pos:start="567:25" pos:end="567:47"><literal type="string" pos:start="567:25" pos:end="567:47">";qXfer:features:read+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="569:1" pos:end="569:6">#<cpp:directive pos:start="569:2" pos:end="569:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="571:13" pos:end="571:31"><expr pos:start="571:13" pos:end="571:30"><call pos:start="571:13" pos:end="571:30"><name pos:start="571:13" pos:end="571:22">put_packet</name><argument_list pos:start="571:23" pos:end="571:30">(<argument pos:start="571:24" pos:end="571:24"><expr pos:start="571:24" pos:end="571:24"><name pos:start="571:24" pos:end="571:24">s</name></expr></argument>, <argument pos:start="571:27" pos:end="571:29"><expr pos:start="571:27" pos:end="571:29"><name pos:start="571:27" pos:end="571:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="573:13" pos:end="573:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:ifdef pos:start="577:1" pos:end="577:19">#<cpp:directive pos:start="577:2" pos:end="577:6">ifdef</cpp:directive> <name pos:start="577:8" pos:end="577:19">GDB_CORE_XML</name></cpp:ifdef>

        <if_stmt pos:start="579:9" pos:end="656:0"><if pos:start="579:9" pos:end="656:0">if <condition pos:start="579:12" pos:end="579:55">(<expr pos:start="579:13" pos:end="579:54"><call pos:start="579:13" pos:end="579:49"><name pos:start="579:13" pos:end="579:19">strncmp</name><argument_list pos:start="579:20" pos:end="579:49">(<argument pos:start="579:21" pos:end="579:21"><expr pos:start="579:21" pos:end="579:21"><name pos:start="579:21" pos:end="579:21">p</name></expr></argument>, <argument pos:start="579:24" pos:end="579:44"><expr pos:start="579:24" pos:end="579:44"><literal type="string" pos:start="579:24" pos:end="579:44">"Xfer:features:read:"</literal></expr></argument>, <argument pos:start="579:47" pos:end="579:48"><expr pos:start="579:47" pos:end="579:48"><literal type="number" pos:start="579:47" pos:end="579:48">19</literal></expr></argument>)</argument_list></call> <operator pos:start="579:51" pos:end="579:52">==</operator> <literal type="number" pos:start="579:54" pos:end="579:54">0</literal></expr>)</condition> <block pos:start="579:57" pos:end="656:0">{<block_content pos:start="581:13" pos:end="651:18">

            <decl_stmt pos:start="581:13" pos:end="581:28"><decl pos:start="581:13" pos:end="581:27"><type pos:start="581:13" pos:end="581:24"><specifier pos:start="581:13" pos:end="581:17">const</specifier> <name pos:start="581:19" pos:end="581:22">char</name> <modifier pos:start="581:24" pos:end="581:24">*</modifier></type><name pos:start="581:25" pos:end="581:27">xml</name></decl>;</decl_stmt>

            <decl_stmt pos:start="583:13" pos:end="583:35"><decl pos:start="583:13" pos:end="583:34"><type pos:start="583:13" pos:end="583:24"><name pos:start="583:13" pos:end="583:24">target_ulong</name></type> <name pos:start="583:26" pos:end="583:34">total_len</name></decl>;</decl_stmt>



            <expr_stmt pos:start="587:13" pos:end="587:28"><expr pos:start="587:13" pos:end="587:27"><name pos:start="587:13" pos:end="587:23">gdb_has_xml</name> <operator pos:start="587:25" pos:end="587:25">=</operator> <literal type="number" pos:start="587:27" pos:end="587:27">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="589:13" pos:end="589:20"><expr pos:start="589:13" pos:end="589:19"><name pos:start="589:13" pos:end="589:13">p</name> <operator pos:start="589:15" pos:end="589:16">+=</operator> <literal type="number" pos:start="589:18" pos:end="589:19">19</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="591:13" pos:end="591:46"><expr pos:start="591:13" pos:end="591:45"><name pos:start="591:13" pos:end="591:15">xml</name> <operator pos:start="591:17" pos:end="591:17">=</operator> <call pos:start="591:19" pos:end="591:45"><name pos:start="591:19" pos:end="591:33">get_feature_xml</name><argument_list pos:start="591:34" pos:end="591:45">(<argument pos:start="591:35" pos:end="591:37"><expr pos:start="591:35" pos:end="591:37"><name pos:start="591:35" pos:end="591:37">env</name></expr></argument>, <argument pos:start="591:40" pos:end="591:40"><expr pos:start="591:40" pos:end="591:40"><name pos:start="591:40" pos:end="591:40">p</name></expr></argument>, <argument pos:start="591:43" pos:end="591:44"><expr pos:start="591:43" pos:end="591:44"><operator pos:start="591:43" pos:end="591:43">&amp;</operator><name pos:start="591:44" pos:end="591:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="593:13" pos:end="601:13"><if pos:start="593:13" pos:end="601:13">if <condition pos:start="593:16" pos:end="593:21">(<expr pos:start="593:17" pos:end="593:20"><operator pos:start="593:17" pos:end="593:17">!</operator><name pos:start="593:18" pos:end="593:20">xml</name></expr>)</condition> <block pos:start="593:23" pos:end="601:13">{<block_content pos:start="595:17" pos:end="599:22">

                <expr_stmt pos:start="595:17" pos:end="595:36"><expr pos:start="595:17" pos:end="595:35"><call pos:start="595:17" pos:end="595:35"><name pos:start="595:17" pos:end="595:23">sprintf</name><argument_list pos:start="595:24" pos:end="595:35">(<argument pos:start="595:25" pos:end="595:27"><expr pos:start="595:25" pos:end="595:27"><name pos:start="595:25" pos:end="595:27">buf</name></expr></argument>, <argument pos:start="595:30" pos:end="595:34"><expr pos:start="595:30" pos:end="595:34"><literal type="string" pos:start="595:30" pos:end="595:34">"E00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="597:17" pos:end="597:35"><expr pos:start="597:17" pos:end="597:34"><call pos:start="597:17" pos:end="597:34"><name pos:start="597:17" pos:end="597:26">put_packet</name><argument_list pos:start="597:27" pos:end="597:34">(<argument pos:start="597:28" pos:end="597:28"><expr pos:start="597:28" pos:end="597:28"><name pos:start="597:28" pos:end="597:28">s</name></expr></argument>, <argument pos:start="597:31" pos:end="597:33"><expr pos:start="597:31" pos:end="597:33"><name pos:start="597:31" pos:end="597:33">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="599:17" pos:end="599:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="605:13" pos:end="607:20"><if pos:start="605:13" pos:end="607:20">if <condition pos:start="605:16" pos:end="605:26">(<expr pos:start="605:17" pos:end="605:25"><operator pos:start="605:17" pos:end="605:17">*</operator><name pos:start="605:18" pos:end="605:18">p</name> <operator pos:start="605:20" pos:end="605:21">==</operator> <literal type="char" pos:start="605:23" pos:end="605:25">':'</literal></expr>)</condition><block type="pseudo" pos:start="607:17" pos:end="607:20"><block_content pos:start="607:17" pos:end="607:20">

                <expr_stmt pos:start="607:17" pos:end="607:20"><expr pos:start="607:17" pos:end="607:19"><name pos:start="607:17" pos:end="607:17">p</name><operator pos:start="607:18" pos:end="607:19">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="609:13" pos:end="609:47"><expr pos:start="609:13" pos:end="609:46"><name pos:start="609:13" pos:end="609:16">addr</name> <operator pos:start="609:18" pos:end="609:18">=</operator> <call pos:start="609:20" pos:end="609:46"><name pos:start="609:20" pos:end="609:26">strtoul</name><argument_list pos:start="609:27" pos:end="609:46">(<argument pos:start="609:28" pos:end="609:28"><expr pos:start="609:28" pos:end="609:28"><name pos:start="609:28" pos:end="609:28">p</name></expr></argument>, <argument pos:start="609:31" pos:end="609:41"><expr pos:start="609:31" pos:end="609:41"><operator pos:start="609:31" pos:end="609:31">(</operator><name pos:start="609:32" pos:end="609:35">char</name> <operator pos:start="609:37" pos:end="609:37">*</operator><operator pos:start="609:38" pos:end="609:38">*</operator><operator pos:start="609:39" pos:end="609:39">)</operator><operator pos:start="609:40" pos:end="609:40">&amp;</operator><name pos:start="609:41" pos:end="609:41">p</name></expr></argument>, <argument pos:start="609:44" pos:end="609:45"><expr pos:start="609:44" pos:end="609:45"><literal type="number" pos:start="609:44" pos:end="609:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="611:13" pos:end="613:20"><if pos:start="611:13" pos:end="613:20">if <condition pos:start="611:16" pos:end="611:26">(<expr pos:start="611:17" pos:end="611:25"><operator pos:start="611:17" pos:end="611:17">*</operator><name pos:start="611:18" pos:end="611:18">p</name> <operator pos:start="611:20" pos:end="611:21">==</operator> <literal type="char" pos:start="611:23" pos:end="611:25">','</literal></expr>)</condition><block type="pseudo" pos:start="613:17" pos:end="613:20"><block_content pos:start="613:17" pos:end="613:20">

                <expr_stmt pos:start="613:17" pos:end="613:20"><expr pos:start="613:17" pos:end="613:19"><name pos:start="613:17" pos:end="613:17">p</name><operator pos:start="613:18" pos:end="613:19">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="615:13" pos:end="615:46"><expr pos:start="615:13" pos:end="615:45"><name pos:start="615:13" pos:end="615:15">len</name> <operator pos:start="615:17" pos:end="615:17">=</operator> <call pos:start="615:19" pos:end="615:45"><name pos:start="615:19" pos:end="615:25">strtoul</name><argument_list pos:start="615:26" pos:end="615:45">(<argument pos:start="615:27" pos:end="615:27"><expr pos:start="615:27" pos:end="615:27"><name pos:start="615:27" pos:end="615:27">p</name></expr></argument>, <argument pos:start="615:30" pos:end="615:40"><expr pos:start="615:30" pos:end="615:40"><operator pos:start="615:30" pos:end="615:30">(</operator><name pos:start="615:31" pos:end="615:34">char</name> <operator pos:start="615:36" pos:end="615:36">*</operator><operator pos:start="615:37" pos:end="615:37">*</operator><operator pos:start="615:38" pos:end="615:38">)</operator><operator pos:start="615:39" pos:end="615:39">&amp;</operator><name pos:start="615:40" pos:end="615:40">p</name></expr></argument>, <argument pos:start="615:43" pos:end="615:44"><expr pos:start="615:43" pos:end="615:44"><literal type="number" pos:start="615:43" pos:end="615:44">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="619:13" pos:end="619:36"><expr pos:start="619:13" pos:end="619:35"><name pos:start="619:13" pos:end="619:21">total_len</name> <operator pos:start="619:23" pos:end="619:23">=</operator> <call pos:start="619:25" pos:end="619:35"><name pos:start="619:25" pos:end="619:30">strlen</name><argument_list pos:start="619:31" pos:end="619:35">(<argument pos:start="619:32" pos:end="619:34"><expr pos:start="619:32" pos:end="619:34"><name pos:start="619:32" pos:end="619:34">xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="621:13" pos:end="629:13"><if pos:start="621:13" pos:end="629:13">if <condition pos:start="621:16" pos:end="621:33">(<expr pos:start="621:17" pos:end="621:32"><name pos:start="621:17" pos:end="621:20">addr</name> <operator pos:start="621:22" pos:end="621:22">&gt;</operator> <name pos:start="621:24" pos:end="621:32">total_len</name></expr>)</condition> <block pos:start="621:35" pos:end="629:13">{<block_content pos:start="623:17" pos:end="627:22">

                <expr_stmt pos:start="623:17" pos:end="623:36"><expr pos:start="623:17" pos:end="623:35"><call pos:start="623:17" pos:end="623:35"><name pos:start="623:17" pos:end="623:23">sprintf</name><argument_list pos:start="623:24" pos:end="623:35">(<argument pos:start="623:25" pos:end="623:27"><expr pos:start="623:25" pos:end="623:27"><name pos:start="623:25" pos:end="623:27">buf</name></expr></argument>, <argument pos:start="623:30" pos:end="623:34"><expr pos:start="623:30" pos:end="623:34"><literal type="string" pos:start="623:30" pos:end="623:34">"E00"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="625:17" pos:end="625:35"><expr pos:start="625:17" pos:end="625:34"><call pos:start="625:17" pos:end="625:34"><name pos:start="625:17" pos:end="625:26">put_packet</name><argument_list pos:start="625:27" pos:end="625:34">(<argument pos:start="625:28" pos:end="625:28"><expr pos:start="625:28" pos:end="625:28"><name pos:start="625:28" pos:end="625:28">s</name></expr></argument>, <argument pos:start="625:31" pos:end="625:33"><expr pos:start="625:31" pos:end="625:33"><name pos:start="625:31" pos:end="625:33">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="627:17" pos:end="627:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="631:13" pos:end="633:50"><if pos:start="631:13" pos:end="633:50">if <condition pos:start="631:16" pos:end="631:50">(<expr pos:start="631:17" pos:end="631:49"><name pos:start="631:17" pos:end="631:19">len</name> <operator pos:start="631:21" pos:end="631:21">&gt;</operator> <operator pos:start="631:23" pos:end="631:23">(</operator><name pos:start="631:24" pos:end="631:40">MAX_PACKET_LENGTH</name> <operator pos:start="631:42" pos:end="631:42">-</operator> <literal type="number" pos:start="631:44" pos:end="631:44">5</literal><operator pos:start="631:45" pos:end="631:45">)</operator> <operator pos:start="631:47" pos:end="631:47">/</operator> <literal type="number" pos:start="631:49" pos:end="631:49">2</literal></expr>)</condition><block type="pseudo" pos:start="633:17" pos:end="633:50"><block_content pos:start="633:17" pos:end="633:50">

                <expr_stmt pos:start="633:17" pos:end="633:50"><expr pos:start="633:17" pos:end="633:49"><name pos:start="633:17" pos:end="633:19">len</name> <operator pos:start="633:21" pos:end="633:21">=</operator> <operator pos:start="633:23" pos:end="633:23">(</operator><name pos:start="633:24" pos:end="633:40">MAX_PACKET_LENGTH</name> <operator pos:start="633:42" pos:end="633:42">-</operator> <literal type="number" pos:start="633:44" pos:end="633:44">5</literal><operator pos:start="633:45" pos:end="633:45">)</operator> <operator pos:start="633:47" pos:end="633:47">/</operator> <literal type="number" pos:start="633:49" pos:end="633:49">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="635:13" pos:end="647:13"><if pos:start="635:13" pos:end="641:13">if <condition pos:start="635:16" pos:end="635:39">(<expr pos:start="635:17" pos:end="635:38"><name pos:start="635:17" pos:end="635:19">len</name> <operator pos:start="635:21" pos:end="635:21">&lt;</operator> <name pos:start="635:23" pos:end="635:31">total_len</name> <operator pos:start="635:33" pos:end="635:33">-</operator> <name pos:start="635:35" pos:end="635:38">addr</name></expr>)</condition> <block pos:start="635:41" pos:end="641:13">{<block_content pos:start="637:17" pos:end="639:55">

                <expr_stmt pos:start="637:17" pos:end="637:29"><expr pos:start="637:17" pos:end="637:28"><name pos:start="637:17" pos:end="637:22"><name pos:start="637:17" pos:end="637:19">buf</name><index pos:start="637:20" pos:end="637:22">[<expr pos:start="637:21" pos:end="637:21"><literal type="number" pos:start="637:21" pos:end="637:21">0</literal></expr>]</index></name> <operator pos:start="637:24" pos:end="637:24">=</operator> <literal type="char" pos:start="637:26" pos:end="637:28">'m'</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="639:17" pos:end="639:55"><expr pos:start="639:17" pos:end="639:54"><name pos:start="639:17" pos:end="639:19">len</name> <operator pos:start="639:21" pos:end="639:21">=</operator> <call pos:start="639:23" pos:end="639:54"><name pos:start="639:23" pos:end="639:28">memtox</name><argument_list pos:start="639:29" pos:end="639:54">(<argument pos:start="639:30" pos:end="639:36"><expr pos:start="639:30" pos:end="639:36"><name pos:start="639:30" pos:end="639:32">buf</name> <operator pos:start="639:34" pos:end="639:34">+</operator> <literal type="number" pos:start="639:36" pos:end="639:36">1</literal></expr></argument>, <argument pos:start="639:39" pos:end="639:48"><expr pos:start="639:39" pos:end="639:48"><name pos:start="639:39" pos:end="639:41">xml</name> <operator pos:start="639:43" pos:end="639:43">+</operator> <name pos:start="639:45" pos:end="639:48">addr</name></expr></argument>, <argument pos:start="639:51" pos:end="639:53"><expr pos:start="639:51" pos:end="639:53"><name pos:start="639:51" pos:end="639:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="641:15" pos:end="647:13">else <block pos:start="641:20" pos:end="647:13">{<block_content pos:start="643:17" pos:end="645:68">

                <expr_stmt pos:start="643:17" pos:end="643:29"><expr pos:start="643:17" pos:end="643:28"><name pos:start="643:17" pos:end="643:22"><name pos:start="643:17" pos:end="643:19">buf</name><index pos:start="643:20" pos:end="643:22">[<expr pos:start="643:21" pos:end="643:21"><literal type="number" pos:start="643:21" pos:end="643:21">0</literal></expr>]</index></name> <operator pos:start="643:24" pos:end="643:24">=</operator> <literal type="char" pos:start="643:26" pos:end="643:28">'l'</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="645:17" pos:end="645:68"><expr pos:start="645:17" pos:end="645:67"><name pos:start="645:17" pos:end="645:19">len</name> <operator pos:start="645:21" pos:end="645:21">=</operator> <call pos:start="645:23" pos:end="645:67"><name pos:start="645:23" pos:end="645:28">memtox</name><argument_list pos:start="645:29" pos:end="645:67">(<argument pos:start="645:30" pos:end="645:36"><expr pos:start="645:30" pos:end="645:36"><name pos:start="645:30" pos:end="645:32">buf</name> <operator pos:start="645:34" pos:end="645:34">+</operator> <literal type="number" pos:start="645:36" pos:end="645:36">1</literal></expr></argument>, <argument pos:start="645:39" pos:end="645:48"><expr pos:start="645:39" pos:end="645:48"><name pos:start="645:39" pos:end="645:41">xml</name> <operator pos:start="645:43" pos:end="645:43">+</operator> <name pos:start="645:45" pos:end="645:48">addr</name></expr></argument>, <argument pos:start="645:51" pos:end="645:66"><expr pos:start="645:51" pos:end="645:66"><name pos:start="645:51" pos:end="645:59">total_len</name> <operator pos:start="645:61" pos:end="645:61">-</operator> <name pos:start="645:63" pos:end="645:66">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="649:13" pos:end="649:47"><expr pos:start="649:13" pos:end="649:46"><call pos:start="649:13" pos:end="649:46"><name pos:start="649:13" pos:end="649:29">put_packet_binary</name><argument_list pos:start="649:30" pos:end="649:46">(<argument pos:start="649:31" pos:end="649:31"><expr pos:start="649:31" pos:end="649:31"><name pos:start="649:31" pos:end="649:31">s</name></expr></argument>, <argument pos:start="649:34" pos:end="649:36"><expr pos:start="649:34" pos:end="649:36"><name pos:start="649:34" pos:end="649:36">buf</name></expr></argument>, <argument pos:start="649:39" pos:end="649:45"><expr pos:start="649:39" pos:end="649:45"><name pos:start="649:39" pos:end="649:41">len</name> <operator pos:start="649:43" pos:end="649:43">+</operator> <literal type="number" pos:start="649:45" pos:end="649:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="651:13" pos:end="651:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="655:1" pos:end="655:6">#<cpp:directive pos:start="655:2" pos:end="655:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="657:9" pos:end="657:40">/* Unrecognised 'q' command.  */</comment>

        <goto pos:start="659:9" pos:end="659:29">goto <name pos:start="659:14" pos:end="659:28">unknown_command</name>;</goto>



    <default pos:start="663:5" pos:end="663:12">default:</default>

    <label pos:start="665:5" pos:end="665:20"><name pos:start="665:5" pos:end="665:19">unknown_command</name>:</label>

        <comment type="block" pos:start="667:9" pos:end="667:30">/* put empty packet */</comment>

        <expr_stmt pos:start="669:9" pos:end="669:22"><expr pos:start="669:9" pos:end="669:21"><name pos:start="669:9" pos:end="669:14"><name pos:start="669:9" pos:end="669:11">buf</name><index pos:start="669:12" pos:end="669:14">[<expr pos:start="669:13" pos:end="669:13"><literal type="number" pos:start="669:13" pos:end="669:13">0</literal></expr>]</index></name> <operator pos:start="669:16" pos:end="669:16">=</operator> <literal type="char" pos:start="669:18" pos:end="669:21">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="671:9" pos:end="671:27"><expr pos:start="671:9" pos:end="671:26"><call pos:start="671:9" pos:end="671:26"><name pos:start="671:9" pos:end="671:18">put_packet</name><argument_list pos:start="671:19" pos:end="671:26">(<argument pos:start="671:20" pos:end="671:20"><expr pos:start="671:20" pos:end="671:20"><name pos:start="671:20" pos:end="671:20">s</name></expr></argument>, <argument pos:start="671:23" pos:end="671:25"><expr pos:start="671:23" pos:end="671:25"><name pos:start="671:23" pos:end="671:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="673:9" pos:end="673:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="677:5" pos:end="677:19">return <expr pos:start="677:12" pos:end="677:18"><name pos:start="677:12" pos:end="677:18">RS_IDLE</name></expr>;</return>

</block_content>}</block></function>
</unit>
