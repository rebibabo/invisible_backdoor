<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3928.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">cpu_exec_init</name><parameter_list pos:start="1:19" pos:end="1:47">(<parameter pos:start="1:20" pos:end="1:32"><decl pos:start="1:20" pos:end="1:32"><type pos:start="1:20" pos:end="1:32"><name pos:start="1:20" pos:end="1:27">CPUState</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">cpu</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:39">Error</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier><modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:5">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUClass</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cc</name> <init pos:start="5:18" pos:end="5:37">= <expr pos:start="5:20" pos:end="5:37"><call pos:start="5:20" pos:end="5:37"><name pos:start="5:20" pos:end="5:32">CPU_GET_CLASS</name><argument_list pos:start="5:33" pos:end="5:37">(<argument pos:start="5:34" pos:end="5:36"><expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">cpu_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>



<cpp:ifndef pos:start="13:1" pos:end="13:24">#<cpp:directive pos:start="13:2" pos:end="13:7">ifndef</cpp:directive> <name pos:start="13:9" pos:end="13:24">CONFIG_USER_ONLY</name></cpp:ifndef>

    <expr_stmt pos:start="15:5" pos:end="15:36"><expr pos:start="15:5" pos:end="15:35"><name pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:7">cpu</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:11">as</name></name> <operator pos:start="15:13" pos:end="15:13">=</operator> <operator pos:start="15:15" pos:end="15:15">&amp;</operator><name pos:start="15:16" pos:end="15:35">address_space_memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="24:0"><expr pos:start="17:5" pos:end="17:41"><name pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:7">cpu</name><operator pos:start="17:8" pos:end="17:9">-&gt;</operator><name pos:start="17:10" pos:end="17:18">thread_id</name></name> <operator pos:start="17:20" pos:end="17:20">=</operator> <call pos:start="17:22" pos:end="17:41"><name pos:start="17:22" pos:end="17:39">qemu_get_thread_id</name><argument_list pos:start="17:40" pos:end="17:41">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="23:1" pos:end="23:29">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:29"><call pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:11">defined</name><argument_list pos:start="23:12" pos:end="23:29">(<argument pos:start="23:13" pos:end="23:28"><expr pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="25:5" pos:end="28:0"><expr pos:start="25:5" pos:end="25:19"><call pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:17">cpu_list_lock</name><argument_list pos:start="25:18" pos:end="25:19">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="29:5" pos:end="29:64"><expr pos:start="29:5" pos:end="29:63"><name pos:start="29:5" pos:end="29:13">cpu_index</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:30"><name pos:start="29:17" pos:end="29:19">cpu</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:30">cpu_index</name></name> <operator pos:start="29:32" pos:end="29:32">=</operator> <call pos:start="29:34" pos:end="29:63"><name pos:start="29:34" pos:end="29:51">cpu_get_free_index</name><argument_list pos:start="29:52" pos:end="29:63">(<argument pos:start="29:53" pos:end="29:62"><expr pos:start="29:53" pos:end="29:62"><operator pos:start="29:53" pos:end="29:53">&amp;</operator><name pos:start="29:54" pos:end="29:62">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="43:5"><if pos:start="31:5" pos:end="43:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:17">local_err</name></expr>)</condition> <block pos:start="31:20" pos:end="43:5">{<block_content pos:start="33:9" pos:end="41:15">

        <expr_stmt pos:start="33:9" pos:end="36:0"><expr pos:start="33:9" pos:end="33:40"><call pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:23">error_propagate</name><argument_list pos:start="33:24" pos:end="33:40">(<argument pos:start="33:25" pos:end="33:28"><expr pos:start="33:25" pos:end="33:28"><name pos:start="33:25" pos:end="33:28">errp</name></expr></argument>, <argument pos:start="33:31" pos:end="33:39"><expr pos:start="33:31" pos:end="33:39"><name pos:start="33:31" pos:end="33:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="35:1" pos:end="35:29">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:29"><call pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:11">defined</name><argument_list pos:start="35:12" pos:end="35:29">(<argument pos:start="35:13" pos:end="35:28"><expr pos:start="35:13" pos:end="35:28"><name pos:start="35:13" pos:end="35:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="37:9" pos:end="40:0"><expr pos:start="37:9" pos:end="37:25"><call pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:23">cpu_list_unlock</name><argument_list pos:start="37:24" pos:end="37:25">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="48:0"><expr pos:start="45:5" pos:end="45:40"><call pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="45:23" pos:end="45:40">(<argument pos:start="45:24" pos:end="45:28"><expr pos:start="45:24" pos:end="45:28"><operator pos:start="45:24" pos:end="45:24">&amp;</operator><name pos:start="45:25" pos:end="45:28">cpus</name></expr></argument>, <argument pos:start="45:31" pos:end="45:33"><expr pos:start="45:31" pos:end="45:33"><name pos:start="45:31" pos:end="45:33">cpu</name></expr></argument>, <argument pos:start="45:36" pos:end="45:39"><expr pos:start="45:36" pos:end="45:39"><name pos:start="45:36" pos:end="45:39">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="47:1" pos:end="47:29">#<cpp:directive pos:start="47:2" pos:end="47:3">if</cpp:directive> <expr pos:start="47:5" pos:end="47:29"><call pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:11">defined</name><argument_list pos:start="47:12" pos:end="47:29">(<argument pos:start="47:13" pos:end="47:28"><expr pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:21"><call pos:start="49:5" pos:end="49:21"><name pos:start="49:5" pos:end="49:19">cpu_list_unlock</name><argument_list pos:start="49:20" pos:end="49:21">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="53:5" pos:end="60:0"><if pos:start="53:5" pos:end="60:0">if <condition pos:start="53:8" pos:end="53:43">(<expr pos:start="53:9" pos:end="53:42"><call pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:21">qdev_get_vmsd</name><argument_list pos:start="53:22" pos:end="53:34">(<argument pos:start="53:23" pos:end="53:33"><expr pos:start="53:23" pos:end="53:33"><call pos:start="53:23" pos:end="53:33"><name pos:start="53:23" pos:end="53:28">DEVICE</name><argument_list pos:start="53:29" pos:end="53:33">(<argument pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:32">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="53:36" pos:end="53:37">==</operator> <name pos:start="53:39" pos:end="53:42">NULL</name></expr>)</condition> <block pos:start="53:45" pos:end="60:0">{<block_content pos:start="55:9" pos:end="55:68">

        <expr_stmt pos:start="55:9" pos:end="55:68"><expr pos:start="55:9" pos:end="55:67"><call pos:start="55:9" pos:end="55:67"><name pos:start="55:9" pos:end="55:24">vmstate_register</name><argument_list pos:start="55:25" pos:end="55:67">(<argument pos:start="55:26" pos:end="55:29"><expr pos:start="55:26" pos:end="55:29"><name pos:start="55:26" pos:end="55:29">NULL</name></expr></argument>, <argument pos:start="55:32" pos:end="55:40"><expr pos:start="55:32" pos:end="55:40"><name pos:start="55:32" pos:end="55:40">cpu_index</name></expr></argument>, <argument pos:start="55:43" pos:end="55:61"><expr pos:start="55:43" pos:end="55:61"><operator pos:start="55:43" pos:end="55:43">&amp;</operator><name pos:start="55:44" pos:end="55:61">vmstate_cpu_common</name></expr></argument>, <argument pos:start="55:64" pos:end="55:66"><expr pos:start="55:64" pos:end="55:66"><name pos:start="55:64" pos:end="55:66">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="59:1" pos:end="59:59">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:59"><call pos:start="59:5" pos:end="59:29"><name pos:start="59:5" pos:end="59:11">defined</name><argument_list pos:start="59:12" pos:end="59:29">(<argument pos:start="59:13" pos:end="59:28"><expr pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:28">CPU_SAVE_VERSION</name></expr></argument>)</argument_list></call> <operator pos:start="59:31" pos:end="59:32">&amp;&amp;</operator> <operator pos:start="59:34" pos:end="59:34">!</operator><call pos:start="59:35" pos:end="59:59"><name pos:start="59:35" pos:end="59:41">defined</name><argument_list pos:start="59:42" pos:end="59:59">(<argument pos:start="59:43" pos:end="59:58"><expr pos:start="59:43" pos:end="59:58"><name pos:start="59:43" pos:end="59:58">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="61:5" pos:end="63:54"><expr pos:start="61:5" pos:end="63:53"><call pos:start="61:5" pos:end="63:53"><name pos:start="61:5" pos:end="61:19">register_savevm</name><argument_list pos:start="61:20" pos:end="63:53">(<argument pos:start="61:21" pos:end="61:24"><expr pos:start="61:21" pos:end="61:24"><name pos:start="61:21" pos:end="61:24">NULL</name></expr></argument>, <argument pos:start="61:27" pos:end="61:31"><expr pos:start="61:27" pos:end="61:31"><literal type="string" pos:start="61:27" pos:end="61:31">"cpu"</literal></expr></argument>, <argument pos:start="61:34" pos:end="61:42"><expr pos:start="61:34" pos:end="61:42"><name pos:start="61:34" pos:end="61:42">cpu_index</name></expr></argument>, <argument pos:start="61:45" pos:end="61:60"><expr pos:start="61:45" pos:end="61:60"><name pos:start="61:45" pos:end="61:60">CPU_SAVE_VERSION</name></expr></argument>,

                    <argument pos:start="63:21" pos:end="63:28"><expr pos:start="63:21" pos:end="63:28"><name pos:start="63:21" pos:end="63:28">cpu_save</name></expr></argument>, <argument pos:start="63:31" pos:end="63:38"><expr pos:start="63:31" pos:end="63:38"><name pos:start="63:31" pos:end="63:38">cpu_load</name></expr></argument>, <argument pos:start="63:41" pos:end="63:52"><expr pos:start="63:41" pos:end="63:52"><name pos:start="63:41" pos:end="63:52"><name pos:start="63:41" pos:end="63:43">cpu</name><operator pos:start="63:44" pos:end="63:45">-&gt;</operator><name pos:start="63:46" pos:end="63:52">env_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:29"><expr pos:start="65:5" pos:end="65:28"><call pos:start="65:5" pos:end="65:28"><name pos:start="65:5" pos:end="65:10">assert</name><argument_list pos:start="65:11" pos:end="65:28">(<argument pos:start="65:12" pos:end="65:27"><expr pos:start="65:12" pos:end="65:27"><name pos:start="65:12" pos:end="65:19"><name pos:start="65:12" pos:end="65:13">cc</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:19">vmsd</name></name> <operator pos:start="65:21" pos:end="65:22">==</operator> <name pos:start="65:24" pos:end="65:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="70:0"><expr pos:start="67:5" pos:end="67:46"><call pos:start="67:5" pos:end="67:46"><name pos:start="67:5" pos:end="67:10">assert</name><argument_list pos:start="67:11" pos:end="67:46">(<argument pos:start="67:12" pos:end="67:45"><expr pos:start="67:12" pos:end="67:45"><call pos:start="67:12" pos:end="67:37"><name pos:start="67:12" pos:end="67:24">qdev_get_vmsd</name><argument_list pos:start="67:25" pos:end="67:37">(<argument pos:start="67:26" pos:end="67:36"><expr pos:start="67:26" pos:end="67:36"><call pos:start="67:26" pos:end="67:36"><name pos:start="67:26" pos:end="67:31">DEVICE</name><argument_list pos:start="67:32" pos:end="67:36">(<argument pos:start="67:33" pos:end="67:35"><expr pos:start="67:33" pos:end="67:35"><name pos:start="67:33" pos:end="67:35">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="67:39" pos:end="67:40">==</operator> <name pos:start="67:42" pos:end="67:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:25">(<expr pos:start="71:9" pos:end="71:24"><name pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:10">cc</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:16">vmsd</name></name> <operator pos:start="71:18" pos:end="71:19">!=</operator> <name pos:start="71:21" pos:end="71:24">NULL</name></expr>)</condition> <block pos:start="71:27" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:57">

        <expr_stmt pos:start="73:9" pos:end="73:57"><expr pos:start="73:9" pos:end="73:56"><call pos:start="73:9" pos:end="73:56"><name pos:start="73:9" pos:end="73:24">vmstate_register</name><argument_list pos:start="73:25" pos:end="73:56">(<argument pos:start="73:26" pos:end="73:29"><expr pos:start="73:26" pos:end="73:29"><name pos:start="73:26" pos:end="73:29">NULL</name></expr></argument>, <argument pos:start="73:32" pos:end="73:40"><expr pos:start="73:32" pos:end="73:40"><name pos:start="73:32" pos:end="73:40">cpu_index</name></expr></argument>, <argument pos:start="73:43" pos:end="73:50"><expr pos:start="73:43" pos:end="73:50"><name pos:start="73:43" pos:end="73:50"><name pos:start="73:43" pos:end="73:44">cc</name><operator pos:start="73:45" pos:end="73:46">-&gt;</operator><name pos:start="73:47" pos:end="73:50">vmsd</name></name></expr></argument>, <argument pos:start="73:53" pos:end="73:55"><expr pos:start="73:53" pos:end="73:55"><name pos:start="73:53" pos:end="73:55">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
