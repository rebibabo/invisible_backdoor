<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5560.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">xen_pt_bar_reg_write</name><parameter_list pos:start="1:32" pos:end="5:52">(<parameter pos:start="1:33" pos:end="1:57"><decl pos:start="1:33" pos:end="1:57"><type pos:start="1:33" pos:end="1:57"><name pos:start="1:33" pos:end="1:54">XenPCIPassthroughState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:57">s</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:78"><decl pos:start="1:60" pos:end="1:78"><type pos:start="1:60" pos:end="1:78"><name pos:start="1:60" pos:end="1:67">XenPTReg</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">cfg_entry</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:40">uint32_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:45">val</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:65"><decl pos:start="3:48" pos:end="3:65"><type pos:start="3:48" pos:end="3:65"><name pos:start="3:48" pos:end="3:55">uint32_t</name></type> <name pos:start="3:57" pos:end="3:65">dev_value</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:51"><decl pos:start="5:33" pos:end="5:51"><type pos:start="5:33" pos:end="5:51"><name pos:start="5:33" pos:end="5:40">uint32_t</name></type> <name pos:start="5:42" pos:end="5:51">valid_mask</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="137:1">{<block_content pos:start="9:5" pos:end="135:13">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">XenPTRegInfo</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">reg</name> <init pos:start="9:23" pos:end="9:38">= <expr pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:38"><name pos:start="9:25" pos:end="9:33">cfg_entry</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">reg</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">XenPTRegion</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:21">base</name> <init pos:start="11:23" pos:end="11:28">= <expr pos:start="11:25" pos:end="11:28"><name pos:start="11:25" pos:end="11:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">PCIDevice</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:16">d</name> <init pos:start="13:18" pos:end="13:26">= <expr pos:start="13:20" pos:end="13:26"><operator pos:start="13:20" pos:end="13:20">&amp;</operator><name pos:start="13:21" pos:end="13:26"><name pos:start="13:21" pos:end="13:21">s</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:26">dev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:23"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:21">PCIIORegion</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:24">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:26">writable_mask</name> <init pos:start="17:28" pos:end="17:30">= <expr pos:start="17:30" pos:end="17:30"><literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:29"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:25">bar_emu_mask</name> <init pos:start="19:27" pos:end="19:29">= <expr pos:start="19:29" pos:end="19:29"><literal type="number" pos:start="19:29" pos:end="19:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:24">bar_ro_mask</name> <init pos:start="21:26" pos:end="21:28">= <expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:19">r_size</name> <init pos:start="23:21" pos:end="23:23">= <expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">index</name> <init pos:start="25:15" pos:end="25:17">= <expr pos:start="25:17" pos:end="25:17"><literal type="number" pos:start="25:17" pos:end="25:17">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:52"><expr pos:start="29:5" pos:end="29:51"><name pos:start="29:5" pos:end="29:9">index</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:51"><name pos:start="29:13" pos:end="29:38">xen_pt_bar_offset_to_index</name><argument_list pos:start="29:39" pos:end="29:51">(<argument pos:start="29:40" pos:end="29:50"><expr pos:start="29:40" pos:end="29:50"><name pos:start="29:40" pos:end="29:50"><name pos:start="29:40" pos:end="29:42">reg</name><operator pos:start="29:43" pos:end="29:44">-&gt;</operator><name pos:start="29:45" pos:end="29:50">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:46">(<expr pos:start="31:9" pos:end="31:45"><name pos:start="31:9" pos:end="31:13">index</name> <operator pos:start="31:15" pos:end="31:15">&lt;</operator> <literal type="number" pos:start="31:17" pos:end="31:17">0</literal> <operator pos:start="31:19" pos:end="31:20">||</operator> <name pos:start="31:22" pos:end="31:26">index</name> <operator pos:start="31:28" pos:end="31:29">&gt;=</operator> <name pos:start="31:31" pos:end="31:45">PCI_NUM_REGIONS</name></expr>)</condition> <block pos:start="31:48" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:18">

        <expr_stmt pos:start="33:9" pos:end="33:74"><expr pos:start="33:9" pos:end="33:73"><call pos:start="33:9" pos:end="33:73"><name pos:start="33:9" pos:end="33:18">XEN_PT_ERR</name><argument_list pos:start="33:19" pos:end="33:73">(<argument pos:start="33:20" pos:end="33:20"><expr pos:start="33:20" pos:end="33:20"><name pos:start="33:20" pos:end="33:20">d</name></expr></argument>, <argument pos:start="33:23" pos:end="33:65"><expr pos:start="33:23" pos:end="33:65"><literal type="string" pos:start="33:23" pos:end="33:65">"Internal error: Invalid BAR index [%d].\n"</literal></expr></argument>, <argument pos:start="33:68" pos:end="33:72"><expr pos:start="33:68" pos:end="33:72"><name pos:start="33:68" pos:end="33:72">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:5">r</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <operator pos:start="41:9" pos:end="41:9">&amp;</operator><name pos:start="41:10" pos:end="41:29"><name pos:start="41:10" pos:end="41:10">d</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:22">io_regions</name><index pos:start="41:23" pos:end="41:29">[<expr pos:start="41:24" pos:end="41:28"><name pos:start="41:24" pos:end="41:28">index</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:28"><expr pos:start="43:5" pos:end="43:27"><name pos:start="43:5" pos:end="43:8">base</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <operator pos:start="43:12" pos:end="43:12">&amp;</operator><name pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:20">bases</name><index pos:start="43:21" pos:end="43:27">[<expr pos:start="43:22" pos:end="43:26"><name pos:start="43:22" pos:end="43:26">index</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:59"><expr pos:start="45:5" pos:end="45:58"><name pos:start="45:5" pos:end="45:10">r_size</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <call pos:start="45:14" pos:end="45:58"><name pos:start="45:14" pos:end="45:33">xen_pt_get_emul_size</name><argument_list pos:start="45:34" pos:end="45:58">(<argument pos:start="45:35" pos:end="45:48"><expr pos:start="45:35" pos:end="45:48"><name pos:start="45:35" pos:end="45:48"><name pos:start="45:35" pos:end="45:38">base</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:48">bar_flag</name></name></expr></argument>, <argument pos:start="45:51" pos:end="45:57"><expr pos:start="45:51" pos:end="45:57"><name pos:start="45:51" pos:end="45:57"><name pos:start="45:51" pos:end="45:51">r</name><operator pos:start="45:52" pos:end="45:53">-&gt;</operator><name pos:start="45:54" pos:end="45:57">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:75">/* set emulate mask and read-only mask values depend on the BAR flag */</comment>

    <switch pos:start="51:5" pos:end="91:5">switch <condition pos:start="51:12" pos:end="51:37">(<expr pos:start="51:13" pos:end="51:36"><name pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:20">bases</name><index pos:start="51:21" pos:end="51:27">[<expr pos:start="51:22" pos:end="51:26"><name pos:start="51:22" pos:end="51:26">index</name></expr>]</index></name><operator pos:start="51:28" pos:end="51:28">.</operator><name pos:start="51:29" pos:end="51:36">bar_flag</name></expr>)</condition> <block pos:start="51:39" pos:end="91:5">{<block_content pos:start="53:5" pos:end="89:14">

    <case pos:start="53:5" pos:end="53:29">case <expr pos:start="53:10" pos:end="53:28"><name pos:start="53:10" pos:end="53:28">XEN_PT_BAR_FLAG_MEM</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:47"><expr pos:start="55:9" pos:end="55:46"><name pos:start="55:9" pos:end="55:20">bar_emu_mask</name> <operator pos:start="55:22" pos:end="55:22">=</operator> <name pos:start="55:24" pos:end="55:46">XEN_PT_BAR_MEM_EMU_MASK</name></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="67:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:20">(<expr pos:start="57:13" pos:end="57:19"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:19">r_size</name></expr>)</condition> <block pos:start="57:22" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:42">

            <comment type="block" pos:start="59:13" pos:end="59:50">/* low 32 bits mask for 64 bit bars */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:42"><expr pos:start="61:13" pos:end="61:41"><name pos:start="61:13" pos:end="61:23">bar_ro_mask</name> <operator pos:start="61:25" pos:end="61:25">=</operator> <name pos:start="61:27" pos:end="61:41">XEN_PT_BAR_ALLF</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="67:9">else <block pos:start="63:16" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:64">

            <expr_stmt pos:start="65:13" pos:end="65:64"><expr pos:start="65:13" pos:end="65:63"><name pos:start="65:13" pos:end="65:23">bar_ro_mask</name> <operator pos:start="65:25" pos:end="65:25">=</operator> <name pos:start="65:27" pos:end="65:48">XEN_PT_BAR_MEM_RO_MASK</name> <operator pos:start="65:50" pos:end="65:50">|</operator> <operator pos:start="65:52" pos:end="65:52">(</operator><name pos:start="65:53" pos:end="65:58">r_size</name> <operator pos:start="65:60" pos:end="65:60">-</operator> <literal type="number" pos:start="65:62" pos:end="65:62">1</literal><operator pos:start="65:63" pos:end="65:63">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:28">case <expr pos:start="71:10" pos:end="71:27"><name pos:start="71:10" pos:end="71:27">XEN_PT_BAR_FLAG_IO</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:46"><expr pos:start="73:9" pos:end="73:45"><name pos:start="73:9" pos:end="73:20">bar_emu_mask</name> <operator pos:start="73:22" pos:end="73:22">=</operator> <name pos:start="73:24" pos:end="73:45">XEN_PT_BAR_IO_EMU_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:59"><expr pos:start="75:9" pos:end="75:58"><name pos:start="75:9" pos:end="75:19">bar_ro_mask</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <name pos:start="75:23" pos:end="75:43">XEN_PT_BAR_IO_RO_MASK</name> <operator pos:start="75:45" pos:end="75:45">|</operator> <operator pos:start="75:47" pos:end="75:47">(</operator><name pos:start="75:48" pos:end="75:53">r_size</name> <operator pos:start="75:55" pos:end="75:55">-</operator> <literal type="number" pos:start="75:57" pos:end="75:57">1</literal><operator pos:start="75:58" pos:end="75:58">)</operator></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:31">case <expr pos:start="79:10" pos:end="79:30"><name pos:start="79:10" pos:end="79:30">XEN_PT_BAR_FLAG_UPPER</name></expr>:</case>

        <expr_stmt pos:start="81:9" pos:end="81:39"><expr pos:start="81:9" pos:end="81:38"><name pos:start="81:9" pos:end="81:20">bar_emu_mask</name> <operator pos:start="81:22" pos:end="81:22">=</operator> <name pos:start="81:24" pos:end="81:38">XEN_PT_BAR_ALLF</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:46"><expr pos:start="83:9" pos:end="83:45"><name pos:start="83:9" pos:end="83:19">bar_ro_mask</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <ternary pos:start="83:23" pos:end="83:45"><condition pos:start="83:23" pos:end="83:30"><expr pos:start="83:23" pos:end="83:28"><name pos:start="83:23" pos:end="83:28">r_size</name></expr> ?</condition><then pos:start="83:32" pos:end="83:41"> <expr pos:start="83:32" pos:end="83:41"><name pos:start="83:32" pos:end="83:37">r_size</name> <operator pos:start="83:39" pos:end="83:39">-</operator> <literal type="number" pos:start="83:41" pos:end="83:41">1</literal></expr> </then><else pos:start="83:43" pos:end="83:45">: <expr pos:start="83:45" pos:end="83:45"><literal type="number" pos:start="83:45" pos:end="83:45">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <default pos:start="87:5" pos:end="87:12">default:</default>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="95:5" pos:end="95:33">/* modify emulate register */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:61"><expr pos:start="97:5" pos:end="97:60"><name pos:start="97:5" pos:end="97:17">writable_mask</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:32">bar_emu_mask</name> <operator pos:start="97:34" pos:end="97:34">&amp;</operator> <operator pos:start="97:36" pos:end="97:36">~</operator><name pos:start="97:37" pos:end="97:47">bar_ro_mask</name> <operator pos:start="97:49" pos:end="97:49">&amp;</operator> <name pos:start="97:51" pos:end="97:60">valid_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:79"><expr pos:start="99:5" pos:end="99:78"><name pos:start="99:5" pos:end="99:19"><name pos:start="99:5" pos:end="99:13">cfg_entry</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:19">data</name></name> <operator pos:start="99:21" pos:end="99:21">=</operator> <call pos:start="99:23" pos:end="99:78"><name pos:start="99:23" pos:end="99:40">XEN_PT_MERGE_VALUE</name><argument_list pos:start="99:41" pos:end="99:78">(<argument pos:start="99:42" pos:end="99:45"><expr pos:start="99:42" pos:end="99:45"><operator pos:start="99:42" pos:end="99:42">*</operator><name pos:start="99:43" pos:end="99:45">val</name></expr></argument>, <argument pos:start="99:48" pos:end="99:62"><expr pos:start="99:48" pos:end="99:62"><name pos:start="99:48" pos:end="99:62"><name pos:start="99:48" pos:end="99:56">cfg_entry</name><operator pos:start="99:57" pos:end="99:58">-&gt;</operator><name pos:start="99:59" pos:end="99:62">data</name></name></expr></argument>, <argument pos:start="99:65" pos:end="99:77"><expr pos:start="99:65" pos:end="99:77"><name pos:start="99:65" pos:end="99:77">writable_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:75">/* check whether we need to update the virtual region address or not */</comment>

    <switch pos:start="105:5" pos:end="125:5">switch <condition pos:start="105:12" pos:end="105:37">(<expr pos:start="105:13" pos:end="105:36"><name pos:start="105:13" pos:end="105:27"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:20">bases</name><index pos:start="105:21" pos:end="105:27">[<expr pos:start="105:22" pos:end="105:26"><name pos:start="105:22" pos:end="105:26">index</name></expr>]</index></name><operator pos:start="105:28" pos:end="105:28">.</operator><name pos:start="105:29" pos:end="105:36">bar_flag</name></expr>)</condition> <block pos:start="105:39" pos:end="125:5">{<block_content pos:start="107:5" pos:end="123:14">

    <case pos:start="107:5" pos:end="107:31">case <expr pos:start="107:10" pos:end="107:30"><name pos:start="107:10" pos:end="107:30">XEN_PT_BAR_FLAG_UPPER</name></expr>:</case>

    <case pos:start="109:5" pos:end="109:29">case <expr pos:start="109:10" pos:end="109:28"><name pos:start="109:10" pos:end="109:28">XEN_PT_BAR_FLAG_MEM</name></expr>:</case>

        <comment type="block" pos:start="111:9" pos:end="111:27">/* nothing to do */</comment>

        <break pos:start="113:9" pos:end="113:14">break;</break>

    <case pos:start="115:5" pos:end="115:28">case <expr pos:start="115:10" pos:end="115:27"><name pos:start="115:10" pos:end="115:27">XEN_PT_BAR_FLAG_IO</name></expr>:</case>

        <comment type="block" pos:start="117:9" pos:end="117:27">/* nothing to do */</comment>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <default pos:start="121:5" pos:end="121:12">default:</default>

        <break pos:start="123:9" pos:end="123:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="129:5" pos:end="129:57">/* create value for writing to I/O device register */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:50"><expr pos:start="131:5" pos:end="131:49"><operator pos:start="131:5" pos:end="131:5">*</operator><name pos:start="131:6" pos:end="131:8">val</name> <operator pos:start="131:10" pos:end="131:10">=</operator> <call pos:start="131:12" pos:end="131:49"><name pos:start="131:12" pos:end="131:29">XEN_PT_MERGE_VALUE</name><argument_list pos:start="131:30" pos:end="131:49">(<argument pos:start="131:31" pos:end="131:34"><expr pos:start="131:31" pos:end="131:34"><operator pos:start="131:31" pos:end="131:31">*</operator><name pos:start="131:32" pos:end="131:34">val</name></expr></argument>, <argument pos:start="131:37" pos:end="131:45"><expr pos:start="131:37" pos:end="131:45"><name pos:start="131:37" pos:end="131:45">dev_value</name></expr></argument>, <argument pos:start="131:48" pos:end="131:48"><expr pos:start="131:48" pos:end="131:48"><literal type="number" pos:start="131:48" pos:end="131:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="135:5" pos:end="135:13">return <expr pos:start="135:12" pos:end="135:12"><literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
