<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1716.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">rm_write_video</name><parameter_list pos:start="1:26" pos:end="1:75">(<parameter pos:start="1:27" pos:end="1:44"><decl pos:start="1:27" pos:end="1:44"><type pos:start="1:27" pos:end="1:44"><name pos:start="1:27" pos:end="1:41">AVFormatContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:64"><decl pos:start="1:47" pos:end="1:64"><type pos:start="1:47" pos:end="1:64"><specifier pos:start="1:47" pos:end="1:51">const</specifier> <name pos:start="1:53" pos:end="1:59">uint8_t</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">buf</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:74"><decl pos:start="1:67" pos:end="1:74"><type pos:start="1:67" pos:end="1:74"><name pos:start="1:67" pos:end="1:69">int</name></type> <name pos:start="1:71" pos:end="1:74">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:13">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">RMContext</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:17">rm</name> <init pos:start="5:19" pos:end="5:32">= <expr pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:21">s</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">ByteIOContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">pb</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:30"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:30">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">StreamInfo</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:22">stream</name> <init pos:start="9:24" pos:end="9:41">= <expr pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:41"><name pos:start="9:26" pos:end="9:27">rm</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:41">video_stream</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="24:0"><decl pos:start="11:5" pos:end="11:55"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">key_frame</name> <init pos:start="11:19" pos:end="11:55">= <expr pos:start="11:21" pos:end="11:55"><name pos:start="11:21" pos:end="11:55"><name pos:start="11:21" pos:end="11:26">stream</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:31">enc</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:44">coded_frame</name><operator pos:start="11:45" pos:end="11:46">-&gt;</operator><name pos:start="11:47" pos:end="11:55">key_frame</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:55">/* XXX: this is incorrect: should be a parameter */</comment>



    <comment type="block" pos:start="19:5" pos:end="21:59">/* Well, I spent some time finding the meaning of these bits. I am

       not sure I understood everything, but it works !! */</comment>

<cpp:if pos:start="23:1" pos:end="23:5">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:5"><literal type="number" pos:start="23:5" pos:end="23:5">1</literal></expr></cpp:if>

    <expr_stmt pos:start="25:5" pos:end="25:56"><expr pos:start="25:5" pos:end="25:55"><call pos:start="25:5" pos:end="25:55"><name pos:start="25:5" pos:end="25:23">write_packet_header</name><argument_list pos:start="25:24" pos:end="25:55">(<argument pos:start="25:25" pos:end="25:25"><expr pos:start="25:25" pos:end="25:25"><name pos:start="25:25" pos:end="25:25">s</name></expr></argument>, <argument pos:start="25:28" pos:end="25:33"><expr pos:start="25:28" pos:end="25:33"><name pos:start="25:28" pos:end="25:33">stream</name></expr></argument>, <argument pos:start="25:36" pos:end="25:43"><expr pos:start="25:36" pos:end="25:43"><name pos:start="25:36" pos:end="25:39">size</name> <operator pos:start="25:41" pos:end="25:41">+</operator> <literal type="number" pos:start="25:43" pos:end="25:43">7</literal></expr></argument>, <argument pos:start="25:46" pos:end="25:54"><expr pos:start="25:46" pos:end="25:54"><name pos:start="25:46" pos:end="25:54">key_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="27:76">/* bit 7: '1' if final packet of a frame converted in several packets */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:23"><expr pos:start="29:5" pos:end="29:22"><call pos:start="29:5" pos:end="29:22"><name pos:start="29:5" pos:end="29:12">put_byte</name><argument_list pos:start="29:13" pos:end="29:22">(<argument pos:start="29:14" pos:end="29:15"><expr pos:start="29:14" pos:end="29:15"><name pos:start="29:14" pos:end="29:15">pb</name></expr></argument>, <argument pos:start="29:18" pos:end="29:21"><expr pos:start="29:18" pos:end="29:21"><literal type="number" pos:start="29:18" pos:end="29:21">0x81</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    <comment type="block" pos:start="31:5" pos:end="33:31">/* bit 7: '1' if I frame. bits 6..0 : sequence number in current

       frame starting from 1 */</comment>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:18">(<expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:17">key_frame</name></expr>)</condition> <block pos:start="35:20" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:27">

        <expr_stmt pos:start="37:9" pos:end="37:27"><expr pos:start="37:9" pos:end="37:26"><call pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:16">put_byte</name><argument_list pos:start="37:17" pos:end="37:26">(<argument pos:start="37:18" pos:end="37:19"><expr pos:start="37:18" pos:end="37:19"><name pos:start="37:18" pos:end="37:19">pb</name></expr></argument>, <argument pos:start="37:22" pos:end="37:25"><expr pos:start="37:22" pos:end="37:25"><literal type="number" pos:start="37:22" pos:end="37:25">0x81</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    </block_content>}</block></if> <else pos:start="39:7" pos:end="43:5">else <block pos:start="39:12" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:27">

        <expr_stmt pos:start="41:9" pos:end="41:27"><expr pos:start="41:9" pos:end="41:26"><call pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:16">put_byte</name><argument_list pos:start="41:17" pos:end="41:26">(<argument pos:start="41:18" pos:end="41:19"><expr pos:start="41:18" pos:end="41:19"><name pos:start="41:18" pos:end="41:19">pb</name></expr></argument>, <argument pos:start="41:22" pos:end="41:25"><expr pos:start="41:22" pos:end="41:25"><literal type="number" pos:start="41:22" pos:end="41:25">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:34"><expr pos:start="45:5" pos:end="45:33"><call pos:start="45:5" pos:end="45:33"><name pos:start="45:5" pos:end="45:12">put_be16</name><argument_list pos:start="45:13" pos:end="45:33">(<argument pos:start="45:14" pos:end="45:15"><expr pos:start="45:14" pos:end="45:15"><name pos:start="45:14" pos:end="45:15">pb</name></expr></argument>, <argument pos:start="45:18" pos:end="45:32"><expr pos:start="45:18" pos:end="45:32"><literal type="number" pos:start="45:18" pos:end="45:23">0x4000</literal> <operator pos:start="45:25" pos:end="45:25">|</operator> <operator pos:start="45:27" pos:end="45:27">(</operator><name pos:start="45:28" pos:end="45:31">size</name><operator pos:start="45:32" pos:end="45:32">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="45:36" pos:end="45:57">/* total frame size */</comment>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:33"><call pos:start="47:5" pos:end="47:33"><name pos:start="47:5" pos:end="47:12">put_be16</name><argument_list pos:start="47:13" pos:end="47:33">(<argument pos:start="47:14" pos:end="47:15"><expr pos:start="47:14" pos:end="47:15"><name pos:start="47:14" pos:end="47:15">pb</name></expr></argument>, <argument pos:start="47:18" pos:end="47:32"><expr pos:start="47:18" pos:end="47:32"><literal type="number" pos:start="47:18" pos:end="47:23">0x4000</literal> <operator pos:start="47:25" pos:end="47:25">|</operator> <operator pos:start="47:27" pos:end="47:27">(</operator><name pos:start="47:28" pos:end="47:31">size</name><operator pos:start="47:32" pos:end="47:32">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>              <comment type="block" pos:start="47:49" pos:end="47:86">/* offset from the start or the end */</comment>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

    <comment type="block" pos:start="51:5" pos:end="51:20">/* full frame */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:37"><expr pos:start="53:5" pos:end="53:36"><call pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:23">write_packet_header</name><argument_list pos:start="53:24" pos:end="53:36">(<argument pos:start="53:25" pos:end="53:25"><expr pos:start="53:25" pos:end="53:25"><name pos:start="53:25" pos:end="53:25">s</name></expr></argument>, <argument pos:start="53:28" pos:end="53:35"><expr pos:start="53:28" pos:end="53:35"><name pos:start="53:28" pos:end="53:31">size</name> <operator pos:start="53:33" pos:end="53:33">+</operator> <literal type="number" pos:start="53:35" pos:end="53:35">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:23"><expr pos:start="55:5" pos:end="55:22"><call pos:start="55:5" pos:end="55:22"><name pos:start="55:5" pos:end="55:12">put_byte</name><argument_list pos:start="55:13" pos:end="55:22">(<argument pos:start="55:14" pos:end="55:15"><expr pos:start="55:14" pos:end="55:15"><name pos:start="55:14" pos:end="55:15">pb</name></expr></argument>, <argument pos:start="55:18" pos:end="55:21"><expr pos:start="55:18" pos:end="55:21"><literal type="number" pos:start="55:18" pos:end="55:21">0xc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    <expr_stmt pos:start="57:5" pos:end="57:32"><expr pos:start="57:5" pos:end="57:31"><call pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:12">put_be16</name><argument_list pos:start="57:13" pos:end="57:31">(<argument pos:start="57:14" pos:end="57:15"><expr pos:start="57:14" pos:end="57:15"><name pos:start="57:14" pos:end="57:15">pb</name></expr></argument>, <argument pos:start="57:18" pos:end="57:30"><expr pos:start="57:18" pos:end="57:30"><literal type="number" pos:start="57:18" pos:end="57:23">0x4000</literal> <operator pos:start="57:25" pos:end="57:25">|</operator> <name pos:start="57:27" pos:end="57:30">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="57:34" pos:end="57:55">/* total frame size */</comment>

    <expr_stmt pos:start="59:5" pos:end="62:0"><expr pos:start="59:5" pos:end="59:46"><call pos:start="59:5" pos:end="59:46"><name pos:start="59:5" pos:end="59:12">put_be16</name><argument_list pos:start="59:13" pos:end="59:46">(<argument pos:start="59:14" pos:end="59:15"><expr pos:start="59:14" pos:end="59:15"><name pos:start="59:14" pos:end="59:15">pb</name></expr></argument>, <argument pos:start="59:18" pos:end="59:45"><expr pos:start="59:18" pos:end="59:45"><literal type="number" pos:start="59:18" pos:end="59:25">0x4000</literal> <operator pos:start="59:25" pos:end="59:25">+</operator> <name pos:start="59:27" pos:end="59:39">packet_number</name> <operator pos:start="59:41" pos:end="59:41">*</operator> <literal type="number" pos:start="59:43" pos:end="59:45">126</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="59:49" pos:end="59:72">/* position in stream */</comment>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><call pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:12">put_byte</name><argument_list pos:start="63:13" pos:end="63:42">(<argument pos:start="63:14" pos:end="63:15"><expr pos:start="63:14" pos:end="63:15"><name pos:start="63:14" pos:end="63:15">pb</name></expr></argument>, <argument pos:start="63:18" pos:end="63:41"><expr pos:start="63:18" pos:end="63:41"><name pos:start="63:18" pos:end="63:34"><name pos:start="63:18" pos:end="63:23">stream</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:34">nb_frames</name></name> <operator pos:start="63:36" pos:end="63:36">&amp;</operator> <literal type="number" pos:start="63:38" pos:end="63:41">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    

    <expr_stmt pos:start="67:5" pos:end="67:30"><expr pos:start="67:5" pos:end="67:29"><call pos:start="67:5" pos:end="67:29"><name pos:start="67:5" pos:end="67:14">put_buffer</name><argument_list pos:start="67:15" pos:end="67:29">(<argument pos:start="67:16" pos:end="67:17"><expr pos:start="67:16" pos:end="67:17"><name pos:start="67:16" pos:end="67:17">pb</name></expr></argument>, <argument pos:start="67:20" pos:end="67:22"><expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">buf</name></expr></argument>, <argument pos:start="67:25" pos:end="67:28"><expr pos:start="67:25" pos:end="67:28"><name pos:start="67:25" pos:end="67:28">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:25"><expr pos:start="69:5" pos:end="69:24"><call pos:start="69:5" pos:end="69:24"><name pos:start="69:5" pos:end="69:20">put_flush_packet</name><argument_list pos:start="69:21" pos:end="69:24">(<argument pos:start="69:22" pos:end="69:23"><expr pos:start="69:22" pos:end="69:23"><name pos:start="69:22" pos:end="69:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:24"><expr pos:start="73:5" pos:end="73:23"><name pos:start="73:5" pos:end="73:21"><name pos:start="73:5" pos:end="73:10">stream</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:21">nb_frames</name></name><operator pos:start="73:22" pos:end="73:23">++</operator></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:13">return <expr pos:start="75:12" pos:end="75:12"><literal type="number" pos:start="75:12" pos:end="75:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
