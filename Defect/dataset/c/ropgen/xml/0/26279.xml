<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26279.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:28">spapr_drc_needed</name><parameter_list pos:start="1:29" pos:end="1:42">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:35"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:14">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">sPAPRDRConnector</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:25">drc</name> <init pos:start="5:27" pos:end="5:54">= <expr pos:start="5:29" pos:end="5:54"><operator pos:start="5:29" pos:end="5:29">(</operator><name pos:start="5:30" pos:end="5:45">sPAPRDRConnector</name> <operator pos:start="5:47" pos:end="5:47">*</operator><operator pos:start="5:48" pos:end="5:48">)</operator><name pos:start="5:49" pos:end="5:54">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:68"><decl pos:start="7:5" pos:end="7:67"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:25">sPAPRDRConnectorClass</name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:31">drck</name> <init pos:start="7:33" pos:end="7:67">= <expr pos:start="7:35" pos:end="7:67"><call pos:start="7:35" pos:end="7:67"><name pos:start="7:35" pos:end="7:62">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="7:63" pos:end="7:67">(<argument pos:start="7:64" pos:end="7:66"><expr pos:start="7:64" pos:end="7:66"><name pos:start="7:64" pos:end="7:66">drc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:11">rc</name> <init pos:start="9:13" pos:end="9:19">= <expr pos:start="9:15" pos:end="9:19"><name pos:start="9:15" pos:end="9:19">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:58"><decl pos:start="11:5" pos:end="11:57"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:22">sPAPRDREntitySense</name></type> <name pos:start="11:24" pos:end="11:28">value</name> <init pos:start="11:30" pos:end="11:57">= <expr pos:start="11:32" pos:end="11:57"><call pos:start="11:32" pos:end="11:57"><name pos:start="11:32" pos:end="11:52"><name pos:start="11:32" pos:end="11:35">drck</name><operator pos:start="11:36" pos:end="11:37">-&gt;</operator><name pos:start="11:38" pos:end="11:52">dr_entity_sense</name></name><argument_list pos:start="11:53" pos:end="11:57">(<argument pos:start="11:54" pos:end="11:56"><expr pos:start="11:54" pos:end="11:56"><name pos:start="11:54" pos:end="11:56">drc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:75">/* If no dev is plugged in there is no need to migrate the DRC state */</comment>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:47">(<expr pos:start="17:9" pos:end="17:46"><name pos:start="17:9" pos:end="17:13">value</name> <operator pos:start="17:15" pos:end="17:16">!=</operator> <name pos:start="17:18" pos:end="17:46">SPAPR_DR_ENTITY_SENSE_PRESENT</name></expr>)</condition> <block pos:start="17:49" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:21">

        <return pos:start="19:9" pos:end="19:21">return <expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="31:7">/*

     * If there is dev plugged in, we need to migrate the DRC state when

     * it is different from cold-plugged state

     */</comment>

    <switch pos:start="33:5" pos:end="57:5">switch <condition pos:start="33:12" pos:end="33:32">(<expr pos:start="33:13" pos:end="33:31"><call pos:start="33:13" pos:end="33:31"><name pos:start="33:13" pos:end="33:26">spapr_drc_type</name><argument_list pos:start="33:27" pos:end="33:31">(<argument pos:start="33:28" pos:end="33:30"><expr pos:start="33:28" pos:end="33:30"><name pos:start="33:28" pos:end="33:30">drc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:34" pos:end="57:5">{<block_content pos:start="35:5" pos:end="55:31">

    <case pos:start="35:5" pos:end="35:37">case <expr pos:start="35:10" pos:end="35:36"><name pos:start="35:10" pos:end="35:36">SPAPR_DR_CONNECTOR_TYPE_PCI</name></expr>:</case>

    <case pos:start="37:5" pos:end="37:37">case <expr pos:start="37:10" pos:end="37:36"><name pos:start="37:10" pos:end="37:36">SPAPR_DR_CONNECTOR_TYPE_CPU</name></expr>:</case>

    <case pos:start="39:5" pos:end="39:37">case <expr pos:start="39:10" pos:end="39:36"><name pos:start="39:10" pos:end="39:36">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="45:58"><expr pos:start="41:9" pos:end="45:57"><name pos:start="41:9" pos:end="41:10">rc</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <operator pos:start="41:14" pos:end="41:14">!</operator><operator pos:start="41:15" pos:end="41:15">(</operator><operator pos:start="41:16" pos:end="41:16">(</operator><name pos:start="41:17" pos:end="41:36"><name pos:start="41:17" pos:end="41:19">drc</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:36">isolation_state</name></name> <operator pos:start="41:38" pos:end="41:39">==</operator> <name pos:start="41:41" pos:end="41:75">SPAPR_DR_ISOLATION_STATE_UNISOLATED</name><operator pos:start="41:76" pos:end="41:76">)</operator> <operator pos:start="41:78" pos:end="41:79">&amp;&amp;</operator>

               <operator pos:start="43:16" pos:end="43:16">(</operator><name pos:start="43:17" pos:end="43:37"><name pos:start="43:17" pos:end="43:19">drc</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:37">allocation_state</name></name> <operator pos:start="43:39" pos:end="43:40">==</operator> <name pos:start="43:42" pos:end="43:73">SPAPR_DR_ALLOCATION_STATE_USABLE</name><operator pos:start="43:74" pos:end="43:74">)</operator> <operator pos:start="43:76" pos:end="43:77">&amp;&amp;</operator>

               <name pos:start="45:16" pos:end="45:30"><name pos:start="45:16" pos:end="45:18">drc</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:30">configured</name></name> <operator pos:start="45:32" pos:end="45:33">&amp;&amp;</operator> <operator pos:start="45:35" pos:end="45:35">!</operator><name pos:start="45:36" pos:end="45:56"><name pos:start="45:36" pos:end="45:38">drc</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:56">awaiting_release</name></name><operator pos:start="45:57" pos:end="45:57">)</operator></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:37">case <expr pos:start="49:10" pos:end="49:36"><name pos:start="49:10" pos:end="49:36">SPAPR_DR_CONNECTOR_TYPE_PHB</name></expr>:</case>

    <case pos:start="51:5" pos:end="51:37">case <expr pos:start="51:10" pos:end="51:36"><name pos:start="51:10" pos:end="51:36">SPAPR_DR_CONNECTOR_TYPE_VIO</name></expr>:</case>

    <default pos:start="53:5" pos:end="53:12">default:</default>

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><call pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:28">g_assert_not_reached</name><argument_list pos:start="55:29" pos:end="55:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <return pos:start="59:5" pos:end="59:14">return <expr pos:start="59:12" pos:end="59:13"><name pos:start="59:12" pos:end="59:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
