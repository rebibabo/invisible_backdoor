<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22281.c" pos:tabs="8"><function pos:start="1:1" pos:end="189:1"><type pos:start="1:1" pos:end="1:17"><name pos:start="1:1" pos:end="1:15">CaptureVoiceOut</name> <modifier pos:start="1:17" pos:end="1:17">*</modifier></type><name pos:start="1:18" pos:end="1:32">AUD_add_capture</name> <parameter_list pos:start="1:34" pos:end="11:5">(

    <parameter pos:start="3:5" pos:end="3:17"><decl pos:start="3:5" pos:end="3:17"><type pos:start="3:5" pos:end="3:17"><name pos:start="3:5" pos:end="3:14">AudioState</name> <modifier pos:start="3:16" pos:end="3:16">*</modifier></type><name pos:start="3:17" pos:end="3:17">s</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:17">audsettings_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">as</name></decl></parameter>,

    <parameter pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:33"><name pos:start="7:5" pos:end="7:28"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:28">audio_capture_ops</name></name> <modifier pos:start="7:30" pos:end="7:30">*</modifier></type><name pos:start="7:31" pos:end="7:33">ops</name></decl></parameter>,

    <parameter pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:8">void</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:19">cb_opaque</name></decl></parameter>

    )</parameter_list>

<block pos:start="13:1" pos:end="189:1">{<block_content pos:start="15:5" pos:end="187:5">

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19">CaptureVoiceOut</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:24">cap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:27">capture_callback</name></name> <modifier pos:start="17:29" pos:end="17:29">*</modifier></type><name pos:start="17:30" pos:end="17:31">cb</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:11">(<expr pos:start="21:9" pos:end="21:10"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:10">s</name></expr>)</condition> <block pos:start="21:13" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:30">

        <comment type="block" pos:start="23:9" pos:end="23:26">/* XXX suppress */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:30"><expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:9">s</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <operator pos:start="25:13" pos:end="25:13">&amp;</operator><name pos:start="25:14" pos:end="25:29">glob_audio_state</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:37">(<expr pos:start="31:9" pos:end="31:36"><call pos:start="31:9" pos:end="31:36"><name pos:start="31:9" pos:end="31:31">audio_validate_settings</name> <argument_list pos:start="31:33" pos:end="31:36">(<argument pos:start="31:34" pos:end="31:35"><expr pos:start="31:34" pos:end="31:35"><name pos:start="31:34" pos:end="31:35">as</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:39" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:18">

        <expr_stmt pos:start="33:9" pos:end="33:76"><expr pos:start="33:9" pos:end="33:75"><call pos:start="33:9" pos:end="33:75"><name pos:start="33:9" pos:end="33:13">dolog</name> <argument_list pos:start="33:15" pos:end="33:75">(<argument pos:start="33:16" pos:end="33:74"><expr pos:start="33:16" pos:end="33:74"><literal type="string" pos:start="33:16" pos:end="33:74">"Invalid settings were passed when trying to add capture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><call pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:28">audio_print_settings</name> <argument_list pos:start="35:30" pos:end="35:33">(<argument pos:start="35:31" pos:end="35:32"><expr pos:start="35:31" pos:end="35:32"><name pos:start="35:31" pos:end="35:32">as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">err0</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:52"><expr pos:start="43:5" pos:end="43:51"><name pos:start="43:5" pos:end="43:6">cb</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <call pos:start="43:10" pos:end="43:51"><name pos:start="43:10" pos:end="43:21">audio_calloc</name> <argument_list pos:start="43:23" pos:end="43:51">(<argument pos:start="43:24" pos:end="43:33"><expr pos:start="43:24" pos:end="43:33"><name pos:start="43:24" pos:end="43:33">AUDIO_FUNC</name></expr></argument>, <argument pos:start="43:36" pos:end="43:36"><expr pos:start="43:36" pos:end="43:36"><literal type="number" pos:start="43:36" pos:end="43:36">1</literal></expr></argument>, <argument pos:start="43:39" pos:end="43:50"><expr pos:start="43:39" pos:end="43:50"><sizeof pos:start="43:39" pos:end="43:50">sizeof <argument_list pos:start="43:46" pos:end="43:50">(<argument pos:start="43:47" pos:end="43:49"><expr pos:start="43:47" pos:end="43:49"><operator pos:start="43:47" pos:end="43:47">*</operator><name pos:start="43:48" pos:end="43:49">cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="45:12">(<expr pos:start="45:9" pos:end="45:11"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:11">cb</name></expr>)</condition> <block pos:start="45:14" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:18">

        <expr_stmt pos:start="47:9" pos:end="49:29"><expr pos:start="47:9" pos:end="49:28"><call pos:start="47:9" pos:end="49:28"><name pos:start="47:9" pos:end="47:13">dolog</name> <argument_list pos:start="47:15" pos:end="49:28">(<argument pos:start="47:16" pos:end="47:76"><expr pos:start="47:16" pos:end="47:76"><literal type="string" pos:start="47:16" pos:end="47:76">"Could not allocate capture callback information, size %zu\n"</literal></expr></argument>,

               <argument pos:start="49:16" pos:end="49:27"><expr pos:start="49:16" pos:end="49:27"><sizeof pos:start="49:16" pos:end="49:27">sizeof <argument_list pos:start="49:23" pos:end="49:27">(<argument pos:start="49:24" pos:end="49:26"><expr pos:start="49:24" pos:end="49:26"><operator pos:start="49:24" pos:end="49:24">*</operator><name pos:start="49:25" pos:end="49:26">cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:18">goto <name pos:start="51:14" pos:end="51:17">err0</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:19"><expr pos:start="55:5" pos:end="55:18"><name pos:start="55:5" pos:end="55:11"><name pos:start="55:5" pos:end="55:6">cb</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:11">ops</name></name> <operator pos:start="55:13" pos:end="55:13">=</operator> <operator pos:start="55:15" pos:end="55:15">*</operator><name pos:start="55:16" pos:end="55:18">ops</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:27"><expr pos:start="57:5" pos:end="57:26"><name pos:start="57:5" pos:end="57:14"><name pos:start="57:5" pos:end="57:6">cb</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:14">opaque</name></name> <operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:26">cb_opaque</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:50"><expr pos:start="61:5" pos:end="61:49"><name pos:start="61:5" pos:end="61:7">cap</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:49"><name pos:start="61:11" pos:end="61:41">audio_pcm_capture_find_specific</name> <argument_list pos:start="61:43" pos:end="61:49">(<argument pos:start="61:44" pos:end="61:44"><expr pos:start="61:44" pos:end="61:44"><name pos:start="61:44" pos:end="61:44">s</name></expr></argument>, <argument pos:start="61:47" pos:end="61:48"><expr pos:start="61:47" pos:end="61:48"><name pos:start="61:47" pos:end="61:48">as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="187:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:12">(<expr pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">cap</name></expr>)</condition> <block pos:start="63:14" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:19">

        <expr_stmt pos:start="65:9" pos:end="65:54"><expr pos:start="65:9" pos:end="65:53"><call pos:start="65:9" pos:end="65:53"><name pos:start="65:9" pos:end="65:24">LIST_INSERT_HEAD</name> <argument_list pos:start="65:26" pos:end="65:53">(<argument pos:start="65:27" pos:end="65:39"><expr pos:start="65:27" pos:end="65:39"><operator pos:start="65:27" pos:end="65:27">&amp;</operator><name pos:start="65:28" pos:end="65:39"><name pos:start="65:28" pos:end="65:30">cap</name><operator pos:start="65:31" pos:end="65:32">-&gt;</operator><name pos:start="65:33" pos:end="65:39">cb_head</name></name></expr></argument>, <argument pos:start="65:42" pos:end="65:43"><expr pos:start="65:42" pos:end="65:43"><name pos:start="65:42" pos:end="65:43">cb</name></expr></argument>, <argument pos:start="65:46" pos:end="65:52"><expr pos:start="65:46" pos:end="65:52"><name pos:start="65:46" pos:end="65:52">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:19">return <expr pos:start="67:16" pos:end="67:18"><name pos:start="67:16" pos:end="67:18">cap</name></expr>;</return>

    </block_content>}</block></if>

    <else pos:start="71:5" pos:end="187:5">else <block pos:start="71:10" pos:end="187:5">{<block_content pos:start="73:9" pos:end="185:20">

        <decl_stmt pos:start="73:9" pos:end="73:23"><decl pos:start="73:9" pos:end="73:22"><type pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:18">HWVoiceOut</name> <modifier pos:start="73:20" pos:end="73:20">*</modifier></type><name pos:start="73:21" pos:end="73:22">hw</name></decl>;</decl_stmt>

        <decl_stmt pos:start="75:9" pos:end="75:29"><decl pos:start="75:9" pos:end="75:28"><type pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:23">CaptureVoiceOut</name> <modifier pos:start="75:25" pos:end="75:25">*</modifier></type><name pos:start="75:26" pos:end="75:28">cap</name></decl>;</decl_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:58"><expr pos:start="79:9" pos:end="79:57"><name pos:start="79:9" pos:end="79:11">cap</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:57"><name pos:start="79:15" pos:end="79:26">audio_calloc</name> <argument_list pos:start="79:28" pos:end="79:57">(<argument pos:start="79:29" pos:end="79:38"><expr pos:start="79:29" pos:end="79:38"><name pos:start="79:29" pos:end="79:38">AUDIO_FUNC</name></expr></argument>, <argument pos:start="79:41" pos:end="79:41"><expr pos:start="79:41" pos:end="79:41"><literal type="number" pos:start="79:41" pos:end="79:41">1</literal></expr></argument>, <argument pos:start="79:44" pos:end="79:56"><expr pos:start="79:44" pos:end="79:56"><sizeof pos:start="79:44" pos:end="79:56">sizeof <argument_list pos:start="79:51" pos:end="79:56">(<argument pos:start="79:52" pos:end="79:55"><expr pos:start="79:52" pos:end="79:55"><operator pos:start="79:52" pos:end="79:52">*</operator><name pos:start="79:53" pos:end="79:55">cap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="89:9">if <condition pos:start="81:12" pos:end="81:17">(<expr pos:start="81:13" pos:end="81:16"><operator pos:start="81:13" pos:end="81:13">!</operator><name pos:start="81:14" pos:end="81:16">cap</name></expr>)</condition> <block pos:start="81:19" pos:end="89:9">{<block_content pos:start="83:13" pos:end="87:22">

            <expr_stmt pos:start="83:13" pos:end="85:34"><expr pos:start="83:13" pos:end="85:33"><call pos:start="83:13" pos:end="85:33"><name pos:start="83:13" pos:end="83:17">dolog</name> <argument_list pos:start="83:19" pos:end="85:33">(<argument pos:start="83:20" pos:end="83:65"><expr pos:start="83:20" pos:end="83:65"><literal type="string" pos:start="83:20" pos:end="83:65">"Could not allocate capture voice, size %zu\n"</literal></expr></argument>,

                   <argument pos:start="85:20" pos:end="85:32"><expr pos:start="85:20" pos:end="85:32"><sizeof pos:start="85:20" pos:end="85:32">sizeof <argument_list pos:start="85:27" pos:end="85:32">(<argument pos:start="85:28" pos:end="85:31"><expr pos:start="85:28" pos:end="85:31"><operator pos:start="85:28" pos:end="85:28">*</operator><name pos:start="85:29" pos:end="85:31">cap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="87:13" pos:end="87:22">goto <name pos:start="87:18" pos:end="87:21">err1</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:22"><expr pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:10">hw</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <operator pos:start="93:14" pos:end="93:14">&amp;</operator><name pos:start="93:15" pos:end="93:21"><name pos:start="93:15" pos:end="93:17">cap</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:21">hw</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:33"><expr pos:start="95:9" pos:end="95:32"><call pos:start="95:9" pos:end="95:32"><name pos:start="95:9" pos:end="95:17">LIST_INIT</name> <argument_list pos:start="95:19" pos:end="95:32">(<argument pos:start="95:20" pos:end="95:31"><expr pos:start="95:20" pos:end="95:31"><operator pos:start="95:20" pos:end="95:20">&amp;</operator><name pos:start="95:21" pos:end="95:31"><name pos:start="95:21" pos:end="95:22">hw</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:31">sw_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:34"><expr pos:start="97:9" pos:end="97:33"><call pos:start="97:9" pos:end="97:33"><name pos:start="97:9" pos:end="97:17">LIST_INIT</name> <argument_list pos:start="97:19" pos:end="97:33">(<argument pos:start="97:20" pos:end="97:32"><expr pos:start="97:20" pos:end="97:32"><operator pos:start="97:20" pos:end="97:20">&amp;</operator><name pos:start="97:21" pos:end="97:32"><name pos:start="97:21" pos:end="97:23">cap</name><operator pos:start="97:24" pos:end="97:25">-&gt;</operator><name pos:start="97:26" pos:end="97:32">cb_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="101:9" pos:end="101:41">/* XXX find a more elegant way */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:31"><expr pos:start="103:9" pos:end="103:30"><name pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:10">hw</name><operator pos:start="103:11" pos:end="103:12">-&gt;</operator><name pos:start="103:13" pos:end="103:19">samples</name></name> <operator pos:start="103:21" pos:end="103:21">=</operator> <literal type="number" pos:start="103:23" pos:end="103:26">4096</literal> <operator pos:start="103:28" pos:end="103:28">*</operator> <literal type="number" pos:start="103:30" pos:end="103:30">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="107:58"><expr pos:start="105:9" pos:end="107:57"><name pos:start="105:9" pos:end="105:19"><name pos:start="105:9" pos:end="105:10">hw</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:19">mix_buf</name></name> <operator pos:start="105:21" pos:end="105:21">=</operator> <call pos:start="105:23" pos:end="107:57"><name pos:start="105:23" pos:end="105:34">audio_calloc</name> <argument_list pos:start="105:36" pos:end="107:57">(<argument pos:start="105:37" pos:end="105:46"><expr pos:start="105:37" pos:end="105:46"><name pos:start="105:37" pos:end="105:46">AUDIO_FUNC</name></expr></argument>, <argument pos:start="105:49" pos:end="105:59"><expr pos:start="105:49" pos:end="105:59"><name pos:start="105:49" pos:end="105:59"><name pos:start="105:49" pos:end="105:50">hw</name><operator pos:start="105:51" pos:end="105:52">-&gt;</operator><name pos:start="105:53" pos:end="105:59">samples</name></name></expr></argument>,

                                    <argument pos:start="107:37" pos:end="107:56"><expr pos:start="107:37" pos:end="107:56"><sizeof pos:start="107:37" pos:end="107:56">sizeof <argument_list pos:start="107:44" pos:end="107:56">(<argument pos:start="107:45" pos:end="107:55"><expr pos:start="107:45" pos:end="107:55"><name pos:start="107:45" pos:end="107:55">st_sample_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="117:9"><if pos:start="109:9" pos:end="117:9">if <condition pos:start="109:12" pos:end="109:25">(<expr pos:start="109:13" pos:end="109:24"><operator pos:start="109:13" pos:end="109:13">!</operator><name pos:start="109:14" pos:end="109:24"><name pos:start="109:14" pos:end="109:15">hw</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:24">mix_buf</name></name></expr>)</condition> <block pos:start="109:27" pos:end="117:9">{<block_content pos:start="111:13" pos:end="115:22">

            <expr_stmt pos:start="111:13" pos:end="113:32"><expr pos:start="111:13" pos:end="113:31"><call pos:start="111:13" pos:end="113:31"><name pos:start="111:13" pos:end="111:17">dolog</name> <argument_list pos:start="111:19" pos:end="113:31">(<argument pos:start="111:20" pos:end="111:73"><expr pos:start="111:20" pos:end="111:73"><literal type="string" pos:start="111:20" pos:end="111:73">"Could not allocate capture mix buffer (%d samples)\n"</literal></expr></argument>,

                   <argument pos:start="113:20" pos:end="113:30"><expr pos:start="113:20" pos:end="113:30"><name pos:start="113:20" pos:end="113:30"><name pos:start="113:20" pos:end="113:21">hw</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:30">samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="115:13" pos:end="115:22">goto <name pos:start="115:18" pos:end="115:21">err2</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="121:9" pos:end="121:44"><expr pos:start="121:9" pos:end="121:43"><call pos:start="121:9" pos:end="121:43"><name pos:start="121:9" pos:end="121:27">audio_pcm_init_info</name> <argument_list pos:start="121:29" pos:end="121:43">(<argument pos:start="121:30" pos:end="121:38"><expr pos:start="121:30" pos:end="121:38"><operator pos:start="121:30" pos:end="121:30">&amp;</operator><name pos:start="121:31" pos:end="121:38"><name pos:start="121:31" pos:end="121:32">hw</name><operator pos:start="121:33" pos:end="121:34">-&gt;</operator><name pos:start="121:35" pos:end="121:38">info</name></name></expr></argument>, <argument pos:start="121:41" pos:end="121:42"><expr pos:start="121:41" pos:end="121:42"><name pos:start="121:41" pos:end="121:42">as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:79"><expr pos:start="125:9" pos:end="125:78"><name pos:start="125:9" pos:end="125:16"><name pos:start="125:9" pos:end="125:11">cap</name><operator pos:start="125:12" pos:end="125:13">-&gt;</operator><name pos:start="125:14" pos:end="125:16">buf</name></name> <operator pos:start="125:18" pos:end="125:18">=</operator> <call pos:start="125:20" pos:end="125:78"><name pos:start="125:20" pos:end="125:31">audio_calloc</name> <argument_list pos:start="125:33" pos:end="125:78">(<argument pos:start="125:34" pos:end="125:43"><expr pos:start="125:34" pos:end="125:43"><name pos:start="125:34" pos:end="125:43">AUDIO_FUNC</name></expr></argument>, <argument pos:start="125:46" pos:end="125:56"><expr pos:start="125:46" pos:end="125:56"><name pos:start="125:46" pos:end="125:56"><name pos:start="125:46" pos:end="125:47">hw</name><operator pos:start="125:48" pos:end="125:49">-&gt;</operator><name pos:start="125:50" pos:end="125:56">samples</name></name></expr></argument>, <argument pos:start="125:59" pos:end="125:77"><expr pos:start="125:59" pos:end="125:77"><literal type="number" pos:start="125:59" pos:end="125:59">1</literal> <operator pos:start="125:61" pos:end="125:62">&lt;&lt;</operator> <name pos:start="125:64" pos:end="125:77"><name pos:start="125:64" pos:end="125:65">hw</name><operator pos:start="125:66" pos:end="125:67">-&gt;</operator><name pos:start="125:68" pos:end="125:71">info</name><operator pos:start="125:72" pos:end="125:72">.</operator><name pos:start="125:73" pos:end="125:77">shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="137:9"><if pos:start="127:9" pos:end="137:9">if <condition pos:start="127:12" pos:end="127:22">(<expr pos:start="127:13" pos:end="127:21"><operator pos:start="127:13" pos:end="127:13">!</operator><name pos:start="127:14" pos:end="127:21"><name pos:start="127:14" pos:end="127:16">cap</name><operator pos:start="127:17" pos:end="127:18">-&gt;</operator><name pos:start="127:19" pos:end="127:21">buf</name></name></expr>)</condition> <block pos:start="127:24" pos:end="137:9">{<block_content pos:start="129:13" pos:end="135:22">

            <expr_stmt pos:start="129:13" pos:end="133:53"><expr pos:start="129:13" pos:end="133:52"><call pos:start="129:13" pos:end="133:52"><name pos:start="129:13" pos:end="129:17">dolog</name> <argument_list pos:start="129:19" pos:end="133:52">(<argument pos:start="129:20" pos:end="131:50"><expr pos:start="129:20" pos:end="131:50"><literal type="string" pos:start="129:20" pos:end="129:55">"Could not allocate capture buffer "</literal>

                   <literal type="string" pos:start="131:20" pos:end="131:50">"(%d samples, each %d bytes)\n"</literal></expr></argument>,

                   <argument pos:start="133:20" pos:end="133:30"><expr pos:start="133:20" pos:end="133:30"><name pos:start="133:20" pos:end="133:30"><name pos:start="133:20" pos:end="133:21">hw</name><operator pos:start="133:22" pos:end="133:23">-&gt;</operator><name pos:start="133:24" pos:end="133:30">samples</name></name></expr></argument>, <argument pos:start="133:33" pos:end="133:51"><expr pos:start="133:33" pos:end="133:51"><literal type="number" pos:start="133:33" pos:end="133:33">1</literal> <operator pos:start="133:35" pos:end="133:36">&lt;&lt;</operator> <name pos:start="133:38" pos:end="133:51"><name pos:start="133:38" pos:end="133:39">hw</name><operator pos:start="133:40" pos:end="133:41">-&gt;</operator><name pos:start="133:42" pos:end="133:45">info</name><operator pos:start="133:46" pos:end="133:46">.</operator><name pos:start="133:47" pos:end="133:51">shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="135:13" pos:end="135:22">goto <name pos:start="135:18" pos:end="135:21">err3</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="141:9" pos:end="149:50"><expr pos:start="141:9" pos:end="149:49"><name pos:start="141:9" pos:end="141:16"><name pos:start="141:9" pos:end="141:10">hw</name><operator pos:start="141:11" pos:end="141:12">-&gt;</operator><name pos:start="141:13" pos:end="141:16">clip</name></name> <operator pos:start="141:18" pos:end="141:18">=</operator> <name pos:start="141:20" pos:end="149:49"><name pos:start="141:20" pos:end="141:30">mixeng_clip</name>

            <index pos:start="143:13" pos:end="143:37">[<expr pos:start="143:14" pos:end="143:36"><name pos:start="143:14" pos:end="143:31"><name pos:start="143:14" pos:end="143:15">hw</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:21">info</name><operator pos:start="143:22" pos:end="143:22">.</operator><name pos:start="143:23" pos:end="143:31">nchannels</name></name> <operator pos:start="143:33" pos:end="143:34">==</operator> <literal type="number" pos:start="143:36" pos:end="143:36">2</literal></expr>]</index>

            <index pos:start="145:13" pos:end="145:27">[<expr pos:start="145:14" pos:end="145:26"><name pos:start="145:14" pos:end="145:26"><name pos:start="145:14" pos:end="145:15">hw</name><operator pos:start="145:16" pos:end="145:17">-&gt;</operator><name pos:start="145:18" pos:end="145:21">info</name><operator pos:start="145:22" pos:end="145:22">.</operator><name pos:start="145:23" pos:end="145:26">sign</name></name></expr>]</index>

            <index pos:start="147:13" pos:end="147:38">[<expr pos:start="147:14" pos:end="147:37"><name pos:start="147:14" pos:end="147:37"><name pos:start="147:14" pos:end="147:15">hw</name><operator pos:start="147:16" pos:end="147:17">-&gt;</operator><name pos:start="147:18" pos:end="147:21">info</name><operator pos:start="147:22" pos:end="147:22">.</operator><name pos:start="147:23" pos:end="147:37">swap_endianness</name></name></expr>]</index>

            <index pos:start="149:13" pos:end="149:49">[<expr pos:start="149:14" pos:end="149:48"><call pos:start="149:14" pos:end="149:48"><name pos:start="149:14" pos:end="149:32">audio_bits_to_index</name> <argument_list pos:start="149:34" pos:end="149:48">(<argument pos:start="149:35" pos:end="149:47"><expr pos:start="149:35" pos:end="149:47"><name pos:start="149:35" pos:end="149:47"><name pos:start="149:35" pos:end="149:36">hw</name><operator pos:start="149:37" pos:end="149:38">-&gt;</operator><name pos:start="149:39" pos:end="149:42">info</name><operator pos:start="149:43" pos:end="149:43">.</operator><name pos:start="149:44" pos:end="149:47">bits</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="153:9" pos:end="153:54"><expr pos:start="153:9" pos:end="153:53"><call pos:start="153:9" pos:end="153:53"><name pos:start="153:9" pos:end="153:24">LIST_INSERT_HEAD</name> <argument_list pos:start="153:26" pos:end="153:53">(<argument pos:start="153:27" pos:end="153:38"><expr pos:start="153:27" pos:end="153:38"><operator pos:start="153:27" pos:end="153:27">&amp;</operator><name pos:start="153:28" pos:end="153:38"><name pos:start="153:28" pos:end="153:28">s</name><operator pos:start="153:29" pos:end="153:30">-&gt;</operator><name pos:start="153:31" pos:end="153:38">cap_head</name></name></expr></argument>, <argument pos:start="153:41" pos:end="153:43"><expr pos:start="153:41" pos:end="153:43"><name pos:start="153:41" pos:end="153:43">cap</name></expr></argument>, <argument pos:start="153:46" pos:end="153:52"><expr pos:start="153:46" pos:end="153:52"><name pos:start="153:46" pos:end="153:52">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:54"><expr pos:start="155:9" pos:end="155:53"><call pos:start="155:9" pos:end="155:53"><name pos:start="155:9" pos:end="155:24">LIST_INSERT_HEAD</name> <argument_list pos:start="155:26" pos:end="155:53">(<argument pos:start="155:27" pos:end="155:39"><expr pos:start="155:27" pos:end="155:39"><operator pos:start="155:27" pos:end="155:27">&amp;</operator><name pos:start="155:28" pos:end="155:39"><name pos:start="155:28" pos:end="155:30">cap</name><operator pos:start="155:31" pos:end="155:32">-&gt;</operator><name pos:start="155:33" pos:end="155:39">cb_head</name></name></expr></argument>, <argument pos:start="155:42" pos:end="155:43"><expr pos:start="155:42" pos:end="155:43"><name pos:start="155:42" pos:end="155:43">cb</name></expr></argument>, <argument pos:start="155:46" pos:end="155:52"><expr pos:start="155:46" pos:end="155:52"><name pos:start="155:46" pos:end="155:52">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:18"><expr pos:start="159:9" pos:end="159:17"><name pos:start="159:9" pos:end="159:10">hw</name> <operator pos:start="159:12" pos:end="159:12">=</operator> <name pos:start="159:14" pos:end="159:17">NULL</name></expr>;</expr_stmt>

        <while pos:start="161:9" pos:end="165:9">while <condition pos:start="161:15" pos:end="161:56">(<expr pos:start="161:16" pos:end="161:55"><operator pos:start="161:16" pos:end="161:16">(</operator><name pos:start="161:17" pos:end="161:18">hw</name> <operator pos:start="161:20" pos:end="161:20">=</operator> <call pos:start="161:22" pos:end="161:54"><name pos:start="161:22" pos:end="161:46">audio_pcm_hw_find_any_out</name> <argument_list pos:start="161:48" pos:end="161:54">(<argument pos:start="161:49" pos:end="161:49"><expr pos:start="161:49" pos:end="161:49"><name pos:start="161:49" pos:end="161:49">s</name></expr></argument>, <argument pos:start="161:52" pos:end="161:53"><expr pos:start="161:52" pos:end="161:53"><name pos:start="161:52" pos:end="161:53">hw</name></expr></argument>)</argument_list></call><operator pos:start="161:55" pos:end="161:55">)</operator></expr>)</condition> <block pos:start="161:58" pos:end="165:9">{<block_content pos:start="163:13" pos:end="163:41">

            <expr_stmt pos:start="163:13" pos:end="163:41"><expr pos:start="163:13" pos:end="163:40"><call pos:start="163:13" pos:end="163:40"><name pos:start="163:13" pos:end="163:32">audio_attach_capture</name> <argument_list pos:start="163:34" pos:end="163:40">(<argument pos:start="163:35" pos:end="163:35"><expr pos:start="163:35" pos:end="163:35"><name pos:start="163:35" pos:end="163:35">s</name></expr></argument>, <argument pos:start="163:38" pos:end="163:39"><expr pos:start="163:38" pos:end="163:39"><name pos:start="163:38" pos:end="163:39">hw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <return pos:start="167:9" pos:end="167:19">return <expr pos:start="167:16" pos:end="167:18"><name pos:start="167:16" pos:end="167:18">cap</name></expr>;</return>



    <label pos:start="171:5" pos:end="171:9"><name pos:start="171:5" pos:end="171:8">err3</name>:</label>

        <expr_stmt pos:start="173:9" pos:end="173:36"><expr pos:start="173:9" pos:end="173:35"><call pos:start="173:9" pos:end="173:35"><name pos:start="173:9" pos:end="173:17">qemu_free</name> <argument_list pos:start="173:19" pos:end="173:35">(<argument pos:start="173:20" pos:end="173:34"><expr pos:start="173:20" pos:end="173:34"><name pos:start="173:20" pos:end="173:34"><name pos:start="173:20" pos:end="173:22">cap</name><operator pos:start="173:23" pos:end="173:24">-&gt;</operator><name pos:start="173:25" pos:end="173:26">hw</name><operator pos:start="173:27" pos:end="173:27">.</operator><name pos:start="173:28" pos:end="173:34">mix_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="175:5" pos:end="175:9"><name pos:start="175:5" pos:end="175:8">err2</name>:</label>

        <expr_stmt pos:start="177:9" pos:end="177:24"><expr pos:start="177:9" pos:end="177:23"><call pos:start="177:9" pos:end="177:23"><name pos:start="177:9" pos:end="177:17">qemu_free</name> <argument_list pos:start="177:19" pos:end="177:23">(<argument pos:start="177:20" pos:end="177:22"><expr pos:start="177:20" pos:end="177:22"><name pos:start="177:20" pos:end="177:22">cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="179:5" pos:end="179:9"><name pos:start="179:5" pos:end="179:8">err1</name>:</label>

        <expr_stmt pos:start="181:9" pos:end="181:23"><expr pos:start="181:9" pos:end="181:22"><call pos:start="181:9" pos:end="181:22"><name pos:start="181:9" pos:end="181:17">qemu_free</name> <argument_list pos:start="181:19" pos:end="181:22">(<argument pos:start="181:20" pos:end="181:21"><expr pos:start="181:20" pos:end="181:21"><name pos:start="181:20" pos:end="181:21">cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="183:5" pos:end="183:9"><name pos:start="183:5" pos:end="183:8">err0</name>:</label>

        <return pos:start="185:9" pos:end="185:20">return <expr pos:start="185:16" pos:end="185:19"><name pos:start="185:16" pos:end="185:19">NULL</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
