<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23573.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_user_data</name><parameter_list pos:start="1:28" pos:end="1:65">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:42">MpegEncContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:64"><decl pos:start="1:48" pos:end="1:64"><type pos:start="1:48" pos:end="1:64"><name pos:start="1:48" pos:end="1:60">GetBitContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">gb</name></decl></parameter>)</parameter_list><block pos:start="1:66" pos:end="103:1">{<block_content pos:start="3:5" pos:end="101:13">

    <decl_stmt pos:start="3:5" pos:end="3:18"><decl pos:start="3:5" pos:end="3:17"><type pos:start="3:5" pos:end="3:8"><name pos:start="3:5" pos:end="3:8">char</name></type> <name pos:start="3:10" pos:end="3:17"><name pos:start="3:10" pos:end="3:12">buf</name><index pos:start="3:13" pos:end="3:17">[<expr pos:start="3:14" pos:end="3:16"><literal type="number" pos:start="3:14" pos:end="3:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ver</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>, <decl pos:start="9:18" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:22">build</name> <init pos:start="9:24" pos:end="9:26">= <expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">0</literal></expr></init></decl>, <decl pos:start="9:29" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:29" pos:end="9:32">ver2</name> <init pos:start="9:34" pos:end="9:36">= <expr pos:start="9:36" pos:end="9:36"><literal type="number" pos:start="9:36" pos:end="9:36">0</literal></expr></init></decl>, <decl pos:start="9:39" pos:end="9:46"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:39" pos:end="9:42">ver3</name> <init pos:start="9:44" pos:end="9:46">= <expr pos:start="9:46" pos:end="9:46"><literal type="number" pos:start="9:46" pos:end="9:46">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:13">last</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="21:5">for<control pos:start="15:8" pos:end="15:65">(<init pos:start="15:9" pos:end="15:12"><expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:9">i</name><operator pos:start="15:10" pos:end="15:10">=</operator><literal type="number" pos:start="15:11" pos:end="15:11">0</literal></expr>;</init> <condition pos:start="15:14" pos:end="15:60"><expr pos:start="15:14" pos:end="15:59"><name pos:start="15:14" pos:end="15:14">i</name><operator pos:start="15:15" pos:end="15:15">&lt;</operator><literal type="number" pos:start="15:16" pos:end="15:18">255</literal> <operator pos:start="15:20" pos:end="15:21">&amp;&amp;</operator> <call pos:start="15:23" pos:end="15:40"><name pos:start="15:23" pos:end="15:36">get_bits_count</name><argument_list pos:start="15:37" pos:end="15:40">(<argument pos:start="15:38" pos:end="15:39"><expr pos:start="15:38" pos:end="15:39"><name pos:start="15:38" pos:end="15:39">gb</name></expr></argument>)</argument_list></call> <operator pos:start="15:42" pos:end="15:42">&lt;</operator> <name pos:start="15:44" pos:end="15:59"><name pos:start="15:44" pos:end="15:45">gb</name><operator pos:start="15:46" pos:end="15:47">-&gt;</operator><name pos:start="15:48" pos:end="15:59">size_in_bits</name></name></expr>;</condition> <incr pos:start="15:62" pos:end="15:64"><expr pos:start="15:62" pos:end="15:64"><name pos:start="15:62" pos:end="15:62">i</name><operator pos:start="15:63" pos:end="15:64">++</operator></expr></incr>)</control><block pos:start="15:66" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:32">

        <if_stmt pos:start="17:9" pos:end="17:41"><if pos:start="17:9" pos:end="17:41">if<condition pos:start="17:11" pos:end="17:34">(<expr pos:start="17:12" pos:end="17:33"><call pos:start="17:12" pos:end="17:28"><name pos:start="17:12" pos:end="17:20">show_bits</name><argument_list pos:start="17:21" pos:end="17:28">(<argument pos:start="17:22" pos:end="17:23"><expr pos:start="17:22" pos:end="17:23"><name pos:start="17:22" pos:end="17:23">gb</name></expr></argument>, <argument pos:start="17:26" pos:end="17:27"><expr pos:start="17:26" pos:end="17:27"><literal type="number" pos:start="17:26" pos:end="17:27">23</literal></expr></argument>)</argument_list></call> <operator pos:start="17:30" pos:end="17:31">==</operator> <literal type="number" pos:start="17:33" pos:end="17:33">0</literal></expr>)</condition><block type="pseudo" pos:start="17:36" pos:end="17:41"><block_content pos:start="17:36" pos:end="17:41"> <break pos:start="17:36" pos:end="17:41">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:32"><expr pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:11">buf</name><index pos:start="19:12" pos:end="19:14">[<expr pos:start="19:13" pos:end="19:13"><name pos:start="19:13" pos:end="19:13">i</name></expr>]</index></name><operator pos:start="19:15" pos:end="19:15">=</operator> <call pos:start="19:17" pos:end="19:31"><name pos:start="19:17" pos:end="19:24">get_bits</name><argument_list pos:start="19:25" pos:end="19:31">(<argument pos:start="19:26" pos:end="19:27"><expr pos:start="19:26" pos:end="19:27"><name pos:start="19:26" pos:end="19:27">gb</name></expr></argument>, <argument pos:start="19:30" pos:end="19:30"><expr pos:start="19:30" pos:end="19:30"><literal type="number" pos:start="19:30" pos:end="19:30">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="23:5" pos:end="23:13"><expr pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:7">buf</name><index pos:start="23:8" pos:end="23:10">[<expr pos:start="23:9" pos:end="23:9"><name pos:start="23:9" pos:end="23:9">i</name></expr>]</index></name><operator pos:start="23:11" pos:end="23:11">=</operator><literal type="number" pos:start="23:12" pos:end="23:12">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:24">/* divx detection */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:58"><expr pos:start="29:5" pos:end="29:57"><name pos:start="29:5" pos:end="29:5">e</name><operator pos:start="29:6" pos:end="29:6">=</operator><call pos:start="29:7" pos:end="29:57"><name pos:start="29:7" pos:end="29:12">sscanf</name><argument_list pos:start="29:13" pos:end="29:57">(<argument pos:start="29:14" pos:end="29:16"><expr pos:start="29:14" pos:end="29:16"><name pos:start="29:14" pos:end="29:16">buf</name></expr></argument>, <argument pos:start="29:19" pos:end="29:35"><expr pos:start="29:19" pos:end="29:35"><literal type="string" pos:start="29:19" pos:end="29:35">"DivX%dBuild%d%c"</literal></expr></argument>, <argument pos:start="29:38" pos:end="29:41"><expr pos:start="29:38" pos:end="29:41"><operator pos:start="29:38" pos:end="29:38">&amp;</operator><name pos:start="29:39" pos:end="29:41">ver</name></expr></argument>, <argument pos:start="29:44" pos:end="29:49"><expr pos:start="29:44" pos:end="29:49"><operator pos:start="29:44" pos:end="29:44">&amp;</operator><name pos:start="29:45" pos:end="29:49">build</name></expr></argument>, <argument pos:start="29:52" pos:end="29:56"><expr pos:start="29:52" pos:end="29:56"><operator pos:start="29:52" pos:end="29:52">&amp;</operator><name pos:start="29:53" pos:end="29:56">last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:58"><if pos:start="31:5" pos:end="33:58">if<condition pos:start="31:7" pos:end="31:11">(<expr pos:start="31:8" pos:end="31:10"><name pos:start="31:8" pos:end="31:8">e</name><operator pos:start="31:9" pos:end="31:9">&lt;</operator><literal type="number" pos:start="31:10" pos:end="31:10">2</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:58"><block_content pos:start="33:9" pos:end="33:58">

        <expr_stmt pos:start="33:9" pos:end="33:58"><expr pos:start="33:9" pos:end="33:57"><name pos:start="33:9" pos:end="33:9">e</name><operator pos:start="33:10" pos:end="33:10">=</operator><call pos:start="33:11" pos:end="33:57"><name pos:start="33:11" pos:end="33:16">sscanf</name><argument_list pos:start="33:17" pos:end="33:57">(<argument pos:start="33:18" pos:end="33:20"><expr pos:start="33:18" pos:end="33:20"><name pos:start="33:18" pos:end="33:20">buf</name></expr></argument>, <argument pos:start="33:23" pos:end="33:35"><expr pos:start="33:23" pos:end="33:35"><literal type="string" pos:start="33:23" pos:end="33:35">"DivX%db%d%c"</literal></expr></argument>, <argument pos:start="33:38" pos:end="33:41"><expr pos:start="33:38" pos:end="33:41"><operator pos:start="33:38" pos:end="33:38">&amp;</operator><name pos:start="33:39" pos:end="33:41">ver</name></expr></argument>, <argument pos:start="33:44" pos:end="33:49"><expr pos:start="33:44" pos:end="33:49"><operator pos:start="33:44" pos:end="33:44">&amp;</operator><name pos:start="33:45" pos:end="33:49">build</name></expr></argument>, <argument pos:start="33:52" pos:end="33:56"><expr pos:start="33:52" pos:end="33:56"><operator pos:start="33:52" pos:end="33:52">&amp;</operator><name pos:start="33:53" pos:end="33:56">last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="47:5"><if pos:start="35:5" pos:end="47:5">if<condition pos:start="35:7" pos:end="35:12">(<expr pos:start="35:8" pos:end="35:11"><name pos:start="35:8" pos:end="35:8">e</name><operator pos:start="35:9" pos:end="35:10">&gt;=</operator><literal type="number" pos:start="35:11" pos:end="35:11">2</literal></expr>)</condition><block pos:start="35:13" pos:end="47:5">{<block_content pos:start="37:9" pos:end="45:107">

        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:23">divx_version</name></name><operator pos:start="37:24" pos:end="37:24">=</operator> <name pos:start="37:26" pos:end="37:28">ver</name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:21">divx_build</name></name><operator pos:start="39:22" pos:end="39:22">=</operator> <name pos:start="39:24" pos:end="39:28">build</name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:42"><expr pos:start="41:9" pos:end="41:41"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:22">divx_packed</name></name><operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:25">e</name><operator pos:start="41:26" pos:end="41:27">==</operator><literal type="number" pos:start="41:28" pos:end="41:28">3</literal> <operator pos:start="41:30" pos:end="41:31">&amp;&amp;</operator> <name pos:start="41:33" pos:end="41:36">last</name><operator pos:start="41:37" pos:end="41:38">==</operator><literal type="char" pos:start="41:39" pos:end="41:41">'p'</literal></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="45:107"><if pos:start="43:9" pos:end="45:107">if<condition pos:start="43:11" pos:end="43:26">(<expr pos:start="43:12" pos:end="43:25"><name pos:start="43:12" pos:end="43:25"><name pos:start="43:12" pos:end="43:12">s</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:25">divx_packed</name></name></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:107"><block_content pos:start="45:13" pos:end="45:107">

            <expr_stmt pos:start="45:13" pos:end="45:107"><expr pos:start="45:13" pos:end="45:106"><call pos:start="45:13" pos:end="45:106"><name pos:start="45:13" pos:end="45:18">av_log</name><argument_list pos:start="45:19" pos:end="45:106">(<argument pos:start="45:20" pos:end="45:27"><expr pos:start="45:20" pos:end="45:27"><name pos:start="45:20" pos:end="45:27"><name pos:start="45:20" pos:end="45:20">s</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:27">avctx</name></name></expr></argument>, <argument pos:start="45:30" pos:end="45:43"><expr pos:start="45:30" pos:end="45:43"><name pos:start="45:30" pos:end="45:43">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="45:46" pos:end="45:105"><expr pos:start="45:46" pos:end="45:105"><literal type="string" pos:start="45:46" pos:end="45:105">"Invalid and inefficient vfw-avi packed B frames detected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:26">/* ffmpeg detection */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:46"><expr pos:start="53:5" pos:end="53:45"><name pos:start="53:5" pos:end="53:5">e</name><operator pos:start="53:6" pos:end="53:6">=</operator><call pos:start="53:7" pos:end="53:43"><name pos:start="53:7" pos:end="53:12">sscanf</name><argument_list pos:start="53:13" pos:end="53:43">(<argument pos:start="53:14" pos:end="53:16"><expr pos:start="53:14" pos:end="53:16"><name pos:start="53:14" pos:end="53:16">buf</name></expr></argument>, <argument pos:start="53:19" pos:end="53:34"><expr pos:start="53:19" pos:end="53:34"><literal type="string" pos:start="53:19" pos:end="53:34">"FFmpe%*[^b]b%d"</literal></expr></argument>, <argument pos:start="53:37" pos:end="53:42"><expr pos:start="53:37" pos:end="53:42"><operator pos:start="53:37" pos:end="53:37">&amp;</operator><name pos:start="53:38" pos:end="53:42">build</name></expr></argument>)</argument_list></call><operator pos:start="53:44" pos:end="53:44">+</operator><literal type="number" pos:start="53:45" pos:end="53:45">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="57:93"><if pos:start="55:5" pos:end="57:93">if<condition pos:start="55:7" pos:end="55:12">(<expr pos:start="55:8" pos:end="55:11"><name pos:start="55:8" pos:end="55:8">e</name><operator pos:start="55:9" pos:end="55:10">!=</operator><literal type="number" pos:start="55:11" pos:end="55:11">4</literal></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:93"><block_content pos:start="57:9" pos:end="57:93">

        <expr_stmt pos:start="57:9" pos:end="57:93"><expr pos:start="57:9" pos:end="57:92"><name pos:start="57:9" pos:end="57:9">e</name><operator pos:start="57:10" pos:end="57:10">=</operator><call pos:start="57:11" pos:end="57:92"><name pos:start="57:11" pos:end="57:16">sscanf</name><argument_list pos:start="57:17" pos:end="57:92">(<argument pos:start="57:18" pos:end="57:20"><expr pos:start="57:18" pos:end="57:20"><name pos:start="57:18" pos:end="57:20">buf</name></expr></argument>, <argument pos:start="57:23" pos:end="57:63"><expr pos:start="57:23" pos:end="57:63"><literal type="string" pos:start="57:23" pos:end="57:63">"FFmpeg v%d.%d.%d / libavcodec build: %d"</literal></expr></argument>, <argument pos:start="57:66" pos:end="57:69"><expr pos:start="57:66" pos:end="57:69"><operator pos:start="57:66" pos:end="57:66">&amp;</operator><name pos:start="57:67" pos:end="57:69">ver</name></expr></argument>, <argument pos:start="57:72" pos:end="57:76"><expr pos:start="57:72" pos:end="57:76"><operator pos:start="57:72" pos:end="57:72">&amp;</operator><name pos:start="57:73" pos:end="57:76">ver2</name></expr></argument>, <argument pos:start="57:79" pos:end="57:83"><expr pos:start="57:79" pos:end="57:83"><operator pos:start="57:79" pos:end="57:79">&amp;</operator><name pos:start="57:80" pos:end="57:83">ver3</name></expr></argument>, <argument pos:start="57:86" pos:end="57:91"><expr pos:start="57:86" pos:end="57:91"><operator pos:start="57:86" pos:end="57:86">&amp;</operator><name pos:start="57:87" pos:end="57:91">build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if<condition pos:start="59:7" pos:end="59:12">(<expr pos:start="59:8" pos:end="59:11"><name pos:start="59:8" pos:end="59:8">e</name><operator pos:start="59:9" pos:end="59:10">!=</operator><literal type="number" pos:start="59:11" pos:end="59:11">4</literal></expr>)</condition><block pos:start="59:13" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:48">

        <expr_stmt pos:start="61:9" pos:end="61:60"><expr pos:start="61:9" pos:end="61:59"><name pos:start="61:9" pos:end="61:9">e</name><operator pos:start="61:10" pos:end="61:10">=</operator><call pos:start="61:11" pos:end="61:57"><name pos:start="61:11" pos:end="61:16">sscanf</name><argument_list pos:start="61:17" pos:end="61:57">(<argument pos:start="61:18" pos:end="61:20"><expr pos:start="61:18" pos:end="61:20"><name pos:start="61:18" pos:end="61:20">buf</name></expr></argument>, <argument pos:start="61:23" pos:end="61:36"><expr pos:start="61:23" pos:end="61:36"><literal type="string" pos:start="61:23" pos:end="61:36">"Lavc%d.%d.%d"</literal></expr></argument>, <argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><operator pos:start="61:39" pos:end="61:39">&amp;</operator><name pos:start="61:40" pos:end="61:42">ver</name></expr></argument>, <argument pos:start="61:45" pos:end="61:49"><expr pos:start="61:45" pos:end="61:49"><operator pos:start="61:45" pos:end="61:45">&amp;</operator><name pos:start="61:46" pos:end="61:49">ver2</name></expr></argument>, <argument pos:start="61:52" pos:end="61:56"><expr pos:start="61:52" pos:end="61:56"><operator pos:start="61:52" pos:end="61:52">&amp;</operator><name pos:start="61:53" pos:end="61:56">ver3</name></expr></argument>)</argument_list></call><operator pos:start="61:58" pos:end="61:58">+</operator><literal type="number" pos:start="61:59" pos:end="61:59">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="65:48"><if pos:start="63:9" pos:end="65:48">if <condition pos:start="63:12" pos:end="63:16">(<expr pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:13">e</name><operator pos:start="63:14" pos:end="63:14">&gt;</operator><literal type="number" pos:start="63:15" pos:end="63:15">1</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:48"><block_content pos:start="65:13" pos:end="65:48">

            <expr_stmt pos:start="65:13" pos:end="65:48"><expr pos:start="65:13" pos:end="65:47"><name pos:start="65:13" pos:end="65:17">build</name><operator pos:start="65:18" pos:end="65:18">=</operator> <operator pos:start="65:20" pos:end="65:20">(</operator><name pos:start="65:21" pos:end="65:23">ver</name><operator pos:start="65:24" pos:end="65:25">&lt;&lt;</operator><literal type="number" pos:start="65:26" pos:end="65:27">16</literal><operator pos:start="65:28" pos:end="65:28">)</operator> <operator pos:start="65:30" pos:end="65:30">+</operator> <operator pos:start="65:32" pos:end="65:32">(</operator><name pos:start="65:33" pos:end="65:36">ver2</name><operator pos:start="65:37" pos:end="65:38">&lt;&lt;</operator><literal type="number" pos:start="65:39" pos:end="65:39">8</literal><operator pos:start="65:40" pos:end="65:40">)</operator> <operator pos:start="65:42" pos:end="65:42">+</operator> <name pos:start="65:44" pos:end="65:47">ver3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="77:5"><if pos:start="69:5" pos:end="77:5">if<condition pos:start="69:7" pos:end="69:12">(<expr pos:start="69:8" pos:end="69:11"><name pos:start="69:8" pos:end="69:8">e</name><operator pos:start="69:9" pos:end="69:10">!=</operator><literal type="number" pos:start="69:11" pos:end="69:11">4</literal></expr>)</condition><block pos:start="69:13" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:9">

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if<condition pos:start="71:11" pos:end="71:36">(<expr pos:start="71:12" pos:end="71:35"><call pos:start="71:12" pos:end="71:32"><name pos:start="71:12" pos:end="71:17">strcmp</name><argument_list pos:start="71:18" pos:end="71:32">(<argument pos:start="71:19" pos:end="71:21"><expr pos:start="71:19" pos:end="71:21"><name pos:start="71:19" pos:end="71:21">buf</name></expr></argument>, <argument pos:start="71:24" pos:end="71:31"><expr pos:start="71:24" pos:end="71:31"><literal type="string" pos:start="71:24" pos:end="71:31">"ffmpeg"</literal></expr></argument>)</argument_list></call><operator pos:start="71:33" pos:end="71:34">==</operator><literal type="number" pos:start="71:35" pos:end="71:35">0</literal></expr>)</condition><block pos:start="71:37" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:32">

            <expr_stmt pos:start="73:13" pos:end="73:32"><expr pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:25">lavc_build</name></name><operator pos:start="73:26" pos:end="73:26">=</operator> <literal type="number" pos:start="73:28" pos:end="73:31">4600</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if<condition pos:start="79:7" pos:end="79:12">(<expr pos:start="79:8" pos:end="79:11"><name pos:start="79:8" pos:end="79:8">e</name><operator pos:start="79:9" pos:end="79:10">==</operator><literal type="number" pos:start="79:11" pos:end="79:11">4</literal></expr>)</condition><block pos:start="79:13" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:29">

        <expr_stmt pos:start="81:9" pos:end="81:29"><expr pos:start="81:9" pos:end="81:28"><name pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:21">lavc_build</name></name><operator pos:start="81:22" pos:end="81:22">=</operator> <name pos:start="81:24" pos:end="81:28">build</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:24">/* Xvid detection */</comment>

    <expr_stmt pos:start="89:5" pos:end="89:36"><expr pos:start="89:5" pos:end="89:35"><name pos:start="89:5" pos:end="89:5">e</name><operator pos:start="89:6" pos:end="89:6">=</operator><call pos:start="89:7" pos:end="89:35"><name pos:start="89:7" pos:end="89:12">sscanf</name><argument_list pos:start="89:13" pos:end="89:35">(<argument pos:start="89:14" pos:end="89:16"><expr pos:start="89:14" pos:end="89:16"><name pos:start="89:14" pos:end="89:16">buf</name></expr></argument>, <argument pos:start="89:19" pos:end="89:26"><expr pos:start="89:19" pos:end="89:26"><literal type="string" pos:start="89:19" pos:end="89:26">"XviD%d"</literal></expr></argument>, <argument pos:start="89:29" pos:end="89:34"><expr pos:start="89:29" pos:end="89:34"><operator pos:start="89:29" pos:end="89:29">&amp;</operator><name pos:start="89:30" pos:end="89:34">build</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="95:5"><if pos:start="91:5" pos:end="95:5">if<condition pos:start="91:7" pos:end="91:12">(<expr pos:start="91:8" pos:end="91:11"><name pos:start="91:8" pos:end="91:8">e</name><operator pos:start="91:9" pos:end="91:10">==</operator><literal type="number" pos:start="91:11" pos:end="91:11">1</literal></expr>)</condition><block pos:start="91:13" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:29">

        <expr_stmt pos:start="93:9" pos:end="93:29"><expr pos:start="93:9" pos:end="93:28"><name pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:21">xvid_build</name></name><operator pos:start="93:22" pos:end="93:22">=</operator> <name pos:start="93:24" pos:end="93:28">build</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="99:1" pos:end="99:33">//printf("User Data: %s\n", buf);</comment>

    <return pos:start="101:5" pos:end="101:13">return <expr pos:start="101:12" pos:end="101:12"><literal type="number" pos:start="101:12" pos:end="101:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
