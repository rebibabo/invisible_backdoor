<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20377.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">pcie_aer_update_log</name><parameter_list pos:start="1:32" pos:end="1:70">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:41">PCIDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">dev</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:69"><decl pos:start="1:49" pos:end="1:69"><type pos:start="1:49" pos:end="1:69"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:64">PCIEAERErr</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">err</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:48">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:20">aer_cap</name> <init pos:start="5:22" pos:end="5:53">= <expr pos:start="5:24" pos:end="5:53"><name pos:start="5:24" pos:end="5:34"><name pos:start="5:24" pos:end="5:26">dev</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:34">config</name></name> <operator pos:start="5:36" pos:end="5:36">+</operator> <name pos:start="5:38" pos:end="5:53"><name pos:start="5:38" pos:end="5:40">dev</name><operator pos:start="5:41" pos:end="5:42">-&gt;</operator><name pos:start="5:43" pos:end="5:45">exp</name><operator pos:start="5:46" pos:end="5:46">.</operator><name pos:start="5:47" pos:end="5:53">aer_cap</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:21">first_bit</name> <init pos:start="7:23" pos:end="7:44">= <expr pos:start="7:25" pos:end="7:44"><call pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:27">ffs</name><argument_list pos:start="7:28" pos:end="7:40">(<argument pos:start="7:29" pos:end="7:39"><expr pos:start="7:29" pos:end="7:39"><name pos:start="7:29" pos:end="7:39"><name pos:start="7:29" pos:end="7:31">err</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:39">status</name></name></expr></argument>)</argument_list></call> <operator pos:start="7:42" pos:end="7:42">-</operator> <literal type="number" pos:start="7:44" pos:end="7:44">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:58"><decl pos:start="9:5" pos:end="9:57"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:19">errcap</name> <init pos:start="9:21" pos:end="9:57">= <expr pos:start="9:23" pos:end="9:57"><call pos:start="9:23" pos:end="9:57"><name pos:start="9:23" pos:end="9:34">pci_get_long</name><argument_list pos:start="9:35" pos:end="9:57">(<argument pos:start="9:36" pos:end="9:56"><expr pos:start="9:36" pos:end="9:56"><name pos:start="9:36" pos:end="9:42">aer_cap</name> <operator pos:start="9:44" pos:end="9:44">+</operator> <name pos:start="9:46" pos:end="9:56">PCI_ERR_CAP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:24"><expr pos:start="15:5" pos:end="15:23"><call pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:23">(<argument pos:start="15:12" pos:end="15:22"><expr pos:start="15:12" pos:end="15:22"><name pos:start="15:12" pos:end="15:22"><name pos:start="15:12" pos:end="15:14">err</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:22">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:47"><expr pos:start="17:5" pos:end="17:46"><call pos:start="17:5" pos:end="17:46"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:46">(<argument pos:start="17:12" pos:end="17:45"><expr pos:start="17:12" pos:end="17:45"><operator pos:start="17:12" pos:end="17:12">!</operator><operator pos:start="17:13" pos:end="17:13">(</operator><name pos:start="17:14" pos:end="17:24"><name pos:start="17:14" pos:end="17:16">err</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:24">status</name></name> <operator pos:start="17:26" pos:end="17:26">&amp;</operator> <operator pos:start="17:28" pos:end="17:28">(</operator><name pos:start="17:29" pos:end="17:39"><name pos:start="17:29" pos:end="17:31">err</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:39">status</name></name> <operator pos:start="17:41" pos:end="17:41">-</operator> <literal type="number" pos:start="17:43" pos:end="17:43">1</literal><operator pos:start="17:44" pos:end="17:44">)</operator><operator pos:start="17:45" pos:end="17:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:56"><expr pos:start="21:5" pos:end="21:55"><name pos:start="21:5" pos:end="21:10">errcap</name> <operator pos:start="21:12" pos:end="21:13">&amp;=</operator> <operator pos:start="21:15" pos:end="21:15">~</operator><operator pos:start="21:16" pos:end="21:16">(</operator><name pos:start="21:17" pos:end="21:36">PCI_ERR_CAP_FEP_MASK</name> <operator pos:start="21:38" pos:end="21:38">|</operator> <name pos:start="21:40" pos:end="21:54">PCI_ERR_CAP_TLP</name><operator pos:start="21:55" pos:end="21:55">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:41"><expr pos:start="23:5" pos:end="23:40"><name pos:start="23:5" pos:end="23:10">errcap</name> <operator pos:start="23:12" pos:end="23:13">|=</operator> <call pos:start="23:15" pos:end="23:40"><name pos:start="23:15" pos:end="23:29">PCI_ERR_CAP_FEP</name><argument_list pos:start="23:30" pos:end="23:40">(<argument pos:start="23:31" pos:end="23:39"><expr pos:start="23:31" pos:end="23:39"><name pos:start="23:31" pos:end="23:39">first_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="47:5"><if pos:start="27:5" pos:end="41:5">if <condition pos:start="27:8" pos:end="27:47">(<expr pos:start="27:9" pos:end="27:46"><name pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:11">err</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:18">flags</name></name> <operator pos:start="27:20" pos:end="27:20">&amp;</operator> <name pos:start="27:22" pos:end="27:46">PCIE_AER_ERR_HEADER_VALID</name></expr>)</condition> <block pos:start="27:49" pos:end="41:5">{<block_content pos:start="29:9" pos:end="39:9">

        <for pos:start="29:9" pos:end="39:9">for <control pos:start="29:13" pos:end="29:53">(<init pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">i</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:48"><expr pos:start="29:21" pos:end="29:47"><name pos:start="29:21" pos:end="29:21">i</name> <operator pos:start="29:23" pos:end="29:23">&lt;</operator> <call pos:start="29:25" pos:end="29:47"><name pos:start="29:25" pos:end="29:34">ARRAY_SIZE</name><argument_list pos:start="29:35" pos:end="29:47">(<argument pos:start="29:36" pos:end="29:46"><expr pos:start="29:36" pos:end="29:46"><name pos:start="29:36" pos:end="29:46"><name pos:start="29:36" pos:end="29:38">err</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:46">header</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="29:50" pos:end="29:52"><expr pos:start="29:50" pos:end="29:52"><operator pos:start="29:50" pos:end="29:51">++</operator><name pos:start="29:52" pos:end="29:52">i</name></expr></incr>)</control> <block pos:start="29:55" pos:end="39:9">{<block_content pos:start="33:13" pos:end="37:49">

            <comment type="block" pos:start="31:13" pos:end="31:44">/* 7.10.8 Header Log Register */</comment>

            <decl_stmt pos:start="33:13" pos:end="35:73"><decl pos:start="33:13" pos:end="35:72"><type pos:start="33:13" pos:end="33:21"><name pos:start="33:13" pos:end="33:19">uint8_t</name> <modifier pos:start="33:21" pos:end="33:21">*</modifier></type><name pos:start="33:22" pos:end="33:31">header_log</name> <init pos:start="33:33" pos:end="35:72">=

                <expr pos:start="35:17" pos:end="35:72"><name pos:start="35:17" pos:end="35:23">aer_cap</name> <operator pos:start="35:25" pos:end="35:25">+</operator> <name pos:start="35:27" pos:end="35:44">PCI_ERR_HEADER_LOG</name> <operator pos:start="35:46" pos:end="35:46">+</operator> <name pos:start="35:48" pos:end="35:48">i</name> <operator pos:start="35:50" pos:end="35:50">*</operator> <sizeof pos:start="35:52" pos:end="35:72">sizeof <name pos:start="35:59" pos:end="35:72"><name pos:start="35:59" pos:end="35:61">err</name><operator pos:start="35:62" pos:end="35:63">-&gt;</operator><name pos:start="35:64" pos:end="35:69">header</name><index pos:start="35:70" pos:end="35:72">[<expr pos:start="35:71" pos:end="35:71"><literal type="number" pos:start="35:71" pos:end="35:71">0</literal></expr>]</index></name></sizeof></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:49"><expr pos:start="37:13" pos:end="37:48"><call pos:start="37:13" pos:end="37:48"><name pos:start="37:13" pos:end="37:20">stl_be_p</name><argument_list pos:start="37:21" pos:end="37:48">(<argument pos:start="37:22" pos:end="37:31"><expr pos:start="37:22" pos:end="37:31"><name pos:start="37:22" pos:end="37:31">header_log</name></expr></argument>, <argument pos:start="37:34" pos:end="37:47"><expr pos:start="37:34" pos:end="37:47"><name pos:start="37:34" pos:end="37:47"><name pos:start="37:34" pos:end="37:36">err</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:44">header</name><index pos:start="37:45" pos:end="37:47">[<expr pos:start="37:46" pos:end="37:46"><name pos:start="37:46" pos:end="37:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="47:5">else <block pos:start="41:12" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:73">

        <expr_stmt pos:start="43:9" pos:end="43:64"><expr pos:start="43:9" pos:end="43:63"><call pos:start="43:9" pos:end="43:63"><name pos:start="43:9" pos:end="43:14">assert</name><argument_list pos:start="43:15" pos:end="43:63">(<argument pos:start="43:16" pos:end="43:62"><expr pos:start="43:16" pos:end="43:62"><operator pos:start="43:16" pos:end="43:16">!</operator><operator pos:start="43:17" pos:end="43:17">(</operator><name pos:start="43:18" pos:end="43:27"><name pos:start="43:18" pos:end="43:20">err</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:27">flags</name></name> <operator pos:start="43:29" pos:end="43:29">&amp;</operator> <name pos:start="43:31" pos:end="43:61">PCIE_AER_ERR_TLP_PREFIX_PRESENT</name><operator pos:start="43:62" pos:end="43:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:73"><expr pos:start="45:9" pos:end="45:72"><call pos:start="45:9" pos:end="45:72"><name pos:start="45:9" pos:end="45:14">memset</name><argument_list pos:start="45:15" pos:end="45:72">(<argument pos:start="45:16" pos:end="45:43"><expr pos:start="45:16" pos:end="45:43"><name pos:start="45:16" pos:end="45:22">aer_cap</name> <operator pos:start="45:24" pos:end="45:24">+</operator> <name pos:start="45:26" pos:end="45:43">PCI_ERR_HEADER_LOG</name></expr></argument>, <argument pos:start="45:46" pos:end="45:46"><expr pos:start="45:46" pos:end="45:46"><literal type="number" pos:start="45:46" pos:end="45:46">0</literal></expr></argument>, <argument pos:start="45:49" pos:end="45:71"><expr pos:start="45:49" pos:end="45:71"><name pos:start="45:49" pos:end="45:71">PCI_ERR_HEADER_LOG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="51:5" pos:end="77:5"><if pos:start="51:5" pos:end="71:5">if <condition pos:start="51:8" pos:end="55:33">(<expr pos:start="51:9" pos:end="55:32"><operator pos:start="51:9" pos:end="51:9">(</operator><name pos:start="51:10" pos:end="51:19"><name pos:start="51:10" pos:end="51:12">err</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:19">flags</name></name> <operator pos:start="51:21" pos:end="51:21">&amp;</operator> <name pos:start="51:23" pos:end="51:53">PCIE_AER_ERR_TLP_PREFIX_PRESENT</name><operator pos:start="51:54" pos:end="51:54">)</operator> <operator pos:start="51:56" pos:end="51:57">&amp;&amp;</operator>

        <operator pos:start="53:9" pos:end="53:9">(</operator><call pos:start="53:10" pos:end="53:71"><name pos:start="53:10" pos:end="53:21">pci_get_long</name><argument_list pos:start="53:22" pos:end="53:71">(<argument pos:start="53:23" pos:end="53:70"><expr pos:start="53:23" pos:end="53:70"><name pos:start="53:23" pos:end="53:33"><name pos:start="53:23" pos:end="53:25">dev</name><operator pos:start="53:26" pos:end="53:27">-&gt;</operator><name pos:start="53:28" pos:end="53:33">config</name></name> <operator pos:start="53:35" pos:end="53:35">+</operator> <name pos:start="53:37" pos:end="53:52"><name pos:start="53:37" pos:end="53:39">dev</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:44">exp</name><operator pos:start="53:45" pos:end="53:45">.</operator><name pos:start="53:46" pos:end="53:52">exp_cap</name></name> <operator pos:start="53:54" pos:end="53:54">+</operator> <name pos:start="53:56" pos:end="53:70">PCI_EXP_DEVCAP2</name></expr></argument>)</argument_list></call> <operator pos:start="53:73" pos:end="53:73">&amp;</operator>

         <name pos:start="55:10" pos:end="55:31">PCI_EXP_DEVCAP2_EETLPP</name><operator pos:start="55:32" pos:end="55:32">)</operator></expr>)</condition> <block pos:start="55:35" pos:end="71:5">{<block_content pos:start="57:9" pos:end="69:34">

        <for pos:start="57:9" pos:end="67:9">for <control pos:start="57:13" pos:end="57:53">(<init pos:start="57:14" pos:end="57:19"><expr pos:start="57:14" pos:end="57:18"><name pos:start="57:14" pos:end="57:14">i</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <literal type="number" pos:start="57:18" pos:end="57:18">0</literal></expr>;</init> <condition pos:start="57:21" pos:end="57:48"><expr pos:start="57:21" pos:end="57:47"><name pos:start="57:21" pos:end="57:21">i</name> <operator pos:start="57:23" pos:end="57:23">&lt;</operator> <call pos:start="57:25" pos:end="57:47"><name pos:start="57:25" pos:end="57:34">ARRAY_SIZE</name><argument_list pos:start="57:35" pos:end="57:47">(<argument pos:start="57:36" pos:end="57:46"><expr pos:start="57:36" pos:end="57:46"><name pos:start="57:36" pos:end="57:46"><name pos:start="57:36" pos:end="57:38">err</name><operator pos:start="57:39" pos:end="57:40">-&gt;</operator><name pos:start="57:41" pos:end="57:46">prefix</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="57:50" pos:end="57:52"><expr pos:start="57:50" pos:end="57:52"><operator pos:start="57:50" pos:end="57:51">++</operator><name pos:start="57:52" pos:end="57:52">i</name></expr></incr>)</control> <block pos:start="57:55" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:49">

            <comment type="block" pos:start="59:13" pos:end="59:49">/* 7.10.12 tlp prefix log register */</comment>

            <decl_stmt pos:start="61:13" pos:end="63:77"><decl pos:start="61:13" pos:end="63:76"><type pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:19">uint8_t</name> <modifier pos:start="61:21" pos:end="61:21">*</modifier></type><name pos:start="61:22" pos:end="61:31">prefix_log</name> <init pos:start="61:33" pos:end="63:76">=

                <expr pos:start="63:17" pos:end="63:76"><name pos:start="63:17" pos:end="63:23">aer_cap</name> <operator pos:start="63:25" pos:end="63:25">+</operator> <name pos:start="63:27" pos:end="63:48">PCI_ERR_TLP_PREFIX_LOG</name> <operator pos:start="63:50" pos:end="63:50">+</operator> <name pos:start="63:52" pos:end="63:52">i</name> <operator pos:start="63:54" pos:end="63:54">*</operator> <sizeof pos:start="63:56" pos:end="63:76">sizeof <name pos:start="63:63" pos:end="63:76"><name pos:start="63:63" pos:end="63:65">err</name><operator pos:start="63:66" pos:end="63:67">-&gt;</operator><name pos:start="63:68" pos:end="63:73">prefix</name><index pos:start="63:74" pos:end="63:76">[<expr pos:start="63:75" pos:end="63:75"><literal type="number" pos:start="63:75" pos:end="63:75">0</literal></expr>]</index></name></sizeof></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:49"><expr pos:start="65:13" pos:end="65:48"><call pos:start="65:13" pos:end="65:48"><name pos:start="65:13" pos:end="65:20">stl_be_p</name><argument_list pos:start="65:21" pos:end="65:48">(<argument pos:start="65:22" pos:end="65:31"><expr pos:start="65:22" pos:end="65:31"><name pos:start="65:22" pos:end="65:31">prefix_log</name></expr></argument>, <argument pos:start="65:34" pos:end="65:47"><expr pos:start="65:34" pos:end="65:47"><name pos:start="65:34" pos:end="65:47"><name pos:start="65:34" pos:end="65:36">err</name><operator pos:start="65:37" pos:end="65:38">-&gt;</operator><name pos:start="65:39" pos:end="65:44">prefix</name><index pos:start="65:45" pos:end="65:47">[<expr pos:start="65:46" pos:end="65:46"><name pos:start="65:46" pos:end="65:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="69:9" pos:end="69:34"><expr pos:start="69:9" pos:end="69:33"><name pos:start="69:9" pos:end="69:14">errcap</name> <operator pos:start="69:16" pos:end="69:17">|=</operator> <name pos:start="69:19" pos:end="69:33">PCI_ERR_CAP_TLP</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="77:5">else <block pos:start="71:12" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:44">

        <expr_stmt pos:start="73:9" pos:end="75:44"><expr pos:start="73:9" pos:end="75:43"><call pos:start="73:9" pos:end="75:43"><name pos:start="73:9" pos:end="73:14">memset</name><argument_list pos:start="73:15" pos:end="75:43">(<argument pos:start="73:16" pos:end="73:47"><expr pos:start="73:16" pos:end="73:47"><name pos:start="73:16" pos:end="73:22">aer_cap</name> <operator pos:start="73:24" pos:end="73:24">+</operator> <name pos:start="73:26" pos:end="73:47">PCI_ERR_TLP_PREFIX_LOG</name></expr></argument>, <argument pos:start="73:50" pos:end="73:50"><expr pos:start="73:50" pos:end="73:50"><literal type="number" pos:start="73:50" pos:end="73:50">0</literal></expr></argument>,

               <argument pos:start="75:16" pos:end="75:42"><expr pos:start="75:16" pos:end="75:42"><name pos:start="75:16" pos:end="75:42">PCI_ERR_TLP_PREFIX_LOG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:48"><expr pos:start="79:5" pos:end="79:47"><call pos:start="79:5" pos:end="79:47"><name pos:start="79:5" pos:end="79:16">pci_set_long</name><argument_list pos:start="79:17" pos:end="79:47">(<argument pos:start="79:18" pos:end="79:38"><expr pos:start="79:18" pos:end="79:38"><name pos:start="79:18" pos:end="79:24">aer_cap</name> <operator pos:start="79:26" pos:end="79:26">+</operator> <name pos:start="79:28" pos:end="79:38">PCI_ERR_CAP</name></expr></argument>, <argument pos:start="79:41" pos:end="79:46"><expr pos:start="79:41" pos:end="79:46"><name pos:start="79:41" pos:end="79:46">errcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
