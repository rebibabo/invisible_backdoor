<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3903.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:13">avio_read</name><parameter_list pos:start="1:14" pos:end="1:59">(<parameter pos:start="1:15" pos:end="1:28"><decl pos:start="1:15" pos:end="1:28"><type pos:start="1:15" pos:end="1:28"><name pos:start="1:15" pos:end="1:25">AVIOContext</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:28">s</name></decl></parameter>, <parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:48"><name pos:start="1:31" pos:end="1:38">unsigned</name> <name pos:start="1:40" pos:end="1:43">char</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:48">buf</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:58"><decl pos:start="1:51" pos:end="1:58"><type pos:start="1:51" pos:end="1:58"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:58">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:24">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">len</name></decl>, <decl pos:start="5:14" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:18">size1</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:17"><expr pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:9">size1</name> <operator pos:start="9:11" pos:end="9:11">=</operator> <name pos:start="9:13" pos:end="9:16">size</name></expr>;</expr_stmt>

    <while pos:start="11:5" pos:end="89:5">while <condition pos:start="11:11" pos:end="11:20">(<expr pos:start="11:12" pos:end="11:19"><name pos:start="11:12" pos:end="11:15">size</name> <operator pos:start="11:17" pos:end="11:17">&gt;</operator> <literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr>)</condition> <block pos:start="11:22" pos:end="89:5">{<block_content pos:start="13:9" pos:end="87:9">

        <expr_stmt pos:start="13:9" pos:end="13:51"><expr pos:start="13:9" pos:end="13:50"><name pos:start="13:9" pos:end="13:11">len</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <call pos:start="13:15" pos:end="13:50"><name pos:start="13:15" pos:end="13:19">FFMIN</name><argument_list pos:start="13:20" pos:end="13:50">(<argument pos:start="13:21" pos:end="13:43"><expr pos:start="13:21" pos:end="13:43"><name pos:start="13:21" pos:end="13:30"><name pos:start="13:21" pos:end="13:21">s</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:30">buf_end</name></name> <operator pos:start="13:32" pos:end="13:32">-</operator> <name pos:start="13:34" pos:end="13:43"><name pos:start="13:34" pos:end="13:34">s</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:43">buf_ptr</name></name></expr></argument>, <argument pos:start="13:46" pos:end="13:49"><expr pos:start="13:46" pos:end="13:49"><name pos:start="13:46" pos:end="13:49">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="15:9" pos:end="87:9"><if pos:start="15:9" pos:end="77:9">if <condition pos:start="15:12" pos:end="15:38">(<expr pos:start="15:13" pos:end="15:37"><name pos:start="15:13" pos:end="15:15">len</name> <operator pos:start="15:17" pos:end="15:18">==</operator> <literal type="number" pos:start="15:20" pos:end="15:20">0</literal> <operator pos:start="15:22" pos:end="15:23">||</operator> <name pos:start="15:25" pos:end="15:37"><name pos:start="15:25" pos:end="15:25">s</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:37">write_flag</name></name></expr>)</condition> <block pos:start="15:40" pos:end="77:9">{<block_content pos:start="17:13" pos:end="75:13">

            <if_stmt pos:start="17:13" pos:end="75:13"><if pos:start="17:13" pos:end="65:13">if<condition pos:start="17:15" pos:end="17:75">(<expr pos:start="17:16" pos:end="17:74"><operator pos:start="17:16" pos:end="17:16">(</operator><name pos:start="17:17" pos:end="17:25"><name pos:start="17:17" pos:end="17:17">s</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:25">direct</name></name> <operator pos:start="17:27" pos:end="17:28">||</operator> <name pos:start="17:30" pos:end="17:33">size</name> <operator pos:start="17:35" pos:end="17:35">&gt;</operator> <name pos:start="17:37" pos:end="17:50"><name pos:start="17:37" pos:end="17:37">s</name><operator pos:start="17:38" pos:end="17:39">-&gt;</operator><name pos:start="17:40" pos:end="17:50">buffer_size</name></name><operator pos:start="17:51" pos:end="17:51">)</operator> <operator pos:start="17:53" pos:end="17:54">&amp;&amp;</operator> <operator pos:start="17:56" pos:end="17:56">!</operator><name pos:start="17:57" pos:end="17:74"><name pos:start="17:57" pos:end="17:57">s</name><operator pos:start="17:58" pos:end="17:59">-&gt;</operator><name pos:start="17:60" pos:end="17:74">update_checksum</name></name></expr>)</condition> <block pos:start="17:77" pos:end="65:13">{<block_content pos:start="21:17" pos:end="63:17">

                <comment type="line" pos:start="19:17" pos:end="19:68">// bypass the buffer and read data directly into buf</comment>

                <if_stmt pos:start="21:17" pos:end="27:38"><if pos:start="21:17" pos:end="23:63">if<condition pos:start="21:19" pos:end="21:34">(<expr pos:start="21:20" pos:end="21:33"><name pos:start="21:20" pos:end="21:33"><name pos:start="21:20" pos:end="21:20">s</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:33">read_packet</name></name></expr>)</condition><block type="pseudo" pos:start="23:21" pos:end="23:63"><block_content pos:start="23:21" pos:end="23:63">

                    <expr_stmt pos:start="23:21" pos:end="23:63"><expr pos:start="23:21" pos:end="23:62"><name pos:start="23:21" pos:end="23:23">len</name> <operator pos:start="23:25" pos:end="23:25">=</operator> <call pos:start="23:27" pos:end="23:62"><name pos:start="23:27" pos:end="23:40"><name pos:start="23:27" pos:end="23:27">s</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:40">read_packet</name></name><argument_list pos:start="23:41" pos:end="23:62">(<argument pos:start="23:42" pos:end="23:50"><expr pos:start="23:42" pos:end="23:50"><name pos:start="23:42" pos:end="23:50"><name pos:start="23:42" pos:end="23:42">s</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:50">opaque</name></name></expr></argument>, <argument pos:start="23:53" pos:end="23:55"><expr pos:start="23:53" pos:end="23:55"><name pos:start="23:53" pos:end="23:55">buf</name></expr></argument>, <argument pos:start="23:58" pos:end="23:61"><expr pos:start="23:58" pos:end="23:61"><name pos:start="23:58" pos:end="23:61">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="25:17" pos:end="27:38">else<block type="pseudo" pos:start="27:21" pos:end="27:38"><block_content pos:start="27:21" pos:end="27:38">

                    <expr_stmt pos:start="27:21" pos:end="27:38"><expr pos:start="27:21" pos:end="27:37"><name pos:start="27:21" pos:end="27:23">len</name> <operator pos:start="27:25" pos:end="27:25">=</operator> <name pos:start="27:27" pos:end="27:37">AVERROR_EOF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <if_stmt pos:start="29:17" pos:end="63:17"><if pos:start="29:17" pos:end="39:17">if <condition pos:start="29:20" pos:end="29:39">(<expr pos:start="29:21" pos:end="29:38"><name pos:start="29:21" pos:end="29:23">len</name> <operator pos:start="29:25" pos:end="29:26">==</operator> <name pos:start="29:28" pos:end="29:38">AVERROR_EOF</name></expr>)</condition> <block pos:start="29:41" pos:end="39:17">{<block_content pos:start="35:21" pos:end="37:26">

                    <comment type="block" pos:start="31:21" pos:end="33:53">/* do not modify buffer if EOF reached so that a seek back can

                    be done without rereading data */</comment>

                    <expr_stmt pos:start="35:21" pos:end="35:39"><expr pos:start="35:21" pos:end="35:38"><name pos:start="35:21" pos:end="35:34"><name pos:start="35:21" pos:end="35:21">s</name><operator pos:start="35:22" pos:end="35:23">-&gt;</operator><name pos:start="35:24" pos:end="35:34">eof_reached</name></name> <operator pos:start="35:36" pos:end="35:36">=</operator> <literal type="number" pos:start="35:38" pos:end="35:38">1</literal></expr>;</expr_stmt>

                    <break pos:start="37:21" pos:end="37:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="39:19" pos:end="47:17">else if <condition pos:start="39:27" pos:end="39:35">(<expr pos:start="39:28" pos:end="39:34"><name pos:start="39:28" pos:end="39:30">len</name> <operator pos:start="39:32" pos:end="39:32">&lt;</operator> <literal type="number" pos:start="39:34" pos:end="39:34">0</literal></expr>)</condition> <block pos:start="39:37" pos:end="47:17">{<block_content pos:start="41:21" pos:end="45:26">

                    <expr_stmt pos:start="41:21" pos:end="41:39"><expr pos:start="41:21" pos:end="41:38"><name pos:start="41:21" pos:end="41:34"><name pos:start="41:21" pos:end="41:21">s</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:34">eof_reached</name></name> <operator pos:start="41:36" pos:end="41:36">=</operator> <literal type="number" pos:start="41:38" pos:end="41:38">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="43:21" pos:end="43:34"><expr pos:start="43:21" pos:end="43:33"><name pos:start="43:21" pos:end="43:28"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:28">error</name></name><operator pos:start="43:29" pos:end="43:29">=</operator> <name pos:start="43:31" pos:end="43:33">len</name></expr>;</expr_stmt>

                    <break pos:start="45:21" pos:end="45:26">break;</break>

                </block_content>}</block></if> <else pos:start="47:19" pos:end="63:17">else <block pos:start="47:24" pos:end="63:17">{<block_content pos:start="49:21" pos:end="61:53">

                    <expr_stmt pos:start="49:21" pos:end="49:34"><expr pos:start="49:21" pos:end="49:33"><name pos:start="49:21" pos:end="49:26"><name pos:start="49:21" pos:end="49:21">s</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:26">pos</name></name> <operator pos:start="49:28" pos:end="49:29">+=</operator> <name pos:start="49:31" pos:end="49:33">len</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="51:21" pos:end="51:41"><expr pos:start="51:21" pos:end="51:40"><name pos:start="51:21" pos:end="51:33"><name pos:start="51:21" pos:end="51:21">s</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:33">bytes_read</name></name> <operator pos:start="51:35" pos:end="51:36">+=</operator> <name pos:start="51:38" pos:end="51:40">len</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="53:21" pos:end="53:32"><expr pos:start="53:21" pos:end="53:31"><name pos:start="53:21" pos:end="53:24">size</name> <operator pos:start="53:26" pos:end="53:27">-=</operator> <name pos:start="53:29" pos:end="53:31">len</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="55:21" pos:end="55:31"><expr pos:start="55:21" pos:end="55:30"><name pos:start="55:21" pos:end="55:23">buf</name> <operator pos:start="55:25" pos:end="55:26">+=</operator> <name pos:start="55:28" pos:end="55:30">len</name></expr>;</expr_stmt>

                    <comment type="line" pos:start="57:21" pos:end="57:39">// reset the buffer</comment>

                    <expr_stmt pos:start="59:21" pos:end="59:43"><expr pos:start="59:21" pos:end="59:42"><name pos:start="59:21" pos:end="59:30"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:30">buf_ptr</name></name> <operator pos:start="59:32" pos:end="59:32">=</operator> <name pos:start="59:34" pos:end="59:42"><name pos:start="59:34" pos:end="59:34">s</name><operator pos:start="59:35" pos:end="59:36">-&gt;</operator><name pos:start="59:37" pos:end="59:42">buffer</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="61:21" pos:end="61:53"><expr pos:start="61:21" pos:end="61:42"><name pos:start="61:21" pos:end="61:30"><name pos:start="61:21" pos:end="61:21">s</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:30">buf_end</name></name> <operator pos:start="61:32" pos:end="61:32">=</operator> <name pos:start="61:34" pos:end="61:42"><name pos:start="61:34" pos:end="61:34">s</name><operator pos:start="61:35" pos:end="61:36">-&gt;</operator><name pos:start="61:37" pos:end="61:42">buffer</name></name></expr><comment type="block" pos:start="61:43" pos:end="61:52">/* + len*/</comment>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="65:15" pos:end="75:13">else <block pos:start="65:20" pos:end="75:13">{<block_content pos:start="67:17" pos:end="73:26">

                <expr_stmt pos:start="67:17" pos:end="67:31"><expr pos:start="67:17" pos:end="67:30"><call pos:start="67:17" pos:end="67:30"><name pos:start="67:17" pos:end="67:27">fill_buffer</name><argument_list pos:start="67:28" pos:end="67:30">(<argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><name pos:start="67:29" pos:end="67:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:46"><expr pos:start="69:17" pos:end="69:45"><name pos:start="69:17" pos:end="69:19">len</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:32"><name pos:start="69:23" pos:end="69:23">s</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:32">buf_end</name></name> <operator pos:start="69:34" pos:end="69:34">-</operator> <name pos:start="69:36" pos:end="69:45"><name pos:start="69:36" pos:end="69:36">s</name><operator pos:start="69:37" pos:end="69:38">-&gt;</operator><name pos:start="69:39" pos:end="69:45">buf_ptr</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="71:17" pos:end="73:26"><if pos:start="71:17" pos:end="73:26">if <condition pos:start="71:20" pos:end="71:29">(<expr pos:start="71:21" pos:end="71:28"><name pos:start="71:21" pos:end="71:23">len</name> <operator pos:start="71:25" pos:end="71:26">==</operator> <literal type="number" pos:start="71:28" pos:end="71:28">0</literal></expr>)</condition><block type="pseudo" pos:start="73:21" pos:end="73:26"><block_content pos:start="73:21" pos:end="73:26">

                    <break pos:start="73:21" pos:end="73:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="77:11" pos:end="87:9">else <block pos:start="77:16" pos:end="87:9">{<block_content pos:start="79:13" pos:end="85:24">

            <expr_stmt pos:start="79:13" pos:end="79:41"><expr pos:start="79:13" pos:end="79:40"><call pos:start="79:13" pos:end="79:40"><name pos:start="79:13" pos:end="79:18">memcpy</name><argument_list pos:start="79:19" pos:end="79:40">(<argument pos:start="79:20" pos:end="79:22"><expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">buf</name></expr></argument>, <argument pos:start="79:25" pos:end="79:34"><expr pos:start="79:25" pos:end="79:34"><name pos:start="79:25" pos:end="79:34"><name pos:start="79:25" pos:end="79:25">s</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:34">buf_ptr</name></name></expr></argument>, <argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:23"><expr pos:start="81:13" pos:end="81:22"><name pos:start="81:13" pos:end="81:15">buf</name> <operator pos:start="81:17" pos:end="81:18">+=</operator> <name pos:start="81:20" pos:end="81:22">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:30"><expr pos:start="83:13" pos:end="83:29"><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:22">buf_ptr</name></name> <operator pos:start="83:24" pos:end="83:25">+=</operator> <name pos:start="83:27" pos:end="83:29">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:24"><expr pos:start="85:13" pos:end="85:23"><name pos:start="85:13" pos:end="85:16">size</name> <operator pos:start="85:18" pos:end="85:19">-=</operator> <name pos:start="85:21" pos:end="85:23">len</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:22">(<expr pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:13">size1</name> <operator pos:start="91:15" pos:end="91:16">==</operator> <name pos:start="91:18" pos:end="91:21">size</name></expr>)</condition> <block pos:start="91:24" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:46">

        <if_stmt pos:start="93:9" pos:end="93:43"><if pos:start="93:9" pos:end="93:43">if <condition pos:start="93:12" pos:end="93:21">(<expr pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:20">error</name></name></expr>)</condition><block type="pseudo" pos:start="93:28" pos:end="93:43"><block_content pos:start="93:28" pos:end="93:43">      <return pos:start="93:28" pos:end="93:43">return <expr pos:start="93:35" pos:end="93:42"><name pos:start="93:35" pos:end="93:42"><name pos:start="93:35" pos:end="93:35">s</name><operator pos:start="93:36" pos:end="93:37">-&gt;</operator><name pos:start="93:38" pos:end="93:42">error</name></name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="95:9" pos:end="95:46"><if pos:start="95:9" pos:end="95:46">if <condition pos:start="95:12" pos:end="95:25">(<expr pos:start="95:13" pos:end="95:24"><call pos:start="95:13" pos:end="95:24"><name pos:start="95:13" pos:end="95:21">avio_feof</name><argument_list pos:start="95:22" pos:end="95:24">(<argument pos:start="95:23" pos:end="95:23"><expr pos:start="95:23" pos:end="95:23"><name pos:start="95:23" pos:end="95:23">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="95:28" pos:end="95:46"><block_content pos:start="95:28" pos:end="95:46">  <return pos:start="95:28" pos:end="95:46">return <expr pos:start="95:35" pos:end="95:45"><name pos:start="95:35" pos:end="95:45">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="99:5" pos:end="99:24">return <expr pos:start="99:12" pos:end="99:23"><name pos:start="99:12" pos:end="99:16">size1</name> <operator pos:start="99:18" pos:end="99:18">-</operator> <name pos:start="99:20" pos:end="99:23">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
