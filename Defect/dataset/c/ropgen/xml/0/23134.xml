<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23134.c" pos:tabs="8"><function pos:start="1:1" pos:end="385:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:35">mirror_run</name><parameter_list pos:start="1:36" pos:end="1:49">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:42"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="385:1">{<block_content pos:start="5:5" pos:end="383:64">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MirrorBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MirrorExitData</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name> <init pos:start="9:26" pos:end="9:48">= <expr pos:start="9:28" pos:end="9:48"><call pos:start="9:28" pos:end="9:48"><name pos:start="9:28" pos:end="9:33">blk_bs</name><argument_list pos:start="9:34" pos:end="9:48">(<argument pos:start="9:35" pos:end="9:47"><expr pos:start="9:35" pos:end="9:47"><name pos:start="9:35" pos:end="9:47"><name pos:start="9:35" pos:end="9:35">s</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:43">common</name><operator pos:start="9:44" pos:end="9:44">.</operator><name pos:start="9:45" pos:end="9:47">blk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:31">target_bs</name> <init pos:start="11:33" pos:end="11:51">= <expr pos:start="11:35" pos:end="11:51"><call pos:start="11:35" pos:end="11:51"><name pos:start="11:35" pos:end="11:40">blk_bs</name><argument_list pos:start="11:41" pos:end="11:51">(<argument pos:start="11:42" pos:end="11:50"><expr pos:start="11:42" pos:end="11:50"><name pos:start="11:42" pos:end="11:50"><name pos:start="11:42" pos:end="11:42">s</name><operator pos:start="11:43" pos:end="11:44">-&gt;</operator><name pos:start="11:45" pos:end="11:50">target</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:18">length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:19">BlockDriverInfo</name></type> <name pos:start="15:21" pos:end="15:23">bdi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:28"><name pos:start="17:10" pos:end="17:25">backing_filename</name><index pos:start="17:26" pos:end="17:28">[<expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">2</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block" pos:start="17:31" pos:end="19:62">/* we only need 2 characters because we are only

                                 checking for a NULL string */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:16"><decl pos:start="21:5" pos:end="21:15"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">ret</name> <init pos:start="21:13" pos:end="21:15">= <expr pos:start="21:15" pos:end="21:15"><literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:47"><decl pos:start="23:5" pos:end="23:46"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:27">target_cluster_size</name> <init pos:start="23:29" pos:end="23:46">= <expr pos:start="23:31" pos:end="23:46"><name pos:start="23:31" pos:end="23:46">BDRV_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:43">(<expr pos:start="27:9" pos:end="27:42"><call pos:start="27:9" pos:end="27:42"><name pos:start="27:9" pos:end="27:30">block_job_is_cancelled</name><argument_list pos:start="27:31" pos:end="27:42">(<argument pos:start="27:32" pos:end="27:41"><expr pos:start="27:32" pos:end="27:41"><operator pos:start="27:32" pos:end="27:32">&amp;</operator><name pos:start="27:33" pos:end="27:41"><name pos:start="27:33" pos:end="27:33">s</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:41">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:45" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:28">

        <goto pos:start="29:9" pos:end="29:28">goto <name pos:start="29:14" pos:end="29:27">immediate_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:18">bdev_length</name></name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="35:39"><name pos:start="35:22" pos:end="35:35">bdrv_getlength</name><argument_list pos:start="35:36" pos:end="35:39">(<argument pos:start="35:37" pos:end="35:38"><expr pos:start="35:37" pos:end="35:38"><name pos:start="35:37" pos:end="35:38">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="61:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:27">(<expr pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:22">bdev_length</name></name> <operator pos:start="37:24" pos:end="37:24">&lt;</operator> <literal type="number" pos:start="37:26" pos:end="37:26">0</literal></expr>)</condition> <block pos:start="37:29" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:28">

        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <name pos:start="39:15" pos:end="39:28"><name pos:start="39:15" pos:end="39:15">s</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:28">bdev_length</name></name></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:28">goto <name pos:start="41:14" pos:end="41:27">immediate_exit</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="43:7" pos:end="61:5">else if <condition pos:start="43:15" pos:end="43:35">(<expr pos:start="43:16" pos:end="43:34"><name pos:start="43:16" pos:end="43:29"><name pos:start="43:16" pos:end="43:16">s</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:29">bdev_length</name></name> <operator pos:start="43:31" pos:end="43:32">==</operator> <literal type="number" pos:start="43:34" pos:end="43:34">0</literal></expr>)</condition> <block pos:start="43:37" pos:end="61:5">{<block_content pos:start="47:9" pos:end="59:28">

        <comment type="block" pos:start="45:9" pos:end="45:59">/* Report BLOCK_JOB_READY and wait for complete. */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><call pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:29">block_job_event_ready</name><argument_list pos:start="47:30" pos:end="47:41">(<argument pos:start="47:31" pos:end="47:40"><expr pos:start="47:31" pos:end="47:40"><operator pos:start="47:31" pos:end="47:31">&amp;</operator><name pos:start="47:32" pos:end="47:40"><name pos:start="47:32" pos:end="47:32">s</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:40">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:25"><expr pos:start="49:9" pos:end="49:24"><name pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:17">synced</name></name> <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:24">true</name></expr>;</expr_stmt>

        <while pos:start="51:9" pos:end="55:9">while <condition pos:start="51:15" pos:end="51:74">(<expr pos:start="51:16" pos:end="51:73"><operator pos:start="51:16" pos:end="51:16">!</operator><call pos:start="51:17" pos:end="51:50"><name pos:start="51:17" pos:end="51:38">block_job_is_cancelled</name><argument_list pos:start="51:39" pos:end="51:50">(<argument pos:start="51:40" pos:end="51:49"><expr pos:start="51:40" pos:end="51:49"><operator pos:start="51:40" pos:end="51:40">&amp;</operator><name pos:start="51:41" pos:end="51:49"><name pos:start="51:41" pos:end="51:41">s</name><operator pos:start="51:42" pos:end="51:43">-&gt;</operator><name pos:start="51:44" pos:end="51:49">common</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:52" pos:end="51:53">&amp;&amp;</operator> <operator pos:start="51:55" pos:end="51:55">!</operator><name pos:start="51:56" pos:end="51:73"><name pos:start="51:56" pos:end="51:56">s</name><operator pos:start="51:57" pos:end="51:58">-&gt;</operator><name pos:start="51:59" pos:end="51:73">should_complete</name></name></expr>)</condition> <block pos:start="51:76" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:40">

            <expr_stmt pos:start="53:13" pos:end="53:40"><expr pos:start="53:13" pos:end="53:39"><call pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:27">block_job_yield</name><argument_list pos:start="53:28" pos:end="53:39">(<argument pos:start="53:29" pos:end="53:38"><expr pos:start="53:29" pos:end="53:38"><operator pos:start="53:29" pos:end="53:29">&amp;</operator><name pos:start="53:30" pos:end="53:38"><name pos:start="53:30" pos:end="53:30">s</name><operator pos:start="53:31" pos:end="53:32">-&gt;</operator><name pos:start="53:33" pos:end="53:38">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="57:9" pos:end="57:36"><expr pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:17">common</name><operator pos:start="57:18" pos:end="57:18">.</operator><name pos:start="57:19" pos:end="57:27">cancelled</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:35">false</name></expr>;</expr_stmt>

        <goto pos:start="59:9" pos:end="59:28">goto <name pos:start="59:14" pos:end="59:27">immediate_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:58"><expr pos:start="65:5" pos:end="65:57"><name pos:start="65:5" pos:end="65:10">length</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <call pos:start="65:14" pos:end="65:57"><name pos:start="65:14" pos:end="65:25">DIV_ROUND_UP</name><argument_list pos:start="65:26" pos:end="65:57">(<argument pos:start="65:27" pos:end="65:40"><expr pos:start="65:27" pos:end="65:40"><name pos:start="65:27" pos:end="65:40"><name pos:start="65:27" pos:end="65:27">s</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:40">bdev_length</name></name></expr></argument>, <argument pos:start="65:43" pos:end="65:56"><expr pos:start="65:43" pos:end="65:56"><name pos:start="65:43" pos:end="65:56"><name pos:start="65:43" pos:end="65:43">s</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:56">granularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:45"><expr pos:start="67:5" pos:end="67:44"><name pos:start="67:5" pos:end="67:23"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:23">in_flight_bitmap</name></name> <operator pos:start="67:25" pos:end="67:25">=</operator> <call pos:start="67:27" pos:end="67:44"><name pos:start="67:27" pos:end="67:36">bitmap_new</name><argument_list pos:start="67:37" pos:end="67:44">(<argument pos:start="67:38" pos:end="67:43"><expr pos:start="67:38" pos:end="67:43"><name pos:start="67:38" pos:end="67:43">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="77:7">/* If we have no backing file yet in the destination, we cannot let

     * the destination do COW.  Instead, we copy sectors around the

     * dirty data if needed.  We need a bitmap to do that.

     */</comment>

    <expr_stmt pos:start="79:5" pos:end="81:56"><expr pos:start="79:5" pos:end="81:55"><call pos:start="79:5" pos:end="81:55"><name pos:start="79:5" pos:end="79:29">bdrv_get_backing_filename</name><argument_list pos:start="79:30" pos:end="81:55">(<argument pos:start="79:31" pos:end="79:39"><expr pos:start="79:31" pos:end="79:39"><name pos:start="79:31" pos:end="79:39">target_bs</name></expr></argument>, <argument pos:start="79:42" pos:end="79:57"><expr pos:start="79:42" pos:end="79:57"><name pos:start="79:42" pos:end="79:57">backing_filename</name></expr></argument>,

                              <argument pos:start="81:31" pos:end="81:54"><expr pos:start="81:31" pos:end="81:54"><sizeof pos:start="81:31" pos:end="81:54">sizeof<argument_list pos:start="81:37" pos:end="81:54">(<argument pos:start="81:38" pos:end="81:53"><expr pos:start="81:38" pos:end="81:53"><name pos:start="81:38" pos:end="81:53">backing_filename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:60">(<expr pos:start="83:9" pos:end="83:59"><operator pos:start="83:9" pos:end="83:9">!</operator><call pos:start="83:10" pos:end="83:39"><name pos:start="83:10" pos:end="83:22">bdrv_get_info</name><argument_list pos:start="83:23" pos:end="83:39">(<argument pos:start="83:24" pos:end="83:32"><expr pos:start="83:24" pos:end="83:32"><name pos:start="83:24" pos:end="83:32">target_bs</name></expr></argument>, <argument pos:start="83:35" pos:end="83:38"><expr pos:start="83:35" pos:end="83:38"><operator pos:start="83:35" pos:end="83:35">&amp;</operator><name pos:start="83:36" pos:end="83:38">bdi</name></expr></argument>)</argument_list></call> <operator pos:start="83:41" pos:end="83:42">&amp;&amp;</operator> <name pos:start="83:44" pos:end="83:59"><name pos:start="83:44" pos:end="83:46">bdi</name><operator pos:start="83:47" pos:end="83:47">.</operator><name pos:start="83:48" pos:end="83:59">cluster_size</name></name></expr>)</condition> <block pos:start="83:62" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:47">

        <expr_stmt pos:start="85:9" pos:end="85:47"><expr pos:start="85:9" pos:end="85:46"><name pos:start="85:9" pos:end="85:27">target_cluster_size</name> <operator pos:start="85:29" pos:end="85:29">=</operator> <name pos:start="85:31" pos:end="85:46"><name pos:start="85:31" pos:end="85:33">bdi</name><operator pos:start="85:34" pos:end="85:34">.</operator><name pos:start="85:35" pos:end="85:46">cluster_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="91:48">(<expr pos:start="89:9" pos:end="91:47"><name pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:24">backing_filename</name><index pos:start="89:25" pos:end="89:27">[<expr pos:start="89:26" pos:end="89:26"><literal type="number" pos:start="89:26" pos:end="89:26">0</literal></expr>]</index></name> <operator pos:start="89:29" pos:end="89:30">&amp;&amp;</operator> <operator pos:start="89:32" pos:end="89:32">!</operator><name pos:start="89:33" pos:end="89:50"><name pos:start="89:33" pos:end="89:41">target_bs</name><operator pos:start="89:42" pos:end="89:43">-&gt;</operator><name pos:start="89:44" pos:end="89:50">backing</name></name>

        <operator pos:start="91:9" pos:end="91:10">&amp;&amp;</operator> <name pos:start="91:12" pos:end="91:25"><name pos:start="91:12" pos:end="91:12">s</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:25">granularity</name></name> <operator pos:start="91:27" pos:end="91:27">&lt;</operator> <name pos:start="91:29" pos:end="91:47">target_cluster_size</name></expr>)</condition> <block pos:start="91:50" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:43">

        <expr_stmt pos:start="93:9" pos:end="93:60"><expr pos:start="93:9" pos:end="93:59"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:19">buf_size</name></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <call pos:start="93:23" pos:end="93:59"><name pos:start="93:23" pos:end="93:25">MAX</name><argument_list pos:start="93:26" pos:end="93:59">(<argument pos:start="93:27" pos:end="93:37"><expr pos:start="93:27" pos:end="93:37"><name pos:start="93:27" pos:end="93:37"><name pos:start="93:27" pos:end="93:27">s</name><operator pos:start="93:28" pos:end="93:29">-&gt;</operator><name pos:start="93:30" pos:end="93:37">buf_size</name></name></expr></argument>, <argument pos:start="93:40" pos:end="93:58"><expr pos:start="93:40" pos:end="93:58"><name pos:start="93:40" pos:end="93:58">target_cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:43"><expr pos:start="95:9" pos:end="95:42"><name pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:21">cow_bitmap</name></name> <operator pos:start="95:23" pos:end="95:23">=</operator> <call pos:start="95:25" pos:end="95:42"><name pos:start="95:25" pos:end="95:34">bitmap_new</name><argument_list pos:start="95:35" pos:end="95:42">(<argument pos:start="95:36" pos:end="95:41"><expr pos:start="95:36" pos:end="95:41"><name pos:start="95:36" pos:end="95:41">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:72"><expr pos:start="99:5" pos:end="99:71"><name pos:start="99:5" pos:end="99:29"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:29">target_cluster_sectors</name></name> <operator pos:start="99:31" pos:end="99:31">=</operator> <name pos:start="99:33" pos:end="99:51">target_cluster_size</name> <operator pos:start="99:53" pos:end="99:54">&gt;&gt;</operator> <name pos:start="99:56" pos:end="99:71">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:60"><expr pos:start="101:5" pos:end="101:59"><name pos:start="101:5" pos:end="101:14"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:14">max_iov</name></name> <operator pos:start="101:16" pos:end="101:16">=</operator> <call pos:start="101:18" pos:end="101:59"><name pos:start="101:18" pos:end="101:20">MIN</name><argument_list pos:start="101:21" pos:end="101:59">(<argument pos:start="101:22" pos:end="101:35"><expr pos:start="101:22" pos:end="101:35"><name pos:start="101:22" pos:end="101:35"><name pos:start="101:22" pos:end="101:23">bs</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:27">bl</name><operator pos:start="101:28" pos:end="101:28">.</operator><name pos:start="101:29" pos:end="101:35">max_iov</name></name></expr></argument>, <argument pos:start="101:38" pos:end="101:58"><expr pos:start="101:38" pos:end="101:58"><name pos:start="101:38" pos:end="101:58"><name pos:start="101:38" pos:end="101:46">target_bs</name><operator pos:start="101:47" pos:end="101:48">-&gt;</operator><name pos:start="101:49" pos:end="101:50">bl</name><operator pos:start="101:51" pos:end="101:51">.</operator><name pos:start="101:52" pos:end="101:58">max_iov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:50"><expr pos:start="105:5" pos:end="105:49"><name pos:start="105:5" pos:end="105:10"><name pos:start="105:5" pos:end="105:5">s</name><operator pos:start="105:6" pos:end="105:7">-&gt;</operator><name pos:start="105:8" pos:end="105:10">buf</name></name> <operator pos:start="105:12" pos:end="105:12">=</operator> <call pos:start="105:14" pos:end="105:49"><name pos:start="105:14" pos:end="105:32">qemu_try_blockalign</name><argument_list pos:start="105:33" pos:end="105:49">(<argument pos:start="105:34" pos:end="105:35"><expr pos:start="105:34" pos:end="105:35"><name pos:start="105:34" pos:end="105:35">bs</name></expr></argument>, <argument pos:start="105:38" pos:end="105:48"><expr pos:start="105:38" pos:end="105:48"><name pos:start="105:38" pos:end="105:48"><name pos:start="105:38" pos:end="105:38">s</name><operator pos:start="105:39" pos:end="105:40">-&gt;</operator><name pos:start="105:41" pos:end="105:48">buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:23">(<expr pos:start="107:9" pos:end="107:22"><name pos:start="107:9" pos:end="107:14"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:14">buf</name></name> <operator pos:start="107:16" pos:end="107:17">==</operator> <name pos:start="107:19" pos:end="107:22">NULL</name></expr>)</condition> <block pos:start="107:25" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:28">

        <expr_stmt pos:start="109:9" pos:end="109:22"><expr pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <operator pos:start="109:15" pos:end="109:15">-</operator><name pos:start="109:16" pos:end="109:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="111:9" pos:end="111:28">goto <name pos:start="111:14" pos:end="111:27">immediate_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:24"><expr pos:start="117:5" pos:end="117:23"><call pos:start="117:5" pos:end="117:23"><name pos:start="117:5" pos:end="117:20">mirror_free_init</name><argument_list pos:start="117:21" pos:end="117:23">(<argument pos:start="117:22" pos:end="117:22"><expr pos:start="117:22" pos:end="117:22"><name pos:start="117:22" pos:end="117:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:62"><expr pos:start="121:5" pos:end="121:61"><name pos:start="121:5" pos:end="121:20"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:20">last_pause_ns</name></name> <operator pos:start="121:22" pos:end="121:22">=</operator> <call pos:start="121:24" pos:end="121:61"><name pos:start="121:24" pos:end="121:40">qemu_clock_get_ns</name><argument_list pos:start="121:41" pos:end="121:61">(<argument pos:start="121:42" pos:end="121:60"><expr pos:start="121:42" pos:end="121:60"><name pos:start="121:42" pos:end="121:60">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="133:5"><if pos:start="123:5" pos:end="133:5">if <condition pos:start="123:8" pos:end="123:25">(<expr pos:start="123:9" pos:end="123:24"><operator pos:start="123:9" pos:end="123:9">!</operator><name pos:start="123:10" pos:end="123:24"><name pos:start="123:10" pos:end="123:10">s</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:24">is_none_mode</name></name></expr>)</condition> <block pos:start="123:27" pos:end="133:5">{<block_content pos:start="125:9" pos:end="131:9">

        <expr_stmt pos:start="125:9" pos:end="125:35"><expr pos:start="125:9" pos:end="125:34"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <call pos:start="125:15" pos:end="125:34"><name pos:start="125:15" pos:end="125:31">mirror_dirty_init</name><argument_list pos:start="125:32" pos:end="125:34">(<argument pos:start="125:33" pos:end="125:33"><expr pos:start="125:33" pos:end="125:33"><name pos:start="125:33" pos:end="125:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="131:9"><if pos:start="127:9" pos:end="131:9">if <condition pos:start="127:12" pos:end="127:58">(<expr pos:start="127:13" pos:end="127:57"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:17">&lt;</operator> <literal type="number" pos:start="127:19" pos:end="127:19">0</literal> <operator pos:start="127:21" pos:end="127:22">||</operator> <call pos:start="127:24" pos:end="127:57"><name pos:start="127:24" pos:end="127:45">block_job_is_cancelled</name><argument_list pos:start="127:46" pos:end="127:57">(<argument pos:start="127:47" pos:end="127:56"><expr pos:start="127:47" pos:end="127:56"><operator pos:start="127:47" pos:end="127:47">&amp;</operator><name pos:start="127:48" pos:end="127:56"><name pos:start="127:48" pos:end="127:48">s</name><operator pos:start="127:49" pos:end="127:50">-&gt;</operator><name pos:start="127:51" pos:end="127:56">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:60" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:32">

            <goto pos:start="129:13" pos:end="129:32">goto <name pos:start="129:18" pos:end="129:31">immediate_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:20"><expr pos:start="137:5" pos:end="137:19"><call pos:start="137:5" pos:end="137:19"><name pos:start="137:5" pos:end="137:10">assert</name><argument_list pos:start="137:11" pos:end="137:19">(<argument pos:start="137:12" pos:end="137:18"><expr pos:start="137:12" pos:end="137:18"><operator pos:start="137:12" pos:end="137:12">!</operator><name pos:start="137:13" pos:end="137:18"><name pos:start="137:13" pos:end="137:13">s</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:18">dbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:53"><expr pos:start="139:5" pos:end="139:52"><name pos:start="139:5" pos:end="139:10"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:10">dbi</name></name> <operator pos:start="139:12" pos:end="139:12">=</operator> <call pos:start="139:14" pos:end="139:52"><name pos:start="139:14" pos:end="139:32">bdrv_dirty_iter_new</name><argument_list pos:start="139:33" pos:end="139:52">(<argument pos:start="139:34" pos:end="139:48"><expr pos:start="139:34" pos:end="139:48"><name pos:start="139:34" pos:end="139:48"><name pos:start="139:34" pos:end="139:34">s</name><operator pos:start="139:35" pos:end="139:36">-&gt;</operator><name pos:start="139:37" pos:end="139:48">dirty_bitmap</name></name></expr></argument>, <argument pos:start="139:51" pos:end="139:51"><expr pos:start="139:51" pos:end="139:51"><literal type="number" pos:start="139:51" pos:end="139:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="141:5" pos:end="335:5">for <control pos:start="141:9" pos:end="141:12">(<init pos:start="141:10" pos:end="141:10">;</init><condition pos:start="141:11" pos:end="141:11">;</condition><incr/>)</control> <block pos:start="141:14" pos:end="335:5">{<block_content pos:start="143:9" pos:end="333:66">

        <decl_stmt pos:start="143:9" pos:end="143:30"><decl pos:start="143:9" pos:end="143:29"><type pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:16">uint64_t</name></type> <name pos:start="143:18" pos:end="143:25">delay_ns</name> <init pos:start="143:27" pos:end="143:29">= <expr pos:start="143:29" pos:end="143:29"><literal type="number" pos:start="143:29" pos:end="143:29">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="145:9" pos:end="145:27"><decl pos:start="145:9" pos:end="145:19"><type pos:start="145:9" pos:end="145:15"><name pos:start="145:9" pos:end="145:15">int64_t</name></type> <name pos:start="145:17" pos:end="145:19">cnt</name></decl>, <decl pos:start="145:22" pos:end="145:26"><type ref="prev" pos:start="145:9" pos:end="145:15"/><name pos:start="145:22" pos:end="145:26">delta</name></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="147:29"><decl pos:start="147:9" pos:end="147:28"><type pos:start="147:9" pos:end="147:12"><name pos:start="147:9" pos:end="147:12">bool</name></type> <name pos:start="147:14" pos:end="147:28">should_complete</name></decl>;</decl_stmt>



        <if_stmt pos:start="151:9" pos:end="157:9"><if pos:start="151:9" pos:end="157:9">if <condition pos:start="151:12" pos:end="151:23">(<expr pos:start="151:13" pos:end="151:22"><name pos:start="151:13" pos:end="151:18"><name pos:start="151:13" pos:end="151:13">s</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:18">ret</name></name> <operator pos:start="151:20" pos:end="151:20">&lt;</operator> <literal type="number" pos:start="151:22" pos:end="151:22">0</literal></expr>)</condition> <block pos:start="151:25" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:32">

            <expr_stmt pos:start="153:13" pos:end="153:25"><expr pos:start="153:13" pos:end="153:24"><name pos:start="153:13" pos:end="153:15">ret</name> <operator pos:start="153:17" pos:end="153:17">=</operator> <name pos:start="153:19" pos:end="153:24"><name pos:start="153:19" pos:end="153:19">s</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:24">ret</name></name></expr>;</expr_stmt>

            <goto pos:start="155:13" pos:end="155:32">goto <name pos:start="155:18" pos:end="155:31">immediate_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="161:9" pos:end="161:42"><expr pos:start="161:9" pos:end="161:41"><call pos:start="161:9" pos:end="161:41"><name pos:start="161:9" pos:end="161:29">block_job_pause_point</name><argument_list pos:start="161:30" pos:end="161:41">(<argument pos:start="161:31" pos:end="161:40"><expr pos:start="161:31" pos:end="161:40"><operator pos:start="161:31" pos:end="161:31">&amp;</operator><name pos:start="161:32" pos:end="161:40"><name pos:start="161:32" pos:end="161:32">s</name><operator pos:start="161:33" pos:end="161:34">-&gt;</operator><name pos:start="161:35" pos:end="161:40">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="165:9" pos:end="165:52"><expr pos:start="165:9" pos:end="165:51"><name pos:start="165:9" pos:end="165:11">cnt</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <call pos:start="165:15" pos:end="165:51"><name pos:start="165:15" pos:end="165:34">bdrv_get_dirty_count</name><argument_list pos:start="165:35" pos:end="165:51">(<argument pos:start="165:36" pos:end="165:50"><expr pos:start="165:36" pos:end="165:50"><name pos:start="165:36" pos:end="165:50"><name pos:start="165:36" pos:end="165:36">s</name><operator pos:start="165:37" pos:end="165:38">-&gt;</operator><name pos:start="165:39" pos:end="165:50">dirty_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="167:9" pos:end="173:78">/* s-&gt;common.offset contains the number of bytes already processed so

         * far, cnt is the number of dirty sectors remaining and

         * s-&gt;sectors_in_flight is the number of sectors currently being

         * processed; together those are the current total operation length */</comment>

        <expr_stmt pos:start="175:9" pos:end="177:72"><expr pos:start="175:9" pos:end="177:71"><name pos:start="175:9" pos:end="175:21"><name pos:start="175:9" pos:end="175:9">s</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:17">common</name><operator pos:start="175:18" pos:end="175:18">.</operator><name pos:start="175:19" pos:end="175:21">len</name></name> <operator pos:start="175:23" pos:end="175:23">=</operator> <name pos:start="175:25" pos:end="175:40"><name pos:start="175:25" pos:end="175:25">s</name><operator pos:start="175:26" pos:end="175:27">-&gt;</operator><name pos:start="175:28" pos:end="175:33">common</name><operator pos:start="175:34" pos:end="175:34">.</operator><name pos:start="175:35" pos:end="175:40">offset</name></name> <operator pos:start="175:42" pos:end="175:42">+</operator>

                        <operator pos:start="177:25" pos:end="177:25">(</operator><name pos:start="177:26" pos:end="177:28">cnt</name> <operator pos:start="177:30" pos:end="177:30">+</operator> <name pos:start="177:32" pos:end="177:51"><name pos:start="177:32" pos:end="177:32">s</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:51">sectors_in_flight</name></name><operator pos:start="177:52" pos:end="177:52">)</operator> <operator pos:start="177:54" pos:end="177:54">*</operator> <name pos:start="177:56" pos:end="177:71">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>



        <comment type="block" pos:start="181:9" pos:end="189:11">/* Note that even when no rate limit is applied we need to yield

         * periodically with no pending I/O so that bdrv_drain_all() returns.

         * We do so every SLICE_TIME nanoseconds, or when there is an error,

         * or when the source is clean, whichever comes first.

         */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:74"><expr pos:start="191:9" pos:end="191:73"><name pos:start="191:9" pos:end="191:13">delta</name> <operator pos:start="191:15" pos:end="191:15">=</operator> <call pos:start="191:17" pos:end="191:54"><name pos:start="191:17" pos:end="191:33">qemu_clock_get_ns</name><argument_list pos:start="191:34" pos:end="191:54">(<argument pos:start="191:35" pos:end="191:53"><expr pos:start="191:35" pos:end="191:53"><name pos:start="191:35" pos:end="191:53">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call> <operator pos:start="191:56" pos:end="191:56">-</operator> <name pos:start="191:58" pos:end="191:73"><name pos:start="191:58" pos:end="191:58">s</name><operator pos:start="191:59" pos:end="191:60">-&gt;</operator><name pos:start="191:61" pos:end="191:73">last_pause_ns</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="193:9" pos:end="213:9"><if pos:start="193:9" pos:end="213:9">if <condition pos:start="193:12" pos:end="195:60">(<expr pos:start="193:13" pos:end="195:59"><name pos:start="193:13" pos:end="193:17">delta</name> <operator pos:start="193:19" pos:end="193:19">&lt;</operator> <name pos:start="193:21" pos:end="193:30">SLICE_TIME</name> <operator pos:start="193:32" pos:end="193:33">&amp;&amp;</operator>

            <name pos:start="195:13" pos:end="195:30"><name pos:start="195:13" pos:end="195:13">s</name><operator pos:start="195:14" pos:end="195:15">-&gt;</operator><name pos:start="195:16" pos:end="195:21">common</name><operator pos:start="195:22" pos:end="195:22">.</operator><name pos:start="195:23" pos:end="195:30">iostatus</name></name> <operator pos:start="195:32" pos:end="195:33">==</operator> <name pos:start="195:35" pos:end="195:59">BLOCK_DEVICE_IO_STATUS_OK</name></expr>)</condition> <block pos:start="195:62" pos:end="213:9">{<block_content pos:start="197:13" pos:end="211:13">

            <if_stmt pos:start="197:13" pos:end="211:13"><if pos:start="197:13" pos:end="207:13">if <condition pos:start="197:16" pos:end="199:47">(<expr pos:start="197:17" pos:end="199:46"><name pos:start="197:17" pos:end="197:28"><name pos:start="197:17" pos:end="197:17">s</name><operator pos:start="197:18" pos:end="197:19">-&gt;</operator><name pos:start="197:20" pos:end="197:28">in_flight</name></name> <operator pos:start="197:30" pos:end="197:31">&gt;=</operator> <name pos:start="197:33" pos:end="197:45">MAX_IN_FLIGHT</name> <operator pos:start="197:47" pos:end="197:48">||</operator> <name pos:start="197:50" pos:end="197:66"><name pos:start="197:50" pos:end="197:50">s</name><operator pos:start="197:51" pos:end="197:52">-&gt;</operator><name pos:start="197:53" pos:end="197:66">buf_free_count</name></name> <operator pos:start="197:68" pos:end="197:69">==</operator> <literal type="number" pos:start="197:71" pos:end="197:71">0</literal> <operator pos:start="197:73" pos:end="197:74">||</operator>

                <operator pos:start="199:17" pos:end="199:17">(</operator><name pos:start="199:18" pos:end="199:20">cnt</name> <operator pos:start="199:22" pos:end="199:23">==</operator> <literal type="number" pos:start="199:25" pos:end="199:25">0</literal> <operator pos:start="199:27" pos:end="199:28">&amp;&amp;</operator> <name pos:start="199:30" pos:end="199:41"><name pos:start="199:30" pos:end="199:30">s</name><operator pos:start="199:31" pos:end="199:32">-&gt;</operator><name pos:start="199:33" pos:end="199:41">in_flight</name></name> <operator pos:start="199:43" pos:end="199:43">&gt;</operator> <literal type="number" pos:start="199:45" pos:end="199:45">0</literal><operator pos:start="199:46" pos:end="199:46">)</operator></expr>)</condition> <block pos:start="199:49" pos:end="207:13">{<block_content pos:start="201:17" pos:end="205:25">

                <expr_stmt pos:start="201:17" pos:end="201:76"><expr pos:start="201:17" pos:end="201:75"><call pos:start="201:17" pos:end="201:75"><name pos:start="201:17" pos:end="201:34">trace_mirror_yield</name><argument_list pos:start="201:35" pos:end="201:75">(<argument pos:start="201:36" pos:end="201:36"><expr pos:start="201:36" pos:end="201:36"><name pos:start="201:36" pos:end="201:36">s</name></expr></argument>, <argument pos:start="201:39" pos:end="201:50"><expr pos:start="201:39" pos:end="201:50"><name pos:start="201:39" pos:end="201:50"><name pos:start="201:39" pos:end="201:39">s</name><operator pos:start="201:40" pos:end="201:41">-&gt;</operator><name pos:start="201:42" pos:end="201:50">in_flight</name></name></expr></argument>, <argument pos:start="201:53" pos:end="201:69"><expr pos:start="201:53" pos:end="201:69"><name pos:start="201:53" pos:end="201:69"><name pos:start="201:53" pos:end="201:53">s</name><operator pos:start="201:54" pos:end="201:55">-&gt;</operator><name pos:start="201:56" pos:end="201:69">buf_free_count</name></name></expr></argument>, <argument pos:start="201:72" pos:end="201:74"><expr pos:start="201:72" pos:end="201:74"><name pos:start="201:72" pos:end="201:74">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:38"><expr pos:start="203:17" pos:end="203:37"><call pos:start="203:17" pos:end="203:37"><name pos:start="203:17" pos:end="203:34">mirror_wait_for_io</name><argument_list pos:start="203:35" pos:end="203:37">(<argument pos:start="203:36" pos:end="203:36"><expr pos:start="203:36" pos:end="203:36"><name pos:start="203:36" pos:end="203:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="205:17" pos:end="205:25">continue;</continue>

            </block_content>}</block></if> <if type="elseif" pos:start="207:15" pos:end="211:13">else if <condition pos:start="207:23" pos:end="207:32">(<expr pos:start="207:24" pos:end="207:31"><name pos:start="207:24" pos:end="207:26">cnt</name> <operator pos:start="207:28" pos:end="207:29">!=</operator> <literal type="number" pos:start="207:31" pos:end="207:31">0</literal></expr>)</condition> <block pos:start="207:34" pos:end="211:13">{<block_content pos:start="209:17" pos:end="209:47">

                <expr_stmt pos:start="209:17" pos:end="209:47"><expr pos:start="209:17" pos:end="209:46"><name pos:start="209:17" pos:end="209:24">delay_ns</name> <operator pos:start="209:26" pos:end="209:26">=</operator> <call pos:start="209:28" pos:end="209:46"><name pos:start="209:28" pos:end="209:43">mirror_iteration</name><argument_list pos:start="209:44" pos:end="209:46">(<argument pos:start="209:45" pos:end="209:45"><expr pos:start="209:45" pos:end="209:45"><name pos:start="209:45" pos:end="209:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="217:9" pos:end="217:32"><expr pos:start="217:9" pos:end="217:31"><name pos:start="217:9" pos:end="217:23">should_complete</name> <operator pos:start="217:25" pos:end="217:25">=</operator> <name pos:start="217:27" pos:end="217:31">false</name></expr>;</expr_stmt>

        <if_stmt pos:start="219:9" pos:end="265:9"><if pos:start="219:9" pos:end="265:9">if <condition pos:start="219:12" pos:end="219:42">(<expr pos:start="219:13" pos:end="219:41"><name pos:start="219:13" pos:end="219:24"><name pos:start="219:13" pos:end="219:13">s</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:24">in_flight</name></name> <operator pos:start="219:26" pos:end="219:27">==</operator> <literal type="number" pos:start="219:29" pos:end="219:29">0</literal> <operator pos:start="219:31" pos:end="219:32">&amp;&amp;</operator> <name pos:start="219:34" pos:end="219:36">cnt</name> <operator pos:start="219:38" pos:end="219:39">==</operator> <literal type="number" pos:start="219:41" pos:end="219:41">0</literal></expr>)</condition> <block pos:start="219:44" pos:end="265:9">{<block_content pos:start="221:13" pos:end="263:13">

            <expr_stmt pos:start="221:13" pos:end="221:41"><expr pos:start="221:13" pos:end="221:40"><call pos:start="221:13" pos:end="221:40"><name pos:start="221:13" pos:end="221:37">trace_mirror_before_flush</name><argument_list pos:start="221:38" pos:end="221:40">(<argument pos:start="221:39" pos:end="221:39"><expr pos:start="221:39" pos:end="221:39"><name pos:start="221:39" pos:end="221:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:39"><expr pos:start="223:13" pos:end="223:38"><name pos:start="223:13" pos:end="223:15">ret</name> <operator pos:start="223:17" pos:end="223:17">=</operator> <call pos:start="223:19" pos:end="223:38"><name pos:start="223:19" pos:end="223:27">blk_flush</name><argument_list pos:start="223:28" pos:end="223:38">(<argument pos:start="223:29" pos:end="223:37"><expr pos:start="223:29" pos:end="223:37"><name pos:start="223:29" pos:end="223:37"><name pos:start="223:29" pos:end="223:29">s</name><operator pos:start="223:30" pos:end="223:31">-&gt;</operator><name pos:start="223:32" pos:end="223:37">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="225:13" pos:end="263:13"><if pos:start="225:13" pos:end="235:13">if <condition pos:start="225:16" pos:end="225:24">(<expr pos:start="225:17" pos:end="225:23"><name pos:start="225:17" pos:end="225:19">ret</name> <operator pos:start="225:21" pos:end="225:21">&lt;</operator> <literal type="number" pos:start="225:23" pos:end="225:23">0</literal></expr>)</condition> <block pos:start="225:26" pos:end="235:13">{<block_content pos:start="227:17" pos:end="233:17">

                <if_stmt pos:start="227:17" pos:end="233:17"><if pos:start="227:17" pos:end="233:17">if <condition pos:start="227:20" pos:end="229:46">(<expr pos:start="227:21" pos:end="229:45"><call pos:start="227:21" pos:end="227:55"><name pos:start="227:21" pos:end="227:39">mirror_error_action</name><argument_list pos:start="227:40" pos:end="227:55">(<argument pos:start="227:41" pos:end="227:41"><expr pos:start="227:41" pos:end="227:41"><name pos:start="227:41" pos:end="227:41">s</name></expr></argument>, <argument pos:start="227:44" pos:end="227:48"><expr pos:start="227:44" pos:end="227:48"><name pos:start="227:44" pos:end="227:48">false</name></expr></argument>, <argument pos:start="227:51" pos:end="227:54"><expr pos:start="227:51" pos:end="227:54"><operator pos:start="227:51" pos:end="227:51">-</operator><name pos:start="227:52" pos:end="227:54">ret</name></expr></argument>)</argument_list></call> <operator pos:start="227:57" pos:end="227:58">==</operator>

                    <name pos:start="229:21" pos:end="229:45">BLOCK_ERROR_ACTION_REPORT</name></expr>)</condition> <block pos:start="229:48" pos:end="233:17">{<block_content pos:start="231:21" pos:end="231:40">

                    <goto pos:start="231:21" pos:end="231:40">goto <name pos:start="231:26" pos:end="231:39">immediate_exit</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="235:15" pos:end="263:13">else <block pos:start="235:20" pos:end="263:13">{<block_content pos:start="247:17" pos:end="261:60">

                <comment type="block" pos:start="237:17" pos:end="245:19">/* We're out of the streaming phase.  From now on, if the job

                 * is cancelled we will actually complete all pending I/O and

                 * report completion.  This way, block-job-cancel will leave

                 * the target in a consistent state.

                 */</comment>

                <if_stmt pos:start="247:17" pos:end="253:17"><if pos:start="247:17" pos:end="253:17">if <condition pos:start="247:20" pos:end="247:31">(<expr pos:start="247:21" pos:end="247:30"><operator pos:start="247:21" pos:end="247:21">!</operator><name pos:start="247:22" pos:end="247:30"><name pos:start="247:22" pos:end="247:22">s</name><operator pos:start="247:23" pos:end="247:24">-&gt;</operator><name pos:start="247:25" pos:end="247:30">synced</name></name></expr>)</condition> <block pos:start="247:33" pos:end="253:17">{<block_content pos:start="249:21" pos:end="251:37">

                    <expr_stmt pos:start="249:21" pos:end="249:54"><expr pos:start="249:21" pos:end="249:53"><call pos:start="249:21" pos:end="249:53"><name pos:start="249:21" pos:end="249:41">block_job_event_ready</name><argument_list pos:start="249:42" pos:end="249:53">(<argument pos:start="249:43" pos:end="249:52"><expr pos:start="249:43" pos:end="249:52"><operator pos:start="249:43" pos:end="249:43">&amp;</operator><name pos:start="249:44" pos:end="249:52"><name pos:start="249:44" pos:end="249:44">s</name><operator pos:start="249:45" pos:end="249:46">-&gt;</operator><name pos:start="249:47" pos:end="249:52">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="251:21" pos:end="251:37"><expr pos:start="251:21" pos:end="251:36"><name pos:start="251:21" pos:end="251:29"><name pos:start="251:21" pos:end="251:21">s</name><operator pos:start="251:22" pos:end="251:23">-&gt;</operator><name pos:start="251:24" pos:end="251:29">synced</name></name> <operator pos:start="251:31" pos:end="251:31">=</operator> <name pos:start="251:33" pos:end="251:36">true</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="257:17" pos:end="259:55"><expr pos:start="257:17" pos:end="259:54"><name pos:start="257:17" pos:end="257:31">should_complete</name> <operator pos:start="257:33" pos:end="257:33">=</operator> <name pos:start="257:35" pos:end="257:52"><name pos:start="257:35" pos:end="257:35">s</name><operator pos:start="257:36" pos:end="257:37">-&gt;</operator><name pos:start="257:38" pos:end="257:52">should_complete</name></name> <operator pos:start="257:54" pos:end="257:55">||</operator>

                    <call pos:start="259:21" pos:end="259:54"><name pos:start="259:21" pos:end="259:42">block_job_is_cancelled</name><argument_list pos:start="259:43" pos:end="259:54">(<argument pos:start="259:44" pos:end="259:53"><expr pos:start="259:44" pos:end="259:53"><operator pos:start="259:44" pos:end="259:44">&amp;</operator><name pos:start="259:45" pos:end="259:53"><name pos:start="259:45" pos:end="259:45">s</name><operator pos:start="259:46" pos:end="259:47">-&gt;</operator><name pos:start="259:48" pos:end="259:53">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:60"><expr pos:start="261:17" pos:end="261:59"><name pos:start="261:17" pos:end="261:19">cnt</name> <operator pos:start="261:21" pos:end="261:21">=</operator> <call pos:start="261:23" pos:end="261:59"><name pos:start="261:23" pos:end="261:42">bdrv_get_dirty_count</name><argument_list pos:start="261:43" pos:end="261:59">(<argument pos:start="261:44" pos:end="261:58"><expr pos:start="261:44" pos:end="261:58"><name pos:start="261:44" pos:end="261:58"><name pos:start="261:44" pos:end="261:44">s</name><operator pos:start="261:45" pos:end="261:46">-&gt;</operator><name pos:start="261:47" pos:end="261:58">dirty_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="269:9" pos:end="293:9"><if pos:start="269:9" pos:end="293:9">if <condition pos:start="269:12" pos:end="269:40">(<expr pos:start="269:13" pos:end="269:39"><name pos:start="269:13" pos:end="269:15">cnt</name> <operator pos:start="269:17" pos:end="269:18">==</operator> <literal type="number" pos:start="269:20" pos:end="269:20">0</literal> <operator pos:start="269:22" pos:end="269:23">&amp;&amp;</operator> <name pos:start="269:25" pos:end="269:39">should_complete</name></expr>)</condition> <block pos:start="269:42" pos:end="293:9">{<block_content pos:start="287:13" pos:end="291:56">

            <comment type="block" pos:start="271:13" pos:end="285:15">/* The dirty bitmap is not updated while operations are pending.

             * If we're about to exit, wait for pending operations before

             * calling bdrv_get_dirty_count(bs), or we may exit while the

             * source has dirty data to copy!

             *

             * Note that I/O can be submitted by the guest while

             * mirror_populate runs.

             */</comment>

            <expr_stmt pos:start="287:13" pos:end="287:46"><expr pos:start="287:13" pos:end="287:45"><call pos:start="287:13" pos:end="287:45"><name pos:start="287:13" pos:end="287:37">trace_mirror_before_drain</name><argument_list pos:start="287:38" pos:end="287:45">(<argument pos:start="287:39" pos:end="287:39"><expr pos:start="287:39" pos:end="287:39"><name pos:start="287:39" pos:end="287:39">s</name></expr></argument>, <argument pos:start="287:42" pos:end="287:44"><expr pos:start="287:42" pos:end="287:44"><name pos:start="287:42" pos:end="287:44">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:30"><expr pos:start="289:13" pos:end="289:29"><call pos:start="289:13" pos:end="289:29"><name pos:start="289:13" pos:end="289:25">bdrv_co_drain</name><argument_list pos:start="289:26" pos:end="289:29">(<argument pos:start="289:27" pos:end="289:28"><expr pos:start="289:27" pos:end="289:28"><name pos:start="289:27" pos:end="289:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:56"><expr pos:start="291:13" pos:end="291:55"><name pos:start="291:13" pos:end="291:15">cnt</name> <operator pos:start="291:17" pos:end="291:17">=</operator> <call pos:start="291:19" pos:end="291:55"><name pos:start="291:19" pos:end="291:38">bdrv_get_dirty_count</name><argument_list pos:start="291:39" pos:end="291:55">(<argument pos:start="291:40" pos:end="291:54"><expr pos:start="291:40" pos:end="291:54"><name pos:start="291:40" pos:end="291:54"><name pos:start="291:40" pos:end="291:40">s</name><operator pos:start="291:41" pos:end="291:42">-&gt;</operator><name pos:start="291:43" pos:end="291:54">dirty_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="297:9" pos:end="297:16"><expr pos:start="297:9" pos:end="297:15"><name pos:start="297:9" pos:end="297:11">ret</name> <operator pos:start="297:13" pos:end="297:13">=</operator> <literal type="number" pos:start="297:15" pos:end="297:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="299:9" pos:end="299:63"><expr pos:start="299:9" pos:end="299:62"><call pos:start="299:9" pos:end="299:62"><name pos:start="299:9" pos:end="299:33">trace_mirror_before_sleep</name><argument_list pos:start="299:34" pos:end="299:62">(<argument pos:start="299:35" pos:end="299:35"><expr pos:start="299:35" pos:end="299:35"><name pos:start="299:35" pos:end="299:35">s</name></expr></argument>, <argument pos:start="299:38" pos:end="299:40"><expr pos:start="299:38" pos:end="299:40"><name pos:start="299:38" pos:end="299:40">cnt</name></expr></argument>, <argument pos:start="299:43" pos:end="299:51"><expr pos:start="299:43" pos:end="299:51"><name pos:start="299:43" pos:end="299:51"><name pos:start="299:43" pos:end="299:43">s</name><operator pos:start="299:44" pos:end="299:45">-&gt;</operator><name pos:start="299:46" pos:end="299:51">synced</name></name></expr></argument>, <argument pos:start="299:54" pos:end="299:61"><expr pos:start="299:54" pos:end="299:61"><name pos:start="299:54" pos:end="299:61">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="301:9" pos:end="331:9"><if pos:start="301:9" pos:end="311:9">if <condition pos:start="301:12" pos:end="301:23">(<expr pos:start="301:13" pos:end="301:22"><operator pos:start="301:13" pos:end="301:13">!</operator><name pos:start="301:14" pos:end="301:22"><name pos:start="301:14" pos:end="301:14">s</name><operator pos:start="301:15" pos:end="301:16">-&gt;</operator><name pos:start="301:17" pos:end="301:22">synced</name></name></expr>)</condition> <block pos:start="301:25" pos:end="311:9">{<block_content pos:start="303:13" pos:end="309:13">

            <expr_stmt pos:start="303:13" pos:end="303:74"><expr pos:start="303:13" pos:end="303:73"><call pos:start="303:13" pos:end="303:73"><name pos:start="303:13" pos:end="303:30">block_job_sleep_ns</name><argument_list pos:start="303:31" pos:end="303:73">(<argument pos:start="303:32" pos:end="303:41"><expr pos:start="303:32" pos:end="303:41"><operator pos:start="303:32" pos:end="303:32">&amp;</operator><name pos:start="303:33" pos:end="303:41"><name pos:start="303:33" pos:end="303:33">s</name><operator pos:start="303:34" pos:end="303:35">-&gt;</operator><name pos:start="303:36" pos:end="303:41">common</name></name></expr></argument>, <argument pos:start="303:44" pos:end="303:62"><expr pos:start="303:44" pos:end="303:62"><name pos:start="303:44" pos:end="303:62">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="303:65" pos:end="303:72"><expr pos:start="303:65" pos:end="303:72"><name pos:start="303:65" pos:end="303:72">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="305:13" pos:end="309:13"><if pos:start="305:13" pos:end="309:13">if <condition pos:start="305:16" pos:end="305:51">(<expr pos:start="305:17" pos:end="305:50"><call pos:start="305:17" pos:end="305:50"><name pos:start="305:17" pos:end="305:38">block_job_is_cancelled</name><argument_list pos:start="305:39" pos:end="305:50">(<argument pos:start="305:40" pos:end="305:49"><expr pos:start="305:40" pos:end="305:49"><operator pos:start="305:40" pos:end="305:40">&amp;</operator><name pos:start="305:41" pos:end="305:49"><name pos:start="305:41" pos:end="305:41">s</name><operator pos:start="305:42" pos:end="305:43">-&gt;</operator><name pos:start="305:44" pos:end="305:49">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="305:53" pos:end="309:13">{<block_content pos:start="307:17" pos:end="307:22">

                <break pos:start="307:17" pos:end="307:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="311:11" pos:end="317:9">else if <condition pos:start="311:19" pos:end="311:36">(<expr pos:start="311:20" pos:end="311:35"><operator pos:start="311:20" pos:end="311:20">!</operator><name pos:start="311:21" pos:end="311:35">should_complete</name></expr>)</condition> <block pos:start="311:38" pos:end="317:9">{<block_content pos:start="313:13" pos:end="315:74">

            <expr_stmt pos:start="313:13" pos:end="313:72"><expr pos:start="313:13" pos:end="313:71"><name pos:start="313:13" pos:end="313:20">delay_ns</name> <operator pos:start="313:22" pos:end="313:22">=</operator> <operator pos:start="313:24" pos:end="313:24">(</operator><ternary pos:start="313:25" pos:end="313:70"><condition pos:start="313:25" pos:end="313:55"><expr pos:start="313:25" pos:end="313:53"><name pos:start="313:25" pos:end="313:36"><name pos:start="313:25" pos:end="313:25">s</name><operator pos:start="313:26" pos:end="313:27">-&gt;</operator><name pos:start="313:28" pos:end="313:36">in_flight</name></name> <operator pos:start="313:38" pos:end="313:39">==</operator> <literal type="number" pos:start="313:41" pos:end="313:41">0</literal> <operator pos:start="313:43" pos:end="313:44">&amp;&amp;</operator> <name pos:start="313:46" pos:end="313:48">cnt</name> <operator pos:start="313:50" pos:end="313:51">==</operator> <literal type="number" pos:start="313:53" pos:end="313:53">0</literal></expr> ?</condition><then pos:start="313:57" pos:end="313:66"> <expr pos:start="313:57" pos:end="313:66"><name pos:start="313:57" pos:end="313:66">SLICE_TIME</name></expr> </then><else pos:start="313:68" pos:end="313:70">: <expr pos:start="313:70" pos:end="313:70"><literal type="number" pos:start="313:70" pos:end="313:70">0</literal></expr></else></ternary><operator pos:start="313:71" pos:end="313:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="315:13" pos:end="315:74"><expr pos:start="315:13" pos:end="315:73"><call pos:start="315:13" pos:end="315:73"><name pos:start="315:13" pos:end="315:30">block_job_sleep_ns</name><argument_list pos:start="315:31" pos:end="315:73">(<argument pos:start="315:32" pos:end="315:41"><expr pos:start="315:32" pos:end="315:41"><operator pos:start="315:32" pos:end="315:32">&amp;</operator><name pos:start="315:33" pos:end="315:41"><name pos:start="315:33" pos:end="315:33">s</name><operator pos:start="315:34" pos:end="315:35">-&gt;</operator><name pos:start="315:36" pos:end="315:41">common</name></name></expr></argument>, <argument pos:start="315:44" pos:end="315:62"><expr pos:start="315:44" pos:end="315:62"><name pos:start="315:44" pos:end="315:62">QEMU_CLOCK_REALTIME</name></expr></argument>, <argument pos:start="315:65" pos:end="315:72"><expr pos:start="315:65" pos:end="315:72"><name pos:start="315:65" pos:end="315:72">delay_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="317:11" pos:end="331:9">else if <condition pos:start="317:19" pos:end="317:28">(<expr pos:start="317:20" pos:end="317:27"><name pos:start="317:20" pos:end="317:22">cnt</name> <operator pos:start="317:24" pos:end="317:25">==</operator> <literal type="number" pos:start="317:27" pos:end="317:27">0</literal></expr>)</condition> <block pos:start="317:30" pos:end="331:9">{<block_content pos:start="325:13" pos:end="329:18">

            <comment type="block" pos:start="319:13" pos:end="323:15">/* The two disks are in sync.  Exit and report successful

             * completion.

             */</comment>

            <expr_stmt pos:start="325:13" pos:end="325:55"><expr pos:start="325:13" pos:end="325:54"><call pos:start="325:13" pos:end="325:54"><name pos:start="325:13" pos:end="325:18">assert</name><argument_list pos:start="325:19" pos:end="325:54">(<argument pos:start="325:20" pos:end="325:53"><expr pos:start="325:20" pos:end="325:53"><call pos:start="325:20" pos:end="325:53"><name pos:start="325:20" pos:end="325:30">QLIST_EMPTY</name><argument_list pos:start="325:31" pos:end="325:53">(<argument pos:start="325:32" pos:end="325:52"><expr pos:start="325:32" pos:end="325:52"><operator pos:start="325:32" pos:end="325:32">&amp;</operator><name pos:start="325:33" pos:end="325:52"><name pos:start="325:33" pos:end="325:34">bs</name><operator pos:start="325:35" pos:end="325:36">-&gt;</operator><name pos:start="325:37" pos:end="325:52">tracked_requests</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:40"><expr pos:start="327:13" pos:end="327:39"><name pos:start="327:13" pos:end="327:31"><name pos:start="327:13" pos:end="327:13">s</name><operator pos:start="327:14" pos:end="327:15">-&gt;</operator><name pos:start="327:16" pos:end="327:21">common</name><operator pos:start="327:22" pos:end="327:22">.</operator><name pos:start="327:23" pos:end="327:31">cancelled</name></name> <operator pos:start="327:33" pos:end="327:33">=</operator> <name pos:start="327:35" pos:end="327:39">false</name></expr>;</expr_stmt>

            <break pos:start="329:13" pos:end="329:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:66"><expr pos:start="333:9" pos:end="333:65"><name pos:start="333:9" pos:end="333:24"><name pos:start="333:9" pos:end="333:9">s</name><operator pos:start="333:10" pos:end="333:11">-&gt;</operator><name pos:start="333:12" pos:end="333:24">last_pause_ns</name></name> <operator pos:start="333:26" pos:end="333:26">=</operator> <call pos:start="333:28" pos:end="333:65"><name pos:start="333:28" pos:end="333:44">qemu_clock_get_ns</name><argument_list pos:start="333:45" pos:end="333:65">(<argument pos:start="333:46" pos:end="333:64"><expr pos:start="333:46" pos:end="333:64"><name pos:start="333:46" pos:end="333:64">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



<label pos:start="339:1" pos:end="339:15"><name pos:start="339:1" pos:end="339:14">immediate_exit</name>:</label>

    <if_stmt pos:start="341:5" pos:end="355:5"><if pos:start="341:5" pos:end="355:5">if <condition pos:start="341:8" pos:end="341:25">(<expr pos:start="341:9" pos:end="341:24"><name pos:start="341:9" pos:end="341:20"><name pos:start="341:9" pos:end="341:9">s</name><operator pos:start="341:10" pos:end="341:11">-&gt;</operator><name pos:start="341:12" pos:end="341:20">in_flight</name></name> <operator pos:start="341:22" pos:end="341:22">&gt;</operator> <literal type="number" pos:start="341:24" pos:end="341:24">0</literal></expr>)</condition> <block pos:start="341:27" pos:end="355:5">{<block_content pos:start="351:9" pos:end="353:24">

        <comment type="block" pos:start="343:9" pos:end="349:11">/* We get here only if something went wrong.  Either the job failed,

         * or it was cancelled prematurely so that we do not guarantee that

         * the target is a copy of the source.

         */</comment>

        <expr_stmt pos:start="351:9" pos:end="351:78"><expr pos:start="351:9" pos:end="351:77"><call pos:start="351:9" pos:end="351:77"><name pos:start="351:9" pos:end="351:14">assert</name><argument_list pos:start="351:15" pos:end="351:77">(<argument pos:start="351:16" pos:end="351:76"><expr pos:start="351:16" pos:end="351:76"><name pos:start="351:16" pos:end="351:18">ret</name> <operator pos:start="351:20" pos:end="351:20">&lt;</operator> <literal type="number" pos:start="351:22" pos:end="351:22">0</literal> <operator pos:start="351:24" pos:end="351:25">||</operator> <operator pos:start="351:27" pos:end="351:27">(</operator><operator pos:start="351:28" pos:end="351:28">!</operator><name pos:start="351:29" pos:end="351:37"><name pos:start="351:29" pos:end="351:29">s</name><operator pos:start="351:30" pos:end="351:31">-&gt;</operator><name pos:start="351:32" pos:end="351:37">synced</name></name> <operator pos:start="351:39" pos:end="351:40">&amp;&amp;</operator> <call pos:start="351:42" pos:end="351:75"><name pos:start="351:42" pos:end="351:63">block_job_is_cancelled</name><argument_list pos:start="351:64" pos:end="351:75">(<argument pos:start="351:65" pos:end="351:74"><expr pos:start="351:65" pos:end="351:74"><operator pos:start="351:65" pos:end="351:65">&amp;</operator><name pos:start="351:66" pos:end="351:74"><name pos:start="351:66" pos:end="351:66">s</name><operator pos:start="351:67" pos:end="351:68">-&gt;</operator><name pos:start="351:69" pos:end="351:74">common</name></name></expr></argument>)</argument_list></call><operator pos:start="351:76" pos:end="351:76">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="353:9" pos:end="353:24"><expr pos:start="353:9" pos:end="353:23"><call pos:start="353:9" pos:end="353:23"><name pos:start="353:9" pos:end="353:20">mirror_drain</name><argument_list pos:start="353:21" pos:end="353:23">(<argument pos:start="353:22" pos:end="353:22"><expr pos:start="353:22" pos:end="353:22"><name pos:start="353:22" pos:end="353:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="359:5" pos:end="359:30"><expr pos:start="359:5" pos:end="359:29"><call pos:start="359:5" pos:end="359:29"><name pos:start="359:5" pos:end="359:10">assert</name><argument_list pos:start="359:11" pos:end="359:29">(<argument pos:start="359:12" pos:end="359:28"><expr pos:start="359:12" pos:end="359:28"><name pos:start="359:12" pos:end="359:23"><name pos:start="359:12" pos:end="359:12">s</name><operator pos:start="359:13" pos:end="359:14">-&gt;</operator><name pos:start="359:15" pos:end="359:23">in_flight</name></name> <operator pos:start="359:25" pos:end="359:26">==</operator> <literal type="number" pos:start="359:28" pos:end="359:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="361:5" pos:end="361:23"><expr pos:start="361:5" pos:end="361:22"><call pos:start="361:5" pos:end="361:22"><name pos:start="361:5" pos:end="361:14">qemu_vfree</name><argument_list pos:start="361:15" pos:end="361:22">(<argument pos:start="361:16" pos:end="361:21"><expr pos:start="361:16" pos:end="361:21"><name pos:start="361:16" pos:end="361:21"><name pos:start="361:16" pos:end="361:16">s</name><operator pos:start="361:17" pos:end="361:18">-&gt;</operator><name pos:start="361:19" pos:end="361:21">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:26"><expr pos:start="363:5" pos:end="363:25"><call pos:start="363:5" pos:end="363:25"><name pos:start="363:5" pos:end="363:10">g_free</name><argument_list pos:start="363:11" pos:end="363:25">(<argument pos:start="363:12" pos:end="363:24"><expr pos:start="363:12" pos:end="363:24"><name pos:start="363:12" pos:end="363:24"><name pos:start="363:12" pos:end="363:12">s</name><operator pos:start="363:13" pos:end="363:14">-&gt;</operator><name pos:start="363:15" pos:end="363:24">cow_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:32"><expr pos:start="365:5" pos:end="365:31"><call pos:start="365:5" pos:end="365:31"><name pos:start="365:5" pos:end="365:10">g_free</name><argument_list pos:start="365:11" pos:end="365:31">(<argument pos:start="365:12" pos:end="365:30"><expr pos:start="365:12" pos:end="365:30"><name pos:start="365:12" pos:end="365:30"><name pos:start="365:12" pos:end="365:12">s</name><operator pos:start="365:13" pos:end="365:14">-&gt;</operator><name pos:start="365:15" pos:end="365:30">in_flight_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="367:5" pos:end="367:33"><expr pos:start="367:5" pos:end="367:32"><call pos:start="367:5" pos:end="367:32"><name pos:start="367:5" pos:end="367:24">bdrv_dirty_iter_free</name><argument_list pos:start="367:25" pos:end="367:32">(<argument pos:start="367:26" pos:end="367:31"><expr pos:start="367:26" pos:end="367:31"><name pos:start="367:26" pos:end="367:31"><name pos:start="367:26" pos:end="367:26">s</name><operator pos:start="367:27" pos:end="367:28">-&gt;</operator><name pos:start="367:29" pos:end="367:31">dbi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:51"><expr pos:start="369:5" pos:end="369:50"><call pos:start="369:5" pos:end="369:50"><name pos:start="369:5" pos:end="369:29">bdrv_release_dirty_bitmap</name><argument_list pos:start="369:30" pos:end="369:50">(<argument pos:start="369:31" pos:end="369:32"><expr pos:start="369:31" pos:end="369:32"><name pos:start="369:31" pos:end="369:32">bs</name></expr></argument>, <argument pos:start="369:35" pos:end="369:49"><expr pos:start="369:35" pos:end="369:49"><name pos:start="369:35" pos:end="369:49"><name pos:start="369:35" pos:end="369:35">s</name><operator pos:start="369:36" pos:end="369:37">-&gt;</operator><name pos:start="369:38" pos:end="369:49">dirty_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="373:5" pos:end="373:35"><expr pos:start="373:5" pos:end="373:34"><name pos:start="373:5" pos:end="373:8">data</name> <operator pos:start="373:10" pos:end="373:10">=</operator> <call pos:start="373:12" pos:end="373:34"><name pos:start="373:12" pos:end="373:19">g_malloc</name><argument_list pos:start="373:20" pos:end="373:34">(<argument pos:start="373:21" pos:end="373:33"><expr pos:start="373:21" pos:end="373:33"><sizeof pos:start="373:21" pos:end="373:33">sizeof<argument_list pos:start="373:27" pos:end="373:33">(<argument pos:start="373:28" pos:end="373:32"><expr pos:start="373:28" pos:end="373:32"><operator pos:start="373:28" pos:end="373:28">*</operator><name pos:start="373:29" pos:end="373:32">data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:20"><expr pos:start="375:5" pos:end="375:19"><name pos:start="375:5" pos:end="375:13"><name pos:start="375:5" pos:end="375:8">data</name><operator pos:start="375:9" pos:end="375:10">-&gt;</operator><name pos:start="375:11" pos:end="375:13">ret</name></name> <operator pos:start="375:15" pos:end="375:15">=</operator> <name pos:start="375:17" pos:end="375:19">ret</name></expr>;</expr_stmt>

    <comment type="block" pos:start="377:5" pos:end="379:17">/* Before we switch to target in mirror_exit, make sure data doesn't

     * change. */</comment>

    <expr_stmt pos:start="381:5" pos:end="381:27"><expr pos:start="381:5" pos:end="381:26"><call pos:start="381:5" pos:end="381:26"><name pos:start="381:5" pos:end="381:22">bdrv_drained_begin</name><argument_list pos:start="381:23" pos:end="381:26">(<argument pos:start="381:24" pos:end="381:25"><expr pos:start="381:24" pos:end="381:25"><name pos:start="381:24" pos:end="381:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="383:5" pos:end="383:64"><expr pos:start="383:5" pos:end="383:63"><call pos:start="383:5" pos:end="383:63"><name pos:start="383:5" pos:end="383:32">block_job_defer_to_main_loop</name><argument_list pos:start="383:33" pos:end="383:63">(<argument pos:start="383:34" pos:end="383:43"><expr pos:start="383:34" pos:end="383:43"><operator pos:start="383:34" pos:end="383:34">&amp;</operator><name pos:start="383:35" pos:end="383:43"><name pos:start="383:35" pos:end="383:35">s</name><operator pos:start="383:36" pos:end="383:37">-&gt;</operator><name pos:start="383:38" pos:end="383:43">common</name></name></expr></argument>, <argument pos:start="383:46" pos:end="383:56"><expr pos:start="383:46" pos:end="383:56"><name pos:start="383:46" pos:end="383:56">mirror_exit</name></expr></argument>, <argument pos:start="383:59" pos:end="383:62"><expr pos:start="383:59" pos:end="383:62"><name pos:start="383:59" pos:end="383:62">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
