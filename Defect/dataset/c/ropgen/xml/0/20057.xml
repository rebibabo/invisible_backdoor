<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20057.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">net_init_nic</name><parameter_list pos:start="1:24" pos:end="7:40">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:32">QemuOpts</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:38">opts</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:31">Monitor</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:36">mon</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:40"><decl pos:start="5:25" pos:end="5:40"><type pos:start="5:25" pos:end="5:40"><specifier pos:start="5:25" pos:end="5:29">const</specifier> <name pos:start="5:31" pos:end="5:34">char</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:40">name</name></decl></parameter>,

                        <parameter pos:start="7:25" pos:end="7:39"><decl pos:start="7:25" pos:end="7:39"><type pos:start="7:25" pos:end="7:39"><name pos:start="7:25" pos:end="7:33">VLANState</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:39">vlan</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="133:1">{<block_content pos:start="11:5" pos:end="131:15">

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">NICInfo</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:15">nd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:22">netdev</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:29"><expr pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:7">idx</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:28"><name pos:start="19:11" pos:end="19:26">nic_get_free_idx</name><argument_list pos:start="19:27" pos:end="19:28">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:41">(<expr pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:11">idx</name> <operator pos:start="21:13" pos:end="21:14">==</operator> <operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal> <operator pos:start="21:19" pos:end="21:20">||</operator> <name pos:start="21:22" pos:end="21:28">nb_nics</name> <operator pos:start="21:30" pos:end="21:31">&gt;=</operator> <name pos:start="21:33" pos:end="21:40">MAX_NICS</name></expr>)</condition> <block pos:start="21:43" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:38"><expr pos:start="23:9" pos:end="23:37"><call pos:start="23:9" pos:end="23:37"><name pos:start="23:9" pos:end="23:18">qemu_error</name><argument_list pos:start="23:19" pos:end="23:37">(<argument pos:start="23:20" pos:end="23:36"><expr pos:start="23:20" pos:end="23:36"><literal type="string" pos:start="23:20" pos:end="23:36">"Too Many NICs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:24"><expr pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:6">nd</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <operator pos:start="31:10" pos:end="31:10">&amp;</operator><name pos:start="31:11" pos:end="31:23"><name pos:start="31:11" pos:end="31:18">nd_table</name><index pos:start="31:19" pos:end="31:23">[<expr pos:start="31:20" pos:end="31:22"><name pos:start="31:20" pos:end="31:22">idx</name></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:31"><expr pos:start="35:5" pos:end="35:30"><call pos:start="35:5" pos:end="35:30"><name pos:start="35:5" pos:end="35:10">memset</name><argument_list pos:start="35:11" pos:end="35:30">(<argument pos:start="35:12" pos:end="35:13"><expr pos:start="35:12" pos:end="35:13"><name pos:start="35:12" pos:end="35:13">nd</name></expr></argument>, <argument pos:start="35:16" pos:end="35:16"><expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr></argument>, <argument pos:start="35:19" pos:end="35:29"><expr pos:start="35:19" pos:end="35:29"><sizeof pos:start="35:19" pos:end="35:29">sizeof<argument_list pos:start="35:25" pos:end="35:29">(<argument pos:start="35:26" pos:end="35:28"><expr pos:start="35:26" pos:end="35:28"><operator pos:start="35:26" pos:end="35:26">*</operator><name pos:start="35:27" pos:end="35:28">nd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="57:5"><if pos:start="39:5" pos:end="51:5">if <condition pos:start="39:8" pos:end="39:48">(<expr pos:start="39:9" pos:end="39:47"><operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:15">netdev</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:46"><name pos:start="39:19" pos:end="39:30">qemu_opt_get</name><argument_list pos:start="39:31" pos:end="39:46">(<argument pos:start="39:32" pos:end="39:35"><expr pos:start="39:32" pos:end="39:35"><name pos:start="39:32" pos:end="39:35">opts</name></expr></argument>, <argument pos:start="39:38" pos:end="39:45"><expr pos:start="39:38" pos:end="39:45"><literal type="string" pos:start="39:38" pos:end="39:45">"netdev"</literal></expr></argument>)</argument_list></call><operator pos:start="39:47" pos:end="39:47">)</operator></expr>)</condition> <block pos:start="39:50" pos:end="51:5">{<block_content pos:start="41:9" pos:end="49:9">

        <expr_stmt pos:start="41:9" pos:end="41:46"><expr pos:start="41:9" pos:end="41:45"><name pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:10">nd</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:18">netdev</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <call pos:start="41:22" pos:end="41:45"><name pos:start="41:22" pos:end="41:37">qemu_find_netdev</name><argument_list pos:start="41:38" pos:end="41:45">(<argument pos:start="41:39" pos:end="41:44"><expr pos:start="41:39" pos:end="41:44"><name pos:start="41:39" pos:end="41:44">netdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:24">(<expr pos:start="43:13" pos:end="43:23"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:23"><name pos:start="43:14" pos:end="43:15">nd</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:23">netdev</name></name></expr>)</condition> <block pos:start="43:26" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:22">

            <expr_stmt pos:start="45:13" pos:end="45:58"><expr pos:start="45:13" pos:end="45:57"><call pos:start="45:13" pos:end="45:57"><name pos:start="45:13" pos:end="45:22">qemu_error</name><argument_list pos:start="45:23" pos:end="45:57">(<argument pos:start="45:24" pos:end="45:48"><expr pos:start="45:24" pos:end="45:48"><literal type="string" pos:start="45:24" pos:end="45:48">"netdev '%s' not found\n"</literal></expr></argument>, <argument pos:start="45:51" pos:end="45:56"><expr pos:start="45:51" pos:end="45:56"><name pos:start="45:51" pos:end="45:56">netdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:22">return <expr pos:start="47:20" pos:end="47:21"><operator pos:start="47:20" pos:end="47:20">-</operator><literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="57:5">else <block pos:start="51:12" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:24">

        <expr_stmt pos:start="53:9" pos:end="53:21"><expr pos:start="53:9" pos:end="53:20"><call pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:14">assert</name><argument_list pos:start="53:15" pos:end="53:20">(<argument pos:start="53:16" pos:end="53:19"><expr pos:start="53:16" pos:end="53:19"><name pos:start="53:16" pos:end="53:19">vlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:24"><expr pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:10">nd</name><operator pos:start="55:11" pos:end="55:12">-&gt;</operator><name pos:start="55:13" pos:end="55:16">vlan</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:23">vlan</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:13">(<expr pos:start="59:9" pos:end="59:12"><name pos:start="59:9" pos:end="59:12">name</name></expr>)</condition> <block pos:start="59:15" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:37">

        <expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:10">nd</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:16">name</name></name> <operator pos:start="61:18" pos:end="61:18">=</operator> <call pos:start="61:20" pos:end="61:36"><name pos:start="61:20" pos:end="61:30">qemu_strdup</name><argument_list pos:start="61:31" pos:end="61:36">(<argument pos:start="61:32" pos:end="61:35"><expr pos:start="61:32" pos:end="61:35"><name pos:start="61:32" pos:end="61:35">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:36">(<expr pos:start="65:9" pos:end="65:35"><call pos:start="65:9" pos:end="65:35"><name pos:start="65:9" pos:end="65:20">qemu_opt_get</name><argument_list pos:start="65:21" pos:end="65:35">(<argument pos:start="65:22" pos:end="65:25"><expr pos:start="65:22" pos:end="65:25"><name pos:start="65:22" pos:end="65:25">opts</name></expr></argument>, <argument pos:start="65:28" pos:end="65:34"><expr pos:start="65:28" pos:end="65:34"><literal type="string" pos:start="65:28" pos:end="65:34">"model"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:38" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:61">

        <expr_stmt pos:start="67:9" pos:end="67:61"><expr pos:start="67:9" pos:end="67:60"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:10">nd</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:17">model</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <call pos:start="67:21" pos:end="67:60"><name pos:start="67:21" pos:end="67:31">qemu_strdup</name><argument_list pos:start="67:32" pos:end="67:60">(<argument pos:start="67:33" pos:end="67:59"><expr pos:start="67:33" pos:end="67:59"><call pos:start="67:33" pos:end="67:59"><name pos:start="67:33" pos:end="67:44">qemu_opt_get</name><argument_list pos:start="67:45" pos:end="67:59">(<argument pos:start="67:46" pos:end="67:49"><expr pos:start="67:46" pos:end="67:49"><name pos:start="67:46" pos:end="67:49">opts</name></expr></argument>, <argument pos:start="67:52" pos:end="67:58"><expr pos:start="67:52" pos:end="67:58"><literal type="string" pos:start="67:52" pos:end="67:58">"model"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:35">(<expr pos:start="71:9" pos:end="71:34"><call pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:20">qemu_opt_get</name><argument_list pos:start="71:21" pos:end="71:34">(<argument pos:start="71:22" pos:end="71:25"><expr pos:start="71:22" pos:end="71:25"><name pos:start="71:22" pos:end="71:25">opts</name></expr></argument>, <argument pos:start="71:28" pos:end="71:33"><expr pos:start="71:28" pos:end="71:33"><literal type="string" pos:start="71:28" pos:end="71:33">"addr"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:37" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:62">

        <expr_stmt pos:start="73:9" pos:end="73:62"><expr pos:start="73:9" pos:end="73:61"><name pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:10">nd</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:19">devaddr</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <call pos:start="73:23" pos:end="73:61"><name pos:start="73:23" pos:end="73:33">qemu_strdup</name><argument_list pos:start="73:34" pos:end="73:61">(<argument pos:start="73:35" pos:end="73:60"><expr pos:start="73:35" pos:end="73:60"><call pos:start="73:35" pos:end="73:60"><name pos:start="73:35" pos:end="73:46">qemu_opt_get</name><argument_list pos:start="73:47" pos:end="73:60">(<argument pos:start="73:48" pos:end="73:51"><expr pos:start="73:48" pos:end="73:51"><name pos:start="73:48" pos:end="73:51">opts</name></expr></argument>, <argument pos:start="73:54" pos:end="73:59"><expr pos:start="73:54" pos:end="73:59"><literal type="string" pos:start="73:54" pos:end="73:59">"addr"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:26"><expr pos:start="79:5" pos:end="79:25"><name pos:start="79:5" pos:end="79:18"><name pos:start="79:5" pos:end="79:6">nd</name><operator pos:start="79:7" pos:end="79:8">-&gt;</operator><name pos:start="79:9" pos:end="79:15">macaddr</name><index pos:start="79:16" pos:end="79:18">[<expr pos:start="79:17" pos:end="79:17"><literal type="number" pos:start="79:17" pos:end="79:17">0</literal></expr>]</index></name> <operator pos:start="79:20" pos:end="79:20">=</operator> <literal type="number" pos:start="79:22" pos:end="79:25">0x52</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:26"><expr pos:start="81:5" pos:end="81:25"><name pos:start="81:5" pos:end="81:18"><name pos:start="81:5" pos:end="81:6">nd</name><operator pos:start="81:7" pos:end="81:8">-&gt;</operator><name pos:start="81:9" pos:end="81:15">macaddr</name><index pos:start="81:16" pos:end="81:18">[<expr pos:start="81:17" pos:end="81:17"><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>]</index></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <literal type="number" pos:start="81:22" pos:end="81:25">0x54</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:26"><expr pos:start="83:5" pos:end="83:25"><name pos:start="83:5" pos:end="83:18"><name pos:start="83:5" pos:end="83:6">nd</name><operator pos:start="83:7" pos:end="83:8">-&gt;</operator><name pos:start="83:9" pos:end="83:15">macaddr</name><index pos:start="83:16" pos:end="83:18">[<expr pos:start="83:17" pos:end="83:17"><literal type="number" pos:start="83:17" pos:end="83:17">2</literal></expr>]</index></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <literal type="number" pos:start="83:22" pos:end="83:25">0x00</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:18"><name pos:start="85:5" pos:end="85:6">nd</name><operator pos:start="85:7" pos:end="85:8">-&gt;</operator><name pos:start="85:9" pos:end="85:15">macaddr</name><index pos:start="85:16" pos:end="85:18">[<expr pos:start="85:17" pos:end="85:17"><literal type="number" pos:start="85:17" pos:end="85:17">3</literal></expr>]</index></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:25">0x12</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:26"><expr pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:18"><name pos:start="87:5" pos:end="87:6">nd</name><operator pos:start="87:7" pos:end="87:8">-&gt;</operator><name pos:start="87:9" pos:end="87:15">macaddr</name><index pos:start="87:16" pos:end="87:18">[<expr pos:start="87:17" pos:end="87:17"><literal type="number" pos:start="87:17" pos:end="87:17">4</literal></expr>]</index></name> <operator pos:start="87:20" pos:end="87:20">=</operator> <literal type="number" pos:start="87:22" pos:end="87:25">0x34</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:32"><expr pos:start="89:5" pos:end="89:31"><name pos:start="89:5" pos:end="89:18"><name pos:start="89:5" pos:end="89:6">nd</name><operator pos:start="89:7" pos:end="89:8">-&gt;</operator><name pos:start="89:9" pos:end="89:15">macaddr</name><index pos:start="89:16" pos:end="89:18">[<expr pos:start="89:17" pos:end="89:17"><literal type="number" pos:start="89:17" pos:end="89:17">5</literal></expr>]</index></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:27">0x56</literal> <operator pos:start="89:27" pos:end="89:27">+</operator> <name pos:start="89:29" pos:end="89:31">idx</name></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="101:5">if <condition pos:start="93:8" pos:end="95:74">(<expr pos:start="93:9" pos:end="95:73"><call pos:start="93:9" pos:end="93:37"><name pos:start="93:9" pos:end="93:20">qemu_opt_get</name><argument_list pos:start="93:21" pos:end="93:37">(<argument pos:start="93:22" pos:end="93:25"><expr pos:start="93:22" pos:end="93:25"><name pos:start="93:22" pos:end="93:25">opts</name></expr></argument>, <argument pos:start="93:28" pos:end="93:36"><expr pos:start="93:28" pos:end="93:36"><literal type="string" pos:start="93:28" pos:end="93:36">"macaddr"</literal></expr></argument>)</argument_list></call> <operator pos:start="93:39" pos:end="93:40">&amp;&amp;</operator>

        <call pos:start="95:9" pos:end="95:69"><name pos:start="95:9" pos:end="95:25">net_parse_macaddr</name><argument_list pos:start="95:26" pos:end="95:69">(<argument pos:start="95:27" pos:end="95:37"><expr pos:start="95:27" pos:end="95:37"><name pos:start="95:27" pos:end="95:37"><name pos:start="95:27" pos:end="95:28">nd</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:37">macaddr</name></name></expr></argument>, <argument pos:start="95:40" pos:end="95:68"><expr pos:start="95:40" pos:end="95:68"><call pos:start="95:40" pos:end="95:68"><name pos:start="95:40" pos:end="95:51">qemu_opt_get</name><argument_list pos:start="95:52" pos:end="95:68">(<argument pos:start="95:53" pos:end="95:56"><expr pos:start="95:53" pos:end="95:56"><name pos:start="95:53" pos:end="95:56">opts</name></expr></argument>, <argument pos:start="95:59" pos:end="95:67"><expr pos:start="95:59" pos:end="95:67"><literal type="string" pos:start="95:59" pos:end="95:67">"macaddr"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="95:71" pos:end="95:71">&lt;</operator> <literal type="number" pos:start="95:73" pos:end="95:73">0</literal></expr>)</condition> <block pos:start="95:76" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:18">

        <expr_stmt pos:start="97:9" pos:end="97:60"><expr pos:start="97:9" pos:end="97:59"><call pos:start="97:9" pos:end="97:59"><name pos:start="97:9" pos:end="97:18">qemu_error</name><argument_list pos:start="97:19" pos:end="97:59">(<argument pos:start="97:20" pos:end="97:58"><expr pos:start="97:20" pos:end="97:58"><literal type="string" pos:start="97:20" pos:end="97:58">"invalid syntax for ethernet address\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:18">return <expr pos:start="99:16" pos:end="99:17"><operator pos:start="99:16" pos:end="99:16">-</operator><literal type="number" pos:start="99:17" pos:end="99:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:82"><expr pos:start="105:5" pos:end="105:81"><name pos:start="105:5" pos:end="105:16"><name pos:start="105:5" pos:end="105:6">nd</name><operator pos:start="105:7" pos:end="105:8">-&gt;</operator><name pos:start="105:9" pos:end="105:16">nvectors</name></name> <operator pos:start="105:18" pos:end="105:18">=</operator> <call pos:start="105:20" pos:end="105:81"><name pos:start="105:20" pos:end="105:38">qemu_opt_get_number</name><argument_list pos:start="105:39" pos:end="105:81">(<argument pos:start="105:40" pos:end="105:43"><expr pos:start="105:40" pos:end="105:43"><name pos:start="105:40" pos:end="105:43">opts</name></expr></argument>, <argument pos:start="105:46" pos:end="105:54"><expr pos:start="105:46" pos:end="105:54"><literal type="string" pos:start="105:46" pos:end="105:54">"vectors"</literal></expr></argument>, <argument pos:start="105:57" pos:end="105:80"><expr pos:start="105:57" pos:end="105:80"><name pos:start="105:57" pos:end="105:80">NIC_NVECTORS_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="115:5"><if pos:start="107:5" pos:end="115:5">if <condition pos:start="107:8" pos:end="109:55">(<expr pos:start="107:9" pos:end="109:54"><name pos:start="107:9" pos:end="107:20"><name pos:start="107:9" pos:end="107:10">nd</name><operator pos:start="107:11" pos:end="107:12">-&gt;</operator><name pos:start="107:13" pos:end="107:20">nvectors</name></name> <operator pos:start="107:22" pos:end="107:23">!=</operator> <name pos:start="107:25" pos:end="107:48">NIC_NVECTORS_UNSPECIFIED</name> <operator pos:start="107:50" pos:end="107:51">&amp;&amp;</operator>

        <operator pos:start="109:9" pos:end="109:9">(</operator><name pos:start="109:10" pos:end="109:21"><name pos:start="109:10" pos:end="109:11">nd</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:21">nvectors</name></name> <operator pos:start="109:23" pos:end="109:23">&lt;</operator> <literal type="number" pos:start="109:25" pos:end="109:25">0</literal> <operator pos:start="109:27" pos:end="109:28">||</operator> <name pos:start="109:30" pos:end="109:41"><name pos:start="109:30" pos:end="109:31">nd</name><operator pos:start="109:32" pos:end="109:33">-&gt;</operator><name pos:start="109:34" pos:end="109:41">nvectors</name></name> <operator pos:start="109:43" pos:end="109:43">&gt;</operator> <literal type="number" pos:start="109:45" pos:end="109:53">0x7ffffff</literal><operator pos:start="109:54" pos:end="109:54">)</operator></expr>)</condition> <block pos:start="109:57" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:18">

        <expr_stmt pos:start="111:9" pos:end="111:63"><expr pos:start="111:9" pos:end="111:62"><call pos:start="111:9" pos:end="111:62"><name pos:start="111:9" pos:end="111:18">qemu_error</name><argument_list pos:start="111:19" pos:end="111:62">(<argument pos:start="111:20" pos:end="111:47"><expr pos:start="111:20" pos:end="111:47"><literal type="string" pos:start="111:20" pos:end="111:47">"invalid # of vectors: %d\n"</literal></expr></argument>, <argument pos:start="111:50" pos:end="111:61"><expr pos:start="111:50" pos:end="111:61"><name pos:start="111:50" pos:end="111:61"><name pos:start="111:50" pos:end="111:51">nd</name><operator pos:start="111:52" pos:end="111:53">-&gt;</operator><name pos:start="111:54" pos:end="111:61">nvectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:18">return <expr pos:start="113:16" pos:end="113:17"><operator pos:start="113:16" pos:end="113:16">-</operator><literal type="number" pos:start="113:17" pos:end="113:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:17"><expr pos:start="119:5" pos:end="119:16"><name pos:start="119:5" pos:end="119:12"><name pos:start="119:5" pos:end="119:6">nd</name><operator pos:start="119:7" pos:end="119:8">-&gt;</operator><name pos:start="119:9" pos:end="119:12">used</name></name> <operator pos:start="119:14" pos:end="119:14">=</operator> <literal type="number" pos:start="119:16" pos:end="119:16">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:13">(<expr pos:start="121:9" pos:end="121:12"><name pos:start="121:9" pos:end="121:12">vlan</name></expr>)</condition> <block pos:start="121:15" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:34">

        <expr_stmt pos:start="123:9" pos:end="123:34"><expr pos:start="123:9" pos:end="123:33"><name pos:start="123:9" pos:end="123:31"><name pos:start="123:9" pos:end="123:10">nd</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:16">vlan</name><operator pos:start="123:17" pos:end="123:18">-&gt;</operator><name pos:start="123:19" pos:end="123:31">nb_guest_devs</name></name><operator pos:start="123:32" pos:end="123:33">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:14"><expr pos:start="127:5" pos:end="127:13"><name pos:start="127:5" pos:end="127:11">nb_nics</name><operator pos:start="127:12" pos:end="127:13">++</operator></expr>;</expr_stmt>



    <return pos:start="131:5" pos:end="131:15">return <expr pos:start="131:12" pos:end="131:14"><name pos:start="131:12" pos:end="131:14">idx</name></expr>;</return>

</block_content>}</block></function>
</unit>
