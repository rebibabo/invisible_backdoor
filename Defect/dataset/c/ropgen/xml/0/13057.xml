<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13057.c" pos:tabs="8"><macro pos:start="1:1" pos:end="7:29"><name pos:start="1:1" pos:end="1:15">iscsi_aio_readv</name><argument_list pos:start="1:16" pos:end="7:29">(<argument pos:start="1:17" pos:end="1:36">BlockDriverState *bs</argument>, <argument pos:start="1:39" pos:end="1:56">int64_t sector_num</argument>,

                <argument pos:start="3:17" pos:end="3:34">QEMUIOVector *qiov</argument>, <argument pos:start="3:37" pos:end="3:50">int nb_sectors</argument>,

                <argument pos:start="5:17" pos:end="5:45">BlockDriverCompletionFunc *cb</argument>,

                <argument pos:start="7:17" pos:end="7:28">void *opaque</argument>)</argument_list></macro>

<block pos:start="9:1" pos:end="195:1">{<block_content pos:start="11:5" pos:end="193:24">

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">IscsiLun</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">iscsilun</name> <init pos:start="11:24" pos:end="11:35">= <expr pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:35"><name pos:start="11:26" pos:end="11:27">bs</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:49"><type pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:24">iscsi_context</name></name> <modifier pos:start="13:26" pos:end="13:26">*</modifier></type><name pos:start="13:27" pos:end="13:31">iscsi</name> <init pos:start="13:33" pos:end="13:49">= <expr pos:start="13:35" pos:end="13:49"><name pos:start="13:35" pos:end="13:49"><name pos:start="13:35" pos:end="13:42">iscsilun</name><operator pos:start="13:43" pos:end="13:44">-&gt;</operator><name pos:start="13:45" pos:end="13:49">iscsi</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">IscsiAIOCB</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:19">acb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:25">qemu_read_size</name></decl>;</decl_stmt>

<cpp:if pos:start="19:1" pos:end="19:39">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:39"><operator pos:start="19:5" pos:end="19:5">!</operator><call pos:start="19:6" pos:end="19:39"><name pos:start="19:6" pos:end="19:12">defined</name><argument_list pos:start="19:13" pos:end="19:39">(<argument pos:start="19:14" pos:end="19:38"><expr pos:start="19:14" pos:end="19:38"><name pos:start="19:14" pos:end="19:38">LIBISCSI_FEATURE_IOVECTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="21:5" pos:end="24:0"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="25:5" pos:end="25:12"><decl pos:start="25:5" pos:end="25:11"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:17"><decl pos:start="27:5" pos:end="27:16"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint64_t</name></type> <name pos:start="27:14" pos:end="27:16">lba</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:25"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint32_t</name></type> <name pos:start="29:14" pos:end="29:24">num_sectors</name></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:59"><expr pos:start="33:5" pos:end="33:58"><name pos:start="33:5" pos:end="33:18">qemu_read_size</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <name pos:start="33:22" pos:end="33:37">BDRV_SECTOR_SIZE</name> <operator pos:start="33:39" pos:end="33:39">*</operator> <operator pos:start="33:41" pos:end="33:41">(</operator><name pos:start="33:42" pos:end="33:47">size_t</name><operator pos:start="33:48" pos:end="33:48">)</operator><name pos:start="33:49" pos:end="33:58">nb_sectors</name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:58"><expr pos:start="37:5" pos:end="37:57"><name pos:start="37:5" pos:end="37:7">acb</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:57"><name pos:start="37:11" pos:end="37:22">qemu_aio_get</name><argument_list pos:start="37:23" pos:end="37:57">(<argument pos:start="37:24" pos:end="37:40"><expr pos:start="37:24" pos:end="37:40"><operator pos:start="37:24" pos:end="37:24">&amp;</operator><name pos:start="37:25" pos:end="37:40">iscsi_aiocb_info</name></expr></argument>, <argument pos:start="37:43" pos:end="37:44"><expr pos:start="37:43" pos:end="37:44"><name pos:start="37:43" pos:end="37:44">bs</name></expr></argument>, <argument pos:start="37:47" pos:end="37:48"><expr pos:start="37:47" pos:end="37:48"><name pos:start="37:47" pos:end="37:48">cb</name></expr></argument>, <argument pos:start="37:51" pos:end="37:56"><expr pos:start="37:51" pos:end="37:56"><name pos:start="37:51" pos:end="37:56">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:70"><expr pos:start="39:5" pos:end="39:69"><call pos:start="39:5" pos:end="39:69"><name pos:start="39:5" pos:end="39:25">trace_iscsi_aio_readv</name><argument_list pos:start="39:26" pos:end="39:69">(<argument pos:start="39:27" pos:end="39:31"><expr pos:start="39:27" pos:end="39:31"><name pos:start="39:27" pos:end="39:31">iscsi</name></expr></argument>, <argument pos:start="39:34" pos:end="39:43"><expr pos:start="39:34" pos:end="39:43"><name pos:start="39:34" pos:end="39:43">sector_num</name></expr></argument>, <argument pos:start="39:46" pos:end="39:55"><expr pos:start="39:46" pos:end="39:55"><name pos:start="39:46" pos:end="39:55">nb_sectors</name></expr></argument>, <argument pos:start="39:58" pos:end="39:63"><expr pos:start="39:58" pos:end="39:63"><name pos:start="39:58" pos:end="39:63">opaque</name></expr></argument>, <argument pos:start="39:66" pos:end="39:68"><expr pos:start="39:66" pos:end="39:68"><name pos:start="39:66" pos:end="39:68">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:29"><expr pos:start="43:5" pos:end="43:28"><name pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:7">acb</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:17">iscsilun</name></name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:28">iscsilun</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:13"><name pos:start="45:5" pos:end="45:7">acb</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:13">qiov</name></name>     <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:24">qiov</name></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:25"><expr pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:17"><name pos:start="49:5" pos:end="49:7">acb</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:17">canceled</name></name>    <operator pos:start="49:22" pos:end="49:22">=</operator> <literal type="number" pos:start="49:24" pos:end="49:24">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:28"><expr pos:start="51:5" pos:end="51:27"><name pos:start="51:5" pos:end="51:11"><name pos:start="51:5" pos:end="51:7">acb</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:11">bh</name></name>          <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:27">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:36"><expr pos:start="53:5" pos:end="53:35"><name pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:7">acb</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:15">status</name></name>      <operator pos:start="53:22" pos:end="53:22">=</operator> <operator pos:start="53:24" pos:end="53:24">-</operator><name pos:start="53:25" pos:end="53:35">EINPROGRESS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:38"><expr pos:start="55:5" pos:end="55:37"><name pos:start="55:5" pos:end="55:18"><name pos:start="55:5" pos:end="55:7">acb</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:18">read_size</name></name>   <operator pos:start="55:22" pos:end="55:22">=</operator> <name pos:start="55:24" pos:end="55:37">qemu_read_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:28"><expr pos:start="57:5" pos:end="57:27"><name pos:start="57:5" pos:end="57:12"><name pos:start="57:5" pos:end="57:7">acb</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:12">buf</name></name>         <operator pos:start="57:22" pos:end="57:22">=</operator> <name pos:start="57:24" pos:end="57:27">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="67:7">/* If LUN blocksize is bigger than BDRV_BLOCK_SIZE a read from QEMU

     * may be misaligned to the LUN, so we may need to read some extra

     * data.

     */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:25"><expr pos:start="69:5" pos:end="69:24"><name pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:7">acb</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:20">read_offset</name></name> <operator pos:start="69:22" pos:end="69:22">=</operator> <literal type="number" pos:start="69:24" pos:end="69:24">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:48">(<expr pos:start="71:9" pos:end="71:47"><name pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:16">iscsilun</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:28">block_size</name></name> <operator pos:start="71:30" pos:end="71:30">&gt;</operator> <name pos:start="71:32" pos:end="71:47">BDRV_SECTOR_SIZE</name></expr>)</condition> <block pos:start="71:50" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:63">

        <decl_stmt pos:start="73:9" pos:end="73:61"><decl pos:start="73:9" pos:end="73:60"><type pos:start="73:9" pos:end="73:16"><name pos:start="73:9" pos:end="73:16">uint64_t</name></type> <name pos:start="73:18" pos:end="73:28">bdrv_offset</name> <init pos:start="73:30" pos:end="73:60">= <expr pos:start="73:32" pos:end="73:60"><name pos:start="73:32" pos:end="73:47">BDRV_SECTOR_SIZE</name> <operator pos:start="73:49" pos:end="73:49">*</operator> <name pos:start="73:51" pos:end="73:60">sector_num</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:63"><expr pos:start="77:9" pos:end="77:62"><name pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:11">acb</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:24">read_offset</name></name>  <operator pos:start="77:27" pos:end="77:27">=</operator> <name pos:start="77:29" pos:end="77:39">bdrv_offset</name> <operator pos:start="77:41" pos:end="77:41">%</operator> <name pos:start="77:43" pos:end="77:62"><name pos:start="77:43" pos:end="77:50">iscsilun</name><operator pos:start="77:51" pos:end="77:52">-&gt;</operator><name pos:start="77:53" pos:end="77:62">block_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="87:43"><expr pos:start="83:5" pos:end="87:42"><name pos:start="83:5" pos:end="83:15">num_sectors</name>  <operator pos:start="83:18" pos:end="83:18">=</operator> <operator pos:start="83:20" pos:end="83:20">(</operator><name pos:start="83:21" pos:end="83:34">qemu_read_size</name> <operator pos:start="83:36" pos:end="83:36">+</operator> <name pos:start="83:38" pos:end="83:57"><name pos:start="83:38" pos:end="83:45">iscsilun</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:57">block_size</name></name>

                    <operator pos:start="85:21" pos:end="85:21">+</operator> <name pos:start="85:23" pos:end="85:38"><name pos:start="85:23" pos:end="85:25">acb</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:38">read_offset</name></name> <operator pos:start="85:40" pos:end="85:40">-</operator> <literal type="number" pos:start="85:42" pos:end="85:42">1</literal><operator pos:start="85:43" pos:end="85:43">)</operator>

                    <operator pos:start="87:21" pos:end="87:21">/</operator> <name pos:start="87:23" pos:end="87:42"><name pos:start="87:23" pos:end="87:30">iscsilun</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:42">block_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:49"><expr pos:start="91:5" pos:end="91:48"><name pos:start="91:5" pos:end="91:13"><name pos:start="91:5" pos:end="91:7">acb</name><operator pos:start="91:8" pos:end="91:9">-&gt;</operator><name pos:start="91:10" pos:end="91:13">task</name></name> <operator pos:start="91:15" pos:end="91:15">=</operator> <call pos:start="91:17" pos:end="91:48"><name pos:start="91:17" pos:end="91:22">malloc</name><argument_list pos:start="91:23" pos:end="91:48">(<argument pos:start="91:24" pos:end="91:47"><expr pos:start="91:24" pos:end="91:47"><sizeof pos:start="91:24" pos:end="91:47">sizeof<argument_list pos:start="91:30" pos:end="91:47">(<argument pos:start="91:31" pos:end="91:46"><expr pos:start="91:31" pos:end="91:46">struct <name pos:start="91:38" pos:end="91:46">scsi_task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="103:5"><if pos:start="93:5" pos:end="103:5">if <condition pos:start="93:8" pos:end="93:26">(<expr pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:11">acb</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:17">task</name></name> <operator pos:start="93:19" pos:end="93:20">==</operator> <name pos:start="93:22" pos:end="93:25">NULL</name></expr>)</condition> <block pos:start="93:28" pos:end="103:5">{<block_content pos:start="95:9" pos:end="101:20">

        <expr_stmt pos:start="95:9" pos:end="97:60"><expr pos:start="95:9" pos:end="97:59"><call pos:start="95:9" pos:end="97:59"><name pos:start="95:9" pos:end="95:20">error_report</name><argument_list pos:start="95:21" pos:end="97:59">(<argument pos:start="95:22" pos:end="97:34"><expr pos:start="95:22" pos:end="97:34"><literal type="string" pos:start="95:22" pos:end="95:70">"iSCSI: Failed to allocate task for scsi READ16 "</literal>

                     <literal type="string" pos:start="97:22" pos:end="97:34">"command. %s"</literal></expr></argument>, <argument pos:start="97:37" pos:end="97:58"><expr pos:start="97:37" pos:end="97:58"><call pos:start="97:37" pos:end="97:58"><name pos:start="97:37" pos:end="97:51">iscsi_get_error</name><argument_list pos:start="97:52" pos:end="97:58">(<argument pos:start="97:53" pos:end="97:57"><expr pos:start="97:53" pos:end="97:57"><name pos:start="97:53" pos:end="97:57">iscsi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:30"><expr pos:start="99:9" pos:end="99:29"><call pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:24">qemu_aio_release</name><argument_list pos:start="99:25" pos:end="99:29">(<argument pos:start="99:26" pos:end="99:28"><expr pos:start="99:26" pos:end="99:28"><name pos:start="99:26" pos:end="99:28">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:20">return <expr pos:start="101:16" pos:end="101:19"><name pos:start="101:16" pos:end="101:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:51"><expr pos:start="105:5" pos:end="105:50"><call pos:start="105:5" pos:end="105:50"><name pos:start="105:5" pos:end="105:10">memset</name><argument_list pos:start="105:11" pos:end="105:50">(<argument pos:start="105:12" pos:end="105:20"><expr pos:start="105:12" pos:end="105:20"><name pos:start="105:12" pos:end="105:20"><name pos:start="105:12" pos:end="105:14">acb</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:20">task</name></name></expr></argument>, <argument pos:start="105:23" pos:end="105:23"><expr pos:start="105:23" pos:end="105:23"><literal type="number" pos:start="105:23" pos:end="105:23">0</literal></expr></argument>, <argument pos:start="105:26" pos:end="105:49"><expr pos:start="105:26" pos:end="105:49"><sizeof pos:start="105:26" pos:end="105:49">sizeof<argument_list pos:start="105:32" pos:end="105:49">(<argument pos:start="105:33" pos:end="105:48"><expr pos:start="105:33" pos:end="105:48">struct <name pos:start="105:40" pos:end="105:48">scsi_task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:41"><expr pos:start="109:5" pos:end="109:40"><name pos:start="109:5" pos:end="109:23"><name pos:start="109:5" pos:end="109:7">acb</name><operator pos:start="109:8" pos:end="109:9">-&gt;</operator><name pos:start="109:10" pos:end="109:13">task</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:23">xfer_dir</name></name> <operator pos:start="109:25" pos:end="109:25">=</operator> <name pos:start="109:27" pos:end="109:40">SCSI_XFER_READ</name></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:48"><expr pos:start="111:5" pos:end="111:47"><name pos:start="111:5" pos:end="111:7">lba</name> <operator pos:start="111:9" pos:end="111:9">=</operator> <call pos:start="111:11" pos:end="111:47"><name pos:start="111:11" pos:end="111:25">sector_qemu2lun</name><argument_list pos:start="111:26" pos:end="111:47">(<argument pos:start="111:27" pos:end="111:36"><expr pos:start="111:27" pos:end="111:36"><name pos:start="111:27" pos:end="111:36">sector_num</name></expr></argument>, <argument pos:start="111:39" pos:end="111:46"><expr pos:start="111:39" pos:end="111:46"><name pos:start="111:39" pos:end="111:46">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:43"><expr pos:start="113:5" pos:end="113:42"><name pos:start="113:5" pos:end="113:25"><name pos:start="113:5" pos:end="113:7">acb</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:13">task</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:25">expxferlen</name></name> <operator pos:start="113:27" pos:end="113:27">=</operator> <name pos:start="113:29" pos:end="113:42">qemu_read_size</name></expr>;</expr_stmt>



    <switch pos:start="117:5" pos:end="145:5">switch <condition pos:start="117:12" pos:end="117:27">(<expr pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:20">iscsilun</name><operator pos:start="117:21" pos:end="117:22">-&gt;</operator><name pos:start="117:23" pos:end="117:26">type</name></name></expr>)</condition> <block pos:start="117:29" pos:end="145:5">{<block_content pos:start="119:5" pos:end="143:14">

    <case pos:start="119:5" pos:end="119:19">case <expr pos:start="119:10" pos:end="119:18"><name pos:start="119:10" pos:end="119:18">TYPE_DISK</name></expr>:</case>

        <expr_stmt pos:start="121:9" pos:end="121:33"><expr pos:start="121:9" pos:end="121:32"><name pos:start="121:9" pos:end="121:27"><name pos:start="121:9" pos:end="121:11">acb</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:17">task</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:27">cdb_size</name></name> <operator pos:start="121:29" pos:end="121:29">=</operator> <literal type="number" pos:start="121:31" pos:end="121:32">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:34"><expr pos:start="123:9" pos:end="123:33"><name pos:start="123:9" pos:end="123:25"><name pos:start="123:9" pos:end="123:11">acb</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:17">task</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:22">cdb</name><index pos:start="123:23" pos:end="123:25">[<expr pos:start="123:24" pos:end="123:24"><literal type="number" pos:start="123:24" pos:end="123:24">0</literal></expr>]</index></name>  <operator pos:start="123:28" pos:end="123:28">=</operator> <literal type="number" pos:start="123:30" pos:end="123:33">0x88</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:60"><expr pos:start="125:9" pos:end="125:59"><operator pos:start="125:9" pos:end="125:9">*</operator><operator pos:start="125:10" pos:end="125:10">(</operator><name pos:start="125:11" pos:end="125:18">uint32_t</name> <operator pos:start="125:20" pos:end="125:20">*</operator><operator pos:start="125:21" pos:end="125:21">)</operator><operator pos:start="125:22" pos:end="125:22">&amp;</operator><name pos:start="125:23" pos:end="125:39"><name pos:start="125:23" pos:end="125:25">acb</name><operator pos:start="125:26" pos:end="125:27">-&gt;</operator><name pos:start="125:28" pos:end="125:31">task</name><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:36">cdb</name><index pos:start="125:37" pos:end="125:39">[<expr pos:start="125:38" pos:end="125:38"><literal type="number" pos:start="125:38" pos:end="125:38">2</literal></expr>]</index></name>  <operator pos:start="125:42" pos:end="125:42">=</operator> <call pos:start="125:44" pos:end="125:59"><name pos:start="125:44" pos:end="125:48">htonl</name><argument_list pos:start="125:49" pos:end="125:59">(<argument pos:start="125:50" pos:end="125:58"><expr pos:start="125:50" pos:end="125:58"><name pos:start="125:50" pos:end="125:52">lba</name> <operator pos:start="125:54" pos:end="125:55">&gt;&gt;</operator> <literal type="number" pos:start="125:57" pos:end="125:58">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:67"><expr pos:start="127:9" pos:end="127:66"><operator pos:start="127:9" pos:end="127:9">*</operator><operator pos:start="127:10" pos:end="127:10">(</operator><name pos:start="127:11" pos:end="127:18">uint32_t</name> <operator pos:start="127:20" pos:end="127:20">*</operator><operator pos:start="127:21" pos:end="127:21">)</operator><operator pos:start="127:22" pos:end="127:22">&amp;</operator><name pos:start="127:23" pos:end="127:39"><name pos:start="127:23" pos:end="127:25">acb</name><operator pos:start="127:26" pos:end="127:27">-&gt;</operator><name pos:start="127:28" pos:end="127:31">task</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:36">cdb</name><index pos:start="127:37" pos:end="127:39">[<expr pos:start="127:38" pos:end="127:38"><literal type="number" pos:start="127:38" pos:end="127:38">6</literal></expr>]</index></name>  <operator pos:start="127:42" pos:end="127:42">=</operator> <call pos:start="127:44" pos:end="127:66"><name pos:start="127:44" pos:end="127:48">htonl</name><argument_list pos:start="127:49" pos:end="127:66">(<argument pos:start="127:50" pos:end="127:65"><expr pos:start="127:50" pos:end="127:65"><name pos:start="127:50" pos:end="127:52">lba</name> <operator pos:start="127:54" pos:end="127:54">&amp;</operator> <literal type="number" pos:start="127:56" pos:end="127:65">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:62"><expr pos:start="129:9" pos:end="129:61"><operator pos:start="129:9" pos:end="129:9">*</operator><operator pos:start="129:10" pos:end="129:10">(</operator><name pos:start="129:11" pos:end="129:18">uint32_t</name> <operator pos:start="129:20" pos:end="129:20">*</operator><operator pos:start="129:21" pos:end="129:21">)</operator><operator pos:start="129:22" pos:end="129:22">&amp;</operator><name pos:start="129:23" pos:end="129:40"><name pos:start="129:23" pos:end="129:25">acb</name><operator pos:start="129:26" pos:end="129:27">-&gt;</operator><name pos:start="129:28" pos:end="129:31">task</name><operator pos:start="129:32" pos:end="129:33">-&gt;</operator><name pos:start="129:34" pos:end="129:36">cdb</name><index pos:start="129:37" pos:end="129:40">[<expr pos:start="129:38" pos:end="129:39"><literal type="number" pos:start="129:38" pos:end="129:39">10</literal></expr>]</index></name> <operator pos:start="129:42" pos:end="129:42">=</operator> <call pos:start="129:44" pos:end="129:61"><name pos:start="129:44" pos:end="129:48">htonl</name><argument_list pos:start="129:49" pos:end="129:61">(<argument pos:start="129:50" pos:end="129:60"><expr pos:start="129:50" pos:end="129:60"><name pos:start="129:50" pos:end="129:60">num_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="131:9" pos:end="131:14">break;</break>

    <default pos:start="133:5" pos:end="133:12">default:</default>

        <expr_stmt pos:start="135:9" pos:end="135:33"><expr pos:start="135:9" pos:end="135:32"><name pos:start="135:9" pos:end="135:27"><name pos:start="135:9" pos:end="135:11">acb</name><operator pos:start="135:12" pos:end="135:13">-&gt;</operator><name pos:start="135:14" pos:end="135:17">task</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:27">cdb_size</name></name> <operator pos:start="135:29" pos:end="135:29">=</operator> <literal type="number" pos:start="135:31" pos:end="135:32">10</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:34"><expr pos:start="137:9" pos:end="137:33"><name pos:start="137:9" pos:end="137:25"><name pos:start="137:9" pos:end="137:11">acb</name><operator pos:start="137:12" pos:end="137:13">-&gt;</operator><name pos:start="137:14" pos:end="137:17">task</name><operator pos:start="137:18" pos:end="137:19">-&gt;</operator><name pos:start="137:20" pos:end="137:22">cdb</name><index pos:start="137:23" pos:end="137:25">[<expr pos:start="137:24" pos:end="137:24"><literal type="number" pos:start="137:24" pos:end="137:24">0</literal></expr>]</index></name>  <operator pos:start="137:28" pos:end="137:28">=</operator> <literal type="number" pos:start="137:30" pos:end="137:33">0x28</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:53"><expr pos:start="139:9" pos:end="139:52"><operator pos:start="139:9" pos:end="139:9">*</operator><operator pos:start="139:10" pos:end="139:10">(</operator><name pos:start="139:11" pos:end="139:18">uint32_t</name> <operator pos:start="139:20" pos:end="139:20">*</operator><operator pos:start="139:21" pos:end="139:21">)</operator><operator pos:start="139:22" pos:end="139:22">&amp;</operator><name pos:start="139:23" pos:end="139:39"><name pos:start="139:23" pos:end="139:25">acb</name><operator pos:start="139:26" pos:end="139:27">-&gt;</operator><name pos:start="139:28" pos:end="139:31">task</name><operator pos:start="139:32" pos:end="139:33">-&gt;</operator><name pos:start="139:34" pos:end="139:36">cdb</name><index pos:start="139:37" pos:end="139:39">[<expr pos:start="139:38" pos:end="139:38"><literal type="number" pos:start="139:38" pos:end="139:38">2</literal></expr>]</index></name> <operator pos:start="139:41" pos:end="139:41">=</operator> <call pos:start="139:43" pos:end="139:52"><name pos:start="139:43" pos:end="139:47">htonl</name><argument_list pos:start="139:48" pos:end="139:52">(<argument pos:start="139:49" pos:end="139:51"><expr pos:start="139:49" pos:end="139:51"><name pos:start="139:49" pos:end="139:51">lba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:61"><expr pos:start="141:9" pos:end="141:60"><operator pos:start="141:9" pos:end="141:9">*</operator><operator pos:start="141:10" pos:end="141:10">(</operator><name pos:start="141:11" pos:end="141:18">uint16_t</name> <operator pos:start="141:20" pos:end="141:20">*</operator><operator pos:start="141:21" pos:end="141:21">)</operator><operator pos:start="141:22" pos:end="141:22">&amp;</operator><name pos:start="141:23" pos:end="141:39"><name pos:start="141:23" pos:end="141:25">acb</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:31">task</name><operator pos:start="141:32" pos:end="141:33">-&gt;</operator><name pos:start="141:34" pos:end="141:36">cdb</name><index pos:start="141:37" pos:end="141:39">[<expr pos:start="141:38" pos:end="141:38"><literal type="number" pos:start="141:38" pos:end="141:38">7</literal></expr>]</index></name> <operator pos:start="141:41" pos:end="141:41">=</operator> <call pos:start="141:43" pos:end="141:60"><name pos:start="141:43" pos:end="141:47">htons</name><argument_list pos:start="141:48" pos:end="141:60">(<argument pos:start="141:49" pos:end="141:59"><expr pos:start="141:49" pos:end="141:59"><name pos:start="141:49" pos:end="141:59">num_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="149:5" pos:end="155:40"><expr pos:start="149:5" pos:end="155:39"><name pos:start="149:5" pos:end="149:7">ret</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <call pos:start="149:11" pos:end="155:39"><name pos:start="149:11" pos:end="149:34">iscsi_scsi_command_async</name><argument_list pos:start="149:35" pos:end="155:39">(<argument pos:start="149:36" pos:end="149:40"><expr pos:start="149:36" pos:end="149:40"><name pos:start="149:36" pos:end="149:40">iscsi</name></expr></argument>, <argument pos:start="149:43" pos:end="149:55"><expr pos:start="149:43" pos:end="149:55"><name pos:start="149:43" pos:end="149:55"><name pos:start="149:43" pos:end="149:50">iscsilun</name><operator pos:start="149:51" pos:end="149:52">-&gt;</operator><name pos:start="149:53" pos:end="149:55">lun</name></name></expr></argument>, <argument pos:start="149:58" pos:end="149:66"><expr pos:start="149:58" pos:end="149:66"><name pos:start="149:58" pos:end="149:66"><name pos:start="149:58" pos:end="149:60">acb</name><operator pos:start="149:61" pos:end="149:62">-&gt;</operator><name pos:start="149:63" pos:end="149:66">task</name></name></expr></argument>,

                                   <argument pos:start="151:36" pos:end="151:54"><expr pos:start="151:36" pos:end="151:54"><name pos:start="151:36" pos:end="151:54">iscsi_aio_read16_cb</name></expr></argument>,

                                   <argument pos:start="153:36" pos:end="153:39"><expr pos:start="153:36" pos:end="153:39"><name pos:start="153:36" pos:end="153:39">NULL</name></expr></argument>,

                                   <argument pos:start="155:36" pos:end="155:38"><expr pos:start="155:36" pos:end="155:38"><name pos:start="155:36" pos:end="155:38">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="170:0"><if pos:start="157:5" pos:end="170:0">if <condition pos:start="157:8" pos:end="157:17">(<expr pos:start="157:9" pos:end="157:16"><name pos:start="157:9" pos:end="157:11">ret</name> <operator pos:start="157:13" pos:end="157:14">!=</operator> <literal type="number" pos:start="157:16" pos:end="157:16">0</literal></expr>)</condition> <block pos:start="157:19" pos:end="170:0">{<block_content pos:start="159:9" pos:end="163:20">

        <expr_stmt pos:start="159:9" pos:end="159:39"><expr pos:start="159:9" pos:end="159:38"><call pos:start="159:9" pos:end="159:38"><name pos:start="159:9" pos:end="159:27">scsi_free_scsi_task</name><argument_list pos:start="159:28" pos:end="159:38">(<argument pos:start="159:29" pos:end="159:37"><expr pos:start="159:29" pos:end="159:37"><name pos:start="159:29" pos:end="159:37"><name pos:start="159:29" pos:end="159:31">acb</name><operator pos:start="159:32" pos:end="159:33">-&gt;</operator><name pos:start="159:34" pos:end="159:37">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:30"><expr pos:start="161:9" pos:end="161:29"><call pos:start="161:9" pos:end="161:29"><name pos:start="161:9" pos:end="161:24">qemu_aio_release</name><argument_list pos:start="161:25" pos:end="161:29">(<argument pos:start="161:26" pos:end="161:28"><expr pos:start="161:26" pos:end="161:28"><name pos:start="161:26" pos:end="161:28">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="163:9" pos:end="163:20">return <expr pos:start="163:16" pos:end="163:19"><name pos:start="163:16" pos:end="163:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="169:1" pos:end="169:38">#<cpp:directive pos:start="169:2" pos:end="169:3">if</cpp:directive> <expr pos:start="169:5" pos:end="169:38"><call pos:start="169:5" pos:end="169:38"><name pos:start="169:5" pos:end="169:11">defined</name><argument_list pos:start="169:12" pos:end="169:38">(<argument pos:start="169:13" pos:end="169:37"><expr pos:start="169:13" pos:end="169:37"><name pos:start="169:13" pos:end="169:37">LIBISCSI_FEATURE_IOVECTOR</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="171:5" pos:end="174:0"><expr pos:start="171:5" pos:end="171:89"><call pos:start="171:5" pos:end="171:89"><name pos:start="171:5" pos:end="171:24">scsi_task_set_iov_in</name><argument_list pos:start="171:25" pos:end="171:89">(<argument pos:start="171:26" pos:end="171:34"><expr pos:start="171:26" pos:end="171:34"><name pos:start="171:26" pos:end="171:34"><name pos:start="171:26" pos:end="171:28">acb</name><operator pos:start="171:29" pos:end="171:30">-&gt;</operator><name pos:start="171:31" pos:end="171:34">task</name></name></expr></argument>, <argument pos:start="171:37" pos:end="171:71"><expr pos:start="171:37" pos:end="171:71"><operator pos:start="171:37" pos:end="171:37">(</operator>struct <name pos:start="171:45" pos:end="171:54">scsi_iovec</name><operator pos:start="171:55" pos:end="171:55">*</operator><operator pos:start="171:56" pos:end="171:56">)</operator> <name pos:start="171:58" pos:end="171:71"><name pos:start="171:58" pos:end="171:60">acb</name><operator pos:start="171:61" pos:end="171:62">-&gt;</operator><name pos:start="171:63" pos:end="171:66">qiov</name><operator pos:start="171:67" pos:end="171:68">-&gt;</operator><name pos:start="171:69" pos:end="171:71">iov</name></name></expr></argument>, <argument pos:start="171:74" pos:end="171:88"><expr pos:start="171:74" pos:end="171:88"><name pos:start="171:74" pos:end="171:88"><name pos:start="171:74" pos:end="171:76">acb</name><operator pos:start="171:77" pos:end="171:78">-&gt;</operator><name pos:start="171:79" pos:end="171:82">qiov</name><operator pos:start="171:83" pos:end="171:84">-&gt;</operator><name pos:start="171:85" pos:end="171:88">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="173:1" pos:end="173:5">#<cpp:directive pos:start="173:2" pos:end="173:5">else</cpp:directive></cpp:else>

    <for pos:start="175:5" pos:end="186:0">for <control pos:start="175:9" pos:end="175:41">(<init pos:start="175:10" pos:end="175:15"><expr pos:start="175:10" pos:end="175:14"><name pos:start="175:10" pos:end="175:10">i</name> <operator pos:start="175:12" pos:end="175:12">=</operator> <literal type="number" pos:start="175:14" pos:end="175:14">0</literal></expr>;</init> <condition pos:start="175:17" pos:end="175:36"><expr pos:start="175:17" pos:end="175:35"><name pos:start="175:17" pos:end="175:17">i</name> <operator pos:start="175:19" pos:end="175:19">&lt;</operator> <name pos:start="175:21" pos:end="175:35"><name pos:start="175:21" pos:end="175:23">acb</name><operator pos:start="175:24" pos:end="175:25">-&gt;</operator><name pos:start="175:26" pos:end="175:29">qiov</name><operator pos:start="175:30" pos:end="175:31">-&gt;</operator><name pos:start="175:32" pos:end="175:35">niov</name></name></expr>;</condition> <incr pos:start="175:38" pos:end="175:40"><expr pos:start="175:38" pos:end="175:40"><name pos:start="175:38" pos:end="175:38">i</name><operator pos:start="175:39" pos:end="175:40">++</operator></expr></incr>)</control> <block pos:start="175:43" pos:end="186:0">{<block_content pos:start="177:9" pos:end="181:44">

        <expr_stmt pos:start="177:9" pos:end="181:44"><expr pos:start="177:9" pos:end="181:43"><call pos:start="177:9" pos:end="181:43"><name pos:start="177:9" pos:end="177:36">scsi_task_add_data_in_buffer</name><argument_list pos:start="177:37" pos:end="181:43">(<argument pos:start="177:38" pos:end="177:46"><expr pos:start="177:38" pos:end="177:46"><name pos:start="177:38" pos:end="177:46"><name pos:start="177:38" pos:end="177:40">acb</name><operator pos:start="177:41" pos:end="177:42">-&gt;</operator><name pos:start="177:43" pos:end="177:46">task</name></name></expr></argument>,

                <argument pos:start="179:17" pos:end="179:41"><expr pos:start="179:17" pos:end="179:41"><name pos:start="179:17" pos:end="179:33"><name pos:start="179:17" pos:end="179:19">acb</name><operator pos:start="179:20" pos:end="179:21">-&gt;</operator><name pos:start="179:22" pos:end="179:25">qiov</name><operator pos:start="179:26" pos:end="179:27">-&gt;</operator><name pos:start="179:28" pos:end="179:30">iov</name><index pos:start="179:31" pos:end="179:33">[<expr pos:start="179:32" pos:end="179:32"><name pos:start="179:32" pos:end="179:32">i</name></expr>]</index></name><operator pos:start="179:34" pos:end="179:34">.</operator><name pos:start="179:35" pos:end="179:41">iov_len</name></expr></argument>,

                <argument pos:start="181:17" pos:end="181:42"><expr pos:start="181:17" pos:end="181:42"><name pos:start="181:17" pos:end="181:33"><name pos:start="181:17" pos:end="181:19">acb</name><operator pos:start="181:20" pos:end="181:21">-&gt;</operator><name pos:start="181:22" pos:end="181:25">qiov</name><operator pos:start="181:26" pos:end="181:27">-&gt;</operator><name pos:start="181:28" pos:end="181:30">iov</name><index pos:start="181:31" pos:end="181:33">[<expr pos:start="181:32" pos:end="181:32"><name pos:start="181:32" pos:end="181:32">i</name></expr>]</index></name><operator pos:start="181:34" pos:end="181:34">.</operator><name pos:start="181:35" pos:end="181:42">iov_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="185:1" pos:end="185:6">#<cpp:directive pos:start="185:2" pos:end="185:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="189:5" pos:end="189:31"><expr pos:start="189:5" pos:end="189:30"><call pos:start="189:5" pos:end="189:30"><name pos:start="189:5" pos:end="189:20">iscsi_set_events</name><argument_list pos:start="189:21" pos:end="189:30">(<argument pos:start="189:22" pos:end="189:29"><expr pos:start="189:22" pos:end="189:29"><name pos:start="189:22" pos:end="189:29">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="193:5" pos:end="193:24">return <expr pos:start="193:12" pos:end="193:23"><operator pos:start="193:12" pos:end="193:12">&amp;</operator><name pos:start="193:13" pos:end="193:23"><name pos:start="193:13" pos:end="193:15">acb</name><operator pos:start="193:16" pos:end="193:17">-&gt;</operator><name pos:start="193:18" pos:end="193:23">common</name></name></expr>;</return>

</block_content>}</block>
</unit>
