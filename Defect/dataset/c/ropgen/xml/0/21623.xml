<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21623.c" pos:tabs="8"><function pos:start="1:1" pos:end="1597:1"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:16">tcg_target_ulong</name></type> <name pos:start="1:18" pos:end="1:33">tcg_qemu_tb_exec</name><parameter_list pos:start="1:34" pos:end="1:69">(<parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:51"><name pos:start="1:35" pos:end="1:46">CPUArchState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">env</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:60">uint8_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:68">tb_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1597:1">{<block_content pos:start="5:5" pos:end="1595:19">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:20">tcg_target_ulong</name></type> <name pos:start="5:22" pos:end="5:28">next_tb</name> <init pos:start="5:30" pos:end="5:32">= <expr pos:start="5:32" pos:end="5:32"><literal type="number" pos:start="5:32" pos:end="5:32">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:47"><expr pos:start="9:5" pos:end="9:46"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:11">tci_reg</name><index pos:start="9:12" pos:end="9:22">[<expr pos:start="9:13" pos:end="9:21"><name pos:start="9:13" pos:end="9:21">TCG_AREG0</name></expr>]</index></name> <operator pos:start="9:24" pos:end="9:24">=</operator> <operator pos:start="9:26" pos:end="9:26">(</operator><name pos:start="9:27" pos:end="9:42">tcg_target_ulong</name><operator pos:start="9:43" pos:end="9:43">)</operator><name pos:start="9:44" pos:end="9:46">env</name></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:19"><expr pos:start="11:5" pos:end="11:18"><call pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:18">(<argument pos:start="11:12" pos:end="11:17"><expr pos:start="11:12" pos:end="11:17"><name pos:start="11:12" pos:end="11:17">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="15:5" pos:end="1591:5">for <control pos:start="15:9" pos:end="15:12">(<init pos:start="15:10" pos:end="15:10">;</init><condition pos:start="15:11" pos:end="15:11">;</condition><incr/>)</control> <block pos:start="15:14" pos:end="1591:5">{<block_content pos:start="19:9" pos:end="1589:49">

<cpp:if pos:start="17:1" pos:end="17:18">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:18"><call pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:11">defined</name><argument_list pos:start="17:12" pos:end="17:18">(<argument pos:start="17:13" pos:end="17:17"><expr pos:start="17:13" pos:end="17:17"><name pos:start="17:13" pos:end="17:17">GETPC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="19:9" pos:end="22:0"><expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:18">tci_tb_ptr</name> <operator pos:start="19:20" pos:end="19:20">=</operator> <operator pos:start="19:22" pos:end="19:22">(</operator><name pos:start="19:23" pos:end="19:31">uintptr_t</name><operator pos:start="19:32" pos:end="19:32">)</operator><name pos:start="19:33" pos:end="19:38">tb_ptr</name></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

        <decl_stmt pos:start="23:9" pos:end="26:0"><decl pos:start="23:9" pos:end="23:33"><type pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:17">TCGOpcode</name></type> <name pos:start="23:19" pos:end="23:21">opc</name> <init pos:start="23:23" pos:end="23:33">= <expr pos:start="23:25" pos:end="23:33"><name pos:start="23:25" pos:end="23:33"><name pos:start="23:25" pos:end="23:30">tb_ptr</name><index pos:start="23:31" pos:end="23:33">[<expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="25:1" pos:end="25:20">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="25:20"><operator pos:start="25:5" pos:end="25:5">!</operator><call pos:start="25:6" pos:end="25:20"><name pos:start="25:6" pos:end="25:12">defined</name><argument_list pos:start="25:13" pos:end="25:20">(<argument pos:start="25:14" pos:end="25:19"><expr pos:start="25:14" pos:end="25:19"><name pos:start="25:14" pos:end="25:19">NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <decl_stmt pos:start="27:9" pos:end="27:36"><decl pos:start="27:9" pos:end="27:35"><type pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">uint8_t</name></type> <name pos:start="27:17" pos:end="27:23">op_size</name> <init pos:start="27:25" pos:end="27:35">= <expr pos:start="27:27" pos:end="27:35"><name pos:start="27:27" pos:end="27:35"><name pos:start="27:27" pos:end="27:32">tb_ptr</name><index pos:start="27:33" pos:end="27:35">[<expr pos:start="27:34" pos:end="27:34"><literal type="number" pos:start="27:34" pos:end="27:34">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="32:0"><decl pos:start="29:9" pos:end="29:38"><type pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:15">uint8_t</name> <modifier pos:start="29:17" pos:end="29:17">*</modifier></type><name pos:start="29:18" pos:end="29:29">old_code_ptr</name> <init pos:start="29:31" pos:end="29:38">= <expr pos:start="29:33" pos:end="29:38"><name pos:start="29:33" pos:end="29:38">tb_ptr</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

        <decl_stmt pos:start="33:9" pos:end="33:28"><decl pos:start="33:9" pos:end="33:27"><type pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:24">tcg_target_ulong</name></type> <name pos:start="33:26" pos:end="33:27">t0</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:28"><decl pos:start="35:9" pos:end="35:27"><type pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:24">tcg_target_ulong</name></type> <name pos:start="35:26" pos:end="35:27">t1</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:28"><decl pos:start="37:9" pos:end="37:27"><type pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:24">tcg_target_ulong</name></type> <name pos:start="37:26" pos:end="37:27">t2</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:31"><decl pos:start="39:9" pos:end="39:30"><type pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:24">tcg_target_ulong</name></type> <name pos:start="39:26" pos:end="39:30">label</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:26"><decl pos:start="41:9" pos:end="41:25"><type pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:15">TCGCond</name></type> <name pos:start="41:17" pos:end="41:25">condition</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="46:0"><decl pos:start="43:9" pos:end="43:26"><type pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:20">target_ulong</name></type> <name pos:start="43:22" pos:end="43:26">taddr</name></decl>;</decl_stmt>

<cpp:ifndef pos:start="45:1" pos:end="45:22">#<cpp:directive pos:start="45:2" pos:end="45:7">ifndef</cpp:directive> <name pos:start="45:9" pos:end="45:22">CONFIG_SOFTMMU</name></cpp:ifndef>

        <decl_stmt pos:start="47:9" pos:end="50:0"><decl pos:start="47:9" pos:end="47:34"><type pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:24">tcg_target_ulong</name></type> <name pos:start="47:26" pos:end="47:34">host_addr</name></decl>;</decl_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

        <decl_stmt pos:start="51:9" pos:end="51:21"><decl pos:start="51:9" pos:end="51:20"><type pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:15">uint8_t</name></type> <name pos:start="51:17" pos:end="51:20">tmp8</name></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:23"><decl pos:start="53:9" pos:end="53:22"><type pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:16">uint16_t</name></type> <name pos:start="53:18" pos:end="53:22">tmp16</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:23"><decl pos:start="55:9" pos:end="55:22"><type pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:16">uint32_t</name></type> <name pos:start="55:18" pos:end="55:22">tmp32</name></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="60:0"><decl pos:start="57:9" pos:end="57:22"><type pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:16">uint64_t</name></type> <name pos:start="57:18" pos:end="57:22">tmp64</name></decl>;</decl_stmt>

<cpp:if pos:start="59:1" pos:end="59:29">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:29"><name pos:start="59:5" pos:end="59:23">TCG_TARGET_REG_BITS</name> <operator pos:start="59:25" pos:end="59:26">==</operator> <literal type="number" pos:start="59:28" pos:end="59:29">32</literal></expr></cpp:if>

        <decl_stmt pos:start="61:9" pos:end="64:0"><decl pos:start="61:9" pos:end="61:20"><type pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">uint64_t</name></type> <name pos:start="61:18" pos:end="61:20">v64</name></decl>;</decl_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>



        <comment type="block" pos:start="67:9" pos:end="67:41">/* Skip opcode and size entry. */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:20"><expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:14">tb_ptr</name> <operator pos:start="69:16" pos:end="69:17">+=</operator> <literal type="number" pos:start="69:19" pos:end="69:19">2</literal></expr>;</expr_stmt>



        <switch pos:start="73:9" pos:end="1587:9">switch <condition pos:start="73:16" pos:end="73:20">(<expr pos:start="73:17" pos:end="73:19"><name pos:start="73:17" pos:end="73:19">opc</name></expr>)</condition> <block pos:start="73:22" pos:end="1587:9">{<block_content pos:start="75:9" pos:end="1585:18">

        <case pos:start="75:9" pos:end="75:26">case <expr pos:start="75:14" pos:end="75:25"><name pos:start="75:14" pos:end="75:25">INDEX_op_end</name></expr>:</case>

        <case pos:start="77:9" pos:end="77:26">case <expr pos:start="77:14" pos:end="77:25"><name pos:start="77:14" pos:end="77:25">INDEX_op_nop</name></expr>:</case>

            <break pos:start="79:13" pos:end="79:18">break;</break>

        <case pos:start="81:9" pos:end="81:27">case <expr pos:start="81:14" pos:end="81:26"><name pos:start="81:14" pos:end="81:26">INDEX_op_nop1</name></expr>:</case>

        <case pos:start="83:9" pos:end="83:27">case <expr pos:start="83:14" pos:end="83:26"><name pos:start="83:14" pos:end="83:26">INDEX_op_nop2</name></expr>:</case>

        <case pos:start="85:9" pos:end="85:27">case <expr pos:start="85:14" pos:end="85:26"><name pos:start="85:14" pos:end="85:26">INDEX_op_nop3</name></expr>:</case>

        <case pos:start="87:9" pos:end="87:27">case <expr pos:start="87:14" pos:end="87:26"><name pos:start="87:14" pos:end="87:26">INDEX_op_nopn</name></expr>:</case>

        <case pos:start="89:9" pos:end="89:30">case <expr pos:start="89:14" pos:end="89:29"><name pos:start="89:14" pos:end="89:29">INDEX_op_discard</name></expr>:</case>

            <expr_stmt pos:start="91:13" pos:end="91:19"><expr pos:start="91:13" pos:end="91:18"><call pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:16">TODO</name><argument_list pos:start="91:17" pos:end="91:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="93:13" pos:end="93:18">break;</break>

        <case pos:start="95:9" pos:end="95:32">case <expr pos:start="95:14" pos:end="95:31"><name pos:start="95:14" pos:end="95:31">INDEX_op_set_label</name></expr>:</case>

            <expr_stmt pos:start="97:13" pos:end="97:19"><expr pos:start="97:13" pos:end="97:18"><call pos:start="97:13" pos:end="97:18"><name pos:start="97:13" pos:end="97:16">TODO</name><argument_list pos:start="97:17" pos:end="97:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        <case pos:start="101:9" pos:end="101:27">case <expr pos:start="101:14" pos:end="101:26"><name pos:start="101:14" pos:end="101:26">INDEX_op_call</name></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="106:0"><expr pos:start="103:13" pos:end="103:37"><name pos:start="103:13" pos:end="103:14">t0</name> <operator pos:start="103:16" pos:end="103:16">=</operator> <call pos:start="103:18" pos:end="103:37"><name pos:start="103:18" pos:end="103:28">tci_read_ri</name><argument_list pos:start="103:29" pos:end="103:37">(<argument pos:start="103:30" pos:end="103:36"><expr pos:start="103:30" pos:end="103:36"><operator pos:start="103:30" pos:end="103:30">&amp;</operator><name pos:start="103:31" pos:end="103:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="105:1" pos:end="105:29">#<cpp:directive pos:start="105:2" pos:end="105:3">if</cpp:directive> <expr pos:start="105:5" pos:end="105:29"><name pos:start="105:5" pos:end="105:23">TCG_TARGET_REG_BITS</name> <operator pos:start="105:25" pos:end="105:26">==</operator> <literal type="number" pos:start="105:28" pos:end="105:29">32</literal></expr></cpp:if>

            <expr_stmt pos:start="107:13" pos:end="125:69"><expr pos:start="107:13" pos:end="125:68"><name pos:start="107:13" pos:end="107:17">tmp64</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <operator pos:start="107:21" pos:end="107:21">(</operator><operator pos:start="107:22" pos:end="107:22">(</operator><name pos:start="107:23" pos:end="107:37">helper_function</name><operator pos:start="107:38" pos:end="107:38">)</operator><name pos:start="107:39" pos:end="107:40">t0</name><operator pos:start="107:41" pos:end="107:41">)</operator><operator pos:start="107:42" pos:end="107:42">(</operator><call pos:start="107:43" pos:end="107:66"><name pos:start="107:43" pos:end="107:54">tci_read_reg</name><argument_list pos:start="107:55" pos:end="107:66">(<argument pos:start="107:56" pos:end="107:65"><expr pos:start="107:56" pos:end="107:65"><name pos:start="107:56" pos:end="107:65">TCG_REG_R0</name></expr></argument>)</argument_list></call><operator pos:start="107:67" pos:end="107:67">,</operator>

                                          <call pos:start="109:43" pos:end="109:66"><name pos:start="109:43" pos:end="109:54">tci_read_reg</name><argument_list pos:start="109:55" pos:end="109:66">(<argument pos:start="109:56" pos:end="109:65"><expr pos:start="109:56" pos:end="109:65"><name pos:start="109:56" pos:end="109:65">TCG_REG_R1</name></expr></argument>)</argument_list></call><operator pos:start="109:67" pos:end="109:67">,</operator>

                                          <call pos:start="111:43" pos:end="111:66"><name pos:start="111:43" pos:end="111:54">tci_read_reg</name><argument_list pos:start="111:55" pos:end="111:66">(<argument pos:start="111:56" pos:end="111:65"><expr pos:start="111:56" pos:end="111:65"><name pos:start="111:56" pos:end="111:65">TCG_REG_R2</name></expr></argument>)</argument_list></call><operator pos:start="111:67" pos:end="111:67">,</operator>

                                          <call pos:start="113:43" pos:end="113:66"><name pos:start="113:43" pos:end="113:54">tci_read_reg</name><argument_list pos:start="113:55" pos:end="113:66">(<argument pos:start="113:56" pos:end="113:65"><expr pos:start="113:56" pos:end="113:65"><name pos:start="113:56" pos:end="113:65">TCG_REG_R3</name></expr></argument>)</argument_list></call><operator pos:start="113:67" pos:end="113:67">,</operator>

                                          <call pos:start="115:43" pos:end="115:66"><name pos:start="115:43" pos:end="115:54">tci_read_reg</name><argument_list pos:start="115:55" pos:end="115:66">(<argument pos:start="115:56" pos:end="115:65"><expr pos:start="115:56" pos:end="115:65"><name pos:start="115:56" pos:end="115:65">TCG_REG_R5</name></expr></argument>)</argument_list></call><operator pos:start="115:67" pos:end="115:67">,</operator>

                                          <call pos:start="117:43" pos:end="117:66"><name pos:start="117:43" pos:end="117:54">tci_read_reg</name><argument_list pos:start="117:55" pos:end="117:66">(<argument pos:start="117:56" pos:end="117:65"><expr pos:start="117:56" pos:end="117:65"><name pos:start="117:56" pos:end="117:65">TCG_REG_R6</name></expr></argument>)</argument_list></call><operator pos:start="117:67" pos:end="117:67">,</operator>

                                          <call pos:start="119:43" pos:end="119:66"><name pos:start="119:43" pos:end="119:54">tci_read_reg</name><argument_list pos:start="119:55" pos:end="119:66">(<argument pos:start="119:56" pos:end="119:65"><expr pos:start="119:56" pos:end="119:65"><name pos:start="119:56" pos:end="119:65">TCG_REG_R7</name></expr></argument>)</argument_list></call><operator pos:start="119:67" pos:end="119:67">,</operator>

                                          <call pos:start="121:43" pos:end="121:66"><name pos:start="121:43" pos:end="121:54">tci_read_reg</name><argument_list pos:start="121:55" pos:end="121:66">(<argument pos:start="121:56" pos:end="121:65"><expr pos:start="121:56" pos:end="121:65"><name pos:start="121:56" pos:end="121:65">TCG_REG_R8</name></expr></argument>)</argument_list></call><operator pos:start="121:67" pos:end="121:67">,</operator>

                                          <call pos:start="123:43" pos:end="123:66"><name pos:start="123:43" pos:end="123:54">tci_read_reg</name><argument_list pos:start="123:55" pos:end="123:66">(<argument pos:start="123:56" pos:end="123:65"><expr pos:start="123:56" pos:end="123:65"><name pos:start="123:56" pos:end="123:65">TCG_REG_R9</name></expr></argument>)</argument_list></call><operator pos:start="123:67" pos:end="123:67">,</operator>

                                          <call pos:start="125:43" pos:end="125:67"><name pos:start="125:43" pos:end="125:54">tci_read_reg</name><argument_list pos:start="125:55" pos:end="125:67">(<argument pos:start="125:56" pos:end="125:66"><expr pos:start="125:56" pos:end="125:66"><name pos:start="125:56" pos:end="125:66">TCG_REG_R10</name></expr></argument>)</argument_list></call><operator pos:start="125:68" pos:end="125:68">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:45"><expr pos:start="127:13" pos:end="127:44"><call pos:start="127:13" pos:end="127:44"><name pos:start="127:13" pos:end="127:25">tci_write_reg</name><argument_list pos:start="127:26" pos:end="127:44">(<argument pos:start="127:27" pos:end="127:36"><expr pos:start="127:27" pos:end="127:36"><name pos:start="127:27" pos:end="127:36">TCG_REG_R0</name></expr></argument>, <argument pos:start="127:39" pos:end="127:43"><expr pos:start="127:39" pos:end="127:43"><name pos:start="127:39" pos:end="127:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="132:0"><expr pos:start="129:13" pos:end="129:50"><call pos:start="129:13" pos:end="129:50"><name pos:start="129:13" pos:end="129:25">tci_write_reg</name><argument_list pos:start="129:26" pos:end="129:50">(<argument pos:start="129:27" pos:end="129:36"><expr pos:start="129:27" pos:end="129:36"><name pos:start="129:27" pos:end="129:36">TCG_REG_R1</name></expr></argument>, <argument pos:start="129:39" pos:end="129:49"><expr pos:start="129:39" pos:end="129:49"><name pos:start="129:39" pos:end="129:43">tmp64</name> <operator pos:start="129:45" pos:end="129:46">&gt;&gt;</operator> <literal type="number" pos:start="129:48" pos:end="129:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="131:1" pos:end="131:5">#<cpp:directive pos:start="131:2" pos:end="131:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="133:13" pos:end="141:68"><expr pos:start="133:13" pos:end="141:67"><name pos:start="133:13" pos:end="133:17">tmp64</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <operator pos:start="133:21" pos:end="133:21">(</operator><operator pos:start="133:22" pos:end="133:22">(</operator><name pos:start="133:23" pos:end="133:37">helper_function</name><operator pos:start="133:38" pos:end="133:38">)</operator><name pos:start="133:39" pos:end="133:40">t0</name><operator pos:start="133:41" pos:end="133:41">)</operator><operator pos:start="133:42" pos:end="133:42">(</operator><call pos:start="133:43" pos:end="133:66"><name pos:start="133:43" pos:end="133:54">tci_read_reg</name><argument_list pos:start="133:55" pos:end="133:66">(<argument pos:start="133:56" pos:end="133:65"><expr pos:start="133:56" pos:end="133:65"><name pos:start="133:56" pos:end="133:65">TCG_REG_R0</name></expr></argument>)</argument_list></call><operator pos:start="133:67" pos:end="133:67">,</operator>

                                          <call pos:start="135:43" pos:end="135:66"><name pos:start="135:43" pos:end="135:54">tci_read_reg</name><argument_list pos:start="135:55" pos:end="135:66">(<argument pos:start="135:56" pos:end="135:65"><expr pos:start="135:56" pos:end="135:65"><name pos:start="135:56" pos:end="135:65">TCG_REG_R1</name></expr></argument>)</argument_list></call><operator pos:start="135:67" pos:end="135:67">,</operator>

                                          <call pos:start="137:43" pos:end="137:66"><name pos:start="137:43" pos:end="137:54">tci_read_reg</name><argument_list pos:start="137:55" pos:end="137:66">(<argument pos:start="137:56" pos:end="137:65"><expr pos:start="137:56" pos:end="137:65"><name pos:start="137:56" pos:end="137:65">TCG_REG_R2</name></expr></argument>)</argument_list></call><operator pos:start="137:67" pos:end="137:67">,</operator>

                                          <call pos:start="139:43" pos:end="139:66"><name pos:start="139:43" pos:end="139:54">tci_read_reg</name><argument_list pos:start="139:55" pos:end="139:66">(<argument pos:start="139:56" pos:end="139:65"><expr pos:start="139:56" pos:end="139:65"><name pos:start="139:56" pos:end="139:65">TCG_REG_R3</name></expr></argument>)</argument_list></call><operator pos:start="139:67" pos:end="139:67">,</operator>

                                          <call pos:start="141:43" pos:end="141:66"><name pos:start="141:43" pos:end="141:54">tci_read_reg</name><argument_list pos:start="141:55" pos:end="141:66">(<argument pos:start="141:56" pos:end="141:65"><expr pos:start="141:56" pos:end="141:65"><name pos:start="141:56" pos:end="141:65">TCG_REG_R5</name></expr></argument>)</argument_list></call><operator pos:start="141:67" pos:end="141:67">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="146:0"><expr pos:start="143:13" pos:end="143:44"><call pos:start="143:13" pos:end="143:44"><name pos:start="143:13" pos:end="143:25">tci_write_reg</name><argument_list pos:start="143:26" pos:end="143:44">(<argument pos:start="143:27" pos:end="143:36"><expr pos:start="143:27" pos:end="143:36"><name pos:start="143:27" pos:end="143:36">TCG_REG_R0</name></expr></argument>, <argument pos:start="143:39" pos:end="143:43"><expr pos:start="143:39" pos:end="143:43"><name pos:start="143:39" pos:end="143:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="145:1" pos:end="145:6">#<cpp:directive pos:start="145:2" pos:end="145:6">endif</cpp:directive></cpp:endif>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        <case pos:start="149:9" pos:end="149:25">case <expr pos:start="149:14" pos:end="149:24"><name pos:start="149:14" pos:end="149:24">INDEX_op_br</name></expr>:</case>

            <expr_stmt pos:start="151:13" pos:end="151:44"><expr pos:start="151:13" pos:end="151:43"><name pos:start="151:13" pos:end="151:17">label</name> <operator pos:start="151:19" pos:end="151:19">=</operator> <call pos:start="151:21" pos:end="151:43"><name pos:start="151:21" pos:end="151:34">tci_read_label</name><argument_list pos:start="151:35" pos:end="151:43">(<argument pos:start="151:36" pos:end="151:42"><expr pos:start="151:36" pos:end="151:42"><operator pos:start="151:36" pos:end="151:36">&amp;</operator><name pos:start="151:37" pos:end="151:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:53"><expr pos:start="153:13" pos:end="153:52"><call pos:start="153:13" pos:end="153:52"><name pos:start="153:13" pos:end="153:18">assert</name><argument_list pos:start="153:19" pos:end="153:52">(<argument pos:start="153:20" pos:end="153:51"><expr pos:start="153:20" pos:end="153:51"><name pos:start="153:20" pos:end="153:25">tb_ptr</name> <operator pos:start="153:27" pos:end="153:28">==</operator> <name pos:start="153:30" pos:end="153:41">old_code_ptr</name> <operator pos:start="153:43" pos:end="153:43">+</operator> <name pos:start="153:45" pos:end="153:51">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:38"><expr pos:start="155:13" pos:end="155:37"><name pos:start="155:13" pos:end="155:18">tb_ptr</name> <operator pos:start="155:20" pos:end="155:20">=</operator> <operator pos:start="155:22" pos:end="155:22">(</operator><name pos:start="155:23" pos:end="155:29">uint8_t</name> <operator pos:start="155:31" pos:end="155:31">*</operator><operator pos:start="155:32" pos:end="155:32">)</operator><name pos:start="155:33" pos:end="155:37">label</name></expr>;</expr_stmt>

            <continue pos:start="157:13" pos:end="157:21">continue;</continue>

        <case pos:start="159:9" pos:end="159:34">case <expr pos:start="159:14" pos:end="159:33"><name pos:start="159:14" pos:end="159:33">INDEX_op_setcond_i32</name></expr>:</case>

            <expr_stmt pos:start="161:13" pos:end="161:27"><expr pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:14">t0</name> <operator pos:start="161:16" pos:end="161:16">=</operator> <operator pos:start="161:18" pos:end="161:18">*</operator><name pos:start="161:19" pos:end="161:24">tb_ptr</name><operator pos:start="161:25" pos:end="161:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:39"><expr pos:start="163:13" pos:end="163:38"><name pos:start="163:13" pos:end="163:14">t1</name> <operator pos:start="163:16" pos:end="163:16">=</operator> <call pos:start="163:18" pos:end="163:38"><name pos:start="163:18" pos:end="163:29">tci_read_r32</name><argument_list pos:start="163:30" pos:end="163:38">(<argument pos:start="163:31" pos:end="163:37"><expr pos:start="163:31" pos:end="163:37"><operator pos:start="163:31" pos:end="163:31">&amp;</operator><name pos:start="163:32" pos:end="163:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:40"><expr pos:start="165:13" pos:end="165:39"><name pos:start="165:13" pos:end="165:14">t2</name> <operator pos:start="165:16" pos:end="165:16">=</operator> <call pos:start="165:18" pos:end="165:39"><name pos:start="165:18" pos:end="165:30">tci_read_ri32</name><argument_list pos:start="165:31" pos:end="165:39">(<argument pos:start="165:32" pos:end="165:38"><expr pos:start="165:32" pos:end="165:38"><operator pos:start="165:32" pos:end="165:32">&amp;</operator><name pos:start="165:33" pos:end="165:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:34"><expr pos:start="167:13" pos:end="167:33"><name pos:start="167:13" pos:end="167:21">condition</name> <operator pos:start="167:23" pos:end="167:23">=</operator> <operator pos:start="167:25" pos:end="167:25">*</operator><name pos:start="167:26" pos:end="167:31">tb_ptr</name><operator pos:start="167:32" pos:end="167:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:66"><expr pos:start="169:13" pos:end="169:65"><call pos:start="169:13" pos:end="169:65"><name pos:start="169:13" pos:end="169:27">tci_write_reg32</name><argument_list pos:start="169:28" pos:end="169:65">(<argument pos:start="169:29" pos:end="169:30"><expr pos:start="169:29" pos:end="169:30"><name pos:start="169:29" pos:end="169:30">t0</name></expr></argument>, <argument pos:start="169:33" pos:end="169:64"><expr pos:start="169:33" pos:end="169:64"><call pos:start="169:33" pos:end="169:64"><name pos:start="169:33" pos:end="169:45">tci_compare32</name><argument_list pos:start="169:46" pos:end="169:64">(<argument pos:start="169:47" pos:end="169:48"><expr pos:start="169:47" pos:end="169:48"><name pos:start="169:47" pos:end="169:48">t1</name></expr></argument>, <argument pos:start="169:51" pos:end="169:52"><expr pos:start="169:51" pos:end="169:52"><name pos:start="169:51" pos:end="169:52">t2</name></expr></argument>, <argument pos:start="169:55" pos:end="169:63"><expr pos:start="169:55" pos:end="169:63"><name pos:start="169:55" pos:end="169:63">condition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="171:13" pos:end="174:0">break;</break>

<cpp:if pos:start="173:1" pos:end="173:29">#<cpp:directive pos:start="173:2" pos:end="173:3">if</cpp:directive> <expr pos:start="173:5" pos:end="173:29"><name pos:start="173:5" pos:end="173:23">TCG_TARGET_REG_BITS</name> <operator pos:start="173:25" pos:end="173:26">==</operator> <literal type="number" pos:start="173:28" pos:end="173:29">32</literal></expr></cpp:if>

        <case pos:start="175:9" pos:end="175:35">case <expr pos:start="175:14" pos:end="175:34"><name pos:start="175:14" pos:end="175:34">INDEX_op_setcond2_i32</name></expr>:</case>

            <expr_stmt pos:start="177:13" pos:end="177:27"><expr pos:start="177:13" pos:end="177:26"><name pos:start="177:13" pos:end="177:14">t0</name> <operator pos:start="177:16" pos:end="177:16">=</operator> <operator pos:start="177:18" pos:end="177:18">*</operator><name pos:start="177:19" pos:end="177:24">tb_ptr</name><operator pos:start="177:25" pos:end="177:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:42"><expr pos:start="179:13" pos:end="179:41"><name pos:start="179:13" pos:end="179:17">tmp64</name> <operator pos:start="179:19" pos:end="179:19">=</operator> <call pos:start="179:21" pos:end="179:41"><name pos:start="179:21" pos:end="179:32">tci_read_r64</name><argument_list pos:start="179:33" pos:end="179:41">(<argument pos:start="179:34" pos:end="179:40"><expr pos:start="179:34" pos:end="179:40"><operator pos:start="179:34" pos:end="179:34">&amp;</operator><name pos:start="179:35" pos:end="179:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:41"><expr pos:start="181:13" pos:end="181:40"><name pos:start="181:13" pos:end="181:15">v64</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <call pos:start="181:19" pos:end="181:40"><name pos:start="181:19" pos:end="181:31">tci_read_ri64</name><argument_list pos:start="181:32" pos:end="181:40">(<argument pos:start="181:33" pos:end="181:39"><expr pos:start="181:33" pos:end="181:39"><operator pos:start="181:33" pos:end="181:33">&amp;</operator><name pos:start="181:34" pos:end="181:39">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:34"><expr pos:start="183:13" pos:end="183:33"><name pos:start="183:13" pos:end="183:21">condition</name> <operator pos:start="183:23" pos:end="183:23">=</operator> <operator pos:start="183:25" pos:end="183:25">*</operator><name pos:start="183:26" pos:end="183:31">tb_ptr</name><operator pos:start="183:32" pos:end="183:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:70"><expr pos:start="185:13" pos:end="185:69"><call pos:start="185:13" pos:end="185:69"><name pos:start="185:13" pos:end="185:27">tci_write_reg32</name><argument_list pos:start="185:28" pos:end="185:69">(<argument pos:start="185:29" pos:end="185:30"><expr pos:start="185:29" pos:end="185:30"><name pos:start="185:29" pos:end="185:30">t0</name></expr></argument>, <argument pos:start="185:33" pos:end="185:68"><expr pos:start="185:33" pos:end="185:68"><call pos:start="185:33" pos:end="185:68"><name pos:start="185:33" pos:end="185:45">tci_compare64</name><argument_list pos:start="185:46" pos:end="185:68">(<argument pos:start="185:47" pos:end="185:51"><expr pos:start="185:47" pos:end="185:51"><name pos:start="185:47" pos:end="185:51">tmp64</name></expr></argument>, <argument pos:start="185:54" pos:end="185:56"><expr pos:start="185:54" pos:end="185:56"><name pos:start="185:54" pos:end="185:56">v64</name></expr></argument>, <argument pos:start="185:59" pos:end="185:67"><expr pos:start="185:59" pos:end="185:67"><name pos:start="185:59" pos:end="185:67">condition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="187:13" pos:end="190:0">break;</break>

<cpp:elif pos:start="189:1" pos:end="189:31">#<cpp:directive pos:start="189:2" pos:end="189:5">elif</cpp:directive> <expr pos:start="189:7" pos:end="189:31"><name pos:start="189:7" pos:end="189:25">TCG_TARGET_REG_BITS</name> <operator pos:start="189:27" pos:end="189:28">==</operator> <literal type="number" pos:start="189:30" pos:end="189:31">64</literal></expr></cpp:elif>

        <case pos:start="191:9" pos:end="191:34">case <expr pos:start="191:14" pos:end="191:33"><name pos:start="191:14" pos:end="191:33">INDEX_op_setcond_i64</name></expr>:</case>

            <expr_stmt pos:start="193:13" pos:end="193:27"><expr pos:start="193:13" pos:end="193:26"><name pos:start="193:13" pos:end="193:14">t0</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <operator pos:start="193:18" pos:end="193:18">*</operator><name pos:start="193:19" pos:end="193:24">tb_ptr</name><operator pos:start="193:25" pos:end="193:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:39"><expr pos:start="195:13" pos:end="195:38"><name pos:start="195:13" pos:end="195:14">t1</name> <operator pos:start="195:16" pos:end="195:16">=</operator> <call pos:start="195:18" pos:end="195:38"><name pos:start="195:18" pos:end="195:29">tci_read_r64</name><argument_list pos:start="195:30" pos:end="195:38">(<argument pos:start="195:31" pos:end="195:37"><expr pos:start="195:31" pos:end="195:37"><operator pos:start="195:31" pos:end="195:31">&amp;</operator><name pos:start="195:32" pos:end="195:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:40"><expr pos:start="197:13" pos:end="197:39"><name pos:start="197:13" pos:end="197:14">t2</name> <operator pos:start="197:16" pos:end="197:16">=</operator> <call pos:start="197:18" pos:end="197:39"><name pos:start="197:18" pos:end="197:30">tci_read_ri64</name><argument_list pos:start="197:31" pos:end="197:39">(<argument pos:start="197:32" pos:end="197:38"><expr pos:start="197:32" pos:end="197:38"><operator pos:start="197:32" pos:end="197:32">&amp;</operator><name pos:start="197:33" pos:end="197:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:34"><expr pos:start="199:13" pos:end="199:33"><name pos:start="199:13" pos:end="199:21">condition</name> <operator pos:start="199:23" pos:end="199:23">=</operator> <operator pos:start="199:25" pos:end="199:25">*</operator><name pos:start="199:26" pos:end="199:31">tb_ptr</name><operator pos:start="199:32" pos:end="199:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:66"><expr pos:start="201:13" pos:end="201:65"><call pos:start="201:13" pos:end="201:65"><name pos:start="201:13" pos:end="201:27">tci_write_reg64</name><argument_list pos:start="201:28" pos:end="201:65">(<argument pos:start="201:29" pos:end="201:30"><expr pos:start="201:29" pos:end="201:30"><name pos:start="201:29" pos:end="201:30">t0</name></expr></argument>, <argument pos:start="201:33" pos:end="201:64"><expr pos:start="201:33" pos:end="201:64"><call pos:start="201:33" pos:end="201:64"><name pos:start="201:33" pos:end="201:45">tci_compare64</name><argument_list pos:start="201:46" pos:end="201:64">(<argument pos:start="201:47" pos:end="201:48"><expr pos:start="201:47" pos:end="201:48"><name pos:start="201:47" pos:end="201:48">t1</name></expr></argument>, <argument pos:start="201:51" pos:end="201:52"><expr pos:start="201:51" pos:end="201:52"><name pos:start="201:51" pos:end="201:52">t2</name></expr></argument>, <argument pos:start="201:55" pos:end="201:63"><expr pos:start="201:55" pos:end="201:63"><name pos:start="201:55" pos:end="201:63">condition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="203:13" pos:end="206:0">break;</break>

<cpp:endif pos:start="205:1" pos:end="205:6">#<cpp:directive pos:start="205:2" pos:end="205:6">endif</cpp:directive></cpp:endif>

        <case pos:start="207:9" pos:end="207:30">case <expr pos:start="207:14" pos:end="207:29"><name pos:start="207:14" pos:end="207:29">INDEX_op_mov_i32</name></expr>:</case>

            <expr_stmt pos:start="209:13" pos:end="209:27"><expr pos:start="209:13" pos:end="209:26"><name pos:start="209:13" pos:end="209:14">t0</name> <operator pos:start="209:16" pos:end="209:16">=</operator> <operator pos:start="209:18" pos:end="209:18">*</operator><name pos:start="209:19" pos:end="209:24">tb_ptr</name><operator pos:start="209:25" pos:end="209:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:39"><expr pos:start="211:13" pos:end="211:38"><name pos:start="211:13" pos:end="211:14">t1</name> <operator pos:start="211:16" pos:end="211:16">=</operator> <call pos:start="211:18" pos:end="211:38"><name pos:start="211:18" pos:end="211:29">tci_read_r32</name><argument_list pos:start="211:30" pos:end="211:38">(<argument pos:start="211:31" pos:end="211:37"><expr pos:start="211:31" pos:end="211:37"><operator pos:start="211:31" pos:end="211:31">&amp;</operator><name pos:start="211:32" pos:end="211:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:36"><expr pos:start="213:13" pos:end="213:35"><call pos:start="213:13" pos:end="213:35"><name pos:start="213:13" pos:end="213:27">tci_write_reg32</name><argument_list pos:start="213:28" pos:end="213:35">(<argument pos:start="213:29" pos:end="213:30"><expr pos:start="213:29" pos:end="213:30"><name pos:start="213:29" pos:end="213:30">t0</name></expr></argument>, <argument pos:start="213:33" pos:end="213:34"><expr pos:start="213:33" pos:end="213:34"><name pos:start="213:33" pos:end="213:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="215:13" pos:end="215:18">break;</break>

        <case pos:start="217:9" pos:end="217:31">case <expr pos:start="217:14" pos:end="217:30"><name pos:start="217:14" pos:end="217:30">INDEX_op_movi_i32</name></expr>:</case>

            <expr_stmt pos:start="219:13" pos:end="219:27"><expr pos:start="219:13" pos:end="219:26"><name pos:start="219:13" pos:end="219:14">t0</name> <operator pos:start="219:16" pos:end="219:16">=</operator> <operator pos:start="219:18" pos:end="219:18">*</operator><name pos:start="219:19" pos:end="219:24">tb_ptr</name><operator pos:start="219:25" pos:end="219:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:39"><expr pos:start="221:13" pos:end="221:38"><name pos:start="221:13" pos:end="221:14">t1</name> <operator pos:start="221:16" pos:end="221:16">=</operator> <call pos:start="221:18" pos:end="221:38"><name pos:start="221:18" pos:end="221:29">tci_read_i32</name><argument_list pos:start="221:30" pos:end="221:38">(<argument pos:start="221:31" pos:end="221:37"><expr pos:start="221:31" pos:end="221:37"><operator pos:start="221:31" pos:end="221:31">&amp;</operator><name pos:start="221:32" pos:end="221:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:36"><expr pos:start="223:13" pos:end="223:35"><call pos:start="223:13" pos:end="223:35"><name pos:start="223:13" pos:end="223:27">tci_write_reg32</name><argument_list pos:start="223:28" pos:end="223:35">(<argument pos:start="223:29" pos:end="223:30"><expr pos:start="223:29" pos:end="223:30"><name pos:start="223:29" pos:end="223:30">t0</name></expr></argument>, <argument pos:start="223:33" pos:end="223:34"><expr pos:start="223:33" pos:end="223:34"><name pos:start="223:33" pos:end="223:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="225:13" pos:end="225:18">break;</break>



            <comment type="block" pos:start="229:13" pos:end="229:49">/* Load/store operations (32 bit). */</comment>



        <case pos:start="233:9" pos:end="233:31">case <expr pos:start="233:14" pos:end="233:30"><name pos:start="233:14" pos:end="233:30">INDEX_op_ld8u_i32</name></expr>:</case>

            <expr_stmt pos:start="235:13" pos:end="235:27"><expr pos:start="235:13" pos:end="235:26"><name pos:start="235:13" pos:end="235:14">t0</name> <operator pos:start="235:16" pos:end="235:16">=</operator> <operator pos:start="235:18" pos:end="235:18">*</operator><name pos:start="235:19" pos:end="235:24">tb_ptr</name><operator pos:start="235:25" pos:end="235:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:37"><expr pos:start="237:13" pos:end="237:36"><name pos:start="237:13" pos:end="237:14">t1</name> <operator pos:start="237:16" pos:end="237:16">=</operator> <call pos:start="237:18" pos:end="237:36"><name pos:start="237:18" pos:end="237:27">tci_read_r</name><argument_list pos:start="237:28" pos:end="237:36">(<argument pos:start="237:29" pos:end="237:35"><expr pos:start="237:29" pos:end="237:35"><operator pos:start="237:29" pos:end="237:29">&amp;</operator><name pos:start="237:30" pos:end="237:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:39"><expr pos:start="239:13" pos:end="239:38"><name pos:start="239:13" pos:end="239:14">t2</name> <operator pos:start="239:16" pos:end="239:16">=</operator> <call pos:start="239:18" pos:end="239:38"><name pos:start="239:18" pos:end="239:29">tci_read_s32</name><argument_list pos:start="239:30" pos:end="239:38">(<argument pos:start="239:31" pos:end="239:37"><expr pos:start="239:31" pos:end="239:37"><operator pos:start="239:31" pos:end="239:31">&amp;</operator><name pos:start="239:32" pos:end="239:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:54"><expr pos:start="241:13" pos:end="241:53"><call pos:start="241:13" pos:end="241:53"><name pos:start="241:13" pos:end="241:26">tci_write_reg8</name><argument_list pos:start="241:27" pos:end="241:53">(<argument pos:start="241:28" pos:end="241:29"><expr pos:start="241:28" pos:end="241:29"><name pos:start="241:28" pos:end="241:29">t0</name></expr></argument>, <argument pos:start="241:32" pos:end="241:52"><expr pos:start="241:32" pos:end="241:52"><operator pos:start="241:32" pos:end="241:32">*</operator><operator pos:start="241:33" pos:end="241:33">(</operator><name pos:start="241:34" pos:end="241:40">uint8_t</name> <operator pos:start="241:42" pos:end="241:42">*</operator><operator pos:start="241:43" pos:end="241:43">)</operator><operator pos:start="241:44" pos:end="241:44">(</operator><name pos:start="241:45" pos:end="241:46">t1</name> <operator pos:start="241:48" pos:end="241:48">+</operator> <name pos:start="241:50" pos:end="241:51">t2</name><operator pos:start="241:52" pos:end="241:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="243:13" pos:end="243:18">break;</break>

        <case pos:start="245:9" pos:end="245:31">case <expr pos:start="245:14" pos:end="245:30"><name pos:start="245:14" pos:end="245:30">INDEX_op_ld8s_i32</name></expr>:</case>

        <case pos:start="247:9" pos:end="247:32">case <expr pos:start="247:14" pos:end="247:31"><name pos:start="247:14" pos:end="247:31">INDEX_op_ld16u_i32</name></expr>:</case>

            <expr_stmt pos:start="249:13" pos:end="249:19"><expr pos:start="249:13" pos:end="249:18"><call pos:start="249:13" pos:end="249:18"><name pos:start="249:13" pos:end="249:16">TODO</name><argument_list pos:start="249:17" pos:end="249:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="251:13" pos:end="251:18">break;</break>

        <case pos:start="253:9" pos:end="253:32">case <expr pos:start="253:14" pos:end="253:31"><name pos:start="253:14" pos:end="253:31">INDEX_op_ld16s_i32</name></expr>:</case>

            <expr_stmt pos:start="255:13" pos:end="255:19"><expr pos:start="255:13" pos:end="255:18"><call pos:start="255:13" pos:end="255:18"><name pos:start="255:13" pos:end="255:16">TODO</name><argument_list pos:start="255:17" pos:end="255:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="257:13" pos:end="257:18">break;</break>

        <case pos:start="259:9" pos:end="259:29">case <expr pos:start="259:14" pos:end="259:28"><name pos:start="259:14" pos:end="259:28">INDEX_op_ld_i32</name></expr>:</case>

            <expr_stmt pos:start="261:13" pos:end="261:27"><expr pos:start="261:13" pos:end="261:26"><name pos:start="261:13" pos:end="261:14">t0</name> <operator pos:start="261:16" pos:end="261:16">=</operator> <operator pos:start="261:18" pos:end="261:18">*</operator><name pos:start="261:19" pos:end="261:24">tb_ptr</name><operator pos:start="261:25" pos:end="261:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:37"><expr pos:start="263:13" pos:end="263:36"><name pos:start="263:13" pos:end="263:14">t1</name> <operator pos:start="263:16" pos:end="263:16">=</operator> <call pos:start="263:18" pos:end="263:36"><name pos:start="263:18" pos:end="263:27">tci_read_r</name><argument_list pos:start="263:28" pos:end="263:36">(<argument pos:start="263:29" pos:end="263:35"><expr pos:start="263:29" pos:end="263:35"><operator pos:start="263:29" pos:end="263:29">&amp;</operator><name pos:start="263:30" pos:end="263:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:39"><expr pos:start="265:13" pos:end="265:38"><name pos:start="265:13" pos:end="265:14">t2</name> <operator pos:start="265:16" pos:end="265:16">=</operator> <call pos:start="265:18" pos:end="265:38"><name pos:start="265:18" pos:end="265:29">tci_read_s32</name><argument_list pos:start="265:30" pos:end="265:38">(<argument pos:start="265:31" pos:end="265:37"><expr pos:start="265:31" pos:end="265:37"><operator pos:start="265:31" pos:end="265:31">&amp;</operator><name pos:start="265:32" pos:end="265:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:56"><expr pos:start="267:13" pos:end="267:55"><call pos:start="267:13" pos:end="267:55"><name pos:start="267:13" pos:end="267:27">tci_write_reg32</name><argument_list pos:start="267:28" pos:end="267:55">(<argument pos:start="267:29" pos:end="267:30"><expr pos:start="267:29" pos:end="267:30"><name pos:start="267:29" pos:end="267:30">t0</name></expr></argument>, <argument pos:start="267:33" pos:end="267:54"><expr pos:start="267:33" pos:end="267:54"><operator pos:start="267:33" pos:end="267:33">*</operator><operator pos:start="267:34" pos:end="267:34">(</operator><name pos:start="267:35" pos:end="267:42">uint32_t</name> <operator pos:start="267:44" pos:end="267:44">*</operator><operator pos:start="267:45" pos:end="267:45">)</operator><operator pos:start="267:46" pos:end="267:46">(</operator><name pos:start="267:47" pos:end="267:48">t1</name> <operator pos:start="267:50" pos:end="267:50">+</operator> <name pos:start="267:52" pos:end="267:53">t2</name><operator pos:start="267:54" pos:end="267:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="269:13" pos:end="269:18">break;</break>

        <case pos:start="271:9" pos:end="271:30">case <expr pos:start="271:14" pos:end="271:29"><name pos:start="271:14" pos:end="271:29">INDEX_op_st8_i32</name></expr>:</case>

            <expr_stmt pos:start="273:13" pos:end="273:38"><expr pos:start="273:13" pos:end="273:37"><name pos:start="273:13" pos:end="273:14">t0</name> <operator pos:start="273:16" pos:end="273:16">=</operator> <call pos:start="273:18" pos:end="273:37"><name pos:start="273:18" pos:end="273:28">tci_read_r8</name><argument_list pos:start="273:29" pos:end="273:37">(<argument pos:start="273:30" pos:end="273:36"><expr pos:start="273:30" pos:end="273:36"><operator pos:start="273:30" pos:end="273:30">&amp;</operator><name pos:start="273:31" pos:end="273:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:37"><expr pos:start="275:13" pos:end="275:36"><name pos:start="275:13" pos:end="275:14">t1</name> <operator pos:start="275:16" pos:end="275:16">=</operator> <call pos:start="275:18" pos:end="275:36"><name pos:start="275:18" pos:end="275:27">tci_read_r</name><argument_list pos:start="275:28" pos:end="275:36">(<argument pos:start="275:29" pos:end="275:35"><expr pos:start="275:29" pos:end="275:35"><operator pos:start="275:29" pos:end="275:29">&amp;</operator><name pos:start="275:30" pos:end="275:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:39"><expr pos:start="277:13" pos:end="277:38"><name pos:start="277:13" pos:end="277:14">t2</name> <operator pos:start="277:16" pos:end="277:16">=</operator> <call pos:start="277:18" pos:end="277:38"><name pos:start="277:18" pos:end="277:29">tci_read_s32</name><argument_list pos:start="277:30" pos:end="277:38">(<argument pos:start="277:31" pos:end="277:37"><expr pos:start="277:31" pos:end="277:37"><operator pos:start="277:31" pos:end="277:31">&amp;</operator><name pos:start="277:32" pos:end="277:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:39"><expr pos:start="279:13" pos:end="279:38"><operator pos:start="279:13" pos:end="279:13">*</operator><operator pos:start="279:14" pos:end="279:14">(</operator><name pos:start="279:15" pos:end="279:21">uint8_t</name> <operator pos:start="279:23" pos:end="279:23">*</operator><operator pos:start="279:24" pos:end="279:24">)</operator><operator pos:start="279:25" pos:end="279:25">(</operator><name pos:start="279:26" pos:end="279:27">t1</name> <operator pos:start="279:29" pos:end="279:29">+</operator> <name pos:start="279:31" pos:end="279:32">t2</name><operator pos:start="279:33" pos:end="279:33">)</operator> <operator pos:start="279:35" pos:end="279:35">=</operator> <name pos:start="279:37" pos:end="279:38">t0</name></expr>;</expr_stmt>

            <break pos:start="281:13" pos:end="281:18">break;</break>

        <case pos:start="283:9" pos:end="283:31">case <expr pos:start="283:14" pos:end="283:30"><name pos:start="283:14" pos:end="283:30">INDEX_op_st16_i32</name></expr>:</case>

            <expr_stmt pos:start="285:13" pos:end="285:39"><expr pos:start="285:13" pos:end="285:38"><name pos:start="285:13" pos:end="285:14">t0</name> <operator pos:start="285:16" pos:end="285:16">=</operator> <call pos:start="285:18" pos:end="285:38"><name pos:start="285:18" pos:end="285:29">tci_read_r16</name><argument_list pos:start="285:30" pos:end="285:38">(<argument pos:start="285:31" pos:end="285:37"><expr pos:start="285:31" pos:end="285:37"><operator pos:start="285:31" pos:end="285:31">&amp;</operator><name pos:start="285:32" pos:end="285:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="287:13" pos:end="287:37"><expr pos:start="287:13" pos:end="287:36"><name pos:start="287:13" pos:end="287:14">t1</name> <operator pos:start="287:16" pos:end="287:16">=</operator> <call pos:start="287:18" pos:end="287:36"><name pos:start="287:18" pos:end="287:27">tci_read_r</name><argument_list pos:start="287:28" pos:end="287:36">(<argument pos:start="287:29" pos:end="287:35"><expr pos:start="287:29" pos:end="287:35"><operator pos:start="287:29" pos:end="287:29">&amp;</operator><name pos:start="287:30" pos:end="287:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:39"><expr pos:start="289:13" pos:end="289:38"><name pos:start="289:13" pos:end="289:14">t2</name> <operator pos:start="289:16" pos:end="289:16">=</operator> <call pos:start="289:18" pos:end="289:38"><name pos:start="289:18" pos:end="289:29">tci_read_s32</name><argument_list pos:start="289:30" pos:end="289:38">(<argument pos:start="289:31" pos:end="289:37"><expr pos:start="289:31" pos:end="289:37"><operator pos:start="289:31" pos:end="289:31">&amp;</operator><name pos:start="289:32" pos:end="289:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="291:13" pos:end="291:40"><expr pos:start="291:13" pos:end="291:39"><operator pos:start="291:13" pos:end="291:13">*</operator><operator pos:start="291:14" pos:end="291:14">(</operator><name pos:start="291:15" pos:end="291:22">uint16_t</name> <operator pos:start="291:24" pos:end="291:24">*</operator><operator pos:start="291:25" pos:end="291:25">)</operator><operator pos:start="291:26" pos:end="291:26">(</operator><name pos:start="291:27" pos:end="291:28">t1</name> <operator pos:start="291:30" pos:end="291:30">+</operator> <name pos:start="291:32" pos:end="291:33">t2</name><operator pos:start="291:34" pos:end="291:34">)</operator> <operator pos:start="291:36" pos:end="291:36">=</operator> <name pos:start="291:38" pos:end="291:39">t0</name></expr>;</expr_stmt>

            <break pos:start="293:13" pos:end="293:18">break;</break>

        <case pos:start="295:9" pos:end="295:29">case <expr pos:start="295:14" pos:end="295:28"><name pos:start="295:14" pos:end="295:28">INDEX_op_st_i32</name></expr>:</case>

            <expr_stmt pos:start="297:13" pos:end="297:39"><expr pos:start="297:13" pos:end="297:38"><name pos:start="297:13" pos:end="297:14">t0</name> <operator pos:start="297:16" pos:end="297:16">=</operator> <call pos:start="297:18" pos:end="297:38"><name pos:start="297:18" pos:end="297:29">tci_read_r32</name><argument_list pos:start="297:30" pos:end="297:38">(<argument pos:start="297:31" pos:end="297:37"><expr pos:start="297:31" pos:end="297:37"><operator pos:start="297:31" pos:end="297:31">&amp;</operator><name pos:start="297:32" pos:end="297:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:37"><expr pos:start="299:13" pos:end="299:36"><name pos:start="299:13" pos:end="299:14">t1</name> <operator pos:start="299:16" pos:end="299:16">=</operator> <call pos:start="299:18" pos:end="299:36"><name pos:start="299:18" pos:end="299:27">tci_read_r</name><argument_list pos:start="299:28" pos:end="299:36">(<argument pos:start="299:29" pos:end="299:35"><expr pos:start="299:29" pos:end="299:35"><operator pos:start="299:29" pos:end="299:29">&amp;</operator><name pos:start="299:30" pos:end="299:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:39"><expr pos:start="301:13" pos:end="301:38"><name pos:start="301:13" pos:end="301:14">t2</name> <operator pos:start="301:16" pos:end="301:16">=</operator> <call pos:start="301:18" pos:end="301:38"><name pos:start="301:18" pos:end="301:29">tci_read_s32</name><argument_list pos:start="301:30" pos:end="301:38">(<argument pos:start="301:31" pos:end="301:37"><expr pos:start="301:31" pos:end="301:37"><operator pos:start="301:31" pos:end="301:31">&amp;</operator><name pos:start="301:32" pos:end="301:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:40"><expr pos:start="303:13" pos:end="303:39"><operator pos:start="303:13" pos:end="303:13">*</operator><operator pos:start="303:14" pos:end="303:14">(</operator><name pos:start="303:15" pos:end="303:22">uint32_t</name> <operator pos:start="303:24" pos:end="303:24">*</operator><operator pos:start="303:25" pos:end="303:25">)</operator><operator pos:start="303:26" pos:end="303:26">(</operator><name pos:start="303:27" pos:end="303:28">t1</name> <operator pos:start="303:30" pos:end="303:30">+</operator> <name pos:start="303:32" pos:end="303:33">t2</name><operator pos:start="303:34" pos:end="303:34">)</operator> <operator pos:start="303:36" pos:end="303:36">=</operator> <name pos:start="303:38" pos:end="303:39">t0</name></expr>;</expr_stmt>

            <break pos:start="305:13" pos:end="305:18">break;</break>



            <comment type="block" pos:start="309:13" pos:end="309:49">/* Arithmetic operations (32 bit). */</comment>



        <case pos:start="313:9" pos:end="313:30">case <expr pos:start="313:14" pos:end="313:29"><name pos:start="313:14" pos:end="313:29">INDEX_op_add_i32</name></expr>:</case>

            <expr_stmt pos:start="315:13" pos:end="315:27"><expr pos:start="315:13" pos:end="315:26"><name pos:start="315:13" pos:end="315:14">t0</name> <operator pos:start="315:16" pos:end="315:16">=</operator> <operator pos:start="315:18" pos:end="315:18">*</operator><name pos:start="315:19" pos:end="315:24">tb_ptr</name><operator pos:start="315:25" pos:end="315:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:40"><expr pos:start="317:13" pos:end="317:39"><name pos:start="317:13" pos:end="317:14">t1</name> <operator pos:start="317:16" pos:end="317:16">=</operator> <call pos:start="317:18" pos:end="317:39"><name pos:start="317:18" pos:end="317:30">tci_read_ri32</name><argument_list pos:start="317:31" pos:end="317:39">(<argument pos:start="317:32" pos:end="317:38"><expr pos:start="317:32" pos:end="317:38"><operator pos:start="317:32" pos:end="317:32">&amp;</operator><name pos:start="317:33" pos:end="317:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:40"><expr pos:start="319:13" pos:end="319:39"><name pos:start="319:13" pos:end="319:14">t2</name> <operator pos:start="319:16" pos:end="319:16">=</operator> <call pos:start="319:18" pos:end="319:39"><name pos:start="319:18" pos:end="319:30">tci_read_ri32</name><argument_list pos:start="319:31" pos:end="319:39">(<argument pos:start="319:32" pos:end="319:38"><expr pos:start="319:32" pos:end="319:38"><operator pos:start="319:32" pos:end="319:32">&amp;</operator><name pos:start="319:33" pos:end="319:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="321:13" pos:end="321:41"><expr pos:start="321:13" pos:end="321:40"><call pos:start="321:13" pos:end="321:40"><name pos:start="321:13" pos:end="321:27">tci_write_reg32</name><argument_list pos:start="321:28" pos:end="321:40">(<argument pos:start="321:29" pos:end="321:30"><expr pos:start="321:29" pos:end="321:30"><name pos:start="321:29" pos:end="321:30">t0</name></expr></argument>, <argument pos:start="321:33" pos:end="321:39"><expr pos:start="321:33" pos:end="321:39"><name pos:start="321:33" pos:end="321:34">t1</name> <operator pos:start="321:36" pos:end="321:36">+</operator> <name pos:start="321:38" pos:end="321:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="323:13" pos:end="323:18">break;</break>

        <case pos:start="325:9" pos:end="325:30">case <expr pos:start="325:14" pos:end="325:29"><name pos:start="325:14" pos:end="325:29">INDEX_op_sub_i32</name></expr>:</case>

            <expr_stmt pos:start="327:13" pos:end="327:27"><expr pos:start="327:13" pos:end="327:26"><name pos:start="327:13" pos:end="327:14">t0</name> <operator pos:start="327:16" pos:end="327:16">=</operator> <operator pos:start="327:18" pos:end="327:18">*</operator><name pos:start="327:19" pos:end="327:24">tb_ptr</name><operator pos:start="327:25" pos:end="327:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:40"><expr pos:start="329:13" pos:end="329:39"><name pos:start="329:13" pos:end="329:14">t1</name> <operator pos:start="329:16" pos:end="329:16">=</operator> <call pos:start="329:18" pos:end="329:39"><name pos:start="329:18" pos:end="329:30">tci_read_ri32</name><argument_list pos:start="329:31" pos:end="329:39">(<argument pos:start="329:32" pos:end="329:38"><expr pos:start="329:32" pos:end="329:38"><operator pos:start="329:32" pos:end="329:32">&amp;</operator><name pos:start="329:33" pos:end="329:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:40"><expr pos:start="331:13" pos:end="331:39"><name pos:start="331:13" pos:end="331:14">t2</name> <operator pos:start="331:16" pos:end="331:16">=</operator> <call pos:start="331:18" pos:end="331:39"><name pos:start="331:18" pos:end="331:30">tci_read_ri32</name><argument_list pos:start="331:31" pos:end="331:39">(<argument pos:start="331:32" pos:end="331:38"><expr pos:start="331:32" pos:end="331:38"><operator pos:start="331:32" pos:end="331:32">&amp;</operator><name pos:start="331:33" pos:end="331:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:41"><expr pos:start="333:13" pos:end="333:40"><call pos:start="333:13" pos:end="333:40"><name pos:start="333:13" pos:end="333:27">tci_write_reg32</name><argument_list pos:start="333:28" pos:end="333:40">(<argument pos:start="333:29" pos:end="333:30"><expr pos:start="333:29" pos:end="333:30"><name pos:start="333:29" pos:end="333:30">t0</name></expr></argument>, <argument pos:start="333:33" pos:end="333:39"><expr pos:start="333:33" pos:end="333:39"><name pos:start="333:33" pos:end="333:34">t1</name> <operator pos:start="333:36" pos:end="333:36">-</operator> <name pos:start="333:38" pos:end="333:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="335:13" pos:end="335:18">break;</break>

        <case pos:start="337:9" pos:end="337:30">case <expr pos:start="337:14" pos:end="337:29"><name pos:start="337:14" pos:end="337:29">INDEX_op_mul_i32</name></expr>:</case>

            <expr_stmt pos:start="339:13" pos:end="339:27"><expr pos:start="339:13" pos:end="339:26"><name pos:start="339:13" pos:end="339:14">t0</name> <operator pos:start="339:16" pos:end="339:16">=</operator> <operator pos:start="339:18" pos:end="339:18">*</operator><name pos:start="339:19" pos:end="339:24">tb_ptr</name><operator pos:start="339:25" pos:end="339:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:40"><expr pos:start="341:13" pos:end="341:39"><name pos:start="341:13" pos:end="341:14">t1</name> <operator pos:start="341:16" pos:end="341:16">=</operator> <call pos:start="341:18" pos:end="341:39"><name pos:start="341:18" pos:end="341:30">tci_read_ri32</name><argument_list pos:start="341:31" pos:end="341:39">(<argument pos:start="341:32" pos:end="341:38"><expr pos:start="341:32" pos:end="341:38"><operator pos:start="341:32" pos:end="341:32">&amp;</operator><name pos:start="341:33" pos:end="341:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:40"><expr pos:start="343:13" pos:end="343:39"><name pos:start="343:13" pos:end="343:14">t2</name> <operator pos:start="343:16" pos:end="343:16">=</operator> <call pos:start="343:18" pos:end="343:39"><name pos:start="343:18" pos:end="343:30">tci_read_ri32</name><argument_list pos:start="343:31" pos:end="343:39">(<argument pos:start="343:32" pos:end="343:38"><expr pos:start="343:32" pos:end="343:38"><operator pos:start="343:32" pos:end="343:32">&amp;</operator><name pos:start="343:33" pos:end="343:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:41"><expr pos:start="345:13" pos:end="345:40"><call pos:start="345:13" pos:end="345:40"><name pos:start="345:13" pos:end="345:27">tci_write_reg32</name><argument_list pos:start="345:28" pos:end="345:40">(<argument pos:start="345:29" pos:end="345:30"><expr pos:start="345:29" pos:end="345:30"><name pos:start="345:29" pos:end="345:30">t0</name></expr></argument>, <argument pos:start="345:33" pos:end="345:39"><expr pos:start="345:33" pos:end="345:39"><name pos:start="345:33" pos:end="345:34">t1</name> <operator pos:start="345:36" pos:end="345:36">*</operator> <name pos:start="345:38" pos:end="345:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="347:13" pos:end="350:0">break;</break>

<cpp:if pos:start="349:1" pos:end="349:26">#<cpp:directive pos:start="349:2" pos:end="349:3">if</cpp:directive> <expr pos:start="349:5" pos:end="349:26"><name pos:start="349:5" pos:end="349:26">TCG_TARGET_HAS_div_i32</name></expr></cpp:if>

        <case pos:start="351:9" pos:end="351:30">case <expr pos:start="351:14" pos:end="351:29"><name pos:start="351:14" pos:end="351:29">INDEX_op_div_i32</name></expr>:</case>

            <expr_stmt pos:start="353:13" pos:end="353:27"><expr pos:start="353:13" pos:end="353:26"><name pos:start="353:13" pos:end="353:14">t0</name> <operator pos:start="353:16" pos:end="353:16">=</operator> <operator pos:start="353:18" pos:end="353:18">*</operator><name pos:start="353:19" pos:end="353:24">tb_ptr</name><operator pos:start="353:25" pos:end="353:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:40"><expr pos:start="355:13" pos:end="355:39"><name pos:start="355:13" pos:end="355:14">t1</name> <operator pos:start="355:16" pos:end="355:16">=</operator> <call pos:start="355:18" pos:end="355:39"><name pos:start="355:18" pos:end="355:30">tci_read_ri32</name><argument_list pos:start="355:31" pos:end="355:39">(<argument pos:start="355:32" pos:end="355:38"><expr pos:start="355:32" pos:end="355:38"><operator pos:start="355:32" pos:end="355:32">&amp;</operator><name pos:start="355:33" pos:end="355:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:40"><expr pos:start="357:13" pos:end="357:39"><name pos:start="357:13" pos:end="357:14">t2</name> <operator pos:start="357:16" pos:end="357:16">=</operator> <call pos:start="357:18" pos:end="357:39"><name pos:start="357:18" pos:end="357:30">tci_read_ri32</name><argument_list pos:start="357:31" pos:end="357:39">(<argument pos:start="357:32" pos:end="357:38"><expr pos:start="357:32" pos:end="357:38"><operator pos:start="357:32" pos:end="357:32">&amp;</operator><name pos:start="357:33" pos:end="357:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="359:13" pos:end="359:59"><expr pos:start="359:13" pos:end="359:58"><call pos:start="359:13" pos:end="359:58"><name pos:start="359:13" pos:end="359:27">tci_write_reg32</name><argument_list pos:start="359:28" pos:end="359:58">(<argument pos:start="359:29" pos:end="359:30"><expr pos:start="359:29" pos:end="359:30"><name pos:start="359:29" pos:end="359:30">t0</name></expr></argument>, <argument pos:start="359:33" pos:end="359:57"><expr pos:start="359:33" pos:end="359:57"><operator pos:start="359:33" pos:end="359:33">(</operator><name pos:start="359:34" pos:end="359:40">int32_t</name><operator pos:start="359:41" pos:end="359:41">)</operator><name pos:start="359:42" pos:end="359:43">t1</name> <operator pos:start="359:45" pos:end="359:45">/</operator> <operator pos:start="359:47" pos:end="359:47">(</operator><name pos:start="359:48" pos:end="359:54">int32_t</name><operator pos:start="359:55" pos:end="359:55">)</operator><name pos:start="359:56" pos:end="359:57">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="361:13" pos:end="361:18">break;</break>

        <case pos:start="363:9" pos:end="363:31">case <expr pos:start="363:14" pos:end="363:30"><name pos:start="363:14" pos:end="363:30">INDEX_op_divu_i32</name></expr>:</case>

            <expr_stmt pos:start="365:13" pos:end="365:27"><expr pos:start="365:13" pos:end="365:26"><name pos:start="365:13" pos:end="365:14">t0</name> <operator pos:start="365:16" pos:end="365:16">=</operator> <operator pos:start="365:18" pos:end="365:18">*</operator><name pos:start="365:19" pos:end="365:24">tb_ptr</name><operator pos:start="365:25" pos:end="365:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:40"><expr pos:start="367:13" pos:end="367:39"><name pos:start="367:13" pos:end="367:14">t1</name> <operator pos:start="367:16" pos:end="367:16">=</operator> <call pos:start="367:18" pos:end="367:39"><name pos:start="367:18" pos:end="367:30">tci_read_ri32</name><argument_list pos:start="367:31" pos:end="367:39">(<argument pos:start="367:32" pos:end="367:38"><expr pos:start="367:32" pos:end="367:38"><operator pos:start="367:32" pos:end="367:32">&amp;</operator><name pos:start="367:33" pos:end="367:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:40"><expr pos:start="369:13" pos:end="369:39"><name pos:start="369:13" pos:end="369:14">t2</name> <operator pos:start="369:16" pos:end="369:16">=</operator> <call pos:start="369:18" pos:end="369:39"><name pos:start="369:18" pos:end="369:30">tci_read_ri32</name><argument_list pos:start="369:31" pos:end="369:39">(<argument pos:start="369:32" pos:end="369:38"><expr pos:start="369:32" pos:end="369:38"><operator pos:start="369:32" pos:end="369:32">&amp;</operator><name pos:start="369:33" pos:end="369:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:41"><expr pos:start="371:13" pos:end="371:40"><call pos:start="371:13" pos:end="371:40"><name pos:start="371:13" pos:end="371:27">tci_write_reg32</name><argument_list pos:start="371:28" pos:end="371:40">(<argument pos:start="371:29" pos:end="371:30"><expr pos:start="371:29" pos:end="371:30"><name pos:start="371:29" pos:end="371:30">t0</name></expr></argument>, <argument pos:start="371:33" pos:end="371:39"><expr pos:start="371:33" pos:end="371:39"><name pos:start="371:33" pos:end="371:34">t1</name> <operator pos:start="371:36" pos:end="371:36">/</operator> <name pos:start="371:38" pos:end="371:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="373:13" pos:end="373:18">break;</break>

        <case pos:start="375:9" pos:end="375:30">case <expr pos:start="375:14" pos:end="375:29"><name pos:start="375:14" pos:end="375:29">INDEX_op_rem_i32</name></expr>:</case>

            <expr_stmt pos:start="377:13" pos:end="377:27"><expr pos:start="377:13" pos:end="377:26"><name pos:start="377:13" pos:end="377:14">t0</name> <operator pos:start="377:16" pos:end="377:16">=</operator> <operator pos:start="377:18" pos:end="377:18">*</operator><name pos:start="377:19" pos:end="377:24">tb_ptr</name><operator pos:start="377:25" pos:end="377:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="379:13" pos:end="379:40"><expr pos:start="379:13" pos:end="379:39"><name pos:start="379:13" pos:end="379:14">t1</name> <operator pos:start="379:16" pos:end="379:16">=</operator> <call pos:start="379:18" pos:end="379:39"><name pos:start="379:18" pos:end="379:30">tci_read_ri32</name><argument_list pos:start="379:31" pos:end="379:39">(<argument pos:start="379:32" pos:end="379:38"><expr pos:start="379:32" pos:end="379:38"><operator pos:start="379:32" pos:end="379:32">&amp;</operator><name pos:start="379:33" pos:end="379:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="381:40"><expr pos:start="381:13" pos:end="381:39"><name pos:start="381:13" pos:end="381:14">t2</name> <operator pos:start="381:16" pos:end="381:16">=</operator> <call pos:start="381:18" pos:end="381:39"><name pos:start="381:18" pos:end="381:30">tci_read_ri32</name><argument_list pos:start="381:31" pos:end="381:39">(<argument pos:start="381:32" pos:end="381:38"><expr pos:start="381:32" pos:end="381:38"><operator pos:start="381:32" pos:end="381:32">&amp;</operator><name pos:start="381:33" pos:end="381:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="383:13" pos:end="383:59"><expr pos:start="383:13" pos:end="383:58"><call pos:start="383:13" pos:end="383:58"><name pos:start="383:13" pos:end="383:27">tci_write_reg32</name><argument_list pos:start="383:28" pos:end="383:58">(<argument pos:start="383:29" pos:end="383:30"><expr pos:start="383:29" pos:end="383:30"><name pos:start="383:29" pos:end="383:30">t0</name></expr></argument>, <argument pos:start="383:33" pos:end="383:57"><expr pos:start="383:33" pos:end="383:57"><operator pos:start="383:33" pos:end="383:33">(</operator><name pos:start="383:34" pos:end="383:40">int32_t</name><operator pos:start="383:41" pos:end="383:41">)</operator><name pos:start="383:42" pos:end="383:43">t1</name> <operator pos:start="383:45" pos:end="383:45">%</operator> <operator pos:start="383:47" pos:end="383:47">(</operator><name pos:start="383:48" pos:end="383:54">int32_t</name><operator pos:start="383:55" pos:end="383:55">)</operator><name pos:start="383:56" pos:end="383:57">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="385:13" pos:end="385:18">break;</break>

        <case pos:start="387:9" pos:end="387:31">case <expr pos:start="387:14" pos:end="387:30"><name pos:start="387:14" pos:end="387:30">INDEX_op_remu_i32</name></expr>:</case>

            <expr_stmt pos:start="389:13" pos:end="389:27"><expr pos:start="389:13" pos:end="389:26"><name pos:start="389:13" pos:end="389:14">t0</name> <operator pos:start="389:16" pos:end="389:16">=</operator> <operator pos:start="389:18" pos:end="389:18">*</operator><name pos:start="389:19" pos:end="389:24">tb_ptr</name><operator pos:start="389:25" pos:end="389:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:40"><expr pos:start="391:13" pos:end="391:39"><name pos:start="391:13" pos:end="391:14">t1</name> <operator pos:start="391:16" pos:end="391:16">=</operator> <call pos:start="391:18" pos:end="391:39"><name pos:start="391:18" pos:end="391:30">tci_read_ri32</name><argument_list pos:start="391:31" pos:end="391:39">(<argument pos:start="391:32" pos:end="391:38"><expr pos:start="391:32" pos:end="391:38"><operator pos:start="391:32" pos:end="391:32">&amp;</operator><name pos:start="391:33" pos:end="391:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="393:13" pos:end="393:40"><expr pos:start="393:13" pos:end="393:39"><name pos:start="393:13" pos:end="393:14">t2</name> <operator pos:start="393:16" pos:end="393:16">=</operator> <call pos:start="393:18" pos:end="393:39"><name pos:start="393:18" pos:end="393:30">tci_read_ri32</name><argument_list pos:start="393:31" pos:end="393:39">(<argument pos:start="393:32" pos:end="393:38"><expr pos:start="393:32" pos:end="393:38"><operator pos:start="393:32" pos:end="393:32">&amp;</operator><name pos:start="393:33" pos:end="393:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:41"><expr pos:start="395:13" pos:end="395:40"><call pos:start="395:13" pos:end="395:40"><name pos:start="395:13" pos:end="395:27">tci_write_reg32</name><argument_list pos:start="395:28" pos:end="395:40">(<argument pos:start="395:29" pos:end="395:30"><expr pos:start="395:29" pos:end="395:30"><name pos:start="395:29" pos:end="395:30">t0</name></expr></argument>, <argument pos:start="395:33" pos:end="395:39"><expr pos:start="395:33" pos:end="395:39"><name pos:start="395:33" pos:end="395:34">t1</name> <operator pos:start="395:36" pos:end="395:36">%</operator> <name pos:start="395:38" pos:end="395:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="397:13" pos:end="400:0">break;</break>

<cpp:elif pos:start="399:1" pos:end="399:29">#<cpp:directive pos:start="399:2" pos:end="399:5">elif</cpp:directive> <expr pos:start="399:7" pos:end="399:29"><name pos:start="399:7" pos:end="399:29">TCG_TARGET_HAS_div2_i32</name></expr></cpp:elif>

        <case pos:start="401:9" pos:end="401:31">case <expr pos:start="401:14" pos:end="401:30"><name pos:start="401:14" pos:end="401:30">INDEX_op_div2_i32</name></expr>:</case>

        <case pos:start="403:9" pos:end="403:32">case <expr pos:start="403:14" pos:end="403:31"><name pos:start="403:14" pos:end="403:31">INDEX_op_divu2_i32</name></expr>:</case>

            <expr_stmt pos:start="405:13" pos:end="405:19"><expr pos:start="405:13" pos:end="405:18"><call pos:start="405:13" pos:end="405:18"><name pos:start="405:13" pos:end="405:16">TODO</name><argument_list pos:start="405:17" pos:end="405:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="407:13" pos:end="410:0">break;</break>

<cpp:endif pos:start="409:1" pos:end="409:6">#<cpp:directive pos:start="409:2" pos:end="409:6">endif</cpp:directive></cpp:endif>

        <case pos:start="411:9" pos:end="411:30">case <expr pos:start="411:14" pos:end="411:29"><name pos:start="411:14" pos:end="411:29">INDEX_op_and_i32</name></expr>:</case>

            <expr_stmt pos:start="413:13" pos:end="413:27"><expr pos:start="413:13" pos:end="413:26"><name pos:start="413:13" pos:end="413:14">t0</name> <operator pos:start="413:16" pos:end="413:16">=</operator> <operator pos:start="413:18" pos:end="413:18">*</operator><name pos:start="413:19" pos:end="413:24">tb_ptr</name><operator pos:start="413:25" pos:end="413:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="415:13" pos:end="415:40"><expr pos:start="415:13" pos:end="415:39"><name pos:start="415:13" pos:end="415:14">t1</name> <operator pos:start="415:16" pos:end="415:16">=</operator> <call pos:start="415:18" pos:end="415:39"><name pos:start="415:18" pos:end="415:30">tci_read_ri32</name><argument_list pos:start="415:31" pos:end="415:39">(<argument pos:start="415:32" pos:end="415:38"><expr pos:start="415:32" pos:end="415:38"><operator pos:start="415:32" pos:end="415:32">&amp;</operator><name pos:start="415:33" pos:end="415:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="417:13" pos:end="417:40"><expr pos:start="417:13" pos:end="417:39"><name pos:start="417:13" pos:end="417:14">t2</name> <operator pos:start="417:16" pos:end="417:16">=</operator> <call pos:start="417:18" pos:end="417:39"><name pos:start="417:18" pos:end="417:30">tci_read_ri32</name><argument_list pos:start="417:31" pos:end="417:39">(<argument pos:start="417:32" pos:end="417:38"><expr pos:start="417:32" pos:end="417:38"><operator pos:start="417:32" pos:end="417:32">&amp;</operator><name pos:start="417:33" pos:end="417:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="419:13" pos:end="419:41"><expr pos:start="419:13" pos:end="419:40"><call pos:start="419:13" pos:end="419:40"><name pos:start="419:13" pos:end="419:27">tci_write_reg32</name><argument_list pos:start="419:28" pos:end="419:40">(<argument pos:start="419:29" pos:end="419:30"><expr pos:start="419:29" pos:end="419:30"><name pos:start="419:29" pos:end="419:30">t0</name></expr></argument>, <argument pos:start="419:33" pos:end="419:39"><expr pos:start="419:33" pos:end="419:39"><name pos:start="419:33" pos:end="419:34">t1</name> <operator pos:start="419:36" pos:end="419:36">&amp;</operator> <name pos:start="419:38" pos:end="419:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="421:13" pos:end="421:18">break;</break>

        <case pos:start="423:9" pos:end="423:29">case <expr pos:start="423:14" pos:end="423:28"><name pos:start="423:14" pos:end="423:28">INDEX_op_or_i32</name></expr>:</case>

            <expr_stmt pos:start="425:13" pos:end="425:27"><expr pos:start="425:13" pos:end="425:26"><name pos:start="425:13" pos:end="425:14">t0</name> <operator pos:start="425:16" pos:end="425:16">=</operator> <operator pos:start="425:18" pos:end="425:18">*</operator><name pos:start="425:19" pos:end="425:24">tb_ptr</name><operator pos:start="425:25" pos:end="425:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="427:13" pos:end="427:40"><expr pos:start="427:13" pos:end="427:39"><name pos:start="427:13" pos:end="427:14">t1</name> <operator pos:start="427:16" pos:end="427:16">=</operator> <call pos:start="427:18" pos:end="427:39"><name pos:start="427:18" pos:end="427:30">tci_read_ri32</name><argument_list pos:start="427:31" pos:end="427:39">(<argument pos:start="427:32" pos:end="427:38"><expr pos:start="427:32" pos:end="427:38"><operator pos:start="427:32" pos:end="427:32">&amp;</operator><name pos:start="427:33" pos:end="427:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="429:13" pos:end="429:40"><expr pos:start="429:13" pos:end="429:39"><name pos:start="429:13" pos:end="429:14">t2</name> <operator pos:start="429:16" pos:end="429:16">=</operator> <call pos:start="429:18" pos:end="429:39"><name pos:start="429:18" pos:end="429:30">tci_read_ri32</name><argument_list pos:start="429:31" pos:end="429:39">(<argument pos:start="429:32" pos:end="429:38"><expr pos:start="429:32" pos:end="429:38"><operator pos:start="429:32" pos:end="429:32">&amp;</operator><name pos:start="429:33" pos:end="429:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="431:13" pos:end="431:41"><expr pos:start="431:13" pos:end="431:40"><call pos:start="431:13" pos:end="431:40"><name pos:start="431:13" pos:end="431:27">tci_write_reg32</name><argument_list pos:start="431:28" pos:end="431:40">(<argument pos:start="431:29" pos:end="431:30"><expr pos:start="431:29" pos:end="431:30"><name pos:start="431:29" pos:end="431:30">t0</name></expr></argument>, <argument pos:start="431:33" pos:end="431:39"><expr pos:start="431:33" pos:end="431:39"><name pos:start="431:33" pos:end="431:34">t1</name> <operator pos:start="431:36" pos:end="431:36">|</operator> <name pos:start="431:38" pos:end="431:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="433:13" pos:end="433:18">break;</break>

        <case pos:start="435:9" pos:end="435:30">case <expr pos:start="435:14" pos:end="435:29"><name pos:start="435:14" pos:end="435:29">INDEX_op_xor_i32</name></expr>:</case>

            <expr_stmt pos:start="437:13" pos:end="437:27"><expr pos:start="437:13" pos:end="437:26"><name pos:start="437:13" pos:end="437:14">t0</name> <operator pos:start="437:16" pos:end="437:16">=</operator> <operator pos:start="437:18" pos:end="437:18">*</operator><name pos:start="437:19" pos:end="437:24">tb_ptr</name><operator pos:start="437:25" pos:end="437:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="439:13" pos:end="439:40"><expr pos:start="439:13" pos:end="439:39"><name pos:start="439:13" pos:end="439:14">t1</name> <operator pos:start="439:16" pos:end="439:16">=</operator> <call pos:start="439:18" pos:end="439:39"><name pos:start="439:18" pos:end="439:30">tci_read_ri32</name><argument_list pos:start="439:31" pos:end="439:39">(<argument pos:start="439:32" pos:end="439:38"><expr pos:start="439:32" pos:end="439:38"><operator pos:start="439:32" pos:end="439:32">&amp;</operator><name pos:start="439:33" pos:end="439:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="441:13" pos:end="441:40"><expr pos:start="441:13" pos:end="441:39"><name pos:start="441:13" pos:end="441:14">t2</name> <operator pos:start="441:16" pos:end="441:16">=</operator> <call pos:start="441:18" pos:end="441:39"><name pos:start="441:18" pos:end="441:30">tci_read_ri32</name><argument_list pos:start="441:31" pos:end="441:39">(<argument pos:start="441:32" pos:end="441:38"><expr pos:start="441:32" pos:end="441:38"><operator pos:start="441:32" pos:end="441:32">&amp;</operator><name pos:start="441:33" pos:end="441:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="443:13" pos:end="443:41"><expr pos:start="443:13" pos:end="443:40"><call pos:start="443:13" pos:end="443:40"><name pos:start="443:13" pos:end="443:27">tci_write_reg32</name><argument_list pos:start="443:28" pos:end="443:40">(<argument pos:start="443:29" pos:end="443:30"><expr pos:start="443:29" pos:end="443:30"><name pos:start="443:29" pos:end="443:30">t0</name></expr></argument>, <argument pos:start="443:33" pos:end="443:39"><expr pos:start="443:33" pos:end="443:39"><name pos:start="443:33" pos:end="443:34">t1</name> <operator pos:start="443:36" pos:end="443:36">^</operator> <name pos:start="443:38" pos:end="443:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="445:13" pos:end="445:18">break;</break>



            <comment type="block" pos:start="449:13" pos:end="449:51">/* Shift/rotate operations (32 bit). */</comment>



        <case pos:start="453:9" pos:end="453:30">case <expr pos:start="453:14" pos:end="453:29"><name pos:start="453:14" pos:end="453:29">INDEX_op_shl_i32</name></expr>:</case>

            <expr_stmt pos:start="455:13" pos:end="455:27"><expr pos:start="455:13" pos:end="455:26"><name pos:start="455:13" pos:end="455:14">t0</name> <operator pos:start="455:16" pos:end="455:16">=</operator> <operator pos:start="455:18" pos:end="455:18">*</operator><name pos:start="455:19" pos:end="455:24">tb_ptr</name><operator pos:start="455:25" pos:end="455:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="457:13" pos:end="457:40"><expr pos:start="457:13" pos:end="457:39"><name pos:start="457:13" pos:end="457:14">t1</name> <operator pos:start="457:16" pos:end="457:16">=</operator> <call pos:start="457:18" pos:end="457:39"><name pos:start="457:18" pos:end="457:30">tci_read_ri32</name><argument_list pos:start="457:31" pos:end="457:39">(<argument pos:start="457:32" pos:end="457:38"><expr pos:start="457:32" pos:end="457:38"><operator pos:start="457:32" pos:end="457:32">&amp;</operator><name pos:start="457:33" pos:end="457:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="459:13" pos:end="459:40"><expr pos:start="459:13" pos:end="459:39"><name pos:start="459:13" pos:end="459:14">t2</name> <operator pos:start="459:16" pos:end="459:16">=</operator> <call pos:start="459:18" pos:end="459:39"><name pos:start="459:18" pos:end="459:30">tci_read_ri32</name><argument_list pos:start="459:31" pos:end="459:39">(<argument pos:start="459:32" pos:end="459:38"><expr pos:start="459:32" pos:end="459:38"><operator pos:start="459:32" pos:end="459:32">&amp;</operator><name pos:start="459:33" pos:end="459:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="461:13" pos:end="461:42"><expr pos:start="461:13" pos:end="461:41"><call pos:start="461:13" pos:end="461:41"><name pos:start="461:13" pos:end="461:27">tci_write_reg32</name><argument_list pos:start="461:28" pos:end="461:41">(<argument pos:start="461:29" pos:end="461:30"><expr pos:start="461:29" pos:end="461:30"><name pos:start="461:29" pos:end="461:30">t0</name></expr></argument>, <argument pos:start="461:33" pos:end="461:40"><expr pos:start="461:33" pos:end="461:40"><name pos:start="461:33" pos:end="461:34">t1</name> <operator pos:start="461:36" pos:end="461:37">&lt;&lt;</operator> <name pos:start="461:39" pos:end="461:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="463:13" pos:end="463:18">break;</break>

        <case pos:start="465:9" pos:end="465:30">case <expr pos:start="465:14" pos:end="465:29"><name pos:start="465:14" pos:end="465:29">INDEX_op_shr_i32</name></expr>:</case>

            <expr_stmt pos:start="467:13" pos:end="467:27"><expr pos:start="467:13" pos:end="467:26"><name pos:start="467:13" pos:end="467:14">t0</name> <operator pos:start="467:16" pos:end="467:16">=</operator> <operator pos:start="467:18" pos:end="467:18">*</operator><name pos:start="467:19" pos:end="467:24">tb_ptr</name><operator pos:start="467:25" pos:end="467:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="469:13" pos:end="469:40"><expr pos:start="469:13" pos:end="469:39"><name pos:start="469:13" pos:end="469:14">t1</name> <operator pos:start="469:16" pos:end="469:16">=</operator> <call pos:start="469:18" pos:end="469:39"><name pos:start="469:18" pos:end="469:30">tci_read_ri32</name><argument_list pos:start="469:31" pos:end="469:39">(<argument pos:start="469:32" pos:end="469:38"><expr pos:start="469:32" pos:end="469:38"><operator pos:start="469:32" pos:end="469:32">&amp;</operator><name pos:start="469:33" pos:end="469:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="471:13" pos:end="471:40"><expr pos:start="471:13" pos:end="471:39"><name pos:start="471:13" pos:end="471:14">t2</name> <operator pos:start="471:16" pos:end="471:16">=</operator> <call pos:start="471:18" pos:end="471:39"><name pos:start="471:18" pos:end="471:30">tci_read_ri32</name><argument_list pos:start="471:31" pos:end="471:39">(<argument pos:start="471:32" pos:end="471:38"><expr pos:start="471:32" pos:end="471:38"><operator pos:start="471:32" pos:end="471:32">&amp;</operator><name pos:start="471:33" pos:end="471:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="473:13" pos:end="473:42"><expr pos:start="473:13" pos:end="473:41"><call pos:start="473:13" pos:end="473:41"><name pos:start="473:13" pos:end="473:27">tci_write_reg32</name><argument_list pos:start="473:28" pos:end="473:41">(<argument pos:start="473:29" pos:end="473:30"><expr pos:start="473:29" pos:end="473:30"><name pos:start="473:29" pos:end="473:30">t0</name></expr></argument>, <argument pos:start="473:33" pos:end="473:40"><expr pos:start="473:33" pos:end="473:40"><name pos:start="473:33" pos:end="473:34">t1</name> <operator pos:start="473:36" pos:end="473:37">&gt;&gt;</operator> <name pos:start="473:39" pos:end="473:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="475:13" pos:end="475:18">break;</break>

        <case pos:start="477:9" pos:end="477:30">case <expr pos:start="477:14" pos:end="477:29"><name pos:start="477:14" pos:end="477:29">INDEX_op_sar_i32</name></expr>:</case>

            <expr_stmt pos:start="479:13" pos:end="479:27"><expr pos:start="479:13" pos:end="479:26"><name pos:start="479:13" pos:end="479:14">t0</name> <operator pos:start="479:16" pos:end="479:16">=</operator> <operator pos:start="479:18" pos:end="479:18">*</operator><name pos:start="479:19" pos:end="479:24">tb_ptr</name><operator pos:start="479:25" pos:end="479:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="481:13" pos:end="481:40"><expr pos:start="481:13" pos:end="481:39"><name pos:start="481:13" pos:end="481:14">t1</name> <operator pos:start="481:16" pos:end="481:16">=</operator> <call pos:start="481:18" pos:end="481:39"><name pos:start="481:18" pos:end="481:30">tci_read_ri32</name><argument_list pos:start="481:31" pos:end="481:39">(<argument pos:start="481:32" pos:end="481:38"><expr pos:start="481:32" pos:end="481:38"><operator pos:start="481:32" pos:end="481:32">&amp;</operator><name pos:start="481:33" pos:end="481:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="483:13" pos:end="483:40"><expr pos:start="483:13" pos:end="483:39"><name pos:start="483:13" pos:end="483:14">t2</name> <operator pos:start="483:16" pos:end="483:16">=</operator> <call pos:start="483:18" pos:end="483:39"><name pos:start="483:18" pos:end="483:30">tci_read_ri32</name><argument_list pos:start="483:31" pos:end="483:39">(<argument pos:start="483:32" pos:end="483:38"><expr pos:start="483:32" pos:end="483:38"><operator pos:start="483:32" pos:end="483:32">&amp;</operator><name pos:start="483:33" pos:end="483:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="485:13" pos:end="485:53"><expr pos:start="485:13" pos:end="485:52"><call pos:start="485:13" pos:end="485:52"><name pos:start="485:13" pos:end="485:27">tci_write_reg32</name><argument_list pos:start="485:28" pos:end="485:52">(<argument pos:start="485:29" pos:end="485:30"><expr pos:start="485:29" pos:end="485:30"><name pos:start="485:29" pos:end="485:30">t0</name></expr></argument>, <argument pos:start="485:33" pos:end="485:51"><expr pos:start="485:33" pos:end="485:51"><operator pos:start="485:33" pos:end="485:33">(</operator><operator pos:start="485:34" pos:end="485:34">(</operator><name pos:start="485:35" pos:end="485:41">int32_t</name><operator pos:start="485:42" pos:end="485:42">)</operator><name pos:start="485:43" pos:end="485:44">t1</name> <operator pos:start="485:46" pos:end="485:47">&gt;&gt;</operator> <name pos:start="485:49" pos:end="485:50">t2</name><operator pos:start="485:51" pos:end="485:51">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="487:13" pos:end="490:0">break;</break>

<cpp:if pos:start="489:1" pos:end="489:26">#<cpp:directive pos:start="489:2" pos:end="489:3">if</cpp:directive> <expr pos:start="489:5" pos:end="489:26"><name pos:start="489:5" pos:end="489:26">TCG_TARGET_HAS_rot_i32</name></expr></cpp:if>

        <case pos:start="491:9" pos:end="491:31">case <expr pos:start="491:14" pos:end="491:30"><name pos:start="491:14" pos:end="491:30">INDEX_op_rotl_i32</name></expr>:</case>

            <expr_stmt pos:start="493:13" pos:end="493:27"><expr pos:start="493:13" pos:end="493:26"><name pos:start="493:13" pos:end="493:14">t0</name> <operator pos:start="493:16" pos:end="493:16">=</operator> <operator pos:start="493:18" pos:end="493:18">*</operator><name pos:start="493:19" pos:end="493:24">tb_ptr</name><operator pos:start="493:25" pos:end="493:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="495:13" pos:end="495:40"><expr pos:start="495:13" pos:end="495:39"><name pos:start="495:13" pos:end="495:14">t1</name> <operator pos:start="495:16" pos:end="495:16">=</operator> <call pos:start="495:18" pos:end="495:39"><name pos:start="495:18" pos:end="495:30">tci_read_ri32</name><argument_list pos:start="495:31" pos:end="495:39">(<argument pos:start="495:32" pos:end="495:38"><expr pos:start="495:32" pos:end="495:38"><operator pos:start="495:32" pos:end="495:32">&amp;</operator><name pos:start="495:33" pos:end="495:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="497:13" pos:end="497:40"><expr pos:start="497:13" pos:end="497:39"><name pos:start="497:13" pos:end="497:14">t2</name> <operator pos:start="497:16" pos:end="497:16">=</operator> <call pos:start="497:18" pos:end="497:39"><name pos:start="497:18" pos:end="497:30">tci_read_ri32</name><argument_list pos:start="497:31" pos:end="497:39">(<argument pos:start="497:32" pos:end="497:38"><expr pos:start="497:32" pos:end="497:38"><operator pos:start="497:32" pos:end="497:32">&amp;</operator><name pos:start="497:33" pos:end="497:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="499:13" pos:end="499:64"><expr pos:start="499:13" pos:end="499:63"><call pos:start="499:13" pos:end="499:63"><name pos:start="499:13" pos:end="499:27">tci_write_reg32</name><argument_list pos:start="499:28" pos:end="499:63">(<argument pos:start="499:29" pos:end="499:30"><expr pos:start="499:29" pos:end="499:30"><name pos:start="499:29" pos:end="499:30">t0</name></expr></argument>, <argument pos:start="499:33" pos:end="499:62"><expr pos:start="499:33" pos:end="499:62"><operator pos:start="499:33" pos:end="499:33">(</operator><name pos:start="499:34" pos:end="499:35">t1</name> <operator pos:start="499:37" pos:end="499:38">&lt;&lt;</operator> <name pos:start="499:40" pos:end="499:41">t2</name><operator pos:start="499:42" pos:end="499:42">)</operator> <operator pos:start="499:44" pos:end="499:44">|</operator> <operator pos:start="499:46" pos:end="499:46">(</operator><name pos:start="499:47" pos:end="499:48">t1</name> <operator pos:start="499:50" pos:end="499:51">&gt;&gt;</operator> <operator pos:start="499:53" pos:end="499:53">(</operator><literal type="number" pos:start="499:54" pos:end="499:57">32</literal> <operator pos:start="499:57" pos:end="499:57">-</operator> <name pos:start="499:59" pos:end="499:60">t2</name><operator pos:start="499:61" pos:end="499:61">)</operator><operator pos:start="499:62" pos:end="499:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="501:13" pos:end="501:18">break;</break>

        <case pos:start="503:9" pos:end="503:31">case <expr pos:start="503:14" pos:end="503:30"><name pos:start="503:14" pos:end="503:30">INDEX_op_rotr_i32</name></expr>:</case>

            <expr_stmt pos:start="505:13" pos:end="505:27"><expr pos:start="505:13" pos:end="505:26"><name pos:start="505:13" pos:end="505:14">t0</name> <operator pos:start="505:16" pos:end="505:16">=</operator> <operator pos:start="505:18" pos:end="505:18">*</operator><name pos:start="505:19" pos:end="505:24">tb_ptr</name><operator pos:start="505:25" pos:end="505:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:40"><expr pos:start="507:13" pos:end="507:39"><name pos:start="507:13" pos:end="507:14">t1</name> <operator pos:start="507:16" pos:end="507:16">=</operator> <call pos:start="507:18" pos:end="507:39"><name pos:start="507:18" pos:end="507:30">tci_read_ri32</name><argument_list pos:start="507:31" pos:end="507:39">(<argument pos:start="507:32" pos:end="507:38"><expr pos:start="507:32" pos:end="507:38"><operator pos:start="507:32" pos:end="507:32">&amp;</operator><name pos:start="507:33" pos:end="507:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="509:13" pos:end="509:40"><expr pos:start="509:13" pos:end="509:39"><name pos:start="509:13" pos:end="509:14">t2</name> <operator pos:start="509:16" pos:end="509:16">=</operator> <call pos:start="509:18" pos:end="509:39"><name pos:start="509:18" pos:end="509:30">tci_read_ri32</name><argument_list pos:start="509:31" pos:end="509:39">(<argument pos:start="509:32" pos:end="509:38"><expr pos:start="509:32" pos:end="509:38"><operator pos:start="509:32" pos:end="509:32">&amp;</operator><name pos:start="509:33" pos:end="509:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="511:13" pos:end="511:64"><expr pos:start="511:13" pos:end="511:63"><call pos:start="511:13" pos:end="511:63"><name pos:start="511:13" pos:end="511:27">tci_write_reg32</name><argument_list pos:start="511:28" pos:end="511:63">(<argument pos:start="511:29" pos:end="511:30"><expr pos:start="511:29" pos:end="511:30"><name pos:start="511:29" pos:end="511:30">t0</name></expr></argument>, <argument pos:start="511:33" pos:end="511:62"><expr pos:start="511:33" pos:end="511:62"><operator pos:start="511:33" pos:end="511:33">(</operator><name pos:start="511:34" pos:end="511:35">t1</name> <operator pos:start="511:37" pos:end="511:38">&gt;&gt;</operator> <name pos:start="511:40" pos:end="511:41">t2</name><operator pos:start="511:42" pos:end="511:42">)</operator> <operator pos:start="511:44" pos:end="511:44">|</operator> <operator pos:start="511:46" pos:end="511:46">(</operator><name pos:start="511:47" pos:end="511:48">t1</name> <operator pos:start="511:50" pos:end="511:51">&lt;&lt;</operator> <operator pos:start="511:53" pos:end="511:53">(</operator><literal type="number" pos:start="511:54" pos:end="511:57">32</literal> <operator pos:start="511:57" pos:end="511:57">-</operator> <name pos:start="511:59" pos:end="511:60">t2</name><operator pos:start="511:61" pos:end="511:61">)</operator><operator pos:start="511:62" pos:end="511:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="513:13" pos:end="518:0">break;</break>

<cpp:endif pos:start="515:1" pos:end="515:6">#<cpp:directive pos:start="515:2" pos:end="515:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="517:1" pos:end="517:30">#<cpp:directive pos:start="517:2" pos:end="517:3">if</cpp:directive> <expr pos:start="517:5" pos:end="517:30"><name pos:start="517:5" pos:end="517:30">TCG_TARGET_HAS_deposit_i32</name></expr></cpp:if>

        <case pos:start="519:9" pos:end="519:34">case <expr pos:start="519:14" pos:end="519:33"><name pos:start="519:14" pos:end="519:33">INDEX_op_deposit_i32</name></expr>:</case>

            <expr_stmt pos:start="521:13" pos:end="521:27"><expr pos:start="521:13" pos:end="521:26"><name pos:start="521:13" pos:end="521:14">t0</name> <operator pos:start="521:16" pos:end="521:16">=</operator> <operator pos:start="521:18" pos:end="521:18">*</operator><name pos:start="521:19" pos:end="521:24">tb_ptr</name><operator pos:start="521:25" pos:end="521:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="523:13" pos:end="523:39"><expr pos:start="523:13" pos:end="523:38"><name pos:start="523:13" pos:end="523:14">t1</name> <operator pos:start="523:16" pos:end="523:16">=</operator> <call pos:start="523:18" pos:end="523:38"><name pos:start="523:18" pos:end="523:29">tci_read_r32</name><argument_list pos:start="523:30" pos:end="523:38">(<argument pos:start="523:31" pos:end="523:37"><expr pos:start="523:31" pos:end="523:37"><operator pos:start="523:31" pos:end="523:31">&amp;</operator><name pos:start="523:32" pos:end="523:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="525:13" pos:end="525:39"><expr pos:start="525:13" pos:end="525:38"><name pos:start="525:13" pos:end="525:14">t2</name> <operator pos:start="525:16" pos:end="525:16">=</operator> <call pos:start="525:18" pos:end="525:38"><name pos:start="525:18" pos:end="525:29">tci_read_r32</name><argument_list pos:start="525:30" pos:end="525:38">(<argument pos:start="525:31" pos:end="525:37"><expr pos:start="525:31" pos:end="525:37"><operator pos:start="525:31" pos:end="525:31">&amp;</operator><name pos:start="525:32" pos:end="525:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="527:13" pos:end="527:30"><expr pos:start="527:13" pos:end="527:29"><name pos:start="527:13" pos:end="527:17">tmp16</name> <operator pos:start="527:19" pos:end="527:19">=</operator> <operator pos:start="527:21" pos:end="527:21">*</operator><name pos:start="527:22" pos:end="527:27">tb_ptr</name><operator pos:start="527:28" pos:end="527:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="529:13" pos:end="529:29"><expr pos:start="529:13" pos:end="529:28"><name pos:start="529:13" pos:end="529:16">tmp8</name> <operator pos:start="529:18" pos:end="529:18">=</operator> <operator pos:start="529:20" pos:end="529:20">*</operator><name pos:start="529:21" pos:end="529:26">tb_ptr</name><operator pos:start="529:27" pos:end="529:28">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="531:13" pos:end="531:49"><expr pos:start="531:13" pos:end="531:48"><name pos:start="531:13" pos:end="531:17">tmp32</name> <operator pos:start="531:19" pos:end="531:19">=</operator> <operator pos:start="531:21" pos:end="531:21">(</operator><operator pos:start="531:22" pos:end="531:22">(</operator><operator pos:start="531:23" pos:end="531:23">(</operator><literal type="number" pos:start="531:24" pos:end="531:24">1</literal> <operator pos:start="531:26" pos:end="531:27">&lt;&lt;</operator> <name pos:start="531:29" pos:end="531:32">tmp8</name><operator pos:start="531:33" pos:end="531:33">)</operator> <operator pos:start="531:35" pos:end="531:35">-</operator> <literal type="number" pos:start="531:37" pos:end="531:37">1</literal><operator pos:start="531:38" pos:end="531:38">)</operator> <operator pos:start="531:40" pos:end="531:41">&lt;&lt;</operator> <name pos:start="531:43" pos:end="531:47">tmp16</name><operator pos:start="531:48" pos:end="531:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="533:13" pos:end="533:73"><expr pos:start="533:13" pos:end="533:72"><call pos:start="533:13" pos:end="533:72"><name pos:start="533:13" pos:end="533:27">tci_write_reg32</name><argument_list pos:start="533:28" pos:end="533:72">(<argument pos:start="533:29" pos:end="533:30"><expr pos:start="533:29" pos:end="533:30"><name pos:start="533:29" pos:end="533:30">t0</name></expr></argument>, <argument pos:start="533:33" pos:end="533:71"><expr pos:start="533:33" pos:end="533:71"><operator pos:start="533:33" pos:end="533:33">(</operator><name pos:start="533:34" pos:end="533:35">t1</name> <operator pos:start="533:37" pos:end="533:37">&amp;</operator> <operator pos:start="533:39" pos:end="533:39">~</operator><name pos:start="533:40" pos:end="533:44">tmp32</name><operator pos:start="533:45" pos:end="533:45">)</operator> <operator pos:start="533:47" pos:end="533:47">|</operator> <operator pos:start="533:49" pos:end="533:49">(</operator><operator pos:start="533:50" pos:end="533:50">(</operator><name pos:start="533:51" pos:end="533:52">t2</name> <operator pos:start="533:54" pos:end="533:55">&lt;&lt;</operator> <name pos:start="533:57" pos:end="533:61">tmp16</name><operator pos:start="533:62" pos:end="533:62">)</operator> <operator pos:start="533:64" pos:end="533:64">&amp;</operator> <name pos:start="533:66" pos:end="533:70">tmp32</name><operator pos:start="533:71" pos:end="533:71">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="535:13" pos:end="538:0">break;</break>

<cpp:endif pos:start="537:1" pos:end="537:6">#<cpp:directive pos:start="537:2" pos:end="537:6">endif</cpp:directive></cpp:endif>

        <case pos:start="539:9" pos:end="539:33">case <expr pos:start="539:14" pos:end="539:32"><name pos:start="539:14" pos:end="539:32">INDEX_op_brcond_i32</name></expr>:</case>

            <expr_stmt pos:start="541:13" pos:end="541:39"><expr pos:start="541:13" pos:end="541:38"><name pos:start="541:13" pos:end="541:14">t0</name> <operator pos:start="541:16" pos:end="541:16">=</operator> <call pos:start="541:18" pos:end="541:38"><name pos:start="541:18" pos:end="541:29">tci_read_r32</name><argument_list pos:start="541:30" pos:end="541:38">(<argument pos:start="541:31" pos:end="541:37"><expr pos:start="541:31" pos:end="541:37"><operator pos:start="541:31" pos:end="541:31">&amp;</operator><name pos:start="541:32" pos:end="541:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="543:13" pos:end="543:40"><expr pos:start="543:13" pos:end="543:39"><name pos:start="543:13" pos:end="543:14">t1</name> <operator pos:start="543:16" pos:end="543:16">=</operator> <call pos:start="543:18" pos:end="543:39"><name pos:start="543:18" pos:end="543:30">tci_read_ri32</name><argument_list pos:start="543:31" pos:end="543:39">(<argument pos:start="543:32" pos:end="543:38"><expr pos:start="543:32" pos:end="543:38"><operator pos:start="543:32" pos:end="543:32">&amp;</operator><name pos:start="543:33" pos:end="543:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="545:13" pos:end="545:34"><expr pos:start="545:13" pos:end="545:33"><name pos:start="545:13" pos:end="545:21">condition</name> <operator pos:start="545:23" pos:end="545:23">=</operator> <operator pos:start="545:25" pos:end="545:25">*</operator><name pos:start="545:26" pos:end="545:31">tb_ptr</name><operator pos:start="545:32" pos:end="545:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="547:13" pos:end="547:44"><expr pos:start="547:13" pos:end="547:43"><name pos:start="547:13" pos:end="547:17">label</name> <operator pos:start="547:19" pos:end="547:19">=</operator> <call pos:start="547:21" pos:end="547:43"><name pos:start="547:21" pos:end="547:34">tci_read_label</name><argument_list pos:start="547:35" pos:end="547:43">(<argument pos:start="547:36" pos:end="547:42"><expr pos:start="547:36" pos:end="547:42"><operator pos:start="547:36" pos:end="547:36">&amp;</operator><name pos:start="547:37" pos:end="547:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="549:13" pos:end="557:13"><if pos:start="549:13" pos:end="557:13">if <condition pos:start="549:16" pos:end="549:49">(<expr pos:start="549:17" pos:end="549:48"><call pos:start="549:17" pos:end="549:48"><name pos:start="549:17" pos:end="549:29">tci_compare32</name><argument_list pos:start="549:30" pos:end="549:48">(<argument pos:start="549:31" pos:end="549:32"><expr pos:start="549:31" pos:end="549:32"><name pos:start="549:31" pos:end="549:32">t0</name></expr></argument>, <argument pos:start="549:35" pos:end="549:36"><expr pos:start="549:35" pos:end="549:36"><name pos:start="549:35" pos:end="549:36">t1</name></expr></argument>, <argument pos:start="549:39" pos:end="549:47"><expr pos:start="549:39" pos:end="549:47"><name pos:start="549:39" pos:end="549:47">condition</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="549:51" pos:end="557:13">{<block_content pos:start="551:17" pos:end="555:25">

                <expr_stmt pos:start="551:17" pos:end="551:57"><expr pos:start="551:17" pos:end="551:56"><call pos:start="551:17" pos:end="551:56"><name pos:start="551:17" pos:end="551:22">assert</name><argument_list pos:start="551:23" pos:end="551:56">(<argument pos:start="551:24" pos:end="551:55"><expr pos:start="551:24" pos:end="551:55"><name pos:start="551:24" pos:end="551:29">tb_ptr</name> <operator pos:start="551:31" pos:end="551:32">==</operator> <name pos:start="551:34" pos:end="551:45">old_code_ptr</name> <operator pos:start="551:47" pos:end="551:47">+</operator> <name pos:start="551:49" pos:end="551:55">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="553:17" pos:end="553:42"><expr pos:start="553:17" pos:end="553:41"><name pos:start="553:17" pos:end="553:22">tb_ptr</name> <operator pos:start="553:24" pos:end="553:24">=</operator> <operator pos:start="553:26" pos:end="553:26">(</operator><name pos:start="553:27" pos:end="553:33">uint8_t</name> <operator pos:start="553:35" pos:end="553:35">*</operator><operator pos:start="553:36" pos:end="553:36">)</operator><name pos:start="553:37" pos:end="553:41">label</name></expr>;</expr_stmt>

                <continue pos:start="555:17" pos:end="555:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="559:13" pos:end="562:0">break;</break>

<cpp:if pos:start="561:1" pos:end="561:29">#<cpp:directive pos:start="561:2" pos:end="561:3">if</cpp:directive> <expr pos:start="561:5" pos:end="561:29"><name pos:start="561:5" pos:end="561:23">TCG_TARGET_REG_BITS</name> <operator pos:start="561:25" pos:end="561:26">==</operator> <literal type="number" pos:start="561:28" pos:end="561:29">32</literal></expr></cpp:if>

        <case pos:start="563:9" pos:end="563:31">case <expr pos:start="563:14" pos:end="563:30"><name pos:start="563:14" pos:end="563:30">INDEX_op_add2_i32</name></expr>:</case>

            <expr_stmt pos:start="565:13" pos:end="565:27"><expr pos:start="565:13" pos:end="565:26"><name pos:start="565:13" pos:end="565:14">t0</name> <operator pos:start="565:16" pos:end="565:16">=</operator> <operator pos:start="565:18" pos:end="565:18">*</operator><name pos:start="565:19" pos:end="565:24">tb_ptr</name><operator pos:start="565:25" pos:end="565:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="567:13" pos:end="567:27"><expr pos:start="567:13" pos:end="567:26"><name pos:start="567:13" pos:end="567:14">t1</name> <operator pos:start="567:16" pos:end="567:16">=</operator> <operator pos:start="567:18" pos:end="567:18">*</operator><name pos:start="567:19" pos:end="567:24">tb_ptr</name><operator pos:start="567:25" pos:end="567:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="569:13" pos:end="569:42"><expr pos:start="569:13" pos:end="569:41"><name pos:start="569:13" pos:end="569:17">tmp64</name> <operator pos:start="569:19" pos:end="569:19">=</operator> <call pos:start="569:21" pos:end="569:41"><name pos:start="569:21" pos:end="569:32">tci_read_r64</name><argument_list pos:start="569:33" pos:end="569:41">(<argument pos:start="569:34" pos:end="569:40"><expr pos:start="569:34" pos:end="569:40"><operator pos:start="569:34" pos:end="569:34">&amp;</operator><name pos:start="569:35" pos:end="569:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="571:13" pos:end="571:43"><expr pos:start="571:13" pos:end="571:42"><name pos:start="571:13" pos:end="571:17">tmp64</name> <operator pos:start="571:19" pos:end="571:20">+=</operator> <call pos:start="571:22" pos:end="571:42"><name pos:start="571:22" pos:end="571:33">tci_read_r64</name><argument_list pos:start="571:34" pos:end="571:42">(<argument pos:start="571:35" pos:end="571:41"><expr pos:start="571:35" pos:end="571:41"><operator pos:start="571:35" pos:end="571:35">&amp;</operator><name pos:start="571:36" pos:end="571:41">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="573:13" pos:end="573:43"><expr pos:start="573:13" pos:end="573:42"><call pos:start="573:13" pos:end="573:42"><name pos:start="573:13" pos:end="573:27">tci_write_reg64</name><argument_list pos:start="573:28" pos:end="573:42">(<argument pos:start="573:29" pos:end="573:30"><expr pos:start="573:29" pos:end="573:30"><name pos:start="573:29" pos:end="573:30">t1</name></expr></argument>, <argument pos:start="573:33" pos:end="573:34"><expr pos:start="573:33" pos:end="573:34"><name pos:start="573:33" pos:end="573:34">t0</name></expr></argument>, <argument pos:start="573:37" pos:end="573:41"><expr pos:start="573:37" pos:end="573:41"><name pos:start="573:37" pos:end="573:41">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="575:13" pos:end="575:18">break;</break>

        <case pos:start="577:9" pos:end="577:31">case <expr pos:start="577:14" pos:end="577:30"><name pos:start="577:14" pos:end="577:30">INDEX_op_sub2_i32</name></expr>:</case>

            <expr_stmt pos:start="579:13" pos:end="579:27"><expr pos:start="579:13" pos:end="579:26"><name pos:start="579:13" pos:end="579:14">t0</name> <operator pos:start="579:16" pos:end="579:16">=</operator> <operator pos:start="579:18" pos:end="579:18">*</operator><name pos:start="579:19" pos:end="579:24">tb_ptr</name><operator pos:start="579:25" pos:end="579:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="581:13" pos:end="581:27"><expr pos:start="581:13" pos:end="581:26"><name pos:start="581:13" pos:end="581:14">t1</name> <operator pos:start="581:16" pos:end="581:16">=</operator> <operator pos:start="581:18" pos:end="581:18">*</operator><name pos:start="581:19" pos:end="581:24">tb_ptr</name><operator pos:start="581:25" pos:end="581:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="583:13" pos:end="583:42"><expr pos:start="583:13" pos:end="583:41"><name pos:start="583:13" pos:end="583:17">tmp64</name> <operator pos:start="583:19" pos:end="583:19">=</operator> <call pos:start="583:21" pos:end="583:41"><name pos:start="583:21" pos:end="583:32">tci_read_r64</name><argument_list pos:start="583:33" pos:end="583:41">(<argument pos:start="583:34" pos:end="583:40"><expr pos:start="583:34" pos:end="583:40"><operator pos:start="583:34" pos:end="583:34">&amp;</operator><name pos:start="583:35" pos:end="583:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="585:13" pos:end="585:43"><expr pos:start="585:13" pos:end="585:42"><name pos:start="585:13" pos:end="585:17">tmp64</name> <operator pos:start="585:19" pos:end="585:20">-=</operator> <call pos:start="585:22" pos:end="585:42"><name pos:start="585:22" pos:end="585:33">tci_read_r64</name><argument_list pos:start="585:34" pos:end="585:42">(<argument pos:start="585:35" pos:end="585:41"><expr pos:start="585:35" pos:end="585:41"><operator pos:start="585:35" pos:end="585:35">&amp;</operator><name pos:start="585:36" pos:end="585:41">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="587:13" pos:end="587:43"><expr pos:start="587:13" pos:end="587:42"><call pos:start="587:13" pos:end="587:42"><name pos:start="587:13" pos:end="587:27">tci_write_reg64</name><argument_list pos:start="587:28" pos:end="587:42">(<argument pos:start="587:29" pos:end="587:30"><expr pos:start="587:29" pos:end="587:30"><name pos:start="587:29" pos:end="587:30">t1</name></expr></argument>, <argument pos:start="587:33" pos:end="587:34"><expr pos:start="587:33" pos:end="587:34"><name pos:start="587:33" pos:end="587:34">t0</name></expr></argument>, <argument pos:start="587:37" pos:end="587:41"><expr pos:start="587:37" pos:end="587:41"><name pos:start="587:37" pos:end="587:41">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="589:13" pos:end="589:18">break;</break>

        <case pos:start="591:9" pos:end="591:34">case <expr pos:start="591:14" pos:end="591:33"><name pos:start="591:14" pos:end="591:33">INDEX_op_brcond2_i32</name></expr>:</case>

            <expr_stmt pos:start="593:13" pos:end="593:42"><expr pos:start="593:13" pos:end="593:41"><name pos:start="593:13" pos:end="593:17">tmp64</name> <operator pos:start="593:19" pos:end="593:19">=</operator> <call pos:start="593:21" pos:end="593:41"><name pos:start="593:21" pos:end="593:32">tci_read_r64</name><argument_list pos:start="593:33" pos:end="593:41">(<argument pos:start="593:34" pos:end="593:40"><expr pos:start="593:34" pos:end="593:40"><operator pos:start="593:34" pos:end="593:34">&amp;</operator><name pos:start="593:35" pos:end="593:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="595:13" pos:end="595:41"><expr pos:start="595:13" pos:end="595:40"><name pos:start="595:13" pos:end="595:15">v64</name> <operator pos:start="595:17" pos:end="595:17">=</operator> <call pos:start="595:19" pos:end="595:40"><name pos:start="595:19" pos:end="595:31">tci_read_ri64</name><argument_list pos:start="595:32" pos:end="595:40">(<argument pos:start="595:33" pos:end="595:39"><expr pos:start="595:33" pos:end="595:39"><operator pos:start="595:33" pos:end="595:33">&amp;</operator><name pos:start="595:34" pos:end="595:39">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="597:13" pos:end="597:34"><expr pos:start="597:13" pos:end="597:33"><name pos:start="597:13" pos:end="597:21">condition</name> <operator pos:start="597:23" pos:end="597:23">=</operator> <operator pos:start="597:25" pos:end="597:25">*</operator><name pos:start="597:26" pos:end="597:31">tb_ptr</name><operator pos:start="597:32" pos:end="597:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="599:13" pos:end="599:44"><expr pos:start="599:13" pos:end="599:43"><name pos:start="599:13" pos:end="599:17">label</name> <operator pos:start="599:19" pos:end="599:19">=</operator> <call pos:start="599:21" pos:end="599:43"><name pos:start="599:21" pos:end="599:34">tci_read_label</name><argument_list pos:start="599:35" pos:end="599:43">(<argument pos:start="599:36" pos:end="599:42"><expr pos:start="599:36" pos:end="599:42"><operator pos:start="599:36" pos:end="599:36">&amp;</operator><name pos:start="599:37" pos:end="599:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="601:13" pos:end="609:13"><if pos:start="601:13" pos:end="609:13">if <condition pos:start="601:16" pos:end="601:53">(<expr pos:start="601:17" pos:end="601:52"><call pos:start="601:17" pos:end="601:52"><name pos:start="601:17" pos:end="601:29">tci_compare64</name><argument_list pos:start="601:30" pos:end="601:52">(<argument pos:start="601:31" pos:end="601:35"><expr pos:start="601:31" pos:end="601:35"><name pos:start="601:31" pos:end="601:35">tmp64</name></expr></argument>, <argument pos:start="601:38" pos:end="601:40"><expr pos:start="601:38" pos:end="601:40"><name pos:start="601:38" pos:end="601:40">v64</name></expr></argument>, <argument pos:start="601:43" pos:end="601:51"><expr pos:start="601:43" pos:end="601:51"><name pos:start="601:43" pos:end="601:51">condition</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="601:55" pos:end="609:13">{<block_content pos:start="603:17" pos:end="607:25">

                <expr_stmt pos:start="603:17" pos:end="603:57"><expr pos:start="603:17" pos:end="603:56"><call pos:start="603:17" pos:end="603:56"><name pos:start="603:17" pos:end="603:22">assert</name><argument_list pos:start="603:23" pos:end="603:56">(<argument pos:start="603:24" pos:end="603:55"><expr pos:start="603:24" pos:end="603:55"><name pos:start="603:24" pos:end="603:29">tb_ptr</name> <operator pos:start="603:31" pos:end="603:32">==</operator> <name pos:start="603:34" pos:end="603:45">old_code_ptr</name> <operator pos:start="603:47" pos:end="603:47">+</operator> <name pos:start="603:49" pos:end="603:55">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="605:17" pos:end="605:42"><expr pos:start="605:17" pos:end="605:41"><name pos:start="605:17" pos:end="605:22">tb_ptr</name> <operator pos:start="605:24" pos:end="605:24">=</operator> <operator pos:start="605:26" pos:end="605:26">(</operator><name pos:start="605:27" pos:end="605:33">uint8_t</name> <operator pos:start="605:35" pos:end="605:35">*</operator><operator pos:start="605:36" pos:end="605:36">)</operator><name pos:start="605:37" pos:end="605:41">label</name></expr>;</expr_stmt>

                <continue pos:start="607:17" pos:end="607:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="611:13" pos:end="611:18">break;</break>

        <case pos:start="613:9" pos:end="613:32">case <expr pos:start="613:14" pos:end="613:31"><name pos:start="613:14" pos:end="613:31">INDEX_op_mulu2_i32</name></expr>:</case>

            <expr_stmt pos:start="615:13" pos:end="615:27"><expr pos:start="615:13" pos:end="615:26"><name pos:start="615:13" pos:end="615:14">t0</name> <operator pos:start="615:16" pos:end="615:16">=</operator> <operator pos:start="615:18" pos:end="615:18">*</operator><name pos:start="615:19" pos:end="615:24">tb_ptr</name><operator pos:start="615:25" pos:end="615:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="617:13" pos:end="617:27"><expr pos:start="617:13" pos:end="617:26"><name pos:start="617:13" pos:end="617:14">t1</name> <operator pos:start="617:16" pos:end="617:16">=</operator> <operator pos:start="617:18" pos:end="617:18">*</operator><name pos:start="617:19" pos:end="617:24">tb_ptr</name><operator pos:start="617:25" pos:end="617:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="619:13" pos:end="619:39"><expr pos:start="619:13" pos:end="619:38"><name pos:start="619:13" pos:end="619:14">t2</name> <operator pos:start="619:16" pos:end="619:16">=</operator> <call pos:start="619:18" pos:end="619:38"><name pos:start="619:18" pos:end="619:29">tci_read_r32</name><argument_list pos:start="619:30" pos:end="619:38">(<argument pos:start="619:31" pos:end="619:37"><expr pos:start="619:31" pos:end="619:37"><operator pos:start="619:31" pos:end="619:31">&amp;</operator><name pos:start="619:32" pos:end="619:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="621:13" pos:end="621:42"><expr pos:start="621:13" pos:end="621:41"><name pos:start="621:13" pos:end="621:17">tmp64</name> <operator pos:start="621:19" pos:end="621:19">=</operator> <call pos:start="621:21" pos:end="621:41"><name pos:start="621:21" pos:end="621:32">tci_read_r32</name><argument_list pos:start="621:33" pos:end="621:41">(<argument pos:start="621:34" pos:end="621:40"><expr pos:start="621:34" pos:end="621:40"><operator pos:start="621:34" pos:end="621:34">&amp;</operator><name pos:start="621:35" pos:end="621:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="623:13" pos:end="623:48"><expr pos:start="623:13" pos:end="623:47"><call pos:start="623:13" pos:end="623:47"><name pos:start="623:13" pos:end="623:27">tci_write_reg64</name><argument_list pos:start="623:28" pos:end="623:47">(<argument pos:start="623:29" pos:end="623:30"><expr pos:start="623:29" pos:end="623:30"><name pos:start="623:29" pos:end="623:30">t1</name></expr></argument>, <argument pos:start="623:33" pos:end="623:34"><expr pos:start="623:33" pos:end="623:34"><name pos:start="623:33" pos:end="623:34">t0</name></expr></argument>, <argument pos:start="623:37" pos:end="623:46"><expr pos:start="623:37" pos:end="623:46"><name pos:start="623:37" pos:end="623:38">t2</name> <operator pos:start="623:40" pos:end="623:40">*</operator> <name pos:start="623:42" pos:end="623:46">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="625:13" pos:end="630:0">break;</break>

<cpp:endif pos:start="627:1" pos:end="627:6">#<cpp:directive pos:start="627:2" pos:end="627:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="627:8" pos:end="627:38">/* TCG_TARGET_REG_BITS == 32 */</comment>

<cpp:if pos:start="629:1" pos:end="629:28">#<cpp:directive pos:start="629:2" pos:end="629:3">if</cpp:directive> <expr pos:start="629:5" pos:end="629:28"><name pos:start="629:5" pos:end="629:28">TCG_TARGET_HAS_ext8s_i32</name></expr></cpp:if>

        <case pos:start="631:9" pos:end="631:32">case <expr pos:start="631:14" pos:end="631:31"><name pos:start="631:14" pos:end="631:31">INDEX_op_ext8s_i32</name></expr>:</case>

            <expr_stmt pos:start="633:13" pos:end="633:27"><expr pos:start="633:13" pos:end="633:26"><name pos:start="633:13" pos:end="633:14">t0</name> <operator pos:start="633:16" pos:end="633:16">=</operator> <operator pos:start="633:18" pos:end="633:18">*</operator><name pos:start="633:19" pos:end="633:24">tb_ptr</name><operator pos:start="633:25" pos:end="633:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="635:13" pos:end="635:39"><expr pos:start="635:13" pos:end="635:38"><name pos:start="635:13" pos:end="635:14">t1</name> <operator pos:start="635:16" pos:end="635:16">=</operator> <call pos:start="635:18" pos:end="635:38"><name pos:start="635:18" pos:end="635:29">tci_read_r8s</name><argument_list pos:start="635:30" pos:end="635:38">(<argument pos:start="635:31" pos:end="635:37"><expr pos:start="635:31" pos:end="635:37"><operator pos:start="635:31" pos:end="635:31">&amp;</operator><name pos:start="635:32" pos:end="635:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="637:13" pos:end="637:36"><expr pos:start="637:13" pos:end="637:35"><call pos:start="637:13" pos:end="637:35"><name pos:start="637:13" pos:end="637:27">tci_write_reg32</name><argument_list pos:start="637:28" pos:end="637:35">(<argument pos:start="637:29" pos:end="637:30"><expr pos:start="637:29" pos:end="637:30"><name pos:start="637:29" pos:end="637:30">t0</name></expr></argument>, <argument pos:start="637:33" pos:end="637:34"><expr pos:start="637:33" pos:end="637:34"><name pos:start="637:33" pos:end="637:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="639:13" pos:end="644:0">break;</break>

<cpp:endif pos:start="641:1" pos:end="641:6">#<cpp:directive pos:start="641:2" pos:end="641:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="643:1" pos:end="643:29">#<cpp:directive pos:start="643:2" pos:end="643:3">if</cpp:directive> <expr pos:start="643:5" pos:end="643:29"><name pos:start="643:5" pos:end="643:29">TCG_TARGET_HAS_ext16s_i32</name></expr></cpp:if>

        <case pos:start="645:9" pos:end="645:33">case <expr pos:start="645:14" pos:end="645:32"><name pos:start="645:14" pos:end="645:32">INDEX_op_ext16s_i32</name></expr>:</case>

            <expr_stmt pos:start="647:13" pos:end="647:27"><expr pos:start="647:13" pos:end="647:26"><name pos:start="647:13" pos:end="647:14">t0</name> <operator pos:start="647:16" pos:end="647:16">=</operator> <operator pos:start="647:18" pos:end="647:18">*</operator><name pos:start="647:19" pos:end="647:24">tb_ptr</name><operator pos:start="647:25" pos:end="647:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="649:13" pos:end="649:40"><expr pos:start="649:13" pos:end="649:39"><name pos:start="649:13" pos:end="649:14">t1</name> <operator pos:start="649:16" pos:end="649:16">=</operator> <call pos:start="649:18" pos:end="649:39"><name pos:start="649:18" pos:end="649:30">tci_read_r16s</name><argument_list pos:start="649:31" pos:end="649:39">(<argument pos:start="649:32" pos:end="649:38"><expr pos:start="649:32" pos:end="649:38"><operator pos:start="649:32" pos:end="649:32">&amp;</operator><name pos:start="649:33" pos:end="649:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="651:13" pos:end="651:36"><expr pos:start="651:13" pos:end="651:35"><call pos:start="651:13" pos:end="651:35"><name pos:start="651:13" pos:end="651:27">tci_write_reg32</name><argument_list pos:start="651:28" pos:end="651:35">(<argument pos:start="651:29" pos:end="651:30"><expr pos:start="651:29" pos:end="651:30"><name pos:start="651:29" pos:end="651:30">t0</name></expr></argument>, <argument pos:start="651:33" pos:end="651:34"><expr pos:start="651:33" pos:end="651:34"><name pos:start="651:33" pos:end="651:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="653:13" pos:end="658:0">break;</break>

<cpp:endif pos:start="655:1" pos:end="655:6">#<cpp:directive pos:start="655:2" pos:end="655:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="657:1" pos:end="657:28">#<cpp:directive pos:start="657:2" pos:end="657:3">if</cpp:directive> <expr pos:start="657:5" pos:end="657:28"><name pos:start="657:5" pos:end="657:28">TCG_TARGET_HAS_ext8u_i32</name></expr></cpp:if>

        <case pos:start="659:9" pos:end="659:32">case <expr pos:start="659:14" pos:end="659:31"><name pos:start="659:14" pos:end="659:31">INDEX_op_ext8u_i32</name></expr>:</case>

            <expr_stmt pos:start="661:13" pos:end="661:27"><expr pos:start="661:13" pos:end="661:26"><name pos:start="661:13" pos:end="661:14">t0</name> <operator pos:start="661:16" pos:end="661:16">=</operator> <operator pos:start="661:18" pos:end="661:18">*</operator><name pos:start="661:19" pos:end="661:24">tb_ptr</name><operator pos:start="661:25" pos:end="661:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="663:13" pos:end="663:38"><expr pos:start="663:13" pos:end="663:37"><name pos:start="663:13" pos:end="663:14">t1</name> <operator pos:start="663:16" pos:end="663:16">=</operator> <call pos:start="663:18" pos:end="663:37"><name pos:start="663:18" pos:end="663:28">tci_read_r8</name><argument_list pos:start="663:29" pos:end="663:37">(<argument pos:start="663:30" pos:end="663:36"><expr pos:start="663:30" pos:end="663:36"><operator pos:start="663:30" pos:end="663:30">&amp;</operator><name pos:start="663:31" pos:end="663:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="665:13" pos:end="665:36"><expr pos:start="665:13" pos:end="665:35"><call pos:start="665:13" pos:end="665:35"><name pos:start="665:13" pos:end="665:27">tci_write_reg32</name><argument_list pos:start="665:28" pos:end="665:35">(<argument pos:start="665:29" pos:end="665:30"><expr pos:start="665:29" pos:end="665:30"><name pos:start="665:29" pos:end="665:30">t0</name></expr></argument>, <argument pos:start="665:33" pos:end="665:34"><expr pos:start="665:33" pos:end="665:34"><name pos:start="665:33" pos:end="665:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="667:13" pos:end="672:0">break;</break>

<cpp:endif pos:start="669:1" pos:end="669:6">#<cpp:directive pos:start="669:2" pos:end="669:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="671:1" pos:end="671:29">#<cpp:directive pos:start="671:2" pos:end="671:3">if</cpp:directive> <expr pos:start="671:5" pos:end="671:29"><name pos:start="671:5" pos:end="671:29">TCG_TARGET_HAS_ext16u_i32</name></expr></cpp:if>

        <case pos:start="673:9" pos:end="673:33">case <expr pos:start="673:14" pos:end="673:32"><name pos:start="673:14" pos:end="673:32">INDEX_op_ext16u_i32</name></expr>:</case>

            <expr_stmt pos:start="675:13" pos:end="675:27"><expr pos:start="675:13" pos:end="675:26"><name pos:start="675:13" pos:end="675:14">t0</name> <operator pos:start="675:16" pos:end="675:16">=</operator> <operator pos:start="675:18" pos:end="675:18">*</operator><name pos:start="675:19" pos:end="675:24">tb_ptr</name><operator pos:start="675:25" pos:end="675:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="677:13" pos:end="677:39"><expr pos:start="677:13" pos:end="677:38"><name pos:start="677:13" pos:end="677:14">t1</name> <operator pos:start="677:16" pos:end="677:16">=</operator> <call pos:start="677:18" pos:end="677:38"><name pos:start="677:18" pos:end="677:29">tci_read_r16</name><argument_list pos:start="677:30" pos:end="677:38">(<argument pos:start="677:31" pos:end="677:37"><expr pos:start="677:31" pos:end="677:37"><operator pos:start="677:31" pos:end="677:31">&amp;</operator><name pos:start="677:32" pos:end="677:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="679:13" pos:end="679:36"><expr pos:start="679:13" pos:end="679:35"><call pos:start="679:13" pos:end="679:35"><name pos:start="679:13" pos:end="679:27">tci_write_reg32</name><argument_list pos:start="679:28" pos:end="679:35">(<argument pos:start="679:29" pos:end="679:30"><expr pos:start="679:29" pos:end="679:30"><name pos:start="679:29" pos:end="679:30">t0</name></expr></argument>, <argument pos:start="679:33" pos:end="679:34"><expr pos:start="679:33" pos:end="679:34"><name pos:start="679:33" pos:end="679:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="681:13" pos:end="686:0">break;</break>

<cpp:endif pos:start="683:1" pos:end="683:6">#<cpp:directive pos:start="683:2" pos:end="683:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="685:1" pos:end="685:30">#<cpp:directive pos:start="685:2" pos:end="685:3">if</cpp:directive> <expr pos:start="685:5" pos:end="685:30"><name pos:start="685:5" pos:end="685:30">TCG_TARGET_HAS_bswap16_i32</name></expr></cpp:if>

        <case pos:start="687:9" pos:end="687:34">case <expr pos:start="687:14" pos:end="687:33"><name pos:start="687:14" pos:end="687:33">INDEX_op_bswap16_i32</name></expr>:</case>

            <expr_stmt pos:start="689:13" pos:end="689:27"><expr pos:start="689:13" pos:end="689:26"><name pos:start="689:13" pos:end="689:14">t0</name> <operator pos:start="689:16" pos:end="689:16">=</operator> <operator pos:start="689:18" pos:end="689:18">*</operator><name pos:start="689:19" pos:end="689:24">tb_ptr</name><operator pos:start="689:25" pos:end="689:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="691:13" pos:end="691:39"><expr pos:start="691:13" pos:end="691:38"><name pos:start="691:13" pos:end="691:14">t1</name> <operator pos:start="691:16" pos:end="691:16">=</operator> <call pos:start="691:18" pos:end="691:38"><name pos:start="691:18" pos:end="691:29">tci_read_r16</name><argument_list pos:start="691:30" pos:end="691:38">(<argument pos:start="691:31" pos:end="691:37"><expr pos:start="691:31" pos:end="691:37"><operator pos:start="691:31" pos:end="691:31">&amp;</operator><name pos:start="691:32" pos:end="691:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="693:13" pos:end="693:45"><expr pos:start="693:13" pos:end="693:44"><call pos:start="693:13" pos:end="693:44"><name pos:start="693:13" pos:end="693:27">tci_write_reg32</name><argument_list pos:start="693:28" pos:end="693:44">(<argument pos:start="693:29" pos:end="693:30"><expr pos:start="693:29" pos:end="693:30"><name pos:start="693:29" pos:end="693:30">t0</name></expr></argument>, <argument pos:start="693:33" pos:end="693:43"><expr pos:start="693:33" pos:end="693:43"><call pos:start="693:33" pos:end="693:43"><name pos:start="693:33" pos:end="693:39">bswap16</name><argument_list pos:start="693:40" pos:end="693:43">(<argument pos:start="693:41" pos:end="693:42"><expr pos:start="693:41" pos:end="693:42"><name pos:start="693:41" pos:end="693:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="695:13" pos:end="700:0">break;</break>

<cpp:endif pos:start="697:1" pos:end="697:6">#<cpp:directive pos:start="697:2" pos:end="697:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="699:1" pos:end="699:30">#<cpp:directive pos:start="699:2" pos:end="699:3">if</cpp:directive> <expr pos:start="699:5" pos:end="699:30"><name pos:start="699:5" pos:end="699:30">TCG_TARGET_HAS_bswap32_i32</name></expr></cpp:if>

        <case pos:start="701:9" pos:end="701:34">case <expr pos:start="701:14" pos:end="701:33"><name pos:start="701:14" pos:end="701:33">INDEX_op_bswap32_i32</name></expr>:</case>

            <expr_stmt pos:start="703:13" pos:end="703:27"><expr pos:start="703:13" pos:end="703:26"><name pos:start="703:13" pos:end="703:14">t0</name> <operator pos:start="703:16" pos:end="703:16">=</operator> <operator pos:start="703:18" pos:end="703:18">*</operator><name pos:start="703:19" pos:end="703:24">tb_ptr</name><operator pos:start="703:25" pos:end="703:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="705:13" pos:end="705:39"><expr pos:start="705:13" pos:end="705:38"><name pos:start="705:13" pos:end="705:14">t1</name> <operator pos:start="705:16" pos:end="705:16">=</operator> <call pos:start="705:18" pos:end="705:38"><name pos:start="705:18" pos:end="705:29">tci_read_r32</name><argument_list pos:start="705:30" pos:end="705:38">(<argument pos:start="705:31" pos:end="705:37"><expr pos:start="705:31" pos:end="705:37"><operator pos:start="705:31" pos:end="705:31">&amp;</operator><name pos:start="705:32" pos:end="705:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="707:13" pos:end="707:45"><expr pos:start="707:13" pos:end="707:44"><call pos:start="707:13" pos:end="707:44"><name pos:start="707:13" pos:end="707:27">tci_write_reg32</name><argument_list pos:start="707:28" pos:end="707:44">(<argument pos:start="707:29" pos:end="707:30"><expr pos:start="707:29" pos:end="707:30"><name pos:start="707:29" pos:end="707:30">t0</name></expr></argument>, <argument pos:start="707:33" pos:end="707:43"><expr pos:start="707:33" pos:end="707:43"><call pos:start="707:33" pos:end="707:43"><name pos:start="707:33" pos:end="707:39">bswap32</name><argument_list pos:start="707:40" pos:end="707:43">(<argument pos:start="707:41" pos:end="707:42"><expr pos:start="707:41" pos:end="707:42"><name pos:start="707:41" pos:end="707:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="709:13" pos:end="714:0">break;</break>

<cpp:endif pos:start="711:1" pos:end="711:6">#<cpp:directive pos:start="711:2" pos:end="711:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="713:1" pos:end="713:26">#<cpp:directive pos:start="713:2" pos:end="713:3">if</cpp:directive> <expr pos:start="713:5" pos:end="713:26"><name pos:start="713:5" pos:end="713:26">TCG_TARGET_HAS_not_i32</name></expr></cpp:if>

        <case pos:start="715:9" pos:end="715:30">case <expr pos:start="715:14" pos:end="715:29"><name pos:start="715:14" pos:end="715:29">INDEX_op_not_i32</name></expr>:</case>

            <expr_stmt pos:start="717:13" pos:end="717:27"><expr pos:start="717:13" pos:end="717:26"><name pos:start="717:13" pos:end="717:14">t0</name> <operator pos:start="717:16" pos:end="717:16">=</operator> <operator pos:start="717:18" pos:end="717:18">*</operator><name pos:start="717:19" pos:end="717:24">tb_ptr</name><operator pos:start="717:25" pos:end="717:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="719:13" pos:end="719:39"><expr pos:start="719:13" pos:end="719:38"><name pos:start="719:13" pos:end="719:14">t1</name> <operator pos:start="719:16" pos:end="719:16">=</operator> <call pos:start="719:18" pos:end="719:38"><name pos:start="719:18" pos:end="719:29">tci_read_r32</name><argument_list pos:start="719:30" pos:end="719:38">(<argument pos:start="719:31" pos:end="719:37"><expr pos:start="719:31" pos:end="719:37"><operator pos:start="719:31" pos:end="719:31">&amp;</operator><name pos:start="719:32" pos:end="719:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="721:13" pos:end="721:37"><expr pos:start="721:13" pos:end="721:36"><call pos:start="721:13" pos:end="721:36"><name pos:start="721:13" pos:end="721:27">tci_write_reg32</name><argument_list pos:start="721:28" pos:end="721:36">(<argument pos:start="721:29" pos:end="721:30"><expr pos:start="721:29" pos:end="721:30"><name pos:start="721:29" pos:end="721:30">t0</name></expr></argument>, <argument pos:start="721:33" pos:end="721:35"><expr pos:start="721:33" pos:end="721:35"><operator pos:start="721:33" pos:end="721:33">~</operator><name pos:start="721:34" pos:end="721:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="723:13" pos:end="728:0">break;</break>

<cpp:endif pos:start="725:1" pos:end="725:6">#<cpp:directive pos:start="725:2" pos:end="725:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="727:1" pos:end="727:26">#<cpp:directive pos:start="727:2" pos:end="727:3">if</cpp:directive> <expr pos:start="727:5" pos:end="727:26"><name pos:start="727:5" pos:end="727:26">TCG_TARGET_HAS_neg_i32</name></expr></cpp:if>

        <case pos:start="729:9" pos:end="729:30">case <expr pos:start="729:14" pos:end="729:29"><name pos:start="729:14" pos:end="729:29">INDEX_op_neg_i32</name></expr>:</case>

            <expr_stmt pos:start="731:13" pos:end="731:27"><expr pos:start="731:13" pos:end="731:26"><name pos:start="731:13" pos:end="731:14">t0</name> <operator pos:start="731:16" pos:end="731:16">=</operator> <operator pos:start="731:18" pos:end="731:18">*</operator><name pos:start="731:19" pos:end="731:24">tb_ptr</name><operator pos:start="731:25" pos:end="731:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="733:13" pos:end="733:39"><expr pos:start="733:13" pos:end="733:38"><name pos:start="733:13" pos:end="733:14">t1</name> <operator pos:start="733:16" pos:end="733:16">=</operator> <call pos:start="733:18" pos:end="733:38"><name pos:start="733:18" pos:end="733:29">tci_read_r32</name><argument_list pos:start="733:30" pos:end="733:38">(<argument pos:start="733:31" pos:end="733:37"><expr pos:start="733:31" pos:end="733:37"><operator pos:start="733:31" pos:end="733:31">&amp;</operator><name pos:start="733:32" pos:end="733:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="735:13" pos:end="735:37"><expr pos:start="735:13" pos:end="735:36"><call pos:start="735:13" pos:end="735:36"><name pos:start="735:13" pos:end="735:27">tci_write_reg32</name><argument_list pos:start="735:28" pos:end="735:36">(<argument pos:start="735:29" pos:end="735:30"><expr pos:start="735:29" pos:end="735:30"><name pos:start="735:29" pos:end="735:30">t0</name></expr></argument>, <argument pos:start="735:33" pos:end="735:35"><expr pos:start="735:33" pos:end="735:35"><operator pos:start="735:33" pos:end="735:33">-</operator><name pos:start="735:34" pos:end="735:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="737:13" pos:end="742:0">break;</break>

<cpp:endif pos:start="739:1" pos:end="739:6">#<cpp:directive pos:start="739:2" pos:end="739:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="741:1" pos:end="741:29">#<cpp:directive pos:start="741:2" pos:end="741:3">if</cpp:directive> <expr pos:start="741:5" pos:end="741:29"><name pos:start="741:5" pos:end="741:23">TCG_TARGET_REG_BITS</name> <operator pos:start="741:25" pos:end="741:26">==</operator> <literal type="number" pos:start="741:28" pos:end="741:29">64</literal></expr></cpp:if>

        <case pos:start="743:9" pos:end="743:30">case <expr pos:start="743:14" pos:end="743:29"><name pos:start="743:14" pos:end="743:29">INDEX_op_mov_i64</name></expr>:</case>

            <expr_stmt pos:start="745:13" pos:end="745:27"><expr pos:start="745:13" pos:end="745:26"><name pos:start="745:13" pos:end="745:14">t0</name> <operator pos:start="745:16" pos:end="745:16">=</operator> <operator pos:start="745:18" pos:end="745:18">*</operator><name pos:start="745:19" pos:end="745:24">tb_ptr</name><operator pos:start="745:25" pos:end="745:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="747:13" pos:end="747:39"><expr pos:start="747:13" pos:end="747:38"><name pos:start="747:13" pos:end="747:14">t1</name> <operator pos:start="747:16" pos:end="747:16">=</operator> <call pos:start="747:18" pos:end="747:38"><name pos:start="747:18" pos:end="747:29">tci_read_r64</name><argument_list pos:start="747:30" pos:end="747:38">(<argument pos:start="747:31" pos:end="747:37"><expr pos:start="747:31" pos:end="747:37"><operator pos:start="747:31" pos:end="747:31">&amp;</operator><name pos:start="747:32" pos:end="747:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="749:13" pos:end="749:36"><expr pos:start="749:13" pos:end="749:35"><call pos:start="749:13" pos:end="749:35"><name pos:start="749:13" pos:end="749:27">tci_write_reg64</name><argument_list pos:start="749:28" pos:end="749:35">(<argument pos:start="749:29" pos:end="749:30"><expr pos:start="749:29" pos:end="749:30"><name pos:start="749:29" pos:end="749:30">t0</name></expr></argument>, <argument pos:start="749:33" pos:end="749:34"><expr pos:start="749:33" pos:end="749:34"><name pos:start="749:33" pos:end="749:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="751:13" pos:end="751:18">break;</break>

        <case pos:start="753:9" pos:end="753:31">case <expr pos:start="753:14" pos:end="753:30"><name pos:start="753:14" pos:end="753:30">INDEX_op_movi_i64</name></expr>:</case>

            <expr_stmt pos:start="755:13" pos:end="755:27"><expr pos:start="755:13" pos:end="755:26"><name pos:start="755:13" pos:end="755:14">t0</name> <operator pos:start="755:16" pos:end="755:16">=</operator> <operator pos:start="755:18" pos:end="755:18">*</operator><name pos:start="755:19" pos:end="755:24">tb_ptr</name><operator pos:start="755:25" pos:end="755:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="757:13" pos:end="757:39"><expr pos:start="757:13" pos:end="757:38"><name pos:start="757:13" pos:end="757:14">t1</name> <operator pos:start="757:16" pos:end="757:16">=</operator> <call pos:start="757:18" pos:end="757:38"><name pos:start="757:18" pos:end="757:29">tci_read_i64</name><argument_list pos:start="757:30" pos:end="757:38">(<argument pos:start="757:31" pos:end="757:37"><expr pos:start="757:31" pos:end="757:37"><operator pos:start="757:31" pos:end="757:31">&amp;</operator><name pos:start="757:32" pos:end="757:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="759:13" pos:end="759:36"><expr pos:start="759:13" pos:end="759:35"><call pos:start="759:13" pos:end="759:35"><name pos:start="759:13" pos:end="759:27">tci_write_reg64</name><argument_list pos:start="759:28" pos:end="759:35">(<argument pos:start="759:29" pos:end="759:30"><expr pos:start="759:29" pos:end="759:30"><name pos:start="759:29" pos:end="759:30">t0</name></expr></argument>, <argument pos:start="759:33" pos:end="759:34"><expr pos:start="759:33" pos:end="759:34"><name pos:start="759:33" pos:end="759:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="761:13" pos:end="761:18">break;</break>



            <comment type="block" pos:start="765:13" pos:end="765:49">/* Load/store operations (64 bit). */</comment>



        <case pos:start="769:9" pos:end="769:31">case <expr pos:start="769:14" pos:end="769:30"><name pos:start="769:14" pos:end="769:30">INDEX_op_ld8u_i64</name></expr>:</case>

            <expr_stmt pos:start="771:13" pos:end="771:27"><expr pos:start="771:13" pos:end="771:26"><name pos:start="771:13" pos:end="771:14">t0</name> <operator pos:start="771:16" pos:end="771:16">=</operator> <operator pos:start="771:18" pos:end="771:18">*</operator><name pos:start="771:19" pos:end="771:24">tb_ptr</name><operator pos:start="771:25" pos:end="771:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="773:13" pos:end="773:37"><expr pos:start="773:13" pos:end="773:36"><name pos:start="773:13" pos:end="773:14">t1</name> <operator pos:start="773:16" pos:end="773:16">=</operator> <call pos:start="773:18" pos:end="773:36"><name pos:start="773:18" pos:end="773:27">tci_read_r</name><argument_list pos:start="773:28" pos:end="773:36">(<argument pos:start="773:29" pos:end="773:35"><expr pos:start="773:29" pos:end="773:35"><operator pos:start="773:29" pos:end="773:29">&amp;</operator><name pos:start="773:30" pos:end="773:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="775:13" pos:end="775:39"><expr pos:start="775:13" pos:end="775:38"><name pos:start="775:13" pos:end="775:14">t2</name> <operator pos:start="775:16" pos:end="775:16">=</operator> <call pos:start="775:18" pos:end="775:38"><name pos:start="775:18" pos:end="775:29">tci_read_s32</name><argument_list pos:start="775:30" pos:end="775:38">(<argument pos:start="775:31" pos:end="775:37"><expr pos:start="775:31" pos:end="775:37"><operator pos:start="775:31" pos:end="775:31">&amp;</operator><name pos:start="775:32" pos:end="775:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="777:13" pos:end="777:54"><expr pos:start="777:13" pos:end="777:53"><call pos:start="777:13" pos:end="777:53"><name pos:start="777:13" pos:end="777:26">tci_write_reg8</name><argument_list pos:start="777:27" pos:end="777:53">(<argument pos:start="777:28" pos:end="777:29"><expr pos:start="777:28" pos:end="777:29"><name pos:start="777:28" pos:end="777:29">t0</name></expr></argument>, <argument pos:start="777:32" pos:end="777:52"><expr pos:start="777:32" pos:end="777:52"><operator pos:start="777:32" pos:end="777:32">*</operator><operator pos:start="777:33" pos:end="777:33">(</operator><name pos:start="777:34" pos:end="777:40">uint8_t</name> <operator pos:start="777:42" pos:end="777:42">*</operator><operator pos:start="777:43" pos:end="777:43">)</operator><operator pos:start="777:44" pos:end="777:44">(</operator><name pos:start="777:45" pos:end="777:46">t1</name> <operator pos:start="777:48" pos:end="777:48">+</operator> <name pos:start="777:50" pos:end="777:51">t2</name><operator pos:start="777:52" pos:end="777:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="779:13" pos:end="779:18">break;</break>

        <case pos:start="781:9" pos:end="781:31">case <expr pos:start="781:14" pos:end="781:30"><name pos:start="781:14" pos:end="781:30">INDEX_op_ld8s_i64</name></expr>:</case>

        <case pos:start="783:9" pos:end="783:32">case <expr pos:start="783:14" pos:end="783:31"><name pos:start="783:14" pos:end="783:31">INDEX_op_ld16u_i64</name></expr>:</case>

        <case pos:start="785:9" pos:end="785:32">case <expr pos:start="785:14" pos:end="785:31"><name pos:start="785:14" pos:end="785:31">INDEX_op_ld16s_i64</name></expr>:</case>

            <expr_stmt pos:start="787:13" pos:end="787:19"><expr pos:start="787:13" pos:end="787:18"><call pos:start="787:13" pos:end="787:18"><name pos:start="787:13" pos:end="787:16">TODO</name><argument_list pos:start="787:17" pos:end="787:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="789:13" pos:end="789:18">break;</break>

        <case pos:start="791:9" pos:end="791:32">case <expr pos:start="791:14" pos:end="791:31"><name pos:start="791:14" pos:end="791:31">INDEX_op_ld32u_i64</name></expr>:</case>

            <expr_stmt pos:start="793:13" pos:end="793:27"><expr pos:start="793:13" pos:end="793:26"><name pos:start="793:13" pos:end="793:14">t0</name> <operator pos:start="793:16" pos:end="793:16">=</operator> <operator pos:start="793:18" pos:end="793:18">*</operator><name pos:start="793:19" pos:end="793:24">tb_ptr</name><operator pos:start="793:25" pos:end="793:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="795:13" pos:end="795:37"><expr pos:start="795:13" pos:end="795:36"><name pos:start="795:13" pos:end="795:14">t1</name> <operator pos:start="795:16" pos:end="795:16">=</operator> <call pos:start="795:18" pos:end="795:36"><name pos:start="795:18" pos:end="795:27">tci_read_r</name><argument_list pos:start="795:28" pos:end="795:36">(<argument pos:start="795:29" pos:end="795:35"><expr pos:start="795:29" pos:end="795:35"><operator pos:start="795:29" pos:end="795:29">&amp;</operator><name pos:start="795:30" pos:end="795:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="797:13" pos:end="797:39"><expr pos:start="797:13" pos:end="797:38"><name pos:start="797:13" pos:end="797:14">t2</name> <operator pos:start="797:16" pos:end="797:16">=</operator> <call pos:start="797:18" pos:end="797:38"><name pos:start="797:18" pos:end="797:29">tci_read_s32</name><argument_list pos:start="797:30" pos:end="797:38">(<argument pos:start="797:31" pos:end="797:37"><expr pos:start="797:31" pos:end="797:37"><operator pos:start="797:31" pos:end="797:31">&amp;</operator><name pos:start="797:32" pos:end="797:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="799:13" pos:end="799:56"><expr pos:start="799:13" pos:end="799:55"><call pos:start="799:13" pos:end="799:55"><name pos:start="799:13" pos:end="799:27">tci_write_reg32</name><argument_list pos:start="799:28" pos:end="799:55">(<argument pos:start="799:29" pos:end="799:30"><expr pos:start="799:29" pos:end="799:30"><name pos:start="799:29" pos:end="799:30">t0</name></expr></argument>, <argument pos:start="799:33" pos:end="799:54"><expr pos:start="799:33" pos:end="799:54"><operator pos:start="799:33" pos:end="799:33">*</operator><operator pos:start="799:34" pos:end="799:34">(</operator><name pos:start="799:35" pos:end="799:42">uint32_t</name> <operator pos:start="799:44" pos:end="799:44">*</operator><operator pos:start="799:45" pos:end="799:45">)</operator><operator pos:start="799:46" pos:end="799:46">(</operator><name pos:start="799:47" pos:end="799:48">t1</name> <operator pos:start="799:50" pos:end="799:50">+</operator> <name pos:start="799:52" pos:end="799:53">t2</name><operator pos:start="799:54" pos:end="799:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="801:13" pos:end="801:18">break;</break>

        <case pos:start="803:9" pos:end="803:32">case <expr pos:start="803:14" pos:end="803:31"><name pos:start="803:14" pos:end="803:31">INDEX_op_ld32s_i64</name></expr>:</case>

            <expr_stmt pos:start="805:13" pos:end="805:27"><expr pos:start="805:13" pos:end="805:26"><name pos:start="805:13" pos:end="805:14">t0</name> <operator pos:start="805:16" pos:end="805:16">=</operator> <operator pos:start="805:18" pos:end="805:18">*</operator><name pos:start="805:19" pos:end="805:24">tb_ptr</name><operator pos:start="805:25" pos:end="805:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="807:13" pos:end="807:37"><expr pos:start="807:13" pos:end="807:36"><name pos:start="807:13" pos:end="807:14">t1</name> <operator pos:start="807:16" pos:end="807:16">=</operator> <call pos:start="807:18" pos:end="807:36"><name pos:start="807:18" pos:end="807:27">tci_read_r</name><argument_list pos:start="807:28" pos:end="807:36">(<argument pos:start="807:29" pos:end="807:35"><expr pos:start="807:29" pos:end="807:35"><operator pos:start="807:29" pos:end="807:29">&amp;</operator><name pos:start="807:30" pos:end="807:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="809:13" pos:end="809:39"><expr pos:start="809:13" pos:end="809:38"><name pos:start="809:13" pos:end="809:14">t2</name> <operator pos:start="809:16" pos:end="809:16">=</operator> <call pos:start="809:18" pos:end="809:38"><name pos:start="809:18" pos:end="809:29">tci_read_s32</name><argument_list pos:start="809:30" pos:end="809:38">(<argument pos:start="809:31" pos:end="809:37"><expr pos:start="809:31" pos:end="809:37"><operator pos:start="809:31" pos:end="809:31">&amp;</operator><name pos:start="809:32" pos:end="809:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="811:13" pos:end="811:56"><expr pos:start="811:13" pos:end="811:55"><call pos:start="811:13" pos:end="811:55"><name pos:start="811:13" pos:end="811:28">tci_write_reg32s</name><argument_list pos:start="811:29" pos:end="811:55">(<argument pos:start="811:30" pos:end="811:31"><expr pos:start="811:30" pos:end="811:31"><name pos:start="811:30" pos:end="811:31">t0</name></expr></argument>, <argument pos:start="811:34" pos:end="811:54"><expr pos:start="811:34" pos:end="811:54"><operator pos:start="811:34" pos:end="811:34">*</operator><operator pos:start="811:35" pos:end="811:35">(</operator><name pos:start="811:36" pos:end="811:42">int32_t</name> <operator pos:start="811:44" pos:end="811:44">*</operator><operator pos:start="811:45" pos:end="811:45">)</operator><operator pos:start="811:46" pos:end="811:46">(</operator><name pos:start="811:47" pos:end="811:48">t1</name> <operator pos:start="811:50" pos:end="811:50">+</operator> <name pos:start="811:52" pos:end="811:53">t2</name><operator pos:start="811:54" pos:end="811:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="813:13" pos:end="813:18">break;</break>

        <case pos:start="815:9" pos:end="815:29">case <expr pos:start="815:14" pos:end="815:28"><name pos:start="815:14" pos:end="815:28">INDEX_op_ld_i64</name></expr>:</case>

            <expr_stmt pos:start="817:13" pos:end="817:27"><expr pos:start="817:13" pos:end="817:26"><name pos:start="817:13" pos:end="817:14">t0</name> <operator pos:start="817:16" pos:end="817:16">=</operator> <operator pos:start="817:18" pos:end="817:18">*</operator><name pos:start="817:19" pos:end="817:24">tb_ptr</name><operator pos:start="817:25" pos:end="817:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="819:13" pos:end="819:37"><expr pos:start="819:13" pos:end="819:36"><name pos:start="819:13" pos:end="819:14">t1</name> <operator pos:start="819:16" pos:end="819:16">=</operator> <call pos:start="819:18" pos:end="819:36"><name pos:start="819:18" pos:end="819:27">tci_read_r</name><argument_list pos:start="819:28" pos:end="819:36">(<argument pos:start="819:29" pos:end="819:35"><expr pos:start="819:29" pos:end="819:35"><operator pos:start="819:29" pos:end="819:29">&amp;</operator><name pos:start="819:30" pos:end="819:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="821:13" pos:end="821:39"><expr pos:start="821:13" pos:end="821:38"><name pos:start="821:13" pos:end="821:14">t2</name> <operator pos:start="821:16" pos:end="821:16">=</operator> <call pos:start="821:18" pos:end="821:38"><name pos:start="821:18" pos:end="821:29">tci_read_s32</name><argument_list pos:start="821:30" pos:end="821:38">(<argument pos:start="821:31" pos:end="821:37"><expr pos:start="821:31" pos:end="821:37"><operator pos:start="821:31" pos:end="821:31">&amp;</operator><name pos:start="821:32" pos:end="821:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="823:13" pos:end="823:56"><expr pos:start="823:13" pos:end="823:55"><call pos:start="823:13" pos:end="823:55"><name pos:start="823:13" pos:end="823:27">tci_write_reg64</name><argument_list pos:start="823:28" pos:end="823:55">(<argument pos:start="823:29" pos:end="823:30"><expr pos:start="823:29" pos:end="823:30"><name pos:start="823:29" pos:end="823:30">t0</name></expr></argument>, <argument pos:start="823:33" pos:end="823:54"><expr pos:start="823:33" pos:end="823:54"><operator pos:start="823:33" pos:end="823:33">*</operator><operator pos:start="823:34" pos:end="823:34">(</operator><name pos:start="823:35" pos:end="823:42">uint64_t</name> <operator pos:start="823:44" pos:end="823:44">*</operator><operator pos:start="823:45" pos:end="823:45">)</operator><operator pos:start="823:46" pos:end="823:46">(</operator><name pos:start="823:47" pos:end="823:48">t1</name> <operator pos:start="823:50" pos:end="823:50">+</operator> <name pos:start="823:52" pos:end="823:53">t2</name><operator pos:start="823:54" pos:end="823:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="825:13" pos:end="825:18">break;</break>

        <case pos:start="827:9" pos:end="827:30">case <expr pos:start="827:14" pos:end="827:29"><name pos:start="827:14" pos:end="827:29">INDEX_op_st8_i64</name></expr>:</case>

            <expr_stmt pos:start="829:13" pos:end="829:38"><expr pos:start="829:13" pos:end="829:37"><name pos:start="829:13" pos:end="829:14">t0</name> <operator pos:start="829:16" pos:end="829:16">=</operator> <call pos:start="829:18" pos:end="829:37"><name pos:start="829:18" pos:end="829:28">tci_read_r8</name><argument_list pos:start="829:29" pos:end="829:37">(<argument pos:start="829:30" pos:end="829:36"><expr pos:start="829:30" pos:end="829:36"><operator pos:start="829:30" pos:end="829:30">&amp;</operator><name pos:start="829:31" pos:end="829:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="831:13" pos:end="831:37"><expr pos:start="831:13" pos:end="831:36"><name pos:start="831:13" pos:end="831:14">t1</name> <operator pos:start="831:16" pos:end="831:16">=</operator> <call pos:start="831:18" pos:end="831:36"><name pos:start="831:18" pos:end="831:27">tci_read_r</name><argument_list pos:start="831:28" pos:end="831:36">(<argument pos:start="831:29" pos:end="831:35"><expr pos:start="831:29" pos:end="831:35"><operator pos:start="831:29" pos:end="831:29">&amp;</operator><name pos:start="831:30" pos:end="831:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="833:13" pos:end="833:39"><expr pos:start="833:13" pos:end="833:38"><name pos:start="833:13" pos:end="833:14">t2</name> <operator pos:start="833:16" pos:end="833:16">=</operator> <call pos:start="833:18" pos:end="833:38"><name pos:start="833:18" pos:end="833:29">tci_read_s32</name><argument_list pos:start="833:30" pos:end="833:38">(<argument pos:start="833:31" pos:end="833:37"><expr pos:start="833:31" pos:end="833:37"><operator pos:start="833:31" pos:end="833:31">&amp;</operator><name pos:start="833:32" pos:end="833:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="835:13" pos:end="835:39"><expr pos:start="835:13" pos:end="835:38"><operator pos:start="835:13" pos:end="835:13">*</operator><operator pos:start="835:14" pos:end="835:14">(</operator><name pos:start="835:15" pos:end="835:21">uint8_t</name> <operator pos:start="835:23" pos:end="835:23">*</operator><operator pos:start="835:24" pos:end="835:24">)</operator><operator pos:start="835:25" pos:end="835:25">(</operator><name pos:start="835:26" pos:end="835:27">t1</name> <operator pos:start="835:29" pos:end="835:29">+</operator> <name pos:start="835:31" pos:end="835:32">t2</name><operator pos:start="835:33" pos:end="835:33">)</operator> <operator pos:start="835:35" pos:end="835:35">=</operator> <name pos:start="835:37" pos:end="835:38">t0</name></expr>;</expr_stmt>

            <break pos:start="837:13" pos:end="837:18">break;</break>

        <case pos:start="839:9" pos:end="839:31">case <expr pos:start="839:14" pos:end="839:30"><name pos:start="839:14" pos:end="839:30">INDEX_op_st16_i64</name></expr>:</case>

            <expr_stmt pos:start="841:13" pos:end="841:39"><expr pos:start="841:13" pos:end="841:38"><name pos:start="841:13" pos:end="841:14">t0</name> <operator pos:start="841:16" pos:end="841:16">=</operator> <call pos:start="841:18" pos:end="841:38"><name pos:start="841:18" pos:end="841:29">tci_read_r16</name><argument_list pos:start="841:30" pos:end="841:38">(<argument pos:start="841:31" pos:end="841:37"><expr pos:start="841:31" pos:end="841:37"><operator pos:start="841:31" pos:end="841:31">&amp;</operator><name pos:start="841:32" pos:end="841:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="843:13" pos:end="843:37"><expr pos:start="843:13" pos:end="843:36"><name pos:start="843:13" pos:end="843:14">t1</name> <operator pos:start="843:16" pos:end="843:16">=</operator> <call pos:start="843:18" pos:end="843:36"><name pos:start="843:18" pos:end="843:27">tci_read_r</name><argument_list pos:start="843:28" pos:end="843:36">(<argument pos:start="843:29" pos:end="843:35"><expr pos:start="843:29" pos:end="843:35"><operator pos:start="843:29" pos:end="843:29">&amp;</operator><name pos:start="843:30" pos:end="843:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="845:13" pos:end="845:39"><expr pos:start="845:13" pos:end="845:38"><name pos:start="845:13" pos:end="845:14">t2</name> <operator pos:start="845:16" pos:end="845:16">=</operator> <call pos:start="845:18" pos:end="845:38"><name pos:start="845:18" pos:end="845:29">tci_read_s32</name><argument_list pos:start="845:30" pos:end="845:38">(<argument pos:start="845:31" pos:end="845:37"><expr pos:start="845:31" pos:end="845:37"><operator pos:start="845:31" pos:end="845:31">&amp;</operator><name pos:start="845:32" pos:end="845:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="847:13" pos:end="847:40"><expr pos:start="847:13" pos:end="847:39"><operator pos:start="847:13" pos:end="847:13">*</operator><operator pos:start="847:14" pos:end="847:14">(</operator><name pos:start="847:15" pos:end="847:22">uint16_t</name> <operator pos:start="847:24" pos:end="847:24">*</operator><operator pos:start="847:25" pos:end="847:25">)</operator><operator pos:start="847:26" pos:end="847:26">(</operator><name pos:start="847:27" pos:end="847:28">t1</name> <operator pos:start="847:30" pos:end="847:30">+</operator> <name pos:start="847:32" pos:end="847:33">t2</name><operator pos:start="847:34" pos:end="847:34">)</operator> <operator pos:start="847:36" pos:end="847:36">=</operator> <name pos:start="847:38" pos:end="847:39">t0</name></expr>;</expr_stmt>

            <break pos:start="849:13" pos:end="849:18">break;</break>

        <case pos:start="851:9" pos:end="851:31">case <expr pos:start="851:14" pos:end="851:30"><name pos:start="851:14" pos:end="851:30">INDEX_op_st32_i64</name></expr>:</case>

            <expr_stmt pos:start="853:13" pos:end="853:39"><expr pos:start="853:13" pos:end="853:38"><name pos:start="853:13" pos:end="853:14">t0</name> <operator pos:start="853:16" pos:end="853:16">=</operator> <call pos:start="853:18" pos:end="853:38"><name pos:start="853:18" pos:end="853:29">tci_read_r32</name><argument_list pos:start="853:30" pos:end="853:38">(<argument pos:start="853:31" pos:end="853:37"><expr pos:start="853:31" pos:end="853:37"><operator pos:start="853:31" pos:end="853:31">&amp;</operator><name pos:start="853:32" pos:end="853:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="855:13" pos:end="855:37"><expr pos:start="855:13" pos:end="855:36"><name pos:start="855:13" pos:end="855:14">t1</name> <operator pos:start="855:16" pos:end="855:16">=</operator> <call pos:start="855:18" pos:end="855:36"><name pos:start="855:18" pos:end="855:27">tci_read_r</name><argument_list pos:start="855:28" pos:end="855:36">(<argument pos:start="855:29" pos:end="855:35"><expr pos:start="855:29" pos:end="855:35"><operator pos:start="855:29" pos:end="855:29">&amp;</operator><name pos:start="855:30" pos:end="855:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="857:13" pos:end="857:39"><expr pos:start="857:13" pos:end="857:38"><name pos:start="857:13" pos:end="857:14">t2</name> <operator pos:start="857:16" pos:end="857:16">=</operator> <call pos:start="857:18" pos:end="857:38"><name pos:start="857:18" pos:end="857:29">tci_read_s32</name><argument_list pos:start="857:30" pos:end="857:38">(<argument pos:start="857:31" pos:end="857:37"><expr pos:start="857:31" pos:end="857:37"><operator pos:start="857:31" pos:end="857:31">&amp;</operator><name pos:start="857:32" pos:end="857:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="859:13" pos:end="859:40"><expr pos:start="859:13" pos:end="859:39"><operator pos:start="859:13" pos:end="859:13">*</operator><operator pos:start="859:14" pos:end="859:14">(</operator><name pos:start="859:15" pos:end="859:22">uint32_t</name> <operator pos:start="859:24" pos:end="859:24">*</operator><operator pos:start="859:25" pos:end="859:25">)</operator><operator pos:start="859:26" pos:end="859:26">(</operator><name pos:start="859:27" pos:end="859:28">t1</name> <operator pos:start="859:30" pos:end="859:30">+</operator> <name pos:start="859:32" pos:end="859:33">t2</name><operator pos:start="859:34" pos:end="859:34">)</operator> <operator pos:start="859:36" pos:end="859:36">=</operator> <name pos:start="859:38" pos:end="859:39">t0</name></expr>;</expr_stmt>

            <break pos:start="861:13" pos:end="861:18">break;</break>

        <case pos:start="863:9" pos:end="863:29">case <expr pos:start="863:14" pos:end="863:28"><name pos:start="863:14" pos:end="863:28">INDEX_op_st_i64</name></expr>:</case>

            <expr_stmt pos:start="865:13" pos:end="865:39"><expr pos:start="865:13" pos:end="865:38"><name pos:start="865:13" pos:end="865:14">t0</name> <operator pos:start="865:16" pos:end="865:16">=</operator> <call pos:start="865:18" pos:end="865:38"><name pos:start="865:18" pos:end="865:29">tci_read_r64</name><argument_list pos:start="865:30" pos:end="865:38">(<argument pos:start="865:31" pos:end="865:37"><expr pos:start="865:31" pos:end="865:37"><operator pos:start="865:31" pos:end="865:31">&amp;</operator><name pos:start="865:32" pos:end="865:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="867:13" pos:end="867:37"><expr pos:start="867:13" pos:end="867:36"><name pos:start="867:13" pos:end="867:14">t1</name> <operator pos:start="867:16" pos:end="867:16">=</operator> <call pos:start="867:18" pos:end="867:36"><name pos:start="867:18" pos:end="867:27">tci_read_r</name><argument_list pos:start="867:28" pos:end="867:36">(<argument pos:start="867:29" pos:end="867:35"><expr pos:start="867:29" pos:end="867:35"><operator pos:start="867:29" pos:end="867:29">&amp;</operator><name pos:start="867:30" pos:end="867:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="869:13" pos:end="869:39"><expr pos:start="869:13" pos:end="869:38"><name pos:start="869:13" pos:end="869:14">t2</name> <operator pos:start="869:16" pos:end="869:16">=</operator> <call pos:start="869:18" pos:end="869:38"><name pos:start="869:18" pos:end="869:29">tci_read_s32</name><argument_list pos:start="869:30" pos:end="869:38">(<argument pos:start="869:31" pos:end="869:37"><expr pos:start="869:31" pos:end="869:37"><operator pos:start="869:31" pos:end="869:31">&amp;</operator><name pos:start="869:32" pos:end="869:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="871:13" pos:end="871:40"><expr pos:start="871:13" pos:end="871:39"><operator pos:start="871:13" pos:end="871:13">*</operator><operator pos:start="871:14" pos:end="871:14">(</operator><name pos:start="871:15" pos:end="871:22">uint64_t</name> <operator pos:start="871:24" pos:end="871:24">*</operator><operator pos:start="871:25" pos:end="871:25">)</operator><operator pos:start="871:26" pos:end="871:26">(</operator><name pos:start="871:27" pos:end="871:28">t1</name> <operator pos:start="871:30" pos:end="871:30">+</operator> <name pos:start="871:32" pos:end="871:33">t2</name><operator pos:start="871:34" pos:end="871:34">)</operator> <operator pos:start="871:36" pos:end="871:36">=</operator> <name pos:start="871:38" pos:end="871:39">t0</name></expr>;</expr_stmt>

            <break pos:start="873:13" pos:end="873:18">break;</break>



            <comment type="block" pos:start="877:13" pos:end="877:49">/* Arithmetic operations (64 bit). */</comment>



        <case pos:start="881:9" pos:end="881:30">case <expr pos:start="881:14" pos:end="881:29"><name pos:start="881:14" pos:end="881:29">INDEX_op_add_i64</name></expr>:</case>

            <expr_stmt pos:start="883:13" pos:end="883:27"><expr pos:start="883:13" pos:end="883:26"><name pos:start="883:13" pos:end="883:14">t0</name> <operator pos:start="883:16" pos:end="883:16">=</operator> <operator pos:start="883:18" pos:end="883:18">*</operator><name pos:start="883:19" pos:end="883:24">tb_ptr</name><operator pos:start="883:25" pos:end="883:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="885:13" pos:end="885:40"><expr pos:start="885:13" pos:end="885:39"><name pos:start="885:13" pos:end="885:14">t1</name> <operator pos:start="885:16" pos:end="885:16">=</operator> <call pos:start="885:18" pos:end="885:39"><name pos:start="885:18" pos:end="885:30">tci_read_ri64</name><argument_list pos:start="885:31" pos:end="885:39">(<argument pos:start="885:32" pos:end="885:38"><expr pos:start="885:32" pos:end="885:38"><operator pos:start="885:32" pos:end="885:32">&amp;</operator><name pos:start="885:33" pos:end="885:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="887:13" pos:end="887:40"><expr pos:start="887:13" pos:end="887:39"><name pos:start="887:13" pos:end="887:14">t2</name> <operator pos:start="887:16" pos:end="887:16">=</operator> <call pos:start="887:18" pos:end="887:39"><name pos:start="887:18" pos:end="887:30">tci_read_ri64</name><argument_list pos:start="887:31" pos:end="887:39">(<argument pos:start="887:32" pos:end="887:38"><expr pos:start="887:32" pos:end="887:38"><operator pos:start="887:32" pos:end="887:32">&amp;</operator><name pos:start="887:33" pos:end="887:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="889:13" pos:end="889:41"><expr pos:start="889:13" pos:end="889:40"><call pos:start="889:13" pos:end="889:40"><name pos:start="889:13" pos:end="889:27">tci_write_reg64</name><argument_list pos:start="889:28" pos:end="889:40">(<argument pos:start="889:29" pos:end="889:30"><expr pos:start="889:29" pos:end="889:30"><name pos:start="889:29" pos:end="889:30">t0</name></expr></argument>, <argument pos:start="889:33" pos:end="889:39"><expr pos:start="889:33" pos:end="889:39"><name pos:start="889:33" pos:end="889:34">t1</name> <operator pos:start="889:36" pos:end="889:36">+</operator> <name pos:start="889:38" pos:end="889:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="891:13" pos:end="891:18">break;</break>

        <case pos:start="893:9" pos:end="893:30">case <expr pos:start="893:14" pos:end="893:29"><name pos:start="893:14" pos:end="893:29">INDEX_op_sub_i64</name></expr>:</case>

            <expr_stmt pos:start="895:13" pos:end="895:27"><expr pos:start="895:13" pos:end="895:26"><name pos:start="895:13" pos:end="895:14">t0</name> <operator pos:start="895:16" pos:end="895:16">=</operator> <operator pos:start="895:18" pos:end="895:18">*</operator><name pos:start="895:19" pos:end="895:24">tb_ptr</name><operator pos:start="895:25" pos:end="895:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="897:13" pos:end="897:40"><expr pos:start="897:13" pos:end="897:39"><name pos:start="897:13" pos:end="897:14">t1</name> <operator pos:start="897:16" pos:end="897:16">=</operator> <call pos:start="897:18" pos:end="897:39"><name pos:start="897:18" pos:end="897:30">tci_read_ri64</name><argument_list pos:start="897:31" pos:end="897:39">(<argument pos:start="897:32" pos:end="897:38"><expr pos:start="897:32" pos:end="897:38"><operator pos:start="897:32" pos:end="897:32">&amp;</operator><name pos:start="897:33" pos:end="897:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="899:13" pos:end="899:40"><expr pos:start="899:13" pos:end="899:39"><name pos:start="899:13" pos:end="899:14">t2</name> <operator pos:start="899:16" pos:end="899:16">=</operator> <call pos:start="899:18" pos:end="899:39"><name pos:start="899:18" pos:end="899:30">tci_read_ri64</name><argument_list pos:start="899:31" pos:end="899:39">(<argument pos:start="899:32" pos:end="899:38"><expr pos:start="899:32" pos:end="899:38"><operator pos:start="899:32" pos:end="899:32">&amp;</operator><name pos:start="899:33" pos:end="899:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="901:13" pos:end="901:41"><expr pos:start="901:13" pos:end="901:40"><call pos:start="901:13" pos:end="901:40"><name pos:start="901:13" pos:end="901:27">tci_write_reg64</name><argument_list pos:start="901:28" pos:end="901:40">(<argument pos:start="901:29" pos:end="901:30"><expr pos:start="901:29" pos:end="901:30"><name pos:start="901:29" pos:end="901:30">t0</name></expr></argument>, <argument pos:start="901:33" pos:end="901:39"><expr pos:start="901:33" pos:end="901:39"><name pos:start="901:33" pos:end="901:34">t1</name> <operator pos:start="901:36" pos:end="901:36">-</operator> <name pos:start="901:38" pos:end="901:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="903:13" pos:end="903:18">break;</break>

        <case pos:start="905:9" pos:end="905:30">case <expr pos:start="905:14" pos:end="905:29"><name pos:start="905:14" pos:end="905:29">INDEX_op_mul_i64</name></expr>:</case>

            <expr_stmt pos:start="907:13" pos:end="907:27"><expr pos:start="907:13" pos:end="907:26"><name pos:start="907:13" pos:end="907:14">t0</name> <operator pos:start="907:16" pos:end="907:16">=</operator> <operator pos:start="907:18" pos:end="907:18">*</operator><name pos:start="907:19" pos:end="907:24">tb_ptr</name><operator pos:start="907:25" pos:end="907:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="909:13" pos:end="909:40"><expr pos:start="909:13" pos:end="909:39"><name pos:start="909:13" pos:end="909:14">t1</name> <operator pos:start="909:16" pos:end="909:16">=</operator> <call pos:start="909:18" pos:end="909:39"><name pos:start="909:18" pos:end="909:30">tci_read_ri64</name><argument_list pos:start="909:31" pos:end="909:39">(<argument pos:start="909:32" pos:end="909:38"><expr pos:start="909:32" pos:end="909:38"><operator pos:start="909:32" pos:end="909:32">&amp;</operator><name pos:start="909:33" pos:end="909:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="911:13" pos:end="911:40"><expr pos:start="911:13" pos:end="911:39"><name pos:start="911:13" pos:end="911:14">t2</name> <operator pos:start="911:16" pos:end="911:16">=</operator> <call pos:start="911:18" pos:end="911:39"><name pos:start="911:18" pos:end="911:30">tci_read_ri64</name><argument_list pos:start="911:31" pos:end="911:39">(<argument pos:start="911:32" pos:end="911:38"><expr pos:start="911:32" pos:end="911:38"><operator pos:start="911:32" pos:end="911:32">&amp;</operator><name pos:start="911:33" pos:end="911:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="913:13" pos:end="913:41"><expr pos:start="913:13" pos:end="913:40"><call pos:start="913:13" pos:end="913:40"><name pos:start="913:13" pos:end="913:27">tci_write_reg64</name><argument_list pos:start="913:28" pos:end="913:40">(<argument pos:start="913:29" pos:end="913:30"><expr pos:start="913:29" pos:end="913:30"><name pos:start="913:29" pos:end="913:30">t0</name></expr></argument>, <argument pos:start="913:33" pos:end="913:39"><expr pos:start="913:33" pos:end="913:39"><name pos:start="913:33" pos:end="913:34">t1</name> <operator pos:start="913:36" pos:end="913:36">*</operator> <name pos:start="913:38" pos:end="913:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="915:13" pos:end="918:0">break;</break>

<cpp:if pos:start="917:1" pos:end="917:26">#<cpp:directive pos:start="917:2" pos:end="917:3">if</cpp:directive> <expr pos:start="917:5" pos:end="917:26"><name pos:start="917:5" pos:end="917:26">TCG_TARGET_HAS_div_i64</name></expr></cpp:if>

        <case pos:start="919:9" pos:end="919:30">case <expr pos:start="919:14" pos:end="919:29"><name pos:start="919:14" pos:end="919:29">INDEX_op_div_i64</name></expr>:</case>

        <case pos:start="921:9" pos:end="921:31">case <expr pos:start="921:14" pos:end="921:30"><name pos:start="921:14" pos:end="921:30">INDEX_op_divu_i64</name></expr>:</case>

        <case pos:start="923:9" pos:end="923:30">case <expr pos:start="923:14" pos:end="923:29"><name pos:start="923:14" pos:end="923:29">INDEX_op_rem_i64</name></expr>:</case>

        <case pos:start="925:9" pos:end="925:31">case <expr pos:start="925:14" pos:end="925:30"><name pos:start="925:14" pos:end="925:30">INDEX_op_remu_i64</name></expr>:</case>

            <expr_stmt pos:start="927:13" pos:end="927:19"><expr pos:start="927:13" pos:end="927:18"><call pos:start="927:13" pos:end="927:18"><name pos:start="927:13" pos:end="927:16">TODO</name><argument_list pos:start="927:17" pos:end="927:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="929:13" pos:end="932:0">break;</break>

<cpp:elif pos:start="931:1" pos:end="931:29">#<cpp:directive pos:start="931:2" pos:end="931:5">elif</cpp:directive> <expr pos:start="931:7" pos:end="931:29"><name pos:start="931:7" pos:end="931:29">TCG_TARGET_HAS_div2_i64</name></expr></cpp:elif>

        <case pos:start="933:9" pos:end="933:31">case <expr pos:start="933:14" pos:end="933:30"><name pos:start="933:14" pos:end="933:30">INDEX_op_div2_i64</name></expr>:</case>

        <case pos:start="935:9" pos:end="935:32">case <expr pos:start="935:14" pos:end="935:31"><name pos:start="935:14" pos:end="935:31">INDEX_op_divu2_i64</name></expr>:</case>

            <expr_stmt pos:start="937:13" pos:end="937:19"><expr pos:start="937:13" pos:end="937:18"><call pos:start="937:13" pos:end="937:18"><name pos:start="937:13" pos:end="937:16">TODO</name><argument_list pos:start="937:17" pos:end="937:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="939:13" pos:end="942:0">break;</break>

<cpp:endif pos:start="941:1" pos:end="941:6">#<cpp:directive pos:start="941:2" pos:end="941:6">endif</cpp:directive></cpp:endif>

        <case pos:start="943:9" pos:end="943:30">case <expr pos:start="943:14" pos:end="943:29"><name pos:start="943:14" pos:end="943:29">INDEX_op_and_i64</name></expr>:</case>

            <expr_stmt pos:start="945:13" pos:end="945:27"><expr pos:start="945:13" pos:end="945:26"><name pos:start="945:13" pos:end="945:14">t0</name> <operator pos:start="945:16" pos:end="945:16">=</operator> <operator pos:start="945:18" pos:end="945:18">*</operator><name pos:start="945:19" pos:end="945:24">tb_ptr</name><operator pos:start="945:25" pos:end="945:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="947:13" pos:end="947:40"><expr pos:start="947:13" pos:end="947:39"><name pos:start="947:13" pos:end="947:14">t1</name> <operator pos:start="947:16" pos:end="947:16">=</operator> <call pos:start="947:18" pos:end="947:39"><name pos:start="947:18" pos:end="947:30">tci_read_ri64</name><argument_list pos:start="947:31" pos:end="947:39">(<argument pos:start="947:32" pos:end="947:38"><expr pos:start="947:32" pos:end="947:38"><operator pos:start="947:32" pos:end="947:32">&amp;</operator><name pos:start="947:33" pos:end="947:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="949:13" pos:end="949:40"><expr pos:start="949:13" pos:end="949:39"><name pos:start="949:13" pos:end="949:14">t2</name> <operator pos:start="949:16" pos:end="949:16">=</operator> <call pos:start="949:18" pos:end="949:39"><name pos:start="949:18" pos:end="949:30">tci_read_ri64</name><argument_list pos:start="949:31" pos:end="949:39">(<argument pos:start="949:32" pos:end="949:38"><expr pos:start="949:32" pos:end="949:38"><operator pos:start="949:32" pos:end="949:32">&amp;</operator><name pos:start="949:33" pos:end="949:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="951:13" pos:end="951:41"><expr pos:start="951:13" pos:end="951:40"><call pos:start="951:13" pos:end="951:40"><name pos:start="951:13" pos:end="951:27">tci_write_reg64</name><argument_list pos:start="951:28" pos:end="951:40">(<argument pos:start="951:29" pos:end="951:30"><expr pos:start="951:29" pos:end="951:30"><name pos:start="951:29" pos:end="951:30">t0</name></expr></argument>, <argument pos:start="951:33" pos:end="951:39"><expr pos:start="951:33" pos:end="951:39"><name pos:start="951:33" pos:end="951:34">t1</name> <operator pos:start="951:36" pos:end="951:36">&amp;</operator> <name pos:start="951:38" pos:end="951:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="953:13" pos:end="953:18">break;</break>

        <case pos:start="955:9" pos:end="955:29">case <expr pos:start="955:14" pos:end="955:28"><name pos:start="955:14" pos:end="955:28">INDEX_op_or_i64</name></expr>:</case>

            <expr_stmt pos:start="957:13" pos:end="957:27"><expr pos:start="957:13" pos:end="957:26"><name pos:start="957:13" pos:end="957:14">t0</name> <operator pos:start="957:16" pos:end="957:16">=</operator> <operator pos:start="957:18" pos:end="957:18">*</operator><name pos:start="957:19" pos:end="957:24">tb_ptr</name><operator pos:start="957:25" pos:end="957:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="959:13" pos:end="959:40"><expr pos:start="959:13" pos:end="959:39"><name pos:start="959:13" pos:end="959:14">t1</name> <operator pos:start="959:16" pos:end="959:16">=</operator> <call pos:start="959:18" pos:end="959:39"><name pos:start="959:18" pos:end="959:30">tci_read_ri64</name><argument_list pos:start="959:31" pos:end="959:39">(<argument pos:start="959:32" pos:end="959:38"><expr pos:start="959:32" pos:end="959:38"><operator pos:start="959:32" pos:end="959:32">&amp;</operator><name pos:start="959:33" pos:end="959:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="961:13" pos:end="961:40"><expr pos:start="961:13" pos:end="961:39"><name pos:start="961:13" pos:end="961:14">t2</name> <operator pos:start="961:16" pos:end="961:16">=</operator> <call pos:start="961:18" pos:end="961:39"><name pos:start="961:18" pos:end="961:30">tci_read_ri64</name><argument_list pos:start="961:31" pos:end="961:39">(<argument pos:start="961:32" pos:end="961:38"><expr pos:start="961:32" pos:end="961:38"><operator pos:start="961:32" pos:end="961:32">&amp;</operator><name pos:start="961:33" pos:end="961:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="963:13" pos:end="963:41"><expr pos:start="963:13" pos:end="963:40"><call pos:start="963:13" pos:end="963:40"><name pos:start="963:13" pos:end="963:27">tci_write_reg64</name><argument_list pos:start="963:28" pos:end="963:40">(<argument pos:start="963:29" pos:end="963:30"><expr pos:start="963:29" pos:end="963:30"><name pos:start="963:29" pos:end="963:30">t0</name></expr></argument>, <argument pos:start="963:33" pos:end="963:39"><expr pos:start="963:33" pos:end="963:39"><name pos:start="963:33" pos:end="963:34">t1</name> <operator pos:start="963:36" pos:end="963:36">|</operator> <name pos:start="963:38" pos:end="963:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="965:13" pos:end="965:18">break;</break>

        <case pos:start="967:9" pos:end="967:30">case <expr pos:start="967:14" pos:end="967:29"><name pos:start="967:14" pos:end="967:29">INDEX_op_xor_i64</name></expr>:</case>

            <expr_stmt pos:start="969:13" pos:end="969:27"><expr pos:start="969:13" pos:end="969:26"><name pos:start="969:13" pos:end="969:14">t0</name> <operator pos:start="969:16" pos:end="969:16">=</operator> <operator pos:start="969:18" pos:end="969:18">*</operator><name pos:start="969:19" pos:end="969:24">tb_ptr</name><operator pos:start="969:25" pos:end="969:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="971:13" pos:end="971:40"><expr pos:start="971:13" pos:end="971:39"><name pos:start="971:13" pos:end="971:14">t1</name> <operator pos:start="971:16" pos:end="971:16">=</operator> <call pos:start="971:18" pos:end="971:39"><name pos:start="971:18" pos:end="971:30">tci_read_ri64</name><argument_list pos:start="971:31" pos:end="971:39">(<argument pos:start="971:32" pos:end="971:38"><expr pos:start="971:32" pos:end="971:38"><operator pos:start="971:32" pos:end="971:32">&amp;</operator><name pos:start="971:33" pos:end="971:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="973:13" pos:end="973:40"><expr pos:start="973:13" pos:end="973:39"><name pos:start="973:13" pos:end="973:14">t2</name> <operator pos:start="973:16" pos:end="973:16">=</operator> <call pos:start="973:18" pos:end="973:39"><name pos:start="973:18" pos:end="973:30">tci_read_ri64</name><argument_list pos:start="973:31" pos:end="973:39">(<argument pos:start="973:32" pos:end="973:38"><expr pos:start="973:32" pos:end="973:38"><operator pos:start="973:32" pos:end="973:32">&amp;</operator><name pos:start="973:33" pos:end="973:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="975:13" pos:end="975:41"><expr pos:start="975:13" pos:end="975:40"><call pos:start="975:13" pos:end="975:40"><name pos:start="975:13" pos:end="975:27">tci_write_reg64</name><argument_list pos:start="975:28" pos:end="975:40">(<argument pos:start="975:29" pos:end="975:30"><expr pos:start="975:29" pos:end="975:30"><name pos:start="975:29" pos:end="975:30">t0</name></expr></argument>, <argument pos:start="975:33" pos:end="975:39"><expr pos:start="975:33" pos:end="975:39"><name pos:start="975:33" pos:end="975:34">t1</name> <operator pos:start="975:36" pos:end="975:36">^</operator> <name pos:start="975:38" pos:end="975:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="977:13" pos:end="977:18">break;</break>



            <comment type="block" pos:start="981:13" pos:end="981:51">/* Shift/rotate operations (64 bit). */</comment>



        <case pos:start="985:9" pos:end="985:30">case <expr pos:start="985:14" pos:end="985:29"><name pos:start="985:14" pos:end="985:29">INDEX_op_shl_i64</name></expr>:</case>

            <expr_stmt pos:start="987:13" pos:end="987:27"><expr pos:start="987:13" pos:end="987:26"><name pos:start="987:13" pos:end="987:14">t0</name> <operator pos:start="987:16" pos:end="987:16">=</operator> <operator pos:start="987:18" pos:end="987:18">*</operator><name pos:start="987:19" pos:end="987:24">tb_ptr</name><operator pos:start="987:25" pos:end="987:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="989:13" pos:end="989:40"><expr pos:start="989:13" pos:end="989:39"><name pos:start="989:13" pos:end="989:14">t1</name> <operator pos:start="989:16" pos:end="989:16">=</operator> <call pos:start="989:18" pos:end="989:39"><name pos:start="989:18" pos:end="989:30">tci_read_ri64</name><argument_list pos:start="989:31" pos:end="989:39">(<argument pos:start="989:32" pos:end="989:38"><expr pos:start="989:32" pos:end="989:38"><operator pos:start="989:32" pos:end="989:32">&amp;</operator><name pos:start="989:33" pos:end="989:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="991:13" pos:end="991:40"><expr pos:start="991:13" pos:end="991:39"><name pos:start="991:13" pos:end="991:14">t2</name> <operator pos:start="991:16" pos:end="991:16">=</operator> <call pos:start="991:18" pos:end="991:39"><name pos:start="991:18" pos:end="991:30">tci_read_ri64</name><argument_list pos:start="991:31" pos:end="991:39">(<argument pos:start="991:32" pos:end="991:38"><expr pos:start="991:32" pos:end="991:38"><operator pos:start="991:32" pos:end="991:32">&amp;</operator><name pos:start="991:33" pos:end="991:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="993:13" pos:end="993:42"><expr pos:start="993:13" pos:end="993:41"><call pos:start="993:13" pos:end="993:41"><name pos:start="993:13" pos:end="993:27">tci_write_reg64</name><argument_list pos:start="993:28" pos:end="993:41">(<argument pos:start="993:29" pos:end="993:30"><expr pos:start="993:29" pos:end="993:30"><name pos:start="993:29" pos:end="993:30">t0</name></expr></argument>, <argument pos:start="993:33" pos:end="993:40"><expr pos:start="993:33" pos:end="993:40"><name pos:start="993:33" pos:end="993:34">t1</name> <operator pos:start="993:36" pos:end="993:37">&lt;&lt;</operator> <name pos:start="993:39" pos:end="993:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="995:13" pos:end="995:18">break;</break>

        <case pos:start="997:9" pos:end="997:30">case <expr pos:start="997:14" pos:end="997:29"><name pos:start="997:14" pos:end="997:29">INDEX_op_shr_i64</name></expr>:</case>

            <expr_stmt pos:start="999:13" pos:end="999:27"><expr pos:start="999:13" pos:end="999:26"><name pos:start="999:13" pos:end="999:14">t0</name> <operator pos:start="999:16" pos:end="999:16">=</operator> <operator pos:start="999:18" pos:end="999:18">*</operator><name pos:start="999:19" pos:end="999:24">tb_ptr</name><operator pos:start="999:25" pos:end="999:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1001:13" pos:end="1001:40"><expr pos:start="1001:13" pos:end="1001:39"><name pos:start="1001:13" pos:end="1001:14">t1</name> <operator pos:start="1001:16" pos:end="1001:16">=</operator> <call pos:start="1001:18" pos:end="1001:39"><name pos:start="1001:18" pos:end="1001:30">tci_read_ri64</name><argument_list pos:start="1001:31" pos:end="1001:39">(<argument pos:start="1001:32" pos:end="1001:38"><expr pos:start="1001:32" pos:end="1001:38"><operator pos:start="1001:32" pos:end="1001:32">&amp;</operator><name pos:start="1001:33" pos:end="1001:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1003:13" pos:end="1003:40"><expr pos:start="1003:13" pos:end="1003:39"><name pos:start="1003:13" pos:end="1003:14">t2</name> <operator pos:start="1003:16" pos:end="1003:16">=</operator> <call pos:start="1003:18" pos:end="1003:39"><name pos:start="1003:18" pos:end="1003:30">tci_read_ri64</name><argument_list pos:start="1003:31" pos:end="1003:39">(<argument pos:start="1003:32" pos:end="1003:38"><expr pos:start="1003:32" pos:end="1003:38"><operator pos:start="1003:32" pos:end="1003:32">&amp;</operator><name pos:start="1003:33" pos:end="1003:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1005:13" pos:end="1005:42"><expr pos:start="1005:13" pos:end="1005:41"><call pos:start="1005:13" pos:end="1005:41"><name pos:start="1005:13" pos:end="1005:27">tci_write_reg64</name><argument_list pos:start="1005:28" pos:end="1005:41">(<argument pos:start="1005:29" pos:end="1005:30"><expr pos:start="1005:29" pos:end="1005:30"><name pos:start="1005:29" pos:end="1005:30">t0</name></expr></argument>, <argument pos:start="1005:33" pos:end="1005:40"><expr pos:start="1005:33" pos:end="1005:40"><name pos:start="1005:33" pos:end="1005:34">t1</name> <operator pos:start="1005:36" pos:end="1005:37">&gt;&gt;</operator> <name pos:start="1005:39" pos:end="1005:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1007:13" pos:end="1007:18">break;</break>

        <case pos:start="1009:9" pos:end="1009:30">case <expr pos:start="1009:14" pos:end="1009:29"><name pos:start="1009:14" pos:end="1009:29">INDEX_op_sar_i64</name></expr>:</case>

            <expr_stmt pos:start="1011:13" pos:end="1011:27"><expr pos:start="1011:13" pos:end="1011:26"><name pos:start="1011:13" pos:end="1011:14">t0</name> <operator pos:start="1011:16" pos:end="1011:16">=</operator> <operator pos:start="1011:18" pos:end="1011:18">*</operator><name pos:start="1011:19" pos:end="1011:24">tb_ptr</name><operator pos:start="1011:25" pos:end="1011:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1013:13" pos:end="1013:40"><expr pos:start="1013:13" pos:end="1013:39"><name pos:start="1013:13" pos:end="1013:14">t1</name> <operator pos:start="1013:16" pos:end="1013:16">=</operator> <call pos:start="1013:18" pos:end="1013:39"><name pos:start="1013:18" pos:end="1013:30">tci_read_ri64</name><argument_list pos:start="1013:31" pos:end="1013:39">(<argument pos:start="1013:32" pos:end="1013:38"><expr pos:start="1013:32" pos:end="1013:38"><operator pos:start="1013:32" pos:end="1013:32">&amp;</operator><name pos:start="1013:33" pos:end="1013:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1015:13" pos:end="1015:40"><expr pos:start="1015:13" pos:end="1015:39"><name pos:start="1015:13" pos:end="1015:14">t2</name> <operator pos:start="1015:16" pos:end="1015:16">=</operator> <call pos:start="1015:18" pos:end="1015:39"><name pos:start="1015:18" pos:end="1015:30">tci_read_ri64</name><argument_list pos:start="1015:31" pos:end="1015:39">(<argument pos:start="1015:32" pos:end="1015:38"><expr pos:start="1015:32" pos:end="1015:38"><operator pos:start="1015:32" pos:end="1015:32">&amp;</operator><name pos:start="1015:33" pos:end="1015:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1017:13" pos:end="1017:53"><expr pos:start="1017:13" pos:end="1017:52"><call pos:start="1017:13" pos:end="1017:52"><name pos:start="1017:13" pos:end="1017:27">tci_write_reg64</name><argument_list pos:start="1017:28" pos:end="1017:52">(<argument pos:start="1017:29" pos:end="1017:30"><expr pos:start="1017:29" pos:end="1017:30"><name pos:start="1017:29" pos:end="1017:30">t0</name></expr></argument>, <argument pos:start="1017:33" pos:end="1017:51"><expr pos:start="1017:33" pos:end="1017:51"><operator pos:start="1017:33" pos:end="1017:33">(</operator><operator pos:start="1017:34" pos:end="1017:34">(</operator><name pos:start="1017:35" pos:end="1017:41">int64_t</name><operator pos:start="1017:42" pos:end="1017:42">)</operator><name pos:start="1017:43" pos:end="1017:44">t1</name> <operator pos:start="1017:46" pos:end="1017:47">&gt;&gt;</operator> <name pos:start="1017:49" pos:end="1017:50">t2</name><operator pos:start="1017:51" pos:end="1017:51">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1019:13" pos:end="1022:0">break;</break>

<cpp:if pos:start="1021:1" pos:end="1021:26">#<cpp:directive pos:start="1021:2" pos:end="1021:3">if</cpp:directive> <expr pos:start="1021:5" pos:end="1021:26"><name pos:start="1021:5" pos:end="1021:26">TCG_TARGET_HAS_rot_i64</name></expr></cpp:if>

        <case pos:start="1023:9" pos:end="1023:31">case <expr pos:start="1023:14" pos:end="1023:30"><name pos:start="1023:14" pos:end="1023:30">INDEX_op_rotl_i64</name></expr>:</case>

        <case pos:start="1025:9" pos:end="1025:31">case <expr pos:start="1025:14" pos:end="1025:30"><name pos:start="1025:14" pos:end="1025:30">INDEX_op_rotr_i64</name></expr>:</case>

            <expr_stmt pos:start="1027:13" pos:end="1027:19"><expr pos:start="1027:13" pos:end="1027:18"><call pos:start="1027:13" pos:end="1027:18"><name pos:start="1027:13" pos:end="1027:16">TODO</name><argument_list pos:start="1027:17" pos:end="1027:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1029:13" pos:end="1034:0">break;</break>

<cpp:endif pos:start="1031:1" pos:end="1031:6">#<cpp:directive pos:start="1031:2" pos:end="1031:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1033:1" pos:end="1033:30">#<cpp:directive pos:start="1033:2" pos:end="1033:3">if</cpp:directive> <expr pos:start="1033:5" pos:end="1033:30"><name pos:start="1033:5" pos:end="1033:30">TCG_TARGET_HAS_deposit_i64</name></expr></cpp:if>

        <case pos:start="1035:9" pos:end="1035:34">case <expr pos:start="1035:14" pos:end="1035:33"><name pos:start="1035:14" pos:end="1035:33">INDEX_op_deposit_i64</name></expr>:</case>

            <expr_stmt pos:start="1037:13" pos:end="1037:27"><expr pos:start="1037:13" pos:end="1037:26"><name pos:start="1037:13" pos:end="1037:14">t0</name> <operator pos:start="1037:16" pos:end="1037:16">=</operator> <operator pos:start="1037:18" pos:end="1037:18">*</operator><name pos:start="1037:19" pos:end="1037:24">tb_ptr</name><operator pos:start="1037:25" pos:end="1037:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1039:13" pos:end="1039:39"><expr pos:start="1039:13" pos:end="1039:38"><name pos:start="1039:13" pos:end="1039:14">t1</name> <operator pos:start="1039:16" pos:end="1039:16">=</operator> <call pos:start="1039:18" pos:end="1039:38"><name pos:start="1039:18" pos:end="1039:29">tci_read_r64</name><argument_list pos:start="1039:30" pos:end="1039:38">(<argument pos:start="1039:31" pos:end="1039:37"><expr pos:start="1039:31" pos:end="1039:37"><operator pos:start="1039:31" pos:end="1039:31">&amp;</operator><name pos:start="1039:32" pos:end="1039:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1041:13" pos:end="1041:39"><expr pos:start="1041:13" pos:end="1041:38"><name pos:start="1041:13" pos:end="1041:14">t2</name> <operator pos:start="1041:16" pos:end="1041:16">=</operator> <call pos:start="1041:18" pos:end="1041:38"><name pos:start="1041:18" pos:end="1041:29">tci_read_r64</name><argument_list pos:start="1041:30" pos:end="1041:38">(<argument pos:start="1041:31" pos:end="1041:37"><expr pos:start="1041:31" pos:end="1041:37"><operator pos:start="1041:31" pos:end="1041:31">&amp;</operator><name pos:start="1041:32" pos:end="1041:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1043:13" pos:end="1043:30"><expr pos:start="1043:13" pos:end="1043:29"><name pos:start="1043:13" pos:end="1043:17">tmp16</name> <operator pos:start="1043:19" pos:end="1043:19">=</operator> <operator pos:start="1043:21" pos:end="1043:21">*</operator><name pos:start="1043:22" pos:end="1043:27">tb_ptr</name><operator pos:start="1043:28" pos:end="1043:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1045:13" pos:end="1045:29"><expr pos:start="1045:13" pos:end="1045:28"><name pos:start="1045:13" pos:end="1045:16">tmp8</name> <operator pos:start="1045:18" pos:end="1045:18">=</operator> <operator pos:start="1045:20" pos:end="1045:20">*</operator><name pos:start="1045:21" pos:end="1045:26">tb_ptr</name><operator pos:start="1045:27" pos:end="1045:28">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1047:13" pos:end="1047:52"><expr pos:start="1047:13" pos:end="1047:51"><name pos:start="1047:13" pos:end="1047:17">tmp64</name> <operator pos:start="1047:19" pos:end="1047:19">=</operator> <operator pos:start="1047:21" pos:end="1047:21">(</operator><operator pos:start="1047:22" pos:end="1047:22">(</operator><operator pos:start="1047:23" pos:end="1047:23">(</operator><literal type="number" pos:start="1047:24" pos:end="1047:27">1ULL</literal> <operator pos:start="1047:29" pos:end="1047:30">&lt;&lt;</operator> <name pos:start="1047:32" pos:end="1047:35">tmp8</name><operator pos:start="1047:36" pos:end="1047:36">)</operator> <operator pos:start="1047:38" pos:end="1047:38">-</operator> <literal type="number" pos:start="1047:40" pos:end="1047:40">1</literal><operator pos:start="1047:41" pos:end="1047:41">)</operator> <operator pos:start="1047:43" pos:end="1047:44">&lt;&lt;</operator> <name pos:start="1047:46" pos:end="1047:50">tmp16</name><operator pos:start="1047:51" pos:end="1047:51">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1049:13" pos:end="1049:73"><expr pos:start="1049:13" pos:end="1049:72"><call pos:start="1049:13" pos:end="1049:72"><name pos:start="1049:13" pos:end="1049:27">tci_write_reg64</name><argument_list pos:start="1049:28" pos:end="1049:72">(<argument pos:start="1049:29" pos:end="1049:30"><expr pos:start="1049:29" pos:end="1049:30"><name pos:start="1049:29" pos:end="1049:30">t0</name></expr></argument>, <argument pos:start="1049:33" pos:end="1049:71"><expr pos:start="1049:33" pos:end="1049:71"><operator pos:start="1049:33" pos:end="1049:33">(</operator><name pos:start="1049:34" pos:end="1049:35">t1</name> <operator pos:start="1049:37" pos:end="1049:37">&amp;</operator> <operator pos:start="1049:39" pos:end="1049:39">~</operator><name pos:start="1049:40" pos:end="1049:44">tmp64</name><operator pos:start="1049:45" pos:end="1049:45">)</operator> <operator pos:start="1049:47" pos:end="1049:47">|</operator> <operator pos:start="1049:49" pos:end="1049:49">(</operator><operator pos:start="1049:50" pos:end="1049:50">(</operator><name pos:start="1049:51" pos:end="1049:52">t2</name> <operator pos:start="1049:54" pos:end="1049:55">&lt;&lt;</operator> <name pos:start="1049:57" pos:end="1049:61">tmp16</name><operator pos:start="1049:62" pos:end="1049:62">)</operator> <operator pos:start="1049:64" pos:end="1049:64">&amp;</operator> <name pos:start="1049:66" pos:end="1049:70">tmp64</name><operator pos:start="1049:71" pos:end="1049:71">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1051:13" pos:end="1054:0">break;</break>

<cpp:endif pos:start="1053:1" pos:end="1053:6">#<cpp:directive pos:start="1053:2" pos:end="1053:6">endif</cpp:directive></cpp:endif>

        <case pos:start="1055:9" pos:end="1055:33">case <expr pos:start="1055:14" pos:end="1055:32"><name pos:start="1055:14" pos:end="1055:32">INDEX_op_brcond_i64</name></expr>:</case>

            <expr_stmt pos:start="1057:13" pos:end="1057:39"><expr pos:start="1057:13" pos:end="1057:38"><name pos:start="1057:13" pos:end="1057:14">t0</name> <operator pos:start="1057:16" pos:end="1057:16">=</operator> <call pos:start="1057:18" pos:end="1057:38"><name pos:start="1057:18" pos:end="1057:29">tci_read_r64</name><argument_list pos:start="1057:30" pos:end="1057:38">(<argument pos:start="1057:31" pos:end="1057:37"><expr pos:start="1057:31" pos:end="1057:37"><operator pos:start="1057:31" pos:end="1057:31">&amp;</operator><name pos:start="1057:32" pos:end="1057:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1059:13" pos:end="1059:40"><expr pos:start="1059:13" pos:end="1059:39"><name pos:start="1059:13" pos:end="1059:14">t1</name> <operator pos:start="1059:16" pos:end="1059:16">=</operator> <call pos:start="1059:18" pos:end="1059:39"><name pos:start="1059:18" pos:end="1059:30">tci_read_ri64</name><argument_list pos:start="1059:31" pos:end="1059:39">(<argument pos:start="1059:32" pos:end="1059:38"><expr pos:start="1059:32" pos:end="1059:38"><operator pos:start="1059:32" pos:end="1059:32">&amp;</operator><name pos:start="1059:33" pos:end="1059:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1061:13" pos:end="1061:34"><expr pos:start="1061:13" pos:end="1061:33"><name pos:start="1061:13" pos:end="1061:21">condition</name> <operator pos:start="1061:23" pos:end="1061:23">=</operator> <operator pos:start="1061:25" pos:end="1061:25">*</operator><name pos:start="1061:26" pos:end="1061:31">tb_ptr</name><operator pos:start="1061:32" pos:end="1061:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1063:13" pos:end="1063:44"><expr pos:start="1063:13" pos:end="1063:43"><name pos:start="1063:13" pos:end="1063:17">label</name> <operator pos:start="1063:19" pos:end="1063:19">=</operator> <call pos:start="1063:21" pos:end="1063:43"><name pos:start="1063:21" pos:end="1063:34">tci_read_label</name><argument_list pos:start="1063:35" pos:end="1063:43">(<argument pos:start="1063:36" pos:end="1063:42"><expr pos:start="1063:36" pos:end="1063:42"><operator pos:start="1063:36" pos:end="1063:36">&amp;</operator><name pos:start="1063:37" pos:end="1063:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1065:13" pos:end="1073:13"><if pos:start="1065:13" pos:end="1073:13">if <condition pos:start="1065:16" pos:end="1065:49">(<expr pos:start="1065:17" pos:end="1065:48"><call pos:start="1065:17" pos:end="1065:48"><name pos:start="1065:17" pos:end="1065:29">tci_compare64</name><argument_list pos:start="1065:30" pos:end="1065:48">(<argument pos:start="1065:31" pos:end="1065:32"><expr pos:start="1065:31" pos:end="1065:32"><name pos:start="1065:31" pos:end="1065:32">t0</name></expr></argument>, <argument pos:start="1065:35" pos:end="1065:36"><expr pos:start="1065:35" pos:end="1065:36"><name pos:start="1065:35" pos:end="1065:36">t1</name></expr></argument>, <argument pos:start="1065:39" pos:end="1065:47"><expr pos:start="1065:39" pos:end="1065:47"><name pos:start="1065:39" pos:end="1065:47">condition</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1065:51" pos:end="1073:13">{<block_content pos:start="1067:17" pos:end="1071:25">

                <expr_stmt pos:start="1067:17" pos:end="1067:57"><expr pos:start="1067:17" pos:end="1067:56"><call pos:start="1067:17" pos:end="1067:56"><name pos:start="1067:17" pos:end="1067:22">assert</name><argument_list pos:start="1067:23" pos:end="1067:56">(<argument pos:start="1067:24" pos:end="1067:55"><expr pos:start="1067:24" pos:end="1067:55"><name pos:start="1067:24" pos:end="1067:29">tb_ptr</name> <operator pos:start="1067:31" pos:end="1067:32">==</operator> <name pos:start="1067:34" pos:end="1067:45">old_code_ptr</name> <operator pos:start="1067:47" pos:end="1067:47">+</operator> <name pos:start="1067:49" pos:end="1067:55">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1069:17" pos:end="1069:42"><expr pos:start="1069:17" pos:end="1069:41"><name pos:start="1069:17" pos:end="1069:22">tb_ptr</name> <operator pos:start="1069:24" pos:end="1069:24">=</operator> <operator pos:start="1069:26" pos:end="1069:26">(</operator><name pos:start="1069:27" pos:end="1069:33">uint8_t</name> <operator pos:start="1069:35" pos:end="1069:35">*</operator><operator pos:start="1069:36" pos:end="1069:36">)</operator><name pos:start="1069:37" pos:end="1069:41">label</name></expr>;</expr_stmt>

                <continue pos:start="1071:17" pos:end="1071:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="1075:13" pos:end="1078:0">break;</break>

<cpp:if pos:start="1077:1" pos:end="1077:28">#<cpp:directive pos:start="1077:2" pos:end="1077:3">if</cpp:directive> <expr pos:start="1077:5" pos:end="1077:28"><name pos:start="1077:5" pos:end="1077:28">TCG_TARGET_HAS_ext8u_i64</name></expr></cpp:if>

        <case pos:start="1079:9" pos:end="1079:32">case <expr pos:start="1079:14" pos:end="1079:31"><name pos:start="1079:14" pos:end="1079:31">INDEX_op_ext8u_i64</name></expr>:</case>

            <expr_stmt pos:start="1081:13" pos:end="1081:27"><expr pos:start="1081:13" pos:end="1081:26"><name pos:start="1081:13" pos:end="1081:14">t0</name> <operator pos:start="1081:16" pos:end="1081:16">=</operator> <operator pos:start="1081:18" pos:end="1081:18">*</operator><name pos:start="1081:19" pos:end="1081:24">tb_ptr</name><operator pos:start="1081:25" pos:end="1081:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1083:13" pos:end="1083:38"><expr pos:start="1083:13" pos:end="1083:37"><name pos:start="1083:13" pos:end="1083:14">t1</name> <operator pos:start="1083:16" pos:end="1083:16">=</operator> <call pos:start="1083:18" pos:end="1083:37"><name pos:start="1083:18" pos:end="1083:28">tci_read_r8</name><argument_list pos:start="1083:29" pos:end="1083:37">(<argument pos:start="1083:30" pos:end="1083:36"><expr pos:start="1083:30" pos:end="1083:36"><operator pos:start="1083:30" pos:end="1083:30">&amp;</operator><name pos:start="1083:31" pos:end="1083:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1085:13" pos:end="1085:36"><expr pos:start="1085:13" pos:end="1085:35"><call pos:start="1085:13" pos:end="1085:35"><name pos:start="1085:13" pos:end="1085:27">tci_write_reg64</name><argument_list pos:start="1085:28" pos:end="1085:35">(<argument pos:start="1085:29" pos:end="1085:30"><expr pos:start="1085:29" pos:end="1085:30"><name pos:start="1085:29" pos:end="1085:30">t0</name></expr></argument>, <argument pos:start="1085:33" pos:end="1085:34"><expr pos:start="1085:33" pos:end="1085:34"><name pos:start="1085:33" pos:end="1085:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1087:13" pos:end="1092:0">break;</break>

<cpp:endif pos:start="1089:1" pos:end="1089:6">#<cpp:directive pos:start="1089:2" pos:end="1089:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1091:1" pos:end="1091:28">#<cpp:directive pos:start="1091:2" pos:end="1091:3">if</cpp:directive> <expr pos:start="1091:5" pos:end="1091:28"><name pos:start="1091:5" pos:end="1091:28">TCG_TARGET_HAS_ext8s_i64</name></expr></cpp:if>

        <case pos:start="1093:9" pos:end="1093:32">case <expr pos:start="1093:14" pos:end="1093:31"><name pos:start="1093:14" pos:end="1093:31">INDEX_op_ext8s_i64</name></expr>:</case>

            <expr_stmt pos:start="1095:13" pos:end="1095:27"><expr pos:start="1095:13" pos:end="1095:26"><name pos:start="1095:13" pos:end="1095:14">t0</name> <operator pos:start="1095:16" pos:end="1095:16">=</operator> <operator pos:start="1095:18" pos:end="1095:18">*</operator><name pos:start="1095:19" pos:end="1095:24">tb_ptr</name><operator pos:start="1095:25" pos:end="1095:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1097:13" pos:end="1097:39"><expr pos:start="1097:13" pos:end="1097:38"><name pos:start="1097:13" pos:end="1097:14">t1</name> <operator pos:start="1097:16" pos:end="1097:16">=</operator> <call pos:start="1097:18" pos:end="1097:38"><name pos:start="1097:18" pos:end="1097:29">tci_read_r8s</name><argument_list pos:start="1097:30" pos:end="1097:38">(<argument pos:start="1097:31" pos:end="1097:37"><expr pos:start="1097:31" pos:end="1097:37"><operator pos:start="1097:31" pos:end="1097:31">&amp;</operator><name pos:start="1097:32" pos:end="1097:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1099:13" pos:end="1099:36"><expr pos:start="1099:13" pos:end="1099:35"><call pos:start="1099:13" pos:end="1099:35"><name pos:start="1099:13" pos:end="1099:27">tci_write_reg64</name><argument_list pos:start="1099:28" pos:end="1099:35">(<argument pos:start="1099:29" pos:end="1099:30"><expr pos:start="1099:29" pos:end="1099:30"><name pos:start="1099:29" pos:end="1099:30">t0</name></expr></argument>, <argument pos:start="1099:33" pos:end="1099:34"><expr pos:start="1099:33" pos:end="1099:34"><name pos:start="1099:33" pos:end="1099:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1101:13" pos:end="1106:0">break;</break>

<cpp:endif pos:start="1103:1" pos:end="1103:6">#<cpp:directive pos:start="1103:2" pos:end="1103:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1105:1" pos:end="1105:29">#<cpp:directive pos:start="1105:2" pos:end="1105:3">if</cpp:directive> <expr pos:start="1105:5" pos:end="1105:29"><name pos:start="1105:5" pos:end="1105:29">TCG_TARGET_HAS_ext16s_i64</name></expr></cpp:if>

        <case pos:start="1107:9" pos:end="1107:33">case <expr pos:start="1107:14" pos:end="1107:32"><name pos:start="1107:14" pos:end="1107:32">INDEX_op_ext16s_i64</name></expr>:</case>

            <expr_stmt pos:start="1109:13" pos:end="1109:27"><expr pos:start="1109:13" pos:end="1109:26"><name pos:start="1109:13" pos:end="1109:14">t0</name> <operator pos:start="1109:16" pos:end="1109:16">=</operator> <operator pos:start="1109:18" pos:end="1109:18">*</operator><name pos:start="1109:19" pos:end="1109:24">tb_ptr</name><operator pos:start="1109:25" pos:end="1109:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1111:13" pos:end="1111:40"><expr pos:start="1111:13" pos:end="1111:39"><name pos:start="1111:13" pos:end="1111:14">t1</name> <operator pos:start="1111:16" pos:end="1111:16">=</operator> <call pos:start="1111:18" pos:end="1111:39"><name pos:start="1111:18" pos:end="1111:30">tci_read_r16s</name><argument_list pos:start="1111:31" pos:end="1111:39">(<argument pos:start="1111:32" pos:end="1111:38"><expr pos:start="1111:32" pos:end="1111:38"><operator pos:start="1111:32" pos:end="1111:32">&amp;</operator><name pos:start="1111:33" pos:end="1111:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1113:13" pos:end="1113:36"><expr pos:start="1113:13" pos:end="1113:35"><call pos:start="1113:13" pos:end="1113:35"><name pos:start="1113:13" pos:end="1113:27">tci_write_reg64</name><argument_list pos:start="1113:28" pos:end="1113:35">(<argument pos:start="1113:29" pos:end="1113:30"><expr pos:start="1113:29" pos:end="1113:30"><name pos:start="1113:29" pos:end="1113:30">t0</name></expr></argument>, <argument pos:start="1113:33" pos:end="1113:34"><expr pos:start="1113:33" pos:end="1113:34"><name pos:start="1113:33" pos:end="1113:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1115:13" pos:end="1120:0">break;</break>

<cpp:endif pos:start="1117:1" pos:end="1117:6">#<cpp:directive pos:start="1117:2" pos:end="1117:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1119:1" pos:end="1119:29">#<cpp:directive pos:start="1119:2" pos:end="1119:3">if</cpp:directive> <expr pos:start="1119:5" pos:end="1119:29"><name pos:start="1119:5" pos:end="1119:29">TCG_TARGET_HAS_ext16u_i64</name></expr></cpp:if>

        <case pos:start="1121:9" pos:end="1121:33">case <expr pos:start="1121:14" pos:end="1121:32"><name pos:start="1121:14" pos:end="1121:32">INDEX_op_ext16u_i64</name></expr>:</case>

            <expr_stmt pos:start="1123:13" pos:end="1123:27"><expr pos:start="1123:13" pos:end="1123:26"><name pos:start="1123:13" pos:end="1123:14">t0</name> <operator pos:start="1123:16" pos:end="1123:16">=</operator> <operator pos:start="1123:18" pos:end="1123:18">*</operator><name pos:start="1123:19" pos:end="1123:24">tb_ptr</name><operator pos:start="1123:25" pos:end="1123:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1125:13" pos:end="1125:39"><expr pos:start="1125:13" pos:end="1125:38"><name pos:start="1125:13" pos:end="1125:14">t1</name> <operator pos:start="1125:16" pos:end="1125:16">=</operator> <call pos:start="1125:18" pos:end="1125:38"><name pos:start="1125:18" pos:end="1125:29">tci_read_r16</name><argument_list pos:start="1125:30" pos:end="1125:38">(<argument pos:start="1125:31" pos:end="1125:37"><expr pos:start="1125:31" pos:end="1125:37"><operator pos:start="1125:31" pos:end="1125:31">&amp;</operator><name pos:start="1125:32" pos:end="1125:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1127:13" pos:end="1127:36"><expr pos:start="1127:13" pos:end="1127:35"><call pos:start="1127:13" pos:end="1127:35"><name pos:start="1127:13" pos:end="1127:27">tci_write_reg64</name><argument_list pos:start="1127:28" pos:end="1127:35">(<argument pos:start="1127:29" pos:end="1127:30"><expr pos:start="1127:29" pos:end="1127:30"><name pos:start="1127:29" pos:end="1127:30">t0</name></expr></argument>, <argument pos:start="1127:33" pos:end="1127:34"><expr pos:start="1127:33" pos:end="1127:34"><name pos:start="1127:33" pos:end="1127:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1129:13" pos:end="1134:0">break;</break>

<cpp:endif pos:start="1131:1" pos:end="1131:6">#<cpp:directive pos:start="1131:2" pos:end="1131:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1133:1" pos:end="1133:29">#<cpp:directive pos:start="1133:2" pos:end="1133:3">if</cpp:directive> <expr pos:start="1133:5" pos:end="1133:29"><name pos:start="1133:5" pos:end="1133:29">TCG_TARGET_HAS_ext32s_i64</name></expr></cpp:if>

        <case pos:start="1135:9" pos:end="1135:33">case <expr pos:start="1135:14" pos:end="1135:32"><name pos:start="1135:14" pos:end="1135:32">INDEX_op_ext32s_i64</name></expr>:</case>

            <expr_stmt pos:start="1137:13" pos:end="1137:27"><expr pos:start="1137:13" pos:end="1137:26"><name pos:start="1137:13" pos:end="1137:14">t0</name> <operator pos:start="1137:16" pos:end="1137:16">=</operator> <operator pos:start="1137:18" pos:end="1137:18">*</operator><name pos:start="1137:19" pos:end="1137:24">tb_ptr</name><operator pos:start="1137:25" pos:end="1137:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1139:13" pos:end="1139:40"><expr pos:start="1139:13" pos:end="1139:39"><name pos:start="1139:13" pos:end="1139:14">t1</name> <operator pos:start="1139:16" pos:end="1139:16">=</operator> <call pos:start="1139:18" pos:end="1139:39"><name pos:start="1139:18" pos:end="1139:30">tci_read_r32s</name><argument_list pos:start="1139:31" pos:end="1139:39">(<argument pos:start="1139:32" pos:end="1139:38"><expr pos:start="1139:32" pos:end="1139:38"><operator pos:start="1139:32" pos:end="1139:32">&amp;</operator><name pos:start="1139:33" pos:end="1139:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1141:13" pos:end="1141:36"><expr pos:start="1141:13" pos:end="1141:35"><call pos:start="1141:13" pos:end="1141:35"><name pos:start="1141:13" pos:end="1141:27">tci_write_reg64</name><argument_list pos:start="1141:28" pos:end="1141:35">(<argument pos:start="1141:29" pos:end="1141:30"><expr pos:start="1141:29" pos:end="1141:30"><name pos:start="1141:29" pos:end="1141:30">t0</name></expr></argument>, <argument pos:start="1141:33" pos:end="1141:34"><expr pos:start="1141:33" pos:end="1141:34"><name pos:start="1141:33" pos:end="1141:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1143:13" pos:end="1148:0">break;</break>

<cpp:endif pos:start="1145:1" pos:end="1145:6">#<cpp:directive pos:start="1145:2" pos:end="1145:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1147:1" pos:end="1147:29">#<cpp:directive pos:start="1147:2" pos:end="1147:3">if</cpp:directive> <expr pos:start="1147:5" pos:end="1147:29"><name pos:start="1147:5" pos:end="1147:29">TCG_TARGET_HAS_ext32u_i64</name></expr></cpp:if>

        <case pos:start="1149:9" pos:end="1149:33">case <expr pos:start="1149:14" pos:end="1149:32"><name pos:start="1149:14" pos:end="1149:32">INDEX_op_ext32u_i64</name></expr>:</case>

            <expr_stmt pos:start="1151:13" pos:end="1151:27"><expr pos:start="1151:13" pos:end="1151:26"><name pos:start="1151:13" pos:end="1151:14">t0</name> <operator pos:start="1151:16" pos:end="1151:16">=</operator> <operator pos:start="1151:18" pos:end="1151:18">*</operator><name pos:start="1151:19" pos:end="1151:24">tb_ptr</name><operator pos:start="1151:25" pos:end="1151:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1153:13" pos:end="1153:39"><expr pos:start="1153:13" pos:end="1153:38"><name pos:start="1153:13" pos:end="1153:14">t1</name> <operator pos:start="1153:16" pos:end="1153:16">=</operator> <call pos:start="1153:18" pos:end="1153:38"><name pos:start="1153:18" pos:end="1153:29">tci_read_r32</name><argument_list pos:start="1153:30" pos:end="1153:38">(<argument pos:start="1153:31" pos:end="1153:37"><expr pos:start="1153:31" pos:end="1153:37"><operator pos:start="1153:31" pos:end="1153:31">&amp;</operator><name pos:start="1153:32" pos:end="1153:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1155:13" pos:end="1155:36"><expr pos:start="1155:13" pos:end="1155:35"><call pos:start="1155:13" pos:end="1155:35"><name pos:start="1155:13" pos:end="1155:27">tci_write_reg64</name><argument_list pos:start="1155:28" pos:end="1155:35">(<argument pos:start="1155:29" pos:end="1155:30"><expr pos:start="1155:29" pos:end="1155:30"><name pos:start="1155:29" pos:end="1155:30">t0</name></expr></argument>, <argument pos:start="1155:33" pos:end="1155:34"><expr pos:start="1155:33" pos:end="1155:34"><name pos:start="1155:33" pos:end="1155:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1157:13" pos:end="1162:0">break;</break>

<cpp:endif pos:start="1159:1" pos:end="1159:6">#<cpp:directive pos:start="1159:2" pos:end="1159:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1161:1" pos:end="1161:30">#<cpp:directive pos:start="1161:2" pos:end="1161:3">if</cpp:directive> <expr pos:start="1161:5" pos:end="1161:30"><name pos:start="1161:5" pos:end="1161:30">TCG_TARGET_HAS_bswap16_i64</name></expr></cpp:if>

        <case pos:start="1163:9" pos:end="1163:34">case <expr pos:start="1163:14" pos:end="1163:33"><name pos:start="1163:14" pos:end="1163:33">INDEX_op_bswap16_i64</name></expr>:</case>

            <expr_stmt pos:start="1165:13" pos:end="1165:19"><expr pos:start="1165:13" pos:end="1165:18"><call pos:start="1165:13" pos:end="1165:18"><name pos:start="1165:13" pos:end="1165:16">TODO</name><argument_list pos:start="1165:17" pos:end="1165:18">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1167:13" pos:end="1167:27"><expr pos:start="1167:13" pos:end="1167:26"><name pos:start="1167:13" pos:end="1167:14">t0</name> <operator pos:start="1167:16" pos:end="1167:16">=</operator> <operator pos:start="1167:18" pos:end="1167:18">*</operator><name pos:start="1167:19" pos:end="1167:24">tb_ptr</name><operator pos:start="1167:25" pos:end="1167:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1169:13" pos:end="1169:39"><expr pos:start="1169:13" pos:end="1169:38"><name pos:start="1169:13" pos:end="1169:14">t1</name> <operator pos:start="1169:16" pos:end="1169:16">=</operator> <call pos:start="1169:18" pos:end="1169:38"><name pos:start="1169:18" pos:end="1169:29">tci_read_r16</name><argument_list pos:start="1169:30" pos:end="1169:38">(<argument pos:start="1169:31" pos:end="1169:37"><expr pos:start="1169:31" pos:end="1169:37"><operator pos:start="1169:31" pos:end="1169:31">&amp;</operator><name pos:start="1169:32" pos:end="1169:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1171:13" pos:end="1171:45"><expr pos:start="1171:13" pos:end="1171:44"><call pos:start="1171:13" pos:end="1171:44"><name pos:start="1171:13" pos:end="1171:27">tci_write_reg64</name><argument_list pos:start="1171:28" pos:end="1171:44">(<argument pos:start="1171:29" pos:end="1171:30"><expr pos:start="1171:29" pos:end="1171:30"><name pos:start="1171:29" pos:end="1171:30">t0</name></expr></argument>, <argument pos:start="1171:33" pos:end="1171:43"><expr pos:start="1171:33" pos:end="1171:43"><call pos:start="1171:33" pos:end="1171:43"><name pos:start="1171:33" pos:end="1171:39">bswap16</name><argument_list pos:start="1171:40" pos:end="1171:43">(<argument pos:start="1171:41" pos:end="1171:42"><expr pos:start="1171:41" pos:end="1171:42"><name pos:start="1171:41" pos:end="1171:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1173:13" pos:end="1178:0">break;</break>

<cpp:endif pos:start="1175:1" pos:end="1175:6">#<cpp:directive pos:start="1175:2" pos:end="1175:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1177:1" pos:end="1177:30">#<cpp:directive pos:start="1177:2" pos:end="1177:3">if</cpp:directive> <expr pos:start="1177:5" pos:end="1177:30"><name pos:start="1177:5" pos:end="1177:30">TCG_TARGET_HAS_bswap32_i64</name></expr></cpp:if>

        <case pos:start="1179:9" pos:end="1179:34">case <expr pos:start="1179:14" pos:end="1179:33"><name pos:start="1179:14" pos:end="1179:33">INDEX_op_bswap32_i64</name></expr>:</case>

            <expr_stmt pos:start="1181:13" pos:end="1181:27"><expr pos:start="1181:13" pos:end="1181:26"><name pos:start="1181:13" pos:end="1181:14">t0</name> <operator pos:start="1181:16" pos:end="1181:16">=</operator> <operator pos:start="1181:18" pos:end="1181:18">*</operator><name pos:start="1181:19" pos:end="1181:24">tb_ptr</name><operator pos:start="1181:25" pos:end="1181:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1183:13" pos:end="1183:39"><expr pos:start="1183:13" pos:end="1183:38"><name pos:start="1183:13" pos:end="1183:14">t1</name> <operator pos:start="1183:16" pos:end="1183:16">=</operator> <call pos:start="1183:18" pos:end="1183:38"><name pos:start="1183:18" pos:end="1183:29">tci_read_r32</name><argument_list pos:start="1183:30" pos:end="1183:38">(<argument pos:start="1183:31" pos:end="1183:37"><expr pos:start="1183:31" pos:end="1183:37"><operator pos:start="1183:31" pos:end="1183:31">&amp;</operator><name pos:start="1183:32" pos:end="1183:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1185:13" pos:end="1185:45"><expr pos:start="1185:13" pos:end="1185:44"><call pos:start="1185:13" pos:end="1185:44"><name pos:start="1185:13" pos:end="1185:27">tci_write_reg64</name><argument_list pos:start="1185:28" pos:end="1185:44">(<argument pos:start="1185:29" pos:end="1185:30"><expr pos:start="1185:29" pos:end="1185:30"><name pos:start="1185:29" pos:end="1185:30">t0</name></expr></argument>, <argument pos:start="1185:33" pos:end="1185:43"><expr pos:start="1185:33" pos:end="1185:43"><call pos:start="1185:33" pos:end="1185:43"><name pos:start="1185:33" pos:end="1185:39">bswap32</name><argument_list pos:start="1185:40" pos:end="1185:43">(<argument pos:start="1185:41" pos:end="1185:42"><expr pos:start="1185:41" pos:end="1185:42"><name pos:start="1185:41" pos:end="1185:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1187:13" pos:end="1192:0">break;</break>

<cpp:endif pos:start="1189:1" pos:end="1189:6">#<cpp:directive pos:start="1189:2" pos:end="1189:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1191:1" pos:end="1191:30">#<cpp:directive pos:start="1191:2" pos:end="1191:3">if</cpp:directive> <expr pos:start="1191:5" pos:end="1191:30"><name pos:start="1191:5" pos:end="1191:30">TCG_TARGET_HAS_bswap64_i64</name></expr></cpp:if>

        <case pos:start="1193:9" pos:end="1193:34">case <expr pos:start="1193:14" pos:end="1193:33"><name pos:start="1193:14" pos:end="1193:33">INDEX_op_bswap64_i64</name></expr>:</case>

            <expr_stmt pos:start="1195:13" pos:end="1195:27"><expr pos:start="1195:13" pos:end="1195:26"><name pos:start="1195:13" pos:end="1195:14">t0</name> <operator pos:start="1195:16" pos:end="1195:16">=</operator> <operator pos:start="1195:18" pos:end="1195:18">*</operator><name pos:start="1195:19" pos:end="1195:24">tb_ptr</name><operator pos:start="1195:25" pos:end="1195:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1197:13" pos:end="1197:39"><expr pos:start="1197:13" pos:end="1197:38"><name pos:start="1197:13" pos:end="1197:14">t1</name> <operator pos:start="1197:16" pos:end="1197:16">=</operator> <call pos:start="1197:18" pos:end="1197:38"><name pos:start="1197:18" pos:end="1197:29">tci_read_r64</name><argument_list pos:start="1197:30" pos:end="1197:38">(<argument pos:start="1197:31" pos:end="1197:37"><expr pos:start="1197:31" pos:end="1197:37"><operator pos:start="1197:31" pos:end="1197:31">&amp;</operator><name pos:start="1197:32" pos:end="1197:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1199:13" pos:end="1199:45"><expr pos:start="1199:13" pos:end="1199:44"><call pos:start="1199:13" pos:end="1199:44"><name pos:start="1199:13" pos:end="1199:27">tci_write_reg64</name><argument_list pos:start="1199:28" pos:end="1199:44">(<argument pos:start="1199:29" pos:end="1199:30"><expr pos:start="1199:29" pos:end="1199:30"><name pos:start="1199:29" pos:end="1199:30">t0</name></expr></argument>, <argument pos:start="1199:33" pos:end="1199:43"><expr pos:start="1199:33" pos:end="1199:43"><call pos:start="1199:33" pos:end="1199:43"><name pos:start="1199:33" pos:end="1199:39">bswap64</name><argument_list pos:start="1199:40" pos:end="1199:43">(<argument pos:start="1199:41" pos:end="1199:42"><expr pos:start="1199:41" pos:end="1199:42"><name pos:start="1199:41" pos:end="1199:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1201:13" pos:end="1206:0">break;</break>

<cpp:endif pos:start="1203:1" pos:end="1203:6">#<cpp:directive pos:start="1203:2" pos:end="1203:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1205:1" pos:end="1205:26">#<cpp:directive pos:start="1205:2" pos:end="1205:3">if</cpp:directive> <expr pos:start="1205:5" pos:end="1205:26"><name pos:start="1205:5" pos:end="1205:26">TCG_TARGET_HAS_not_i64</name></expr></cpp:if>

        <case pos:start="1207:9" pos:end="1207:30">case <expr pos:start="1207:14" pos:end="1207:29"><name pos:start="1207:14" pos:end="1207:29">INDEX_op_not_i64</name></expr>:</case>

            <expr_stmt pos:start="1209:13" pos:end="1209:27"><expr pos:start="1209:13" pos:end="1209:26"><name pos:start="1209:13" pos:end="1209:14">t0</name> <operator pos:start="1209:16" pos:end="1209:16">=</operator> <operator pos:start="1209:18" pos:end="1209:18">*</operator><name pos:start="1209:19" pos:end="1209:24">tb_ptr</name><operator pos:start="1209:25" pos:end="1209:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1211:13" pos:end="1211:39"><expr pos:start="1211:13" pos:end="1211:38"><name pos:start="1211:13" pos:end="1211:14">t1</name> <operator pos:start="1211:16" pos:end="1211:16">=</operator> <call pos:start="1211:18" pos:end="1211:38"><name pos:start="1211:18" pos:end="1211:29">tci_read_r64</name><argument_list pos:start="1211:30" pos:end="1211:38">(<argument pos:start="1211:31" pos:end="1211:37"><expr pos:start="1211:31" pos:end="1211:37"><operator pos:start="1211:31" pos:end="1211:31">&amp;</operator><name pos:start="1211:32" pos:end="1211:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1213:13" pos:end="1213:37"><expr pos:start="1213:13" pos:end="1213:36"><call pos:start="1213:13" pos:end="1213:36"><name pos:start="1213:13" pos:end="1213:27">tci_write_reg64</name><argument_list pos:start="1213:28" pos:end="1213:36">(<argument pos:start="1213:29" pos:end="1213:30"><expr pos:start="1213:29" pos:end="1213:30"><name pos:start="1213:29" pos:end="1213:30">t0</name></expr></argument>, <argument pos:start="1213:33" pos:end="1213:35"><expr pos:start="1213:33" pos:end="1213:35"><operator pos:start="1213:33" pos:end="1213:33">~</operator><name pos:start="1213:34" pos:end="1213:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1215:13" pos:end="1220:0">break;</break>

<cpp:endif pos:start="1217:1" pos:end="1217:6">#<cpp:directive pos:start="1217:2" pos:end="1217:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1219:1" pos:end="1219:26">#<cpp:directive pos:start="1219:2" pos:end="1219:3">if</cpp:directive> <expr pos:start="1219:5" pos:end="1219:26"><name pos:start="1219:5" pos:end="1219:26">TCG_TARGET_HAS_neg_i64</name></expr></cpp:if>

        <case pos:start="1221:9" pos:end="1221:30">case <expr pos:start="1221:14" pos:end="1221:29"><name pos:start="1221:14" pos:end="1221:29">INDEX_op_neg_i64</name></expr>:</case>

            <expr_stmt pos:start="1223:13" pos:end="1223:27"><expr pos:start="1223:13" pos:end="1223:26"><name pos:start="1223:13" pos:end="1223:14">t0</name> <operator pos:start="1223:16" pos:end="1223:16">=</operator> <operator pos:start="1223:18" pos:end="1223:18">*</operator><name pos:start="1223:19" pos:end="1223:24">tb_ptr</name><operator pos:start="1223:25" pos:end="1223:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1225:13" pos:end="1225:39"><expr pos:start="1225:13" pos:end="1225:38"><name pos:start="1225:13" pos:end="1225:14">t1</name> <operator pos:start="1225:16" pos:end="1225:16">=</operator> <call pos:start="1225:18" pos:end="1225:38"><name pos:start="1225:18" pos:end="1225:29">tci_read_r64</name><argument_list pos:start="1225:30" pos:end="1225:38">(<argument pos:start="1225:31" pos:end="1225:37"><expr pos:start="1225:31" pos:end="1225:37"><operator pos:start="1225:31" pos:end="1225:31">&amp;</operator><name pos:start="1225:32" pos:end="1225:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1227:13" pos:end="1227:37"><expr pos:start="1227:13" pos:end="1227:36"><call pos:start="1227:13" pos:end="1227:36"><name pos:start="1227:13" pos:end="1227:27">tci_write_reg64</name><argument_list pos:start="1227:28" pos:end="1227:36">(<argument pos:start="1227:29" pos:end="1227:30"><expr pos:start="1227:29" pos:end="1227:30"><name pos:start="1227:29" pos:end="1227:30">t0</name></expr></argument>, <argument pos:start="1227:33" pos:end="1227:35"><expr pos:start="1227:33" pos:end="1227:35"><operator pos:start="1227:33" pos:end="1227:33">-</operator><name pos:start="1227:34" pos:end="1227:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1229:13" pos:end="1242:0">break;</break>

<cpp:endif pos:start="1231:1" pos:end="1231:6">#<cpp:directive pos:start="1231:2" pos:end="1231:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="1233:1" pos:end="1233:6">#<cpp:directive pos:start="1233:2" pos:end="1233:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="1233:8" pos:end="1233:38">/* TCG_TARGET_REG_BITS == 64 */</comment>



            <comment type="block" pos:start="1237:13" pos:end="1237:43">/* QEMU specific operations. */</comment>



<cpp:if pos:start="1241:1" pos:end="1241:42">#<cpp:directive pos:start="1241:2" pos:end="1241:3">if</cpp:directive> <expr pos:start="1241:5" pos:end="1241:42"><name pos:start="1241:5" pos:end="1241:20">TARGET_LONG_BITS</name> <operator pos:start="1241:22" pos:end="1241:22">&gt;</operator> <name pos:start="1241:24" pos:end="1241:42">TCG_TARGET_REG_BITS</name></expr></cpp:if>

        <case pos:start="1243:9" pos:end="1243:39">case <expr pos:start="1243:14" pos:end="1243:38"><name pos:start="1243:14" pos:end="1243:38">INDEX_op_debug_insn_start</name></expr>:</case>

            <expr_stmt pos:start="1245:13" pos:end="1245:19"><expr pos:start="1245:13" pos:end="1245:18"><call pos:start="1245:13" pos:end="1245:18"><name pos:start="1245:13" pos:end="1245:16">TODO</name><argument_list pos:start="1245:17" pos:end="1245:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1247:13" pos:end="1250:0">break;</break>

<cpp:else pos:start="1249:1" pos:end="1249:5">#<cpp:directive pos:start="1249:2" pos:end="1249:5">else</cpp:directive></cpp:else>

        <case pos:start="1251:9" pos:end="1251:39">case <expr pos:start="1251:14" pos:end="1251:38"><name pos:start="1251:14" pos:end="1251:38">INDEX_op_debug_insn_start</name></expr>:</case>

            <expr_stmt pos:start="1253:13" pos:end="1253:19"><expr pos:start="1253:13" pos:end="1253:18"><call pos:start="1253:13" pos:end="1253:18"><name pos:start="1253:13" pos:end="1253:16">TODO</name><argument_list pos:start="1253:17" pos:end="1253:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1255:13" pos:end="1258:0">break;</break>

<cpp:endif pos:start="1257:1" pos:end="1257:6">#<cpp:directive pos:start="1257:2" pos:end="1257:6">endif</cpp:directive></cpp:endif>

        <case pos:start="1259:9" pos:end="1259:30">case <expr pos:start="1259:14" pos:end="1259:29"><name pos:start="1259:14" pos:end="1259:29">INDEX_op_exit_tb</name></expr>:</case>

            <expr_stmt pos:start="1261:13" pos:end="1261:42"><expr pos:start="1261:13" pos:end="1261:41"><name pos:start="1261:13" pos:end="1261:19">next_tb</name> <operator pos:start="1261:21" pos:end="1261:21">=</operator> <operator pos:start="1261:23" pos:end="1261:23">*</operator><operator pos:start="1261:24" pos:end="1261:24">(</operator><name pos:start="1261:25" pos:end="1261:32">uint64_t</name> <operator pos:start="1261:34" pos:end="1261:34">*</operator><operator pos:start="1261:35" pos:end="1261:35">)</operator><name pos:start="1261:36" pos:end="1261:41">tb_ptr</name></expr>;</expr_stmt>

            <goto pos:start="1263:13" pos:end="1263:22">goto <name pos:start="1263:18" pos:end="1263:21">exit</name>;</goto>

            <break pos:start="1265:13" pos:end="1265:18">break;</break>

        <case pos:start="1267:9" pos:end="1267:30">case <expr pos:start="1267:14" pos:end="1267:29"><name pos:start="1267:14" pos:end="1267:29">INDEX_op_goto_tb</name></expr>:</case>

            <expr_stmt pos:start="1269:13" pos:end="1269:39"><expr pos:start="1269:13" pos:end="1269:38"><name pos:start="1269:13" pos:end="1269:14">t0</name> <operator pos:start="1269:16" pos:end="1269:16">=</operator> <call pos:start="1269:18" pos:end="1269:38"><name pos:start="1269:18" pos:end="1269:29">tci_read_i32</name><argument_list pos:start="1269:30" pos:end="1269:38">(<argument pos:start="1269:31" pos:end="1269:37"><expr pos:start="1269:31" pos:end="1269:37"><operator pos:start="1269:31" pos:end="1269:31">&amp;</operator><name pos:start="1269:32" pos:end="1269:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1271:13" pos:end="1271:53"><expr pos:start="1271:13" pos:end="1271:52"><call pos:start="1271:13" pos:end="1271:52"><name pos:start="1271:13" pos:end="1271:18">assert</name><argument_list pos:start="1271:19" pos:end="1271:52">(<argument pos:start="1271:20" pos:end="1271:51"><expr pos:start="1271:20" pos:end="1271:51"><name pos:start="1271:20" pos:end="1271:25">tb_ptr</name> <operator pos:start="1271:27" pos:end="1271:28">==</operator> <name pos:start="1271:30" pos:end="1271:41">old_code_ptr</name> <operator pos:start="1271:43" pos:end="1271:43">+</operator> <name pos:start="1271:45" pos:end="1271:51">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1273:13" pos:end="1273:34"><expr pos:start="1273:13" pos:end="1273:33"><name pos:start="1273:13" pos:end="1273:18">tb_ptr</name> <operator pos:start="1273:20" pos:end="1273:21">+=</operator> <operator pos:start="1273:23" pos:end="1273:23">(</operator><name pos:start="1273:24" pos:end="1273:30">int32_t</name><operator pos:start="1273:31" pos:end="1273:31">)</operator><name pos:start="1273:32" pos:end="1273:33">t0</name></expr>;</expr_stmt>

            <continue pos:start="1275:13" pos:end="1275:21">continue;</continue>

        <case pos:start="1277:9" pos:end="1277:32">case <expr pos:start="1277:14" pos:end="1277:31"><name pos:start="1277:14" pos:end="1277:31">INDEX_op_qemu_ld8u</name></expr>:</case>

            <expr_stmt pos:start="1279:13" pos:end="1279:27"><expr pos:start="1279:13" pos:end="1279:26"><name pos:start="1279:13" pos:end="1279:14">t0</name> <operator pos:start="1279:16" pos:end="1279:16">=</operator> <operator pos:start="1279:18" pos:end="1279:18">*</operator><name pos:start="1279:19" pos:end="1279:24">tb_ptr</name><operator pos:start="1279:25" pos:end="1279:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1281:13" pos:end="1284:0"><expr pos:start="1281:13" pos:end="1281:43"><name pos:start="1281:13" pos:end="1281:17">taddr</name> <operator pos:start="1281:19" pos:end="1281:19">=</operator> <call pos:start="1281:21" pos:end="1281:43"><name pos:start="1281:21" pos:end="1281:34">tci_read_ulong</name><argument_list pos:start="1281:35" pos:end="1281:43">(<argument pos:start="1281:36" pos:end="1281:42"><expr pos:start="1281:36" pos:end="1281:42"><operator pos:start="1281:36" pos:end="1281:36">&amp;</operator><name pos:start="1281:37" pos:end="1281:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1283:1" pos:end="1283:21">#<cpp:directive pos:start="1283:2" pos:end="1283:6">ifdef</cpp:directive> <name pos:start="1283:8" pos:end="1283:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1285:13" pos:end="1288:0"><expr pos:start="1285:13" pos:end="1285:66"><name pos:start="1285:13" pos:end="1285:16">tmp8</name> <operator pos:start="1285:18" pos:end="1285:18">=</operator> <call pos:start="1285:20" pos:end="1285:66"><name pos:start="1285:20" pos:end="1285:33">helper_ldb_mmu</name><argument_list pos:start="1285:34" pos:end="1285:66">(<argument pos:start="1285:35" pos:end="1285:37"><expr pos:start="1285:35" pos:end="1285:37"><name pos:start="1285:35" pos:end="1285:37">env</name></expr></argument>, <argument pos:start="1285:40" pos:end="1285:44"><expr pos:start="1285:40" pos:end="1285:44"><name pos:start="1285:40" pos:end="1285:44">taddr</name></expr></argument>, <argument pos:start="1285:47" pos:end="1285:65"><expr pos:start="1285:47" pos:end="1285:65"><call pos:start="1285:47" pos:end="1285:65"><name pos:start="1285:47" pos:end="1285:56">tci_read_i</name><argument_list pos:start="1285:57" pos:end="1285:65">(<argument pos:start="1285:58" pos:end="1285:64"><expr pos:start="1285:58" pos:end="1285:64"><operator pos:start="1285:58" pos:end="1285:58">&amp;</operator><name pos:start="1285:59" pos:end="1285:64">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1287:1" pos:end="1287:5">#<cpp:directive pos:start="1287:2" pos:end="1287:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1289:13" pos:end="1289:48"><expr pos:start="1289:13" pos:end="1289:47"><name pos:start="1289:13" pos:end="1289:21">host_addr</name> <operator pos:start="1289:23" pos:end="1289:23">=</operator> <operator pos:start="1289:25" pos:end="1289:25">(</operator><name pos:start="1289:26" pos:end="1289:41">tcg_target_ulong</name><operator pos:start="1289:42" pos:end="1289:42">)</operator><name pos:start="1289:43" pos:end="1289:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1291:13" pos:end="1291:39"><expr pos:start="1291:13" pos:end="1291:38"><call pos:start="1291:13" pos:end="1291:38"><name pos:start="1291:13" pos:end="1291:18">assert</name><argument_list pos:start="1291:19" pos:end="1291:38">(<argument pos:start="1291:20" pos:end="1291:37"><expr pos:start="1291:20" pos:end="1291:37"><name pos:start="1291:20" pos:end="1291:24">taddr</name> <operator pos:start="1291:26" pos:end="1291:27">==</operator> <name pos:start="1291:29" pos:end="1291:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1293:13" pos:end="1296:0"><expr pos:start="1293:13" pos:end="1293:55"><name pos:start="1293:13" pos:end="1293:16">tmp8</name> <operator pos:start="1293:18" pos:end="1293:18">=</operator> <operator pos:start="1293:20" pos:end="1293:20">*</operator><operator pos:start="1293:21" pos:end="1293:21">(</operator><name pos:start="1293:22" pos:end="1293:28">uint8_t</name> <operator pos:start="1293:30" pos:end="1293:30">*</operator><operator pos:start="1293:31" pos:end="1293:31">)</operator><operator pos:start="1293:32" pos:end="1293:32">(</operator><name pos:start="1293:33" pos:end="1293:41">host_addr</name> <operator pos:start="1293:43" pos:end="1293:43">+</operator> <name pos:start="1293:45" pos:end="1293:54">GUEST_BASE</name><operator pos:start="1293:55" pos:end="1293:55">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="1295:1" pos:end="1295:6">#<cpp:directive pos:start="1295:2" pos:end="1295:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1297:13" pos:end="1297:37"><expr pos:start="1297:13" pos:end="1297:36"><call pos:start="1297:13" pos:end="1297:36"><name pos:start="1297:13" pos:end="1297:26">tci_write_reg8</name><argument_list pos:start="1297:27" pos:end="1297:36">(<argument pos:start="1297:28" pos:end="1297:29"><expr pos:start="1297:28" pos:end="1297:29"><name pos:start="1297:28" pos:end="1297:29">t0</name></expr></argument>, <argument pos:start="1297:32" pos:end="1297:35"><expr pos:start="1297:32" pos:end="1297:35"><name pos:start="1297:32" pos:end="1297:35">tmp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1299:13" pos:end="1299:18">break;</break>

        <case pos:start="1301:9" pos:end="1301:32">case <expr pos:start="1301:14" pos:end="1301:31"><name pos:start="1301:14" pos:end="1301:31">INDEX_op_qemu_ld8s</name></expr>:</case>

            <expr_stmt pos:start="1303:13" pos:end="1303:27"><expr pos:start="1303:13" pos:end="1303:26"><name pos:start="1303:13" pos:end="1303:14">t0</name> <operator pos:start="1303:16" pos:end="1303:16">=</operator> <operator pos:start="1303:18" pos:end="1303:18">*</operator><name pos:start="1303:19" pos:end="1303:24">tb_ptr</name><operator pos:start="1303:25" pos:end="1303:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1305:13" pos:end="1308:0"><expr pos:start="1305:13" pos:end="1305:43"><name pos:start="1305:13" pos:end="1305:17">taddr</name> <operator pos:start="1305:19" pos:end="1305:19">=</operator> <call pos:start="1305:21" pos:end="1305:43"><name pos:start="1305:21" pos:end="1305:34">tci_read_ulong</name><argument_list pos:start="1305:35" pos:end="1305:43">(<argument pos:start="1305:36" pos:end="1305:42"><expr pos:start="1305:36" pos:end="1305:42"><operator pos:start="1305:36" pos:end="1305:36">&amp;</operator><name pos:start="1305:37" pos:end="1305:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1307:1" pos:end="1307:21">#<cpp:directive pos:start="1307:2" pos:end="1307:6">ifdef</cpp:directive> <name pos:start="1307:8" pos:end="1307:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1309:13" pos:end="1312:0"><expr pos:start="1309:13" pos:end="1309:66"><name pos:start="1309:13" pos:end="1309:16">tmp8</name> <operator pos:start="1309:18" pos:end="1309:18">=</operator> <call pos:start="1309:20" pos:end="1309:66"><name pos:start="1309:20" pos:end="1309:33">helper_ldb_mmu</name><argument_list pos:start="1309:34" pos:end="1309:66">(<argument pos:start="1309:35" pos:end="1309:37"><expr pos:start="1309:35" pos:end="1309:37"><name pos:start="1309:35" pos:end="1309:37">env</name></expr></argument>, <argument pos:start="1309:40" pos:end="1309:44"><expr pos:start="1309:40" pos:end="1309:44"><name pos:start="1309:40" pos:end="1309:44">taddr</name></expr></argument>, <argument pos:start="1309:47" pos:end="1309:65"><expr pos:start="1309:47" pos:end="1309:65"><call pos:start="1309:47" pos:end="1309:65"><name pos:start="1309:47" pos:end="1309:56">tci_read_i</name><argument_list pos:start="1309:57" pos:end="1309:65">(<argument pos:start="1309:58" pos:end="1309:64"><expr pos:start="1309:58" pos:end="1309:64"><operator pos:start="1309:58" pos:end="1309:58">&amp;</operator><name pos:start="1309:59" pos:end="1309:64">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1311:1" pos:end="1311:5">#<cpp:directive pos:start="1311:2" pos:end="1311:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1313:13" pos:end="1313:48"><expr pos:start="1313:13" pos:end="1313:47"><name pos:start="1313:13" pos:end="1313:21">host_addr</name> <operator pos:start="1313:23" pos:end="1313:23">=</operator> <operator pos:start="1313:25" pos:end="1313:25">(</operator><name pos:start="1313:26" pos:end="1313:41">tcg_target_ulong</name><operator pos:start="1313:42" pos:end="1313:42">)</operator><name pos:start="1313:43" pos:end="1313:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1315:13" pos:end="1315:39"><expr pos:start="1315:13" pos:end="1315:38"><call pos:start="1315:13" pos:end="1315:38"><name pos:start="1315:13" pos:end="1315:18">assert</name><argument_list pos:start="1315:19" pos:end="1315:38">(<argument pos:start="1315:20" pos:end="1315:37"><expr pos:start="1315:20" pos:end="1315:37"><name pos:start="1315:20" pos:end="1315:24">taddr</name> <operator pos:start="1315:26" pos:end="1315:27">==</operator> <name pos:start="1315:29" pos:end="1315:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1317:13" pos:end="1320:0"><expr pos:start="1317:13" pos:end="1317:55"><name pos:start="1317:13" pos:end="1317:16">tmp8</name> <operator pos:start="1317:18" pos:end="1317:18">=</operator> <operator pos:start="1317:20" pos:end="1317:20">*</operator><operator pos:start="1317:21" pos:end="1317:21">(</operator><name pos:start="1317:22" pos:end="1317:28">uint8_t</name> <operator pos:start="1317:30" pos:end="1317:30">*</operator><operator pos:start="1317:31" pos:end="1317:31">)</operator><operator pos:start="1317:32" pos:end="1317:32">(</operator><name pos:start="1317:33" pos:end="1317:41">host_addr</name> <operator pos:start="1317:43" pos:end="1317:43">+</operator> <name pos:start="1317:45" pos:end="1317:54">GUEST_BASE</name><operator pos:start="1317:55" pos:end="1317:55">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="1319:1" pos:end="1319:6">#<cpp:directive pos:start="1319:2" pos:end="1319:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1321:13" pos:end="1321:38"><expr pos:start="1321:13" pos:end="1321:37"><call pos:start="1321:13" pos:end="1321:37"><name pos:start="1321:13" pos:end="1321:27">tci_write_reg8s</name><argument_list pos:start="1321:28" pos:end="1321:37">(<argument pos:start="1321:29" pos:end="1321:30"><expr pos:start="1321:29" pos:end="1321:30"><name pos:start="1321:29" pos:end="1321:30">t0</name></expr></argument>, <argument pos:start="1321:33" pos:end="1321:36"><expr pos:start="1321:33" pos:end="1321:36"><name pos:start="1321:33" pos:end="1321:36">tmp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1323:13" pos:end="1323:18">break;</break>

        <case pos:start="1325:9" pos:end="1325:33">case <expr pos:start="1325:14" pos:end="1325:32"><name pos:start="1325:14" pos:end="1325:32">INDEX_op_qemu_ld16u</name></expr>:</case>

            <expr_stmt pos:start="1327:13" pos:end="1327:27"><expr pos:start="1327:13" pos:end="1327:26"><name pos:start="1327:13" pos:end="1327:14">t0</name> <operator pos:start="1327:16" pos:end="1327:16">=</operator> <operator pos:start="1327:18" pos:end="1327:18">*</operator><name pos:start="1327:19" pos:end="1327:24">tb_ptr</name><operator pos:start="1327:25" pos:end="1327:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1329:13" pos:end="1332:0"><expr pos:start="1329:13" pos:end="1329:43"><name pos:start="1329:13" pos:end="1329:17">taddr</name> <operator pos:start="1329:19" pos:end="1329:19">=</operator> <call pos:start="1329:21" pos:end="1329:43"><name pos:start="1329:21" pos:end="1329:34">tci_read_ulong</name><argument_list pos:start="1329:35" pos:end="1329:43">(<argument pos:start="1329:36" pos:end="1329:42"><expr pos:start="1329:36" pos:end="1329:42"><operator pos:start="1329:36" pos:end="1329:36">&amp;</operator><name pos:start="1329:37" pos:end="1329:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1331:1" pos:end="1331:21">#<cpp:directive pos:start="1331:2" pos:end="1331:6">ifdef</cpp:directive> <name pos:start="1331:8" pos:end="1331:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1333:13" pos:end="1336:0"><expr pos:start="1333:13" pos:end="1333:67"><name pos:start="1333:13" pos:end="1333:17">tmp16</name> <operator pos:start="1333:19" pos:end="1333:19">=</operator> <call pos:start="1333:21" pos:end="1333:67"><name pos:start="1333:21" pos:end="1333:34">helper_ldw_mmu</name><argument_list pos:start="1333:35" pos:end="1333:67">(<argument pos:start="1333:36" pos:end="1333:38"><expr pos:start="1333:36" pos:end="1333:38"><name pos:start="1333:36" pos:end="1333:38">env</name></expr></argument>, <argument pos:start="1333:41" pos:end="1333:45"><expr pos:start="1333:41" pos:end="1333:45"><name pos:start="1333:41" pos:end="1333:45">taddr</name></expr></argument>, <argument pos:start="1333:48" pos:end="1333:66"><expr pos:start="1333:48" pos:end="1333:66"><call pos:start="1333:48" pos:end="1333:66"><name pos:start="1333:48" pos:end="1333:57">tci_read_i</name><argument_list pos:start="1333:58" pos:end="1333:66">(<argument pos:start="1333:59" pos:end="1333:65"><expr pos:start="1333:59" pos:end="1333:65"><operator pos:start="1333:59" pos:end="1333:59">&amp;</operator><name pos:start="1333:60" pos:end="1333:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1335:1" pos:end="1335:5">#<cpp:directive pos:start="1335:2" pos:end="1335:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1337:13" pos:end="1337:48"><expr pos:start="1337:13" pos:end="1337:47"><name pos:start="1337:13" pos:end="1337:21">host_addr</name> <operator pos:start="1337:23" pos:end="1337:23">=</operator> <operator pos:start="1337:25" pos:end="1337:25">(</operator><name pos:start="1337:26" pos:end="1337:41">tcg_target_ulong</name><operator pos:start="1337:42" pos:end="1337:42">)</operator><name pos:start="1337:43" pos:end="1337:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1339:13" pos:end="1339:39"><expr pos:start="1339:13" pos:end="1339:38"><call pos:start="1339:13" pos:end="1339:38"><name pos:start="1339:13" pos:end="1339:18">assert</name><argument_list pos:start="1339:19" pos:end="1339:38">(<argument pos:start="1339:20" pos:end="1339:37"><expr pos:start="1339:20" pos:end="1339:37"><name pos:start="1339:20" pos:end="1339:24">taddr</name> <operator pos:start="1339:26" pos:end="1339:27">==</operator> <name pos:start="1339:29" pos:end="1339:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1341:13" pos:end="1344:0"><expr pos:start="1341:13" pos:end="1341:66"><name pos:start="1341:13" pos:end="1341:17">tmp16</name> <operator pos:start="1341:19" pos:end="1341:19">=</operator> <call pos:start="1341:21" pos:end="1341:66"><name pos:start="1341:21" pos:end="1341:27">tswap16</name><argument_list pos:start="1341:28" pos:end="1341:66">(<argument pos:start="1341:29" pos:end="1341:65"><expr pos:start="1341:29" pos:end="1341:65"><operator pos:start="1341:29" pos:end="1341:29">*</operator><operator pos:start="1341:30" pos:end="1341:30">(</operator><name pos:start="1341:31" pos:end="1341:38">uint16_t</name> <operator pos:start="1341:40" pos:end="1341:40">*</operator><operator pos:start="1341:41" pos:end="1341:41">)</operator><operator pos:start="1341:42" pos:end="1341:42">(</operator><name pos:start="1341:43" pos:end="1341:51">host_addr</name> <operator pos:start="1341:53" pos:end="1341:53">+</operator> <name pos:start="1341:55" pos:end="1341:64">GUEST_BASE</name><operator pos:start="1341:65" pos:end="1341:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1343:1" pos:end="1343:6">#<cpp:directive pos:start="1343:2" pos:end="1343:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1345:13" pos:end="1345:39"><expr pos:start="1345:13" pos:end="1345:38"><call pos:start="1345:13" pos:end="1345:38"><name pos:start="1345:13" pos:end="1345:27">tci_write_reg16</name><argument_list pos:start="1345:28" pos:end="1345:38">(<argument pos:start="1345:29" pos:end="1345:30"><expr pos:start="1345:29" pos:end="1345:30"><name pos:start="1345:29" pos:end="1345:30">t0</name></expr></argument>, <argument pos:start="1345:33" pos:end="1345:37"><expr pos:start="1345:33" pos:end="1345:37"><name pos:start="1345:33" pos:end="1345:37">tmp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1347:13" pos:end="1347:18">break;</break>

        <case pos:start="1349:9" pos:end="1349:33">case <expr pos:start="1349:14" pos:end="1349:32"><name pos:start="1349:14" pos:end="1349:32">INDEX_op_qemu_ld16s</name></expr>:</case>

            <expr_stmt pos:start="1351:13" pos:end="1351:27"><expr pos:start="1351:13" pos:end="1351:26"><name pos:start="1351:13" pos:end="1351:14">t0</name> <operator pos:start="1351:16" pos:end="1351:16">=</operator> <operator pos:start="1351:18" pos:end="1351:18">*</operator><name pos:start="1351:19" pos:end="1351:24">tb_ptr</name><operator pos:start="1351:25" pos:end="1351:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1353:13" pos:end="1356:0"><expr pos:start="1353:13" pos:end="1353:43"><name pos:start="1353:13" pos:end="1353:17">taddr</name> <operator pos:start="1353:19" pos:end="1353:19">=</operator> <call pos:start="1353:21" pos:end="1353:43"><name pos:start="1353:21" pos:end="1353:34">tci_read_ulong</name><argument_list pos:start="1353:35" pos:end="1353:43">(<argument pos:start="1353:36" pos:end="1353:42"><expr pos:start="1353:36" pos:end="1353:42"><operator pos:start="1353:36" pos:end="1353:36">&amp;</operator><name pos:start="1353:37" pos:end="1353:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1355:1" pos:end="1355:21">#<cpp:directive pos:start="1355:2" pos:end="1355:6">ifdef</cpp:directive> <name pos:start="1355:8" pos:end="1355:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1357:13" pos:end="1360:0"><expr pos:start="1357:13" pos:end="1357:67"><name pos:start="1357:13" pos:end="1357:17">tmp16</name> <operator pos:start="1357:19" pos:end="1357:19">=</operator> <call pos:start="1357:21" pos:end="1357:67"><name pos:start="1357:21" pos:end="1357:34">helper_ldw_mmu</name><argument_list pos:start="1357:35" pos:end="1357:67">(<argument pos:start="1357:36" pos:end="1357:38"><expr pos:start="1357:36" pos:end="1357:38"><name pos:start="1357:36" pos:end="1357:38">env</name></expr></argument>, <argument pos:start="1357:41" pos:end="1357:45"><expr pos:start="1357:41" pos:end="1357:45"><name pos:start="1357:41" pos:end="1357:45">taddr</name></expr></argument>, <argument pos:start="1357:48" pos:end="1357:66"><expr pos:start="1357:48" pos:end="1357:66"><call pos:start="1357:48" pos:end="1357:66"><name pos:start="1357:48" pos:end="1357:57">tci_read_i</name><argument_list pos:start="1357:58" pos:end="1357:66">(<argument pos:start="1357:59" pos:end="1357:65"><expr pos:start="1357:59" pos:end="1357:65"><operator pos:start="1357:59" pos:end="1357:59">&amp;</operator><name pos:start="1357:60" pos:end="1357:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1359:1" pos:end="1359:5">#<cpp:directive pos:start="1359:2" pos:end="1359:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1361:13" pos:end="1361:48"><expr pos:start="1361:13" pos:end="1361:47"><name pos:start="1361:13" pos:end="1361:21">host_addr</name> <operator pos:start="1361:23" pos:end="1361:23">=</operator> <operator pos:start="1361:25" pos:end="1361:25">(</operator><name pos:start="1361:26" pos:end="1361:41">tcg_target_ulong</name><operator pos:start="1361:42" pos:end="1361:42">)</operator><name pos:start="1361:43" pos:end="1361:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1363:13" pos:end="1363:39"><expr pos:start="1363:13" pos:end="1363:38"><call pos:start="1363:13" pos:end="1363:38"><name pos:start="1363:13" pos:end="1363:18">assert</name><argument_list pos:start="1363:19" pos:end="1363:38">(<argument pos:start="1363:20" pos:end="1363:37"><expr pos:start="1363:20" pos:end="1363:37"><name pos:start="1363:20" pos:end="1363:24">taddr</name> <operator pos:start="1363:26" pos:end="1363:27">==</operator> <name pos:start="1363:29" pos:end="1363:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1365:13" pos:end="1368:0"><expr pos:start="1365:13" pos:end="1365:66"><name pos:start="1365:13" pos:end="1365:17">tmp16</name> <operator pos:start="1365:19" pos:end="1365:19">=</operator> <call pos:start="1365:21" pos:end="1365:66"><name pos:start="1365:21" pos:end="1365:27">tswap16</name><argument_list pos:start="1365:28" pos:end="1365:66">(<argument pos:start="1365:29" pos:end="1365:65"><expr pos:start="1365:29" pos:end="1365:65"><operator pos:start="1365:29" pos:end="1365:29">*</operator><operator pos:start="1365:30" pos:end="1365:30">(</operator><name pos:start="1365:31" pos:end="1365:38">uint16_t</name> <operator pos:start="1365:40" pos:end="1365:40">*</operator><operator pos:start="1365:41" pos:end="1365:41">)</operator><operator pos:start="1365:42" pos:end="1365:42">(</operator><name pos:start="1365:43" pos:end="1365:51">host_addr</name> <operator pos:start="1365:53" pos:end="1365:53">+</operator> <name pos:start="1365:55" pos:end="1365:64">GUEST_BASE</name><operator pos:start="1365:65" pos:end="1365:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1367:1" pos:end="1367:6">#<cpp:directive pos:start="1367:2" pos:end="1367:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1369:13" pos:end="1369:40"><expr pos:start="1369:13" pos:end="1369:39"><call pos:start="1369:13" pos:end="1369:39"><name pos:start="1369:13" pos:end="1369:28">tci_write_reg16s</name><argument_list pos:start="1369:29" pos:end="1369:39">(<argument pos:start="1369:30" pos:end="1369:31"><expr pos:start="1369:30" pos:end="1369:31"><name pos:start="1369:30" pos:end="1369:31">t0</name></expr></argument>, <argument pos:start="1369:34" pos:end="1369:38"><expr pos:start="1369:34" pos:end="1369:38"><name pos:start="1369:34" pos:end="1369:38">tmp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1371:13" pos:end="1374:0">break;</break>

<cpp:if pos:start="1373:1" pos:end="1373:29">#<cpp:directive pos:start="1373:2" pos:end="1373:3">if</cpp:directive> <expr pos:start="1373:5" pos:end="1373:29"><name pos:start="1373:5" pos:end="1373:23">TCG_TARGET_REG_BITS</name> <operator pos:start="1373:25" pos:end="1373:26">==</operator> <literal type="number" pos:start="1373:28" pos:end="1373:29">64</literal></expr></cpp:if>

        <case pos:start="1375:9" pos:end="1375:33">case <expr pos:start="1375:14" pos:end="1375:32"><name pos:start="1375:14" pos:end="1375:32">INDEX_op_qemu_ld32u</name></expr>:</case>

            <expr_stmt pos:start="1377:13" pos:end="1377:27"><expr pos:start="1377:13" pos:end="1377:26"><name pos:start="1377:13" pos:end="1377:14">t0</name> <operator pos:start="1377:16" pos:end="1377:16">=</operator> <operator pos:start="1377:18" pos:end="1377:18">*</operator><name pos:start="1377:19" pos:end="1377:24">tb_ptr</name><operator pos:start="1377:25" pos:end="1377:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1379:13" pos:end="1382:0"><expr pos:start="1379:13" pos:end="1379:43"><name pos:start="1379:13" pos:end="1379:17">taddr</name> <operator pos:start="1379:19" pos:end="1379:19">=</operator> <call pos:start="1379:21" pos:end="1379:43"><name pos:start="1379:21" pos:end="1379:34">tci_read_ulong</name><argument_list pos:start="1379:35" pos:end="1379:43">(<argument pos:start="1379:36" pos:end="1379:42"><expr pos:start="1379:36" pos:end="1379:42"><operator pos:start="1379:36" pos:end="1379:36">&amp;</operator><name pos:start="1379:37" pos:end="1379:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1381:1" pos:end="1381:21">#<cpp:directive pos:start="1381:2" pos:end="1381:6">ifdef</cpp:directive> <name pos:start="1381:8" pos:end="1381:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1383:13" pos:end="1386:0"><expr pos:start="1383:13" pos:end="1383:67"><name pos:start="1383:13" pos:end="1383:17">tmp32</name> <operator pos:start="1383:19" pos:end="1383:19">=</operator> <call pos:start="1383:21" pos:end="1383:67"><name pos:start="1383:21" pos:end="1383:34">helper_ldl_mmu</name><argument_list pos:start="1383:35" pos:end="1383:67">(<argument pos:start="1383:36" pos:end="1383:38"><expr pos:start="1383:36" pos:end="1383:38"><name pos:start="1383:36" pos:end="1383:38">env</name></expr></argument>, <argument pos:start="1383:41" pos:end="1383:45"><expr pos:start="1383:41" pos:end="1383:45"><name pos:start="1383:41" pos:end="1383:45">taddr</name></expr></argument>, <argument pos:start="1383:48" pos:end="1383:66"><expr pos:start="1383:48" pos:end="1383:66"><call pos:start="1383:48" pos:end="1383:66"><name pos:start="1383:48" pos:end="1383:57">tci_read_i</name><argument_list pos:start="1383:58" pos:end="1383:66">(<argument pos:start="1383:59" pos:end="1383:65"><expr pos:start="1383:59" pos:end="1383:65"><operator pos:start="1383:59" pos:end="1383:59">&amp;</operator><name pos:start="1383:60" pos:end="1383:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1385:1" pos:end="1385:5">#<cpp:directive pos:start="1385:2" pos:end="1385:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1387:13" pos:end="1387:48"><expr pos:start="1387:13" pos:end="1387:47"><name pos:start="1387:13" pos:end="1387:21">host_addr</name> <operator pos:start="1387:23" pos:end="1387:23">=</operator> <operator pos:start="1387:25" pos:end="1387:25">(</operator><name pos:start="1387:26" pos:end="1387:41">tcg_target_ulong</name><operator pos:start="1387:42" pos:end="1387:42">)</operator><name pos:start="1387:43" pos:end="1387:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1389:13" pos:end="1389:39"><expr pos:start="1389:13" pos:end="1389:38"><call pos:start="1389:13" pos:end="1389:38"><name pos:start="1389:13" pos:end="1389:18">assert</name><argument_list pos:start="1389:19" pos:end="1389:38">(<argument pos:start="1389:20" pos:end="1389:37"><expr pos:start="1389:20" pos:end="1389:37"><name pos:start="1389:20" pos:end="1389:24">taddr</name> <operator pos:start="1389:26" pos:end="1389:27">==</operator> <name pos:start="1389:29" pos:end="1389:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1391:13" pos:end="1394:0"><expr pos:start="1391:13" pos:end="1391:66"><name pos:start="1391:13" pos:end="1391:17">tmp32</name> <operator pos:start="1391:19" pos:end="1391:19">=</operator> <call pos:start="1391:21" pos:end="1391:66"><name pos:start="1391:21" pos:end="1391:27">tswap32</name><argument_list pos:start="1391:28" pos:end="1391:66">(<argument pos:start="1391:29" pos:end="1391:65"><expr pos:start="1391:29" pos:end="1391:65"><operator pos:start="1391:29" pos:end="1391:29">*</operator><operator pos:start="1391:30" pos:end="1391:30">(</operator><name pos:start="1391:31" pos:end="1391:38">uint32_t</name> <operator pos:start="1391:40" pos:end="1391:40">*</operator><operator pos:start="1391:41" pos:end="1391:41">)</operator><operator pos:start="1391:42" pos:end="1391:42">(</operator><name pos:start="1391:43" pos:end="1391:51">host_addr</name> <operator pos:start="1391:53" pos:end="1391:53">+</operator> <name pos:start="1391:55" pos:end="1391:64">GUEST_BASE</name><operator pos:start="1391:65" pos:end="1391:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1393:1" pos:end="1393:6">#<cpp:directive pos:start="1393:2" pos:end="1393:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1395:13" pos:end="1395:39"><expr pos:start="1395:13" pos:end="1395:38"><call pos:start="1395:13" pos:end="1395:38"><name pos:start="1395:13" pos:end="1395:27">tci_write_reg32</name><argument_list pos:start="1395:28" pos:end="1395:38">(<argument pos:start="1395:29" pos:end="1395:30"><expr pos:start="1395:29" pos:end="1395:30"><name pos:start="1395:29" pos:end="1395:30">t0</name></expr></argument>, <argument pos:start="1395:33" pos:end="1395:37"><expr pos:start="1395:33" pos:end="1395:37"><name pos:start="1395:33" pos:end="1395:37">tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1397:13" pos:end="1397:18">break;</break>

        <case pos:start="1399:9" pos:end="1399:33">case <expr pos:start="1399:14" pos:end="1399:32"><name pos:start="1399:14" pos:end="1399:32">INDEX_op_qemu_ld32s</name></expr>:</case>

            <expr_stmt pos:start="1401:13" pos:end="1401:27"><expr pos:start="1401:13" pos:end="1401:26"><name pos:start="1401:13" pos:end="1401:14">t0</name> <operator pos:start="1401:16" pos:end="1401:16">=</operator> <operator pos:start="1401:18" pos:end="1401:18">*</operator><name pos:start="1401:19" pos:end="1401:24">tb_ptr</name><operator pos:start="1401:25" pos:end="1401:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1403:13" pos:end="1406:0"><expr pos:start="1403:13" pos:end="1403:43"><name pos:start="1403:13" pos:end="1403:17">taddr</name> <operator pos:start="1403:19" pos:end="1403:19">=</operator> <call pos:start="1403:21" pos:end="1403:43"><name pos:start="1403:21" pos:end="1403:34">tci_read_ulong</name><argument_list pos:start="1403:35" pos:end="1403:43">(<argument pos:start="1403:36" pos:end="1403:42"><expr pos:start="1403:36" pos:end="1403:42"><operator pos:start="1403:36" pos:end="1403:36">&amp;</operator><name pos:start="1403:37" pos:end="1403:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1405:1" pos:end="1405:21">#<cpp:directive pos:start="1405:2" pos:end="1405:6">ifdef</cpp:directive> <name pos:start="1405:8" pos:end="1405:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1407:13" pos:end="1410:0"><expr pos:start="1407:13" pos:end="1407:67"><name pos:start="1407:13" pos:end="1407:17">tmp32</name> <operator pos:start="1407:19" pos:end="1407:19">=</operator> <call pos:start="1407:21" pos:end="1407:67"><name pos:start="1407:21" pos:end="1407:34">helper_ldl_mmu</name><argument_list pos:start="1407:35" pos:end="1407:67">(<argument pos:start="1407:36" pos:end="1407:38"><expr pos:start="1407:36" pos:end="1407:38"><name pos:start="1407:36" pos:end="1407:38">env</name></expr></argument>, <argument pos:start="1407:41" pos:end="1407:45"><expr pos:start="1407:41" pos:end="1407:45"><name pos:start="1407:41" pos:end="1407:45">taddr</name></expr></argument>, <argument pos:start="1407:48" pos:end="1407:66"><expr pos:start="1407:48" pos:end="1407:66"><call pos:start="1407:48" pos:end="1407:66"><name pos:start="1407:48" pos:end="1407:57">tci_read_i</name><argument_list pos:start="1407:58" pos:end="1407:66">(<argument pos:start="1407:59" pos:end="1407:65"><expr pos:start="1407:59" pos:end="1407:65"><operator pos:start="1407:59" pos:end="1407:59">&amp;</operator><name pos:start="1407:60" pos:end="1407:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1409:1" pos:end="1409:5">#<cpp:directive pos:start="1409:2" pos:end="1409:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1411:13" pos:end="1411:48"><expr pos:start="1411:13" pos:end="1411:47"><name pos:start="1411:13" pos:end="1411:21">host_addr</name> <operator pos:start="1411:23" pos:end="1411:23">=</operator> <operator pos:start="1411:25" pos:end="1411:25">(</operator><name pos:start="1411:26" pos:end="1411:41">tcg_target_ulong</name><operator pos:start="1411:42" pos:end="1411:42">)</operator><name pos:start="1411:43" pos:end="1411:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1413:13" pos:end="1413:39"><expr pos:start="1413:13" pos:end="1413:38"><call pos:start="1413:13" pos:end="1413:38"><name pos:start="1413:13" pos:end="1413:18">assert</name><argument_list pos:start="1413:19" pos:end="1413:38">(<argument pos:start="1413:20" pos:end="1413:37"><expr pos:start="1413:20" pos:end="1413:37"><name pos:start="1413:20" pos:end="1413:24">taddr</name> <operator pos:start="1413:26" pos:end="1413:27">==</operator> <name pos:start="1413:29" pos:end="1413:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1415:13" pos:end="1418:0"><expr pos:start="1415:13" pos:end="1415:66"><name pos:start="1415:13" pos:end="1415:17">tmp32</name> <operator pos:start="1415:19" pos:end="1415:19">=</operator> <call pos:start="1415:21" pos:end="1415:66"><name pos:start="1415:21" pos:end="1415:27">tswap32</name><argument_list pos:start="1415:28" pos:end="1415:66">(<argument pos:start="1415:29" pos:end="1415:65"><expr pos:start="1415:29" pos:end="1415:65"><operator pos:start="1415:29" pos:end="1415:29">*</operator><operator pos:start="1415:30" pos:end="1415:30">(</operator><name pos:start="1415:31" pos:end="1415:38">uint32_t</name> <operator pos:start="1415:40" pos:end="1415:40">*</operator><operator pos:start="1415:41" pos:end="1415:41">)</operator><operator pos:start="1415:42" pos:end="1415:42">(</operator><name pos:start="1415:43" pos:end="1415:51">host_addr</name> <operator pos:start="1415:53" pos:end="1415:53">+</operator> <name pos:start="1415:55" pos:end="1415:64">GUEST_BASE</name><operator pos:start="1415:65" pos:end="1415:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1417:1" pos:end="1417:6">#<cpp:directive pos:start="1417:2" pos:end="1417:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1419:13" pos:end="1419:40"><expr pos:start="1419:13" pos:end="1419:39"><call pos:start="1419:13" pos:end="1419:39"><name pos:start="1419:13" pos:end="1419:28">tci_write_reg32s</name><argument_list pos:start="1419:29" pos:end="1419:39">(<argument pos:start="1419:30" pos:end="1419:31"><expr pos:start="1419:30" pos:end="1419:31"><name pos:start="1419:30" pos:end="1419:31">t0</name></expr></argument>, <argument pos:start="1419:34" pos:end="1419:38"><expr pos:start="1419:34" pos:end="1419:38"><name pos:start="1419:34" pos:end="1419:38">tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1421:13" pos:end="1424:0">break;</break>

<cpp:endif pos:start="1423:1" pos:end="1423:6">#<cpp:directive pos:start="1423:2" pos:end="1423:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="1423:8" pos:end="1423:38">/* TCG_TARGET_REG_BITS == 64 */</comment>

        <case pos:start="1425:9" pos:end="1425:32">case <expr pos:start="1425:14" pos:end="1425:31"><name pos:start="1425:14" pos:end="1425:31">INDEX_op_qemu_ld32</name></expr>:</case>

            <expr_stmt pos:start="1427:13" pos:end="1427:27"><expr pos:start="1427:13" pos:end="1427:26"><name pos:start="1427:13" pos:end="1427:14">t0</name> <operator pos:start="1427:16" pos:end="1427:16">=</operator> <operator pos:start="1427:18" pos:end="1427:18">*</operator><name pos:start="1427:19" pos:end="1427:24">tb_ptr</name><operator pos:start="1427:25" pos:end="1427:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1429:13" pos:end="1432:0"><expr pos:start="1429:13" pos:end="1429:43"><name pos:start="1429:13" pos:end="1429:17">taddr</name> <operator pos:start="1429:19" pos:end="1429:19">=</operator> <call pos:start="1429:21" pos:end="1429:43"><name pos:start="1429:21" pos:end="1429:34">tci_read_ulong</name><argument_list pos:start="1429:35" pos:end="1429:43">(<argument pos:start="1429:36" pos:end="1429:42"><expr pos:start="1429:36" pos:end="1429:42"><operator pos:start="1429:36" pos:end="1429:36">&amp;</operator><name pos:start="1429:37" pos:end="1429:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1431:1" pos:end="1431:21">#<cpp:directive pos:start="1431:2" pos:end="1431:6">ifdef</cpp:directive> <name pos:start="1431:8" pos:end="1431:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1433:13" pos:end="1436:0"><expr pos:start="1433:13" pos:end="1433:67"><name pos:start="1433:13" pos:end="1433:17">tmp32</name> <operator pos:start="1433:19" pos:end="1433:19">=</operator> <call pos:start="1433:21" pos:end="1433:67"><name pos:start="1433:21" pos:end="1433:34">helper_ldl_mmu</name><argument_list pos:start="1433:35" pos:end="1433:67">(<argument pos:start="1433:36" pos:end="1433:38"><expr pos:start="1433:36" pos:end="1433:38"><name pos:start="1433:36" pos:end="1433:38">env</name></expr></argument>, <argument pos:start="1433:41" pos:end="1433:45"><expr pos:start="1433:41" pos:end="1433:45"><name pos:start="1433:41" pos:end="1433:45">taddr</name></expr></argument>, <argument pos:start="1433:48" pos:end="1433:66"><expr pos:start="1433:48" pos:end="1433:66"><call pos:start="1433:48" pos:end="1433:66"><name pos:start="1433:48" pos:end="1433:57">tci_read_i</name><argument_list pos:start="1433:58" pos:end="1433:66">(<argument pos:start="1433:59" pos:end="1433:65"><expr pos:start="1433:59" pos:end="1433:65"><operator pos:start="1433:59" pos:end="1433:59">&amp;</operator><name pos:start="1433:60" pos:end="1433:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1435:1" pos:end="1435:5">#<cpp:directive pos:start="1435:2" pos:end="1435:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1437:13" pos:end="1437:48"><expr pos:start="1437:13" pos:end="1437:47"><name pos:start="1437:13" pos:end="1437:21">host_addr</name> <operator pos:start="1437:23" pos:end="1437:23">=</operator> <operator pos:start="1437:25" pos:end="1437:25">(</operator><name pos:start="1437:26" pos:end="1437:41">tcg_target_ulong</name><operator pos:start="1437:42" pos:end="1437:42">)</operator><name pos:start="1437:43" pos:end="1437:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1439:13" pos:end="1439:39"><expr pos:start="1439:13" pos:end="1439:38"><call pos:start="1439:13" pos:end="1439:38"><name pos:start="1439:13" pos:end="1439:18">assert</name><argument_list pos:start="1439:19" pos:end="1439:38">(<argument pos:start="1439:20" pos:end="1439:37"><expr pos:start="1439:20" pos:end="1439:37"><name pos:start="1439:20" pos:end="1439:24">taddr</name> <operator pos:start="1439:26" pos:end="1439:27">==</operator> <name pos:start="1439:29" pos:end="1439:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1441:13" pos:end="1444:0"><expr pos:start="1441:13" pos:end="1441:66"><name pos:start="1441:13" pos:end="1441:17">tmp32</name> <operator pos:start="1441:19" pos:end="1441:19">=</operator> <call pos:start="1441:21" pos:end="1441:66"><name pos:start="1441:21" pos:end="1441:27">tswap32</name><argument_list pos:start="1441:28" pos:end="1441:66">(<argument pos:start="1441:29" pos:end="1441:65"><expr pos:start="1441:29" pos:end="1441:65"><operator pos:start="1441:29" pos:end="1441:29">*</operator><operator pos:start="1441:30" pos:end="1441:30">(</operator><name pos:start="1441:31" pos:end="1441:38">uint32_t</name> <operator pos:start="1441:40" pos:end="1441:40">*</operator><operator pos:start="1441:41" pos:end="1441:41">)</operator><operator pos:start="1441:42" pos:end="1441:42">(</operator><name pos:start="1441:43" pos:end="1441:51">host_addr</name> <operator pos:start="1441:53" pos:end="1441:53">+</operator> <name pos:start="1441:55" pos:end="1441:64">GUEST_BASE</name><operator pos:start="1441:65" pos:end="1441:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1443:1" pos:end="1443:6">#<cpp:directive pos:start="1443:2" pos:end="1443:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1445:13" pos:end="1445:39"><expr pos:start="1445:13" pos:end="1445:38"><call pos:start="1445:13" pos:end="1445:38"><name pos:start="1445:13" pos:end="1445:27">tci_write_reg32</name><argument_list pos:start="1445:28" pos:end="1445:38">(<argument pos:start="1445:29" pos:end="1445:30"><expr pos:start="1445:29" pos:end="1445:30"><name pos:start="1445:29" pos:end="1445:30">t0</name></expr></argument>, <argument pos:start="1445:33" pos:end="1445:37"><expr pos:start="1445:33" pos:end="1445:37"><name pos:start="1445:33" pos:end="1445:37">tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1447:13" pos:end="1447:18">break;</break>

        <case pos:start="1449:9" pos:end="1449:32">case <expr pos:start="1449:14" pos:end="1449:31"><name pos:start="1449:14" pos:end="1449:31">INDEX_op_qemu_ld64</name></expr>:</case>

            <expr_stmt pos:start="1451:13" pos:end="1454:0"><expr pos:start="1451:13" pos:end="1451:26"><name pos:start="1451:13" pos:end="1451:14">t0</name> <operator pos:start="1451:16" pos:end="1451:16">=</operator> <operator pos:start="1451:18" pos:end="1451:18">*</operator><name pos:start="1451:19" pos:end="1451:24">tb_ptr</name><operator pos:start="1451:25" pos:end="1451:26">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="1453:1" pos:end="1453:29">#<cpp:directive pos:start="1453:2" pos:end="1453:3">if</cpp:directive> <expr pos:start="1453:5" pos:end="1453:29"><name pos:start="1453:5" pos:end="1453:23">TCG_TARGET_REG_BITS</name> <operator pos:start="1453:25" pos:end="1453:26">==</operator> <literal type="number" pos:start="1453:28" pos:end="1453:29">32</literal></expr></cpp:if>

            <expr_stmt pos:start="1455:13" pos:end="1458:0"><expr pos:start="1455:13" pos:end="1455:26"><name pos:start="1455:13" pos:end="1455:14">t1</name> <operator pos:start="1455:16" pos:end="1455:16">=</operator> <operator pos:start="1455:18" pos:end="1455:18">*</operator><name pos:start="1455:19" pos:end="1455:24">tb_ptr</name><operator pos:start="1455:25" pos:end="1455:26">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="1457:1" pos:end="1457:6">#<cpp:directive pos:start="1457:2" pos:end="1457:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1459:13" pos:end="1462:0"><expr pos:start="1459:13" pos:end="1459:43"><name pos:start="1459:13" pos:end="1459:17">taddr</name> <operator pos:start="1459:19" pos:end="1459:19">=</operator> <call pos:start="1459:21" pos:end="1459:43"><name pos:start="1459:21" pos:end="1459:34">tci_read_ulong</name><argument_list pos:start="1459:35" pos:end="1459:43">(<argument pos:start="1459:36" pos:end="1459:42"><expr pos:start="1459:36" pos:end="1459:42"><operator pos:start="1459:36" pos:end="1459:36">&amp;</operator><name pos:start="1459:37" pos:end="1459:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1461:1" pos:end="1461:21">#<cpp:directive pos:start="1461:2" pos:end="1461:6">ifdef</cpp:directive> <name pos:start="1461:8" pos:end="1461:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1463:13" pos:end="1466:0"><expr pos:start="1463:13" pos:end="1463:67"><name pos:start="1463:13" pos:end="1463:17">tmp64</name> <operator pos:start="1463:19" pos:end="1463:19">=</operator> <call pos:start="1463:21" pos:end="1463:67"><name pos:start="1463:21" pos:end="1463:34">helper_ldq_mmu</name><argument_list pos:start="1463:35" pos:end="1463:67">(<argument pos:start="1463:36" pos:end="1463:38"><expr pos:start="1463:36" pos:end="1463:38"><name pos:start="1463:36" pos:end="1463:38">env</name></expr></argument>, <argument pos:start="1463:41" pos:end="1463:45"><expr pos:start="1463:41" pos:end="1463:45"><name pos:start="1463:41" pos:end="1463:45">taddr</name></expr></argument>, <argument pos:start="1463:48" pos:end="1463:66"><expr pos:start="1463:48" pos:end="1463:66"><call pos:start="1463:48" pos:end="1463:66"><name pos:start="1463:48" pos:end="1463:57">tci_read_i</name><argument_list pos:start="1463:58" pos:end="1463:66">(<argument pos:start="1463:59" pos:end="1463:65"><expr pos:start="1463:59" pos:end="1463:65"><operator pos:start="1463:59" pos:end="1463:59">&amp;</operator><name pos:start="1463:60" pos:end="1463:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1465:1" pos:end="1465:5">#<cpp:directive pos:start="1465:2" pos:end="1465:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1467:13" pos:end="1467:48"><expr pos:start="1467:13" pos:end="1467:47"><name pos:start="1467:13" pos:end="1467:21">host_addr</name> <operator pos:start="1467:23" pos:end="1467:23">=</operator> <operator pos:start="1467:25" pos:end="1467:25">(</operator><name pos:start="1467:26" pos:end="1467:41">tcg_target_ulong</name><operator pos:start="1467:42" pos:end="1467:42">)</operator><name pos:start="1467:43" pos:end="1467:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1469:13" pos:end="1469:39"><expr pos:start="1469:13" pos:end="1469:38"><call pos:start="1469:13" pos:end="1469:38"><name pos:start="1469:13" pos:end="1469:18">assert</name><argument_list pos:start="1469:19" pos:end="1469:38">(<argument pos:start="1469:20" pos:end="1469:37"><expr pos:start="1469:20" pos:end="1469:37"><name pos:start="1469:20" pos:end="1469:24">taddr</name> <operator pos:start="1469:26" pos:end="1469:27">==</operator> <name pos:start="1469:29" pos:end="1469:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1471:13" pos:end="1474:0"><expr pos:start="1471:13" pos:end="1471:66"><name pos:start="1471:13" pos:end="1471:17">tmp64</name> <operator pos:start="1471:19" pos:end="1471:19">=</operator> <call pos:start="1471:21" pos:end="1471:66"><name pos:start="1471:21" pos:end="1471:27">tswap64</name><argument_list pos:start="1471:28" pos:end="1471:66">(<argument pos:start="1471:29" pos:end="1471:65"><expr pos:start="1471:29" pos:end="1471:65"><operator pos:start="1471:29" pos:end="1471:29">*</operator><operator pos:start="1471:30" pos:end="1471:30">(</operator><name pos:start="1471:31" pos:end="1471:38">uint64_t</name> <operator pos:start="1471:40" pos:end="1471:40">*</operator><operator pos:start="1471:41" pos:end="1471:41">)</operator><operator pos:start="1471:42" pos:end="1471:42">(</operator><name pos:start="1471:43" pos:end="1471:51">host_addr</name> <operator pos:start="1471:53" pos:end="1471:53">+</operator> <name pos:start="1471:55" pos:end="1471:64">GUEST_BASE</name><operator pos:start="1471:65" pos:end="1471:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1473:1" pos:end="1473:6">#<cpp:directive pos:start="1473:2" pos:end="1473:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1475:13" pos:end="1478:0"><expr pos:start="1475:13" pos:end="1475:36"><call pos:start="1475:13" pos:end="1475:36"><name pos:start="1475:13" pos:end="1475:25">tci_write_reg</name><argument_list pos:start="1475:26" pos:end="1475:36">(<argument pos:start="1475:27" pos:end="1475:28"><expr pos:start="1475:27" pos:end="1475:28"><name pos:start="1475:27" pos:end="1475:28">t0</name></expr></argument>, <argument pos:start="1475:31" pos:end="1475:35"><expr pos:start="1475:31" pos:end="1475:35"><name pos:start="1475:31" pos:end="1475:35">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="1477:1" pos:end="1477:29">#<cpp:directive pos:start="1477:2" pos:end="1477:3">if</cpp:directive> <expr pos:start="1477:5" pos:end="1477:29"><name pos:start="1477:5" pos:end="1477:23">TCG_TARGET_REG_BITS</name> <operator pos:start="1477:25" pos:end="1477:26">==</operator> <literal type="number" pos:start="1477:28" pos:end="1477:29">32</literal></expr></cpp:if>

            <expr_stmt pos:start="1479:13" pos:end="1482:0"><expr pos:start="1479:13" pos:end="1479:42"><call pos:start="1479:13" pos:end="1479:42"><name pos:start="1479:13" pos:end="1479:25">tci_write_reg</name><argument_list pos:start="1479:26" pos:end="1479:42">(<argument pos:start="1479:27" pos:end="1479:28"><expr pos:start="1479:27" pos:end="1479:28"><name pos:start="1479:27" pos:end="1479:28">t1</name></expr></argument>, <argument pos:start="1479:31" pos:end="1479:41"><expr pos:start="1479:31" pos:end="1479:41"><name pos:start="1479:31" pos:end="1479:35">tmp64</name> <operator pos:start="1479:37" pos:end="1479:38">&gt;&gt;</operator> <literal type="number" pos:start="1479:40" pos:end="1479:41">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1481:1" pos:end="1481:6">#<cpp:directive pos:start="1481:2" pos:end="1481:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1483:13" pos:end="1483:18">break;</break>

        <case pos:start="1485:9" pos:end="1485:31">case <expr pos:start="1485:14" pos:end="1485:30"><name pos:start="1485:14" pos:end="1485:30">INDEX_op_qemu_st8</name></expr>:</case>

            <expr_stmt pos:start="1487:13" pos:end="1487:38"><expr pos:start="1487:13" pos:end="1487:37"><name pos:start="1487:13" pos:end="1487:14">t0</name> <operator pos:start="1487:16" pos:end="1487:16">=</operator> <call pos:start="1487:18" pos:end="1487:37"><name pos:start="1487:18" pos:end="1487:28">tci_read_r8</name><argument_list pos:start="1487:29" pos:end="1487:37">(<argument pos:start="1487:30" pos:end="1487:36"><expr pos:start="1487:30" pos:end="1487:36"><operator pos:start="1487:30" pos:end="1487:30">&amp;</operator><name pos:start="1487:31" pos:end="1487:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1489:13" pos:end="1492:0"><expr pos:start="1489:13" pos:end="1489:43"><name pos:start="1489:13" pos:end="1489:17">taddr</name> <operator pos:start="1489:19" pos:end="1489:19">=</operator> <call pos:start="1489:21" pos:end="1489:43"><name pos:start="1489:21" pos:end="1489:34">tci_read_ulong</name><argument_list pos:start="1489:35" pos:end="1489:43">(<argument pos:start="1489:36" pos:end="1489:42"><expr pos:start="1489:36" pos:end="1489:42"><operator pos:start="1489:36" pos:end="1489:36">&amp;</operator><name pos:start="1489:37" pos:end="1489:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1491:1" pos:end="1491:21">#<cpp:directive pos:start="1491:2" pos:end="1491:6">ifdef</cpp:directive> <name pos:start="1491:8" pos:end="1491:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1493:13" pos:end="1493:37"><expr pos:start="1493:13" pos:end="1493:36"><name pos:start="1493:13" pos:end="1493:14">t2</name> <operator pos:start="1493:16" pos:end="1493:16">=</operator> <call pos:start="1493:18" pos:end="1493:36"><name pos:start="1493:18" pos:end="1493:27">tci_read_i</name><argument_list pos:start="1493:28" pos:end="1493:36">(<argument pos:start="1493:29" pos:end="1493:35"><expr pos:start="1493:29" pos:end="1493:35"><operator pos:start="1493:29" pos:end="1493:29">&amp;</operator><name pos:start="1493:30" pos:end="1493:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1495:13" pos:end="1498:0"><expr pos:start="1495:13" pos:end="1495:46"><call pos:start="1495:13" pos:end="1495:46"><name pos:start="1495:13" pos:end="1495:26">helper_stb_mmu</name><argument_list pos:start="1495:27" pos:end="1495:46">(<argument pos:start="1495:28" pos:end="1495:30"><expr pos:start="1495:28" pos:end="1495:30"><name pos:start="1495:28" pos:end="1495:30">env</name></expr></argument>, <argument pos:start="1495:33" pos:end="1495:37"><expr pos:start="1495:33" pos:end="1495:37"><name pos:start="1495:33" pos:end="1495:37">taddr</name></expr></argument>, <argument pos:start="1495:40" pos:end="1495:41"><expr pos:start="1495:40" pos:end="1495:41"><name pos:start="1495:40" pos:end="1495:41">t0</name></expr></argument>, <argument pos:start="1495:44" pos:end="1495:45"><expr pos:start="1495:44" pos:end="1495:45"><name pos:start="1495:44" pos:end="1495:45">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1497:1" pos:end="1497:5">#<cpp:directive pos:start="1497:2" pos:end="1497:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1499:13" pos:end="1499:48"><expr pos:start="1499:13" pos:end="1499:47"><name pos:start="1499:13" pos:end="1499:21">host_addr</name> <operator pos:start="1499:23" pos:end="1499:23">=</operator> <operator pos:start="1499:25" pos:end="1499:25">(</operator><name pos:start="1499:26" pos:end="1499:41">tcg_target_ulong</name><operator pos:start="1499:42" pos:end="1499:42">)</operator><name pos:start="1499:43" pos:end="1499:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1501:13" pos:end="1501:39"><expr pos:start="1501:13" pos:end="1501:38"><call pos:start="1501:13" pos:end="1501:38"><name pos:start="1501:13" pos:end="1501:18">assert</name><argument_list pos:start="1501:19" pos:end="1501:38">(<argument pos:start="1501:20" pos:end="1501:37"><expr pos:start="1501:20" pos:end="1501:37"><name pos:start="1501:20" pos:end="1501:24">taddr</name> <operator pos:start="1501:26" pos:end="1501:27">==</operator> <name pos:start="1501:29" pos:end="1501:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1503:13" pos:end="1506:0"><expr pos:start="1503:13" pos:end="1503:53"><operator pos:start="1503:13" pos:end="1503:13">*</operator><operator pos:start="1503:14" pos:end="1503:14">(</operator><name pos:start="1503:15" pos:end="1503:21">uint8_t</name> <operator pos:start="1503:23" pos:end="1503:23">*</operator><operator pos:start="1503:24" pos:end="1503:24">)</operator><operator pos:start="1503:25" pos:end="1503:25">(</operator><name pos:start="1503:26" pos:end="1503:34">host_addr</name> <operator pos:start="1503:36" pos:end="1503:36">+</operator> <name pos:start="1503:38" pos:end="1503:47">GUEST_BASE</name><operator pos:start="1503:48" pos:end="1503:48">)</operator> <operator pos:start="1503:50" pos:end="1503:50">=</operator> <name pos:start="1503:52" pos:end="1503:53">t0</name></expr>;</expr_stmt>

<cpp:endif pos:start="1505:1" pos:end="1505:6">#<cpp:directive pos:start="1505:2" pos:end="1505:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1507:13" pos:end="1507:18">break;</break>

        <case pos:start="1509:9" pos:end="1509:32">case <expr pos:start="1509:14" pos:end="1509:31"><name pos:start="1509:14" pos:end="1509:31">INDEX_op_qemu_st16</name></expr>:</case>

            <expr_stmt pos:start="1511:13" pos:end="1511:39"><expr pos:start="1511:13" pos:end="1511:38"><name pos:start="1511:13" pos:end="1511:14">t0</name> <operator pos:start="1511:16" pos:end="1511:16">=</operator> <call pos:start="1511:18" pos:end="1511:38"><name pos:start="1511:18" pos:end="1511:29">tci_read_r16</name><argument_list pos:start="1511:30" pos:end="1511:38">(<argument pos:start="1511:31" pos:end="1511:37"><expr pos:start="1511:31" pos:end="1511:37"><operator pos:start="1511:31" pos:end="1511:31">&amp;</operator><name pos:start="1511:32" pos:end="1511:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1513:13" pos:end="1516:0"><expr pos:start="1513:13" pos:end="1513:43"><name pos:start="1513:13" pos:end="1513:17">taddr</name> <operator pos:start="1513:19" pos:end="1513:19">=</operator> <call pos:start="1513:21" pos:end="1513:43"><name pos:start="1513:21" pos:end="1513:34">tci_read_ulong</name><argument_list pos:start="1513:35" pos:end="1513:43">(<argument pos:start="1513:36" pos:end="1513:42"><expr pos:start="1513:36" pos:end="1513:42"><operator pos:start="1513:36" pos:end="1513:36">&amp;</operator><name pos:start="1513:37" pos:end="1513:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1515:1" pos:end="1515:21">#<cpp:directive pos:start="1515:2" pos:end="1515:6">ifdef</cpp:directive> <name pos:start="1515:8" pos:end="1515:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1517:13" pos:end="1517:37"><expr pos:start="1517:13" pos:end="1517:36"><name pos:start="1517:13" pos:end="1517:14">t2</name> <operator pos:start="1517:16" pos:end="1517:16">=</operator> <call pos:start="1517:18" pos:end="1517:36"><name pos:start="1517:18" pos:end="1517:27">tci_read_i</name><argument_list pos:start="1517:28" pos:end="1517:36">(<argument pos:start="1517:29" pos:end="1517:35"><expr pos:start="1517:29" pos:end="1517:35"><operator pos:start="1517:29" pos:end="1517:29">&amp;</operator><name pos:start="1517:30" pos:end="1517:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1519:13" pos:end="1522:0"><expr pos:start="1519:13" pos:end="1519:46"><call pos:start="1519:13" pos:end="1519:46"><name pos:start="1519:13" pos:end="1519:26">helper_stw_mmu</name><argument_list pos:start="1519:27" pos:end="1519:46">(<argument pos:start="1519:28" pos:end="1519:30"><expr pos:start="1519:28" pos:end="1519:30"><name pos:start="1519:28" pos:end="1519:30">env</name></expr></argument>, <argument pos:start="1519:33" pos:end="1519:37"><expr pos:start="1519:33" pos:end="1519:37"><name pos:start="1519:33" pos:end="1519:37">taddr</name></expr></argument>, <argument pos:start="1519:40" pos:end="1519:41"><expr pos:start="1519:40" pos:end="1519:41"><name pos:start="1519:40" pos:end="1519:41">t0</name></expr></argument>, <argument pos:start="1519:44" pos:end="1519:45"><expr pos:start="1519:44" pos:end="1519:45"><name pos:start="1519:44" pos:end="1519:45">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1521:1" pos:end="1521:5">#<cpp:directive pos:start="1521:2" pos:end="1521:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1523:13" pos:end="1523:48"><expr pos:start="1523:13" pos:end="1523:47"><name pos:start="1523:13" pos:end="1523:21">host_addr</name> <operator pos:start="1523:23" pos:end="1523:23">=</operator> <operator pos:start="1523:25" pos:end="1523:25">(</operator><name pos:start="1523:26" pos:end="1523:41">tcg_target_ulong</name><operator pos:start="1523:42" pos:end="1523:42">)</operator><name pos:start="1523:43" pos:end="1523:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1525:13" pos:end="1525:39"><expr pos:start="1525:13" pos:end="1525:38"><call pos:start="1525:13" pos:end="1525:38"><name pos:start="1525:13" pos:end="1525:18">assert</name><argument_list pos:start="1525:19" pos:end="1525:38">(<argument pos:start="1525:20" pos:end="1525:37"><expr pos:start="1525:20" pos:end="1525:37"><name pos:start="1525:20" pos:end="1525:24">taddr</name> <operator pos:start="1525:26" pos:end="1525:27">==</operator> <name pos:start="1525:29" pos:end="1525:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1527:13" pos:end="1530:0"><expr pos:start="1527:13" pos:end="1527:63"><operator pos:start="1527:13" pos:end="1527:13">*</operator><operator pos:start="1527:14" pos:end="1527:14">(</operator><name pos:start="1527:15" pos:end="1527:22">uint16_t</name> <operator pos:start="1527:24" pos:end="1527:24">*</operator><operator pos:start="1527:25" pos:end="1527:25">)</operator><operator pos:start="1527:26" pos:end="1527:26">(</operator><name pos:start="1527:27" pos:end="1527:35">host_addr</name> <operator pos:start="1527:37" pos:end="1527:37">+</operator> <name pos:start="1527:39" pos:end="1527:48">GUEST_BASE</name><operator pos:start="1527:49" pos:end="1527:49">)</operator> <operator pos:start="1527:51" pos:end="1527:51">=</operator> <call pos:start="1527:53" pos:end="1527:63"><name pos:start="1527:53" pos:end="1527:59">tswap16</name><argument_list pos:start="1527:60" pos:end="1527:63">(<argument pos:start="1527:61" pos:end="1527:62"><expr pos:start="1527:61" pos:end="1527:62"><name pos:start="1527:61" pos:end="1527:62">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1529:1" pos:end="1529:6">#<cpp:directive pos:start="1529:2" pos:end="1529:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1531:13" pos:end="1531:18">break;</break>

        <case pos:start="1533:9" pos:end="1533:32">case <expr pos:start="1533:14" pos:end="1533:31"><name pos:start="1533:14" pos:end="1533:31">INDEX_op_qemu_st32</name></expr>:</case>

            <expr_stmt pos:start="1535:13" pos:end="1535:39"><expr pos:start="1535:13" pos:end="1535:38"><name pos:start="1535:13" pos:end="1535:14">t0</name> <operator pos:start="1535:16" pos:end="1535:16">=</operator> <call pos:start="1535:18" pos:end="1535:38"><name pos:start="1535:18" pos:end="1535:29">tci_read_r32</name><argument_list pos:start="1535:30" pos:end="1535:38">(<argument pos:start="1535:31" pos:end="1535:37"><expr pos:start="1535:31" pos:end="1535:37"><operator pos:start="1535:31" pos:end="1535:31">&amp;</operator><name pos:start="1535:32" pos:end="1535:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1537:13" pos:end="1540:0"><expr pos:start="1537:13" pos:end="1537:43"><name pos:start="1537:13" pos:end="1537:17">taddr</name> <operator pos:start="1537:19" pos:end="1537:19">=</operator> <call pos:start="1537:21" pos:end="1537:43"><name pos:start="1537:21" pos:end="1537:34">tci_read_ulong</name><argument_list pos:start="1537:35" pos:end="1537:43">(<argument pos:start="1537:36" pos:end="1537:42"><expr pos:start="1537:36" pos:end="1537:42"><operator pos:start="1537:36" pos:end="1537:36">&amp;</operator><name pos:start="1537:37" pos:end="1537:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1539:1" pos:end="1539:21">#<cpp:directive pos:start="1539:2" pos:end="1539:6">ifdef</cpp:directive> <name pos:start="1539:8" pos:end="1539:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1541:13" pos:end="1541:37"><expr pos:start="1541:13" pos:end="1541:36"><name pos:start="1541:13" pos:end="1541:14">t2</name> <operator pos:start="1541:16" pos:end="1541:16">=</operator> <call pos:start="1541:18" pos:end="1541:36"><name pos:start="1541:18" pos:end="1541:27">tci_read_i</name><argument_list pos:start="1541:28" pos:end="1541:36">(<argument pos:start="1541:29" pos:end="1541:35"><expr pos:start="1541:29" pos:end="1541:35"><operator pos:start="1541:29" pos:end="1541:29">&amp;</operator><name pos:start="1541:30" pos:end="1541:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1543:13" pos:end="1546:0"><expr pos:start="1543:13" pos:end="1543:46"><call pos:start="1543:13" pos:end="1543:46"><name pos:start="1543:13" pos:end="1543:26">helper_stl_mmu</name><argument_list pos:start="1543:27" pos:end="1543:46">(<argument pos:start="1543:28" pos:end="1543:30"><expr pos:start="1543:28" pos:end="1543:30"><name pos:start="1543:28" pos:end="1543:30">env</name></expr></argument>, <argument pos:start="1543:33" pos:end="1543:37"><expr pos:start="1543:33" pos:end="1543:37"><name pos:start="1543:33" pos:end="1543:37">taddr</name></expr></argument>, <argument pos:start="1543:40" pos:end="1543:41"><expr pos:start="1543:40" pos:end="1543:41"><name pos:start="1543:40" pos:end="1543:41">t0</name></expr></argument>, <argument pos:start="1543:44" pos:end="1543:45"><expr pos:start="1543:44" pos:end="1543:45"><name pos:start="1543:44" pos:end="1543:45">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1545:1" pos:end="1545:5">#<cpp:directive pos:start="1545:2" pos:end="1545:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1547:13" pos:end="1547:48"><expr pos:start="1547:13" pos:end="1547:47"><name pos:start="1547:13" pos:end="1547:21">host_addr</name> <operator pos:start="1547:23" pos:end="1547:23">=</operator> <operator pos:start="1547:25" pos:end="1547:25">(</operator><name pos:start="1547:26" pos:end="1547:41">tcg_target_ulong</name><operator pos:start="1547:42" pos:end="1547:42">)</operator><name pos:start="1547:43" pos:end="1547:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1549:13" pos:end="1549:39"><expr pos:start="1549:13" pos:end="1549:38"><call pos:start="1549:13" pos:end="1549:38"><name pos:start="1549:13" pos:end="1549:18">assert</name><argument_list pos:start="1549:19" pos:end="1549:38">(<argument pos:start="1549:20" pos:end="1549:37"><expr pos:start="1549:20" pos:end="1549:37"><name pos:start="1549:20" pos:end="1549:24">taddr</name> <operator pos:start="1549:26" pos:end="1549:27">==</operator> <name pos:start="1549:29" pos:end="1549:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1551:13" pos:end="1554:0"><expr pos:start="1551:13" pos:end="1551:63"><operator pos:start="1551:13" pos:end="1551:13">*</operator><operator pos:start="1551:14" pos:end="1551:14">(</operator><name pos:start="1551:15" pos:end="1551:22">uint32_t</name> <operator pos:start="1551:24" pos:end="1551:24">*</operator><operator pos:start="1551:25" pos:end="1551:25">)</operator><operator pos:start="1551:26" pos:end="1551:26">(</operator><name pos:start="1551:27" pos:end="1551:35">host_addr</name> <operator pos:start="1551:37" pos:end="1551:37">+</operator> <name pos:start="1551:39" pos:end="1551:48">GUEST_BASE</name><operator pos:start="1551:49" pos:end="1551:49">)</operator> <operator pos:start="1551:51" pos:end="1551:51">=</operator> <call pos:start="1551:53" pos:end="1551:63"><name pos:start="1551:53" pos:end="1551:59">tswap32</name><argument_list pos:start="1551:60" pos:end="1551:63">(<argument pos:start="1551:61" pos:end="1551:62"><expr pos:start="1551:61" pos:end="1551:62"><name pos:start="1551:61" pos:end="1551:62">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1553:1" pos:end="1553:6">#<cpp:directive pos:start="1553:2" pos:end="1553:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1555:13" pos:end="1555:18">break;</break>

        <case pos:start="1557:9" pos:end="1557:32">case <expr pos:start="1557:14" pos:end="1557:31"><name pos:start="1557:14" pos:end="1557:31">INDEX_op_qemu_st64</name></expr>:</case>

            <expr_stmt pos:start="1559:13" pos:end="1559:42"><expr pos:start="1559:13" pos:end="1559:41"><name pos:start="1559:13" pos:end="1559:17">tmp64</name> <operator pos:start="1559:19" pos:end="1559:19">=</operator> <call pos:start="1559:21" pos:end="1559:41"><name pos:start="1559:21" pos:end="1559:32">tci_read_r64</name><argument_list pos:start="1559:33" pos:end="1559:41">(<argument pos:start="1559:34" pos:end="1559:40"><expr pos:start="1559:34" pos:end="1559:40"><operator pos:start="1559:34" pos:end="1559:34">&amp;</operator><name pos:start="1559:35" pos:end="1559:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1561:13" pos:end="1564:0"><expr pos:start="1561:13" pos:end="1561:43"><name pos:start="1561:13" pos:end="1561:17">taddr</name> <operator pos:start="1561:19" pos:end="1561:19">=</operator> <call pos:start="1561:21" pos:end="1561:43"><name pos:start="1561:21" pos:end="1561:34">tci_read_ulong</name><argument_list pos:start="1561:35" pos:end="1561:43">(<argument pos:start="1561:36" pos:end="1561:42"><expr pos:start="1561:36" pos:end="1561:42"><operator pos:start="1561:36" pos:end="1561:36">&amp;</operator><name pos:start="1561:37" pos:end="1561:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1563:1" pos:end="1563:21">#<cpp:directive pos:start="1563:2" pos:end="1563:6">ifdef</cpp:directive> <name pos:start="1563:8" pos:end="1563:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1565:13" pos:end="1565:37"><expr pos:start="1565:13" pos:end="1565:36"><name pos:start="1565:13" pos:end="1565:14">t2</name> <operator pos:start="1565:16" pos:end="1565:16">=</operator> <call pos:start="1565:18" pos:end="1565:36"><name pos:start="1565:18" pos:end="1565:27">tci_read_i</name><argument_list pos:start="1565:28" pos:end="1565:36">(<argument pos:start="1565:29" pos:end="1565:35"><expr pos:start="1565:29" pos:end="1565:35"><operator pos:start="1565:29" pos:end="1565:29">&amp;</operator><name pos:start="1565:30" pos:end="1565:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1567:13" pos:end="1570:0"><expr pos:start="1567:13" pos:end="1567:49"><call pos:start="1567:13" pos:end="1567:49"><name pos:start="1567:13" pos:end="1567:26">helper_stq_mmu</name><argument_list pos:start="1567:27" pos:end="1567:49">(<argument pos:start="1567:28" pos:end="1567:30"><expr pos:start="1567:28" pos:end="1567:30"><name pos:start="1567:28" pos:end="1567:30">env</name></expr></argument>, <argument pos:start="1567:33" pos:end="1567:37"><expr pos:start="1567:33" pos:end="1567:37"><name pos:start="1567:33" pos:end="1567:37">taddr</name></expr></argument>, <argument pos:start="1567:40" pos:end="1567:44"><expr pos:start="1567:40" pos:end="1567:44"><name pos:start="1567:40" pos:end="1567:44">tmp64</name></expr></argument>, <argument pos:start="1567:47" pos:end="1567:48"><expr pos:start="1567:47" pos:end="1567:48"><name pos:start="1567:47" pos:end="1567:48">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1569:1" pos:end="1569:5">#<cpp:directive pos:start="1569:2" pos:end="1569:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1571:13" pos:end="1571:48"><expr pos:start="1571:13" pos:end="1571:47"><name pos:start="1571:13" pos:end="1571:21">host_addr</name> <operator pos:start="1571:23" pos:end="1571:23">=</operator> <operator pos:start="1571:25" pos:end="1571:25">(</operator><name pos:start="1571:26" pos:end="1571:41">tcg_target_ulong</name><operator pos:start="1571:42" pos:end="1571:42">)</operator><name pos:start="1571:43" pos:end="1571:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1573:13" pos:end="1573:39"><expr pos:start="1573:13" pos:end="1573:38"><call pos:start="1573:13" pos:end="1573:38"><name pos:start="1573:13" pos:end="1573:18">assert</name><argument_list pos:start="1573:19" pos:end="1573:38">(<argument pos:start="1573:20" pos:end="1573:37"><expr pos:start="1573:20" pos:end="1573:37"><name pos:start="1573:20" pos:end="1573:24">taddr</name> <operator pos:start="1573:26" pos:end="1573:27">==</operator> <name pos:start="1573:29" pos:end="1573:37">host_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1575:13" pos:end="1578:0"><expr pos:start="1575:13" pos:end="1575:66"><operator pos:start="1575:13" pos:end="1575:13">*</operator><operator pos:start="1575:14" pos:end="1575:14">(</operator><name pos:start="1575:15" pos:end="1575:22">uint64_t</name> <operator pos:start="1575:24" pos:end="1575:24">*</operator><operator pos:start="1575:25" pos:end="1575:25">)</operator><operator pos:start="1575:26" pos:end="1575:26">(</operator><name pos:start="1575:27" pos:end="1575:35">host_addr</name> <operator pos:start="1575:37" pos:end="1575:37">+</operator> <name pos:start="1575:39" pos:end="1575:48">GUEST_BASE</name><operator pos:start="1575:49" pos:end="1575:49">)</operator> <operator pos:start="1575:51" pos:end="1575:51">=</operator> <call pos:start="1575:53" pos:end="1575:66"><name pos:start="1575:53" pos:end="1575:59">tswap64</name><argument_list pos:start="1575:60" pos:end="1575:66">(<argument pos:start="1575:61" pos:end="1575:65"><expr pos:start="1575:61" pos:end="1575:65"><name pos:start="1575:61" pos:end="1575:65">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1577:1" pos:end="1577:6">#<cpp:directive pos:start="1577:2" pos:end="1577:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1579:13" pos:end="1579:18">break;</break>

        <default pos:start="1581:9" pos:end="1581:16">default:</default>

            <expr_stmt pos:start="1583:13" pos:end="1583:19"><expr pos:start="1583:13" pos:end="1583:18"><call pos:start="1583:13" pos:end="1583:18"><name pos:start="1583:13" pos:end="1583:16">TODO</name><argument_list pos:start="1583:17" pos:end="1583:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1585:13" pos:end="1585:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="1589:9" pos:end="1589:49"><expr pos:start="1589:9" pos:end="1589:48"><call pos:start="1589:9" pos:end="1589:48"><name pos:start="1589:9" pos:end="1589:14">assert</name><argument_list pos:start="1589:15" pos:end="1589:48">(<argument pos:start="1589:16" pos:end="1589:47"><expr pos:start="1589:16" pos:end="1589:47"><name pos:start="1589:16" pos:end="1589:21">tb_ptr</name> <operator pos:start="1589:23" pos:end="1589:24">==</operator> <name pos:start="1589:26" pos:end="1589:37">old_code_ptr</name> <operator pos:start="1589:39" pos:end="1589:39">+</operator> <name pos:start="1589:41" pos:end="1589:47">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

<label pos:start="1593:1" pos:end="1593:5"><name pos:start="1593:1" pos:end="1593:4">exit</name>:</label>

    <return pos:start="1595:5" pos:end="1595:19">return <expr pos:start="1595:12" pos:end="1595:18"><name pos:start="1595:12" pos:end="1595:18">next_tb</name></expr>;</return>

</block_content>}</block></function>
</unit>
