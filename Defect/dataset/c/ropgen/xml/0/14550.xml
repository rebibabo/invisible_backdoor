<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14550.c" pos:tabs="8"><function pos:start="1:1" pos:end="381:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">tcg_out_qemu_ld</name><parameter_list pos:start="1:28" pos:end="3:36">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:38">TCGContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:61"><decl pos:start="1:44" pos:end="1:61"><type pos:start="1:44" pos:end="1:61"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:55">TCGArg</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">args</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:35"><decl pos:start="3:29" pos:end="3:35"><type pos:start="3:29" pos:end="3:35"><name pos:start="3:29" pos:end="3:31">int</name></type> <name pos:start="3:33" pos:end="3:35">opc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="381:1">{<block_content pos:start="7:5" pos:end="380:0">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">addr_regl</name></decl>, <decl pos:start="7:20" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:28">addr_reg1</name></decl>, <decl pos:start="7:31" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:31" pos:end="7:39">addr_meml</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:51"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">data_regl</name></decl>, <decl pos:start="9:20" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:28">data_regh</name></decl>, <decl pos:start="9:31" pos:end="9:39"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:31" pos:end="9:39">data_reg1</name></decl>, <decl pos:start="9:42" pos:end="9:50"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:42" pos:end="9:50">data_reg2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">mem_index</name></decl>, <decl pos:start="11:20" pos:end="11:25"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:25">s_bits</name></decl>;</decl_stmt>

<cpp:if pos:start="13:1" pos:end="13:27">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:27"><call pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:11">defined</name><argument_list pos:start="13:12" pos:end="13:27">(<argument pos:start="13:13" pos:end="13:26"><expr pos:start="13:13" pos:end="13:26"><name pos:start="13:13" pos:end="13:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:20">label1_ptr</name></decl>, <decl pos:start="15:23" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:10"><modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:33">label2_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="24:0"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">sp_args</name></decl>;</decl_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="21:1" pos:end="21:26">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:20">TARGET_LONG_BITS</name> <operator pos:start="21:22" pos:end="21:23">==</operator> <literal type="number" pos:start="21:25" pos:end="21:26">64</literal></expr></cpp:if>

<cpp:if pos:start="23:1" pos:end="23:28"># <cpp:directive pos:start="23:3" pos:end="23:4">if</cpp:directive> <expr pos:start="23:6" pos:end="23:28"><call pos:start="23:6" pos:end="23:28"><name pos:start="23:6" pos:end="23:12">defined</name><argument_list pos:start="23:13" pos:end="23:28">(<argument pos:start="23:14" pos:end="23:27"><expr pos:start="23:14" pos:end="23:27"><name pos:start="23:14" pos:end="23:27">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="25:5" pos:end="28:0"><decl pos:start="25:5" pos:end="25:23"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:11">uint8_t</name> <modifier pos:start="25:13" pos:end="25:13">*</modifier></type><name pos:start="25:14" pos:end="25:23">label3_ptr</name></decl>;</decl_stmt>

<cpp:endif pos:start="27:1" pos:end="27:7"># <cpp:directive pos:start="27:3" pos:end="27:7">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="29:5" pos:end="32:0"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:17">addr_regh</name></decl>, <decl pos:start="29:20" pos:end="29:28"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:20" pos:end="29:28">addr_reg2</name></decl>, <decl pos:start="29:31" pos:end="29:39"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:31" pos:end="29:39">addr_memh</name></decl>;</decl_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="33:5" pos:end="33:24"><expr pos:start="33:5" pos:end="33:23"><name pos:start="33:5" pos:end="33:13">data_regl</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <operator pos:start="33:17" pos:end="33:17">*</operator><name pos:start="33:18" pos:end="33:21">args</name><operator pos:start="33:22" pos:end="33:23">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:22"><if pos:start="35:5" pos:end="37:28">if <condition pos:start="35:8" pos:end="35:17">(<expr pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:11">opc</name> <operator pos:start="35:13" pos:end="35:14">==</operator> <literal type="number" pos:start="35:16" pos:end="35:16">3</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:28"><block_content pos:start="37:9" pos:end="37:28">

        <expr_stmt pos:start="37:9" pos:end="37:28"><expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:17">data_regh</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <operator pos:start="37:21" pos:end="37:21">*</operator><name pos:start="37:22" pos:end="37:25">args</name><operator pos:start="37:26" pos:end="37:27">++</operator></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="39:5" pos:end="41:22">else<block type="pseudo" pos:start="41:9" pos:end="41:22"><block_content pos:start="41:9" pos:end="41:22">

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:17">data_regh</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="number" pos:start="41:21" pos:end="41:21">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="46:0"><expr pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:13">addr_regl</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <operator pos:start="43:17" pos:end="43:17">*</operator><name pos:start="43:18" pos:end="43:21">args</name><operator pos:start="43:22" pos:end="43:23">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="45:1" pos:end="45:26">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:26"><name pos:start="45:5" pos:end="45:20">TARGET_LONG_BITS</name> <operator pos:start="45:22" pos:end="45:23">==</operator> <literal type="number" pos:start="45:25" pos:end="45:26">64</literal></expr></cpp:if>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:13">addr_regh</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <operator pos:start="47:17" pos:end="47:17">*</operator><name pos:start="47:18" pos:end="47:21">args</name><operator pos:start="47:22" pos:end="47:23">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="51:5" pos:end="51:22"><expr pos:start="51:5" pos:end="51:21"><name pos:start="51:5" pos:end="51:13">mem_index</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <operator pos:start="51:17" pos:end="51:17">*</operator><name pos:start="51:18" pos:end="51:21">args</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:21"><expr pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:10">s_bits</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <name pos:start="53:14" pos:end="53:16">opc</name> <operator pos:start="53:18" pos:end="53:18">&amp;</operator> <literal type="number" pos:start="53:20" pos:end="53:20">3</literal></expr>;</expr_stmt>



    <if_stmt pos:start="57:5" pos:end="84:0"><if pos:start="57:5" pos:end="73:5">if <condition pos:start="57:8" pos:end="57:17">(<expr pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:11">opc</name> <operator pos:start="57:13" pos:end="57:14">==</operator> <literal type="number" pos:start="57:16" pos:end="57:16">3</literal></expr>)</condition> <block pos:start="57:19" pos:end="73:5">{<block_content pos:start="61:9" pos:end="72:0">

<cpp:if pos:start="59:1" pos:end="59:39">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:39"><call pos:start="59:5" pos:end="59:39"><name pos:start="59:5" pos:end="59:11">defined</name><argument_list pos:start="59:12" pos:end="59:39">(<argument pos:start="59:13" pos:end="59:38"><expr pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:38">TCG_TARGET_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="61:9" pos:end="61:30"><expr pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:17">data_reg1</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:29">data_regh</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="66:0"><expr pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:17">data_reg2</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:29">data_regl</name></expr>;</expr_stmt>

<cpp:else pos:start="65:1" pos:end="65:5">#<cpp:directive pos:start="65:2" pos:end="65:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="67:9" pos:end="67:30"><expr pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:17">data_reg1</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:29">data_regl</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="72:0"><expr pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:17">data_reg2</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <name pos:start="69:21" pos:end="69:29">data_regh</name></expr>;</expr_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="84:0">else <block pos:start="73:12" pos:end="84:0">{<block_content pos:start="75:9" pos:end="77:22">

        <expr_stmt pos:start="75:9" pos:end="75:30"><expr pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:17">data_reg1</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <name pos:start="75:21" pos:end="75:29">data_regl</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:22"><expr pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:17">data_reg2</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <literal type="number" pos:start="77:21" pos:end="77:21">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:if pos:start="81:1" pos:end="81:26">#<cpp:directive pos:start="81:2" pos:end="81:3">if</cpp:directive> <expr pos:start="81:5" pos:end="81:26"><name pos:start="81:5" pos:end="81:20">TARGET_LONG_BITS</name> <operator pos:start="81:22" pos:end="81:23">==</operator> <literal type="number" pos:start="81:25" pos:end="81:26">64</literal></expr></cpp:if>

<cpp:if pos:start="83:1" pos:end="83:40"># <cpp:directive pos:start="83:3" pos:end="83:4">if</cpp:directive> <expr pos:start="83:6" pos:end="83:40"><call pos:start="83:6" pos:end="83:40"><name pos:start="83:6" pos:end="83:12">defined</name><argument_list pos:start="83:13" pos:end="83:40">(<argument pos:start="83:14" pos:end="83:39"><expr pos:start="83:14" pos:end="83:39"><name pos:start="83:14" pos:end="83:39">TCG_TARGET_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:13">addr_reg1</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <name pos:start="85:17" pos:end="85:25">addr_regh</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:26"><expr pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:13">addr_reg2</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <name pos:start="87:17" pos:end="87:25">addr_regl</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:18"><expr pos:start="89:5" pos:end="89:17"><name pos:start="89:5" pos:end="89:13">addr_memh</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <literal type="number" pos:start="89:17" pos:end="89:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="94:0"><expr pos:start="91:5" pos:end="91:17"><name pos:start="91:5" pos:end="91:13">addr_meml</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <literal type="number" pos:start="91:17" pos:end="91:17">4</literal></expr>;</expr_stmt>

<cpp:else pos:start="93:1" pos:end="93:6"># <cpp:directive pos:start="93:3" pos:end="93:6">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="95:5" pos:end="95:26"><expr pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:13">addr_reg1</name> <operator pos:start="95:15" pos:end="95:15">=</operator> <name pos:start="95:17" pos:end="95:25">addr_regl</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:26"><expr pos:start="97:5" pos:end="97:25"><name pos:start="97:5" pos:end="97:13">addr_reg2</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <name pos:start="97:17" pos:end="97:25">addr_regh</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:18"><expr pos:start="99:5" pos:end="99:17"><name pos:start="99:5" pos:end="99:13">addr_memh</name> <operator pos:start="99:15" pos:end="99:15">=</operator> <literal type="number" pos:start="99:17" pos:end="99:17">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="106:0"><expr pos:start="101:5" pos:end="101:17"><name pos:start="101:5" pos:end="101:13">addr_meml</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <literal type="number" pos:start="101:17" pos:end="101:17">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="103:1" pos:end="103:7"># <cpp:directive pos:start="103:3" pos:end="103:7">endif</cpp:directive></cpp:endif>

<cpp:else pos:start="105:1" pos:end="105:5">#<cpp:directive pos:start="105:2" pos:end="105:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="107:5" pos:end="107:26"><expr pos:start="107:5" pos:end="107:25"><name pos:start="107:5" pos:end="107:13">addr_reg1</name> <operator pos:start="107:15" pos:end="107:15">=</operator> <name pos:start="107:17" pos:end="107:25">addr_regl</name></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="116:0"><expr pos:start="109:5" pos:end="109:17"><name pos:start="109:5" pos:end="109:13">addr_meml</name> <operator pos:start="109:15" pos:end="109:15">=</operator> <literal type="number" pos:start="109:17" pos:end="109:17">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="111:1" pos:end="111:6">#<cpp:directive pos:start="111:2" pos:end="111:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="115:1" pos:end="115:27">#<cpp:directive pos:start="115:2" pos:end="115:3">if</cpp:directive> <expr pos:start="115:5" pos:end="115:27"><call pos:start="115:5" pos:end="115:27"><name pos:start="115:5" pos:end="115:11">defined</name><argument_list pos:start="115:12" pos:end="115:27">(<argument pos:start="115:13" pos:end="115:26"><expr pos:start="115:13" pos:end="115:26"><name pos:start="115:13" pos:end="115:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="117:5" pos:end="117:93"><expr pos:start="117:5" pos:end="117:92"><call pos:start="117:5" pos:end="117:92"><name pos:start="117:5" pos:end="117:18">tcg_out_opc_sa</name><argument_list pos:start="117:19" pos:end="117:92">(<argument pos:start="117:20" pos:end="117:20"><expr pos:start="117:20" pos:end="117:20"><name pos:start="117:20" pos:end="117:20">s</name></expr></argument>, <argument pos:start="117:23" pos:end="117:29"><expr pos:start="117:23" pos:end="117:29"><name pos:start="117:23" pos:end="117:29">OPC_SRL</name></expr></argument>, <argument pos:start="117:32" pos:end="117:41"><expr pos:start="117:32" pos:end="117:41"><name pos:start="117:32" pos:end="117:41">TCG_REG_A0</name></expr></argument>, <argument pos:start="117:44" pos:end="117:52"><expr pos:start="117:44" pos:end="117:52"><name pos:start="117:44" pos:end="117:52">addr_regl</name></expr></argument>, <argument pos:start="117:55" pos:end="117:91"><expr pos:start="117:55" pos:end="117:91"><name pos:start="117:55" pos:end="117:70">TARGET_PAGE_BITS</name> <operator pos:start="117:72" pos:end="117:72">-</operator> <name pos:start="117:74" pos:end="117:91">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:99"><expr pos:start="119:5" pos:end="119:98"><call pos:start="119:5" pos:end="119:98"><name pos:start="119:5" pos:end="119:19">tcg_out_opc_imm</name><argument_list pos:start="119:20" pos:end="119:98">(<argument pos:start="119:21" pos:end="119:21"><expr pos:start="119:21" pos:end="119:21"><name pos:start="119:21" pos:end="119:21">s</name></expr></argument>, <argument pos:start="119:24" pos:end="119:31"><expr pos:start="119:24" pos:end="119:31"><name pos:start="119:24" pos:end="119:31">OPC_ANDI</name></expr></argument>, <argument pos:start="119:34" pos:end="119:43"><expr pos:start="119:34" pos:end="119:43"><name pos:start="119:34" pos:end="119:43">TCG_REG_A0</name></expr></argument>, <argument pos:start="119:46" pos:end="119:55"><expr pos:start="119:46" pos:end="119:55"><name pos:start="119:46" pos:end="119:55">TCG_REG_A0</name></expr></argument>, <argument pos:start="119:58" pos:end="119:97"><expr pos:start="119:58" pos:end="119:97"><operator pos:start="119:58" pos:end="119:58">(</operator><name pos:start="119:59" pos:end="119:70">CPU_TLB_SIZE</name> <operator pos:start="119:72" pos:end="119:72">-</operator> <literal type="number" pos:start="119:74" pos:end="119:74">1</literal><operator pos:start="119:75" pos:end="119:75">)</operator> <operator pos:start="119:77" pos:end="119:78">&lt;&lt;</operator> <name pos:start="119:80" pos:end="119:97">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:68"><expr pos:start="121:5" pos:end="121:67"><call pos:start="121:5" pos:end="121:67"><name pos:start="121:5" pos:end="121:19">tcg_out_opc_reg</name><argument_list pos:start="121:20" pos:end="121:67">(<argument pos:start="121:21" pos:end="121:21"><expr pos:start="121:21" pos:end="121:21"><name pos:start="121:21" pos:end="121:21">s</name></expr></argument>, <argument pos:start="121:24" pos:end="121:31"><expr pos:start="121:24" pos:end="121:31"><name pos:start="121:24" pos:end="121:31">OPC_ADDU</name></expr></argument>, <argument pos:start="121:34" pos:end="121:43"><expr pos:start="121:34" pos:end="121:43"><name pos:start="121:34" pos:end="121:43">TCG_REG_A0</name></expr></argument>, <argument pos:start="121:46" pos:end="121:55"><expr pos:start="121:46" pos:end="121:55"><name pos:start="121:46" pos:end="121:55">TCG_REG_A0</name></expr></argument>, <argument pos:start="121:58" pos:end="121:66"><expr pos:start="121:58" pos:end="121:66"><name pos:start="121:58" pos:end="121:66">TCG_AREG0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="125:87"><expr pos:start="123:5" pos:end="125:86"><call pos:start="123:5" pos:end="125:86"><name pos:start="123:5" pos:end="123:19">tcg_out_opc_imm</name><argument_list pos:start="123:20" pos:end="125:86">(<argument pos:start="123:21" pos:end="123:21"><expr pos:start="123:21" pos:end="123:21"><name pos:start="123:21" pos:end="123:21">s</name></expr></argument>, <argument pos:start="123:24" pos:end="123:29"><expr pos:start="123:24" pos:end="123:29"><name pos:start="123:24" pos:end="123:29">OPC_LW</name></expr></argument>, <argument pos:start="123:32" pos:end="123:41"><expr pos:start="123:32" pos:end="123:41"><name pos:start="123:32" pos:end="123:41">TCG_REG_AT</name></expr></argument>, <argument pos:start="123:44" pos:end="123:53"><expr pos:start="123:44" pos:end="123:53"><name pos:start="123:44" pos:end="123:53">TCG_REG_A0</name></expr></argument>,

                    <argument pos:start="125:21" pos:end="125:85"><expr pos:start="125:21" pos:end="125:85"><call pos:start="125:21" pos:end="125:73"><name pos:start="125:21" pos:end="125:28">offsetof</name><argument_list pos:start="125:29" pos:end="125:73">(<argument pos:start="125:30" pos:end="125:37"><expr pos:start="125:30" pos:end="125:37"><name pos:start="125:30" pos:end="125:37">CPUState</name></expr></argument>, <argument pos:start="125:40" pos:end="125:72"><expr pos:start="125:40" pos:end="125:72"><name pos:start="125:40" pos:end="125:62"><name pos:start="125:40" pos:end="125:48">tlb_table</name><index pos:start="125:49" pos:end="125:59">[<expr pos:start="125:50" pos:end="125:58"><name pos:start="125:50" pos:end="125:58">mem_index</name></expr>]</index><index pos:start="125:60" pos:end="125:62">[<expr pos:start="125:61" pos:end="125:61"><literal type="number" pos:start="125:61" pos:end="125:61">0</literal></expr>]</index></name><operator pos:start="125:63" pos:end="125:63">.</operator><name pos:start="125:64" pos:end="125:72">addr_read</name></expr></argument>)</argument_list></call> <operator pos:start="125:75" pos:end="125:75">+</operator> <name pos:start="125:77" pos:end="125:85">addr_meml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:86"><expr pos:start="127:5" pos:end="127:85"><call pos:start="127:5" pos:end="127:85"><name pos:start="127:5" pos:end="127:16">tcg_out_movi</name><argument_list pos:start="127:17" pos:end="127:85">(<argument pos:start="127:18" pos:end="127:18"><expr pos:start="127:18" pos:end="127:18"><name pos:start="127:18" pos:end="127:18">s</name></expr></argument>, <argument pos:start="127:21" pos:end="127:32"><expr pos:start="127:21" pos:end="127:32"><name pos:start="127:21" pos:end="127:32">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="127:35" pos:end="127:44"><expr pos:start="127:35" pos:end="127:44"><name pos:start="127:35" pos:end="127:44">TCG_REG_T0</name></expr></argument>, <argument pos:start="127:47" pos:end="127:84"><expr pos:start="127:47" pos:end="127:84"><name pos:start="127:47" pos:end="127:62">TARGET_PAGE_MASK</name> <operator pos:start="127:64" pos:end="127:64">|</operator> <operator pos:start="127:66" pos:end="127:66">(</operator><operator pos:start="127:67" pos:end="127:67">(</operator><literal type="number" pos:start="127:68" pos:end="127:68">1</literal> <operator pos:start="127:70" pos:end="127:71">&lt;&lt;</operator> <name pos:start="127:73" pos:end="127:78">s_bits</name><operator pos:start="127:79" pos:end="127:79">)</operator> <operator pos:start="127:81" pos:end="127:81">-</operator> <literal type="number" pos:start="127:83" pos:end="127:83">1</literal><operator pos:start="127:84" pos:end="127:84">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="134:0"><expr pos:start="129:5" pos:end="129:66"><call pos:start="129:5" pos:end="129:66"><name pos:start="129:5" pos:end="129:19">tcg_out_opc_reg</name><argument_list pos:start="129:20" pos:end="129:66">(<argument pos:start="129:21" pos:end="129:21"><expr pos:start="129:21" pos:end="129:21"><name pos:start="129:21" pos:end="129:21">s</name></expr></argument>, <argument pos:start="129:24" pos:end="129:30"><expr pos:start="129:24" pos:end="129:30"><name pos:start="129:24" pos:end="129:30">OPC_AND</name></expr></argument>, <argument pos:start="129:33" pos:end="129:42"><expr pos:start="129:33" pos:end="129:42"><name pos:start="129:33" pos:end="129:42">TCG_REG_T0</name></expr></argument>, <argument pos:start="129:45" pos:end="129:54"><expr pos:start="129:45" pos:end="129:54"><name pos:start="129:45" pos:end="129:54">TCG_REG_T0</name></expr></argument>, <argument pos:start="129:57" pos:end="129:65"><expr pos:start="129:57" pos:end="129:65"><name pos:start="129:57" pos:end="129:65">addr_regl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="133:1" pos:end="133:27"># <cpp:directive pos:start="133:3" pos:end="133:4">if</cpp:directive> <expr pos:start="133:6" pos:end="133:27"><name pos:start="133:6" pos:end="133:21">TARGET_LONG_BITS</name> <operator pos:start="133:23" pos:end="133:24">==</operator> <literal type="number" pos:start="133:26" pos:end="133:27">64</literal></expr></cpp:if>

    <expr_stmt pos:start="135:5" pos:end="135:29"><expr pos:start="135:5" pos:end="135:28"><name pos:start="135:5" pos:end="135:14">label3_ptr</name> <operator pos:start="135:16" pos:end="135:16">=</operator> <name pos:start="135:18" pos:end="135:28"><name pos:start="135:18" pos:end="135:18">s</name><operator pos:start="135:19" pos:end="135:20">-&gt;</operator><name pos:start="135:21" pos:end="135:28">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:55"><expr pos:start="137:5" pos:end="137:54"><call pos:start="137:5" pos:end="137:54"><name pos:start="137:5" pos:end="137:18">tcg_out_opc_br</name><argument_list pos:start="137:19" pos:end="137:54">(<argument pos:start="137:20" pos:end="137:20"><expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">s</name></expr></argument>, <argument pos:start="137:23" pos:end="137:29"><expr pos:start="137:23" pos:end="137:29"><name pos:start="137:23" pos:end="137:29">OPC_BNE</name></expr></argument>, <argument pos:start="137:32" pos:end="137:41"><expr pos:start="137:32" pos:end="137:41"><name pos:start="137:32" pos:end="137:41">TCG_REG_T0</name></expr></argument>, <argument pos:start="137:44" pos:end="137:53"><expr pos:start="137:44" pos:end="137:53"><name pos:start="137:44" pos:end="137:53">TCG_REG_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:19"><expr pos:start="139:5" pos:end="139:18"><call pos:start="139:5" pos:end="139:18"><name pos:start="139:5" pos:end="139:15">tcg_out_nop</name><argument_list pos:start="139:16" pos:end="139:18">(<argument pos:start="139:17" pos:end="139:17"><expr pos:start="139:17" pos:end="139:17"><name pos:start="139:17" pos:end="139:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="143:5" pos:end="145:87"><expr pos:start="143:5" pos:end="145:86"><call pos:start="143:5" pos:end="145:86"><name pos:start="143:5" pos:end="143:19">tcg_out_opc_imm</name><argument_list pos:start="143:20" pos:end="145:86">(<argument pos:start="143:21" pos:end="143:21"><expr pos:start="143:21" pos:end="143:21"><name pos:start="143:21" pos:end="143:21">s</name></expr></argument>, <argument pos:start="143:24" pos:end="143:29"><expr pos:start="143:24" pos:end="143:29"><name pos:start="143:24" pos:end="143:29">OPC_LW</name></expr></argument>, <argument pos:start="143:32" pos:end="143:41"><expr pos:start="143:32" pos:end="143:41"><name pos:start="143:32" pos:end="143:41">TCG_REG_AT</name></expr></argument>, <argument pos:start="143:44" pos:end="143:53"><expr pos:start="143:44" pos:end="143:53"><name pos:start="143:44" pos:end="143:53">TCG_REG_A0</name></expr></argument>,

                    <argument pos:start="145:21" pos:end="145:85"><expr pos:start="145:21" pos:end="145:85"><call pos:start="145:21" pos:end="145:73"><name pos:start="145:21" pos:end="145:28">offsetof</name><argument_list pos:start="145:29" pos:end="145:73">(<argument pos:start="145:30" pos:end="145:37"><expr pos:start="145:30" pos:end="145:37"><name pos:start="145:30" pos:end="145:37">CPUState</name></expr></argument>, <argument pos:start="145:40" pos:end="145:72"><expr pos:start="145:40" pos:end="145:72"><name pos:start="145:40" pos:end="145:62"><name pos:start="145:40" pos:end="145:48">tlb_table</name><index pos:start="145:49" pos:end="145:59">[<expr pos:start="145:50" pos:end="145:58"><name pos:start="145:50" pos:end="145:58">mem_index</name></expr>]</index><index pos:start="145:60" pos:end="145:62">[<expr pos:start="145:61" pos:end="145:61"><literal type="number" pos:start="145:61" pos:end="145:61">0</literal></expr>]</index></name><operator pos:start="145:63" pos:end="145:63">.</operator><name pos:start="145:64" pos:end="145:72">addr_read</name></expr></argument>)</argument_list></call> <operator pos:start="145:75" pos:end="145:75">+</operator> <name pos:start="145:77" pos:end="145:85">addr_memh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:29"><expr pos:start="149:5" pos:end="149:28"><name pos:start="149:5" pos:end="149:14">label1_ptr</name> <operator pos:start="149:16" pos:end="149:16">=</operator> <name pos:start="149:18" pos:end="149:28"><name pos:start="149:18" pos:end="149:18">s</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:28">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:54"><expr pos:start="151:5" pos:end="151:53"><call pos:start="151:5" pos:end="151:53"><name pos:start="151:5" pos:end="151:18">tcg_out_opc_br</name><argument_list pos:start="151:19" pos:end="151:53">(<argument pos:start="151:20" pos:end="151:20"><expr pos:start="151:20" pos:end="151:20"><name pos:start="151:20" pos:end="151:20">s</name></expr></argument>, <argument pos:start="151:23" pos:end="151:29"><expr pos:start="151:23" pos:end="151:29"><name pos:start="151:23" pos:end="151:29">OPC_BEQ</name></expr></argument>, <argument pos:start="151:32" pos:end="151:40"><expr pos:start="151:32" pos:end="151:40"><name pos:start="151:32" pos:end="151:40">addr_regh</name></expr></argument>, <argument pos:start="151:43" pos:end="151:52"><expr pos:start="151:43" pos:end="151:52"><name pos:start="151:43" pos:end="151:52">TCG_REG_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:19"><expr pos:start="153:5" pos:end="153:18"><call pos:start="153:5" pos:end="153:18"><name pos:start="153:5" pos:end="153:15">tcg_out_nop</name><argument_list pos:start="153:16" pos:end="153:18">(<argument pos:start="153:17" pos:end="153:17"><expr pos:start="153:17" pos:end="153:17"><name pos:start="153:17" pos:end="153:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="160:0"><expr pos:start="157:5" pos:end="157:57"><call pos:start="157:5" pos:end="157:57"><name pos:start="157:5" pos:end="157:14">reloc_pc16</name><argument_list pos:start="157:15" pos:end="157:57">(<argument pos:start="157:16" pos:end="157:25"><expr pos:start="157:16" pos:end="157:25"><name pos:start="157:16" pos:end="157:25">label3_ptr</name></expr></argument>, <argument pos:start="157:28" pos:end="157:56"><expr pos:start="157:28" pos:end="157:56"><operator pos:start="157:28" pos:end="157:28">(</operator><name pos:start="157:29" pos:end="157:43">tcg_target_long</name><operator pos:start="157:44" pos:end="157:44">)</operator> <name pos:start="157:46" pos:end="157:56"><name pos:start="157:46" pos:end="157:46">s</name><operator pos:start="157:47" pos:end="157:48">-&gt;</operator><name pos:start="157:49" pos:end="157:56">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="159:1" pos:end="159:6"># <cpp:directive pos:start="159:3" pos:end="159:6">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="161:5" pos:end="161:29"><expr pos:start="161:5" pos:end="161:28"><name pos:start="161:5" pos:end="161:14">label1_ptr</name> <operator pos:start="161:16" pos:end="161:16">=</operator> <name pos:start="161:18" pos:end="161:28"><name pos:start="161:18" pos:end="161:18">s</name><operator pos:start="161:19" pos:end="161:20">-&gt;</operator><name pos:start="161:21" pos:end="161:28">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:55"><expr pos:start="163:5" pos:end="163:54"><call pos:start="163:5" pos:end="163:54"><name pos:start="163:5" pos:end="163:18">tcg_out_opc_br</name><argument_list pos:start="163:19" pos:end="163:54">(<argument pos:start="163:20" pos:end="163:20"><expr pos:start="163:20" pos:end="163:20"><name pos:start="163:20" pos:end="163:20">s</name></expr></argument>, <argument pos:start="163:23" pos:end="163:29"><expr pos:start="163:23" pos:end="163:29"><name pos:start="163:23" pos:end="163:29">OPC_BEQ</name></expr></argument>, <argument pos:start="163:32" pos:end="163:41"><expr pos:start="163:32" pos:end="163:41"><name pos:start="163:32" pos:end="163:41">TCG_REG_T0</name></expr></argument>, <argument pos:start="163:44" pos:end="163:53"><expr pos:start="163:44" pos:end="163:53"><name pos:start="163:44" pos:end="163:53">TCG_REG_AT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="168:0"><expr pos:start="165:5" pos:end="165:18"><call pos:start="165:5" pos:end="165:18"><name pos:start="165:5" pos:end="165:15">tcg_out_nop</name><argument_list pos:start="165:16" pos:end="165:18">(<argument pos:start="165:17" pos:end="165:17"><expr pos:start="165:17" pos:end="165:17"><name pos:start="165:17" pos:end="165:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="167:1" pos:end="167:7"># <cpp:directive pos:start="167:3" pos:end="167:7">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="171:5" pos:end="171:19">/* slow path */</comment>

    <expr_stmt pos:start="173:5" pos:end="173:25"><expr pos:start="173:5" pos:end="173:24"><name pos:start="173:5" pos:end="173:11">sp_args</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <name pos:start="173:15" pos:end="173:24">TCG_REG_A0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="178:0"><expr pos:start="175:5" pos:end="175:40"><call pos:start="175:5" pos:end="175:40"><name pos:start="175:5" pos:end="175:15">tcg_out_mov</name><argument_list pos:start="175:16" pos:end="175:40">(<argument pos:start="175:17" pos:end="175:17"><expr pos:start="175:17" pos:end="175:17"><name pos:start="175:17" pos:end="175:17">s</name></expr></argument>, <argument pos:start="175:20" pos:end="175:28"><expr pos:start="175:20" pos:end="175:28"><name pos:start="175:20" pos:end="175:26">sp_args</name><operator pos:start="175:27" pos:end="175:28">++</operator></expr></argument>, <argument pos:start="175:31" pos:end="175:39"><expr pos:start="175:31" pos:end="175:39"><name pos:start="175:31" pos:end="175:39">addr_reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="177:1" pos:end="177:27"># <cpp:directive pos:start="177:3" pos:end="177:4">if</cpp:directive> <expr pos:start="177:6" pos:end="177:27"><name pos:start="177:6" pos:end="177:21">TARGET_LONG_BITS</name> <operator pos:start="177:23" pos:end="177:24">==</operator> <literal type="number" pos:start="177:26" pos:end="177:27">64</literal></expr></cpp:if>

    <expr_stmt pos:start="179:5" pos:end="182:0"><expr pos:start="179:5" pos:end="179:40"><call pos:start="179:5" pos:end="179:40"><name pos:start="179:5" pos:end="179:15">tcg_out_mov</name><argument_list pos:start="179:16" pos:end="179:40">(<argument pos:start="179:17" pos:end="179:17"><expr pos:start="179:17" pos:end="179:17"><name pos:start="179:17" pos:end="179:17">s</name></expr></argument>, <argument pos:start="179:20" pos:end="179:28"><expr pos:start="179:20" pos:end="179:28"><name pos:start="179:20" pos:end="179:26">sp_args</name><operator pos:start="179:27" pos:end="179:28">++</operator></expr></argument>, <argument pos:start="179:31" pos:end="179:39"><expr pos:start="179:31" pos:end="179:39"><name pos:start="179:31" pos:end="179:39">addr_reg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="181:1" pos:end="181:7"># <cpp:directive pos:start="181:3" pos:end="181:7">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="183:5" pos:end="183:56"><expr pos:start="183:5" pos:end="183:55"><call pos:start="183:5" pos:end="183:55"><name pos:start="183:5" pos:end="183:16">tcg_out_movi</name><argument_list pos:start="183:17" pos:end="183:55">(<argument pos:start="183:18" pos:end="183:18"><expr pos:start="183:18" pos:end="183:18"><name pos:start="183:18" pos:end="183:18">s</name></expr></argument>, <argument pos:start="183:21" pos:end="183:32"><expr pos:start="183:21" pos:end="183:32"><name pos:start="183:21" pos:end="183:32">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="183:35" pos:end="183:43"><expr pos:start="183:35" pos:end="183:43"><name pos:start="183:35" pos:end="183:41">sp_args</name><operator pos:start="183:42" pos:end="183:43">++</operator></expr></argument>, <argument pos:start="183:46" pos:end="183:54"><expr pos:start="183:46" pos:end="183:54"><name pos:start="183:46" pos:end="183:54">mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:88"><expr pos:start="185:5" pos:end="185:87"><call pos:start="185:5" pos:end="185:87"><name pos:start="185:5" pos:end="185:16">tcg_out_movi</name><argument_list pos:start="185:17" pos:end="185:87">(<argument pos:start="185:18" pos:end="185:18"><expr pos:start="185:18" pos:end="185:18"><name pos:start="185:18" pos:end="185:18">s</name></expr></argument>, <argument pos:start="185:21" pos:end="185:32"><expr pos:start="185:21" pos:end="185:32"><name pos:start="185:21" pos:end="185:32">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="185:35" pos:end="185:44"><expr pos:start="185:35" pos:end="185:44"><name pos:start="185:35" pos:end="185:44">TCG_REG_T9</name></expr></argument>, <argument pos:start="185:47" pos:end="185:86"><expr pos:start="185:47" pos:end="185:86"><operator pos:start="185:47" pos:end="185:47">(</operator><name pos:start="185:48" pos:end="185:62">tcg_target_long</name><operator pos:start="185:63" pos:end="185:63">)</operator><name pos:start="185:64" pos:end="185:86"><name pos:start="185:64" pos:end="185:78">qemu_ld_helpers</name><index pos:start="185:79" pos:end="185:86">[<expr pos:start="185:80" pos:end="185:85"><name pos:start="185:80" pos:end="185:85">s_bits</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:60"><expr pos:start="187:5" pos:end="187:59"><call pos:start="187:5" pos:end="187:59"><name pos:start="187:5" pos:end="187:19">tcg_out_opc_reg</name><argument_list pos:start="187:20" pos:end="187:59">(<argument pos:start="187:21" pos:end="187:21"><expr pos:start="187:21" pos:end="187:21"><name pos:start="187:21" pos:end="187:21">s</name></expr></argument>, <argument pos:start="187:24" pos:end="187:31"><expr pos:start="187:24" pos:end="187:31"><name pos:start="187:24" pos:end="187:31">OPC_JALR</name></expr></argument>, <argument pos:start="187:34" pos:end="187:43"><expr pos:start="187:34" pos:end="187:43"><name pos:start="187:34" pos:end="187:43">TCG_REG_RA</name></expr></argument>, <argument pos:start="187:46" pos:end="187:55"><expr pos:start="187:46" pos:end="187:55"><name pos:start="187:46" pos:end="187:55">TCG_REG_T9</name></expr></argument>, <argument pos:start="187:58" pos:end="187:58"><expr pos:start="187:58" pos:end="187:58"><literal type="number" pos:start="187:58" pos:end="187:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:19"><expr pos:start="189:5" pos:end="189:18"><call pos:start="189:5" pos:end="189:18"><name pos:start="189:5" pos:end="189:15">tcg_out_nop</name><argument_list pos:start="189:16" pos:end="189:18">(<argument pos:start="189:17" pos:end="189:17"><expr pos:start="189:17" pos:end="189:17"><name pos:start="189:17" pos:end="189:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="193:5" pos:end="241:5">switch<condition pos:start="193:11" pos:end="193:15">(<expr pos:start="193:12" pos:end="193:14"><name pos:start="193:12" pos:end="193:14">opc</name></expr>)</condition> <block pos:start="193:17" pos:end="241:5">{<block_content pos:start="195:5" pos:end="239:20">

    <case pos:start="195:5" pos:end="195:11">case <expr pos:start="195:10" pos:end="195:10"><literal type="number" pos:start="195:10" pos:end="195:10">0</literal></expr>:</case>

        <expr_stmt pos:start="197:9" pos:end="197:66"><expr pos:start="197:9" pos:end="197:65"><call pos:start="197:9" pos:end="197:65"><name pos:start="197:9" pos:end="197:23">tcg_out_opc_imm</name><argument_list pos:start="197:24" pos:end="197:65">(<argument pos:start="197:25" pos:end="197:25"><expr pos:start="197:25" pos:end="197:25"><name pos:start="197:25" pos:end="197:25">s</name></expr></argument>, <argument pos:start="197:28" pos:end="197:35"><expr pos:start="197:28" pos:end="197:35"><name pos:start="197:28" pos:end="197:35">OPC_ANDI</name></expr></argument>, <argument pos:start="197:38" pos:end="197:46"><expr pos:start="197:38" pos:end="197:46"><name pos:start="197:38" pos:end="197:46">data_reg1</name></expr></argument>, <argument pos:start="197:49" pos:end="197:58"><expr pos:start="197:49" pos:end="197:58"><name pos:start="197:49" pos:end="197:58">TCG_REG_V0</name></expr></argument>, <argument pos:start="197:61" pos:end="197:64"><expr pos:start="197:61" pos:end="197:64"><literal type="number" pos:start="197:61" pos:end="197:64">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="199:9" pos:end="199:14">break;</break>

    <case pos:start="201:5" pos:end="201:15">case <expr pos:start="201:10" pos:end="201:14"><literal type="number" pos:start="201:10" pos:end="201:10">0</literal> <operator pos:start="201:12" pos:end="201:12">|</operator> <literal type="number" pos:start="201:14" pos:end="201:14">4</literal></expr>:</case>

        <expr_stmt pos:start="203:9" pos:end="203:63"><expr pos:start="203:9" pos:end="203:62"><call pos:start="203:9" pos:end="203:62"><name pos:start="203:9" pos:end="203:22">tcg_out_opc_sa</name><argument_list pos:start="203:23" pos:end="203:62">(<argument pos:start="203:24" pos:end="203:24"><expr pos:start="203:24" pos:end="203:24"><name pos:start="203:24" pos:end="203:24">s</name></expr></argument>, <argument pos:start="203:27" pos:end="203:33"><expr pos:start="203:27" pos:end="203:33"><name pos:start="203:27" pos:end="203:33">OPC_SLL</name></expr></argument>, <argument pos:start="203:36" pos:end="203:45"><expr pos:start="203:36" pos:end="203:45"><name pos:start="203:36" pos:end="203:45">TCG_REG_V0</name></expr></argument>, <argument pos:start="203:48" pos:end="203:57"><expr pos:start="203:48" pos:end="203:57"><name pos:start="203:48" pos:end="203:57">TCG_REG_V0</name></expr></argument>, <argument pos:start="203:60" pos:end="203:61"><expr pos:start="203:60" pos:end="203:61"><literal type="number" pos:start="203:60" pos:end="203:61">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:62"><expr pos:start="205:9" pos:end="205:61"><call pos:start="205:9" pos:end="205:61"><name pos:start="205:9" pos:end="205:22">tcg_out_opc_sa</name><argument_list pos:start="205:23" pos:end="205:61">(<argument pos:start="205:24" pos:end="205:24"><expr pos:start="205:24" pos:end="205:24"><name pos:start="205:24" pos:end="205:24">s</name></expr></argument>, <argument pos:start="205:27" pos:end="205:33"><expr pos:start="205:27" pos:end="205:33"><name pos:start="205:27" pos:end="205:33">OPC_SRA</name></expr></argument>, <argument pos:start="205:36" pos:end="205:44"><expr pos:start="205:36" pos:end="205:44"><name pos:start="205:36" pos:end="205:44">data_reg1</name></expr></argument>, <argument pos:start="205:47" pos:end="205:56"><expr pos:start="205:47" pos:end="205:56"><name pos:start="205:47" pos:end="205:56">TCG_REG_V0</name></expr></argument>, <argument pos:start="205:59" pos:end="205:60"><expr pos:start="205:59" pos:end="205:60"><literal type="number" pos:start="205:59" pos:end="205:60">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="207:9" pos:end="207:14">break;</break>

    <case pos:start="209:5" pos:end="209:11">case <expr pos:start="209:10" pos:end="209:10"><literal type="number" pos:start="209:10" pos:end="209:10">1</literal></expr>:</case>

        <expr_stmt pos:start="211:9" pos:end="211:68"><expr pos:start="211:9" pos:end="211:67"><call pos:start="211:9" pos:end="211:67"><name pos:start="211:9" pos:end="211:23">tcg_out_opc_imm</name><argument_list pos:start="211:24" pos:end="211:67">(<argument pos:start="211:25" pos:end="211:25"><expr pos:start="211:25" pos:end="211:25"><name pos:start="211:25" pos:end="211:25">s</name></expr></argument>, <argument pos:start="211:28" pos:end="211:35"><expr pos:start="211:28" pos:end="211:35"><name pos:start="211:28" pos:end="211:35">OPC_ANDI</name></expr></argument>, <argument pos:start="211:38" pos:end="211:46"><expr pos:start="211:38" pos:end="211:46"><name pos:start="211:38" pos:end="211:46">data_reg1</name></expr></argument>, <argument pos:start="211:49" pos:end="211:58"><expr pos:start="211:49" pos:end="211:58"><name pos:start="211:49" pos:end="211:58">TCG_REG_V0</name></expr></argument>, <argument pos:start="211:61" pos:end="211:66"><expr pos:start="211:61" pos:end="211:66"><literal type="number" pos:start="211:61" pos:end="211:66">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="213:9" pos:end="213:14">break;</break>

    <case pos:start="215:5" pos:end="215:15">case <expr pos:start="215:10" pos:end="215:14"><literal type="number" pos:start="215:10" pos:end="215:10">1</literal> <operator pos:start="215:12" pos:end="215:12">|</operator> <literal type="number" pos:start="215:14" pos:end="215:14">4</literal></expr>:</case>

        <expr_stmt pos:start="217:9" pos:end="217:63"><expr pos:start="217:9" pos:end="217:62"><call pos:start="217:9" pos:end="217:62"><name pos:start="217:9" pos:end="217:22">tcg_out_opc_sa</name><argument_list pos:start="217:23" pos:end="217:62">(<argument pos:start="217:24" pos:end="217:24"><expr pos:start="217:24" pos:end="217:24"><name pos:start="217:24" pos:end="217:24">s</name></expr></argument>, <argument pos:start="217:27" pos:end="217:33"><expr pos:start="217:27" pos:end="217:33"><name pos:start="217:27" pos:end="217:33">OPC_SLL</name></expr></argument>, <argument pos:start="217:36" pos:end="217:45"><expr pos:start="217:36" pos:end="217:45"><name pos:start="217:36" pos:end="217:45">TCG_REG_V0</name></expr></argument>, <argument pos:start="217:48" pos:end="217:57"><expr pos:start="217:48" pos:end="217:57"><name pos:start="217:48" pos:end="217:57">TCG_REG_V0</name></expr></argument>, <argument pos:start="217:60" pos:end="217:61"><expr pos:start="217:60" pos:end="217:61"><literal type="number" pos:start="217:60" pos:end="217:61">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:62"><expr pos:start="219:9" pos:end="219:61"><call pos:start="219:9" pos:end="219:61"><name pos:start="219:9" pos:end="219:22">tcg_out_opc_sa</name><argument_list pos:start="219:23" pos:end="219:61">(<argument pos:start="219:24" pos:end="219:24"><expr pos:start="219:24" pos:end="219:24"><name pos:start="219:24" pos:end="219:24">s</name></expr></argument>, <argument pos:start="219:27" pos:end="219:33"><expr pos:start="219:27" pos:end="219:33"><name pos:start="219:27" pos:end="219:33">OPC_SRA</name></expr></argument>, <argument pos:start="219:36" pos:end="219:44"><expr pos:start="219:36" pos:end="219:44"><name pos:start="219:36" pos:end="219:44">data_reg1</name></expr></argument>, <argument pos:start="219:47" pos:end="219:56"><expr pos:start="219:47" pos:end="219:56"><name pos:start="219:47" pos:end="219:56">TCG_REG_V0</name></expr></argument>, <argument pos:start="219:59" pos:end="219:60"><expr pos:start="219:59" pos:end="219:60"><literal type="number" pos:start="219:59" pos:end="219:60">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="221:9" pos:end="221:14">break;</break>

    <case pos:start="223:5" pos:end="223:11">case <expr pos:start="223:10" pos:end="223:10"><literal type="number" pos:start="223:10" pos:end="223:10">2</literal></expr>:</case>

        <expr_stmt pos:start="225:9" pos:end="225:46"><expr pos:start="225:9" pos:end="225:45"><call pos:start="225:9" pos:end="225:45"><name pos:start="225:9" pos:end="225:19">tcg_out_mov</name><argument_list pos:start="225:20" pos:end="225:45">(<argument pos:start="225:21" pos:end="225:21"><expr pos:start="225:21" pos:end="225:21"><name pos:start="225:21" pos:end="225:21">s</name></expr></argument>, <argument pos:start="225:24" pos:end="225:32"><expr pos:start="225:24" pos:end="225:32"><name pos:start="225:24" pos:end="225:32">data_reg1</name></expr></argument>, <argument pos:start="225:35" pos:end="225:44"><expr pos:start="225:35" pos:end="225:44"><name pos:start="225:35" pos:end="225:44">TCG_REG_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="227:9" pos:end="227:14">break;</break>

    <case pos:start="229:5" pos:end="229:11">case <expr pos:start="229:10" pos:end="229:10"><literal type="number" pos:start="229:10" pos:end="229:10">3</literal></expr>:</case>

        <expr_stmt pos:start="231:9" pos:end="231:46"><expr pos:start="231:9" pos:end="231:45"><call pos:start="231:9" pos:end="231:45"><name pos:start="231:9" pos:end="231:19">tcg_out_mov</name><argument_list pos:start="231:20" pos:end="231:45">(<argument pos:start="231:21" pos:end="231:21"><expr pos:start="231:21" pos:end="231:21"><name pos:start="231:21" pos:end="231:21">s</name></expr></argument>, <argument pos:start="231:24" pos:end="231:32"><expr pos:start="231:24" pos:end="231:32"><name pos:start="231:24" pos:end="231:32">data_reg2</name></expr></argument>, <argument pos:start="231:35" pos:end="231:44"><expr pos:start="231:35" pos:end="231:44"><name pos:start="231:35" pos:end="231:44">TCG_REG_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:46"><expr pos:start="233:9" pos:end="233:45"><call pos:start="233:9" pos:end="233:45"><name pos:start="233:9" pos:end="233:19">tcg_out_mov</name><argument_list pos:start="233:20" pos:end="233:45">(<argument pos:start="233:21" pos:end="233:21"><expr pos:start="233:21" pos:end="233:21"><name pos:start="233:21" pos:end="233:21">s</name></expr></argument>, <argument pos:start="233:24" pos:end="233:32"><expr pos:start="233:24" pos:end="233:32"><name pos:start="233:24" pos:end="233:32">data_reg1</name></expr></argument>, <argument pos:start="233:35" pos:end="233:44"><expr pos:start="233:35" pos:end="233:44"><name pos:start="233:35" pos:end="233:44">TCG_REG_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="235:9" pos:end="235:14">break;</break>

    <default pos:start="237:5" pos:end="237:12">default:</default>

        <expr_stmt pos:start="239:9" pos:end="239:20"><expr pos:start="239:9" pos:end="239:19"><call pos:start="239:9" pos:end="239:19"><name pos:start="239:9" pos:end="239:17">tcg_abort</name><argument_list pos:start="239:18" pos:end="239:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="245:5" pos:end="245:29"><expr pos:start="245:5" pos:end="245:28"><name pos:start="245:5" pos:end="245:14">label2_ptr</name> <operator pos:start="245:16" pos:end="245:16">=</operator> <name pos:start="245:18" pos:end="245:28"><name pos:start="245:18" pos:end="245:18">s</name><operator pos:start="245:19" pos:end="245:20">-&gt;</operator><name pos:start="245:21" pos:end="245:28">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:59"><expr pos:start="247:5" pos:end="247:58"><call pos:start="247:5" pos:end="247:58"><name pos:start="247:5" pos:end="247:18">tcg_out_opc_br</name><argument_list pos:start="247:19" pos:end="247:58">(<argument pos:start="247:20" pos:end="247:20"><expr pos:start="247:20" pos:end="247:20"><name pos:start="247:20" pos:end="247:20">s</name></expr></argument>, <argument pos:start="247:23" pos:end="247:29"><expr pos:start="247:23" pos:end="247:29"><name pos:start="247:23" pos:end="247:29">OPC_BEQ</name></expr></argument>, <argument pos:start="247:32" pos:end="247:43"><expr pos:start="247:32" pos:end="247:43"><name pos:start="247:32" pos:end="247:43">TCG_REG_ZERO</name></expr></argument>, <argument pos:start="247:46" pos:end="247:57"><expr pos:start="247:46" pos:end="247:57"><name pos:start="247:46" pos:end="247:57">TCG_REG_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:19"><expr pos:start="249:5" pos:end="249:18"><call pos:start="249:5" pos:end="249:18"><name pos:start="249:5" pos:end="249:15">tcg_out_nop</name><argument_list pos:start="249:16" pos:end="249:18">(<argument pos:start="249:17" pos:end="249:17"><expr pos:start="249:17" pos:end="249:17"><name pos:start="249:17" pos:end="249:17">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="253:5" pos:end="253:27">/* label1: fast path */</comment>

    <expr_stmt pos:start="255:5" pos:end="255:58"><expr pos:start="255:5" pos:end="255:57"><call pos:start="255:5" pos:end="255:57"><name pos:start="255:5" pos:end="255:14">reloc_pc16</name><argument_list pos:start="255:15" pos:end="255:57">(<argument pos:start="255:16" pos:end="255:25"><expr pos:start="255:16" pos:end="255:25"><name pos:start="255:16" pos:end="255:25">label1_ptr</name></expr></argument>, <argument pos:start="255:28" pos:end="255:56"><expr pos:start="255:28" pos:end="255:56"><operator pos:start="255:28" pos:end="255:28">(</operator><name pos:start="255:29" pos:end="255:43">tcg_target_long</name><operator pos:start="255:44" pos:end="255:44">)</operator> <name pos:start="255:46" pos:end="255:56"><name pos:start="255:46" pos:end="255:46">s</name><operator pos:start="255:47" pos:end="255:48">-&gt;</operator><name pos:start="255:49" pos:end="255:56">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="259:5" pos:end="261:84"><expr pos:start="259:5" pos:end="261:83"><call pos:start="259:5" pos:end="261:83"><name pos:start="259:5" pos:end="259:19">tcg_out_opc_imm</name><argument_list pos:start="259:20" pos:end="261:83">(<argument pos:start="259:21" pos:end="259:21"><expr pos:start="259:21" pos:end="259:21"><name pos:start="259:21" pos:end="259:21">s</name></expr></argument>, <argument pos:start="259:24" pos:end="259:29"><expr pos:start="259:24" pos:end="259:29"><name pos:start="259:24" pos:end="259:29">OPC_LW</name></expr></argument>, <argument pos:start="259:32" pos:end="259:41"><expr pos:start="259:32" pos:end="259:41"><name pos:start="259:32" pos:end="259:41">TCG_REG_A0</name></expr></argument>, <argument pos:start="259:44" pos:end="259:53"><expr pos:start="259:44" pos:end="259:53"><name pos:start="259:44" pos:end="259:53">TCG_REG_A0</name></expr></argument>,

                    <argument pos:start="261:21" pos:end="261:82"><expr pos:start="261:21" pos:end="261:82"><call pos:start="261:21" pos:end="261:70"><name pos:start="261:21" pos:end="261:28">offsetof</name><argument_list pos:start="261:29" pos:end="261:70">(<argument pos:start="261:30" pos:end="261:37"><expr pos:start="261:30" pos:end="261:37"><name pos:start="261:30" pos:end="261:37">CPUState</name></expr></argument>, <argument pos:start="261:40" pos:end="261:69"><expr pos:start="261:40" pos:end="261:69"><name pos:start="261:40" pos:end="261:62"><name pos:start="261:40" pos:end="261:48">tlb_table</name><index pos:start="261:49" pos:end="261:59">[<expr pos:start="261:50" pos:end="261:58"><name pos:start="261:50" pos:end="261:58">mem_index</name></expr>]</index><index pos:start="261:60" pos:end="261:62">[<expr pos:start="261:61" pos:end="261:61"><literal type="number" pos:start="261:61" pos:end="261:61">0</literal></expr>]</index></name><operator pos:start="261:63" pos:end="261:63">.</operator><name pos:start="261:64" pos:end="261:69">addend</name></expr></argument>)</argument_list></call> <operator pos:start="261:72" pos:end="261:72">+</operator> <name pos:start="261:74" pos:end="261:82">addr_meml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="266:0"><expr pos:start="263:5" pos:end="263:67"><call pos:start="263:5" pos:end="263:67"><name pos:start="263:5" pos:end="263:19">tcg_out_opc_reg</name><argument_list pos:start="263:20" pos:end="263:67">(<argument pos:start="263:21" pos:end="263:21"><expr pos:start="263:21" pos:end="263:21"><name pos:start="263:21" pos:end="263:21">s</name></expr></argument>, <argument pos:start="263:24" pos:end="263:31"><expr pos:start="263:24" pos:end="263:31"><name pos:start="263:24" pos:end="263:31">OPC_ADDU</name></expr></argument>, <argument pos:start="263:34" pos:end="263:43"><expr pos:start="263:34" pos:end="263:43"><name pos:start="263:34" pos:end="263:43">TCG_REG_V0</name></expr></argument>, <argument pos:start="263:46" pos:end="263:55"><expr pos:start="263:46" pos:end="263:55"><name pos:start="263:46" pos:end="263:55">TCG_REG_A0</name></expr></argument>, <argument pos:start="263:58" pos:end="263:66"><expr pos:start="263:58" pos:end="263:66"><name pos:start="263:58" pos:end="263:66">addr_regl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="265:1" pos:end="265:5">#<cpp:directive pos:start="265:2" pos:end="265:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="267:5" pos:end="280:0"><if pos:start="267:5" pos:end="271:5">if <condition pos:start="267:8" pos:end="267:42">(<expr pos:start="267:9" pos:end="267:41"><name pos:start="267:9" pos:end="267:18">GUEST_BASE</name> <operator pos:start="267:20" pos:end="267:21">==</operator> <operator pos:start="267:23" pos:end="267:23">(</operator><name pos:start="267:24" pos:end="267:30">int16_t</name><operator pos:start="267:31" pos:end="267:31">)</operator><name pos:start="267:32" pos:end="267:41">GUEST_BASE</name></expr>)</condition> <block pos:start="267:44" pos:end="271:5">{<block_content pos:start="269:9" pos:end="269:73">

        <expr_stmt pos:start="269:9" pos:end="269:73"><expr pos:start="269:9" pos:end="269:72"><call pos:start="269:9" pos:end="269:72"><name pos:start="269:9" pos:end="269:23">tcg_out_opc_imm</name><argument_list pos:start="269:24" pos:end="269:72">(<argument pos:start="269:25" pos:end="269:25"><expr pos:start="269:25" pos:end="269:25"><name pos:start="269:25" pos:end="269:25">s</name></expr></argument>, <argument pos:start="269:28" pos:end="269:36"><expr pos:start="269:28" pos:end="269:36"><name pos:start="269:28" pos:end="269:36">OPC_ADDIU</name></expr></argument>, <argument pos:start="269:39" pos:end="269:48"><expr pos:start="269:39" pos:end="269:48"><name pos:start="269:39" pos:end="269:48">TCG_REG_V0</name></expr></argument>, <argument pos:start="269:51" pos:end="269:59"><expr pos:start="269:51" pos:end="269:59"><name pos:start="269:51" pos:end="269:59">addr_reg1</name></expr></argument>, <argument pos:start="269:62" pos:end="269:71"><expr pos:start="269:62" pos:end="269:71"><name pos:start="269:62" pos:end="269:71">GUEST_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="271:7" pos:end="280:0">else <block pos:start="271:12" pos:end="280:0">{<block_content pos:start="273:9" pos:end="275:72">

        <expr_stmt pos:start="273:9" pos:end="273:62"><expr pos:start="273:9" pos:end="273:61"><call pos:start="273:9" pos:end="273:61"><name pos:start="273:9" pos:end="273:20">tcg_out_movi</name><argument_list pos:start="273:21" pos:end="273:61">(<argument pos:start="273:22" pos:end="273:22"><expr pos:start="273:22" pos:end="273:22"><name pos:start="273:22" pos:end="273:22">s</name></expr></argument>, <argument pos:start="273:25" pos:end="273:36"><expr pos:start="273:25" pos:end="273:36"><name pos:start="273:25" pos:end="273:36">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="273:39" pos:end="273:48"><expr pos:start="273:39" pos:end="273:48"><name pos:start="273:39" pos:end="273:48">TCG_REG_V0</name></expr></argument>, <argument pos:start="273:51" pos:end="273:60"><expr pos:start="273:51" pos:end="273:60"><name pos:start="273:51" pos:end="273:60">GUEST_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:72"><expr pos:start="275:9" pos:end="275:71"><call pos:start="275:9" pos:end="275:71"><name pos:start="275:9" pos:end="275:23">tcg_out_opc_reg</name><argument_list pos:start="275:24" pos:end="275:71">(<argument pos:start="275:25" pos:end="275:25"><expr pos:start="275:25" pos:end="275:25"><name pos:start="275:25" pos:end="275:25">s</name></expr></argument>, <argument pos:start="275:28" pos:end="275:35"><expr pos:start="275:28" pos:end="275:35"><name pos:start="275:28" pos:end="275:35">OPC_ADDU</name></expr></argument>, <argument pos:start="275:38" pos:end="275:47"><expr pos:start="275:38" pos:end="275:47"><name pos:start="275:38" pos:end="275:47">TCG_REG_V0</name></expr></argument>, <argument pos:start="275:50" pos:end="275:59"><expr pos:start="275:50" pos:end="275:59"><name pos:start="275:50" pos:end="275:59">TCG_REG_V0</name></expr></argument>, <argument pos:start="275:62" pos:end="275:70"><expr pos:start="275:62" pos:end="275:70"><name pos:start="275:62" pos:end="275:70">addr_reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:endif pos:start="279:1" pos:end="279:6">#<cpp:directive pos:start="279:2" pos:end="279:6">endif</cpp:directive></cpp:endif>



    <switch pos:start="283:5" pos:end="376:0">switch<condition pos:start="283:11" pos:end="283:15">(<expr pos:start="283:12" pos:end="283:14"><name pos:start="283:12" pos:end="283:14">opc</name></expr>)</condition> <block pos:start="283:17" pos:end="376:0">{<block_content pos:start="285:5" pos:end="369:20">

    <case pos:start="285:5" pos:end="285:11">case <expr pos:start="285:10" pos:end="285:10"><literal type="number" pos:start="285:10" pos:end="285:10">0</literal></expr>:</case>

        <expr_stmt pos:start="287:9" pos:end="287:62"><expr pos:start="287:9" pos:end="287:61"><call pos:start="287:9" pos:end="287:61"><name pos:start="287:9" pos:end="287:23">tcg_out_opc_imm</name><argument_list pos:start="287:24" pos:end="287:61">(<argument pos:start="287:25" pos:end="287:25"><expr pos:start="287:25" pos:end="287:25"><name pos:start="287:25" pos:end="287:25">s</name></expr></argument>, <argument pos:start="287:28" pos:end="287:34"><expr pos:start="287:28" pos:end="287:34"><name pos:start="287:28" pos:end="287:34">OPC_LBU</name></expr></argument>, <argument pos:start="287:37" pos:end="287:45"><expr pos:start="287:37" pos:end="287:45"><name pos:start="287:37" pos:end="287:45">data_reg1</name></expr></argument>, <argument pos:start="287:48" pos:end="287:57"><expr pos:start="287:48" pos:end="287:57"><name pos:start="287:48" pos:end="287:57">TCG_REG_V0</name></expr></argument>, <argument pos:start="287:60" pos:end="287:60"><expr pos:start="287:60" pos:end="287:60"><literal type="number" pos:start="287:60" pos:end="287:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="289:9" pos:end="289:14">break;</break>

    <case pos:start="291:5" pos:end="291:15">case <expr pos:start="291:10" pos:end="291:14"><literal type="number" pos:start="291:10" pos:end="291:10">0</literal> <operator pos:start="291:12" pos:end="291:12">|</operator> <literal type="number" pos:start="291:14" pos:end="291:14">4</literal></expr>:</case>

        <expr_stmt pos:start="293:9" pos:end="293:61"><expr pos:start="293:9" pos:end="293:60"><call pos:start="293:9" pos:end="293:60"><name pos:start="293:9" pos:end="293:23">tcg_out_opc_imm</name><argument_list pos:start="293:24" pos:end="293:60">(<argument pos:start="293:25" pos:end="293:25"><expr pos:start="293:25" pos:end="293:25"><name pos:start="293:25" pos:end="293:25">s</name></expr></argument>, <argument pos:start="293:28" pos:end="293:33"><expr pos:start="293:28" pos:end="293:33"><name pos:start="293:28" pos:end="293:33">OPC_LB</name></expr></argument>, <argument pos:start="293:36" pos:end="293:44"><expr pos:start="293:36" pos:end="293:44"><name pos:start="293:36" pos:end="293:44">data_reg1</name></expr></argument>, <argument pos:start="293:47" pos:end="293:56"><expr pos:start="293:47" pos:end="293:56"><name pos:start="293:47" pos:end="293:56">TCG_REG_V0</name></expr></argument>, <argument pos:start="293:59" pos:end="293:59"><expr pos:start="293:59" pos:end="293:59"><literal type="number" pos:start="293:59" pos:end="293:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="295:9" pos:end="295:14">break;</break>

    <case pos:start="297:5" pos:end="297:11">case <expr pos:start="297:10" pos:end="297:10"><literal type="number" pos:start="297:10" pos:end="297:10">1</literal></expr>:</case>

        <if_stmt pos:start="299:9" pos:end="309:9"><if pos:start="299:9" pos:end="305:9">if <condition pos:start="299:12" pos:end="299:27">(<expr pos:start="299:13" pos:end="299:26"><name pos:start="299:13" pos:end="299:26">TCG_NEED_BSWAP</name></expr>)</condition> <block pos:start="299:29" pos:end="305:9">{<block_content pos:start="301:13" pos:end="303:54">

            <expr_stmt pos:start="301:13" pos:end="301:67"><expr pos:start="301:13" pos:end="301:66"><call pos:start="301:13" pos:end="301:66"><name pos:start="301:13" pos:end="301:27">tcg_out_opc_imm</name><argument_list pos:start="301:28" pos:end="301:66">(<argument pos:start="301:29" pos:end="301:29"><expr pos:start="301:29" pos:end="301:29"><name pos:start="301:29" pos:end="301:29">s</name></expr></argument>, <argument pos:start="301:32" pos:end="301:38"><expr pos:start="301:32" pos:end="301:38"><name pos:start="301:32" pos:end="301:38">OPC_LHU</name></expr></argument>, <argument pos:start="301:41" pos:end="301:50"><expr pos:start="301:41" pos:end="301:50"><name pos:start="301:41" pos:end="301:50">TCG_REG_T0</name></expr></argument>, <argument pos:start="301:53" pos:end="301:62"><expr pos:start="301:53" pos:end="301:62"><name pos:start="301:53" pos:end="301:62">TCG_REG_V0</name></expr></argument>, <argument pos:start="301:65" pos:end="301:65"><expr pos:start="301:65" pos:end="301:65"><literal type="number" pos:start="301:65" pos:end="301:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:54"><expr pos:start="303:13" pos:end="303:53"><call pos:start="303:13" pos:end="303:53"><name pos:start="303:13" pos:end="303:27">tcg_out_bswap16</name><argument_list pos:start="303:28" pos:end="303:53">(<argument pos:start="303:29" pos:end="303:29"><expr pos:start="303:29" pos:end="303:29"><name pos:start="303:29" pos:end="303:29">s</name></expr></argument>, <argument pos:start="303:32" pos:end="303:40"><expr pos:start="303:32" pos:end="303:40"><name pos:start="303:32" pos:end="303:40">data_reg1</name></expr></argument>, <argument pos:start="303:43" pos:end="303:52"><expr pos:start="303:43" pos:end="303:52"><name pos:start="303:43" pos:end="303:52">TCG_REG_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="305:11" pos:end="309:9">else <block pos:start="305:16" pos:end="309:9">{<block_content pos:start="307:13" pos:end="307:66">

            <expr_stmt pos:start="307:13" pos:end="307:66"><expr pos:start="307:13" pos:end="307:65"><call pos:start="307:13" pos:end="307:65"><name pos:start="307:13" pos:end="307:27">tcg_out_opc_imm</name><argument_list pos:start="307:28" pos:end="307:65">(<argument pos:start="307:29" pos:end="307:29"><expr pos:start="307:29" pos:end="307:29"><name pos:start="307:29" pos:end="307:29">s</name></expr></argument>, <argument pos:start="307:32" pos:end="307:38"><expr pos:start="307:32" pos:end="307:38"><name pos:start="307:32" pos:end="307:38">OPC_LHU</name></expr></argument>, <argument pos:start="307:41" pos:end="307:49"><expr pos:start="307:41" pos:end="307:49"><name pos:start="307:41" pos:end="307:49">data_reg1</name></expr></argument>, <argument pos:start="307:52" pos:end="307:61"><expr pos:start="307:52" pos:end="307:61"><name pos:start="307:52" pos:end="307:61">TCG_REG_V0</name></expr></argument>, <argument pos:start="307:64" pos:end="307:64"><expr pos:start="307:64" pos:end="307:64"><literal type="number" pos:start="307:64" pos:end="307:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="311:9" pos:end="311:14">break;</break>

    <case pos:start="313:5" pos:end="313:15">case <expr pos:start="313:10" pos:end="313:14"><literal type="number" pos:start="313:10" pos:end="313:10">1</literal> <operator pos:start="313:12" pos:end="313:12">|</operator> <literal type="number" pos:start="313:14" pos:end="313:14">4</literal></expr>:</case>

        <if_stmt pos:start="315:9" pos:end="325:9"><if pos:start="315:9" pos:end="321:9">if <condition pos:start="315:12" pos:end="315:27">(<expr pos:start="315:13" pos:end="315:26"><name pos:start="315:13" pos:end="315:26">TCG_NEED_BSWAP</name></expr>)</condition> <block pos:start="315:29" pos:end="321:9">{<block_content pos:start="317:13" pos:end="319:55">

            <expr_stmt pos:start="317:13" pos:end="317:67"><expr pos:start="317:13" pos:end="317:66"><call pos:start="317:13" pos:end="317:66"><name pos:start="317:13" pos:end="317:27">tcg_out_opc_imm</name><argument_list pos:start="317:28" pos:end="317:66">(<argument pos:start="317:29" pos:end="317:29"><expr pos:start="317:29" pos:end="317:29"><name pos:start="317:29" pos:end="317:29">s</name></expr></argument>, <argument pos:start="317:32" pos:end="317:38"><expr pos:start="317:32" pos:end="317:38"><name pos:start="317:32" pos:end="317:38">OPC_LHU</name></expr></argument>, <argument pos:start="317:41" pos:end="317:50"><expr pos:start="317:41" pos:end="317:50"><name pos:start="317:41" pos:end="317:50">TCG_REG_T0</name></expr></argument>, <argument pos:start="317:53" pos:end="317:62"><expr pos:start="317:53" pos:end="317:62"><name pos:start="317:53" pos:end="317:62">TCG_REG_V0</name></expr></argument>, <argument pos:start="317:65" pos:end="317:65"><expr pos:start="317:65" pos:end="317:65"><literal type="number" pos:start="317:65" pos:end="317:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:55"><expr pos:start="319:13" pos:end="319:54"><call pos:start="319:13" pos:end="319:54"><name pos:start="319:13" pos:end="319:28">tcg_out_bswap16s</name><argument_list pos:start="319:29" pos:end="319:54">(<argument pos:start="319:30" pos:end="319:30"><expr pos:start="319:30" pos:end="319:30"><name pos:start="319:30" pos:end="319:30">s</name></expr></argument>, <argument pos:start="319:33" pos:end="319:41"><expr pos:start="319:33" pos:end="319:41"><name pos:start="319:33" pos:end="319:41">data_reg1</name></expr></argument>, <argument pos:start="319:44" pos:end="319:53"><expr pos:start="319:44" pos:end="319:53"><name pos:start="319:44" pos:end="319:53">TCG_REG_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="321:11" pos:end="325:9">else <block pos:start="321:16" pos:end="325:9">{<block_content pos:start="323:13" pos:end="323:65">

            <expr_stmt pos:start="323:13" pos:end="323:65"><expr pos:start="323:13" pos:end="323:64"><call pos:start="323:13" pos:end="323:64"><name pos:start="323:13" pos:end="323:27">tcg_out_opc_imm</name><argument_list pos:start="323:28" pos:end="323:64">(<argument pos:start="323:29" pos:end="323:29"><expr pos:start="323:29" pos:end="323:29"><name pos:start="323:29" pos:end="323:29">s</name></expr></argument>, <argument pos:start="323:32" pos:end="323:37"><expr pos:start="323:32" pos:end="323:37"><name pos:start="323:32" pos:end="323:37">OPC_LH</name></expr></argument>, <argument pos:start="323:40" pos:end="323:48"><expr pos:start="323:40" pos:end="323:48"><name pos:start="323:40" pos:end="323:48">data_reg1</name></expr></argument>, <argument pos:start="323:51" pos:end="323:60"><expr pos:start="323:51" pos:end="323:60"><name pos:start="323:51" pos:end="323:60">TCG_REG_V0</name></expr></argument>, <argument pos:start="323:63" pos:end="323:63"><expr pos:start="323:63" pos:end="323:63"><literal type="number" pos:start="323:63" pos:end="323:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="327:9" pos:end="327:14">break;</break>

    <case pos:start="329:5" pos:end="329:11">case <expr pos:start="329:10" pos:end="329:10"><literal type="number" pos:start="329:10" pos:end="329:10">2</literal></expr>:</case>

        <if_stmt pos:start="331:9" pos:end="341:9"><if pos:start="331:9" pos:end="337:9">if <condition pos:start="331:12" pos:end="331:27">(<expr pos:start="331:13" pos:end="331:26"><name pos:start="331:13" pos:end="331:26">TCG_NEED_BSWAP</name></expr>)</condition> <block pos:start="331:29" pos:end="337:9">{<block_content pos:start="333:13" pos:end="335:54">

            <expr_stmt pos:start="333:13" pos:end="333:66"><expr pos:start="333:13" pos:end="333:65"><call pos:start="333:13" pos:end="333:65"><name pos:start="333:13" pos:end="333:27">tcg_out_opc_imm</name><argument_list pos:start="333:28" pos:end="333:65">(<argument pos:start="333:29" pos:end="333:29"><expr pos:start="333:29" pos:end="333:29"><name pos:start="333:29" pos:end="333:29">s</name></expr></argument>, <argument pos:start="333:32" pos:end="333:37"><expr pos:start="333:32" pos:end="333:37"><name pos:start="333:32" pos:end="333:37">OPC_LW</name></expr></argument>, <argument pos:start="333:40" pos:end="333:49"><expr pos:start="333:40" pos:end="333:49"><name pos:start="333:40" pos:end="333:49">TCG_REG_T0</name></expr></argument>, <argument pos:start="333:52" pos:end="333:61"><expr pos:start="333:52" pos:end="333:61"><name pos:start="333:52" pos:end="333:61">TCG_REG_V0</name></expr></argument>, <argument pos:start="333:64" pos:end="333:64"><expr pos:start="333:64" pos:end="333:64"><literal type="number" pos:start="333:64" pos:end="333:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:54"><expr pos:start="335:13" pos:end="335:53"><call pos:start="335:13" pos:end="335:53"><name pos:start="335:13" pos:end="335:27">tcg_out_bswap32</name><argument_list pos:start="335:28" pos:end="335:53">(<argument pos:start="335:29" pos:end="335:29"><expr pos:start="335:29" pos:end="335:29"><name pos:start="335:29" pos:end="335:29">s</name></expr></argument>, <argument pos:start="335:32" pos:end="335:40"><expr pos:start="335:32" pos:end="335:40"><name pos:start="335:32" pos:end="335:40">data_reg1</name></expr></argument>, <argument pos:start="335:43" pos:end="335:52"><expr pos:start="335:43" pos:end="335:52"><name pos:start="335:43" pos:end="335:52">TCG_REG_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="337:11" pos:end="341:9">else <block pos:start="337:16" pos:end="341:9">{<block_content pos:start="339:13" pos:end="339:65">

            <expr_stmt pos:start="339:13" pos:end="339:65"><expr pos:start="339:13" pos:end="339:64"><call pos:start="339:13" pos:end="339:64"><name pos:start="339:13" pos:end="339:27">tcg_out_opc_imm</name><argument_list pos:start="339:28" pos:end="339:64">(<argument pos:start="339:29" pos:end="339:29"><expr pos:start="339:29" pos:end="339:29"><name pos:start="339:29" pos:end="339:29">s</name></expr></argument>, <argument pos:start="339:32" pos:end="339:37"><expr pos:start="339:32" pos:end="339:37"><name pos:start="339:32" pos:end="339:37">OPC_LW</name></expr></argument>, <argument pos:start="339:40" pos:end="339:48"><expr pos:start="339:40" pos:end="339:48"><name pos:start="339:40" pos:end="339:48">data_reg1</name></expr></argument>, <argument pos:start="339:51" pos:end="339:60"><expr pos:start="339:51" pos:end="339:60"><name pos:start="339:51" pos:end="339:60">TCG_REG_V0</name></expr></argument>, <argument pos:start="339:63" pos:end="339:63"><expr pos:start="339:63" pos:end="339:63"><literal type="number" pos:start="339:63" pos:end="339:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="343:9" pos:end="343:14">break;</break>

    <case pos:start="345:5" pos:end="345:11">case <expr pos:start="345:10" pos:end="345:10"><literal type="number" pos:start="345:10" pos:end="345:10">3</literal></expr>:</case>

        <if_stmt pos:start="347:9" pos:end="363:9"><if pos:start="347:9" pos:end="357:9">if <condition pos:start="347:12" pos:end="347:27">(<expr pos:start="347:13" pos:end="347:26"><name pos:start="347:13" pos:end="347:26">TCG_NEED_BSWAP</name></expr>)</condition> <block pos:start="347:29" pos:end="357:9">{<block_content pos:start="349:13" pos:end="355:54">

            <expr_stmt pos:start="349:13" pos:end="349:66"><expr pos:start="349:13" pos:end="349:65"><call pos:start="349:13" pos:end="349:65"><name pos:start="349:13" pos:end="349:27">tcg_out_opc_imm</name><argument_list pos:start="349:28" pos:end="349:65">(<argument pos:start="349:29" pos:end="349:29"><expr pos:start="349:29" pos:end="349:29"><name pos:start="349:29" pos:end="349:29">s</name></expr></argument>, <argument pos:start="349:32" pos:end="349:37"><expr pos:start="349:32" pos:end="349:37"><name pos:start="349:32" pos:end="349:37">OPC_LW</name></expr></argument>, <argument pos:start="349:40" pos:end="349:49"><expr pos:start="349:40" pos:end="349:49"><name pos:start="349:40" pos:end="349:49">TCG_REG_T0</name></expr></argument>, <argument pos:start="349:52" pos:end="349:61"><expr pos:start="349:52" pos:end="349:61"><name pos:start="349:52" pos:end="349:61">TCG_REG_V0</name></expr></argument>, <argument pos:start="349:64" pos:end="349:64"><expr pos:start="349:64" pos:end="349:64"><literal type="number" pos:start="349:64" pos:end="349:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:54"><expr pos:start="351:13" pos:end="351:53"><call pos:start="351:13" pos:end="351:53"><name pos:start="351:13" pos:end="351:27">tcg_out_bswap32</name><argument_list pos:start="351:28" pos:end="351:53">(<argument pos:start="351:29" pos:end="351:29"><expr pos:start="351:29" pos:end="351:29"><name pos:start="351:29" pos:end="351:29">s</name></expr></argument>, <argument pos:start="351:32" pos:end="351:40"><expr pos:start="351:32" pos:end="351:40"><name pos:start="351:32" pos:end="351:40">data_reg1</name></expr></argument>, <argument pos:start="351:43" pos:end="351:52"><expr pos:start="351:43" pos:end="351:52"><name pos:start="351:43" pos:end="351:52">TCG_REG_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:66"><expr pos:start="353:13" pos:end="353:65"><call pos:start="353:13" pos:end="353:65"><name pos:start="353:13" pos:end="353:27">tcg_out_opc_imm</name><argument_list pos:start="353:28" pos:end="353:65">(<argument pos:start="353:29" pos:end="353:29"><expr pos:start="353:29" pos:end="353:29"><name pos:start="353:29" pos:end="353:29">s</name></expr></argument>, <argument pos:start="353:32" pos:end="353:37"><expr pos:start="353:32" pos:end="353:37"><name pos:start="353:32" pos:end="353:37">OPC_LW</name></expr></argument>, <argument pos:start="353:40" pos:end="353:49"><expr pos:start="353:40" pos:end="353:49"><name pos:start="353:40" pos:end="353:49">TCG_REG_T0</name></expr></argument>, <argument pos:start="353:52" pos:end="353:61"><expr pos:start="353:52" pos:end="353:61"><name pos:start="353:52" pos:end="353:61">TCG_REG_V0</name></expr></argument>, <argument pos:start="353:64" pos:end="353:64"><expr pos:start="353:64" pos:end="353:64"><literal type="number" pos:start="353:64" pos:end="353:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:54"><expr pos:start="355:13" pos:end="355:53"><call pos:start="355:13" pos:end="355:53"><name pos:start="355:13" pos:end="355:27">tcg_out_bswap32</name><argument_list pos:start="355:28" pos:end="355:53">(<argument pos:start="355:29" pos:end="355:29"><expr pos:start="355:29" pos:end="355:29"><name pos:start="355:29" pos:end="355:29">s</name></expr></argument>, <argument pos:start="355:32" pos:end="355:40"><expr pos:start="355:32" pos:end="355:40"><name pos:start="355:32" pos:end="355:40">data_reg2</name></expr></argument>, <argument pos:start="355:43" pos:end="355:52"><expr pos:start="355:43" pos:end="355:52"><name pos:start="355:43" pos:end="355:52">TCG_REG_T0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="357:11" pos:end="363:9">else <block pos:start="357:16" pos:end="363:9">{<block_content pos:start="359:13" pos:end="361:65">

            <expr_stmt pos:start="359:13" pos:end="359:65"><expr pos:start="359:13" pos:end="359:64"><call pos:start="359:13" pos:end="359:64"><name pos:start="359:13" pos:end="359:27">tcg_out_opc_imm</name><argument_list pos:start="359:28" pos:end="359:64">(<argument pos:start="359:29" pos:end="359:29"><expr pos:start="359:29" pos:end="359:29"><name pos:start="359:29" pos:end="359:29">s</name></expr></argument>, <argument pos:start="359:32" pos:end="359:37"><expr pos:start="359:32" pos:end="359:37"><name pos:start="359:32" pos:end="359:37">OPC_LW</name></expr></argument>, <argument pos:start="359:40" pos:end="359:48"><expr pos:start="359:40" pos:end="359:48"><name pos:start="359:40" pos:end="359:48">data_reg1</name></expr></argument>, <argument pos:start="359:51" pos:end="359:60"><expr pos:start="359:51" pos:end="359:60"><name pos:start="359:51" pos:end="359:60">TCG_REG_V0</name></expr></argument>, <argument pos:start="359:63" pos:end="359:63"><expr pos:start="359:63" pos:end="359:63"><literal type="number" pos:start="359:63" pos:end="359:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="361:13" pos:end="361:65"><expr pos:start="361:13" pos:end="361:64"><call pos:start="361:13" pos:end="361:64"><name pos:start="361:13" pos:end="361:27">tcg_out_opc_imm</name><argument_list pos:start="361:28" pos:end="361:64">(<argument pos:start="361:29" pos:end="361:29"><expr pos:start="361:29" pos:end="361:29"><name pos:start="361:29" pos:end="361:29">s</name></expr></argument>, <argument pos:start="361:32" pos:end="361:37"><expr pos:start="361:32" pos:end="361:37"><name pos:start="361:32" pos:end="361:37">OPC_LW</name></expr></argument>, <argument pos:start="361:40" pos:end="361:48"><expr pos:start="361:40" pos:end="361:48"><name pos:start="361:40" pos:end="361:48">data_reg2</name></expr></argument>, <argument pos:start="361:51" pos:end="361:60"><expr pos:start="361:51" pos:end="361:60"><name pos:start="361:51" pos:end="361:60">TCG_REG_V0</name></expr></argument>, <argument pos:start="361:63" pos:end="361:63"><expr pos:start="361:63" pos:end="361:63"><literal type="number" pos:start="361:63" pos:end="361:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="365:9" pos:end="365:14">break;</break>

    <default pos:start="367:5" pos:end="367:12">default:</default>

        <expr_stmt pos:start="369:9" pos:end="369:20"><expr pos:start="369:9" pos:end="369:19"><call pos:start="369:9" pos:end="369:19"><name pos:start="369:9" pos:end="369:17">tcg_abort</name><argument_list pos:start="369:18" pos:end="369:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



<cpp:if pos:start="375:1" pos:end="375:27">#<cpp:directive pos:start="375:2" pos:end="375:3">if</cpp:directive> <expr pos:start="375:5" pos:end="375:27"><call pos:start="375:5" pos:end="375:27"><name pos:start="375:5" pos:end="375:11">defined</name><argument_list pos:start="375:12" pos:end="375:27">(<argument pos:start="375:13" pos:end="375:26"><expr pos:start="375:13" pos:end="375:26"><name pos:start="375:13" pos:end="375:26">CONFIG_SOFTMMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="377:5" pos:end="380:0"><expr pos:start="377:5" pos:end="377:57"><call pos:start="377:5" pos:end="377:57"><name pos:start="377:5" pos:end="377:14">reloc_pc16</name><argument_list pos:start="377:15" pos:end="377:57">(<argument pos:start="377:16" pos:end="377:25"><expr pos:start="377:16" pos:end="377:25"><name pos:start="377:16" pos:end="377:25">label2_ptr</name></expr></argument>, <argument pos:start="377:28" pos:end="377:56"><expr pos:start="377:28" pos:end="377:56"><operator pos:start="377:28" pos:end="377:28">(</operator><name pos:start="377:29" pos:end="377:43">tcg_target_long</name><operator pos:start="377:44" pos:end="377:44">)</operator> <name pos:start="377:46" pos:end="377:56"><name pos:start="377:46" pos:end="377:46">s</name><operator pos:start="377:47" pos:end="377:48">-&gt;</operator><name pos:start="377:49" pos:end="377:56">code_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="379:1" pos:end="379:6">#<cpp:directive pos:start="379:2" pos:end="379:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
