<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18856.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">elf_core_dump</name><parameter_list pos:start="1:25" pos:end="1:56">(<parameter pos:start="1:26" pos:end="1:34"><decl pos:start="1:26" pos:end="1:34"><type pos:start="1:26" pos:end="1:34"><name pos:start="1:26" pos:end="1:28">int</name></type> <name pos:start="1:30" pos:end="1:34">signr</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:55"><decl pos:start="1:37" pos:end="1:55"><type pos:start="1:37" pos:end="1:55"><specifier pos:start="1:37" pos:end="1:41">const</specifier> <name pos:start="1:43" pos:end="1:50">CPUState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="283:1">{<block_content pos:start="5:5" pos:end="281:15">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:56"><type pos:start="5:5" pos:end="5:21"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:19">TaskState</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:23">ts</name> <init pos:start="5:25" pos:end="5:56">= <expr pos:start="5:27" pos:end="5:56"><operator pos:start="5:27" pos:end="5:27">(</operator><specifier pos:start="5:28" pos:end="5:32">const</specifier> <name pos:start="5:34" pos:end="5:42">TaskState</name> <operator pos:start="5:44" pos:end="5:44">*</operator><operator pos:start="5:45" pos:end="5:45">)</operator><name pos:start="5:46" pos:end="5:56"><name pos:start="5:46" pos:end="5:48">env</name><operator pos:start="5:49" pos:end="5:50">-&gt;</operator><name pos:start="5:51" pos:end="5:56">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:25">vm_area_struct</name></name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:30">vma</name> <init pos:start="7:32" pos:end="7:37">= <expr pos:start="7:34" pos:end="7:37"><name pos:start="7:34" pos:end="7:37">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:27"><name pos:start="9:10" pos:end="9:17">corefile</name><index pos:start="9:18" pos:end="9:27">[<expr pos:start="9:19" pos:end="9:26"><name pos:start="9:19" pos:end="9:26">PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:24">elf_note_info</name></name></type> <name pos:start="11:26" pos:end="11:29">info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:17">elfhdr</name></name></type> <name pos:start="13:19" pos:end="13:21">elf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:19">elf_phdr</name></name></type> <name pos:start="15:21" pos:end="15:24">phdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:17">rlimit</name></name></type> <name pos:start="17:19" pos:end="17:26">dumpsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:32"><decl pos:start="19:5" pos:end="19:31"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:20">mm_struct</name></name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:24">mm</name> <init pos:start="19:26" pos:end="19:31">= <expr pos:start="19:28" pos:end="19:31"><name pos:start="19:28" pos:end="19:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:38"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:9"><name pos:start="21:5" pos:end="21:9">off_t</name></type> <name pos:start="21:11" pos:end="21:16">offset</name> <init pos:start="21:18" pos:end="21:20">= <expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr></init></decl>, <decl pos:start="21:23" pos:end="21:37"><type ref="prev" pos:start="21:5" pos:end="21:9"/><name pos:start="21:23" pos:end="21:33">data_offset</name> <init pos:start="21:35" pos:end="21:37">= <expr pos:start="21:37" pos:end="21:37"><literal type="number" pos:start="21:37" pos:end="21:37">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:17"><decl pos:start="23:5" pos:end="23:16"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:12">segs</name> <init pos:start="23:14" pos:end="23:16">= <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:16"><decl pos:start="25:5" pos:end="25:15"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:10">fd</name> <init pos:start="25:12" pos:end="25:15">= <expr pos:start="25:14" pos:end="25:15"><operator pos:start="25:14" pos:end="25:14">-</operator><literal type="number" pos:start="25:15" pos:end="25:15">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:14"><expr pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:9">errno</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <literal type="number" pos:start="29:13" pos:end="29:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:38"><expr pos:start="31:5" pos:end="31:37"><call pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:13">getrlimit</name><argument_list pos:start="31:14" pos:end="31:37">(<argument pos:start="31:15" pos:end="31:25"><expr pos:start="31:15" pos:end="31:25"><name pos:start="31:15" pos:end="31:25">RLIMIT_CORE</name></expr></argument>, <argument pos:start="31:28" pos:end="31:36"><expr pos:start="31:28" pos:end="31:36"><operator pos:start="31:28" pos:end="31:28">&amp;</operator><name pos:start="31:29" pos:end="31:36">dumpsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:17"><if pos:start="33:5" pos:end="35:17">if <condition pos:start="33:8" pos:end="33:31">(<expr pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:16">dumpsize</name><operator pos:start="33:17" pos:end="33:17">.</operator><name pos:start="33:18" pos:end="33:25">rlim_cur</name></name> <operator pos:start="33:27" pos:end="33:28">==</operator> <literal type="number" pos:start="33:30" pos:end="33:30">0</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:17"><block_content pos:start="35:9" pos:end="35:17">

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="41:24"><if pos:start="39:5" pos:end="41:24">if <condition pos:start="39:8" pos:end="39:64">(<expr pos:start="39:9" pos:end="39:63"><call pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:26">core_dump_filename</name><argument_list pos:start="39:27" pos:end="39:59">(<argument pos:start="39:28" pos:end="39:29"><expr pos:start="39:28" pos:end="39:29"><name pos:start="39:28" pos:end="39:29">ts</name></expr></argument>, <argument pos:start="39:32" pos:end="39:39"><expr pos:start="39:32" pos:end="39:39"><name pos:start="39:32" pos:end="39:39">corefile</name></expr></argument>, <argument pos:start="39:42" pos:end="39:58"><expr pos:start="39:42" pos:end="39:58"><sizeof pos:start="39:42" pos:end="39:58">sizeof <argument_list pos:start="39:49" pos:end="39:58">(<argument pos:start="39:50" pos:end="39:57"><expr pos:start="39:50" pos:end="39:57"><name pos:start="39:50" pos:end="39:57">corefile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="39:61" pos:end="39:61">&lt;</operator> <literal type="number" pos:start="39:63" pos:end="39:63">0</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:24"><block_content pos:start="41:9" pos:end="41:24">

        <return pos:start="41:9" pos:end="41:24">return <expr pos:start="41:16" pos:end="41:23"><operator pos:start="41:16" pos:end="41:16">(</operator><operator pos:start="41:17" pos:end="41:17">-</operator><name pos:start="41:18" pos:end="41:22">errno</name><operator pos:start="41:23" pos:end="41:23">)</operator></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="49:24"><if pos:start="45:5" pos:end="49:24">if <condition pos:start="45:8" pos:end="47:57">(<expr pos:start="45:9" pos:end="47:56"><operator pos:start="45:9" pos:end="45:9">(</operator><name pos:start="45:10" pos:end="45:11">fd</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="47:51"><name pos:start="45:15" pos:end="45:18">open</name><argument_list pos:start="45:19" pos:end="47:51">(<argument pos:start="45:20" pos:end="45:27"><expr pos:start="45:20" pos:end="45:27"><name pos:start="45:20" pos:end="45:27">corefile</name></expr></argument>, <argument pos:start="45:30" pos:end="45:47"><expr pos:start="45:30" pos:end="45:47"><name pos:start="45:30" pos:end="45:37">O_WRONLY</name> <operator pos:start="45:39" pos:end="45:39">|</operator> <name pos:start="45:41" pos:end="45:47">O_CREAT</name></expr></argument>,

                   <argument pos:start="47:20" pos:end="47:50"><expr pos:start="47:20" pos:end="47:50"><name pos:start="47:20" pos:end="47:26">S_IRUSR</name><operator pos:start="47:27" pos:end="47:27">|</operator><name pos:start="47:28" pos:end="47:34">S_IWUSR</name><operator pos:start="47:35" pos:end="47:35">|</operator><name pos:start="47:36" pos:end="47:42">S_IRGRP</name><operator pos:start="47:43" pos:end="47:43">|</operator><name pos:start="47:44" pos:end="47:50">S_IROTH</name></expr></argument>)</argument_list></call><operator pos:start="47:52" pos:end="47:52">)</operator> <operator pos:start="47:54" pos:end="47:54">&lt;</operator> <literal type="number" pos:start="47:56" pos:end="47:56">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:24"><block_content pos:start="49:9" pos:end="49:24">

        <return pos:start="49:9" pos:end="49:24">return <expr pos:start="49:16" pos:end="49:23"><operator pos:start="49:16" pos:end="49:16">(</operator><operator pos:start="49:17" pos:end="49:17">-</operator><name pos:start="49:18" pos:end="49:22">errno</name><operator pos:start="49:23" pos:end="49:23">)</operator></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="61:7">/*

     * Walk through target process memory mappings and

     * set up structure containing this information.  After

     * this point vma_xxx functions can be used.

     */</comment>

    <if_stmt pos:start="63:5" pos:end="65:17"><if pos:start="63:5" pos:end="65:17">if <condition pos:start="63:8" pos:end="63:34">(<expr pos:start="63:9" pos:end="63:33"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:11">mm</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:24"><name pos:start="63:15" pos:end="63:22">vma_init</name><argument_list pos:start="63:23" pos:end="63:24">()</argument_list></call><operator pos:start="63:25" pos:end="63:25">)</operator> <operator pos:start="63:27" pos:end="63:28">==</operator> <name pos:start="63:30" pos:end="63:33">NULL</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:17"><block_content pos:start="65:9" pos:end="65:17">

        <goto pos:start="65:9" pos:end="65:17">goto <name pos:start="65:14" pos:end="65:16">out</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:40"><expr pos:start="69:5" pos:end="69:39"><call pos:start="69:5" pos:end="69:39"><name pos:start="69:5" pos:end="69:23">walk_memory_regions</name><argument_list pos:start="69:24" pos:end="69:39">(<argument pos:start="69:25" pos:end="69:26"><expr pos:start="69:25" pos:end="69:26"><name pos:start="69:25" pos:end="69:26">mm</name></expr></argument>, <argument pos:start="69:29" pos:end="69:38"><expr pos:start="69:29" pos:end="69:38"><name pos:start="69:29" pos:end="69:38">vma_walker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:37"><expr pos:start="71:5" pos:end="71:36"><name pos:start="71:5" pos:end="71:8">segs</name> <operator pos:start="71:10" pos:end="71:10">=</operator> <call pos:start="71:12" pos:end="71:36"><name pos:start="71:12" pos:end="71:32">vma_get_mapping_count</name><argument_list pos:start="71:33" pos:end="71:36">(<argument pos:start="71:34" pos:end="71:35"><expr pos:start="71:34" pos:end="71:35"><name pos:start="71:34" pos:end="71:35">mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="81:7">/*

     * Construct valid coredump ELF header.  We also

     * add one more segment for notes.

     */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:52"><expr pos:start="83:5" pos:end="83:51"><call pos:start="83:5" pos:end="83:51"><name pos:start="83:5" pos:end="83:19">fill_elf_header</name><argument_list pos:start="83:20" pos:end="83:51">(<argument pos:start="83:21" pos:end="83:24"><expr pos:start="83:21" pos:end="83:24"><operator pos:start="83:21" pos:end="83:21">&amp;</operator><name pos:start="83:22" pos:end="83:24">elf</name></expr></argument>, <argument pos:start="83:27" pos:end="83:34"><expr pos:start="83:27" pos:end="83:34"><name pos:start="83:27" pos:end="83:30">segs</name> <operator pos:start="83:32" pos:end="83:32">+</operator> <literal type="number" pos:start="83:34" pos:end="83:34">1</literal></expr></argument>, <argument pos:start="83:37" pos:end="83:47"><expr pos:start="83:37" pos:end="83:47"><name pos:start="83:37" pos:end="83:47">ELF_MACHINE</name></expr></argument>, <argument pos:start="83:50" pos:end="83:50"><expr pos:start="83:50" pos:end="83:50"><literal type="number" pos:start="83:50" pos:end="83:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="87:17"><if pos:start="85:5" pos:end="87:17">if <condition pos:start="85:8" pos:end="85:48">(<expr pos:start="85:9" pos:end="85:47"><call pos:start="85:9" pos:end="85:42"><name pos:start="85:9" pos:end="85:18">dump_write</name><argument_list pos:start="85:19" pos:end="85:42">(<argument pos:start="85:20" pos:end="85:21"><expr pos:start="85:20" pos:end="85:21"><name pos:start="85:20" pos:end="85:21">fd</name></expr></argument>, <argument pos:start="85:24" pos:end="85:27"><expr pos:start="85:24" pos:end="85:27"><operator pos:start="85:24" pos:end="85:24">&amp;</operator><name pos:start="85:25" pos:end="85:27">elf</name></expr></argument>, <argument pos:start="85:30" pos:end="85:41"><expr pos:start="85:30" pos:end="85:41"><sizeof pos:start="85:30" pos:end="85:41">sizeof <argument_list pos:start="85:37" pos:end="85:41">(<argument pos:start="85:38" pos:end="85:40"><expr pos:start="85:38" pos:end="85:40"><name pos:start="85:38" pos:end="85:40">elf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="85:44" pos:end="85:45">!=</operator> <literal type="number" pos:start="85:47" pos:end="85:47">0</literal></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:17"><block_content pos:start="87:9" pos:end="87:17">

        <goto pos:start="87:9" pos:end="87:17">goto <name pos:start="87:14" pos:end="87:16">out</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:44">/* fill in in-memory version of notes */</comment>

    <if_stmt pos:start="93:5" pos:end="95:17"><if pos:start="93:5" pos:end="95:17">if <condition pos:start="93:8" pos:end="93:46">(<expr pos:start="93:9" pos:end="93:45"><call pos:start="93:9" pos:end="93:41"><name pos:start="93:9" pos:end="93:22">fill_note_info</name><argument_list pos:start="93:23" pos:end="93:41">(<argument pos:start="93:24" pos:end="93:28"><expr pos:start="93:24" pos:end="93:28"><operator pos:start="93:24" pos:end="93:24">&amp;</operator><name pos:start="93:25" pos:end="93:28">info</name></expr></argument>, <argument pos:start="93:31" pos:end="93:35"><expr pos:start="93:31" pos:end="93:35"><name pos:start="93:31" pos:end="93:35">signr</name></expr></argument>, <argument pos:start="93:38" pos:end="93:40"><expr pos:start="93:38" pos:end="93:40"><name pos:start="93:38" pos:end="93:40">env</name></expr></argument>)</argument_list></call> <operator pos:start="93:43" pos:end="93:43">&lt;</operator> <literal type="number" pos:start="93:45" pos:end="93:45">0</literal></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:17"><block_content pos:start="95:9" pos:end="95:17">

        <goto pos:start="95:9" pos:end="95:17">goto <name pos:start="95:14" pos:end="95:16">out</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:27"><expr pos:start="99:5" pos:end="99:26"><name pos:start="99:5" pos:end="99:10">offset</name> <operator pos:start="99:12" pos:end="99:13">+=</operator> <sizeof pos:start="99:15" pos:end="99:26">sizeof <argument_list pos:start="99:22" pos:end="99:26">(<argument pos:start="99:23" pos:end="99:25"><expr pos:start="99:23" pos:end="99:25"><name pos:start="99:23" pos:end="99:25">elf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>                             <comment type="block" pos:start="99:57" pos:end="99:72">/* elf header */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:52"><expr pos:start="101:5" pos:end="101:51"><name pos:start="101:5" pos:end="101:10">offset</name> <operator pos:start="101:12" pos:end="101:13">+=</operator> <operator pos:start="101:15" pos:end="101:15">(</operator><name pos:start="101:16" pos:end="101:19">segs</name> <operator pos:start="101:21" pos:end="101:21">+</operator> <literal type="number" pos:start="101:23" pos:end="101:23">1</literal><operator pos:start="101:24" pos:end="101:24">)</operator> <operator pos:start="101:26" pos:end="101:26">*</operator> <sizeof pos:start="101:28" pos:end="101:51">sizeof <argument_list pos:start="101:35" pos:end="101:51">(<argument pos:start="101:36" pos:end="101:50"><expr pos:start="101:36" pos:end="101:50">struct <name pos:start="101:43" pos:end="101:50">elf_phdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>    <comment type="block" pos:start="101:57" pos:end="101:77">/* program headers */</comment>



    <comment type="block" pos:start="105:5" pos:end="105:40">/* write out notes program header */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:55"><expr pos:start="107:5" pos:end="107:54"><call pos:start="107:5" pos:end="107:54"><name pos:start="107:5" pos:end="107:22">fill_elf_note_phdr</name><argument_list pos:start="107:23" pos:end="107:54">(<argument pos:start="107:24" pos:end="107:28"><expr pos:start="107:24" pos:end="107:28"><operator pos:start="107:24" pos:end="107:24">&amp;</operator><name pos:start="107:25" pos:end="107:28">phdr</name></expr></argument>, <argument pos:start="107:31" pos:end="107:45"><expr pos:start="107:31" pos:end="107:45"><name pos:start="107:31" pos:end="107:45"><name pos:start="107:31" pos:end="107:34">info</name><operator pos:start="107:35" pos:end="107:35">.</operator><name pos:start="107:36" pos:end="107:45">notes_size</name></name></expr></argument>, <argument pos:start="107:48" pos:end="107:53"><expr pos:start="107:48" pos:end="107:53"><name pos:start="107:48" pos:end="107:53">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:30"><expr pos:start="111:5" pos:end="111:29"><name pos:start="111:5" pos:end="111:10">offset</name> <operator pos:start="111:12" pos:end="111:13">+=</operator> <name pos:start="111:15" pos:end="111:29"><name pos:start="111:15" pos:end="111:18">info</name><operator pos:start="111:19" pos:end="111:19">.</operator><name pos:start="111:20" pos:end="111:29">notes_size</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="115:17"><if pos:start="113:5" pos:end="115:17">if <condition pos:start="113:8" pos:end="113:50">(<expr pos:start="113:9" pos:end="113:49"><call pos:start="113:9" pos:end="113:44"><name pos:start="113:9" pos:end="113:18">dump_write</name><argument_list pos:start="113:19" pos:end="113:44">(<argument pos:start="113:20" pos:end="113:21"><expr pos:start="113:20" pos:end="113:21"><name pos:start="113:20" pos:end="113:21">fd</name></expr></argument>, <argument pos:start="113:24" pos:end="113:28"><expr pos:start="113:24" pos:end="113:28"><operator pos:start="113:24" pos:end="113:24">&amp;</operator><name pos:start="113:25" pos:end="113:28">phdr</name></expr></argument>, <argument pos:start="113:31" pos:end="113:43"><expr pos:start="113:31" pos:end="113:43"><sizeof pos:start="113:31" pos:end="113:43">sizeof <argument_list pos:start="113:38" pos:end="113:43">(<argument pos:start="113:39" pos:end="113:42"><expr pos:start="113:39" pos:end="113:42"><name pos:start="113:39" pos:end="113:42">phdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="113:46" pos:end="113:47">!=</operator> <literal type="number" pos:start="113:49" pos:end="113:49">0</literal></expr>)</condition><block type="pseudo" pos:start="115:9" pos:end="115:17"><block_content pos:start="115:9" pos:end="115:17">

        <goto pos:start="115:9" pos:end="115:17">goto <name pos:start="115:14" pos:end="115:16">out</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="119:5" pos:end="125:7">/*

     * ELF specification wants data to start at page boundary so

     * we align it here.

     */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:48"><expr pos:start="127:5" pos:end="127:47"><name pos:start="127:5" pos:end="127:10">offset</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <call pos:start="127:14" pos:end="127:47"><name pos:start="127:14" pos:end="127:20">roundup</name><argument_list pos:start="127:21" pos:end="127:47">(<argument pos:start="127:22" pos:end="127:27"><expr pos:start="127:22" pos:end="127:27"><name pos:start="127:22" pos:end="127:27">offset</name></expr></argument>, <argument pos:start="127:30" pos:end="127:46"><expr pos:start="127:30" pos:end="127:46"><name pos:start="127:30" pos:end="127:46">ELF_EXEC_PAGESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="131:5" pos:end="137:7">/*

     * Write program headers for memory regions mapped in

     * the target process.

     */</comment>

    <for pos:start="139:5" pos:end="175:5">for <control pos:start="139:9" pos:end="139:63">(<init pos:start="139:10" pos:end="139:29"><expr pos:start="139:10" pos:end="139:28"><name pos:start="139:10" pos:end="139:12">vma</name> <operator pos:start="139:14" pos:end="139:14">=</operator> <call pos:start="139:16" pos:end="139:28"><name pos:start="139:16" pos:end="139:24">vma_first</name><argument_list pos:start="139:25" pos:end="139:28">(<argument pos:start="139:26" pos:end="139:27"><expr pos:start="139:26" pos:end="139:27"><name pos:start="139:26" pos:end="139:27">mm</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="139:31" pos:end="139:42"><expr pos:start="139:31" pos:end="139:41"><name pos:start="139:31" pos:end="139:33">vma</name> <operator pos:start="139:35" pos:end="139:36">!=</operator> <name pos:start="139:38" pos:end="139:41">NULL</name></expr>;</condition> <incr pos:start="139:44" pos:end="139:62"><expr pos:start="139:44" pos:end="139:62"><name pos:start="139:44" pos:end="139:46">vma</name> <operator pos:start="139:48" pos:end="139:48">=</operator> <call pos:start="139:50" pos:end="139:62"><name pos:start="139:50" pos:end="139:57">vma_next</name><argument_list pos:start="139:58" pos:end="139:62">(<argument pos:start="139:59" pos:end="139:61"><expr pos:start="139:59" pos:end="139:61"><name pos:start="139:59" pos:end="139:61">vma</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="139:65" pos:end="175:5">{<block_content pos:start="141:9" pos:end="173:45">

        <expr_stmt pos:start="141:9" pos:end="141:47"><expr pos:start="141:9" pos:end="141:46"><operator pos:start="141:9" pos:end="141:9">(</operator><name pos:start="141:10" pos:end="141:13">void</name><operator pos:start="141:14" pos:end="141:14">)</operator> <call pos:start="141:16" pos:end="141:46"><name pos:start="141:16" pos:end="141:21">memset</name><argument_list pos:start="141:22" pos:end="141:46">(<argument pos:start="141:23" pos:end="141:27"><expr pos:start="141:23" pos:end="141:27"><operator pos:start="141:23" pos:end="141:23">&amp;</operator><name pos:start="141:24" pos:end="141:27">phdr</name></expr></argument>, <argument pos:start="141:30" pos:end="141:30"><expr pos:start="141:30" pos:end="141:30"><literal type="number" pos:start="141:30" pos:end="141:30">0</literal></expr></argument>, <argument pos:start="141:33" pos:end="141:45"><expr pos:start="141:33" pos:end="141:45"><sizeof pos:start="141:33" pos:end="141:45">sizeof <argument_list pos:start="141:40" pos:end="141:45">(<argument pos:start="141:41" pos:end="141:44"><expr pos:start="141:41" pos:end="141:44"><name pos:start="141:41" pos:end="141:44">phdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:30"><expr pos:start="145:9" pos:end="145:29"><name pos:start="145:9" pos:end="145:19"><name pos:start="145:9" pos:end="145:12">phdr</name><operator pos:start="145:13" pos:end="145:13">.</operator><name pos:start="145:14" pos:end="145:19">p_type</name></name> <operator pos:start="145:21" pos:end="145:21">=</operator> <name pos:start="145:23" pos:end="145:29">PT_LOAD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:31"><expr pos:start="147:9" pos:end="147:30"><name pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:12">phdr</name><operator pos:start="147:13" pos:end="147:13">.</operator><name pos:start="147:14" pos:end="147:21">p_offset</name></name> <operator pos:start="147:23" pos:end="147:23">=</operator> <name pos:start="147:25" pos:end="147:30">offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:38"><expr pos:start="149:9" pos:end="149:37"><name pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:12">phdr</name><operator pos:start="149:13" pos:end="149:13">.</operator><name pos:start="149:14" pos:end="149:20">p_vaddr</name></name> <operator pos:start="149:22" pos:end="149:22">=</operator> <name pos:start="149:24" pos:end="149:37"><name pos:start="149:24" pos:end="149:26">vma</name><operator pos:start="149:27" pos:end="149:28">-&gt;</operator><name pos:start="149:29" pos:end="149:37">vma_start</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:25"><expr pos:start="151:9" pos:end="151:24"><name pos:start="151:9" pos:end="151:20"><name pos:start="151:9" pos:end="151:12">phdr</name><operator pos:start="151:13" pos:end="151:13">.</operator><name pos:start="151:14" pos:end="151:20">p_paddr</name></name> <operator pos:start="151:22" pos:end="151:22">=</operator> <literal type="number" pos:start="151:24" pos:end="151:24">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:43"><expr pos:start="153:9" pos:end="153:42"><name pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:12">phdr</name><operator pos:start="153:13" pos:end="153:13">.</operator><name pos:start="153:14" pos:end="153:21">p_filesz</name></name> <operator pos:start="153:23" pos:end="153:23">=</operator> <call pos:start="153:25" pos:end="153:42"><name pos:start="153:25" pos:end="153:37">vma_dump_size</name><argument_list pos:start="153:38" pos:end="153:42">(<argument pos:start="153:39" pos:end="153:41"><expr pos:start="153:39" pos:end="153:41"><name pos:start="153:39" pos:end="153:41">vma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:32"><expr pos:start="155:9" pos:end="155:31"><name pos:start="155:9" pos:end="155:14">offset</name> <operator pos:start="155:16" pos:end="155:17">+=</operator> <name pos:start="155:19" pos:end="155:31"><name pos:start="155:19" pos:end="155:22">phdr</name><operator pos:start="155:23" pos:end="155:23">.</operator><name pos:start="155:24" pos:end="155:31">p_filesz</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:53"><expr pos:start="157:9" pos:end="157:52"><name pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:12">phdr</name><operator pos:start="157:13" pos:end="157:13">.</operator><name pos:start="157:14" pos:end="157:20">p_memsz</name></name> <operator pos:start="157:22" pos:end="157:22">=</operator> <name pos:start="157:24" pos:end="157:35"><name pos:start="157:24" pos:end="157:26">vma</name><operator pos:start="157:27" pos:end="157:28">-&gt;</operator><name pos:start="157:29" pos:end="157:35">vma_end</name></name> <operator pos:start="157:37" pos:end="157:37">-</operator> <name pos:start="157:39" pos:end="157:52"><name pos:start="157:39" pos:end="157:41">vma</name><operator pos:start="157:42" pos:end="157:43">-&gt;</operator><name pos:start="157:44" pos:end="157:52">vma_start</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:61"><expr pos:start="159:9" pos:end="159:60"><name pos:start="159:9" pos:end="159:20"><name pos:start="159:9" pos:end="159:12">phdr</name><operator pos:start="159:13" pos:end="159:13">.</operator><name pos:start="159:14" pos:end="159:20">p_flags</name></name> <operator pos:start="159:22" pos:end="159:22">=</operator> <ternary pos:start="159:24" pos:end="159:60"><condition pos:start="159:24" pos:end="159:51"><expr pos:start="159:24" pos:end="159:49"><name pos:start="159:24" pos:end="159:37"><name pos:start="159:24" pos:end="159:26">vma</name><operator pos:start="159:27" pos:end="159:28">-&gt;</operator><name pos:start="159:29" pos:end="159:37">vma_flags</name></name> <operator pos:start="159:39" pos:end="159:39">&amp;</operator> <name pos:start="159:41" pos:end="159:49">PROT_READ</name></expr> ?</condition><then pos:start="159:53" pos:end="159:56"> <expr pos:start="159:53" pos:end="159:56"><name pos:start="159:53" pos:end="159:56">PF_R</name></expr> </then><else pos:start="159:58" pos:end="159:60">: <expr pos:start="159:60" pos:end="159:60"><literal type="number" pos:start="159:60" pos:end="159:60">0</literal></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="163:33"><if pos:start="161:9" pos:end="163:33">if <condition pos:start="161:12" pos:end="161:40">(<expr pos:start="161:13" pos:end="161:39"><name pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:15">vma</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:26">vma_flags</name></name> <operator pos:start="161:28" pos:end="161:28">&amp;</operator> <name pos:start="161:30" pos:end="161:39">PROT_WRITE</name></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:33"><block_content pos:start="163:13" pos:end="163:33">

            <expr_stmt pos:start="163:13" pos:end="163:33"><expr pos:start="163:13" pos:end="163:32"><name pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:16">phdr</name><operator pos:start="163:17" pos:end="163:17">.</operator><name pos:start="163:18" pos:end="163:24">p_flags</name></name> <operator pos:start="163:26" pos:end="163:27">|=</operator> <name pos:start="163:29" pos:end="163:32">PF_W</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="165:9" pos:end="167:33"><if pos:start="165:9" pos:end="167:33">if <condition pos:start="165:12" pos:end="165:39">(<expr pos:start="165:13" pos:end="165:38"><name pos:start="165:13" pos:end="165:26"><name pos:start="165:13" pos:end="165:15">vma</name><operator pos:start="165:16" pos:end="165:17">-&gt;</operator><name pos:start="165:18" pos:end="165:26">vma_flags</name></name> <operator pos:start="165:28" pos:end="165:28">&amp;</operator> <name pos:start="165:30" pos:end="165:38">PROT_EXEC</name></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="167:33"><block_content pos:start="167:13" pos:end="167:33">

            <expr_stmt pos:start="167:13" pos:end="167:33"><expr pos:start="167:13" pos:end="167:32"><name pos:start="167:13" pos:end="167:24"><name pos:start="167:13" pos:end="167:16">phdr</name><operator pos:start="167:17" pos:end="167:17">.</operator><name pos:start="167:18" pos:end="167:24">p_flags</name></name> <operator pos:start="167:26" pos:end="167:27">|=</operator> <name pos:start="167:29" pos:end="167:32">PF_X</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:41"><expr pos:start="169:9" pos:end="169:40"><name pos:start="169:9" pos:end="169:20"><name pos:start="169:9" pos:end="169:12">phdr</name><operator pos:start="169:13" pos:end="169:13">.</operator><name pos:start="169:14" pos:end="169:20">p_align</name></name> <operator pos:start="169:22" pos:end="169:22">=</operator> <name pos:start="169:24" pos:end="169:40">ELF_EXEC_PAGESIZE</name></expr>;</expr_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:45"><expr pos:start="173:9" pos:end="173:44"><call pos:start="173:9" pos:end="173:44"><name pos:start="173:9" pos:end="173:18">dump_write</name><argument_list pos:start="173:19" pos:end="173:44">(<argument pos:start="173:20" pos:end="173:21"><expr pos:start="173:20" pos:end="173:21"><name pos:start="173:20" pos:end="173:21">fd</name></expr></argument>, <argument pos:start="173:24" pos:end="173:28"><expr pos:start="173:24" pos:end="173:28"><operator pos:start="173:24" pos:end="173:24">&amp;</operator><name pos:start="173:25" pos:end="173:28">phdr</name></expr></argument>, <argument pos:start="173:31" pos:end="173:43"><expr pos:start="173:31" pos:end="173:43"><sizeof pos:start="173:31" pos:end="173:43">sizeof <argument_list pos:start="173:38" pos:end="173:43">(<argument pos:start="173:39" pos:end="173:42"><expr pos:start="173:39" pos:end="173:42"><name pos:start="173:39" pos:end="173:42">phdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="179:5" pos:end="185:7">/*

     * Next we write notes just after program headers.  No

     * alignment needed here.

     */</comment>

    <if_stmt pos:start="187:5" pos:end="189:17"><if pos:start="187:5" pos:end="189:17">if <condition pos:start="187:8" pos:end="187:39">(<expr pos:start="187:9" pos:end="187:38"><call pos:start="187:9" pos:end="187:34"><name pos:start="187:9" pos:end="187:23">write_note_info</name><argument_list pos:start="187:24" pos:end="187:34">(<argument pos:start="187:25" pos:end="187:29"><expr pos:start="187:25" pos:end="187:29"><operator pos:start="187:25" pos:end="187:25">&amp;</operator><name pos:start="187:26" pos:end="187:29">info</name></expr></argument>, <argument pos:start="187:32" pos:end="187:33"><expr pos:start="187:32" pos:end="187:33"><name pos:start="187:32" pos:end="187:33">fd</name></expr></argument>)</argument_list></call> <operator pos:start="187:36" pos:end="187:36">&lt;</operator> <literal type="number" pos:start="187:38" pos:end="187:38">0</literal></expr>)</condition><block type="pseudo" pos:start="189:9" pos:end="189:17"><block_content pos:start="189:9" pos:end="189:17">

        <goto pos:start="189:9" pos:end="189:17">goto <name pos:start="189:14" pos:end="189:16">out</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="193:5" pos:end="193:37">/* align data to page boundary */</comment>

    <expr_stmt pos:start="195:5" pos:end="195:41"><expr pos:start="195:5" pos:end="195:40"><name pos:start="195:5" pos:end="195:15">data_offset</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <call pos:start="195:19" pos:end="195:40"><name pos:start="195:19" pos:end="195:23">lseek</name><argument_list pos:start="195:24" pos:end="195:40">(<argument pos:start="195:25" pos:end="195:26"><expr pos:start="195:25" pos:end="195:26"><name pos:start="195:25" pos:end="195:26">fd</name></expr></argument>, <argument pos:start="195:29" pos:end="195:29"><expr pos:start="195:29" pos:end="195:29"><literal type="number" pos:start="195:29" pos:end="195:29">0</literal></expr></argument>, <argument pos:start="195:32" pos:end="195:39"><expr pos:start="195:32" pos:end="195:39"><name pos:start="195:32" pos:end="195:39">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:49"><expr pos:start="197:5" pos:end="197:48"><name pos:start="197:5" pos:end="197:15">data_offset</name> <operator pos:start="197:17" pos:end="197:17">=</operator> <call pos:start="197:19" pos:end="197:48"><name pos:start="197:19" pos:end="197:35">TARGET_PAGE_ALIGN</name><argument_list pos:start="197:36" pos:end="197:48">(<argument pos:start="197:37" pos:end="197:47"><expr pos:start="197:37" pos:end="197:47"><name pos:start="197:37" pos:end="197:47">data_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="201:17"><if pos:start="199:5" pos:end="201:17">if <condition pos:start="199:8" pos:end="199:56">(<expr pos:start="199:9" pos:end="199:55"><call pos:start="199:9" pos:end="199:40"><name pos:start="199:9" pos:end="199:13">lseek</name><argument_list pos:start="199:14" pos:end="199:40">(<argument pos:start="199:15" pos:end="199:16"><expr pos:start="199:15" pos:end="199:16"><name pos:start="199:15" pos:end="199:16">fd</name></expr></argument>, <argument pos:start="199:19" pos:end="199:29"><expr pos:start="199:19" pos:end="199:29"><name pos:start="199:19" pos:end="199:29">data_offset</name></expr></argument>, <argument pos:start="199:32" pos:end="199:39"><expr pos:start="199:32" pos:end="199:39"><name pos:start="199:32" pos:end="199:39">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="199:42" pos:end="199:43">!=</operator> <name pos:start="199:45" pos:end="199:55">data_offset</name></expr>)</condition><block type="pseudo" pos:start="201:9" pos:end="201:17"><block_content pos:start="201:9" pos:end="201:17">

        <goto pos:start="201:9" pos:end="201:17">goto <name pos:start="201:14" pos:end="201:16">out</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="205:5" pos:end="209:7">/*

     * Finally we can dump process memory into corefile as well.

     */</comment>

    <for pos:start="211:5" pos:end="261:5">for <control pos:start="211:9" pos:end="211:63">(<init pos:start="211:10" pos:end="211:29"><expr pos:start="211:10" pos:end="211:28"><name pos:start="211:10" pos:end="211:12">vma</name> <operator pos:start="211:14" pos:end="211:14">=</operator> <call pos:start="211:16" pos:end="211:28"><name pos:start="211:16" pos:end="211:24">vma_first</name><argument_list pos:start="211:25" pos:end="211:28">(<argument pos:start="211:26" pos:end="211:27"><expr pos:start="211:26" pos:end="211:27"><name pos:start="211:26" pos:end="211:27">mm</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="211:31" pos:end="211:42"><expr pos:start="211:31" pos:end="211:41"><name pos:start="211:31" pos:end="211:33">vma</name> <operator pos:start="211:35" pos:end="211:36">!=</operator> <name pos:start="211:38" pos:end="211:41">NULL</name></expr>;</condition> <incr pos:start="211:44" pos:end="211:62"><expr pos:start="211:44" pos:end="211:62"><name pos:start="211:44" pos:end="211:46">vma</name> <operator pos:start="211:48" pos:end="211:48">=</operator> <call pos:start="211:50" pos:end="211:62"><name pos:start="211:50" pos:end="211:57">vma_next</name><argument_list pos:start="211:58" pos:end="211:62">(<argument pos:start="211:59" pos:end="211:61"><expr pos:start="211:59" pos:end="211:61"><name pos:start="211:59" pos:end="211:61">vma</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="211:65" pos:end="261:5">{<block_content pos:start="213:9" pos:end="259:9">

        <decl_stmt pos:start="213:9" pos:end="213:23"><decl pos:start="213:9" pos:end="213:22"><type pos:start="213:9" pos:end="213:17"><name pos:start="213:9" pos:end="213:17">abi_ulong</name></type> <name pos:start="213:19" pos:end="213:22">addr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="215:9" pos:end="215:22"><decl pos:start="215:9" pos:end="215:21"><type pos:start="215:9" pos:end="215:17"><name pos:start="215:9" pos:end="215:17">abi_ulong</name></type> <name pos:start="215:19" pos:end="215:21">end</name></decl>;</decl_stmt>



        <expr_stmt pos:start="219:9" pos:end="219:50"><expr pos:start="219:9" pos:end="219:49"><name pos:start="219:9" pos:end="219:11">end</name> <operator pos:start="219:13" pos:end="219:13">=</operator> <name pos:start="219:15" pos:end="219:28"><name pos:start="219:15" pos:end="219:17">vma</name><operator pos:start="219:18" pos:end="219:19">-&gt;</operator><name pos:start="219:20" pos:end="219:28">vma_start</name></name> <operator pos:start="219:30" pos:end="219:30">+</operator> <call pos:start="219:32" pos:end="219:49"><name pos:start="219:32" pos:end="219:44">vma_dump_size</name><argument_list pos:start="219:45" pos:end="219:49">(<argument pos:start="219:46" pos:end="219:48"><expr pos:start="219:46" pos:end="219:48"><name pos:start="219:46" pos:end="219:48">vma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="223:9" pos:end="259:9">for <control pos:start="223:13" pos:end="225:38">(<init pos:start="223:14" pos:end="223:35"><expr pos:start="223:14" pos:end="223:34"><name pos:start="223:14" pos:end="223:17">addr</name> <operator pos:start="223:19" pos:end="223:19">=</operator> <name pos:start="223:21" pos:end="223:34"><name pos:start="223:21" pos:end="223:23">vma</name><operator pos:start="223:24" pos:end="223:25">-&gt;</operator><name pos:start="223:26" pos:end="223:34">vma_start</name></name></expr>;</init> <condition pos:start="223:37" pos:end="223:47"><expr pos:start="223:37" pos:end="223:46"><name pos:start="223:37" pos:end="223:40">addr</name> <operator pos:start="223:42" pos:end="223:42">&lt;</operator> <name pos:start="223:44" pos:end="223:46">end</name></expr>;</condition>

             <incr pos:start="225:14" pos:end="225:37"><expr pos:start="225:14" pos:end="225:37"><name pos:start="225:14" pos:end="225:17">addr</name> <operator pos:start="225:19" pos:end="225:20">+=</operator> <name pos:start="225:22" pos:end="225:37">TARGET_PAGE_SIZE</name></expr></incr>)</control> <block pos:start="225:40" pos:end="259:9">{<block_content pos:start="227:13" pos:end="257:25">

            <decl_stmt pos:start="227:13" pos:end="227:40"><decl pos:start="227:13" pos:end="227:39"><type pos:start="227:13" pos:end="227:16"><name pos:start="227:13" pos:end="227:16">char</name></type> <name pos:start="227:18" pos:end="227:39"><name pos:start="227:18" pos:end="227:21">page</name><index pos:start="227:22" pos:end="227:39">[<expr pos:start="227:23" pos:end="227:38"><name pos:start="227:23" pos:end="227:38">TARGET_PAGE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="229:13" pos:end="229:22"><decl pos:start="229:13" pos:end="229:21"><type pos:start="229:13" pos:end="229:15"><name pos:start="229:13" pos:end="229:15">int</name></type> <name pos:start="229:17" pos:end="229:21">error</name></decl>;</decl_stmt>



            <comment type="block" pos:start="233:13" pos:end="239:15">/*

             *  Read in page from target process memory and

             *  write it to coredump file.

             */</comment>

            <expr_stmt pos:start="241:13" pos:end="241:62"><expr pos:start="241:13" pos:end="241:61"><name pos:start="241:13" pos:end="241:17">error</name> <operator pos:start="241:19" pos:end="241:19">=</operator> <call pos:start="241:21" pos:end="241:61"><name pos:start="241:21" pos:end="241:34">copy_from_user</name><argument_list pos:start="241:35" pos:end="241:61">(<argument pos:start="241:36" pos:end="241:39"><expr pos:start="241:36" pos:end="241:39"><name pos:start="241:36" pos:end="241:39">page</name></expr></argument>, <argument pos:start="241:42" pos:end="241:45"><expr pos:start="241:42" pos:end="241:45"><name pos:start="241:42" pos:end="241:45">addr</name></expr></argument>, <argument pos:start="241:48" pos:end="241:60"><expr pos:start="241:48" pos:end="241:60"><sizeof pos:start="241:48" pos:end="241:60">sizeof <argument_list pos:start="241:55" pos:end="241:60">(<argument pos:start="241:56" pos:end="241:59"><expr pos:start="241:56" pos:end="241:59"><name pos:start="241:56" pos:end="241:59">page</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="243:13" pos:end="253:13"><if pos:start="243:13" pos:end="253:13">if <condition pos:start="243:16" pos:end="243:27">(<expr pos:start="243:17" pos:end="243:26"><name pos:start="243:17" pos:end="243:21">error</name> <operator pos:start="243:23" pos:end="243:24">!=</operator> <literal type="number" pos:start="243:26" pos:end="243:26">0</literal></expr>)</condition> <block pos:start="243:29" pos:end="253:13">{<block_content pos:start="245:17" pos:end="251:25">

                <expr_stmt pos:start="245:17" pos:end="247:37"><expr pos:start="245:17" pos:end="247:36"><operator pos:start="245:17" pos:end="245:17">(</operator><name pos:start="245:18" pos:end="245:21">void</name><operator pos:start="245:22" pos:end="245:22">)</operator> <call pos:start="245:24" pos:end="247:36"><name pos:start="245:24" pos:end="245:30">fprintf</name><argument_list pos:start="245:31" pos:end="247:36">(<argument pos:start="245:32" pos:end="245:37"><expr pos:start="245:32" pos:end="245:37"><name pos:start="245:32" pos:end="245:37">stderr</name></expr></argument>, <argument pos:start="245:40" pos:end="245:79"><expr pos:start="245:40" pos:end="245:79"><literal type="string" pos:start="245:40" pos:end="245:56">"unable to dump "</literal> <name pos:start="245:58" pos:end="245:74">TARGET_ABI_FMT_lx</name> <literal type="string" pos:start="245:76" pos:end="245:79">"\n"</literal></expr></argument>,

                               <argument pos:start="247:32" pos:end="247:35"><expr pos:start="247:32" pos:end="247:35"><name pos:start="247:32" pos:end="247:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:31"><expr pos:start="249:17" pos:end="249:30"><name pos:start="249:17" pos:end="249:21">errno</name> <operator pos:start="249:23" pos:end="249:23">=</operator> <operator pos:start="249:25" pos:end="249:25">-</operator><name pos:start="249:26" pos:end="249:30">error</name></expr>;</expr_stmt>

                <goto pos:start="251:17" pos:end="251:25">goto <name pos:start="251:22" pos:end="251:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="255:13" pos:end="257:25"><if pos:start="255:13" pos:end="257:25">if <condition pos:start="255:16" pos:end="255:59">(<expr pos:start="255:17" pos:end="255:58"><call pos:start="255:17" pos:end="255:54"><name pos:start="255:17" pos:end="255:26">dump_write</name><argument_list pos:start="255:27" pos:end="255:54">(<argument pos:start="255:28" pos:end="255:29"><expr pos:start="255:28" pos:end="255:29"><name pos:start="255:28" pos:end="255:29">fd</name></expr></argument>, <argument pos:start="255:32" pos:end="255:35"><expr pos:start="255:32" pos:end="255:35"><name pos:start="255:32" pos:end="255:35">page</name></expr></argument>, <argument pos:start="255:38" pos:end="255:53"><expr pos:start="255:38" pos:end="255:53"><name pos:start="255:38" pos:end="255:53">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="255:56" pos:end="255:56">&lt;</operator> <literal type="number" pos:start="255:58" pos:end="255:58">0</literal></expr>)</condition><block type="pseudo" pos:start="257:17" pos:end="257:25"><block_content pos:start="257:17" pos:end="257:25">

                <goto pos:start="257:17" pos:end="257:25">goto <name pos:start="257:22" pos:end="257:24">out</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



 <label pos:start="265:2" pos:end="265:5"><name pos:start="265:2" pos:end="265:4">out</name>:</label>

    <expr_stmt pos:start="267:5" pos:end="267:26"><expr pos:start="267:5" pos:end="267:25"><call pos:start="267:5" pos:end="267:25"><name pos:start="267:5" pos:end="267:18">free_note_info</name><argument_list pos:start="267:19" pos:end="267:25">(<argument pos:start="267:20" pos:end="267:24"><expr pos:start="267:20" pos:end="267:24"><operator pos:start="267:20" pos:end="267:20">&amp;</operator><name pos:start="267:21" pos:end="267:24">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="269:5" pos:end="271:23"><if pos:start="269:5" pos:end="271:23">if <condition pos:start="269:8" pos:end="269:19">(<expr pos:start="269:9" pos:end="269:18"><name pos:start="269:9" pos:end="269:10">mm</name> <operator pos:start="269:12" pos:end="269:13">!=</operator> <name pos:start="269:15" pos:end="269:18">NULL</name></expr>)</condition><block type="pseudo" pos:start="271:9" pos:end="271:23"><block_content pos:start="271:9" pos:end="271:23">

        <expr_stmt pos:start="271:9" pos:end="271:23"><expr pos:start="271:9" pos:end="271:22"><call pos:start="271:9" pos:end="271:22"><name pos:start="271:9" pos:end="271:18">vma_delete</name><argument_list pos:start="271:19" pos:end="271:22">(<argument pos:start="271:20" pos:end="271:21"><expr pos:start="271:20" pos:end="271:21"><name pos:start="271:20" pos:end="271:21">mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:21"><expr pos:start="273:5" pos:end="273:20"><operator pos:start="273:5" pos:end="273:5">(</operator><name pos:start="273:6" pos:end="273:9">void</name><operator pos:start="273:10" pos:end="273:10">)</operator> <call pos:start="273:12" pos:end="273:20"><name pos:start="273:12" pos:end="273:16">close</name><argument_list pos:start="273:17" pos:end="273:20">(<argument pos:start="273:18" pos:end="273:19"><expr pos:start="273:18" pos:end="273:19"><name pos:start="273:18" pos:end="273:19">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="277:5" pos:end="279:24"><if pos:start="277:5" pos:end="279:24">if <condition pos:start="277:8" pos:end="277:19">(<expr pos:start="277:9" pos:end="277:18"><name pos:start="277:9" pos:end="277:13">errno</name> <operator pos:start="277:15" pos:end="277:16">!=</operator> <literal type="number" pos:start="277:18" pos:end="277:18">0</literal></expr>)</condition><block type="pseudo" pos:start="279:9" pos:end="279:24"><block_content pos:start="279:9" pos:end="279:24">

        <return pos:start="279:9" pos:end="279:24">return <expr pos:start="279:16" pos:end="279:23"><operator pos:start="279:16" pos:end="279:16">(</operator><operator pos:start="279:17" pos:end="279:17">-</operator><name pos:start="279:18" pos:end="279:22">errno</name><operator pos:start="279:23" pos:end="279:23">)</operator></expr>;</return></block_content></block></if></if_stmt>

    <return pos:start="281:5" pos:end="281:15">return <expr pos:start="281:12" pos:end="281:14"><operator pos:start="281:12" pos:end="281:12">(</operator><literal type="number" pos:start="281:13" pos:end="281:13">0</literal><operator pos:start="281:14" pos:end="281:14">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
