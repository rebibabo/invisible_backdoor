<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5040.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:15">sm501_init</name><parameter_list pos:start="1:16" pos:end="3:77">(<parameter pos:start="1:17" pos:end="1:47"><decl pos:start="1:17" pos:end="1:47"><type pos:start="1:17" pos:end="1:47"><name pos:start="1:17" pos:end="1:28">MemoryRegion</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:47">address_space_mem</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">uint32_t</name></type> <name pos:start="1:59" pos:end="1:62">base</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:40"><decl pos:start="3:17" pos:end="3:40"><type pos:start="3:17" pos:end="3:40"><name pos:start="3:17" pos:end="3:24">uint32_t</name></type> <name pos:start="3:26" pos:end="3:40">local_mem_bytes</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:54"><decl pos:start="3:43" pos:end="3:54"><type pos:start="3:43" pos:end="3:54"><name pos:start="3:43" pos:end="3:50">qemu_irq</name></type> <name pos:start="3:52" pos:end="3:54">irq</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:76"><decl pos:start="3:57" pos:end="3:76"><type pos:start="3:57" pos:end="3:76"><name pos:start="3:57" pos:end="3:71">CharDriverState</name> <modifier pos:start="3:73" pos:end="3:73">*</modifier></type><name pos:start="3:74" pos:end="3:76">chr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="129:1">{<block_content pos:start="7:5" pos:end="127:49">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">SM501State</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type> <name pos:start="7:18" pos:end="7:18">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">DeviceState</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:63"><decl pos:start="11:5" pos:end="11:62"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:37">sm501_system_config</name> <init pos:start="11:39" pos:end="11:62">= <expr pos:start="11:41" pos:end="11:62"><call pos:start="11:41" pos:end="11:62"><name pos:start="11:41" pos:end="11:45">g_new</name><argument_list pos:start="11:46" pos:end="11:62">(<argument pos:start="11:47" pos:end="11:58"><expr pos:start="11:47" pos:end="11:58"><name pos:start="11:47" pos:end="11:58">MemoryRegion</name></expr></argument>, <argument pos:start="11:61" pos:end="11:61"><expr pos:start="11:61" pos:end="11:61"><literal type="number" pos:start="11:61" pos:end="11:61">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:33">sm501_disp_ctrl</name> <init pos:start="13:35" pos:end="13:58">= <expr pos:start="13:37" pos:end="13:58"><call pos:start="13:37" pos:end="13:58"><name pos:start="13:37" pos:end="13:41">g_new</name><argument_list pos:start="13:42" pos:end="13:58">(<argument pos:start="13:43" pos:end="13:54"><expr pos:start="13:43" pos:end="13:54"><name pos:start="13:43" pos:end="13:54">MemoryRegion</name></expr></argument>, <argument pos:start="13:57" pos:end="13:57"><expr pos:start="13:57" pos:end="13:57"><literal type="number" pos:start="13:57" pos:end="13:57">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:59"><decl pos:start="15:5" pos:end="15:58"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:33">sm501_2d_engine</name> <init pos:start="15:35" pos:end="15:58">= <expr pos:start="15:37" pos:end="15:58"><call pos:start="15:37" pos:end="15:58"><name pos:start="15:37" pos:end="15:41">g_new</name><argument_list pos:start="15:42" pos:end="15:58">(<argument pos:start="15:43" pos:end="15:54"><expr pos:start="15:43" pos:end="15:54"><name pos:start="15:43" pos:end="15:54">MemoryRegion</name></expr></argument>, <argument pos:start="15:57" pos:end="15:57"><expr pos:start="15:57" pos:end="15:57"><literal type="number" pos:start="15:57" pos:end="15:57">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:41">/* allocate management data region */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:52"><expr pos:start="21:5" pos:end="21:51"><name pos:start="21:5" pos:end="21:5">s</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:19">SM501State</name> <operator pos:start="21:21" pos:end="21:21">*</operator><operator pos:start="21:22" pos:end="21:22">)</operator><call pos:start="21:23" pos:end="21:51"><name pos:start="21:23" pos:end="21:31">g_malloc0</name><argument_list pos:start="21:32" pos:end="21:51">(<argument pos:start="21:33" pos:end="21:50"><expr pos:start="21:33" pos:end="21:50"><sizeof pos:start="21:33" pos:end="21:50">sizeof<argument_list pos:start="21:39" pos:end="21:50">(<argument pos:start="21:40" pos:end="21:49"><expr pos:start="21:40" pos:end="21:49"><name pos:start="21:40" pos:end="21:49">SM501State</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:19"><expr pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:11">base</name></name> <operator pos:start="23:13" pos:end="23:13">=</operator> <name pos:start="23:15" pos:end="23:18">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="27:52"><expr pos:start="25:5" pos:end="27:51"><name pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:27">local_mem_size_index</name></name>

	<operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:51"><name pos:start="27:11" pos:end="27:34">get_local_mem_size_index</name><argument_list pos:start="27:35" pos:end="27:51">(<argument pos:start="27:36" pos:end="27:50"><expr pos:start="27:36" pos:end="27:50"><name pos:start="27:36" pos:end="27:50">local_mem_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="31:43"><expr pos:start="29:5" pos:end="31:42"><call pos:start="29:5" pos:end="31:42"><name pos:start="29:5" pos:end="29:17">SM501_DPRINTF</name><argument_list pos:start="29:18" pos:end="31:42">(<argument pos:start="29:19" pos:end="29:49"><expr pos:start="29:19" pos:end="29:49"><literal type="string" pos:start="29:19" pos:end="29:49">"local mem size=%x. index=%d\n"</literal></expr></argument>, <argument pos:start="29:52" pos:end="29:72"><expr pos:start="29:52" pos:end="29:72"><call pos:start="29:52" pos:end="29:72"><name pos:start="29:52" pos:end="29:69">get_local_mem_size</name><argument_list pos:start="29:70" pos:end="29:72">(<argument pos:start="29:71" pos:end="29:71"><expr pos:start="29:71" pos:end="29:71"><name pos:start="29:71" pos:end="29:71">s</name></expr></argument>)</argument_list></call></expr></argument>,

		  <argument pos:start="31:19" pos:end="31:41"><expr pos:start="31:19" pos:end="31:41"><name pos:start="31:19" pos:end="31:41"><name pos:start="31:19" pos:end="31:19">s</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:41">local_mem_size_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:35"><expr pos:start="33:5" pos:end="33:34"><name pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:21">system_control</name></name> <operator pos:start="33:23" pos:end="33:23">=</operator> <literal type="number" pos:start="33:25" pos:end="33:34">0x00100000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:33"><expr pos:start="35:5" pos:end="35:32"><name pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:19">misc_control</name></name> <operator pos:start="35:21" pos:end="35:21">=</operator> <literal type="number" pos:start="35:23" pos:end="35:32">0x00001000</literal></expr>;</expr_stmt> <comment type="block" pos:start="35:35" pos:end="35:62">/* assumes SH, active=low */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:37"><expr pos:start="37:5" pos:end="37:36"><name pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:23">dc_panel_control</name></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <literal type="number" pos:start="37:27" pos:end="37:36">0x00010000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:35"><expr pos:start="39:5" pos:end="39:34"><name pos:start="39:5" pos:end="39:21"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:21">dc_crt_control</name></name> <operator pos:start="39:23" pos:end="39:23">=</operator> <literal type="number" pos:start="39:25" pos:end="39:34">0x00010000</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:31">/* allocate local memory */</comment>

    <expr_stmt pos:start="45:5" pos:end="47:44"><expr pos:start="45:5" pos:end="47:43"><call pos:start="45:5" pos:end="47:43"><name pos:start="45:5" pos:end="45:26">memory_region_init_ram</name><argument_list pos:start="45:27" pos:end="47:43">(<argument pos:start="45:28" pos:end="45:47"><expr pos:start="45:28" pos:end="45:47"><operator pos:start="45:28" pos:end="45:28">&amp;</operator><name pos:start="45:29" pos:end="45:47"><name pos:start="45:29" pos:end="45:29">s</name><operator pos:start="45:30" pos:end="45:31">-&gt;</operator><name pos:start="45:32" pos:end="45:47">local_mem_region</name></name></expr></argument>, <argument pos:start="45:50" pos:end="45:62"><expr pos:start="45:50" pos:end="45:62"><literal type="string" pos:start="45:50" pos:end="45:62">"sm501.local"</literal></expr></argument>,

                           <argument pos:start="47:28" pos:end="47:42"><expr pos:start="47:28" pos:end="47:42"><name pos:start="47:28" pos:end="47:42">local_mem_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:54"><expr pos:start="49:5" pos:end="49:53"><call pos:start="49:5" pos:end="49:53"><name pos:start="49:5" pos:end="49:31">vmstate_register_ram_global</name><argument_list pos:start="49:32" pos:end="49:53">(<argument pos:start="49:33" pos:end="49:52"><expr pos:start="49:33" pos:end="49:52"><operator pos:start="49:33" pos:end="49:33">&amp;</operator><name pos:start="49:34" pos:end="49:52"><name pos:start="49:34" pos:end="49:34">s</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:52">local_mem_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:67"><expr pos:start="51:5" pos:end="51:66"><name pos:start="51:5" pos:end="51:16"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:16">local_mem</name></name> <operator pos:start="51:18" pos:end="51:18">=</operator> <call pos:start="51:20" pos:end="51:66"><name pos:start="51:20" pos:end="51:44">memory_region_get_ram_ptr</name><argument_list pos:start="51:45" pos:end="51:66">(<argument pos:start="51:46" pos:end="51:65"><expr pos:start="51:46" pos:end="51:65"><operator pos:start="51:46" pos:end="51:46">&amp;</operator><name pos:start="51:47" pos:end="51:65"><name pos:start="51:47" pos:end="51:47">s</name><operator pos:start="51:48" pos:end="51:49">-&gt;</operator><name pos:start="51:50" pos:end="51:65">local_mem_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:79"><expr pos:start="53:5" pos:end="53:78"><call pos:start="53:5" pos:end="53:78"><name pos:start="53:5" pos:end="53:31">memory_region_add_subregion</name><argument_list pos:start="53:32" pos:end="53:78">(<argument pos:start="53:33" pos:end="53:49"><expr pos:start="53:33" pos:end="53:49"><name pos:start="53:33" pos:end="53:49">address_space_mem</name></expr></argument>, <argument pos:start="53:52" pos:end="53:55"><expr pos:start="53:52" pos:end="53:55"><name pos:start="53:52" pos:end="53:55">base</name></expr></argument>, <argument pos:start="53:58" pos:end="53:77"><expr pos:start="53:58" pos:end="53:77"><operator pos:start="53:58" pos:end="53:58">&amp;</operator><name pos:start="53:59" pos:end="53:77"><name pos:start="53:59" pos:end="53:59">s</name><operator pos:start="53:60" pos:end="53:61">-&gt;</operator><name pos:start="53:62" pos:end="53:77">local_mem_region</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:18">/* map mmio */</comment>

    <expr_stmt pos:start="59:5" pos:end="61:55"><expr pos:start="59:5" pos:end="61:54"><call pos:start="59:5" pos:end="61:54"><name pos:start="59:5" pos:end="59:25">memory_region_init_io</name><argument_list pos:start="59:26" pos:end="61:54">(<argument pos:start="59:27" pos:end="59:45"><expr pos:start="59:27" pos:end="59:45"><name pos:start="59:27" pos:end="59:45">sm501_system_config</name></expr></argument>, <argument pos:start="59:48" pos:end="59:71"><expr pos:start="59:48" pos:end="59:71"><operator pos:start="59:48" pos:end="59:48">&amp;</operator><name pos:start="59:49" pos:end="59:71">sm501_system_config_ops</name></expr></argument>, <argument pos:start="59:74" pos:end="59:74"><expr pos:start="59:74" pos:end="59:74"><name pos:start="59:74" pos:end="59:74">s</name></expr></argument>,

                          <argument pos:start="61:27" pos:end="61:47"><expr pos:start="61:27" pos:end="61:47"><literal type="string" pos:start="61:27" pos:end="61:47">"sm501-system-config"</literal></expr></argument>, <argument pos:start="61:50" pos:end="61:53"><expr pos:start="61:50" pos:end="61:53"><literal type="number" pos:start="61:50" pos:end="61:53">0x6c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="65:53"><expr pos:start="63:5" pos:end="65:52"><call pos:start="63:5" pos:end="65:52"><name pos:start="63:5" pos:end="63:31">memory_region_add_subregion</name><argument_list pos:start="63:32" pos:end="65:52">(<argument pos:start="63:33" pos:end="63:49"><expr pos:start="63:33" pos:end="63:49"><name pos:start="63:33" pos:end="63:49">address_space_mem</name></expr></argument>, <argument pos:start="63:52" pos:end="63:74"><expr pos:start="63:52" pos:end="63:74"><name pos:start="63:52" pos:end="63:55">base</name> <operator pos:start="63:57" pos:end="63:57">+</operator> <name pos:start="63:59" pos:end="63:74">MMIO_BASE_OFFSET</name></expr></argument>,

                                <argument pos:start="65:33" pos:end="65:51"><expr pos:start="65:33" pos:end="65:51"><name pos:start="65:33" pos:end="65:51">sm501_system_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="69:53"><expr pos:start="67:5" pos:end="69:52"><call pos:start="67:5" pos:end="69:52"><name pos:start="67:5" pos:end="67:25">memory_region_init_io</name><argument_list pos:start="67:26" pos:end="69:52">(<argument pos:start="67:27" pos:end="67:41"><expr pos:start="67:27" pos:end="67:41"><name pos:start="67:27" pos:end="67:41">sm501_disp_ctrl</name></expr></argument>, <argument pos:start="67:44" pos:end="67:63"><expr pos:start="67:44" pos:end="67:63"><operator pos:start="67:44" pos:end="67:44">&amp;</operator><name pos:start="67:45" pos:end="67:63">sm501_disp_ctrl_ops</name></expr></argument>, <argument pos:start="67:66" pos:end="67:66"><expr pos:start="67:66" pos:end="67:66"><name pos:start="67:66" pos:end="67:66">s</name></expr></argument>,

                          <argument pos:start="69:27" pos:end="69:43"><expr pos:start="69:27" pos:end="69:43"><literal type="string" pos:start="69:27" pos:end="69:43">"sm501-disp-ctrl"</literal></expr></argument>, <argument pos:start="69:46" pos:end="69:51"><expr pos:start="69:46" pos:end="69:51"><literal type="number" pos:start="69:46" pos:end="69:51">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="75:49"><expr pos:start="71:5" pos:end="75:48"><call pos:start="71:5" pos:end="75:48"><name pos:start="71:5" pos:end="71:31">memory_region_add_subregion</name><argument_list pos:start="71:32" pos:end="75:48">(<argument pos:start="71:33" pos:end="71:49"><expr pos:start="71:33" pos:end="71:49"><name pos:start="71:33" pos:end="71:49">address_space_mem</name></expr></argument>,

                                <argument pos:start="73:33" pos:end="73:66"><expr pos:start="73:33" pos:end="73:66"><name pos:start="73:33" pos:end="73:36">base</name> <operator pos:start="73:38" pos:end="73:38">+</operator> <name pos:start="73:40" pos:end="73:55">MMIO_BASE_OFFSET</name> <operator pos:start="73:57" pos:end="73:57">+</operator> <name pos:start="73:59" pos:end="73:66">SM501_DC</name></expr></argument>,

                                <argument pos:start="75:33" pos:end="75:47"><expr pos:start="75:33" pos:end="75:47"><name pos:start="75:33" pos:end="75:47">sm501_disp_ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="79:51"><expr pos:start="77:5" pos:end="79:50"><call pos:start="77:5" pos:end="79:50"><name pos:start="77:5" pos:end="77:25">memory_region_init_io</name><argument_list pos:start="77:26" pos:end="79:50">(<argument pos:start="77:27" pos:end="77:41"><expr pos:start="77:27" pos:end="77:41"><name pos:start="77:27" pos:end="77:41">sm501_2d_engine</name></expr></argument>, <argument pos:start="77:44" pos:end="77:63"><expr pos:start="77:44" pos:end="77:63"><operator pos:start="77:44" pos:end="77:44">&amp;</operator><name pos:start="77:45" pos:end="77:63">sm501_2d_engine_ops</name></expr></argument>, <argument pos:start="77:66" pos:end="77:66"><expr pos:start="77:66" pos:end="77:66"><name pos:start="77:66" pos:end="77:66">s</name></expr></argument>,

                          <argument pos:start="79:27" pos:end="79:43"><expr pos:start="79:27" pos:end="79:43"><literal type="string" pos:start="79:27" pos:end="79:43">"sm501-2d-engine"</literal></expr></argument>, <argument pos:start="79:46" pos:end="79:49"><expr pos:start="79:46" pos:end="79:49"><literal type="number" pos:start="79:46" pos:end="79:49">0x54</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="85:49"><expr pos:start="81:5" pos:end="85:48"><call pos:start="81:5" pos:end="85:48"><name pos:start="81:5" pos:end="81:31">memory_region_add_subregion</name><argument_list pos:start="81:32" pos:end="85:48">(<argument pos:start="81:33" pos:end="81:49"><expr pos:start="81:33" pos:end="81:49"><name pos:start="81:33" pos:end="81:49">address_space_mem</name></expr></argument>,

                                <argument pos:start="83:33" pos:end="83:73"><expr pos:start="83:33" pos:end="83:73"><name pos:start="83:33" pos:end="83:36">base</name> <operator pos:start="83:38" pos:end="83:38">+</operator> <name pos:start="83:40" pos:end="83:55">MMIO_BASE_OFFSET</name> <operator pos:start="83:57" pos:end="83:57">+</operator> <name pos:start="83:59" pos:end="83:73">SM501_2D_ENGINE</name></expr></argument>,

                                <argument pos:start="85:33" pos:end="85:47"><expr pos:start="85:33" pos:end="85:47"><name pos:start="85:33" pos:end="85:47">sm501_2d_engine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:45">/* bridge to usb host emulation module */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:43"><expr pos:start="91:5" pos:end="91:42"><name pos:start="91:5" pos:end="91:7">dev</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:42"><name pos:start="91:11" pos:end="91:21">qdev_create</name><argument_list pos:start="91:22" pos:end="91:42">(<argument pos:start="91:23" pos:end="91:26"><expr pos:start="91:23" pos:end="91:26"><name pos:start="91:23" pos:end="91:26">NULL</name></expr></argument>, <argument pos:start="91:29" pos:end="91:41"><expr pos:start="91:29" pos:end="91:41"><literal type="string" pos:start="91:29" pos:end="91:41">"sysbus-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:46"><expr pos:start="93:5" pos:end="93:45"><call pos:start="93:5" pos:end="93:45"><name pos:start="93:5" pos:end="93:24">qdev_prop_set_uint32</name><argument_list pos:start="93:25" pos:end="93:45">(<argument pos:start="93:26" pos:end="93:28"><expr pos:start="93:26" pos:end="93:28"><name pos:start="93:26" pos:end="93:28">dev</name></expr></argument>, <argument pos:start="93:31" pos:end="93:41"><expr pos:start="93:31" pos:end="93:41"><literal type="string" pos:start="93:31" pos:end="93:41">"num-ports"</literal></expr></argument>, <argument pos:start="93:44" pos:end="93:44"><expr pos:start="93:44" pos:end="93:44"><literal type="number" pos:start="93:44" pos:end="93:44">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:49"><expr pos:start="95:5" pos:end="95:48"><call pos:start="95:5" pos:end="95:48"><name pos:start="95:5" pos:end="95:23">qdev_prop_set_taddr</name><argument_list pos:start="95:24" pos:end="95:48">(<argument pos:start="95:25" pos:end="95:27"><expr pos:start="95:25" pos:end="95:27"><name pos:start="95:25" pos:end="95:27">dev</name></expr></argument>, <argument pos:start="95:30" pos:end="95:41"><expr pos:start="95:30" pos:end="95:41"><literal type="string" pos:start="95:30" pos:end="95:41">"dma-offset"</literal></expr></argument>, <argument pos:start="95:44" pos:end="95:47"><expr pos:start="95:44" pos:end="95:47"><name pos:start="95:44" pos:end="95:47">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:26"><expr pos:start="97:5" pos:end="97:25"><call pos:start="97:5" pos:end="97:25"><name pos:start="97:5" pos:end="97:20">qdev_init_nofail</name><argument_list pos:start="97:21" pos:end="97:25">(<argument pos:start="97:22" pos:end="97:24"><expr pos:start="97:22" pos:end="97:24"><name pos:start="97:22" pos:end="97:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="101:62"><expr pos:start="99:5" pos:end="101:61"><call pos:start="99:5" pos:end="101:61"><name pos:start="99:5" pos:end="99:19">sysbus_mmio_map</name><argument_list pos:start="99:20" pos:end="101:61">(<argument pos:start="99:21" pos:end="99:39"><expr pos:start="99:21" pos:end="99:39"><call pos:start="99:21" pos:end="99:39"><name pos:start="99:21" pos:end="99:34">SYS_BUS_DEVICE</name><argument_list pos:start="99:35" pos:end="99:39">(<argument pos:start="99:36" pos:end="99:38"><expr pos:start="99:36" pos:end="99:38"><name pos:start="99:36" pos:end="99:38">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="99:42" pos:end="99:42"><expr pos:start="99:42" pos:end="99:42"><literal type="number" pos:start="99:42" pos:end="99:42">0</literal></expr></argument>,

                    <argument pos:start="101:21" pos:end="101:60"><expr pos:start="101:21" pos:end="101:60"><name pos:start="101:21" pos:end="101:24">base</name> <operator pos:start="101:26" pos:end="101:26">+</operator> <name pos:start="101:28" pos:end="101:43">MMIO_BASE_OFFSET</name> <operator pos:start="101:45" pos:end="101:45">+</operator> <name pos:start="101:47" pos:end="101:60">SM501_USB_HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:52"><expr pos:start="103:5" pos:end="103:51"><call pos:start="103:5" pos:end="103:51"><name pos:start="103:5" pos:end="103:22">sysbus_connect_irq</name><argument_list pos:start="103:23" pos:end="103:51">(<argument pos:start="103:24" pos:end="103:42"><expr pos:start="103:24" pos:end="103:42"><call pos:start="103:24" pos:end="103:42"><name pos:start="103:24" pos:end="103:37">SYS_BUS_DEVICE</name><argument_list pos:start="103:38" pos:end="103:42">(<argument pos:start="103:39" pos:end="103:41"><expr pos:start="103:39" pos:end="103:41"><name pos:start="103:39" pos:end="103:41">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="103:45" pos:end="103:45"><expr pos:start="103:45" pos:end="103:45"><literal type="number" pos:start="103:45" pos:end="103:45">0</literal></expr></argument>, <argument pos:start="103:48" pos:end="103:50"><expr pos:start="103:48" pos:end="103:50"><name pos:start="103:48" pos:end="103:50">irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:43">/* bridge to serial emulation module */</comment>

    <if_stmt pos:start="109:5" pos:end="119:5"><if pos:start="109:5" pos:end="119:5">if <condition pos:start="109:8" pos:end="109:12">(<expr pos:start="109:9" pos:end="109:11"><name pos:start="109:9" pos:end="109:11">chr</name></expr>)</condition> <block pos:start="109:14" pos:end="119:5">{<block_content pos:start="111:9" pos:end="117:58">

        <expr_stmt pos:start="111:9" pos:end="117:58"><expr pos:start="111:9" pos:end="117:57"><call pos:start="111:9" pos:end="117:57"><name pos:start="111:9" pos:end="111:22">serial_mm_init</name><argument_list pos:start="111:23" pos:end="117:57">(<argument pos:start="111:24" pos:end="111:40"><expr pos:start="111:24" pos:end="111:40"><name pos:start="111:24" pos:end="111:40">address_space_mem</name></expr></argument>,

                       <argument pos:start="113:24" pos:end="113:60"><expr pos:start="113:24" pos:end="113:60"><name pos:start="113:24" pos:end="113:27">base</name> <operator pos:start="113:29" pos:end="113:29">+</operator> <name pos:start="113:31" pos:end="113:46">MMIO_BASE_OFFSET</name> <operator pos:start="113:48" pos:end="113:48">+</operator> <name pos:start="113:50" pos:end="113:60">SM501_UART0</name></expr></argument>, <argument pos:start="113:63" pos:end="113:63"><expr pos:start="113:63" pos:end="113:63"><literal type="number" pos:start="113:63" pos:end="113:63">2</literal></expr></argument>,

                       <argument pos:start="115:24" pos:end="115:27"><expr pos:start="115:24" pos:end="115:27"><name pos:start="115:24" pos:end="115:27">NULL</name></expr></argument>, <comment type="block" pos:start="115:30" pos:end="115:58">/* TODO : chain irq to IRL */</comment>

                       <argument pos:start="117:24" pos:end="117:29"><expr pos:start="117:24" pos:end="117:29"><literal type="number" pos:start="117:24" pos:end="117:29">115200</literal></expr></argument>, <argument pos:start="117:32" pos:end="117:34"><expr pos:start="117:32" pos:end="117:34"><name pos:start="117:32" pos:end="117:34">chr</name></expr></argument>, <argument pos:start="117:37" pos:end="117:56"><expr pos:start="117:37" pos:end="117:56"><name pos:start="117:37" pos:end="117:56">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:37">/* create qemu graphic console */</comment>

    <expr_stmt pos:start="125:5" pos:end="127:49"><expr pos:start="125:5" pos:end="127:48"><name pos:start="125:5" pos:end="125:10"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:10">con</name></name> <operator pos:start="125:12" pos:end="125:12">=</operator> <call pos:start="125:14" pos:end="127:48"><name pos:start="125:14" pos:end="125:33">graphic_console_init</name><argument_list pos:start="125:34" pos:end="127:48">(<argument pos:start="125:35" pos:end="125:54"><expr pos:start="125:35" pos:end="125:54"><name pos:start="125:35" pos:end="125:54">sm501_update_display</name></expr></argument>, <argument pos:start="125:57" pos:end="125:60"><expr pos:start="125:57" pos:end="125:60"><name pos:start="125:57" pos:end="125:60">NULL</name></expr></argument>,

                                  <argument pos:start="127:35" pos:end="127:38"><expr pos:start="127:35" pos:end="127:38"><name pos:start="127:35" pos:end="127:38">NULL</name></expr></argument>, <argument pos:start="127:41" pos:end="127:44"><expr pos:start="127:41" pos:end="127:44"><name pos:start="127:41" pos:end="127:44">NULL</name></expr></argument>, <argument pos:start="127:47" pos:end="127:47"><expr pos:start="127:47" pos:end="127:47"><name pos:start="127:47" pos:end="127:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
