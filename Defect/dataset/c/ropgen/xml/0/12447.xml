<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12447.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">PCIDevice</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:42">qemu_pci_hot_add_storage</name><parameter_list pos:start="1:43" pos:end="5:60">(<parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:50">Monitor</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">mon</name></decl></parameter>,

                                           <parameter pos:start="3:44" pos:end="3:62"><decl pos:start="3:44" pos:end="3:62"><type pos:start="3:44" pos:end="3:62"><specifier pos:start="3:44" pos:end="3:48">const</specifier> <name pos:start="3:50" pos:end="3:53">char</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:62">devaddr</name></decl></parameter>,

                                           <parameter pos:start="5:44" pos:end="5:59"><decl pos:start="5:44" pos:end="5:59"><type pos:start="5:44" pos:end="5:59"><specifier pos:start="5:44" pos:end="5:48">const</specifier> <name pos:start="5:50" pos:end="5:53">char</name> <modifier pos:start="5:55" pos:end="5:55">*</modifier></type><name pos:start="5:56" pos:end="5:59">opts</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="107:1">{<block_content pos:start="9:5" pos:end="105:15">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">PCIDevice</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:18">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">DriveInfo</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:20">dinfo</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">type</name> <init pos:start="13:14" pos:end="13:17">= <expr pos:start="13:16" pos:end="13:17"><operator pos:start="13:16" pos:end="13:16">-</operator><literal type="number" pos:start="13:17" pos:end="13:17">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:17"><name pos:start="15:10" pos:end="15:12">buf</name><index pos:start="15:13" pos:end="15:17">[<expr pos:start="15:14" pos:end="15:16"><literal type="number" pos:start="15:14" pos:end="15:16">128</literal></expr>]</index></name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="43:5"><if pos:start="19:5" pos:end="37:5">if <condition pos:start="19:8" pos:end="19:54">(<expr pos:start="19:9" pos:end="19:53"><call pos:start="19:9" pos:end="19:53"><name pos:start="19:9" pos:end="19:23">get_param_value</name><argument_list pos:start="19:24" pos:end="19:53">(<argument pos:start="19:25" pos:end="19:27"><expr pos:start="19:25" pos:end="19:27"><name pos:start="19:25" pos:end="19:27">buf</name></expr></argument>, <argument pos:start="19:30" pos:end="19:40"><expr pos:start="19:30" pos:end="19:40"><sizeof pos:start="19:30" pos:end="19:40">sizeof<argument_list pos:start="19:36" pos:end="19:40">(<argument pos:start="19:37" pos:end="19:39"><expr pos:start="19:37" pos:end="19:39"><name pos:start="19:37" pos:end="19:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="19:43" pos:end="19:46"><expr pos:start="19:43" pos:end="19:46"><literal type="string" pos:start="19:43" pos:end="19:46">"if"</literal></expr></argument>, <argument pos:start="19:49" pos:end="19:52"><expr pos:start="19:49" pos:end="19:52"><name pos:start="19:49" pos:end="19:52">opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:56" pos:end="37:5">{<block_content pos:start="21:9" pos:end="35:9">

        <if_stmt pos:start="21:9" pos:end="35:9"><if pos:start="21:9" pos:end="23:27">if <condition pos:start="21:12" pos:end="21:33">(<expr pos:start="21:13" pos:end="21:32"><operator pos:start="21:13" pos:end="21:13">!</operator><call pos:start="21:14" pos:end="21:32"><name pos:start="21:14" pos:end="21:19">strcmp</name><argument_list pos:start="21:20" pos:end="21:32">(<argument pos:start="21:21" pos:end="21:23"><expr pos:start="21:21" pos:end="21:23"><name pos:start="21:21" pos:end="21:23">buf</name></expr></argument>, <argument pos:start="21:26" pos:end="21:31"><expr pos:start="21:26" pos:end="21:31"><literal type="string" pos:start="21:26" pos:end="21:31">"scsi"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:27"><block_content pos:start="23:13" pos:end="23:27">

            <expr_stmt pos:start="23:13" pos:end="23:27"><expr pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:16">type</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:26">IF_SCSI</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="25:9" pos:end="29:9">else if <condition pos:start="25:17" pos:end="25:40">(<expr pos:start="25:18" pos:end="25:39"><operator pos:start="25:18" pos:end="25:18">!</operator><call pos:start="25:19" pos:end="25:39"><name pos:start="25:19" pos:end="25:24">strcmp</name><argument_list pos:start="25:25" pos:end="25:39">(<argument pos:start="25:26" pos:end="25:28"><expr pos:start="25:26" pos:end="25:28"><name pos:start="25:26" pos:end="25:28">buf</name></expr></argument>, <argument pos:start="25:31" pos:end="25:38"><expr pos:start="25:31" pos:end="25:38"><literal type="string" pos:start="25:31" pos:end="25:38">"virtio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:42" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:29">

            <expr_stmt pos:start="27:13" pos:end="27:29"><expr pos:start="27:13" pos:end="27:28"><name pos:start="27:13" pos:end="27:16">type</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <name pos:start="27:20" pos:end="27:28">IF_VIRTIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="35:9">else <block pos:start="29:16" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:24">

            <expr_stmt pos:start="31:13" pos:end="31:81"><expr pos:start="31:13" pos:end="31:80"><call pos:start="31:13" pos:end="31:80"><name pos:start="31:13" pos:end="31:26">monitor_printf</name><argument_list pos:start="31:27" pos:end="31:80">(<argument pos:start="31:28" pos:end="31:30"><expr pos:start="31:28" pos:end="31:30"><name pos:start="31:28" pos:end="31:30">mon</name></expr></argument>, <argument pos:start="31:33" pos:end="31:74"><expr pos:start="31:33" pos:end="31:74"><literal type="string" pos:start="31:33" pos:end="31:74">"type %s not a hotpluggable PCI device.\n"</literal></expr></argument>, <argument pos:start="31:77" pos:end="31:79"><expr pos:start="31:77" pos:end="31:79"><name pos:start="31:77" pos:end="31:79">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="33:13" pos:end="33:24">return <expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="43:5">else <block pos:start="37:12" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:20">

        <expr_stmt pos:start="39:9" pos:end="39:50"><expr pos:start="39:9" pos:end="39:49"><call pos:start="39:9" pos:end="39:49"><name pos:start="39:9" pos:end="39:22">monitor_printf</name><argument_list pos:start="39:23" pos:end="39:49">(<argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:26">mon</name></expr></argument>, <argument pos:start="39:29" pos:end="39:48"><expr pos:start="39:29" pos:end="39:48"><literal type="string" pos:start="39:29" pos:end="39:48">"no if= specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:20">return <expr pos:start="41:16" pos:end="41:19"><name pos:start="41:16" pos:end="41:19">NULL</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="47:5" pos:end="67:5"><if pos:start="47:5" pos:end="63:5">if <condition pos:start="47:8" pos:end="47:56">(<expr pos:start="47:9" pos:end="47:55"><call pos:start="47:9" pos:end="47:55"><name pos:start="47:9" pos:end="47:23">get_param_value</name><argument_list pos:start="47:24" pos:end="47:55">(<argument pos:start="47:25" pos:end="47:27"><expr pos:start="47:25" pos:end="47:27"><name pos:start="47:25" pos:end="47:27">buf</name></expr></argument>, <argument pos:start="47:30" pos:end="47:40"><expr pos:start="47:30" pos:end="47:40"><sizeof pos:start="47:30" pos:end="47:40">sizeof<argument_list pos:start="47:36" pos:end="47:40">(<argument pos:start="47:37" pos:end="47:39"><expr pos:start="47:37" pos:end="47:39"><name pos:start="47:37" pos:end="47:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="47:43" pos:end="47:48"><expr pos:start="47:43" pos:end="47:48"><literal type="string" pos:start="47:43" pos:end="47:48">"file"</literal></expr></argument>, <argument pos:start="47:51" pos:end="47:54"><expr pos:start="47:51" pos:end="47:54"><name pos:start="47:51" pos:end="47:54">opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:58" pos:end="63:5">{<block_content pos:start="49:9" pos:end="61:9">

        <expr_stmt pos:start="49:9" pos:end="49:37"><expr pos:start="49:9" pos:end="49:36"><name pos:start="49:9" pos:end="49:13">dinfo</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <call pos:start="49:17" pos:end="49:36"><name pos:start="49:17" pos:end="49:30">add_init_drive</name><argument_list pos:start="49:31" pos:end="49:36">(<argument pos:start="49:32" pos:end="49:35"><expr pos:start="49:32" pos:end="49:35"><name pos:start="49:32" pos:end="49:35">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="53:24"><if pos:start="51:9" pos:end="53:24">if <condition pos:start="51:12" pos:end="51:19">(<expr pos:start="51:13" pos:end="51:18"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:18">dinfo</name></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:24"><block_content pos:start="53:13" pos:end="53:24">

            <return pos:start="53:13" pos:end="53:24">return <expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:27">(<expr pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:17">dinfo</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:26">devaddr</name></name></expr>)</condition> <block pos:start="55:29" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:24">

            <expr_stmt pos:start="57:13" pos:end="57:66"><expr pos:start="57:13" pos:end="57:65"><call pos:start="57:13" pos:end="57:65"><name pos:start="57:13" pos:end="57:26">monitor_printf</name><argument_list pos:start="57:27" pos:end="57:65">(<argument pos:start="57:28" pos:end="57:30"><expr pos:start="57:28" pos:end="57:30"><name pos:start="57:28" pos:end="57:30">mon</name></expr></argument>, <argument pos:start="57:33" pos:end="57:64"><expr pos:start="57:33" pos:end="57:64"><literal type="string" pos:start="57:33" pos:end="57:64">"Parameter addr not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:24">return <expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="67:5">else <block pos:start="63:12" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:21">

        <expr_stmt pos:start="65:9" pos:end="65:21"><expr pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:13">dinfo</name> <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:20">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <switch pos:start="71:5" pos:end="99:5">switch <condition pos:start="71:12" pos:end="71:17">(<expr pos:start="71:13" pos:end="71:16"><name pos:start="71:13" pos:end="71:16">type</name></expr>)</condition> <block pos:start="71:19" pos:end="99:5">{<block_content pos:start="73:5" pos:end="97:19">

    <case pos:start="73:5" pos:end="73:17">case <expr pos:start="73:10" pos:end="73:16"><name pos:start="73:10" pos:end="73:16">IF_SCSI</name></expr>:</case>

        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:11">dev</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:47"><name pos:start="75:15" pos:end="75:24">pci_create</name><argument_list pos:start="75:25" pos:end="75:47">(<argument pos:start="75:26" pos:end="75:37"><expr pos:start="75:26" pos:end="75:37"><literal type="string" pos:start="75:26" pos:end="75:37">"lsi53c895a"</literal></expr></argument>, <argument pos:start="75:40" pos:end="75:46"><expr pos:start="75:40" pos:end="75:46"><name pos:start="75:40" pos:end="75:46">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:19">case <expr pos:start="79:10" pos:end="79:18"><name pos:start="79:10" pos:end="79:18">IF_VIRTIO</name></expr>:</case>

        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:19">(<expr pos:start="81:13" pos:end="81:18"><operator pos:start="81:13" pos:end="81:13">!</operator><name pos:start="81:14" pos:end="81:18">dinfo</name></expr>)</condition> <block pos:start="81:21" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:24">

            <expr_stmt pos:start="83:13" pos:end="83:76"><expr pos:start="83:13" pos:end="83:75"><call pos:start="83:13" pos:end="83:75"><name pos:start="83:13" pos:end="83:26">monitor_printf</name><argument_list pos:start="83:27" pos:end="83:75">(<argument pos:start="83:28" pos:end="83:30"><expr pos:start="83:28" pos:end="83:30"><name pos:start="83:28" pos:end="83:30">mon</name></expr></argument>, <argument pos:start="83:33" pos:end="83:74"><expr pos:start="83:33" pos:end="83:74"><literal type="string" pos:start="83:33" pos:end="83:74">"virtio requires a backing file/device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="85:13" pos:end="85:24">return <expr pos:start="85:20" pos:end="85:23"><name pos:start="85:20" pos:end="85:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:52"><expr pos:start="89:9" pos:end="89:51"><name pos:start="89:9" pos:end="89:11">dev</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <call pos:start="89:15" pos:end="89:51"><name pos:start="89:15" pos:end="89:24">pci_create</name><argument_list pos:start="89:25" pos:end="89:51">(<argument pos:start="89:26" pos:end="89:41"><expr pos:start="89:26" pos:end="89:41"><literal type="string" pos:start="89:26" pos:end="89:41">"virtio-blk-pci"</literal></expr></argument>, <argument pos:start="89:44" pos:end="89:50"><expr pos:start="89:44" pos:end="89:50"><name pos:start="89:44" pos:end="89:50">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:56"><expr pos:start="91:9" pos:end="91:55"><call pos:start="91:9" pos:end="91:55"><name pos:start="91:9" pos:end="91:27">qdev_prop_set_drive</name><argument_list pos:start="91:28" pos:end="91:55">(<argument pos:start="91:29" pos:end="91:38"><expr pos:start="91:29" pos:end="91:38"><operator pos:start="91:29" pos:end="91:29">&amp;</operator><name pos:start="91:30" pos:end="91:38"><name pos:start="91:30" pos:end="91:32">dev</name><operator pos:start="91:33" pos:end="91:34">-&gt;</operator><name pos:start="91:35" pos:end="91:38">qdev</name></name></expr></argument>, <argument pos:start="91:41" pos:end="91:47"><expr pos:start="91:41" pos:end="91:47"><literal type="string" pos:start="91:41" pos:end="91:47">"drive"</literal></expr></argument>, <argument pos:start="91:50" pos:end="91:54"><expr pos:start="91:50" pos:end="91:54"><name pos:start="91:50" pos:end="91:54">dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <default pos:start="95:5" pos:end="95:12">default:</default>

        <expr_stmt pos:start="97:9" pos:end="97:19"><expr pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:11">dev</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <name pos:start="97:15" pos:end="97:18">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <if_stmt pos:start="101:5" pos:end="103:30"><if pos:start="101:5" pos:end="103:30">if <condition pos:start="101:8" pos:end="101:12">(<expr pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:11">dev</name></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:30"><block_content pos:start="103:9" pos:end="103:30">

        <expr_stmt pos:start="103:9" pos:end="103:30"><expr pos:start="103:9" pos:end="103:29"><call pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:17">qdev_init</name><argument_list pos:start="103:18" pos:end="103:29">(<argument pos:start="103:19" pos:end="103:28"><expr pos:start="103:19" pos:end="103:28"><operator pos:start="103:19" pos:end="103:19">&amp;</operator><name pos:start="103:20" pos:end="103:28"><name pos:start="103:20" pos:end="103:22">dev</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:28">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="105:5" pos:end="105:15">return <expr pos:start="105:12" pos:end="105:14"><name pos:start="105:12" pos:end="105:14">dev</name></expr>;</return>

</block_content>}</block></function>
</unit>
