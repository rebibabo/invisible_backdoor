<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20408.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">pl050_write</name><parameter_list pos:start="1:24" pos:end="3:54">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:51"><decl pos:start="1:39" pos:end="1:51"><type pos:start="1:39" pos:end="1:51"><name pos:start="1:39" pos:end="1:44">hwaddr</name></type> <name pos:start="1:46" pos:end="1:51">offset</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:38"><decl pos:start="3:25" pos:end="3:38"><type pos:start="3:25" pos:end="3:38"><name pos:start="3:25" pos:end="3:32">uint64_t</name></type> <name pos:start="3:34" pos:end="3:38">value</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:53"><decl pos:start="3:41" pos:end="3:53"><type pos:start="3:41" pos:end="3:53"><name pos:start="3:41" pos:end="3:48">unsigned</name></type> <name pos:start="3:50" pos:end="3:53">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="51:1">{<block_content pos:start="7:5" pos:end="49:5">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">pl050_state</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:42">= <expr pos:start="7:22" pos:end="7:42"><operator pos:start="7:22" pos:end="7:22">(</operator><name pos:start="7:23" pos:end="7:33">pl050_state</name> <operator pos:start="7:35" pos:end="7:35">*</operator><operator pos:start="7:36" pos:end="7:36">)</operator><name pos:start="7:37" pos:end="7:42">opaque</name></expr></init></decl>;</decl_stmt>

    <switch pos:start="9:5" pos:end="49:5">switch <condition pos:start="9:12" pos:end="9:24">(<expr pos:start="9:13" pos:end="9:23"><name pos:start="9:13" pos:end="9:18">offset</name> <operator pos:start="9:20" pos:end="9:21">&gt;&gt;</operator> <literal type="number" pos:start="9:23" pos:end="9:23">2</literal></expr>)</condition> <block pos:start="9:26" pos:end="49:5">{<block_content pos:start="11:5" pos:end="47:62">

    <case pos:start="11:5" pos:end="11:11">case <expr pos:start="11:10" pos:end="11:10"><literal type="number" pos:start="11:10" pos:end="11:10">0</literal></expr>:</case> <comment type="block" pos:start="11:13" pos:end="11:23">/* KMICR */</comment>

        <expr_stmt pos:start="13:9" pos:end="13:22"><expr pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:13"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:13">cr</name></name> <operator pos:start="13:15" pos:end="13:15">=</operator> <name pos:start="13:17" pos:end="13:21">value</name></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:36"><expr pos:start="15:9" pos:end="15:35"><call pos:start="15:9" pos:end="15:35"><name pos:start="15:9" pos:end="15:20">pl050_update</name><argument_list pos:start="15:21" pos:end="15:35">(<argument pos:start="15:22" pos:end="15:22"><expr pos:start="15:22" pos:end="15:22"><name pos:start="15:22" pos:end="15:22">s</name></expr></argument>, <argument pos:start="15:25" pos:end="15:34"><expr pos:start="15:25" pos:end="15:34"><name pos:start="15:25" pos:end="15:34"><name pos:start="15:25" pos:end="15:25">s</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:34">pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="17:9" pos:end="17:60">/* ??? Need to implement the enable/disable bit.  */</comment>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:11">case <expr pos:start="21:10" pos:end="21:10"><literal type="number" pos:start="21:10" pos:end="21:10">2</literal></expr>:</case> <comment type="block" pos:start="21:13" pos:end="21:25">/* KMIDATA */</comment>

        <comment type="block" pos:start="23:9" pos:end="23:60">/* ??? This should toggle the TX interrupt line.  */</comment>

        <comment type="block" pos:start="25:9" pos:end="25:61">/* ??? This means kbd/mouse can block each other.  */</comment>

        <if_stmt pos:start="27:9" pos:end="35:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:24">(<expr pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:23">is_mouse</name></name></expr>)</condition> <block pos:start="27:26" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:43">

            <expr_stmt pos:start="29:13" pos:end="29:43"><expr pos:start="29:13" pos:end="29:42"><call pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:27">ps2_write_mouse</name><argument_list pos:start="29:28" pos:end="29:42">(<argument pos:start="29:29" pos:end="29:34"><expr pos:start="29:29" pos:end="29:34"><name pos:start="29:29" pos:end="29:34"><name pos:start="29:29" pos:end="29:29">s</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:34">dev</name></name></expr></argument>, <argument pos:start="29:37" pos:end="29:41"><expr pos:start="29:37" pos:end="29:41"><name pos:start="29:37" pos:end="29:41">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="31:11" pos:end="35:9">else <block pos:start="31:16" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:46">

            <expr_stmt pos:start="33:13" pos:end="33:46"><expr pos:start="33:13" pos:end="33:45"><call pos:start="33:13" pos:end="33:45"><name pos:start="33:13" pos:end="33:30">ps2_write_keyboard</name><argument_list pos:start="33:31" pos:end="33:45">(<argument pos:start="33:32" pos:end="33:37"><expr pos:start="33:32" pos:end="33:37"><name pos:start="33:32" pos:end="33:37"><name pos:start="33:32" pos:end="33:32">s</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:37">dev</name></name></expr></argument>, <argument pos:start="33:40" pos:end="33:44"><expr pos:start="33:40" pos:end="33:44"><name pos:start="33:40" pos:end="33:44">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <case pos:start="39:5" pos:end="39:11">case <expr pos:start="39:10" pos:end="39:10"><literal type="number" pos:start="39:10" pos:end="39:10">3</literal></expr>:</case> <comment type="block" pos:start="39:13" pos:end="39:27">/* KMICLKDIV */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:23"><expr pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:14">clk</name></name> <operator pos:start="41:16" pos:end="41:16">=</operator> <name pos:start="41:18" pos:end="41:22">value</name></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    <default pos:start="45:5" pos:end="45:12">default:</default>

        <expr_stmt pos:start="47:9" pos:end="47:62"><expr pos:start="47:9" pos:end="47:61"><call pos:start="47:9" pos:end="47:61"><name pos:start="47:9" pos:end="47:16">hw_error</name><argument_list pos:start="47:17" pos:end="47:61">(<argument pos:start="47:18" pos:end="47:47"><expr pos:start="47:18" pos:end="47:47"><literal type="string" pos:start="47:18" pos:end="47:47">"pl050_write: Bad offset %x\n"</literal></expr></argument>, <argument pos:start="47:50" pos:end="47:60"><expr pos:start="47:50" pos:end="47:60"><operator pos:start="47:50" pos:end="47:50">(</operator><name pos:start="47:51" pos:end="47:53">int</name><operator pos:start="47:54" pos:end="47:54">)</operator><name pos:start="47:55" pos:end="47:60">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
