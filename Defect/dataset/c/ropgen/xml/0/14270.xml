<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14270.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">helper_fcmpo</name><parameter_list pos:start="1:18" pos:end="3:32">(<parameter pos:start="1:19" pos:end="1:34"><decl pos:start="1:19" pos:end="1:34"><type pos:start="1:19" pos:end="1:34"><name pos:start="1:19" pos:end="1:29">CPUPPCState</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:34">env</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:44">uint64_t</name></type> <name pos:start="1:46" pos:end="1:49">arg1</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:64"><decl pos:start="1:52" pos:end="1:64"><type pos:start="1:52" pos:end="1:64"><name pos:start="1:52" pos:end="1:59">uint64_t</name></type> <name pos:start="1:61" pos:end="1:64">arg2</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:31"><decl pos:start="3:19" pos:end="3:31"><type pos:start="3:19" pos:end="3:31"><name pos:start="3:19" pos:end="3:26">uint32_t</name></type> <name pos:start="3:28" pos:end="3:31">crfD</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="69:1">{<block_content pos:start="7:5" pos:end="67:5">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:15">CPU_DoubleU</name></type> <name pos:start="7:17" pos:end="7:21">farg1</name></decl>, <decl pos:start="7:24" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:15"/><name pos:start="7:24" pos:end="7:28">farg2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">ret</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:20"><expr pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:9">farg1</name><operator pos:start="13:10" pos:end="13:10">.</operator><name pos:start="13:11" pos:end="13:12">ll</name></name> <operator pos:start="13:14" pos:end="13:14">=</operator> <name pos:start="13:16" pos:end="13:19">arg1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:20"><expr pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:9">farg2</name><operator pos:start="15:10" pos:end="15:10">.</operator><name pos:start="15:11" pos:end="15:12">ll</name></name> <operator pos:start="15:14" pos:end="15:14">=</operator> <name pos:start="15:16" pos:end="15:19">arg2</name></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="37:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="21:46">(<expr pos:start="19:9" pos:end="21:45"><call pos:start="19:9" pos:end="21:45"><name pos:start="19:9" pos:end="19:16">unlikely</name><argument_list pos:start="19:17" pos:end="21:45">(<argument pos:start="19:18" pos:end="21:44"><expr pos:start="19:18" pos:end="21:44"><call pos:start="19:18" pos:end="19:44"><name pos:start="19:18" pos:end="19:35">float64_is_any_nan</name><argument_list pos:start="19:36" pos:end="19:44">(<argument pos:start="19:37" pos:end="19:43"><expr pos:start="19:37" pos:end="19:43"><name pos:start="19:37" pos:end="19:43"><name pos:start="19:37" pos:end="19:41">farg1</name><operator pos:start="19:42" pos:end="19:42">.</operator><name pos:start="19:43" pos:end="19:43">d</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:46" pos:end="19:47">||</operator>

                 <call pos:start="21:18" pos:end="21:44"><name pos:start="21:18" pos:end="21:35">float64_is_any_nan</name><argument_list pos:start="21:36" pos:end="21:44">(<argument pos:start="21:37" pos:end="21:43"><expr pos:start="21:37" pos:end="21:43"><name pos:start="21:37" pos:end="21:43"><name pos:start="21:37" pos:end="21:41">farg2</name><operator pos:start="21:42" pos:end="21:42">.</operator><name pos:start="21:43" pos:end="21:43">d</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:48" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:21">

        <expr_stmt pos:start="23:9" pos:end="23:21"><expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <literal type="number" pos:start="23:15" pos:end="23:20">0x01UL</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="25:7" pos:end="29:5">else if <condition pos:start="25:15" pos:end="25:61">(<expr pos:start="25:16" pos:end="25:60"><call pos:start="25:16" pos:end="25:60"><name pos:start="25:16" pos:end="25:25">float64_lt</name><argument_list pos:start="25:26" pos:end="25:60">(<argument pos:start="25:27" pos:end="25:33"><expr pos:start="25:27" pos:end="25:33"><name pos:start="25:27" pos:end="25:33"><name pos:start="25:27" pos:end="25:31">farg1</name><operator pos:start="25:32" pos:end="25:32">.</operator><name pos:start="25:33" pos:end="25:33">d</name></name></expr></argument>, <argument pos:start="25:36" pos:end="25:42"><expr pos:start="25:36" pos:end="25:42"><name pos:start="25:36" pos:end="25:42"><name pos:start="25:36" pos:end="25:40">farg2</name><operator pos:start="25:41" pos:end="25:41">.</operator><name pos:start="25:42" pos:end="25:42">d</name></name></expr></argument>, <argument pos:start="25:45" pos:end="25:59"><expr pos:start="25:45" pos:end="25:59"><operator pos:start="25:45" pos:end="25:45">&amp;</operator><name pos:start="25:46" pos:end="25:59"><name pos:start="25:46" pos:end="25:48">env</name><operator pos:start="25:49" pos:end="25:50">-&gt;</operator><name pos:start="25:51" pos:end="25:59">fp_status</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:63" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:21">

        <expr_stmt pos:start="27:9" pos:end="27:21"><expr pos:start="27:9" pos:end="27:20"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <literal type="number" pos:start="27:15" pos:end="27:20">0x08UL</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="29:7" pos:end="33:5">else if <condition pos:start="29:15" pos:end="29:62">(<expr pos:start="29:16" pos:end="29:61"><operator pos:start="29:16" pos:end="29:16">!</operator><call pos:start="29:17" pos:end="29:61"><name pos:start="29:17" pos:end="29:26">float64_le</name><argument_list pos:start="29:27" pos:end="29:61">(<argument pos:start="29:28" pos:end="29:34"><expr pos:start="29:28" pos:end="29:34"><name pos:start="29:28" pos:end="29:34"><name pos:start="29:28" pos:end="29:32">farg1</name><operator pos:start="29:33" pos:end="29:33">.</operator><name pos:start="29:34" pos:end="29:34">d</name></name></expr></argument>, <argument pos:start="29:37" pos:end="29:43"><expr pos:start="29:37" pos:end="29:43"><name pos:start="29:37" pos:end="29:43"><name pos:start="29:37" pos:end="29:41">farg2</name><operator pos:start="29:42" pos:end="29:42">.</operator><name pos:start="29:43" pos:end="29:43">d</name></name></expr></argument>, <argument pos:start="29:46" pos:end="29:60"><expr pos:start="29:46" pos:end="29:60"><operator pos:start="29:46" pos:end="29:46">&amp;</operator><name pos:start="29:47" pos:end="29:60"><name pos:start="29:47" pos:end="29:49">env</name><operator pos:start="29:50" pos:end="29:51">-&gt;</operator><name pos:start="29:52" pos:end="29:60">fp_status</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:64" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:21">

        <expr_stmt pos:start="31:9" pos:end="31:21"><expr pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <literal type="number" pos:start="31:15" pos:end="31:20">0x04UL</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="37:5">else <block pos:start="33:12" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:21">

        <expr_stmt pos:start="35:9" pos:end="35:21"><expr pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <literal type="number" pos:start="35:15" pos:end="35:20">0x02UL</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:40"><expr pos:start="41:5" pos:end="41:39"><name pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:7">env</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:14">fpscr</name></name> <operator pos:start="41:16" pos:end="41:17">&amp;=</operator> <operator pos:start="41:19" pos:end="41:19">~</operator><operator pos:start="41:20" pos:end="41:20">(</operator><literal type="number" pos:start="41:21" pos:end="41:24">0x0F</literal> <operator pos:start="41:26" pos:end="41:27">&lt;&lt;</operator> <name pos:start="41:29" pos:end="41:38">FPSCR_FPRF</name><operator pos:start="41:39" pos:end="41:39">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:36"><expr pos:start="43:5" pos:end="43:35"><name pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:7">env</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:14">fpscr</name></name> <operator pos:start="43:16" pos:end="43:17">|=</operator> <name pos:start="43:19" pos:end="43:21">ret</name> <operator pos:start="43:23" pos:end="43:24">&lt;&lt;</operator> <name pos:start="43:26" pos:end="43:35">FPSCR_FPRF</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:7">env</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:12">crf</name><index pos:start="45:13" pos:end="45:18">[<expr pos:start="45:14" pos:end="45:17"><name pos:start="45:14" pos:end="45:17">crfD</name></expr>]</index></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:24">ret</name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="67:5"><if pos:start="47:5" pos:end="67:5">if <condition pos:start="47:8" pos:end="47:32">(<expr pos:start="47:9" pos:end="47:31"><call pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:16">unlikely</name><argument_list pos:start="47:17" pos:end="47:31">(<argument pos:start="47:18" pos:end="47:30"><expr pos:start="47:18" pos:end="47:30"><name pos:start="47:18" pos:end="47:20">ret</name> <operator pos:start="47:22" pos:end="47:23">==</operator> <literal type="number" pos:start="47:25" pos:end="47:30">0x01UL</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:34" pos:end="67:5">{<block_content pos:start="49:9" pos:end="65:9">

        <if_stmt pos:start="49:9" pos:end="65:9"><if pos:start="49:9" pos:end="59:9">if <condition pos:start="49:12" pos:end="51:46">(<expr pos:start="49:13" pos:end="51:45"><call pos:start="49:13" pos:end="49:45"><name pos:start="49:13" pos:end="49:36">float64_is_signaling_nan</name><argument_list pos:start="49:37" pos:end="49:45">(<argument pos:start="49:38" pos:end="49:44"><expr pos:start="49:38" pos:end="49:44"><name pos:start="49:38" pos:end="49:44"><name pos:start="49:38" pos:end="49:42">farg1</name><operator pos:start="49:43" pos:end="49:43">.</operator><name pos:start="49:44" pos:end="49:44">d</name></name></expr></argument>)</argument_list></call> <operator pos:start="49:47" pos:end="49:48">||</operator>

            <call pos:start="51:13" pos:end="51:45"><name pos:start="51:13" pos:end="51:36">float64_is_signaling_nan</name><argument_list pos:start="51:37" pos:end="51:45">(<argument pos:start="51:38" pos:end="51:44"><expr pos:start="51:38" pos:end="51:44"><name pos:start="51:38" pos:end="51:44"><name pos:start="51:38" pos:end="51:42">farg2</name><operator pos:start="51:43" pos:end="51:43">.</operator><name pos:start="51:44" pos:end="51:44">d</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:48" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:56">

            <comment type="block" pos:start="53:13" pos:end="53:33">/* sNaN comparison */</comment>

            <expr_stmt pos:start="55:13" pos:end="57:56"><expr pos:start="55:13" pos:end="57:55"><call pos:start="55:13" pos:end="57:55"><name pos:start="55:13" pos:end="55:33">fload_invalid_op_excp</name><argument_list pos:start="55:34" pos:end="57:55">(<argument pos:start="55:35" pos:end="55:37"><expr pos:start="55:35" pos:end="55:37"><name pos:start="55:35" pos:end="55:37">env</name></expr></argument>, <argument pos:start="55:40" pos:end="57:54"><expr pos:start="55:40" pos:end="57:54"><name pos:start="55:40" pos:end="55:61">POWERPC_EXCP_FP_VXSNAN</name> <operator pos:start="55:63" pos:end="55:63">|</operator>

                                  <name pos:start="57:35" pos:end="57:54">POWERPC_EXCP_FP_VXVC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="65:9">else <block pos:start="59:16" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:61">

            <comment type="block" pos:start="61:13" pos:end="61:33">/* qNaN comparison */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:61"><expr pos:start="63:13" pos:end="63:60"><call pos:start="63:13" pos:end="63:60"><name pos:start="63:13" pos:end="63:33">fload_invalid_op_excp</name><argument_list pos:start="63:34" pos:end="63:60">(<argument pos:start="63:35" pos:end="63:37"><expr pos:start="63:35" pos:end="63:37"><name pos:start="63:35" pos:end="63:37">env</name></expr></argument>, <argument pos:start="63:40" pos:end="63:59"><expr pos:start="63:40" pos:end="63:59"><name pos:start="63:40" pos:end="63:59">POWERPC_EXCP_FP_VXVC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
