<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24595.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">long</name></type> <name pos:start="1:6" pos:end="1:17">do_sigreturn</name><parameter_list pos:start="1:18" pos:end="1:37">(<parameter pos:start="1:19" pos:end="1:36"><decl pos:start="1:19" pos:end="1:36"><type pos:start="1:19" pos:end="1:32"><name pos:start="1:19" pos:end="1:30">CPUMIPSState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">regs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:13">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:19">sigframe</name></name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:26">frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">abi_ulong</name></type> <name pos:start="7:15" pos:end="7:24">frame_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">sigset_t</name></type> <name pos:start="9:14" pos:end="9:20">blocked</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:19">target_sigset_t</name></type> <name pos:start="11:21" pos:end="11:30">target_set</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



<cpp:if pos:start="17:1" pos:end="17:25">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:25"><call pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:11">defined</name><argument_list pos:start="17:12" pos:end="17:25">(<argument pos:start="17:13" pos:end="17:24"><expr pos:start="17:13" pos:end="17:24"><name pos:start="17:13" pos:end="17:24">DEBUG_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="19:5" pos:end="22:0"><expr pos:start="19:5" pos:end="19:37"><call pos:start="19:5" pos:end="19:37"><name pos:start="19:5" pos:end="19:11">fprintf</name><argument_list pos:start="19:12" pos:end="19:37">(<argument pos:start="19:13" pos:end="19:18"><expr pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:18">stderr</name></expr></argument>, <argument pos:start="19:21" pos:end="19:36"><expr pos:start="19:21" pos:end="19:36"><literal type="string" pos:start="19:21" pos:end="19:36">"do_sigreturn\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="23:5" pos:end="23:41"><expr pos:start="23:5" pos:end="23:40"><name pos:start="23:5" pos:end="23:14">frame_addr</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <name pos:start="23:18" pos:end="23:40"><name pos:start="23:18" pos:end="23:21">regs</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:32">active_tc</name><operator pos:start="23:33" pos:end="23:33">.</operator><name pos:start="23:34" pos:end="23:36">gpr</name><index pos:start="23:37" pos:end="23:40">[<expr pos:start="23:38" pos:end="23:39"><literal type="number" pos:start="23:38" pos:end="23:39">29</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:22"><if pos:start="25:5" pos:end="27:22">if <condition pos:start="25:8" pos:end="25:61">(<expr pos:start="25:9" pos:end="25:60"><operator pos:start="25:9" pos:end="25:9">!</operator><call pos:start="25:10" pos:end="25:60"><name pos:start="25:10" pos:end="25:25">lock_user_struct</name><argument_list pos:start="25:26" pos:end="25:60">(<argument pos:start="25:27" pos:end="25:37"><expr pos:start="25:27" pos:end="25:37"><name pos:start="25:27" pos:end="25:37">VERIFY_READ</name></expr></argument>, <argument pos:start="25:40" pos:end="25:44"><expr pos:start="25:40" pos:end="25:44"><name pos:start="25:40" pos:end="25:44">frame</name></expr></argument>, <argument pos:start="25:47" pos:end="25:56"><expr pos:start="25:47" pos:end="25:56"><name pos:start="25:47" pos:end="25:56">frame_addr</name></expr></argument>, <argument pos:start="25:59" pos:end="25:59"><expr pos:start="25:59" pos:end="25:59"><literal type="number" pos:start="25:59" pos:end="25:59">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:22"><block_content pos:start="27:9" pos:end="27:22">

   	<goto pos:start="27:9" pos:end="27:22">goto <name pos:start="27:14" pos:end="27:21">badframe</name>;</goto></block_content></block></if></if_stmt>



    <for pos:start="31:5" pos:end="37:5">for<control pos:start="31:8" pos:end="31:42">(<init pos:start="31:9" pos:end="31:14"><expr pos:start="31:9" pos:end="31:13"><name pos:start="31:9" pos:end="31:9">i</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <literal type="number" pos:start="31:13" pos:end="31:13">0</literal></expr>;</init> <condition pos:start="31:16" pos:end="31:37"><expr pos:start="31:16" pos:end="31:36"><name pos:start="31:16" pos:end="31:16">i</name> <operator pos:start="31:18" pos:end="31:18">&lt;</operator> <name pos:start="31:20" pos:end="31:36">TARGET_NSIG_WORDS</name></expr>;</condition> <incr pos:start="31:39" pos:end="31:41"><expr pos:start="31:39" pos:end="31:41"><name pos:start="31:39" pos:end="31:39">i</name><operator pos:start="31:40" pos:end="31:41">++</operator></expr></incr>)</control> <block pos:start="31:44" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:26">

   	<if_stmt pos:start="33:9" pos:end="35:26"><if pos:start="33:9" pos:end="35:26">if<condition pos:start="33:11" pos:end="33:65">(<expr pos:start="33:12" pos:end="33:64"><call pos:start="33:12" pos:end="33:64"><name pos:start="33:12" pos:end="33:21">__get_user</name><argument_list pos:start="33:22" pos:end="33:64">(<argument pos:start="33:23" pos:end="33:39"><expr pos:start="33:23" pos:end="33:39"><name pos:start="33:23" pos:end="33:39"><name pos:start="33:23" pos:end="33:32">target_set</name><operator pos:start="33:33" pos:end="33:33">.</operator><name pos:start="33:34" pos:end="33:36">sig</name><index pos:start="33:37" pos:end="33:39">[<expr pos:start="33:38" pos:end="33:38"><name pos:start="33:38" pos:end="33:38">i</name></expr>]</index></name></expr></argument>, <argument pos:start="33:42" pos:end="33:63"><expr pos:start="33:42" pos:end="33:63"><operator pos:start="33:42" pos:end="33:42">&amp;</operator><name pos:start="33:43" pos:end="33:63"><name pos:start="33:43" pos:end="33:47">frame</name><operator pos:start="33:48" pos:end="33:49">-&gt;</operator><name pos:start="33:50" pos:end="33:56">sf_mask</name><operator pos:start="33:57" pos:end="33:57">.</operator><name pos:start="33:58" pos:end="33:60">sig</name><index pos:start="33:61" pos:end="33:63">[<expr pos:start="33:62" pos:end="33:62"><name pos:start="33:62" pos:end="33:62">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:26"><block_content pos:start="35:13" pos:end="35:26">

	    <goto pos:start="35:13" pos:end="35:26">goto <name pos:start="35:18" pos:end="35:25">badframe</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="41:5" pos:end="41:58"><expr pos:start="41:5" pos:end="41:57"><call pos:start="41:5" pos:end="41:57"><name pos:start="41:5" pos:end="41:34">target_to_host_sigset_internal</name><argument_list pos:start="41:35" pos:end="41:57">(<argument pos:start="41:36" pos:end="41:43"><expr pos:start="41:36" pos:end="41:43"><operator pos:start="41:36" pos:end="41:36">&amp;</operator><name pos:start="41:37" pos:end="41:43">blocked</name></expr></argument>, <argument pos:start="41:46" pos:end="41:56"><expr pos:start="41:46" pos:end="41:56"><operator pos:start="41:46" pos:end="41:46">&amp;</operator><name pos:start="41:47" pos:end="41:56">target_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:45"><expr pos:start="43:5" pos:end="43:44"><call pos:start="43:5" pos:end="43:44"><name pos:start="43:5" pos:end="43:15">sigprocmask</name><argument_list pos:start="43:16" pos:end="43:44">(<argument pos:start="43:17" pos:end="43:27"><expr pos:start="43:17" pos:end="43:27"><name pos:start="43:17" pos:end="43:27">SIG_SETMASK</name></expr></argument>, <argument pos:start="43:30" pos:end="43:37"><expr pos:start="43:30" pos:end="43:37"><operator pos:start="43:30" pos:end="43:30">&amp;</operator><name pos:start="43:31" pos:end="43:37">blocked</name></expr></argument>, <argument pos:start="43:40" pos:end="43:43"><expr pos:start="43:40" pos:end="43:43"><name pos:start="43:40" pos:end="43:43">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="74:0"><if pos:start="47:5" pos:end="74:0">if <condition pos:start="47:8" pos:end="47:48">(<expr pos:start="47:9" pos:end="47:47"><call pos:start="47:9" pos:end="47:47"><name pos:start="47:9" pos:end="47:26">restore_sigcontext</name><argument_list pos:start="47:27" pos:end="47:47">(<argument pos:start="47:28" pos:end="47:31"><expr pos:start="47:28" pos:end="47:31"><name pos:start="47:28" pos:end="47:31">regs</name></expr></argument>, <argument pos:start="47:34" pos:end="47:46"><expr pos:start="47:34" pos:end="47:46"><operator pos:start="47:34" pos:end="47:34">&amp;</operator><name pos:start="47:35" pos:end="47:46"><name pos:start="47:35" pos:end="47:39">frame</name><operator pos:start="47:40" pos:end="47:41">-&gt;</operator><name pos:start="47:42" pos:end="47:46">sf_sc</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="74:0"><block_content pos:start="49:9" pos:end="74:0">

   	<goto pos:start="49:9" pos:end="74:0">goto <name pos:start="49:14" pos:end="49:21">badframe</name>;</goto></block_content></block></if></if_stmt>



<cpp:if pos:start="53:1" pos:end="53:5">#<cpp:directive pos:start="53:2" pos:end="53:3">if</cpp:directive> <expr pos:start="53:5" pos:end="53:5"><literal type="number" pos:start="53:5" pos:end="53:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="55:5" pos:end="59:7">/*

     * Don't let your children do this ...

     */</comment>

    __asm__ __volatile__(

   	"move\t$29, %0\n\t"

   	"j\tsyscall_exit"

   	:<comment type="block" pos:start="67:10" pos:end="67:25">/* no outputs */</comment>

   	:"r" (&amp;regs));

    <comment type="block" pos:start="71:5" pos:end="71:19">/* Unreached */</comment>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="77:5" pos:end="77:39"><expr pos:start="77:5" pos:end="77:38"><name pos:start="77:5" pos:end="77:22"><name pos:start="77:5" pos:end="77:8">regs</name><operator pos:start="77:9" pos:end="77:10">-&gt;</operator><name pos:start="77:11" pos:end="77:19">active_tc</name><operator pos:start="77:20" pos:end="77:20">.</operator><name pos:start="77:21" pos:end="77:22">PC</name></name> <operator pos:start="77:24" pos:end="77:24">=</operator> <name pos:start="77:26" pos:end="77:38"><name pos:start="77:26" pos:end="77:29">regs</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:38">CP0_EPC</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:43"><expr pos:start="79:5" pos:end="79:42"><call pos:start="79:5" pos:end="79:42"><name pos:start="79:5" pos:end="79:36">mips_set_hflags_isa_mode_from_pc</name><argument_list pos:start="79:37" pos:end="79:42">(<argument pos:start="79:38" pos:end="79:41"><expr pos:start="79:38" pos:end="79:41"><name pos:start="79:38" pos:end="79:41">regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="81:5" pos:end="83:46">/* I am not sure this is right, but it seems to work

    * maybe a problem with nested signals ? */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:22"><expr pos:start="85:5" pos:end="85:21"><name pos:start="85:5" pos:end="85:17"><name pos:start="85:5" pos:end="85:8">regs</name><operator pos:start="85:9" pos:end="85:10">-&gt;</operator><name pos:start="85:11" pos:end="85:17">CP0_EPC</name></name> <operator pos:start="85:19" pos:end="85:19">=</operator> <literal type="number" pos:start="85:21" pos:end="85:21">0</literal></expr>;</expr_stmt>

    <return pos:start="87:5" pos:end="87:35">return <expr pos:start="87:12" pos:end="87:34"><operator pos:start="87:12" pos:end="87:12">-</operator><name pos:start="87:13" pos:end="87:34">TARGET_QEMU_ESIGRETURN</name></expr>;</return>



<label pos:start="91:1" pos:end="91:9"><name pos:start="91:1" pos:end="91:8">badframe</name>:</label>

    <expr_stmt pos:start="93:5" pos:end="93:43"><expr pos:start="93:5" pos:end="93:42"><call pos:start="93:5" pos:end="93:42"><name pos:start="93:5" pos:end="93:13">force_sig</name><argument_list pos:start="93:14" pos:end="93:42">(<argument pos:start="93:15" pos:end="93:28"><expr pos:start="93:15" pos:end="93:28"><name pos:start="93:15" pos:end="93:28">TARGET_SIGSEGV</name></expr></argument><comment type="block" pos:start="93:29" pos:end="93:41">/*, current*/</comment>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
