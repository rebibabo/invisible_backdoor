<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1659.c" pos:tabs="8"><function pos:start="1:1" pos:end="233:1"><type pos:start="1:1" pos:end="1:12"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:12">float</name></type> <name pos:start="1:14" pos:end="1:31">quantize_band_cost</name><parameter_list pos:start="1:32" pos:end="7:42">(<parameter pos:start="1:33" pos:end="1:55"><decl pos:start="1:33" pos:end="1:55"><type pos:start="1:33" pos:end="1:55"><name pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:38">struct</name> <name pos:start="1:40" pos:end="1:52">AACEncContext</name></name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:72"><decl pos:start="1:58" pos:end="1:72"><type pos:start="1:58" pos:end="1:72"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:68">float</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:72">in</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:51"><decl pos:start="3:33" pos:end="3:51"><type pos:start="3:33" pos:end="3:51"><specifier pos:start="3:33" pos:end="3:37">const</specifier> <name pos:start="3:39" pos:end="3:43">float</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:51">scaled</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:61"><decl pos:start="3:54" pos:end="3:61"><type pos:start="3:54" pos:end="3:61"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:61">size</name></decl></parameter>, <parameter pos:start="3:64" pos:end="3:76"><decl pos:start="3:64" pos:end="3:76"><type pos:start="3:64" pos:end="3:76"><name pos:start="3:64" pos:end="3:66">int</name></type> <name pos:start="3:68" pos:end="3:76">scale_idx</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:38"><decl pos:start="5:33" pos:end="5:38"><type pos:start="5:33" pos:end="5:38"><name pos:start="5:33" pos:end="5:35">int</name></type> <name pos:start="5:37" pos:end="5:38">cb</name></decl></parameter>, <parameter pos:start="5:41" pos:end="5:58"><decl pos:start="5:41" pos:end="5:58"><type pos:start="5:41" pos:end="5:58"><specifier pos:start="5:41" pos:end="5:45">const</specifier> <name pos:start="5:47" pos:end="5:51">float</name></type> <name pos:start="5:53" pos:end="5:58">lambda</name></decl></parameter>, <parameter pos:start="5:61" pos:end="5:77"><decl pos:start="5:61" pos:end="5:77"><type pos:start="5:61" pos:end="5:77"><specifier pos:start="5:61" pos:end="5:65">const</specifier> <name pos:start="5:67" pos:end="5:71">float</name></type> <name pos:start="5:73" pos:end="5:77">uplim</name></decl></parameter>,

                                <parameter pos:start="7:33" pos:end="7:41"><decl pos:start="7:33" pos:end="7:41"><type pos:start="7:33" pos:end="7:41"><name pos:start="7:33" pos:end="7:35">int</name> <modifier pos:start="7:37" pos:end="7:37">*</modifier></type><name pos:start="7:38" pos:end="7:41">bits</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="233:1">{<block_content pos:start="11:5" pos:end="233:1">

    <decl_stmt pos:start="11:5" pos:end="11:88"><decl pos:start="11:5" pos:end="11:87"><type pos:start="11:5" pos:end="11:15"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:15">float</name></type> <name pos:start="11:17" pos:end="11:18">IQ</name> <init pos:start="11:20" pos:end="11:87">= <expr pos:start="11:22" pos:end="11:87"><name pos:start="11:22" pos:end="11:87"><name pos:start="11:22" pos:end="11:38">ff_aac_pow2sf_tab</name><index pos:start="11:39" pos:end="11:87">[<expr pos:start="11:40" pos:end="11:86"><literal type="number" pos:start="11:40" pos:end="11:44">200</literal> <operator pos:start="11:44" pos:end="11:44">+</operator> <name pos:start="11:46" pos:end="11:54">scale_idx</name> <operator pos:start="11:56" pos:end="11:56">-</operator> <name pos:start="11:58" pos:end="11:70">SCALE_ONE_POS</name> <operator pos:start="11:72" pos:end="11:72">+</operator> <name pos:start="11:74" pos:end="11:86">SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:88"><decl pos:start="13:5" pos:end="13:87"><type pos:start="13:5" pos:end="13:15"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:15">float</name></type>  <name pos:start="13:18" pos:end="13:18">Q</name> <init pos:start="13:20" pos:end="13:87">= <expr pos:start="13:22" pos:end="13:87"><name pos:start="13:22" pos:end="13:87"><name pos:start="13:22" pos:end="13:38">ff_aac_pow2sf_tab</name><index pos:start="13:39" pos:end="13:87">[<expr pos:start="13:40" pos:end="13:86"><literal type="number" pos:start="13:40" pos:end="13:44">200</literal> <operator pos:start="13:44" pos:end="13:44">-</operator> <name pos:start="13:46" pos:end="13:54">scale_idx</name> <operator pos:start="13:56" pos:end="13:56">+</operator> <name pos:start="13:58" pos:end="13:70">SCALE_ONE_POS</name> <operator pos:start="13:72" pos:end="13:72">-</operator> <name pos:start="13:74" pos:end="13:86">SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:46"><decl pos:start="15:5" pos:end="15:45"><type pos:start="15:5" pos:end="15:15"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:15">float</name></type> <name pos:start="15:17" pos:end="15:30">CLIPPED_ESCAPE</name> <init pos:start="15:32" pos:end="15:45">= <expr pos:start="15:34" pos:end="15:45"><literal type="number" pos:start="15:34" pos:end="15:42">165140.0f</literal><operator pos:start="15:43" pos:end="15:43">*</operator><name pos:start="15:44" pos:end="15:45">IQ</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">j</name></decl>, <decl pos:start="17:15" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:15">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:9">float</name></type> <name pos:start="19:11" pos:end="19:14">cost</name> <init pos:start="19:16" pos:end="19:18">= <expr pos:start="19:18" pos:end="19:18"><literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:47"><decl pos:start="21:5" pos:end="21:46"><type pos:start="21:5" pos:end="21:13"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:13">int</name></type> <name pos:start="21:15" pos:end="21:17">dim</name> <init pos:start="21:19" pos:end="21:46">= <expr pos:start="21:21" pos:end="21:46"><ternary pos:start="21:21" pos:end="21:46"><condition pos:start="21:21" pos:end="21:40"><expr pos:start="21:21" pos:end="21:38"><name pos:start="21:21" pos:end="21:22">cb</name> <operator pos:start="21:24" pos:end="21:24">&lt;</operator> <name pos:start="21:26" pos:end="21:38">FIRST_PAIR_BT</name></expr> ?</condition><then pos:start="21:42" pos:end="21:42"> <expr pos:start="21:42" pos:end="21:42"><literal type="number" pos:start="21:42" pos:end="21:42">4</literal></expr> </then><else pos:start="21:44" pos:end="21:46">: <expr pos:start="21:46" pos:end="21:46"><literal type="number" pos:start="21:46" pos:end="21:46">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="26:0"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:15">resbits</name> <init pos:start="23:17" pos:end="23:19">= <expr pos:start="23:19" pos:end="23:19"><literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifndef pos:start="25:1" pos:end="25:30">#<cpp:directive pos:start="25:2" pos:end="25:7">ifndef</cpp:directive> <name pos:start="25:9" pos:end="25:30">USE_REALLY_FULL_SEARCH</name></cpp:ifndef>

    <decl_stmt pos:start="27:5" pos:end="27:43"><decl pos:start="27:5" pos:end="27:42"><type pos:start="27:5" pos:end="27:15"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:15">float</name></type>  <name pos:start="27:18" pos:end="27:20">Q34</name> <init pos:start="27:22" pos:end="27:42">= <expr pos:start="27:24" pos:end="27:42"><call pos:start="27:24" pos:end="27:42"><name pos:start="27:24" pos:end="27:28">sqrtf</name><argument_list pos:start="27:29" pos:end="27:42">(<argument pos:start="27:30" pos:end="27:41"><expr pos:start="27:30" pos:end="27:41"><name pos:start="27:30" pos:end="27:30">Q</name> <operator pos:start="27:32" pos:end="27:32">*</operator> <call pos:start="27:34" pos:end="27:41"><name pos:start="27:34" pos:end="27:38">sqrtf</name><argument_list pos:start="27:39" pos:end="27:41">(<argument pos:start="27:40" pos:end="27:40"><expr pos:start="27:40" pos:end="27:40"><name pos:start="27:40" pos:end="27:40">Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:40"><decl pos:start="29:5" pos:end="29:39"><type pos:start="29:5" pos:end="29:13"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:13">int</name></type> <name pos:start="29:15" pos:end="29:19">range</name>  <init pos:start="29:22" pos:end="29:39">= <expr pos:start="29:24" pos:end="29:39"><name pos:start="29:24" pos:end="29:39"><name pos:start="29:24" pos:end="29:35">aac_cb_range</name><index pos:start="29:36" pos:end="29:39">[<expr pos:start="29:37" pos:end="29:38"><name pos:start="29:37" pos:end="29:38">cb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:41"><decl pos:start="31:5" pos:end="31:40"><type pos:start="31:5" pos:end="31:13"><specifier pos:start="31:5" pos:end="31:9">const</specifier> <name pos:start="31:11" pos:end="31:13">int</name></type> <name pos:start="31:15" pos:end="31:20">maxval</name> <init pos:start="31:22" pos:end="31:40">= <expr pos:start="31:24" pos:end="31:40"><name pos:start="31:24" pos:end="31:40"><name pos:start="31:24" pos:end="31:36">aac_cb_maxval</name><index pos:start="31:37" pos:end="31:40">[<expr pos:start="31:38" pos:end="31:39"><name pos:start="31:38" pos:end="31:39">cb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="36:0"><decl pos:start="33:5" pos:end="33:15"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:12">offs</name><index pos:start="33:13" pos:end="33:15">[<expr pos:start="33:14" pos:end="33:14"><literal type="number" pos:start="33:14" pos:end="33:14">4</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="35:8" pos:end="35:35">/* USE_REALLY_FULL_SEARCH */</comment>



    <if_stmt pos:start="39:5" pos:end="54:0"><if pos:start="39:5" pos:end="54:0">if <condition pos:start="39:8" pos:end="39:12">(<expr pos:start="39:9" pos:end="39:11"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:11">cb</name></expr>)</condition> <block pos:start="39:14" pos:end="54:0">{<block_content pos:start="41:9" pos:end="49:20">

        <for pos:start="41:9" pos:end="43:39">for <control pos:start="41:13" pos:end="41:34">(<init pos:start="41:14" pos:end="41:19"><expr pos:start="41:14" pos:end="41:18"><name pos:start="41:14" pos:end="41:14">i</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <literal type="number" pos:start="41:18" pos:end="41:18">0</literal></expr>;</init> <condition pos:start="41:21" pos:end="41:29"><expr pos:start="41:21" pos:end="41:28"><name pos:start="41:21" pos:end="41:21">i</name> <operator pos:start="41:23" pos:end="41:23">&lt;</operator> <name pos:start="41:25" pos:end="41:28">size</name></expr>;</condition> <incr pos:start="41:31" pos:end="41:33"><expr pos:start="41:31" pos:end="41:33"><name pos:start="41:31" pos:end="41:31">i</name><operator pos:start="41:32" pos:end="41:33">++</operator></expr></incr>)</control><block type="pseudo" pos:start="43:13" pos:end="43:39"><block_content pos:start="43:13" pos:end="43:39">

            <expr_stmt pos:start="43:13" pos:end="43:39"><expr pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:16">cost</name> <operator pos:start="43:18" pos:end="43:19">+=</operator> <name pos:start="43:21" pos:end="43:25"><name pos:start="43:21" pos:end="43:22">in</name><index pos:start="43:23" pos:end="43:25">[<expr pos:start="43:24" pos:end="43:24"><name pos:start="43:24" pos:end="43:24">i</name></expr>]</index></name><operator pos:start="43:26" pos:end="43:26">*</operator><name pos:start="43:27" pos:end="43:31"><name pos:start="43:27" pos:end="43:28">in</name><index pos:start="43:29" pos:end="43:31">[<expr pos:start="43:30" pos:end="43:30"><name pos:start="43:30" pos:end="43:30">i</name></expr>]</index></name><operator pos:start="43:32" pos:end="43:32">*</operator><name pos:start="43:33" pos:end="43:38">lambda</name></expr>;</expr_stmt></block_content></block></for>

        <if_stmt pos:start="45:9" pos:end="47:22"><if pos:start="45:9" pos:end="47:22">if <condition pos:start="45:12" pos:end="45:17">(<expr pos:start="45:13" pos:end="45:16"><name pos:start="45:13" pos:end="45:16">bits</name></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:22"><block_content pos:start="47:13" pos:end="47:22">

            <expr_stmt pos:start="47:13" pos:end="47:22"><expr pos:start="47:13" pos:end="47:21"><operator pos:start="47:13" pos:end="47:13">*</operator><name pos:start="47:14" pos:end="47:17">bits</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <literal type="number" pos:start="47:21" pos:end="47:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="49:9" pos:end="49:20">return <expr pos:start="49:16" pos:end="49:19"><name pos:start="49:16" pos:end="49:19">cost</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

<cpp:ifndef pos:start="53:1" pos:end="53:30">#<cpp:directive pos:start="53:2" pos:end="53:7">ifndef</cpp:directive> <name pos:start="53:9" pos:end="53:30">USE_REALLY_FULL_SEARCH</name></cpp:ifndef>

    <expr_stmt pos:start="55:5" pos:end="55:16"><expr pos:start="55:5" pos:end="55:15"><name pos:start="55:5" pos:end="55:11"><name pos:start="55:5" pos:end="55:8">offs</name><index pos:start="55:9" pos:end="55:11">[<expr pos:start="55:10" pos:end="55:10"><literal type="number" pos:start="55:10" pos:end="55:10">0</literal></expr>]</index></name> <operator pos:start="55:13" pos:end="55:13">=</operator> <literal type="number" pos:start="55:15" pos:end="55:15">1</literal></expr>;</expr_stmt>

    <for pos:start="57:5" pos:end="59:34">for <control pos:start="57:9" pos:end="57:29">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">1</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:24"><expr pos:start="57:17" pos:end="57:23"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:23">dim</name></expr>;</condition> <incr pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><name pos:start="57:26" pos:end="57:26">i</name><operator pos:start="57:27" pos:end="57:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="59:9" pos:end="59:34"><block_content pos:start="59:9" pos:end="59:34">

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:12">offs</name><index pos:start="59:13" pos:end="59:15">[<expr pos:start="59:14" pos:end="59:14"><name pos:start="59:14" pos:end="59:14">i</name></expr>]</index></name> <operator pos:start="59:17" pos:end="59:17">=</operator> <name pos:start="59:19" pos:end="59:27"><name pos:start="59:19" pos:end="59:22">offs</name><index pos:start="59:23" pos:end="59:27">[<expr pos:start="59:24" pos:end="59:26"><name pos:start="59:24" pos:end="59:24">i</name><operator pos:start="59:25" pos:end="59:25">-</operator><literal type="number" pos:start="59:26" pos:end="59:26">1</literal></expr>]</index></name><operator pos:start="59:28" pos:end="59:28">*</operator><name pos:start="59:29" pos:end="59:33">range</name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="61:5" pos:end="64:0"><expr pos:start="61:5" pos:end="61:87"><call pos:start="61:5" pos:end="61:87"><name pos:start="61:5" pos:end="61:18">quantize_bands</name><argument_list pos:start="61:19" pos:end="61:87">(<argument pos:start="61:20" pos:end="61:28"><expr pos:start="61:20" pos:end="61:28"><name pos:start="61:20" pos:end="61:28"><name pos:start="61:20" pos:end="61:20">s</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:28">qcoefs</name></name></expr></argument>, <argument pos:start="61:31" pos:end="61:32"><expr pos:start="61:31" pos:end="61:32"><name pos:start="61:31" pos:end="61:32">in</name></expr></argument>, <argument pos:start="61:35" pos:end="61:40"><expr pos:start="61:35" pos:end="61:40"><name pos:start="61:35" pos:end="61:40">scaled</name></expr></argument>, <argument pos:start="61:43" pos:end="61:46"><expr pos:start="61:43" pos:end="61:46"><name pos:start="61:43" pos:end="61:46">size</name></expr></argument>, <argument pos:start="61:49" pos:end="61:51"><expr pos:start="61:49" pos:end="61:51"><name pos:start="61:49" pos:end="61:51">Q34</name></expr></argument>, <argument pos:start="61:54" pos:end="61:78"><expr pos:start="61:54" pos:end="61:78"><operator pos:start="61:54" pos:end="61:54">!</operator><call pos:start="61:55" pos:end="61:78"><name pos:start="61:55" pos:end="61:74">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="61:75" pos:end="61:78">(<argument pos:start="61:76" pos:end="61:77"><expr pos:start="61:76" pos:end="61:77"><name pos:start="61:76" pos:end="61:77">cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:81" pos:end="61:86"><expr pos:start="61:81" pos:end="61:86"><name pos:start="61:81" pos:end="61:86">maxval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="63:8" pos:end="63:35">/* USE_REALLY_FULL_SEARCH */</comment>

    <for pos:start="65:5" pos:end="233:1">for <control pos:start="65:9" pos:end="65:35">(<init pos:start="65:10" pos:end="65:15"><expr pos:start="65:10" pos:end="65:14"><name pos:start="65:10" pos:end="65:10">i</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</init> <condition pos:start="65:17" pos:end="65:25"><expr pos:start="65:17" pos:end="65:24"><name pos:start="65:17" pos:end="65:17">i</name> <operator pos:start="65:19" pos:end="65:19">&lt;</operator> <name pos:start="65:21" pos:end="65:24">size</name></expr>;</condition> <incr pos:start="65:27" pos:end="65:34"><expr pos:start="65:27" pos:end="65:34"><name pos:start="65:27" pos:end="65:27">i</name> <operator pos:start="65:29" pos:end="65:30">+=</operator> <name pos:start="65:32" pos:end="65:34">dim</name></expr></incr>)</control> <block pos:start="65:37" pos:end="233:1">{<block_content pos:start="67:9" pos:end="231:16">

        <decl_stmt pos:start="67:9" pos:end="67:22"><decl pos:start="67:9" pos:end="67:21"><type pos:start="67:9" pos:end="67:13"><name pos:start="67:9" pos:end="67:13">float</name></type> <name pos:start="67:15" pos:end="67:21">mincost</name></decl>;</decl_stmt>

        <decl_stmt pos:start="69:9" pos:end="69:24"><decl pos:start="69:9" pos:end="69:23"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:18">minidx</name>  <init pos:start="69:21" pos:end="69:23">= <expr pos:start="69:23" pos:end="69:23"><literal type="number" pos:start="69:23" pos:end="69:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:24"><decl pos:start="71:9" pos:end="71:23"><type pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">int</name></type> <name pos:start="71:13" pos:end="71:19">minbits</name> <init pos:start="71:21" pos:end="71:23">= <expr pos:start="71:23" pos:end="71:23"><literal type="number" pos:start="71:23" pos:end="71:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="76:0"><decl pos:start="73:9" pos:end="73:24"><type pos:start="73:9" pos:end="73:21"><specifier pos:start="73:9" pos:end="73:13">const</specifier> <name pos:start="73:15" pos:end="73:19">float</name> <modifier pos:start="73:21" pos:end="73:21">*</modifier></type><name pos:start="73:22" pos:end="73:24">vec</name></decl>;</decl_stmt>

<cpp:ifndef pos:start="75:1" pos:end="75:30">#<cpp:directive pos:start="75:2" pos:end="75:7">ifndef</cpp:directive> <name pos:start="75:9" pos:end="75:30">USE_REALLY_FULL_SEARCH</name></cpp:ifndef>

        <expr_stmt pos:start="77:9" pos:end="77:41"><expr pos:start="77:9" pos:end="77:40"><call pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:11">int</name> <argument_list pos:start="77:13" pos:end="77:21">(<argument pos:start="77:14" pos:end="77:20"><expr pos:start="77:14" pos:end="77:20"><operator pos:start="77:14" pos:end="77:14">*</operator><name pos:start="77:15" pos:end="77:20">quants</name></expr></argument>)</argument_list></call><index pos:start="77:22" pos:end="77:24">[<expr pos:start="77:23" pos:end="77:23"><literal type="number" pos:start="77:23" pos:end="77:23">2</literal></expr>]</index> <operator pos:start="77:26" pos:end="77:26">=</operator> <operator pos:start="77:28" pos:end="77:28">&amp;</operator><name pos:start="77:29" pos:end="77:40"><name pos:start="77:29" pos:end="77:29">s</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:37">qcoefs</name><index pos:start="77:38" pos:end="77:40">[<expr pos:start="77:39" pos:end="77:39"><name pos:start="77:39" pos:end="77:39">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:15">mincost</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <literal type="number" pos:start="79:19" pos:end="79:22">0.0f</literal></expr>;</expr_stmt>

        <for pos:start="81:9" pos:end="83:46">for <control pos:start="81:13" pos:end="81:33">(<init pos:start="81:14" pos:end="81:19"><expr pos:start="81:14" pos:end="81:18"><name pos:start="81:14" pos:end="81:14">j</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <literal type="number" pos:start="81:18" pos:end="81:18">0</literal></expr>;</init> <condition pos:start="81:21" pos:end="81:28"><expr pos:start="81:21" pos:end="81:27"><name pos:start="81:21" pos:end="81:21">j</name> <operator pos:start="81:23" pos:end="81:23">&lt;</operator> <name pos:start="81:25" pos:end="81:27">dim</name></expr>;</condition> <incr pos:start="81:30" pos:end="81:32"><expr pos:start="81:30" pos:end="81:32"><name pos:start="81:30" pos:end="81:30">j</name><operator pos:start="81:31" pos:end="81:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="83:13" pos:end="83:46"><block_content pos:start="83:13" pos:end="83:46">

            <expr_stmt pos:start="83:13" pos:end="83:46"><expr pos:start="83:13" pos:end="83:45"><name pos:start="83:13" pos:end="83:19">mincost</name> <operator pos:start="83:21" pos:end="83:22">+=</operator> <name pos:start="83:24" pos:end="83:30"><name pos:start="83:24" pos:end="83:25">in</name><index pos:start="83:26" pos:end="83:30">[<expr pos:start="83:27" pos:end="83:29"><name pos:start="83:27" pos:end="83:27">i</name><operator pos:start="83:28" pos:end="83:28">+</operator><name pos:start="83:29" pos:end="83:29">j</name></expr>]</index></name><operator pos:start="83:31" pos:end="83:31">*</operator><name pos:start="83:32" pos:end="83:38"><name pos:start="83:32" pos:end="83:33">in</name><index pos:start="83:34" pos:end="83:38">[<expr pos:start="83:35" pos:end="83:37"><name pos:start="83:35" pos:end="83:35">i</name><operator pos:start="83:36" pos:end="83:36">+</operator><name pos:start="83:37" pos:end="83:37">j</name></expr>]</index></name><operator pos:start="83:39" pos:end="83:39">*</operator><name pos:start="83:40" pos:end="83:45">lambda</name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="85:9" pos:end="85:51"><expr pos:start="85:9" pos:end="85:50"><name pos:start="85:9" pos:end="85:14">minidx</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <ternary pos:start="85:18" pos:end="85:50"><condition pos:start="85:18" pos:end="85:43"><expr pos:start="85:18" pos:end="85:41"><call pos:start="85:18" pos:end="85:41"><name pos:start="85:18" pos:end="85:37">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="85:38" pos:end="85:41">(<argument pos:start="85:39" pos:end="85:40"><expr pos:start="85:39" pos:end="85:40"><name pos:start="85:39" pos:end="85:40">cb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="85:45" pos:end="85:45"> <expr pos:start="85:45" pos:end="85:45"><literal type="number" pos:start="85:45" pos:end="85:45">0</literal></expr> </then><else pos:start="85:47" pos:end="85:50">: <expr pos:start="85:49" pos:end="85:50"><literal type="number" pos:start="85:49" pos:end="85:50">40</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:53"><expr pos:start="87:9" pos:end="87:52"><name pos:start="87:9" pos:end="87:15">minbits</name> <operator pos:start="87:17" pos:end="87:17">=</operator> <name pos:start="87:19" pos:end="87:52"><name pos:start="87:19" pos:end="87:38">ff_aac_spectral_bits</name><index pos:start="87:39" pos:end="87:44">[<expr pos:start="87:40" pos:end="87:43"><name pos:start="87:40" pos:end="87:41">cb</name><operator pos:start="87:42" pos:end="87:42">-</operator><literal type="number" pos:start="87:43" pos:end="87:43">1</literal></expr>]</index><index pos:start="87:45" pos:end="87:52">[<expr pos:start="87:46" pos:end="87:51"><name pos:start="87:46" pos:end="87:51">minidx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:27"><expr pos:start="89:9" pos:end="89:26"><name pos:start="89:9" pos:end="89:15">mincost</name> <operator pos:start="89:17" pos:end="89:18">+=</operator> <name pos:start="89:20" pos:end="89:26">minbits</name></expr>;</expr_stmt>

        <for pos:start="91:9" pos:end="223:5">for <control pos:start="91:13" pos:end="91:38">(<init pos:start="91:14" pos:end="91:19"><expr pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">j</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>;</init> <condition pos:start="91:21" pos:end="91:33"><expr pos:start="91:21" pos:end="91:32"><name pos:start="91:21" pos:end="91:21">j</name> <operator pos:start="91:23" pos:end="91:23">&lt;</operator> <operator pos:start="91:25" pos:end="91:25">(</operator><literal type="number" pos:start="91:26" pos:end="91:26">1</literal><operator pos:start="91:27" pos:end="91:28">&lt;&lt;</operator><name pos:start="91:29" pos:end="91:31">dim</name><operator pos:start="91:32" pos:end="91:32">)</operator></expr>;</condition> <incr pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><name pos:start="91:35" pos:end="91:35">j</name><operator pos:start="91:36" pos:end="91:37">++</operator></expr></incr>)</control> <block pos:start="91:40" pos:end="223:5">{<block_content pos:start="93:13" pos:end="221:25">

            <decl_stmt pos:start="93:13" pos:end="93:28"><decl pos:start="93:13" pos:end="93:27"><type pos:start="93:13" pos:end="93:17"><name pos:start="93:13" pos:end="93:17">float</name></type> <name pos:start="93:19" pos:end="93:20">rd</name> <init pos:start="93:22" pos:end="93:27">= <expr pos:start="93:24" pos:end="93:27"><literal type="number" pos:start="93:24" pos:end="93:27">0.0f</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="95:13" pos:end="95:24"><decl pos:start="95:13" pos:end="95:23"><type pos:start="95:13" pos:end="95:15"><name pos:start="95:13" pos:end="95:15">int</name></type> <name pos:start="95:17" pos:end="95:23">curbits</name></decl>;</decl_stmt>

            <decl_stmt pos:start="97:13" pos:end="97:59"><decl pos:start="97:13" pos:end="97:58"><type pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">int</name></type> <name pos:start="97:17" pos:end="97:22">curidx</name> <init pos:start="97:24" pos:end="97:58">= <expr pos:start="97:26" pos:end="97:58"><ternary pos:start="97:26" pos:end="97:58"><condition pos:start="97:26" pos:end="97:51"><expr pos:start="97:26" pos:end="97:49"><call pos:start="97:26" pos:end="97:49"><name pos:start="97:26" pos:end="97:45">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="97:46" pos:end="97:49">(<argument pos:start="97:47" pos:end="97:48"><expr pos:start="97:47" pos:end="97:48"><name pos:start="97:47" pos:end="97:48">cb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="97:53" pos:end="97:53"> <expr pos:start="97:53" pos:end="97:53"><literal type="number" pos:start="97:53" pos:end="97:53">0</literal></expr> </then><else pos:start="97:55" pos:end="97:58">: <expr pos:start="97:57" pos:end="97:58"><literal type="number" pos:start="97:57" pos:end="97:58">40</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="99:13" pos:end="99:27"><decl pos:start="99:13" pos:end="99:26"><type pos:start="99:13" pos:end="99:15"><name pos:start="99:13" pos:end="99:15">int</name></type> <name pos:start="99:17" pos:end="99:20">same</name>   <init pos:start="99:24" pos:end="99:26">= <expr pos:start="99:26" pos:end="99:26"><literal type="number" pos:start="99:26" pos:end="99:26">0</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="101:13" pos:end="111:13">for <control pos:start="101:17" pos:end="101:37">(<init pos:start="101:18" pos:end="101:23"><expr pos:start="101:18" pos:end="101:22"><name pos:start="101:18" pos:end="101:18">k</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="number" pos:start="101:22" pos:end="101:22">0</literal></expr>;</init> <condition pos:start="101:25" pos:end="101:32"><expr pos:start="101:25" pos:end="101:31"><name pos:start="101:25" pos:end="101:25">k</name> <operator pos:start="101:27" pos:end="101:27">&lt;</operator> <name pos:start="101:29" pos:end="101:31">dim</name></expr>;</condition> <incr pos:start="101:34" pos:end="101:36"><expr pos:start="101:34" pos:end="101:36"><name pos:start="101:34" pos:end="101:34">k</name><operator pos:start="101:35" pos:end="101:36">++</operator></expr></incr>)</control> <block pos:start="101:39" pos:end="111:13">{<block_content pos:start="103:17" pos:end="109:17">

                <if_stmt pos:start="103:17" pos:end="109:17"><if pos:start="103:17" pos:end="109:17">if <condition pos:start="103:20" pos:end="103:67">(<expr pos:start="103:21" pos:end="103:66"><operator pos:start="103:21" pos:end="103:21">(</operator><name pos:start="103:22" pos:end="103:22">j</name> <operator pos:start="103:24" pos:end="103:24">&amp;</operator> <operator pos:start="103:26" pos:end="103:26">(</operator><literal type="number" pos:start="103:27" pos:end="103:27">1</literal> <operator pos:start="103:29" pos:end="103:30">&lt;&lt;</operator> <name pos:start="103:32" pos:end="103:32">k</name><operator pos:start="103:33" pos:end="103:33">)</operator><operator pos:start="103:34" pos:end="103:34">)</operator> <operator pos:start="103:36" pos:end="103:37">&amp;&amp;</operator> <name pos:start="103:39" pos:end="103:50"><name pos:start="103:39" pos:end="103:44">quants</name><index pos:start="103:45" pos:end="103:47">[<expr pos:start="103:46" pos:end="103:46"><name pos:start="103:46" pos:end="103:46">k</name></expr>]</index><index pos:start="103:48" pos:end="103:50">[<expr pos:start="103:49" pos:end="103:49"><literal type="number" pos:start="103:49" pos:end="103:49">0</literal></expr>]</index></name> <operator pos:start="103:52" pos:end="103:53">==</operator> <name pos:start="103:55" pos:end="103:66"><name pos:start="103:55" pos:end="103:60">quants</name><index pos:start="103:61" pos:end="103:63">[<expr pos:start="103:62" pos:end="103:62"><name pos:start="103:62" pos:end="103:62">k</name></expr>]</index><index pos:start="103:64" pos:end="103:66">[<expr pos:start="103:65" pos:end="103:65"><literal type="number" pos:start="103:65" pos:end="103:65">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="103:69" pos:end="109:17">{<block_content pos:start="105:21" pos:end="107:26">

                    <expr_stmt pos:start="105:21" pos:end="105:29"><expr pos:start="105:21" pos:end="105:28"><name pos:start="105:21" pos:end="105:24">same</name> <operator pos:start="105:26" pos:end="105:26">=</operator> <literal type="number" pos:start="105:28" pos:end="105:28">1</literal></expr>;</expr_stmt>

                    <break pos:start="107:21" pos:end="107:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="113:13" pos:end="115:25"><if pos:start="113:13" pos:end="115:25">if <condition pos:start="113:16" pos:end="113:21">(<expr pos:start="113:17" pos:end="113:20"><name pos:start="113:17" pos:end="113:20">same</name></expr>)</condition><block type="pseudo" pos:start="115:17" pos:end="115:25"><block_content pos:start="115:17" pos:end="115:25">

                <continue pos:start="115:17" pos:end="115:25">continue;</continue></block_content></block></if></if_stmt>

            <for pos:start="117:13" pos:end="119:74">for <control pos:start="117:17" pos:end="117:37">(<init pos:start="117:18" pos:end="117:23"><expr pos:start="117:18" pos:end="117:22"><name pos:start="117:18" pos:end="117:18">k</name> <operator pos:start="117:20" pos:end="117:20">=</operator> <literal type="number" pos:start="117:22" pos:end="117:22">0</literal></expr>;</init> <condition pos:start="117:25" pos:end="117:32"><expr pos:start="117:25" pos:end="117:31"><name pos:start="117:25" pos:end="117:25">k</name> <operator pos:start="117:27" pos:end="117:27">&lt;</operator> <name pos:start="117:29" pos:end="117:31">dim</name></expr>;</condition> <incr pos:start="117:34" pos:end="117:36"><expr pos:start="117:34" pos:end="117:36"><name pos:start="117:34" pos:end="117:34">k</name><operator pos:start="117:35" pos:end="117:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="119:17" pos:end="119:74"><block_content pos:start="119:17" pos:end="119:74">

                <expr_stmt pos:start="119:17" pos:end="119:74"><expr pos:start="119:17" pos:end="119:73"><name pos:start="119:17" pos:end="119:22">curidx</name> <operator pos:start="119:24" pos:end="119:25">+=</operator> <name pos:start="119:27" pos:end="119:53"><name pos:start="119:27" pos:end="119:32">quants</name><index pos:start="119:33" pos:end="119:35">[<expr pos:start="119:34" pos:end="119:34"><name pos:start="119:34" pos:end="119:34">k</name></expr>]</index><index pos:start="119:36" pos:end="119:53">[<expr pos:start="119:37" pos:end="119:52"><operator pos:start="119:37" pos:end="119:37">!</operator><operator pos:start="119:38" pos:end="119:38">!</operator><operator pos:start="119:39" pos:end="119:39">(</operator><name pos:start="119:40" pos:end="119:40">j</name> <operator pos:start="119:42" pos:end="119:42">&amp;</operator> <operator pos:start="119:44" pos:end="119:44">(</operator><literal type="number" pos:start="119:45" pos:end="119:45">1</literal> <operator pos:start="119:47" pos:end="119:48">&lt;&lt;</operator> <name pos:start="119:50" pos:end="119:50">k</name><operator pos:start="119:51" pos:end="119:51">)</operator><operator pos:start="119:52" pos:end="119:52">)</operator></expr>]</index></name> <operator pos:start="119:55" pos:end="119:55">*</operator> <name pos:start="119:57" pos:end="119:73"><name pos:start="119:57" pos:end="119:60">offs</name><index pos:start="119:61" pos:end="119:73">[<expr pos:start="119:62" pos:end="119:72"><name pos:start="119:62" pos:end="119:64">dim</name> <operator pos:start="119:66" pos:end="119:66">-</operator> <literal type="number" pos:start="119:68" pos:end="119:70">1</literal> <operator pos:start="119:70" pos:end="119:70">-</operator> <name pos:start="119:72" pos:end="119:72">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="121:13" pos:end="121:58"><expr pos:start="121:13" pos:end="121:57"><name pos:start="121:13" pos:end="121:19">curbits</name> <operator pos:start="121:21" pos:end="121:21">=</operator>  <name pos:start="121:24" pos:end="121:57"><name pos:start="121:24" pos:end="121:43">ff_aac_spectral_bits</name><index pos:start="121:44" pos:end="121:49">[<expr pos:start="121:45" pos:end="121:48"><name pos:start="121:45" pos:end="121:46">cb</name><operator pos:start="121:47" pos:end="121:47">-</operator><literal type="number" pos:start="121:48" pos:end="121:48">1</literal></expr>]</index><index pos:start="121:50" pos:end="121:57">[<expr pos:start="121:51" pos:end="121:56"><name pos:start="121:51" pos:end="121:56">curidx</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="126:0"><expr pos:start="123:13" pos:end="123:64"><name pos:start="123:13" pos:end="123:15">vec</name>     <operator pos:start="123:21" pos:end="123:21">=</operator> <operator pos:start="123:23" pos:end="123:23">&amp;</operator><name pos:start="123:24" pos:end="123:64"><name pos:start="123:24" pos:end="123:46">ff_aac_codebook_vectors</name><index pos:start="123:47" pos:end="123:52">[<expr pos:start="123:48" pos:end="123:51"><name pos:start="123:48" pos:end="123:49">cb</name><operator pos:start="123:50" pos:end="123:50">-</operator><literal type="number" pos:start="123:51" pos:end="123:51">1</literal></expr>]</index><index pos:start="123:53" pos:end="123:64">[<expr pos:start="123:54" pos:end="123:63"><name pos:start="123:54" pos:end="123:59">curidx</name><operator pos:start="123:60" pos:end="123:60">*</operator><name pos:start="123:61" pos:end="123:63">dim</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:else pos:start="125:1" pos:end="125:5">#<cpp:directive pos:start="125:2" pos:end="125:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="127:9" pos:end="127:27"><expr pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:15">mincost</name> <operator pos:start="127:17" pos:end="127:17">=</operator> <name pos:start="127:19" pos:end="127:26">INFINITY</name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:44"><expr pos:start="129:9" pos:end="129:43"><name pos:start="129:9" pos:end="129:11">vec</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <name pos:start="129:15" pos:end="129:43"><name pos:start="129:15" pos:end="129:37">ff_aac_codebook_vectors</name><index pos:start="129:38" pos:end="129:43">[<expr pos:start="129:39" pos:end="129:42"><name pos:start="129:39" pos:end="129:40">cb</name><operator pos:start="129:41" pos:end="129:41">-</operator><literal type="number" pos:start="129:42" pos:end="129:42">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="131:9" pos:end="213:9">for <control pos:start="131:13" pos:end="131:69">(<init pos:start="131:14" pos:end="131:19"><expr pos:start="131:14" pos:end="131:18"><name pos:start="131:14" pos:end="131:14">j</name> <operator pos:start="131:16" pos:end="131:16">=</operator> <literal type="number" pos:start="131:18" pos:end="131:18">0</literal></expr>;</init> <condition pos:start="131:21" pos:end="131:52"><expr pos:start="131:21" pos:end="131:51"><name pos:start="131:21" pos:end="131:21">j</name> <operator pos:start="131:23" pos:end="131:23">&lt;</operator> <name pos:start="131:25" pos:end="131:51"><name pos:start="131:25" pos:end="131:45">ff_aac_spectral_sizes</name><index pos:start="131:46" pos:end="131:51">[<expr pos:start="131:47" pos:end="131:50"><name pos:start="131:47" pos:end="131:48">cb</name><operator pos:start="131:49" pos:end="131:49">-</operator><literal type="number" pos:start="131:50" pos:end="131:50">1</literal></expr>]</index></name></expr>;</condition> <incr pos:start="131:54" pos:end="131:68"><expr pos:start="131:54" pos:end="131:56"><name pos:start="131:54" pos:end="131:54">j</name><operator pos:start="131:55" pos:end="131:56">++</operator></expr><operator pos:start="131:57" pos:end="131:57">,</operator> <expr pos:start="131:59" pos:end="131:68"><name pos:start="131:59" pos:end="131:61">vec</name> <operator pos:start="131:63" pos:end="131:64">+=</operator> <name pos:start="131:66" pos:end="131:68">dim</name></expr></incr>)</control> <block pos:start="131:71" pos:end="213:9">{<block_content pos:start="133:13" pos:end="211:13">

            <decl_stmt pos:start="133:13" pos:end="133:28"><decl pos:start="133:13" pos:end="133:27"><type pos:start="133:13" pos:end="133:17"><name pos:start="133:13" pos:end="133:17">float</name></type> <name pos:start="133:19" pos:end="133:20">rd</name> <init pos:start="133:22" pos:end="133:27">= <expr pos:start="133:24" pos:end="133:27"><literal type="number" pos:start="133:24" pos:end="133:27">0.0f</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="135:13" pos:end="138:0"><decl pos:start="135:13" pos:end="135:55"><type pos:start="135:13" pos:end="135:15"><name pos:start="135:13" pos:end="135:15">int</name></type> <name pos:start="135:17" pos:end="135:23">curbits</name> <init pos:start="135:25" pos:end="135:55">= <expr pos:start="135:27" pos:end="135:55"><name pos:start="135:27" pos:end="135:55"><name pos:start="135:27" pos:end="135:46">ff_aac_spectral_bits</name><index pos:start="135:47" pos:end="135:52">[<expr pos:start="135:48" pos:end="135:51"><name pos:start="135:48" pos:end="135:49">cb</name><operator pos:start="135:50" pos:end="135:50">-</operator><literal type="number" pos:start="135:51" pos:end="135:51">1</literal></expr>]</index><index pos:start="135:53" pos:end="135:55">[<expr pos:start="135:54" pos:end="135:54"><name pos:start="135:54" pos:end="135:54">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="137:8" pos:end="137:35">/* USE_REALLY_FULL_SEARCH */</comment>

            <if_stmt pos:start="139:13" pos:end="199:13"><if pos:start="139:13" pos:end="189:13">if <condition pos:start="139:16" pos:end="139:41">(<expr pos:start="139:17" pos:end="139:40"><call pos:start="139:17" pos:end="139:40"><name pos:start="139:17" pos:end="139:36">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="139:37" pos:end="139:40">(<argument pos:start="139:38" pos:end="139:39"><expr pos:start="139:38" pos:end="139:39"><name pos:start="139:38" pos:end="139:39">cb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:43" pos:end="189:13">{<block_content pos:start="141:17" pos:end="187:17">

                <for pos:start="141:17" pos:end="187:17">for <control pos:start="141:21" pos:end="141:41">(<init pos:start="141:22" pos:end="141:27"><expr pos:start="141:22" pos:end="141:26"><name pos:start="141:22" pos:end="141:22">k</name> <operator pos:start="141:24" pos:end="141:24">=</operator> <literal type="number" pos:start="141:26" pos:end="141:26">0</literal></expr>;</init> <condition pos:start="141:29" pos:end="141:36"><expr pos:start="141:29" pos:end="141:35"><name pos:start="141:29" pos:end="141:29">k</name> <operator pos:start="141:31" pos:end="141:31">&lt;</operator> <name pos:start="141:33" pos:end="141:35">dim</name></expr>;</condition> <incr pos:start="141:38" pos:end="141:40"><expr pos:start="141:38" pos:end="141:40"><name pos:start="141:38" pos:end="141:38">k</name><operator pos:start="141:39" pos:end="141:40">++</operator></expr></incr>)</control> <block pos:start="141:43" pos:end="187:17">{<block_content pos:start="143:21" pos:end="185:39">

                    <decl_stmt pos:start="143:21" pos:end="143:45"><decl pos:start="143:21" pos:end="143:44"><type pos:start="143:21" pos:end="143:25"><name pos:start="143:21" pos:end="143:25">float</name></type> <name pos:start="143:27" pos:end="143:27">t</name> <init pos:start="143:29" pos:end="143:44">= <expr pos:start="143:31" pos:end="143:44"><call pos:start="143:31" pos:end="143:44"><name pos:start="143:31" pos:end="143:35">fabsf</name><argument_list pos:start="143:36" pos:end="143:44">(<argument pos:start="143:37" pos:end="143:43"><expr pos:start="143:37" pos:end="143:43"><name pos:start="143:37" pos:end="143:43"><name pos:start="143:37" pos:end="143:38">in</name><index pos:start="143:39" pos:end="143:43">[<expr pos:start="143:40" pos:end="143:42"><name pos:start="143:40" pos:end="143:40">i</name><operator pos:start="143:41" pos:end="143:41">+</operator><name pos:start="143:42" pos:end="143:42">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="145:21" pos:end="145:29"><decl pos:start="145:21" pos:end="145:28"><type pos:start="145:21" pos:end="145:25"><name pos:start="145:21" pos:end="145:25">float</name></type> <name pos:start="145:27" pos:end="145:28">di</name></decl>;</decl_stmt>

                    <comment type="line" pos:start="147:21" pos:end="147:67">//do not code with escape sequence small values</comment>

                    <if_stmt pos:start="149:21" pos:end="155:21"><if pos:start="149:21" pos:end="155:21">if <condition pos:start="149:24" pos:end="149:56">(<expr pos:start="149:25" pos:end="149:55"><name pos:start="149:25" pos:end="149:30"><name pos:start="149:25" pos:end="149:27">vec</name><index pos:start="149:28" pos:end="149:30">[<expr pos:start="149:29" pos:end="149:29"><name pos:start="149:29" pos:end="149:29">k</name></expr>]</index></name> <operator pos:start="149:32" pos:end="149:33">==</operator> <literal type="number" pos:start="149:35" pos:end="149:39">64.0f</literal> <operator pos:start="149:41" pos:end="149:42">&amp;&amp;</operator> <name pos:start="149:44" pos:end="149:44">t</name> <operator pos:start="149:46" pos:end="149:46">&lt;</operator> <literal type="number" pos:start="149:48" pos:end="149:52">39.0f</literal><operator pos:start="149:53" pos:end="149:53">*</operator><name pos:start="149:54" pos:end="149:55">IQ</name></expr>)</condition> <block pos:start="149:58" pos:end="155:21">{<block_content pos:start="151:25" pos:end="153:30">

                        <expr_stmt pos:start="151:25" pos:end="151:38"><expr pos:start="151:25" pos:end="151:37"><name pos:start="151:25" pos:end="151:26">rd</name> <operator pos:start="151:28" pos:end="151:28">=</operator> <name pos:start="151:30" pos:end="151:37">INFINITY</name></expr>;</expr_stmt>

                        <break pos:start="153:25" pos:end="153:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="157:21" pos:end="179:21"><if pos:start="157:21" pos:end="175:21">if <condition pos:start="157:24" pos:end="157:40">(<expr pos:start="157:25" pos:end="157:39"><name pos:start="157:25" pos:end="157:30"><name pos:start="157:25" pos:end="157:27">vec</name><index pos:start="157:28" pos:end="157:30">[<expr pos:start="157:29" pos:end="157:29"><name pos:start="157:29" pos:end="157:29">k</name></expr>]</index></name> <operator pos:start="157:32" pos:end="157:33">==</operator> <literal type="number" pos:start="157:35" pos:end="157:39">64.0f</literal></expr>)</condition> <block pos:start="157:42" pos:end="175:21">{<block_content pos:start="159:25" pos:end="173:25"> <comment type="line" pos:start="157:44" pos:end="157:56">//FIXME: slow</comment>

                        <if_stmt pos:start="159:25" pos:end="173:25"><if pos:start="159:25" pos:end="165:25">if <condition pos:start="159:28" pos:end="159:48">(<expr pos:start="159:29" pos:end="159:47"><name pos:start="159:29" pos:end="159:29">t</name> <operator pos:start="159:31" pos:end="159:32">&gt;=</operator> <name pos:start="159:34" pos:end="159:47">CLIPPED_ESCAPE</name></expr>)</condition> <block pos:start="159:50" pos:end="165:25">{<block_content pos:start="161:29" pos:end="163:42">

                            <expr_stmt pos:start="161:29" pos:end="161:52"><expr pos:start="161:29" pos:end="161:51"><name pos:start="161:29" pos:end="161:30">di</name> <operator pos:start="161:32" pos:end="161:32">=</operator> <name pos:start="161:34" pos:end="161:34">t</name> <operator pos:start="161:36" pos:end="161:36">-</operator> <name pos:start="161:38" pos:end="161:51">CLIPPED_ESCAPE</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="163:29" pos:end="163:42"><expr pos:start="163:29" pos:end="163:41"><name pos:start="163:29" pos:end="163:35">curbits</name> <operator pos:start="163:37" pos:end="163:38">+=</operator> <literal type="number" pos:start="163:40" pos:end="163:41">21</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="165:27" pos:end="173:25">else <block pos:start="165:32" pos:end="173:25">{<block_content pos:start="167:29" pos:end="171:60">

                            <decl_stmt pos:start="167:29" pos:end="167:66"><decl pos:start="167:29" pos:end="167:65"><type pos:start="167:29" pos:end="167:31"><name pos:start="167:29" pos:end="167:31">int</name></type> <name pos:start="167:33" pos:end="167:33">c</name> <init pos:start="167:35" pos:end="167:65">= <expr pos:start="167:37" pos:end="167:65"><call pos:start="167:37" pos:end="167:65"><name pos:start="167:37" pos:end="167:43">av_clip</name><argument_list pos:start="167:44" pos:end="167:65">(<argument pos:start="167:45" pos:end="167:55"><expr pos:start="167:45" pos:end="167:55"><call pos:start="167:45" pos:end="167:55"><name pos:start="167:45" pos:end="167:49">quant</name><argument_list pos:start="167:50" pos:end="167:55">(<argument pos:start="167:51" pos:end="167:51"><expr pos:start="167:51" pos:end="167:51"><name pos:start="167:51" pos:end="167:51">t</name></expr></argument>, <argument pos:start="167:54" pos:end="167:54"><expr pos:start="167:54" pos:end="167:54"><name pos:start="167:54" pos:end="167:54">Q</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="167:58" pos:end="167:58"><expr pos:start="167:58" pos:end="167:58"><literal type="number" pos:start="167:58" pos:end="167:58">0</literal></expr></argument>, <argument pos:start="167:61" pos:end="167:64"><expr pos:start="167:61" pos:end="167:64"><literal type="number" pos:start="167:61" pos:end="167:64">8191</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="169:29" pos:end="169:50"><expr pos:start="169:29" pos:end="169:49"><name pos:start="169:29" pos:end="169:30">di</name> <operator pos:start="169:32" pos:end="169:32">=</operator> <name pos:start="169:34" pos:end="169:34">t</name> <operator pos:start="169:36" pos:end="169:36">-</operator> <name pos:start="169:38" pos:end="169:38">c</name><operator pos:start="169:39" pos:end="169:39">*</operator><call pos:start="169:40" pos:end="169:46"><name pos:start="169:40" pos:end="169:43">cbrt</name><argument_list pos:start="169:44" pos:end="169:46">(<argument pos:start="169:45" pos:end="169:45"><expr pos:start="169:45" pos:end="169:45"><name pos:start="169:45" pos:end="169:45">c</name></expr></argument>)</argument_list></call><operator pos:start="169:47" pos:end="169:47">*</operator><name pos:start="169:48" pos:end="169:49">IQ</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="171:29" pos:end="171:60"><expr pos:start="171:29" pos:end="171:59"><name pos:start="171:29" pos:end="171:35">curbits</name> <operator pos:start="171:37" pos:end="171:38">+=</operator> <call pos:start="171:40" pos:end="171:49"><name pos:start="171:40" pos:end="171:46">av_log2</name><argument_list pos:start="171:47" pos:end="171:49">(<argument pos:start="171:48" pos:end="171:48"><expr pos:start="171:48" pos:end="171:48"><name pos:start="171:48" pos:end="171:48">c</name></expr></argument>)</argument_list></call><operator pos:start="171:50" pos:end="171:50">*</operator><literal type="number" pos:start="171:51" pos:end="171:53">2</literal> <operator pos:start="171:53" pos:end="171:53">-</operator> <literal type="number" pos:start="171:55" pos:end="171:57">4</literal> <operator pos:start="171:57" pos:end="171:57">+</operator> <literal type="number" pos:start="171:59" pos:end="171:59">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="175:23" pos:end="179:21">else <block pos:start="175:28" pos:end="179:21">{<block_content pos:start="177:25" pos:end="177:43">

                        <expr_stmt pos:start="177:25" pos:end="177:43"><expr pos:start="177:25" pos:end="177:42"><name pos:start="177:25" pos:end="177:26">di</name> <operator pos:start="177:28" pos:end="177:28">=</operator> <name pos:start="177:30" pos:end="177:30">t</name> <operator pos:start="177:32" pos:end="177:32">-</operator> <name pos:start="177:34" pos:end="177:39"><name pos:start="177:34" pos:end="177:36">vec</name><index pos:start="177:37" pos:end="177:39">[<expr pos:start="177:38" pos:end="177:38"><name pos:start="177:38" pos:end="177:38">k</name></expr>]</index></name><operator pos:start="177:40" pos:end="177:40">*</operator><name pos:start="177:41" pos:end="177:42">IQ</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="181:21" pos:end="183:34"><if pos:start="181:21" pos:end="183:34">if <condition pos:start="181:24" pos:end="181:39">(<expr pos:start="181:25" pos:end="181:38"><name pos:start="181:25" pos:end="181:30"><name pos:start="181:25" pos:end="181:27">vec</name><index pos:start="181:28" pos:end="181:30">[<expr pos:start="181:29" pos:end="181:29"><name pos:start="181:29" pos:end="181:29">k</name></expr>]</index></name> <operator pos:start="181:32" pos:end="181:33">!=</operator> <literal type="number" pos:start="181:35" pos:end="181:38">0.0f</literal></expr>)</condition><block type="pseudo" pos:start="183:25" pos:end="183:34"><block_content pos:start="183:25" pos:end="183:34">

                        <expr_stmt pos:start="183:25" pos:end="183:34"><expr pos:start="183:25" pos:end="183:33"><name pos:start="183:25" pos:end="183:31">curbits</name><operator pos:start="183:32" pos:end="183:33">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:39"><expr pos:start="185:21" pos:end="185:38"><name pos:start="185:21" pos:end="185:22">rd</name> <operator pos:start="185:24" pos:end="185:25">+=</operator> <name pos:start="185:27" pos:end="185:28">di</name><operator pos:start="185:29" pos:end="185:29">*</operator><name pos:start="185:30" pos:end="185:31">di</name><operator pos:start="185:32" pos:end="185:32">*</operator><name pos:start="185:33" pos:end="185:38">lambda</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="189:15" pos:end="199:13">else <block pos:start="189:20" pos:end="199:13">{<block_content pos:start="191:17" pos:end="197:17">

                <for pos:start="191:17" pos:end="197:17">for <control pos:start="191:21" pos:end="191:41">(<init pos:start="191:22" pos:end="191:27"><expr pos:start="191:22" pos:end="191:26"><name pos:start="191:22" pos:end="191:22">k</name> <operator pos:start="191:24" pos:end="191:24">=</operator> <literal type="number" pos:start="191:26" pos:end="191:26">0</literal></expr>;</init> <condition pos:start="191:29" pos:end="191:36"><expr pos:start="191:29" pos:end="191:35"><name pos:start="191:29" pos:end="191:29">k</name> <operator pos:start="191:31" pos:end="191:31">&lt;</operator> <name pos:start="191:33" pos:end="191:35">dim</name></expr>;</condition> <incr pos:start="191:38" pos:end="191:40"><expr pos:start="191:38" pos:end="191:40"><name pos:start="191:38" pos:end="191:38">k</name><operator pos:start="191:39" pos:end="191:40">++</operator></expr></incr>)</control> <block pos:start="191:43" pos:end="197:17">{<block_content pos:start="193:21" pos:end="195:39">

                    <decl_stmt pos:start="193:21" pos:end="193:51"><decl pos:start="193:21" pos:end="193:50"><type pos:start="193:21" pos:end="193:25"><name pos:start="193:21" pos:end="193:25">float</name></type> <name pos:start="193:27" pos:end="193:28">di</name> <init pos:start="193:30" pos:end="193:50">= <expr pos:start="193:32" pos:end="193:50"><name pos:start="193:32" pos:end="193:38"><name pos:start="193:32" pos:end="193:33">in</name><index pos:start="193:34" pos:end="193:38">[<expr pos:start="193:35" pos:end="193:37"><name pos:start="193:35" pos:end="193:35">i</name><operator pos:start="193:36" pos:end="193:36">+</operator><name pos:start="193:37" pos:end="193:37">k</name></expr>]</index></name> <operator pos:start="193:40" pos:end="193:40">-</operator> <name pos:start="193:42" pos:end="193:47"><name pos:start="193:42" pos:end="193:44">vec</name><index pos:start="193:45" pos:end="193:47">[<expr pos:start="193:46" pos:end="193:46"><name pos:start="193:46" pos:end="193:46">k</name></expr>]</index></name><operator pos:start="193:48" pos:end="193:48">*</operator><name pos:start="193:49" pos:end="193:50">IQ</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:39"><expr pos:start="195:21" pos:end="195:38"><name pos:start="195:21" pos:end="195:22">rd</name> <operator pos:start="195:24" pos:end="195:25">+=</operator> <name pos:start="195:27" pos:end="195:28">di</name><operator pos:start="195:29" pos:end="195:29">*</operator><name pos:start="195:30" pos:end="195:31">di</name><operator pos:start="195:32" pos:end="195:32">*</operator><name pos:start="195:33" pos:end="195:38">lambda</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:26"><expr pos:start="201:13" pos:end="201:25"><name pos:start="201:13" pos:end="201:14">rd</name> <operator pos:start="201:16" pos:end="201:17">+=</operator> <name pos:start="201:19" pos:end="201:25">curbits</name></expr>;</expr_stmt>

            <if_stmt pos:start="203:13" pos:end="211:13"><if pos:start="203:13" pos:end="211:13">if <condition pos:start="203:16" pos:end="203:29">(<expr pos:start="203:17" pos:end="203:28"><name pos:start="203:17" pos:end="203:18">rd</name> <operator pos:start="203:20" pos:end="203:20">&lt;</operator> <name pos:start="203:22" pos:end="203:28">mincost</name></expr>)</condition> <block pos:start="203:31" pos:end="211:13">{<block_content pos:start="205:17" pos:end="209:34">

                <expr_stmt pos:start="205:17" pos:end="205:29"><expr pos:start="205:17" pos:end="205:28"><name pos:start="205:17" pos:end="205:23">mincost</name> <operator pos:start="205:25" pos:end="205:25">=</operator> <name pos:start="205:27" pos:end="205:28">rd</name></expr>;</expr_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:28"><expr pos:start="207:17" pos:end="207:27"><name pos:start="207:17" pos:end="207:22">minidx</name>  <operator pos:start="207:25" pos:end="207:25">=</operator> <name pos:start="207:27" pos:end="207:27">j</name></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:34"><expr pos:start="209:17" pos:end="209:33"><name pos:start="209:17" pos:end="209:23">minbits</name> <operator pos:start="209:25" pos:end="209:25">=</operator> <name pos:start="209:27" pos:end="209:33">curbits</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="215:9" pos:end="215:27"><expr pos:start="215:9" pos:end="215:26"><name pos:start="215:9" pos:end="215:12">cost</name>    <operator pos:start="215:17" pos:end="215:18">+=</operator> <name pos:start="215:20" pos:end="215:26">mincost</name></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:27"><expr pos:start="217:9" pos:end="217:26"><name pos:start="217:9" pos:end="217:15">resbits</name> <operator pos:start="217:17" pos:end="217:18">+=</operator> <name pos:start="217:20" pos:end="217:26">minbits</name></expr>;</expr_stmt>

        <if_stmt pos:start="219:9" pos:end="221:25"><if pos:start="219:9" pos:end="221:25">if <condition pos:start="219:12" pos:end="219:26">(<expr pos:start="219:13" pos:end="219:25"><name pos:start="219:13" pos:end="219:16">cost</name> <operator pos:start="219:18" pos:end="219:19">&gt;=</operator> <name pos:start="219:21" pos:end="219:25">uplim</name></expr>)</condition><block type="pseudo" pos:start="221:13" pos:end="221:25"><block_content pos:start="221:13" pos:end="221:25">

            <return pos:start="221:13" pos:end="221:25">return <expr pos:start="221:20" pos:end="221:24"><name pos:start="221:20" pos:end="221:24">uplim</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="227:5" pos:end="229:24"><if pos:start="227:5" pos:end="229:24">if <condition pos:start="227:8" pos:end="227:13">(<expr pos:start="227:9" pos:end="227:12"><name pos:start="227:9" pos:end="227:12">bits</name></expr>)</condition><block type="pseudo" pos:start="229:9" pos:end="229:24"><block_content pos:start="229:9" pos:end="229:24">

        <expr_stmt pos:start="229:9" pos:end="229:24"><expr pos:start="229:9" pos:end="229:23"><operator pos:start="229:9" pos:end="229:9">*</operator><name pos:start="229:10" pos:end="229:13">bits</name> <operator pos:start="229:15" pos:end="229:15">=</operator> <name pos:start="229:17" pos:end="229:23">resbits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="231:5" pos:end="231:16">return <expr pos:start="231:12" pos:end="231:15"><name pos:start="231:12" pos:end="231:15">cost</name></expr>;</return>

</block_content>}</block></for></block_content></block></function>
</unit>
