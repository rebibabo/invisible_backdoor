<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24589.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:35">exynos4210_i2c_read</name><parameter_list pos:start="1:36" pos:end="3:47">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:75"><decl pos:start="1:51" pos:end="1:75"><type pos:start="1:51" pos:end="1:75"><name pos:start="1:51" pos:end="1:68">target_phys_addr_t</name></type> <name pos:start="1:70" pos:end="1:75">offset</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:46"><decl pos:start="3:34" pos:end="3:46"><type pos:start="3:34" pos:end="3:46"><name pos:start="3:34" pos:end="3:41">unsigned</name></type> <name pos:start="3:43" pos:end="3:46">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="75:1">{<block_content pos:start="7:5" pos:end="73:17">

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">Exynos4210I2CState</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">s</name> <init pos:start="7:27" pos:end="7:56">= <expr pos:start="7:29" pos:end="7:56"><operator pos:start="7:29" pos:end="7:29">(</operator><name pos:start="7:30" pos:end="7:47">Exynos4210I2CState</name> <operator pos:start="7:49" pos:end="7:49">*</operator><operator pos:start="7:50" pos:end="7:50">)</operator><name pos:start="7:51" pos:end="7:56">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:17">value</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="65:5">switch <condition pos:start="13:12" pos:end="13:19">(<expr pos:start="13:13" pos:end="13:18"><name pos:start="13:13" pos:end="13:18">offset</name></expr>)</condition> <block pos:start="13:21" pos:end="65:5">{<block_content pos:start="15:5" pos:end="63:14">

    <case pos:start="15:5" pos:end="15:21">case <expr pos:start="15:10" pos:end="15:20"><name pos:start="15:10" pos:end="15:20">I2CCON_ADDR</name></expr>:</case>

        <expr_stmt pos:start="17:9" pos:end="17:26"><expr pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:13">value</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:25"><name pos:start="17:17" pos:end="17:17">s</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:25">i2ccon</name></name></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:22">case <expr pos:start="21:10" pos:end="21:21"><name pos:start="21:10" pos:end="21:21">I2CSTAT_ADDR</name></expr>:</case>

        <expr_stmt pos:start="23:9" pos:end="23:27"><expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:13">value</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <name pos:start="23:17" pos:end="23:26"><name pos:start="23:17" pos:end="23:17">s</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:26">i2cstat</name></name></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:21">case <expr pos:start="27:10" pos:end="27:20"><name pos:start="27:10" pos:end="27:20">I2CADD_ADDR</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:26"><expr pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:13">value</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:25"><name pos:start="29:17" pos:end="29:17">s</name><operator pos:start="29:18" pos:end="29:19">-&gt;</operator><name pos:start="29:20" pos:end="29:25">i2cadd</name></name></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:20">case <expr pos:start="33:10" pos:end="33:19"><name pos:start="33:10" pos:end="33:19">I2CDS_ADDR</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:25"><expr pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:13">value</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <name pos:start="35:17" pos:end="35:24"><name pos:start="35:17" pos:end="35:17">s</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:24">i2cds</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:27"><expr pos:start="37:9" pos:end="37:26"><name pos:start="37:9" pos:end="37:19"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:19">scl_free</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <name pos:start="37:23" pos:end="37:26">true</name></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="43:46">(<expr pos:start="39:13" pos:end="43:45"><call pos:start="39:13" pos:end="39:40"><name pos:start="39:13" pos:end="39:28">EXYNOS4_I2C_MODE</name><argument_list pos:start="39:29" pos:end="39:40">(<argument pos:start="39:30" pos:end="39:39"><expr pos:start="39:30" pos:end="39:39"><name pos:start="39:30" pos:end="39:39"><name pos:start="39:30" pos:end="39:30">s</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:39">i2cstat</name></name></expr></argument>)</argument_list></call> <operator pos:start="39:42" pos:end="39:43">==</operator> <name pos:start="39:45" pos:end="39:61">I2CMODE_MASTER_Rx</name> <operator pos:start="39:63" pos:end="39:64">&amp;&amp;</operator>

               <operator pos:start="41:16" pos:end="41:16">(</operator><name pos:start="41:17" pos:end="41:26"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:26">i2cstat</name></name> <operator pos:start="41:28" pos:end="41:28">&amp;</operator> <name pos:start="41:30" pos:end="41:47">I2CSTAT_START_BUSY</name><operator pos:start="41:48" pos:end="41:48">)</operator> <operator pos:start="41:50" pos:end="41:51">&amp;&amp;</operator>

               <operator pos:start="43:16" pos:end="43:16">!</operator><operator pos:start="43:17" pos:end="43:17">(</operator><name pos:start="43:18" pos:end="43:26"><name pos:start="43:18" pos:end="43:18">s</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:26">i2ccon</name></name> <operator pos:start="43:28" pos:end="43:28">&amp;</operator> <name pos:start="43:30" pos:end="43:44">I2CCON_INT_PEND</name><operator pos:start="43:45" pos:end="43:45">)</operator></expr>)</condition> <block pos:start="43:48" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:43">

            <expr_stmt pos:start="45:13" pos:end="45:43"><expr pos:start="45:13" pos:end="45:42"><call pos:start="45:13" pos:end="45:42"><name pos:start="45:13" pos:end="45:39">exynos4210_i2c_data_receive</name><argument_list pos:start="45:40" pos:end="45:42">(<argument pos:start="45:41" pos:end="45:41"><expr pos:start="45:41" pos:end="45:41"><name pos:start="45:41" pos:end="45:41">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <case pos:start="51:5" pos:end="51:20">case <expr pos:start="51:10" pos:end="51:19"><name pos:start="51:10" pos:end="51:19">I2CLC_ADDR</name></expr>:</case>

        <expr_stmt pos:start="53:9" pos:end="53:25"><expr pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:13">value</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <name pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:24">i2clc</name></name></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <default pos:start="57:5" pos:end="57:12">default:</default>

        <expr_stmt pos:start="59:9" pos:end="59:18"><expr pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:13">value</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <literal type="number" pos:start="59:17" pos:end="59:17">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:70"><expr pos:start="61:9" pos:end="61:69"><call pos:start="61:9" pos:end="61:69"><name pos:start="61:9" pos:end="61:14">DPRINT</name><argument_list pos:start="61:15" pos:end="61:69">(<argument pos:start="61:16" pos:end="61:46"><expr pos:start="61:16" pos:end="61:46"><literal type="string" pos:start="61:16" pos:end="61:46">"ERROR: Bad read offset 0x%x\n"</literal></expr></argument>, <argument pos:start="61:49" pos:end="61:68"><expr pos:start="61:49" pos:end="61:68"><operator pos:start="61:49" pos:end="61:49">(</operator><name pos:start="61:50" pos:end="61:57">unsigned</name> <name pos:start="61:59" pos:end="61:61">int</name><operator pos:start="61:62" pos:end="61:62">)</operator><name pos:start="61:63" pos:end="61:68">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="69:5" pos:end="71:41"><expr pos:start="69:5" pos:end="71:40"><call pos:start="69:5" pos:end="71:40"><name pos:start="69:5" pos:end="69:10">DPRINT</name><argument_list pos:start="69:11" pos:end="71:40">(<argument pos:start="69:12" pos:end="69:41"><expr pos:start="69:12" pos:end="69:41"><literal type="string" pos:start="69:12" pos:end="69:41">"read %s [0x%02x] -&gt; 0x%02x\n"</literal></expr></argument>, <argument pos:start="69:44" pos:end="69:74"><expr pos:start="69:44" pos:end="69:74"><call pos:start="69:44" pos:end="69:74"><name pos:start="69:44" pos:end="69:66">exynos4_i2c_get_regname</name><argument_list pos:start="69:67" pos:end="69:74">(<argument pos:start="69:68" pos:end="69:73"><expr pos:start="69:68" pos:end="69:73"><name pos:start="69:68" pos:end="69:73">offset</name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="71:13" pos:end="71:32"><expr pos:start="71:13" pos:end="71:32"><operator pos:start="71:13" pos:end="71:13">(</operator><name pos:start="71:14" pos:end="71:21">unsigned</name> <name pos:start="71:23" pos:end="71:25">int</name><operator pos:start="71:26" pos:end="71:26">)</operator><name pos:start="71:27" pos:end="71:32">offset</name></expr></argument>, <argument pos:start="71:35" pos:end="71:39"><expr pos:start="71:35" pos:end="71:39"><name pos:start="71:35" pos:end="71:39">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="73:5" pos:end="73:17">return <expr pos:start="73:12" pos:end="73:16"><name pos:start="73:12" pos:end="73:16">value</name></expr>;</return>

</block_content>}</block></function>
</unit>
