<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10252.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:35">xen_pt_msixctrl_reg_init</name><parameter_list pos:start="1:36" pos:end="5:51">(<parameter pos:start="1:37" pos:end="1:61"><decl pos:start="1:37" pos:end="1:61"><type pos:start="1:37" pos:end="1:61"><name pos:start="1:37" pos:end="1:58">XenPCIPassthroughState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">s</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:53"><decl pos:start="3:37" pos:end="3:53"><type pos:start="3:37" pos:end="3:53"><name pos:start="3:37" pos:end="3:48">XenPTRegInfo</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:53">reg</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:75"><decl pos:start="3:56" pos:end="3:75"><type pos:start="3:56" pos:end="3:75"><name pos:start="3:56" pos:end="3:63">uint32_t</name></type> <name pos:start="3:65" pos:end="3:75">real_offset</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:50"><decl pos:start="5:37" pos:end="5:50"><type pos:start="5:37" pos:end="5:50"><name pos:start="5:37" pos:end="5:44">uint32_t</name> <modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:50">data</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="41:1">{<block_content pos:start="9:5" pos:end="39:13">

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">PCIDevice</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:16">d</name> <init pos:start="9:18" pos:end="9:26">= <expr pos:start="9:20" pos:end="9:26"><operator pos:start="9:20" pos:end="9:20">&amp;</operator><name pos:start="9:21" pos:end="9:26"><name pos:start="9:21" pos:end="9:21">s</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:26">dev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:22">reg_field</name> <init pos:start="11:24" pos:end="11:26">= <expr pos:start="11:26" pos:end="11:26"><literal type="number" pos:start="11:26" pos:end="11:26">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:58">/* use I/O device register's value as initial value */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:54"><expr pos:start="17:5" pos:end="17:53"><name pos:start="17:5" pos:end="17:13">reg_field</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <call pos:start="17:17" pos:end="17:53"><name pos:start="17:17" pos:end="17:28">pci_get_word</name><argument_list pos:start="17:29" pos:end="17:53">(<argument pos:start="17:30" pos:end="17:52"><expr pos:start="17:30" pos:end="17:52"><name pos:start="17:30" pos:end="17:38"><name pos:start="17:30" pos:end="17:30">d</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:38">config</name></name> <operator pos:start="17:40" pos:end="17:40">+</operator> <name pos:start="17:42" pos:end="17:52">real_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:42">(<expr pos:start="21:9" pos:end="21:41"><name pos:start="21:9" pos:end="21:17">reg_field</name> <operator pos:start="21:19" pos:end="21:19">&amp;</operator> <name pos:start="21:21" pos:end="21:41">PCI_MSIX_FLAGS_ENABLE</name></expr>)</condition> <block pos:start="21:44" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:66">

        <expr_stmt pos:start="23:9" pos:end="23:68"><expr pos:start="23:9" pos:end="23:67"><call pos:start="23:9" pos:end="23:67"><name pos:start="23:9" pos:end="23:18">XEN_PT_LOG</name><argument_list pos:start="23:19" pos:end="23:67">(<argument pos:start="23:20" pos:end="23:20"><expr pos:start="23:20" pos:end="23:20"><name pos:start="23:20" pos:end="23:20">d</name></expr></argument>, <argument pos:start="23:23" pos:end="23:66"><expr pos:start="23:23" pos:end="23:66"><literal type="string" pos:start="23:23" pos:end="23:66">"MSIX already enabled, disabling it first\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="27:66"><expr pos:start="25:9" pos:end="27:65"><call pos:start="25:9" pos:end="27:65"><name pos:start="25:9" pos:end="25:29">xen_host_pci_set_word</name><argument_list pos:start="25:30" pos:end="27:65">(<argument pos:start="25:31" pos:end="25:45"><expr pos:start="25:31" pos:end="25:45"><operator pos:start="25:31" pos:end="25:31">&amp;</operator><name pos:start="25:32" pos:end="25:45"><name pos:start="25:32" pos:end="25:32">s</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:45">real_device</name></name></expr></argument>, <argument pos:start="25:48" pos:end="25:58"><expr pos:start="25:48" pos:end="25:58"><name pos:start="25:48" pos:end="25:58">real_offset</name></expr></argument>,

                              <argument pos:start="27:31" pos:end="27:64"><expr pos:start="27:31" pos:end="27:64"><name pos:start="27:31" pos:end="27:39">reg_field</name> <operator pos:start="27:41" pos:end="27:41">&amp;</operator> <operator pos:start="27:43" pos:end="27:43">~</operator><name pos:start="27:44" pos:end="27:64">PCI_MSIX_FLAGS_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:39"><expr pos:start="33:5" pos:end="33:38"><name pos:start="33:5" pos:end="33:24"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:11">msix</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:24">ctrl_offset</name></name> <operator pos:start="33:26" pos:end="33:26">=</operator> <name pos:start="33:28" pos:end="33:38">real_offset</name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:26"><expr pos:start="37:5" pos:end="37:25"><operator pos:start="37:5" pos:end="37:5">*</operator><name pos:start="37:6" pos:end="37:9">data</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <name pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:15">reg</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:25">init_val</name></name></expr>;</expr_stmt>

    <return pos:start="39:5" pos:end="39:13">return <expr pos:start="39:12" pos:end="39:12"><literal type="number" pos:start="39:12" pos:end="39:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
