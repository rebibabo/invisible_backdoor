<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24332.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_hevc_split_packet</name><parameter_list pos:start="1:25" pos:end="3:82">(<parameter pos:start="1:26" pos:end="1:39"><decl pos:start="1:26" pos:end="1:39"><type pos:start="1:26" pos:end="1:39"><name pos:start="1:26" pos:end="1:36">HEVCContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:56"><decl pos:start="1:42" pos:end="1:56"><type pos:start="1:42" pos:end="1:56"><name pos:start="1:42" pos:end="1:51">HEVCPacket</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">pkt</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:76"><decl pos:start="1:59" pos:end="1:76"><type pos:start="1:59" pos:end="1:76"><specifier pos:start="1:59" pos:end="1:63">const</specifier> <name pos:start="1:65" pos:end="1:71">uint8_t</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:76">buf</name></decl></parameter>, <parameter pos:start="1:79" pos:end="1:88"><decl pos:start="1:79" pos:end="1:88"><type pos:start="1:79" pos:end="1:88"><name pos:start="1:79" pos:end="1:81">int</name></type> <name pos:start="1:83" pos:end="1:88">length</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:46"><decl pos:start="3:26" pos:end="3:46"><type pos:start="3:26" pos:end="3:46"><name pos:start="3:26" pos:end="3:39">AVCodecContext</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:46">avctx</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:60">is_nalff</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:81"><decl pos:start="3:63" pos:end="3:81"><type pos:start="3:63" pos:end="3:81"><name pos:start="3:63" pos:end="3:65">int</name></type> <name pos:start="3:67" pos:end="3:81">nal_length_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="177:1">{<block_content pos:start="7:5" pos:end="175:13">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">consumed</name></decl>, <decl pos:start="7:19" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:21">ret</name> <init pos:start="7:23" pos:end="7:25">= <expr pos:start="7:25" pos:end="7:25"><literal type="number" pos:start="7:25" pos:end="7:25">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:21"><expr pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:7">pkt</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:16">nb_nals</name></name> <operator pos:start="11:18" pos:end="11:18">=</operator> <literal type="number" pos:start="11:20" pos:end="11:20">0</literal></expr>;</expr_stmt>

    <while pos:start="13:5" pos:end="171:5">while <condition pos:start="13:11" pos:end="13:23">(<expr pos:start="13:12" pos:end="13:22"><name pos:start="13:12" pos:end="13:17">length</name> <operator pos:start="13:19" pos:end="13:20">&gt;=</operator> <literal type="number" pos:start="13:22" pos:end="13:22">4</literal></expr>)</condition> <block pos:start="13:25" pos:end="171:5">{<block_content pos:start="15:9" pos:end="169:27">

        <decl_stmt pos:start="15:9" pos:end="15:21"><decl pos:start="15:9" pos:end="15:20"><type pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:15">HEVCNAL</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:20">nal</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:31"><decl pos:start="17:9" pos:end="17:30"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:26">extract_length</name> <init pos:start="17:28" pos:end="17:30">= <expr pos:start="17:30" pos:end="17:30"><literal type="number" pos:start="17:30" pos:end="17:30">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="21:9" pos:end="83:9"><if pos:start="21:9" pos:end="43:9">if <condition pos:start="21:12" pos:end="21:21">(<expr pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:20">is_nalff</name></expr>)</condition> <block pos:start="21:23" pos:end="43:9">{<block_content pos:start="23:13" pos:end="41:13">

            <decl_stmt pos:start="23:13" pos:end="23:18"><decl pos:start="23:13" pos:end="23:17"><type pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">int</name></type> <name pos:start="23:17" pos:end="23:17">i</name></decl>;</decl_stmt>

            <for pos:start="25:13" pos:end="27:64">for <control pos:start="25:17" pos:end="25:49">(<init pos:start="25:18" pos:end="25:23"><expr pos:start="25:18" pos:end="25:22"><name pos:start="25:18" pos:end="25:18">i</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <literal type="number" pos:start="25:22" pos:end="25:22">0</literal></expr>;</init> <condition pos:start="25:25" pos:end="25:44"><expr pos:start="25:25" pos:end="25:43"><name pos:start="25:25" pos:end="25:25">i</name> <operator pos:start="25:27" pos:end="25:27">&lt;</operator> <name pos:start="25:29" pos:end="25:43">nal_length_size</name></expr>;</condition> <incr pos:start="25:46" pos:end="25:48"><expr pos:start="25:46" pos:end="25:48"><name pos:start="25:46" pos:end="25:46">i</name><operator pos:start="25:47" pos:end="25:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="27:17" pos:end="27:64"><block_content pos:start="27:17" pos:end="27:64">

                <expr_stmt pos:start="27:17" pos:end="27:64"><expr pos:start="27:17" pos:end="27:63"><name pos:start="27:17" pos:end="27:30">extract_length</name> <operator pos:start="27:32" pos:end="27:32">=</operator> <operator pos:start="27:34" pos:end="27:34">(</operator><name pos:start="27:35" pos:end="27:48">extract_length</name> <operator pos:start="27:50" pos:end="27:51">&lt;&lt;</operator> <literal type="number" pos:start="27:53" pos:end="27:53">8</literal><operator pos:start="27:54" pos:end="27:54">)</operator> <operator pos:start="27:56" pos:end="27:56">|</operator> <name pos:start="27:58" pos:end="27:63"><name pos:start="27:58" pos:end="27:60">buf</name><index pos:start="27:61" pos:end="27:63">[<expr pos:start="27:62" pos:end="27:62"><name pos:start="27:62" pos:end="27:62">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="29:13" pos:end="29:38"><expr pos:start="29:13" pos:end="29:37"><name pos:start="29:13" pos:end="29:15">buf</name>    <operator pos:start="29:20" pos:end="29:21">+=</operator> <name pos:start="29:23" pos:end="29:37">nal_length_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:38"><expr pos:start="31:13" pos:end="31:37"><name pos:start="31:13" pos:end="31:18">length</name> <operator pos:start="31:20" pos:end="31:21">-=</operator> <name pos:start="31:23" pos:end="31:37">nal_length_size</name></expr>;</expr_stmt>



            <if_stmt pos:start="35:13" pos:end="41:13"><if pos:start="35:13" pos:end="41:13">if <condition pos:start="35:16" pos:end="35:40">(<expr pos:start="35:17" pos:end="35:39"><name pos:start="35:17" pos:end="35:30">extract_length</name> <operator pos:start="35:32" pos:end="35:32">&gt;</operator> <name pos:start="35:34" pos:end="35:39">length</name></expr>)</condition> <block pos:start="35:42" pos:end="41:13">{<block_content pos:start="37:17" pos:end="39:43">

                <expr_stmt pos:start="37:17" pos:end="37:72"><expr pos:start="37:17" pos:end="37:71"><call pos:start="37:17" pos:end="37:71"><name pos:start="37:17" pos:end="37:22">av_log</name><argument_list pos:start="37:23" pos:end="37:71">(<argument pos:start="37:24" pos:end="37:28"><expr pos:start="37:24" pos:end="37:28"><name pos:start="37:24" pos:end="37:28">avctx</name></expr></argument>, <argument pos:start="37:31" pos:end="37:42"><expr pos:start="37:31" pos:end="37:42"><name pos:start="37:31" pos:end="37:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:45" pos:end="37:70"><expr pos:start="37:45" pos:end="37:70"><literal type="string" pos:start="37:45" pos:end="37:70">"Invalid NAL unit size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="39:17" pos:end="39:43">return <expr pos:start="39:24" pos:end="39:42"><name pos:start="39:24" pos:end="39:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="43:11" pos:end="83:9">else <block pos:start="43:16" pos:end="83:9">{<block_content pos:start="47:13" pos:end="81:36">

            <comment type="block" pos:start="45:13" pos:end="45:35">/* search start code */</comment>

            <while pos:start="47:13" pos:end="73:13">while <condition pos:start="47:19" pos:end="47:61">(<expr pos:start="47:20" pos:end="47:60"><name pos:start="47:20" pos:end="47:25"><name pos:start="47:20" pos:end="47:22">buf</name><index pos:start="47:23" pos:end="47:25">[<expr pos:start="47:24" pos:end="47:24"><literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>]</index></name> <operator pos:start="47:27" pos:end="47:28">!=</operator> <literal type="number" pos:start="47:30" pos:end="47:30">0</literal> <operator pos:start="47:32" pos:end="47:33">||</operator> <name pos:start="47:35" pos:end="47:40"><name pos:start="47:35" pos:end="47:37">buf</name><index pos:start="47:38" pos:end="47:40">[<expr pos:start="47:39" pos:end="47:39"><literal type="number" pos:start="47:39" pos:end="47:39">1</literal></expr>]</index></name> <operator pos:start="47:42" pos:end="47:43">!=</operator> <literal type="number" pos:start="47:45" pos:end="47:45">0</literal> <operator pos:start="47:47" pos:end="47:48">||</operator> <name pos:start="47:50" pos:end="47:55"><name pos:start="47:50" pos:end="47:52">buf</name><index pos:start="47:53" pos:end="47:55">[<expr pos:start="47:54" pos:end="47:54"><literal type="number" pos:start="47:54" pos:end="47:54">2</literal></expr>]</index></name> <operator pos:start="47:57" pos:end="47:58">!=</operator> <literal type="number" pos:start="47:60" pos:end="47:60">1</literal></expr>)</condition> <block pos:start="47:63" pos:end="73:13">{<block_content pos:start="49:17" pos:end="71:17">

                <expr_stmt pos:start="49:17" pos:end="49:22"><expr pos:start="49:17" pos:end="49:21"><operator pos:start="49:17" pos:end="49:18">++</operator><name pos:start="49:19" pos:end="49:21">buf</name></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:25"><expr pos:start="51:17" pos:end="51:24"><operator pos:start="51:17" pos:end="51:18">--</operator><name pos:start="51:19" pos:end="51:24">length</name></expr>;</expr_stmt>

                <if_stmt pos:start="53:17" pos:end="71:17"><if pos:start="53:17" pos:end="71:17">if <condition pos:start="53:20" pos:end="53:31">(<expr pos:start="53:21" pos:end="53:30"><name pos:start="53:21" pos:end="53:26">length</name> <operator pos:start="53:28" pos:end="53:28">&lt;</operator> <literal type="number" pos:start="53:30" pos:end="53:30">4</literal></expr>)</condition> <block pos:start="53:33" pos:end="71:17">{<block_content pos:start="55:21" pos:end="69:21">

                    <if_stmt pos:start="55:21" pos:end="69:21"><if pos:start="55:21" pos:end="63:21">if <condition pos:start="55:24" pos:end="55:41">(<expr pos:start="55:25" pos:end="55:40"><name pos:start="55:25" pos:end="55:36"><name pos:start="55:25" pos:end="55:27">pkt</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:36">nb_nals</name></name> <operator pos:start="55:38" pos:end="55:38">&gt;</operator> <literal type="number" pos:start="55:40" pos:end="55:40">0</literal></expr>)</condition> <block pos:start="55:43" pos:end="63:21">{<block_content pos:start="61:25" pos:end="61:33">

                        <comment type="line" pos:start="57:25" pos:end="57:76">// No more start codes: we discarded some irrelevant</comment>

                        <comment type="line" pos:start="59:25" pos:end="59:58">// bytes at the end of the packet.</comment>

                        <return pos:start="61:25" pos:end="61:33">return <expr pos:start="61:32" pos:end="61:32"><literal type="number" pos:start="61:32" pos:end="61:32">0</literal></expr>;</return>

                    </block_content>}</block></if> <else pos:start="63:23" pos:end="69:21">else <block pos:start="63:28" pos:end="69:21">{<block_content pos:start="65:25" pos:end="67:51">

                        <expr_stmt pos:start="65:25" pos:end="65:81"><expr pos:start="65:25" pos:end="65:80"><call pos:start="65:25" pos:end="65:80"><name pos:start="65:25" pos:end="65:30">av_log</name><argument_list pos:start="65:31" pos:end="65:80">(<argument pos:start="65:32" pos:end="65:36"><expr pos:start="65:32" pos:end="65:36"><name pos:start="65:32" pos:end="65:36">avctx</name></expr></argument>, <argument pos:start="65:39" pos:end="65:50"><expr pos:start="65:39" pos:end="65:50"><name pos:start="65:39" pos:end="65:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:53" pos:end="65:79"><expr pos:start="65:53" pos:end="65:79"><literal type="string" pos:start="65:53" pos:end="65:79">"No start code is found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="67:25" pos:end="67:51">return <expr pos:start="67:32" pos:end="67:50"><name pos:start="67:32" pos:end="67:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></while>



            <expr_stmt pos:start="77:13" pos:end="77:31"><expr pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:15">buf</name>           <operator pos:start="77:27" pos:end="77:28">+=</operator> <literal type="number" pos:start="77:30" pos:end="77:30">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:31"><expr pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:18">length</name>        <operator pos:start="79:27" pos:end="79:28">-=</operator> <literal type="number" pos:start="79:30" pos:end="79:30">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:36"><expr pos:start="81:13" pos:end="81:35"><name pos:start="81:13" pos:end="81:26">extract_length</name> <operator pos:start="81:28" pos:end="81:28">=</operator> <name pos:start="81:30" pos:end="81:35">length</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="87:9" pos:end="123:9"><if pos:start="87:9" pos:end="123:9">if <condition pos:start="87:12" pos:end="87:51">(<expr pos:start="87:13" pos:end="87:50"><name pos:start="87:13" pos:end="87:31"><name pos:start="87:13" pos:end="87:15">pkt</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:31">nals_allocated</name></name> <operator pos:start="87:33" pos:end="87:33">&lt;</operator> <name pos:start="87:35" pos:end="87:46"><name pos:start="87:35" pos:end="87:37">pkt</name><operator pos:start="87:38" pos:end="87:39">-&gt;</operator><name pos:start="87:40" pos:end="87:46">nb_nals</name></name> <operator pos:start="87:48" pos:end="87:48">+</operator> <literal type="number" pos:start="87:50" pos:end="87:50">1</literal></expr>)</condition> <block pos:start="87:53" pos:end="123:9">{<block_content pos:start="89:13" pos:end="121:43">

            <decl_stmt pos:start="89:13" pos:end="89:51"><decl pos:start="89:13" pos:end="89:50"><type pos:start="89:13" pos:end="89:15"><name pos:start="89:13" pos:end="89:15">int</name></type> <name pos:start="89:17" pos:end="89:24">new_size</name> <init pos:start="89:26" pos:end="89:50">= <expr pos:start="89:28" pos:end="89:50"><name pos:start="89:28" pos:end="89:46"><name pos:start="89:28" pos:end="89:30">pkt</name><operator pos:start="89:31" pos:end="89:32">-&gt;</operator><name pos:start="89:33" pos:end="89:46">nals_allocated</name></name> <operator pos:start="89:48" pos:end="89:48">+</operator> <literal type="number" pos:start="89:50" pos:end="89:50">1</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="91:13" pos:end="91:82"><decl pos:start="91:13" pos:end="91:81"><type pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:16">void</name> <modifier pos:start="91:18" pos:end="91:18">*</modifier></type><name pos:start="91:19" pos:end="91:21">tmp</name> <init pos:start="91:23" pos:end="91:81">= <expr pos:start="91:25" pos:end="91:81"><call pos:start="91:25" pos:end="91:81"><name pos:start="91:25" pos:end="91:40">av_realloc_array</name><argument_list pos:start="91:41" pos:end="91:81">(<argument pos:start="91:42" pos:end="91:50"><expr pos:start="91:42" pos:end="91:50"><name pos:start="91:42" pos:end="91:50"><name pos:start="91:42" pos:end="91:44">pkt</name><operator pos:start="91:45" pos:end="91:46">-&gt;</operator><name pos:start="91:47" pos:end="91:50">nals</name></name></expr></argument>, <argument pos:start="91:53" pos:end="91:60"><expr pos:start="91:53" pos:end="91:60"><name pos:start="91:53" pos:end="91:60">new_size</name></expr></argument>, <argument pos:start="91:63" pos:end="91:80"><expr pos:start="91:63" pos:end="91:80"><sizeof pos:start="91:63" pos:end="91:80">sizeof<argument_list pos:start="91:69" pos:end="91:80">(<argument pos:start="91:70" pos:end="91:79"><expr pos:start="91:70" pos:end="91:79"><operator pos:start="91:70" pos:end="91:70">*</operator><name pos:start="91:71" pos:end="91:79"><name pos:start="91:71" pos:end="91:73">pkt</name><operator pos:start="91:74" pos:end="91:75">-&gt;</operator><name pos:start="91:76" pos:end="91:79">nals</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="95:13" pos:end="97:39"><if pos:start="95:13" pos:end="97:39">if <condition pos:start="95:16" pos:end="95:21">(<expr pos:start="95:17" pos:end="95:20"><operator pos:start="95:17" pos:end="95:17">!</operator><name pos:start="95:18" pos:end="95:20">tmp</name></expr>)</condition><block type="pseudo" pos:start="97:17" pos:end="97:39"><block_content pos:start="97:17" pos:end="97:39">

                <return pos:start="97:17" pos:end="97:39">return <expr pos:start="97:24" pos:end="97:38"><call pos:start="97:24" pos:end="97:38"><name pos:start="97:24" pos:end="97:30">AVERROR</name><argument_list pos:start="97:31" pos:end="97:38">(<argument pos:start="97:32" pos:end="97:37"><expr pos:start="97:32" pos:end="97:37"><name pos:start="97:32" pos:end="97:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="101:13" pos:end="101:28"><expr pos:start="101:13" pos:end="101:27"><name pos:start="101:13" pos:end="101:21"><name pos:start="101:13" pos:end="101:15">pkt</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:21">nals</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator> <name pos:start="101:25" pos:end="101:27">tmp</name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="105:74"><expr pos:start="103:13" pos:end="105:73"><call pos:start="103:13" pos:end="105:73"><name pos:start="103:13" pos:end="103:18">memset</name><argument_list pos:start="103:19" pos:end="105:73">(<argument pos:start="103:20" pos:end="103:50"><expr pos:start="103:20" pos:end="103:50"><name pos:start="103:20" pos:end="103:28"><name pos:start="103:20" pos:end="103:22">pkt</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:28">nals</name></name> <operator pos:start="103:30" pos:end="103:30">+</operator> <name pos:start="103:32" pos:end="103:50"><name pos:start="103:32" pos:end="103:34">pkt</name><operator pos:start="103:35" pos:end="103:36">-&gt;</operator><name pos:start="103:37" pos:end="103:50">nals_allocated</name></name></expr></argument>, <argument pos:start="103:53" pos:end="103:53"><expr pos:start="103:53" pos:end="103:53"><literal type="number" pos:start="103:53" pos:end="103:53">0</literal></expr></argument>,

                   <argument pos:start="105:20" pos:end="105:72"><expr pos:start="105:20" pos:end="105:72"><operator pos:start="105:20" pos:end="105:20">(</operator><name pos:start="105:21" pos:end="105:28">new_size</name> <operator pos:start="105:30" pos:end="105:30">-</operator> <name pos:start="105:32" pos:end="105:50"><name pos:start="105:32" pos:end="105:34">pkt</name><operator pos:start="105:35" pos:end="105:36">-&gt;</operator><name pos:start="105:37" pos:end="105:50">nals_allocated</name></name><operator pos:start="105:51" pos:end="105:51">)</operator> <operator pos:start="105:53" pos:end="105:53">*</operator> <sizeof pos:start="105:55" pos:end="105:72">sizeof<argument_list pos:start="105:61" pos:end="105:72">(<argument pos:start="105:62" pos:end="105:71"><expr pos:start="105:62" pos:end="105:71"><operator pos:start="105:62" pos:end="105:62">*</operator><name pos:start="105:63" pos:end="105:71"><name pos:start="105:63" pos:end="105:65">pkt</name><operator pos:start="105:66" pos:end="105:67">-&gt;</operator><name pos:start="105:68" pos:end="105:71">nals</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:43"><expr pos:start="109:13" pos:end="109:42"><name pos:start="109:13" pos:end="109:15">nal</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <operator pos:start="109:19" pos:end="109:19">&amp;</operator><name pos:start="109:20" pos:end="109:42"><name pos:start="109:20" pos:end="109:22">pkt</name><operator pos:start="109:23" pos:end="109:24">-&gt;</operator><name pos:start="109:25" pos:end="109:28">nals</name><index pos:start="109:29" pos:end="109:42">[<expr pos:start="109:30" pos:end="109:41"><name pos:start="109:30" pos:end="109:41"><name pos:start="109:30" pos:end="109:32">pkt</name><operator pos:start="109:33" pos:end="109:34">-&gt;</operator><name pos:start="109:35" pos:end="109:41">nb_nals</name></name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:47"><expr pos:start="111:13" pos:end="111:46"><name pos:start="111:13" pos:end="111:39"><name pos:start="111:13" pos:end="111:15">nal</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:39">skipped_bytes_pos_size</name></name> <operator pos:start="111:41" pos:end="111:41">=</operator> <literal type="number" pos:start="111:43" pos:end="111:46">1024</literal></expr>;</expr_stmt> <comment type="line" pos:start="111:49" pos:end="111:70">// initial buffer size</comment>

            <expr_stmt pos:start="113:13" pos:end="113:115"><expr pos:start="113:13" pos:end="113:114"><name pos:start="113:13" pos:end="113:34"><name pos:start="113:13" pos:end="113:15">nal</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:34">skipped_bytes_pos</name></name> <operator pos:start="113:36" pos:end="113:36">=</operator> <call pos:start="113:38" pos:end="113:114"><name pos:start="113:38" pos:end="113:52">av_malloc_array</name><argument_list pos:start="113:53" pos:end="113:114">(<argument pos:start="113:54" pos:end="113:80"><expr pos:start="113:54" pos:end="113:80"><name pos:start="113:54" pos:end="113:80"><name pos:start="113:54" pos:end="113:56">nal</name><operator pos:start="113:57" pos:end="113:58">-&gt;</operator><name pos:start="113:59" pos:end="113:80">skipped_bytes_pos_size</name></name></expr></argument>, <argument pos:start="113:83" pos:end="113:113"><expr pos:start="113:83" pos:end="113:113"><sizeof pos:start="113:83" pos:end="113:113">sizeof<argument_list pos:start="113:89" pos:end="113:113">(<argument pos:start="113:90" pos:end="113:112"><expr pos:start="113:90" pos:end="113:112"><operator pos:start="113:90" pos:end="113:90">*</operator><name pos:start="113:91" pos:end="113:112"><name pos:start="113:91" pos:end="113:93">nal</name><operator pos:start="113:94" pos:end="113:95">-&gt;</operator><name pos:start="113:96" pos:end="113:112">skipped_bytes_pos</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="115:13" pos:end="117:39"><if pos:start="115:13" pos:end="117:39">if <condition pos:start="115:16" pos:end="115:40">(<expr pos:start="115:17" pos:end="115:39"><operator pos:start="115:17" pos:end="115:17">!</operator><name pos:start="115:18" pos:end="115:39"><name pos:start="115:18" pos:end="115:20">nal</name><operator pos:start="115:21" pos:end="115:22">-&gt;</operator><name pos:start="115:23" pos:end="115:39">skipped_bytes_pos</name></name></expr>)</condition><block type="pseudo" pos:start="117:17" pos:end="117:39"><block_content pos:start="117:17" pos:end="117:39">

                <return pos:start="117:17" pos:end="117:39">return <expr pos:start="117:24" pos:end="117:38"><call pos:start="117:24" pos:end="117:38"><name pos:start="117:24" pos:end="117:30">AVERROR</name><argument_list pos:start="117:31" pos:end="117:38">(<argument pos:start="117:32" pos:end="117:37"><expr pos:start="117:32" pos:end="117:37"><name pos:start="117:32" pos:end="117:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="121:13" pos:end="121:43"><expr pos:start="121:13" pos:end="121:42"><name pos:start="121:13" pos:end="121:31"><name pos:start="121:13" pos:end="121:15">pkt</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:31">nals_allocated</name></name> <operator pos:start="121:33" pos:end="121:33">=</operator> <name pos:start="121:35" pos:end="121:42">new_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:39"><expr pos:start="125:9" pos:end="125:38"><name pos:start="125:9" pos:end="125:11">nal</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <operator pos:start="125:15" pos:end="125:15">&amp;</operator><name pos:start="125:16" pos:end="125:38"><name pos:start="125:16" pos:end="125:18">pkt</name><operator pos:start="125:19" pos:end="125:20">-&gt;</operator><name pos:start="125:21" pos:end="125:24">nals</name><index pos:start="125:25" pos:end="125:38">[<expr pos:start="125:26" pos:end="125:37"><name pos:start="125:26" pos:end="125:37"><name pos:start="125:26" pos:end="125:28">pkt</name><operator pos:start="125:29" pos:end="125:30">-&gt;</operator><name pos:start="125:31" pos:end="125:37">nb_nals</name></name></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:69"><expr pos:start="129:9" pos:end="129:68"><name pos:start="129:9" pos:end="129:16">consumed</name> <operator pos:start="129:18" pos:end="129:18">=</operator> <call pos:start="129:20" pos:end="129:68"><name pos:start="129:20" pos:end="129:39">ff_hevc_extract_rbsp</name><argument_list pos:start="129:40" pos:end="129:68">(<argument pos:start="129:41" pos:end="129:41"><expr pos:start="129:41" pos:end="129:41"><name pos:start="129:41" pos:end="129:41">s</name></expr></argument>, <argument pos:start="129:44" pos:end="129:46"><expr pos:start="129:44" pos:end="129:46"><name pos:start="129:44" pos:end="129:46">buf</name></expr></argument>, <argument pos:start="129:49" pos:end="129:62"><expr pos:start="129:49" pos:end="129:62"><name pos:start="129:49" pos:end="129:62">extract_length</name></expr></argument>, <argument pos:start="129:65" pos:end="129:67"><expr pos:start="129:65" pos:end="129:67"><name pos:start="129:65" pos:end="129:67">nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="133:28"><if pos:start="131:9" pos:end="133:28">if <condition pos:start="131:12" pos:end="131:25">(<expr pos:start="131:13" pos:end="131:24"><name pos:start="131:13" pos:end="131:20">consumed</name> <operator pos:start="131:22" pos:end="131:22">&lt;</operator> <literal type="number" pos:start="131:24" pos:end="131:24">0</literal></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:28"><block_content pos:start="133:13" pos:end="133:28">

            <return pos:start="133:13" pos:end="133:28">return <expr pos:start="133:20" pos:end="133:27"><name pos:start="133:20" pos:end="133:27">consumed</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:23"><expr pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:11">pkt</name><operator pos:start="137:12" pos:end="137:13">-&gt;</operator><name pos:start="137:14" pos:end="137:20">nb_nals</name></name><operator pos:start="137:21" pos:end="137:22">++</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="141:9" pos:end="141:61"><expr pos:start="141:9" pos:end="141:60"><name pos:start="141:9" pos:end="141:11">ret</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <call pos:start="141:15" pos:end="141:60"><name pos:start="141:15" pos:end="141:28">init_get_bits8</name><argument_list pos:start="141:29" pos:end="141:60">(<argument pos:start="141:30" pos:end="141:37"><expr pos:start="141:30" pos:end="141:37"><operator pos:start="141:30" pos:end="141:30">&amp;</operator><name pos:start="141:31" pos:end="141:37"><name pos:start="141:31" pos:end="141:33">nal</name><operator pos:start="141:34" pos:end="141:35">-&gt;</operator><name pos:start="141:36" pos:end="141:37">gb</name></name></expr></argument>, <argument pos:start="141:40" pos:end="141:48"><expr pos:start="141:40" pos:end="141:48"><name pos:start="141:40" pos:end="141:48"><name pos:start="141:40" pos:end="141:42">nal</name><operator pos:start="141:43" pos:end="141:44">-&gt;</operator><name pos:start="141:45" pos:end="141:48">data</name></name></expr></argument>, <argument pos:start="141:51" pos:end="141:59"><expr pos:start="141:51" pos:end="141:59"><name pos:start="141:51" pos:end="141:59"><name pos:start="141:51" pos:end="141:53">nal</name><operator pos:start="141:54" pos:end="141:55">-&gt;</operator><name pos:start="141:56" pos:end="141:59">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="143:9" pos:end="145:23"><if pos:start="143:9" pos:end="145:23">if <condition pos:start="143:12" pos:end="143:20">(<expr pos:start="143:13" pos:end="143:19"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:17">&lt;</operator> <literal type="number" pos:start="143:19" pos:end="143:19">0</literal></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:23"><block_content pos:start="145:13" pos:end="145:23">

            <return pos:start="145:13" pos:end="145:23">return <expr pos:start="145:20" pos:end="145:22"><name pos:start="145:20" pos:end="145:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:39"><expr pos:start="149:9" pos:end="149:38"><name pos:start="149:9" pos:end="149:11">ret</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <call pos:start="149:15" pos:end="149:38"><name pos:start="149:15" pos:end="149:26">hls_nal_unit</name><argument_list pos:start="149:27" pos:end="149:38">(<argument pos:start="149:28" pos:end="149:30"><expr pos:start="149:28" pos:end="149:30"><name pos:start="149:28" pos:end="149:30">nal</name></expr></argument>, <argument pos:start="149:33" pos:end="149:37"><expr pos:start="149:33" pos:end="149:37"><name pos:start="149:33" pos:end="149:37">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="163:9"><if pos:start="151:9" pos:end="163:9">if <condition pos:start="151:12" pos:end="151:21">(<expr pos:start="151:13" pos:end="151:20"><name pos:start="151:13" pos:end="151:15">ret</name> <operator pos:start="151:17" pos:end="151:18">&lt;=</operator> <literal type="number" pos:start="151:20" pos:end="151:20">0</literal></expr>)</condition> <block pos:start="151:23" pos:end="163:9">{<block_content pos:start="153:13" pos:end="161:27">

            <if_stmt pos:start="153:13" pos:end="159:13"><if pos:start="153:13" pos:end="159:13">if <condition pos:start="153:16" pos:end="153:24">(<expr pos:start="153:17" pos:end="153:23"><name pos:start="153:17" pos:end="153:19">ret</name> <operator pos:start="153:21" pos:end="153:21">&lt;</operator> <literal type="number" pos:start="153:23" pos:end="153:23">0</literal></expr>)</condition> <block pos:start="153:26" pos:end="159:13">{<block_content pos:start="155:17" pos:end="157:34">

                <expr_stmt pos:start="155:17" pos:end="157:34"><expr pos:start="155:17" pos:end="157:33"><call pos:start="155:17" pos:end="157:33"><name pos:start="155:17" pos:end="155:22">av_log</name><argument_list pos:start="155:23" pos:end="157:33">(<argument pos:start="155:24" pos:end="155:28"><expr pos:start="155:24" pos:end="155:28"><name pos:start="155:24" pos:end="155:28">avctx</name></expr></argument>, <argument pos:start="155:31" pos:end="155:42"><expr pos:start="155:31" pos:end="155:42"><name pos:start="155:31" pos:end="155:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="155:45" pos:end="155:78"><expr pos:start="155:45" pos:end="155:78"><literal type="string" pos:start="155:45" pos:end="155:78">"Invalid NAL unit %d, skipping.\n"</literal></expr></argument>,

                       <argument pos:start="157:24" pos:end="157:32"><expr pos:start="157:24" pos:end="157:32"><name pos:start="157:24" pos:end="157:32"><name pos:start="157:24" pos:end="157:26">nal</name><operator pos:start="157:27" pos:end="157:28">-&gt;</operator><name pos:start="157:29" pos:end="157:32">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:27"><expr pos:start="161:13" pos:end="161:26"><name pos:start="161:13" pos:end="161:24"><name pos:start="161:13" pos:end="161:15">pkt</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:24">nb_nals</name></name><operator pos:start="161:25" pos:end="161:26">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="167:9" pos:end="167:27"><expr pos:start="167:9" pos:end="167:26"><name pos:start="167:9" pos:end="167:11">buf</name>    <operator pos:start="167:16" pos:end="167:17">+=</operator> <name pos:start="167:19" pos:end="167:26">consumed</name></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:27"><expr pos:start="169:9" pos:end="169:26"><name pos:start="169:9" pos:end="169:14">length</name> <operator pos:start="169:16" pos:end="169:17">-=</operator> <name pos:start="169:19" pos:end="169:26">consumed</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="175:5" pos:end="175:13">return <expr pos:start="175:12" pos:end="175:12"><literal type="number" pos:start="175:12" pos:end="175:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
