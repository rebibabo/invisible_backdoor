<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/222.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">spapr_machine_reset</name><parameter_list pos:start="1:32" pos:end="1:37">(<parameter pos:start="1:33" pos:end="1:36"><decl pos:start="1:33" pos:end="1:36"><type pos:start="1:33" pos:end="1:36"><name pos:start="1:33" pos:end="1:36">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:5" pos:end="165:30">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">MachineState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:25">machine</name> <init pos:start="5:27" pos:end="5:55">= <expr pos:start="5:29" pos:end="5:55"><call pos:start="5:29" pos:end="5:55"><name pos:start="5:29" pos:end="5:35">MACHINE</name><argument_list pos:start="5:36" pos:end="5:55">(<argument pos:start="5:37" pos:end="5:54"><expr pos:start="5:37" pos:end="5:54"><call pos:start="5:37" pos:end="5:54"><name pos:start="5:37" pos:end="5:52">qdev_get_machine</name><argument_list pos:start="5:53" pos:end="5:54">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">sPAPRMachineState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">spapr</name> <init pos:start="7:30" pos:end="7:53">= <expr pos:start="7:32" pos:end="7:53"><call pos:start="7:32" pos:end="7:53"><name pos:start="7:32" pos:end="7:44">SPAPR_MACHINE</name><argument_list pos:start="7:45" pos:end="7:53">(<argument pos:start="7:46" pos:end="7:52"><expr pos:start="7:46" pos:end="7:52"><name pos:start="7:46" pos:end="7:52">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">PowerPCCPU</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:29">first_ppc_cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:23">rtas_limit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:20">rtas_addr</name></decl>, <decl pos:start="13:23" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:10"/><name pos:start="13:23" pos:end="13:30">fdt_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">fdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:11"><decl pos:start="17:5" pos:end="17:10"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">rc</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:42">/* Check for unknown sysbus devices */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:68"><expr pos:start="23:5" pos:end="23:67"><call pos:start="23:5" pos:end="23:67"><name pos:start="23:5" pos:end="23:33">foreach_dynamic_sysbus_device</name><argument_list pos:start="23:34" pos:end="23:67">(<argument pos:start="23:35" pos:end="23:60"><expr pos:start="23:35" pos:end="23:60"><name pos:start="23:35" pos:end="23:60">find_unknown_sysbus_device</name></expr></argument>, <argument pos:start="23:63" pos:end="23:66"><expr pos:start="23:63" pos:end="23:66"><name pos:start="23:63" pos:end="23:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:28"><expr pos:start="27:5" pos:end="27:27"><call pos:start="27:5" pos:end="27:27"><name pos:start="27:5" pos:end="27:20">spapr_caps_reset</name><argument_list pos:start="27:21" pos:end="27:27">(<argument pos:start="27:22" pos:end="27:26"><expr pos:start="27:22" pos:end="27:26"><name pos:start="27:22" pos:end="27:26">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:43"><expr pos:start="31:5" pos:end="31:42"><name pos:start="31:5" pos:end="31:17">first_ppc_cpu</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <call pos:start="31:21" pos:end="31:42"><name pos:start="31:21" pos:end="31:31">POWERPC_CPU</name><argument_list pos:start="31:32" pos:end="31:42">(<argument pos:start="31:33" pos:end="31:41"><expr pos:start="31:33" pos:end="31:41"><name pos:start="31:33" pos:end="31:41">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="51:5"><if pos:start="33:5" pos:end="47:5">if <condition pos:start="33:8" pos:end="37:48">(<expr pos:start="33:9" pos:end="37:47"><call pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:19">kvm_enabled</name><argument_list pos:start="33:20" pos:end="33:21">()</argument_list></call> <operator pos:start="33:23" pos:end="33:24">&amp;&amp;</operator> <call pos:start="33:26" pos:end="33:51"><name pos:start="33:26" pos:end="33:49">kvmppc_has_cap_mmu_radix</name><argument_list pos:start="33:50" pos:end="33:51">()</argument_list></call> <operator pos:start="33:53" pos:end="33:54">&amp;&amp;</operator>

        <call pos:start="35:9" pos:end="37:47"><name pos:start="35:9" pos:end="35:24">ppc_check_compat</name><argument_list pos:start="35:25" pos:end="37:47">(<argument pos:start="35:26" pos:end="35:38"><expr pos:start="35:26" pos:end="35:38"><name pos:start="35:26" pos:end="35:38">first_ppc_cpu</name></expr></argument>, <argument pos:start="35:41" pos:end="35:64"><expr pos:start="35:41" pos:end="35:64"><name pos:start="35:41" pos:end="35:64">CPU_POWERPC_LOGICAL_3_00</name></expr></argument>, <argument pos:start="35:67" pos:end="35:67"><expr pos:start="35:67" pos:end="35:67"><literal type="number" pos:start="35:67" pos:end="35:67">0</literal></expr></argument>,

                         <argument pos:start="37:26" pos:end="37:46"><expr pos:start="37:26" pos:end="37:46"><name pos:start="37:26" pos:end="37:46"><name pos:start="37:26" pos:end="37:30">spapr</name><operator pos:start="37:31" pos:end="37:32">-&gt;</operator><name pos:start="37:33" pos:end="37:46">max_compat_pvr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:50" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:38">

        <comment type="block" pos:start="39:9" pos:end="43:69">/* If using KVM with radix mode available, VCPUs can be started

         * without a HPT because KVM will start them in radix mode.

         * Set the GR bit in PATB so that we know there is no HPT. */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:38"><expr pos:start="45:9" pos:end="45:37"><name pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:13">spapr</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:25">patb_entry</name></name> <operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:37">PATBE1_GR</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="51:5">else <block pos:start="47:12" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:40">

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><call pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:32">spapr_setup_hpt_and_vrma</name><argument_list pos:start="49:33" pos:end="49:39">(<argument pos:start="49:34" pos:end="49:38"><expr pos:start="49:34" pos:end="49:38"><name pos:start="49:34" pos:end="49:38">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:25"><expr pos:start="55:5" pos:end="55:24"><call pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:22">qemu_devices_reset</name><argument_list pos:start="55:23" pos:end="55:24">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="59:5" pos:end="67:7">/* DRC reset may cause a device to be unplugged. This will cause troubles

     * if this device is used by another device (eg, a running vhost backend

     * will crash QEMU if the DIMM holding the vring goes away). To avoid such

     * situations, we reset DRCs after all devices have been reset.

     */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:78"><expr pos:start="69:5" pos:end="69:77"><call pos:start="69:5" pos:end="69:77"><name pos:start="69:5" pos:end="69:34">object_child_foreach_recursive</name><argument_list pos:start="69:35" pos:end="69:77">(<argument pos:start="69:36" pos:end="69:52"><expr pos:start="69:36" pos:end="69:52"><call pos:start="69:36" pos:end="69:52"><name pos:start="69:36" pos:end="69:50">object_get_root</name><argument_list pos:start="69:51" pos:end="69:52">()</argument_list></call></expr></argument>, <argument pos:start="69:55" pos:end="69:70"><expr pos:start="69:55" pos:end="69:70"><name pos:start="69:55" pos:end="69:70">spapr_reset_drcs</name></expr></argument>, <argument pos:start="69:73" pos:end="69:76"><expr pos:start="69:73" pos:end="69:76"><name pos:start="69:73" pos:end="69:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:38"><expr pos:start="73:5" pos:end="73:37"><call pos:start="73:5" pos:end="73:37"><name pos:start="73:5" pos:end="73:30">spapr_clear_pending_events</name><argument_list pos:start="73:31" pos:end="73:37">(<argument pos:start="73:32" pos:end="73:36"><expr pos:start="73:32" pos:end="73:36"><name pos:start="73:32" pos:end="73:36">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="85:7">/*

     * We place the device tree and RTAS just below either the top of the RMA,

     * or just below 2GB, whichever is lowere, so that it can be

     * processed with 32-bit real mode code if necessary

     */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:53"><expr pos:start="87:5" pos:end="87:52"><name pos:start="87:5" pos:end="87:14">rtas_limit</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <call pos:start="87:18" pos:end="87:52"><name pos:start="87:18" pos:end="87:20">MIN</name><argument_list pos:start="87:21" pos:end="87:52">(<argument pos:start="87:22" pos:end="87:36"><expr pos:start="87:22" pos:end="87:36"><name pos:start="87:22" pos:end="87:36"><name pos:start="87:22" pos:end="87:26">spapr</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:36">rma_size</name></name></expr></argument>, <argument pos:start="87:39" pos:end="87:51"><expr pos:start="87:39" pos:end="87:51"><name pos:start="87:39" pos:end="87:51">RTAS_MAX_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:43"><expr pos:start="89:5" pos:end="89:42"><name pos:start="89:5" pos:end="89:13">rtas_addr</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <name pos:start="89:17" pos:end="89:26">rtas_limit</name> <operator pos:start="89:28" pos:end="89:28">-</operator> <name pos:start="89:30" pos:end="89:42">RTAS_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:40"><expr pos:start="91:5" pos:end="91:39"><name pos:start="91:5" pos:end="91:12">fdt_addr</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <name pos:start="91:16" pos:end="91:24">rtas_addr</name> <operator pos:start="91:26" pos:end="91:26">-</operator> <name pos:start="91:28" pos:end="91:39">FDT_MAX_SIZE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="97:51">/* if this reset wasn't generated by CAS, we should reset our

     * negotiated options and start from scratch */</comment>

    <if_stmt pos:start="99:5" pos:end="109:5"><if pos:start="99:5" pos:end="109:5">if <condition pos:start="99:8" pos:end="99:27">(<expr pos:start="99:9" pos:end="99:26"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:26"><name pos:start="99:10" pos:end="99:14">spapr</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:26">cas_reboot</name></name></expr>)</condition> <block pos:start="99:29" pos:end="109:5">{<block_content pos:start="101:9" pos:end="107:75">

        <expr_stmt pos:start="101:9" pos:end="101:43"><expr pos:start="101:9" pos:end="101:42"><call pos:start="101:9" pos:end="101:42"><name pos:start="101:9" pos:end="101:26">spapr_ovec_cleanup</name><argument_list pos:start="101:27" pos:end="101:42">(<argument pos:start="101:28" pos:end="101:41"><expr pos:start="101:28" pos:end="101:41"><name pos:start="101:28" pos:end="101:41"><name pos:start="101:28" pos:end="101:32">spapr</name><operator pos:start="101:33" pos:end="101:34">-&gt;</operator><name pos:start="101:35" pos:end="101:41">ov5_cas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:42"><expr pos:start="103:9" pos:end="103:41"><name pos:start="103:9" pos:end="103:22"><name pos:start="103:9" pos:end="103:13">spapr</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:22">ov5_cas</name></name> <operator pos:start="103:24" pos:end="103:24">=</operator> <call pos:start="103:26" pos:end="103:41"><name pos:start="103:26" pos:end="103:39">spapr_ovec_new</name><argument_list pos:start="103:40" pos:end="103:41">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:75"><expr pos:start="107:9" pos:end="107:74"><call pos:start="107:9" pos:end="107:74"><name pos:start="107:9" pos:end="107:22">ppc_set_compat</name><argument_list pos:start="107:23" pos:end="107:74">(<argument pos:start="107:24" pos:end="107:36"><expr pos:start="107:24" pos:end="107:36"><name pos:start="107:24" pos:end="107:36">first_ppc_cpu</name></expr></argument>, <argument pos:start="107:39" pos:end="107:59"><expr pos:start="107:39" pos:end="107:59"><name pos:start="107:39" pos:end="107:59"><name pos:start="107:39" pos:end="107:43">spapr</name><operator pos:start="107:44" pos:end="107:45">-&gt;</operator><name pos:start="107:46" pos:end="107:59">max_compat_pvr</name></name></expr></argument>, <argument pos:start="107:62" pos:end="107:73"><expr pos:start="107:62" pos:end="107:73"><operator pos:start="107:62" pos:end="107:62">&amp;</operator><name pos:start="107:63" pos:end="107:73">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:62"><expr pos:start="113:5" pos:end="113:61"><name pos:start="113:5" pos:end="113:7">fdt</name> <operator pos:start="113:9" pos:end="113:9">=</operator> <call pos:start="113:11" pos:end="113:61"><name pos:start="113:11" pos:end="113:25">spapr_build_fdt</name><argument_list pos:start="113:26" pos:end="113:61">(<argument pos:start="113:27" pos:end="113:31"><expr pos:start="113:27" pos:end="113:31"><name pos:start="113:27" pos:end="113:31">spapr</name></expr></argument>, <argument pos:start="113:34" pos:end="113:42"><expr pos:start="113:34" pos:end="113:42"><name pos:start="113:34" pos:end="113:42">rtas_addr</name></expr></argument>, <argument pos:start="113:45" pos:end="113:60"><expr pos:start="113:45" pos:end="113:60"><name pos:start="113:45" pos:end="113:60"><name pos:start="113:45" pos:end="113:49">spapr</name><operator pos:start="113:50" pos:end="113:51">-&gt;</operator><name pos:start="113:52" pos:end="113:60">rtas_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:43"><expr pos:start="117:5" pos:end="117:42"><call pos:start="117:5" pos:end="117:42"><name pos:start="117:5" pos:end="117:19">spapr_load_rtas</name><argument_list pos:start="117:20" pos:end="117:42">(<argument pos:start="117:21" pos:end="117:25"><expr pos:start="117:21" pos:end="117:25"><name pos:start="117:21" pos:end="117:25">spapr</name></expr></argument>, <argument pos:start="117:28" pos:end="117:30"><expr pos:start="117:28" pos:end="117:30"><name pos:start="117:28" pos:end="117:30">fdt</name></expr></argument>, <argument pos:start="117:33" pos:end="117:41"><expr pos:start="117:33" pos:end="117:41"><name pos:start="117:33" pos:end="117:41">rtas_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:23"><expr pos:start="121:5" pos:end="121:22"><name pos:start="121:5" pos:end="121:6">rc</name> <operator pos:start="121:8" pos:end="121:8">=</operator> <call pos:start="121:10" pos:end="121:22"><name pos:start="121:10" pos:end="121:17">fdt_pack</name><argument_list pos:start="121:18" pos:end="121:22">(<argument pos:start="121:19" pos:end="121:21"><expr pos:start="121:19" pos:end="121:21"><name pos:start="121:19" pos:end="121:21">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:58">/* Should only fail if we've built a corrupted tree */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:20"><expr pos:start="127:5" pos:end="127:19"><call pos:start="127:5" pos:end="127:19"><name pos:start="127:5" pos:end="127:10">assert</name><argument_list pos:start="127:11" pos:end="127:19">(<argument pos:start="127:12" pos:end="127:18"><expr pos:start="127:12" pos:end="127:18"><name pos:start="127:12" pos:end="127:13">rc</name> <operator pos:start="127:15" pos:end="127:16">==</operator> <literal type="number" pos:start="127:18" pos:end="127:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="139:5">if <condition pos:start="131:8" pos:end="131:42">(<expr pos:start="131:9" pos:end="131:41"><call pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:21">fdt_totalsize</name><argument_list pos:start="131:22" pos:end="131:26">(<argument pos:start="131:23" pos:end="131:25"><expr pos:start="131:23" pos:end="131:25"><name pos:start="131:23" pos:end="131:25">fdt</name></expr></argument>)</argument_list></call> <operator pos:start="131:28" pos:end="131:28">&gt;</operator> <name pos:start="131:30" pos:end="131:41">FDT_MAX_SIZE</name></expr>)</condition> <block pos:start="131:44" pos:end="139:5">{<block_content pos:start="133:9" pos:end="137:16">

        <expr_stmt pos:start="133:9" pos:end="135:55"><expr pos:start="133:9" pos:end="135:54"><call pos:start="133:9" pos:end="135:54"><name pos:start="133:9" pos:end="133:20">error_report</name><argument_list pos:start="133:21" pos:end="135:54">(<argument pos:start="133:22" pos:end="133:61"><expr pos:start="133:22" pos:end="133:61"><literal type="string" pos:start="133:22" pos:end="133:61">"FDT too big ! 0x%x bytes (max is 0x%x)"</literal></expr></argument>,

                     <argument pos:start="135:22" pos:end="135:39"><expr pos:start="135:22" pos:end="135:39"><call pos:start="135:22" pos:end="135:39"><name pos:start="135:22" pos:end="135:34">fdt_totalsize</name><argument_list pos:start="135:35" pos:end="135:39">(<argument pos:start="135:36" pos:end="135:38"><expr pos:start="135:36" pos:end="135:38"><name pos:start="135:36" pos:end="135:38">fdt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="135:42" pos:end="135:53"><expr pos:start="135:42" pos:end="135:53"><name pos:start="135:42" pos:end="135:53">FDT_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:16"><expr pos:start="137:9" pos:end="137:15"><call pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:12">exit</name><argument_list pos:start="137:13" pos:end="137:15">(<argument pos:start="137:14" pos:end="137:14"><expr pos:start="137:14" pos:end="137:14"><literal type="number" pos:start="137:14" pos:end="137:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="143:5" pos:end="143:22">/* Load the fdt */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:46"><expr pos:start="145:5" pos:end="145:45"><call pos:start="145:5" pos:end="145:45"><name pos:start="145:5" pos:end="145:20">qemu_fdt_dumpdtb</name><argument_list pos:start="145:21" pos:end="145:45">(<argument pos:start="145:22" pos:end="145:24"><expr pos:start="145:22" pos:end="145:24"><name pos:start="145:22" pos:end="145:24">fdt</name></expr></argument>, <argument pos:start="145:27" pos:end="145:44"><expr pos:start="145:27" pos:end="145:44"><call pos:start="145:27" pos:end="145:44"><name pos:start="145:27" pos:end="145:39">fdt_totalsize</name><argument_list pos:start="145:40" pos:end="145:44">(<argument pos:start="145:41" pos:end="145:43"><expr pos:start="145:41" pos:end="145:43"><name pos:start="145:41" pos:end="145:43">fdt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:65"><expr pos:start="147:5" pos:end="147:64"><call pos:start="147:5" pos:end="147:64"><name pos:start="147:5" pos:end="147:29">cpu_physical_memory_write</name><argument_list pos:start="147:30" pos:end="147:64">(<argument pos:start="147:31" pos:end="147:38"><expr pos:start="147:31" pos:end="147:38"><name pos:start="147:31" pos:end="147:38">fdt_addr</name></expr></argument>, <argument pos:start="147:41" pos:end="147:43"><expr pos:start="147:41" pos:end="147:43"><name pos:start="147:41" pos:end="147:43">fdt</name></expr></argument>, <argument pos:start="147:46" pos:end="147:63"><expr pos:start="147:46" pos:end="147:63"><call pos:start="147:46" pos:end="147:63"><name pos:start="147:46" pos:end="147:58">fdt_totalsize</name><argument_list pos:start="147:59" pos:end="147:63">(<argument pos:start="147:60" pos:end="147:62"><expr pos:start="147:60" pos:end="147:62"><name pos:start="147:60" pos:end="147:62">fdt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:16"><expr pos:start="149:5" pos:end="149:15"><call pos:start="149:5" pos:end="149:15"><name pos:start="149:5" pos:end="149:10">g_free</name><argument_list pos:start="149:11" pos:end="149:15">(<argument pos:start="149:12" pos:end="149:14"><expr pos:start="149:12" pos:end="149:14"><name pos:start="149:12" pos:end="149:14">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:32">/* Set up the entry state */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:41"><expr pos:start="155:5" pos:end="155:40"><name pos:start="155:5" pos:end="155:29"><name pos:start="155:5" pos:end="155:17">first_ppc_cpu</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:22">env</name><operator pos:start="155:23" pos:end="155:23">.</operator><name pos:start="155:24" pos:end="155:26">gpr</name><index pos:start="155:27" pos:end="155:29">[<expr pos:start="155:28" pos:end="155:28"><literal type="number" pos:start="155:28" pos:end="155:28">3</literal></expr>]</index></name> <operator pos:start="155:31" pos:end="155:31">=</operator> <name pos:start="155:33" pos:end="155:40">fdt_addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:34"><expr pos:start="157:5" pos:end="157:33"><name pos:start="157:5" pos:end="157:29"><name pos:start="157:5" pos:end="157:17">first_ppc_cpu</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:22">env</name><operator pos:start="157:23" pos:end="157:23">.</operator><name pos:start="157:24" pos:end="157:26">gpr</name><index pos:start="157:27" pos:end="157:29">[<expr pos:start="157:28" pos:end="157:28"><literal type="number" pos:start="157:28" pos:end="157:28">5</literal></expr>]</index></name> <operator pos:start="157:31" pos:end="157:31">=</operator> <literal type="number" pos:start="157:33" pos:end="157:33">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:26"><expr pos:start="159:5" pos:end="159:25"><name pos:start="159:5" pos:end="159:21"><name pos:start="159:5" pos:end="159:13">first_cpu</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:21">halted</name></name> <operator pos:start="159:23" pos:end="159:23">=</operator> <literal type="number" pos:start="159:25" pos:end="159:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:47"><expr pos:start="161:5" pos:end="161:46"><name pos:start="161:5" pos:end="161:26"><name pos:start="161:5" pos:end="161:17">first_ppc_cpu</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:22">env</name><operator pos:start="161:23" pos:end="161:23">.</operator><name pos:start="161:24" pos:end="161:26">nip</name></name> <operator pos:start="161:28" pos:end="161:28">=</operator> <name pos:start="161:30" pos:end="161:46">SPAPR_ENTRY_POINT</name></expr>;</expr_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:30"><expr pos:start="165:5" pos:end="165:29"><name pos:start="165:5" pos:end="165:21"><name pos:start="165:5" pos:end="165:9">spapr</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:21">cas_reboot</name></name> <operator pos:start="165:23" pos:end="165:23">=</operator> <name pos:start="165:25" pos:end="165:29">false</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
