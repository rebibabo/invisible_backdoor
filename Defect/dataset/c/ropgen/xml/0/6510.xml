<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6510.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">wmavoice_decode_packet</name><parameter_list pos:start="1:34" pos:end="3:70">(<parameter pos:start="1:35" pos:end="1:53"><decl pos:start="1:35" pos:end="1:53"><type pos:start="1:35" pos:end="1:53"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">ctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:65"><decl pos:start="1:56" pos:end="1:65"><type pos:start="1:56" pos:end="1:65"><name pos:start="1:56" pos:end="1:59">void</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:65">data</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:52"><decl pos:start="3:35" pos:end="3:52"><type pos:start="3:35" pos:end="3:52"><name pos:start="3:35" pos:end="3:37">int</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:52">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:69"><decl pos:start="3:55" pos:end="3:69"><type pos:start="3:55" pos:end="3:69"><name pos:start="3:55" pos:end="3:62">AVPacket</name> <modifier pos:start="3:64" pos:end="3:64">*</modifier></type><name pos:start="3:65" pos:end="3:69">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="147:1">{<block_content pos:start="7:5" pos:end="145:16">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">WMAVoiceContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:22">s</name> <init pos:start="7:24" pos:end="7:39">= <expr pos:start="7:26" pos:end="7:39"><name pos:start="7:26" pos:end="7:39"><name pos:start="7:26" pos:end="7:28">ctx</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">GetBitContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">gb</name> <init pos:start="9:23" pos:end="9:30">= <expr pos:start="9:25" pos:end="9:30"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:30"><name pos:start="9:26" pos:end="9:26">s</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:30">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">size</name></decl>, <decl pos:start="11:15" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:17">res</name></decl>, <decl pos:start="11:20" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:22">pos</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="23:54">/* Packets are sometimes a multiple of ctx-&gt;block_align, with a packet

     * header at each ctx-&gt;block_align bytes. However, FFmpeg's ASF demuxer

     * feeds us ASF packets, which may concatenate multiple "codec" packets

     * in a single "muxer" packet, so we artificially emulate that by

     * capping the packet size at ctx-&gt;block_align. */</comment>

    <for pos:start="25:5" pos:end="25:80">for <control pos:start="25:9" pos:end="25:79">(<init pos:start="25:10" pos:end="25:28"><expr pos:start="25:10" pos:end="25:27"><name pos:start="25:10" pos:end="25:13">size</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:27"><name pos:start="25:17" pos:end="25:21">avpkt</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:27">size</name></name></expr>;</init> <condition pos:start="25:30" pos:end="25:53"><expr pos:start="25:30" pos:end="25:52"><name pos:start="25:30" pos:end="25:33">size</name> <operator pos:start="25:35" pos:end="25:35">&gt;</operator> <name pos:start="25:37" pos:end="25:52"><name pos:start="25:37" pos:end="25:39">ctx</name><operator pos:start="25:40" pos:end="25:41">-&gt;</operator><name pos:start="25:42" pos:end="25:52">block_align</name></name></expr>;</condition> <incr pos:start="25:55" pos:end="25:78"><expr pos:start="25:55" pos:end="25:78"><name pos:start="25:55" pos:end="25:58">size</name> <operator pos:start="25:60" pos:end="25:61">-=</operator> <name pos:start="25:63" pos:end="25:78"><name pos:start="25:63" pos:end="25:65">ctx</name><operator pos:start="25:66" pos:end="25:67">-&gt;</operator><name pos:start="25:68" pos:end="25:78">block_align</name></name></expr></incr>)</control><block type="pseudo" pos:start="25:80" pos:end="25:80"><block_content pos:start="25:80" pos:end="25:80"><empty_stmt pos:start="25:80" pos:end="25:80">;</empty_stmt></block_content></block></for>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:14">(<expr pos:start="27:9" pos:end="27:13"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:13">size</name></expr>)</condition> <block pos:start="27:16" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:27"><expr pos:start="29:9" pos:end="29:26"><operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:22">got_frame_ptr</name> <operator pos:start="29:24" pos:end="29:24">=</operator> <literal type="number" pos:start="29:26" pos:end="29:26">0</literal></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:50"><expr pos:start="35:5" pos:end="35:49"><call pos:start="35:5" pos:end="35:49"><name pos:start="35:5" pos:end="35:17">init_get_bits</name><argument_list pos:start="35:18" pos:end="35:49">(<argument pos:start="35:19" pos:end="35:24"><expr pos:start="35:19" pos:end="35:24"><operator pos:start="35:19" pos:end="35:19">&amp;</operator><name pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:20">s</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:24">gb</name></name></expr></argument>, <argument pos:start="35:27" pos:end="35:37"><expr pos:start="35:27" pos:end="35:37"><name pos:start="35:27" pos:end="35:37"><name pos:start="35:27" pos:end="35:31">avpkt</name><operator pos:start="35:32" pos:end="35:33">-&gt;</operator><name pos:start="35:34" pos:end="35:37">data</name></name></expr></argument>, <argument pos:start="35:40" pos:end="35:48"><expr pos:start="35:40" pos:end="35:48"><name pos:start="35:40" pos:end="35:43">size</name> <operator pos:start="35:45" pos:end="35:46">&lt;&lt;</operator> <literal type="number" pos:start="35:48" pos:end="35:48">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="43:21">/* size == ctx-&gt;block_align is used to indicate whether we are dealing with

     * a new packet or a packet of which we already read the packet header

     * previously. */</comment>

    <if_stmt pos:start="45:5" pos:end="95:41"><if pos:start="45:5" pos:end="93:5">if <condition pos:start="45:8" pos:end="45:33">(<expr pos:start="45:9" pos:end="45:32"><name pos:start="45:9" pos:end="45:12">size</name> <operator pos:start="45:14" pos:end="45:15">==</operator> <name pos:start="45:17" pos:end="45:32"><name pos:start="45:17" pos:end="45:19">ctx</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:32">block_align</name></name></expr>)</condition> <block pos:start="45:35" pos:end="93:5">{<block_content pos:start="47:9" pos:end="91:9"> <comment type="line" pos:start="45:37" pos:end="45:56">// new packet header</comment>

        <if_stmt pos:start="47:9" pos:end="49:23"><if pos:start="47:9" pos:end="49:23">if <condition pos:start="47:12" pos:end="47:47">(<expr pos:start="47:13" pos:end="47:46"><operator pos:start="47:13" pos:end="47:13">(</operator><name pos:start="47:14" pos:end="47:16">res</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <call pos:start="47:20" pos:end="47:41"><name pos:start="47:20" pos:end="47:38">parse_packet_header</name><argument_list pos:start="47:39" pos:end="47:41">(<argument pos:start="47:40" pos:end="47:40"><expr pos:start="47:40" pos:end="47:40"><name pos:start="47:40" pos:end="47:40">s</name></expr></argument>)</argument_list></call><operator pos:start="47:42" pos:end="47:42">)</operator> <operator pos:start="47:44" pos:end="47:44">&lt;</operator> <literal type="number" pos:start="47:46" pos:end="47:46">0</literal></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:23"><block_content pos:start="49:13" pos:end="49:23">

            <return pos:start="49:13" pos:end="49:23">return <expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">res</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="53:9" pos:end="57:72">/* If the packet header specifies a s-&gt;spillover_nbits, then we want

         * to push out all data of the previous packet (+ spillover) before

         * continuing to parse new superframes in the current packet. */</comment>

        <if_stmt pos:start="59:9" pos:end="91:9"><if pos:start="59:9" pos:end="91:9">if <condition pos:start="59:12" pos:end="59:35">(<expr pos:start="59:13" pos:end="59:34"><name pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:30">spillover_nbits</name></name> <operator pos:start="59:32" pos:end="59:32">&gt;</operator> <literal type="number" pos:start="59:34" pos:end="59:34">0</literal></expr>)</condition> <block pos:start="59:37" pos:end="91:9">{<block_content pos:start="61:13" pos:end="89:55">

            <if_stmt pos:start="61:13" pos:end="89:55"><if pos:start="61:13" pos:end="87:13">if <condition pos:start="61:16" pos:end="61:41">(<expr pos:start="61:17" pos:end="61:40"><name pos:start="61:17" pos:end="61:36"><name pos:start="61:17" pos:end="61:17">s</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:36">sframe_cache_size</name></name> <operator pos:start="61:38" pos:end="61:38">&gt;</operator> <literal type="number" pos:start="61:40" pos:end="61:40">0</literal></expr>)</condition> <block pos:start="61:43" pos:end="87:13">{<block_content pos:start="63:17" pos:end="85:56">

                <decl_stmt pos:start="63:17" pos:end="63:45"><decl pos:start="63:17" pos:end="63:44"><type pos:start="63:17" pos:end="63:19"><name pos:start="63:17" pos:end="63:19">int</name></type> <name pos:start="63:21" pos:end="63:23">cnt</name> <init pos:start="63:25" pos:end="63:44">= <expr pos:start="63:27" pos:end="63:44"><call pos:start="63:27" pos:end="63:44"><name pos:start="63:27" pos:end="63:40">get_bits_count</name><argument_list pos:start="63:41" pos:end="63:44">(<argument pos:start="63:42" pos:end="63:43"><expr pos:start="63:42" pos:end="63:43"><name pos:start="63:42" pos:end="63:43">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:77"><expr pos:start="65:17" pos:end="65:76"><call pos:start="65:17" pos:end="65:76"><name pos:start="65:17" pos:end="65:25">copy_bits</name><argument_list pos:start="65:26" pos:end="65:76">(<argument pos:start="65:27" pos:end="65:32"><expr pos:start="65:27" pos:end="65:32"><operator pos:start="65:27" pos:end="65:27">&amp;</operator><name pos:start="65:28" pos:end="65:32"><name pos:start="65:28" pos:end="65:28">s</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:32">pb</name></name></expr></argument>, <argument pos:start="65:35" pos:end="65:45"><expr pos:start="65:35" pos:end="65:45"><name pos:start="65:35" pos:end="65:45"><name pos:start="65:35" pos:end="65:39">avpkt</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:45">data</name></name></expr></argument>, <argument pos:start="65:48" pos:end="65:51"><expr pos:start="65:48" pos:end="65:51"><name pos:start="65:48" pos:end="65:51">size</name></expr></argument>, <argument pos:start="65:54" pos:end="65:55"><expr pos:start="65:54" pos:end="65:55"><name pos:start="65:54" pos:end="65:55">gb</name></expr></argument>, <argument pos:start="65:58" pos:end="65:75"><expr pos:start="65:58" pos:end="65:75"><name pos:start="65:58" pos:end="65:75"><name pos:start="65:58" pos:end="65:58">s</name><operator pos:start="65:59" pos:end="65:60">-&gt;</operator><name pos:start="65:61" pos:end="65:75">spillover_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:39"><expr pos:start="67:17" pos:end="67:38"><call pos:start="67:17" pos:end="67:38"><name pos:start="67:17" pos:end="67:30">flush_put_bits</name><argument_list pos:start="67:31" pos:end="67:38">(<argument pos:start="67:32" pos:end="67:37"><expr pos:start="67:32" pos:end="67:37"><operator pos:start="67:32" pos:end="67:32">&amp;</operator><name pos:start="67:33" pos:end="67:37"><name pos:start="67:33" pos:end="67:33">s</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:37">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:59"><expr pos:start="69:17" pos:end="69:58"><name pos:start="69:17" pos:end="69:36"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:36">sframe_cache_size</name></name> <operator pos:start="69:38" pos:end="69:39">+=</operator> <name pos:start="69:41" pos:end="69:58"><name pos:start="69:41" pos:end="69:41">s</name><operator pos:start="69:42" pos:end="69:43">-&gt;</operator><name pos:start="69:44" pos:end="69:58">spillover_nbits</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="71:17" pos:end="85:56"><if pos:start="71:17" pos:end="81:17">if <condition pos:start="71:20" pos:end="73:35">(<expr pos:start="71:21" pos:end="73:34"><operator pos:start="71:21" pos:end="71:21">(</operator><name pos:start="71:22" pos:end="71:24">res</name> <operator pos:start="71:26" pos:end="71:26">=</operator> <call pos:start="71:28" pos:end="71:69"><name pos:start="71:28" pos:end="71:43">synth_superframe</name><argument_list pos:start="71:44" pos:end="71:69">(<argument pos:start="71:45" pos:end="71:47"><expr pos:start="71:45" pos:end="71:47"><name pos:start="71:45" pos:end="71:47">ctx</name></expr></argument>, <argument pos:start="71:50" pos:end="71:53"><expr pos:start="71:50" pos:end="71:53"><name pos:start="71:50" pos:end="71:53">data</name></expr></argument>, <argument pos:start="71:56" pos:end="71:68"><expr pos:start="71:56" pos:end="71:68"><name pos:start="71:56" pos:end="71:68">got_frame_ptr</name></expr></argument>)</argument_list></call><operator pos:start="71:70" pos:end="71:70">)</operator> <operator pos:start="71:72" pos:end="71:73">==</operator> <literal type="number" pos:start="71:75" pos:end="71:75">0</literal> <operator pos:start="71:77" pos:end="71:78">&amp;&amp;</operator>

                    <operator pos:start="73:21" pos:end="73:21">*</operator><name pos:start="73:22" pos:end="73:34">got_frame_ptr</name></expr>)</condition> <block pos:start="73:37" pos:end="81:17">{<block_content pos:start="75:21" pos:end="79:36">

                    <expr_stmt pos:start="75:21" pos:end="75:46"><expr pos:start="75:21" pos:end="75:45"><name pos:start="75:21" pos:end="75:23">cnt</name> <operator pos:start="75:25" pos:end="75:26">+=</operator> <name pos:start="75:28" pos:end="75:45"><name pos:start="75:28" pos:end="75:28">s</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:45">spillover_nbits</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="77:21" pos:end="77:48"><expr pos:start="77:21" pos:end="77:47"><name pos:start="77:21" pos:end="77:37"><name pos:start="77:21" pos:end="77:21">s</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:37">skip_bits_next</name></name> <operator pos:start="77:39" pos:end="77:39">=</operator> <name pos:start="77:41" pos:end="77:43">cnt</name> <operator pos:start="77:45" pos:end="77:45">&amp;</operator> <literal type="number" pos:start="77:47" pos:end="77:47">7</literal></expr>;</expr_stmt>

                    <return pos:start="79:21" pos:end="79:36">return <expr pos:start="79:28" pos:end="79:35"><name pos:start="79:28" pos:end="79:30">cnt</name> <operator pos:start="79:32" pos:end="79:33">&gt;&gt;</operator> <literal type="number" pos:start="79:35" pos:end="79:35">3</literal></expr>;</return>

                </block_content>}</block></if> <else pos:start="81:19" pos:end="85:56">else<block type="pseudo" pos:start="83:21" pos:end="85:56"><block_content pos:start="83:21" pos:end="85:56">

                    <expr_stmt pos:start="83:21" pos:end="85:56"><expr pos:start="83:21" pos:end="85:55"><call pos:start="83:21" pos:end="85:55"><name pos:start="83:21" pos:end="83:34">skip_bits_long</name> <argument_list pos:start="83:36" pos:end="85:55">(<argument pos:start="83:37" pos:end="83:38"><expr pos:start="83:37" pos:end="83:38"><name pos:start="83:37" pos:end="83:38">gb</name></expr></argument>, <argument pos:start="83:41" pos:end="85:54"><expr pos:start="83:41" pos:end="85:54"><name pos:start="83:41" pos:end="83:58"><name pos:start="83:41" pos:end="83:41">s</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:58">spillover_nbits</name></name> <operator pos:start="83:60" pos:end="83:60">-</operator> <name pos:start="83:62" pos:end="83:64">cnt</name> <operator pos:start="83:66" pos:end="83:66">+</operator>

                                    <call pos:start="85:37" pos:end="85:54"><name pos:start="85:37" pos:end="85:50">get_bits_count</name><argument_list pos:start="85:51" pos:end="85:54">(<argument pos:start="85:52" pos:end="85:53"><expr pos:start="85:52" pos:end="85:53"><name pos:start="85:52" pos:end="85:53">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="85:58" pos:end="85:66">// resync</comment>

            </block_content>}</block></if> <else pos:start="87:15" pos:end="89:55">else<block type="pseudo" pos:start="89:17" pos:end="89:55"><block_content pos:start="89:17" pos:end="89:55">

                <expr_stmt pos:start="89:17" pos:end="89:55"><expr pos:start="89:17" pos:end="89:54"><call pos:start="89:17" pos:end="89:54"><name pos:start="89:17" pos:end="89:30">skip_bits_long</name><argument_list pos:start="89:31" pos:end="89:54">(<argument pos:start="89:32" pos:end="89:33"><expr pos:start="89:32" pos:end="89:33"><name pos:start="89:32" pos:end="89:33">gb</name></expr></argument>, <argument pos:start="89:36" pos:end="89:53"><expr pos:start="89:36" pos:end="89:53"><name pos:start="89:36" pos:end="89:53"><name pos:start="89:36" pos:end="89:36">s</name><operator pos:start="89:37" pos:end="89:38">-&gt;</operator><name pos:start="89:39" pos:end="89:53">spillover_nbits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="line" pos:start="89:58" pos:end="89:66">// resync</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="93:7" pos:end="95:41">else if <condition pos:start="93:15" pos:end="93:33">(<expr pos:start="93:16" pos:end="93:32"><name pos:start="93:16" pos:end="93:32"><name pos:start="93:16" pos:end="93:16">s</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:32">skip_bits_next</name></name></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:41"><block_content pos:start="95:9" pos:end="95:41">

        <expr_stmt pos:start="95:9" pos:end="95:41"><expr pos:start="95:9" pos:end="95:40"><call pos:start="95:9" pos:end="95:40"><name pos:start="95:9" pos:end="95:17">skip_bits</name><argument_list pos:start="95:18" pos:end="95:40">(<argument pos:start="95:19" pos:end="95:20"><expr pos:start="95:19" pos:end="95:20"><name pos:start="95:19" pos:end="95:20">gb</name></expr></argument>, <argument pos:start="95:23" pos:end="95:39"><expr pos:start="95:23" pos:end="95:39"><name pos:start="95:23" pos:end="95:39"><name pos:start="95:23" pos:end="95:23">s</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:39">skip_bits_next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:51">/* Try parsing superframes in current packet */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:29"><expr pos:start="101:5" pos:end="101:28"><name pos:start="101:5" pos:end="101:24"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:24">sframe_cache_size</name></name> <operator pos:start="101:26" pos:end="101:26">=</operator> <literal type="number" pos:start="101:28" pos:end="101:28">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:26"><expr pos:start="103:5" pos:end="103:25"><name pos:start="103:5" pos:end="103:21"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:21">skip_bits_next</name></name> <operator pos:start="103:23" pos:end="103:23">=</operator> <literal type="number" pos:start="103:25" pos:end="103:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:28"><expr pos:start="105:5" pos:end="105:27"><name pos:start="105:5" pos:end="105:7">pos</name> <operator pos:start="105:9" pos:end="105:9">=</operator> <call pos:start="105:11" pos:end="105:27"><name pos:start="105:11" pos:end="105:23">get_bits_left</name><argument_list pos:start="105:24" pos:end="105:27">(<argument pos:start="105:25" pos:end="105:26"><expr pos:start="105:25" pos:end="105:26"><name pos:start="105:25" pos:end="105:26">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="141:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:63">(<expr pos:start="107:9" pos:end="107:62"><operator pos:start="107:9" pos:end="107:9">(</operator><name pos:start="107:10" pos:end="107:12">res</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <call pos:start="107:16" pos:end="107:57"><name pos:start="107:16" pos:end="107:31">synth_superframe</name><argument_list pos:start="107:32" pos:end="107:57">(<argument pos:start="107:33" pos:end="107:35"><expr pos:start="107:33" pos:end="107:35"><name pos:start="107:33" pos:end="107:35">ctx</name></expr></argument>, <argument pos:start="107:38" pos:end="107:41"><expr pos:start="107:38" pos:end="107:41"><name pos:start="107:38" pos:end="107:41">data</name></expr></argument>, <argument pos:start="107:44" pos:end="107:56"><expr pos:start="107:44" pos:end="107:56"><name pos:start="107:44" pos:end="107:56">got_frame_ptr</name></expr></argument>)</argument_list></call><operator pos:start="107:58" pos:end="107:58">)</operator> <operator pos:start="107:60" pos:end="107:60">&lt;</operator> <literal type="number" pos:start="107:62" pos:end="107:62">0</literal></expr>)</condition> <block pos:start="107:65" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:19">

        <return pos:start="109:9" pos:end="109:19">return <expr pos:start="109:16" pos:end="109:18"><name pos:start="109:16" pos:end="109:18">res</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="111:7" pos:end="119:5">else if <condition pos:start="111:15" pos:end="111:30">(<expr pos:start="111:16" pos:end="111:29"><operator pos:start="111:16" pos:end="111:16">*</operator><name pos:start="111:17" pos:end="111:29">got_frame_ptr</name></expr>)</condition> <block pos:start="111:32" pos:end="119:5">{<block_content pos:start="113:9" pos:end="117:24">

        <decl_stmt pos:start="113:9" pos:end="113:37"><decl pos:start="113:9" pos:end="113:36"><type pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">int</name></type> <name pos:start="113:13" pos:end="113:15">cnt</name> <init pos:start="113:17" pos:end="113:36">= <expr pos:start="113:19" pos:end="113:36"><call pos:start="113:19" pos:end="113:36"><name pos:start="113:19" pos:end="113:32">get_bits_count</name><argument_list pos:start="113:33" pos:end="113:36">(<argument pos:start="113:34" pos:end="113:35"><expr pos:start="113:34" pos:end="113:35"><name pos:start="113:34" pos:end="113:35">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:36"><expr pos:start="115:9" pos:end="115:35"><name pos:start="115:9" pos:end="115:25"><name pos:start="115:9" pos:end="115:9">s</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:25">skip_bits_next</name></name> <operator pos:start="115:27" pos:end="115:27">=</operator> <name pos:start="115:29" pos:end="115:31">cnt</name> <operator pos:start="115:33" pos:end="115:33">&amp;</operator> <literal type="number" pos:start="115:35" pos:end="115:35">7</literal></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:24">return <expr pos:start="117:16" pos:end="117:23"><name pos:start="117:16" pos:end="117:18">cnt</name> <operator pos:start="117:20" pos:end="117:21">&gt;&gt;</operator> <literal type="number" pos:start="117:23" pos:end="117:23">3</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="119:7" pos:end="141:5">else if <condition pos:start="119:15" pos:end="119:48">(<expr pos:start="119:16" pos:end="119:47"><operator pos:start="119:16" pos:end="119:16">(</operator><name pos:start="119:17" pos:end="119:36"><name pos:start="119:17" pos:end="119:17">s</name><operator pos:start="119:18" pos:end="119:19">-&gt;</operator><name pos:start="119:20" pos:end="119:36">sframe_cache_size</name></name> <operator pos:start="119:38" pos:end="119:38">=</operator> <name pos:start="119:40" pos:end="119:42">pos</name><operator pos:start="119:43" pos:end="119:43">)</operator> <operator pos:start="119:45" pos:end="119:45">&gt;</operator> <literal type="number" pos:start="119:47" pos:end="119:47">0</literal></expr>)</condition> <block pos:start="119:50" pos:end="141:5">{<block_content pos:start="123:9" pos:end="135:71">

        <comment type="block" pos:start="121:9" pos:end="121:75">/* rewind bit reader to start of last (incomplete) superframe... */</comment>

        <expr_stmt pos:start="123:9" pos:end="123:50"><expr pos:start="123:9" pos:end="123:49"><call pos:start="123:9" pos:end="123:49"><name pos:start="123:9" pos:end="123:21">init_get_bits</name><argument_list pos:start="123:22" pos:end="123:49">(<argument pos:start="123:23" pos:end="123:24"><expr pos:start="123:23" pos:end="123:24"><name pos:start="123:23" pos:end="123:24">gb</name></expr></argument>, <argument pos:start="123:27" pos:end="123:37"><expr pos:start="123:27" pos:end="123:37"><name pos:start="123:27" pos:end="123:37"><name pos:start="123:27" pos:end="123:31">avpkt</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:37">data</name></name></expr></argument>, <argument pos:start="123:40" pos:end="123:48"><expr pos:start="123:40" pos:end="123:48"><name pos:start="123:40" pos:end="123:43">size</name> <operator pos:start="123:45" pos:end="123:46">&lt;&lt;</operator> <literal type="number" pos:start="123:48" pos:end="123:48">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:46"><expr pos:start="125:9" pos:end="125:45"><call pos:start="125:9" pos:end="125:45"><name pos:start="125:9" pos:end="125:22">skip_bits_long</name><argument_list pos:start="125:23" pos:end="125:45">(<argument pos:start="125:24" pos:end="125:25"><expr pos:start="125:24" pos:end="125:25"><name pos:start="125:24" pos:end="125:25">gb</name></expr></argument>, <argument pos:start="125:28" pos:end="125:44"><expr pos:start="125:28" pos:end="125:44"><operator pos:start="125:28" pos:end="125:28">(</operator><name pos:start="125:29" pos:end="125:32">size</name> <operator pos:start="125:34" pos:end="125:35">&lt;&lt;</operator> <literal type="number" pos:start="125:37" pos:end="125:37">3</literal><operator pos:start="125:38" pos:end="125:38">)</operator> <operator pos:start="125:40" pos:end="125:40">-</operator> <name pos:start="125:42" pos:end="125:44">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:45"><expr pos:start="127:9" pos:end="127:44"><call pos:start="127:9" pos:end="127:44"><name pos:start="127:9" pos:end="127:18">av_assert1</name><argument_list pos:start="127:19" pos:end="127:44">(<argument pos:start="127:20" pos:end="127:43"><expr pos:start="127:20" pos:end="127:43"><call pos:start="127:20" pos:end="127:36"><name pos:start="127:20" pos:end="127:32">get_bits_left</name><argument_list pos:start="127:33" pos:end="127:36">(<argument pos:start="127:34" pos:end="127:35"><expr pos:start="127:34" pos:end="127:35"><name pos:start="127:34" pos:end="127:35">gb</name></expr></argument>)</argument_list></call> <operator pos:start="127:38" pos:end="127:39">==</operator> <name pos:start="127:41" pos:end="127:43">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="131:9" pos:end="131:58">/* ...and cache it for spillover in next packet */</comment>

        <expr_stmt pos:start="133:9" pos:end="133:69"><expr pos:start="133:9" pos:end="133:68"><call pos:start="133:9" pos:end="133:68"><name pos:start="133:9" pos:end="133:21">init_put_bits</name><argument_list pos:start="133:22" pos:end="133:68">(<argument pos:start="133:23" pos:end="133:28"><expr pos:start="133:23" pos:end="133:28"><operator pos:start="133:23" pos:end="133:23">&amp;</operator><name pos:start="133:24" pos:end="133:28"><name pos:start="133:24" pos:end="133:24">s</name><operator pos:start="133:25" pos:end="133:26">-&gt;</operator><name pos:start="133:27" pos:end="133:28">pb</name></name></expr></argument>, <argument pos:start="133:31" pos:end="133:45"><expr pos:start="133:31" pos:end="133:45"><name pos:start="133:31" pos:end="133:45"><name pos:start="133:31" pos:end="133:31">s</name><operator pos:start="133:32" pos:end="133:33">-&gt;</operator><name pos:start="133:34" pos:end="133:45">sframe_cache</name></name></expr></argument>, <argument pos:start="133:48" pos:end="133:67"><expr pos:start="133:48" pos:end="133:67"><name pos:start="133:48" pos:end="133:67">SFRAME_CACHE_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:71"><expr pos:start="135:9" pos:end="135:70"><call pos:start="135:9" pos:end="135:70"><name pos:start="135:9" pos:end="135:17">copy_bits</name><argument_list pos:start="135:18" pos:end="135:70">(<argument pos:start="135:19" pos:end="135:24"><expr pos:start="135:19" pos:end="135:24"><operator pos:start="135:19" pos:end="135:19">&amp;</operator><name pos:start="135:20" pos:end="135:24"><name pos:start="135:20" pos:end="135:20">s</name><operator pos:start="135:21" pos:end="135:22">-&gt;</operator><name pos:start="135:23" pos:end="135:24">pb</name></name></expr></argument>, <argument pos:start="135:27" pos:end="135:37"><expr pos:start="135:27" pos:end="135:37"><name pos:start="135:27" pos:end="135:37"><name pos:start="135:27" pos:end="135:31">avpkt</name><operator pos:start="135:32" pos:end="135:33">-&gt;</operator><name pos:start="135:34" pos:end="135:37">data</name></name></expr></argument>, <argument pos:start="135:40" pos:end="135:43"><expr pos:start="135:40" pos:end="135:43"><name pos:start="135:40" pos:end="135:43">size</name></expr></argument>, <argument pos:start="135:46" pos:end="135:47"><expr pos:start="135:46" pos:end="135:47"><name pos:start="135:46" pos:end="135:47">gb</name></expr></argument>, <argument pos:start="135:50" pos:end="135:69"><expr pos:start="135:50" pos:end="135:69"><name pos:start="135:50" pos:end="135:69"><name pos:start="135:50" pos:end="135:50">s</name><operator pos:start="135:51" pos:end="135:52">-&gt;</operator><name pos:start="135:53" pos:end="135:69">sframe_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="137:9" pos:end="137:63">// FIXME bad - just copy bytes as whole and add use the</comment>

        <comment type="line" pos:start="139:9" pos:end="139:31">// skip_bits_next field</comment>

    </block_content>}</block></if></if_stmt>



    <return pos:start="145:5" pos:end="145:16">return <expr pos:start="145:12" pos:end="145:15"><name pos:start="145:12" pos:end="145:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
