<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10348.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">long</name></type> <name pos:start="1:6" pos:end="1:23">check_dcbzl_effect</name><parameter_list pos:start="1:24" pos:end="1:29">(<parameter pos:start="1:25" pos:end="1:28"><decl pos:start="1:25" pos:end="1:28"><type pos:start="1:25" pos:end="1:28"><name pos:start="1:25" pos:end="1:28">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:3" pos:end="59:15">

  <decl_stmt pos:start="5:3" pos:end="5:51"><decl pos:start="5:3" pos:end="5:50"><type pos:start="5:3" pos:end="5:17"><specifier pos:start="5:3" pos:end="5:10">register</specifier> <name pos:start="5:12" pos:end="5:15">char</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:25">fakedata</name> <init pos:start="5:27" pos:end="5:50">= <expr pos:start="5:29" pos:end="5:50"><operator pos:start="5:29" pos:end="5:29">(</operator><name pos:start="5:30" pos:end="5:33">char</name><operator pos:start="5:34" pos:end="5:34">*</operator><operator pos:start="5:35" pos:end="5:35">)</operator><call pos:start="5:36" pos:end="5:50"><name pos:start="5:36" pos:end="5:44">av_malloc</name><argument_list pos:start="5:45" pos:end="5:50">(<argument pos:start="5:46" pos:end="5:49"><expr pos:start="5:46" pos:end="5:49"><literal type="number" pos:start="5:46" pos:end="5:49">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="7:3" pos:end="7:33"><decl pos:start="7:3" pos:end="7:32"><type pos:start="7:3" pos:end="7:17"><specifier pos:start="7:3" pos:end="7:10">register</specifier> <name pos:start="7:12" pos:end="7:15">char</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:32">fakedata_middle</name></decl>;</decl_stmt>

  <decl_stmt pos:start="9:3" pos:end="9:25"><decl pos:start="9:3" pos:end="9:24"><type pos:start="9:3" pos:end="9:15"><specifier pos:start="9:3" pos:end="9:10">register</specifier> <name pos:start="9:12" pos:end="9:15">long</name></type> <name pos:start="9:17" pos:end="9:20">zero</name> <init pos:start="9:22" pos:end="9:24">= <expr pos:start="9:24" pos:end="9:24"><literal type="number" pos:start="9:24" pos:end="9:24">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="11:3" pos:end="11:22"><decl pos:start="11:3" pos:end="11:21"><type pos:start="11:3" pos:end="11:15"><specifier pos:start="11:3" pos:end="11:10">register</specifier> <name pos:start="11:12" pos:end="11:15">long</name></type> <name pos:start="11:17" pos:end="11:17">i</name> <init pos:start="11:19" pos:end="11:21">= <expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="13:3" pos:end="13:17"><decl pos:start="13:3" pos:end="13:16"><type pos:start="13:3" pos:end="13:6"><name pos:start="13:3" pos:end="13:6">long</name></type> <name pos:start="13:8" pos:end="13:12">count</name> <init pos:start="13:14" pos:end="13:16">= <expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">0</literal></expr></init></decl>;</decl_stmt>



  <if_stmt pos:start="17:3" pos:end="23:3"><if pos:start="17:3" pos:end="23:3">if <condition pos:start="17:6" pos:end="17:16">(<expr pos:start="17:7" pos:end="17:15"><operator pos:start="17:7" pos:end="17:7">!</operator><name pos:start="17:8" pos:end="17:15">fakedata</name></expr>)</condition>

  <block pos:start="19:3" pos:end="23:3">{<block_content pos:start="21:5" pos:end="21:14">

    <return pos:start="21:5" pos:end="21:14">return <expr pos:start="21:12" pos:end="21:13"><literal type="number" pos:start="21:12" pos:end="21:13">0L</literal></expr>;</return>

  </block_content>}</block></if></if_stmt>



  <expr_stmt pos:start="27:3" pos:end="27:37"><expr pos:start="27:3" pos:end="27:36"><name pos:start="27:3" pos:end="27:17">fakedata_middle</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <operator pos:start="27:21" pos:end="27:21">(</operator><name pos:start="27:22" pos:end="27:29">fakedata</name> <operator pos:start="27:31" pos:end="27:31">+</operator> <literal type="number" pos:start="27:33" pos:end="27:35">512</literal><operator pos:start="27:36" pos:end="27:36">)</operator></expr>;</expr_stmt>



  <expr_stmt pos:start="31:3" pos:end="31:31"><expr pos:start="31:3" pos:end="31:30"><call pos:start="31:3" pos:end="31:30"><name pos:start="31:3" pos:end="31:8">memset</name><argument_list pos:start="31:9" pos:end="31:30">(<argument pos:start="31:10" pos:end="31:17"><expr pos:start="31:10" pos:end="31:17"><name pos:start="31:10" pos:end="31:17">fakedata</name></expr></argument>, <argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><literal type="number" pos:start="31:20" pos:end="31:23">0xFF</literal></expr></argument>, <argument pos:start="31:26" pos:end="31:29"><expr pos:start="31:26" pos:end="31:29"><literal type="number" pos:start="31:26" pos:end="31:29">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <comment type="block" pos:start="35:3" pos:end="37:68">/* below the constraint "b" seems to mean "Address base register"

     in gcc-3.3 / RS/6000 speaks. seems to avoid using r0, so.... */</comment>

  <asm pos:start="39:3" pos:end="39:69">asm <specifier pos:start="39:7" pos:end="39:14">volatile</specifier>("dcbzl %0, %1" : : "b" (fakedata_middle), "r" (zero));</asm>



  <for pos:start="43:3" pos:end="51:3">for <control pos:start="43:7" pos:end="43:30">(<init pos:start="43:8" pos:end="43:13"><expr pos:start="43:8" pos:end="43:12"><name pos:start="43:8" pos:end="43:8">i</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <literal type="number" pos:start="43:12" pos:end="43:12">0</literal></expr>;</init> <condition pos:start="43:15" pos:end="43:24"><expr pos:start="43:15" pos:end="43:22"><name pos:start="43:15" pos:end="43:15">i</name> <operator pos:start="43:17" pos:end="43:17">&lt;</operator> <literal type="number" pos:start="43:19" pos:end="43:22">1024</literal></expr> ;</condition> <incr pos:start="43:26" pos:end="43:29"><expr pos:start="43:26" pos:end="43:29"><name pos:start="43:26" pos:end="43:26">i</name> <operator pos:start="43:28" pos:end="43:29">++</operator></expr></incr>)</control>

  <block pos:start="45:3" pos:end="51:3">{<block_content pos:start="47:5" pos:end="49:14">

    <if_stmt pos:start="47:5" pos:end="49:14"><if pos:start="47:5" pos:end="49:14">if <condition pos:start="47:8" pos:end="47:31">(<expr pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:16">fakedata</name><index pos:start="47:17" pos:end="47:19">[<expr pos:start="47:18" pos:end="47:18"><name pos:start="47:18" pos:end="47:18">i</name></expr>]</index></name> <operator pos:start="47:21" pos:end="47:22">==</operator> <operator pos:start="47:24" pos:end="47:24">(</operator><name pos:start="47:25" pos:end="47:28">char</name><operator pos:start="47:29" pos:end="47:29">)</operator><literal type="number" pos:start="47:30" pos:end="47:30">0</literal></expr>)</condition><block type="pseudo" pos:start="49:7" pos:end="49:14"><block_content pos:start="49:7" pos:end="49:14">

      <expr_stmt pos:start="49:7" pos:end="49:14"><expr pos:start="49:7" pos:end="49:13"><name pos:start="49:7" pos:end="49:11">count</name><operator pos:start="49:12" pos:end="49:13">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

  </block_content>}</block></for>



  <expr_stmt pos:start="55:3" pos:end="55:20"><expr pos:start="55:3" pos:end="55:19"><call pos:start="55:3" pos:end="55:19"><name pos:start="55:3" pos:end="55:9">av_free</name><argument_list pos:start="55:10" pos:end="55:19">(<argument pos:start="55:11" pos:end="55:18"><expr pos:start="55:11" pos:end="55:18"><name pos:start="55:11" pos:end="55:18">fakedata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <return pos:start="59:3" pos:end="59:15">return <expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:14">count</name></expr>;</return>

</block_content>}</block></function>
</unit>
