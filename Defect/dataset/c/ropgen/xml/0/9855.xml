<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9855.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">i2c_start_transfer</name><parameter_list pos:start="1:23" pos:end="1:62">(<parameter pos:start="1:24" pos:end="1:34"><decl pos:start="1:24" pos:end="1:34"><type pos:start="1:24" pos:end="1:34"><name pos:start="1:24" pos:end="1:29">I2CBus</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:34">bus</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:51"><decl pos:start="1:37" pos:end="1:51"><type pos:start="1:37" pos:end="1:51"><name pos:start="1:37" pos:end="1:43">uint8_t</name></type> <name pos:start="1:45" pos:end="1:51">address</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:61"><decl pos:start="1:54" pos:end="1:61"><type pos:start="1:54" pos:end="1:61"><name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:61">recv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">BusChild</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">kid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">I2CSlaveClass</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">sc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">I2CNode</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:17">node</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="25:5"><if pos:start="13:5" pos:end="25:5">if <condition pos:start="13:8" pos:end="13:33">(<expr pos:start="13:9" pos:end="13:32"><name pos:start="13:9" pos:end="13:15">address</name> <operator pos:start="13:17" pos:end="13:18">==</operator> <name pos:start="13:20" pos:end="13:32">I2C_BROADCAST</name></expr>)</condition> <block pos:start="13:35" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:30">

        <comment type="block" pos:start="15:9" pos:end="21:11">/*

         * This is a broadcast, the current_devs will be all the devices of the

         * bus.

         */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:11">bus</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:22">broadcast</name></name> <operator pos:start="23:24" pos:end="23:24">=</operator> <name pos:start="23:26" pos:end="23:29">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="29:5" pos:end="29:53"><name pos:start="29:5" pos:end="29:18">QTAILQ_FOREACH</name><argument_list pos:start="29:19" pos:end="29:53">(<argument pos:start="29:20" pos:end="29:22">kid</argument>, <argument pos:start="29:25" pos:end="29:43">&amp;bus-&gt;qbus.children</argument>, <argument pos:start="29:46" pos:end="29:52">sibling</argument>)</argument_list></macro> <block pos:start="29:55" pos:end="51:5">{<block_content pos:start="31:9" pos:end="49:9">

        <decl_stmt pos:start="31:9" pos:end="31:39"><decl pos:start="31:9" pos:end="31:38"><type pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:19">DeviceState</name> <modifier pos:start="31:21" pos:end="31:21">*</modifier></type><name pos:start="31:22" pos:end="31:25">qdev</name> <init pos:start="31:27" pos:end="31:38">= <expr pos:start="31:29" pos:end="31:38"><name pos:start="31:29" pos:end="31:38"><name pos:start="31:29" pos:end="31:31">kid</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:38">child</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:46"><decl pos:start="33:9" pos:end="33:45"><type pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:16">I2CSlave</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:27">candidate</name> <init pos:start="33:29" pos:end="33:45">= <expr pos:start="33:31" pos:end="33:45"><call pos:start="33:31" pos:end="33:45"><name pos:start="33:31" pos:end="33:39">I2C_SLAVE</name><argument_list pos:start="33:40" pos:end="33:45">(<argument pos:start="33:41" pos:end="33:44"><expr pos:start="33:41" pos:end="33:44"><name pos:start="33:41" pos:end="33:44">qdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="35:9" pos:end="49:9"><if pos:start="35:9" pos:end="49:9">if <condition pos:start="35:12" pos:end="35:64">(<expr pos:start="35:13" pos:end="35:63"><operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:31"><name pos:start="35:14" pos:end="35:22">candidate</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:31">address</name></name> <operator pos:start="35:33" pos:end="35:34">==</operator> <name pos:start="35:36" pos:end="35:42">address</name><operator pos:start="35:43" pos:end="35:43">)</operator> <operator pos:start="35:45" pos:end="35:46">||</operator> <operator pos:start="35:48" pos:end="35:48">(</operator><name pos:start="35:49" pos:end="35:62"><name pos:start="35:49" pos:end="35:51">bus</name><operator pos:start="35:52" pos:end="35:53">-&gt;</operator><name pos:start="35:54" pos:end="35:62">broadcast</name></name><operator pos:start="35:63" pos:end="35:63">)</operator></expr>)</condition> <block pos:start="35:66" pos:end="49:9">{<block_content pos:start="37:13" pos:end="47:13">

            <expr_stmt pos:start="37:13" pos:end="37:52"><expr pos:start="37:13" pos:end="37:51"><name pos:start="37:13" pos:end="37:16">node</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:51"><name pos:start="37:20" pos:end="37:27">g_malloc</name><argument_list pos:start="37:28" pos:end="37:51">(<argument pos:start="37:29" pos:end="37:50"><expr pos:start="37:29" pos:end="37:50"><sizeof pos:start="37:29" pos:end="37:50">sizeof<argument_list pos:start="37:35" pos:end="37:50">(<argument pos:start="37:36" pos:end="37:49"><expr pos:start="37:36" pos:end="37:49">struct <name pos:start="37:43" pos:end="37:49">I2CNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:34"><expr pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:16">node</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:21">elt</name></name> <operator pos:start="39:23" pos:end="39:23">=</operator> <name pos:start="39:25" pos:end="39:33">candidate</name></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:62"><expr pos:start="41:13" pos:end="41:61"><call pos:start="41:13" pos:end="41:61"><name pos:start="41:13" pos:end="41:29">QLIST_INSERT_HEAD</name><argument_list pos:start="41:30" pos:end="41:61">(<argument pos:start="41:31" pos:end="41:48"><expr pos:start="41:31" pos:end="41:48"><operator pos:start="41:31" pos:end="41:31">&amp;</operator><name pos:start="41:32" pos:end="41:48"><name pos:start="41:32" pos:end="41:34">bus</name><operator pos:start="41:35" pos:end="41:36">-&gt;</operator><name pos:start="41:37" pos:end="41:48">current_devs</name></name></expr></argument>, <argument pos:start="41:51" pos:end="41:54"><expr pos:start="41:51" pos:end="41:54"><name pos:start="41:51" pos:end="41:54">node</name></expr></argument>, <argument pos:start="41:57" pos:end="41:60"><expr pos:start="41:57" pos:end="41:60"><name pos:start="41:57" pos:end="41:60">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="47:13"><if pos:start="43:13" pos:end="47:13">if <condition pos:start="43:16" pos:end="43:32">(<expr pos:start="43:17" pos:end="43:31"><operator pos:start="43:17" pos:end="43:17">!</operator><name pos:start="43:18" pos:end="43:31"><name pos:start="43:18" pos:end="43:20">bus</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:31">broadcast</name></name></expr>)</condition> <block pos:start="43:34" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:22">

                <break pos:start="45:17" pos:end="45:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:40">(<expr pos:start="55:9" pos:end="55:39"><call pos:start="55:9" pos:end="55:39"><name pos:start="55:9" pos:end="55:19">QLIST_EMPTY</name><argument_list pos:start="55:20" pos:end="55:39">(<argument pos:start="55:21" pos:end="55:38"><expr pos:start="55:21" pos:end="55:38"><operator pos:start="55:21" pos:end="55:21">&amp;</operator><name pos:start="55:22" pos:end="55:38"><name pos:start="55:22" pos:end="55:24">bus</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:38">current_devs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:42" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:17">

        <return pos:start="57:9" pos:end="57:17">return <expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="63:5" pos:end="63:49"><name pos:start="63:5" pos:end="63:17">QLIST_FOREACH</name><argument_list pos:start="63:18" pos:end="63:49">(<argument pos:start="63:19" pos:end="63:22">node</argument>, <argument pos:start="63:25" pos:end="63:42">&amp;bus-&gt;current_devs</argument>, <argument pos:start="63:45" pos:end="63:48">next</argument>)</argument_list></macro> <block pos:start="63:51" pos:end="77:5">{<block_content pos:start="65:9" pos:end="75:9">

        <expr_stmt pos:start="65:9" pos:end="65:44"><expr pos:start="65:9" pos:end="65:43"><name pos:start="65:9" pos:end="65:10">sc</name> <operator pos:start="65:12" pos:end="65:12">=</operator> <call pos:start="65:14" pos:end="65:43"><name pos:start="65:14" pos:end="65:32">I2C_SLAVE_GET_CLASS</name><argument_list pos:start="65:33" pos:end="65:43">(<argument pos:start="65:34" pos:end="65:42"><expr pos:start="65:34" pos:end="65:42"><name pos:start="65:34" pos:end="65:42"><name pos:start="65:34" pos:end="65:37">node</name><operator pos:start="65:38" pos:end="65:39">-&gt;</operator><name pos:start="65:40" pos:end="65:42">elt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="67:9" pos:end="69:31">/* If the bus is already busy, assume this is a repeated

           start condition.  */</comment>

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:22">(<expr pos:start="71:13" pos:end="71:21"><name pos:start="71:13" pos:end="71:21"><name pos:start="71:13" pos:end="71:14">sc</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:21">event</name></name></expr>)</condition> <block pos:start="71:24" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:73">

            <expr_stmt pos:start="73:13" pos:end="73:73"><expr pos:start="73:13" pos:end="73:72"><call pos:start="73:13" pos:end="73:72"><name pos:start="73:13" pos:end="73:21"><name pos:start="73:13" pos:end="73:14">sc</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:21">event</name></name><argument_list pos:start="73:22" pos:end="73:72">(<argument pos:start="73:23" pos:end="73:31"><expr pos:start="73:23" pos:end="73:31"><name pos:start="73:23" pos:end="73:31"><name pos:start="73:23" pos:end="73:26">node</name><operator pos:start="73:27" pos:end="73:28">-&gt;</operator><name pos:start="73:29" pos:end="73:31">elt</name></name></expr></argument>, <argument pos:start="73:34" pos:end="73:71"><expr pos:start="73:34" pos:end="73:71"><ternary pos:start="73:34" pos:end="73:71"><condition pos:start="73:34" pos:end="73:39"><expr pos:start="73:34" pos:end="73:37"><name pos:start="73:34" pos:end="73:37">recv</name></expr> ?</condition><then pos:start="73:41" pos:end="73:54"> <expr pos:start="73:41" pos:end="73:54"><name pos:start="73:41" pos:end="73:54">I2C_START_RECV</name></expr> </then><else pos:start="73:56" pos:end="73:71">: <expr pos:start="73:58" pos:end="73:71"><name pos:start="73:58" pos:end="73:71">I2C_START_SEND</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
