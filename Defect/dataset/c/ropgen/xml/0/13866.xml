<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13866.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:28"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:23">av_always_inline</name> <name pos:start="1:25" pos:end="1:28">void</name></type> <name pos:start="1:30" pos:end="1:69">h264_loop_filter_strength_iteration_mmx2</name><parameter_list pos:start="1:70" pos:end="7:91">(<parameter pos:start="1:71" pos:end="1:89"><decl pos:start="1:71" pos:end="1:89"><type pos:start="1:71" pos:end="1:80"><name pos:start="1:71" pos:end="1:77">int16_t</name></type> <name pos:start="1:79" pos:end="1:89"><name pos:start="1:79" pos:end="1:80">bS</name><index pos:start="1:81" pos:end="1:83">[<expr pos:start="1:82" pos:end="1:82"><literal type="number" pos:start="1:82" pos:end="1:82">2</literal></expr>]</index><index pos:start="1:84" pos:end="1:86">[<expr pos:start="1:85" pos:end="1:85"><literal type="number" pos:start="1:85" pos:end="1:85">4</literal></expr>]</index><index pos:start="1:87" pos:end="1:89">[<expr pos:start="1:88" pos:end="1:88"><literal type="number" pos:start="1:88" pos:end="1:88">4</literal></expr>]</index></name></decl></parameter>, <parameter pos:start="1:92" pos:end="1:106"><decl pos:start="1:92" pos:end="1:106"><type pos:start="1:92" pos:end="1:102"><name pos:start="1:92" pos:end="1:98">uint8_t</name></type> <name pos:start="1:100" pos:end="1:106"><name pos:start="1:100" pos:end="1:102">nnz</name><index pos:start="1:103" pos:end="1:106">[<expr pos:start="1:104" pos:end="1:105"><literal type="number" pos:start="1:104" pos:end="1:105">40</literal></expr>]</index></name></decl></parameter>,

                                                                      <parameter pos:start="3:71" pos:end="3:87"><decl pos:start="3:71" pos:end="3:87"><type pos:start="3:71" pos:end="3:80"><name pos:start="3:71" pos:end="3:76">int8_t</name></type> <name pos:start="3:78" pos:end="3:87"><name pos:start="3:78" pos:end="3:80">ref</name><index pos:start="3:81" pos:end="3:83">[<expr pos:start="3:82" pos:end="3:82"><literal type="number" pos:start="3:82" pos:end="3:82">2</literal></expr>]</index><index pos:start="3:84" pos:end="3:87">[<expr pos:start="3:85" pos:end="3:86"><literal type="number" pos:start="3:85" pos:end="3:86">40</literal></expr>]</index></name></decl></parameter>,   <parameter pos:start="3:92" pos:end="3:111"><decl pos:start="3:92" pos:end="3:111"><type pos:start="3:92" pos:end="3:101"><name pos:start="3:92" pos:end="3:98">int16_t</name></type> <name pos:start="3:100" pos:end="3:111"><name pos:start="3:100" pos:end="3:101">mv</name><index pos:start="3:102" pos:end="3:104">[<expr pos:start="3:103" pos:end="3:103"><literal type="number" pos:start="3:103" pos:end="3:103">2</literal></expr>]</index><index pos:start="3:105" pos:end="3:108">[<expr pos:start="3:106" pos:end="3:107"><literal type="number" pos:start="3:106" pos:end="3:107">40</literal></expr>]</index><index pos:start="3:109" pos:end="3:111">[<expr pos:start="3:110" pos:end="3:110"><literal type="number" pos:start="3:110" pos:end="3:110">2</literal></expr>]</index></name></decl></parameter>,

                                                                      <parameter pos:start="5:71" pos:end="5:79"><decl pos:start="5:71" pos:end="5:79"><type pos:start="5:71" pos:end="5:79"><name pos:start="5:71" pos:end="5:73">int</name></type> <name pos:start="5:75" pos:end="5:79">bidir</name></decl></parameter>,   <parameter pos:start="5:84" pos:end="5:92"><decl pos:start="5:84" pos:end="5:92"><type pos:start="5:84" pos:end="5:92"><name pos:start="5:84" pos:end="5:86">int</name></type> <name pos:start="5:88" pos:end="5:92">edges</name></decl></parameter>, <parameter pos:start="5:95" pos:end="5:102"><decl pos:start="5:95" pos:end="5:102"><type pos:start="5:95" pos:end="5:102"><name pos:start="5:95" pos:end="5:97">int</name></type> <name pos:start="5:99" pos:end="5:102">step</name></decl></parameter>,

                                                                      <parameter pos:start="7:71" pos:end="7:81"><decl pos:start="7:71" pos:end="7:81"><type pos:start="7:71" pos:end="7:81"><name pos:start="7:71" pos:end="7:73">int</name></type> <name pos:start="7:75" pos:end="7:81">mask_mv</name></decl></parameter>, <parameter pos:start="7:84" pos:end="7:90"><decl pos:start="7:84" pos:end="7:90"><type pos:start="7:84" pos:end="7:90"><name pos:start="7:84" pos:end="7:86">int</name></type> <name pos:start="7:88" pos:end="7:90">dir</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="179:1">{<block_content pos:start="11:9" pos:end="177:9">

        <decl_stmt pos:start="11:9" pos:end="11:44"><decl pos:start="11:9" pos:end="11:43"><type pos:start="11:9" pos:end="11:21"><specifier pos:start="11:9" pos:end="11:13">const</specifier> <name pos:start="11:15" pos:end="11:21">x86_reg</name></type> <name pos:start="11:23" pos:end="11:27">d_idx</name> <init pos:start="11:29" pos:end="11:43">= <expr pos:start="11:31" pos:end="11:43"><ternary pos:start="11:31" pos:end="11:43"><condition pos:start="11:31" pos:end="11:35"><expr pos:start="11:31" pos:end="11:33"><name pos:start="11:31" pos:end="11:33">dir</name></expr> ?</condition><then pos:start="11:37" pos:end="11:38"> <expr pos:start="11:37" pos:end="11:38"><operator pos:start="11:37" pos:end="11:37">-</operator><literal type="number" pos:start="11:38" pos:end="11:38">8</literal></expr> </then><else pos:start="11:40" pos:end="11:43">: <expr pos:start="11:42" pos:end="11:43"><operator pos:start="11:42" pos:end="11:42">-</operator><literal type="number" pos:start="11:43" pos:end="11:43">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="13:9" pos:end="13:87"><expr pos:start="13:9" pos:end="13:86"><call pos:start="13:9" pos:end="13:52"><name pos:start="13:9" pos:end="13:23">DECLARE_ALIGNED</name><argument_list pos:start="13:24" pos:end="13:52">(<argument pos:start="13:25" pos:end="13:25"><expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">8</literal></expr></argument>, <argument pos:start="13:28" pos:end="13:41"><expr pos:start="13:28" pos:end="13:41"><specifier pos:start="13:28" pos:end="13:32">const</specifier> <name pos:start="13:34" pos:end="13:41">uint64_t</name></expr></argument>, <argument pos:start="13:44" pos:end="13:51"><expr pos:start="13:44" pos:end="13:51"><name pos:start="13:44" pos:end="13:51">mask_dir</name></expr></argument>)</argument_list></call> <operator pos:start="13:54" pos:end="13:54">=</operator> <ternary pos:start="13:56" pos:end="13:86"><condition pos:start="13:56" pos:end="13:60"><expr pos:start="13:56" pos:end="13:58"><name pos:start="13:56" pos:end="13:58">dir</name></expr> ?</condition><then pos:start="13:62" pos:end="13:62"> <expr pos:start="13:62" pos:end="13:62"><literal type="number" pos:start="13:62" pos:end="13:62">0</literal></expr> </then><else pos:start="13:64" pos:end="13:86">: <expr pos:start="13:66" pos:end="13:86"><literal type="number" pos:start="13:66" pos:end="13:86">0xffffffffffffffffULL</literal></expr></else></ternary></expr>;</expr_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:24"><decl pos:start="15:9" pos:end="15:17"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:17">b_idx</name></decl>, <decl pos:start="15:20" pos:end="15:23"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:20" pos:end="15:23">edge</name></decl>;</decl_stmt>

        <for pos:start="17:9" pos:end="177:9">for<control pos:start="17:12" pos:end="17:70">( <init pos:start="17:14" pos:end="17:30"><expr pos:start="17:14" pos:end="17:21"><name pos:start="17:14" pos:end="17:18">b_idx</name><operator pos:start="17:19" pos:end="17:19">=</operator><literal type="number" pos:start="17:20" pos:end="17:21">12</literal></expr><operator pos:start="17:22" pos:end="17:22">,</operator> <expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:27">edge</name><operator pos:start="17:28" pos:end="17:28">=</operator><literal type="number" pos:start="17:29" pos:end="17:29">0</literal></expr>;</init> <condition pos:start="17:32" pos:end="17:42"><expr pos:start="17:32" pos:end="17:41"><name pos:start="17:32" pos:end="17:35">edge</name><operator pos:start="17:36" pos:end="17:36">&lt;</operator><name pos:start="17:37" pos:end="17:41">edges</name></expr>;</condition> <incr pos:start="17:44" pos:end="17:68"><expr pos:start="17:44" pos:end="17:53"><name pos:start="17:44" pos:end="17:47">edge</name><operator pos:start="17:48" pos:end="17:49">+=</operator><name pos:start="17:50" pos:end="17:53">step</name></expr><operator pos:start="17:54" pos:end="17:54">,</operator> <expr pos:start="17:56" pos:end="17:68"><name pos:start="17:56" pos:end="17:60">b_idx</name><operator pos:start="17:61" pos:end="17:62">+=</operator><literal type="number" pos:start="17:63" pos:end="17:63">8</literal><operator pos:start="17:64" pos:end="17:64">*</operator><name pos:start="17:65" pos:end="17:68">step</name></expr></incr> )</control> <block pos:start="17:72" pos:end="177:9">{<block_content pos:start="19:13" pos:end="175:14">

            <asm pos:start="19:13" pos:end="25:14">__asm__ <specifier pos:start="19:21" pos:end="19:28">volatile</specifier>(

                "pand %0, %%mm0 \n\t"

                ::"m"(mask_dir)

            );</asm>

            <if_stmt pos:start="27:13" pos:end="141:13"><if pos:start="27:13" pos:end="141:13">if<condition pos:start="27:15" pos:end="27:33">(<expr pos:start="27:16" pos:end="27:32"><operator pos:start="27:16" pos:end="27:16">!</operator><operator pos:start="27:17" pos:end="27:17">(</operator><name pos:start="27:18" pos:end="27:24">mask_mv</name> <operator pos:start="27:26" pos:end="27:26">&amp;</operator> <name pos:start="27:28" pos:end="27:31">edge</name><operator pos:start="27:32" pos:end="27:32">)</operator></expr>)</condition> <block pos:start="27:35" pos:end="141:13">{<block_content pos:start="29:17" pos:end="139:17">

                <if_stmt pos:start="29:17" pos:end="139:17"><if pos:start="29:17" pos:end="105:17">if<condition pos:start="29:19" pos:end="29:25">(<expr pos:start="29:20" pos:end="29:24"><name pos:start="29:20" pos:end="29:24">bidir</name></expr>)</condition> <block pos:start="29:27" pos:end="105:17">{<block_content pos:start="31:21" pos:end="103:22">

                    <asm pos:start="31:21" pos:end="103:22">__asm__ <specifier pos:start="31:29" pos:end="31:36">volatile</specifier>(

                        "movd         (%1,%0), %%mm2 \n"

                        "punpckldq  40(%1,%0), %%mm2 \n" <comment type="line" pos:start="35:58" pos:end="35:82">// { ref0[bn], ref1[bn] }</comment>

                        "pshufw $0x44,   (%1), %%mm0 \n" <comment type="line" pos:start="37:58" pos:end="37:80">// { ref0[b], ref0[b] }</comment>

                        "pshufw $0x44, 40(%1), %%mm1 \n" <comment type="line" pos:start="39:58" pos:end="39:80">// { ref1[b], ref1[b] }</comment>

                        "pshufw $0x4E, %%mm2, %%mm3 \n"

                        "psubb         %%mm2, %%mm0 \n" <comment type="line" pos:start="43:57" pos:end="43:99">// { ref0[b]!=ref0[bn], ref0[b]!=ref1[bn] }</comment>

                        "psubb         %%mm3, %%mm1 \n" <comment type="line" pos:start="45:57" pos:end="45:99">// { ref1[b]!=ref1[bn], ref1[b]!=ref0[bn] }</comment>

                        "1: \n"

                        "por           %%mm1, %%mm0 \n"

                        "movq      (%2,%0,4), %%mm1 \n"

                        "movq     8(%2,%0,4), %%mm2 \n"

                        "movq          %%mm1, %%mm3 \n"

                        "movq          %%mm2, %%mm4 \n"

                        "psubw          (%2), %%mm1 \n"

                        "psubw         8(%2), %%mm2 \n"

                        "psubw       160(%2), %%mm3 \n"

                        "psubw       168(%2), %%mm4 \n"

                        "packsswb      %%mm2, %%mm1 \n"

                        "packsswb      %%mm4, %%mm3 \n"

                        "paddb         %%mm6, %%mm1 \n"

                        "paddb         %%mm6, %%mm3 \n"

                        "psubusb       %%mm5, %%mm1 \n" <comment type="line" pos:start="75:57" pos:end="75:87">// abs(mv[b] - mv[bn]) &gt;= limit</comment>

                        "psubusb       %%mm5, %%mm3 \n"

                        "packsswb      %%mm3, %%mm1 \n"

                        "add $40, %0 \n"

                        "cmp $40, %0 \n"

                        "jl 1b \n"

                        "sub $80, %0 \n"

                        "pshufw $0x4E, %%mm1, %%mm1 \n"

                        "por           %%mm1, %%mm0 \n"

                        "pshufw $0x4E, %%mm0, %%mm1 \n"

                        "pminub        %%mm1, %%mm0 \n"

                        ::"r"(d_idx),

                          "r"(ref[0]+b_idx),

                          "r"(mv[0]+b_idx)

                    );</asm>

                </block_content>}</block></if> <else pos:start="105:19" pos:end="139:17">else <block pos:start="105:24" pos:end="139:17">{<block_content pos:start="107:21" pos:end="137:22">

                    <asm pos:start="107:21" pos:end="137:22">__asm__ <specifier pos:start="107:29" pos:end="107:36">volatile</specifier>(

                        "movd        (%1), %%mm0 \n"

                        "psubb    (%1,%0), %%mm0 \n" <comment type="line" pos:start="111:54" pos:end="111:73">// ref[b] != ref[bn]</comment>

                        "movq        (%2), %%mm1 \n"

                        "movq       8(%2), %%mm2 \n"

                        "psubw  (%2,%0,4), %%mm1 \n"

                        "psubw 8(%2,%0,4), %%mm2 \n"

                        "packsswb   %%mm2, %%mm1 \n"

                        "paddb      %%mm6, %%mm1 \n"

                        "psubusb    %%mm5, %%mm1 \n" <comment type="line" pos:start="125:54" pos:end="125:84">// abs(mv[b] - mv[bn]) &gt;= limit</comment>

                        "packsswb   %%mm1, %%mm1 \n"

                        "por        %%mm1, %%mm0 \n"

                        ::"r"(d_idx),

                          "r"(ref[0]+b_idx),

                          "r"(mv[0]+b_idx)

                    );</asm>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <asm pos:start="143:13" pos:end="153:14">__asm__ <specifier pos:start="143:21" pos:end="143:28">volatile</specifier>(

                "movd %0, %%mm1 \n"

                "por  %1, %%mm1 \n" <comment type="line" pos:start="147:37" pos:end="147:56">// nnz[b] || nnz[bn]</comment>

                ::"m"(nnz[b_idx]),

                  "m"(nnz[b_idx+d_idx])

            );</asm>

            <asm pos:start="155:13" pos:end="175:14">__asm__ <specifier pos:start="155:21" pos:end="155:28">volatile</specifier>(

                "pminub    %%mm7, %%mm1 \n"

                "pminub    %%mm7, %%mm0 \n"

                "psllw        $1, %%mm1 \n"

                "pxor      %%mm2, %%mm2 \n"

                "pmaxub    %%mm0, %%mm1 \n"

                "punpcklbw %%mm2, %%mm1 \n"

                "movq      %%mm1, %0    \n"

                :"=m"(*bS[dir][edge])

                ::"memory"

            );</asm>

        </block_content>}</block></for>

</block_content>}</block></function>
</unit>
