<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10535.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">bool</name></type> <name pos:start="1:6" pos:end="1:27">write_list_to_cpustate</name><parameter_list pos:start="1:28" pos:end="1:40">(<parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:36"><name pos:start="1:29" pos:end="1:34">ARMCPU</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:14">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:11">ok</name> <init pos:start="7:13" pos:end="7:18">= <expr pos:start="7:15" pos:end="7:18"><name pos:start="7:15" pos:end="7:18">true</name></expr></init></decl>;</decl_stmt>



    <for pos:start="11:5" pos:end="53:5">for <control pos:start="11:9" pos:end="11:46">(<init pos:start="11:10" pos:end="11:15"><expr pos:start="11:10" pos:end="11:14"><name pos:start="11:10" pos:end="11:10">i</name> <operator pos:start="11:12" pos:end="11:12">=</operator> <literal type="number" pos:start="11:14" pos:end="11:14">0</literal></expr>;</init> <condition pos:start="11:17" pos:end="11:41"><expr pos:start="11:17" pos:end="11:40"><name pos:start="11:17" pos:end="11:17">i</name> <operator pos:start="11:19" pos:end="11:19">&lt;</operator> <name pos:start="11:21" pos:end="11:40"><name pos:start="11:21" pos:end="11:23">cpu</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:40">cpreg_array_len</name></name></expr>;</condition> <incr pos:start="11:43" pos:end="11:45"><expr pos:start="11:43" pos:end="11:45"><name pos:start="11:43" pos:end="11:43">i</name><operator pos:start="11:44" pos:end="11:45">++</operator></expr></incr>)</control> <block pos:start="11:48" pos:end="53:5">{<block_content pos:start="13:9" pos:end="51:9">

        <decl_stmt pos:start="13:9" pos:end="13:65"><decl pos:start="13:9" pos:end="13:64"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint32_t</name></type> <name pos:start="13:18" pos:end="13:23">regidx</name> <init pos:start="13:25" pos:end="13:64">= <expr pos:start="13:27" pos:end="13:64"><call pos:start="13:27" pos:end="13:64"><name pos:start="13:27" pos:end="13:41">kvm_to_cpreg_id</name><argument_list pos:start="13:42" pos:end="13:64">(<argument pos:start="13:43" pos:end="13:63"><expr pos:start="13:43" pos:end="13:63"><name pos:start="13:43" pos:end="13:63"><name pos:start="13:43" pos:end="13:45">cpu</name><operator pos:start="13:46" pos:end="13:47">-&gt;</operator><name pos:start="13:48" pos:end="13:60">cpreg_indexes</name><index pos:start="13:61" pos:end="13:63">[<expr pos:start="13:62" pos:end="13:62"><name pos:start="13:62" pos:end="13:62">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:42"><decl pos:start="15:9" pos:end="15:41"><type pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:16">uint64_t</name></type> <name pos:start="15:18" pos:end="15:18">v</name> <init pos:start="15:20" pos:end="15:41">= <expr pos:start="15:22" pos:end="15:41"><name pos:start="15:22" pos:end="15:41"><name pos:start="15:22" pos:end="15:24">cpu</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:38">cpreg_values</name><index pos:start="15:39" pos:end="15:41">[<expr pos:start="15:40" pos:end="15:40"><name pos:start="15:40" pos:end="15:40">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:31"><decl pos:start="17:9" pos:end="17:30"><type pos:start="17:9" pos:end="17:28"><specifier pos:start="17:9" pos:end="17:13">const</specifier> <name pos:start="17:15" pos:end="17:26">ARMCPRegInfo</name> <modifier pos:start="17:28" pos:end="17:28">*</modifier></type><name pos:start="17:29" pos:end="17:30">ri</name></decl>;</decl_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:54"><expr pos:start="21:9" pos:end="21:53"><name pos:start="21:9" pos:end="21:10">ri</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <call pos:start="21:14" pos:end="21:53"><name pos:start="21:14" pos:end="21:31">get_arm_cp_reginfo</name><argument_list pos:start="21:32" pos:end="21:53">(<argument pos:start="21:33" pos:end="21:44"><expr pos:start="21:33" pos:end="21:44"><name pos:start="21:33" pos:end="21:44"><name pos:start="21:33" pos:end="21:35">cpu</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:44">cp_regs</name></name></expr></argument>, <argument pos:start="21:47" pos:end="21:52"><expr pos:start="21:47" pos:end="21:52"><name pos:start="21:47" pos:end="21:52">regidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:16">(<expr pos:start="23:13" pos:end="23:15"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:15">ri</name></expr>)</condition> <block pos:start="23:18" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:21">

            <expr_stmt pos:start="25:13" pos:end="25:23"><expr pos:start="25:13" pos:end="25:22"><name pos:start="25:13" pos:end="25:14">ok</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:22">false</name></expr>;</expr_stmt>

            <continue pos:start="27:13" pos:end="27:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:41">(<expr pos:start="31:13" pos:end="31:40"><name pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:14">ri</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:20">type</name></name> <operator pos:start="31:22" pos:end="31:22">&amp;</operator> <name pos:start="31:24" pos:end="31:40">ARM_CP_NO_MIGRATE</name></expr>)</condition> <block pos:start="31:43" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:21">

            <continue pos:start="33:13" pos:end="33:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="37:9" pos:end="43:11">/* Write value and confirm it reads back as written

         * (to catch read-only registers and partially read-only

         * registers where the incoming migration value doesn't match)

         */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:43"><expr pos:start="45:9" pos:end="45:42"><call pos:start="45:9" pos:end="45:42"><name pos:start="45:9" pos:end="45:24">write_raw_cp_reg</name><argument_list pos:start="45:25" pos:end="45:42">(<argument pos:start="45:26" pos:end="45:34"><expr pos:start="45:26" pos:end="45:34"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:34"><name pos:start="45:27" pos:end="45:29">cpu</name><operator pos:start="45:30" pos:end="45:31">-&gt;</operator><name pos:start="45:32" pos:end="45:34">env</name></name></expr></argument>, <argument pos:start="45:37" pos:end="45:38"><expr pos:start="45:37" pos:end="45:38"><name pos:start="45:37" pos:end="45:38">ri</name></expr></argument>, <argument pos:start="45:41" pos:end="45:41"><expr pos:start="45:41" pos:end="45:41"><name pos:start="45:41" pos:end="45:41">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:48">(<expr pos:start="47:13" pos:end="47:47"><call pos:start="47:13" pos:end="47:42"><name pos:start="47:13" pos:end="47:27">read_raw_cp_reg</name><argument_list pos:start="47:28" pos:end="47:42">(<argument pos:start="47:29" pos:end="47:37"><expr pos:start="47:29" pos:end="47:37"><operator pos:start="47:29" pos:end="47:29">&amp;</operator><name pos:start="47:30" pos:end="47:37"><name pos:start="47:30" pos:end="47:32">cpu</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:37">env</name></name></expr></argument>, <argument pos:start="47:40" pos:end="47:41"><expr pos:start="47:40" pos:end="47:41"><name pos:start="47:40" pos:end="47:41">ri</name></expr></argument>)</argument_list></call> <operator pos:start="47:44" pos:end="47:45">!=</operator> <name pos:start="47:47" pos:end="47:47">v</name></expr>)</condition> <block pos:start="47:50" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:23">

            <expr_stmt pos:start="49:13" pos:end="49:23"><expr pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:14">ok</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <name pos:start="49:18" pos:end="49:22">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="55:5" pos:end="55:14">return <expr pos:start="55:12" pos:end="55:13"><name pos:start="55:12" pos:end="55:13">ok</name></expr>;</return>

</block_content>}</block></function>
</unit>
