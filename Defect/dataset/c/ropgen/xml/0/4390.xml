<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4390.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">x86_cpu_load_features</name><parameter_list pos:start="1:34" pos:end="1:60">(<parameter pos:start="1:35" pos:end="1:45"><decl pos:start="1:35" pos:end="1:45"><type pos:start="1:35" pos:end="1:45"><name pos:start="1:35" pos:end="1:40">X86CPU</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">cpu</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:59"><decl pos:start="1:48" pos:end="1:59"><type pos:start="1:48" pos:end="1:59"><name pos:start="1:48" pos:end="1:52">Error</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier><modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:5">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CPUX86State</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">env</name> <init pos:start="5:22" pos:end="5:32">= <expr pos:start="5:24" pos:end="5:32"><operator pos:start="5:24" pos:end="5:24">&amp;</operator><name pos:start="5:25" pos:end="5:32"><name pos:start="5:25" pos:end="5:27">cpu</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:15">FeatureWord</name></type> <name pos:start="7:17" pos:end="7:17">w</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">GList</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:12">l</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="23:7">/*TODO: cpu-&gt;max_features incorrectly overwrites features

     * set using "feat=on|off". Once we fix this, we can convert

     * plus_features &amp; minus_features to global properties

     * inside x86_cpu_parse_featurestr() too.

     */</comment>

    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:26">(<expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:11">cpu</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:25">max_features</name></name></expr>)</condition> <block pos:start="25:28" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:9">

        <for pos:start="27:9" pos:end="33:9">for <control pos:start="27:13" pos:end="27:43">(<init pos:start="27:14" pos:end="27:19"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">w</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>;</init> <condition pos:start="27:21" pos:end="27:38"><expr pos:start="27:21" pos:end="27:37"><name pos:start="27:21" pos:end="27:21">w</name> <operator pos:start="27:23" pos:end="27:23">&lt;</operator> <name pos:start="27:25" pos:end="27:37">FEATURE_WORDS</name></expr>;</condition> <incr pos:start="27:40" pos:end="27:42"><expr pos:start="27:40" pos:end="27:42"><name pos:start="27:40" pos:end="27:40">w</name><operator pos:start="27:41" pos:end="27:42">++</operator></expr></incr>)</control> <block pos:start="27:45" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:71">

            <expr_stmt pos:start="29:13" pos:end="31:71"><expr pos:start="29:13" pos:end="31:70"><name pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:15">env</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:25">features</name><index pos:start="29:26" pos:end="29:28">[<expr pos:start="29:27" pos:end="29:27"><name pos:start="29:27" pos:end="29:27">w</name></expr>]</index></name> <operator pos:start="29:30" pos:end="29:30">=</operator>

                <call pos:start="31:17" pos:end="31:70"><name pos:start="31:17" pos:end="31:50">x86_cpu_get_supported_feature_word</name><argument_list pos:start="31:51" pos:end="31:70">(<argument pos:start="31:52" pos:end="31:52"><expr pos:start="31:52" pos:end="31:52"><name pos:start="31:52" pos:end="31:52">w</name></expr></argument>, <argument pos:start="31:55" pos:end="31:69"><expr pos:start="31:55" pos:end="31:69"><name pos:start="31:55" pos:end="31:69"><name pos:start="31:55" pos:end="31:57">cpu</name><operator pos:start="31:58" pos:end="31:59">-&gt;</operator><name pos:start="31:60" pos:end="31:69">migratable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <for pos:start="39:5" pos:end="51:5">for <control pos:start="39:9" pos:end="39:43">(<init pos:start="39:10" pos:end="39:27"><expr pos:start="39:10" pos:end="39:26"><name pos:start="39:10" pos:end="39:10">l</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <name pos:start="39:14" pos:end="39:26">plus_features</name></expr>;</init> <condition pos:start="39:29" pos:end="39:30"><expr pos:start="39:29" pos:end="39:29"><name pos:start="39:29" pos:end="39:29">l</name></expr>;</condition> <incr pos:start="39:32" pos:end="39:42"><expr pos:start="39:32" pos:end="39:42"><name pos:start="39:32" pos:end="39:32">l</name> <operator pos:start="39:34" pos:end="39:34">=</operator> <name pos:start="39:36" pos:end="39:42"><name pos:start="39:36" pos:end="39:36">l</name><operator pos:start="39:37" pos:end="39:38">-&gt;</operator><name pos:start="39:39" pos:end="39:42">next</name></name></expr></incr>)</control> <block pos:start="39:45" pos:end="51:5">{<block_content pos:start="41:9" pos:end="49:9">

        <decl_stmt pos:start="41:9" pos:end="41:35"><decl pos:start="41:9" pos:end="41:34"><type pos:start="41:9" pos:end="41:20"><specifier pos:start="41:9" pos:end="41:13">const</specifier> <name pos:start="41:15" pos:end="41:18">char</name> <modifier pos:start="41:20" pos:end="41:20">*</modifier></type><name pos:start="41:21" pos:end="41:24">prop</name> <init pos:start="41:26" pos:end="41:34">= <expr pos:start="41:28" pos:end="41:34"><name pos:start="41:28" pos:end="41:34"><name pos:start="41:28" pos:end="41:28">l</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:34">data</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:70"><expr pos:start="43:9" pos:end="43:69"><call pos:start="43:9" pos:end="43:69"><name pos:start="43:9" pos:end="43:32">object_property_set_bool</name><argument_list pos:start="43:33" pos:end="43:69">(<argument pos:start="43:34" pos:end="43:44"><expr pos:start="43:34" pos:end="43:44"><call pos:start="43:34" pos:end="43:44"><name pos:start="43:34" pos:end="43:39">OBJECT</name><argument_list pos:start="43:40" pos:end="43:44">(<argument pos:start="43:41" pos:end="43:43"><expr pos:start="43:41" pos:end="43:43"><name pos:start="43:41" pos:end="43:43">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="43:47" pos:end="43:50"><expr pos:start="43:47" pos:end="43:50"><name pos:start="43:47" pos:end="43:50">true</name></expr></argument>, <argument pos:start="43:53" pos:end="43:56"><expr pos:start="43:53" pos:end="43:56"><name pos:start="43:53" pos:end="43:56">prop</name></expr></argument>, <argument pos:start="43:59" pos:end="43:68"><expr pos:start="43:59" pos:end="43:68"><operator pos:start="43:59" pos:end="43:59">&amp;</operator><name pos:start="43:60" pos:end="43:68">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:22">(<expr pos:start="45:13" pos:end="45:21"><name pos:start="45:13" pos:end="45:21">local_err</name></expr>)</condition> <block pos:start="45:24" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:21">

            <goto pos:start="47:13" pos:end="47:21">goto <name pos:start="47:18" pos:end="47:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="55:5" pos:end="67:5">for <control pos:start="55:9" pos:end="55:44">(<init pos:start="55:10" pos:end="55:28"><expr pos:start="55:10" pos:end="55:27"><name pos:start="55:10" pos:end="55:10">l</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:27">minus_features</name></expr>;</init> <condition pos:start="55:30" pos:end="55:31"><expr pos:start="55:30" pos:end="55:30"><name pos:start="55:30" pos:end="55:30">l</name></expr>;</condition> <incr pos:start="55:33" pos:end="55:43"><expr pos:start="55:33" pos:end="55:43"><name pos:start="55:33" pos:end="55:33">l</name> <operator pos:start="55:35" pos:end="55:35">=</operator> <name pos:start="55:37" pos:end="55:43"><name pos:start="55:37" pos:end="55:37">l</name><operator pos:start="55:38" pos:end="55:39">-&gt;</operator><name pos:start="55:40" pos:end="55:43">next</name></name></expr></incr>)</control> <block pos:start="55:46" pos:end="67:5">{<block_content pos:start="57:9" pos:end="65:9">

        <decl_stmt pos:start="57:9" pos:end="57:35"><decl pos:start="57:9" pos:end="57:34"><type pos:start="57:9" pos:end="57:20"><specifier pos:start="57:9" pos:end="57:13">const</specifier> <name pos:start="57:15" pos:end="57:18">char</name> <modifier pos:start="57:20" pos:end="57:20">*</modifier></type><name pos:start="57:21" pos:end="57:24">prop</name> <init pos:start="57:26" pos:end="57:34">= <expr pos:start="57:28" pos:end="57:34"><name pos:start="57:28" pos:end="57:34"><name pos:start="57:28" pos:end="57:28">l</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:34">data</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:71"><expr pos:start="59:9" pos:end="59:70"><call pos:start="59:9" pos:end="59:70"><name pos:start="59:9" pos:end="59:32">object_property_set_bool</name><argument_list pos:start="59:33" pos:end="59:70">(<argument pos:start="59:34" pos:end="59:44"><expr pos:start="59:34" pos:end="59:44"><call pos:start="59:34" pos:end="59:44"><name pos:start="59:34" pos:end="59:39">OBJECT</name><argument_list pos:start="59:40" pos:end="59:44">(<argument pos:start="59:41" pos:end="59:43"><expr pos:start="59:41" pos:end="59:43"><name pos:start="59:41" pos:end="59:43">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="59:47" pos:end="59:51"><expr pos:start="59:47" pos:end="59:51"><name pos:start="59:47" pos:end="59:51">false</name></expr></argument>, <argument pos:start="59:54" pos:end="59:57"><expr pos:start="59:54" pos:end="59:57"><name pos:start="59:54" pos:end="59:57">prop</name></expr></argument>, <argument pos:start="59:60" pos:end="59:69"><expr pos:start="59:60" pos:end="59:69"><operator pos:start="59:60" pos:end="59:60">&amp;</operator><name pos:start="59:61" pos:end="59:69">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:22">(<expr pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:21">local_err</name></expr>)</condition> <block pos:start="61:24" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:21">

            <goto pos:start="63:13" pos:end="63:21">goto <name pos:start="63:18" pos:end="63:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:43">(<expr pos:start="71:9" pos:end="71:42"><operator pos:start="71:9" pos:end="71:9">!</operator><call pos:start="71:10" pos:end="71:22"><name pos:start="71:10" pos:end="71:20">kvm_enabled</name><argument_list pos:start="71:21" pos:end="71:22">()</argument_list></call> <operator pos:start="71:24" pos:end="71:25">||</operator> <operator pos:start="71:27" pos:end="71:27">!</operator><name pos:start="71:28" pos:end="71:42"><name pos:start="71:28" pos:end="71:30">cpu</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:42">expose_kvm</name></name></expr>)</condition> <block pos:start="71:45" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:36">

        <expr_stmt pos:start="73:9" pos:end="73:36"><expr pos:start="73:9" pos:end="73:35"><name pos:start="73:9" pos:end="73:31"><name pos:start="73:9" pos:end="73:11">env</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:21">features</name><index pos:start="73:22" pos:end="73:31">[<expr pos:start="73:23" pos:end="73:30"><name pos:start="73:23" pos:end="73:30">FEAT_KVM</name></expr>]</index></name> <operator pos:start="73:33" pos:end="73:33">=</operator> <literal type="number" pos:start="73:35" pos:end="73:35">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:41"><expr pos:start="79:5" pos:end="79:40"><call pos:start="79:5" pos:end="79:40"><name pos:start="79:5" pos:end="79:35">x86_cpu_enable_xsave_components</name><argument_list pos:start="79:36" pos:end="79:40">(<argument pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:39">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:70">/* CPUID[EAX=7,ECX=0].EBX always increased level automatically: */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:49"><expr pos:start="85:5" pos:end="85:48"><call pos:start="85:5" pos:end="85:48"><name pos:start="85:5" pos:end="85:29">x86_cpu_adjust_feat_level</name><argument_list pos:start="85:30" pos:end="85:48">(<argument pos:start="85:31" pos:end="85:33"><expr pos:start="85:31" pos:end="85:33"><name pos:start="85:31" pos:end="85:33">cpu</name></expr></argument>, <argument pos:start="85:36" pos:end="85:47"><expr pos:start="85:36" pos:end="85:47"><name pos:start="85:36" pos:end="85:47">FEAT_7_0_EBX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="117:5"><if pos:start="87:5" pos:end="117:5">if <condition pos:start="87:8" pos:end="87:35">(<expr pos:start="87:9" pos:end="87:34"><name pos:start="87:9" pos:end="87:34"><name pos:start="87:9" pos:end="87:11">cpu</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:34">full_cpuid_auto_level</name></name></expr>)</condition> <block pos:start="87:37" pos:end="117:5">{<block_content pos:start="89:9" pos:end="115:9">

        <expr_stmt pos:start="89:9" pos:end="89:51"><expr pos:start="89:9" pos:end="89:50"><call pos:start="89:9" pos:end="89:50"><name pos:start="89:9" pos:end="89:33">x86_cpu_adjust_feat_level</name><argument_list pos:start="89:34" pos:end="89:50">(<argument pos:start="89:35" pos:end="89:37"><expr pos:start="89:35" pos:end="89:37"><name pos:start="89:35" pos:end="89:37">cpu</name></expr></argument>, <argument pos:start="89:40" pos:end="89:49"><expr pos:start="89:40" pos:end="89:49"><name pos:start="89:40" pos:end="89:49">FEAT_1_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:51"><expr pos:start="91:9" pos:end="91:50"><call pos:start="91:9" pos:end="91:50"><name pos:start="91:9" pos:end="91:33">x86_cpu_adjust_feat_level</name><argument_list pos:start="91:34" pos:end="91:50">(<argument pos:start="91:35" pos:end="91:37"><expr pos:start="91:35" pos:end="91:37"><name pos:start="91:35" pos:end="91:37">cpu</name></expr></argument>, <argument pos:start="91:40" pos:end="91:49"><expr pos:start="91:40" pos:end="91:49"><name pos:start="91:40" pos:end="91:49">FEAT_1_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:51"><expr pos:start="93:9" pos:end="93:50"><call pos:start="93:9" pos:end="93:50"><name pos:start="93:9" pos:end="93:33">x86_cpu_adjust_feat_level</name><argument_list pos:start="93:34" pos:end="93:50">(<argument pos:start="93:35" pos:end="93:37"><expr pos:start="93:35" pos:end="93:37"><name pos:start="93:35" pos:end="93:37">cpu</name></expr></argument>, <argument pos:start="93:40" pos:end="93:49"><expr pos:start="93:40" pos:end="93:49"><name pos:start="93:40" pos:end="93:49">FEAT_6_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:53"><expr pos:start="95:9" pos:end="95:52"><call pos:start="95:9" pos:end="95:52"><name pos:start="95:9" pos:end="95:33">x86_cpu_adjust_feat_level</name><argument_list pos:start="95:34" pos:end="95:52">(<argument pos:start="95:35" pos:end="95:37"><expr pos:start="95:35" pos:end="95:37"><name pos:start="95:35" pos:end="95:37">cpu</name></expr></argument>, <argument pos:start="95:40" pos:end="95:51"><expr pos:start="95:40" pos:end="95:51"><name pos:start="95:40" pos:end="95:51">FEAT_7_0_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:59"><expr pos:start="97:9" pos:end="97:58"><call pos:start="97:9" pos:end="97:58"><name pos:start="97:9" pos:end="97:33">x86_cpu_adjust_feat_level</name><argument_list pos:start="97:34" pos:end="97:58">(<argument pos:start="97:35" pos:end="97:37"><expr pos:start="97:35" pos:end="97:37"><name pos:start="97:35" pos:end="97:37">cpu</name></expr></argument>, <argument pos:start="97:40" pos:end="97:57"><expr pos:start="97:40" pos:end="97:57"><name pos:start="97:40" pos:end="97:57">FEAT_8000_0001_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:59"><expr pos:start="99:9" pos:end="99:58"><call pos:start="99:9" pos:end="99:58"><name pos:start="99:9" pos:end="99:33">x86_cpu_adjust_feat_level</name><argument_list pos:start="99:34" pos:end="99:58">(<argument pos:start="99:35" pos:end="99:37"><expr pos:start="99:35" pos:end="99:37"><name pos:start="99:35" pos:end="99:37">cpu</name></expr></argument>, <argument pos:start="99:40" pos:end="99:57"><expr pos:start="99:40" pos:end="99:57"><name pos:start="99:40" pos:end="99:57">FEAT_8000_0001_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:59"><expr pos:start="101:9" pos:end="101:58"><call pos:start="101:9" pos:end="101:58"><name pos:start="101:9" pos:end="101:33">x86_cpu_adjust_feat_level</name><argument_list pos:start="101:34" pos:end="101:58">(<argument pos:start="101:35" pos:end="101:37"><expr pos:start="101:35" pos:end="101:37"><name pos:start="101:35" pos:end="101:37">cpu</name></expr></argument>, <argument pos:start="101:40" pos:end="101:57"><expr pos:start="101:40" pos:end="101:57"><name pos:start="101:40" pos:end="101:57">FEAT_8000_0007_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:59"><expr pos:start="103:9" pos:end="103:58"><call pos:start="103:9" pos:end="103:58"><name pos:start="103:9" pos:end="103:33">x86_cpu_adjust_feat_level</name><argument_list pos:start="103:34" pos:end="103:58">(<argument pos:start="103:35" pos:end="103:37"><expr pos:start="103:35" pos:end="103:37"><name pos:start="103:35" pos:end="103:37">cpu</name></expr></argument>, <argument pos:start="103:40" pos:end="103:57"><expr pos:start="103:40" pos:end="103:57"><name pos:start="103:40" pos:end="103:57">FEAT_C000_0001_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:49"><expr pos:start="105:9" pos:end="105:48"><call pos:start="105:9" pos:end="105:48"><name pos:start="105:9" pos:end="105:33">x86_cpu_adjust_feat_level</name><argument_list pos:start="105:34" pos:end="105:48">(<argument pos:start="105:35" pos:end="105:37"><expr pos:start="105:35" pos:end="105:37"><name pos:start="105:35" pos:end="105:37">cpu</name></expr></argument>, <argument pos:start="105:40" pos:end="105:47"><expr pos:start="105:40" pos:end="105:47"><name pos:start="105:40" pos:end="105:47">FEAT_SVM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:51"><expr pos:start="107:9" pos:end="107:50"><call pos:start="107:9" pos:end="107:50"><name pos:start="107:9" pos:end="107:33">x86_cpu_adjust_feat_level</name><argument_list pos:start="107:34" pos:end="107:50">(<argument pos:start="107:35" pos:end="107:37"><expr pos:start="107:35" pos:end="107:37"><name pos:start="107:35" pos:end="107:37">cpu</name></expr></argument>, <argument pos:start="107:40" pos:end="107:49"><expr pos:start="107:40" pos:end="107:49"><name pos:start="107:40" pos:end="107:49">FEAT_XSAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="109:9" pos:end="109:44">/* SVM requires CPUID[0x8000000A] */</comment>

        <if_stmt pos:start="111:9" pos:end="115:9"><if pos:start="111:9" pos:end="115:9">if <condition pos:start="111:12" pos:end="111:63">(<expr pos:start="111:13" pos:end="111:62"><name pos:start="111:13" pos:end="111:45"><name pos:start="111:13" pos:end="111:15">env</name><operator pos:start="111:16" pos:end="111:17">-&gt;</operator><name pos:start="111:18" pos:end="111:25">features</name><index pos:start="111:26" pos:end="111:45">[<expr pos:start="111:27" pos:end="111:44"><name pos:start="111:27" pos:end="111:44">FEAT_8000_0001_ECX</name></expr>]</index></name> <operator pos:start="111:47" pos:end="111:47">&amp;</operator> <name pos:start="111:49" pos:end="111:62">CPUID_EXT3_SVM</name></expr>)</condition> <block pos:start="111:65" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:74">

            <expr_stmt pos:start="113:13" pos:end="113:74"><expr pos:start="113:13" pos:end="113:73"><call pos:start="113:13" pos:end="113:73"><name pos:start="113:13" pos:end="113:32">x86_cpu_adjust_level</name><argument_list pos:start="113:33" pos:end="113:73">(<argument pos:start="113:34" pos:end="113:36"><expr pos:start="113:34" pos:end="113:36"><name pos:start="113:34" pos:end="113:36">cpu</name></expr></argument>, <argument pos:start="113:39" pos:end="113:60"><expr pos:start="113:39" pos:end="113:60"><operator pos:start="113:39" pos:end="113:39">&amp;</operator><name pos:start="113:40" pos:end="113:60"><name pos:start="113:40" pos:end="113:42">env</name><operator pos:start="113:43" pos:end="113:44">-&gt;</operator><name pos:start="113:45" pos:end="113:60">cpuid_min_xlevel</name></name></expr></argument>, <argument pos:start="113:63" pos:end="113:72"><expr pos:start="113:63" pos:end="113:72"><literal type="number" pos:start="113:63" pos:end="113:72">0x8000000A</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:76">/* Set cpuid_*level* based on cpuid_min_*level, if not explicitly set */</comment>

    <if_stmt pos:start="123:5" pos:end="127:5"><if pos:start="123:5" pos:end="127:5">if <condition pos:start="123:8" pos:end="123:39">(<expr pos:start="123:9" pos:end="123:38"><name pos:start="123:9" pos:end="123:24"><name pos:start="123:9" pos:end="123:11">env</name><operator pos:start="123:12" pos:end="123:13">-&gt;</operator><name pos:start="123:14" pos:end="123:24">cpuid_level</name></name> <operator pos:start="123:26" pos:end="123:27">==</operator> <name pos:start="123:29" pos:end="123:38">UINT32_MAX</name></expr>)</condition> <block pos:start="123:41" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:48">

        <expr_stmt pos:start="125:9" pos:end="125:48"><expr pos:start="125:9" pos:end="125:47"><name pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:11">env</name><operator pos:start="125:12" pos:end="125:13">-&gt;</operator><name pos:start="125:14" pos:end="125:24">cpuid_level</name></name> <operator pos:start="125:26" pos:end="125:26">=</operator> <name pos:start="125:28" pos:end="125:47"><name pos:start="125:28" pos:end="125:30">env</name><operator pos:start="125:31" pos:end="125:32">-&gt;</operator><name pos:start="125:33" pos:end="125:47">cpuid_min_level</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="129:5" pos:end="133:5"><if pos:start="129:5" pos:end="133:5">if <condition pos:start="129:8" pos:end="129:40">(<expr pos:start="129:9" pos:end="129:39"><name pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:11">env</name><operator pos:start="129:12" pos:end="129:13">-&gt;</operator><name pos:start="129:14" pos:end="129:25">cpuid_xlevel</name></name> <operator pos:start="129:27" pos:end="129:28">==</operator> <name pos:start="129:30" pos:end="129:39">UINT32_MAX</name></expr>)</condition> <block pos:start="129:42" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:50">

        <expr_stmt pos:start="131:9" pos:end="131:50"><expr pos:start="131:9" pos:end="131:49"><name pos:start="131:9" pos:end="131:25"><name pos:start="131:9" pos:end="131:11">env</name><operator pos:start="131:12" pos:end="131:13">-&gt;</operator><name pos:start="131:14" pos:end="131:25">cpuid_xlevel</name></name> <operator pos:start="131:27" pos:end="131:27">=</operator> <name pos:start="131:29" pos:end="131:49"><name pos:start="131:29" pos:end="131:31">env</name><operator pos:start="131:32" pos:end="131:33">-&gt;</operator><name pos:start="131:34" pos:end="131:49">cpuid_min_xlevel</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="135:5" pos:end="139:5"><if pos:start="135:5" pos:end="139:5">if <condition pos:start="135:8" pos:end="135:41">(<expr pos:start="135:9" pos:end="135:40"><name pos:start="135:9" pos:end="135:26"><name pos:start="135:9" pos:end="135:11">env</name><operator pos:start="135:12" pos:end="135:13">-&gt;</operator><name pos:start="135:14" pos:end="135:26">cpuid_xlevel2</name></name> <operator pos:start="135:28" pos:end="135:29">==</operator> <name pos:start="135:31" pos:end="135:40">UINT32_MAX</name></expr>)</condition> <block pos:start="135:43" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:52">

        <expr_stmt pos:start="137:9" pos:end="137:52"><expr pos:start="137:9" pos:end="137:51"><name pos:start="137:9" pos:end="137:26"><name pos:start="137:9" pos:end="137:11">env</name><operator pos:start="137:12" pos:end="137:13">-&gt;</operator><name pos:start="137:14" pos:end="137:26">cpuid_xlevel2</name></name> <operator pos:start="137:28" pos:end="137:28">=</operator> <name pos:start="137:30" pos:end="137:51"><name pos:start="137:30" pos:end="137:32">env</name><operator pos:start="137:33" pos:end="137:34">-&gt;</operator><name pos:start="137:35" pos:end="137:51">cpuid_min_xlevel2</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="143:1" pos:end="143:4"><name pos:start="143:1" pos:end="143:3">out</name>:</label>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:26">(<expr pos:start="145:9" pos:end="145:25"><name pos:start="145:9" pos:end="145:17">local_err</name> <operator pos:start="145:19" pos:end="145:20">!=</operator> <name pos:start="145:22" pos:end="145:25">NULL</name></expr>)</condition> <block pos:start="145:28" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:41">

        <expr_stmt pos:start="147:9" pos:end="147:41"><expr pos:start="147:9" pos:end="147:40"><call pos:start="147:9" pos:end="147:40"><name pos:start="147:9" pos:end="147:23">error_propagate</name><argument_list pos:start="147:24" pos:end="147:40">(<argument pos:start="147:25" pos:end="147:28"><expr pos:start="147:25" pos:end="147:28"><name pos:start="147:25" pos:end="147:28">errp</name></expr></argument>, <argument pos:start="147:31" pos:end="147:39"><expr pos:start="147:31" pos:end="147:39"><name pos:start="147:31" pos:end="147:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
