<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10880.c" pos:tabs="8"><function pos:start="1:1" pos:end="325:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">jpeg_parse_packet</name><parameter_list pos:start="1:29" pos:end="7:39">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:71"><decl pos:start="1:52" pos:end="1:71"><type pos:start="1:52" pos:end="1:71"><name pos:start="1:52" pos:end="1:65">PayloadContext</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:71">jpeg</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:41"><decl pos:start="3:30" pos:end="3:41"><type pos:start="3:30" pos:end="3:41"><name pos:start="3:30" pos:end="3:37">AVStream</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:41">st</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:56"><decl pos:start="3:44" pos:end="3:56"><type pos:start="3:44" pos:end="3:56"><name pos:start="3:44" pos:end="3:51">AVPacket</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:56">pkt</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:77"><decl pos:start="3:59" pos:end="3:77"><type pos:start="3:59" pos:end="3:77"><name pos:start="3:59" pos:end="3:66">uint32_t</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:77">timestamp</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:47"><decl pos:start="5:30" pos:end="5:47"><type pos:start="5:30" pos:end="5:47"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:42">uint8_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:47">buf</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:56"><decl pos:start="5:50" pos:end="5:56"><type pos:start="5:50" pos:end="5:56"><name pos:start="5:50" pos:end="5:52">int</name></type> <name pos:start="5:54" pos:end="5:56">len</name></decl></parameter>, <parameter pos:start="5:59" pos:end="5:70"><decl pos:start="5:59" pos:end="5:70"><type pos:start="5:59" pos:end="5:70"><name pos:start="5:59" pos:end="5:66">uint16_t</name></type> <name pos:start="5:68" pos:end="5:70">seq</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:38"><decl pos:start="7:30" pos:end="7:38"><type pos:start="7:30" pos:end="7:38"><name pos:start="7:30" pos:end="7:32">int</name></type> <name pos:start="7:34" pos:end="7:38">flags</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="325:1">{<block_content pos:start="11:5" pos:end="323:27">

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type> <name pos:start="11:13" pos:end="11:16">type</name></decl>, <decl pos:start="11:19" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:19" pos:end="11:19">q</name></decl>, <decl pos:start="11:22" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:22" pos:end="11:26">width</name></decl>, <decl pos:start="11:29" pos:end="11:34"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:29" pos:end="11:34">height</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:33"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">qtables</name> <init pos:start="13:28" pos:end="13:33">= <expr pos:start="13:30" pos:end="13:33"><name pos:start="13:30" pos:end="13:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:23">qtable_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:16">off</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">len</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">8</literal></expr>)</condition> <block pos:start="23:18" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:35">

        <expr_stmt pos:start="25:9" pos:end="25:66"><expr pos:start="25:9" pos:end="25:65"><call pos:start="25:9" pos:end="25:65"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:65">(<argument pos:start="25:16" pos:end="25:18"><expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">ctx</name></expr></argument>, <argument pos:start="25:21" pos:end="25:32"><expr pos:start="25:21" pos:end="25:32"><name pos:start="25:21" pos:end="25:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:35" pos:end="25:64"><expr pos:start="25:35" pos:end="25:64"><literal type="string" pos:start="25:35" pos:end="25:64">"Too short RTP/JPEG packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:35">return <expr pos:start="27:16" pos:end="27:34"><name pos:start="27:16" pos:end="27:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:37">/* Parse the main JPEG header. */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:7">off</name>    <operator pos:start="35:12" pos:end="35:12">=</operator> <call pos:start="35:14" pos:end="35:29"><name pos:start="35:14" pos:end="35:20">AV_RB24</name><argument_list pos:start="35:21" pos:end="35:29">(<argument pos:start="35:22" pos:end="35:28"><expr pos:start="35:22" pos:end="35:28"><name pos:start="35:22" pos:end="35:24">buf</name> <operator pos:start="35:26" pos:end="35:26">+</operator> <literal type="number" pos:start="35:28" pos:end="35:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="35:33" pos:end="35:58">/* fragment byte offset */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:8">type</name>   <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:28"><name pos:start="37:14" pos:end="37:19">AV_RB8</name><argument_list pos:start="37:20" pos:end="37:28">(<argument pos:start="37:21" pos:end="37:27"><expr pos:start="37:21" pos:end="37:27"><name pos:start="37:21" pos:end="37:23">buf</name> <operator pos:start="37:25" pos:end="37:25">+</operator> <literal type="number" pos:start="37:27" pos:end="37:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="37:33" pos:end="37:63">/* id of jpeg decoder params */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:29"><expr pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:5">q</name>      <operator pos:start="39:12" pos:end="39:12">=</operator> <call pos:start="39:14" pos:end="39:28"><name pos:start="39:14" pos:end="39:19">AV_RB8</name><argument_list pos:start="39:20" pos:end="39:28">(<argument pos:start="39:21" pos:end="39:27"><expr pos:start="39:21" pos:end="39:27"><name pos:start="39:21" pos:end="39:23">buf</name> <operator pos:start="39:25" pos:end="39:25">+</operator> <literal type="number" pos:start="39:27" pos:end="39:27">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="39:33" pos:end="39:71">/* quantization factor (or table id) */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:29"><expr pos:start="41:5" pos:end="41:28"><name pos:start="41:5" pos:end="41:9">width</name>  <operator pos:start="41:12" pos:end="41:12">=</operator> <call pos:start="41:14" pos:end="41:28"><name pos:start="41:14" pos:end="41:19">AV_RB8</name><argument_list pos:start="41:20" pos:end="41:28">(<argument pos:start="41:21" pos:end="41:27"><expr pos:start="41:21" pos:end="41:27"><name pos:start="41:21" pos:end="41:23">buf</name> <operator pos:start="41:25" pos:end="41:25">+</operator> <literal type="number" pos:start="41:27" pos:end="41:27">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="41:33" pos:end="41:67">/* frame width in 8 pixel blocks */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:29"><expr pos:start="43:5" pos:end="43:28"><name pos:start="43:5" pos:end="43:10">height</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <call pos:start="43:14" pos:end="43:28"><name pos:start="43:14" pos:end="43:19">AV_RB8</name><argument_list pos:start="43:20" pos:end="43:28">(<argument pos:start="43:21" pos:end="43:27"><expr pos:start="43:21" pos:end="43:27"><name pos:start="43:21" pos:end="43:23">buf</name> <operator pos:start="43:25" pos:end="43:25">+</operator> <literal type="number" pos:start="43:27" pos:end="43:27">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="43:33" pos:end="43:68">/* frame height in 8 pixel blocks */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:13"><expr pos:start="45:5" pos:end="45:12"><name pos:start="45:5" pos:end="45:7">buf</name> <operator pos:start="45:9" pos:end="45:10">+=</operator> <literal type="number" pos:start="45:12" pos:end="45:12">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:13"><expr pos:start="47:5" pos:end="47:12"><name pos:start="47:5" pos:end="47:7">len</name> <operator pos:start="47:9" pos:end="47:10">-=</operator> <literal type="number" pos:start="47:12" pos:end="47:12">8</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:42">/* Parse the restart marker header. */</comment>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:18">(<expr pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:12">type</name> <operator pos:start="53:14" pos:end="53:14">&gt;</operator> <literal type="number" pos:start="53:16" pos:end="53:17">63</literal></expr>)</condition> <block pos:start="53:20" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:36">

        <expr_stmt pos:start="55:9" pos:end="57:66"><expr pos:start="55:9" pos:end="57:65"><call pos:start="55:9" pos:end="57:65"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="57:65">(<argument pos:start="55:16" pos:end="55:18"><expr pos:start="55:16" pos:end="55:18"><name pos:start="55:16" pos:end="55:18">ctx</name></expr></argument>, <argument pos:start="55:21" pos:end="55:32"><expr pos:start="55:21" pos:end="55:32"><name pos:start="55:21" pos:end="55:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="57:16" pos:end="57:64"><expr pos:start="57:16" pos:end="57:64"><literal type="string" pos:start="57:16" pos:end="57:64">"Unimplemented RTP/JPEG restart marker header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:36">return <expr pos:start="59:16" pos:end="59:35"><name pos:start="59:16" pos:end="59:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:17">(<expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:12">type</name> <operator pos:start="63:14" pos:end="63:14">&gt;</operator> <literal type="number" pos:start="63:16" pos:end="63:16">1</literal></expr>)</condition> <block pos:start="63:19" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:36">

        <expr_stmt pos:start="65:9" pos:end="65:76"><expr pos:start="65:9" pos:end="65:75"><call pos:start="65:9" pos:end="65:75"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:75">(<argument pos:start="65:16" pos:end="65:18"><expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ctx</name></expr></argument>, <argument pos:start="65:21" pos:end="65:32"><expr pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:35" pos:end="65:68"><expr pos:start="65:35" pos:end="65:68"><literal type="string" pos:start="65:35" pos:end="65:68">"Unimplemented RTP/JPEG type %d\n"</literal></expr></argument>, <argument pos:start="65:71" pos:end="65:74"><expr pos:start="65:71" pos:end="65:74"><name pos:start="65:71" pos:end="65:74">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:36">return <expr pos:start="67:16" pos:end="67:35"><name pos:start="67:16" pos:end="67:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:46">/* Parse the quantization table header. */</comment>

    <if_stmt pos:start="75:5" pos:end="239:5"><if pos:start="75:5" pos:end="239:5">if <condition pos:start="75:8" pos:end="75:17">(<expr pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:11">off</name> <operator pos:start="75:13" pos:end="75:14">==</operator> <literal type="number" pos:start="75:16" pos:end="75:16">0</literal></expr>)</condition> <block pos:start="75:19" pos:end="239:5">{<block_content pos:start="79:9" pos:end="237:53">

        <comment type="block" pos:start="77:9" pos:end="77:40">/* Start of JPEG data packet. */</comment>

        <decl_stmt pos:start="79:9" pos:end="79:33"><decl pos:start="79:9" pos:end="79:32"><type pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:15">uint8_t</name></type> <name pos:start="79:17" pos:end="79:32"><name pos:start="79:17" pos:end="79:27">new_qtables</name><index pos:start="79:28" pos:end="79:32">[<expr pos:start="79:29" pos:end="79:31"><literal type="number" pos:start="79:29" pos:end="79:31">128</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:26"><decl pos:start="81:9" pos:end="81:25"><type pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:15">uint8_t</name></type> <name pos:start="81:17" pos:end="81:25"><name pos:start="81:17" pos:end="81:19">hdr</name><index pos:start="81:20" pos:end="81:25">[<expr pos:start="81:21" pos:end="81:24"><literal type="number" pos:start="81:21" pos:end="81:24">1024</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="85:9" pos:end="201:9"><if pos:start="85:9" pos:end="185:9">if <condition pos:start="85:12" pos:end="85:20">(<expr pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:13">q</name> <operator pos:start="85:15" pos:end="85:15">&gt;</operator> <literal type="number" pos:start="85:17" pos:end="85:19">127</literal></expr>)</condition> <block pos:start="85:22" pos:end="185:9">{<block_content pos:start="87:13" pos:end="183:13">

            <decl_stmt pos:start="87:13" pos:end="87:30"><decl pos:start="87:13" pos:end="87:29"><type pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:19">uint8_t</name></type> <name pos:start="87:21" pos:end="87:29">precision</name></decl>;</decl_stmt>

            <if_stmt pos:start="89:13" pos:end="95:13"><if pos:start="89:13" pos:end="95:13">if <condition pos:start="89:16" pos:end="89:24">(<expr pos:start="89:17" pos:end="89:23"><name pos:start="89:17" pos:end="89:19">len</name> <operator pos:start="89:21" pos:end="89:21">&lt;</operator> <literal type="number" pos:start="89:23" pos:end="89:23">4</literal></expr>)</condition> <block pos:start="89:26" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:43">

                <expr_stmt pos:start="91:17" pos:end="91:74"><expr pos:start="91:17" pos:end="91:73"><call pos:start="91:17" pos:end="91:73"><name pos:start="91:17" pos:end="91:22">av_log</name><argument_list pos:start="91:23" pos:end="91:73">(<argument pos:start="91:24" pos:end="91:26"><expr pos:start="91:24" pos:end="91:26"><name pos:start="91:24" pos:end="91:26">ctx</name></expr></argument>, <argument pos:start="91:29" pos:end="91:40"><expr pos:start="91:29" pos:end="91:40"><name pos:start="91:29" pos:end="91:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:43" pos:end="91:72"><expr pos:start="91:43" pos:end="91:72"><literal type="string" pos:start="91:43" pos:end="91:72">"Too short RTP/JPEG packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="93:17" pos:end="93:43">return <expr pos:start="93:24" pos:end="93:42"><name pos:start="93:24" pos:end="93:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="99:13" pos:end="99:60">/* The first byte is reserved for future use. */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:41"><expr pos:start="101:13" pos:end="101:40"><name pos:start="101:13" pos:end="101:21">precision</name>  <operator pos:start="101:24" pos:end="101:24">=</operator> <call pos:start="101:26" pos:end="101:40"><name pos:start="101:26" pos:end="101:31">AV_RB8</name><argument_list pos:start="101:32" pos:end="101:40">(<argument pos:start="101:33" pos:end="101:39"><expr pos:start="101:33" pos:end="101:39"><name pos:start="101:33" pos:end="101:35">buf</name> <operator pos:start="101:37" pos:end="101:37">+</operator> <literal type="number" pos:start="101:39" pos:end="101:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="101:46" pos:end="101:71">/* size of coefficients */</comment>

            <expr_stmt pos:start="103:13" pos:end="103:42"><expr pos:start="103:13" pos:end="103:41"><name pos:start="103:13" pos:end="103:22">qtable_len</name> <operator pos:start="103:24" pos:end="103:24">=</operator> <call pos:start="103:26" pos:end="103:41"><name pos:start="103:26" pos:end="103:32">AV_RB16</name><argument_list pos:start="103:33" pos:end="103:41">(<argument pos:start="103:34" pos:end="103:40"><expr pos:start="103:34" pos:end="103:40"><name pos:start="103:34" pos:end="103:36">buf</name> <operator pos:start="103:38" pos:end="103:38">+</operator> <literal type="number" pos:start="103:40" pos:end="103:40">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="103:46" pos:end="103:66">/* length in bytes */</comment>

            <expr_stmt pos:start="105:13" pos:end="105:21"><expr pos:start="105:13" pos:end="105:20"><name pos:start="105:13" pos:end="105:15">buf</name> <operator pos:start="105:17" pos:end="105:18">+=</operator> <literal type="number" pos:start="105:20" pos:end="105:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:21"><expr pos:start="107:13" pos:end="107:20"><name pos:start="107:13" pos:end="107:15">len</name> <operator pos:start="107:17" pos:end="107:18">-=</operator> <literal type="number" pos:start="107:20" pos:end="107:20">4</literal></expr>;</expr_stmt>



            <if_stmt pos:start="111:13" pos:end="113:84"><if pos:start="111:13" pos:end="113:84">if <condition pos:start="111:16" pos:end="111:26">(<expr pos:start="111:17" pos:end="111:25"><name pos:start="111:17" pos:end="111:25">precision</name></expr>)</condition><block type="pseudo" pos:start="113:17" pos:end="113:84"><block_content pos:start="113:17" pos:end="113:84">

                <expr_stmt pos:start="113:17" pos:end="113:84"><expr pos:start="113:17" pos:end="113:83"><call pos:start="113:17" pos:end="113:83"><name pos:start="113:17" pos:end="113:22">av_log</name><argument_list pos:start="113:23" pos:end="113:83">(<argument pos:start="113:24" pos:end="113:26"><expr pos:start="113:24" pos:end="113:26"><name pos:start="113:24" pos:end="113:26">ctx</name></expr></argument>, <argument pos:start="113:29" pos:end="113:42"><expr pos:start="113:29" pos:end="113:42"><name pos:start="113:29" pos:end="113:42">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="113:45" pos:end="113:82"><expr pos:start="113:45" pos:end="113:82"><literal type="string" pos:start="113:45" pos:end="113:82">"Only 8-bit precision is supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="117:13" pos:end="183:13"><if pos:start="117:13" pos:end="157:13">if <condition pos:start="117:16" pos:end="117:31">(<expr pos:start="117:17" pos:end="117:30"><name pos:start="117:17" pos:end="117:26">qtable_len</name> <operator pos:start="117:28" pos:end="117:28">&gt;</operator> <literal type="number" pos:start="117:30" pos:end="117:30">0</literal></expr>)</condition> <block pos:start="117:33" pos:end="157:13">{<block_content pos:start="119:17" pos:end="155:17">

                <if_stmt pos:start="119:17" pos:end="125:17"><if pos:start="119:17" pos:end="125:17">if <condition pos:start="119:20" pos:end="119:37">(<expr pos:start="119:21" pos:end="119:36"><name pos:start="119:21" pos:end="119:23">len</name> <operator pos:start="119:25" pos:end="119:25">&lt;</operator> <name pos:start="119:27" pos:end="119:36">qtable_len</name></expr>)</condition> <block pos:start="119:39" pos:end="125:17">{<block_content pos:start="121:21" pos:end="123:47">

                    <expr_stmt pos:start="121:21" pos:end="121:78"><expr pos:start="121:21" pos:end="121:77"><call pos:start="121:21" pos:end="121:77"><name pos:start="121:21" pos:end="121:26">av_log</name><argument_list pos:start="121:27" pos:end="121:77">(<argument pos:start="121:28" pos:end="121:30"><expr pos:start="121:28" pos:end="121:30"><name pos:start="121:28" pos:end="121:30">ctx</name></expr></argument>, <argument pos:start="121:33" pos:end="121:44"><expr pos:start="121:33" pos:end="121:44"><name pos:start="121:33" pos:end="121:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:47" pos:end="121:76"><expr pos:start="121:47" pos:end="121:76"><literal type="string" pos:start="121:47" pos:end="121:76">"Too short RTP/JPEG packet.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="123:21" pos:end="123:47">return <expr pos:start="123:28" pos:end="123:46"><name pos:start="123:28" pos:end="123:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:30"><expr pos:start="127:17" pos:end="127:29"><name pos:start="127:17" pos:end="127:23">qtables</name> <operator pos:start="127:25" pos:end="127:25">=</operator> <name pos:start="127:27" pos:end="127:29">buf</name></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:34"><expr pos:start="129:17" pos:end="129:33"><name pos:start="129:17" pos:end="129:19">buf</name> <operator pos:start="129:21" pos:end="129:22">+=</operator> <name pos:start="129:24" pos:end="129:33">qtable_len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:34"><expr pos:start="131:17" pos:end="131:33"><name pos:start="131:17" pos:end="131:19">len</name> <operator pos:start="131:21" pos:end="131:22">-=</operator> <name pos:start="131:24" pos:end="131:33">qtable_len</name></expr>;</expr_stmt>

                <if_stmt pos:start="133:17" pos:end="155:17"><if pos:start="133:17" pos:end="155:17">if <condition pos:start="133:20" pos:end="133:28">(<expr pos:start="133:21" pos:end="133:27"><name pos:start="133:21" pos:end="133:21">q</name> <operator pos:start="133:23" pos:end="133:23">&lt;</operator> <literal type="number" pos:start="133:25" pos:end="133:27">255</literal></expr>)</condition> <block pos:start="133:30" pos:end="155:17">{<block_content pos:start="135:21" pos:end="153:21">

                    <if_stmt pos:start="135:21" pos:end="153:21"><if pos:start="135:21" pos:end="145:21">if <condition pos:start="135:24" pos:end="139:82">(<expr pos:start="135:25" pos:end="139:81"><name pos:start="135:25" pos:end="135:50"><name pos:start="135:25" pos:end="135:28">jpeg</name><operator pos:start="135:29" pos:end="135:30">-&gt;</operator><name pos:start="135:31" pos:end="135:41">qtables_len</name><index pos:start="135:42" pos:end="135:50">[<expr pos:start="135:43" pos:end="135:49"><name pos:start="135:43" pos:end="135:43">q</name> <operator pos:start="135:45" pos:end="135:45">-</operator> <literal type="number" pos:start="135:47" pos:end="135:49">128</literal></expr>]</index></name> <operator pos:start="135:52" pos:end="135:53">&amp;&amp;</operator>

                        <operator pos:start="137:25" pos:end="137:25">(</operator><name pos:start="137:26" pos:end="137:51"><name pos:start="137:26" pos:end="137:29">jpeg</name><operator pos:start="137:30" pos:end="137:31">-&gt;</operator><name pos:start="137:32" pos:end="137:42">qtables_len</name><index pos:start="137:43" pos:end="137:51">[<expr pos:start="137:44" pos:end="137:50"><name pos:start="137:44" pos:end="137:44">q</name> <operator pos:start="137:46" pos:end="137:46">-</operator> <literal type="number" pos:start="137:48" pos:end="137:50">128</literal></expr>]</index></name> <operator pos:start="137:53" pos:end="137:54">!=</operator> <name pos:start="137:56" pos:end="137:65">qtable_len</name> <operator pos:start="137:67" pos:end="137:68">||</operator>

                         <call pos:start="139:26" pos:end="139:80"><name pos:start="139:26" pos:end="139:31">memcmp</name><argument_list pos:start="139:32" pos:end="139:80">(<argument pos:start="139:33" pos:end="139:39"><expr pos:start="139:33" pos:end="139:39"><name pos:start="139:33" pos:end="139:39">qtables</name></expr></argument>, <argument pos:start="139:42" pos:end="139:67"><expr pos:start="139:42" pos:end="139:67"><operator pos:start="139:42" pos:end="139:42">&amp;</operator><name pos:start="139:43" pos:end="139:67"><name pos:start="139:43" pos:end="139:46">jpeg</name><operator pos:start="139:47" pos:end="139:48">-&gt;</operator><name pos:start="139:49" pos:end="139:55">qtables</name><index pos:start="139:56" pos:end="139:64">[<expr pos:start="139:57" pos:end="139:63"><name pos:start="139:57" pos:end="139:57">q</name> <operator pos:start="139:59" pos:end="139:59">-</operator> <literal type="number" pos:start="139:61" pos:end="139:63">128</literal></expr>]</index><index pos:start="139:65" pos:end="139:67">[<expr pos:start="139:66" pos:end="139:66"><literal type="number" pos:start="139:66" pos:end="139:66">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="139:70" pos:end="139:79"><expr pos:start="139:70" pos:end="139:79"><name pos:start="139:70" pos:end="139:79">qtable_len</name></expr></argument>)</argument_list></call><operator pos:start="139:81" pos:end="139:81">)</operator></expr>)</condition> <block pos:start="139:84" pos:end="145:21">{<block_content pos:start="141:25" pos:end="143:76">

                        <expr_stmt pos:start="141:25" pos:end="143:76"><expr pos:start="141:25" pos:end="143:75"><call pos:start="141:25" pos:end="143:75"><name pos:start="141:25" pos:end="141:30">av_log</name><argument_list pos:start="141:31" pos:end="143:75">(<argument pos:start="141:32" pos:end="141:34"><expr pos:start="141:32" pos:end="141:34"><name pos:start="141:32" pos:end="141:34">ctx</name></expr></argument>, <argument pos:start="141:37" pos:end="141:50"><expr pos:start="141:37" pos:end="141:50"><name pos:start="141:37" pos:end="141:50">AV_LOG_WARNING</name></expr></argument>,

                               <argument pos:start="143:32" pos:end="143:71"><expr pos:start="143:32" pos:end="143:71"><literal type="string" pos:start="143:32" pos:end="143:71">"Quantization tables for q=%d changed\n"</literal></expr></argument>, <argument pos:start="143:74" pos:end="143:74"><expr pos:start="143:74" pos:end="143:74"><name pos:start="143:74" pos:end="143:74">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="145:23" pos:end="153:21">else if <condition pos:start="145:31" pos:end="145:80">(<expr pos:start="145:32" pos:end="145:79"><operator pos:start="145:32" pos:end="145:32">!</operator><name pos:start="145:33" pos:end="145:58"><name pos:start="145:33" pos:end="145:36">jpeg</name><operator pos:start="145:37" pos:end="145:38">-&gt;</operator><name pos:start="145:39" pos:end="145:49">qtables_len</name><index pos:start="145:50" pos:end="145:58">[<expr pos:start="145:51" pos:end="145:57"><name pos:start="145:51" pos:end="145:51">q</name> <operator pos:start="145:53" pos:end="145:53">-</operator> <literal type="number" pos:start="145:55" pos:end="145:57">128</literal></expr>]</index></name> <operator pos:start="145:60" pos:end="145:61">&amp;&amp;</operator> <name pos:start="145:63" pos:end="145:72">qtable_len</name> <operator pos:start="145:74" pos:end="145:75">&lt;=</operator> <literal type="number" pos:start="145:77" pos:end="145:79">128</literal></expr>)</condition> <block pos:start="145:82" pos:end="153:21">{<block_content pos:start="147:25" pos:end="151:64">

                        <expr_stmt pos:start="147:25" pos:end="149:43"><expr pos:start="147:25" pos:end="149:42"><call pos:start="147:25" pos:end="149:42"><name pos:start="147:25" pos:end="147:30">memcpy</name><argument_list pos:start="147:31" pos:end="149:42">(<argument pos:start="147:32" pos:end="147:57"><expr pos:start="147:32" pos:end="147:57"><operator pos:start="147:32" pos:end="147:32">&amp;</operator><name pos:start="147:33" pos:end="147:57"><name pos:start="147:33" pos:end="147:36">jpeg</name><operator pos:start="147:37" pos:end="147:38">-&gt;</operator><name pos:start="147:39" pos:end="147:45">qtables</name><index pos:start="147:46" pos:end="147:54">[<expr pos:start="147:47" pos:end="147:53"><name pos:start="147:47" pos:end="147:47">q</name> <operator pos:start="147:49" pos:end="147:49">-</operator> <literal type="number" pos:start="147:51" pos:end="147:53">128</literal></expr>]</index><index pos:start="147:55" pos:end="147:57">[<expr pos:start="147:56" pos:end="147:56"><literal type="number" pos:start="147:56" pos:end="147:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="147:60" pos:end="147:66"><expr pos:start="147:60" pos:end="147:66"><name pos:start="147:60" pos:end="147:66">qtables</name></expr></argument>,

                               <argument pos:start="149:32" pos:end="149:41"><expr pos:start="149:32" pos:end="149:41"><name pos:start="149:32" pos:end="149:41">qtable_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="151:25" pos:end="151:64"><expr pos:start="151:25" pos:end="151:63"><name pos:start="151:25" pos:end="151:50"><name pos:start="151:25" pos:end="151:28">jpeg</name><operator pos:start="151:29" pos:end="151:30">-&gt;</operator><name pos:start="151:31" pos:end="151:41">qtables_len</name><index pos:start="151:42" pos:end="151:50">[<expr pos:start="151:43" pos:end="151:49"><name pos:start="151:43" pos:end="151:43">q</name> <operator pos:start="151:45" pos:end="151:45">-</operator> <literal type="number" pos:start="151:47" pos:end="151:49">128</literal></expr>]</index></name> <operator pos:start="151:52" pos:end="151:52">=</operator> <name pos:start="151:54" pos:end="151:63">qtable_len</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="157:15" pos:end="183:13">else <block pos:start="157:20" pos:end="183:13">{<block_content pos:start="159:17" pos:end="181:57">

                <if_stmt pos:start="159:17" pos:end="167:17"><if pos:start="159:17" pos:end="167:17">if <condition pos:start="159:20" pos:end="159:29">(<expr pos:start="159:21" pos:end="159:28"><name pos:start="159:21" pos:end="159:21">q</name> <operator pos:start="159:23" pos:end="159:24">==</operator> <literal type="number" pos:start="159:26" pos:end="159:28">255</literal></expr>)</condition> <block pos:start="159:31" pos:end="167:17">{<block_content pos:start="161:21" pos:end="165:47">

                    <expr_stmt pos:start="161:21" pos:end="163:88"><expr pos:start="161:21" pos:end="163:87"><call pos:start="161:21" pos:end="163:87"><name pos:start="161:21" pos:end="161:26">av_log</name><argument_list pos:start="161:27" pos:end="163:87">(<argument pos:start="161:28" pos:end="161:30"><expr pos:start="161:28" pos:end="161:30"><name pos:start="161:28" pos:end="161:30">ctx</name></expr></argument>, <argument pos:start="161:33" pos:end="161:44"><expr pos:start="161:33" pos:end="161:44"><name pos:start="161:33" pos:end="161:44">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="163:28" pos:end="163:86"><expr pos:start="163:28" pos:end="163:86"><literal type="string" pos:start="163:28" pos:end="163:86">"Invalid RTP/JPEG packet. Quantization tables not found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="165:21" pos:end="165:47">return <expr pos:start="165:28" pos:end="165:46"><name pos:start="165:28" pos:end="165:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="169:17" pos:end="177:17"><if pos:start="169:17" pos:end="177:17">if <condition pos:start="169:20" pos:end="169:48">(<expr pos:start="169:21" pos:end="169:47"><operator pos:start="169:21" pos:end="169:21">!</operator><name pos:start="169:22" pos:end="169:47"><name pos:start="169:22" pos:end="169:25">jpeg</name><operator pos:start="169:26" pos:end="169:27">-&gt;</operator><name pos:start="169:28" pos:end="169:38">qtables_len</name><index pos:start="169:39" pos:end="169:47">[<expr pos:start="169:40" pos:end="169:46"><name pos:start="169:40" pos:end="169:40">q</name> <operator pos:start="169:42" pos:end="169:42">-</operator> <literal type="number" pos:start="169:44" pos:end="169:46">128</literal></expr>]</index></name></expr>)</condition> <block pos:start="169:50" pos:end="177:17">{<block_content pos:start="171:21" pos:end="175:47">

                    <expr_stmt pos:start="171:21" pos:end="173:78"><expr pos:start="171:21" pos:end="173:77"><call pos:start="171:21" pos:end="173:77"><name pos:start="171:21" pos:end="171:26">av_log</name><argument_list pos:start="171:27" pos:end="173:77">(<argument pos:start="171:28" pos:end="171:30"><expr pos:start="171:28" pos:end="171:30"><name pos:start="171:28" pos:end="171:30">ctx</name></expr></argument>, <argument pos:start="171:33" pos:end="171:44"><expr pos:start="171:33" pos:end="171:44"><name pos:start="171:33" pos:end="171:44">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="173:28" pos:end="173:73"><expr pos:start="173:28" pos:end="173:73"><literal type="string" pos:start="173:28" pos:end="173:73">"No quantization tables known for q=%d yet.\n"</literal></expr></argument>, <argument pos:start="173:76" pos:end="173:76"><expr pos:start="173:76" pos:end="173:76"><name pos:start="173:76" pos:end="173:76">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="175:21" pos:end="175:47">return <expr pos:start="175:28" pos:end="175:46"><name pos:start="175:28" pos:end="175:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="179:17" pos:end="179:56"><expr pos:start="179:17" pos:end="179:55"><name pos:start="179:17" pos:end="179:23">qtables</name>    <operator pos:start="179:28" pos:end="179:28">=</operator> <operator pos:start="179:30" pos:end="179:30">&amp;</operator><name pos:start="179:31" pos:end="179:55"><name pos:start="179:31" pos:end="179:34">jpeg</name><operator pos:start="179:35" pos:end="179:36">-&gt;</operator><name pos:start="179:37" pos:end="179:43">qtables</name><index pos:start="179:44" pos:end="179:52">[<expr pos:start="179:45" pos:end="179:51"><name pos:start="179:45" pos:end="179:45">q</name> <operator pos:start="179:47" pos:end="179:47">-</operator> <literal type="number" pos:start="179:49" pos:end="179:51">128</literal></expr>]</index><index pos:start="179:53" pos:end="179:55">[<expr pos:start="179:54" pos:end="179:54"><literal type="number" pos:start="179:54" pos:end="179:54">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="181:17" pos:end="181:57"><expr pos:start="181:17" pos:end="181:56"><name pos:start="181:17" pos:end="181:26">qtable_len</name> <operator pos:start="181:28" pos:end="181:28">=</operator>  <name pos:start="181:31" pos:end="181:56"><name pos:start="181:31" pos:end="181:34">jpeg</name><operator pos:start="181:35" pos:end="181:36">-&gt;</operator><name pos:start="181:37" pos:end="181:47">qtables_len</name><index pos:start="181:48" pos:end="181:56">[<expr pos:start="181:49" pos:end="181:55"><name pos:start="181:49" pos:end="181:49">q</name> <operator pos:start="181:51" pos:end="181:51">-</operator> <literal type="number" pos:start="181:53" pos:end="181:55">128</literal></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="185:11" pos:end="201:9">else <block pos:start="185:16" pos:end="201:9">{<block_content pos:start="187:13" pos:end="199:45"> <comment type="block" pos:start="185:18" pos:end="185:31">/* q &lt;= 127 */</comment>

            <if_stmt pos:start="187:13" pos:end="193:13"><if pos:start="187:13" pos:end="193:13">if <condition pos:start="187:16" pos:end="187:33">(<expr pos:start="187:17" pos:end="187:32"><name pos:start="187:17" pos:end="187:17">q</name> <operator pos:start="187:19" pos:end="187:20">==</operator> <literal type="number" pos:start="187:22" pos:end="187:22">0</literal> <operator pos:start="187:24" pos:end="187:25">||</operator> <name pos:start="187:27" pos:end="187:27">q</name> <operator pos:start="187:29" pos:end="187:29">&gt;</operator> <literal type="number" pos:start="187:31" pos:end="187:32">99</literal></expr>)</condition> <block pos:start="187:35" pos:end="193:13">{<block_content pos:start="189:17" pos:end="191:43">

                <expr_stmt pos:start="189:17" pos:end="189:70"><expr pos:start="189:17" pos:end="189:69"><call pos:start="189:17" pos:end="189:69"><name pos:start="189:17" pos:end="189:22">av_log</name><argument_list pos:start="189:23" pos:end="189:69">(<argument pos:start="189:24" pos:end="189:26"><expr pos:start="189:24" pos:end="189:26"><name pos:start="189:24" pos:end="189:26">ctx</name></expr></argument>, <argument pos:start="189:29" pos:end="189:40"><expr pos:start="189:29" pos:end="189:40"><name pos:start="189:29" pos:end="189:40">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="189:43" pos:end="189:65"><expr pos:start="189:43" pos:end="189:65"><literal type="string" pos:start="189:43" pos:end="189:65">"Reserved q value %d\n"</literal></expr></argument>, <argument pos:start="189:68" pos:end="189:68"><expr pos:start="189:68" pos:end="189:68"><name pos:start="189:68" pos:end="189:68">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="191:17" pos:end="191:43">return <expr pos:start="191:24" pos:end="191:42"><name pos:start="191:24" pos:end="191:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:51"><expr pos:start="195:13" pos:end="195:50"><call pos:start="195:13" pos:end="195:50"><name pos:start="195:13" pos:end="195:34">create_default_qtables</name><argument_list pos:start="195:35" pos:end="195:50">(<argument pos:start="195:36" pos:end="195:46"><expr pos:start="195:36" pos:end="195:46"><name pos:start="195:36" pos:end="195:46">new_qtables</name></expr></argument>, <argument pos:start="195:49" pos:end="195:49"><expr pos:start="195:49" pos:end="195:49"><name pos:start="195:49" pos:end="195:49">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:37"><expr pos:start="197:13" pos:end="197:36"><name pos:start="197:13" pos:end="197:19">qtables</name>    <operator pos:start="197:24" pos:end="197:24">=</operator> <name pos:start="197:26" pos:end="197:36">new_qtables</name></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:45"><expr pos:start="199:13" pos:end="199:44"><name pos:start="199:13" pos:end="199:22">qtable_len</name> <operator pos:start="199:24" pos:end="199:24">=</operator> <sizeof pos:start="199:26" pos:end="199:44">sizeof<argument_list pos:start="199:32" pos:end="199:44">(<argument pos:start="199:33" pos:end="199:43"><expr pos:start="199:33" pos:end="199:43"><name pos:start="199:33" pos:end="199:43">new_qtables</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="205:9" pos:end="207:38">/* Skip the current frame in case of the end packet

         * has been lost somewhere. */</comment>

        <expr_stmt pos:start="209:9" pos:end="209:40"><expr pos:start="209:9" pos:end="209:39"><call pos:start="209:9" pos:end="209:39"><name pos:start="209:9" pos:end="209:25">ffio_free_dyn_buf</name><argument_list pos:start="209:26" pos:end="209:39">(<argument pos:start="209:27" pos:end="209:38"><expr pos:start="209:27" pos:end="209:38"><operator pos:start="209:27" pos:end="209:27">&amp;</operator><name pos:start="209:28" pos:end="209:38"><name pos:start="209:28" pos:end="209:31">jpeg</name><operator pos:start="209:32" pos:end="209:33">-&gt;</operator><name pos:start="209:34" pos:end="209:38">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="213:9" pos:end="215:23"><if pos:start="213:9" pos:end="215:23">if <condition pos:start="213:12" pos:end="213:56">(<expr pos:start="213:13" pos:end="213:55"><operator pos:start="213:13" pos:end="213:13">(</operator><name pos:start="213:14" pos:end="213:16">ret</name> <operator pos:start="213:18" pos:end="213:18">=</operator> <call pos:start="213:20" pos:end="213:50"><name pos:start="213:20" pos:end="213:36">avio_open_dyn_buf</name><argument_list pos:start="213:37" pos:end="213:50">(<argument pos:start="213:38" pos:end="213:49"><expr pos:start="213:38" pos:end="213:49"><operator pos:start="213:38" pos:end="213:38">&amp;</operator><name pos:start="213:39" pos:end="213:49"><name pos:start="213:39" pos:end="213:42">jpeg</name><operator pos:start="213:43" pos:end="213:44">-&gt;</operator><name pos:start="213:45" pos:end="213:49">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="213:51" pos:end="213:51">)</operator> <operator pos:start="213:53" pos:end="213:53">&lt;</operator> <literal type="number" pos:start="213:55" pos:end="213:55">0</literal></expr>)</condition><block type="pseudo" pos:start="215:13" pos:end="215:23"><block_content pos:start="215:13" pos:end="215:23">

            <return pos:start="215:13" pos:end="215:23">return <expr pos:start="215:20" pos:end="215:22"><name pos:start="215:20" pos:end="215:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:37"><expr pos:start="217:9" pos:end="217:36"><name pos:start="217:9" pos:end="217:23"><name pos:start="217:9" pos:end="217:12">jpeg</name><operator pos:start="217:13" pos:end="217:14">-&gt;</operator><name pos:start="217:15" pos:end="217:23">timestamp</name></name> <operator pos:start="217:25" pos:end="217:25">=</operator> <operator pos:start="217:27" pos:end="217:27">*</operator><name pos:start="217:28" pos:end="217:36">timestamp</name></expr>;</expr_stmt>



        <comment type="block" pos:start="221:9" pos:end="225:33">/* Generate a frame and scan headers that can be prepended to the

         * RTP/JPEG data payload to produce a JPEG compressed image in

         * interchange format. */</comment>

        <expr_stmt pos:start="227:9" pos:end="231:61"><expr pos:start="227:9" pos:end="231:60"><name pos:start="227:9" pos:end="227:22"><name pos:start="227:9" pos:end="227:12">jpeg</name><operator pos:start="227:13" pos:end="227:14">-&gt;</operator><name pos:start="227:15" pos:end="227:22">hdr_size</name></name> <operator pos:start="227:24" pos:end="227:24">=</operator> <call pos:start="227:26" pos:end="231:60"><name pos:start="227:26" pos:end="227:43">jpeg_create_header</name><argument_list pos:start="227:44" pos:end="231:60">(<argument pos:start="227:45" pos:end="227:47"><expr pos:start="227:45" pos:end="227:47"><name pos:start="227:45" pos:end="227:47">hdr</name></expr></argument>, <argument pos:start="227:50" pos:end="227:60"><expr pos:start="227:50" pos:end="227:60"><sizeof pos:start="227:50" pos:end="227:60">sizeof<argument_list pos:start="227:56" pos:end="227:60">(<argument pos:start="227:57" pos:end="227:59"><expr pos:start="227:57" pos:end="227:59"><name pos:start="227:57" pos:end="227:59">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="227:63" pos:end="227:66"><expr pos:start="227:63" pos:end="227:66"><name pos:start="227:63" pos:end="227:66">type</name></expr></argument>, <argument pos:start="227:69" pos:end="227:73"><expr pos:start="227:69" pos:end="227:73"><name pos:start="227:69" pos:end="227:73">width</name></expr></argument>,

                                            <argument pos:start="229:45" pos:end="229:50"><expr pos:start="229:45" pos:end="229:50"><name pos:start="229:45" pos:end="229:50">height</name></expr></argument>, <argument pos:start="229:53" pos:end="229:59"><expr pos:start="229:53" pos:end="229:59"><name pos:start="229:53" pos:end="229:59">qtables</name></expr></argument>,

                                            <argument pos:start="231:45" pos:end="231:59"><expr pos:start="231:45" pos:end="231:59"><name pos:start="231:45" pos:end="231:54">qtable_len</name> <operator pos:start="231:56" pos:end="231:56">/</operator> <literal type="number" pos:start="231:58" pos:end="231:59">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="235:9" pos:end="235:47">/* Copy JPEG header to frame buffer. */</comment>

        <expr_stmt pos:start="237:9" pos:end="237:53"><expr pos:start="237:9" pos:end="237:52"><call pos:start="237:9" pos:end="237:52"><name pos:start="237:9" pos:end="237:18">avio_write</name><argument_list pos:start="237:19" pos:end="237:52">(<argument pos:start="237:20" pos:end="237:30"><expr pos:start="237:20" pos:end="237:30"><name pos:start="237:20" pos:end="237:30"><name pos:start="237:20" pos:end="237:23">jpeg</name><operator pos:start="237:24" pos:end="237:25">-&gt;</operator><name pos:start="237:26" pos:end="237:30">frame</name></name></expr></argument>, <argument pos:start="237:33" pos:end="237:35"><expr pos:start="237:33" pos:end="237:35"><name pos:start="237:33" pos:end="237:35">hdr</name></expr></argument>, <argument pos:start="237:38" pos:end="237:51"><expr pos:start="237:38" pos:end="237:51"><name pos:start="237:38" pos:end="237:51"><name pos:start="237:38" pos:end="237:41">jpeg</name><operator pos:start="237:42" pos:end="237:43">-&gt;</operator><name pos:start="237:44" pos:end="237:51">hdr_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="243:5" pos:end="251:5"><if pos:start="243:5" pos:end="251:5">if <condition pos:start="243:8" pos:end="243:21">(<expr pos:start="243:9" pos:end="243:20"><operator pos:start="243:9" pos:end="243:9">!</operator><name pos:start="243:10" pos:end="243:20"><name pos:start="243:10" pos:end="243:13">jpeg</name><operator pos:start="243:14" pos:end="243:15">-&gt;</operator><name pos:start="243:16" pos:end="243:20">frame</name></name></expr>)</condition> <block pos:start="243:23" pos:end="251:5">{<block_content pos:start="245:9" pos:end="249:31">

        <expr_stmt pos:start="245:9" pos:end="247:75"><expr pos:start="245:9" pos:end="247:74"><call pos:start="245:9" pos:end="247:74"><name pos:start="245:9" pos:end="245:14">av_log</name><argument_list pos:start="245:15" pos:end="247:74">(<argument pos:start="245:16" pos:end="245:18"><expr pos:start="245:16" pos:end="245:18"><name pos:start="245:16" pos:end="245:18">ctx</name></expr></argument>, <argument pos:start="245:21" pos:end="245:32"><expr pos:start="245:21" pos:end="245:32"><name pos:start="245:21" pos:end="245:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="247:16" pos:end="247:73"><expr pos:start="247:16" pos:end="247:73"><literal type="string" pos:start="247:16" pos:end="247:73">"Received packet without a start chunk; dropping frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="249:9" pos:end="249:31">return <expr pos:start="249:16" pos:end="249:30"><call pos:start="249:16" pos:end="249:30"><name pos:start="249:16" pos:end="249:22">AVERROR</name><argument_list pos:start="249:23" pos:end="249:30">(<argument pos:start="249:24" pos:end="249:29"><expr pos:start="249:24" pos:end="249:29"><name pos:start="249:24" pos:end="249:29">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="255:5" pos:end="267:5"><if pos:start="255:5" pos:end="267:5">if <condition pos:start="255:8" pos:end="255:38">(<expr pos:start="255:9" pos:end="255:37"><name pos:start="255:9" pos:end="255:23"><name pos:start="255:9" pos:end="255:12">jpeg</name><operator pos:start="255:13" pos:end="255:14">-&gt;</operator><name pos:start="255:15" pos:end="255:23">timestamp</name></name> <operator pos:start="255:25" pos:end="255:26">!=</operator> <operator pos:start="255:28" pos:end="255:28">*</operator><name pos:start="255:29" pos:end="255:37">timestamp</name></expr>)</condition> <block pos:start="255:40" pos:end="267:5">{<block_content pos:start="261:9" pos:end="265:35">

        <comment type="block" pos:start="257:9" pos:end="259:53">/* Skip the current frame if timestamp is incorrect.

         * A start packet has been lost somewhere. */</comment>

        <expr_stmt pos:start="261:9" pos:end="261:40"><expr pos:start="261:9" pos:end="261:39"><call pos:start="261:9" pos:end="261:39"><name pos:start="261:9" pos:end="261:25">ffio_free_dyn_buf</name><argument_list pos:start="261:26" pos:end="261:39">(<argument pos:start="261:27" pos:end="261:38"><expr pos:start="261:27" pos:end="261:38"><operator pos:start="261:27" pos:end="261:27">&amp;</operator><name pos:start="261:28" pos:end="261:38"><name pos:start="261:28" pos:end="261:31">jpeg</name><operator pos:start="261:32" pos:end="261:33">-&gt;</operator><name pos:start="261:34" pos:end="261:38">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:67"><expr pos:start="263:9" pos:end="263:66"><call pos:start="263:9" pos:end="263:66"><name pos:start="263:9" pos:end="263:14">av_log</name><argument_list pos:start="263:15" pos:end="263:66">(<argument pos:start="263:16" pos:end="263:18"><expr pos:start="263:16" pos:end="263:18"><name pos:start="263:16" pos:end="263:18">ctx</name></expr></argument>, <argument pos:start="263:21" pos:end="263:32"><expr pos:start="263:21" pos:end="263:32"><name pos:start="263:21" pos:end="263:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="263:35" pos:end="263:65"><expr pos:start="263:35" pos:end="263:65"><literal type="string" pos:start="263:35" pos:end="263:65">"RTP timestamps don't match.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="265:9" pos:end="265:35">return <expr pos:start="265:16" pos:end="265:34"><name pos:start="265:16" pos:end="265:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="271:5" pos:end="279:5"><if pos:start="271:5" pos:end="279:5">if <condition pos:start="271:8" pos:end="271:55">(<expr pos:start="271:9" pos:end="271:54"><name pos:start="271:9" pos:end="271:11">off</name> <operator pos:start="271:13" pos:end="271:14">!=</operator> <call pos:start="271:16" pos:end="271:37"><name pos:start="271:16" pos:end="271:24">avio_tell</name><argument_list pos:start="271:25" pos:end="271:37">(<argument pos:start="271:26" pos:end="271:36"><expr pos:start="271:26" pos:end="271:36"><name pos:start="271:26" pos:end="271:36"><name pos:start="271:26" pos:end="271:29">jpeg</name><operator pos:start="271:30" pos:end="271:31">-&gt;</operator><name pos:start="271:32" pos:end="271:36">frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="271:39" pos:end="271:39">-</operator> <name pos:start="271:41" pos:end="271:54"><name pos:start="271:41" pos:end="271:44">jpeg</name><operator pos:start="271:45" pos:end="271:46">-&gt;</operator><name pos:start="271:47" pos:end="271:54">hdr_size</name></name></expr>)</condition> <block pos:start="271:57" pos:end="279:5">{<block_content pos:start="273:9" pos:end="277:31">

        <expr_stmt pos:start="273:9" pos:end="275:53"><expr pos:start="273:9" pos:end="275:52"><call pos:start="273:9" pos:end="275:52"><name pos:start="273:9" pos:end="273:14">av_log</name><argument_list pos:start="273:15" pos:end="275:52">(<argument pos:start="273:16" pos:end="273:18"><expr pos:start="273:16" pos:end="273:18"><name pos:start="273:16" pos:end="273:18">ctx</name></expr></argument>, <argument pos:start="273:21" pos:end="273:32"><expr pos:start="273:21" pos:end="273:32"><name pos:start="273:21" pos:end="273:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="275:16" pos:end="275:51"><expr pos:start="275:16" pos:end="275:51"><literal type="string" pos:start="275:16" pos:end="275:51">"Missing packets; dropping frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="277:9" pos:end="277:31">return <expr pos:start="277:16" pos:end="277:30"><call pos:start="277:16" pos:end="277:30"><name pos:start="277:16" pos:end="277:22">AVERROR</name><argument_list pos:start="277:23" pos:end="277:30">(<argument pos:start="277:24" pos:end="277:29"><expr pos:start="277:24" pos:end="277:29"><name pos:start="277:24" pos:end="277:29">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="283:5" pos:end="283:36">/* Copy data to frame buffer. */</comment>

    <expr_stmt pos:start="285:5" pos:end="285:38"><expr pos:start="285:5" pos:end="285:37"><call pos:start="285:5" pos:end="285:37"><name pos:start="285:5" pos:end="285:14">avio_write</name><argument_list pos:start="285:15" pos:end="285:37">(<argument pos:start="285:16" pos:end="285:26"><expr pos:start="285:16" pos:end="285:26"><name pos:start="285:16" pos:end="285:26"><name pos:start="285:16" pos:end="285:19">jpeg</name><operator pos:start="285:20" pos:end="285:21">-&gt;</operator><name pos:start="285:22" pos:end="285:26">frame</name></name></expr></argument>, <argument pos:start="285:29" pos:end="285:31"><expr pos:start="285:29" pos:end="285:31"><name pos:start="285:29" pos:end="285:31">buf</name></expr></argument>, <argument pos:start="285:34" pos:end="285:36"><expr pos:start="285:34" pos:end="285:36"><name pos:start="285:34" pos:end="285:36">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="289:5" pos:end="319:5"><if pos:start="289:5" pos:end="319:5">if <condition pos:start="289:8" pos:end="289:32">(<expr pos:start="289:9" pos:end="289:31"><name pos:start="289:9" pos:end="289:13">flags</name> <operator pos:start="289:15" pos:end="289:15">&amp;</operator> <name pos:start="289:17" pos:end="289:31">RTP_FLAG_MARKER</name></expr>)</condition> <block pos:start="289:34" pos:end="319:5">{<block_content pos:start="293:9" pos:end="317:17">

        <comment type="block" pos:start="291:9" pos:end="291:38">/* End of JPEG data packet. */</comment>

        <decl_stmt pos:start="293:9" pos:end="293:39"><decl pos:start="293:9" pos:end="293:38"><type pos:start="293:9" pos:end="293:15"><name pos:start="293:9" pos:end="293:15">uint8_t</name></type> <name pos:start="293:17" pos:end="293:22"><name pos:start="293:17" pos:end="293:19">buf</name><index pos:start="293:20" pos:end="293:22">[<expr pos:start="293:21" pos:end="293:21"><literal type="number" pos:start="293:21" pos:end="293:21">2</literal></expr>]</index></name> <init pos:start="293:24" pos:end="293:38">= <expr pos:start="293:26" pos:end="293:38"><block pos:start="293:26" pos:end="293:38">{ <expr pos:start="293:28" pos:end="293:31"><literal type="number" pos:start="293:28" pos:end="293:31">0xff</literal></expr>, <expr pos:start="293:34" pos:end="293:36"><name pos:start="293:34" pos:end="293:36">EOI</name></expr> }</block></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="297:9" pos:end="297:29">/* Put EOI marker. */</comment>

        <expr_stmt pos:start="299:9" pos:end="299:50"><expr pos:start="299:9" pos:end="299:49"><call pos:start="299:9" pos:end="299:49"><name pos:start="299:9" pos:end="299:18">avio_write</name><argument_list pos:start="299:19" pos:end="299:49">(<argument pos:start="299:20" pos:end="299:30"><expr pos:start="299:20" pos:end="299:30"><name pos:start="299:20" pos:end="299:30"><name pos:start="299:20" pos:end="299:23">jpeg</name><operator pos:start="299:24" pos:end="299:25">-&gt;</operator><name pos:start="299:26" pos:end="299:30">frame</name></name></expr></argument>, <argument pos:start="299:33" pos:end="299:35"><expr pos:start="299:33" pos:end="299:35"><name pos:start="299:33" pos:end="299:35">buf</name></expr></argument>, <argument pos:start="299:38" pos:end="299:48"><expr pos:start="299:38" pos:end="299:48"><sizeof pos:start="299:38" pos:end="299:48">sizeof<argument_list pos:start="299:44" pos:end="299:48">(<argument pos:start="299:45" pos:end="299:47"><expr pos:start="299:45" pos:end="299:47"><name pos:start="299:45" pos:end="299:47">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="303:9" pos:end="303:38">/* Prepare the JPEG packet. */</comment>

        <if_stmt pos:start="305:9" pos:end="313:9"><if pos:start="305:9" pos:end="313:9">if <condition pos:start="305:12" pos:end="305:77">(<expr pos:start="305:13" pos:end="305:76"><operator pos:start="305:13" pos:end="305:13">(</operator><name pos:start="305:14" pos:end="305:16">ret</name> <operator pos:start="305:18" pos:end="305:18">=</operator> <call pos:start="305:20" pos:end="305:71"><name pos:start="305:20" pos:end="305:41">ff_rtp_finalize_packet</name><argument_list pos:start="305:42" pos:end="305:71">(<argument pos:start="305:43" pos:end="305:45"><expr pos:start="305:43" pos:end="305:45"><name pos:start="305:43" pos:end="305:45">pkt</name></expr></argument>, <argument pos:start="305:48" pos:end="305:59"><expr pos:start="305:48" pos:end="305:59"><operator pos:start="305:48" pos:end="305:48">&amp;</operator><name pos:start="305:49" pos:end="305:59"><name pos:start="305:49" pos:end="305:52">jpeg</name><operator pos:start="305:53" pos:end="305:54">-&gt;</operator><name pos:start="305:55" pos:end="305:59">frame</name></name></expr></argument>, <argument pos:start="305:62" pos:end="305:70"><expr pos:start="305:62" pos:end="305:70"><name pos:start="305:62" pos:end="305:70"><name pos:start="305:62" pos:end="305:63">st</name><operator pos:start="305:64" pos:end="305:65">-&gt;</operator><name pos:start="305:66" pos:end="305:70">index</name></name></expr></argument>)</argument_list></call><operator pos:start="305:72" pos:end="305:72">)</operator> <operator pos:start="305:74" pos:end="305:74">&lt;</operator> <literal type="number" pos:start="305:76" pos:end="305:76">0</literal></expr>)</condition> <block pos:start="305:79" pos:end="313:9">{<block_content pos:start="307:13" pos:end="311:23">

            <expr_stmt pos:start="307:13" pos:end="309:66"><expr pos:start="307:13" pos:end="309:65"><call pos:start="307:13" pos:end="309:65"><name pos:start="307:13" pos:end="307:18">av_log</name><argument_list pos:start="307:19" pos:end="309:65">(<argument pos:start="307:20" pos:end="307:22"><expr pos:start="307:20" pos:end="307:22"><name pos:start="307:20" pos:end="307:22">ctx</name></expr></argument>, <argument pos:start="307:25" pos:end="307:36"><expr pos:start="307:25" pos:end="307:36"><name pos:start="307:25" pos:end="307:36">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="309:20" pos:end="309:64"><expr pos:start="309:20" pos:end="309:64"><literal type="string" pos:start="309:20" pos:end="309:64">"Error occurred when getting frame buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="311:13" pos:end="311:23">return <expr pos:start="311:20" pos:end="311:22"><name pos:start="311:20" pos:end="311:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <return pos:start="317:9" pos:end="317:17">return <expr pos:start="317:16" pos:end="317:16"><literal type="number" pos:start="317:16" pos:end="317:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="323:5" pos:end="323:27">return <expr pos:start="323:12" pos:end="323:26"><call pos:start="323:12" pos:end="323:26"><name pos:start="323:12" pos:end="323:18">AVERROR</name><argument_list pos:start="323:19" pos:end="323:26">(<argument pos:start="323:20" pos:end="323:25"><expr pos:start="323:20" pos:end="323:25"><name pos:start="323:20" pos:end="323:25">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
