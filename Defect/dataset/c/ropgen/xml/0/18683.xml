<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18683.c" pos:tabs="8"><function pos:start="1:1" pos:end="277:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">uhci_frame_timer</name><parameter_list pos:start="1:29" pos:end="1:42">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:35"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="277:1">{<block_content pos:start="5:5" pos:end="275:48">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">UHCIState</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">s</name> <init pos:start="5:18" pos:end="5:25">= <expr pos:start="5:20" pos:end="5:25"><name pos:start="5:20" pos:end="5:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:23">expire_time</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:58"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:23">frame_addr</name></decl>, <decl pos:start="9:26" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:26" pos:end="9:29">link</name></decl>, <decl pos:start="9:32" pos:end="9:42"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:32" pos:end="9:42">old_td_ctrl</name></decl>, <decl pos:start="9:45" pos:end="9:47"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:45" pos:end="9:47">val</name></decl>, <decl pos:start="9:50" pos:end="9:57"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:50" pos:end="9:57">int_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">cnt</name></decl>, <decl pos:start="11:14" pos:end="11:16"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:16">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">UHCI_TD</name></type> <name pos:start="13:13" pos:end="13:14">td</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">UHCI_QH</name></type> <name pos:start="15:13" pos:end="15:14">qh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:25">old_async_qh</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:32">(<expr pos:start="21:9" pos:end="21:31"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:16"><name pos:start="21:11" pos:end="21:11">s</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:16">cmd</name></name> <operator pos:start="21:18" pos:end="21:18">&amp;</operator> <name pos:start="21:20" pos:end="21:30">UHCI_CMD_RS</name><operator pos:start="21:31" pos:end="21:31">)</operator></expr>)</condition> <block pos:start="21:34" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:15">

        <expr_stmt pos:start="23:9" pos:end="23:39"><expr pos:start="23:9" pos:end="23:38"><call pos:start="23:9" pos:end="23:38"><name pos:start="23:9" pos:end="23:22">qemu_del_timer</name><argument_list pos:start="23:23" pos:end="23:38">(<argument pos:start="23:24" pos:end="23:37"><expr pos:start="23:24" pos:end="23:37"><name pos:start="23:24" pos:end="23:37"><name pos:start="23:24" pos:end="23:24">s</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:37">frame_timer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="25:9" pos:end="25:56">/* set hchalted bit in status - UHCI11D 2.1.2 */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:39"><expr pos:start="27:9" pos:end="27:38"><name pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:17">status</name></name> <operator pos:start="27:19" pos:end="27:20">|=</operator> <name pos:start="27:22" pos:end="27:38">UHCI_STS_HCHALTED</name></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="33:5" pos:end="33:39">/* Complete the previous frame.  */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:38"><expr pos:start="35:5" pos:end="35:37"><name pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:12">frnum</name></name> <operator pos:start="35:14" pos:end="35:14">=</operator> <operator pos:start="35:16" pos:end="35:16">(</operator><name pos:start="35:17" pos:end="35:24"><name pos:start="35:17" pos:end="35:17">s</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:24">frnum</name></name> <operator pos:start="35:26" pos:end="35:26">+</operator> <literal type="number" pos:start="35:28" pos:end="35:28">1</literal><operator pos:start="35:29" pos:end="35:29">)</operator> <operator pos:start="35:31" pos:end="35:31">&amp;</operator> <literal type="number" pos:start="35:33" pos:end="35:37">0x7ff</literal></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:28">(<expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:27">pending_int_mask</name></name></expr>)</condition> <block pos:start="37:30" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:27">

        <expr_stmt pos:start="39:9" pos:end="39:42"><expr pos:start="39:9" pos:end="39:41"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:18">status2</name></name> <operator pos:start="39:20" pos:end="39:21">|=</operator> <name pos:start="39:23" pos:end="39:41"><name pos:start="39:23" pos:end="39:23">s</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:41">pending_int_mask</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:37"><expr pos:start="41:9" pos:end="41:36"><name pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:17">status</name></name> <operator pos:start="41:19" pos:end="41:20">|=</operator> <name pos:start="41:22" pos:end="41:36">UHCI_STS_USBINT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:27"><expr pos:start="43:9" pos:end="43:26"><call pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:23">uhci_update_irq</name><argument_list pos:start="43:24" pos:end="43:26">(<argument pos:start="43:25" pos:end="43:25"><expr pos:start="43:25" pos:end="43:25"><name pos:start="43:25" pos:end="43:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:16">old_async_qh</name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:30"><name pos:start="47:20" pos:end="47:20">s</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:30">async_qh</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:61"><expr pos:start="49:5" pos:end="49:60"><name pos:start="49:5" pos:end="49:14">frame_addr</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <name pos:start="49:18" pos:end="49:32"><name pos:start="49:18" pos:end="49:18">s</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:32">fl_base_addr</name></name> <operator pos:start="49:34" pos:end="49:34">+</operator> <operator pos:start="49:36" pos:end="49:36">(</operator><operator pos:start="49:37" pos:end="49:37">(</operator><name pos:start="49:38" pos:end="49:45"><name pos:start="49:38" pos:end="49:38">s</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:45">frnum</name></name> <operator pos:start="49:47" pos:end="49:47">&amp;</operator> <literal type="number" pos:start="49:49" pos:end="49:53">0x3ff</literal><operator pos:start="49:54" pos:end="49:54">)</operator> <operator pos:start="49:56" pos:end="49:57">&lt;&lt;</operator> <literal type="number" pos:start="49:59" pos:end="49:59">2</literal><operator pos:start="49:60" pos:end="49:60">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:62"><expr pos:start="51:5" pos:end="51:61"><call pos:start="51:5" pos:end="51:61"><name pos:start="51:5" pos:end="51:28">cpu_physical_memory_read</name><argument_list pos:start="51:29" pos:end="51:61">(<argument pos:start="51:30" pos:end="51:39"><expr pos:start="51:30" pos:end="51:39"><name pos:start="51:30" pos:end="51:39">frame_addr</name></expr></argument>, <argument pos:start="51:42" pos:end="51:57"><expr pos:start="51:42" pos:end="51:57"><operator pos:start="51:42" pos:end="51:42">(</operator><name pos:start="51:43" pos:end="51:49">uint8_t</name> <operator pos:start="51:51" pos:end="51:51">*</operator><operator pos:start="51:52" pos:end="51:52">)</operator><operator pos:start="51:53" pos:end="51:53">&amp;</operator><name pos:start="51:54" pos:end="51:57">link</name></expr></argument>, <argument pos:start="51:60" pos:end="51:60"><expr pos:start="51:60" pos:end="51:60"><literal type="number" pos:start="51:60" pos:end="51:60">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:24"><expr pos:start="53:5" pos:end="53:23"><call pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:16">le32_to_cpus</name><argument_list pos:start="53:17" pos:end="53:23">(<argument pos:start="53:18" pos:end="53:22"><expr pos:start="53:18" pos:end="53:22"><operator pos:start="53:18" pos:end="53:18">&amp;</operator><name pos:start="53:19" pos:end="53:22">link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:17"><expr pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:12">int_mask</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:26"><expr pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:7">cnt</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <name pos:start="57:11" pos:end="57:25">FRAME_MAX_LOOPS</name></expr>;</expr_stmt>

    <while pos:start="59:5" pos:end="243:5">while <condition pos:start="59:11" pos:end="59:27">(<expr pos:start="59:12" pos:end="59:26"><operator pos:start="59:12" pos:end="59:12">(</operator><name pos:start="59:13" pos:end="59:16">link</name> <operator pos:start="59:18" pos:end="59:18">&amp;</operator> <literal type="number" pos:start="59:20" pos:end="59:20">1</literal><operator pos:start="59:21" pos:end="59:21">)</operator> <operator pos:start="59:23" pos:end="59:24">==</operator> <literal type="number" pos:start="59:26" pos:end="59:26">0</literal></expr>)</condition> <block pos:start="59:29" pos:end="243:5">{<block_content pos:start="61:9" pos:end="241:9">

        <if_stmt pos:start="61:9" pos:end="63:18"><if pos:start="61:9" pos:end="63:18">if <condition pos:start="61:12" pos:end="61:23">(<expr pos:start="61:13" pos:end="61:22"><operator pos:start="61:13" pos:end="61:14">--</operator><name pos:start="61:15" pos:end="61:17">cnt</name> <operator pos:start="61:19" pos:end="61:20">==</operator> <literal type="number" pos:start="61:22" pos:end="61:22">0</literal></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:18"><block_content pos:start="63:13" pos:end="63:18">

            <break pos:start="63:13" pos:end="63:18">break;</break></block_content></block></if></if_stmt>

        <comment type="block" pos:start="65:9" pos:end="65:25">/* valid frame */</comment>

        <if_stmt pos:start="67:9" pos:end="241:9"><if pos:start="67:9" pos:end="189:9">if <condition pos:start="67:12" pos:end="67:21">(<expr pos:start="67:13" pos:end="67:20"><name pos:start="67:13" pos:end="67:16">link</name> <operator pos:start="67:18" pos:end="67:18">&amp;</operator> <literal type="number" pos:start="67:20" pos:end="67:20">2</literal></expr>)</condition> <block pos:start="67:23" pos:end="189:9">{<block_content pos:start="71:13" pos:end="187:13">

            <comment type="block" pos:start="69:13" pos:end="69:20">/* QH */</comment>

            <if_stmt pos:start="71:13" pos:end="81:13"><if pos:start="71:13" pos:end="81:13">if <condition pos:start="71:16" pos:end="71:36">(<expr pos:start="71:17" pos:end="71:35"><name pos:start="71:17" pos:end="71:20">link</name> <operator pos:start="71:22" pos:end="71:23">==</operator> <name pos:start="71:25" pos:end="71:35"><name pos:start="71:25" pos:end="71:25">s</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:35">async_qh</name></name></expr>)</condition> <block pos:start="71:38" pos:end="81:13">{<block_content pos:start="77:17" pos:end="79:22">

                <comment type="block" pos:start="73:17" pos:end="75:42">/* We've found a previously issues packet.

                   Nothing else to do.  */</comment>

                <expr_stmt pos:start="77:17" pos:end="77:33"><expr pos:start="77:17" pos:end="77:32"><name pos:start="77:17" pos:end="77:28">old_async_qh</name> <operator pos:start="77:30" pos:end="77:30">=</operator> <literal type="number" pos:start="77:32" pos:end="77:32">0</literal></expr>;</expr_stmt>

                <break pos:start="79:17" pos:end="79:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:78"><expr pos:start="83:13" pos:end="83:77"><call pos:start="83:13" pos:end="83:77"><name pos:start="83:13" pos:end="83:36">cpu_physical_memory_read</name><argument_list pos:start="83:37" pos:end="83:77">(<argument pos:start="83:38" pos:end="83:48"><expr pos:start="83:38" pos:end="83:48"><name pos:start="83:38" pos:end="83:41">link</name> <operator pos:start="83:43" pos:end="83:43">&amp;</operator> <operator pos:start="83:45" pos:end="83:45">~</operator><literal type="number" pos:start="83:46" pos:end="83:48">0xf</literal></expr></argument>, <argument pos:start="83:51" pos:end="83:64"><expr pos:start="83:51" pos:end="83:64"><operator pos:start="83:51" pos:end="83:51">(</operator><name pos:start="83:52" pos:end="83:58">uint8_t</name> <operator pos:start="83:60" pos:end="83:60">*</operator><operator pos:start="83:61" pos:end="83:61">)</operator><operator pos:start="83:62" pos:end="83:62">&amp;</operator><name pos:start="83:63" pos:end="83:64">qh</name></expr></argument>, <argument pos:start="83:67" pos:end="83:76"><expr pos:start="83:67" pos:end="83:76"><sizeof pos:start="83:67" pos:end="83:76">sizeof<argument_list pos:start="83:73" pos:end="83:76">(<argument pos:start="83:74" pos:end="83:75"><expr pos:start="83:74" pos:end="83:75"><name pos:start="83:74" pos:end="83:75">qh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:35"><expr pos:start="85:13" pos:end="85:34"><call pos:start="85:13" pos:end="85:34"><name pos:start="85:13" pos:end="85:24">le32_to_cpus</name><argument_list pos:start="85:25" pos:end="85:34">(<argument pos:start="85:26" pos:end="85:33"><expr pos:start="85:26" pos:end="85:33"><operator pos:start="85:26" pos:end="85:26">&amp;</operator><name pos:start="85:27" pos:end="85:33"><name pos:start="85:27" pos:end="85:28">qh</name><operator pos:start="85:29" pos:end="85:29">.</operator><name pos:start="85:30" pos:end="85:33">link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:38"><expr pos:start="87:13" pos:end="87:37"><call pos:start="87:13" pos:end="87:37"><name pos:start="87:13" pos:end="87:24">le32_to_cpus</name><argument_list pos:start="87:25" pos:end="87:37">(<argument pos:start="87:26" pos:end="87:36"><expr pos:start="87:26" pos:end="87:36"><operator pos:start="87:26" pos:end="87:26">&amp;</operator><name pos:start="87:27" pos:end="87:36"><name pos:start="87:27" pos:end="87:28">qh</name><operator pos:start="87:29" pos:end="87:29">.</operator><name pos:start="87:30" pos:end="87:36">el_link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <label pos:start="89:9" pos:end="89:20"><name pos:start="89:9" pos:end="89:19">depth_first</name>:</label>

            <if_stmt pos:start="91:13" pos:end="187:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:31">(<expr pos:start="91:17" pos:end="91:30"><name pos:start="91:17" pos:end="91:26"><name pos:start="91:17" pos:end="91:18">qh</name><operator pos:start="91:19" pos:end="91:19">.</operator><name pos:start="91:20" pos:end="91:26">el_link</name></name> <operator pos:start="91:28" pos:end="91:28">&amp;</operator> <literal type="number" pos:start="91:30" pos:end="91:30">1</literal></expr>)</condition> <block pos:start="91:33" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:31">

                <comment type="block" pos:start="93:17" pos:end="93:51">/* no element : go to next entry */</comment>

                <expr_stmt pos:start="95:17" pos:end="95:31"><expr pos:start="95:17" pos:end="95:30"><name pos:start="95:17" pos:end="95:20">link</name> <operator pos:start="95:22" pos:end="95:22">=</operator> <name pos:start="95:24" pos:end="95:30"><name pos:start="95:24" pos:end="95:25">qh</name><operator pos:start="95:26" pos:end="95:26">.</operator><name pos:start="95:27" pos:end="95:30">link</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="97:15" pos:end="103:13">else if <condition pos:start="97:23" pos:end="97:38">(<expr pos:start="97:24" pos:end="97:37"><name pos:start="97:24" pos:end="97:33"><name pos:start="97:24" pos:end="97:25">qh</name><operator pos:start="97:26" pos:end="97:26">.</operator><name pos:start="97:27" pos:end="97:33">el_link</name></name> <operator pos:start="97:35" pos:end="97:35">&amp;</operator> <literal type="number" pos:start="97:37" pos:end="97:37">2</literal></expr>)</condition> <block pos:start="97:40" pos:end="103:13">{<block_content pos:start="101:17" pos:end="101:34">

                <comment type="block" pos:start="99:17" pos:end="99:24">/* QH */</comment>

                <expr_stmt pos:start="101:17" pos:end="101:34"><expr pos:start="101:17" pos:end="101:33"><name pos:start="101:17" pos:end="101:20">link</name> <operator pos:start="101:22" pos:end="101:22">=</operator> <name pos:start="101:24" pos:end="101:33"><name pos:start="101:24" pos:end="101:25">qh</name><operator pos:start="101:26" pos:end="101:26">.</operator><name pos:start="101:27" pos:end="101:33">el_link</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="103:15" pos:end="111:13">else if <condition pos:start="103:23" pos:end="103:35">(<expr pos:start="103:24" pos:end="103:34"><name pos:start="103:24" pos:end="103:34"><name pos:start="103:24" pos:end="103:24">s</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:34">async_qh</name></name></expr>)</condition> <block pos:start="103:37" pos:end="111:13">{<block_content pos:start="109:17" pos:end="109:31">

                <comment type="block" pos:start="105:17" pos:end="107:56">/* We can only cope with one pending packet.  Keep looking

                   for the previously issued packet.  */</comment>

                <expr_stmt pos:start="109:17" pos:end="109:31"><expr pos:start="109:17" pos:end="109:30"><name pos:start="109:17" pos:end="109:20">link</name> <operator pos:start="109:22" pos:end="109:22">=</operator> <name pos:start="109:24" pos:end="109:30"><name pos:start="109:24" pos:end="109:25">qh</name><operator pos:start="109:26" pos:end="109:26">.</operator><name pos:start="109:27" pos:end="109:30">link</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="111:15" pos:end="187:13">else <block pos:start="111:20" pos:end="187:13">{<block_content pos:start="115:17" pos:end="185:31">

                <comment type="block" pos:start="113:17" pos:end="113:24">/* TD */</comment>

                <if_stmt pos:start="115:17" pos:end="117:26"><if pos:start="115:17" pos:end="117:26">if <condition pos:start="115:20" pos:end="115:31">(<expr pos:start="115:21" pos:end="115:30"><operator pos:start="115:21" pos:end="115:22">--</operator><name pos:start="115:23" pos:end="115:25">cnt</name> <operator pos:start="115:27" pos:end="115:28">==</operator> <literal type="number" pos:start="115:30" pos:end="115:30">0</literal></expr>)</condition><block type="pseudo" pos:start="117:21" pos:end="117:26"><block_content pos:start="117:21" pos:end="117:26">

                    <break pos:start="117:21" pos:end="117:26">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="119:17" pos:end="121:69"><expr pos:start="119:17" pos:end="121:68"><call pos:start="119:17" pos:end="121:68"><name pos:start="119:17" pos:end="119:40">cpu_physical_memory_read</name><argument_list pos:start="119:41" pos:end="121:68">(<argument pos:start="119:42" pos:end="119:58"><expr pos:start="119:42" pos:end="119:58"><name pos:start="119:42" pos:end="119:51"><name pos:start="119:42" pos:end="119:43">qh</name><operator pos:start="119:44" pos:end="119:44">.</operator><name pos:start="119:45" pos:end="119:51">el_link</name></name> <operator pos:start="119:53" pos:end="119:53">&amp;</operator> <operator pos:start="119:55" pos:end="119:55">~</operator><literal type="number" pos:start="119:56" pos:end="119:58">0xf</literal></expr></argument>,

                                         <argument pos:start="121:42" pos:end="121:55"><expr pos:start="121:42" pos:end="121:55"><operator pos:start="121:42" pos:end="121:42">(</operator><name pos:start="121:43" pos:end="121:49">uint8_t</name> <operator pos:start="121:51" pos:end="121:51">*</operator><operator pos:start="121:52" pos:end="121:52">)</operator><operator pos:start="121:53" pos:end="121:53">&amp;</operator><name pos:start="121:54" pos:end="121:55">td</name></expr></argument>, <argument pos:start="121:58" pos:end="121:67"><expr pos:start="121:58" pos:end="121:67"><sizeof pos:start="121:58" pos:end="121:67">sizeof<argument_list pos:start="121:64" pos:end="121:67">(<argument pos:start="121:65" pos:end="121:66"><expr pos:start="121:65" pos:end="121:66"><name pos:start="121:65" pos:end="121:66">td</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:39"><expr pos:start="123:17" pos:end="123:38"><call pos:start="123:17" pos:end="123:38"><name pos:start="123:17" pos:end="123:28">le32_to_cpus</name><argument_list pos:start="123:29" pos:end="123:38">(<argument pos:start="123:30" pos:end="123:37"><expr pos:start="123:30" pos:end="123:37"><operator pos:start="123:30" pos:end="123:30">&amp;</operator><name pos:start="123:31" pos:end="123:37"><name pos:start="123:31" pos:end="123:32">td</name><operator pos:start="123:33" pos:end="123:33">.</operator><name pos:start="123:34" pos:end="123:37">link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:39"><expr pos:start="125:17" pos:end="125:38"><call pos:start="125:17" pos:end="125:38"><name pos:start="125:17" pos:end="125:28">le32_to_cpus</name><argument_list pos:start="125:29" pos:end="125:38">(<argument pos:start="125:30" pos:end="125:37"><expr pos:start="125:30" pos:end="125:37"><operator pos:start="125:30" pos:end="125:30">&amp;</operator><name pos:start="125:31" pos:end="125:37"><name pos:start="125:31" pos:end="125:32">td</name><operator pos:start="125:33" pos:end="125:33">.</operator><name pos:start="125:34" pos:end="125:37">ctrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:40"><expr pos:start="127:17" pos:end="127:39"><call pos:start="127:17" pos:end="127:39"><name pos:start="127:17" pos:end="127:28">le32_to_cpus</name><argument_list pos:start="127:29" pos:end="127:39">(<argument pos:start="127:30" pos:end="127:38"><expr pos:start="127:30" pos:end="127:38"><operator pos:start="127:30" pos:end="127:30">&amp;</operator><name pos:start="127:31" pos:end="127:38"><name pos:start="127:31" pos:end="127:32">td</name><operator pos:start="127:33" pos:end="127:33">.</operator><name pos:start="127:34" pos:end="127:38">token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:41"><expr pos:start="129:17" pos:end="129:40"><call pos:start="129:17" pos:end="129:40"><name pos:start="129:17" pos:end="129:28">le32_to_cpus</name><argument_list pos:start="129:29" pos:end="129:40">(<argument pos:start="129:30" pos:end="129:39"><expr pos:start="129:30" pos:end="129:39"><operator pos:start="129:30" pos:end="129:30">&amp;</operator><name pos:start="129:31" pos:end="129:39"><name pos:start="129:31" pos:end="129:32">td</name><operator pos:start="129:33" pos:end="129:33">.</operator><name pos:start="129:34" pos:end="129:39">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:38"><expr pos:start="131:17" pos:end="131:37"><name pos:start="131:17" pos:end="131:27">old_td_ctrl</name> <operator pos:start="131:29" pos:end="131:29">=</operator> <name pos:start="131:31" pos:end="131:37"><name pos:start="131:31" pos:end="131:32">td</name><operator pos:start="131:33" pos:end="131:33">.</operator><name pos:start="131:34" pos:end="131:37">ctrl</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:59"><expr pos:start="133:17" pos:end="133:58"><name pos:start="133:17" pos:end="133:19">ret</name> <operator pos:start="133:21" pos:end="133:21">=</operator> <call pos:start="133:23" pos:end="133:58"><name pos:start="133:23" pos:end="133:36">uhci_handle_td</name><argument_list pos:start="133:37" pos:end="133:58">(<argument pos:start="133:38" pos:end="133:38"><expr pos:start="133:38" pos:end="133:38"><name pos:start="133:38" pos:end="133:38">s</name></expr></argument>, <argument pos:start="133:41" pos:end="133:43"><expr pos:start="133:41" pos:end="133:43"><operator pos:start="133:41" pos:end="133:41">&amp;</operator><name pos:start="133:42" pos:end="133:43">td</name></expr></argument>, <argument pos:start="133:46" pos:end="133:54"><expr pos:start="133:46" pos:end="133:54"><operator pos:start="133:46" pos:end="133:46">&amp;</operator><name pos:start="133:47" pos:end="133:54">int_mask</name></expr></argument>, <argument pos:start="133:57" pos:end="133:57"><expr pos:start="133:57" pos:end="133:57"><literal type="number" pos:start="133:57" pos:end="133:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="137:17" pos:end="137:54">/* update the status bits of the TD */</comment>

                <if_stmt pos:start="139:17" pos:end="149:17"><if pos:start="139:17" pos:end="149:17">if <condition pos:start="139:20" pos:end="139:43">(<expr pos:start="139:21" pos:end="139:42"><name pos:start="139:21" pos:end="139:31">old_td_ctrl</name> <operator pos:start="139:33" pos:end="139:34">!=</operator> <name pos:start="139:36" pos:end="139:42"><name pos:start="139:36" pos:end="139:37">td</name><operator pos:start="139:38" pos:end="139:38">.</operator><name pos:start="139:39" pos:end="139:42">ctrl</name></name></expr>)</condition> <block pos:start="139:45" pos:end="149:17">{<block_content pos:start="141:21" pos:end="147:59">

                    <expr_stmt pos:start="141:21" pos:end="141:47"><expr pos:start="141:21" pos:end="141:46"><name pos:start="141:21" pos:end="141:23">val</name> <operator pos:start="141:25" pos:end="141:25">=</operator> <call pos:start="141:27" pos:end="141:46"><name pos:start="141:27" pos:end="141:37">cpu_to_le32</name><argument_list pos:start="141:38" pos:end="141:46">(<argument pos:start="141:39" pos:end="141:45"><expr pos:start="141:39" pos:end="141:45"><name pos:start="141:39" pos:end="141:45"><name pos:start="141:39" pos:end="141:40">td</name><operator pos:start="141:41" pos:end="141:41">.</operator><name pos:start="141:42" pos:end="141:45">ctrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="143:21" pos:end="147:59"><expr pos:start="143:21" pos:end="147:58"><call pos:start="143:21" pos:end="147:58"><name pos:start="143:21" pos:end="143:45">cpu_physical_memory_write</name><argument_list pos:start="143:46" pos:end="147:58">(<argument pos:start="143:47" pos:end="143:69"><expr pos:start="143:47" pos:end="143:69"><operator pos:start="143:47" pos:end="143:47">(</operator><name pos:start="143:48" pos:end="143:57"><name pos:start="143:48" pos:end="143:49">qh</name><operator pos:start="143:50" pos:end="143:50">.</operator><name pos:start="143:51" pos:end="143:57">el_link</name></name> <operator pos:start="143:59" pos:end="143:59">&amp;</operator> <operator pos:start="143:61" pos:end="143:61">~</operator><literal type="number" pos:start="143:62" pos:end="143:64">0xf</literal><operator pos:start="143:65" pos:end="143:65">)</operator> <operator pos:start="143:67" pos:end="143:67">+</operator> <literal type="number" pos:start="143:69" pos:end="143:69">4</literal></expr></argument>,

                                              <argument pos:start="145:47" pos:end="145:67"><expr pos:start="145:47" pos:end="145:67"><operator pos:start="145:47" pos:end="145:47">(</operator><specifier pos:start="145:48" pos:end="145:52">const</specifier> <name pos:start="145:54" pos:end="145:60">uint8_t</name> <operator pos:start="145:62" pos:end="145:62">*</operator><operator pos:start="145:63" pos:end="145:63">)</operator><operator pos:start="145:64" pos:end="145:64">&amp;</operator><name pos:start="145:65" pos:end="145:67">val</name></expr></argument>,

                                              <argument pos:start="147:47" pos:end="147:57"><expr pos:start="147:47" pos:end="147:57"><sizeof pos:start="147:47" pos:end="147:57">sizeof<argument_list pos:start="147:53" pos:end="147:57">(<argument pos:start="147:54" pos:end="147:56"><expr pos:start="147:54" pos:end="147:56"><name pos:start="147:54" pos:end="147:56">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="151:17" pos:end="153:26"><if pos:start="151:17" pos:end="153:26">if <condition pos:start="151:20" pos:end="151:28">(<expr pos:start="151:21" pos:end="151:27"><name pos:start="151:21" pos:end="151:23">ret</name> <operator pos:start="151:25" pos:end="151:25">&lt;</operator> <literal type="number" pos:start="151:27" pos:end="151:27">0</literal></expr>)</condition><block type="pseudo" pos:start="153:21" pos:end="153:26"><block_content pos:start="153:21" pos:end="153:26">

                    <break pos:start="153:21" pos:end="153:26">break;</break></block_content></block></if></if_stmt> <comment type="block" pos:start="153:28" pos:end="153:50">/* interrupted frame */</comment>

                <if_stmt pos:start="155:17" pos:end="181:17"><if pos:start="155:17" pos:end="159:17">if <condition pos:start="155:20" pos:end="155:29">(<expr pos:start="155:21" pos:end="155:28"><name pos:start="155:21" pos:end="155:23">ret</name> <operator pos:start="155:25" pos:end="155:26">==</operator> <literal type="number" pos:start="155:28" pos:end="155:28">2</literal></expr>)</condition> <block pos:start="155:31" pos:end="159:17">{<block_content pos:start="157:21" pos:end="157:39">

                    <expr_stmt pos:start="157:21" pos:end="157:39"><expr pos:start="157:21" pos:end="157:38"><name pos:start="157:21" pos:end="157:31"><name pos:start="157:21" pos:end="157:21">s</name><operator pos:start="157:22" pos:end="157:23">-&gt;</operator><name pos:start="157:24" pos:end="157:31">async_qh</name></name> <operator pos:start="157:33" pos:end="157:33">=</operator> <name pos:start="157:35" pos:end="157:38">link</name></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="159:19" pos:end="181:17">else if <condition pos:start="159:27" pos:end="159:36">(<expr pos:start="159:28" pos:end="159:35"><name pos:start="159:28" pos:end="159:30">ret</name> <operator pos:start="159:32" pos:end="159:33">==</operator> <literal type="number" pos:start="159:35" pos:end="159:35">0</literal></expr>)</condition> <block pos:start="159:38" pos:end="181:17">{<block_content pos:start="163:21" pos:end="179:21">

                    <comment type="block" pos:start="161:21" pos:end="161:48">/* update qh element link */</comment>

                    <expr_stmt pos:start="163:21" pos:end="163:41"><expr pos:start="163:21" pos:end="163:40"><name pos:start="163:21" pos:end="163:30"><name pos:start="163:21" pos:end="163:22">qh</name><operator pos:start="163:23" pos:end="163:23">.</operator><name pos:start="163:24" pos:end="163:30">el_link</name></name> <operator pos:start="163:32" pos:end="163:32">=</operator> <name pos:start="163:34" pos:end="163:40"><name pos:start="163:34" pos:end="163:35">td</name><operator pos:start="163:36" pos:end="163:36">.</operator><name pos:start="163:37" pos:end="163:40">link</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="165:21" pos:end="165:50"><expr pos:start="165:21" pos:end="165:49"><name pos:start="165:21" pos:end="165:23">val</name> <operator pos:start="165:25" pos:end="165:25">=</operator> <call pos:start="165:27" pos:end="165:49"><name pos:start="165:27" pos:end="165:37">cpu_to_le32</name><argument_list pos:start="165:38" pos:end="165:49">(<argument pos:start="165:39" pos:end="165:48"><expr pos:start="165:39" pos:end="165:48"><name pos:start="165:39" pos:end="165:48"><name pos:start="165:39" pos:end="165:40">qh</name><operator pos:start="165:41" pos:end="165:41">.</operator><name pos:start="165:42" pos:end="165:48">el_link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="167:21" pos:end="171:59"><expr pos:start="167:21" pos:end="171:58"><call pos:start="167:21" pos:end="171:58"><name pos:start="167:21" pos:end="167:45">cpu_physical_memory_write</name><argument_list pos:start="167:46" pos:end="171:58">(<argument pos:start="167:47" pos:end="167:63"><expr pos:start="167:47" pos:end="167:63"><operator pos:start="167:47" pos:end="167:47">(</operator><name pos:start="167:48" pos:end="167:51">link</name> <operator pos:start="167:53" pos:end="167:53">&amp;</operator> <operator pos:start="167:55" pos:end="167:55">~</operator><literal type="number" pos:start="167:56" pos:end="167:58">0xf</literal><operator pos:start="167:59" pos:end="167:59">)</operator> <operator pos:start="167:61" pos:end="167:61">+</operator> <literal type="number" pos:start="167:63" pos:end="167:63">4</literal></expr></argument>,

                                              <argument pos:start="169:47" pos:end="169:67"><expr pos:start="169:47" pos:end="169:67"><operator pos:start="169:47" pos:end="169:47">(</operator><specifier pos:start="169:48" pos:end="169:52">const</specifier> <name pos:start="169:54" pos:end="169:60">uint8_t</name> <operator pos:start="169:62" pos:end="169:62">*</operator><operator pos:start="169:63" pos:end="169:63">)</operator><operator pos:start="169:64" pos:end="169:64">&amp;</operator><name pos:start="169:65" pos:end="169:67">val</name></expr></argument>,

                                              <argument pos:start="171:47" pos:end="171:57"><expr pos:start="171:47" pos:end="171:57"><sizeof pos:start="171:47" pos:end="171:57">sizeof<argument_list pos:start="171:53" pos:end="171:57">(<argument pos:start="171:54" pos:end="171:56"><expr pos:start="171:54" pos:end="171:56"><name pos:start="171:54" pos:end="171:56">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="173:21" pos:end="179:21"><if pos:start="173:21" pos:end="179:21">if <condition pos:start="173:24" pos:end="173:39">(<expr pos:start="173:25" pos:end="173:38"><name pos:start="173:25" pos:end="173:34"><name pos:start="173:25" pos:end="173:26">qh</name><operator pos:start="173:27" pos:end="173:27">.</operator><name pos:start="173:28" pos:end="173:34">el_link</name></name> <operator pos:start="173:36" pos:end="173:36">&amp;</operator> <literal type="number" pos:start="173:38" pos:end="173:38">4</literal></expr>)</condition> <block pos:start="173:41" pos:end="179:21">{<block_content pos:start="177:25" pos:end="177:41">

                        <comment type="block" pos:start="175:25" pos:end="175:41">/* depth first */</comment>

                        <goto pos:start="177:25" pos:end="177:41">goto <name pos:start="177:30" pos:end="177:40">depth_first</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="183:17" pos:end="183:38">/* go to next entry */</comment>

                <expr_stmt pos:start="185:17" pos:end="185:31"><expr pos:start="185:17" pos:end="185:30"><name pos:start="185:17" pos:end="185:20">link</name> <operator pos:start="185:22" pos:end="185:22">=</operator> <name pos:start="185:24" pos:end="185:30"><name pos:start="185:24" pos:end="185:25">qh</name><operator pos:start="185:26" pos:end="185:26">.</operator><name pos:start="185:27" pos:end="185:30">link</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="189:11" pos:end="241:9">else <block pos:start="189:16" pos:end="241:9">{<block_content pos:start="193:13" pos:end="239:27">

            <comment type="block" pos:start="191:13" pos:end="191:20">/* TD */</comment>

            <expr_stmt pos:start="193:13" pos:end="193:78"><expr pos:start="193:13" pos:end="193:77"><call pos:start="193:13" pos:end="193:77"><name pos:start="193:13" pos:end="193:36">cpu_physical_memory_read</name><argument_list pos:start="193:37" pos:end="193:77">(<argument pos:start="193:38" pos:end="193:48"><expr pos:start="193:38" pos:end="193:48"><name pos:start="193:38" pos:end="193:41">link</name> <operator pos:start="193:43" pos:end="193:43">&amp;</operator> <operator pos:start="193:45" pos:end="193:45">~</operator><literal type="number" pos:start="193:46" pos:end="193:48">0xf</literal></expr></argument>, <argument pos:start="193:51" pos:end="193:64"><expr pos:start="193:51" pos:end="193:64"><operator pos:start="193:51" pos:end="193:51">(</operator><name pos:start="193:52" pos:end="193:58">uint8_t</name> <operator pos:start="193:60" pos:end="193:60">*</operator><operator pos:start="193:61" pos:end="193:61">)</operator><operator pos:start="193:62" pos:end="193:62">&amp;</operator><name pos:start="193:63" pos:end="193:64">td</name></expr></argument>, <argument pos:start="193:67" pos:end="193:76"><expr pos:start="193:67" pos:end="193:76"><sizeof pos:start="193:67" pos:end="193:76">sizeof<argument_list pos:start="193:73" pos:end="193:76">(<argument pos:start="193:74" pos:end="193:75"><expr pos:start="193:74" pos:end="193:75"><name pos:start="193:74" pos:end="193:75">td</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:35"><expr pos:start="195:13" pos:end="195:34"><call pos:start="195:13" pos:end="195:34"><name pos:start="195:13" pos:end="195:24">le32_to_cpus</name><argument_list pos:start="195:25" pos:end="195:34">(<argument pos:start="195:26" pos:end="195:33"><expr pos:start="195:26" pos:end="195:33"><operator pos:start="195:26" pos:end="195:26">&amp;</operator><name pos:start="195:27" pos:end="195:33"><name pos:start="195:27" pos:end="195:28">td</name><operator pos:start="195:29" pos:end="195:29">.</operator><name pos:start="195:30" pos:end="195:33">link</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:35"><expr pos:start="197:13" pos:end="197:34"><call pos:start="197:13" pos:end="197:34"><name pos:start="197:13" pos:end="197:24">le32_to_cpus</name><argument_list pos:start="197:25" pos:end="197:34">(<argument pos:start="197:26" pos:end="197:33"><expr pos:start="197:26" pos:end="197:33"><operator pos:start="197:26" pos:end="197:26">&amp;</operator><name pos:start="197:27" pos:end="197:33"><name pos:start="197:27" pos:end="197:28">td</name><operator pos:start="197:29" pos:end="197:29">.</operator><name pos:start="197:30" pos:end="197:33">ctrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:36"><expr pos:start="199:13" pos:end="199:35"><call pos:start="199:13" pos:end="199:35"><name pos:start="199:13" pos:end="199:24">le32_to_cpus</name><argument_list pos:start="199:25" pos:end="199:35">(<argument pos:start="199:26" pos:end="199:34"><expr pos:start="199:26" pos:end="199:34"><operator pos:start="199:26" pos:end="199:26">&amp;</operator><name pos:start="199:27" pos:end="199:34"><name pos:start="199:27" pos:end="199:28">td</name><operator pos:start="199:29" pos:end="199:29">.</operator><name pos:start="199:30" pos:end="199:34">token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:37"><expr pos:start="201:13" pos:end="201:36"><call pos:start="201:13" pos:end="201:36"><name pos:start="201:13" pos:end="201:24">le32_to_cpus</name><argument_list pos:start="201:25" pos:end="201:36">(<argument pos:start="201:26" pos:end="201:35"><expr pos:start="201:26" pos:end="201:35"><operator pos:start="201:26" pos:end="201:26">&amp;</operator><name pos:start="201:27" pos:end="201:35"><name pos:start="201:27" pos:end="201:28">td</name><operator pos:start="201:29" pos:end="201:29">.</operator><name pos:start="201:30" pos:end="201:35">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="205:13" pos:end="205:46">/* Handle isochonous transfer.  */</comment>

            <comment type="block" pos:start="207:13" pos:end="207:61">/* FIXME: might be more than one isoc in frame */</comment>

            <expr_stmt pos:start="209:13" pos:end="209:34"><expr pos:start="209:13" pos:end="209:33"><name pos:start="209:13" pos:end="209:23">old_td_ctrl</name> <operator pos:start="209:25" pos:end="209:25">=</operator> <name pos:start="209:27" pos:end="209:33"><name pos:start="209:27" pos:end="209:28">td</name><operator pos:start="209:29" pos:end="209:29">.</operator><name pos:start="209:30" pos:end="209:33">ctrl</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:55"><expr pos:start="211:13" pos:end="211:54"><name pos:start="211:13" pos:end="211:15">ret</name> <operator pos:start="211:17" pos:end="211:17">=</operator> <call pos:start="211:19" pos:end="211:54"><name pos:start="211:19" pos:end="211:32">uhci_handle_td</name><argument_list pos:start="211:33" pos:end="211:54">(<argument pos:start="211:34" pos:end="211:34"><expr pos:start="211:34" pos:end="211:34"><name pos:start="211:34" pos:end="211:34">s</name></expr></argument>, <argument pos:start="211:37" pos:end="211:39"><expr pos:start="211:37" pos:end="211:39"><operator pos:start="211:37" pos:end="211:37">&amp;</operator><name pos:start="211:38" pos:end="211:39">td</name></expr></argument>, <argument pos:start="211:42" pos:end="211:50"><expr pos:start="211:42" pos:end="211:50"><operator pos:start="211:42" pos:end="211:42">&amp;</operator><name pos:start="211:43" pos:end="211:50">int_mask</name></expr></argument>, <argument pos:start="211:53" pos:end="211:53"><expr pos:start="211:53" pos:end="211:53"><literal type="number" pos:start="211:53" pos:end="211:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="215:13" pos:end="215:50">/* update the status bits of the TD */</comment>

            <if_stmt pos:start="217:13" pos:end="227:13"><if pos:start="217:13" pos:end="227:13">if <condition pos:start="217:16" pos:end="217:39">(<expr pos:start="217:17" pos:end="217:38"><name pos:start="217:17" pos:end="217:27">old_td_ctrl</name> <operator pos:start="217:29" pos:end="217:30">!=</operator> <name pos:start="217:32" pos:end="217:38"><name pos:start="217:32" pos:end="217:33">td</name><operator pos:start="217:34" pos:end="217:34">.</operator><name pos:start="217:35" pos:end="217:38">ctrl</name></name></expr>)</condition> <block pos:start="217:41" pos:end="227:13">{<block_content pos:start="219:17" pos:end="225:55">

                <expr_stmt pos:start="219:17" pos:end="219:43"><expr pos:start="219:17" pos:end="219:42"><name pos:start="219:17" pos:end="219:19">val</name> <operator pos:start="219:21" pos:end="219:21">=</operator> <call pos:start="219:23" pos:end="219:42"><name pos:start="219:23" pos:end="219:33">cpu_to_le32</name><argument_list pos:start="219:34" pos:end="219:42">(<argument pos:start="219:35" pos:end="219:41"><expr pos:start="219:35" pos:end="219:41"><name pos:start="219:35" pos:end="219:41"><name pos:start="219:35" pos:end="219:36">td</name><operator pos:start="219:37" pos:end="219:37">.</operator><name pos:start="219:38" pos:end="219:41">ctrl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="225:55"><expr pos:start="221:17" pos:end="225:54"><call pos:start="221:17" pos:end="225:54"><name pos:start="221:17" pos:end="221:41">cpu_physical_memory_write</name><argument_list pos:start="221:42" pos:end="225:54">(<argument pos:start="221:43" pos:end="221:59"><expr pos:start="221:43" pos:end="221:59"><operator pos:start="221:43" pos:end="221:43">(</operator><name pos:start="221:44" pos:end="221:47">link</name> <operator pos:start="221:49" pos:end="221:49">&amp;</operator> <operator pos:start="221:51" pos:end="221:51">~</operator><literal type="number" pos:start="221:52" pos:end="221:54">0xf</literal><operator pos:start="221:55" pos:end="221:55">)</operator> <operator pos:start="221:57" pos:end="221:57">+</operator> <literal type="number" pos:start="221:59" pos:end="221:59">4</literal></expr></argument>,

                                          <argument pos:start="223:43" pos:end="223:63"><expr pos:start="223:43" pos:end="223:63"><operator pos:start="223:43" pos:end="223:43">(</operator><specifier pos:start="223:44" pos:end="223:48">const</specifier> <name pos:start="223:50" pos:end="223:56">uint8_t</name> <operator pos:start="223:58" pos:end="223:58">*</operator><operator pos:start="223:59" pos:end="223:59">)</operator><operator pos:start="223:60" pos:end="223:60">&amp;</operator><name pos:start="223:61" pos:end="223:63">val</name></expr></argument>,

                                          <argument pos:start="225:43" pos:end="225:53"><expr pos:start="225:43" pos:end="225:53"><sizeof pos:start="225:43" pos:end="225:53">sizeof<argument_list pos:start="225:49" pos:end="225:53">(<argument pos:start="225:50" pos:end="225:52"><expr pos:start="225:50" pos:end="225:52"><name pos:start="225:50" pos:end="225:52">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="229:13" pos:end="231:22"><if pos:start="229:13" pos:end="231:22">if <condition pos:start="229:16" pos:end="229:24">(<expr pos:start="229:17" pos:end="229:23"><name pos:start="229:17" pos:end="229:19">ret</name> <operator pos:start="229:21" pos:end="229:21">&lt;</operator> <literal type="number" pos:start="229:23" pos:end="229:23">0</literal></expr>)</condition><block type="pseudo" pos:start="231:17" pos:end="231:22"><block_content pos:start="231:17" pos:end="231:22">

                <break pos:start="231:17" pos:end="231:22">break;</break></block_content></block></if></if_stmt> <comment type="block" pos:start="231:24" pos:end="231:46">/* interrupted frame */</comment>

            <if_stmt pos:start="233:13" pos:end="237:13"><if pos:start="233:13" pos:end="237:13">if <condition pos:start="233:16" pos:end="233:25">(<expr pos:start="233:17" pos:end="233:24"><name pos:start="233:17" pos:end="233:19">ret</name> <operator pos:start="233:21" pos:end="233:22">==</operator> <literal type="number" pos:start="233:24" pos:end="233:24">2</literal></expr>)</condition> <block pos:start="233:27" pos:end="237:13">{<block_content pos:start="235:17" pos:end="235:49">

                <expr_stmt pos:start="235:17" pos:end="235:49"><expr pos:start="235:17" pos:end="235:48"><name pos:start="235:17" pos:end="235:35"><name pos:start="235:17" pos:end="235:17">s</name><operator pos:start="235:18" pos:end="235:19">-&gt;</operator><name pos:start="235:20" pos:end="235:35">async_frame_addr</name></name> <operator pos:start="235:37" pos:end="235:37">=</operator> <name pos:start="235:39" pos:end="235:48">frame_addr</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:27"><expr pos:start="239:13" pos:end="239:26"><name pos:start="239:13" pos:end="239:16">link</name> <operator pos:start="239:18" pos:end="239:18">=</operator> <name pos:start="239:20" pos:end="239:26"><name pos:start="239:20" pos:end="239:21">td</name><operator pos:start="239:22" pos:end="239:22">.</operator><name pos:start="239:23" pos:end="239:26">link</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="245:5" pos:end="245:35"><expr pos:start="245:5" pos:end="245:34"><name pos:start="245:5" pos:end="245:23"><name pos:start="245:5" pos:end="245:5">s</name><operator pos:start="245:6" pos:end="245:7">-&gt;</operator><name pos:start="245:8" pos:end="245:23">pending_int_mask</name></name> <operator pos:start="245:25" pos:end="245:25">=</operator> <name pos:start="245:27" pos:end="245:34">int_mask</name></expr>;</expr_stmt>

    <if_stmt pos:start="247:5" pos:end="265:5"><if pos:start="247:5" pos:end="265:5">if <condition pos:start="247:8" pos:end="247:21">(<expr pos:start="247:9" pos:end="247:20"><name pos:start="247:9" pos:end="247:20">old_async_qh</name></expr>)</condition> <block pos:start="247:23" pos:end="265:5">{<block_content pos:start="257:9" pos:end="263:24">

        <comment type="block" pos:start="249:9" pos:end="253:67">/* A previously started transfer has disappeared from the transfer

           list.  There's nothing useful we can do with it now, so just

           discard the packet and hope it wasn't too important.  */</comment>

<cpp:ifdef pos:start="255:1" pos:end="255:12">#<cpp:directive pos:start="255:2" pos:end="255:6">ifdef</cpp:directive> <name pos:start="255:8" pos:end="255:12">DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="257:9" pos:end="260:0"><expr pos:start="257:9" pos:end="257:41"><call pos:start="257:9" pos:end="257:41"><name pos:start="257:9" pos:end="257:14">printf</name><argument_list pos:start="257:15" pos:end="257:41">(<argument pos:start="257:16" pos:end="257:40"><expr pos:start="257:16" pos:end="257:40"><literal type="string" pos:start="257:16" pos:end="257:40">"Discarding USB packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="259:1" pos:end="259:6">#<cpp:directive pos:start="259:2" pos:end="259:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="261:9" pos:end="261:42"><expr pos:start="261:9" pos:end="261:41"><call pos:start="261:9" pos:end="261:41"><name pos:start="261:9" pos:end="261:25">usb_cancel_packet</name><argument_list pos:start="261:26" pos:end="261:41">(<argument pos:start="261:27" pos:end="261:40"><expr pos:start="261:27" pos:end="261:40"><operator pos:start="261:27" pos:end="261:27">&amp;</operator><name pos:start="261:28" pos:end="261:40"><name pos:start="261:28" pos:end="261:28">s</name><operator pos:start="261:29" pos:end="261:30">-&gt;</operator><name pos:start="261:31" pos:end="261:40">usb_packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:24"><expr pos:start="263:9" pos:end="263:23"><name pos:start="263:9" pos:end="263:19"><name pos:start="263:9" pos:end="263:9">s</name><operator pos:start="263:10" pos:end="263:11">-&gt;</operator><name pos:start="263:12" pos:end="263:19">async_qh</name></name> <operator pos:start="263:21" pos:end="263:21">=</operator> <literal type="number" pos:start="263:23" pos:end="263:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="269:5" pos:end="269:46">/* prepare the timer for the next frame */</comment>

    <expr_stmt pos:start="271:5" pos:end="273:43"><expr pos:start="271:5" pos:end="273:42"><name pos:start="271:5" pos:end="271:15">expire_time</name> <operator pos:start="271:17" pos:end="271:17">=</operator> <call pos:start="271:19" pos:end="271:42"><name pos:start="271:19" pos:end="271:32">qemu_get_clock</name><argument_list pos:start="271:33" pos:end="271:42">(<argument pos:start="271:34" pos:end="271:41"><expr pos:start="271:34" pos:end="271:41"><name pos:start="271:34" pos:end="271:41">vm_clock</name></expr></argument>)</argument_list></call> <operator pos:start="271:44" pos:end="271:44">+</operator>

        <operator pos:start="273:9" pos:end="273:9">(</operator><name pos:start="273:10" pos:end="273:22">ticks_per_sec</name> <operator pos:start="273:24" pos:end="273:24">/</operator> <name pos:start="273:26" pos:end="273:41">FRAME_TIMER_FREQ</name><operator pos:start="273:42" pos:end="273:42">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:48"><expr pos:start="275:5" pos:end="275:47"><call pos:start="275:5" pos:end="275:47"><name pos:start="275:5" pos:end="275:18">qemu_mod_timer</name><argument_list pos:start="275:19" pos:end="275:47">(<argument pos:start="275:20" pos:end="275:33"><expr pos:start="275:20" pos:end="275:33"><name pos:start="275:20" pos:end="275:33"><name pos:start="275:20" pos:end="275:20">s</name><operator pos:start="275:21" pos:end="275:22">-&gt;</operator><name pos:start="275:23" pos:end="275:33">frame_timer</name></name></expr></argument>, <argument pos:start="275:36" pos:end="275:46"><expr pos:start="275:36" pos:end="275:46"><name pos:start="275:36" pos:end="275:46">expire_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
