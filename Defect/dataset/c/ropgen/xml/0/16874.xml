<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16874.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">axisdev88_init</name> <parameter_list pos:start="1:21" pos:end="7:72">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:40"><name pos:start="1:22" pos:end="1:31">ram_addr_t</name></type> <name pos:start="1:33" pos:end="1:40">ram_size</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:58"><decl pos:start="1:43" pos:end="1:58"><type pos:start="1:43" pos:end="1:58"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:58">vga_ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:62"><decl pos:start="3:47" pos:end="3:62"><type pos:start="3:47" pos:end="3:62"><name pos:start="3:47" pos:end="3:58">DisplayState</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:62">ds</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:76"><decl pos:start="5:51" pos:end="5:76"><type pos:start="5:51" pos:end="5:76"><specifier pos:start="5:51" pos:end="5:55">const</specifier> <name pos:start="5:57" pos:end="5:60">char</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:76">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:48"><decl pos:start="7:22" pos:end="7:48"><type pos:start="7:22" pos:end="7:48"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:48">initrd_filename</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:71"><decl pos:start="7:51" pos:end="7:71"><type pos:start="7:51" pos:end="7:71"><specifier pos:start="7:51" pos:end="7:55">const</specifier> <name pos:start="7:57" pos:end="7:60">char</name> <modifier pos:start="7:62" pos:end="7:62">*</modifier></type><name pos:start="7:63" pos:end="7:71">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="215:1">{<block_content pos:start="11:5" pos:end="213:41">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:22">etraxfs_pic</name></name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:27">pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:22">etraxfs_dmac</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:53"><decl pos:start="17:5" pos:end="17:52"><type pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:29">etraxfs_dma_client</name></name> <modifier pos:start="17:31" pos:end="17:31">*</modifier></type><name pos:start="17:32" pos:end="17:37"><name pos:start="17:32" pos:end="17:34">eth</name><index pos:start="17:35" pos:end="17:37">[<expr pos:start="17:36" pos:end="17:36"><literal type="number" pos:start="17:36" pos:end="17:36">2</literal></expr>]</index></name> <init pos:start="17:39" pos:end="17:52">= <expr pos:start="17:41" pos:end="17:52"><block pos:start="17:41" pos:end="17:52">{<expr pos:start="17:42" pos:end="17:45"><name pos:start="17:42" pos:end="17:45">NULL</name></expr>, <expr pos:start="17:48" pos:end="17:51"><name pos:start="17:48" pos:end="17:51">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">nand_regs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:18"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">gpio_regs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:14">ram_addr_t</name></type> <name pos:start="27:16" pos:end="27:23">phys_ram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:27"><decl pos:start="29:5" pos:end="29:26"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:14">ram_addr_t</name></type> <name pos:start="29:16" pos:end="29:26">phys_intmem</name></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:19">/* init CPUs */</comment>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:26">(<expr pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:17">cpu_model</name> <operator pos:start="35:19" pos:end="35:20">==</operator> <name pos:start="35:22" pos:end="35:25">NULL</name></expr>)</condition> <block pos:start="35:28" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:30">

        <expr_stmt pos:start="37:9" pos:end="37:30"><expr pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="string" pos:start="37:21" pos:end="37:29">"crisv32"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:30"><expr pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:7">env</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:29"><name pos:start="41:11" pos:end="41:18">cpu_init</name><argument_list pos:start="41:19" pos:end="41:29">(<argument pos:start="41:20" pos:end="41:28"><expr pos:start="41:20" pos:end="41:28"><name pos:start="41:20" pos:end="41:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:45"><expr pos:start="43:5" pos:end="43:44"><call pos:start="43:5" pos:end="43:44"><name pos:start="43:5" pos:end="43:23">qemu_register_reset</name><argument_list pos:start="43:24" pos:end="43:44">(<argument pos:start="43:25" pos:end="43:38"><expr pos:start="43:25" pos:end="43:38"><name pos:start="43:25" pos:end="43:38">main_cpu_reset</name></expr></argument>, <argument pos:start="43:41" pos:end="43:43"><expr pos:start="43:41" pos:end="43:43"><name pos:start="43:41" pos:end="43:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:40"><expr pos:start="49:5" pos:end="49:39"><name pos:start="49:5" pos:end="49:12">phys_ram</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:39"><name pos:start="49:16" pos:end="49:29">qemu_ram_alloc</name><argument_list pos:start="49:30" pos:end="49:39">(<argument pos:start="49:31" pos:end="49:38"><expr pos:start="49:31" pos:end="49:38"><name pos:start="49:31" pos:end="49:38">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:78"><expr pos:start="51:5" pos:end="51:77"><call pos:start="51:5" pos:end="51:77"><name pos:start="51:5" pos:end="51:32">cpu_register_physical_memory</name><argument_list pos:start="51:33" pos:end="51:77">(<argument pos:start="51:34" pos:end="51:43"><expr pos:start="51:34" pos:end="51:43"><literal type="number" pos:start="51:34" pos:end="51:43">0x40000000</literal></expr></argument>, <argument pos:start="51:46" pos:end="51:53"><expr pos:start="51:46" pos:end="51:53"><name pos:start="51:46" pos:end="51:53">ram_size</name></expr></argument>, <argument pos:start="51:56" pos:end="51:76"><expr pos:start="51:56" pos:end="51:76"><name pos:start="51:56" pos:end="51:63">phys_ram</name> <operator pos:start="51:65" pos:end="51:65">|</operator> <name pos:start="51:67" pos:end="51:76">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="57:27">/* The ETRAX-FS has 128Kb on chip ram, the docs refer to it as the 

       internal memory.  */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:46"><expr pos:start="59:5" pos:end="59:45"><name pos:start="59:5" pos:end="59:15">phys_intmem</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <call pos:start="59:19" pos:end="59:45"><name pos:start="59:19" pos:end="59:32">qemu_ram_alloc</name><argument_list pos:start="59:33" pos:end="59:45">(<argument pos:start="59:34" pos:end="59:44"><expr pos:start="59:34" pos:end="59:44"><name pos:start="59:34" pos:end="59:44">INTMEM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="63:59"><expr pos:start="61:5" pos:end="63:58"><call pos:start="61:5" pos:end="63:58"><name pos:start="61:5" pos:end="61:32">cpu_register_physical_memory</name><argument_list pos:start="61:33" pos:end="63:58">(<argument pos:start="61:34" pos:end="61:43"><expr pos:start="61:34" pos:end="61:43"><literal type="number" pos:start="61:34" pos:end="61:43">0x38000000</literal></expr></argument>, <argument pos:start="61:46" pos:end="61:56"><expr pos:start="61:46" pos:end="61:56"><name pos:start="61:46" pos:end="61:56">INTMEM_SIZE</name></expr></argument>,

                                 <argument pos:start="63:34" pos:end="63:57"><expr pos:start="63:34" pos:end="63:57"><name pos:start="63:34" pos:end="63:44">phys_intmem</name> <operator pos:start="63:46" pos:end="63:46">|</operator> <name pos:start="63:48" pos:end="63:57">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





      <comment type="block" pos:start="69:7" pos:end="69:40">/* Attach a NAND flash to CS1.  */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:56"><expr pos:start="71:5" pos:end="71:55"><name pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:14">nand_state</name><operator pos:start="71:15" pos:end="71:15">.</operator><name pos:start="71:16" pos:end="71:19">nand</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:55"><name pos:start="71:23" pos:end="71:31">nand_init</name><argument_list pos:start="71:32" pos:end="71:55">(<argument pos:start="71:33" pos:end="71:48"><expr pos:start="71:33" pos:end="71:48"><name pos:start="71:33" pos:end="71:48">NAND_MFR_STMICRO</name></expr></argument>, <argument pos:start="71:51" pos:end="71:54"><expr pos:start="71:51" pos:end="71:54"><literal type="number" pos:start="71:51" pos:end="71:54">0x39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:78"><expr pos:start="73:5" pos:end="73:77"><name pos:start="73:5" pos:end="73:13">nand_regs</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <call pos:start="73:17" pos:end="73:77"><name pos:start="73:17" pos:end="73:38">cpu_register_io_memory</name><argument_list pos:start="73:39" pos:end="73:77">(<argument pos:start="73:40" pos:end="73:40"><expr pos:start="73:40" pos:end="73:40"><literal type="number" pos:start="73:40" pos:end="73:40">0</literal></expr></argument>, <argument pos:start="73:43" pos:end="73:51"><expr pos:start="73:43" pos:end="73:51"><name pos:start="73:43" pos:end="73:51">nand_read</name></expr></argument>, <argument pos:start="73:54" pos:end="73:63"><expr pos:start="73:54" pos:end="73:63"><name pos:start="73:54" pos:end="73:63">nand_write</name></expr></argument>, <argument pos:start="73:66" pos:end="73:76"><expr pos:start="73:66" pos:end="73:76"><operator pos:start="73:66" pos:end="73:66">&amp;</operator><name pos:start="73:67" pos:end="73:76">nand_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:68"><expr pos:start="75:5" pos:end="75:67"><call pos:start="75:5" pos:end="75:67"><name pos:start="75:5" pos:end="75:32">cpu_register_physical_memory</name><argument_list pos:start="75:33" pos:end="75:67">(<argument pos:start="75:34" pos:end="75:43"><expr pos:start="75:34" pos:end="75:43"><literal type="number" pos:start="75:34" pos:end="75:43">0x10000000</literal></expr></argument>, <argument pos:start="75:46" pos:end="75:55"><expr pos:start="75:46" pos:end="75:55"><literal type="number" pos:start="75:46" pos:end="75:55">0x05000000</literal></expr></argument>, <argument pos:start="75:58" pos:end="75:66"><expr pos:start="75:58" pos:end="75:66"><name pos:start="75:58" pos:end="75:66">nand_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:34"><expr pos:start="79:5" pos:end="79:33"><name pos:start="79:5" pos:end="79:19"><name pos:start="79:5" pos:end="79:14">gpio_state</name><operator pos:start="79:15" pos:end="79:15">.</operator><name pos:start="79:16" pos:end="79:19">nand</name></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <operator pos:start="79:23" pos:end="79:23">&amp;</operator><name pos:start="79:24" pos:end="79:33">nand_state</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:78"><expr pos:start="81:5" pos:end="81:77"><name pos:start="81:5" pos:end="81:13">gpio_regs</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <call pos:start="81:17" pos:end="81:77"><name pos:start="81:17" pos:end="81:38">cpu_register_io_memory</name><argument_list pos:start="81:39" pos:end="81:77">(<argument pos:start="81:40" pos:end="81:40"><expr pos:start="81:40" pos:end="81:40"><literal type="number" pos:start="81:40" pos:end="81:40">0</literal></expr></argument>, <argument pos:start="81:43" pos:end="81:51"><expr pos:start="81:43" pos:end="81:51"><name pos:start="81:43" pos:end="81:51">gpio_read</name></expr></argument>, <argument pos:start="81:54" pos:end="81:63"><expr pos:start="81:54" pos:end="81:63"><name pos:start="81:54" pos:end="81:63">gpio_write</name></expr></argument>, <argument pos:start="81:66" pos:end="81:76"><expr pos:start="81:66" pos:end="81:76"><operator pos:start="81:66" pos:end="81:66">&amp;</operator><name pos:start="81:67" pos:end="81:76">gpio_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:62"><expr pos:start="83:5" pos:end="83:61"><call pos:start="83:5" pos:end="83:61"><name pos:start="83:5" pos:end="83:32">cpu_register_physical_memory</name><argument_list pos:start="83:33" pos:end="83:61">(<argument pos:start="83:34" pos:end="83:43"><expr pos:start="83:34" pos:end="83:43"><literal type="number" pos:start="83:34" pos:end="83:43">0x3001a000</literal></expr></argument>, <argument pos:start="83:46" pos:end="83:49"><expr pos:start="83:46" pos:end="83:49"><literal type="number" pos:start="83:46" pos:end="83:49">0x5c</literal></expr></argument>, <argument pos:start="83:52" pos:end="83:60"><expr pos:start="83:52" pos:end="83:60"><name pos:start="83:52" pos:end="83:60">gpio_regs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="89:5" pos:end="89:44"><expr pos:start="89:5" pos:end="89:43"><name pos:start="89:5" pos:end="89:7">pic</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="89:43"><name pos:start="89:11" pos:end="89:26">etraxfs_pic_init</name><argument_list pos:start="89:27" pos:end="89:43">(<argument pos:start="89:28" pos:end="89:30"><expr pos:start="89:28" pos:end="89:30"><name pos:start="89:28" pos:end="89:30">env</name></expr></argument>, <argument pos:start="89:33" pos:end="89:42"><expr pos:start="89:33" pos:end="89:42"><literal type="number" pos:start="89:33" pos:end="89:42">0x3001c000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:58"><expr pos:start="91:5" pos:end="91:57"><name pos:start="91:5" pos:end="91:16">etraxfs_dmac</name> <operator pos:start="91:18" pos:end="91:18">=</operator> <call pos:start="91:20" pos:end="91:57"><name pos:start="91:20" pos:end="91:36">etraxfs_dmac_init</name><argument_list pos:start="91:37" pos:end="91:57">(<argument pos:start="91:38" pos:end="91:40"><expr pos:start="91:38" pos:end="91:40"><name pos:start="91:38" pos:end="91:40">env</name></expr></argument>, <argument pos:start="91:43" pos:end="91:52"><expr pos:start="91:43" pos:end="91:52"><literal type="number" pos:start="91:43" pos:end="91:52">0x30000000</literal></expr></argument>, <argument pos:start="91:55" pos:end="91:56"><expr pos:start="91:55" pos:end="91:56"><literal type="number" pos:start="91:55" pos:end="91:56">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="93:5" pos:end="99:5">for <control pos:start="93:9" pos:end="93:28">(<init pos:start="93:10" pos:end="93:15"><expr pos:start="93:10" pos:end="93:14"><name pos:start="93:10" pos:end="93:10">i</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <literal type="number" pos:start="93:14" pos:end="93:14">0</literal></expr>;</init> <condition pos:start="93:17" pos:end="93:23"><expr pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:17">i</name> <operator pos:start="93:19" pos:end="93:19">&lt;</operator> <literal type="number" pos:start="93:21" pos:end="93:22">10</literal></expr>;</condition> <incr pos:start="93:25" pos:end="93:27"><expr pos:start="93:25" pos:end="93:27"><name pos:start="93:25" pos:end="93:25">i</name><operator pos:start="93:26" pos:end="93:27">++</operator></expr></incr>)</control> <block pos:start="93:30" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:71">

        <comment type="block" pos:start="95:9" pos:end="95:58">/* On ETRAX, odd numbered channels are inputs.  */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:71"><expr pos:start="97:9" pos:end="97:70"><call pos:start="97:9" pos:end="97:70"><name pos:start="97:9" pos:end="97:28">etraxfs_dmac_connect</name><argument_list pos:start="97:29" pos:end="97:70">(<argument pos:start="97:30" pos:end="97:41"><expr pos:start="97:30" pos:end="97:41"><name pos:start="97:30" pos:end="97:41">etraxfs_dmac</name></expr></argument>, <argument pos:start="97:44" pos:end="97:44"><expr pos:start="97:44" pos:end="97:44"><name pos:start="97:44" pos:end="97:44">i</name></expr></argument>, <argument pos:start="97:47" pos:end="97:62"><expr pos:start="97:47" pos:end="97:62"><name pos:start="97:47" pos:end="97:54"><name pos:start="97:47" pos:end="97:49">pic</name><operator pos:start="97:50" pos:end="97:51">-&gt;</operator><name pos:start="97:52" pos:end="97:54">irq</name></name> <operator pos:start="97:56" pos:end="97:56">+</operator> <literal type="number" pos:start="97:58" pos:end="97:60">7</literal> <operator pos:start="97:60" pos:end="97:60">+</operator> <name pos:start="97:62" pos:end="97:62">i</name></expr></argument>, <argument pos:start="97:65" pos:end="97:69"><expr pos:start="97:65" pos:end="97:69"><name pos:start="97:65" pos:end="97:65">i</name> <operator pos:start="97:67" pos:end="97:67">&amp;</operator> <literal type="number" pos:start="97:69" pos:end="97:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="103:5" pos:end="103:39">/* Add the two ethernet blocks.  */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:76"><expr pos:start="105:5" pos:end="105:75"><name pos:start="105:5" pos:end="105:10"><name pos:start="105:5" pos:end="105:7">eth</name><index pos:start="105:8" pos:end="105:10">[<expr pos:start="105:9" pos:end="105:9"><literal type="number" pos:start="105:9" pos:end="105:9">0</literal></expr>]</index></name> <operator pos:start="105:12" pos:end="105:12">=</operator> <call pos:start="105:14" pos:end="105:75"><name pos:start="105:14" pos:end="105:29">etraxfs_eth_init</name><argument_list pos:start="105:30" pos:end="105:75">(<argument pos:start="105:31" pos:end="105:42"><expr pos:start="105:31" pos:end="105:42"><operator pos:start="105:31" pos:end="105:31">&amp;</operator><name pos:start="105:32" pos:end="105:42"><name pos:start="105:32" pos:end="105:39">nd_table</name><index pos:start="105:40" pos:end="105:42">[<expr pos:start="105:41" pos:end="105:41"><literal type="number" pos:start="105:41" pos:end="105:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="105:45" pos:end="105:47"><expr pos:start="105:45" pos:end="105:47"><name pos:start="105:45" pos:end="105:47">env</name></expr></argument>, <argument pos:start="105:50" pos:end="105:62"><expr pos:start="105:50" pos:end="105:62"><name pos:start="105:50" pos:end="105:57"><name pos:start="105:50" pos:end="105:52">pic</name><operator pos:start="105:53" pos:end="105:54">-&gt;</operator><name pos:start="105:55" pos:end="105:57">irq</name></name> <operator pos:start="105:59" pos:end="105:59">+</operator> <literal type="number" pos:start="105:61" pos:end="105:62">25</literal></expr></argument>, <argument pos:start="105:65" pos:end="105:74"><expr pos:start="105:65" pos:end="105:74"><literal type="number" pos:start="105:65" pos:end="105:74">0x30034000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="109:80"><if pos:start="107:5" pos:end="109:80">if <condition pos:start="107:8" pos:end="107:20">(<expr pos:start="107:9" pos:end="107:19"><name pos:start="107:9" pos:end="107:15">nb_nics</name> <operator pos:start="107:17" pos:end="107:17">&gt;</operator> <literal type="number" pos:start="107:19" pos:end="107:19">1</literal></expr>)</condition><block type="pseudo" pos:start="109:9" pos:end="109:80"><block_content pos:start="109:9" pos:end="109:80">

        <expr_stmt pos:start="109:9" pos:end="109:80"><expr pos:start="109:9" pos:end="109:79"><name pos:start="109:9" pos:end="109:14"><name pos:start="109:9" pos:end="109:11">eth</name><index pos:start="109:12" pos:end="109:14">[<expr pos:start="109:13" pos:end="109:13"><literal type="number" pos:start="109:13" pos:end="109:13">1</literal></expr>]</index></name> <operator pos:start="109:16" pos:end="109:16">=</operator> <call pos:start="109:18" pos:end="109:79"><name pos:start="109:18" pos:end="109:33">etraxfs_eth_init</name><argument_list pos:start="109:34" pos:end="109:79">(<argument pos:start="109:35" pos:end="109:46"><expr pos:start="109:35" pos:end="109:46"><operator pos:start="109:35" pos:end="109:35">&amp;</operator><name pos:start="109:36" pos:end="109:46"><name pos:start="109:36" pos:end="109:43">nd_table</name><index pos:start="109:44" pos:end="109:46">[<expr pos:start="109:45" pos:end="109:45"><literal type="number" pos:start="109:45" pos:end="109:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:49" pos:end="109:51"><expr pos:start="109:49" pos:end="109:51"><name pos:start="109:49" pos:end="109:51">env</name></expr></argument>, <argument pos:start="109:54" pos:end="109:66"><expr pos:start="109:54" pos:end="109:66"><name pos:start="109:54" pos:end="109:61"><name pos:start="109:54" pos:end="109:56">pic</name><operator pos:start="109:57" pos:end="109:58">-&gt;</operator><name pos:start="109:59" pos:end="109:61">irq</name></name> <operator pos:start="109:63" pos:end="109:63">+</operator> <literal type="number" pos:start="109:65" pos:end="109:66">26</literal></expr></argument>, <argument pos:start="109:69" pos:end="109:78"><expr pos:start="109:69" pos:end="109:78"><literal type="number" pos:start="109:69" pos:end="109:78">0x30036000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:71">/* The DMA Connector block is missing, hardwire things for now.  */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:57"><expr pos:start="115:5" pos:end="115:56"><call pos:start="115:5" pos:end="115:56"><name pos:start="115:5" pos:end="115:31">etraxfs_dmac_connect_client</name><argument_list pos:start="115:32" pos:end="115:56">(<argument pos:start="115:33" pos:end="115:44"><expr pos:start="115:33" pos:end="115:44"><name pos:start="115:33" pos:end="115:44">etraxfs_dmac</name></expr></argument>, <argument pos:start="115:47" pos:end="115:47"><expr pos:start="115:47" pos:end="115:47"><literal type="number" pos:start="115:47" pos:end="115:47">0</literal></expr></argument>, <argument pos:start="115:50" pos:end="115:55"><expr pos:start="115:50" pos:end="115:55"><name pos:start="115:50" pos:end="115:55"><name pos:start="115:50" pos:end="115:52">eth</name><index pos:start="115:53" pos:end="115:55">[<expr pos:start="115:54" pos:end="115:54"><literal type="number" pos:start="115:54" pos:end="115:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:61"><expr pos:start="117:5" pos:end="117:60"><call pos:start="117:5" pos:end="117:60"><name pos:start="117:5" pos:end="117:31">etraxfs_dmac_connect_client</name><argument_list pos:start="117:32" pos:end="117:60">(<argument pos:start="117:33" pos:end="117:44"><expr pos:start="117:33" pos:end="117:44"><name pos:start="117:33" pos:end="117:44">etraxfs_dmac</name></expr></argument>, <argument pos:start="117:47" pos:end="117:47"><expr pos:start="117:47" pos:end="117:47"><literal type="number" pos:start="117:47" pos:end="117:47">1</literal></expr></argument>, <argument pos:start="117:50" pos:end="117:59"><expr pos:start="117:50" pos:end="117:59"><name pos:start="117:50" pos:end="117:55"><name pos:start="117:50" pos:end="117:52">eth</name><index pos:start="117:53" pos:end="117:55">[<expr pos:start="117:54" pos:end="117:54"><literal type="number" pos:start="117:54" pos:end="117:54">0</literal></expr>]</index></name> <operator pos:start="117:57" pos:end="117:57">+</operator> <literal type="number" pos:start="117:59" pos:end="117:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:15">(<expr pos:start="119:9" pos:end="119:14"><name pos:start="119:9" pos:end="119:14"><name pos:start="119:9" pos:end="119:11">eth</name><index pos:start="119:12" pos:end="119:14">[<expr pos:start="119:13" pos:end="119:13"><literal type="number" pos:start="119:13" pos:end="119:13">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="119:17" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:65">

        <expr_stmt pos:start="121:9" pos:end="121:61"><expr pos:start="121:9" pos:end="121:60"><call pos:start="121:9" pos:end="121:60"><name pos:start="121:9" pos:end="121:35">etraxfs_dmac_connect_client</name><argument_list pos:start="121:36" pos:end="121:60">(<argument pos:start="121:37" pos:end="121:48"><expr pos:start="121:37" pos:end="121:48"><name pos:start="121:37" pos:end="121:48">etraxfs_dmac</name></expr></argument>, <argument pos:start="121:51" pos:end="121:51"><expr pos:start="121:51" pos:end="121:51"><literal type="number" pos:start="121:51" pos:end="121:51">6</literal></expr></argument>, <argument pos:start="121:54" pos:end="121:59"><expr pos:start="121:54" pos:end="121:59"><name pos:start="121:54" pos:end="121:59"><name pos:start="121:54" pos:end="121:56">eth</name><index pos:start="121:57" pos:end="121:59">[<expr pos:start="121:58" pos:end="121:58"><literal type="number" pos:start="121:58" pos:end="121:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:65"><expr pos:start="123:9" pos:end="123:64"><call pos:start="123:9" pos:end="123:64"><name pos:start="123:9" pos:end="123:35">etraxfs_dmac_connect_client</name><argument_list pos:start="123:36" pos:end="123:64">(<argument pos:start="123:37" pos:end="123:48"><expr pos:start="123:37" pos:end="123:48"><name pos:start="123:37" pos:end="123:48">etraxfs_dmac</name></expr></argument>, <argument pos:start="123:51" pos:end="123:51"><expr pos:start="123:51" pos:end="123:51"><literal type="number" pos:start="123:51" pos:end="123:51">7</literal></expr></argument>, <argument pos:start="123:54" pos:end="123:63"><expr pos:start="123:54" pos:end="123:63"><name pos:start="123:54" pos:end="123:59"><name pos:start="123:54" pos:end="123:56">eth</name><index pos:start="123:57" pos:end="123:59">[<expr pos:start="123:58" pos:end="123:58"><literal type="number" pos:start="123:58" pos:end="123:58">1</literal></expr>]</index></name> <operator pos:start="123:61" pos:end="123:61">+</operator> <literal type="number" pos:start="123:63" pos:end="123:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:20">/* 2 timers.  */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:71"><expr pos:start="131:5" pos:end="131:70"><call pos:start="131:5" pos:end="131:70"><name pos:start="131:5" pos:end="131:22">etraxfs_timer_init</name><argument_list pos:start="131:23" pos:end="131:70">(<argument pos:start="131:24" pos:end="131:26"><expr pos:start="131:24" pos:end="131:26"><name pos:start="131:24" pos:end="131:26">env</name></expr></argument>, <argument pos:start="131:29" pos:end="131:43"><expr pos:start="131:29" pos:end="131:43"><name pos:start="131:29" pos:end="131:36"><name pos:start="131:29" pos:end="131:31">pic</name><operator pos:start="131:32" pos:end="131:33">-&gt;</operator><name pos:start="131:34" pos:end="131:36">irq</name></name> <operator pos:start="131:38" pos:end="131:38">+</operator> <literal type="number" pos:start="131:40" pos:end="131:43">0x1b</literal></expr></argument>, <argument pos:start="131:46" pos:end="131:57"><expr pos:start="131:46" pos:end="131:57"><name pos:start="131:46" pos:end="131:53"><name pos:start="131:46" pos:end="131:48">pic</name><operator pos:start="131:49" pos:end="131:50">-&gt;</operator><name pos:start="131:51" pos:end="131:53">nmi</name></name> <operator pos:start="131:55" pos:end="131:55">+</operator> <literal type="number" pos:start="131:57" pos:end="131:57">1</literal></expr></argument>, <argument pos:start="131:60" pos:end="131:69"><expr pos:start="131:60" pos:end="131:69"><literal type="number" pos:start="131:60" pos:end="131:69">0x3001e000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:71"><expr pos:start="133:5" pos:end="133:70"><call pos:start="133:5" pos:end="133:70"><name pos:start="133:5" pos:end="133:22">etraxfs_timer_init</name><argument_list pos:start="133:23" pos:end="133:70">(<argument pos:start="133:24" pos:end="133:26"><expr pos:start="133:24" pos:end="133:26"><name pos:start="133:24" pos:end="133:26">env</name></expr></argument>, <argument pos:start="133:29" pos:end="133:43"><expr pos:start="133:29" pos:end="133:43"><name pos:start="133:29" pos:end="133:36"><name pos:start="133:29" pos:end="133:31">pic</name><operator pos:start="133:32" pos:end="133:33">-&gt;</operator><name pos:start="133:34" pos:end="133:36">irq</name></name> <operator pos:start="133:38" pos:end="133:38">+</operator> <literal type="number" pos:start="133:40" pos:end="133:43">0x1b</literal></expr></argument>, <argument pos:start="133:46" pos:end="133:57"><expr pos:start="133:46" pos:end="133:57"><name pos:start="133:46" pos:end="133:53"><name pos:start="133:46" pos:end="133:48">pic</name><operator pos:start="133:49" pos:end="133:50">-&gt;</operator><name pos:start="133:51" pos:end="133:53">nmi</name></name> <operator pos:start="133:55" pos:end="133:55">+</operator> <literal type="number" pos:start="133:57" pos:end="133:57">1</literal></expr></argument>, <argument pos:start="133:60" pos:end="133:69"><expr pos:start="133:60" pos:end="133:69"><literal type="number" pos:start="133:60" pos:end="133:69">0x3005e000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="137:5" pos:end="147:5">for <control pos:start="137:9" pos:end="137:27">(<init pos:start="137:10" pos:end="137:15"><expr pos:start="137:10" pos:end="137:14"><name pos:start="137:10" pos:end="137:10">i</name> <operator pos:start="137:12" pos:end="137:12">=</operator> <literal type="number" pos:start="137:14" pos:end="137:14">0</literal></expr>;</init> <condition pos:start="137:17" pos:end="137:22"><expr pos:start="137:17" pos:end="137:21"><name pos:start="137:17" pos:end="137:17">i</name> <operator pos:start="137:19" pos:end="137:19">&lt;</operator> <literal type="number" pos:start="137:21" pos:end="137:21">4</literal></expr>;</condition> <incr pos:start="137:24" pos:end="137:26"><expr pos:start="137:24" pos:end="137:26"><name pos:start="137:24" pos:end="137:24">i</name><operator pos:start="137:25" pos:end="137:26">++</operator></expr></incr>)</control> <block pos:start="137:29" pos:end="147:5">{<block_content pos:start="139:9" pos:end="145:9">

        <if_stmt pos:start="139:9" pos:end="145:9"><if pos:start="139:9" pos:end="145:9">if <condition pos:start="139:12" pos:end="139:26">(<expr pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:25"><name pos:start="139:13" pos:end="139:22">serial_hds</name><index pos:start="139:23" pos:end="139:25">[<expr pos:start="139:24" pos:end="139:24"><name pos:start="139:24" pos:end="139:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="139:28" pos:end="145:9">{<block_content pos:start="141:13" pos:end="143:69">

            <expr_stmt pos:start="141:13" pos:end="143:69"><expr pos:start="141:13" pos:end="143:68"><call pos:start="141:13" pos:end="143:68"><name pos:start="141:13" pos:end="141:28">etraxfs_ser_init</name><argument_list pos:start="141:29" pos:end="143:68">(<argument pos:start="141:30" pos:end="141:32"><expr pos:start="141:30" pos:end="141:32"><name pos:start="141:30" pos:end="141:32">env</name></expr></argument>, <argument pos:start="141:35" pos:end="141:53"><expr pos:start="141:35" pos:end="141:53"><name pos:start="141:35" pos:end="141:42"><name pos:start="141:35" pos:end="141:37">pic</name><operator pos:start="141:38" pos:end="141:39">-&gt;</operator><name pos:start="141:40" pos:end="141:42">irq</name></name> <operator pos:start="141:44" pos:end="141:44">+</operator> <literal type="number" pos:start="141:46" pos:end="141:51">0x14</literal> <operator pos:start="141:51" pos:end="141:51">+</operator> <name pos:start="141:53" pos:end="141:53">i</name></expr></argument>,

                             <argument pos:start="143:30" pos:end="143:42"><expr pos:start="143:30" pos:end="143:42"><name pos:start="143:30" pos:end="143:42"><name pos:start="143:30" pos:end="143:39">serial_hds</name><index pos:start="143:40" pos:end="143:42">[<expr pos:start="143:41" pos:end="143:41"><name pos:start="143:41" pos:end="143:41">i</name></expr>]</index></name></expr></argument>, <argument pos:start="143:45" pos:end="143:67"><expr pos:start="143:45" pos:end="143:67"><literal type="number" pos:start="143:45" pos:end="143:56">0x30026000</literal> <operator pos:start="143:56" pos:end="143:56">+</operator> <name pos:start="143:58" pos:end="143:58">i</name> <operator pos:start="143:60" pos:end="143:60">*</operator> <literal type="number" pos:start="143:62" pos:end="143:67">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="151:5" pos:end="205:5"><if pos:start="151:5" pos:end="205:5">if <condition pos:start="151:8" pos:end="151:24">(<expr pos:start="151:9" pos:end="151:23"><name pos:start="151:9" pos:end="151:23">kernel_filename</name></expr>)</condition> <block pos:start="151:26" pos:end="205:5">{<block_content pos:start="153:9" pos:end="203:9">

        <decl_stmt pos:start="153:9" pos:end="153:29"><decl pos:start="153:9" pos:end="153:22"><type pos:start="153:9" pos:end="153:16"><name pos:start="153:9" pos:end="153:16">uint64_t</name></type> <name pos:start="153:18" pos:end="153:22">entry</name></decl>, <decl pos:start="153:25" pos:end="153:28"><type ref="prev" pos:start="153:9" pos:end="153:16"/><name pos:start="153:25" pos:end="153:28">high</name></decl>;</decl_stmt>

        <decl_stmt pos:start="155:9" pos:end="155:25"><decl pos:start="155:9" pos:end="155:24"><type pos:start="155:9" pos:end="155:11"><name pos:start="155:9" pos:end="155:11">int</name></type> <name pos:start="155:13" pos:end="155:24">kcmdline_len</name></decl>;</decl_stmt>



        <comment type="block" pos:start="159:9" pos:end="161:28">/* Boots a kernel elf binary, os/linux-2.6/vmlinux from the axis 

           devboard SDK.  */</comment>

        <expr_stmt pos:start="163:9" pos:end="165:52"><expr pos:start="163:9" pos:end="165:51"><name pos:start="163:9" pos:end="163:19">kernel_size</name> <operator pos:start="163:21" pos:end="163:21">=</operator> <call pos:start="163:23" pos:end="165:51"><name pos:start="163:23" pos:end="163:30">load_elf</name><argument_list pos:start="163:31" pos:end="165:51">(<argument pos:start="163:32" pos:end="163:46"><expr pos:start="163:32" pos:end="163:46"><name pos:start="163:32" pos:end="163:46">kernel_filename</name></expr></argument>, <argument pos:start="163:49" pos:end="163:61"><expr pos:start="163:49" pos:end="163:61"><operator pos:start="163:49" pos:end="163:49">-</operator><literal type="number" pos:start="163:50" pos:end="163:61">0x80000000LL</literal></expr></argument>,

                               <argument pos:start="165:32" pos:end="165:37"><expr pos:start="165:32" pos:end="165:37"><operator pos:start="165:32" pos:end="165:32">&amp;</operator><name pos:start="165:33" pos:end="165:37">entry</name></expr></argument>, <argument pos:start="165:40" pos:end="165:43"><expr pos:start="165:40" pos:end="165:43"><name pos:start="165:40" pos:end="165:43">NULL</name></expr></argument>, <argument pos:start="165:46" pos:end="165:50"><expr pos:start="165:46" pos:end="165:50"><operator pos:start="165:46" pos:end="165:46">&amp;</operator><name pos:start="165:47" pos:end="165:50">high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:29"><expr pos:start="167:9" pos:end="167:28"><name pos:start="167:9" pos:end="167:20">bootstrap_pc</name> <operator pos:start="167:22" pos:end="167:22">=</operator> <name pos:start="167:24" pos:end="167:28">entry</name></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="179:9"><if pos:start="169:9" pos:end="179:9">if <condition pos:start="169:12" pos:end="169:28">(<expr pos:start="169:13" pos:end="169:27"><name pos:start="169:13" pos:end="169:23">kernel_size</name> <operator pos:start="169:25" pos:end="169:25">&lt;</operator> <literal type="number" pos:start="169:27" pos:end="169:27">0</literal></expr>)</condition> <block pos:start="169:30" pos:end="179:9">{<block_content pos:start="173:13" pos:end="177:52">

            <comment type="block" pos:start="171:13" pos:end="171:61">/* Takes a kimage from the axis devboard SDK.  */</comment>

            <expr_stmt pos:start="173:13" pos:end="173:78"><expr pos:start="173:13" pos:end="173:77"><name pos:start="173:13" pos:end="173:23">kernel_size</name> <operator pos:start="173:25" pos:end="173:25">=</operator> <call pos:start="173:27" pos:end="173:77"><name pos:start="173:27" pos:end="173:36">load_image</name><argument_list pos:start="173:37" pos:end="173:77">(<argument pos:start="173:38" pos:end="173:52"><expr pos:start="173:38" pos:end="173:52"><name pos:start="173:38" pos:end="173:52">kernel_filename</name></expr></argument>, <argument pos:start="173:55" pos:end="173:76"><expr pos:start="173:55" pos:end="173:76"><name pos:start="173:55" pos:end="173:67">phys_ram_base</name> <operator pos:start="173:69" pos:end="173:69">+</operator> <literal type="number" pos:start="173:71" pos:end="173:76">0x4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:38"><expr pos:start="175:13" pos:end="175:37"><name pos:start="175:13" pos:end="175:24">bootstrap_pc</name> <operator pos:start="175:26" pos:end="175:26">=</operator> <literal type="number" pos:start="175:28" pos:end="175:37">0x40004000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:52"><expr pos:start="177:13" pos:end="177:51"><name pos:start="177:13" pos:end="177:24"><name pos:start="177:13" pos:end="177:15">env</name><operator pos:start="177:16" pos:end="177:17">-&gt;</operator><name pos:start="177:18" pos:end="177:21">regs</name><index pos:start="177:22" pos:end="177:24">[<expr pos:start="177:23" pos:end="177:23"><literal type="number" pos:start="177:23" pos:end="177:23">9</literal></expr>]</index></name> <operator pos:start="177:26" pos:end="177:26">=</operator> <literal type="number" pos:start="177:28" pos:end="177:39">0x40004000</literal> <operator pos:start="177:39" pos:end="177:39">+</operator> <name pos:start="177:41" pos:end="177:51">kernel_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:34"><expr pos:start="181:9" pos:end="181:33"><name pos:start="181:9" pos:end="181:20"><name pos:start="181:9" pos:end="181:11">env</name><operator pos:start="181:12" pos:end="181:13">-&gt;</operator><name pos:start="181:14" pos:end="181:17">regs</name><index pos:start="181:18" pos:end="181:20">[<expr pos:start="181:19" pos:end="181:19"><literal type="number" pos:start="181:19" pos:end="181:19">8</literal></expr>]</index></name> <operator pos:start="181:22" pos:end="181:22">=</operator> <literal type="number" pos:start="181:24" pos:end="181:33">0x56902387</literal></expr>;</expr_stmt> <comment type="block" pos:start="181:36" pos:end="181:57">/* RAM init magic.  */</comment>



        <if_stmt pos:start="185:9" pos:end="203:9"><if pos:start="185:9" pos:end="203:9">if <condition pos:start="185:12" pos:end="185:70">(<expr pos:start="185:13" pos:end="185:69"><name pos:start="185:13" pos:end="185:26">kernel_cmdline</name> <operator pos:start="185:28" pos:end="185:29">&amp;&amp;</operator> <operator pos:start="185:31" pos:end="185:31">(</operator><name pos:start="185:32" pos:end="185:43">kcmdline_len</name> <operator pos:start="185:45" pos:end="185:45">=</operator> <call pos:start="185:47" pos:end="185:68"><name pos:start="185:47" pos:end="185:52">strlen</name><argument_list pos:start="185:53" pos:end="185:68">(<argument pos:start="185:54" pos:end="185:67"><expr pos:start="185:54" pos:end="185:67"><name pos:start="185:54" pos:end="185:67">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="185:69" pos:end="185:69">)</operator></expr>)</condition> <block pos:start="185:72" pos:end="203:9">{<block_content pos:start="187:13" pos:end="201:33">

            <if_stmt pos:start="187:13" pos:end="193:13"><if pos:start="187:13" pos:end="193:13">if <condition pos:start="187:16" pos:end="187:35">(<expr pos:start="187:17" pos:end="187:34"><name pos:start="187:17" pos:end="187:28">kcmdline_len</name> <operator pos:start="187:30" pos:end="187:30">&gt;</operator> <literal type="number" pos:start="187:32" pos:end="187:34">256</literal></expr>)</condition> <block pos:start="187:37" pos:end="193:13">{<block_content pos:start="189:17" pos:end="191:24">

                <expr_stmt pos:start="189:17" pos:end="189:76"><expr pos:start="189:17" pos:end="189:75"><call pos:start="189:17" pos:end="189:75"><name pos:start="189:17" pos:end="189:23">fprintf</name><argument_list pos:start="189:24" pos:end="189:75">(<argument pos:start="189:25" pos:end="189:30"><expr pos:start="189:25" pos:end="189:30"><name pos:start="189:25" pos:end="189:30">stderr</name></expr></argument>, <argument pos:start="189:33" pos:end="189:74"><expr pos:start="189:33" pos:end="189:74"><literal type="string" pos:start="189:33" pos:end="189:74">"Too long CRIS kernel cmdline (max 256)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="191:17" pos:end="191:24"><expr pos:start="191:17" pos:end="191:23"><call pos:start="191:17" pos:end="191:23"><name pos:start="191:17" pos:end="191:20">exit</name><argument_list pos:start="191:21" pos:end="191:23">(<argument pos:start="191:22" pos:end="191:22"><expr pos:start="191:22" pos:end="191:22"><literal type="number" pos:start="191:22" pos:end="191:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:56"><expr pos:start="195:13" pos:end="195:55"><call pos:start="195:13" pos:end="195:55"><name pos:start="195:13" pos:end="195:28">pstrcpy_targphys</name><argument_list pos:start="195:29" pos:end="195:55">(<argument pos:start="195:30" pos:end="195:33"><expr pos:start="195:30" pos:end="195:33"><name pos:start="195:30" pos:end="195:33">high</name></expr></argument>, <argument pos:start="195:36" pos:end="195:38"><expr pos:start="195:36" pos:end="195:38"><literal type="number" pos:start="195:36" pos:end="195:38">256</literal></expr></argument>, <argument pos:start="195:41" pos:end="195:54"><expr pos:start="195:41" pos:end="195:54"><name pos:start="195:41" pos:end="195:54">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="197:13" pos:end="197:68">/* Let the kernel know we are modifying the cmdline.  */</comment>

            <expr_stmt pos:start="199:13" pos:end="199:39"><expr pos:start="199:13" pos:end="199:38"><name pos:start="199:13" pos:end="199:25"><name pos:start="199:13" pos:end="199:15">env</name><operator pos:start="199:16" pos:end="199:17">-&gt;</operator><name pos:start="199:18" pos:end="199:21">regs</name><index pos:start="199:22" pos:end="199:25">[<expr pos:start="199:23" pos:end="199:24"><literal type="number" pos:start="199:23" pos:end="199:24">10</literal></expr>]</index></name> <operator pos:start="199:27" pos:end="199:27">=</operator> <literal type="number" pos:start="199:29" pos:end="199:38">0x87109563</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:33"><expr pos:start="201:13" pos:end="201:32"><name pos:start="201:13" pos:end="201:25"><name pos:start="201:13" pos:end="201:15">env</name><operator pos:start="201:16" pos:end="201:17">-&gt;</operator><name pos:start="201:18" pos:end="201:21">regs</name><index pos:start="201:22" pos:end="201:25">[<expr pos:start="201:23" pos:end="201:24"><literal type="number" pos:start="201:23" pos:end="201:24">11</literal></expr>]</index></name> <operator pos:start="201:27" pos:end="201:27">=</operator> <name pos:start="201:29" pos:end="201:32">high</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:27"><expr pos:start="207:5" pos:end="207:26"><name pos:start="207:5" pos:end="207:11"><name pos:start="207:5" pos:end="207:7">env</name><operator pos:start="207:8" pos:end="207:9">-&gt;</operator><name pos:start="207:10" pos:end="207:11">pc</name></name> <operator pos:start="207:13" pos:end="207:13">=</operator> <name pos:start="207:15" pos:end="207:26">bootstrap_pc</name></expr>;</expr_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:33"><expr pos:start="211:5" pos:end="211:32"><call pos:start="211:5" pos:end="211:32"><name pos:start="211:5" pos:end="211:10">printf</name> <argument_list pos:start="211:12" pos:end="211:32">(<argument pos:start="211:13" pos:end="211:22"><expr pos:start="211:13" pos:end="211:22"><literal type="string" pos:start="211:13" pos:end="211:22">"pc =%x\n"</literal></expr></argument>, <argument pos:start="211:25" pos:end="211:31"><expr pos:start="211:25" pos:end="211:31"><name pos:start="211:25" pos:end="211:31"><name pos:start="211:25" pos:end="211:27">env</name><operator pos:start="211:28" pos:end="211:29">-&gt;</operator><name pos:start="211:30" pos:end="211:31">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:41"><expr pos:start="213:5" pos:end="213:40"><call pos:start="213:5" pos:end="213:40"><name pos:start="213:5" pos:end="213:10">printf</name> <argument_list pos:start="213:12" pos:end="213:40">(<argument pos:start="213:13" pos:end="213:29"><expr pos:start="213:13" pos:end="213:29"><literal type="string" pos:start="213:13" pos:end="213:29">"ram size =%ld\n"</literal></expr></argument>, <argument pos:start="213:32" pos:end="213:39"><expr pos:start="213:32" pos:end="213:39"><name pos:start="213:32" pos:end="213:39">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
