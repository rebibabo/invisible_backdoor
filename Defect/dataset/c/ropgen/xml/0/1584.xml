<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1584.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">gif_image_write_header</name><parameter_list pos:start="1:34" pos:end="5:52">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:41">uint8_t</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier><modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:54">bytestream</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:43"><decl pos:start="3:35" pos:end="3:43"><type pos:start="3:35" pos:end="3:43"><name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:43">width</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:55"><decl pos:start="3:46" pos:end="3:55"><type pos:start="3:46" pos:end="3:55"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:55">height</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:71"><decl pos:start="3:58" pos:end="3:71"><type pos:start="3:58" pos:end="3:71"><name pos:start="3:58" pos:end="3:60">int</name></type> <name pos:start="3:62" pos:end="3:71">loop_count</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:51"><decl pos:start="5:35" pos:end="5:51"><type pos:start="5:35" pos:end="5:51"><name pos:start="5:35" pos:end="5:42">uint32_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:51">palette</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="123:1">{<block_content pos:start="9:5" pos:end="121:13">

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">v</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:48"><expr pos:start="15:5" pos:end="15:47"><call pos:start="15:5" pos:end="15:47"><name pos:start="15:5" pos:end="15:25">bytestream_put_buffer</name><argument_list pos:start="15:26" pos:end="15:47">(<argument pos:start="15:27" pos:end="15:36"><expr pos:start="15:27" pos:end="15:36"><name pos:start="15:27" pos:end="15:36">bytestream</name></expr></argument>, <argument pos:start="15:39" pos:end="15:43"><expr pos:start="15:39" pos:end="15:43"><literal type="string" pos:start="15:39" pos:end="15:43">"GIF"</literal></expr></argument>, <argument pos:start="15:46" pos:end="15:46"><expr pos:start="15:46" pos:end="15:46"><literal type="number" pos:start="15:46" pos:end="15:46">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:48"><expr pos:start="17:5" pos:end="17:47"><call pos:start="17:5" pos:end="17:47"><name pos:start="17:5" pos:end="17:25">bytestream_put_buffer</name><argument_list pos:start="17:26" pos:end="17:47">(<argument pos:start="17:27" pos:end="17:36"><expr pos:start="17:27" pos:end="17:36"><name pos:start="17:27" pos:end="17:36">bytestream</name></expr></argument>, <argument pos:start="17:39" pos:end="17:43"><expr pos:start="17:39" pos:end="17:43"><literal type="string" pos:start="17:39" pos:end="17:43">"89a"</literal></expr></argument>, <argument pos:start="17:46" pos:end="17:46"><expr pos:start="17:46" pos:end="17:46"><literal type="number" pos:start="17:46" pos:end="17:46">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:43"><expr pos:start="19:5" pos:end="19:42"><call pos:start="19:5" pos:end="19:42"><name pos:start="19:5" pos:end="19:23">bytestream_put_le16</name><argument_list pos:start="19:24" pos:end="19:42">(<argument pos:start="19:25" pos:end="19:34"><expr pos:start="19:25" pos:end="19:34"><name pos:start="19:25" pos:end="19:34">bytestream</name></expr></argument>, <argument pos:start="19:37" pos:end="19:41"><expr pos:start="19:37" pos:end="19:41"><name pos:start="19:37" pos:end="19:41">width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><call pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:23">bytestream_put_le16</name><argument_list pos:start="21:24" pos:end="21:43">(<argument pos:start="21:25" pos:end="21:34"><expr pos:start="21:25" pos:end="21:34"><name pos:start="21:25" pos:end="21:34">bytestream</name></expr></argument>, <argument pos:start="21:37" pos:end="21:42"><expr pos:start="21:37" pos:end="21:42"><name pos:start="21:37" pos:end="21:42">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:42"><expr pos:start="25:5" pos:end="25:41"><call pos:start="25:5" pos:end="25:41"><name pos:start="25:5" pos:end="25:23">bytestream_put_byte</name><argument_list pos:start="25:24" pos:end="25:41">(<argument pos:start="25:25" pos:end="25:34"><expr pos:start="25:25" pos:end="25:34"><name pos:start="25:25" pos:end="25:34">bytestream</name></expr></argument>, <argument pos:start="25:37" pos:end="25:40"><expr pos:start="25:37" pos:end="25:40"><literal type="number" pos:start="25:37" pos:end="25:40">0xf7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="25:44" pos:end="25:80">/* flags: global clut, 256 entries */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:42"><expr pos:start="27:5" pos:end="27:41"><call pos:start="27:5" pos:end="27:41"><name pos:start="27:5" pos:end="27:23">bytestream_put_byte</name><argument_list pos:start="27:24" pos:end="27:41">(<argument pos:start="27:25" pos:end="27:34"><expr pos:start="27:25" pos:end="27:34"><name pos:start="27:25" pos:end="27:34">bytestream</name></expr></argument>, <argument pos:start="27:37" pos:end="27:40"><expr pos:start="27:37" pos:end="27:40"><literal type="number" pos:start="27:37" pos:end="27:40">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="27:44" pos:end="27:71">/* background color index */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:39"><expr pos:start="29:5" pos:end="29:38"><call pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:23">bytestream_put_byte</name><argument_list pos:start="29:24" pos:end="29:38">(<argument pos:start="29:25" pos:end="29:34"><expr pos:start="29:25" pos:end="29:34"><name pos:start="29:25" pos:end="29:34">bytestream</name></expr></argument>, <argument pos:start="29:37" pos:end="29:37"><expr pos:start="29:37" pos:end="29:37"><literal type="number" pos:start="29:37" pos:end="29:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="29:41" pos:end="29:58">/* aspect ratio */</comment>



    <comment type="block" pos:start="33:5" pos:end="33:28">/* the global palette */</comment>

    <if_stmt pos:start="35:5" pos:end="98:0"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:17">(<expr pos:start="35:9" pos:end="35:16"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:16">palette</name></expr>)</condition> <block pos:start="35:19" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:47">

        <expr_stmt pos:start="37:9" pos:end="37:82"><expr pos:start="37:9" pos:end="37:81"><call pos:start="37:9" pos:end="37:81"><name pos:start="37:9" pos:end="37:29">bytestream_put_buffer</name><argument_list pos:start="37:30" pos:end="37:81">(<argument pos:start="37:31" pos:end="37:40"><expr pos:start="37:31" pos:end="37:40"><name pos:start="37:31" pos:end="37:40">bytestream</name></expr></argument>, <argument pos:start="37:43" pos:end="37:73"><expr pos:start="37:43" pos:end="37:73"><operator pos:start="37:43" pos:end="37:43">(</operator><specifier pos:start="37:44" pos:end="37:48">const</specifier> <name pos:start="37:50" pos:end="37:57">unsigned</name> <name pos:start="37:59" pos:end="37:62">char</name> <operator pos:start="37:64" pos:end="37:64">*</operator><operator pos:start="37:65" pos:end="37:65">)</operator><name pos:start="37:66" pos:end="37:73">gif_clut</name></expr></argument>, <argument pos:start="37:76" pos:end="37:80"><expr pos:start="37:76" pos:end="37:80"><literal type="number" pos:start="37:76" pos:end="37:78">216</literal><operator pos:start="37:79" pos:end="37:79">*</operator><literal type="number" pos:start="37:80" pos:end="37:80">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="39:9" pos:end="41:47">for<control pos:start="39:12" pos:end="39:36">(<init pos:start="39:13" pos:end="39:16"><expr pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:13">i</name><operator pos:start="39:14" pos:end="39:14">=</operator><literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>;</init><condition pos:start="39:17" pos:end="39:32"><expr pos:start="39:17" pos:end="39:31"><name pos:start="39:17" pos:end="39:17">i</name><operator pos:start="39:18" pos:end="39:18">&lt;</operator><operator pos:start="39:19" pos:end="39:19">(</operator><operator pos:start="39:20" pos:end="39:20">(</operator><literal type="number" pos:start="39:21" pos:end="39:24">256</literal><operator pos:start="39:24" pos:end="39:24">-</operator><literal type="number" pos:start="39:25" pos:end="39:27">216</literal><operator pos:start="39:28" pos:end="39:28">)</operator><operator pos:start="39:29" pos:end="39:29">*</operator><literal type="number" pos:start="39:30" pos:end="39:30">3</literal><operator pos:start="39:31" pos:end="39:31">)</operator></expr>;</condition><incr pos:start="39:33" pos:end="39:35"><expr pos:start="39:33" pos:end="39:35"><name pos:start="39:33" pos:end="39:33">i</name><operator pos:start="39:34" pos:end="39:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="41:13" pos:end="41:47"><block_content pos:start="41:13" pos:end="41:47">

            <expr_stmt pos:start="41:13" pos:end="41:47"><expr pos:start="41:13" pos:end="41:46"><call pos:start="41:13" pos:end="41:46"><name pos:start="41:13" pos:end="41:31">bytestream_put_byte</name><argument_list pos:start="41:32" pos:end="41:46">(<argument pos:start="41:33" pos:end="41:42"><expr pos:start="41:33" pos:end="41:42"><name pos:start="41:33" pos:end="41:42">bytestream</name></expr></argument>, <argument pos:start="41:45" pos:end="41:45"><expr pos:start="41:45" pos:end="41:45"><literal type="number" pos:start="41:45" pos:end="41:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="98:0">else <block pos:start="43:12" pos:end="98:0">{<block_content pos:start="45:9" pos:end="51:9">

        <for pos:start="45:9" pos:end="51:9">for<control pos:start="45:12" pos:end="45:26">(<init pos:start="45:13" pos:end="45:16"><expr pos:start="45:13" pos:end="45:15"><name pos:start="45:13" pos:end="45:13">i</name><operator pos:start="45:14" pos:end="45:14">=</operator><literal type="number" pos:start="45:15" pos:end="45:15">0</literal></expr>;</init><condition pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:21"><name pos:start="45:17" pos:end="45:17">i</name><operator pos:start="45:18" pos:end="45:18">&lt;</operator><literal type="number" pos:start="45:19" pos:end="45:21">256</literal></expr>;</condition><incr pos:start="45:23" pos:end="45:25"><expr pos:start="45:23" pos:end="45:25"><name pos:start="45:23" pos:end="45:23">i</name><operator pos:start="45:24" pos:end="45:25">++</operator></expr></incr>)</control> <block pos:start="45:28" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:47">

            <expr_stmt pos:start="47:13" pos:end="47:27"><expr pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:13">v</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:26"><name pos:start="47:17" pos:end="47:23">palette</name><index pos:start="47:24" pos:end="47:26">[<expr pos:start="47:25" pos:end="47:25"><name pos:start="47:25" pos:end="47:25">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:47"><expr pos:start="49:13" pos:end="49:46"><call pos:start="49:13" pos:end="49:46"><name pos:start="49:13" pos:end="49:31">bytestream_put_be24</name><argument_list pos:start="49:32" pos:end="49:46">(<argument pos:start="49:33" pos:end="49:42"><expr pos:start="49:33" pos:end="49:42"><name pos:start="49:33" pos:end="49:42">bytestream</name></expr></argument>, <argument pos:start="49:45" pos:end="49:45"><expr pos:start="49:45" pos:end="49:45"><name pos:start="49:45" pos:end="49:45">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="57:9" pos:end="91:10">/*        update: this is the 'NETSCAPE EXTENSION' that allows for looped animated gif

                see http://members.aol.com/royalef/gifabout.htm#net-extension



                byte   1       : 33 (hex 0x21) GIF Extension code

                byte   2       : 255 (hex 0xFF) Application Extension Label

                byte   3       : 11 (hex (0x0B) Length of Application Block

                                         (eleven bytes of data to follow)

                bytes  4 to 11 : "NETSCAPE"

                bytes 12 to 14 : "2.0"

                byte  15       : 3 (hex 0x03) Length of Data Sub-Block

                                         (three bytes of data to follow)

                byte  16       : 1 (hex 0x01)

                bytes 17 to 18 : 0 to 65535, an unsigned integer in

                                         lo-hi byte format. This indicate the

                                         number of iterations the loop should

                                         be executed.

                bytes 19       : 0 (hex 0x00) a Data Sub-block Terminator

        */</comment>



    <comment type="block" pos:start="95:5" pos:end="95:38">/* application extension header */</comment>

<cpp:ifdef pos:start="97:1" pos:end="97:25">#<cpp:directive pos:start="97:2" pos:end="97:6">ifdef</cpp:directive> <name pos:start="97:8" pos:end="97:25">GIF_ADD_APP_HEADER</name></cpp:ifdef>

    <if_stmt pos:start="99:5" pos:end="120:0"><if pos:start="99:5" pos:end="120:0">if <condition pos:start="99:8" pos:end="99:47">(<expr pos:start="99:9" pos:end="99:46"><name pos:start="99:9" pos:end="99:18">loop_count</name> <operator pos:start="99:20" pos:end="99:21">&gt;=</operator> <literal type="number" pos:start="99:23" pos:end="99:23">0</literal> <operator pos:start="99:25" pos:end="99:26">&amp;&amp;</operator> <name pos:start="99:28" pos:end="99:37">loop_count</name> <operator pos:start="99:39" pos:end="99:40">&lt;=</operator> <literal type="number" pos:start="99:42" pos:end="99:46">65535</literal></expr>)</condition> <block pos:start="99:49" pos:end="120:0">{<block_content pos:start="101:9" pos:end="115:46">

        <expr_stmt pos:start="101:9" pos:end="101:46"><expr pos:start="101:9" pos:end="101:45"><call pos:start="101:9" pos:end="101:45"><name pos:start="101:9" pos:end="101:27">bytestream_put_byte</name><argument_list pos:start="101:28" pos:end="101:45">(<argument pos:start="101:29" pos:end="101:38"><expr pos:start="101:29" pos:end="101:38"><name pos:start="101:29" pos:end="101:38">bytestream</name></expr></argument>, <argument pos:start="101:41" pos:end="101:44"><expr pos:start="101:41" pos:end="101:44"><literal type="number" pos:start="101:41" pos:end="101:44">0x21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:46"><expr pos:start="103:9" pos:end="103:45"><call pos:start="103:9" pos:end="103:45"><name pos:start="103:9" pos:end="103:27">bytestream_put_byte</name><argument_list pos:start="103:28" pos:end="103:45">(<argument pos:start="103:29" pos:end="103:38"><expr pos:start="103:29" pos:end="103:38"><name pos:start="103:29" pos:end="103:38">bytestream</name></expr></argument>, <argument pos:start="103:41" pos:end="103:44"><expr pos:start="103:41" pos:end="103:44"><literal type="number" pos:start="103:41" pos:end="103:44">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:46"><expr pos:start="105:9" pos:end="105:45"><call pos:start="105:9" pos:end="105:45"><name pos:start="105:9" pos:end="105:27">bytestream_put_byte</name><argument_list pos:start="105:28" pos:end="105:45">(<argument pos:start="105:29" pos:end="105:38"><expr pos:start="105:29" pos:end="105:38"><name pos:start="105:29" pos:end="105:38">bytestream</name></expr></argument>, <argument pos:start="105:41" pos:end="105:44"><expr pos:start="105:41" pos:end="105:44"><literal type="number" pos:start="105:41" pos:end="105:44">0x0b</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:61"><expr pos:start="107:9" pos:end="107:60"><call pos:start="107:9" pos:end="107:60"><name pos:start="107:9" pos:end="107:29">bytestream_put_buffer</name><argument_list pos:start="107:30" pos:end="107:60">(<argument pos:start="107:31" pos:end="107:40"><expr pos:start="107:31" pos:end="107:40"><name pos:start="107:31" pos:end="107:40">bytestream</name></expr></argument>, <argument pos:start="107:43" pos:end="107:55"><expr pos:start="107:43" pos:end="107:55"><literal type="string" pos:start="107:43" pos:end="107:55">"NETSCAPE2.0"</literal></expr></argument>, <argument pos:start="107:58" pos:end="107:59"><expr pos:start="107:58" pos:end="107:59"><literal type="number" pos:start="107:58" pos:end="107:59">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="107:64" pos:end="107:79">// bytes 4 to 14</comment>

        <expr_stmt pos:start="109:9" pos:end="109:46"><expr pos:start="109:9" pos:end="109:45"><call pos:start="109:9" pos:end="109:45"><name pos:start="109:9" pos:end="109:27">bytestream_put_byte</name><argument_list pos:start="109:28" pos:end="109:45">(<argument pos:start="109:29" pos:end="109:38"><expr pos:start="109:29" pos:end="109:38"><name pos:start="109:29" pos:end="109:38">bytestream</name></expr></argument>, <argument pos:start="109:41" pos:end="109:44"><expr pos:start="109:41" pos:end="109:44"><literal type="number" pos:start="109:41" pos:end="109:44">0x03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="109:48" pos:end="109:57">// byte 15</comment>

        <expr_stmt pos:start="111:9" pos:end="111:46"><expr pos:start="111:9" pos:end="111:45"><call pos:start="111:9" pos:end="111:45"><name pos:start="111:9" pos:end="111:27">bytestream_put_byte</name><argument_list pos:start="111:28" pos:end="111:45">(<argument pos:start="111:29" pos:end="111:38"><expr pos:start="111:29" pos:end="111:38"><name pos:start="111:29" pos:end="111:38">bytestream</name></expr></argument>, <argument pos:start="111:41" pos:end="111:44"><expr pos:start="111:41" pos:end="111:44"><literal type="number" pos:start="111:41" pos:end="111:44">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="111:48" pos:end="111:57">// byte 16</comment>

        <expr_stmt pos:start="113:9" pos:end="113:62"><expr pos:start="113:9" pos:end="113:61"><call pos:start="113:9" pos:end="113:61"><name pos:start="113:9" pos:end="113:27">bytestream_put_le16</name><argument_list pos:start="113:28" pos:end="113:61">(<argument pos:start="113:29" pos:end="113:38"><expr pos:start="113:29" pos:end="113:38"><name pos:start="113:29" pos:end="113:38">bytestream</name></expr></argument>, <argument pos:start="113:41" pos:end="113:60"><expr pos:start="113:41" pos:end="113:60"><operator pos:start="113:41" pos:end="113:41">(</operator><name pos:start="113:42" pos:end="113:49">uint16_t</name><operator pos:start="113:50" pos:end="113:50">)</operator><name pos:start="113:51" pos:end="113:60">loop_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:46"><expr pos:start="115:9" pos:end="115:45"><call pos:start="115:9" pos:end="115:45"><name pos:start="115:9" pos:end="115:27">bytestream_put_byte</name><argument_list pos:start="115:28" pos:end="115:45">(<argument pos:start="115:29" pos:end="115:38"><expr pos:start="115:29" pos:end="115:38"><name pos:start="115:29" pos:end="115:38">bytestream</name></expr></argument>, <argument pos:start="115:41" pos:end="115:44"><expr pos:start="115:41" pos:end="115:44"><literal type="number" pos:start="115:41" pos:end="115:44">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="115:48" pos:end="115:57">// byte 19</comment>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="119:1" pos:end="119:6">#<cpp:directive pos:start="119:2" pos:end="119:6">endif</cpp:directive></cpp:endif>

    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
