<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10488.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:46"><name pos:start="1:1" pos:end="1:30">gen_intermediate_code_internal</name><argument_list pos:start="1:31" pos:end="3:46">(<argument pos:start="1:32" pos:end="1:43">MIPSCPU *cpu</argument>, <argument pos:start="1:46" pos:end="1:65">TranslationBlock *tb</argument>,

                               <argument pos:start="3:32" pos:end="3:45">bool search_pc</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="349:1">{<block_content pos:start="7:5" pos:end="348:0">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:27">= <expr pos:start="7:20" pos:end="7:27"><call pos:start="7:20" pos:end="7:27"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:27">(<argument pos:start="7:24" pos:end="7:26"><expr pos:start="7:24" pos:end="7:26"><name pos:start="7:24" pos:end="7:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">CPUMIPSState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">env</name> <init pos:start="9:23" pos:end="9:33">= <expr pos:start="9:25" pos:end="9:33"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:33"><name pos:start="9:26" pos:end="9:28">cpu</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:33">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">DisasContext</name></type> <name pos:start="11:18" pos:end="11:20">ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint16_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">CPUBreakpoint</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">j</name></decl>, <decl pos:start="19:12" pos:end="19:18"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:13">lj</name> <init pos:start="19:15" pos:end="19:18">= <expr pos:start="19:17" pos:end="19:18"><operator pos:start="19:17" pos:end="19:17">-</operator><literal type="number" pos:start="19:18" pos:end="19:18">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">max_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:19"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">insn_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:16"><decl pos:start="27:5" pos:end="27:15"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:15">is_slot</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="33:46"><if pos:start="31:5" pos:end="33:46">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:17">search_pc</name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:46"><block_content pos:start="33:9" pos:end="33:46">

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><call pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:16">qemu_log</name><argument_list pos:start="33:17" pos:end="33:45">(<argument pos:start="33:18" pos:end="33:33"><expr pos:start="33:18" pos:end="33:33"><literal type="string" pos:start="33:18" pos:end="33:33">"search pc %d\n"</literal></expr></argument>, <argument pos:start="33:36" pos:end="33:44"><expr pos:start="33:36" pos:end="33:44"><name pos:start="33:36" pos:end="33:44">search_pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:12">pc_start</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <name pos:start="37:16" pos:end="37:21"><name pos:start="37:16" pos:end="37:17">tb</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:21">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:53"><expr pos:start="39:5" pos:end="39:52"><name pos:start="39:5" pos:end="39:15">gen_opc_end</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:37"><name pos:start="39:19" pos:end="39:25">tcg_ctx</name><operator pos:start="39:26" pos:end="39:26">.</operator><name pos:start="39:27" pos:end="39:37">gen_opc_buf</name></name> <operator pos:start="39:39" pos:end="39:39">+</operator> <name pos:start="39:41" pos:end="39:52">OPC_MAX_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:10"><name pos:start="41:5" pos:end="41:7">ctx</name><operator pos:start="41:8" pos:end="41:8">.</operator><name pos:start="41:9" pos:end="41:10">pc</name></name> <operator pos:start="41:12" pos:end="41:12">=</operator> <name pos:start="41:14" pos:end="41:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:7">ctx</name><operator pos:start="43:8" pos:end="43:8">.</operator><name pos:start="43:9" pos:end="43:16">saved_pc</name></name> <operator pos:start="43:18" pos:end="43:18">=</operator> <operator pos:start="43:20" pos:end="43:20">-</operator><literal type="number" pos:start="43:21" pos:end="43:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:52"><expr pos:start="45:5" pos:end="45:51"><name pos:start="45:5" pos:end="45:26"><name pos:start="45:5" pos:end="45:7">ctx</name><operator pos:start="45:8" pos:end="45:8">.</operator><name pos:start="45:9" pos:end="45:26">singlestep_enabled</name></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <name pos:start="45:30" pos:end="45:51"><name pos:start="45:30" pos:end="45:31">cs</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:51">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:37"><expr pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:7">ctx</name><operator pos:start="47:8" pos:end="47:8">.</operator><name pos:start="47:9" pos:end="47:18">insn_flags</name></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:36"><name pos:start="47:22" pos:end="47:24">env</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:36">insn_flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:39"><expr pos:start="49:5" pos:end="49:38"><name pos:start="49:5" pos:end="49:19"><name pos:start="49:5" pos:end="49:7">ctx</name><operator pos:start="49:8" pos:end="49:8">.</operator><name pos:start="49:9" pos:end="49:19">CP0_Config1</name></name> <operator pos:start="49:21" pos:end="49:21">=</operator> <name pos:start="49:23" pos:end="49:38"><name pos:start="49:23" pos:end="49:25">env</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:38">CP0_Config1</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:16"><expr pos:start="51:5" pos:end="51:15"><name pos:start="51:5" pos:end="51:10"><name pos:start="51:5" pos:end="51:7">ctx</name><operator pos:start="51:8" pos:end="51:8">.</operator><name pos:start="51:9" pos:end="51:10">tb</name></name> <operator pos:start="51:12" pos:end="51:12">=</operator> <name pos:start="51:14" pos:end="51:15">tb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:25"><expr pos:start="53:5" pos:end="53:24"><name pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:7">ctx</name><operator pos:start="53:8" pos:end="53:8">.</operator><name pos:start="53:9" pos:end="53:14">bstate</name></name> <operator pos:start="53:16" pos:end="53:16">=</operator> <name pos:start="53:18" pos:end="53:24">BS_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:65"><expr pos:start="55:5" pos:end="55:64"><name pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:7">ctx</name><operator pos:start="55:8" pos:end="55:8">.</operator><name pos:start="55:9" pos:end="55:17">kscrexist</name></name> <operator pos:start="55:19" pos:end="55:19">=</operator> <operator pos:start="55:21" pos:end="55:21">(</operator><name pos:start="55:22" pos:end="55:37"><name pos:start="55:22" pos:end="55:24">env</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:37">CP0_Config4</name></name> <operator pos:start="55:39" pos:end="55:40">&gt;&gt;</operator> <name pos:start="55:42" pos:end="55:56">CP0C4_KScrExist</name><operator pos:start="55:57" pos:end="55:57">)</operator> <operator pos:start="55:59" pos:end="55:59">&amp;</operator> <literal type="number" pos:start="55:61" pos:end="55:64">0xff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:50"><expr pos:start="57:5" pos:end="57:49"><name pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:7">ctx</name><operator pos:start="57:8" pos:end="57:8">.</operator><name pos:start="57:9" pos:end="57:11">rxi</name></name> <operator pos:start="57:13" pos:end="57:13">=</operator> <operator pos:start="57:15" pos:end="57:15">(</operator><name pos:start="57:16" pos:end="57:31"><name pos:start="57:16" pos:end="57:18">env</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:31">CP0_Config3</name></name> <operator pos:start="57:33" pos:end="57:34">&gt;&gt;</operator> <name pos:start="57:36" pos:end="57:44">CP0C3_RXI</name><operator pos:start="57:45" pos:end="57:45">)</operator> <operator pos:start="57:47" pos:end="57:47">&amp;</operator> <literal type="number" pos:start="57:49" pos:end="57:49">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:48"><expr pos:start="59:5" pos:end="59:47"><name pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:7">ctx</name><operator pos:start="59:8" pos:end="59:8">.</operator><name pos:start="59:9" pos:end="59:10">ie</name></name> <operator pos:start="59:12" pos:end="59:12">=</operator> <operator pos:start="59:14" pos:end="59:14">(</operator><name pos:start="59:15" pos:end="59:30"><name pos:start="59:15" pos:end="59:17">env</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:30">CP0_Config4</name></name> <operator pos:start="59:32" pos:end="59:33">&gt;&gt;</operator> <name pos:start="59:35" pos:end="59:42">CP0C4_IE</name><operator pos:start="59:43" pos:end="59:43">)</operator> <operator pos:start="59:45" pos:end="59:45">&amp;</operator> <literal type="number" pos:start="59:47" pos:end="59:47">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:48"><expr pos:start="61:5" pos:end="61:47"><name pos:start="61:5" pos:end="61:10"><name pos:start="61:5" pos:end="61:7">ctx</name><operator pos:start="61:8" pos:end="61:8">.</operator><name pos:start="61:9" pos:end="61:10">bi</name></name> <operator pos:start="61:12" pos:end="61:12">=</operator> <operator pos:start="61:14" pos:end="61:14">(</operator><name pos:start="61:15" pos:end="61:30"><name pos:start="61:15" pos:end="61:17">env</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:30">CP0_Config3</name></name> <operator pos:start="61:32" pos:end="61:33">&gt;&gt;</operator> <name pos:start="61:35" pos:end="61:42">CP0C3_BI</name><operator pos:start="61:43" pos:end="61:43">)</operator> <operator pos:start="61:45" pos:end="61:45">&amp;</operator> <literal type="number" pos:start="61:47" pos:end="61:47">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:48"><expr pos:start="63:5" pos:end="63:47"><name pos:start="63:5" pos:end="63:10"><name pos:start="63:5" pos:end="63:7">ctx</name><operator pos:start="63:8" pos:end="63:8">.</operator><name pos:start="63:9" pos:end="63:10">bp</name></name> <operator pos:start="63:12" pos:end="63:12">=</operator> <operator pos:start="63:14" pos:end="63:14">(</operator><name pos:start="63:15" pos:end="63:30"><name pos:start="63:15" pos:end="63:17">env</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:30">CP0_Config3</name></name> <operator pos:start="63:32" pos:end="63:33">&gt;&gt;</operator> <name pos:start="63:35" pos:end="63:42">CP0C3_BP</name><operator pos:start="63:43" pos:end="63:43">)</operator> <operator pos:start="63:45" pos:end="63:45">&amp;</operator> <literal type="number" pos:start="63:47" pos:end="63:47">1</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="65:5" pos:end="65:56">/* Restore delay slot state from the tb context.  */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:37"><expr pos:start="67:5" pos:end="67:36"><name pos:start="67:5" pos:end="67:14"><name pos:start="67:5" pos:end="67:7">ctx</name><operator pos:start="67:8" pos:end="67:8">.</operator><name pos:start="67:9" pos:end="67:14">hflags</name></name> <operator pos:start="67:16" pos:end="67:16">=</operator> <operator pos:start="67:18" pos:end="67:18">(</operator><name pos:start="67:19" pos:end="67:26">uint32_t</name><operator pos:start="67:27" pos:end="67:27">)</operator><name pos:start="67:28" pos:end="67:36"><name pos:start="67:28" pos:end="67:29">tb</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:36">flags</name></name></expr>;</expr_stmt> <comment type="block" pos:start="67:39" pos:end="67:74">/* FIXME: maybe use 64 bits here? */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:52"><expr pos:start="69:5" pos:end="69:51"><name pos:start="69:5" pos:end="69:12"><name pos:start="69:5" pos:end="69:7">ctx</name><operator pos:start="69:8" pos:end="69:8">.</operator><name pos:start="69:9" pos:end="69:12">ulri</name></name> <operator pos:start="69:14" pos:end="69:14">=</operator> <name pos:start="69:16" pos:end="69:31"><name pos:start="69:16" pos:end="69:18">env</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:31">CP0_Config3</name></name> <operator pos:start="69:33" pos:end="69:33">&amp;</operator> <operator pos:start="69:35" pos:end="69:35">(</operator><literal type="number" pos:start="69:36" pos:end="69:36">1</literal> <operator pos:start="69:38" pos:end="69:39">&lt;&lt;</operator> <name pos:start="69:41" pos:end="69:50">CP0C3_ULRI</name><operator pos:start="69:51" pos:end="69:51">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="74:0"><expr pos:start="71:5" pos:end="71:32"><call pos:start="71:5" pos:end="71:32"><name pos:start="71:5" pos:end="71:21">restore_cpu_state</name><argument_list pos:start="71:22" pos:end="71:32">(<argument pos:start="71:23" pos:end="71:25"><expr pos:start="71:23" pos:end="71:25"><name pos:start="71:23" pos:end="71:25">env</name></expr></argument>, <argument pos:start="71:28" pos:end="71:31"><expr pos:start="71:28" pos:end="71:31"><operator pos:start="71:28" pos:end="71:28">&amp;</operator><name pos:start="71:29" pos:end="71:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="73:1" pos:end="73:23">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:23">CONFIG_USER_ONLY</name></cpp:ifdef>

        <expr_stmt pos:start="75:9" pos:end="78:0"><expr pos:start="75:9" pos:end="75:35"><name pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:11">ctx</name><operator pos:start="75:12" pos:end="75:12">.</operator><name pos:start="75:13" pos:end="75:19">mem_idx</name></name> <operator pos:start="75:21" pos:end="75:21">=</operator> <name pos:start="75:23" pos:end="75:35">MIPS_HFLAG_UM</name></expr>;</expr_stmt>

<cpp:else pos:start="77:1" pos:end="77:5">#<cpp:directive pos:start="77:2" pos:end="77:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="79:9" pos:end="82:0"><expr pos:start="79:9" pos:end="79:49"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:11">ctx</name><operator pos:start="79:12" pos:end="79:12">.</operator><name pos:start="79:13" pos:end="79:19">mem_idx</name></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <name pos:start="79:23" pos:end="79:32"><name pos:start="79:23" pos:end="79:25">ctx</name><operator pos:start="79:26" pos:end="79:26">.</operator><name pos:start="79:27" pos:end="79:32">hflags</name></name> <operator pos:start="79:34" pos:end="79:34">&amp;</operator> <name pos:start="79:36" pos:end="79:49">MIPS_HFLAG_KSU</name></expr>;</expr_stmt>

<cpp:endif pos:start="81:1" pos:end="81:6">#<cpp:directive pos:start="81:2" pos:end="81:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="83:5" pos:end="83:18"><expr pos:start="83:5" pos:end="83:17"><name pos:start="83:5" pos:end="83:13">num_insns</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <literal type="number" pos:start="83:17" pos:end="83:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:43"><expr pos:start="85:5" pos:end="85:42"><name pos:start="85:5" pos:end="85:13">max_insns</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <name pos:start="85:17" pos:end="85:26"><name pos:start="85:17" pos:end="85:18">tb</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:26">cflags</name></name> <operator pos:start="85:28" pos:end="85:28">&amp;</operator> <name pos:start="85:30" pos:end="85:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="89:34"><if pos:start="87:5" pos:end="89:34">if <condition pos:start="87:8" pos:end="87:23">(<expr pos:start="87:9" pos:end="87:22"><name pos:start="87:9" pos:end="87:17">max_insns</name> <operator pos:start="87:19" pos:end="87:20">==</operator> <literal type="number" pos:start="87:22" pos:end="87:22">0</literal></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:34"><block_content pos:start="89:9" pos:end="89:34">

        <expr_stmt pos:start="89:9" pos:end="89:34"><expr pos:start="89:9" pos:end="89:33"><name pos:start="89:9" pos:end="89:17">max_insns</name> <operator pos:start="89:19" pos:end="89:19">=</operator> <name pos:start="89:21" pos:end="89:33">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:75"><expr pos:start="91:5" pos:end="91:74"><call pos:start="91:5" pos:end="91:74"><name pos:start="91:5" pos:end="91:13">LOG_DISAS</name><argument_list pos:start="91:14" pos:end="91:74">(<argument pos:start="91:15" pos:end="91:44"><expr pos:start="91:15" pos:end="91:44"><literal type="string" pos:start="91:15" pos:end="91:44">"\ntb %p idx %d hflags %04x\n"</literal></expr></argument>, <argument pos:start="91:47" pos:end="91:48"><expr pos:start="91:47" pos:end="91:48"><name pos:start="91:47" pos:end="91:48">tb</name></expr></argument>, <argument pos:start="91:51" pos:end="91:61"><expr pos:start="91:51" pos:end="91:61"><name pos:start="91:51" pos:end="91:61"><name pos:start="91:51" pos:end="91:53">ctx</name><operator pos:start="91:54" pos:end="91:54">.</operator><name pos:start="91:55" pos:end="91:61">mem_idx</name></name></expr></argument>, <argument pos:start="91:64" pos:end="91:73"><expr pos:start="91:64" pos:end="91:73"><name pos:start="91:64" pos:end="91:73"><name pos:start="91:64" pos:end="91:66">ctx</name><operator pos:start="91:67" pos:end="91:67">.</operator><name pos:start="91:68" pos:end="91:73">hflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:19"><expr pos:start="93:5" pos:end="93:18"><call pos:start="93:5" pos:end="93:18"><name pos:start="93:5" pos:end="93:16">gen_tb_start</name><argument_list pos:start="93:17" pos:end="93:18">()</argument_list></call></expr>;</expr_stmt>

    <while pos:start="95:5" pos:end="261:5">while <condition pos:start="95:11" pos:end="95:33">(<expr pos:start="95:12" pos:end="95:32"><name pos:start="95:12" pos:end="95:21"><name pos:start="95:12" pos:end="95:14">ctx</name><operator pos:start="95:15" pos:end="95:15">.</operator><name pos:start="95:16" pos:end="95:21">bstate</name></name> <operator pos:start="95:23" pos:end="95:24">==</operator> <name pos:start="95:26" pos:end="95:32">BS_NONE</name></expr>)</condition> <block pos:start="95:35" pos:end="261:5">{<block_content pos:start="97:9" pos:end="259:18">

        <if_stmt pos:start="97:9" pos:end="121:9"><if pos:start="97:9" pos:end="121:9">if <condition pos:start="97:12" pos:end="97:54">(<expr pos:start="97:13" pos:end="97:53"><call pos:start="97:13" pos:end="97:53"><name pos:start="97:13" pos:end="97:20">unlikely</name><argument_list pos:start="97:21" pos:end="97:53">(<argument pos:start="97:22" pos:end="97:52"><expr pos:start="97:22" pos:end="97:52"><operator pos:start="97:22" pos:end="97:22">!</operator><call pos:start="97:23" pos:end="97:52"><name pos:start="97:23" pos:end="97:34">QTAILQ_EMPTY</name><argument_list pos:start="97:35" pos:end="97:52">(<argument pos:start="97:36" pos:end="97:51"><expr pos:start="97:36" pos:end="97:51"><operator pos:start="97:36" pos:end="97:36">&amp;</operator><name pos:start="97:37" pos:end="97:51"><name pos:start="97:37" pos:end="97:38">cs</name><operator pos:start="97:39" pos:end="97:40">-&gt;</operator><name pos:start="97:41" pos:end="97:51">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:56" pos:end="121:9">{<block_content pos:start="99:13" pos:end="119:13">

            <macro pos:start="99:13" pos:end="99:55"><name pos:start="99:13" pos:end="99:26">QTAILQ_FOREACH</name><argument_list pos:start="99:27" pos:end="99:55">(<argument pos:start="99:28" pos:end="99:29">bp</argument>, <argument pos:start="99:32" pos:end="99:47">&amp;cs-&gt;breakpoints</argument>, <argument pos:start="99:50" pos:end="99:54">entry</argument>)</argument_list></macro> <block pos:start="99:57" pos:end="119:13">{<block_content pos:start="101:17" pos:end="117:17">

                <if_stmt pos:start="101:17" pos:end="117:17"><if pos:start="101:17" pos:end="117:17">if <condition pos:start="101:20" pos:end="101:37">(<expr pos:start="101:21" pos:end="101:36"><name pos:start="101:21" pos:end="101:26"><name pos:start="101:21" pos:end="101:22">bp</name><operator pos:start="101:23" pos:end="101:24">-&gt;</operator><name pos:start="101:25" pos:end="101:26">pc</name></name> <operator pos:start="101:28" pos:end="101:29">==</operator> <name pos:start="101:31" pos:end="101:36"><name pos:start="101:31" pos:end="101:33">ctx</name><operator pos:start="101:34" pos:end="101:34">.</operator><name pos:start="101:35" pos:end="101:36">pc</name></name></expr>)</condition> <block pos:start="101:39" pos:end="117:17">{<block_content pos:start="103:21" pos:end="115:41">

                    <expr_stmt pos:start="103:21" pos:end="103:44"><expr pos:start="103:21" pos:end="103:43"><call pos:start="103:21" pos:end="103:43"><name pos:start="103:21" pos:end="103:34">save_cpu_state</name><argument_list pos:start="103:35" pos:end="103:43">(<argument pos:start="103:36" pos:end="103:39"><expr pos:start="103:36" pos:end="103:39"><operator pos:start="103:36" pos:end="103:36">&amp;</operator><name pos:start="103:37" pos:end="103:39">ctx</name></expr></argument>, <argument pos:start="103:42" pos:end="103:42"><expr pos:start="103:42" pos:end="103:42"><literal type="number" pos:start="103:42" pos:end="103:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:43"><expr pos:start="105:21" pos:end="105:42"><name pos:start="105:21" pos:end="105:30"><name pos:start="105:21" pos:end="105:23">ctx</name><operator pos:start="105:24" pos:end="105:24">.</operator><name pos:start="105:25" pos:end="105:30">bstate</name></name> <operator pos:start="105:32" pos:end="105:32">=</operator> <name pos:start="105:34" pos:end="105:42">BS_BRANCH</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="107:21" pos:end="107:65"><expr pos:start="107:21" pos:end="107:64"><call pos:start="107:21" pos:end="107:64"><name pos:start="107:21" pos:end="107:35">gen_helper_0e0i</name><argument_list pos:start="107:36" pos:end="107:64">(<argument pos:start="107:37" pos:end="107:51"><expr pos:start="107:37" pos:end="107:51"><name pos:start="107:37" pos:end="107:51">raise_exception</name></expr></argument>, <argument pos:start="107:54" pos:end="107:63"><expr pos:start="107:54" pos:end="107:63"><name pos:start="107:54" pos:end="107:63">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="109:21" pos:end="111:54">/* Include the breakpoint location or the tb won't

                     * be flushed when it must be.  */</comment>

                    <expr_stmt pos:start="113:21" pos:end="113:32"><expr pos:start="113:21" pos:end="113:31"><name pos:start="113:21" pos:end="113:26"><name pos:start="113:21" pos:end="113:23">ctx</name><operator pos:start="113:24" pos:end="113:24">.</operator><name pos:start="113:25" pos:end="113:26">pc</name></name> <operator pos:start="113:28" pos:end="113:29">+=</operator> <literal type="number" pos:start="113:31" pos:end="113:31">4</literal></expr>;</expr_stmt>

                    <goto pos:start="115:21" pos:end="115:41">goto <name pos:start="115:26" pos:end="115:40">done_generating</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="125:9" pos:end="149:9"><if pos:start="125:9" pos:end="149:9">if <condition pos:start="125:12" pos:end="125:22">(<expr pos:start="125:13" pos:end="125:21"><name pos:start="125:13" pos:end="125:21">search_pc</name></expr>)</condition> <block pos:start="125:24" pos:end="149:9">{<block_content pos:start="127:13" pos:end="147:51">

            <expr_stmt pos:start="127:13" pos:end="127:58"><expr pos:start="127:13" pos:end="127:57"><name pos:start="127:13" pos:end="127:13">j</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <name pos:start="127:17" pos:end="127:35"><name pos:start="127:17" pos:end="127:23">tcg_ctx</name><operator pos:start="127:24" pos:end="127:24">.</operator><name pos:start="127:25" pos:end="127:35">gen_opc_ptr</name></name> <operator pos:start="127:37" pos:end="127:37">-</operator> <name pos:start="127:39" pos:end="127:57"><name pos:start="127:39" pos:end="127:45">tcg_ctx</name><operator pos:start="127:46" pos:end="127:46">.</operator><name pos:start="127:47" pos:end="127:57">gen_opc_buf</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="129:13" pos:end="137:13"><if pos:start="129:13" pos:end="137:13">if <condition pos:start="129:16" pos:end="129:23">(<expr pos:start="129:17" pos:end="129:22"><name pos:start="129:17" pos:end="129:18">lj</name> <operator pos:start="129:20" pos:end="129:20">&lt;</operator> <name pos:start="129:22" pos:end="129:22">j</name></expr>)</condition> <block pos:start="129:25" pos:end="137:13">{<block_content pos:start="131:17" pos:end="135:58">

                <expr_stmt pos:start="131:17" pos:end="131:21"><expr pos:start="131:17" pos:end="131:20"><name pos:start="131:17" pos:end="131:18">lj</name><operator pos:start="131:19" pos:end="131:20">++</operator></expr>;</expr_stmt>

                <while pos:start="133:17" pos:end="135:58">while <condition pos:start="133:23" pos:end="133:30">(<expr pos:start="133:24" pos:end="133:29"><name pos:start="133:24" pos:end="133:25">lj</name> <operator pos:start="133:27" pos:end="133:27">&lt;</operator> <name pos:start="133:29" pos:end="133:29">j</name></expr>)</condition><block type="pseudo" pos:start="135:21" pos:end="135:58"><block_content pos:start="135:21" pos:end="135:58">

                    <expr_stmt pos:start="135:21" pos:end="135:58"><expr pos:start="135:21" pos:end="135:57"><name pos:start="135:21" pos:end="135:53"><name pos:start="135:21" pos:end="135:27">tcg_ctx</name><operator pos:start="135:28" pos:end="135:28">.</operator><name pos:start="135:29" pos:end="135:47">gen_opc_instr_start</name><index pos:start="135:48" pos:end="135:53">[<expr pos:start="135:49" pos:end="135:52"><name pos:start="135:49" pos:end="135:50">lj</name><operator pos:start="135:51" pos:end="135:52">++</operator></expr>]</index></name> <operator pos:start="135:55" pos:end="135:55">=</operator> <literal type="number" pos:start="135:57" pos:end="135:57">0</literal></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:44"><expr pos:start="139:13" pos:end="139:43"><name pos:start="139:13" pos:end="139:34"><name pos:start="139:13" pos:end="139:19">tcg_ctx</name><operator pos:start="139:20" pos:end="139:20">.</operator><name pos:start="139:21" pos:end="139:30">gen_opc_pc</name><index pos:start="139:31" pos:end="139:34">[<expr pos:start="139:32" pos:end="139:33"><name pos:start="139:32" pos:end="139:33">lj</name></expr>]</index></name> <operator pos:start="139:36" pos:end="139:36">=</operator> <name pos:start="139:38" pos:end="139:43"><name pos:start="139:38" pos:end="139:40">ctx</name><operator pos:start="139:41" pos:end="139:41">.</operator><name pos:start="139:42" pos:end="139:43">pc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:63"><expr pos:start="141:13" pos:end="141:62"><name pos:start="141:13" pos:end="141:30"><name pos:start="141:13" pos:end="141:26">gen_opc_hflags</name><index pos:start="141:27" pos:end="141:30">[<expr pos:start="141:28" pos:end="141:29"><name pos:start="141:28" pos:end="141:29">lj</name></expr>]</index></name> <operator pos:start="141:32" pos:end="141:32">=</operator> <name pos:start="141:34" pos:end="141:43"><name pos:start="141:34" pos:end="141:36">ctx</name><operator pos:start="141:37" pos:end="141:37">.</operator><name pos:start="141:38" pos:end="141:43">hflags</name></name> <operator pos:start="141:45" pos:end="141:45">&amp;</operator> <name pos:start="141:47" pos:end="141:62">MIPS_HFLAG_BMASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:46"><expr pos:start="143:13" pos:end="143:45"><name pos:start="143:13" pos:end="143:31"><name pos:start="143:13" pos:end="143:27">gen_opc_btarget</name><index pos:start="143:28" pos:end="143:31">[<expr pos:start="143:29" pos:end="143:30"><name pos:start="143:29" pos:end="143:30">lj</name></expr>]</index></name> <operator pos:start="143:33" pos:end="143:33">=</operator> <name pos:start="143:35" pos:end="143:45"><name pos:start="143:35" pos:end="143:37">ctx</name><operator pos:start="143:38" pos:end="143:38">.</operator><name pos:start="143:39" pos:end="143:45">btarget</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:48"><expr pos:start="145:13" pos:end="145:47"><name pos:start="145:13" pos:end="145:43"><name pos:start="145:13" pos:end="145:19">tcg_ctx</name><operator pos:start="145:20" pos:end="145:20">.</operator><name pos:start="145:21" pos:end="145:39">gen_opc_instr_start</name><index pos:start="145:40" pos:end="145:43">[<expr pos:start="145:41" pos:end="145:42"><name pos:start="145:41" pos:end="145:42">lj</name></expr>]</index></name> <operator pos:start="145:45" pos:end="145:45">=</operator> <literal type="number" pos:start="145:47" pos:end="145:47">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:51"><expr pos:start="147:13" pos:end="147:50"><name pos:start="147:13" pos:end="147:38"><name pos:start="147:13" pos:end="147:19">tcg_ctx</name><operator pos:start="147:20" pos:end="147:20">.</operator><name pos:start="147:21" pos:end="147:34">gen_opc_icount</name><index pos:start="147:35" pos:end="147:38">[<expr pos:start="147:36" pos:end="147:37"><name pos:start="147:36" pos:end="147:37">lj</name></expr>]</index></name> <operator pos:start="147:40" pos:end="147:40">=</operator> <name pos:start="147:42" pos:end="147:50">num_insns</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="151:9" pos:end="153:27"><if pos:start="151:9" pos:end="153:27">if <condition pos:start="151:12" pos:end="151:68">(<expr pos:start="151:13" pos:end="151:67"><name pos:start="151:13" pos:end="151:21">num_insns</name> <operator pos:start="151:23" pos:end="151:23">+</operator> <literal type="number" pos:start="151:25" pos:end="151:25">1</literal> <operator pos:start="151:27" pos:end="151:28">==</operator> <name pos:start="151:30" pos:end="151:38">max_insns</name> <operator pos:start="151:40" pos:end="151:41">&amp;&amp;</operator> <operator pos:start="151:43" pos:end="151:43">(</operator><name pos:start="151:44" pos:end="151:53"><name pos:start="151:44" pos:end="151:45">tb</name><operator pos:start="151:46" pos:end="151:47">-&gt;</operator><name pos:start="151:48" pos:end="151:53">cflags</name></name> <operator pos:start="151:55" pos:end="151:55">&amp;</operator> <name pos:start="151:57" pos:end="151:66">CF_LAST_IO</name><operator pos:start="151:67" pos:end="151:67">)</operator></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:27"><block_content pos:start="153:13" pos:end="153:27">

            <expr_stmt pos:start="153:13" pos:end="153:27"><expr pos:start="153:13" pos:end="153:26"><call pos:start="153:13" pos:end="153:26"><name pos:start="153:13" pos:end="153:24">gen_io_start</name><argument_list pos:start="153:25" pos:end="153:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="157:9" pos:end="157:48"><expr pos:start="157:9" pos:end="157:47"><name pos:start="157:9" pos:end="157:15">is_slot</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <name pos:start="157:19" pos:end="157:28"><name pos:start="157:19" pos:end="157:21">ctx</name><operator pos:start="157:22" pos:end="157:22">.</operator><name pos:start="157:23" pos:end="157:28">hflags</name></name> <operator pos:start="157:30" pos:end="157:30">&amp;</operator> <name pos:start="157:32" pos:end="157:47">MIPS_HFLAG_BMASK</name></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="187:9"><if pos:start="159:9" pos:end="167:9">if <condition pos:start="159:12" pos:end="159:43">(<expr pos:start="159:13" pos:end="159:42"><operator pos:start="159:13" pos:end="159:13">!</operator><operator pos:start="159:14" pos:end="159:14">(</operator><name pos:start="159:15" pos:end="159:24"><name pos:start="159:15" pos:end="159:17">ctx</name><operator pos:start="159:18" pos:end="159:18">.</operator><name pos:start="159:19" pos:end="159:24">hflags</name></name> <operator pos:start="159:26" pos:end="159:26">&amp;</operator> <name pos:start="159:28" pos:end="159:41">MIPS_HFLAG_M16</name><operator pos:start="159:42" pos:end="159:42">)</operator></expr>)</condition> <block pos:start="159:45" pos:end="167:9">{<block_content pos:start="161:13" pos:end="165:34">

            <expr_stmt pos:start="161:13" pos:end="161:51"><expr pos:start="161:13" pos:end="161:50"><name pos:start="161:13" pos:end="161:22"><name pos:start="161:13" pos:end="161:15">ctx</name><operator pos:start="161:16" pos:end="161:16">.</operator><name pos:start="161:17" pos:end="161:22">opcode</name></name> <operator pos:start="161:24" pos:end="161:24">=</operator> <call pos:start="161:26" pos:end="161:50"><name pos:start="161:26" pos:end="161:37">cpu_ldl_code</name><argument_list pos:start="161:38" pos:end="161:50">(<argument pos:start="161:39" pos:end="161:41"><expr pos:start="161:39" pos:end="161:41"><name pos:start="161:39" pos:end="161:41">env</name></expr></argument>, <argument pos:start="161:44" pos:end="161:49"><expr pos:start="161:44" pos:end="161:49"><name pos:start="161:44" pos:end="161:49"><name pos:start="161:44" pos:end="161:46">ctx</name><operator pos:start="161:47" pos:end="161:47">.</operator><name pos:start="161:48" pos:end="161:49">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:27"><expr pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:22">insn_bytes</name> <operator pos:start="163:24" pos:end="163:24">=</operator> <literal type="number" pos:start="163:26" pos:end="163:26">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:34"><expr pos:start="165:13" pos:end="165:33"><call pos:start="165:13" pos:end="165:33"><name pos:start="165:13" pos:end="165:22">decode_opc</name><argument_list pos:start="165:23" pos:end="165:33">(<argument pos:start="165:24" pos:end="165:26"><expr pos:start="165:24" pos:end="165:26"><name pos:start="165:24" pos:end="165:26">env</name></expr></argument>, <argument pos:start="165:29" pos:end="165:32"><expr pos:start="165:29" pos:end="165:32"><operator pos:start="165:29" pos:end="165:29">&amp;</operator><name pos:start="165:30" pos:end="165:32">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="167:11" pos:end="173:9">else if <condition pos:start="167:19" pos:end="167:50">(<expr pos:start="167:20" pos:end="167:49"><name pos:start="167:20" pos:end="167:33"><name pos:start="167:20" pos:end="167:22">ctx</name><operator pos:start="167:23" pos:end="167:23">.</operator><name pos:start="167:24" pos:end="167:33">insn_flags</name></name> <operator pos:start="167:35" pos:end="167:35">&amp;</operator> <name pos:start="167:37" pos:end="167:49">ASE_MICROMIPS</name></expr>)</condition> <block pos:start="167:52" pos:end="173:9">{<block_content pos:start="169:13" pos:end="171:57">

            <expr_stmt pos:start="169:13" pos:end="169:52"><expr pos:start="169:13" pos:end="169:51"><name pos:start="169:13" pos:end="169:22"><name pos:start="169:13" pos:end="169:15">ctx</name><operator pos:start="169:16" pos:end="169:16">.</operator><name pos:start="169:17" pos:end="169:22">opcode</name></name> <operator pos:start="169:24" pos:end="169:24">=</operator> <call pos:start="169:26" pos:end="169:51"><name pos:start="169:26" pos:end="169:38">cpu_lduw_code</name><argument_list pos:start="169:39" pos:end="169:51">(<argument pos:start="169:40" pos:end="169:42"><expr pos:start="169:40" pos:end="169:42"><name pos:start="169:40" pos:end="169:42">env</name></expr></argument>, <argument pos:start="169:45" pos:end="169:50"><expr pos:start="169:45" pos:end="169:50"><name pos:start="169:45" pos:end="169:50"><name pos:start="169:45" pos:end="169:47">ctx</name><operator pos:start="169:48" pos:end="169:48">.</operator><name pos:start="169:49" pos:end="169:50">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:57"><expr pos:start="171:13" pos:end="171:56"><name pos:start="171:13" pos:end="171:22">insn_bytes</name> <operator pos:start="171:24" pos:end="171:24">=</operator> <call pos:start="171:26" pos:end="171:56"><name pos:start="171:26" pos:end="171:45">decode_micromips_opc</name><argument_list pos:start="171:46" pos:end="171:56">(<argument pos:start="171:47" pos:end="171:49"><expr pos:start="171:47" pos:end="171:49"><name pos:start="171:47" pos:end="171:49">env</name></expr></argument>, <argument pos:start="171:52" pos:end="171:55"><expr pos:start="171:52" pos:end="171:55"><operator pos:start="171:52" pos:end="171:52">&amp;</operator><name pos:start="171:53" pos:end="171:55">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="173:11" pos:end="179:9">else if <condition pos:start="173:19" pos:end="173:47">(<expr pos:start="173:20" pos:end="173:46"><name pos:start="173:20" pos:end="173:33"><name pos:start="173:20" pos:end="173:22">ctx</name><operator pos:start="173:23" pos:end="173:23">.</operator><name pos:start="173:24" pos:end="173:33">insn_flags</name></name> <operator pos:start="173:35" pos:end="173:35">&amp;</operator> <name pos:start="173:37" pos:end="173:46">ASE_MIPS16</name></expr>)</condition> <block pos:start="173:49" pos:end="179:9">{<block_content pos:start="175:13" pos:end="177:54">

            <expr_stmt pos:start="175:13" pos:end="175:52"><expr pos:start="175:13" pos:end="175:51"><name pos:start="175:13" pos:end="175:22"><name pos:start="175:13" pos:end="175:15">ctx</name><operator pos:start="175:16" pos:end="175:16">.</operator><name pos:start="175:17" pos:end="175:22">opcode</name></name> <operator pos:start="175:24" pos:end="175:24">=</operator> <call pos:start="175:26" pos:end="175:51"><name pos:start="175:26" pos:end="175:38">cpu_lduw_code</name><argument_list pos:start="175:39" pos:end="175:51">(<argument pos:start="175:40" pos:end="175:42"><expr pos:start="175:40" pos:end="175:42"><name pos:start="175:40" pos:end="175:42">env</name></expr></argument>, <argument pos:start="175:45" pos:end="175:50"><expr pos:start="175:45" pos:end="175:50"><name pos:start="175:45" pos:end="175:50"><name pos:start="175:45" pos:end="175:47">ctx</name><operator pos:start="175:48" pos:end="175:48">.</operator><name pos:start="175:49" pos:end="175:50">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:54"><expr pos:start="177:13" pos:end="177:53"><name pos:start="177:13" pos:end="177:22">insn_bytes</name> <operator pos:start="177:24" pos:end="177:24">=</operator> <call pos:start="177:26" pos:end="177:53"><name pos:start="177:26" pos:end="177:42">decode_mips16_opc</name><argument_list pos:start="177:43" pos:end="177:53">(<argument pos:start="177:44" pos:end="177:46"><expr pos:start="177:44" pos:end="177:46"><name pos:start="177:44" pos:end="177:46">env</name></expr></argument>, <argument pos:start="177:49" pos:end="177:52"><expr pos:start="177:49" pos:end="177:52"><operator pos:start="177:49" pos:end="177:49">&amp;</operator><name pos:start="177:50" pos:end="177:52">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="179:11" pos:end="187:9">else <block pos:start="179:16" pos:end="187:9">{<block_content pos:start="181:13" pos:end="185:18">

            <expr_stmt pos:start="181:13" pos:end="181:46"><expr pos:start="181:13" pos:end="181:45"><call pos:start="181:13" pos:end="181:45"><name pos:start="181:13" pos:end="181:30">generate_exception</name><argument_list pos:start="181:31" pos:end="181:45">(<argument pos:start="181:32" pos:end="181:35"><expr pos:start="181:32" pos:end="181:35"><operator pos:start="181:32" pos:end="181:32">&amp;</operator><name pos:start="181:33" pos:end="181:35">ctx</name></expr></argument>, <argument pos:start="181:38" pos:end="181:44"><expr pos:start="181:38" pos:end="181:44"><name pos:start="181:38" pos:end="181:44">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:33"><expr pos:start="183:13" pos:end="183:32"><name pos:start="183:13" pos:end="183:22"><name pos:start="183:13" pos:end="183:15">ctx</name><operator pos:start="183:16" pos:end="183:16">.</operator><name pos:start="183:17" pos:end="183:22">bstate</name></name> <operator pos:start="183:24" pos:end="183:24">=</operator> <name pos:start="183:26" pos:end="183:32">BS_STOP</name></expr>;</expr_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="191:9" pos:end="205:9"><if pos:start="191:9" pos:end="205:9">if <condition pos:start="191:12" pos:end="191:42">(<expr pos:start="191:13" pos:end="191:41"><name pos:start="191:13" pos:end="191:22"><name pos:start="191:13" pos:end="191:15">ctx</name><operator pos:start="191:16" pos:end="191:16">.</operator><name pos:start="191:17" pos:end="191:22">hflags</name></name> <operator pos:start="191:24" pos:end="191:24">&amp;</operator> <name pos:start="191:26" pos:end="191:41">MIPS_HFLAG_BMASK</name></expr>)</condition> <block pos:start="191:44" pos:end="205:9">{<block_content pos:start="193:13" pos:end="203:13">

            <if_stmt pos:start="193:13" pos:end="203:13"><if pos:start="193:13" pos:end="203:13">if <condition pos:start="193:16" pos:end="195:53">(<expr pos:start="193:17" pos:end="195:52"><operator pos:start="193:17" pos:end="193:17">!</operator><operator pos:start="193:18" pos:end="193:18">(</operator><name pos:start="193:19" pos:end="193:28"><name pos:start="193:19" pos:end="193:21">ctx</name><operator pos:start="193:22" pos:end="193:22">.</operator><name pos:start="193:23" pos:end="193:28">hflags</name></name> <operator pos:start="193:30" pos:end="193:30">&amp;</operator> <operator pos:start="193:32" pos:end="193:32">(</operator><name pos:start="193:33" pos:end="193:48">MIPS_HFLAG_BDS16</name> <operator pos:start="193:50" pos:end="193:50">|</operator> <name pos:start="193:52" pos:end="193:67">MIPS_HFLAG_BDS32</name> <operator pos:start="193:69" pos:end="193:69">|</operator>

                                <name pos:start="195:33" pos:end="195:50">MIPS_HFLAG_FBNSLOT</name><operator pos:start="195:51" pos:end="195:51">)</operator><operator pos:start="195:52" pos:end="195:52">)</operator></expr>)</condition> <block pos:start="195:55" pos:end="203:13">{<block_content pos:start="201:17" pos:end="201:28">

                <comment type="block" pos:start="197:17" pos:end="199:36">/* force to generate branch as there is neither delay nor

                   forbidden slot */</comment>

                <expr_stmt pos:start="201:17" pos:end="201:28"><expr pos:start="201:17" pos:end="201:27"><name pos:start="201:17" pos:end="201:23">is_slot</name> <operator pos:start="201:25" pos:end="201:25">=</operator> <literal type="number" pos:start="201:27" pos:end="201:27">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="207:9" pos:end="211:9"><if pos:start="207:9" pos:end="211:9">if <condition pos:start="207:12" pos:end="207:20">(<expr pos:start="207:13" pos:end="207:19"><name pos:start="207:13" pos:end="207:19">is_slot</name></expr>)</condition> <block pos:start="207:22" pos:end="211:9">{<block_content pos:start="209:13" pos:end="209:41">

            <expr_stmt pos:start="209:13" pos:end="209:41"><expr pos:start="209:13" pos:end="209:40"><call pos:start="209:13" pos:end="209:40"><name pos:start="209:13" pos:end="209:22">gen_branch</name><argument_list pos:start="209:23" pos:end="209:40">(<argument pos:start="209:24" pos:end="209:27"><expr pos:start="209:24" pos:end="209:27"><operator pos:start="209:24" pos:end="209:24">&amp;</operator><name pos:start="209:25" pos:end="209:27">ctx</name></expr></argument>, <argument pos:start="209:30" pos:end="209:39"><expr pos:start="209:30" pos:end="209:39"><name pos:start="209:30" pos:end="209:39">insn_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:29"><expr pos:start="213:9" pos:end="213:28"><name pos:start="213:9" pos:end="213:14"><name pos:start="213:9" pos:end="213:11">ctx</name><operator pos:start="213:12" pos:end="213:12">.</operator><name pos:start="213:13" pos:end="213:14">pc</name></name> <operator pos:start="213:16" pos:end="213:17">+=</operator> <name pos:start="213:19" pos:end="213:28">insn_bytes</name></expr>;</expr_stmt>



        <expr_stmt pos:start="217:9" pos:end="217:20"><expr pos:start="217:9" pos:end="217:19"><name pos:start="217:9" pos:end="217:17">num_insns</name><operator pos:start="217:18" pos:end="217:19">++</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="221:9" pos:end="227:52">/* Execute a branch and its delay slot as a single instruction.

           This is what GDB expects and is consistent with what the

           hardware does (e.g. if a delay slot instruction faults, the

           reported PC is the PC of the branch).  */</comment>

        <if_stmt pos:start="229:9" pos:end="233:9"><if pos:start="229:9" pos:end="233:9">if <condition pos:start="229:12" pos:end="229:75">(<expr pos:start="229:13" pos:end="229:74"><name pos:start="229:13" pos:end="229:34"><name pos:start="229:13" pos:end="229:14">cs</name><operator pos:start="229:15" pos:end="229:16">-&gt;</operator><name pos:start="229:17" pos:end="229:34">singlestep_enabled</name></name> <operator pos:start="229:36" pos:end="229:37">&amp;&amp;</operator> <operator pos:start="229:39" pos:end="229:39">(</operator><name pos:start="229:40" pos:end="229:49"><name pos:start="229:40" pos:end="229:42">ctx</name><operator pos:start="229:43" pos:end="229:43">.</operator><name pos:start="229:44" pos:end="229:49">hflags</name></name> <operator pos:start="229:51" pos:end="229:51">&amp;</operator> <name pos:start="229:53" pos:end="229:68">MIPS_HFLAG_BMASK</name><operator pos:start="229:69" pos:end="229:69">)</operator> <operator pos:start="229:71" pos:end="229:72">==</operator> <literal type="number" pos:start="229:74" pos:end="229:74">0</literal></expr>)</condition> <block pos:start="229:77" pos:end="233:9">{<block_content pos:start="231:13" pos:end="231:18">

            <break pos:start="231:13" pos:end="231:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="237:9" pos:end="239:18"><if pos:start="237:9" pos:end="239:18">if <condition pos:start="237:12" pos:end="237:51">(<expr pos:start="237:13" pos:end="237:50"><operator pos:start="237:13" pos:end="237:13">(</operator><name pos:start="237:14" pos:end="237:19"><name pos:start="237:14" pos:end="237:16">ctx</name><operator pos:start="237:17" pos:end="237:17">.</operator><name pos:start="237:18" pos:end="237:19">pc</name></name> <operator pos:start="237:21" pos:end="237:21">&amp;</operator> <operator pos:start="237:23" pos:end="237:23">(</operator><name pos:start="237:24" pos:end="237:39">TARGET_PAGE_SIZE</name> <operator pos:start="237:41" pos:end="237:41">-</operator> <literal type="number" pos:start="237:43" pos:end="237:43">1</literal><operator pos:start="237:44" pos:end="237:44">)</operator><operator pos:start="237:45" pos:end="237:45">)</operator> <operator pos:start="237:47" pos:end="237:48">==</operator> <literal type="number" pos:start="237:50" pos:end="237:50">0</literal></expr>)</condition><block type="pseudo" pos:start="239:13" pos:end="239:18"><block_content pos:start="239:13" pos:end="239:18">

            <break pos:start="239:13" pos:end="239:18">break;</break></block_content></block></if></if_stmt>



        <if_stmt pos:start="243:9" pos:end="247:9"><if pos:start="243:9" pos:end="247:9">if <condition pos:start="243:12" pos:end="243:47">(<expr pos:start="243:13" pos:end="243:46"><name pos:start="243:13" pos:end="243:31"><name pos:start="243:13" pos:end="243:19">tcg_ctx</name><operator pos:start="243:20" pos:end="243:20">.</operator><name pos:start="243:21" pos:end="243:31">gen_opc_ptr</name></name> <operator pos:start="243:33" pos:end="243:34">&gt;=</operator> <name pos:start="243:36" pos:end="243:46">gen_opc_end</name></expr>)</condition> <block pos:start="243:49" pos:end="247:9">{<block_content pos:start="245:13" pos:end="245:18">

            <break pos:start="245:13" pos:end="245:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="251:9" pos:end="253:18"><if pos:start="251:9" pos:end="253:18">if <condition pos:start="251:12" pos:end="251:35">(<expr pos:start="251:13" pos:end="251:34"><name pos:start="251:13" pos:end="251:21">num_insns</name> <operator pos:start="251:23" pos:end="251:24">&gt;=</operator> <name pos:start="251:26" pos:end="251:34">max_insns</name></expr>)</condition><block type="pseudo" pos:start="253:13" pos:end="253:18"><block_content pos:start="253:13" pos:end="253:18">

            <break pos:start="253:13" pos:end="253:18">break;</break></block_content></block></if></if_stmt>



        <if_stmt pos:start="257:9" pos:end="259:18"><if pos:start="257:9" pos:end="259:18">if <condition pos:start="257:12" pos:end="257:23">(<expr pos:start="257:13" pos:end="257:22"><name pos:start="257:13" pos:end="257:22">singlestep</name></expr>)</condition><block type="pseudo" pos:start="259:13" pos:end="259:18"><block_content pos:start="259:13" pos:end="259:18">

            <break pos:start="259:13" pos:end="259:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="263:5" pos:end="267:5"><if pos:start="263:5" pos:end="267:5">if <condition pos:start="263:8" pos:end="263:32">(<expr pos:start="263:9" pos:end="263:31"><name pos:start="263:9" pos:end="263:18"><name pos:start="263:9" pos:end="263:10">tb</name><operator pos:start="263:11" pos:end="263:12">-&gt;</operator><name pos:start="263:13" pos:end="263:18">cflags</name></name> <operator pos:start="263:20" pos:end="263:20">&amp;</operator> <name pos:start="263:22" pos:end="263:31">CF_LAST_IO</name></expr>)</condition> <block pos:start="263:34" pos:end="267:5">{<block_content pos:start="265:9" pos:end="265:21">

        <expr_stmt pos:start="265:9" pos:end="265:21"><expr pos:start="265:9" pos:end="265:20"><call pos:start="265:9" pos:end="265:20"><name pos:start="265:9" pos:end="265:18">gen_io_end</name><argument_list pos:start="265:19" pos:end="265:20">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="269:5" pos:end="307:5"><if pos:start="269:5" pos:end="275:5">if <condition pos:start="269:8" pos:end="269:58">(<expr pos:start="269:9" pos:end="269:57"><name pos:start="269:9" pos:end="269:30"><name pos:start="269:9" pos:end="269:10">cs</name><operator pos:start="269:11" pos:end="269:12">-&gt;</operator><name pos:start="269:13" pos:end="269:30">singlestep_enabled</name></name> <operator pos:start="269:32" pos:end="269:33">&amp;&amp;</operator> <name pos:start="269:35" pos:end="269:44"><name pos:start="269:35" pos:end="269:37">ctx</name><operator pos:start="269:38" pos:end="269:38">.</operator><name pos:start="269:39" pos:end="269:44">bstate</name></name> <operator pos:start="269:46" pos:end="269:47">!=</operator> <name pos:start="269:49" pos:end="269:57">BS_BRANCH</name></expr>)</condition> <block pos:start="269:60" pos:end="275:5">{<block_content pos:start="271:9" pos:end="273:53">

        <expr_stmt pos:start="271:9" pos:end="271:52"><expr pos:start="271:9" pos:end="271:51"><call pos:start="271:9" pos:end="271:51"><name pos:start="271:9" pos:end="271:22">save_cpu_state</name><argument_list pos:start="271:23" pos:end="271:51">(<argument pos:start="271:24" pos:end="271:27"><expr pos:start="271:24" pos:end="271:27"><operator pos:start="271:24" pos:end="271:24">&amp;</operator><name pos:start="271:25" pos:end="271:27">ctx</name></expr></argument>, <argument pos:start="271:30" pos:end="271:50"><expr pos:start="271:30" pos:end="271:50"><name pos:start="271:30" pos:end="271:39"><name pos:start="271:30" pos:end="271:32">ctx</name><operator pos:start="271:33" pos:end="271:33">.</operator><name pos:start="271:34" pos:end="271:39">bstate</name></name> <operator pos:start="271:41" pos:end="271:42">==</operator> <name pos:start="271:44" pos:end="271:50">BS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:53"><expr pos:start="273:9" pos:end="273:52"><call pos:start="273:9" pos:end="273:52"><name pos:start="273:9" pos:end="273:23">gen_helper_0e0i</name><argument_list pos:start="273:24" pos:end="273:52">(<argument pos:start="273:25" pos:end="273:39"><expr pos:start="273:25" pos:end="273:39"><name pos:start="273:25" pos:end="273:39">raise_exception</name></expr></argument>, <argument pos:start="273:42" pos:end="273:51"><expr pos:start="273:42" pos:end="273:51"><name pos:start="273:42" pos:end="273:51">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="275:7" pos:end="307:5">else <block pos:start="275:12" pos:end="307:5">{<block_content pos:start="277:9" pos:end="305:9">

        <switch pos:start="277:9" pos:end="305:9">switch <condition pos:start="277:16" pos:end="277:27">(<expr pos:start="277:17" pos:end="277:26"><name pos:start="277:17" pos:end="277:26"><name pos:start="277:17" pos:end="277:19">ctx</name><operator pos:start="277:20" pos:end="277:20">.</operator><name pos:start="277:21" pos:end="277:26">bstate</name></name></expr>)</condition> <block pos:start="277:29" pos:end="305:9">{<block_content pos:start="279:9" pos:end="303:18">

        <case pos:start="279:9" pos:end="279:21">case <expr pos:start="279:14" pos:end="279:20"><name pos:start="279:14" pos:end="279:20">BS_STOP</name></expr>:</case>

            <expr_stmt pos:start="281:13" pos:end="281:41"><expr pos:start="281:13" pos:end="281:40"><call pos:start="281:13" pos:end="281:40"><name pos:start="281:13" pos:end="281:23">gen_goto_tb</name><argument_list pos:start="281:24" pos:end="281:40">(<argument pos:start="281:25" pos:end="281:28"><expr pos:start="281:25" pos:end="281:28"><operator pos:start="281:25" pos:end="281:25">&amp;</operator><name pos:start="281:26" pos:end="281:28">ctx</name></expr></argument>, <argument pos:start="281:31" pos:end="281:31"><expr pos:start="281:31" pos:end="281:31"><literal type="number" pos:start="281:31" pos:end="281:31">0</literal></expr></argument>, <argument pos:start="281:34" pos:end="281:39"><expr pos:start="281:34" pos:end="281:39"><name pos:start="281:34" pos:end="281:39"><name pos:start="281:34" pos:end="281:36">ctx</name><operator pos:start="281:37" pos:end="281:37">.</operator><name pos:start="281:38" pos:end="281:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="283:13" pos:end="283:18">break;</break>

        <case pos:start="285:9" pos:end="285:21">case <expr pos:start="285:14" pos:end="285:20"><name pos:start="285:14" pos:end="285:20">BS_NONE</name></expr>:</case>

            <expr_stmt pos:start="287:13" pos:end="287:36"><expr pos:start="287:13" pos:end="287:35"><call pos:start="287:13" pos:end="287:35"><name pos:start="287:13" pos:end="287:26">save_cpu_state</name><argument_list pos:start="287:27" pos:end="287:35">(<argument pos:start="287:28" pos:end="287:31"><expr pos:start="287:28" pos:end="287:31"><operator pos:start="287:28" pos:end="287:28">&amp;</operator><name pos:start="287:29" pos:end="287:31">ctx</name></expr></argument>, <argument pos:start="287:34" pos:end="287:34"><expr pos:start="287:34" pos:end="287:34"><literal type="number" pos:start="287:34" pos:end="287:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:41"><expr pos:start="289:13" pos:end="289:40"><call pos:start="289:13" pos:end="289:40"><name pos:start="289:13" pos:end="289:23">gen_goto_tb</name><argument_list pos:start="289:24" pos:end="289:40">(<argument pos:start="289:25" pos:end="289:28"><expr pos:start="289:25" pos:end="289:28"><operator pos:start="289:25" pos:end="289:25">&amp;</operator><name pos:start="289:26" pos:end="289:28">ctx</name></expr></argument>, <argument pos:start="289:31" pos:end="289:31"><expr pos:start="289:31" pos:end="289:31"><literal type="number" pos:start="289:31" pos:end="289:31">0</literal></expr></argument>, <argument pos:start="289:34" pos:end="289:39"><expr pos:start="289:34" pos:end="289:39"><name pos:start="289:34" pos:end="289:39"><name pos:start="289:34" pos:end="289:36">ctx</name><operator pos:start="289:37" pos:end="289:37">.</operator><name pos:start="289:38" pos:end="289:39">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="291:13" pos:end="291:18">break;</break>

        <case pos:start="293:9" pos:end="293:21">case <expr pos:start="293:14" pos:end="293:20"><name pos:start="293:14" pos:end="293:20">BS_EXCP</name></expr>:</case>

            <expr_stmt pos:start="295:13" pos:end="295:31"><expr pos:start="295:13" pos:end="295:30"><call pos:start="295:13" pos:end="295:30"><name pos:start="295:13" pos:end="295:27">tcg_gen_exit_tb</name><argument_list pos:start="295:28" pos:end="295:30">(<argument pos:start="295:29" pos:end="295:29"><expr pos:start="295:29" pos:end="295:29"><literal type="number" pos:start="295:29" pos:end="295:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="297:13" pos:end="297:18">break;</break>

        <case pos:start="299:9" pos:end="299:23">case <expr pos:start="299:14" pos:end="299:22"><name pos:start="299:14" pos:end="299:22">BS_BRANCH</name></expr>:</case>

        <default pos:start="301:9" pos:end="301:16">default:</default>

            <break pos:start="303:13" pos:end="303:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

<label pos:start="309:1" pos:end="309:16"><name pos:start="309:1" pos:end="309:15">done_generating</name>:</label>

    <expr_stmt pos:start="311:5" pos:end="311:30"><expr pos:start="311:5" pos:end="311:29"><call pos:start="311:5" pos:end="311:29"><name pos:start="311:5" pos:end="311:14">gen_tb_end</name><argument_list pos:start="311:15" pos:end="311:29">(<argument pos:start="311:16" pos:end="311:17"><expr pos:start="311:16" pos:end="311:17"><name pos:start="311:16" pos:end="311:17">tb</name></expr></argument>, <argument pos:start="311:20" pos:end="311:28"><expr pos:start="311:20" pos:end="311:28"><name pos:start="311:20" pos:end="311:28">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="313:5" pos:end="313:40"><expr pos:start="313:5" pos:end="313:39"><operator pos:start="313:5" pos:end="313:5">*</operator><name pos:start="313:6" pos:end="313:24"><name pos:start="313:6" pos:end="313:12">tcg_ctx</name><operator pos:start="313:13" pos:end="313:13">.</operator><name pos:start="313:14" pos:end="313:24">gen_opc_ptr</name></name> <operator pos:start="313:26" pos:end="313:26">=</operator> <name pos:start="313:28" pos:end="313:39">INDEX_op_end</name></expr>;</expr_stmt>

    <if_stmt pos:start="315:5" pos:end="334:0"><if pos:start="315:5" pos:end="325:5">if <condition pos:start="315:8" pos:end="315:18">(<expr pos:start="315:9" pos:end="315:17"><name pos:start="315:9" pos:end="315:17">search_pc</name></expr>)</condition> <block pos:start="315:20" pos:end="325:5">{<block_content pos:start="317:9" pos:end="323:50">

        <expr_stmt pos:start="317:9" pos:end="317:54"><expr pos:start="317:9" pos:end="317:53"><name pos:start="317:9" pos:end="317:9">j</name> <operator pos:start="317:11" pos:end="317:11">=</operator> <name pos:start="317:13" pos:end="317:31"><name pos:start="317:13" pos:end="317:19">tcg_ctx</name><operator pos:start="317:20" pos:end="317:20">.</operator><name pos:start="317:21" pos:end="317:31">gen_opc_ptr</name></name> <operator pos:start="317:33" pos:end="317:33">-</operator> <name pos:start="317:35" pos:end="317:53"><name pos:start="317:35" pos:end="317:41">tcg_ctx</name><operator pos:start="317:42" pos:end="317:42">.</operator><name pos:start="317:43" pos:end="317:53">gen_opc_buf</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:13"><expr pos:start="319:9" pos:end="319:12"><name pos:start="319:9" pos:end="319:10">lj</name><operator pos:start="319:11" pos:end="319:12">++</operator></expr>;</expr_stmt>

        <while pos:start="321:9" pos:end="323:50">while <condition pos:start="321:15" pos:end="321:23">(<expr pos:start="321:16" pos:end="321:22"><name pos:start="321:16" pos:end="321:17">lj</name> <operator pos:start="321:19" pos:end="321:20">&lt;=</operator> <name pos:start="321:22" pos:end="321:22">j</name></expr>)</condition><block type="pseudo" pos:start="323:13" pos:end="323:50"><block_content pos:start="323:13" pos:end="323:50">

            <expr_stmt pos:start="323:13" pos:end="323:50"><expr pos:start="323:13" pos:end="323:49"><name pos:start="323:13" pos:end="323:45"><name pos:start="323:13" pos:end="323:19">tcg_ctx</name><operator pos:start="323:20" pos:end="323:20">.</operator><name pos:start="323:21" pos:end="323:39">gen_opc_instr_start</name><index pos:start="323:40" pos:end="323:45">[<expr pos:start="323:41" pos:end="323:44"><name pos:start="323:41" pos:end="323:42">lj</name><operator pos:start="323:43" pos:end="323:44">++</operator></expr>]</index></name> <operator pos:start="323:47" pos:end="323:47">=</operator> <literal type="number" pos:start="323:49" pos:end="323:49">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if> <else pos:start="325:7" pos:end="334:0">else <block pos:start="325:12" pos:end="334:0">{<block_content pos:start="327:9" pos:end="329:31">

        <expr_stmt pos:start="327:9" pos:end="327:37"><expr pos:start="327:9" pos:end="327:36"><name pos:start="327:9" pos:end="327:16"><name pos:start="327:9" pos:end="327:10">tb</name><operator pos:start="327:11" pos:end="327:12">-&gt;</operator><name pos:start="327:13" pos:end="327:16">size</name></name> <operator pos:start="327:18" pos:end="327:18">=</operator> <name pos:start="327:20" pos:end="327:25"><name pos:start="327:20" pos:end="327:22">ctx</name><operator pos:start="327:23" pos:end="327:23">.</operator><name pos:start="327:24" pos:end="327:25">pc</name></name> <operator pos:start="327:27" pos:end="327:27">-</operator> <name pos:start="327:29" pos:end="327:36">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:31"><expr pos:start="329:9" pos:end="329:30"><name pos:start="329:9" pos:end="329:18"><name pos:start="329:9" pos:end="329:10">tb</name><operator pos:start="329:11" pos:end="329:12">-&gt;</operator><name pos:start="329:13" pos:end="329:18">icount</name></name> <operator pos:start="329:20" pos:end="329:20">=</operator> <name pos:start="329:22" pos:end="329:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="333:1" pos:end="333:18">#<cpp:directive pos:start="333:2" pos:end="333:6">ifdef</cpp:directive> <name pos:start="333:8" pos:end="333:18">DEBUG_DISAS</name></cpp:ifdef>

    <expr_stmt pos:start="335:5" pos:end="335:20"><expr pos:start="335:5" pos:end="335:19"><call pos:start="335:5" pos:end="335:19"><name pos:start="335:5" pos:end="335:13">LOG_DISAS</name><argument_list pos:start="335:14" pos:end="335:19">(<argument pos:start="335:15" pos:end="335:18"><expr pos:start="335:15" pos:end="335:18"><literal type="string" pos:start="335:15" pos:end="335:18">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="337:5" pos:end="348:0"><if pos:start="337:5" pos:end="348:0">if <condition pos:start="337:8" pos:end="337:46">(<expr pos:start="337:9" pos:end="337:45"><call pos:start="337:9" pos:end="337:45"><name pos:start="337:9" pos:end="337:26">qemu_loglevel_mask</name><argument_list pos:start="337:27" pos:end="337:45">(<argument pos:start="337:28" pos:end="337:44"><expr pos:start="337:28" pos:end="337:44"><name pos:start="337:28" pos:end="337:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="337:48" pos:end="348:0">{<block_content pos:start="339:9" pos:end="343:23">

        <expr_stmt pos:start="339:9" pos:end="339:54"><expr pos:start="339:9" pos:end="339:53"><call pos:start="339:9" pos:end="339:53"><name pos:start="339:9" pos:end="339:16">qemu_log</name><argument_list pos:start="339:17" pos:end="339:53">(<argument pos:start="339:18" pos:end="339:27"><expr pos:start="339:18" pos:end="339:27"><literal type="string" pos:start="339:18" pos:end="339:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="339:30" pos:end="339:52"><expr pos:start="339:30" pos:end="339:52"><call pos:start="339:30" pos:end="339:52"><name pos:start="339:30" pos:end="339:42">lookup_symbol</name><argument_list pos:start="339:43" pos:end="339:52">(<argument pos:start="339:44" pos:end="339:51"><expr pos:start="339:44" pos:end="339:51"><name pos:start="339:44" pos:end="339:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:62"><expr pos:start="341:9" pos:end="341:61"><call pos:start="341:9" pos:end="341:61"><name pos:start="341:9" pos:end="341:24">log_target_disas</name><argument_list pos:start="341:25" pos:end="341:61">(<argument pos:start="341:26" pos:end="341:28"><expr pos:start="341:26" pos:end="341:28"><name pos:start="341:26" pos:end="341:28">env</name></expr></argument>, <argument pos:start="341:31" pos:end="341:38"><expr pos:start="341:31" pos:end="341:38"><name pos:start="341:31" pos:end="341:38">pc_start</name></expr></argument>, <argument pos:start="341:41" pos:end="341:57"><expr pos:start="341:41" pos:end="341:57"><name pos:start="341:41" pos:end="341:46"><name pos:start="341:41" pos:end="341:43">ctx</name><operator pos:start="341:44" pos:end="341:44">.</operator><name pos:start="341:45" pos:end="341:46">pc</name></name> <operator pos:start="341:48" pos:end="341:48">-</operator> <name pos:start="341:50" pos:end="341:57">pc_start</name></expr></argument>, <argument pos:start="341:60" pos:end="341:60"><expr pos:start="341:60" pos:end="341:60"><literal type="number" pos:start="341:60" pos:end="341:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:23"><expr pos:start="343:9" pos:end="343:22"><call pos:start="343:9" pos:end="343:22"><name pos:start="343:9" pos:end="343:16">qemu_log</name><argument_list pos:start="343:17" pos:end="343:22">(<argument pos:start="343:18" pos:end="343:21"><expr pos:start="343:18" pos:end="343:21"><literal type="string" pos:start="343:18" pos:end="343:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="347:1" pos:end="347:6">#<cpp:directive pos:start="347:2" pos:end="347:6">endif</cpp:directive></cpp:endif>

</block_content>}</block>
</unit>
