<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10576.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">open_self_cmdline</name><parameter_list pos:start="1:29" pos:end="1:51">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:42">cpu_env</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:50"><decl pos:start="1:45" pos:end="1:50"><type pos:start="1:45" pos:end="1:50"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:50">fd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:26">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:15">fd_orig</name> <init pos:start="5:17" pos:end="5:20">= <expr pos:start="5:19" pos:end="5:20"><operator pos:start="5:19" pos:end="5:19">-</operator><literal type="number" pos:start="5:20" pos:end="5:20">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:21">word_skipped</name> <init pos:start="7:23" pos:end="7:29">= <expr pos:start="7:25" pos:end="7:29"><name pos:start="7:25" pos:end="7:29">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:51"><expr pos:start="11:5" pos:end="11:50"><name pos:start="11:5" pos:end="11:11">fd_orig</name> <operator pos:start="11:13" pos:end="11:13">=</operator> <call pos:start="11:15" pos:end="11:50"><name pos:start="11:15" pos:end="11:18">open</name><argument_list pos:start="11:19" pos:end="11:50">(<argument pos:start="11:20" pos:end="11:39"><expr pos:start="11:20" pos:end="11:39"><literal type="string" pos:start="11:20" pos:end="11:39">"/proc/self/cmdline"</literal></expr></argument>, <argument pos:start="11:42" pos:end="11:49"><expr pos:start="11:42" pos:end="11:49"><name pos:start="11:42" pos:end="11:49">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:20">(<expr pos:start="13:9" pos:end="13:19"><name pos:start="13:9" pos:end="13:15">fd_orig</name> <operator pos:start="13:17" pos:end="13:17">&lt;</operator> <literal type="number" pos:start="13:19" pos:end="13:19">0</literal></expr>)</condition> <block pos:start="13:22" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:23">

        <return pos:start="15:9" pos:end="15:23">return <expr pos:start="15:16" pos:end="15:22"><name pos:start="15:16" pos:end="15:22">fd_orig</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="21:5" pos:end="91:5">while <condition pos:start="21:11" pos:end="21:16">(<expr pos:start="21:12" pos:end="21:15"><name pos:start="21:12" pos:end="21:15">true</name></expr>)</condition> <block pos:start="21:18" pos:end="91:5">{<block_content pos:start="23:9" pos:end="89:9">

        <decl_stmt pos:start="23:9" pos:end="23:24"><decl pos:start="23:9" pos:end="23:23"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:15">ssize_t</name></type> <name pos:start="23:17" pos:end="23:23">nb_read</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:22"><decl pos:start="25:9" pos:end="25:21"><type pos:start="25:9" pos:end="25:12"><name pos:start="25:9" pos:end="25:12">char</name></type> <name pos:start="25:14" pos:end="25:21"><name pos:start="25:14" pos:end="25:16">buf</name><index pos:start="25:17" pos:end="25:21">[<expr pos:start="25:18" pos:end="25:20"><literal type="number" pos:start="25:18" pos:end="25:20">128</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:27"><decl pos:start="27:9" pos:end="27:26"><type pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:12">char</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:20">cp_buf</name> <init pos:start="27:22" pos:end="27:26">= <expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:26">buf</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="31:9" pos:end="31:50"><expr pos:start="31:9" pos:end="31:49"><name pos:start="31:9" pos:end="31:15">nb_read</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:49"><name pos:start="31:19" pos:end="31:22">read</name><argument_list pos:start="31:23" pos:end="31:49">(<argument pos:start="31:24" pos:end="31:30"><expr pos:start="31:24" pos:end="31:30"><name pos:start="31:24" pos:end="31:30">fd_orig</name></expr></argument>, <argument pos:start="31:33" pos:end="31:35"><expr pos:start="31:33" pos:end="31:35"><name pos:start="31:33" pos:end="31:35">buf</name></expr></argument>, <argument pos:start="31:38" pos:end="31:48"><expr pos:start="31:38" pos:end="31:48"><sizeof pos:start="31:38" pos:end="31:48">sizeof<argument_list pos:start="31:44" pos:end="31:48">(<argument pos:start="31:45" pos:end="31:47"><expr pos:start="31:45" pos:end="31:47"><name pos:start="31:45" pos:end="31:47">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="47:9"><if pos:start="33:9" pos:end="43:9">if <condition pos:start="33:12" pos:end="33:24">(<expr pos:start="33:13" pos:end="33:23"><name pos:start="33:13" pos:end="33:19">nb_read</name> <operator pos:start="33:21" pos:end="33:21">&lt;</operator> <literal type="number" pos:start="33:23" pos:end="33:23">0</literal></expr>)</condition> <block pos:start="33:26" pos:end="43:9">{<block_content pos:start="35:13" pos:end="41:22">

            <decl_stmt pos:start="35:13" pos:end="35:26"><decl pos:start="35:13" pos:end="35:25"><type pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">int</name></type> <name pos:start="35:17" pos:end="35:17">e</name> <init pos:start="35:19" pos:end="35:25">= <expr pos:start="35:21" pos:end="35:25"><name pos:start="35:21" pos:end="35:25">errno</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:37"><expr pos:start="37:13" pos:end="37:36"><name pos:start="37:13" pos:end="37:19">fd_orig</name> <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:36"><name pos:start="37:23" pos:end="37:27">close</name><argument_list pos:start="37:28" pos:end="37:36">(<argument pos:start="37:29" pos:end="37:35"><expr pos:start="37:29" pos:end="37:35"><name pos:start="37:29" pos:end="37:35">fd_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:22"><expr pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:17">errno</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:21">e</name></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:22">return <expr pos:start="41:20" pos:end="41:21"><operator pos:start="41:20" pos:end="41:20">-</operator><literal type="number" pos:start="41:21" pos:end="41:21">1</literal></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="43:11" pos:end="47:9">else if <condition pos:start="43:19" pos:end="43:32">(<expr pos:start="43:20" pos:end="43:31"><name pos:start="43:20" pos:end="43:26">nb_read</name> <operator pos:start="43:28" pos:end="43:29">==</operator> <literal type="number" pos:start="43:31" pos:end="43:31">0</literal></expr>)</condition> <block pos:start="43:34" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:18">

            <break pos:start="45:13" pos:end="45:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="51:9" pos:end="71:9"><if pos:start="51:9" pos:end="71:9">if <condition pos:start="51:12" pos:end="51:26">(<expr pos:start="51:13" pos:end="51:25"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:25">word_skipped</name></expr>)</condition> <block pos:start="51:28" pos:end="71:9">{<block_content pos:start="57:13" pos:end="69:13">

            <comment type="block" pos:start="53:13" pos:end="55:48">/* Skip the first string, which is the path to qemu-*-static

               instead of the actual command. */</comment>

            <expr_stmt pos:start="57:13" pos:end="57:49"><expr pos:start="57:13" pos:end="57:48"><name pos:start="57:13" pos:end="57:18">cp_buf</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <call pos:start="57:22" pos:end="57:48"><name pos:start="57:22" pos:end="57:27">memchr</name><argument_list pos:start="57:28" pos:end="57:48">(<argument pos:start="57:29" pos:end="57:31"><expr pos:start="57:29" pos:end="57:31"><name pos:start="57:29" pos:end="57:31">buf</name></expr></argument>, <argument pos:start="57:34" pos:end="57:34"><expr pos:start="57:34" pos:end="57:34"><literal type="number" pos:start="57:34" pos:end="57:34">0</literal></expr></argument>, <argument pos:start="57:37" pos:end="57:47"><expr pos:start="57:37" pos:end="57:47"><sizeof pos:start="57:37" pos:end="57:47">sizeof<argument_list pos:start="57:43" pos:end="57:47">(<argument pos:start="57:44" pos:end="57:46"><expr pos:start="57:44" pos:end="57:46"><name pos:start="57:44" pos:end="57:46">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="69:13"><if pos:start="59:13" pos:end="69:13">if <condition pos:start="59:16" pos:end="59:23">(<expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">cp_buf</name></expr>)</condition> <block pos:start="59:25" pos:end="69:13">{<block_content pos:start="63:17" pos:end="67:36">

                <comment type="block" pos:start="61:17" pos:end="61:54">/* Null byte found, skip one string */</comment>

                <expr_stmt pos:start="63:17" pos:end="63:25"><expr pos:start="63:17" pos:end="63:24"><name pos:start="63:17" pos:end="63:22">cp_buf</name><operator pos:start="63:23" pos:end="63:24">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:40"><expr pos:start="65:17" pos:end="65:39"><name pos:start="65:17" pos:end="65:23">nb_read</name> <operator pos:start="65:25" pos:end="65:26">-=</operator> <name pos:start="65:28" pos:end="65:33">cp_buf</name> <operator pos:start="65:35" pos:end="65:35">-</operator> <name pos:start="65:37" pos:end="65:39">buf</name></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:36"><expr pos:start="67:17" pos:end="67:35"><name pos:start="67:17" pos:end="67:28">word_skipped</name> <operator pos:start="67:30" pos:end="67:30">=</operator> <name pos:start="67:32" pos:end="67:35">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="75:9" pos:end="89:9"><if pos:start="75:9" pos:end="89:9">if <condition pos:start="75:12" pos:end="75:25">(<expr pos:start="75:13" pos:end="75:24"><name pos:start="75:13" pos:end="75:24">word_skipped</name></expr>)</condition> <block pos:start="75:27" pos:end="89:9">{<block_content pos:start="77:13" pos:end="87:13">

            <if_stmt pos:start="77:13" pos:end="87:13"><if pos:start="77:13" pos:end="87:13">if <condition pos:start="77:16" pos:end="77:54">(<expr pos:start="77:17" pos:end="77:53"><call pos:start="77:17" pos:end="77:42"><name pos:start="77:17" pos:end="77:21">write</name><argument_list pos:start="77:22" pos:end="77:42">(<argument pos:start="77:23" pos:end="77:24"><expr pos:start="77:23" pos:end="77:24"><name pos:start="77:23" pos:end="77:24">fd</name></expr></argument>, <argument pos:start="77:27" pos:end="77:32"><expr pos:start="77:27" pos:end="77:32"><name pos:start="77:27" pos:end="77:32">cp_buf</name></expr></argument>, <argument pos:start="77:35" pos:end="77:41"><expr pos:start="77:35" pos:end="77:41"><name pos:start="77:35" pos:end="77:41">nb_read</name></expr></argument>)</argument_list></call> <operator pos:start="77:44" pos:end="77:45">!=</operator> <name pos:start="77:47" pos:end="77:53">nb_read</name></expr>)</condition> <block pos:start="77:56" pos:end="87:13">{<block_content pos:start="79:17" pos:end="85:26">

                <decl_stmt pos:start="79:17" pos:end="79:30"><decl pos:start="79:17" pos:end="79:29"><type pos:start="79:17" pos:end="79:19"><name pos:start="79:17" pos:end="79:19">int</name></type> <name pos:start="79:21" pos:end="79:21">e</name> <init pos:start="79:23" pos:end="79:29">= <expr pos:start="79:25" pos:end="79:29"><name pos:start="79:25" pos:end="79:29">errno</name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:31"><expr pos:start="81:17" pos:end="81:30"><call pos:start="81:17" pos:end="81:30"><name pos:start="81:17" pos:end="81:21">close</name><argument_list pos:start="81:22" pos:end="81:30">(<argument pos:start="81:23" pos:end="81:29"><expr pos:start="81:23" pos:end="81:29"><name pos:start="81:23" pos:end="81:29">fd_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:26"><expr pos:start="83:17" pos:end="83:25"><name pos:start="83:17" pos:end="83:21">errno</name> <operator pos:start="83:23" pos:end="83:23">=</operator> <name pos:start="83:25" pos:end="83:25">e</name></expr>;</expr_stmt>

                <return pos:start="85:17" pos:end="85:26">return <expr pos:start="85:24" pos:end="85:25"><operator pos:start="85:24" pos:end="85:24">-</operator><literal type="number" pos:start="85:25" pos:end="85:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <return pos:start="95:5" pos:end="95:26">return <expr pos:start="95:12" pos:end="95:25"><call pos:start="95:12" pos:end="95:25"><name pos:start="95:12" pos:end="95:16">close</name><argument_list pos:start="95:17" pos:end="95:25">(<argument pos:start="95:18" pos:end="95:24"><expr pos:start="95:18" pos:end="95:24"><name pos:start="95:18" pos:end="95:24">fd_orig</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
