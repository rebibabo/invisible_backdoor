<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14418.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">uhci_handle_td</name><parameter_list pos:start="1:26" pos:end="3:76">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:35">UHCIState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:49">UHCIQueue</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">q</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:70"><decl pos:start="1:55" pos:end="1:70"><type pos:start="1:55" pos:end="1:70"><name pos:start="1:55" pos:end="1:62">uint32_t</name></type> <name pos:start="1:64" pos:end="1:70">qh_addr</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:37"><decl pos:start="3:27" pos:end="3:37"><type pos:start="3:27" pos:end="3:37"><name pos:start="3:27" pos:end="3:33">UHCI_TD</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:37">td</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:55"><decl pos:start="3:40" pos:end="3:55"><type pos:start="3:40" pos:end="3:55"><name pos:start="3:40" pos:end="3:47">uint32_t</name></type> <name pos:start="3:49" pos:end="3:55">td_addr</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:75"><decl pos:start="3:58" pos:end="3:75"><type pos:start="3:58" pos:end="3:75"><name pos:start="3:58" pos:end="3:65">uint32_t</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:75">int_mask</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="225:1">{<block_content pos:start="7:5" pos:end="223:15">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>, <decl pos:start="7:18" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:24">max_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:12">spd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:16">queuing</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><operator pos:start="11:20" pos:end="11:20">(</operator><name pos:start="11:21" pos:end="11:21">q</name> <operator pos:start="11:23" pos:end="11:24">!=</operator> <name pos:start="11:26" pos:end="11:29">NULL</name><operator pos:start="11:30" pos:end="11:30">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:15">pid</name> <init pos:start="13:17" pos:end="13:34">= <expr pos:start="13:19" pos:end="13:34"><name pos:start="13:19" pos:end="13:27"><name pos:start="13:19" pos:end="13:20">td</name><operator pos:start="13:21" pos:end="13:22">-&gt;</operator><name pos:start="13:23" pos:end="13:27">token</name></name> <operator pos:start="13:29" pos:end="13:29">&amp;</operator> <literal type="number" pos:start="13:31" pos:end="13:34">0xff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:54"><decl pos:start="15:5" pos:end="15:53"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">UHCIAsync</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:20">async</name> <init pos:start="15:22" pos:end="15:53">= <expr pos:start="15:24" pos:end="15:53"><call pos:start="15:24" pos:end="15:53"><name pos:start="15:24" pos:end="15:41">uhci_async_find_td</name><argument_list pos:start="15:42" pos:end="15:53">(<argument pos:start="15:43" pos:end="15:43"><expr pos:start="15:43" pos:end="15:43"><name pos:start="15:43" pos:end="15:43">s</name></expr></argument>, <argument pos:start="15:46" pos:end="15:52"><expr pos:start="15:46" pos:end="15:52"><name pos:start="15:46" pos:end="15:52">td_addr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="35:5"><if pos:start="19:5" pos:end="35:5">if <condition pos:start="19:8" pos:end="19:14">(<expr pos:start="19:9" pos:end="19:13"><name pos:start="19:9" pos:end="19:13">async</name></expr>)</condition> <block pos:start="19:16" pos:end="35:5">{<block_content pos:start="21:9" pos:end="33:9">

        <if_stmt pos:start="21:9" pos:end="33:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:75">(<expr pos:start="21:13" pos:end="21:74"><call pos:start="21:13" pos:end="21:74"><name pos:start="21:13" pos:end="21:29">uhci_queue_verify</name><argument_list pos:start="21:30" pos:end="21:74">(<argument pos:start="21:31" pos:end="21:42"><expr pos:start="21:31" pos:end="21:42"><name pos:start="21:31" pos:end="21:42"><name pos:start="21:31" pos:end="21:35">async</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:42">queue</name></name></expr></argument>, <argument pos:start="21:45" pos:end="21:51"><expr pos:start="21:45" pos:end="21:51"><name pos:start="21:45" pos:end="21:51">qh_addr</name></expr></argument>, <argument pos:start="21:54" pos:end="21:55"><expr pos:start="21:54" pos:end="21:55"><name pos:start="21:54" pos:end="21:55">td</name></expr></argument>, <argument pos:start="21:58" pos:end="21:64"><expr pos:start="21:58" pos:end="21:64"><name pos:start="21:58" pos:end="21:64">td_addr</name></expr></argument>, <argument pos:start="21:67" pos:end="21:73"><expr pos:start="21:67" pos:end="21:73"><name pos:start="21:67" pos:end="21:73">queuing</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:77" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:29">

            <expr_stmt pos:start="23:13" pos:end="23:51"><expr pos:start="23:13" pos:end="23:50"><call pos:start="23:13" pos:end="23:50"><name pos:start="23:13" pos:end="23:18">assert</name><argument_list pos:start="23:19" pos:end="23:50">(<argument pos:start="23:20" pos:end="23:49"><expr pos:start="23:20" pos:end="23:49"><name pos:start="23:20" pos:end="23:20">q</name> <operator pos:start="23:22" pos:end="23:23">==</operator> <name pos:start="23:25" pos:end="23:28">NULL</name> <operator pos:start="23:30" pos:end="23:31">||</operator> <name pos:start="23:33" pos:end="23:33">q</name> <operator pos:start="23:35" pos:end="23:36">==</operator> <name pos:start="23:38" pos:end="23:49"><name pos:start="23:38" pos:end="23:42">async</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:49">queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:29"><expr pos:start="25:13" pos:end="25:28"><name pos:start="25:13" pos:end="25:13">q</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:28"><name pos:start="25:17" pos:end="25:21">async</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:28">queue</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="27:11" pos:end="33:9">else <block pos:start="27:16" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:25">

            <expr_stmt pos:start="29:13" pos:end="29:70"><expr pos:start="29:13" pos:end="29:69"><call pos:start="29:13" pos:end="29:69"><name pos:start="29:13" pos:end="29:27">uhci_queue_free</name><argument_list pos:start="29:28" pos:end="29:69">(<argument pos:start="29:29" pos:end="29:40"><expr pos:start="29:29" pos:end="29:40"><name pos:start="29:29" pos:end="29:40"><name pos:start="29:29" pos:end="29:33">async</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:40">queue</name></name></expr></argument>, <argument pos:start="29:43" pos:end="29:68"><expr pos:start="29:43" pos:end="29:68"><literal type="string" pos:start="29:43" pos:end="29:68">"guest re-used pending td"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:25"><expr pos:start="31:13" pos:end="31:24"><name pos:start="31:13" pos:end="31:17">async</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:24">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="51:5"><if pos:start="39:5" pos:end="51:5">if <condition pos:start="39:8" pos:end="39:18">(<expr pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:9">q</name> <operator pos:start="39:11" pos:end="39:12">==</operator> <name pos:start="39:14" pos:end="39:17">NULL</name></expr>)</condition> <block pos:start="39:20" pos:end="51:5">{<block_content pos:start="41:9" pos:end="49:9">

        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:9">q</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <call pos:start="41:13" pos:end="41:34"><name pos:start="41:13" pos:end="41:27">uhci_queue_find</name><argument_list pos:start="41:28" pos:end="41:34">(<argument pos:start="41:29" pos:end="41:29"><expr pos:start="41:29" pos:end="41:29"><name pos:start="41:29" pos:end="41:29">s</name></expr></argument>, <argument pos:start="41:32" pos:end="41:33"><expr pos:start="41:32" pos:end="41:33"><name pos:start="41:32" pos:end="41:33">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:70">(<expr pos:start="43:13" pos:end="43:69"><name pos:start="43:13" pos:end="43:13">q</name> <operator pos:start="43:15" pos:end="43:16">&amp;&amp;</operator> <operator pos:start="43:18" pos:end="43:18">!</operator><call pos:start="43:19" pos:end="43:69"><name pos:start="43:19" pos:end="43:35">uhci_queue_verify</name><argument_list pos:start="43:36" pos:end="43:69">(<argument pos:start="43:37" pos:end="43:37"><expr pos:start="43:37" pos:end="43:37"><name pos:start="43:37" pos:end="43:37">q</name></expr></argument>, <argument pos:start="43:40" pos:end="43:46"><expr pos:start="43:40" pos:end="43:46"><name pos:start="43:40" pos:end="43:46">qh_addr</name></expr></argument>, <argument pos:start="43:49" pos:end="43:50"><expr pos:start="43:49" pos:end="43:50"><name pos:start="43:49" pos:end="43:50">td</name></expr></argument>, <argument pos:start="43:53" pos:end="43:59"><expr pos:start="43:53" pos:end="43:59"><name pos:start="43:53" pos:end="43:59">td_addr</name></expr></argument>, <argument pos:start="43:62" pos:end="43:68"><expr pos:start="43:62" pos:end="43:68"><name pos:start="43:62" pos:end="43:68">queuing</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:72" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:21">

            <expr_stmt pos:start="45:13" pos:end="45:51"><expr pos:start="45:13" pos:end="45:50"><call pos:start="45:13" pos:end="45:50"><name pos:start="45:13" pos:end="45:27">uhci_queue_free</name><argument_list pos:start="45:28" pos:end="45:50">(<argument pos:start="45:29" pos:end="45:29"><expr pos:start="45:29" pos:end="45:29"><name pos:start="45:29" pos:end="45:29">q</name></expr></argument>, <argument pos:start="45:32" pos:end="45:49"><expr pos:start="45:32" pos:end="45:49"><literal type="string" pos:start="45:32" pos:end="45:49">"guest re-used qh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:21"><expr pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:13">q</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:20">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:10">(<expr pos:start="55:9" pos:end="55:9"><name pos:start="55:9" pos:end="55:9">q</name></expr>)</condition> <block pos:start="55:12" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:22">

        <expr_stmt pos:start="57:9" pos:end="57:22"><expr pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:9">q</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:16">valid</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <literal type="number" pos:start="57:20" pos:end="57:21">32</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:21">/* Is active ? */</comment>

    <if_stmt pos:start="65:5" pos:end="91:5"><if pos:start="65:5" pos:end="91:5">if <condition pos:start="65:8" pos:end="65:37">(<expr pos:start="65:9" pos:end="65:36"><operator pos:start="65:9" pos:end="65:9">!</operator><operator pos:start="65:10" pos:end="65:10">(</operator><name pos:start="65:11" pos:end="65:18"><name pos:start="65:11" pos:end="65:12">td</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:18">ctrl</name></name> <operator pos:start="65:20" pos:end="65:20">&amp;</operator> <name pos:start="65:22" pos:end="65:35">TD_CTRL_ACTIVE</name><operator pos:start="65:36" pos:end="65:36">)</operator></expr>)</condition> <block pos:start="65:39" pos:end="91:5">{<block_content pos:start="67:9" pos:end="89:33">

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:18">(<expr pos:start="67:13" pos:end="67:17"><name pos:start="67:13" pos:end="67:17">async</name></expr>)</condition> <block pos:start="67:20" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:67">

            <comment type="block" pos:start="69:13" pos:end="69:72">/* Guest marked a pending td non-active, cancel the queue */</comment>

            <expr_stmt pos:start="71:13" pos:end="71:67"><expr pos:start="71:13" pos:end="71:66"><call pos:start="71:13" pos:end="71:66"><name pos:start="71:13" pos:end="71:27">uhci_queue_free</name><argument_list pos:start="71:28" pos:end="71:66">(<argument pos:start="71:29" pos:end="71:40"><expr pos:start="71:29" pos:end="71:40"><name pos:start="71:29" pos:end="71:40"><name pos:start="71:29" pos:end="71:33">async</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:40">queue</name></name></expr></argument>, <argument pos:start="71:43" pos:end="71:65"><expr pos:start="71:43" pos:end="71:65"><literal type="string" pos:start="71:43" pos:end="71:65">"pending td non-active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="75:9" pos:end="81:11">/*

         * ehci11d spec page 22: "Even if the Active bit in the TD is already

         * cleared when the TD is fetched ... an IOC interrupt is generated"

         */</comment>

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:35">(<expr pos:start="83:13" pos:end="83:34"><name pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:14">td</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:20">ctrl</name></name> <operator pos:start="83:22" pos:end="83:22">&amp;</operator> <name pos:start="83:24" pos:end="83:34">TD_CTRL_IOC</name></expr>)</condition> <block pos:start="83:37" pos:end="87:9">{<block_content pos:start="85:17" pos:end="85:34">

                <expr_stmt pos:start="85:17" pos:end="85:34"><expr pos:start="85:17" pos:end="85:33"><operator pos:start="85:17" pos:end="85:17">*</operator><name pos:start="85:18" pos:end="85:25">int_mask</name> <operator pos:start="85:27" pos:end="85:28">|=</operator> <literal type="number" pos:start="85:30" pos:end="85:33">0x01</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="89:9" pos:end="89:33">return <expr pos:start="89:16" pos:end="89:32"><name pos:start="89:16" pos:end="89:32">TD_RESULT_NEXT_QH</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="119:5"><if pos:start="95:5" pos:end="119:5">if <condition pos:start="95:8" pos:end="95:14">(<expr pos:start="95:9" pos:end="95:13"><name pos:start="95:9" pos:end="95:13">async</name></expr>)</condition> <block pos:start="95:16" pos:end="119:5">{<block_content pos:start="97:9" pos:end="117:18">

        <if_stmt pos:start="97:9" pos:end="99:40"><if pos:start="97:9" pos:end="99:40">if <condition pos:start="97:12" pos:end="97:25">(<expr pos:start="97:13" pos:end="97:24"><operator pos:start="97:13" pos:end="97:13">!</operator><name pos:start="97:14" pos:end="97:24"><name pos:start="97:14" pos:end="97:18">async</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:24">done</name></name></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:40"><block_content pos:start="99:13" pos:end="99:40">

            <return pos:start="99:13" pos:end="99:40">return <expr pos:start="99:20" pos:end="99:39"><name pos:start="99:20" pos:end="99:39">TD_RESULT_ASYNC_CONT</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="101:9" pos:end="111:9"><if pos:start="101:9" pos:end="111:9">if <condition pos:start="101:12" pos:end="101:20">(<expr pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:19">queuing</name></expr>)</condition> <block pos:start="101:22" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:40">

            <comment type="block" pos:start="103:13" pos:end="107:32">/* we are busy filling the queue, we are not prepared

               to consume completed packages then, just leave them

               in async state */</comment>

            <return pos:start="109:13" pos:end="109:40">return <expr pos:start="109:20" pos:end="109:39"><name pos:start="109:20" pos:end="109:39">TD_RESULT_ASYNC_CONT</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:33"><expr pos:start="115:9" pos:end="115:32"><call pos:start="115:9" pos:end="115:32"><name pos:start="115:9" pos:end="115:25">uhci_async_unlink</name><argument_list pos:start="115:26" pos:end="115:32">(<argument pos:start="115:27" pos:end="115:31"><expr pos:start="115:27" pos:end="115:31"><name pos:start="115:27" pos:end="115:31">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="117:9" pos:end="117:18">goto <name pos:start="117:14" pos:end="117:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:29">/* Allocate new packet */</comment>

    <if_stmt pos:start="125:5" pos:end="133:5"><if pos:start="125:5" pos:end="133:5">if <condition pos:start="125:8" pos:end="125:18">(<expr pos:start="125:9" pos:end="125:17"><name pos:start="125:9" pos:end="125:9">q</name> <operator pos:start="125:11" pos:end="125:12">==</operator> <name pos:start="125:14" pos:end="125:17">NULL</name></expr>)</condition> <block pos:start="125:20" pos:end="133:5">{<block_content pos:start="127:9" pos:end="131:47">

        <decl_stmt pos:start="127:9" pos:end="127:70"><decl pos:start="127:9" pos:end="127:69"><type pos:start="127:9" pos:end="127:19"><name pos:start="127:9" pos:end="127:17">USBDevice</name> <modifier pos:start="127:19" pos:end="127:19">*</modifier></type><name pos:start="127:20" pos:end="127:22">dev</name> <init pos:start="127:24" pos:end="127:69">= <expr pos:start="127:26" pos:end="127:69"><call pos:start="127:26" pos:end="127:69"><name pos:start="127:26" pos:end="127:41">uhci_find_device</name><argument_list pos:start="127:42" pos:end="127:69">(<argument pos:start="127:43" pos:end="127:43"><expr pos:start="127:43" pos:end="127:43"><name pos:start="127:43" pos:end="127:43">s</name></expr></argument>, <argument pos:start="127:46" pos:end="127:68"><expr pos:start="127:46" pos:end="127:68"><operator pos:start="127:46" pos:end="127:46">(</operator><name pos:start="127:47" pos:end="127:55"><name pos:start="127:47" pos:end="127:48">td</name><operator pos:start="127:49" pos:end="127:50">-&gt;</operator><name pos:start="127:51" pos:end="127:55">token</name></name> <operator pos:start="127:57" pos:end="127:58">&gt;&gt;</operator> <literal type="number" pos:start="127:60" pos:end="127:60">8</literal><operator pos:start="127:61" pos:end="127:61">)</operator> <operator pos:start="127:63" pos:end="127:63">&amp;</operator> <literal type="number" pos:start="127:65" pos:end="127:68">0x7f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="129:9" pos:end="129:72"><decl pos:start="129:9" pos:end="129:71"><type pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:19">USBEndpoint</name> <modifier pos:start="129:21" pos:end="129:21">*</modifier></type><name pos:start="129:22" pos:end="129:23">ep</name> <init pos:start="129:25" pos:end="129:71">= <expr pos:start="129:27" pos:end="129:71"><call pos:start="129:27" pos:end="129:71"><name pos:start="129:27" pos:end="129:36">usb_ep_get</name><argument_list pos:start="129:37" pos:end="129:71">(<argument pos:start="129:38" pos:end="129:40"><expr pos:start="129:38" pos:end="129:40"><name pos:start="129:38" pos:end="129:40">dev</name></expr></argument>, <argument pos:start="129:43" pos:end="129:45"><expr pos:start="129:43" pos:end="129:45"><name pos:start="129:43" pos:end="129:45">pid</name></expr></argument>, <argument pos:start="129:48" pos:end="129:70"><expr pos:start="129:48" pos:end="129:70"><operator pos:start="129:48" pos:end="129:48">(</operator><name pos:start="129:49" pos:end="129:57"><name pos:start="129:49" pos:end="129:50">td</name><operator pos:start="129:51" pos:end="129:52">-&gt;</operator><name pos:start="129:53" pos:end="129:57">token</name></name> <operator pos:start="129:59" pos:end="129:60">&gt;&gt;</operator> <literal type="number" pos:start="129:62" pos:end="129:63">15</literal><operator pos:start="129:64" pos:end="129:64">)</operator> <operator pos:start="129:66" pos:end="129:66">&amp;</operator> <literal type="number" pos:start="129:68" pos:end="129:70">0xf</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:47"><expr pos:start="131:9" pos:end="131:46"><name pos:start="131:9" pos:end="131:9">q</name> <operator pos:start="131:11" pos:end="131:11">=</operator> <call pos:start="131:13" pos:end="131:46"><name pos:start="131:13" pos:end="131:26">uhci_queue_new</name><argument_list pos:start="131:27" pos:end="131:46">(<argument pos:start="131:28" pos:end="131:28"><expr pos:start="131:28" pos:end="131:28"><name pos:start="131:28" pos:end="131:28">s</name></expr></argument>, <argument pos:start="131:31" pos:end="131:37"><expr pos:start="131:31" pos:end="131:37"><name pos:start="131:31" pos:end="131:37">qh_addr</name></expr></argument>, <argument pos:start="131:40" pos:end="131:41"><expr pos:start="131:40" pos:end="131:41"><name pos:start="131:40" pos:end="131:41">td</name></expr></argument>, <argument pos:start="131:44" pos:end="131:45"><expr pos:start="131:44" pos:end="131:45"><name pos:start="131:44" pos:end="131:45">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:41"><expr pos:start="135:5" pos:end="135:40"><name pos:start="135:5" pos:end="135:9">async</name> <operator pos:start="135:11" pos:end="135:11">=</operator> <call pos:start="135:13" pos:end="135:40"><name pos:start="135:13" pos:end="135:28">uhci_async_alloc</name><argument_list pos:start="135:29" pos:end="135:40">(<argument pos:start="135:30" pos:end="135:30"><expr pos:start="135:30" pos:end="135:30"><name pos:start="135:30" pos:end="135:30">q</name></expr></argument>, <argument pos:start="135:33" pos:end="135:39"><expr pos:start="135:33" pos:end="135:39"><name pos:start="135:33" pos:end="135:39">td_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:46"><expr pos:start="139:5" pos:end="139:45"><name pos:start="139:5" pos:end="139:11">max_len</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <operator pos:start="139:15" pos:end="139:15">(</operator><operator pos:start="139:16" pos:end="139:16">(</operator><name pos:start="139:17" pos:end="139:25"><name pos:start="139:17" pos:end="139:18">td</name><operator pos:start="139:19" pos:end="139:20">-&gt;</operator><name pos:start="139:21" pos:end="139:25">token</name></name> <operator pos:start="139:27" pos:end="139:28">&gt;&gt;</operator> <literal type="number" pos:start="139:30" pos:end="139:31">21</literal><operator pos:start="139:32" pos:end="139:32">)</operator> <operator pos:start="139:34" pos:end="139:34">+</operator> <literal type="number" pos:start="139:36" pos:end="139:36">1</literal><operator pos:start="139:37" pos:end="139:37">)</operator> <operator pos:start="139:39" pos:end="139:39">&amp;</operator> <literal type="number" pos:start="139:41" pos:end="139:45">0x7ff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:65"><expr pos:start="141:5" pos:end="141:64"><name pos:start="141:5" pos:end="141:7">spd</name> <operator pos:start="141:9" pos:end="141:9">=</operator> <operator pos:start="141:11" pos:end="141:11">(</operator><name pos:start="141:12" pos:end="141:14">pid</name> <operator pos:start="141:16" pos:end="141:17">==</operator> <name pos:start="141:19" pos:end="141:30">USB_TOKEN_IN</name> <operator pos:start="141:32" pos:end="141:33">&amp;&amp;</operator> <operator pos:start="141:35" pos:end="141:35">(</operator><name pos:start="141:36" pos:end="141:43"><name pos:start="141:36" pos:end="141:37">td</name><operator pos:start="141:38" pos:end="141:39">-&gt;</operator><name pos:start="141:40" pos:end="141:43">ctrl</name></name> <operator pos:start="141:45" pos:end="141:45">&amp;</operator> <name pos:start="141:47" pos:end="141:57">TD_CTRL_SPD</name><operator pos:start="141:58" pos:end="141:58">)</operator> <operator pos:start="141:60" pos:end="141:61">!=</operator> <literal type="number" pos:start="141:63" pos:end="141:63">0</literal><operator pos:start="141:64" pos:end="141:64">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="145:52"><expr pos:start="143:5" pos:end="145:51"><call pos:start="143:5" pos:end="145:51"><name pos:start="143:5" pos:end="143:20">usb_packet_setup</name><argument_list pos:start="143:21" pos:end="145:51">(<argument pos:start="143:22" pos:end="143:35"><expr pos:start="143:22" pos:end="143:35"><operator pos:start="143:22" pos:end="143:22">&amp;</operator><name pos:start="143:23" pos:end="143:35"><name pos:start="143:23" pos:end="143:27">async</name><operator pos:start="143:28" pos:end="143:29">-&gt;</operator><name pos:start="143:30" pos:end="143:35">packet</name></name></expr></argument>, <argument pos:start="143:38" pos:end="143:40"><expr pos:start="143:38" pos:end="143:40"><name pos:start="143:38" pos:end="143:40">pid</name></expr></argument>, <argument pos:start="143:43" pos:end="143:47"><expr pos:start="143:43" pos:end="143:47"><name pos:start="143:43" pos:end="143:47"><name pos:start="143:43" pos:end="143:43">q</name><operator pos:start="143:44" pos:end="143:45">-&gt;</operator><name pos:start="143:46" pos:end="143:47">ep</name></name></expr></argument>, <argument pos:start="143:50" pos:end="143:56"><expr pos:start="143:50" pos:end="143:56"><name pos:start="143:50" pos:end="143:56">td_addr</name></expr></argument>, <argument pos:start="143:59" pos:end="143:61"><expr pos:start="143:59" pos:end="143:61"><name pos:start="143:59" pos:end="143:61">spd</name></expr></argument>,

                     <argument pos:start="145:22" pos:end="145:50"><expr pos:start="145:22" pos:end="145:50"><operator pos:start="145:22" pos:end="145:22">(</operator><name pos:start="145:23" pos:end="145:30"><name pos:start="145:23" pos:end="145:24">td</name><operator pos:start="145:25" pos:end="145:26">-&gt;</operator><name pos:start="145:27" pos:end="145:30">ctrl</name></name> <operator pos:start="145:32" pos:end="145:32">&amp;</operator> <name pos:start="145:34" pos:end="145:44">TD_CTRL_IOC</name><operator pos:start="145:45" pos:end="145:45">)</operator> <operator pos:start="145:47" pos:end="145:48">!=</operator> <literal type="number" pos:start="145:50" pos:end="145:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:54"><expr pos:start="147:5" pos:end="147:53"><call pos:start="147:5" pos:end="147:53"><name pos:start="147:5" pos:end="147:19">qemu_sglist_add</name><argument_list pos:start="147:20" pos:end="147:53">(<argument pos:start="147:21" pos:end="147:31"><expr pos:start="147:21" pos:end="147:31"><operator pos:start="147:21" pos:end="147:21">&amp;</operator><name pos:start="147:22" pos:end="147:31"><name pos:start="147:22" pos:end="147:26">async</name><operator pos:start="147:27" pos:end="147:28">-&gt;</operator><name pos:start="147:29" pos:end="147:31">sgl</name></name></expr></argument>, <argument pos:start="147:34" pos:end="147:43"><expr pos:start="147:34" pos:end="147:43"><name pos:start="147:34" pos:end="147:43"><name pos:start="147:34" pos:end="147:35">td</name><operator pos:start="147:36" pos:end="147:37">-&gt;</operator><name pos:start="147:38" pos:end="147:43">buffer</name></name></expr></argument>, <argument pos:start="147:46" pos:end="147:52"><expr pos:start="147:46" pos:end="147:52"><name pos:start="147:46" pos:end="147:52">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:48"><expr pos:start="149:5" pos:end="149:47"><call pos:start="149:5" pos:end="149:47"><name pos:start="149:5" pos:end="149:18">usb_packet_map</name><argument_list pos:start="149:19" pos:end="149:47">(<argument pos:start="149:20" pos:end="149:33"><expr pos:start="149:20" pos:end="149:33"><operator pos:start="149:20" pos:end="149:20">&amp;</operator><name pos:start="149:21" pos:end="149:33"><name pos:start="149:21" pos:end="149:25">async</name><operator pos:start="149:26" pos:end="149:27">-&gt;</operator><name pos:start="149:28" pos:end="149:33">packet</name></name></expr></argument>, <argument pos:start="149:36" pos:end="149:46"><expr pos:start="149:36" pos:end="149:46"><operator pos:start="149:36" pos:end="149:36">&amp;</operator><name pos:start="149:37" pos:end="149:46"><name pos:start="149:37" pos:end="149:41">async</name><operator pos:start="149:42" pos:end="149:43">-&gt;</operator><name pos:start="149:44" pos:end="149:46">sgl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="153:5" pos:end="191:5">switch<condition pos:start="153:11" pos:end="153:15">(<expr pos:start="153:12" pos:end="153:14"><name pos:start="153:12" pos:end="153:14">pid</name></expr>)</condition> <block pos:start="153:17" pos:end="191:5">{<block_content pos:start="155:5" pos:end="189:36">

    <case pos:start="155:5" pos:end="155:23">case <expr pos:start="155:10" pos:end="155:22"><name pos:start="155:10" pos:end="155:22">USB_TOKEN_OUT</name></expr>:</case>

    <case pos:start="157:5" pos:end="157:25">case <expr pos:start="157:10" pos:end="157:24"><name pos:start="157:10" pos:end="157:24">USB_TOKEN_SETUP</name></expr>:</case>

        <expr_stmt pos:start="159:9" pos:end="159:60"><expr pos:start="159:9" pos:end="159:59"><name pos:start="159:9" pos:end="159:11">len</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <call pos:start="159:15" pos:end="159:59"><name pos:start="159:15" pos:end="159:31">usb_handle_packet</name><argument_list pos:start="159:32" pos:end="159:59">(<argument pos:start="159:33" pos:end="159:42"><expr pos:start="159:33" pos:end="159:42"><name pos:start="159:33" pos:end="159:42"><name pos:start="159:33" pos:end="159:33">q</name><operator pos:start="159:34" pos:end="159:35">-&gt;</operator><name pos:start="159:36" pos:end="159:37">ep</name><operator pos:start="159:38" pos:end="159:39">-&gt;</operator><name pos:start="159:40" pos:end="159:42">dev</name></name></expr></argument>, <argument pos:start="159:45" pos:end="159:58"><expr pos:start="159:45" pos:end="159:58"><operator pos:start="159:45" pos:end="159:45">&amp;</operator><name pos:start="159:46" pos:end="159:58"><name pos:start="159:46" pos:end="159:50">async</name><operator pos:start="159:51" pos:end="159:52">-&gt;</operator><name pos:start="159:53" pos:end="159:58">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="163:26"><if pos:start="161:9" pos:end="163:26">if <condition pos:start="161:12" pos:end="161:21">(<expr pos:start="161:13" pos:end="161:20"><name pos:start="161:13" pos:end="161:15">len</name> <operator pos:start="161:17" pos:end="161:18">&gt;=</operator> <literal type="number" pos:start="161:20" pos:end="161:20">0</literal></expr>)</condition><block type="pseudo" pos:start="163:13" pos:end="163:26"><block_content pos:start="163:13" pos:end="163:26">

            <expr_stmt pos:start="163:13" pos:end="163:26"><expr pos:start="163:13" pos:end="163:25"><name pos:start="163:13" pos:end="163:15">len</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <name pos:start="163:19" pos:end="163:25">max_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="165:9" pos:end="165:14">break;</break>



    <case pos:start="169:5" pos:end="169:22">case <expr pos:start="169:10" pos:end="169:21"><name pos:start="169:10" pos:end="169:21">USB_TOKEN_IN</name></expr>:</case>

        <expr_stmt pos:start="171:9" pos:end="171:60"><expr pos:start="171:9" pos:end="171:59"><name pos:start="171:9" pos:end="171:11">len</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <call pos:start="171:15" pos:end="171:59"><name pos:start="171:15" pos:end="171:31">usb_handle_packet</name><argument_list pos:start="171:32" pos:end="171:59">(<argument pos:start="171:33" pos:end="171:42"><expr pos:start="171:33" pos:end="171:42"><name pos:start="171:33" pos:end="171:42"><name pos:start="171:33" pos:end="171:33">q</name><operator pos:start="171:34" pos:end="171:35">-&gt;</operator><name pos:start="171:36" pos:end="171:37">ep</name><operator pos:start="171:38" pos:end="171:39">-&gt;</operator><name pos:start="171:40" pos:end="171:42">dev</name></name></expr></argument>, <argument pos:start="171:45" pos:end="171:58"><expr pos:start="171:45" pos:end="171:58"><operator pos:start="171:45" pos:end="171:45">&amp;</operator><name pos:start="171:46" pos:end="171:58"><name pos:start="171:46" pos:end="171:50">async</name><operator pos:start="171:51" pos:end="171:52">-&gt;</operator><name pos:start="171:53" pos:end="171:58">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="173:9" pos:end="173:14">break;</break>



    <default pos:start="177:5" pos:end="177:12">default:</default>

        <comment type="block" pos:start="179:9" pos:end="179:45">/* invalid pid : frame interrupted */</comment>

        <expr_stmt pos:start="181:9" pos:end="181:54"><expr pos:start="181:9" pos:end="181:53"><call pos:start="181:9" pos:end="181:53"><name pos:start="181:9" pos:end="181:24">usb_packet_unmap</name><argument_list pos:start="181:25" pos:end="181:53">(<argument pos:start="181:26" pos:end="181:39"><expr pos:start="181:26" pos:end="181:39"><operator pos:start="181:26" pos:end="181:26">&amp;</operator><name pos:start="181:27" pos:end="181:39"><name pos:start="181:27" pos:end="181:31">async</name><operator pos:start="181:32" pos:end="181:33">-&gt;</operator><name pos:start="181:34" pos:end="181:39">packet</name></name></expr></argument>, <argument pos:start="181:42" pos:end="181:52"><expr pos:start="181:42" pos:end="181:52"><operator pos:start="181:42" pos:end="181:42">&amp;</operator><name pos:start="181:43" pos:end="181:52"><name pos:start="181:43" pos:end="181:47">async</name><operator pos:start="181:48" pos:end="181:49">-&gt;</operator><name pos:start="181:50" pos:end="181:52">sgl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:31"><expr pos:start="183:9" pos:end="183:30"><call pos:start="183:9" pos:end="183:30"><name pos:start="183:9" pos:end="183:23">uhci_async_free</name><argument_list pos:start="183:24" pos:end="183:30">(<argument pos:start="183:25" pos:end="183:29"><expr pos:start="183:25" pos:end="183:29"><name pos:start="183:25" pos:end="183:29">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:37"><expr pos:start="185:9" pos:end="185:36"><name pos:start="185:9" pos:end="185:17"><name pos:start="185:9" pos:end="185:9">s</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:17">status</name></name> <operator pos:start="185:19" pos:end="185:20">|=</operator> <name pos:start="185:22" pos:end="185:36">UHCI_STS_HCPERR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:27"><expr pos:start="187:9" pos:end="187:26"><call pos:start="187:9" pos:end="187:26"><name pos:start="187:9" pos:end="187:23">uhci_update_irq</name><argument_list pos:start="187:24" pos:end="187:26">(<argument pos:start="187:25" pos:end="187:25"><expr pos:start="187:25" pos:end="187:25"><name pos:start="187:25" pos:end="187:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="189:9" pos:end="189:36">return <expr pos:start="189:16" pos:end="189:35"><name pos:start="189:16" pos:end="189:35">TD_RESULT_STOP_FRAME</name></expr>;</return>

    </block_content>}</block></switch>

 

    <if_stmt pos:start="195:5" pos:end="207:5"><if pos:start="195:5" pos:end="207:5">if <condition pos:start="195:8" pos:end="195:29">(<expr pos:start="195:9" pos:end="195:28"><name pos:start="195:9" pos:end="195:11">len</name> <operator pos:start="195:13" pos:end="195:14">==</operator> <name pos:start="195:16" pos:end="195:28">USB_RET_ASYNC</name></expr>)</condition> <block pos:start="195:31" pos:end="207:5">{<block_content pos:start="197:9" pos:end="205:37">

        <expr_stmt pos:start="197:9" pos:end="197:31"><expr pos:start="197:9" pos:end="197:30"><call pos:start="197:9" pos:end="197:30"><name pos:start="197:9" pos:end="197:23">uhci_async_link</name><argument_list pos:start="197:24" pos:end="197:30">(<argument pos:start="197:25" pos:end="197:29"><expr pos:start="197:25" pos:end="197:29"><name pos:start="197:25" pos:end="197:29">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="203:9"><if pos:start="199:9" pos:end="203:9">if <condition pos:start="199:12" pos:end="199:21">(<expr pos:start="199:13" pos:end="199:20"><operator pos:start="199:13" pos:end="199:13">!</operator><name pos:start="199:14" pos:end="199:20">queuing</name></expr>)</condition> <block pos:start="199:23" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:35">

            <expr_stmt pos:start="201:13" pos:end="201:35"><expr pos:start="201:13" pos:end="201:34"><call pos:start="201:13" pos:end="201:34"><name pos:start="201:13" pos:end="201:27">uhci_queue_fill</name><argument_list pos:start="201:28" pos:end="201:34">(<argument pos:start="201:29" pos:end="201:29"><expr pos:start="201:29" pos:end="201:29"><name pos:start="201:29" pos:end="201:29">q</name></expr></argument>, <argument pos:start="201:32" pos:end="201:33"><expr pos:start="201:32" pos:end="201:33"><name pos:start="201:32" pos:end="201:33">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="205:9" pos:end="205:37">return <expr pos:start="205:16" pos:end="205:36"><name pos:start="205:16" pos:end="205:36">TD_RESULT_ASYNC_START</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:31"><expr pos:start="211:5" pos:end="211:30"><name pos:start="211:5" pos:end="211:24"><name pos:start="211:5" pos:end="211:9">async</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:17">packet</name><operator pos:start="211:18" pos:end="211:18">.</operator><name pos:start="211:19" pos:end="211:24">result</name></name> <operator pos:start="211:26" pos:end="211:26">=</operator> <name pos:start="211:28" pos:end="211:30">len</name></expr>;</expr_stmt>



<label pos:start="215:1" pos:end="215:5"><name pos:start="215:1" pos:end="215:4">done</name>:</label>

    <expr_stmt pos:start="217:5" pos:end="217:51"><expr pos:start="217:5" pos:end="217:50"><name pos:start="217:5" pos:end="217:7">len</name> <operator pos:start="217:9" pos:end="217:9">=</operator> <call pos:start="217:11" pos:end="217:50"><name pos:start="217:11" pos:end="217:26">uhci_complete_td</name><argument_list pos:start="217:27" pos:end="217:50">(<argument pos:start="217:28" pos:end="217:28"><expr pos:start="217:28" pos:end="217:28"><name pos:start="217:28" pos:end="217:28">s</name></expr></argument>, <argument pos:start="217:31" pos:end="217:32"><expr pos:start="217:31" pos:end="217:32"><name pos:start="217:31" pos:end="217:32">td</name></expr></argument>, <argument pos:start="217:35" pos:end="217:39"><expr pos:start="217:35" pos:end="217:39"><name pos:start="217:35" pos:end="217:39">async</name></expr></argument>, <argument pos:start="217:42" pos:end="217:49"><expr pos:start="217:42" pos:end="217:49"><name pos:start="217:42" pos:end="217:49">int_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:50"><expr pos:start="219:5" pos:end="219:49"><call pos:start="219:5" pos:end="219:49"><name pos:start="219:5" pos:end="219:20">usb_packet_unmap</name><argument_list pos:start="219:21" pos:end="219:49">(<argument pos:start="219:22" pos:end="219:35"><expr pos:start="219:22" pos:end="219:35"><operator pos:start="219:22" pos:end="219:22">&amp;</operator><name pos:start="219:23" pos:end="219:35"><name pos:start="219:23" pos:end="219:27">async</name><operator pos:start="219:28" pos:end="219:29">-&gt;</operator><name pos:start="219:30" pos:end="219:35">packet</name></name></expr></argument>, <argument pos:start="219:38" pos:end="219:48"><expr pos:start="219:38" pos:end="219:48"><operator pos:start="219:38" pos:end="219:38">&amp;</operator><name pos:start="219:39" pos:end="219:48"><name pos:start="219:39" pos:end="219:43">async</name><operator pos:start="219:44" pos:end="219:45">-&gt;</operator><name pos:start="219:46" pos:end="219:48">sgl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:27"><expr pos:start="221:5" pos:end="221:26"><call pos:start="221:5" pos:end="221:26"><name pos:start="221:5" pos:end="221:19">uhci_async_free</name><argument_list pos:start="221:20" pos:end="221:26">(<argument pos:start="221:21" pos:end="221:25"><expr pos:start="221:21" pos:end="221:25"><name pos:start="221:21" pos:end="221:25">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="223:5" pos:end="223:15">return <expr pos:start="223:12" pos:end="223:14"><name pos:start="223:12" pos:end="223:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
