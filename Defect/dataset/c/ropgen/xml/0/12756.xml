<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12756.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">hda_audio_init</name><parameter_list pos:start="1:26" pos:end="1:77">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:40">HDACodecDevice</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">hda</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:76"><decl pos:start="1:48" pos:end="1:76"><type pos:start="1:48" pos:end="1:76"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:70"><name pos:start="1:54" pos:end="1:59">struct</name> <name pos:start="1:61" pos:end="1:70">desc_codec</name></name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:76">desc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">HDAAudioState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">a</name> <init pos:start="5:22" pos:end="5:37">= <expr pos:start="5:24" pos:end="5:37"><call pos:start="5:24" pos:end="5:37"><name pos:start="5:24" pos:end="5:32">HDA_AUDIO</name><argument_list pos:start="5:33" pos:end="5:37">(<argument pos:start="5:34" pos:end="5:36"><expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">hda</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">HDAAudioStream</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:21"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:19">desc_node</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:25">node</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:22"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:20">desc_param</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:27">param</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:14">i</name></decl>, <decl pos:start="13:17" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:17" pos:end="13:20">type</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:19"><expr pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:5">a</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:11">desc</name></name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:18">desc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:45"><expr pos:start="19:5" pos:end="19:44"><name pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:5">a</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:11">name</name></name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:44"><name pos:start="19:15" pos:end="19:33">object_get_typename</name><argument_list pos:start="19:34" pos:end="19:44">(<argument pos:start="19:35" pos:end="19:43"><expr pos:start="19:35" pos:end="19:43"><call pos:start="19:35" pos:end="19:43"><name pos:start="19:35" pos:end="19:40">OBJECT</name><argument_list pos:start="19:41" pos:end="19:43">(<argument pos:start="19:42" pos:end="19:42"><expr pos:start="19:42" pos:end="19:42"><name pos:start="19:42" pos:end="19:42">a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:59"><expr pos:start="21:5" pos:end="21:58"><call pos:start="21:5" pos:end="21:58"><name pos:start="21:5" pos:end="21:10">dprint</name><argument_list pos:start="21:11" pos:end="21:58">(<argument pos:start="21:12" pos:end="21:12"><expr pos:start="21:12" pos:end="21:12"><name pos:start="21:12" pos:end="21:12">a</name></expr></argument>, <argument pos:start="21:15" pos:end="21:15"><expr pos:start="21:15" pos:end="21:15"><literal type="number" pos:start="21:15" pos:end="21:15">1</literal></expr></argument>, <argument pos:start="21:18" pos:end="21:31"><expr pos:start="21:18" pos:end="21:31"><literal type="string" pos:start="21:18" pos:end="21:31">"%s: cad %d\n"</literal></expr></argument>, <argument pos:start="21:34" pos:end="21:45"><expr pos:start="21:34" pos:end="21:45"><name pos:start="21:34" pos:end="21:45">__FUNCTION__</name></expr></argument>, <argument pos:start="21:48" pos:end="21:57"><expr pos:start="21:48" pos:end="21:57"><name pos:start="21:48" pos:end="21:57"><name pos:start="21:48" pos:end="21:48">a</name><operator pos:start="21:49" pos:end="21:50">-&gt;</operator><name pos:start="21:51" pos:end="21:53">hda</name><operator pos:start="21:54" pos:end="21:54">.</operator><name pos:start="21:55" pos:end="21:57">cad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:39"><expr pos:start="25:5" pos:end="25:38"><call pos:start="25:5" pos:end="25:38"><name pos:start="25:5" pos:end="25:21">AUD_register_card</name><argument_list pos:start="25:22" pos:end="25:38">(<argument pos:start="25:23" pos:end="25:27"><expr pos:start="25:23" pos:end="25:27"><literal type="string" pos:start="25:23" pos:end="25:27">"hda"</literal></expr></argument>, <argument pos:start="25:30" pos:end="25:37"><expr pos:start="25:30" pos:end="25:37"><operator pos:start="25:30" pos:end="25:30">&amp;</operator><name pos:start="25:31" pos:end="25:37"><name pos:start="25:31" pos:end="25:31">a</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:37">card</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="27:5" pos:end="85:5">for <control pos:start="27:9" pos:end="27:41">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">i</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:36"><expr pos:start="27:17" pos:end="27:35"><name pos:start="27:17" pos:end="27:17">i</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:35"><name pos:start="27:21" pos:end="27:21">a</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:27">desc</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:35">nnodes</name></name></expr>;</condition> <incr pos:start="27:38" pos:end="27:40"><expr pos:start="27:38" pos:end="27:40"><name pos:start="27:38" pos:end="27:38">i</name><operator pos:start="27:39" pos:end="27:40">++</operator></expr></incr>)</control> <block pos:start="27:43" pos:end="85:5">{<block_content pos:start="29:9" pos:end="83:9">

        <expr_stmt pos:start="29:9" pos:end="29:34"><expr pos:start="29:9" pos:end="29:33"><name pos:start="29:9" pos:end="29:12">node</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <name pos:start="29:16" pos:end="29:29"><name pos:start="29:16" pos:end="29:16">a</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:22">desc</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:29">nodes</name></name> <operator pos:start="29:31" pos:end="29:31">+</operator> <name pos:start="29:33" pos:end="29:33">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:68"><expr pos:start="31:9" pos:end="31:67"><name pos:start="31:9" pos:end="31:13">param</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <call pos:start="31:17" pos:end="31:67"><name pos:start="31:17" pos:end="31:36">hda_codec_find_param</name><argument_list pos:start="31:37" pos:end="31:67">(<argument pos:start="31:38" pos:end="31:41"><expr pos:start="31:38" pos:end="31:41"><name pos:start="31:38" pos:end="31:41">node</name></expr></argument>, <argument pos:start="31:44" pos:end="31:66"><expr pos:start="31:44" pos:end="31:66"><name pos:start="31:44" pos:end="31:66">AC_PAR_AUDIO_WIDGET_CAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:26">(<expr pos:start="33:13" pos:end="33:25"><name pos:start="33:13" pos:end="33:17">param</name> <operator pos:start="33:19" pos:end="33:20">==</operator> <name pos:start="33:22" pos:end="33:25">NULL</name></expr>)</condition> <block pos:start="33:28" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:21">

            <continue pos:start="35:13" pos:end="35:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:65"><expr pos:start="39:9" pos:end="39:64"><name pos:start="39:9" pos:end="39:12">type</name> <operator pos:start="39:14" pos:end="39:14">=</operator> <operator pos:start="39:16" pos:end="39:16">(</operator><name pos:start="39:17" pos:end="39:26"><name pos:start="39:17" pos:end="39:21">param</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:26">val</name></name> <operator pos:start="39:28" pos:end="39:28">&amp;</operator> <name pos:start="39:30" pos:end="39:41">AC_WCAP_TYPE</name><operator pos:start="39:42" pos:end="39:42">)</operator> <operator pos:start="39:44" pos:end="39:45">&gt;&gt;</operator> <name pos:start="39:47" pos:end="39:64">AC_WCAP_TYPE_SHIFT</name></expr>;</expr_stmt>

        <switch pos:start="41:9" pos:end="83:9">switch <condition pos:start="41:16" pos:end="41:21">(<expr pos:start="41:17" pos:end="41:20"><name pos:start="41:17" pos:end="41:20">type</name></expr>)</condition> <block pos:start="41:23" pos:end="83:9">{<block_content pos:start="43:9" pos:end="81:18">

        <case pos:start="43:9" pos:end="43:28">case <expr pos:start="43:14" pos:end="43:27"><name pos:start="43:14" pos:end="43:27">AC_WID_AUD_OUT</name></expr>:</case>

        <case pos:start="45:9" pos:end="45:27">case <expr pos:start="45:14" pos:end="45:26"><name pos:start="45:14" pos:end="45:26">AC_WID_AUD_IN</name></expr>:</case>

            <expr_stmt pos:start="47:13" pos:end="47:54"><expr pos:start="47:13" pos:end="47:53"><call pos:start="47:13" pos:end="47:53"><name pos:start="47:13" pos:end="47:18">assert</name><argument_list pos:start="47:19" pos:end="47:53">(<argument pos:start="47:20" pos:end="47:52"><expr pos:start="47:20" pos:end="47:52"><name pos:start="47:20" pos:end="47:32"><name pos:start="47:20" pos:end="47:23">node</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:32">stindex</name></name> <operator pos:start="47:34" pos:end="47:34">&lt;</operator> <call pos:start="47:36" pos:end="47:52"><name pos:start="47:36" pos:end="47:45">ARRAY_SIZE</name><argument_list pos:start="47:46" pos:end="47:52">(<argument pos:start="47:47" pos:end="47:51"><expr pos:start="47:47" pos:end="47:51"><name pos:start="47:47" pos:end="47:51"><name pos:start="47:47" pos:end="47:47">a</name><operator pos:start="47:48" pos:end="47:49">-&gt;</operator><name pos:start="47:50" pos:end="47:51">st</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:39"><expr pos:start="49:13" pos:end="49:38"><name pos:start="49:13" pos:end="49:14">st</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <name pos:start="49:18" pos:end="49:22"><name pos:start="49:18" pos:end="49:18">a</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:22">st</name></name> <operator pos:start="49:24" pos:end="49:24">+</operator> <name pos:start="49:26" pos:end="49:38"><name pos:start="49:26" pos:end="49:29">node</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:38">stindex</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:26"><expr pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:14">st</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:21">state</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <name pos:start="51:25" pos:end="51:25">a</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:28"><expr pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:14">st</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:20">node</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:27">node</name></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="71:13"><if pos:start="55:13" pos:end="67:13">if <condition pos:start="55:16" pos:end="55:39">(<expr pos:start="55:17" pos:end="55:38"><name pos:start="55:17" pos:end="55:20">type</name> <operator pos:start="55:22" pos:end="55:23">==</operator> <name pos:start="55:25" pos:end="55:38">AC_WID_AUD_OUT</name></expr>)</condition> <block pos:start="55:41" pos:end="67:13">{<block_content pos:start="59:17" pos:end="65:34">

                <comment type="block" pos:start="57:17" pos:end="57:46">/* unmute output by default */</comment>

                <expr_stmt pos:start="59:17" pos:end="59:51"><expr pos:start="59:17" pos:end="59:50"><name pos:start="59:17" pos:end="59:29"><name pos:start="59:17" pos:end="59:18">st</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:29">gain_left</name></name> <operator pos:start="59:31" pos:end="59:31">=</operator> <name pos:start="59:33" pos:end="59:50">QEMU_HDA_AMP_STEPS</name></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:52"><expr pos:start="61:17" pos:end="61:51"><name pos:start="61:17" pos:end="61:30"><name pos:start="61:17" pos:end="61:18">st</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:30">gain_right</name></name> <operator pos:start="61:32" pos:end="61:32">=</operator> <name pos:start="61:34" pos:end="61:51">QEMU_HDA_AMP_STEPS</name></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:43"><expr pos:start="63:17" pos:end="63:42"><name pos:start="63:17" pos:end="63:24"><name pos:start="63:17" pos:end="63:18">st</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:24">bpos</name></name> <operator pos:start="63:26" pos:end="63:26">=</operator> <sizeof pos:start="63:28" pos:end="63:42">sizeof<argument_list pos:start="63:34" pos:end="63:42">(<argument pos:start="63:35" pos:end="63:41"><expr pos:start="63:35" pos:end="63:41"><name pos:start="63:35" pos:end="63:41"><name pos:start="63:35" pos:end="63:36">st</name><operator pos:start="63:37" pos:end="63:38">-&gt;</operator><name pos:start="63:39" pos:end="63:41">buf</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:34"><expr pos:start="65:17" pos:end="65:33"><name pos:start="65:17" pos:end="65:26"><name pos:start="65:17" pos:end="65:18">st</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:26">output</name></name> <operator pos:start="65:28" pos:end="65:28">=</operator> <name pos:start="65:30" pos:end="65:33">true</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="67:15" pos:end="71:13">else <block pos:start="67:20" pos:end="71:13">{<block_content pos:start="69:17" pos:end="69:35">

                <expr_stmt pos:start="69:17" pos:end="69:35"><expr pos:start="69:17" pos:end="69:34"><name pos:start="69:17" pos:end="69:26"><name pos:start="69:17" pos:end="69:18">st</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:26">output</name></name> <operator pos:start="69:28" pos:end="69:28">=</operator> <name pos:start="69:30" pos:end="69:34">false</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="73:13" pos:end="75:41"><expr pos:start="73:13" pos:end="75:40"><name pos:start="73:13" pos:end="73:22"><name pos:start="73:13" pos:end="73:14">st</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:22">format</name></name> <operator pos:start="73:24" pos:end="73:24">=</operator> <name pos:start="73:26" pos:end="73:40">AC_FMT_TYPE_PCM</name> <operator pos:start="73:42" pos:end="73:42">|</operator> <name pos:start="73:44" pos:end="73:57">AC_FMT_BITS_16</name> <operator pos:start="73:59" pos:end="73:59">|</operator>

                <operator pos:start="75:17" pos:end="75:17">(</operator><literal type="number" pos:start="75:18" pos:end="75:18">1</literal> <operator pos:start="75:20" pos:end="75:21">&lt;&lt;</operator> <name pos:start="75:23" pos:end="75:39">AC_FMT_CHAN_SHIFT</name><operator pos:start="75:40" pos:end="75:40">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:53"><expr pos:start="77:13" pos:end="77:52"><call pos:start="77:13" pos:end="77:52"><name pos:start="77:13" pos:end="77:31">hda_codec_parse_fmt</name><argument_list pos:start="77:32" pos:end="77:52">(<argument pos:start="77:33" pos:end="77:42"><expr pos:start="77:33" pos:end="77:42"><name pos:start="77:33" pos:end="77:42"><name pos:start="77:33" pos:end="77:34">st</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:42">format</name></name></expr></argument>, <argument pos:start="77:45" pos:end="77:51"><expr pos:start="77:45" pos:end="77:51"><operator pos:start="77:45" pos:end="77:45">&amp;</operator><name pos:start="77:46" pos:end="77:51"><name pos:start="77:46" pos:end="77:47">st</name><operator pos:start="77:48" pos:end="77:49">-&gt;</operator><name pos:start="77:50" pos:end="77:51">as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:32"><expr pos:start="79:13" pos:end="79:31"><call pos:start="79:13" pos:end="79:31"><name pos:start="79:13" pos:end="79:27">hda_audio_setup</name><argument_list pos:start="79:28" pos:end="79:31">(<argument pos:start="79:29" pos:end="79:30"><expr pos:start="79:29" pos:end="79:30"><name pos:start="79:29" pos:end="79:30">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <return pos:start="87:5" pos:end="87:13">return <expr pos:start="87:12" pos:end="87:12"><literal type="number" pos:start="87:12" pos:end="87:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
