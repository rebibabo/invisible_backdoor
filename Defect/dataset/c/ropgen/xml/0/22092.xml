<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22092.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">pulse_write_packet</name><parameter_list pos:start="1:30" pos:end="1:64">(<parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:48"><name pos:start="1:31" pos:end="1:45">AVFormatContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">h</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:58">AVPacket</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="33:1">{<block_content pos:start="5:5" pos:end="31:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PulseData</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">s</name> <init pos:start="5:18" pos:end="5:31">= <expr pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:31"><name pos:start="5:20" pos:end="5:20">h</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:31">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">size</name>     <init pos:start="7:18" pos:end="7:28">= <expr pos:start="7:20" pos:end="7:28"><name pos:start="7:20" pos:end="7:28"><name pos:start="7:20" pos:end="7:22">pkt</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:28">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">buf</name> <init pos:start="9:18" pos:end="9:28">= <expr pos:start="9:20" pos:end="9:28"><name pos:start="9:20" pos:end="9:28"><name pos:start="9:20" pos:end="9:22">pkt</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:28">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">error</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:17"><if pos:start="15:5" pos:end="17:17">if <condition pos:start="15:8" pos:end="15:45">(<expr pos:start="15:9" pos:end="15:44"><name pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:23">stream_index</name></name> <operator pos:start="15:25" pos:end="15:26">!=</operator> <name pos:start="15:28" pos:end="15:44"><name pos:start="15:28" pos:end="15:30">pkt</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:44">stream_index</name></name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:17"><block_content pos:start="17:9" pos:end="17:17">

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:60">(<expr pos:start="21:9" pos:end="21:59"><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:14">error</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <call pos:start="21:18" pos:end="21:58"><name pos:start="21:18" pos:end="21:32">pa_simple_write</name><argument_list pos:start="21:33" pos:end="21:58">(<argument pos:start="21:34" pos:end="21:38"><expr pos:start="21:34" pos:end="21:38"><name pos:start="21:34" pos:end="21:38"><name pos:start="21:34" pos:end="21:34">s</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:38">pa</name></name></expr></argument>, <argument pos:start="21:41" pos:end="21:43"><expr pos:start="21:41" pos:end="21:43"><name pos:start="21:41" pos:end="21:43">buf</name></expr></argument>, <argument pos:start="21:46" pos:end="21:49"><expr pos:start="21:46" pos:end="21:49"><name pos:start="21:46" pos:end="21:49">size</name></expr></argument>, <argument pos:start="21:52" pos:end="21:57"><expr pos:start="21:52" pos:end="21:57"><operator pos:start="21:52" pos:end="21:52">&amp;</operator><name pos:start="21:53" pos:end="21:57">error</name></expr></argument>)</argument_list></call><operator pos:start="21:59" pos:end="21:59">)</operator></expr>)</condition> <block pos:start="21:62" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:28">

        <expr_stmt pos:start="23:9" pos:end="23:84"><expr pos:start="23:9" pos:end="23:83"><call pos:start="23:9" pos:end="23:83"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:83">(<argument pos:start="23:16" pos:end="23:16"><expr pos:start="23:16" pos:end="23:16"><name pos:start="23:16" pos:end="23:16">s</name></expr></argument>, <argument pos:start="23:19" pos:end="23:30"><expr pos:start="23:19" pos:end="23:30"><name pos:start="23:19" pos:end="23:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:33" pos:end="23:62"><expr pos:start="23:33" pos:end="23:62"><literal type="string" pos:start="23:33" pos:end="23:62">"pa_simple_write failed: %s\n"</literal></expr></argument>, <argument pos:start="23:65" pos:end="23:82"><expr pos:start="23:65" pos:end="23:82"><call pos:start="23:65" pos:end="23:82"><name pos:start="23:65" pos:end="23:75">pa_strerror</name><argument_list pos:start="23:76" pos:end="23:82">(<argument pos:start="23:77" pos:end="23:81"><expr pos:start="23:77" pos:end="23:81"><name pos:start="23:77" pos:end="23:81">error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:28">return <expr pos:start="25:16" pos:end="25:27"><call pos:start="25:16" pos:end="25:27"><name pos:start="25:16" pos:end="25:22">AVERROR</name><argument_list pos:start="25:23" pos:end="25:27">(<argument pos:start="25:24" pos:end="25:26"><expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="31:5" pos:end="31:13">return <expr pos:start="31:12" pos:end="31:12"><literal type="number" pos:start="31:12" pos:end="31:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
