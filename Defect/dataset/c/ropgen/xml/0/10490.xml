<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10490.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">udp_read</name><parameter_list pos:start="1:20" pos:end="1:58">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:30">URLContext</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">h</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:42">uint8_t</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">buf</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:57"><decl pos:start="1:50" pos:end="1:57"><type pos:start="1:50" pos:end="1:57"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:57">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:41">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">UDPContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:32">= <expr pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:21">h</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="14:0"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">avail</name></decl>;</decl_stmt>



<cpp:if pos:start="13:1" pos:end="13:17">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">HAVE_PTHREADS</name></expr></cpp:if>

    <if_stmt pos:start="15:5" pos:end="76:0"><if pos:start="15:5" pos:end="76:0">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:9">s</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:15">fifo</name></name></expr>)</condition> <block pos:start="15:18" pos:end="76:0">{<block_content pos:start="17:9" pos:end="71:20">

        <expr_stmt pos:start="17:9" pos:end="17:38"><expr pos:start="17:9" pos:end="17:37"><call pos:start="17:9" pos:end="17:37"><name pos:start="17:9" pos:end="17:26">pthread_mutex_lock</name><argument_list pos:start="17:27" pos:end="17:37">(<argument pos:start="17:28" pos:end="17:36"><expr pos:start="17:28" pos:end="17:36"><operator pos:start="17:28" pos:end="17:28">&amp;</operator><name pos:start="17:29" pos:end="17:36"><name pos:start="17:29" pos:end="17:29">s</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:36">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <do pos:start="19:9" pos:end="71:20">do <block pos:start="19:12" pos:end="71:9">{<block_content pos:start="21:13" pos:end="69:13">

            <expr_stmt pos:start="21:13" pos:end="21:42"><expr pos:start="21:13" pos:end="21:41"><name pos:start="21:13" pos:end="21:17">avail</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:41"><name pos:start="21:21" pos:end="21:32">av_fifo_size</name><argument_list pos:start="21:33" pos:end="21:41">(<argument pos:start="21:34" pos:end="21:40"><expr pos:start="21:34" pos:end="21:40"><name pos:start="21:34" pos:end="21:40"><name pos:start="21:34" pos:end="21:34">s</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:40">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="23:13" pos:end="69:13"><if pos:start="23:13" pos:end="51:13">if <condition pos:start="23:16" pos:end="23:22">(<expr pos:start="23:17" pos:end="23:21"><name pos:start="23:17" pos:end="23:21">avail</name></expr>)</condition> <block pos:start="23:24" pos:end="51:13">{<block_content pos:start="25:17" pos:end="49:29"> <comment type="line" pos:start="23:26" pos:end="23:37">// &gt;=size) {</comment>

                <decl_stmt pos:start="25:17" pos:end="25:31"><decl pos:start="25:17" pos:end="25:30"><type pos:start="25:17" pos:end="25:23"><name pos:start="25:17" pos:end="25:23">uint8_t</name></type> <name pos:start="25:25" pos:end="25:30"><name pos:start="25:25" pos:end="25:27">tmp</name><index pos:start="25:28" pos:end="25:30">[<expr pos:start="25:29" pos:end="25:29"><literal type="number" pos:start="25:29" pos:end="25:29">4</literal></expr>]</index></name></decl>;</decl_stmt>

                <expr_stmt pos:start="27:17" pos:end="27:48"><expr pos:start="27:17" pos:end="27:47"><call pos:start="27:17" pos:end="27:47"><name pos:start="27:17" pos:end="27:36">pthread_mutex_unlock</name><argument_list pos:start="27:37" pos:end="27:47">(<argument pos:start="27:38" pos:end="27:46"><expr pos:start="27:38" pos:end="27:46"><operator pos:start="27:38" pos:end="27:38">&amp;</operator><name pos:start="27:39" pos:end="27:46"><name pos:start="27:39" pos:end="27:39">s</name><operator pos:start="27:40" pos:end="27:41">-&gt;</operator><name pos:start="27:42" pos:end="27:46">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="31:17" pos:end="31:60"><expr pos:start="31:17" pos:end="31:59"><call pos:start="31:17" pos:end="31:59"><name pos:start="31:17" pos:end="31:36">av_fifo_generic_read</name><argument_list pos:start="31:37" pos:end="31:59">(<argument pos:start="31:38" pos:end="31:44"><expr pos:start="31:38" pos:end="31:44"><name pos:start="31:38" pos:end="31:44"><name pos:start="31:38" pos:end="31:38">s</name><operator pos:start="31:39" pos:end="31:40">-&gt;</operator><name pos:start="31:41" pos:end="31:44">fifo</name></name></expr></argument>, <argument pos:start="31:47" pos:end="31:49"><expr pos:start="31:47" pos:end="31:49"><name pos:start="31:47" pos:end="31:49">tmp</name></expr></argument>, <argument pos:start="31:52" pos:end="31:52"><expr pos:start="31:52" pos:end="31:52"><literal type="number" pos:start="31:52" pos:end="31:52">4</literal></expr></argument>, <argument pos:start="31:55" pos:end="31:58"><expr pos:start="31:55" pos:end="31:58"><name pos:start="31:55" pos:end="31:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:36"><expr pos:start="33:17" pos:end="33:35"><name pos:start="33:17" pos:end="33:21">avail</name><operator pos:start="33:22" pos:end="33:22">=</operator> <call pos:start="33:24" pos:end="33:35"><name pos:start="33:24" pos:end="33:30">AV_RL32</name><argument_list pos:start="33:31" pos:end="33:35">(<argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><name pos:start="33:32" pos:end="33:34">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="35:17" pos:end="41:17"><if pos:start="35:17" pos:end="41:17">if<condition pos:start="35:19" pos:end="35:32">(<expr pos:start="35:20" pos:end="35:31"><name pos:start="35:20" pos:end="35:24">avail</name> <operator pos:start="35:26" pos:end="35:26">&gt;</operator> <name pos:start="35:28" pos:end="35:31">size</name></expr>)</condition><block pos:start="35:33" pos:end="41:17">{<block_content pos:start="37:21" pos:end="39:32">

                    <expr_stmt pos:start="37:21" pos:end="37:105"><expr pos:start="37:21" pos:end="37:104"><call pos:start="37:21" pos:end="37:104"><name pos:start="37:21" pos:end="37:26">av_log</name><argument_list pos:start="37:27" pos:end="37:104">(<argument pos:start="37:28" pos:end="37:28"><expr pos:start="37:28" pos:end="37:28"><name pos:start="37:28" pos:end="37:28">h</name></expr></argument>, <argument pos:start="37:31" pos:end="37:44"><expr pos:start="37:31" pos:end="37:44"><name pos:start="37:31" pos:end="37:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="37:47" pos:end="37:103"><expr pos:start="37:47" pos:end="37:103"><literal type="string" pos:start="37:47" pos:end="37:103">"Part of datagram lost due to insufficient buffer size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="39:21" pos:end="39:32"><expr pos:start="39:21" pos:end="39:31"><name pos:start="39:21" pos:end="39:25">avail</name><operator pos:start="39:26" pos:end="39:26">=</operator> <name pos:start="39:28" pos:end="39:31">size</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="45:17" pos:end="45:64"><expr pos:start="45:17" pos:end="45:63"><call pos:start="45:17" pos:end="45:63"><name pos:start="45:17" pos:end="45:36">av_fifo_generic_read</name><argument_list pos:start="45:37" pos:end="45:63">(<argument pos:start="45:38" pos:end="45:44"><expr pos:start="45:38" pos:end="45:44"><name pos:start="45:38" pos:end="45:44"><name pos:start="45:38" pos:end="45:38">s</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:44">fifo</name></name></expr></argument>, <argument pos:start="45:47" pos:end="45:49"><expr pos:start="45:47" pos:end="45:49"><name pos:start="45:47" pos:end="45:49">buf</name></expr></argument>, <argument pos:start="45:52" pos:end="45:56"><expr pos:start="45:52" pos:end="45:56"><name pos:start="45:52" pos:end="45:56">avail</name></expr></argument>, <argument pos:start="45:59" pos:end="45:62"><expr pos:start="45:59" pos:end="45:62"><name pos:start="45:59" pos:end="45:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:61"><expr pos:start="47:17" pos:end="47:60"><call pos:start="47:17" pos:end="47:60"><name pos:start="47:17" pos:end="47:29">av_fifo_drain</name><argument_list pos:start="47:30" pos:end="47:60">(<argument pos:start="47:31" pos:end="47:37"><expr pos:start="47:31" pos:end="47:37"><name pos:start="47:31" pos:end="47:37"><name pos:start="47:31" pos:end="47:31">s</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:37">fifo</name></name></expr></argument>, <argument pos:start="47:40" pos:end="47:59"><expr pos:start="47:40" pos:end="47:59"><call pos:start="47:40" pos:end="47:51"><name pos:start="47:40" pos:end="47:46">AV_RL32</name><argument_list pos:start="47:47" pos:end="47:51">(<argument pos:start="47:48" pos:end="47:50"><expr pos:start="47:48" pos:end="47:50"><name pos:start="47:48" pos:end="47:50">tmp</name></expr></argument>)</argument_list></call> <operator pos:start="47:53" pos:end="47:53">-</operator> <name pos:start="47:55" pos:end="47:59">avail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="49:17" pos:end="49:29">return <expr pos:start="49:24" pos:end="49:28"><name pos:start="49:24" pos:end="49:28">avail</name></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="51:15" pos:end="57:13">else if<condition pos:start="51:22" pos:end="51:47">(<expr pos:start="51:23" pos:end="51:46"><name pos:start="51:23" pos:end="51:46"><name pos:start="51:23" pos:end="51:23">s</name><operator pos:start="51:24" pos:end="51:25">-&gt;</operator><name pos:start="51:26" pos:end="51:46">circular_buffer_error</name></name></expr>)</condition><block pos:start="51:48" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:48">

                <expr_stmt pos:start="53:17" pos:end="53:48"><expr pos:start="53:17" pos:end="53:47"><call pos:start="53:17" pos:end="53:47"><name pos:start="53:17" pos:end="53:36">pthread_mutex_unlock</name><argument_list pos:start="53:37" pos:end="53:47">(<argument pos:start="53:38" pos:end="53:46"><expr pos:start="53:38" pos:end="53:46"><operator pos:start="53:38" pos:end="53:38">&amp;</operator><name pos:start="53:39" pos:end="53:46"><name pos:start="53:39" pos:end="53:39">s</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:46">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="55:17" pos:end="55:48">return <expr pos:start="55:24" pos:end="55:47"><name pos:start="55:24" pos:end="55:47"><name pos:start="55:24" pos:end="55:24">s</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:47">circular_buffer_error</name></name></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="57:15" pos:end="63:13">else if<condition pos:start="57:22" pos:end="57:52">(<expr pos:start="57:23" pos:end="57:51"><name pos:start="57:23" pos:end="57:30"><name pos:start="57:23" pos:end="57:23">h</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:30">flags</name></name> <operator pos:start="57:32" pos:end="57:32">&amp;</operator> <name pos:start="57:34" pos:end="57:51">AVIO_FLAG_NONBLOCK</name></expr>)</condition> <block pos:start="57:54" pos:end="63:13">{<block_content pos:start="59:17" pos:end="61:39">

                <expr_stmt pos:start="59:17" pos:end="59:48"><expr pos:start="59:17" pos:end="59:47"><call pos:start="59:17" pos:end="59:47"><name pos:start="59:17" pos:end="59:36">pthread_mutex_unlock</name><argument_list pos:start="59:37" pos:end="59:47">(<argument pos:start="59:38" pos:end="59:46"><expr pos:start="59:38" pos:end="59:46"><operator pos:start="59:38" pos:end="59:38">&amp;</operator><name pos:start="59:39" pos:end="59:46"><name pos:start="59:39" pos:end="59:39">s</name><operator pos:start="59:40" pos:end="59:41">-&gt;</operator><name pos:start="59:42" pos:end="59:46">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="61:17" pos:end="61:39">return <expr pos:start="61:24" pos:end="61:38"><call pos:start="61:24" pos:end="61:38"><name pos:start="61:24" pos:end="61:30">AVERROR</name><argument_list pos:start="61:31" pos:end="61:38">(<argument pos:start="61:32" pos:end="61:37"><expr pos:start="61:32" pos:end="61:37"><name pos:start="61:32" pos:end="61:37">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if>

            <else pos:start="65:13" pos:end="69:13">else <block pos:start="65:18" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:55">

                <expr_stmt pos:start="67:17" pos:end="67:55"><expr pos:start="67:17" pos:end="67:54"><call pos:start="67:17" pos:end="67:54"><name pos:start="67:17" pos:end="67:33">pthread_cond_wait</name><argument_list pos:start="67:34" pos:end="67:54">(<argument pos:start="67:35" pos:end="67:42"><expr pos:start="67:35" pos:end="67:42"><operator pos:start="67:35" pos:end="67:35">&amp;</operator><name pos:start="67:36" pos:end="67:42"><name pos:start="67:36" pos:end="67:36">s</name><operator pos:start="67:37" pos:end="67:38">-&gt;</operator><name pos:start="67:39" pos:end="67:42">cond</name></name></expr></argument>, <argument pos:start="67:45" pos:end="67:53"><expr pos:start="67:45" pos:end="67:53"><operator pos:start="67:45" pos:end="67:45">&amp;</operator><name pos:start="67:46" pos:end="67:53"><name pos:start="67:46" pos:end="67:46">s</name><operator pos:start="67:47" pos:end="67:48">-&gt;</operator><name pos:start="67:49" pos:end="67:53">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block> while<condition pos:start="71:16" pos:end="71:19">( <expr pos:start="71:18" pos:end="71:18"><literal type="number" pos:start="71:18" pos:end="71:18">1</literal></expr>)</condition>;</do>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="79:5" pos:end="87:5"><if pos:start="79:5" pos:end="87:5">if <condition pos:start="79:8" pos:end="79:41">(<expr pos:start="79:9" pos:end="79:40"><operator pos:start="79:9" pos:end="79:9">!</operator><operator pos:start="79:10" pos:end="79:10">(</operator><name pos:start="79:11" pos:end="79:18"><name pos:start="79:11" pos:end="79:11">h</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:18">flags</name></name> <operator pos:start="79:20" pos:end="79:20">&amp;</operator> <name pos:start="79:22" pos:end="79:39">AVIO_FLAG_NONBLOCK</name><operator pos:start="79:40" pos:end="79:40">)</operator></expr>)</condition> <block pos:start="79:43" pos:end="87:5">{<block_content pos:start="81:9" pos:end="85:23">

        <expr_stmt pos:start="81:9" pos:end="81:47"><expr pos:start="81:9" pos:end="81:46"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:46"><name pos:start="81:15" pos:end="81:32">ff_network_wait_fd</name><argument_list pos:start="81:33" pos:end="81:46">(<argument pos:start="81:34" pos:end="81:42"><expr pos:start="81:34" pos:end="81:42"><name pos:start="81:34" pos:end="81:42"><name pos:start="81:34" pos:end="81:34">s</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:42">udp_fd</name></name></expr></argument>, <argument pos:start="81:45" pos:end="81:45"><expr pos:start="81:45" pos:end="81:45"><literal type="number" pos:start="81:45" pos:end="81:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="85:23"><if pos:start="83:9" pos:end="85:23">if <condition pos:start="83:12" pos:end="83:20">(<expr pos:start="83:13" pos:end="83:19"><name pos:start="83:13" pos:end="83:15">ret</name> <operator pos:start="83:17" pos:end="83:17">&lt;</operator> <literal type="number" pos:start="83:19" pos:end="83:19">0</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:23"><block_content pos:start="85:13" pos:end="85:23">

            <return pos:start="85:13" pos:end="85:23">return <expr pos:start="85:20" pos:end="85:22"><name pos:start="85:20" pos:end="85:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:40"><expr pos:start="89:5" pos:end="89:39"><name pos:start="89:5" pos:end="89:7">ret</name> <operator pos:start="89:9" pos:end="89:9">=</operator> <call pos:start="89:11" pos:end="89:39"><name pos:start="89:11" pos:end="89:14">recv</name><argument_list pos:start="89:15" pos:end="89:39">(<argument pos:start="89:16" pos:end="89:24"><expr pos:start="89:16" pos:end="89:24"><name pos:start="89:16" pos:end="89:24"><name pos:start="89:16" pos:end="89:16">s</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:24">udp_fd</name></name></expr></argument>, <argument pos:start="89:27" pos:end="89:29"><expr pos:start="89:27" pos:end="89:29"><name pos:start="89:27" pos:end="89:29">buf</name></expr></argument>, <argument pos:start="89:32" pos:end="89:35"><expr pos:start="89:32" pos:end="89:35"><name pos:start="89:32" pos:end="89:35">size</name></expr></argument>, <argument pos:start="89:38" pos:end="89:38"><expr pos:start="89:38" pos:end="89:38"><literal type="number" pos:start="89:38" pos:end="89:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="93:5" pos:end="93:41">return <expr pos:start="93:12" pos:end="93:40"><ternary pos:start="93:12" pos:end="93:40"><condition pos:start="93:12" pos:end="93:20"><expr pos:start="93:12" pos:end="93:18"><name pos:start="93:12" pos:end="93:14">ret</name> <operator pos:start="93:16" pos:end="93:16">&lt;</operator> <literal type="number" pos:start="93:18" pos:end="93:18">0</literal></expr> ?</condition><then pos:start="93:22" pos:end="93:34"> <expr pos:start="93:22" pos:end="93:34"><call pos:start="93:22" pos:end="93:34"><name pos:start="93:22" pos:end="93:32">ff_neterrno</name><argument_list pos:start="93:33" pos:end="93:34">()</argument_list></call></expr> </then><else pos:start="93:36" pos:end="93:40">: <expr pos:start="93:38" pos:end="93:40"><name pos:start="93:38" pos:end="93:40">ret</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
