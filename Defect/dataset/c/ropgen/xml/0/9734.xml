<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9734.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">bochs_open</name><parameter_list pos:start="1:22" pos:end="3:35">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:27">Error</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier><modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="193:1">{<block_content pos:start="7:5" pos:end="191:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVBochsState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:23">bochs_header</name></name></type> <name pos:start="11:25" pos:end="11:29">bochs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="19:44"><expr pos:start="17:5" pos:end="19:43"><name pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:6">bs</name><operator pos:start="17:7" pos:end="17:8">-&gt;</operator><name pos:start="17:9" pos:end="17:12">file</name></name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="19:43"><name pos:start="17:16" pos:end="17:30">bdrv_open_child</name><argument_list pos:start="17:31" pos:end="19:43">(<argument pos:start="17:32" pos:end="17:35"><expr pos:start="17:32" pos:end="17:35"><name pos:start="17:32" pos:end="17:35">NULL</name></expr></argument>, <argument pos:start="17:38" pos:end="17:44"><expr pos:start="17:38" pos:end="17:44"><name pos:start="17:38" pos:end="17:44">options</name></expr></argument>, <argument pos:start="17:47" pos:end="17:52"><expr pos:start="17:47" pos:end="17:52"><literal type="string" pos:start="17:47" pos:end="17:52">"file"</literal></expr></argument>, <argument pos:start="17:55" pos:end="17:56"><expr pos:start="17:55" pos:end="17:56"><name pos:start="17:55" pos:end="17:56">bs</name></expr></argument>, <argument pos:start="17:59" pos:end="17:69"><expr pos:start="17:59" pos:end="17:69"><operator pos:start="17:59" pos:end="17:59">&amp;</operator><name pos:start="17:60" pos:end="17:69">child_file</name></expr></argument>,

                               <argument pos:start="19:32" pos:end="19:36"><expr pos:start="19:32" pos:end="19:36"><name pos:start="19:32" pos:end="19:36">false</name></expr></argument>, <argument pos:start="19:39" pos:end="19:42"><expr pos:start="19:39" pos:end="19:42"><name pos:start="19:39" pos:end="19:42">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:18">(<expr pos:start="21:9" pos:end="21:17"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:17"><name pos:start="21:10" pos:end="21:11">bs</name><operator pos:start="21:12" pos:end="21:13">-&gt;</operator><name pos:start="21:14" pos:end="21:17">file</name></name></expr>)</condition> <block pos:start="21:20" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:23">

        <return pos:start="23:9" pos:end="23:23">return <expr pos:start="23:16" pos:end="23:22"><operator pos:start="23:16" pos:end="23:16">-</operator><name pos:start="23:17" pos:end="23:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:33"><expr pos:start="29:5" pos:end="29:32"><call pos:start="29:5" pos:end="29:32"><name pos:start="29:5" pos:end="29:22">bdrv_set_read_only</name><argument_list pos:start="29:23" pos:end="29:32">(<argument pos:start="29:24" pos:end="29:25"><expr pos:start="29:24" pos:end="29:25"><name pos:start="29:24" pos:end="29:25">bs</name></expr></argument>, <argument pos:start="29:28" pos:end="29:31"><expr pos:start="29:28" pos:end="29:31"><name pos:start="29:28" pos:end="29:31">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="29:35" pos:end="29:60">/* no write support yet */</comment>



    <expr_stmt pos:start="33:5" pos:end="33:57"><expr pos:start="33:5" pos:end="33:56"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:56"><name pos:start="33:11" pos:end="33:20">bdrv_pread</name><argument_list pos:start="33:21" pos:end="33:56">(<argument pos:start="33:22" pos:end="33:29"><expr pos:start="33:22" pos:end="33:29"><name pos:start="33:22" pos:end="33:29"><name pos:start="33:22" pos:end="33:23">bs</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:29">file</name></name></expr></argument>, <argument pos:start="33:32" pos:end="33:32"><expr pos:start="33:32" pos:end="33:32"><literal type="number" pos:start="33:32" pos:end="33:32">0</literal></expr></argument>, <argument pos:start="33:35" pos:end="33:40"><expr pos:start="33:35" pos:end="33:40"><operator pos:start="33:35" pos:end="33:35">&amp;</operator><name pos:start="33:36" pos:end="33:40">bochs</name></expr></argument>, <argument pos:start="33:43" pos:end="33:55"><expr pos:start="33:43" pos:end="33:55"><sizeof pos:start="33:43" pos:end="33:55">sizeof<argument_list pos:start="33:49" pos:end="33:55">(<argument pos:start="33:50" pos:end="33:54"><expr pos:start="33:50" pos:end="33:54"><name pos:start="33:50" pos:end="33:54">bochs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:16">(<expr pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">&lt;</operator> <literal type="number" pos:start="35:15" pos:end="35:15">0</literal></expr>)</condition> <block pos:start="35:18" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:19">

        <return pos:start="37:9" pos:end="37:19">return <expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="57:5"><if pos:start="43:5" pos:end="57:5">if <condition pos:start="43:8" pos:end="51:51">(<expr pos:start="43:9" pos:end="51:50"><call pos:start="43:9" pos:end="43:41"><name pos:start="43:9" pos:end="43:14">strcmp</name><argument_list pos:start="43:15" pos:end="43:41">(<argument pos:start="43:16" pos:end="43:26"><expr pos:start="43:16" pos:end="43:26"><name pos:start="43:16" pos:end="43:26"><name pos:start="43:16" pos:end="43:20">bochs</name><operator pos:start="43:21" pos:end="43:21">.</operator><name pos:start="43:22" pos:end="43:26">magic</name></name></expr></argument>, <argument pos:start="43:29" pos:end="43:40"><expr pos:start="43:29" pos:end="43:40"><name pos:start="43:29" pos:end="43:40">HEADER_MAGIC</name></expr></argument>)</argument_list></call> <operator pos:start="43:43" pos:end="43:44">||</operator>

        <call pos:start="45:9" pos:end="45:40"><name pos:start="45:9" pos:end="45:14">strcmp</name><argument_list pos:start="45:15" pos:end="45:40">(<argument pos:start="45:16" pos:end="45:25"><expr pos:start="45:16" pos:end="45:25"><name pos:start="45:16" pos:end="45:25"><name pos:start="45:16" pos:end="45:20">bochs</name><operator pos:start="45:21" pos:end="45:21">.</operator><name pos:start="45:22" pos:end="45:25">type</name></name></expr></argument>, <argument pos:start="45:28" pos:end="45:39"><expr pos:start="45:28" pos:end="45:39"><name pos:start="45:28" pos:end="45:39">REDOLOG_TYPE</name></expr></argument>)</argument_list></call> <operator pos:start="45:42" pos:end="45:43">||</operator>

        <call pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:14">strcmp</name><argument_list pos:start="47:15" pos:end="47:43">(<argument pos:start="47:16" pos:end="47:28"><expr pos:start="47:16" pos:end="47:28"><name pos:start="47:16" pos:end="47:28"><name pos:start="47:16" pos:end="47:20">bochs</name><operator pos:start="47:21" pos:end="47:21">.</operator><name pos:start="47:22" pos:end="47:28">subtype</name></name></expr></argument>, <argument pos:start="47:31" pos:end="47:42"><expr pos:start="47:31" pos:end="47:42"><name pos:start="47:31" pos:end="47:42">GROWING_TYPE</name></expr></argument>)</argument_list></call> <operator pos:start="47:45" pos:end="47:46">||</operator>

	<operator pos:start="49:9" pos:end="49:9">(</operator><operator pos:start="49:10" pos:end="49:10">(</operator><call pos:start="49:11" pos:end="49:36"><name pos:start="49:11" pos:end="49:21">le32_to_cpu</name><argument_list pos:start="49:22" pos:end="49:36">(<argument pos:start="49:23" pos:end="49:35"><expr pos:start="49:23" pos:end="49:35"><name pos:start="49:23" pos:end="49:35"><name pos:start="49:23" pos:end="49:27">bochs</name><operator pos:start="49:28" pos:end="49:28">.</operator><name pos:start="49:29" pos:end="49:35">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="49:38" pos:end="49:39">!=</operator> <name pos:start="49:41" pos:end="49:54">HEADER_VERSION</name><operator pos:start="49:55" pos:end="49:55">)</operator> <operator pos:start="49:57" pos:end="49:58">&amp;&amp;</operator>

	<operator pos:start="51:9" pos:end="51:9">(</operator><call pos:start="51:10" pos:end="51:35"><name pos:start="51:10" pos:end="51:20">le32_to_cpu</name><argument_list pos:start="51:21" pos:end="51:35">(<argument pos:start="51:22" pos:end="51:34"><expr pos:start="51:22" pos:end="51:34"><name pos:start="51:22" pos:end="51:34"><name pos:start="51:22" pos:end="51:26">bochs</name><operator pos:start="51:27" pos:end="51:27">.</operator><name pos:start="51:28" pos:end="51:34">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:37" pos:end="51:38">!=</operator> <name pos:start="51:40" pos:end="51:48">HEADER_V1</name><operator pos:start="51:49" pos:end="51:49">)</operator><operator pos:start="51:50" pos:end="51:50">)</operator></expr>)</condition> <block pos:start="51:53" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:23">

        <expr_stmt pos:start="53:9" pos:end="53:54"><expr pos:start="53:9" pos:end="53:53"><call pos:start="53:9" pos:end="53:53"><name pos:start="53:9" pos:end="53:18">error_setg</name><argument_list pos:start="53:19" pos:end="53:53">(<argument pos:start="53:20" pos:end="53:23"><expr pos:start="53:20" pos:end="53:23"><name pos:start="53:20" pos:end="53:23">errp</name></expr></argument>, <argument pos:start="53:26" pos:end="53:52"><expr pos:start="53:26" pos:end="53:52"><literal type="string" pos:start="53:26" pos:end="53:52">"Image not in Bochs format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:23">return <expr pos:start="55:16" pos:end="55:22"><operator pos:start="55:16" pos:end="55:16">-</operator><name pos:start="55:17" pos:end="55:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:48">(<expr pos:start="61:9" pos:end="61:47"><call pos:start="61:9" pos:end="61:34"><name pos:start="61:9" pos:end="61:19">le32_to_cpu</name><argument_list pos:start="61:20" pos:end="61:34">(<argument pos:start="61:21" pos:end="61:33"><expr pos:start="61:21" pos:end="61:33"><name pos:start="61:21" pos:end="61:33"><name pos:start="61:21" pos:end="61:25">bochs</name><operator pos:start="61:26" pos:end="61:26">.</operator><name pos:start="61:27" pos:end="61:33">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:36" pos:end="61:37">==</operator> <name pos:start="61:39" pos:end="61:47">HEADER_V1</name></expr>)</condition> <block pos:start="61:50" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:75">

        <expr_stmt pos:start="63:9" pos:end="63:75"><expr pos:start="63:9" pos:end="63:74"><name pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:10">bs</name><operator pos:start="63:11" pos:end="63:12">-&gt;</operator><name pos:start="63:13" pos:end="63:25">total_sectors</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <call pos:start="63:29" pos:end="63:68"><name pos:start="63:29" pos:end="63:39">le64_to_cpu</name><argument_list pos:start="63:40" pos:end="63:68">(<argument pos:start="63:41" pos:end="63:67"><expr pos:start="63:41" pos:end="63:67"><name pos:start="63:41" pos:end="63:67"><name pos:start="63:41" pos:end="63:45">bochs</name><operator pos:start="63:46" pos:end="63:46">.</operator><name pos:start="63:47" pos:end="63:51">extra</name><operator pos:start="63:52" pos:end="63:52">.</operator><name pos:start="63:53" pos:end="63:62">redolog_v1</name><operator pos:start="63:63" pos:end="63:63">.</operator><name pos:start="63:64" pos:end="63:67">disk</name></name></expr></argument>)</argument_list></call> <operator pos:start="63:70" pos:end="63:70">/</operator> <literal type="number" pos:start="63:72" pos:end="63:74">512</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="69:5">else <block pos:start="65:12" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:72">

        <expr_stmt pos:start="67:9" pos:end="67:72"><expr pos:start="67:9" pos:end="67:71"><name pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:10">bs</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:25">total_sectors</name></name> <operator pos:start="67:27" pos:end="67:27">=</operator> <call pos:start="67:29" pos:end="67:65"><name pos:start="67:29" pos:end="67:39">le64_to_cpu</name><argument_list pos:start="67:40" pos:end="67:65">(<argument pos:start="67:41" pos:end="67:64"><expr pos:start="67:41" pos:end="67:64"><name pos:start="67:41" pos:end="67:64"><name pos:start="67:41" pos:end="67:45">bochs</name><operator pos:start="67:46" pos:end="67:46">.</operator><name pos:start="67:47" pos:end="67:51">extra</name><operator pos:start="67:52" pos:end="67:52">.</operator><name pos:start="67:53" pos:end="67:59">redolog</name><operator pos:start="67:60" pos:end="67:60">.</operator><name pos:start="67:61" pos:end="67:64">disk</name></name></expr></argument>)</argument_list></call> <operator pos:start="67:67" pos:end="67:67">/</operator> <literal type="number" pos:start="67:69" pos:end="67:71">512</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="75:71">/* Limit to 1M entries to avoid unbounded allocation. This is what is

     * needed for the largest image that bximage can create (~8 TB). */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:49"><expr pos:start="77:5" pos:end="77:48"><name pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:19">catalog_size</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:48"><name pos:start="77:23" pos:end="77:33">le32_to_cpu</name><argument_list pos:start="77:34" pos:end="77:48">(<argument pos:start="77:35" pos:end="77:47"><expr pos:start="77:35" pos:end="77:47"><name pos:start="77:35" pos:end="77:47"><name pos:start="77:35" pos:end="77:39">bochs</name><operator pos:start="77:40" pos:end="77:40">.</operator><name pos:start="77:41" pos:end="77:47">catalog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:35">(<expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:23">catalog_size</name></name> <operator pos:start="79:25" pos:end="79:25">&gt;</operator> <literal type="number" pos:start="79:27" pos:end="79:34">0x100000</literal></expr>)</condition> <block pos:start="79:37" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:22">

        <expr_stmt pos:start="81:9" pos:end="81:54"><expr pos:start="81:9" pos:end="81:53"><call pos:start="81:9" pos:end="81:53"><name pos:start="81:9" pos:end="81:18">error_setg</name><argument_list pos:start="81:19" pos:end="81:53">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">errp</name></expr></argument>, <argument pos:start="81:26" pos:end="81:52"><expr pos:start="81:26" pos:end="81:52"><literal type="string" pos:start="81:26" pos:end="81:52">"Catalog size is too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:22">return <expr pos:start="83:16" pos:end="83:21"><operator pos:start="83:16" pos:end="83:16">-</operator><name pos:start="83:17" pos:end="83:21">EFBIG</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:61"><expr pos:start="89:5" pos:end="89:60"><name pos:start="89:5" pos:end="89:21"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:21">catalog_bitmap</name></name> <operator pos:start="89:23" pos:end="89:23">=</operator> <call pos:start="89:25" pos:end="89:60"><name pos:start="89:25" pos:end="89:33">g_try_new</name><argument_list pos:start="89:34" pos:end="89:60">(<argument pos:start="89:35" pos:end="89:42"><expr pos:start="89:35" pos:end="89:42"><name pos:start="89:35" pos:end="89:42">uint32_t</name></expr></argument>, <argument pos:start="89:45" pos:end="89:59"><expr pos:start="89:45" pos:end="89:59"><name pos:start="89:45" pos:end="89:59"><name pos:start="89:45" pos:end="89:45">s</name><operator pos:start="89:46" pos:end="89:47">-&gt;</operator><name pos:start="89:48" pos:end="89:59">catalog_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:53">(<expr pos:start="91:9" pos:end="91:52"><name pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:23">catalog_size</name></name> <operator pos:start="91:25" pos:end="91:26">&amp;&amp;</operator> <name pos:start="91:28" pos:end="91:44"><name pos:start="91:28" pos:end="91:28">s</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:44">catalog_bitmap</name></name> <operator pos:start="91:46" pos:end="91:47">==</operator> <name pos:start="91:49" pos:end="91:52">NULL</name></expr>)</condition> <block pos:start="91:55" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:23">

        <expr_stmt pos:start="93:9" pos:end="93:66"><expr pos:start="93:9" pos:end="93:65"><call pos:start="93:9" pos:end="93:65"><name pos:start="93:9" pos:end="93:18">error_setg</name><argument_list pos:start="93:19" pos:end="93:65">(<argument pos:start="93:20" pos:end="93:23"><expr pos:start="93:20" pos:end="93:23"><name pos:start="93:20" pos:end="93:23">errp</name></expr></argument>, <argument pos:start="93:26" pos:end="93:64"><expr pos:start="93:26" pos:end="93:64"><literal type="string" pos:start="93:26" pos:end="93:64">"Could not allocate memory for catalog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:23">return <expr pos:start="95:16" pos:end="95:22"><operator pos:start="95:16" pos:end="95:16">-</operator><name pos:start="95:17" pos:end="95:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="103:42"><expr pos:start="101:5" pos:end="103:41"><name pos:start="101:5" pos:end="101:7">ret</name> <operator pos:start="101:9" pos:end="101:9">=</operator> <call pos:start="101:11" pos:end="103:41"><name pos:start="101:11" pos:end="101:20">bdrv_pread</name><argument_list pos:start="101:21" pos:end="103:41">(<argument pos:start="101:22" pos:end="101:29"><expr pos:start="101:22" pos:end="101:29"><name pos:start="101:22" pos:end="101:29"><name pos:start="101:22" pos:end="101:23">bs</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:29">file</name></name></expr></argument>, <argument pos:start="101:32" pos:end="101:56"><expr pos:start="101:32" pos:end="101:56"><call pos:start="101:32" pos:end="101:56"><name pos:start="101:32" pos:end="101:42">le32_to_cpu</name><argument_list pos:start="101:43" pos:end="101:56">(<argument pos:start="101:44" pos:end="101:55"><expr pos:start="101:44" pos:end="101:55"><name pos:start="101:44" pos:end="101:55"><name pos:start="101:44" pos:end="101:48">bochs</name><operator pos:start="101:49" pos:end="101:49">.</operator><name pos:start="101:50" pos:end="101:55">header</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="101:59" pos:end="101:75"><expr pos:start="101:59" pos:end="101:75"><name pos:start="101:59" pos:end="101:75"><name pos:start="101:59" pos:end="101:59">s</name><operator pos:start="101:60" pos:end="101:61">-&gt;</operator><name pos:start="101:62" pos:end="101:75">catalog_bitmap</name></name></expr></argument>,

                     <argument pos:start="103:22" pos:end="103:40"><expr pos:start="103:22" pos:end="103:40"><name pos:start="103:22" pos:end="103:36"><name pos:start="103:22" pos:end="103:22">s</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:36">catalog_size</name></name> <operator pos:start="103:38" pos:end="103:38">*</operator> <literal type="number" pos:start="103:40" pos:end="103:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:16">(<expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">&lt;</operator> <literal type="number" pos:start="105:15" pos:end="105:15">0</literal></expr>)</condition> <block pos:start="105:18" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:18">

        <goto pos:start="107:9" pos:end="107:18">goto <name pos:start="107:14" pos:end="107:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="113:5" pos:end="115:44">for <control pos:start="113:9" pos:end="113:41">(<init pos:start="113:10" pos:end="113:15"><expr pos:start="113:10" pos:end="113:14"><name pos:start="113:10" pos:end="113:10">i</name> <operator pos:start="113:12" pos:end="113:12">=</operator> <literal type="number" pos:start="113:14" pos:end="113:14">0</literal></expr>;</init> <condition pos:start="113:17" pos:end="113:36"><expr pos:start="113:17" pos:end="113:35"><name pos:start="113:17" pos:end="113:17">i</name> <operator pos:start="113:19" pos:end="113:19">&lt;</operator> <name pos:start="113:21" pos:end="113:35"><name pos:start="113:21" pos:end="113:21">s</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:35">catalog_size</name></name></expr>;</condition> <incr pos:start="113:38" pos:end="113:40"><expr pos:start="113:38" pos:end="113:40"><name pos:start="113:38" pos:end="113:38">i</name><operator pos:start="113:39" pos:end="113:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="115:9" pos:end="115:44"><block_content pos:start="115:9" pos:end="115:44">

	<expr_stmt pos:start="115:9" pos:end="115:44"><expr pos:start="115:9" pos:end="115:43"><call pos:start="115:9" pos:end="115:43"><name pos:start="115:9" pos:end="115:20">le32_to_cpus</name><argument_list pos:start="115:21" pos:end="115:43">(<argument pos:start="115:22" pos:end="115:42"><expr pos:start="115:22" pos:end="115:42"><operator pos:start="115:22" pos:end="115:22">&amp;</operator><name pos:start="115:23" pos:end="115:42"><name pos:start="115:23" pos:end="115:23">s</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:39">catalog_bitmap</name><index pos:start="115:40" pos:end="115:42">[<expr pos:start="115:41" pos:end="115:41"><name pos:start="115:41" pos:end="115:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="119:5" pos:end="119:71"><expr pos:start="119:5" pos:end="119:70"><name pos:start="119:5" pos:end="119:18"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:18">data_offset</name></name> <operator pos:start="119:20" pos:end="119:20">=</operator> <call pos:start="119:22" pos:end="119:46"><name pos:start="119:22" pos:end="119:32">le32_to_cpu</name><argument_list pos:start="119:33" pos:end="119:46">(<argument pos:start="119:34" pos:end="119:45"><expr pos:start="119:34" pos:end="119:45"><name pos:start="119:34" pos:end="119:45"><name pos:start="119:34" pos:end="119:38">bochs</name><operator pos:start="119:39" pos:end="119:39">.</operator><name pos:start="119:40" pos:end="119:45">header</name></name></expr></argument>)</argument_list></call> <operator pos:start="119:48" pos:end="119:48">+</operator> <operator pos:start="119:50" pos:end="119:50">(</operator><name pos:start="119:51" pos:end="119:65"><name pos:start="119:51" pos:end="119:51">s</name><operator pos:start="119:52" pos:end="119:53">-&gt;</operator><name pos:start="119:54" pos:end="119:65">catalog_size</name></name> <operator pos:start="119:67" pos:end="119:67">*</operator> <literal type="number" pos:start="119:69" pos:end="119:69">4</literal><operator pos:start="119:70" pos:end="119:70">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:65"><expr pos:start="123:5" pos:end="123:64"><name pos:start="123:5" pos:end="123:20"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:20">bitmap_blocks</name></name> <operator pos:start="123:22" pos:end="123:22">=</operator> <literal type="number" pos:start="123:24" pos:end="123:26">1</literal> <operator pos:start="123:26" pos:end="123:26">+</operator> <operator pos:start="123:28" pos:end="123:28">(</operator><call pos:start="123:29" pos:end="123:53"><name pos:start="123:29" pos:end="123:39">le32_to_cpu</name><argument_list pos:start="123:40" pos:end="123:53">(<argument pos:start="123:41" pos:end="123:52"><expr pos:start="123:41" pos:end="123:52"><name pos:start="123:41" pos:end="123:52"><name pos:start="123:41" pos:end="123:45">bochs</name><operator pos:start="123:46" pos:end="123:46">.</operator><name pos:start="123:47" pos:end="123:52">bitmap</name></name></expr></argument>)</argument_list></call> <operator pos:start="123:55" pos:end="123:55">-</operator> <literal type="number" pos:start="123:57" pos:end="123:57">1</literal><operator pos:start="123:58" pos:end="123:58">)</operator> <operator pos:start="123:60" pos:end="123:60">/</operator> <literal type="number" pos:start="123:62" pos:end="123:64">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:65"><expr pos:start="125:5" pos:end="125:64"><name pos:start="125:5" pos:end="125:20"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:20">extent_blocks</name></name> <operator pos:start="125:22" pos:end="125:22">=</operator> <literal type="number" pos:start="125:24" pos:end="125:26">1</literal> <operator pos:start="125:26" pos:end="125:26">+</operator> <operator pos:start="125:28" pos:end="125:28">(</operator><call pos:start="125:29" pos:end="125:53"><name pos:start="125:29" pos:end="125:39">le32_to_cpu</name><argument_list pos:start="125:40" pos:end="125:53">(<argument pos:start="125:41" pos:end="125:52"><expr pos:start="125:41" pos:end="125:52"><name pos:start="125:41" pos:end="125:52"><name pos:start="125:41" pos:end="125:45">bochs</name><operator pos:start="125:46" pos:end="125:46">.</operator><name pos:start="125:47" pos:end="125:52">extent</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:55" pos:end="125:55">-</operator> <literal type="number" pos:start="125:57" pos:end="125:57">1</literal><operator pos:start="125:58" pos:end="125:58">)</operator> <operator pos:start="125:60" pos:end="125:60">/</operator> <literal type="number" pos:start="125:62" pos:end="125:64">512</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:47"><expr pos:start="129:5" pos:end="129:46"><name pos:start="129:5" pos:end="129:18"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:18">extent_size</name></name> <operator pos:start="129:20" pos:end="129:20">=</operator> <call pos:start="129:22" pos:end="129:46"><name pos:start="129:22" pos:end="129:32">le32_to_cpu</name><argument_list pos:start="129:33" pos:end="129:46">(<argument pos:start="129:34" pos:end="129:45"><expr pos:start="129:34" pos:end="129:45"><name pos:start="129:34" pos:end="129:45"><name pos:start="129:34" pos:end="129:38">bochs</name><operator pos:start="129:39" pos:end="129:39">.</operator><name pos:start="129:40" pos:end="129:45">extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="161:5"><if pos:start="131:5" pos:end="141:5">if <condition pos:start="131:8" pos:end="131:42">(<expr pos:start="131:9" pos:end="131:41"><name pos:start="131:9" pos:end="131:22"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:22">extent_size</name></name> <operator pos:start="131:24" pos:end="131:24">&lt;</operator> <name pos:start="131:26" pos:end="131:41">BDRV_SECTOR_SIZE</name></expr>)</condition> <block pos:start="131:44" pos:end="141:5">{<block_content pos:start="135:9" pos:end="139:18">

        <comment type="block" pos:start="133:9" pos:end="133:68">/* bximage actually never creates extents smaller than 4k */</comment>

        <expr_stmt pos:start="135:9" pos:end="135:61"><expr pos:start="135:9" pos:end="135:60"><call pos:start="135:9" pos:end="135:60"><name pos:start="135:9" pos:end="135:18">error_setg</name><argument_list pos:start="135:19" pos:end="135:60">(<argument pos:start="135:20" pos:end="135:23"><expr pos:start="135:20" pos:end="135:23"><name pos:start="135:20" pos:end="135:23">errp</name></expr></argument>, <argument pos:start="135:26" pos:end="135:59"><expr pos:start="135:26" pos:end="135:59"><literal type="string" pos:start="135:26" pos:end="135:59">"Extent size must be at least 512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:22"><expr pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <operator pos:start="137:15" pos:end="137:15">-</operator><name pos:start="137:16" pos:end="137:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="139:9" pos:end="139:18">goto <name pos:start="139:14" pos:end="139:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="141:7" pos:end="151:5">else if <condition pos:start="141:15" pos:end="141:46">(<expr pos:start="141:16" pos:end="141:45"><operator pos:start="141:16" pos:end="141:16">!</operator><call pos:start="141:17" pos:end="141:45"><name pos:start="141:17" pos:end="141:29">is_power_of_2</name><argument_list pos:start="141:30" pos:end="141:45">(<argument pos:start="141:31" pos:end="141:44"><expr pos:start="141:31" pos:end="141:44"><name pos:start="141:31" pos:end="141:44"><name pos:start="141:31" pos:end="141:31">s</name><operator pos:start="141:32" pos:end="141:33">-&gt;</operator><name pos:start="141:34" pos:end="141:44">extent_size</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:48" pos:end="151:5">{<block_content pos:start="143:9" pos:end="149:18">

        <expr_stmt pos:start="143:9" pos:end="145:35"><expr pos:start="143:9" pos:end="145:34"><call pos:start="143:9" pos:end="145:34"><name pos:start="143:9" pos:end="143:18">error_setg</name><argument_list pos:start="143:19" pos:end="145:34">(<argument pos:start="143:20" pos:end="143:23"><expr pos:start="143:20" pos:end="143:23"><name pos:start="143:20" pos:end="143:23">errp</name></expr></argument>, <argument pos:start="143:26" pos:end="143:72"><expr pos:start="143:26" pos:end="143:72"><literal type="string" pos:start="143:26" pos:end="143:40">"Extent size %"</literal> <name pos:start="143:42" pos:end="143:47">PRIu32</name> <literal type="string" pos:start="143:49" pos:end="143:72">" is not a power of two"</literal></expr></argument>,

                   <argument pos:start="145:20" pos:end="145:33"><expr pos:start="145:20" pos:end="145:33"><name pos:start="145:20" pos:end="145:33"><name pos:start="145:20" pos:end="145:20">s</name><operator pos:start="145:21" pos:end="145:22">-&gt;</operator><name pos:start="145:23" pos:end="145:33">extent_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:22"><expr pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <operator pos:start="147:15" pos:end="147:15">-</operator><name pos:start="147:16" pos:end="147:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="149:9" pos:end="149:18">goto <name pos:start="149:14" pos:end="149:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="151:7" pos:end="161:5">else if <condition pos:start="151:15" pos:end="151:41">(<expr pos:start="151:16" pos:end="151:40"><name pos:start="151:16" pos:end="151:29"><name pos:start="151:16" pos:end="151:16">s</name><operator pos:start="151:17" pos:end="151:18">-&gt;</operator><name pos:start="151:19" pos:end="151:29">extent_size</name></name> <operator pos:start="151:31" pos:end="151:31">&gt;</operator> <literal type="number" pos:start="151:33" pos:end="151:40">0x800000</literal></expr>)</condition> <block pos:start="151:43" pos:end="161:5">{<block_content pos:start="153:9" pos:end="159:18">

        <expr_stmt pos:start="153:9" pos:end="155:35"><expr pos:start="153:9" pos:end="155:34"><call pos:start="153:9" pos:end="155:34"><name pos:start="153:9" pos:end="153:18">error_setg</name><argument_list pos:start="153:19" pos:end="155:34">(<argument pos:start="153:20" pos:end="153:23"><expr pos:start="153:20" pos:end="153:23"><name pos:start="153:20" pos:end="153:23">errp</name></expr></argument>, <argument pos:start="153:26" pos:end="153:63"><expr pos:start="153:26" pos:end="153:63"><literal type="string" pos:start="153:26" pos:end="153:40">"Extent size %"</literal> <name pos:start="153:42" pos:end="153:47">PRIu32</name> <literal type="string" pos:start="153:49" pos:end="153:63">" is too large"</literal></expr></argument>,

                   <argument pos:start="155:20" pos:end="155:33"><expr pos:start="155:20" pos:end="155:33"><name pos:start="155:20" pos:end="155:33"><name pos:start="155:20" pos:end="155:20">s</name><operator pos:start="155:21" pos:end="155:22">-&gt;</operator><name pos:start="155:23" pos:end="155:33">extent_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:22"><expr pos:start="157:9" pos:end="157:21"><name pos:start="157:9" pos:end="157:11">ret</name> <operator pos:start="157:13" pos:end="157:13">=</operator> <operator pos:start="157:15" pos:end="157:15">-</operator><name pos:start="157:16" pos:end="157:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="159:9" pos:end="159:18">goto <name pos:start="159:14" pos:end="159:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="165:5" pos:end="177:5"><if pos:start="165:5" pos:end="177:5">if <condition pos:start="165:8" pos:end="167:74">(<expr pos:start="165:9" pos:end="167:73"><name pos:start="165:9" pos:end="165:23"><name pos:start="165:9" pos:end="165:9">s</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:23">catalog_size</name></name> <operator pos:start="165:25" pos:end="165:25">&lt;</operator> <call pos:start="165:27" pos:end="167:73"><name pos:start="165:27" pos:end="165:38">DIV_ROUND_UP</name><argument_list pos:start="165:39" pos:end="167:73">(<argument pos:start="165:40" pos:end="165:56"><expr pos:start="165:40" pos:end="165:56"><name pos:start="165:40" pos:end="165:56"><name pos:start="165:40" pos:end="165:41">bs</name><operator pos:start="165:42" pos:end="165:43">-&gt;</operator><name pos:start="165:44" pos:end="165:56">total_sectors</name></name></expr></argument>,

                                       <argument pos:start="167:40" pos:end="167:72"><expr pos:start="167:40" pos:end="167:72"><name pos:start="167:40" pos:end="167:53"><name pos:start="167:40" pos:end="167:40">s</name><operator pos:start="167:41" pos:end="167:42">-&gt;</operator><name pos:start="167:43" pos:end="167:53">extent_size</name></name> <operator pos:start="167:55" pos:end="167:55">/</operator> <name pos:start="167:57" pos:end="167:72">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="169:5" pos:end="177:5">{<block_content pos:start="171:9" pos:end="175:18">

        <expr_stmt pos:start="171:9" pos:end="171:73"><expr pos:start="171:9" pos:end="171:72"><call pos:start="171:9" pos:end="171:72"><name pos:start="171:9" pos:end="171:18">error_setg</name><argument_list pos:start="171:19" pos:end="171:72">(<argument pos:start="171:20" pos:end="171:23"><expr pos:start="171:20" pos:end="171:23"><name pos:start="171:20" pos:end="171:23">errp</name></expr></argument>, <argument pos:start="171:26" pos:end="171:71"><expr pos:start="171:26" pos:end="171:71"><literal type="string" pos:start="171:26" pos:end="171:71">"Catalog size is too small for this disk size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:22"><expr pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <operator pos:start="173:15" pos:end="173:15">-</operator><name pos:start="173:16" pos:end="173:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="175:9" pos:end="175:18">goto <name pos:start="175:14" pos:end="175:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:33"><expr pos:start="181:5" pos:end="181:32"><call pos:start="181:5" pos:end="181:32"><name pos:start="181:5" pos:end="181:22">qemu_co_mutex_init</name><argument_list pos:start="181:23" pos:end="181:32">(<argument pos:start="181:24" pos:end="181:31"><expr pos:start="181:24" pos:end="181:31"><operator pos:start="181:24" pos:end="181:24">&amp;</operator><name pos:start="181:25" pos:end="181:31"><name pos:start="181:25" pos:end="181:25">s</name><operator pos:start="181:26" pos:end="181:27">-&gt;</operator><name pos:start="181:28" pos:end="181:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="183:5" pos:end="183:13">return <expr pos:start="183:12" pos:end="183:12"><literal type="number" pos:start="183:12" pos:end="183:12">0</literal></expr>;</return>



<label pos:start="187:1" pos:end="187:5"><name pos:start="187:1" pos:end="187:4">fail</name>:</label>

    <expr_stmt pos:start="189:5" pos:end="189:30"><expr pos:start="189:5" pos:end="189:29"><call pos:start="189:5" pos:end="189:29"><name pos:start="189:5" pos:end="189:10">g_free</name><argument_list pos:start="189:11" pos:end="189:29">(<argument pos:start="189:12" pos:end="189:28"><expr pos:start="189:12" pos:end="189:28"><name pos:start="189:12" pos:end="189:28"><name pos:start="189:12" pos:end="189:12">s</name><operator pos:start="189:13" pos:end="189:14">-&gt;</operator><name pos:start="189:15" pos:end="189:28">catalog_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="191:5" pos:end="191:15">return <expr pos:start="191:12" pos:end="191:14"><name pos:start="191:12" pos:end="191:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
