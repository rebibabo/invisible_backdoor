<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10525.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">CharDriverState</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:43">qemu_chr_open_stdio</name><parameter_list pos:start="1:44" pos:end="7:57">(<parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:54">char</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">id</name></decl></parameter>,

                                            <parameter pos:start="3:45" pos:end="3:67"><decl pos:start="3:45" pos:end="3:67"><type pos:start="3:45" pos:end="3:67"><name pos:start="3:45" pos:end="3:58">ChardevBackend</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:67">backend</name></decl></parameter>,

                                            <parameter pos:start="5:45" pos:end="5:62"><decl pos:start="5:45" pos:end="5:62"><type pos:start="5:45" pos:end="5:62"><name pos:start="5:45" pos:end="5:57">ChardevReturn</name> <modifier pos:start="5:59" pos:end="5:59">*</modifier></type><name pos:start="5:60" pos:end="5:62">ret</name></decl></parameter>,

                                            <parameter pos:start="7:45" pos:end="7:56"><decl pos:start="7:45" pos:end="7:56"><type pos:start="7:45" pos:end="7:56"><name pos:start="7:45" pos:end="7:49">Error</name> <modifier pos:start="7:51" pos:end="7:51">*</modifier><modifier pos:start="7:52" pos:end="7:52">*</modifier></type><name pos:start="7:53" pos:end="7:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="77:1">{<block_content pos:start="11:5" pos:end="75:15">

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">ChardevStdio</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:22">opts</name> <init pos:start="11:24" pos:end="11:41">= <expr pos:start="11:26" pos:end="11:41"><name pos:start="11:26" pos:end="11:41"><name pos:start="11:26" pos:end="11:32">backend</name><operator pos:start="11:33" pos:end="11:34">-&gt;</operator><name pos:start="11:35" pos:end="11:35">u</name><operator pos:start="11:36" pos:end="11:36">.</operator><name pos:start="11:37" pos:end="11:41">stdio</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">CharDriverState</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:24">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:20">sigaction</name></name></type> <name pos:start="15:22" pos:end="15:24">act</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:24">(<expr pos:start="19:9" pos:end="19:23"><call pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:21">is_daemonized</name><argument_list pos:start="19:22" pos:end="19:23">()</argument_list></call></expr>)</condition> <block pos:start="19:26" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:20">

        <expr_stmt pos:start="21:9" pos:end="21:61"><expr pos:start="21:9" pos:end="21:60"><call pos:start="21:9" pos:end="21:60"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="21:60">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="21:59"><expr pos:start="21:26" pos:end="21:59"><literal type="string" pos:start="21:26" pos:end="21:59">"cannot use stdio with -daemonize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:20">return <expr pos:start="23:16" pos:end="23:19"><name pos:start="23:16" pos:end="23:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:21">(<expr pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:20">stdio_in_use</name></expr>)</condition> <block pos:start="29:23" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:20">

        <expr_stmt pos:start="31:9" pos:end="31:75"><expr pos:start="31:9" pos:end="31:74"><call pos:start="31:9" pos:end="31:74"><name pos:start="31:9" pos:end="31:18">error_setg</name><argument_list pos:start="31:19" pos:end="31:74">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">errp</name></expr></argument>, <argument pos:start="31:26" pos:end="31:73"><expr pos:start="31:26" pos:end="31:73"><literal type="string" pos:start="31:26" pos:end="31:73">"cannot use stdio by multiple character devices"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:20">return <expr pos:start="33:16" pos:end="33:19"><name pos:start="33:16" pos:end="33:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:16">stdio_in_use</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <name pos:start="39:20" pos:end="39:23">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:17">old_fd0_flags</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="41:37"><name pos:start="41:21" pos:end="41:25">fcntl</name><argument_list pos:start="41:26" pos:end="41:37">(<argument pos:start="41:27" pos:end="41:27"><expr pos:start="41:27" pos:end="41:27"><literal type="number" pos:start="41:27" pos:end="41:27">0</literal></expr></argument>, <argument pos:start="41:30" pos:end="41:36"><expr pos:start="41:30" pos:end="41:36"><name pos:start="41:30" pos:end="41:36">F_GETFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:26"><expr pos:start="43:5" pos:end="43:25"><call pos:start="43:5" pos:end="43:25"><name pos:start="43:5" pos:end="43:13">tcgetattr</name><argument_list pos:start="43:14" pos:end="43:25">(<argument pos:start="43:15" pos:end="43:15"><expr pos:start="43:15" pos:end="43:15"><literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr></argument>, <argument pos:start="43:18" pos:end="43:24"><expr pos:start="43:18" pos:end="43:24"><operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:24">oldtty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><call pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:21">qemu_set_nonblock</name><argument_list pos:start="45:22" pos:end="45:24">(<argument pos:start="45:23" pos:end="45:23"><expr pos:start="45:23" pos:end="45:23"><literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><call pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:10">atexit</name><argument_list pos:start="47:11" pos:end="47:21">(<argument pos:start="47:12" pos:end="47:20"><expr pos:start="47:12" pos:end="47:20"><name pos:start="47:12" pos:end="47:20">term_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:33"><expr pos:start="51:5" pos:end="51:32"><call pos:start="51:5" pos:end="51:32"><name pos:start="51:5" pos:end="51:10">memset</name><argument_list pos:start="51:11" pos:end="51:32">(<argument pos:start="51:12" pos:end="51:15"><expr pos:start="51:12" pos:end="51:15"><operator pos:start="51:12" pos:end="51:12">&amp;</operator><name pos:start="51:13" pos:end="51:15">act</name></expr></argument>, <argument pos:start="51:18" pos:end="51:18"><expr pos:start="51:18" pos:end="51:18"><literal type="number" pos:start="51:18" pos:end="51:18">0</literal></expr></argument>, <argument pos:start="51:21" pos:end="51:31"><expr pos:start="51:21" pos:end="51:31"><sizeof pos:start="51:21" pos:end="51:31">sizeof<argument_list pos:start="51:27" pos:end="51:31">(<argument pos:start="51:28" pos:end="51:30"><expr pos:start="51:28" pos:end="51:30"><name pos:start="51:28" pos:end="51:30">act</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:7">act</name><operator pos:start="53:8" pos:end="53:8">.</operator><name pos:start="53:9" pos:end="53:18">sa_handler</name></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:39">term_stdio_handler</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:35"><expr pos:start="55:5" pos:end="55:34"><call pos:start="55:5" pos:end="55:34"><name pos:start="55:5" pos:end="55:13">sigaction</name><argument_list pos:start="55:14" pos:end="55:34">(<argument pos:start="55:15" pos:end="55:21"><expr pos:start="55:15" pos:end="55:21"><name pos:start="55:15" pos:end="55:21">SIGCONT</name></expr></argument>, <argument pos:start="55:24" pos:end="55:27"><expr pos:start="55:24" pos:end="55:27"><operator pos:start="55:24" pos:end="55:24">&amp;</operator><name pos:start="55:25" pos:end="55:27">act</name></expr></argument>, <argument pos:start="55:30" pos:end="55:33"><expr pos:start="55:30" pos:end="55:33"><name pos:start="55:30" pos:end="55:33">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:33"><expr pos:start="59:5" pos:end="59:32"><name pos:start="59:5" pos:end="59:7">chr</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:32"><name pos:start="59:11" pos:end="59:26">qemu_chr_open_fd</name><argument_list pos:start="59:27" pos:end="59:32">(<argument pos:start="59:28" pos:end="59:28"><expr pos:start="59:28" pos:end="59:28"><literal type="number" pos:start="59:28" pos:end="59:28">0</literal></expr></argument>, <argument pos:start="59:31" pos:end="59:31"><expr pos:start="59:31" pos:end="59:31"><literal type="number" pos:start="59:31" pos:end="59:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:42"><expr pos:start="61:5" pos:end="61:41"><name pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:7">chr</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:18">chr_close</name></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <name pos:start="61:22" pos:end="61:41">qemu_chr_close_stdio</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:48"><expr pos:start="63:5" pos:end="63:47"><name pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:7">chr</name><operator pos:start="63:8" pos:end="63:9">-&gt;</operator><name pos:start="63:10" pos:end="63:21">chr_set_echo</name></name> <operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:47">qemu_chr_set_echo_stdio</name></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:25">(<expr pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:12">opts</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:24">has_signal</name></name></expr>)</condition> <block pos:start="65:27" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:42">

        <expr_stmt pos:start="67:9" pos:end="67:42"><expr pos:start="67:9" pos:end="67:41"><name pos:start="67:9" pos:end="67:26">stdio_allow_signal</name> <operator pos:start="67:28" pos:end="67:28">=</operator> <name pos:start="67:30" pos:end="67:41"><name pos:start="67:30" pos:end="67:33">opts</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:41">signal</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:37"><expr pos:start="71:5" pos:end="71:36"><call pos:start="71:5" pos:end="71:36"><name pos:start="71:5" pos:end="71:24">qemu_chr_fe_set_echo</name><argument_list pos:start="71:25" pos:end="71:36">(<argument pos:start="71:26" pos:end="71:28"><expr pos:start="71:26" pos:end="71:28"><name pos:start="71:26" pos:end="71:28">chr</name></expr></argument>, <argument pos:start="71:31" pos:end="71:35"><expr pos:start="71:31" pos:end="71:35"><name pos:start="71:31" pos:end="71:35">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="75:5" pos:end="75:15">return <expr pos:start="75:12" pos:end="75:14"><name pos:start="75:12" pos:end="75:14">chr</name></expr>;</return>

</block_content>}</block></function>
</unit>
