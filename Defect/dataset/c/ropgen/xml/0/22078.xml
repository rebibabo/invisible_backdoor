<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22078.c" pos:tabs="8"><function pos:start="1:1" pos:end="241:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">bool</name></type> <name pos:start="1:6" pos:end="1:13">aio_poll</name><parameter_list pos:start="1:14" pos:end="1:45">(<parameter pos:start="1:15" pos:end="1:29"><decl pos:start="1:15" pos:end="1:29"><type pos:start="1:15" pos:end="1:29"><name pos:start="1:15" pos:end="1:24">AioContext</name> <modifier pos:start="1:26" pos:end="1:26">*</modifier></type><name pos:start="1:27" pos:end="1:29">ctx</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:35">bool</name></type> <name pos:start="1:37" pos:end="1:44">blocking</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="241:1">{<block_content pos:start="5:5" pos:end="239:20">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">AioHandler</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:20">node</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:17">progress</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:19">timeout</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:17">start</name> <init pos:start="15:19" pos:end="15:21">= <expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="31:7">/* aio_notify can avoid the expensive event_notifier_set if

     * everything (file descriptors, bottom halves, timers) will

     * be re-evaluated before the next blocking poll().  This is

     * already true when aio_poll is called with blocking == false;

     * if blocking == true, it is only true after poll() returns,

     * so disable the optimization now.

     */</comment>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:16">blocking</name></expr>)</condition> <block pos:start="33:19" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:39">

        <expr_stmt pos:start="35:9" pos:end="35:39"><expr pos:start="35:9" pos:end="35:38"><call pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:18">atomic_add</name><argument_list pos:start="35:19" pos:end="35:38">(<argument pos:start="35:20" pos:end="35:34"><expr pos:start="35:20" pos:end="35:34"><operator pos:start="35:20" pos:end="35:20">&amp;</operator><name pos:start="35:21" pos:end="35:34"><name pos:start="35:21" pos:end="35:23">ctx</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:34">notify_me</name></name></expr></argument>, <argument pos:start="35:37" pos:end="35:37"><expr pos:start="35:37" pos:end="35:37"><literal type="number" pos:start="35:37" pos:end="35:37">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><call pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:20">qemu_lockcnt_inc</name><argument_list pos:start="41:21" pos:end="41:37">(<argument pos:start="41:22" pos:end="41:36"><expr pos:start="41:22" pos:end="41:36"><operator pos:start="41:22" pos:end="41:22">&amp;</operator><name pos:start="41:23" pos:end="41:36"><name pos:start="41:23" pos:end="41:25">ctx</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:36">list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:25">(<expr pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:11">ctx</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:24">poll_max_ns</name></name></expr>)</condition> <block pos:start="45:27" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:55">

        <expr_stmt pos:start="47:9" pos:end="47:55"><expr pos:start="47:9" pos:end="47:54"><name pos:start="47:9" pos:end="47:13">start</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <call pos:start="47:17" pos:end="47:54"><name pos:start="47:17" pos:end="47:33">qemu_clock_get_ns</name><argument_list pos:start="47:34" pos:end="47:54">(<argument pos:start="47:35" pos:end="47:53"><expr pos:start="47:35" pos:end="47:53"><name pos:start="47:35" pos:end="47:53">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:44"><expr pos:start="53:5" pos:end="53:43"><name pos:start="53:5" pos:end="53:12">progress</name> <operator pos:start="53:14" pos:end="53:14">=</operator> <call pos:start="53:16" pos:end="53:43"><name pos:start="53:16" pos:end="53:28">try_poll_mode</name><argument_list pos:start="53:29" pos:end="53:43">(<argument pos:start="53:30" pos:end="53:32"><expr pos:start="53:30" pos:end="53:32"><name pos:start="53:30" pos:end="53:32">ctx</name></expr></argument>, <argument pos:start="53:35" pos:end="53:42"><expr pos:start="53:35" pos:end="53:42"><name pos:start="53:35" pos:end="53:42">blocking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="111:5"><if pos:start="55:5" pos:end="111:5">if <condition pos:start="55:8" pos:end="55:18">(<expr pos:start="55:9" pos:end="55:17"><operator pos:start="55:9" pos:end="55:9">!</operator><name pos:start="55:10" pos:end="55:17">progress</name></expr>)</condition> <block pos:start="55:20" pos:end="111:5">{<block_content pos:start="57:9" pos:end="109:9">

        <expr_stmt pos:start="57:9" pos:end="57:26"><expr pos:start="57:9" pos:end="57:25"><call pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:14">assert</name><argument_list pos:start="57:15" pos:end="57:25">(<argument pos:start="57:16" pos:end="57:24"><expr pos:start="57:16" pos:end="57:24"><name pos:start="57:16" pos:end="57:19">npfd</name> <operator pos:start="57:21" pos:end="57:22">==</operator> <literal type="number" pos:start="57:24" pos:end="57:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="61:9" pos:end="61:26">/* fill pollfds */</comment>



        <if_stmt pos:start="65:9" pos:end="79:9"><if pos:start="65:9" pos:end="79:9">if <condition pos:start="65:12" pos:end="65:36">(<expr pos:start="65:13" pos:end="65:35"><operator pos:start="65:13" pos:end="65:13">!</operator><call pos:start="65:14" pos:end="65:35"><name pos:start="65:14" pos:end="65:30">aio_epoll_enabled</name><argument_list pos:start="65:31" pos:end="65:35">(<argument pos:start="65:32" pos:end="65:34"><expr pos:start="65:32" pos:end="65:34"><name pos:start="65:32" pos:end="65:34">ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:38" pos:end="79:9">{<block_content pos:start="67:13" pos:end="77:13">

            <macro pos:start="67:13" pos:end="67:61"><name pos:start="67:13" pos:end="67:29">QLIST_FOREACH_RCU</name><argument_list pos:start="67:30" pos:end="67:61">(<argument pos:start="67:31" pos:end="67:34">node</argument>, <argument pos:start="67:37" pos:end="67:54">&amp;ctx-&gt;aio_handlers</argument>, <argument pos:start="67:57" pos:end="67:60">node</argument>)</argument_list></macro> <block pos:start="67:63" pos:end="77:13">{<block_content pos:start="69:17" pos:end="75:17">

                <if_stmt pos:start="69:17" pos:end="75:17"><if pos:start="69:17" pos:end="75:17">if <condition pos:start="69:20" pos:end="71:62">(<expr pos:start="69:21" pos:end="71:61"><operator pos:start="69:21" pos:end="69:21">!</operator><name pos:start="69:22" pos:end="69:34"><name pos:start="69:22" pos:end="69:25">node</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:34">deleted</name></name> <operator pos:start="69:36" pos:end="69:37">&amp;&amp;</operator> <name pos:start="69:39" pos:end="69:54"><name pos:start="69:39" pos:end="69:42">node</name><operator pos:start="69:43" pos:end="69:44">-&gt;</operator><name pos:start="69:45" pos:end="69:47">pfd</name><operator pos:start="69:48" pos:end="69:48">.</operator><name pos:start="69:49" pos:end="69:54">events</name></name>

                    <operator pos:start="71:21" pos:end="71:22">&amp;&amp;</operator> <call pos:start="71:24" pos:end="71:61"><name pos:start="71:24" pos:end="71:37">aio_node_check</name><argument_list pos:start="71:38" pos:end="71:61">(<argument pos:start="71:39" pos:end="71:41"><expr pos:start="71:39" pos:end="71:41"><name pos:start="71:39" pos:end="71:41">ctx</name></expr></argument>, <argument pos:start="71:44" pos:end="71:60"><expr pos:start="71:44" pos:end="71:60"><name pos:start="71:44" pos:end="71:60"><name pos:start="71:44" pos:end="71:47">node</name><operator pos:start="71:48" pos:end="71:49">-&gt;</operator><name pos:start="71:50" pos:end="71:60">is_external</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:64" pos:end="75:17">{<block_content pos:start="73:21" pos:end="73:37">

                    <expr_stmt pos:start="73:21" pos:end="73:37"><expr pos:start="73:21" pos:end="73:36"><call pos:start="73:21" pos:end="73:36"><name pos:start="73:21" pos:end="73:30">add_pollfd</name><argument_list pos:start="73:31" pos:end="73:36">(<argument pos:start="73:32" pos:end="73:35"><expr pos:start="73:32" pos:end="73:35"><name pos:start="73:32" pos:end="73:35">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:58"><expr pos:start="83:9" pos:end="83:57"><name pos:start="83:9" pos:end="83:15">timeout</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <ternary pos:start="83:19" pos:end="83:57"><condition pos:start="83:19" pos:end="83:28"><expr pos:start="83:19" pos:end="83:26"><name pos:start="83:19" pos:end="83:26">blocking</name></expr> ?</condition><then pos:start="83:30" pos:end="83:53"> <expr pos:start="83:30" pos:end="83:53"><call pos:start="83:30" pos:end="83:53"><name pos:start="83:30" pos:end="83:48">aio_compute_timeout</name><argument_list pos:start="83:49" pos:end="83:53">(<argument pos:start="83:50" pos:end="83:52"><expr pos:start="83:50" pos:end="83:52"><name pos:start="83:50" pos:end="83:52">ctx</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="83:55" pos:end="83:57">: <expr pos:start="83:57" pos:end="83:57"><literal type="number" pos:start="83:57" pos:end="83:57">0</literal></expr></else></ternary></expr>;</expr_stmt>



        <comment type="block" pos:start="87:9" pos:end="87:35">/* wait until next event */</comment>

        <if_stmt pos:start="89:9" pos:end="109:9"><if pos:start="89:9" pos:end="105:9">if <condition pos:start="89:12" pos:end="89:62">(<expr pos:start="89:13" pos:end="89:61"><call pos:start="89:13" pos:end="89:61"><name pos:start="89:13" pos:end="89:32">aio_epoll_check_poll</name><argument_list pos:start="89:33" pos:end="89:61">(<argument pos:start="89:34" pos:end="89:36"><expr pos:start="89:34" pos:end="89:36"><name pos:start="89:34" pos:end="89:36">ctx</name></expr></argument>, <argument pos:start="89:39" pos:end="89:45"><expr pos:start="89:39" pos:end="89:45"><name pos:start="89:39" pos:end="89:45">pollfds</name></expr></argument>, <argument pos:start="89:48" pos:end="89:51"><expr pos:start="89:48" pos:end="89:51"><name pos:start="89:48" pos:end="89:51">npfd</name></expr></argument>, <argument pos:start="89:54" pos:end="89:60"><expr pos:start="89:54" pos:end="89:60"><name pos:start="89:54" pos:end="89:60">timeout</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:64" pos:end="105:9">{<block_content pos:start="91:13" pos:end="103:57">

            <decl_stmt pos:start="91:13" pos:end="91:37"><decl pos:start="91:13" pos:end="91:36"><type pos:start="91:13" pos:end="91:22"><name pos:start="91:13" pos:end="91:22">AioHandler</name></type> <name pos:start="91:24" pos:end="91:36">epoll_handler</name></decl>;</decl_stmt>



            <expr_stmt pos:start="95:13" pos:end="95:48"><expr pos:start="95:13" pos:end="95:47"><name pos:start="95:13" pos:end="95:32"><name pos:start="95:13" pos:end="95:25">epoll_handler</name><operator pos:start="95:26" pos:end="95:26">.</operator><name pos:start="95:27" pos:end="95:29">pfd</name><operator pos:start="95:30" pos:end="95:30">.</operator><name pos:start="95:31" pos:end="95:32">fd</name></name> <operator pos:start="95:34" pos:end="95:34">=</operator> <name pos:start="95:36" pos:end="95:47"><name pos:start="95:36" pos:end="95:38">ctx</name><operator pos:start="95:39" pos:end="95:40">-&gt;</operator><name pos:start="95:41" pos:end="95:47">epollfd</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:80"><expr pos:start="97:13" pos:end="97:79"><name pos:start="97:13" pos:end="97:36"><name pos:start="97:13" pos:end="97:25">epoll_handler</name><operator pos:start="97:26" pos:end="97:26">.</operator><name pos:start="97:27" pos:end="97:29">pfd</name><operator pos:start="97:30" pos:end="97:30">.</operator><name pos:start="97:31" pos:end="97:36">events</name></name> <operator pos:start="97:38" pos:end="97:38">=</operator> <name pos:start="97:40" pos:end="97:46">G_IO_IN</name> <operator pos:start="97:48" pos:end="97:48">|</operator> <name pos:start="97:50" pos:end="97:57">G_IO_OUT</name> <operator pos:start="97:59" pos:end="97:59">|</operator> <name pos:start="97:61" pos:end="97:68">G_IO_HUP</name> <operator pos:start="97:70" pos:end="97:70">|</operator> <name pos:start="97:72" pos:end="97:79">G_IO_ERR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:21"><expr pos:start="99:13" pos:end="99:20"><name pos:start="99:13" pos:end="99:16">npfd</name> <operator pos:start="99:18" pos:end="99:18">=</operator> <literal type="number" pos:start="99:20" pos:end="99:20">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:39"><expr pos:start="101:13" pos:end="101:38"><call pos:start="101:13" pos:end="101:38"><name pos:start="101:13" pos:end="101:22">add_pollfd</name><argument_list pos:start="101:23" pos:end="101:38">(<argument pos:start="101:24" pos:end="101:37"><expr pos:start="101:24" pos:end="101:37"><operator pos:start="101:24" pos:end="101:24">&amp;</operator><name pos:start="101:25" pos:end="101:37">epoll_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:57"><expr pos:start="103:13" pos:end="103:56"><name pos:start="103:13" pos:end="103:15">ret</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="103:56"><name pos:start="103:19" pos:end="103:27">aio_epoll</name><argument_list pos:start="103:28" pos:end="103:56">(<argument pos:start="103:29" pos:end="103:31"><expr pos:start="103:29" pos:end="103:31"><name pos:start="103:29" pos:end="103:31">ctx</name></expr></argument>, <argument pos:start="103:34" pos:end="103:40"><expr pos:start="103:34" pos:end="103:40"><name pos:start="103:34" pos:end="103:40">pollfds</name></expr></argument>, <argument pos:start="103:43" pos:end="103:46"><expr pos:start="103:43" pos:end="103:46"><name pos:start="103:43" pos:end="103:46">npfd</name></expr></argument>, <argument pos:start="103:49" pos:end="103:55"><expr pos:start="103:49" pos:end="103:55"><name pos:start="103:49" pos:end="103:55">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="109:9">else  <block pos:start="105:17" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:55">

            <expr_stmt pos:start="107:13" pos:end="107:55"><expr pos:start="107:13" pos:end="107:54"><name pos:start="107:13" pos:end="107:15">ret</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <call pos:start="107:19" pos:end="107:54"><name pos:start="107:19" pos:end="107:30">qemu_poll_ns</name><argument_list pos:start="107:31" pos:end="107:54">(<argument pos:start="107:32" pos:end="107:38"><expr pos:start="107:32" pos:end="107:38"><name pos:start="107:32" pos:end="107:38">pollfds</name></expr></argument>, <argument pos:start="107:41" pos:end="107:44"><expr pos:start="107:41" pos:end="107:44"><name pos:start="107:41" pos:end="107:44">npfd</name></expr></argument>, <argument pos:start="107:47" pos:end="107:53"><expr pos:start="107:47" pos:end="107:53"><name pos:start="107:47" pos:end="107:53">timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:17">(<expr pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:16">blocking</name></expr>)</condition> <block pos:start="115:19" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:39">

        <expr_stmt pos:start="117:9" pos:end="117:39"><expr pos:start="117:9" pos:end="117:38"><call pos:start="117:9" pos:end="117:38"><name pos:start="117:9" pos:end="117:18">atomic_sub</name><argument_list pos:start="117:19" pos:end="117:38">(<argument pos:start="117:20" pos:end="117:34"><expr pos:start="117:20" pos:end="117:34"><operator pos:start="117:20" pos:end="117:20">&amp;</operator><name pos:start="117:21" pos:end="117:34"><name pos:start="117:21" pos:end="117:23">ctx</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:34">notify_me</name></name></expr></argument>, <argument pos:start="117:37" pos:end="117:37"><expr pos:start="117:37" pos:end="117:37"><literal type="number" pos:start="117:37" pos:end="117:37">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:29">/* Adjust polling time */</comment>

    <if_stmt pos:start="125:5" pos:end="201:5"><if pos:start="125:5" pos:end="201:5">if <condition pos:start="125:8" pos:end="125:25">(<expr pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:11">ctx</name><operator pos:start="125:12" pos:end="125:13">-&gt;</operator><name pos:start="125:14" pos:end="125:24">poll_max_ns</name></name></expr>)</condition> <block pos:start="125:27" pos:end="201:5">{<block_content pos:start="127:9" pos:end="199:9">

        <decl_stmt pos:start="127:9" pos:end="127:74"><decl pos:start="127:9" pos:end="127:73"><type pos:start="127:9" pos:end="127:15"><name pos:start="127:9" pos:end="127:15">int64_t</name></type> <name pos:start="127:17" pos:end="127:24">block_ns</name> <init pos:start="127:26" pos:end="127:73">= <expr pos:start="127:28" pos:end="127:73"><call pos:start="127:28" pos:end="127:65"><name pos:start="127:28" pos:end="127:44">qemu_clock_get_ns</name><argument_list pos:start="127:45" pos:end="127:65">(<argument pos:start="127:46" pos:end="127:64"><expr pos:start="127:46" pos:end="127:64"><name pos:start="127:46" pos:end="127:64">QEMU_CLOCK_REALTIME</name></expr></argument>)</argument_list></call> <operator pos:start="127:67" pos:end="127:67">-</operator> <name pos:start="127:69" pos:end="127:73">start</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="131:9" pos:end="199:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:37">(<expr pos:start="131:13" pos:end="131:36"><name pos:start="131:13" pos:end="131:20">block_ns</name> <operator pos:start="131:22" pos:end="131:23">&lt;=</operator> <name pos:start="131:25" pos:end="131:36"><name pos:start="131:25" pos:end="131:27">ctx</name><operator pos:start="131:28" pos:end="131:29">-&gt;</operator><name pos:start="131:30" pos:end="131:36">poll_ns</name></name></expr>)</condition> <block pos:start="131:39" pos:end="135:9">{<block_content>

            <comment type="block" pos:start="133:13" pos:end="133:62">/* This is the sweet spot, no adjustment needed */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="135:11" pos:end="157:9">else if <condition pos:start="135:19" pos:end="135:47">(<expr pos:start="135:20" pos:end="135:46"><name pos:start="135:20" pos:end="135:27">block_ns</name> <operator pos:start="135:29" pos:end="135:29">&gt;</operator> <name pos:start="135:31" pos:end="135:46"><name pos:start="135:31" pos:end="135:33">ctx</name><operator pos:start="135:34" pos:end="135:35">-&gt;</operator><name pos:start="135:36" pos:end="135:46">poll_max_ns</name></name></expr>)</condition> <block pos:start="135:49" pos:end="157:9">{<block_content pos:start="139:13" pos:end="155:54">

            <comment type="block" pos:start="137:13" pos:end="137:59">/* We'd have to poll for too long, poll less */</comment>

            <decl_stmt pos:start="139:13" pos:end="139:39"><decl pos:start="139:13" pos:end="139:38"><type pos:start="139:13" pos:end="139:19"><name pos:start="139:13" pos:end="139:19">int64_t</name></type> <name pos:start="139:21" pos:end="139:23">old</name> <init pos:start="139:25" pos:end="139:38">= <expr pos:start="139:27" pos:end="139:38"><name pos:start="139:27" pos:end="139:38"><name pos:start="139:27" pos:end="139:29">ctx</name><operator pos:start="139:30" pos:end="139:31">-&gt;</operator><name pos:start="139:32" pos:end="139:38">poll_ns</name></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="143:13" pos:end="151:13"><if pos:start="143:13" pos:end="147:13">if <condition pos:start="143:16" pos:end="143:33">(<expr pos:start="143:17" pos:end="143:32"><name pos:start="143:17" pos:end="143:32"><name pos:start="143:17" pos:end="143:19">ctx</name><operator pos:start="143:20" pos:end="143:21">-&gt;</operator><name pos:start="143:22" pos:end="143:32">poll_shrink</name></name></expr>)</condition> <block pos:start="143:35" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:49">

                <expr_stmt pos:start="145:17" pos:end="145:49"><expr pos:start="145:17" pos:end="145:48"><name pos:start="145:17" pos:end="145:28"><name pos:start="145:17" pos:end="145:19">ctx</name><operator pos:start="145:20" pos:end="145:21">-&gt;</operator><name pos:start="145:22" pos:end="145:28">poll_ns</name></name> <operator pos:start="145:30" pos:end="145:31">/=</operator> <name pos:start="145:33" pos:end="145:48"><name pos:start="145:33" pos:end="145:35">ctx</name><operator pos:start="145:36" pos:end="145:37">-&gt;</operator><name pos:start="145:38" pos:end="145:48">poll_shrink</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="147:15" pos:end="151:13">else <block pos:start="147:20" pos:end="151:13">{<block_content pos:start="149:17" pos:end="149:33">

                <expr_stmt pos:start="149:17" pos:end="149:33"><expr pos:start="149:17" pos:end="149:32"><name pos:start="149:17" pos:end="149:28"><name pos:start="149:17" pos:end="149:19">ctx</name><operator pos:start="149:20" pos:end="149:21">-&gt;</operator><name pos:start="149:22" pos:end="149:28">poll_ns</name></name> <operator pos:start="149:30" pos:end="149:30">=</operator> <literal type="number" pos:start="149:32" pos:end="149:32">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="155:13" pos:end="155:54"><expr pos:start="155:13" pos:end="155:53"><call pos:start="155:13" pos:end="155:53"><name pos:start="155:13" pos:end="155:29">trace_poll_shrink</name><argument_list pos:start="155:30" pos:end="155:53">(<argument pos:start="155:31" pos:end="155:33"><expr pos:start="155:31" pos:end="155:33"><name pos:start="155:31" pos:end="155:33">ctx</name></expr></argument>, <argument pos:start="155:36" pos:end="155:38"><expr pos:start="155:36" pos:end="155:38"><name pos:start="155:36" pos:end="155:38">old</name></expr></argument>, <argument pos:start="155:41" pos:end="155:52"><expr pos:start="155:41" pos:end="155:52"><name pos:start="155:41" pos:end="155:52"><name pos:start="155:41" pos:end="155:43">ctx</name><operator pos:start="155:44" pos:end="155:45">-&gt;</operator><name pos:start="155:46" pos:end="155:52">poll_ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="157:11" pos:end="199:9">else if <condition pos:start="157:19" pos:end="159:47">(<expr pos:start="157:20" pos:end="159:46"><name pos:start="157:20" pos:end="157:31"><name pos:start="157:20" pos:end="157:22">ctx</name><operator pos:start="157:23" pos:end="157:24">-&gt;</operator><name pos:start="157:25" pos:end="157:31">poll_ns</name></name> <operator pos:start="157:33" pos:end="157:33">&lt;</operator> <name pos:start="157:35" pos:end="157:50"><name pos:start="157:35" pos:end="157:37">ctx</name><operator pos:start="157:38" pos:end="157:39">-&gt;</operator><name pos:start="157:40" pos:end="157:50">poll_max_ns</name></name> <operator pos:start="157:52" pos:end="157:53">&amp;&amp;</operator>

                   <name pos:start="159:20" pos:end="159:27">block_ns</name> <operator pos:start="159:29" pos:end="159:29">&lt;</operator> <name pos:start="159:31" pos:end="159:46"><name pos:start="159:31" pos:end="159:33">ctx</name><operator pos:start="159:34" pos:end="159:35">-&gt;</operator><name pos:start="159:36" pos:end="159:46">poll_max_ns</name></name></expr>)</condition> <block pos:start="159:49" pos:end="199:9">{<block_content pos:start="163:13" pos:end="197:52">

            <comment type="block" pos:start="161:13" pos:end="161:52">/* There is room to grow, poll longer */</comment>

            <decl_stmt pos:start="163:13" pos:end="163:39"><decl pos:start="163:13" pos:end="163:38"><type pos:start="163:13" pos:end="163:19"><name pos:start="163:13" pos:end="163:19">int64_t</name></type> <name pos:start="163:21" pos:end="163:23">old</name> <init pos:start="163:25" pos:end="163:38">= <expr pos:start="163:27" pos:end="163:38"><name pos:start="163:27" pos:end="163:38"><name pos:start="163:27" pos:end="163:29">ctx</name><operator pos:start="163:30" pos:end="163:31">-&gt;</operator><name pos:start="163:32" pos:end="163:38">poll_ns</name></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="165:13" pos:end="165:42"><decl pos:start="165:13" pos:end="165:41"><type pos:start="165:13" pos:end="165:19"><name pos:start="165:13" pos:end="165:19">int64_t</name></type> <name pos:start="165:21" pos:end="165:24">grow</name> <init pos:start="165:26" pos:end="165:41">= <expr pos:start="165:28" pos:end="165:41"><name pos:start="165:28" pos:end="165:41"><name pos:start="165:28" pos:end="165:30">ctx</name><operator pos:start="165:31" pos:end="165:32">-&gt;</operator><name pos:start="165:33" pos:end="165:41">poll_grow</name></name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="169:13" pos:end="173:13"><if pos:start="169:13" pos:end="173:13">if <condition pos:start="169:16" pos:end="169:26">(<expr pos:start="169:17" pos:end="169:25"><name pos:start="169:17" pos:end="169:20">grow</name> <operator pos:start="169:22" pos:end="169:23">==</operator> <literal type="number" pos:start="169:25" pos:end="169:25">0</literal></expr>)</condition> <block pos:start="169:28" pos:end="173:13">{<block_content pos:start="171:17" pos:end="171:25">

                <expr_stmt pos:start="171:17" pos:end="171:25"><expr pos:start="171:17" pos:end="171:24"><name pos:start="171:17" pos:end="171:20">grow</name> <operator pos:start="171:22" pos:end="171:22">=</operator> <literal type="number" pos:start="171:24" pos:end="171:24">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="177:13" pos:end="185:13"><if pos:start="177:13" pos:end="181:13">if <condition pos:start="177:16" pos:end="177:29">(<expr pos:start="177:17" pos:end="177:28"><name pos:start="177:17" pos:end="177:28"><name pos:start="177:17" pos:end="177:19">ctx</name><operator pos:start="177:20" pos:end="177:21">-&gt;</operator><name pos:start="177:22" pos:end="177:28">poll_ns</name></name></expr>)</condition> <block pos:start="177:31" pos:end="181:13">{<block_content pos:start="179:17" pos:end="179:37">

                <expr_stmt pos:start="179:17" pos:end="179:37"><expr pos:start="179:17" pos:end="179:36"><name pos:start="179:17" pos:end="179:28"><name pos:start="179:17" pos:end="179:19">ctx</name><operator pos:start="179:20" pos:end="179:21">-&gt;</operator><name pos:start="179:22" pos:end="179:28">poll_ns</name></name> <operator pos:start="179:30" pos:end="179:31">*=</operator> <name pos:start="179:33" pos:end="179:36">grow</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="181:15" pos:end="185:13">else <block pos:start="181:20" pos:end="185:13">{<block_content pos:start="183:17" pos:end="183:36">

                <expr_stmt pos:start="183:17" pos:end="183:36"><expr pos:start="183:17" pos:end="183:35"><name pos:start="183:17" pos:end="183:28"><name pos:start="183:17" pos:end="183:19">ctx</name><operator pos:start="183:20" pos:end="183:21">-&gt;</operator><name pos:start="183:22" pos:end="183:28">poll_ns</name></name> <operator pos:start="183:30" pos:end="183:30">=</operator> <literal type="number" pos:start="183:32" pos:end="183:35">4000</literal></expr>;</expr_stmt> <comment type="block" pos:start="183:38" pos:end="183:74">/* start polling at 4 microseconds */</comment>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="189:13" pos:end="193:13"><if pos:start="189:13" pos:end="193:13">if <condition pos:start="189:16" pos:end="189:48">(<expr pos:start="189:17" pos:end="189:47"><name pos:start="189:17" pos:end="189:28"><name pos:start="189:17" pos:end="189:19">ctx</name><operator pos:start="189:20" pos:end="189:21">-&gt;</operator><name pos:start="189:22" pos:end="189:28">poll_ns</name></name> <operator pos:start="189:30" pos:end="189:30">&gt;</operator> <name pos:start="189:32" pos:end="189:47"><name pos:start="189:32" pos:end="189:34">ctx</name><operator pos:start="189:35" pos:end="189:36">-&gt;</operator><name pos:start="189:37" pos:end="189:47">poll_max_ns</name></name></expr>)</condition> <block pos:start="189:50" pos:end="193:13">{<block_content pos:start="191:17" pos:end="191:48">

                <expr_stmt pos:start="191:17" pos:end="191:48"><expr pos:start="191:17" pos:end="191:47"><name pos:start="191:17" pos:end="191:28"><name pos:start="191:17" pos:end="191:19">ctx</name><operator pos:start="191:20" pos:end="191:21">-&gt;</operator><name pos:start="191:22" pos:end="191:28">poll_ns</name></name> <operator pos:start="191:30" pos:end="191:30">=</operator> <name pos:start="191:32" pos:end="191:47"><name pos:start="191:32" pos:end="191:34">ctx</name><operator pos:start="191:35" pos:end="191:36">-&gt;</operator><name pos:start="191:37" pos:end="191:47">poll_max_ns</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="197:13" pos:end="197:52"><expr pos:start="197:13" pos:end="197:51"><call pos:start="197:13" pos:end="197:51"><name pos:start="197:13" pos:end="197:27">trace_poll_grow</name><argument_list pos:start="197:28" pos:end="197:51">(<argument pos:start="197:29" pos:end="197:31"><expr pos:start="197:29" pos:end="197:31"><name pos:start="197:29" pos:end="197:31">ctx</name></expr></argument>, <argument pos:start="197:34" pos:end="197:36"><expr pos:start="197:34" pos:end="197:36"><name pos:start="197:34" pos:end="197:36">old</name></expr></argument>, <argument pos:start="197:39" pos:end="197:50"><expr pos:start="197:39" pos:end="197:50"><name pos:start="197:39" pos:end="197:50"><name pos:start="197:39" pos:end="197:41">ctx</name><operator pos:start="197:42" pos:end="197:43">-&gt;</operator><name pos:start="197:44" pos:end="197:50">poll_ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:27"><expr pos:start="205:5" pos:end="205:26"><call pos:start="205:5" pos:end="205:26"><name pos:start="205:5" pos:end="205:21">aio_notify_accept</name><argument_list pos:start="205:22" pos:end="205:26">(<argument pos:start="205:23" pos:end="205:25"><expr pos:start="205:23" pos:end="205:25"><name pos:start="205:23" pos:end="205:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="209:5" pos:end="209:53">/* if we have any readable fds, dispatch event */</comment>

    <if_stmt pos:start="211:5" pos:end="219:5"><if pos:start="211:5" pos:end="219:5">if <condition pos:start="211:8" pos:end="211:16">(<expr pos:start="211:9" pos:end="211:15"><name pos:start="211:9" pos:end="211:11">ret</name> <operator pos:start="211:13" pos:end="211:13">&gt;</operator> <literal type="number" pos:start="211:15" pos:end="211:15">0</literal></expr>)</condition> <block pos:start="211:18" pos:end="219:5">{<block_content pos:start="213:9" pos:end="217:9">

        <for pos:start="213:9" pos:end="217:9">for <control pos:start="213:13" pos:end="213:34">(<init pos:start="213:14" pos:end="213:19"><expr pos:start="213:14" pos:end="213:18"><name pos:start="213:14" pos:end="213:14">i</name> <operator pos:start="213:16" pos:end="213:16">=</operator> <literal type="number" pos:start="213:18" pos:end="213:18">0</literal></expr>;</init> <condition pos:start="213:21" pos:end="213:29"><expr pos:start="213:21" pos:end="213:28"><name pos:start="213:21" pos:end="213:21">i</name> <operator pos:start="213:23" pos:end="213:23">&lt;</operator> <name pos:start="213:25" pos:end="213:28">npfd</name></expr>;</condition> <incr pos:start="213:31" pos:end="213:33"><expr pos:start="213:31" pos:end="213:33"><name pos:start="213:31" pos:end="213:31">i</name><operator pos:start="213:32" pos:end="213:33">++</operator></expr></incr>)</control> <block pos:start="213:36" pos:end="217:9">{<block_content pos:start="215:13" pos:end="215:55">

            <expr_stmt pos:start="215:13" pos:end="215:55"><expr pos:start="215:13" pos:end="215:54"><name pos:start="215:13" pos:end="215:20"><name pos:start="215:13" pos:end="215:17">nodes</name><index pos:start="215:18" pos:end="215:20">[<expr pos:start="215:19" pos:end="215:19"><name pos:start="215:19" pos:end="215:19">i</name></expr>]</index></name><operator pos:start="215:21" pos:end="215:22">-&gt;</operator><name pos:start="215:23" pos:end="215:33"><name pos:start="215:23" pos:end="215:25">pfd</name><operator pos:start="215:26" pos:end="215:26">.</operator><name pos:start="215:27" pos:end="215:33">revents</name></name> <operator pos:start="215:35" pos:end="215:35">=</operator> <name pos:start="215:37" pos:end="215:46"><name pos:start="215:37" pos:end="215:43">pollfds</name><index pos:start="215:44" pos:end="215:46">[<expr pos:start="215:45" pos:end="215:45"><name pos:start="215:45" pos:end="215:45">i</name></expr>]</index></name><operator pos:start="215:47" pos:end="215:47">.</operator><name pos:start="215:48" pos:end="215:54">revents</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:13"><expr pos:start="223:5" pos:end="223:12"><name pos:start="223:5" pos:end="223:8">npfd</name> <operator pos:start="223:10" pos:end="223:10">=</operator> <literal type="number" pos:start="223:12" pos:end="223:12">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:38"><expr pos:start="225:5" pos:end="225:37"><call pos:start="225:5" pos:end="225:37"><name pos:start="225:5" pos:end="225:20">qemu_lockcnt_dec</name><argument_list pos:start="225:21" pos:end="225:37">(<argument pos:start="225:22" pos:end="225:36"><expr pos:start="225:22" pos:end="225:36"><operator pos:start="225:22" pos:end="225:22">&amp;</operator><name pos:start="225:23" pos:end="225:36"><name pos:start="225:23" pos:end="225:25">ctx</name><operator pos:start="225:26" pos:end="225:27">-&gt;</operator><name pos:start="225:28" pos:end="225:36">list_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="229:5" pos:end="229:71">/* Run dispatch even if there were no readable fds to run timers */</comment>

    <if_stmt pos:start="231:5" pos:end="235:5"><if pos:start="231:5" pos:end="235:5">if <condition pos:start="231:8" pos:end="231:35">(<expr pos:start="231:9" pos:end="231:34"><call pos:start="231:9" pos:end="231:34"><name pos:start="231:9" pos:end="231:20">aio_dispatch</name><argument_list pos:start="231:21" pos:end="231:34">(<argument pos:start="231:22" pos:end="231:24"><expr pos:start="231:22" pos:end="231:24"><name pos:start="231:22" pos:end="231:24">ctx</name></expr></argument>, <argument pos:start="231:27" pos:end="231:33"><expr pos:start="231:27" pos:end="231:33"><name pos:start="231:27" pos:end="231:29">ret</name> <operator pos:start="231:31" pos:end="231:31">&gt;</operator> <literal type="number" pos:start="231:33" pos:end="231:33">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="231:37" pos:end="235:5">{<block_content pos:start="233:9" pos:end="233:24">

        <expr_stmt pos:start="233:9" pos:end="233:24"><expr pos:start="233:9" pos:end="233:23"><name pos:start="233:9" pos:end="233:16">progress</name> <operator pos:start="233:18" pos:end="233:18">=</operator> <name pos:start="233:20" pos:end="233:23">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="239:5" pos:end="239:20">return <expr pos:start="239:12" pos:end="239:19"><name pos:start="239:12" pos:end="239:19">progress</name></expr>;</return>

</block_content>}</block></function>
</unit>
