<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18521.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:36">nvenc_dyload_cuda</name><parameter_list pos:start="1:37" pos:end="1:59">(<parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:53"><name pos:start="1:38" pos:end="1:51">AVCodecContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="102:0">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">NvencContext</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">ctx</name> <init pos:start="5:23" pos:end="5:40">= <expr pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:29">avctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:25">NvencDynLoadFunctions</name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:32">dl_fn</name> <init pos:start="7:34" pos:end="7:58">= <expr pos:start="7:36" pos:end="7:58"><operator pos:start="7:36" pos:end="7:36">&amp;</operator><name pos:start="7:37" pos:end="7:58"><name pos:start="7:37" pos:end="7:39">ctx</name><operator pos:start="7:40" pos:end="7:41">-&gt;</operator><name pos:start="7:42" pos:end="7:58">nvenc_dload_funcs</name></name></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:15">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15">CONFIG_CUDA</name></expr></cpp:if>

    <expr_stmt pos:start="13:5" pos:end="13:49"><expr pos:start="13:5" pos:end="13:48"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:9">dl_fn</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:18">cu_init</name></name>                      <operator pos:start="13:41" pos:end="13:41">=</operator> <name pos:start="13:43" pos:end="13:48">cuInit</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:59"><expr pos:start="15:5" pos:end="15:58"><name pos:start="15:5" pos:end="15:30"><name pos:start="15:5" pos:end="15:9">dl_fn</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:30">cu_device_get_count</name></name>          <operator pos:start="15:41" pos:end="15:41">=</operator> <name pos:start="15:43" pos:end="15:58">cuDeviceGetCount</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:54"><expr pos:start="17:5" pos:end="17:53"><name pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:9">dl_fn</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:24">cu_device_get</name></name>                <operator pos:start="17:41" pos:end="17:41">=</operator> <name pos:start="17:43" pos:end="17:53">cuDeviceGet</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:58"><expr pos:start="19:5" pos:end="19:57"><name pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:9">dl_fn</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:29">cu_device_get_name</name></name>           <operator pos:start="19:41" pos:end="19:41">=</operator> <name pos:start="19:43" pos:end="19:57">cuDeviceGetName</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:68"><expr pos:start="21:5" pos:end="21:67"><name pos:start="21:5" pos:end="21:39"><name pos:start="21:5" pos:end="21:9">dl_fn</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:39">cu_device_compute_capability</name></name> <operator pos:start="21:41" pos:end="21:41">=</operator> <name pos:start="21:43" pos:end="21:67">cuDeviceComputeCapability</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:57"><expr pos:start="23:5" pos:end="23:56"><name pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:9">dl_fn</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:24">cu_ctx_create</name></name>                <operator pos:start="23:41" pos:end="23:41">=</operator> <name pos:start="23:43" pos:end="23:56">cuCtxCreate_v2</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:61"><expr pos:start="25:5" pos:end="25:60"><name pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:9">dl_fn</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:29">cu_ctx_pop_current</name></name>           <operator pos:start="25:41" pos:end="25:41">=</operator> <name pos:start="25:43" pos:end="25:60">cuCtxPopCurrent_v2</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:58"><expr pos:start="27:5" pos:end="27:57"><name pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:9">dl_fn</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:25">cu_ctx_destroy</name></name>               <operator pos:start="27:41" pos:end="27:41">=</operator> <name pos:start="27:43" pos:end="27:57">cuCtxDestroy_v2</name></expr>;</expr_stmt>



    <return pos:start="31:5" pos:end="34:0">return <expr pos:start="31:12" pos:end="31:12"><literal type="number" pos:start="31:12" pos:end="31:12">1</literal></expr>;</return>

<cpp:else pos:start="33:1" pos:end="33:5">#<cpp:directive pos:start="33:2" pos:end="33:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="35:5" pos:end="42:0"><if pos:start="35:5" pos:end="42:0">if <condition pos:start="35:8" pos:end="35:24">(<expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:13">dl_fn</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:23">cuda_lib</name></name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="42:0"><block_content pos:start="37:9" pos:end="42:0">

        <return pos:start="37:9" pos:end="42:0">return <expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



<cpp:if pos:start="41:1" pos:end="41:19">#<cpp:directive pos:start="41:2" pos:end="41:3">if</cpp:directive> <expr pos:start="41:5" pos:end="41:19"><call pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:11">defined</name><argument_list pos:start="41:12" pos:end="41:19">(<argument pos:start="41:13" pos:end="41:18"><expr pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:18">_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="43:5" pos:end="46:0"><expr pos:start="43:5" pos:end="43:53"><name pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:9">dl_fn</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:19">cuda_lib</name></name> <operator pos:start="43:21" pos:end="43:21">=</operator> <call pos:start="43:23" pos:end="43:53"><name pos:start="43:23" pos:end="43:33">LoadLibrary</name><argument_list pos:start="43:34" pos:end="43:53">(<argument pos:start="43:35" pos:end="43:52"><expr pos:start="43:35" pos:end="43:52"><call pos:start="43:35" pos:end="43:52"><name pos:start="43:35" pos:end="43:38">TEXT</name><argument_list pos:start="43:39" pos:end="43:52">(<argument pos:start="43:40" pos:end="43:51"><expr pos:start="43:40" pos:end="43:51"><literal type="string" pos:start="43:40" pos:end="43:51">"nvcuda.dll"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="45:1" pos:end="45:5">#<cpp:directive pos:start="45:2" pos:end="45:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:53"><name pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:9">dl_fn</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:19">cuda_lib</name></name> <operator pos:start="47:21" pos:end="47:21">=</operator> <call pos:start="47:23" pos:end="47:53"><name pos:start="47:23" pos:end="47:28">dlopen</name><argument_list pos:start="47:29" pos:end="47:53">(<argument pos:start="47:30" pos:end="47:41"><expr pos:start="47:30" pos:end="47:41"><literal type="string" pos:start="47:30" pos:end="47:41">"libcuda.so"</literal></expr></argument>, <argument pos:start="47:44" pos:end="47:52"><expr pos:start="47:44" pos:end="47:52"><name pos:start="47:44" pos:end="47:52">RTLD_LAZY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:25">(<expr pos:start="53:9" pos:end="53:24"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:24"><name pos:start="53:10" pos:end="53:14">dl_fn</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:24">cuda_lib</name></name></expr>)</condition> <block pos:start="53:27" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:19">

        <expr_stmt pos:start="55:9" pos:end="55:69"><expr pos:start="55:9" pos:end="55:68"><call pos:start="55:9" pos:end="55:68"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="55:68">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">avctx</name></expr></argument>, <argument pos:start="55:23" pos:end="55:34"><expr pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:34">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="55:37" pos:end="55:67"><expr pos:start="55:37" pos:end="55:67"><literal type="string" pos:start="55:37" pos:end="55:67">"Failed loading CUDA library\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:19">goto <name pos:start="57:14" pos:end="57:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:55"><expr pos:start="63:5" pos:end="63:54"><call pos:start="63:5" pos:end="63:54"><name pos:start="63:5" pos:end="63:19">CHECK_LOAD_FUNC</name><argument_list pos:start="63:20" pos:end="63:54">(<argument pos:start="63:21" pos:end="63:27"><expr pos:start="63:21" pos:end="63:27"><name pos:start="63:21" pos:end="63:27">PCUINIT</name></expr></argument>, <argument pos:start="63:30" pos:end="63:43"><expr pos:start="63:30" pos:end="63:43"><name pos:start="63:30" pos:end="63:43"><name pos:start="63:30" pos:end="63:34">dl_fn</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:43">cu_init</name></name></expr></argument>, <argument pos:start="63:46" pos:end="63:53"><expr pos:start="63:46" pos:end="63:53"><literal type="string" pos:start="63:46" pos:end="63:53">"cuInit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:87"><expr pos:start="65:5" pos:end="65:86"><call pos:start="65:5" pos:end="65:86"><name pos:start="65:5" pos:end="65:19">CHECK_LOAD_FUNC</name><argument_list pos:start="65:20" pos:end="65:86">(<argument pos:start="65:21" pos:end="65:37"><expr pos:start="65:21" pos:end="65:37"><name pos:start="65:21" pos:end="65:37">PCUDEVICEGETCOUNT</name></expr></argument>, <argument pos:start="65:40" pos:end="65:65"><expr pos:start="65:40" pos:end="65:65"><name pos:start="65:40" pos:end="65:65"><name pos:start="65:40" pos:end="65:44">dl_fn</name><operator pos:start="65:45" pos:end="65:46">-&gt;</operator><name pos:start="65:47" pos:end="65:65">cu_device_get_count</name></name></expr></argument>, <argument pos:start="65:68" pos:end="65:85"><expr pos:start="65:68" pos:end="65:85"><literal type="string" pos:start="65:68" pos:end="65:85">"cuDeviceGetCount"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:71"><expr pos:start="67:5" pos:end="67:70"><call pos:start="67:5" pos:end="67:70"><name pos:start="67:5" pos:end="67:19">CHECK_LOAD_FUNC</name><argument_list pos:start="67:20" pos:end="67:70">(<argument pos:start="67:21" pos:end="67:32"><expr pos:start="67:21" pos:end="67:32"><name pos:start="67:21" pos:end="67:32">PCUDEVICEGET</name></expr></argument>, <argument pos:start="67:35" pos:end="67:54"><expr pos:start="67:35" pos:end="67:54"><name pos:start="67:35" pos:end="67:54"><name pos:start="67:35" pos:end="67:39">dl_fn</name><operator pos:start="67:40" pos:end="67:41">-&gt;</operator><name pos:start="67:42" pos:end="67:54">cu_device_get</name></name></expr></argument>, <argument pos:start="67:57" pos:end="67:69"><expr pos:start="67:57" pos:end="67:69"><literal type="string" pos:start="67:57" pos:end="67:69">"cuDeviceGet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:84"><expr pos:start="69:5" pos:end="69:83"><call pos:start="69:5" pos:end="69:83"><name pos:start="69:5" pos:end="69:19">CHECK_LOAD_FUNC</name><argument_list pos:start="69:20" pos:end="69:83">(<argument pos:start="69:21" pos:end="69:36"><expr pos:start="69:21" pos:end="69:36"><name pos:start="69:21" pos:end="69:36">PCUDEVICEGETNAME</name></expr></argument>, <argument pos:start="69:39" pos:end="69:63"><expr pos:start="69:39" pos:end="69:63"><name pos:start="69:39" pos:end="69:63"><name pos:start="69:39" pos:end="69:43">dl_fn</name><operator pos:start="69:44" pos:end="69:45">-&gt;</operator><name pos:start="69:46" pos:end="69:63">cu_device_get_name</name></name></expr></argument>, <argument pos:start="69:66" pos:end="69:82"><expr pos:start="69:66" pos:end="69:82"><literal type="string" pos:start="69:66" pos:end="69:82">"cuDeviceGetName"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:114"><expr pos:start="71:5" pos:end="71:113"><call pos:start="71:5" pos:end="71:113"><name pos:start="71:5" pos:end="71:19">CHECK_LOAD_FUNC</name><argument_list pos:start="71:20" pos:end="71:113">(<argument pos:start="71:21" pos:end="71:46"><expr pos:start="71:21" pos:end="71:46"><name pos:start="71:21" pos:end="71:46">PCUDEVICECOMPUTECAPABILITY</name></expr></argument>, <argument pos:start="71:49" pos:end="71:83"><expr pos:start="71:49" pos:end="71:83"><name pos:start="71:49" pos:end="71:83"><name pos:start="71:49" pos:end="71:53">dl_fn</name><operator pos:start="71:54" pos:end="71:55">-&gt;</operator><name pos:start="71:56" pos:end="71:83">cu_device_compute_capability</name></name></expr></argument>, <argument pos:start="71:86" pos:end="71:112"><expr pos:start="71:86" pos:end="71:112"><literal type="string" pos:start="71:86" pos:end="71:112">"cuDeviceComputeCapability"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:74"><expr pos:start="73:5" pos:end="73:73"><call pos:start="73:5" pos:end="73:73"><name pos:start="73:5" pos:end="73:19">CHECK_LOAD_FUNC</name><argument_list pos:start="73:20" pos:end="73:73">(<argument pos:start="73:21" pos:end="73:32"><expr pos:start="73:21" pos:end="73:32"><name pos:start="73:21" pos:end="73:32">PCUCTXCREATE</name></expr></argument>, <argument pos:start="73:35" pos:end="73:54"><expr pos:start="73:35" pos:end="73:54"><name pos:start="73:35" pos:end="73:54"><name pos:start="73:35" pos:end="73:39">dl_fn</name><operator pos:start="73:40" pos:end="73:41">-&gt;</operator><name pos:start="73:42" pos:end="73:54">cu_ctx_create</name></name></expr></argument>, <argument pos:start="73:57" pos:end="73:72"><expr pos:start="73:57" pos:end="73:72"><literal type="string" pos:start="73:57" pos:end="73:72">"cuCtxCreate_v2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:87"><expr pos:start="75:5" pos:end="75:86"><call pos:start="75:5" pos:end="75:86"><name pos:start="75:5" pos:end="75:19">CHECK_LOAD_FUNC</name><argument_list pos:start="75:20" pos:end="75:86">(<argument pos:start="75:21" pos:end="75:36"><expr pos:start="75:21" pos:end="75:36"><name pos:start="75:21" pos:end="75:36">PCUCTXPOPCURRENT</name></expr></argument>, <argument pos:start="75:39" pos:end="75:63"><expr pos:start="75:39" pos:end="75:63"><name pos:start="75:39" pos:end="75:63"><name pos:start="75:39" pos:end="75:43">dl_fn</name><operator pos:start="75:44" pos:end="75:45">-&gt;</operator><name pos:start="75:46" pos:end="75:63">cu_ctx_pop_current</name></name></expr></argument>, <argument pos:start="75:66" pos:end="75:85"><expr pos:start="75:66" pos:end="75:85"><literal type="string" pos:start="75:66" pos:end="75:85">"cuCtxPopCurrent_v2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:77"><expr pos:start="77:5" pos:end="77:76"><call pos:start="77:5" pos:end="77:76"><name pos:start="77:5" pos:end="77:19">CHECK_LOAD_FUNC</name><argument_list pos:start="77:20" pos:end="77:76">(<argument pos:start="77:21" pos:end="77:33"><expr pos:start="77:21" pos:end="77:33"><name pos:start="77:21" pos:end="77:33">PCUCTXDESTROY</name></expr></argument>, <argument pos:start="77:36" pos:end="77:56"><expr pos:start="77:36" pos:end="77:56"><name pos:start="77:36" pos:end="77:56"><name pos:start="77:36" pos:end="77:40">dl_fn</name><operator pos:start="77:41" pos:end="77:42">-&gt;</operator><name pos:start="77:43" pos:end="77:56">cu_ctx_destroy</name></name></expr></argument>, <argument pos:start="77:59" pos:end="77:75"><expr pos:start="77:59" pos:end="77:75"><literal type="string" pos:start="77:59" pos:end="77:75">"cuCtxDestroy_v2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="81:5" pos:end="81:13">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">1</literal></expr>;</return>



<label pos:start="85:1" pos:end="85:6"><name pos:start="85:1" pos:end="85:5">error</name>:</label>



    <if_stmt pos:start="89:5" pos:end="91:39"><if pos:start="89:5" pos:end="91:39">if <condition pos:start="89:8" pos:end="89:24">(<expr pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:13">dl_fn</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:23">cuda_lib</name></name></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:39"><block_content pos:start="91:9" pos:end="91:39">

        <expr_stmt pos:start="91:9" pos:end="91:39"><expr pos:start="91:9" pos:end="91:38"><call pos:start="91:9" pos:end="91:38"><name pos:start="91:9" pos:end="91:21">DL_CLOSE_FUNC</name><argument_list pos:start="91:22" pos:end="91:38">(<argument pos:start="91:23" pos:end="91:37"><expr pos:start="91:23" pos:end="91:37"><name pos:start="91:23" pos:end="91:37"><name pos:start="91:23" pos:end="91:27">dl_fn</name><operator pos:start="91:28" pos:end="91:29">-&gt;</operator><name pos:start="91:30" pos:end="91:37">cuda_lib</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:27"><expr pos:start="95:5" pos:end="95:26"><name pos:start="95:5" pos:end="95:19"><name pos:start="95:5" pos:end="95:9">dl_fn</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:19">cuda_lib</name></name> <operator pos:start="95:21" pos:end="95:21">=</operator> <name pos:start="95:23" pos:end="95:26">NULL</name></expr>;</expr_stmt>



    <return pos:start="99:5" pos:end="102:0">return <expr pos:start="99:12" pos:end="99:12"><literal type="number" pos:start="99:12" pos:end="99:12">0</literal></expr>;</return>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
