<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6080.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">eth_receive</name><parameter_list pos:start="1:24" pos:end="1:70">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:56"><decl pos:start="1:39" pos:end="1:56"><type pos:start="1:39" pos:end="1:56"><specifier pos:start="1:39" pos:end="1:43">const</specifier> <name pos:start="1:45" pos:end="1:51">uint8_t</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">buf</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:69"><decl pos:start="1:59" pos:end="1:69"><type pos:start="1:59" pos:end="1:69"><name pos:start="1:59" pos:end="1:64">size_t</name></type> <name pos:start="1:66" pos:end="1:69">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:5">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:25"><name pos:start="5:5" pos:end="5:23">mv88w8618_eth_state</name> <modifier pos:start="5:25" pos:end="5:25">*</modifier></type><name pos:start="5:26" pos:end="5:26">s</name> <init pos:start="5:28" pos:end="5:35">= <expr pos:start="5:30" pos:end="5:35"><name pos:start="5:30" pos:end="5:35">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:22">desc_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:21">mv88w8618_rx_desc</name></type> <name pos:start="9:23" pos:end="9:26">desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="57:5">for <control pos:start="15:9" pos:end="15:27">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:22"><expr pos:start="15:17" pos:end="15:21"><name pos:start="15:17" pos:end="15:17">i</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <literal type="number" pos:start="15:21" pos:end="15:21">4</literal></expr>;</condition> <incr pos:start="15:24" pos:end="15:26"><expr pos:start="15:24" pos:end="15:26"><name pos:start="15:24" pos:end="15:24">i</name><operator pos:start="15:25" pos:end="15:26">++</operator></expr></incr>)</control> <block pos:start="15:29" pos:end="57:5">{<block_content pos:start="17:9" pos:end="55:46">

        <expr_stmt pos:start="17:9" pos:end="17:33"><expr pos:start="17:9" pos:end="17:32"><name pos:start="17:9" pos:end="17:17">desc_addr</name> <operator pos:start="17:19" pos:end="17:19">=</operator> <name pos:start="17:21" pos:end="17:32"><name pos:start="17:21" pos:end="17:21">s</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:29">cur_rx</name><index pos:start="17:30" pos:end="17:32">[<expr pos:start="17:31" pos:end="17:31"><name pos:start="17:31" pos:end="17:31">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="21:21"><if pos:start="19:9" pos:end="21:21">if <condition pos:start="19:12" pos:end="19:23">(<expr pos:start="19:13" pos:end="19:22"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:22">desc_addr</name></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:21"><block_content pos:start="21:13" pos:end="21:21">

            <continue pos:start="21:13" pos:end="21:21">continue;</continue></block_content></block></if></if_stmt>

        <do pos:start="23:9" pos:end="55:46">do <block pos:start="23:12" pos:end="55:9">{<block_content pos:start="25:13" pos:end="53:34">

            <expr_stmt pos:start="25:13" pos:end="25:46"><expr pos:start="25:13" pos:end="25:45"><call pos:start="25:13" pos:end="25:45"><name pos:start="25:13" pos:end="25:27">eth_rx_desc_get</name><argument_list pos:start="25:28" pos:end="25:45">(<argument pos:start="25:29" pos:end="25:37"><expr pos:start="25:29" pos:end="25:37"><name pos:start="25:29" pos:end="25:37">desc_addr</name></expr></argument>, <argument pos:start="25:40" pos:end="25:44"><expr pos:start="25:40" pos:end="25:44"><operator pos:start="25:40" pos:end="25:40">&amp;</operator><name pos:start="25:41" pos:end="25:44">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="27:13" pos:end="51:13"><if pos:start="27:13" pos:end="51:13">if <condition pos:start="27:16" pos:end="27:75">(<expr pos:start="27:17" pos:end="27:74"><operator pos:start="27:17" pos:end="27:17">(</operator><name pos:start="27:18" pos:end="27:29"><name pos:start="27:18" pos:end="27:21">desc</name><operator pos:start="27:22" pos:end="27:22">.</operator><name pos:start="27:23" pos:end="27:29">cmdstat</name></name> <operator pos:start="27:31" pos:end="27:31">&amp;</operator> <name pos:start="27:33" pos:end="27:45">MP_ETH_RX_OWN</name><operator pos:start="27:46" pos:end="27:46">)</operator> <operator pos:start="27:48" pos:end="27:49">&amp;&amp;</operator> <name pos:start="27:51" pos:end="27:66"><name pos:start="27:51" pos:end="27:54">desc</name><operator pos:start="27:55" pos:end="27:55">.</operator><name pos:start="27:56" pos:end="27:66">buffer_size</name></name> <operator pos:start="27:68" pos:end="27:69">&gt;=</operator> <name pos:start="27:71" pos:end="27:74">size</name></expr>)</condition> <block pos:start="27:77" pos:end="51:13">{<block_content pos:start="29:17" pos:end="49:23">

                <expr_stmt pos:start="29:17" pos:end="31:53"><expr pos:start="29:17" pos:end="31:52"><call pos:start="29:17" pos:end="31:52"><name pos:start="29:17" pos:end="29:41">cpu_physical_memory_write</name><argument_list pos:start="29:42" pos:end="31:52">(<argument pos:start="29:43" pos:end="29:70"><expr pos:start="29:43" pos:end="29:70"><name pos:start="29:43" pos:end="29:53"><name pos:start="29:43" pos:end="29:46">desc</name><operator pos:start="29:47" pos:end="29:47">.</operator><name pos:start="29:48" pos:end="29:53">buffer</name></name> <operator pos:start="29:55" pos:end="29:55">+</operator> <name pos:start="29:57" pos:end="29:70"><name pos:start="29:57" pos:end="29:57">s</name><operator pos:start="29:58" pos:end="29:59">-&gt;</operator><name pos:start="29:60" pos:end="29:70">vlan_header</name></name></expr></argument>,

                                          <argument pos:start="31:43" pos:end="31:45"><expr pos:start="31:43" pos:end="31:45"><name pos:start="31:43" pos:end="31:45">buf</name></expr></argument>, <argument pos:start="31:48" pos:end="31:51"><expr pos:start="31:48" pos:end="31:51"><name pos:start="31:48" pos:end="31:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:51"><expr pos:start="33:17" pos:end="33:50"><name pos:start="33:17" pos:end="33:26"><name pos:start="33:17" pos:end="33:20">desc</name><operator pos:start="33:21" pos:end="33:21">.</operator><name pos:start="33:22" pos:end="33:26">bytes</name></name> <operator pos:start="33:28" pos:end="33:28">=</operator> <name pos:start="33:30" pos:end="33:33">size</name> <operator pos:start="33:35" pos:end="33:35">+</operator> <name pos:start="33:37" pos:end="33:50"><name pos:start="33:37" pos:end="33:37">s</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:50">vlan_header</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="35:17" pos:end="35:47"><expr pos:start="35:17" pos:end="35:46"><name pos:start="35:17" pos:end="35:28"><name pos:start="35:17" pos:end="35:20">desc</name><operator pos:start="35:21" pos:end="35:21">.</operator><name pos:start="35:22" pos:end="35:28">cmdstat</name></name> <operator pos:start="35:30" pos:end="35:31">&amp;=</operator> <operator pos:start="35:33" pos:end="35:33">~</operator><name pos:start="35:34" pos:end="35:46">MP_ETH_RX_OWN</name></expr>;</expr_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:41"><expr pos:start="37:17" pos:end="37:40"><name pos:start="37:17" pos:end="37:28"><name pos:start="37:17" pos:end="37:17">s</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:25">cur_rx</name><index pos:start="37:26" pos:end="37:28">[<expr pos:start="37:27" pos:end="37:27"><name pos:start="37:27" pos:end="37:27">i</name></expr>]</index></name> <operator pos:start="37:30" pos:end="37:30">=</operator> <name pos:start="37:32" pos:end="37:40"><name pos:start="37:32" pos:end="37:35">desc</name><operator pos:start="37:36" pos:end="37:36">.</operator><name pos:start="37:37" pos:end="37:40">next</name></name></expr>;</expr_stmt>



                <expr_stmt pos:start="41:17" pos:end="41:40"><expr pos:start="41:17" pos:end="41:39"><name pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:22">icr</name></name> <operator pos:start="41:24" pos:end="41:25">|=</operator> <name pos:start="41:27" pos:end="41:39">MP_ETH_IRQ_RX</name></expr>;</expr_stmt>

                <if_stmt pos:start="43:17" pos:end="45:43"><if pos:start="43:17" pos:end="45:43">if <condition pos:start="43:20" pos:end="43:36">(<expr pos:start="43:21" pos:end="43:35"><name pos:start="43:21" pos:end="43:26"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:26">icr</name></name> <operator pos:start="43:28" pos:end="43:28">&amp;</operator> <name pos:start="43:30" pos:end="43:35"><name pos:start="43:30" pos:end="43:30">s</name><operator pos:start="43:31" pos:end="43:32">-&gt;</operator><name pos:start="43:33" pos:end="43:35">imr</name></name></expr>)</condition><block type="pseudo" pos:start="45:21" pos:end="45:43"><block_content pos:start="45:21" pos:end="45:43">

                    <expr_stmt pos:start="45:21" pos:end="45:43"><expr pos:start="45:21" pos:end="45:42"><call pos:start="45:21" pos:end="45:42"><name pos:start="45:21" pos:end="45:34">qemu_irq_raise</name><argument_list pos:start="45:35" pos:end="45:42">(<argument pos:start="45:36" pos:end="45:41"><expr pos:start="45:36" pos:end="45:41"><name pos:start="45:36" pos:end="45:41"><name pos:start="45:36" pos:end="45:36">s</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:41">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:50"><expr pos:start="47:17" pos:end="47:49"><call pos:start="47:17" pos:end="47:49"><name pos:start="47:17" pos:end="47:31">eth_rx_desc_put</name><argument_list pos:start="47:32" pos:end="47:49">(<argument pos:start="47:33" pos:end="47:41"><expr pos:start="47:33" pos:end="47:41"><name pos:start="47:33" pos:end="47:41">desc_addr</name></expr></argument>, <argument pos:start="47:44" pos:end="47:48"><expr pos:start="47:44" pos:end="47:48"><operator pos:start="47:44" pos:end="47:44">&amp;</operator><name pos:start="47:45" pos:end="47:48">desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="49:17" pos:end="49:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:34"><expr pos:start="53:13" pos:end="53:33"><name pos:start="53:13" pos:end="53:21">desc_addr</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <name pos:start="53:25" pos:end="53:33"><name pos:start="53:25" pos:end="53:28">desc</name><operator pos:start="53:29" pos:end="53:29">.</operator><name pos:start="53:30" pos:end="53:33">next</name></name></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="55:17" pos:end="55:45">(<expr pos:start="55:18" pos:end="55:44"><name pos:start="55:18" pos:end="55:26">desc_addr</name> <operator pos:start="55:28" pos:end="55:29">!=</operator> <name pos:start="55:31" pos:end="55:44"><name pos:start="55:31" pos:end="55:31">s</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:41">rx_queue</name><index pos:start="55:42" pos:end="55:44">[<expr pos:start="55:43" pos:end="55:43"><name pos:start="55:43" pos:end="55:43">i</name></expr>]</index></name></expr>)</condition>;</do>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
