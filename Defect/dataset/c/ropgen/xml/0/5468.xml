<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5468.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:39">eightsvx_decode_init</name><parameter_list pos:start="1:40" pos:end="1:62">(<parameter pos:start="1:41" pos:end="1:61"><decl pos:start="1:41" pos:end="1:61"><type pos:start="1:41" pos:end="1:56"><name pos:start="1:41" pos:end="1:54">AVCodecContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:13">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">EightSvxContext</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">esc</name> <init pos:start="5:26" pos:end="5:43">= <expr pos:start="5:28" pos:end="5:43"><name pos:start="5:28" pos:end="5:43"><name pos:start="5:28" pos:end="5:32">avctx</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:43">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:51">(<expr pos:start="9:9" pos:end="9:50"><name pos:start="9:9" pos:end="9:23"><name pos:start="9:9" pos:end="9:13">avctx</name><operator pos:start="9:14" pos:end="9:15">-&gt;</operator><name pos:start="9:16" pos:end="9:23">channels</name></name> <operator pos:start="9:25" pos:end="9:25">&lt;</operator> <literal type="number" pos:start="9:27" pos:end="9:27">1</literal> <operator pos:start="9:29" pos:end="9:30">||</operator> <name pos:start="9:32" pos:end="9:46"><name pos:start="9:32" pos:end="9:36">avctx</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:46">channels</name></name> <operator pos:start="9:48" pos:end="9:48">&gt;</operator> <literal type="number" pos:start="9:50" pos:end="9:50">2</literal></expr>)</condition> <block pos:start="9:53" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:35">

        <expr_stmt pos:start="11:9" pos:end="11:84"><expr pos:start="11:9" pos:end="11:83"><call pos:start="11:9" pos:end="11:83"><name pos:start="11:9" pos:end="11:14">av_log</name><argument_list pos:start="11:15" pos:end="11:83">(<argument pos:start="11:16" pos:end="11:20"><expr pos:start="11:16" pos:end="11:20"><name pos:start="11:16" pos:end="11:20">avctx</name></expr></argument>, <argument pos:start="11:23" pos:end="11:34"><expr pos:start="11:23" pos:end="11:34"><name pos:start="11:23" pos:end="11:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="11:37" pos:end="11:82"><expr pos:start="11:37" pos:end="11:82"><literal type="string" pos:start="11:37" pos:end="11:82">"8SVX does not support more than 2 channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:35">return <expr pos:start="13:16" pos:end="13:34"><name pos:start="13:16" pos:end="13:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="19:5" pos:end="35:5">switch <condition pos:start="19:12" pos:end="19:29">(<expr pos:start="19:13" pos:end="19:28"><name pos:start="19:13" pos:end="19:28"><name pos:start="19:13" pos:end="19:17">avctx</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:24">codec</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:28">id</name></name></expr>)</condition> <block pos:start="19:31" pos:end="35:5">{<block_content pos:start="21:5" pos:end="33:35">

    <case pos:start="21:5" pos:end="21:30">case <expr pos:start="21:10" pos:end="21:29"><name pos:start="21:10" pos:end="21:29">AV_CODEC_ID_8SVX_FIB</name></expr>:</case> <expr_stmt pos:start="21:32" pos:end="21:54"><expr pos:start="21:32" pos:end="21:53"><name pos:start="21:32" pos:end="21:41"><name pos:start="21:32" pos:end="21:34">esc</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:41">table</name></name> <operator pos:start="21:43" pos:end="21:43">=</operator> <name pos:start="21:45" pos:end="21:53">fibonacci</name></expr>;</expr_stmt>    <break pos:start="21:59" pos:end="21:64">break;</break>

    <case pos:start="23:5" pos:end="23:30">case <expr pos:start="23:10" pos:end="23:29"><name pos:start="23:10" pos:end="23:29">AV_CODEC_ID_8SVX_EXP</name></expr>:</case> <expr_stmt pos:start="23:32" pos:end="23:56"><expr pos:start="23:32" pos:end="23:55"><name pos:start="23:32" pos:end="23:41"><name pos:start="23:32" pos:end="23:34">esc</name><operator pos:start="23:35" pos:end="23:36">-&gt;</operator><name pos:start="23:37" pos:end="23:41">table</name></name> <operator pos:start="23:43" pos:end="23:43">=</operator> <name pos:start="23:45" pos:end="23:55">exponential</name></expr>;</expr_stmt>  <break pos:start="23:59" pos:end="23:64">break;</break>

    <case pos:start="25:5" pos:end="25:35">case <expr pos:start="25:10" pos:end="25:34"><name pos:start="25:10" pos:end="25:34">AV_CODEC_ID_PCM_S8_PLANAR</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:30">case <expr pos:start="27:10" pos:end="27:29"><name pos:start="27:10" pos:end="27:29">AV_CODEC_ID_8SVX_RAW</name></expr>:</case> <expr_stmt pos:start="27:32" pos:end="27:49"><expr pos:start="27:32" pos:end="27:48"><name pos:start="27:32" pos:end="27:41"><name pos:start="27:32" pos:end="27:34">esc</name><operator pos:start="27:35" pos:end="27:36">-&gt;</operator><name pos:start="27:37" pos:end="27:41">table</name></name> <operator pos:start="27:43" pos:end="27:43">=</operator> <name pos:start="27:45" pos:end="27:48">NULL</name></expr>;</expr_stmt>         <break pos:start="27:59" pos:end="27:64">break;</break>

    <default pos:start="29:5" pos:end="29:12">default:</default>

        <expr_stmt pos:start="31:9" pos:end="31:80"><expr pos:start="31:9" pos:end="31:79"><call pos:start="31:9" pos:end="31:79"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:79">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:60"><expr pos:start="31:37" pos:end="31:60"><literal type="string" pos:start="31:37" pos:end="31:60">"Invalid codec id %d.\n"</literal></expr></argument>, <argument pos:start="31:63" pos:end="31:78"><expr pos:start="31:63" pos:end="31:78"><name pos:start="31:63" pos:end="31:78"><name pos:start="31:63" pos:end="31:67">avctx</name><operator pos:start="31:68" pos:end="31:69">-&gt;</operator><name pos:start="31:70" pos:end="31:74">codec</name><operator pos:start="31:75" pos:end="31:76">-&gt;</operator><name pos:start="31:77" pos:end="31:78">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:35">return <expr pos:start="33:16" pos:end="33:34"><name pos:start="33:16" pos:end="33:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:9">avctx</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:21">sample_fmt</name></name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:41">AV_SAMPLE_FMT_U8P</name></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><call pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:30">avcodec_get_frame_defaults</name><argument_list pos:start="41:31" pos:end="41:43">(<argument pos:start="41:32" pos:end="41:42"><expr pos:start="41:32" pos:end="41:42"><operator pos:start="41:32" pos:end="41:32">&amp;</operator><name pos:start="41:33" pos:end="41:42"><name pos:start="41:33" pos:end="41:35">esc</name><operator pos:start="41:36" pos:end="41:37">-&gt;</operator><name pos:start="41:38" pos:end="41:42">frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:9">avctx</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:22">coded_frame</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <operator pos:start="43:26" pos:end="43:26">&amp;</operator><name pos:start="43:27" pos:end="43:36"><name pos:start="43:27" pos:end="43:29">esc</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:36">frame</name></name></expr>;</expr_stmt>



    <return pos:start="47:5" pos:end="47:13">return <expr pos:start="47:12" pos:end="47:12"><literal type="number" pos:start="47:12" pos:end="47:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
