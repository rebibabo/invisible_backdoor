<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20939.c" pos:tabs="8"><function pos:start="1:1" pos:end="471:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">kvm_arch_init_vcpu</name><parameter_list pos:start="1:23" pos:end="1:40">(<parameter pos:start="1:24" pos:end="1:39"><decl pos:start="1:24" pos:end="1:39"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:34">CPUX86State</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="471:1">{<block_content pos:start="5:5" pos:end="469:13">

    <struct pos:start="5:5" pos:end="11:29">struct <block pos:start="5:12" pos:end="11:5">{

        <decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:25"><name pos:start="7:9" pos:end="7:25"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:25">kvm_cpuid2</name></name></type> <name pos:start="7:27" pos:end="7:31">cpuid</name></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:45"><decl pos:start="9:9" pos:end="9:44"><type pos:start="9:9" pos:end="9:31"><name pos:start="9:9" pos:end="9:31"><name pos:start="9:9" pos:end="9:14">struct</name> <name pos:start="9:16" pos:end="9:31">kvm_cpuid_entry2</name></name></type> <name pos:start="9:33" pos:end="9:44"><name pos:start="9:33" pos:end="9:39">entries</name><index pos:start="9:40" pos:end="9:44">[<expr pos:start="9:41" pos:end="9:43"><literal type="number" pos:start="9:41" pos:end="9:43">100</literal></expr>]</index></name></decl>;</decl_stmt>

    }</block> <decl pos:start="11:7" pos:end="11:28"><name pos:start="11:7" pos:end="11:17">QEMU_PACKED</name> <name pos:start="11:19" pos:end="11:28">cpuid_data</name></decl>;</struct>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">KVMState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:15">s</name> <init pos:start="13:17" pos:end="13:32">= <expr pos:start="13:19" pos:end="13:32"><name pos:start="13:19" pos:end="13:32"><name pos:start="13:19" pos:end="13:21">env</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:32">kvm_state</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:18">limit</name></decl>, <decl pos:start="15:21" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:21" pos:end="15:21">i</name></decl>, <decl pos:start="15:24" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:24" pos:end="15:24">j</name></decl>, <decl pos:start="15:27" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:27" pos:end="15:33">cpuid_i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:19">unused</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:27">kvm_cpuid_entry2</name></name> <modifier pos:start="19:29" pos:end="19:29">*</modifier></type><name pos:start="19:30" pos:end="19:30">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:25"><name pos:start="21:14" pos:end="21:22">signature</name><index pos:start="21:23" pos:end="21:25">[<expr pos:start="21:24" pos:end="21:24"><literal type="number" pos:start="21:24" pos:end="21:24">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:72"><expr pos:start="27:5" pos:end="27:71"><name pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:7">env</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:23">cpuid_features</name></name> <operator pos:start="27:25" pos:end="27:26">&amp;=</operator> <call pos:start="27:28" pos:end="27:71"><name pos:start="27:28" pos:end="27:55">kvm_arch_get_supported_cpuid</name><argument_list pos:start="27:56" pos:end="27:71">(<argument pos:start="27:57" pos:end="27:57"><expr pos:start="27:57" pos:end="27:57"><name pos:start="27:57" pos:end="27:57">s</name></expr></argument>, <argument pos:start="27:60" pos:end="27:60"><expr pos:start="27:60" pos:end="27:60"><literal type="number" pos:start="27:60" pos:end="27:60">1</literal></expr></argument>, <argument pos:start="27:63" pos:end="27:63"><expr pos:start="27:63" pos:end="27:63"><literal type="number" pos:start="27:63" pos:end="27:63">0</literal></expr></argument>, <argument pos:start="27:66" pos:end="27:70"><expr pos:start="27:66" pos:end="27:70"><name pos:start="27:66" pos:end="27:70">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:63"><expr pos:start="31:5" pos:end="31:62"><name pos:start="31:5" pos:end="31:5">j</name> <operator pos:start="31:7" pos:end="31:7">=</operator> <name pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:11">env</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:31">cpuid_ext_features</name></name> <operator pos:start="31:33" pos:end="31:33">&amp;</operator> <name pos:start="31:35" pos:end="31:62">CPUID_EXT_TSC_DEADLINE_TIMER</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:76"><expr pos:start="33:5" pos:end="33:75"><name pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:7">env</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:27">cpuid_ext_features</name></name> <operator pos:start="33:29" pos:end="33:30">&amp;=</operator> <call pos:start="33:32" pos:end="33:75"><name pos:start="33:32" pos:end="33:59">kvm_arch_get_supported_cpuid</name><argument_list pos:start="33:60" pos:end="33:75">(<argument pos:start="33:61" pos:end="33:61"><expr pos:start="33:61" pos:end="33:61"><name pos:start="33:61" pos:end="33:61">s</name></expr></argument>, <argument pos:start="33:64" pos:end="33:64"><expr pos:start="33:64" pos:end="33:64"><literal type="number" pos:start="33:64" pos:end="33:64">1</literal></expr></argument>, <argument pos:start="33:67" pos:end="33:67"><expr pos:start="33:67" pos:end="33:67"><literal type="number" pos:start="33:67" pos:end="33:67">0</literal></expr></argument>, <argument pos:start="33:70" pos:end="33:74"><expr pos:start="33:70" pos:end="33:74"><name pos:start="33:70" pos:end="33:74">R_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="37:59">(<expr pos:start="35:9" pos:end="37:58"><name pos:start="35:9" pos:end="35:9">j</name> <operator pos:start="35:11" pos:end="35:12">&amp;&amp;</operator> <call pos:start="35:14" pos:end="35:36"><name pos:start="35:14" pos:end="35:34">kvm_irqchip_in_kernel</name><argument_list pos:start="35:35" pos:end="35:36">()</argument_list></call> <operator pos:start="35:38" pos:end="35:39">&amp;&amp;</operator>

        <call pos:start="37:9" pos:end="37:58"><name pos:start="37:9" pos:end="37:27">kvm_check_extension</name><argument_list pos:start="37:28" pos:end="37:58">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><name pos:start="37:29" pos:end="37:29">s</name></expr></argument>, <argument pos:start="37:32" pos:end="37:57"><expr pos:start="37:32" pos:end="37:57"><name pos:start="37:32" pos:end="37:57">KVM_CAP_TSC_DEADLINE_TIMER</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:61" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:64">

        <expr_stmt pos:start="39:9" pos:end="39:64"><expr pos:start="39:9" pos:end="39:63"><name pos:start="39:9" pos:end="39:31"><name pos:start="39:9" pos:end="39:11">env</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:31">cpuid_ext_features</name></name> <operator pos:start="39:33" pos:end="39:34">|=</operator> <name pos:start="39:36" pos:end="39:63">CPUID_EXT_TSC_DEADLINE_TIMER</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="47:71"><expr pos:start="45:5" pos:end="47:70"><name pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:7">env</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:28">cpuid_ext2_features</name></name> <operator pos:start="45:30" pos:end="45:31">&amp;=</operator> <call pos:start="45:33" pos:end="47:70"><name pos:start="45:33" pos:end="45:60">kvm_arch_get_supported_cpuid</name><argument_list pos:start="45:61" pos:end="47:70">(<argument pos:start="45:62" pos:end="45:62"><expr pos:start="45:62" pos:end="45:62"><name pos:start="45:62" pos:end="45:62">s</name></expr></argument>, <argument pos:start="45:65" pos:end="45:74"><expr pos:start="45:65" pos:end="45:74"><literal type="number" pos:start="45:65" pos:end="45:74">0x80000001</literal></expr></argument>,

                                                             <argument pos:start="47:62" pos:end="47:62"><expr pos:start="47:62" pos:end="47:62"><literal type="number" pos:start="47:62" pos:end="47:62">0</literal></expr></argument>, <argument pos:start="47:65" pos:end="47:69"><expr pos:start="47:65" pos:end="47:69"><name pos:start="47:65" pos:end="47:69">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:71"><expr pos:start="49:5" pos:end="51:70"><name pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:7">env</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:28">cpuid_ext3_features</name></name> <operator pos:start="49:30" pos:end="49:31">&amp;=</operator> <call pos:start="49:33" pos:end="51:70"><name pos:start="49:33" pos:end="49:60">kvm_arch_get_supported_cpuid</name><argument_list pos:start="49:61" pos:end="51:70">(<argument pos:start="49:62" pos:end="49:62"><expr pos:start="49:62" pos:end="49:62"><name pos:start="49:62" pos:end="49:62">s</name></expr></argument>, <argument pos:start="49:65" pos:end="49:74"><expr pos:start="49:65" pos:end="49:74"><literal type="number" pos:start="49:65" pos:end="49:74">0x80000001</literal></expr></argument>,

                                                             <argument pos:start="51:62" pos:end="51:62"><expr pos:start="51:62" pos:end="51:62"><literal type="number" pos:start="51:62" pos:end="51:62">0</literal></expr></argument>, <argument pos:start="51:65" pos:end="51:69"><expr pos:start="51:65" pos:end="51:69"><name pos:start="51:65" pos:end="51:69">R_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="55:71"><expr pos:start="53:5" pos:end="55:70"><name pos:start="53:5" pos:end="53:27"><name pos:start="53:5" pos:end="53:7">env</name><operator pos:start="53:8" pos:end="53:9">-&gt;</operator><name pos:start="53:10" pos:end="53:27">cpuid_svm_features</name></name>  <operator pos:start="53:30" pos:end="53:31">&amp;=</operator> <call pos:start="53:33" pos:end="55:70"><name pos:start="53:33" pos:end="53:60">kvm_arch_get_supported_cpuid</name><argument_list pos:start="53:61" pos:end="55:70">(<argument pos:start="53:62" pos:end="53:62"><expr pos:start="53:62" pos:end="53:62"><name pos:start="53:62" pos:end="53:62">s</name></expr></argument>, <argument pos:start="53:65" pos:end="53:74"><expr pos:start="53:65" pos:end="53:74"><literal type="number" pos:start="53:65" pos:end="53:74">0x8000000A</literal></expr></argument>,

                                                             <argument pos:start="55:62" pos:end="55:62"><expr pos:start="55:62" pos:end="55:62"><literal type="number" pos:start="55:62" pos:end="55:62">0</literal></expr></argument>, <argument pos:start="55:65" pos:end="55:69"><expr pos:start="55:65" pos:end="55:69"><name pos:start="55:65" pos:end="55:69">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:16"><expr pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:11">cpuid_i</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:35">/* Paravirtualization CPUIDs */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:39"><expr pos:start="65:5" pos:end="65:38"><name pos:start="65:5" pos:end="65:5">c</name> <operator pos:start="65:7" pos:end="65:7">=</operator> <operator pos:start="65:9" pos:end="65:9">&amp;</operator><name pos:start="65:10" pos:end="65:38"><name pos:start="65:10" pos:end="65:19">cpuid_data</name><operator pos:start="65:20" pos:end="65:20">.</operator><name pos:start="65:21" pos:end="65:27">entries</name><index pos:start="65:28" pos:end="65:38">[<expr pos:start="65:29" pos:end="65:37"><name pos:start="65:29" pos:end="65:35">cpuid_i</name><operator pos:start="65:36" pos:end="65:37">++</operator></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:29"><expr pos:start="67:5" pos:end="67:28"><call pos:start="67:5" pos:end="67:28"><name pos:start="67:5" pos:end="67:10">memset</name><argument_list pos:start="67:11" pos:end="67:28">(<argument pos:start="67:12" pos:end="67:12"><expr pos:start="67:12" pos:end="67:12"><name pos:start="67:12" pos:end="67:12">c</name></expr></argument>, <argument pos:start="67:15" pos:end="67:15"><expr pos:start="67:15" pos:end="67:15"><literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr></argument>, <argument pos:start="67:18" pos:end="67:27"><expr pos:start="67:18" pos:end="67:27"><sizeof pos:start="67:18" pos:end="67:27">sizeof<argument_list pos:start="67:24" pos:end="67:27">(<argument pos:start="67:25" pos:end="67:26"><expr pos:start="67:25" pos:end="67:26"><operator pos:start="67:25" pos:end="67:25">*</operator><name pos:start="67:26" pos:end="67:26">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:38"><expr pos:start="69:5" pos:end="69:37"><name pos:start="69:5" pos:end="69:15"><name pos:start="69:5" pos:end="69:5">c</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:15">function</name></name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:37">KVM_CPUID_SIGNATURE</name></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="83:5"><if pos:start="71:5" pos:end="77:5">if <condition pos:start="71:8" pos:end="71:26">(<expr pos:start="71:9" pos:end="71:25"><operator pos:start="71:9" pos:end="71:9">!</operator><call pos:start="71:10" pos:end="71:25"><name pos:start="71:10" pos:end="71:23">hyperv_enabled</name><argument_list pos:start="71:24" pos:end="71:25">()</argument_list></call></expr>)</condition> <block pos:start="71:28" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:19">

        <expr_stmt pos:start="73:9" pos:end="73:49"><expr pos:start="73:9" pos:end="73:48"><call pos:start="73:9" pos:end="73:48"><name pos:start="73:9" pos:end="73:14">memcpy</name><argument_list pos:start="73:15" pos:end="73:48">(<argument pos:start="73:16" pos:end="73:24"><expr pos:start="73:16" pos:end="73:24"><name pos:start="73:16" pos:end="73:24">signature</name></expr></argument>, <argument pos:start="73:27" pos:end="73:43"><expr pos:start="73:27" pos:end="73:43"><literal type="string" pos:start="73:27" pos:end="73:43">"KVMKVMKVM\0\0\0"</literal></expr></argument>, <argument pos:start="73:46" pos:end="73:47"><expr pos:start="73:46" pos:end="73:47"><literal type="number" pos:start="73:46" pos:end="73:47">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:19"><expr pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:9">c</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:14">eax</name></name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="number" pos:start="75:18" pos:end="75:18">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="83:5">else <block pos:start="77:12" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:34">

        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><call pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:14">memcpy</name><argument_list pos:start="79:15" pos:end="79:45">(<argument pos:start="79:16" pos:end="79:24"><expr pos:start="79:16" pos:end="79:24"><name pos:start="79:16" pos:end="79:24">signature</name></expr></argument>, <argument pos:start="79:27" pos:end="79:40"><expr pos:start="79:27" pos:end="79:40"><literal type="string" pos:start="79:27" pos:end="79:40">"Microsoft Hv"</literal></expr></argument>, <argument pos:start="79:43" pos:end="79:44"><expr pos:start="79:43" pos:end="79:44"><literal type="number" pos:start="79:43" pos:end="79:44">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:14"><name pos:start="81:9" pos:end="81:9">c</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:14">eax</name></name> <operator pos:start="81:16" pos:end="81:16">=</operator> <name pos:start="81:18" pos:end="81:33">HYPERV_CPUID_MIN</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:10"><name pos:start="85:5" pos:end="85:5">c</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:10">ebx</name></name> <operator pos:start="85:12" pos:end="85:12">=</operator> <name pos:start="85:14" pos:end="85:25"><name pos:start="85:14" pos:end="85:22">signature</name><index pos:start="85:23" pos:end="85:25">[<expr pos:start="85:24" pos:end="85:24"><literal type="number" pos:start="85:24" pos:end="85:24">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:26"><expr pos:start="87:5" pos:end="87:25"><name pos:start="87:5" pos:end="87:10"><name pos:start="87:5" pos:end="87:5">c</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:10">ecx</name></name> <operator pos:start="87:12" pos:end="87:12">=</operator> <name pos:start="87:14" pos:end="87:25"><name pos:start="87:14" pos:end="87:22">signature</name><index pos:start="87:23" pos:end="87:25">[<expr pos:start="87:24" pos:end="87:24"><literal type="number" pos:start="87:24" pos:end="87:24">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:26"><expr pos:start="89:5" pos:end="89:25"><name pos:start="89:5" pos:end="89:10"><name pos:start="89:5" pos:end="89:5">c</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:10">edx</name></name> <operator pos:start="89:12" pos:end="89:12">=</operator> <name pos:start="89:14" pos:end="89:25"><name pos:start="89:14" pos:end="89:22">signature</name><index pos:start="89:23" pos:end="89:25">[<expr pos:start="89:24" pos:end="89:24"><literal type="number" pos:start="89:24" pos:end="89:24">2</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:39"><expr pos:start="93:5" pos:end="93:38"><name pos:start="93:5" pos:end="93:5">c</name> <operator pos:start="93:7" pos:end="93:7">=</operator> <operator pos:start="93:9" pos:end="93:9">&amp;</operator><name pos:start="93:10" pos:end="93:38"><name pos:start="93:10" pos:end="93:19">cpuid_data</name><operator pos:start="93:20" pos:end="93:20">.</operator><name pos:start="93:21" pos:end="93:27">entries</name><index pos:start="93:28" pos:end="93:38">[<expr pos:start="93:29" pos:end="93:37"><name pos:start="93:29" pos:end="93:35">cpuid_i</name><operator pos:start="93:36" pos:end="93:37">++</operator></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:29"><expr pos:start="95:5" pos:end="95:28"><call pos:start="95:5" pos:end="95:28"><name pos:start="95:5" pos:end="95:10">memset</name><argument_list pos:start="95:11" pos:end="95:28">(<argument pos:start="95:12" pos:end="95:12"><expr pos:start="95:12" pos:end="95:12"><name pos:start="95:12" pos:end="95:12">c</name></expr></argument>, <argument pos:start="95:15" pos:end="95:15"><expr pos:start="95:15" pos:end="95:15"><literal type="number" pos:start="95:15" pos:end="95:15">0</literal></expr></argument>, <argument pos:start="95:18" pos:end="95:27"><expr pos:start="95:18" pos:end="95:27"><sizeof pos:start="95:18" pos:end="95:27">sizeof<argument_list pos:start="95:24" pos:end="95:27">(<argument pos:start="95:25" pos:end="95:26"><expr pos:start="95:25" pos:end="95:26"><operator pos:start="95:25" pos:end="95:25">*</operator><name pos:start="95:26" pos:end="95:26">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:37"><expr pos:start="97:5" pos:end="97:36"><name pos:start="97:5" pos:end="97:15"><name pos:start="97:5" pos:end="97:5">c</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:15">function</name></name> <operator pos:start="97:17" pos:end="97:17">=</operator> <name pos:start="97:19" pos:end="97:36">KVM_CPUID_FEATURES</name></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="101:70"><expr pos:start="99:5" pos:end="101:69"><name pos:start="99:5" pos:end="99:10"><name pos:start="99:5" pos:end="99:5">c</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:10">eax</name></name> <operator pos:start="99:12" pos:end="99:12">=</operator> <name pos:start="99:14" pos:end="99:36"><name pos:start="99:14" pos:end="99:16">env</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:36">cpuid_kvm_features</name></name> <operator pos:start="99:38" pos:end="99:38">&amp;</operator>

        <call pos:start="101:9" pos:end="101:69"><name pos:start="101:9" pos:end="101:36">kvm_arch_get_supported_cpuid</name><argument_list pos:start="101:37" pos:end="101:69">(<argument pos:start="101:38" pos:end="101:38"><expr pos:start="101:38" pos:end="101:38"><name pos:start="101:38" pos:end="101:38">s</name></expr></argument>, <argument pos:start="101:41" pos:end="101:58"><expr pos:start="101:41" pos:end="101:58"><name pos:start="101:41" pos:end="101:58">KVM_CPUID_FEATURES</name></expr></argument>, <argument pos:start="101:61" pos:end="101:61"><expr pos:start="101:61" pos:end="101:61"><literal type="number" pos:start="101:61" pos:end="101:61">0</literal></expr></argument>, <argument pos:start="101:64" pos:end="101:68"><expr pos:start="101:64" pos:end="101:68"><name pos:start="101:64" pos:end="101:68">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="197:5"><if pos:start="105:5" pos:end="197:5">if <condition pos:start="105:8" pos:end="105:25">(<expr pos:start="105:9" pos:end="105:24"><call pos:start="105:9" pos:end="105:24"><name pos:start="105:9" pos:end="105:22">hyperv_enabled</name><argument_list pos:start="105:23" pos:end="105:24">()</argument_list></call></expr>)</condition> <block pos:start="105:27" pos:end="197:5">{<block_content pos:start="107:9" pos:end="195:30">

        <expr_stmt pos:start="107:9" pos:end="107:54"><expr pos:start="107:9" pos:end="107:53"><call pos:start="107:9" pos:end="107:53"><name pos:start="107:9" pos:end="107:14">memcpy</name><argument_list pos:start="107:15" pos:end="107:53">(<argument pos:start="107:16" pos:end="107:24"><expr pos:start="107:16" pos:end="107:24"><name pos:start="107:16" pos:end="107:24">signature</name></expr></argument>, <argument pos:start="107:27" pos:end="107:48"><expr pos:start="107:27" pos:end="107:48"><literal type="string" pos:start="107:27" pos:end="107:48">"Hv#1\0\0\0\0\0\0\0\0"</literal></expr></argument>, <argument pos:start="107:51" pos:end="107:52"><expr pos:start="107:51" pos:end="107:52"><literal type="number" pos:start="107:51" pos:end="107:52">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:30"><expr pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:14"><name pos:start="109:9" pos:end="109:9">c</name><operator pos:start="109:10" pos:end="109:11">-&gt;</operator><name pos:start="109:12" pos:end="109:14">eax</name></name> <operator pos:start="109:16" pos:end="109:16">=</operator> <name pos:start="109:18" pos:end="109:29"><name pos:start="109:18" pos:end="109:26">signature</name><index pos:start="109:27" pos:end="109:29">[<expr pos:start="109:28" pos:end="109:28"><literal type="number" pos:start="109:28" pos:end="109:28">0</literal></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:43"><expr pos:start="113:9" pos:end="113:42"><name pos:start="113:9" pos:end="113:9">c</name> <operator pos:start="113:11" pos:end="113:11">=</operator> <operator pos:start="113:13" pos:end="113:13">&amp;</operator><name pos:start="113:14" pos:end="113:42"><name pos:start="113:14" pos:end="113:23">cpuid_data</name><operator pos:start="113:24" pos:end="113:24">.</operator><name pos:start="113:25" pos:end="113:31">entries</name><index pos:start="113:32" pos:end="113:42">[<expr pos:start="113:33" pos:end="113:41"><name pos:start="113:33" pos:end="113:39">cpuid_i</name><operator pos:start="113:40" pos:end="113:41">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:33"><expr pos:start="115:9" pos:end="115:32"><call pos:start="115:9" pos:end="115:32"><name pos:start="115:9" pos:end="115:14">memset</name><argument_list pos:start="115:15" pos:end="115:32">(<argument pos:start="115:16" pos:end="115:16"><expr pos:start="115:16" pos:end="115:16"><name pos:start="115:16" pos:end="115:16">c</name></expr></argument>, <argument pos:start="115:19" pos:end="115:19"><expr pos:start="115:19" pos:end="115:19"><literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr></argument>, <argument pos:start="115:22" pos:end="115:31"><expr pos:start="115:22" pos:end="115:31"><sizeof pos:start="115:22" pos:end="115:31">sizeof<argument_list pos:start="115:28" pos:end="115:31">(<argument pos:start="115:29" pos:end="115:30"><expr pos:start="115:29" pos:end="115:30"><operator pos:start="115:29" pos:end="115:29">*</operator><name pos:start="115:30" pos:end="115:30">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:43"><expr pos:start="117:9" pos:end="117:42"><name pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:9">c</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:19">function</name></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:42">HYPERV_CPUID_VERSION</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:28"><expr pos:start="119:9" pos:end="119:27"><name pos:start="119:9" pos:end="119:14"><name pos:start="119:9" pos:end="119:9">c</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:14">eax</name></name> <operator pos:start="119:16" pos:end="119:16">=</operator> <literal type="number" pos:start="119:18" pos:end="119:27">0x00001bbc</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:28"><expr pos:start="121:9" pos:end="121:27"><name pos:start="121:9" pos:end="121:14"><name pos:start="121:9" pos:end="121:9">c</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:14">ebx</name></name> <operator pos:start="121:16" pos:end="121:16">=</operator> <literal type="number" pos:start="121:18" pos:end="121:27">0x00060001</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:43"><expr pos:start="125:9" pos:end="125:42"><name pos:start="125:9" pos:end="125:9">c</name> <operator pos:start="125:11" pos:end="125:11">=</operator> <operator pos:start="125:13" pos:end="125:13">&amp;</operator><name pos:start="125:14" pos:end="125:42"><name pos:start="125:14" pos:end="125:23">cpuid_data</name><operator pos:start="125:24" pos:end="125:24">.</operator><name pos:start="125:25" pos:end="125:31">entries</name><index pos:start="125:32" pos:end="125:42">[<expr pos:start="125:33" pos:end="125:41"><name pos:start="125:33" pos:end="125:39">cpuid_i</name><operator pos:start="125:40" pos:end="125:41">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:33"><expr pos:start="127:9" pos:end="127:32"><call pos:start="127:9" pos:end="127:32"><name pos:start="127:9" pos:end="127:14">memset</name><argument_list pos:start="127:15" pos:end="127:32">(<argument pos:start="127:16" pos:end="127:16"><expr pos:start="127:16" pos:end="127:16"><name pos:start="127:16" pos:end="127:16">c</name></expr></argument>, <argument pos:start="127:19" pos:end="127:19"><expr pos:start="127:19" pos:end="127:19"><literal type="number" pos:start="127:19" pos:end="127:19">0</literal></expr></argument>, <argument pos:start="127:22" pos:end="127:31"><expr pos:start="127:22" pos:end="127:31"><sizeof pos:start="127:22" pos:end="127:31">sizeof<argument_list pos:start="127:28" pos:end="127:31">(<argument pos:start="127:29" pos:end="127:30"><expr pos:start="127:29" pos:end="127:30"><operator pos:start="127:29" pos:end="127:29">*</operator><name pos:start="127:30" pos:end="127:30">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:44"><expr pos:start="129:9" pos:end="129:43"><name pos:start="129:9" pos:end="129:19"><name pos:start="129:9" pos:end="129:9">c</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:19">function</name></name> <operator pos:start="129:21" pos:end="129:21">=</operator> <name pos:start="129:23" pos:end="129:43">HYPERV_CPUID_FEATURES</name></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="135:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:44">(<expr pos:start="131:13" pos:end="131:43"><call pos:start="131:13" pos:end="131:43"><name pos:start="131:13" pos:end="131:41">hyperv_relaxed_timing_enabled</name><argument_list pos:start="131:42" pos:end="131:43">()</argument_list></call></expr>)</condition> <block pos:start="131:46" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:53">

            <expr_stmt pos:start="133:13" pos:end="133:53"><expr pos:start="133:13" pos:end="133:52"><name pos:start="133:13" pos:end="133:18"><name pos:start="133:13" pos:end="133:13">c</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:18">eax</name></name> <operator pos:start="133:20" pos:end="133:21">|=</operator> <name pos:start="133:23" pos:end="133:52">HV_X64_MSR_HYPERCALL_AVAILABLE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="137:9" pos:end="143:9"><if pos:start="137:9" pos:end="143:9">if <condition pos:start="137:12" pos:end="137:39">(<expr pos:start="137:13" pos:end="137:38"><call pos:start="137:13" pos:end="137:38"><name pos:start="137:13" pos:end="137:36">hyperv_vapic_recommended</name><argument_list pos:start="137:37" pos:end="137:38">()</argument_list></call></expr>)</condition> <block pos:start="137:41" pos:end="143:9">{<block_content pos:start="139:13" pos:end="141:55">

            <expr_stmt pos:start="139:13" pos:end="139:53"><expr pos:start="139:13" pos:end="139:52"><name pos:start="139:13" pos:end="139:18"><name pos:start="139:13" pos:end="139:13">c</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:18">eax</name></name> <operator pos:start="139:20" pos:end="139:21">|=</operator> <name pos:start="139:23" pos:end="139:52">HV_X64_MSR_HYPERCALL_AVAILABLE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:55"><expr pos:start="141:13" pos:end="141:54"><name pos:start="141:13" pos:end="141:18"><name pos:start="141:13" pos:end="141:13">c</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:18">eax</name></name> <operator pos:start="141:20" pos:end="141:21">|=</operator> <name pos:start="141:23" pos:end="141:54">HV_X64_MSR_APIC_ACCESS_AVAILABLE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="147:9" pos:end="147:43"><expr pos:start="147:9" pos:end="147:42"><name pos:start="147:9" pos:end="147:9">c</name> <operator pos:start="147:11" pos:end="147:11">=</operator> <operator pos:start="147:13" pos:end="147:13">&amp;</operator><name pos:start="147:14" pos:end="147:42"><name pos:start="147:14" pos:end="147:23">cpuid_data</name><operator pos:start="147:24" pos:end="147:24">.</operator><name pos:start="147:25" pos:end="147:31">entries</name><index pos:start="147:32" pos:end="147:42">[<expr pos:start="147:33" pos:end="147:41"><name pos:start="147:33" pos:end="147:39">cpuid_i</name><operator pos:start="147:40" pos:end="147:41">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:33"><expr pos:start="149:9" pos:end="149:32"><call pos:start="149:9" pos:end="149:32"><name pos:start="149:9" pos:end="149:14">memset</name><argument_list pos:start="149:15" pos:end="149:32">(<argument pos:start="149:16" pos:end="149:16"><expr pos:start="149:16" pos:end="149:16"><name pos:start="149:16" pos:end="149:16">c</name></expr></argument>, <argument pos:start="149:19" pos:end="149:19"><expr pos:start="149:19" pos:end="149:19"><literal type="number" pos:start="149:19" pos:end="149:19">0</literal></expr></argument>, <argument pos:start="149:22" pos:end="149:31"><expr pos:start="149:22" pos:end="149:31"><sizeof pos:start="149:22" pos:end="149:31">sizeof<argument_list pos:start="149:28" pos:end="149:31">(<argument pos:start="149:29" pos:end="149:30"><expr pos:start="149:29" pos:end="149:30"><operator pos:start="149:29" pos:end="149:29">*</operator><name pos:start="149:30" pos:end="149:30">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:52"><expr pos:start="151:9" pos:end="151:51"><name pos:start="151:9" pos:end="151:19"><name pos:start="151:9" pos:end="151:9">c</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:19">function</name></name> <operator pos:start="151:21" pos:end="151:21">=</operator> <name pos:start="151:23" pos:end="151:51">HYPERV_CPUID_ENLIGHTMENT_INFO</name></expr>;</expr_stmt>

        <if_stmt pos:start="153:9" pos:end="157:9"><if pos:start="153:9" pos:end="157:9">if <condition pos:start="153:12" pos:end="153:44">(<expr pos:start="153:13" pos:end="153:43"><call pos:start="153:13" pos:end="153:43"><name pos:start="153:13" pos:end="153:41">hyperv_relaxed_timing_enabled</name><argument_list pos:start="153:42" pos:end="153:43">()</argument_list></call></expr>)</condition> <block pos:start="153:46" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:56">

            <expr_stmt pos:start="155:13" pos:end="155:56"><expr pos:start="155:13" pos:end="155:55"><name pos:start="155:13" pos:end="155:18"><name pos:start="155:13" pos:end="155:13">c</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:18">eax</name></name> <operator pos:start="155:20" pos:end="155:21">|=</operator> <name pos:start="155:23" pos:end="155:55">HV_X64_RELAXED_TIMING_RECOMMENDED</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="159:9" pos:end="163:9"><if pos:start="159:9" pos:end="163:9">if <condition pos:start="159:12" pos:end="159:39">(<expr pos:start="159:13" pos:end="159:38"><call pos:start="159:13" pos:end="159:38"><name pos:start="159:13" pos:end="159:36">hyperv_vapic_recommended</name><argument_list pos:start="159:37" pos:end="159:38">()</argument_list></call></expr>)</condition> <block pos:start="159:41" pos:end="163:9">{<block_content pos:start="161:13" pos:end="161:53">

            <expr_stmt pos:start="161:13" pos:end="161:53"><expr pos:start="161:13" pos:end="161:52"><name pos:start="161:13" pos:end="161:18"><name pos:start="161:13" pos:end="161:13">c</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:18">eax</name></name> <operator pos:start="161:20" pos:end="161:21">|=</operator> <name pos:start="161:23" pos:end="161:52">HV_X64_APIC_ACCESS_RECOMMENDED</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:47"><expr pos:start="165:9" pos:end="165:46"><name pos:start="165:9" pos:end="165:14"><name pos:start="165:9" pos:end="165:9">c</name><operator pos:start="165:10" pos:end="165:11">-&gt;</operator><name pos:start="165:12" pos:end="165:14">ebx</name></name> <operator pos:start="165:16" pos:end="165:16">=</operator> <call pos:start="165:18" pos:end="165:46"><name pos:start="165:18" pos:end="165:44">hyperv_get_spinlock_retries</name><argument_list pos:start="165:45" pos:end="165:46">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:43"><expr pos:start="169:9" pos:end="169:42"><name pos:start="169:9" pos:end="169:9">c</name> <operator pos:start="169:11" pos:end="169:11">=</operator> <operator pos:start="169:13" pos:end="169:13">&amp;</operator><name pos:start="169:14" pos:end="169:42"><name pos:start="169:14" pos:end="169:23">cpuid_data</name><operator pos:start="169:24" pos:end="169:24">.</operator><name pos:start="169:25" pos:end="169:31">entries</name><index pos:start="169:32" pos:end="169:42">[<expr pos:start="169:33" pos:end="169:41"><name pos:start="169:33" pos:end="169:39">cpuid_i</name><operator pos:start="169:40" pos:end="169:41">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:33"><expr pos:start="171:9" pos:end="171:32"><call pos:start="171:9" pos:end="171:32"><name pos:start="171:9" pos:end="171:14">memset</name><argument_list pos:start="171:15" pos:end="171:32">(<argument pos:start="171:16" pos:end="171:16"><expr pos:start="171:16" pos:end="171:16"><name pos:start="171:16" pos:end="171:16">c</name></expr></argument>, <argument pos:start="171:19" pos:end="171:19"><expr pos:start="171:19" pos:end="171:19"><literal type="number" pos:start="171:19" pos:end="171:19">0</literal></expr></argument>, <argument pos:start="171:22" pos:end="171:31"><expr pos:start="171:22" pos:end="171:31"><sizeof pos:start="171:22" pos:end="171:31">sizeof<argument_list pos:start="171:28" pos:end="171:31">(<argument pos:start="171:29" pos:end="171:30"><expr pos:start="171:29" pos:end="171:30"><operator pos:start="171:29" pos:end="171:29">*</operator><name pos:start="171:30" pos:end="171:30">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:52"><expr pos:start="173:9" pos:end="173:51"><name pos:start="173:9" pos:end="173:19"><name pos:start="173:9" pos:end="173:9">c</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:19">function</name></name> <operator pos:start="173:21" pos:end="173:21">=</operator> <name pos:start="173:23" pos:end="173:51">HYPERV_CPUID_IMPLEMENT_LIMITS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:22"><expr pos:start="175:9" pos:end="175:21"><name pos:start="175:9" pos:end="175:14"><name pos:start="175:9" pos:end="175:9">c</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:14">eax</name></name> <operator pos:start="175:16" pos:end="175:16">=</operator> <literal type="number" pos:start="175:18" pos:end="175:21">0x40</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:22"><expr pos:start="177:9" pos:end="177:21"><name pos:start="177:9" pos:end="177:14"><name pos:start="177:9" pos:end="177:9">c</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:14">ebx</name></name> <operator pos:start="177:16" pos:end="177:16">=</operator> <literal type="number" pos:start="177:18" pos:end="177:21">0x40</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:43"><expr pos:start="181:9" pos:end="181:42"><name pos:start="181:9" pos:end="181:9">c</name> <operator pos:start="181:11" pos:end="181:11">=</operator> <operator pos:start="181:13" pos:end="181:13">&amp;</operator><name pos:start="181:14" pos:end="181:42"><name pos:start="181:14" pos:end="181:23">cpuid_data</name><operator pos:start="181:24" pos:end="181:24">.</operator><name pos:start="181:25" pos:end="181:31">entries</name><index pos:start="181:32" pos:end="181:42">[<expr pos:start="181:33" pos:end="181:41"><name pos:start="181:33" pos:end="181:39">cpuid_i</name><operator pos:start="181:40" pos:end="181:41">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:33"><expr pos:start="183:9" pos:end="183:32"><call pos:start="183:9" pos:end="183:32"><name pos:start="183:9" pos:end="183:14">memset</name><argument_list pos:start="183:15" pos:end="183:32">(<argument pos:start="183:16" pos:end="183:16"><expr pos:start="183:16" pos:end="183:16"><name pos:start="183:16" pos:end="183:16">c</name></expr></argument>, <argument pos:start="183:19" pos:end="183:19"><expr pos:start="183:19" pos:end="183:19"><literal type="number" pos:start="183:19" pos:end="183:19">0</literal></expr></argument>, <argument pos:start="183:22" pos:end="183:31"><expr pos:start="183:22" pos:end="183:31"><sizeof pos:start="183:22" pos:end="183:31">sizeof<argument_list pos:start="183:28" pos:end="183:31">(<argument pos:start="183:29" pos:end="183:30"><expr pos:start="183:29" pos:end="183:30"><operator pos:start="183:29" pos:end="183:29">*</operator><name pos:start="183:30" pos:end="183:30">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:47"><expr pos:start="185:9" pos:end="185:46"><name pos:start="185:9" pos:end="185:19"><name pos:start="185:9" pos:end="185:9">c</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:19">function</name></name> <operator pos:start="185:21" pos:end="185:21">=</operator> <name pos:start="185:23" pos:end="185:46">KVM_CPUID_SIGNATURE_NEXT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:49"><expr pos:start="187:9" pos:end="187:48"><call pos:start="187:9" pos:end="187:48"><name pos:start="187:9" pos:end="187:14">memcpy</name><argument_list pos:start="187:15" pos:end="187:48">(<argument pos:start="187:16" pos:end="187:24"><expr pos:start="187:16" pos:end="187:24"><name pos:start="187:16" pos:end="187:24">signature</name></expr></argument>, <argument pos:start="187:27" pos:end="187:43"><expr pos:start="187:27" pos:end="187:43"><literal type="string" pos:start="187:27" pos:end="187:43">"KVMKVMKVM\0\0\0"</literal></expr></argument>, <argument pos:start="187:46" pos:end="187:47"><expr pos:start="187:46" pos:end="187:47"><literal type="number" pos:start="187:46" pos:end="187:47">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:19"><expr pos:start="189:9" pos:end="189:18"><name pos:start="189:9" pos:end="189:14"><name pos:start="189:9" pos:end="189:9">c</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:14">eax</name></name> <operator pos:start="189:16" pos:end="189:16">=</operator> <literal type="number" pos:start="189:18" pos:end="189:18">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:30"><expr pos:start="191:9" pos:end="191:29"><name pos:start="191:9" pos:end="191:14"><name pos:start="191:9" pos:end="191:9">c</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:14">ebx</name></name> <operator pos:start="191:16" pos:end="191:16">=</operator> <name pos:start="191:18" pos:end="191:29"><name pos:start="191:18" pos:end="191:26">signature</name><index pos:start="191:27" pos:end="191:29">[<expr pos:start="191:28" pos:end="191:28"><literal type="number" pos:start="191:28" pos:end="191:28">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:30"><expr pos:start="193:9" pos:end="193:29"><name pos:start="193:9" pos:end="193:14"><name pos:start="193:9" pos:end="193:9">c</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:14">ecx</name></name> <operator pos:start="193:16" pos:end="193:16">=</operator> <name pos:start="193:18" pos:end="193:29"><name pos:start="193:18" pos:end="193:26">signature</name><index pos:start="193:27" pos:end="193:29">[<expr pos:start="193:28" pos:end="193:28"><literal type="number" pos:start="193:28" pos:end="193:28">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:30"><expr pos:start="195:9" pos:end="195:29"><name pos:start="195:9" pos:end="195:14"><name pos:start="195:9" pos:end="195:9">c</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:14">edx</name></name> <operator pos:start="195:16" pos:end="195:16">=</operator> <name pos:start="195:18" pos:end="195:29"><name pos:start="195:18" pos:end="195:26">signature</name><index pos:start="195:27" pos:end="195:29">[<expr pos:start="195:28" pos:end="195:28"><literal type="number" pos:start="195:28" pos:end="195:28">2</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="201:5" pos:end="201:63"><expr pos:start="201:5" pos:end="201:62"><name pos:start="201:5" pos:end="201:23">has_msr_async_pf_en</name> <operator pos:start="201:25" pos:end="201:25">=</operator> <name pos:start="201:27" pos:end="201:32"><name pos:start="201:27" pos:end="201:27">c</name><operator pos:start="201:28" pos:end="201:29">-&gt;</operator><name pos:start="201:30" pos:end="201:32">eax</name></name> <operator pos:start="201:34" pos:end="201:34">&amp;</operator> <operator pos:start="201:36" pos:end="201:36">(</operator><literal type="number" pos:start="201:37" pos:end="201:37">1</literal> <operator pos:start="201:39" pos:end="201:40">&lt;&lt;</operator> <name pos:start="201:42" pos:end="201:61">KVM_FEATURE_ASYNC_PF</name><operator pos:start="201:62" pos:end="201:62">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:59"><expr pos:start="205:5" pos:end="205:58"><name pos:start="205:5" pos:end="205:21">has_msr_pv_eoi_en</name> <operator pos:start="205:23" pos:end="205:23">=</operator> <name pos:start="205:25" pos:end="205:30"><name pos:start="205:25" pos:end="205:25">c</name><operator pos:start="205:26" pos:end="205:27">-&gt;</operator><name pos:start="205:28" pos:end="205:30">eax</name></name> <operator pos:start="205:32" pos:end="205:32">&amp;</operator> <operator pos:start="205:34" pos:end="205:34">(</operator><literal type="number" pos:start="205:35" pos:end="205:35">1</literal> <operator pos:start="205:37" pos:end="205:38">&lt;&lt;</operator> <name pos:start="205:40" pos:end="205:57">KVM_FEATURE_PV_EOI</name><operator pos:start="205:58" pos:end="205:58">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:64"><expr pos:start="209:5" pos:end="209:63"><call pos:start="209:5" pos:end="209:63"><name pos:start="209:5" pos:end="209:17">cpu_x86_cpuid</name><argument_list pos:start="209:18" pos:end="209:63">(<argument pos:start="209:19" pos:end="209:21"><expr pos:start="209:19" pos:end="209:21"><name pos:start="209:19" pos:end="209:21">env</name></expr></argument>, <argument pos:start="209:24" pos:end="209:24"><expr pos:start="209:24" pos:end="209:24"><literal type="number" pos:start="209:24" pos:end="209:24">0</literal></expr></argument>, <argument pos:start="209:27" pos:end="209:27"><expr pos:start="209:27" pos:end="209:27"><literal type="number" pos:start="209:27" pos:end="209:27">0</literal></expr></argument>, <argument pos:start="209:30" pos:end="209:35"><expr pos:start="209:30" pos:end="209:35"><operator pos:start="209:30" pos:end="209:30">&amp;</operator><name pos:start="209:31" pos:end="209:35">limit</name></expr></argument>, <argument pos:start="209:38" pos:end="209:44"><expr pos:start="209:38" pos:end="209:44"><operator pos:start="209:38" pos:end="209:38">&amp;</operator><name pos:start="209:39" pos:end="209:44">unused</name></expr></argument>, <argument pos:start="209:47" pos:end="209:53"><expr pos:start="209:47" pos:end="209:53"><operator pos:start="209:47" pos:end="209:47">&amp;</operator><name pos:start="209:48" pos:end="209:53">unused</name></expr></argument>, <argument pos:start="209:56" pos:end="209:62"><expr pos:start="209:56" pos:end="209:62"><operator pos:start="209:56" pos:end="209:56">&amp;</operator><name pos:start="209:57" pos:end="209:62">unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="213:5" pos:end="317:5">for <control pos:start="213:9" pos:end="213:32">(<init pos:start="213:10" pos:end="213:15"><expr pos:start="213:10" pos:end="213:14"><name pos:start="213:10" pos:end="213:10">i</name> <operator pos:start="213:12" pos:end="213:12">=</operator> <literal type="number" pos:start="213:14" pos:end="213:14">0</literal></expr>;</init> <condition pos:start="213:17" pos:end="213:27"><expr pos:start="213:17" pos:end="213:26"><name pos:start="213:17" pos:end="213:17">i</name> <operator pos:start="213:19" pos:end="213:20">&lt;=</operator> <name pos:start="213:22" pos:end="213:26">limit</name></expr>;</condition> <incr pos:start="213:29" pos:end="213:31"><expr pos:start="213:29" pos:end="213:31"><name pos:start="213:29" pos:end="213:29">i</name><operator pos:start="213:30" pos:end="213:31">++</operator></expr></incr>)</control> <block pos:start="213:34" pos:end="317:5">{<block_content pos:start="215:9" pos:end="315:9">

        <expr_stmt pos:start="215:9" pos:end="215:43"><expr pos:start="215:9" pos:end="215:42"><name pos:start="215:9" pos:end="215:9">c</name> <operator pos:start="215:11" pos:end="215:11">=</operator> <operator pos:start="215:13" pos:end="215:13">&amp;</operator><name pos:start="215:14" pos:end="215:42"><name pos:start="215:14" pos:end="215:23">cpuid_data</name><operator pos:start="215:24" pos:end="215:24">.</operator><name pos:start="215:25" pos:end="215:31">entries</name><index pos:start="215:32" pos:end="215:42">[<expr pos:start="215:33" pos:end="215:41"><name pos:start="215:33" pos:end="215:39">cpuid_i</name><operator pos:start="215:40" pos:end="215:41">++</operator></expr>]</index></name></expr>;</expr_stmt>



        <switch pos:start="219:9" pos:end="315:9">switch <condition pos:start="219:16" pos:end="219:18">(<expr pos:start="219:17" pos:end="219:17"><name pos:start="219:17" pos:end="219:17">i</name></expr>)</condition> <block pos:start="219:20" pos:end="315:9">{<block_content pos:start="221:9" pos:end="313:18">

        <case pos:start="221:9" pos:end="221:15">case <expr pos:start="221:14" pos:end="221:14"><literal type="number" pos:start="221:14" pos:end="221:14">2</literal></expr>:</case> <block pos:start="221:17" pos:end="255:9">{<block_content pos:start="225:13" pos:end="253:18">

            <comment type="block" pos:start="223:13" pos:end="223:72">/* Keep reading function 2 till all the input is received */</comment>

            <decl_stmt pos:start="225:13" pos:end="225:22"><decl pos:start="225:13" pos:end="225:21"><type pos:start="225:13" pos:end="225:15"><name pos:start="225:13" pos:end="225:15">int</name></type> <name pos:start="225:17" pos:end="225:21">times</name></decl>;</decl_stmt>



            <expr_stmt pos:start="229:13" pos:end="229:28"><expr pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:23"><name pos:start="229:13" pos:end="229:13">c</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:23">function</name></name> <operator pos:start="229:25" pos:end="229:25">=</operator> <name pos:start="229:27" pos:end="229:27">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="233:54"><expr pos:start="231:13" pos:end="233:53"><name pos:start="231:13" pos:end="231:20"><name pos:start="231:13" pos:end="231:13">c</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:20">flags</name></name> <operator pos:start="231:22" pos:end="231:22">=</operator> <name pos:start="231:24" pos:end="231:51">KVM_CPUID_FLAG_STATEFUL_FUNC</name> <operator pos:start="231:53" pos:end="231:53">|</operator>

                       <name pos:start="233:24" pos:end="233:53">KVM_CPUID_FLAG_STATE_READ_NEXT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:73"><expr pos:start="235:13" pos:end="235:72"><call pos:start="235:13" pos:end="235:72"><name pos:start="235:13" pos:end="235:25">cpu_x86_cpuid</name><argument_list pos:start="235:26" pos:end="235:72">(<argument pos:start="235:27" pos:end="235:29"><expr pos:start="235:27" pos:end="235:29"><name pos:start="235:27" pos:end="235:29">env</name></expr></argument>, <argument pos:start="235:32" pos:end="235:32"><expr pos:start="235:32" pos:end="235:32"><name pos:start="235:32" pos:end="235:32">i</name></expr></argument>, <argument pos:start="235:35" pos:end="235:35"><expr pos:start="235:35" pos:end="235:35"><literal type="number" pos:start="235:35" pos:end="235:35">0</literal></expr></argument>, <argument pos:start="235:38" pos:end="235:44"><expr pos:start="235:38" pos:end="235:44"><operator pos:start="235:38" pos:end="235:38">&amp;</operator><name pos:start="235:39" pos:end="235:44"><name pos:start="235:39" pos:end="235:39">c</name><operator pos:start="235:40" pos:end="235:41">-&gt;</operator><name pos:start="235:42" pos:end="235:44">eax</name></name></expr></argument>, <argument pos:start="235:47" pos:end="235:53"><expr pos:start="235:47" pos:end="235:53"><operator pos:start="235:47" pos:end="235:47">&amp;</operator><name pos:start="235:48" pos:end="235:53"><name pos:start="235:48" pos:end="235:48">c</name><operator pos:start="235:49" pos:end="235:50">-&gt;</operator><name pos:start="235:51" pos:end="235:53">ebx</name></name></expr></argument>, <argument pos:start="235:56" pos:end="235:62"><expr pos:start="235:56" pos:end="235:62"><operator pos:start="235:56" pos:end="235:56">&amp;</operator><name pos:start="235:57" pos:end="235:62"><name pos:start="235:57" pos:end="235:57">c</name><operator pos:start="235:58" pos:end="235:59">-&gt;</operator><name pos:start="235:60" pos:end="235:62">ecx</name></name></expr></argument>, <argument pos:start="235:65" pos:end="235:71"><expr pos:start="235:65" pos:end="235:71"><operator pos:start="235:65" pos:end="235:65">&amp;</operator><name pos:start="235:66" pos:end="235:71"><name pos:start="235:66" pos:end="235:66">c</name><operator pos:start="235:67" pos:end="235:68">-&gt;</operator><name pos:start="235:69" pos:end="235:71">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:34"><expr pos:start="237:13" pos:end="237:33"><name pos:start="237:13" pos:end="237:17">times</name> <operator pos:start="237:19" pos:end="237:19">=</operator> <name pos:start="237:21" pos:end="237:26"><name pos:start="237:21" pos:end="237:21">c</name><operator pos:start="237:22" pos:end="237:23">-&gt;</operator><name pos:start="237:24" pos:end="237:26">eax</name></name> <operator pos:start="237:28" pos:end="237:28">&amp;</operator> <literal type="number" pos:start="237:30" pos:end="237:33">0xff</literal></expr>;</expr_stmt>



            <for pos:start="241:13" pos:end="251:13">for <control pos:start="241:17" pos:end="241:39">(<init pos:start="241:18" pos:end="241:23"><expr pos:start="241:18" pos:end="241:22"><name pos:start="241:18" pos:end="241:18">j</name> <operator pos:start="241:20" pos:end="241:20">=</operator> <literal type="number" pos:start="241:22" pos:end="241:22">1</literal></expr>;</init> <condition pos:start="241:25" pos:end="241:34"><expr pos:start="241:25" pos:end="241:33"><name pos:start="241:25" pos:end="241:25">j</name> <operator pos:start="241:27" pos:end="241:27">&lt;</operator> <name pos:start="241:29" pos:end="241:33">times</name></expr>;</condition> <incr pos:start="241:36" pos:end="241:38"><expr pos:start="241:36" pos:end="241:38"><operator pos:start="241:36" pos:end="241:37">++</operator><name pos:start="241:38" pos:end="241:38">j</name></expr></incr>)</control> <block pos:start="241:41" pos:end="251:13">{<block_content pos:start="243:17" pos:end="249:77">

                <expr_stmt pos:start="243:17" pos:end="243:51"><expr pos:start="243:17" pos:end="243:50"><name pos:start="243:17" pos:end="243:17">c</name> <operator pos:start="243:19" pos:end="243:19">=</operator> <operator pos:start="243:21" pos:end="243:21">&amp;</operator><name pos:start="243:22" pos:end="243:50"><name pos:start="243:22" pos:end="243:31">cpuid_data</name><operator pos:start="243:32" pos:end="243:32">.</operator><name pos:start="243:33" pos:end="243:39">entries</name><index pos:start="243:40" pos:end="243:50">[<expr pos:start="243:41" pos:end="243:49"><name pos:start="243:41" pos:end="243:47">cpuid_i</name><operator pos:start="243:48" pos:end="243:49">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:32"><expr pos:start="245:17" pos:end="245:31"><name pos:start="245:17" pos:end="245:27"><name pos:start="245:17" pos:end="245:17">c</name><operator pos:start="245:18" pos:end="245:19">-&gt;</operator><name pos:start="245:20" pos:end="245:27">function</name></name> <operator pos:start="245:29" pos:end="245:29">=</operator> <name pos:start="245:31" pos:end="245:31">i</name></expr>;</expr_stmt>

                <expr_stmt pos:start="247:17" pos:end="247:56"><expr pos:start="247:17" pos:end="247:55"><name pos:start="247:17" pos:end="247:24"><name pos:start="247:17" pos:end="247:17">c</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:24">flags</name></name> <operator pos:start="247:26" pos:end="247:26">=</operator> <name pos:start="247:28" pos:end="247:55">KVM_CPUID_FLAG_STATEFUL_FUNC</name></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:77"><expr pos:start="249:17" pos:end="249:76"><call pos:start="249:17" pos:end="249:76"><name pos:start="249:17" pos:end="249:29">cpu_x86_cpuid</name><argument_list pos:start="249:30" pos:end="249:76">(<argument pos:start="249:31" pos:end="249:33"><expr pos:start="249:31" pos:end="249:33"><name pos:start="249:31" pos:end="249:33">env</name></expr></argument>, <argument pos:start="249:36" pos:end="249:36"><expr pos:start="249:36" pos:end="249:36"><name pos:start="249:36" pos:end="249:36">i</name></expr></argument>, <argument pos:start="249:39" pos:end="249:39"><expr pos:start="249:39" pos:end="249:39"><literal type="number" pos:start="249:39" pos:end="249:39">0</literal></expr></argument>, <argument pos:start="249:42" pos:end="249:48"><expr pos:start="249:42" pos:end="249:48"><operator pos:start="249:42" pos:end="249:42">&amp;</operator><name pos:start="249:43" pos:end="249:48"><name pos:start="249:43" pos:end="249:43">c</name><operator pos:start="249:44" pos:end="249:45">-&gt;</operator><name pos:start="249:46" pos:end="249:48">eax</name></name></expr></argument>, <argument pos:start="249:51" pos:end="249:57"><expr pos:start="249:51" pos:end="249:57"><operator pos:start="249:51" pos:end="249:51">&amp;</operator><name pos:start="249:52" pos:end="249:57"><name pos:start="249:52" pos:end="249:52">c</name><operator pos:start="249:53" pos:end="249:54">-&gt;</operator><name pos:start="249:55" pos:end="249:57">ebx</name></name></expr></argument>, <argument pos:start="249:60" pos:end="249:66"><expr pos:start="249:60" pos:end="249:66"><operator pos:start="249:60" pos:end="249:60">&amp;</operator><name pos:start="249:61" pos:end="249:66"><name pos:start="249:61" pos:end="249:61">c</name><operator pos:start="249:62" pos:end="249:63">-&gt;</operator><name pos:start="249:64" pos:end="249:66">ecx</name></name></expr></argument>, <argument pos:start="249:69" pos:end="249:75"><expr pos:start="249:69" pos:end="249:75"><operator pos:start="249:69" pos:end="249:69">&amp;</operator><name pos:start="249:70" pos:end="249:75"><name pos:start="249:70" pos:end="249:70">c</name><operator pos:start="249:71" pos:end="249:72">-&gt;</operator><name pos:start="249:73" pos:end="249:75">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="253:13" pos:end="253:18">break;</break>

        </block_content>}</block>

        <case pos:start="257:9" pos:end="257:15">case <expr pos:start="257:14" pos:end="257:14"><literal type="number" pos:start="257:14" pos:end="257:14">4</literal></expr>:</case>

        <case pos:start="259:9" pos:end="259:17">case <expr pos:start="259:14" pos:end="259:16"><literal type="number" pos:start="259:14" pos:end="259:16">0xb</literal></expr>:</case>

        <case pos:start="261:9" pos:end="261:17">case <expr pos:start="261:14" pos:end="261:16"><literal type="number" pos:start="261:14" pos:end="261:16">0xd</literal></expr>:</case>

            <for pos:start="263:13" pos:end="301:13">for <control pos:start="263:17" pos:end="263:30">(<init pos:start="263:18" pos:end="263:23"><expr pos:start="263:18" pos:end="263:22"><name pos:start="263:18" pos:end="263:18">j</name> <operator pos:start="263:20" pos:end="263:20">=</operator> <literal type="number" pos:start="263:22" pos:end="263:22">0</literal></expr>;</init> <condition pos:start="263:25" pos:end="263:25">;</condition> <incr pos:start="263:27" pos:end="263:29"><expr pos:start="263:27" pos:end="263:29"><name pos:start="263:27" pos:end="263:27">j</name><operator pos:start="263:28" pos:end="263:29">++</operator></expr></incr>)</control> <block pos:start="263:32" pos:end="301:13">{<block_content pos:start="265:17" pos:end="299:51">

                <if_stmt pos:start="265:17" pos:end="269:17"><if pos:start="265:17" pos:end="269:17">if <condition pos:start="265:20" pos:end="265:40">(<expr pos:start="265:21" pos:end="265:39"><name pos:start="265:21" pos:end="265:21">i</name> <operator pos:start="265:23" pos:end="265:24">==</operator> <literal type="number" pos:start="265:26" pos:end="265:28">0xd</literal> <operator pos:start="265:30" pos:end="265:31">&amp;&amp;</operator> <name pos:start="265:33" pos:end="265:33">j</name> <operator pos:start="265:35" pos:end="265:36">==</operator> <literal type="number" pos:start="265:38" pos:end="265:39">64</literal></expr>)</condition> <block pos:start="265:42" pos:end="269:17">{<block_content pos:start="267:21" pos:end="267:26">

                    <break pos:start="267:21" pos:end="267:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="271:17" pos:end="271:32"><expr pos:start="271:17" pos:end="271:31"><name pos:start="271:17" pos:end="271:27"><name pos:start="271:17" pos:end="271:17">c</name><operator pos:start="271:18" pos:end="271:19">-&gt;</operator><name pos:start="271:20" pos:end="271:27">function</name></name> <operator pos:start="271:29" pos:end="271:29">=</operator> <name pos:start="271:31" pos:end="271:31">i</name></expr>;</expr_stmt>

                <expr_stmt pos:start="273:17" pos:end="273:59"><expr pos:start="273:17" pos:end="273:58"><name pos:start="273:17" pos:end="273:24"><name pos:start="273:17" pos:end="273:17">c</name><operator pos:start="273:18" pos:end="273:19">-&gt;</operator><name pos:start="273:20" pos:end="273:24">flags</name></name> <operator pos:start="273:26" pos:end="273:26">=</operator> <name pos:start="273:28" pos:end="273:58">KVM_CPUID_FLAG_SIGNIFCANT_INDEX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="275:17" pos:end="275:29"><expr pos:start="275:17" pos:end="275:28"><name pos:start="275:17" pos:end="275:24"><name pos:start="275:17" pos:end="275:17">c</name><operator pos:start="275:18" pos:end="275:19">-&gt;</operator><name pos:start="275:20" pos:end="275:24">index</name></name> <operator pos:start="275:26" pos:end="275:26">=</operator> <name pos:start="275:28" pos:end="275:28">j</name></expr>;</expr_stmt>

                <expr_stmt pos:start="277:17" pos:end="277:77"><expr pos:start="277:17" pos:end="277:76"><call pos:start="277:17" pos:end="277:76"><name pos:start="277:17" pos:end="277:29">cpu_x86_cpuid</name><argument_list pos:start="277:30" pos:end="277:76">(<argument pos:start="277:31" pos:end="277:33"><expr pos:start="277:31" pos:end="277:33"><name pos:start="277:31" pos:end="277:33">env</name></expr></argument>, <argument pos:start="277:36" pos:end="277:36"><expr pos:start="277:36" pos:end="277:36"><name pos:start="277:36" pos:end="277:36">i</name></expr></argument>, <argument pos:start="277:39" pos:end="277:39"><expr pos:start="277:39" pos:end="277:39"><name pos:start="277:39" pos:end="277:39">j</name></expr></argument>, <argument pos:start="277:42" pos:end="277:48"><expr pos:start="277:42" pos:end="277:48"><operator pos:start="277:42" pos:end="277:42">&amp;</operator><name pos:start="277:43" pos:end="277:48"><name pos:start="277:43" pos:end="277:43">c</name><operator pos:start="277:44" pos:end="277:45">-&gt;</operator><name pos:start="277:46" pos:end="277:48">eax</name></name></expr></argument>, <argument pos:start="277:51" pos:end="277:57"><expr pos:start="277:51" pos:end="277:57"><operator pos:start="277:51" pos:end="277:51">&amp;</operator><name pos:start="277:52" pos:end="277:57"><name pos:start="277:52" pos:end="277:52">c</name><operator pos:start="277:53" pos:end="277:54">-&gt;</operator><name pos:start="277:55" pos:end="277:57">ebx</name></name></expr></argument>, <argument pos:start="277:60" pos:end="277:66"><expr pos:start="277:60" pos:end="277:66"><operator pos:start="277:60" pos:end="277:60">&amp;</operator><name pos:start="277:61" pos:end="277:66"><name pos:start="277:61" pos:end="277:61">c</name><operator pos:start="277:62" pos:end="277:63">-&gt;</operator><name pos:start="277:64" pos:end="277:66">ecx</name></name></expr></argument>, <argument pos:start="277:69" pos:end="277:75"><expr pos:start="277:69" pos:end="277:75"><operator pos:start="277:69" pos:end="277:69">&amp;</operator><name pos:start="277:70" pos:end="277:75"><name pos:start="277:70" pos:end="277:70">c</name><operator pos:start="277:71" pos:end="277:72">-&gt;</operator><name pos:start="277:73" pos:end="277:75">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="281:17" pos:end="285:17"><if pos:start="281:17" pos:end="285:17">if <condition pos:start="281:20" pos:end="281:42">(<expr pos:start="281:21" pos:end="281:41"><name pos:start="281:21" pos:end="281:21">i</name> <operator pos:start="281:23" pos:end="281:24">==</operator> <literal type="number" pos:start="281:26" pos:end="281:26">4</literal> <operator pos:start="281:28" pos:end="281:29">&amp;&amp;</operator> <name pos:start="281:31" pos:end="281:36"><name pos:start="281:31" pos:end="281:31">c</name><operator pos:start="281:32" pos:end="281:33">-&gt;</operator><name pos:start="281:34" pos:end="281:36">eax</name></name> <operator pos:start="281:38" pos:end="281:39">==</operator> <literal type="number" pos:start="281:41" pos:end="281:41">0</literal></expr>)</condition> <block pos:start="281:44" pos:end="285:17">{<block_content pos:start="283:21" pos:end="283:26">

                    <break pos:start="283:21" pos:end="283:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="287:17" pos:end="291:17"><if pos:start="287:17" pos:end="291:17">if <condition pos:start="287:20" pos:end="287:51">(<expr pos:start="287:21" pos:end="287:50"><name pos:start="287:21" pos:end="287:21">i</name> <operator pos:start="287:23" pos:end="287:24">==</operator> <literal type="number" pos:start="287:26" pos:end="287:28">0xb</literal> <operator pos:start="287:30" pos:end="287:31">&amp;&amp;</operator> <operator pos:start="287:33" pos:end="287:33">!</operator><operator pos:start="287:34" pos:end="287:34">(</operator><name pos:start="287:35" pos:end="287:40"><name pos:start="287:35" pos:end="287:35">c</name><operator pos:start="287:36" pos:end="287:37">-&gt;</operator><name pos:start="287:38" pos:end="287:40">ecx</name></name> <operator pos:start="287:42" pos:end="287:42">&amp;</operator> <literal type="number" pos:start="287:44" pos:end="287:49">0xff00</literal><operator pos:start="287:50" pos:end="287:50">)</operator></expr>)</condition> <block pos:start="287:53" pos:end="291:17">{<block_content pos:start="289:21" pos:end="289:26">

                    <break pos:start="289:21" pos:end="289:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="293:17" pos:end="297:17"><if pos:start="293:17" pos:end="297:17">if <condition pos:start="293:20" pos:end="293:44">(<expr pos:start="293:21" pos:end="293:43"><name pos:start="293:21" pos:end="293:21">i</name> <operator pos:start="293:23" pos:end="293:24">==</operator> <literal type="number" pos:start="293:26" pos:end="293:28">0xd</literal> <operator pos:start="293:30" pos:end="293:31">&amp;&amp;</operator> <name pos:start="293:33" pos:end="293:38"><name pos:start="293:33" pos:end="293:33">c</name><operator pos:start="293:34" pos:end="293:35">-&gt;</operator><name pos:start="293:36" pos:end="293:38">eax</name></name> <operator pos:start="293:40" pos:end="293:41">==</operator> <literal type="number" pos:start="293:43" pos:end="293:43">0</literal></expr>)</condition> <block pos:start="293:46" pos:end="297:17">{<block_content pos:start="295:21" pos:end="295:29">

                    <continue pos:start="295:21" pos:end="295:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="299:17" pos:end="299:51"><expr pos:start="299:17" pos:end="299:50"><name pos:start="299:17" pos:end="299:17">c</name> <operator pos:start="299:19" pos:end="299:19">=</operator> <operator pos:start="299:21" pos:end="299:21">&amp;</operator><name pos:start="299:22" pos:end="299:50"><name pos:start="299:22" pos:end="299:31">cpuid_data</name><operator pos:start="299:32" pos:end="299:32">.</operator><name pos:start="299:33" pos:end="299:39">entries</name><index pos:start="299:40" pos:end="299:50">[<expr pos:start="299:41" pos:end="299:49"><name pos:start="299:41" pos:end="299:47">cpuid_i</name><operator pos:start="299:48" pos:end="299:49">++</operator></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="303:13" pos:end="303:18">break;</break>

        <default pos:start="305:9" pos:end="305:16">default:</default>

            <expr_stmt pos:start="307:13" pos:end="307:28"><expr pos:start="307:13" pos:end="307:27"><name pos:start="307:13" pos:end="307:23"><name pos:start="307:13" pos:end="307:13">c</name><operator pos:start="307:14" pos:end="307:15">-&gt;</operator><name pos:start="307:16" pos:end="307:23">function</name></name> <operator pos:start="307:25" pos:end="307:25">=</operator> <name pos:start="307:27" pos:end="307:27">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:25"><expr pos:start="309:13" pos:end="309:24"><name pos:start="309:13" pos:end="309:20"><name pos:start="309:13" pos:end="309:13">c</name><operator pos:start="309:14" pos:end="309:15">-&gt;</operator><name pos:start="309:16" pos:end="309:20">flags</name></name> <operator pos:start="309:22" pos:end="309:22">=</operator> <literal type="number" pos:start="309:24" pos:end="309:24">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:73"><expr pos:start="311:13" pos:end="311:72"><call pos:start="311:13" pos:end="311:72"><name pos:start="311:13" pos:end="311:25">cpu_x86_cpuid</name><argument_list pos:start="311:26" pos:end="311:72">(<argument pos:start="311:27" pos:end="311:29"><expr pos:start="311:27" pos:end="311:29"><name pos:start="311:27" pos:end="311:29">env</name></expr></argument>, <argument pos:start="311:32" pos:end="311:32"><expr pos:start="311:32" pos:end="311:32"><name pos:start="311:32" pos:end="311:32">i</name></expr></argument>, <argument pos:start="311:35" pos:end="311:35"><expr pos:start="311:35" pos:end="311:35"><literal type="number" pos:start="311:35" pos:end="311:35">0</literal></expr></argument>, <argument pos:start="311:38" pos:end="311:44"><expr pos:start="311:38" pos:end="311:44"><operator pos:start="311:38" pos:end="311:38">&amp;</operator><name pos:start="311:39" pos:end="311:44"><name pos:start="311:39" pos:end="311:39">c</name><operator pos:start="311:40" pos:end="311:41">-&gt;</operator><name pos:start="311:42" pos:end="311:44">eax</name></name></expr></argument>, <argument pos:start="311:47" pos:end="311:53"><expr pos:start="311:47" pos:end="311:53"><operator pos:start="311:47" pos:end="311:47">&amp;</operator><name pos:start="311:48" pos:end="311:53"><name pos:start="311:48" pos:end="311:48">c</name><operator pos:start="311:49" pos:end="311:50">-&gt;</operator><name pos:start="311:51" pos:end="311:53">ebx</name></name></expr></argument>, <argument pos:start="311:56" pos:end="311:62"><expr pos:start="311:56" pos:end="311:62"><operator pos:start="311:56" pos:end="311:56">&amp;</operator><name pos:start="311:57" pos:end="311:62"><name pos:start="311:57" pos:end="311:57">c</name><operator pos:start="311:58" pos:end="311:59">-&gt;</operator><name pos:start="311:60" pos:end="311:62">ecx</name></name></expr></argument>, <argument pos:start="311:65" pos:end="311:71"><expr pos:start="311:65" pos:end="311:71"><operator pos:start="311:65" pos:end="311:65">&amp;</operator><name pos:start="311:66" pos:end="311:71"><name pos:start="311:66" pos:end="311:66">c</name><operator pos:start="311:67" pos:end="311:68">-&gt;</operator><name pos:start="311:69" pos:end="311:71">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="313:13" pos:end="313:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <expr_stmt pos:start="319:5" pos:end="319:73"><expr pos:start="319:5" pos:end="319:72"><call pos:start="319:5" pos:end="319:72"><name pos:start="319:5" pos:end="319:17">cpu_x86_cpuid</name><argument_list pos:start="319:18" pos:end="319:72">(<argument pos:start="319:19" pos:end="319:21"><expr pos:start="319:19" pos:end="319:21"><name pos:start="319:19" pos:end="319:21">env</name></expr></argument>, <argument pos:start="319:24" pos:end="319:33"><expr pos:start="319:24" pos:end="319:33"><literal type="number" pos:start="319:24" pos:end="319:33">0x80000000</literal></expr></argument>, <argument pos:start="319:36" pos:end="319:36"><expr pos:start="319:36" pos:end="319:36"><literal type="number" pos:start="319:36" pos:end="319:36">0</literal></expr></argument>, <argument pos:start="319:39" pos:end="319:44"><expr pos:start="319:39" pos:end="319:44"><operator pos:start="319:39" pos:end="319:39">&amp;</operator><name pos:start="319:40" pos:end="319:44">limit</name></expr></argument>, <argument pos:start="319:47" pos:end="319:53"><expr pos:start="319:47" pos:end="319:53"><operator pos:start="319:47" pos:end="319:47">&amp;</operator><name pos:start="319:48" pos:end="319:53">unused</name></expr></argument>, <argument pos:start="319:56" pos:end="319:62"><expr pos:start="319:56" pos:end="319:62"><operator pos:start="319:56" pos:end="319:56">&amp;</operator><name pos:start="319:57" pos:end="319:62">unused</name></expr></argument>, <argument pos:start="319:65" pos:end="319:71"><expr pos:start="319:65" pos:end="319:71"><operator pos:start="319:65" pos:end="319:65">&amp;</operator><name pos:start="319:66" pos:end="319:71">unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="323:5" pos:end="335:5">for <control pos:start="323:9" pos:end="323:41">(<init pos:start="323:10" pos:end="323:24"><expr pos:start="323:10" pos:end="323:23"><name pos:start="323:10" pos:end="323:10">i</name> <operator pos:start="323:12" pos:end="323:12">=</operator> <literal type="number" pos:start="323:14" pos:end="323:23">0x80000000</literal></expr>;</init> <condition pos:start="323:26" pos:end="323:36"><expr pos:start="323:26" pos:end="323:35"><name pos:start="323:26" pos:end="323:26">i</name> <operator pos:start="323:28" pos:end="323:29">&lt;=</operator> <name pos:start="323:31" pos:end="323:35">limit</name></expr>;</condition> <incr pos:start="323:38" pos:end="323:40"><expr pos:start="323:38" pos:end="323:40"><name pos:start="323:38" pos:end="323:38">i</name><operator pos:start="323:39" pos:end="323:40">++</operator></expr></incr>)</control> <block pos:start="323:43" pos:end="335:5">{<block_content pos:start="325:9" pos:end="333:69">

        <expr_stmt pos:start="325:9" pos:end="325:43"><expr pos:start="325:9" pos:end="325:42"><name pos:start="325:9" pos:end="325:9">c</name> <operator pos:start="325:11" pos:end="325:11">=</operator> <operator pos:start="325:13" pos:end="325:13">&amp;</operator><name pos:start="325:14" pos:end="325:42"><name pos:start="325:14" pos:end="325:23">cpuid_data</name><operator pos:start="325:24" pos:end="325:24">.</operator><name pos:start="325:25" pos:end="325:31">entries</name><index pos:start="325:32" pos:end="325:42">[<expr pos:start="325:33" pos:end="325:41"><name pos:start="325:33" pos:end="325:39">cpuid_i</name><operator pos:start="325:40" pos:end="325:41">++</operator></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="329:9" pos:end="329:24"><expr pos:start="329:9" pos:end="329:23"><name pos:start="329:9" pos:end="329:19"><name pos:start="329:9" pos:end="329:9">c</name><operator pos:start="329:10" pos:end="329:11">-&gt;</operator><name pos:start="329:12" pos:end="329:19">function</name></name> <operator pos:start="329:21" pos:end="329:21">=</operator> <name pos:start="329:23" pos:end="329:23">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:21"><expr pos:start="331:9" pos:end="331:20"><name pos:start="331:9" pos:end="331:16"><name pos:start="331:9" pos:end="331:9">c</name><operator pos:start="331:10" pos:end="331:11">-&gt;</operator><name pos:start="331:12" pos:end="331:16">flags</name></name> <operator pos:start="331:18" pos:end="331:18">=</operator> <literal type="number" pos:start="331:20" pos:end="331:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:69"><expr pos:start="333:9" pos:end="333:68"><call pos:start="333:9" pos:end="333:68"><name pos:start="333:9" pos:end="333:21">cpu_x86_cpuid</name><argument_list pos:start="333:22" pos:end="333:68">(<argument pos:start="333:23" pos:end="333:25"><expr pos:start="333:23" pos:end="333:25"><name pos:start="333:23" pos:end="333:25">env</name></expr></argument>, <argument pos:start="333:28" pos:end="333:28"><expr pos:start="333:28" pos:end="333:28"><name pos:start="333:28" pos:end="333:28">i</name></expr></argument>, <argument pos:start="333:31" pos:end="333:31"><expr pos:start="333:31" pos:end="333:31"><literal type="number" pos:start="333:31" pos:end="333:31">0</literal></expr></argument>, <argument pos:start="333:34" pos:end="333:40"><expr pos:start="333:34" pos:end="333:40"><operator pos:start="333:34" pos:end="333:34">&amp;</operator><name pos:start="333:35" pos:end="333:40"><name pos:start="333:35" pos:end="333:35">c</name><operator pos:start="333:36" pos:end="333:37">-&gt;</operator><name pos:start="333:38" pos:end="333:40">eax</name></name></expr></argument>, <argument pos:start="333:43" pos:end="333:49"><expr pos:start="333:43" pos:end="333:49"><operator pos:start="333:43" pos:end="333:43">&amp;</operator><name pos:start="333:44" pos:end="333:49"><name pos:start="333:44" pos:end="333:44">c</name><operator pos:start="333:45" pos:end="333:46">-&gt;</operator><name pos:start="333:47" pos:end="333:49">ebx</name></name></expr></argument>, <argument pos:start="333:52" pos:end="333:58"><expr pos:start="333:52" pos:end="333:58"><operator pos:start="333:52" pos:end="333:52">&amp;</operator><name pos:start="333:53" pos:end="333:58"><name pos:start="333:53" pos:end="333:53">c</name><operator pos:start="333:54" pos:end="333:55">-&gt;</operator><name pos:start="333:56" pos:end="333:58">ecx</name></name></expr></argument>, <argument pos:start="333:61" pos:end="333:67"><expr pos:start="333:61" pos:end="333:67"><operator pos:start="333:61" pos:end="333:61">&amp;</operator><name pos:start="333:62" pos:end="333:67"><name pos:start="333:62" pos:end="333:62">c</name><operator pos:start="333:63" pos:end="333:64">-&gt;</operator><name pos:start="333:65" pos:end="333:67">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="339:5" pos:end="339:63">/* Call Centaur's CPUID instructions they are supported. */</comment>

    <if_stmt pos:start="341:5" pos:end="365:5"><if pos:start="341:5" pos:end="365:5">if <condition pos:start="341:8" pos:end="341:31">(<expr pos:start="341:9" pos:end="341:30"><name pos:start="341:9" pos:end="341:26"><name pos:start="341:9" pos:end="341:11">env</name><operator pos:start="341:12" pos:end="341:13">-&gt;</operator><name pos:start="341:14" pos:end="341:26">cpuid_xlevel2</name></name> <operator pos:start="341:28" pos:end="341:28">&gt;</operator> <literal type="number" pos:start="341:30" pos:end="341:30">0</literal></expr>)</condition> <block pos:start="341:33" pos:end="365:5">{<block_content pos:start="343:9" pos:end="363:9">

        <expr_stmt pos:start="343:9" pos:end="345:66"><expr pos:start="343:9" pos:end="345:65"><name pos:start="343:9" pos:end="343:32"><name pos:start="343:9" pos:end="343:11">env</name><operator pos:start="343:12" pos:end="343:13">-&gt;</operator><name pos:start="343:14" pos:end="343:32">cpuid_ext4_features</name></name> <operator pos:start="343:34" pos:end="343:35">&amp;=</operator>

            <call pos:start="345:13" pos:end="345:65"><name pos:start="345:13" pos:end="345:40">kvm_arch_get_supported_cpuid</name><argument_list pos:start="345:41" pos:end="345:65">(<argument pos:start="345:42" pos:end="345:42"><expr pos:start="345:42" pos:end="345:42"><name pos:start="345:42" pos:end="345:42">s</name></expr></argument>, <argument pos:start="345:45" pos:end="345:54"><expr pos:start="345:45" pos:end="345:54"><literal type="number" pos:start="345:45" pos:end="345:54">0xC0000001</literal></expr></argument>, <argument pos:start="345:57" pos:end="345:57"><expr pos:start="345:57" pos:end="345:57"><literal type="number" pos:start="345:57" pos:end="345:57">0</literal></expr></argument>, <argument pos:start="345:60" pos:end="345:64"><expr pos:start="345:60" pos:end="345:64"><name pos:start="345:60" pos:end="345:64">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="347:77"><expr pos:start="347:9" pos:end="347:76"><call pos:start="347:9" pos:end="347:76"><name pos:start="347:9" pos:end="347:21">cpu_x86_cpuid</name><argument_list pos:start="347:22" pos:end="347:76">(<argument pos:start="347:23" pos:end="347:25"><expr pos:start="347:23" pos:end="347:25"><name pos:start="347:23" pos:end="347:25">env</name></expr></argument>, <argument pos:start="347:28" pos:end="347:37"><expr pos:start="347:28" pos:end="347:37"><literal type="number" pos:start="347:28" pos:end="347:37">0xC0000000</literal></expr></argument>, <argument pos:start="347:40" pos:end="347:40"><expr pos:start="347:40" pos:end="347:40"><literal type="number" pos:start="347:40" pos:end="347:40">0</literal></expr></argument>, <argument pos:start="347:43" pos:end="347:48"><expr pos:start="347:43" pos:end="347:48"><operator pos:start="347:43" pos:end="347:43">&amp;</operator><name pos:start="347:44" pos:end="347:48">limit</name></expr></argument>, <argument pos:start="347:51" pos:end="347:57"><expr pos:start="347:51" pos:end="347:57"><operator pos:start="347:51" pos:end="347:51">&amp;</operator><name pos:start="347:52" pos:end="347:57">unused</name></expr></argument>, <argument pos:start="347:60" pos:end="347:66"><expr pos:start="347:60" pos:end="347:66"><operator pos:start="347:60" pos:end="347:60">&amp;</operator><name pos:start="347:61" pos:end="347:66">unused</name></expr></argument>, <argument pos:start="347:69" pos:end="347:75"><expr pos:start="347:69" pos:end="347:75"><operator pos:start="347:69" pos:end="347:69">&amp;</operator><name pos:start="347:70" pos:end="347:75">unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="351:9" pos:end="363:9">for <control pos:start="351:13" pos:end="351:45">(<init pos:start="351:14" pos:end="351:28"><expr pos:start="351:14" pos:end="351:27"><name pos:start="351:14" pos:end="351:14">i</name> <operator pos:start="351:16" pos:end="351:16">=</operator> <literal type="number" pos:start="351:18" pos:end="351:27">0xC0000000</literal></expr>;</init> <condition pos:start="351:30" pos:end="351:40"><expr pos:start="351:30" pos:end="351:39"><name pos:start="351:30" pos:end="351:30">i</name> <operator pos:start="351:32" pos:end="351:33">&lt;=</operator> <name pos:start="351:35" pos:end="351:39">limit</name></expr>;</condition> <incr pos:start="351:42" pos:end="351:44"><expr pos:start="351:42" pos:end="351:44"><name pos:start="351:42" pos:end="351:42">i</name><operator pos:start="351:43" pos:end="351:44">++</operator></expr></incr>)</control> <block pos:start="351:47" pos:end="363:9">{<block_content pos:start="353:13" pos:end="361:73">

            <expr_stmt pos:start="353:13" pos:end="353:47"><expr pos:start="353:13" pos:end="353:46"><name pos:start="353:13" pos:end="353:13">c</name> <operator pos:start="353:15" pos:end="353:15">=</operator> <operator pos:start="353:17" pos:end="353:17">&amp;</operator><name pos:start="353:18" pos:end="353:46"><name pos:start="353:18" pos:end="353:27">cpuid_data</name><operator pos:start="353:28" pos:end="353:28">.</operator><name pos:start="353:29" pos:end="353:35">entries</name><index pos:start="353:36" pos:end="353:46">[<expr pos:start="353:37" pos:end="353:45"><name pos:start="353:37" pos:end="353:43">cpuid_i</name><operator pos:start="353:44" pos:end="353:45">++</operator></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="357:13" pos:end="357:28"><expr pos:start="357:13" pos:end="357:27"><name pos:start="357:13" pos:end="357:23"><name pos:start="357:13" pos:end="357:13">c</name><operator pos:start="357:14" pos:end="357:15">-&gt;</operator><name pos:start="357:16" pos:end="357:23">function</name></name> <operator pos:start="357:25" pos:end="357:25">=</operator> <name pos:start="357:27" pos:end="357:27">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="359:13" pos:end="359:25"><expr pos:start="359:13" pos:end="359:24"><name pos:start="359:13" pos:end="359:20"><name pos:start="359:13" pos:end="359:13">c</name><operator pos:start="359:14" pos:end="359:15">-&gt;</operator><name pos:start="359:16" pos:end="359:20">flags</name></name> <operator pos:start="359:22" pos:end="359:22">=</operator> <literal type="number" pos:start="359:24" pos:end="359:24">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="361:13" pos:end="361:73"><expr pos:start="361:13" pos:end="361:72"><call pos:start="361:13" pos:end="361:72"><name pos:start="361:13" pos:end="361:25">cpu_x86_cpuid</name><argument_list pos:start="361:26" pos:end="361:72">(<argument pos:start="361:27" pos:end="361:29"><expr pos:start="361:27" pos:end="361:29"><name pos:start="361:27" pos:end="361:29">env</name></expr></argument>, <argument pos:start="361:32" pos:end="361:32"><expr pos:start="361:32" pos:end="361:32"><name pos:start="361:32" pos:end="361:32">i</name></expr></argument>, <argument pos:start="361:35" pos:end="361:35"><expr pos:start="361:35" pos:end="361:35"><literal type="number" pos:start="361:35" pos:end="361:35">0</literal></expr></argument>, <argument pos:start="361:38" pos:end="361:44"><expr pos:start="361:38" pos:end="361:44"><operator pos:start="361:38" pos:end="361:38">&amp;</operator><name pos:start="361:39" pos:end="361:44"><name pos:start="361:39" pos:end="361:39">c</name><operator pos:start="361:40" pos:end="361:41">-&gt;</operator><name pos:start="361:42" pos:end="361:44">eax</name></name></expr></argument>, <argument pos:start="361:47" pos:end="361:53"><expr pos:start="361:47" pos:end="361:53"><operator pos:start="361:47" pos:end="361:47">&amp;</operator><name pos:start="361:48" pos:end="361:53"><name pos:start="361:48" pos:end="361:48">c</name><operator pos:start="361:49" pos:end="361:50">-&gt;</operator><name pos:start="361:51" pos:end="361:53">ebx</name></name></expr></argument>, <argument pos:start="361:56" pos:end="361:62"><expr pos:start="361:56" pos:end="361:62"><operator pos:start="361:56" pos:end="361:56">&amp;</operator><name pos:start="361:57" pos:end="361:62"><name pos:start="361:57" pos:end="361:57">c</name><operator pos:start="361:58" pos:end="361:59">-&gt;</operator><name pos:start="361:60" pos:end="361:62">ecx</name></name></expr></argument>, <argument pos:start="361:65" pos:end="361:71"><expr pos:start="361:65" pos:end="361:71"><operator pos:start="361:65" pos:end="361:65">&amp;</operator><name pos:start="361:66" pos:end="361:71"><name pos:start="361:66" pos:end="361:66">c</name><operator pos:start="361:67" pos:end="361:68">-&gt;</operator><name pos:start="361:69" pos:end="361:71">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="369:5" pos:end="369:36"><expr pos:start="369:5" pos:end="369:35"><name pos:start="369:5" pos:end="369:25"><name pos:start="369:5" pos:end="369:14">cpuid_data</name><operator pos:start="369:15" pos:end="369:15">.</operator><name pos:start="369:16" pos:end="369:20">cpuid</name><operator pos:start="369:21" pos:end="369:21">.</operator><name pos:start="369:22" pos:end="369:25">nent</name></name> <operator pos:start="369:27" pos:end="369:27">=</operator> <name pos:start="369:29" pos:end="369:35">cpuid_i</name></expr>;</expr_stmt>



    <if_stmt pos:start="373:5" pos:end="423:5"><if pos:start="373:5" pos:end="423:5">if <condition pos:start="373:8" pos:end="377:64">(<expr pos:start="373:9" pos:end="377:63"><operator pos:start="373:9" pos:end="373:9">(</operator><operator pos:start="373:10" pos:end="373:10">(</operator><name pos:start="373:11" pos:end="373:28"><name pos:start="373:11" pos:end="373:13">env</name><operator pos:start="373:14" pos:end="373:15">-&gt;</operator><name pos:start="373:16" pos:end="373:28">cpuid_version</name></name> <operator pos:start="373:30" pos:end="373:31">&gt;&gt;</operator> <literal type="number" pos:start="373:33" pos:end="373:33">8</literal><operator pos:start="373:34" pos:end="373:34">)</operator><operator pos:start="373:35" pos:end="373:35">&amp;</operator><literal type="number" pos:start="373:36" pos:end="373:38">0xF</literal><operator pos:start="373:39" pos:end="373:39">)</operator> <operator pos:start="373:41" pos:end="373:42">&gt;=</operator> <literal type="number" pos:start="373:44" pos:end="373:44">6</literal>

        <operator pos:start="375:9" pos:end="375:10">&amp;&amp;</operator> <operator pos:start="375:12" pos:end="375:12">(</operator><name pos:start="375:13" pos:end="375:31"><name pos:start="375:13" pos:end="375:15">env</name><operator pos:start="375:16" pos:end="375:17">-&gt;</operator><name pos:start="375:18" pos:end="375:31">cpuid_features</name></name><operator pos:start="375:32" pos:end="375:32">&amp;</operator><operator pos:start="375:33" pos:end="375:33">(</operator><name pos:start="375:34" pos:end="375:42">CPUID_MCE</name><operator pos:start="375:43" pos:end="375:43">|</operator><name pos:start="375:44" pos:end="375:52">CPUID_MCA</name><operator pos:start="375:53" pos:end="375:53">)</operator><operator pos:start="375:54" pos:end="375:54">)</operator> <operator pos:start="375:56" pos:end="375:57">==</operator> <operator pos:start="375:59" pos:end="375:59">(</operator><name pos:start="375:60" pos:end="375:68">CPUID_MCE</name><operator pos:start="375:69" pos:end="375:69">|</operator><name pos:start="375:70" pos:end="375:78">CPUID_MCA</name><operator pos:start="375:79" pos:end="375:79">)</operator>

        <operator pos:start="377:9" pos:end="377:10">&amp;&amp;</operator> <call pos:start="377:12" pos:end="377:59"><name pos:start="377:12" pos:end="377:30">kvm_check_extension</name><argument_list pos:start="377:31" pos:end="377:59">(<argument pos:start="377:32" pos:end="377:45"><expr pos:start="377:32" pos:end="377:45"><name pos:start="377:32" pos:end="377:45"><name pos:start="377:32" pos:end="377:34">env</name><operator pos:start="377:35" pos:end="377:36">-&gt;</operator><name pos:start="377:37" pos:end="377:45">kvm_state</name></name></expr></argument>, <argument pos:start="377:48" pos:end="377:58"><expr pos:start="377:48" pos:end="377:58"><name pos:start="377:48" pos:end="377:58">KVM_CAP_MCE</name></expr></argument>)</argument_list></call> <operator pos:start="377:61" pos:end="377:61">&gt;</operator> <literal type="number" pos:start="377:63" pos:end="377:63">0</literal></expr>)</condition> <block pos:start="377:66" pos:end="423:5">{<block_content pos:start="379:9" pos:end="421:31">

        <decl_stmt pos:start="379:9" pos:end="379:25"><decl pos:start="379:9" pos:end="379:24"><type pos:start="379:9" pos:end="379:16"><name pos:start="379:9" pos:end="379:16">uint64_t</name></type> <name pos:start="379:18" pos:end="379:24">mcg_cap</name></decl>;</decl_stmt>

        <decl_stmt pos:start="381:9" pos:end="381:18"><decl pos:start="381:9" pos:end="381:17"><type pos:start="381:9" pos:end="381:11"><name pos:start="381:9" pos:end="381:11">int</name></type> <name pos:start="381:13" pos:end="381:17">banks</name></decl>;</decl_stmt>

        <decl_stmt pos:start="383:9" pos:end="383:16"><decl pos:start="383:9" pos:end="383:15"><type pos:start="383:9" pos:end="383:11"><name pos:start="383:9" pos:end="383:11">int</name></type> <name pos:start="383:13" pos:end="383:15">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="387:9" pos:end="387:74"><expr pos:start="387:9" pos:end="387:73"><name pos:start="387:9" pos:end="387:11">ret</name> <operator pos:start="387:13" pos:end="387:13">=</operator> <call pos:start="387:15" pos:end="387:73"><name pos:start="387:15" pos:end="387:39">kvm_get_mce_cap_supported</name><argument_list pos:start="387:40" pos:end="387:73">(<argument pos:start="387:41" pos:end="387:54"><expr pos:start="387:41" pos:end="387:54"><name pos:start="387:41" pos:end="387:54"><name pos:start="387:41" pos:end="387:43">env</name><operator pos:start="387:44" pos:end="387:45">-&gt;</operator><name pos:start="387:46" pos:end="387:54">kvm_state</name></name></expr></argument>, <argument pos:start="387:57" pos:end="387:64"><expr pos:start="387:57" pos:end="387:64"><operator pos:start="387:57" pos:end="387:57">&amp;</operator><name pos:start="387:58" pos:end="387:64">mcg_cap</name></expr></argument>, <argument pos:start="387:67" pos:end="387:72"><expr pos:start="387:67" pos:end="387:72"><operator pos:start="387:67" pos:end="387:67">&amp;</operator><name pos:start="387:68" pos:end="387:72">banks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="389:9" pos:end="395:9"><if pos:start="389:9" pos:end="395:9">if <condition pos:start="389:12" pos:end="389:20">(<expr pos:start="389:13" pos:end="389:19"><name pos:start="389:13" pos:end="389:15">ret</name> <operator pos:start="389:17" pos:end="389:17">&lt;</operator> <literal type="number" pos:start="389:19" pos:end="389:19">0</literal></expr>)</condition> <block pos:start="389:22" pos:end="395:9">{<block_content pos:start="391:13" pos:end="393:23">

            <expr_stmt pos:start="391:13" pos:end="391:77"><expr pos:start="391:13" pos:end="391:76"><call pos:start="391:13" pos:end="391:76"><name pos:start="391:13" pos:end="391:19">fprintf</name><argument_list pos:start="391:20" pos:end="391:76">(<argument pos:start="391:21" pos:end="391:26"><expr pos:start="391:21" pos:end="391:26"><name pos:start="391:21" pos:end="391:26">stderr</name></expr></argument>, <argument pos:start="391:29" pos:end="391:59"><expr pos:start="391:29" pos:end="391:59"><literal type="string" pos:start="391:29" pos:end="391:59">"kvm_get_mce_cap_supported: %s"</literal></expr></argument>, <argument pos:start="391:62" pos:end="391:75"><expr pos:start="391:62" pos:end="391:75"><call pos:start="391:62" pos:end="391:75"><name pos:start="391:62" pos:end="391:69">strerror</name><argument_list pos:start="391:70" pos:end="391:75">(<argument pos:start="391:71" pos:end="391:74"><expr pos:start="391:71" pos:end="391:74"><operator pos:start="391:71" pos:end="391:71">-</operator><name pos:start="391:72" pos:end="391:74">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="393:13" pos:end="393:23">return <expr pos:start="393:20" pos:end="393:22"><name pos:start="393:20" pos:end="393:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="399:9" pos:end="403:9"><if pos:start="399:9" pos:end="403:9">if <condition pos:start="399:12" pos:end="399:34">(<expr pos:start="399:13" pos:end="399:33"><name pos:start="399:13" pos:end="399:17">banks</name> <operator pos:start="399:19" pos:end="399:19">&gt;</operator> <name pos:start="399:21" pos:end="399:33">MCE_BANKS_DEF</name></expr>)</condition> <block pos:start="399:36" pos:end="403:9">{<block_content pos:start="401:13" pos:end="401:34">

            <expr_stmt pos:start="401:13" pos:end="401:34"><expr pos:start="401:13" pos:end="401:33"><name pos:start="401:13" pos:end="401:17">banks</name> <operator pos:start="401:19" pos:end="401:19">=</operator> <name pos:start="401:21" pos:end="401:33">MCE_BANKS_DEF</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="405:9" pos:end="405:31"><expr pos:start="405:9" pos:end="405:30"><name pos:start="405:9" pos:end="405:15">mcg_cap</name> <operator pos:start="405:17" pos:end="405:18">&amp;=</operator> <name pos:start="405:20" pos:end="405:30">MCE_CAP_DEF</name></expr>;</expr_stmt>

        <expr_stmt pos:start="407:9" pos:end="407:25"><expr pos:start="407:9" pos:end="407:24"><name pos:start="407:9" pos:end="407:15">mcg_cap</name> <operator pos:start="407:17" pos:end="407:18">|=</operator> <name pos:start="407:20" pos:end="407:24">banks</name></expr>;</expr_stmt>

        <expr_stmt pos:start="409:9" pos:end="409:63"><expr pos:start="409:9" pos:end="409:62"><name pos:start="409:9" pos:end="409:11">ret</name> <operator pos:start="409:13" pos:end="409:13">=</operator> <call pos:start="409:15" pos:end="409:62"><name pos:start="409:15" pos:end="409:28">kvm_vcpu_ioctl</name><argument_list pos:start="409:29" pos:end="409:62">(<argument pos:start="409:30" pos:end="409:32"><expr pos:start="409:30" pos:end="409:32"><name pos:start="409:30" pos:end="409:32">env</name></expr></argument>, <argument pos:start="409:35" pos:end="409:51"><expr pos:start="409:35" pos:end="409:51"><name pos:start="409:35" pos:end="409:51">KVM_X86_SETUP_MCE</name></expr></argument>, <argument pos:start="409:54" pos:end="409:61"><expr pos:start="409:54" pos:end="409:61"><operator pos:start="409:54" pos:end="409:54">&amp;</operator><name pos:start="409:55" pos:end="409:61">mcg_cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="411:9" pos:end="417:9"><if pos:start="411:9" pos:end="417:9">if <condition pos:start="411:12" pos:end="411:20">(<expr pos:start="411:13" pos:end="411:19"><name pos:start="411:13" pos:end="411:15">ret</name> <operator pos:start="411:17" pos:end="411:17">&lt;</operator> <literal type="number" pos:start="411:19" pos:end="411:19">0</literal></expr>)</condition> <block pos:start="411:22" pos:end="417:9">{<block_content pos:start="413:13" pos:end="415:23">

            <expr_stmt pos:start="413:13" pos:end="413:69"><expr pos:start="413:13" pos:end="413:68"><call pos:start="413:13" pos:end="413:68"><name pos:start="413:13" pos:end="413:19">fprintf</name><argument_list pos:start="413:20" pos:end="413:68">(<argument pos:start="413:21" pos:end="413:26"><expr pos:start="413:21" pos:end="413:26"><name pos:start="413:21" pos:end="413:26">stderr</name></expr></argument>, <argument pos:start="413:29" pos:end="413:51"><expr pos:start="413:29" pos:end="413:51"><literal type="string" pos:start="413:29" pos:end="413:51">"KVM_X86_SETUP_MCE: %s"</literal></expr></argument>, <argument pos:start="413:54" pos:end="413:67"><expr pos:start="413:54" pos:end="413:67"><call pos:start="413:54" pos:end="413:67"><name pos:start="413:54" pos:end="413:61">strerror</name><argument_list pos:start="413:62" pos:end="413:67">(<argument pos:start="413:63" pos:end="413:66"><expr pos:start="413:63" pos:end="413:66"><operator pos:start="413:63" pos:end="413:63">-</operator><name pos:start="413:64" pos:end="413:66">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="415:13" pos:end="415:23">return <expr pos:start="415:20" pos:end="415:22"><name pos:start="415:20" pos:end="415:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="421:9" pos:end="421:31"><expr pos:start="421:9" pos:end="421:30"><name pos:start="421:9" pos:end="421:20"><name pos:start="421:9" pos:end="421:11">env</name><operator pos:start="421:12" pos:end="421:13">-&gt;</operator><name pos:start="421:14" pos:end="421:20">mcg_cap</name></name> <operator pos:start="421:22" pos:end="421:22">=</operator> <name pos:start="421:24" pos:end="421:30">mcg_cap</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="427:5" pos:end="427:60"><expr pos:start="427:5" pos:end="427:59"><call pos:start="427:5" pos:end="427:59"><name pos:start="427:5" pos:end="427:36">qemu_add_vm_change_state_handler</name><argument_list pos:start="427:37" pos:end="427:59">(<argument pos:start="427:38" pos:end="427:53"><expr pos:start="427:38" pos:end="427:53"><name pos:start="427:38" pos:end="427:53">cpu_update_state</name></expr></argument>, <argument pos:start="427:56" pos:end="427:58"><expr pos:start="427:56" pos:end="427:58"><name pos:start="427:56" pos:end="427:58">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="431:5" pos:end="431:33"><expr pos:start="431:5" pos:end="431:32"><name pos:start="431:5" pos:end="431:28"><name pos:start="431:5" pos:end="431:14">cpuid_data</name><operator pos:start="431:15" pos:end="431:15">.</operator><name pos:start="431:16" pos:end="431:20">cpuid</name><operator pos:start="431:21" pos:end="431:21">.</operator><name pos:start="431:22" pos:end="431:28">padding</name></name> <operator pos:start="431:30" pos:end="431:30">=</operator> <literal type="number" pos:start="431:32" pos:end="431:32">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="433:5" pos:end="433:57"><expr pos:start="433:5" pos:end="433:56"><name pos:start="433:5" pos:end="433:5">r</name> <operator pos:start="433:7" pos:end="433:7">=</operator> <call pos:start="433:9" pos:end="433:56"><name pos:start="433:9" pos:end="433:22">kvm_vcpu_ioctl</name><argument_list pos:start="433:23" pos:end="433:56">(<argument pos:start="433:24" pos:end="433:26"><expr pos:start="433:24" pos:end="433:26"><name pos:start="433:24" pos:end="433:26">env</name></expr></argument>, <argument pos:start="433:29" pos:end="433:42"><expr pos:start="433:29" pos:end="433:42"><name pos:start="433:29" pos:end="433:42">KVM_SET_CPUID2</name></expr></argument>, <argument pos:start="433:45" pos:end="433:55"><expr pos:start="433:45" pos:end="433:55"><operator pos:start="433:45" pos:end="433:45">&amp;</operator><name pos:start="433:46" pos:end="433:55">cpuid_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="435:5" pos:end="439:5"><if pos:start="435:5" pos:end="439:5">if <condition pos:start="435:8" pos:end="435:10">(<expr pos:start="435:9" pos:end="435:9"><name pos:start="435:9" pos:end="435:9">r</name></expr>)</condition> <block pos:start="435:12" pos:end="439:5">{<block_content pos:start="437:9" pos:end="437:17">

        <return pos:start="437:9" pos:end="437:17">return <expr pos:start="437:16" pos:end="437:16"><name pos:start="437:16" pos:end="437:16">r</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="443:5" pos:end="443:65"><expr pos:start="443:5" pos:end="443:64"><name pos:start="443:5" pos:end="443:5">r</name> <operator pos:start="443:7" pos:end="443:7">=</operator> <call pos:start="443:9" pos:end="443:64"><name pos:start="443:9" pos:end="443:27">kvm_check_extension</name><argument_list pos:start="443:28" pos:end="443:64">(<argument pos:start="443:29" pos:end="443:42"><expr pos:start="443:29" pos:end="443:42"><name pos:start="443:29" pos:end="443:42"><name pos:start="443:29" pos:end="443:31">env</name><operator pos:start="443:32" pos:end="443:33">-&gt;</operator><name pos:start="443:34" pos:end="443:42">kvm_state</name></name></expr></argument>, <argument pos:start="443:45" pos:end="443:63"><expr pos:start="443:45" pos:end="443:63"><name pos:start="443:45" pos:end="443:63">KVM_CAP_TSC_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="445:5" pos:end="457:5"><if pos:start="445:5" pos:end="457:5">if <condition pos:start="445:8" pos:end="445:26">(<expr pos:start="445:9" pos:end="445:25"><name pos:start="445:9" pos:end="445:9">r</name> <operator pos:start="445:11" pos:end="445:12">&amp;&amp;</operator> <name pos:start="445:14" pos:end="445:25"><name pos:start="445:14" pos:end="445:16">env</name><operator pos:start="445:17" pos:end="445:18">-&gt;</operator><name pos:start="445:19" pos:end="445:25">tsc_khz</name></name></expr>)</condition> <block pos:start="445:28" pos:end="457:5">{<block_content pos:start="447:9" pos:end="455:9">

        <expr_stmt pos:start="447:9" pos:end="447:63"><expr pos:start="447:9" pos:end="447:62"><name pos:start="447:9" pos:end="447:9">r</name> <operator pos:start="447:11" pos:end="447:11">=</operator> <call pos:start="447:13" pos:end="447:62"><name pos:start="447:13" pos:end="447:26">kvm_vcpu_ioctl</name><argument_list pos:start="447:27" pos:end="447:62">(<argument pos:start="447:28" pos:end="447:30"><expr pos:start="447:28" pos:end="447:30"><name pos:start="447:28" pos:end="447:30">env</name></expr></argument>, <argument pos:start="447:33" pos:end="447:47"><expr pos:start="447:33" pos:end="447:47"><name pos:start="447:33" pos:end="447:47">KVM_SET_TSC_KHZ</name></expr></argument>, <argument pos:start="447:50" pos:end="447:61"><expr pos:start="447:50" pos:end="447:61"><name pos:start="447:50" pos:end="447:61"><name pos:start="447:50" pos:end="447:52">env</name><operator pos:start="447:53" pos:end="447:54">-&gt;</operator><name pos:start="447:55" pos:end="447:61">tsc_khz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="449:9" pos:end="455:9"><if pos:start="449:9" pos:end="455:9">if <condition pos:start="449:12" pos:end="449:18">(<expr pos:start="449:13" pos:end="449:17"><name pos:start="449:13" pos:end="449:13">r</name> <operator pos:start="449:15" pos:end="449:15">&lt;</operator> <literal type="number" pos:start="449:17" pos:end="449:17">0</literal></expr>)</condition> <block pos:start="449:20" pos:end="455:9">{<block_content pos:start="451:13" pos:end="453:21">

            <expr_stmt pos:start="451:13" pos:end="451:56"><expr pos:start="451:13" pos:end="451:55"><call pos:start="451:13" pos:end="451:55"><name pos:start="451:13" pos:end="451:19">fprintf</name><argument_list pos:start="451:20" pos:end="451:55">(<argument pos:start="451:21" pos:end="451:26"><expr pos:start="451:21" pos:end="451:26"><name pos:start="451:21" pos:end="451:26">stderr</name></expr></argument>, <argument pos:start="451:29" pos:end="451:54"><expr pos:start="451:29" pos:end="451:54"><literal type="string" pos:start="451:29" pos:end="451:54">"KVM_SET_TSC_KHZ failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="453:13" pos:end="453:21">return <expr pos:start="453:20" pos:end="453:20"><name pos:start="453:20" pos:end="453:20">r</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="461:5" pos:end="465:5"><if pos:start="461:5" pos:end="465:5">if <condition pos:start="461:8" pos:end="461:24">(<expr pos:start="461:9" pos:end="461:23"><call pos:start="461:9" pos:end="461:23"><name pos:start="461:9" pos:end="461:21">kvm_has_xsave</name><argument_list pos:start="461:22" pos:end="461:23">()</argument_list></call></expr>)</condition> <block pos:start="461:26" pos:end="465:5">{<block_content pos:start="463:9" pos:end="463:75">

        <expr_stmt pos:start="463:9" pos:end="463:75"><expr pos:start="463:9" pos:end="463:74"><name pos:start="463:9" pos:end="463:26"><name pos:start="463:9" pos:end="463:11">env</name><operator pos:start="463:12" pos:end="463:13">-&gt;</operator><name pos:start="463:14" pos:end="463:26">kvm_xsave_buf</name></name> <operator pos:start="463:28" pos:end="463:28">=</operator> <call pos:start="463:30" pos:end="463:74"><name pos:start="463:30" pos:end="463:42">qemu_memalign</name><argument_list pos:start="463:43" pos:end="463:74">(<argument pos:start="463:44" pos:end="463:47"><expr pos:start="463:44" pos:end="463:47"><literal type="number" pos:start="463:44" pos:end="463:47">4096</literal></expr></argument>, <argument pos:start="463:50" pos:end="463:73"><expr pos:start="463:50" pos:end="463:73"><sizeof pos:start="463:50" pos:end="463:73">sizeof<argument_list pos:start="463:56" pos:end="463:73">(<argument pos:start="463:57" pos:end="463:72"><expr pos:start="463:57" pos:end="463:72">struct <name pos:start="463:64" pos:end="463:72">kvm_xsave</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="469:5" pos:end="469:13">return <expr pos:start="469:12" pos:end="469:12"><literal type="number" pos:start="469:12" pos:end="469:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
