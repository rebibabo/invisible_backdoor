<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10045.c" pos:tabs="8"><function pos:start="1:1" pos:end="221:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">pc_cpu_pre_plug</name><parameter_list pos:start="1:28" pos:end="3:59">(<parameter pos:start="1:29" pos:end="1:55"><decl pos:start="1:29" pos:end="1:55"><type pos:start="1:29" pos:end="1:55"><name pos:start="1:29" pos:end="1:42">HotplugHandler</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:55">hotplug_dev</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:44"><decl pos:start="3:29" pos:end="3:44"><type pos:start="3:29" pos:end="3:44"><name pos:start="3:29" pos:end="3:39">DeviceState</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:44">dev</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:58"><decl pos:start="3:47" pos:end="3:58"><type pos:start="3:47" pos:end="3:58"><name pos:start="3:47" pos:end="3:51">Error</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier><modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:58">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="221:1">{<block_content pos:start="7:5" pos:end="219:5">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">node_id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">CPUArchId</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:23">cpu_slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:18">X86CPUTopoInfo</name></type> <name pos:start="15:20" pos:end="15:23">topo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">X86CPU</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:15">cpu</name> <init pos:start="17:17" pos:end="17:30">= <expr pos:start="17:19" pos:end="17:30"><call pos:start="17:19" pos:end="17:30"><name pos:start="17:19" pos:end="17:25">X86_CPU</name><argument_list pos:start="17:26" pos:end="17:30">(<argument pos:start="17:27" pos:end="17:29"><expr pos:start="17:27" pos:end="17:29"><name pos:start="17:27" pos:end="17:29">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:51"><decl pos:start="19:5" pos:end="19:50"><type pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:18">PCMachineState</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:24">pcms</name> <init pos:start="19:26" pos:end="19:50">= <expr pos:start="19:28" pos:end="19:50"><call pos:start="19:28" pos:end="19:50"><name pos:start="19:28" pos:end="19:37">PC_MACHINE</name><argument_list pos:start="19:38" pos:end="19:50">(<argument pos:start="19:39" pos:end="19:49"><expr pos:start="19:39" pos:end="19:49"><name pos:start="19:39" pos:end="19:49">hotplug_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:78">/* if APIC ID is not set, set it based on socket/core/thread properties */</comment>

    <if_stmt pos:start="25:5" pos:end="89:5"><if pos:start="25:5" pos:end="89:5">if <condition pos:start="25:8" pos:end="25:43">(<expr pos:start="25:9" pos:end="25:42"><name pos:start="25:9" pos:end="25:20"><name pos:start="25:9" pos:end="25:11">cpu</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:20">apic_id</name></name> <operator pos:start="25:22" pos:end="25:23">==</operator> <name pos:start="25:25" pos:end="25:42">UNASSIGNED_APIC_ID</name></expr>)</condition> <block pos:start="25:45" pos:end="89:5">{<block_content pos:start="27:9" pos:end="87:75">

        <decl_stmt pos:start="27:9" pos:end="27:66"><decl pos:start="27:9" pos:end="27:65"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:22">max_socket</name> <init pos:start="27:24" pos:end="27:65">= <expr pos:start="27:26" pos:end="27:65"><operator pos:start="27:26" pos:end="27:26">(</operator><name pos:start="27:27" pos:end="27:34">max_cpus</name> <operator pos:start="27:36" pos:end="27:36">-</operator> <literal type="number" pos:start="27:38" pos:end="27:38">1</literal><operator pos:start="27:39" pos:end="27:39">)</operator> <operator pos:start="27:41" pos:end="27:41">/</operator> <name pos:start="27:43" pos:end="27:53">smp_threads</name> <operator pos:start="27:55" pos:end="27:55">/</operator> <name pos:start="27:57" pos:end="27:65">smp_cores</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="31:9" pos:end="45:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:31">(<expr pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:15">cpu</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:26">socket_id</name></name> <operator pos:start="31:28" pos:end="31:28">&lt;</operator> <literal type="number" pos:start="31:30" pos:end="31:30">0</literal></expr>)</condition> <block pos:start="31:33" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:19">

            <expr_stmt pos:start="33:13" pos:end="33:57"><expr pos:start="33:13" pos:end="33:56"><call pos:start="33:13" pos:end="33:56"><name pos:start="33:13" pos:end="33:22">error_setg</name><argument_list pos:start="33:23" pos:end="33:56">(<argument pos:start="33:24" pos:end="33:27"><expr pos:start="33:24" pos:end="33:27"><name pos:start="33:24" pos:end="33:27">errp</name></expr></argument>, <argument pos:start="33:30" pos:end="33:55"><expr pos:start="33:30" pos:end="33:55"><literal type="string" pos:start="33:30" pos:end="33:55">"CPU socket-id is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="37:11" pos:end="45:9">else if <condition pos:start="37:19" pos:end="37:47">(<expr pos:start="37:20" pos:end="37:46"><name pos:start="37:20" pos:end="37:33"><name pos:start="37:20" pos:end="37:22">cpu</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:33">socket_id</name></name> <operator pos:start="37:35" pos:end="37:35">&gt;</operator> <name pos:start="37:37" pos:end="37:46">max_socket</name></expr>)</condition> <block pos:start="37:49" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:19">

            <expr_stmt pos:start="39:13" pos:end="41:51"><expr pos:start="39:13" pos:end="41:50"><call pos:start="39:13" pos:end="41:50"><name pos:start="39:13" pos:end="39:22">error_setg</name><argument_list pos:start="39:23" pos:end="41:50">(<argument pos:start="39:24" pos:end="39:27"><expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">errp</name></expr></argument>, <argument pos:start="39:30" pos:end="39:78"><expr pos:start="39:30" pos:end="39:78"><literal type="string" pos:start="39:30" pos:end="39:78">"Invalid CPU socket-id: %u must be in range 0:%u"</literal></expr></argument>,

                       <argument pos:start="41:24" pos:end="41:37"><expr pos:start="41:24" pos:end="41:37"><name pos:start="41:24" pos:end="41:37"><name pos:start="41:24" pos:end="41:26">cpu</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:37">socket_id</name></name></expr></argument>, <argument pos:start="41:40" pos:end="41:49"><expr pos:start="41:40" pos:end="41:49"><name pos:start="41:40" pos:end="41:49">max_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="47:9" pos:end="61:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="47:29">(<expr pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:24"><name pos:start="47:13" pos:end="47:15">cpu</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:24">core_id</name></name> <operator pos:start="47:26" pos:end="47:26">&lt;</operator> <literal type="number" pos:start="47:28" pos:end="47:28">0</literal></expr>)</condition> <block pos:start="47:31" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:19">

            <expr_stmt pos:start="49:13" pos:end="49:55"><expr pos:start="49:13" pos:end="49:54"><call pos:start="49:13" pos:end="49:54"><name pos:start="49:13" pos:end="49:22">error_setg</name><argument_list pos:start="49:23" pos:end="49:54">(<argument pos:start="49:24" pos:end="49:27"><expr pos:start="49:24" pos:end="49:27"><name pos:start="49:24" pos:end="49:27">errp</name></expr></argument>, <argument pos:start="49:30" pos:end="49:53"><expr pos:start="49:30" pos:end="49:53"><literal type="string" pos:start="49:30" pos:end="49:53">"CPU core-id is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="53:11" pos:end="61:9">else if <condition pos:start="53:19" pos:end="53:50">(<expr pos:start="53:20" pos:end="53:49"><name pos:start="53:20" pos:end="53:31"><name pos:start="53:20" pos:end="53:22">cpu</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:31">core_id</name></name> <operator pos:start="53:33" pos:end="53:33">&gt;</operator> <operator pos:start="53:35" pos:end="53:35">(</operator><name pos:start="53:36" pos:end="53:44">smp_cores</name> <operator pos:start="53:46" pos:end="53:46">-</operator> <literal type="number" pos:start="53:48" pos:end="53:48">1</literal><operator pos:start="53:49" pos:end="53:49">)</operator></expr>)</condition> <block pos:start="53:52" pos:end="61:9">{<block_content pos:start="55:13" pos:end="59:19">

            <expr_stmt pos:start="55:13" pos:end="57:52"><expr pos:start="55:13" pos:end="57:51"><call pos:start="55:13" pos:end="57:51"><name pos:start="55:13" pos:end="55:22">error_setg</name><argument_list pos:start="55:23" pos:end="57:51">(<argument pos:start="55:24" pos:end="55:27"><expr pos:start="55:24" pos:end="55:27"><name pos:start="55:24" pos:end="55:27">errp</name></expr></argument>, <argument pos:start="55:30" pos:end="55:76"><expr pos:start="55:30" pos:end="55:76"><literal type="string" pos:start="55:30" pos:end="55:76">"Invalid CPU core-id: %u must be in range 0:%u"</literal></expr></argument>,

                       <argument pos:start="57:24" pos:end="57:35"><expr pos:start="57:24" pos:end="57:35"><name pos:start="57:24" pos:end="57:35"><name pos:start="57:24" pos:end="57:26">cpu</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:35">core_id</name></name></expr></argument>, <argument pos:start="57:38" pos:end="57:50"><expr pos:start="57:38" pos:end="57:50"><name pos:start="57:38" pos:end="57:46">smp_cores</name> <operator pos:start="57:48" pos:end="57:48">-</operator> <literal type="number" pos:start="57:50" pos:end="57:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="77:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:31">(<expr pos:start="63:13" pos:end="63:30"><name pos:start="63:13" pos:end="63:26"><name pos:start="63:13" pos:end="63:15">cpu</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:26">thread_id</name></name> <operator pos:start="63:28" pos:end="63:28">&lt;</operator> <literal type="number" pos:start="63:30" pos:end="63:30">0</literal></expr>)</condition> <block pos:start="63:33" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:19">

            <expr_stmt pos:start="65:13" pos:end="65:57"><expr pos:start="65:13" pos:end="65:56"><call pos:start="65:13" pos:end="65:56"><name pos:start="65:13" pos:end="65:22">error_setg</name><argument_list pos:start="65:23" pos:end="65:56">(<argument pos:start="65:24" pos:end="65:27"><expr pos:start="65:24" pos:end="65:27"><name pos:start="65:24" pos:end="65:27">errp</name></expr></argument>, <argument pos:start="65:30" pos:end="65:55"><expr pos:start="65:30" pos:end="65:55"><literal type="string" pos:start="65:30" pos:end="65:55">"CPU thread-id is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="69:11" pos:end="77:9">else if <condition pos:start="69:19" pos:end="69:54">(<expr pos:start="69:20" pos:end="69:53"><name pos:start="69:20" pos:end="69:33"><name pos:start="69:20" pos:end="69:22">cpu</name><operator pos:start="69:23" pos:end="69:24">-&gt;</operator><name pos:start="69:25" pos:end="69:33">thread_id</name></name> <operator pos:start="69:35" pos:end="69:35">&gt;</operator> <operator pos:start="69:37" pos:end="69:37">(</operator><name pos:start="69:38" pos:end="69:48">smp_threads</name> <operator pos:start="69:50" pos:end="69:50">-</operator> <literal type="number" pos:start="69:52" pos:end="69:52">1</literal><operator pos:start="69:53" pos:end="69:53">)</operator></expr>)</condition> <block pos:start="69:56" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:19">

            <expr_stmt pos:start="71:13" pos:end="73:56"><expr pos:start="71:13" pos:end="73:55"><call pos:start="71:13" pos:end="73:55"><name pos:start="71:13" pos:end="71:22">error_setg</name><argument_list pos:start="71:23" pos:end="73:55">(<argument pos:start="71:24" pos:end="71:27"><expr pos:start="71:24" pos:end="71:27"><name pos:start="71:24" pos:end="71:27">errp</name></expr></argument>, <argument pos:start="71:30" pos:end="71:78"><expr pos:start="71:30" pos:end="71:78"><literal type="string" pos:start="71:30" pos:end="71:78">"Invalid CPU thread-id: %u must be in range 0:%u"</literal></expr></argument>,

                       <argument pos:start="73:24" pos:end="73:37"><expr pos:start="73:24" pos:end="73:37"><name pos:start="73:24" pos:end="73:37"><name pos:start="73:24" pos:end="73:26">cpu</name><operator pos:start="73:27" pos:end="73:28">-&gt;</operator><name pos:start="73:29" pos:end="73:37">thread_id</name></name></expr></argument>, <argument pos:start="73:40" pos:end="73:54"><expr pos:start="73:40" pos:end="73:54"><name pos:start="73:40" pos:end="73:50">smp_threads</name> <operator pos:start="73:52" pos:end="73:52">-</operator> <literal type="number" pos:start="73:54" pos:end="73:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="75:13" pos:end="75:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:37"><expr pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:19"><name pos:start="81:9" pos:end="81:12">topo</name><operator pos:start="81:13" pos:end="81:13">.</operator><name pos:start="81:14" pos:end="81:19">pkg_id</name></name> <operator pos:start="81:21" pos:end="81:21">=</operator> <name pos:start="81:23" pos:end="81:36"><name pos:start="81:23" pos:end="81:25">cpu</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:36">socket_id</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:36"><expr pos:start="83:9" pos:end="83:35"><name pos:start="83:9" pos:end="83:20"><name pos:start="83:9" pos:end="83:12">topo</name><operator pos:start="83:13" pos:end="83:13">.</operator><name pos:start="83:14" pos:end="83:20">core_id</name></name> <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:35"><name pos:start="83:24" pos:end="83:26">cpu</name><operator pos:start="83:27" pos:end="83:28">-&gt;</operator><name pos:start="83:29" pos:end="83:35">core_id</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:37"><expr pos:start="85:9" pos:end="85:36"><name pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:12">topo</name><operator pos:start="85:13" pos:end="85:13">.</operator><name pos:start="85:14" pos:end="85:19">smt_id</name></name> <operator pos:start="85:21" pos:end="85:21">=</operator> <name pos:start="85:23" pos:end="85:36"><name pos:start="85:23" pos:end="85:25">cpu</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:36">thread_id</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:75"><expr pos:start="87:9" pos:end="87:74"><name pos:start="87:9" pos:end="87:20"><name pos:start="87:9" pos:end="87:11">cpu</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:20">apic_id</name></name> <operator pos:start="87:22" pos:end="87:22">=</operator> <call pos:start="87:24" pos:end="87:74"><name pos:start="87:24" pos:end="87:43">apicid_from_topo_ids</name><argument_list pos:start="87:44" pos:end="87:74">(<argument pos:start="87:45" pos:end="87:53"><expr pos:start="87:45" pos:end="87:53"><name pos:start="87:45" pos:end="87:53">smp_cores</name></expr></argument>, <argument pos:start="87:56" pos:end="87:66"><expr pos:start="87:56" pos:end="87:66"><name pos:start="87:56" pos:end="87:66">smp_threads</name></expr></argument>, <argument pos:start="87:69" pos:end="87:73"><expr pos:start="87:69" pos:end="87:73"><operator pos:start="87:69" pos:end="87:69">&amp;</operator><name pos:start="87:70" pos:end="87:73">topo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:67"><expr pos:start="93:5" pos:end="93:66"><name pos:start="93:5" pos:end="93:12">cpu_slot</name> <operator pos:start="93:14" pos:end="93:14">=</operator> <call pos:start="93:16" pos:end="93:66"><name pos:start="93:16" pos:end="93:31">pc_find_cpu_slot</name><argument_list pos:start="93:32" pos:end="93:66">(<argument pos:start="93:33" pos:end="93:45"><expr pos:start="93:33" pos:end="93:45"><call pos:start="93:33" pos:end="93:45"><name pos:start="93:33" pos:end="93:39">MACHINE</name><argument_list pos:start="93:40" pos:end="93:45">(<argument pos:start="93:41" pos:end="93:44"><expr pos:start="93:41" pos:end="93:44"><name pos:start="93:41" pos:end="93:44">pcms</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:48" pos:end="93:59"><expr pos:start="93:48" pos:end="93:59"><name pos:start="93:48" pos:end="93:59"><name pos:start="93:48" pos:end="93:50">cpu</name><operator pos:start="93:51" pos:end="93:52">-&gt;</operator><name pos:start="93:53" pos:end="93:59">apic_id</name></name></expr></argument>, <argument pos:start="93:62" pos:end="93:65"><expr pos:start="93:62" pos:end="93:65"><operator pos:start="93:62" pos:end="93:62">&amp;</operator><name pos:start="93:63" pos:end="93:65">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="113:5"><if pos:start="95:5" pos:end="113:5">if <condition pos:start="95:8" pos:end="95:18">(<expr pos:start="95:9" pos:end="95:17"><operator pos:start="95:9" pos:end="95:9">!</operator><name pos:start="95:10" pos:end="95:17">cpu_slot</name></expr>)</condition> <block pos:start="95:20" pos:end="113:5">{<block_content pos:start="97:9" pos:end="111:15">

        <decl_stmt pos:start="97:9" pos:end="97:41"><decl pos:start="97:9" pos:end="97:40"><type pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:20">MachineState</name> <modifier pos:start="97:22" pos:end="97:22">*</modifier></type><name pos:start="97:23" pos:end="97:24">ms</name> <init pos:start="97:26" pos:end="97:40">= <expr pos:start="97:28" pos:end="97:40"><call pos:start="97:28" pos:end="97:40"><name pos:start="97:28" pos:end="97:34">MACHINE</name><argument_list pos:start="97:35" pos:end="97:40">(<argument pos:start="97:36" pos:end="97:39"><expr pos:start="97:36" pos:end="97:39"><name pos:start="97:36" pos:end="97:39">pcms</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:78"><expr pos:start="101:9" pos:end="101:77"><call pos:start="101:9" pos:end="101:77"><name pos:start="101:9" pos:end="101:32">x86_topo_ids_from_apicid</name><argument_list pos:start="101:33" pos:end="101:77">(<argument pos:start="101:34" pos:end="101:45"><expr pos:start="101:34" pos:end="101:45"><name pos:start="101:34" pos:end="101:45"><name pos:start="101:34" pos:end="101:36">cpu</name><operator pos:start="101:37" pos:end="101:38">-&gt;</operator><name pos:start="101:39" pos:end="101:45">apic_id</name></name></expr></argument>, <argument pos:start="101:48" pos:end="101:56"><expr pos:start="101:48" pos:end="101:56"><name pos:start="101:48" pos:end="101:56">smp_cores</name></expr></argument>, <argument pos:start="101:59" pos:end="101:69"><expr pos:start="101:59" pos:end="101:69"><name pos:start="101:59" pos:end="101:69">smp_threads</name></expr></argument>, <argument pos:start="101:72" pos:end="101:76"><expr pos:start="101:72" pos:end="101:76"><operator pos:start="101:72" pos:end="101:72">&amp;</operator><name pos:start="101:73" pos:end="101:76">topo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="109:47"><expr pos:start="103:9" pos:end="109:46"><call pos:start="103:9" pos:end="109:46"><name pos:start="103:9" pos:end="103:18">error_setg</name><argument_list pos:start="103:19" pos:end="109:46">(<argument pos:start="103:20" pos:end="103:23"><expr pos:start="103:20" pos:end="103:23"><name pos:start="103:20" pos:end="103:23">errp</name></expr></argument>, <argument pos:start="103:26" pos:end="105:64"><expr pos:start="103:26" pos:end="105:64"><literal type="string" pos:start="103:26" pos:end="103:78">"Invalid CPU [socket: %u, core: %u, thread: %u] with"</literal>

                  <literal type="string" pos:start="105:19" pos:end="105:30">" APIC ID %"</literal> <name pos:start="105:32" pos:end="105:37">PRIu32</name> <literal type="string" pos:start="105:39" pos:end="105:64">", valid index range 0:%d"</literal></expr></argument>,

                   <argument pos:start="107:20" pos:end="107:30"><expr pos:start="107:20" pos:end="107:30"><name pos:start="107:20" pos:end="107:30"><name pos:start="107:20" pos:end="107:23">topo</name><operator pos:start="107:24" pos:end="107:24">.</operator><name pos:start="107:25" pos:end="107:30">pkg_id</name></name></expr></argument>, <argument pos:start="107:33" pos:end="107:44"><expr pos:start="107:33" pos:end="107:44"><name pos:start="107:33" pos:end="107:44"><name pos:start="107:33" pos:end="107:36">topo</name><operator pos:start="107:37" pos:end="107:37">.</operator><name pos:start="107:38" pos:end="107:44">core_id</name></name></expr></argument>, <argument pos:start="107:47" pos:end="107:57"><expr pos:start="107:47" pos:end="107:57"><name pos:start="107:47" pos:end="107:57"><name pos:start="107:47" pos:end="107:50">topo</name><operator pos:start="107:51" pos:end="107:51">.</operator><name pos:start="107:52" pos:end="107:57">smt_id</name></name></expr></argument>, <argument pos:start="107:60" pos:end="107:71"><expr pos:start="107:60" pos:end="107:71"><name pos:start="107:60" pos:end="107:71"><name pos:start="107:60" pos:end="107:62">cpu</name><operator pos:start="107:63" pos:end="107:64">-&gt;</operator><name pos:start="107:65" pos:end="107:71">apic_id</name></name></expr></argument>,

                   <argument pos:start="109:20" pos:end="109:45"><expr pos:start="109:20" pos:end="109:45"><name pos:start="109:20" pos:end="109:41"><name pos:start="109:20" pos:end="109:21">ms</name><operator pos:start="109:22" pos:end="109:23">-&gt;</operator><name pos:start="109:24" pos:end="109:36">possible_cpus</name><operator pos:start="109:37" pos:end="109:38">-&gt;</operator><name pos:start="109:39" pos:end="109:41">len</name></name> <operator pos:start="109:43" pos:end="109:43">-</operator> <literal type="number" pos:start="109:45" pos:end="109:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="111:9" pos:end="111:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="117:5" pos:end="125:5"><if pos:start="117:5" pos:end="125:5">if <condition pos:start="117:8" pos:end="117:22">(<expr pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:16">cpu_slot</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:21">cpu</name></name></expr>)</condition> <block pos:start="117:24" pos:end="125:5">{<block_content pos:start="119:9" pos:end="123:15">

        <expr_stmt pos:start="119:9" pos:end="121:38"><expr pos:start="119:9" pos:end="121:37"><call pos:start="119:9" pos:end="121:37"><name pos:start="119:9" pos:end="119:18">error_setg</name><argument_list pos:start="119:19" pos:end="121:37">(<argument pos:start="119:20" pos:end="119:23"><expr pos:start="119:20" pos:end="119:23"><name pos:start="119:20" pos:end="119:23">errp</name></expr></argument>, <argument pos:start="119:26" pos:end="119:66"><expr pos:start="119:26" pos:end="119:66"><literal type="string" pos:start="119:26" pos:end="119:49">"CPU[%d] with APIC ID %"</literal> <name pos:start="119:51" pos:end="119:56">PRIu32</name> <literal type="string" pos:start="119:58" pos:end="119:66">" exists"</literal></expr></argument>,

                   <argument pos:start="121:20" pos:end="121:22"><expr pos:start="121:20" pos:end="121:22"><name pos:start="121:20" pos:end="121:22">idx</name></expr></argument>, <argument pos:start="121:25" pos:end="121:36"><expr pos:start="121:25" pos:end="121:36"><name pos:start="121:25" pos:end="121:36"><name pos:start="121:25" pos:end="121:27">cpu</name><operator pos:start="121:28" pos:end="121:29">-&gt;</operator><name pos:start="121:30" pos:end="121:36">apic_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="129:5" pos:end="133:7">/* if 'address' properties socket-id/core-id/thread-id are not set, set them

     * so that machine_query_hotpluggable_cpus would show correct values

     */</comment>

    <comment type="block" pos:start="135:5" pos:end="139:79">/* TODO: move socket_id/core_id/thread_id checks into x86_cpu_realizefn()

     * once -smp refactoring is complete and there will be CPU private

     * CPUState::nr_cores and CPUState::nr_threads fields instead of globals */</comment>

    <expr_stmt pos:start="141:5" pos:end="141:74"><expr pos:start="141:5" pos:end="141:73"><call pos:start="141:5" pos:end="141:73"><name pos:start="141:5" pos:end="141:28">x86_topo_ids_from_apicid</name><argument_list pos:start="141:29" pos:end="141:73">(<argument pos:start="141:30" pos:end="141:41"><expr pos:start="141:30" pos:end="141:41"><name pos:start="141:30" pos:end="141:41"><name pos:start="141:30" pos:end="141:32">cpu</name><operator pos:start="141:33" pos:end="141:34">-&gt;</operator><name pos:start="141:35" pos:end="141:41">apic_id</name></name></expr></argument>, <argument pos:start="141:44" pos:end="141:52"><expr pos:start="141:44" pos:end="141:52"><name pos:start="141:44" pos:end="141:52">smp_cores</name></expr></argument>, <argument pos:start="141:55" pos:end="141:65"><expr pos:start="141:55" pos:end="141:65"><name pos:start="141:55" pos:end="141:65">smp_threads</name></expr></argument>, <argument pos:start="141:68" pos:end="141:72"><expr pos:start="141:68" pos:end="141:72"><operator pos:start="141:68" pos:end="141:68">&amp;</operator><name pos:start="141:69" pos:end="141:72">topo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="151:5"><if pos:start="143:5" pos:end="151:5">if <condition pos:start="143:8" pos:end="143:62">(<expr pos:start="143:9" pos:end="143:61"><name pos:start="143:9" pos:end="143:22"><name pos:start="143:9" pos:end="143:11">cpu</name><operator pos:start="143:12" pos:end="143:13">-&gt;</operator><name pos:start="143:14" pos:end="143:22">socket_id</name></name> <operator pos:start="143:24" pos:end="143:25">!=</operator> <operator pos:start="143:27" pos:end="143:27">-</operator><literal type="number" pos:start="143:28" pos:end="143:28">1</literal> <operator pos:start="143:30" pos:end="143:31">&amp;&amp;</operator> <name pos:start="143:33" pos:end="143:46"><name pos:start="143:33" pos:end="143:35">cpu</name><operator pos:start="143:36" pos:end="143:37">-&gt;</operator><name pos:start="143:38" pos:end="143:46">socket_id</name></name> <operator pos:start="143:48" pos:end="143:49">!=</operator> <name pos:start="143:51" pos:end="143:61"><name pos:start="143:51" pos:end="143:54">topo</name><operator pos:start="143:55" pos:end="143:55">.</operator><name pos:start="143:56" pos:end="143:61">pkg_id</name></name></expr>)</condition> <block pos:start="143:64" pos:end="151:5">{<block_content pos:start="145:9" pos:end="149:15">

        <expr_stmt pos:start="145:9" pos:end="147:80"><expr pos:start="145:9" pos:end="147:79"><call pos:start="145:9" pos:end="147:79"><name pos:start="145:9" pos:end="145:18">error_setg</name><argument_list pos:start="145:19" pos:end="147:79">(<argument pos:start="145:20" pos:end="145:23"><expr pos:start="145:20" pos:end="145:23"><name pos:start="145:20" pos:end="145:23">errp</name></expr></argument>, <argument pos:start="145:26" pos:end="147:35"><expr pos:start="145:26" pos:end="147:35"><literal type="string" pos:start="145:26" pos:end="145:76">"property socket-id: %u doesn't match set apic-id:"</literal>

            <literal type="string" pos:start="147:13" pos:end="147:35">" 0x%x (socket-id: %u)"</literal></expr></argument>, <argument pos:start="147:38" pos:end="147:51"><expr pos:start="147:38" pos:end="147:51"><name pos:start="147:38" pos:end="147:51"><name pos:start="147:38" pos:end="147:40">cpu</name><operator pos:start="147:41" pos:end="147:42">-&gt;</operator><name pos:start="147:43" pos:end="147:51">socket_id</name></name></expr></argument>, <argument pos:start="147:54" pos:end="147:65"><expr pos:start="147:54" pos:end="147:65"><name pos:start="147:54" pos:end="147:65"><name pos:start="147:54" pos:end="147:56">cpu</name><operator pos:start="147:57" pos:end="147:58">-&gt;</operator><name pos:start="147:59" pos:end="147:65">apic_id</name></name></expr></argument>, <argument pos:start="147:68" pos:end="147:78"><expr pos:start="147:68" pos:end="147:78"><name pos:start="147:68" pos:end="147:78"><name pos:start="147:68" pos:end="147:71">topo</name><operator pos:start="147:72" pos:end="147:72">.</operator><name pos:start="147:73" pos:end="147:78">pkg_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="149:9" pos:end="149:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:33"><expr pos:start="153:5" pos:end="153:32"><name pos:start="153:5" pos:end="153:18"><name pos:start="153:5" pos:end="153:7">cpu</name><operator pos:start="153:8" pos:end="153:9">-&gt;</operator><name pos:start="153:10" pos:end="153:18">socket_id</name></name> <operator pos:start="153:20" pos:end="153:20">=</operator> <name pos:start="153:22" pos:end="153:32"><name pos:start="153:22" pos:end="153:25">topo</name><operator pos:start="153:26" pos:end="153:26">.</operator><name pos:start="153:27" pos:end="153:32">pkg_id</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="157:5" pos:end="165:5"><if pos:start="157:5" pos:end="165:5">if <condition pos:start="157:8" pos:end="157:59">(<expr pos:start="157:9" pos:end="157:58"><name pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:11">cpu</name><operator pos:start="157:12" pos:end="157:13">-&gt;</operator><name pos:start="157:14" pos:end="157:20">core_id</name></name> <operator pos:start="157:22" pos:end="157:23">!=</operator> <operator pos:start="157:25" pos:end="157:25">-</operator><literal type="number" pos:start="157:26" pos:end="157:26">1</literal> <operator pos:start="157:28" pos:end="157:29">&amp;&amp;</operator> <name pos:start="157:31" pos:end="157:42"><name pos:start="157:31" pos:end="157:33">cpu</name><operator pos:start="157:34" pos:end="157:35">-&gt;</operator><name pos:start="157:36" pos:end="157:42">core_id</name></name> <operator pos:start="157:44" pos:end="157:45">!=</operator> <name pos:start="157:47" pos:end="157:58"><name pos:start="157:47" pos:end="157:50">topo</name><operator pos:start="157:51" pos:end="157:51">.</operator><name pos:start="157:52" pos:end="157:58">core_id</name></name></expr>)</condition> <block pos:start="157:61" pos:end="165:5">{<block_content pos:start="159:9" pos:end="163:15">

        <expr_stmt pos:start="159:9" pos:end="161:77"><expr pos:start="159:9" pos:end="161:76"><call pos:start="159:9" pos:end="161:76"><name pos:start="159:9" pos:end="159:18">error_setg</name><argument_list pos:start="159:19" pos:end="161:76">(<argument pos:start="159:20" pos:end="159:23"><expr pos:start="159:20" pos:end="159:23"><name pos:start="159:20" pos:end="159:23">errp</name></expr></argument>, <argument pos:start="159:26" pos:end="161:33"><expr pos:start="159:26" pos:end="161:33"><literal type="string" pos:start="159:26" pos:end="159:74">"property core-id: %u doesn't match set apic-id:"</literal>

            <literal type="string" pos:start="161:13" pos:end="161:33">" 0x%x (core-id: %u)"</literal></expr></argument>, <argument pos:start="161:36" pos:end="161:47"><expr pos:start="161:36" pos:end="161:47"><name pos:start="161:36" pos:end="161:47"><name pos:start="161:36" pos:end="161:38">cpu</name><operator pos:start="161:39" pos:end="161:40">-&gt;</operator><name pos:start="161:41" pos:end="161:47">core_id</name></name></expr></argument>, <argument pos:start="161:50" pos:end="161:61"><expr pos:start="161:50" pos:end="161:61"><name pos:start="161:50" pos:end="161:61"><name pos:start="161:50" pos:end="161:52">cpu</name><operator pos:start="161:53" pos:end="161:54">-&gt;</operator><name pos:start="161:55" pos:end="161:61">apic_id</name></name></expr></argument>, <argument pos:start="161:64" pos:end="161:75"><expr pos:start="161:64" pos:end="161:75"><name pos:start="161:64" pos:end="161:75"><name pos:start="161:64" pos:end="161:67">topo</name><operator pos:start="161:68" pos:end="161:68">.</operator><name pos:start="161:69" pos:end="161:75">core_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="163:9" pos:end="163:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:32"><expr pos:start="167:5" pos:end="167:31"><name pos:start="167:5" pos:end="167:16"><name pos:start="167:5" pos:end="167:7">cpu</name><operator pos:start="167:8" pos:end="167:9">-&gt;</operator><name pos:start="167:10" pos:end="167:16">core_id</name></name> <operator pos:start="167:18" pos:end="167:18">=</operator> <name pos:start="167:20" pos:end="167:31"><name pos:start="167:20" pos:end="167:23">topo</name><operator pos:start="167:24" pos:end="167:24">.</operator><name pos:start="167:25" pos:end="167:31">core_id</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="171:5" pos:end="179:5"><if pos:start="171:5" pos:end="179:5">if <condition pos:start="171:8" pos:end="171:62">(<expr pos:start="171:9" pos:end="171:61"><name pos:start="171:9" pos:end="171:22"><name pos:start="171:9" pos:end="171:11">cpu</name><operator pos:start="171:12" pos:end="171:13">-&gt;</operator><name pos:start="171:14" pos:end="171:22">thread_id</name></name> <operator pos:start="171:24" pos:end="171:25">!=</operator> <operator pos:start="171:27" pos:end="171:27">-</operator><literal type="number" pos:start="171:28" pos:end="171:28">1</literal> <operator pos:start="171:30" pos:end="171:31">&amp;&amp;</operator> <name pos:start="171:33" pos:end="171:46"><name pos:start="171:33" pos:end="171:35">cpu</name><operator pos:start="171:36" pos:end="171:37">-&gt;</operator><name pos:start="171:38" pos:end="171:46">thread_id</name></name> <operator pos:start="171:48" pos:end="171:49">!=</operator> <name pos:start="171:51" pos:end="171:61"><name pos:start="171:51" pos:end="171:54">topo</name><operator pos:start="171:55" pos:end="171:55">.</operator><name pos:start="171:56" pos:end="171:61">smt_id</name></name></expr>)</condition> <block pos:start="171:64" pos:end="179:5">{<block_content pos:start="173:9" pos:end="177:15">

        <expr_stmt pos:start="173:9" pos:end="175:80"><expr pos:start="173:9" pos:end="175:79"><call pos:start="173:9" pos:end="175:79"><name pos:start="173:9" pos:end="173:18">error_setg</name><argument_list pos:start="173:19" pos:end="175:79">(<argument pos:start="173:20" pos:end="173:23"><expr pos:start="173:20" pos:end="173:23"><name pos:start="173:20" pos:end="173:23">errp</name></expr></argument>, <argument pos:start="173:26" pos:end="175:35"><expr pos:start="173:26" pos:end="175:35"><literal type="string" pos:start="173:26" pos:end="173:76">"property thread-id: %u doesn't match set apic-id:"</literal>

            <literal type="string" pos:start="175:13" pos:end="175:35">" 0x%x (thread-id: %u)"</literal></expr></argument>, <argument pos:start="175:38" pos:end="175:51"><expr pos:start="175:38" pos:end="175:51"><name pos:start="175:38" pos:end="175:51"><name pos:start="175:38" pos:end="175:40">cpu</name><operator pos:start="175:41" pos:end="175:42">-&gt;</operator><name pos:start="175:43" pos:end="175:51">thread_id</name></name></expr></argument>, <argument pos:start="175:54" pos:end="175:65"><expr pos:start="175:54" pos:end="175:65"><name pos:start="175:54" pos:end="175:65"><name pos:start="175:54" pos:end="175:56">cpu</name><operator pos:start="175:57" pos:end="175:58">-&gt;</operator><name pos:start="175:59" pos:end="175:65">apic_id</name></name></expr></argument>, <argument pos:start="175:68" pos:end="175:78"><expr pos:start="175:68" pos:end="175:78"><name pos:start="175:68" pos:end="175:78"><name pos:start="175:68" pos:end="175:71">topo</name><operator pos:start="175:72" pos:end="175:72">.</operator><name pos:start="175:73" pos:end="175:78">smt_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="177:9" pos:end="177:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:33"><expr pos:start="181:5" pos:end="181:32"><name pos:start="181:5" pos:end="181:18"><name pos:start="181:5" pos:end="181:7">cpu</name><operator pos:start="181:8" pos:end="181:9">-&gt;</operator><name pos:start="181:10" pos:end="181:18">thread_id</name></name> <operator pos:start="181:20" pos:end="181:20">=</operator> <name pos:start="181:22" pos:end="181:32"><name pos:start="181:22" pos:end="181:25">topo</name><operator pos:start="181:26" pos:end="181:26">.</operator><name pos:start="181:27" pos:end="181:32">smt_id</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:18"><expr pos:start="185:5" pos:end="185:17"><name pos:start="185:5" pos:end="185:6">cs</name> <operator pos:start="185:8" pos:end="185:8">=</operator> <call pos:start="185:10" pos:end="185:17"><name pos:start="185:10" pos:end="185:12">CPU</name><argument_list pos:start="185:13" pos:end="185:17">(<argument pos:start="185:14" pos:end="185:16"><expr pos:start="185:14" pos:end="185:16"><name pos:start="185:14" pos:end="185:16">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:24"><expr pos:start="187:5" pos:end="187:23"><name pos:start="187:5" pos:end="187:17"><name pos:start="187:5" pos:end="187:6">cs</name><operator pos:start="187:7" pos:end="187:8">-&gt;</operator><name pos:start="187:9" pos:end="187:17">cpu_index</name></name> <operator pos:start="187:19" pos:end="187:19">=</operator> <name pos:start="187:21" pos:end="187:23">idx</name></expr>;</expr_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:38"><expr pos:start="191:5" pos:end="191:37"><name pos:start="191:5" pos:end="191:11">node_id</name> <operator pos:start="191:13" pos:end="191:13">=</operator> <name pos:start="191:15" pos:end="191:37"><name pos:start="191:15" pos:end="191:22">cpu_slot</name><operator pos:start="191:23" pos:end="191:24">-&gt;</operator><name pos:start="191:25" pos:end="191:29">props</name><operator pos:start="191:30" pos:end="191:30">.</operator><name pos:start="191:31" pos:end="191:37">node_id</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="203:5"><if pos:start="193:5" pos:end="203:5">if <condition pos:start="193:8" pos:end="193:37">(<expr pos:start="193:9" pos:end="193:36"><operator pos:start="193:9" pos:end="193:9">!</operator><name pos:start="193:10" pos:end="193:36"><name pos:start="193:10" pos:end="193:17">cpu_slot</name><operator pos:start="193:18" pos:end="193:19">-&gt;</operator><name pos:start="193:20" pos:end="193:24">props</name><operator pos:start="193:25" pos:end="193:25">.</operator><name pos:start="193:26" pos:end="193:36">has_node_id</name></name></expr>)</condition> <block pos:start="193:39" pos:end="203:5">{<block_content pos:start="201:9" pos:end="201:20">

        <comment type="block" pos:start="195:9" pos:end="199:61">/* by default CPUState::numa_node was 0 if it's not set via CLI

         * keep it this way for now but in future we probably should

         * refuse to start up with incomplete numa mapping */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:20"><expr pos:start="201:9" pos:end="201:19"><name pos:start="201:9" pos:end="201:15">node_id</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <literal type="number" pos:start="201:19" pos:end="201:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="205:5" pos:end="219:5"><if pos:start="205:5" pos:end="209:5">if <condition pos:start="205:8" pos:end="205:48">(<expr pos:start="205:9" pos:end="205:47"><name pos:start="205:9" pos:end="205:21"><name pos:start="205:9" pos:end="205:10">cs</name><operator pos:start="205:11" pos:end="205:12">-&gt;</operator><name pos:start="205:13" pos:end="205:21">numa_node</name></name> <operator pos:start="205:23" pos:end="205:24">==</operator> <name pos:start="205:26" pos:end="205:47">CPU_UNSET_NUMA_NODE_ID</name></expr>)</condition> <block pos:start="205:50" pos:end="209:5">{<block_content pos:start="207:9" pos:end="207:32">

        <expr_stmt pos:start="207:9" pos:end="207:32"><expr pos:start="207:9" pos:end="207:31"><name pos:start="207:9" pos:end="207:21"><name pos:start="207:9" pos:end="207:10">cs</name><operator pos:start="207:11" pos:end="207:12">-&gt;</operator><name pos:start="207:13" pos:end="207:21">numa_node</name></name> <operator pos:start="207:23" pos:end="207:23">=</operator> <name pos:start="207:25" pos:end="207:31">node_id</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="209:7" pos:end="219:5">else if <condition pos:start="209:15" pos:end="209:40">(<expr pos:start="209:16" pos:end="209:39"><name pos:start="209:16" pos:end="209:28"><name pos:start="209:16" pos:end="209:17">cs</name><operator pos:start="209:18" pos:end="209:19">-&gt;</operator><name pos:start="209:20" pos:end="209:28">numa_node</name></name> <operator pos:start="209:30" pos:end="209:31">!=</operator> <name pos:start="209:33" pos:end="209:39">node_id</name></expr>)</condition> <block pos:start="209:42" pos:end="219:5">{<block_content pos:start="211:13" pos:end="217:19">

            <expr_stmt pos:start="211:13" pos:end="215:46"><expr pos:start="211:13" pos:end="215:45"><call pos:start="211:13" pos:end="215:45"><name pos:start="211:13" pos:end="211:22">error_setg</name><argument_list pos:start="211:23" pos:end="215:45">(<argument pos:start="211:24" pos:end="211:27"><expr pos:start="211:24" pos:end="211:27"><name pos:start="211:24" pos:end="211:27">errp</name></expr></argument>, <argument pos:start="211:30" pos:end="213:52"><expr pos:start="211:30" pos:end="213:52"><literal type="string" pos:start="211:30" pos:end="211:72">"node-id %d must match numa node specified"</literal>

                <literal type="string" pos:start="213:17" pos:end="213:52">"with -numa option for cpu-index %d"</literal></expr></argument>,

                <argument pos:start="215:17" pos:end="215:29"><expr pos:start="215:17" pos:end="215:29"><name pos:start="215:17" pos:end="215:29"><name pos:start="215:17" pos:end="215:18">cs</name><operator pos:start="215:19" pos:end="215:20">-&gt;</operator><name pos:start="215:21" pos:end="215:29">numa_node</name></name></expr></argument>, <argument pos:start="215:32" pos:end="215:44"><expr pos:start="215:32" pos:end="215:44"><name pos:start="215:32" pos:end="215:44"><name pos:start="215:32" pos:end="215:33">cs</name><operator pos:start="215:34" pos:end="215:35">-&gt;</operator><name pos:start="215:36" pos:end="215:44">cpu_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="217:13" pos:end="217:19">return;</return>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
