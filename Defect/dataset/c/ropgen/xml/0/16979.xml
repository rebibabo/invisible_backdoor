<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16979.c" pos:tabs="8"><function pos:start="1:1" pos:end="285:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">dxva2_create_decoder</name><parameter_list pos:start="1:32" pos:end="1:50">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:48"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="285:1">{<block_content pos:start="5:5" pos:end="283:27">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:15">InputStream</name>  <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">ist</name> <init pos:start="5:23" pos:end="5:33">= <expr pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:25">s</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:85"><decl pos:start="7:5" pos:end="7:84"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">loglevel</name> <init pos:start="7:18" pos:end="7:84">= <expr pos:start="7:20" pos:end="7:84"><ternary pos:start="7:20" pos:end="7:84"><condition pos:start="7:20" pos:end="7:54"><expr pos:start="7:20" pos:end="7:52"><operator pos:start="7:20" pos:end="7:20">(</operator><name pos:start="7:21" pos:end="7:35"><name pos:start="7:21" pos:end="7:23">ist</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:35">hwaccel_id</name></name> <operator pos:start="7:37" pos:end="7:38">==</operator> <name pos:start="7:40" pos:end="7:51">HWACCEL_AUTO</name><operator pos:start="7:52" pos:end="7:52">)</operator></expr> ?</condition><then pos:start="7:56" pos:end="7:69"> <expr pos:start="7:56" pos:end="7:69"><name pos:start="7:56" pos:end="7:69">AV_LOG_VERBOSE</name></expr> </then><else pos:start="7:71" pos:end="7:84">: <expr pos:start="7:73" pos:end="7:84"><name pos:start="7:73" pos:end="7:84">AV_LOG_ERROR</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">DXVA2Context</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">ctx</name> <init pos:start="9:23" pos:end="9:40">= <expr pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:27">ist</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:40">hwaccel_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:55"><decl pos:start="11:5" pos:end="11:54"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:23">dxva_context</name></name> <modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:33">dxva_ctx</name> <init pos:start="11:35" pos:end="11:54">= <expr pos:start="11:37" pos:end="11:54"><name pos:start="11:37" pos:end="11:54"><name pos:start="11:37" pos:end="11:37">s</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:54">hwaccel_context</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">GUID</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:19">guid_list</name> <init pos:start="13:21" pos:end="13:26">= <expr pos:start="13:23" pos:end="13:26"><name pos:start="13:23" pos:end="13:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">unsigned</name></type> <name pos:start="15:14" pos:end="15:23">guid_count</name> <init pos:start="15:25" pos:end="15:27">= <expr pos:start="15:27" pos:end="15:27"><literal type="number" pos:start="15:27" pos:end="15:27">0</literal></expr></init></decl>, <decl pos:start="15:30" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:30" pos:end="15:30">i</name></decl>, <decl pos:start="15:33" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:33" pos:end="15:33">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">GUID</name></type> <name pos:start="17:10" pos:end="17:20">device_guid</name> <init pos:start="17:22" pos:end="17:32">= <expr pos:start="17:24" pos:end="17:32"><name pos:start="17:24" pos:end="17:32">GUID_NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:127"><decl pos:start="19:5" pos:end="19:126"><type pos:start="19:5" pos:end="19:19"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:19">D3DFORMAT</name></type> <name pos:start="19:21" pos:end="19:34">surface_format</name> <init pos:start="19:36" pos:end="19:126">= <expr pos:start="19:38" pos:end="19:126"><ternary pos:start="19:38" pos:end="19:126"><condition pos:start="19:38" pos:end="19:78"><expr pos:start="19:38" pos:end="19:76"><operator pos:start="19:38" pos:end="19:38">(</operator><name pos:start="19:39" pos:end="19:51"><name pos:start="19:39" pos:end="19:39">s</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:51">sw_pix_fmt</name></name> <operator pos:start="19:53" pos:end="19:54">==</operator> <name pos:start="19:56" pos:end="19:75">AV_PIX_FMT_YUV420P10</name><operator pos:start="19:76" pos:end="19:76">)</operator></expr> ?</condition><then pos:start="19:80" pos:end="19:101"> <expr pos:start="19:80" pos:end="19:101"><call pos:start="19:80" pos:end="19:101"><name pos:start="19:80" pos:end="19:84">MKTAG</name><argument_list pos:start="19:85" pos:end="19:101">(<argument pos:start="19:86" pos:end="19:88"><expr pos:start="19:86" pos:end="19:88"><literal type="char" pos:start="19:86" pos:end="19:88">'P'</literal></expr></argument>,<argument pos:start="19:90" pos:end="19:92"><expr pos:start="19:90" pos:end="19:92"><literal type="char" pos:start="19:90" pos:end="19:92">'0'</literal></expr></argument>,<argument pos:start="19:94" pos:end="19:96"><expr pos:start="19:94" pos:end="19:96"><literal type="char" pos:start="19:94" pos:end="19:96">'1'</literal></expr></argument>,<argument pos:start="19:98" pos:end="19:100"><expr pos:start="19:98" pos:end="19:100"><literal type="char" pos:start="19:98" pos:end="19:100">'0'</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="19:103" pos:end="19:126">: <expr pos:start="19:105" pos:end="19:126"><call pos:start="19:105" pos:end="19:126"><name pos:start="19:105" pos:end="19:109">MKTAG</name><argument_list pos:start="19:110" pos:end="19:126">(<argument pos:start="19:111" pos:end="19:113"><expr pos:start="19:111" pos:end="19:113"><literal type="char" pos:start="19:111" pos:end="19:113">'N'</literal></expr></argument>,<argument pos:start="19:115" pos:end="19:117"><expr pos:start="19:115" pos:end="19:117"><literal type="char" pos:start="19:115" pos:end="19:117">'V'</literal></expr></argument>,<argument pos:start="19:119" pos:end="19:121"><expr pos:start="19:119" pos:end="19:121"><literal type="char" pos:start="19:119" pos:end="19:121">'1'</literal></expr></argument>,<argument pos:start="19:123" pos:end="19:125"><expr pos:start="19:123" pos:end="19:125"><literal type="char" pos:start="19:123" pos:end="19:125">'2'</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:13">D3DFORMAT</name></type> <name pos:start="21:15" pos:end="21:27">target_format</name> <init pos:start="21:29" pos:end="21:31">= <expr pos:start="21:31" pos:end="21:31"><literal type="number" pos:start="21:31" pos:end="21:31">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:33"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:19">DXVA2_VideoDesc</name></type> <name pos:start="23:21" pos:end="23:24">desc</name> <init pos:start="23:26" pos:end="23:32">= <expr pos:start="23:28" pos:end="23:32"><block pos:start="23:28" pos:end="23:32">{ <expr pos:start="23:30" pos:end="23:30"><literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:37"><decl pos:start="25:5" pos:end="25:36"><type pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:29">DXVA2_ConfigPictureDecode</name></type> <name pos:start="25:31" pos:end="25:36">config</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:15"><decl pos:start="27:5" pos:end="27:14"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">HRESULT</name></type> <name pos:start="27:13" pos:end="27:14">hr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:40"><decl pos:start="29:5" pos:end="29:25"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:25">surface_alignment</name></decl>, <decl pos:start="29:28" pos:end="29:39"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:28" pos:end="29:39">num_surfaces</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:12"><decl pos:start="31:5" pos:end="31:11"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="35:5" pos:end="35:39"><decl pos:start="35:5" pos:end="35:38"><type pos:start="35:5" pos:end="35:26"><name pos:start="35:5" pos:end="35:24">AVDXVA2FramesContext</name> <modifier pos:start="35:26" pos:end="35:26">*</modifier></type><name pos:start="35:27" pos:end="35:38">frames_hwctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:34"><decl pos:start="37:5" pos:end="37:33"><type pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:21">AVHWFramesContext</name> <modifier pos:start="37:23" pos:end="37:23">*</modifier></type><name pos:start="37:24" pos:end="37:33">frames_ctx</name></decl>;</decl_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:106"><expr pos:start="41:5" pos:end="41:105"><name pos:start="41:5" pos:end="41:6">hr</name> <operator pos:start="41:8" pos:end="41:8">=</operator> <call pos:start="41:10" pos:end="41:105"><name pos:start="41:10" pos:end="41:58">IDirectXVideoDecoderService_GetDecoderDeviceGuids</name><argument_list pos:start="41:59" pos:end="41:105">(<argument pos:start="41:60" pos:end="41:79"><expr pos:start="41:60" pos:end="41:79"><name pos:start="41:60" pos:end="41:79"><name pos:start="41:60" pos:end="41:62">ctx</name><operator pos:start="41:63" pos:end="41:64">-&gt;</operator><name pos:start="41:65" pos:end="41:79">decoder_service</name></name></expr></argument>, <argument pos:start="41:82" pos:end="41:92"><expr pos:start="41:82" pos:end="41:92"><operator pos:start="41:82" pos:end="41:82">&amp;</operator><name pos:start="41:83" pos:end="41:92">guid_count</name></expr></argument>, <argument pos:start="41:95" pos:end="41:104"><expr pos:start="41:95" pos:end="41:104"><operator pos:start="41:95" pos:end="41:95">&amp;</operator><name pos:start="41:96" pos:end="41:104">guid_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:19">(<expr pos:start="43:9" pos:end="43:18"><call pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:14">FAILED</name><argument_list pos:start="43:15" pos:end="43:18">(<argument pos:start="43:16" pos:end="43:17"><expr pos:start="43:16" pos:end="43:17"><name pos:start="43:16" pos:end="43:17">hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:21" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:18">

        <expr_stmt pos:start="45:9" pos:end="45:76"><expr pos:start="45:9" pos:end="45:75"><call pos:start="45:9" pos:end="45:75"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:75">(<argument pos:start="45:16" pos:end="45:19"><expr pos:start="45:16" pos:end="45:19"><name pos:start="45:16" pos:end="45:19">NULL</name></expr></argument>, <argument pos:start="45:22" pos:end="45:29"><expr pos:start="45:22" pos:end="45:29"><name pos:start="45:22" pos:end="45:29">loglevel</name></expr></argument>, <argument pos:start="45:32" pos:end="45:74"><expr pos:start="45:32" pos:end="45:74"><literal type="string" pos:start="45:32" pos:end="45:74">"Failed to retrieve decoder device GUIDs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="47:9" pos:end="47:18">goto <name pos:start="47:14" pos:end="47:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="53:5" pos:end="113:5">for <control pos:start="53:9" pos:end="53:41">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">i</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:36"><expr pos:start="53:17" pos:end="53:35"><name pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:27">dxva2_modes</name><index pos:start="53:28" pos:end="53:30">[<expr pos:start="53:29" pos:end="53:29"><name pos:start="53:29" pos:end="53:29">i</name></expr>]</index></name><operator pos:start="53:31" pos:end="53:31">.</operator><name pos:start="53:32" pos:end="53:35">guid</name></expr>;</condition> <incr pos:start="53:38" pos:end="53:40"><expr pos:start="53:38" pos:end="53:40"><name pos:start="53:38" pos:end="53:38">i</name><operator pos:start="53:39" pos:end="53:40">++</operator></expr></incr>)</control> <block pos:start="53:43" pos:end="113:5">{<block_content pos:start="55:9" pos:end="111:9">

        <decl_stmt pos:start="55:9" pos:end="55:38"><decl pos:start="55:9" pos:end="55:37"><type pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:17">D3DFORMAT</name> <modifier pos:start="55:19" pos:end="55:19">*</modifier></type><name pos:start="55:20" pos:end="55:30">target_list</name> <init pos:start="55:32" pos:end="55:37">= <expr pos:start="55:34" pos:end="55:37"><name pos:start="55:34" pos:end="55:37">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:34"><decl pos:start="57:9" pos:end="57:33"><type pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:16">unsigned</name></type> <name pos:start="57:18" pos:end="57:29">target_count</name> <init pos:start="57:31" pos:end="57:33">= <expr pos:start="57:33" pos:end="57:33"><literal type="number" pos:start="57:33" pos:end="57:33">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:49"><decl pos:start="59:9" pos:end="59:48"><type pos:start="59:9" pos:end="59:26"><specifier pos:start="59:9" pos:end="59:13">const</specifier> <name pos:start="59:15" pos:end="59:24">dxva2_mode</name> <modifier pos:start="59:26" pos:end="59:26">*</modifier></type><name pos:start="59:27" pos:end="59:30">mode</name> <init pos:start="59:32" pos:end="59:48">= <expr pos:start="59:34" pos:end="59:48"><operator pos:start="59:34" pos:end="59:34">&amp;</operator><name pos:start="59:35" pos:end="59:48"><name pos:start="59:35" pos:end="59:45">dxva2_modes</name><index pos:start="59:46" pos:end="59:48">[<expr pos:start="59:47" pos:end="59:47"><name pos:start="59:47" pos:end="59:47">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="61:9" pos:end="63:21"><if pos:start="61:9" pos:end="63:21">if <condition pos:start="61:12" pos:end="61:39">(<expr pos:start="61:13" pos:end="61:38"><name pos:start="61:13" pos:end="61:23"><name pos:start="61:13" pos:end="61:16">mode</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:23">codec</name></name> <operator pos:start="61:25" pos:end="61:26">!=</operator> <name pos:start="61:28" pos:end="61:38"><name pos:start="61:28" pos:end="61:28">s</name><operator pos:start="61:29" pos:end="61:30">-&gt;</operator><name pos:start="61:31" pos:end="61:38">codec_id</name></name></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="63:21"><block_content pos:start="63:13" pos:end="63:21">

            <continue pos:start="63:13" pos:end="63:21">continue;</continue></block_content></block></if></if_stmt>



        <for pos:start="67:9" pos:end="73:9">for <control pos:start="67:13" pos:end="67:40">(<init pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:18"><name pos:start="67:14" pos:end="67:14">j</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>;</init> <condition pos:start="67:21" pos:end="67:35"><expr pos:start="67:21" pos:end="67:34"><name pos:start="67:21" pos:end="67:21">j</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <name pos:start="67:25" pos:end="67:34">guid_count</name></expr>;</condition> <incr pos:start="67:37" pos:end="67:39"><expr pos:start="67:37" pos:end="67:39"><name pos:start="67:37" pos:end="67:37">j</name><operator pos:start="67:38" pos:end="67:39">++</operator></expr></incr>)</control> <block pos:start="67:42" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:22">

            <if_stmt pos:start="69:13" pos:end="71:22"><if pos:start="69:13" pos:end="71:22">if <condition pos:start="69:16" pos:end="69:55">(<expr pos:start="69:17" pos:end="69:54"><call pos:start="69:17" pos:end="69:54"><name pos:start="69:17" pos:end="69:27">IsEqualGUID</name><argument_list pos:start="69:28" pos:end="69:54">(<argument pos:start="69:29" pos:end="69:38"><expr pos:start="69:29" pos:end="69:38"><name pos:start="69:29" pos:end="69:38"><name pos:start="69:29" pos:end="69:32">mode</name><operator pos:start="69:33" pos:end="69:34">-&gt;</operator><name pos:start="69:35" pos:end="69:38">guid</name></name></expr></argument>, <argument pos:start="69:41" pos:end="69:53"><expr pos:start="69:41" pos:end="69:53"><operator pos:start="69:41" pos:end="69:41">&amp;</operator><name pos:start="69:42" pos:end="69:53"><name pos:start="69:42" pos:end="69:50">guid_list</name><index pos:start="69:51" pos:end="69:53">[<expr pos:start="69:52" pos:end="69:52"><name pos:start="69:52" pos:end="69:52">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:22"><block_content pos:start="71:17" pos:end="71:22">

                <break pos:start="71:17" pos:end="71:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="75:9" pos:end="77:21"><if pos:start="75:9" pos:end="77:21">if <condition pos:start="75:12" pos:end="75:28">(<expr pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:13">j</name> <operator pos:start="75:15" pos:end="75:16">==</operator> <name pos:start="75:18" pos:end="75:27">guid_count</name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:21"><block_content pos:start="77:13" pos:end="77:21">

            <continue pos:start="77:13" pos:end="77:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:128"><expr pos:start="81:9" pos:end="81:127"><name pos:start="81:9" pos:end="81:10">hr</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <call pos:start="81:14" pos:end="81:127"><name pos:start="81:14" pos:end="81:64">IDirectXVideoDecoderService_GetDecoderRenderTargets</name><argument_list pos:start="81:65" pos:end="81:127">(<argument pos:start="81:66" pos:end="81:85"><expr pos:start="81:66" pos:end="81:85"><name pos:start="81:66" pos:end="81:85"><name pos:start="81:66" pos:end="81:68">ctx</name><operator pos:start="81:69" pos:end="81:70">-&gt;</operator><name pos:start="81:71" pos:end="81:85">decoder_service</name></name></expr></argument>, <argument pos:start="81:88" pos:end="81:97"><expr pos:start="81:88" pos:end="81:97"><name pos:start="81:88" pos:end="81:97"><name pos:start="81:88" pos:end="81:91">mode</name><operator pos:start="81:92" pos:end="81:93">-&gt;</operator><name pos:start="81:94" pos:end="81:97">guid</name></name></expr></argument>, <argument pos:start="81:100" pos:end="81:112"><expr pos:start="81:100" pos:end="81:112"><operator pos:start="81:100" pos:end="81:100">&amp;</operator><name pos:start="81:101" pos:end="81:112">target_count</name></expr></argument>, <argument pos:start="81:115" pos:end="81:126"><expr pos:start="81:115" pos:end="81:126"><operator pos:start="81:115" pos:end="81:115">&amp;</operator><name pos:start="81:116" pos:end="81:126">target_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:23">(<expr pos:start="83:13" pos:end="83:22"><call pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:18">FAILED</name><argument_list pos:start="83:19" pos:end="83:22">(<argument pos:start="83:20" pos:end="83:21"><expr pos:start="83:20" pos:end="83:21"><name pos:start="83:20" pos:end="83:21">hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:25" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:21">

            <continue pos:start="85:13" pos:end="85:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <for pos:start="89:9" pos:end="101:9">for <control pos:start="89:13" pos:end="89:42">(<init pos:start="89:14" pos:end="89:19"><expr pos:start="89:14" pos:end="89:18"><name pos:start="89:14" pos:end="89:14">j</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <literal type="number" pos:start="89:18" pos:end="89:18">0</literal></expr>;</init> <condition pos:start="89:21" pos:end="89:37"><expr pos:start="89:21" pos:end="89:36"><name pos:start="89:21" pos:end="89:21">j</name> <operator pos:start="89:23" pos:end="89:23">&lt;</operator> <name pos:start="89:25" pos:end="89:36">target_count</name></expr>;</condition> <incr pos:start="89:39" pos:end="89:41"><expr pos:start="89:39" pos:end="89:41"><name pos:start="89:39" pos:end="89:39">j</name><operator pos:start="89:40" pos:end="89:41">++</operator></expr></incr>)</control> <block pos:start="89:44" pos:end="101:9">{<block_content pos:start="91:13" pos:end="99:13">

            <decl_stmt pos:start="91:13" pos:end="91:52"><decl pos:start="91:13" pos:end="91:51"><type pos:start="91:13" pos:end="91:27"><specifier pos:start="91:13" pos:end="91:17">const</specifier> <name pos:start="91:19" pos:end="91:27">D3DFORMAT</name></type> <name pos:start="91:29" pos:end="91:34">format</name> <init pos:start="91:36" pos:end="91:51">= <expr pos:start="91:38" pos:end="91:51"><name pos:start="91:38" pos:end="91:51"><name pos:start="91:38" pos:end="91:48">target_list</name><index pos:start="91:49" pos:end="91:51">[<expr pos:start="91:50" pos:end="91:50"><name pos:start="91:50" pos:end="91:50">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="93:13" pos:end="99:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="93:41">(<expr pos:start="93:17" pos:end="93:40"><name pos:start="93:17" pos:end="93:22">format</name> <operator pos:start="93:24" pos:end="93:25">==</operator> <name pos:start="93:27" pos:end="93:40">surface_format</name></expr>)</condition> <block pos:start="93:43" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:22">

                <expr_stmt pos:start="95:17" pos:end="95:39"><expr pos:start="95:17" pos:end="95:38"><name pos:start="95:17" pos:end="95:29">target_format</name> <operator pos:start="95:31" pos:end="95:31">=</operator> <name pos:start="95:33" pos:end="95:38">format</name></expr>;</expr_stmt>

                <break pos:start="97:17" pos:end="97:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="103:9" pos:end="103:35"><expr pos:start="103:9" pos:end="103:34"><call pos:start="103:9" pos:end="103:34"><name pos:start="103:9" pos:end="103:21">CoTaskMemFree</name><argument_list pos:start="103:22" pos:end="103:34">(<argument pos:start="103:23" pos:end="103:33"><expr pos:start="103:23" pos:end="103:33"><name pos:start="103:23" pos:end="103:33">target_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:26">(<expr pos:start="105:13" pos:end="105:25"><name pos:start="105:13" pos:end="105:25">target_format</name></expr>)</condition> <block pos:start="105:28" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:18">

            <expr_stmt pos:start="107:13" pos:end="107:38"><expr pos:start="107:13" pos:end="107:37"><name pos:start="107:13" pos:end="107:23">device_guid</name> <operator pos:start="107:25" pos:end="107:25">=</operator> <operator pos:start="107:27" pos:end="107:27">*</operator><name pos:start="107:28" pos:end="107:37"><name pos:start="107:28" pos:end="107:31">mode</name><operator pos:start="107:32" pos:end="107:33">-&gt;</operator><name pos:start="107:34" pos:end="107:37">guid</name></name></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="115:5" pos:end="115:29"><expr pos:start="115:5" pos:end="115:28"><call pos:start="115:5" pos:end="115:28"><name pos:start="115:5" pos:end="115:17">CoTaskMemFree</name><argument_list pos:start="115:18" pos:end="115:28">(<argument pos:start="115:19" pos:end="115:27"><expr pos:start="115:19" pos:end="115:27"><name pos:start="115:19" pos:end="115:27">guid_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:46">(<expr pos:start="119:9" pos:end="119:45"><call pos:start="119:9" pos:end="119:45"><name pos:start="119:9" pos:end="119:19">IsEqualGUID</name><argument_list pos:start="119:20" pos:end="119:45">(<argument pos:start="119:21" pos:end="119:32"><expr pos:start="119:21" pos:end="119:32"><operator pos:start="119:21" pos:end="119:21">&amp;</operator><name pos:start="119:22" pos:end="119:32">device_guid</name></expr></argument>, <argument pos:start="119:35" pos:end="119:44"><expr pos:start="119:35" pos:end="119:44"><operator pos:start="119:35" pos:end="119:35">&amp;</operator><name pos:start="119:36" pos:end="119:44">GUID_NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:48" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:18">

        <expr_stmt pos:start="121:9" pos:end="121:70"><expr pos:start="121:9" pos:end="121:69"><call pos:start="121:9" pos:end="121:69"><name pos:start="121:9" pos:end="121:14">av_log</name><argument_list pos:start="121:15" pos:end="121:69">(<argument pos:start="121:16" pos:end="121:19"><expr pos:start="121:16" pos:end="121:19"><name pos:start="121:16" pos:end="121:19">NULL</name></expr></argument>, <argument pos:start="121:22" pos:end="121:29"><expr pos:start="121:22" pos:end="121:29"><name pos:start="121:22" pos:end="121:29">loglevel</name></expr></argument>, <argument pos:start="121:32" pos:end="121:68"><expr pos:start="121:32" pos:end="121:68"><literal type="string" pos:start="121:32" pos:end="121:68">"No decoder device for codec found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="123:9" pos:end="123:18">goto <name pos:start="123:14" pos:end="123:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:39"><expr pos:start="129:5" pos:end="129:38"><name pos:start="129:5" pos:end="129:20"><name pos:start="129:5" pos:end="129:8">desc</name><operator pos:start="129:9" pos:end="129:9">.</operator><name pos:start="129:10" pos:end="129:20">SampleWidth</name></name>  <operator pos:start="129:23" pos:end="129:23">=</operator> <name pos:start="129:25" pos:end="129:38"><name pos:start="129:25" pos:end="129:25">s</name><operator pos:start="129:26" pos:end="129:27">-&gt;</operator><name pos:start="129:28" pos:end="129:38">coded_width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:40"><expr pos:start="131:5" pos:end="131:39"><name pos:start="131:5" pos:end="131:21"><name pos:start="131:5" pos:end="131:8">desc</name><operator pos:start="131:9" pos:end="131:9">.</operator><name pos:start="131:10" pos:end="131:21">SampleHeight</name></name> <operator pos:start="131:23" pos:end="131:23">=</operator> <name pos:start="131:25" pos:end="131:39"><name pos:start="131:25" pos:end="131:25">s</name><operator pos:start="131:26" pos:end="131:27">-&gt;</operator><name pos:start="131:28" pos:end="131:39">coded_height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:38"><expr pos:start="133:5" pos:end="133:37"><name pos:start="133:5" pos:end="133:15"><name pos:start="133:5" pos:end="133:8">desc</name><operator pos:start="133:9" pos:end="133:9">.</operator><name pos:start="133:10" pos:end="133:15">Format</name></name>       <operator pos:start="133:23" pos:end="133:23">=</operator> <name pos:start="133:25" pos:end="133:37">target_format</name></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:75"><expr pos:start="137:5" pos:end="137:74"><name pos:start="137:5" pos:end="137:7">ret</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <call pos:start="137:11" pos:end="137:74"><name pos:start="137:11" pos:end="137:41">dxva2_get_decoder_configuration</name><argument_list pos:start="137:42" pos:end="137:74">(<argument pos:start="137:43" pos:end="137:43"><expr pos:start="137:43" pos:end="137:43"><name pos:start="137:43" pos:end="137:43">s</name></expr></argument>, <argument pos:start="137:46" pos:end="137:57"><expr pos:start="137:46" pos:end="137:57"><operator pos:start="137:46" pos:end="137:46">&amp;</operator><name pos:start="137:47" pos:end="137:57">device_guid</name></expr></argument>, <argument pos:start="137:60" pos:end="137:64"><expr pos:start="137:60" pos:end="137:64"><operator pos:start="137:60" pos:end="137:60">&amp;</operator><name pos:start="137:61" pos:end="137:64">desc</name></expr></argument>, <argument pos:start="137:67" pos:end="137:73"><expr pos:start="137:67" pos:end="137:73"><operator pos:start="137:67" pos:end="137:67">&amp;</operator><name pos:start="137:68" pos:end="137:73">config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="143:5"><if pos:start="139:5" pos:end="143:5">if <condition pos:start="139:8" pos:end="139:16">(<expr pos:start="139:9" pos:end="139:15"><name pos:start="139:9" pos:end="139:11">ret</name> <operator pos:start="139:13" pos:end="139:13">&lt;</operator> <literal type="number" pos:start="139:15" pos:end="139:15">0</literal></expr>)</condition> <block pos:start="139:18" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:18">

        <goto pos:start="141:9" pos:end="141:18">goto <name pos:start="141:14" pos:end="141:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="147:5" pos:end="149:65">/* decoding MPEG-2 requires additional alignment on some Intel GPUs,

       but it causes issues for H.264 on certain AMD GPUs..... */</comment>

    <if_stmt pos:start="151:5" pos:end="165:31"><if pos:start="151:5" pos:end="153:31">if <condition pos:start="151:8" pos:end="151:46">(<expr pos:start="151:9" pos:end="151:45"><name pos:start="151:9" pos:end="151:19"><name pos:start="151:9" pos:end="151:9">s</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:19">codec_id</name></name> <operator pos:start="151:21" pos:end="151:22">==</operator> <name pos:start="151:24" pos:end="151:45">AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:31"><block_content pos:start="153:9" pos:end="153:31">

        <expr_stmt pos:start="153:9" pos:end="153:31"><expr pos:start="153:9" pos:end="153:30"><name pos:start="153:9" pos:end="153:25">surface_alignment</name> <operator pos:start="153:27" pos:end="153:27">=</operator> <literal type="number" pos:start="153:29" pos:end="153:30">32</literal></expr>;</expr_stmt></block_content></block></if>

    <comment type="block" pos:start="155:5" pos:end="157:59">/* the HEVC DXVA2 spec asks for 128 pixel aligned surfaces to ensure

       all coding features have enough room to work with */</comment>

    <if type="elseif" pos:start="159:5" pos:end="161:32">else if  <condition pos:start="159:14" pos:end="159:46">(<expr pos:start="159:15" pos:end="159:45"><name pos:start="159:15" pos:end="159:25"><name pos:start="159:15" pos:end="159:15">s</name><operator pos:start="159:16" pos:end="159:17">-&gt;</operator><name pos:start="159:18" pos:end="159:25">codec_id</name></name> <operator pos:start="159:27" pos:end="159:28">==</operator> <name pos:start="159:30" pos:end="159:45">AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:32"><block_content pos:start="161:9" pos:end="161:32">

        <expr_stmt pos:start="161:9" pos:end="161:32"><expr pos:start="161:9" pos:end="161:31"><name pos:start="161:9" pos:end="161:25">surface_alignment</name> <operator pos:start="161:27" pos:end="161:27">=</operator> <literal type="number" pos:start="161:29" pos:end="161:31">128</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="163:5" pos:end="165:31">else<block type="pseudo" pos:start="165:9" pos:end="165:31"><block_content pos:start="165:9" pos:end="165:31">

        <expr_stmt pos:start="165:9" pos:end="165:31"><expr pos:start="165:9" pos:end="165:30"><name pos:start="165:9" pos:end="165:25">surface_alignment</name> <operator pos:start="165:27" pos:end="165:27">=</operator> <literal type="number" pos:start="165:29" pos:end="165:30">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:30">/* 4 base work surfaces */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:21"><expr pos:start="171:5" pos:end="171:20"><name pos:start="171:5" pos:end="171:16">num_surfaces</name> <operator pos:start="171:18" pos:end="171:18">=</operator> <literal type="number" pos:start="171:20" pos:end="171:20">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:55">/* add surfaces based on number of possible refs */</comment>

    <if_stmt pos:start="177:5" pos:end="187:26"><if pos:start="177:5" pos:end="179:27">if <condition pos:start="177:8" pos:end="177:75">(<expr pos:start="177:9" pos:end="177:74"><name pos:start="177:9" pos:end="177:19"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:19">codec_id</name></name> <operator pos:start="177:21" pos:end="177:22">==</operator> <name pos:start="177:24" pos:end="177:39">AV_CODEC_ID_H264</name> <operator pos:start="177:41" pos:end="177:42">||</operator> <name pos:start="177:44" pos:end="177:54"><name pos:start="177:44" pos:end="177:44">s</name><operator pos:start="177:45" pos:end="177:46">-&gt;</operator><name pos:start="177:47" pos:end="177:54">codec_id</name></name> <operator pos:start="177:56" pos:end="177:57">==</operator> <name pos:start="177:59" pos:end="177:74">AV_CODEC_ID_HEVC</name></expr>)</condition><block type="pseudo" pos:start="179:9" pos:end="179:27"><block_content pos:start="179:9" pos:end="179:27">

        <expr_stmt pos:start="179:9" pos:end="179:27"><expr pos:start="179:9" pos:end="179:26"><name pos:start="179:9" pos:end="179:20">num_surfaces</name> <operator pos:start="179:22" pos:end="179:23">+=</operator> <literal type="number" pos:start="179:25" pos:end="179:26">16</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="181:5" pos:end="183:26">else if <condition pos:start="181:13" pos:end="181:44">(<expr pos:start="181:14" pos:end="181:43"><name pos:start="181:14" pos:end="181:24"><name pos:start="181:14" pos:end="181:14">s</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:24">codec_id</name></name> <operator pos:start="181:26" pos:end="181:27">==</operator> <name pos:start="181:29" pos:end="181:43">AV_CODEC_ID_VP9</name></expr>)</condition><block type="pseudo" pos:start="183:9" pos:end="183:26"><block_content pos:start="183:9" pos:end="183:26">

        <expr_stmt pos:start="183:9" pos:end="183:26"><expr pos:start="183:9" pos:end="183:25"><name pos:start="183:9" pos:end="183:20">num_surfaces</name> <operator pos:start="183:22" pos:end="183:23">+=</operator> <literal type="number" pos:start="183:25" pos:end="183:25">8</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="185:5" pos:end="187:26">else<block type="pseudo" pos:start="187:9" pos:end="187:26"><block_content pos:start="187:9" pos:end="187:26">

        <expr_stmt pos:start="187:9" pos:end="187:26"><expr pos:start="187:9" pos:end="187:25"><name pos:start="187:9" pos:end="187:20">num_surfaces</name> <operator pos:start="187:22" pos:end="187:23">+=</operator> <literal type="number" pos:start="187:25" pos:end="187:25">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="191:5" pos:end="191:48">/* add extra surfaces for frame threading */</comment>

    <if_stmt pos:start="193:5" pos:end="195:40"><if pos:start="193:5" pos:end="195:40">if <condition pos:start="193:8" pos:end="193:48">(<expr pos:start="193:9" pos:end="193:47"><name pos:start="193:9" pos:end="193:29"><name pos:start="193:9" pos:end="193:9">s</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:29">active_thread_type</name></name> <operator pos:start="193:31" pos:end="193:31">&amp;</operator> <name pos:start="193:33" pos:end="193:47">FF_THREAD_FRAME</name></expr>)</condition><block type="pseudo" pos:start="195:9" pos:end="195:40"><block_content pos:start="195:9" pos:end="195:40">

        <expr_stmt pos:start="195:9" pos:end="195:40"><expr pos:start="195:9" pos:end="195:39"><name pos:start="195:9" pos:end="195:20">num_surfaces</name> <operator pos:start="195:22" pos:end="195:23">+=</operator> <name pos:start="195:25" pos:end="195:39"><name pos:start="195:25" pos:end="195:25">s</name><operator pos:start="195:26" pos:end="195:27">-&gt;</operator><name pos:start="195:28" pos:end="195:39">thread_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:66"><expr pos:start="199:5" pos:end="199:65"><name pos:start="199:5" pos:end="199:22"><name pos:start="199:5" pos:end="199:7">ctx</name><operator pos:start="199:8" pos:end="199:9">-&gt;</operator><name pos:start="199:10" pos:end="199:22">hw_frames_ctx</name></name> <operator pos:start="199:24" pos:end="199:24">=</operator> <call pos:start="199:26" pos:end="199:65"><name pos:start="199:26" pos:end="199:45">av_hwframe_ctx_alloc</name><argument_list pos:start="199:46" pos:end="199:65">(<argument pos:start="199:47" pos:end="199:64"><expr pos:start="199:47" pos:end="199:64"><name pos:start="199:47" pos:end="199:64"><name pos:start="199:47" pos:end="199:49">ctx</name><operator pos:start="199:50" pos:end="199:51">-&gt;</operator><name pos:start="199:52" pos:end="199:64">hw_device_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="201:5" pos:end="203:18"><if pos:start="201:5" pos:end="203:18">if <condition pos:start="201:8" pos:end="201:28">(<expr pos:start="201:9" pos:end="201:27"><operator pos:start="201:9" pos:end="201:9">!</operator><name pos:start="201:10" pos:end="201:27"><name pos:start="201:10" pos:end="201:12">ctx</name><operator pos:start="201:13" pos:end="201:14">-&gt;</operator><name pos:start="201:15" pos:end="201:27">hw_frames_ctx</name></name></expr>)</condition><block type="pseudo" pos:start="203:9" pos:end="203:18"><block_content pos:start="203:9" pos:end="203:18">

        <goto pos:start="203:9" pos:end="203:18">goto <name pos:start="203:14" pos:end="203:17">fail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:64"><expr pos:start="205:5" pos:end="205:63"><name pos:start="205:5" pos:end="205:14">frames_ctx</name>   <operator pos:start="205:18" pos:end="205:18">=</operator> <operator pos:start="205:20" pos:end="205:20">(</operator><name pos:start="205:21" pos:end="205:37">AVHWFramesContext</name><operator pos:start="205:38" pos:end="205:38">*</operator><operator pos:start="205:39" pos:end="205:39">)</operator><name pos:start="205:40" pos:end="205:63"><name pos:start="205:40" pos:end="205:42">ctx</name><operator pos:start="205:43" pos:end="205:44">-&gt;</operator><name pos:start="205:45" pos:end="205:57">hw_frames_ctx</name><operator pos:start="205:58" pos:end="205:59">-&gt;</operator><name pos:start="205:60" pos:end="205:63">data</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:37"><expr pos:start="207:5" pos:end="207:36"><name pos:start="207:5" pos:end="207:16">frames_hwctx</name> <operator pos:start="207:18" pos:end="207:18">=</operator> <name pos:start="207:20" pos:end="207:36"><name pos:start="207:20" pos:end="207:29">frames_ctx</name><operator pos:start="207:30" pos:end="207:31">-&gt;</operator><name pos:start="207:32" pos:end="207:36">hwctx</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:57"><expr pos:start="211:5" pos:end="211:56"><name pos:start="211:5" pos:end="211:22"><name pos:start="211:5" pos:end="211:14">frames_ctx</name><operator pos:start="211:15" pos:end="211:16">-&gt;</operator><name pos:start="211:17" pos:end="211:22">format</name></name>            <operator pos:start="211:35" pos:end="211:35">=</operator> <name pos:start="211:37" pos:end="211:56">AV_PIX_FMT_DXVA2_VLD</name></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:114"><expr pos:start="213:5" pos:end="213:113"><name pos:start="213:5" pos:end="213:25"><name pos:start="213:5" pos:end="213:14">frames_ctx</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:25">sw_format</name></name>         <operator pos:start="213:35" pos:end="213:35">=</operator> <operator pos:start="213:37" pos:end="213:37">(</operator><ternary pos:start="213:38" pos:end="213:112"><condition pos:start="213:38" pos:end="213:78"><expr pos:start="213:38" pos:end="213:76"><name pos:start="213:38" pos:end="213:50">target_format</name> <operator pos:start="213:52" pos:end="213:53">==</operator> <call pos:start="213:55" pos:end="213:76"><name pos:start="213:55" pos:end="213:59">MKTAG</name><argument_list pos:start="213:60" pos:end="213:76">(<argument pos:start="213:61" pos:end="213:63"><expr pos:start="213:61" pos:end="213:63"><literal type="char" pos:start="213:61" pos:end="213:63">'P'</literal></expr></argument>,<argument pos:start="213:65" pos:end="213:67"><expr pos:start="213:65" pos:end="213:67"><literal type="char" pos:start="213:65" pos:end="213:67">'0'</literal></expr></argument>,<argument pos:start="213:69" pos:end="213:71"><expr pos:start="213:69" pos:end="213:71"><literal type="char" pos:start="213:69" pos:end="213:71">'1'</literal></expr></argument>,<argument pos:start="213:73" pos:end="213:75"><expr pos:start="213:73" pos:end="213:75"><literal type="char" pos:start="213:73" pos:end="213:75">'0'</literal></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="213:80" pos:end="213:94"> <expr pos:start="213:80" pos:end="213:94"><name pos:start="213:80" pos:end="213:94">AV_PIX_FMT_P010</name></expr> </then><else pos:start="213:96" pos:end="213:112">: <expr pos:start="213:98" pos:end="213:112"><name pos:start="213:98" pos:end="213:112">AV_PIX_FMT_NV12</name></expr></else></ternary><operator pos:start="213:113" pos:end="213:113">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:79"><expr pos:start="215:5" pos:end="215:78"><name pos:start="215:5" pos:end="215:21"><name pos:start="215:5" pos:end="215:14">frames_ctx</name><operator pos:start="215:15" pos:end="215:16">-&gt;</operator><name pos:start="215:17" pos:end="215:21">width</name></name>             <operator pos:start="215:35" pos:end="215:35">=</operator> <call pos:start="215:37" pos:end="215:78"><name pos:start="215:37" pos:end="215:43">FFALIGN</name><argument_list pos:start="215:44" pos:end="215:78">(<argument pos:start="215:45" pos:end="215:58"><expr pos:start="215:45" pos:end="215:58"><name pos:start="215:45" pos:end="215:58"><name pos:start="215:45" pos:end="215:45">s</name><operator pos:start="215:46" pos:end="215:47">-&gt;</operator><name pos:start="215:48" pos:end="215:58">coded_width</name></name></expr></argument>, <argument pos:start="215:61" pos:end="215:77"><expr pos:start="215:61" pos:end="215:77"><name pos:start="215:61" pos:end="215:77">surface_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:80"><expr pos:start="217:5" pos:end="217:79"><name pos:start="217:5" pos:end="217:22"><name pos:start="217:5" pos:end="217:14">frames_ctx</name><operator pos:start="217:15" pos:end="217:16">-&gt;</operator><name pos:start="217:17" pos:end="217:22">height</name></name>            <operator pos:start="217:35" pos:end="217:35">=</operator> <call pos:start="217:37" pos:end="217:79"><name pos:start="217:37" pos:end="217:43">FFALIGN</name><argument_list pos:start="217:44" pos:end="217:79">(<argument pos:start="217:45" pos:end="217:59"><expr pos:start="217:45" pos:end="217:59"><name pos:start="217:45" pos:end="217:59"><name pos:start="217:45" pos:end="217:45">s</name><operator pos:start="217:46" pos:end="217:47">-&gt;</operator><name pos:start="217:48" pos:end="217:59">coded_height</name></name></expr></argument>, <argument pos:start="217:62" pos:end="217:78"><expr pos:start="217:62" pos:end="217:78"><name pos:start="217:62" pos:end="217:78">surface_alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:49"><expr pos:start="219:5" pos:end="219:48"><name pos:start="219:5" pos:end="219:33"><name pos:start="219:5" pos:end="219:14">frames_ctx</name><operator pos:start="219:15" pos:end="219:16">-&gt;</operator><name pos:start="219:17" pos:end="219:33">initial_pool_size</name></name> <operator pos:start="219:35" pos:end="219:35">=</operator> <name pos:start="219:37" pos:end="219:48">num_surfaces</name></expr>;</expr_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:64"><expr pos:start="223:5" pos:end="223:63"><name pos:start="223:5" pos:end="223:30"><name pos:start="223:5" pos:end="223:16">frames_hwctx</name><operator pos:start="223:17" pos:end="223:18">-&gt;</operator><name pos:start="223:19" pos:end="223:30">surface_type</name></name> <operator pos:start="223:32" pos:end="223:32">=</operator> <name pos:start="223:34" pos:end="223:63">DXVA2_VideoDecoderRenderTarget</name></expr>;</expr_stmt>



    <expr_stmt pos:start="227:5" pos:end="227:50"><expr pos:start="227:5" pos:end="227:49"><name pos:start="227:5" pos:end="227:7">ret</name> <operator pos:start="227:9" pos:end="227:9">=</operator> <call pos:start="227:11" pos:end="227:49"><name pos:start="227:11" pos:end="227:29">av_hwframe_ctx_init</name><argument_list pos:start="227:30" pos:end="227:49">(<argument pos:start="227:31" pos:end="227:48"><expr pos:start="227:31" pos:end="227:48"><name pos:start="227:31" pos:end="227:48"><name pos:start="227:31" pos:end="227:33">ctx</name><operator pos:start="227:34" pos:end="227:35">-&gt;</operator><name pos:start="227:36" pos:end="227:48">hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="229:5" pos:end="235:5"><if pos:start="229:5" pos:end="235:5">if <condition pos:start="229:8" pos:end="229:16">(<expr pos:start="229:9" pos:end="229:15"><name pos:start="229:9" pos:end="229:11">ret</name> <operator pos:start="229:13" pos:end="229:13">&lt;</operator> <literal type="number" pos:start="229:15" pos:end="229:15">0</literal></expr>)</condition> <block pos:start="229:18" pos:end="235:5">{<block_content pos:start="231:9" pos:end="233:18">

        <expr_stmt pos:start="231:9" pos:end="231:79"><expr pos:start="231:9" pos:end="231:78"><call pos:start="231:9" pos:end="231:78"><name pos:start="231:9" pos:end="231:14">av_log</name><argument_list pos:start="231:15" pos:end="231:78">(<argument pos:start="231:16" pos:end="231:19"><expr pos:start="231:16" pos:end="231:19"><name pos:start="231:16" pos:end="231:19">NULL</name></expr></argument>, <argument pos:start="231:22" pos:end="231:29"><expr pos:start="231:22" pos:end="231:29"><name pos:start="231:22" pos:end="231:29">loglevel</name></expr></argument>, <argument pos:start="231:32" pos:end="231:77"><expr pos:start="231:32" pos:end="231:77"><literal type="string" pos:start="231:32" pos:end="231:77">"Failed to initialize the HW frames context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="233:9" pos:end="233:18">goto <name pos:start="233:14" pos:end="233:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="239:5" pos:end="243:118"><expr pos:start="239:5" pos:end="243:117"><name pos:start="239:5" pos:end="239:6">hr</name> <operator pos:start="239:8" pos:end="239:8">=</operator> <call pos:start="239:10" pos:end="243:117"><name pos:start="239:10" pos:end="239:55">IDirectXVideoDecoderService_CreateVideoDecoder</name><argument_list pos:start="239:56" pos:end="243:117">(<argument pos:start="239:57" pos:end="239:76"><expr pos:start="239:57" pos:end="239:76"><name pos:start="239:57" pos:end="239:76"><name pos:start="239:57" pos:end="239:59">ctx</name><operator pos:start="239:60" pos:end="239:61">-&gt;</operator><name pos:start="239:62" pos:end="239:76">decoder_service</name></name></expr></argument>, <argument pos:start="239:79" pos:end="239:90"><expr pos:start="239:79" pos:end="239:90"><operator pos:start="239:79" pos:end="239:79">&amp;</operator><name pos:start="239:80" pos:end="239:90">device_guid</name></expr></argument>,

                                                        <argument pos:start="241:57" pos:end="241:61"><expr pos:start="241:57" pos:end="241:61"><operator pos:start="241:57" pos:end="241:57">&amp;</operator><name pos:start="241:58" pos:end="241:61">desc</name></expr></argument>, <argument pos:start="241:64" pos:end="241:70"><expr pos:start="241:64" pos:end="241:70"><operator pos:start="241:64" pos:end="241:64">&amp;</operator><name pos:start="241:65" pos:end="241:70">config</name></expr></argument>, <argument pos:start="241:73" pos:end="241:94"><expr pos:start="241:73" pos:end="241:94"><name pos:start="241:73" pos:end="241:94"><name pos:start="241:73" pos:end="241:84">frames_hwctx</name><operator pos:start="241:85" pos:end="241:86">-&gt;</operator><name pos:start="241:87" pos:end="241:94">surfaces</name></name></expr></argument>,

                                                        <argument pos:start="243:57" pos:end="243:81"><expr pos:start="243:57" pos:end="243:81"><name pos:start="243:57" pos:end="243:81"><name pos:start="243:57" pos:end="243:68">frames_hwctx</name><operator pos:start="243:69" pos:end="243:70">-&gt;</operator><name pos:start="243:71" pos:end="243:81">nb_surfaces</name></name></expr></argument>, <argument pos:start="243:84" pos:end="243:116"><expr pos:start="243:84" pos:end="243:116"><operator pos:start="243:84" pos:end="243:84">&amp;</operator><name pos:start="243:85" pos:end="243:116"><name pos:start="243:85" pos:end="243:96">frames_hwctx</name><operator pos:start="243:97" pos:end="243:98">-&gt;</operator><name pos:start="243:99" pos:end="243:116">decoder_to_release</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="245:5" pos:end="251:5"><if pos:start="245:5" pos:end="251:5">if <condition pos:start="245:8" pos:end="245:19">(<expr pos:start="245:9" pos:end="245:18"><call pos:start="245:9" pos:end="245:18"><name pos:start="245:9" pos:end="245:14">FAILED</name><argument_list pos:start="245:15" pos:end="245:18">(<argument pos:start="245:16" pos:end="245:17"><expr pos:start="245:16" pos:end="245:17"><name pos:start="245:16" pos:end="245:17">hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="245:21" pos:end="251:5">{<block_content pos:start="247:9" pos:end="249:18">

        <expr_stmt pos:start="247:9" pos:end="247:73"><expr pos:start="247:9" pos:end="247:72"><call pos:start="247:9" pos:end="247:72"><name pos:start="247:9" pos:end="247:14">av_log</name><argument_list pos:start="247:15" pos:end="247:72">(<argument pos:start="247:16" pos:end="247:19"><expr pos:start="247:16" pos:end="247:19"><name pos:start="247:16" pos:end="247:19">NULL</name></expr></argument>, <argument pos:start="247:22" pos:end="247:29"><expr pos:start="247:22" pos:end="247:29"><name pos:start="247:22" pos:end="247:29">loglevel</name></expr></argument>, <argument pos:start="247:32" pos:end="247:71"><expr pos:start="247:32" pos:end="247:71"><literal type="string" pos:start="247:32" pos:end="247:71">"Failed to create DXVA2 video decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="249:9" pos:end="249:18">goto <name pos:start="249:14" pos:end="249:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="255:5" pos:end="255:38"><expr pos:start="255:5" pos:end="255:37"><name pos:start="255:5" pos:end="255:21"><name pos:start="255:5" pos:end="255:7">ctx</name><operator pos:start="255:8" pos:end="255:9">-&gt;</operator><name pos:start="255:10" pos:end="255:21">decoder_guid</name></name>   <operator pos:start="255:25" pos:end="255:25">=</operator> <name pos:start="255:27" pos:end="255:37">device_guid</name></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:33"><expr pos:start="257:5" pos:end="257:32"><name pos:start="257:5" pos:end="257:23"><name pos:start="257:5" pos:end="257:7">ctx</name><operator pos:start="257:8" pos:end="257:9">-&gt;</operator><name pos:start="257:10" pos:end="257:23">decoder_config</name></name> <operator pos:start="257:25" pos:end="257:25">=</operator> <name pos:start="257:27" pos:end="257:32">config</name></expr>;</expr_stmt>



    <expr_stmt pos:start="261:5" pos:end="261:51"><expr pos:start="261:5" pos:end="261:50"><name pos:start="261:5" pos:end="261:17"><name pos:start="261:5" pos:end="261:12">dxva_ctx</name><operator pos:start="261:13" pos:end="261:14">-&gt;</operator><name pos:start="261:15" pos:end="261:17">cfg</name></name>           <operator pos:start="261:29" pos:end="261:29">=</operator> <operator pos:start="261:31" pos:end="261:31">&amp;</operator><name pos:start="261:32" pos:end="261:50"><name pos:start="261:32" pos:end="261:34">ctx</name><operator pos:start="261:35" pos:end="261:36">-&gt;</operator><name pos:start="261:37" pos:end="261:50">decoder_config</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:63"><expr pos:start="263:5" pos:end="263:62"><name pos:start="263:5" pos:end="263:21"><name pos:start="263:5" pos:end="263:12">dxva_ctx</name><operator pos:start="263:13" pos:end="263:14">-&gt;</operator><name pos:start="263:15" pos:end="263:21">decoder</name></name>       <operator pos:start="263:29" pos:end="263:29">=</operator> <name pos:start="263:31" pos:end="263:62"><name pos:start="263:31" pos:end="263:42">frames_hwctx</name><operator pos:start="263:43" pos:end="263:44">-&gt;</operator><name pos:start="263:45" pos:end="263:62">decoder_to_release</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:53"><expr pos:start="265:5" pos:end="265:52"><name pos:start="265:5" pos:end="265:21"><name pos:start="265:5" pos:end="265:12">dxva_ctx</name><operator pos:start="265:13" pos:end="265:14">-&gt;</operator><name pos:start="265:15" pos:end="265:21">surface</name></name>       <operator pos:start="265:29" pos:end="265:29">=</operator> <name pos:start="265:31" pos:end="265:52"><name pos:start="265:31" pos:end="265:42">frames_hwctx</name><operator pos:start="265:43" pos:end="265:44">-&gt;</operator><name pos:start="265:45" pos:end="265:52">surfaces</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:56"><expr pos:start="267:5" pos:end="267:55"><name pos:start="267:5" pos:end="267:27"><name pos:start="267:5" pos:end="267:12">dxva_ctx</name><operator pos:start="267:13" pos:end="267:14">-&gt;</operator><name pos:start="267:15" pos:end="267:27">surface_count</name></name> <operator pos:start="267:29" pos:end="267:29">=</operator> <name pos:start="267:31" pos:end="267:55"><name pos:start="267:31" pos:end="267:42">frames_hwctx</name><operator pos:start="267:43" pos:end="267:44">-&gt;</operator><name pos:start="267:45" pos:end="267:55">nb_surfaces</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="271:5" pos:end="273:69"><if pos:start="271:5" pos:end="273:69">if <condition pos:start="271:8" pos:end="271:67">(<expr pos:start="271:9" pos:end="271:66"><call pos:start="271:9" pos:end="271:66"><name pos:start="271:9" pos:end="271:19">IsEqualGUID</name><argument_list pos:start="271:20" pos:end="271:66">(<argument pos:start="271:21" pos:end="271:38"><expr pos:start="271:21" pos:end="271:38"><operator pos:start="271:21" pos:end="271:21">&amp;</operator><name pos:start="271:22" pos:end="271:38"><name pos:start="271:22" pos:end="271:24">ctx</name><operator pos:start="271:25" pos:end="271:26">-&gt;</operator><name pos:start="271:27" pos:end="271:38">decoder_guid</name></name></expr></argument>, <argument pos:start="271:41" pos:end="271:65"><expr pos:start="271:41" pos:end="271:65"><operator pos:start="271:41" pos:end="271:41">&amp;</operator><name pos:start="271:42" pos:end="271:65">DXVADDI_Intel_ModeH264_E</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="273:9" pos:end="273:69"><block_content pos:start="273:9" pos:end="273:69">

        <expr_stmt pos:start="273:9" pos:end="273:69"><expr pos:start="273:9" pos:end="273:68"><name pos:start="273:9" pos:end="273:28"><name pos:start="273:9" pos:end="273:16">dxva_ctx</name><operator pos:start="273:17" pos:end="273:18">-&gt;</operator><name pos:start="273:19" pos:end="273:28">workaround</name></name> <operator pos:start="273:30" pos:end="273:31">|=</operator> <name pos:start="273:33" pos:end="273:68">FF_DXVA2_WORKAROUND_INTEL_CLEARVIDEO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="277:5" pos:end="277:13">return <expr pos:start="277:12" pos:end="277:12"><literal type="number" pos:start="277:12" pos:end="277:12">0</literal></expr>;</return>

<label pos:start="279:1" pos:end="279:5"><name pos:start="279:1" pos:end="279:4">fail</name>:</label>

    <expr_stmt pos:start="281:5" pos:end="281:41"><expr pos:start="281:5" pos:end="281:40"><call pos:start="281:5" pos:end="281:40"><name pos:start="281:5" pos:end="281:19">av_buffer_unref</name><argument_list pos:start="281:20" pos:end="281:40">(<argument pos:start="281:21" pos:end="281:39"><expr pos:start="281:21" pos:end="281:39"><operator pos:start="281:21" pos:end="281:21">&amp;</operator><name pos:start="281:22" pos:end="281:39"><name pos:start="281:22" pos:end="281:24">ctx</name><operator pos:start="281:25" pos:end="281:26">-&gt;</operator><name pos:start="281:27" pos:end="281:39">hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="283:5" pos:end="283:27">return <expr pos:start="283:12" pos:end="283:26"><call pos:start="283:12" pos:end="283:26"><name pos:start="283:12" pos:end="283:18">AVERROR</name><argument_list pos:start="283:19" pos:end="283:26">(<argument pos:start="283:20" pos:end="283:25"><expr pos:start="283:20" pos:end="283:25"><name pos:start="283:20" pos:end="283:25">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
