<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7455.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">vtd_do_iommu_translate</name><parameter_list pos:start="1:35" pos:end="5:56">(<parameter pos:start="1:36" pos:end="1:53"><decl pos:start="1:36" pos:end="1:53"><type pos:start="1:36" pos:end="1:53"><name pos:start="1:36" pos:end="1:50">IntelIOMMUState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">s</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:70"><decl pos:start="1:56" pos:end="1:70"><type pos:start="1:56" pos:end="1:70"><name pos:start="1:56" pos:end="1:62">uint8_t</name></type> <name pos:start="1:64" pos:end="1:70">bus_num</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:48"><decl pos:start="3:36" pos:end="3:48"><type pos:start="3:36" pos:end="3:48"><name pos:start="3:36" pos:end="3:42">uint8_t</name></type> <name pos:start="3:44" pos:end="3:48">devfn</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:61"><decl pos:start="3:51" pos:end="3:61"><type pos:start="3:51" pos:end="3:61"><name pos:start="3:51" pos:end="3:56">hwaddr</name></type> <name pos:start="3:58" pos:end="3:61">addr</name></decl></parameter>, <parameter pos:start="3:64" pos:end="3:76"><decl pos:start="3:64" pos:end="3:76"><type pos:start="3:64" pos:end="3:76"><name pos:start="3:64" pos:end="3:67">bool</name></type> <name pos:start="3:69" pos:end="3:76">is_write</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:55"><decl pos:start="5:36" pos:end="5:55"><type pos:start="5:36" pos:end="5:55"><name pos:start="5:36" pos:end="5:48">IOMMUTLBEntry</name> <modifier pos:start="5:50" pos:end="5:50">*</modifier></type><name pos:start="5:51" pos:end="5:55">entry</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="133:1">{<block_content pos:start="9:5" pos:end="131:53">

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:19">VTDContextEntry</name></type> <name pos:start="9:21" pos:end="9:22">ce</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:18">slpte</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">level</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:60"><decl pos:start="15:5" pos:end="15:59"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:22">source_id</name> <init pos:start="15:24" pos:end="15:59">= <expr pos:start="15:26" pos:end="15:59"><call pos:start="15:26" pos:end="15:59"><name pos:start="15:26" pos:end="15:43">vtd_make_source_id</name><argument_list pos:start="15:44" pos:end="15:59">(<argument pos:start="15:45" pos:end="15:51"><expr pos:start="15:45" pos:end="15:51"><name pos:start="15:45" pos:end="15:51">bus_num</name></expr></argument>, <argument pos:start="15:54" pos:end="15:58"><expr pos:start="15:54" pos:end="15:58"><name pos:start="15:54" pos:end="15:58">devfn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">ret_fr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:19">is_fpd_set</name> <init pos:start="19:21" pos:end="19:27">= <expr pos:start="19:23" pos:end="19:27"><name pos:start="19:23" pos:end="19:27">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:14">reads</name> <init pos:start="21:16" pos:end="21:21">= <expr pos:start="21:18" pos:end="21:21"><name pos:start="21:18" pos:end="21:21">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:15">writes</name> <init pos:start="23:17" pos:end="23:22">= <expr pos:start="23:19" pos:end="23:22"><name pos:start="23:19" pos:end="23:22">true</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:60">/* Check if the request is in interrupt address range */</comment>

    <if_stmt pos:start="29:5" pos:end="69:5"><if pos:start="29:5" pos:end="69:5">if <condition pos:start="29:8" pos:end="29:36">(<expr pos:start="29:9" pos:end="29:35"><call pos:start="29:9" pos:end="29:35"><name pos:start="29:9" pos:end="29:29">vtd_is_interrupt_addr</name><argument_list pos:start="29:30" pos:end="29:35">(<argument pos:start="29:31" pos:end="29:34"><expr pos:start="29:31" pos:end="29:34"><name pos:start="29:31" pos:end="29:34">addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:38" pos:end="69:5">{<block_content pos:start="31:9" pos:end="67:9">

        <if_stmt pos:start="31:9" pos:end="67:9"><if pos:start="31:9" pos:end="57:9">if <condition pos:start="31:12" pos:end="31:21">(<expr pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:20">is_write</name></expr>)</condition> <block pos:start="31:23" pos:end="57:9">{<block_content pos:start="43:13" pos:end="55:19">

            <comment type="block" pos:start="33:13" pos:end="41:15">/* FIXME: since we don't know the length of the access here, we

             * treat Non-DWORD length write requests without PASID as

             * interrupt requests, too. Withoud interrupt remapping support,

             * we just use 1:1 mapping.

             */</comment>

            <expr_stmt pos:start="43:13" pos:end="45:47"><expr pos:start="43:13" pos:end="45:46"><call pos:start="43:13" pos:end="45:46"><name pos:start="43:13" pos:end="43:23">VTD_DPRINTF</name><argument_list pos:start="43:24" pos:end="45:46">(<argument pos:start="43:25" pos:end="43:27"><expr pos:start="43:25" pos:end="43:27"><name pos:start="43:25" pos:end="43:27">MMU</name></expr></argument>, <argument pos:start="43:30" pos:end="45:39"><expr pos:start="43:30" pos:end="45:39"><literal type="string" pos:start="43:30" pos:end="43:66">"write request to interrupt address "</literal>

                        <literal type="string" pos:start="45:25" pos:end="45:33">"gpa 0x%"</literal><name pos:start="45:34" pos:end="45:39">PRIx64</name></expr></argument>, <argument pos:start="45:42" pos:end="45:45"><expr pos:start="45:42" pos:end="45:45"><name pos:start="45:42" pos:end="45:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:50"><expr pos:start="47:13" pos:end="47:49"><name pos:start="47:13" pos:end="47:23"><name pos:start="47:13" pos:end="47:17">entry</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:23">iova</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:30">addr</name> <operator pos:start="47:32" pos:end="47:32">&amp;</operator> <name pos:start="47:34" pos:end="47:49">VTD_PAGE_MASK_4K</name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:61"><expr pos:start="49:13" pos:end="49:60"><name pos:start="49:13" pos:end="49:34"><name pos:start="49:13" pos:end="49:17">entry</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:34">translated_addr</name></name> <operator pos:start="49:36" pos:end="49:36">=</operator> <name pos:start="49:38" pos:end="49:41">addr</name> <operator pos:start="49:43" pos:end="49:43">&amp;</operator> <name pos:start="49:45" pos:end="49:60">VTD_PAGE_MASK_4K</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:49"><expr pos:start="51:13" pos:end="51:48"><name pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:17">entry</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:28">addr_mask</name></name> <operator pos:start="51:30" pos:end="51:30">=</operator> <operator pos:start="51:32" pos:end="51:32">~</operator><name pos:start="51:33" pos:end="51:48">VTD_PAGE_MASK_4K</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:35"><expr pos:start="53:13" pos:end="53:34"><name pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:17">entry</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:23">perm</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <name pos:start="53:27" pos:end="53:34">IOMMU_WO</name></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:19">return;</return>

        </block_content>}</block></if> <else pos:start="57:11" pos:end="67:9">else <block pos:start="57:16" pos:end="67:9">{<block_content pos:start="59:13" pos:end="65:19">

            <expr_stmt pos:start="59:13" pos:end="61:47"><expr pos:start="59:13" pos:end="61:46"><call pos:start="59:13" pos:end="61:46"><name pos:start="59:13" pos:end="59:23">VTD_DPRINTF</name><argument_list pos:start="59:24" pos:end="61:46">(<argument pos:start="59:25" pos:end="59:31"><expr pos:start="59:25" pos:end="59:31"><name pos:start="59:25" pos:end="59:31">GENERAL</name></expr></argument>, <argument pos:start="59:34" pos:end="61:39"><expr pos:start="59:34" pos:end="61:39"><literal type="string" pos:start="59:34" pos:end="59:78">"error: read request from interrupt address "</literal>

                        <literal type="string" pos:start="61:25" pos:end="61:33">"gpa 0x%"</literal><name pos:start="61:34" pos:end="61:39">PRIx64</name></expr></argument>, <argument pos:start="61:42" pos:end="61:45"><expr pos:start="61:42" pos:end="61:45"><name pos:start="61:42" pos:end="61:45">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:77"><expr pos:start="63:13" pos:end="63:76"><call pos:start="63:13" pos:end="63:76"><name pos:start="63:13" pos:end="63:33">vtd_report_dmar_fault</name><argument_list pos:start="63:34" pos:end="63:76">(<argument pos:start="63:35" pos:end="63:35"><expr pos:start="63:35" pos:end="63:35"><name pos:start="63:35" pos:end="63:35">s</name></expr></argument>, <argument pos:start="63:38" pos:end="63:46"><expr pos:start="63:38" pos:end="63:46"><name pos:start="63:38" pos:end="63:46">source_id</name></expr></argument>, <argument pos:start="63:49" pos:end="63:52"><expr pos:start="63:49" pos:end="63:52"><name pos:start="63:49" pos:end="63:52">addr</name></expr></argument>, <argument pos:start="63:55" pos:end="63:65"><expr pos:start="63:55" pos:end="63:65"><name pos:start="63:55" pos:end="63:65">VTD_FR_READ</name></expr></argument>, <argument pos:start="63:68" pos:end="63:75"><expr pos:start="63:68" pos:end="63:75"><name pos:start="63:68" pos:end="63:75">is_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:19">return;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:62"><expr pos:start="73:5" pos:end="73:61"><name pos:start="73:5" pos:end="73:10">ret_fr</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <call pos:start="73:14" pos:end="73:61"><name pos:start="73:14" pos:end="73:37">vtd_dev_to_context_entry</name><argument_list pos:start="73:38" pos:end="73:61">(<argument pos:start="73:39" pos:end="73:39"><expr pos:start="73:39" pos:end="73:39"><name pos:start="73:39" pos:end="73:39">s</name></expr></argument>, <argument pos:start="73:42" pos:end="73:48"><expr pos:start="73:42" pos:end="73:48"><name pos:start="73:42" pos:end="73:48">bus_num</name></expr></argument>, <argument pos:start="73:51" pos:end="73:55"><expr pos:start="73:51" pos:end="73:55"><name pos:start="73:51" pos:end="73:55">devfn</name></expr></argument>, <argument pos:start="73:58" pos:end="73:60"><expr pos:start="73:58" pos:end="73:60"><operator pos:start="73:58" pos:end="73:58">&amp;</operator><name pos:start="73:59" pos:end="73:60">ce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:47"><expr pos:start="75:5" pos:end="75:46"><name pos:start="75:5" pos:end="75:14">is_fpd_set</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <name pos:start="75:18" pos:end="75:22"><name pos:start="75:18" pos:end="75:19">ce</name><operator pos:start="75:20" pos:end="75:20">.</operator><name pos:start="75:21" pos:end="75:22">lo</name></name> <operator pos:start="75:24" pos:end="75:24">&amp;</operator> <name pos:start="75:26" pos:end="75:46">VTD_CONTEXT_ENTRY_FPD</name></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="95:5"><if pos:start="77:5" pos:end="95:5">if <condition pos:start="77:8" pos:end="77:15">(<expr pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:14">ret_fr</name></expr>)</condition> <block pos:start="77:17" pos:end="95:5">{<block_content pos:start="79:9" pos:end="93:15">

        <expr_stmt pos:start="79:9" pos:end="79:25"><expr pos:start="79:9" pos:end="79:24"><name pos:start="79:9" pos:end="79:14">ret_fr</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <operator pos:start="79:18" pos:end="79:18">-</operator><name pos:start="79:19" pos:end="79:24">ret_fr</name></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="91:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:57">(<expr pos:start="81:13" pos:end="81:56"><name pos:start="81:13" pos:end="81:22">is_fpd_set</name> <operator pos:start="81:24" pos:end="81:25">&amp;&amp;</operator> <call pos:start="81:27" pos:end="81:56"><name pos:start="81:27" pos:end="81:48">vtd_is_qualified_fault</name><argument_list pos:start="81:49" pos:end="81:56">(<argument pos:start="81:50" pos:end="81:55"><expr pos:start="81:50" pos:end="81:55"><name pos:start="81:50" pos:end="81:55">ret_fr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:59" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:69">

            <expr_stmt pos:start="83:13" pos:end="85:69"><expr pos:start="83:13" pos:end="85:68"><call pos:start="83:13" pos:end="85:68"><name pos:start="83:13" pos:end="83:23">VTD_DPRINTF</name><argument_list pos:start="83:24" pos:end="85:68">(<argument pos:start="83:25" pos:end="83:28"><expr pos:start="83:25" pos:end="83:28"><name pos:start="83:25" pos:end="83:28">FLOG</name></expr></argument>, <argument pos:start="83:31" pos:end="85:67"><expr pos:start="83:31" pos:end="85:67"><literal type="string" pos:start="83:31" pos:end="83:78">"fault processing is disabled for DMA requests "</literal>

                        <literal type="string" pos:start="85:25" pos:end="85:67">"through this context-entry (with FPD Set)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="87:11" pos:end="91:9">else <block pos:start="87:16" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:72">

            <expr_stmt pos:start="89:13" pos:end="89:72"><expr pos:start="89:13" pos:end="89:71"><call pos:start="89:13" pos:end="89:71"><name pos:start="89:13" pos:end="89:33">vtd_report_dmar_fault</name><argument_list pos:start="89:34" pos:end="89:71">(<argument pos:start="89:35" pos:end="89:35"><expr pos:start="89:35" pos:end="89:35"><name pos:start="89:35" pos:end="89:35">s</name></expr></argument>, <argument pos:start="89:38" pos:end="89:46"><expr pos:start="89:38" pos:end="89:46"><name pos:start="89:38" pos:end="89:46">source_id</name></expr></argument>, <argument pos:start="89:49" pos:end="89:52"><expr pos:start="89:49" pos:end="89:52"><name pos:start="89:49" pos:end="89:52">addr</name></expr></argument>, <argument pos:start="89:55" pos:end="89:60"><expr pos:start="89:55" pos:end="89:60"><name pos:start="89:55" pos:end="89:60">ret_fr</name></expr></argument>, <argument pos:start="89:63" pos:end="89:70"><expr pos:start="89:63" pos:end="89:70"><name pos:start="89:63" pos:end="89:70">is_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="93:9" pos:end="93:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="101:47"><expr pos:start="99:5" pos:end="101:46"><name pos:start="99:5" pos:end="99:10">ret_fr</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <call pos:start="99:14" pos:end="101:46"><name pos:start="99:14" pos:end="99:29">vtd_gpa_to_slpte</name><argument_list pos:start="99:30" pos:end="101:46">(<argument pos:start="99:31" pos:end="99:33"><expr pos:start="99:31" pos:end="99:33"><operator pos:start="99:31" pos:end="99:31">&amp;</operator><name pos:start="99:32" pos:end="99:33">ce</name></expr></argument>, <argument pos:start="99:36" pos:end="99:39"><expr pos:start="99:36" pos:end="99:39"><name pos:start="99:36" pos:end="99:39">addr</name></expr></argument>, <argument pos:start="99:42" pos:end="99:49"><expr pos:start="99:42" pos:end="99:49"><name pos:start="99:42" pos:end="99:49">is_write</name></expr></argument>, <argument pos:start="99:52" pos:end="99:57"><expr pos:start="99:52" pos:end="99:57"><operator pos:start="99:52" pos:end="99:52">&amp;</operator><name pos:start="99:53" pos:end="99:57">slpte</name></expr></argument>, <argument pos:start="99:60" pos:end="99:65"><expr pos:start="99:60" pos:end="99:65"><operator pos:start="99:60" pos:end="99:60">&amp;</operator><name pos:start="99:61" pos:end="99:65">level</name></expr></argument>,

                              <argument pos:start="101:31" pos:end="101:36"><expr pos:start="101:31" pos:end="101:36"><operator pos:start="101:31" pos:end="101:31">&amp;</operator><name pos:start="101:32" pos:end="101:36">reads</name></expr></argument>, <argument pos:start="101:39" pos:end="101:45"><expr pos:start="101:39" pos:end="101:45"><operator pos:start="101:39" pos:end="101:39">&amp;</operator><name pos:start="101:40" pos:end="101:45">writes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="121:5"><if pos:start="103:5" pos:end="121:5">if <condition pos:start="103:8" pos:end="103:15">(<expr pos:start="103:9" pos:end="103:14"><name pos:start="103:9" pos:end="103:14">ret_fr</name></expr>)</condition> <block pos:start="103:17" pos:end="121:5">{<block_content pos:start="105:9" pos:end="119:15">

        <expr_stmt pos:start="105:9" pos:end="105:25"><expr pos:start="105:9" pos:end="105:24"><name pos:start="105:9" pos:end="105:14">ret_fr</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <operator pos:start="105:18" pos:end="105:18">-</operator><name pos:start="105:19" pos:end="105:24">ret_fr</name></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="117:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:57">(<expr pos:start="107:13" pos:end="107:56"><name pos:start="107:13" pos:end="107:22">is_fpd_set</name> <operator pos:start="107:24" pos:end="107:25">&amp;&amp;</operator> <call pos:start="107:27" pos:end="107:56"><name pos:start="107:27" pos:end="107:48">vtd_is_qualified_fault</name><argument_list pos:start="107:49" pos:end="107:56">(<argument pos:start="107:50" pos:end="107:55"><expr pos:start="107:50" pos:end="107:55"><name pos:start="107:50" pos:end="107:55">ret_fr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:59" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:69">

            <expr_stmt pos:start="109:13" pos:end="111:69"><expr pos:start="109:13" pos:end="111:68"><call pos:start="109:13" pos:end="111:68"><name pos:start="109:13" pos:end="109:23">VTD_DPRINTF</name><argument_list pos:start="109:24" pos:end="111:68">(<argument pos:start="109:25" pos:end="109:28"><expr pos:start="109:25" pos:end="109:28"><name pos:start="109:25" pos:end="109:28">FLOG</name></expr></argument>, <argument pos:start="109:31" pos:end="111:67"><expr pos:start="109:31" pos:end="111:67"><literal type="string" pos:start="109:31" pos:end="109:78">"fault processing is disabled for DMA requests "</literal>

                        <literal type="string" pos:start="111:25" pos:end="111:67">"through this context-entry (with FPD Set)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="113:11" pos:end="117:9">else <block pos:start="113:16" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:72">

            <expr_stmt pos:start="115:13" pos:end="115:72"><expr pos:start="115:13" pos:end="115:71"><call pos:start="115:13" pos:end="115:71"><name pos:start="115:13" pos:end="115:33">vtd_report_dmar_fault</name><argument_list pos:start="115:34" pos:end="115:71">(<argument pos:start="115:35" pos:end="115:35"><expr pos:start="115:35" pos:end="115:35"><name pos:start="115:35" pos:end="115:35">s</name></expr></argument>, <argument pos:start="115:38" pos:end="115:46"><expr pos:start="115:38" pos:end="115:46"><name pos:start="115:38" pos:end="115:46">source_id</name></expr></argument>, <argument pos:start="115:49" pos:end="115:52"><expr pos:start="115:49" pos:end="115:52"><name pos:start="115:49" pos:end="115:52">addr</name></expr></argument>, <argument pos:start="115:55" pos:end="115:60"><expr pos:start="115:55" pos:end="115:60"><name pos:start="115:55" pos:end="115:60">ret_fr</name></expr></argument>, <argument pos:start="115:63" pos:end="115:70"><expr pos:start="115:63" pos:end="115:70"><name pos:start="115:63" pos:end="115:70">is_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="119:9" pos:end="119:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:42"><expr pos:start="125:5" pos:end="125:41"><name pos:start="125:5" pos:end="125:15"><name pos:start="125:5" pos:end="125:9">entry</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:15">iova</name></name> <operator pos:start="125:17" pos:end="125:17">=</operator> <name pos:start="125:19" pos:end="125:22">addr</name> <operator pos:start="125:24" pos:end="125:24">&amp;</operator> <name pos:start="125:26" pos:end="125:41">VTD_PAGE_MASK_4K</name></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:74"><expr pos:start="127:5" pos:end="127:73"><name pos:start="127:5" pos:end="127:26"><name pos:start="127:5" pos:end="127:9">entry</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:26">translated_addr</name></name> <operator pos:start="127:28" pos:end="127:28">=</operator> <call pos:start="127:30" pos:end="127:54"><name pos:start="127:30" pos:end="127:47">vtd_get_slpte_addr</name><argument_list pos:start="127:48" pos:end="127:54">(<argument pos:start="127:49" pos:end="127:53"><expr pos:start="127:49" pos:end="127:53"><name pos:start="127:49" pos:end="127:53">slpte</name></expr></argument>)</argument_list></call> <operator pos:start="127:56" pos:end="127:56">&amp;</operator> <name pos:start="127:58" pos:end="127:73">VTD_PAGE_MASK_4K</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:41"><expr pos:start="129:5" pos:end="129:40"><name pos:start="129:5" pos:end="129:20"><name pos:start="129:5" pos:end="129:9">entry</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:20">addr_mask</name></name> <operator pos:start="129:22" pos:end="129:22">=</operator> <operator pos:start="129:24" pos:end="129:24">~</operator><name pos:start="129:25" pos:end="129:40">VTD_PAGE_MASK_4K</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:53"><expr pos:start="131:5" pos:end="131:52"><name pos:start="131:5" pos:end="131:15"><name pos:start="131:5" pos:end="131:9">entry</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:15">perm</name></name> <operator pos:start="131:17" pos:end="131:17">=</operator> <operator pos:start="131:19" pos:end="131:19">(</operator><ternary pos:start="131:20" pos:end="131:33"><condition pos:start="131:20" pos:end="131:27"><expr pos:start="131:20" pos:end="131:25"><name pos:start="131:20" pos:end="131:25">writes</name></expr> ?</condition><then pos:start="131:29" pos:end="131:29"> <expr pos:start="131:29" pos:end="131:29"><literal type="number" pos:start="131:29" pos:end="131:29">2</literal></expr> </then><else pos:start="131:31" pos:end="131:33">: <expr pos:start="131:33" pos:end="131:33"><literal type="number" pos:start="131:33" pos:end="131:33">0</literal></expr></else></ternary><operator pos:start="131:34" pos:end="131:34">)</operator> <operator pos:start="131:36" pos:end="131:36">+</operator> <operator pos:start="131:38" pos:end="131:38">(</operator><ternary pos:start="131:39" pos:end="131:51"><condition pos:start="131:39" pos:end="131:45"><expr pos:start="131:39" pos:end="131:43"><name pos:start="131:39" pos:end="131:43">reads</name></expr> ?</condition><then pos:start="131:47" pos:end="131:47"> <expr pos:start="131:47" pos:end="131:47"><literal type="number" pos:start="131:47" pos:end="131:47">1</literal></expr> </then><else pos:start="131:49" pos:end="131:51">: <expr pos:start="131:51" pos:end="131:51"><literal type="number" pos:start="131:51" pos:end="131:51">0</literal></expr></else></ternary><operator pos:start="131:52" pos:end="131:52">)</operator></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
