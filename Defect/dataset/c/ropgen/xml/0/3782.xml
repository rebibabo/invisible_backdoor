<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3782.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">code_gen_alloc</name><parameter_list pos:start="1:27" pos:end="1:49">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:35">unsigned</name> <name pos:start="1:37" pos:end="1:40">long</name></type> <name pos:start="1:42" pos:end="1:48">tb_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="201:1">{<block_content pos:start="7:5" pos:end="199:70">

<cpp:ifdef pos:start="5:1" pos:end="5:33">#<cpp:directive pos:start="5:2" pos:end="5:6">ifdef</cpp:directive> <name pos:start="5:8" pos:end="5:33">USE_STATIC_CODE_GEN_BUFFER</name></cpp:ifdef>

    <expr_stmt pos:start="7:5" pos:end="7:45"><expr pos:start="7:5" pos:end="7:44"><name pos:start="7:5" pos:end="7:19">code_gen_buffer</name> <operator pos:start="7:21" pos:end="7:21">=</operator> <name pos:start="7:23" pos:end="7:44">static_code_gen_buffer</name></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:56"><expr pos:start="9:5" pos:end="9:55"><name pos:start="9:5" pos:end="9:24">code_gen_buffer_size</name> <operator pos:start="9:26" pos:end="9:26">=</operator> <name pos:start="9:28" pos:end="9:55">DEFAULT_CODE_GEN_BUFFER_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="14:0"><expr pos:start="11:5" pos:end="11:51"><call pos:start="11:5" pos:end="11:51"><name pos:start="11:5" pos:end="11:12">map_exec</name><argument_list pos:start="11:13" pos:end="11:51">(<argument pos:start="11:14" pos:end="11:28"><expr pos:start="11:14" pos:end="11:28"><name pos:start="11:14" pos:end="11:28">code_gen_buffer</name></expr></argument>, <argument pos:start="11:31" pos:end="11:50"><expr pos:start="11:31" pos:end="11:50"><name pos:start="11:31" pos:end="11:50">code_gen_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="13:1" pos:end="13:5">#<cpp:directive pos:start="13:2" pos:end="13:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="15:5" pos:end="15:35"><expr pos:start="15:5" pos:end="15:34"><name pos:start="15:5" pos:end="15:24">code_gen_buffer_size</name> <operator pos:start="15:26" pos:end="15:26">=</operator> <name pos:start="15:28" pos:end="15:34">tb_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="33:5"><if pos:start="17:5" pos:end="33:5">if <condition pos:start="17:8" pos:end="17:34">(<expr pos:start="17:9" pos:end="17:33"><name pos:start="17:9" pos:end="17:28">code_gen_buffer_size</name> <operator pos:start="17:30" pos:end="17:31">==</operator> <literal type="number" pos:start="17:33" pos:end="17:33">0</literal></expr>)</condition> <block pos:start="17:36" pos:end="33:5">{<block_content pos:start="23:9" pos:end="32:0">

<cpp:if pos:start="19:1" pos:end="19:29">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:29"><call pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:11">defined</name><argument_list pos:start="19:12" pos:end="19:29">(<argument pos:start="19:13" pos:end="19:28"><expr pos:start="19:13" pos:end="19:28"><name pos:start="19:13" pos:end="19:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <comment type="block" pos:start="21:9" pos:end="21:59">/* in user mode, phys_ram_size is not meaningful */</comment>

        <expr_stmt pos:start="23:9" pos:end="26:0"><expr pos:start="23:9" pos:end="23:59"><name pos:start="23:9" pos:end="23:28">code_gen_buffer_size</name> <operator pos:start="23:30" pos:end="23:30">=</operator> <name pos:start="23:32" pos:end="23:59">DEFAULT_CODE_GEN_BUFFER_SIZE</name></expr>;</expr_stmt>

<cpp:else pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="27:9" pos:end="27:36">/* XXX: needs adjustments */</comment>

        <expr_stmt pos:start="29:9" pos:end="32:0"><expr pos:start="29:9" pos:end="29:60"><name pos:start="29:9" pos:end="29:28">code_gen_buffer_size</name> <operator pos:start="29:30" pos:end="29:30">=</operator> <operator pos:start="29:32" pos:end="29:32">(</operator><name pos:start="29:33" pos:end="29:40">unsigned</name> <name pos:start="29:42" pos:end="29:45">long</name><operator pos:start="29:46" pos:end="29:46">)</operator><operator pos:start="29:47" pos:end="29:47">(</operator><name pos:start="29:48" pos:end="29:55">ram_size</name> <operator pos:start="29:57" pos:end="29:57">/</operator> <literal type="number" pos:start="29:59" pos:end="29:59">4</literal><operator pos:start="29:60" pos:end="29:60">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="44:0"><if pos:start="35:5" pos:end="44:0">if <condition pos:start="35:8" pos:end="35:56">(<expr pos:start="35:9" pos:end="35:55"><name pos:start="35:9" pos:end="35:28">code_gen_buffer_size</name> <operator pos:start="35:30" pos:end="35:30">&lt;</operator> <name pos:start="35:32" pos:end="35:55">MIN_CODE_GEN_BUFFER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="44:0"><block_content pos:start="37:9" pos:end="44:0">

        <expr_stmt pos:start="37:9" pos:end="44:0"><expr pos:start="37:9" pos:end="37:55"><name pos:start="37:9" pos:end="37:28">code_gen_buffer_size</name> <operator pos:start="37:30" pos:end="37:30">=</operator> <name pos:start="37:32" pos:end="37:55">MIN_CODE_GEN_BUFFER_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="39:5" pos:end="41:29">/* The code gen buffer location may have constraints depending on

       the host cpu and OS */</comment>

<cpp:if pos:start="43:1" pos:end="43:22">#<cpp:directive pos:start="43:2" pos:end="43:3">if</cpp:directive> <expr pos:start="43:5" pos:end="43:22"><call pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:11">defined</name><argument_list pos:start="43:12" pos:end="43:22">(<argument pos:start="43:13" pos:end="43:21"><expr pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:21">__linux__</name></expr></argument>)</argument_list></call></expr></cpp:if> 

    <block pos:start="45:5" pos:end="124:0">{<block_content pos:start="47:9" pos:end="117:9">

        <decl_stmt pos:start="47:9" pos:end="47:18"><decl pos:start="47:9" pos:end="47:17"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:17">flags</name></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:27"><decl pos:start="49:9" pos:end="49:26"><type pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:12">void</name> <modifier pos:start="49:14" pos:end="49:14">*</modifier></type><name pos:start="49:15" pos:end="49:19">start</name> <init pos:start="49:21" pos:end="49:26">= <expr pos:start="49:23" pos:end="49:26"><name pos:start="49:23" pos:end="49:26">NULL</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="53:9" pos:end="56:0"><expr pos:start="53:9" pos:end="53:43"><name pos:start="53:9" pos:end="53:13">flags</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <name pos:start="53:17" pos:end="53:27">MAP_PRIVATE</name> <operator pos:start="53:29" pos:end="53:29">|</operator> <name pos:start="53:31" pos:end="53:43">MAP_ANONYMOUS</name></expr>;</expr_stmt>

<cpp:if pos:start="55:1" pos:end="55:23">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:23"><call pos:start="55:5" pos:end="55:23"><name pos:start="55:5" pos:end="55:11">defined</name><argument_list pos:start="55:12" pos:end="55:23">(<argument pos:start="55:13" pos:end="55:22"><expr pos:start="55:13" pos:end="55:22"><name pos:start="55:13" pos:end="55:22">__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="57:9" pos:end="57:27"><expr pos:start="57:9" pos:end="57:26"><name pos:start="57:9" pos:end="57:13">flags</name> <operator pos:start="57:15" pos:end="57:16">|=</operator> <name pos:start="57:18" pos:end="57:26">MAP_32BIT</name></expr>;</expr_stmt>

        <comment type="block" pos:start="59:9" pos:end="59:39">/* Cannot map more than that */</comment>

        <if_stmt pos:start="61:9" pos:end="66:0"><if pos:start="61:9" pos:end="66:0">if <condition pos:start="61:12" pos:end="61:55">(<expr pos:start="61:13" pos:end="61:54"><name pos:start="61:13" pos:end="61:32">code_gen_buffer_size</name> <operator pos:start="61:34" pos:end="61:34">&gt;</operator> <operator pos:start="61:36" pos:end="61:36">(</operator><literal type="number" pos:start="61:37" pos:end="61:39">800</literal> <operator pos:start="61:41" pos:end="61:41">*</operator> <literal type="number" pos:start="61:43" pos:end="61:46">1024</literal> <operator pos:start="61:48" pos:end="61:48">*</operator> <literal type="number" pos:start="61:50" pos:end="61:53">1024</literal><operator pos:start="61:54" pos:end="61:54">)</operator></expr>)</condition><block type="pseudo" pos:start="63:13" pos:end="66:0"><block_content pos:start="63:13" pos:end="66:0">

            <expr_stmt pos:start="63:13" pos:end="66:0"><expr pos:start="63:13" pos:end="63:54"><name pos:start="63:13" pos:end="63:32">code_gen_buffer_size</name> <operator pos:start="63:34" pos:end="63:34">=</operator> <operator pos:start="63:36" pos:end="63:36">(</operator><literal type="number" pos:start="63:37" pos:end="63:39">800</literal> <operator pos:start="63:41" pos:end="63:41">*</operator> <literal type="number" pos:start="63:43" pos:end="63:46">1024</literal> <operator pos:start="63:48" pos:end="63:48">*</operator> <literal type="number" pos:start="63:50" pos:end="63:53">1024</literal><operator pos:start="63:54" pos:end="63:54">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif pos:start="65:1" pos:end="65:27">#<cpp:directive pos:start="65:2" pos:end="65:5">elif</cpp:directive> <expr pos:start="65:7" pos:end="65:27"><call pos:start="65:7" pos:end="65:27"><name pos:start="65:7" pos:end="65:13">defined</name><argument_list pos:start="65:14" pos:end="65:27">(<argument pos:start="65:15" pos:end="65:26"><expr pos:start="65:15" pos:end="65:26"><name pos:start="65:15" pos:end="65:26">__sparc_v9__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <comment type="line" pos:start="67:9" pos:end="67:75">// Map the buffer below 2G, so we can use direct calls and branches</comment>

        <expr_stmt pos:start="69:9" pos:end="69:27"><expr pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:13">flags</name> <operator pos:start="69:15" pos:end="69:16">|=</operator> <name pos:start="69:18" pos:end="69:26">MAP_FIXED</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:38"><expr pos:start="71:9" pos:end="71:37"><name pos:start="71:9" pos:end="71:13">start</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <operator pos:start="71:17" pos:end="71:17">(</operator><name pos:start="71:18" pos:end="71:21">void</name> <operator pos:start="71:23" pos:end="71:23">*</operator><operator pos:start="71:24" pos:end="71:24">)</operator> <literal type="number" pos:start="71:26" pos:end="71:37">0x60000000UL</literal></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="78:0"><if pos:start="73:9" pos:end="78:0">if <condition pos:start="73:12" pos:end="73:55">(<expr pos:start="73:13" pos:end="73:54"><name pos:start="73:13" pos:end="73:32">code_gen_buffer_size</name> <operator pos:start="73:34" pos:end="73:34">&gt;</operator> <operator pos:start="73:36" pos:end="73:36">(</operator><literal type="number" pos:start="73:37" pos:end="73:39">512</literal> <operator pos:start="73:41" pos:end="73:41">*</operator> <literal type="number" pos:start="73:43" pos:end="73:46">1024</literal> <operator pos:start="73:48" pos:end="73:48">*</operator> <literal type="number" pos:start="73:50" pos:end="73:53">1024</literal><operator pos:start="73:54" pos:end="73:54">)</operator></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="78:0"><block_content pos:start="75:13" pos:end="78:0">

            <expr_stmt pos:start="75:13" pos:end="78:0"><expr pos:start="75:13" pos:end="75:54"><name pos:start="75:13" pos:end="75:32">code_gen_buffer_size</name> <operator pos:start="75:34" pos:end="75:34">=</operator> <operator pos:start="75:36" pos:end="75:36">(</operator><literal type="number" pos:start="75:37" pos:end="75:39">512</literal> <operator pos:start="75:41" pos:end="75:41">*</operator> <literal type="number" pos:start="75:43" pos:end="75:46">1024</literal> <operator pos:start="75:48" pos:end="75:48">*</operator> <literal type="number" pos:start="75:50" pos:end="75:53">1024</literal><operator pos:start="75:54" pos:end="75:54">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif pos:start="77:1" pos:end="77:22">#<cpp:directive pos:start="77:2" pos:end="77:5">elif</cpp:directive> <expr pos:start="77:7" pos:end="77:22"><call pos:start="77:7" pos:end="77:22"><name pos:start="77:7" pos:end="77:13">defined</name><argument_list pos:start="77:14" pos:end="77:22">(<argument pos:start="77:15" pos:end="77:21"><expr pos:start="77:15" pos:end="77:21"><name pos:start="77:15" pos:end="77:21">__arm__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <comment type="block" pos:start="79:9" pos:end="79:79">/* Map the buffer below 32M, so we can use direct calls and branches */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:27"><expr pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:13">flags</name> <operator pos:start="81:15" pos:end="81:16">|=</operator> <name pos:start="81:18" pos:end="81:26">MAP_FIXED</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:38"><expr pos:start="83:9" pos:end="83:37"><name pos:start="83:9" pos:end="83:13">start</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <operator pos:start="83:17" pos:end="83:17">(</operator><name pos:start="83:18" pos:end="83:21">void</name> <operator pos:start="83:23" pos:end="83:23">*</operator><operator pos:start="83:24" pos:end="83:24">)</operator> <literal type="number" pos:start="83:26" pos:end="83:37">0x01000000UL</literal></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="90:0"><if pos:start="85:9" pos:end="90:0">if <condition pos:start="85:12" pos:end="85:52">(<expr pos:start="85:13" pos:end="85:51"><name pos:start="85:13" pos:end="85:32">code_gen_buffer_size</name> <operator pos:start="85:34" pos:end="85:34">&gt;</operator> <literal type="number" pos:start="85:36" pos:end="85:37">16</literal> <operator pos:start="85:39" pos:end="85:39">*</operator> <literal type="number" pos:start="85:41" pos:end="85:44">1024</literal> <operator pos:start="85:46" pos:end="85:46">*</operator> <literal type="number" pos:start="85:48" pos:end="85:51">1024</literal></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="90:0"><block_content pos:start="87:13" pos:end="90:0">

            <expr_stmt pos:start="87:13" pos:end="90:0"><expr pos:start="87:13" pos:end="87:51"><name pos:start="87:13" pos:end="87:32">code_gen_buffer_size</name> <operator pos:start="87:34" pos:end="87:34">=</operator> <literal type="number" pos:start="87:36" pos:end="87:37">16</literal> <operator pos:start="87:39" pos:end="87:39">*</operator> <literal type="number" pos:start="87:41" pos:end="87:44">1024</literal> <operator pos:start="87:46" pos:end="87:46">*</operator> <literal type="number" pos:start="87:48" pos:end="87:51">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif pos:start="89:1" pos:end="89:24">#<cpp:directive pos:start="89:2" pos:end="89:5">elif</cpp:directive> <expr pos:start="89:7" pos:end="89:24"><call pos:start="89:7" pos:end="89:24"><name pos:start="89:7" pos:end="89:13">defined</name><argument_list pos:start="89:14" pos:end="89:24">(<argument pos:start="89:15" pos:end="89:23"><expr pos:start="89:15" pos:end="89:23"><name pos:start="89:15" pos:end="89:23">__s390x__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <comment type="block" pos:start="91:9" pos:end="91:75">/* Map the buffer so that we can use direct calls and branches.  */</comment>

        <comment type="block" pos:start="93:9" pos:end="93:71">/* We have a +- 4GB range on the branches; leave some slop.  */</comment>

        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:62">(<expr pos:start="95:13" pos:end="95:61"><name pos:start="95:13" pos:end="95:32">code_gen_buffer_size</name> <operator pos:start="95:34" pos:end="95:34">&gt;</operator> <operator pos:start="95:36" pos:end="95:36">(</operator><literal type="number" pos:start="95:37" pos:end="95:39">3ul</literal> <operator pos:start="95:41" pos:end="95:41">*</operator> <literal type="number" pos:start="95:43" pos:end="95:46">1024</literal> <operator pos:start="95:48" pos:end="95:48">*</operator> <literal type="number" pos:start="95:50" pos:end="95:53">1024</literal> <operator pos:start="95:55" pos:end="95:55">*</operator> <literal type="number" pos:start="95:57" pos:end="95:60">1024</literal><operator pos:start="95:61" pos:end="95:61">)</operator></expr>)</condition> <block pos:start="95:64" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:60">

            <expr_stmt pos:start="97:13" pos:end="97:60"><expr pos:start="97:13" pos:end="97:59"><name pos:start="97:13" pos:end="97:32">code_gen_buffer_size</name> <operator pos:start="97:34" pos:end="97:34">=</operator> <literal type="number" pos:start="97:36" pos:end="97:38">3ul</literal> <operator pos:start="97:40" pos:end="97:40">*</operator> <literal type="number" pos:start="97:42" pos:end="97:45">1024</literal> <operator pos:start="97:47" pos:end="97:47">*</operator> <literal type="number" pos:start="97:49" pos:end="97:52">1024</literal> <operator pos:start="97:54" pos:end="97:54">*</operator> <literal type="number" pos:start="97:56" pos:end="97:59">1024</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="104:0"><expr pos:start="101:9" pos:end="101:36"><name pos:start="101:9" pos:end="101:13">start</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <operator pos:start="101:17" pos:end="101:17">(</operator><name pos:start="101:18" pos:end="101:21">void</name> <operator pos:start="101:23" pos:end="101:23">*</operator><operator pos:start="101:24" pos:end="101:24">)</operator><literal type="number" pos:start="101:25" pos:end="101:36">0x90000000UL</literal></expr>;</expr_stmt>

<cpp:endif pos:start="103:1" pos:end="103:6">#<cpp:directive pos:start="103:2" pos:end="103:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="105:9" pos:end="109:45"><expr pos:start="105:9" pos:end="109:44"><name pos:start="105:9" pos:end="105:23">code_gen_buffer</name> <operator pos:start="105:25" pos:end="105:25">=</operator> <call pos:start="105:27" pos:end="109:44"><name pos:start="105:27" pos:end="105:30">mmap</name><argument_list pos:start="105:31" pos:end="109:44">(<argument pos:start="105:32" pos:end="105:36"><expr pos:start="105:32" pos:end="105:36"><name pos:start="105:32" pos:end="105:36">start</name></expr></argument>, <argument pos:start="105:39" pos:end="105:58"><expr pos:start="105:39" pos:end="105:58"><name pos:start="105:39" pos:end="105:58">code_gen_buffer_size</name></expr></argument>,

                               <argument pos:start="107:32" pos:end="107:65"><expr pos:start="107:32" pos:end="107:65"><name pos:start="107:32" pos:end="107:41">PROT_WRITE</name> <operator pos:start="107:43" pos:end="107:43">|</operator> <name pos:start="107:45" pos:end="107:53">PROT_READ</name> <operator pos:start="107:55" pos:end="107:55">|</operator> <name pos:start="107:57" pos:end="107:65">PROT_EXEC</name></expr></argument>,

                               <argument pos:start="109:32" pos:end="109:36"><expr pos:start="109:32" pos:end="109:36"><name pos:start="109:32" pos:end="109:36">flags</name></expr></argument>, <argument pos:start="109:39" pos:end="109:40"><expr pos:start="109:39" pos:end="109:40"><operator pos:start="109:39" pos:end="109:39">-</operator><literal type="number" pos:start="109:40" pos:end="109:40">1</literal></expr></argument>, <argument pos:start="109:43" pos:end="109:43"><expr pos:start="109:43" pos:end="109:43"><literal type="number" pos:start="109:43" pos:end="109:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="117:9"><if pos:start="111:9" pos:end="117:9">if <condition pos:start="111:12" pos:end="111:42">(<expr pos:start="111:13" pos:end="111:41"><name pos:start="111:13" pos:end="111:27">code_gen_buffer</name> <operator pos:start="111:29" pos:end="111:30">==</operator> <name pos:start="111:32" pos:end="111:41">MAP_FAILED</name></expr>)</condition> <block pos:start="111:44" pos:end="117:9">{<block_content pos:start="113:13" pos:end="115:20">

            <expr_stmt pos:start="113:13" pos:end="113:78"><expr pos:start="113:13" pos:end="113:77"><call pos:start="113:13" pos:end="113:77"><name pos:start="113:13" pos:end="113:19">fprintf</name><argument_list pos:start="113:20" pos:end="113:77">(<argument pos:start="113:21" pos:end="113:26"><expr pos:start="113:21" pos:end="113:26"><name pos:start="113:21" pos:end="113:26">stderr</name></expr></argument>, <argument pos:start="113:29" pos:end="113:76"><expr pos:start="113:29" pos:end="113:76"><literal type="string" pos:start="113:29" pos:end="113:76">"Could not allocate dynamic translator buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:20"><expr pos:start="115:13" pos:end="115:19"><call pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:16">exit</name><argument_list pos:start="115:17" pos:end="115:19">(<argument pos:start="115:18" pos:end="115:18"><expr pos:start="115:18" pos:end="115:18"><literal type="number" pos:start="115:18" pos:end="115:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

<cpp:elif pos:start="121:1" pos:end="123:53">#<cpp:directive pos:start="121:2" pos:end="121:5">elif</cpp:directive> <expr pos:start="121:7" pos:end="123:53"><call pos:start="121:7" pos:end="121:26"><name pos:start="121:7" pos:end="121:13">defined</name><argument_list pos:start="121:14" pos:end="121:26">(<argument pos:start="121:15" pos:end="121:25"><expr pos:start="121:15" pos:end="121:25"><name pos:start="121:15" pos:end="121:25">__FreeBSD__</name></expr></argument>)</argument_list></call> <operator pos:start="121:28" pos:end="121:29">||</operator> <call pos:start="121:31" pos:end="121:57"><name pos:start="121:31" pos:end="121:37">defined</name><argument_list pos:start="121:38" pos:end="121:57">(<argument pos:start="121:39" pos:end="121:56"><expr pos:start="121:39" pos:end="121:56"><name pos:start="121:39" pos:end="121:56">__FreeBSD_kernel__</name></expr></argument>)</argument_list></call> \

    <operator pos:start="123:5" pos:end="123:6">||</operator> <call pos:start="123:8" pos:end="123:29"><name pos:start="123:8" pos:end="123:14">defined</name><argument_list pos:start="123:15" pos:end="123:29">(<argument pos:start="123:16" pos:end="123:28"><expr pos:start="123:16" pos:end="123:28"><name pos:start="123:16" pos:end="123:28">__DragonFly__</name></expr></argument>)</argument_list></call> <operator pos:start="123:31" pos:end="123:32">||</operator> <call pos:start="123:34" pos:end="123:53"><name pos:start="123:34" pos:end="123:40">defined</name><argument_list pos:start="123:41" pos:end="123:53">(<argument pos:start="123:42" pos:end="123:52"><expr pos:start="123:42" pos:end="123:52"><name pos:start="123:42" pos:end="123:52">__OpenBSD__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <block pos:start="125:5" pos:end="182:0">{<block_content pos:start="127:9" pos:end="177:9">

        <decl_stmt pos:start="127:9" pos:end="127:18"><decl pos:start="127:9" pos:end="127:17"><type pos:start="127:9" pos:end="127:11"><name pos:start="127:9" pos:end="127:11">int</name></type> <name pos:start="127:13" pos:end="127:17">flags</name></decl>;</decl_stmt>

        <decl_stmt pos:start="129:9" pos:end="129:26"><decl pos:start="129:9" pos:end="129:25"><type pos:start="129:9" pos:end="129:14"><name pos:start="129:9" pos:end="129:12">void</name> <modifier pos:start="129:14" pos:end="129:14">*</modifier></type><name pos:start="129:15" pos:end="129:18">addr</name> <init pos:start="129:20" pos:end="129:25">= <expr pos:start="129:22" pos:end="129:25"><name pos:start="129:22" pos:end="129:25">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="131:9" pos:end="134:0"><expr pos:start="131:9" pos:end="131:43"><name pos:start="131:9" pos:end="131:13">flags</name> <operator pos:start="131:15" pos:end="131:15">=</operator> <name pos:start="131:17" pos:end="131:27">MAP_PRIVATE</name> <operator pos:start="131:29" pos:end="131:29">|</operator> <name pos:start="131:31" pos:end="131:43">MAP_ANONYMOUS</name></expr>;</expr_stmt>

<cpp:if pos:start="133:1" pos:end="133:23">#<cpp:directive pos:start="133:2" pos:end="133:3">if</cpp:directive> <expr pos:start="133:5" pos:end="133:23"><call pos:start="133:5" pos:end="133:23"><name pos:start="133:5" pos:end="133:11">defined</name><argument_list pos:start="133:12" pos:end="133:23">(<argument pos:start="133:13" pos:end="133:22"><expr pos:start="133:13" pos:end="133:22"><name pos:start="133:13" pos:end="133:22">__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <comment type="block" pos:start="135:9" pos:end="137:32">/* FreeBSD doesn't have MAP_32BIT, use MAP_FIXED and assume

         * 0x40000000 is free */</comment>

        <expr_stmt pos:start="139:9" pos:end="139:27"><expr pos:start="139:9" pos:end="139:26"><name pos:start="139:9" pos:end="139:13">flags</name> <operator pos:start="139:15" pos:end="139:16">|=</operator> <name pos:start="139:18" pos:end="139:26">MAP_FIXED</name></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:34"><expr pos:start="141:9" pos:end="141:33"><name pos:start="141:9" pos:end="141:12">addr</name> <operator pos:start="141:14" pos:end="141:14">=</operator> <operator pos:start="141:16" pos:end="141:16">(</operator><name pos:start="141:17" pos:end="141:20">void</name> <operator pos:start="141:22" pos:end="141:22">*</operator><operator pos:start="141:23" pos:end="141:23">)</operator><literal type="number" pos:start="141:24" pos:end="141:33">0x40000000</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="143:9" pos:end="143:39">/* Cannot map more than that */</comment>

        <if_stmt pos:start="145:9" pos:end="150:0"><if pos:start="145:9" pos:end="150:0">if <condition pos:start="145:12" pos:end="145:55">(<expr pos:start="145:13" pos:end="145:54"><name pos:start="145:13" pos:end="145:32">code_gen_buffer_size</name> <operator pos:start="145:34" pos:end="145:34">&gt;</operator> <operator pos:start="145:36" pos:end="145:36">(</operator><literal type="number" pos:start="145:37" pos:end="145:39">800</literal> <operator pos:start="145:41" pos:end="145:41">*</operator> <literal type="number" pos:start="145:43" pos:end="145:46">1024</literal> <operator pos:start="145:48" pos:end="145:48">*</operator> <literal type="number" pos:start="145:50" pos:end="145:53">1024</literal><operator pos:start="145:54" pos:end="145:54">)</operator></expr>)</condition><block type="pseudo" pos:start="147:13" pos:end="150:0"><block_content pos:start="147:13" pos:end="150:0">

            <expr_stmt pos:start="147:13" pos:end="150:0"><expr pos:start="147:13" pos:end="147:54"><name pos:start="147:13" pos:end="147:32">code_gen_buffer_size</name> <operator pos:start="147:34" pos:end="147:34">=</operator> <operator pos:start="147:36" pos:end="147:36">(</operator><literal type="number" pos:start="147:37" pos:end="147:39">800</literal> <operator pos:start="147:41" pos:end="147:41">*</operator> <literal type="number" pos:start="147:43" pos:end="147:46">1024</literal> <operator pos:start="147:48" pos:end="147:48">*</operator> <literal type="number" pos:start="147:50" pos:end="147:53">1024</literal><operator pos:start="147:54" pos:end="147:54">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif pos:start="149:1" pos:end="149:27">#<cpp:directive pos:start="149:2" pos:end="149:5">elif</cpp:directive> <expr pos:start="149:7" pos:end="149:27"><call pos:start="149:7" pos:end="149:27"><name pos:start="149:7" pos:end="149:13">defined</name><argument_list pos:start="149:14" pos:end="149:27">(<argument pos:start="149:15" pos:end="149:26"><expr pos:start="149:15" pos:end="149:26"><name pos:start="149:15" pos:end="149:26">__sparc_v9__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

        <comment type="line" pos:start="151:9" pos:end="151:75">// Map the buffer below 2G, so we can use direct calls and branches</comment>

        <expr_stmt pos:start="153:9" pos:end="153:27"><expr pos:start="153:9" pos:end="153:26"><name pos:start="153:9" pos:end="153:13">flags</name> <operator pos:start="153:15" pos:end="153:16">|=</operator> <name pos:start="153:18" pos:end="153:26">MAP_FIXED</name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:37"><expr pos:start="155:9" pos:end="155:36"><name pos:start="155:9" pos:end="155:12">addr</name> <operator pos:start="155:14" pos:end="155:14">=</operator> <operator pos:start="155:16" pos:end="155:16">(</operator><name pos:start="155:17" pos:end="155:20">void</name> <operator pos:start="155:22" pos:end="155:22">*</operator><operator pos:start="155:23" pos:end="155:23">)</operator> <literal type="number" pos:start="155:25" pos:end="155:36">0x60000000UL</literal></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="164:0"><if pos:start="157:9" pos:end="164:0">if <condition pos:start="157:12" pos:end="157:55">(<expr pos:start="157:13" pos:end="157:54"><name pos:start="157:13" pos:end="157:32">code_gen_buffer_size</name> <operator pos:start="157:34" pos:end="157:34">&gt;</operator> <operator pos:start="157:36" pos:end="157:36">(</operator><literal type="number" pos:start="157:37" pos:end="157:39">512</literal> <operator pos:start="157:41" pos:end="157:41">*</operator> <literal type="number" pos:start="157:43" pos:end="157:46">1024</literal> <operator pos:start="157:48" pos:end="157:48">*</operator> <literal type="number" pos:start="157:50" pos:end="157:53">1024</literal><operator pos:start="157:54" pos:end="157:54">)</operator></expr>)</condition> <block pos:start="157:57" pos:end="164:0">{<block_content pos:start="159:13" pos:end="159:55">

            <expr_stmt pos:start="159:13" pos:end="159:55"><expr pos:start="159:13" pos:end="159:54"><name pos:start="159:13" pos:end="159:32">code_gen_buffer_size</name> <operator pos:start="159:34" pos:end="159:34">=</operator> <operator pos:start="159:36" pos:end="159:36">(</operator><literal type="number" pos:start="159:37" pos:end="159:39">512</literal> <operator pos:start="159:41" pos:end="159:41">*</operator> <literal type="number" pos:start="159:43" pos:end="159:46">1024</literal> <operator pos:start="159:48" pos:end="159:48">*</operator> <literal type="number" pos:start="159:50" pos:end="159:53">1024</literal><operator pos:start="159:54" pos:end="159:54">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="163:1" pos:end="163:6">#<cpp:directive pos:start="163:2" pos:end="163:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="165:9" pos:end="169:45"><expr pos:start="165:9" pos:end="169:44"><name pos:start="165:9" pos:end="165:23">code_gen_buffer</name> <operator pos:start="165:25" pos:end="165:25">=</operator> <call pos:start="165:27" pos:end="169:44"><name pos:start="165:27" pos:end="165:30">mmap</name><argument_list pos:start="165:31" pos:end="169:44">(<argument pos:start="165:32" pos:end="165:35"><expr pos:start="165:32" pos:end="165:35"><name pos:start="165:32" pos:end="165:35">addr</name></expr></argument>, <argument pos:start="165:38" pos:end="165:57"><expr pos:start="165:38" pos:end="165:57"><name pos:start="165:38" pos:end="165:57">code_gen_buffer_size</name></expr></argument>,

                               <argument pos:start="167:32" pos:end="167:65"><expr pos:start="167:32" pos:end="167:65"><name pos:start="167:32" pos:end="167:41">PROT_WRITE</name> <operator pos:start="167:43" pos:end="167:43">|</operator> <name pos:start="167:45" pos:end="167:53">PROT_READ</name> <operator pos:start="167:55" pos:end="167:55">|</operator> <name pos:start="167:57" pos:end="167:65">PROT_EXEC</name></expr></argument>, 

                               <argument pos:start="169:32" pos:end="169:36"><expr pos:start="169:32" pos:end="169:36"><name pos:start="169:32" pos:end="169:36">flags</name></expr></argument>, <argument pos:start="169:39" pos:end="169:40"><expr pos:start="169:39" pos:end="169:40"><operator pos:start="169:39" pos:end="169:39">-</operator><literal type="number" pos:start="169:40" pos:end="169:40">1</literal></expr></argument>, <argument pos:start="169:43" pos:end="169:43"><expr pos:start="169:43" pos:end="169:43"><literal type="number" pos:start="169:43" pos:end="169:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="177:9"><if pos:start="171:9" pos:end="177:9">if <condition pos:start="171:12" pos:end="171:42">(<expr pos:start="171:13" pos:end="171:41"><name pos:start="171:13" pos:end="171:27">code_gen_buffer</name> <operator pos:start="171:29" pos:end="171:30">==</operator> <name pos:start="171:32" pos:end="171:41">MAP_FAILED</name></expr>)</condition> <block pos:start="171:44" pos:end="177:9">{<block_content pos:start="173:13" pos:end="175:20">

            <expr_stmt pos:start="173:13" pos:end="173:78"><expr pos:start="173:13" pos:end="173:77"><call pos:start="173:13" pos:end="173:77"><name pos:start="173:13" pos:end="173:19">fprintf</name><argument_list pos:start="173:20" pos:end="173:77">(<argument pos:start="173:21" pos:end="173:26"><expr pos:start="173:21" pos:end="173:26"><name pos:start="173:21" pos:end="173:26">stderr</name></expr></argument>, <argument pos:start="173:29" pos:end="173:76"><expr pos:start="173:29" pos:end="173:76"><literal type="string" pos:start="173:29" pos:end="173:76">"Could not allocate dynamic translator buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:20"><expr pos:start="175:13" pos:end="175:19"><call pos:start="175:13" pos:end="175:19"><name pos:start="175:13" pos:end="175:16">exit</name><argument_list pos:start="175:17" pos:end="175:19">(<argument pos:start="175:18" pos:end="175:18"><expr pos:start="175:18" pos:end="175:18"><literal type="number" pos:start="175:18" pos:end="175:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

<cpp:else pos:start="181:1" pos:end="181:5">#<cpp:directive pos:start="181:2" pos:end="181:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="183:5" pos:end="183:56"><expr pos:start="183:5" pos:end="183:55"><name pos:start="183:5" pos:end="183:19">code_gen_buffer</name> <operator pos:start="183:21" pos:end="183:21">=</operator> <call pos:start="183:23" pos:end="183:55"><name pos:start="183:23" pos:end="183:33">qemu_malloc</name><argument_list pos:start="183:34" pos:end="183:55">(<argument pos:start="183:35" pos:end="183:54"><expr pos:start="183:35" pos:end="183:54"><name pos:start="183:35" pos:end="183:54">code_gen_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="190:0"><expr pos:start="185:5" pos:end="185:51"><call pos:start="185:5" pos:end="185:51"><name pos:start="185:5" pos:end="185:12">map_exec</name><argument_list pos:start="185:13" pos:end="185:51">(<argument pos:start="185:14" pos:end="185:28"><expr pos:start="185:14" pos:end="185:28"><name pos:start="185:14" pos:end="185:28">code_gen_buffer</name></expr></argument>, <argument pos:start="185:31" pos:end="185:50"><expr pos:start="185:31" pos:end="185:50"><name pos:start="185:31" pos:end="185:50">code_gen_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="187:1" pos:end="187:6">#<cpp:directive pos:start="187:2" pos:end="187:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="189:1" pos:end="189:6">#<cpp:directive pos:start="189:2" pos:end="189:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="189:8" pos:end="189:40">/* !USE_STATIC_CODE_GEN_BUFFER */</comment>

    <expr_stmt pos:start="191:5" pos:end="191:59"><expr pos:start="191:5" pos:end="191:58"><call pos:start="191:5" pos:end="191:58"><name pos:start="191:5" pos:end="191:12">map_exec</name><argument_list pos:start="191:13" pos:end="191:58">(<argument pos:start="191:14" pos:end="191:30"><expr pos:start="191:14" pos:end="191:30"><name pos:start="191:14" pos:end="191:30">code_gen_prologue</name></expr></argument>, <argument pos:start="191:33" pos:end="191:57"><expr pos:start="191:33" pos:end="191:57"><sizeof pos:start="191:33" pos:end="191:57">sizeof<argument_list pos:start="191:39" pos:end="191:57">(<argument pos:start="191:40" pos:end="191:56"><expr pos:start="191:40" pos:end="191:56"><name pos:start="191:40" pos:end="191:56">code_gen_prologue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="195:41"><expr pos:start="193:5" pos:end="195:40"><name pos:start="193:5" pos:end="193:28">code_gen_buffer_max_size</name> <operator pos:start="193:30" pos:end="193:30">=</operator> <name pos:start="193:32" pos:end="193:51">code_gen_buffer_size</name> <operator pos:start="193:53" pos:end="193:53">-</operator> 

        <operator pos:start="195:9" pos:end="195:9">(</operator><name pos:start="195:10" pos:end="195:24">TCG_MAX_OP_SIZE</name> <operator pos:start="195:26" pos:end="195:26">*</operator> <name pos:start="195:28" pos:end="195:39">OPC_MAX_SIZE</name><operator pos:start="195:40" pos:end="195:40">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:73"><expr pos:start="197:5" pos:end="197:72"><name pos:start="197:5" pos:end="197:23">code_gen_max_blocks</name> <operator pos:start="197:25" pos:end="197:25">=</operator> <name pos:start="197:27" pos:end="197:46">code_gen_buffer_size</name> <operator pos:start="197:48" pos:end="197:48">/</operator> <name pos:start="197:50" pos:end="197:72">CODE_GEN_AVG_BLOCK_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:70"><expr pos:start="199:5" pos:end="199:69"><name pos:start="199:5" pos:end="199:7">tbs</name> <operator pos:start="199:9" pos:end="199:9">=</operator> <call pos:start="199:11" pos:end="199:69"><name pos:start="199:11" pos:end="199:21">qemu_malloc</name><argument_list pos:start="199:22" pos:end="199:69">(<argument pos:start="199:23" pos:end="199:68"><expr pos:start="199:23" pos:end="199:68"><name pos:start="199:23" pos:end="199:41">code_gen_max_blocks</name> <operator pos:start="199:43" pos:end="199:43">*</operator> <sizeof pos:start="199:45" pos:end="199:68">sizeof<argument_list pos:start="199:51" pos:end="199:68">(<argument pos:start="199:52" pos:end="199:67"><expr pos:start="199:52" pos:end="199:67"><name pos:start="199:52" pos:end="199:67">TranslationBlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
