<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2266.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">stl_phys_notdirty</name><parameter_list pos:start="1:23" pos:end="1:67">(<parameter pos:start="1:24" pos:end="1:39"><decl pos:start="1:24" pos:end="1:39"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:35">AddressSpace</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">as</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:52"><decl pos:start="1:42" pos:end="1:52"><type pos:start="1:42" pos:end="1:52"><name pos:start="1:42" pos:end="1:47">hwaddr</name></type> <name pos:start="1:49" pos:end="1:52">addr</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:62">uint32_t</name></type> <name pos:start="1:64" pos:end="1:66">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MemoryRegion</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">mr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">hwaddr</name></type> <name pos:start="9:12" pos:end="9:12">l</name> <init pos:start="9:14" pos:end="9:16">= <expr pos:start="9:16" pos:end="9:16"><literal type="number" pos:start="9:16" pos:end="9:16">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:16">addr1</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="17:39"><expr pos:start="15:5" pos:end="17:38"><name pos:start="15:5" pos:end="15:6">mr</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <call pos:start="15:10" pos:end="17:38"><name pos:start="15:10" pos:end="15:32">address_space_translate</name><argument_list pos:start="15:33" pos:end="17:38">(<argument pos:start="15:34" pos:end="15:35"><expr pos:start="15:34" pos:end="15:35"><name pos:start="15:34" pos:end="15:35">as</name></expr></argument>, <argument pos:start="15:38" pos:end="15:41"><expr pos:start="15:38" pos:end="15:41"><name pos:start="15:38" pos:end="15:41">addr</name></expr></argument>, <argument pos:start="15:44" pos:end="15:49"><expr pos:start="15:44" pos:end="15:49"><operator pos:start="15:44" pos:end="15:44">&amp;</operator><name pos:start="15:45" pos:end="15:49">addr1</name></expr></argument>, <argument pos:start="15:52" pos:end="15:53"><expr pos:start="15:52" pos:end="15:53"><operator pos:start="15:52" pos:end="15:52">&amp;</operator><name pos:start="15:53" pos:end="15:53">l</name></expr></argument>,

                                 <argument pos:start="17:34" pos:end="17:37"><expr pos:start="17:34" pos:end="17:37"><name pos:start="17:34" pos:end="17:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="53:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:52">(<expr pos:start="19:9" pos:end="19:51"><name pos:start="19:9" pos:end="19:9">l</name> <operator pos:start="19:11" pos:end="19:11">&lt;</operator> <literal type="number" pos:start="19:13" pos:end="19:13">4</literal> <operator pos:start="19:15" pos:end="19:16">||</operator> <operator pos:start="19:18" pos:end="19:18">!</operator><call pos:start="19:19" pos:end="19:51"><name pos:start="19:19" pos:end="19:41">memory_access_is_direct</name><argument_list pos:start="19:42" pos:end="19:51">(<argument pos:start="19:43" pos:end="19:44"><expr pos:start="19:43" pos:end="19:44"><name pos:start="19:43" pos:end="19:44">mr</name></expr></argument>, <argument pos:start="19:47" pos:end="19:50"><expr pos:start="19:47" pos:end="19:50"><name pos:start="19:47" pos:end="19:50">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:54" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:40">

        <expr_stmt pos:start="21:9" pos:end="21:40"><expr pos:start="21:9" pos:end="21:39"><call pos:start="21:9" pos:end="21:39"><name pos:start="21:9" pos:end="21:20">io_mem_write</name><argument_list pos:start="21:21" pos:end="21:39">(<argument pos:start="21:22" pos:end="21:23"><expr pos:start="21:22" pos:end="21:23"><name pos:start="21:22" pos:end="21:23">mr</name></expr></argument>, <argument pos:start="21:26" pos:end="21:30"><expr pos:start="21:26" pos:end="21:30"><name pos:start="21:26" pos:end="21:30">addr1</name></expr></argument>, <argument pos:start="21:33" pos:end="21:35"><expr pos:start="21:33" pos:end="21:35"><name pos:start="21:33" pos:end="21:35">val</name></expr></argument>, <argument pos:start="21:38" pos:end="21:38"><expr pos:start="21:38" pos:end="21:38"><literal type="number" pos:start="21:38" pos:end="21:38">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="53:5">else <block pos:start="23:12" pos:end="53:5">{<block_content pos:start="25:9" pos:end="51:9">

        <expr_stmt pos:start="25:9" pos:end="25:67"><expr pos:start="25:9" pos:end="25:66"><name pos:start="25:9" pos:end="25:13">addr1</name> <operator pos:start="25:15" pos:end="25:16">+=</operator> <call pos:start="25:18" pos:end="25:47"><name pos:start="25:18" pos:end="25:43">memory_region_get_ram_addr</name><argument_list pos:start="25:44" pos:end="25:47">(<argument pos:start="25:45" pos:end="25:46"><expr pos:start="25:45" pos:end="25:46"><name pos:start="25:45" pos:end="25:46">mr</name></expr></argument>)</argument_list></call> <operator pos:start="25:49" pos:end="25:49">&amp;</operator> <name pos:start="25:51" pos:end="25:66">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:38"><expr pos:start="27:9" pos:end="27:37"><name pos:start="27:9" pos:end="27:11">ptr</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:37"><name pos:start="27:15" pos:end="27:30">qemu_get_ram_ptr</name><argument_list pos:start="27:31" pos:end="27:37">(<argument pos:start="27:32" pos:end="27:36"><expr pos:start="27:32" pos:end="27:36"><name pos:start="27:32" pos:end="27:36">addr1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:24"><expr pos:start="29:9" pos:end="29:23"><call pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:13">stl_p</name><argument_list pos:start="29:14" pos:end="29:23">(<argument pos:start="29:15" pos:end="29:17"><expr pos:start="29:15" pos:end="29:17"><name pos:start="29:15" pos:end="29:17">ptr</name></expr></argument>, <argument pos:start="29:20" pos:end="29:22"><expr pos:start="29:20" pos:end="29:22"><name pos:start="29:20" pos:end="29:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="33:9" pos:end="51:9"><if pos:start="33:9" pos:end="51:9">if <condition pos:start="33:12" pos:end="33:35">(<expr pos:start="33:13" pos:end="33:34"><call pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:20">unlikely</name><argument_list pos:start="33:21" pos:end="33:34">(<argument pos:start="33:22" pos:end="33:33"><expr pos:start="33:22" pos:end="33:33"><name pos:start="33:22" pos:end="33:33">in_migration</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:37" pos:end="51:9">{<block_content pos:start="35:13" pos:end="49:13">

            <if_stmt pos:start="35:13" pos:end="49:13"><if pos:start="35:13" pos:end="49:13">if <condition pos:start="35:16" pos:end="35:52">(<expr pos:start="35:17" pos:end="35:51"><call pos:start="35:17" pos:end="35:51"><name pos:start="35:17" pos:end="35:44">cpu_physical_memory_is_clean</name><argument_list pos:start="35:45" pos:end="35:51">(<argument pos:start="35:46" pos:end="35:50"><expr pos:start="35:46" pos:end="35:50"><name pos:start="35:46" pos:end="35:50">addr1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:54" pos:end="49:13">{<block_content pos:start="39:17" pos:end="47:76">

                <comment type="block" pos:start="37:17" pos:end="37:37">/* invalidate code */</comment>

                <expr_stmt pos:start="39:17" pos:end="39:67"><expr pos:start="39:17" pos:end="39:66"><call pos:start="39:17" pos:end="39:66"><name pos:start="39:17" pos:end="39:45">tb_invalidate_phys_page_range</name><argument_list pos:start="39:46" pos:end="39:66">(<argument pos:start="39:47" pos:end="39:51"><expr pos:start="39:47" pos:end="39:51"><name pos:start="39:47" pos:end="39:51">addr1</name></expr></argument>, <argument pos:start="39:54" pos:end="39:62"><expr pos:start="39:54" pos:end="39:62"><name pos:start="39:54" pos:end="39:58">addr1</name> <operator pos:start="39:60" pos:end="39:60">+</operator> <literal type="number" pos:start="39:62" pos:end="39:62">4</literal></expr></argument>, <argument pos:start="39:65" pos:end="39:65"><expr pos:start="39:65" pos:end="39:65"><literal type="number" pos:start="39:65" pos:end="39:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="41:17" pos:end="41:35">/* set dirty bit */</comment>

                <expr_stmt pos:start="43:17" pos:end="45:75"><expr pos:start="43:17" pos:end="45:74"><call pos:start="43:17" pos:end="45:74"><name pos:start="43:17" pos:end="43:50">cpu_physical_memory_set_dirty_flag</name><argument_list pos:start="43:51" pos:end="45:74">(<argument pos:start="43:52" pos:end="43:56"><expr pos:start="43:52" pos:end="43:56"><name pos:start="43:52" pos:end="43:56">addr1</name></expr></argument>,

                                                   <argument pos:start="45:52" pos:end="45:73"><expr pos:start="45:52" pos:end="45:73"><name pos:start="45:52" pos:end="45:73">DIRTY_MEMORY_MIGRATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:76"><expr pos:start="47:17" pos:end="47:75"><call pos:start="47:17" pos:end="47:75"><name pos:start="47:17" pos:end="47:50">cpu_physical_memory_set_dirty_flag</name><argument_list pos:start="47:51" pos:end="47:75">(<argument pos:start="47:52" pos:end="47:56"><expr pos:start="47:52" pos:end="47:56"><name pos:start="47:52" pos:end="47:56">addr1</name></expr></argument>, <argument pos:start="47:59" pos:end="47:74"><expr pos:start="47:59" pos:end="47:74"><name pos:start="47:59" pos:end="47:74">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
