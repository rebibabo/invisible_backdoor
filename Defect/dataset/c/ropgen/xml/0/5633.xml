<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5633.c" pos:tabs="8"><decl_stmt pos:start="1:1" pos:end="95:1"><decl pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">av_expr_parse</name><argument_list pos:start="1:18" pos:end="9:48">(<argument pos:start="1:19" pos:end="1:31"><expr pos:start="1:19" pos:end="1:31"><name pos:start="1:19" pos:end="1:24">AVExpr</name> <operator pos:start="1:26" pos:end="1:26">*</operator><operator pos:start="1:27" pos:end="1:27">*</operator><name pos:start="1:28" pos:end="1:31">expr</name></expr></argument>, <argument pos:start="1:34" pos:end="1:46"><expr pos:start="1:34" pos:end="1:46"><specifier pos:start="1:34" pos:end="1:38">const</specifier> <name pos:start="1:40" pos:end="1:43">char</name> <operator pos:start="1:45" pos:end="1:45">*</operator><name pos:start="1:46" pos:end="1:46">s</name></expr></argument>,

                  <argument pos:start="3:19" pos:end="3:49"><expr pos:start="3:19" pos:end="3:49"><specifier pos:start="3:19" pos:end="3:23">const</specifier> <name pos:start="3:25" pos:end="3:28">char</name> <operator pos:start="3:30" pos:end="3:30">*</operator> <specifier pos:start="3:32" pos:end="3:36">const</specifier> <operator pos:start="3:38" pos:end="3:38">*</operator><name pos:start="3:39" pos:end="3:49">const_names</name></expr></argument>,

                  <argument pos:start="5:19" pos:end="5:49"><expr pos:start="5:19" pos:end="5:49"><specifier pos:start="5:19" pos:end="5:23">const</specifier> <name pos:start="5:25" pos:end="5:28">char</name> <operator pos:start="5:30" pos:end="5:30">*</operator> <specifier pos:start="5:32" pos:end="5:36">const</specifier> <operator pos:start="5:38" pos:end="5:38">*</operator><name pos:start="5:39" pos:end="5:49">func1_names</name></expr></argument>, <argument pos:start="5:52" pos:end="5:91"><expr pos:start="5:52" pos:end="5:91"><call pos:start="5:52" pos:end="5:91"><call pos:start="5:52" pos:end="5:75"><name pos:start="5:52" pos:end="5:57">double</name> <argument_list pos:start="5:59" pos:end="5:75">(<argument pos:start="5:60" pos:end="5:74"><expr pos:start="5:60" pos:end="5:74"><operator pos:start="5:60" pos:end="5:60">*</operator> <specifier pos:start="5:62" pos:end="5:66">const</specifier> <operator pos:start="5:68" pos:end="5:68">*</operator><name pos:start="5:69" pos:end="5:74">funcs1</name></expr></argument>)</argument_list></call><argument_list pos:start="5:76" pos:end="5:91">(<argument pos:start="5:77" pos:end="5:82"><expr pos:start="5:77" pos:end="5:82"><name pos:start="5:77" pos:end="5:80">void</name> <operator pos:start="5:82" pos:end="5:82">*</operator></expr></argument>, <argument pos:start="5:85" pos:end="5:90"><expr pos:start="5:85" pos:end="5:90"><name pos:start="5:85" pos:end="5:90">double</name></expr></argument>)</argument_list></call></expr></argument>,

                  <argument pos:start="7:19" pos:end="7:49"><expr pos:start="7:19" pos:end="7:49"><specifier pos:start="7:19" pos:end="7:23">const</specifier> <name pos:start="7:25" pos:end="7:28">char</name> <operator pos:start="7:30" pos:end="7:30">*</operator> <specifier pos:start="7:32" pos:end="7:36">const</specifier> <operator pos:start="7:38" pos:end="7:38">*</operator><name pos:start="7:39" pos:end="7:49">func2_names</name></expr></argument>, <argument pos:start="7:52" pos:end="7:99"><expr pos:start="7:52" pos:end="7:99"><call pos:start="7:52" pos:end="7:99"><call pos:start="7:52" pos:end="7:75"><name pos:start="7:52" pos:end="7:57">double</name> <argument_list pos:start="7:59" pos:end="7:75">(<argument pos:start="7:60" pos:end="7:74"><expr pos:start="7:60" pos:end="7:74"><operator pos:start="7:60" pos:end="7:60">*</operator> <specifier pos:start="7:62" pos:end="7:66">const</specifier> <operator pos:start="7:68" pos:end="7:68">*</operator><name pos:start="7:69" pos:end="7:74">funcs2</name></expr></argument>)</argument_list></call><argument_list pos:start="7:76" pos:end="7:99">(<argument pos:start="7:77" pos:end="7:82"><expr pos:start="7:77" pos:end="7:82"><name pos:start="7:77" pos:end="7:80">void</name> <operator pos:start="7:82" pos:end="7:82">*</operator></expr></argument>, <argument pos:start="7:85" pos:end="7:90"><expr pos:start="7:85" pos:end="7:90"><name pos:start="7:85" pos:end="7:90">double</name></expr></argument>, <argument pos:start="7:93" pos:end="7:98"><expr pos:start="7:93" pos:end="7:98"><name pos:start="7:93" pos:end="7:98">double</name></expr></argument>)</argument_list></call></expr></argument>,

                  <argument pos:start="9:19" pos:end="9:32"><expr pos:start="9:19" pos:end="9:32"><name pos:start="9:19" pos:end="9:21">int</name> <name pos:start="9:23" pos:end="9:32">log_offset</name></expr></argument>, <argument pos:start="9:35" pos:end="9:47"><expr pos:start="9:35" pos:end="9:47"><name pos:start="9:35" pos:end="9:38">void</name> <operator pos:start="9:40" pos:end="9:40">*</operator><name pos:start="9:41" pos:end="9:47">log_ctx</name></expr></argument>)</argument_list>

<block pos:start="11:1" pos:end="95:1">{<block_content pos:start="13:5" pos:end="93:15">

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">Parser</name></type> <name pos:start="13:12" pos:end="13:12">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:10">AVExpr</name> <modifier pos:start="15:12" pos:end="15:12">*</modifier></type><name pos:start="15:13" pos:end="15:13">e</name> <init pos:start="15:15" pos:end="15:20">= <expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:39"><decl pos:start="17:5" pos:end="17:38"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:11">w</name> <init pos:start="17:13" pos:end="17:38">= <expr pos:start="17:15" pos:end="17:38"><call pos:start="17:15" pos:end="17:38"><name pos:start="17:15" pos:end="17:23">av_malloc</name><argument_list pos:start="17:24" pos:end="17:38">(<argument pos:start="17:25" pos:end="17:37"><expr pos:start="17:25" pos:end="17:37"><call pos:start="17:25" pos:end="17:33"><name pos:start="17:25" pos:end="17:30">strlen</name><argument_list pos:start="17:31" pos:end="17:33">(<argument pos:start="17:32" pos:end="17:32"><expr pos:start="17:32" pos:end="17:32"><name pos:start="17:32" pos:end="17:32">s</name></expr></argument>)</argument_list></call> <operator pos:start="17:35" pos:end="17:35">+</operator> <literal type="number" pos:start="17:37" pos:end="17:37">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">char</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:12">wp</name> <init pos:start="19:14" pos:end="19:16">= <expr pos:start="19:16" pos:end="19:16"><name pos:start="19:16" pos:end="19:16">w</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:18">s0</name> <init pos:start="21:20" pos:end="21:22">= <expr pos:start="21:22" pos:end="21:22"><name pos:start="21:22" pos:end="21:22">s</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name> <init pos:start="23:13" pos:end="23:15">= <expr pos:start="23:15" pos:end="23:15"><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:31"><if pos:start="27:5" pos:end="29:31">if <condition pos:start="27:8" pos:end="27:11">(<expr pos:start="27:9" pos:end="27:10"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:10">w</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:31"><block_content pos:start="29:9" pos:end="29:31">

        <return pos:start="29:9" pos:end="29:31">return <expr pos:start="29:16" pos:end="29:30"><call pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:30">(<argument pos:start="29:24" pos:end="29:29"><expr pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="33:5" pos:end="35:42">while <condition pos:start="33:11" pos:end="33:14">(<expr pos:start="33:12" pos:end="33:13"><operator pos:start="33:12" pos:end="33:12">*</operator><name pos:start="33:13" pos:end="33:13">s</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:42"><block_content pos:start="35:9" pos:end="35:42">

        <if_stmt pos:start="35:9" pos:end="35:42"><if pos:start="35:9" pos:end="35:42">if <condition pos:start="35:12" pos:end="35:27">(<expr pos:start="35:13" pos:end="35:26"><operator pos:start="35:13" pos:end="35:13">!</operator><call pos:start="35:14" pos:end="35:26"><name pos:start="35:14" pos:end="35:20">isspace</name><argument_list pos:start="35:21" pos:end="35:26">(<argument pos:start="35:22" pos:end="35:25"><expr pos:start="35:22" pos:end="35:25"><operator pos:start="35:22" pos:end="35:22">*</operator><name pos:start="35:23" pos:end="35:23">s</name><operator pos:start="35:24" pos:end="35:25">++</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="35:29" pos:end="35:42"><block_content pos:start="35:29" pos:end="35:42"> <expr_stmt pos:start="35:29" pos:end="35:42"><expr pos:start="35:29" pos:end="35:41"><operator pos:start="35:29" pos:end="35:29">*</operator><name pos:start="35:30" pos:end="35:31">wp</name><operator pos:start="35:32" pos:end="35:33">++</operator> <operator pos:start="35:35" pos:end="35:35">=</operator> <name pos:start="35:37" pos:end="35:41"><name pos:start="35:37" pos:end="35:37">s</name><index pos:start="35:38" pos:end="35:41">[<expr pos:start="35:39" pos:end="35:40"><operator pos:start="35:39" pos:end="35:39">-</operator><literal type="number" pos:start="35:40" pos:end="35:40">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></while>

    <expr_stmt pos:start="37:5" pos:end="37:14"><expr pos:start="37:5" pos:end="37:13"><operator pos:start="37:5" pos:end="37:5">*</operator><name pos:start="37:6" pos:end="37:7">wp</name><operator pos:start="37:8" pos:end="37:9">++</operator> <operator pos:start="37:11" pos:end="37:11">=</operator> <literal type="number" pos:start="37:13" pos:end="37:13">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:26"><expr pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:11"><name pos:start="41:5" pos:end="41:5">p</name><operator pos:start="41:6" pos:end="41:6">.</operator><name pos:start="41:7" pos:end="41:11">class</name></name>      <operator pos:start="41:18" pos:end="41:18">=</operator> <operator pos:start="41:20" pos:end="41:20">&amp;</operator><name pos:start="41:21" pos:end="41:25">class</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:17"><name pos:start="43:5" pos:end="43:5">p</name><operator pos:start="43:6" pos:end="43:6">.</operator><name pos:start="43:7" pos:end="43:17">stack_index</name></name><operator pos:start="43:18" pos:end="43:18">=</operator><literal type="number" pos:start="43:19" pos:end="43:21">100</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:11"><expr pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:5">p</name><operator pos:start="45:6" pos:end="45:6">.</operator><name pos:start="45:7" pos:end="45:7">s</name></name><operator pos:start="45:8" pos:end="45:8">=</operator> <name pos:start="45:10" pos:end="45:10">w</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:5">p</name><operator pos:start="47:6" pos:end="47:6">.</operator><name pos:start="47:7" pos:end="47:17">const_names</name></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:31">const_names</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:27"><expr pos:start="49:5" pos:end="49:26"><name pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:5">p</name><operator pos:start="49:6" pos:end="49:6">.</operator><name pos:start="49:7" pos:end="49:12">funcs1</name></name>      <operator pos:start="49:19" pos:end="49:19">=</operator> <name pos:start="49:21" pos:end="49:26">funcs1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:32"><expr pos:start="51:5" pos:end="51:31"><name pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:5">p</name><operator pos:start="51:6" pos:end="51:6">.</operator><name pos:start="51:7" pos:end="51:17">func1_names</name></name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:31">func1_names</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:27"><expr pos:start="53:5" pos:end="53:26"><name pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:5">p</name><operator pos:start="53:6" pos:end="53:6">.</operator><name pos:start="53:7" pos:end="53:12">funcs2</name></name>      <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:26">funcs2</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:32"><expr pos:start="55:5" pos:end="55:31"><name pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:5">p</name><operator pos:start="55:6" pos:end="55:6">.</operator><name pos:start="55:7" pos:end="55:17">func2_names</name></name> <operator pos:start="55:19" pos:end="55:19">=</operator> <name pos:start="55:21" pos:end="55:31">func2_names</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:30"><expr pos:start="57:5" pos:end="57:29"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:5">p</name><operator pos:start="57:6" pos:end="57:6">.</operator><name pos:start="57:7" pos:end="57:16">log_offset</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:29">log_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:27"><expr pos:start="59:5" pos:end="59:26"><name pos:start="59:5" pos:end="59:13"><name pos:start="59:5" pos:end="59:5">p</name><operator pos:start="59:6" pos:end="59:6">.</operator><name pos:start="59:7" pos:end="59:13">log_ctx</name></name>    <operator pos:start="59:18" pos:end="59:18">=</operator> <name pos:start="59:20" pos:end="59:26">log_ctx</name></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="65:17"><if pos:start="63:5" pos:end="65:17">if <condition pos:start="63:8" pos:end="63:39">(<expr pos:start="63:9" pos:end="63:38"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:12">ret</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:33"><name pos:start="63:16" pos:end="63:25">parse_expr</name><argument_list pos:start="63:26" pos:end="63:33">(<argument pos:start="63:27" pos:end="63:28"><expr pos:start="63:27" pos:end="63:28"><operator pos:start="63:27" pos:end="63:27">&amp;</operator><name pos:start="63:28" pos:end="63:28">e</name></expr></argument>, <argument pos:start="63:31" pos:end="63:32"><expr pos:start="63:31" pos:end="63:32"><operator pos:start="63:31" pos:end="63:31">&amp;</operator><name pos:start="63:32" pos:end="63:32">p</name></expr></argument>)</argument_list></call><operator pos:start="63:34" pos:end="63:34">)</operator> <operator pos:start="63:36" pos:end="63:36">&lt;</operator> <literal type="number" pos:start="63:38" pos:end="63:38">0</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:17"><block_content pos:start="65:9" pos:end="65:17">

        <goto pos:start="65:9" pos:end="65:17">goto <name pos:start="65:14" pos:end="65:16">end</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:13">(<expr pos:start="67:9" pos:end="67:12"><operator pos:start="67:9" pos:end="67:9">*</operator><name pos:start="67:10" pos:end="67:12"><name pos:start="67:10" pos:end="67:10">p</name><operator pos:start="67:11" pos:end="67:11">.</operator><name pos:start="67:12" pos:end="67:12">s</name></name></expr>)</condition> <block pos:start="67:15" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:17">

        <expr_stmt pos:start="69:9" pos:end="69:96"><expr pos:start="69:9" pos:end="69:95"><call pos:start="69:9" pos:end="69:95"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="69:95">(<argument pos:start="69:16" pos:end="69:17"><expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">&amp;</operator><name pos:start="69:17" pos:end="69:17">p</name></expr></argument>, <argument pos:start="69:20" pos:end="69:31"><expr pos:start="69:20" pos:end="69:31"><name pos:start="69:20" pos:end="69:31">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:34" pos:end="69:85"><expr pos:start="69:34" pos:end="69:85"><literal type="string" pos:start="69:34" pos:end="69:85">"Invalid chars '%s' at the end of expression '%s'\n"</literal></expr></argument>, <argument pos:start="69:88" pos:end="69:90"><expr pos:start="69:88" pos:end="69:90"><name pos:start="69:88" pos:end="69:90"><name pos:start="69:88" pos:end="69:88">p</name><operator pos:start="69:89" pos:end="69:89">.</operator><name pos:start="69:90" pos:end="69:90">s</name></name></expr></argument>, <argument pos:start="69:93" pos:end="69:94"><expr pos:start="69:93" pos:end="69:94"><name pos:start="69:93" pos:end="69:94">s0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:30"><expr pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:29"><name pos:start="71:15" pos:end="71:21">AVERROR</name><argument_list pos:start="71:22" pos:end="71:29">(<argument pos:start="71:23" pos:end="71:28"><expr pos:start="71:23" pos:end="71:28"><name pos:start="71:23" pos:end="71:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:17">goto <name pos:start="73:14" pos:end="73:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="77:5" pos:end="85:5"><if pos:start="77:5" pos:end="85:5">if <condition pos:start="77:8" pos:end="77:24">(<expr pos:start="77:9" pos:end="77:23"><operator pos:start="77:9" pos:end="77:9">!</operator><call pos:start="77:10" pos:end="77:23"><name pos:start="77:10" pos:end="77:20">verify_expr</name><argument_list pos:start="77:21" pos:end="77:23">(<argument pos:start="77:22" pos:end="77:22"><expr pos:start="77:22" pos:end="77:22"><name pos:start="77:22" pos:end="77:22">e</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:26" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:17">

        <expr_stmt pos:start="79:9" pos:end="79:24"><expr pos:start="79:9" pos:end="79:23"><call pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:20">av_expr_free</name><argument_list pos:start="79:21" pos:end="79:23">(<argument pos:start="79:22" pos:end="79:22"><expr pos:start="79:22" pos:end="79:22"><name pos:start="79:22" pos:end="79:22">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:30"><expr pos:start="81:9" pos:end="81:29"><name pos:start="81:9" pos:end="81:11">ret</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <call pos:start="81:15" pos:end="81:29"><name pos:start="81:15" pos:end="81:21">AVERROR</name><argument_list pos:start="81:22" pos:end="81:29">(<argument pos:start="81:23" pos:end="81:28"><expr pos:start="81:23" pos:end="81:28"><name pos:start="81:23" pos:end="81:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:17">goto <name pos:start="83:14" pos:end="83:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:14"><expr pos:start="87:5" pos:end="87:13"><operator pos:start="87:5" pos:end="87:5">*</operator><name pos:start="87:6" pos:end="87:9">expr</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <name pos:start="87:13" pos:end="87:13">e</name></expr>;</expr_stmt>

<label pos:start="89:1" pos:end="89:4"><name pos:start="89:1" pos:end="89:3">end</name>:</label>

    <expr_stmt pos:start="91:5" pos:end="91:15"><expr pos:start="91:5" pos:end="91:14"><call pos:start="91:5" pos:end="91:14"><name pos:start="91:5" pos:end="91:11">av_free</name><argument_list pos:start="91:12" pos:end="91:14">(<argument pos:start="91:13" pos:end="91:13"><expr pos:start="91:13" pos:end="91:13"><name pos:start="91:13" pos:end="91:13">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="93:5" pos:end="93:15">return <expr pos:start="93:12" pos:end="93:14"><name pos:start="93:12" pos:end="93:14">ret</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>
</unit>
