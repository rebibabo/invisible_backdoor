<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17300.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:19">bdrv_drain_all</name><parameter_list pos:start="1:20" pos:end="1:25">(<parameter pos:start="1:21" pos:end="1:24"><decl pos:start="1:21" pos:end="1:24"><type pos:start="1:21" pos:end="1:24"><name pos:start="1:21" pos:end="1:24">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="7:5" pos:end="125:27">

    <comment type="block" pos:start="5:5" pos:end="5:70">/* Always run first iteration so any pending completion BHs run */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:13">busy</name> <init pos:start="7:15" pos:end="7:20">= <expr pos:start="7:17" pos:end="7:20"><name pos:start="7:17" pos:end="7:20">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name> <init pos:start="9:26" pos:end="9:31">= <expr pos:start="9:28" pos:end="9:31"><name pos:start="9:28" pos:end="9:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:10">GSList</name> <modifier pos:start="11:12" pos:end="11:12">*</modifier></type><name pos:start="11:13" pos:end="11:20">aio_ctxs</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>, <decl pos:start="11:30" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:12"><modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:33">ctx</name></decl>;</decl_stmt>



    <while pos:start="15:5" pos:end="43:5">while <condition pos:start="15:11" pos:end="15:32">(<expr pos:start="15:12" pos:end="15:31"><operator pos:start="15:12" pos:end="15:12">(</operator><name pos:start="15:13" pos:end="15:14">bs</name> <operator pos:start="15:16" pos:end="15:16">=</operator> <call pos:start="15:18" pos:end="15:30"><name pos:start="15:18" pos:end="15:26">bdrv_next</name><argument_list pos:start="15:27" pos:end="15:30">(<argument pos:start="15:28" pos:end="15:29"><expr pos:start="15:28" pos:end="15:29"><name pos:start="15:28" pos:end="15:29">bs</name></expr></argument>)</argument_list></call><operator pos:start="15:31" pos:end="15:31">)</operator></expr>)</condition> <block pos:start="15:34" pos:end="43:5">{<block_content pos:start="17:9" pos:end="41:9">

        <decl_stmt pos:start="17:9" pos:end="17:59"><decl pos:start="17:9" pos:end="17:58"><type pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:18">AioContext</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:31">aio_context</name> <init pos:start="17:33" pos:end="17:58">= <expr pos:start="17:35" pos:end="17:58"><call pos:start="17:35" pos:end="17:58"><name pos:start="17:35" pos:end="17:54">bdrv_get_aio_context</name><argument_list pos:start="17:55" pos:end="17:58">(<argument pos:start="17:56" pos:end="17:57"><expr pos:start="17:56" pos:end="17:57"><name pos:start="17:56" pos:end="17:57">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:41"><expr pos:start="21:9" pos:end="21:40"><call pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:27">aio_context_acquire</name><argument_list pos:start="21:28" pos:end="21:40">(<argument pos:start="21:29" pos:end="21:39"><expr pos:start="21:29" pos:end="21:39"><name pos:start="21:29" pos:end="21:39">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:20">(<expr pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:14">bs</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:19">job</name></name></expr>)</condition> <block pos:start="23:22" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:37">

            <expr_stmt pos:start="25:13" pos:end="25:37"><expr pos:start="25:13" pos:end="25:36"><call pos:start="25:13" pos:end="25:36"><name pos:start="25:13" pos:end="25:27">block_job_pause</name><argument_list pos:start="25:28" pos:end="25:36">(<argument pos:start="25:29" pos:end="25:35"><expr pos:start="25:29" pos:end="25:35"><name pos:start="25:29" pos:end="25:35"><name pos:start="25:29" pos:end="25:30">bs</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:35">job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:37"><expr pos:start="29:9" pos:end="29:36"><call pos:start="29:9" pos:end="29:36"><name pos:start="29:9" pos:end="29:32">bdrv_no_throttling_begin</name><argument_list pos:start="29:33" pos:end="29:36">(<argument pos:start="29:34" pos:end="29:35"><expr pos:start="29:34" pos:end="29:35"><name pos:start="29:34" pos:end="29:35">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:31"><expr pos:start="31:9" pos:end="31:30"><call pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:26">bdrv_drain_recurse</name><argument_list pos:start="31:27" pos:end="31:30">(<argument pos:start="31:28" pos:end="31:29"><expr pos:start="31:28" pos:end="31:29"><name pos:start="31:28" pos:end="31:29">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:41"><expr pos:start="33:9" pos:end="33:40"><call pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:27">aio_context_release</name><argument_list pos:start="33:28" pos:end="33:40">(<argument pos:start="33:29" pos:end="33:39"><expr pos:start="33:29" pos:end="33:39"><name pos:start="33:29" pos:end="33:39">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:49">(<expr pos:start="37:13" pos:end="37:48"><operator pos:start="37:13" pos:end="37:13">!</operator><call pos:start="37:14" pos:end="37:48"><name pos:start="37:14" pos:end="37:25">g_slist_find</name><argument_list pos:start="37:26" pos:end="37:48">(<argument pos:start="37:27" pos:end="37:34"><expr pos:start="37:27" pos:end="37:34"><name pos:start="37:27" pos:end="37:34">aio_ctxs</name></expr></argument>, <argument pos:start="37:37" pos:end="37:47"><expr pos:start="37:37" pos:end="37:47"><name pos:start="37:37" pos:end="37:47">aio_context</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:51" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:62">

            <expr_stmt pos:start="39:13" pos:end="39:62"><expr pos:start="39:13" pos:end="39:61"><name pos:start="39:13" pos:end="39:20">aio_ctxs</name> <operator pos:start="39:22" pos:end="39:22">=</operator> <call pos:start="39:24" pos:end="39:61"><name pos:start="39:24" pos:end="39:38">g_slist_prepend</name><argument_list pos:start="39:39" pos:end="39:61">(<argument pos:start="39:40" pos:end="39:47"><expr pos:start="39:40" pos:end="39:47"><name pos:start="39:40" pos:end="39:47">aio_ctxs</name></expr></argument>, <argument pos:start="39:50" pos:end="39:60"><expr pos:start="39:50" pos:end="39:60"><name pos:start="39:50" pos:end="39:60">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="47:5" pos:end="57:7">/* Note that completion of an asynchronous I/O operation can trigger any

     * number of other I/O operations on other devices---for example a

     * coroutine can submit an I/O request to another device in response to

     * request completion.  Therefore we must keep looping until there was no

     * more activity rather than simply draining each device independently.

     */</comment>

    <while pos:start="59:5" pos:end="99:5">while <condition pos:start="59:11" pos:end="59:16">(<expr pos:start="59:12" pos:end="59:15"><name pos:start="59:12" pos:end="59:15">busy</name></expr>)</condition> <block pos:start="59:18" pos:end="99:5">{<block_content pos:start="61:9" pos:end="97:9">

        <expr_stmt pos:start="61:9" pos:end="61:21"><expr pos:start="61:9" pos:end="61:20"><name pos:start="61:9" pos:end="61:12">busy</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <name pos:start="61:16" pos:end="61:20">false</name></expr>;</expr_stmt>



        <for pos:start="65:9" pos:end="97:9">for <control pos:start="65:13" pos:end="65:58">(<init pos:start="65:14" pos:end="65:28"><expr pos:start="65:14" pos:end="65:27"><name pos:start="65:14" pos:end="65:16">ctx</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <name pos:start="65:20" pos:end="65:27">aio_ctxs</name></expr>;</init> <condition pos:start="65:30" pos:end="65:41"><expr pos:start="65:30" pos:end="65:40"><name pos:start="65:30" pos:end="65:32">ctx</name> <operator pos:start="65:34" pos:end="65:35">!=</operator> <name pos:start="65:37" pos:end="65:40">NULL</name></expr>;</condition> <incr pos:start="65:43" pos:end="65:57"><expr pos:start="65:43" pos:end="65:57"><name pos:start="65:43" pos:end="65:45">ctx</name> <operator pos:start="65:47" pos:end="65:47">=</operator> <name pos:start="65:49" pos:end="65:57"><name pos:start="65:49" pos:end="65:51">ctx</name><operator pos:start="65:52" pos:end="65:53">-&gt;</operator><name pos:start="65:54" pos:end="65:57">next</name></name></expr></incr>)</control> <block pos:start="65:60" pos:end="97:9">{<block_content pos:start="67:13" pos:end="95:45">

            <decl_stmt pos:start="67:13" pos:end="67:48"><decl pos:start="67:13" pos:end="67:47"><type pos:start="67:13" pos:end="67:24"><name pos:start="67:13" pos:end="67:22">AioContext</name> <modifier pos:start="67:24" pos:end="67:24">*</modifier></type><name pos:start="67:25" pos:end="67:35">aio_context</name> <init pos:start="67:37" pos:end="67:47">= <expr pos:start="67:39" pos:end="67:47"><name pos:start="67:39" pos:end="67:47"><name pos:start="67:39" pos:end="67:41">ctx</name><operator pos:start="67:42" pos:end="67:43">-&gt;</operator><name pos:start="67:44" pos:end="67:47">data</name></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:22"><expr pos:start="69:13" pos:end="69:21"><name pos:start="69:13" pos:end="69:14">bs</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <name pos:start="69:18" pos:end="69:21">NULL</name></expr>;</expr_stmt>



            <expr_stmt pos:start="73:13" pos:end="73:45"><expr pos:start="73:13" pos:end="73:44"><call pos:start="73:13" pos:end="73:44"><name pos:start="73:13" pos:end="73:31">aio_context_acquire</name><argument_list pos:start="73:32" pos:end="73:44">(<argument pos:start="73:33" pos:end="73:43"><expr pos:start="73:33" pos:end="73:43"><name pos:start="73:33" pos:end="73:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="75:13" pos:end="91:13">while <condition pos:start="75:19" pos:end="75:40">(<expr pos:start="75:20" pos:end="75:39"><operator pos:start="75:20" pos:end="75:20">(</operator><name pos:start="75:21" pos:end="75:22">bs</name> <operator pos:start="75:24" pos:end="75:24">=</operator> <call pos:start="75:26" pos:end="75:38"><name pos:start="75:26" pos:end="75:34">bdrv_next</name><argument_list pos:start="75:35" pos:end="75:38">(<argument pos:start="75:36" pos:end="75:37"><expr pos:start="75:36" pos:end="75:37"><name pos:start="75:36" pos:end="75:37">bs</name></expr></argument>)</argument_list></call><operator pos:start="75:39" pos:end="75:39">)</operator></expr>)</condition> <block pos:start="75:42" pos:end="91:13">{<block_content pos:start="77:17" pos:end="89:17">

                <if_stmt pos:start="77:17" pos:end="89:17"><if pos:start="77:17" pos:end="89:17">if <condition pos:start="77:20" pos:end="77:60">(<expr pos:start="77:21" pos:end="77:59"><name pos:start="77:21" pos:end="77:31">aio_context</name> <operator pos:start="77:33" pos:end="77:34">==</operator> <call pos:start="77:36" pos:end="77:59"><name pos:start="77:36" pos:end="77:55">bdrv_get_aio_context</name><argument_list pos:start="77:56" pos:end="77:59">(<argument pos:start="77:57" pos:end="77:58"><expr pos:start="77:57" pos:end="77:58"><name pos:start="77:57" pos:end="77:58">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:62" pos:end="89:17">{<block_content pos:start="79:21" pos:end="87:21">

                    <expr_stmt pos:start="79:21" pos:end="79:44"><expr pos:start="79:21" pos:end="79:43"><call pos:start="79:21" pos:end="79:43"><name pos:start="79:21" pos:end="79:39">bdrv_flush_io_queue</name><argument_list pos:start="79:40" pos:end="79:43">(<argument pos:start="79:41" pos:end="79:42"><expr pos:start="79:41" pos:end="79:42"><name pos:start="79:41" pos:end="79:42">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="81:21" pos:end="87:21"><if pos:start="81:21" pos:end="87:21">if <condition pos:start="81:24" pos:end="81:50">(<expr pos:start="81:25" pos:end="81:49"><call pos:start="81:25" pos:end="81:49"><name pos:start="81:25" pos:end="81:45">bdrv_requests_pending</name><argument_list pos:start="81:46" pos:end="81:49">(<argument pos:start="81:47" pos:end="81:48"><expr pos:start="81:47" pos:end="81:48"><name pos:start="81:47" pos:end="81:48">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:52" pos:end="87:21">{<block_content pos:start="83:25" pos:end="85:52">

                        <expr_stmt pos:start="83:25" pos:end="83:36"><expr pos:start="83:25" pos:end="83:35"><name pos:start="83:25" pos:end="83:28">busy</name> <operator pos:start="83:30" pos:end="83:30">=</operator> <name pos:start="83:32" pos:end="83:35">true</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="85:25" pos:end="85:52"><expr pos:start="85:25" pos:end="85:51"><call pos:start="85:25" pos:end="85:51"><name pos:start="85:25" pos:end="85:32">aio_poll</name><argument_list pos:start="85:33" pos:end="85:51">(<argument pos:start="85:34" pos:end="85:44"><expr pos:start="85:34" pos:end="85:44"><name pos:start="85:34" pos:end="85:44">aio_context</name></expr></argument>, <argument pos:start="85:47" pos:end="85:50"><expr pos:start="85:47" pos:end="85:50"><name pos:start="85:47" pos:end="85:50">busy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="93:13" pos:end="93:49"><expr pos:start="93:13" pos:end="93:48"><name pos:start="93:13" pos:end="93:16">busy</name> <operator pos:start="93:18" pos:end="93:19">|=</operator> <call pos:start="93:21" pos:end="93:48"><name pos:start="93:21" pos:end="93:28">aio_poll</name><argument_list pos:start="93:29" pos:end="93:48">(<argument pos:start="93:30" pos:end="93:40"><expr pos:start="93:30" pos:end="93:40"><name pos:start="93:30" pos:end="93:40">aio_context</name></expr></argument>, <argument pos:start="93:43" pos:end="93:47"><expr pos:start="93:43" pos:end="93:47"><name pos:start="93:43" pos:end="93:47">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:45"><expr pos:start="95:13" pos:end="95:44"><call pos:start="95:13" pos:end="95:44"><name pos:start="95:13" pos:end="95:31">aio_context_release</name><argument_list pos:start="95:32" pos:end="95:44">(<argument pos:start="95:33" pos:end="95:43"><expr pos:start="95:33" pos:end="95:43"><name pos:start="95:33" pos:end="95:43">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></while>



    <expr_stmt pos:start="103:5" pos:end="103:14"><expr pos:start="103:5" pos:end="103:13"><name pos:start="103:5" pos:end="103:6">bs</name> <operator pos:start="103:8" pos:end="103:8">=</operator> <name pos:start="103:10" pos:end="103:13">NULL</name></expr>;</expr_stmt>

    <while pos:start="105:5" pos:end="123:5">while <condition pos:start="105:11" pos:end="105:32">(<expr pos:start="105:12" pos:end="105:31"><operator pos:start="105:12" pos:end="105:12">(</operator><name pos:start="105:13" pos:end="105:14">bs</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <call pos:start="105:18" pos:end="105:30"><name pos:start="105:18" pos:end="105:26">bdrv_next</name><argument_list pos:start="105:27" pos:end="105:30">(<argument pos:start="105:28" pos:end="105:29"><expr pos:start="105:28" pos:end="105:29"><name pos:start="105:28" pos:end="105:29">bs</name></expr></argument>)</argument_list></call><operator pos:start="105:31" pos:end="105:31">)</operator></expr>)</condition> <block pos:start="105:34" pos:end="123:5">{<block_content pos:start="107:9" pos:end="121:41">

        <decl_stmt pos:start="107:9" pos:end="107:59"><decl pos:start="107:9" pos:end="107:58"><type pos:start="107:9" pos:end="107:20"><name pos:start="107:9" pos:end="107:18">AioContext</name> <modifier pos:start="107:20" pos:end="107:20">*</modifier></type><name pos:start="107:21" pos:end="107:31">aio_context</name> <init pos:start="107:33" pos:end="107:58">= <expr pos:start="107:35" pos:end="107:58"><call pos:start="107:35" pos:end="107:58"><name pos:start="107:35" pos:end="107:54">bdrv_get_aio_context</name><argument_list pos:start="107:55" pos:end="107:58">(<argument pos:start="107:56" pos:end="107:57"><expr pos:start="107:56" pos:end="107:57"><name pos:start="107:56" pos:end="107:57">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:41"><expr pos:start="111:9" pos:end="111:40"><call pos:start="111:9" pos:end="111:40"><name pos:start="111:9" pos:end="111:27">aio_context_acquire</name><argument_list pos:start="111:28" pos:end="111:40">(<argument pos:start="111:29" pos:end="111:39"><expr pos:start="111:29" pos:end="111:39"><name pos:start="111:29" pos:end="111:39">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:35"><expr pos:start="113:9" pos:end="113:34"><call pos:start="113:9" pos:end="113:34"><name pos:start="113:9" pos:end="113:30">bdrv_no_throttling_end</name><argument_list pos:start="113:31" pos:end="113:34">(<argument pos:start="113:32" pos:end="113:33"><expr pos:start="113:32" pos:end="113:33"><name pos:start="113:32" pos:end="113:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:14">bs</name><operator pos:start="115:15" pos:end="115:16">-&gt;</operator><name pos:start="115:17" pos:end="115:19">job</name></name></expr>)</condition> <block pos:start="115:22" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:38">

            <expr_stmt pos:start="117:13" pos:end="117:38"><expr pos:start="117:13" pos:end="117:37"><call pos:start="117:13" pos:end="117:37"><name pos:start="117:13" pos:end="117:28">block_job_resume</name><argument_list pos:start="117:29" pos:end="117:37">(<argument pos:start="117:30" pos:end="117:36"><expr pos:start="117:30" pos:end="117:36"><name pos:start="117:30" pos:end="117:36"><name pos:start="117:30" pos:end="117:31">bs</name><operator pos:start="117:32" pos:end="117:33">-&gt;</operator><name pos:start="117:34" pos:end="117:36">job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:41"><expr pos:start="121:9" pos:end="121:40"><call pos:start="121:9" pos:end="121:40"><name pos:start="121:9" pos:end="121:27">aio_context_release</name><argument_list pos:start="121:28" pos:end="121:40">(<argument pos:start="121:29" pos:end="121:39"><expr pos:start="121:29" pos:end="121:39"><name pos:start="121:29" pos:end="121:39">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="125:5" pos:end="125:27"><expr pos:start="125:5" pos:end="125:26"><call pos:start="125:5" pos:end="125:26"><name pos:start="125:5" pos:end="125:16">g_slist_free</name><argument_list pos:start="125:17" pos:end="125:26">(<argument pos:start="125:18" pos:end="125:25"><expr pos:start="125:18" pos:end="125:25"><name pos:start="125:18" pos:end="125:25">aio_ctxs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
