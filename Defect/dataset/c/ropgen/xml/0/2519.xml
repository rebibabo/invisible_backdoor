<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2519.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">ram_save_live</name><parameter_list pos:start="1:18" pos:end="1:69">(<parameter pos:start="1:19" pos:end="1:30"><decl pos:start="1:19" pos:end="1:30"><type pos:start="1:19" pos:end="1:30"><name pos:start="1:19" pos:end="1:25">Monitor</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:30">mon</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:40">QEMUFile</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">f</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:54"><decl pos:start="1:46" pos:end="1:54"><type pos:start="1:46" pos:end="1:54"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:54">stage</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:60">void</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:68">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="171:1">{<block_content pos:start="5:5" pos:end="169:69">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:19">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:35">bytes_transferred_last</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">double</name></type> <name pos:start="9:12" pos:end="9:17">bwidth</name> <init pos:start="9:19" pos:end="9:21">= <expr pos:start="9:21" pos:end="9:21"><literal type="number" pos:start="9:21" pos:end="9:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:26">expected_time</name> <init pos:start="11:28" pos:end="11:30">= <expr pos:start="11:30" pos:end="11:30"><literal type="number" pos:start="11:30" pos:end="11:30">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:18">(<expr pos:start="15:9" pos:end="15:17"><name pos:start="15:9" pos:end="15:13">stage</name> <operator pos:start="15:15" pos:end="15:15">&lt;</operator> <literal type="number" pos:start="15:17" pos:end="15:17">0</literal></expr>)</condition> <block pos:start="15:20" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:17">

        <expr_stmt pos:start="17:9" pos:end="17:50"><expr pos:start="17:9" pos:end="17:49"><call pos:start="17:9" pos:end="17:49"><name pos:start="17:9" pos:end="17:46">cpu_physical_memory_set_dirty_tracking</name><argument_list pos:start="17:47" pos:end="17:49">(<argument pos:start="17:48" pos:end="17:48"><expr pos:start="17:48" pos:end="17:48"><literal type="number" pos:start="17:48" pos:end="17:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:69">(<expr pos:start="25:9" pos:end="25:68"><call pos:start="25:9" pos:end="25:63"><name pos:start="25:9" pos:end="25:38">cpu_physical_sync_dirty_bitmap</name><argument_list pos:start="25:39" pos:end="25:63">(<argument pos:start="25:40" pos:end="25:40"><expr pos:start="25:40" pos:end="25:40"><literal type="number" pos:start="25:40" pos:end="25:40">0</literal></expr></argument>, <argument pos:start="25:43" pos:end="25:62"><expr pos:start="25:43" pos:end="25:62"><name pos:start="25:43" pos:end="25:62">TARGET_PHYS_ADDR_MAX</name></expr></argument>)</argument_list></call> <operator pos:start="25:65" pos:end="25:66">!=</operator> <literal type="number" pos:start="25:68" pos:end="25:68">0</literal></expr>)</condition> <block pos:start="25:71" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:40"><expr pos:start="27:9" pos:end="27:39"><call pos:start="27:9" pos:end="27:39"><name pos:start="27:9" pos:end="27:27">qemu_file_set_error</name><argument_list pos:start="27:28" pos:end="27:39">(<argument pos:start="27:29" pos:end="27:29"><expr pos:start="27:29" pos:end="27:29"><name pos:start="27:29" pos:end="27:29">f</name></expr></argument>, <argument pos:start="27:32" pos:end="27:38"><expr pos:start="27:32" pos:end="27:38"><operator pos:start="27:32" pos:end="27:32">-</operator><name pos:start="27:33" pos:end="27:38">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="91:5"><if pos:start="35:5" pos:end="91:5">if <condition pos:start="35:8" pos:end="35:19">(<expr pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:13">stage</name> <operator pos:start="35:15" pos:end="35:16">==</operator> <literal type="number" pos:start="35:18" pos:end="35:18">1</literal></expr>)</condition> <block pos:start="35:21" pos:end="91:5">{<block_content pos:start="37:9" pos:end="89:9">

        <decl_stmt pos:start="37:9" pos:end="37:24"><decl pos:start="37:9" pos:end="37:23"><type pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:16">RAMBlock</name> <modifier pos:start="37:18" pos:end="37:18">*</modifier></type><name pos:start="37:19" pos:end="37:23">block</name></decl>;</decl_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:25">bytes_transferred</name> <operator pos:start="39:27" pos:end="39:27">=</operator> <literal type="number" pos:start="39:29" pos:end="39:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:26"><expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:18">last_block</name> <operator pos:start="41:20" pos:end="41:20">=</operator> <name pos:start="41:22" pos:end="41:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:24"><expr pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:19">last_offset</name> <operator pos:start="43:21" pos:end="43:21">=</operator> <literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:24"><expr pos:start="45:9" pos:end="45:23"><call pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:21">sort_ram_list</name><argument_list pos:start="45:22" pos:end="45:23">()</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="49:9" pos:end="49:46">/* Make sure all dirty bits are set */</comment>

        <macro pos:start="51:9" pos:end="51:52"><name pos:start="51:9" pos:end="51:21">QLIST_FOREACH</name><argument_list pos:start="51:22" pos:end="51:52">(<argument pos:start="51:23" pos:end="51:27">block</argument>, <argument pos:start="51:30" pos:end="51:45">&amp;ram_list.blocks</argument>, <argument pos:start="51:48" pos:end="51:51">next</argument>)</argument_list></macro> <block pos:start="51:54" pos:end="67:9">{<block_content pos:start="53:13" pos:end="65:13">

            <for pos:start="53:13" pos:end="65:13">for <control pos:start="53:17" pos:end="55:42">(<init pos:start="53:18" pos:end="53:38"><expr pos:start="53:18" pos:end="53:37"><name pos:start="53:18" pos:end="53:21">addr</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <name pos:start="53:25" pos:end="53:37"><name pos:start="53:25" pos:end="53:29">block</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:37">offset</name></name></expr>;</init> <condition pos:start="53:40" pos:end="53:76"><expr pos:start="53:40" pos:end="53:75"><name pos:start="53:40" pos:end="53:43">addr</name> <operator pos:start="53:45" pos:end="53:45">&lt;</operator> <name pos:start="53:47" pos:end="53:59"><name pos:start="53:47" pos:end="53:51">block</name><operator pos:start="53:52" pos:end="53:53">-&gt;</operator><name pos:start="53:54" pos:end="53:59">offset</name></name> <operator pos:start="53:61" pos:end="53:61">+</operator> <name pos:start="53:63" pos:end="53:75"><name pos:start="53:63" pos:end="53:67">block</name><operator pos:start="53:68" pos:end="53:69">-&gt;</operator><name pos:start="53:70" pos:end="53:75">length</name></name></expr>;</condition>

                 <incr pos:start="55:18" pos:end="55:41"><expr pos:start="55:18" pos:end="55:41"><name pos:start="55:18" pos:end="55:21">addr</name> <operator pos:start="55:23" pos:end="55:24">+=</operator> <name pos:start="55:26" pos:end="55:41">TARGET_PAGE_SIZE</name></expr></incr>)</control> <block pos:start="55:44" pos:end="65:13">{<block_content pos:start="57:17" pos:end="63:17">

                <if_stmt pos:start="57:17" pos:end="63:17"><if pos:start="57:17" pos:end="63:17">if <condition pos:start="57:20" pos:end="59:73">(<expr pos:start="57:21" pos:end="59:72"><operator pos:start="57:21" pos:end="57:21">!</operator><call pos:start="57:22" pos:end="59:72"><name pos:start="57:22" pos:end="57:50">cpu_physical_memory_get_dirty</name><argument_list pos:start="57:51" pos:end="59:72">(<argument pos:start="57:52" pos:end="57:55"><expr pos:start="57:52" pos:end="57:55"><name pos:start="57:52" pos:end="57:55">addr</name></expr></argument>,

                                                   <argument pos:start="59:52" pos:end="59:71"><expr pos:start="59:52" pos:end="59:71"><name pos:start="59:52" pos:end="59:71">MIGRATION_DIRTY_FLAG</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:75" pos:end="63:17">{<block_content pos:start="61:21" pos:end="61:56">

                    <expr_stmt pos:start="61:21" pos:end="61:56"><expr pos:start="61:21" pos:end="61:55"><call pos:start="61:21" pos:end="61:55"><name pos:start="61:21" pos:end="61:49">cpu_physical_memory_set_dirty</name><argument_list pos:start="61:50" pos:end="61:55">(<argument pos:start="61:51" pos:end="61:54"><expr pos:start="61:51" pos:end="61:54"><name pos:start="61:51" pos:end="61:54">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block>



        <comment type="block" pos:start="71:9" pos:end="71:42">/* Enable dirty memory tracking */</comment>

        <expr_stmt pos:start="73:9" pos:end="73:50"><expr pos:start="73:9" pos:end="73:49"><call pos:start="73:9" pos:end="73:49"><name pos:start="73:9" pos:end="73:46">cpu_physical_memory_set_dirty_tracking</name><argument_list pos:start="73:47" pos:end="73:49">(<argument pos:start="73:48" pos:end="73:48"><expr pos:start="73:48" pos:end="73:48"><literal type="number" pos:start="73:48" pos:end="73:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:69"><expr pos:start="77:9" pos:end="77:68"><call pos:start="77:9" pos:end="77:68"><name pos:start="77:9" pos:end="77:21">qemu_put_be64</name><argument_list pos:start="77:22" pos:end="77:68">(<argument pos:start="77:23" pos:end="77:23"><expr pos:start="77:23" pos:end="77:23"><name pos:start="77:23" pos:end="77:23">f</name></expr></argument>, <argument pos:start="77:26" pos:end="77:67"><expr pos:start="77:26" pos:end="77:67"><call pos:start="77:26" pos:end="77:42"><name pos:start="77:26" pos:end="77:40">ram_bytes_total</name><argument_list pos:start="77:41" pos:end="77:42">()</argument_list></call> <operator pos:start="77:44" pos:end="77:44">|</operator> <name pos:start="77:46" pos:end="77:67">RAM_SAVE_FLAG_MEM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <macro pos:start="81:9" pos:end="81:52"><name pos:start="81:9" pos:end="81:21">QLIST_FOREACH</name><argument_list pos:start="81:22" pos:end="81:52">(<argument pos:start="81:23" pos:end="81:27">block</argument>, <argument pos:start="81:30" pos:end="81:45">&amp;ram_list.blocks</argument>, <argument pos:start="81:48" pos:end="81:51">next</argument>)</argument_list></macro> <block pos:start="81:54" pos:end="89:9">{<block_content pos:start="83:13" pos:end="87:44">

            <expr_stmt pos:start="83:13" pos:end="83:51"><expr pos:start="83:13" pos:end="83:50"><call pos:start="83:13" pos:end="83:50"><name pos:start="83:13" pos:end="83:25">qemu_put_byte</name><argument_list pos:start="83:26" pos:end="83:50">(<argument pos:start="83:27" pos:end="83:27"><expr pos:start="83:27" pos:end="83:27"><name pos:start="83:27" pos:end="83:27">f</name></expr></argument>, <argument pos:start="83:30" pos:end="83:49"><expr pos:start="83:30" pos:end="83:49"><call pos:start="83:30" pos:end="83:49"><name pos:start="83:30" pos:end="83:35">strlen</name><argument_list pos:start="83:36" pos:end="83:49">(<argument pos:start="83:37" pos:end="83:48"><expr pos:start="83:37" pos:end="83:48"><name pos:start="83:37" pos:end="83:48"><name pos:start="83:37" pos:end="83:41">block</name><operator pos:start="83:42" pos:end="83:43">-&gt;</operator><name pos:start="83:44" pos:end="83:48">idstr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:78"><expr pos:start="85:13" pos:end="85:77"><call pos:start="85:13" pos:end="85:77"><name pos:start="85:13" pos:end="85:27">qemu_put_buffer</name><argument_list pos:start="85:28" pos:end="85:77">(<argument pos:start="85:29" pos:end="85:29"><expr pos:start="85:29" pos:end="85:29"><name pos:start="85:29" pos:end="85:29">f</name></expr></argument>, <argument pos:start="85:32" pos:end="85:54"><expr pos:start="85:32" pos:end="85:54"><operator pos:start="85:32" pos:end="85:32">(</operator><name pos:start="85:33" pos:end="85:39">uint8_t</name> <operator pos:start="85:41" pos:end="85:41">*</operator><operator pos:start="85:42" pos:end="85:42">)</operator><name pos:start="85:43" pos:end="85:54"><name pos:start="85:43" pos:end="85:47">block</name><operator pos:start="85:48" pos:end="85:49">-&gt;</operator><name pos:start="85:50" pos:end="85:54">idstr</name></name></expr></argument>, <argument pos:start="85:57" pos:end="85:76"><expr pos:start="85:57" pos:end="85:76"><call pos:start="85:57" pos:end="85:76"><name pos:start="85:57" pos:end="85:62">strlen</name><argument_list pos:start="85:63" pos:end="85:76">(<argument pos:start="85:64" pos:end="85:75"><expr pos:start="85:64" pos:end="85:75"><name pos:start="85:64" pos:end="85:75"><name pos:start="85:64" pos:end="85:68">block</name><operator pos:start="85:69" pos:end="85:70">-&gt;</operator><name pos:start="85:71" pos:end="85:75">idstr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:44"><expr pos:start="87:13" pos:end="87:43"><call pos:start="87:13" pos:end="87:43"><name pos:start="87:13" pos:end="87:25">qemu_put_be64</name><argument_list pos:start="87:26" pos:end="87:43">(<argument pos:start="87:27" pos:end="87:27"><expr pos:start="87:27" pos:end="87:27"><name pos:start="87:27" pos:end="87:27">f</name></expr></argument>, <argument pos:start="87:30" pos:end="87:42"><expr pos:start="87:30" pos:end="87:42"><name pos:start="87:30" pos:end="87:42"><name pos:start="87:30" pos:end="87:34">block</name><operator pos:start="87:35" pos:end="87:36">-&gt;</operator><name pos:start="87:37" pos:end="87:42">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:47"><expr pos:start="95:5" pos:end="95:46"><name pos:start="95:5" pos:end="95:26">bytes_transferred_last</name> <operator pos:start="95:28" pos:end="95:28">=</operator> <name pos:start="95:30" pos:end="95:46">bytes_transferred</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:41"><expr pos:start="97:5" pos:end="97:40"><name pos:start="97:5" pos:end="97:10">bwidth</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <call pos:start="97:14" pos:end="97:40"><name pos:start="97:14" pos:end="97:30">qemu_get_clock_ns</name><argument_list pos:start="97:31" pos:end="97:40">(<argument pos:start="97:32" pos:end="97:39"><expr pos:start="97:32" pos:end="97:39"><name pos:start="97:32" pos:end="97:39">rt_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="101:5" pos:end="117:5">while <condition pos:start="101:11" pos:end="101:36">(<expr pos:start="101:12" pos:end="101:35"><operator pos:start="101:12" pos:end="101:12">!</operator><call pos:start="101:13" pos:end="101:35"><name pos:start="101:13" pos:end="101:32">qemu_file_rate_limit</name><argument_list pos:start="101:33" pos:end="101:35">(<argument pos:start="101:34" pos:end="101:34"><expr pos:start="101:34" pos:end="101:34"><name pos:start="101:34" pos:end="101:34">f</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:38" pos:end="117:5">{<block_content pos:start="103:9" pos:end="115:9">

        <decl_stmt pos:start="103:9" pos:end="103:23"><decl pos:start="103:9" pos:end="103:22"><type pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">int</name></type> <name pos:start="103:13" pos:end="103:22">bytes_sent</name></decl>;</decl_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:39"><expr pos:start="107:9" pos:end="107:38"><name pos:start="107:9" pos:end="107:18">bytes_sent</name> <operator pos:start="107:20" pos:end="107:20">=</operator> <call pos:start="107:22" pos:end="107:38"><name pos:start="107:22" pos:end="107:35">ram_save_block</name><argument_list pos:start="107:36" pos:end="107:38">(<argument pos:start="107:37" pos:end="107:37"><expr pos:start="107:37" pos:end="107:37"><name pos:start="107:37" pos:end="107:37">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:40"><expr pos:start="109:9" pos:end="109:39"><name pos:start="109:9" pos:end="109:25">bytes_transferred</name> <operator pos:start="109:27" pos:end="109:28">+=</operator> <name pos:start="109:30" pos:end="109:39">bytes_sent</name></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="115:9"><if pos:start="111:9" pos:end="115:9">if <condition pos:start="111:12" pos:end="111:28">(<expr pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:22">bytes_sent</name> <operator pos:start="111:24" pos:end="111:25">==</operator> <literal type="number" pos:start="111:27" pos:end="111:27">0</literal></expr>)</condition> <block pos:start="111:30" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:18"> <comment type="block" pos:start="111:32" pos:end="111:51">/* no more blocks */</comment>

            <break pos:start="113:13" pos:end="113:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="121:5" pos:end="121:50"><expr pos:start="121:5" pos:end="121:49"><name pos:start="121:5" pos:end="121:10">bwidth</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <call pos:start="121:14" pos:end="121:40"><name pos:start="121:14" pos:end="121:30">qemu_get_clock_ns</name><argument_list pos:start="121:31" pos:end="121:40">(<argument pos:start="121:32" pos:end="121:39"><expr pos:start="121:32" pos:end="121:39"><name pos:start="121:32" pos:end="121:39">rt_clock</name></expr></argument>)</argument_list></call> <operator pos:start="121:42" pos:end="121:42">-</operator> <name pos:start="121:44" pos:end="121:49">bwidth</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:67"><expr pos:start="123:5" pos:end="123:66"><name pos:start="123:5" pos:end="123:10">bwidth</name> <operator pos:start="123:12" pos:end="123:12">=</operator> <operator pos:start="123:14" pos:end="123:14">(</operator><name pos:start="123:15" pos:end="123:31">bytes_transferred</name> <operator pos:start="123:33" pos:end="123:33">-</operator> <name pos:start="123:35" pos:end="123:56">bytes_transferred_last</name><operator pos:start="123:57" pos:end="123:57">)</operator> <operator pos:start="123:59" pos:end="123:59">/</operator> <name pos:start="123:61" pos:end="123:66">bwidth</name></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="129:49">/* if we haven't transferred anything this round, force expected_time to a

     * a very high value, but without crashing */</comment>

    <if_stmt pos:start="131:5" pos:end="135:5"><if pos:start="131:5" pos:end="135:5">if <condition pos:start="131:8" pos:end="131:20">(<expr pos:start="131:9" pos:end="131:19"><name pos:start="131:9" pos:end="131:14">bwidth</name> <operator pos:start="131:16" pos:end="131:17">==</operator> <literal type="number" pos:start="131:19" pos:end="131:19">0</literal></expr>)</condition> <block pos:start="131:22" pos:end="135:5">{<block_content pos:start="133:9" pos:end="133:26">

        <expr_stmt pos:start="133:9" pos:end="133:26"><expr pos:start="133:9" pos:end="133:25"><name pos:start="133:9" pos:end="133:14">bwidth</name> <operator pos:start="133:16" pos:end="133:16">=</operator> <literal type="number" pos:start="133:18" pos:end="133:25">0.000001</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:53">/* try transferring iterative blocks of memory */</comment>

    <if_stmt pos:start="141:5" pos:end="157:5"><if pos:start="141:5" pos:end="157:5">if <condition pos:start="141:8" pos:end="141:19">(<expr pos:start="141:9" pos:end="141:18"><name pos:start="141:9" pos:end="141:13">stage</name> <operator pos:start="141:15" pos:end="141:16">==</operator> <literal type="number" pos:start="141:18" pos:end="141:18">3</literal></expr>)</condition> <block pos:start="141:21" pos:end="157:5">{<block_content pos:start="143:9" pos:end="155:50">

        <decl_stmt pos:start="143:9" pos:end="143:23"><decl pos:start="143:9" pos:end="143:22"><type pos:start="143:9" pos:end="143:11"><name pos:start="143:9" pos:end="143:11">int</name></type> <name pos:start="143:13" pos:end="143:22">bytes_sent</name></decl>;</decl_stmt>



        <comment type="block" pos:start="147:9" pos:end="147:68">/* flush all remaining blocks regardless of rate limiting */</comment>

        <while pos:start="149:9" pos:end="153:9">while <condition pos:start="149:15" pos:end="149:53">(<expr pos:start="149:16" pos:end="149:52"><operator pos:start="149:16" pos:end="149:16">(</operator><name pos:start="149:17" pos:end="149:26">bytes_sent</name> <operator pos:start="149:28" pos:end="149:28">=</operator> <call pos:start="149:30" pos:end="149:46"><name pos:start="149:30" pos:end="149:43">ram_save_block</name><argument_list pos:start="149:44" pos:end="149:46">(<argument pos:start="149:45" pos:end="149:45"><expr pos:start="149:45" pos:end="149:45"><name pos:start="149:45" pos:end="149:45">f</name></expr></argument>)</argument_list></call><operator pos:start="149:47" pos:end="149:47">)</operator> <operator pos:start="149:49" pos:end="149:50">!=</operator> <literal type="number" pos:start="149:52" pos:end="149:52">0</literal></expr>)</condition> <block pos:start="149:55" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:44">

            <expr_stmt pos:start="151:13" pos:end="151:44"><expr pos:start="151:13" pos:end="151:43"><name pos:start="151:13" pos:end="151:29">bytes_transferred</name> <operator pos:start="151:31" pos:end="151:32">+=</operator> <name pos:start="151:34" pos:end="151:43">bytes_sent</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="155:9" pos:end="155:50"><expr pos:start="155:9" pos:end="155:49"><call pos:start="155:9" pos:end="155:49"><name pos:start="155:9" pos:end="155:46">cpu_physical_memory_set_dirty_tracking</name><argument_list pos:start="155:47" pos:end="155:49">(<argument pos:start="155:48" pos:end="155:48"><expr pos:start="155:48" pos:end="155:48"><literal type="number" pos:start="155:48" pos:end="155:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:40"><expr pos:start="161:5" pos:end="161:39"><call pos:start="161:5" pos:end="161:39"><name pos:start="161:5" pos:end="161:17">qemu_put_be64</name><argument_list pos:start="161:18" pos:end="161:39">(<argument pos:start="161:19" pos:end="161:19"><expr pos:start="161:19" pos:end="161:19"><name pos:start="161:19" pos:end="161:19">f</name></expr></argument>, <argument pos:start="161:22" pos:end="161:38"><expr pos:start="161:22" pos:end="161:38"><name pos:start="161:22" pos:end="161:38">RAM_SAVE_FLAG_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:69"><expr pos:start="165:5" pos:end="165:68"><name pos:start="165:5" pos:end="165:17">expected_time</name> <operator pos:start="165:19" pos:end="165:19">=</operator> <call pos:start="165:21" pos:end="165:40"><name pos:start="165:21" pos:end="165:38">ram_save_remaining</name><argument_list pos:start="165:39" pos:end="165:40">()</argument_list></call> <operator pos:start="165:42" pos:end="165:42">*</operator> <name pos:start="165:44" pos:end="165:59">TARGET_PAGE_SIZE</name> <operator pos:start="165:61" pos:end="165:61">/</operator> <name pos:start="165:63" pos:end="165:68">bwidth</name></expr>;</expr_stmt>



    <return pos:start="169:5" pos:end="169:69">return <expr pos:start="169:12" pos:end="169:68"><operator pos:start="169:12" pos:end="169:12">(</operator><name pos:start="169:13" pos:end="169:17">stage</name> <operator pos:start="169:19" pos:end="169:20">==</operator> <literal type="number" pos:start="169:22" pos:end="169:22">2</literal><operator pos:start="169:23" pos:end="169:23">)</operator> <operator pos:start="169:25" pos:end="169:26">&amp;&amp;</operator> <operator pos:start="169:28" pos:end="169:28">(</operator><name pos:start="169:29" pos:end="169:41">expected_time</name> <operator pos:start="169:43" pos:end="169:44">&lt;=</operator> <call pos:start="169:46" pos:end="169:67"><name pos:start="169:46" pos:end="169:65">migrate_max_downtime</name><argument_list pos:start="169:66" pos:end="169:67">()</argument_list></call><operator pos:start="169:68" pos:end="169:68">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
