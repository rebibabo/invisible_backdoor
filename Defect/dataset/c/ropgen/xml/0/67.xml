<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/67.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">tcg_match_cmpi</name><parameter_list pos:start="1:26" pos:end="1:60">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:33">TCGType</name></type> <name pos:start="1:35" pos:end="1:38">type</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:59"><decl pos:start="1:41" pos:end="1:59"><type pos:start="1:41" pos:end="1:59"><name pos:start="1:41" pos:end="1:55">tcg_target_long</name></type> <name pos:start="1:57" pos:end="1:59">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:5">

    <if_stmt pos:start="5:5" pos:end="49:5"><if pos:start="5:5" pos:end="43:5">if <condition pos:start="5:8" pos:end="5:38">(<expr pos:start="5:9" pos:end="5:37"><name pos:start="5:9" pos:end="5:18">facilities</name> <operator pos:start="5:20" pos:end="5:20">&amp;</operator> <name pos:start="5:22" pos:end="5:37">FACILITY_EXT_IMM</name></expr>)</condition> <block pos:start="5:40" pos:end="43:5">{<block_content pos:start="9:9" pos:end="41:9">

        <comment type="block" pos:start="7:9" pos:end="7:62">/* The COMPARE IMMEDIATE instruction is available.  */</comment>

        <if_stmt pos:start="9:9" pos:end="41:9"><if pos:start="9:9" pos:end="15:9">if <condition pos:start="9:12" pos:end="9:33">(<expr pos:start="9:13" pos:end="9:32"><name pos:start="9:13" pos:end="9:16">type</name> <operator pos:start="9:18" pos:end="9:19">==</operator> <name pos:start="9:21" pos:end="9:32">TCG_TYPE_I32</name></expr>)</condition> <block pos:start="9:35" pos:end="15:9">{<block_content pos:start="13:13" pos:end="13:21">

            <comment type="block" pos:start="11:13" pos:end="11:79">/* We have a 32-bit immediate and can compare against anything.  */</comment>

            <return pos:start="13:13" pos:end="13:21">return <expr pos:start="13:20" pos:end="13:20"><literal type="number" pos:start="13:20" pos:end="13:20">1</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="15:11" pos:end="41:9">else <block pos:start="15:16" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:49">

            <comment type="block" pos:start="17:13" pos:end="29:55">/* ??? We have no insight here into whether the comparison is

               signed or unsigned.  The COMPARE IMMEDIATE insn uses a 32-bit

               signed immediate, and the COMPARE LOGICAL IMMEDIATE insn uses

               a 32-bit unsigned immediate.  If we were to use the (semi)

               obvious "val == (int32_t)val" we would be enabling unsigned

               comparisons vs very large numbers.  The only solution is to

               take the intersection of the ranges.  */</comment>

            <comment type="block" pos:start="31:13" pos:end="37:42">/* ??? Another possible solution is to simply lie and allow all

               constants here and force the out-of-range values into a temp

               register in tgen_cmp when we have knowledge of the actual

               comparison code in use.  */</comment>

            <return pos:start="39:13" pos:end="39:49">return <expr pos:start="39:20" pos:end="39:48"><name pos:start="39:20" pos:end="39:22">val</name> <operator pos:start="39:24" pos:end="39:25">&gt;=</operator> <literal type="number" pos:start="39:27" pos:end="39:27">0</literal> <operator pos:start="39:29" pos:end="39:30">&amp;&amp;</operator> <name pos:start="39:32" pos:end="39:34">val</name> <operator pos:start="39:36" pos:end="39:37">&lt;=</operator> <literal type="number" pos:start="39:39" pos:end="39:48">0x7fffffff</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="49:5">else <block pos:start="43:12" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:24">

        <comment type="block" pos:start="45:9" pos:end="45:63">/* Only the LOAD AND TEST instruction is available.  */</comment>

        <return pos:start="47:9" pos:end="47:24">return <expr pos:start="47:16" pos:end="47:23"><name pos:start="47:16" pos:end="47:18">val</name> <operator pos:start="47:20" pos:end="47:21">==</operator> <literal type="number" pos:start="47:23" pos:end="47:23">0</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
