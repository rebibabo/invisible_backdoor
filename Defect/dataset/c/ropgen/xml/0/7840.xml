<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7840.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">gdb_accept</name><parameter_list pos:start="1:23" pos:end="1:36">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:29"><name pos:start="1:24" pos:end="1:27">void</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:35">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:35">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">GDBState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">sockaddr_in</name></name></type> <name pos:start="7:24" pos:end="7:31">sockaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">socklen_t</name></type> <name pos:start="9:15" pos:end="9:17">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">val</name></decl>, <decl pos:start="11:14" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:15">fd</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="33:5">for<control pos:start="15:8" pos:end="15:11">(<init pos:start="15:9" pos:end="15:9">;</init><condition pos:start="15:10" pos:end="15:10">;</condition><incr/>)</control> <block pos:start="15:13" pos:end="33:5">{<block_content pos:start="17:9" pos:end="31:9">

        <expr_stmt pos:start="17:9" pos:end="17:31"><expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:11">len</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <sizeof pos:start="17:15" pos:end="17:30">sizeof<argument_list pos:start="17:21" pos:end="17:30">(<argument pos:start="17:22" pos:end="17:29"><expr pos:start="17:22" pos:end="17:29"><name pos:start="17:22" pos:end="17:29">sockaddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:70"><expr pos:start="19:9" pos:end="19:69"><name pos:start="19:9" pos:end="19:10">fd</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="19:69"><name pos:start="19:14" pos:end="19:19">accept</name><argument_list pos:start="19:20" pos:end="19:69">(<argument pos:start="19:21" pos:end="19:32"><expr pos:start="19:21" pos:end="19:32"><name pos:start="19:21" pos:end="19:32">gdbserver_fd</name></expr></argument>, <argument pos:start="19:35" pos:end="19:62"><expr pos:start="19:35" pos:end="19:62"><operator pos:start="19:35" pos:end="19:35">(</operator>struct <name pos:start="19:43" pos:end="19:50">sockaddr</name> <operator pos:start="19:52" pos:end="19:52">*</operator><operator pos:start="19:53" pos:end="19:53">)</operator><operator pos:start="19:54" pos:end="19:54">&amp;</operator><name pos:start="19:55" pos:end="19:62">sockaddr</name></expr></argument>, <argument pos:start="19:65" pos:end="19:68"><expr pos:start="19:65" pos:end="19:68"><operator pos:start="19:65" pos:end="19:65">&amp;</operator><name pos:start="19:66" pos:end="19:68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="31:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:37">(<expr pos:start="21:13" pos:end="21:36"><name pos:start="21:13" pos:end="21:14">fd</name> <operator pos:start="21:16" pos:end="21:16">&lt;</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal> <operator pos:start="21:20" pos:end="21:21">&amp;&amp;</operator> <name pos:start="21:23" pos:end="21:27">errno</name> <operator pos:start="21:29" pos:end="21:30">!=</operator> <name pos:start="21:32" pos:end="21:36">EINTR</name></expr>)</condition> <block pos:start="21:39" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:19">

            <expr_stmt pos:start="23:13" pos:end="23:29"><expr pos:start="23:13" pos:end="23:28"><call pos:start="23:13" pos:end="23:28"><name pos:start="23:13" pos:end="23:18">perror</name><argument_list pos:start="23:19" pos:end="23:28">(<argument pos:start="23:20" pos:end="23:27"><expr pos:start="23:20" pos:end="23:27"><literal type="string" pos:start="23:20" pos:end="23:27">"accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="25:13" pos:end="25:19">return;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="27:11" pos:end="31:9">else if <condition pos:start="27:19" pos:end="27:27">(<expr pos:start="27:20" pos:end="27:26"><name pos:start="27:20" pos:end="27:21">fd</name> <operator pos:start="27:23" pos:end="27:24">&gt;=</operator> <literal type="number" pos:start="27:26" pos:end="27:26">0</literal></expr>)</condition> <block pos:start="27:29" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:18">

            <break pos:start="29:13" pos:end="29:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="37:5" pos:end="37:27">/* set short latency */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:12"><expr pos:start="39:5" pos:end="39:11"><name pos:start="39:5" pos:end="39:7">val</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <literal type="number" pos:start="39:11" pos:end="39:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:72"><expr pos:start="41:5" pos:end="41:71"><call pos:start="41:5" pos:end="41:71"><name pos:start="41:5" pos:end="41:14">setsockopt</name><argument_list pos:start="41:15" pos:end="41:71">(<argument pos:start="41:16" pos:end="41:17"><expr pos:start="41:16" pos:end="41:17"><name pos:start="41:16" pos:end="41:17">fd</name></expr></argument>, <argument pos:start="41:20" pos:end="41:30"><expr pos:start="41:20" pos:end="41:30"><name pos:start="41:20" pos:end="41:30">IPPROTO_TCP</name></expr></argument>, <argument pos:start="41:33" pos:end="41:43"><expr pos:start="41:33" pos:end="41:43"><name pos:start="41:33" pos:end="41:43">TCP_NODELAY</name></expr></argument>, <argument pos:start="41:46" pos:end="41:57"><expr pos:start="41:46" pos:end="41:57"><operator pos:start="41:46" pos:end="41:46">(</operator><name pos:start="41:47" pos:end="41:50">char</name> <operator pos:start="41:52" pos:end="41:52">*</operator><operator pos:start="41:53" pos:end="41:53">)</operator><operator pos:start="41:54" pos:end="41:54">&amp;</operator><name pos:start="41:55" pos:end="41:57">val</name></expr></argument>, <argument pos:start="41:60" pos:end="41:70"><expr pos:start="41:60" pos:end="41:70"><sizeof pos:start="41:60" pos:end="41:70">sizeof<argument_list pos:start="41:66" pos:end="41:70">(<argument pos:start="41:67" pos:end="41:69"><expr pos:start="41:67" pos:end="41:69"><name pos:start="41:67" pos:end="41:69">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:5">s</name> <operator pos:start="45:7" pos:end="45:7">=</operator> <operator pos:start="45:9" pos:end="45:9">&amp;</operator><name pos:start="45:10" pos:end="45:24">gdbserver_state</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:37"><expr pos:start="47:5" pos:end="47:36"><call pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:10">memset</name> <argument_list pos:start="47:12" pos:end="47:36">(<argument pos:start="47:13" pos:end="47:13"><expr pos:start="47:13" pos:end="47:13"><name pos:start="47:13" pos:end="47:13">s</name></expr></argument>, <argument pos:start="47:16" pos:end="47:16"><expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr></argument>, <argument pos:start="47:19" pos:end="47:35"><expr pos:start="47:19" pos:end="47:35"><sizeof pos:start="47:19" pos:end="47:35">sizeof <argument_list pos:start="47:26" pos:end="47:35">(<argument pos:start="47:27" pos:end="47:34"><expr pos:start="47:27" pos:end="47:34"><name pos:start="47:27" pos:end="47:34">GDBState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:23"><expr pos:start="49:5" pos:end="49:22"><name pos:start="49:5" pos:end="49:10"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:10">env</name></name> <operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:22">first_cpu</name></expr>;</expr_stmt> <comment type="block" pos:start="49:25" pos:end="49:54">/* XXX: allow to change CPU */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:15"><expr pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:9"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:9">fd</name></name> <operator pos:start="51:11" pos:end="51:11">=</operator> <name pos:start="51:13" pos:end="51:14">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:20"><expr pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:15">gdb_has_xml</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <literal type="number" pos:start="53:19" pos:end="53:19">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:26"><expr pos:start="57:5" pos:end="57:25"><name pos:start="57:5" pos:end="57:21">gdb_syscall_state</name> <operator pos:start="57:23" pos:end="57:23">=</operator> <name pos:start="57:25" pos:end="57:25">s</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:35"><expr pos:start="61:5" pos:end="61:34"><call pos:start="61:5" pos:end="61:34"><name pos:start="61:5" pos:end="61:9">fcntl</name><argument_list pos:start="61:10" pos:end="61:34">(<argument pos:start="61:11" pos:end="61:12"><expr pos:start="61:11" pos:end="61:12"><name pos:start="61:11" pos:end="61:12">fd</name></expr></argument>, <argument pos:start="61:15" pos:end="61:21"><expr pos:start="61:15" pos:end="61:21"><name pos:start="61:15" pos:end="61:21">F_SETFL</name></expr></argument>, <argument pos:start="61:24" pos:end="61:33"><expr pos:start="61:24" pos:end="61:33"><name pos:start="61:24" pos:end="61:33">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
