<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14961.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:15"><name pos:start="1:1" pos:end="1:8">uint32_t</name> <name pos:start="1:10" pos:end="1:15">HELPER</name></type>(<name pos:start="1:17" pos:end="1:19">msa</name>)<parameter_list pos:start="1:21" pos:end="3:35">(<parameter pos:start="1:22" pos:end="1:39"><decl pos:start="1:22" pos:end="1:39"><type pos:start="1:22" pos:end="1:39"><name pos:start="1:22" pos:end="1:34">CPUS390XState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">env</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:52"><decl pos:start="1:42" pos:end="1:52"><type pos:start="1:42" pos:end="1:52"><name pos:start="1:42" pos:end="1:49">uint32_t</name></type> <name pos:start="1:51" pos:end="1:52">r1</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:65"><decl pos:start="1:55" pos:end="1:65"><type pos:start="1:55" pos:end="1:65"><name pos:start="1:55" pos:end="1:62">uint32_t</name></type> <name pos:start="1:64" pos:end="1:65">r2</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:78"><decl pos:start="1:68" pos:end="1:78"><type pos:start="1:68" pos:end="1:78"><name pos:start="1:68" pos:end="1:75">uint32_t</name></type> <name pos:start="1:77" pos:end="1:78">r3</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:34"><decl pos:start="3:22" pos:end="3:34"><type pos:start="3:22" pos:end="3:34"><name pos:start="3:22" pos:end="3:29">uint32_t</name></type> <name pos:start="3:31" pos:end="3:34">type</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="91:1">{<block_content pos:start="7:5" pos:end="89:13">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:19">uintptr_t</name></type> <name pos:start="7:21" pos:end="7:22">ra</name> <init pos:start="7:24" pos:end="7:32">= <expr pos:start="7:26" pos:end="7:32"><call pos:start="7:26" pos:end="7:32"><name pos:start="7:26" pos:end="7:30">GETPC</name><argument_list pos:start="7:31" pos:end="7:32">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:17"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name></type> <name pos:start="9:19" pos:end="9:21">mod</name> <init pos:start="9:23" pos:end="9:46">= <expr pos:start="9:25" pos:end="9:46"><name pos:start="9:25" pos:end="9:36"><name pos:start="9:25" pos:end="9:27">env</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:33">regs</name><index pos:start="9:34" pos:end="9:36">[<expr pos:start="9:35" pos:end="9:35"><literal type="number" pos:start="9:35" pos:end="9:35">0</literal></expr>]</index></name> <operator pos:start="9:38" pos:end="9:38">&amp;</operator> <literal type="number" pos:start="9:40" pos:end="9:46">0x80ULL</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:45"><type pos:start="11:5" pos:end="11:17"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name></type> <name pos:start="11:19" pos:end="11:20">fc</name> <init pos:start="11:22" pos:end="11:45">= <expr pos:start="11:24" pos:end="11:45"><name pos:start="11:24" pos:end="11:35"><name pos:start="11:24" pos:end="11:26">env</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:32">regs</name><index pos:start="11:33" pos:end="11:35">[<expr pos:start="11:34" pos:end="11:34"><literal type="number" pos:start="11:34" pos:end="11:34">0</literal></expr>]</index></name> <operator pos:start="11:37" pos:end="11:37">&amp;</operator> <literal type="number" pos:start="11:39" pos:end="11:45">0x7fULL</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">CPUState</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:16">cs</name> <init pos:start="13:18" pos:end="13:45">= <expr pos:start="13:20" pos:end="13:45"><call pos:start="13:20" pos:end="13:45"><name pos:start="13:20" pos:end="13:22">CPU</name><argument_list pos:start="13:23" pos:end="13:45">(<argument pos:start="13:24" pos:end="13:44"><expr pos:start="13:24" pos:end="13:44"><call pos:start="13:24" pos:end="13:44"><name pos:start="13:24" pos:end="13:39">s390_env_get_cpu</name><argument_list pos:start="13:40" pos:end="13:44">(<argument pos:start="13:41" pos:end="13:43"><expr pos:start="13:41" pos:end="13:43"><name pos:start="13:41" pos:end="13:43">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:23"><name pos:start="15:13" pos:end="15:19">subfunc</name><index pos:start="15:20" pos:end="15:23">[<expr pos:start="15:21" pos:end="15:22"><literal type="number" pos:start="15:21" pos:end="15:22">16</literal></expr>]</index></name> <init pos:start="15:25" pos:end="15:31">= <expr pos:start="15:27" pos:end="15:31"><block pos:start="15:27" pos:end="15:31">{ <expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:23">param_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>



    <switch pos:start="23:5" pos:end="47:5">switch <condition pos:start="23:12" pos:end="23:17">(<expr pos:start="23:13" pos:end="23:16"><name pos:start="23:13" pos:end="23:16">type</name></expr>)</condition> <block pos:start="23:19" pos:end="47:5">{<block_content pos:start="25:5" pos:end="45:14">

    <case pos:start="25:5" pos:end="25:29">case <expr pos:start="25:10" pos:end="25:28"><name pos:start="25:10" pos:end="25:28">S390_FEAT_TYPE_KMAC</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:29">case <expr pos:start="27:10" pos:end="27:28"><name pos:start="27:10" pos:end="27:28">S390_FEAT_TYPE_KIMD</name></expr>:</case>

    <case pos:start="29:5" pos:end="29:29">case <expr pos:start="29:10" pos:end="29:28"><name pos:start="29:10" pos:end="29:28">S390_FEAT_TYPE_KLMD</name></expr>:</case>

    <case pos:start="31:5" pos:end="31:30">case <expr pos:start="31:10" pos:end="31:29"><name pos:start="31:10" pos:end="31:29">S390_FEAT_TYPE_PCKMO</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:28">case <expr pos:start="33:10" pos:end="33:27"><name pos:start="33:10" pos:end="33:27">S390_FEAT_TYPE_PCC</name></expr>:</case>

        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="43:9">if <condition pos:start="35:12" pos:end="35:16">(<expr pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">mod</name></expr>)</condition> <block pos:start="35:18" pos:end="43:9">{<block_content pos:start="37:13" pos:end="41:21">

            <expr_stmt pos:start="37:13" pos:end="37:38"><expr pos:start="37:13" pos:end="37:37"><call pos:start="37:13" pos:end="37:37"><name pos:start="37:13" pos:end="37:29">cpu_restore_state</name><argument_list pos:start="37:30" pos:end="37:37">(<argument pos:start="37:31" pos:end="37:32"><expr pos:start="37:31" pos:end="37:32"><name pos:start="37:31" pos:end="37:32">cs</name></expr></argument>, <argument pos:start="37:35" pos:end="37:36"><expr pos:start="37:35" pos:end="37:36"><name pos:start="37:35" pos:end="37:36">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:57"><expr pos:start="39:13" pos:end="39:56"><call pos:start="39:13" pos:end="39:56"><name pos:start="39:13" pos:end="39:29">program_interrupt</name><argument_list pos:start="39:30" pos:end="39:56">(<argument pos:start="39:31" pos:end="39:33"><expr pos:start="39:31" pos:end="39:33"><name pos:start="39:31" pos:end="39:33">env</name></expr></argument>, <argument pos:start="39:36" pos:end="39:52"><expr pos:start="39:36" pos:end="39:52"><name pos:start="39:36" pos:end="39:52">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="39:55" pos:end="39:55"><expr pos:start="39:55" pos:end="39:55"><literal type="number" pos:start="39:55" pos:end="39:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:21">return <expr pos:start="41:20" pos:end="41:20"><literal type="number" pos:start="41:20" pos:end="41:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="51:5" pos:end="51:39"><expr pos:start="51:5" pos:end="51:38"><call pos:start="51:5" pos:end="51:38"><name pos:start="51:5" pos:end="51:23">s390_get_feat_block</name><argument_list pos:start="51:24" pos:end="51:38">(<argument pos:start="51:25" pos:end="51:28"><expr pos:start="51:25" pos:end="51:28"><name pos:start="51:25" pos:end="51:28">type</name></expr></argument>, <argument pos:start="51:31" pos:end="51:37"><expr pos:start="51:31" pos:end="51:37"><name pos:start="51:31" pos:end="51:37">subfunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:34">(<expr pos:start="53:9" pos:end="53:33"><operator pos:start="53:9" pos:end="53:9">!</operator><call pos:start="53:10" pos:end="53:33"><name pos:start="53:10" pos:end="53:20">test_be_bit</name><argument_list pos:start="53:21" pos:end="53:33">(<argument pos:start="53:22" pos:end="53:23"><expr pos:start="53:22" pos:end="53:23"><name pos:start="53:22" pos:end="53:23">fc</name></expr></argument>, <argument pos:start="53:26" pos:end="53:32"><expr pos:start="53:26" pos:end="53:32"><name pos:start="53:26" pos:end="53:32">subfunc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:36" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:17">

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><call pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:25">cpu_restore_state</name><argument_list pos:start="55:26" pos:end="55:33">(<argument pos:start="55:27" pos:end="55:28"><expr pos:start="55:27" pos:end="55:28"><name pos:start="55:27" pos:end="55:28">cs</name></expr></argument>, <argument pos:start="55:31" pos:end="55:32"><expr pos:start="55:31" pos:end="55:32"><name pos:start="55:31" pos:end="55:32">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:53"><expr pos:start="57:9" pos:end="57:52"><call pos:start="57:9" pos:end="57:52"><name pos:start="57:9" pos:end="57:25">program_interrupt</name><argument_list pos:start="57:26" pos:end="57:52">(<argument pos:start="57:27" pos:end="57:29"><expr pos:start="57:27" pos:end="57:29"><name pos:start="57:27" pos:end="57:29">env</name></expr></argument>, <argument pos:start="57:32" pos:end="57:48"><expr pos:start="57:32" pos:end="57:48"><name pos:start="57:32" pos:end="57:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="57:51" pos:end="57:51"><expr pos:start="57:51" pos:end="57:51"><literal type="number" pos:start="57:51" pos:end="57:51">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:17">return <expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="65:5" pos:end="85:5">switch <condition pos:start="65:12" pos:end="65:15">(<expr pos:start="65:13" pos:end="65:14"><name pos:start="65:13" pos:end="65:14">fc</name></expr>)</condition> <block pos:start="65:17" pos:end="85:5">{<block_content pos:start="67:5" pos:end="83:31">

    <case pos:start="67:5" pos:end="67:11">case <expr pos:start="67:10" pos:end="67:10"><literal type="number" pos:start="67:10" pos:end="67:10">0</literal></expr>:</case> <comment type="block" pos:start="67:13" pos:end="67:35">/* query subfunction */</comment>

        <for pos:start="69:9" pos:end="75:9">for <control pos:start="69:13" pos:end="69:32">(<init pos:start="69:14" pos:end="69:19"><expr pos:start="69:14" pos:end="69:18"><name pos:start="69:14" pos:end="69:14">i</name> <operator pos:start="69:16" pos:end="69:16">=</operator> <literal type="number" pos:start="69:18" pos:end="69:18">0</literal></expr>;</init> <condition pos:start="69:21" pos:end="69:27"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:21">i</name> <operator pos:start="69:23" pos:end="69:23">&lt;</operator> <literal type="number" pos:start="69:25" pos:end="69:26">16</literal></expr>;</condition> <incr pos:start="69:29" pos:end="69:31"><expr pos:start="69:29" pos:end="69:31"><name pos:start="69:29" pos:end="69:29">i</name><operator pos:start="69:30" pos:end="69:31">++</operator></expr></incr>)</control> <block pos:start="69:34" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:61">

            <expr_stmt pos:start="71:13" pos:end="71:61"><expr pos:start="71:13" pos:end="71:60"><name pos:start="71:13" pos:end="71:22">param_addr</name> <operator pos:start="71:24" pos:end="71:24">=</operator> <call pos:start="71:26" pos:end="71:60"><name pos:start="71:26" pos:end="71:37">wrap_address</name><argument_list pos:start="71:38" pos:end="71:60">(<argument pos:start="71:39" pos:end="71:41"><expr pos:start="71:39" pos:end="71:41"><name pos:start="71:39" pos:end="71:41">env</name></expr></argument>, <argument pos:start="71:44" pos:end="71:59"><expr pos:start="71:44" pos:end="71:59"><name pos:start="71:44" pos:end="71:55"><name pos:start="71:44" pos:end="71:46">env</name><operator pos:start="71:47" pos:end="71:48">-&gt;</operator><name pos:start="71:49" pos:end="71:52">regs</name><index pos:start="71:53" pos:end="71:55">[<expr pos:start="71:54" pos:end="71:54"><literal type="number" pos:start="71:54" pos:end="71:54">1</literal></expr>]</index></name> <operator pos:start="71:57" pos:end="71:57">+</operator> <name pos:start="71:59" pos:end="71:59">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:61"><expr pos:start="73:13" pos:end="73:60"><call pos:start="73:13" pos:end="73:60"><name pos:start="73:13" pos:end="73:27">cpu_stb_data_ra</name><argument_list pos:start="73:28" pos:end="73:60">(<argument pos:start="73:29" pos:end="73:31"><expr pos:start="73:29" pos:end="73:31"><name pos:start="73:29" pos:end="73:31">env</name></expr></argument>, <argument pos:start="73:34" pos:end="73:43"><expr pos:start="73:34" pos:end="73:43"><name pos:start="73:34" pos:end="73:43">param_addr</name></expr></argument>, <argument pos:start="73:46" pos:end="73:55"><expr pos:start="73:46" pos:end="73:55"><name pos:start="73:46" pos:end="73:55"><name pos:start="73:46" pos:end="73:52">subfunc</name><index pos:start="73:53" pos:end="73:55">[<expr pos:start="73:54" pos:end="73:54"><name pos:start="73:54" pos:end="73:54">i</name></expr>]</index></name></expr></argument>, <argument pos:start="73:58" pos:end="73:59"><expr pos:start="73:58" pos:end="73:59"><name pos:start="73:58" pos:end="73:59">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <default pos:start="79:5" pos:end="79:12">default:</default>

        <comment type="block" pos:start="81:9" pos:end="81:58">/* we don't implement any other subfunction yet */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:31"><expr pos:start="83:9" pos:end="83:30"><call pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:28">g_assert_not_reached</name><argument_list pos:start="83:29" pos:end="83:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
