<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15090.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:32">migrate_params_check</name><parameter_list pos:start="1:33" pos:end="1:75">(<parameter pos:start="1:34" pos:end="1:60"><decl pos:start="1:34" pos:end="1:60"><type pos:start="1:34" pos:end="1:60"><name pos:start="1:34" pos:end="1:52">MigrationParameters</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">params</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:74"><decl pos:start="1:63" pos:end="1:74"><type pos:start="1:63" pos:end="1:74"><name pos:start="1:63" pos:end="1:67">Error</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier><modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="185:1">{<block_content pos:start="5:5" pos:end="183:16">

    <if_stmt pos:start="5:5" pos:end="15:5"><if pos:start="5:5" pos:end="15:5">if <condition pos:start="5:8" pos:end="7:67">(<expr pos:start="5:9" pos:end="7:66"><name pos:start="5:9" pos:end="5:34"><name pos:start="5:9" pos:end="5:14">params</name><operator pos:start="5:15" pos:end="5:16">-&gt;</operator><name pos:start="5:17" pos:end="5:34">has_compress_level</name></name> <operator pos:start="5:36" pos:end="5:37">&amp;&amp;</operator>

        <operator pos:start="7:9" pos:end="7:9">(</operator><name pos:start="7:10" pos:end="7:31"><name pos:start="7:10" pos:end="7:15">params</name><operator pos:start="7:16" pos:end="7:17">-&gt;</operator><name pos:start="7:18" pos:end="7:31">compress_level</name></name> <operator pos:start="7:33" pos:end="7:33">&lt;</operator> <literal type="number" pos:start="7:35" pos:end="7:35">0</literal> <operator pos:start="7:37" pos:end="7:38">||</operator> <name pos:start="7:40" pos:end="7:61"><name pos:start="7:40" pos:end="7:45">params</name><operator pos:start="7:46" pos:end="7:47">-&gt;</operator><name pos:start="7:48" pos:end="7:61">compress_level</name></name> <operator pos:start="7:63" pos:end="7:63">&gt;</operator> <literal type="number" pos:start="7:65" pos:end="7:65">9</literal><operator pos:start="7:66" pos:end="7:66">)</operator></expr>)</condition> <block pos:start="7:69" pos:end="15:5">{<block_content pos:start="9:9" pos:end="13:21">

        <expr_stmt pos:start="9:9" pos:end="11:70"><expr pos:start="9:9" pos:end="11:69"><call pos:start="9:9" pos:end="11:69"><name pos:start="9:9" pos:end="9:18">error_setg</name><argument_list pos:start="9:19" pos:end="11:69">(<argument pos:start="9:20" pos:end="9:23"><expr pos:start="9:20" pos:end="9:23"><name pos:start="9:20" pos:end="9:23">errp</name></expr></argument>, <argument pos:start="9:26" pos:end="9:53"><expr pos:start="9:26" pos:end="9:53"><name pos:start="9:26" pos:end="9:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="9:56" pos:end="9:71"><expr pos:start="9:56" pos:end="9:71"><literal type="string" pos:start="9:56" pos:end="9:71">"compress_level"</literal></expr></argument>,

                   <argument pos:start="11:20" pos:end="11:68"><expr pos:start="11:20" pos:end="11:68"><literal type="string" pos:start="11:20" pos:end="11:68">"is invalid, it should be in the range of 0 to 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:21">return <expr pos:start="13:16" pos:end="13:20"><name pos:start="13:16" pos:end="13:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="19:5" pos:end="31:5"><if pos:start="19:5" pos:end="31:5">if <condition pos:start="19:8" pos:end="21:73">(<expr pos:start="19:9" pos:end="21:72"><name pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:14">params</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:36">has_compress_threads</name></name> <operator pos:start="19:38" pos:end="19:39">&amp;&amp;</operator>

        <operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:33"><name pos:start="21:10" pos:end="21:15">params</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:33">compress_threads</name></name> <operator pos:start="21:35" pos:end="21:35">&lt;</operator> <literal type="number" pos:start="21:37" pos:end="21:37">1</literal> <operator pos:start="21:39" pos:end="21:40">||</operator> <name pos:start="21:42" pos:end="21:65"><name pos:start="21:42" pos:end="21:47">params</name><operator pos:start="21:48" pos:end="21:49">-&gt;</operator><name pos:start="21:50" pos:end="21:65">compress_threads</name></name> <operator pos:start="21:67" pos:end="21:67">&gt;</operator> <literal type="number" pos:start="21:69" pos:end="21:71">255</literal><operator pos:start="21:72" pos:end="21:72">)</operator></expr>)</condition> <block pos:start="21:75" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:21">

        <expr_stmt pos:start="23:9" pos:end="27:72"><expr pos:start="23:9" pos:end="27:71"><call pos:start="23:9" pos:end="27:71"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="27:71">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">errp</name></expr></argument>, <argument pos:start="23:26" pos:end="23:53"><expr pos:start="23:26" pos:end="23:53"><name pos:start="23:26" pos:end="23:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                   <argument pos:start="25:20" pos:end="25:37"><expr pos:start="25:20" pos:end="25:37"><literal type="string" pos:start="25:20" pos:end="25:37">"compress_threads"</literal></expr></argument>,

                   <argument pos:start="27:20" pos:end="27:70"><expr pos:start="27:20" pos:end="27:70"><literal type="string" pos:start="27:20" pos:end="27:70">"is invalid, it should be in the range of 1 to 255"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:21">return <expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="47:5"><if pos:start="35:5" pos:end="47:5">if <condition pos:start="35:8" pos:end="37:77">(<expr pos:start="35:9" pos:end="37:76"><name pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:14">params</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:38">has_decompress_threads</name></name> <operator pos:start="35:40" pos:end="35:41">&amp;&amp;</operator>

        <operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:35"><name pos:start="37:10" pos:end="37:15">params</name><operator pos:start="37:16" pos:end="37:17">-&gt;</operator><name pos:start="37:18" pos:end="37:35">decompress_threads</name></name> <operator pos:start="37:37" pos:end="37:37">&lt;</operator> <literal type="number" pos:start="37:39" pos:end="37:39">1</literal> <operator pos:start="37:41" pos:end="37:42">||</operator> <name pos:start="37:44" pos:end="37:69"><name pos:start="37:44" pos:end="37:49">params</name><operator pos:start="37:50" pos:end="37:51">-&gt;</operator><name pos:start="37:52" pos:end="37:69">decompress_threads</name></name> <operator pos:start="37:71" pos:end="37:71">&gt;</operator> <literal type="number" pos:start="37:73" pos:end="37:75">255</literal><operator pos:start="37:76" pos:end="37:76">)</operator></expr>)</condition> <block pos:start="37:79" pos:end="47:5">{<block_content pos:start="39:9" pos:end="45:21">

        <expr_stmt pos:start="39:9" pos:end="43:72"><expr pos:start="39:9" pos:end="43:71"><call pos:start="39:9" pos:end="43:71"><name pos:start="39:9" pos:end="39:18">error_setg</name><argument_list pos:start="39:19" pos:end="43:71">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">errp</name></expr></argument>, <argument pos:start="39:26" pos:end="39:53"><expr pos:start="39:26" pos:end="39:53"><name pos:start="39:26" pos:end="39:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                   <argument pos:start="41:20" pos:end="41:39"><expr pos:start="41:20" pos:end="41:39"><literal type="string" pos:start="41:20" pos:end="41:39">"decompress_threads"</literal></expr></argument>,

                   <argument pos:start="43:20" pos:end="43:70"><expr pos:start="43:20" pos:end="43:70"><literal type="string" pos:start="43:20" pos:end="43:70">"is invalid, it should be in the range of 1 to 255"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:21">return <expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="65:5"><if pos:start="51:5" pos:end="65:5">if <condition pos:start="51:8" pos:end="55:44">(<expr pos:start="51:9" pos:end="55:43"><name pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:14">params</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:40">has_cpu_throttle_initial</name></name> <operator pos:start="51:42" pos:end="51:43">&amp;&amp;</operator>

        <operator pos:start="53:9" pos:end="53:9">(</operator><name pos:start="53:10" pos:end="53:37"><name pos:start="53:10" pos:end="53:15">params</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:37">cpu_throttle_initial</name></name> <operator pos:start="53:39" pos:end="53:39">&lt;</operator> <literal type="number" pos:start="53:41" pos:end="53:41">1</literal> <operator pos:start="53:43" pos:end="53:44">||</operator>

         <name pos:start="55:10" pos:end="55:37"><name pos:start="55:10" pos:end="55:15">params</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:37">cpu_throttle_initial</name></name> <operator pos:start="55:39" pos:end="55:39">&gt;</operator> <literal type="number" pos:start="55:41" pos:end="55:42">99</literal><operator pos:start="55:43" pos:end="55:43">)</operator></expr>)</condition> <block pos:start="55:46" pos:end="65:5">{<block_content pos:start="57:9" pos:end="63:21">

        <expr_stmt pos:start="57:9" pos:end="61:57"><expr pos:start="57:9" pos:end="61:56"><call pos:start="57:9" pos:end="61:56"><name pos:start="57:9" pos:end="57:18">error_setg</name><argument_list pos:start="57:19" pos:end="61:56">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">errp</name></expr></argument>, <argument pos:start="57:26" pos:end="57:53"><expr pos:start="57:26" pos:end="57:53"><name pos:start="57:26" pos:end="57:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                   <argument pos:start="59:20" pos:end="59:41"><expr pos:start="59:20" pos:end="59:41"><literal type="string" pos:start="59:20" pos:end="59:41">"cpu_throttle_initial"</literal></expr></argument>,

                   <argument pos:start="61:20" pos:end="61:55"><expr pos:start="61:20" pos:end="61:55"><literal type="string" pos:start="61:20" pos:end="61:55">"an integer in the range of 1 to 99"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:21">return <expr pos:start="63:16" pos:end="63:20"><name pos:start="63:16" pos:end="63:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="83:5"><if pos:start="69:5" pos:end="83:5">if <condition pos:start="69:8" pos:end="73:46">(<expr pos:start="69:9" pos:end="73:45"><name pos:start="69:9" pos:end="69:42"><name pos:start="69:9" pos:end="69:14">params</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:42">has_cpu_throttle_increment</name></name> <operator pos:start="69:44" pos:end="69:45">&amp;&amp;</operator>

        <operator pos:start="71:9" pos:end="71:9">(</operator><name pos:start="71:10" pos:end="71:39"><name pos:start="71:10" pos:end="71:15">params</name><operator pos:start="71:16" pos:end="71:17">-&gt;</operator><name pos:start="71:18" pos:end="71:39">cpu_throttle_increment</name></name> <operator pos:start="71:41" pos:end="71:41">&lt;</operator> <literal type="number" pos:start="71:43" pos:end="71:43">1</literal> <operator pos:start="71:45" pos:end="71:46">||</operator>

         <name pos:start="73:10" pos:end="73:39"><name pos:start="73:10" pos:end="73:15">params</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:39">cpu_throttle_increment</name></name> <operator pos:start="73:41" pos:end="73:41">&gt;</operator> <literal type="number" pos:start="73:43" pos:end="73:44">99</literal><operator pos:start="73:45" pos:end="73:45">)</operator></expr>)</condition> <block pos:start="73:48" pos:end="83:5">{<block_content pos:start="75:9" pos:end="81:21">

        <expr_stmt pos:start="75:9" pos:end="79:57"><expr pos:start="75:9" pos:end="79:56"><call pos:start="75:9" pos:end="79:56"><name pos:start="75:9" pos:end="75:18">error_setg</name><argument_list pos:start="75:19" pos:end="79:56">(<argument pos:start="75:20" pos:end="75:23"><expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">errp</name></expr></argument>, <argument pos:start="75:26" pos:end="75:53"><expr pos:start="75:26" pos:end="75:53"><name pos:start="75:26" pos:end="75:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                   <argument pos:start="77:20" pos:end="77:43"><expr pos:start="77:20" pos:end="77:43"><literal type="string" pos:start="77:20" pos:end="77:43">"cpu_throttle_increment"</literal></expr></argument>,

                   <argument pos:start="79:20" pos:end="79:55"><expr pos:start="79:20" pos:end="79:55"><literal type="string" pos:start="79:20" pos:end="79:55">"an integer in the range of 1 to 99"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:21">return <expr pos:start="81:16" pos:end="81:20"><name pos:start="81:16" pos:end="81:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="87:5" pos:end="97:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="89:72">(<expr pos:start="87:9" pos:end="89:71"><name pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:14">params</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:33">has_max_bandwidth</name></name> <operator pos:start="87:35" pos:end="87:36">&amp;&amp;</operator>

        <operator pos:start="89:9" pos:end="89:9">(</operator><name pos:start="89:10" pos:end="89:30"><name pos:start="89:10" pos:end="89:15">params</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:30">max_bandwidth</name></name> <operator pos:start="89:32" pos:end="89:32">&lt;</operator> <literal type="number" pos:start="89:34" pos:end="89:34">0</literal> <operator pos:start="89:36" pos:end="89:37">||</operator> <name pos:start="89:39" pos:end="89:59"><name pos:start="89:39" pos:end="89:44">params</name><operator pos:start="89:45" pos:end="89:46">-&gt;</operator><name pos:start="89:47" pos:end="89:59">max_bandwidth</name></name> <operator pos:start="89:61" pos:end="89:61">&gt;</operator> <name pos:start="89:63" pos:end="89:70">SIZE_MAX</name><operator pos:start="89:71" pos:end="89:71">)</operator></expr>)</condition> <block pos:start="89:74" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:21">

        <expr_stmt pos:start="91:9" pos:end="93:70"><expr pos:start="91:9" pos:end="93:69"><call pos:start="91:9" pos:end="93:69"><name pos:start="91:9" pos:end="91:18">error_setg</name><argument_list pos:start="91:19" pos:end="93:69">(<argument pos:start="91:20" pos:end="91:23"><expr pos:start="91:20" pos:end="91:23"><name pos:start="91:20" pos:end="91:23">errp</name></expr></argument>, <argument pos:start="91:26" pos:end="93:58"><expr pos:start="91:26" pos:end="93:58"><literal type="string" pos:start="91:26" pos:end="91:78">"Parameter 'max_bandwidth' expects an integer in the"</literal>

                         <literal type="string" pos:start="93:26" pos:end="93:58">" range of 0 to %zu bytes/second"</literal></expr></argument>, <argument pos:start="93:61" pos:end="93:68"><expr pos:start="93:61" pos:end="93:68"><name pos:start="93:61" pos:end="93:68">SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:21">return <expr pos:start="95:16" pos:end="95:20"><name pos:start="95:16" pos:end="95:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="115:5"><if pos:start="101:5" pos:end="115:5">if <condition pos:start="101:8" pos:end="105:56">(<expr pos:start="101:9" pos:end="105:55"><name pos:start="101:9" pos:end="101:34"><name pos:start="101:9" pos:end="101:14">params</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:34">has_downtime_limit</name></name> <operator pos:start="101:36" pos:end="101:37">&amp;&amp;</operator>

        <operator pos:start="103:9" pos:end="103:9">(</operator><name pos:start="103:10" pos:end="103:31"><name pos:start="103:10" pos:end="103:15">params</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:31">downtime_limit</name></name> <operator pos:start="103:33" pos:end="103:33">&lt;</operator> <literal type="number" pos:start="103:35" pos:end="103:35">0</literal> <operator pos:start="103:37" pos:end="103:38">||</operator>

         <name pos:start="105:10" pos:end="105:31"><name pos:start="105:10" pos:end="105:15">params</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:31">downtime_limit</name></name> <operator pos:start="105:33" pos:end="105:33">&gt;</operator> <name pos:start="105:35" pos:end="105:54">MAX_MIGRATE_DOWNTIME</name><operator pos:start="105:55" pos:end="105:55">)</operator></expr>)</condition> <block pos:start="105:58" pos:end="115:5">{<block_content pos:start="107:9" pos:end="113:21">

        <expr_stmt pos:start="107:9" pos:end="111:47"><expr pos:start="107:9" pos:end="111:46"><call pos:start="107:9" pos:end="111:46"><name pos:start="107:9" pos:end="107:18">error_setg</name><argument_list pos:start="107:19" pos:end="111:46">(<argument pos:start="107:20" pos:end="107:23"><expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">errp</name></expr></argument>, <argument pos:start="107:26" pos:end="109:60"><expr pos:start="107:26" pos:end="109:60"><literal type="string" pos:start="107:26" pos:end="107:76">"Parameter 'downtime_limit' expects an integer in "</literal>

                         <literal type="string" pos:start="109:26" pos:end="109:60">"the range of 0 to %d milliseconds"</literal></expr></argument>,

                         <argument pos:start="111:26" pos:end="111:45"><expr pos:start="111:26" pos:end="111:45"><name pos:start="111:26" pos:end="111:45">MAX_MIGRATE_DOWNTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:21">return <expr pos:start="113:16" pos:end="113:20"><name pos:start="113:16" pos:end="113:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="129:5"><if pos:start="119:5" pos:end="129:5">if <condition pos:start="119:8" pos:end="119:75">(<expr pos:start="119:9" pos:end="119:74"><name pos:start="119:9" pos:end="119:38"><name pos:start="119:9" pos:end="119:14">params</name><operator pos:start="119:15" pos:end="119:16">-&gt;</operator><name pos:start="119:17" pos:end="119:38">has_x_checkpoint_delay</name></name> <operator pos:start="119:40" pos:end="119:41">&amp;&amp;</operator> <operator pos:start="119:43" pos:end="119:43">(</operator><name pos:start="119:44" pos:end="119:69"><name pos:start="119:44" pos:end="119:49">params</name><operator pos:start="119:50" pos:end="119:51">-&gt;</operator><name pos:start="119:52" pos:end="119:69">x_checkpoint_delay</name></name> <operator pos:start="119:71" pos:end="119:71">&lt;</operator> <literal type="number" pos:start="119:73" pos:end="119:73">0</literal><operator pos:start="119:74" pos:end="119:74">)</operator></expr>)</condition> <block pos:start="119:77" pos:end="129:5">{<block_content pos:start="121:9" pos:end="127:21">

        <expr_stmt pos:start="121:9" pos:end="125:57"><expr pos:start="121:9" pos:end="125:56"><call pos:start="121:9" pos:end="125:56"><name pos:start="121:9" pos:end="121:18">error_setg</name><argument_list pos:start="121:19" pos:end="125:56">(<argument pos:start="121:20" pos:end="121:23"><expr pos:start="121:20" pos:end="121:23"><name pos:start="121:20" pos:end="121:23">errp</name></expr></argument>, <argument pos:start="121:26" pos:end="121:53"><expr pos:start="121:26" pos:end="121:53"><name pos:start="121:26" pos:end="121:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                    <argument pos:start="123:21" pos:end="123:40"><expr pos:start="123:21" pos:end="123:40"><literal type="string" pos:start="123:21" pos:end="123:40">"x_checkpoint_delay"</literal></expr></argument>,

                    <argument pos:start="125:21" pos:end="125:55"><expr pos:start="125:21" pos:end="125:55"><literal type="string" pos:start="125:21" pos:end="125:55">"is invalid, it should be positive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="127:9" pos:end="127:21">return <expr pos:start="127:16" pos:end="127:20"><name pos:start="127:16" pos:end="127:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="131:5" pos:end="143:5"><if pos:start="131:5" pos:end="143:5">if <condition pos:start="131:8" pos:end="133:77">(<expr pos:start="131:9" pos:end="133:76"><name pos:start="131:9" pos:end="131:38"><name pos:start="131:9" pos:end="131:14">params</name><operator pos:start="131:15" pos:end="131:16">-&gt;</operator><name pos:start="131:17" pos:end="131:38">has_x_multifd_channels</name></name> <operator pos:start="131:40" pos:end="131:41">&amp;&amp;</operator>

        <operator pos:start="133:9" pos:end="133:9">(</operator><name pos:start="133:10" pos:end="133:35"><name pos:start="133:10" pos:end="133:15">params</name><operator pos:start="133:16" pos:end="133:17">-&gt;</operator><name pos:start="133:18" pos:end="133:35">x_multifd_channels</name></name> <operator pos:start="133:37" pos:end="133:37">&lt;</operator> <literal type="number" pos:start="133:39" pos:end="133:39">1</literal> <operator pos:start="133:41" pos:end="133:42">||</operator> <name pos:start="133:44" pos:end="133:69"><name pos:start="133:44" pos:end="133:49">params</name><operator pos:start="133:50" pos:end="133:51">-&gt;</operator><name pos:start="133:52" pos:end="133:69">x_multifd_channels</name></name> <operator pos:start="133:71" pos:end="133:71">&gt;</operator> <literal type="number" pos:start="133:73" pos:end="133:75">255</literal><operator pos:start="133:76" pos:end="133:76">)</operator></expr>)</condition> <block pos:start="133:79" pos:end="143:5">{<block_content pos:start="135:9" pos:end="141:21">

        <expr_stmt pos:start="135:9" pos:end="139:72"><expr pos:start="135:9" pos:end="139:71"><call pos:start="135:9" pos:end="139:71"><name pos:start="135:9" pos:end="135:18">error_setg</name><argument_list pos:start="135:19" pos:end="139:71">(<argument pos:start="135:20" pos:end="135:23"><expr pos:start="135:20" pos:end="135:23"><name pos:start="135:20" pos:end="135:23">errp</name></expr></argument>, <argument pos:start="135:26" pos:end="135:53"><expr pos:start="135:26" pos:end="135:53"><name pos:start="135:26" pos:end="135:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                   <argument pos:start="137:20" pos:end="137:37"><expr pos:start="137:20" pos:end="137:37"><literal type="string" pos:start="137:20" pos:end="137:37">"multifd_channels"</literal></expr></argument>,

                   <argument pos:start="139:20" pos:end="139:70"><expr pos:start="139:20" pos:end="139:70"><literal type="string" pos:start="139:20" pos:end="139:70">"is invalid, it should be in the range of 1 to 255"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:21">return <expr pos:start="141:16" pos:end="141:20"><name pos:start="141:16" pos:end="141:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="145:5" pos:end="159:5"><if pos:start="145:5" pos:end="159:5">if <condition pos:start="145:8" pos:end="149:51">(<expr pos:start="145:9" pos:end="149:50"><name pos:start="145:9" pos:end="145:40"><name pos:start="145:9" pos:end="145:14">params</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:40">has_x_multifd_page_count</name></name> <operator pos:start="145:42" pos:end="145:43">&amp;&amp;</operator>

            <operator pos:start="147:13" pos:end="147:13">(</operator><name pos:start="147:14" pos:end="147:41"><name pos:start="147:14" pos:end="147:19">params</name><operator pos:start="147:20" pos:end="147:21">-&gt;</operator><name pos:start="147:22" pos:end="147:41">x_multifd_page_count</name></name> <operator pos:start="147:43" pos:end="147:43">&lt;</operator> <literal type="number" pos:start="147:45" pos:end="147:45">1</literal> <operator pos:start="147:47" pos:end="147:48">||</operator>

             <name pos:start="149:14" pos:end="149:41"><name pos:start="149:14" pos:end="149:19">params</name><operator pos:start="149:20" pos:end="149:21">-&gt;</operator><name pos:start="149:22" pos:end="149:41">x_multifd_page_count</name></name> <operator pos:start="149:43" pos:end="149:43">&gt;</operator> <literal type="number" pos:start="149:45" pos:end="149:49">10000</literal><operator pos:start="149:50" pos:end="149:50">)</operator></expr>)</condition> <block pos:start="149:53" pos:end="159:5">{<block_content pos:start="151:9" pos:end="157:21">

        <expr_stmt pos:start="151:9" pos:end="155:74"><expr pos:start="151:9" pos:end="155:73"><call pos:start="151:9" pos:end="155:73"><name pos:start="151:9" pos:end="151:18">error_setg</name><argument_list pos:start="151:19" pos:end="155:73">(<argument pos:start="151:20" pos:end="151:23"><expr pos:start="151:20" pos:end="151:23"><name pos:start="151:20" pos:end="151:23">errp</name></expr></argument>, <argument pos:start="151:26" pos:end="151:53"><expr pos:start="151:26" pos:end="151:53"><name pos:start="151:26" pos:end="151:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                   <argument pos:start="153:20" pos:end="153:39"><expr pos:start="153:20" pos:end="153:39"><literal type="string" pos:start="153:20" pos:end="153:39">"multifd_page_count"</literal></expr></argument>,

                   <argument pos:start="155:20" pos:end="155:72"><expr pos:start="155:20" pos:end="155:72"><literal type="string" pos:start="155:20" pos:end="155:72">"is invalid, it should be in the range of 1 to 10000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="157:9" pos:end="157:21">return <expr pos:start="157:16" pos:end="157:20"><name pos:start="157:16" pos:end="157:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="163:5" pos:end="179:5"><if pos:start="163:5" pos:end="179:5">if <condition pos:start="163:8" pos:end="167:52">(<expr pos:start="163:9" pos:end="167:51"><name pos:start="163:9" pos:end="163:37"><name pos:start="163:9" pos:end="163:14">params</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:37">has_xbzrle_cache_size</name></name> <operator pos:start="163:39" pos:end="163:40">&amp;&amp;</operator>

        <operator pos:start="165:9" pos:end="165:9">(</operator><name pos:start="165:10" pos:end="165:34"><name pos:start="165:10" pos:end="165:15">params</name><operator pos:start="165:16" pos:end="165:17">-&gt;</operator><name pos:start="165:18" pos:end="165:34">xbzrle_cache_size</name></name> <operator pos:start="165:36" pos:end="165:36">&lt;</operator> <call pos:start="165:38" pos:end="165:60"><name pos:start="165:38" pos:end="165:58">qemu_target_page_size</name><argument_list pos:start="165:59" pos:end="165:60">()</argument_list></call> <operator pos:start="165:62" pos:end="165:63">||</operator>

         <operator pos:start="167:10" pos:end="167:10">!</operator><call pos:start="167:11" pos:end="167:50"><name pos:start="167:11" pos:end="167:23">is_power_of_2</name><argument_list pos:start="167:24" pos:end="167:50">(<argument pos:start="167:25" pos:end="167:49"><expr pos:start="167:25" pos:end="167:49"><name pos:start="167:25" pos:end="167:49"><name pos:start="167:25" pos:end="167:30">params</name><operator pos:start="167:31" pos:end="167:32">-&gt;</operator><name pos:start="167:33" pos:end="167:49">xbzrle_cache_size</name></name></expr></argument>)</argument_list></call><operator pos:start="167:51" pos:end="167:51">)</operator></expr>)</condition> <block pos:start="167:54" pos:end="179:5">{<block_content pos:start="169:9" pos:end="177:21">

        <expr_stmt pos:start="169:9" pos:end="175:42"><expr pos:start="169:9" pos:end="175:41"><call pos:start="169:9" pos:end="175:41"><name pos:start="169:9" pos:end="169:18">error_setg</name><argument_list pos:start="169:19" pos:end="175:41">(<argument pos:start="169:20" pos:end="169:23"><expr pos:start="169:20" pos:end="169:23"><name pos:start="169:20" pos:end="169:23">errp</name></expr></argument>, <argument pos:start="169:26" pos:end="169:53"><expr pos:start="169:26" pos:end="169:53"><name pos:start="169:26" pos:end="169:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>,

                   <argument pos:start="171:20" pos:end="171:38"><expr pos:start="171:20" pos:end="171:38"><literal type="string" pos:start="171:20" pos:end="171:38">"xbzrle_cache_size"</literal></expr></argument>,

                   <argument pos:start="173:20" pos:end="175:40"><expr pos:start="173:20" pos:end="175:40"><literal type="string" pos:start="173:20" pos:end="173:74">"is invalid, it should be bigger than target page size"</literal>

                   <literal type="string" pos:start="175:20" pos:end="175:40">" and a power of two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="177:9" pos:end="177:21">return <expr pos:start="177:16" pos:end="177:20"><name pos:start="177:16" pos:end="177:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="183:5" pos:end="183:16">return <expr pos:start="183:12" pos:end="183:15"><name pos:start="183:12" pos:end="183:15">true</name></expr>;</return>

</block_content>}</block></function>
</unit>
