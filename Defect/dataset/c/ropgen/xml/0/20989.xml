<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20989.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">bdrv_is_allocated_above</name><parameter_list pos:start="1:28" pos:end="7:54">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:44">BlockDriverState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">top</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:50"><decl pos:start="3:29" pos:end="3:50"><type pos:start="3:29" pos:end="3:50"><name pos:start="3:29" pos:end="3:44">BlockDriverState</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">base</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:46"><decl pos:start="5:29" pos:end="5:46"><type pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:35">int64_t</name></type> <name pos:start="5:37" pos:end="5:46">sector_num</name></decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:42"><decl pos:start="7:29" pos:end="7:42"><type pos:start="7:29" pos:end="7:42"><name pos:start="7:29" pos:end="7:31">int</name></type> <name pos:start="7:33" pos:end="7:42">nb_sectors</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:53"><decl pos:start="7:45" pos:end="7:53"><type pos:start="7:45" pos:end="7:53"><name pos:start="7:45" pos:end="7:47">int</name> <modifier pos:start="7:49" pos:end="7:49">*</modifier></type><name pos:start="7:50" pos:end="7:53">pnum</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="75:1">{<block_content pos:start="11:5" pos:end="73:13">

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:34">intermediate</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:27"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:14">n</name> <init pos:start="13:16" pos:end="13:27">= <expr pos:start="13:18" pos:end="13:27"><name pos:start="13:18" pos:end="13:27">nb_sectors</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:16">intermediate</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <name pos:start="17:20" pos:end="17:22">top</name></expr>;</expr_stmt>

    <while pos:start="19:5" pos:end="67:5">while <condition pos:start="19:11" pos:end="19:48">(<expr pos:start="19:12" pos:end="19:47"><name pos:start="19:12" pos:end="19:23">intermediate</name> <operator pos:start="19:25" pos:end="19:26">&amp;&amp;</operator> <name pos:start="19:28" pos:end="19:39">intermediate</name> <operator pos:start="19:41" pos:end="19:42">!=</operator> <name pos:start="19:44" pos:end="19:47">base</name></expr>)</condition> <block pos:start="19:50" pos:end="67:5">{<block_content pos:start="21:9" pos:end="65:48">

        <decl_stmt pos:start="21:9" pos:end="21:23"><decl pos:start="21:9" pos:end="21:22"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:22">pnum_inter</name></decl>;</decl_stmt>

        <expr_stmt pos:start="23:9" pos:end="25:45"><expr pos:start="23:9" pos:end="25:44"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="25:44"><name pos:start="23:15" pos:end="23:31">bdrv_is_allocated</name><argument_list pos:start="23:32" pos:end="25:44">(<argument pos:start="23:33" pos:end="23:44"><expr pos:start="23:33" pos:end="23:44"><name pos:start="23:33" pos:end="23:44">intermediate</name></expr></argument>, <argument pos:start="23:47" pos:end="23:56"><expr pos:start="23:47" pos:end="23:56"><name pos:start="23:47" pos:end="23:56">sector_num</name></expr></argument>, <argument pos:start="23:59" pos:end="23:68"><expr pos:start="23:59" pos:end="23:68"><name pos:start="23:59" pos:end="23:68">nb_sectors</name></expr></argument>,

                                <argument pos:start="25:33" pos:end="25:43"><expr pos:start="25:33" pos:end="25:43"><operator pos:start="25:33" pos:end="25:33">&amp;</operator><name pos:start="25:34" pos:end="25:43">pnum_inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="37:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:20">(<expr pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:15">ret</name> <operator pos:start="27:17" pos:end="27:17">&lt;</operator> <literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr>)</condition> <block pos:start="27:22" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:23">

            <return pos:start="29:13" pos:end="29:23">return <expr pos:start="29:20" pos:end="29:22"><name pos:start="29:20" pos:end="29:22">ret</name></expr>;</return>

        </block_content>}</block></if> <if type="elseif" pos:start="31:11" pos:end="37:9">else if <condition pos:start="31:19" pos:end="31:23">(<expr pos:start="31:20" pos:end="31:22"><name pos:start="31:20" pos:end="31:22">ret</name></expr>)</condition> <block pos:start="31:25" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:21">

            <expr_stmt pos:start="33:13" pos:end="33:31"><expr pos:start="33:13" pos:end="33:30"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:17">pnum</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:30">pnum_inter</name></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:21">return <expr pos:start="35:20" pos:end="35:20"><literal type="number" pos:start="35:20" pos:end="35:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="41:9" pos:end="51:11">/*

         * [sector_num, nb_sectors] is unallocated on top but intermediate

         * might have

         *

         * [sector_num+x, nr_sectors] allocated.

         */</comment>

        <if_stmt pos:start="53:9" pos:end="61:9"><if pos:start="53:9" pos:end="61:9">if <condition pos:start="53:12" pos:end="57:68">(<expr pos:start="53:13" pos:end="57:67"><name pos:start="53:13" pos:end="53:13">n</name> <operator pos:start="53:15" pos:end="53:15">&gt;</operator> <name pos:start="53:17" pos:end="53:26">pnum_inter</name> <operator pos:start="53:28" pos:end="53:29">&amp;&amp;</operator>

            <operator pos:start="55:13" pos:end="55:13">(</operator><name pos:start="55:14" pos:end="55:25">intermediate</name> <operator pos:start="55:27" pos:end="55:28">==</operator> <name pos:start="55:30" pos:end="55:32">top</name> <operator pos:start="55:34" pos:end="55:35">||</operator>

             <name pos:start="57:14" pos:end="57:23">sector_num</name> <operator pos:start="57:25" pos:end="57:25">+</operator> <name pos:start="57:27" pos:end="57:36">pnum_inter</name> <operator pos:start="57:38" pos:end="57:38">&lt;</operator> <name pos:start="57:40" pos:end="57:66"><name pos:start="57:40" pos:end="57:51">intermediate</name><operator pos:start="57:52" pos:end="57:53">-&gt;</operator><name pos:start="57:54" pos:end="57:66">total_sectors</name></name><operator pos:start="57:67" pos:end="57:67">)</operator></expr>)</condition> <block pos:start="57:70" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:27">

            <expr_stmt pos:start="59:13" pos:end="59:27"><expr pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:13">n</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:26">pnum_inter</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:48"><expr pos:start="65:9" pos:end="65:47"><name pos:start="65:9" pos:end="65:20">intermediate</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:47"><name pos:start="65:24" pos:end="65:35">intermediate</name><operator pos:start="65:36" pos:end="65:37">-&gt;</operator><name pos:start="65:38" pos:end="65:47">backing_hd</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="71:5" pos:end="71:14"><expr pos:start="71:5" pos:end="71:13"><operator pos:start="71:5" pos:end="71:5">*</operator><name pos:start="71:6" pos:end="71:9">pnum</name> <operator pos:start="71:11" pos:end="71:11">=</operator> <name pos:start="71:13" pos:end="71:13">n</name></expr>;</expr_stmt>

    <return pos:start="73:5" pos:end="73:13">return <expr pos:start="73:12" pos:end="73:12"><literal type="number" pos:start="73:12" pos:end="73:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
