<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7680.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">SwsVector</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:29">sws_getGaussianVec</name><parameter_list pos:start="1:30" pos:end="1:62">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:45"><name pos:start="1:31" pos:end="1:36">double</name></type> <name pos:start="1:38" pos:end="1:45">variance</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:53">double</name></type> <name pos:start="1:55" pos:end="1:61">quality</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:15">

    <decl_stmt pos:start="5:5" pos:end="5:59"><decl pos:start="5:5" pos:end="5:58"><type pos:start="5:5" pos:end="5:13"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:13">int</name></type> <name pos:start="5:15" pos:end="5:20">length</name> <init pos:start="5:22" pos:end="5:58">= <expr pos:start="5:24" pos:end="5:58"><operator pos:start="5:24" pos:end="5:24">(</operator><name pos:start="5:25" pos:end="5:27">int</name><operator pos:start="5:28" pos:end="5:28">)</operator><operator pos:start="5:29" pos:end="5:29">(</operator><name pos:start="5:30" pos:end="5:37">variance</name> <operator pos:start="5:39" pos:end="5:39">*</operator> <name pos:start="5:41" pos:end="5:47">quality</name> <operator pos:start="5:49" pos:end="5:49">+</operator> <literal type="number" pos:start="5:51" pos:end="5:53">0.5</literal><operator pos:start="5:54" pos:end="5:54">)</operator> <operator pos:start="5:56" pos:end="5:56">|</operator> <literal type="number" pos:start="5:58" pos:end="5:58">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">double</name></type> <name pos:start="9:12" pos:end="9:17">middle</name>  <init pos:start="9:20" pos:end="9:39">= <expr pos:start="9:22" pos:end="9:39"><operator pos:start="9:22" pos:end="9:22">(</operator><name pos:start="9:23" pos:end="9:28">length</name> <operator pos:start="9:30" pos:end="9:30">-</operator> <literal type="number" pos:start="9:32" pos:end="9:32">1</literal><operator pos:start="9:33" pos:end="9:33">)</operator> <operator pos:start="9:35" pos:end="9:35">*</operator> <literal type="number" pos:start="9:37" pos:end="9:39">0.5</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">SwsVector</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:18">vec</name> <init pos:start="11:20" pos:end="11:41">= <expr pos:start="11:22" pos:end="11:41"><call pos:start="11:22" pos:end="11:41"><name pos:start="11:22" pos:end="11:33">sws_allocVec</name><argument_list pos:start="11:34" pos:end="11:41">(<argument pos:start="11:35" pos:end="11:40"><expr pos:start="11:35" pos:end="11:40"><name pos:start="11:35" pos:end="11:40">length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:20"><if pos:start="15:5" pos:end="17:20">if <condition pos:start="15:8" pos:end="15:13">(<expr pos:start="15:9" pos:end="15:12"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:12">vec</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:20"><block_content pos:start="17:9" pos:end="17:20">

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="21:5" pos:end="29:5">for <control pos:start="21:9" pos:end="21:32">(<init pos:start="21:10" pos:end="21:15"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">i</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</init> <condition pos:start="21:17" pos:end="21:27"><expr pos:start="21:17" pos:end="21:26"><name pos:start="21:17" pos:end="21:17">i</name> <operator pos:start="21:19" pos:end="21:19">&lt;</operator> <name pos:start="21:21" pos:end="21:26">length</name></expr>;</condition> <incr pos:start="21:29" pos:end="21:31"><expr pos:start="21:29" pos:end="21:31"><name pos:start="21:29" pos:end="21:29">i</name><operator pos:start="21:30" pos:end="21:31">++</operator></expr></incr>)</control> <block pos:start="21:34" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:50">

        <decl_stmt pos:start="23:9" pos:end="23:33"><decl pos:start="23:9" pos:end="23:32"><type pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:14">double</name></type> <name pos:start="23:16" pos:end="23:19">dist</name> <init pos:start="23:21" pos:end="23:32">= <expr pos:start="23:23" pos:end="23:32"><name pos:start="23:23" pos:end="23:23">i</name> <operator pos:start="23:25" pos:end="23:25">-</operator> <name pos:start="23:27" pos:end="23:32">middle</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="25:9" pos:end="27:50"><expr pos:start="25:9" pos:end="27:49"><name pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:11">vec</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:18">coeff</name><index pos:start="25:19" pos:end="25:21">[<expr pos:start="25:20" pos:end="25:20"><name pos:start="25:20" pos:end="25:20">i</name></expr>]</index></name> <operator pos:start="25:23" pos:end="25:23">=</operator> <call pos:start="25:25" pos:end="25:69"><name pos:start="25:25" pos:end="25:27">exp</name><argument_list pos:start="25:28" pos:end="25:69">(<argument pos:start="25:29" pos:end="25:68"><expr pos:start="25:29" pos:end="25:68"><operator pos:start="25:29" pos:end="25:29">-</operator><name pos:start="25:30" pos:end="25:33">dist</name> <operator pos:start="25:35" pos:end="25:35">*</operator> <name pos:start="25:37" pos:end="25:40">dist</name> <operator pos:start="25:42" pos:end="25:42">/</operator> <operator pos:start="25:44" pos:end="25:44">(</operator><literal type="number" pos:start="25:45" pos:end="25:45">2</literal> <operator pos:start="25:47" pos:end="25:47">*</operator> <name pos:start="25:49" pos:end="25:56">variance</name> <operator pos:start="25:58" pos:end="25:58">*</operator> <name pos:start="25:60" pos:end="25:67">variance</name><operator pos:start="25:68" pos:end="25:68">)</operator></expr></argument>)</argument_list></call> <operator pos:start="25:71" pos:end="25:71">/</operator>

                        <call pos:start="27:25" pos:end="27:49"><name pos:start="27:25" pos:end="27:28">sqrt</name><argument_list pos:start="27:29" pos:end="27:49">(<argument pos:start="27:30" pos:end="27:48"><expr pos:start="27:30" pos:end="27:48"><literal type="number" pos:start="27:30" pos:end="27:30">2</literal> <operator pos:start="27:32" pos:end="27:32">*</operator> <name pos:start="27:34" pos:end="27:41">variance</name> <operator pos:start="27:43" pos:end="27:43">*</operator> <name pos:start="27:45" pos:end="27:48">M_PI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="33:5" pos:end="33:31"><expr pos:start="33:5" pos:end="33:30"><call pos:start="33:5" pos:end="33:30"><name pos:start="33:5" pos:end="33:20">sws_normalizeVec</name><argument_list pos:start="33:21" pos:end="33:30">(<argument pos:start="33:22" pos:end="33:24"><expr pos:start="33:22" pos:end="33:24"><name pos:start="33:22" pos:end="33:24">vec</name></expr></argument>, <argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><literal type="number" pos:start="33:27" pos:end="33:29">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="37:5" pos:end="37:15">return <expr pos:start="37:12" pos:end="37:14"><name pos:start="37:12" pos:end="37:14">vec</name></expr>;</return>

</block_content>}</block></function>
</unit>
