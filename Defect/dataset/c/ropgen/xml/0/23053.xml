<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23053.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">vhost_set_memory</name><parameter_list pos:start="1:29" pos:end="5:38">(<parameter pos:start="1:30" pos:end="1:53"><decl pos:start="1:30" pos:end="1:53"><type pos:start="1:30" pos:end="1:53"><name pos:start="1:30" pos:end="1:43">MemoryListener</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:53">listener</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:57"><decl pos:start="3:30" pos:end="3:57"><type pos:start="3:30" pos:end="3:57"><name pos:start="3:30" pos:end="3:48">MemoryRegionSection</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:57">section</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:37"><decl pos:start="5:30" pos:end="5:37"><type pos:start="5:30" pos:end="5:37"><name pos:start="5:30" pos:end="5:33">bool</name></type> <name pos:start="5:35" pos:end="5:37">add</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="93:1">{<block_content pos:start="9:5" pos:end="91:31">

    <decl_stmt pos:start="9:5" pos:end="11:58"><decl pos:start="9:5" pos:end="11:57"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:20">vhost_dev</name></name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">dev</name> <init pos:start="9:27" pos:end="11:57">= <expr pos:start="9:29" pos:end="11:57"><call pos:start="9:29" pos:end="11:57"><name pos:start="9:29" pos:end="9:40">container_of</name><argument_list pos:start="9:41" pos:end="11:57">(<argument pos:start="9:42" pos:end="9:49"><expr pos:start="9:42" pos:end="9:49"><name pos:start="9:42" pos:end="9:49">listener</name></expr></argument>, <argument pos:start="9:52" pos:end="9:67"><expr pos:start="9:52" pos:end="9:67">struct <name pos:start="9:59" pos:end="9:67">vhost_dev</name></expr></argument>,

                                         <argument pos:start="11:42" pos:end="11:56"><expr pos:start="11:42" pos:end="11:56"><name pos:start="11:42" pos:end="11:56">memory_listener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:61"><decl pos:start="13:5" pos:end="13:60"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">hwaddr</name></type> <name pos:start="13:12" pos:end="13:21">start_addr</name> <init pos:start="13:23" pos:end="13:60">= <expr pos:start="13:25" pos:end="13:60"><name pos:start="13:25" pos:end="13:60"><name pos:start="13:25" pos:end="13:31">section</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:60">offset_within_address_space</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:50"><decl pos:start="15:5" pos:end="15:49"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:19">size</name> <init pos:start="15:21" pos:end="15:49">= <expr pos:start="15:23" pos:end="15:49"><call pos:start="15:23" pos:end="15:49"><name pos:start="15:23" pos:end="15:34">int128_get64</name><argument_list pos:start="15:35" pos:end="15:49">(<argument pos:start="15:36" pos:end="15:48"><expr pos:start="15:36" pos:end="15:48"><name pos:start="15:36" pos:end="15:48"><name pos:start="15:36" pos:end="15:42">section</name><operator pos:start="15:43" pos:end="15:44">-&gt;</operator><name pos:start="15:45" pos:end="15:48">size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:59"><decl pos:start="17:5" pos:end="17:58"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:18">log_dirty</name> <init pos:start="17:20" pos:end="17:58">= <expr pos:start="17:22" pos:end="17:58"><call pos:start="17:22" pos:end="17:58"><name pos:start="17:22" pos:end="17:45">memory_region_is_logging</name><argument_list pos:start="17:46" pos:end="17:58">(<argument pos:start="17:47" pos:end="17:57"><expr pos:start="17:47" pos:end="17:57"><name pos:start="17:47" pos:end="17:57"><name pos:start="17:47" pos:end="17:53">section</name><operator pos:start="17:54" pos:end="17:55">-&gt;</operator><name pos:start="17:56" pos:end="17:57">mr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="21:63"><decl pos:start="19:5" pos:end="21:62"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">s</name> <init pos:start="19:11" pos:end="21:62">= <expr pos:start="19:13" pos:end="21:62"><call pos:start="19:13" pos:end="19:50"><name pos:start="19:13" pos:end="19:20">offsetof</name><argument_list pos:start="19:21" pos:end="19:50">(<argument pos:start="19:22" pos:end="19:40"><expr pos:start="19:22" pos:end="19:40">struct <name pos:start="19:29" pos:end="19:40">vhost_memory</name></expr></argument>, <argument pos:start="19:43" pos:end="19:49"><expr pos:start="19:43" pos:end="19:49"><name pos:start="19:43" pos:end="19:49">regions</name></expr></argument>)</argument_list></call> <operator pos:start="19:52" pos:end="19:52">+</operator>

        <operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:27"><name pos:start="21:10" pos:end="21:12">dev</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:17">mem</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:27">nregions</name></name> <operator pos:start="21:29" pos:end="21:29">+</operator> <literal type="number" pos:start="21:31" pos:end="21:31">1</literal><operator pos:start="21:32" pos:end="21:32">)</operator> <operator pos:start="21:34" pos:end="21:34">*</operator> <sizeof pos:start="21:36" pos:end="21:62">sizeof <name pos:start="21:43" pos:end="21:62"><name pos:start="21:43" pos:end="21:45">dev</name><operator pos:start="21:46" pos:end="21:47">-&gt;</operator><name pos:start="21:48" pos:end="21:50">mem</name><operator pos:start="21:51" pos:end="21:52">-&gt;</operator><name pos:start="21:53" pos:end="21:59">regions</name><index pos:start="21:60" pos:end="21:62">[<expr pos:start="21:61" pos:end="21:61"><literal type="number" pos:start="21:61" pos:end="21:61">0</literal></expr>]</index></name></sizeof></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:14"><decl pos:start="23:5" pos:end="23:13"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">void</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:13">ram</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:7">dev</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:12">mem</name></name> <operator pos:start="27:14" pos:end="27:14">=</operator> <call pos:start="27:16" pos:end="27:37"><name pos:start="27:16" pos:end="27:24">g_realloc</name><argument_list pos:start="27:25" pos:end="27:37">(<argument pos:start="27:26" pos:end="27:33"><expr pos:start="27:26" pos:end="27:33"><name pos:start="27:26" pos:end="27:33"><name pos:start="27:26" pos:end="27:28">dev</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:33">mem</name></name></expr></argument>, <argument pos:start="27:36" pos:end="27:36"><expr pos:start="27:36" pos:end="27:36"><name pos:start="27:36" pos:end="27:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:17">log_dirty</name></expr>)</condition> <block pos:start="31:20" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:20">

        <expr_stmt pos:start="33:9" pos:end="33:20"><expr pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:11">add</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:19">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:17"><expr pos:start="39:5" pos:end="39:16"><call pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:16">(<argument pos:start="39:12" pos:end="39:15"><expr pos:start="39:12" pos:end="39:15"><name pos:start="39:12" pos:end="39:15">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:84">/* Optimize no-change case. At least cirrus_vga does this a lot at this time. */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:81"><expr pos:start="45:5" pos:end="45:80"><name pos:start="45:5" pos:end="45:7">ram</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:48"><name pos:start="45:11" pos:end="45:35">memory_region_get_ram_ptr</name><argument_list pos:start="45:36" pos:end="45:48">(<argument pos:start="45:37" pos:end="45:47"><expr pos:start="45:37" pos:end="45:47"><name pos:start="45:37" pos:end="45:47"><name pos:start="45:37" pos:end="45:43">section</name><operator pos:start="45:44" pos:end="45:45">-&gt;</operator><name pos:start="45:46" pos:end="45:47">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="45:50" pos:end="45:50">+</operator> <name pos:start="45:52" pos:end="45:80"><name pos:start="45:52" pos:end="45:58">section</name><operator pos:start="45:59" pos:end="45:60">-&gt;</operator><name pos:start="45:61" pos:end="45:80">offset_within_region</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="67:5"><if pos:start="47:5" pos:end="57:5">if <condition pos:start="47:8" pos:end="47:12">(<expr pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">add</name></expr>)</condition> <block pos:start="47:14" pos:end="57:5">{<block_content pos:start="49:9" pos:end="55:9">

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:73">(<expr pos:start="49:13" pos:end="49:72"><operator pos:start="49:13" pos:end="49:13">!</operator><call pos:start="49:14" pos:end="49:72"><name pos:start="49:14" pos:end="49:33">vhost_dev_cmp_memory</name><argument_list pos:start="49:34" pos:end="49:72">(<argument pos:start="49:35" pos:end="49:37"><expr pos:start="49:35" pos:end="49:37"><name pos:start="49:35" pos:end="49:37">dev</name></expr></argument>, <argument pos:start="49:40" pos:end="49:49"><expr pos:start="49:40" pos:end="49:49"><name pos:start="49:40" pos:end="49:49">start_addr</name></expr></argument>, <argument pos:start="49:52" pos:end="49:55"><expr pos:start="49:52" pos:end="49:55"><name pos:start="49:52" pos:end="49:55">size</name></expr></argument>, <argument pos:start="49:58" pos:end="49:71"><expr pos:start="49:58" pos:end="49:71"><operator pos:start="49:58" pos:end="49:58">(</operator><name pos:start="49:59" pos:end="49:67">uintptr_t</name><operator pos:start="49:68" pos:end="49:68">)</operator><name pos:start="49:69" pos:end="49:71">ram</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:75" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:19">

            <comment type="block" pos:start="51:13" pos:end="51:65">/* Region exists with same address. Nothing to do. */</comment>

            <return pos:start="53:13" pos:end="53:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="67:5">else <block pos:start="57:12" pos:end="67:5">{<block_content pos:start="59:9" pos:end="65:9">

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:55">(<expr pos:start="59:13" pos:end="59:54"><operator pos:start="59:13" pos:end="59:13">!</operator><call pos:start="59:14" pos:end="59:54"><name pos:start="59:14" pos:end="59:31">vhost_dev_find_reg</name><argument_list pos:start="59:32" pos:end="59:54">(<argument pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><name pos:start="59:33" pos:end="59:35">dev</name></expr></argument>, <argument pos:start="59:38" pos:end="59:47"><expr pos:start="59:38" pos:end="59:47"><name pos:start="59:38" pos:end="59:47">start_addr</name></expr></argument>, <argument pos:start="59:50" pos:end="59:53"><expr pos:start="59:50" pos:end="59:53"><name pos:start="59:50" pos:end="59:53">size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:57" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:19">

            <comment type="block" pos:start="61:13" pos:end="61:70">/* Removing region that we don't access. Nothing to do. */</comment>

            <return pos:start="63:13" pos:end="63:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:53"><expr pos:start="71:5" pos:end="71:52"><call pos:start="71:5" pos:end="71:52"><name pos:start="71:5" pos:end="71:29">vhost_dev_unassign_memory</name><argument_list pos:start="71:30" pos:end="71:52">(<argument pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><name pos:start="71:31" pos:end="71:33">dev</name></expr></argument>, <argument pos:start="71:36" pos:end="71:45"><expr pos:start="71:36" pos:end="71:45"><name pos:start="71:36" pos:end="71:45">start_addr</name></expr></argument>, <argument pos:start="71:48" pos:end="71:51"><expr pos:start="71:48" pos:end="71:51"><name pos:start="71:48" pos:end="71:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="85:5"><if pos:start="73:5" pos:end="79:5">if <condition pos:start="73:8" pos:end="73:12">(<expr pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">add</name></expr>)</condition> <block pos:start="73:14" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:71">

        <comment type="block" pos:start="75:9" pos:end="75:64">/* Add given mapping, merging adjacent regions if any */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:71"><expr pos:start="77:9" pos:end="77:70"><call pos:start="77:9" pos:end="77:70"><name pos:start="77:9" pos:end="77:31">vhost_dev_assign_memory</name><argument_list pos:start="77:32" pos:end="77:70">(<argument pos:start="77:33" pos:end="77:35"><expr pos:start="77:33" pos:end="77:35"><name pos:start="77:33" pos:end="77:35">dev</name></expr></argument>, <argument pos:start="77:38" pos:end="77:47"><expr pos:start="77:38" pos:end="77:47"><name pos:start="77:38" pos:end="77:47">start_addr</name></expr></argument>, <argument pos:start="77:50" pos:end="77:53"><expr pos:start="77:50" pos:end="77:53"><name pos:start="77:50" pos:end="77:53">size</name></expr></argument>, <argument pos:start="77:56" pos:end="77:69"><expr pos:start="77:56" pos:end="77:69"><operator pos:start="77:56" pos:end="77:56">(</operator><name pos:start="77:57" pos:end="77:65">uintptr_t</name><operator pos:start="77:66" pos:end="77:66">)</operator><name pos:start="77:67" pos:end="77:69">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="79:7" pos:end="85:5">else <block pos:start="79:12" pos:end="85:5">{<block_content pos:start="83:9" pos:end="83:57">

        <comment type="block" pos:start="81:9" pos:end="81:57">/* Remove old mapping for this memory, if any. */</comment>

        <expr_stmt pos:start="83:9" pos:end="83:57"><expr pos:start="83:9" pos:end="83:56"><call pos:start="83:9" pos:end="83:56"><name pos:start="83:9" pos:end="83:33">vhost_dev_unassign_memory</name><argument_list pos:start="83:34" pos:end="83:56">(<argument pos:start="83:35" pos:end="83:37"><expr pos:start="83:35" pos:end="83:37"><name pos:start="83:35" pos:end="83:37">dev</name></expr></argument>, <argument pos:start="83:40" pos:end="83:49"><expr pos:start="83:40" pos:end="83:49"><name pos:start="83:40" pos:end="83:49">start_addr</name></expr></argument>, <argument pos:start="83:52" pos:end="83:55"><expr pos:start="83:52" pos:end="83:55"><name pos:start="83:52" pos:end="83:55">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:79"><expr pos:start="87:5" pos:end="87:78"><name pos:start="87:5" pos:end="87:31"><name pos:start="87:5" pos:end="87:7">dev</name><operator pos:start="87:8" pos:end="87:9">-&gt;</operator><name pos:start="87:10" pos:end="87:31">mem_changed_start_addr</name></name> <operator pos:start="87:33" pos:end="87:33">=</operator> <call pos:start="87:35" pos:end="87:78"><name pos:start="87:35" pos:end="87:37">MIN</name><argument_list pos:start="87:38" pos:end="87:78">(<argument pos:start="87:39" pos:end="87:65"><expr pos:start="87:39" pos:end="87:65"><name pos:start="87:39" pos:end="87:65"><name pos:start="87:39" pos:end="87:41">dev</name><operator pos:start="87:42" pos:end="87:43">-&gt;</operator><name pos:start="87:44" pos:end="87:65">mem_changed_start_addr</name></name></expr></argument>, <argument pos:start="87:68" pos:end="87:77"><expr pos:start="87:68" pos:end="87:77"><name pos:start="87:68" pos:end="87:77">start_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:86"><expr pos:start="89:5" pos:end="89:85"><name pos:start="89:5" pos:end="89:29"><name pos:start="89:5" pos:end="89:7">dev</name><operator pos:start="89:8" pos:end="89:9">-&gt;</operator><name pos:start="89:10" pos:end="89:29">mem_changed_end_addr</name></name> <operator pos:start="89:31" pos:end="89:31">=</operator> <call pos:start="89:33" pos:end="89:85"><name pos:start="89:33" pos:end="89:35">MAX</name><argument_list pos:start="89:36" pos:end="89:85">(<argument pos:start="89:37" pos:end="89:61"><expr pos:start="89:37" pos:end="89:61"><name pos:start="89:37" pos:end="89:61"><name pos:start="89:37" pos:end="89:39">dev</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:61">mem_changed_end_addr</name></name></expr></argument>, <argument pos:start="89:64" pos:end="89:84"><expr pos:start="89:64" pos:end="89:84"><name pos:start="89:64" pos:end="89:73">start_addr</name> <operator pos:start="89:75" pos:end="89:75">+</operator> <name pos:start="89:77" pos:end="89:80">size</name> <operator pos:start="89:82" pos:end="89:82">-</operator> <literal type="number" pos:start="89:84" pos:end="89:84">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:31"><expr pos:start="91:5" pos:end="91:30"><name pos:start="91:5" pos:end="91:23"><name pos:start="91:5" pos:end="91:7">dev</name><operator pos:start="91:8" pos:end="91:9">-&gt;</operator><name pos:start="91:10" pos:end="91:23">memory_changed</name></name> <operator pos:start="91:25" pos:end="91:25">=</operator> <name pos:start="91:27" pos:end="91:30">true</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
