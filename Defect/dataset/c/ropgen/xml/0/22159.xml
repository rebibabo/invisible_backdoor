<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22159.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">parse_optional_info</name><parameter_list pos:start="1:31" pos:end="1:49">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:45">DCACoreDecoder</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="213:1">{<block_content pos:start="5:5" pos:end="211:13">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">DCAContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">dca</name> <init pos:start="5:21" pos:end="5:41">= <expr pos:start="5:23" pos:end="5:41"><name pos:start="5:23" pos:end="5:41"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:30">avctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:16">= <expr pos:start="7:15" pos:end="7:16"><operator pos:start="7:15" pos:end="7:15">-</operator><literal type="number" pos:start="7:16" pos:end="7:16">1</literal></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="11:5" pos:end="11:22">// Time code stamp</comment>

    <if_stmt pos:start="13:5" pos:end="15:35"><if pos:start="13:5" pos:end="15:35">if <condition pos:start="13:8" pos:end="13:22">(<expr pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:21">ts_present</name></name></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:35"><block_content pos:start="15:9" pos:end="15:35">

        <expr_stmt pos:start="15:9" pos:end="15:35"><expr pos:start="15:9" pos:end="15:34"><call pos:start="15:9" pos:end="15:34"><name pos:start="15:9" pos:end="15:22">skip_bits_long</name><argument_list pos:start="15:23" pos:end="15:34">(<argument pos:start="15:24" pos:end="15:29"><expr pos:start="15:24" pos:end="15:29"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:29"><name pos:start="15:25" pos:end="15:25">s</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:29">gb</name></name></expr></argument>, <argument pos:start="15:32" pos:end="15:33"><expr pos:start="15:32" pos:end="15:33"><literal type="number" pos:start="15:32" pos:end="15:33">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="19:5" pos:end="19:21">// Auxiliary data</comment>

    <if_stmt pos:start="21:5" pos:end="25:19"><if pos:start="21:5" pos:end="25:19">if <condition pos:start="21:8" pos:end="23:55">(<expr pos:start="21:9" pos:end="23:54"><name pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:22">aux_present</name></name> <operator pos:start="21:24" pos:end="21:25">&amp;&amp;</operator> <operator pos:start="21:27" pos:end="21:27">(</operator><name pos:start="21:28" pos:end="21:30">ret</name> <operator pos:start="21:32" pos:end="21:32">=</operator> <call pos:start="21:34" pos:end="21:50"><name pos:start="21:34" pos:end="21:47">parse_aux_data</name><argument_list pos:start="21:48" pos:end="21:50">(<argument pos:start="21:49" pos:end="21:49"><expr pos:start="21:49" pos:end="21:49"><name pos:start="21:49" pos:end="21:49">s</name></expr></argument>)</argument_list></call><operator pos:start="21:51" pos:end="21:51">)</operator> <operator pos:start="21:53" pos:end="21:53">&lt;</operator> <literal type="number" pos:start="21:55" pos:end="21:55">0</literal>

        <operator pos:start="23:9" pos:end="23:10">&amp;&amp;</operator> <operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:37"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:20">avctx</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:37">err_recognition</name></name> <operator pos:start="23:39" pos:end="23:39">&amp;</operator> <name pos:start="23:41" pos:end="23:53">AV_EF_EXPLODE</name><operator pos:start="23:54" pos:end="23:54">)</operator></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:19"><block_content pos:start="25:9" pos:end="25:19">

        <return pos:start="25:9" pos:end="25:19">return <expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="31:34"><if pos:start="29:5" pos:end="31:34">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:34"><block_content pos:start="31:9" pos:end="31:34">

        <expr_stmt pos:start="31:9" pos:end="31:34"><expr pos:start="31:9" pos:end="31:33"><name pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:29">prim_dmix_embedded</name></name> <operator pos:start="31:31" pos:end="31:31">=</operator> <literal type="number" pos:start="31:33" pos:end="31:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="35:5" pos:end="35:22">// Core extensions</comment>

    <if_stmt pos:start="37:5" pos:end="207:5"><if pos:start="37:5" pos:end="207:5">if <condition pos:start="37:8" pos:end="37:48">(<expr pos:start="37:9" pos:end="37:47"><name pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:28">ext_audio_present</name></name> <operator pos:start="37:30" pos:end="37:31">&amp;&amp;</operator> <operator pos:start="37:33" pos:end="37:33">!</operator><name pos:start="37:34" pos:end="37:47"><name pos:start="37:34" pos:end="37:36">dca</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:47">core_only</name></name></expr>)</condition> <block pos:start="37:50" pos:end="207:5">{<block_content pos:start="39:9" pos:end="205:9">

        <decl_stmt pos:start="39:9" pos:end="39:77"><decl pos:start="39:9" pos:end="39:76"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:20">sync_pos</name> <init pos:start="39:22" pos:end="39:76">= <expr pos:start="39:24" pos:end="39:76"><call pos:start="39:24" pos:end="39:72"><name pos:start="39:24" pos:end="39:28">FFMIN</name><argument_list pos:start="39:29" pos:end="39:72">(<argument pos:start="39:30" pos:end="39:46"><expr pos:start="39:30" pos:end="39:46"><name pos:start="39:30" pos:end="39:42"><name pos:start="39:30" pos:end="39:30">s</name><operator pos:start="39:31" pos:end="39:32">-&gt;</operator><name pos:start="39:33" pos:end="39:42">frame_size</name></name> <operator pos:start="39:44" pos:end="39:44">/</operator> <literal type="number" pos:start="39:46" pos:end="39:46">4</literal></expr></argument>, <argument pos:start="39:49" pos:end="39:71"><expr pos:start="39:49" pos:end="39:71"><name pos:start="39:49" pos:end="39:66"><name pos:start="39:49" pos:end="39:49">s</name><operator pos:start="39:50" pos:end="39:51">-&gt;</operator><name pos:start="39:52" pos:end="39:53">gb</name><operator pos:start="39:54" pos:end="39:54">.</operator><name pos:start="39:55" pos:end="39:66">size_in_bits</name></name> <operator pos:start="39:68" pos:end="39:68">/</operator> <literal type="number" pos:start="39:70" pos:end="39:71">32</literal></expr></argument>)</argument_list></call> <operator pos:start="39:74" pos:end="39:74">-</operator> <literal type="number" pos:start="39:76" pos:end="39:76">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:51"><decl pos:start="41:9" pos:end="41:50"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:20">last_pos</name> <init pos:start="41:22" pos:end="41:50">= <expr pos:start="41:24" pos:end="41:50"><call pos:start="41:24" pos:end="41:45"><name pos:start="41:24" pos:end="41:37">get_bits_count</name><argument_list pos:start="41:38" pos:end="41:45">(<argument pos:start="41:39" pos:end="41:44"><expr pos:start="41:39" pos:end="41:44"><operator pos:start="41:39" pos:end="41:39">&amp;</operator><name pos:start="41:40" pos:end="41:44"><name pos:start="41:40" pos:end="41:40">s</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:44">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="41:47" pos:end="41:47">/</operator> <literal type="number" pos:start="41:49" pos:end="41:50">32</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:23"><decl pos:start="43:9" pos:end="43:16"><type pos:start="43:9" pos:end="43:11"><name pos:start="43:9" pos:end="43:11">int</name></type> <name pos:start="43:13" pos:end="43:16">size</name></decl>, <decl pos:start="43:19" pos:end="43:22"><type ref="prev" pos:start="43:9" pos:end="43:11"/><name pos:start="43:19" pos:end="43:22">dist</name></decl>;</decl_stmt>



        <comment type="line" pos:start="47:9" pos:end="47:77">// Search for extension sync words aligned on 4-byte boundary. Search</comment>

        <comment type="line" pos:start="49:9" pos:end="49:75">// must be done backwards from the end of core frame to work around</comment>

        <comment type="line" pos:start="51:9" pos:end="51:37">// sync word aliasing issues.</comment>

        <switch pos:start="53:9" pos:end="205:9">switch <condition pos:start="53:16" pos:end="53:34">(<expr pos:start="53:17" pos:end="53:33"><name pos:start="53:17" pos:end="53:33"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:33">ext_audio_type</name></name></expr>)</condition> <block pos:start="53:36" pos:end="205:9">{<block_content pos:start="55:9" pos:end="203:18">

        <case pos:start="55:9" pos:end="55:27">case <expr pos:start="55:14" pos:end="55:26"><name pos:start="55:14" pos:end="55:26">EXT_AUDIO_XCH</name></expr>:</case>

            <if_stmt pos:start="57:13" pos:end="59:22"><if pos:start="57:13" pos:end="59:22">if <condition pos:start="57:16" pos:end="57:44">(<expr pos:start="57:17" pos:end="57:43"><name pos:start="57:17" pos:end="57:43"><name pos:start="57:17" pos:end="57:19">dca</name><operator pos:start="57:20" pos:end="57:21">-&gt;</operator><name pos:start="57:22" pos:end="57:43">request_channel_layout</name></name></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:22"><block_content pos:start="59:17" pos:end="59:22">

                <break pos:start="59:17" pos:end="59:22">break;</break></block_content></block></if></if_stmt>



            <comment type="line" pos:start="63:13" pos:end="63:75">// The distance between XCH sync word and end of the core frame</comment>

            <comment type="line" pos:start="65:13" pos:end="65:79">// must be equal to XCH frame size. Off by one error is allowed for</comment>

            <comment type="line" pos:start="67:13" pos:end="67:78">// compatibility with legacy bitstreams. Minimum XCH frame size is</comment>

            <comment type="line" pos:start="69:13" pos:end="69:69">// 96 bytes. AMODE and PCHS are further checked to reduce</comment>

            <comment type="line" pos:start="71:13" pos:end="71:51">// probability of alias sync detection.</comment>

            <for pos:start="73:13" pos:end="97:13">for <control pos:start="73:17" pos:end="73:52">(<init pos:start="73:18" pos:end="73:18">;</init> <condition pos:start="73:20" pos:end="73:40"><expr pos:start="73:20" pos:end="73:39"><name pos:start="73:20" pos:end="73:27">sync_pos</name> <operator pos:start="73:29" pos:end="73:30">&gt;=</operator> <name pos:start="73:32" pos:end="73:39">last_pos</name></expr>;</condition> <incr pos:start="73:42" pos:end="73:51"><expr pos:start="73:42" pos:end="73:51"><name pos:start="73:42" pos:end="73:49">sync_pos</name><operator pos:start="73:50" pos:end="73:51">--</operator></expr></incr>)</control> <block pos:start="73:54" pos:end="97:13">{<block_content pos:start="75:17" pos:end="95:17">

                <if_stmt pos:start="75:17" pos:end="95:17"><if pos:start="75:17" pos:end="95:17">if <condition pos:start="75:20" pos:end="75:77">(<expr pos:start="75:21" pos:end="75:76"><call pos:start="75:21" pos:end="75:56"><name pos:start="75:21" pos:end="75:27">AV_RB32</name><argument_list pos:start="75:28" pos:end="75:56">(<argument pos:start="75:29" pos:end="75:55"><expr pos:start="75:29" pos:end="75:55"><name pos:start="75:29" pos:end="75:40"><name pos:start="75:29" pos:end="75:29">s</name><operator pos:start="75:30" pos:end="75:31">-&gt;</operator><name pos:start="75:32" pos:end="75:33">gb</name><operator pos:start="75:34" pos:end="75:34">.</operator><name pos:start="75:35" pos:end="75:40">buffer</name></name> <operator pos:start="75:42" pos:end="75:42">+</operator> <name pos:start="75:44" pos:end="75:51">sync_pos</name> <operator pos:start="75:53" pos:end="75:53">*</operator> <literal type="number" pos:start="75:55" pos:end="75:55">4</literal></expr></argument>)</argument_list></call> <operator pos:start="75:58" pos:end="75:59">==</operator> <name pos:start="75:61" pos:end="75:76">DCA_SYNCWORD_XCH</name></expr>)</condition> <block pos:start="75:79" pos:end="95:17">{<block_content pos:start="77:21" pos:end="93:21">

                    <expr_stmt pos:start="77:21" pos:end="77:54"><expr pos:start="77:21" pos:end="77:53"><name pos:start="77:21" pos:end="77:31"><name pos:start="77:21" pos:end="77:21">s</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:25">gb</name><operator pos:start="77:26" pos:end="77:26">.</operator><name pos:start="77:27" pos:end="77:31">index</name></name> <operator pos:start="77:33" pos:end="77:33">=</operator> <operator pos:start="77:35" pos:end="77:35">(</operator><name pos:start="77:36" pos:end="77:43">sync_pos</name> <operator pos:start="77:45" pos:end="77:45">+</operator> <literal type="number" pos:start="77:47" pos:end="77:47">1</literal><operator pos:start="77:48" pos:end="77:48">)</operator> <operator pos:start="77:50" pos:end="77:50">*</operator> <literal type="number" pos:start="77:52" pos:end="77:53">32</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="79:21" pos:end="79:52"><expr pos:start="79:21" pos:end="79:51"><name pos:start="79:21" pos:end="79:24">size</name> <operator pos:start="79:26" pos:end="79:26">=</operator> <call pos:start="79:28" pos:end="79:47"><name pos:start="79:28" pos:end="79:35">get_bits</name><argument_list pos:start="79:36" pos:end="79:47">(<argument pos:start="79:37" pos:end="79:42"><expr pos:start="79:37" pos:end="79:42"><operator pos:start="79:37" pos:end="79:37">&amp;</operator><name pos:start="79:38" pos:end="79:42"><name pos:start="79:38" pos:end="79:38">s</name><operator pos:start="79:39" pos:end="79:40">-&gt;</operator><name pos:start="79:41" pos:end="79:42">gb</name></name></expr></argument>, <argument pos:start="79:45" pos:end="79:46"><expr pos:start="79:45" pos:end="79:46"><literal type="number" pos:start="79:45" pos:end="79:46">10</literal></expr></argument>)</argument_list></call> <operator pos:start="79:49" pos:end="79:49">+</operator> <literal type="number" pos:start="79:51" pos:end="79:51">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="81:21" pos:end="81:56"><expr pos:start="81:21" pos:end="81:55"><name pos:start="81:21" pos:end="81:24">dist</name> <operator pos:start="81:26" pos:end="81:26">=</operator> <name pos:start="81:28" pos:end="81:40"><name pos:start="81:28" pos:end="81:28">s</name><operator pos:start="81:29" pos:end="81:30">-&gt;</operator><name pos:start="81:31" pos:end="81:40">frame_size</name></name> <operator pos:start="81:42" pos:end="81:42">-</operator> <name pos:start="81:44" pos:end="81:51">sync_pos</name> <operator pos:start="81:53" pos:end="81:53">*</operator> <literal type="number" pos:start="81:55" pos:end="81:55">4</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="83:21" pos:end="93:21"><if pos:start="83:21" pos:end="93:21">if <condition pos:start="83:24" pos:end="87:55">(<expr pos:start="83:25" pos:end="87:54"><name pos:start="83:25" pos:end="83:28">size</name> <operator pos:start="83:30" pos:end="83:31">&gt;=</operator> <literal type="number" pos:start="83:33" pos:end="83:34">96</literal>

                        <operator pos:start="85:25" pos:end="85:26">&amp;&amp;</operator> <operator pos:start="85:28" pos:end="85:28">(</operator><name pos:start="85:29" pos:end="85:32">size</name> <operator pos:start="85:34" pos:end="85:35">==</operator> <name pos:start="85:37" pos:end="85:40">dist</name> <operator pos:start="85:42" pos:end="85:43">||</operator> <name pos:start="85:45" pos:end="85:48">size</name> <operator pos:start="85:50" pos:end="85:50">-</operator> <literal type="number" pos:start="85:52" pos:end="85:52">1</literal> <operator pos:start="85:54" pos:end="85:55">==</operator> <name pos:start="85:57" pos:end="85:60">dist</name><operator pos:start="85:61" pos:end="85:61">)</operator>

                        <operator pos:start="87:25" pos:end="87:26">&amp;&amp;</operator> <call pos:start="87:28" pos:end="87:46"><name pos:start="87:28" pos:end="87:35">get_bits</name><argument_list pos:start="87:36" pos:end="87:46">(<argument pos:start="87:37" pos:end="87:42"><expr pos:start="87:37" pos:end="87:42"><operator pos:start="87:37" pos:end="87:37">&amp;</operator><name pos:start="87:38" pos:end="87:42"><name pos:start="87:38" pos:end="87:38">s</name><operator pos:start="87:39" pos:end="87:40">-&gt;</operator><name pos:start="87:41" pos:end="87:42">gb</name></name></expr></argument>, <argument pos:start="87:45" pos:end="87:45"><expr pos:start="87:45" pos:end="87:45"><literal type="number" pos:start="87:45" pos:end="87:45">7</literal></expr></argument>)</argument_list></call> <operator pos:start="87:48" pos:end="87:49">==</operator> <literal type="number" pos:start="87:51" pos:end="87:54">0x08</literal></expr>)</condition> <block pos:start="87:57" pos:end="93:21">{<block_content pos:start="89:25" pos:end="91:30">

                        <expr_stmt pos:start="89:25" pos:end="89:60"><expr pos:start="89:25" pos:end="89:59"><name pos:start="89:25" pos:end="89:34"><name pos:start="89:25" pos:end="89:25">s</name><operator pos:start="89:26" pos:end="89:27">-&gt;</operator><name pos:start="89:28" pos:end="89:34">xch_pos</name></name> <operator pos:start="89:36" pos:end="89:36">=</operator> <call pos:start="89:38" pos:end="89:59"><name pos:start="89:38" pos:end="89:51">get_bits_count</name><argument_list pos:start="89:52" pos:end="89:59">(<argument pos:start="89:53" pos:end="89:58"><expr pos:start="89:53" pos:end="89:58"><operator pos:start="89:53" pos:end="89:53">&amp;</operator><name pos:start="89:54" pos:end="89:58"><name pos:start="89:54" pos:end="89:54">s</name><operator pos:start="89:55" pos:end="89:56">-&gt;</operator><name pos:start="89:57" pos:end="89:58">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="91:25" pos:end="91:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="101:13" pos:end="107:13"><if pos:start="101:13" pos:end="107:13">if <condition pos:start="101:16" pos:end="101:58">(<expr pos:start="101:17" pos:end="101:57"><name pos:start="101:17" pos:end="101:41"><name pos:start="101:17" pos:end="101:17">s</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:24">avctx</name><operator pos:start="101:25" pos:end="101:26">-&gt;</operator><name pos:start="101:27" pos:end="101:41">err_recognition</name></name> <operator pos:start="101:43" pos:end="101:43">&amp;</operator> <name pos:start="101:45" pos:end="101:57">AV_EF_EXPLODE</name></expr>)</condition> <block pos:start="101:60" pos:end="107:13">{<block_content pos:start="103:17" pos:end="105:43">

                <expr_stmt pos:start="103:17" pos:end="103:76"><expr pos:start="103:17" pos:end="103:75"><call pos:start="103:17" pos:end="103:75"><name pos:start="103:17" pos:end="103:22">av_log</name><argument_list pos:start="103:23" pos:end="103:75">(<argument pos:start="103:24" pos:end="103:31"><expr pos:start="103:24" pos:end="103:31"><name pos:start="103:24" pos:end="103:31"><name pos:start="103:24" pos:end="103:24">s</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:31">avctx</name></name></expr></argument>, <argument pos:start="103:34" pos:end="103:45"><expr pos:start="103:34" pos:end="103:45"><name pos:start="103:34" pos:end="103:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:48" pos:end="103:74"><expr pos:start="103:48" pos:end="103:74"><literal type="string" pos:start="103:48" pos:end="103:74">"XCH sync word not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="105:17" pos:end="105:43">return <expr pos:start="105:24" pos:end="105:42"><name pos:start="105:24" pos:end="105:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>



        <case pos:start="113:9" pos:end="113:27">case <expr pos:start="113:14" pos:end="113:26"><name pos:start="113:14" pos:end="113:26">EXT_AUDIO_X96</name></expr>:</case>

            <comment type="line" pos:start="115:13" pos:end="115:75">// The distance between X96 sync word and end of the core frame</comment>

            <comment type="line" pos:start="117:13" pos:end="117:76">// must be equal to X96 frame size. Minimum X96 frame size is 96</comment>

            <comment type="line" pos:start="119:13" pos:end="119:21">// bytes.</comment>

            <for pos:start="121:13" pos:end="141:13">for <control pos:start="121:17" pos:end="121:52">(<init pos:start="121:18" pos:end="121:18">;</init> <condition pos:start="121:20" pos:end="121:40"><expr pos:start="121:20" pos:end="121:39"><name pos:start="121:20" pos:end="121:27">sync_pos</name> <operator pos:start="121:29" pos:end="121:30">&gt;=</operator> <name pos:start="121:32" pos:end="121:39">last_pos</name></expr>;</condition> <incr pos:start="121:42" pos:end="121:51"><expr pos:start="121:42" pos:end="121:51"><name pos:start="121:42" pos:end="121:49">sync_pos</name><operator pos:start="121:50" pos:end="121:51">--</operator></expr></incr>)</control> <block pos:start="121:54" pos:end="141:13">{<block_content pos:start="123:17" pos:end="139:17">

                <if_stmt pos:start="123:17" pos:end="139:17"><if pos:start="123:17" pos:end="139:17">if <condition pos:start="123:20" pos:end="123:77">(<expr pos:start="123:21" pos:end="123:76"><call pos:start="123:21" pos:end="123:56"><name pos:start="123:21" pos:end="123:27">AV_RB32</name><argument_list pos:start="123:28" pos:end="123:56">(<argument pos:start="123:29" pos:end="123:55"><expr pos:start="123:29" pos:end="123:55"><name pos:start="123:29" pos:end="123:40"><name pos:start="123:29" pos:end="123:29">s</name><operator pos:start="123:30" pos:end="123:31">-&gt;</operator><name pos:start="123:32" pos:end="123:33">gb</name><operator pos:start="123:34" pos:end="123:34">.</operator><name pos:start="123:35" pos:end="123:40">buffer</name></name> <operator pos:start="123:42" pos:end="123:42">+</operator> <name pos:start="123:44" pos:end="123:51">sync_pos</name> <operator pos:start="123:53" pos:end="123:53">*</operator> <literal type="number" pos:start="123:55" pos:end="123:55">4</literal></expr></argument>)</argument_list></call> <operator pos:start="123:58" pos:end="123:59">==</operator> <name pos:start="123:61" pos:end="123:76">DCA_SYNCWORD_X96</name></expr>)</condition> <block pos:start="123:79" pos:end="139:17">{<block_content pos:start="125:21" pos:end="137:21">

                    <expr_stmt pos:start="125:21" pos:end="125:54"><expr pos:start="125:21" pos:end="125:53"><name pos:start="125:21" pos:end="125:31"><name pos:start="125:21" pos:end="125:21">s</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:25">gb</name><operator pos:start="125:26" pos:end="125:26">.</operator><name pos:start="125:27" pos:end="125:31">index</name></name> <operator pos:start="125:33" pos:end="125:33">=</operator> <operator pos:start="125:35" pos:end="125:35">(</operator><name pos:start="125:36" pos:end="125:43">sync_pos</name> <operator pos:start="125:45" pos:end="125:45">+</operator> <literal type="number" pos:start="125:47" pos:end="125:47">1</literal><operator pos:start="125:48" pos:end="125:48">)</operator> <operator pos:start="125:50" pos:end="125:50">*</operator> <literal type="number" pos:start="125:52" pos:end="125:53">32</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="127:21" pos:end="127:52"><expr pos:start="127:21" pos:end="127:51"><name pos:start="127:21" pos:end="127:24">size</name> <operator pos:start="127:26" pos:end="127:26">=</operator> <call pos:start="127:28" pos:end="127:47"><name pos:start="127:28" pos:end="127:35">get_bits</name><argument_list pos:start="127:36" pos:end="127:47">(<argument pos:start="127:37" pos:end="127:42"><expr pos:start="127:37" pos:end="127:42"><operator pos:start="127:37" pos:end="127:37">&amp;</operator><name pos:start="127:38" pos:end="127:42"><name pos:start="127:38" pos:end="127:38">s</name><operator pos:start="127:39" pos:end="127:40">-&gt;</operator><name pos:start="127:41" pos:end="127:42">gb</name></name></expr></argument>, <argument pos:start="127:45" pos:end="127:46"><expr pos:start="127:45" pos:end="127:46"><literal type="number" pos:start="127:45" pos:end="127:46">12</literal></expr></argument>)</argument_list></call> <operator pos:start="127:49" pos:end="127:49">+</operator> <literal type="number" pos:start="127:51" pos:end="127:51">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:56"><expr pos:start="129:21" pos:end="129:55"><name pos:start="129:21" pos:end="129:24">dist</name> <operator pos:start="129:26" pos:end="129:26">=</operator> <name pos:start="129:28" pos:end="129:40"><name pos:start="129:28" pos:end="129:28">s</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:40">frame_size</name></name> <operator pos:start="129:42" pos:end="129:42">-</operator> <name pos:start="129:44" pos:end="129:51">sync_pos</name> <operator pos:start="129:53" pos:end="129:53">*</operator> <literal type="number" pos:start="129:55" pos:end="129:55">4</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="131:21" pos:end="137:21"><if pos:start="131:21" pos:end="137:21">if <condition pos:start="131:24" pos:end="131:51">(<expr pos:start="131:25" pos:end="131:50"><name pos:start="131:25" pos:end="131:28">size</name> <operator pos:start="131:30" pos:end="131:31">&gt;=</operator> <literal type="number" pos:start="131:33" pos:end="131:34">96</literal> <operator pos:start="131:36" pos:end="131:37">&amp;&amp;</operator> <name pos:start="131:39" pos:end="131:42">size</name> <operator pos:start="131:44" pos:end="131:45">==</operator> <name pos:start="131:47" pos:end="131:50">dist</name></expr>)</condition> <block pos:start="131:53" pos:end="137:21">{<block_content pos:start="133:25" pos:end="135:30">

                        <expr_stmt pos:start="133:25" pos:end="133:60"><expr pos:start="133:25" pos:end="133:59"><name pos:start="133:25" pos:end="133:34"><name pos:start="133:25" pos:end="133:25">s</name><operator pos:start="133:26" pos:end="133:27">-&gt;</operator><name pos:start="133:28" pos:end="133:34">x96_pos</name></name> <operator pos:start="133:36" pos:end="133:36">=</operator> <call pos:start="133:38" pos:end="133:59"><name pos:start="133:38" pos:end="133:51">get_bits_count</name><argument_list pos:start="133:52" pos:end="133:59">(<argument pos:start="133:53" pos:end="133:58"><expr pos:start="133:53" pos:end="133:58"><operator pos:start="133:53" pos:end="133:53">&amp;</operator><name pos:start="133:54" pos:end="133:58"><name pos:start="133:54" pos:end="133:54">s</name><operator pos:start="133:55" pos:end="133:56">-&gt;</operator><name pos:start="133:57" pos:end="133:58">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="135:25" pos:end="135:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="145:13" pos:end="151:13"><if pos:start="145:13" pos:end="151:13">if <condition pos:start="145:16" pos:end="145:58">(<expr pos:start="145:17" pos:end="145:57"><name pos:start="145:17" pos:end="145:41"><name pos:start="145:17" pos:end="145:17">s</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:24">avctx</name><operator pos:start="145:25" pos:end="145:26">-&gt;</operator><name pos:start="145:27" pos:end="145:41">err_recognition</name></name> <operator pos:start="145:43" pos:end="145:43">&amp;</operator> <name pos:start="145:45" pos:end="145:57">AV_EF_EXPLODE</name></expr>)</condition> <block pos:start="145:60" pos:end="151:13">{<block_content pos:start="147:17" pos:end="149:43">

                <expr_stmt pos:start="147:17" pos:end="147:76"><expr pos:start="147:17" pos:end="147:75"><call pos:start="147:17" pos:end="147:75"><name pos:start="147:17" pos:end="147:22">av_log</name><argument_list pos:start="147:23" pos:end="147:75">(<argument pos:start="147:24" pos:end="147:31"><expr pos:start="147:24" pos:end="147:31"><name pos:start="147:24" pos:end="147:31"><name pos:start="147:24" pos:end="147:24">s</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:31">avctx</name></name></expr></argument>, <argument pos:start="147:34" pos:end="147:45"><expr pos:start="147:34" pos:end="147:45"><name pos:start="147:34" pos:end="147:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:48" pos:end="147:74"><expr pos:start="147:48" pos:end="147:74"><literal type="string" pos:start="147:48" pos:end="147:74">"X96 sync word not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="149:17" pos:end="149:43">return <expr pos:start="149:24" pos:end="149:42"><name pos:start="149:24" pos:end="149:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>



        <case pos:start="157:9" pos:end="157:28">case <expr pos:start="157:14" pos:end="157:27"><name pos:start="157:14" pos:end="157:27">EXT_AUDIO_XXCH</name></expr>:</case>

            <if_stmt pos:start="159:13" pos:end="161:22"><if pos:start="159:13" pos:end="161:22">if <condition pos:start="159:16" pos:end="159:44">(<expr pos:start="159:17" pos:end="159:43"><name pos:start="159:17" pos:end="159:43"><name pos:start="159:17" pos:end="159:19">dca</name><operator pos:start="159:20" pos:end="159:21">-&gt;</operator><name pos:start="159:22" pos:end="159:43">request_channel_layout</name></name></expr>)</condition><block type="pseudo" pos:start="161:17" pos:end="161:22"><block_content pos:start="161:17" pos:end="161:22">

                <break pos:start="161:17" pos:end="161:22">break;</break></block_content></block></if></if_stmt>



            <comment type="line" pos:start="165:13" pos:end="165:77">// XXCH frame header CRC must be valid. Minimum XXCH frame header</comment>

            <comment type="line" pos:start="167:13" pos:end="167:32">// size is 11 bytes.</comment>

            <for pos:start="169:13" pos:end="191:13">for <control pos:start="169:17" pos:end="169:52">(<init pos:start="169:18" pos:end="169:18">;</init> <condition pos:start="169:20" pos:end="169:40"><expr pos:start="169:20" pos:end="169:39"><name pos:start="169:20" pos:end="169:27">sync_pos</name> <operator pos:start="169:29" pos:end="169:30">&gt;=</operator> <name pos:start="169:32" pos:end="169:39">last_pos</name></expr>;</condition> <incr pos:start="169:42" pos:end="169:51"><expr pos:start="169:42" pos:end="169:51"><name pos:start="169:42" pos:end="169:49">sync_pos</name><operator pos:start="169:50" pos:end="169:51">--</operator></expr></incr>)</control> <block pos:start="169:54" pos:end="191:13">{<block_content pos:start="171:17" pos:end="189:17">

                <if_stmt pos:start="171:17" pos:end="189:17"><if pos:start="171:17" pos:end="189:17">if <condition pos:start="171:20" pos:end="171:78">(<expr pos:start="171:21" pos:end="171:77"><call pos:start="171:21" pos:end="171:56"><name pos:start="171:21" pos:end="171:27">AV_RB32</name><argument_list pos:start="171:28" pos:end="171:56">(<argument pos:start="171:29" pos:end="171:55"><expr pos:start="171:29" pos:end="171:55"><name pos:start="171:29" pos:end="171:40"><name pos:start="171:29" pos:end="171:29">s</name><operator pos:start="171:30" pos:end="171:31">-&gt;</operator><name pos:start="171:32" pos:end="171:33">gb</name><operator pos:start="171:34" pos:end="171:34">.</operator><name pos:start="171:35" pos:end="171:40">buffer</name></name> <operator pos:start="171:42" pos:end="171:42">+</operator> <name pos:start="171:44" pos:end="171:51">sync_pos</name> <operator pos:start="171:53" pos:end="171:53">*</operator> <literal type="number" pos:start="171:55" pos:end="171:55">4</literal></expr></argument>)</argument_list></call> <operator pos:start="171:58" pos:end="171:59">==</operator> <name pos:start="171:61" pos:end="171:77">DCA_SYNCWORD_XXCH</name></expr>)</condition> <block pos:start="171:80" pos:end="189:17">{<block_content pos:start="173:21" pos:end="187:21">

                    <expr_stmt pos:start="173:21" pos:end="173:54"><expr pos:start="173:21" pos:end="173:53"><name pos:start="173:21" pos:end="173:31"><name pos:start="173:21" pos:end="173:21">s</name><operator pos:start="173:22" pos:end="173:23">-&gt;</operator><name pos:start="173:24" pos:end="173:25">gb</name><operator pos:start="173:26" pos:end="173:26">.</operator><name pos:start="173:27" pos:end="173:31">index</name></name> <operator pos:start="173:33" pos:end="173:33">=</operator> <operator pos:start="173:35" pos:end="173:35">(</operator><name pos:start="173:36" pos:end="173:43">sync_pos</name> <operator pos:start="173:45" pos:end="173:45">+</operator> <literal type="number" pos:start="173:47" pos:end="173:47">1</literal><operator pos:start="173:48" pos:end="173:48">)</operator> <operator pos:start="173:50" pos:end="173:50">*</operator> <literal type="number" pos:start="173:52" pos:end="173:53">32</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="175:21" pos:end="175:51"><expr pos:start="175:21" pos:end="175:50"><name pos:start="175:21" pos:end="175:24">size</name> <operator pos:start="175:26" pos:end="175:26">=</operator> <call pos:start="175:28" pos:end="175:46"><name pos:start="175:28" pos:end="175:35">get_bits</name><argument_list pos:start="175:36" pos:end="175:46">(<argument pos:start="175:37" pos:end="175:42"><expr pos:start="175:37" pos:end="175:42"><operator pos:start="175:37" pos:end="175:37">&amp;</operator><name pos:start="175:38" pos:end="175:42"><name pos:start="175:38" pos:end="175:38">s</name><operator pos:start="175:39" pos:end="175:40">-&gt;</operator><name pos:start="175:41" pos:end="175:42">gb</name></name></expr></argument>, <argument pos:start="175:45" pos:end="175:45"><expr pos:start="175:45" pos:end="175:45"><literal type="number" pos:start="175:45" pos:end="175:45">6</literal></expr></argument>)</argument_list></call> <operator pos:start="175:48" pos:end="175:48">+</operator> <literal type="number" pos:start="175:50" pos:end="175:50">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="177:21" pos:end="187:21"><if pos:start="177:21" pos:end="187:21">if <condition pos:start="177:24" pos:end="181:68">(<expr pos:start="177:25" pos:end="181:67"><name pos:start="177:25" pos:end="177:28">size</name> <operator pos:start="177:30" pos:end="177:31">&gt;=</operator> <literal type="number" pos:start="177:33" pos:end="177:34">11</literal> <operator pos:start="177:36" pos:end="177:37">&amp;&amp;</operator>

                        <operator pos:start="179:25" pos:end="179:25">!</operator><call pos:start="179:26" pos:end="181:67"><name pos:start="179:26" pos:end="179:41">ff_dca_check_crc</name><argument_list pos:start="179:42" pos:end="181:67">(<argument pos:start="179:43" pos:end="179:48"><expr pos:start="179:43" pos:end="179:48"><operator pos:start="179:43" pos:end="179:43">&amp;</operator><name pos:start="179:44" pos:end="179:48"><name pos:start="179:44" pos:end="179:44">s</name><operator pos:start="179:45" pos:end="179:46">-&gt;</operator><name pos:start="179:47" pos:end="179:48">gb</name></name></expr></argument>, <argument pos:start="179:51" pos:end="179:69"><expr pos:start="179:51" pos:end="179:69"><operator pos:start="179:51" pos:end="179:51">(</operator><name pos:start="179:52" pos:end="179:59">sync_pos</name> <operator pos:start="179:61" pos:end="179:61">+</operator> <literal type="number" pos:start="179:63" pos:end="179:63">1</literal><operator pos:start="179:64" pos:end="179:64">)</operator> <operator pos:start="179:66" pos:end="179:66">*</operator> <literal type="number" pos:start="179:68" pos:end="179:69">32</literal></expr></argument>,

                                          <argument pos:start="181:43" pos:end="181:66"><expr pos:start="181:43" pos:end="181:66"><name pos:start="181:43" pos:end="181:50">sync_pos</name> <operator pos:start="181:52" pos:end="181:52">*</operator> <literal type="number" pos:start="181:54" pos:end="181:57">32</literal> <operator pos:start="181:57" pos:end="181:57">+</operator> <name pos:start="181:59" pos:end="181:62">size</name> <operator pos:start="181:64" pos:end="181:64">*</operator> <literal type="number" pos:start="181:66" pos:end="181:66">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:70" pos:end="187:21">{<block_content pos:start="183:25" pos:end="185:30">

                        <expr_stmt pos:start="183:25" pos:end="183:52"><expr pos:start="183:25" pos:end="183:51"><name pos:start="183:25" pos:end="183:35"><name pos:start="183:25" pos:end="183:25">s</name><operator pos:start="183:26" pos:end="183:27">-&gt;</operator><name pos:start="183:28" pos:end="183:35">xxch_pos</name></name> <operator pos:start="183:37" pos:end="183:37">=</operator> <name pos:start="183:39" pos:end="183:46">sync_pos</name> <operator pos:start="183:48" pos:end="183:48">*</operator> <literal type="number" pos:start="183:50" pos:end="183:51">32</literal></expr>;</expr_stmt>

                        <break pos:start="185:25" pos:end="185:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="195:13" pos:end="201:13"><if pos:start="195:13" pos:end="201:13">if <condition pos:start="195:16" pos:end="195:58">(<expr pos:start="195:17" pos:end="195:57"><name pos:start="195:17" pos:end="195:41"><name pos:start="195:17" pos:end="195:17">s</name><operator pos:start="195:18" pos:end="195:19">-&gt;</operator><name pos:start="195:20" pos:end="195:24">avctx</name><operator pos:start="195:25" pos:end="195:26">-&gt;</operator><name pos:start="195:27" pos:end="195:41">err_recognition</name></name> <operator pos:start="195:43" pos:end="195:43">&amp;</operator> <name pos:start="195:45" pos:end="195:57">AV_EF_EXPLODE</name></expr>)</condition> <block pos:start="195:60" pos:end="201:13">{<block_content pos:start="197:17" pos:end="199:43">

                <expr_stmt pos:start="197:17" pos:end="197:77"><expr pos:start="197:17" pos:end="197:76"><call pos:start="197:17" pos:end="197:76"><name pos:start="197:17" pos:end="197:22">av_log</name><argument_list pos:start="197:23" pos:end="197:76">(<argument pos:start="197:24" pos:end="197:31"><expr pos:start="197:24" pos:end="197:31"><name pos:start="197:24" pos:end="197:31"><name pos:start="197:24" pos:end="197:24">s</name><operator pos:start="197:25" pos:end="197:26">-&gt;</operator><name pos:start="197:27" pos:end="197:31">avctx</name></name></expr></argument>, <argument pos:start="197:34" pos:end="197:45"><expr pos:start="197:34" pos:end="197:45"><name pos:start="197:34" pos:end="197:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:48" pos:end="197:75"><expr pos:start="197:48" pos:end="197:75"><literal type="string" pos:start="197:48" pos:end="197:75">"XXCH sync word not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="199:17" pos:end="199:43">return <expr pos:start="199:24" pos:end="199:42"><name pos:start="199:24" pos:end="199:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="203:13" pos:end="203:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <return pos:start="211:5" pos:end="211:13">return <expr pos:start="211:12" pos:end="211:12"><literal type="number" pos:start="211:12" pos:end="211:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
