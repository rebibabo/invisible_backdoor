<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22294.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">page_unprotect</name><parameter_list pos:start="1:19" pos:end="1:69">(<parameter pos:start="1:20" pos:end="1:39"><decl pos:start="1:20" pos:end="1:39"><type pos:start="1:20" pos:end="1:39"><name pos:start="1:20" pos:end="1:31">target_ulong</name></type> <name pos:start="1:33" pos:end="1:39">address</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:49">unsigned</name> <name pos:start="1:51" pos:end="1:54">long</name></type> <name pos:start="1:56" pos:end="1:57">pc</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:63">void</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">puc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:13">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:27">page_index</name></decl>, <decl pos:start="5:30" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:30" pos:end="5:33">prot</name></decl>, <decl pos:start="5:36" pos:end="5:41"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:36" pos:end="5:41">pindex</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">PageDesc</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">p</name></decl>, <decl pos:start="7:18" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:14"><modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:20">p1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:27">host_start</name></decl>, <decl pos:start="9:30" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:30" pos:end="9:37">host_end</name></decl>, <decl pos:start="9:40" pos:end="9:43"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:40" pos:end="9:43">addr</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="17:38">/* Technically this isn't safe inside a signal handler.  However we

       know this only ever happens in a synchronous SEGV handler, so in

       practice it seems to be ok.  */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:16"><expr pos:start="19:5" pos:end="19:15"><call pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">mmap_lock</name><argument_list pos:start="19:14" pos:end="19:15">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:47"><expr pos:start="23:5" pos:end="23:46"><name pos:start="23:5" pos:end="23:14">host_start</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <name pos:start="23:18" pos:end="23:24">address</name> <operator pos:start="23:26" pos:end="23:26">&amp;</operator> <name pos:start="23:28" pos:end="23:46">qemu_host_page_mask</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:48"><expr pos:start="25:5" pos:end="25:47"><name pos:start="25:5" pos:end="25:14">page_index</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:27">host_start</name> <operator pos:start="25:29" pos:end="25:30">&gt;&gt;</operator> <name pos:start="25:32" pos:end="25:47">TARGET_PAGE_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:6">p1</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <call pos:start="27:10" pos:end="27:30"><name pos:start="27:10" pos:end="27:18">page_find</name><argument_list pos:start="27:19" pos:end="27:30">(<argument pos:start="27:20" pos:end="27:29"><expr pos:start="27:20" pos:end="27:29"><name pos:start="27:20" pos:end="27:29">page_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:12">(<expr pos:start="29:9" pos:end="29:11"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:11">p1</name></expr>)</condition> <block pos:start="29:14" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:17">

        <expr_stmt pos:start="31:9" pos:end="31:22"><expr pos:start="31:9" pos:end="31:21"><call pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:19">mmap_unlock</name><argument_list pos:start="31:20" pos:end="31:21">()</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:12">host_end</name> <operator pos:start="37:14" pos:end="37:14">=</operator> <name pos:start="37:16" pos:end="37:25">host_start</name> <operator pos:start="37:27" pos:end="37:27">+</operator> <name pos:start="37:29" pos:end="37:47">qemu_host_page_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:11"><expr pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:5">p</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <name pos:start="39:9" pos:end="39:10">p1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:13"><expr pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:8">prot</name> <operator pos:start="41:10" pos:end="41:10">=</operator> <literal type="number" pos:start="41:12" pos:end="41:12">0</literal></expr>;</expr_stmt>

    <for pos:start="43:5" pos:end="49:5">for<control pos:start="43:8" pos:end="43:68">(<init pos:start="43:9" pos:end="43:26"><expr pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:12">addr</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <name pos:start="43:16" pos:end="43:25">host_start</name></expr>;</init><condition pos:start="43:27" pos:end="43:42"><expr pos:start="43:27" pos:end="43:41"><name pos:start="43:27" pos:end="43:30">addr</name> <operator pos:start="43:32" pos:end="43:32">&lt;</operator> <name pos:start="43:34" pos:end="43:41">host_end</name></expr>;</condition> <incr pos:start="43:44" pos:end="43:67"><expr pos:start="43:44" pos:end="43:67"><name pos:start="43:44" pos:end="43:47">addr</name> <operator pos:start="43:49" pos:end="43:50">+=</operator> <name pos:start="43:52" pos:end="43:67">TARGET_PAGE_SIZE</name></expr></incr>)</control> <block pos:start="43:70" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:12">

        <expr_stmt pos:start="45:9" pos:end="45:25"><expr pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:12">prot</name> <operator pos:start="45:14" pos:end="45:15">|=</operator> <name pos:start="45:17" pos:end="45:24"><name pos:start="45:17" pos:end="45:17">p</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:24">flags</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:12"><expr pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:9">p</name><operator pos:start="47:10" pos:end="47:11">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="51:5" pos:end="53:37">/* if the page was really writable, then we change its

       protection back to writable */</comment>

    <if_stmt pos:start="55:5" pos:end="85:5"><if pos:start="55:5" pos:end="85:5">if <condition pos:start="55:8" pos:end="55:30">(<expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:12">prot</name> <operator pos:start="55:14" pos:end="55:14">&amp;</operator> <name pos:start="55:16" pos:end="55:29">PAGE_WRITE_ORG</name></expr>)</condition> <block pos:start="55:32" pos:end="85:5">{<block_content pos:start="57:9" pos:end="83:9">

        <expr_stmt pos:start="57:9" pos:end="57:60"><expr pos:start="57:9" pos:end="57:59"><name pos:start="57:9" pos:end="57:14">pindex</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:25">address</name> <operator pos:start="57:27" pos:end="57:27">-</operator> <name pos:start="57:29" pos:end="57:38">host_start</name><operator pos:start="57:39" pos:end="57:39">)</operator> <operator pos:start="57:41" pos:end="57:42">&gt;&gt;</operator> <name pos:start="57:44" pos:end="57:59">TARGET_PAGE_BITS</name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="83:9"><if pos:start="59:9" pos:end="83:9">if <condition pos:start="59:12" pos:end="59:45">(<expr pos:start="59:13" pos:end="59:44"><operator pos:start="59:13" pos:end="59:13">!</operator><operator pos:start="59:14" pos:end="59:14">(</operator><name pos:start="59:15" pos:end="59:24"><name pos:start="59:15" pos:end="59:16">p1</name><index pos:start="59:17" pos:end="59:24">[<expr pos:start="59:18" pos:end="59:23"><name pos:start="59:18" pos:end="59:23">pindex</name></expr>]</index></name><operator pos:start="59:25" pos:end="59:25">.</operator><name pos:start="59:26" pos:end="59:30">flags</name> <operator pos:start="59:32" pos:end="59:32">&amp;</operator> <name pos:start="59:34" pos:end="59:43">PAGE_WRITE</name><operator pos:start="59:44" pos:end="59:44">)</operator></expr>)</condition> <block pos:start="59:47" pos:end="83:9">{<block_content pos:start="61:13" pos:end="81:21">

            <expr_stmt pos:start="61:13" pos:end="63:54"><expr pos:start="61:13" pos:end="63:53"><call pos:start="61:13" pos:end="63:53"><name pos:start="61:13" pos:end="61:20">mprotect</name><argument_list pos:start="61:21" pos:end="63:53">(<argument pos:start="61:22" pos:end="61:44"><expr pos:start="61:22" pos:end="61:44"><operator pos:start="61:22" pos:end="61:22">(</operator><name pos:start="61:23" pos:end="61:26">void</name> <operator pos:start="61:28" pos:end="61:28">*</operator><operator pos:start="61:29" pos:end="61:29">)</operator><call pos:start="61:30" pos:end="61:44"><name pos:start="61:30" pos:end="61:32">g2h</name><argument_list pos:start="61:33" pos:end="61:44">(<argument pos:start="61:34" pos:end="61:43"><expr pos:start="61:34" pos:end="61:43"><name pos:start="61:34" pos:end="61:43">host_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:47" pos:end="61:65"><expr pos:start="61:47" pos:end="61:65"><name pos:start="61:47" pos:end="61:65">qemu_host_page_size</name></expr></argument>,

                     <argument pos:start="63:22" pos:end="63:52"><expr pos:start="63:22" pos:end="63:52"><operator pos:start="63:22" pos:end="63:22">(</operator><name pos:start="63:23" pos:end="63:26">prot</name> <operator pos:start="63:28" pos:end="63:28">&amp;</operator> <name pos:start="63:30" pos:end="63:38">PAGE_BITS</name><operator pos:start="63:39" pos:end="63:39">)</operator> <operator pos:start="63:41" pos:end="63:41">|</operator> <name pos:start="63:43" pos:end="63:52">PAGE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:43"><expr pos:start="65:13" pos:end="65:42"><name pos:start="65:13" pos:end="65:22"><name pos:start="65:13" pos:end="65:14">p1</name><index pos:start="65:15" pos:end="65:22">[<expr pos:start="65:16" pos:end="65:21"><name pos:start="65:16" pos:end="65:21">pindex</name></expr>]</index></name><operator pos:start="65:23" pos:end="65:23">.</operator><name pos:start="65:24" pos:end="65:28">flags</name> <operator pos:start="65:30" pos:end="65:31">|=</operator> <name pos:start="65:33" pos:end="65:42">PAGE_WRITE</name></expr>;</expr_stmt>

            <comment type="block" pos:start="67:13" pos:end="69:52">/* and since the content will be modified, we must invalidate

               the corresponding translated code. */</comment>

            <expr_stmt pos:start="71:13" pos:end="74:0"><expr pos:start="71:13" pos:end="71:53"><call pos:start="71:13" pos:end="71:53"><name pos:start="71:13" pos:end="71:35">tb_invalidate_phys_page</name><argument_list pos:start="71:36" pos:end="71:53">(<argument pos:start="71:37" pos:end="71:43"><expr pos:start="71:37" pos:end="71:43"><name pos:start="71:37" pos:end="71:43">address</name></expr></argument>, <argument pos:start="71:46" pos:end="71:47"><expr pos:start="71:46" pos:end="71:47"><name pos:start="71:46" pos:end="71:47">pc</name></expr></argument>, <argument pos:start="71:50" pos:end="71:52"><expr pos:start="71:50" pos:end="71:52"><name pos:start="71:50" pos:end="71:52">puc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="73:1" pos:end="73:21">#<cpp:directive pos:start="73:2" pos:end="73:6">ifdef</cpp:directive> <name pos:start="73:8" pos:end="73:21">DEBUG_TB_CHECK</name></cpp:ifdef>

            <expr_stmt pos:start="75:13" pos:end="78:0"><expr pos:start="75:13" pos:end="75:40"><call pos:start="75:13" pos:end="75:40"><name pos:start="75:13" pos:end="75:31">tb_invalidate_check</name><argument_list pos:start="75:32" pos:end="75:40">(<argument pos:start="75:33" pos:end="75:39"><expr pos:start="75:33" pos:end="75:39"><name pos:start="75:33" pos:end="75:39">address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="79:13" pos:end="79:26"><expr pos:start="79:13" pos:end="79:25"><call pos:start="79:13" pos:end="79:25"><name pos:start="79:13" pos:end="79:23">mmap_unlock</name><argument_list pos:start="79:24" pos:end="79:25">()</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:21">return <expr pos:start="81:20" pos:end="81:20"><literal type="number" pos:start="81:20" pos:end="81:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:18"><expr pos:start="87:5" pos:end="87:17"><call pos:start="87:5" pos:end="87:17"><name pos:start="87:5" pos:end="87:15">mmap_unlock</name><argument_list pos:start="87:16" pos:end="87:17">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
