<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7862.c" pos:tabs="8"><function pos:start="1:1" pos:end="481:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">nvic_writel</name><parameter_list pos:start="1:24" pos:end="3:41">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:33">NVICState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:36">s</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:53"><decl pos:start="1:39" pos:end="1:53"><type pos:start="1:39" pos:end="1:53"><name pos:start="1:39" pos:end="1:46">uint32_t</name></type> <name pos:start="1:48" pos:end="1:53">offset</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:69"><decl pos:start="1:56" pos:end="1:69"><type pos:start="1:56" pos:end="1:69"><name pos:start="1:56" pos:end="1:63">uint32_t</name></type> <name pos:start="1:65" pos:end="1:69">value</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:40"><decl pos:start="3:25" pos:end="3:40"><type pos:start="3:25" pos:end="3:40"><name pos:start="3:25" pos:end="3:34">MemTxAttrs</name></type> <name pos:start="3:36" pos:end="3:40">attrs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="481:1">{<block_content pos:start="7:5" pos:end="479:5">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:10">ARMCPU</name> <modifier pos:start="7:12" pos:end="7:12">*</modifier></type><name pos:start="7:13" pos:end="7:15">cpu</name> <init pos:start="7:17" pos:end="7:24">= <expr pos:start="7:19" pos:end="7:24"><name pos:start="7:19" pos:end="7:24"><name pos:start="7:19" pos:end="7:19">s</name><operator pos:start="7:20" pos:end="7:21">-&gt;</operator><name pos:start="7:22" pos:end="7:24">cpu</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="479:5">switch <condition pos:start="11:12" pos:end="11:19">(<expr pos:start="11:13" pos:end="11:18"><name pos:start="11:13" pos:end="11:18">offset</name></expr>)</condition> <block pos:start="11:21" pos:end="479:5">{<block_content pos:start="13:5" pos:end="477:63">

    <case pos:start="13:5" pos:end="13:15">case <expr pos:start="13:10" pos:end="13:14"><literal type="number" pos:start="13:10" pos:end="13:14">0xd04</literal></expr>:</case> <comment type="block" pos:start="13:17" pos:end="13:47">/* Interrupt Control State.  */</comment>

        <if_stmt pos:start="15:9" pos:end="19:9"><if pos:start="15:9" pos:end="19:9">if <condition pos:start="15:12" pos:end="15:30">(<expr pos:start="15:13" pos:end="15:29"><name pos:start="15:13" pos:end="15:17">value</name> <operator pos:start="15:19" pos:end="15:19">&amp;</operator> <operator pos:start="15:21" pos:end="15:21">(</operator><literal type="number" pos:start="15:22" pos:end="15:22">1</literal> <operator pos:start="15:24" pos:end="15:25">&lt;&lt;</operator> <literal type="number" pos:start="15:27" pos:end="15:28">31</literal><operator pos:start="15:29" pos:end="15:29">)</operator></expr>)</condition> <block pos:start="15:32" pos:end="19:9">{<block_content pos:start="17:13" pos:end="17:56">

            <expr_stmt pos:start="17:13" pos:end="17:56"><expr pos:start="17:13" pos:end="17:55"><call pos:start="17:13" pos:end="17:55"><name pos:start="17:13" pos:end="17:35">armv7m_nvic_set_pending</name><argument_list pos:start="17:36" pos:end="17:55">(<argument pos:start="17:37" pos:end="17:37"><expr pos:start="17:37" pos:end="17:37"><name pos:start="17:37" pos:end="17:37">s</name></expr></argument>, <argument pos:start="17:40" pos:end="17:54"><expr pos:start="17:40" pos:end="17:54"><name pos:start="17:40" pos:end="17:54">ARMV7M_EXCP_NMI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="21:9" pos:end="29:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:30">(<expr pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:17">value</name> <operator pos:start="21:19" pos:end="21:19">&amp;</operator> <operator pos:start="21:21" pos:end="21:21">(</operator><literal type="number" pos:start="21:22" pos:end="21:22">1</literal> <operator pos:start="21:24" pos:end="21:25">&lt;&lt;</operator> <literal type="number" pos:start="21:27" pos:end="21:28">28</literal><operator pos:start="21:29" pos:end="21:29">)</operator></expr>)</condition> <block pos:start="21:32" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:59">

            <expr_stmt pos:start="23:13" pos:end="23:59"><expr pos:start="23:13" pos:end="23:58"><call pos:start="23:13" pos:end="23:58"><name pos:start="23:13" pos:end="23:35">armv7m_nvic_set_pending</name><argument_list pos:start="23:36" pos:end="23:58">(<argument pos:start="23:37" pos:end="23:37"><expr pos:start="23:37" pos:end="23:37"><name pos:start="23:37" pos:end="23:37">s</name></expr></argument>, <argument pos:start="23:40" pos:end="23:57"><expr pos:start="23:40" pos:end="23:57"><name pos:start="23:40" pos:end="23:57">ARMV7M_EXCP_PENDSV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="25:11" pos:end="29:9">else if <condition pos:start="25:19" pos:end="25:37">(<expr pos:start="25:20" pos:end="25:36"><name pos:start="25:20" pos:end="25:24">value</name> <operator pos:start="25:26" pos:end="25:26">&amp;</operator> <operator pos:start="25:28" pos:end="25:28">(</operator><literal type="number" pos:start="25:29" pos:end="25:29">1</literal> <operator pos:start="25:31" pos:end="25:32">&lt;&lt;</operator> <literal type="number" pos:start="25:34" pos:end="25:35">27</literal><operator pos:start="25:36" pos:end="25:36">)</operator></expr>)</condition> <block pos:start="25:39" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:61">

            <expr_stmt pos:start="27:13" pos:end="27:61"><expr pos:start="27:13" pos:end="27:60"><call pos:start="27:13" pos:end="27:60"><name pos:start="27:13" pos:end="27:37">armv7m_nvic_clear_pending</name><argument_list pos:start="27:38" pos:end="27:60">(<argument pos:start="27:39" pos:end="27:39"><expr pos:start="27:39" pos:end="27:39"><name pos:start="27:39" pos:end="27:39">s</name></expr></argument>, <argument pos:start="27:42" pos:end="27:59"><expr pos:start="27:42" pos:end="27:59"><name pos:start="27:42" pos:end="27:59">ARMV7M_EXCP_PENDSV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="39:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:30">(<expr pos:start="31:13" pos:end="31:29"><name pos:start="31:13" pos:end="31:17">value</name> <operator pos:start="31:19" pos:end="31:19">&amp;</operator> <operator pos:start="31:21" pos:end="31:21">(</operator><literal type="number" pos:start="31:22" pos:end="31:22">1</literal> <operator pos:start="31:24" pos:end="31:25">&lt;&lt;</operator> <literal type="number" pos:start="31:27" pos:end="31:28">26</literal><operator pos:start="31:29" pos:end="31:29">)</operator></expr>)</condition> <block pos:start="31:32" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:60">

            <expr_stmt pos:start="33:13" pos:end="33:60"><expr pos:start="33:13" pos:end="33:59"><call pos:start="33:13" pos:end="33:59"><name pos:start="33:13" pos:end="33:35">armv7m_nvic_set_pending</name><argument_list pos:start="33:36" pos:end="33:59">(<argument pos:start="33:37" pos:end="33:37"><expr pos:start="33:37" pos:end="33:37"><name pos:start="33:37" pos:end="33:37">s</name></expr></argument>, <argument pos:start="33:40" pos:end="33:58"><expr pos:start="33:40" pos:end="33:58"><name pos:start="33:40" pos:end="33:58">ARMV7M_EXCP_SYSTICK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="35:11" pos:end="39:9">else if <condition pos:start="35:19" pos:end="35:37">(<expr pos:start="35:20" pos:end="35:36"><name pos:start="35:20" pos:end="35:24">value</name> <operator pos:start="35:26" pos:end="35:26">&amp;</operator> <operator pos:start="35:28" pos:end="35:28">(</operator><literal type="number" pos:start="35:29" pos:end="35:29">1</literal> <operator pos:start="35:31" pos:end="35:32">&lt;&lt;</operator> <literal type="number" pos:start="35:34" pos:end="35:35">25</literal><operator pos:start="35:36" pos:end="35:36">)</operator></expr>)</condition> <block pos:start="35:39" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:62">

            <expr_stmt pos:start="37:13" pos:end="37:62"><expr pos:start="37:13" pos:end="37:61"><call pos:start="37:13" pos:end="37:61"><name pos:start="37:13" pos:end="37:37">armv7m_nvic_clear_pending</name><argument_list pos:start="37:38" pos:end="37:61">(<argument pos:start="37:39" pos:end="37:39"><expr pos:start="37:39" pos:end="37:39"><name pos:start="37:39" pos:end="37:39">s</name></expr></argument>, <argument pos:start="37:42" pos:end="37:60"><expr pos:start="37:42" pos:end="37:60"><name pos:start="37:42" pos:end="37:60">ARMV7M_EXCP_SYSTICK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:15">case <expr pos:start="43:10" pos:end="43:14"><literal type="number" pos:start="43:10" pos:end="43:14">0xd08</literal></expr>:</case> <comment type="block" pos:start="43:17" pos:end="43:43">/* Vector Table Offset.  */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:64"><expr pos:start="45:9" pos:end="45:63"><name pos:start="45:9" pos:end="45:42"><name pos:start="45:9" pos:end="45:11">cpu</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:16">env</name><operator pos:start="45:17" pos:end="45:17">.</operator><name pos:start="45:18" pos:end="45:20">v7m</name><operator pos:start="45:21" pos:end="45:21">.</operator><name pos:start="45:22" pos:end="45:28">vecbase</name><index pos:start="45:29" pos:end="45:42">[<expr pos:start="45:30" pos:end="45:41"><name pos:start="45:30" pos:end="45:41"><name pos:start="45:30" pos:end="45:34">attrs</name><operator pos:start="45:35" pos:end="45:35">.</operator><name pos:start="45:36" pos:end="45:41">secure</name></name></expr>]</index></name> <operator pos:start="45:44" pos:end="45:44">=</operator> <name pos:start="45:46" pos:end="45:50">value</name> <operator pos:start="45:52" pos:end="45:52">&amp;</operator> <literal type="number" pos:start="45:54" pos:end="45:63">0xffffff80</literal></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:15">case <expr pos:start="49:10" pos:end="49:14"><literal type="number" pos:start="49:10" pos:end="49:14">0xd0c</literal></expr>:</case> <comment type="block" pos:start="49:17" pos:end="49:59">/* Application Interrupt/Reset Control.  */</comment>

        <if_stmt pos:start="51:9" pos:end="83:9"><if pos:start="51:9" pos:end="83:9">if <condition pos:start="51:12" pos:end="51:36">(<expr pos:start="51:13" pos:end="51:35"><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:18">value</name> <operator pos:start="51:20" pos:end="51:21">&gt;&gt;</operator> <literal type="number" pos:start="51:23" pos:end="51:24">16</literal><operator pos:start="51:25" pos:end="51:25">)</operator> <operator pos:start="51:27" pos:end="51:28">==</operator> <literal type="number" pos:start="51:30" pos:end="51:35">0x05fa</literal></expr>)</condition> <block pos:start="51:38" pos:end="83:9">{<block_content pos:start="53:13" pos:end="81:31">

            <if_stmt pos:start="53:13" pos:end="57:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:26">(<expr pos:start="53:17" pos:end="53:25"><name pos:start="53:17" pos:end="53:21">value</name> <operator pos:start="53:23" pos:end="53:23">&amp;</operator> <literal type="number" pos:start="53:25" pos:end="53:25">4</literal></expr>)</condition> <block pos:start="53:28" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:47">

                <expr_stmt pos:start="55:17" pos:end="55:47"><expr pos:start="55:17" pos:end="55:46"><call pos:start="55:17" pos:end="55:46"><name pos:start="55:17" pos:end="55:30">qemu_irq_pulse</name><argument_list pos:start="55:31" pos:end="55:46">(<argument pos:start="55:32" pos:end="55:45"><expr pos:start="55:32" pos:end="55:45"><name pos:start="55:32" pos:end="55:45"><name pos:start="55:32" pos:end="55:32">s</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:45">sysresetreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="59:13" pos:end="67:13"><if pos:start="59:13" pos:end="67:13">if <condition pos:start="59:16" pos:end="59:26">(<expr pos:start="59:17" pos:end="59:25"><name pos:start="59:17" pos:end="59:21">value</name> <operator pos:start="59:23" pos:end="59:23">&amp;</operator> <literal type="number" pos:start="59:25" pos:end="59:25">2</literal></expr>)</condition> <block pos:start="59:28" pos:end="67:13">{<block_content pos:start="61:17" pos:end="65:52">

                <expr_stmt pos:start="61:17" pos:end="65:52"><expr pos:start="61:17" pos:end="65:51"><call pos:start="61:17" pos:end="65:51"><name pos:start="61:17" pos:end="61:29">qemu_log_mask</name><argument_list pos:start="61:30" pos:end="65:51">(<argument pos:start="61:31" pos:end="61:45"><expr pos:start="61:31" pos:end="61:45"><name pos:start="61:31" pos:end="61:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="63:31" pos:end="65:50"><expr pos:start="63:31" pos:end="65:50"><literal type="string" pos:start="63:31" pos:end="63:77">"Setting VECTCLRACTIVE when not in DEBUG mode "</literal>

                              <literal type="string" pos:start="65:31" pos:end="65:50">"is UNPREDICTABLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="69:13" pos:end="77:13"><if pos:start="69:13" pos:end="77:13">if <condition pos:start="69:16" pos:end="69:26">(<expr pos:start="69:17" pos:end="69:25"><name pos:start="69:17" pos:end="69:21">value</name> <operator pos:start="69:23" pos:end="69:23">&amp;</operator> <literal type="number" pos:start="69:25" pos:end="69:25">1</literal></expr>)</condition> <block pos:start="69:28" pos:end="77:13">{<block_content pos:start="71:17" pos:end="75:52">

                <expr_stmt pos:start="71:17" pos:end="75:52"><expr pos:start="71:17" pos:end="75:51"><call pos:start="71:17" pos:end="75:51"><name pos:start="71:17" pos:end="71:29">qemu_log_mask</name><argument_list pos:start="71:30" pos:end="75:51">(<argument pos:start="71:31" pos:end="71:45"><expr pos:start="71:31" pos:end="71:45"><name pos:start="71:31" pos:end="71:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="73:31" pos:end="75:50"><expr pos:start="73:31" pos:end="75:50"><literal type="string" pos:start="73:31" pos:end="73:73">"Setting VECTRESET when not in DEBUG mode "</literal>

                              <literal type="string" pos:start="75:31" pos:end="75:50">"is UNPREDICTABLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:49"><expr pos:start="79:13" pos:end="79:48"><name pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:23">prigroup</name></name> <operator pos:start="79:25" pos:end="79:25">=</operator> <call pos:start="79:27" pos:end="79:48"><name pos:start="79:27" pos:end="79:35">extract32</name><argument_list pos:start="79:36" pos:end="79:48">(<argument pos:start="79:37" pos:end="79:41"><expr pos:start="79:37" pos:end="79:41"><name pos:start="79:37" pos:end="79:41">value</name></expr></argument>, <argument pos:start="79:44" pos:end="79:44"><expr pos:start="79:44" pos:end="79:44"><literal type="number" pos:start="79:44" pos:end="79:44">8</literal></expr></argument>, <argument pos:start="79:47" pos:end="79:47"><expr pos:start="79:47" pos:end="79:47"><literal type="number" pos:start="79:47" pos:end="79:47">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:31"><expr pos:start="81:13" pos:end="81:30"><call pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:27">nvic_irq_update</name><argument_list pos:start="81:28" pos:end="81:30">(<argument pos:start="81:29" pos:end="81:29"><expr pos:start="81:29" pos:end="81:29"><name pos:start="81:29" pos:end="81:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <case pos:start="87:5" pos:end="87:15">case <expr pos:start="87:10" pos:end="87:14"><literal type="number" pos:start="87:10" pos:end="87:14">0xd10</literal></expr>:</case> <comment type="block" pos:start="87:17" pos:end="87:38">/* System Control.  */</comment>

        <comment type="block" pos:start="89:9" pos:end="89:49">/* TODO: Implement control registers.  */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:62"><expr pos:start="91:9" pos:end="91:61"><call pos:start="91:9" pos:end="91:61"><name pos:start="91:9" pos:end="91:21">qemu_log_mask</name><argument_list pos:start="91:22" pos:end="91:61">(<argument pos:start="91:23" pos:end="91:31"><expr pos:start="91:23" pos:end="91:31"><name pos:start="91:23" pos:end="91:31">LOG_UNIMP</name></expr></argument>, <argument pos:start="91:34" pos:end="91:60"><expr pos:start="91:34" pos:end="91:60"><literal type="string" pos:start="91:34" pos:end="91:60">"NVIC: SCR unimplemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <case pos:start="95:5" pos:end="95:15">case <expr pos:start="95:10" pos:end="95:14"><literal type="number" pos:start="95:10" pos:end="95:14">0xd14</literal></expr>:</case> <comment type="block" pos:start="95:17" pos:end="95:45">/* Configuration Control.  */</comment>

        <comment type="block" pos:start="97:9" pos:end="97:61">/* Enforce RAZ/WI on reserved and must-RAZ/WI bits */</comment>

        <expr_stmt pos:start="99:9" pos:end="109:49"><expr pos:start="99:9" pos:end="109:48"><name pos:start="99:9" pos:end="99:13">value</name> <operator pos:start="99:15" pos:end="99:16">&amp;=</operator> <operator pos:start="99:18" pos:end="99:18">(</operator><name pos:start="99:19" pos:end="99:41">R_V7M_CCR_STKALIGN_MASK</name> <operator pos:start="99:43" pos:end="99:43">|</operator>

                  <name pos:start="101:19" pos:end="101:42">R_V7M_CCR_BFHFNMIGN_MASK</name> <operator pos:start="101:44" pos:end="101:44">|</operator>

                  <name pos:start="103:19" pos:end="103:42">R_V7M_CCR_DIV_0_TRP_MASK</name> <operator pos:start="103:44" pos:end="103:44">|</operator>

                  <name pos:start="105:19" pos:end="105:44">R_V7M_CCR_UNALIGN_TRP_MASK</name> <operator pos:start="105:46" pos:end="105:46">|</operator>

                  <name pos:start="107:19" pos:end="107:45">R_V7M_CCR_USERSETMPEND_MASK</name> <operator pos:start="107:47" pos:end="107:47">|</operator>

                  <name pos:start="109:19" pos:end="109:47">R_V7M_CCR_NONBASETHRDENA_MASK</name><operator pos:start="109:48" pos:end="109:48">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:33"><expr pos:start="113:9" pos:end="113:32"><name pos:start="113:9" pos:end="113:24"><name pos:start="113:9" pos:end="113:11">cpu</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:16">env</name><operator pos:start="113:17" pos:end="113:17">.</operator><name pos:start="113:18" pos:end="113:20">v7m</name><operator pos:start="113:21" pos:end="113:21">.</operator><name pos:start="113:22" pos:end="113:24">ccr</name></name> <operator pos:start="113:26" pos:end="113:26">=</operator> <name pos:start="113:28" pos:end="113:32">value</name></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:15">case <expr pos:start="117:10" pos:end="117:14"><literal type="number" pos:start="117:10" pos:end="117:14">0xd24</literal></expr>:</case> <comment type="block" pos:start="117:17" pos:end="117:46">/* System Handler Control.  */</comment>

        <expr_stmt pos:start="119:9" pos:end="119:69"><expr pos:start="119:9" pos:end="119:68"><name pos:start="119:9" pos:end="119:35"><name pos:start="119:9" pos:end="119:9">s</name><operator pos:start="119:10" pos:end="119:11">-&gt;</operator><name pos:start="119:12" pos:end="119:18">vectors</name><index pos:start="119:19" pos:end="119:35">[<expr pos:start="119:20" pos:end="119:34"><name pos:start="119:20" pos:end="119:34">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="119:36" pos:end="119:36">.</operator><name pos:start="119:37" pos:end="119:42">active</name> <operator pos:start="119:44" pos:end="119:44">=</operator> <operator pos:start="119:46" pos:end="119:46">(</operator><name pos:start="119:47" pos:end="119:51">value</name> <operator pos:start="119:53" pos:end="119:53">&amp;</operator> <operator pos:start="119:55" pos:end="119:55">(</operator><literal type="number" pos:start="119:56" pos:end="119:56">1</literal> <operator pos:start="119:58" pos:end="119:59">&lt;&lt;</operator> <literal type="number" pos:start="119:61" pos:end="119:61">0</literal><operator pos:start="119:62" pos:end="119:62">)</operator><operator pos:start="119:63" pos:end="119:63">)</operator> <operator pos:start="119:65" pos:end="119:66">!=</operator> <literal type="number" pos:start="119:68" pos:end="119:68">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:69"><expr pos:start="121:9" pos:end="121:68"><name pos:start="121:9" pos:end="121:35"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:18">vectors</name><index pos:start="121:19" pos:end="121:35">[<expr pos:start="121:20" pos:end="121:34"><name pos:start="121:20" pos:end="121:34">ARMV7M_EXCP_BUS</name></expr>]</index></name><operator pos:start="121:36" pos:end="121:36">.</operator><name pos:start="121:37" pos:end="121:42">active</name> <operator pos:start="121:44" pos:end="121:44">=</operator> <operator pos:start="121:46" pos:end="121:46">(</operator><name pos:start="121:47" pos:end="121:51">value</name> <operator pos:start="121:53" pos:end="121:53">&amp;</operator> <operator pos:start="121:55" pos:end="121:55">(</operator><literal type="number" pos:start="121:56" pos:end="121:56">1</literal> <operator pos:start="121:58" pos:end="121:59">&lt;&lt;</operator> <literal type="number" pos:start="121:61" pos:end="121:61">1</literal><operator pos:start="121:62" pos:end="121:62">)</operator><operator pos:start="121:63" pos:end="121:63">)</operator> <operator pos:start="121:65" pos:end="121:66">!=</operator> <literal type="number" pos:start="121:68" pos:end="121:68">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:71"><expr pos:start="123:9" pos:end="123:70"><name pos:start="123:9" pos:end="123:37"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:18">vectors</name><index pos:start="123:19" pos:end="123:37">[<expr pos:start="123:20" pos:end="123:36"><name pos:start="123:20" pos:end="123:36">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="123:38" pos:end="123:38">.</operator><name pos:start="123:39" pos:end="123:44">active</name> <operator pos:start="123:46" pos:end="123:46">=</operator> <operator pos:start="123:48" pos:end="123:48">(</operator><name pos:start="123:49" pos:end="123:53">value</name> <operator pos:start="123:55" pos:end="123:55">&amp;</operator> <operator pos:start="123:57" pos:end="123:57">(</operator><literal type="number" pos:start="123:58" pos:end="123:58">1</literal> <operator pos:start="123:60" pos:end="123:61">&lt;&lt;</operator> <literal type="number" pos:start="123:63" pos:end="123:63">3</literal><operator pos:start="123:64" pos:end="123:64">)</operator><operator pos:start="123:65" pos:end="123:65">)</operator> <operator pos:start="123:67" pos:end="123:68">!=</operator> <literal type="number" pos:start="123:70" pos:end="123:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:69"><expr pos:start="125:9" pos:end="125:68"><name pos:start="125:9" pos:end="125:35"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:18">vectors</name><index pos:start="125:19" pos:end="125:35">[<expr pos:start="125:20" pos:end="125:34"><name pos:start="125:20" pos:end="125:34">ARMV7M_EXCP_SVC</name></expr>]</index></name><operator pos:start="125:36" pos:end="125:36">.</operator><name pos:start="125:37" pos:end="125:42">active</name> <operator pos:start="125:44" pos:end="125:44">=</operator> <operator pos:start="125:46" pos:end="125:46">(</operator><name pos:start="125:47" pos:end="125:51">value</name> <operator pos:start="125:53" pos:end="125:53">&amp;</operator> <operator pos:start="125:55" pos:end="125:55">(</operator><literal type="number" pos:start="125:56" pos:end="125:56">1</literal> <operator pos:start="125:58" pos:end="125:59">&lt;&lt;</operator> <literal type="number" pos:start="125:61" pos:end="125:61">7</literal><operator pos:start="125:62" pos:end="125:62">)</operator><operator pos:start="125:63" pos:end="125:63">)</operator> <operator pos:start="125:65" pos:end="125:66">!=</operator> <literal type="number" pos:start="125:68" pos:end="125:68">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:71"><expr pos:start="127:9" pos:end="127:70"><name pos:start="127:9" pos:end="127:37"><name pos:start="127:9" pos:end="127:9">s</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:18">vectors</name><index pos:start="127:19" pos:end="127:37">[<expr pos:start="127:20" pos:end="127:36"><name pos:start="127:20" pos:end="127:36">ARMV7M_EXCP_DEBUG</name></expr>]</index></name><operator pos:start="127:38" pos:end="127:38">.</operator><name pos:start="127:39" pos:end="127:44">active</name> <operator pos:start="127:46" pos:end="127:46">=</operator> <operator pos:start="127:48" pos:end="127:48">(</operator><name pos:start="127:49" pos:end="127:53">value</name> <operator pos:start="127:55" pos:end="127:55">&amp;</operator> <operator pos:start="127:57" pos:end="127:57">(</operator><literal type="number" pos:start="127:58" pos:end="127:58">1</literal> <operator pos:start="127:60" pos:end="127:61">&lt;&lt;</operator> <literal type="number" pos:start="127:63" pos:end="127:63">8</literal><operator pos:start="127:64" pos:end="127:64">)</operator><operator pos:start="127:65" pos:end="127:65">)</operator> <operator pos:start="127:67" pos:end="127:68">!=</operator> <literal type="number" pos:start="127:70" pos:end="127:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:73"><expr pos:start="129:9" pos:end="129:72"><name pos:start="129:9" pos:end="129:38"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:18">vectors</name><index pos:start="129:19" pos:end="129:38">[<expr pos:start="129:20" pos:end="129:37"><name pos:start="129:20" pos:end="129:37">ARMV7M_EXCP_PENDSV</name></expr>]</index></name><operator pos:start="129:39" pos:end="129:39">.</operator><name pos:start="129:40" pos:end="129:45">active</name> <operator pos:start="129:47" pos:end="129:47">=</operator> <operator pos:start="129:49" pos:end="129:49">(</operator><name pos:start="129:50" pos:end="129:54">value</name> <operator pos:start="129:56" pos:end="129:56">&amp;</operator> <operator pos:start="129:58" pos:end="129:58">(</operator><literal type="number" pos:start="129:59" pos:end="129:59">1</literal> <operator pos:start="129:61" pos:end="129:62">&lt;&lt;</operator> <literal type="number" pos:start="129:64" pos:end="129:65">10</literal><operator pos:start="129:66" pos:end="129:66">)</operator><operator pos:start="129:67" pos:end="129:67">)</operator> <operator pos:start="129:69" pos:end="129:70">!=</operator> <literal type="number" pos:start="129:72" pos:end="129:72">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:74"><expr pos:start="131:9" pos:end="131:73"><name pos:start="131:9" pos:end="131:39"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:18">vectors</name><index pos:start="131:19" pos:end="131:39">[<expr pos:start="131:20" pos:end="131:38"><name pos:start="131:20" pos:end="131:38">ARMV7M_EXCP_SYSTICK</name></expr>]</index></name><operator pos:start="131:40" pos:end="131:40">.</operator><name pos:start="131:41" pos:end="131:46">active</name> <operator pos:start="131:48" pos:end="131:48">=</operator> <operator pos:start="131:50" pos:end="131:50">(</operator><name pos:start="131:51" pos:end="131:55">value</name> <operator pos:start="131:57" pos:end="131:57">&amp;</operator> <operator pos:start="131:59" pos:end="131:59">(</operator><literal type="number" pos:start="131:60" pos:end="131:60">1</literal> <operator pos:start="131:62" pos:end="131:63">&lt;&lt;</operator> <literal type="number" pos:start="131:65" pos:end="131:66">11</literal><operator pos:start="131:67" pos:end="131:67">)</operator><operator pos:start="131:68" pos:end="131:68">)</operator> <operator pos:start="131:70" pos:end="131:71">!=</operator> <literal type="number" pos:start="131:73" pos:end="131:73">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:73"><expr pos:start="133:9" pos:end="133:72"><name pos:start="133:9" pos:end="133:37"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:18">vectors</name><index pos:start="133:19" pos:end="133:37">[<expr pos:start="133:20" pos:end="133:36"><name pos:start="133:20" pos:end="133:36">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="133:38" pos:end="133:38">.</operator><name pos:start="133:39" pos:end="133:45">pending</name> <operator pos:start="133:47" pos:end="133:47">=</operator> <operator pos:start="133:49" pos:end="133:49">(</operator><name pos:start="133:50" pos:end="133:54">value</name> <operator pos:start="133:56" pos:end="133:56">&amp;</operator> <operator pos:start="133:58" pos:end="133:58">(</operator><literal type="number" pos:start="133:59" pos:end="133:59">1</literal> <operator pos:start="133:61" pos:end="133:62">&lt;&lt;</operator> <literal type="number" pos:start="133:64" pos:end="133:65">12</literal><operator pos:start="133:66" pos:end="133:66">)</operator><operator pos:start="133:67" pos:end="133:67">)</operator> <operator pos:start="133:69" pos:end="133:70">!=</operator> <literal type="number" pos:start="133:72" pos:end="133:72">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:71"><expr pos:start="135:9" pos:end="135:70"><name pos:start="135:9" pos:end="135:35"><name pos:start="135:9" pos:end="135:9">s</name><operator pos:start="135:10" pos:end="135:11">-&gt;</operator><name pos:start="135:12" pos:end="135:18">vectors</name><index pos:start="135:19" pos:end="135:35">[<expr pos:start="135:20" pos:end="135:34"><name pos:start="135:20" pos:end="135:34">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="135:36" pos:end="135:36">.</operator><name pos:start="135:37" pos:end="135:43">pending</name> <operator pos:start="135:45" pos:end="135:45">=</operator> <operator pos:start="135:47" pos:end="135:47">(</operator><name pos:start="135:48" pos:end="135:52">value</name> <operator pos:start="135:54" pos:end="135:54">&amp;</operator> <operator pos:start="135:56" pos:end="135:56">(</operator><literal type="number" pos:start="135:57" pos:end="135:57">1</literal> <operator pos:start="135:59" pos:end="135:60">&lt;&lt;</operator> <literal type="number" pos:start="135:62" pos:end="135:63">13</literal><operator pos:start="135:64" pos:end="135:64">)</operator><operator pos:start="135:65" pos:end="135:65">)</operator> <operator pos:start="135:67" pos:end="135:68">!=</operator> <literal type="number" pos:start="135:70" pos:end="135:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:71"><expr pos:start="137:9" pos:end="137:70"><name pos:start="137:9" pos:end="137:35"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:18">vectors</name><index pos:start="137:19" pos:end="137:35">[<expr pos:start="137:20" pos:end="137:34"><name pos:start="137:20" pos:end="137:34">ARMV7M_EXCP_BUS</name></expr>]</index></name><operator pos:start="137:36" pos:end="137:36">.</operator><name pos:start="137:37" pos:end="137:43">pending</name> <operator pos:start="137:45" pos:end="137:45">=</operator> <operator pos:start="137:47" pos:end="137:47">(</operator><name pos:start="137:48" pos:end="137:52">value</name> <operator pos:start="137:54" pos:end="137:54">&amp;</operator> <operator pos:start="137:56" pos:end="137:56">(</operator><literal type="number" pos:start="137:57" pos:end="137:57">1</literal> <operator pos:start="137:59" pos:end="137:60">&lt;&lt;</operator> <literal type="number" pos:start="137:62" pos:end="137:63">14</literal><operator pos:start="137:64" pos:end="137:64">)</operator><operator pos:start="137:65" pos:end="137:65">)</operator> <operator pos:start="137:67" pos:end="137:68">!=</operator> <literal type="number" pos:start="137:70" pos:end="137:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:71"><expr pos:start="139:9" pos:end="139:70"><name pos:start="139:9" pos:end="139:35"><name pos:start="139:9" pos:end="139:9">s</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:18">vectors</name><index pos:start="139:19" pos:end="139:35">[<expr pos:start="139:20" pos:end="139:34"><name pos:start="139:20" pos:end="139:34">ARMV7M_EXCP_SVC</name></expr>]</index></name><operator pos:start="139:36" pos:end="139:36">.</operator><name pos:start="139:37" pos:end="139:43">pending</name> <operator pos:start="139:45" pos:end="139:45">=</operator> <operator pos:start="139:47" pos:end="139:47">(</operator><name pos:start="139:48" pos:end="139:52">value</name> <operator pos:start="139:54" pos:end="139:54">&amp;</operator> <operator pos:start="139:56" pos:end="139:56">(</operator><literal type="number" pos:start="139:57" pos:end="139:57">1</literal> <operator pos:start="139:59" pos:end="139:60">&lt;&lt;</operator> <literal type="number" pos:start="139:62" pos:end="139:63">15</literal><operator pos:start="139:64" pos:end="139:64">)</operator><operator pos:start="139:65" pos:end="139:65">)</operator> <operator pos:start="139:67" pos:end="139:68">!=</operator> <literal type="number" pos:start="139:70" pos:end="139:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:71"><expr pos:start="141:9" pos:end="141:70"><name pos:start="141:9" pos:end="141:35"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:18">vectors</name><index pos:start="141:19" pos:end="141:35">[<expr pos:start="141:20" pos:end="141:34"><name pos:start="141:20" pos:end="141:34">ARMV7M_EXCP_MEM</name></expr>]</index></name><operator pos:start="141:36" pos:end="141:36">.</operator><name pos:start="141:37" pos:end="141:43">enabled</name> <operator pos:start="141:45" pos:end="141:45">=</operator> <operator pos:start="141:47" pos:end="141:47">(</operator><name pos:start="141:48" pos:end="141:52">value</name> <operator pos:start="141:54" pos:end="141:54">&amp;</operator> <operator pos:start="141:56" pos:end="141:56">(</operator><literal type="number" pos:start="141:57" pos:end="141:57">1</literal> <operator pos:start="141:59" pos:end="141:60">&lt;&lt;</operator> <literal type="number" pos:start="141:62" pos:end="141:63">16</literal><operator pos:start="141:64" pos:end="141:64">)</operator><operator pos:start="141:65" pos:end="141:65">)</operator> <operator pos:start="141:67" pos:end="141:68">!=</operator> <literal type="number" pos:start="141:70" pos:end="141:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:71"><expr pos:start="143:9" pos:end="143:70"><name pos:start="143:9" pos:end="143:35"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:18">vectors</name><index pos:start="143:19" pos:end="143:35">[<expr pos:start="143:20" pos:end="143:34"><name pos:start="143:20" pos:end="143:34">ARMV7M_EXCP_BUS</name></expr>]</index></name><operator pos:start="143:36" pos:end="143:36">.</operator><name pos:start="143:37" pos:end="143:43">enabled</name> <operator pos:start="143:45" pos:end="143:45">=</operator> <operator pos:start="143:47" pos:end="143:47">(</operator><name pos:start="143:48" pos:end="143:52">value</name> <operator pos:start="143:54" pos:end="143:54">&amp;</operator> <operator pos:start="143:56" pos:end="143:56">(</operator><literal type="number" pos:start="143:57" pos:end="143:57">1</literal> <operator pos:start="143:59" pos:end="143:60">&lt;&lt;</operator> <literal type="number" pos:start="143:62" pos:end="143:63">17</literal><operator pos:start="143:64" pos:end="143:64">)</operator><operator pos:start="143:65" pos:end="143:65">)</operator> <operator pos:start="143:67" pos:end="143:68">!=</operator> <literal type="number" pos:start="143:70" pos:end="143:70">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:73"><expr pos:start="145:9" pos:end="145:72"><name pos:start="145:9" pos:end="145:37"><name pos:start="145:9" pos:end="145:9">s</name><operator pos:start="145:10" pos:end="145:11">-&gt;</operator><name pos:start="145:12" pos:end="145:18">vectors</name><index pos:start="145:19" pos:end="145:37">[<expr pos:start="145:20" pos:end="145:36"><name pos:start="145:20" pos:end="145:36">ARMV7M_EXCP_USAGE</name></expr>]</index></name><operator pos:start="145:38" pos:end="145:38">.</operator><name pos:start="145:39" pos:end="145:45">enabled</name> <operator pos:start="145:47" pos:end="145:47">=</operator> <operator pos:start="145:49" pos:end="145:49">(</operator><name pos:start="145:50" pos:end="145:54">value</name> <operator pos:start="145:56" pos:end="145:56">&amp;</operator> <operator pos:start="145:58" pos:end="145:58">(</operator><literal type="number" pos:start="145:59" pos:end="145:59">1</literal> <operator pos:start="145:61" pos:end="145:62">&lt;&lt;</operator> <literal type="number" pos:start="145:64" pos:end="145:65">18</literal><operator pos:start="145:66" pos:end="145:66">)</operator><operator pos:start="145:67" pos:end="145:67">)</operator> <operator pos:start="145:69" pos:end="145:70">!=</operator> <literal type="number" pos:start="145:72" pos:end="145:72">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:27"><expr pos:start="147:9" pos:end="147:26"><call pos:start="147:9" pos:end="147:26"><name pos:start="147:9" pos:end="147:23">nvic_irq_update</name><argument_list pos:start="147:24" pos:end="147:26">(<argument pos:start="147:25" pos:end="147:25"><expr pos:start="147:25" pos:end="147:25"><name pos:start="147:25" pos:end="147:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <case pos:start="151:5" pos:end="151:15">case <expr pos:start="151:10" pos:end="151:14"><literal type="number" pos:start="151:10" pos:end="151:14">0xd28</literal></expr>:</case> <comment type="block" pos:start="151:17" pos:end="151:49">/* Configurable Fault Status.  */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:36"><expr pos:start="153:9" pos:end="153:35"><name pos:start="153:9" pos:end="153:25"><name pos:start="153:9" pos:end="153:11">cpu</name><operator pos:start="153:12" pos:end="153:13">-&gt;</operator><name pos:start="153:14" pos:end="153:16">env</name><operator pos:start="153:17" pos:end="153:17">.</operator><name pos:start="153:18" pos:end="153:20">v7m</name><operator pos:start="153:21" pos:end="153:21">.</operator><name pos:start="153:22" pos:end="153:25">cfsr</name></name> <operator pos:start="153:27" pos:end="153:28">&amp;=</operator> <operator pos:start="153:30" pos:end="153:30">~</operator><name pos:start="153:31" pos:end="153:35">value</name></expr>;</expr_stmt> <comment type="block" pos:start="153:38" pos:end="153:46">/* W1C */</comment>

        <break pos:start="155:9" pos:end="155:14">break;</break>

    <case pos:start="157:5" pos:end="157:15">case <expr pos:start="157:10" pos:end="157:14"><literal type="number" pos:start="157:10" pos:end="157:14">0xd2c</literal></expr>:</case> <comment type="block" pos:start="157:17" pos:end="157:41">/* Hard Fault Status.  */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:36"><expr pos:start="159:9" pos:end="159:35"><name pos:start="159:9" pos:end="159:25"><name pos:start="159:9" pos:end="159:11">cpu</name><operator pos:start="159:12" pos:end="159:13">-&gt;</operator><name pos:start="159:14" pos:end="159:16">env</name><operator pos:start="159:17" pos:end="159:17">.</operator><name pos:start="159:18" pos:end="159:20">v7m</name><operator pos:start="159:21" pos:end="159:21">.</operator><name pos:start="159:22" pos:end="159:25">hfsr</name></name> <operator pos:start="159:27" pos:end="159:28">&amp;=</operator> <operator pos:start="159:30" pos:end="159:30">~</operator><name pos:start="159:31" pos:end="159:35">value</name></expr>;</expr_stmt> <comment type="block" pos:start="159:38" pos:end="159:46">/* W1C */</comment>

        <break pos:start="161:9" pos:end="161:14">break;</break>

    <case pos:start="163:5" pos:end="163:15">case <expr pos:start="163:10" pos:end="163:14"><literal type="number" pos:start="163:10" pos:end="163:14">0xd30</literal></expr>:</case> <comment type="block" pos:start="163:17" pos:end="163:42">/* Debug Fault Status.  */</comment>

        <expr_stmt pos:start="165:9" pos:end="165:36"><expr pos:start="165:9" pos:end="165:35"><name pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:11">cpu</name><operator pos:start="165:12" pos:end="165:13">-&gt;</operator><name pos:start="165:14" pos:end="165:16">env</name><operator pos:start="165:17" pos:end="165:17">.</operator><name pos:start="165:18" pos:end="165:20">v7m</name><operator pos:start="165:21" pos:end="165:21">.</operator><name pos:start="165:22" pos:end="165:25">dfsr</name></name> <operator pos:start="165:27" pos:end="165:28">&amp;=</operator> <operator pos:start="165:30" pos:end="165:30">~</operator><name pos:start="165:31" pos:end="165:35">value</name></expr>;</expr_stmt> <comment type="block" pos:start="165:38" pos:end="165:46">/* W1C */</comment>

        <break pos:start="167:9" pos:end="167:14">break;</break>

    <case pos:start="169:5" pos:end="169:15">case <expr pos:start="169:10" pos:end="169:14"><literal type="number" pos:start="169:10" pos:end="169:14">0xd34</literal></expr>:</case> <comment type="block" pos:start="169:17" pos:end="169:42">/* Mem Manage Address.  */</comment>

        <expr_stmt pos:start="171:9" pos:end="171:35"><expr pos:start="171:9" pos:end="171:34"><name pos:start="171:9" pos:end="171:26"><name pos:start="171:9" pos:end="171:11">cpu</name><operator pos:start="171:12" pos:end="171:13">-&gt;</operator><name pos:start="171:14" pos:end="171:16">env</name><operator pos:start="171:17" pos:end="171:17">.</operator><name pos:start="171:18" pos:end="171:20">v7m</name><operator pos:start="171:21" pos:end="171:21">.</operator><name pos:start="171:22" pos:end="171:26">mmfar</name></name> <operator pos:start="171:28" pos:end="171:28">=</operator> <name pos:start="171:30" pos:end="171:34">value</name></expr>;</expr_stmt>

        <return pos:start="173:9" pos:end="173:15">return;</return>

    <case pos:start="175:5" pos:end="175:15">case <expr pos:start="175:10" pos:end="175:14"><literal type="number" pos:start="175:10" pos:end="175:14">0xd38</literal></expr>:</case> <comment type="block" pos:start="175:17" pos:end="175:41">/* Bus Fault Address.  */</comment>

        <expr_stmt pos:start="177:9" pos:end="177:34"><expr pos:start="177:9" pos:end="177:33"><name pos:start="177:9" pos:end="177:25"><name pos:start="177:9" pos:end="177:11">cpu</name><operator pos:start="177:12" pos:end="177:13">-&gt;</operator><name pos:start="177:14" pos:end="177:16">env</name><operator pos:start="177:17" pos:end="177:17">.</operator><name pos:start="177:18" pos:end="177:20">v7m</name><operator pos:start="177:21" pos:end="177:21">.</operator><name pos:start="177:22" pos:end="177:25">bfar</name></name> <operator pos:start="177:27" pos:end="177:27">=</operator> <name pos:start="177:29" pos:end="177:33">value</name></expr>;</expr_stmt>

        <return pos:start="179:9" pos:end="179:15">return;</return>

    <case pos:start="181:5" pos:end="181:15">case <expr pos:start="181:10" pos:end="181:14"><literal type="number" pos:start="181:10" pos:end="181:14">0xd3c</literal></expr>:</case> <comment type="block" pos:start="181:17" pos:end="181:40">/* Aux Fault Status.  */</comment>

        <expr_stmt pos:start="183:9" pos:end="185:74"><expr pos:start="183:9" pos:end="185:73"><call pos:start="183:9" pos:end="185:73"><name pos:start="183:9" pos:end="183:21">qemu_log_mask</name><argument_list pos:start="183:22" pos:end="185:73">(<argument pos:start="183:23" pos:end="183:31"><expr pos:start="183:23" pos:end="183:31"><name pos:start="183:23" pos:end="183:31">LOG_UNIMP</name></expr></argument>,

                      <argument pos:start="185:23" pos:end="185:72"><expr pos:start="185:23" pos:end="185:72"><literal type="string" pos:start="185:23" pos:end="185:72">"NVIC: Aux fault status registers unimplemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="187:9" pos:end="187:14">break;</break>

    <case pos:start="189:5" pos:end="189:15">case <expr pos:start="189:10" pos:end="189:14"><literal type="number" pos:start="189:10" pos:end="189:14">0xd90</literal></expr>:</case> <comment type="block" pos:start="189:17" pos:end="189:30">/* MPU_TYPE */</comment>

        <return pos:start="191:9" pos:end="191:15">return;</return> <comment type="block" pos:start="191:17" pos:end="191:24">/* RO */</comment>

    <case pos:start="193:5" pos:end="193:15">case <expr pos:start="193:10" pos:end="193:14"><literal type="number" pos:start="193:10" pos:end="193:14">0xd94</literal></expr>:</case> <comment type="block" pos:start="193:17" pos:end="193:30">/* MPU_CTRL */</comment>

        <if_stmt pos:start="195:9" pos:end="205:9"><if pos:start="195:9" pos:end="205:9">if <condition pos:start="195:12" pos:end="199:44">(<expr pos:start="195:13" pos:end="199:43"><operator pos:start="195:13" pos:end="195:13">(</operator><name pos:start="195:14" pos:end="195:18">value</name> <operator pos:start="195:20" pos:end="195:20">&amp;</operator>

             <operator pos:start="197:14" pos:end="197:14">(</operator><name pos:start="197:15" pos:end="197:42">R_V7M_MPU_CTRL_HFNMIENA_MASK</name> <operator pos:start="197:44" pos:end="197:44">|</operator> <name pos:start="197:46" pos:end="197:71">R_V7M_MPU_CTRL_ENABLE_MASK</name><operator pos:start="197:72" pos:end="197:72">)</operator><operator pos:start="197:73" pos:end="197:73">)</operator>

            <operator pos:start="199:13" pos:end="199:14">==</operator> <name pos:start="199:16" pos:end="199:43">R_V7M_MPU_CTRL_HFNMIENA_MASK</name></expr>)</condition> <block pos:start="199:46" pos:end="205:9">{<block_content pos:start="201:13" pos:end="203:45">

            <expr_stmt pos:start="201:13" pos:end="203:45"><expr pos:start="201:13" pos:end="203:44"><call pos:start="201:13" pos:end="203:44"><name pos:start="201:13" pos:end="201:25">qemu_log_mask</name><argument_list pos:start="201:26" pos:end="203:44">(<argument pos:start="201:27" pos:end="201:41"><expr pos:start="201:27" pos:end="201:41"><name pos:start="201:27" pos:end="201:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="201:44" pos:end="203:43"><expr pos:start="201:44" pos:end="203:43"><literal type="string" pos:start="201:44" pos:end="201:79">"MPU_CTRL: HFNMIENA and !ENABLE is "</literal>

                          <literal type="string" pos:start="203:27" pos:end="203:43">"UNPREDICTABLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="207:9" pos:end="211:73"><expr pos:start="207:9" pos:end="211:72"><name pos:start="207:9" pos:end="207:29"><name pos:start="207:9" pos:end="207:11">cpu</name><operator pos:start="207:12" pos:end="207:13">-&gt;</operator><name pos:start="207:14" pos:end="207:16">env</name><operator pos:start="207:17" pos:end="207:17">.</operator><name pos:start="207:18" pos:end="207:20">v7m</name><operator pos:start="207:21" pos:end="207:21">.</operator><name pos:start="207:22" pos:end="207:29">mpu_ctrl</name></name> <operator pos:start="207:31" pos:end="207:31">=</operator> <name pos:start="207:33" pos:end="207:37">value</name> <operator pos:start="207:39" pos:end="207:39">&amp;</operator> <operator pos:start="207:41" pos:end="207:41">(</operator><name pos:start="207:42" pos:end="207:67">R_V7M_MPU_CTRL_ENABLE_MASK</name> <operator pos:start="207:69" pos:end="207:69">|</operator>

                                         <name pos:start="209:42" pos:end="209:69">R_V7M_MPU_CTRL_HFNMIENA_MASK</name> <operator pos:start="209:71" pos:end="209:71">|</operator>

                                         <name pos:start="211:42" pos:end="211:71">R_V7M_MPU_CTRL_PRIVDEFENA_MASK</name><operator pos:start="211:72" pos:end="211:72">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:28"><expr pos:start="213:9" pos:end="213:27"><call pos:start="213:9" pos:end="213:27"><name pos:start="213:9" pos:end="213:17">tlb_flush</name><argument_list pos:start="213:18" pos:end="213:27">(<argument pos:start="213:19" pos:end="213:26"><expr pos:start="213:19" pos:end="213:26"><call pos:start="213:19" pos:end="213:26"><name pos:start="213:19" pos:end="213:21">CPU</name><argument_list pos:start="213:22" pos:end="213:26">(<argument pos:start="213:23" pos:end="213:25"><expr pos:start="213:23" pos:end="213:25"><name pos:start="213:23" pos:end="213:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="215:9" pos:end="215:14">break;</break>

    <case pos:start="217:5" pos:end="217:15">case <expr pos:start="217:10" pos:end="217:14"><literal type="number" pos:start="217:10" pos:end="217:14">0xd98</literal></expr>:</case> <comment type="block" pos:start="217:17" pos:end="217:29">/* MPU_RNR */</comment>

        <if_stmt pos:start="219:9" pos:end="231:9"><if pos:start="219:9" pos:end="227:9">if <condition pos:start="219:12" pos:end="219:41">(<expr pos:start="219:13" pos:end="219:40"><name pos:start="219:13" pos:end="219:17">value</name> <operator pos:start="219:19" pos:end="219:20">&gt;=</operator> <name pos:start="219:22" pos:end="219:40"><name pos:start="219:22" pos:end="219:24">cpu</name><operator pos:start="219:25" pos:end="219:26">-&gt;</operator><name pos:start="219:27" pos:end="219:40">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="219:43" pos:end="227:9">{<block_content pos:start="221:13" pos:end="225:54">

            <expr_stmt pos:start="221:13" pos:end="225:54"><expr pos:start="221:13" pos:end="225:53"><call pos:start="221:13" pos:end="225:53"><name pos:start="221:13" pos:end="221:25">qemu_log_mask</name><argument_list pos:start="221:26" pos:end="225:53">(<argument pos:start="221:27" pos:end="221:41"><expr pos:start="221:27" pos:end="221:41"><name pos:start="221:27" pos:end="221:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="221:44" pos:end="223:49"><expr pos:start="221:44" pos:end="223:49"><literal type="string" pos:start="221:44" pos:end="221:70">"MPU region out of range %"</literal>

                          <name pos:start="223:27" pos:end="223:32">PRIu32</name> <literal type="string" pos:start="223:34" pos:end="223:37">"/%"</literal> <name pos:start="223:39" pos:end="223:44">PRIu32</name> <literal type="string" pos:start="223:46" pos:end="223:49">"\n"</literal></expr></argument>,

                          <argument pos:start="225:27" pos:end="225:31"><expr pos:start="225:27" pos:end="225:31"><name pos:start="225:27" pos:end="225:31">value</name></expr></argument>, <argument pos:start="225:34" pos:end="225:52"><expr pos:start="225:34" pos:end="225:52"><name pos:start="225:34" pos:end="225:52"><name pos:start="225:34" pos:end="225:36">cpu</name><operator pos:start="225:37" pos:end="225:38">-&gt;</operator><name pos:start="225:39" pos:end="225:52">pmsav7_dregion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="227:11" pos:end="231:9">else <block pos:start="227:16" pos:end="231:9">{<block_content pos:start="229:13" pos:end="229:40">

            <expr_stmt pos:start="229:13" pos:end="229:40"><expr pos:start="229:13" pos:end="229:39"><name pos:start="229:13" pos:end="229:31"><name pos:start="229:13" pos:end="229:15">cpu</name><operator pos:start="229:16" pos:end="229:17">-&gt;</operator><name pos:start="229:18" pos:end="229:20">env</name><operator pos:start="229:21" pos:end="229:21">.</operator><name pos:start="229:22" pos:end="229:27">pmsav7</name><operator pos:start="229:28" pos:end="229:28">.</operator><name pos:start="229:29" pos:end="229:31">rnr</name></name> <operator pos:start="229:33" pos:end="229:33">=</operator> <name pos:start="229:35" pos:end="229:39">value</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="233:9" pos:end="233:14">break;</break>

    <case pos:start="235:5" pos:end="235:15">case <expr pos:start="235:10" pos:end="235:14"><literal type="number" pos:start="235:10" pos:end="235:14">0xd9c</literal></expr>:</case> <comment type="block" pos:start="235:17" pos:end="235:30">/* MPU_RBAR */</comment>

    <case pos:start="237:5" pos:end="237:15">case <expr pos:start="237:10" pos:end="237:14"><literal type="number" pos:start="237:10" pos:end="237:14">0xda4</literal></expr>:</case> <comment type="block" pos:start="237:17" pos:end="237:33">/* MPU_RBAR_A1 */</comment>

    <case pos:start="239:5" pos:end="239:15">case <expr pos:start="239:10" pos:end="239:14"><literal type="number" pos:start="239:10" pos:end="239:14">0xdac</literal></expr>:</case> <comment type="block" pos:start="239:17" pos:end="239:33">/* MPU_RBAR_A2 */</comment>

    <case pos:start="241:5" pos:end="241:15">case <expr pos:start="241:10" pos:end="241:14"><literal type="number" pos:start="241:10" pos:end="241:14">0xdb4</literal></expr>:</case> <comment type="block" pos:start="241:17" pos:end="241:33">/* MPU_RBAR_A3 */</comment>

    <block pos:start="243:5" pos:end="335:5">{<block_content pos:start="245:9" pos:end="333:14">

        <decl_stmt pos:start="245:9" pos:end="245:19"><decl pos:start="245:9" pos:end="245:18"><type pos:start="245:9" pos:end="245:11"><name pos:start="245:9" pos:end="245:11">int</name></type> <name pos:start="245:13" pos:end="245:18">region</name></decl>;</decl_stmt>



        <if_stmt pos:start="249:9" pos:end="285:9"><if pos:start="249:9" pos:end="285:9">if <condition pos:start="249:12" pos:end="249:51">(<expr pos:start="249:13" pos:end="249:50"><call pos:start="249:13" pos:end="249:50"><name pos:start="249:13" pos:end="249:23">arm_feature</name><argument_list pos:start="249:24" pos:end="249:50">(<argument pos:start="249:25" pos:end="249:33"><expr pos:start="249:25" pos:end="249:33"><operator pos:start="249:25" pos:end="249:25">&amp;</operator><name pos:start="249:26" pos:end="249:33"><name pos:start="249:26" pos:end="249:28">cpu</name><operator pos:start="249:29" pos:end="249:30">-&gt;</operator><name pos:start="249:31" pos:end="249:33">env</name></name></expr></argument>, <argument pos:start="249:36" pos:end="249:49"><expr pos:start="249:36" pos:end="249:49"><name pos:start="249:36" pos:end="249:49">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="249:53" pos:end="285:9">{<block_content pos:start="261:13" pos:end="283:19">

            <comment type="block" pos:start="251:13" pos:end="259:15">/* PMSAv8M handling of the aliases is different from v7M:

             * aliases A1, A2, A3 override the low two bits of the region

             * number in MPU_RNR, and there is no 'region' field in the

             * RBAR register.

             */</comment>

            <decl_stmt pos:start="261:13" pos:end="261:47"><decl pos:start="261:13" pos:end="261:46"><type pos:start="261:13" pos:end="261:15"><name pos:start="261:13" pos:end="261:15">int</name></type> <name pos:start="261:17" pos:end="261:23">aliasno</name> <init pos:start="261:25" pos:end="261:46">= <expr pos:start="261:27" pos:end="261:46"><operator pos:start="261:27" pos:end="261:27">(</operator><name pos:start="261:28" pos:end="261:33">offset</name> <operator pos:start="261:35" pos:end="261:35">-</operator> <literal type="number" pos:start="261:37" pos:end="261:41">0xd9c</literal><operator pos:start="261:42" pos:end="261:42">)</operator> <operator pos:start="261:44" pos:end="261:44">/</operator> <literal type="number" pos:start="261:46" pos:end="261:46">8</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="261:49" pos:end="261:58">/* 0..3 */</comment>



            <expr_stmt pos:start="265:13" pos:end="265:41"><expr pos:start="265:13" pos:end="265:40"><name pos:start="265:13" pos:end="265:18">region</name> <operator pos:start="265:20" pos:end="265:20">=</operator> <name pos:start="265:22" pos:end="265:40"><name pos:start="265:22" pos:end="265:24">cpu</name><operator pos:start="265:25" pos:end="265:26">-&gt;</operator><name pos:start="265:27" pos:end="265:29">env</name><operator pos:start="265:30" pos:end="265:30">.</operator><name pos:start="265:31" pos:end="265:36">pmsav7</name><operator pos:start="265:37" pos:end="265:37">.</operator><name pos:start="265:38" pos:end="265:40">rnr</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="267:13" pos:end="271:13"><if pos:start="267:13" pos:end="271:13">if <condition pos:start="267:16" pos:end="267:24">(<expr pos:start="267:17" pos:end="267:23"><name pos:start="267:17" pos:end="267:23">aliasno</name></expr>)</condition> <block pos:start="267:26" pos:end="271:13">{<block_content pos:start="269:17" pos:end="269:58">

                <expr_stmt pos:start="269:17" pos:end="269:58"><expr pos:start="269:17" pos:end="269:57"><name pos:start="269:17" pos:end="269:22">region</name> <operator pos:start="269:24" pos:end="269:24">=</operator> <call pos:start="269:26" pos:end="269:57"><name pos:start="269:26" pos:end="269:34">deposit32</name><argument_list pos:start="269:35" pos:end="269:57">(<argument pos:start="269:36" pos:end="269:41"><expr pos:start="269:36" pos:end="269:41"><name pos:start="269:36" pos:end="269:41">region</name></expr></argument>, <argument pos:start="269:44" pos:end="269:44"><expr pos:start="269:44" pos:end="269:44"><literal type="number" pos:start="269:44" pos:end="269:44">0</literal></expr></argument>, <argument pos:start="269:47" pos:end="269:47"><expr pos:start="269:47" pos:end="269:47"><literal type="number" pos:start="269:47" pos:end="269:47">2</literal></expr></argument>, <argument pos:start="269:50" pos:end="269:56"><expr pos:start="269:50" pos:end="269:56"><name pos:start="269:50" pos:end="269:56">aliasno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="273:13" pos:end="277:13"><if pos:start="273:13" pos:end="277:13">if <condition pos:start="273:16" pos:end="273:46">(<expr pos:start="273:17" pos:end="273:45"><name pos:start="273:17" pos:end="273:22">region</name> <operator pos:start="273:24" pos:end="273:25">&gt;=</operator> <name pos:start="273:27" pos:end="273:45"><name pos:start="273:27" pos:end="273:29">cpu</name><operator pos:start="273:30" pos:end="273:31">-&gt;</operator><name pos:start="273:32" pos:end="273:45">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="273:48" pos:end="277:13">{<block_content pos:start="275:17" pos:end="275:23">

                <return pos:start="275:17" pos:end="275:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:63"><expr pos:start="279:13" pos:end="279:62"><name pos:start="279:13" pos:end="279:54"><name pos:start="279:13" pos:end="279:15">cpu</name><operator pos:start="279:16" pos:end="279:17">-&gt;</operator><name pos:start="279:18" pos:end="279:20">env</name><operator pos:start="279:21" pos:end="279:21">.</operator><name pos:start="279:22" pos:end="279:27">pmsav8</name><operator pos:start="279:28" pos:end="279:28">.</operator><name pos:start="279:29" pos:end="279:32">rbar</name><index pos:start="279:33" pos:end="279:46">[<expr pos:start="279:34" pos:end="279:45"><name pos:start="279:34" pos:end="279:45"><name pos:start="279:34" pos:end="279:38">attrs</name><operator pos:start="279:39" pos:end="279:39">.</operator><name pos:start="279:40" pos:end="279:45">secure</name></name></expr>]</index><index pos:start="279:47" pos:end="279:54">[<expr pos:start="279:48" pos:end="279:53"><name pos:start="279:48" pos:end="279:53">region</name></expr>]</index></name> <operator pos:start="279:56" pos:end="279:56">=</operator> <name pos:start="279:58" pos:end="279:62">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="281:13" pos:end="281:32"><expr pos:start="281:13" pos:end="281:31"><call pos:start="281:13" pos:end="281:31"><name pos:start="281:13" pos:end="281:21">tlb_flush</name><argument_list pos:start="281:22" pos:end="281:31">(<argument pos:start="281:23" pos:end="281:30"><expr pos:start="281:23" pos:end="281:30"><call pos:start="281:23" pos:end="281:30"><name pos:start="281:23" pos:end="281:25">CPU</name><argument_list pos:start="281:26" pos:end="281:30">(<argument pos:start="281:27" pos:end="281:29"><expr pos:start="281:27" pos:end="281:29"><name pos:start="281:27" pos:end="281:29">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="283:13" pos:end="283:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="289:9" pos:end="317:9"><if pos:start="289:9" pos:end="313:9">if <condition pos:start="289:12" pos:end="289:29">(<expr pos:start="289:13" pos:end="289:28"><name pos:start="289:13" pos:end="289:17">value</name> <operator pos:start="289:19" pos:end="289:19">&amp;</operator> <operator pos:start="289:21" pos:end="289:21">(</operator><literal type="number" pos:start="289:22" pos:end="289:22">1</literal> <operator pos:start="289:24" pos:end="289:25">&lt;&lt;</operator> <literal type="number" pos:start="289:27" pos:end="289:27">4</literal><operator pos:start="289:28" pos:end="289:28">)</operator></expr>)</condition> <block pos:start="289:31" pos:end="313:9">{<block_content pos:start="297:13" pos:end="311:41">

            <comment type="block" pos:start="291:13" pos:end="295:15">/* VALID bit means use the region number specified in this

             * value and also update MPU_RNR.REGION with that value.

             */</comment>

            <expr_stmt pos:start="297:13" pos:end="297:44"><expr pos:start="297:13" pos:end="297:43"><name pos:start="297:13" pos:end="297:18">region</name> <operator pos:start="297:20" pos:end="297:20">=</operator> <call pos:start="297:22" pos:end="297:43"><name pos:start="297:22" pos:end="297:30">extract32</name><argument_list pos:start="297:31" pos:end="297:43">(<argument pos:start="297:32" pos:end="297:36"><expr pos:start="297:32" pos:end="297:36"><name pos:start="297:32" pos:end="297:36">value</name></expr></argument>, <argument pos:start="297:39" pos:end="297:39"><expr pos:start="297:39" pos:end="297:39"><literal type="number" pos:start="297:39" pos:end="297:39">0</literal></expr></argument>, <argument pos:start="297:42" pos:end="297:42"><expr pos:start="297:42" pos:end="297:42"><literal type="number" pos:start="297:42" pos:end="297:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="299:13" pos:end="309:13"><if pos:start="299:13" pos:end="309:13">if <condition pos:start="299:16" pos:end="299:46">(<expr pos:start="299:17" pos:end="299:45"><name pos:start="299:17" pos:end="299:22">region</name> <operator pos:start="299:24" pos:end="299:25">&gt;=</operator> <name pos:start="299:27" pos:end="299:45"><name pos:start="299:27" pos:end="299:29">cpu</name><operator pos:start="299:30" pos:end="299:31">-&gt;</operator><name pos:start="299:32" pos:end="299:45">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="299:48" pos:end="309:13">{<block_content pos:start="301:17" pos:end="307:23">

                <expr_stmt pos:start="301:17" pos:end="305:59"><expr pos:start="301:17" pos:end="305:58"><call pos:start="301:17" pos:end="305:58"><name pos:start="301:17" pos:end="301:29">qemu_log_mask</name><argument_list pos:start="301:30" pos:end="305:58">(<argument pos:start="301:31" pos:end="301:45"><expr pos:start="301:31" pos:end="301:45"><name pos:start="301:31" pos:end="301:45">LOG_GUEST_ERROR</name></expr></argument>,

                              <argument pos:start="303:31" pos:end="303:72"><expr pos:start="303:31" pos:end="303:72"><literal type="string" pos:start="303:31" pos:end="303:60">"MPU region out of range %u/%"</literal> <name pos:start="303:62" pos:end="303:67">PRIu32</name> <literal type="string" pos:start="303:69" pos:end="303:72">"\n"</literal></expr></argument>,

                              <argument pos:start="305:31" pos:end="305:36"><expr pos:start="305:31" pos:end="305:36"><name pos:start="305:31" pos:end="305:36">region</name></expr></argument>, <argument pos:start="305:39" pos:end="305:57"><expr pos:start="305:39" pos:end="305:57"><name pos:start="305:39" pos:end="305:57"><name pos:start="305:39" pos:end="305:41">cpu</name><operator pos:start="305:42" pos:end="305:43">-&gt;</operator><name pos:start="305:44" pos:end="305:57">pmsav7_dregion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="307:17" pos:end="307:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:41"><expr pos:start="311:13" pos:end="311:40"><name pos:start="311:13" pos:end="311:31"><name pos:start="311:13" pos:end="311:15">cpu</name><operator pos:start="311:16" pos:end="311:17">-&gt;</operator><name pos:start="311:18" pos:end="311:20">env</name><operator pos:start="311:21" pos:end="311:21">.</operator><name pos:start="311:22" pos:end="311:27">pmsav7</name><operator pos:start="311:28" pos:end="311:28">.</operator><name pos:start="311:29" pos:end="311:31">rnr</name></name> <operator pos:start="311:33" pos:end="311:33">=</operator> <name pos:start="311:35" pos:end="311:40">region</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="313:11" pos:end="317:9">else <block pos:start="313:16" pos:end="317:9">{<block_content pos:start="315:13" pos:end="315:41">

            <expr_stmt pos:start="315:13" pos:end="315:41"><expr pos:start="315:13" pos:end="315:40"><name pos:start="315:13" pos:end="315:18">region</name> <operator pos:start="315:20" pos:end="315:20">=</operator> <name pos:start="315:22" pos:end="315:40"><name pos:start="315:22" pos:end="315:24">cpu</name><operator pos:start="315:25" pos:end="315:26">-&gt;</operator><name pos:start="315:27" pos:end="315:29">env</name><operator pos:start="315:30" pos:end="315:30">.</operator><name pos:start="315:31" pos:end="315:36">pmsav7</name><operator pos:start="315:37" pos:end="315:37">.</operator><name pos:start="315:38" pos:end="315:40">rnr</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="321:9" pos:end="325:9"><if pos:start="321:9" pos:end="325:9">if <condition pos:start="321:12" pos:end="321:42">(<expr pos:start="321:13" pos:end="321:41"><name pos:start="321:13" pos:end="321:18">region</name> <operator pos:start="321:20" pos:end="321:21">&gt;=</operator> <name pos:start="321:23" pos:end="321:41"><name pos:start="321:23" pos:end="321:25">cpu</name><operator pos:start="321:26" pos:end="321:27">-&gt;</operator><name pos:start="321:28" pos:end="321:41">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="321:44" pos:end="325:9">{<block_content pos:start="323:13" pos:end="323:19">

            <return pos:start="323:13" pos:end="323:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="329:9" pos:end="329:54"><expr pos:start="329:9" pos:end="329:53"><name pos:start="329:9" pos:end="329:37"><name pos:start="329:9" pos:end="329:11">cpu</name><operator pos:start="329:12" pos:end="329:13">-&gt;</operator><name pos:start="329:14" pos:end="329:16">env</name><operator pos:start="329:17" pos:end="329:17">.</operator><name pos:start="329:18" pos:end="329:23">pmsav7</name><operator pos:start="329:24" pos:end="329:24">.</operator><name pos:start="329:25" pos:end="329:29">drbar</name><index pos:start="329:30" pos:end="329:37">[<expr pos:start="329:31" pos:end="329:36"><name pos:start="329:31" pos:end="329:36">region</name></expr>]</index></name> <operator pos:start="329:39" pos:end="329:39">=</operator> <name pos:start="329:41" pos:end="329:45">value</name> <operator pos:start="329:47" pos:end="329:47">&amp;</operator> <operator pos:start="329:49" pos:end="329:49">~</operator><literal type="number" pos:start="329:50" pos:end="329:53">0x1f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:28"><expr pos:start="331:9" pos:end="331:27"><call pos:start="331:9" pos:end="331:27"><name pos:start="331:9" pos:end="331:17">tlb_flush</name><argument_list pos:start="331:18" pos:end="331:27">(<argument pos:start="331:19" pos:end="331:26"><expr pos:start="331:19" pos:end="331:26"><call pos:start="331:19" pos:end="331:26"><name pos:start="331:19" pos:end="331:21">CPU</name><argument_list pos:start="331:22" pos:end="331:26">(<argument pos:start="331:23" pos:end="331:25"><expr pos:start="331:23" pos:end="331:25"><name pos:start="331:23" pos:end="331:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="333:9" pos:end="333:14">break;</break>

    </block_content>}</block>

    <case pos:start="337:5" pos:end="337:15">case <expr pos:start="337:10" pos:end="337:14"><literal type="number" pos:start="337:10" pos:end="337:14">0xda0</literal></expr>:</case> <comment type="block" pos:start="337:17" pos:end="337:52">/* MPU_RASR (v7M), MPU_RLAR (v8M) */</comment>

    <case pos:start="339:5" pos:end="339:15">case <expr pos:start="339:10" pos:end="339:14"><literal type="number" pos:start="339:10" pos:end="339:14">0xda8</literal></expr>:</case> <comment type="block" pos:start="339:17" pos:end="339:58">/* MPU_RASR_A1 (v7M), MPU_RLAR_A1 (v8M) */</comment>

    <case pos:start="341:5" pos:end="341:15">case <expr pos:start="341:10" pos:end="341:14"><literal type="number" pos:start="341:10" pos:end="341:14">0xdb0</literal></expr>:</case> <comment type="block" pos:start="341:17" pos:end="341:58">/* MPU_RASR_A2 (v7M), MPU_RLAR_A2 (v8M) */</comment>

    <case pos:start="343:5" pos:end="343:15">case <expr pos:start="343:10" pos:end="343:14"><literal type="number" pos:start="343:10" pos:end="343:14">0xdb8</literal></expr>:</case> <comment type="block" pos:start="343:17" pos:end="343:58">/* MPU_RASR_A3 (v7M), MPU_RLAR_A3 (v8M) */</comment>

    <block pos:start="345:5" pos:end="405:5">{<block_content pos:start="347:9" pos:end="403:14">

        <decl_stmt pos:start="347:9" pos:end="347:41"><decl pos:start="347:9" pos:end="347:40"><type pos:start="347:9" pos:end="347:11"><name pos:start="347:9" pos:end="347:11">int</name></type> <name pos:start="347:13" pos:end="347:18">region</name> <init pos:start="347:20" pos:end="347:40">= <expr pos:start="347:22" pos:end="347:40"><name pos:start="347:22" pos:end="347:40"><name pos:start="347:22" pos:end="347:24">cpu</name><operator pos:start="347:25" pos:end="347:26">-&gt;</operator><name pos:start="347:27" pos:end="347:29">env</name><operator pos:start="347:30" pos:end="347:30">.</operator><name pos:start="347:31" pos:end="347:36">pmsav7</name><operator pos:start="347:37" pos:end="347:37">.</operator><name pos:start="347:38" pos:end="347:40">rnr</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="351:9" pos:end="385:9"><if pos:start="351:9" pos:end="385:9">if <condition pos:start="351:12" pos:end="351:51">(<expr pos:start="351:13" pos:end="351:50"><call pos:start="351:13" pos:end="351:50"><name pos:start="351:13" pos:end="351:23">arm_feature</name><argument_list pos:start="351:24" pos:end="351:50">(<argument pos:start="351:25" pos:end="351:33"><expr pos:start="351:25" pos:end="351:33"><operator pos:start="351:25" pos:end="351:25">&amp;</operator><name pos:start="351:26" pos:end="351:33"><name pos:start="351:26" pos:end="351:28">cpu</name><operator pos:start="351:29" pos:end="351:30">-&gt;</operator><name pos:start="351:31" pos:end="351:33">env</name></name></expr></argument>, <argument pos:start="351:36" pos:end="351:49"><expr pos:start="351:36" pos:end="351:49"><name pos:start="351:36" pos:end="351:49">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="351:53" pos:end="385:9">{<block_content pos:start="361:13" pos:end="383:19">

            <comment type="block" pos:start="353:13" pos:end="359:15">/* PMSAv8M handling of the aliases is different from v7M:

             * aliases A1, A2, A3 override the low two bits of the region

             * number in MPU_RNR.

             */</comment>

            <decl_stmt pos:start="361:13" pos:end="361:47"><decl pos:start="361:13" pos:end="361:46"><type pos:start="361:13" pos:end="361:15"><name pos:start="361:13" pos:end="361:15">int</name></type> <name pos:start="361:17" pos:end="361:23">aliasno</name> <init pos:start="361:25" pos:end="361:46">= <expr pos:start="361:27" pos:end="361:46"><operator pos:start="361:27" pos:end="361:27">(</operator><name pos:start="361:28" pos:end="361:33">offset</name> <operator pos:start="361:35" pos:end="361:35">-</operator> <literal type="number" pos:start="361:37" pos:end="361:41">0xd9c</literal><operator pos:start="361:42" pos:end="361:42">)</operator> <operator pos:start="361:44" pos:end="361:44">/</operator> <literal type="number" pos:start="361:46" pos:end="361:46">8</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="361:49" pos:end="361:58">/* 0..3 */</comment>



            <expr_stmt pos:start="365:13" pos:end="365:41"><expr pos:start="365:13" pos:end="365:40"><name pos:start="365:13" pos:end="365:18">region</name> <operator pos:start="365:20" pos:end="365:20">=</operator> <name pos:start="365:22" pos:end="365:40"><name pos:start="365:22" pos:end="365:24">cpu</name><operator pos:start="365:25" pos:end="365:26">-&gt;</operator><name pos:start="365:27" pos:end="365:29">env</name><operator pos:start="365:30" pos:end="365:30">.</operator><name pos:start="365:31" pos:end="365:36">pmsav7</name><operator pos:start="365:37" pos:end="365:37">.</operator><name pos:start="365:38" pos:end="365:40">rnr</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="367:13" pos:end="371:13"><if pos:start="367:13" pos:end="371:13">if <condition pos:start="367:16" pos:end="367:24">(<expr pos:start="367:17" pos:end="367:23"><name pos:start="367:17" pos:end="367:23">aliasno</name></expr>)</condition> <block pos:start="367:26" pos:end="371:13">{<block_content pos:start="369:17" pos:end="369:58">

                <expr_stmt pos:start="369:17" pos:end="369:58"><expr pos:start="369:17" pos:end="369:57"><name pos:start="369:17" pos:end="369:22">region</name> <operator pos:start="369:24" pos:end="369:24">=</operator> <call pos:start="369:26" pos:end="369:57"><name pos:start="369:26" pos:end="369:34">deposit32</name><argument_list pos:start="369:35" pos:end="369:57">(<argument pos:start="369:36" pos:end="369:41"><expr pos:start="369:36" pos:end="369:41"><name pos:start="369:36" pos:end="369:41">region</name></expr></argument>, <argument pos:start="369:44" pos:end="369:44"><expr pos:start="369:44" pos:end="369:44"><literal type="number" pos:start="369:44" pos:end="369:44">0</literal></expr></argument>, <argument pos:start="369:47" pos:end="369:47"><expr pos:start="369:47" pos:end="369:47"><literal type="number" pos:start="369:47" pos:end="369:47">2</literal></expr></argument>, <argument pos:start="369:50" pos:end="369:56"><expr pos:start="369:50" pos:end="369:56"><name pos:start="369:50" pos:end="369:56">aliasno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="373:13" pos:end="377:13"><if pos:start="373:13" pos:end="377:13">if <condition pos:start="373:16" pos:end="373:46">(<expr pos:start="373:17" pos:end="373:45"><name pos:start="373:17" pos:end="373:22">region</name> <operator pos:start="373:24" pos:end="373:25">&gt;=</operator> <name pos:start="373:27" pos:end="373:45"><name pos:start="373:27" pos:end="373:29">cpu</name><operator pos:start="373:30" pos:end="373:31">-&gt;</operator><name pos:start="373:32" pos:end="373:45">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="373:48" pos:end="377:13">{<block_content pos:start="375:17" pos:end="375:23">

                <return pos:start="375:17" pos:end="375:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="379:13" pos:end="379:63"><expr pos:start="379:13" pos:end="379:62"><name pos:start="379:13" pos:end="379:54"><name pos:start="379:13" pos:end="379:15">cpu</name><operator pos:start="379:16" pos:end="379:17">-&gt;</operator><name pos:start="379:18" pos:end="379:20">env</name><operator pos:start="379:21" pos:end="379:21">.</operator><name pos:start="379:22" pos:end="379:27">pmsav8</name><operator pos:start="379:28" pos:end="379:28">.</operator><name pos:start="379:29" pos:end="379:32">rlar</name><index pos:start="379:33" pos:end="379:46">[<expr pos:start="379:34" pos:end="379:45"><name pos:start="379:34" pos:end="379:45"><name pos:start="379:34" pos:end="379:38">attrs</name><operator pos:start="379:39" pos:end="379:39">.</operator><name pos:start="379:40" pos:end="379:45">secure</name></name></expr>]</index><index pos:start="379:47" pos:end="379:54">[<expr pos:start="379:48" pos:end="379:53"><name pos:start="379:48" pos:end="379:53">region</name></expr>]</index></name> <operator pos:start="379:56" pos:end="379:56">=</operator> <name pos:start="379:58" pos:end="379:62">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="381:32"><expr pos:start="381:13" pos:end="381:31"><call pos:start="381:13" pos:end="381:31"><name pos:start="381:13" pos:end="381:21">tlb_flush</name><argument_list pos:start="381:22" pos:end="381:31">(<argument pos:start="381:23" pos:end="381:30"><expr pos:start="381:23" pos:end="381:30"><call pos:start="381:23" pos:end="381:30"><name pos:start="381:23" pos:end="381:25">CPU</name><argument_list pos:start="381:26" pos:end="381:30">(<argument pos:start="381:27" pos:end="381:29"><expr pos:start="381:27" pos:end="381:29"><name pos:start="381:27" pos:end="381:29">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="383:13" pos:end="383:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="389:9" pos:end="393:9"><if pos:start="389:9" pos:end="393:9">if <condition pos:start="389:12" pos:end="389:42">(<expr pos:start="389:13" pos:end="389:41"><name pos:start="389:13" pos:end="389:18">region</name> <operator pos:start="389:20" pos:end="389:21">&gt;=</operator> <name pos:start="389:23" pos:end="389:41"><name pos:start="389:23" pos:end="389:25">cpu</name><operator pos:start="389:26" pos:end="389:27">-&gt;</operator><name pos:start="389:28" pos:end="389:41">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="389:44" pos:end="393:9">{<block_content pos:start="391:13" pos:end="391:19">

            <return pos:start="391:13" pos:end="391:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="397:9" pos:end="397:54"><expr pos:start="397:9" pos:end="397:53"><name pos:start="397:9" pos:end="397:36"><name pos:start="397:9" pos:end="397:11">cpu</name><operator pos:start="397:12" pos:end="397:13">-&gt;</operator><name pos:start="397:14" pos:end="397:16">env</name><operator pos:start="397:17" pos:end="397:17">.</operator><name pos:start="397:18" pos:end="397:23">pmsav7</name><operator pos:start="397:24" pos:end="397:24">.</operator><name pos:start="397:25" pos:end="397:28">drsr</name><index pos:start="397:29" pos:end="397:36">[<expr pos:start="397:30" pos:end="397:35"><name pos:start="397:30" pos:end="397:35">region</name></expr>]</index></name> <operator pos:start="397:38" pos:end="397:38">=</operator> <name pos:start="397:40" pos:end="397:44">value</name> <operator pos:start="397:46" pos:end="397:46">&amp;</operator> <literal type="number" pos:start="397:48" pos:end="397:53">0xff3f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:63"><expr pos:start="399:9" pos:end="399:62"><name pos:start="399:9" pos:end="399:37"><name pos:start="399:9" pos:end="399:11">cpu</name><operator pos:start="399:12" pos:end="399:13">-&gt;</operator><name pos:start="399:14" pos:end="399:16">env</name><operator pos:start="399:17" pos:end="399:17">.</operator><name pos:start="399:18" pos:end="399:23">pmsav7</name><operator pos:start="399:24" pos:end="399:24">.</operator><name pos:start="399:25" pos:end="399:29">dracr</name><index pos:start="399:30" pos:end="399:37">[<expr pos:start="399:31" pos:end="399:36"><name pos:start="399:31" pos:end="399:36">region</name></expr>]</index></name> <operator pos:start="399:39" pos:end="399:39">=</operator> <operator pos:start="399:41" pos:end="399:41">(</operator><name pos:start="399:42" pos:end="399:46">value</name> <operator pos:start="399:48" pos:end="399:49">&gt;&gt;</operator> <literal type="number" pos:start="399:51" pos:end="399:52">16</literal><operator pos:start="399:53" pos:end="399:53">)</operator> <operator pos:start="399:55" pos:end="399:55">&amp;</operator> <literal type="number" pos:start="399:57" pos:end="399:62">0x173f</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:28"><expr pos:start="401:9" pos:end="401:27"><call pos:start="401:9" pos:end="401:27"><name pos:start="401:9" pos:end="401:17">tlb_flush</name><argument_list pos:start="401:18" pos:end="401:27">(<argument pos:start="401:19" pos:end="401:26"><expr pos:start="401:19" pos:end="401:26"><call pos:start="401:19" pos:end="401:26"><name pos:start="401:19" pos:end="401:21">CPU</name><argument_list pos:start="401:22" pos:end="401:26">(<argument pos:start="401:23" pos:end="401:25"><expr pos:start="401:23" pos:end="401:25"><name pos:start="401:23" pos:end="401:25">cpu</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="403:9" pos:end="403:14">break;</break>

    </block_content>}</block>

    <case pos:start="407:5" pos:end="407:15">case <expr pos:start="407:10" pos:end="407:14"><literal type="number" pos:start="407:10" pos:end="407:14">0xdc0</literal></expr>:</case> <comment type="block" pos:start="407:17" pos:end="407:31">/* MPU_MAIR0 */</comment>

        <if_stmt pos:start="409:9" pos:end="413:9"><if pos:start="409:9" pos:end="413:9">if <condition pos:start="409:12" pos:end="409:52">(<expr pos:start="409:13" pos:end="409:51"><operator pos:start="409:13" pos:end="409:13">!</operator><call pos:start="409:14" pos:end="409:51"><name pos:start="409:14" pos:end="409:24">arm_feature</name><argument_list pos:start="409:25" pos:end="409:51">(<argument pos:start="409:26" pos:end="409:34"><expr pos:start="409:26" pos:end="409:34"><operator pos:start="409:26" pos:end="409:26">&amp;</operator><name pos:start="409:27" pos:end="409:34"><name pos:start="409:27" pos:end="409:29">cpu</name><operator pos:start="409:30" pos:end="409:31">-&gt;</operator><name pos:start="409:32" pos:end="409:34">env</name></name></expr></argument>, <argument pos:start="409:37" pos:end="409:50"><expr pos:start="409:37" pos:end="409:50"><name pos:start="409:37" pos:end="409:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="409:54" pos:end="413:9">{<block_content pos:start="411:13" pos:end="411:28">

            <goto pos:start="411:13" pos:end="411:28">goto <name pos:start="411:18" pos:end="411:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="415:9" pos:end="421:9"><if pos:start="415:9" pos:end="421:9">if <condition pos:start="415:12" pos:end="415:32">(<expr pos:start="415:13" pos:end="415:31"><name pos:start="415:13" pos:end="415:31"><name pos:start="415:13" pos:end="415:15">cpu</name><operator pos:start="415:16" pos:end="415:17">-&gt;</operator><name pos:start="415:18" pos:end="415:31">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="415:34" pos:end="421:9">{<block_content pos:start="419:13" pos:end="419:56">

            <comment type="block" pos:start="417:13" pos:end="417:68">/* Register is RES0 if no MPU regions are implemented */</comment>

            <expr_stmt pos:start="419:13" pos:end="419:56"><expr pos:start="419:13" pos:end="419:55"><name pos:start="419:13" pos:end="419:47"><name pos:start="419:13" pos:end="419:15">cpu</name><operator pos:start="419:16" pos:end="419:17">-&gt;</operator><name pos:start="419:18" pos:end="419:20">env</name><operator pos:start="419:21" pos:end="419:21">.</operator><name pos:start="419:22" pos:end="419:27">pmsav8</name><operator pos:start="419:28" pos:end="419:28">.</operator><name pos:start="419:29" pos:end="419:33">mair0</name><index pos:start="419:34" pos:end="419:47">[<expr pos:start="419:35" pos:end="419:46"><name pos:start="419:35" pos:end="419:46"><name pos:start="419:35" pos:end="419:39">attrs</name><operator pos:start="419:40" pos:end="419:40">.</operator><name pos:start="419:41" pos:end="419:46">secure</name></name></expr>]</index></name> <operator pos:start="419:49" pos:end="419:49">=</operator> <name pos:start="419:51" pos:end="419:55">value</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="423:9" pos:end="427:11">/* We don't need to do anything else because memory attributes

         * only affect cacheability, and we don't implement caching.

         */</comment>

        <break pos:start="429:9" pos:end="429:14">break;</break>

    <case pos:start="431:5" pos:end="431:15">case <expr pos:start="431:10" pos:end="431:14"><literal type="number" pos:start="431:10" pos:end="431:14">0xdc4</literal></expr>:</case> <comment type="block" pos:start="431:17" pos:end="431:31">/* MPU_MAIR1 */</comment>

        <if_stmt pos:start="433:9" pos:end="437:9"><if pos:start="433:9" pos:end="437:9">if <condition pos:start="433:12" pos:end="433:52">(<expr pos:start="433:13" pos:end="433:51"><operator pos:start="433:13" pos:end="433:13">!</operator><call pos:start="433:14" pos:end="433:51"><name pos:start="433:14" pos:end="433:24">arm_feature</name><argument_list pos:start="433:25" pos:end="433:51">(<argument pos:start="433:26" pos:end="433:34"><expr pos:start="433:26" pos:end="433:34"><operator pos:start="433:26" pos:end="433:26">&amp;</operator><name pos:start="433:27" pos:end="433:34"><name pos:start="433:27" pos:end="433:29">cpu</name><operator pos:start="433:30" pos:end="433:31">-&gt;</operator><name pos:start="433:32" pos:end="433:34">env</name></name></expr></argument>, <argument pos:start="433:37" pos:end="433:50"><expr pos:start="433:37" pos:end="433:50"><name pos:start="433:37" pos:end="433:50">ARM_FEATURE_V8</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="433:54" pos:end="437:9">{<block_content pos:start="435:13" pos:end="435:28">

            <goto pos:start="435:13" pos:end="435:28">goto <name pos:start="435:18" pos:end="435:27">bad_offset</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="439:9" pos:end="445:9"><if pos:start="439:9" pos:end="445:9">if <condition pos:start="439:12" pos:end="439:32">(<expr pos:start="439:13" pos:end="439:31"><name pos:start="439:13" pos:end="439:31"><name pos:start="439:13" pos:end="439:15">cpu</name><operator pos:start="439:16" pos:end="439:17">-&gt;</operator><name pos:start="439:18" pos:end="439:31">pmsav7_dregion</name></name></expr>)</condition> <block pos:start="439:34" pos:end="445:9">{<block_content pos:start="443:13" pos:end="443:56">

            <comment type="block" pos:start="441:13" pos:end="441:68">/* Register is RES0 if no MPU regions are implemented */</comment>

            <expr_stmt pos:start="443:13" pos:end="443:56"><expr pos:start="443:13" pos:end="443:55"><name pos:start="443:13" pos:end="443:47"><name pos:start="443:13" pos:end="443:15">cpu</name><operator pos:start="443:16" pos:end="443:17">-&gt;</operator><name pos:start="443:18" pos:end="443:20">env</name><operator pos:start="443:21" pos:end="443:21">.</operator><name pos:start="443:22" pos:end="443:27">pmsav8</name><operator pos:start="443:28" pos:end="443:28">.</operator><name pos:start="443:29" pos:end="443:33">mair1</name><index pos:start="443:34" pos:end="443:47">[<expr pos:start="443:35" pos:end="443:46"><name pos:start="443:35" pos:end="443:46"><name pos:start="443:35" pos:end="443:39">attrs</name><operator pos:start="443:40" pos:end="443:40">.</operator><name pos:start="443:41" pos:end="443:46">secure</name></name></expr>]</index></name> <operator pos:start="443:49" pos:end="443:49">=</operator> <name pos:start="443:51" pos:end="443:55">value</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="447:9" pos:end="451:11">/* We don't need to do anything else because memory attributes

         * only affect cacheability, and we don't implement caching.

         */</comment>

        <break pos:start="453:9" pos:end="453:14">break;</break>

    <case pos:start="455:5" pos:end="455:15">case <expr pos:start="455:10" pos:end="455:14"><literal type="number" pos:start="455:10" pos:end="455:14">0xf00</literal></expr>:</case> <comment type="block" pos:start="455:17" pos:end="455:59">/* Software Triggered Interrupt Register */</comment>

    <block pos:start="457:5" pos:end="469:5">{<block_content pos:start="459:9" pos:end="467:14">

        <decl_stmt pos:start="459:9" pos:end="459:54"><decl pos:start="459:9" pos:end="459:53"><type pos:start="459:9" pos:end="459:11"><name pos:start="459:9" pos:end="459:11">int</name></type> <name pos:start="459:13" pos:end="459:18">excnum</name> <init pos:start="459:20" pos:end="459:53">= <expr pos:start="459:22" pos:end="459:53"><operator pos:start="459:22" pos:end="459:22">(</operator><name pos:start="459:23" pos:end="459:27">value</name> <operator pos:start="459:29" pos:end="459:29">&amp;</operator> <literal type="number" pos:start="459:31" pos:end="459:35">0x1ff</literal><operator pos:start="459:36" pos:end="459:36">)</operator> <operator pos:start="459:38" pos:end="459:38">+</operator> <name pos:start="459:40" pos:end="459:53">NVIC_FIRST_IRQ</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="461:9" pos:end="465:9"><if pos:start="461:9" pos:end="465:9">if <condition pos:start="461:12" pos:end="461:32">(<expr pos:start="461:13" pos:end="461:31"><name pos:start="461:13" pos:end="461:18">excnum</name> <operator pos:start="461:20" pos:end="461:20">&lt;</operator> <name pos:start="461:22" pos:end="461:31"><name pos:start="461:22" pos:end="461:22">s</name><operator pos:start="461:23" pos:end="461:24">-&gt;</operator><name pos:start="461:25" pos:end="461:31">num_irq</name></name></expr>)</condition> <block pos:start="461:34" pos:end="465:9">{<block_content pos:start="463:13" pos:end="463:47">

            <expr_stmt pos:start="463:13" pos:end="463:47"><expr pos:start="463:13" pos:end="463:46"><call pos:start="463:13" pos:end="463:46"><name pos:start="463:13" pos:end="463:35">armv7m_nvic_set_pending</name><argument_list pos:start="463:36" pos:end="463:46">(<argument pos:start="463:37" pos:end="463:37"><expr pos:start="463:37" pos:end="463:37"><name pos:start="463:37" pos:end="463:37">s</name></expr></argument>, <argument pos:start="463:40" pos:end="463:45"><expr pos:start="463:40" pos:end="463:45"><name pos:start="463:40" pos:end="463:45">excnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="467:9" pos:end="467:14">break;</break>

    </block_content>}</block>

    <default pos:start="471:5" pos:end="471:12">default:</default>

    <label pos:start="473:5" pos:end="473:15"><name pos:start="473:5" pos:end="473:14">bad_offset</name>:</label>

        <expr_stmt pos:start="475:9" pos:end="477:63"><expr pos:start="475:9" pos:end="477:62"><call pos:start="475:9" pos:end="477:62"><name pos:start="475:9" pos:end="475:21">qemu_log_mask</name><argument_list pos:start="475:22" pos:end="477:62">(<argument pos:start="475:23" pos:end="475:37"><expr pos:start="475:23" pos:end="475:37"><name pos:start="475:23" pos:end="475:37">LOG_GUEST_ERROR</name></expr></argument>,

                      <argument pos:start="477:23" pos:end="477:53"><expr pos:start="477:23" pos:end="477:53"><literal type="string" pos:start="477:23" pos:end="477:53">"NVIC: Bad write offset 0x%x\n"</literal></expr></argument>, <argument pos:start="477:56" pos:end="477:61"><expr pos:start="477:56" pos:end="477:61"><name pos:start="477:56" pos:end="477:61">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
