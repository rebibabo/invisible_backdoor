<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6009.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">spapr_vio_busdev_init</name><parameter_list pos:start="1:33" pos:end="1:51">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:44">DeviceState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">qdev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:25">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">VIOsPAPRDevice</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">dev</name> <init pos:start="5:25" pos:end="5:48">= <expr pos:start="5:27" pos:end="5:48"><operator pos:start="5:27" pos:end="5:27">(</operator><name pos:start="5:28" pos:end="5:41">VIOsPAPRDevice</name> <operator pos:start="5:43" pos:end="5:43">*</operator><operator pos:start="5:44" pos:end="5:44">)</operator><name pos:start="5:45" pos:end="5:48">qdev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">VIOsPAPRDeviceClass</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:27">pc</name> <init pos:start="7:29" pos:end="7:61">= <expr pos:start="7:31" pos:end="7:61"><call pos:start="7:31" pos:end="7:61"><name pos:start="7:31" pos:end="7:56">VIO_SPAPR_DEVICE_GET_CLASS</name><argument_list pos:start="7:57" pos:end="7:61">(<argument pos:start="7:58" pos:end="7:60"><expr pos:start="7:58" pos:end="7:60"><name pos:start="7:58" pos:end="7:60">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">liobn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:12">id</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="61:5"><if pos:start="15:5" pos:end="47:5">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:11">dev</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:16">reg</name></name> <operator pos:start="15:18" pos:end="15:19">!=</operator> <operator pos:start="15:21" pos:end="15:21">-</operator><literal type="number" pos:start="15:22" pos:end="15:22">1</literal></expr>)</condition> <block pos:start="15:25" pos:end="47:5">{<block_content pos:start="29:9" pos:end="45:9">

        <comment type="block" pos:start="17:9" pos:end="27:11">/*

         * Explicitly assigned address, just verify that no-one else

         * is using it.  other mechanism). We have to open code this

         * rather than using spapr_vio_find_by_reg() because sdev

         * itself is already in the list.

         */</comment>

        <decl_stmt pos:start="29:9" pos:end="29:50"><decl pos:start="29:9" pos:end="29:49"><type pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:22">VIOsPAPRDevice</name> <modifier pos:start="29:24" pos:end="29:24">*</modifier></type><name pos:start="29:25" pos:end="29:29">other</name> <init pos:start="29:31" pos:end="29:49">= <expr pos:start="29:33" pos:end="29:49"><call pos:start="29:33" pos:end="29:49"><name pos:start="29:33" pos:end="29:44">reg_conflict</name><argument_list pos:start="29:45" pos:end="29:49">(<argument pos:start="29:46" pos:end="29:48"><expr pos:start="29:46" pos:end="29:48"><name pos:start="29:46" pos:end="29:48">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="33:9" pos:end="45:9"><if pos:start="33:9" pos:end="45:9">if <condition pos:start="33:12" pos:end="33:18">(<expr pos:start="33:13" pos:end="33:17"><name pos:start="33:13" pos:end="33:17">other</name></expr>)</condition> <block pos:start="33:20" pos:end="45:9">{<block_content pos:start="35:13" pos:end="43:22">

            <expr_stmt pos:start="35:13" pos:end="41:30"><expr pos:start="35:13" pos:end="41:29"><call pos:start="35:13" pos:end="41:29"><name pos:start="35:13" pos:end="35:19">fprintf</name><argument_list pos:start="35:20" pos:end="41:29">(<argument pos:start="35:21" pos:end="35:26"><expr pos:start="35:21" pos:end="35:26"><name pos:start="35:21" pos:end="35:26">stderr</name></expr></argument>, <argument pos:start="35:29" pos:end="35:78"><expr pos:start="35:29" pos:end="35:78"><literal type="string" pos:start="35:29" pos:end="35:78">"vio: %s and %s devices conflict at address %#x\n"</literal></expr></argument>,

                    <argument pos:start="37:21" pos:end="37:53"><expr pos:start="37:21" pos:end="37:53"><call pos:start="37:21" pos:end="37:53"><name pos:start="37:21" pos:end="37:39">object_get_typename</name><argument_list pos:start="37:40" pos:end="37:53">(<argument pos:start="37:41" pos:end="37:52"><expr pos:start="37:41" pos:end="37:52"><call pos:start="37:41" pos:end="37:52"><name pos:start="37:41" pos:end="37:46">OBJECT</name><argument_list pos:start="37:47" pos:end="37:52">(<argument pos:start="37:48" pos:end="37:51"><expr pos:start="37:48" pos:end="37:51"><name pos:start="37:48" pos:end="37:51">qdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="39:21" pos:end="39:61"><expr pos:start="39:21" pos:end="39:61"><call pos:start="39:21" pos:end="39:61"><name pos:start="39:21" pos:end="39:39">object_get_typename</name><argument_list pos:start="39:40" pos:end="39:61">(<argument pos:start="39:41" pos:end="39:60"><expr pos:start="39:41" pos:end="39:60"><call pos:start="39:41" pos:end="39:60"><name pos:start="39:41" pos:end="39:46">OBJECT</name><argument_list pos:start="39:47" pos:end="39:60">(<argument pos:start="39:48" pos:end="39:59"><expr pos:start="39:48" pos:end="39:59"><operator pos:start="39:48" pos:end="39:48">&amp;</operator><name pos:start="39:49" pos:end="39:59"><name pos:start="39:49" pos:end="39:53">other</name><operator pos:start="39:54" pos:end="39:55">-&gt;</operator><name pos:start="39:56" pos:end="39:59">qdev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="41:21" pos:end="41:28"><expr pos:start="41:21" pos:end="41:28"><name pos:start="41:21" pos:end="41:28"><name pos:start="41:21" pos:end="41:23">dev</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:28">reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:22">return <expr pos:start="43:20" pos:end="43:21"><operator pos:start="43:20" pos:end="43:20">-</operator><literal type="number" pos:start="43:21" pos:end="43:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="61:5">else <block pos:start="47:12" pos:end="61:5">{<block_content pos:start="51:9" pos:end="59:36">

        <comment type="block" pos:start="49:9" pos:end="49:39">/* Need to assign an address */</comment>

        <decl_stmt pos:start="51:9" pos:end="51:77"><decl pos:start="51:9" pos:end="51:76"><type pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:19">VIOsPAPRBus</name> <modifier pos:start="51:21" pos:end="51:21">*</modifier></type><name pos:start="51:22" pos:end="51:24">bus</name> <init pos:start="51:26" pos:end="51:76">= <expr pos:start="51:28" pos:end="51:76"><call pos:start="51:28" pos:end="51:76"><name pos:start="51:28" pos:end="51:36">DO_UPCAST</name><argument_list pos:start="51:37" pos:end="51:76">(<argument pos:start="51:38" pos:end="51:48"><expr pos:start="51:38" pos:end="51:48"><name pos:start="51:38" pos:end="51:48">VIOsPAPRBus</name></expr></argument>, <argument pos:start="51:51" pos:end="51:53"><expr pos:start="51:51" pos:end="51:53"><name pos:start="51:51" pos:end="51:53">bus</name></expr></argument>, <argument pos:start="51:56" pos:end="51:75"><expr pos:start="51:56" pos:end="51:75"><name pos:start="51:56" pos:end="51:75"><name pos:start="51:56" pos:end="51:58">dev</name><operator pos:start="51:59" pos:end="51:60">-&gt;</operator><name pos:start="51:61" pos:end="51:64">qdev</name><operator pos:start="51:65" pos:end="51:65">.</operator><name pos:start="51:66" pos:end="51:75">parent_bus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <do pos:start="55:9" pos:end="59:36">do <block pos:start="55:12" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:39">

            <expr_stmt pos:start="57:13" pos:end="57:39"><expr pos:start="57:13" pos:end="57:38"><name pos:start="57:13" pos:end="57:20"><name pos:start="57:13" pos:end="57:15">dev</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:20">reg</name></name> <operator pos:start="57:22" pos:end="57:22">=</operator> <name pos:start="57:24" pos:end="57:36"><name pos:start="57:24" pos:end="57:26">bus</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:36">next_reg</name></name><operator pos:start="57:37" pos:end="57:38">++</operator></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="59:17" pos:end="59:35">(<expr pos:start="59:18" pos:end="59:34"><call pos:start="59:18" pos:end="59:34"><name pos:start="59:18" pos:end="59:29">reg_conflict</name><argument_list pos:start="59:30" pos:end="59:34">(<argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><name pos:start="59:31" pos:end="59:33">dev</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:58">/* Don't overwrite ids assigned on the command line */</comment>

    <if_stmt pos:start="67:5" pos:end="79:5"><if pos:start="67:5" pos:end="79:5">if <condition pos:start="67:8" pos:end="67:22">(<expr pos:start="67:9" pos:end="67:21"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:21"><name pos:start="67:10" pos:end="67:12">dev</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:18">qdev</name><operator pos:start="67:19" pos:end="67:19">.</operator><name pos:start="67:20" pos:end="67:21">id</name></name></expr>)</condition> <block pos:start="67:24" pos:end="79:5">{<block_content pos:start="69:9" pos:end="77:26">

        <expr_stmt pos:start="69:9" pos:end="69:38"><expr pos:start="69:9" pos:end="69:37"><name pos:start="69:9" pos:end="69:10">id</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <call pos:start="69:14" pos:end="69:37"><name pos:start="69:14" pos:end="69:32">vio_format_dev_name</name><argument_list pos:start="69:33" pos:end="69:37">(<argument pos:start="69:34" pos:end="69:36"><expr pos:start="69:34" pos:end="69:36"><name pos:start="69:34" pos:end="69:36">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:16">(<expr pos:start="71:13" pos:end="71:15"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:15">id</name></expr>)</condition> <block pos:start="71:18" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:22">

            <return pos:start="73:13" pos:end="73:22">return <expr pos:start="73:20" pos:end="73:21"><operator pos:start="73:20" pos:end="73:20">-</operator><literal type="number" pos:start="73:21" pos:end="73:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:26"><expr pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:11">dev</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:17">qdev</name><operator pos:start="77:18" pos:end="77:18">.</operator><name pos:start="77:19" pos:end="77:20">id</name></name> <operator pos:start="77:22" pos:end="77:22">=</operator> <name pos:start="77:24" pos:end="77:25">id</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:72"><expr pos:start="83:5" pos:end="83:71"><name pos:start="83:5" pos:end="83:13"><name pos:start="83:5" pos:end="83:7">dev</name><operator pos:start="83:8" pos:end="83:9">-&gt;</operator><name pos:start="83:10" pos:end="83:13">qirq</name></name> <operator pos:start="83:15" pos:end="83:15">=</operator> <call pos:start="83:17" pos:end="83:71"><name pos:start="83:17" pos:end="83:34">spapr_allocate_msi</name><argument_list pos:start="83:35" pos:end="83:71">(<argument pos:start="83:36" pos:end="83:51"><expr pos:start="83:36" pos:end="83:51"><name pos:start="83:36" pos:end="83:51"><name pos:start="83:36" pos:end="83:38">dev</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:51">vio_irq_num</name></name></expr></argument>, <argument pos:start="83:54" pos:end="83:70"><expr pos:start="83:54" pos:end="83:70"><operator pos:start="83:54" pos:end="83:54">&amp;</operator><name pos:start="83:55" pos:end="83:70"><name pos:start="83:55" pos:end="83:57">dev</name><operator pos:start="83:58" pos:end="83:59">-&gt;</operator><name pos:start="83:60" pos:end="83:70">vio_irq_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:19">(<expr pos:start="85:9" pos:end="85:18"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:18"><name pos:start="85:10" pos:end="85:12">dev</name><operator pos:start="85:13" pos:end="85:14">-&gt;</operator><name pos:start="85:15" pos:end="85:18">qirq</name></name></expr>)</condition> <block pos:start="85:21" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:18">

        <return pos:start="87:9" pos:end="87:18">return <expr pos:start="87:16" pos:end="87:17"><operator pos:start="87:16" pos:end="87:16">-</operator><literal type="number" pos:start="87:17" pos:end="87:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:44"><expr pos:start="93:5" pos:end="93:43"><name pos:start="93:5" pos:end="93:9">liobn</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <name pos:start="93:13" pos:end="93:32">SPAPR_VIO_BASE_LIOBN</name> <operator pos:start="93:34" pos:end="93:34">|</operator> <name pos:start="93:36" pos:end="93:43"><name pos:start="93:36" pos:end="93:38">dev</name><operator pos:start="93:39" pos:end="93:40">-&gt;</operator><name pos:start="93:41" pos:end="93:43">reg</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:70"><expr pos:start="95:5" pos:end="95:69"><name pos:start="95:5" pos:end="95:12"><name pos:start="95:5" pos:end="95:7">dev</name><operator pos:start="95:8" pos:end="95:9">-&gt;</operator><name pos:start="95:10" pos:end="95:12">dma</name></name> <operator pos:start="95:14" pos:end="95:14">=</operator> <call pos:start="95:16" pos:end="95:69"><name pos:start="95:16" pos:end="95:40">spapr_tce_new_dma_context</name><argument_list pos:start="95:41" pos:end="95:69">(<argument pos:start="95:42" pos:end="95:46"><expr pos:start="95:42" pos:end="95:46"><name pos:start="95:42" pos:end="95:46">liobn</name></expr></argument>, <argument pos:start="95:49" pos:end="95:68"><expr pos:start="95:49" pos:end="95:68"><name pos:start="95:49" pos:end="95:68"><name pos:start="95:49" pos:end="95:50">pc</name><operator pos:start="95:51" pos:end="95:52">-&gt;</operator><name pos:start="95:53" pos:end="95:68">rtce_window_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="99:5" pos:end="99:25">return <expr pos:start="99:12" pos:end="99:24"><call pos:start="99:12" pos:end="99:24"><name pos:start="99:12" pos:end="99:19"><name pos:start="99:12" pos:end="99:13">pc</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:19">init</name></name><argument_list pos:start="99:20" pos:end="99:24">(<argument pos:start="99:21" pos:end="99:23"><expr pos:start="99:21" pos:end="99:23"><name pos:start="99:21" pos:end="99:23">dev</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
