<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6054.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">kvmclock_vm_state_change</name><parameter_list pos:start="1:37" pos:end="3:52">(<parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:41">void</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:49">opaque</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:62"><decl pos:start="1:52" pos:end="1:62"><type pos:start="1:52" pos:end="1:62"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:62">running</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:51"><decl pos:start="3:38" pos:end="3:51"><type pos:start="3:38" pos:end="3:51"><name pos:start="3:38" pos:end="3:45">RunState</name></type> <name pos:start="3:47" pos:end="3:51">state</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="125:1">{<block_content pos:start="7:5" pos:end="123:5">

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">KVMClockState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:29">= <expr pos:start="7:24" pos:end="7:29"><name pos:start="7:24" pos:end="7:29">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:79"><decl pos:start="11:5" pos:end="11:78"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:22">cap_clock_ctrl</name> <init pos:start="11:24" pos:end="11:78">= <expr pos:start="11:26" pos:end="11:78"><call pos:start="11:26" pos:end="11:78"><name pos:start="11:26" pos:end="11:44">kvm_check_extension</name><argument_list pos:start="11:45" pos:end="11:78">(<argument pos:start="11:46" pos:end="11:54"><expr pos:start="11:46" pos:end="11:54"><name pos:start="11:46" pos:end="11:54">kvm_state</name></expr></argument>, <argument pos:start="11:57" pos:end="11:77"><expr pos:start="11:57" pos:end="11:77"><name pos:start="11:57" pos:end="11:77">KVM_CAP_KVMCLOCK_CTRL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="123:5"><if pos:start="17:5" pos:end="77:5">if <condition pos:start="17:8" pos:end="17:16">(<expr pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:15">running</name></expr>)</condition> <block pos:start="17:18" pos:end="77:5">{<block_content pos:start="19:9" pos:end="75:9">

        <decl_stmt pos:start="19:9" pos:end="19:40"><decl pos:start="19:9" pos:end="19:39"><type pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:14">struct</name> <name pos:start="19:16" pos:end="19:29">kvm_clock_data</name></name></type> <name pos:start="19:31" pos:end="19:34">data</name> <init pos:start="19:36" pos:end="19:39">= <expr pos:start="19:38" pos:end="19:39"><block pos:start="19:38" pos:end="19:39">{}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:62"><decl pos:start="21:9" pos:end="21:61"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">uint64_t</name></type> <name pos:start="21:18" pos:end="21:34">time_at_migration</name> <init pos:start="21:36" pos:end="21:61">= <expr pos:start="21:38" pos:end="21:61"><call pos:start="21:38" pos:end="21:61"><name pos:start="21:38" pos:end="21:58">kvmclock_current_nsec</name><argument_list pos:start="21:59" pos:end="21:61">(<argument pos:start="21:60" pos:end="21:60"><expr pos:start="21:60" pos:end="21:60"><name pos:start="21:60" pos:end="21:60">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:31"><expr pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:22">clock_valid</name></name> <operator pos:start="25:24" pos:end="25:24">=</operator> <name pos:start="25:26" pos:end="25:30">false</name></expr>;</expr_stmt>



        <comment type="block" pos:start="29:9" pos:end="29:72">/* We can't rely on the migrated clock value, just discard it */</comment>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:30">(<expr pos:start="31:13" pos:end="31:29"><name pos:start="31:13" pos:end="31:29">time_at_migration</name></expr>)</condition> <block pos:start="31:32" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:41">

            <expr_stmt pos:start="33:13" pos:end="33:41"><expr pos:start="33:13" pos:end="33:40"><name pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:20">clock</name></name> <operator pos:start="33:22" pos:end="33:22">=</operator> <name pos:start="33:24" pos:end="33:40">time_at_migration</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:12">data</name><operator pos:start="39:13" pos:end="39:13">.</operator><name pos:start="39:14" pos:end="39:18">clock</name></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:29"><name pos:start="39:22" pos:end="39:22">s</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:29">clock</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:60"><expr pos:start="41:9" pos:end="41:59"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:59"><name pos:start="41:15" pos:end="41:26">kvm_vm_ioctl</name><argument_list pos:start="41:27" pos:end="41:59">(<argument pos:start="41:28" pos:end="41:36"><expr pos:start="41:28" pos:end="41:36"><name pos:start="41:28" pos:end="41:36">kvm_state</name></expr></argument>, <argument pos:start="41:39" pos:end="41:51"><expr pos:start="41:39" pos:end="41:51"><name pos:start="41:39" pos:end="41:51">KVM_SET_CLOCK</name></expr></argument>, <argument pos:start="41:54" pos:end="41:58"><expr pos:start="41:54" pos:end="41:58"><operator pos:start="41:54" pos:end="41:54">&amp;</operator><name pos:start="41:55" pos:end="41:58">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:20">(<expr pos:start="43:13" pos:end="43:19"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:17">&lt;</operator> <literal type="number" pos:start="43:19" pos:end="43:19">0</literal></expr>)</condition> <block pos:start="43:22" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:20">

            <expr_stmt pos:start="45:13" pos:end="45:73"><expr pos:start="45:13" pos:end="45:72"><call pos:start="45:13" pos:end="45:72"><name pos:start="45:13" pos:end="45:19">fprintf</name><argument_list pos:start="45:20" pos:end="45:72">(<argument pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:26"><name pos:start="45:21" pos:end="45:26">stderr</name></expr></argument>, <argument pos:start="45:29" pos:end="45:56"><expr pos:start="45:29" pos:end="45:56"><literal type="string" pos:start="45:29" pos:end="45:56">"KVM_SET_CLOCK failed: %s\n"</literal></expr></argument>, <argument pos:start="45:59" pos:end="45:71"><expr pos:start="45:59" pos:end="45:71"><call pos:start="45:59" pos:end="45:71"><name pos:start="45:59" pos:end="45:66">strerror</name><argument_list pos:start="45:67" pos:end="45:71">(<argument pos:start="45:68" pos:end="45:70"><expr pos:start="45:68" pos:end="45:70"><name pos:start="45:68" pos:end="45:70">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:20"><expr pos:start="47:13" pos:end="47:19"><call pos:start="47:13" pos:end="47:19"><name pos:start="47:13" pos:end="47:17">abort</name><argument_list pos:start="47:18" pos:end="47:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:28">(<expr pos:start="53:13" pos:end="53:27"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:27">cap_clock_ctrl</name></expr>)</condition> <block pos:start="53:30" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:19">

            <return pos:start="55:13" pos:end="55:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <macro pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:19">CPU_FOREACH</name><argument_list pos:start="59:20" pos:end="59:24">(<argument pos:start="59:21" pos:end="59:23">cpu</argument>)</argument_list></macro> <block pos:start="59:26" pos:end="75:9">{<block_content pos:start="61:13" pos:end="73:13">

            <expr_stmt pos:start="61:13" pos:end="61:60"><expr pos:start="61:13" pos:end="61:59"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:59"><name pos:start="61:19" pos:end="61:32">kvm_vcpu_ioctl</name><argument_list pos:start="61:33" pos:end="61:59">(<argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><name pos:start="61:34" pos:end="61:36">cpu</name></expr></argument>, <argument pos:start="61:39" pos:end="61:55"><expr pos:start="61:39" pos:end="61:55"><name pos:start="61:39" pos:end="61:55">KVM_KVMCLOCK_CTRL</name></expr></argument>, <argument pos:start="61:58" pos:end="61:58"><expr pos:start="61:58" pos:end="61:58"><literal type="number" pos:start="61:58" pos:end="61:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="73:13"><if pos:start="63:13" pos:end="73:13">if <condition pos:start="63:16" pos:end="63:20">(<expr pos:start="63:17" pos:end="63:19"><name pos:start="63:17" pos:end="63:19">ret</name></expr>)</condition> <block pos:start="63:22" pos:end="73:13">{<block_content pos:start="65:17" pos:end="71:23">

                <if_stmt pos:start="65:17" pos:end="69:17"><if pos:start="65:17" pos:end="69:17">if <condition pos:start="65:20" pos:end="65:35">(<expr pos:start="65:21" pos:end="65:34"><name pos:start="65:21" pos:end="65:23">ret</name> <operator pos:start="65:25" pos:end="65:26">!=</operator> <operator pos:start="65:28" pos:end="65:28">-</operator><name pos:start="65:29" pos:end="65:34">EINVAL</name></expr>)</condition> <block pos:start="65:37" pos:end="69:17">{<block_content pos:start="67:21" pos:end="67:74">

                    <expr_stmt pos:start="67:21" pos:end="67:74"><expr pos:start="67:21" pos:end="67:73"><call pos:start="67:21" pos:end="67:73"><name pos:start="67:21" pos:end="67:27">fprintf</name><argument_list pos:start="67:28" pos:end="67:73">(<argument pos:start="67:29" pos:end="67:34"><expr pos:start="67:29" pos:end="67:34"><name pos:start="67:29" pos:end="67:34">stderr</name></expr></argument>, <argument pos:start="67:37" pos:end="67:46"><expr pos:start="67:37" pos:end="67:46"><literal type="string" pos:start="67:37" pos:end="67:46">"%s: %s\n"</literal></expr></argument>, <argument pos:start="67:49" pos:end="67:56"><expr pos:start="67:49" pos:end="67:56"><name pos:start="67:49" pos:end="67:56">__func__</name></expr></argument>, <argument pos:start="67:59" pos:end="67:72"><expr pos:start="67:59" pos:end="67:72"><call pos:start="67:59" pos:end="67:72"><name pos:start="67:59" pos:end="67:66">strerror</name><argument_list pos:start="67:67" pos:end="67:72">(<argument pos:start="67:68" pos:end="67:71"><expr pos:start="67:68" pos:end="67:71"><operator pos:start="67:68" pos:end="67:68">-</operator><name pos:start="67:69" pos:end="67:71">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <return pos:start="71:17" pos:end="71:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="123:5">else <block pos:start="77:12" pos:end="123:5">{<block_content pos:start="79:9" pos:end="121:30">

        <decl_stmt pos:start="79:9" pos:end="79:35"><decl pos:start="79:9" pos:end="79:34"><type pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:14">struct</name> <name pos:start="79:16" pos:end="79:29">kvm_clock_data</name></name></type> <name pos:start="79:31" pos:end="79:34">data</name></decl>;</decl_stmt>

        <decl_stmt pos:start="81:9" pos:end="81:16"><decl pos:start="81:9" pos:end="81:15"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:15">ret</name></decl>;</decl_stmt>



        <if_stmt pos:start="85:9" pos:end="89:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:27">(<expr pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:26">clock_valid</name></name></expr>)</condition> <block pos:start="85:29" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:19">

            <return pos:start="87:13" pos:end="87:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:34"><expr pos:start="93:9" pos:end="93:33"><call pos:start="93:9" pos:end="93:33"><name pos:start="93:9" pos:end="93:31">kvm_synchronize_all_tsc</name><argument_list pos:start="93:32" pos:end="93:33">()</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:60"><expr pos:start="97:9" pos:end="97:59"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:59"><name pos:start="97:15" pos:end="97:26">kvm_vm_ioctl</name><argument_list pos:start="97:27" pos:end="97:59">(<argument pos:start="97:28" pos:end="97:36"><expr pos:start="97:28" pos:end="97:36"><name pos:start="97:28" pos:end="97:36">kvm_state</name></expr></argument>, <argument pos:start="97:39" pos:end="97:51"><expr pos:start="97:39" pos:end="97:51"><name pos:start="97:39" pos:end="97:51">KVM_GET_CLOCK</name></expr></argument>, <argument pos:start="97:54" pos:end="97:58"><expr pos:start="97:54" pos:end="97:58"><operator pos:start="97:54" pos:end="97:54">&amp;</operator><name pos:start="97:55" pos:end="97:58">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:20">(<expr pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">&lt;</operator> <literal type="number" pos:start="99:19" pos:end="99:19">0</literal></expr>)</condition> <block pos:start="99:22" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:20">

            <expr_stmt pos:start="101:13" pos:end="101:73"><expr pos:start="101:13" pos:end="101:72"><call pos:start="101:13" pos:end="101:72"><name pos:start="101:13" pos:end="101:19">fprintf</name><argument_list pos:start="101:20" pos:end="101:72">(<argument pos:start="101:21" pos:end="101:26"><expr pos:start="101:21" pos:end="101:26"><name pos:start="101:21" pos:end="101:26">stderr</name></expr></argument>, <argument pos:start="101:29" pos:end="101:56"><expr pos:start="101:29" pos:end="101:56"><literal type="string" pos:start="101:29" pos:end="101:56">"KVM_GET_CLOCK failed: %s\n"</literal></expr></argument>, <argument pos:start="101:59" pos:end="101:71"><expr pos:start="101:59" pos:end="101:71"><call pos:start="101:59" pos:end="101:71"><name pos:start="101:59" pos:end="101:66">strerror</name><argument_list pos:start="101:67" pos:end="101:71">(<argument pos:start="101:68" pos:end="101:70"><expr pos:start="101:68" pos:end="101:70"><name pos:start="101:68" pos:end="101:70">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:20"><expr pos:start="103:13" pos:end="103:19"><call pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:17">abort</name><argument_list pos:start="103:18" pos:end="103:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:30"><expr pos:start="107:9" pos:end="107:29"><name pos:start="107:9" pos:end="107:16"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:16">clock</name></name> <operator pos:start="107:18" pos:end="107:18">=</operator> <name pos:start="107:20" pos:end="107:29"><name pos:start="107:20" pos:end="107:23">data</name><operator pos:start="107:24" pos:end="107:24">.</operator><name pos:start="107:25" pos:end="107:29">clock</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="111:9" pos:end="119:11">/*

         * If the VM is stopped, declare the clock state valid to

         * avoid re-reading it on next vmsave (which would return

         * a different value). Will be reset when the VM is continued.

         */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:30"><expr pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:22"><name pos:start="121:9" pos:end="121:9">s</name><operator pos:start="121:10" pos:end="121:11">-&gt;</operator><name pos:start="121:12" pos:end="121:22">clock_valid</name></name> <operator pos:start="121:24" pos:end="121:24">=</operator> <name pos:start="121:26" pos:end="121:29">true</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
