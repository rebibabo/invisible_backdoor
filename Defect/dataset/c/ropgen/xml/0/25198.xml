<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25198.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:30">s390_pci_sclp_deconfigure</name><parameter_list pos:start="1:31" pos:end="1:42">(<parameter pos:start="1:32" pos:end="1:41"><decl pos:start="1:32" pos:end="1:41"><type pos:start="1:32" pos:end="1:37"><name pos:start="1:32" pos:end="1:35">SCCB</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:41">sccb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:50">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">PciCfgSccb</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:21">psccb</name> <init pos:start="5:23" pos:end="5:42">= <expr pos:start="5:25" pos:end="5:42"><operator pos:start="5:25" pos:end="5:25">(</operator><name pos:start="5:26" pos:end="5:35">PciCfgSccb</name> <operator pos:start="5:37" pos:end="5:37">*</operator><operator pos:start="5:38" pos:end="5:38">)</operator><name pos:start="5:39" pos:end="5:42">sccb</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="9:80"><decl pos:start="7:5" pos:end="9:79"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">S390PCIBusDevice</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:27">pbdev</name> <init pos:start="7:29" pos:end="9:79">= <expr pos:start="7:31" pos:end="9:79"><call pos:start="7:31" pos:end="9:79"><name pos:start="7:31" pos:end="7:54">s390_pci_find_dev_by_fid</name><argument_list pos:start="7:55" pos:end="9:79">(<argument pos:start="7:56" pos:end="7:69"><expr pos:start="7:56" pos:end="7:69"><call pos:start="7:56" pos:end="7:69"><name pos:start="7:56" pos:end="7:67">s390_get_phb</name><argument_list pos:start="7:68" pos:end="7:69">()</argument_list></call></expr></argument>,

                                                       <argument pos:start="9:56" pos:end="9:78"><expr pos:start="9:56" pos:end="9:78"><call pos:start="9:56" pos:end="9:78"><name pos:start="9:56" pos:end="9:66">be32_to_cpu</name><argument_list pos:start="9:67" pos:end="9:78">(<argument pos:start="9:68" pos:end="9:77"><expr pos:start="9:68" pos:end="9:77"><name pos:start="9:68" pos:end="9:77"><name pos:start="9:68" pos:end="9:72">psccb</name><operator pos:start="9:73" pos:end="9:74">-&gt;</operator><name pos:start="9:75" pos:end="9:77">aid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:15">rc</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:41">(<expr pos:start="15:9" pos:end="15:40"><call pos:start="15:9" pos:end="15:35"><name pos:start="15:9" pos:end="15:19">be16_to_cpu</name><argument_list pos:start="15:20" pos:end="15:35">(<argument pos:start="15:21" pos:end="15:34"><expr pos:start="15:21" pos:end="15:34"><name pos:start="15:21" pos:end="15:34"><name pos:start="15:21" pos:end="15:24">sccb</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:27">h</name><operator pos:start="15:28" pos:end="15:28">.</operator><name pos:start="15:29" pos:end="15:34">length</name></name></expr></argument>)</argument_list></call> <operator pos:start="15:37" pos:end="15:37">&lt;</operator> <literal type="number" pos:start="15:39" pos:end="15:40">16</literal></expr>)</condition> <block pos:start="15:43" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:17">

        <expr_stmt pos:start="17:9" pos:end="17:46"><expr pos:start="17:9" pos:end="17:45"><name pos:start="17:9" pos:end="17:10">rc</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:45">SCLP_RC_INSUFFICIENT_SCCB_LENGTH</name></expr>;</expr_stmt>

        <goto pos:start="19:9" pos:end="19:17">goto <name pos:start="19:14" pos:end="19:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:15">(<expr pos:start="25:9" pos:end="25:14"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:14">pbdev</name></expr>)</condition> <block pos:start="25:17" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:17">

        <expr_stmt pos:start="27:9" pos:end="27:48"><expr pos:start="27:9" pos:end="27:47"><call pos:start="27:9" pos:end="27:47"><name pos:start="27:9" pos:end="27:15">DPRINTF</name><argument_list pos:start="27:16" pos:end="27:47">(<argument pos:start="27:17" pos:end="27:46"><expr pos:start="27:17" pos:end="27:46"><literal type="string" pos:start="27:17" pos:end="27:46">"sclp deconfig no dev found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:47"><expr pos:start="29:9" pos:end="29:46"><name pos:start="29:9" pos:end="29:10">rc</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <name pos:start="29:14" pos:end="29:46">SCLP_RC_ADAPTER_ID_NOT_RECOGNIZED</name></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:17">goto <name pos:start="31:14" pos:end="31:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="37:5" pos:end="77:5">switch <condition pos:start="37:12" pos:end="37:25">(<expr pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:17">pbdev</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:24">state</name></name></expr>)</condition> <block pos:start="37:27" pos:end="77:5">{<block_content pos:start="39:5" pos:end="75:9">

    <case pos:start="39:5" pos:end="39:26">case <expr pos:start="39:10" pos:end="39:25"><name pos:start="39:10" pos:end="39:25">ZPCI_FS_RESERVED</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:47"><expr pos:start="41:9" pos:end="41:46"><name pos:start="41:9" pos:end="41:10">rc</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <name pos:start="41:14" pos:end="41:46">SCLP_RC_ADAPTER_IN_RESERVED_STATE</name></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:25">case <expr pos:start="45:10" pos:end="45:24"><name pos:start="45:10" pos:end="45:24">ZPCI_FS_STANDBY</name></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:10">rc</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <name pos:start="47:14" pos:end="47:39">SCLP_RC_NO_ACTION_REQUIRED</name></expr>;</expr_stmt>

        <break pos:start="49:9" pos:end="49:14">break;</break>

    <default pos:start="51:5" pos:end="51:12">default:</default>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:31">(<expr pos:start="53:13" pos:end="53:30"><name pos:start="53:13" pos:end="53:30"><name pos:start="53:13" pos:end="53:17">pbdev</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:30">summary_ind</name></name></expr>)</condition> <block pos:start="53:33" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:34">

            <expr_stmt pos:start="55:13" pos:end="55:34"><expr pos:start="55:13" pos:end="55:33"><call pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:26">pci_dereg_irqs</name><argument_list pos:start="55:27" pos:end="55:33">(<argument pos:start="55:28" pos:end="55:32"><expr pos:start="55:28" pos:end="55:32"><name pos:start="55:28" pos:end="55:32">pbdev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:34">(<expr pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:17">pbdev</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:24">iommu</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:33">enabled</name></name></expr>)</condition> <block pos:start="59:36" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:41">

            <expr_stmt pos:start="61:13" pos:end="61:41"><expr pos:start="61:13" pos:end="61:40"><call pos:start="61:13" pos:end="61:40"><name pos:start="61:13" pos:end="61:26">pci_dereg_ioat</name><argument_list pos:start="61:27" pos:end="61:40">(<argument pos:start="61:28" pos:end="61:39"><expr pos:start="61:28" pos:end="61:39"><name pos:start="61:28" pos:end="61:39"><name pos:start="61:28" pos:end="61:32">pbdev</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:39">iommu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:39"><expr pos:start="65:9" pos:end="65:38"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:13">pbdev</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:20">state</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:38">ZPCI_FS_STANDBY</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:39"><expr pos:start="67:9" pos:end="67:38"><name pos:start="67:9" pos:end="67:10">rc</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <name pos:start="67:14" pos:end="67:38">SCLP_RC_NORMAL_COMPLETION</name></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:33">(<expr pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:17">pbdev</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:32">release_timer</name></name></expr>)</condition> <block pos:start="71:35" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:51">

            <expr_stmt pos:start="73:13" pos:end="73:51"><expr pos:start="73:13" pos:end="73:50"><call pos:start="73:13" pos:end="73:50"><name pos:start="73:13" pos:end="73:23">qdev_unplug</name><argument_list pos:start="73:24" pos:end="73:50">(<argument pos:start="73:25" pos:end="73:43"><expr pos:start="73:25" pos:end="73:43"><call pos:start="73:25" pos:end="73:43"><name pos:start="73:25" pos:end="73:30">DEVICE</name><argument_list pos:start="73:31" pos:end="73:43">(<argument pos:start="73:32" pos:end="73:42"><expr pos:start="73:32" pos:end="73:42"><name pos:start="73:32" pos:end="73:42"><name pos:start="73:32" pos:end="73:36">pbdev</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:42">pdev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="73:46" pos:end="73:49"><expr pos:start="73:46" pos:end="73:49"><name pos:start="73:46" pos:end="73:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></switch>

<label pos:start="79:1" pos:end="79:4"><name pos:start="79:1" pos:end="79:3">out</name>:</label>

    <expr_stmt pos:start="81:5" pos:end="81:50"><expr pos:start="81:5" pos:end="81:49"><name pos:start="81:5" pos:end="81:31"><name pos:start="81:5" pos:end="81:9">psccb</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:17">header</name><operator pos:start="81:18" pos:end="81:18">.</operator><name pos:start="81:19" pos:end="81:31">response_code</name></name> <operator pos:start="81:33" pos:end="81:33">=</operator> <call pos:start="81:35" pos:end="81:49"><name pos:start="81:35" pos:end="81:45">cpu_to_be16</name><argument_list pos:start="81:46" pos:end="81:49">(<argument pos:start="81:47" pos:end="81:48"><expr pos:start="81:47" pos:end="81:48"><name pos:start="81:47" pos:end="81:48">rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
