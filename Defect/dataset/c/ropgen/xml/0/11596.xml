<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11596.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:58"><name pos:start="1:1" pos:end="1:9">tcp_input</name><argument_list pos:start="1:10" pos:end="1:58">(<argument pos:start="1:11" pos:end="1:24">struct mbuf *m</argument>, <argument pos:start="1:27" pos:end="1:36">int iphlen</argument>, <argument pos:start="1:39" pos:end="1:57">struct socket *inso</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="2137:1">{<block_content pos:start="5:9" pos:end="2135:18">

  	<decl_stmt pos:start="5:9" pos:end="5:31"><decl pos:start="5:9" pos:end="5:25"><type pos:start="5:9" pos:end="5:17"><name pos:start="5:9" pos:end="5:17"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:17">ip</name></name></type> <name pos:start="5:19" pos:end="5:25">save_ip</name></decl>, <decl pos:start="5:28" pos:end="5:30"><type ref="prev" pos:start="5:9" pos:end="5:17"><modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:30">ip</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:37"><decl pos:start="7:9" pos:end="7:36"><type pos:start="7:9" pos:end="7:34"><specifier pos:start="7:9" pos:end="7:16">register</specifier> <name pos:start="7:18" pos:end="7:32"><name pos:start="7:18" pos:end="7:23">struct</name> <name pos:start="7:25" pos:end="7:32">tcpiphdr</name></name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:36">ti</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:28"><decl pos:start="9:9" pos:end="9:27"><type pos:start="9:9" pos:end="9:15"><name pos:start="9:9" pos:end="9:15">caddr_t</name></type> <name pos:start="9:17" pos:end="9:20">optp</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:23"><decl pos:start="11:9" pos:end="11:22"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:18">optlen</name> <init pos:start="11:20" pos:end="11:22">= <expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:27"><decl pos:start="13:9" pos:end="13:15"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:15">len</name></decl>, <decl pos:start="13:18" pos:end="13:21"><type ref="prev" pos:start="13:9" pos:end="13:11"/><name pos:start="13:18" pos:end="13:21">tlen</name></decl>, <decl pos:start="13:24" pos:end="13:26"><type ref="prev" pos:start="13:9" pos:end="13:11"/><name pos:start="13:24" pos:end="13:26">off</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:41"><decl pos:start="15:9" pos:end="15:40"><type pos:start="15:9" pos:end="15:31"><specifier pos:start="15:9" pos:end="15:16">register</specifier> <name pos:start="15:18" pos:end="15:29"><name pos:start="15:18" pos:end="15:23">struct</name> <name pos:start="15:25" pos:end="15:29">tcpcb</name></name> <modifier pos:start="15:31" pos:end="15:31">*</modifier></type><name pos:start="15:32" pos:end="15:33">tp</name> <init pos:start="15:35" pos:end="15:40">= <expr pos:start="15:37" pos:end="15:40"><name pos:start="15:37" pos:end="15:40">NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="17:9" pos:end="17:29"><decl pos:start="17:9" pos:end="17:28"><type pos:start="17:9" pos:end="17:20"><specifier pos:start="17:9" pos:end="17:16">register</specifier> <name pos:start="17:18" pos:end="17:20">int</name></type> <name pos:start="17:22" pos:end="17:28">tiflags</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:33"><decl pos:start="19:9" pos:end="19:32"><type pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:14">struct</name> <name pos:start="19:16" pos:end="19:21">socket</name></name> <modifier pos:start="19:23" pos:end="19:23">*</modifier></type><name pos:start="19:24" pos:end="19:25">so</name> <init pos:start="19:27" pos:end="19:32">= <expr pos:start="19:29" pos:end="19:32"><name pos:start="19:29" pos:end="19:32">NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="21:9" pos:end="21:57"><decl pos:start="21:9" pos:end="21:18"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:18">todrop</name></decl>, <decl pos:start="21:21" pos:end="21:25"><type ref="prev" pos:start="21:9" pos:end="21:11"/><name pos:start="21:21" pos:end="21:25">acked</name></decl>, <decl pos:start="21:28" pos:end="21:40"><type ref="prev" pos:start="21:9" pos:end="21:11"/><name pos:start="21:28" pos:end="21:40">ourfinisacked</name></decl>, <decl pos:start="21:43" pos:end="21:56"><type ref="prev" pos:start="21:9" pos:end="21:11"/><name pos:start="21:43" pos:end="21:52">needoutput</name> <init pos:start="21:54" pos:end="21:56">= <expr pos:start="21:56" pos:end="21:56"><literal type="number" pos:start="21:56" pos:end="21:56">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="23:9" pos:end="23:20"><decl pos:start="23:9" pos:end="23:19"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:15">iss</name> <init pos:start="23:17" pos:end="23:19">= <expr pos:start="23:19" pos:end="23:19"><literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="25:9" pos:end="25:21"><decl pos:start="25:9" pos:end="25:20"><type pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:14">u_long</name></type> <name pos:start="25:16" pos:end="25:20">tiwin</name></decl>;</decl_stmt>

	<decl_stmt pos:start="27:9" pos:end="27:16"><decl pos:start="27:9" pos:end="27:15"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:15">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:27"><decl pos:start="29:5" pos:end="29:26"><type pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:10">struct</name> <name pos:start="29:12" pos:end="29:18">ex_list</name></name> <modifier pos:start="29:20" pos:end="29:20">*</modifier></type><name pos:start="29:21" pos:end="29:26">ex_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:17"><decl pos:start="31:5" pos:end="31:16"><type pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:9">Slirp</name> <modifier pos:start="31:11" pos:end="31:11">*</modifier></type><name pos:start="31:12" pos:end="31:16">slirp</name></decl>;</decl_stmt>



	<expr_stmt pos:start="35:9" pos:end="35:32"><expr pos:start="35:9" pos:end="35:31"><call pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:18">DEBUG_CALL</name><argument_list pos:start="35:19" pos:end="35:31">(<argument pos:start="35:20" pos:end="35:30"><expr pos:start="35:20" pos:end="35:30"><literal type="string" pos:start="35:20" pos:end="35:30">"tcp_input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="37:9" pos:end="39:53"><expr pos:start="37:9" pos:end="39:52"><call pos:start="37:9" pos:end="39:52"><name pos:start="37:9" pos:end="37:18">DEBUG_ARGS</name><argument_list pos:start="37:19" pos:end="39:52">(<argument pos:start="37:20" pos:end="39:51"><expr pos:start="37:20" pos:end="39:51"><operator pos:start="37:20" pos:end="37:20">(</operator><name pos:start="37:21" pos:end="37:23">dfd</name><operator pos:start="37:24" pos:end="37:24">,</operator> <literal type="string" pos:start="37:26" pos:end="37:64">" m = %8lx  iphlen = %2d  inso = %lx\n"</literal><operator pos:start="37:65" pos:end="37:65">,</operator>

		    <operator pos:start="39:21" pos:end="39:21">(</operator><name pos:start="39:22" pos:end="39:25">long</name> <operator pos:start="39:27" pos:end="39:27">)</operator><name pos:start="39:28" pos:end="39:28">m</name><operator pos:start="39:29" pos:end="39:29">,</operator> <name pos:start="39:31" pos:end="39:36">iphlen</name><operator pos:start="39:37" pos:end="39:37">,</operator> <operator pos:start="39:39" pos:end="39:39">(</operator><name pos:start="39:40" pos:end="39:43">long</name> <operator pos:start="39:45" pos:end="39:45">)</operator><name pos:start="39:46" pos:end="39:49">inso</name> <operator pos:start="39:51" pos:end="39:51">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="43:9" pos:end="47:11">/*

	 * If called with m == 0, then we're continuing the connect

	 */</comment>

	<if_stmt pos:start="49:9" pos:end="75:9"><if pos:start="49:9" pos:end="75:9">if <condition pos:start="49:12" pos:end="49:22">(<expr pos:start="49:13" pos:end="49:21"><name pos:start="49:13" pos:end="49:13">m</name> <operator pos:start="49:15" pos:end="49:16">==</operator> <name pos:start="49:18" pos:end="49:21">NULL</name></expr>)</condition> <block pos:start="49:24" pos:end="75:9">{<block_content pos:start="51:17" pos:end="73:31">

		<expr_stmt pos:start="51:17" pos:end="51:26"><expr pos:start="51:17" pos:end="51:25"><name pos:start="51:17" pos:end="51:18">so</name> <operator pos:start="51:20" pos:end="51:20">=</operator> <name pos:start="51:22" pos:end="51:25">inso</name></expr>;</expr_stmt>

		<expr_stmt pos:start="53:17" pos:end="53:34"><expr pos:start="53:17" pos:end="53:33"><name pos:start="53:17" pos:end="53:21">slirp</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <name pos:start="53:25" pos:end="53:33"><name pos:start="53:25" pos:end="53:26">so</name><operator pos:start="53:27" pos:end="53:28">-&gt;</operator><name pos:start="53:29" pos:end="53:33">slirp</name></name></expr>;</expr_stmt>



		<comment type="block" pos:start="57:17" pos:end="57:44">/* Re-set a few variables */</comment>

		<expr_stmt pos:start="59:17" pos:end="59:35"><expr pos:start="59:17" pos:end="59:34"><name pos:start="59:17" pos:end="59:18">tp</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <call pos:start="59:22" pos:end="59:34"><name pos:start="59:22" pos:end="59:30">sototcpcb</name><argument_list pos:start="59:31" pos:end="59:34">(<argument pos:start="59:32" pos:end="59:33"><expr pos:start="59:32" pos:end="59:33"><name pos:start="59:32" pos:end="59:33">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="61:17" pos:end="61:29"><expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:17">m</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:28"><name pos:start="61:21" pos:end="61:22">so</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:28">so_m</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:32"><expr pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:24"><name pos:start="63:17" pos:end="63:18">so</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:24">so_m</name></name> <operator pos:start="63:26" pos:end="63:26">=</operator> <name pos:start="63:28" pos:end="63:31">NULL</name></expr>;</expr_stmt>

		<expr_stmt pos:start="65:17" pos:end="65:31"><expr pos:start="65:17" pos:end="65:30"><name pos:start="65:17" pos:end="65:18">ti</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <name pos:start="65:22" pos:end="65:30"><name pos:start="65:22" pos:end="65:23">so</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:30">so_ti</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="67:17" pos:end="67:35"><expr pos:start="67:17" pos:end="67:34"><name pos:start="67:17" pos:end="67:21">tiwin</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:34"><name pos:start="67:25" pos:end="67:26">ti</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:34">ti_win</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="69:17" pos:end="69:39"><expr pos:start="69:17" pos:end="69:38"><name pos:start="69:17" pos:end="69:23">tiflags</name> <operator pos:start="69:25" pos:end="69:25">=</operator> <name pos:start="69:27" pos:end="69:38"><name pos:start="69:27" pos:end="69:28">ti</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:38">ti_flags</name></name></expr>;</expr_stmt>



		<goto pos:start="73:17" pos:end="73:31">goto <name pos:start="73:22" pos:end="73:30">cont_conn</name>;</goto>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="77:9" pos:end="77:25"><expr pos:start="77:9" pos:end="77:24"><name pos:start="77:9" pos:end="77:13">slirp</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <name pos:start="77:17" pos:end="77:24"><name pos:start="77:17" pos:end="77:17">m</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:24">slirp</name></name></expr>;</expr_stmt>



	<comment type="block" pos:start="81:9" pos:end="87:11">/*

	 * Get IP and TCP header together in first mbuf.

	 * Note: IP leaves IP header in first mbuf.

	 */</comment>

	<expr_stmt pos:start="89:9" pos:end="89:40"><expr pos:start="89:9" pos:end="89:39"><name pos:start="89:9" pos:end="89:10">ti</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <call pos:start="89:14" pos:end="89:39"><name pos:start="89:14" pos:end="89:17">mtod</name><argument_list pos:start="89:18" pos:end="89:39">(<argument pos:start="89:19" pos:end="89:19"><expr pos:start="89:19" pos:end="89:19"><name pos:start="89:19" pos:end="89:19">m</name></expr></argument>, <argument pos:start="89:22" pos:end="89:38"><expr pos:start="89:22" pos:end="89:38">struct <name pos:start="89:29" pos:end="89:36">tcpiphdr</name> <operator pos:start="89:38" pos:end="89:38">*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:40">(<expr pos:start="91:13" pos:end="91:39"><name pos:start="91:13" pos:end="91:18">iphlen</name> <operator pos:start="91:20" pos:end="91:20">&gt;</operator> <sizeof pos:start="91:22" pos:end="91:39">sizeof<argument_list pos:start="91:28" pos:end="91:39">(<argument pos:start="91:29" pos:end="91:37"><expr pos:start="91:29" pos:end="91:37">struct <name pos:start="91:36" pos:end="91:37">ip</name></expr></argument> )</argument_list></sizeof></expr>)</condition> <block pos:start="91:42" pos:end="97:9">{<block_content pos:start="93:11" pos:end="95:36">

	  <expr_stmt pos:start="93:11" pos:end="93:47"><expr pos:start="93:11" pos:end="93:46"><call pos:start="93:11" pos:end="93:46"><name pos:start="93:11" pos:end="93:25">ip_stripoptions</name><argument_list pos:start="93:26" pos:end="93:46">(<argument pos:start="93:27" pos:end="93:27"><expr pos:start="93:27" pos:end="93:27"><name pos:start="93:27" pos:end="93:27">m</name></expr></argument>, <argument pos:start="93:30" pos:end="93:45"><expr pos:start="93:30" pos:end="93:45"><operator pos:start="93:30" pos:end="93:30">(</operator>struct <name pos:start="93:38" pos:end="93:41">mbuf</name> <operator pos:start="93:43" pos:end="93:43">*</operator><operator pos:start="93:44" pos:end="93:44">)</operator><literal type="number" pos:start="93:45" pos:end="93:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="95:11" pos:end="95:36"><expr pos:start="95:11" pos:end="95:35"><name pos:start="95:11" pos:end="95:16">iphlen</name><operator pos:start="95:17" pos:end="95:17">=</operator><sizeof pos:start="95:18" pos:end="95:35">sizeof<argument_list pos:start="95:24" pos:end="95:35">(<argument pos:start="95:25" pos:end="95:33"><expr pos:start="95:25" pos:end="95:33">struct <name pos:start="95:32" pos:end="95:33">ip</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<comment type="block" pos:start="99:9" pos:end="99:36">/* XXX Check if too short */</comment>





	<comment type="block" pos:start="105:9" pos:end="111:11">/*

	 * Save a copy of the IP header in case we want restore it

	 * for sending an ICMP error message in response.

	 */</comment>

	<expr_stmt pos:start="113:9" pos:end="113:32"><expr pos:start="113:9" pos:end="113:31"><name pos:start="113:9" pos:end="113:10">ip</name><operator pos:start="113:11" pos:end="113:11">=</operator><call pos:start="113:12" pos:end="113:31"><name pos:start="113:12" pos:end="113:15">mtod</name><argument_list pos:start="113:16" pos:end="113:31">(<argument pos:start="113:17" pos:end="113:17"><expr pos:start="113:17" pos:end="113:17"><name pos:start="113:17" pos:end="113:17">m</name></expr></argument>, <argument pos:start="113:20" pos:end="113:30"><expr pos:start="113:20" pos:end="113:30">struct <name pos:start="113:27" pos:end="113:28">ip</name> <operator pos:start="113:30" pos:end="113:30">*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="115:9" pos:end="115:22"><expr pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:15">save_ip</name> <operator pos:start="115:17" pos:end="115:17">=</operator> <operator pos:start="115:19" pos:end="115:19">*</operator><name pos:start="115:20" pos:end="115:21">ip</name></expr>;</expr_stmt>

	<expr_stmt pos:start="117:9" pos:end="117:32"><expr pos:start="117:9" pos:end="117:31"><name pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:15">save_ip</name><operator pos:start="117:16" pos:end="117:16">.</operator><name pos:start="117:17" pos:end="117:22">ip_len</name></name><operator pos:start="117:23" pos:end="117:24">+=</operator> <name pos:start="117:26" pos:end="117:31">iphlen</name></expr>;</expr_stmt>



	<comment type="block" pos:start="121:9" pos:end="125:11">/*

	 * Checksum extended TCP header and data.

	 */</comment>

	<expr_stmt pos:start="127:9" pos:end="127:41"><expr pos:start="127:9" pos:end="127:40"><name pos:start="127:9" pos:end="127:12">tlen</name> <operator pos:start="127:14" pos:end="127:14">=</operator> <operator pos:start="127:16" pos:end="127:16">(</operator><operator pos:start="127:17" pos:end="127:17">(</operator>struct <name pos:start="127:25" pos:end="127:26">ip</name> <operator pos:start="127:28" pos:end="127:28">*</operator><operator pos:start="127:29" pos:end="127:29">)</operator><name pos:start="127:30" pos:end="127:31">ti</name><operator pos:start="127:32" pos:end="127:32">)</operator><operator pos:start="127:33" pos:end="127:34">-&gt;</operator><name pos:start="127:35" pos:end="127:40">ip_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:67"><expr pos:start="129:9" pos:end="129:66"><call pos:start="129:9" pos:end="129:26"><name pos:start="129:9" pos:end="129:22">tcpiphdr2qlink</name><argument_list pos:start="129:23" pos:end="129:26">(<argument pos:start="129:24" pos:end="129:25"><expr pos:start="129:24" pos:end="129:25"><name pos:start="129:24" pos:end="129:25">ti</name></expr></argument>)</argument_list></call><operator pos:start="129:27" pos:end="129:28">-&gt;</operator><name pos:start="129:29" pos:end="129:32">next</name> <operator pos:start="129:34" pos:end="129:34">=</operator> <call pos:start="129:36" pos:end="129:53"><name pos:start="129:36" pos:end="129:49">tcpiphdr2qlink</name><argument_list pos:start="129:50" pos:end="129:53">(<argument pos:start="129:51" pos:end="129:52"><expr pos:start="129:51" pos:end="129:52"><name pos:start="129:51" pos:end="129:52">ti</name></expr></argument>)</argument_list></call><operator pos:start="129:54" pos:end="129:55">-&gt;</operator><name pos:start="129:56" pos:end="129:59">prev</name> <operator pos:start="129:61" pos:end="129:61">=</operator> <name pos:start="129:63" pos:end="129:66">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:63"><expr pos:start="131:9" pos:end="131:62"><call pos:start="131:9" pos:end="131:62"><name pos:start="131:9" pos:end="131:14">memset</name><argument_list pos:start="131:15" pos:end="131:62">(<argument pos:start="131:16" pos:end="131:32"><expr pos:start="131:16" pos:end="131:32"><operator pos:start="131:16" pos:end="131:16">&amp;</operator><name pos:start="131:17" pos:end="131:32"><name pos:start="131:17" pos:end="131:18">ti</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:24">ti_i</name><operator pos:start="131:25" pos:end="131:25">.</operator><name pos:start="131:26" pos:end="131:32">ih_mbuf</name></name></expr></argument>, <argument pos:start="131:35" pos:end="131:35"><expr pos:start="131:35" pos:end="131:35"><literal type="number" pos:start="131:35" pos:end="131:35">0</literal></expr></argument> , <argument pos:start="131:39" pos:end="131:61"><expr pos:start="131:39" pos:end="131:61"><sizeof pos:start="131:39" pos:end="131:61">sizeof<argument_list pos:start="131:45" pos:end="131:61">(<argument pos:start="131:46" pos:end="131:60"><expr pos:start="131:46" pos:end="131:60">struct <name pos:start="131:53" pos:end="131:60">mbuf_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="133:9" pos:end="133:22"><expr pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:10">ti</name><operator pos:start="133:11" pos:end="133:12">-&gt;</operator><name pos:start="133:13" pos:end="133:17">ti_x1</name></name> <operator pos:start="133:19" pos:end="133:19">=</operator> <literal type="number" pos:start="133:21" pos:end="133:21">0</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="135:9" pos:end="135:43"><expr pos:start="135:9" pos:end="135:42"><name pos:start="135:9" pos:end="135:18"><name pos:start="135:9" pos:end="135:10">ti</name><operator pos:start="135:11" pos:end="135:12">-&gt;</operator><name pos:start="135:13" pos:end="135:18">ti_len</name></name> <operator pos:start="135:20" pos:end="135:20">=</operator> <call pos:start="135:22" pos:end="135:42"><name pos:start="135:22" pos:end="135:26">htons</name><argument_list pos:start="135:27" pos:end="135:42">(<argument pos:start="135:28" pos:end="135:41"><expr pos:start="135:28" pos:end="135:41"><operator pos:start="135:28" pos:end="135:28">(</operator><name pos:start="135:29" pos:end="135:36">uint16_t</name><operator pos:start="135:37" pos:end="135:37">)</operator><name pos:start="135:38" pos:end="135:41">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="137:9" pos:end="137:40"><expr pos:start="137:9" pos:end="137:39"><name pos:start="137:9" pos:end="137:11">len</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <sizeof pos:start="137:15" pos:end="137:32">sizeof<argument_list pos:start="137:21" pos:end="137:32">(<argument pos:start="137:22" pos:end="137:30"><expr pos:start="137:22" pos:end="137:30">struct <name pos:start="137:29" pos:end="137:30">ip</name></expr></argument> )</argument_list></sizeof> <operator pos:start="137:34" pos:end="137:34">+</operator> <name pos:start="137:36" pos:end="137:39">tlen</name></expr>;</expr_stmt>

	<if_stmt pos:start="139:9" pos:end="143:9"><if pos:start="139:9" pos:end="143:9">if<condition pos:start="139:11" pos:end="139:25">(<expr pos:start="139:12" pos:end="139:24"><call pos:start="139:12" pos:end="139:24"><name pos:start="139:12" pos:end="139:16">cksum</name><argument_list pos:start="139:17" pos:end="139:24">(<argument pos:start="139:18" pos:end="139:18"><expr pos:start="139:18" pos:end="139:18"><name pos:start="139:18" pos:end="139:18">m</name></expr></argument>, <argument pos:start="139:21" pos:end="139:23"><expr pos:start="139:21" pos:end="139:23"><name pos:start="139:21" pos:end="139:23">len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:27" pos:end="143:9">{<block_content pos:start="141:11" pos:end="141:20">

	  <goto pos:start="141:11" pos:end="141:20">goto <name pos:start="141:16" pos:end="141:19">drop</name>;</goto>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="147:9" pos:end="153:11">/*

	 * Check that TCP offset makes sense,

	 * pull out TCP options and adjust length.		XXX

	 */</comment>

	<expr_stmt pos:start="155:9" pos:end="155:30"><expr pos:start="155:9" pos:end="155:29"><name pos:start="155:9" pos:end="155:11">off</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <name pos:start="155:15" pos:end="155:24"><name pos:start="155:15" pos:end="155:16">ti</name><operator pos:start="155:17" pos:end="155:18">-&gt;</operator><name pos:start="155:19" pos:end="155:24">ti_off</name></name> <operator pos:start="155:26" pos:end="155:27">&lt;&lt;</operator> <literal type="number" pos:start="155:29" pos:end="155:29">2</literal></expr>;</expr_stmt>

	<if_stmt pos:start="157:9" pos:end="161:9"><if pos:start="157:9" pos:end="161:9">if <condition pos:start="157:12" pos:end="157:55">(<expr pos:start="157:13" pos:end="157:54"><name pos:start="157:13" pos:end="157:15">off</name> <operator pos:start="157:17" pos:end="157:17">&lt;</operator> <sizeof pos:start="157:19" pos:end="157:40">sizeof <argument_list pos:start="157:26" pos:end="157:40">(<argument pos:start="157:27" pos:end="157:39"><expr pos:start="157:27" pos:end="157:39">struct <name pos:start="157:34" pos:end="157:39">tcphdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="157:42" pos:end="157:43">||</operator> <name pos:start="157:45" pos:end="157:47">off</name> <operator pos:start="157:49" pos:end="157:49">&gt;</operator> <name pos:start="157:51" pos:end="157:54">tlen</name></expr>)</condition> <block pos:start="157:57" pos:end="161:9">{<block_content pos:start="159:11" pos:end="159:20">

	  <goto pos:start="159:11" pos:end="159:20">goto <name pos:start="159:16" pos:end="159:19">drop</name>;</goto>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="163:9" pos:end="163:20"><expr pos:start="163:9" pos:end="163:19"><name pos:start="163:9" pos:end="163:12">tlen</name> <operator pos:start="163:14" pos:end="163:15">-=</operator> <name pos:start="163:17" pos:end="163:19">off</name></expr>;</expr_stmt>

	<expr_stmt pos:start="165:9" pos:end="165:26"><expr pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:18"><name pos:start="165:9" pos:end="165:10">ti</name><operator pos:start="165:11" pos:end="165:12">-&gt;</operator><name pos:start="165:13" pos:end="165:18">ti_len</name></name> <operator pos:start="165:20" pos:end="165:20">=</operator> <name pos:start="165:22" pos:end="165:25">tlen</name></expr>;</expr_stmt>

	<if_stmt pos:start="167:9" pos:end="173:9"><if pos:start="167:9" pos:end="173:9">if <condition pos:start="167:12" pos:end="167:41">(<expr pos:start="167:13" pos:end="167:40"><name pos:start="167:13" pos:end="167:15">off</name> <operator pos:start="167:17" pos:end="167:17">&gt;</operator> <sizeof pos:start="167:19" pos:end="167:40">sizeof <argument_list pos:start="167:26" pos:end="167:40">(<argument pos:start="167:27" pos:end="167:39"><expr pos:start="167:27" pos:end="167:39">struct <name pos:start="167:34" pos:end="167:39">tcphdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="167:43" pos:end="173:9">{<block_content pos:start="169:11" pos:end="171:61">

	  <expr_stmt pos:start="169:11" pos:end="169:48"><expr pos:start="169:11" pos:end="169:47"><name pos:start="169:11" pos:end="169:16">optlen</name> <operator pos:start="169:18" pos:end="169:18">=</operator> <name pos:start="169:20" pos:end="169:22">off</name> <operator pos:start="169:24" pos:end="169:24">-</operator> <sizeof pos:start="169:26" pos:end="169:47">sizeof <argument_list pos:start="169:33" pos:end="169:47">(<argument pos:start="169:34" pos:end="169:46"><expr pos:start="169:34" pos:end="169:46">struct <name pos:start="169:41" pos:end="169:46">tcphdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	  <expr_stmt pos:start="171:11" pos:end="171:61"><expr pos:start="171:11" pos:end="171:60"><name pos:start="171:11" pos:end="171:14">optp</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <call pos:start="171:18" pos:end="171:33"><name pos:start="171:18" pos:end="171:21">mtod</name><argument_list pos:start="171:22" pos:end="171:33">(<argument pos:start="171:23" pos:end="171:23"><expr pos:start="171:23" pos:end="171:23"><name pos:start="171:23" pos:end="171:23">m</name></expr></argument>, <argument pos:start="171:26" pos:end="171:32"><expr pos:start="171:26" pos:end="171:32"><name pos:start="171:26" pos:end="171:32">caddr_t</name></expr></argument>)</argument_list></call> <operator pos:start="171:35" pos:end="171:35">+</operator> <sizeof pos:start="171:37" pos:end="171:60">sizeof <argument_list pos:start="171:44" pos:end="171:60">(<argument pos:start="171:45" pos:end="171:59"><expr pos:start="171:45" pos:end="171:59">struct <name pos:start="171:52" pos:end="171:59">tcpiphdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="175:9" pos:end="175:31"><expr pos:start="175:9" pos:end="175:30"><name pos:start="175:9" pos:end="175:15">tiflags</name> <operator pos:start="175:17" pos:end="175:17">=</operator> <name pos:start="175:19" pos:end="175:30"><name pos:start="175:19" pos:end="175:20">ti</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:30">ti_flags</name></name></expr>;</expr_stmt>



	<comment type="block" pos:start="179:9" pos:end="183:11">/*

	 * Convert TCP protocol specific fields to host format.

	 */</comment>

	<expr_stmt pos:start="185:9" pos:end="185:26"><expr pos:start="185:9" pos:end="185:25"><call pos:start="185:9" pos:end="185:25"><name pos:start="185:9" pos:end="185:13">NTOHL</name><argument_list pos:start="185:14" pos:end="185:25">(<argument pos:start="185:15" pos:end="185:24"><expr pos:start="185:15" pos:end="185:24"><name pos:start="185:15" pos:end="185:24"><name pos:start="185:15" pos:end="185:16">ti</name><operator pos:start="185:17" pos:end="185:18">-&gt;</operator><name pos:start="185:19" pos:end="185:24">ti_seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="187:9" pos:end="187:26"><expr pos:start="187:9" pos:end="187:25"><call pos:start="187:9" pos:end="187:25"><name pos:start="187:9" pos:end="187:13">NTOHL</name><argument_list pos:start="187:14" pos:end="187:25">(<argument pos:start="187:15" pos:end="187:24"><expr pos:start="187:15" pos:end="187:24"><name pos:start="187:15" pos:end="187:24"><name pos:start="187:15" pos:end="187:16">ti</name><operator pos:start="187:17" pos:end="187:18">-&gt;</operator><name pos:start="187:19" pos:end="187:24">ti_ack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="189:9" pos:end="189:26"><expr pos:start="189:9" pos:end="189:25"><call pos:start="189:9" pos:end="189:25"><name pos:start="189:9" pos:end="189:13">NTOHS</name><argument_list pos:start="189:14" pos:end="189:25">(<argument pos:start="189:15" pos:end="189:24"><expr pos:start="189:15" pos:end="189:24"><name pos:start="189:15" pos:end="189:24"><name pos:start="189:15" pos:end="189:16">ti</name><operator pos:start="189:17" pos:end="189:18">-&gt;</operator><name pos:start="189:19" pos:end="189:24">ti_win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="191:9" pos:end="191:26"><expr pos:start="191:9" pos:end="191:25"><call pos:start="191:9" pos:end="191:25"><name pos:start="191:9" pos:end="191:13">NTOHS</name><argument_list pos:start="191:14" pos:end="191:25">(<argument pos:start="191:15" pos:end="191:24"><expr pos:start="191:15" pos:end="191:24"><name pos:start="191:15" pos:end="191:24"><name pos:start="191:15" pos:end="191:16">ti</name><operator pos:start="191:17" pos:end="191:18">-&gt;</operator><name pos:start="191:19" pos:end="191:24">ti_urp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="195:9" pos:end="199:11">/*

	 * Drop TCP, IP headers and TCP options.

	 */</comment>

	<expr_stmt pos:start="201:9" pos:end="201:71"><expr pos:start="201:9" pos:end="201:70"><name pos:start="201:9" pos:end="201:17"><name pos:start="201:9" pos:end="201:9">m</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:17">m_data</name></name> <operator pos:start="201:19" pos:end="201:20">+=</operator> <sizeof pos:start="201:22" pos:end="201:44">sizeof<argument_list pos:start="201:28" pos:end="201:44">(<argument pos:start="201:29" pos:end="201:43"><expr pos:start="201:29" pos:end="201:43">struct <name pos:start="201:36" pos:end="201:43">tcpiphdr</name></expr></argument>)</argument_list></sizeof><operator pos:start="201:45" pos:end="201:45">+</operator><name pos:start="201:46" pos:end="201:48">off</name><operator pos:start="201:49" pos:end="201:49">-</operator><sizeof pos:start="201:50" pos:end="201:70">sizeof<argument_list pos:start="201:56" pos:end="201:70">(<argument pos:start="201:57" pos:end="201:69"><expr pos:start="201:57" pos:end="201:69">struct <name pos:start="201:64" pos:end="201:69">tcphdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt pos:start="203:9" pos:end="203:71"><expr pos:start="203:9" pos:end="203:70"><name pos:start="203:9" pos:end="203:16"><name pos:start="203:9" pos:end="203:9">m</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:16">m_len</name></name>  <operator pos:start="203:19" pos:end="203:20">-=</operator> <sizeof pos:start="203:22" pos:end="203:44">sizeof<argument_list pos:start="203:28" pos:end="203:44">(<argument pos:start="203:29" pos:end="203:43"><expr pos:start="203:29" pos:end="203:43">struct <name pos:start="203:36" pos:end="203:43">tcpiphdr</name></expr></argument>)</argument_list></sizeof><operator pos:start="203:45" pos:end="203:45">+</operator><name pos:start="203:46" pos:end="203:48">off</name><operator pos:start="203:49" pos:end="203:49">-</operator><sizeof pos:start="203:50" pos:end="203:70">sizeof<argument_list pos:start="203:56" pos:end="203:70">(<argument pos:start="203:57" pos:end="203:69"><expr pos:start="203:57" pos:end="203:69">struct <name pos:start="203:64" pos:end="203:69">tcphdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <if_stmt pos:start="207:5" pos:end="225:5"><if pos:start="207:5" pos:end="225:5">if <condition pos:start="207:8" pos:end="207:26">(<expr pos:start="207:9" pos:end="207:25"><name pos:start="207:9" pos:end="207:25"><name pos:start="207:9" pos:end="207:13">slirp</name><operator pos:start="207:14" pos:end="207:15">-&gt;</operator><name pos:start="207:16" pos:end="207:25">restricted</name></name></expr>)</condition> <block pos:start="207:28" pos:end="225:5">{<block_content pos:start="209:9" pos:end="223:22">

        <for pos:start="209:9" pos:end="219:9">for <control pos:start="209:13" pos:end="209:73">(<init pos:start="209:14" pos:end="209:39"><expr pos:start="209:14" pos:end="209:38"><name pos:start="209:14" pos:end="209:19">ex_ptr</name> <operator pos:start="209:21" pos:end="209:21">=</operator> <name pos:start="209:23" pos:end="209:38"><name pos:start="209:23" pos:end="209:27">slirp</name><operator pos:start="209:28" pos:end="209:29">-&gt;</operator><name pos:start="209:30" pos:end="209:38">exec_list</name></name></expr>;</init> <condition pos:start="209:41" pos:end="209:47"><expr pos:start="209:41" pos:end="209:46"><name pos:start="209:41" pos:end="209:46">ex_ptr</name></expr>;</condition> <incr pos:start="209:49" pos:end="209:72"><expr pos:start="209:49" pos:end="209:72"><name pos:start="209:49" pos:end="209:54">ex_ptr</name> <operator pos:start="209:56" pos:end="209:56">=</operator> <name pos:start="209:58" pos:end="209:72"><name pos:start="209:58" pos:end="209:63">ex_ptr</name><operator pos:start="209:64" pos:end="209:65">-&gt;</operator><name pos:start="209:66" pos:end="209:72">ex_next</name></name></expr></incr>)</control> <block pos:start="209:75" pos:end="219:9">{<block_content pos:start="211:13" pos:end="217:13">

            <if_stmt pos:start="211:13" pos:end="217:13"><if pos:start="211:13" pos:end="217:13">if <condition pos:start="211:16" pos:end="213:60">(<expr pos:start="211:17" pos:end="213:59"><name pos:start="211:17" pos:end="211:32"><name pos:start="211:17" pos:end="211:22">ex_ptr</name><operator pos:start="211:23" pos:end="211:24">-&gt;</operator><name pos:start="211:25" pos:end="211:32">ex_fport</name></name> <operator pos:start="211:34" pos:end="211:35">==</operator> <name pos:start="211:37" pos:end="211:48"><name pos:start="211:37" pos:end="211:38">ti</name><operator pos:start="211:39" pos:end="211:40">-&gt;</operator><name pos:start="211:41" pos:end="211:48">ti_dport</name></name> <operator pos:start="211:50" pos:end="211:51">&amp;&amp;</operator>

                <name pos:start="213:17" pos:end="213:33"><name pos:start="213:17" pos:end="213:18">ti</name><operator pos:start="213:19" pos:end="213:20">-&gt;</operator><name pos:start="213:21" pos:end="213:26">ti_dst</name><operator pos:start="213:27" pos:end="213:27">.</operator><name pos:start="213:28" pos:end="213:33">s_addr</name></name> <operator pos:start="213:35" pos:end="213:36">==</operator> <name pos:start="213:38" pos:end="213:59"><name pos:start="213:38" pos:end="213:43">ex_ptr</name><operator pos:start="213:44" pos:end="213:45">-&gt;</operator><name pos:start="213:46" pos:end="213:52">ex_addr</name><operator pos:start="213:53" pos:end="213:53">.</operator><name pos:start="213:54" pos:end="213:59">s_addr</name></name></expr>)</condition> <block pos:start="213:62" pos:end="217:13">{<block_content pos:start="215:17" pos:end="215:22">

                <break pos:start="215:17" pos:end="215:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="221:9" pos:end="223:22"><if pos:start="221:9" pos:end="223:22">if <condition pos:start="221:12" pos:end="221:20">(<expr pos:start="221:13" pos:end="221:19"><operator pos:start="221:13" pos:end="221:13">!</operator><name pos:start="221:14" pos:end="221:19">ex_ptr</name></expr>)</condition><block type="pseudo" pos:start="223:13" pos:end="223:22"><block_content pos:start="223:13" pos:end="223:22">

            <goto pos:start="223:13" pos:end="223:22">goto <name pos:start="223:18" pos:end="223:21">drop</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

	<comment type="block" pos:start="227:9" pos:end="231:11">/*

	 * Locate pcb for segment.

	 */</comment>

<label pos:start="233:1" pos:end="233:7"><name pos:start="233:1" pos:end="233:6">findso</name>:</label>

	<expr_stmt pos:start="235:9" pos:end="235:32"><expr pos:start="235:9" pos:end="235:31"><name pos:start="235:9" pos:end="235:10">so</name> <operator pos:start="235:12" pos:end="235:12">=</operator> <name pos:start="235:14" pos:end="235:31"><name pos:start="235:14" pos:end="235:18">slirp</name><operator pos:start="235:19" pos:end="235:20">-&gt;</operator><name pos:start="235:21" pos:end="235:31">tcp_last_so</name></name></expr>;</expr_stmt>

	<if_stmt pos:start="237:9" pos:end="253:9"><if pos:start="237:9" pos:end="253:9">if <condition pos:start="237:12" pos:end="243:53">(<expr pos:start="237:13" pos:end="243:52"><name pos:start="237:13" pos:end="237:24"><name pos:start="237:13" pos:end="237:14">so</name><operator pos:start="237:15" pos:end="237:16">-&gt;</operator><name pos:start="237:17" pos:end="237:24">so_fport</name></name> <operator pos:start="237:26" pos:end="237:27">!=</operator> <name pos:start="237:29" pos:end="237:40"><name pos:start="237:29" pos:end="237:30">ti</name><operator pos:start="237:31" pos:end="237:32">-&gt;</operator><name pos:start="237:33" pos:end="237:40">ti_dport</name></name> <operator pos:start="237:42" pos:end="237:43">||</operator>

	    <name pos:start="239:13" pos:end="239:24"><name pos:start="239:13" pos:end="239:14">so</name><operator pos:start="239:15" pos:end="239:16">-&gt;</operator><name pos:start="239:17" pos:end="239:24">so_lport</name></name> <operator pos:start="239:26" pos:end="239:27">!=</operator> <name pos:start="239:29" pos:end="239:40"><name pos:start="239:29" pos:end="239:30">ti</name><operator pos:start="239:31" pos:end="239:32">-&gt;</operator><name pos:start="239:33" pos:end="239:40">ti_sport</name></name> <operator pos:start="239:42" pos:end="239:43">||</operator>

	    <name pos:start="241:13" pos:end="241:31"><name pos:start="241:13" pos:end="241:14">so</name><operator pos:start="241:15" pos:end="241:16">-&gt;</operator><name pos:start="241:17" pos:end="241:24">so_laddr</name><operator pos:start="241:25" pos:end="241:25">.</operator><name pos:start="241:26" pos:end="241:31">s_addr</name></name> <operator pos:start="241:33" pos:end="241:34">!=</operator> <name pos:start="241:36" pos:end="241:52"><name pos:start="241:36" pos:end="241:37">ti</name><operator pos:start="241:38" pos:end="241:39">-&gt;</operator><name pos:start="241:40" pos:end="241:45">ti_src</name><operator pos:start="241:46" pos:end="241:46">.</operator><name pos:start="241:47" pos:end="241:52">s_addr</name></name> <operator pos:start="241:54" pos:end="241:55">||</operator>

	    <name pos:start="243:13" pos:end="243:31"><name pos:start="243:13" pos:end="243:14">so</name><operator pos:start="243:15" pos:end="243:16">-&gt;</operator><name pos:start="243:17" pos:end="243:24">so_faddr</name><operator pos:start="243:25" pos:end="243:25">.</operator><name pos:start="243:26" pos:end="243:31">s_addr</name></name> <operator pos:start="243:33" pos:end="243:34">!=</operator> <name pos:start="243:36" pos:end="243:52"><name pos:start="243:36" pos:end="243:37">ti</name><operator pos:start="243:38" pos:end="243:39">-&gt;</operator><name pos:start="243:40" pos:end="243:45">ti_dst</name><operator pos:start="243:46" pos:end="243:46">.</operator><name pos:start="243:47" pos:end="243:52">s_addr</name></name></expr>)</condition> <block pos:start="243:55" pos:end="253:9">{<block_content pos:start="245:17" pos:end="251:48">

		<expr_stmt pos:start="245:17" pos:end="247:57"><expr pos:start="245:17" pos:end="247:56"><name pos:start="245:17" pos:end="245:18">so</name> <operator pos:start="245:20" pos:end="245:20">=</operator> <call pos:start="245:22" pos:end="247:56"><name pos:start="245:22" pos:end="245:29">solookup</name><argument_list pos:start="245:30" pos:end="247:56">(<argument pos:start="245:31" pos:end="245:41"><expr pos:start="245:31" pos:end="245:41"><operator pos:start="245:31" pos:end="245:31">&amp;</operator><name pos:start="245:32" pos:end="245:41"><name pos:start="245:32" pos:end="245:36">slirp</name><operator pos:start="245:37" pos:end="245:38">-&gt;</operator><name pos:start="245:39" pos:end="245:41">tcb</name></name></expr></argument>, <argument pos:start="245:44" pos:end="245:53"><expr pos:start="245:44" pos:end="245:53"><name pos:start="245:44" pos:end="245:53"><name pos:start="245:44" pos:end="245:45">ti</name><operator pos:start="245:46" pos:end="245:47">-&gt;</operator><name pos:start="245:48" pos:end="245:53">ti_src</name></name></expr></argument>, <argument pos:start="245:56" pos:end="245:67"><expr pos:start="245:56" pos:end="245:67"><name pos:start="245:56" pos:end="245:67"><name pos:start="245:56" pos:end="245:57">ti</name><operator pos:start="245:58" pos:end="245:59">-&gt;</operator><name pos:start="245:60" pos:end="245:67">ti_sport</name></name></expr></argument>,

			       <argument pos:start="247:32" pos:end="247:41"><expr pos:start="247:32" pos:end="247:41"><name pos:start="247:32" pos:end="247:41"><name pos:start="247:32" pos:end="247:33">ti</name><operator pos:start="247:34" pos:end="247:35">-&gt;</operator><name pos:start="247:36" pos:end="247:41">ti_dst</name></name></expr></argument>, <argument pos:start="247:44" pos:end="247:55"><expr pos:start="247:44" pos:end="247:55"><name pos:start="247:44" pos:end="247:55"><name pos:start="247:44" pos:end="247:45">ti</name><operator pos:start="247:46" pos:end="247:47">-&gt;</operator><name pos:start="247:48" pos:end="247:55">ti_dport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="249:17" pos:end="251:48"><if pos:start="249:17" pos:end="251:48">if <condition pos:start="249:20" pos:end="249:23">(<expr pos:start="249:21" pos:end="249:22"><name pos:start="249:21" pos:end="249:22">so</name></expr>)</condition><block type="pseudo" pos:start="251:25" pos:end="251:48"><block_content pos:start="251:25" pos:end="251:48">

			<expr_stmt pos:start="251:25" pos:end="251:48"><expr pos:start="251:25" pos:end="251:47"><name pos:start="251:25" pos:end="251:42"><name pos:start="251:25" pos:end="251:29">slirp</name><operator pos:start="251:30" pos:end="251:31">-&gt;</operator><name pos:start="251:32" pos:end="251:42">tcp_last_so</name></name> <operator pos:start="251:44" pos:end="251:44">=</operator> <name pos:start="251:46" pos:end="251:47">so</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="257:9" pos:end="281:11">/*

	 * If the state is CLOSED (i.e., TCB does not exist) then

	 * all data in the incoming segment is discarded.

	 * If the TCB exists but is in CLOSED state, it is embryonic,

	 * but should either do a listen or a connect soon.

	 *

	 * state == CLOSED means we've done socreate() but haven't

	 * attached it to a protocol yet...

	 *

	 * XXX If a TCB does not exist, and the TH_SYN flag is

	 * the only flag set, then create a session, mark it

	 * as if it was LISTENING, and continue...

	 */</comment>

        <if_stmt pos:start="283:9" pos:end="331:9"><if pos:start="283:9" pos:end="331:9">if <condition pos:start="283:12" pos:end="283:23">(<expr pos:start="283:13" pos:end="283:22"><name pos:start="283:13" pos:end="283:14">so</name> <operator pos:start="283:16" pos:end="283:17">==</operator> <name pos:start="283:19" pos:end="283:22">NULL</name></expr>)</condition> <block pos:start="283:25" pos:end="331:9">{<block_content pos:start="285:11" pos:end="329:36">

	  <if_stmt pos:start="285:11" pos:end="287:31"><if pos:start="285:11" pos:end="287:31">if <condition pos:start="285:14" pos:end="285:73">(<expr pos:start="285:15" pos:end="285:72"><operator pos:start="285:15" pos:end="285:15">(</operator><name pos:start="285:16" pos:end="285:22">tiflags</name> <operator pos:start="285:24" pos:end="285:24">&amp;</operator> <operator pos:start="285:26" pos:end="285:26">(</operator><name pos:start="285:27" pos:end="285:32">TH_SYN</name><operator pos:start="285:33" pos:end="285:33">|</operator><name pos:start="285:34" pos:end="285:39">TH_FIN</name><operator pos:start="285:40" pos:end="285:40">|</operator><name pos:start="285:41" pos:end="285:46">TH_RST</name><operator pos:start="285:47" pos:end="285:47">|</operator><name pos:start="285:48" pos:end="285:53">TH_URG</name><operator pos:start="285:54" pos:end="285:54">|</operator><name pos:start="285:55" pos:end="285:60">TH_ACK</name><operator pos:start="285:61" pos:end="285:61">)</operator><operator pos:start="285:62" pos:end="285:62">)</operator> <operator pos:start="285:64" pos:end="285:65">!=</operator> <name pos:start="285:67" pos:end="285:72">TH_SYN</name></expr>)</condition><block type="pseudo" pos:start="287:13" pos:end="287:31"><block_content pos:start="287:13" pos:end="287:31">

	    <goto pos:start="287:13" pos:end="287:31">goto <name pos:start="287:18" pos:end="287:30">dropwithreset</name>;</goto></block_content></block></if></if_stmt>



	  <if_stmt pos:start="291:11" pos:end="293:31"><if pos:start="291:11" pos:end="293:31">if <condition pos:start="291:14" pos:end="291:45">(<expr pos:start="291:15" pos:end="291:44"><operator pos:start="291:15" pos:end="291:15">(</operator><name pos:start="291:16" pos:end="291:17">so</name> <operator pos:start="291:19" pos:end="291:19">=</operator> <call pos:start="291:21" pos:end="291:35"><name pos:start="291:21" pos:end="291:28">socreate</name><argument_list pos:start="291:29" pos:end="291:35">(<argument pos:start="291:30" pos:end="291:34"><expr pos:start="291:30" pos:end="291:34"><name pos:start="291:30" pos:end="291:34">slirp</name></expr></argument>)</argument_list></call><operator pos:start="291:36" pos:end="291:36">)</operator> <operator pos:start="291:38" pos:end="291:39">==</operator> <name pos:start="291:41" pos:end="291:44">NULL</name></expr>)</condition><block type="pseudo" pos:start="293:13" pos:end="293:31"><block_content pos:start="293:13" pos:end="293:31">

	    <goto pos:start="293:13" pos:end="293:31">goto <name pos:start="293:18" pos:end="293:30">dropwithreset</name>;</goto></block_content></block></if></if_stmt>

	  <if_stmt pos:start="295:11" pos:end="301:11"><if pos:start="295:11" pos:end="301:11">if <condition pos:start="295:14" pos:end="295:33">(<expr pos:start="295:15" pos:end="295:32"><call pos:start="295:15" pos:end="295:28"><name pos:start="295:15" pos:end="295:24">tcp_attach</name><argument_list pos:start="295:25" pos:end="295:28">(<argument pos:start="295:26" pos:end="295:27"><expr pos:start="295:26" pos:end="295:27"><name pos:start="295:26" pos:end="295:27">so</name></expr></argument>)</argument_list></call> <operator pos:start="295:30" pos:end="295:30">&lt;</operator> <literal type="number" pos:start="295:32" pos:end="295:32">0</literal></expr>)</condition> <block pos:start="295:35" pos:end="301:11">{<block_content pos:start="297:13" pos:end="299:31">

	    <expr_stmt pos:start="297:13" pos:end="297:21"><expr pos:start="297:13" pos:end="297:20"><call pos:start="297:13" pos:end="297:20"><name pos:start="297:13" pos:end="297:16">free</name><argument_list pos:start="297:17" pos:end="297:20">(<argument pos:start="297:18" pos:end="297:19"><expr pos:start="297:18" pos:end="297:19"><name pos:start="297:18" pos:end="297:19">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="297:23" pos:end="297:71">/* Not sofree (if it failed, it's not insqued) */</comment>

	    <goto pos:start="299:13" pos:end="299:31">goto <name pos:start="299:18" pos:end="299:30">dropwithreset</name>;</goto>

	  </block_content>}</block></if></if_stmt>



	  <expr_stmt pos:start="305:11" pos:end="305:47"><expr pos:start="305:11" pos:end="305:46"><call pos:start="305:11" pos:end="305:46"><name pos:start="305:11" pos:end="305:19">sbreserve</name><argument_list pos:start="305:20" pos:end="305:46">(<argument pos:start="305:21" pos:end="305:31"><expr pos:start="305:21" pos:end="305:31"><operator pos:start="305:21" pos:end="305:21">&amp;</operator><name pos:start="305:22" pos:end="305:31"><name pos:start="305:22" pos:end="305:23">so</name><operator pos:start="305:24" pos:end="305:25">-&gt;</operator><name pos:start="305:26" pos:end="305:31">so_snd</name></name></expr></argument>, <argument pos:start="305:34" pos:end="305:45"><expr pos:start="305:34" pos:end="305:45"><name pos:start="305:34" pos:end="305:45">TCP_SNDSPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="307:11" pos:end="307:47"><expr pos:start="307:11" pos:end="307:46"><call pos:start="307:11" pos:end="307:46"><name pos:start="307:11" pos:end="307:19">sbreserve</name><argument_list pos:start="307:20" pos:end="307:46">(<argument pos:start="307:21" pos:end="307:31"><expr pos:start="307:21" pos:end="307:31"><operator pos:start="307:21" pos:end="307:21">&amp;</operator><name pos:start="307:22" pos:end="307:31"><name pos:start="307:22" pos:end="307:23">so</name><operator pos:start="307:24" pos:end="307:25">-&gt;</operator><name pos:start="307:26" pos:end="307:31">so_rcv</name></name></expr></argument>, <argument pos:start="307:34" pos:end="307:45"><expr pos:start="307:34" pos:end="307:45"><name pos:start="307:34" pos:end="307:45">TCP_RCVSPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	  <expr_stmt pos:start="311:11" pos:end="311:36"><expr pos:start="311:11" pos:end="311:35"><name pos:start="311:11" pos:end="311:22"><name pos:start="311:11" pos:end="311:12">so</name><operator pos:start="311:13" pos:end="311:14">-&gt;</operator><name pos:start="311:15" pos:end="311:22">so_laddr</name></name> <operator pos:start="311:24" pos:end="311:24">=</operator> <name pos:start="311:26" pos:end="311:35"><name pos:start="311:26" pos:end="311:27">ti</name><operator pos:start="311:28" pos:end="311:29">-&gt;</operator><name pos:start="311:30" pos:end="311:35">ti_src</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="313:11" pos:end="313:38"><expr pos:start="313:11" pos:end="313:37"><name pos:start="313:11" pos:end="313:22"><name pos:start="313:11" pos:end="313:12">so</name><operator pos:start="313:13" pos:end="313:14">-&gt;</operator><name pos:start="313:15" pos:end="313:22">so_lport</name></name> <operator pos:start="313:24" pos:end="313:24">=</operator> <name pos:start="313:26" pos:end="313:37"><name pos:start="313:26" pos:end="313:27">ti</name><operator pos:start="313:28" pos:end="313:29">-&gt;</operator><name pos:start="313:30" pos:end="313:37">ti_sport</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="315:11" pos:end="315:36"><expr pos:start="315:11" pos:end="315:35"><name pos:start="315:11" pos:end="315:22"><name pos:start="315:11" pos:end="315:12">so</name><operator pos:start="315:13" pos:end="315:14">-&gt;</operator><name pos:start="315:15" pos:end="315:22">so_faddr</name></name> <operator pos:start="315:24" pos:end="315:24">=</operator> <name pos:start="315:26" pos:end="315:35"><name pos:start="315:26" pos:end="315:27">ti</name><operator pos:start="315:28" pos:end="315:29">-&gt;</operator><name pos:start="315:30" pos:end="315:35">ti_dst</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="317:11" pos:end="317:38"><expr pos:start="317:11" pos:end="317:37"><name pos:start="317:11" pos:end="317:22"><name pos:start="317:11" pos:end="317:12">so</name><operator pos:start="317:13" pos:end="317:14">-&gt;</operator><name pos:start="317:15" pos:end="317:22">so_fport</name></name> <operator pos:start="317:24" pos:end="317:24">=</operator> <name pos:start="317:26" pos:end="317:37"><name pos:start="317:26" pos:end="317:27">ti</name><operator pos:start="317:28" pos:end="317:29">-&gt;</operator><name pos:start="317:30" pos:end="317:37">ti_dport</name></name></expr>;</expr_stmt>



	  <if_stmt pos:start="321:11" pos:end="323:53"><if pos:start="321:11" pos:end="323:53">if <condition pos:start="321:14" pos:end="321:48">(<expr pos:start="321:15" pos:end="321:47"><operator pos:start="321:15" pos:end="321:15">(</operator><name pos:start="321:16" pos:end="321:27"><name pos:start="321:16" pos:end="321:17">so</name><operator pos:start="321:18" pos:end="321:19">-&gt;</operator><name pos:start="321:20" pos:end="321:27">so_iptos</name></name> <operator pos:start="321:29" pos:end="321:29">=</operator> <call pos:start="321:31" pos:end="321:41"><name pos:start="321:31" pos:end="321:37">tcp_tos</name><argument_list pos:start="321:38" pos:end="321:41">(<argument pos:start="321:39" pos:end="321:40"><expr pos:start="321:39" pos:end="321:40"><name pos:start="321:39" pos:end="321:40">so</name></expr></argument>)</argument_list></call><operator pos:start="321:42" pos:end="321:42">)</operator> <operator pos:start="321:44" pos:end="321:45">==</operator> <literal type="number" pos:start="321:47" pos:end="321:47">0</literal></expr>)</condition><block type="pseudo" pos:start="323:13" pos:end="323:53"><block_content pos:start="323:13" pos:end="323:53">

	    <expr_stmt pos:start="323:13" pos:end="323:53"><expr pos:start="323:13" pos:end="323:52"><name pos:start="323:13" pos:end="323:24"><name pos:start="323:13" pos:end="323:14">so</name><operator pos:start="323:15" pos:end="323:16">-&gt;</operator><name pos:start="323:17" pos:end="323:24">so_iptos</name></name> <operator pos:start="323:26" pos:end="323:26">=</operator> <operator pos:start="323:28" pos:end="323:28">(</operator><operator pos:start="323:29" pos:end="323:29">(</operator>struct <name pos:start="323:37" pos:end="323:38">ip</name> <operator pos:start="323:40" pos:end="323:40">*</operator><operator pos:start="323:41" pos:end="323:41">)</operator><name pos:start="323:42" pos:end="323:43">ti</name><operator pos:start="323:44" pos:end="323:44">)</operator><operator pos:start="323:45" pos:end="323:46">-&gt;</operator><name pos:start="323:47" pos:end="323:52">ip_tos</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



	  <expr_stmt pos:start="327:11" pos:end="327:29"><expr pos:start="327:11" pos:end="327:28"><name pos:start="327:11" pos:end="327:12">tp</name> <operator pos:start="327:14" pos:end="327:14">=</operator> <call pos:start="327:16" pos:end="327:28"><name pos:start="327:16" pos:end="327:24">sototcpcb</name><argument_list pos:start="327:25" pos:end="327:28">(<argument pos:start="327:26" pos:end="327:27"><expr pos:start="327:26" pos:end="327:27"><name pos:start="327:26" pos:end="327:27">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="329:11" pos:end="329:36"><expr pos:start="329:11" pos:end="329:35"><name pos:start="329:11" pos:end="329:21"><name pos:start="329:11" pos:end="329:12">tp</name><operator pos:start="329:13" pos:end="329:14">-&gt;</operator><name pos:start="329:15" pos:end="329:21">t_state</name></name> <operator pos:start="329:23" pos:end="329:23">=</operator> <name pos:start="329:25" pos:end="329:35">TCPS_LISTEN</name></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="335:9" pos:end="343:11">/*

         * If this is a still-connecting socket, this probably

         * a retransmit of the SYN.  Whether it's a retransmit SYN

	 * or something else, we nuke it.

         */</comment>

        <if_stmt pos:start="345:9" pos:end="347:26"><if pos:start="345:9" pos:end="347:26">if <condition pos:start="345:12" pos:end="345:44">(<expr pos:start="345:13" pos:end="345:43"><name pos:start="345:13" pos:end="345:24"><name pos:start="345:13" pos:end="345:14">so</name><operator pos:start="345:15" pos:end="345:16">-&gt;</operator><name pos:start="345:17" pos:end="345:24">so_state</name></name> <operator pos:start="345:26" pos:end="345:26">&amp;</operator> <name pos:start="345:28" pos:end="345:43">SS_ISFCONNECTING</name></expr>)</condition><block type="pseudo" pos:start="347:17" pos:end="347:26"><block_content pos:start="347:17" pos:end="347:26">

                <goto pos:start="347:17" pos:end="347:26">goto <name pos:start="347:22" pos:end="347:25">drop</name>;</goto></block_content></block></if></if_stmt>



	<expr_stmt pos:start="351:9" pos:end="351:27"><expr pos:start="351:9" pos:end="351:26"><name pos:start="351:9" pos:end="351:10">tp</name> <operator pos:start="351:12" pos:end="351:12">=</operator> <call pos:start="351:14" pos:end="351:26"><name pos:start="351:14" pos:end="351:22">sototcpcb</name><argument_list pos:start="351:23" pos:end="351:26">(<argument pos:start="351:24" pos:end="351:25"><expr pos:start="351:24" pos:end="351:25"><name pos:start="351:24" pos:end="351:25">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="block" pos:start="355:9" pos:end="355:35">/* XXX Should never fail */</comment>

        <if_stmt pos:start="357:9" pos:end="359:35"><if pos:start="357:9" pos:end="359:35">if <condition pos:start="357:12" pos:end="357:23">(<expr pos:start="357:13" pos:end="357:22"><name pos:start="357:13" pos:end="357:14">tp</name> <operator pos:start="357:16" pos:end="357:17">==</operator> <name pos:start="357:19" pos:end="357:22">NULL</name></expr>)</condition><block type="pseudo" pos:start="359:17" pos:end="359:35"><block_content pos:start="359:17" pos:end="359:35">

		<goto pos:start="359:17" pos:end="359:35">goto <name pos:start="359:22" pos:end="359:34">dropwithreset</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt pos:start="361:9" pos:end="363:26"><if pos:start="361:9" pos:end="363:26">if <condition pos:start="361:12" pos:end="361:39">(<expr pos:start="361:13" pos:end="361:38"><name pos:start="361:13" pos:end="361:23"><name pos:start="361:13" pos:end="361:14">tp</name><operator pos:start="361:15" pos:end="361:16">-&gt;</operator><name pos:start="361:17" pos:end="361:23">t_state</name></name> <operator pos:start="361:25" pos:end="361:26">==</operator> <name pos:start="361:28" pos:end="361:38">TCPS_CLOSED</name></expr>)</condition><block type="pseudo" pos:start="363:17" pos:end="363:26"><block_content pos:start="363:17" pos:end="363:26">

		<goto pos:start="363:17" pos:end="363:26">goto <name pos:start="363:22" pos:end="363:25">drop</name>;</goto></block_content></block></if></if_stmt>



	<expr_stmt pos:start="367:9" pos:end="367:27"><expr pos:start="367:9" pos:end="367:26"><name pos:start="367:9" pos:end="367:13">tiwin</name> <operator pos:start="367:15" pos:end="367:15">=</operator> <name pos:start="367:17" pos:end="367:26"><name pos:start="367:17" pos:end="367:18">ti</name><operator pos:start="367:19" pos:end="367:20">-&gt;</operator><name pos:start="367:21" pos:end="367:26">ti_win</name></name></expr>;</expr_stmt>



	<comment type="block" pos:start="371:9" pos:end="377:11">/*

	 * Segment received on connection.

	 * Reset idle time and keep-alive timer.

	 */</comment>

	<expr_stmt pos:start="379:9" pos:end="379:23"><expr pos:start="379:9" pos:end="379:22"><name pos:start="379:9" pos:end="379:18"><name pos:start="379:9" pos:end="379:10">tp</name><operator pos:start="379:11" pos:end="379:12">-&gt;</operator><name pos:start="379:13" pos:end="379:18">t_idle</name></name> <operator pos:start="379:20" pos:end="379:20">=</operator> <literal type="number" pos:start="379:22" pos:end="379:22">0</literal></expr>;</expr_stmt>

	<if_stmt pos:start="381:9" pos:end="387:52"><if pos:start="381:9" pos:end="383:52">if <condition pos:start="381:12" pos:end="381:23">(<expr pos:start="381:13" pos:end="381:22"><name pos:start="381:13" pos:end="381:22">SO_OPTIONS</name></expr>)</condition><block type="pseudo" pos:start="383:12" pos:end="383:52"><block_content pos:start="383:12" pos:end="383:52">

	   <expr_stmt pos:start="383:12" pos:end="383:52"><expr pos:start="383:12" pos:end="383:51"><name pos:start="383:12" pos:end="383:33"><name pos:start="383:12" pos:end="383:13">tp</name><operator pos:start="383:14" pos:end="383:15">-&gt;</operator><name pos:start="383:16" pos:end="383:22">t_timer</name><index pos:start="383:23" pos:end="383:33">[<expr pos:start="383:24" pos:end="383:32"><name pos:start="383:24" pos:end="383:32">TCPT_KEEP</name></expr>]</index></name> <operator pos:start="383:35" pos:end="383:35">=</operator> <name pos:start="383:37" pos:end="383:51">TCPTV_KEEPINTVL</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="385:9" pos:end="387:52">else<block type="pseudo" pos:start="387:12" pos:end="387:52"><block_content pos:start="387:12" pos:end="387:52">

	   <expr_stmt pos:start="387:12" pos:end="387:52"><expr pos:start="387:12" pos:end="387:51"><name pos:start="387:12" pos:end="387:33"><name pos:start="387:12" pos:end="387:13">tp</name><operator pos:start="387:14" pos:end="387:15">-&gt;</operator><name pos:start="387:16" pos:end="387:22">t_timer</name><index pos:start="387:23" pos:end="387:33">[<expr pos:start="387:24" pos:end="387:32"><name pos:start="387:24" pos:end="387:32">TCPT_KEEP</name></expr>]</index></name> <operator pos:start="387:35" pos:end="387:35">=</operator> <name pos:start="387:37" pos:end="387:51">TCPTV_KEEP_IDLE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<comment type="block" pos:start="391:9" pos:end="397:11">/*

	 * Process options if not in LISTEN state,

	 * else do it below (after getting remote address).

	 */</comment>

	<if_stmt pos:start="399:9" pos:end="401:62"><if pos:start="399:9" pos:end="401:62">if <condition pos:start="399:12" pos:end="399:47">(<expr pos:start="399:13" pos:end="399:46"><name pos:start="399:13" pos:end="399:16">optp</name> <operator pos:start="399:18" pos:end="399:19">&amp;&amp;</operator> <name pos:start="399:21" pos:end="399:31"><name pos:start="399:21" pos:end="399:22">tp</name><operator pos:start="399:23" pos:end="399:24">-&gt;</operator><name pos:start="399:25" pos:end="399:31">t_state</name></name> <operator pos:start="399:33" pos:end="399:34">!=</operator> <name pos:start="399:36" pos:end="399:46">TCPS_LISTEN</name></expr>)</condition><block type="pseudo" pos:start="401:17" pos:end="401:62"><block_content pos:start="401:17" pos:end="401:62">

		<expr_stmt pos:start="401:17" pos:end="401:62"><expr pos:start="401:17" pos:end="401:61"><call pos:start="401:17" pos:end="401:61"><name pos:start="401:17" pos:end="401:29">tcp_dooptions</name><argument_list pos:start="401:30" pos:end="401:61">(<argument pos:start="401:31" pos:end="401:32"><expr pos:start="401:31" pos:end="401:32"><name pos:start="401:31" pos:end="401:32">tp</name></expr></argument>, <argument pos:start="401:35" pos:end="401:48"><expr pos:start="401:35" pos:end="401:48"><operator pos:start="401:35" pos:end="401:35">(</operator><name pos:start="401:36" pos:end="401:41">u_char</name> <operator pos:start="401:43" pos:end="401:43">*</operator><operator pos:start="401:44" pos:end="401:44">)</operator><name pos:start="401:45" pos:end="401:48">optp</name></expr></argument>, <argument pos:start="401:51" pos:end="401:56"><expr pos:start="401:51" pos:end="401:56"><name pos:start="401:51" pos:end="401:56">optlen</name></expr></argument>, <argument pos:start="401:59" pos:end="401:60"><expr pos:start="401:59" pos:end="401:60"><name pos:start="401:59" pos:end="401:60">ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<comment type="block" pos:start="405:9" pos:end="439:11">/*

	 * Header prediction: check for the two common cases

	 * of a uni-directional data xfer.  If the packet has

	 * no control flags, is in-sequence, the window didn't

	 * change and we're not retransmitting, it's a

	 * candidate.  If the length is zero and the ack moved

	 * forward, we're the sender side of the xfer.  Just

	 * free the data acked &amp; wake any higher level process

	 * that was blocked waiting for space.  If the length

	 * is non-zero and the ack didn't move, we're the

	 * receiver side.  If we're getting packets in-order

	 * (the reassembly queue is empty), add the data to

	 * the socket buffer and note that we need a delayed ack.

	 *

	 * XXX Some of these tests are not needed

	 * eg: the tiwin == tp-&gt;snd_wnd prevents many more

	 * predictions.. with no *real* advantage..

	 */</comment>

	<if_stmt pos:start="441:9" pos:end="587:9"><if pos:start="441:9" pos:end="587:9">if <condition pos:start="441:12" pos:end="449:39">(<expr pos:start="441:13" pos:end="449:38"><name pos:start="441:13" pos:end="441:23"><name pos:start="441:13" pos:end="441:14">tp</name><operator pos:start="441:15" pos:end="441:16">-&gt;</operator><name pos:start="441:17" pos:end="441:23">t_state</name></name> <operator pos:start="441:25" pos:end="441:26">==</operator> <name pos:start="441:28" pos:end="441:43">TCPS_ESTABLISHED</name> <operator pos:start="441:45" pos:end="441:46">&amp;&amp;</operator>

	    <operator pos:start="443:13" pos:end="443:13">(</operator><name pos:start="443:14" pos:end="443:20">tiflags</name> <operator pos:start="443:22" pos:end="443:22">&amp;</operator> <operator pos:start="443:24" pos:end="443:24">(</operator><name pos:start="443:25" pos:end="443:30">TH_SYN</name><operator pos:start="443:31" pos:end="443:31">|</operator><name pos:start="443:32" pos:end="443:37">TH_FIN</name><operator pos:start="443:38" pos:end="443:38">|</operator><name pos:start="443:39" pos:end="443:44">TH_RST</name><operator pos:start="443:45" pos:end="443:45">|</operator><name pos:start="443:46" pos:end="443:51">TH_URG</name><operator pos:start="443:52" pos:end="443:52">|</operator><name pos:start="443:53" pos:end="443:58">TH_ACK</name><operator pos:start="443:59" pos:end="443:59">)</operator><operator pos:start="443:60" pos:end="443:60">)</operator> <operator pos:start="443:62" pos:end="443:63">==</operator> <name pos:start="443:65" pos:end="443:70">TH_ACK</name> <operator pos:start="443:72" pos:end="443:73">&amp;&amp;</operator>

	    <name pos:start="445:13" pos:end="445:22"><name pos:start="445:13" pos:end="445:14">ti</name><operator pos:start="445:15" pos:end="445:16">-&gt;</operator><name pos:start="445:17" pos:end="445:22">ti_seq</name></name> <operator pos:start="445:24" pos:end="445:25">==</operator> <name pos:start="445:27" pos:end="445:37"><name pos:start="445:27" pos:end="445:28">tp</name><operator pos:start="445:29" pos:end="445:30">-&gt;</operator><name pos:start="445:31" pos:end="445:37">rcv_nxt</name></name> <operator pos:start="445:39" pos:end="445:40">&amp;&amp;</operator>

	    <name pos:start="447:13" pos:end="447:17">tiwin</name> <operator pos:start="447:19" pos:end="447:20">&amp;&amp;</operator> <name pos:start="447:22" pos:end="447:26">tiwin</name> <operator pos:start="447:28" pos:end="447:29">==</operator> <name pos:start="447:31" pos:end="447:41"><name pos:start="447:31" pos:end="447:32">tp</name><operator pos:start="447:33" pos:end="447:34">-&gt;</operator><name pos:start="447:35" pos:end="447:41">snd_wnd</name></name> <operator pos:start="447:43" pos:end="447:44">&amp;&amp;</operator>

	    <name pos:start="449:13" pos:end="449:23"><name pos:start="449:13" pos:end="449:14">tp</name><operator pos:start="449:15" pos:end="449:16">-&gt;</operator><name pos:start="449:17" pos:end="449:23">snd_nxt</name></name> <operator pos:start="449:25" pos:end="449:26">==</operator> <name pos:start="449:28" pos:end="449:38"><name pos:start="449:28" pos:end="449:29">tp</name><operator pos:start="449:30" pos:end="449:31">-&gt;</operator><name pos:start="449:32" pos:end="449:38">snd_max</name></name></expr>)</condition> <block pos:start="449:41" pos:end="587:9">{<block_content pos:start="451:17" pos:end="585:17">

		<if_stmt pos:start="451:17" pos:end="585:17"><if pos:start="451:17" pos:end="529:17">if <condition pos:start="451:20" pos:end="451:36">(<expr pos:start="451:21" pos:end="451:35"><name pos:start="451:21" pos:end="451:30"><name pos:start="451:21" pos:end="451:22">ti</name><operator pos:start="451:23" pos:end="451:24">-&gt;</operator><name pos:start="451:25" pos:end="451:30">ti_len</name></name> <operator pos:start="451:32" pos:end="451:33">==</operator> <literal type="number" pos:start="451:35" pos:end="451:35">0</literal></expr>)</condition> <block pos:start="451:38" pos:end="529:17">{<block_content pos:start="453:25" pos:end="527:25">

			<if_stmt pos:start="453:25" pos:end="527:25"><if pos:start="453:25" pos:end="527:25">if <condition pos:start="453:28" pos:end="457:56">(<expr pos:start="453:29" pos:end="457:55"><call pos:start="453:29" pos:end="453:59"><name pos:start="453:29" pos:end="453:34">SEQ_GT</name><argument_list pos:start="453:35" pos:end="453:59">(<argument pos:start="453:36" pos:end="453:45"><expr pos:start="453:36" pos:end="453:45"><name pos:start="453:36" pos:end="453:45"><name pos:start="453:36" pos:end="453:37">ti</name><operator pos:start="453:38" pos:end="453:39">-&gt;</operator><name pos:start="453:40" pos:end="453:45">ti_ack</name></name></expr></argument>, <argument pos:start="453:48" pos:end="453:58"><expr pos:start="453:48" pos:end="453:58"><name pos:start="453:48" pos:end="453:58"><name pos:start="453:48" pos:end="453:49">tp</name><operator pos:start="453:50" pos:end="453:51">-&gt;</operator><name pos:start="453:52" pos:end="453:58">snd_una</name></name></expr></argument>)</argument_list></call> <operator pos:start="453:61" pos:end="453:62">&amp;&amp;</operator>

			    <call pos:start="455:29" pos:end="455:60"><name pos:start="455:29" pos:end="455:35">SEQ_LEQ</name><argument_list pos:start="455:36" pos:end="455:60">(<argument pos:start="455:37" pos:end="455:46"><expr pos:start="455:37" pos:end="455:46"><name pos:start="455:37" pos:end="455:46"><name pos:start="455:37" pos:end="455:38">ti</name><operator pos:start="455:39" pos:end="455:40">-&gt;</operator><name pos:start="455:41" pos:end="455:46">ti_ack</name></name></expr></argument>, <argument pos:start="455:49" pos:end="455:59"><expr pos:start="455:49" pos:end="455:59"><name pos:start="455:49" pos:end="455:59"><name pos:start="455:49" pos:end="455:50">tp</name><operator pos:start="455:51" pos:end="455:52">-&gt;</operator><name pos:start="455:53" pos:end="455:59">snd_max</name></name></expr></argument>)</argument_list></call> <operator pos:start="455:62" pos:end="455:63">&amp;&amp;</operator>

			    <name pos:start="457:29" pos:end="457:40"><name pos:start="457:29" pos:end="457:30">tp</name><operator pos:start="457:31" pos:end="457:32">-&gt;</operator><name pos:start="457:33" pos:end="457:40">snd_cwnd</name></name> <operator pos:start="457:42" pos:end="457:43">&gt;=</operator> <name pos:start="457:45" pos:end="457:55"><name pos:start="457:45" pos:end="457:46">tp</name><operator pos:start="457:47" pos:end="457:48">-&gt;</operator><name pos:start="457:49" pos:end="457:55">snd_wnd</name></name></expr>)</condition> <block pos:start="457:58" pos:end="527:25">{<block_content pos:start="465:33" pos:end="525:39">

				<comment type="block" pos:start="459:33" pos:end="463:35">/*

				 * this is a pure ack for outstanding data.

				 */</comment>

				<if_stmt pos:start="465:33" pos:end="469:70"><if pos:start="465:33" pos:end="469:70">if <condition pos:start="465:36" pos:end="467:68">(<expr pos:start="465:37" pos:end="467:67"><name pos:start="465:37" pos:end="465:45"><name pos:start="465:37" pos:end="465:38">tp</name><operator pos:start="465:39" pos:end="465:40">-&gt;</operator><name pos:start="465:41" pos:end="465:45">t_rtt</name></name> <operator pos:start="465:47" pos:end="465:48">&amp;&amp;</operator>

				    <call pos:start="467:37" pos:end="467:67"><name pos:start="467:37" pos:end="467:42">SEQ_GT</name><argument_list pos:start="467:43" pos:end="467:67">(<argument pos:start="467:44" pos:end="467:53"><expr pos:start="467:44" pos:end="467:53"><name pos:start="467:44" pos:end="467:53"><name pos:start="467:44" pos:end="467:45">ti</name><operator pos:start="467:46" pos:end="467:47">-&gt;</operator><name pos:start="467:48" pos:end="467:53">ti_ack</name></name></expr></argument>, <argument pos:start="467:56" pos:end="467:66"><expr pos:start="467:56" pos:end="467:66"><name pos:start="467:56" pos:end="467:66"><name pos:start="467:56" pos:end="467:57">tp</name><operator pos:start="467:58" pos:end="467:59">-&gt;</operator><name pos:start="467:60" pos:end="467:66">t_rtseq</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="469:41" pos:end="469:70"><block_content pos:start="469:41" pos:end="469:70">

					<expr_stmt pos:start="469:41" pos:end="469:70"><expr pos:start="469:41" pos:end="469:69"><call pos:start="469:41" pos:end="469:69"><name pos:start="469:41" pos:end="469:54">tcp_xmit_timer</name><argument_list pos:start="469:55" pos:end="469:69">(<argument pos:start="469:56" pos:end="469:57"><expr pos:start="469:56" pos:end="469:57"><name pos:start="469:56" pos:end="469:57">tp</name></expr></argument>, <argument pos:start="469:60" pos:end="469:68"><expr pos:start="469:60" pos:end="469:68"><name pos:start="469:60" pos:end="469:68"><name pos:start="469:60" pos:end="469:61">tp</name><operator pos:start="469:62" pos:end="469:63">-&gt;</operator><name pos:start="469:64" pos:end="469:68">t_rtt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt pos:start="471:33" pos:end="471:65"><expr pos:start="471:33" pos:end="471:64"><name pos:start="471:33" pos:end="471:37">acked</name> <operator pos:start="471:39" pos:end="471:39">=</operator> <name pos:start="471:41" pos:end="471:50"><name pos:start="471:41" pos:end="471:42">ti</name><operator pos:start="471:43" pos:end="471:44">-&gt;</operator><name pos:start="471:45" pos:end="471:50">ti_ack</name></name> <operator pos:start="471:52" pos:end="471:52">-</operator> <name pos:start="471:54" pos:end="471:64"><name pos:start="471:54" pos:end="471:55">tp</name><operator pos:start="471:56" pos:end="471:57">-&gt;</operator><name pos:start="471:58" pos:end="471:64">snd_una</name></name></expr>;</expr_stmt>

				<expr_stmt pos:start="473:33" pos:end="473:59"><expr pos:start="473:33" pos:end="473:58"><call pos:start="473:33" pos:end="473:58"><name pos:start="473:33" pos:end="473:38">sbdrop</name><argument_list pos:start="473:39" pos:end="473:58">(<argument pos:start="473:40" pos:end="473:50"><expr pos:start="473:40" pos:end="473:50"><operator pos:start="473:40" pos:end="473:40">&amp;</operator><name pos:start="473:41" pos:end="473:50"><name pos:start="473:41" pos:end="473:42">so</name><operator pos:start="473:43" pos:end="473:44">-&gt;</operator><name pos:start="473:45" pos:end="473:50">so_snd</name></name></expr></argument>, <argument pos:start="473:53" pos:end="473:57"><expr pos:start="473:53" pos:end="473:57"><name pos:start="473:53" pos:end="473:57">acked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt pos:start="475:33" pos:end="475:57"><expr pos:start="475:33" pos:end="475:56"><name pos:start="475:33" pos:end="475:43"><name pos:start="475:33" pos:end="475:34">tp</name><operator pos:start="475:35" pos:end="475:36">-&gt;</operator><name pos:start="475:37" pos:end="475:43">snd_una</name></name> <operator pos:start="475:45" pos:end="475:45">=</operator> <name pos:start="475:47" pos:end="475:56"><name pos:start="475:47" pos:end="475:48">ti</name><operator pos:start="475:49" pos:end="475:50">-&gt;</operator><name pos:start="475:51" pos:end="475:56">ti_ack</name></name></expr>;</expr_stmt>

				<expr_stmt pos:start="477:33" pos:end="477:42"><expr pos:start="477:33" pos:end="477:41"><call pos:start="477:33" pos:end="477:41"><name pos:start="477:33" pos:end="477:38">m_free</name><argument_list pos:start="477:39" pos:end="477:41">(<argument pos:start="477:40" pos:end="477:40"><expr pos:start="477:40" pos:end="477:40"><name pos:start="477:40" pos:end="477:40">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



				<comment type="block" pos:start="481:33" pos:end="497:35">/*

				 * If all outstanding data are acked, stop

				 * retransmit timer, otherwise restart timer

				 * using current (possibly backed-off) value.

				 * If process is waiting for space,

				 * wakeup/selwakeup/signal.  If data

				 * are ready to send, let tcp_output

				 * decide between more output or persist.

				 */</comment>

				<if_stmt pos:start="499:33" pos:end="505:79"><if pos:start="499:33" pos:end="501:68">if <condition pos:start="499:36" pos:end="499:63">(<expr pos:start="499:37" pos:end="499:62"><name pos:start="499:37" pos:end="499:47"><name pos:start="499:37" pos:end="499:38">tp</name><operator pos:start="499:39" pos:end="499:40">-&gt;</operator><name pos:start="499:41" pos:end="499:47">snd_una</name></name> <operator pos:start="499:49" pos:end="499:50">==</operator> <name pos:start="499:52" pos:end="499:62"><name pos:start="499:52" pos:end="499:53">tp</name><operator pos:start="499:54" pos:end="499:55">-&gt;</operator><name pos:start="499:56" pos:end="499:62">snd_max</name></name></expr>)</condition><block type="pseudo" pos:start="501:41" pos:end="501:68"><block_content pos:start="501:41" pos:end="501:68">

					<expr_stmt pos:start="501:41" pos:end="501:68"><expr pos:start="501:41" pos:end="501:67"><name pos:start="501:41" pos:end="501:63"><name pos:start="501:41" pos:end="501:42">tp</name><operator pos:start="501:43" pos:end="501:44">-&gt;</operator><name pos:start="501:45" pos:end="501:51">t_timer</name><index pos:start="501:52" pos:end="501:63">[<expr pos:start="501:53" pos:end="501:62"><name pos:start="501:53" pos:end="501:62">TCPT_REXMT</name></expr>]</index></name> <operator pos:start="501:65" pos:end="501:65">=</operator> <literal type="number" pos:start="501:67" pos:end="501:67">0</literal></expr>;</expr_stmt></block_content></block></if>

				<if type="elseif" pos:start="503:33" pos:end="505:79">else if <condition pos:start="503:41" pos:end="503:72">(<expr pos:start="503:42" pos:end="503:71"><name pos:start="503:42" pos:end="503:66"><name pos:start="503:42" pos:end="503:43">tp</name><operator pos:start="503:44" pos:end="503:45">-&gt;</operator><name pos:start="503:46" pos:end="503:52">t_timer</name><index pos:start="503:53" pos:end="503:66">[<expr pos:start="503:54" pos:end="503:65"><name pos:start="503:54" pos:end="503:65">TCPT_PERSIST</name></expr>]</index></name> <operator pos:start="503:68" pos:end="503:69">==</operator> <literal type="number" pos:start="503:71" pos:end="503:71">0</literal></expr>)</condition><block type="pseudo" pos:start="505:41" pos:end="505:79"><block_content pos:start="505:41" pos:end="505:79">

					<expr_stmt pos:start="505:41" pos:end="505:79"><expr pos:start="505:41" pos:end="505:78"><name pos:start="505:41" pos:end="505:63"><name pos:start="505:41" pos:end="505:42">tp</name><operator pos:start="505:43" pos:end="505:44">-&gt;</operator><name pos:start="505:45" pos:end="505:51">t_timer</name><index pos:start="505:52" pos:end="505:63">[<expr pos:start="505:53" pos:end="505:62"><name pos:start="505:53" pos:end="505:62">TCPT_REXMT</name></expr>]</index></name> <operator pos:start="505:65" pos:end="505:65">=</operator> <name pos:start="505:67" pos:end="505:78"><name pos:start="505:67" pos:end="505:68">tp</name><operator pos:start="505:69" pos:end="505:70">-&gt;</operator><name pos:start="505:71" pos:end="505:78">t_rxtcur</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



				<comment type="block" pos:start="509:33" pos:end="517:35">/*

				 * This is called because sowwakeup might have

				 * put data into so_snd.  Since we don't so sowwakeup,

				 * we don't need this.. XXX???

				 */</comment>

				<if_stmt pos:start="519:33" pos:end="521:62"><if pos:start="519:33" pos:end="521:62">if <condition pos:start="519:36" pos:end="519:53">(<expr pos:start="519:37" pos:end="519:52"><name pos:start="519:37" pos:end="519:52"><name pos:start="519:37" pos:end="519:38">so</name><operator pos:start="519:39" pos:end="519:40">-&gt;</operator><name pos:start="519:41" pos:end="519:46">so_snd</name><operator pos:start="519:47" pos:end="519:47">.</operator><name pos:start="519:48" pos:end="519:52">sb_cc</name></name></expr>)</condition><block type="pseudo" pos:start="521:41" pos:end="521:62"><block_content pos:start="521:41" pos:end="521:62">

					<expr_stmt pos:start="521:41" pos:end="521:62"><expr pos:start="521:41" pos:end="521:61"><operator pos:start="521:41" pos:end="521:41">(</operator><name pos:start="521:42" pos:end="521:45">void</name><operator pos:start="521:46" pos:end="521:46">)</operator> <call pos:start="521:48" pos:end="521:61"><name pos:start="521:48" pos:end="521:57">tcp_output</name><argument_list pos:start="521:58" pos:end="521:61">(<argument pos:start="521:59" pos:end="521:60"><expr pos:start="521:59" pos:end="521:60"><name pos:start="521:59" pos:end="521:60">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



				<return pos:start="525:33" pos:end="525:39">return;</return>

			</block_content>}</block></if></if_stmt>

		</block_content>}</block></if> <if type="elseif" pos:start="529:19" pos:end="585:17">else if <condition pos:start="529:27" pos:end="533:55">(<expr pos:start="529:28" pos:end="533:54"><name pos:start="529:28" pos:end="529:37"><name pos:start="529:28" pos:end="529:29">ti</name><operator pos:start="529:30" pos:end="529:31">-&gt;</operator><name pos:start="529:32" pos:end="529:37">ti_ack</name></name> <operator pos:start="529:39" pos:end="529:40">==</operator> <name pos:start="529:42" pos:end="529:52"><name pos:start="529:42" pos:end="529:43">tp</name><operator pos:start="529:44" pos:end="529:45">-&gt;</operator><name pos:start="529:46" pos:end="529:52">snd_una</name></name> <operator pos:start="529:54" pos:end="529:55">&amp;&amp;</operator>

		    <call pos:start="531:21" pos:end="531:42"><name pos:start="531:21" pos:end="531:38">tcpfrag_list_empty</name><argument_list pos:start="531:39" pos:end="531:42">(<argument pos:start="531:40" pos:end="531:41"><expr pos:start="531:40" pos:end="531:41"><name pos:start="531:40" pos:end="531:41">tp</name></expr></argument>)</argument_list></call> <operator pos:start="531:44" pos:end="531:45">&amp;&amp;</operator>

		    <name pos:start="533:21" pos:end="533:30"><name pos:start="533:21" pos:end="533:22">ti</name><operator pos:start="533:23" pos:end="533:24">-&gt;</operator><name pos:start="533:25" pos:end="533:30">ti_len</name></name> <operator pos:start="533:32" pos:end="533:33">&lt;=</operator> <call pos:start="533:35" pos:end="533:54"><name pos:start="533:35" pos:end="533:41">sbspace</name><argument_list pos:start="533:42" pos:end="533:54">(<argument pos:start="533:43" pos:end="533:53"><expr pos:start="533:43" pos:end="533:53"><operator pos:start="533:43" pos:end="533:43">&amp;</operator><name pos:start="533:44" pos:end="533:53"><name pos:start="533:44" pos:end="533:45">so</name><operator pos:start="533:46" pos:end="533:47">-&gt;</operator><name pos:start="533:48" pos:end="533:53">so_rcv</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="533:57" pos:end="585:17">{<block_content pos:start="545:25" pos:end="583:31">

			<comment type="block" pos:start="535:25" pos:end="543:27">/*

			 * this is a pure, in-sequence data packet

			 * with nothing on the reassembly queue and

			 * we have enough buffer space to take it.

			 */</comment>

			<expr_stmt pos:start="545:25" pos:end="545:50"><expr pos:start="545:25" pos:end="545:49"><name pos:start="545:25" pos:end="545:35"><name pos:start="545:25" pos:end="545:26">tp</name><operator pos:start="545:27" pos:end="545:28">-&gt;</operator><name pos:start="545:29" pos:end="545:35">rcv_nxt</name></name> <operator pos:start="545:37" pos:end="545:38">+=</operator> <name pos:start="545:40" pos:end="545:49"><name pos:start="545:40" pos:end="545:41">ti</name><operator pos:start="545:42" pos:end="545:43">-&gt;</operator><name pos:start="545:44" pos:end="545:49">ti_len</name></name></expr>;</expr_stmt>

			<comment type="block" pos:start="547:25" pos:end="551:27">/*

			 * Add data to socket buffer.

			 */</comment>

			<if_stmt pos:start="553:25" pos:end="559:48"><if pos:start="553:25" pos:end="557:25">if <condition pos:start="553:28" pos:end="553:39">(<expr pos:start="553:29" pos:end="553:38"><name pos:start="553:29" pos:end="553:38"><name pos:start="553:29" pos:end="553:30">so</name><operator pos:start="553:31" pos:end="553:32">-&gt;</operator><name pos:start="553:33" pos:end="553:38">so_emu</name></name></expr>)</condition> <block pos:start="553:41" pos:end="557:25">{<block_content pos:start="555:33" pos:end="555:67">

				<if_stmt pos:start="555:33" pos:end="555:67"><if pos:start="555:33" pos:end="555:67">if <condition pos:start="555:36" pos:end="555:50">(<expr pos:start="555:37" pos:end="555:49"><call pos:start="555:37" pos:end="555:49"><name pos:start="555:37" pos:end="555:43">tcp_emu</name><argument_list pos:start="555:44" pos:end="555:49">(<argument pos:start="555:45" pos:end="555:46"><expr pos:start="555:45" pos:end="555:46"><name pos:start="555:45" pos:end="555:46">so</name></expr></argument>,<argument pos:start="555:48" pos:end="555:48"><expr pos:start="555:48" pos:end="555:48"><name pos:start="555:48" pos:end="555:48">m</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="555:52" pos:end="555:67"><block_content pos:start="555:52" pos:end="555:67"> <expr_stmt pos:start="555:52" pos:end="555:67"><expr pos:start="555:52" pos:end="555:66"><call pos:start="555:52" pos:end="555:66"><name pos:start="555:52" pos:end="555:59">sbappend</name><argument_list pos:start="555:60" pos:end="555:66">(<argument pos:start="555:61" pos:end="555:62"><expr pos:start="555:61" pos:end="555:62"><name pos:start="555:61" pos:end="555:62">so</name></expr></argument>, <argument pos:start="555:65" pos:end="555:65"><expr pos:start="555:65" pos:end="555:65"><name pos:start="555:65" pos:end="555:65">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			</block_content>}</block></if> <else pos:start="557:27" pos:end="559:48">else<block type="pseudo" pos:start="559:33" pos:end="559:48"><block_content pos:start="559:33" pos:end="559:48">

				<expr_stmt pos:start="559:33" pos:end="559:48"><expr pos:start="559:33" pos:end="559:47"><call pos:start="559:33" pos:end="559:47"><name pos:start="559:33" pos:end="559:40">sbappend</name><argument_list pos:start="559:41" pos:end="559:47">(<argument pos:start="559:42" pos:end="559:43"><expr pos:start="559:42" pos:end="559:43"><name pos:start="559:42" pos:end="559:43">so</name></expr></argument>, <argument pos:start="559:46" pos:end="559:46"><expr pos:start="559:46" pos:end="559:46"><name pos:start="559:46" pos:end="559:46">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



			<comment type="block" pos:start="563:25" pos:end="577:27">/*

			 * If this is a short packet, then ACK now - with Nagel

			 *	congestion avoidance sender won't send more until

			 *	he gets an ACK.

			 *

			 * It is better to not delay acks at all to maximize

			 * TCP throughput.  See RFC 2581.

			 */</comment>

			<expr_stmt pos:start="579:25" pos:end="579:49"><expr pos:start="579:25" pos:end="579:48"><name pos:start="579:25" pos:end="579:35"><name pos:start="579:25" pos:end="579:26">tp</name><operator pos:start="579:27" pos:end="579:28">-&gt;</operator><name pos:start="579:29" pos:end="579:35">t_flags</name></name> <operator pos:start="579:37" pos:end="579:38">|=</operator> <name pos:start="579:40" pos:end="579:48">TF_ACKNOW</name></expr>;</expr_stmt>

			<expr_stmt pos:start="581:25" pos:end="581:39"><expr pos:start="581:25" pos:end="581:38"><call pos:start="581:25" pos:end="581:38"><name pos:start="581:25" pos:end="581:34">tcp_output</name><argument_list pos:start="581:35" pos:end="581:38">(<argument pos:start="581:36" pos:end="581:37"><expr pos:start="581:36" pos:end="581:37"><name pos:start="581:36" pos:end="581:37">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="583:25" pos:end="583:31">return;</return>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt> <comment type="block" pos:start="587:11" pos:end="587:33">/* header prediction */</comment>

	<comment type="block" pos:start="589:9" pos:end="599:11">/*

	 * Calculate amount of space in receive window,

	 * and then do TCP input processing.

	 * Receive window is amount of space in rcv queue,

	 * but not less than advertised window.

	 */</comment>

	<block pos:start="601:9" pos:end="611:9">{<block_content pos:start="601:11" pos:end="609:67"> <decl_stmt pos:start="601:11" pos:end="601:18"><decl pos:start="601:11" pos:end="601:17"><type pos:start="601:11" pos:end="601:13"><name pos:start="601:11" pos:end="601:13">int</name></type> <name pos:start="601:15" pos:end="601:17">win</name></decl>;</decl_stmt>

          <expr_stmt pos:start="603:11" pos:end="603:37"><expr pos:start="603:11" pos:end="603:36"><name pos:start="603:11" pos:end="603:13">win</name> <operator pos:start="603:15" pos:end="603:15">=</operator> <call pos:start="603:17" pos:end="603:36"><name pos:start="603:17" pos:end="603:23">sbspace</name><argument_list pos:start="603:24" pos:end="603:36">(<argument pos:start="603:25" pos:end="603:35"><expr pos:start="603:25" pos:end="603:35"><operator pos:start="603:25" pos:end="603:25">&amp;</operator><name pos:start="603:26" pos:end="603:35"><name pos:start="603:26" pos:end="603:27">so</name><operator pos:start="603:28" pos:end="603:29">-&gt;</operator><name pos:start="603:30" pos:end="603:35">so_rcv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt pos:start="605:11" pos:end="607:20"><if pos:start="605:11" pos:end="607:20">if <condition pos:start="605:14" pos:end="605:22">(<expr pos:start="605:15" pos:end="605:21"><name pos:start="605:15" pos:end="605:17">win</name> <operator pos:start="605:19" pos:end="605:19">&lt;</operator> <literal type="number" pos:start="605:21" pos:end="605:21">0</literal></expr>)</condition><block type="pseudo" pos:start="607:13" pos:end="607:20"><block_content pos:start="607:13" pos:end="607:20">

	    <expr_stmt pos:start="607:13" pos:end="607:20"><expr pos:start="607:13" pos:end="607:19"><name pos:start="607:13" pos:end="607:15">win</name> <operator pos:start="607:17" pos:end="607:17">=</operator> <literal type="number" pos:start="607:19" pos:end="607:19">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <expr_stmt pos:start="609:11" pos:end="609:67"><expr pos:start="609:11" pos:end="609:66"><name pos:start="609:11" pos:end="609:21"><name pos:start="609:11" pos:end="609:12">tp</name><operator pos:start="609:13" pos:end="609:14">-&gt;</operator><name pos:start="609:15" pos:end="609:21">rcv_wnd</name></name> <operator pos:start="609:23" pos:end="609:23">=</operator> <call pos:start="609:25" pos:end="609:66"><name pos:start="609:25" pos:end="609:27">max</name><argument_list pos:start="609:28" pos:end="609:66">(<argument pos:start="609:29" pos:end="609:31"><expr pos:start="609:29" pos:end="609:31"><name pos:start="609:29" pos:end="609:31">win</name></expr></argument>, <argument pos:start="609:34" pos:end="609:65"><expr pos:start="609:34" pos:end="609:65"><operator pos:start="609:34" pos:end="609:34">(</operator><name pos:start="609:35" pos:end="609:37">int</name><operator pos:start="609:38" pos:end="609:38">)</operator><operator pos:start="609:39" pos:end="609:39">(</operator><name pos:start="609:40" pos:end="609:50"><name pos:start="609:40" pos:end="609:41">tp</name><operator pos:start="609:42" pos:end="609:43">-&gt;</operator><name pos:start="609:44" pos:end="609:50">rcv_adv</name></name> <operator pos:start="609:52" pos:end="609:52">-</operator> <name pos:start="609:54" pos:end="609:64"><name pos:start="609:54" pos:end="609:55">tp</name><operator pos:start="609:56" pos:end="609:57">-&gt;</operator><name pos:start="609:58" pos:end="609:64">rcv_nxt</name></name><operator pos:start="609:65" pos:end="609:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block>



	<switch pos:start="615:9" pos:end="995:9">switch <condition pos:start="615:16" pos:end="615:28">(<expr pos:start="615:17" pos:end="615:27"><name pos:start="615:17" pos:end="615:27"><name pos:start="615:17" pos:end="615:18">tp</name><operator pos:start="615:19" pos:end="615:20">-&gt;</operator><name pos:start="615:21" pos:end="615:27">t_state</name></name></expr>)</condition> <block pos:start="615:30" pos:end="995:9">{<block_content pos:start="645:9" pos:end="993:27">



	<comment type="block" pos:start="619:9" pos:end="643:11">/*

	 * If the state is LISTEN then ignore segment if it contains an RST.

	 * If the segment contains an ACK then it is bad and send a RST.

	 * If it does not contain a SYN then it is not interesting; drop it.

	 * Don't bother responding if the destination was a broadcast.

	 * Otherwise initialize tp-&gt;rcv_nxt, and tp-&gt;irs, select an initial

	 * tp-&gt;iss, and send a segment:

	 *     &lt;SEQ=ISS&gt;&lt;ACK=RCV_NXT&gt;&lt;CTL=SYN,ACK&gt;

	 * Also initialize tp-&gt;snd_nxt to tp-&gt;iss+1 and tp-&gt;snd_una to tp-&gt;iss.

	 * Fill in remote peer address fields if not previously specified.

	 * Enter SYN_RECEIVED state, and process any other fields of this

	 * segment in this state.

	 */</comment>

	<case pos:start="645:9" pos:end="645:25">case <expr pos:start="645:14" pos:end="645:24"><name pos:start="645:14" pos:end="645:24">TCPS_LISTEN</name></expr>:</case> <block pos:start="645:27" pos:end="855:9">{<block_content pos:start="649:11" pos:end="853:29">



	  <if_stmt pos:start="649:11" pos:end="651:22"><if pos:start="649:11" pos:end="651:22">if <condition pos:start="649:14" pos:end="649:31">(<expr pos:start="649:15" pos:end="649:30"><name pos:start="649:15" pos:end="649:21">tiflags</name> <operator pos:start="649:23" pos:end="649:23">&amp;</operator> <name pos:start="649:25" pos:end="649:30">TH_RST</name></expr>)</condition><block type="pseudo" pos:start="651:13" pos:end="651:22"><block_content pos:start="651:13" pos:end="651:22">

	    <goto pos:start="651:13" pos:end="651:22">goto <name pos:start="651:18" pos:end="651:21">drop</name>;</goto></block_content></block></if></if_stmt>

	  <if_stmt pos:start="653:11" pos:end="655:31"><if pos:start="653:11" pos:end="655:31">if <condition pos:start="653:14" pos:end="653:31">(<expr pos:start="653:15" pos:end="653:30"><name pos:start="653:15" pos:end="653:21">tiflags</name> <operator pos:start="653:23" pos:end="653:23">&amp;</operator> <name pos:start="653:25" pos:end="653:30">TH_ACK</name></expr>)</condition><block type="pseudo" pos:start="655:13" pos:end="655:31"><block_content pos:start="655:13" pos:end="655:31">

	    <goto pos:start="655:13" pos:end="655:31">goto <name pos:start="655:18" pos:end="655:30">dropwithreset</name>;</goto></block_content></block></if></if_stmt>

	  <if_stmt pos:start="657:11" pos:end="659:22"><if pos:start="657:11" pos:end="659:22">if <condition pos:start="657:14" pos:end="657:38">(<expr pos:start="657:15" pos:end="657:37"><operator pos:start="657:15" pos:end="657:15">(</operator><name pos:start="657:16" pos:end="657:22">tiflags</name> <operator pos:start="657:24" pos:end="657:24">&amp;</operator> <name pos:start="657:26" pos:end="657:31">TH_SYN</name><operator pos:start="657:32" pos:end="657:32">)</operator> <operator pos:start="657:34" pos:end="657:35">==</operator> <literal type="number" pos:start="657:37" pos:end="657:37">0</literal></expr>)</condition><block type="pseudo" pos:start="659:13" pos:end="659:22"><block_content pos:start="659:13" pos:end="659:22">

	    <goto pos:start="659:13" pos:end="659:22">goto <name pos:start="659:18" pos:end="659:21">drop</name>;</goto></block_content></block></if></if_stmt>



	  <comment type="block" pos:start="663:11" pos:end="669:13">/*

	   * This has way too many gotos...

	   * But a bit of spaghetti code never hurt anybody :)

	   */</comment>



	  <comment type="block" pos:start="673:11" pos:end="679:13">/*

	   * If this is destined for the control address, then flag to

	   * tcp_ctl once connected, otherwise connect

	   */</comment>

	  <if_stmt pos:start="681:11" pos:end="717:11"><if pos:start="681:11" pos:end="717:11">if <condition pos:start="681:14" pos:end="683:42">(<expr pos:start="681:15" pos:end="683:41"><operator pos:start="681:15" pos:end="681:15">(</operator><name pos:start="681:16" pos:end="681:34"><name pos:start="681:16" pos:end="681:17">so</name><operator pos:start="681:18" pos:end="681:19">-&gt;</operator><name pos:start="681:20" pos:end="681:27">so_faddr</name><operator pos:start="681:28" pos:end="681:28">.</operator><name pos:start="681:29" pos:end="681:34">s_addr</name></name> <operator pos:start="681:36" pos:end="681:36">&amp;</operator> <name pos:start="681:38" pos:end="681:64"><name pos:start="681:38" pos:end="681:42">slirp</name><operator pos:start="681:43" pos:end="681:44">-&gt;</operator><name pos:start="681:45" pos:end="681:57">vnetwork_mask</name><operator pos:start="681:58" pos:end="681:58">.</operator><name pos:start="681:59" pos:end="681:64">s_addr</name></name><operator pos:start="681:65" pos:end="681:65">)</operator> <operator pos:start="681:67" pos:end="681:68">==</operator>

	      <name pos:start="683:15" pos:end="683:41"><name pos:start="683:15" pos:end="683:19">slirp</name><operator pos:start="683:20" pos:end="683:21">-&gt;</operator><name pos:start="683:22" pos:end="683:34">vnetwork_addr</name><operator pos:start="683:35" pos:end="683:35">.</operator><name pos:start="683:36" pos:end="683:41">s_addr</name></name></expr>)</condition> <block pos:start="683:44" pos:end="717:11">{<block_content pos:start="685:13" pos:end="713:13">

	    <if_stmt pos:start="685:13" pos:end="713:13"><if pos:start="685:13" pos:end="713:13">if <condition pos:start="685:16" pos:end="687:70">(<expr pos:start="685:17" pos:end="687:69"><name pos:start="685:17" pos:end="685:35"><name pos:start="685:17" pos:end="685:18">so</name><operator pos:start="685:19" pos:end="685:20">-&gt;</operator><name pos:start="685:21" pos:end="685:28">so_faddr</name><operator pos:start="685:29" pos:end="685:29">.</operator><name pos:start="685:30" pos:end="685:35">s_addr</name></name> <operator pos:start="685:37" pos:end="685:38">!=</operator> <name pos:start="685:40" pos:end="685:63"><name pos:start="685:40" pos:end="685:44">slirp</name><operator pos:start="685:45" pos:end="685:46">-&gt;</operator><name pos:start="685:47" pos:end="685:56">vhost_addr</name><operator pos:start="685:57" pos:end="685:57">.</operator><name pos:start="685:58" pos:end="685:63">s_addr</name></name> <operator pos:start="685:65" pos:end="685:66">&amp;&amp;</operator>

		<name pos:start="687:17" pos:end="687:35"><name pos:start="687:17" pos:end="687:18">so</name><operator pos:start="687:19" pos:end="687:20">-&gt;</operator><name pos:start="687:21" pos:end="687:28">so_faddr</name><operator pos:start="687:29" pos:end="687:29">.</operator><name pos:start="687:30" pos:end="687:35">s_addr</name></name> <operator pos:start="687:37" pos:end="687:38">!=</operator> <name pos:start="687:40" pos:end="687:69"><name pos:start="687:40" pos:end="687:44">slirp</name><operator pos:start="687:45" pos:end="687:46">-&gt;</operator><name pos:start="687:47" pos:end="687:62">vnameserver_addr</name><operator pos:start="687:63" pos:end="687:63">.</operator><name pos:start="687:64" pos:end="687:69">s_addr</name></name></expr>)</condition> <block pos:start="687:72" pos:end="713:13">{<block_content pos:start="691:17" pos:end="711:17">

		<comment type="block" pos:start="689:17" pos:end="689:40">/* May be an add exec */</comment>

		<for pos:start="691:17" pos:end="705:17">for <control pos:start="691:21" pos:end="693:46">(<init pos:start="691:22" pos:end="691:47"><expr pos:start="691:22" pos:end="691:46"><name pos:start="691:22" pos:end="691:27">ex_ptr</name> <operator pos:start="691:29" pos:end="691:29">=</operator> <name pos:start="691:31" pos:end="691:46"><name pos:start="691:31" pos:end="691:35">slirp</name><operator pos:start="691:36" pos:end="691:37">-&gt;</operator><name pos:start="691:38" pos:end="691:46">exec_list</name></name></expr>;</init> <condition pos:start="691:49" pos:end="691:55"><expr pos:start="691:49" pos:end="691:54"><name pos:start="691:49" pos:end="691:54">ex_ptr</name></expr>;</condition>

		     <incr pos:start="693:22" pos:end="693:45"><expr pos:start="693:22" pos:end="693:45"><name pos:start="693:22" pos:end="693:27">ex_ptr</name> <operator pos:start="693:29" pos:end="693:29">=</operator> <name pos:start="693:31" pos:end="693:45"><name pos:start="693:31" pos:end="693:36">ex_ptr</name><operator pos:start="693:37" pos:end="693:38">-&gt;</operator><name pos:start="693:39" pos:end="693:45">ex_next</name></name></expr></incr>)</control> <block pos:start="693:48" pos:end="705:17">{<block_content pos:start="695:19" pos:end="703:19">

		  <if_stmt pos:start="695:19" pos:end="703:19"><if pos:start="695:19" pos:end="703:19">if<condition pos:start="695:21" pos:end="697:67">(<expr pos:start="695:22" pos:end="697:66"><name pos:start="695:22" pos:end="695:37"><name pos:start="695:22" pos:end="695:27">ex_ptr</name><operator pos:start="695:28" pos:end="695:29">-&gt;</operator><name pos:start="695:30" pos:end="695:37">ex_fport</name></name> <operator pos:start="695:39" pos:end="695:40">==</operator> <name pos:start="695:42" pos:end="695:53"><name pos:start="695:42" pos:end="695:43">so</name><operator pos:start="695:44" pos:end="695:45">-&gt;</operator><name pos:start="695:46" pos:end="695:53">so_fport</name></name> <operator pos:start="695:55" pos:end="695:56">&amp;&amp;</operator>

		     <name pos:start="697:22" pos:end="697:40"><name pos:start="697:22" pos:end="697:23">so</name><operator pos:start="697:24" pos:end="697:25">-&gt;</operator><name pos:start="697:26" pos:end="697:33">so_faddr</name><operator pos:start="697:34" pos:end="697:34">.</operator><name pos:start="697:35" pos:end="697:40">s_addr</name></name> <operator pos:start="697:42" pos:end="697:43">==</operator> <name pos:start="697:45" pos:end="697:66"><name pos:start="697:45" pos:end="697:50">ex_ptr</name><operator pos:start="697:51" pos:end="697:52">-&gt;</operator><name pos:start="697:53" pos:end="697:59">ex_addr</name><operator pos:start="697:60" pos:end="697:60">.</operator><name pos:start="697:61" pos:end="697:66">s_addr</name></name></expr>)</condition> <block pos:start="697:69" pos:end="703:19">{<block_content pos:start="699:21" pos:end="701:26">

		    <expr_stmt pos:start="699:21" pos:end="699:43"><expr pos:start="699:21" pos:end="699:42"><name pos:start="699:21" pos:end="699:32"><name pos:start="699:21" pos:end="699:22">so</name><operator pos:start="699:23" pos:end="699:24">-&gt;</operator><name pos:start="699:25" pos:end="699:32">so_state</name></name> <operator pos:start="699:34" pos:end="699:35">|=</operator> <name pos:start="699:37" pos:end="699:42">SS_CTL</name></expr>;</expr_stmt>

		    <break pos:start="701:21" pos:end="701:26">break;</break>

		  </block_content>}</block></if></if_stmt>

		</block_content>}</block></for>

		<if_stmt pos:start="707:17" pos:end="711:17"><if pos:start="707:17" pos:end="711:17">if <condition pos:start="707:20" pos:end="707:42">(<expr pos:start="707:21" pos:end="707:41"><name pos:start="707:21" pos:end="707:32"><name pos:start="707:21" pos:end="707:22">so</name><operator pos:start="707:23" pos:end="707:24">-&gt;</operator><name pos:start="707:25" pos:end="707:32">so_state</name></name> <operator pos:start="707:34" pos:end="707:34">&amp;</operator> <name pos:start="707:36" pos:end="707:41">SS_CTL</name></expr>)</condition> <block pos:start="707:44" pos:end="711:17">{<block_content pos:start="709:21" pos:end="709:36">

		    <goto pos:start="709:21" pos:end="709:36">goto <name pos:start="709:26" pos:end="709:35">cont_input</name>;</goto>

		</block_content>}</block></if></if_stmt>

	    </block_content>}</block></if></if_stmt>

	    <comment type="block" pos:start="715:13" pos:end="715:74">/* CTL_ALIAS: Do nothing, tcp_fconnect will be called on it */</comment>

	  </block_content>}</block></if></if_stmt>



	  <if_stmt pos:start="721:11" pos:end="727:11"><if pos:start="721:11" pos:end="727:11">if <condition pos:start="721:14" pos:end="721:41">(<expr pos:start="721:15" pos:end="721:40"><name pos:start="721:15" pos:end="721:24"><name pos:start="721:15" pos:end="721:16">so</name><operator pos:start="721:17" pos:end="721:18">-&gt;</operator><name pos:start="721:19" pos:end="721:24">so_emu</name></name> <operator pos:start="721:26" pos:end="721:26">&amp;</operator> <name pos:start="721:28" pos:end="721:40">EMU_NOCONNECT</name></expr>)</condition> <block pos:start="721:43" pos:end="727:11">{<block_content pos:start="723:13" pos:end="725:28">

	    <expr_stmt pos:start="723:13" pos:end="723:41"><expr pos:start="723:13" pos:end="723:40"><name pos:start="723:13" pos:end="723:22"><name pos:start="723:13" pos:end="723:14">so</name><operator pos:start="723:15" pos:end="723:16">-&gt;</operator><name pos:start="723:17" pos:end="723:22">so_emu</name></name> <operator pos:start="723:24" pos:end="723:25">&amp;=</operator> <operator pos:start="723:27" pos:end="723:27">~</operator><name pos:start="723:28" pos:end="723:40">EMU_NOCONNECT</name></expr>;</expr_stmt>

	    <goto pos:start="725:13" pos:end="725:28">goto <name pos:start="725:18" pos:end="725:27">cont_input</name>;</goto>

	  </block_content>}</block></if></if_stmt>



	  <if_stmt pos:start="731:11" pos:end="797:11"><if pos:start="731:11" pos:end="773:11">if<condition pos:start="731:13" pos:end="731:90">(<expr pos:start="731:14" pos:end="731:89"><operator pos:start="731:14" pos:end="731:14">(</operator><call pos:start="731:15" pos:end="731:30"><name pos:start="731:15" pos:end="731:26">tcp_fconnect</name><argument_list pos:start="731:27" pos:end="731:30">(<argument pos:start="731:28" pos:end="731:29"><expr pos:start="731:28" pos:end="731:29"><name pos:start="731:28" pos:end="731:29">so</name></expr></argument>)</argument_list></call> <operator pos:start="731:32" pos:end="731:33">==</operator> <operator pos:start="731:35" pos:end="731:35">-</operator><literal type="number" pos:start="731:36" pos:end="731:36">1</literal><operator pos:start="731:37" pos:end="731:37">)</operator> <operator pos:start="731:39" pos:end="731:40">&amp;&amp;</operator> <operator pos:start="731:42" pos:end="731:42">(</operator><name pos:start="731:43" pos:end="731:47">errno</name> <operator pos:start="731:49" pos:end="731:50">!=</operator> <name pos:start="731:52" pos:end="731:62">EINPROGRESS</name><operator pos:start="731:63" pos:end="731:63">)</operator> <operator pos:start="731:65" pos:end="731:66">&amp;&amp;</operator> <operator pos:start="731:68" pos:end="731:68">(</operator><name pos:start="731:69" pos:end="731:73">errno</name> <operator pos:start="731:75" pos:end="731:76">!=</operator> <name pos:start="731:78" pos:end="731:88">EWOULDBLOCK</name><operator pos:start="731:89" pos:end="731:89">)</operator></expr>)</condition> <block pos:start="731:92" pos:end="773:11">{<block_content pos:start="733:13" pos:end="771:22">

	    <decl_stmt pos:start="733:13" pos:end="733:41"><decl pos:start="733:13" pos:end="733:40"><type pos:start="733:13" pos:end="733:18"><name pos:start="733:13" pos:end="733:18">u_char</name></type> <name pos:start="733:20" pos:end="733:23">code</name><init pos:start="733:24" pos:end="733:40">=<expr pos:start="733:25" pos:end="733:40"><name pos:start="733:25" pos:end="733:40">ICMP_UNREACH_NET</name></expr></init></decl>;</decl_stmt>

	    <expr_stmt pos:start="735:13" pos:end="737:48"><expr pos:start="735:13" pos:end="737:47"><call pos:start="735:13" pos:end="737:47"><name pos:start="735:13" pos:end="735:22">DEBUG_MISC</name><argument_list pos:start="735:23" pos:end="737:47">(<argument pos:start="735:24" pos:end="737:46"><expr pos:start="735:24" pos:end="737:46"><operator pos:start="735:24" pos:end="735:24">(</operator><name pos:start="735:25" pos:end="735:27">dfd</name><operator pos:start="735:28" pos:end="735:28">,</operator> <literal type="string" pos:start="735:30" pos:end="735:60">" tcp fconnect errno = %d-%s\n"</literal><operator pos:start="735:61" pos:end="735:61">,</operator>

			<name pos:start="737:25" pos:end="737:29">errno</name><operator pos:start="737:30" pos:end="737:30">,</operator><call pos:start="737:31" pos:end="737:45"><name pos:start="737:31" pos:end="737:38">strerror</name><argument_list pos:start="737:39" pos:end="737:45">(<argument pos:start="737:40" pos:end="737:44"><expr pos:start="737:40" pos:end="737:44"><name pos:start="737:40" pos:end="737:44">errno</name></expr></argument>)</argument_list></call><operator pos:start="737:46" pos:end="737:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <if_stmt pos:start="739:13" pos:end="767:13"><if pos:start="739:13" pos:end="747:13">if<condition pos:start="739:15" pos:end="739:37">(<expr pos:start="739:16" pos:end="739:36"><name pos:start="739:16" pos:end="739:20">errno</name> <operator pos:start="739:22" pos:end="739:23">==</operator> <name pos:start="739:25" pos:end="739:36">ECONNREFUSED</name></expr>)</condition> <block pos:start="739:39" pos:end="747:13">{<block_content pos:start="743:15" pos:end="745:41">

	      <comment type="block" pos:start="741:15" pos:end="741:66">/* ACK the SYN, send RST to refuse the connection */</comment>

	      <expr_stmt pos:start="743:15" pos:end="745:41"><expr pos:start="743:15" pos:end="745:40"><call pos:start="743:15" pos:end="745:40"><name pos:start="743:15" pos:end="743:25">tcp_respond</name><argument_list pos:start="743:26" pos:end="745:40">(<argument pos:start="743:27" pos:end="743:28"><expr pos:start="743:27" pos:end="743:28"><name pos:start="743:27" pos:end="743:28">tp</name></expr></argument>, <argument pos:start="743:31" pos:end="743:32"><expr pos:start="743:31" pos:end="743:32"><name pos:start="743:31" pos:end="743:32">ti</name></expr></argument>, <argument pos:start="743:35" pos:end="743:35"><expr pos:start="743:35" pos:end="743:35"><name pos:start="743:35" pos:end="743:35">m</name></expr></argument>, <argument pos:start="743:38" pos:end="743:49"><expr pos:start="743:38" pos:end="743:49"><name pos:start="743:38" pos:end="743:47"><name pos:start="743:38" pos:end="743:39">ti</name><operator pos:start="743:40" pos:end="743:41">-&gt;</operator><name pos:start="743:42" pos:end="743:47">ti_seq</name></name><operator pos:start="743:48" pos:end="743:48">+</operator><literal type="number" pos:start="743:49" pos:end="743:49">1</literal></expr></argument>, <argument pos:start="743:52" pos:end="743:61"><expr pos:start="743:52" pos:end="743:61"><operator pos:start="743:52" pos:end="743:52">(</operator><name pos:start="743:53" pos:end="743:59">tcp_seq</name><operator pos:start="743:60" pos:end="743:60">)</operator><literal type="number" pos:start="743:61" pos:end="743:61">0</literal></expr></argument>,

			  <argument pos:start="745:27" pos:end="745:39"><expr pos:start="745:27" pos:end="745:39"><name pos:start="745:27" pos:end="745:32">TH_RST</name><operator pos:start="745:33" pos:end="745:33">|</operator><name pos:start="745:34" pos:end="745:39">TH_ACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></if> <else pos:start="747:15" pos:end="767:13">else <block pos:start="747:20" pos:end="767:13">{<block_content pos:start="749:15" pos:end="765:66">

	      <if_stmt pos:start="749:15" pos:end="749:63"><if pos:start="749:15" pos:end="749:63">if<condition pos:start="749:17" pos:end="749:39">(<expr pos:start="749:18" pos:end="749:38"><name pos:start="749:18" pos:end="749:22">errno</name> <operator pos:start="749:24" pos:end="749:25">==</operator> <name pos:start="749:27" pos:end="749:38">EHOSTUNREACH</name></expr>)</condition><block type="pseudo" pos:start="749:41" pos:end="749:63"><block_content pos:start="749:41" pos:end="749:63"> <expr_stmt pos:start="749:41" pos:end="749:63"><expr pos:start="749:41" pos:end="749:62"><name pos:start="749:41" pos:end="749:44">code</name><operator pos:start="749:45" pos:end="749:45">=</operator><name pos:start="749:46" pos:end="749:62">ICMP_UNREACH_HOST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	      <expr_stmt pos:start="751:15" pos:end="751:32"><expr pos:start="751:15" pos:end="751:31"><call pos:start="751:15" pos:end="751:31"><name pos:start="751:15" pos:end="751:19">HTONL</name><argument_list pos:start="751:20" pos:end="751:31">(<argument pos:start="751:21" pos:end="751:30"><expr pos:start="751:21" pos:end="751:30"><name pos:start="751:21" pos:end="751:30"><name pos:start="751:21" pos:end="751:22">ti</name><operator pos:start="751:23" pos:end="751:24">-&gt;</operator><name pos:start="751:25" pos:end="751:30">ti_seq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block" pos:start="751:46" pos:end="751:69">/* restore tcp header */</comment>

	      <expr_stmt pos:start="753:15" pos:end="753:32"><expr pos:start="753:15" pos:end="753:31"><call pos:start="753:15" pos:end="753:31"><name pos:start="753:15" pos:end="753:19">HTONL</name><argument_list pos:start="753:20" pos:end="753:31">(<argument pos:start="753:21" pos:end="753:30"><expr pos:start="753:21" pos:end="753:30"><name pos:start="753:21" pos:end="753:30"><name pos:start="753:21" pos:end="753:22">ti</name><operator pos:start="753:23" pos:end="753:24">-&gt;</operator><name pos:start="753:25" pos:end="753:30">ti_ack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <expr_stmt pos:start="755:15" pos:end="755:32"><expr pos:start="755:15" pos:end="755:31"><call pos:start="755:15" pos:end="755:31"><name pos:start="755:15" pos:end="755:19">HTONS</name><argument_list pos:start="755:20" pos:end="755:31">(<argument pos:start="755:21" pos:end="755:30"><expr pos:start="755:21" pos:end="755:30"><name pos:start="755:21" pos:end="755:30"><name pos:start="755:21" pos:end="755:22">ti</name><operator pos:start="755:23" pos:end="755:24">-&gt;</operator><name pos:start="755:25" pos:end="755:30">ti_win</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <expr_stmt pos:start="757:15" pos:end="757:32"><expr pos:start="757:15" pos:end="757:31"><call pos:start="757:15" pos:end="757:31"><name pos:start="757:15" pos:end="757:19">HTONS</name><argument_list pos:start="757:20" pos:end="757:31">(<argument pos:start="757:21" pos:end="757:30"><expr pos:start="757:21" pos:end="757:30"><name pos:start="757:21" pos:end="757:30"><name pos:start="757:21" pos:end="757:22">ti</name><operator pos:start="757:23" pos:end="757:24">-&gt;</operator><name pos:start="757:25" pos:end="757:30">ti_urp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	      <expr_stmt pos:start="759:15" pos:end="759:77"><expr pos:start="759:15" pos:end="759:76"><name pos:start="759:15" pos:end="759:23"><name pos:start="759:15" pos:end="759:15">m</name><operator pos:start="759:16" pos:end="759:17">-&gt;</operator><name pos:start="759:18" pos:end="759:23">m_data</name></name> <operator pos:start="759:25" pos:end="759:26">-=</operator> <sizeof pos:start="759:28" pos:end="759:50">sizeof<argument_list pos:start="759:34" pos:end="759:50">(<argument pos:start="759:35" pos:end="759:49"><expr pos:start="759:35" pos:end="759:49">struct <name pos:start="759:42" pos:end="759:49">tcpiphdr</name></expr></argument>)</argument_list></sizeof><operator pos:start="759:51" pos:end="759:51">+</operator><name pos:start="759:52" pos:end="759:54">off</name><operator pos:start="759:55" pos:end="759:55">-</operator><sizeof pos:start="759:56" pos:end="759:76">sizeof<argument_list pos:start="759:62" pos:end="759:76">(<argument pos:start="759:63" pos:end="759:75"><expr pos:start="759:63" pos:end="759:75">struct <name pos:start="759:70" pos:end="759:75">tcphdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	      <expr_stmt pos:start="761:15" pos:end="761:77"><expr pos:start="761:15" pos:end="761:76"><name pos:start="761:15" pos:end="761:22"><name pos:start="761:15" pos:end="761:15">m</name><operator pos:start="761:16" pos:end="761:17">-&gt;</operator><name pos:start="761:18" pos:end="761:22">m_len</name></name>  <operator pos:start="761:25" pos:end="761:26">+=</operator> <sizeof pos:start="761:28" pos:end="761:50">sizeof<argument_list pos:start="761:34" pos:end="761:50">(<argument pos:start="761:35" pos:end="761:49"><expr pos:start="761:35" pos:end="761:49">struct <name pos:start="761:42" pos:end="761:49">tcpiphdr</name></expr></argument>)</argument_list></sizeof><operator pos:start="761:51" pos:end="761:51">+</operator><name pos:start="761:52" pos:end="761:54">off</name><operator pos:start="761:55" pos:end="761:55">-</operator><sizeof pos:start="761:56" pos:end="761:76">sizeof<argument_list pos:start="761:62" pos:end="761:76">(<argument pos:start="761:63" pos:end="761:75"><expr pos:start="761:63" pos:end="761:75">struct <name pos:start="761:70" pos:end="761:75">tcphdr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	      <expr_stmt pos:start="763:15" pos:end="763:26"><expr pos:start="763:15" pos:end="763:25"><operator pos:start="763:15" pos:end="763:15">*</operator><name pos:start="763:16" pos:end="763:17">ip</name><operator pos:start="763:18" pos:end="763:18">=</operator><name pos:start="763:19" pos:end="763:25">save_ip</name></expr>;</expr_stmt>

	      <expr_stmt pos:start="765:15" pos:end="765:66"><expr pos:start="765:15" pos:end="765:65"><call pos:start="765:15" pos:end="765:65"><name pos:start="765:15" pos:end="765:24">icmp_error</name><argument_list pos:start="765:25" pos:end="765:65">(<argument pos:start="765:26" pos:end="765:26"><expr pos:start="765:26" pos:end="765:26"><name pos:start="765:26" pos:end="765:26">m</name></expr></argument>, <argument pos:start="765:29" pos:end="765:40"><expr pos:start="765:29" pos:end="765:40"><name pos:start="765:29" pos:end="765:40">ICMP_UNREACH</name></expr></argument>,<argument pos:start="765:42" pos:end="765:45"><expr pos:start="765:42" pos:end="765:45"><name pos:start="765:42" pos:end="765:45">code</name></expr></argument>, <argument pos:start="765:48" pos:end="765:48"><expr pos:start="765:48" pos:end="765:48"><literal type="number" pos:start="765:48" pos:end="765:48">0</literal></expr></argument>,<argument pos:start="765:50" pos:end="765:64"><expr pos:start="765:50" pos:end="765:64"><call pos:start="765:50" pos:end="765:64"><name pos:start="765:50" pos:end="765:57">strerror</name><argument_list pos:start="765:58" pos:end="765:64">(<argument pos:start="765:59" pos:end="765:63"><expr pos:start="765:59" pos:end="765:63"><name pos:start="765:59" pos:end="765:63">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="769:13" pos:end="769:26"><expr pos:start="769:13" pos:end="769:25"><call pos:start="769:13" pos:end="769:25"><name pos:start="769:13" pos:end="769:21">tcp_close</name><argument_list pos:start="769:22" pos:end="769:25">(<argument pos:start="769:23" pos:end="769:24"><expr pos:start="769:23" pos:end="769:24"><name pos:start="769:23" pos:end="769:24">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="771:13" pos:end="771:22"><expr pos:start="771:13" pos:end="771:21"><call pos:start="771:13" pos:end="771:21"><name pos:start="771:13" pos:end="771:18">m_free</name><argument_list pos:start="771:19" pos:end="771:21">(<argument pos:start="771:20" pos:end="771:20"><expr pos:start="771:20" pos:end="771:20"><name pos:start="771:20" pos:end="771:20">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></if> <else pos:start="773:13" pos:end="797:11">else <block pos:start="773:18" pos:end="797:11">{<block_content pos:start="787:13" pos:end="795:29">

	    <comment type="block" pos:start="775:13" pos:end="785:15">/*

	     * Haven't connected yet, save the current mbuf

	     * and ti, and return

	     * XXX Some OS's don't tell us whether the connect()

	     * succeeded or not.  So we must time it out.

	     */</comment>

	    <expr_stmt pos:start="787:13" pos:end="787:25"><expr pos:start="787:13" pos:end="787:24"><name pos:start="787:13" pos:end="787:20"><name pos:start="787:13" pos:end="787:14">so</name><operator pos:start="787:15" pos:end="787:16">-&gt;</operator><name pos:start="787:17" pos:end="787:20">so_m</name></name> <operator pos:start="787:22" pos:end="787:22">=</operator> <name pos:start="787:24" pos:end="787:24">m</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="789:13" pos:end="789:27"><expr pos:start="789:13" pos:end="789:26"><name pos:start="789:13" pos:end="789:21"><name pos:start="789:13" pos:end="789:14">so</name><operator pos:start="789:15" pos:end="789:16">-&gt;</operator><name pos:start="789:17" pos:end="789:21">so_ti</name></name> <operator pos:start="789:23" pos:end="789:23">=</operator> <name pos:start="789:25" pos:end="789:26">ti</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="791:13" pos:end="791:53"><expr pos:start="791:13" pos:end="791:52"><name pos:start="791:13" pos:end="791:34"><name pos:start="791:13" pos:end="791:14">tp</name><operator pos:start="791:15" pos:end="791:16">-&gt;</operator><name pos:start="791:17" pos:end="791:23">t_timer</name><index pos:start="791:24" pos:end="791:34">[<expr pos:start="791:25" pos:end="791:33"><name pos:start="791:25" pos:end="791:33">TCPT_KEEP</name></expr>]</index></name> <operator pos:start="791:36" pos:end="791:36">=</operator> <name pos:start="791:38" pos:end="791:52">TCPTV_KEEP_INIT</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="793:13" pos:end="793:44"><expr pos:start="793:13" pos:end="793:43"><name pos:start="793:13" pos:end="793:23"><name pos:start="793:13" pos:end="793:14">tp</name><operator pos:start="793:15" pos:end="793:16">-&gt;</operator><name pos:start="793:17" pos:end="793:23">t_state</name></name> <operator pos:start="793:25" pos:end="793:25">=</operator> <name pos:start="793:27" pos:end="793:43">TCPS_SYN_RECEIVED</name></expr>;</expr_stmt>

	    <expr_stmt pos:start="795:13" pos:end="795:29"><expr pos:start="795:13" pos:end="795:28"><call pos:start="795:13" pos:end="795:28"><name pos:start="795:13" pos:end="795:24">tcp_template</name><argument_list pos:start="795:25" pos:end="795:28">(<argument pos:start="795:26" pos:end="795:27"><expr pos:start="795:26" pos:end="795:27"><name pos:start="795:26" pos:end="795:27">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></else></if_stmt>

	  <return pos:start="799:11" pos:end="799:17">return;</return>



	<label pos:start="803:9" pos:end="803:18"><name pos:start="803:9" pos:end="803:17">cont_conn</name>:</label>

	  <comment type="block" pos:start="805:11" pos:end="809:13">/* m==NULL

	   * Check if the connect succeeded

	   */</comment>

	  <if_stmt pos:start="811:11" pos:end="817:11"><if pos:start="811:11" pos:end="817:11">if <condition pos:start="811:14" pos:end="811:40">(<expr pos:start="811:15" pos:end="811:39"><name pos:start="811:15" pos:end="811:26"><name pos:start="811:15" pos:end="811:16">so</name><operator pos:start="811:17" pos:end="811:18">-&gt;</operator><name pos:start="811:19" pos:end="811:26">so_state</name></name> <operator pos:start="811:28" pos:end="811:28">&amp;</operator> <name pos:start="811:30" pos:end="811:39">SS_NOFDREF</name></expr>)</condition> <block pos:start="811:42" pos:end="817:11">{<block_content pos:start="813:13" pos:end="815:31">

	    <expr_stmt pos:start="813:13" pos:end="813:31"><expr pos:start="813:13" pos:end="813:30"><name pos:start="813:13" pos:end="813:14">tp</name> <operator pos:start="813:16" pos:end="813:16">=</operator> <call pos:start="813:18" pos:end="813:30"><name pos:start="813:18" pos:end="813:26">tcp_close</name><argument_list pos:start="813:27" pos:end="813:30">(<argument pos:start="813:28" pos:end="813:29"><expr pos:start="813:28" pos:end="813:29"><name pos:start="813:28" pos:end="813:29">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <goto pos:start="815:13" pos:end="815:31">goto <name pos:start="815:18" pos:end="815:30">dropwithreset</name>;</goto>

	  </block_content>}</block></if></if_stmt>

	<label pos:start="819:9" pos:end="819:19"><name pos:start="819:9" pos:end="819:18">cont_input</name>:</label>

	  <expr_stmt pos:start="821:11" pos:end="821:27"><expr pos:start="821:11" pos:end="821:26"><call pos:start="821:11" pos:end="821:26"><name pos:start="821:11" pos:end="821:22">tcp_template</name><argument_list pos:start="821:23" pos:end="821:26">(<argument pos:start="821:24" pos:end="821:25"><expr pos:start="821:24" pos:end="821:25"><name pos:start="821:24" pos:end="821:25">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	  <if_stmt pos:start="825:11" pos:end="827:58"><if pos:start="825:11" pos:end="827:58">if <condition pos:start="825:14" pos:end="825:19">(<expr pos:start="825:15" pos:end="825:18"><name pos:start="825:15" pos:end="825:18">optp</name></expr>)</condition><block type="pseudo" pos:start="827:13" pos:end="827:58"><block_content pos:start="827:13" pos:end="827:58">

	    <expr_stmt pos:start="827:13" pos:end="827:58"><expr pos:start="827:13" pos:end="827:57"><call pos:start="827:13" pos:end="827:57"><name pos:start="827:13" pos:end="827:25">tcp_dooptions</name><argument_list pos:start="827:26" pos:end="827:57">(<argument pos:start="827:27" pos:end="827:28"><expr pos:start="827:27" pos:end="827:28"><name pos:start="827:27" pos:end="827:28">tp</name></expr></argument>, <argument pos:start="827:31" pos:end="827:44"><expr pos:start="827:31" pos:end="827:44"><operator pos:start="827:31" pos:end="827:31">(</operator><name pos:start="827:32" pos:end="827:37">u_char</name> <operator pos:start="827:39" pos:end="827:39">*</operator><operator pos:start="827:40" pos:end="827:40">)</operator><name pos:start="827:41" pos:end="827:44">optp</name></expr></argument>, <argument pos:start="827:47" pos:end="827:52"><expr pos:start="827:47" pos:end="827:52"><name pos:start="827:47" pos:end="827:52">optlen</name></expr></argument>, <argument pos:start="827:55" pos:end="827:56"><expr pos:start="827:55" pos:end="827:56"><name pos:start="827:55" pos:end="827:56">ti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	  <if_stmt pos:start="831:11" pos:end="837:37"><if pos:start="831:11" pos:end="833:26">if <condition pos:start="831:14" pos:end="831:18">(<expr pos:start="831:15" pos:end="831:17"><name pos:start="831:15" pos:end="831:17">iss</name></expr>)</condition><block type="pseudo" pos:start="833:13" pos:end="833:26"><block_content pos:start="833:13" pos:end="833:26">

	    <expr_stmt pos:start="833:13" pos:end="833:26"><expr pos:start="833:13" pos:end="833:25"><name pos:start="833:13" pos:end="833:19"><name pos:start="833:13" pos:end="833:14">tp</name><operator pos:start="833:15" pos:end="833:16">-&gt;</operator><name pos:start="833:17" pos:end="833:19">iss</name></name> <operator pos:start="833:21" pos:end="833:21">=</operator> <name pos:start="833:23" pos:end="833:25">iss</name></expr>;</expr_stmt></block_content></block></if>

	  <else pos:start="835:11" pos:end="837:37">else<block type="pseudo" pos:start="837:13" pos:end="837:37"><block_content pos:start="837:13" pos:end="837:37">

	    <expr_stmt pos:start="837:13" pos:end="837:37"><expr pos:start="837:13" pos:end="837:36"><name pos:start="837:13" pos:end="837:19"><name pos:start="837:13" pos:end="837:14">tp</name><operator pos:start="837:15" pos:end="837:16">-&gt;</operator><name pos:start="837:17" pos:end="837:19">iss</name></name> <operator pos:start="837:21" pos:end="837:21">=</operator> <name pos:start="837:23" pos:end="837:36"><name pos:start="837:23" pos:end="837:27">slirp</name><operator pos:start="837:28" pos:end="837:29">-&gt;</operator><name pos:start="837:30" pos:end="837:36">tcp_iss</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <expr_stmt pos:start="839:11" pos:end="839:42"><expr pos:start="839:11" pos:end="839:41"><name pos:start="839:11" pos:end="839:24"><name pos:start="839:11" pos:end="839:15">slirp</name><operator pos:start="839:16" pos:end="839:17">-&gt;</operator><name pos:start="839:18" pos:end="839:24">tcp_iss</name></name> <operator pos:start="839:26" pos:end="839:27">+=</operator> <name pos:start="839:29" pos:end="839:39">TCP_ISSINCR</name><operator pos:start="839:40" pos:end="839:40">/</operator><literal type="number" pos:start="839:41" pos:end="839:41">2</literal></expr>;</expr_stmt>

	  <expr_stmt pos:start="841:11" pos:end="841:31"><expr pos:start="841:11" pos:end="841:30"><name pos:start="841:11" pos:end="841:17"><name pos:start="841:11" pos:end="841:12">tp</name><operator pos:start="841:13" pos:end="841:14">-&gt;</operator><name pos:start="841:15" pos:end="841:17">irs</name></name> <operator pos:start="841:19" pos:end="841:19">=</operator> <name pos:start="841:21" pos:end="841:30"><name pos:start="841:21" pos:end="841:22">ti</name><operator pos:start="841:23" pos:end="841:24">-&gt;</operator><name pos:start="841:25" pos:end="841:30">ti_seq</name></name></expr>;</expr_stmt>

	  <expr_stmt pos:start="843:11" pos:end="843:30"><expr pos:start="843:11" pos:end="843:29"><call pos:start="843:11" pos:end="843:29"><name pos:start="843:11" pos:end="843:25">tcp_sendseqinit</name><argument_list pos:start="843:26" pos:end="843:29">(<argument pos:start="843:27" pos:end="843:28"><expr pos:start="843:27" pos:end="843:28"><name pos:start="843:27" pos:end="843:28">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="845:11" pos:end="845:29"><expr pos:start="845:11" pos:end="845:28"><call pos:start="845:11" pos:end="845:28"><name pos:start="845:11" pos:end="845:24">tcp_rcvseqinit</name><argument_list pos:start="845:25" pos:end="845:28">(<argument pos:start="845:26" pos:end="845:27"><expr pos:start="845:26" pos:end="845:27"><name pos:start="845:26" pos:end="845:27">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="847:11" pos:end="847:35"><expr pos:start="847:11" pos:end="847:34"><name pos:start="847:11" pos:end="847:21"><name pos:start="847:11" pos:end="847:12">tp</name><operator pos:start="847:13" pos:end="847:14">-&gt;</operator><name pos:start="847:15" pos:end="847:21">t_flags</name></name> <operator pos:start="847:23" pos:end="847:24">|=</operator> <name pos:start="847:26" pos:end="847:34">TF_ACKNOW</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="849:11" pos:end="849:42"><expr pos:start="849:11" pos:end="849:41"><name pos:start="849:11" pos:end="849:21"><name pos:start="849:11" pos:end="849:12">tp</name><operator pos:start="849:13" pos:end="849:14">-&gt;</operator><name pos:start="849:15" pos:end="849:21">t_state</name></name> <operator pos:start="849:23" pos:end="849:23">=</operator> <name pos:start="849:25" pos:end="849:41">TCPS_SYN_RECEIVED</name></expr>;</expr_stmt>

	  <expr_stmt pos:start="851:11" pos:end="851:51"><expr pos:start="851:11" pos:end="851:50"><name pos:start="851:11" pos:end="851:32"><name pos:start="851:11" pos:end="851:12">tp</name><operator pos:start="851:13" pos:end="851:14">-&gt;</operator><name pos:start="851:15" pos:end="851:21">t_timer</name><index pos:start="851:22" pos:end="851:32">[<expr pos:start="851:23" pos:end="851:31"><name pos:start="851:23" pos:end="851:31">TCPT_KEEP</name></expr>]</index></name> <operator pos:start="851:34" pos:end="851:34">=</operator> <name pos:start="851:36" pos:end="851:50">TCPTV_KEEP_INIT</name></expr>;</expr_stmt>

	  <goto pos:start="853:11" pos:end="853:29">goto <name pos:start="853:16" pos:end="853:28">trimthenstep6</name>;</goto>

	</block_content>}</block> <comment type="block" pos:start="855:11" pos:end="855:32">/* case TCPS_LISTEN */</comment>



	<comment type="block" pos:start="859:9" pos:end="881:11">/*

	 * If the state is SYN_SENT:

	 *	if seg contains an ACK, but not for our SYN, drop the input.

	 *	if seg contains a RST, then drop the connection.

	 *	if seg does not contain SYN, then drop it.

	 * Otherwise this is an acceptable SYN segment

	 *	initialize tp-&gt;rcv_nxt and tp-&gt;irs

	 *	if seg contains ack then advance tp-&gt;snd_una

	 *	if SYN has been acked change to ESTABLISHED else SYN_RCVD state

	 *	arrange for segment to be acked (eventually)

	 *	continue processing rest of data/controls, beginning with URG

	 */</comment>

	<case pos:start="883:9" pos:end="883:27">case <expr pos:start="883:14" pos:end="883:26"><name pos:start="883:14" pos:end="883:26">TCPS_SYN_SENT</name></expr>:</case>

		<if_stmt pos:start="885:17" pos:end="891:43"><if pos:start="885:17" pos:end="891:43">if <condition pos:start="885:20" pos:end="889:54">(<expr pos:start="885:21" pos:end="889:53"><operator pos:start="885:21" pos:end="885:21">(</operator><name pos:start="885:22" pos:end="885:28">tiflags</name> <operator pos:start="885:30" pos:end="885:30">&amp;</operator> <name pos:start="885:32" pos:end="885:37">TH_ACK</name><operator pos:start="885:38" pos:end="885:38">)</operator> <operator pos:start="885:40" pos:end="885:41">&amp;&amp;</operator>

		    <operator pos:start="887:21" pos:end="887:21">(</operator><call pos:start="887:22" pos:end="887:49"><name pos:start="887:22" pos:end="887:28">SEQ_LEQ</name><argument_list pos:start="887:29" pos:end="887:49">(<argument pos:start="887:30" pos:end="887:39"><expr pos:start="887:30" pos:end="887:39"><name pos:start="887:30" pos:end="887:39"><name pos:start="887:30" pos:end="887:31">ti</name><operator pos:start="887:32" pos:end="887:33">-&gt;</operator><name pos:start="887:34" pos:end="887:39">ti_ack</name></name></expr></argument>, <argument pos:start="887:42" pos:end="887:48"><expr pos:start="887:42" pos:end="887:48"><name pos:start="887:42" pos:end="887:48"><name pos:start="887:42" pos:end="887:43">tp</name><operator pos:start="887:44" pos:end="887:45">-&gt;</operator><name pos:start="887:46" pos:end="887:48">iss</name></name></expr></argument>)</argument_list></call> <operator pos:start="887:51" pos:end="887:52">||</operator>

		     <call pos:start="889:22" pos:end="889:52"><name pos:start="889:22" pos:end="889:27">SEQ_GT</name><argument_list pos:start="889:28" pos:end="889:52">(<argument pos:start="889:29" pos:end="889:38"><expr pos:start="889:29" pos:end="889:38"><name pos:start="889:29" pos:end="889:38"><name pos:start="889:29" pos:end="889:30">ti</name><operator pos:start="889:31" pos:end="889:32">-&gt;</operator><name pos:start="889:33" pos:end="889:38">ti_ack</name></name></expr></argument>, <argument pos:start="889:41" pos:end="889:51"><expr pos:start="889:41" pos:end="889:51"><name pos:start="889:41" pos:end="889:51"><name pos:start="889:41" pos:end="889:42">tp</name><operator pos:start="889:43" pos:end="889:44">-&gt;</operator><name pos:start="889:45" pos:end="889:51">snd_max</name></name></expr></argument>)</argument_list></call><operator pos:start="889:53" pos:end="889:53">)</operator></expr>)</condition><block type="pseudo" pos:start="891:25" pos:end="891:43"><block_content pos:start="891:25" pos:end="891:43">

			<goto pos:start="891:25" pos:end="891:43">goto <name pos:start="891:30" pos:end="891:42">dropwithreset</name>;</goto></block_content></block></if></if_stmt>



		<if_stmt pos:start="895:17" pos:end="905:17"><if pos:start="895:17" pos:end="905:17">if <condition pos:start="895:20" pos:end="895:37">(<expr pos:start="895:21" pos:end="895:36"><name pos:start="895:21" pos:end="895:27">tiflags</name> <operator pos:start="895:29" pos:end="895:29">&amp;</operator> <name pos:start="895:31" pos:end="895:36">TH_RST</name></expr>)</condition> <block pos:start="895:39" pos:end="905:17">{<block_content pos:start="897:25" pos:end="903:34">

                        <if_stmt pos:start="897:25" pos:end="901:25"><if pos:start="897:25" pos:end="901:25">if <condition pos:start="897:28" pos:end="897:45">(<expr pos:start="897:29" pos:end="897:44"><name pos:start="897:29" pos:end="897:35">tiflags</name> <operator pos:start="897:37" pos:end="897:37">&amp;</operator> <name pos:start="897:39" pos:end="897:44">TH_ACK</name></expr>)</condition> <block pos:start="897:47" pos:end="901:25">{<block_content pos:start="899:33" pos:end="899:48">

                                <expr_stmt pos:start="899:33" pos:end="899:48"><expr pos:start="899:33" pos:end="899:47"><call pos:start="899:33" pos:end="899:47"><name pos:start="899:33" pos:end="899:40">tcp_drop</name><argument_list pos:start="899:41" pos:end="899:47">(<argument pos:start="899:42" pos:end="899:43"><expr pos:start="899:42" pos:end="899:43"><name pos:start="899:42" pos:end="899:43">tp</name></expr></argument>, <argument pos:start="899:46" pos:end="899:46"><expr pos:start="899:46" pos:end="899:46"><literal type="number" pos:start="899:46" pos:end="899:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="899:50" pos:end="899:77">/* XXX Check t_softerror! */</comment>

                        </block_content>}</block></if></if_stmt>

			<goto pos:start="903:25" pos:end="903:34">goto <name pos:start="903:30" pos:end="903:33">drop</name>;</goto>

		</block_content>}</block></if></if_stmt>



		<if_stmt pos:start="909:17" pos:end="911:34"><if pos:start="909:17" pos:end="911:34">if <condition pos:start="909:20" pos:end="909:44">(<expr pos:start="909:21" pos:end="909:43"><operator pos:start="909:21" pos:end="909:21">(</operator><name pos:start="909:22" pos:end="909:28">tiflags</name> <operator pos:start="909:30" pos:end="909:30">&amp;</operator> <name pos:start="909:32" pos:end="909:37">TH_SYN</name><operator pos:start="909:38" pos:end="909:38">)</operator> <operator pos:start="909:40" pos:end="909:41">==</operator> <literal type="number" pos:start="909:43" pos:end="909:43">0</literal></expr>)</condition><block type="pseudo" pos:start="911:25" pos:end="911:34"><block_content pos:start="911:25" pos:end="911:34">

			<goto pos:start="911:25" pos:end="911:34">goto <name pos:start="911:30" pos:end="911:33">drop</name>;</goto></block_content></block></if></if_stmt>

		<if_stmt pos:start="913:17" pos:end="921:17"><if pos:start="913:17" pos:end="921:17">if <condition pos:start="913:20" pos:end="913:37">(<expr pos:start="913:21" pos:end="913:36"><name pos:start="913:21" pos:end="913:27">tiflags</name> <operator pos:start="913:29" pos:end="913:29">&amp;</operator> <name pos:start="913:31" pos:end="913:36">TH_ACK</name></expr>)</condition> <block pos:start="913:39" pos:end="921:17">{<block_content pos:start="915:25" pos:end="919:58">

			<expr_stmt pos:start="915:25" pos:end="915:49"><expr pos:start="915:25" pos:end="915:48"><name pos:start="915:25" pos:end="915:35"><name pos:start="915:25" pos:end="915:26">tp</name><operator pos:start="915:27" pos:end="915:28">-&gt;</operator><name pos:start="915:29" pos:end="915:35">snd_una</name></name> <operator pos:start="915:37" pos:end="915:37">=</operator> <name pos:start="915:39" pos:end="915:48"><name pos:start="915:39" pos:end="915:40">ti</name><operator pos:start="915:41" pos:end="915:42">-&gt;</operator><name pos:start="915:43" pos:end="915:48">ti_ack</name></name></expr>;</expr_stmt>

			<if_stmt pos:start="917:25" pos:end="919:58"><if pos:start="917:25" pos:end="919:58">if <condition pos:start="917:28" pos:end="917:61">(<expr pos:start="917:29" pos:end="917:60"><call pos:start="917:29" pos:end="917:60"><name pos:start="917:29" pos:end="917:34">SEQ_LT</name><argument_list pos:start="917:35" pos:end="917:60">(<argument pos:start="917:36" pos:end="917:46"><expr pos:start="917:36" pos:end="917:46"><name pos:start="917:36" pos:end="917:46"><name pos:start="917:36" pos:end="917:37">tp</name><operator pos:start="917:38" pos:end="917:39">-&gt;</operator><name pos:start="917:40" pos:end="917:46">snd_nxt</name></name></expr></argument>, <argument pos:start="917:49" pos:end="917:59"><expr pos:start="917:49" pos:end="917:59"><name pos:start="917:49" pos:end="917:59"><name pos:start="917:49" pos:end="917:50">tp</name><operator pos:start="917:51" pos:end="917:52">-&gt;</operator><name pos:start="917:53" pos:end="917:59">snd_una</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="919:33" pos:end="919:58"><block_content pos:start="919:33" pos:end="919:58">

				<expr_stmt pos:start="919:33" pos:end="919:58"><expr pos:start="919:33" pos:end="919:57"><name pos:start="919:33" pos:end="919:43"><name pos:start="919:33" pos:end="919:34">tp</name><operator pos:start="919:35" pos:end="919:36">-&gt;</operator><name pos:start="919:37" pos:end="919:43">snd_nxt</name></name> <operator pos:start="919:45" pos:end="919:45">=</operator> <name pos:start="919:47" pos:end="919:57"><name pos:start="919:47" pos:end="919:48">tp</name><operator pos:start="919:49" pos:end="919:50">-&gt;</operator><name pos:start="919:51" pos:end="919:57">snd_una</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		</block_content>}</block></if></if_stmt>



		<expr_stmt pos:start="925:17" pos:end="925:44"><expr pos:start="925:17" pos:end="925:43"><name pos:start="925:17" pos:end="925:39"><name pos:start="925:17" pos:end="925:18">tp</name><operator pos:start="925:19" pos:end="925:20">-&gt;</operator><name pos:start="925:21" pos:end="925:27">t_timer</name><index pos:start="925:28" pos:end="925:39">[<expr pos:start="925:29" pos:end="925:38"><name pos:start="925:29" pos:end="925:38">TCPT_REXMT</name></expr>]</index></name> <operator pos:start="925:41" pos:end="925:41">=</operator> <literal type="number" pos:start="925:43" pos:end="925:43">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="927:17" pos:end="927:37"><expr pos:start="927:17" pos:end="927:36"><name pos:start="927:17" pos:end="927:23"><name pos:start="927:17" pos:end="927:18">tp</name><operator pos:start="927:19" pos:end="927:20">-&gt;</operator><name pos:start="927:21" pos:end="927:23">irs</name></name> <operator pos:start="927:25" pos:end="927:25">=</operator> <name pos:start="927:27" pos:end="927:36"><name pos:start="927:27" pos:end="927:28">ti</name><operator pos:start="927:29" pos:end="927:30">-&gt;</operator><name pos:start="927:31" pos:end="927:36">ti_seq</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="929:17" pos:end="929:35"><expr pos:start="929:17" pos:end="929:34"><call pos:start="929:17" pos:end="929:34"><name pos:start="929:17" pos:end="929:30">tcp_rcvseqinit</name><argument_list pos:start="929:31" pos:end="929:34">(<argument pos:start="929:32" pos:end="929:33"><expr pos:start="929:32" pos:end="929:33"><name pos:start="929:32" pos:end="929:33">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="931:17" pos:end="931:41"><expr pos:start="931:17" pos:end="931:40"><name pos:start="931:17" pos:end="931:27"><name pos:start="931:17" pos:end="931:18">tp</name><operator pos:start="931:19" pos:end="931:20">-&gt;</operator><name pos:start="931:21" pos:end="931:27">t_flags</name></name> <operator pos:start="931:29" pos:end="931:30">|=</operator> <name pos:start="931:32" pos:end="931:40">TF_ACKNOW</name></expr>;</expr_stmt>

		<if_stmt pos:start="933:17" pos:end="959:56"><if pos:start="933:17" pos:end="957:17">if <condition pos:start="933:20" pos:end="933:69">(<expr pos:start="933:21" pos:end="933:68"><name pos:start="933:21" pos:end="933:27">tiflags</name> <operator pos:start="933:29" pos:end="933:29">&amp;</operator> <name pos:start="933:31" pos:end="933:36">TH_ACK</name> <operator pos:start="933:38" pos:end="933:39">&amp;&amp;</operator> <call pos:start="933:41" pos:end="933:68"><name pos:start="933:41" pos:end="933:46">SEQ_GT</name><argument_list pos:start="933:47" pos:end="933:68">(<argument pos:start="933:48" pos:end="933:58"><expr pos:start="933:48" pos:end="933:58"><name pos:start="933:48" pos:end="933:58"><name pos:start="933:48" pos:end="933:49">tp</name><operator pos:start="933:50" pos:end="933:51">-&gt;</operator><name pos:start="933:52" pos:end="933:58">snd_una</name></name></expr></argument>, <argument pos:start="933:61" pos:end="933:67"><expr pos:start="933:61" pos:end="933:67"><name pos:start="933:61" pos:end="933:67"><name pos:start="933:61" pos:end="933:62">tp</name><operator pos:start="933:63" pos:end="933:64">-&gt;</operator><name pos:start="933:65" pos:end="933:67">iss</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="933:71" pos:end="957:17">{<block_content pos:start="935:25" pos:end="955:62">

			<expr_stmt pos:start="935:25" pos:end="935:43"><expr pos:start="935:25" pos:end="935:42"><call pos:start="935:25" pos:end="935:42"><name pos:start="935:25" pos:end="935:38">soisfconnected</name><argument_list pos:start="935:39" pos:end="935:42">(<argument pos:start="935:40" pos:end="935:41"><expr pos:start="935:40" pos:end="935:41"><name pos:start="935:40" pos:end="935:41">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="937:25" pos:end="937:55"><expr pos:start="937:25" pos:end="937:54"><name pos:start="937:25" pos:end="937:35"><name pos:start="937:25" pos:end="937:26">tp</name><operator pos:start="937:27" pos:end="937:28">-&gt;</operator><name pos:start="937:29" pos:end="937:35">t_state</name></name> <operator pos:start="937:37" pos:end="937:37">=</operator> <name pos:start="937:39" pos:end="937:54">TCPS_ESTABLISHED</name></expr>;</expr_stmt>



			<expr_stmt pos:start="941:25" pos:end="943:50"><expr pos:start="941:25" pos:end="943:49"><operator pos:start="941:25" pos:end="941:25">(</operator><name pos:start="941:26" pos:end="941:29">void</name><operator pos:start="941:30" pos:end="941:30">)</operator> <call pos:start="941:32" pos:end="943:49"><name pos:start="941:32" pos:end="941:40">tcp_reass</name><argument_list pos:start="941:41" pos:end="943:49">(<argument pos:start="941:42" pos:end="941:43"><expr pos:start="941:42" pos:end="941:43"><name pos:start="941:42" pos:end="941:43">tp</name></expr></argument>, <argument pos:start="941:46" pos:end="941:65"><expr pos:start="941:46" pos:end="941:65"><operator pos:start="941:46" pos:end="941:46">(</operator>struct <name pos:start="941:54" pos:end="941:61">tcpiphdr</name> <operator pos:start="941:63" pos:end="941:63">*</operator><operator pos:start="941:64" pos:end="941:64">)</operator><literal type="number" pos:start="941:65" pos:end="941:65">0</literal></expr></argument>,

				<argument pos:start="943:33" pos:end="943:48"><expr pos:start="943:33" pos:end="943:48"><operator pos:start="943:33" pos:end="943:33">(</operator>struct <name pos:start="943:41" pos:end="943:44">mbuf</name> <operator pos:start="943:46" pos:end="943:46">*</operator><operator pos:start="943:47" pos:end="943:47">)</operator><literal type="number" pos:start="943:48" pos:end="943:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block" pos:start="945:25" pos:end="951:27">/*

			 * if we didn't have to retransmit the SYN,

			 * use its rtt as our initial srtt &amp; rtt var.

			 */</comment>

			<if_stmt pos:start="953:25" pos:end="955:62"><if pos:start="953:25" pos:end="955:62">if <condition pos:start="953:28" pos:end="953:38">(<expr pos:start="953:29" pos:end="953:37"><name pos:start="953:29" pos:end="953:37"><name pos:start="953:29" pos:end="953:30">tp</name><operator pos:start="953:31" pos:end="953:32">-&gt;</operator><name pos:start="953:33" pos:end="953:37">t_rtt</name></name></expr>)</condition><block type="pseudo" pos:start="955:33" pos:end="955:62"><block_content pos:start="955:33" pos:end="955:62">

				<expr_stmt pos:start="955:33" pos:end="955:62"><expr pos:start="955:33" pos:end="955:61"><call pos:start="955:33" pos:end="955:61"><name pos:start="955:33" pos:end="955:46">tcp_xmit_timer</name><argument_list pos:start="955:47" pos:end="955:61">(<argument pos:start="955:48" pos:end="955:49"><expr pos:start="955:48" pos:end="955:49"><name pos:start="955:48" pos:end="955:49">tp</name></expr></argument>, <argument pos:start="955:52" pos:end="955:60"><expr pos:start="955:52" pos:end="955:60"><name pos:start="955:52" pos:end="955:60"><name pos:start="955:52" pos:end="955:53">tp</name><operator pos:start="955:54" pos:end="955:55">-&gt;</operator><name pos:start="955:56" pos:end="955:60">t_rtt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		</block_content>}</block></if> <else pos:start="957:19" pos:end="959:56">else<block type="pseudo" pos:start="959:25" pos:end="959:56"><block_content pos:start="959:25" pos:end="959:56">

			<expr_stmt pos:start="959:25" pos:end="959:56"><expr pos:start="959:25" pos:end="959:55"><name pos:start="959:25" pos:end="959:35"><name pos:start="959:25" pos:end="959:26">tp</name><operator pos:start="959:27" pos:end="959:28">-&gt;</operator><name pos:start="959:29" pos:end="959:35">t_state</name></name> <operator pos:start="959:37" pos:end="959:37">=</operator> <name pos:start="959:39" pos:end="959:55">TCPS_SYN_RECEIVED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



<label pos:start="963:1" pos:end="963:14"><name pos:start="963:1" pos:end="963:13">trimthenstep6</name>:</label>

		<comment type="block" pos:start="965:17" pos:end="973:19">/*

		 * Advance ti-&gt;ti_seq to correspond to first data byte.

		 * If data, trim to stay within window,

		 * dropping FIN if necessary.

		 */</comment>

		<expr_stmt pos:start="975:17" pos:end="975:29"><expr pos:start="975:17" pos:end="975:28"><name pos:start="975:17" pos:end="975:26"><name pos:start="975:17" pos:end="975:18">ti</name><operator pos:start="975:19" pos:end="975:20">-&gt;</operator><name pos:start="975:21" pos:end="975:26">ti_seq</name></name><operator pos:start="975:27" pos:end="975:28">++</operator></expr>;</expr_stmt>

		<if_stmt pos:start="977:17" pos:end="987:17"><if pos:start="977:17" pos:end="987:17">if <condition pos:start="977:20" pos:end="977:45">(<expr pos:start="977:21" pos:end="977:44"><name pos:start="977:21" pos:end="977:30"><name pos:start="977:21" pos:end="977:22">ti</name><operator pos:start="977:23" pos:end="977:24">-&gt;</operator><name pos:start="977:25" pos:end="977:30">ti_len</name></name> <operator pos:start="977:32" pos:end="977:32">&gt;</operator> <name pos:start="977:34" pos:end="977:44"><name pos:start="977:34" pos:end="977:35">tp</name><operator pos:start="977:36" pos:end="977:37">-&gt;</operator><name pos:start="977:38" pos:end="977:44">rcv_wnd</name></name></expr>)</condition> <block pos:start="977:47" pos:end="987:17">{<block_content pos:start="979:25" pos:end="985:43">

			<expr_stmt pos:start="979:25" pos:end="979:58"><expr pos:start="979:25" pos:end="979:57"><name pos:start="979:25" pos:end="979:30">todrop</name> <operator pos:start="979:32" pos:end="979:32">=</operator> <name pos:start="979:34" pos:end="979:43"><name pos:start="979:34" pos:end="979:35">ti</name><operator pos:start="979:36" pos:end="979:37">-&gt;</operator><name pos:start="979:38" pos:end="979:43">ti_len</name></name> <operator pos:start="979:45" pos:end="979:45">-</operator> <name pos:start="979:47" pos:end="979:57"><name pos:start="979:47" pos:end="979:48">tp</name><operator pos:start="979:49" pos:end="979:50">-&gt;</operator><name pos:start="979:51" pos:end="979:57">rcv_wnd</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="981:25" pos:end="981:42"><expr pos:start="981:25" pos:end="981:41"><call pos:start="981:25" pos:end="981:41"><name pos:start="981:25" pos:end="981:29">m_adj</name><argument_list pos:start="981:30" pos:end="981:41">(<argument pos:start="981:31" pos:end="981:31"><expr pos:start="981:31" pos:end="981:31"><name pos:start="981:31" pos:end="981:31">m</name></expr></argument>, <argument pos:start="981:34" pos:end="981:40"><expr pos:start="981:34" pos:end="981:40"><operator pos:start="981:34" pos:end="981:34">-</operator><name pos:start="981:35" pos:end="981:40">todrop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="983:25" pos:end="983:49"><expr pos:start="983:25" pos:end="983:48"><name pos:start="983:25" pos:end="983:34"><name pos:start="983:25" pos:end="983:26">ti</name><operator pos:start="983:27" pos:end="983:28">-&gt;</operator><name pos:start="983:29" pos:end="983:34">ti_len</name></name> <operator pos:start="983:36" pos:end="983:36">=</operator> <name pos:start="983:38" pos:end="983:48"><name pos:start="983:38" pos:end="983:39">tp</name><operator pos:start="983:40" pos:end="983:41">-&gt;</operator><name pos:start="983:42" pos:end="983:48">rcv_wnd</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="985:25" pos:end="985:43"><expr pos:start="985:25" pos:end="985:42"><name pos:start="985:25" pos:end="985:31">tiflags</name> <operator pos:start="985:33" pos:end="985:34">&amp;=</operator> <operator pos:start="985:36" pos:end="985:36">~</operator><name pos:start="985:37" pos:end="985:42">TH_FIN</name></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="989:17" pos:end="989:45"><expr pos:start="989:17" pos:end="989:44"><name pos:start="989:17" pos:end="989:27"><name pos:start="989:17" pos:end="989:18">tp</name><operator pos:start="989:19" pos:end="989:20">-&gt;</operator><name pos:start="989:21" pos:end="989:27">snd_wl1</name></name> <operator pos:start="989:29" pos:end="989:29">=</operator> <name pos:start="989:31" pos:end="989:40"><name pos:start="989:31" pos:end="989:32">ti</name><operator pos:start="989:33" pos:end="989:34">-&gt;</operator><name pos:start="989:35" pos:end="989:40">ti_seq</name></name> <operator pos:start="989:42" pos:end="989:42">-</operator> <literal type="number" pos:start="989:44" pos:end="989:44">1</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="991:17" pos:end="991:40"><expr pos:start="991:17" pos:end="991:39"><name pos:start="991:17" pos:end="991:26"><name pos:start="991:17" pos:end="991:18">tp</name><operator pos:start="991:19" pos:end="991:20">-&gt;</operator><name pos:start="991:21" pos:end="991:26">rcv_up</name></name> <operator pos:start="991:28" pos:end="991:28">=</operator> <name pos:start="991:30" pos:end="991:39"><name pos:start="991:30" pos:end="991:31">ti</name><operator pos:start="991:32" pos:end="991:33">-&gt;</operator><name pos:start="991:34" pos:end="991:39">ti_seq</name></name></expr>;</expr_stmt>

		<goto pos:start="993:17" pos:end="993:27">goto <name pos:start="993:22" pos:end="993:26">step6</name>;</goto>

	</block_content>}</block></switch> <comment type="block" pos:start="995:11" pos:end="995:34">/* switch tp-&gt;t_state */</comment>

	<comment type="block" pos:start="997:9" pos:end="1007:11">/*

	 * States other than LISTEN or SYN_SENT.

	 * Check that at least some bytes of segment are within

	 * receive window.  If segment begins before rcv_nxt,

	 * drop leading data (and SYN); if nothing left, just ack.

	 */</comment>

	<expr_stmt pos:start="1009:9" pos:end="1009:42"><expr pos:start="1009:9" pos:end="1009:41"><name pos:start="1009:9" pos:end="1009:14">todrop</name> <operator pos:start="1009:16" pos:end="1009:16">=</operator> <name pos:start="1009:18" pos:end="1009:28"><name pos:start="1009:18" pos:end="1009:19">tp</name><operator pos:start="1009:20" pos:end="1009:21">-&gt;</operator><name pos:start="1009:22" pos:end="1009:28">rcv_nxt</name></name> <operator pos:start="1009:30" pos:end="1009:30">-</operator> <name pos:start="1009:32" pos:end="1009:41"><name pos:start="1009:32" pos:end="1009:33">ti</name><operator pos:start="1009:34" pos:end="1009:35">-&gt;</operator><name pos:start="1009:36" pos:end="1009:41">ti_seq</name></name></expr>;</expr_stmt>

	<if_stmt pos:start="1011:9" pos:end="1087:9"><if pos:start="1011:9" pos:end="1087:9">if <condition pos:start="1011:12" pos:end="1011:23">(<expr pos:start="1011:13" pos:end="1011:22"><name pos:start="1011:13" pos:end="1011:18">todrop</name> <operator pos:start="1011:20" pos:end="1011:20">&gt;</operator> <literal type="number" pos:start="1011:22" pos:end="1011:22">0</literal></expr>)</condition> <block pos:start="1011:25" pos:end="1087:9">{<block_content pos:start="1013:17" pos:end="1085:17">

		<if_stmt pos:start="1013:17" pos:end="1029:17"><if pos:start="1013:17" pos:end="1029:17">if <condition pos:start="1013:20" pos:end="1013:37">(<expr pos:start="1013:21" pos:end="1013:36"><name pos:start="1013:21" pos:end="1013:27">tiflags</name> <operator pos:start="1013:29" pos:end="1013:29">&amp;</operator> <name pos:start="1013:31" pos:end="1013:36">TH_SYN</name></expr>)</condition> <block pos:start="1013:39" pos:end="1029:17">{<block_content pos:start="1015:25" pos:end="1027:33">

			<expr_stmt pos:start="1015:25" pos:end="1015:43"><expr pos:start="1015:25" pos:end="1015:42"><name pos:start="1015:25" pos:end="1015:31">tiflags</name> <operator pos:start="1015:33" pos:end="1015:34">&amp;=</operator> <operator pos:start="1015:36" pos:end="1015:36">~</operator><name pos:start="1015:37" pos:end="1015:42">TH_SYN</name></expr>;</expr_stmt>

			<expr_stmt pos:start="1017:25" pos:end="1017:37"><expr pos:start="1017:25" pos:end="1017:36"><name pos:start="1017:25" pos:end="1017:34"><name pos:start="1017:25" pos:end="1017:26">ti</name><operator pos:start="1017:27" pos:end="1017:28">-&gt;</operator><name pos:start="1017:29" pos:end="1017:34">ti_seq</name></name><operator pos:start="1017:35" pos:end="1017:36">++</operator></expr>;</expr_stmt>

			<if_stmt pos:start="1019:25" pos:end="1025:51"><if pos:start="1019:25" pos:end="1021:45">if <condition pos:start="1019:28" pos:end="1019:43">(<expr pos:start="1019:29" pos:end="1019:42"><name pos:start="1019:29" pos:end="1019:38"><name pos:start="1019:29" pos:end="1019:30">ti</name><operator pos:start="1019:31" pos:end="1019:32">-&gt;</operator><name pos:start="1019:33" pos:end="1019:38">ti_urp</name></name> <operator pos:start="1019:40" pos:end="1019:40">&gt;</operator> <literal type="number" pos:start="1019:42" pos:end="1019:42">1</literal></expr>)</condition><block type="pseudo" pos:start="1021:33" pos:end="1021:45"><block_content pos:start="1021:33" pos:end="1021:45">

				<expr_stmt pos:start="1021:33" pos:end="1021:45"><expr pos:start="1021:33" pos:end="1021:44"><name pos:start="1021:33" pos:end="1021:42"><name pos:start="1021:33" pos:end="1021:34">ti</name><operator pos:start="1021:35" pos:end="1021:36">-&gt;</operator><name pos:start="1021:37" pos:end="1021:42">ti_urp</name></name><operator pos:start="1021:43" pos:end="1021:44">--</operator></expr>;</expr_stmt></block_content></block></if>

			<else pos:start="1023:25" pos:end="1025:51">else<block type="pseudo" pos:start="1025:33" pos:end="1025:51"><block_content pos:start="1025:33" pos:end="1025:51">

				<expr_stmt pos:start="1025:33" pos:end="1025:51"><expr pos:start="1025:33" pos:end="1025:50"><name pos:start="1025:33" pos:end="1025:39">tiflags</name> <operator pos:start="1025:41" pos:end="1025:42">&amp;=</operator> <operator pos:start="1025:44" pos:end="1025:44">~</operator><name pos:start="1025:45" pos:end="1025:50">TH_URG</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt pos:start="1027:25" pos:end="1027:33"><expr pos:start="1027:25" pos:end="1027:32"><name pos:start="1027:25" pos:end="1027:30">todrop</name><operator pos:start="1027:31" pos:end="1027:32">--</operator></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

		<comment type="block" pos:start="1031:17" pos:end="1035:19">/*

		 * Following if statement from Stevens, vol. 2, p. 960.

		 */</comment>

		<if_stmt pos:start="1037:17" pos:end="1067:17"><if pos:start="1037:17" pos:end="1067:17">if <condition pos:start="1037:20" pos:end="1039:73">(<expr pos:start="1037:21" pos:end="1039:72"><name pos:start="1037:21" pos:end="1037:26">todrop</name> <operator pos:start="1037:28" pos:end="1037:28">&gt;</operator> <name pos:start="1037:30" pos:end="1037:39"><name pos:start="1037:30" pos:end="1037:31">ti</name><operator pos:start="1037:32" pos:end="1037:33">-&gt;</operator><name pos:start="1037:34" pos:end="1037:39">ti_len</name></name>

		    <operator pos:start="1039:21" pos:end="1039:22">||</operator> <operator pos:start="1039:24" pos:end="1039:24">(</operator><name pos:start="1039:25" pos:end="1039:30">todrop</name> <operator pos:start="1039:32" pos:end="1039:33">==</operator> <name pos:start="1039:35" pos:end="1039:44"><name pos:start="1039:35" pos:end="1039:36">ti</name><operator pos:start="1039:37" pos:end="1039:38">-&gt;</operator><name pos:start="1039:39" pos:end="1039:44">ti_len</name></name> <operator pos:start="1039:46" pos:end="1039:47">&amp;&amp;</operator> <operator pos:start="1039:49" pos:end="1039:49">(</operator><name pos:start="1039:50" pos:end="1039:56">tiflags</name> <operator pos:start="1039:58" pos:end="1039:58">&amp;</operator> <name pos:start="1039:60" pos:end="1039:65">TH_FIN</name><operator pos:start="1039:66" pos:end="1039:66">)</operator> <operator pos:start="1039:68" pos:end="1039:69">==</operator> <literal type="number" pos:start="1039:71" pos:end="1039:71">0</literal><operator pos:start="1039:72" pos:end="1039:72">)</operator></expr>)</condition> <block pos:start="1039:75" pos:end="1067:17">{<block_content pos:start="1051:25" pos:end="1065:44">

			<comment type="block" pos:start="1041:25" pos:end="1049:27">/*

			 * Any valid FIN must be to the left of the window.

			 * At this point the FIN must be a duplicate or out

			 * of sequence; drop it.

			 */</comment>

			<expr_stmt pos:start="1051:25" pos:end="1051:43"><expr pos:start="1051:25" pos:end="1051:42"><name pos:start="1051:25" pos:end="1051:31">tiflags</name> <operator pos:start="1051:33" pos:end="1051:34">&amp;=</operator> <operator pos:start="1051:36" pos:end="1051:36">~</operator><name pos:start="1051:37" pos:end="1051:42">TH_FIN</name></expr>;</expr_stmt>



			<comment type="block" pos:start="1055:25" pos:end="1061:27">/*

			 * Send an ACK to resynchronize and drop any data.

			 * But keep on processing for RST or ACK.

			 */</comment>

			<expr_stmt pos:start="1063:25" pos:end="1063:49"><expr pos:start="1063:25" pos:end="1063:48"><name pos:start="1063:25" pos:end="1063:35"><name pos:start="1063:25" pos:end="1063:26">tp</name><operator pos:start="1063:27" pos:end="1063:28">-&gt;</operator><name pos:start="1063:29" pos:end="1063:35">t_flags</name></name> <operator pos:start="1063:37" pos:end="1063:38">|=</operator> <name pos:start="1063:40" pos:end="1063:48">TF_ACKNOW</name></expr>;</expr_stmt>

			<expr_stmt pos:start="1065:25" pos:end="1065:44"><expr pos:start="1065:25" pos:end="1065:43"><name pos:start="1065:25" pos:end="1065:30">todrop</name> <operator pos:start="1065:32" pos:end="1065:32">=</operator> <name pos:start="1065:34" pos:end="1065:43"><name pos:start="1065:34" pos:end="1065:35">ti</name><operator pos:start="1065:36" pos:end="1065:37">-&gt;</operator><name pos:start="1065:38" pos:end="1065:43">ti_len</name></name></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="1069:17" pos:end="1069:33"><expr pos:start="1069:17" pos:end="1069:32"><call pos:start="1069:17" pos:end="1069:32"><name pos:start="1069:17" pos:end="1069:21">m_adj</name><argument_list pos:start="1069:22" pos:end="1069:32">(<argument pos:start="1069:23" pos:end="1069:23"><expr pos:start="1069:23" pos:end="1069:23"><name pos:start="1069:23" pos:end="1069:23">m</name></expr></argument>, <argument pos:start="1069:26" pos:end="1069:31"><expr pos:start="1069:26" pos:end="1069:31"><name pos:start="1069:26" pos:end="1069:31">todrop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="1071:17" pos:end="1071:37"><expr pos:start="1071:17" pos:end="1071:36"><name pos:start="1071:17" pos:end="1071:26"><name pos:start="1071:17" pos:end="1071:18">ti</name><operator pos:start="1071:19" pos:end="1071:20">-&gt;</operator><name pos:start="1071:21" pos:end="1071:26">ti_seq</name></name> <operator pos:start="1071:28" pos:end="1071:29">+=</operator> <name pos:start="1071:31" pos:end="1071:36">todrop</name></expr>;</expr_stmt>

		<expr_stmt pos:start="1073:17" pos:end="1073:37"><expr pos:start="1073:17" pos:end="1073:36"><name pos:start="1073:17" pos:end="1073:26"><name pos:start="1073:17" pos:end="1073:18">ti</name><operator pos:start="1073:19" pos:end="1073:20">-&gt;</operator><name pos:start="1073:21" pos:end="1073:26">ti_len</name></name> <operator pos:start="1073:28" pos:end="1073:29">-=</operator> <name pos:start="1073:31" pos:end="1073:36">todrop</name></expr>;</expr_stmt>

		<if_stmt pos:start="1075:17" pos:end="1085:17"><if pos:start="1075:17" pos:end="1077:45">if <condition pos:start="1075:20" pos:end="1075:40">(<expr pos:start="1075:21" pos:end="1075:39"><name pos:start="1075:21" pos:end="1075:30"><name pos:start="1075:21" pos:end="1075:22">ti</name><operator pos:start="1075:23" pos:end="1075:24">-&gt;</operator><name pos:start="1075:25" pos:end="1075:30">ti_urp</name></name> <operator pos:start="1075:32" pos:end="1075:32">&gt;</operator> <name pos:start="1075:34" pos:end="1075:39">todrop</name></expr>)</condition><block type="pseudo" pos:start="1077:25" pos:end="1077:45"><block_content pos:start="1077:25" pos:end="1077:45">

			<expr_stmt pos:start="1077:25" pos:end="1077:45"><expr pos:start="1077:25" pos:end="1077:44"><name pos:start="1077:25" pos:end="1077:34"><name pos:start="1077:25" pos:end="1077:26">ti</name><operator pos:start="1077:27" pos:end="1077:28">-&gt;</operator><name pos:start="1077:29" pos:end="1077:34">ti_urp</name></name> <operator pos:start="1077:36" pos:end="1077:37">-=</operator> <name pos:start="1077:39" pos:end="1077:44">todrop</name></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="1079:17" pos:end="1085:17">else <block pos:start="1079:22" pos:end="1085:17">{<block_content pos:start="1081:25" pos:end="1083:39">

			<expr_stmt pos:start="1081:25" pos:end="1081:43"><expr pos:start="1081:25" pos:end="1081:42"><name pos:start="1081:25" pos:end="1081:31">tiflags</name> <operator pos:start="1081:33" pos:end="1081:34">&amp;=</operator> <operator pos:start="1081:36" pos:end="1081:36">~</operator><name pos:start="1081:37" pos:end="1081:42">TH_URG</name></expr>;</expr_stmt>

			<expr_stmt pos:start="1083:25" pos:end="1083:39"><expr pos:start="1083:25" pos:end="1083:38"><name pos:start="1083:25" pos:end="1083:34"><name pos:start="1083:25" pos:end="1083:26">ti</name><operator pos:start="1083:27" pos:end="1083:28">-&gt;</operator><name pos:start="1083:29" pos:end="1083:34">ti_urp</name></name> <operator pos:start="1083:36" pos:end="1083:36">=</operator> <literal type="number" pos:start="1083:38" pos:end="1083:38">0</literal></expr>;</expr_stmt>

		</block_content>}</block></else></if_stmt>

	</block_content>}</block></if></if_stmt>

	<comment type="block" pos:start="1089:9" pos:end="1095:11">/*

	 * If new data are received on a connection after the

	 * user processes are gone, then RST the other end.

	 */</comment>

	<if_stmt pos:start="1097:9" pos:end="1105:9"><if pos:start="1097:9" pos:end="1105:9">if <condition pos:start="1097:12" pos:end="1099:56">(<expr pos:start="1097:13" pos:end="1099:55"><operator pos:start="1097:13" pos:end="1097:13">(</operator><name pos:start="1097:14" pos:end="1097:25"><name pos:start="1097:14" pos:end="1097:15">so</name><operator pos:start="1097:16" pos:end="1097:17">-&gt;</operator><name pos:start="1097:18" pos:end="1097:25">so_state</name></name> <operator pos:start="1097:27" pos:end="1097:27">&amp;</operator> <name pos:start="1097:29" pos:end="1097:38">SS_NOFDREF</name><operator pos:start="1097:39" pos:end="1097:39">)</operator> <operator pos:start="1097:41" pos:end="1097:42">&amp;&amp;</operator>

	    <name pos:start="1099:13" pos:end="1099:23"><name pos:start="1099:13" pos:end="1099:14">tp</name><operator pos:start="1099:15" pos:end="1099:16">-&gt;</operator><name pos:start="1099:17" pos:end="1099:23">t_state</name></name> <operator pos:start="1099:25" pos:end="1099:25">&gt;</operator> <name pos:start="1099:27" pos:end="1099:41">TCPS_CLOSE_WAIT</name> <operator pos:start="1099:43" pos:end="1099:44">&amp;&amp;</operator> <name pos:start="1099:46" pos:end="1099:55"><name pos:start="1099:46" pos:end="1099:47">ti</name><operator pos:start="1099:48" pos:end="1099:49">-&gt;</operator><name pos:start="1099:50" pos:end="1099:55">ti_len</name></name></expr>)</condition> <block pos:start="1099:58" pos:end="1105:9">{<block_content pos:start="1101:17" pos:end="1103:35">

		<expr_stmt pos:start="1101:17" pos:end="1101:35"><expr pos:start="1101:17" pos:end="1101:34"><name pos:start="1101:17" pos:end="1101:18">tp</name> <operator pos:start="1101:20" pos:end="1101:20">=</operator> <call pos:start="1101:22" pos:end="1101:34"><name pos:start="1101:22" pos:end="1101:30">tcp_close</name><argument_list pos:start="1101:31" pos:end="1101:34">(<argument pos:start="1101:32" pos:end="1101:33"><expr pos:start="1101:32" pos:end="1101:33"><name pos:start="1101:32" pos:end="1101:33">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<goto pos:start="1103:17" pos:end="1103:35">goto <name pos:start="1103:22" pos:end="1103:34">dropwithreset</name>;</goto>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="1109:9" pos:end="1115:11">/*

	 * If segment ends after window, drop trailing data

	 * (and PUSH and FIN); if nothing left, just ACK.

	 */</comment>

	<expr_stmt pos:start="1117:9" pos:end="1117:69"><expr pos:start="1117:9" pos:end="1117:68"><name pos:start="1117:9" pos:end="1117:14">todrop</name> <operator pos:start="1117:16" pos:end="1117:16">=</operator> <operator pos:start="1117:18" pos:end="1117:18">(</operator><name pos:start="1117:19" pos:end="1117:28"><name pos:start="1117:19" pos:end="1117:20">ti</name><operator pos:start="1117:21" pos:end="1117:22">-&gt;</operator><name pos:start="1117:23" pos:end="1117:28">ti_seq</name></name><operator pos:start="1117:29" pos:end="1117:29">+</operator><name pos:start="1117:30" pos:end="1117:39"><name pos:start="1117:30" pos:end="1117:31">ti</name><operator pos:start="1117:32" pos:end="1117:33">-&gt;</operator><name pos:start="1117:34" pos:end="1117:39">ti_len</name></name><operator pos:start="1117:40" pos:end="1117:40">)</operator> <operator pos:start="1117:42" pos:end="1117:42">-</operator> <operator pos:start="1117:44" pos:end="1117:44">(</operator><name pos:start="1117:45" pos:end="1117:55"><name pos:start="1117:45" pos:end="1117:46">tp</name><operator pos:start="1117:47" pos:end="1117:48">-&gt;</operator><name pos:start="1117:49" pos:end="1117:55">rcv_nxt</name></name><operator pos:start="1117:56" pos:end="1117:56">+</operator><name pos:start="1117:57" pos:end="1117:67"><name pos:start="1117:57" pos:end="1117:58">tp</name><operator pos:start="1117:59" pos:end="1117:60">-&gt;</operator><name pos:start="1117:61" pos:end="1117:67">rcv_wnd</name></name><operator pos:start="1117:68" pos:end="1117:68">)</operator></expr>;</expr_stmt>

	<if_stmt pos:start="1119:9" pos:end="1181:9"><if pos:start="1119:9" pos:end="1181:9">if <condition pos:start="1119:12" pos:end="1119:23">(<expr pos:start="1119:13" pos:end="1119:22"><name pos:start="1119:13" pos:end="1119:18">todrop</name> <operator pos:start="1119:20" pos:end="1119:20">&gt;</operator> <literal type="number" pos:start="1119:22" pos:end="1119:22">0</literal></expr>)</condition> <block pos:start="1119:25" pos:end="1181:9">{<block_content pos:start="1121:17" pos:end="1179:45">

		<if_stmt pos:start="1121:17" pos:end="1173:17"><if pos:start="1121:17" pos:end="1173:17">if <condition pos:start="1121:20" pos:end="1121:41">(<expr pos:start="1121:21" pos:end="1121:40"><name pos:start="1121:21" pos:end="1121:26">todrop</name> <operator pos:start="1121:28" pos:end="1121:29">&gt;=</operator> <name pos:start="1121:31" pos:end="1121:40"><name pos:start="1121:31" pos:end="1121:32">ti</name><operator pos:start="1121:33" pos:end="1121:34">-&gt;</operator><name pos:start="1121:35" pos:end="1121:40">ti_len</name></name></expr>)</condition> <block pos:start="1121:43" pos:end="1173:17">{<block_content pos:start="1135:25" pos:end="1171:25">

			<comment type="block" pos:start="1123:25" pos:end="1133:27">/*

			 * If a new connection request is received

			 * while in TIME_WAIT, drop the old connection

			 * and start over if the sequence numbers

			 * are above the previous ones.

			 */</comment>

			<if_stmt pos:start="1135:25" pos:end="1147:25"><if pos:start="1135:25" pos:end="1147:25">if <condition pos:start="1135:28" pos:end="1139:60">(<expr pos:start="1135:29" pos:end="1139:59"><name pos:start="1135:29" pos:end="1135:35">tiflags</name> <operator pos:start="1135:37" pos:end="1135:37">&amp;</operator> <name pos:start="1135:39" pos:end="1135:44">TH_SYN</name> <operator pos:start="1135:46" pos:end="1135:47">&amp;&amp;</operator>

			    <name pos:start="1137:29" pos:end="1137:39"><name pos:start="1137:29" pos:end="1137:30">tp</name><operator pos:start="1137:31" pos:end="1137:32">-&gt;</operator><name pos:start="1137:33" pos:end="1137:39">t_state</name></name> <operator pos:start="1137:41" pos:end="1137:42">==</operator> <name pos:start="1137:44" pos:end="1137:57">TCPS_TIME_WAIT</name> <operator pos:start="1137:59" pos:end="1137:60">&amp;&amp;</operator>

			    <call pos:start="1139:29" pos:end="1139:59"><name pos:start="1139:29" pos:end="1139:34">SEQ_GT</name><argument_list pos:start="1139:35" pos:end="1139:59">(<argument pos:start="1139:36" pos:end="1139:45"><expr pos:start="1139:36" pos:end="1139:45"><name pos:start="1139:36" pos:end="1139:45"><name pos:start="1139:36" pos:end="1139:37">ti</name><operator pos:start="1139:38" pos:end="1139:39">-&gt;</operator><name pos:start="1139:40" pos:end="1139:45">ti_seq</name></name></expr></argument>, <argument pos:start="1139:48" pos:end="1139:58"><expr pos:start="1139:48" pos:end="1139:58"><name pos:start="1139:48" pos:end="1139:58"><name pos:start="1139:48" pos:end="1139:49">tp</name><operator pos:start="1139:50" pos:end="1139:51">-&gt;</operator><name pos:start="1139:52" pos:end="1139:58">rcv_nxt</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1139:62" pos:end="1147:25">{<block_content pos:start="1141:33" pos:end="1145:44">

				<expr_stmt pos:start="1141:33" pos:end="1141:64"><expr pos:start="1141:33" pos:end="1141:63"><name pos:start="1141:33" pos:end="1141:35">iss</name> <operator pos:start="1141:37" pos:end="1141:37">=</operator> <name pos:start="1141:39" pos:end="1141:49"><name pos:start="1141:39" pos:end="1141:40">tp</name><operator pos:start="1141:41" pos:end="1141:42">-&gt;</operator><name pos:start="1141:43" pos:end="1141:49">rcv_nxt</name></name> <operator pos:start="1141:51" pos:end="1141:51">+</operator> <name pos:start="1141:53" pos:end="1141:63">TCP_ISSINCR</name></expr>;</expr_stmt>

				<expr_stmt pos:start="1143:33" pos:end="1143:51"><expr pos:start="1143:33" pos:end="1143:50"><name pos:start="1143:33" pos:end="1143:34">tp</name> <operator pos:start="1143:36" pos:end="1143:36">=</operator> <call pos:start="1143:38" pos:end="1143:50"><name pos:start="1143:38" pos:end="1143:46">tcp_close</name><argument_list pos:start="1143:47" pos:end="1143:50">(<argument pos:start="1143:48" pos:end="1143:49"><expr pos:start="1143:48" pos:end="1143:49"><name pos:start="1143:48" pos:end="1143:49">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<goto pos:start="1145:33" pos:end="1145:44">goto <name pos:start="1145:38" pos:end="1145:43">findso</name>;</goto>

			</block_content>}</block></if></if_stmt>

			<comment type="block" pos:start="1149:25" pos:end="1161:27">/*

			 * If window is closed can only take segments at

			 * window edge, and have to drop data and PUSH from

			 * incoming segments.  Continue processing, but

			 * remember to ack.  Otherwise, drop segment

			 * and ack.

			 */</comment>

			<if_stmt pos:start="1163:25" pos:end="1171:25"><if pos:start="1163:25" pos:end="1167:25">if <condition pos:start="1163:28" pos:end="1163:74">(<expr pos:start="1163:29" pos:end="1163:73"><name pos:start="1163:29" pos:end="1163:39"><name pos:start="1163:29" pos:end="1163:30">tp</name><operator pos:start="1163:31" pos:end="1163:32">-&gt;</operator><name pos:start="1163:33" pos:end="1163:39">rcv_wnd</name></name> <operator pos:start="1163:41" pos:end="1163:42">==</operator> <literal type="number" pos:start="1163:44" pos:end="1163:44">0</literal> <operator pos:start="1163:46" pos:end="1163:47">&amp;&amp;</operator> <name pos:start="1163:49" pos:end="1163:58"><name pos:start="1163:49" pos:end="1163:50">ti</name><operator pos:start="1163:51" pos:end="1163:52">-&gt;</operator><name pos:start="1163:53" pos:end="1163:58">ti_seq</name></name> <operator pos:start="1163:60" pos:end="1163:61">==</operator> <name pos:start="1163:63" pos:end="1163:73"><name pos:start="1163:63" pos:end="1163:64">tp</name><operator pos:start="1163:65" pos:end="1163:66">-&gt;</operator><name pos:start="1163:67" pos:end="1163:73">rcv_nxt</name></name></expr>)</condition> <block pos:start="1163:76" pos:end="1167:25">{<block_content pos:start="1165:33" pos:end="1165:57">

				<expr_stmt pos:start="1165:33" pos:end="1165:57"><expr pos:start="1165:33" pos:end="1165:56"><name pos:start="1165:33" pos:end="1165:43"><name pos:start="1165:33" pos:end="1165:34">tp</name><operator pos:start="1165:35" pos:end="1165:36">-&gt;</operator><name pos:start="1165:37" pos:end="1165:43">t_flags</name></name> <operator pos:start="1165:45" pos:end="1165:46">|=</operator> <name pos:start="1165:48" pos:end="1165:56">TF_ACKNOW</name></expr>;</expr_stmt>

			</block_content>}</block></if> <else pos:start="1167:27" pos:end="1171:25">else <block pos:start="1167:32" pos:end="1171:25">{<block_content pos:start="1169:33" pos:end="1169:50">

				<goto pos:start="1169:33" pos:end="1169:50">goto <name pos:start="1169:38" pos:end="1169:49">dropafterack</name>;</goto>

			</block_content>}</block></else></if_stmt>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="1175:17" pos:end="1175:34"><expr pos:start="1175:17" pos:end="1175:33"><call pos:start="1175:17" pos:end="1175:33"><name pos:start="1175:17" pos:end="1175:21">m_adj</name><argument_list pos:start="1175:22" pos:end="1175:33">(<argument pos:start="1175:23" pos:end="1175:23"><expr pos:start="1175:23" pos:end="1175:23"><name pos:start="1175:23" pos:end="1175:23">m</name></expr></argument>, <argument pos:start="1175:26" pos:end="1175:32"><expr pos:start="1175:26" pos:end="1175:32"><operator pos:start="1175:26" pos:end="1175:26">-</operator><name pos:start="1175:27" pos:end="1175:32">todrop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="1177:17" pos:end="1177:37"><expr pos:start="1177:17" pos:end="1177:36"><name pos:start="1177:17" pos:end="1177:26"><name pos:start="1177:17" pos:end="1177:18">ti</name><operator pos:start="1177:19" pos:end="1177:20">-&gt;</operator><name pos:start="1177:21" pos:end="1177:26">ti_len</name></name> <operator pos:start="1177:28" pos:end="1177:29">-=</operator> <name pos:start="1177:31" pos:end="1177:36">todrop</name></expr>;</expr_stmt>

		<expr_stmt pos:start="1179:17" pos:end="1179:45"><expr pos:start="1179:17" pos:end="1179:44"><name pos:start="1179:17" pos:end="1179:23">tiflags</name> <operator pos:start="1179:25" pos:end="1179:26">&amp;=</operator> <operator pos:start="1179:28" pos:end="1179:28">~</operator><operator pos:start="1179:29" pos:end="1179:29">(</operator><name pos:start="1179:30" pos:end="1179:36">TH_PUSH</name><operator pos:start="1179:37" pos:end="1179:37">|</operator><name pos:start="1179:38" pos:end="1179:43">TH_FIN</name><operator pos:start="1179:44" pos:end="1179:44">)</operator></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="1185:9" pos:end="1203:11">/*

	 * If the RST bit is set examine the state:

	 *    SYN_RECEIVED STATE:

	 *	If passive open, return to LISTEN state.

	 *	If active open, inform user that connection was refused.

	 *    ESTABLISHED, FIN_WAIT_1, FIN_WAIT2, CLOSE_WAIT STATES:

	 *	Inform user that connection was reset, and close tcb.

	 *    CLOSING, LAST_ACK, TIME_WAIT STATES

	 *	Close the tcb.

	 */</comment>

	<if_stmt pos:start="1205:9" pos:end="1237:9"><if pos:start="1205:9" pos:end="1237:9">if <condition pos:start="1205:12" pos:end="1205:27">(<expr pos:start="1205:13" pos:end="1205:26"><name pos:start="1205:13" pos:end="1205:19">tiflags</name><operator pos:start="1205:20" pos:end="1205:20">&amp;</operator><name pos:start="1205:21" pos:end="1205:26">TH_RST</name></expr>)</condition><block type="pseudo" pos:start="1205:29" pos:end="1237:9"><block_content pos:start="1205:29" pos:end="1237:9"> <switch pos:start="1205:29" pos:end="1237:9">switch <condition pos:start="1205:36" pos:end="1205:48">(<expr pos:start="1205:37" pos:end="1205:47"><name pos:start="1205:37" pos:end="1205:47"><name pos:start="1205:37" pos:end="1205:38">tp</name><operator pos:start="1205:39" pos:end="1205:40">-&gt;</operator><name pos:start="1205:41" pos:end="1205:47">t_state</name></name></expr>)</condition> <block pos:start="1205:50" pos:end="1237:9">{<block_content pos:start="1209:9" pos:end="1235:26">



	<case pos:start="1209:9" pos:end="1209:31">case <expr pos:start="1209:14" pos:end="1209:30"><name pos:start="1209:14" pos:end="1209:30">TCPS_SYN_RECEIVED</name></expr>:</case>

	<case pos:start="1211:9" pos:end="1211:30">case <expr pos:start="1211:14" pos:end="1211:29"><name pos:start="1211:14" pos:end="1211:29">TCPS_ESTABLISHED</name></expr>:</case>

	<case pos:start="1213:9" pos:end="1213:29">case <expr pos:start="1213:14" pos:end="1213:28"><name pos:start="1213:14" pos:end="1213:28">TCPS_FIN_WAIT_1</name></expr>:</case>

	<case pos:start="1215:9" pos:end="1215:29">case <expr pos:start="1215:14" pos:end="1215:28"><name pos:start="1215:14" pos:end="1215:28">TCPS_FIN_WAIT_2</name></expr>:</case>

	<case pos:start="1217:9" pos:end="1217:29">case <expr pos:start="1217:14" pos:end="1217:28"><name pos:start="1217:14" pos:end="1217:28">TCPS_CLOSE_WAIT</name></expr>:</case>

		<expr_stmt pos:start="1219:17" pos:end="1219:42"><expr pos:start="1219:17" pos:end="1219:41"><name pos:start="1219:17" pos:end="1219:27"><name pos:start="1219:17" pos:end="1219:18">tp</name><operator pos:start="1219:19" pos:end="1219:20">-&gt;</operator><name pos:start="1219:21" pos:end="1219:27">t_state</name></name> <operator pos:start="1219:29" pos:end="1219:29">=</operator> <name pos:start="1219:31" pos:end="1219:41">TCPS_CLOSED</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1221:17" pos:end="1221:30"><expr pos:start="1221:17" pos:end="1221:29"><call pos:start="1221:17" pos:end="1221:29"><name pos:start="1221:17" pos:end="1221:25">tcp_close</name><argument_list pos:start="1221:26" pos:end="1221:29">(<argument pos:start="1221:27" pos:end="1221:28"><expr pos:start="1221:27" pos:end="1221:28"><name pos:start="1221:27" pos:end="1221:28">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<goto pos:start="1223:17" pos:end="1223:26">goto <name pos:start="1223:22" pos:end="1223:25">drop</name>;</goto>



	<case pos:start="1227:9" pos:end="1227:26">case <expr pos:start="1227:14" pos:end="1227:25"><name pos:start="1227:14" pos:end="1227:25">TCPS_CLOSING</name></expr>:</case>

	<case pos:start="1229:9" pos:end="1229:27">case <expr pos:start="1229:14" pos:end="1229:26"><name pos:start="1229:14" pos:end="1229:26">TCPS_LAST_ACK</name></expr>:</case>

	<case pos:start="1231:9" pos:end="1231:28">case <expr pos:start="1231:14" pos:end="1231:27"><name pos:start="1231:14" pos:end="1231:27">TCPS_TIME_WAIT</name></expr>:</case>

                <expr_stmt pos:start="1233:17" pos:end="1233:30"><expr pos:start="1233:17" pos:end="1233:29"><call pos:start="1233:17" pos:end="1233:29"><name pos:start="1233:17" pos:end="1233:25">tcp_close</name><argument_list pos:start="1233:26" pos:end="1233:29">(<argument pos:start="1233:27" pos:end="1233:28"><expr pos:start="1233:27" pos:end="1233:28"><name pos:start="1233:27" pos:end="1233:28">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<goto pos:start="1235:17" pos:end="1235:26">goto <name pos:start="1235:22" pos:end="1235:25">drop</name>;</goto>

	</block_content>}</block></switch></block_content></block></if></if_stmt>



	<comment type="block" pos:start="1241:9" pos:end="1247:11">/*

	 * If a SYN is in the window, then this is an

	 * error and we send an RST and drop the connection.

	 */</comment>

	<if_stmt pos:start="1249:9" pos:end="1255:9"><if pos:start="1249:9" pos:end="1255:9">if <condition pos:start="1249:12" pos:end="1249:29">(<expr pos:start="1249:13" pos:end="1249:28"><name pos:start="1249:13" pos:end="1249:19">tiflags</name> <operator pos:start="1249:21" pos:end="1249:21">&amp;</operator> <name pos:start="1249:23" pos:end="1249:28">TH_SYN</name></expr>)</condition> <block pos:start="1249:31" pos:end="1255:9">{<block_content pos:start="1251:17" pos:end="1253:35">

		<expr_stmt pos:start="1251:17" pos:end="1251:36"><expr pos:start="1251:17" pos:end="1251:35"><name pos:start="1251:17" pos:end="1251:18">tp</name> <operator pos:start="1251:20" pos:end="1251:20">=</operator> <call pos:start="1251:22" pos:end="1251:35"><name pos:start="1251:22" pos:end="1251:29">tcp_drop</name><argument_list pos:start="1251:30" pos:end="1251:35">(<argument pos:start="1251:31" pos:end="1251:32"><expr pos:start="1251:31" pos:end="1251:32"><name pos:start="1251:31" pos:end="1251:32">tp</name></expr></argument>,<argument pos:start="1251:34" pos:end="1251:34"><expr pos:start="1251:34" pos:end="1251:34"><literal type="number" pos:start="1251:34" pos:end="1251:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<goto pos:start="1253:17" pos:end="1253:35">goto <name pos:start="1253:22" pos:end="1253:34">dropwithreset</name>;</goto>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="1259:9" pos:end="1263:11">/*

	 * If the ACK bit is off we drop the segment and return.

	 */</comment>

	<if_stmt pos:start="1265:9" pos:end="1265:47"><if pos:start="1265:9" pos:end="1265:47">if <condition pos:start="1265:12" pos:end="1265:36">(<expr pos:start="1265:13" pos:end="1265:35"><operator pos:start="1265:13" pos:end="1265:13">(</operator><name pos:start="1265:14" pos:end="1265:20">tiflags</name> <operator pos:start="1265:22" pos:end="1265:22">&amp;</operator> <name pos:start="1265:24" pos:end="1265:29">TH_ACK</name><operator pos:start="1265:30" pos:end="1265:30">)</operator> <operator pos:start="1265:32" pos:end="1265:33">==</operator> <literal type="number" pos:start="1265:35" pos:end="1265:35">0</literal></expr>)</condition><block type="pseudo" pos:start="1265:38" pos:end="1265:47"><block_content pos:start="1265:38" pos:end="1265:47"> <goto pos:start="1265:38" pos:end="1265:47">goto <name pos:start="1265:43" pos:end="1265:46">drop</name>;</goto></block_content></block></if></if_stmt>



	<comment type="block" pos:start="1269:9" pos:end="1273:11">/*

	 * Ack processing.

	 */</comment>

	<switch pos:start="1275:9" pos:end="1755:9">switch <condition pos:start="1275:16" pos:end="1275:28">(<expr pos:start="1275:17" pos:end="1275:27"><name pos:start="1275:17" pos:end="1275:27"><name pos:start="1275:17" pos:end="1275:18">tp</name><operator pos:start="1275:19" pos:end="1275:20">-&gt;</operator><name pos:start="1275:21" pos:end="1275:27">t_state</name></name></expr>)</condition> <block pos:start="1275:30" pos:end="1755:9">{<block_content pos:start="1287:9" pos:end="1753:17">

	<comment type="block" pos:start="1277:9" pos:end="1285:11">/*

	 * In SYN_RECEIVED state if the ack ACKs our SYN then enter

	 * ESTABLISHED state and continue processing, otherwise

	 * send an RST.  una&lt;=ack&lt;=max

	 */</comment>

	<case pos:start="1287:9" pos:end="1287:31">case <expr pos:start="1287:14" pos:end="1287:30"><name pos:start="1287:14" pos:end="1287:30">TCPS_SYN_RECEIVED</name></expr>:</case>



		<if_stmt pos:start="1291:17" pos:end="1295:43"><if pos:start="1291:17" pos:end="1295:43">if <condition pos:start="1291:20" pos:end="1293:52">(<expr pos:start="1291:21" pos:end="1293:51"><call pos:start="1291:21" pos:end="1291:51"><name pos:start="1291:21" pos:end="1291:26">SEQ_GT</name><argument_list pos:start="1291:27" pos:end="1291:51">(<argument pos:start="1291:28" pos:end="1291:38"><expr pos:start="1291:28" pos:end="1291:38"><name pos:start="1291:28" pos:end="1291:38"><name pos:start="1291:28" pos:end="1291:29">tp</name><operator pos:start="1291:30" pos:end="1291:31">-&gt;</operator><name pos:start="1291:32" pos:end="1291:38">snd_una</name></name></expr></argument>, <argument pos:start="1291:41" pos:end="1291:50"><expr pos:start="1291:41" pos:end="1291:50"><name pos:start="1291:41" pos:end="1291:50"><name pos:start="1291:41" pos:end="1291:42">ti</name><operator pos:start="1291:43" pos:end="1291:44">-&gt;</operator><name pos:start="1291:45" pos:end="1291:50">ti_ack</name></name></expr></argument>)</argument_list></call> <operator pos:start="1291:53" pos:end="1291:54">||</operator>

		    <call pos:start="1293:21" pos:end="1293:51"><name pos:start="1293:21" pos:end="1293:26">SEQ_GT</name><argument_list pos:start="1293:27" pos:end="1293:51">(<argument pos:start="1293:28" pos:end="1293:37"><expr pos:start="1293:28" pos:end="1293:37"><name pos:start="1293:28" pos:end="1293:37"><name pos:start="1293:28" pos:end="1293:29">ti</name><operator pos:start="1293:30" pos:end="1293:31">-&gt;</operator><name pos:start="1293:32" pos:end="1293:37">ti_ack</name></name></expr></argument>, <argument pos:start="1293:40" pos:end="1293:50"><expr pos:start="1293:40" pos:end="1293:50"><name pos:start="1293:40" pos:end="1293:50"><name pos:start="1293:40" pos:end="1293:41">tp</name><operator pos:start="1293:42" pos:end="1293:43">-&gt;</operator><name pos:start="1293:44" pos:end="1293:50">snd_max</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1295:25" pos:end="1295:43"><block_content pos:start="1295:25" pos:end="1295:43">

			<goto pos:start="1295:25" pos:end="1295:43">goto <name pos:start="1295:30" pos:end="1295:42">dropwithreset</name>;</goto></block_content></block></if></if_stmt>

		<expr_stmt pos:start="1297:17" pos:end="1297:47"><expr pos:start="1297:17" pos:end="1297:46"><name pos:start="1297:17" pos:end="1297:27"><name pos:start="1297:17" pos:end="1297:18">tp</name><operator pos:start="1297:19" pos:end="1297:20">-&gt;</operator><name pos:start="1297:21" pos:end="1297:27">t_state</name></name> <operator pos:start="1297:29" pos:end="1297:29">=</operator> <name pos:start="1297:31" pos:end="1297:46">TCPS_ESTABLISHED</name></expr>;</expr_stmt>

		<comment type="block" pos:start="1299:17" pos:end="1311:19">/*

		 * The sent SYN is ack'ed with our sequence number +1

		 * The first data byte already in the buffer will get

		 * lost if no correction is made.  This is only needed for

		 * SS_CTL since the buffer is empty otherwise.

		 * tp-&gt;snd_una++; or:

		 */</comment>

		<expr_stmt pos:start="1313:17" pos:end="1313:39"><expr pos:start="1313:17" pos:end="1313:38"><name pos:start="1313:17" pos:end="1313:27"><name pos:start="1313:17" pos:end="1313:18">tp</name><operator pos:start="1313:19" pos:end="1313:20">-&gt;</operator><name pos:start="1313:21" pos:end="1313:27">snd_una</name></name><operator pos:start="1313:28" pos:end="1313:28">=</operator><name pos:start="1313:29" pos:end="1313:38"><name pos:start="1313:29" pos:end="1313:30">ti</name><operator pos:start="1313:31" pos:end="1313:32">-&gt;</operator><name pos:start="1313:33" pos:end="1313:38">ti_ack</name></name></expr>;</expr_stmt>

		<if_stmt pos:start="1315:17" pos:end="1345:17"><if pos:start="1315:17" pos:end="1341:17">if <condition pos:start="1315:20" pos:end="1315:42">(<expr pos:start="1315:21" pos:end="1315:41"><name pos:start="1315:21" pos:end="1315:32"><name pos:start="1315:21" pos:end="1315:22">so</name><operator pos:start="1315:23" pos:end="1315:24">-&gt;</operator><name pos:start="1315:25" pos:end="1315:32">so_state</name></name> <operator pos:start="1315:34" pos:end="1315:34">&amp;</operator> <name pos:start="1315:36" pos:end="1315:41">SS_CTL</name></expr>)</condition> <block pos:start="1315:44" pos:end="1341:17">{<block_content pos:start="1319:19" pos:end="1339:19">

		  <comment type="block" pos:start="1317:19" pos:end="1317:58">/* So tcp_ctl reports the right state */</comment>

		  <expr_stmt pos:start="1319:19" pos:end="1319:36"><expr pos:start="1319:19" pos:end="1319:35"><name pos:start="1319:19" pos:end="1319:21">ret</name> <operator pos:start="1319:23" pos:end="1319:23">=</operator> <call pos:start="1319:25" pos:end="1319:35"><name pos:start="1319:25" pos:end="1319:31">tcp_ctl</name><argument_list pos:start="1319:32" pos:end="1319:35">(<argument pos:start="1319:33" pos:end="1319:34"><expr pos:start="1319:33" pos:end="1319:34"><name pos:start="1319:33" pos:end="1319:34">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <if_stmt pos:start="1321:19" pos:end="1339:19"><if pos:start="1321:19" pos:end="1327:19">if <condition pos:start="1321:22" pos:end="1321:31">(<expr pos:start="1321:23" pos:end="1321:30"><name pos:start="1321:23" pos:end="1321:25">ret</name> <operator pos:start="1321:27" pos:end="1321:28">==</operator> <literal type="number" pos:start="1321:30" pos:end="1321:30">1</literal></expr>)</condition> <block pos:start="1321:33" pos:end="1327:19">{<block_content pos:start="1323:21" pos:end="1325:44">

		    <expr_stmt pos:start="1323:21" pos:end="1323:39"><expr pos:start="1323:21" pos:end="1323:38"><call pos:start="1323:21" pos:end="1323:38"><name pos:start="1323:21" pos:end="1323:34">soisfconnected</name><argument_list pos:start="1323:35" pos:end="1323:38">(<argument pos:start="1323:36" pos:end="1323:37"><expr pos:start="1323:36" pos:end="1323:37"><name pos:start="1323:36" pos:end="1323:37">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="1325:21" pos:end="1325:44"><expr pos:start="1325:21" pos:end="1325:43"><name pos:start="1325:21" pos:end="1325:32"><name pos:start="1325:21" pos:end="1325:22">so</name><operator pos:start="1325:23" pos:end="1325:24">-&gt;</operator><name pos:start="1325:25" pos:end="1325:32">so_state</name></name> <operator pos:start="1325:34" pos:end="1325:35">&amp;=</operator> <operator pos:start="1325:37" pos:end="1325:37">~</operator><name pos:start="1325:38" pos:end="1325:43">SS_CTL</name></expr>;</expr_stmt>   <comment type="block" pos:start="1325:48" pos:end="1325:64">/* success XXX */</comment>

		  </block_content>}</block></if> <if type="elseif" pos:start="1327:21" pos:end="1333:19">else if <condition pos:start="1327:29" pos:end="1327:38">(<expr pos:start="1327:30" pos:end="1327:37"><name pos:start="1327:30" pos:end="1327:32">ret</name> <operator pos:start="1327:34" pos:end="1327:35">==</operator> <literal type="number" pos:start="1327:37" pos:end="1327:37">2</literal></expr>)</condition> <block pos:start="1327:40" pos:end="1333:19">{<block_content pos:start="1329:21" pos:end="1331:47">

		    <expr_stmt pos:start="1329:21" pos:end="1329:55"><expr pos:start="1329:21" pos:end="1329:54"><name pos:start="1329:21" pos:end="1329:32"><name pos:start="1329:21" pos:end="1329:22">so</name><operator pos:start="1329:23" pos:end="1329:24">-&gt;</operator><name pos:start="1329:25" pos:end="1329:32">so_state</name></name> <operator pos:start="1329:34" pos:end="1329:35">&amp;=</operator> <name pos:start="1329:37" pos:end="1329:54">SS_PERSISTENT_MASK</name></expr>;</expr_stmt>

		    <expr_stmt pos:start="1331:21" pos:end="1331:47"><expr pos:start="1331:21" pos:end="1331:46"><name pos:start="1331:21" pos:end="1331:32"><name pos:start="1331:21" pos:end="1331:22">so</name><operator pos:start="1331:23" pos:end="1331:24">-&gt;</operator><name pos:start="1331:25" pos:end="1331:32">so_state</name></name> <operator pos:start="1331:34" pos:end="1331:35">|=</operator> <name pos:start="1331:37" pos:end="1331:46">SS_NOFDREF</name></expr>;</expr_stmt> <comment type="block" pos:start="1331:49" pos:end="1331:61">/* CTL_CMD */</comment>

		  </block_content>}</block></if> <else pos:start="1333:21" pos:end="1339:19">else <block pos:start="1333:26" pos:end="1339:19">{<block_content pos:start="1335:21" pos:end="1337:50">

		    <expr_stmt pos:start="1335:21" pos:end="1335:35"><expr pos:start="1335:21" pos:end="1335:34"><name pos:start="1335:21" pos:end="1335:30">needoutput</name> <operator pos:start="1335:32" pos:end="1335:32">=</operator> <literal type="number" pos:start="1335:34" pos:end="1335:34">1</literal></expr>;</expr_stmt>

		    <expr_stmt pos:start="1337:21" pos:end="1337:50"><expr pos:start="1337:21" pos:end="1337:49"><name pos:start="1337:21" pos:end="1337:31"><name pos:start="1337:21" pos:end="1337:22">tp</name><operator pos:start="1337:23" pos:end="1337:24">-&gt;</operator><name pos:start="1337:25" pos:end="1337:31">t_state</name></name> <operator pos:start="1337:33" pos:end="1337:33">=</operator> <name pos:start="1337:35" pos:end="1337:49">TCPS_FIN_WAIT_1</name></expr>;</expr_stmt>

		  </block_content>}</block></else></if_stmt>

		</block_content>}</block></if> <else pos:start="1341:19" pos:end="1345:17">else <block pos:start="1341:24" pos:end="1345:17">{<block_content pos:start="1343:19" pos:end="1343:37">

		  <expr_stmt pos:start="1343:19" pos:end="1343:37"><expr pos:start="1343:19" pos:end="1343:36"><call pos:start="1343:19" pos:end="1343:36"><name pos:start="1343:19" pos:end="1343:32">soisfconnected</name><argument_list pos:start="1343:33" pos:end="1343:36">(<argument pos:start="1343:34" pos:end="1343:35"><expr pos:start="1343:34" pos:end="1343:35"><name pos:start="1343:34" pos:end="1343:35">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></else></if_stmt>



		<expr_stmt pos:start="1349:17" pos:end="1349:77"><expr pos:start="1349:17" pos:end="1349:76"><operator pos:start="1349:17" pos:end="1349:17">(</operator><name pos:start="1349:18" pos:end="1349:21">void</name><operator pos:start="1349:22" pos:end="1349:22">)</operator> <call pos:start="1349:24" pos:end="1349:76"><name pos:start="1349:24" pos:end="1349:32">tcp_reass</name><argument_list pos:start="1349:33" pos:end="1349:76">(<argument pos:start="1349:34" pos:end="1349:35"><expr pos:start="1349:34" pos:end="1349:35"><name pos:start="1349:34" pos:end="1349:35">tp</name></expr></argument>, <argument pos:start="1349:38" pos:end="1349:57"><expr pos:start="1349:38" pos:end="1349:57"><operator pos:start="1349:38" pos:end="1349:38">(</operator>struct <name pos:start="1349:46" pos:end="1349:53">tcpiphdr</name> <operator pos:start="1349:55" pos:end="1349:55">*</operator><operator pos:start="1349:56" pos:end="1349:56">)</operator><literal type="number" pos:start="1349:57" pos:end="1349:57">0</literal></expr></argument>, <argument pos:start="1349:60" pos:end="1349:75"><expr pos:start="1349:60" pos:end="1349:75"><operator pos:start="1349:60" pos:end="1349:60">(</operator>struct <name pos:start="1349:68" pos:end="1349:71">mbuf</name> <operator pos:start="1349:73" pos:end="1349:73">*</operator><operator pos:start="1349:74" pos:end="1349:74">)</operator><literal type="number" pos:start="1349:75" pos:end="1349:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="1351:17" pos:end="1351:45"><expr pos:start="1351:17" pos:end="1351:44"><name pos:start="1351:17" pos:end="1351:27"><name pos:start="1351:17" pos:end="1351:18">tp</name><operator pos:start="1351:19" pos:end="1351:20">-&gt;</operator><name pos:start="1351:21" pos:end="1351:27">snd_wl1</name></name> <operator pos:start="1351:29" pos:end="1351:29">=</operator> <name pos:start="1351:31" pos:end="1351:40"><name pos:start="1351:31" pos:end="1351:32">ti</name><operator pos:start="1351:33" pos:end="1351:34">-&gt;</operator><name pos:start="1351:35" pos:end="1351:40">ti_seq</name></name> <operator pos:start="1351:42" pos:end="1351:42">-</operator> <literal type="number" pos:start="1351:44" pos:end="1351:44">1</literal></expr>;</expr_stmt>

		<comment type="block" pos:start="1353:17" pos:end="1353:72">/* Avoid ack processing; snd_una==ti_ack  =&gt;  dup ack */</comment>

		<goto pos:start="1355:17" pos:end="1355:34">goto <name pos:start="1355:22" pos:end="1355:33">synrx_to_est</name>;</goto>

		<comment type="block" pos:start="1357:17" pos:end="1357:35">/* fall into ... */</comment>



	<comment type="block" pos:start="1361:9" pos:end="1375:11">/*

	 * In ESTABLISHED state: drop duplicate ACKs; ACK out of range

	 * ACKs.  If the ack is in the range

	 *	tp-&gt;snd_una &lt; ti-&gt;ti_ack &lt;= tp-&gt;snd_max

	 * then advance tp-&gt;snd_una to ti-&gt;ti_ack and drop

	 * data from the retransmission queue.  If this ACK reflects

	 * more up to date window information we update our window information.

	 */</comment>

	<case pos:start="1377:9" pos:end="1377:30">case <expr pos:start="1377:14" pos:end="1377:29"><name pos:start="1377:14" pos:end="1377:29">TCPS_ESTABLISHED</name></expr>:</case>

	<case pos:start="1379:9" pos:end="1379:29">case <expr pos:start="1379:14" pos:end="1379:28"><name pos:start="1379:14" pos:end="1379:28">TCPS_FIN_WAIT_1</name></expr>:</case>

	<case pos:start="1381:9" pos:end="1381:29">case <expr pos:start="1381:14" pos:end="1381:28"><name pos:start="1381:14" pos:end="1381:28">TCPS_FIN_WAIT_2</name></expr>:</case>

	<case pos:start="1383:9" pos:end="1383:29">case <expr pos:start="1383:14" pos:end="1383:28"><name pos:start="1383:14" pos:end="1383:28">TCPS_CLOSE_WAIT</name></expr>:</case>

	<case pos:start="1385:9" pos:end="1385:26">case <expr pos:start="1385:14" pos:end="1385:25"><name pos:start="1385:14" pos:end="1385:25">TCPS_CLOSING</name></expr>:</case>

	<case pos:start="1387:9" pos:end="1387:27">case <expr pos:start="1387:14" pos:end="1387:26"><name pos:start="1387:14" pos:end="1387:26">TCPS_LAST_ACK</name></expr>:</case>

	<case pos:start="1389:9" pos:end="1389:28">case <expr pos:start="1389:14" pos:end="1389:27"><name pos:start="1389:14" pos:end="1389:27">TCPS_TIME_WAIT</name></expr>:</case>



		<if_stmt pos:start="1393:17" pos:end="1509:17"><if pos:start="1393:17" pos:end="1509:17">if <condition pos:start="1393:20" pos:end="1393:53">(<expr pos:start="1393:21" pos:end="1393:52"><call pos:start="1393:21" pos:end="1393:52"><name pos:start="1393:21" pos:end="1393:27">SEQ_LEQ</name><argument_list pos:start="1393:28" pos:end="1393:52">(<argument pos:start="1393:29" pos:end="1393:38"><expr pos:start="1393:29" pos:end="1393:38"><name pos:start="1393:29" pos:end="1393:38"><name pos:start="1393:29" pos:end="1393:30">ti</name><operator pos:start="1393:31" pos:end="1393:32">-&gt;</operator><name pos:start="1393:33" pos:end="1393:38">ti_ack</name></name></expr></argument>, <argument pos:start="1393:41" pos:end="1393:51"><expr pos:start="1393:41" pos:end="1393:51"><name pos:start="1393:41" pos:end="1393:51"><name pos:start="1393:41" pos:end="1393:42">tp</name><operator pos:start="1393:43" pos:end="1393:44">-&gt;</operator><name pos:start="1393:45" pos:end="1393:51">snd_una</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1393:55" pos:end="1509:17">{<block_content pos:start="1395:25" pos:end="1507:30">

			<if_stmt pos:start="1395:25" pos:end="1505:50"><if pos:start="1395:25" pos:end="1503:25">if <condition pos:start="1395:28" pos:end="1395:68">(<expr pos:start="1395:29" pos:end="1395:67"><name pos:start="1395:29" pos:end="1395:38"><name pos:start="1395:29" pos:end="1395:30">ti</name><operator pos:start="1395:31" pos:end="1395:32">-&gt;</operator><name pos:start="1395:33" pos:end="1395:38">ti_len</name></name> <operator pos:start="1395:40" pos:end="1395:41">==</operator> <literal type="number" pos:start="1395:43" pos:end="1395:43">0</literal> <operator pos:start="1395:45" pos:end="1395:46">&amp;&amp;</operator> <name pos:start="1395:48" pos:end="1395:52">tiwin</name> <operator pos:start="1395:54" pos:end="1395:55">==</operator> <name pos:start="1395:57" pos:end="1395:67"><name pos:start="1395:57" pos:end="1395:58">tp</name><operator pos:start="1395:59" pos:end="1395:60">-&gt;</operator><name pos:start="1395:61" pos:end="1395:67">snd_wnd</name></name></expr>)</condition> <block pos:start="1395:70" pos:end="1503:25">{<block_content pos:start="1397:27" pos:end="1501:33">

			  <expr_stmt pos:start="1397:27" pos:end="1399:60"><expr pos:start="1397:27" pos:end="1399:59"><call pos:start="1397:27" pos:end="1399:59"><name pos:start="1397:27" pos:end="1397:36">DEBUG_MISC</name><argument_list pos:start="1397:37" pos:end="1399:59">(<argument pos:start="1397:38" pos:end="1399:58"><expr pos:start="1397:38" pos:end="1399:58"><operator pos:start="1397:38" pos:end="1397:38">(</operator><name pos:start="1397:39" pos:end="1397:41">dfd</name><operator pos:start="1397:42" pos:end="1397:42">,</operator> <literal type="string" pos:start="1397:44" pos:end="1397:74">" dup ack  m = %lx  so = %lx\n"</literal><operator pos:start="1397:75" pos:end="1397:75">,</operator>

				      <operator pos:start="1399:39" pos:end="1399:39">(</operator><name pos:start="1399:40" pos:end="1399:43">long</name> <operator pos:start="1399:45" pos:end="1399:45">)</operator><name pos:start="1399:46" pos:end="1399:46">m</name><operator pos:start="1399:47" pos:end="1399:47">,</operator> <operator pos:start="1399:49" pos:end="1399:49">(</operator><name pos:start="1399:50" pos:end="1399:53">long</name> <operator pos:start="1399:55" pos:end="1399:55">)</operator><name pos:start="1399:56" pos:end="1399:57">so</name><operator pos:start="1399:58" pos:end="1399:58">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block" pos:start="1401:33" pos:end="1447:35">/*

				 * If we have outstanding data (other than

				 * a window probe), this is a completely

				 * duplicate ack (ie, window info didn't

				 * change), the ack is the biggest we've

				 * seen and we've seen exactly our rexmt

				 * threshold of them, assume a packet

				 * has been dropped and retransmit it.

				 * Kludge snd_nxt &amp; the congestion

				 * window so we send only this one

				 * packet.

				 *

				 * We know we're losing at the current

				 * window size so do congestion avoidance

				 * (set ssthresh to half the current window

				 * and pull our congestion window back to

				 * the new ssthresh).

				 *

				 * Dup acks mean that packets have left the

				 * network (they're now cached at the receiver)

				 * so bump cwnd by the amount in the receiver

				 * to keep a constant cwnd packets in the

				 * network.

				 */</comment>

				<if_stmt pos:start="1449:33" pos:end="1501:33"><if pos:start="1449:33" pos:end="1453:58">if <condition pos:start="1449:36" pos:end="1451:62">(<expr pos:start="1449:37" pos:end="1451:61"><name pos:start="1449:37" pos:end="1449:59"><name pos:start="1449:37" pos:end="1449:38">tp</name><operator pos:start="1449:39" pos:end="1449:40">-&gt;</operator><name pos:start="1449:41" pos:end="1449:47">t_timer</name><index pos:start="1449:48" pos:end="1449:59">[<expr pos:start="1449:49" pos:end="1449:58"><name pos:start="1449:49" pos:end="1449:58">TCPT_REXMT</name></expr>]</index></name> <operator pos:start="1449:61" pos:end="1449:62">==</operator> <literal type="number" pos:start="1449:64" pos:end="1449:64">0</literal> <operator pos:start="1449:66" pos:end="1449:67">||</operator>

				    <name pos:start="1451:37" pos:end="1451:46"><name pos:start="1451:37" pos:end="1451:38">ti</name><operator pos:start="1451:39" pos:end="1451:40">-&gt;</operator><name pos:start="1451:41" pos:end="1451:46">ti_ack</name></name> <operator pos:start="1451:48" pos:end="1451:49">!=</operator> <name pos:start="1451:51" pos:end="1451:61"><name pos:start="1451:51" pos:end="1451:52">tp</name><operator pos:start="1451:53" pos:end="1451:54">-&gt;</operator><name pos:start="1451:55" pos:end="1451:61">snd_una</name></name></expr>)</condition><block type="pseudo" pos:start="1453:41" pos:end="1453:58"><block_content pos:start="1453:41" pos:end="1453:58">

					<expr_stmt pos:start="1453:41" pos:end="1453:58"><expr pos:start="1453:41" pos:end="1453:57"><name pos:start="1453:41" pos:end="1453:53"><name pos:start="1453:41" pos:end="1453:42">tp</name><operator pos:start="1453:43" pos:end="1453:44">-&gt;</operator><name pos:start="1453:45" pos:end="1453:53">t_dupacks</name></name> <operator pos:start="1453:55" pos:end="1453:55">=</operator> <literal type="number" pos:start="1453:57" pos:end="1453:57">0</literal></expr>;</expr_stmt></block_content></block></if>

				<if type="elseif" pos:start="1455:33" pos:end="1493:33">else if <condition pos:start="1455:41" pos:end="1455:75">(<expr pos:start="1455:42" pos:end="1455:74"><operator pos:start="1455:42" pos:end="1455:43">++</operator><name pos:start="1455:44" pos:end="1455:56"><name pos:start="1455:44" pos:end="1455:45">tp</name><operator pos:start="1455:46" pos:end="1455:47">-&gt;</operator><name pos:start="1455:48" pos:end="1455:56">t_dupacks</name></name> <operator pos:start="1455:58" pos:end="1455:59">==</operator> <name pos:start="1455:61" pos:end="1455:74">TCPREXMTTHRESH</name></expr>)</condition> <block pos:start="1455:77" pos:end="1493:33">{<block_content pos:start="1457:41" pos:end="1491:50">

					<decl_stmt pos:start="1457:41" pos:end="1457:67"><decl pos:start="1457:41" pos:end="1457:66"><type pos:start="1457:41" pos:end="1457:47"><name pos:start="1457:41" pos:end="1457:47">tcp_seq</name></type> <name pos:start="1457:49" pos:end="1457:52">onxt</name> <init pos:start="1457:54" pos:end="1457:66">= <expr pos:start="1457:56" pos:end="1457:66"><name pos:start="1457:56" pos:end="1457:66"><name pos:start="1457:56" pos:end="1457:57">tp</name><operator pos:start="1457:58" pos:end="1457:59">-&gt;</operator><name pos:start="1457:60" pos:end="1457:66">snd_nxt</name></name></expr></init></decl>;</decl_stmt>

					<decl_stmt pos:start="1459:41" pos:end="1463:61"><decl pos:start="1459:41" pos:end="1463:60"><type pos:start="1459:41" pos:end="1459:45"><name pos:start="1459:41" pos:end="1459:45">u_int</name></type> <name pos:start="1459:47" pos:end="1459:49">win</name> <init pos:start="1459:51" pos:end="1463:60">=

					    <expr pos:start="1461:45" pos:end="1463:60"><call pos:start="1461:45" pos:end="1461:74"><name pos:start="1461:45" pos:end="1461:47">min</name><argument_list pos:start="1461:48" pos:end="1461:74">(<argument pos:start="1461:49" pos:end="1461:59"><expr pos:start="1461:49" pos:end="1461:59"><name pos:start="1461:49" pos:end="1461:59"><name pos:start="1461:49" pos:end="1461:50">tp</name><operator pos:start="1461:51" pos:end="1461:52">-&gt;</operator><name pos:start="1461:53" pos:end="1461:59">snd_wnd</name></name></expr></argument>, <argument pos:start="1461:62" pos:end="1461:73"><expr pos:start="1461:62" pos:end="1461:73"><name pos:start="1461:62" pos:end="1461:73"><name pos:start="1461:62" pos:end="1461:63">tp</name><operator pos:start="1461:64" pos:end="1461:65">-&gt;</operator><name pos:start="1461:66" pos:end="1461:73">snd_cwnd</name></name></expr></argument>)</argument_list></call> <operator pos:start="1461:76" pos:end="1461:76">/</operator> <literal type="number" pos:start="1461:78" pos:end="1461:78">2</literal> <operator pos:start="1461:80" pos:end="1461:80">/</operator>

						<name pos:start="1463:49" pos:end="1463:60"><name pos:start="1463:49" pos:end="1463:50">tp</name><operator pos:start="1463:51" pos:end="1463:52">-&gt;</operator><name pos:start="1463:53" pos:end="1463:60">t_maxseg</name></name></expr></init></decl>;</decl_stmt>



					<if_stmt pos:start="1467:41" pos:end="1469:56"><if pos:start="1467:41" pos:end="1469:56">if <condition pos:start="1467:44" pos:end="1467:52">(<expr pos:start="1467:45" pos:end="1467:51"><name pos:start="1467:45" pos:end="1467:47">win</name> <operator pos:start="1467:49" pos:end="1467:49">&lt;</operator> <literal type="number" pos:start="1467:51" pos:end="1467:51">2</literal></expr>)</condition><block type="pseudo" pos:start="1469:49" pos:end="1469:56"><block_content pos:start="1469:49" pos:end="1469:56">

						<expr_stmt pos:start="1469:49" pos:end="1469:56"><expr pos:start="1469:49" pos:end="1469:55"><name pos:start="1469:49" pos:end="1469:51">win</name> <operator pos:start="1469:53" pos:end="1469:53">=</operator> <literal type="number" pos:start="1469:55" pos:end="1469:55">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt pos:start="1471:41" pos:end="1471:78"><expr pos:start="1471:41" pos:end="1471:77"><name pos:start="1471:41" pos:end="1471:56"><name pos:start="1471:41" pos:end="1471:42">tp</name><operator pos:start="1471:43" pos:end="1471:44">-&gt;</operator><name pos:start="1471:45" pos:end="1471:56">snd_ssthresh</name></name> <operator pos:start="1471:58" pos:end="1471:58">=</operator> <name pos:start="1471:60" pos:end="1471:62">win</name> <operator pos:start="1471:64" pos:end="1471:64">*</operator> <name pos:start="1471:66" pos:end="1471:77"><name pos:start="1471:66" pos:end="1471:67">tp</name><operator pos:start="1471:68" pos:end="1471:69">-&gt;</operator><name pos:start="1471:70" pos:end="1471:77">t_maxseg</name></name></expr>;</expr_stmt>

					<expr_stmt pos:start="1473:41" pos:end="1473:68"><expr pos:start="1473:41" pos:end="1473:67"><name pos:start="1473:41" pos:end="1473:63"><name pos:start="1473:41" pos:end="1473:42">tp</name><operator pos:start="1473:43" pos:end="1473:44">-&gt;</operator><name pos:start="1473:45" pos:end="1473:51">t_timer</name><index pos:start="1473:52" pos:end="1473:63">[<expr pos:start="1473:53" pos:end="1473:62"><name pos:start="1473:53" pos:end="1473:62">TCPT_REXMT</name></expr>]</index></name> <operator pos:start="1473:65" pos:end="1473:65">=</operator> <literal type="number" pos:start="1473:67" pos:end="1473:67">0</literal></expr>;</expr_stmt>

					<expr_stmt pos:start="1475:41" pos:end="1475:54"><expr pos:start="1475:41" pos:end="1475:53"><name pos:start="1475:41" pos:end="1475:49"><name pos:start="1475:41" pos:end="1475:42">tp</name><operator pos:start="1475:43" pos:end="1475:44">-&gt;</operator><name pos:start="1475:45" pos:end="1475:49">t_rtt</name></name> <operator pos:start="1475:51" pos:end="1475:51">=</operator> <literal type="number" pos:start="1475:53" pos:end="1475:53">0</literal></expr>;</expr_stmt>

					<expr_stmt pos:start="1477:41" pos:end="1477:65"><expr pos:start="1477:41" pos:end="1477:64"><name pos:start="1477:41" pos:end="1477:51"><name pos:start="1477:41" pos:end="1477:42">tp</name><operator pos:start="1477:43" pos:end="1477:44">-&gt;</operator><name pos:start="1477:45" pos:end="1477:51">snd_nxt</name></name> <operator pos:start="1477:53" pos:end="1477:53">=</operator> <name pos:start="1477:55" pos:end="1477:64"><name pos:start="1477:55" pos:end="1477:56">ti</name><operator pos:start="1477:57" pos:end="1477:58">-&gt;</operator><name pos:start="1477:59" pos:end="1477:64">ti_ack</name></name></expr>;</expr_stmt>

					<expr_stmt pos:start="1479:41" pos:end="1479:68"><expr pos:start="1479:41" pos:end="1479:67"><name pos:start="1479:41" pos:end="1479:52"><name pos:start="1479:41" pos:end="1479:42">tp</name><operator pos:start="1479:43" pos:end="1479:44">-&gt;</operator><name pos:start="1479:45" pos:end="1479:52">snd_cwnd</name></name> <operator pos:start="1479:54" pos:end="1479:54">=</operator> <name pos:start="1479:56" pos:end="1479:67"><name pos:start="1479:56" pos:end="1479:57">tp</name><operator pos:start="1479:58" pos:end="1479:59">-&gt;</operator><name pos:start="1479:60" pos:end="1479:67">t_maxseg</name></name></expr>;</expr_stmt>

					<expr_stmt pos:start="1481:41" pos:end="1481:62"><expr pos:start="1481:41" pos:end="1481:61"><operator pos:start="1481:41" pos:end="1481:41">(</operator><name pos:start="1481:42" pos:end="1481:45">void</name><operator pos:start="1481:46" pos:end="1481:46">)</operator> <call pos:start="1481:48" pos:end="1481:61"><name pos:start="1481:48" pos:end="1481:57">tcp_output</name><argument_list pos:start="1481:58" pos:end="1481:61">(<argument pos:start="1481:59" pos:end="1481:60"><expr pos:start="1481:59" pos:end="1481:60"><name pos:start="1481:59" pos:end="1481:60">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt pos:start="1483:41" pos:end="1485:76"><expr pos:start="1483:41" pos:end="1485:75"><name pos:start="1483:41" pos:end="1483:52"><name pos:start="1483:41" pos:end="1483:42">tp</name><operator pos:start="1483:43" pos:end="1483:44">-&gt;</operator><name pos:start="1483:45" pos:end="1483:52">snd_cwnd</name></name> <operator pos:start="1483:54" pos:end="1483:54">=</operator> <name pos:start="1483:56" pos:end="1483:71"><name pos:start="1483:56" pos:end="1483:57">tp</name><operator pos:start="1483:58" pos:end="1483:59">-&gt;</operator><name pos:start="1483:60" pos:end="1483:71">snd_ssthresh</name></name> <operator pos:start="1483:73" pos:end="1483:73">+</operator>

					       <name pos:start="1485:48" pos:end="1485:59"><name pos:start="1485:48" pos:end="1485:49">tp</name><operator pos:start="1485:50" pos:end="1485:51">-&gt;</operator><name pos:start="1485:52" pos:end="1485:59">t_maxseg</name></name> <operator pos:start="1485:61" pos:end="1485:61">*</operator> <name pos:start="1485:63" pos:end="1485:75"><name pos:start="1485:63" pos:end="1485:64">tp</name><operator pos:start="1485:65" pos:end="1485:66">-&gt;</operator><name pos:start="1485:67" pos:end="1485:75">t_dupacks</name></name></expr>;</expr_stmt>

					<if_stmt pos:start="1487:41" pos:end="1489:67"><if pos:start="1487:41" pos:end="1489:67">if <condition pos:start="1487:44" pos:end="1487:70">(<expr pos:start="1487:45" pos:end="1487:69"><call pos:start="1487:45" pos:end="1487:69"><name pos:start="1487:45" pos:end="1487:50">SEQ_GT</name><argument_list pos:start="1487:51" pos:end="1487:69">(<argument pos:start="1487:52" pos:end="1487:55"><expr pos:start="1487:52" pos:end="1487:55"><name pos:start="1487:52" pos:end="1487:55">onxt</name></expr></argument>, <argument pos:start="1487:58" pos:end="1487:68"><expr pos:start="1487:58" pos:end="1487:68"><name pos:start="1487:58" pos:end="1487:68"><name pos:start="1487:58" pos:end="1487:59">tp</name><operator pos:start="1487:60" pos:end="1487:61">-&gt;</operator><name pos:start="1487:62" pos:end="1487:68">snd_nxt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1489:49" pos:end="1489:67"><block_content pos:start="1489:49" pos:end="1489:67">

						<expr_stmt pos:start="1489:49" pos:end="1489:67"><expr pos:start="1489:49" pos:end="1489:66"><name pos:start="1489:49" pos:end="1489:59"><name pos:start="1489:49" pos:end="1489:50">tp</name><operator pos:start="1489:51" pos:end="1489:52">-&gt;</operator><name pos:start="1489:53" pos:end="1489:59">snd_nxt</name></name> <operator pos:start="1489:61" pos:end="1489:61">=</operator> <name pos:start="1489:63" pos:end="1489:66">onxt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<goto pos:start="1491:41" pos:end="1491:50">goto <name pos:start="1491:46" pos:end="1491:49">drop</name>;</goto>

				</block_content>}</block></if> <if type="elseif" pos:start="1493:35" pos:end="1501:33">else if <condition pos:start="1493:43" pos:end="1493:74">(<expr pos:start="1493:44" pos:end="1493:73"><name pos:start="1493:44" pos:end="1493:56"><name pos:start="1493:44" pos:end="1493:45">tp</name><operator pos:start="1493:46" pos:end="1493:47">-&gt;</operator><name pos:start="1493:48" pos:end="1493:56">t_dupacks</name></name> <operator pos:start="1493:58" pos:end="1493:58">&gt;</operator> <name pos:start="1493:60" pos:end="1493:73">TCPREXMTTHRESH</name></expr>)</condition> <block pos:start="1493:76" pos:end="1501:33">{<block_content pos:start="1495:41" pos:end="1499:50">

					<expr_stmt pos:start="1495:41" pos:end="1495:69"><expr pos:start="1495:41" pos:end="1495:68"><name pos:start="1495:41" pos:end="1495:52"><name pos:start="1495:41" pos:end="1495:42">tp</name><operator pos:start="1495:43" pos:end="1495:44">-&gt;</operator><name pos:start="1495:45" pos:end="1495:52">snd_cwnd</name></name> <operator pos:start="1495:54" pos:end="1495:55">+=</operator> <name pos:start="1495:57" pos:end="1495:68"><name pos:start="1495:57" pos:end="1495:58">tp</name><operator pos:start="1495:59" pos:end="1495:60">-&gt;</operator><name pos:start="1495:61" pos:end="1495:68">t_maxseg</name></name></expr>;</expr_stmt>

					<expr_stmt pos:start="1497:41" pos:end="1497:62"><expr pos:start="1497:41" pos:end="1497:61"><operator pos:start="1497:41" pos:end="1497:41">(</operator><name pos:start="1497:42" pos:end="1497:45">void</name><operator pos:start="1497:46" pos:end="1497:46">)</operator> <call pos:start="1497:48" pos:end="1497:61"><name pos:start="1497:48" pos:end="1497:57">tcp_output</name><argument_list pos:start="1497:58" pos:end="1497:61">(<argument pos:start="1497:59" pos:end="1497:60"><expr pos:start="1497:59" pos:end="1497:60"><name pos:start="1497:59" pos:end="1497:60">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<goto pos:start="1499:41" pos:end="1499:50">goto <name pos:start="1499:46" pos:end="1499:49">drop</name>;</goto>

				</block_content>}</block></if></if_stmt>

			</block_content>}</block></if> <else pos:start="1503:27" pos:end="1505:50">else<block type="pseudo" pos:start="1505:33" pos:end="1505:50"><block_content pos:start="1505:33" pos:end="1505:50">

				<expr_stmt pos:start="1505:33" pos:end="1505:50"><expr pos:start="1505:33" pos:end="1505:49"><name pos:start="1505:33" pos:end="1505:45"><name pos:start="1505:33" pos:end="1505:34">tp</name><operator pos:start="1505:35" pos:end="1505:36">-&gt;</operator><name pos:start="1505:37" pos:end="1505:45">t_dupacks</name></name> <operator pos:start="1505:47" pos:end="1505:47">=</operator> <literal type="number" pos:start="1505:49" pos:end="1505:49">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<break pos:start="1507:25" pos:end="1507:30">break;</break>

		</block_content>}</block></if></if_stmt>

	<label pos:start="1511:9" pos:end="1511:21"><name pos:start="1511:9" pos:end="1511:20">synrx_to_est</name>:</label>

		<comment type="block" pos:start="1513:17" pos:end="1519:19">/*

		 * If the congestion window was inflated to account

		 * for the other side's cached packets, retract it.

		 */</comment>

		<if_stmt pos:start="1521:17" pos:end="1525:56"><if pos:start="1521:17" pos:end="1525:56">if <condition pos:start="1521:20" pos:end="1523:52">(<expr pos:start="1521:21" pos:end="1523:51"><name pos:start="1521:21" pos:end="1521:33"><name pos:start="1521:21" pos:end="1521:22">tp</name><operator pos:start="1521:23" pos:end="1521:24">-&gt;</operator><name pos:start="1521:25" pos:end="1521:33">t_dupacks</name></name> <operator pos:start="1521:35" pos:end="1521:35">&gt;</operator> <name pos:start="1521:37" pos:end="1521:50">TCPREXMTTHRESH</name> <operator pos:start="1521:52" pos:end="1521:53">&amp;&amp;</operator>

		    <name pos:start="1523:21" pos:end="1523:32"><name pos:start="1523:21" pos:end="1523:22">tp</name><operator pos:start="1523:23" pos:end="1523:24">-&gt;</operator><name pos:start="1523:25" pos:end="1523:32">snd_cwnd</name></name> <operator pos:start="1523:34" pos:end="1523:34">&gt;</operator> <name pos:start="1523:36" pos:end="1523:51"><name pos:start="1523:36" pos:end="1523:37">tp</name><operator pos:start="1523:38" pos:end="1523:39">-&gt;</operator><name pos:start="1523:40" pos:end="1523:51">snd_ssthresh</name></name></expr>)</condition><block type="pseudo" pos:start="1525:25" pos:end="1525:56"><block_content pos:start="1525:25" pos:end="1525:56">

			<expr_stmt pos:start="1525:25" pos:end="1525:56"><expr pos:start="1525:25" pos:end="1525:55"><name pos:start="1525:25" pos:end="1525:36"><name pos:start="1525:25" pos:end="1525:26">tp</name><operator pos:start="1525:27" pos:end="1525:28">-&gt;</operator><name pos:start="1525:29" pos:end="1525:36">snd_cwnd</name></name> <operator pos:start="1525:38" pos:end="1525:38">=</operator> <name pos:start="1525:40" pos:end="1525:55"><name pos:start="1525:40" pos:end="1525:41">tp</name><operator pos:start="1525:42" pos:end="1525:43">-&gt;</operator><name pos:start="1525:44" pos:end="1525:55">snd_ssthresh</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt pos:start="1527:17" pos:end="1527:34"><expr pos:start="1527:17" pos:end="1527:33"><name pos:start="1527:17" pos:end="1527:29"><name pos:start="1527:17" pos:end="1527:18">tp</name><operator pos:start="1527:19" pos:end="1527:20">-&gt;</operator><name pos:start="1527:21" pos:end="1527:29">t_dupacks</name></name> <operator pos:start="1527:31" pos:end="1527:31">=</operator> <literal type="number" pos:start="1527:33" pos:end="1527:33">0</literal></expr>;</expr_stmt>

		<if_stmt pos:start="1529:17" pos:end="1533:17"><if pos:start="1529:17" pos:end="1533:17">if <condition pos:start="1529:20" pos:end="1529:52">(<expr pos:start="1529:21" pos:end="1529:51"><call pos:start="1529:21" pos:end="1529:51"><name pos:start="1529:21" pos:end="1529:26">SEQ_GT</name><argument_list pos:start="1529:27" pos:end="1529:51">(<argument pos:start="1529:28" pos:end="1529:37"><expr pos:start="1529:28" pos:end="1529:37"><name pos:start="1529:28" pos:end="1529:37"><name pos:start="1529:28" pos:end="1529:29">ti</name><operator pos:start="1529:30" pos:end="1529:31">-&gt;</operator><name pos:start="1529:32" pos:end="1529:37">ti_ack</name></name></expr></argument>, <argument pos:start="1529:40" pos:end="1529:50"><expr pos:start="1529:40" pos:end="1529:50"><name pos:start="1529:40" pos:end="1529:50"><name pos:start="1529:40" pos:end="1529:41">tp</name><operator pos:start="1529:42" pos:end="1529:43">-&gt;</operator><name pos:start="1529:44" pos:end="1529:50">snd_max</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1529:54" pos:end="1533:17">{<block_content pos:start="1531:25" pos:end="1531:42">

			<goto pos:start="1531:25" pos:end="1531:42">goto <name pos:start="1531:30" pos:end="1531:41">dropafterack</name>;</goto>

		</block_content>}</block></if></if_stmt>

		<expr_stmt pos:start="1535:17" pos:end="1535:49"><expr pos:start="1535:17" pos:end="1535:48"><name pos:start="1535:17" pos:end="1535:21">acked</name> <operator pos:start="1535:23" pos:end="1535:23">=</operator> <name pos:start="1535:25" pos:end="1535:34"><name pos:start="1535:25" pos:end="1535:26">ti</name><operator pos:start="1535:27" pos:end="1535:28">-&gt;</operator><name pos:start="1535:29" pos:end="1535:34">ti_ack</name></name> <operator pos:start="1535:36" pos:end="1535:36">-</operator> <name pos:start="1535:38" pos:end="1535:48"><name pos:start="1535:38" pos:end="1535:39">tp</name><operator pos:start="1535:40" pos:end="1535:41">-&gt;</operator><name pos:start="1535:42" pos:end="1535:48">snd_una</name></name></expr>;</expr_stmt>



		<comment type="block" pos:start="1539:17" pos:end="1551:19">/*

		 * If transmit timer is running and timed sequence

		 * number was acked, update smoothed round trip time.

		 * Since we now have an rtt measurement, cancel the

		 * timer backoff (cf., Phil Karn's retransmit alg.).

		 * Recompute the initial retransmit timer.

		 */</comment>

		<if_stmt pos:start="1553:17" pos:end="1555:53"><if pos:start="1553:17" pos:end="1555:53">if <condition pos:start="1553:20" pos:end="1553:65">(<expr pos:start="1553:21" pos:end="1553:64"><name pos:start="1553:21" pos:end="1553:29"><name pos:start="1553:21" pos:end="1553:22">tp</name><operator pos:start="1553:23" pos:end="1553:24">-&gt;</operator><name pos:start="1553:25" pos:end="1553:29">t_rtt</name></name> <operator pos:start="1553:31" pos:end="1553:32">&amp;&amp;</operator> <call pos:start="1553:34" pos:end="1553:64"><name pos:start="1553:34" pos:end="1553:39">SEQ_GT</name><argument_list pos:start="1553:40" pos:end="1553:64">(<argument pos:start="1553:41" pos:end="1553:50"><expr pos:start="1553:41" pos:end="1553:50"><name pos:start="1553:41" pos:end="1553:50"><name pos:start="1553:41" pos:end="1553:42">ti</name><operator pos:start="1553:43" pos:end="1553:44">-&gt;</operator><name pos:start="1553:45" pos:end="1553:50">ti_ack</name></name></expr></argument>, <argument pos:start="1553:53" pos:end="1553:63"><expr pos:start="1553:53" pos:end="1553:63"><name pos:start="1553:53" pos:end="1553:63"><name pos:start="1553:53" pos:end="1553:54">tp</name><operator pos:start="1553:55" pos:end="1553:56">-&gt;</operator><name pos:start="1553:57" pos:end="1553:63">t_rtseq</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1555:25" pos:end="1555:53"><block_content pos:start="1555:25" pos:end="1555:53">

			<expr_stmt pos:start="1555:25" pos:end="1555:53"><expr pos:start="1555:25" pos:end="1555:52"><call pos:start="1555:25" pos:end="1555:52"><name pos:start="1555:25" pos:end="1555:38">tcp_xmit_timer</name><argument_list pos:start="1555:39" pos:end="1555:52">(<argument pos:start="1555:40" pos:end="1555:41"><expr pos:start="1555:40" pos:end="1555:41"><name pos:start="1555:40" pos:end="1555:41">tp</name></expr></argument>,<argument pos:start="1555:43" pos:end="1555:51"><expr pos:start="1555:43" pos:end="1555:51"><name pos:start="1555:43" pos:end="1555:51"><name pos:start="1555:43" pos:end="1555:44">tp</name><operator pos:start="1555:45" pos:end="1555:46">-&gt;</operator><name pos:start="1555:47" pos:end="1555:51">t_rtt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



		<comment type="block" pos:start="1559:17" pos:end="1569:19">/*

		 * If all outstanding data is acked, stop retransmit

		 * timer and remember to restart (more output or persist).

		 * If there is more data to be acked, restart retransmit

		 * timer, using current (possibly backed-off) value.

		 */</comment>

		<if_stmt pos:start="1571:17" pos:end="1579:63"><if pos:start="1571:17" pos:end="1577:17">if <condition pos:start="1571:20" pos:end="1571:46">(<expr pos:start="1571:21" pos:end="1571:45"><name pos:start="1571:21" pos:end="1571:30"><name pos:start="1571:21" pos:end="1571:22">ti</name><operator pos:start="1571:23" pos:end="1571:24">-&gt;</operator><name pos:start="1571:25" pos:end="1571:30">ti_ack</name></name> <operator pos:start="1571:32" pos:end="1571:33">==</operator> <name pos:start="1571:35" pos:end="1571:45"><name pos:start="1571:35" pos:end="1571:36">tp</name><operator pos:start="1571:37" pos:end="1571:38">-&gt;</operator><name pos:start="1571:39" pos:end="1571:45">snd_max</name></name></expr>)</condition> <block pos:start="1571:48" pos:end="1577:17">{<block_content pos:start="1573:25" pos:end="1575:39">

			<expr_stmt pos:start="1573:25" pos:end="1573:52"><expr pos:start="1573:25" pos:end="1573:51"><name pos:start="1573:25" pos:end="1573:47"><name pos:start="1573:25" pos:end="1573:26">tp</name><operator pos:start="1573:27" pos:end="1573:28">-&gt;</operator><name pos:start="1573:29" pos:end="1573:35">t_timer</name><index pos:start="1573:36" pos:end="1573:47">[<expr pos:start="1573:37" pos:end="1573:46"><name pos:start="1573:37" pos:end="1573:46">TCPT_REXMT</name></expr>]</index></name> <operator pos:start="1573:49" pos:end="1573:49">=</operator> <literal type="number" pos:start="1573:51" pos:end="1573:51">0</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="1575:25" pos:end="1575:39"><expr pos:start="1575:25" pos:end="1575:38"><name pos:start="1575:25" pos:end="1575:34">needoutput</name> <operator pos:start="1575:36" pos:end="1575:36">=</operator> <literal type="number" pos:start="1575:38" pos:end="1575:38">1</literal></expr>;</expr_stmt>

		</block_content>}</block></if> <if type="elseif" pos:start="1577:19" pos:end="1579:63">else if <condition pos:start="1577:27" pos:end="1577:58">(<expr pos:start="1577:28" pos:end="1577:57"><name pos:start="1577:28" pos:end="1577:52"><name pos:start="1577:28" pos:end="1577:29">tp</name><operator pos:start="1577:30" pos:end="1577:31">-&gt;</operator><name pos:start="1577:32" pos:end="1577:38">t_timer</name><index pos:start="1577:39" pos:end="1577:52">[<expr pos:start="1577:40" pos:end="1577:51"><name pos:start="1577:40" pos:end="1577:51">TCPT_PERSIST</name></expr>]</index></name> <operator pos:start="1577:54" pos:end="1577:55">==</operator> <literal type="number" pos:start="1577:57" pos:end="1577:57">0</literal></expr>)</condition><block type="pseudo" pos:start="1579:25" pos:end="1579:63"><block_content pos:start="1579:25" pos:end="1579:63">

			<expr_stmt pos:start="1579:25" pos:end="1579:63"><expr pos:start="1579:25" pos:end="1579:62"><name pos:start="1579:25" pos:end="1579:47"><name pos:start="1579:25" pos:end="1579:26">tp</name><operator pos:start="1579:27" pos:end="1579:28">-&gt;</operator><name pos:start="1579:29" pos:end="1579:35">t_timer</name><index pos:start="1579:36" pos:end="1579:47">[<expr pos:start="1579:37" pos:end="1579:46"><name pos:start="1579:37" pos:end="1579:46">TCPT_REXMT</name></expr>]</index></name> <operator pos:start="1579:49" pos:end="1579:49">=</operator> <name pos:start="1579:51" pos:end="1579:62"><name pos:start="1579:51" pos:end="1579:52">tp</name><operator pos:start="1579:53" pos:end="1579:54">-&gt;</operator><name pos:start="1579:55" pos:end="1579:62">t_rxtcur</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block" pos:start="1581:17" pos:end="1593:19">/*

		 * When new data is acked, open the congestion window.

		 * If the window gives us less than ssthresh packets

		 * in flight, open exponentially (maxseg per packet).

		 * Otherwise open linearly: maxseg per window

		 * (maxseg^2 / cwnd per packet).

		 */</comment>

		<block pos:start="1595:17" pos:end="1609:17">{<block_content pos:start="1597:19" pos:end="1607:75">

		  <decl_stmt pos:start="1597:19" pos:end="1597:51"><decl pos:start="1597:19" pos:end="1597:50"><type pos:start="1597:19" pos:end="1597:32"><specifier pos:start="1597:19" pos:end="1597:26">register</specifier> <name pos:start="1597:28" pos:end="1597:32">u_int</name></type> <name pos:start="1597:34" pos:end="1597:35">cw</name> <init pos:start="1597:37" pos:end="1597:50">= <expr pos:start="1597:39" pos:end="1597:50"><name pos:start="1597:39" pos:end="1597:50"><name pos:start="1597:39" pos:end="1597:40">tp</name><operator pos:start="1597:41" pos:end="1597:42">-&gt;</operator><name pos:start="1597:43" pos:end="1597:50">snd_cwnd</name></name></expr></init></decl>;</decl_stmt>

		  <decl_stmt pos:start="1599:19" pos:end="1599:53"><decl pos:start="1599:19" pos:end="1599:52"><type pos:start="1599:19" pos:end="1599:32"><specifier pos:start="1599:19" pos:end="1599:26">register</specifier> <name pos:start="1599:28" pos:end="1599:32">u_int</name></type> <name pos:start="1599:34" pos:end="1599:37">incr</name> <init pos:start="1599:39" pos:end="1599:52">= <expr pos:start="1599:41" pos:end="1599:52"><name pos:start="1599:41" pos:end="1599:52"><name pos:start="1599:41" pos:end="1599:42">tp</name><operator pos:start="1599:43" pos:end="1599:44">-&gt;</operator><name pos:start="1599:45" pos:end="1599:52">t_maxseg</name></name></expr></init></decl>;</decl_stmt>



		  <if_stmt pos:start="1603:19" pos:end="1605:44"><if pos:start="1603:19" pos:end="1605:44">if <condition pos:start="1603:22" pos:end="1603:44">(<expr pos:start="1603:23" pos:end="1603:43"><name pos:start="1603:23" pos:end="1603:24">cw</name> <operator pos:start="1603:26" pos:end="1603:26">&gt;</operator> <name pos:start="1603:28" pos:end="1603:43"><name pos:start="1603:28" pos:end="1603:29">tp</name><operator pos:start="1603:30" pos:end="1603:31">-&gt;</operator><name pos:start="1603:32" pos:end="1603:43">snd_ssthresh</name></name></expr>)</condition><block type="pseudo" pos:start="1605:21" pos:end="1605:44"><block_content pos:start="1605:21" pos:end="1605:44">

		    <expr_stmt pos:start="1605:21" pos:end="1605:44"><expr pos:start="1605:21" pos:end="1605:43"><name pos:start="1605:21" pos:end="1605:24">incr</name> <operator pos:start="1605:26" pos:end="1605:26">=</operator> <name pos:start="1605:28" pos:end="1605:31">incr</name> <operator pos:start="1605:33" pos:end="1605:33">*</operator> <name pos:start="1605:35" pos:end="1605:38">incr</name> <operator pos:start="1605:40" pos:end="1605:40">/</operator> <name pos:start="1605:42" pos:end="1605:43">cw</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		  <expr_stmt pos:start="1607:19" pos:end="1607:75"><expr pos:start="1607:19" pos:end="1607:74"><name pos:start="1607:19" pos:end="1607:30"><name pos:start="1607:19" pos:end="1607:20">tp</name><operator pos:start="1607:21" pos:end="1607:22">-&gt;</operator><name pos:start="1607:23" pos:end="1607:30">snd_cwnd</name></name> <operator pos:start="1607:32" pos:end="1607:32">=</operator> <call pos:start="1607:34" pos:end="1607:74"><name pos:start="1607:34" pos:end="1607:36">min</name><argument_list pos:start="1607:37" pos:end="1607:74">(<argument pos:start="1607:38" pos:end="1607:46"><expr pos:start="1607:38" pos:end="1607:46"><name pos:start="1607:38" pos:end="1607:39">cw</name> <operator pos:start="1607:41" pos:end="1607:41">+</operator> <name pos:start="1607:43" pos:end="1607:46">incr</name></expr></argument>, <argument pos:start="1607:49" pos:end="1607:73"><expr pos:start="1607:49" pos:end="1607:73"><name pos:start="1607:49" pos:end="1607:58">TCP_MAXWIN</name><operator pos:start="1607:59" pos:end="1607:60">&lt;&lt;</operator><name pos:start="1607:61" pos:end="1607:73"><name pos:start="1607:61" pos:end="1607:62">tp</name><operator pos:start="1607:63" pos:end="1607:64">-&gt;</operator><name pos:start="1607:65" pos:end="1607:73">snd_scale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block>

		<if_stmt pos:start="1611:17" pos:end="1627:17"><if pos:start="1611:17" pos:end="1619:17">if <condition pos:start="1611:20" pos:end="1611:45">(<expr pos:start="1611:21" pos:end="1611:44"><name pos:start="1611:21" pos:end="1611:25">acked</name> <operator pos:start="1611:27" pos:end="1611:27">&gt;</operator> <name pos:start="1611:29" pos:end="1611:44"><name pos:start="1611:29" pos:end="1611:30">so</name><operator pos:start="1611:31" pos:end="1611:32">-&gt;</operator><name pos:start="1611:33" pos:end="1611:38">so_snd</name><operator pos:start="1611:39" pos:end="1611:39">.</operator><name pos:start="1611:40" pos:end="1611:44">sb_cc</name></name></expr>)</condition> <block pos:start="1611:47" pos:end="1619:17">{<block_content pos:start="1613:25" pos:end="1617:42">

			<expr_stmt pos:start="1613:25" pos:end="1613:56"><expr pos:start="1613:25" pos:end="1613:55"><name pos:start="1613:25" pos:end="1613:35"><name pos:start="1613:25" pos:end="1613:26">tp</name><operator pos:start="1613:27" pos:end="1613:28">-&gt;</operator><name pos:start="1613:29" pos:end="1613:35">snd_wnd</name></name> <operator pos:start="1613:37" pos:end="1613:38">-=</operator> <name pos:start="1613:40" pos:end="1613:55"><name pos:start="1613:40" pos:end="1613:41">so</name><operator pos:start="1613:42" pos:end="1613:43">-&gt;</operator><name pos:start="1613:44" pos:end="1613:49">so_snd</name><operator pos:start="1613:50" pos:end="1613:50">.</operator><name pos:start="1613:51" pos:end="1613:55">sb_cc</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="1615:25" pos:end="1615:68"><expr pos:start="1615:25" pos:end="1615:67"><call pos:start="1615:25" pos:end="1615:67"><name pos:start="1615:25" pos:end="1615:30">sbdrop</name><argument_list pos:start="1615:31" pos:end="1615:67">(<argument pos:start="1615:32" pos:end="1615:42"><expr pos:start="1615:32" pos:end="1615:42"><operator pos:start="1615:32" pos:end="1615:32">&amp;</operator><name pos:start="1615:33" pos:end="1615:42"><name pos:start="1615:33" pos:end="1615:34">so</name><operator pos:start="1615:35" pos:end="1615:36">-&gt;</operator><name pos:start="1615:37" pos:end="1615:42">so_snd</name></name></expr></argument>, <argument pos:start="1615:45" pos:end="1615:66"><expr pos:start="1615:45" pos:end="1615:66"><operator pos:start="1615:45" pos:end="1615:45">(</operator><name pos:start="1615:46" pos:end="1615:48">int</name> <operator pos:start="1615:50" pos:end="1615:50">)</operator><name pos:start="1615:51" pos:end="1615:66"><name pos:start="1615:51" pos:end="1615:52">so</name><operator pos:start="1615:53" pos:end="1615:54">-&gt;</operator><name pos:start="1615:55" pos:end="1615:60">so_snd</name><operator pos:start="1615:61" pos:end="1615:61">.</operator><name pos:start="1615:62" pos:end="1615:66">sb_cc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="1617:25" pos:end="1617:42"><expr pos:start="1617:25" pos:end="1617:41"><name pos:start="1617:25" pos:end="1617:37">ourfinisacked</name> <operator pos:start="1617:39" pos:end="1617:39">=</operator> <literal type="number" pos:start="1617:41" pos:end="1617:41">1</literal></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="1619:19" pos:end="1627:17">else <block pos:start="1619:24" pos:end="1627:17">{<block_content pos:start="1621:25" pos:end="1625:42">

			<expr_stmt pos:start="1621:25" pos:end="1621:51"><expr pos:start="1621:25" pos:end="1621:50"><call pos:start="1621:25" pos:end="1621:50"><name pos:start="1621:25" pos:end="1621:30">sbdrop</name><argument_list pos:start="1621:31" pos:end="1621:50">(<argument pos:start="1621:32" pos:end="1621:42"><expr pos:start="1621:32" pos:end="1621:42"><operator pos:start="1621:32" pos:end="1621:32">&amp;</operator><name pos:start="1621:33" pos:end="1621:42"><name pos:start="1621:33" pos:end="1621:34">so</name><operator pos:start="1621:35" pos:end="1621:36">-&gt;</operator><name pos:start="1621:37" pos:end="1621:42">so_snd</name></name></expr></argument>, <argument pos:start="1621:45" pos:end="1621:49"><expr pos:start="1621:45" pos:end="1621:49"><name pos:start="1621:45" pos:end="1621:49">acked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="1623:25" pos:end="1623:45"><expr pos:start="1623:25" pos:end="1623:44"><name pos:start="1623:25" pos:end="1623:35"><name pos:start="1623:25" pos:end="1623:26">tp</name><operator pos:start="1623:27" pos:end="1623:28">-&gt;</operator><name pos:start="1623:29" pos:end="1623:35">snd_wnd</name></name> <operator pos:start="1623:37" pos:end="1623:38">-=</operator> <name pos:start="1623:40" pos:end="1623:44">acked</name></expr>;</expr_stmt>

			<expr_stmt pos:start="1625:25" pos:end="1625:42"><expr pos:start="1625:25" pos:end="1625:41"><name pos:start="1625:25" pos:end="1625:37">ourfinisacked</name> <operator pos:start="1625:39" pos:end="1625:39">=</operator> <literal type="number" pos:start="1625:41" pos:end="1625:41">0</literal></expr>;</expr_stmt>

		</block_content>}</block></else></if_stmt>

		<expr_stmt pos:start="1629:17" pos:end="1629:41"><expr pos:start="1629:17" pos:end="1629:40"><name pos:start="1629:17" pos:end="1629:27"><name pos:start="1629:17" pos:end="1629:18">tp</name><operator pos:start="1629:19" pos:end="1629:20">-&gt;</operator><name pos:start="1629:21" pos:end="1629:27">snd_una</name></name> <operator pos:start="1629:29" pos:end="1629:29">=</operator> <name pos:start="1629:31" pos:end="1629:40"><name pos:start="1629:31" pos:end="1629:32">ti</name><operator pos:start="1629:33" pos:end="1629:34">-&gt;</operator><name pos:start="1629:35" pos:end="1629:40">ti_ack</name></name></expr>;</expr_stmt>

		<if_stmt pos:start="1631:17" pos:end="1633:50"><if pos:start="1631:17" pos:end="1633:50">if <condition pos:start="1631:20" pos:end="1631:53">(<expr pos:start="1631:21" pos:end="1631:52"><call pos:start="1631:21" pos:end="1631:52"><name pos:start="1631:21" pos:end="1631:26">SEQ_LT</name><argument_list pos:start="1631:27" pos:end="1631:52">(<argument pos:start="1631:28" pos:end="1631:38"><expr pos:start="1631:28" pos:end="1631:38"><name pos:start="1631:28" pos:end="1631:38"><name pos:start="1631:28" pos:end="1631:29">tp</name><operator pos:start="1631:30" pos:end="1631:31">-&gt;</operator><name pos:start="1631:32" pos:end="1631:38">snd_nxt</name></name></expr></argument>, <argument pos:start="1631:41" pos:end="1631:51"><expr pos:start="1631:41" pos:end="1631:51"><name pos:start="1631:41" pos:end="1631:51"><name pos:start="1631:41" pos:end="1631:42">tp</name><operator pos:start="1631:43" pos:end="1631:44">-&gt;</operator><name pos:start="1631:45" pos:end="1631:51">snd_una</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1633:25" pos:end="1633:50"><block_content pos:start="1633:25" pos:end="1633:50">

			<expr_stmt pos:start="1633:25" pos:end="1633:50"><expr pos:start="1633:25" pos:end="1633:49"><name pos:start="1633:25" pos:end="1633:35"><name pos:start="1633:25" pos:end="1633:26">tp</name><operator pos:start="1633:27" pos:end="1633:28">-&gt;</operator><name pos:start="1633:29" pos:end="1633:35">snd_nxt</name></name> <operator pos:start="1633:37" pos:end="1633:37">=</operator> <name pos:start="1633:39" pos:end="1633:49"><name pos:start="1633:39" pos:end="1633:40">tp</name><operator pos:start="1633:41" pos:end="1633:42">-&gt;</operator><name pos:start="1633:43" pos:end="1633:49">snd_una</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



		<switch pos:start="1637:17" pos:end="1753:17">switch <condition pos:start="1637:24" pos:end="1637:36">(<expr pos:start="1637:25" pos:end="1637:35"><name pos:start="1637:25" pos:end="1637:35"><name pos:start="1637:25" pos:end="1637:26">tp</name><operator pos:start="1637:27" pos:end="1637:28">-&gt;</operator><name pos:start="1637:29" pos:end="1637:35">t_state</name></name></expr>)</condition> <block pos:start="1637:38" pos:end="1753:17">{<block_content pos:start="1651:17" pos:end="1751:42">



		<comment type="block" pos:start="1641:17" pos:end="1649:19">/*

		 * In FIN_WAIT_1 STATE in addition to the processing

		 * for the ESTABLISHED state if our FIN is now acknowledged

		 * then enter FIN_WAIT_2.

		 */</comment>

		<case pos:start="1651:17" pos:end="1651:37">case <expr pos:start="1651:22" pos:end="1651:36"><name pos:start="1651:22" pos:end="1651:36">TCPS_FIN_WAIT_1</name></expr>:</case>

			<if_stmt pos:start="1653:25" pos:end="1677:25"><if pos:start="1653:25" pos:end="1677:25">if <condition pos:start="1653:28" pos:end="1653:42">(<expr pos:start="1653:29" pos:end="1653:41"><name pos:start="1653:29" pos:end="1653:41">ourfinisacked</name></expr>)</condition> <block pos:start="1653:44" pos:end="1677:25">{<block_content pos:start="1669:33" pos:end="1675:62">

				<comment type="block" pos:start="1655:33" pos:end="1667:35">/*

				 * If we can't receive any more

				 * data, then closing user can proceed.

				 * Starting the timer is contrary to the

				 * specification, but if we don't get a FIN

				 * we'll hang forever.

				 */</comment>

				<if_stmt pos:start="1669:33" pos:end="1673:33"><if pos:start="1669:33" pos:end="1673:33">if <condition pos:start="1669:36" pos:end="1669:67">(<expr pos:start="1669:37" pos:end="1669:66"><name pos:start="1669:37" pos:end="1669:48"><name pos:start="1669:37" pos:end="1669:38">so</name><operator pos:start="1669:39" pos:end="1669:40">-&gt;</operator><name pos:start="1669:41" pos:end="1669:48">so_state</name></name> <operator pos:start="1669:50" pos:end="1669:50">&amp;</operator> <name pos:start="1669:52" pos:end="1669:66">SS_FCANTRCVMORE</name></expr>)</condition> <block pos:start="1669:69" pos:end="1673:33">{<block_content pos:start="1671:41" pos:end="1671:77">

					<expr_stmt pos:start="1671:41" pos:end="1671:77"><expr pos:start="1671:41" pos:end="1671:76"><name pos:start="1671:41" pos:end="1671:62"><name pos:start="1671:41" pos:end="1671:42">tp</name><operator pos:start="1671:43" pos:end="1671:44">-&gt;</operator><name pos:start="1671:45" pos:end="1671:51">t_timer</name><index pos:start="1671:52" pos:end="1671:62">[<expr pos:start="1671:53" pos:end="1671:61"><name pos:start="1671:53" pos:end="1671:61">TCPT_2MSL</name></expr>]</index></name> <operator pos:start="1671:64" pos:end="1671:64">=</operator> <name pos:start="1671:66" pos:end="1671:76">TCP_MAXIDLE</name></expr>;</expr_stmt>

				</block_content>}</block></if></if_stmt>

				<expr_stmt pos:start="1675:33" pos:end="1675:62"><expr pos:start="1675:33" pos:end="1675:61"><name pos:start="1675:33" pos:end="1675:43"><name pos:start="1675:33" pos:end="1675:34">tp</name><operator pos:start="1675:35" pos:end="1675:36">-&gt;</operator><name pos:start="1675:37" pos:end="1675:43">t_state</name></name> <operator pos:start="1675:45" pos:end="1675:45">=</operator> <name pos:start="1675:47" pos:end="1675:61">TCPS_FIN_WAIT_2</name></expr>;</expr_stmt>

			</block_content>}</block></if></if_stmt>

			<break pos:start="1679:25" pos:end="1679:30">break;</break>



	 	<comment type="block" pos:start="1683:17" pos:end="1693:19">/*

		 * In CLOSING STATE in addition to the processing for

		 * the ESTABLISHED state if the ACK acknowledges our FIN

		 * then enter the TIME-WAIT state, otherwise ignore

		 * the segment.

		 */</comment>

		<case pos:start="1695:17" pos:end="1695:34">case <expr pos:start="1695:22" pos:end="1695:33"><name pos:start="1695:22" pos:end="1695:33">TCPS_CLOSING</name></expr>:</case>

			<if_stmt pos:start="1697:25" pos:end="1705:25"><if pos:start="1697:25" pos:end="1705:25">if <condition pos:start="1697:28" pos:end="1697:42">(<expr pos:start="1697:29" pos:end="1697:41"><name pos:start="1697:29" pos:end="1697:41">ourfinisacked</name></expr>)</condition> <block pos:start="1697:44" pos:end="1705:25">{<block_content pos:start="1699:33" pos:end="1703:71">

				<expr_stmt pos:start="1699:33" pos:end="1699:61"><expr pos:start="1699:33" pos:end="1699:60"><name pos:start="1699:33" pos:end="1699:43"><name pos:start="1699:33" pos:end="1699:34">tp</name><operator pos:start="1699:35" pos:end="1699:36">-&gt;</operator><name pos:start="1699:37" pos:end="1699:43">t_state</name></name> <operator pos:start="1699:45" pos:end="1699:45">=</operator> <name pos:start="1699:47" pos:end="1699:60">TCPS_TIME_WAIT</name></expr>;</expr_stmt>

				<expr_stmt pos:start="1701:33" pos:end="1701:53"><expr pos:start="1701:33" pos:end="1701:52"><call pos:start="1701:33" pos:end="1701:52"><name pos:start="1701:33" pos:end="1701:48">tcp_canceltimers</name><argument_list pos:start="1701:49" pos:end="1701:52">(<argument pos:start="1701:50" pos:end="1701:51"><expr pos:start="1701:50" pos:end="1701:51"><name pos:start="1701:50" pos:end="1701:51">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt pos:start="1703:33" pos:end="1703:71"><expr pos:start="1703:33" pos:end="1703:70"><name pos:start="1703:33" pos:end="1703:54"><name pos:start="1703:33" pos:end="1703:34">tp</name><operator pos:start="1703:35" pos:end="1703:36">-&gt;</operator><name pos:start="1703:37" pos:end="1703:43">t_timer</name><index pos:start="1703:44" pos:end="1703:54">[<expr pos:start="1703:45" pos:end="1703:53"><name pos:start="1703:45" pos:end="1703:53">TCPT_2MSL</name></expr>]</index></name> <operator pos:start="1703:56" pos:end="1703:56">=</operator> <literal type="number" pos:start="1703:58" pos:end="1703:58">2</literal> <operator pos:start="1703:60" pos:end="1703:60">*</operator> <name pos:start="1703:62" pos:end="1703:70">TCPTV_MSL</name></expr>;</expr_stmt>

			</block_content>}</block></if></if_stmt>

			<break pos:start="1707:25" pos:end="1707:30">break;</break>



		<comment type="block" pos:start="1711:17" pos:end="1721:19">/*

		 * In LAST_ACK, we may still be waiting for data to drain

		 * and/or to be acked, as well as for the ack of our FIN.

		 * If our FIN is now acknowledged, delete the TCB,

		 * enter the closed state and return.

		 */</comment>

		<case pos:start="1723:17" pos:end="1723:35">case <expr pos:start="1723:22" pos:end="1723:34"><name pos:start="1723:22" pos:end="1723:34">TCPS_LAST_ACK</name></expr>:</case>

			<if_stmt pos:start="1725:25" pos:end="1731:25"><if pos:start="1725:25" pos:end="1731:25">if <condition pos:start="1725:28" pos:end="1725:42">(<expr pos:start="1725:29" pos:end="1725:41"><name pos:start="1725:29" pos:end="1725:41">ourfinisacked</name></expr>)</condition> <block pos:start="1725:44" pos:end="1731:25">{<block_content pos:start="1727:33" pos:end="1729:42">

                                <expr_stmt pos:start="1727:33" pos:end="1727:46"><expr pos:start="1727:33" pos:end="1727:45"><call pos:start="1727:33" pos:end="1727:45"><name pos:start="1727:33" pos:end="1727:41">tcp_close</name><argument_list pos:start="1727:42" pos:end="1727:45">(<argument pos:start="1727:43" pos:end="1727:44"><expr pos:start="1727:43" pos:end="1727:44"><name pos:start="1727:43" pos:end="1727:44">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<goto pos:start="1729:33" pos:end="1729:42">goto <name pos:start="1729:38" pos:end="1729:41">drop</name>;</goto>

			</block_content>}</block></if></if_stmt>

			<break pos:start="1733:25" pos:end="1733:30">break;</break>



		<comment type="block" pos:start="1737:17" pos:end="1745:19">/*

		 * In TIME_WAIT state the only thing that should arrive

		 * is a retransmission of the remote FIN.  Acknowledge

		 * it and restart the finack timer.

		 */</comment>

		<case pos:start="1747:17" pos:end="1747:36">case <expr pos:start="1747:22" pos:end="1747:35"><name pos:start="1747:22" pos:end="1747:35">TCPS_TIME_WAIT</name></expr>:</case>

			<expr_stmt pos:start="1749:25" pos:end="1749:63"><expr pos:start="1749:25" pos:end="1749:62"><name pos:start="1749:25" pos:end="1749:46"><name pos:start="1749:25" pos:end="1749:26">tp</name><operator pos:start="1749:27" pos:end="1749:28">-&gt;</operator><name pos:start="1749:29" pos:end="1749:35">t_timer</name><index pos:start="1749:36" pos:end="1749:46">[<expr pos:start="1749:37" pos:end="1749:45"><name pos:start="1749:37" pos:end="1749:45">TCPT_2MSL</name></expr>]</index></name> <operator pos:start="1749:48" pos:end="1749:48">=</operator> <literal type="number" pos:start="1749:50" pos:end="1749:50">2</literal> <operator pos:start="1749:52" pos:end="1749:52">*</operator> <name pos:start="1749:54" pos:end="1749:62">TCPTV_MSL</name></expr>;</expr_stmt>

			<goto pos:start="1751:25" pos:end="1751:42">goto <name pos:start="1751:30" pos:end="1751:41">dropafterack</name>;</goto>

		</block_content>}</block></switch>

	</block_content>}</block></switch> <comment type="block" pos:start="1755:11" pos:end="1755:35">/* switch(tp-&gt;t_state) */</comment>



<label pos:start="1759:1" pos:end="1759:6"><name pos:start="1759:1" pos:end="1759:5">step6</name>:</label>

	<comment type="block" pos:start="1761:9" pos:end="1767:11">/*

	 * Update window information.

	 * Don't look at window if no ACK: TAC's send garbage on first SYN.

	 */</comment>

	<if_stmt pos:start="1769:9" pos:end="1789:9"><if pos:start="1769:9" pos:end="1789:9">if <condition pos:start="1769:12" pos:end="1775:66">(<expr pos:start="1769:13" pos:end="1775:65"><operator pos:start="1769:13" pos:end="1769:13">(</operator><name pos:start="1769:14" pos:end="1769:20">tiflags</name> <operator pos:start="1769:22" pos:end="1769:22">&amp;</operator> <name pos:start="1769:24" pos:end="1769:29">TH_ACK</name><operator pos:start="1769:30" pos:end="1769:30">)</operator> <operator pos:start="1769:32" pos:end="1769:33">&amp;&amp;</operator>

	    <operator pos:start="1771:13" pos:end="1771:13">(</operator><call pos:start="1771:14" pos:end="1771:44"><name pos:start="1771:14" pos:end="1771:19">SEQ_LT</name><argument_list pos:start="1771:20" pos:end="1771:44">(<argument pos:start="1771:21" pos:end="1771:31"><expr pos:start="1771:21" pos:end="1771:31"><name pos:start="1771:21" pos:end="1771:31"><name pos:start="1771:21" pos:end="1771:22">tp</name><operator pos:start="1771:23" pos:end="1771:24">-&gt;</operator><name pos:start="1771:25" pos:end="1771:31">snd_wl1</name></name></expr></argument>, <argument pos:start="1771:34" pos:end="1771:43"><expr pos:start="1771:34" pos:end="1771:43"><name pos:start="1771:34" pos:end="1771:43"><name pos:start="1771:34" pos:end="1771:35">ti</name><operator pos:start="1771:36" pos:end="1771:37">-&gt;</operator><name pos:start="1771:38" pos:end="1771:43">ti_seq</name></name></expr></argument>)</argument_list></call> <operator pos:start="1771:46" pos:end="1771:47">||</operator>

	    <operator pos:start="1773:13" pos:end="1773:13">(</operator><name pos:start="1773:14" pos:end="1773:24"><name pos:start="1773:14" pos:end="1773:15">tp</name><operator pos:start="1773:16" pos:end="1773:17">-&gt;</operator><name pos:start="1773:18" pos:end="1773:24">snd_wl1</name></name> <operator pos:start="1773:26" pos:end="1773:27">==</operator> <name pos:start="1773:29" pos:end="1773:38"><name pos:start="1773:29" pos:end="1773:30">ti</name><operator pos:start="1773:31" pos:end="1773:32">-&gt;</operator><name pos:start="1773:33" pos:end="1773:38">ti_seq</name></name> <operator pos:start="1773:40" pos:end="1773:41">&amp;&amp;</operator> <operator pos:start="1773:43" pos:end="1773:43">(</operator><call pos:start="1773:44" pos:end="1773:74"><name pos:start="1773:44" pos:end="1773:49">SEQ_LT</name><argument_list pos:start="1773:50" pos:end="1773:74">(<argument pos:start="1773:51" pos:end="1773:61"><expr pos:start="1773:51" pos:end="1773:61"><name pos:start="1773:51" pos:end="1773:61"><name pos:start="1773:51" pos:end="1773:52">tp</name><operator pos:start="1773:53" pos:end="1773:54">-&gt;</operator><name pos:start="1773:55" pos:end="1773:61">snd_wl2</name></name></expr></argument>, <argument pos:start="1773:64" pos:end="1773:73"><expr pos:start="1773:64" pos:end="1773:73"><name pos:start="1773:64" pos:end="1773:73"><name pos:start="1773:64" pos:end="1773:65">ti</name><operator pos:start="1773:66" pos:end="1773:67">-&gt;</operator><name pos:start="1773:68" pos:end="1773:73">ti_ack</name></name></expr></argument>)</argument_list></call> <operator pos:start="1773:76" pos:end="1773:77">||</operator>

	    <operator pos:start="1775:13" pos:end="1775:13">(</operator><name pos:start="1775:14" pos:end="1775:24"><name pos:start="1775:14" pos:end="1775:15">tp</name><operator pos:start="1775:16" pos:end="1775:17">-&gt;</operator><name pos:start="1775:18" pos:end="1775:24">snd_wl2</name></name> <operator pos:start="1775:26" pos:end="1775:27">==</operator> <name pos:start="1775:29" pos:end="1775:38"><name pos:start="1775:29" pos:end="1775:30">ti</name><operator pos:start="1775:31" pos:end="1775:32">-&gt;</operator><name pos:start="1775:33" pos:end="1775:38">ti_ack</name></name> <operator pos:start="1775:40" pos:end="1775:41">&amp;&amp;</operator> <name pos:start="1775:43" pos:end="1775:47">tiwin</name> <operator pos:start="1775:49" pos:end="1775:49">&gt;</operator> <name pos:start="1775:51" pos:end="1775:61"><name pos:start="1775:51" pos:end="1775:52">tp</name><operator pos:start="1775:53" pos:end="1775:54">-&gt;</operator><name pos:start="1775:55" pos:end="1775:61">snd_wnd</name></name><operator pos:start="1775:62" pos:end="1775:62">)</operator><operator pos:start="1775:63" pos:end="1775:63">)</operator><operator pos:start="1775:64" pos:end="1775:64">)</operator><operator pos:start="1775:65" pos:end="1775:65">)</operator></expr>)</condition> <block pos:start="1775:68" pos:end="1789:9">{<block_content pos:start="1777:17" pos:end="1787:31">

		<expr_stmt pos:start="1777:17" pos:end="1777:36"><expr pos:start="1777:17" pos:end="1777:35"><name pos:start="1777:17" pos:end="1777:27"><name pos:start="1777:17" pos:end="1777:18">tp</name><operator pos:start="1777:19" pos:end="1777:20">-&gt;</operator><name pos:start="1777:21" pos:end="1777:27">snd_wnd</name></name> <operator pos:start="1777:29" pos:end="1777:29">=</operator> <name pos:start="1777:31" pos:end="1777:35">tiwin</name></expr>;</expr_stmt>

		<expr_stmt pos:start="1779:17" pos:end="1779:41"><expr pos:start="1779:17" pos:end="1779:40"><name pos:start="1779:17" pos:end="1779:27"><name pos:start="1779:17" pos:end="1779:18">tp</name><operator pos:start="1779:19" pos:end="1779:20">-&gt;</operator><name pos:start="1779:21" pos:end="1779:27">snd_wl1</name></name> <operator pos:start="1779:29" pos:end="1779:29">=</operator> <name pos:start="1779:31" pos:end="1779:40"><name pos:start="1779:31" pos:end="1779:32">ti</name><operator pos:start="1779:33" pos:end="1779:34">-&gt;</operator><name pos:start="1779:35" pos:end="1779:40">ti_seq</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="1781:17" pos:end="1781:41"><expr pos:start="1781:17" pos:end="1781:40"><name pos:start="1781:17" pos:end="1781:27"><name pos:start="1781:17" pos:end="1781:18">tp</name><operator pos:start="1781:19" pos:end="1781:20">-&gt;</operator><name pos:start="1781:21" pos:end="1781:27">snd_wl2</name></name> <operator pos:start="1781:29" pos:end="1781:29">=</operator> <name pos:start="1781:31" pos:end="1781:40"><name pos:start="1781:31" pos:end="1781:32">ti</name><operator pos:start="1781:33" pos:end="1781:34">-&gt;</operator><name pos:start="1781:35" pos:end="1781:40">ti_ack</name></name></expr>;</expr_stmt>

		<if_stmt pos:start="1783:17" pos:end="1785:53"><if pos:start="1783:17" pos:end="1785:53">if <condition pos:start="1783:20" pos:end="1783:49">(<expr pos:start="1783:21" pos:end="1783:48"><name pos:start="1783:21" pos:end="1783:31"><name pos:start="1783:21" pos:end="1783:22">tp</name><operator pos:start="1783:23" pos:end="1783:24">-&gt;</operator><name pos:start="1783:25" pos:end="1783:31">snd_wnd</name></name> <operator pos:start="1783:33" pos:end="1783:33">&gt;</operator> <name pos:start="1783:35" pos:end="1783:48"><name pos:start="1783:35" pos:end="1783:36">tp</name><operator pos:start="1783:37" pos:end="1783:38">-&gt;</operator><name pos:start="1783:39" pos:end="1783:48">max_sndwnd</name></name></expr>)</condition><block type="pseudo" pos:start="1785:25" pos:end="1785:53"><block_content pos:start="1785:25" pos:end="1785:53">

			<expr_stmt pos:start="1785:25" pos:end="1785:53"><expr pos:start="1785:25" pos:end="1785:52"><name pos:start="1785:25" pos:end="1785:38"><name pos:start="1785:25" pos:end="1785:26">tp</name><operator pos:start="1785:27" pos:end="1785:28">-&gt;</operator><name pos:start="1785:29" pos:end="1785:38">max_sndwnd</name></name> <operator pos:start="1785:40" pos:end="1785:40">=</operator> <name pos:start="1785:42" pos:end="1785:52"><name pos:start="1785:42" pos:end="1785:43">tp</name><operator pos:start="1785:44" pos:end="1785:45">-&gt;</operator><name pos:start="1785:46" pos:end="1785:52">snd_wnd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt pos:start="1787:17" pos:end="1787:31"><expr pos:start="1787:17" pos:end="1787:30"><name pos:start="1787:17" pos:end="1787:26">needoutput</name> <operator pos:start="1787:28" pos:end="1787:28">=</operator> <literal type="number" pos:start="1787:30" pos:end="1787:30">1</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="1793:9" pos:end="1797:11">/*

	 * Process segments with URG.

	 */</comment>

	<if_stmt pos:start="1799:9" pos:end="1881:49"><if pos:start="1799:9" pos:end="1867:9">if <condition pos:start="1799:12" pos:end="1801:47">(<expr pos:start="1799:13" pos:end="1801:46"><operator pos:start="1799:13" pos:end="1799:13">(</operator><name pos:start="1799:14" pos:end="1799:20">tiflags</name> <operator pos:start="1799:22" pos:end="1799:22">&amp;</operator> <name pos:start="1799:24" pos:end="1799:29">TH_URG</name><operator pos:start="1799:30" pos:end="1799:30">)</operator> <operator pos:start="1799:32" pos:end="1799:33">&amp;&amp;</operator> <name pos:start="1799:35" pos:end="1799:44"><name pos:start="1799:35" pos:end="1799:36">ti</name><operator pos:start="1799:37" pos:end="1799:38">-&gt;</operator><name pos:start="1799:39" pos:end="1799:44">ti_urp</name></name> <operator pos:start="1799:46" pos:end="1799:47">&amp;&amp;</operator>

	    <call pos:start="1801:13" pos:end="1801:41"><name pos:start="1801:13" pos:end="1801:28">TCPS_HAVERCVDFIN</name><argument_list pos:start="1801:29" pos:end="1801:41">(<argument pos:start="1801:30" pos:end="1801:40"><expr pos:start="1801:30" pos:end="1801:40"><name pos:start="1801:30" pos:end="1801:40"><name pos:start="1801:30" pos:end="1801:31">tp</name><operator pos:start="1801:32" pos:end="1801:33">-&gt;</operator><name pos:start="1801:34" pos:end="1801:40">t_state</name></name></expr></argument>)</argument_list></call> <operator pos:start="1801:43" pos:end="1801:44">==</operator> <literal type="number" pos:start="1801:46" pos:end="1801:46">0</literal></expr>)</condition> <block pos:start="1801:49" pos:end="1867:9">{<block_content pos:start="1815:17" pos:end="1865:17">

		<comment type="block" pos:start="1803:17" pos:end="1813:19">/*

		 * This is a kludge, but if we receive and accept

		 * random urgent pointers, we'll crash in

		 * soreceive.  It's hard to imagine someone

		 * actually wanting to send this much urgent data.

		 */</comment>

		<if_stmt pos:start="1815:17" pos:end="1823:17"><if pos:start="1815:17" pos:end="1823:17">if <condition pos:start="1815:20" pos:end="1815:74">(<expr pos:start="1815:21" pos:end="1815:73"><name pos:start="1815:21" pos:end="1815:30"><name pos:start="1815:21" pos:end="1815:22">ti</name><operator pos:start="1815:23" pos:end="1815:24">-&gt;</operator><name pos:start="1815:25" pos:end="1815:30">ti_urp</name></name> <operator pos:start="1815:32" pos:end="1815:32">+</operator> <name pos:start="1815:34" pos:end="1815:49"><name pos:start="1815:34" pos:end="1815:35">so</name><operator pos:start="1815:36" pos:end="1815:37">-&gt;</operator><name pos:start="1815:38" pos:end="1815:43">so_rcv</name><operator pos:start="1815:44" pos:end="1815:44">.</operator><name pos:start="1815:45" pos:end="1815:49">sb_cc</name></name> <operator pos:start="1815:51" pos:end="1815:51">&gt;</operator> <name pos:start="1815:53" pos:end="1815:73"><name pos:start="1815:53" pos:end="1815:54">so</name><operator pos:start="1815:55" pos:end="1815:56">-&gt;</operator><name pos:start="1815:57" pos:end="1815:62">so_rcv</name><operator pos:start="1815:63" pos:end="1815:63">.</operator><name pos:start="1815:64" pos:end="1815:73">sb_datalen</name></name></expr>)</condition> <block pos:start="1815:76" pos:end="1823:17">{<block_content pos:start="1817:25" pos:end="1821:36">

			<expr_stmt pos:start="1817:25" pos:end="1817:39"><expr pos:start="1817:25" pos:end="1817:38"><name pos:start="1817:25" pos:end="1817:34"><name pos:start="1817:25" pos:end="1817:26">ti</name><operator pos:start="1817:27" pos:end="1817:28">-&gt;</operator><name pos:start="1817:29" pos:end="1817:34">ti_urp</name></name> <operator pos:start="1817:36" pos:end="1817:36">=</operator> <literal type="number" pos:start="1817:38" pos:end="1817:38">0</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="1819:25" pos:end="1819:43"><expr pos:start="1819:25" pos:end="1819:42"><name pos:start="1819:25" pos:end="1819:31">tiflags</name> <operator pos:start="1819:33" pos:end="1819:34">&amp;=</operator> <operator pos:start="1819:36" pos:end="1819:36">~</operator><name pos:start="1819:37" pos:end="1819:42">TH_URG</name></expr>;</expr_stmt>

			<goto pos:start="1821:25" pos:end="1821:36">goto <name pos:start="1821:30" pos:end="1821:35">dodata</name>;</goto>

		</block_content>}</block></if></if_stmt>

		<comment type="block" pos:start="1825:17" pos:end="1851:19">/*

		 * If this segment advances the known urgent pointer,

		 * then mark the data stream.  This should not happen

		 * in CLOSE_WAIT, CLOSING, LAST_ACK or TIME_WAIT STATES since

		 * a FIN has been received from the remote side.

		 * In these states we ignore the URG.

		 *

		 * According to RFC961 (Assigned Protocols),

		 * the urgent pointer points to the last octet

		 * of urgent data.  We continue, however,

		 * to consider it to indicate the first octet

		 * of data past the urgent section as the original

		 * spec states (in one of two places).

		 */</comment>

		<if_stmt pos:start="1853:17" pos:end="1865:17"><if pos:start="1853:17" pos:end="1865:17">if <condition pos:start="1853:20" pos:end="1853:62">(<expr pos:start="1853:21" pos:end="1853:61"><call pos:start="1853:21" pos:end="1853:61"><name pos:start="1853:21" pos:end="1853:26">SEQ_GT</name><argument_list pos:start="1853:27" pos:end="1853:61">(<argument pos:start="1853:28" pos:end="1853:48"><expr pos:start="1853:28" pos:end="1853:48"><name pos:start="1853:28" pos:end="1853:37"><name pos:start="1853:28" pos:end="1853:29">ti</name><operator pos:start="1853:30" pos:end="1853:31">-&gt;</operator><name pos:start="1853:32" pos:end="1853:37">ti_seq</name></name><operator pos:start="1853:38" pos:end="1853:38">+</operator><name pos:start="1853:39" pos:end="1853:48"><name pos:start="1853:39" pos:end="1853:40">ti</name><operator pos:start="1853:41" pos:end="1853:42">-&gt;</operator><name pos:start="1853:43" pos:end="1853:48">ti_urp</name></name></expr></argument>, <argument pos:start="1853:51" pos:end="1853:60"><expr pos:start="1853:51" pos:end="1853:60"><name pos:start="1853:51" pos:end="1853:60"><name pos:start="1853:51" pos:end="1853:52">tp</name><operator pos:start="1853:53" pos:end="1853:54">-&gt;</operator><name pos:start="1853:55" pos:end="1853:60">rcv_up</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1853:64" pos:end="1865:17">{<block_content pos:start="1855:25" pos:end="1861:61">

			<expr_stmt pos:start="1855:25" pos:end="1855:61"><expr pos:start="1855:25" pos:end="1855:60"><name pos:start="1855:25" pos:end="1855:34"><name pos:start="1855:25" pos:end="1855:26">tp</name><operator pos:start="1855:27" pos:end="1855:28">-&gt;</operator><name pos:start="1855:29" pos:end="1855:34">rcv_up</name></name> <operator pos:start="1855:36" pos:end="1855:36">=</operator> <name pos:start="1855:38" pos:end="1855:47"><name pos:start="1855:38" pos:end="1855:39">ti</name><operator pos:start="1855:40" pos:end="1855:41">-&gt;</operator><name pos:start="1855:42" pos:end="1855:47">ti_seq</name></name> <operator pos:start="1855:49" pos:end="1855:49">+</operator> <name pos:start="1855:51" pos:end="1855:60"><name pos:start="1855:51" pos:end="1855:52">ti</name><operator pos:start="1855:53" pos:end="1855:54">-&gt;</operator><name pos:start="1855:55" pos:end="1855:60">ti_urp</name></name></expr>;</expr_stmt>

			<expr_stmt pos:start="1857:25" pos:end="1859:59"><expr pos:start="1857:25" pos:end="1859:58"><name pos:start="1857:25" pos:end="1857:35"><name pos:start="1857:25" pos:end="1857:26">so</name><operator pos:start="1857:27" pos:end="1857:28">-&gt;</operator><name pos:start="1857:29" pos:end="1857:35">so_urgc</name></name> <operator pos:start="1857:37" pos:end="1857:37">=</operator>  <name pos:start="1857:40" pos:end="1857:55"><name pos:start="1857:40" pos:end="1857:41">so</name><operator pos:start="1857:42" pos:end="1857:43">-&gt;</operator><name pos:start="1857:44" pos:end="1857:49">so_rcv</name><operator pos:start="1857:50" pos:end="1857:50">.</operator><name pos:start="1857:51" pos:end="1857:55">sb_cc</name></name> <operator pos:start="1857:57" pos:end="1857:57">+</operator>

				<operator pos:start="1859:33" pos:end="1859:33">(</operator><name pos:start="1859:34" pos:end="1859:43"><name pos:start="1859:34" pos:end="1859:35">tp</name><operator pos:start="1859:36" pos:end="1859:37">-&gt;</operator><name pos:start="1859:38" pos:end="1859:43">rcv_up</name></name> <operator pos:start="1859:45" pos:end="1859:45">-</operator> <name pos:start="1859:47" pos:end="1859:57"><name pos:start="1859:47" pos:end="1859:48">tp</name><operator pos:start="1859:49" pos:end="1859:50">-&gt;</operator><name pos:start="1859:51" pos:end="1859:57">rcv_nxt</name></name><operator pos:start="1859:58" pos:end="1859:58">)</operator></expr>;</expr_stmt> <comment type="block" pos:start="1859:61" pos:end="1859:69">/* -1; */</comment>

			<expr_stmt pos:start="1861:25" pos:end="1861:61"><expr pos:start="1861:25" pos:end="1861:60"><name pos:start="1861:25" pos:end="1861:34"><name pos:start="1861:25" pos:end="1861:26">tp</name><operator pos:start="1861:27" pos:end="1861:28">-&gt;</operator><name pos:start="1861:29" pos:end="1861:34">rcv_up</name></name> <operator pos:start="1861:36" pos:end="1861:36">=</operator> <name pos:start="1861:38" pos:end="1861:47"><name pos:start="1861:38" pos:end="1861:39">ti</name><operator pos:start="1861:40" pos:end="1861:41">-&gt;</operator><name pos:start="1861:42" pos:end="1861:47">ti_seq</name></name> <operator pos:start="1861:49" pos:end="1861:49">+</operator> <name pos:start="1861:51" pos:end="1861:60"><name pos:start="1861:51" pos:end="1861:52">ti</name><operator pos:start="1861:53" pos:end="1861:54">-&gt;</operator><name pos:start="1861:55" pos:end="1861:60">ti_urp</name></name></expr>;</expr_stmt>



		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if> <if type="elseif" pos:start="1867:11" pos:end="1881:49">else

		<comment type="block" pos:start="1869:17" pos:end="1877:19">/*

		 * If no out of band data is expected,

		 * pull receive urgent pointer along

		 * with the receive window.

		 */</comment>

		if <condition pos:start="1879:20" pos:end="1879:52">(<expr pos:start="1879:21" pos:end="1879:51"><call pos:start="1879:21" pos:end="1879:51"><name pos:start="1879:21" pos:end="1879:26">SEQ_GT</name><argument_list pos:start="1879:27" pos:end="1879:51">(<argument pos:start="1879:28" pos:end="1879:38"><expr pos:start="1879:28" pos:end="1879:38"><name pos:start="1879:28" pos:end="1879:38"><name pos:start="1879:28" pos:end="1879:29">tp</name><operator pos:start="1879:30" pos:end="1879:31">-&gt;</operator><name pos:start="1879:32" pos:end="1879:38">rcv_nxt</name></name></expr></argument>, <argument pos:start="1879:41" pos:end="1879:50"><expr pos:start="1879:41" pos:end="1879:50"><name pos:start="1879:41" pos:end="1879:50"><name pos:start="1879:41" pos:end="1879:42">tp</name><operator pos:start="1879:43" pos:end="1879:44">-&gt;</operator><name pos:start="1879:45" pos:end="1879:50">rcv_up</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="1881:25" pos:end="1881:49"><block_content pos:start="1881:25" pos:end="1881:49">

			<expr_stmt pos:start="1881:25" pos:end="1881:49"><expr pos:start="1881:25" pos:end="1881:48"><name pos:start="1881:25" pos:end="1881:34"><name pos:start="1881:25" pos:end="1881:26">tp</name><operator pos:start="1881:27" pos:end="1881:28">-&gt;</operator><name pos:start="1881:29" pos:end="1881:34">rcv_up</name></name> <operator pos:start="1881:36" pos:end="1881:36">=</operator> <name pos:start="1881:38" pos:end="1881:48"><name pos:start="1881:38" pos:end="1881:39">tp</name><operator pos:start="1881:40" pos:end="1881:41">-&gt;</operator><name pos:start="1881:42" pos:end="1881:48">rcv_nxt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label pos:start="1883:1" pos:end="1883:7"><name pos:start="1883:1" pos:end="1883:6">dodata</name>:</label>



	<comment type="block" pos:start="1887:9" pos:end="1895:11">/*

	 * If this is a small packet, then ACK now - with Nagel

	 *      congestion avoidance sender won't send more until

	 *      he gets an ACK.

	 */</comment>

	<if_stmt pos:start="1897:9" pos:end="1903:9"><if pos:start="1897:9" pos:end="1903:9">if <condition pos:start="1897:12" pos:end="1899:62">(<expr pos:start="1897:13" pos:end="1899:61"><name pos:start="1897:13" pos:end="1897:22"><name pos:start="1897:13" pos:end="1897:14">ti</name><operator pos:start="1897:15" pos:end="1897:16">-&gt;</operator><name pos:start="1897:17" pos:end="1897:22">ti_len</name></name> <operator pos:start="1897:24" pos:end="1897:25">&amp;&amp;</operator> <operator pos:start="1897:27" pos:end="1897:27">(</operator><name pos:start="1897:28" pos:end="1897:35">unsigned</name><operator pos:start="1897:36" pos:end="1897:36">)</operator><name pos:start="1897:37" pos:end="1897:46"><name pos:start="1897:37" pos:end="1897:38">ti</name><operator pos:start="1897:39" pos:end="1897:40">-&gt;</operator><name pos:start="1897:41" pos:end="1897:46">ti_len</name></name> <operator pos:start="1897:48" pos:end="1897:49">&lt;=</operator> <literal type="number" pos:start="1897:51" pos:end="1897:51">5</literal> <operator pos:start="1897:53" pos:end="1897:54">&amp;&amp;</operator>

	    <operator pos:start="1899:13" pos:end="1899:13">(</operator><operator pos:start="1899:14" pos:end="1899:14">(</operator>struct <name pos:start="1899:22" pos:end="1899:31">tcpiphdr_2</name> <operator pos:start="1899:33" pos:end="1899:33">*</operator><operator pos:start="1899:34" pos:end="1899:34">)</operator><name pos:start="1899:35" pos:end="1899:36">ti</name><operator pos:start="1899:37" pos:end="1899:37">)</operator><operator pos:start="1899:38" pos:end="1899:39">-&gt;</operator><name pos:start="1899:40" pos:end="1899:49">first_char</name> <operator pos:start="1899:51" pos:end="1899:52">==</operator> <operator pos:start="1899:54" pos:end="1899:54">(</operator><name pos:start="1899:55" pos:end="1899:58">char</name><operator pos:start="1899:59" pos:end="1899:59">)</operator><literal type="number" pos:start="1899:60" pos:end="1899:61">27</literal></expr>)</condition> <block pos:start="1899:64" pos:end="1903:9">{<block_content pos:start="1901:17" pos:end="1901:41">

		<expr_stmt pos:start="1901:17" pos:end="1901:41"><expr pos:start="1901:17" pos:end="1901:40"><name pos:start="1901:17" pos:end="1901:27"><name pos:start="1901:17" pos:end="1901:18">tp</name><operator pos:start="1901:19" pos:end="1901:20">-&gt;</operator><name pos:start="1901:21" pos:end="1901:27">t_flags</name></name> <operator pos:start="1901:29" pos:end="1901:30">|=</operator> <name pos:start="1901:32" pos:end="1901:40">TF_ACKNOW</name></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="1907:9" pos:end="1921:11">/*

	 * Process the segment text, merging it into the TCP sequencing queue,

	 * and arranging for acknowledgment of receipt if necessary.

	 * This process logically involves adjusting tp-&gt;rcv_wnd as data

	 * is presented to the user (this happens in tcp_usrreq.c,

	 * case PRU_RCVD).  If a FIN has already been received on this

	 * connection then we just ignore the text.

	 */</comment>

	<if_stmt pos:start="1923:9" pos:end="1935:9"><if pos:start="1923:9" pos:end="1929:9">if <condition pos:start="1923:12" pos:end="1925:47">(<expr pos:start="1923:13" pos:end="1925:46"><operator pos:start="1923:13" pos:end="1923:13">(</operator><name pos:start="1923:14" pos:end="1923:23"><name pos:start="1923:14" pos:end="1923:15">ti</name><operator pos:start="1923:16" pos:end="1923:17">-&gt;</operator><name pos:start="1923:18" pos:end="1923:23">ti_len</name></name> <operator pos:start="1923:25" pos:end="1923:26">||</operator> <operator pos:start="1923:28" pos:end="1923:28">(</operator><name pos:start="1923:29" pos:end="1923:35">tiflags</name><operator pos:start="1923:36" pos:end="1923:36">&amp;</operator><name pos:start="1923:37" pos:end="1923:42">TH_FIN</name><operator pos:start="1923:43" pos:end="1923:43">)</operator><operator pos:start="1923:44" pos:end="1923:44">)</operator> <operator pos:start="1923:46" pos:end="1923:47">&amp;&amp;</operator>

	    <call pos:start="1925:13" pos:end="1925:41"><name pos:start="1925:13" pos:end="1925:28">TCPS_HAVERCVDFIN</name><argument_list pos:start="1925:29" pos:end="1925:41">(<argument pos:start="1925:30" pos:end="1925:40"><expr pos:start="1925:30" pos:end="1925:40"><name pos:start="1925:30" pos:end="1925:40"><name pos:start="1925:30" pos:end="1925:31">tp</name><operator pos:start="1925:32" pos:end="1925:33">-&gt;</operator><name pos:start="1925:34" pos:end="1925:40">t_state</name></name></expr></argument>)</argument_list></call> <operator pos:start="1925:43" pos:end="1925:44">==</operator> <literal type="number" pos:start="1925:46" pos:end="1925:46">0</literal></expr>)</condition> <block pos:start="1925:49" pos:end="1929:9">{<block_content pos:start="1927:17" pos:end="1927:50">

		<expr_stmt pos:start="1927:17" pos:end="1927:50"><expr pos:start="1927:17" pos:end="1927:49"><call pos:start="1927:17" pos:end="1927:49"><name pos:start="1927:17" pos:end="1927:25">TCP_REASS</name><argument_list pos:start="1927:26" pos:end="1927:49">(<argument pos:start="1927:27" pos:end="1927:28"><expr pos:start="1927:27" pos:end="1927:28"><name pos:start="1927:27" pos:end="1927:28">tp</name></expr></argument>, <argument pos:start="1927:31" pos:end="1927:32"><expr pos:start="1927:31" pos:end="1927:32"><name pos:start="1927:31" pos:end="1927:32">ti</name></expr></argument>, <argument pos:start="1927:35" pos:end="1927:35"><expr pos:start="1927:35" pos:end="1927:35"><name pos:start="1927:35" pos:end="1927:35">m</name></expr></argument>, <argument pos:start="1927:38" pos:end="1927:39"><expr pos:start="1927:38" pos:end="1927:39"><name pos:start="1927:38" pos:end="1927:39">so</name></expr></argument>, <argument pos:start="1927:42" pos:end="1927:48"><expr pos:start="1927:42" pos:end="1927:48"><name pos:start="1927:42" pos:end="1927:48">tiflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="1929:11" pos:end="1935:9">else <block pos:start="1929:16" pos:end="1935:9">{<block_content pos:start="1931:17" pos:end="1933:35">

		<expr_stmt pos:start="1931:17" pos:end="1931:26"><expr pos:start="1931:17" pos:end="1931:25"><call pos:start="1931:17" pos:end="1931:25"><name pos:start="1931:17" pos:end="1931:22">m_free</name><argument_list pos:start="1931:23" pos:end="1931:25">(<argument pos:start="1931:24" pos:end="1931:24"><expr pos:start="1931:24" pos:end="1931:24"><name pos:start="1931:24" pos:end="1931:24">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="1933:17" pos:end="1933:35"><expr pos:start="1933:17" pos:end="1933:34"><name pos:start="1933:17" pos:end="1933:23">tiflags</name> <operator pos:start="1933:25" pos:end="1933:26">&amp;=</operator> <operator pos:start="1933:28" pos:end="1933:28">~</operator><name pos:start="1933:29" pos:end="1933:34">TH_FIN</name></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>



	<comment type="block" pos:start="1939:9" pos:end="1945:11">/*

	 * If FIN is received ACK the FIN and let the user know

	 * that the connection is closing.

	 */</comment>

	<if_stmt pos:start="1947:9" pos:end="2059:9"><if pos:start="1947:9" pos:end="2059:9">if <condition pos:start="1947:12" pos:end="1947:29">(<expr pos:start="1947:13" pos:end="1947:28"><name pos:start="1947:13" pos:end="1947:19">tiflags</name> <operator pos:start="1947:21" pos:end="1947:21">&amp;</operator> <name pos:start="1947:23" pos:end="1947:28">TH_FIN</name></expr>)</condition> <block pos:start="1947:31" pos:end="2059:9">{<block_content pos:start="1949:17" pos:end="2057:17">

		<if_stmt pos:start="1949:17" pos:end="1977:17"><if pos:start="1949:17" pos:end="1977:17">if <condition pos:start="1949:20" pos:end="1949:55">(<expr pos:start="1949:21" pos:end="1949:54"><call pos:start="1949:21" pos:end="1949:49"><name pos:start="1949:21" pos:end="1949:36">TCPS_HAVERCVDFIN</name><argument_list pos:start="1949:37" pos:end="1949:49">(<argument pos:start="1949:38" pos:end="1949:48"><expr pos:start="1949:38" pos:end="1949:48"><name pos:start="1949:38" pos:end="1949:48"><name pos:start="1949:38" pos:end="1949:39">tp</name><operator pos:start="1949:40" pos:end="1949:41">-&gt;</operator><name pos:start="1949:42" pos:end="1949:48">t_state</name></name></expr></argument>)</argument_list></call> <operator pos:start="1949:51" pos:end="1949:52">==</operator> <literal type="number" pos:start="1949:54" pos:end="1949:54">0</literal></expr>)</condition> <block pos:start="1949:57" pos:end="1977:17">{<block_content pos:start="1969:25" pos:end="1975:38">

			<comment type="block" pos:start="1951:25" pos:end="1967:27">/*

			 * If we receive a FIN we can't send more data,

			 * set it SS_FDRAIN

                         * Shutdown the socket if there is no rx data in the

			 * buffer.

			 * soread() is called on completion of shutdown() and

			 * will got to TCPS_LAST_ACK, and use tcp_output()

			 * to send the FIN.

			 */</comment>

			<expr_stmt pos:start="1969:25" pos:end="1969:38"><expr pos:start="1969:25" pos:end="1969:37"><call pos:start="1969:25" pos:end="1969:37"><name pos:start="1969:25" pos:end="1969:33">sofwdrain</name><argument_list pos:start="1969:34" pos:end="1969:37">(<argument pos:start="1969:35" pos:end="1969:36"><expr pos:start="1969:35" pos:end="1969:36"><name pos:start="1969:35" pos:end="1969:36">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



			<expr_stmt pos:start="1973:25" pos:end="1973:49"><expr pos:start="1973:25" pos:end="1973:48"><name pos:start="1973:25" pos:end="1973:35"><name pos:start="1973:25" pos:end="1973:26">tp</name><operator pos:start="1973:27" pos:end="1973:28">-&gt;</operator><name pos:start="1973:29" pos:end="1973:35">t_flags</name></name> <operator pos:start="1973:37" pos:end="1973:38">|=</operator> <name pos:start="1973:40" pos:end="1973:48">TF_ACKNOW</name></expr>;</expr_stmt>

			<expr_stmt pos:start="1975:25" pos:end="1975:38"><expr pos:start="1975:25" pos:end="1975:37"><name pos:start="1975:25" pos:end="1975:35"><name pos:start="1975:25" pos:end="1975:26">tp</name><operator pos:start="1975:27" pos:end="1975:28">-&gt;</operator><name pos:start="1975:29" pos:end="1975:35">rcv_nxt</name></name><operator pos:start="1975:36" pos:end="1975:37">++</operator></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

		<switch pos:start="1979:17" pos:end="2057:17">switch <condition pos:start="1979:24" pos:end="1979:36">(<expr pos:start="1979:25" pos:end="1979:35"><name pos:start="1979:25" pos:end="1979:35"><name pos:start="1979:25" pos:end="1979:26">tp</name><operator pos:start="1979:27" pos:end="1979:28">-&gt;</operator><name pos:start="1979:29" pos:end="1979:35">t_state</name></name></expr>)</condition> <block pos:start="1979:38" pos:end="2057:17">{<block_content pos:start="1991:17" pos:end="2055:30">



	 	<comment type="block" pos:start="1983:17" pos:end="1989:19">/*

		 * In SYN_RECEIVED and ESTABLISHED STATES

		 * enter the CLOSE_WAIT state.

		 */</comment>

		<case pos:start="1991:17" pos:end="1991:39">case <expr pos:start="1991:22" pos:end="1991:38"><name pos:start="1991:22" pos:end="1991:38">TCPS_SYN_RECEIVED</name></expr>:</case>

		<case pos:start="1993:17" pos:end="1993:38">case <expr pos:start="1993:22" pos:end="1993:37"><name pos:start="1993:22" pos:end="1993:37">TCPS_ESTABLISHED</name></expr>:</case>

		  <if_stmt pos:start="1995:19" pos:end="2001:50"><if pos:start="1995:19" pos:end="1997:48">if<condition pos:start="1995:21" pos:end="1995:43">(<expr pos:start="1995:22" pos:end="1995:42"><name pos:start="1995:22" pos:end="1995:31"><name pos:start="1995:22" pos:end="1995:23">so</name><operator pos:start="1995:24" pos:end="1995:25">-&gt;</operator><name pos:start="1995:26" pos:end="1995:31">so_emu</name></name> <operator pos:start="1995:33" pos:end="1995:34">==</operator> <name pos:start="1995:36" pos:end="1995:42">EMU_CTL</name></expr>)</condition><block type="pseudo" pos:start="1997:21" pos:end="1997:48"><block_content pos:start="1997:21" pos:end="1997:48">        <comment type="block" pos:start="1995:52" pos:end="1995:78">/* no shutdown on socket */</comment>

		    <expr_stmt pos:start="1997:21" pos:end="1997:48"><expr pos:start="1997:21" pos:end="1997:47"><name pos:start="1997:21" pos:end="1997:31"><name pos:start="1997:21" pos:end="1997:22">tp</name><operator pos:start="1997:23" pos:end="1997:24">-&gt;</operator><name pos:start="1997:25" pos:end="1997:31">t_state</name></name> <operator pos:start="1997:33" pos:end="1997:33">=</operator> <name pos:start="1997:35" pos:end="1997:47">TCPS_LAST_ACK</name></expr>;</expr_stmt></block_content></block></if>

		  <else pos:start="1999:19" pos:end="2001:50">else<block type="pseudo" pos:start="2001:21" pos:end="2001:50"><block_content pos:start="2001:21" pos:end="2001:50">

		    <expr_stmt pos:start="2001:21" pos:end="2001:50"><expr pos:start="2001:21" pos:end="2001:49"><name pos:start="2001:21" pos:end="2001:31"><name pos:start="2001:21" pos:end="2001:22">tp</name><operator pos:start="2001:23" pos:end="2001:24">-&gt;</operator><name pos:start="2001:25" pos:end="2001:31">t_state</name></name> <operator pos:start="2001:33" pos:end="2001:33">=</operator> <name pos:start="2001:35" pos:end="2001:49">TCPS_CLOSE_WAIT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		  <break pos:start="2003:19" pos:end="2003:24">break;</break>



	 	<comment type="block" pos:start="2007:17" pos:end="2013:19">/*

		 * If still in FIN_WAIT_1 STATE FIN has not been acked so

		 * enter the CLOSING state.

		 */</comment>

		<case pos:start="2015:17" pos:end="2015:37">case <expr pos:start="2015:22" pos:end="2015:36"><name pos:start="2015:22" pos:end="2015:36">TCPS_FIN_WAIT_1</name></expr>:</case>

			<expr_stmt pos:start="2017:25" pos:end="2017:51"><expr pos:start="2017:25" pos:end="2017:50"><name pos:start="2017:25" pos:end="2017:35"><name pos:start="2017:25" pos:end="2017:26">tp</name><operator pos:start="2017:27" pos:end="2017:28">-&gt;</operator><name pos:start="2017:29" pos:end="2017:35">t_state</name></name> <operator pos:start="2017:37" pos:end="2017:37">=</operator> <name pos:start="2017:39" pos:end="2017:50">TCPS_CLOSING</name></expr>;</expr_stmt>

			<break pos:start="2019:25" pos:end="2019:30">break;</break>



	 	<comment type="block" pos:start="2023:17" pos:end="2031:19">/*

		 * In FIN_WAIT_2 state enter the TIME_WAIT state,

		 * starting the time-wait timer, turning off the other

		 * standard timers.

		 */</comment>

		<case pos:start="2033:17" pos:end="2033:37">case <expr pos:start="2033:22" pos:end="2033:36"><name pos:start="2033:22" pos:end="2033:36">TCPS_FIN_WAIT_2</name></expr>:</case>

			<expr_stmt pos:start="2035:25" pos:end="2035:53"><expr pos:start="2035:25" pos:end="2035:52"><name pos:start="2035:25" pos:end="2035:35"><name pos:start="2035:25" pos:end="2035:26">tp</name><operator pos:start="2035:27" pos:end="2035:28">-&gt;</operator><name pos:start="2035:29" pos:end="2035:35">t_state</name></name> <operator pos:start="2035:37" pos:end="2035:37">=</operator> <name pos:start="2035:39" pos:end="2035:52">TCPS_TIME_WAIT</name></expr>;</expr_stmt>

			<expr_stmt pos:start="2037:25" pos:end="2037:45"><expr pos:start="2037:25" pos:end="2037:44"><call pos:start="2037:25" pos:end="2037:44"><name pos:start="2037:25" pos:end="2037:40">tcp_canceltimers</name><argument_list pos:start="2037:41" pos:end="2037:44">(<argument pos:start="2037:42" pos:end="2037:43"><expr pos:start="2037:42" pos:end="2037:43"><name pos:start="2037:42" pos:end="2037:43">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="2039:25" pos:end="2039:63"><expr pos:start="2039:25" pos:end="2039:62"><name pos:start="2039:25" pos:end="2039:46"><name pos:start="2039:25" pos:end="2039:26">tp</name><operator pos:start="2039:27" pos:end="2039:28">-&gt;</operator><name pos:start="2039:29" pos:end="2039:35">t_timer</name><index pos:start="2039:36" pos:end="2039:46">[<expr pos:start="2039:37" pos:end="2039:45"><name pos:start="2039:37" pos:end="2039:45">TCPT_2MSL</name></expr>]</index></name> <operator pos:start="2039:48" pos:end="2039:48">=</operator> <literal type="number" pos:start="2039:50" pos:end="2039:50">2</literal> <operator pos:start="2039:52" pos:end="2039:52">*</operator> <name pos:start="2039:54" pos:end="2039:62">TCPTV_MSL</name></expr>;</expr_stmt>

			<break pos:start="2041:25" pos:end="2041:30">break;</break>



		<comment type="block" pos:start="2045:17" pos:end="2049:19">/*

		 * In TIME_WAIT state restart the 2 MSL time_wait timer.

		 */</comment>

		<case pos:start="2051:17" pos:end="2051:36">case <expr pos:start="2051:22" pos:end="2051:35"><name pos:start="2051:22" pos:end="2051:35">TCPS_TIME_WAIT</name></expr>:</case>

			<expr_stmt pos:start="2053:25" pos:end="2053:63"><expr pos:start="2053:25" pos:end="2053:62"><name pos:start="2053:25" pos:end="2053:46"><name pos:start="2053:25" pos:end="2053:26">tp</name><operator pos:start="2053:27" pos:end="2053:28">-&gt;</operator><name pos:start="2053:29" pos:end="2053:35">t_timer</name><index pos:start="2053:36" pos:end="2053:46">[<expr pos:start="2053:37" pos:end="2053:45"><name pos:start="2053:37" pos:end="2053:45">TCPT_2MSL</name></expr>]</index></name> <operator pos:start="2053:48" pos:end="2053:48">=</operator> <literal type="number" pos:start="2053:50" pos:end="2053:50">2</literal> <operator pos:start="2053:52" pos:end="2053:52">*</operator> <name pos:start="2053:54" pos:end="2053:62">TCPTV_MSL</name></expr>;</expr_stmt>

			<break pos:start="2055:25" pos:end="2055:30">break;</break>

		</block_content>}</block></switch>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="2063:9" pos:end="2067:11">/*

	 * Return any desired output.

	 */</comment>

	<if_stmt pos:start="2069:9" pos:end="2073:9"><if pos:start="2069:9" pos:end="2073:9">if <condition pos:start="2069:12" pos:end="2069:52">(<expr pos:start="2069:13" pos:end="2069:51"><name pos:start="2069:13" pos:end="2069:22">needoutput</name> <operator pos:start="2069:24" pos:end="2069:25">||</operator> <operator pos:start="2069:27" pos:end="2069:27">(</operator><name pos:start="2069:28" pos:end="2069:38"><name pos:start="2069:28" pos:end="2069:29">tp</name><operator pos:start="2069:30" pos:end="2069:31">-&gt;</operator><name pos:start="2069:32" pos:end="2069:38">t_flags</name></name> <operator pos:start="2069:40" pos:end="2069:40">&amp;</operator> <name pos:start="2069:42" pos:end="2069:50">TF_ACKNOW</name><operator pos:start="2069:51" pos:end="2069:51">)</operator></expr>)</condition> <block pos:start="2069:54" pos:end="2073:9">{<block_content pos:start="2071:17" pos:end="2071:38">

		<expr_stmt pos:start="2071:17" pos:end="2071:38"><expr pos:start="2071:17" pos:end="2071:37"><operator pos:start="2071:17" pos:end="2071:17">(</operator><name pos:start="2071:18" pos:end="2071:21">void</name><operator pos:start="2071:22" pos:end="2071:22">)</operator> <call pos:start="2071:24" pos:end="2071:37"><name pos:start="2071:24" pos:end="2071:33">tcp_output</name><argument_list pos:start="2071:34" pos:end="2071:37">(<argument pos:start="2071:35" pos:end="2071:36"><expr pos:start="2071:35" pos:end="2071:36"><name pos:start="2071:35" pos:end="2071:36">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<return pos:start="2075:9" pos:end="2075:15">return;</return>



<label pos:start="2079:1" pos:end="2079:13"><name pos:start="2079:1" pos:end="2079:12">dropafterack</name>:</label>

	<comment type="block" pos:start="2081:9" pos:end="2087:11">/*

	 * Generate an ACK dropping incoming segment if it occupies

	 * sequence space, where the ACK reflects our state.

	 */</comment>

	<if_stmt pos:start="2089:9" pos:end="2091:26"><if pos:start="2089:9" pos:end="2091:26">if <condition pos:start="2089:12" pos:end="2089:29">(<expr pos:start="2089:13" pos:end="2089:28"><name pos:start="2089:13" pos:end="2089:19">tiflags</name> <operator pos:start="2089:21" pos:end="2089:21">&amp;</operator> <name pos:start="2089:23" pos:end="2089:28">TH_RST</name></expr>)</condition><block type="pseudo" pos:start="2091:17" pos:end="2091:26"><block_content pos:start="2091:17" pos:end="2091:26">

		<goto pos:start="2091:17" pos:end="2091:26">goto <name pos:start="2091:22" pos:end="2091:25">drop</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt pos:start="2093:9" pos:end="2093:18"><expr pos:start="2093:9" pos:end="2093:17"><call pos:start="2093:9" pos:end="2093:17"><name pos:start="2093:9" pos:end="2093:14">m_free</name><argument_list pos:start="2093:15" pos:end="2093:17">(<argument pos:start="2093:16" pos:end="2093:16"><expr pos:start="2093:16" pos:end="2093:16"><name pos:start="2093:16" pos:end="2093:16">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="2095:9" pos:end="2095:33"><expr pos:start="2095:9" pos:end="2095:32"><name pos:start="2095:9" pos:end="2095:19"><name pos:start="2095:9" pos:end="2095:10">tp</name><operator pos:start="2095:11" pos:end="2095:12">-&gt;</operator><name pos:start="2095:13" pos:end="2095:19">t_flags</name></name> <operator pos:start="2095:21" pos:end="2095:22">|=</operator> <name pos:start="2095:24" pos:end="2095:32">TF_ACKNOW</name></expr>;</expr_stmt>

	<expr_stmt pos:start="2097:9" pos:end="2097:30"><expr pos:start="2097:9" pos:end="2097:29"><operator pos:start="2097:9" pos:end="2097:9">(</operator><name pos:start="2097:10" pos:end="2097:13">void</name><operator pos:start="2097:14" pos:end="2097:14">)</operator> <call pos:start="2097:16" pos:end="2097:29"><name pos:start="2097:16" pos:end="2097:25">tcp_output</name><argument_list pos:start="2097:26" pos:end="2097:29">(<argument pos:start="2097:27" pos:end="2097:28"><expr pos:start="2097:27" pos:end="2097:28"><name pos:start="2097:27" pos:end="2097:28">tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="2099:9" pos:end="2099:15">return;</return>



<label pos:start="2103:1" pos:end="2103:14"><name pos:start="2103:1" pos:end="2103:13">dropwithreset</name>:</label>

	<comment type="block" pos:start="2105:9" pos:end="2105:55">/* reuses m if m!=NULL, m_free() unnecessary */</comment>

	<if_stmt pos:start="2107:9" pos:end="2119:9"><if pos:start="2107:9" pos:end="2109:71">if <condition pos:start="2107:12" pos:end="2107:29">(<expr pos:start="2107:13" pos:end="2107:28"><name pos:start="2107:13" pos:end="2107:19">tiflags</name> <operator pos:start="2107:21" pos:end="2107:21">&amp;</operator> <name pos:start="2107:23" pos:end="2107:28">TH_ACK</name></expr>)</condition><block type="pseudo" pos:start="2109:17" pos:end="2109:71"><block_content pos:start="2109:17" pos:end="2109:71">

		<expr_stmt pos:start="2109:17" pos:end="2109:71"><expr pos:start="2109:17" pos:end="2109:70"><call pos:start="2109:17" pos:end="2109:70"><name pos:start="2109:17" pos:end="2109:27">tcp_respond</name><argument_list pos:start="2109:28" pos:end="2109:70">(<argument pos:start="2109:29" pos:end="2109:30"><expr pos:start="2109:29" pos:end="2109:30"><name pos:start="2109:29" pos:end="2109:30">tp</name></expr></argument>, <argument pos:start="2109:33" pos:end="2109:34"><expr pos:start="2109:33" pos:end="2109:34"><name pos:start="2109:33" pos:end="2109:34">ti</name></expr></argument>, <argument pos:start="2109:37" pos:end="2109:37"><expr pos:start="2109:37" pos:end="2109:37"><name pos:start="2109:37" pos:end="2109:37">m</name></expr></argument>, <argument pos:start="2109:40" pos:end="2109:49"><expr pos:start="2109:40" pos:end="2109:49"><operator pos:start="2109:40" pos:end="2109:40">(</operator><name pos:start="2109:41" pos:end="2109:47">tcp_seq</name><operator pos:start="2109:48" pos:end="2109:48">)</operator><literal type="number" pos:start="2109:49" pos:end="2109:49">0</literal></expr></argument>, <argument pos:start="2109:52" pos:end="2109:61"><expr pos:start="2109:52" pos:end="2109:61"><name pos:start="2109:52" pos:end="2109:61"><name pos:start="2109:52" pos:end="2109:53">ti</name><operator pos:start="2109:54" pos:end="2109:55">-&gt;</operator><name pos:start="2109:56" pos:end="2109:61">ti_ack</name></name></expr></argument>, <argument pos:start="2109:64" pos:end="2109:69"><expr pos:start="2109:64" pos:end="2109:69"><name pos:start="2109:64" pos:end="2109:69">TH_RST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="2111:9" pos:end="2119:9">else <block pos:start="2111:14" pos:end="2119:9">{<block_content pos:start="2113:17" pos:end="2117:35">

		<if_stmt pos:start="2113:17" pos:end="2113:51"><if pos:start="2113:17" pos:end="2113:51">if <condition pos:start="2113:20" pos:end="2113:37">(<expr pos:start="2113:21" pos:end="2113:36"><name pos:start="2113:21" pos:end="2113:27">tiflags</name> <operator pos:start="2113:29" pos:end="2113:29">&amp;</operator> <name pos:start="2113:31" pos:end="2113:36">TH_SYN</name></expr>)</condition><block type="pseudo" pos:start="2113:39" pos:end="2113:51"><block_content pos:start="2113:39" pos:end="2113:51"> <expr_stmt pos:start="2113:39" pos:end="2113:51"><expr pos:start="2113:39" pos:end="2113:50"><name pos:start="2113:39" pos:end="2113:48"><name pos:start="2113:39" pos:end="2113:40">ti</name><operator pos:start="2113:41" pos:end="2113:42">-&gt;</operator><name pos:start="2113:43" pos:end="2113:48">ti_len</name></name><operator pos:start="2113:49" pos:end="2113:50">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt pos:start="2115:17" pos:end="2117:35"><expr pos:start="2115:17" pos:end="2117:34"><call pos:start="2115:17" pos:end="2117:34"><name pos:start="2115:17" pos:end="2115:27">tcp_respond</name><argument_list pos:start="2115:28" pos:end="2117:34">(<argument pos:start="2115:29" pos:end="2115:30"><expr pos:start="2115:29" pos:end="2115:30"><name pos:start="2115:29" pos:end="2115:30">tp</name></expr></argument>, <argument pos:start="2115:33" pos:end="2115:34"><expr pos:start="2115:33" pos:end="2115:34"><name pos:start="2115:33" pos:end="2115:34">ti</name></expr></argument>, <argument pos:start="2115:37" pos:end="2115:37"><expr pos:start="2115:37" pos:end="2115:37"><name pos:start="2115:37" pos:end="2115:37">m</name></expr></argument>, <argument pos:start="2115:40" pos:end="2115:60"><expr pos:start="2115:40" pos:end="2115:60"><name pos:start="2115:40" pos:end="2115:49"><name pos:start="2115:40" pos:end="2115:41">ti</name><operator pos:start="2115:42" pos:end="2115:43">-&gt;</operator><name pos:start="2115:44" pos:end="2115:49">ti_seq</name></name><operator pos:start="2115:50" pos:end="2115:50">+</operator><name pos:start="2115:51" pos:end="2115:60"><name pos:start="2115:51" pos:end="2115:52">ti</name><operator pos:start="2115:53" pos:end="2115:54">-&gt;</operator><name pos:start="2115:55" pos:end="2115:60">ti_len</name></name></expr></argument>, <argument pos:start="2115:63" pos:end="2115:72"><expr pos:start="2115:63" pos:end="2115:72"><operator pos:start="2115:63" pos:end="2115:63">(</operator><name pos:start="2115:64" pos:end="2115:70">tcp_seq</name><operator pos:start="2115:71" pos:end="2115:71">)</operator><literal type="number" pos:start="2115:72" pos:end="2115:72">0</literal></expr></argument>,

		    <argument pos:start="2117:21" pos:end="2117:33"><expr pos:start="2117:21" pos:end="2117:33"><name pos:start="2117:21" pos:end="2117:26">TH_RST</name><operator pos:start="2117:27" pos:end="2117:27">|</operator><name pos:start="2117:28" pos:end="2117:33">TH_ACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>



	<return pos:start="2123:9" pos:end="2123:15">return;</return>



<label pos:start="2127:1" pos:end="2127:5"><name pos:start="2127:1" pos:end="2127:4">drop</name>:</label>

	<comment type="block" pos:start="2129:9" pos:end="2133:11">/*

	 * Drop space held by incoming segment and return.

	 */</comment>

	<expr_stmt pos:start="2135:9" pos:end="2135:18"><expr pos:start="2135:9" pos:end="2135:17"><call pos:start="2135:9" pos:end="2135:17"><name pos:start="2135:9" pos:end="2135:14">m_free</name><argument_list pos:start="2135:15" pos:end="2135:17">(<argument pos:start="2135:16" pos:end="2135:16"><expr pos:start="2135:16" pos:end="2135:16"><name pos:start="2135:16" pos:end="2135:16">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
