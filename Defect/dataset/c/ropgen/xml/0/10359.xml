<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10359.c" pos:tabs="8"><function pos:start="1:1" pos:end="329:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:12">kvm_init</name><parameter_list pos:start="1:13" pos:end="1:18">(<parameter pos:start="1:14" pos:end="1:17"><decl pos:start="1:14" pos:end="1:17"><type pos:start="1:14" pos:end="1:17"><name pos:start="1:14" pos:end="1:17">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="329:1">{<block_content pos:start="5:5" pos:end="327:15">

    <decl_stmt pos:start="5:5" pos:end="9:55"><decl pos:start="5:5" pos:end="9:54"><type pos:start="5:5" pos:end="5:21"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:21">char</name></type> <name pos:start="5:23" pos:end="5:36"><name pos:start="5:23" pos:end="5:34">upgrade_note</name><index pos:start="5:35" pos:end="5:36">[]</index></name> <init pos:start="5:38" pos:end="9:54">=

        <expr pos:start="7:9" pos:end="9:54"><literal type="string" pos:start="7:9" pos:end="7:71">"Please upgrade to at least kernel 2.6.29 or recent kvm-kmod\n"</literal>

        <literal type="string" pos:start="9:9" pos:end="9:54">"(see http://sourceforge.net/projects/kvm).\n"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">KVMState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:15">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:29"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:27">KVMCapabilityInfo</name> <modifier pos:start="13:29" pos:end="13:29">*</modifier></type><name pos:start="13:30" pos:end="13:40">missing_cap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:10"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">max_vcpus</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:36"><expr pos:start="23:5" pos:end="23:35"><name pos:start="23:5" pos:end="23:5">s</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <call pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:17">g_malloc0</name><argument_list pos:start="23:18" pos:end="23:35">(<argument pos:start="23:19" pos:end="23:34"><expr pos:start="23:19" pos:end="23:34"><sizeof pos:start="23:19" pos:end="23:34">sizeof<argument_list pos:start="23:25" pos:end="23:34">(<argument pos:start="23:26" pos:end="23:33"><expr pos:start="23:26" pos:end="23:33"><name pos:start="23:26" pos:end="23:33">KVMState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="37:7">/*

     * On systems where the kernel can support different base page

     * sizes, host page size may be different from TARGET_PAGE_SIZE,

     * even with KVM.  TARGET_PAGE_SIZE is assumed to be the minimum

     * page size for the system though.

     */</comment>

    <expr_stmt pos:start="39:5" pos:end="44:0"><expr pos:start="39:5" pos:end="39:45"><call pos:start="39:5" pos:end="39:45"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:45">(<argument pos:start="39:12" pos:end="39:44"><expr pos:start="39:12" pos:end="39:44"><name pos:start="39:12" pos:end="39:27">TARGET_PAGE_SIZE</name> <operator pos:start="39:29" pos:end="39:30">&lt;=</operator> <call pos:start="39:32" pos:end="39:44"><name pos:start="39:32" pos:end="39:42">getpagesize</name><argument_list pos:start="39:43" pos:end="39:44">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="43:1" pos:end="43:30">#<cpp:directive pos:start="43:2" pos:end="43:6">ifdef</cpp:directive> <name pos:start="43:8" pos:end="43:30">KVM_CAP_SET_GUEST_DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="45:5" pos:end="48:0"><expr pos:start="45:5" pos:end="45:39"><call pos:start="45:5" pos:end="45:39"><name pos:start="45:5" pos:end="45:15">QTAILQ_INIT</name><argument_list pos:start="45:16" pos:end="45:39">(<argument pos:start="45:17" pos:end="45:38"><expr pos:start="45:17" pos:end="45:38"><operator pos:start="45:17" pos:end="45:17">&amp;</operator><name pos:start="45:18" pos:end="45:38"><name pos:start="45:18" pos:end="45:18">s</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:38">kvm_sw_breakpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="47:1" pos:end="47:6">#<cpp:directive pos:start="47:2" pos:end="47:6">endif</cpp:directive></cpp:endif>

    <for pos:start="49:5" pos:end="53:5">for <control pos:start="49:9" pos:end="49:46">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:41"><expr pos:start="49:17" pos:end="49:40"><name pos:start="49:17" pos:end="49:17">i</name> <operator pos:start="49:19" pos:end="49:19">&lt;</operator> <call pos:start="49:21" pos:end="49:40"><name pos:start="49:21" pos:end="49:30">ARRAY_SIZE</name><argument_list pos:start="49:31" pos:end="49:40">(<argument pos:start="49:32" pos:end="49:39"><expr pos:start="49:32" pos:end="49:39"><name pos:start="49:32" pos:end="49:39"><name pos:start="49:32" pos:end="49:32">s</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:39">slots</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="49:43" pos:end="49:45"><expr pos:start="49:43" pos:end="49:45"><name pos:start="49:43" pos:end="49:43">i</name><operator pos:start="49:44" pos:end="49:45">++</operator></expr></incr>)</control> <block pos:start="49:48" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:29">

        <expr_stmt pos:start="51:9" pos:end="51:29"><expr pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:19"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:16">slots</name><index pos:start="51:17" pos:end="51:19">[<expr pos:start="51:18" pos:end="51:18"><name pos:start="51:18" pos:end="51:18">i</name></expr>]</index></name><operator pos:start="51:20" pos:end="51:20">.</operator><name pos:start="51:21" pos:end="51:24">slot</name> <operator pos:start="51:26" pos:end="51:26">=</operator> <name pos:start="51:28" pos:end="51:28">i</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="55:5" pos:end="55:17"><expr pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:11"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:11">vmfd</name></name> <operator pos:start="55:13" pos:end="55:13">=</operator> <operator pos:start="55:15" pos:end="55:15">-</operator><literal type="number" pos:start="55:16" pos:end="55:16">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:42"><expr pos:start="57:5" pos:end="57:41"><name pos:start="57:5" pos:end="57:9"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:9">fd</name></name> <operator pos:start="57:11" pos:end="57:11">=</operator> <call pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:21">qemu_open</name><argument_list pos:start="57:22" pos:end="57:41">(<argument pos:start="57:23" pos:end="57:32"><expr pos:start="57:23" pos:end="57:32"><literal type="string" pos:start="57:23" pos:end="57:32">"/dev/kvm"</literal></expr></argument>, <argument pos:start="57:35" pos:end="57:40"><expr pos:start="57:35" pos:end="57:40"><name pos:start="57:35" pos:end="57:40">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:20">(<expr pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:13"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:13">fd</name></name> <operator pos:start="59:15" pos:end="59:16">==</operator> <operator pos:start="59:18" pos:end="59:18">-</operator><literal type="number" pos:start="59:19" pos:end="59:19">1</literal></expr>)</condition> <block pos:start="59:22" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:17">

        <expr_stmt pos:start="61:9" pos:end="61:68"><expr pos:start="61:9" pos:end="61:67"><call pos:start="61:9" pos:end="61:67"><name pos:start="61:9" pos:end="61:15">fprintf</name><argument_list pos:start="61:16" pos:end="61:67">(<argument pos:start="61:17" pos:end="61:22"><expr pos:start="61:17" pos:end="61:22"><name pos:start="61:17" pos:end="61:22">stderr</name></expr></argument>, <argument pos:start="61:25" pos:end="61:66"><expr pos:start="61:25" pos:end="61:66"><literal type="string" pos:start="61:25" pos:end="61:66">"Could not access KVM kernel module: %m\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:21"><expr pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <operator pos:start="63:15" pos:end="63:15">-</operator><name pos:start="63:16" pos:end="63:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="65:9" pos:end="65:17">goto <name pos:start="65:14" pos:end="65:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:47"><expr pos:start="71:5" pos:end="71:46"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:46"><name pos:start="71:11" pos:end="71:19">kvm_ioctl</name><argument_list pos:start="71:20" pos:end="71:46">(<argument pos:start="71:21" pos:end="71:21"><expr pos:start="71:21" pos:end="71:21"><name pos:start="71:21" pos:end="71:21">s</name></expr></argument>, <argument pos:start="71:24" pos:end="71:42"><expr pos:start="71:24" pos:end="71:42"><name pos:start="71:24" pos:end="71:42">KVM_GET_API_VERSION</name></expr></argument>, <argument pos:start="71:45" pos:end="71:45"><expr pos:start="71:45" pos:end="71:45"><literal type="number" pos:start="71:45" pos:end="71:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="85:5"><if pos:start="73:5" pos:end="85:5">if <condition pos:start="73:8" pos:end="73:30">(<expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">&lt;</operator> <name pos:start="73:15" pos:end="73:29">KVM_API_VERSION</name></expr>)</condition> <block pos:start="73:32" pos:end="85:5">{<block_content pos:start="75:9" pos:end="83:17">

        <if_stmt pos:start="75:9" pos:end="79:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:20">(<expr pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:15">ret</name> <operator pos:start="75:17" pos:end="75:17">&gt;</operator> <literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>)</condition> <block pos:start="75:22" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:26">

            <expr_stmt pos:start="77:13" pos:end="77:26"><expr pos:start="77:13" pos:end="77:25"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <operator pos:start="77:19" pos:end="77:19">-</operator><name pos:start="77:20" pos:end="77:25">EINVAL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:49"><expr pos:start="81:9" pos:end="81:48"><call pos:start="81:9" pos:end="81:48"><name pos:start="81:9" pos:end="81:15">fprintf</name><argument_list pos:start="81:16" pos:end="81:48">(<argument pos:start="81:17" pos:end="81:22"><expr pos:start="81:17" pos:end="81:22"><name pos:start="81:17" pos:end="81:22">stderr</name></expr></argument>, <argument pos:start="81:25" pos:end="81:47"><expr pos:start="81:25" pos:end="81:47"><literal type="string" pos:start="81:25" pos:end="81:47">"kvm version too old\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="83:9" pos:end="83:17">goto <name pos:start="83:14" pos:end="83:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="89:30">(<expr pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">&gt;</operator> <name pos:start="89:15" pos:end="89:29">KVM_API_VERSION</name></expr>)</condition> <block pos:start="89:32" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:17">

        <expr_stmt pos:start="91:9" pos:end="91:22"><expr pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:11">ret</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <operator pos:start="91:15" pos:end="91:15">-</operator><name pos:start="91:16" pos:end="91:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:55"><expr pos:start="93:9" pos:end="93:54"><call pos:start="93:9" pos:end="93:54"><name pos:start="93:9" pos:end="93:15">fprintf</name><argument_list pos:start="93:16" pos:end="93:54">(<argument pos:start="93:17" pos:end="93:22"><expr pos:start="93:17" pos:end="93:22"><name pos:start="93:17" pos:end="93:22">stderr</name></expr></argument>, <argument pos:start="93:25" pos:end="93:53"><expr pos:start="93:25" pos:end="93:53"><literal type="string" pos:start="93:25" pos:end="93:53">"kvm version not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:17">goto <name pos:start="95:14" pos:end="95:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:33"><expr pos:start="101:5" pos:end="101:32"><name pos:start="101:5" pos:end="101:13">max_vcpus</name> <operator pos:start="101:15" pos:end="101:15">=</operator> <call pos:start="101:17" pos:end="101:32"><name pos:start="101:17" pos:end="101:29">kvm_max_vcpus</name><argument_list pos:start="101:30" pos:end="101:32">(<argument pos:start="101:31" pos:end="101:31"><expr pos:start="101:31" pos:end="101:31"><name pos:start="101:31" pos:end="101:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="113:5"><if pos:start="103:5" pos:end="113:5">if <condition pos:start="103:8" pos:end="103:29">(<expr pos:start="103:9" pos:end="103:28"><name pos:start="103:9" pos:end="103:16">smp_cpus</name> <operator pos:start="103:18" pos:end="103:18">&gt;</operator> <name pos:start="103:20" pos:end="103:28">max_vcpus</name></expr>)</condition> <block pos:start="103:31" pos:end="113:5">{<block_content pos:start="105:9" pos:end="111:17">

        <expr_stmt pos:start="105:9" pos:end="105:22"><expr pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <operator pos:start="105:15" pos:end="105:15">-</operator><name pos:start="105:16" pos:end="105:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="109:64"><expr pos:start="107:9" pos:end="109:63"><call pos:start="107:9" pos:end="109:63"><name pos:start="107:9" pos:end="107:15">fprintf</name><argument_list pos:start="107:16" pos:end="109:63">(<argument pos:start="107:17" pos:end="107:22"><expr pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:22">stderr</name></expr></argument>, <argument pos:start="107:25" pos:end="109:41"><expr pos:start="107:25" pos:end="109:41"><literal type="string" pos:start="107:25" pos:end="107:77">"Number of SMP cpus requested (%d) exceeds max cpus "</literal>

                <literal type="string" pos:start="109:17" pos:end="109:41">"supported by KVM (%d)\n"</literal></expr></argument>, <argument pos:start="109:44" pos:end="109:51"><expr pos:start="109:44" pos:end="109:51"><name pos:start="109:44" pos:end="109:51">smp_cpus</name></expr></argument>, <argument pos:start="109:54" pos:end="109:62"><expr pos:start="109:54" pos:end="109:62"><name pos:start="109:54" pos:end="109:62">max_vcpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="111:9" pos:end="111:17">goto <name pos:start="111:14" pos:end="111:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="117:5" pos:end="127:5"><if pos:start="117:5" pos:end="127:5">if <condition pos:start="117:8" pos:end="117:29">(<expr pos:start="117:9" pos:end="117:28"><name pos:start="117:9" pos:end="117:16">max_cpus</name> <operator pos:start="117:18" pos:end="117:18">&gt;</operator> <name pos:start="117:20" pos:end="117:28">max_vcpus</name></expr>)</condition> <block pos:start="117:31" pos:end="127:5">{<block_content pos:start="119:9" pos:end="125:17">

        <expr_stmt pos:start="119:9" pos:end="119:22"><expr pos:start="119:9" pos:end="119:21"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <operator pos:start="119:15" pos:end="119:15">-</operator><name pos:start="119:16" pos:end="119:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="123:64"><expr pos:start="121:9" pos:end="123:63"><call pos:start="121:9" pos:end="123:63"><name pos:start="121:9" pos:end="121:15">fprintf</name><argument_list pos:start="121:16" pos:end="123:63">(<argument pos:start="121:17" pos:end="121:22"><expr pos:start="121:17" pos:end="121:22"><name pos:start="121:17" pos:end="121:22">stderr</name></expr></argument>, <argument pos:start="121:25" pos:end="123:41"><expr pos:start="121:25" pos:end="123:41"><literal type="string" pos:start="121:25" pos:end="121:86">"Number of hotpluggable cpus requested (%d) exceeds max cpus "</literal>

                <literal type="string" pos:start="123:17" pos:end="123:41">"supported by KVM (%d)\n"</literal></expr></argument>, <argument pos:start="123:44" pos:end="123:51"><expr pos:start="123:44" pos:end="123:51"><name pos:start="123:44" pos:end="123:51">max_cpus</name></expr></argument>, <argument pos:start="123:54" pos:end="123:62"><expr pos:start="123:54" pos:end="123:62"><name pos:start="123:54" pos:end="123:62">max_vcpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="125:9" pos:end="125:17">goto <name pos:start="125:14" pos:end="125:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:45"><expr pos:start="131:5" pos:end="131:44"><name pos:start="131:5" pos:end="131:11"><name pos:start="131:5" pos:end="131:5">s</name><operator pos:start="131:6" pos:end="131:7">-&gt;</operator><name pos:start="131:8" pos:end="131:11">vmfd</name></name> <operator pos:start="131:13" pos:end="131:13">=</operator> <call pos:start="131:15" pos:end="131:44"><name pos:start="131:15" pos:end="131:23">kvm_ioctl</name><argument_list pos:start="131:24" pos:end="131:44">(<argument pos:start="131:25" pos:end="131:25"><expr pos:start="131:25" pos:end="131:25"><name pos:start="131:25" pos:end="131:25">s</name></expr></argument>, <argument pos:start="131:28" pos:end="131:40"><expr pos:start="131:28" pos:end="131:40"><name pos:start="131:28" pos:end="131:40">KVM_CREATE_VM</name></expr></argument>, <argument pos:start="131:43" pos:end="131:43"><expr pos:start="131:43" pos:end="131:43"><literal type="number" pos:start="131:43" pos:end="131:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="147:5"><if pos:start="133:5" pos:end="147:5">if <condition pos:start="133:8" pos:end="133:20">(<expr pos:start="133:9" pos:end="133:19"><name pos:start="133:9" pos:end="133:15"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:15">vmfd</name></name> <operator pos:start="133:17" pos:end="133:17">&lt;</operator> <literal type="number" pos:start="133:19" pos:end="133:19">0</literal></expr>)</condition> <block pos:start="133:22" pos:end="147:5">{<block_content pos:start="137:9" pos:end="145:17">

<cpp:ifdef pos:start="135:1" pos:end="135:19">#<cpp:directive pos:start="135:2" pos:end="135:6">ifdef</cpp:directive> <name pos:start="135:8" pos:end="135:19">TARGET_S390X</name></cpp:ifdef>

        <expr_stmt pos:start="137:9" pos:end="142:0"><expr pos:start="137:9" pos:end="139:58"><call pos:start="137:9" pos:end="139:58"><name pos:start="137:9" pos:end="137:15">fprintf</name><argument_list pos:start="137:16" pos:end="139:58">(<argument pos:start="137:17" pos:end="137:22"><expr pos:start="137:17" pos:end="137:22"><name pos:start="137:17" pos:end="137:22">stderr</name></expr></argument>, <argument pos:start="137:25" pos:end="139:57"><expr pos:start="137:25" pos:end="139:57"><literal type="string" pos:start="137:25" pos:end="137:76">"Please add the 'switch_amode' kernel parameter to "</literal>

                        <literal type="string" pos:start="139:25" pos:end="139:57">"your host kernel command line\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="143:9" pos:end="143:22"><expr pos:start="143:9" pos:end="143:21"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <name pos:start="143:15" pos:end="143:21"><name pos:start="143:15" pos:end="143:15">s</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:21">vmfd</name></name></expr>;</expr_stmt>

        <goto pos:start="145:9" pos:end="145:17">goto <name pos:start="145:14" pos:end="145:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:72"><expr pos:start="151:5" pos:end="151:71"><name pos:start="151:5" pos:end="151:15">missing_cap</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <call pos:start="151:19" pos:end="151:71"><name pos:start="151:19" pos:end="151:42">kvm_check_extension_list</name><argument_list pos:start="151:43" pos:end="151:71">(<argument pos:start="151:44" pos:end="151:44"><expr pos:start="151:44" pos:end="151:44"><name pos:start="151:44" pos:end="151:44">s</name></expr></argument>, <argument pos:start="151:47" pos:end="151:70"><expr pos:start="151:47" pos:end="151:70"><name pos:start="151:47" pos:end="151:70">kvm_required_capabilites</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="153:5" pos:end="159:5"><if pos:start="153:5" pos:end="159:5">if <condition pos:start="153:8" pos:end="153:21">(<expr pos:start="153:9" pos:end="153:20"><operator pos:start="153:9" pos:end="153:9">!</operator><name pos:start="153:10" pos:end="153:20">missing_cap</name></expr>)</condition> <block pos:start="153:23" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:72">

        <expr_stmt pos:start="155:9" pos:end="157:72"><expr pos:start="155:9" pos:end="157:71"><name pos:start="155:9" pos:end="155:19">missing_cap</name> <operator pos:start="155:21" pos:end="155:21">=</operator>

            <call pos:start="157:13" pos:end="157:71"><name pos:start="157:13" pos:end="157:36">kvm_check_extension_list</name><argument_list pos:start="157:37" pos:end="157:71">(<argument pos:start="157:38" pos:end="157:38"><expr pos:start="157:38" pos:end="157:38"><name pos:start="157:38" pos:end="157:38">s</name></expr></argument>, <argument pos:start="157:41" pos:end="157:70"><expr pos:start="157:41" pos:end="157:70"><name pos:start="157:41" pos:end="157:70">kvm_arch_required_capabilities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="161:5" pos:end="171:5"><if pos:start="161:5" pos:end="171:5">if <condition pos:start="161:8" pos:end="161:20">(<expr pos:start="161:9" pos:end="161:19"><name pos:start="161:9" pos:end="161:19">missing_cap</name></expr>)</condition> <block pos:start="161:22" pos:end="171:5">{<block_content pos:start="163:9" pos:end="169:17">

        <expr_stmt pos:start="163:9" pos:end="163:22"><expr pos:start="163:9" pos:end="163:21"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <operator pos:start="163:15" pos:end="163:15">-</operator><name pos:start="163:16" pos:end="163:21">EINVAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="167:49"><expr pos:start="165:9" pos:end="167:48"><call pos:start="165:9" pos:end="167:48"><name pos:start="165:9" pos:end="165:15">fprintf</name><argument_list pos:start="165:16" pos:end="167:48">(<argument pos:start="165:17" pos:end="165:22"><expr pos:start="165:17" pos:end="165:22"><name pos:start="165:17" pos:end="165:22">stderr</name></expr></argument>, <argument pos:start="165:25" pos:end="165:53"><expr pos:start="165:25" pos:end="165:53"><literal type="string" pos:start="165:25" pos:end="165:53">"kvm does not support %s\n%s"</literal></expr></argument>,

                <argument pos:start="167:17" pos:end="167:33"><expr pos:start="167:17" pos:end="167:33"><name pos:start="167:17" pos:end="167:33"><name pos:start="167:17" pos:end="167:27">missing_cap</name><operator pos:start="167:28" pos:end="167:29">-&gt;</operator><name pos:start="167:30" pos:end="167:33">name</name></name></expr></argument>, <argument pos:start="167:36" pos:end="167:47"><expr pos:start="167:36" pos:end="167:47"><name pos:start="167:36" pos:end="167:47">upgrade_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="169:9" pos:end="169:17">goto <name pos:start="169:14" pos:end="169:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:71"><expr pos:start="175:5" pos:end="175:70"><name pos:start="175:5" pos:end="175:21"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:21">coalesced_mmio</name></name> <operator pos:start="175:23" pos:end="175:23">=</operator> <call pos:start="175:25" pos:end="175:70"><name pos:start="175:25" pos:end="175:43">kvm_check_extension</name><argument_list pos:start="175:44" pos:end="175:70">(<argument pos:start="175:45" pos:end="175:45"><expr pos:start="175:45" pos:end="175:45"><name pos:start="175:45" pos:end="175:45">s</name></expr></argument>, <argument pos:start="175:48" pos:end="175:69"><expr pos:start="175:48" pos:end="175:69"><name pos:start="175:48" pos:end="175:69">KVM_CAP_COALESCED_MMIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:33"><expr pos:start="179:5" pos:end="179:32"><name pos:start="179:5" pos:end="179:28"><name pos:start="179:5" pos:end="179:5">s</name><operator pos:start="179:6" pos:end="179:7">-&gt;</operator><name pos:start="179:8" pos:end="179:28">broken_set_mem_region</name></name> <operator pos:start="179:30" pos:end="179:30">=</operator> <literal type="number" pos:start="179:32" pos:end="179:32">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:68"><expr pos:start="181:5" pos:end="181:67"><name pos:start="181:5" pos:end="181:7">ret</name> <operator pos:start="181:9" pos:end="181:9">=</operator> <call pos:start="181:11" pos:end="181:67"><name pos:start="181:11" pos:end="181:29">kvm_check_extension</name><argument_list pos:start="181:30" pos:end="181:67">(<argument pos:start="181:31" pos:end="181:31"><expr pos:start="181:31" pos:end="181:31"><name pos:start="181:31" pos:end="181:31">s</name></expr></argument>, <argument pos:start="181:34" pos:end="181:66"><expr pos:start="181:34" pos:end="181:66"><name pos:start="181:34" pos:end="181:66">KVM_CAP_JOIN_MEMORY_REGIONS_WORKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="192:0"><if pos:start="183:5" pos:end="192:0">if <condition pos:start="183:8" pos:end="183:16">(<expr pos:start="183:9" pos:end="183:15"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">&gt;</operator> <literal type="number" pos:start="183:15" pos:end="183:15">0</literal></expr>)</condition> <block pos:start="183:18" pos:end="192:0">{<block_content pos:start="185:9" pos:end="185:37">

        <expr_stmt pos:start="185:9" pos:end="185:37"><expr pos:start="185:9" pos:end="185:36"><name pos:start="185:9" pos:end="185:32"><name pos:start="185:9" pos:end="185:9">s</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:32">broken_set_mem_region</name></name> <operator pos:start="185:34" pos:end="185:34">=</operator> <literal type="number" pos:start="185:36" pos:end="185:36">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="191:1" pos:end="191:26">#<cpp:directive pos:start="191:2" pos:end="191:6">ifdef</cpp:directive> <name pos:start="191:8" pos:end="191:26">KVM_CAP_VCPU_EVENTS</name></cpp:ifdef>

    <expr_stmt pos:start="193:5" pos:end="196:0"><expr pos:start="193:5" pos:end="193:64"><name pos:start="193:5" pos:end="193:18"><name pos:start="193:5" pos:end="193:5">s</name><operator pos:start="193:6" pos:end="193:7">-&gt;</operator><name pos:start="193:8" pos:end="193:18">vcpu_events</name></name> <operator pos:start="193:20" pos:end="193:20">=</operator> <call pos:start="193:22" pos:end="193:64"><name pos:start="193:22" pos:end="193:40">kvm_check_extension</name><argument_list pos:start="193:41" pos:end="193:64">(<argument pos:start="193:42" pos:end="193:42"><expr pos:start="193:42" pos:end="193:42"><name pos:start="193:42" pos:end="193:42">s</name></expr></argument>, <argument pos:start="193:45" pos:end="193:63"><expr pos:start="193:45" pos:end="193:63"><name pos:start="193:45" pos:end="193:63">KVM_CAP_VCPU_EVENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="199:5" pos:end="206:0"><expr pos:start="199:5" pos:end="201:61"><name pos:start="199:5" pos:end="199:24"><name pos:start="199:5" pos:end="199:5">s</name><operator pos:start="199:6" pos:end="199:7">-&gt;</operator><name pos:start="199:8" pos:end="199:24">robust_singlestep</name></name> <operator pos:start="199:26" pos:end="199:26">=</operator>

        <call pos:start="201:9" pos:end="201:61"><name pos:start="201:9" pos:end="201:27">kvm_check_extension</name><argument_list pos:start="201:28" pos:end="201:61">(<argument pos:start="201:29" pos:end="201:29"><expr pos:start="201:29" pos:end="201:29"><name pos:start="201:29" pos:end="201:29">s</name></expr></argument>, <argument pos:start="201:32" pos:end="201:60"><expr pos:start="201:32" pos:end="201:60"><name pos:start="201:32" pos:end="201:60">KVM_CAP_X86_ROBUST_SINGLESTEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="205:1" pos:end="205:24">#<cpp:directive pos:start="205:2" pos:end="205:6">ifdef</cpp:directive> <name pos:start="205:8" pos:end="205:24">KVM_CAP_DEBUGREGS</name></cpp:ifdef>

    <expr_stmt pos:start="207:5" pos:end="214:0"><expr pos:start="207:5" pos:end="207:60"><name pos:start="207:5" pos:end="207:16"><name pos:start="207:5" pos:end="207:5">s</name><operator pos:start="207:6" pos:end="207:7">-&gt;</operator><name pos:start="207:8" pos:end="207:16">debugregs</name></name> <operator pos:start="207:18" pos:end="207:18">=</operator> <call pos:start="207:20" pos:end="207:60"><name pos:start="207:20" pos:end="207:38">kvm_check_extension</name><argument_list pos:start="207:39" pos:end="207:60">(<argument pos:start="207:40" pos:end="207:40"><expr pos:start="207:40" pos:end="207:40"><name pos:start="207:40" pos:end="207:40">s</name></expr></argument>, <argument pos:start="207:43" pos:end="207:59"><expr pos:start="207:43" pos:end="207:59"><name pos:start="207:43" pos:end="207:59">KVM_CAP_DEBUGREGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="213:1" pos:end="213:20">#<cpp:directive pos:start="213:2" pos:end="213:6">ifdef</cpp:directive> <name pos:start="213:8" pos:end="213:20">KVM_CAP_XSAVE</name></cpp:ifdef>

    <expr_stmt pos:start="215:5" pos:end="222:0"><expr pos:start="215:5" pos:end="215:52"><name pos:start="215:5" pos:end="215:12"><name pos:start="215:5" pos:end="215:5">s</name><operator pos:start="215:6" pos:end="215:7">-&gt;</operator><name pos:start="215:8" pos:end="215:12">xsave</name></name> <operator pos:start="215:14" pos:end="215:14">=</operator> <call pos:start="215:16" pos:end="215:52"><name pos:start="215:16" pos:end="215:34">kvm_check_extension</name><argument_list pos:start="215:35" pos:end="215:52">(<argument pos:start="215:36" pos:end="215:36"><expr pos:start="215:36" pos:end="215:36"><name pos:start="215:36" pos:end="215:36">s</name></expr></argument>, <argument pos:start="215:39" pos:end="215:51"><expr pos:start="215:39" pos:end="215:51"><name pos:start="215:39" pos:end="215:51">KVM_CAP_XSAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="217:1" pos:end="217:6">#<cpp:directive pos:start="217:2" pos:end="217:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="221:1" pos:end="221:19">#<cpp:directive pos:start="221:2" pos:end="221:6">ifdef</cpp:directive> <name pos:start="221:8" pos:end="221:19">KVM_CAP_XCRS</name></cpp:ifdef>

    <expr_stmt pos:start="223:5" pos:end="230:0"><expr pos:start="223:5" pos:end="223:50"><name pos:start="223:5" pos:end="223:11"><name pos:start="223:5" pos:end="223:5">s</name><operator pos:start="223:6" pos:end="223:7">-&gt;</operator><name pos:start="223:8" pos:end="223:11">xcrs</name></name> <operator pos:start="223:13" pos:end="223:13">=</operator> <call pos:start="223:15" pos:end="223:50"><name pos:start="223:15" pos:end="223:33">kvm_check_extension</name><argument_list pos:start="223:34" pos:end="223:50">(<argument pos:start="223:35" pos:end="223:35"><expr pos:start="223:35" pos:end="223:35"><name pos:start="223:35" pos:end="223:35">s</name></expr></argument>, <argument pos:start="223:38" pos:end="223:49"><expr pos:start="223:38" pos:end="223:49"><name pos:start="223:38" pos:end="223:49">KVM_CAP_XCRS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="225:1" pos:end="225:6">#<cpp:directive pos:start="225:2" pos:end="225:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="229:1" pos:end="229:25">#<cpp:directive pos:start="229:2" pos:end="229:6">ifdef</cpp:directive> <name pos:start="229:8" pos:end="229:25">KVM_CAP_PIT_STATE2</name></cpp:ifdef>

    <expr_stmt pos:start="231:5" pos:end="238:0"><expr pos:start="231:5" pos:end="231:62"><name pos:start="231:5" pos:end="231:17"><name pos:start="231:5" pos:end="231:5">s</name><operator pos:start="231:6" pos:end="231:7">-&gt;</operator><name pos:start="231:8" pos:end="231:17">pit_state2</name></name> <operator pos:start="231:19" pos:end="231:19">=</operator> <call pos:start="231:21" pos:end="231:62"><name pos:start="231:21" pos:end="231:39">kvm_check_extension</name><argument_list pos:start="231:40" pos:end="231:62">(<argument pos:start="231:41" pos:end="231:41"><expr pos:start="231:41" pos:end="231:41"><name pos:start="231:41" pos:end="231:41">s</name></expr></argument>, <argument pos:start="231:44" pos:end="231:61"><expr pos:start="231:44" pos:end="231:61"><name pos:start="231:44" pos:end="231:61">KVM_CAP_PIT_STATE2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="233:1" pos:end="233:6">#<cpp:directive pos:start="233:2" pos:end="233:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="237:1" pos:end="237:26">#<cpp:directive pos:start="237:2" pos:end="237:6">ifdef</cpp:directive> <name pos:start="237:8" pos:end="237:26">KVM_CAP_IRQ_ROUTING</name></cpp:ifdef>

    <expr_stmt pos:start="239:5" pos:end="242:0"><expr pos:start="239:5" pos:end="239:68"><name pos:start="239:5" pos:end="239:17"><name pos:start="239:5" pos:end="239:5">s</name><operator pos:start="239:6" pos:end="239:7">-&gt;</operator><name pos:start="239:8" pos:end="239:17">direct_msi</name></name> <operator pos:start="239:19" pos:end="239:19">=</operator> <operator pos:start="239:21" pos:end="239:21">(</operator><call pos:start="239:22" pos:end="239:63"><name pos:start="239:22" pos:end="239:40">kvm_check_extension</name><argument_list pos:start="239:41" pos:end="239:63">(<argument pos:start="239:42" pos:end="239:42"><expr pos:start="239:42" pos:end="239:42"><name pos:start="239:42" pos:end="239:42">s</name></expr></argument>, <argument pos:start="239:45" pos:end="239:62"><expr pos:start="239:45" pos:end="239:62"><name pos:start="239:45" pos:end="239:62">KVM_CAP_SIGNAL_MSI</name></expr></argument>)</argument_list></call> <operator pos:start="239:65" pos:end="239:65">&gt;</operator> <literal type="number" pos:start="239:67" pos:end="239:67">0</literal><operator pos:start="239:68" pos:end="239:68">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="241:1" pos:end="241:6">#<cpp:directive pos:start="241:2" pos:end="241:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="245:5" pos:end="245:63"><expr pos:start="245:5" pos:end="245:62"><name pos:start="245:5" pos:end="245:20"><name pos:start="245:5" pos:end="245:5">s</name><operator pos:start="245:6" pos:end="245:7">-&gt;</operator><name pos:start="245:8" pos:end="245:20">intx_set_mask</name></name> <operator pos:start="245:22" pos:end="245:22">=</operator> <call pos:start="245:24" pos:end="245:62"><name pos:start="245:24" pos:end="245:42">kvm_check_extension</name><argument_list pos:start="245:43" pos:end="245:62">(<argument pos:start="245:44" pos:end="245:44"><expr pos:start="245:44" pos:end="245:44"><name pos:start="245:44" pos:end="245:44">s</name></expr></argument>, <argument pos:start="245:47" pos:end="245:61"><expr pos:start="245:47" pos:end="245:61"><name pos:start="245:47" pos:end="245:61">KVM_CAP_PCI_2_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="249:5" pos:end="249:36"><expr pos:start="249:5" pos:end="249:35"><name pos:start="249:5" pos:end="249:20"><name pos:start="249:5" pos:end="249:5">s</name><operator pos:start="249:6" pos:end="249:7">-&gt;</operator><name pos:start="249:8" pos:end="249:20">irq_set_ioctl</name></name> <operator pos:start="249:22" pos:end="249:22">=</operator> <name pos:start="249:24" pos:end="249:35">KVM_IRQ_LINE</name></expr>;</expr_stmt>

    <if_stmt pos:start="251:5" pos:end="260:0"><if pos:start="251:5" pos:end="260:0">if <condition pos:start="251:8" pos:end="251:58">(<expr pos:start="251:9" pos:end="251:57"><call pos:start="251:9" pos:end="251:57"><name pos:start="251:9" pos:end="251:27">kvm_check_extension</name><argument_list pos:start="251:28" pos:end="251:57">(<argument pos:start="251:29" pos:end="251:29"><expr pos:start="251:29" pos:end="251:29"><name pos:start="251:29" pos:end="251:29">s</name></expr></argument>, <argument pos:start="251:32" pos:end="251:56"><expr pos:start="251:32" pos:end="251:56"><name pos:start="251:32" pos:end="251:56">KVM_CAP_IRQ_INJECT_STATUS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="251:60" pos:end="260:0">{<block_content pos:start="253:9" pos:end="253:47">

        <expr_stmt pos:start="253:9" pos:end="253:47"><expr pos:start="253:9" pos:end="253:46"><name pos:start="253:9" pos:end="253:24"><name pos:start="253:9" pos:end="253:9">s</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:24">irq_set_ioctl</name></name> <operator pos:start="253:26" pos:end="253:26">=</operator> <name pos:start="253:28" pos:end="253:46">KVM_IRQ_LINE_STATUS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="259:1" pos:end="259:27">#<cpp:directive pos:start="259:2" pos:end="259:6">ifdef</cpp:directive> <name pos:start="259:8" pos:end="259:27">KVM_CAP_READONLY_MEM</name></cpp:ifdef>

    <expr_stmt pos:start="261:5" pos:end="266:0"><expr pos:start="261:5" pos:end="263:58"><name pos:start="261:5" pos:end="261:28">kvm_readonly_mem_allowed</name> <operator pos:start="261:30" pos:end="261:30">=</operator>

        <operator pos:start="263:9" pos:end="263:9">(</operator><call pos:start="263:10" pos:end="263:53"><name pos:start="263:10" pos:end="263:28">kvm_check_extension</name><argument_list pos:start="263:29" pos:end="263:53">(<argument pos:start="263:30" pos:end="263:30"><expr pos:start="263:30" pos:end="263:30"><name pos:start="263:30" pos:end="263:30">s</name></expr></argument>, <argument pos:start="263:33" pos:end="263:52"><expr pos:start="263:33" pos:end="263:52"><name pos:start="263:33" pos:end="263:52">KVM_CAP_READONLY_MEM</name></expr></argument>)</argument_list></call> <operator pos:start="263:55" pos:end="263:55">&gt;</operator> <literal type="number" pos:start="263:57" pos:end="263:57">0</literal><operator pos:start="263:58" pos:end="263:58">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="265:1" pos:end="265:6">#<cpp:directive pos:start="265:2" pos:end="265:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="269:5" pos:end="269:27"><expr pos:start="269:5" pos:end="269:26"><name pos:start="269:5" pos:end="269:7">ret</name> <operator pos:start="269:9" pos:end="269:9">=</operator> <call pos:start="269:11" pos:end="269:26"><name pos:start="269:11" pos:end="269:23">kvm_arch_init</name><argument_list pos:start="269:24" pos:end="269:26">(<argument pos:start="269:25" pos:end="269:25"><expr pos:start="269:25" pos:end="269:25"><name pos:start="269:25" pos:end="269:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="271:5" pos:end="275:5"><if pos:start="271:5" pos:end="275:5">if <condition pos:start="271:8" pos:end="271:16">(<expr pos:start="271:9" pos:end="271:15"><name pos:start="271:9" pos:end="271:11">ret</name> <operator pos:start="271:13" pos:end="271:13">&lt;</operator> <literal type="number" pos:start="271:15" pos:end="271:15">0</literal></expr>)</condition> <block pos:start="271:18" pos:end="275:5">{<block_content pos:start="273:9" pos:end="273:17">

        <goto pos:start="273:9" pos:end="273:17">goto <name pos:start="273:14" pos:end="273:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="279:5" pos:end="279:32"><expr pos:start="279:5" pos:end="279:31"><name pos:start="279:5" pos:end="279:7">ret</name> <operator pos:start="279:9" pos:end="279:9">=</operator> <call pos:start="279:11" pos:end="279:31"><name pos:start="279:11" pos:end="279:28">kvm_irqchip_create</name><argument_list pos:start="279:29" pos:end="279:31">(<argument pos:start="279:30" pos:end="279:30"><expr pos:start="279:30" pos:end="279:30"><name pos:start="279:30" pos:end="279:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="281:5" pos:end="285:5"><if pos:start="281:5" pos:end="285:5">if <condition pos:start="281:8" pos:end="281:16">(<expr pos:start="281:9" pos:end="281:15"><name pos:start="281:9" pos:end="281:11">ret</name> <operator pos:start="281:13" pos:end="281:13">&lt;</operator> <literal type="number" pos:start="281:15" pos:end="281:15">0</literal></expr>)</condition> <block pos:start="281:18" pos:end="285:5">{<block_content pos:start="283:9" pos:end="283:17">

        <goto pos:start="283:9" pos:end="283:17">goto <name pos:start="283:14" pos:end="283:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="289:5" pos:end="289:18"><expr pos:start="289:5" pos:end="289:17"><name pos:start="289:5" pos:end="289:13">kvm_state</name> <operator pos:start="289:15" pos:end="289:15">=</operator> <name pos:start="289:17" pos:end="289:17">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:74"><expr pos:start="291:5" pos:end="291:73"><call pos:start="291:5" pos:end="291:73"><name pos:start="291:5" pos:end="291:28">memory_listener_register</name><argument_list pos:start="291:29" pos:end="291:73">(<argument pos:start="291:30" pos:end="291:49"><expr pos:start="291:30" pos:end="291:49"><operator pos:start="291:30" pos:end="291:30">&amp;</operator><name pos:start="291:31" pos:end="291:49">kvm_memory_listener</name></expr></argument>, <argument pos:start="291:52" pos:end="291:72"><expr pos:start="291:52" pos:end="291:72"><operator pos:start="291:52" pos:end="291:52">&amp;</operator><name pos:start="291:53" pos:end="291:72">address_space_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:66"><expr pos:start="293:5" pos:end="293:65"><call pos:start="293:5" pos:end="293:65"><name pos:start="293:5" pos:end="293:28">memory_listener_register</name><argument_list pos:start="293:29" pos:end="293:65">(<argument pos:start="293:30" pos:end="293:45"><expr pos:start="293:30" pos:end="293:45"><operator pos:start="293:30" pos:end="293:30">&amp;</operator><name pos:start="293:31" pos:end="293:45">kvm_io_listener</name></expr></argument>, <argument pos:start="293:48" pos:end="293:64"><expr pos:start="293:48" pos:end="293:64"><operator pos:start="293:48" pos:end="293:48">&amp;</operator><name pos:start="293:49" pos:end="293:64">address_space_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="297:5" pos:end="297:53"><expr pos:start="297:5" pos:end="297:52"><name pos:start="297:5" pos:end="297:22"><name pos:start="297:5" pos:end="297:5">s</name><operator pos:start="297:6" pos:end="297:7">-&gt;</operator><name pos:start="297:8" pos:end="297:22">many_ioeventfds</name></name> <operator pos:start="297:24" pos:end="297:24">=</operator> <call pos:start="297:26" pos:end="297:52"><name pos:start="297:26" pos:end="297:50">kvm_check_many_ioeventfds</name><argument_list pos:start="297:51" pos:end="297:52">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="301:5" pos:end="301:49"><expr pos:start="301:5" pos:end="301:48"><name pos:start="301:5" pos:end="301:25">cpu_interrupt_handler</name> <operator pos:start="301:27" pos:end="301:27">=</operator> <name pos:start="301:29" pos:end="301:48">kvm_handle_interrupt</name></expr>;</expr_stmt>



    <return pos:start="305:5" pos:end="305:13">return <expr pos:start="305:12" pos:end="305:12"><literal type="number" pos:start="305:12" pos:end="305:12">0</literal></expr>;</return>



<label pos:start="309:1" pos:end="309:4"><name pos:start="309:1" pos:end="309:3">err</name>:</label>

    <if_stmt pos:start="311:5" pos:end="315:5"><if pos:start="311:5" pos:end="315:5">if <condition pos:start="311:8" pos:end="311:21">(<expr pos:start="311:9" pos:end="311:20"><name pos:start="311:9" pos:end="311:15"><name pos:start="311:9" pos:end="311:9">s</name><operator pos:start="311:10" pos:end="311:11">-&gt;</operator><name pos:start="311:12" pos:end="311:15">vmfd</name></name> <operator pos:start="311:17" pos:end="311:18">&gt;=</operator> <literal type="number" pos:start="311:20" pos:end="311:20">0</literal></expr>)</condition> <block pos:start="311:23" pos:end="315:5">{<block_content pos:start="313:9" pos:end="313:23">

        <expr_stmt pos:start="313:9" pos:end="313:23"><expr pos:start="313:9" pos:end="313:22"><call pos:start="313:9" pos:end="313:22"><name pos:start="313:9" pos:end="313:13">close</name><argument_list pos:start="313:14" pos:end="313:22">(<argument pos:start="313:15" pos:end="313:21"><expr pos:start="313:15" pos:end="313:21"><name pos:start="313:15" pos:end="313:21"><name pos:start="313:15" pos:end="313:15">s</name><operator pos:start="313:16" pos:end="313:17">-&gt;</operator><name pos:start="313:18" pos:end="313:21">vmfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="317:5" pos:end="321:5"><if pos:start="317:5" pos:end="321:5">if <condition pos:start="317:8" pos:end="317:20">(<expr pos:start="317:9" pos:end="317:19"><name pos:start="317:9" pos:end="317:13"><name pos:start="317:9" pos:end="317:9">s</name><operator pos:start="317:10" pos:end="317:11">-&gt;</operator><name pos:start="317:12" pos:end="317:13">fd</name></name> <operator pos:start="317:15" pos:end="317:16">!=</operator> <operator pos:start="317:18" pos:end="317:18">-</operator><literal type="number" pos:start="317:19" pos:end="317:19">1</literal></expr>)</condition> <block pos:start="317:22" pos:end="321:5">{<block_content pos:start="319:9" pos:end="319:21">

        <expr_stmt pos:start="319:9" pos:end="319:21"><expr pos:start="319:9" pos:end="319:20"><call pos:start="319:9" pos:end="319:20"><name pos:start="319:9" pos:end="319:13">close</name><argument_list pos:start="319:14" pos:end="319:20">(<argument pos:start="319:15" pos:end="319:19"><expr pos:start="319:15" pos:end="319:19"><name pos:start="319:15" pos:end="319:19"><name pos:start="319:15" pos:end="319:15">s</name><operator pos:start="319:16" pos:end="319:17">-&gt;</operator><name pos:start="319:18" pos:end="319:19">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:14"><expr pos:start="323:5" pos:end="323:13"><call pos:start="323:5" pos:end="323:13"><name pos:start="323:5" pos:end="323:10">g_free</name><argument_list pos:start="323:11" pos:end="323:13">(<argument pos:start="323:12" pos:end="323:12"><expr pos:start="323:12" pos:end="323:12"><name pos:start="323:12" pos:end="323:12">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="327:5" pos:end="327:15">return <expr pos:start="327:12" pos:end="327:14"><name pos:start="327:12" pos:end="327:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
