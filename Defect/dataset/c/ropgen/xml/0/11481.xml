<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11481.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">MP3lame_encode_frame</name><parameter_list pos:start="1:32" pos:end="3:79">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:52"><decl pos:start="3:33" pos:end="3:52"><type pos:start="3:33" pos:end="3:52"><name pos:start="3:33" pos:end="3:40">unsigned</name> <name pos:start="3:42" pos:end="3:45">char</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:52">frame</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:66"><decl pos:start="3:55" pos:end="3:66"><type pos:start="3:55" pos:end="3:66"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:66">buf_size</name></decl></parameter>, <parameter pos:start="3:69" pos:end="3:78"><decl pos:start="3:69" pos:end="3:78"><type pos:start="3:69" pos:end="3:78"><name pos:start="3:69" pos:end="3:72">void</name> <modifier pos:start="3:74" pos:end="3:74">*</modifier></type><name pos:start="3:75" pos:end="3:78">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="123:1">{<block_content pos:start="7:5" pos:end="121:21">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">Mp3AudioContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:22">s</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">lame_result</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:56">/* lame 3.91 dies on '1-channel interleaved' data */</comment>



    <if_stmt pos:start="19:5" pos:end="69:5"><if pos:start="19:5" pos:end="57:5">if<condition pos:start="19:7" pos:end="19:12">(<expr pos:start="19:8" pos:end="19:11"><name pos:start="19:8" pos:end="19:11">data</name></expr>)</condition><block pos:start="19:13" pos:end="57:5">{<block_content pos:start="21:9" pos:end="55:9">

        <if_stmt pos:start="21:9" pos:end="55:9"><if pos:start="21:9" pos:end="37:9">if <condition pos:start="21:12" pos:end="21:22">(<expr pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:21">stereo</name></name></expr>)</condition> <block pos:start="21:24" pos:end="37:9">{<block_content pos:start="23:13" pos:end="35:18">

            <expr_stmt pos:start="23:13" pos:end="35:18"><expr pos:start="23:13" pos:end="35:17"><name pos:start="23:13" pos:end="23:23">lame_result</name> <operator pos:start="23:25" pos:end="23:25">=</operator> <call pos:start="23:27" pos:end="35:17"><name pos:start="23:27" pos:end="23:56">lame_encode_buffer_interleaved</name><argument_list pos:start="23:57" pos:end="35:17">(

                <argument pos:start="25:17" pos:end="25:22"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:17">s</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:22">gfp</name></name></expr></argument>,

                <argument pos:start="27:17" pos:end="27:20"><expr pos:start="27:17" pos:end="27:20"><name pos:start="27:17" pos:end="27:20">data</name></expr></argument>,

                <argument pos:start="29:17" pos:end="29:33"><expr pos:start="29:17" pos:end="29:33"><name pos:start="29:17" pos:end="29:33"><name pos:start="29:17" pos:end="29:21">avctx</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:33">frame_size</name></name></expr></argument>,

                <argument pos:start="31:17" pos:end="31:43"><expr pos:start="31:17" pos:end="31:43"><name pos:start="31:17" pos:end="31:25"><name pos:start="31:17" pos:end="31:17">s</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:25">buffer</name></name> <operator pos:start="31:27" pos:end="31:27">+</operator> <name pos:start="31:29" pos:end="31:43"><name pos:start="31:29" pos:end="31:29">s</name><operator pos:start="31:30" pos:end="31:31">-&gt;</operator><name pos:start="31:32" pos:end="31:43">buffer_index</name></name></expr></argument>,

                <argument pos:start="33:17" pos:end="33:45"><expr pos:start="33:17" pos:end="33:45"><name pos:start="33:17" pos:end="33:27">BUFFER_SIZE</name> <operator pos:start="33:29" pos:end="33:29">-</operator> <name pos:start="33:31" pos:end="33:45"><name pos:start="33:31" pos:end="33:31">s</name><operator pos:start="33:32" pos:end="33:33">-&gt;</operator><name pos:start="33:34" pos:end="33:45">buffer_index</name></name></expr></argument>

                )</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="55:9">else <block pos:start="37:16" pos:end="55:9">{<block_content pos:start="39:13" pos:end="53:18">

            <expr_stmt pos:start="39:13" pos:end="53:18"><expr pos:start="39:13" pos:end="53:17"><name pos:start="39:13" pos:end="39:23">lame_result</name> <operator pos:start="39:25" pos:end="39:25">=</operator> <call pos:start="39:27" pos:end="53:17"><name pos:start="39:27" pos:end="39:44">lame_encode_buffer</name><argument_list pos:start="39:45" pos:end="53:17">(

                <argument pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:22">gfp</name></name></expr></argument>,

                <argument pos:start="43:17" pos:end="43:20"><expr pos:start="43:17" pos:end="43:20"><name pos:start="43:17" pos:end="43:20">data</name></expr></argument>,

                <argument pos:start="45:17" pos:end="45:20"><expr pos:start="45:17" pos:end="45:20"><name pos:start="45:17" pos:end="45:20">data</name></expr></argument>,

                <argument pos:start="47:17" pos:end="47:33"><expr pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:21">avctx</name><operator pos:start="47:22" pos:end="47:23">-&gt;</operator><name pos:start="47:24" pos:end="47:33">frame_size</name></name></expr></argument>,

                <argument pos:start="49:17" pos:end="49:43"><expr pos:start="49:17" pos:end="49:43"><name pos:start="49:17" pos:end="49:25"><name pos:start="49:17" pos:end="49:17">s</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:25">buffer</name></name> <operator pos:start="49:27" pos:end="49:27">+</operator> <name pos:start="49:29" pos:end="49:43"><name pos:start="49:29" pos:end="49:29">s</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:43">buffer_index</name></name></expr></argument>,

                <argument pos:start="51:17" pos:end="51:45"><expr pos:start="51:17" pos:end="51:45"><name pos:start="51:17" pos:end="51:27">BUFFER_SIZE</name> <operator pos:start="51:29" pos:end="51:29">-</operator> <name pos:start="51:31" pos:end="51:45"><name pos:start="51:31" pos:end="51:31">s</name><operator pos:start="51:32" pos:end="51:33">-&gt;</operator><name pos:start="51:34" pos:end="51:45">buffer_index</name></name></expr></argument>

                )</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if><else pos:start="57:6" pos:end="69:5">else<block pos:start="57:10" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:18">

        <expr_stmt pos:start="59:9" pos:end="67:18"><expr pos:start="59:9" pos:end="67:17"><name pos:start="59:9" pos:end="59:19">lame_result</name><operator pos:start="59:20" pos:end="59:20">=</operator> <call pos:start="59:22" pos:end="67:17"><name pos:start="59:22" pos:end="59:38">lame_encode_flush</name><argument_list pos:start="59:39" pos:end="67:17">(

                <argument pos:start="61:17" pos:end="61:22"><expr pos:start="61:17" pos:end="61:22"><name pos:start="61:17" pos:end="61:22"><name pos:start="61:17" pos:end="61:17">s</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:22">gfp</name></name></expr></argument>,

                <argument pos:start="63:17" pos:end="63:43"><expr pos:start="63:17" pos:end="63:43"><name pos:start="63:17" pos:end="63:25"><name pos:start="63:17" pos:end="63:17">s</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:25">buffer</name></name> <operator pos:start="63:27" pos:end="63:27">+</operator> <name pos:start="63:29" pos:end="63:43"><name pos:start="63:29" pos:end="63:29">s</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:43">buffer_index</name></name></expr></argument>,

                <argument pos:start="65:17" pos:end="65:45"><expr pos:start="65:17" pos:end="65:45"><name pos:start="65:17" pos:end="65:27">BUFFER_SIZE</name> <operator pos:start="65:29" pos:end="65:29">-</operator> <name pos:start="65:31" pos:end="65:45"><name pos:start="65:31" pos:end="65:31">s</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:45">buffer_index</name></name></expr></argument>

                )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="81:5">if<condition pos:start="73:7" pos:end="73:23">(<expr pos:start="73:8" pos:end="73:22"><name pos:start="73:8" pos:end="73:18">lame_result</name><operator pos:start="73:19" pos:end="73:20">==</operator><operator pos:start="73:21" pos:end="73:21">-</operator><literal type="number" pos:start="73:22" pos:end="73:22">1</literal></expr>)</condition> <block pos:start="73:25" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:17">

        <comment type="block" pos:start="75:9" pos:end="75:37">/* output buffer too small */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:154"><expr pos:start="77:9" pos:end="77:153"><call pos:start="77:9" pos:end="77:153"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="77:153">(<argument pos:start="77:16" pos:end="77:20"><expr pos:start="77:16" pos:end="77:20"><name pos:start="77:16" pos:end="77:20">avctx</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><name pos:start="77:23" pos:end="77:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:37" pos:end="77:104"><expr pos:start="77:37" pos:end="77:104"><literal type="string" pos:start="77:37" pos:end="77:104">"lame: output buffer too small (buffer index: %d, free bytes: %d)\n"</literal></expr></argument>, <argument pos:start="77:107" pos:end="77:121"><expr pos:start="77:107" pos:end="77:121"><name pos:start="77:107" pos:end="77:121"><name pos:start="77:107" pos:end="77:107">s</name><operator pos:start="77:108" pos:end="77:109">-&gt;</operator><name pos:start="77:110" pos:end="77:121">buffer_index</name></name></expr></argument>, <argument pos:start="77:124" pos:end="77:152"><expr pos:start="77:124" pos:end="77:152"><name pos:start="77:124" pos:end="77:134">BUFFER_SIZE</name> <operator pos:start="77:136" pos:end="77:136">-</operator> <name pos:start="77:138" pos:end="77:152"><name pos:start="77:138" pos:end="77:138">s</name><operator pos:start="77:139" pos:end="77:140">-&gt;</operator><name pos:start="77:141" pos:end="77:152">buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:17">return <expr pos:start="79:16" pos:end="79:16"><literal type="number" pos:start="79:16" pos:end="79:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:35"><expr pos:start="85:5" pos:end="85:34"><name pos:start="85:5" pos:end="85:19"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:19">buffer_index</name></name> <operator pos:start="85:21" pos:end="85:22">+=</operator> <name pos:start="85:24" pos:end="85:34">lame_result</name></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="91:17"><if pos:start="89:5" pos:end="91:17">if<condition pos:start="89:7" pos:end="89:25">(<expr pos:start="89:8" pos:end="89:24"><name pos:start="89:8" pos:end="89:22"><name pos:start="89:8" pos:end="89:8">s</name><operator pos:start="89:9" pos:end="89:10">-&gt;</operator><name pos:start="89:11" pos:end="89:22">buffer_index</name></name><operator pos:start="89:23" pos:end="89:23">&lt;</operator><literal type="number" pos:start="89:24" pos:end="89:24">4</literal></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:17"><block_content pos:start="91:9" pos:end="91:17">

        <return pos:start="91:9" pos:end="91:17">return <expr pos:start="91:16" pos:end="91:16"><literal type="number" pos:start="91:16" pos:end="91:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:43"><expr pos:start="95:9" pos:end="95:42"><name pos:start="95:9" pos:end="95:11">len</name><operator pos:start="95:12" pos:end="95:12">=</operator> <call pos:start="95:14" pos:end="95:42"><name pos:start="95:14" pos:end="95:19">mp3len</name><argument_list pos:start="95:20" pos:end="95:42">(<argument pos:start="95:21" pos:end="95:29"><expr pos:start="95:21" pos:end="95:29"><name pos:start="95:21" pos:end="95:29"><name pos:start="95:21" pos:end="95:21">s</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:29">buffer</name></name></expr></argument>, <argument pos:start="95:32" pos:end="95:35"><expr pos:start="95:32" pos:end="95:35"><name pos:start="95:32" pos:end="95:35">NULL</name></expr></argument>, <argument pos:start="95:38" pos:end="95:41"><expr pos:start="95:38" pos:end="95:41"><name pos:start="95:38" pos:end="95:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="97:1" pos:end="97:105">//av_log(avctx, AV_LOG_DEBUG, "in:%d packet-len:%d index:%d\n", avctx-&gt;frame_size, len, s-&gt;buffer_index);</comment>

        <if_stmt pos:start="99:9" pos:end="121:21"><if pos:start="99:9" pos:end="119:9">if<condition pos:start="99:11" pos:end="99:34">(<expr pos:start="99:12" pos:end="99:33"><name pos:start="99:12" pos:end="99:14">len</name> <operator pos:start="99:16" pos:end="99:17">&lt;=</operator> <name pos:start="99:19" pos:end="99:33"><name pos:start="99:19" pos:end="99:19">s</name><operator pos:start="99:20" pos:end="99:21">-&gt;</operator><name pos:start="99:22" pos:end="99:33">buffer_index</name></name></expr>)</condition><block pos:start="99:35" pos:end="119:9">{<block_content pos:start="101:13" pos:end="117:23">

            <expr_stmt pos:start="101:13" pos:end="101:42"><expr pos:start="101:13" pos:end="101:41"><call pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:18">memcpy</name><argument_list pos:start="101:19" pos:end="101:41">(<argument pos:start="101:20" pos:end="101:24"><expr pos:start="101:20" pos:end="101:24"><name pos:start="101:20" pos:end="101:24">frame</name></expr></argument>, <argument pos:start="101:27" pos:end="101:35"><expr pos:start="101:27" pos:end="101:35"><name pos:start="101:27" pos:end="101:35"><name pos:start="101:27" pos:end="101:27">s</name><operator pos:start="101:28" pos:end="101:29">-&gt;</operator><name pos:start="101:30" pos:end="101:35">buffer</name></name></expr></argument>, <argument pos:start="101:38" pos:end="101:40"><expr pos:start="101:38" pos:end="101:40"><name pos:start="101:38" pos:end="101:40">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:35"><expr pos:start="103:13" pos:end="103:34"><name pos:start="103:13" pos:end="103:27"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:27">buffer_index</name></name> <operator pos:start="103:29" pos:end="103:30">-=</operator> <name pos:start="103:32" pos:end="103:34">len</name></expr>;</expr_stmt>



            <expr_stmt pos:start="107:13" pos:end="107:63"><expr pos:start="107:13" pos:end="107:62"><call pos:start="107:13" pos:end="107:62"><name pos:start="107:13" pos:end="107:19">memmove</name><argument_list pos:start="107:20" pos:end="107:62">(<argument pos:start="107:21" pos:end="107:29"><expr pos:start="107:21" pos:end="107:29"><name pos:start="107:21" pos:end="107:29"><name pos:start="107:21" pos:end="107:21">s</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:29">buffer</name></name></expr></argument>, <argument pos:start="107:32" pos:end="107:44"><expr pos:start="107:32" pos:end="107:44"><name pos:start="107:32" pos:end="107:40"><name pos:start="107:32" pos:end="107:32">s</name><operator pos:start="107:33" pos:end="107:34">-&gt;</operator><name pos:start="107:35" pos:end="107:40">buffer</name></name><operator pos:start="107:41" pos:end="107:41">+</operator><name pos:start="107:42" pos:end="107:44">len</name></expr></argument>, <argument pos:start="107:47" pos:end="107:61"><expr pos:start="107:47" pos:end="107:61"><name pos:start="107:47" pos:end="107:61"><name pos:start="107:47" pos:end="107:47">s</name><operator pos:start="107:48" pos:end="107:49">-&gt;</operator><name pos:start="107:50" pos:end="107:61">buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="109:13" pos:end="109:75">//FIXME fix the audio codec API, so we do not need the memcpy()</comment>

<comment type="block" pos:start="111:1" pos:end="115:3">/*for(i=0; i&lt;len; i++){

    av_log(avctx, AV_LOG_DEBUG, "%2X ", frame[i]);

}*/</comment>

            <return pos:start="117:13" pos:end="117:23">return <expr pos:start="117:20" pos:end="117:22"><name pos:start="117:20" pos:end="117:22">len</name></expr>;</return>

        </block_content>}</block></if><else pos:start="119:10" pos:end="121:21">else<block type="pseudo" pos:start="121:13" pos:end="121:21"><block_content pos:start="121:13" pos:end="121:21">

            <return pos:start="121:13" pos:end="121:21">return <expr pos:start="121:20" pos:end="121:20"><literal type="number" pos:start="121:20" pos:end="121:20">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
