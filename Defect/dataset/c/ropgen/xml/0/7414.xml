<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7414.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:16">coroutine_fn</name></type> <name pos:start="1:18" pos:end="1:30">bdrv_co_flush</name><parameter_list pos:start="1:31" pos:end="1:52">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:35">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="13:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:62">(<expr pos:start="9:9" pos:end="9:61"><operator pos:start="9:9" pos:end="9:9">!</operator><name pos:start="9:10" pos:end="9:11">bs</name> <operator pos:start="9:13" pos:end="9:14">||</operator> <operator pos:start="9:16" pos:end="9:16">!</operator><call pos:start="9:17" pos:end="9:36"><name pos:start="9:17" pos:end="9:32">bdrv_is_inserted</name><argument_list pos:start="9:33" pos:end="9:36">(<argument pos:start="9:34" pos:end="9:35"><expr pos:start="9:34" pos:end="9:35"><name pos:start="9:34" pos:end="9:35">bs</name></expr></argument>)</argument_list></call> <operator pos:start="9:38" pos:end="9:39">||</operator> <call pos:start="9:41" pos:end="9:61"><name pos:start="9:41" pos:end="9:57">bdrv_is_read_only</name><argument_list pos:start="9:58" pos:end="9:61">(<argument pos:start="9:59" pos:end="9:60"><expr pos:start="9:59" pos:end="9:60"><name pos:start="9:59" pos:end="9:60">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:64" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:17">

        <return pos:start="11:9" pos:end="11:17">return <expr pos:start="11:16" pos:end="11:16"><literal type="number" pos:start="11:16" pos:end="11:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:65">/* Write back cached data to the OS even with cache=unsafe */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:47"><expr pos:start="19:5" pos:end="19:46"><call pos:start="19:5" pos:end="19:46"><name pos:start="19:5" pos:end="19:16">BLKDBG_EVENT</name><argument_list pos:start="19:17" pos:end="19:46">(<argument pos:start="19:18" pos:end="19:25"><expr pos:start="19:18" pos:end="19:25"><name pos:start="19:18" pos:end="19:25"><name pos:start="19:18" pos:end="19:19">bs</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:25">file</name></name></expr></argument>, <argument pos:start="19:28" pos:end="19:45"><expr pos:start="19:28" pos:end="19:45"><name pos:start="19:28" pos:end="19:45">BLKDBG_FLUSH_TO_OS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="31:5"><if pos:start="21:5" pos:end="31:5">if <condition pos:start="21:8" pos:end="21:37">(<expr pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:36"><name pos:start="21:9" pos:end="21:10">bs</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:15">drv</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:36">bdrv_co_flush_to_os</name></name></expr>)</condition> <block pos:start="21:39" pos:end="31:5">{<block_content pos:start="23:9" pos:end="29:9">

        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:46"><name pos:start="23:15" pos:end="23:42"><name pos:start="23:15" pos:end="23:16">bs</name><operator pos:start="23:17" pos:end="23:18">-&gt;</operator><name pos:start="23:19" pos:end="23:21">drv</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:42">bdrv_co_flush_to_os</name></name><argument_list pos:start="23:43" pos:end="23:46">(<argument pos:start="23:44" pos:end="23:45"><expr pos:start="23:44" pos:end="23:45"><name pos:start="23:44" pos:end="23:45">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:20">(<expr pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">&lt;</operator> <literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr>)</condition> <block pos:start="25:22" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:23">

            <return pos:start="27:13" pos:end="27:23">return <expr pos:start="27:20" pos:end="27:22"><name pos:start="27:20" pos:end="27:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:67">/* But don't actually force it to the disk with cache=unsafe */</comment>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:41">(<expr pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:10">bs</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:22">open_flags</name></name> <operator pos:start="37:24" pos:end="37:24">&amp;</operator> <name pos:start="37:26" pos:end="37:40">BDRV_O_NO_FLUSH</name></expr>)</condition> <block pos:start="37:43" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:26">

        <goto pos:start="39:9" pos:end="39:26">goto <name pos:start="39:14" pos:end="39:25">flush_parent</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:49"><expr pos:start="45:5" pos:end="45:48"><call pos:start="45:5" pos:end="45:48"><name pos:start="45:5" pos:end="45:16">BLKDBG_EVENT</name><argument_list pos:start="45:17" pos:end="45:48">(<argument pos:start="45:18" pos:end="45:25"><expr pos:start="45:18" pos:end="45:25"><name pos:start="45:18" pos:end="45:25"><name pos:start="45:18" pos:end="45:19">bs</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:25">file</name></name></expr></argument>, <argument pos:start="45:28" pos:end="45:47"><expr pos:start="45:28" pos:end="45:47"><name pos:start="45:28" pos:end="45:47">BLKDBG_FLUSH_TO_DISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="103:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:39">(<expr pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:38"><name pos:start="47:9" pos:end="47:10">bs</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:15">drv</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:38">bdrv_co_flush_to_disk</name></name></expr>)</condition> <block pos:start="47:41" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:49">

        <expr_stmt pos:start="49:9" pos:end="49:49"><expr pos:start="49:9" pos:end="49:48"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:48"><name pos:start="49:15" pos:end="49:44"><name pos:start="49:15" pos:end="49:16">bs</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:21">drv</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:44">bdrv_co_flush_to_disk</name></name><argument_list pos:start="49:45" pos:end="49:48">(<argument pos:start="49:46" pos:end="49:47"><expr pos:start="49:46" pos:end="49:47"><name pos:start="49:46" pos:end="49:47">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="51:7" pos:end="77:5">else if <condition pos:start="51:15" pos:end="51:39">(<expr pos:start="51:16" pos:end="51:38"><name pos:start="51:16" pos:end="51:38"><name pos:start="51:16" pos:end="51:17">bs</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:22">drv</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:38">bdrv_aio_flush</name></name></expr>)</condition> <block pos:start="51:41" pos:end="77:5">{<block_content pos:start="53:9" pos:end="75:9">

        <decl_stmt pos:start="53:9" pos:end="53:24"><decl pos:start="53:9" pos:end="53:23"><type pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:18">BlockAIOCB</name> <modifier pos:start="53:20" pos:end="53:20">*</modifier></type><name pos:start="53:21" pos:end="53:23">acb</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="59:10"><decl pos:start="55:9" pos:end="59:9"><type pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:29">CoroutineIOCompletion</name></type> <name pos:start="55:31" pos:end="55:32">co</name> <init pos:start="55:34" pos:end="59:9">= <expr pos:start="55:36" pos:end="59:9"><block pos:start="55:36" pos:end="59:9">{

            <expr pos:start="57:13" pos:end="57:46"><operator pos:start="57:13" pos:end="57:13">.</operator><name pos:start="57:14" pos:end="57:22">coroutine</name> <operator pos:start="57:24" pos:end="57:24">=</operator> <call pos:start="57:26" pos:end="57:46"><name pos:start="57:26" pos:end="57:44">qemu_coroutine_self</name><argument_list pos:start="57:45" pos:end="57:46">()</argument_list></call></expr>,

        }</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:71"><expr pos:start="63:9" pos:end="63:70"><name pos:start="63:9" pos:end="63:11">acb</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:70"><name pos:start="63:15" pos:end="63:37"><name pos:start="63:15" pos:end="63:16">bs</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:21">drv</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:37">bdrv_aio_flush</name></name><argument_list pos:start="63:38" pos:end="63:70">(<argument pos:start="63:39" pos:end="63:40"><expr pos:start="63:39" pos:end="63:40"><name pos:start="63:39" pos:end="63:40">bs</name></expr></argument>, <argument pos:start="63:43" pos:end="63:64"><expr pos:start="63:43" pos:end="63:64"><name pos:start="63:43" pos:end="63:64">bdrv_co_io_em_complete</name></expr></argument>, <argument pos:start="63:67" pos:end="63:69"><expr pos:start="63:67" pos:end="63:69"><operator pos:start="63:67" pos:end="63:67">&amp;</operator><name pos:start="63:68" pos:end="63:69">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="75:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:24">(<expr pos:start="65:13" pos:end="65:23"><name pos:start="65:13" pos:end="65:15">acb</name> <operator pos:start="65:17" pos:end="65:18">==</operator> <name pos:start="65:20" pos:end="65:23">NULL</name></expr>)</condition> <block pos:start="65:26" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:23">

            <expr_stmt pos:start="67:13" pos:end="67:23"><expr pos:start="67:13" pos:end="67:22"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <operator pos:start="67:19" pos:end="67:19">-</operator><name pos:start="67:20" pos:end="67:22">EIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="69:11" pos:end="75:9">else <block pos:start="69:16" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:25">

            <expr_stmt pos:start="71:13" pos:end="71:35"><expr pos:start="71:13" pos:end="71:34"><call pos:start="71:13" pos:end="71:34"><name pos:start="71:13" pos:end="71:32">qemu_coroutine_yield</name><argument_list pos:start="71:33" pos:end="71:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:25"><expr pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <name pos:start="73:19" pos:end="73:24"><name pos:start="73:19" pos:end="73:20">co</name><operator pos:start="73:21" pos:end="73:21">.</operator><name pos:start="73:22" pos:end="73:24">ret</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="103:5">else <block pos:start="77:12" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:16">

        <comment type="block" pos:start="79:9" pos:end="99:11">/*

         * Some block drivers always operate in either writethrough or unsafe

         * mode and don't support bdrv_flush therefore. Usually qemu doesn't

         * know how the server works (because the behaviour is hardcoded or

         * depends on server-side configuration), so we can't ensure that

         * everything is safe on disk. Returning an error doesn't work because

         * that would break guests even if the server operates in writethrough

         * mode.

         *

         * Let's hope the user knows what he's doing.

         */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:16"><expr pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <literal type="number" pos:start="101:15" pos:end="101:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:16">(<expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:11">ret</name> <operator pos:start="105:13" pos:end="105:13">&lt;</operator> <literal type="number" pos:start="105:15" pos:end="105:15">0</literal></expr>)</condition> <block pos:start="105:18" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:19">

        <return pos:start="107:9" pos:end="107:19">return <expr pos:start="107:16" pos:end="107:18"><name pos:start="107:16" pos:end="107:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="117:7">/* Now flush the underlying protocol.  It will also have BDRV_O_NO_FLUSH

     * in the case of cache=unsafe, so there are no useless flushes.

     */</comment>

<label pos:start="119:1" pos:end="119:13"><name pos:start="119:1" pos:end="119:12">flush_parent</name>:</label>

    <return pos:start="121:5" pos:end="121:35">return <expr pos:start="121:12" pos:end="121:34"><call pos:start="121:12" pos:end="121:34"><name pos:start="121:12" pos:end="121:24">bdrv_co_flush</name><argument_list pos:start="121:25" pos:end="121:34">(<argument pos:start="121:26" pos:end="121:33"><expr pos:start="121:26" pos:end="121:33"><name pos:start="121:26" pos:end="121:33"><name pos:start="121:26" pos:end="121:27">bs</name><operator pos:start="121:28" pos:end="121:29">-&gt;</operator><name pos:start="121:30" pos:end="121:33">file</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
