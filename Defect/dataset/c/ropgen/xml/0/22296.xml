<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22296.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:31">decode_scalar</name><parameter_list pos:start="1:32" pos:end="1:88">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:49"><name pos:start="1:33" pos:end="1:45">GetBitContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">gb</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:56"><decl pos:start="1:52" pos:end="1:56"><type pos:start="1:52" pos:end="1:56"><name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:56">k</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">limit</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:87"><decl pos:start="1:70" pos:end="1:87"><type pos:start="1:70" pos:end="1:87"><name pos:start="1:70" pos:end="1:72">int</name></type> <name pos:start="1:74" pos:end="1:87">readsamplesize</name></decl></parameter>)</parameter_list><block pos:start="1:89" pos:end="49:1">{<block_content pos:start="3:5" pos:end="47:13">

    <decl_stmt pos:start="3:5" pos:end="3:30"><decl pos:start="3:5" pos:end="3:29"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">x</name> <init pos:start="3:11" pos:end="3:29">= <expr pos:start="3:13" pos:end="3:29"><call pos:start="3:13" pos:end="3:29"><name pos:start="3:13" pos:end="3:25">get_unary_0_9</name><argument_list pos:start="3:26" pos:end="3:29">(<argument pos:start="3:27" pos:end="3:28"><expr pos:start="3:27" pos:end="3:28"><name pos:start="3:27" pos:end="3:28">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="7:5" pos:end="45:5"><if pos:start="7:5" pos:end="13:5">if <condition pos:start="7:8" pos:end="7:14">(<expr pos:start="7:9" pos:end="7:13"><name pos:start="7:9" pos:end="7:9">x</name> <operator pos:start="7:11" pos:end="7:11">&gt;</operator> <literal type="number" pos:start="7:13" pos:end="7:13">8</literal></expr>)</condition> <block pos:start="7:16" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:41"> <comment type="block" pos:start="7:18" pos:end="7:37">/* RICE THRESHOLD */</comment>

        <comment type="block" pos:start="9:9" pos:end="9:38">/* use alternative encoding */</comment>

        <expr_stmt pos:start="11:9" pos:end="11:41"><expr pos:start="11:9" pos:end="11:40"><name pos:start="11:9" pos:end="11:9">x</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <call pos:start="11:13" pos:end="11:40"><name pos:start="11:13" pos:end="11:20">get_bits</name><argument_list pos:start="11:21" pos:end="11:40">(<argument pos:start="11:22" pos:end="11:23"><expr pos:start="11:22" pos:end="11:23"><name pos:start="11:22" pos:end="11:23">gb</name></expr></argument>, <argument pos:start="11:26" pos:end="11:39"><expr pos:start="11:26" pos:end="11:39"><name pos:start="11:26" pos:end="11:39">readsamplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="13:7" pos:end="45:5">else <block pos:start="13:12" pos:end="45:5">{<block_content pos:start="15:9" pos:end="43:9">

        <if_stmt pos:start="15:9" pos:end="17:22"><if pos:start="15:9" pos:end="17:22">if <condition pos:start="15:12" pos:end="15:23">(<expr pos:start="15:13" pos:end="15:22"><name pos:start="15:13" pos:end="15:13">k</name> <operator pos:start="15:15" pos:end="15:16">&gt;=</operator> <name pos:start="15:18" pos:end="15:22">limit</name></expr>)</condition><block type="pseudo" pos:start="17:13" pos:end="17:22"><block_content pos:start="17:13" pos:end="17:22">

            <expr_stmt pos:start="17:13" pos:end="17:22"><expr pos:start="17:13" pos:end="17:21"><name pos:start="17:13" pos:end="17:13">k</name> <operator pos:start="17:15" pos:end="17:15">=</operator> <name pos:start="17:17" pos:end="17:21">limit</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="21:9" pos:end="43:9"><if pos:start="21:9" pos:end="43:9">if <condition pos:start="21:12" pos:end="21:19">(<expr pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:13">k</name> <operator pos:start="21:15" pos:end="21:16">!=</operator> <literal type="number" pos:start="21:18" pos:end="21:18">1</literal></expr>)</condition> <block pos:start="21:21" pos:end="43:9">{<block_content pos:start="23:13" pos:end="41:37">

            <decl_stmt pos:start="23:13" pos:end="23:45"><decl pos:start="23:13" pos:end="23:44"><type pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">int</name></type> <name pos:start="23:17" pos:end="23:25">extrabits</name> <init pos:start="23:27" pos:end="23:44">= <expr pos:start="23:29" pos:end="23:44"><call pos:start="23:29" pos:end="23:44"><name pos:start="23:29" pos:end="23:37">show_bits</name><argument_list pos:start="23:38" pos:end="23:44">(<argument pos:start="23:39" pos:end="23:40"><expr pos:start="23:39" pos:end="23:40"><name pos:start="23:39" pos:end="23:40">gb</name></expr></argument>, <argument pos:start="23:43" pos:end="23:43"><expr pos:start="23:43" pos:end="23:43"><name pos:start="23:43" pos:end="23:43">k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <comment type="block" pos:start="27:13" pos:end="27:75">/* multiply x by 2^k - 1, as part of their strange algorithm */</comment>

            <expr_stmt pos:start="29:13" pos:end="29:29"><expr pos:start="29:13" pos:end="29:28"><name pos:start="29:13" pos:end="29:13">x</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <operator pos:start="29:17" pos:end="29:17">(</operator><name pos:start="29:18" pos:end="29:18">x</name> <operator pos:start="29:20" pos:end="29:21">&lt;&lt;</operator> <name pos:start="29:23" pos:end="29:23">k</name><operator pos:start="29:24" pos:end="29:24">)</operator> <operator pos:start="29:26" pos:end="29:26">-</operator> <name pos:start="29:28" pos:end="29:28">x</name></expr>;</expr_stmt>



            <if_stmt pos:start="33:13" pos:end="41:37"><if pos:start="33:13" pos:end="39:13">if <condition pos:start="33:16" pos:end="33:30">(<expr pos:start="33:17" pos:end="33:29"><name pos:start="33:17" pos:end="33:25">extrabits</name> <operator pos:start="33:27" pos:end="33:27">&gt;</operator> <literal type="number" pos:start="33:29" pos:end="33:29">1</literal></expr>)</condition> <block pos:start="33:32" pos:end="39:13">{<block_content pos:start="35:17" pos:end="37:33">

                <expr_stmt pos:start="35:17" pos:end="35:35"><expr pos:start="35:17" pos:end="35:34"><name pos:start="35:17" pos:end="35:17">x</name> <operator pos:start="35:19" pos:end="35:20">+=</operator> <name pos:start="35:22" pos:end="35:30">extrabits</name> <operator pos:start="35:32" pos:end="35:32">-</operator> <literal type="number" pos:start="35:34" pos:end="35:34">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="37:17" pos:end="37:33"><expr pos:start="37:17" pos:end="37:32"><call pos:start="37:17" pos:end="37:32"><name pos:start="37:17" pos:end="37:25">skip_bits</name><argument_list pos:start="37:26" pos:end="37:32">(<argument pos:start="37:27" pos:end="37:28"><expr pos:start="37:27" pos:end="37:28"><name pos:start="37:27" pos:end="37:28">gb</name></expr></argument>, <argument pos:start="37:31" pos:end="37:31"><expr pos:start="37:31" pos:end="37:31"><name pos:start="37:31" pos:end="37:31">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="39:15" pos:end="41:37">else<block type="pseudo" pos:start="41:17" pos:end="41:37"><block_content pos:start="41:17" pos:end="41:37">

                <expr_stmt pos:start="41:17" pos:end="41:37"><expr pos:start="41:17" pos:end="41:36"><call pos:start="41:17" pos:end="41:36"><name pos:start="41:17" pos:end="41:25">skip_bits</name><argument_list pos:start="41:26" pos:end="41:36">(<argument pos:start="41:27" pos:end="41:28"><expr pos:start="41:27" pos:end="41:28"><name pos:start="41:27" pos:end="41:28">gb</name></expr></argument>, <argument pos:start="41:31" pos:end="41:35"><expr pos:start="41:31" pos:end="41:35"><name pos:start="41:31" pos:end="41:31">k</name> <operator pos:start="41:33" pos:end="41:33">-</operator> <literal type="number" pos:start="41:35" pos:end="41:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="47:5" pos:end="47:13">return <expr pos:start="47:12" pos:end="47:12"><name pos:start="47:12" pos:end="47:12">x</name></expr>;</return>

</block_content>}</block></function>
</unit>
