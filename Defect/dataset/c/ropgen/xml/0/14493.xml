<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14493.c" pos:tabs="8"><function pos:start="1:1" pos:end="181:2"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:31">qcow2_alloc_cluster_link_l2</name><parameter_list pos:start="1:32" pos:end="1:68">(<parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:67"><decl pos:start="1:55" pos:end="1:67"><type pos:start="1:55" pos:end="1:67"><name pos:start="1:55" pos:end="1:64">QCowL2Meta</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:67">m</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="181:2">{<block_content pos:start="5:5" pos:end="179:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:12">j</name> <init pos:start="7:14" pos:end="7:16">= <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr></init></decl>, <decl pos:start="7:19" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:26">l2_index</name></decl>, <decl pos:start="7:29" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:29" pos:end="7:31">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:60"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">uint64_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:25">old_cluster</name></decl>, <decl pos:start="9:28" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:14"/><name pos:start="9:28" pos:end="9:37">start_sect</name></decl>, <decl pos:start="9:40" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:14"/><name pos:start="9:40" pos:end="9:48">l2_offset</name></decl>, <decl pos:start="9:51" pos:end="9:59"><type ref="prev" pos:start="9:5" pos:end="9:14"><modifier pos:start="9:51" pos:end="9:51">*</modifier></type><name pos:start="9:52" pos:end="9:59">l2_table</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:48"><decl pos:start="11:5" pos:end="11:47"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:27">cluster_offset</name> <init pos:start="11:29" pos:end="11:47">= <expr pos:start="11:31" pos:end="11:47"><name pos:start="11:31" pos:end="11:47"><name pos:start="11:31" pos:end="11:31">m</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:47">cluster_offset</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:12">cow</name> <init pos:start="13:14" pos:end="13:20">= <expr pos:start="13:16" pos:end="13:20"><name pos:start="13:16" pos:end="13:20">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:71"><expr pos:start="17:5" pos:end="17:70"><call pos:start="17:5" pos:end="17:70"><name pos:start="17:5" pos:end="17:31">trace_qcow2_cluster_link_l2</name><argument_list pos:start="17:32" pos:end="17:70">(<argument pos:start="17:33" pos:end="17:53"><expr pos:start="17:33" pos:end="17:53"><call pos:start="17:33" pos:end="17:53"><name pos:start="17:33" pos:end="17:51">qemu_coroutine_self</name><argument_list pos:start="17:52" pos:end="17:53">()</argument_list></call></expr></argument>, <argument pos:start="17:56" pos:end="17:69"><expr pos:start="17:56" pos:end="17:69"><name pos:start="17:56" pos:end="17:69"><name pos:start="17:56" pos:end="17:56">m</name><operator pos:start="17:57" pos:end="17:58">-&gt;</operator><name pos:start="17:59" pos:end="17:69">nb_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="23:17"><if pos:start="21:5" pos:end="23:17">if <condition pos:start="21:8" pos:end="21:28">(<expr pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:22"><name pos:start="21:9" pos:end="21:9">m</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:22">nb_clusters</name></name> <operator pos:start="21:24" pos:end="21:25">==</operator> <literal type="number" pos:start="21:27" pos:end="21:27">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:17"><block_content pos:start="23:9" pos:end="23:17">

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:62"><expr pos:start="27:5" pos:end="27:61"><name pos:start="27:5" pos:end="27:15">old_cluster</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:61"><name pos:start="27:19" pos:end="27:26">g_malloc</name><argument_list pos:start="27:27" pos:end="27:61">(<argument pos:start="27:28" pos:end="27:60"><expr pos:start="27:28" pos:end="27:60"><name pos:start="27:28" pos:end="27:41"><name pos:start="27:28" pos:end="27:28">m</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:41">nb_clusters</name></name> <operator pos:start="27:43" pos:end="27:43">*</operator> <sizeof pos:start="27:45" pos:end="27:60">sizeof<argument_list pos:start="27:51" pos:end="27:60">(<argument pos:start="27:52" pos:end="27:59"><expr pos:start="27:52" pos:end="27:59"><name pos:start="27:52" pos:end="27:59">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:44">/* copy content of unmodified sectors */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:59"><expr pos:start="33:5" pos:end="33:58"><name pos:start="33:5" pos:end="33:14">start_sect</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <operator pos:start="33:18" pos:end="33:18">(</operator><name pos:start="33:19" pos:end="33:27"><name pos:start="33:19" pos:end="33:19">m</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:27">offset</name></name> <operator pos:start="33:29" pos:end="33:29">&amp;</operator> <operator pos:start="33:31" pos:end="33:31">~</operator><operator pos:start="33:32" pos:end="33:32">(</operator><name pos:start="33:33" pos:end="33:47"><name pos:start="33:33" pos:end="33:33">s</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:47">cluster_size</name></name> <operator pos:start="33:49" pos:end="33:49">-</operator> <literal type="number" pos:start="33:51" pos:end="33:51">1</literal><operator pos:start="33:52" pos:end="33:52">)</operator><operator pos:start="33:53" pos:end="33:53">)</operator> <operator pos:start="33:55" pos:end="33:56">&gt;&gt;</operator> <literal type="number" pos:start="33:58" pos:end="33:58">9</literal></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="49:5"><if pos:start="35:5" pos:end="49:5">if <condition pos:start="35:8" pos:end="35:19">(<expr pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:18"><name pos:start="35:9" pos:end="35:9">m</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:18">n_start</name></name></expr>)</condition> <block pos:start="35:21" pos:end="49:5">{<block_content pos:start="37:9" pos:end="47:21">

        <expr_stmt pos:start="37:9" pos:end="37:19"><expr pos:start="37:9" pos:end="37:18"><name pos:start="37:9" pos:end="37:11">cow</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <name pos:start="37:15" pos:end="37:18">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:39"><expr pos:start="39:9" pos:end="39:38"><call pos:start="39:9" pos:end="39:38"><name pos:start="39:9" pos:end="39:28">qemu_co_mutex_unlock</name><argument_list pos:start="39:29" pos:end="39:38">(<argument pos:start="39:30" pos:end="39:37"><expr pos:start="39:30" pos:end="39:37"><operator pos:start="39:30" pos:end="39:30">&amp;</operator><name pos:start="39:31" pos:end="39:37"><name pos:start="39:31" pos:end="39:31">s</name><operator pos:start="39:32" pos:end="39:33">-&gt;</operator><name pos:start="39:34" pos:end="39:37">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:74"><expr pos:start="41:9" pos:end="41:73"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:73"><name pos:start="41:15" pos:end="41:26">copy_sectors</name><argument_list pos:start="41:27" pos:end="41:73">(<argument pos:start="41:28" pos:end="41:29"><expr pos:start="41:28" pos:end="41:29"><name pos:start="41:28" pos:end="41:29">bs</name></expr></argument>, <argument pos:start="41:32" pos:end="41:41"><expr pos:start="41:32" pos:end="41:41"><name pos:start="41:32" pos:end="41:41">start_sect</name></expr></argument>, <argument pos:start="41:44" pos:end="41:57"><expr pos:start="41:44" pos:end="41:57"><name pos:start="41:44" pos:end="41:57">cluster_offset</name></expr></argument>, <argument pos:start="41:60" pos:end="41:60"><expr pos:start="41:60" pos:end="41:60"><literal type="number" pos:start="41:60" pos:end="41:60">0</literal></expr></argument>, <argument pos:start="41:63" pos:end="41:72"><expr pos:start="41:63" pos:end="41:72"><name pos:start="41:63" pos:end="41:72"><name pos:start="41:63" pos:end="41:63">m</name><operator pos:start="41:64" pos:end="41:65">-&gt;</operator><name pos:start="41:66" pos:end="41:72">n_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:37"><expr pos:start="43:9" pos:end="43:36"><call pos:start="43:9" pos:end="43:36"><name pos:start="43:9" pos:end="43:26">qemu_co_mutex_lock</name><argument_list pos:start="43:27" pos:end="43:36">(<argument pos:start="43:28" pos:end="43:35"><expr pos:start="43:28" pos:end="43:35"><operator pos:start="43:28" pos:end="43:28">&amp;</operator><name pos:start="43:29" pos:end="43:35"><name pos:start="43:29" pos:end="43:29">s</name><operator pos:start="43:30" pos:end="43:31">-&gt;</operator><name pos:start="43:32" pos:end="43:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="47:21"><if pos:start="45:9" pos:end="47:21">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:21"><block_content pos:start="47:13" pos:end="47:21">

            <goto pos:start="47:13" pos:end="47:21">goto <name pos:start="47:18" pos:end="47:20">err</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="71:5"><if pos:start="53:5" pos:end="71:5">if <condition pos:start="53:8" pos:end="53:51">(<expr pos:start="53:9" pos:end="53:50"><name pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:9">m</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:23">nb_available</name></name> <operator pos:start="53:25" pos:end="53:25">&amp;</operator> <operator pos:start="53:27" pos:end="53:27">(</operator><name pos:start="53:28" pos:end="53:45"><name pos:start="53:28" pos:end="53:28">s</name><operator pos:start="53:29" pos:end="53:30">-&gt;</operator><name pos:start="53:31" pos:end="53:45">cluster_sectors</name></name> <operator pos:start="53:47" pos:end="53:47">-</operator> <literal type="number" pos:start="53:49" pos:end="53:49">1</literal><operator pos:start="53:50" pos:end="53:50">)</operator></expr>)</condition> <block pos:start="53:53" pos:end="71:5">{<block_content pos:start="55:9" pos:end="69:21">

        <decl_stmt pos:start="55:9" pos:end="55:77"><decl pos:start="55:9" pos:end="55:76"><type pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:16">uint64_t</name></type> <name pos:start="55:18" pos:end="55:20">end</name> <init pos:start="55:22" pos:end="55:76">= <expr pos:start="55:24" pos:end="55:76"><name pos:start="55:24" pos:end="55:38"><name pos:start="55:24" pos:end="55:24">m</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:38">nb_available</name></name> <operator pos:start="55:40" pos:end="55:40">&amp;</operator> <operator pos:start="55:42" pos:end="55:42">~</operator><operator pos:start="55:43" pos:end="55:43">(</operator><name pos:start="55:44" pos:end="55:51">uint64_t</name><operator pos:start="55:52" pos:end="55:52">)</operator><operator pos:start="55:53" pos:end="55:53">(</operator><name pos:start="55:54" pos:end="55:71"><name pos:start="55:54" pos:end="55:54">s</name><operator pos:start="55:55" pos:end="55:56">-&gt;</operator><name pos:start="55:57" pos:end="55:71">cluster_sectors</name></name> <operator pos:start="55:73" pos:end="55:73">-</operator> <literal type="number" pos:start="55:75" pos:end="55:75">1</literal><operator pos:start="55:76" pos:end="55:76">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:19"><expr pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:11">cow</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:18">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:39"><expr pos:start="59:9" pos:end="59:38"><call pos:start="59:9" pos:end="59:38"><name pos:start="59:9" pos:end="59:28">qemu_co_mutex_unlock</name><argument_list pos:start="59:29" pos:end="59:38">(<argument pos:start="59:30" pos:end="59:37"><expr pos:start="59:30" pos:end="59:37"><operator pos:start="59:30" pos:end="59:30">&amp;</operator><name pos:start="59:31" pos:end="59:37"><name pos:start="59:31" pos:end="59:31">s</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:37">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="63:59"><expr pos:start="61:9" pos:end="63:58"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="63:58"><name pos:start="61:15" pos:end="61:26">copy_sectors</name><argument_list pos:start="61:27" pos:end="63:58">(<argument pos:start="61:28" pos:end="61:29"><expr pos:start="61:28" pos:end="61:29"><name pos:start="61:28" pos:end="61:29">bs</name></expr></argument>, <argument pos:start="61:32" pos:end="61:47"><expr pos:start="61:32" pos:end="61:47"><name pos:start="61:32" pos:end="61:41">start_sect</name> <operator pos:start="61:43" pos:end="61:43">+</operator> <name pos:start="61:45" pos:end="61:47">end</name></expr></argument>, <argument pos:start="61:50" pos:end="61:76"><expr pos:start="61:50" pos:end="61:76"><name pos:start="61:50" pos:end="61:63">cluster_offset</name> <operator pos:start="61:65" pos:end="61:65">+</operator> <operator pos:start="61:67" pos:end="61:67">(</operator><name pos:start="61:68" pos:end="61:70">end</name> <operator pos:start="61:72" pos:end="61:73">&lt;&lt;</operator> <literal type="number" pos:start="61:75" pos:end="61:75">9</literal><operator pos:start="61:76" pos:end="61:76">)</operator></expr></argument>,

                <argument pos:start="63:17" pos:end="63:37"><expr pos:start="63:17" pos:end="63:37"><name pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:17">m</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:31">nb_available</name></name> <operator pos:start="63:33" pos:end="63:33">-</operator> <name pos:start="63:35" pos:end="63:37">end</name></expr></argument>, <argument pos:start="63:40" pos:end="63:57"><expr pos:start="63:40" pos:end="63:57"><name pos:start="63:40" pos:end="63:57"><name pos:start="63:40" pos:end="63:40">s</name><operator pos:start="63:41" pos:end="63:42">-&gt;</operator><name pos:start="63:43" pos:end="63:57">cluster_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:37"><expr pos:start="65:9" pos:end="65:36"><call pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:26">qemu_co_mutex_lock</name><argument_list pos:start="65:27" pos:end="65:36">(<argument pos:start="65:28" pos:end="65:35"><expr pos:start="65:28" pos:end="65:35"><operator pos:start="65:28" pos:end="65:28">&amp;</operator><name pos:start="65:29" pos:end="65:35"><name pos:start="65:29" pos:end="65:29">s</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:35">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="69:21"><if pos:start="67:9" pos:end="69:21">if <condition pos:start="67:12" pos:end="67:20">(<expr pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">&lt;</operator> <literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:21"><block_content pos:start="69:13" pos:end="69:21">

            <goto pos:start="69:13" pos:end="69:21">goto <name pos:start="69:18" pos:end="69:20">err</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="87:7">/*

     * Update L2 table.

     *

     * Before we update the L2 table to actually point to the new cluster, we

     * need to be sure that the refcounts have been increased and COW was

     * handled.

     */</comment>

    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:12">(<expr pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">cow</name></expr>)</condition> <block pos:start="89:14" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:56">

        <expr_stmt pos:start="91:9" pos:end="91:56"><expr pos:start="91:9" pos:end="91:55"><call pos:start="91:9" pos:end="91:55"><name pos:start="91:9" pos:end="91:36">qcow2_cache_depends_on_flush</name><argument_list pos:start="91:37" pos:end="91:55">(<argument pos:start="91:38" pos:end="91:54"><expr pos:start="91:38" pos:end="91:54"><name pos:start="91:38" pos:end="91:54"><name pos:start="91:38" pos:end="91:38">s</name><operator pos:start="91:39" pos:end="91:40">-&gt;</operator><name pos:start="91:41" pos:end="91:54">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:79"><expr pos:start="97:5" pos:end="97:78"><call pos:start="97:5" pos:end="97:78"><name pos:start="97:5" pos:end="97:30">qcow2_cache_set_dependency</name><argument_list pos:start="97:31" pos:end="97:78">(<argument pos:start="97:32" pos:end="97:33"><expr pos:start="97:32" pos:end="97:33"><name pos:start="97:32" pos:end="97:33">bs</name></expr></argument>, <argument pos:start="97:36" pos:end="97:52"><expr pos:start="97:36" pos:end="97:52"><name pos:start="97:36" pos:end="97:52"><name pos:start="97:36" pos:end="97:36">s</name><operator pos:start="97:37" pos:end="97:38">-&gt;</operator><name pos:start="97:39" pos:end="97:52">l2_table_cache</name></name></expr></argument>, <argument pos:start="97:55" pos:end="97:77"><expr pos:start="97:55" pos:end="97:77"><name pos:start="97:55" pos:end="97:77"><name pos:start="97:55" pos:end="97:55">s</name><operator pos:start="97:56" pos:end="97:57">-&gt;</operator><name pos:start="97:58" pos:end="97:77">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:77"><expr pos:start="99:5" pos:end="99:76"><name pos:start="99:5" pos:end="99:7">ret</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <call pos:start="99:11" pos:end="99:76"><name pos:start="99:11" pos:end="99:27">get_cluster_table</name><argument_list pos:start="99:28" pos:end="99:76">(<argument pos:start="99:29" pos:end="99:30"><expr pos:start="99:29" pos:end="99:30"><name pos:start="99:29" pos:end="99:30">bs</name></expr></argument>, <argument pos:start="99:33" pos:end="99:41"><expr pos:start="99:33" pos:end="99:41"><name pos:start="99:33" pos:end="99:41"><name pos:start="99:33" pos:end="99:33">m</name><operator pos:start="99:34" pos:end="99:35">-&gt;</operator><name pos:start="99:36" pos:end="99:41">offset</name></name></expr></argument>, <argument pos:start="99:44" pos:end="99:52"><expr pos:start="99:44" pos:end="99:52"><operator pos:start="99:44" pos:end="99:44">&amp;</operator><name pos:start="99:45" pos:end="99:52">l2_table</name></expr></argument>, <argument pos:start="99:55" pos:end="99:64"><expr pos:start="99:55" pos:end="99:64"><operator pos:start="99:55" pos:end="99:55">&amp;</operator><name pos:start="99:56" pos:end="99:64">l2_offset</name></expr></argument>, <argument pos:start="99:67" pos:end="99:75"><expr pos:start="99:67" pos:end="99:75"><operator pos:start="99:67" pos:end="99:67">&amp;</operator><name pos:start="99:68" pos:end="99:75">l2_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:16">(<expr pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:11">ret</name> <operator pos:start="101:13" pos:end="101:13">&lt;</operator> <literal type="number" pos:start="101:15" pos:end="101:15">0</literal></expr>)</condition> <block pos:start="101:18" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:17">

        <goto pos:start="103:9" pos:end="103:17">goto <name pos:start="103:14" pos:end="103:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:62"><expr pos:start="107:5" pos:end="107:61"><call pos:start="107:5" pos:end="107:61"><name pos:start="107:5" pos:end="107:32">qcow2_cache_entry_mark_dirty</name><argument_list pos:start="107:33" pos:end="107:61">(<argument pos:start="107:34" pos:end="107:50"><expr pos:start="107:34" pos:end="107:50"><name pos:start="107:34" pos:end="107:50"><name pos:start="107:34" pos:end="107:34">s</name><operator pos:start="107:35" pos:end="107:36">-&gt;</operator><name pos:start="107:37" pos:end="107:50">l2_table_cache</name></name></expr></argument>, <argument pos:start="107:53" pos:end="107:60"><expr pos:start="107:53" pos:end="107:60"><name pos:start="107:53" pos:end="107:60">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="111:5" pos:end="135:6">for <control pos:start="111:9" pos:end="111:40">(<init pos:start="111:10" pos:end="111:15"><expr pos:start="111:10" pos:end="111:14"><name pos:start="111:10" pos:end="111:10">i</name> <operator pos:start="111:12" pos:end="111:12">=</operator> <literal type="number" pos:start="111:14" pos:end="111:14">0</literal></expr>;</init> <condition pos:start="111:17" pos:end="111:35"><expr pos:start="111:17" pos:end="111:34"><name pos:start="111:17" pos:end="111:17">i</name> <operator pos:start="111:19" pos:end="111:19">&lt;</operator> <name pos:start="111:21" pos:end="111:34"><name pos:start="111:21" pos:end="111:21">m</name><operator pos:start="111:22" pos:end="111:23">-&gt;</operator><name pos:start="111:24" pos:end="111:34">nb_clusters</name></name></expr>;</condition> <incr pos:start="111:37" pos:end="111:39"><expr pos:start="111:37" pos:end="111:39"><name pos:start="111:37" pos:end="111:37">i</name><operator pos:start="111:38" pos:end="111:39">++</operator></expr></incr>)</control> <block pos:start="111:42" pos:end="135:6">{<block_content pos:start="125:9" pos:end="133:65">

        <comment type="block" pos:start="113:9" pos:end="123:54">/* if two concurrent writes happen to the same unallocated cluster

	 * each write allocates separate cluster and writes data concurrently.

	 * The first one to complete updates l2 table with pointer to its

	 * cluster the second one has to do RMW (which is done above by

	 * copy_sectors()), update l2 table with its cluster pointer and free

	 * old cluster. This is what this loop does */</comment>

        <if_stmt pos:start="125:9" pos:end="127:54"><if pos:start="125:9" pos:end="127:54">if<condition pos:start="125:11" pos:end="125:39">(<expr pos:start="125:12" pos:end="125:38"><name pos:start="125:12" pos:end="125:33"><name pos:start="125:12" pos:end="125:19">l2_table</name><index pos:start="125:20" pos:end="125:33">[<expr pos:start="125:21" pos:end="125:32"><name pos:start="125:21" pos:end="125:28">l2_index</name> <operator pos:start="125:30" pos:end="125:30">+</operator> <name pos:start="125:32" pos:end="125:32">i</name></expr>]</index></name> <operator pos:start="125:35" pos:end="125:36">!=</operator> <literal type="number" pos:start="125:38" pos:end="125:38">0</literal></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:54"><block_content pos:start="127:13" pos:end="127:54">

            <expr_stmt pos:start="127:13" pos:end="127:54"><expr pos:start="127:13" pos:end="127:53"><name pos:start="127:13" pos:end="127:28"><name pos:start="127:13" pos:end="127:23">old_cluster</name><index pos:start="127:24" pos:end="127:28">[<expr pos:start="127:25" pos:end="127:27"><name pos:start="127:25" pos:end="127:25">j</name><operator pos:start="127:26" pos:end="127:27">++</operator></expr>]</index></name> <operator pos:start="127:30" pos:end="127:30">=</operator> <name pos:start="127:32" pos:end="127:53"><name pos:start="127:32" pos:end="127:39">l2_table</name><index pos:start="127:40" pos:end="127:53">[<expr pos:start="127:41" pos:end="127:52"><name pos:start="127:41" pos:end="127:48">l2_index</name> <operator pos:start="127:50" pos:end="127:50">+</operator> <name pos:start="127:52" pos:end="127:52">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="131:9" pos:end="133:65"><expr pos:start="131:9" pos:end="133:64"><name pos:start="131:9" pos:end="131:30"><name pos:start="131:9" pos:end="131:16">l2_table</name><index pos:start="131:17" pos:end="131:30">[<expr pos:start="131:18" pos:end="131:29"><name pos:start="131:18" pos:end="131:25">l2_index</name> <operator pos:start="131:27" pos:end="131:27">+</operator> <name pos:start="131:29" pos:end="131:29">i</name></expr>]</index></name> <operator pos:start="131:32" pos:end="131:32">=</operator> <call pos:start="131:34" pos:end="133:64"><name pos:start="131:34" pos:end="131:44">cpu_to_be64</name><argument_list pos:start="131:45" pos:end="133:64">(<argument pos:start="131:46" pos:end="133:63"><expr pos:start="131:46" pos:end="133:63"><operator pos:start="131:46" pos:end="131:46">(</operator><name pos:start="131:47" pos:end="131:60">cluster_offset</name> <operator pos:start="131:62" pos:end="131:62">+</operator>

                    <operator pos:start="133:21" pos:end="133:21">(</operator><name pos:start="133:22" pos:end="133:22">i</name> <operator pos:start="133:24" pos:end="133:25">&lt;&lt;</operator> <name pos:start="133:27" pos:end="133:41"><name pos:start="133:27" pos:end="133:27">s</name><operator pos:start="133:28" pos:end="133:29">-&gt;</operator><name pos:start="133:30" pos:end="133:41">cluster_bits</name></name><operator pos:start="133:42" pos:end="133:42">)</operator><operator pos:start="133:43" pos:end="133:43">)</operator> <operator pos:start="133:45" pos:end="133:45">|</operator> <name pos:start="133:47" pos:end="133:63">QCOW_OFLAG_COPIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     </block_content>}</block></for>





    <expr_stmt pos:start="141:5" pos:end="141:69"><expr pos:start="141:5" pos:end="141:68"><name pos:start="141:5" pos:end="141:7">ret</name> <operator pos:start="141:9" pos:end="141:9">=</operator> <call pos:start="141:11" pos:end="141:68"><name pos:start="141:11" pos:end="141:25">qcow2_cache_put</name><argument_list pos:start="141:26" pos:end="141:68">(<argument pos:start="141:27" pos:end="141:28"><expr pos:start="141:27" pos:end="141:28"><name pos:start="141:27" pos:end="141:28">bs</name></expr></argument>, <argument pos:start="141:31" pos:end="141:47"><expr pos:start="141:31" pos:end="141:47"><name pos:start="141:31" pos:end="141:47"><name pos:start="141:31" pos:end="141:31">s</name><operator pos:start="141:32" pos:end="141:33">-&gt;</operator><name pos:start="141:34" pos:end="141:47">l2_table_cache</name></name></expr></argument>, <argument pos:start="141:50" pos:end="141:67"><expr pos:start="141:50" pos:end="141:67"><operator pos:start="141:50" pos:end="141:50">(</operator><name pos:start="141:51" pos:end="141:54">void</name><operator pos:start="141:55" pos:end="141:55">*</operator><operator pos:start="141:56" pos:end="141:56">*</operator><operator pos:start="141:57" pos:end="141:57">)</operator> <operator pos:start="141:59" pos:end="141:59">&amp;</operator><name pos:start="141:60" pos:end="141:67">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="147:5"><if pos:start="143:5" pos:end="147:5">if <condition pos:start="143:8" pos:end="143:16">(<expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">&lt;</operator> <literal type="number" pos:start="143:15" pos:end="143:15">0</literal></expr>)</condition> <block pos:start="143:18" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:17">

        <goto pos:start="145:9" pos:end="145:17">goto <name pos:start="145:14" pos:end="145:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="151:5" pos:end="157:7">/*

     * If this was a COW, we need to decrease the refcount of the old cluster.

     * Also flush bs-&gt;file to get the right order for L2 and refcount update.

     */</comment>

    <if_stmt pos:start="159:5" pos:end="169:5"><if pos:start="159:5" pos:end="169:5">if <condition pos:start="159:8" pos:end="159:15">(<expr pos:start="159:9" pos:end="159:14"><name pos:start="159:9" pos:end="159:9">j</name> <operator pos:start="159:11" pos:end="159:12">!=</operator> <literal type="number" pos:start="159:14" pos:end="159:14">0</literal></expr>)</condition> <block pos:start="159:17" pos:end="169:5">{<block_content pos:start="161:9" pos:end="167:9">

        <for pos:start="161:9" pos:end="167:9">for <control pos:start="161:13" pos:end="161:31">(<init pos:start="161:14" pos:end="161:19"><expr pos:start="161:14" pos:end="161:18"><name pos:start="161:14" pos:end="161:14">i</name> <operator pos:start="161:16" pos:end="161:16">=</operator> <literal type="number" pos:start="161:18" pos:end="161:18">0</literal></expr>;</init> <condition pos:start="161:21" pos:end="161:26"><expr pos:start="161:21" pos:end="161:25"><name pos:start="161:21" pos:end="161:21">i</name> <operator pos:start="161:23" pos:end="161:23">&lt;</operator> <name pos:start="161:25" pos:end="161:25">j</name></expr>;</condition> <incr pos:start="161:28" pos:end="161:30"><expr pos:start="161:28" pos:end="161:30"><name pos:start="161:28" pos:end="161:28">i</name><operator pos:start="161:29" pos:end="161:30">++</operator></expr></incr>)</control> <block pos:start="161:33" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:69">

            <expr_stmt pos:start="163:13" pos:end="165:69"><expr pos:start="163:13" pos:end="165:68"><call pos:start="163:13" pos:end="165:68"><name pos:start="163:13" pos:end="163:35">qcow2_free_any_clusters</name><argument_list pos:start="163:36" pos:end="165:68">(<argument pos:start="163:37" pos:end="163:38"><expr pos:start="163:37" pos:end="163:38"><name pos:start="163:37" pos:end="163:38">bs</name></expr></argument>,

                <argument pos:start="165:17" pos:end="165:64"><expr pos:start="165:17" pos:end="165:64"><call pos:start="165:17" pos:end="165:43"><name pos:start="165:17" pos:end="165:27">be64_to_cpu</name><argument_list pos:start="165:28" pos:end="165:43">(<argument pos:start="165:29" pos:end="165:42"><expr pos:start="165:29" pos:end="165:42"><name pos:start="165:29" pos:end="165:42"><name pos:start="165:29" pos:end="165:39">old_cluster</name><index pos:start="165:40" pos:end="165:42">[<expr pos:start="165:41" pos:end="165:41"><name pos:start="165:41" pos:end="165:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator pos:start="165:45" pos:end="165:45">&amp;</operator> <operator pos:start="165:47" pos:end="165:47">~</operator><name pos:start="165:48" pos:end="165:64">QCOW_OFLAG_COPIED</name></expr></argument>, <argument pos:start="165:67" pos:end="165:67"><expr pos:start="165:67" pos:end="165:67"><literal type="number" pos:start="165:67" pos:end="165:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:12"><expr pos:start="173:5" pos:end="173:11"><name pos:start="173:5" pos:end="173:7">ret</name> <operator pos:start="173:9" pos:end="173:9">=</operator> <literal type="number" pos:start="173:11" pos:end="173:11">0</literal></expr>;</expr_stmt>

<label pos:start="175:1" pos:end="175:4"><name pos:start="175:1" pos:end="175:3">err</name>:</label>

    <expr_stmt pos:start="177:5" pos:end="177:24"><expr pos:start="177:5" pos:end="177:23"><call pos:start="177:5" pos:end="177:23"><name pos:start="177:5" pos:end="177:10">g_free</name><argument_list pos:start="177:11" pos:end="177:23">(<argument pos:start="177:12" pos:end="177:22"><expr pos:start="177:12" pos:end="177:22"><name pos:start="177:12" pos:end="177:22">old_cluster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="179:5" pos:end="179:15">return <expr pos:start="179:12" pos:end="179:14"><name pos:start="179:12" pos:end="179:14">ret</name></expr>;</return>

 </block_content>}</block></function>
</unit>
