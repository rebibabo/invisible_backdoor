<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22326.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">vmdk_parse_extents</name><parameter_list pos:start="1:30" pos:end="5:43">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:40">char</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">desc</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:68"><decl pos:start="1:49" pos:end="1:68"><type pos:start="1:49" pos:end="1:68"><name pos:start="1:49" pos:end="1:64">BlockDriverState</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">bs</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:56"><decl pos:start="3:31" pos:end="3:56"><type pos:start="3:31" pos:end="3:56"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:40">char</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:56">desc_file_path</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:72"><decl pos:start="3:59" pos:end="3:72"><type pos:start="3:59" pos:end="3:72"><name pos:start="3:59" pos:end="3:63">QDict</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier></type><name pos:start="3:66" pos:end="3:72">options</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:42"><decl pos:start="5:31" pos:end="5:42"><type pos:start="5:31" pos:end="5:42"><name pos:start="5:31" pos:end="5:35">Error</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier><modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:42">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="243:1">{<block_content pos:start="9:5" pos:end="241:13">

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">matches</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:19"><name pos:start="13:10" pos:end="13:15">access</name><index pos:start="13:16" pos:end="13:19">[<expr pos:start="13:17" pos:end="13:18"><literal type="number" pos:start="13:17" pos:end="13:18">11</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:17"><name pos:start="15:10" pos:end="15:13">type</name><index pos:start="15:14" pos:end="15:17">[<expr pos:start="15:15" pos:end="15:16"><literal type="number" pos:start="15:15" pos:end="15:16">11</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">char</name></type> <name pos:start="17:10" pos:end="17:19"><name pos:start="17:10" pos:end="17:14">fname</name><index pos:start="17:15" pos:end="17:19">[<expr pos:start="17:16" pos:end="17:18"><literal type="number" pos:start="17:16" pos:end="17:18">512</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:17">p</name> <init pos:start="19:19" pos:end="19:24">= <expr pos:start="19:21" pos:end="19:24"><name pos:start="19:21" pos:end="19:24">desc</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:19">sectors</name> <init pos:start="21:21" pos:end="21:23">= <expr pos:start="21:23" pos:end="21:23"><literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:23">flat_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:8">char</name> <modifier pos:start="25:10" pos:end="25:10">*</modifier></type><name pos:start="25:11" pos:end="25:21">extent_path</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:13">BdrvChild</name> <modifier pos:start="27:15" pos:end="27:15">*</modifier></type><name pos:start="27:16" pos:end="27:26">extent_file</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:34"><decl pos:start="29:5" pos:end="29:33"><type pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:17">BDRVVmdkState</name> <modifier pos:start="29:19" pos:end="29:19">*</modifier></type><name pos:start="29:20" pos:end="29:20">s</name> <init pos:start="29:22" pos:end="29:33">= <expr pos:start="29:24" pos:end="29:33"><name pos:start="29:24" pos:end="29:33"><name pos:start="29:24" pos:end="29:25">bs</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:23"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:14">VmdkExtent</name> <modifier pos:start="31:16" pos:end="31:16">*</modifier></type><name pos:start="31:17" pos:end="31:22">extent</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:31"><decl pos:start="33:5" pos:end="33:30"><type pos:start="33:5" pos:end="33:8"><name pos:start="33:5" pos:end="33:8">char</name></type> <name pos:start="33:10" pos:end="33:30"><name pos:start="33:10" pos:end="33:26">extent_opt_prefix</name><index pos:start="33:27" pos:end="33:30">[<expr pos:start="33:28" pos:end="33:29"><literal type="number" pos:start="33:28" pos:end="33:29">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:28"><decl pos:start="35:5" pos:end="35:27"><type pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:9">Error</name> <modifier pos:start="35:11" pos:end="35:11">*</modifier></type><name pos:start="35:12" pos:end="35:20">local_err</name> <init pos:start="35:22" pos:end="35:27">= <expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">NULL</name></expr></init></decl>;</decl_stmt>



    <while pos:start="39:5" pos:end="239:5">while <condition pos:start="39:11" pos:end="39:14">(<expr pos:start="39:12" pos:end="39:13"><operator pos:start="39:12" pos:end="39:12">*</operator><name pos:start="39:13" pos:end="39:13">p</name></expr>)</condition> <block pos:start="39:16" pos:end="239:5">{<block_content pos:start="55:9" pos:end="237:9">

        <comment type="block" pos:start="41:9" pos:end="53:11">/* parse extent line in one of below formats:

         *

         * RW [size in sectors] FLAT "file-name.vmdk" OFFSET

         * RW [size in sectors] SPARSE "file-name.vmdk"

         * RW [size in sectors] VMFS "file-name.vmdk"

         * RW [size in sectors] VMFSSPARSE "file-name.vmdk"

         */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:25"><expr pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:19">flat_offset</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <operator pos:start="55:23" pos:end="55:23">-</operator><literal type="number" pos:start="55:24" pos:end="55:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="59:70"><expr pos:start="57:9" pos:end="59:69"><name pos:start="57:9" pos:end="57:15">matches</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <call pos:start="57:19" pos:end="59:69"><name pos:start="57:19" pos:end="57:24">sscanf</name><argument_list pos:start="57:25" pos:end="59:69">(<argument pos:start="57:26" pos:end="57:26"><expr pos:start="57:26" pos:end="57:26"><name pos:start="57:26" pos:end="57:26">p</name></expr></argument>, <argument pos:start="57:29" pos:end="57:78"><expr pos:start="57:29" pos:end="57:78"><literal type="string" pos:start="57:29" pos:end="57:36">"%10s %"</literal> <name pos:start="57:38" pos:end="57:43">SCNd64</name> <literal type="string" pos:start="57:45" pos:end="57:71">" %10s \"%511[^\n\r\"]\" %"</literal> <name pos:start="57:73" pos:end="57:78">SCNd64</name></expr></argument>,

                         <argument pos:start="59:26" pos:end="59:31"><expr pos:start="59:26" pos:end="59:31"><name pos:start="59:26" pos:end="59:31">access</name></expr></argument>, <argument pos:start="59:34" pos:end="59:41"><expr pos:start="59:34" pos:end="59:41"><operator pos:start="59:34" pos:end="59:34">&amp;</operator><name pos:start="59:35" pos:end="59:41">sectors</name></expr></argument>, <argument pos:start="59:44" pos:end="59:47"><expr pos:start="59:44" pos:end="59:47"><name pos:start="59:44" pos:end="59:47">type</name></expr></argument>, <argument pos:start="59:50" pos:end="59:54"><expr pos:start="59:50" pos:end="59:54"><name pos:start="59:50" pos:end="59:54">fname</name></expr></argument>, <argument pos:start="59:57" pos:end="59:68"><expr pos:start="59:57" pos:end="59:68"><operator pos:start="59:57" pos:end="59:57">&amp;</operator><name pos:start="59:58" pos:end="59:68">flat_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="95:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:48">(<expr pos:start="61:13" pos:end="61:47"><name pos:start="61:13" pos:end="61:19">matches</name> <operator pos:start="61:21" pos:end="61:21">&lt;</operator> <literal type="number" pos:start="61:23" pos:end="61:23">4</literal> <operator pos:start="61:25" pos:end="61:26">||</operator> <call pos:start="61:28" pos:end="61:47"><name pos:start="61:28" pos:end="61:33">strcmp</name><argument_list pos:start="61:34" pos:end="61:47">(<argument pos:start="61:35" pos:end="61:40"><expr pos:start="61:35" pos:end="61:40"><name pos:start="61:35" pos:end="61:40">access</name></expr></argument>, <argument pos:start="61:43" pos:end="61:46"><expr pos:start="61:43" pos:end="61:46"><literal type="string" pos:start="61:43" pos:end="61:46">"RW"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:50" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:27">

            <goto pos:start="63:13" pos:end="63:27">goto <name pos:start="63:18" pos:end="63:26">next_line</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="65:11" pos:end="75:9">else if <condition pos:start="65:19" pos:end="65:41">(<expr pos:start="65:20" pos:end="65:40"><operator pos:start="65:20" pos:end="65:20">!</operator><call pos:start="65:21" pos:end="65:40"><name pos:start="65:21" pos:end="65:26">strcmp</name><argument_list pos:start="65:27" pos:end="65:40">(<argument pos:start="65:28" pos:end="65:31"><expr pos:start="65:28" pos:end="65:31"><name pos:start="65:28" pos:end="65:31">type</name></expr></argument>, <argument pos:start="65:34" pos:end="65:39"><expr pos:start="65:34" pos:end="65:39"><literal type="string" pos:start="65:34" pos:end="65:39">"FLAT"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:43" pos:end="75:9">{<block_content pos:start="67:13" pos:end="73:13">

            <if_stmt pos:start="67:13" pos:end="73:13"><if pos:start="67:13" pos:end="73:13">if <condition pos:start="67:16" pos:end="67:48">(<expr pos:start="67:17" pos:end="67:47"><name pos:start="67:17" pos:end="67:23">matches</name> <operator pos:start="67:25" pos:end="67:26">!=</operator> <literal type="number" pos:start="67:28" pos:end="67:28">5</literal> <operator pos:start="67:30" pos:end="67:31">||</operator> <name pos:start="67:33" pos:end="67:43">flat_offset</name> <operator pos:start="67:45" pos:end="67:45">&lt;</operator> <literal type="number" pos:start="67:47" pos:end="67:47">0</literal></expr>)</condition> <block pos:start="67:50" pos:end="73:13">{<block_content pos:start="69:17" pos:end="71:31">

                <expr_stmt pos:start="69:17" pos:end="69:66"><expr pos:start="69:17" pos:end="69:65"><call pos:start="69:17" pos:end="69:65"><name pos:start="69:17" pos:end="69:26">error_setg</name><argument_list pos:start="69:27" pos:end="69:65">(<argument pos:start="69:28" pos:end="69:31"><expr pos:start="69:28" pos:end="69:31"><name pos:start="69:28" pos:end="69:31">errp</name></expr></argument>, <argument pos:start="69:34" pos:end="69:61"><expr pos:start="69:34" pos:end="69:61"><literal type="string" pos:start="69:34" pos:end="69:61">"Invalid extent lines: \n%s"</literal></expr></argument>, <argument pos:start="69:64" pos:end="69:64"><expr pos:start="69:64" pos:end="69:64"><name pos:start="69:64" pos:end="69:64">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="71:17" pos:end="71:31">return <expr pos:start="71:24" pos:end="71:30"><operator pos:start="71:24" pos:end="71:24">-</operator><name pos:start="71:25" pos:end="71:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="75:11" pos:end="89:9">else if <condition pos:start="75:19" pos:end="75:41">(<expr pos:start="75:20" pos:end="75:40"><operator pos:start="75:20" pos:end="75:20">!</operator><call pos:start="75:21" pos:end="75:40"><name pos:start="75:21" pos:end="75:26">strcmp</name><argument_list pos:start="75:27" pos:end="75:40">(<argument pos:start="75:28" pos:end="75:31"><expr pos:start="75:28" pos:end="75:31"><name pos:start="75:28" pos:end="75:31">type</name></expr></argument>, <argument pos:start="75:34" pos:end="75:39"><expr pos:start="75:34" pos:end="75:39"><literal type="string" pos:start="75:34" pos:end="75:39">"VMFS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:43" pos:end="89:9">{<block_content pos:start="77:13" pos:end="87:13">

            <if_stmt pos:start="77:13" pos:end="87:13"><if pos:start="77:13" pos:end="81:13">if <condition pos:start="77:16" pos:end="77:29">(<expr pos:start="77:17" pos:end="77:28"><name pos:start="77:17" pos:end="77:23">matches</name> <operator pos:start="77:25" pos:end="77:26">==</operator> <literal type="number" pos:start="77:28" pos:end="77:28">4</literal></expr>)</condition> <block pos:start="77:31" pos:end="81:13">{<block_content pos:start="79:17" pos:end="79:32">

                <expr_stmt pos:start="79:17" pos:end="79:32"><expr pos:start="79:17" pos:end="79:31"><name pos:start="79:17" pos:end="79:27">flat_offset</name> <operator pos:start="79:29" pos:end="79:29">=</operator> <literal type="number" pos:start="79:31" pos:end="79:31">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="81:15" pos:end="87:13">else <block pos:start="81:20" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:31">

                <expr_stmt pos:start="83:17" pos:end="83:65"><expr pos:start="83:17" pos:end="83:64"><call pos:start="83:17" pos:end="83:64"><name pos:start="83:17" pos:end="83:26">error_setg</name><argument_list pos:start="83:27" pos:end="83:64">(<argument pos:start="83:28" pos:end="83:31"><expr pos:start="83:28" pos:end="83:31"><name pos:start="83:28" pos:end="83:31">errp</name></expr></argument>, <argument pos:start="83:34" pos:end="83:60"><expr pos:start="83:34" pos:end="83:60"><literal type="string" pos:start="83:34" pos:end="83:60">"Invalid extent lines:\n%s"</literal></expr></argument>, <argument pos:start="83:63" pos:end="83:63"><expr pos:start="83:63" pos:end="83:63"><name pos:start="83:63" pos:end="83:63">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="85:17" pos:end="85:31">return <expr pos:start="85:24" pos:end="85:30"><operator pos:start="85:24" pos:end="85:24">-</operator><name pos:start="85:25" pos:end="85:30">EINVAL</name></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="89:11" pos:end="95:9">else if <condition pos:start="89:19" pos:end="89:32">(<expr pos:start="89:20" pos:end="89:31"><name pos:start="89:20" pos:end="89:26">matches</name> <operator pos:start="89:28" pos:end="89:29">!=</operator> <literal type="number" pos:start="89:31" pos:end="89:31">4</literal></expr>)</condition> <block pos:start="89:34" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:27">

            <expr_stmt pos:start="91:13" pos:end="91:61"><expr pos:start="91:13" pos:end="91:60"><call pos:start="91:13" pos:end="91:60"><name pos:start="91:13" pos:end="91:22">error_setg</name><argument_list pos:start="91:23" pos:end="91:60">(<argument pos:start="91:24" pos:end="91:27"><expr pos:start="91:24" pos:end="91:27"><name pos:start="91:24" pos:end="91:27">errp</name></expr></argument>, <argument pos:start="91:30" pos:end="91:56"><expr pos:start="91:30" pos:end="91:56"><literal type="string" pos:start="91:30" pos:end="91:56">"Invalid extent lines:\n%s"</literal></expr></argument>, <argument pos:start="91:59" pos:end="91:59"><expr pos:start="91:59" pos:end="91:59"><name pos:start="91:59" pos:end="91:59">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:27">return <expr pos:start="93:20" pos:end="93:26"><operator pos:start="93:20" pos:end="93:20">-</operator><name pos:start="93:21" pos:end="93:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="99:9" pos:end="109:9"><if pos:start="99:9" pos:end="109:9">if <condition pos:start="99:12" pos:end="105:35">(<expr pos:start="99:13" pos:end="105:34"><name pos:start="99:13" pos:end="99:19">sectors</name> <operator pos:start="99:21" pos:end="99:22">&lt;=</operator> <literal type="number" pos:start="99:24" pos:end="99:24">0</literal> <operator pos:start="99:26" pos:end="99:27">||</operator>

            <operator pos:start="101:13" pos:end="101:13">(</operator><call pos:start="101:14" pos:end="101:33"><name pos:start="101:14" pos:end="101:19">strcmp</name><argument_list pos:start="101:20" pos:end="101:33">(<argument pos:start="101:21" pos:end="101:24"><expr pos:start="101:21" pos:end="101:24"><name pos:start="101:21" pos:end="101:24">type</name></expr></argument>, <argument pos:start="101:27" pos:end="101:32"><expr pos:start="101:27" pos:end="101:32"><literal type="string" pos:start="101:27" pos:end="101:32">"FLAT"</literal></expr></argument>)</argument_list></call> <operator pos:start="101:35" pos:end="101:36">&amp;&amp;</operator> <call pos:start="101:38" pos:end="101:59"><name pos:start="101:38" pos:end="101:43">strcmp</name><argument_list pos:start="101:44" pos:end="101:59">(<argument pos:start="101:45" pos:end="101:48"><expr pos:start="101:45" pos:end="101:48"><name pos:start="101:45" pos:end="101:48">type</name></expr></argument>, <argument pos:start="101:51" pos:end="101:58"><expr pos:start="101:51" pos:end="101:58"><literal type="string" pos:start="101:51" pos:end="101:58">"SPARSE"</literal></expr></argument>)</argument_list></call> <operator pos:start="101:61" pos:end="101:62">&amp;&amp;</operator>

             <call pos:start="103:14" pos:end="103:33"><name pos:start="103:14" pos:end="103:19">strcmp</name><argument_list pos:start="103:20" pos:end="103:33">(<argument pos:start="103:21" pos:end="103:24"><expr pos:start="103:21" pos:end="103:24"><name pos:start="103:21" pos:end="103:24">type</name></expr></argument>, <argument pos:start="103:27" pos:end="103:32"><expr pos:start="103:27" pos:end="103:32"><literal type="string" pos:start="103:27" pos:end="103:32">"VMFS"</literal></expr></argument>)</argument_list></call> <operator pos:start="103:35" pos:end="103:36">&amp;&amp;</operator> <call pos:start="103:38" pos:end="103:63"><name pos:start="103:38" pos:end="103:43">strcmp</name><argument_list pos:start="103:44" pos:end="103:63">(<argument pos:start="103:45" pos:end="103:48"><expr pos:start="103:45" pos:end="103:48"><name pos:start="103:45" pos:end="103:48">type</name></expr></argument>, <argument pos:start="103:51" pos:end="103:62"><expr pos:start="103:51" pos:end="103:62"><literal type="string" pos:start="103:51" pos:end="103:62">"VMFSSPARSE"</literal></expr></argument>)</argument_list></call><operator pos:start="103:64" pos:end="103:64">)</operator> <operator pos:start="103:66" pos:end="103:67">||</operator>

            <operator pos:start="105:13" pos:end="105:13">(</operator><call pos:start="105:14" pos:end="105:33"><name pos:start="105:14" pos:end="105:19">strcmp</name><argument_list pos:start="105:20" pos:end="105:33">(<argument pos:start="105:21" pos:end="105:26"><expr pos:start="105:21" pos:end="105:26"><name pos:start="105:21" pos:end="105:26">access</name></expr></argument>, <argument pos:start="105:29" pos:end="105:32"><expr pos:start="105:29" pos:end="105:32"><literal type="string" pos:start="105:29" pos:end="105:32">"RW"</literal></expr></argument>)</argument_list></call><operator pos:start="105:34" pos:end="105:34">)</operator></expr>)</condition> <block pos:start="105:37" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:27">

            <goto pos:start="107:13" pos:end="107:27">goto <name pos:start="107:18" pos:end="107:26">next_line</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="113:9" pos:end="125:9"><if pos:start="113:9" pos:end="125:9">if <condition pos:start="113:12" pos:end="115:31">(<expr pos:start="113:13" pos:end="115:30"><operator pos:start="113:13" pos:end="113:13">!</operator><call pos:start="113:14" pos:end="113:36"><name pos:start="113:14" pos:end="113:29">path_is_absolute</name><argument_list pos:start="113:30" pos:end="113:36">(<argument pos:start="113:31" pos:end="113:35"><expr pos:start="113:31" pos:end="113:35"><name pos:start="113:31" pos:end="113:35">fname</name></expr></argument>)</argument_list></call> <operator pos:start="113:38" pos:end="113:39">&amp;&amp;</operator> <operator pos:start="113:41" pos:end="113:41">!</operator><call pos:start="113:42" pos:end="113:65"><name pos:start="113:42" pos:end="113:58">path_has_protocol</name><argument_list pos:start="113:59" pos:end="113:65">(<argument pos:start="113:60" pos:end="113:64"><expr pos:start="113:60" pos:end="113:64"><name pos:start="113:60" pos:end="113:64">fname</name></expr></argument>)</argument_list></call> <operator pos:start="113:67" pos:end="113:68">&amp;&amp;</operator>

            <operator pos:start="115:13" pos:end="115:13">!</operator><name pos:start="115:14" pos:end="115:30"><name pos:start="115:14" pos:end="115:27">desc_file_path</name><index pos:start="115:28" pos:end="115:30">[<expr pos:start="115:29" pos:end="115:29"><literal type="number" pos:start="115:29" pos:end="115:29">0</literal></expr>]</index></name></expr>)</condition>

        <block pos:start="117:9" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:27">

            <expr_stmt pos:start="119:13" pos:end="121:71"><expr pos:start="119:13" pos:end="121:70"><call pos:start="119:13" pos:end="121:70"><name pos:start="119:13" pos:end="119:22">error_setg</name><argument_list pos:start="119:23" pos:end="121:70">(<argument pos:start="119:24" pos:end="119:27"><expr pos:start="119:24" pos:end="119:27"><name pos:start="119:24" pos:end="119:27">errp</name></expr></argument>, <argument pos:start="119:30" pos:end="121:45"><expr pos:start="119:30" pos:end="121:45"><literal type="string" pos:start="119:30" pos:end="119:74">"Cannot use relative extent paths with VMDK "</literal>

                       <literal type="string" pos:start="121:24" pos:end="121:45">"descriptor file '%s'"</literal></expr></argument>, <argument pos:start="121:48" pos:end="121:69"><expr pos:start="121:48" pos:end="121:69"><name pos:start="121:48" pos:end="121:69"><name pos:start="121:48" pos:end="121:49">bs</name><operator pos:start="121:50" pos:end="121:51">-&gt;</operator><name pos:start="121:52" pos:end="121:55">file</name><operator pos:start="121:56" pos:end="121:57">-&gt;</operator><name pos:start="121:58" pos:end="121:59">bs</name><operator pos:start="121:60" pos:end="121:61">-&gt;</operator><name pos:start="121:62" pos:end="121:69">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:27">return <expr pos:start="123:20" pos:end="123:26"><operator pos:start="123:20" pos:end="123:20">-</operator><name pos:start="123:21" pos:end="123:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:42"><expr pos:start="129:9" pos:end="129:41"><name pos:start="129:9" pos:end="129:19">extent_path</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <call pos:start="129:23" pos:end="129:41"><name pos:start="129:23" pos:end="129:31">g_malloc0</name><argument_list pos:start="129:32" pos:end="129:41">(<argument pos:start="129:33" pos:end="129:40"><expr pos:start="129:33" pos:end="129:40"><name pos:start="129:33" pos:end="129:40">PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:67"><expr pos:start="131:9" pos:end="131:66"><call pos:start="131:9" pos:end="131:66"><name pos:start="131:9" pos:end="131:20">path_combine</name><argument_list pos:start="131:21" pos:end="131:66">(<argument pos:start="131:22" pos:end="131:32"><expr pos:start="131:22" pos:end="131:32"><name pos:start="131:22" pos:end="131:32">extent_path</name></expr></argument>, <argument pos:start="131:35" pos:end="131:42"><expr pos:start="131:35" pos:end="131:42"><name pos:start="131:35" pos:end="131:42">PATH_MAX</name></expr></argument>, <argument pos:start="131:45" pos:end="131:58"><expr pos:start="131:45" pos:end="131:58"><name pos:start="131:45" pos:end="131:58">desc_file_path</name></expr></argument>, <argument pos:start="131:61" pos:end="131:65"><expr pos:start="131:61" pos:end="131:65"><name pos:start="131:61" pos:end="131:65">fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:76"><expr pos:start="135:9" pos:end="135:75"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <call pos:start="135:15" pos:end="135:75"><name pos:start="135:15" pos:end="135:22">snprintf</name><argument_list pos:start="135:23" pos:end="135:75">(<argument pos:start="135:24" pos:end="135:40"><expr pos:start="135:24" pos:end="135:40"><name pos:start="135:24" pos:end="135:40">extent_opt_prefix</name></expr></argument>, <argument pos:start="135:43" pos:end="135:44"><expr pos:start="135:43" pos:end="135:44"><literal type="number" pos:start="135:43" pos:end="135:44">32</literal></expr></argument>, <argument pos:start="135:47" pos:end="135:58"><expr pos:start="135:47" pos:end="135:58"><literal type="string" pos:start="135:47" pos:end="135:58">"extents.%d"</literal></expr></argument>, <argument pos:start="135:61" pos:end="135:74"><expr pos:start="135:61" pos:end="135:74"><name pos:start="135:61" pos:end="135:74"><name pos:start="135:61" pos:end="135:61">s</name><operator pos:start="135:62" pos:end="135:63">-&gt;</operator><name pos:start="135:64" pos:end="135:74">num_extents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:25"><expr pos:start="137:9" pos:end="137:24"><call pos:start="137:9" pos:end="137:24"><name pos:start="137:9" pos:end="137:14">assert</name><argument_list pos:start="137:15" pos:end="137:24">(<argument pos:start="137:16" pos:end="137:23"><expr pos:start="137:16" pos:end="137:23"><name pos:start="137:16" pos:end="137:18">ret</name> <operator pos:start="137:20" pos:end="137:20">&lt;</operator> <literal type="number" pos:start="137:22" pos:end="137:23">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="141:9" pos:end="143:74"><expr pos:start="141:9" pos:end="143:73"><name pos:start="141:9" pos:end="141:19">extent_file</name> <operator pos:start="141:21" pos:end="141:21">=</operator> <call pos:start="141:23" pos:end="143:73"><name pos:start="141:23" pos:end="141:37">bdrv_open_child</name><argument_list pos:start="141:38" pos:end="143:73">(<argument pos:start="141:39" pos:end="141:49"><expr pos:start="141:39" pos:end="141:49"><name pos:start="141:39" pos:end="141:49">extent_path</name></expr></argument>, <argument pos:start="141:52" pos:end="141:58"><expr pos:start="141:52" pos:end="141:58"><name pos:start="141:52" pos:end="141:58">options</name></expr></argument>, <argument pos:start="141:61" pos:end="141:77"><expr pos:start="141:61" pos:end="141:77"><name pos:start="141:61" pos:end="141:77">extent_opt_prefix</name></expr></argument>,

                                      <argument pos:start="143:39" pos:end="143:40"><expr pos:start="143:39" pos:end="143:40"><name pos:start="143:39" pos:end="143:40">bs</name></expr></argument>, <argument pos:start="143:43" pos:end="143:53"><expr pos:start="143:43" pos:end="143:53"><operator pos:start="143:43" pos:end="143:43">&amp;</operator><name pos:start="143:44" pos:end="143:53">child_file</name></expr></argument>, <argument pos:start="143:56" pos:end="143:60"><expr pos:start="143:56" pos:end="143:60"><name pos:start="143:56" pos:end="143:60">false</name></expr></argument>, <argument pos:start="143:63" pos:end="143:72"><expr pos:start="143:63" pos:end="143:72"><operator pos:start="143:63" pos:end="143:63">&amp;</operator><name pos:start="143:64" pos:end="143:72">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:28"><expr pos:start="145:9" pos:end="145:27"><call pos:start="145:9" pos:end="145:27"><name pos:start="145:9" pos:end="145:14">g_free</name><argument_list pos:start="145:15" pos:end="145:27">(<argument pos:start="145:16" pos:end="145:26"><expr pos:start="145:16" pos:end="145:26"><name pos:start="145:16" pos:end="145:26">extent_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="147:9" pos:end="153:9"><if pos:start="147:9" pos:end="153:9">if <condition pos:start="147:12" pos:end="147:22">(<expr pos:start="147:13" pos:end="147:21"><name pos:start="147:13" pos:end="147:21">local_err</name></expr>)</condition> <block pos:start="147:24" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:27">

            <expr_stmt pos:start="149:13" pos:end="149:45"><expr pos:start="149:13" pos:end="149:44"><call pos:start="149:13" pos:end="149:44"><name pos:start="149:13" pos:end="149:27">error_propagate</name><argument_list pos:start="149:28" pos:end="149:44">(<argument pos:start="149:29" pos:end="149:32"><expr pos:start="149:29" pos:end="149:32"><name pos:start="149:29" pos:end="149:32">errp</name></expr></argument>, <argument pos:start="149:35" pos:end="149:43"><expr pos:start="149:35" pos:end="149:43"><name pos:start="149:35" pos:end="149:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="151:13" pos:end="151:27">return <expr pos:start="151:20" pos:end="151:26"><operator pos:start="151:20" pos:end="151:20">-</operator><name pos:start="151:21" pos:end="151:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="157:9" pos:end="157:35">/* save to extents array */</comment>

        <if_stmt pos:start="159:9" pos:end="217:9"><if pos:start="159:9" pos:end="179:9">if <condition pos:start="159:12" pos:end="159:59">(<expr pos:start="159:13" pos:end="159:58"><operator pos:start="159:13" pos:end="159:13">!</operator><call pos:start="159:14" pos:end="159:33"><name pos:start="159:14" pos:end="159:19">strcmp</name><argument_list pos:start="159:20" pos:end="159:33">(<argument pos:start="159:21" pos:end="159:24"><expr pos:start="159:21" pos:end="159:24"><name pos:start="159:21" pos:end="159:24">type</name></expr></argument>, <argument pos:start="159:27" pos:end="159:32"><expr pos:start="159:27" pos:end="159:32"><literal type="string" pos:start="159:27" pos:end="159:32">"FLAT"</literal></expr></argument>)</argument_list></call> <operator pos:start="159:35" pos:end="159:36">||</operator> <operator pos:start="159:38" pos:end="159:38">!</operator><call pos:start="159:39" pos:end="159:58"><name pos:start="159:39" pos:end="159:44">strcmp</name><argument_list pos:start="159:45" pos:end="159:58">(<argument pos:start="159:46" pos:end="159:49"><expr pos:start="159:46" pos:end="159:49"><name pos:start="159:46" pos:end="159:49">type</name></expr></argument>, <argument pos:start="159:52" pos:end="159:57"><expr pos:start="159:52" pos:end="159:57"><literal type="string" pos:start="159:52" pos:end="159:57">"VMFS"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="159:61" pos:end="179:9">{<block_content pos:start="165:13" pos:end="177:57">

            <comment type="block" pos:start="161:13" pos:end="161:29">/* FLAT extent */</comment>



            <expr_stmt pos:start="165:13" pos:end="167:58"><expr pos:start="165:13" pos:end="167:57"><name pos:start="165:13" pos:end="165:15">ret</name> <operator pos:start="165:17" pos:end="165:17">=</operator> <call pos:start="165:19" pos:end="167:57"><name pos:start="165:19" pos:end="165:33">vmdk_add_extent</name><argument_list pos:start="165:34" pos:end="167:57">(<argument pos:start="165:35" pos:end="165:36"><expr pos:start="165:35" pos:end="165:36"><name pos:start="165:35" pos:end="165:36">bs</name></expr></argument>, <argument pos:start="165:39" pos:end="165:49"><expr pos:start="165:39" pos:end="165:49"><name pos:start="165:39" pos:end="165:49">extent_file</name></expr></argument>, <argument pos:start="165:52" pos:end="165:55"><expr pos:start="165:52" pos:end="165:55"><name pos:start="165:52" pos:end="165:55">true</name></expr></argument>, <argument pos:start="165:58" pos:end="165:64"><expr pos:start="165:58" pos:end="165:64"><name pos:start="165:58" pos:end="165:64">sectors</name></expr></argument>,

                            <argument pos:start="167:29" pos:end="167:29"><expr pos:start="167:29" pos:end="167:29"><literal type="number" pos:start="167:29" pos:end="167:29">0</literal></expr></argument>, <argument pos:start="167:32" pos:end="167:32"><expr pos:start="167:32" pos:end="167:32"><literal type="number" pos:start="167:32" pos:end="167:32">0</literal></expr></argument>, <argument pos:start="167:35" pos:end="167:35"><expr pos:start="167:35" pos:end="167:35"><literal type="number" pos:start="167:35" pos:end="167:35">0</literal></expr></argument>, <argument pos:start="167:38" pos:end="167:38"><expr pos:start="167:38" pos:end="167:38"><literal type="number" pos:start="167:38" pos:end="167:38">0</literal></expr></argument>, <argument pos:start="167:41" pos:end="167:41"><expr pos:start="167:41" pos:end="167:41"><literal type="number" pos:start="167:41" pos:end="167:41">0</literal></expr></argument>, <argument pos:start="167:44" pos:end="167:50"><expr pos:start="167:44" pos:end="167:50"><operator pos:start="167:44" pos:end="167:44">&amp;</operator><name pos:start="167:45" pos:end="167:50">extent</name></expr></argument>, <argument pos:start="167:53" pos:end="167:56"><expr pos:start="167:53" pos:end="167:56"><name pos:start="167:53" pos:end="167:56">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="169:13" pos:end="175:13"><if pos:start="169:13" pos:end="175:13">if <condition pos:start="169:16" pos:end="169:24">(<expr pos:start="169:17" pos:end="169:23"><name pos:start="169:17" pos:end="169:19">ret</name> <operator pos:start="169:21" pos:end="169:21">&lt;</operator> <literal type="number" pos:start="169:23" pos:end="169:23">0</literal></expr>)</condition> <block pos:start="169:26" pos:end="175:13">{<block_content pos:start="171:17" pos:end="173:27">

                <expr_stmt pos:start="171:17" pos:end="171:50"><expr pos:start="171:17" pos:end="171:49"><call pos:start="171:17" pos:end="171:49"><name pos:start="171:17" pos:end="171:32">bdrv_unref_child</name><argument_list pos:start="171:33" pos:end="171:49">(<argument pos:start="171:34" pos:end="171:35"><expr pos:start="171:34" pos:end="171:35"><name pos:start="171:34" pos:end="171:35">bs</name></expr></argument>, <argument pos:start="171:38" pos:end="171:48"><expr pos:start="171:38" pos:end="171:48"><name pos:start="171:38" pos:end="171:48">extent_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="173:17" pos:end="173:27">return <expr pos:start="173:24" pos:end="173:26"><name pos:start="173:24" pos:end="173:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:57"><expr pos:start="177:13" pos:end="177:56"><name pos:start="177:13" pos:end="177:37"><name pos:start="177:13" pos:end="177:18">extent</name><operator pos:start="177:19" pos:end="177:20">-&gt;</operator><name pos:start="177:21" pos:end="177:37">flat_start_offset</name></name> <operator pos:start="177:39" pos:end="177:39">=</operator> <name pos:start="177:41" pos:end="177:51">flat_offset</name> <operator pos:start="177:53" pos:end="177:54">&lt;&lt;</operator> <literal type="number" pos:start="177:56" pos:end="177:56">9</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="179:11" pos:end="209:9">else if <condition pos:start="179:19" pos:end="179:74">(<expr pos:start="179:20" pos:end="179:73"><operator pos:start="179:20" pos:end="179:20">!</operator><call pos:start="179:21" pos:end="179:42"><name pos:start="179:21" pos:end="179:26">strcmp</name><argument_list pos:start="179:27" pos:end="179:42">(<argument pos:start="179:28" pos:end="179:31"><expr pos:start="179:28" pos:end="179:31"><name pos:start="179:28" pos:end="179:31">type</name></expr></argument>, <argument pos:start="179:34" pos:end="179:41"><expr pos:start="179:34" pos:end="179:41"><literal type="string" pos:start="179:34" pos:end="179:41">"SPARSE"</literal></expr></argument>)</argument_list></call> <operator pos:start="179:44" pos:end="179:45">||</operator> <operator pos:start="179:47" pos:end="179:47">!</operator><call pos:start="179:48" pos:end="179:73"><name pos:start="179:48" pos:end="179:53">strcmp</name><argument_list pos:start="179:54" pos:end="179:73">(<argument pos:start="179:55" pos:end="179:58"><expr pos:start="179:55" pos:end="179:58"><name pos:start="179:55" pos:end="179:58">type</name></expr></argument>, <argument pos:start="179:61" pos:end="179:72"><expr pos:start="179:61" pos:end="179:72"><literal type="string" pos:start="179:61" pos:end="179:72">"VMFSSPARSE"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:76" pos:end="209:9">{<block_content pos:start="183:13" pos:end="207:53">

            <comment type="block" pos:start="181:13" pos:end="181:80">/* SPARSE extent and VMFSSPARSE extent are both "COWD" sparse file*/</comment>

            <decl_stmt pos:start="183:13" pos:end="183:65"><decl pos:start="183:13" pos:end="183:64"><type pos:start="183:13" pos:end="183:18"><name pos:start="183:13" pos:end="183:16">char</name> <modifier pos:start="183:18" pos:end="183:18">*</modifier></type><name pos:start="183:19" pos:end="183:21">buf</name> <init pos:start="183:23" pos:end="183:64">= <expr pos:start="183:25" pos:end="183:64"><call pos:start="183:25" pos:end="183:64"><name pos:start="183:25" pos:end="183:38">vmdk_read_desc</name><argument_list pos:start="183:39" pos:end="183:64">(<argument pos:start="183:40" pos:end="183:54"><expr pos:start="183:40" pos:end="183:54"><name pos:start="183:40" pos:end="183:54"><name pos:start="183:40" pos:end="183:50">extent_file</name><operator pos:start="183:51" pos:end="183:52">-&gt;</operator><name pos:start="183:53" pos:end="183:54">bs</name></name></expr></argument>, <argument pos:start="183:57" pos:end="183:57"><expr pos:start="183:57" pos:end="183:57"><literal type="number" pos:start="183:57" pos:end="183:57">0</literal></expr></argument>, <argument pos:start="183:60" pos:end="183:63"><expr pos:start="183:60" pos:end="183:63"><name pos:start="183:60" pos:end="183:63">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="185:13" pos:end="195:13"><if pos:start="185:13" pos:end="189:13">if <condition pos:start="185:16" pos:end="185:21">(<expr pos:start="185:17" pos:end="185:20"><operator pos:start="185:17" pos:end="185:17">!</operator><name pos:start="185:18" pos:end="185:20">buf</name></expr>)</condition> <block pos:start="185:23" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:30">

                <expr_stmt pos:start="187:17" pos:end="187:30"><expr pos:start="187:17" pos:end="187:29"><name pos:start="187:17" pos:end="187:19">ret</name> <operator pos:start="187:21" pos:end="187:21">=</operator> <operator pos:start="187:23" pos:end="187:23">-</operator><name pos:start="187:24" pos:end="187:29">EINVAL</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="189:15" pos:end="195:13">else <block pos:start="189:20" pos:end="195:13">{<block_content pos:start="191:17" pos:end="193:54">

                <expr_stmt pos:start="191:17" pos:end="193:54"><expr pos:start="191:17" pos:end="193:53"><name pos:start="191:17" pos:end="191:19">ret</name> <operator pos:start="191:21" pos:end="191:21">=</operator> <call pos:start="191:23" pos:end="193:53"><name pos:start="191:23" pos:end="191:38">vmdk_open_sparse</name><argument_list pos:start="191:39" pos:end="193:53">(<argument pos:start="191:40" pos:end="191:41"><expr pos:start="191:40" pos:end="191:41"><name pos:start="191:40" pos:end="191:41">bs</name></expr></argument>, <argument pos:start="191:44" pos:end="191:54"><expr pos:start="191:44" pos:end="191:54"><name pos:start="191:44" pos:end="191:54">extent_file</name></expr></argument>, <argument pos:start="191:57" pos:end="191:70"><expr pos:start="191:57" pos:end="191:70"><name pos:start="191:57" pos:end="191:70"><name pos:start="191:57" pos:end="191:58">bs</name><operator pos:start="191:59" pos:end="191:60">-&gt;</operator><name pos:start="191:61" pos:end="191:70">open_flags</name></name></expr></argument>, <argument pos:start="191:73" pos:end="191:75"><expr pos:start="191:73" pos:end="191:75"><name pos:start="191:73" pos:end="191:75">buf</name></expr></argument>,

                                       <argument pos:start="193:40" pos:end="193:46"><expr pos:start="193:40" pos:end="193:46"><name pos:start="193:40" pos:end="193:46">options</name></expr></argument>, <argument pos:start="193:49" pos:end="193:52"><expr pos:start="193:49" pos:end="193:52"><name pos:start="193:49" pos:end="193:52">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:24"><expr pos:start="197:13" pos:end="197:23"><call pos:start="197:13" pos:end="197:23"><name pos:start="197:13" pos:end="197:18">g_free</name><argument_list pos:start="197:19" pos:end="197:23">(<argument pos:start="197:20" pos:end="197:22"><expr pos:start="197:20" pos:end="197:22"><name pos:start="197:20" pos:end="197:22">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="199:13" pos:end="205:13"><if pos:start="199:13" pos:end="205:13">if <condition pos:start="199:16" pos:end="199:20">(<expr pos:start="199:17" pos:end="199:19"><name pos:start="199:17" pos:end="199:19">ret</name></expr>)</condition> <block pos:start="199:22" pos:end="205:13">{<block_content pos:start="201:17" pos:end="203:27">

                <expr_stmt pos:start="201:17" pos:end="201:50"><expr pos:start="201:17" pos:end="201:49"><call pos:start="201:17" pos:end="201:49"><name pos:start="201:17" pos:end="201:32">bdrv_unref_child</name><argument_list pos:start="201:33" pos:end="201:49">(<argument pos:start="201:34" pos:end="201:35"><expr pos:start="201:34" pos:end="201:35"><name pos:start="201:34" pos:end="201:35">bs</name></expr></argument>, <argument pos:start="201:38" pos:end="201:48"><expr pos:start="201:38" pos:end="201:48"><name pos:start="201:38" pos:end="201:48">extent_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="203:17" pos:end="203:27">return <expr pos:start="203:24" pos:end="203:26"><name pos:start="203:24" pos:end="203:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:53"><expr pos:start="207:13" pos:end="207:52"><name pos:start="207:13" pos:end="207:18">extent</name> <operator pos:start="207:20" pos:end="207:20">=</operator> <operator pos:start="207:22" pos:end="207:22">&amp;</operator><name pos:start="207:23" pos:end="207:52"><name pos:start="207:23" pos:end="207:23">s</name><operator pos:start="207:24" pos:end="207:25">-&gt;</operator><name pos:start="207:26" pos:end="207:32">extents</name><index pos:start="207:33" pos:end="207:52">[<expr pos:start="207:34" pos:end="207:51"><name pos:start="207:34" pos:end="207:47"><name pos:start="207:34" pos:end="207:34">s</name><operator pos:start="207:35" pos:end="207:36">-&gt;</operator><name pos:start="207:37" pos:end="207:47">num_extents</name></name> <operator pos:start="207:49" pos:end="207:49">-</operator> <literal type="number" pos:start="207:51" pos:end="207:51">1</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="209:11" pos:end="217:9">else <block pos:start="209:16" pos:end="217:9">{<block_content pos:start="211:13" pos:end="215:28">

            <expr_stmt pos:start="211:13" pos:end="211:67"><expr pos:start="211:13" pos:end="211:66"><call pos:start="211:13" pos:end="211:66"><name pos:start="211:13" pos:end="211:22">error_setg</name><argument_list pos:start="211:23" pos:end="211:66">(<argument pos:start="211:24" pos:end="211:27"><expr pos:start="211:24" pos:end="211:27"><name pos:start="211:24" pos:end="211:27">errp</name></expr></argument>, <argument pos:start="211:30" pos:end="211:59"><expr pos:start="211:30" pos:end="211:59"><literal type="string" pos:start="211:30" pos:end="211:59">"Unsupported extent type '%s'"</literal></expr></argument>, <argument pos:start="211:62" pos:end="211:65"><expr pos:start="211:62" pos:end="211:65"><name pos:start="211:62" pos:end="211:65">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:46"><expr pos:start="213:13" pos:end="213:45"><call pos:start="213:13" pos:end="213:45"><name pos:start="213:13" pos:end="213:28">bdrv_unref_child</name><argument_list pos:start="213:29" pos:end="213:45">(<argument pos:start="213:30" pos:end="213:31"><expr pos:start="213:30" pos:end="213:31"><name pos:start="213:30" pos:end="213:31">bs</name></expr></argument>, <argument pos:start="213:34" pos:end="213:44"><expr pos:start="213:34" pos:end="213:44"><name pos:start="213:34" pos:end="213:44">extent_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="215:13" pos:end="215:28">return <expr pos:start="215:20" pos:end="215:27"><operator pos:start="215:20" pos:end="215:20">-</operator><name pos:start="215:21" pos:end="215:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:38"><expr pos:start="219:9" pos:end="219:37"><name pos:start="219:9" pos:end="219:20"><name pos:start="219:9" pos:end="219:14">extent</name><operator pos:start="219:15" pos:end="219:16">-&gt;</operator><name pos:start="219:17" pos:end="219:20">type</name></name> <operator pos:start="219:22" pos:end="219:22">=</operator> <call pos:start="219:24" pos:end="219:37"><name pos:start="219:24" pos:end="219:31">g_strdup</name><argument_list pos:start="219:32" pos:end="219:37">(<argument pos:start="219:33" pos:end="219:36"><expr pos:start="219:33" pos:end="219:36"><name pos:start="219:33" pos:end="219:36">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="221:1" pos:end="221:10"><name pos:start="221:1" pos:end="221:9">next_line</name>:</label>

        <comment type="block" pos:start="223:9" pos:end="223:31">/* move to next line */</comment>

        <while pos:start="225:9" pos:end="237:9">while <condition pos:start="225:15" pos:end="225:18">(<expr pos:start="225:16" pos:end="225:17"><operator pos:start="225:16" pos:end="225:16">*</operator><name pos:start="225:17" pos:end="225:17">p</name></expr>)</condition> <block pos:start="225:20" pos:end="237:9">{<block_content pos:start="227:13" pos:end="235:16">

            <if_stmt pos:start="227:13" pos:end="233:13"><if pos:start="227:13" pos:end="233:13">if <condition pos:start="227:16" pos:end="227:27">(<expr pos:start="227:17" pos:end="227:26"><operator pos:start="227:17" pos:end="227:17">*</operator><name pos:start="227:18" pos:end="227:18">p</name> <operator pos:start="227:20" pos:end="227:21">==</operator> <literal type="char" pos:start="227:23" pos:end="227:26">'\n'</literal></expr>)</condition> <block pos:start="227:29" pos:end="233:13">{<block_content pos:start="229:17" pos:end="231:22">

                <expr_stmt pos:start="229:17" pos:end="229:20"><expr pos:start="229:17" pos:end="229:19"><name pos:start="229:17" pos:end="229:17">p</name><operator pos:start="229:18" pos:end="229:19">++</operator></expr>;</expr_stmt>

                <break pos:start="231:17" pos:end="231:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:16"><expr pos:start="235:13" pos:end="235:15"><name pos:start="235:13" pos:end="235:13">p</name><operator pos:start="235:14" pos:end="235:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></while>

    <return pos:start="241:5" pos:end="241:13">return <expr pos:start="241:12" pos:end="241:12"><literal type="number" pos:start="241:12" pos:end="241:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
