<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14862.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_block_commit</name><parameter_list pos:start="1:22" pos:end="11:35">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">device</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:35"><decl pos:start="3:23" pos:end="3:35"><type pos:start="3:23" pos:end="3:35"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:35">has_base</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:53"><decl pos:start="3:38" pos:end="3:53"><type pos:start="3:38" pos:end="3:53"><specifier pos:start="3:38" pos:end="3:42">const</specifier> <name pos:start="3:44" pos:end="3:47">char</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:53">base</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:34"><decl pos:start="5:23" pos:end="5:34"><type pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:26">bool</name></type> <name pos:start="5:28" pos:end="5:34">has_top</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:51"><decl pos:start="5:37" pos:end="5:51"><type pos:start="5:37" pos:end="5:51"><specifier pos:start="5:37" pos:end="5:41">const</specifier> <name pos:start="5:43" pos:end="5:46">char</name> <modifier pos:start="5:48" pos:end="5:48">*</modifier></type><name pos:start="5:49" pos:end="5:51">top</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:43"><decl pos:start="7:23" pos:end="7:43"><type pos:start="7:23" pos:end="7:43"><name pos:start="7:23" pos:end="7:26">bool</name></type> <name pos:start="7:28" pos:end="7:43">has_backing_file</name></decl></parameter>, <parameter pos:start="7:46" pos:end="7:69"><decl pos:start="7:46" pos:end="7:69"><type pos:start="7:46" pos:end="7:69"><specifier pos:start="7:46" pos:end="7:50">const</specifier> <name pos:start="7:52" pos:end="7:55">char</name> <modifier pos:start="7:57" pos:end="7:57">*</modifier></type><name pos:start="7:58" pos:end="7:69">backing_file</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:36"><decl pos:start="9:23" pos:end="9:36"><type pos:start="9:23" pos:end="9:36"><name pos:start="9:23" pos:end="9:26">bool</name></type> <name pos:start="9:28" pos:end="9:36">has_speed</name></decl></parameter>, <parameter pos:start="9:39" pos:end="9:51"><decl pos:start="9:39" pos:end="9:51"><type pos:start="9:39" pos:end="9:51"><name pos:start="9:39" pos:end="9:45">int64_t</name></type> <name pos:start="9:47" pos:end="9:51">speed</name></decl></parameter>,

                      <parameter pos:start="11:23" pos:end="11:34"><decl pos:start="11:23" pos:end="11:34"><type pos:start="11:23" pos:end="11:34"><name pos:start="11:23" pos:end="11:27">Error</name> <modifier pos:start="11:29" pos:end="11:29">*</modifier><modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="169:1">{<block_content pos:start="15:5" pos:end="167:5">

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">BlockDriverState</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:39"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">BlockDriverState</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:29">base_bs</name></decl>, <decl pos:start="17:32" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:22"><modifier pos:start="17:32" pos:end="17:32">*</modifier></type><name pos:start="17:33" pos:end="17:38">top_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">Error</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:20">local_err</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="21:5" pos:end="25:7">/* This will be part of the QMP command, if/when the

     * BlockdevOnError change for blkmirror makes it in

     */</comment>

    <decl_stmt pos:start="27:5" pos:end="27:56"><decl pos:start="27:5" pos:end="27:55"><type pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:19">BlockdevOnError</name></type> <name pos:start="27:21" pos:end="27:28">on_error</name> <init pos:start="27:30" pos:end="27:55">= <expr pos:start="27:32" pos:end="27:55"><name pos:start="27:32" pos:end="27:55">BLOCKDEV_ON_ERROR_REPORT</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:19">(<expr pos:start="31:9" pos:end="31:18"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:18">has_speed</name></expr>)</condition> <block pos:start="31:21" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:18">

        <expr_stmt pos:start="33:9" pos:end="33:18"><expr pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:13">speed</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:38">/* drain all i/o before commits */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:21"><expr pos:start="41:5" pos:end="41:20"><call pos:start="41:5" pos:end="41:20"><name pos:start="41:5" pos:end="41:18">bdrv_drain_all</name><argument_list pos:start="41:19" pos:end="41:20">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="53:64">/* Important Note:

     *  libvirt relies on the DeviceNotFound error class in order to probe for

     *  live commit feature versions; for this to work, we must make sure to

     *  perform the device lookup before any generic errors that may occur in a

     *  scenario in which all optional arguments are omitted. */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:27"><expr pos:start="55:5" pos:end="55:26"><name pos:start="55:5" pos:end="55:6">bs</name> <operator pos:start="55:8" pos:end="55:8">=</operator> <call pos:start="55:10" pos:end="55:26"><name pos:start="55:10" pos:end="55:18">bdrv_find</name><argument_list pos:start="55:19" pos:end="55:26">(<argument pos:start="55:20" pos:end="55:25"><expr pos:start="55:20" pos:end="55:25"><name pos:start="55:20" pos:end="55:25">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:12">(<expr pos:start="57:9" pos:end="57:11"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:11">bs</name></expr>)</condition> <block pos:start="57:14" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:15">

        <expr_stmt pos:start="59:9" pos:end="59:55"><expr pos:start="59:9" pos:end="59:54"><call pos:start="59:9" pos:end="59:54"><name pos:start="59:9" pos:end="59:17">error_set</name><argument_list pos:start="59:18" pos:end="59:54">(<argument pos:start="59:19" pos:end="59:22"><expr pos:start="59:19" pos:end="59:22"><name pos:start="59:19" pos:end="59:22">errp</name></expr></argument>, <argument pos:start="59:25" pos:end="59:45"><expr pos:start="59:25" pos:end="59:45"><name pos:start="59:25" pos:end="59:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="59:48" pos:end="59:53"><expr pos:start="59:48" pos:end="59:53"><name pos:start="59:48" pos:end="59:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:59">(<expr pos:start="67:9" pos:end="67:58"><call pos:start="67:9" pos:end="67:58"><name pos:start="67:9" pos:end="67:26">bdrv_op_is_blocked</name><argument_list pos:start="67:27" pos:end="67:58">(<argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><name pos:start="67:28" pos:end="67:29">bs</name></expr></argument>, <argument pos:start="67:32" pos:end="67:51"><expr pos:start="67:32" pos:end="67:51"><name pos:start="67:32" pos:end="67:51">BLOCK_OP_TYPE_COMMIT</name></expr></argument>, <argument pos:start="67:54" pos:end="67:57"><expr pos:start="67:54" pos:end="67:57"><name pos:start="67:54" pos:end="67:57">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:61" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:15">

        <return pos:start="69:9" pos:end="69:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:44">/* default top_bs is the active layer */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:16"><expr pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:10">top_bs</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <name pos:start="77:14" pos:end="77:15">bs</name></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:23">(<expr pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:15">has_top</name> <operator pos:start="81:17" pos:end="81:18">&amp;&amp;</operator> <name pos:start="81:20" pos:end="81:22">top</name></expr>)</condition> <block pos:start="81:25" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:9">

        <if_stmt pos:start="83:9" pos:end="87:9"><if pos:start="83:9" pos:end="87:9">if <condition pos:start="83:12" pos:end="83:43">(<expr pos:start="83:13" pos:end="83:42"><call pos:start="83:13" pos:end="83:37"><name pos:start="83:13" pos:end="83:18">strcmp</name><argument_list pos:start="83:19" pos:end="83:37">(<argument pos:start="83:20" pos:end="83:31"><expr pos:start="83:20" pos:end="83:31"><name pos:start="83:20" pos:end="83:31"><name pos:start="83:20" pos:end="83:21">bs</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:31">filename</name></name></expr></argument>, <argument pos:start="83:34" pos:end="83:36"><expr pos:start="83:34" pos:end="83:36"><name pos:start="83:34" pos:end="83:36">top</name></expr></argument>)</argument_list></call> <operator pos:start="83:39" pos:end="83:40">!=</operator> <literal type="number" pos:start="83:42" pos:end="83:42">0</literal></expr>)</condition> <block pos:start="83:45" pos:end="87:9">{<block_content pos:start="85:13" pos:end="85:54">

            <expr_stmt pos:start="85:13" pos:end="85:54"><expr pos:start="85:13" pos:end="85:53"><name pos:start="85:13" pos:end="85:18">top_bs</name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="85:53"><name pos:start="85:22" pos:end="85:44">bdrv_find_backing_image</name><argument_list pos:start="85:45" pos:end="85:53">(<argument pos:start="85:46" pos:end="85:47"><expr pos:start="85:46" pos:end="85:47"><name pos:start="85:46" pos:end="85:47">bs</name></expr></argument>, <argument pos:start="85:50" pos:end="85:52"><expr pos:start="85:50" pos:end="85:52"><name pos:start="85:50" pos:end="85:52">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:23">(<expr pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:14">top_bs</name> <operator pos:start="93:16" pos:end="93:17">==</operator> <name pos:start="93:19" pos:end="93:22">NULL</name></expr>)</condition> <block pos:start="93:25" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:15">

        <expr_stmt pos:start="95:9" pos:end="95:76"><expr pos:start="95:9" pos:end="95:75"><call pos:start="95:9" pos:end="95:75"><name pos:start="95:9" pos:end="95:18">error_setg</name><argument_list pos:start="95:19" pos:end="95:75">(<argument pos:start="95:20" pos:end="95:23"><expr pos:start="95:20" pos:end="95:23"><name pos:start="95:20" pos:end="95:23">errp</name></expr></argument>, <argument pos:start="95:26" pos:end="95:54"><expr pos:start="95:26" pos:end="95:54"><literal type="string" pos:start="95:26" pos:end="95:54">"Top image file %s not found"</literal></expr></argument>, <argument pos:start="95:57" pos:end="95:74"><expr pos:start="95:57" pos:end="95:74"><ternary pos:start="95:57" pos:end="95:74"><condition pos:start="95:57" pos:end="95:61"><expr pos:start="95:57" pos:end="95:59"><name pos:start="95:57" pos:end="95:59">top</name></expr> ?</condition><then pos:start="95:63" pos:end="95:65"> <expr pos:start="95:63" pos:end="95:65"><name pos:start="95:63" pos:end="95:65">top</name></expr> </then><else pos:start="95:67" pos:end="95:74">: <expr pos:start="95:69" pos:end="95:74"><literal type="string" pos:start="95:69" pos:end="95:74">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="103:5" pos:end="111:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:25">(<expr pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:16">has_base</name> <operator pos:start="103:18" pos:end="103:19">&amp;&amp;</operator> <name pos:start="103:21" pos:end="103:24">base</name></expr>)</condition> <block pos:start="103:27" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:56">

        <expr_stmt pos:start="105:9" pos:end="105:56"><expr pos:start="105:9" pos:end="105:55"><name pos:start="105:9" pos:end="105:15">base_bs</name> <operator pos:start="105:17" pos:end="105:17">=</operator> <call pos:start="105:19" pos:end="105:55"><name pos:start="105:19" pos:end="105:41">bdrv_find_backing_image</name><argument_list pos:start="105:42" pos:end="105:55">(<argument pos:start="105:43" pos:end="105:48"><expr pos:start="105:43" pos:end="105:48"><name pos:start="105:43" pos:end="105:48">top_bs</name></expr></argument>, <argument pos:start="105:51" pos:end="105:54"><expr pos:start="105:51" pos:end="105:54"><name pos:start="105:51" pos:end="105:54">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="111:5">else <block pos:start="107:12" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:41">

        <expr_stmt pos:start="109:9" pos:end="109:41"><expr pos:start="109:9" pos:end="109:40"><name pos:start="109:9" pos:end="109:15">base_bs</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <call pos:start="109:19" pos:end="109:40"><name pos:start="109:19" pos:end="109:32">bdrv_find_base</name><argument_list pos:start="109:33" pos:end="109:40">(<argument pos:start="109:34" pos:end="109:39"><expr pos:start="109:34" pos:end="109:39"><name pos:start="109:34" pos:end="109:39">top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:24">(<expr pos:start="115:9" pos:end="115:23"><name pos:start="115:9" pos:end="115:15">base_bs</name> <operator pos:start="115:17" pos:end="115:18">==</operator> <name pos:start="115:20" pos:end="115:23">NULL</name></expr>)</condition> <block pos:start="115:26" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:15">

        <expr_stmt pos:start="117:9" pos:end="117:67"><expr pos:start="117:9" pos:end="117:66"><call pos:start="117:9" pos:end="117:66"><name pos:start="117:9" pos:end="117:17">error_set</name><argument_list pos:start="117:18" pos:end="117:66">(<argument pos:start="117:19" pos:end="117:22"><expr pos:start="117:19" pos:end="117:22"><name pos:start="117:19" pos:end="117:22">errp</name></expr></argument>, <argument pos:start="117:25" pos:end="117:43"><expr pos:start="117:25" pos:end="117:43"><name pos:start="117:25" pos:end="117:43">QERR_BASE_NOT_FOUND</name></expr></argument>, <argument pos:start="117:46" pos:end="117:65"><expr pos:start="117:46" pos:end="117:65"><ternary pos:start="117:46" pos:end="117:65"><condition pos:start="117:46" pos:end="117:51"><expr pos:start="117:46" pos:end="117:49"><name pos:start="117:46" pos:end="117:49">base</name></expr> ?</condition><then pos:start="117:53" pos:end="117:56"> <expr pos:start="117:53" pos:end="117:56"><name pos:start="117:53" pos:end="117:56">base</name></expr> </then><else pos:start="117:58" pos:end="117:65">: <expr pos:start="117:60" pos:end="117:65"><literal type="string" pos:start="117:60" pos:end="117:65">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="119:9" pos:end="119:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:62">/* Do not allow attempts to commit an image into itself */</comment>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:26">(<expr pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:14">top_bs</name> <operator pos:start="127:16" pos:end="127:17">==</operator> <name pos:start="127:19" pos:end="127:25">base_bs</name></expr>)</condition> <block pos:start="127:28" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:15">

        <expr_stmt pos:start="129:9" pos:end="129:63"><expr pos:start="129:9" pos:end="129:62"><call pos:start="129:9" pos:end="129:62"><name pos:start="129:9" pos:end="129:18">error_setg</name><argument_list pos:start="129:19" pos:end="129:62">(<argument pos:start="129:20" pos:end="129:23"><expr pos:start="129:20" pos:end="129:23"><name pos:start="129:20" pos:end="129:23">errp</name></expr></argument>, <argument pos:start="129:26" pos:end="129:61"><expr pos:start="129:26" pos:end="129:61"><literal type="string" pos:start="129:26" pos:end="129:61">"cannot commit an image into itself"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="159:5"><if pos:start="137:5" pos:end="153:5">if <condition pos:start="137:8" pos:end="137:21">(<expr pos:start="137:9" pos:end="137:20"><name pos:start="137:9" pos:end="137:14">top_bs</name> <operator pos:start="137:16" pos:end="137:17">==</operator> <name pos:start="137:19" pos:end="137:20">bs</name></expr>)</condition> <block pos:start="137:23" pos:end="153:5">{<block_content pos:start="139:9" pos:end="151:44">

        <if_stmt pos:start="139:9" pos:end="147:9"><if pos:start="139:9" pos:end="147:9">if <condition pos:start="139:12" pos:end="139:29">(<expr pos:start="139:13" pos:end="139:28"><name pos:start="139:13" pos:end="139:28">has_backing_file</name></expr>)</condition> <block pos:start="139:31" pos:end="147:9">{<block_content pos:start="141:13" pos:end="145:19">

            <expr_stmt pos:start="141:13" pos:end="143:63"><expr pos:start="141:13" pos:end="143:62"><call pos:start="141:13" pos:end="143:62"><name pos:start="141:13" pos:end="141:22">error_setg</name><argument_list pos:start="141:23" pos:end="143:62">(<argument pos:start="141:24" pos:end="141:27"><expr pos:start="141:24" pos:end="141:27"><name pos:start="141:24" pos:end="141:27">errp</name></expr></argument>, <argument pos:start="141:30" pos:end="143:61"><expr pos:start="141:30" pos:end="143:61"><literal type="string" pos:start="141:30" pos:end="141:56">"'backing-file' specified,"</literal>

                             <literal type="string" pos:start="143:30" pos:end="143:61">" but 'top' is the active layer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="145:13" pos:end="145:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="149:9" pos:end="151:44"><expr pos:start="149:9" pos:end="151:43"><call pos:start="149:9" pos:end="151:43"><name pos:start="149:9" pos:end="149:27">commit_active_start</name><argument_list pos:start="149:28" pos:end="151:43">(<argument pos:start="149:29" pos:end="149:30"><expr pos:start="149:29" pos:end="149:30"><name pos:start="149:29" pos:end="149:30">bs</name></expr></argument>, <argument pos:start="149:33" pos:end="149:39"><expr pos:start="149:33" pos:end="149:39"><name pos:start="149:33" pos:end="149:39">base_bs</name></expr></argument>, <argument pos:start="149:42" pos:end="149:46"><expr pos:start="149:42" pos:end="149:46"><name pos:start="149:42" pos:end="149:46">speed</name></expr></argument>, <argument pos:start="149:49" pos:end="149:56"><expr pos:start="149:49" pos:end="149:56"><name pos:start="149:49" pos:end="149:56">on_error</name></expr></argument>, <argument pos:start="149:59" pos:end="149:70"><expr pos:start="149:59" pos:end="149:70"><name pos:start="149:59" pos:end="149:70">block_job_cb</name></expr></argument>,

                            <argument pos:start="151:29" pos:end="151:30"><expr pos:start="151:29" pos:end="151:30"><name pos:start="151:29" pos:end="151:30">bs</name></expr></argument>, <argument pos:start="151:33" pos:end="151:42"><expr pos:start="151:33" pos:end="151:42"><operator pos:start="151:33" pos:end="151:33">&amp;</operator><name pos:start="151:34" pos:end="151:42">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="153:7" pos:end="159:5">else <block pos:start="153:12" pos:end="159:5">{<block_content pos:start="155:9" pos:end="157:73">

        <expr_stmt pos:start="155:9" pos:end="157:73"><expr pos:start="155:9" pos:end="157:72"><call pos:start="155:9" pos:end="157:72"><name pos:start="155:9" pos:end="155:20">commit_start</name><argument_list pos:start="155:21" pos:end="157:72">(<argument pos:start="155:22" pos:end="155:23"><expr pos:start="155:22" pos:end="155:23"><name pos:start="155:22" pos:end="155:23">bs</name></expr></argument>, <argument pos:start="155:26" pos:end="155:32"><expr pos:start="155:26" pos:end="155:32"><name pos:start="155:26" pos:end="155:32">base_bs</name></expr></argument>, <argument pos:start="155:35" pos:end="155:40"><expr pos:start="155:35" pos:end="155:40"><name pos:start="155:35" pos:end="155:40">top_bs</name></expr></argument>, <argument pos:start="155:43" pos:end="155:47"><expr pos:start="155:43" pos:end="155:47"><name pos:start="155:43" pos:end="155:47">speed</name></expr></argument>, <argument pos:start="155:50" pos:end="155:57"><expr pos:start="155:50" pos:end="155:57"><name pos:start="155:50" pos:end="155:57">on_error</name></expr></argument>, <argument pos:start="155:60" pos:end="155:71"><expr pos:start="155:60" pos:end="155:71"><name pos:start="155:60" pos:end="155:71">block_job_cb</name></expr></argument>, <argument pos:start="155:74" pos:end="155:75"><expr pos:start="155:74" pos:end="155:75"><name pos:start="155:74" pos:end="155:75">bs</name></expr></argument>,

                     <argument pos:start="157:22" pos:end="157:59"><expr pos:start="157:22" pos:end="157:59"><ternary pos:start="157:22" pos:end="157:59"><condition pos:start="157:22" pos:end="157:39"><expr pos:start="157:22" pos:end="157:37"><name pos:start="157:22" pos:end="157:37">has_backing_file</name></expr> ?</condition><then pos:start="157:41" pos:end="157:52"> <expr pos:start="157:41" pos:end="157:52"><name pos:start="157:41" pos:end="157:52">backing_file</name></expr> </then><else pos:start="157:54" pos:end="157:59">: <expr pos:start="157:56" pos:end="157:59"><name pos:start="157:56" pos:end="157:59">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="157:62" pos:end="157:71"><expr pos:start="157:62" pos:end="157:71"><operator pos:start="157:62" pos:end="157:62">&amp;</operator><name pos:start="157:63" pos:end="157:71">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:26">(<expr pos:start="161:9" pos:end="161:25"><name pos:start="161:9" pos:end="161:17">local_err</name> <operator pos:start="161:19" pos:end="161:20">!=</operator> <name pos:start="161:22" pos:end="161:25">NULL</name></expr>)</condition> <block pos:start="161:28" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:15">

        <expr_stmt pos:start="163:9" pos:end="163:41"><expr pos:start="163:9" pos:end="163:40"><call pos:start="163:9" pos:end="163:40"><name pos:start="163:9" pos:end="163:23">error_propagate</name><argument_list pos:start="163:24" pos:end="163:40">(<argument pos:start="163:25" pos:end="163:28"><expr pos:start="163:25" pos:end="163:28"><name pos:start="163:25" pos:end="163:28">errp</name></expr></argument>, <argument pos:start="163:31" pos:end="163:39"><expr pos:start="163:31" pos:end="163:39"><name pos:start="163:31" pos:end="163:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="165:9" pos:end="165:15">return;</return>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
