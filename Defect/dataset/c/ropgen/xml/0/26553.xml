<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26553.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:31">memory_region_iommu_replay</name><parameter_list pos:start="1:32" pos:end="3:46">(<parameter pos:start="1:33" pos:end="1:48"><decl pos:start="1:33" pos:end="1:48"><type pos:start="1:33" pos:end="1:48"><name pos:start="1:33" pos:end="1:44">MemoryRegion</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">mr</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><name pos:start="1:51" pos:end="1:63">IOMMUNotifier</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:66">n</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:45"><decl pos:start="3:33" pos:end="3:45"><type pos:start="3:33" pos:end="3:45"><name pos:start="3:33" pos:end="3:36">bool</name></type> <name pos:start="3:38" pos:end="3:45">is_write</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:5">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">hwaddr</name></type> <name pos:start="7:12" pos:end="7:15">addr</name></decl>, <decl pos:start="7:18" pos:end="7:28"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:18" pos:end="7:28">granularity</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:17">IOMMUTLBEntry</name></type> <name pos:start="9:19" pos:end="9:23">iotlb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:20">IOMMUAccessFlags</name></type> <name pos:start="11:22" pos:end="11:25">flag</name> <init pos:start="11:27" pos:end="11:58">= <expr pos:start="11:29" pos:end="11:58"><ternary pos:start="11:29" pos:end="11:58"><condition pos:start="11:29" pos:end="11:38"><expr pos:start="11:29" pos:end="11:36"><name pos:start="11:29" pos:end="11:36">is_write</name></expr> ?</condition><then pos:start="11:40" pos:end="11:47"> <expr pos:start="11:40" pos:end="11:47"><name pos:start="11:40" pos:end="11:47">IOMMU_WO</name></expr> </then><else pos:start="11:49" pos:end="11:58">: <expr pos:start="11:51" pos:end="11:58"><name pos:start="11:51" pos:end="11:58">IOMMU_RO</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:60">/* If the IOMMU has its own replay callback, override */</comment>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:30">(<expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:10">mr</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:21">iommu_ops</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:29">replay</name></name></expr>)</condition> <block pos:start="17:32" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:37"><expr pos:start="19:9" pos:end="19:36"><call pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:10">mr</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:21">iommu_ops</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:29">replay</name></name><argument_list pos:start="19:30" pos:end="19:36">(<argument pos:start="19:31" pos:end="19:32"><expr pos:start="19:31" pos:end="19:32"><name pos:start="19:31" pos:end="19:32">mr</name></expr></argument>, <argument pos:start="19:35" pos:end="19:35"><expr pos:start="19:35" pos:end="19:35"><name pos:start="19:35" pos:end="19:35">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:60"><expr pos:start="27:5" pos:end="27:59"><name pos:start="27:5" pos:end="27:15">granularity</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:59"><name pos:start="27:19" pos:end="27:55">memory_region_iommu_get_min_page_size</name><argument_list pos:start="27:56" pos:end="27:59">(<argument pos:start="27:57" pos:end="27:58"><expr pos:start="27:57" pos:end="27:58"><name pos:start="27:57" pos:end="27:58">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="31:5" pos:end="53:5">for <control pos:start="31:9" pos:end="31:70">(<init pos:start="31:10" pos:end="31:18"><expr pos:start="31:10" pos:end="31:17"><name pos:start="31:10" pos:end="31:13">addr</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <literal type="number" pos:start="31:17" pos:end="31:17">0</literal></expr>;</init> <condition pos:start="31:20" pos:end="31:49"><expr pos:start="31:20" pos:end="31:48"><name pos:start="31:20" pos:end="31:23">addr</name> <operator pos:start="31:25" pos:end="31:25">&lt;</operator> <call pos:start="31:27" pos:end="31:48"><name pos:start="31:27" pos:end="31:44">memory_region_size</name><argument_list pos:start="31:45" pos:end="31:48">(<argument pos:start="31:46" pos:end="31:47"><expr pos:start="31:46" pos:end="31:47"><name pos:start="31:46" pos:end="31:47">mr</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="31:51" pos:end="31:69"><expr pos:start="31:51" pos:end="31:69"><name pos:start="31:51" pos:end="31:54">addr</name> <operator pos:start="31:56" pos:end="31:57">+=</operator> <name pos:start="31:59" pos:end="31:69">granularity</name></expr></incr>)</control> <block pos:start="31:72" pos:end="53:5">{<block_content pos:start="33:9" pos:end="51:9">

        <expr_stmt pos:start="33:9" pos:end="33:57"><expr pos:start="33:9" pos:end="33:56"><name pos:start="33:9" pos:end="33:13">iotlb</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:56"><name pos:start="33:17" pos:end="33:40"><name pos:start="33:17" pos:end="33:18">mr</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:29">iommu_ops</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:40">translate</name></name><argument_list pos:start="33:41" pos:end="33:56">(<argument pos:start="33:42" pos:end="33:43"><expr pos:start="33:42" pos:end="33:43"><name pos:start="33:42" pos:end="33:43">mr</name></expr></argument>, <argument pos:start="33:46" pos:end="33:49"><expr pos:start="33:46" pos:end="33:49"><name pos:start="33:46" pos:end="33:49">addr</name></expr></argument>, <argument pos:start="33:52" pos:end="33:55"><expr pos:start="33:52" pos:end="33:55"><name pos:start="33:52" pos:end="33:55">flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="39:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:37">(<expr pos:start="35:13" pos:end="35:36"><name pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:17">iotlb</name><operator pos:start="35:18" pos:end="35:18">.</operator><name pos:start="35:19" pos:end="35:22">perm</name></name> <operator pos:start="35:24" pos:end="35:25">!=</operator> <name pos:start="35:27" pos:end="35:36">IOMMU_NONE</name></expr>)</condition> <block pos:start="35:39" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:33">

            <expr_stmt pos:start="37:13" pos:end="37:33"><expr pos:start="37:13" pos:end="37:32"><call pos:start="37:13" pos:end="37:32"><name pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:13">n</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:21">notify</name></name><argument_list pos:start="37:22" pos:end="37:32">(<argument pos:start="37:23" pos:end="37:23"><expr pos:start="37:23" pos:end="37:23"><name pos:start="37:23" pos:end="37:23">n</name></expr></argument>, <argument pos:start="37:26" pos:end="37:31"><expr pos:start="37:26" pos:end="37:31"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:31">iotlb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="43:9" pos:end="45:70">/* if (2^64 - MR size) &lt; granularity, it's possible to get an

         * infinite loop here.  This should catch such a wraparound */</comment>

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:40">(<expr pos:start="47:13" pos:end="47:39"><operator pos:start="47:13" pos:end="47:13">(</operator><name pos:start="47:14" pos:end="47:17">addr</name> <operator pos:start="47:19" pos:end="47:19">+</operator> <name pos:start="47:21" pos:end="47:31">granularity</name><operator pos:start="47:32" pos:end="47:32">)</operator> <operator pos:start="47:34" pos:end="47:34">&lt;</operator> <name pos:start="47:36" pos:end="47:39">addr</name></expr>)</condition> <block pos:start="47:42" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:18">

            <break pos:start="49:13" pos:end="49:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
