<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9976.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">net_client_init1</name><parameter_list pos:start="1:28" pos:end="1:76">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><specifier pos:start="1:29" pos:end="1:33">const</specifier> <name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">object</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:61">is_netdev</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:75"><decl pos:start="1:64" pos:end="1:75"><type pos:start="1:64" pos:end="1:75"><name pos:start="1:64" pos:end="1:68">Error</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier><modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:75">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:13">

    <union pos:start="5:5" pos:end="11:8">union <block pos:start="5:11" pos:end="11:5">{

        <decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:25"><specifier pos:start="7:9" pos:end="7:13">const</specifier> <name pos:start="7:15" pos:end="7:20">Netdev</name>    <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:31">netdev</name></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:29"><decl pos:start="9:9" pos:end="9:28"><type pos:start="9:9" pos:end="9:25"><specifier pos:start="9:9" pos:end="9:13">const</specifier> <name pos:start="9:15" pos:end="9:23">NetLegacy</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:28">net</name></decl>;</decl_stmt>

    }</block> <decl pos:start="11:7" pos:end="11:7"><name pos:start="11:7" pos:end="11:7">u</name></decl>;</union>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:28"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:26">NetClientOptions</name> <modifier pos:start="13:28" pos:end="13:28">*</modifier></type><name pos:start="13:29" pos:end="13:32">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:20">name</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="85:5"><if pos:start="19:5" pos:end="43:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:17">is_netdev</name></expr>)</condition> <block pos:start="19:20" pos:end="43:5">{<block_content pos:start="21:9" pos:end="41:9">

        <expr_stmt pos:start="21:9" pos:end="21:26"><expr pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:9">u</name><operator pos:start="21:10" pos:end="21:10">.</operator><name pos:start="21:11" pos:end="21:16">netdev</name></name> <operator pos:start="21:18" pos:end="21:18">=</operator> <name pos:start="21:20" pos:end="21:25">object</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:12">opts</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:29"><name pos:start="23:16" pos:end="23:16">u</name><operator pos:start="23:17" pos:end="23:17">.</operator><name pos:start="23:18" pos:end="23:23">netdev</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:29">opts</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:28"><expr pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:12">name</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:27"><name pos:start="25:16" pos:end="25:16">u</name><operator pos:start="25:17" pos:end="25:17">.</operator><name pos:start="25:18" pos:end="25:23">netdev</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:27">id</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="29:9" pos:end="41:9"><if pos:start="29:9" pos:end="41:9">if <condition pos:start="29:12" pos:end="33:45">(<expr pos:start="29:13" pos:end="33:44"><name pos:start="29:13" pos:end="29:22"><name pos:start="29:13" pos:end="29:16">opts</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:22">kind</name></name> <operator pos:start="29:24" pos:end="29:25">==</operator> <name pos:start="29:27" pos:end="29:54">NET_CLIENT_OPTIONS_KIND_DUMP</name> <operator pos:start="29:56" pos:end="29:57">||</operator>

            <name pos:start="31:13" pos:end="31:22"><name pos:start="31:13" pos:end="31:16">opts</name><operator pos:start="31:17" pos:end="31:18">-&gt;</operator><name pos:start="31:19" pos:end="31:22">kind</name></name> <operator pos:start="31:24" pos:end="31:25">==</operator> <name pos:start="31:27" pos:end="31:53">NET_CLIENT_OPTIONS_KIND_NIC</name> <operator pos:start="31:55" pos:end="31:56">||</operator>

            <operator pos:start="33:13" pos:end="33:13">!</operator><name pos:start="33:14" pos:end="33:44"><name pos:start="33:14" pos:end="33:32">net_client_init_fun</name><index pos:start="33:33" pos:end="33:44">[<expr pos:start="33:34" pos:end="33:43"><name pos:start="33:34" pos:end="33:43"><name pos:start="33:34" pos:end="33:37">opts</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:43">kind</name></name></expr>]</index></name></expr>)</condition> <block pos:start="33:47" pos:end="41:9">{<block_content pos:start="35:13" pos:end="39:22">

            <expr_stmt pos:start="35:13" pos:end="37:48"><expr pos:start="35:13" pos:end="37:47"><call pos:start="35:13" pos:end="37:47"><name pos:start="35:13" pos:end="35:22">error_setg</name><argument_list pos:start="35:23" pos:end="37:47">(<argument pos:start="35:24" pos:end="35:27"><expr pos:start="35:24" pos:end="35:27"><name pos:start="35:24" pos:end="35:27">errp</name></expr></argument>, <argument pos:start="35:30" pos:end="35:57"><expr pos:start="35:30" pos:end="35:57"><name pos:start="35:30" pos:end="35:57">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="35:60" pos:end="35:65"><expr pos:start="35:60" pos:end="35:65"><literal type="string" pos:start="35:60" pos:end="35:65">"type"</literal></expr></argument>,

                       <argument pos:start="37:24" pos:end="37:46"><expr pos:start="37:24" pos:end="37:46"><literal type="string" pos:start="37:24" pos:end="37:46">"a netdev backend type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:22">return <expr pos:start="39:20" pos:end="39:21"><operator pos:start="39:20" pos:end="39:20">-</operator><literal type="number" pos:start="39:21" pos:end="39:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="85:5">else <block pos:start="43:12" pos:end="85:5">{<block_content pos:start="45:9" pos:end="83:9">

        <expr_stmt pos:start="45:9" pos:end="45:23"><expr pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:13"><name pos:start="45:9" pos:end="45:9">u</name><operator pos:start="45:10" pos:end="45:10">.</operator><name pos:start="45:11" pos:end="45:13">net</name></name> <operator pos:start="45:15" pos:end="45:15">=</operator> <name pos:start="45:17" pos:end="45:22">object</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:27"><expr pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:12">opts</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:26"><name pos:start="47:16" pos:end="47:16">u</name><operator pos:start="47:17" pos:end="47:17">.</operator><name pos:start="47:18" pos:end="47:20">net</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:26">opts</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:58">(<expr pos:start="49:13" pos:end="49:57"><name pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:16">opts</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:22">kind</name></name> <operator pos:start="49:24" pos:end="49:25">==</operator> <name pos:start="49:27" pos:end="49:57">NET_CLIENT_OPTIONS_KIND_HUBPORT</name></expr>)</condition> <block pos:start="49:60" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:22">

            <expr_stmt pos:start="51:13" pos:end="53:37"><expr pos:start="51:13" pos:end="53:36"><call pos:start="51:13" pos:end="53:36"><name pos:start="51:13" pos:end="51:22">error_setg</name><argument_list pos:start="51:23" pos:end="53:36">(<argument pos:start="51:24" pos:end="51:27"><expr pos:start="51:24" pos:end="51:27"><name pos:start="51:24" pos:end="51:27">errp</name></expr></argument>, <argument pos:start="51:30" pos:end="51:57"><expr pos:start="51:30" pos:end="51:57"><name pos:start="51:30" pos:end="51:57">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="51:60" pos:end="51:65"><expr pos:start="51:60" pos:end="51:65"><literal type="string" pos:start="51:60" pos:end="51:65">"type"</literal></expr></argument>,

                       <argument pos:start="53:24" pos:end="53:35"><expr pos:start="53:24" pos:end="53:35"><literal type="string" pos:start="53:24" pos:end="53:35">"a net type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:22">return <expr pos:start="55:20" pos:end="55:21"><operator pos:start="55:20" pos:end="55:20">-</operator><literal type="number" pos:start="55:21" pos:end="55:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="59:9" pos:end="59:78">/* missing optional values have been initialized to "all bits zero" */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:55"><expr pos:start="61:9" pos:end="61:54"><name pos:start="61:9" pos:end="61:12">name</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <ternary pos:start="61:16" pos:end="61:54"><condition pos:start="61:16" pos:end="61:30"><expr pos:start="61:16" pos:end="61:28"><name pos:start="61:16" pos:end="61:28"><name pos:start="61:16" pos:end="61:16">u</name><operator pos:start="61:17" pos:end="61:17">.</operator><name pos:start="61:18" pos:end="61:20">net</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:28">has_id</name></name></expr> ?</condition><then pos:start="61:32" pos:end="61:40"> <expr pos:start="61:32" pos:end="61:40"><name pos:start="61:32" pos:end="61:40"><name pos:start="61:32" pos:end="61:32">u</name><operator pos:start="61:33" pos:end="61:33">.</operator><name pos:start="61:34" pos:end="61:36">net</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:40">id</name></name></expr> </then><else pos:start="61:42" pos:end="61:54">: <expr pos:start="61:44" pos:end="61:54"><name pos:start="61:44" pos:end="61:54"><name pos:start="61:44" pos:end="61:44">u</name><operator pos:start="61:45" pos:end="61:45">.</operator><name pos:start="61:46" pos:end="61:48">net</name><operator pos:start="61:49" pos:end="61:50">-&gt;</operator><name pos:start="61:51" pos:end="61:54">name</name></name></expr></else></ternary></expr>;</expr_stmt>



        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:55">(<expr pos:start="65:13" pos:end="65:54"><name pos:start="65:13" pos:end="65:22"><name pos:start="65:13" pos:end="65:16">opts</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:22">kind</name></name> <operator pos:start="65:24" pos:end="65:25">==</operator> <name pos:start="65:27" pos:end="65:54">NET_CLIENT_OPTIONS_KIND_NONE</name></expr>)</condition> <block pos:start="65:57" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:21">

            <return pos:start="67:13" pos:end="67:21">return <expr pos:start="67:20" pos:end="67:20"><literal type="number" pos:start="67:20" pos:end="67:20">0</literal></expr>;</return> <comment type="block" pos:start="67:23" pos:end="67:41">/* nothing to do */</comment>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="73:9" pos:end="83:9"><if pos:start="73:9" pos:end="83:9">if <condition pos:start="73:12" pos:end="73:45">(<expr pos:start="73:13" pos:end="73:44"><operator pos:start="73:13" pos:end="73:13">!</operator><name pos:start="73:14" pos:end="73:44"><name pos:start="73:14" pos:end="73:32">net_client_init_fun</name><index pos:start="73:33" pos:end="73:44">[<expr pos:start="73:34" pos:end="73:43"><name pos:start="73:34" pos:end="73:43"><name pos:start="73:34" pos:end="73:37">opts</name><operator pos:start="73:38" pos:end="73:39">-&gt;</operator><name pos:start="73:40" pos:end="73:43">kind</name></name></expr>]</index></name></expr>)</condition> <block pos:start="73:47" pos:end="83:9">{<block_content pos:start="75:13" pos:end="81:22">

            <expr_stmt pos:start="75:13" pos:end="79:44"><expr pos:start="75:13" pos:end="79:43"><call pos:start="75:13" pos:end="79:43"><name pos:start="75:13" pos:end="75:22">error_setg</name><argument_list pos:start="75:23" pos:end="79:43">(<argument pos:start="75:24" pos:end="75:27"><expr pos:start="75:24" pos:end="75:27"><name pos:start="75:24" pos:end="75:27">errp</name></expr></argument>, <argument pos:start="75:30" pos:end="75:57"><expr pos:start="75:30" pos:end="75:57"><name pos:start="75:30" pos:end="75:57">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="75:60" pos:end="75:65"><expr pos:start="75:60" pos:end="75:65"><literal type="string" pos:start="75:60" pos:end="75:65">"type"</literal></expr></argument>,

                       <argument pos:start="77:24" pos:end="79:42"><expr pos:start="77:24" pos:end="79:42"><literal type="string" pos:start="77:24" pos:end="77:70">"a net backend type (maybe it is not compiled "</literal>

                       <literal type="string" pos:start="79:24" pos:end="79:42">"into this binary)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:22">return <expr pos:start="81:20" pos:end="81:21"><operator pos:start="81:20" pos:end="81:20">-</operator><literal type="number" pos:start="81:21" pos:end="81:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="89:5" pos:end="127:5"><if pos:start="89:5" pos:end="127:5">if <condition pos:start="89:8" pos:end="89:40">(<expr pos:start="89:9" pos:end="89:39"><name pos:start="89:9" pos:end="89:39"><name pos:start="89:9" pos:end="89:27">net_client_init_fun</name><index pos:start="89:28" pos:end="89:39">[<expr pos:start="89:29" pos:end="89:38"><name pos:start="89:29" pos:end="89:38"><name pos:start="89:29" pos:end="89:32">opts</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:38">kind</name></name></expr>]</index></name></expr>)</condition> <block pos:start="89:42" pos:end="127:5">{<block_content pos:start="91:9" pos:end="125:9">

        <decl_stmt pos:start="91:9" pos:end="91:36"><decl pos:start="91:9" pos:end="91:35"><type pos:start="91:9" pos:end="91:24"><name pos:start="91:9" pos:end="91:22">NetClientState</name> <modifier pos:start="91:24" pos:end="91:24">*</modifier></type><name pos:start="91:25" pos:end="91:28">peer</name> <init pos:start="91:30" pos:end="91:35">= <expr pos:start="91:32" pos:end="91:35"><name pos:start="91:32" pos:end="91:35">NULL</name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="95:9" pos:end="97:24">/* Do not add to a vlan if it's a -netdev or a nic with a netdev=

         * parameter. */</comment>

        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="107:9">if <condition pos:start="99:12" pos:end="103:37">(<expr pos:start="99:13" pos:end="103:36"><operator pos:start="99:13" pos:end="99:13">!</operator><name pos:start="99:14" pos:end="99:22">is_netdev</name> <operator pos:start="99:24" pos:end="99:25">&amp;&amp;</operator>

            <operator pos:start="101:13" pos:end="101:13">(</operator><name pos:start="101:14" pos:end="101:23"><name pos:start="101:14" pos:end="101:17">opts</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:23">kind</name></name> <operator pos:start="101:25" pos:end="101:26">!=</operator> <name pos:start="101:28" pos:end="101:54">NET_CLIENT_OPTIONS_KIND_NIC</name> <operator pos:start="101:56" pos:end="101:57">||</operator>

             <operator pos:start="103:14" pos:end="103:14">!</operator><name pos:start="103:15" pos:end="103:35"><name pos:start="103:15" pos:end="103:18">opts</name><operator pos:start="103:19" pos:end="103:20">-&gt;</operator><name pos:start="103:21" pos:end="103:23">nic</name><operator pos:start="103:24" pos:end="103:25">-&gt;</operator><name pos:start="103:26" pos:end="103:35">has_netdev</name></name><operator pos:start="103:36" pos:end="103:36">)</operator></expr>)</condition> <block pos:start="103:39" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:77">

            <expr_stmt pos:start="105:13" pos:end="105:77"><expr pos:start="105:13" pos:end="105:76"><name pos:start="105:13" pos:end="105:16">peer</name> <operator pos:start="105:18" pos:end="105:18">=</operator> <call pos:start="105:20" pos:end="105:76"><name pos:start="105:20" pos:end="105:35">net_hub_add_port</name><argument_list pos:start="105:36" pos:end="105:76">(<argument pos:start="105:37" pos:end="105:69"><expr pos:start="105:37" pos:end="105:69"><ternary pos:start="105:37" pos:end="105:69"><condition pos:start="105:37" pos:end="105:53"><expr pos:start="105:37" pos:end="105:51"><name pos:start="105:37" pos:end="105:51"><name pos:start="105:37" pos:end="105:37">u</name><operator pos:start="105:38" pos:end="105:38">.</operator><name pos:start="105:39" pos:end="105:41">net</name><operator pos:start="105:42" pos:end="105:43">-&gt;</operator><name pos:start="105:44" pos:end="105:51">has_vlan</name></name></expr> ?</condition><then pos:start="105:55" pos:end="105:65"> <expr pos:start="105:55" pos:end="105:65"><name pos:start="105:55" pos:end="105:65"><name pos:start="105:55" pos:end="105:55">u</name><operator pos:start="105:56" pos:end="105:56">.</operator><name pos:start="105:57" pos:end="105:59">net</name><operator pos:start="105:60" pos:end="105:61">-&gt;</operator><name pos:start="105:62" pos:end="105:65">vlan</name></name></expr> </then><else pos:start="105:67" pos:end="105:69">: <expr pos:start="105:69" pos:end="105:69"><literal type="number" pos:start="105:69" pos:end="105:69">0</literal></expr></else></ternary></expr></argument>, <argument pos:start="105:72" pos:end="105:75"><expr pos:start="105:72" pos:end="105:75"><name pos:start="105:72" pos:end="105:75">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="111:9" pos:end="125:9"><if pos:start="111:9" pos:end="125:9">if <condition pos:start="111:12" pos:end="111:72">(<expr pos:start="111:13" pos:end="111:71"><name pos:start="111:13" pos:end="111:43"><name pos:start="111:13" pos:end="111:31">net_client_init_fun</name><index pos:start="111:32" pos:end="111:43">[<expr pos:start="111:33" pos:end="111:42"><name pos:start="111:33" pos:end="111:42"><name pos:start="111:33" pos:end="111:36">opts</name><operator pos:start="111:37" pos:end="111:38">-&gt;</operator><name pos:start="111:39" pos:end="111:42">kind</name></name></expr>]</index></name><operator pos:start="111:44" pos:end="111:44">(</operator><name pos:start="111:45" pos:end="111:48">opts</name><operator pos:start="111:49" pos:end="111:49">,</operator> <name pos:start="111:51" pos:end="111:54">name</name><operator pos:start="111:55" pos:end="111:55">,</operator> <name pos:start="111:57" pos:end="111:60">peer</name><operator pos:start="111:61" pos:end="111:61">,</operator> <name pos:start="111:63" pos:end="111:66">errp</name><operator pos:start="111:67" pos:end="111:67">)</operator> <operator pos:start="111:69" pos:end="111:69">&lt;</operator> <literal type="number" pos:start="111:71" pos:end="111:71">0</literal></expr>)</condition> <block pos:start="111:74" pos:end="125:9">{<block_content pos:start="115:13" pos:end="123:22">

            <comment type="block" pos:start="113:13" pos:end="113:67">/* FIXME drop when all init functions store an Error */</comment>

            <if_stmt pos:start="115:13" pos:end="121:13"><if pos:start="115:13" pos:end="121:13">if <condition pos:start="115:16" pos:end="115:31">(<expr pos:start="115:17" pos:end="115:30"><name pos:start="115:17" pos:end="115:20">errp</name> <operator pos:start="115:22" pos:end="115:23">&amp;&amp;</operator> <operator pos:start="115:25" pos:end="115:25">!</operator><operator pos:start="115:26" pos:end="115:26">*</operator><name pos:start="115:27" pos:end="115:30">errp</name></expr>)</condition> <block pos:start="115:33" pos:end="121:13">{<block_content pos:start="117:17" pos:end="119:68">

                <expr_stmt pos:start="117:17" pos:end="119:68"><expr pos:start="117:17" pos:end="119:67"><call pos:start="117:17" pos:end="119:67"><name pos:start="117:17" pos:end="117:26">error_setg</name><argument_list pos:start="117:27" pos:end="119:67">(<argument pos:start="117:28" pos:end="117:31"><expr pos:start="117:28" pos:end="117:31"><name pos:start="117:28" pos:end="117:31">errp</name></expr></argument>, <argument pos:start="117:34" pos:end="117:56"><expr pos:start="117:34" pos:end="117:56"><name pos:start="117:34" pos:end="117:56">QERR_DEVICE_INIT_FAILED</name></expr></argument>,

                           <argument pos:start="119:28" pos:end="119:66"><expr pos:start="119:28" pos:end="119:66"><name pos:start="119:28" pos:end="119:66"><name pos:start="119:28" pos:end="119:54">NetClientOptionsKind_lookup</name><index pos:start="119:55" pos:end="119:66">[<expr pos:start="119:56" pos:end="119:65"><name pos:start="119:56" pos:end="119:65"><name pos:start="119:56" pos:end="119:59">opts</name><operator pos:start="119:60" pos:end="119:61">-&gt;</operator><name pos:start="119:62" pos:end="119:65">kind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <return pos:start="123:13" pos:end="123:22">return <expr pos:start="123:20" pos:end="123:21"><operator pos:start="123:20" pos:end="123:20">-</operator><literal type="number" pos:start="123:21" pos:end="123:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
