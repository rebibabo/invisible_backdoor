<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26685.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">dmg_read_mish_block</name><parameter_list pos:start="1:31" pos:end="3:63">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:43">BDRVDMGState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><name pos:start="1:49" pos:end="1:62">DmgHeaderState</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:66">ds</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:46"><decl pos:start="3:32" pos:end="3:46"><type pos:start="3:32" pos:end="3:46"><name pos:start="3:32" pos:end="3:38">uint8_t</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:46">buffer</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:62"><decl pos:start="3:49" pos:end="3:62"><type pos:start="3:49" pos:end="3:62"><name pos:start="3:49" pos:end="3:56">uint32_t</name></type> <name pos:start="3:58" pos:end="3:62">count</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="175:1">{<block_content pos:start="7:5" pos:end="173:15">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">type</name></decl>, <decl pos:start="7:20" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:20" pos:end="7:20">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:19">new_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:24">chunk_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:18">offset</name> <init pos:start="15:20" pos:end="15:22">= <expr pos:start="15:22" pos:end="15:22"><literal type="number" pos:start="15:22" pos:end="15:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:24">data_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:46"><decl pos:start="19:5" pos:end="19:45"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:22">in_offset</name> <init pos:start="19:24" pos:end="19:45">= <expr pos:start="19:26" pos:end="19:45"><name pos:start="19:26" pos:end="19:45"><name pos:start="19:26" pos:end="19:27">ds</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:45">data_fork_offset</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:23">out_offset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:44"><expr pos:start="25:5" pos:end="25:43"><name pos:start="25:5" pos:end="25:8">type</name> <operator pos:start="25:10" pos:end="25:10">=</operator> <call pos:start="25:12" pos:end="25:43"><name pos:start="25:12" pos:end="25:27">buff_read_uint32</name><argument_list pos:start="25:28" pos:end="25:43">(<argument pos:start="25:29" pos:end="25:34"><expr pos:start="25:29" pos:end="25:34"><name pos:start="25:29" pos:end="25:34">buffer</name></expr></argument>, <argument pos:start="25:37" pos:end="25:42"><expr pos:start="25:37" pos:end="25:42"><name pos:start="25:37" pos:end="25:42">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="27:5" pos:end="27:79">/* skip data that is not a valid MISH block (invalid magic or too small) */</comment>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:42">(<expr pos:start="29:9" pos:end="29:41"><name pos:start="29:9" pos:end="29:12">type</name> <operator pos:start="29:14" pos:end="29:15">!=</operator> <literal type="number" pos:start="29:17" pos:end="29:26">0x6d697368</literal> <operator pos:start="29:28" pos:end="29:29">||</operator> <name pos:start="29:31" pos:end="29:35">count</name> <operator pos:start="29:37" pos:end="29:37">&lt;</operator> <literal type="number" pos:start="29:39" pos:end="29:41">244</literal></expr>)</condition> <block pos:start="29:44" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:17">

        <comment type="block" pos:start="31:9" pos:end="31:36">/* assume success for now */</comment>

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:58">/* chunk offsets are relative to this sector number */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:54"><expr pos:start="41:5" pos:end="41:53"><name pos:start="41:5" pos:end="41:14">out_offset</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <call pos:start="41:18" pos:end="41:53"><name pos:start="41:18" pos:end="41:33">buff_read_uint64</name><argument_list pos:start="41:34" pos:end="41:53">(<argument pos:start="41:35" pos:end="41:40"><expr pos:start="41:35" pos:end="41:40"><name pos:start="41:35" pos:end="41:40">buffer</name></expr></argument>, <argument pos:start="41:43" pos:end="41:52"><expr pos:start="41:43" pos:end="41:52"><name pos:start="41:43" pos:end="41:48">offset</name> <operator pos:start="41:50" pos:end="41:50">+</operator> <literal type="number" pos:start="41:52" pos:end="41:52">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:64">/* location in data fork for (compressed) blob (in bytes) */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:58"><expr pos:start="47:5" pos:end="47:57"><name pos:start="47:5" pos:end="47:15">data_offset</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:57"><name pos:start="47:19" pos:end="47:34">buff_read_uint64</name><argument_list pos:start="47:35" pos:end="47:57">(<argument pos:start="47:36" pos:end="47:41"><expr pos:start="47:36" pos:end="47:41"><name pos:start="47:36" pos:end="47:41">buffer</name></expr></argument>, <argument pos:start="47:44" pos:end="47:56"><expr pos:start="47:44" pos:end="47:56"><name pos:start="47:44" pos:end="47:49">offset</name> <operator pos:start="47:51" pos:end="47:51">+</operator> <literal type="number" pos:start="47:53" pos:end="47:56">0x18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:29"><expr pos:start="49:5" pos:end="49:28"><name pos:start="49:5" pos:end="49:13">in_offset</name> <operator pos:start="49:15" pos:end="49:16">+=</operator> <name pos:start="49:18" pos:end="49:28">data_offset</name></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:40">/* move to begin of chunk entries */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:18"><expr pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:10">offset</name> <operator pos:start="55:12" pos:end="55:13">+=</operator> <literal type="number" pos:start="55:15" pos:end="55:17">204</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:37"><expr pos:start="59:5" pos:end="59:36"><name pos:start="59:5" pos:end="59:15">chunk_count</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <operator pos:start="59:19" pos:end="59:19">(</operator><name pos:start="59:20" pos:end="59:24">count</name> <operator pos:start="59:26" pos:end="59:26">-</operator> <literal type="number" pos:start="59:28" pos:end="59:30">204</literal><operator pos:start="59:31" pos:end="59:31">)</operator> <operator pos:start="59:33" pos:end="59:33">/</operator> <literal type="number" pos:start="59:35" pos:end="59:36">40</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:62"><expr pos:start="61:5" pos:end="61:61"><name pos:start="61:5" pos:end="61:12">new_size</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <sizeof pos:start="61:16" pos:end="61:31">sizeof<argument_list pos:start="61:22" pos:end="61:31">(<argument pos:start="61:23" pos:end="61:30"><expr pos:start="61:23" pos:end="61:30"><name pos:start="61:23" pos:end="61:30">uint64_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="61:33" pos:end="61:33">*</operator> <operator pos:start="61:35" pos:end="61:35">(</operator><name pos:start="61:36" pos:end="61:46"><name pos:start="61:36" pos:end="61:36">s</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:46">n_chunks</name></name> <operator pos:start="61:48" pos:end="61:48">+</operator> <name pos:start="61:50" pos:end="61:60">chunk_count</name><operator pos:start="61:61" pos:end="61:61">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:49"><expr pos:start="63:5" pos:end="63:48"><name pos:start="63:5" pos:end="63:12"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:12">types</name></name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:48"><name pos:start="63:16" pos:end="63:24">g_realloc</name><argument_list pos:start="63:25" pos:end="63:48">(<argument pos:start="63:26" pos:end="63:33"><expr pos:start="63:26" pos:end="63:33"><name pos:start="63:26" pos:end="63:33"><name pos:start="63:26" pos:end="63:26">s</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:33">types</name></name></expr></argument>, <argument pos:start="63:36" pos:end="63:47"><expr pos:start="63:36" pos:end="63:47"><name pos:start="63:36" pos:end="63:43">new_size</name> <operator pos:start="63:45" pos:end="63:45">/</operator> <literal type="number" pos:start="63:47" pos:end="63:47">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:49"><expr pos:start="65:5" pos:end="65:48"><name pos:start="65:5" pos:end="65:14"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:14">offsets</name></name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:48"><name pos:start="65:18" pos:end="65:26">g_realloc</name><argument_list pos:start="65:27" pos:end="65:48">(<argument pos:start="65:28" pos:end="65:37"><expr pos:start="65:28" pos:end="65:37"><name pos:start="65:28" pos:end="65:37"><name pos:start="65:28" pos:end="65:28">s</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:37">offsets</name></name></expr></argument>, <argument pos:start="65:40" pos:end="65:47"><expr pos:start="65:40" pos:end="65:47"><name pos:start="65:40" pos:end="65:47">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:49"><expr pos:start="67:5" pos:end="67:48"><name pos:start="67:5" pos:end="67:14"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:14">lengths</name></name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:48"><name pos:start="67:18" pos:end="67:26">g_realloc</name><argument_list pos:start="67:27" pos:end="67:48">(<argument pos:start="67:28" pos:end="67:37"><expr pos:start="67:28" pos:end="67:37"><name pos:start="67:28" pos:end="67:37"><name pos:start="67:28" pos:end="67:28">s</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:37">lengths</name></name></expr></argument>, <argument pos:start="67:40" pos:end="67:47"><expr pos:start="67:40" pos:end="67:47"><name pos:start="67:40" pos:end="67:47">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:49"><expr pos:start="69:5" pos:end="69:48"><name pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:14">sectors</name></name> <operator pos:start="69:16" pos:end="69:16">=</operator> <call pos:start="69:18" pos:end="69:48"><name pos:start="69:18" pos:end="69:26">g_realloc</name><argument_list pos:start="69:27" pos:end="69:48">(<argument pos:start="69:28" pos:end="69:37"><expr pos:start="69:28" pos:end="69:37"><name pos:start="69:28" pos:end="69:37"><name pos:start="69:28" pos:end="69:28">s</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:37">sectors</name></name></expr></argument>, <argument pos:start="69:40" pos:end="69:47"><expr pos:start="69:40" pos:end="69:47"><name pos:start="69:40" pos:end="69:47">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:59"><expr pos:start="71:5" pos:end="71:58"><name pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:19">sectorcounts</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:58"><name pos:start="71:23" pos:end="71:31">g_realloc</name><argument_list pos:start="71:32" pos:end="71:58">(<argument pos:start="71:33" pos:end="71:47"><expr pos:start="71:33" pos:end="71:47"><name pos:start="71:33" pos:end="71:47"><name pos:start="71:33" pos:end="71:33">s</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:47">sectorcounts</name></name></expr></argument>, <argument pos:start="71:50" pos:end="71:57"><expr pos:start="71:50" pos:end="71:57"><name pos:start="71:50" pos:end="71:57">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="75:5" pos:end="163:5">for <control pos:start="75:9" pos:end="75:61">(<init pos:start="75:10" pos:end="75:25"><expr pos:start="75:10" pos:end="75:24"><name pos:start="75:10" pos:end="75:10">i</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <name pos:start="75:14" pos:end="75:24"><name pos:start="75:14" pos:end="75:14">s</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:24">n_chunks</name></name></expr>;</init> <condition pos:start="75:27" pos:end="75:56"><expr pos:start="75:27" pos:end="75:55"><name pos:start="75:27" pos:end="75:27">i</name> <operator pos:start="75:29" pos:end="75:29">&lt;</operator> <name pos:start="75:31" pos:end="75:41"><name pos:start="75:31" pos:end="75:31">s</name><operator pos:start="75:32" pos:end="75:33">-&gt;</operator><name pos:start="75:34" pos:end="75:41">n_chunks</name></name> <operator pos:start="75:43" pos:end="75:43">+</operator> <name pos:start="75:45" pos:end="75:55">chunk_count</name></expr>;</condition> <incr pos:start="75:58" pos:end="75:60"><expr pos:start="75:58" pos:end="75:60"><name pos:start="75:58" pos:end="75:58">i</name><operator pos:start="75:59" pos:end="75:60">++</operator></expr></incr>)</control> <block pos:start="75:63" pos:end="163:5">{<block_content pos:start="77:9" pos:end="161:58">

        <expr_stmt pos:start="77:9" pos:end="77:55"><expr pos:start="77:9" pos:end="77:54"><name pos:start="77:9" pos:end="77:19"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:16">types</name><index pos:start="77:17" pos:end="77:19">[<expr pos:start="77:18" pos:end="77:18"><name pos:start="77:18" pos:end="77:18">i</name></expr>]</index></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:54"><name pos:start="77:23" pos:end="77:38">buff_read_uint32</name><argument_list pos:start="77:39" pos:end="77:54">(<argument pos:start="77:40" pos:end="77:45"><expr pos:start="77:40" pos:end="77:45"><name pos:start="77:40" pos:end="77:45">buffer</name></expr></argument>, <argument pos:start="77:48" pos:end="77:53"><expr pos:start="77:48" pos:end="77:53"><name pos:start="77:48" pos:end="77:53">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:20"><expr pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:14">offset</name> <operator pos:start="79:16" pos:end="79:17">+=</operator> <literal type="number" pos:start="79:19" pos:end="79:19">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="93:9"><if pos:start="81:9" pos:end="93:9">if <condition pos:start="81:12" pos:end="83:29">(<expr pos:start="81:13" pos:end="83:28"><name pos:start="81:13" pos:end="81:23"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:20">types</name><index pos:start="81:21" pos:end="81:23">[<expr pos:start="81:22" pos:end="81:22"><name pos:start="81:22" pos:end="81:22">i</name></expr>]</index></name> <operator pos:start="81:25" pos:end="81:26">!=</operator> <literal type="number" pos:start="81:28" pos:end="81:37">0x80000005</literal> <operator pos:start="81:39" pos:end="81:40">&amp;&amp;</operator> <name pos:start="81:42" pos:end="81:52"><name pos:start="81:42" pos:end="81:42">s</name><operator pos:start="81:43" pos:end="81:44">-&gt;</operator><name pos:start="81:45" pos:end="81:49">types</name><index pos:start="81:50" pos:end="81:52">[<expr pos:start="81:51" pos:end="81:51"><name pos:start="81:51" pos:end="81:51">i</name></expr>]</index></name> <operator pos:start="81:54" pos:end="81:55">!=</operator> <literal type="number" pos:start="81:57" pos:end="81:57">1</literal> <operator pos:start="81:59" pos:end="81:60">&amp;&amp;</operator>

            <name pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:20">types</name><index pos:start="83:21" pos:end="83:23">[<expr pos:start="83:22" pos:end="83:22"><name pos:start="83:22" pos:end="83:22">i</name></expr>]</index></name> <operator pos:start="83:25" pos:end="83:26">!=</operator> <literal type="number" pos:start="83:28" pos:end="83:28">2</literal></expr>)</condition> <block pos:start="83:31" pos:end="93:9">{<block_content pos:start="85:13" pos:end="91:21">

            <expr_stmt pos:start="85:13" pos:end="85:26"><expr pos:start="85:13" pos:end="85:25"><name pos:start="85:13" pos:end="85:23">chunk_count</name><operator pos:start="85:24" pos:end="85:25">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:16"><expr pos:start="87:13" pos:end="87:15"><name pos:start="87:13" pos:end="87:13">i</name><operator pos:start="87:14" pos:end="87:15">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:25"><expr pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:18">offset</name> <operator pos:start="89:20" pos:end="89:21">+=</operator> <literal type="number" pos:start="89:23" pos:end="89:24">36</literal></expr>;</expr_stmt>

            <continue pos:start="91:13" pos:end="91:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:20"><expr pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:14">offset</name> <operator pos:start="95:16" pos:end="95:17">+=</operator> <literal type="number" pos:start="95:19" pos:end="95:19">4</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="99:9" pos:end="99:57"><expr pos:start="99:9" pos:end="99:56"><name pos:start="99:9" pos:end="99:21"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:18">sectors</name><index pos:start="99:19" pos:end="99:21">[<expr pos:start="99:20" pos:end="99:20"><name pos:start="99:20" pos:end="99:20">i</name></expr>]</index></name> <operator pos:start="99:23" pos:end="99:23">=</operator> <call pos:start="99:25" pos:end="99:56"><name pos:start="99:25" pos:end="99:40">buff_read_uint64</name><argument_list pos:start="99:41" pos:end="99:56">(<argument pos:start="99:42" pos:end="99:47"><expr pos:start="99:42" pos:end="99:47"><name pos:start="99:42" pos:end="99:47">buffer</name></expr></argument>, <argument pos:start="99:50" pos:end="99:55"><expr pos:start="99:50" pos:end="99:55"><name pos:start="99:50" pos:end="99:55">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:36"><expr pos:start="101:9" pos:end="101:35"><name pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:18">sectors</name><index pos:start="101:19" pos:end="101:21">[<expr pos:start="101:20" pos:end="101:20"><name pos:start="101:20" pos:end="101:20">i</name></expr>]</index></name> <operator pos:start="101:23" pos:end="101:24">+=</operator> <name pos:start="101:26" pos:end="101:35">out_offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:20"><expr pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:14">offset</name> <operator pos:start="103:16" pos:end="103:17">+=</operator> <literal type="number" pos:start="103:19" pos:end="103:19">8</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:62"><expr pos:start="107:9" pos:end="107:61"><name pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:23">sectorcounts</name><index pos:start="107:24" pos:end="107:26">[<expr pos:start="107:25" pos:end="107:25"><name pos:start="107:25" pos:end="107:25">i</name></expr>]</index></name> <operator pos:start="107:28" pos:end="107:28">=</operator> <call pos:start="107:30" pos:end="107:61"><name pos:start="107:30" pos:end="107:45">buff_read_uint64</name><argument_list pos:start="107:46" pos:end="107:61">(<argument pos:start="107:47" pos:end="107:52"><expr pos:start="107:47" pos:end="107:52"><name pos:start="107:47" pos:end="107:52">buffer</name></expr></argument>, <argument pos:start="107:55" pos:end="107:60"><expr pos:start="107:55" pos:end="107:60"><name pos:start="107:55" pos:end="107:60">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:20"><expr pos:start="109:9" pos:end="109:19"><name pos:start="109:9" pos:end="109:14">offset</name> <operator pos:start="109:16" pos:end="109:17">+=</operator> <literal type="number" pos:start="109:19" pos:end="109:19">8</literal></expr>;</expr_stmt>



        <if_stmt pos:start="113:9" pos:end="125:9"><if pos:start="113:9" pos:end="125:9">if <condition pos:start="113:12" pos:end="113:54">(<expr pos:start="113:13" pos:end="113:53"><name pos:start="113:13" pos:end="113:30"><name pos:start="113:13" pos:end="113:13">s</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:27">sectorcounts</name><index pos:start="113:28" pos:end="113:30">[<expr pos:start="113:29" pos:end="113:29"><name pos:start="113:29" pos:end="113:29">i</name></expr>]</index></name> <operator pos:start="113:32" pos:end="113:32">&gt;</operator> <name pos:start="113:34" pos:end="113:53">DMG_SECTORCOUNTS_MAX</name></expr>)</condition> <block pos:start="113:56" pos:end="125:9">{<block_content pos:start="115:13" pos:end="123:22">

            <expr_stmt pos:start="115:13" pos:end="119:70"><expr pos:start="115:13" pos:end="119:69"><call pos:start="115:13" pos:end="119:69"><name pos:start="115:13" pos:end="115:24">error_report</name><argument_list pos:start="115:25" pos:end="119:69">(<argument pos:start="115:26" pos:end="117:51"><expr pos:start="115:26" pos:end="117:51"><literal type="string" pos:start="115:26" pos:end="115:41">"sector count %"</literal> <name pos:start="115:43" pos:end="115:48">PRIu64</name> <literal type="string" pos:start="115:50" pos:end="115:63">" for chunk %"</literal> <name pos:start="115:65" pos:end="115:70">PRIu32</name>

                         <literal type="string" pos:start="117:26" pos:end="117:51">" is larger than max (%u)"</literal></expr></argument>,

                         <argument pos:start="119:26" pos:end="119:43"><expr pos:start="119:26" pos:end="119:43"><name pos:start="119:26" pos:end="119:43"><name pos:start="119:26" pos:end="119:26">s</name><operator pos:start="119:27" pos:end="119:28">-&gt;</operator><name pos:start="119:29" pos:end="119:40">sectorcounts</name><index pos:start="119:41" pos:end="119:43">[<expr pos:start="119:42" pos:end="119:42"><name pos:start="119:42" pos:end="119:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="119:46" pos:end="119:46"><expr pos:start="119:46" pos:end="119:46"><name pos:start="119:46" pos:end="119:46">i</name></expr></argument>, <argument pos:start="119:49" pos:end="119:68"><expr pos:start="119:49" pos:end="119:68"><name pos:start="119:49" pos:end="119:68">DMG_SECTORCOUNTS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:26"><expr pos:start="121:13" pos:end="121:25"><name pos:start="121:13" pos:end="121:15">ret</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <operator pos:start="121:19" pos:end="121:19">-</operator><name pos:start="121:20" pos:end="121:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="123:13" pos:end="123:22">goto <name pos:start="123:18" pos:end="123:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:57"><expr pos:start="129:9" pos:end="129:56"><name pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:18">offsets</name><index pos:start="129:19" pos:end="129:21">[<expr pos:start="129:20" pos:end="129:20"><name pos:start="129:20" pos:end="129:20">i</name></expr>]</index></name> <operator pos:start="129:23" pos:end="129:23">=</operator> <call pos:start="129:25" pos:end="129:56"><name pos:start="129:25" pos:end="129:40">buff_read_uint64</name><argument_list pos:start="129:41" pos:end="129:56">(<argument pos:start="129:42" pos:end="129:47"><expr pos:start="129:42" pos:end="129:47"><name pos:start="129:42" pos:end="129:47">buffer</name></expr></argument>, <argument pos:start="129:50" pos:end="129:55"><expr pos:start="129:50" pos:end="129:55"><name pos:start="129:50" pos:end="129:55">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:35"><expr pos:start="131:9" pos:end="131:34"><name pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:9">s</name><operator pos:start="131:10" pos:end="131:11">-&gt;</operator><name pos:start="131:12" pos:end="131:18">offsets</name><index pos:start="131:19" pos:end="131:21">[<expr pos:start="131:20" pos:end="131:20"><name pos:start="131:20" pos:end="131:20">i</name></expr>]</index></name> <operator pos:start="131:23" pos:end="131:24">+=</operator> <name pos:start="131:26" pos:end="131:34">in_offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:20"><expr pos:start="133:9" pos:end="133:19"><name pos:start="133:9" pos:end="133:14">offset</name> <operator pos:start="133:16" pos:end="133:17">+=</operator> <literal type="number" pos:start="133:19" pos:end="133:19">8</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:57"><expr pos:start="137:9" pos:end="137:56"><name pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:18">lengths</name><index pos:start="137:19" pos:end="137:21">[<expr pos:start="137:20" pos:end="137:20"><name pos:start="137:20" pos:end="137:20">i</name></expr>]</index></name> <operator pos:start="137:23" pos:end="137:23">=</operator> <call pos:start="137:25" pos:end="137:56"><name pos:start="137:25" pos:end="137:40">buff_read_uint64</name><argument_list pos:start="137:41" pos:end="137:56">(<argument pos:start="137:42" pos:end="137:47"><expr pos:start="137:42" pos:end="137:47"><name pos:start="137:42" pos:end="137:47">buffer</name></expr></argument>, <argument pos:start="137:50" pos:end="137:55"><expr pos:start="137:50" pos:end="137:55"><name pos:start="137:50" pos:end="137:55">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:20"><expr pos:start="139:9" pos:end="139:19"><name pos:start="139:9" pos:end="139:14">offset</name> <operator pos:start="139:16" pos:end="139:17">+=</operator> <literal type="number" pos:start="139:19" pos:end="139:19">8</literal></expr>;</expr_stmt>



        <if_stmt pos:start="143:9" pos:end="155:9"><if pos:start="143:9" pos:end="155:9">if <condition pos:start="143:12" pos:end="143:44">(<expr pos:start="143:13" pos:end="143:43"><name pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:22">lengths</name><index pos:start="143:23" pos:end="143:25">[<expr pos:start="143:24" pos:end="143:24"><name pos:start="143:24" pos:end="143:24">i</name></expr>]</index></name> <operator pos:start="143:27" pos:end="143:27">&gt;</operator> <name pos:start="143:29" pos:end="143:43">DMG_LENGTHS_MAX</name></expr>)</condition> <block pos:start="143:46" pos:end="155:9">{<block_content pos:start="145:13" pos:end="153:22">

            <expr_stmt pos:start="145:13" pos:end="149:60"><expr pos:start="145:13" pos:end="149:59"><call pos:start="145:13" pos:end="149:59"><name pos:start="145:13" pos:end="145:24">error_report</name><argument_list pos:start="145:25" pos:end="149:59">(<argument pos:start="145:26" pos:end="147:51"><expr pos:start="145:26" pos:end="147:51"><literal type="string" pos:start="145:26" pos:end="145:35">"length %"</literal> <name pos:start="145:37" pos:end="145:42">PRIu64</name> <literal type="string" pos:start="145:44" pos:end="145:57">" for chunk %"</literal> <name pos:start="145:59" pos:end="145:64">PRIu32</name>

                         <literal type="string" pos:start="147:26" pos:end="147:51">" is larger than max (%u)"</literal></expr></argument>,

                         <argument pos:start="149:26" pos:end="149:38"><expr pos:start="149:26" pos:end="149:38"><name pos:start="149:26" pos:end="149:38"><name pos:start="149:26" pos:end="149:26">s</name><operator pos:start="149:27" pos:end="149:28">-&gt;</operator><name pos:start="149:29" pos:end="149:35">lengths</name><index pos:start="149:36" pos:end="149:38">[<expr pos:start="149:37" pos:end="149:37"><name pos:start="149:37" pos:end="149:37">i</name></expr>]</index></name></expr></argument>, <argument pos:start="149:41" pos:end="149:41"><expr pos:start="149:41" pos:end="149:41"><name pos:start="149:41" pos:end="149:41">i</name></expr></argument>, <argument pos:start="149:44" pos:end="149:58"><expr pos:start="149:44" pos:end="149:58"><name pos:start="149:44" pos:end="149:58">DMG_LENGTHS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:26"><expr pos:start="151:13" pos:end="151:25"><name pos:start="151:13" pos:end="151:15">ret</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <operator pos:start="151:19" pos:end="151:19">-</operator><name pos:start="151:20" pos:end="151:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="153:13" pos:end="153:22">goto <name pos:start="153:18" pos:end="153:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="159:9" pos:end="161:58"><expr pos:start="159:9" pos:end="161:57"><call pos:start="159:9" pos:end="161:57"><name pos:start="159:9" pos:end="159:29">update_max_chunk_size</name><argument_list pos:start="159:30" pos:end="161:57">(<argument pos:start="159:31" pos:end="159:31"><expr pos:start="159:31" pos:end="159:31"><name pos:start="159:31" pos:end="159:31">s</name></expr></argument>, <argument pos:start="159:34" pos:end="159:34"><expr pos:start="159:34" pos:end="159:34"><name pos:start="159:34" pos:end="159:34">i</name></expr></argument>, <argument pos:start="159:37" pos:end="159:60"><expr pos:start="159:37" pos:end="159:60"><operator pos:start="159:37" pos:end="159:37">&amp;</operator><name pos:start="159:38" pos:end="159:60"><name pos:start="159:38" pos:end="159:39">ds</name><operator pos:start="159:40" pos:end="159:41">-&gt;</operator><name pos:start="159:42" pos:end="159:60">max_compressed_size</name></name></expr></argument>,

                              <argument pos:start="161:31" pos:end="161:56"><expr pos:start="161:31" pos:end="161:56"><operator pos:start="161:31" pos:end="161:31">&amp;</operator><name pos:start="161:32" pos:end="161:56"><name pos:start="161:32" pos:end="161:33">ds</name><operator pos:start="161:34" pos:end="161:35">-&gt;</operator><name pos:start="161:36" pos:end="161:56">max_sectors_per_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="165:5" pos:end="165:31"><expr pos:start="165:5" pos:end="165:30"><name pos:start="165:5" pos:end="165:15"><name pos:start="165:5" pos:end="165:5">s</name><operator pos:start="165:6" pos:end="165:7">-&gt;</operator><name pos:start="165:8" pos:end="165:15">n_chunks</name></name> <operator pos:start="165:17" pos:end="165:18">+=</operator> <name pos:start="165:20" pos:end="165:30">chunk_count</name></expr>;</expr_stmt>

    <return pos:start="167:5" pos:end="167:13">return <expr pos:start="167:12" pos:end="167:12"><literal type="number" pos:start="167:12" pos:end="167:12">0</literal></expr>;</return>



<label pos:start="171:1" pos:end="171:5"><name pos:start="171:1" pos:end="171:4">fail</name>:</label>

    <return pos:start="173:5" pos:end="173:15">return <expr pos:start="173:12" pos:end="173:14"><name pos:start="173:12" pos:end="173:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
