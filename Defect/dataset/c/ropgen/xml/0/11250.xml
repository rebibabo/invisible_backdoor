<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11250.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">ape_unpack_mono</name><parameter_list pos:start="1:28" pos:end="1:55">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:38">APEContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ctx</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:54"><decl pos:start="1:46" pos:end="1:54"><type pos:start="1:46" pos:end="1:54"><name pos:start="1:46" pos:end="1:48">int</name></type> <name pos:start="1:50" pos:end="1:54">count</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:5">

    <if_stmt pos:start="5:5" pos:end="13:5"><if pos:start="5:5" pos:end="13:5">if <condition pos:start="5:8" pos:end="5:55">(<expr pos:start="5:9" pos:end="5:54"><name pos:start="5:9" pos:end="5:23"><name pos:start="5:9" pos:end="5:11">ctx</name><operator pos:start="5:12" pos:end="5:13">-&gt;</operator><name pos:start="5:14" pos:end="5:23">frameflags</name></name> <operator pos:start="5:25" pos:end="5:25">&amp;</operator> <name pos:start="5:27" pos:end="5:54">APE_FRAMECODE_STEREO_SILENCE</name></expr>)</condition> <block pos:start="5:57" pos:end="13:5">{<block_content pos:start="9:9" pos:end="11:15">

        <comment type="block" pos:start="7:9" pos:end="7:49">/* We are pure silence, so we're done. */</comment>

        <expr_stmt pos:start="9:9" pos:end="9:64"><expr pos:start="9:9" pos:end="9:63"><call pos:start="9:9" pos:end="9:63"><name pos:start="9:9" pos:end="9:14">av_log</name><argument_list pos:start="9:15" pos:end="9:63">(<argument pos:start="9:16" pos:end="9:25"><expr pos:start="9:16" pos:end="9:25"><name pos:start="9:16" pos:end="9:25"><name pos:start="9:16" pos:end="9:18">ctx</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:25">avctx</name></name></expr></argument>, <argument pos:start="9:28" pos:end="9:39"><expr pos:start="9:28" pos:end="9:39"><name pos:start="9:28" pos:end="9:39">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="9:42" pos:end="9:62"><expr pos:start="9:42" pos:end="9:62"><literal type="string" pos:start="9:42" pos:end="9:62">"pure silence mono\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="11:9" pos:end="11:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><call pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:18">entropy_decode</name><argument_list pos:start="17:19" pos:end="17:33">(<argument pos:start="17:20" pos:end="17:22"><expr pos:start="17:20" pos:end="17:22"><name pos:start="17:20" pos:end="17:22">ctx</name></expr></argument>, <argument pos:start="17:25" pos:end="17:29"><expr pos:start="17:25" pos:end="17:29"><name pos:start="17:25" pos:end="17:29">count</name></expr></argument>, <argument pos:start="17:32" pos:end="17:32"><expr pos:start="17:32" pos:end="17:32"><literal type="number" pos:start="17:32" pos:end="17:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:57"><expr pos:start="19:5" pos:end="19:56"><call pos:start="19:5" pos:end="19:56"><name pos:start="19:5" pos:end="19:21">ape_apply_filters</name><argument_list pos:start="19:22" pos:end="19:56">(<argument pos:start="19:23" pos:end="19:25"><expr pos:start="19:23" pos:end="19:25"><name pos:start="19:23" pos:end="19:25">ctx</name></expr></argument>, <argument pos:start="19:28" pos:end="19:42"><expr pos:start="19:28" pos:end="19:42"><name pos:start="19:28" pos:end="19:42"><name pos:start="19:28" pos:end="19:30">ctx</name><operator pos:start="19:31" pos:end="19:32">-&gt;</operator><name pos:start="19:33" pos:end="19:39">decoded</name><index pos:start="19:40" pos:end="19:42">[<expr pos:start="19:41" pos:end="19:41"><literal type="number" pos:start="19:41" pos:end="19:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="19:45" pos:end="19:48"><expr pos:start="19:45" pos:end="19:48"><name pos:start="19:45" pos:end="19:48">NULL</name></expr></argument>, <argument pos:start="19:51" pos:end="19:55"><expr pos:start="19:51" pos:end="19:55"><name pos:start="19:51" pos:end="19:55">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:42">/* Now apply the predictor decoding */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><call pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:25">predictor_decode_mono</name><argument_list pos:start="25:26" pos:end="25:37">(<argument pos:start="25:27" pos:end="25:29"><expr pos:start="25:27" pos:end="25:29"><name pos:start="25:27" pos:end="25:29">ctx</name></expr></argument>, <argument pos:start="25:32" pos:end="25:36"><expr pos:start="25:32" pos:end="25:36"><name pos:start="25:32" pos:end="25:36">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:65">/* Pseudo-stereo - just copy left channel to right channel */</comment>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:27">(<expr pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:11">ctx</name><operator pos:start="31:12" pos:end="31:13">-&gt;</operator><name pos:start="31:14" pos:end="31:21">channels</name></name> <operator pos:start="31:23" pos:end="31:24">==</operator> <literal type="number" pos:start="31:26" pos:end="31:26">2</literal></expr>)</condition> <block pos:start="31:29" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:83">

        <expr_stmt pos:start="33:9" pos:end="33:83"><expr pos:start="33:9" pos:end="33:82"><call pos:start="33:9" pos:end="33:82"><name pos:start="33:9" pos:end="33:14">memcpy</name><argument_list pos:start="33:15" pos:end="33:82">(<argument pos:start="33:16" pos:end="33:30"><expr pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:18">ctx</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:27">decoded</name><index pos:start="33:28" pos:end="33:30">[<expr pos:start="33:29" pos:end="33:29"><literal type="number" pos:start="33:29" pos:end="33:29">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="33:33" pos:end="33:47"><expr pos:start="33:33" pos:end="33:47"><name pos:start="33:33" pos:end="33:47"><name pos:start="33:33" pos:end="33:35">ctx</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:44">decoded</name><index pos:start="33:45" pos:end="33:47">[<expr pos:start="33:46" pos:end="33:46"><literal type="number" pos:start="33:46" pos:end="33:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="33:50" pos:end="33:81"><expr pos:start="33:50" pos:end="33:81"><name pos:start="33:50" pos:end="33:54">count</name> <operator pos:start="33:56" pos:end="33:56">*</operator> <sizeof pos:start="33:58" pos:end="33:81">sizeof<argument_list pos:start="33:64" pos:end="33:81">(<argument pos:start="33:65" pos:end="33:80"><expr pos:start="33:65" pos:end="33:80"><operator pos:start="33:65" pos:end="33:65">*</operator><name pos:start="33:66" pos:end="33:80"><name pos:start="33:66" pos:end="33:68">ctx</name><operator pos:start="33:69" pos:end="33:70">-&gt;</operator><name pos:start="33:71" pos:end="33:77">decoded</name><index pos:start="33:78" pos:end="33:80">[<expr pos:start="33:79" pos:end="33:79"><literal type="number" pos:start="33:79" pos:end="33:79">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
