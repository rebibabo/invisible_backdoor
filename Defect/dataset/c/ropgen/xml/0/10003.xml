<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10003.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_drive_mirror</name><parameter_list pos:start="1:22" pos:end="1:53">(<parameter pos:start="1:23" pos:end="1:38"><decl pos:start="1:23" pos:end="1:38"><type pos:start="1:23" pos:end="1:38"><name pos:start="1:23" pos:end="1:33">DriveMirror</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">arg</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:45">Error</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier><modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="297:1">{<block_content pos:start="5:5" pos:end="295:37">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BlockBackend</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:28">source</name></decl>, <decl pos:start="9:31" pos:end="9:40"><type ref="prev" pos:start="9:5" pos:end="9:22"><modifier pos:start="9:31" pos:end="9:31">*</modifier></type><name pos:start="9:32" pos:end="9:40">target_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">AioContext</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:39"><type pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:26">BlockMirrorBackingMode</name></type> <name pos:start="13:28" pos:end="13:39">backing_mode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">QDict</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:18">options</name> <init pos:start="17:20" pos:end="17:25">= <expr pos:start="17:22" pos:end="17:25"><name pos:start="17:22" pos:end="17:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:14"><decl pos:start="19:5" pos:end="19:13"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:13">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:17"><decl pos:start="21:5" pos:end="21:16"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:16">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:37"><decl pos:start="23:5" pos:end="23:36"><type pos:start="23:5" pos:end="23:16"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:14">char</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:22">format</name> <init pos:start="23:24" pos:end="23:36">= <expr pos:start="23:26" pos:end="23:36"><name pos:start="23:26" pos:end="23:36"><name pos:start="23:26" pos:end="23:28">arg</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:36">format</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:35"><expr pos:start="27:5" pos:end="27:34"><name pos:start="27:5" pos:end="27:7">blk</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:34"><name pos:start="27:11" pos:end="27:21">blk_by_name</name><argument_list pos:start="27:22" pos:end="27:34">(<argument pos:start="27:23" pos:end="27:33"><expr pos:start="27:23" pos:end="27:33"><name pos:start="27:23" pos:end="27:33"><name pos:start="27:23" pos:end="27:25">arg</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:33">device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:13">(<expr pos:start="29:9" pos:end="29:12"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:12">blk</name></expr>)</condition> <block pos:start="29:15" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:15">

        <expr_stmt pos:start="31:9" pos:end="33:56"><expr pos:start="31:9" pos:end="33:55"><call pos:start="31:9" pos:end="33:55"><name pos:start="31:9" pos:end="31:17">error_set</name><argument_list pos:start="31:18" pos:end="33:55">(<argument pos:start="31:19" pos:end="31:22"><expr pos:start="31:19" pos:end="31:22"><name pos:start="31:19" pos:end="31:22">errp</name></expr></argument>, <argument pos:start="31:25" pos:end="31:52"><expr pos:start="31:25" pos:end="31:52"><name pos:start="31:25" pos:end="31:52">ERROR_CLASS_DEVICE_NOT_FOUND</name></expr></argument>,

                  <argument pos:start="33:19" pos:end="33:41"><expr pos:start="33:19" pos:end="33:41"><literal type="string" pos:start="33:19" pos:end="33:41">"Device '%s' not found"</literal></expr></argument>, <argument pos:start="33:44" pos:end="33:54"><expr pos:start="33:44" pos:end="33:54"><name pos:start="33:44" pos:end="33:54"><name pos:start="33:44" pos:end="33:46">arg</name><operator pos:start="33:47" pos:end="33:48">-&gt;</operator><name pos:start="33:49" pos:end="33:54">device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:43"><expr pos:start="41:5" pos:end="41:42"><name pos:start="41:5" pos:end="41:15">aio_context</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:42"><name pos:start="41:19" pos:end="41:37">blk_get_aio_context</name><argument_list pos:start="41:38" pos:end="41:42">(<argument pos:start="41:39" pos:end="41:41"><expr pos:start="41:39" pos:end="41:41"><name pos:start="41:39" pos:end="41:41">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:37"><expr pos:start="43:5" pos:end="43:36"><call pos:start="43:5" pos:end="43:36"><name pos:start="43:5" pos:end="43:23">aio_context_acquire</name><argument_list pos:start="43:24" pos:end="43:36">(<argument pos:start="43:25" pos:end="43:35"><expr pos:start="43:25" pos:end="43:35"><name pos:start="43:25" pos:end="43:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:31">(<expr pos:start="47:9" pos:end="47:30"><operator pos:start="47:9" pos:end="47:9">!</operator><call pos:start="47:10" pos:end="47:30"><name pos:start="47:10" pos:end="47:25">blk_is_available</name><argument_list pos:start="47:26" pos:end="47:30">(<argument pos:start="47:27" pos:end="47:29"><expr pos:start="47:27" pos:end="47:29"><name pos:start="47:27" pos:end="47:29">blk</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:33" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:17">

        <expr_stmt pos:start="49:9" pos:end="49:65"><expr pos:start="49:9" pos:end="49:64"><call pos:start="49:9" pos:end="49:64"><name pos:start="49:9" pos:end="49:18">error_setg</name><argument_list pos:start="49:19" pos:end="49:64">(<argument pos:start="49:20" pos:end="49:23"><expr pos:start="49:20" pos:end="49:23"><name pos:start="49:20" pos:end="49:23">errp</name></expr></argument>, <argument pos:start="49:26" pos:end="49:50"><expr pos:start="49:26" pos:end="49:50"><name pos:start="49:26" pos:end="49:50">QERR_DEVICE_HAS_NO_MEDIUM</name></expr></argument>, <argument pos:start="49:53" pos:end="49:63"><expr pos:start="49:53" pos:end="49:63"><name pos:start="49:53" pos:end="49:63"><name pos:start="49:53" pos:end="49:55">arg</name><operator pos:start="49:56" pos:end="49:57">-&gt;</operator><name pos:start="49:58" pos:end="49:63">device</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:21"><expr pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:6">bs</name> <operator pos:start="55:8" pos:end="55:8">=</operator> <call pos:start="55:10" pos:end="55:20"><name pos:start="55:10" pos:end="55:15">blk_bs</name><argument_list pos:start="55:16" pos:end="55:20">(<argument pos:start="55:17" pos:end="55:19"><expr pos:start="55:17" pos:end="55:19"><name pos:start="55:17" pos:end="55:19">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:23">(<expr pos:start="57:9" pos:end="57:22"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:22"><name pos:start="57:10" pos:end="57:12">arg</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:22">has_mode</name></name></expr>)</condition> <block pos:start="57:25" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:50">

        <expr_stmt pos:start="59:9" pos:end="59:50"><expr pos:start="59:9" pos:end="59:49"><name pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:11">arg</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:17">mode</name></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:49">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:25">(<expr pos:start="65:9" pos:end="65:24"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:24"><name pos:start="65:10" pos:end="65:12">arg</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:24">has_format</name></name></expr>)</condition> <block pos:start="65:27" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:49">

        <expr_stmt pos:start="67:9" pos:end="69:49"><expr pos:start="67:9" pos:end="69:48"><name pos:start="67:9" pos:end="67:14">format</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <operator pos:start="67:18" pos:end="67:18">(</operator><ternary pos:start="67:19" pos:end="69:47"><condition pos:start="67:19" pos:end="69:19"><expr pos:start="67:19" pos:end="67:54"><name pos:start="67:19" pos:end="67:27"><name pos:start="67:19" pos:end="67:21">arg</name><operator pos:start="67:22" pos:end="67:23">-&gt;</operator><name pos:start="67:24" pos:end="67:27">mode</name></name> <operator pos:start="67:29" pos:end="67:30">==</operator> <name pos:start="67:32" pos:end="67:54">NEW_IMAGE_MODE_EXISTING</name></expr>

                  ?</condition><then pos:start="69:21" pos:end="69:24"> <expr pos:start="69:21" pos:end="69:24"><name pos:start="69:21" pos:end="69:24">NULL</name></expr> </then><else pos:start="69:26" pos:end="69:47">: <expr pos:start="69:28" pos:end="69:47"><name pos:start="69:28" pos:end="69:47"><name pos:start="69:28" pos:end="69:29">bs</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:34">drv</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:47">format_name</name></name></expr></else></ternary><operator pos:start="69:48" pos:end="69:48">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:41"><expr pos:start="75:5" pos:end="75:40"><name pos:start="75:5" pos:end="75:9">flags</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <name pos:start="75:13" pos:end="75:26"><name pos:start="75:13" pos:end="75:14">bs</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:26">open_flags</name></name> <operator pos:start="75:28" pos:end="75:28">|</operator> <name pos:start="75:30" pos:end="75:40">BDRV_O_RDWR</name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:28"><expr pos:start="77:5" pos:end="77:27"><name pos:start="77:5" pos:end="77:10">source</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <call pos:start="77:14" pos:end="77:27"><name pos:start="77:14" pos:end="77:23">backing_bs</name><argument_list pos:start="77:24" pos:end="77:27">(<argument pos:start="77:25" pos:end="77:26"><expr pos:start="77:25" pos:end="77:26"><name pos:start="77:25" pos:end="77:26">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:53">(<expr pos:start="79:9" pos:end="79:52"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:15">source</name> <operator pos:start="79:17" pos:end="79:18">&amp;&amp;</operator> <name pos:start="79:20" pos:end="79:28"><name pos:start="79:20" pos:end="79:22">arg</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:28">sync</name></name> <operator pos:start="79:30" pos:end="79:31">==</operator> <name pos:start="79:33" pos:end="79:52">MIRROR_SYNC_MODE_TOP</name></expr>)</condition> <block pos:start="79:55" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:42">

        <expr_stmt pos:start="81:9" pos:end="81:42"><expr pos:start="81:9" pos:end="81:41"><name pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:11">arg</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:17">sync</name></name> <operator pos:start="81:19" pos:end="81:19">=</operator> <name pos:start="81:21" pos:end="81:41">MIRROR_SYNC_MODE_FULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:43">(<expr pos:start="85:9" pos:end="85:42"><name pos:start="85:9" pos:end="85:17"><name pos:start="85:9" pos:end="85:11">arg</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:17">sync</name></name> <operator pos:start="85:19" pos:end="85:20">==</operator> <name pos:start="85:22" pos:end="85:42">MIRROR_SYNC_MODE_NONE</name></expr>)</condition> <block pos:start="85:45" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:20">

        <expr_stmt pos:start="87:9" pos:end="87:20"><expr pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:14">source</name> <operator pos:start="87:16" pos:end="87:16">=</operator> <name pos:start="87:18" pos:end="87:19">bs</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:30"><expr pos:start="93:5" pos:end="93:29"><name pos:start="93:5" pos:end="93:8">size</name> <operator pos:start="93:10" pos:end="93:10">=</operator> <call pos:start="93:12" pos:end="93:29"><name pos:start="93:12" pos:end="93:25">bdrv_getlength</name><argument_list pos:start="93:26" pos:end="93:29">(<argument pos:start="93:27" pos:end="93:28"><expr pos:start="93:27" pos:end="93:28"><name pos:start="93:27" pos:end="93:28">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="101:5"><if pos:start="95:5" pos:end="101:5">if <condition pos:start="95:8" pos:end="95:17">(<expr pos:start="95:9" pos:end="95:16"><name pos:start="95:9" pos:end="95:12">size</name> <operator pos:start="95:14" pos:end="95:14">&lt;</operator> <literal type="number" pos:start="95:16" pos:end="95:16">0</literal></expr>)</condition> <block pos:start="95:19" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:17">

        <expr_stmt pos:start="97:9" pos:end="97:63"><expr pos:start="97:9" pos:end="97:62"><call pos:start="97:9" pos:end="97:62"><name pos:start="97:9" pos:end="97:24">error_setg_errno</name><argument_list pos:start="97:25" pos:end="97:62">(<argument pos:start="97:26" pos:end="97:29"><expr pos:start="97:26" pos:end="97:29"><name pos:start="97:26" pos:end="97:29">errp</name></expr></argument>, <argument pos:start="97:32" pos:end="97:36"><expr pos:start="97:32" pos:end="97:36"><operator pos:start="97:32" pos:end="97:32">-</operator><name pos:start="97:33" pos:end="97:36">size</name></expr></argument>, <argument pos:start="97:39" pos:end="97:61"><expr pos:start="97:39" pos:end="97:61"><literal type="string" pos:start="97:39" pos:end="97:61">"bdrv_getlength failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:17">goto <name pos:start="99:14" pos:end="99:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="161:5"><if pos:start="105:5" pos:end="161:5">if <condition pos:start="105:8" pos:end="105:26">(<expr pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:25"><name pos:start="105:9" pos:end="105:11">arg</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:25">has_replaces</name></name></expr>)</condition> <block pos:start="105:28" pos:end="161:5">{<block_content pos:start="107:9" pos:end="159:9">

        <decl_stmt pos:start="107:9" pos:end="107:40"><decl pos:start="107:9" pos:end="107:39"><type pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:24">BlockDriverState</name> <modifier pos:start="107:26" pos:end="107:26">*</modifier></type><name pos:start="107:27" pos:end="107:39">to_replace_bs</name></decl>;</decl_stmt>

        <decl_stmt pos:start="109:9" pos:end="109:40"><decl pos:start="109:9" pos:end="109:39"><type pos:start="109:9" pos:end="109:20"><name pos:start="109:9" pos:end="109:18">AioContext</name> <modifier pos:start="109:20" pos:end="109:20">*</modifier></type><name pos:start="109:21" pos:end="109:39">replace_aio_context</name></decl>;</decl_stmt>

        <decl_stmt pos:start="111:9" pos:end="111:29"><decl pos:start="111:9" pos:end="111:28"><type pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:15">int64_t</name></type> <name pos:start="111:17" pos:end="111:28">replace_size</name></decl>;</decl_stmt>



        <if_stmt pos:start="115:9" pos:end="123:9"><if pos:start="115:9" pos:end="123:9">if <condition pos:start="115:12" pos:end="115:32">(<expr pos:start="115:13" pos:end="115:31"><operator pos:start="115:13" pos:end="115:13">!</operator><name pos:start="115:14" pos:end="115:31"><name pos:start="115:14" pos:end="115:16">arg</name><operator pos:start="115:17" pos:end="115:18">-&gt;</operator><name pos:start="115:19" pos:end="115:31">has_node_name</name></name></expr>)</condition> <block pos:start="115:34" pos:end="123:9">{<block_content pos:start="117:13" pos:end="121:21">

            <expr_stmt pos:start="117:13" pos:end="119:57"><expr pos:start="117:13" pos:end="119:56"><call pos:start="117:13" pos:end="119:56"><name pos:start="117:13" pos:end="117:22">error_setg</name><argument_list pos:start="117:23" pos:end="119:56">(<argument pos:start="117:24" pos:end="117:27"><expr pos:start="117:24" pos:end="117:27"><name pos:start="117:24" pos:end="117:27">errp</name></expr></argument>, <argument pos:start="117:30" pos:end="119:55"><expr pos:start="117:30" pos:end="119:55"><literal type="string" pos:start="117:30" pos:end="117:76">"a node-name must be provided when replacing a"</literal>

                             <literal type="string" pos:start="119:30" pos:end="119:55">" named node of the graph"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="121:13" pos:end="121:21">goto <name pos:start="121:18" pos:end="121:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:77"><expr pos:start="127:9" pos:end="127:76"><name pos:start="127:9" pos:end="127:21">to_replace_bs</name> <operator pos:start="127:23" pos:end="127:23">=</operator> <call pos:start="127:25" pos:end="127:76"><name pos:start="127:25" pos:end="127:45">check_to_replace_node</name><argument_list pos:start="127:46" pos:end="127:76">(<argument pos:start="127:47" pos:end="127:48"><expr pos:start="127:47" pos:end="127:48"><name pos:start="127:47" pos:end="127:48">bs</name></expr></argument>, <argument pos:start="127:51" pos:end="127:63"><expr pos:start="127:51" pos:end="127:63"><name pos:start="127:51" pos:end="127:63"><name pos:start="127:51" pos:end="127:53">arg</name><operator pos:start="127:54" pos:end="127:55">-&gt;</operator><name pos:start="127:56" pos:end="127:63">replaces</name></name></expr></argument>, <argument pos:start="127:66" pos:end="127:75"><expr pos:start="127:66" pos:end="127:75"><operator pos:start="127:66" pos:end="127:66">&amp;</operator><name pos:start="127:67" pos:end="127:75">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:27">(<expr pos:start="131:13" pos:end="131:26"><operator pos:start="131:13" pos:end="131:13">!</operator><name pos:start="131:14" pos:end="131:26">to_replace_bs</name></expr>)</condition> <block pos:start="131:29" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:21">

            <expr_stmt pos:start="133:13" pos:end="133:45"><expr pos:start="133:13" pos:end="133:44"><call pos:start="133:13" pos:end="133:44"><name pos:start="133:13" pos:end="133:27">error_propagate</name><argument_list pos:start="133:28" pos:end="133:44">(<argument pos:start="133:29" pos:end="133:32"><expr pos:start="133:29" pos:end="133:32"><name pos:start="133:29" pos:end="133:32">errp</name></expr></argument>, <argument pos:start="133:35" pos:end="133:43"><expr pos:start="133:35" pos:end="133:43"><name pos:start="133:35" pos:end="133:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="135:13" pos:end="135:21">goto <name pos:start="135:18" pos:end="135:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="141:9" pos:end="141:66"><expr pos:start="141:9" pos:end="141:65"><name pos:start="141:9" pos:end="141:27">replace_aio_context</name> <operator pos:start="141:29" pos:end="141:29">=</operator> <call pos:start="141:31" pos:end="141:65"><name pos:start="141:31" pos:end="141:50">bdrv_get_aio_context</name><argument_list pos:start="141:51" pos:end="141:65">(<argument pos:start="141:52" pos:end="141:64"><expr pos:start="141:52" pos:end="141:64"><name pos:start="141:52" pos:end="141:64">to_replace_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:49"><expr pos:start="143:9" pos:end="143:48"><call pos:start="143:9" pos:end="143:48"><name pos:start="143:9" pos:end="143:27">aio_context_acquire</name><argument_list pos:start="143:28" pos:end="143:48">(<argument pos:start="143:29" pos:end="143:47"><expr pos:start="143:29" pos:end="143:47"><name pos:start="143:29" pos:end="143:47">replace_aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:53"><expr pos:start="145:9" pos:end="145:52"><name pos:start="145:9" pos:end="145:20">replace_size</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <call pos:start="145:24" pos:end="145:52"><name pos:start="145:24" pos:end="145:37">bdrv_getlength</name><argument_list pos:start="145:38" pos:end="145:52">(<argument pos:start="145:39" pos:end="145:51"><expr pos:start="145:39" pos:end="145:51"><name pos:start="145:39" pos:end="145:51">to_replace_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:49"><expr pos:start="147:9" pos:end="147:48"><call pos:start="147:9" pos:end="147:48"><name pos:start="147:9" pos:end="147:27">aio_context_release</name><argument_list pos:start="147:28" pos:end="147:48">(<argument pos:start="147:29" pos:end="147:47"><expr pos:start="147:29" pos:end="147:47"><name pos:start="147:29" pos:end="147:47">replace_aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="151:9" pos:end="159:9"><if pos:start="151:9" pos:end="159:9">if <condition pos:start="151:12" pos:end="151:33">(<expr pos:start="151:13" pos:end="151:32"><name pos:start="151:13" pos:end="151:16">size</name> <operator pos:start="151:18" pos:end="151:19">!=</operator> <name pos:start="151:21" pos:end="151:32">replace_size</name></expr>)</condition> <block pos:start="151:35" pos:end="159:9">{<block_content pos:start="153:13" pos:end="157:21">

            <expr_stmt pos:start="153:13" pos:end="155:47"><expr pos:start="153:13" pos:end="155:46"><call pos:start="153:13" pos:end="155:46"><name pos:start="153:13" pos:end="153:22">error_setg</name><argument_list pos:start="153:23" pos:end="155:46">(<argument pos:start="153:24" pos:end="153:27"><expr pos:start="153:24" pos:end="153:27"><name pos:start="153:24" pos:end="153:27">errp</name></expr></argument>, <argument pos:start="153:30" pos:end="155:45"><expr pos:start="153:30" pos:end="155:45"><literal type="string" pos:start="153:30" pos:end="153:75">"cannot replace image with a mirror image of "</literal>

                             <literal type="string" pos:start="155:30" pos:end="155:45">"different size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="157:13" pos:end="157:21">goto <name pos:start="157:18" pos:end="157:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="165:5" pos:end="173:5"><if pos:start="165:5" pos:end="169:5">if <condition pos:start="165:8" pos:end="165:51">(<expr pos:start="165:9" pos:end="165:50"><name pos:start="165:9" pos:end="165:17"><name pos:start="165:9" pos:end="165:11">arg</name><operator pos:start="165:12" pos:end="165:13">-&gt;</operator><name pos:start="165:14" pos:end="165:17">mode</name></name> <operator pos:start="165:19" pos:end="165:20">==</operator> <name pos:start="165:22" pos:end="165:50">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>)</condition> <block pos:start="165:53" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:51">

        <expr_stmt pos:start="167:9" pos:end="167:51"><expr pos:start="167:9" pos:end="167:50"><name pos:start="167:9" pos:end="167:20">backing_mode</name> <operator pos:start="167:22" pos:end="167:22">=</operator> <name pos:start="167:24" pos:end="167:50">MIRROR_SOURCE_BACKING_CHAIN</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="169:7" pos:end="173:5">else <block pos:start="169:12" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:49">

        <expr_stmt pos:start="171:9" pos:end="171:49"><expr pos:start="171:9" pos:end="171:48"><name pos:start="171:9" pos:end="171:20">backing_mode</name> <operator pos:start="171:22" pos:end="171:22">=</operator> <name pos:start="171:24" pos:end="171:48">MIRROR_OPEN_BACKING_CHAIN</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="177:5" pos:end="219:5"><if pos:start="177:5" pos:end="191:5">if <condition pos:start="177:8" pos:end="179:48">(<expr pos:start="177:9" pos:end="179:47"><operator pos:start="177:9" pos:end="177:9">(</operator><name pos:start="177:10" pos:end="177:18"><name pos:start="177:10" pos:end="177:12">arg</name><operator pos:start="177:13" pos:end="177:14">-&gt;</operator><name pos:start="177:15" pos:end="177:18">sync</name></name> <operator pos:start="177:20" pos:end="177:21">==</operator> <name pos:start="177:23" pos:end="177:43">MIRROR_SYNC_MODE_FULL</name> <operator pos:start="177:45" pos:end="177:46">||</operator> <operator pos:start="177:48" pos:end="177:48">!</operator><name pos:start="177:49" pos:end="177:54">source</name><operator pos:start="177:55" pos:end="177:55">)</operator>

        <operator pos:start="179:9" pos:end="179:10">&amp;&amp;</operator> <name pos:start="179:12" pos:end="179:20"><name pos:start="179:12" pos:end="179:14">arg</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:20">mode</name></name> <operator pos:start="179:22" pos:end="179:23">!=</operator> <name pos:start="179:25" pos:end="179:47">NEW_IMAGE_MODE_EXISTING</name></expr>)</condition>

    <block pos:start="181:5" pos:end="191:5">{<block_content pos:start="185:9" pos:end="189:74">

        <comment type="block" pos:start="183:9" pos:end="183:47">/* create new image w/o backing file */</comment>

        <expr_stmt pos:start="185:9" pos:end="185:23"><expr pos:start="185:9" pos:end="185:22"><call pos:start="185:9" pos:end="185:22"><name pos:start="185:9" pos:end="185:14">assert</name><argument_list pos:start="185:15" pos:end="185:22">(<argument pos:start="185:16" pos:end="185:21"><expr pos:start="185:16" pos:end="185:21"><name pos:start="185:16" pos:end="185:21">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="189:74"><expr pos:start="187:9" pos:end="189:73"><call pos:start="187:9" pos:end="189:73"><name pos:start="187:9" pos:end="187:23">bdrv_img_create</name><argument_list pos:start="187:24" pos:end="189:73">(<argument pos:start="187:25" pos:end="187:35"><expr pos:start="187:25" pos:end="187:35"><name pos:start="187:25" pos:end="187:35"><name pos:start="187:25" pos:end="187:27">arg</name><operator pos:start="187:28" pos:end="187:29">-&gt;</operator><name pos:start="187:30" pos:end="187:35">target</name></name></expr></argument>, <argument pos:start="187:38" pos:end="187:43"><expr pos:start="187:38" pos:end="187:43"><name pos:start="187:38" pos:end="187:43">format</name></expr></argument>,

                        <argument pos:start="189:25" pos:end="189:28"><expr pos:start="189:25" pos:end="189:28"><name pos:start="189:25" pos:end="189:28">NULL</name></expr></argument>, <argument pos:start="189:31" pos:end="189:34"><expr pos:start="189:31" pos:end="189:34"><name pos:start="189:31" pos:end="189:34">NULL</name></expr></argument>, <argument pos:start="189:37" pos:end="189:40"><expr pos:start="189:37" pos:end="189:40"><name pos:start="189:37" pos:end="189:40">NULL</name></expr></argument>, <argument pos:start="189:43" pos:end="189:46"><expr pos:start="189:43" pos:end="189:46"><name pos:start="189:43" pos:end="189:46">size</name></expr></argument>, <argument pos:start="189:49" pos:end="189:53"><expr pos:start="189:49" pos:end="189:53"><name pos:start="189:49" pos:end="189:53">flags</name></expr></argument>, <argument pos:start="189:56" pos:end="189:65"><expr pos:start="189:56" pos:end="189:65"><operator pos:start="189:56" pos:end="189:56">&amp;</operator><name pos:start="189:57" pos:end="189:65">local_err</name></expr></argument>, <argument pos:start="189:68" pos:end="189:72"><expr pos:start="189:68" pos:end="189:72"><name pos:start="189:68" pos:end="189:72">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="191:7" pos:end="219:5">else <block pos:start="191:12" pos:end="219:5">{<block_content pos:start="193:9" pos:end="217:9">

        <switch pos:start="193:9" pos:end="217:9">switch <condition pos:start="193:16" pos:end="193:26">(<expr pos:start="193:17" pos:end="193:25"><name pos:start="193:17" pos:end="193:25"><name pos:start="193:17" pos:end="193:19">arg</name><operator pos:start="193:20" pos:end="193:21">-&gt;</operator><name pos:start="193:22" pos:end="193:25">mode</name></name></expr>)</condition> <block pos:start="193:28" pos:end="217:9">{<block_content pos:start="195:9" pos:end="215:20">

        <case pos:start="195:9" pos:end="195:37">case <expr pos:start="195:14" pos:end="195:36"><name pos:start="195:14" pos:end="195:36">NEW_IMAGE_MODE_EXISTING</name></expr>:</case>

            <break pos:start="197:13" pos:end="197:18">break;</break>

        <case pos:start="199:9" pos:end="199:43">case <expr pos:start="199:14" pos:end="199:42"><name pos:start="199:14" pos:end="199:42">NEW_IMAGE_MODE_ABSOLUTE_PATHS</name></expr>:</case>

            <comment type="block" pos:start="201:13" pos:end="201:52">/* create new image with backing file */</comment>

            <expr_stmt pos:start="203:13" pos:end="209:66"><expr pos:start="203:13" pos:end="209:65"><call pos:start="203:13" pos:end="209:65"><name pos:start="203:13" pos:end="203:27">bdrv_img_create</name><argument_list pos:start="203:28" pos:end="209:65">(<argument pos:start="203:29" pos:end="203:39"><expr pos:start="203:29" pos:end="203:39"><name pos:start="203:29" pos:end="203:39"><name pos:start="203:29" pos:end="203:31">arg</name><operator pos:start="203:32" pos:end="203:33">-&gt;</operator><name pos:start="203:34" pos:end="203:39">target</name></name></expr></argument>, <argument pos:start="203:42" pos:end="203:47"><expr pos:start="203:42" pos:end="203:47"><name pos:start="203:42" pos:end="203:47">format</name></expr></argument>,

                            <argument pos:start="205:29" pos:end="205:44"><expr pos:start="205:29" pos:end="205:44"><name pos:start="205:29" pos:end="205:44"><name pos:start="205:29" pos:end="205:34">source</name><operator pos:start="205:35" pos:end="205:36">-&gt;</operator><name pos:start="205:37" pos:end="205:44">filename</name></name></expr></argument>,

                            <argument pos:start="207:29" pos:end="207:52"><expr pos:start="207:29" pos:end="207:52"><name pos:start="207:29" pos:end="207:52"><name pos:start="207:29" pos:end="207:34">source</name><operator pos:start="207:35" pos:end="207:36">-&gt;</operator><name pos:start="207:37" pos:end="207:39">drv</name><operator pos:start="207:40" pos:end="207:41">-&gt;</operator><name pos:start="207:42" pos:end="207:52">format_name</name></name></expr></argument>,

                            <argument pos:start="209:29" pos:end="209:32"><expr pos:start="209:29" pos:end="209:32"><name pos:start="209:29" pos:end="209:32">NULL</name></expr></argument>, <argument pos:start="209:35" pos:end="209:38"><expr pos:start="209:35" pos:end="209:38"><name pos:start="209:35" pos:end="209:38">size</name></expr></argument>, <argument pos:start="209:41" pos:end="209:45"><expr pos:start="209:41" pos:end="209:45"><name pos:start="209:41" pos:end="209:45">flags</name></expr></argument>, <argument pos:start="209:48" pos:end="209:57"><expr pos:start="209:48" pos:end="209:57"><operator pos:start="209:48" pos:end="209:48">&amp;</operator><name pos:start="209:49" pos:end="209:57">local_err</name></expr></argument>, <argument pos:start="209:60" pos:end="209:64"><expr pos:start="209:60" pos:end="209:64"><name pos:start="209:60" pos:end="209:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="211:13" pos:end="211:18">break;</break>

        <default pos:start="213:9" pos:end="213:16">default:</default>

            <expr_stmt pos:start="215:13" pos:end="215:20"><expr pos:start="215:13" pos:end="215:19"><call pos:start="215:13" pos:end="215:19"><name pos:start="215:13" pos:end="215:17">abort</name><argument_list pos:start="215:18" pos:end="215:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="223:5" pos:end="229:5"><if pos:start="223:5" pos:end="229:5">if <condition pos:start="223:8" pos:end="223:18">(<expr pos:start="223:9" pos:end="223:17"><name pos:start="223:9" pos:end="223:17">local_err</name></expr>)</condition> <block pos:start="223:20" pos:end="229:5">{<block_content pos:start="225:9" pos:end="227:17">

        <expr_stmt pos:start="225:9" pos:end="225:41"><expr pos:start="225:9" pos:end="225:40"><call pos:start="225:9" pos:end="225:40"><name pos:start="225:9" pos:end="225:23">error_propagate</name><argument_list pos:start="225:24" pos:end="225:40">(<argument pos:start="225:25" pos:end="225:28"><expr pos:start="225:25" pos:end="225:28"><name pos:start="225:25" pos:end="225:28">errp</name></expr></argument>, <argument pos:start="225:31" pos:end="225:39"><expr pos:start="225:31" pos:end="225:39"><name pos:start="225:31" pos:end="225:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="227:9" pos:end="227:17">goto <name pos:start="227:14" pos:end="227:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="233:5" pos:end="233:26"><expr pos:start="233:5" pos:end="233:25"><name pos:start="233:5" pos:end="233:11">options</name> <operator pos:start="233:13" pos:end="233:13">=</operator> <call pos:start="233:15" pos:end="233:25"><name pos:start="233:15" pos:end="233:23">qdict_new</name><argument_list pos:start="233:24" pos:end="233:25">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="235:5" pos:end="239:5"><if pos:start="235:5" pos:end="239:5">if <condition pos:start="235:8" pos:end="235:27">(<expr pos:start="235:9" pos:end="235:26"><name pos:start="235:9" pos:end="235:26"><name pos:start="235:9" pos:end="235:11">arg</name><operator pos:start="235:12" pos:end="235:13">-&gt;</operator><name pos:start="235:14" pos:end="235:26">has_node_name</name></name></expr>)</condition> <block pos:start="235:29" pos:end="239:5">{<block_content pos:start="237:9" pos:end="237:74">

        <expr_stmt pos:start="237:9" pos:end="237:74"><expr pos:start="237:9" pos:end="237:73"><call pos:start="237:9" pos:end="237:73"><name pos:start="237:9" pos:end="237:17">qdict_put</name><argument_list pos:start="237:18" pos:end="237:73">(<argument pos:start="237:19" pos:end="237:25"><expr pos:start="237:19" pos:end="237:25"><name pos:start="237:19" pos:end="237:25">options</name></expr></argument>, <argument pos:start="237:28" pos:end="237:38"><expr pos:start="237:28" pos:end="237:38"><literal type="string" pos:start="237:28" pos:end="237:38">"node-name"</literal></expr></argument>, <argument pos:start="237:41" pos:end="237:72"><expr pos:start="237:41" pos:end="237:72"><call pos:start="237:41" pos:end="237:72"><name pos:start="237:41" pos:end="237:56">qstring_from_str</name><argument_list pos:start="237:57" pos:end="237:72">(<argument pos:start="237:58" pos:end="237:71"><expr pos:start="237:58" pos:end="237:71"><name pos:start="237:58" pos:end="237:71"><name pos:start="237:58" pos:end="237:60">arg</name><operator pos:start="237:61" pos:end="237:62">-&gt;</operator><name pos:start="237:63" pos:end="237:71">node_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="241:5" pos:end="245:5"><if pos:start="241:5" pos:end="245:5">if <condition pos:start="241:8" pos:end="241:15">(<expr pos:start="241:9" pos:end="241:14"><name pos:start="241:9" pos:end="241:14">format</name></expr>)</condition> <block pos:start="241:17" pos:end="245:5">{<block_content pos:start="243:9" pos:end="243:63">

        <expr_stmt pos:start="243:9" pos:end="243:63"><expr pos:start="243:9" pos:end="243:62"><call pos:start="243:9" pos:end="243:62"><name pos:start="243:9" pos:end="243:17">qdict_put</name><argument_list pos:start="243:18" pos:end="243:62">(<argument pos:start="243:19" pos:end="243:25"><expr pos:start="243:19" pos:end="243:25"><name pos:start="243:19" pos:end="243:25">options</name></expr></argument>, <argument pos:start="243:28" pos:end="243:35"><expr pos:start="243:28" pos:end="243:35"><literal type="string" pos:start="243:28" pos:end="243:35">"driver"</literal></expr></argument>, <argument pos:start="243:38" pos:end="243:61"><expr pos:start="243:38" pos:end="243:61"><call pos:start="243:38" pos:end="243:61"><name pos:start="243:38" pos:end="243:53">qstring_from_str</name><argument_list pos:start="243:54" pos:end="243:61">(<argument pos:start="243:55" pos:end="243:60"><expr pos:start="243:55" pos:end="243:60"><name pos:start="243:55" pos:end="243:60">format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="249:5" pos:end="253:7">/* Mirroring takes care of copy-on-write using the source's backing

     * file.

     */</comment>

    <expr_stmt pos:start="255:5" pos:end="257:59"><expr pos:start="255:5" pos:end="257:58"><name pos:start="255:5" pos:end="255:13">target_bs</name> <operator pos:start="255:15" pos:end="255:15">=</operator> <call pos:start="255:17" pos:end="257:58"><name pos:start="255:17" pos:end="255:25">bdrv_open</name><argument_list pos:start="255:26" pos:end="257:58">(<argument pos:start="255:27" pos:end="255:37"><expr pos:start="255:27" pos:end="255:37"><name pos:start="255:27" pos:end="255:37"><name pos:start="255:27" pos:end="255:29">arg</name><operator pos:start="255:30" pos:end="255:31">-&gt;</operator><name pos:start="255:32" pos:end="255:37">target</name></name></expr></argument>, <argument pos:start="255:40" pos:end="255:43"><expr pos:start="255:40" pos:end="255:43"><name pos:start="255:40" pos:end="255:43">NULL</name></expr></argument>, <argument pos:start="255:46" pos:end="255:52"><expr pos:start="255:46" pos:end="255:52"><name pos:start="255:46" pos:end="255:52">options</name></expr></argument>,

                          <argument pos:start="257:27" pos:end="257:51"><expr pos:start="257:27" pos:end="257:51"><name pos:start="257:27" pos:end="257:31">flags</name> <operator pos:start="257:33" pos:end="257:33">|</operator> <name pos:start="257:35" pos:end="257:51">BDRV_O_NO_BACKING</name></expr></argument>, <argument pos:start="257:54" pos:end="257:57"><expr pos:start="257:54" pos:end="257:57"><name pos:start="257:54" pos:end="257:57">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="259:5" pos:end="263:5"><if pos:start="259:5" pos:end="263:5">if <condition pos:start="259:8" pos:end="259:19">(<expr pos:start="259:9" pos:end="259:18"><operator pos:start="259:9" pos:end="259:9">!</operator><name pos:start="259:10" pos:end="259:18">target_bs</name></expr>)</condition> <block pos:start="259:21" pos:end="263:5">{<block_content pos:start="261:9" pos:end="261:17">

        <goto pos:start="261:9" pos:end="261:17">goto <name pos:start="261:14" pos:end="261:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="267:5" pos:end="267:49"><expr pos:start="267:5" pos:end="267:48"><call pos:start="267:5" pos:end="267:48"><name pos:start="267:5" pos:end="267:24">bdrv_set_aio_context</name><argument_list pos:start="267:25" pos:end="267:48">(<argument pos:start="267:26" pos:end="267:34"><expr pos:start="267:26" pos:end="267:34"><name pos:start="267:26" pos:end="267:34">target_bs</name></expr></argument>, <argument pos:start="267:37" pos:end="267:47"><expr pos:start="267:37" pos:end="267:47"><name pos:start="267:37" pos:end="267:47">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="271:5" pos:end="287:39"><expr pos:start="271:5" pos:end="287:38"><call pos:start="271:5" pos:end="287:38"><name pos:start="271:5" pos:end="271:26">blockdev_mirror_common</name><argument_list pos:start="271:27" pos:end="287:38">(<argument pos:start="271:28" pos:end="271:63"><expr pos:start="271:28" pos:end="271:63"><ternary pos:start="271:28" pos:end="271:63"><condition pos:start="271:28" pos:end="271:44"><expr pos:start="271:28" pos:end="271:42"><name pos:start="271:28" pos:end="271:42"><name pos:start="271:28" pos:end="271:30">arg</name><operator pos:start="271:31" pos:end="271:32">-&gt;</operator><name pos:start="271:33" pos:end="271:42">has_job_id</name></name></expr> ?</condition><then pos:start="271:46" pos:end="271:56"> <expr pos:start="271:46" pos:end="271:56"><name pos:start="271:46" pos:end="271:56"><name pos:start="271:46" pos:end="271:48">arg</name><operator pos:start="271:49" pos:end="271:50">-&gt;</operator><name pos:start="271:51" pos:end="271:56">job_id</name></name></expr> </then><else pos:start="271:58" pos:end="271:63">: <expr pos:start="271:60" pos:end="271:63"><name pos:start="271:60" pos:end="271:63">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="271:66" pos:end="271:67"><expr pos:start="271:66" pos:end="271:67"><name pos:start="271:66" pos:end="271:67">bs</name></expr></argument>, <argument pos:start="271:70" pos:end="271:78"><expr pos:start="271:70" pos:end="271:78"><name pos:start="271:70" pos:end="271:78">target_bs</name></expr></argument>,

                           <argument pos:start="273:28" pos:end="273:44"><expr pos:start="273:28" pos:end="273:44"><name pos:start="273:28" pos:end="273:44"><name pos:start="273:28" pos:end="273:30">arg</name><operator pos:start="273:31" pos:end="273:32">-&gt;</operator><name pos:start="273:33" pos:end="273:44">has_replaces</name></name></expr></argument>, <argument pos:start="273:47" pos:end="273:59"><expr pos:start="273:47" pos:end="273:59"><name pos:start="273:47" pos:end="273:59"><name pos:start="273:47" pos:end="273:49">arg</name><operator pos:start="273:50" pos:end="273:51">-&gt;</operator><name pos:start="273:52" pos:end="273:59">replaces</name></name></expr></argument>, <argument pos:start="273:62" pos:end="273:70"><expr pos:start="273:62" pos:end="273:70"><name pos:start="273:62" pos:end="273:70"><name pos:start="273:62" pos:end="273:64">arg</name><operator pos:start="273:65" pos:end="273:66">-&gt;</operator><name pos:start="273:67" pos:end="273:70">sync</name></name></expr></argument>,

                           <argument pos:start="275:28" pos:end="275:39"><expr pos:start="275:28" pos:end="275:39"><name pos:start="275:28" pos:end="275:39">backing_mode</name></expr></argument>, <argument pos:start="275:42" pos:end="275:55"><expr pos:start="275:42" pos:end="275:55"><name pos:start="275:42" pos:end="275:55"><name pos:start="275:42" pos:end="275:44">arg</name><operator pos:start="275:45" pos:end="275:46">-&gt;</operator><name pos:start="275:47" pos:end="275:55">has_speed</name></name></expr></argument>, <argument pos:start="275:58" pos:end="275:67"><expr pos:start="275:58" pos:end="275:67"><name pos:start="275:58" pos:end="275:67"><name pos:start="275:58" pos:end="275:60">arg</name><operator pos:start="275:61" pos:end="275:62">-&gt;</operator><name pos:start="275:63" pos:end="275:67">speed</name></name></expr></argument>,

                           <argument pos:start="277:28" pos:end="277:47"><expr pos:start="277:28" pos:end="277:47"><name pos:start="277:28" pos:end="277:47"><name pos:start="277:28" pos:end="277:30">arg</name><operator pos:start="277:31" pos:end="277:32">-&gt;</operator><name pos:start="277:33" pos:end="277:47">has_granularity</name></name></expr></argument>, <argument pos:start="277:50" pos:end="277:65"><expr pos:start="277:50" pos:end="277:65"><name pos:start="277:50" pos:end="277:65"><name pos:start="277:50" pos:end="277:52">arg</name><operator pos:start="277:53" pos:end="277:54">-&gt;</operator><name pos:start="277:55" pos:end="277:65">granularity</name></name></expr></argument>,

                           <argument pos:start="279:28" pos:end="279:44"><expr pos:start="279:28" pos:end="279:44"><name pos:start="279:28" pos:end="279:44"><name pos:start="279:28" pos:end="279:30">arg</name><operator pos:start="279:31" pos:end="279:32">-&gt;</operator><name pos:start="279:33" pos:end="279:44">has_buf_size</name></name></expr></argument>, <argument pos:start="279:47" pos:end="279:59"><expr pos:start="279:47" pos:end="279:59"><name pos:start="279:47" pos:end="279:59"><name pos:start="279:47" pos:end="279:49">arg</name><operator pos:start="279:50" pos:end="279:51">-&gt;</operator><name pos:start="279:52" pos:end="279:59">buf_size</name></name></expr></argument>,

                           <argument pos:start="281:28" pos:end="281:51"><expr pos:start="281:28" pos:end="281:51"><name pos:start="281:28" pos:end="281:51"><name pos:start="281:28" pos:end="281:30">arg</name><operator pos:start="281:31" pos:end="281:32">-&gt;</operator><name pos:start="281:33" pos:end="281:51">has_on_source_error</name></name></expr></argument>, <argument pos:start="281:54" pos:end="281:73"><expr pos:start="281:54" pos:end="281:73"><name pos:start="281:54" pos:end="281:73"><name pos:start="281:54" pos:end="281:56">arg</name><operator pos:start="281:57" pos:end="281:58">-&gt;</operator><name pos:start="281:59" pos:end="281:73">on_source_error</name></name></expr></argument>,

                           <argument pos:start="283:28" pos:end="283:51"><expr pos:start="283:28" pos:end="283:51"><name pos:start="283:28" pos:end="283:51"><name pos:start="283:28" pos:end="283:30">arg</name><operator pos:start="283:31" pos:end="283:32">-&gt;</operator><name pos:start="283:33" pos:end="283:51">has_on_target_error</name></name></expr></argument>, <argument pos:start="283:54" pos:end="283:73"><expr pos:start="283:54" pos:end="283:73"><name pos:start="283:54" pos:end="283:73"><name pos:start="283:54" pos:end="283:56">arg</name><operator pos:start="283:57" pos:end="283:58">-&gt;</operator><name pos:start="283:59" pos:end="283:73">on_target_error</name></name></expr></argument>,

                           <argument pos:start="285:28" pos:end="285:41"><expr pos:start="285:28" pos:end="285:41"><name pos:start="285:28" pos:end="285:41"><name pos:start="285:28" pos:end="285:30">arg</name><operator pos:start="285:31" pos:end="285:32">-&gt;</operator><name pos:start="285:33" pos:end="285:41">has_unmap</name></name></expr></argument>, <argument pos:start="285:44" pos:end="285:53"><expr pos:start="285:44" pos:end="285:53"><name pos:start="285:44" pos:end="285:53"><name pos:start="285:44" pos:end="285:46">arg</name><operator pos:start="285:47" pos:end="285:48">-&gt;</operator><name pos:start="285:49" pos:end="285:53">unmap</name></name></expr></argument>,

                           <argument pos:start="287:28" pos:end="287:37"><expr pos:start="287:28" pos:end="287:37"><operator pos:start="287:28" pos:end="287:28">&amp;</operator><name pos:start="287:29" pos:end="287:37">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:26"><expr pos:start="289:5" pos:end="289:25"><call pos:start="289:5" pos:end="289:25"><name pos:start="289:5" pos:end="289:14">bdrv_unref</name><argument_list pos:start="289:15" pos:end="289:25">(<argument pos:start="289:16" pos:end="289:24"><expr pos:start="289:16" pos:end="289:24"><name pos:start="289:16" pos:end="289:24">target_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:37"><expr pos:start="291:5" pos:end="291:36"><call pos:start="291:5" pos:end="291:36"><name pos:start="291:5" pos:end="291:19">error_propagate</name><argument_list pos:start="291:20" pos:end="291:36">(<argument pos:start="291:21" pos:end="291:24"><expr pos:start="291:21" pos:end="291:24"><name pos:start="291:21" pos:end="291:24">errp</name></expr></argument>, <argument pos:start="291:27" pos:end="291:35"><expr pos:start="291:27" pos:end="291:35"><name pos:start="291:27" pos:end="291:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="293:1" pos:end="293:4"><name pos:start="293:1" pos:end="293:3">out</name>:</label>

    <expr_stmt pos:start="295:5" pos:end="295:37"><expr pos:start="295:5" pos:end="295:36"><call pos:start="295:5" pos:end="295:36"><name pos:start="295:5" pos:end="295:23">aio_context_release</name><argument_list pos:start="295:24" pos:end="295:36">(<argument pos:start="295:25" pos:end="295:35"><expr pos:start="295:25" pos:end="295:35"><name pos:start="295:25" pos:end="295:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
