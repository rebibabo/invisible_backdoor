<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1173.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">aio_read_f</name><parameter_list pos:start="1:22" pos:end="1:44">(<parameter pos:start="1:23" pos:end="1:30"><decl pos:start="1:23" pos:end="1:30"><type pos:start="1:23" pos:end="1:30"><name pos:start="1:23" pos:end="1:25">int</name></type> <name pos:start="1:27" pos:end="1:30">argc</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:43"><decl pos:start="1:33" pos:end="1:43"><type pos:start="1:33" pos:end="1:43"><name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier><modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:43">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">nr_iov</name></decl>, <decl pos:start="5:17" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:17">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:60"><decl pos:start="7:5" pos:end="7:59"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:18">aio_ctx</name></name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:23">ctx</name> <init pos:start="7:25" pos:end="7:59">= <expr pos:start="7:27" pos:end="7:59"><call pos:start="7:27" pos:end="7:59"><name pos:start="7:27" pos:end="7:32">calloc</name><argument_list pos:start="7:33" pos:end="7:59">(<argument pos:start="7:34" pos:end="7:34"><expr pos:start="7:34" pos:end="7:34"><literal type="number" pos:start="7:34" pos:end="7:34">1</literal></expr></argument>, <argument pos:start="7:37" pos:end="7:58"><expr pos:start="7:37" pos:end="7:58"><sizeof pos:start="7:37" pos:end="7:58">sizeof<argument_list pos:start="7:43" pos:end="7:58">(<argument pos:start="7:44" pos:end="7:57"><expr pos:start="7:44" pos:end="7:57">struct <name pos:start="7:51" pos:end="7:57">aio_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <while pos:start="11:5" pos:end="57:5">while <condition pos:start="11:11" pos:end="11:52">(<expr pos:start="11:12" pos:end="11:51"><operator pos:start="11:12" pos:end="11:12">(</operator><name pos:start="11:13" pos:end="11:13">c</name> <operator pos:start="11:15" pos:end="11:15">=</operator> <call pos:start="11:17" pos:end="11:43"><name pos:start="11:17" pos:end="11:22">getopt</name><argument_list pos:start="11:23" pos:end="11:43">(<argument pos:start="11:24" pos:end="11:27"><expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">argc</name></expr></argument>, <argument pos:start="11:30" pos:end="11:33"><expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">argv</name></expr></argument>, <argument pos:start="11:36" pos:end="11:42"><expr pos:start="11:36" pos:end="11:42"><literal type="string" pos:start="11:36" pos:end="11:42">"CP:qv"</literal></expr></argument>)</argument_list></call><operator pos:start="11:44" pos:end="11:44">)</operator> <operator pos:start="11:46" pos:end="11:47">!=</operator> <name pos:start="11:49" pos:end="11:51">EOF</name></expr>)</condition> <block pos:start="11:54" pos:end="57:5">{<block_content pos:start="13:9" pos:end="55:9">

        <switch pos:start="13:9" pos:end="55:9">switch <condition pos:start="13:16" pos:end="13:18">(<expr pos:start="13:17" pos:end="13:17"><name pos:start="13:17" pos:end="13:17">c</name></expr>)</condition> <block pos:start="13:20" pos:end="55:9">{<block_content pos:start="15:9" pos:end="53:48">

        <case pos:start="15:9" pos:end="15:17">case <expr pos:start="15:14" pos:end="15:16"><literal type="char" pos:start="15:14" pos:end="15:16">'C'</literal></expr>:</case>

            <expr_stmt pos:start="17:13" pos:end="17:27"><expr pos:start="17:13" pos:end="17:26"><name pos:start="17:13" pos:end="17:22"><name pos:start="17:13" pos:end="17:15">ctx</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:22">Cflag</name></name> <operator pos:start="17:24" pos:end="17:24">=</operator> <literal type="number" pos:start="17:26" pos:end="17:26">1</literal></expr>;</expr_stmt>

            <break pos:start="19:13" pos:end="19:18">break;</break>

        <case pos:start="21:9" pos:end="21:17">case <expr pos:start="21:14" pos:end="21:16"><literal type="char" pos:start="21:14" pos:end="21:16">'P'</literal></expr>:</case>

            <expr_stmt pos:start="23:13" pos:end="23:27"><expr pos:start="23:13" pos:end="23:26"><name pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:15">ctx</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:22">Pflag</name></name> <operator pos:start="23:24" pos:end="23:24">=</operator> <literal type="number" pos:start="23:26" pos:end="23:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:49"><expr pos:start="25:13" pos:end="25:48"><name pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:15">ctx</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:24">pattern</name></name> <operator pos:start="25:26" pos:end="25:26">=</operator> <call pos:start="25:28" pos:end="25:48"><name pos:start="25:28" pos:end="25:40">parse_pattern</name><argument_list pos:start="25:41" pos:end="25:48">(<argument pos:start="25:42" pos:end="25:47"><expr pos:start="25:42" pos:end="25:47"><name pos:start="25:42" pos:end="25:47">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="27:13" pos:end="33:13"><if pos:start="27:13" pos:end="33:13">if <condition pos:start="27:16" pos:end="27:33">(<expr pos:start="27:17" pos:end="27:32"><name pos:start="27:17" pos:end="27:28"><name pos:start="27:17" pos:end="27:19">ctx</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:28">pattern</name></name> <operator pos:start="27:30" pos:end="27:30">&lt;</operator> <literal type="number" pos:start="27:32" pos:end="27:32">0</literal></expr>)</condition> <block pos:start="27:35" pos:end="33:13">{<block_content pos:start="29:17" pos:end="31:25">

                <expr_stmt pos:start="29:17" pos:end="29:26"><expr pos:start="29:17" pos:end="29:25"><call pos:start="29:17" pos:end="29:25"><name pos:start="29:17" pos:end="29:20">free</name><argument_list pos:start="29:21" pos:end="29:25">(<argument pos:start="29:22" pos:end="29:24"><expr pos:start="29:22" pos:end="29:24"><name pos:start="29:22" pos:end="29:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="31:17" pos:end="31:25">return <expr pos:start="31:24" pos:end="31:24"><literal type="number" pos:start="31:24" pos:end="31:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="35:13" pos:end="35:18">break;</break>

        <case pos:start="37:9" pos:end="37:17">case <expr pos:start="37:14" pos:end="37:16"><literal type="char" pos:start="37:14" pos:end="37:16">'q'</literal></expr>:</case>

            <expr_stmt pos:start="39:13" pos:end="39:27"><expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:22"><name pos:start="39:13" pos:end="39:15">ctx</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:22">qflag</name></name> <operator pos:start="39:24" pos:end="39:24">=</operator> <literal type="number" pos:start="39:26" pos:end="39:26">1</literal></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        <case pos:start="43:9" pos:end="43:17">case <expr pos:start="43:14" pos:end="43:16"><literal type="char" pos:start="43:14" pos:end="43:16">'v'</literal></expr>:</case>

            <expr_stmt pos:start="45:13" pos:end="45:27"><expr pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:22"><name pos:start="45:13" pos:end="45:15">ctx</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:22">vflag</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <literal type="number" pos:start="45:26" pos:end="45:26">1</literal></expr>;</expr_stmt>

            <break pos:start="47:13" pos:end="47:18">break;</break>

        <default pos:start="49:9" pos:end="49:16">default:</default>

            <expr_stmt pos:start="51:13" pos:end="51:22"><expr pos:start="51:13" pos:end="51:21"><call pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:16">free</name><argument_list pos:start="51:17" pos:end="51:21">(<argument pos:start="51:18" pos:end="51:20"><expr pos:start="51:18" pos:end="51:20"><name pos:start="51:18" pos:end="51:20">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:48">return <expr pos:start="53:20" pos:end="53:47"><call pos:start="53:20" pos:end="53:47"><name pos:start="53:20" pos:end="53:32">command_usage</name><argument_list pos:start="53:33" pos:end="53:47">(<argument pos:start="53:34" pos:end="53:46"><expr pos:start="53:34" pos:end="53:46"><operator pos:start="53:34" pos:end="53:34">&amp;</operator><name pos:start="53:35" pos:end="53:46">aio_read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:26">(<expr pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:14">optind</name> <operator pos:start="61:16" pos:end="61:16">&gt;</operator> <name pos:start="61:18" pos:end="61:21">argc</name> <operator pos:start="61:23" pos:end="61:23">-</operator> <literal type="number" pos:start="61:25" pos:end="61:25">2</literal></expr>)</condition> <block pos:start="61:28" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:44">

        <expr_stmt pos:start="63:9" pos:end="63:18"><expr pos:start="63:9" pos:end="63:17"><call pos:start="63:9" pos:end="63:17"><name pos:start="63:9" pos:end="63:12">free</name><argument_list pos:start="63:13" pos:end="63:17">(<argument pos:start="63:14" pos:end="63:16"><expr pos:start="63:14" pos:end="63:16"><name pos:start="63:14" pos:end="63:16">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:44">return <expr pos:start="65:16" pos:end="65:43"><call pos:start="65:16" pos:end="65:43"><name pos:start="65:16" pos:end="65:28">command_usage</name><argument_list pos:start="65:29" pos:end="65:43">(<argument pos:start="65:30" pos:end="65:42"><expr pos:start="65:30" pos:end="65:42"><operator pos:start="65:30" pos:end="65:30">&amp;</operator><name pos:start="65:31" pos:end="65:42">aio_read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:39"><expr pos:start="71:5" pos:end="71:38"><name pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:7">ctx</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:15">offset</name></name> <operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:38"><name pos:start="71:19" pos:end="71:24">cvtnum</name><argument_list pos:start="71:25" pos:end="71:38">(<argument pos:start="71:26" pos:end="71:37"><expr pos:start="71:26" pos:end="71:37"><name pos:start="71:26" pos:end="71:37"><name pos:start="71:26" pos:end="71:29">argv</name><index pos:start="71:30" pos:end="71:37">[<expr pos:start="71:31" pos:end="71:36"><name pos:start="71:31" pos:end="71:36">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:24">(<expr pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:11">ctx</name><operator pos:start="73:12" pos:end="73:13">-&gt;</operator><name pos:start="73:14" pos:end="73:19">offset</name></name> <operator pos:start="73:21" pos:end="73:21">&lt;</operator> <literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>)</condition> <block pos:start="73:26" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:17">

        <expr_stmt pos:start="75:9" pos:end="75:68"><expr pos:start="75:9" pos:end="75:67"><call pos:start="75:9" pos:end="75:67"><name pos:start="75:9" pos:end="75:14">printf</name><argument_list pos:start="75:15" pos:end="75:67">(<argument pos:start="75:16" pos:end="75:52"><expr pos:start="75:16" pos:end="75:52"><literal type="string" pos:start="75:16" pos:end="75:52">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="75:55" pos:end="75:66"><expr pos:start="75:55" pos:end="75:66"><name pos:start="75:55" pos:end="75:66"><name pos:start="75:55" pos:end="75:58">argv</name><index pos:start="75:59" pos:end="75:66">[<expr pos:start="75:60" pos:end="75:65"><name pos:start="75:60" pos:end="75:65">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:18"><expr pos:start="77:9" pos:end="77:17"><call pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:12">free</name><argument_list pos:start="77:13" pos:end="77:17">(<argument pos:start="77:14" pos:end="77:16"><expr pos:start="77:14" pos:end="77:16"><name pos:start="77:14" pos:end="77:16">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:17">return <expr pos:start="79:16" pos:end="79:16"><literal type="number" pos:start="79:16" pos:end="79:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:13"><expr pos:start="83:5" pos:end="83:12"><name pos:start="83:5" pos:end="83:10">optind</name><operator pos:start="83:11" pos:end="83:12">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="97:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="87:28">(<expr pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:11">ctx</name><operator pos:start="87:12" pos:end="87:13">-&gt;</operator><name pos:start="87:14" pos:end="87:19">offset</name></name> <operator pos:start="87:21" pos:end="87:21">&amp;</operator> <literal type="number" pos:start="87:23" pos:end="87:27">0x1ff</literal></expr>)</condition> <block pos:start="87:30" pos:end="97:5">{<block_content pos:start="89:9" pos:end="95:17">

        <expr_stmt pos:start="89:9" pos:end="91:28"><expr pos:start="89:9" pos:end="91:27"><call pos:start="89:9" pos:end="91:27"><name pos:start="89:9" pos:end="89:14">printf</name><argument_list pos:start="89:15" pos:end="91:27">(<argument pos:start="89:16" pos:end="89:59"><expr pos:start="89:16" pos:end="89:59"><literal type="string" pos:start="89:16" pos:end="89:25">"offset %"</literal> <name pos:start="89:27" pos:end="89:32">PRId64</name> <literal type="string" pos:start="89:34" pos:end="89:59">" is not sector aligned\n"</literal></expr></argument>,

               <argument pos:start="91:16" pos:end="91:26"><expr pos:start="91:16" pos:end="91:26"><name pos:start="91:16" pos:end="91:26"><name pos:start="91:16" pos:end="91:18">ctx</name><operator pos:start="91:19" pos:end="91:20">-&gt;</operator><name pos:start="91:21" pos:end="91:26">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:18"><expr pos:start="93:9" pos:end="93:17"><call pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:12">free</name><argument_list pos:start="93:13" pos:end="93:17">(<argument pos:start="93:14" pos:end="93:16"><expr pos:start="93:14" pos:end="93:16"><name pos:start="93:14" pos:end="93:16">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:17">return <expr pos:start="95:16" pos:end="95:16"><literal type="number" pos:start="95:16" pos:end="95:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:27"><expr pos:start="101:5" pos:end="101:26"><name pos:start="101:5" pos:end="101:10">nr_iov</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <name pos:start="101:14" pos:end="101:17">argc</name> <operator pos:start="101:19" pos:end="101:19">-</operator> <name pos:start="101:21" pos:end="101:26">optind</name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:69"><expr pos:start="103:5" pos:end="103:68"><name pos:start="103:5" pos:end="103:12"><name pos:start="103:5" pos:end="103:7">ctx</name><operator pos:start="103:8" pos:end="103:9">-&gt;</operator><name pos:start="103:10" pos:end="103:12">buf</name></name> <operator pos:start="103:14" pos:end="103:14">=</operator> <call pos:start="103:16" pos:end="103:68"><name pos:start="103:16" pos:end="103:27">create_iovec</name><argument_list pos:start="103:28" pos:end="103:68">(<argument pos:start="103:29" pos:end="103:38"><expr pos:start="103:29" pos:end="103:38"><operator pos:start="103:29" pos:end="103:29">&amp;</operator><name pos:start="103:30" pos:end="103:38"><name pos:start="103:30" pos:end="103:32">ctx</name><operator pos:start="103:33" pos:end="103:34">-&gt;</operator><name pos:start="103:35" pos:end="103:38">qiov</name></name></expr></argument>, <argument pos:start="103:41" pos:end="103:53"><expr pos:start="103:41" pos:end="103:53"><operator pos:start="103:41" pos:end="103:41">&amp;</operator><name pos:start="103:42" pos:end="103:53"><name pos:start="103:42" pos:end="103:45">argv</name><index pos:start="103:46" pos:end="103:53">[<expr pos:start="103:47" pos:end="103:52"><name pos:start="103:47" pos:end="103:52">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="103:56" pos:end="103:61"><expr pos:start="103:56" pos:end="103:61"><name pos:start="103:56" pos:end="103:61">nr_iov</name></expr></argument>, <argument pos:start="103:64" pos:end="103:67"><expr pos:start="103:64" pos:end="103:67"><literal type="number" pos:start="103:64" pos:end="103:67">0xab</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:25">(<expr pos:start="105:9" pos:end="105:24"><name pos:start="105:9" pos:end="105:16"><name pos:start="105:9" pos:end="105:11">ctx</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:16">buf</name></name> <operator pos:start="105:18" pos:end="105:19">==</operator> <name pos:start="105:21" pos:end="105:24">NULL</name></expr>)</condition> <block pos:start="105:27" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:17">

        <expr_stmt pos:start="107:9" pos:end="107:18"><expr pos:start="107:9" pos:end="107:17"><call pos:start="107:9" pos:end="107:17"><name pos:start="107:9" pos:end="107:12">free</name><argument_list pos:start="107:13" pos:end="107:17">(<argument pos:start="107:14" pos:end="107:16"><expr pos:start="107:14" pos:end="107:16"><name pos:start="107:14" pos:end="107:16">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:17">return <expr pos:start="109:16" pos:end="109:16"><literal type="number" pos:start="109:16" pos:end="109:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:33"><expr pos:start="115:5" pos:end="115:32"><call pos:start="115:5" pos:end="115:32"><name pos:start="115:5" pos:end="115:16">gettimeofday</name><argument_list pos:start="115:17" pos:end="115:32">(<argument pos:start="115:18" pos:end="115:25"><expr pos:start="115:18" pos:end="115:25"><operator pos:start="115:18" pos:end="115:18">&amp;</operator><name pos:start="115:19" pos:end="115:25"><name pos:start="115:19" pos:end="115:21">ctx</name><operator pos:start="115:22" pos:end="115:23">-&gt;</operator><name pos:start="115:24" pos:end="115:25">t1</name></name></expr></argument>, <argument pos:start="115:28" pos:end="115:31"><expr pos:start="115:28" pos:end="115:31"><name pos:start="115:28" pos:end="115:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="119:60"><expr pos:start="117:5" pos:end="119:59"><call pos:start="117:5" pos:end="119:59"><name pos:start="117:5" pos:end="117:18">bdrv_aio_readv</name><argument_list pos:start="117:19" pos:end="119:59">(<argument pos:start="117:20" pos:end="117:21"><expr pos:start="117:20" pos:end="117:21"><name pos:start="117:20" pos:end="117:21">bs</name></expr></argument>, <argument pos:start="117:24" pos:end="117:39"><expr pos:start="117:24" pos:end="117:39"><name pos:start="117:24" pos:end="117:34"><name pos:start="117:24" pos:end="117:26">ctx</name><operator pos:start="117:27" pos:end="117:28">-&gt;</operator><name pos:start="117:29" pos:end="117:34">offset</name></name> <operator pos:start="117:36" pos:end="117:37">&gt;&gt;</operator> <literal type="number" pos:start="117:39" pos:end="117:39">9</literal></expr></argument>, <argument pos:start="117:42" pos:end="117:51"><expr pos:start="117:42" pos:end="117:51"><operator pos:start="117:42" pos:end="117:42">&amp;</operator><name pos:start="117:43" pos:end="117:51"><name pos:start="117:43" pos:end="117:45">ctx</name><operator pos:start="117:46" pos:end="117:47">-&gt;</operator><name pos:start="117:48" pos:end="117:51">qiov</name></name></expr></argument>,

                   <argument pos:start="119:20" pos:end="119:38"><expr pos:start="119:20" pos:end="119:38"><name pos:start="119:20" pos:end="119:33"><name pos:start="119:20" pos:end="119:22">ctx</name><operator pos:start="119:23" pos:end="119:24">-&gt;</operator><name pos:start="119:25" pos:end="119:28">qiov</name><operator pos:start="119:29" pos:end="119:29">.</operator><name pos:start="119:30" pos:end="119:33">size</name></name> <operator pos:start="119:35" pos:end="119:36">&gt;&gt;</operator> <literal type="number" pos:start="119:38" pos:end="119:38">9</literal></expr></argument>, <argument pos:start="119:41" pos:end="119:53"><expr pos:start="119:41" pos:end="119:53"><name pos:start="119:41" pos:end="119:53">aio_read_done</name></expr></argument>, <argument pos:start="119:56" pos:end="119:58"><expr pos:start="119:56" pos:end="119:58"><name pos:start="119:56" pos:end="119:58">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
