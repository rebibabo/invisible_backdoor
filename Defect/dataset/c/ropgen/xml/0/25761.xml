<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25761.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">ide_init_drive</name><parameter_list pos:start="1:19" pos:end="3:59">(<parameter pos:start="1:20" pos:end="1:30"><decl pos:start="1:20" pos:end="1:30"><type pos:start="1:20" pos:end="1:30"><name pos:start="1:20" pos:end="1:27">IDEState</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:30">s</name></decl></parameter>, <parameter pos:start="1:33" pos:end="1:52"><decl pos:start="1:33" pos:end="1:52"><type pos:start="1:33" pos:end="1:52"><name pos:start="1:33" pos:end="1:48">BlockDriverState</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">bs</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:71"><decl pos:start="1:55" pos:end="1:71"><type pos:start="1:55" pos:end="1:71"><name pos:start="1:55" pos:end="1:66">IDEDriveKind</name></type> <name pos:start="1:68" pos:end="1:71">kind</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:38"><decl pos:start="3:20" pos:end="3:38"><type pos:start="3:20" pos:end="3:38"><specifier pos:start="3:20" pos:end="3:24">const</specifier> <name pos:start="3:26" pos:end="3:29">char</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:38">version</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:58"><decl pos:start="3:41" pos:end="3:58"><type pos:start="3:41" pos:end="3:58"><specifier pos:start="3:41" pos:end="3:45">const</specifier> <name pos:start="3:47" pos:end="3:50">char</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:58">serial</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="123:1">{<block_content pos:start="7:5" pos:end="121:13">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">cylinders</name></decl>, <decl pos:start="7:20" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:24">heads</name></decl>, <decl pos:start="7:27" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:27" pos:end="7:30">secs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">nb_sectors</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:15"><expr pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:5">s</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:9">bs</name></name> <operator pos:start="13:11" pos:end="13:11">=</operator> <name pos:start="13:13" pos:end="13:14">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:25"><expr pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:17">drive_kind</name></name> <operator pos:start="15:19" pos:end="15:19">=</operator> <name pos:start="15:21" pos:end="15:24">kind</name></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:39"><expr pos:start="19:5" pos:end="19:38"><call pos:start="19:5" pos:end="19:38"><name pos:start="19:5" pos:end="19:21">bdrv_get_geometry</name><argument_list pos:start="19:22" pos:end="19:38">(<argument pos:start="19:23" pos:end="19:24"><expr pos:start="19:23" pos:end="19:24"><name pos:start="19:23" pos:end="19:24">bs</name></expr></argument>, <argument pos:start="19:27" pos:end="19:37"><expr pos:start="19:27" pos:end="19:37"><operator pos:start="19:27" pos:end="19:27">&amp;</operator><name pos:start="19:28" pos:end="19:37">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:55"><expr pos:start="21:5" pos:end="21:54"><call pos:start="21:5" pos:end="21:54"><name pos:start="21:5" pos:end="21:23">bdrv_guess_geometry</name><argument_list pos:start="21:24" pos:end="21:54">(<argument pos:start="21:25" pos:end="21:26"><expr pos:start="21:25" pos:end="21:26"><name pos:start="21:25" pos:end="21:26">bs</name></expr></argument>, <argument pos:start="21:29" pos:end="21:38"><expr pos:start="21:29" pos:end="21:38"><operator pos:start="21:29" pos:end="21:29">&amp;</operator><name pos:start="21:30" pos:end="21:38">cylinders</name></expr></argument>, <argument pos:start="21:41" pos:end="21:46"><expr pos:start="21:41" pos:end="21:46"><operator pos:start="21:41" pos:end="21:41">&amp;</operator><name pos:start="21:42" pos:end="21:46">heads</name></expr></argument>, <argument pos:start="21:49" pos:end="21:53"><expr pos:start="21:49" pos:end="21:53"><operator pos:start="21:49" pos:end="21:49">&amp;</operator><name pos:start="21:50" pos:end="21:53">secs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:43">(<expr pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:17">cylinders</name> <argument_list type="generic" pos:start="23:19" pos:end="23:36">&lt; <argument pos:start="23:21" pos:end="23:34"><expr pos:start="23:21" pos:end="23:34"><literal type="number" pos:start="23:21" pos:end="23:21">1</literal> <operator pos:start="23:23" pos:end="23:24">||</operator> <name pos:start="23:26" pos:end="23:34">cylinders</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="23:38" pos:end="23:42">16383</literal></expr>)</condition> <block pos:start="23:45" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:18">

        <expr_stmt pos:start="25:9" pos:end="25:57"><expr pos:start="25:9" pos:end="25:56"><call pos:start="25:9" pos:end="25:56"><name pos:start="25:9" pos:end="25:20">error_report</name><argument_list pos:start="25:21" pos:end="25:56">(<argument pos:start="25:22" pos:end="25:55"><expr pos:start="25:22" pos:end="25:55"><literal type="string" pos:start="25:22" pos:end="25:55">"cyls must be between 1 and 16383"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:32">(<expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:13">heads</name> <argument_list type="generic" pos:start="31:15" pos:end="31:28">&lt; <argument pos:start="31:17" pos:end="31:26"><expr pos:start="31:17" pos:end="31:26"><literal type="number" pos:start="31:17" pos:end="31:17">1</literal> <operator pos:start="31:19" pos:end="31:20">||</operator> <name pos:start="31:22" pos:end="31:26">heads</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="31:30" pos:end="31:31">16</literal></expr>)</condition> <block pos:start="31:34" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:18">

        <expr_stmt pos:start="33:9" pos:end="33:55"><expr pos:start="33:9" pos:end="33:54"><call pos:start="33:9" pos:end="33:54"><name pos:start="33:9" pos:end="33:20">error_report</name><argument_list pos:start="33:21" pos:end="33:54">(<argument pos:start="33:22" pos:end="33:53"><expr pos:start="33:22" pos:end="33:53"><literal type="string" pos:start="33:22" pos:end="33:53">"heads must be between 1 and 16"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:30">(<expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:12">secs</name> <argument_list type="generic" pos:start="39:14" pos:end="39:26">&lt; <argument pos:start="39:16" pos:end="39:24"><expr pos:start="39:16" pos:end="39:24"><literal type="number" pos:start="39:16" pos:end="39:16">1</literal> <operator pos:start="39:18" pos:end="39:19">||</operator> <name pos:start="39:21" pos:end="39:24">secs</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="39:28" pos:end="39:29">63</literal></expr>)</condition> <block pos:start="39:32" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:54"><expr pos:start="41:9" pos:end="41:53"><call pos:start="41:9" pos:end="41:53"><name pos:start="41:9" pos:end="41:20">error_report</name><argument_list pos:start="41:21" pos:end="41:53">(<argument pos:start="41:22" pos:end="41:52"><expr pos:start="41:22" pos:end="41:52"><literal type="string" pos:start="41:22" pos:end="41:52">"secs must be between 1 and 63"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:16">cylinders</name></name> <operator pos:start="47:18" pos:end="47:18">=</operator> <name pos:start="47:20" pos:end="47:28">cylinders</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:21"><expr pos:start="49:5" pos:end="49:20"><name pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:12">heads</name></name> <operator pos:start="49:14" pos:end="49:14">=</operator> <name pos:start="49:16" pos:end="49:20">heads</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:22"><expr pos:start="51:5" pos:end="51:21"><name pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:14">sectors</name></name> <operator pos:start="51:16" pos:end="51:16">=</operator> <name pos:start="51:18" pos:end="51:21">secs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:31"><expr pos:start="53:5" pos:end="53:30"><name pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:17">nb_sectors</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:30">nb_sectors</name></expr>;</expr_stmt>

    <comment type="block" pos:start="55:5" pos:end="57:27">/* The SMART values should be preserved across power cycles

       but they aren't.  */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:25"><expr pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:20">smart_enabled</name></name> <operator pos:start="59:22" pos:end="59:22">=</operator> <literal type="number" pos:start="59:24" pos:end="59:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:26"><expr pos:start="61:5" pos:end="61:25"><name pos:start="61:5" pos:end="61:21"><name pos:start="61:5" pos:end="61:5">s</name><operator pos:start="61:6" pos:end="61:7">-&gt;</operator><name pos:start="61:8" pos:end="61:21">smart_autosave</name></name> <operator pos:start="61:23" pos:end="61:23">=</operator> <literal type="number" pos:start="61:25" pos:end="61:25">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:24"><expr pos:start="63:5" pos:end="63:23"><name pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:19">smart_errors</name></name> <operator pos:start="63:21" pos:end="63:21">=</operator> <literal type="number" pos:start="63:23" pos:end="63:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:32"><expr pos:start="65:5" pos:end="65:31"><name pos:start="65:5" pos:end="65:27"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:27">smart_selftest_count</name></name> <operator pos:start="65:29" pos:end="65:29">=</operator> <literal type="number" pos:start="65:31" pos:end="65:31">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="91:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:23">(<expr pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:12">kind</name> <operator pos:start="67:14" pos:end="67:15">==</operator> <name pos:start="67:17" pos:end="67:22">IDE_CD</name></expr>)</condition> <block pos:start="67:25" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:44">

        <expr_stmt pos:start="69:9" pos:end="69:51"><expr pos:start="69:9" pos:end="69:50"><call pos:start="69:9" pos:end="69:50"><name pos:start="69:9" pos:end="69:24">bdrv_set_dev_ops</name><argument_list pos:start="69:25" pos:end="69:50">(<argument pos:start="69:26" pos:end="69:27"><expr pos:start="69:26" pos:end="69:27"><name pos:start="69:26" pos:end="69:27">bs</name></expr></argument>, <argument pos:start="69:30" pos:end="69:46"><expr pos:start="69:30" pos:end="69:46"><operator pos:start="69:30" pos:end="69:30">&amp;</operator><name pos:start="69:31" pos:end="69:46">ide_cd_block_ops</name></expr></argument>, <argument pos:start="69:49" pos:end="69:49"><expr pos:start="69:49" pos:end="69:49"><name pos:start="69:49" pos:end="69:49">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:44"><expr pos:start="71:9" pos:end="71:43"><call pos:start="71:9" pos:end="71:43"><name pos:start="71:9" pos:end="71:33">bdrv_set_buffer_alignment</name><argument_list pos:start="71:34" pos:end="71:43">(<argument pos:start="71:35" pos:end="71:36"><expr pos:start="71:35" pos:end="71:36"><name pos:start="71:35" pos:end="71:36">bs</name></expr></argument>, <argument pos:start="71:39" pos:end="71:42"><expr pos:start="71:39" pos:end="71:42"><literal type="number" pos:start="71:39" pos:end="71:42">2048</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="91:5">else <block pos:start="73:12" pos:end="91:5">{<block_content pos:start="75:9" pos:end="89:9">

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:37">(<expr pos:start="75:13" pos:end="75:36"><operator pos:start="75:13" pos:end="75:13">!</operator><call pos:start="75:14" pos:end="75:36"><name pos:start="75:14" pos:end="75:29">bdrv_is_inserted</name><argument_list pos:start="75:30" pos:end="75:36">(<argument pos:start="75:31" pos:end="75:35"><expr pos:start="75:31" pos:end="75:35"><name pos:start="75:31" pos:end="75:35"><name pos:start="75:31" pos:end="75:31">s</name><operator pos:start="75:32" pos:end="75:33">-&gt;</operator><name pos:start="75:34" pos:end="75:35">bs</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:39" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:22">

            <expr_stmt pos:start="77:13" pos:end="77:67"><expr pos:start="77:13" pos:end="77:66"><call pos:start="77:13" pos:end="77:66"><name pos:start="77:13" pos:end="77:24">error_report</name><argument_list pos:start="77:25" pos:end="77:66">(<argument pos:start="77:26" pos:end="77:65"><expr pos:start="77:26" pos:end="77:65"><literal type="string" pos:start="77:26" pos:end="77:65">"Device needs media, but drive is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:22">return <expr pos:start="79:20" pos:end="79:21"><operator pos:start="79:20" pos:end="79:20">-</operator><literal type="number" pos:start="79:21" pos:end="79:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:34">(<expr pos:start="83:13" pos:end="83:33"><call pos:start="83:13" pos:end="83:33"><name pos:start="83:13" pos:end="83:29">bdrv_is_read_only</name><argument_list pos:start="83:30" pos:end="83:33">(<argument pos:start="83:31" pos:end="83:32"><expr pos:start="83:31" pos:end="83:32"><name pos:start="83:31" pos:end="83:32">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:36" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:22">

            <expr_stmt pos:start="85:13" pos:end="85:56"><expr pos:start="85:13" pos:end="85:55"><call pos:start="85:13" pos:end="85:55"><name pos:start="85:13" pos:end="85:24">error_report</name><argument_list pos:start="85:25" pos:end="85:55">(<argument pos:start="85:26" pos:end="85:54"><expr pos:start="85:26" pos:end="85:54"><literal type="string" pos:start="85:26" pos:end="85:54">"Can't use a read-only drive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:22">return <expr pos:start="87:20" pos:end="87:21"><operator pos:start="87:20" pos:end="87:20">-</operator><literal type="number" pos:start="87:21" pos:end="87:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="93:5" pos:end="103:5"><if pos:start="93:5" pos:end="97:5">if <condition pos:start="93:8" pos:end="93:15">(<expr pos:start="93:9" pos:end="93:14"><name pos:start="93:9" pos:end="93:14">serial</name></expr>)</condition> <block pos:start="93:17" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:74">

        <expr_stmt pos:start="95:9" pos:end="95:74"><expr pos:start="95:9" pos:end="95:73"><call pos:start="95:9" pos:end="95:73"><name pos:start="95:9" pos:end="95:15">strncpy</name><argument_list pos:start="95:16" pos:end="95:73">(<argument pos:start="95:17" pos:end="95:35"><expr pos:start="95:17" pos:end="95:35"><name pos:start="95:17" pos:end="95:35"><name pos:start="95:17" pos:end="95:17">s</name><operator pos:start="95:18" pos:end="95:19">-&gt;</operator><name pos:start="95:20" pos:end="95:35">drive_serial_str</name></name></expr></argument>, <argument pos:start="95:38" pos:end="95:43"><expr pos:start="95:38" pos:end="95:43"><name pos:start="95:38" pos:end="95:43">serial</name></expr></argument>, <argument pos:start="95:46" pos:end="95:72"><expr pos:start="95:46" pos:end="95:72"><sizeof pos:start="95:46" pos:end="95:72">sizeof<argument_list pos:start="95:52" pos:end="95:72">(<argument pos:start="95:53" pos:end="95:71"><expr pos:start="95:53" pos:end="95:71"><name pos:start="95:53" pos:end="95:71"><name pos:start="95:53" pos:end="95:53">s</name><operator pos:start="95:54" pos:end="95:55">-&gt;</operator><name pos:start="95:56" pos:end="95:71">drive_serial_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="97:7" pos:end="103:5">else <block pos:start="97:12" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:44">

        <expr_stmt pos:start="99:9" pos:end="101:44"><expr pos:start="99:9" pos:end="101:43"><call pos:start="99:9" pos:end="101:43"><name pos:start="99:9" pos:end="99:16">snprintf</name><argument_list pos:start="99:17" pos:end="101:43">(<argument pos:start="99:18" pos:end="99:36"><expr pos:start="99:18" pos:end="99:36"><name pos:start="99:18" pos:end="99:36"><name pos:start="99:18" pos:end="99:18">s</name><operator pos:start="99:19" pos:end="99:20">-&gt;</operator><name pos:start="99:21" pos:end="99:36">drive_serial_str</name></name></expr></argument>, <argument pos:start="99:39" pos:end="99:65"><expr pos:start="99:39" pos:end="99:65"><sizeof pos:start="99:39" pos:end="99:65">sizeof<argument_list pos:start="99:45" pos:end="99:65">(<argument pos:start="99:46" pos:end="99:64"><expr pos:start="99:46" pos:end="99:64"><name pos:start="99:46" pos:end="99:64"><name pos:start="99:46" pos:end="99:46">s</name><operator pos:start="99:47" pos:end="99:48">-&gt;</operator><name pos:start="99:49" pos:end="99:64">drive_serial_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                 <argument pos:start="101:18" pos:end="101:25"><expr pos:start="101:18" pos:end="101:25"><literal type="string" pos:start="101:18" pos:end="101:25">"QM%05d"</literal></expr></argument>, <argument pos:start="101:28" pos:end="101:42"><expr pos:start="101:28" pos:end="101:42"><name pos:start="101:28" pos:end="101:42"><name pos:start="101:28" pos:end="101:28">s</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:42">drive_serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:16">(<expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:15">version</name></expr>)</condition> <block pos:start="105:18" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:57">

        <expr_stmt pos:start="107:9" pos:end="107:57"><expr pos:start="107:9" pos:end="107:56"><call pos:start="107:9" pos:end="107:56"><name pos:start="107:9" pos:end="107:15">pstrcpy</name><argument_list pos:start="107:16" pos:end="107:56">(<argument pos:start="107:17" pos:end="107:26"><expr pos:start="107:17" pos:end="107:26"><name pos:start="107:17" pos:end="107:26"><name pos:start="107:17" pos:end="107:17">s</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:26">version</name></name></expr></argument>, <argument pos:start="107:29" pos:end="107:46"><expr pos:start="107:29" pos:end="107:46"><sizeof pos:start="107:29" pos:end="107:46">sizeof<argument_list pos:start="107:35" pos:end="107:46">(<argument pos:start="107:36" pos:end="107:45"><expr pos:start="107:36" pos:end="107:45"><name pos:start="107:36" pos:end="107:45"><name pos:start="107:36" pos:end="107:36">s</name><operator pos:start="107:37" pos:end="107:38">-&gt;</operator><name pos:start="107:39" pos:end="107:45">version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="107:49" pos:end="107:55"><expr pos:start="107:49" pos:end="107:55"><name pos:start="107:49" pos:end="107:55">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="113:5">else <block pos:start="109:12" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:62">

        <expr_stmt pos:start="111:9" pos:end="111:62"><expr pos:start="111:9" pos:end="111:61"><call pos:start="111:9" pos:end="111:61"><name pos:start="111:9" pos:end="111:15">pstrcpy</name><argument_list pos:start="111:16" pos:end="111:61">(<argument pos:start="111:17" pos:end="111:26"><expr pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:26"><name pos:start="111:17" pos:end="111:17">s</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:26">version</name></name></expr></argument>, <argument pos:start="111:29" pos:end="111:46"><expr pos:start="111:29" pos:end="111:46"><sizeof pos:start="111:29" pos:end="111:46">sizeof<argument_list pos:start="111:35" pos:end="111:46">(<argument pos:start="111:36" pos:end="111:45"><expr pos:start="111:36" pos:end="111:45"><name pos:start="111:36" pos:end="111:45"><name pos:start="111:36" pos:end="111:36">s</name><operator pos:start="111:37" pos:end="111:38">-&gt;</operator><name pos:start="111:39" pos:end="111:45">version</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="111:49" pos:end="111:60"><expr pos:start="111:49" pos:end="111:60"><name pos:start="111:49" pos:end="111:60">QEMU_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:17"><expr pos:start="117:5" pos:end="117:16"><call pos:start="117:5" pos:end="117:16"><name pos:start="117:5" pos:end="117:13">ide_reset</name><argument_list pos:start="117:14" pos:end="117:16">(<argument pos:start="117:15" pos:end="117:15"><expr pos:start="117:15" pos:end="117:15"><name pos:start="117:15" pos:end="117:15">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:29"><expr pos:start="119:5" pos:end="119:28"><call pos:start="119:5" pos:end="119:28"><name pos:start="119:5" pos:end="119:24">bdrv_iostatus_enable</name><argument_list pos:start="119:25" pos:end="119:28">(<argument pos:start="119:26" pos:end="119:27"><expr pos:start="119:26" pos:end="119:27"><name pos:start="119:26" pos:end="119:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="121:5" pos:end="121:13">return <expr pos:start="121:12" pos:end="121:12"><literal type="number" pos:start="121:12" pos:end="121:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
