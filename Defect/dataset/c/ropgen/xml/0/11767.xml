<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11767.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">check_refcounts_l2</name><parameter_list pos:start="1:30" pos:end="5:21">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><name pos:start="1:53" pos:end="1:67">BdrvCheckResult</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">res</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:28"><decl pos:start="3:5" pos:end="3:28"><type pos:start="3:5" pos:end="3:28"><name pos:start="3:5" pos:end="3:12">uint16_t</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:28">refcount_table</name></decl></parameter>, <parameter pos:start="3:31" pos:end="3:53"><decl pos:start="3:31" pos:end="3:53"><type pos:start="3:31" pos:end="3:53"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:53">refcount_table_size</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:72"><decl pos:start="3:56" pos:end="3:72"><type pos:start="3:56" pos:end="3:72"><name pos:start="3:56" pos:end="3:62">int64_t</name></type> <name pos:start="3:64" pos:end="3:72">l2_offset</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:20">check_copied</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="183:1">{<block_content pos:start="9:5" pos:end="181:16">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">BDRVQcowState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:33">= <expr pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:22">l2_table</name></decl>, <decl pos:start="11:25" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:14"/><name pos:start="11:25" pos:end="11:32">l2_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:18"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:18">l2_size</name></decl>, <decl pos:start="13:21" pos:end="13:31"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:21" pos:end="13:31">nb_csectors</name></decl>, <decl pos:start="13:34" pos:end="13:41"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:34" pos:end="13:41">refcount</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:33">/* Read L2 table from disk */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:44"><expr pos:start="19:5" pos:end="19:43"><name pos:start="19:5" pos:end="19:11">l2_size</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:24"><name pos:start="19:15" pos:end="19:15">s</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:24">l2_size</name></name> <operator pos:start="19:26" pos:end="19:26">*</operator> <sizeof pos:start="19:28" pos:end="19:43">sizeof<argument_list pos:start="19:34" pos:end="19:43">(<argument pos:start="19:35" pos:end="19:42"><expr pos:start="19:35" pos:end="19:42"><name pos:start="19:35" pos:end="19:42">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:33"><expr pos:start="21:5" pos:end="21:32"><name pos:start="21:5" pos:end="21:12">l2_table</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:32"><name pos:start="21:16" pos:end="21:23">g_malloc</name><argument_list pos:start="21:24" pos:end="21:32">(<argument pos:start="21:25" pos:end="21:31"><expr pos:start="21:25" pos:end="21:31"><name pos:start="21:25" pos:end="21:31">l2_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="27:18"><if pos:start="25:5" pos:end="27:18">if <condition pos:start="25:8" pos:end="25:70">(<expr pos:start="25:9" pos:end="25:69"><call pos:start="25:9" pos:end="25:58"><name pos:start="25:9" pos:end="25:18">bdrv_pread</name><argument_list pos:start="25:19" pos:end="25:58">(<argument pos:start="25:20" pos:end="25:27"><expr pos:start="25:20" pos:end="25:27"><name pos:start="25:20" pos:end="25:27"><name pos:start="25:20" pos:end="25:21">bs</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:27">file</name></name></expr></argument>, <argument pos:start="25:30" pos:end="25:38"><expr pos:start="25:30" pos:end="25:38"><name pos:start="25:30" pos:end="25:38">l2_offset</name></expr></argument>, <argument pos:start="25:41" pos:end="25:48"><expr pos:start="25:41" pos:end="25:48"><name pos:start="25:41" pos:end="25:48">l2_table</name></expr></argument>, <argument pos:start="25:51" pos:end="25:57"><expr pos:start="25:51" pos:end="25:57"><name pos:start="25:51" pos:end="25:57">l2_size</name></expr></argument>)</argument_list></call> <operator pos:start="25:60" pos:end="25:61">!=</operator> <name pos:start="25:63" pos:end="25:69">l2_size</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:18"><block_content pos:start="27:9" pos:end="27:18">

        <goto pos:start="27:9" pos:end="27:18">goto <name pos:start="27:14" pos:end="27:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:30">/* Do the actual checks */</comment>

    <for pos:start="33:5" pos:end="165:5">for<control pos:start="33:8" pos:end="33:35">(<init pos:start="33:9" pos:end="33:14"><expr pos:start="33:9" pos:end="33:13"><name pos:start="33:9" pos:end="33:9">i</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <literal type="number" pos:start="33:13" pos:end="33:13">0</literal></expr>;</init> <condition pos:start="33:16" pos:end="33:30"><expr pos:start="33:16" pos:end="33:29"><name pos:start="33:16" pos:end="33:16">i</name> <operator pos:start="33:18" pos:end="33:18">&lt;</operator> <name pos:start="33:20" pos:end="33:29"><name pos:start="33:20" pos:end="33:20">s</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:29">l2_size</name></name></expr>;</condition> <incr pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><name pos:start="33:32" pos:end="33:32">i</name><operator pos:start="33:33" pos:end="33:34">++</operator></expr></incr>)</control> <block pos:start="33:37" pos:end="165:5">{<block_content pos:start="35:9" pos:end="163:9">

        <expr_stmt pos:start="35:9" pos:end="35:44"><expr pos:start="35:9" pos:end="35:43"><name pos:start="35:9" pos:end="35:16">l2_entry</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <call pos:start="35:20" pos:end="35:43"><name pos:start="35:20" pos:end="35:30">be64_to_cpu</name><argument_list pos:start="35:31" pos:end="35:43">(<argument pos:start="35:32" pos:end="35:42"><expr pos:start="35:32" pos:end="35:42"><name pos:start="35:32" pos:end="35:42"><name pos:start="35:32" pos:end="35:39">l2_table</name><index pos:start="35:40" pos:end="35:42">[<expr pos:start="35:41" pos:end="35:41"><name pos:start="35:41" pos:end="35:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="39:9" pos:end="163:9">switch <condition pos:start="39:16" pos:end="39:49">(<expr pos:start="39:17" pos:end="39:48"><call pos:start="39:17" pos:end="39:48"><name pos:start="39:17" pos:end="39:38">qcow2_get_cluster_type</name><argument_list pos:start="39:39" pos:end="39:48">(<argument pos:start="39:40" pos:end="39:47"><expr pos:start="39:40" pos:end="39:47"><name pos:start="39:40" pos:end="39:47">l2_entry</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:51" pos:end="163:9">{<block_content pos:start="41:9" pos:end="161:20">

        <case pos:start="41:9" pos:end="41:38">case <expr pos:start="41:14" pos:end="41:37"><name pos:start="41:14" pos:end="41:37">QCOW2_CLUSTER_COMPRESSED</name></expr>:</case>

            <comment type="block" pos:start="43:13" pos:end="43:66">/* Compressed clusters don't have QCOW_OFLAG_COPIED */</comment>

            <if_stmt pos:start="45:13" pos:end="57:13"><if pos:start="45:13" pos:end="57:13">if <condition pos:start="45:16" pos:end="45:45">(<expr pos:start="45:17" pos:end="45:44"><name pos:start="45:17" pos:end="45:24">l2_entry</name> <operator pos:start="45:26" pos:end="45:26">&amp;</operator> <name pos:start="45:28" pos:end="45:44">QCOW_OFLAG_COPIED</name></expr>)</condition> <block pos:start="45:47" pos:end="57:13">{<block_content pos:start="47:17" pos:end="55:35">

                <expr_stmt pos:start="47:17" pos:end="51:63"><expr pos:start="47:17" pos:end="51:62"><call pos:start="47:17" pos:end="51:62"><name pos:start="47:17" pos:end="47:23">fprintf</name><argument_list pos:start="47:24" pos:end="51:62">(<argument pos:start="47:25" pos:end="47:30"><expr pos:start="47:25" pos:end="47:30"><name pos:start="47:25" pos:end="47:30">stderr</name></expr></argument>, <argument pos:start="47:33" pos:end="51:32"><expr pos:start="47:33" pos:end="51:32"><literal type="string" pos:start="47:33" pos:end="47:50">"ERROR: cluster %"</literal> <name pos:start="47:52" pos:end="47:57">PRId64</name> <literal type="string" pos:start="47:59" pos:end="47:62">": "</literal>

                    <literal type="string" pos:start="49:21" pos:end="49:67">"copied flag must never be set for compressed "</literal>

                    <literal type="string" pos:start="51:21" pos:end="51:32">"clusters\n"</literal></expr></argument>, <argument pos:start="51:35" pos:end="51:61"><expr pos:start="51:35" pos:end="51:61"><name pos:start="51:35" pos:end="51:42">l2_entry</name> <operator pos:start="51:44" pos:end="51:45">&gt;&gt;</operator> <name pos:start="51:47" pos:end="51:61"><name pos:start="51:47" pos:end="51:47">s</name><operator pos:start="51:48" pos:end="51:49">-&gt;</operator><name pos:start="51:50" pos:end="51:61">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:47"><expr pos:start="53:17" pos:end="53:46"><name pos:start="53:17" pos:end="53:24">l2_entry</name> <operator pos:start="53:26" pos:end="53:27">&amp;=</operator> <operator pos:start="53:29" pos:end="53:29">~</operator><name pos:start="53:30" pos:end="53:46">QCOW_OFLAG_COPIED</name></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:35"><expr pos:start="55:17" pos:end="55:34"><name pos:start="55:17" pos:end="55:32"><name pos:start="55:17" pos:end="55:19">res</name><operator pos:start="55:20" pos:end="55:21">-&gt;</operator><name pos:start="55:22" pos:end="55:32">corruptions</name></name><operator pos:start="55:33" pos:end="55:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="61:13" pos:end="61:38">/* Mark cluster as used */</comment>

            <expr_stmt pos:start="63:13" pos:end="65:46"><expr pos:start="63:13" pos:end="65:45"><name pos:start="63:13" pos:end="63:23">nb_csectors</name> <operator pos:start="63:25" pos:end="63:25">=</operator> <operator pos:start="63:27" pos:end="63:27">(</operator><operator pos:start="63:28" pos:end="63:28">(</operator><name pos:start="63:29" pos:end="63:36">l2_entry</name> <operator pos:start="63:38" pos:end="63:39">&gt;&gt;</operator> <name pos:start="63:41" pos:end="63:54"><name pos:start="63:41" pos:end="63:41">s</name><operator pos:start="63:42" pos:end="63:43">-&gt;</operator><name pos:start="63:44" pos:end="63:54">csize_shift</name></name><operator pos:start="63:55" pos:end="63:55">)</operator> <operator pos:start="63:57" pos:end="63:57">&amp;</operator>

                           <name pos:start="65:28" pos:end="65:40"><name pos:start="65:28" pos:end="65:28">s</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:40">csize_mask</name></name><operator pos:start="65:41" pos:end="65:41">)</operator> <operator pos:start="65:43" pos:end="65:43">+</operator> <literal type="number" pos:start="65:45" pos:end="65:45">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:47"><expr pos:start="67:13" pos:end="67:46"><name pos:start="67:13" pos:end="67:20">l2_entry</name> <operator pos:start="67:22" pos:end="67:23">&amp;=</operator> <name pos:start="67:25" pos:end="67:46"><name pos:start="67:25" pos:end="67:25">s</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:46">cluster_offset_mask</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="71:52"><expr pos:start="69:13" pos:end="71:51"><call pos:start="69:13" pos:end="71:51"><name pos:start="69:13" pos:end="69:25">inc_refcounts</name><argument_list pos:start="69:26" pos:end="71:51">(<argument pos:start="69:27" pos:end="69:28"><expr pos:start="69:27" pos:end="69:28"><name pos:start="69:27" pos:end="69:28">bs</name></expr></argument>, <argument pos:start="69:31" pos:end="69:33"><expr pos:start="69:31" pos:end="69:33"><name pos:start="69:31" pos:end="69:33">res</name></expr></argument>, <argument pos:start="69:36" pos:end="69:49"><expr pos:start="69:36" pos:end="69:49"><name pos:start="69:36" pos:end="69:49">refcount_table</name></expr></argument>, <argument pos:start="69:52" pos:end="69:70"><expr pos:start="69:52" pos:end="69:70"><name pos:start="69:52" pos:end="69:70">refcount_table_size</name></expr></argument>,

                <argument pos:start="71:17" pos:end="71:31"><expr pos:start="71:17" pos:end="71:31"><name pos:start="71:17" pos:end="71:24">l2_entry</name> <operator pos:start="71:26" pos:end="71:26">&amp;</operator> <operator pos:start="71:28" pos:end="71:28">~</operator><literal type="number" pos:start="71:29" pos:end="71:31">511</literal></expr></argument>, <argument pos:start="71:34" pos:end="71:50"><expr pos:start="71:34" pos:end="71:50"><name pos:start="71:34" pos:end="71:44">nb_csectors</name> <operator pos:start="71:46" pos:end="71:46">*</operator> <literal type="number" pos:start="71:48" pos:end="71:50">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>



        <case pos:start="77:9" pos:end="77:32">case <expr pos:start="77:14" pos:end="77:31"><name pos:start="77:14" pos:end="77:31">QCOW2_CLUSTER_ZERO</name></expr>:</case>

            <if_stmt pos:start="79:13" pos:end="83:13"><if pos:start="79:13" pos:end="83:13">if <condition pos:start="79:16" pos:end="79:50">(<expr pos:start="79:17" pos:end="79:49"><operator pos:start="79:17" pos:end="79:17">(</operator><name pos:start="79:18" pos:end="79:25">l2_entry</name> <operator pos:start="79:27" pos:end="79:27">&amp;</operator> <name pos:start="79:29" pos:end="79:43">L2E_OFFSET_MASK</name><operator pos:start="79:44" pos:end="79:44">)</operator> <operator pos:start="79:46" pos:end="79:47">==</operator> <literal type="number" pos:start="79:49" pos:end="79:49">0</literal></expr>)</condition> <block pos:start="79:52" pos:end="83:13">{<block_content pos:start="81:17" pos:end="81:22">

                <break pos:start="81:17" pos:end="81:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="85:13" pos:end="85:30">/* fall through */</comment>



        <case pos:start="89:9" pos:end="89:34">case <expr pos:start="89:14" pos:end="89:33"><name pos:start="89:14" pos:end="89:33">QCOW2_CLUSTER_NORMAL</name></expr>:</case>

        <block pos:start="91:9" pos:end="149:9">{<block_content pos:start="95:13" pos:end="147:18">

            <comment type="block" pos:start="93:13" pos:end="93:65">/* QCOW_OFLAG_COPIED must be set iff refcount == 1 */</comment>

            <decl_stmt pos:start="95:13" pos:end="95:57"><decl pos:start="95:13" pos:end="95:56"><type pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:20">uint64_t</name></type> <name pos:start="95:22" pos:end="95:27">offset</name> <init pos:start="95:29" pos:end="95:56">= <expr pos:start="95:31" pos:end="95:56"><name pos:start="95:31" pos:end="95:38">l2_entry</name> <operator pos:start="95:40" pos:end="95:40">&amp;</operator> <name pos:start="95:42" pos:end="95:56">L2E_OFFSET_MASK</name></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="99:13" pos:end="123:13"><if pos:start="99:13" pos:end="123:13">if <condition pos:start="99:16" pos:end="99:29">(<expr pos:start="99:17" pos:end="99:28"><name pos:start="99:17" pos:end="99:28">check_copied</name></expr>)</condition> <block pos:start="99:31" pos:end="123:13">{<block_content pos:start="101:17" pos:end="121:17">

                <expr_stmt pos:start="101:17" pos:end="101:71"><expr pos:start="101:17" pos:end="101:70"><name pos:start="101:17" pos:end="101:24">refcount</name> <operator pos:start="101:26" pos:end="101:26">=</operator> <call pos:start="101:28" pos:end="101:70"><name pos:start="101:28" pos:end="101:39">get_refcount</name><argument_list pos:start="101:40" pos:end="101:70">(<argument pos:start="101:41" pos:end="101:42"><expr pos:start="101:41" pos:end="101:42"><name pos:start="101:41" pos:end="101:42">bs</name></expr></argument>, <argument pos:start="101:45" pos:end="101:69"><expr pos:start="101:45" pos:end="101:69"><name pos:start="101:45" pos:end="101:50">offset</name> <operator pos:start="101:52" pos:end="101:53">&gt;&gt;</operator> <name pos:start="101:55" pos:end="101:69"><name pos:start="101:55" pos:end="101:55">s</name><operator pos:start="101:56" pos:end="101:57">-&gt;</operator><name pos:start="101:58" pos:end="101:69">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="103:17" pos:end="111:17"><if pos:start="103:17" pos:end="111:17">if <condition pos:start="103:20" pos:end="103:33">(<expr pos:start="103:21" pos:end="103:32"><name pos:start="103:21" pos:end="103:28">refcount</name> <operator pos:start="103:30" pos:end="103:30">&lt;</operator> <literal type="number" pos:start="103:32" pos:end="103:32">0</literal></expr>)</condition> <block pos:start="103:35" pos:end="111:17">{<block_content pos:start="105:21" pos:end="109:30">

                    <expr_stmt pos:start="105:21" pos:end="107:72"><expr pos:start="105:21" pos:end="107:71"><call pos:start="105:21" pos:end="107:71"><name pos:start="105:21" pos:end="105:27">fprintf</name><argument_list pos:start="105:28" pos:end="107:71">(<argument pos:start="105:29" pos:end="105:34"><expr pos:start="105:29" pos:end="105:34"><name pos:start="105:29" pos:end="105:34">stderr</name></expr></argument>, <argument pos:start="105:37" pos:end="107:39"><expr pos:start="105:37" pos:end="107:39"><literal type="string" pos:start="105:37" pos:end="105:69">"Can't get refcount for offset %"</literal>

                        <name pos:start="107:25" pos:end="107:30">PRIx64</name> <literal type="string" pos:start="107:32" pos:end="107:39">": %s\n"</literal></expr></argument>, <argument pos:start="107:42" pos:end="107:49"><expr pos:start="107:42" pos:end="107:49"><name pos:start="107:42" pos:end="107:49">l2_entry</name></expr></argument>, <argument pos:start="107:52" pos:end="107:70"><expr pos:start="107:52" pos:end="107:70"><call pos:start="107:52" pos:end="107:70"><name pos:start="107:52" pos:end="107:59">strerror</name><argument_list pos:start="107:60" pos:end="107:70">(<argument pos:start="107:61" pos:end="107:69"><expr pos:start="107:61" pos:end="107:69"><operator pos:start="107:61" pos:end="107:61">-</operator><name pos:start="107:62" pos:end="107:69">refcount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="109:21" pos:end="109:30">goto <name pos:start="109:26" pos:end="109:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="113:17" pos:end="121:17"><if pos:start="113:17" pos:end="121:17">if <condition pos:start="113:20" pos:end="113:77">(<expr pos:start="113:21" pos:end="113:76"><operator pos:start="113:21" pos:end="113:21">(</operator><name pos:start="113:22" pos:end="113:29">refcount</name> <operator pos:start="113:31" pos:end="113:32">==</operator> <literal type="number" pos:start="113:34" pos:end="113:34">1</literal><operator pos:start="113:35" pos:end="113:35">)</operator> <operator pos:start="113:37" pos:end="113:38">!=</operator> <operator pos:start="113:40" pos:end="113:40">(</operator><operator pos:start="113:41" pos:end="113:41">(</operator><name pos:start="113:42" pos:end="113:49">l2_entry</name> <operator pos:start="113:51" pos:end="113:51">&amp;</operator> <name pos:start="113:53" pos:end="113:69">QCOW_OFLAG_COPIED</name><operator pos:start="113:70" pos:end="113:70">)</operator> <operator pos:start="113:72" pos:end="113:73">!=</operator> <literal type="number" pos:start="113:75" pos:end="113:75">0</literal><operator pos:start="113:76" pos:end="113:76">)</operator></expr>)</condition> <block pos:start="113:79" pos:end="121:17">{<block_content pos:start="115:21" pos:end="119:39">

                    <expr_stmt pos:start="115:21" pos:end="117:69"><expr pos:start="115:21" pos:end="117:68"><call pos:start="115:21" pos:end="117:68"><name pos:start="115:21" pos:end="115:27">fprintf</name><argument_list pos:start="115:28" pos:end="117:68">(<argument pos:start="115:29" pos:end="115:34"><expr pos:start="115:29" pos:end="115:34"><name pos:start="115:29" pos:end="115:34">stderr</name></expr></argument>, <argument pos:start="115:37" pos:end="117:47"><expr pos:start="115:37" pos:end="117:47"><literal type="string" pos:start="115:37" pos:end="115:66">"ERROR OFLAG_COPIED: offset=%"</literal>

                        <name pos:start="117:25" pos:end="117:30">PRIx64</name> <literal type="string" pos:start="117:32" pos:end="117:47">" refcount=%d\n"</literal></expr></argument>, <argument pos:start="117:50" pos:end="117:57"><expr pos:start="117:50" pos:end="117:57"><name pos:start="117:50" pos:end="117:57">l2_entry</name></expr></argument>, <argument pos:start="117:60" pos:end="117:67"><expr pos:start="117:60" pos:end="117:67"><name pos:start="117:60" pos:end="117:67">refcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="119:21" pos:end="119:39"><expr pos:start="119:21" pos:end="119:38"><name pos:start="119:21" pos:end="119:36"><name pos:start="119:21" pos:end="119:23">res</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:36">corruptions</name></name><operator pos:start="119:37" pos:end="119:38">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="127:13" pos:end="127:38">/* Mark cluster as used */</comment>

            <expr_stmt pos:start="129:13" pos:end="131:41"><expr pos:start="129:13" pos:end="131:40"><call pos:start="129:13" pos:end="131:40"><name pos:start="129:13" pos:end="129:25">inc_refcounts</name><argument_list pos:start="129:26" pos:end="131:40">(<argument pos:start="129:27" pos:end="129:28"><expr pos:start="129:27" pos:end="129:28"><name pos:start="129:27" pos:end="129:28">bs</name></expr></argument>, <argument pos:start="129:31" pos:end="129:33"><expr pos:start="129:31" pos:end="129:33"><name pos:start="129:31" pos:end="129:33">res</name></expr></argument>, <argument pos:start="129:36" pos:end="129:49"><expr pos:start="129:36" pos:end="129:49"><name pos:start="129:36" pos:end="129:49">refcount_table</name></expr></argument>,<argument pos:start="129:51" pos:end="129:69"><expr pos:start="129:51" pos:end="129:69"><name pos:start="129:51" pos:end="129:69">refcount_table_size</name></expr></argument>,

                <argument pos:start="131:17" pos:end="131:22"><expr pos:start="131:17" pos:end="131:22"><name pos:start="131:17" pos:end="131:22">offset</name></expr></argument>, <argument pos:start="131:25" pos:end="131:39"><expr pos:start="131:25" pos:end="131:39"><name pos:start="131:25" pos:end="131:39"><name pos:start="131:25" pos:end="131:25">s</name><operator pos:start="131:26" pos:end="131:27">-&gt;</operator><name pos:start="131:28" pos:end="131:39">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="135:13" pos:end="135:53">/* Correct offsets are cluster aligned */</comment>

            <if_stmt pos:start="137:13" pos:end="145:13"><if pos:start="137:13" pos:end="145:13">if <condition pos:start="137:16" pos:end="137:47">(<expr pos:start="137:17" pos:end="137:46"><name pos:start="137:17" pos:end="137:22">offset</name> <operator pos:start="137:24" pos:end="137:24">&amp;</operator> <operator pos:start="137:26" pos:end="137:26">(</operator><name pos:start="137:27" pos:end="137:41"><name pos:start="137:27" pos:end="137:27">s</name><operator pos:start="137:28" pos:end="137:29">-&gt;</operator><name pos:start="137:30" pos:end="137:41">cluster_size</name></name> <operator pos:start="137:43" pos:end="137:43">-</operator> <literal type="number" pos:start="137:45" pos:end="137:45">1</literal><operator pos:start="137:46" pos:end="137:46">)</operator></expr>)</condition> <block pos:start="137:49" pos:end="145:13">{<block_content pos:start="139:17" pos:end="143:35">

                <expr_stmt pos:start="139:17" pos:end="141:71"><expr pos:start="139:17" pos:end="141:70"><call pos:start="139:17" pos:end="141:70"><name pos:start="139:17" pos:end="139:23">fprintf</name><argument_list pos:start="139:24" pos:end="141:70">(<argument pos:start="139:25" pos:end="139:30"><expr pos:start="139:25" pos:end="139:30"><name pos:start="139:25" pos:end="139:30">stderr</name></expr></argument>, <argument pos:start="139:33" pos:end="141:61"><expr pos:start="139:33" pos:end="141:61"><literal type="string" pos:start="139:33" pos:end="139:48">"ERROR offset=%"</literal> <name pos:start="139:50" pos:end="139:55">PRIx64</name> <literal type="string" pos:start="139:57" pos:end="139:75">": Cluster is not "</literal>

                    <literal type="string" pos:start="141:21" pos:end="141:61">"properly aligned; L2 entry corrupted.\n"</literal></expr></argument>, <argument pos:start="141:64" pos:end="141:69"><expr pos:start="141:64" pos:end="141:69"><name pos:start="141:64" pos:end="141:69">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:35"><expr pos:start="143:17" pos:end="143:34"><name pos:start="143:17" pos:end="143:32"><name pos:start="143:17" pos:end="143:19">res</name><operator pos:start="143:20" pos:end="143:21">-&gt;</operator><name pos:start="143:22" pos:end="143:32">corruptions</name></name><operator pos:start="143:33" pos:end="143:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="147:13" pos:end="147:18">break;</break>

        </block_content>}</block>



        <case pos:start="153:9" pos:end="153:39">case <expr pos:start="153:14" pos:end="153:38"><name pos:start="153:14" pos:end="153:38">QCOW2_CLUSTER_UNALLOCATED</name></expr>:</case>

            <break pos:start="155:13" pos:end="155:18">break;</break>



        <default pos:start="159:9" pos:end="159:16">default:</default>

            <expr_stmt pos:start="161:13" pos:end="161:20"><expr pos:start="161:13" pos:end="161:19"><call pos:start="161:13" pos:end="161:19"><name pos:start="161:13" pos:end="161:17">abort</name><argument_list pos:start="161:18" pos:end="161:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <expr_stmt pos:start="169:5" pos:end="169:21"><expr pos:start="169:5" pos:end="169:20"><call pos:start="169:5" pos:end="169:20"><name pos:start="169:5" pos:end="169:10">g_free</name><argument_list pos:start="169:11" pos:end="169:20">(<argument pos:start="169:12" pos:end="169:19"><expr pos:start="169:12" pos:end="169:19"><name pos:start="169:12" pos:end="169:19">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="171:5" pos:end="171:13">return <expr pos:start="171:12" pos:end="171:12"><literal type="number" pos:start="171:12" pos:end="171:12">0</literal></expr>;</return>



<label pos:start="175:1" pos:end="175:5"><name pos:start="175:1" pos:end="175:4">fail</name>:</label>

    <expr_stmt pos:start="177:5" pos:end="177:64"><expr pos:start="177:5" pos:end="177:63"><call pos:start="177:5" pos:end="177:63"><name pos:start="177:5" pos:end="177:11">fprintf</name><argument_list pos:start="177:12" pos:end="177:63">(<argument pos:start="177:13" pos:end="177:18"><expr pos:start="177:13" pos:end="177:18"><name pos:start="177:13" pos:end="177:18">stderr</name></expr></argument>, <argument pos:start="177:21" pos:end="177:62"><expr pos:start="177:21" pos:end="177:62"><literal type="string" pos:start="177:21" pos:end="177:62">"ERROR: I/O error in check_refcounts_l2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:21"><expr pos:start="179:5" pos:end="179:20"><call pos:start="179:5" pos:end="179:20"><name pos:start="179:5" pos:end="179:10">g_free</name><argument_list pos:start="179:11" pos:end="179:20">(<argument pos:start="179:12" pos:end="179:19"><expr pos:start="179:12" pos:end="179:19"><name pos:start="179:12" pos:end="179:19">l2_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="181:5" pos:end="181:16">return <expr pos:start="181:12" pos:end="181:15"><operator pos:start="181:12" pos:end="181:12">-</operator><name pos:start="181:13" pos:end="181:15">EIO</name></expr>;</return>

</block_content>}</block></function>
</unit>
