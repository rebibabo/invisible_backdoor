<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19527.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">vscsi_inquiry_no_target</name><parameter_list pos:start="1:36" pos:end="1:66">(<parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:46">VSCSIState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:65"><decl pos:start="1:52" pos:end="1:65"><type pos:start="1:52" pos:end="1:65"><name pos:start="1:52" pos:end="1:60">vscsi_req</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">req</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:5">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">cdb</name> <init pos:start="5:18" pos:end="5:38">= <expr pos:start="5:20" pos:end="5:38"><name pos:start="5:20" pos:end="5:38"><name pos:start="5:20" pos:end="5:22">req</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:26">iu</name><operator pos:start="5:27" pos:end="5:27">.</operator><name pos:start="5:28" pos:end="5:30">srp</name><operator pos:start="5:31" pos:end="5:31">.</operator><name pos:start="5:32" pos:end="5:34">cmd</name><operator pos:start="5:35" pos:end="5:35">.</operator><name pos:start="5:36" pos:end="5:38">cdb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:25"><name pos:start="7:13" pos:end="7:21">resp_data</name><index pos:start="7:22" pos:end="7:25">[<expr pos:start="7:23" pos:end="7:24"><literal type="number" pos:start="7:23" pos:end="7:24">36</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rc</name></decl>, <decl pos:start="9:13" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:13" pos:end="9:15">len</name></decl>, <decl pos:start="9:18" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:21">alen</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:57">/* We dont do EVPD. Also check that page_code is 0 */</comment>

    <if_stmt pos:start="15:5" pos:end="25:5"><if pos:start="15:5" pos:end="25:5">if <condition pos:start="15:8" pos:end="15:58">(<expr pos:start="15:9" pos:end="15:57"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:15"><name pos:start="15:10" pos:end="15:12">cdb</name><index pos:start="15:13" pos:end="15:15">[<expr pos:start="15:14" pos:end="15:14"><literal type="number" pos:start="15:14" pos:end="15:14">1</literal></expr>]</index></name> <operator pos:start="15:17" pos:end="15:17">&amp;</operator> <literal type="number" pos:start="15:19" pos:end="15:22">0x01</literal><operator pos:start="15:23" pos:end="15:23">)</operator> <operator pos:start="15:25" pos:end="15:26">||</operator> <operator pos:start="15:28" pos:end="15:28">(</operator><name pos:start="15:29" pos:end="15:34"><name pos:start="15:29" pos:end="15:31">cdb</name><index pos:start="15:32" pos:end="15:34">[<expr pos:start="15:33" pos:end="15:33"><literal type="number" pos:start="15:33" pos:end="15:33">1</literal></expr>]</index></name> <operator pos:start="15:36" pos:end="15:36">&amp;</operator> <literal type="number" pos:start="15:38" pos:end="15:41">0x01</literal><operator pos:start="15:42" pos:end="15:42">)</operator> <operator pos:start="15:44" pos:end="15:45">||</operator> <name pos:start="15:47" pos:end="15:52"><name pos:start="15:47" pos:end="15:49">cdb</name><index pos:start="15:50" pos:end="15:52">[<expr pos:start="15:51" pos:end="15:51"><literal type="number" pos:start="15:51" pos:end="15:51">2</literal></expr>]</index></name> <operator pos:start="15:54" pos:end="15:55">!=</operator> <literal type="number" pos:start="15:57" pos:end="15:57">0</literal></expr>)</condition> <block pos:start="15:60" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:15">

        <comment type="block" pos:start="17:9" pos:end="17:39">/* Send INVALID FIELD IN CDB */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:61"><expr pos:start="19:9" pos:end="19:60"><call pos:start="19:9" pos:end="19:60"><name pos:start="19:9" pos:end="19:26">vscsi_makeup_sense</name><argument_list pos:start="19:27" pos:end="19:60">(<argument pos:start="19:28" pos:end="19:28"><expr pos:start="19:28" pos:end="19:28"><name pos:start="19:28" pos:end="19:28">s</name></expr></argument>, <argument pos:start="19:31" pos:end="19:33"><expr pos:start="19:31" pos:end="19:33"><name pos:start="19:31" pos:end="19:33">req</name></expr></argument>, <argument pos:start="19:36" pos:end="19:50"><expr pos:start="19:36" pos:end="19:50"><name pos:start="19:36" pos:end="19:50">ILLEGAL_REQUEST</name></expr></argument>, <argument pos:start="19:53" pos:end="19:56"><expr pos:start="19:53" pos:end="19:56"><literal type="number" pos:start="19:53" pos:end="19:56">0x24</literal></expr></argument>, <argument pos:start="19:59" pos:end="19:59"><expr pos:start="19:59" pos:end="19:59"><literal type="number" pos:start="19:59" pos:end="19:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:54"><expr pos:start="21:9" pos:end="21:53"><call pos:start="21:9" pos:end="21:53"><name pos:start="21:9" pos:end="21:22">vscsi_send_rsp</name><argument_list pos:start="21:23" pos:end="21:53">(<argument pos:start="21:24" pos:end="21:24"><expr pos:start="21:24" pos:end="21:24"><name pos:start="21:24" pos:end="21:24">s</name></expr></argument>, <argument pos:start="21:27" pos:end="21:29"><expr pos:start="21:27" pos:end="21:29"><name pos:start="21:27" pos:end="21:29">req</name></expr></argument>, <argument pos:start="21:32" pos:end="21:46"><expr pos:start="21:32" pos:end="21:46"><name pos:start="21:32" pos:end="21:46">CHECK_CONDITION</name></expr></argument>, <argument pos:start="21:49" pos:end="21:49"><expr pos:start="21:49" pos:end="21:49"><literal type="number" pos:start="21:49" pos:end="21:49">0</literal></expr></argument>, <argument pos:start="21:52" pos:end="21:52"><expr pos:start="21:52" pos:end="21:52"><literal type="number" pos:start="21:52" pos:end="21:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:18"><expr pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:8">alen</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <name pos:start="27:12" pos:end="27:17"><name pos:start="27:12" pos:end="27:14">cdb</name><index pos:start="27:15" pos:end="27:17">[<expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:8">alen</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <operator pos:start="29:12" pos:end="29:12">(</operator><name pos:start="29:13" pos:end="29:16">alen</name> <operator pos:start="29:18" pos:end="29:19">&lt;&lt;</operator> <literal type="number" pos:start="29:21" pos:end="29:21">8</literal><operator pos:start="29:22" pos:end="29:22">)</operator> <operator pos:start="29:24" pos:end="29:24">|</operator> <name pos:start="29:26" pos:end="29:31"><name pos:start="29:26" pos:end="29:28">cdb</name><index pos:start="29:29" pos:end="29:31">[<expr pos:start="29:30" pos:end="29:30"><literal type="number" pos:start="29:30" pos:end="29:30">4</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:24"><expr pos:start="31:5" pos:end="31:23"><name pos:start="31:5" pos:end="31:7">len</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:23"><name pos:start="31:11" pos:end="31:13">MIN</name><argument_list pos:start="31:14" pos:end="31:23">(<argument pos:start="31:15" pos:end="31:18"><expr pos:start="31:15" pos:end="31:18"><name pos:start="31:15" pos:end="31:18">alen</name></expr></argument>, <argument pos:start="31:21" pos:end="31:22"><expr pos:start="31:21" pos:end="31:22"><literal type="number" pos:start="31:21" pos:end="31:22">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:36">/* Fake up inquiry using PQ=3 */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><call pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:10">memset</name><argument_list pos:start="37:11" pos:end="37:28">(<argument pos:start="37:12" pos:end="37:20"><expr pos:start="37:12" pos:end="37:20"><name pos:start="37:12" pos:end="37:20">resp_data</name></expr></argument>, <argument pos:start="37:23" pos:end="37:23"><expr pos:start="37:23" pos:end="37:23"><literal type="number" pos:start="37:23" pos:end="37:23">0</literal></expr></argument>, <argument pos:start="37:26" pos:end="37:27"><expr pos:start="37:26" pos:end="37:27"><literal type="number" pos:start="37:26" pos:end="37:27">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:24"><expr pos:start="39:5" pos:end="39:23"><name pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:13">resp_data</name><index pos:start="39:14" pos:end="39:16">[<expr pos:start="39:15" pos:end="39:15"><literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>]</index></name> <operator pos:start="39:18" pos:end="39:18">=</operator> <literal type="number" pos:start="39:20" pos:end="39:23">0x7f</literal></expr>;</expr_stmt>   <comment type="block" pos:start="39:28" pos:end="39:72">/* Not capable of supporting a device here */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:24"><expr pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:13">resp_data</name><index pos:start="41:14" pos:end="41:16">[<expr pos:start="41:15" pos:end="41:15"><literal type="number" pos:start="41:15" pos:end="41:15">2</literal></expr>]</index></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <literal type="number" pos:start="41:20" pos:end="41:23">0x06</literal></expr>;</expr_stmt>   <comment type="block" pos:start="41:28" pos:end="41:38">/* SPS-4 */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:24"><expr pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:13">resp_data</name><index pos:start="43:14" pos:end="43:16">[<expr pos:start="43:15" pos:end="43:15"><literal type="number" pos:start="43:15" pos:end="43:15">3</literal></expr>]</index></name> <operator pos:start="43:18" pos:end="43:18">=</operator> <literal type="number" pos:start="43:20" pos:end="43:23">0x02</literal></expr>;</expr_stmt>   <comment type="block" pos:start="43:28" pos:end="43:49">/* Resp data format */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:26"><expr pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:13">resp_data</name><index pos:start="45:14" pos:end="45:16">[<expr pos:start="45:15" pos:end="45:15"><literal type="number" pos:start="45:15" pos:end="45:15">4</literal></expr>]</index></name> <operator pos:start="45:18" pos:end="45:18">=</operator> <literal type="number" pos:start="45:20" pos:end="45:23">36</literal> <operator pos:start="45:23" pos:end="45:23">-</operator> <literal type="number" pos:start="45:25" pos:end="45:25">5</literal></expr>;</expr_stmt> <comment type="block" pos:start="45:28" pos:end="45:50">/* Additional length */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:24"><expr pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:16"><name pos:start="47:5" pos:end="47:13">resp_data</name><index pos:start="47:14" pos:end="47:16">[<expr pos:start="47:15" pos:end="47:15"><literal type="number" pos:start="47:15" pos:end="47:15">7</literal></expr>]</index></name> <operator pos:start="47:18" pos:end="47:18">=</operator> <literal type="number" pos:start="47:20" pos:end="47:23">0x10</literal></expr>;</expr_stmt>   <comment type="block" pos:start="47:28" pos:end="47:47">/* Sync transfers */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:51"><expr pos:start="49:5" pos:end="49:50"><call pos:start="49:5" pos:end="49:50"><name pos:start="49:5" pos:end="49:10">memcpy</name><argument_list pos:start="49:11" pos:end="49:50">(<argument pos:start="49:12" pos:end="49:25"><expr pos:start="49:12" pos:end="49:25"><operator pos:start="49:12" pos:end="49:12">&amp;</operator><name pos:start="49:13" pos:end="49:25"><name pos:start="49:13" pos:end="49:21">resp_data</name><index pos:start="49:22" pos:end="49:25">[<expr pos:start="49:23" pos:end="49:24"><literal type="number" pos:start="49:23" pos:end="49:24">16</literal></expr>]</index></name></expr></argument>, <argument pos:start="49:28" pos:end="49:45"><expr pos:start="49:28" pos:end="49:45"><literal type="string" pos:start="49:28" pos:end="49:45">"QEMU EMPTY      "</literal></expr></argument>, <argument pos:start="49:48" pos:end="49:49"><expr pos:start="49:48" pos:end="49:49"><literal type="number" pos:start="49:48" pos:end="49:49">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:41"><expr pos:start="51:5" pos:end="51:40"><call pos:start="51:5" pos:end="51:40"><name pos:start="51:5" pos:end="51:10">memcpy</name><argument_list pos:start="51:11" pos:end="51:40">(<argument pos:start="51:12" pos:end="51:24"><expr pos:start="51:12" pos:end="51:24"><operator pos:start="51:12" pos:end="51:12">&amp;</operator><name pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:21">resp_data</name><index pos:start="51:22" pos:end="51:24">[<expr pos:start="51:23" pos:end="51:23"><literal type="number" pos:start="51:23" pos:end="51:23">8</literal></expr>]</index></name></expr></argument>, <argument pos:start="51:27" pos:end="51:36"><expr pos:start="51:27" pos:end="51:36"><literal type="string" pos:start="51:27" pos:end="51:36">"QEMU    "</literal></expr></argument>, <argument pos:start="51:39" pos:end="51:39"><expr pos:start="51:39" pos:end="51:39"><literal type="number" pos:start="51:39" pos:end="51:39">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:21"><expr pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:7">req</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:16">writing</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <literal type="number" pos:start="55:20" pos:end="55:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><call pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:25">vscsi_preprocess_desc</name><argument_list pos:start="57:26" pos:end="57:30">(<argument pos:start="57:27" pos:end="57:29"><expr pos:start="57:27" pos:end="57:29"><name pos:start="57:27" pos:end="57:29">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:60"><expr pos:start="59:5" pos:end="59:59"><name pos:start="59:5" pos:end="59:6">rc</name> <operator pos:start="59:8" pos:end="59:8">=</operator> <call pos:start="59:10" pos:end="59:59"><name pos:start="59:10" pos:end="59:32">vscsi_srp_transfer_data</name><argument_list pos:start="59:33" pos:end="59:59">(<argument pos:start="59:34" pos:end="59:34"><expr pos:start="59:34" pos:end="59:34"><name pos:start="59:34" pos:end="59:34">s</name></expr></argument>, <argument pos:start="59:37" pos:end="59:39"><expr pos:start="59:37" pos:end="59:39"><name pos:start="59:37" pos:end="59:39">req</name></expr></argument>, <argument pos:start="59:42" pos:end="59:42"><expr pos:start="59:42" pos:end="59:42"><literal type="number" pos:start="59:42" pos:end="59:42">0</literal></expr></argument>, <argument pos:start="59:45" pos:end="59:53"><expr pos:start="59:45" pos:end="59:53"><name pos:start="59:45" pos:end="59:53">resp_data</name></expr></argument>, <argument pos:start="59:56" pos:end="59:58"><expr pos:start="59:56" pos:end="59:58"><name pos:start="59:56" pos:end="59:58">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="71:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:15">(<expr pos:start="61:9" pos:end="61:14"><name pos:start="61:9" pos:end="61:10">rc</name> <operator pos:start="61:12" pos:end="61:12">&lt;</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>)</condition> <block pos:start="61:17" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:54">

        <expr_stmt pos:start="63:9" pos:end="63:57"><expr pos:start="63:9" pos:end="63:56"><call pos:start="63:9" pos:end="63:56"><name pos:start="63:9" pos:end="63:26">vscsi_makeup_sense</name><argument_list pos:start="63:27" pos:end="63:56">(<argument pos:start="63:28" pos:end="63:28"><expr pos:start="63:28" pos:end="63:28"><name pos:start="63:28" pos:end="63:28">s</name></expr></argument>, <argument pos:start="63:31" pos:end="63:33"><expr pos:start="63:31" pos:end="63:33"><name pos:start="63:31" pos:end="63:33">req</name></expr></argument>, <argument pos:start="63:36" pos:end="63:49"><expr pos:start="63:36" pos:end="63:49"><name pos:start="63:36" pos:end="63:49">HARDWARE_ERROR</name></expr></argument>, <argument pos:start="63:52" pos:end="63:52"><expr pos:start="63:52" pos:end="63:52"><literal type="number" pos:start="63:52" pos:end="63:52">0</literal></expr></argument>, <argument pos:start="63:55" pos:end="63:55"><expr pos:start="63:55" pos:end="63:55"><literal type="number" pos:start="63:55" pos:end="63:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:54"><expr pos:start="65:9" pos:end="65:53"><call pos:start="65:9" pos:end="65:53"><name pos:start="65:9" pos:end="65:22">vscsi_send_rsp</name><argument_list pos:start="65:23" pos:end="65:53">(<argument pos:start="65:24" pos:end="65:24"><expr pos:start="65:24" pos:end="65:24"><name pos:start="65:24" pos:end="65:24">s</name></expr></argument>, <argument pos:start="65:27" pos:end="65:29"><expr pos:start="65:27" pos:end="65:29"><name pos:start="65:27" pos:end="65:29">req</name></expr></argument>, <argument pos:start="65:32" pos:end="65:46"><expr pos:start="65:32" pos:end="65:46"><name pos:start="65:32" pos:end="65:46">CHECK_CONDITION</name></expr></argument>, <argument pos:start="65:49" pos:end="65:49"><expr pos:start="65:49" pos:end="65:49"><literal type="number" pos:start="65:49" pos:end="65:49">0</literal></expr></argument>, <argument pos:start="65:52" pos:end="65:52"><expr pos:start="65:52" pos:end="65:52"><literal type="number" pos:start="65:52" pos:end="65:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="67:7" pos:end="71:5">else <block pos:start="67:12" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:46">

        <expr_stmt pos:start="69:9" pos:end="69:46"><expr pos:start="69:9" pos:end="69:45"><call pos:start="69:9" pos:end="69:45"><name pos:start="69:9" pos:end="69:22">vscsi_send_rsp</name><argument_list pos:start="69:23" pos:end="69:45">(<argument pos:start="69:24" pos:end="69:24"><expr pos:start="69:24" pos:end="69:24"><name pos:start="69:24" pos:end="69:24">s</name></expr></argument>, <argument pos:start="69:27" pos:end="69:29"><expr pos:start="69:27" pos:end="69:29"><name pos:start="69:27" pos:end="69:29">req</name></expr></argument>, <argument pos:start="69:32" pos:end="69:32"><expr pos:start="69:32" pos:end="69:32"><literal type="number" pos:start="69:32" pos:end="69:32">0</literal></expr></argument>, <argument pos:start="69:35" pos:end="69:41"><expr pos:start="69:35" pos:end="69:41"><literal type="number" pos:start="69:35" pos:end="69:38">36</literal> <operator pos:start="69:38" pos:end="69:38">-</operator> <name pos:start="69:40" pos:end="69:41">rc</name></expr></argument>, <argument pos:start="69:44" pos:end="69:44"><expr pos:start="69:44" pos:end="69:44"><literal type="number" pos:start="69:44" pos:end="69:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
