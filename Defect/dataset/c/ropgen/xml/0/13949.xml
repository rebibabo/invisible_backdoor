<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13949.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">qemu_aio_wait</name><parameter_list pos:start="1:19" pos:end="1:24">(<parameter pos:start="1:20" pos:end="1:23"><decl pos:start="1:20" pos:end="1:23"><type pos:start="1:20" pos:end="1:23"><name pos:start="1:20" pos:end="1:23">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:23">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:15"><if pos:start="9:5" pos:end="11:15">if <condition pos:start="9:8" pos:end="9:23">(<expr pos:start="9:9" pos:end="9:22"><call pos:start="9:9" pos:end="9:22"><name pos:start="9:9" pos:end="9:20">qemu_bh_poll</name><argument_list pos:start="9:21" pos:end="9:22">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:15"><block_content pos:start="11:9" pos:end="11:15">

        <return pos:start="11:9" pos:end="11:15">return;</return></block_content></block></if></if_stmt>



    <do pos:start="15:5" pos:end="159:23">do <block pos:start="15:8" pos:end="159:5">{<block_content pos:start="17:9" pos:end="157:9">

        <decl_stmt pos:start="17:9" pos:end="17:25"><decl pos:start="17:9" pos:end="17:24"><type pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:18">AioHandler</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:24">node</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:28"><decl pos:start="19:9" pos:end="19:20"><type pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:14">fd_set</name></type> <name pos:start="19:16" pos:end="19:20">rdfds</name></decl>, <decl pos:start="19:23" pos:end="19:27"><type ref="prev" pos:start="19:9" pos:end="19:14"/><name pos:start="19:23" pos:end="19:27">wrfds</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:24"><decl pos:start="21:9" pos:end="21:23"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:18">max_fd</name> <init pos:start="21:20" pos:end="21:23">= <expr pos:start="21:22" pos:end="21:23"><operator pos:start="21:22" pos:end="21:22">-</operator><literal type="number" pos:start="21:23" pos:end="21:23">1</literal></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:29"><expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:24">walking_handlers</name> <operator pos:start="25:26" pos:end="25:26">=</operator> <literal type="number" pos:start="25:28" pos:end="25:28">1</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:24"><expr pos:start="29:9" pos:end="29:23"><call pos:start="29:9" pos:end="29:23"><name pos:start="29:9" pos:end="29:15">FD_ZERO</name><argument_list pos:start="29:16" pos:end="29:23">(<argument pos:start="29:17" pos:end="29:22"><expr pos:start="29:17" pos:end="29:22"><operator pos:start="29:17" pos:end="29:17">&amp;</operator><name pos:start="29:18" pos:end="29:22">rdfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:24"><expr pos:start="31:9" pos:end="31:23"><call pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:15">FD_ZERO</name><argument_list pos:start="31:16" pos:end="31:23">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><operator pos:start="31:17" pos:end="31:17">&amp;</operator><name pos:start="31:18" pos:end="31:22">wrfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="35:9" pos:end="35:26">/* fill fd sets */</comment>

        <macro pos:start="37:9" pos:end="37:47"><name pos:start="37:9" pos:end="37:20">LIST_FOREACH</name><argument_list pos:start="37:21" pos:end="37:47">(<argument pos:start="37:22" pos:end="37:25">node</argument>, <argument pos:start="37:28" pos:end="37:40">&amp;aio_handlers</argument>, <argument pos:start="37:43" pos:end="37:46">node</argument>)</argument_list></macro> <block pos:start="37:49" pos:end="69:9">{<block_content pos:start="47:13" pos:end="67:13">

            <comment type="block" pos:start="39:13" pos:end="45:15">/* If there aren't pending AIO operations, don't invoke callbacks.

             * Otherwise, if there are no AIO requests, qemu_aio_wait() would

             * wait indefinitely.

             */</comment>

            <if_stmt pos:start="47:13" pos:end="49:25"><if pos:start="47:13" pos:end="49:25">if <condition pos:start="47:16" pos:end="47:68">(<expr pos:start="47:17" pos:end="47:67"><name pos:start="47:17" pos:end="47:30"><name pos:start="47:17" pos:end="47:20">node</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:30">io_flush</name></name> <operator pos:start="47:32" pos:end="47:33">&amp;&amp;</operator> <call pos:start="47:35" pos:end="47:62"><name pos:start="47:35" pos:end="47:48"><name pos:start="47:35" pos:end="47:38">node</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:48">io_flush</name></name><argument_list pos:start="47:49" pos:end="47:62">(<argument pos:start="47:50" pos:end="47:61"><expr pos:start="47:50" pos:end="47:61"><name pos:start="47:50" pos:end="47:61"><name pos:start="47:50" pos:end="47:53">node</name><operator pos:start="47:54" pos:end="47:55">-&gt;</operator><name pos:start="47:56" pos:end="47:61">opaque</name></name></expr></argument>)</argument_list></call> <operator pos:start="47:64" pos:end="47:65">==</operator> <literal type="number" pos:start="47:67" pos:end="47:67">0</literal></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:25"><block_content pos:start="49:17" pos:end="49:25">

                <continue pos:start="49:17" pos:end="49:25">continue;</continue></block_content></block></if></if_stmt>



            <if_stmt pos:start="53:13" pos:end="59:13"><if pos:start="53:13" pos:end="59:13">if <condition pos:start="53:16" pos:end="53:48">(<expr pos:start="53:17" pos:end="53:47"><operator pos:start="53:17" pos:end="53:17">!</operator><name pos:start="53:18" pos:end="53:30"><name pos:start="53:18" pos:end="53:21">node</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:30">deleted</name></name> <operator pos:start="53:32" pos:end="53:33">&amp;&amp;</operator> <name pos:start="53:35" pos:end="53:47"><name pos:start="53:35" pos:end="53:38">node</name><operator pos:start="53:39" pos:end="53:40">-&gt;</operator><name pos:start="53:41" pos:end="53:47">io_read</name></name></expr>)</condition> <block pos:start="53:50" pos:end="59:13">{<block_content pos:start="55:17" pos:end="57:51">

                <expr_stmt pos:start="55:17" pos:end="55:41"><expr pos:start="55:17" pos:end="55:40"><call pos:start="55:17" pos:end="55:40"><name pos:start="55:17" pos:end="55:22">FD_SET</name><argument_list pos:start="55:23" pos:end="55:40">(<argument pos:start="55:24" pos:end="55:31"><expr pos:start="55:24" pos:end="55:31"><name pos:start="55:24" pos:end="55:31"><name pos:start="55:24" pos:end="55:27">node</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:31">fd</name></name></expr></argument>, <argument pos:start="55:34" pos:end="55:39"><expr pos:start="55:34" pos:end="55:39"><operator pos:start="55:34" pos:end="55:34">&amp;</operator><name pos:start="55:35" pos:end="55:39">rdfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:51"><expr pos:start="57:17" pos:end="57:50"><name pos:start="57:17" pos:end="57:22">max_fd</name> <operator pos:start="57:24" pos:end="57:24">=</operator> <call pos:start="57:26" pos:end="57:50"><name pos:start="57:26" pos:end="57:28">MAX</name><argument_list pos:start="57:29" pos:end="57:50">(<argument pos:start="57:30" pos:end="57:35"><expr pos:start="57:30" pos:end="57:35"><name pos:start="57:30" pos:end="57:35">max_fd</name></expr></argument>, <argument pos:start="57:38" pos:end="57:49"><expr pos:start="57:38" pos:end="57:49"><name pos:start="57:38" pos:end="57:45"><name pos:start="57:38" pos:end="57:41">node</name><operator pos:start="57:42" pos:end="57:43">-&gt;</operator><name pos:start="57:44" pos:end="57:45">fd</name></name> <operator pos:start="57:47" pos:end="57:47">+</operator> <literal type="number" pos:start="57:49" pos:end="57:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="61:13" pos:end="67:13"><if pos:start="61:13" pos:end="67:13">if <condition pos:start="61:16" pos:end="61:49">(<expr pos:start="61:17" pos:end="61:48"><operator pos:start="61:17" pos:end="61:17">!</operator><name pos:start="61:18" pos:end="61:30"><name pos:start="61:18" pos:end="61:21">node</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:30">deleted</name></name> <operator pos:start="61:32" pos:end="61:33">&amp;&amp;</operator> <name pos:start="61:35" pos:end="61:48"><name pos:start="61:35" pos:end="61:38">node</name><operator pos:start="61:39" pos:end="61:40">-&gt;</operator><name pos:start="61:41" pos:end="61:48">io_write</name></name></expr>)</condition> <block pos:start="61:51" pos:end="67:13">{<block_content pos:start="63:17" pos:end="65:51">

                <expr_stmt pos:start="63:17" pos:end="63:41"><expr pos:start="63:17" pos:end="63:40"><call pos:start="63:17" pos:end="63:40"><name pos:start="63:17" pos:end="63:22">FD_SET</name><argument_list pos:start="63:23" pos:end="63:40">(<argument pos:start="63:24" pos:end="63:31"><expr pos:start="63:24" pos:end="63:31"><name pos:start="63:24" pos:end="63:31"><name pos:start="63:24" pos:end="63:27">node</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:31">fd</name></name></expr></argument>, <argument pos:start="63:34" pos:end="63:39"><expr pos:start="63:34" pos:end="63:39"><operator pos:start="63:34" pos:end="63:34">&amp;</operator><name pos:start="63:35" pos:end="63:39">wrfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:51"><expr pos:start="65:17" pos:end="65:50"><name pos:start="65:17" pos:end="65:22">max_fd</name> <operator pos:start="65:24" pos:end="65:24">=</operator> <call pos:start="65:26" pos:end="65:50"><name pos:start="65:26" pos:end="65:28">MAX</name><argument_list pos:start="65:29" pos:end="65:50">(<argument pos:start="65:30" pos:end="65:35"><expr pos:start="65:30" pos:end="65:35"><name pos:start="65:30" pos:end="65:35">max_fd</name></expr></argument>, <argument pos:start="65:38" pos:end="65:49"><expr pos:start="65:38" pos:end="65:49"><name pos:start="65:38" pos:end="65:45"><name pos:start="65:38" pos:end="65:41">node</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:45">fd</name></name> <operator pos:start="65:47" pos:end="65:47">+</operator> <literal type="number" pos:start="65:49" pos:end="65:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>



        <expr_stmt pos:start="73:9" pos:end="73:29"><expr pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:24">walking_handlers</name> <operator pos:start="73:26" pos:end="73:26">=</operator> <literal type="number" pos:start="73:28" pos:end="73:28">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="77:9" pos:end="77:52">/* No AIO operations?  Get us out of here */</comment>

        <if_stmt pos:start="79:9" pos:end="81:18"><if pos:start="79:9" pos:end="81:18">if <condition pos:start="79:12" pos:end="79:25">(<expr pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:18">max_fd</name> <operator pos:start="79:20" pos:end="79:21">==</operator> <operator pos:start="79:23" pos:end="79:23">-</operator><literal type="number" pos:start="79:24" pos:end="79:24">1</literal></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:18"><block_content pos:start="81:13" pos:end="81:18">

            <break pos:start="81:13" pos:end="81:18">break;</break></block_content></block></if></if_stmt>



        <comment type="block" pos:start="85:9" pos:end="85:35">/* wait until next event */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:57"><expr pos:start="87:9" pos:end="87:56"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="87:56"><name pos:start="87:15" pos:end="87:20">select</name><argument_list pos:start="87:21" pos:end="87:56">(<argument pos:start="87:22" pos:end="87:27"><expr pos:start="87:22" pos:end="87:27"><name pos:start="87:22" pos:end="87:27">max_fd</name></expr></argument>, <argument pos:start="87:30" pos:end="87:35"><expr pos:start="87:30" pos:end="87:35"><operator pos:start="87:30" pos:end="87:30">&amp;</operator><name pos:start="87:31" pos:end="87:35">rdfds</name></expr></argument>, <argument pos:start="87:38" pos:end="87:43"><expr pos:start="87:38" pos:end="87:43"><operator pos:start="87:38" pos:end="87:38">&amp;</operator><name pos:start="87:39" pos:end="87:43">wrfds</name></expr></argument>, <argument pos:start="87:46" pos:end="87:49"><expr pos:start="87:46" pos:end="87:49"><name pos:start="87:46" pos:end="87:49">NULL</name></expr></argument>, <argument pos:start="87:52" pos:end="87:55"><expr pos:start="87:52" pos:end="87:55"><name pos:start="87:52" pos:end="87:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="91:21"><if pos:start="89:9" pos:end="91:21">if <condition pos:start="89:12" pos:end="89:40">(<expr pos:start="89:13" pos:end="89:39"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:18">==</operator> <operator pos:start="89:20" pos:end="89:20">-</operator><literal type="number" pos:start="89:21" pos:end="89:21">1</literal> <operator pos:start="89:23" pos:end="89:24">&amp;&amp;</operator> <name pos:start="89:26" pos:end="89:30">errno</name> <operator pos:start="89:32" pos:end="89:33">==</operator> <name pos:start="89:35" pos:end="89:39">EINTR</name></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:21"><block_content pos:start="91:13" pos:end="91:21">

            <continue pos:start="91:13" pos:end="91:21">continue;</continue></block_content></block></if></if_stmt>



        <comment type="block" pos:start="95:9" pos:end="95:57">/* if we have any readable fds, dispatch event */</comment>

        <if_stmt pos:start="97:9" pos:end="157:9"><if pos:start="97:9" pos:end="157:9">if <condition pos:start="97:12" pos:end="97:20">(<expr pos:start="97:13" pos:end="97:19"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:17">&gt;</operator> <literal type="number" pos:start="97:19" pos:end="97:19">0</literal></expr>)</condition> <block pos:start="97:22" pos:end="157:9">{<block_content pos:start="99:13" pos:end="155:33">

            <expr_stmt pos:start="99:13" pos:end="99:33"><expr pos:start="99:13" pos:end="99:32"><name pos:start="99:13" pos:end="99:28">walking_handlers</name> <operator pos:start="99:30" pos:end="99:30">=</operator> <literal type="number" pos:start="99:32" pos:end="99:32">1</literal></expr>;</expr_stmt>



            <comment type="block" pos:start="103:13" pos:end="105:71">/* we have to walk very carefully in case

             * qemu_aio_set_fd_handler is called while we're walking */</comment>

            <expr_stmt pos:start="107:13" pos:end="107:45"><expr pos:start="107:13" pos:end="107:44"><name pos:start="107:13" pos:end="107:16">node</name> <operator pos:start="107:18" pos:end="107:18">=</operator> <call pos:start="107:20" pos:end="107:44"><name pos:start="107:20" pos:end="107:29">LIST_FIRST</name><argument_list pos:start="107:30" pos:end="107:44">(<argument pos:start="107:31" pos:end="107:43"><expr pos:start="107:31" pos:end="107:43"><operator pos:start="107:31" pos:end="107:31">&amp;</operator><name pos:start="107:32" pos:end="107:43">aio_handlers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="109:13" pos:end="151:13">while <condition pos:start="109:19" pos:end="109:24">(<expr pos:start="109:20" pos:end="109:23"><name pos:start="109:20" pos:end="109:23">node</name></expr>)</condition> <block pos:start="109:26" pos:end="151:13">{<block_content pos:start="111:17" pos:end="149:17">

                <decl_stmt pos:start="111:17" pos:end="111:32"><decl pos:start="111:17" pos:end="111:31"><type pos:start="111:17" pos:end="111:28"><name pos:start="111:17" pos:end="111:26">AioHandler</name> <modifier pos:start="111:28" pos:end="111:28">*</modifier></type><name pos:start="111:29" pos:end="111:31">tmp</name></decl>;</decl_stmt>



                <if_stmt pos:start="115:17" pos:end="123:17"><if pos:start="115:17" pos:end="123:17">if <condition pos:start="115:20" pos:end="119:34">(<expr pos:start="115:21" pos:end="119:33"><operator pos:start="115:21" pos:end="115:21">!</operator><name pos:start="115:22" pos:end="115:34"><name pos:start="115:22" pos:end="115:25">node</name><operator pos:start="115:26" pos:end="115:27">-&gt;</operator><name pos:start="115:28" pos:end="115:34">deleted</name></name> <operator pos:start="115:36" pos:end="115:37">&amp;&amp;</operator>

                    <call pos:start="117:21" pos:end="117:46"><name pos:start="117:21" pos:end="117:28">FD_ISSET</name><argument_list pos:start="117:29" pos:end="117:46">(<argument pos:start="117:30" pos:end="117:37"><expr pos:start="117:30" pos:end="117:37"><name pos:start="117:30" pos:end="117:37"><name pos:start="117:30" pos:end="117:33">node</name><operator pos:start="117:34" pos:end="117:35">-&gt;</operator><name pos:start="117:36" pos:end="117:37">fd</name></name></expr></argument>, <argument pos:start="117:40" pos:end="117:45"><expr pos:start="117:40" pos:end="117:45"><operator pos:start="117:40" pos:end="117:40">&amp;</operator><name pos:start="117:41" pos:end="117:45">rdfds</name></expr></argument>)</argument_list></call> <operator pos:start="117:48" pos:end="117:49">&amp;&amp;</operator>

                    <name pos:start="119:21" pos:end="119:33"><name pos:start="119:21" pos:end="119:24">node</name><operator pos:start="119:25" pos:end="119:26">-&gt;</operator><name pos:start="119:27" pos:end="119:33">io_read</name></name></expr>)</condition> <block pos:start="119:36" pos:end="123:17">{<block_content pos:start="121:21" pos:end="121:48">

                    <expr_stmt pos:start="121:21" pos:end="121:48"><expr pos:start="121:21" pos:end="121:47"><call pos:start="121:21" pos:end="121:47"><name pos:start="121:21" pos:end="121:33"><name pos:start="121:21" pos:end="121:24">node</name><operator pos:start="121:25" pos:end="121:26">-&gt;</operator><name pos:start="121:27" pos:end="121:33">io_read</name></name><argument_list pos:start="121:34" pos:end="121:47">(<argument pos:start="121:35" pos:end="121:46"><expr pos:start="121:35" pos:end="121:46"><name pos:start="121:35" pos:end="121:46"><name pos:start="121:35" pos:end="121:38">node</name><operator pos:start="121:39" pos:end="121:40">-&gt;</operator><name pos:start="121:41" pos:end="121:46">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="125:17" pos:end="133:17"><if pos:start="125:17" pos:end="133:17">if <condition pos:start="125:20" pos:end="129:35">(<expr pos:start="125:21" pos:end="129:34"><operator pos:start="125:21" pos:end="125:21">!</operator><name pos:start="125:22" pos:end="125:34"><name pos:start="125:22" pos:end="125:25">node</name><operator pos:start="125:26" pos:end="125:27">-&gt;</operator><name pos:start="125:28" pos:end="125:34">deleted</name></name> <operator pos:start="125:36" pos:end="125:37">&amp;&amp;</operator>

                    <call pos:start="127:21" pos:end="127:46"><name pos:start="127:21" pos:end="127:28">FD_ISSET</name><argument_list pos:start="127:29" pos:end="127:46">(<argument pos:start="127:30" pos:end="127:37"><expr pos:start="127:30" pos:end="127:37"><name pos:start="127:30" pos:end="127:37"><name pos:start="127:30" pos:end="127:33">node</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:37">fd</name></name></expr></argument>, <argument pos:start="127:40" pos:end="127:45"><expr pos:start="127:40" pos:end="127:45"><operator pos:start="127:40" pos:end="127:40">&amp;</operator><name pos:start="127:41" pos:end="127:45">wrfds</name></expr></argument>)</argument_list></call> <operator pos:start="127:48" pos:end="127:49">&amp;&amp;</operator>

                    <name pos:start="129:21" pos:end="129:34"><name pos:start="129:21" pos:end="129:24">node</name><operator pos:start="129:25" pos:end="129:26">-&gt;</operator><name pos:start="129:27" pos:end="129:34">io_write</name></name></expr>)</condition> <block pos:start="129:37" pos:end="133:17">{<block_content pos:start="131:21" pos:end="131:49">

                    <expr_stmt pos:start="131:21" pos:end="131:49"><expr pos:start="131:21" pos:end="131:48"><call pos:start="131:21" pos:end="131:48"><name pos:start="131:21" pos:end="131:34"><name pos:start="131:21" pos:end="131:24">node</name><operator pos:start="131:25" pos:end="131:26">-&gt;</operator><name pos:start="131:27" pos:end="131:34">io_write</name></name><argument_list pos:start="131:35" pos:end="131:48">(<argument pos:start="131:36" pos:end="131:47"><expr pos:start="131:36" pos:end="131:47"><name pos:start="131:36" pos:end="131:47"><name pos:start="131:36" pos:end="131:39">node</name><operator pos:start="131:40" pos:end="131:41">-&gt;</operator><name pos:start="131:42" pos:end="131:47">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="137:17" pos:end="137:27"><expr pos:start="137:17" pos:end="137:26"><name pos:start="137:17" pos:end="137:19">tmp</name> <operator pos:start="137:21" pos:end="137:21">=</operator> <name pos:start="137:23" pos:end="137:26">node</name></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:45"><expr pos:start="139:17" pos:end="139:44"><name pos:start="139:17" pos:end="139:20">node</name> <operator pos:start="139:22" pos:end="139:22">=</operator> <call pos:start="139:24" pos:end="139:44"><name pos:start="139:24" pos:end="139:32">LIST_NEXT</name><argument_list pos:start="139:33" pos:end="139:44">(<argument pos:start="139:34" pos:end="139:37"><expr pos:start="139:34" pos:end="139:37"><name pos:start="139:34" pos:end="139:37">node</name></expr></argument>, <argument pos:start="139:40" pos:end="139:43"><expr pos:start="139:40" pos:end="139:43"><name pos:start="139:40" pos:end="139:43">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="143:17" pos:end="149:17"><if pos:start="143:17" pos:end="149:17">if <condition pos:start="143:20" pos:end="143:33">(<expr pos:start="143:21" pos:end="143:32"><name pos:start="143:21" pos:end="143:32"><name pos:start="143:21" pos:end="143:23">tmp</name><operator pos:start="143:24" pos:end="143:25">-&gt;</operator><name pos:start="143:26" pos:end="143:32">deleted</name></name></expr>)</condition> <block pos:start="143:35" pos:end="149:17">{<block_content pos:start="145:21" pos:end="147:35">

                    <expr_stmt pos:start="145:21" pos:end="145:43"><expr pos:start="145:21" pos:end="145:42"><call pos:start="145:21" pos:end="145:42"><name pos:start="145:21" pos:end="145:31">LIST_REMOVE</name><argument_list pos:start="145:32" pos:end="145:42">(<argument pos:start="145:33" pos:end="145:35"><expr pos:start="145:33" pos:end="145:35"><name pos:start="145:33" pos:end="145:35">tmp</name></expr></argument>, <argument pos:start="145:38" pos:end="145:41"><expr pos:start="145:38" pos:end="145:41"><name pos:start="145:38" pos:end="145:41">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="147:21" pos:end="147:35"><expr pos:start="147:21" pos:end="147:34"><call pos:start="147:21" pos:end="147:34"><name pos:start="147:21" pos:end="147:29">qemu_free</name><argument_list pos:start="147:30" pos:end="147:34">(<argument pos:start="147:31" pos:end="147:33"><expr pos:start="147:31" pos:end="147:33"><name pos:start="147:31" pos:end="147:33">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></while>



            <expr_stmt pos:start="155:13" pos:end="155:33"><expr pos:start="155:13" pos:end="155:32"><name pos:start="155:13" pos:end="155:28">walking_handlers</name> <operator pos:start="155:30" pos:end="155:30">=</operator> <literal type="number" pos:start="155:32" pos:end="155:32">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="159:13" pos:end="159:22">(<expr pos:start="159:14" pos:end="159:21"><name pos:start="159:14" pos:end="159:16">ret</name> <operator pos:start="159:18" pos:end="159:19">==</operator> <literal type="number" pos:start="159:21" pos:end="159:21">0</literal></expr>)</condition>;</do>

</block_content>}</block></function>
</unit>
