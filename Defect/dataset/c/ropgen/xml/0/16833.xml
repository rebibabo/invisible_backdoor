<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16833.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">nbd_send_rep</name><parameter_list pos:start="1:24" pos:end="1:63">(<parameter pos:start="1:25" pos:end="1:33"><decl pos:start="1:25" pos:end="1:33"><type pos:start="1:25" pos:end="1:33"><name pos:start="1:25" pos:end="1:27">int</name></type> <name pos:start="1:29" pos:end="1:33">csock</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:43">uint32_t</name></type> <name pos:start="1:45" pos:end="1:48">type</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:62"><decl pos:start="1:51" pos:end="1:62"><type pos:start="1:51" pos:end="1:62"><name pos:start="1:51" pos:end="1:58">uint32_t</name></type> <name pos:start="1:60" pos:end="1:62">opt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="5:5" pos:end="51:13">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint64_t</name></type> <name pos:start="5:14" pos:end="5:18">magic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:39"><expr pos:start="11:5" pos:end="11:38"><name pos:start="11:5" pos:end="11:9">magic</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <call pos:start="11:13" pos:end="11:38"><name pos:start="11:13" pos:end="11:23">cpu_to_be64</name><argument_list pos:start="11:24" pos:end="11:38">(<argument pos:start="11:25" pos:end="11:37"><expr pos:start="11:25" pos:end="11:37"><name pos:start="11:25" pos:end="11:37">NBD_REP_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:66">(<expr pos:start="13:9" pos:end="13:65"><call pos:start="13:9" pos:end="13:48"><name pos:start="13:9" pos:end="13:18">write_sync</name><argument_list pos:start="13:19" pos:end="13:48">(<argument pos:start="13:20" pos:end="13:24"><expr pos:start="13:20" pos:end="13:24"><name pos:start="13:20" pos:end="13:24">csock</name></expr></argument>, <argument pos:start="13:27" pos:end="13:32"><expr pos:start="13:27" pos:end="13:32"><operator pos:start="13:27" pos:end="13:27">&amp;</operator><name pos:start="13:28" pos:end="13:32">magic</name></expr></argument>, <argument pos:start="13:35" pos:end="13:47"><expr pos:start="13:35" pos:end="13:47"><sizeof pos:start="13:35" pos:end="13:47">sizeof<argument_list pos:start="13:41" pos:end="13:47">(<argument pos:start="13:42" pos:end="13:46"><expr pos:start="13:42" pos:end="13:46"><name pos:start="13:42" pos:end="13:46">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="13:50" pos:end="13:51">!=</operator> <sizeof pos:start="13:53" pos:end="13:65">sizeof<argument_list pos:start="13:59" pos:end="13:65">(<argument pos:start="13:60" pos:end="13:64"><expr pos:start="13:60" pos:end="13:64"><name pos:start="13:60" pos:end="13:64">magic</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="13:68" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:23">

        <expr_stmt pos:start="15:9" pos:end="15:40"><expr pos:start="15:9" pos:end="15:39"><call pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:11">LOG</name><argument_list pos:start="15:12" pos:end="15:39">(<argument pos:start="15:13" pos:end="15:38"><expr pos:start="15:13" pos:end="15:38"><literal type="string" pos:start="15:13" pos:end="15:38">"write failed (rep magic)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:23">return <expr pos:start="17:16" pos:end="17:22"><operator pos:start="17:16" pos:end="17:16">-</operator><name pos:start="17:17" pos:end="17:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:27"><expr pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:7">opt</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:26"><name pos:start="21:11" pos:end="21:21">cpu_to_be32</name><argument_list pos:start="21:22" pos:end="21:26">(<argument pos:start="21:23" pos:end="21:25"><expr pos:start="21:23" pos:end="21:25"><name pos:start="21:23" pos:end="21:25">opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:60">(<expr pos:start="23:9" pos:end="23:59"><call pos:start="23:9" pos:end="23:44"><name pos:start="23:9" pos:end="23:18">write_sync</name><argument_list pos:start="23:19" pos:end="23:44">(<argument pos:start="23:20" pos:end="23:24"><expr pos:start="23:20" pos:end="23:24"><name pos:start="23:20" pos:end="23:24">csock</name></expr></argument>, <argument pos:start="23:27" pos:end="23:30"><expr pos:start="23:27" pos:end="23:30"><operator pos:start="23:27" pos:end="23:27">&amp;</operator><name pos:start="23:28" pos:end="23:30">opt</name></expr></argument>, <argument pos:start="23:33" pos:end="23:43"><expr pos:start="23:33" pos:end="23:43"><sizeof pos:start="23:33" pos:end="23:43">sizeof<argument_list pos:start="23:39" pos:end="23:43">(<argument pos:start="23:40" pos:end="23:42"><expr pos:start="23:40" pos:end="23:42"><name pos:start="23:40" pos:end="23:42">opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="23:46" pos:end="23:47">!=</operator> <sizeof pos:start="23:49" pos:end="23:59">sizeof<argument_list pos:start="23:55" pos:end="23:59">(<argument pos:start="23:56" pos:end="23:58"><expr pos:start="23:56" pos:end="23:58"><name pos:start="23:56" pos:end="23:58">opt</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="23:62" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:23">

        <expr_stmt pos:start="25:9" pos:end="25:38"><expr pos:start="25:9" pos:end="25:37"><call pos:start="25:9" pos:end="25:37"><name pos:start="25:9" pos:end="25:11">LOG</name><argument_list pos:start="25:12" pos:end="25:37">(<argument pos:start="25:13" pos:end="25:36"><expr pos:start="25:13" pos:end="25:36"><literal type="string" pos:start="25:13" pos:end="25:36">"write failed (rep opt)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:23">return <expr pos:start="27:16" pos:end="27:22"><operator pos:start="27:16" pos:end="27:16">-</operator><name pos:start="27:17" pos:end="27:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:8">type</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:28"><name pos:start="31:12" pos:end="31:22">cpu_to_be32</name><argument_list pos:start="31:23" pos:end="31:28">(<argument pos:start="31:24" pos:end="31:27"><expr pos:start="31:24" pos:end="31:27"><name pos:start="31:24" pos:end="31:27">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:63">(<expr pos:start="33:9" pos:end="33:62"><call pos:start="33:9" pos:end="33:46"><name pos:start="33:9" pos:end="33:18">write_sync</name><argument_list pos:start="33:19" pos:end="33:46">(<argument pos:start="33:20" pos:end="33:24"><expr pos:start="33:20" pos:end="33:24"><name pos:start="33:20" pos:end="33:24">csock</name></expr></argument>, <argument pos:start="33:27" pos:end="33:31"><expr pos:start="33:27" pos:end="33:31"><operator pos:start="33:27" pos:end="33:27">&amp;</operator><name pos:start="33:28" pos:end="33:31">type</name></expr></argument>, <argument pos:start="33:34" pos:end="33:45"><expr pos:start="33:34" pos:end="33:45"><sizeof pos:start="33:34" pos:end="33:45">sizeof<argument_list pos:start="33:40" pos:end="33:45">(<argument pos:start="33:41" pos:end="33:44"><expr pos:start="33:41" pos:end="33:44"><name pos:start="33:41" pos:end="33:44">type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="33:48" pos:end="33:49">!=</operator> <sizeof pos:start="33:51" pos:end="33:62">sizeof<argument_list pos:start="33:57" pos:end="33:62">(<argument pos:start="33:58" pos:end="33:61"><expr pos:start="33:58" pos:end="33:61"><name pos:start="33:58" pos:end="33:61">type</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="33:65" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:23">

        <expr_stmt pos:start="35:9" pos:end="35:39"><expr pos:start="35:9" pos:end="35:38"><call pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:11">LOG</name><argument_list pos:start="35:12" pos:end="35:38">(<argument pos:start="35:13" pos:end="35:37"><expr pos:start="35:13" pos:end="35:37"><literal type="string" pos:start="35:13" pos:end="35:37">"write failed (rep type)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:23">return <expr pos:start="37:16" pos:end="37:22"><operator pos:start="37:16" pos:end="37:16">-</operator><name pos:start="37:17" pos:end="37:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:7">len</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:24"><name pos:start="41:11" pos:end="41:21">cpu_to_be32</name><argument_list pos:start="41:22" pos:end="41:24">(<argument pos:start="41:23" pos:end="41:23"><expr pos:start="41:23" pos:end="41:23"><literal type="number" pos:start="41:23" pos:end="41:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:60">(<expr pos:start="43:9" pos:end="43:59"><call pos:start="43:9" pos:end="43:44"><name pos:start="43:9" pos:end="43:18">write_sync</name><argument_list pos:start="43:19" pos:end="43:44">(<argument pos:start="43:20" pos:end="43:24"><expr pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:24">csock</name></expr></argument>, <argument pos:start="43:27" pos:end="43:30"><expr pos:start="43:27" pos:end="43:30"><operator pos:start="43:27" pos:end="43:27">&amp;</operator><name pos:start="43:28" pos:end="43:30">len</name></expr></argument>, <argument pos:start="43:33" pos:end="43:43"><expr pos:start="43:33" pos:end="43:43"><sizeof pos:start="43:33" pos:end="43:43">sizeof<argument_list pos:start="43:39" pos:end="43:43">(<argument pos:start="43:40" pos:end="43:42"><expr pos:start="43:40" pos:end="43:42"><name pos:start="43:40" pos:end="43:42">len</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="43:46" pos:end="43:47">!=</operator> <sizeof pos:start="43:49" pos:end="43:59">sizeof<argument_list pos:start="43:55" pos:end="43:59">(<argument pos:start="43:56" pos:end="43:58"><expr pos:start="43:56" pos:end="43:58"><name pos:start="43:56" pos:end="43:58">len</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="43:62" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:23">

        <expr_stmt pos:start="45:9" pos:end="45:46"><expr pos:start="45:9" pos:end="45:45"><call pos:start="45:9" pos:end="45:45"><name pos:start="45:9" pos:end="45:11">LOG</name><argument_list pos:start="45:12" pos:end="45:45">(<argument pos:start="45:13" pos:end="45:44"><expr pos:start="45:13" pos:end="45:44"><literal type="string" pos:start="45:13" pos:end="45:44">"write failed (rep data length)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:23">return <expr pos:start="47:16" pos:end="47:22"><operator pos:start="47:16" pos:end="47:16">-</operator><name pos:start="47:17" pos:end="47:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="51:5" pos:end="51:13">return <expr pos:start="51:12" pos:end="51:12"><literal type="number" pos:start="51:12" pos:end="51:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
