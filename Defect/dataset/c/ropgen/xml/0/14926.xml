<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14926.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">mirror_start_job</name><parameter_list pos:start="1:29" pos:end="19:71">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:45">BlockDriverState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">bs</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:75"><decl pos:start="1:52" pos:end="1:75"><type pos:start="1:52" pos:end="1:75"><name pos:start="1:52" pos:end="1:67">BlockDriverState</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:75">target</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:49"><decl pos:start="3:30" pos:end="3:49"><type pos:start="3:30" pos:end="3:49"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:39">char</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:49">replaces</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:42"><decl pos:start="5:30" pos:end="5:42"><type pos:start="5:30" pos:end="5:42"><name pos:start="5:30" pos:end="5:36">int64_t</name></type> <name pos:start="5:38" pos:end="5:42">speed</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:63"><decl pos:start="5:45" pos:end="5:63"><type pos:start="5:45" pos:end="5:63"><name pos:start="5:45" pos:end="5:51">int64_t</name></type> <name pos:start="5:53" pos:end="5:63">granularity</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:45"><decl pos:start="7:30" pos:end="7:45"><type pos:start="7:30" pos:end="7:45"><name pos:start="7:30" pos:end="7:36">int64_t</name></type> <name pos:start="7:38" pos:end="7:45">buf_size</name></decl></parameter>,

                             <parameter pos:start="9:30" pos:end="9:60"><decl pos:start="9:30" pos:end="9:60"><type pos:start="9:30" pos:end="9:60"><name pos:start="9:30" pos:end="9:44">BlockdevOnError</name></type> <name pos:start="9:46" pos:end="9:60">on_source_error</name></decl></parameter>,

                             <parameter pos:start="11:30" pos:end="11:60"><decl pos:start="11:30" pos:end="11:60"><type pos:start="11:30" pos:end="11:60"><name pos:start="11:30" pos:end="11:44">BlockdevOnError</name></type> <name pos:start="11:46" pos:end="11:60">on_target_error</name></decl></parameter>,

                             <parameter pos:start="13:30" pos:end="13:52"><decl pos:start="13:30" pos:end="13:52"><type pos:start="13:30" pos:end="13:52"><name pos:start="13:30" pos:end="13:48">BlockCompletionFunc</name> <modifier pos:start="13:50" pos:end="13:50">*</modifier></type><name pos:start="13:51" pos:end="13:52">cb</name></decl></parameter>,

                             <parameter pos:start="15:30" pos:end="15:41"><decl pos:start="15:30" pos:end="15:41"><type pos:start="15:30" pos:end="15:41"><name pos:start="15:30" pos:end="15:33">void</name> <modifier pos:start="15:35" pos:end="15:35">*</modifier></type><name pos:start="15:36" pos:end="15:41">opaque</name></decl></parameter>, <parameter pos:start="15:44" pos:end="15:55"><decl pos:start="15:44" pos:end="15:55"><type pos:start="15:44" pos:end="15:55"><name pos:start="15:44" pos:end="15:48">Error</name> <modifier pos:start="15:50" pos:end="15:50">*</modifier><modifier pos:start="15:51" pos:end="15:51">*</modifier></type><name pos:start="15:52" pos:end="15:55">errp</name></decl></parameter>,

                             <parameter pos:start="17:30" pos:end="17:57"><decl pos:start="17:30" pos:end="17:57"><type pos:start="17:30" pos:end="17:57"><specifier pos:start="17:30" pos:end="17:34">const</specifier> <name pos:start="17:36" pos:end="17:49">BlockJobDriver</name> <modifier pos:start="17:51" pos:end="17:51">*</modifier></type><name pos:start="17:52" pos:end="17:57">driver</name></decl></parameter>,

                             <parameter pos:start="19:30" pos:end="19:46"><decl pos:start="19:30" pos:end="19:46"><type pos:start="19:30" pos:end="19:46"><name pos:start="19:30" pos:end="19:33">bool</name></type> <name pos:start="19:35" pos:end="19:46">is_none_mode</name></decl></parameter>, <parameter pos:start="19:49" pos:end="19:70"><decl pos:start="19:49" pos:end="19:70"><type pos:start="19:49" pos:end="19:70"><name pos:start="19:49" pos:end="19:64">BlockDriverState</name> <modifier pos:start="19:66" pos:end="19:66">*</modifier></type><name pos:start="19:67" pos:end="19:70">base</name></decl></parameter>)</parameter_list>

<block pos:start="21:1" pos:end="119:1">{<block_content pos:start="23:5" pos:end="117:42">

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:18">MirrorBlockJob</name> <modifier pos:start="23:20" pos:end="23:20">*</modifier></type><name pos:start="23:21" pos:end="23:21">s</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="47:5"><if pos:start="27:5" pos:end="47:5">if <condition pos:start="27:8" pos:end="27:25">(<expr pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:19">granularity</name> <operator pos:start="27:21" pos:end="27:22">==</operator> <literal type="number" pos:start="27:24" pos:end="27:24">0</literal></expr>)</condition> <block pos:start="27:27" pos:end="47:5">{<block_content pos:start="33:9" pos:end="45:9">

        <comment type="block" pos:start="29:9" pos:end="31:48">/* Choose the default granularity based on the target file's cluster

         * size, clamped between 4k and 64k.  */</comment>

        <decl_stmt pos:start="33:9" pos:end="33:28"><decl pos:start="33:9" pos:end="33:27"><type pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:23">BlockDriverInfo</name></type> <name pos:start="33:25" pos:end="33:27">bdi</name></decl>;</decl_stmt>

        <if_stmt pos:start="35:9" pos:end="45:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:70">(<expr pos:start="35:13" pos:end="35:69"><call pos:start="35:13" pos:end="35:39"><name pos:start="35:13" pos:end="35:25">bdrv_get_info</name><argument_list pos:start="35:26" pos:end="35:39">(<argument pos:start="35:27" pos:end="35:32"><expr pos:start="35:27" pos:end="35:32"><name pos:start="35:27" pos:end="35:32">target</name></expr></argument>, <argument pos:start="35:35" pos:end="35:38"><expr pos:start="35:35" pos:end="35:38"><operator pos:start="35:35" pos:end="35:35">&amp;</operator><name pos:start="35:36" pos:end="35:38">bdi</name></expr></argument>)</argument_list></call> <operator pos:start="35:41" pos:end="35:42">&gt;=</operator> <literal type="number" pos:start="35:44" pos:end="35:44">0</literal> <operator pos:start="35:46" pos:end="35:47">&amp;&amp;</operator> <name pos:start="35:49" pos:end="35:64"><name pos:start="35:49" pos:end="35:51">bdi</name><operator pos:start="35:52" pos:end="35:52">.</operator><name pos:start="35:53" pos:end="35:64">cluster_size</name></name> <operator pos:start="35:66" pos:end="35:67">!=</operator> <literal type="number" pos:start="35:69" pos:end="35:69">0</literal></expr>)</condition> <block pos:start="35:72" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:50">

            <expr_stmt pos:start="37:13" pos:end="37:54"><expr pos:start="37:13" pos:end="37:53"><name pos:start="37:13" pos:end="37:23">granularity</name> <operator pos:start="37:25" pos:end="37:25">=</operator> <call pos:start="37:27" pos:end="37:53"><name pos:start="37:27" pos:end="37:29">MAX</name><argument_list pos:start="37:30" pos:end="37:53">(<argument pos:start="37:31" pos:end="37:34"><expr pos:start="37:31" pos:end="37:34"><literal type="number" pos:start="37:31" pos:end="37:34">4096</literal></expr></argument>, <argument pos:start="37:37" pos:end="37:52"><expr pos:start="37:37" pos:end="37:52"><name pos:start="37:37" pos:end="37:52"><name pos:start="37:37" pos:end="37:39">bdi</name><operator pos:start="37:40" pos:end="37:40">.</operator><name pos:start="37:41" pos:end="37:52">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:50"><expr pos:start="39:13" pos:end="39:49"><name pos:start="39:13" pos:end="39:23">granularity</name> <operator pos:start="39:25" pos:end="39:25">=</operator> <call pos:start="39:27" pos:end="39:49"><name pos:start="39:27" pos:end="39:29">MIN</name><argument_list pos:start="39:30" pos:end="39:49">(<argument pos:start="39:31" pos:end="39:35"><expr pos:start="39:31" pos:end="39:35"><literal type="number" pos:start="39:31" pos:end="39:35">65536</literal></expr></argument>, <argument pos:start="39:38" pos:end="39:48"><expr pos:start="39:38" pos:end="39:48"><name pos:start="39:38" pos:end="39:48">granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="41:11" pos:end="45:9">else <block pos:start="41:16" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:32">

            <expr_stmt pos:start="43:13" pos:end="43:32"><expr pos:start="43:13" pos:end="43:31"><name pos:start="43:13" pos:end="43:23">granularity</name> <operator pos:start="43:25" pos:end="43:25">=</operator> <literal type="number" pos:start="43:27" pos:end="43:31">65536</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:52"><expr pos:start="51:5" pos:end="51:51"><call pos:start="51:5" pos:end="51:51"><name pos:start="51:5" pos:end="51:10">assert</name> <argument_list pos:start="51:12" pos:end="51:51">(<argument pos:start="51:13" pos:end="51:50"><expr pos:start="51:13" pos:end="51:50"><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:24">granularity</name> <operator pos:start="51:26" pos:end="51:26">&amp;</operator> <operator pos:start="51:28" pos:end="51:28">(</operator><name pos:start="51:29" pos:end="51:39">granularity</name> <operator pos:start="51:41" pos:end="51:41">-</operator> <literal type="number" pos:start="51:43" pos:end="51:43">1</literal><operator pos:start="51:44" pos:end="51:44">)</operator><operator pos:start="51:45" pos:end="51:45">)</operator> <operator pos:start="51:47" pos:end="51:48">==</operator> <literal type="number" pos:start="51:50" pos:end="51:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="65:5">if <condition pos:start="55:8" pos:end="59:38">(<expr pos:start="55:9" pos:end="59:37"><operator pos:start="55:9" pos:end="55:9">(</operator><name pos:start="55:10" pos:end="55:24">on_source_error</name> <operator pos:start="55:26" pos:end="55:27">==</operator> <name pos:start="55:29" pos:end="55:50">BLOCKDEV_ON_ERROR_STOP</name> <operator pos:start="55:52" pos:end="55:53">||</operator>

         <name pos:start="57:10" pos:end="57:24">on_source_error</name> <operator pos:start="57:26" pos:end="57:27">==</operator> <name pos:start="57:29" pos:end="57:52">BLOCKDEV_ON_ERROR_ENOSPC</name><operator pos:start="57:53" pos:end="57:53">)</operator> <operator pos:start="57:55" pos:end="57:56">&amp;&amp;</operator>

        <operator pos:start="59:9" pos:end="59:9">!</operator><call pos:start="59:10" pos:end="59:37"><name pos:start="59:10" pos:end="59:33">bdrv_iostatus_is_enabled</name><argument_list pos:start="59:34" pos:end="59:37">(<argument pos:start="59:35" pos:end="59:36"><expr pos:start="59:35" pos:end="59:36"><name pos:start="59:35" pos:end="59:36">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:40" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:15">

        <expr_stmt pos:start="61:9" pos:end="61:67"><expr pos:start="61:9" pos:end="61:66"><call pos:start="61:9" pos:end="61:66"><name pos:start="61:9" pos:end="61:17">error_set</name><argument_list pos:start="61:18" pos:end="61:66">(<argument pos:start="61:19" pos:end="61:22"><expr pos:start="61:19" pos:end="61:22"><name pos:start="61:19" pos:end="61:22">errp</name></expr></argument>, <argument pos:start="61:25" pos:end="61:46"><expr pos:start="61:25" pos:end="61:46"><name pos:start="61:25" pos:end="61:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="61:49" pos:end="61:65"><expr pos:start="61:49" pos:end="61:65"><literal type="string" pos:start="61:49" pos:end="61:65">"on-source-error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>





    <expr_stmt pos:start="71:5" pos:end="71:62"><expr pos:start="71:5" pos:end="71:61"><name pos:start="71:5" pos:end="71:5">s</name> <operator pos:start="71:7" pos:end="71:7">=</operator> <call pos:start="71:9" pos:end="71:61"><name pos:start="71:9" pos:end="71:24">block_job_create</name><argument_list pos:start="71:25" pos:end="71:61">(<argument pos:start="71:26" pos:end="71:31"><expr pos:start="71:26" pos:end="71:31"><name pos:start="71:26" pos:end="71:31">driver</name></expr></argument>, <argument pos:start="71:34" pos:end="71:35"><expr pos:start="71:34" pos:end="71:35"><name pos:start="71:34" pos:end="71:35">bs</name></expr></argument>, <argument pos:start="71:38" pos:end="71:42"><expr pos:start="71:38" pos:end="71:42"><name pos:start="71:38" pos:end="71:42">speed</name></expr></argument>, <argument pos:start="71:45" pos:end="71:46"><expr pos:start="71:45" pos:end="71:46"><name pos:start="71:45" pos:end="71:46">cb</name></expr></argument>, <argument pos:start="71:49" pos:end="71:54"><expr pos:start="71:49" pos:end="71:54"><name pos:start="71:49" pos:end="71:54">opaque</name></expr></argument>, <argument pos:start="71:57" pos:end="71:60"><expr pos:start="71:57" pos:end="71:60"><name pos:start="71:57" pos:end="71:60">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:11">(<expr pos:start="73:9" pos:end="73:10"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:10">s</name></expr>)</condition> <block pos:start="73:13" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:15">

        <return pos:start="75:9" pos:end="75:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:37"><expr pos:start="81:5" pos:end="81:36"><name pos:start="81:5" pos:end="81:15"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:15">replaces</name></name> <operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:36"><name pos:start="81:19" pos:end="81:26">g_strdup</name><argument_list pos:start="81:27" pos:end="81:36">(<argument pos:start="81:28" pos:end="81:35"><expr pos:start="81:28" pos:end="81:35"><name pos:start="81:28" pos:end="81:35">replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:41"><expr pos:start="83:5" pos:end="83:40"><name pos:start="83:5" pos:end="83:22"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:22">on_source_error</name></name> <operator pos:start="83:24" pos:end="83:24">=</operator> <name pos:start="83:26" pos:end="83:40">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:41"><expr pos:start="85:5" pos:end="85:40"><name pos:start="85:5" pos:end="85:22"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:22">on_target_error</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:40">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:23"><expr pos:start="87:5" pos:end="87:22"><name pos:start="87:5" pos:end="87:13"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:13">target</name></name> <operator pos:start="87:15" pos:end="87:15">=</operator> <name pos:start="87:17" pos:end="87:22">target</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:35"><expr pos:start="89:5" pos:end="89:34"><name pos:start="89:5" pos:end="89:19"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:19">is_none_mode</name></name> <operator pos:start="89:21" pos:end="89:21">=</operator> <name pos:start="89:23" pos:end="89:34">is_none_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:19"><expr pos:start="91:5" pos:end="91:18"><name pos:start="91:5" pos:end="91:11"><name pos:start="91:5" pos:end="91:5">s</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:11">base</name></name> <operator pos:start="91:13" pos:end="91:13">=</operator> <name pos:start="91:15" pos:end="91:18">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:33"><expr pos:start="93:5" pos:end="93:32"><name pos:start="93:5" pos:end="93:18"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:18">granularity</name></name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:32">granularity</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:45"><expr pos:start="95:5" pos:end="95:44"><name pos:start="95:5" pos:end="95:15"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:15">buf_size</name></name> <operator pos:start="95:17" pos:end="95:17">=</operator> <call pos:start="95:19" pos:end="95:44"><name pos:start="95:19" pos:end="95:21">MAX</name><argument_list pos:start="95:22" pos:end="95:44">(<argument pos:start="95:23" pos:end="95:30"><expr pos:start="95:23" pos:end="95:30"><name pos:start="95:23" pos:end="95:30">buf_size</name></expr></argument>, <argument pos:start="95:33" pos:end="95:43"><expr pos:start="95:33" pos:end="95:43"><name pos:start="95:33" pos:end="95:43">granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:70"><expr pos:start="99:5" pos:end="99:69"><name pos:start="99:5" pos:end="99:19"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:19">dirty_bitmap</name></name> <operator pos:start="99:21" pos:end="99:21">=</operator> <call pos:start="99:23" pos:end="99:69"><name pos:start="99:23" pos:end="99:46">bdrv_create_dirty_bitmap</name><argument_list pos:start="99:47" pos:end="99:69">(<argument pos:start="99:48" pos:end="99:49"><expr pos:start="99:48" pos:end="99:49"><name pos:start="99:48" pos:end="99:49">bs</name></expr></argument>, <argument pos:start="99:52" pos:end="99:62"><expr pos:start="99:52" pos:end="99:62"><name pos:start="99:52" pos:end="99:62">granularity</name></expr></argument>, <argument pos:start="99:65" pos:end="99:68"><expr pos:start="99:65" pos:end="99:68"><name pos:start="99:65" pos:end="99:68">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:25">(<expr pos:start="101:9" pos:end="101:24"><operator pos:start="101:9" pos:end="101:9">!</operator><name pos:start="101:10" pos:end="101:24"><name pos:start="101:10" pos:end="101:10">s</name><operator pos:start="101:11" pos:end="101:12">-&gt;</operator><name pos:start="101:13" pos:end="101:24">dirty_bitmap</name></name></expr>)</condition> <block pos:start="101:27" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:15">

        <return pos:start="103:9" pos:end="103:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:49"><expr pos:start="107:5" pos:end="107:48"><call pos:start="107:5" pos:end="107:48"><name pos:start="107:5" pos:end="107:31">bdrv_set_enable_write_cache</name><argument_list pos:start="107:32" pos:end="107:48">(<argument pos:start="107:33" pos:end="107:41"><expr pos:start="107:33" pos:end="107:41"><name pos:start="107:33" pos:end="107:41"><name pos:start="107:33" pos:end="107:33">s</name><operator pos:start="107:34" pos:end="107:35">-&gt;</operator><name pos:start="107:36" pos:end="107:41">target</name></name></expr></argument>, <argument pos:start="107:44" pos:end="107:47"><expr pos:start="107:44" pos:end="107:47"><name pos:start="107:44" pos:end="107:47">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:67"><expr pos:start="109:5" pos:end="109:66"><call pos:start="109:5" pos:end="109:66"><name pos:start="109:5" pos:end="109:21">bdrv_set_on_error</name><argument_list pos:start="109:22" pos:end="109:66">(<argument pos:start="109:23" pos:end="109:31"><expr pos:start="109:23" pos:end="109:31"><name pos:start="109:23" pos:end="109:31"><name pos:start="109:23" pos:end="109:23">s</name><operator pos:start="109:24" pos:end="109:25">-&gt;</operator><name pos:start="109:26" pos:end="109:31">target</name></name></expr></argument>, <argument pos:start="109:34" pos:end="109:48"><expr pos:start="109:34" pos:end="109:48"><name pos:start="109:34" pos:end="109:48">on_target_error</name></expr></argument>, <argument pos:start="109:51" pos:end="109:65"><expr pos:start="109:51" pos:end="109:65"><name pos:start="109:51" pos:end="109:65">on_target_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:36"><expr pos:start="111:5" pos:end="111:35"><call pos:start="111:5" pos:end="111:35"><name pos:start="111:5" pos:end="111:24">bdrv_iostatus_enable</name><argument_list pos:start="111:25" pos:end="111:35">(<argument pos:start="111:26" pos:end="111:34"><expr pos:start="111:26" pos:end="111:34"><name pos:start="111:26" pos:end="111:34"><name pos:start="111:26" pos:end="111:26">s</name><operator pos:start="111:27" pos:end="111:28">-&gt;</operator><name pos:start="111:29" pos:end="111:34">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:53"><expr pos:start="113:5" pos:end="113:52"><name pos:start="113:5" pos:end="113:16"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:13">common</name><operator pos:start="113:14" pos:end="113:14">.</operator><name pos:start="113:15" pos:end="113:16">co</name></name> <operator pos:start="113:18" pos:end="113:18">=</operator> <call pos:start="113:20" pos:end="113:52"><name pos:start="113:20" pos:end="113:40">qemu_coroutine_create</name><argument_list pos:start="113:41" pos:end="113:52">(<argument pos:start="113:42" pos:end="113:51"><expr pos:start="113:42" pos:end="113:51"><name pos:start="113:42" pos:end="113:51">mirror_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:52"><expr pos:start="115:5" pos:end="115:51"><call pos:start="115:5" pos:end="115:51"><name pos:start="115:5" pos:end="115:22">trace_mirror_start</name><argument_list pos:start="115:23" pos:end="115:51">(<argument pos:start="115:24" pos:end="115:25"><expr pos:start="115:24" pos:end="115:25"><name pos:start="115:24" pos:end="115:25">bs</name></expr></argument>, <argument pos:start="115:28" pos:end="115:28"><expr pos:start="115:28" pos:end="115:28"><name pos:start="115:28" pos:end="115:28">s</name></expr></argument>, <argument pos:start="115:31" pos:end="115:42"><expr pos:start="115:31" pos:end="115:42"><name pos:start="115:31" pos:end="115:42"><name pos:start="115:31" pos:end="115:31">s</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:39">common</name><operator pos:start="115:40" pos:end="115:40">.</operator><name pos:start="115:41" pos:end="115:42">co</name></name></expr></argument>, <argument pos:start="115:45" pos:end="115:50"><expr pos:start="115:45" pos:end="115:50"><name pos:start="115:45" pos:end="115:50">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:42"><expr pos:start="117:5" pos:end="117:41"><call pos:start="117:5" pos:end="117:41"><name pos:start="117:5" pos:end="117:24">qemu_coroutine_enter</name><argument_list pos:start="117:25" pos:end="117:41">(<argument pos:start="117:26" pos:end="117:37"><expr pos:start="117:26" pos:end="117:37"><name pos:start="117:26" pos:end="117:37"><name pos:start="117:26" pos:end="117:26">s</name><operator pos:start="117:27" pos:end="117:28">-&gt;</operator><name pos:start="117:29" pos:end="117:34">common</name><operator pos:start="117:35" pos:end="117:35">.</operator><name pos:start="117:36" pos:end="117:37">co</name></name></expr></argument>, <argument pos:start="117:40" pos:end="117:40"><expr pos:start="117:40" pos:end="117:40"><name pos:start="117:40" pos:end="117:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
