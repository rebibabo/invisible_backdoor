<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16736.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">usb_msd_initfn</name><parameter_list pos:start="1:26" pos:end="1:41">(<parameter pos:start="1:27" pos:end="1:40"><decl pos:start="1:27" pos:end="1:40"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:35">USBDevice</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="109:1">{<block_content pos:start="5:5" pos:end="107:13">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">MSDState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:47">= <expr pos:start="5:19" pos:end="5:47"><call pos:start="5:19" pos:end="5:47"><name pos:start="5:19" pos:end="5:27">DO_UPCAST</name><argument_list pos:start="5:28" pos:end="5:47">(<argument pos:start="5:29" pos:end="5:36"><expr pos:start="5:29" pos:end="5:36"><name pos:start="5:29" pos:end="5:36">MSDState</name></expr></argument>, <argument pos:start="5:39" pos:end="5:41"><expr pos:start="5:39" pos:end="5:41"><name pos:start="5:39" pos:end="5:41">dev</name></expr></argument>, <argument pos:start="5:44" pos:end="5:46"><expr pos:start="5:44" pos:end="5:46"><name pos:start="5:44" pos:end="5:46">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name> <init pos:start="7:26" pos:end="7:37">= <expr pos:start="7:28" pos:end="7:37"><name pos:start="7:28" pos:end="7:37"><name pos:start="7:28" pos:end="7:28">s</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:34">conf</name><operator pos:start="7:35" pos:end="7:35">.</operator><name pos:start="7:36" pos:end="7:37">bs</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">DriveInfo</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:20">dinfo</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:12">(<expr pos:start="13:9" pos:end="13:11"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:11">bs</name></expr>)</condition> <block pos:start="13:14" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:56"><expr pos:start="15:9" pos:end="15:55"><call pos:start="15:9" pos:end="15:55"><name pos:start="15:9" pos:end="15:20">error_report</name><argument_list pos:start="15:21" pos:end="15:55">(<argument pos:start="15:22" pos:end="15:54"><expr pos:start="15:22" pos:end="15:54"><literal type="string" pos:start="15:22" pos:end="15:54">"usb-msd: drive property not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="23:5" pos:end="39:7">/*

     * Hack alert: this pretends to be a block device, but it's really

     * a SCSI bus that can serve only a single device, which it

     * creates automatically.  But first it needs to detach from its

     * blockdev, or else scsi_bus_legacy_add_drive() dies when it

     * attaches again.

     *

     * The hack is probably a bad idea.

     */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><call pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:19">bdrv_detach_dev</name><argument_list pos:start="41:20" pos:end="41:37">(<argument pos:start="41:21" pos:end="41:22"><expr pos:start="41:21" pos:end="41:22"><name pos:start="41:21" pos:end="41:22">bs</name></expr></argument>, <argument pos:start="41:25" pos:end="41:36"><expr pos:start="41:25" pos:end="41:36"><operator pos:start="41:25" pos:end="41:25">&amp;</operator><name pos:start="41:26" pos:end="41:36"><name pos:start="41:26" pos:end="41:26">s</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:31">dev</name><operator pos:start="41:32" pos:end="41:32">.</operator><name pos:start="41:33" pos:end="41:36">qdev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:11">conf</name><operator pos:start="43:12" pos:end="43:12">.</operator><name pos:start="43:13" pos:end="43:14">bs</name></name> <operator pos:start="43:16" pos:end="43:16">=</operator> <name pos:start="43:18" pos:end="43:21">NULL</name></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="59:5"><if pos:start="47:5" pos:end="59:5">if <condition pos:start="47:8" pos:end="47:19">(<expr pos:start="47:9" pos:end="47:18"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:18"><name pos:start="47:10" pos:end="47:10">s</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:18">serial</name></name></expr>)</condition> <block pos:start="47:21" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:9">

        <comment type="block" pos:start="49:9" pos:end="49:73">/* try to fall back to value set with legacy -drive serial=... */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:42"><expr pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:13">dinfo</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:41"><name pos:start="51:17" pos:end="51:37">drive_get_by_blockdev</name><argument_list pos:start="51:38" pos:end="51:41">(<argument pos:start="51:39" pos:end="51:40"><expr pos:start="51:39" pos:end="51:40"><name pos:start="51:39" pos:end="51:40">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:27">(<expr pos:start="53:13" pos:end="53:26"><operator pos:start="53:13" pos:end="53:13">*</operator><name pos:start="53:14" pos:end="53:26"><name pos:start="53:14" pos:end="53:18">dinfo</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:26">serial</name></name></expr>)</condition> <block pos:start="53:29" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:46">

            <expr_stmt pos:start="55:13" pos:end="55:46"><expr pos:start="55:13" pos:end="55:45"><name pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:13">s</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:21">serial</name></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <call pos:start="55:25" pos:end="55:45"><name pos:start="55:25" pos:end="55:30">strdup</name><argument_list pos:start="55:31" pos:end="55:45">(<argument pos:start="55:32" pos:end="55:44"><expr pos:start="55:32" pos:end="55:44"><name pos:start="55:32" pos:end="55:44"><name pos:start="55:32" pos:end="55:36">dinfo</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:44">serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:18">(<expr pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:17">serial</name></name></expr>)</condition> <block pos:start="61:20" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:62">

        <expr_stmt pos:start="63:9" pos:end="63:62"><expr pos:start="63:9" pos:end="63:61"><call pos:start="63:9" pos:end="63:61"><name pos:start="63:9" pos:end="63:27">usb_desc_set_string</name><argument_list pos:start="63:28" pos:end="63:61">(<argument pos:start="63:29" pos:end="63:31"><expr pos:start="63:29" pos:end="63:31"><name pos:start="63:29" pos:end="63:31">dev</name></expr></argument>, <argument pos:start="63:34" pos:end="63:49"><expr pos:start="63:34" pos:end="63:49"><name pos:start="63:34" pos:end="63:49">STR_SERIALNUMBER</name></expr></argument>, <argument pos:start="63:52" pos:end="63:60"><expr pos:start="63:52" pos:end="63:60"><name pos:start="63:52" pos:end="63:60"><name pos:start="63:52" pos:end="63:52">s</name><operator pos:start="63:53" pos:end="63:54">-&gt;</operator><name pos:start="63:55" pos:end="63:60">serial</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:23"><expr pos:start="69:5" pos:end="69:22"><call pos:start="69:5" pos:end="69:22"><name pos:start="69:5" pos:end="69:17">usb_desc_init</name><argument_list pos:start="69:18" pos:end="69:22">(<argument pos:start="69:19" pos:end="69:21"><expr pos:start="69:19" pos:end="69:21"><name pos:start="69:19" pos:end="69:21">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:60"><expr pos:start="71:5" pos:end="71:59"><call pos:start="71:5" pos:end="71:59"><name pos:start="71:5" pos:end="71:16">scsi_bus_new</name><argument_list pos:start="71:17" pos:end="71:59">(<argument pos:start="71:18" pos:end="71:24"><expr pos:start="71:18" pos:end="71:24"><operator pos:start="71:18" pos:end="71:18">&amp;</operator><name pos:start="71:19" pos:end="71:24"><name pos:start="71:19" pos:end="71:19">s</name><operator pos:start="71:20" pos:end="71:21">-&gt;</operator><name pos:start="71:22" pos:end="71:24">bus</name></name></expr></argument>, <argument pos:start="71:27" pos:end="71:38"><expr pos:start="71:27" pos:end="71:38"><operator pos:start="71:27" pos:end="71:27">&amp;</operator><name pos:start="71:28" pos:end="71:38"><name pos:start="71:28" pos:end="71:28">s</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:33">dev</name><operator pos:start="71:34" pos:end="71:34">.</operator><name pos:start="71:35" pos:end="71:38">qdev</name></name></expr></argument>, <argument pos:start="71:41" pos:end="71:58"><expr pos:start="71:41" pos:end="71:58"><operator pos:start="71:41" pos:end="71:41">&amp;</operator><name pos:start="71:42" pos:end="71:58">usb_msd_scsi_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="75:63"><expr pos:start="73:5" pos:end="75:62"><name pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:15">scsi_dev</name></name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="75:62"><name pos:start="73:19" pos:end="73:43">scsi_bus_legacy_add_drive</name><argument_list pos:start="73:44" pos:end="75:62">(<argument pos:start="73:45" pos:end="73:51"><expr pos:start="73:45" pos:end="73:51"><operator pos:start="73:45" pos:end="73:45">&amp;</operator><name pos:start="73:46" pos:end="73:51"><name pos:start="73:46" pos:end="73:46">s</name><operator pos:start="73:47" pos:end="73:48">-&gt;</operator><name pos:start="73:49" pos:end="73:51">bus</name></name></expr></argument>, <argument pos:start="73:54" pos:end="73:55"><expr pos:start="73:54" pos:end="73:55"><name pos:start="73:54" pos:end="73:55">bs</name></expr></argument>, <argument pos:start="73:58" pos:end="73:58"><expr pos:start="73:58" pos:end="73:58"><literal type="number" pos:start="73:58" pos:end="73:58">0</literal></expr></argument>, <argument pos:start="73:61" pos:end="73:74"><expr pos:start="73:61" pos:end="73:74"><operator pos:start="73:61" pos:end="73:61">!</operator><operator pos:start="73:62" pos:end="73:62">!</operator><name pos:start="73:63" pos:end="73:74"><name pos:start="73:63" pos:end="73:63">s</name><operator pos:start="73:64" pos:end="73:65">-&gt;</operator><name pos:start="73:66" pos:end="73:74">removable</name></name></expr></argument>,

                                            <argument pos:start="75:45" pos:end="75:61"><expr pos:start="75:45" pos:end="75:61"><name pos:start="75:45" pos:end="75:61"><name pos:start="75:45" pos:end="75:45">s</name><operator pos:start="75:46" pos:end="75:47">-&gt;</operator><name pos:start="75:48" pos:end="75:51">conf</name><operator pos:start="75:52" pos:end="75:52">.</operator><name pos:start="75:53" pos:end="75:61">bootindex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:21">(<expr pos:start="77:9" pos:end="77:20"><operator pos:start="77:9" pos:end="77:9">!</operator><name pos:start="77:10" pos:end="77:20"><name pos:start="77:10" pos:end="77:10">s</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:20">scsi_dev</name></name></expr>)</condition> <block pos:start="77:23" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:18">

        <return pos:start="79:9" pos:end="79:18">return <expr pos:start="79:16" pos:end="79:17"><operator pos:start="79:16" pos:end="79:16">-</operator><literal type="number" pos:start="79:17" pos:end="79:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:34"><expr pos:start="83:5" pos:end="83:33"><name pos:start="83:5" pos:end="83:29"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:10">bus</name><operator pos:start="83:11" pos:end="83:11">.</operator><name pos:start="83:12" pos:end="83:15">qbus</name><operator pos:start="83:16" pos:end="83:16">.</operator><name pos:start="83:17" pos:end="83:29">allow_hotplug</name></name> <operator pos:start="83:31" pos:end="83:31">=</operator> <literal type="number" pos:start="83:33" pos:end="83:33">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:30"><expr pos:start="85:5" pos:end="85:29"><call pos:start="85:5" pos:end="85:29"><name pos:start="85:5" pos:end="85:24">usb_msd_handle_reset</name><argument_list pos:start="85:25" pos:end="85:29">(<argument pos:start="85:26" pos:end="85:28"><expr pos:start="85:26" pos:end="85:28"><name pos:start="85:26" pos:end="85:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="103:5"><if pos:start="89:5" pos:end="103:5">if <condition pos:start="89:8" pos:end="89:30">(<expr pos:start="89:9" pos:end="89:29"><call pos:start="89:9" pos:end="89:29"><name pos:start="89:9" pos:end="89:25">bdrv_key_required</name><argument_list pos:start="89:26" pos:end="89:29">(<argument pos:start="89:27" pos:end="89:28"><expr pos:start="89:27" pos:end="89:28"><name pos:start="89:27" pos:end="89:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:32" pos:end="103:5">{<block_content pos:start="91:9" pos:end="101:9">

        <if_stmt pos:start="91:9" pos:end="101:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:20">(<expr pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:19">cur_mon</name></expr>)</condition> <block pos:start="91:22" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:35">

            <expr_stmt pos:start="93:13" pos:end="93:77"><expr pos:start="93:13" pos:end="93:76"><call pos:start="93:13" pos:end="93:76"><name pos:start="93:13" pos:end="93:39">monitor_read_bdrv_key_start</name><argument_list pos:start="93:40" pos:end="93:76">(<argument pos:start="93:41" pos:end="93:47"><expr pos:start="93:41" pos:end="93:47"><name pos:start="93:41" pos:end="93:47">cur_mon</name></expr></argument>, <argument pos:start="93:50" pos:end="93:51"><expr pos:start="93:50" pos:end="93:51"><name pos:start="93:50" pos:end="93:51">bs</name></expr></argument>, <argument pos:start="93:54" pos:end="93:72"><expr pos:start="93:54" pos:end="93:72"><name pos:start="93:54" pos:end="93:72">usb_msd_password_cb</name></expr></argument>, <argument pos:start="93:75" pos:end="93:75"><expr pos:start="93:75" pos:end="93:75"><name pos:start="93:75" pos:end="93:75">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:35"><expr pos:start="95:13" pos:end="95:34"><name pos:start="95:13" pos:end="95:30"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:18">dev</name><operator pos:start="95:19" pos:end="95:19">.</operator><name pos:start="95:20" pos:end="95:30">auto_attach</name></name> <operator pos:start="95:32" pos:end="95:32">=</operator> <literal type="number" pos:start="95:34" pos:end="95:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="97:11" pos:end="101:9">else <block pos:start="97:16" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:26">

            <expr_stmt pos:start="99:13" pos:end="99:26"><expr pos:start="99:13" pos:end="99:25"><name pos:start="99:13" pos:end="99:21">autostart</name> <operator pos:start="99:23" pos:end="99:23">=</operator> <literal type="number" pos:start="99:25" pos:end="99:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="107:5" pos:end="107:13">return <expr pos:start="107:12" pos:end="107:12"><literal type="number" pos:start="107:12" pos:end="107:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
