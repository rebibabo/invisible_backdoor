<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1285.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">rv10_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:45">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:67">int</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">got_frame</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:37">AVPacket</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="171:1">{<block_content pos:start="7:5" pos:end="169:23">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>       <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">MpegEncContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name> <init pos:start="11:23" pos:end="11:40">= <expr pos:start="11:25" pos:end="11:40"><name pos:start="11:25" pos:end="11:40"><name pos:start="11:25" pos:end="11:29">avctx</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">pict</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>, <decl pos:start="15:12" pos:end="15:14"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">slice_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:19"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:17">uint8_t</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:29">slices_hdr</name> <init pos:start="19:31" pos:end="19:36">= <expr pos:start="19:33" pos:end="19:36"><name pos:start="19:33" pos:end="19:36">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:77"><expr pos:start="23:5" pos:end="23:76"><call pos:start="23:5" pos:end="23:76"><name pos:start="23:5" pos:end="23:11">av_dlog</name><argument_list pos:start="23:12" pos:end="23:76">(<argument pos:start="23:13" pos:end="23:17"><expr pos:start="23:13" pos:end="23:17"><name pos:start="23:13" pos:end="23:17">avctx</name></expr></argument>, <argument pos:start="23:20" pos:end="23:44"><expr pos:start="23:20" pos:end="23:44"><literal type="string" pos:start="23:20" pos:end="23:44">"*****frame %d size=%d\n"</literal></expr></argument>, <argument pos:start="23:47" pos:end="23:65"><expr pos:start="23:47" pos:end="23:65"><name pos:start="23:47" pos:end="23:65"><name pos:start="23:47" pos:end="23:51">avctx</name><operator pos:start="23:52" pos:end="23:53">-&gt;</operator><name pos:start="23:54" pos:end="23:65">frame_number</name></name></expr></argument>, <argument pos:start="23:68" pos:end="23:75"><expr pos:start="23:68" pos:end="23:75"><name pos:start="23:68" pos:end="23:75">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:22">(<expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:16">buf_size</name> <operator pos:start="29:18" pos:end="29:19">==</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr>)</condition> <block pos:start="29:24" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:17">

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="65:41"><if pos:start="37:5" pos:end="63:5">if <condition pos:start="37:8" pos:end="37:28">(<expr pos:start="37:9" pos:end="37:27"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:27"><name pos:start="37:10" pos:end="37:14">avctx</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:27">slice_count</name></name></expr>)</condition> <block pos:start="37:30" pos:end="63:5">{<block_content pos:start="39:9" pos:end="61:37">

        <expr_stmt pos:start="39:9" pos:end="39:35"><expr pos:start="39:9" pos:end="39:34"><name pos:start="39:9" pos:end="39:19">slice_count</name> <operator pos:start="39:21" pos:end="39:21">=</operator> <operator pos:start="39:23" pos:end="39:23">(</operator><operator pos:start="39:24" pos:end="39:24">*</operator><name pos:start="39:25" pos:end="39:27">buf</name><operator pos:start="39:28" pos:end="39:29">++</operator><operator pos:start="39:30" pos:end="39:30">)</operator> <operator pos:start="39:32" pos:end="39:32">+</operator> <literal type="number" pos:start="39:34" pos:end="39:34">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:19"><expr pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:16">buf_size</name><operator pos:start="41:17" pos:end="41:18">--</operator></expr>;</expr_stmt>



        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:56">(<expr pos:start="45:13" pos:end="45:55"><operator pos:start="45:13" pos:end="45:13">!</operator><name pos:start="45:14" pos:end="45:24">slice_count</name> <operator pos:start="45:26" pos:end="45:27">||</operator> <name pos:start="45:29" pos:end="45:36">buf_size</name> <operator pos:start="45:38" pos:end="45:39">&lt;=</operator> <literal type="number" pos:start="45:41" pos:end="45:41">8</literal> <operator pos:start="45:43" pos:end="45:43">*</operator> <name pos:start="45:45" pos:end="45:55">slice_count</name></expr>)</condition> <block pos:start="45:58" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:39">

            <expr_stmt pos:start="47:13" pos:end="49:32"><expr pos:start="47:13" pos:end="49:31"><call pos:start="47:13" pos:end="49:31"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="49:31">(<argument pos:start="47:20" pos:end="47:24"><expr pos:start="47:20" pos:end="47:24"><name pos:start="47:20" pos:end="47:24">avctx</name></expr></argument>, <argument pos:start="47:27" pos:end="47:38"><expr pos:start="47:27" pos:end="47:38"><name pos:start="47:27" pos:end="47:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="47:41" pos:end="47:68"><expr pos:start="47:41" pos:end="47:68"><literal type="string" pos:start="47:41" pos:end="47:68">"Invalid slice count: %d.\n"</literal></expr></argument>,

                   <argument pos:start="49:20" pos:end="49:30"><expr pos:start="49:20" pos:end="49:30"><name pos:start="49:20" pos:end="49:30">slice_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:39">return <expr pos:start="51:20" pos:end="51:38"><name pos:start="51:20" pos:end="51:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:18">slices_hdr</name> <operator pos:start="57:20" pos:end="57:20">=</operator> <name pos:start="57:22" pos:end="57:24">buf</name> <operator pos:start="57:26" pos:end="57:26">+</operator> <literal type="number" pos:start="57:28" pos:end="57:28">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:37"><expr pos:start="59:9" pos:end="59:36"><name pos:start="59:9" pos:end="59:11">buf</name>       <operator pos:start="59:19" pos:end="59:20">+=</operator> <literal type="number" pos:start="59:22" pos:end="59:22">8</literal> <operator pos:start="59:24" pos:end="59:24">*</operator> <name pos:start="59:26" pos:end="59:36">slice_count</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:16">buf_size</name>  <operator pos:start="61:19" pos:end="61:20">-=</operator> <literal type="number" pos:start="61:22" pos:end="61:22">8</literal> <operator pos:start="61:24" pos:end="61:24">*</operator> <name pos:start="61:26" pos:end="61:36">slice_count</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="63:7" pos:end="65:41">else<block type="pseudo" pos:start="65:9" pos:end="65:41"><block_content pos:start="65:9" pos:end="65:41">

        <expr_stmt pos:start="65:9" pos:end="65:41"><expr pos:start="65:9" pos:end="65:40"><name pos:start="65:9" pos:end="65:19">slice_count</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <name pos:start="65:23" pos:end="65:40"><name pos:start="65:23" pos:end="65:27">avctx</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:40">slice_count</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <for pos:start="69:5" pos:end="121:5">for <control pos:start="69:9" pos:end="69:37">(<init pos:start="69:10" pos:end="69:15"><expr pos:start="69:10" pos:end="69:14"><name pos:start="69:10" pos:end="69:10">i</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <literal type="number" pos:start="69:14" pos:end="69:14">0</literal></expr>;</init> <condition pos:start="69:17" pos:end="69:32"><expr pos:start="69:17" pos:end="69:31"><name pos:start="69:17" pos:end="69:17">i</name> <operator pos:start="69:19" pos:end="69:19">&lt;</operator> <name pos:start="69:21" pos:end="69:31">slice_count</name></expr>;</condition> <incr pos:start="69:34" pos:end="69:36"><expr pos:start="69:34" pos:end="69:36"><name pos:start="69:34" pos:end="69:34">i</name><operator pos:start="69:35" pos:end="69:36">++</operator></expr></incr>)</control> <block pos:start="69:39" pos:end="121:5">{<block_content pos:start="71:9" pos:end="119:16">

        <decl_stmt pos:start="71:9" pos:end="71:65"><decl pos:start="71:9" pos:end="71:64"><type pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:16">unsigned</name></type> <name pos:start="71:18" pos:end="71:23">offset</name> <init pos:start="71:25" pos:end="71:64">= <expr pos:start="71:27" pos:end="71:64"><call pos:start="71:27" pos:end="71:64"><name pos:start="71:27" pos:end="71:42">get_slice_offset</name><argument_list pos:start="71:43" pos:end="71:64">(<argument pos:start="71:44" pos:end="71:48"><expr pos:start="71:44" pos:end="71:48"><name pos:start="71:44" pos:end="71:48">avctx</name></expr></argument>, <argument pos:start="71:51" pos:end="71:60"><expr pos:start="71:51" pos:end="71:60"><name pos:start="71:51" pos:end="71:60">slices_hdr</name></expr></argument>, <argument pos:start="71:63" pos:end="71:63"><expr pos:start="71:63" pos:end="71:63"><name pos:start="71:63" pos:end="71:63">i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:24"><decl pos:start="73:9" pos:end="73:16"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:16">size</name></decl>, <decl pos:start="73:19" pos:end="73:23"><type ref="prev" pos:start="73:9" pos:end="73:11"/><name pos:start="73:19" pos:end="73:23">size2</name></decl>;</decl_stmt>



        <if_stmt pos:start="77:9" pos:end="79:39"><if pos:start="77:9" pos:end="79:39">if <condition pos:start="77:12" pos:end="77:31">(<expr pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:18">offset</name> <operator pos:start="77:20" pos:end="77:21">&gt;=</operator> <name pos:start="77:23" pos:end="77:30">buf_size</name></expr>)</condition><block type="pseudo" pos:start="79:13" pos:end="79:39"><block_content pos:start="79:13" pos:end="79:39">

            <return pos:start="79:13" pos:end="79:39">return <expr pos:start="79:20" pos:end="79:38"><name pos:start="79:20" pos:end="79:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="83:9" pos:end="89:71"><if pos:start="83:9" pos:end="85:37">if <condition pos:start="83:12" pos:end="83:33">(<expr pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:13">i</name> <operator pos:start="83:15" pos:end="83:15">+</operator> <literal type="number" pos:start="83:17" pos:end="83:17">1</literal> <operator pos:start="83:19" pos:end="83:20">==</operator> <name pos:start="83:22" pos:end="83:32">slice_count</name></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:37"><block_content pos:start="85:13" pos:end="85:37">

            <expr_stmt pos:start="85:13" pos:end="85:37"><expr pos:start="85:13" pos:end="85:36"><name pos:start="85:13" pos:end="85:16">size</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:27">buf_size</name> <operator pos:start="85:29" pos:end="85:29">-</operator> <name pos:start="85:31" pos:end="85:36">offset</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="87:9" pos:end="89:71">else<block type="pseudo" pos:start="89:13" pos:end="89:71"><block_content pos:start="89:13" pos:end="89:71">

            <expr_stmt pos:start="89:13" pos:end="89:71"><expr pos:start="89:13" pos:end="89:70"><name pos:start="89:13" pos:end="89:16">size</name> <operator pos:start="89:18" pos:end="89:18">=</operator> <call pos:start="89:20" pos:end="89:61"><name pos:start="89:20" pos:end="89:35">get_slice_offset</name><argument_list pos:start="89:36" pos:end="89:61">(<argument pos:start="89:37" pos:end="89:41"><expr pos:start="89:37" pos:end="89:41"><name pos:start="89:37" pos:end="89:41">avctx</name></expr></argument>, <argument pos:start="89:44" pos:end="89:53"><expr pos:start="89:44" pos:end="89:53"><name pos:start="89:44" pos:end="89:53">slices_hdr</name></expr></argument>, <argument pos:start="89:56" pos:end="89:60"><expr pos:start="89:56" pos:end="89:60"><name pos:start="89:56" pos:end="89:56">i</name> <operator pos:start="89:58" pos:end="89:58">+</operator> <literal type="number" pos:start="89:60" pos:end="89:60">1</literal></expr></argument>)</argument_list></call> <operator pos:start="89:63" pos:end="89:63">-</operator> <name pos:start="89:65" pos:end="89:70">offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="93:9" pos:end="99:72"><if pos:start="93:9" pos:end="95:38">if <condition pos:start="93:12" pos:end="93:33">(<expr pos:start="93:13" pos:end="93:32"><name pos:start="93:13" pos:end="93:13">i</name> <operator pos:start="93:15" pos:end="93:15">+</operator> <literal type="number" pos:start="93:17" pos:end="93:17">2</literal> <operator pos:start="93:19" pos:end="93:20">&gt;=</operator> <name pos:start="93:22" pos:end="93:32">slice_count</name></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:38"><block_content pos:start="95:13" pos:end="95:38">

            <expr_stmt pos:start="95:13" pos:end="95:38"><expr pos:start="95:13" pos:end="95:37"><name pos:start="95:13" pos:end="95:17">size2</name> <operator pos:start="95:19" pos:end="95:19">=</operator> <name pos:start="95:21" pos:end="95:28">buf_size</name> <operator pos:start="95:30" pos:end="95:30">-</operator> <name pos:start="95:32" pos:end="95:37">offset</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="97:9" pos:end="99:72">else<block type="pseudo" pos:start="99:13" pos:end="99:72"><block_content pos:start="99:13" pos:end="99:72">

            <expr_stmt pos:start="99:13" pos:end="99:72"><expr pos:start="99:13" pos:end="99:71"><name pos:start="99:13" pos:end="99:17">size2</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <call pos:start="99:21" pos:end="99:62"><name pos:start="99:21" pos:end="99:36">get_slice_offset</name><argument_list pos:start="99:37" pos:end="99:62">(<argument pos:start="99:38" pos:end="99:42"><expr pos:start="99:38" pos:end="99:42"><name pos:start="99:38" pos:end="99:42">avctx</name></expr></argument>, <argument pos:start="99:45" pos:end="99:54"><expr pos:start="99:45" pos:end="99:54"><name pos:start="99:45" pos:end="99:54">slices_hdr</name></expr></argument>, <argument pos:start="99:57" pos:end="99:61"><expr pos:start="99:57" pos:end="99:61"><name pos:start="99:57" pos:end="99:57">i</name> <operator pos:start="99:59" pos:end="99:59">+</operator> <literal type="number" pos:start="99:61" pos:end="99:61">2</literal></expr></argument>)</argument_list></call> <operator pos:start="99:64" pos:end="99:64">-</operator> <name pos:start="99:66" pos:end="99:71">offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="103:9" pos:end="107:39"><if pos:start="103:9" pos:end="107:39">if <condition pos:start="103:12" pos:end="105:51">(<expr pos:start="103:13" pos:end="105:50"><name pos:start="103:13" pos:end="103:16">size</name> <operator pos:start="103:18" pos:end="103:19">&lt;=</operator> <literal type="number" pos:start="103:21" pos:end="103:21">0</literal> <operator pos:start="103:23" pos:end="103:24">||</operator> <name pos:start="103:26" pos:end="103:30">size2</name> <operator pos:start="103:32" pos:end="103:33">&lt;=</operator> <literal type="number" pos:start="103:35" pos:end="103:35">0</literal> <operator pos:start="103:37" pos:end="103:38">||</operator>

            <name pos:start="105:13" pos:end="105:18">offset</name> <operator pos:start="105:20" pos:end="105:20">+</operator> <call pos:start="105:22" pos:end="105:39"><name pos:start="105:22" pos:end="105:26">FFMAX</name><argument_list pos:start="105:27" pos:end="105:39">(<argument pos:start="105:28" pos:end="105:31"><expr pos:start="105:28" pos:end="105:31"><name pos:start="105:28" pos:end="105:31">size</name></expr></argument>, <argument pos:start="105:34" pos:end="105:38"><expr pos:start="105:34" pos:end="105:38"><name pos:start="105:34" pos:end="105:38">size2</name></expr></argument>)</argument_list></call> <operator pos:start="105:41" pos:end="105:41">&gt;</operator> <name pos:start="105:43" pos:end="105:50">buf_size</name></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:39"><block_content pos:start="107:13" pos:end="107:39">

            <return pos:start="107:13" pos:end="107:39">return <expr pos:start="107:20" pos:end="107:38"><name pos:start="107:20" pos:end="107:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="111:9" pos:end="113:23"><if pos:start="111:9" pos:end="113:23">if <condition pos:start="111:12" pos:end="111:77">(<expr pos:start="111:13" pos:end="111:76"><operator pos:start="111:13" pos:end="111:13">(</operator><name pos:start="111:14" pos:end="111:16">ret</name> <operator pos:start="111:18" pos:end="111:18">=</operator> <call pos:start="111:20" pos:end="111:71"><name pos:start="111:20" pos:end="111:37">rv10_decode_packet</name><argument_list pos:start="111:38" pos:end="111:71">(<argument pos:start="111:39" pos:end="111:43"><expr pos:start="111:39" pos:end="111:43"><name pos:start="111:39" pos:end="111:43">avctx</name></expr></argument>, <argument pos:start="111:46" pos:end="111:57"><expr pos:start="111:46" pos:end="111:57"><name pos:start="111:46" pos:end="111:48">buf</name> <operator pos:start="111:50" pos:end="111:50">+</operator> <name pos:start="111:52" pos:end="111:57">offset</name></expr></argument>, <argument pos:start="111:60" pos:end="111:63"><expr pos:start="111:60" pos:end="111:63"><name pos:start="111:60" pos:end="111:63">size</name></expr></argument>, <argument pos:start="111:66" pos:end="111:70"><expr pos:start="111:66" pos:end="111:70"><name pos:start="111:66" pos:end="111:70">size2</name></expr></argument>)</argument_list></call><operator pos:start="111:72" pos:end="111:72">)</operator> <operator pos:start="111:74" pos:end="111:74">&lt;</operator> <literal type="number" pos:start="111:76" pos:end="111:76">0</literal></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:23"><block_content pos:start="113:13" pos:end="113:23">

            <return pos:start="113:13" pos:end="113:23">return <expr pos:start="113:20" pos:end="113:22"><name pos:start="113:20" pos:end="113:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="117:9" pos:end="119:16"><if pos:start="117:9" pos:end="119:16">if <condition pos:start="117:12" pos:end="117:27">(<expr pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:15">ret</name> <operator pos:start="117:17" pos:end="117:17">&gt;</operator> <literal type="number" pos:start="117:19" pos:end="117:19">8</literal> <operator pos:start="117:21" pos:end="117:21">*</operator> <name pos:start="117:23" pos:end="117:26">size</name></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:16"><block_content pos:start="119:13" pos:end="119:16">

            <expr_stmt pos:start="119:13" pos:end="119:16"><expr pos:start="119:13" pos:end="119:15"><name pos:start="119:13" pos:end="119:13">i</name><operator pos:start="119:14" pos:end="119:15">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="125:5" pos:end="165:5"><if pos:start="125:5" pos:end="165:5">if <condition pos:start="125:8" pos:end="125:66">(<expr pos:start="125:9" pos:end="125:65"><name pos:start="125:9" pos:end="125:30"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:30">current_picture_ptr</name></name> <operator pos:start="125:32" pos:end="125:33">!=</operator> <name pos:start="125:35" pos:end="125:38">NULL</name> <operator pos:start="125:40" pos:end="125:41">&amp;&amp;</operator> <name pos:start="125:43" pos:end="125:49"><name pos:start="125:43" pos:end="125:43">s</name><operator pos:start="125:44" pos:end="125:45">-&gt;</operator><name pos:start="125:46" pos:end="125:49">mb_y</name></name> <operator pos:start="125:51" pos:end="125:52">&gt;=</operator> <name pos:start="125:54" pos:end="125:65"><name pos:start="125:54" pos:end="125:54">s</name><operator pos:start="125:55" pos:end="125:56">-&gt;</operator><name pos:start="125:57" pos:end="125:65">mb_height</name></name></expr>)</condition> <block pos:start="125:68" pos:end="165:5">{<block_content pos:start="127:9" pos:end="163:38">

        <expr_stmt pos:start="127:9" pos:end="127:32"><expr pos:start="127:9" pos:end="127:31"><call pos:start="127:9" pos:end="127:31"><name pos:start="127:9" pos:end="127:23">ff_er_frame_end</name><argument_list pos:start="127:24" pos:end="127:31">(<argument pos:start="127:25" pos:end="127:30"><expr pos:start="127:25" pos:end="127:30"><operator pos:start="127:25" pos:end="127:25">&amp;</operator><name pos:start="127:26" pos:end="127:30"><name pos:start="127:26" pos:end="127:26">s</name><operator pos:start="127:27" pos:end="127:28">-&gt;</operator><name pos:start="127:29" pos:end="127:30">er</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:28"><expr pos:start="129:9" pos:end="129:27"><call pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:24">ff_mpv_frame_end</name><argument_list pos:start="129:25" pos:end="129:27">(<argument pos:start="129:26" pos:end="129:26"><expr pos:start="129:26" pos:end="129:26"><name pos:start="129:26" pos:end="129:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="133:9" pos:end="149:9"><if pos:start="133:9" pos:end="141:9">if <condition pos:start="133:12" pos:end="133:62">(<expr pos:start="133:13" pos:end="133:61"><name pos:start="133:13" pos:end="133:24"><name pos:start="133:13" pos:end="133:13">s</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:24">pict_type</name></name> <operator pos:start="133:26" pos:end="133:27">==</operator> <name pos:start="133:29" pos:end="133:45">AV_PICTURE_TYPE_B</name> <operator pos:start="133:47" pos:end="133:48">||</operator> <name pos:start="133:50" pos:end="133:61"><name pos:start="133:50" pos:end="133:50">s</name><operator pos:start="133:51" pos:end="133:52">-&gt;</operator><name pos:start="133:53" pos:end="133:61">low_delay</name></name></expr>)</condition> <block pos:start="133:64" pos:end="141:9">{<block_content pos:start="135:13" pos:end="139:59">

            <if_stmt pos:start="135:13" pos:end="137:27"><if pos:start="135:13" pos:end="137:27">if <condition pos:start="135:16" pos:end="135:74">(<expr pos:start="135:17" pos:end="135:73"><operator pos:start="135:17" pos:end="135:17">(</operator><name pos:start="135:18" pos:end="135:20">ret</name> <operator pos:start="135:22" pos:end="135:22">=</operator> <call pos:start="135:24" pos:end="135:68"><name pos:start="135:24" pos:end="135:35">av_frame_ref</name><argument_list pos:start="135:36" pos:end="135:68">(<argument pos:start="135:37" pos:end="135:40"><expr pos:start="135:37" pos:end="135:40"><name pos:start="135:37" pos:end="135:40">pict</name></expr></argument>, <argument pos:start="135:43" pos:end="135:67"><expr pos:start="135:43" pos:end="135:67"><name pos:start="135:43" pos:end="135:67"><name pos:start="135:43" pos:end="135:43">s</name><operator pos:start="135:44" pos:end="135:45">-&gt;</operator><name pos:start="135:46" pos:end="135:64">current_picture_ptr</name><operator pos:start="135:65" pos:end="135:66">-&gt;</operator><name pos:start="135:67" pos:end="135:67">f</name></name></expr></argument>)</argument_list></call><operator pos:start="135:69" pos:end="135:69">)</operator> <operator pos:start="135:71" pos:end="135:71">&lt;</operator> <literal type="number" pos:start="135:73" pos:end="135:73">0</literal></expr>)</condition><block type="pseudo" pos:start="137:17" pos:end="137:27"><block_content pos:start="137:17" pos:end="137:27">

                <return pos:start="137:17" pos:end="137:27">return <expr pos:start="137:24" pos:end="137:26"><name pos:start="137:24" pos:end="137:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:59"><expr pos:start="139:13" pos:end="139:58"><call pos:start="139:13" pos:end="139:58"><name pos:start="139:13" pos:end="139:31">ff_print_debug_info</name><argument_list pos:start="139:32" pos:end="139:58">(<argument pos:start="139:33" pos:end="139:33"><expr pos:start="139:33" pos:end="139:33"><name pos:start="139:33" pos:end="139:33">s</name></expr></argument>, <argument pos:start="139:36" pos:end="139:57"><expr pos:start="139:36" pos:end="139:57"><name pos:start="139:36" pos:end="139:57"><name pos:start="139:36" pos:end="139:36">s</name><operator pos:start="139:37" pos:end="139:38">-&gt;</operator><name pos:start="139:39" pos:end="139:57">current_picture_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="141:11" pos:end="149:9">else if <condition pos:start="141:19" pos:end="141:47">(<expr pos:start="141:20" pos:end="141:46"><name pos:start="141:20" pos:end="141:38"><name pos:start="141:20" pos:end="141:20">s</name><operator pos:start="141:21" pos:end="141:22">-&gt;</operator><name pos:start="141:23" pos:end="141:38">last_picture_ptr</name></name> <operator pos:start="141:40" pos:end="141:41">!=</operator> <name pos:start="141:43" pos:end="141:46">NULL</name></expr>)</condition> <block pos:start="141:49" pos:end="149:9">{<block_content pos:start="143:13" pos:end="147:56">

            <if_stmt pos:start="143:13" pos:end="145:27"><if pos:start="143:13" pos:end="145:27">if <condition pos:start="143:16" pos:end="143:71">(<expr pos:start="143:17" pos:end="143:70"><operator pos:start="143:17" pos:end="143:17">(</operator><name pos:start="143:18" pos:end="143:20">ret</name> <operator pos:start="143:22" pos:end="143:22">=</operator> <call pos:start="143:24" pos:end="143:65"><name pos:start="143:24" pos:end="143:35">av_frame_ref</name><argument_list pos:start="143:36" pos:end="143:65">(<argument pos:start="143:37" pos:end="143:40"><expr pos:start="143:37" pos:end="143:40"><name pos:start="143:37" pos:end="143:40">pict</name></expr></argument>, <argument pos:start="143:43" pos:end="143:64"><expr pos:start="143:43" pos:end="143:64"><name pos:start="143:43" pos:end="143:64"><name pos:start="143:43" pos:end="143:43">s</name><operator pos:start="143:44" pos:end="143:45">-&gt;</operator><name pos:start="143:46" pos:end="143:61">last_picture_ptr</name><operator pos:start="143:62" pos:end="143:63">-&gt;</operator><name pos:start="143:64" pos:end="143:64">f</name></name></expr></argument>)</argument_list></call><operator pos:start="143:66" pos:end="143:66">)</operator> <operator pos:start="143:68" pos:end="143:68">&lt;</operator> <literal type="number" pos:start="143:70" pos:end="143:70">0</literal></expr>)</condition><block type="pseudo" pos:start="145:17" pos:end="145:27"><block_content pos:start="145:17" pos:end="145:27">

                <return pos:start="145:17" pos:end="145:27">return <expr pos:start="145:24" pos:end="145:26"><name pos:start="145:24" pos:end="145:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:56"><expr pos:start="147:13" pos:end="147:55"><call pos:start="147:13" pos:end="147:55"><name pos:start="147:13" pos:end="147:31">ff_print_debug_info</name><argument_list pos:start="147:32" pos:end="147:55">(<argument pos:start="147:33" pos:end="147:33"><expr pos:start="147:33" pos:end="147:33"><name pos:start="147:33" pos:end="147:33">s</name></expr></argument>, <argument pos:start="147:36" pos:end="147:54"><expr pos:start="147:36" pos:end="147:54"><name pos:start="147:36" pos:end="147:54"><name pos:start="147:36" pos:end="147:36">s</name><operator pos:start="147:37" pos:end="147:38">-&gt;</operator><name pos:start="147:39" pos:end="147:54">last_picture_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="153:9" pos:end="157:9"><if pos:start="153:9" pos:end="157:9">if <condition pos:start="153:12" pos:end="153:48">(<expr pos:start="153:13" pos:end="153:47"><name pos:start="153:13" pos:end="153:31"><name pos:start="153:13" pos:end="153:13">s</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:31">last_picture_ptr</name></name> <operator pos:start="153:33" pos:end="153:34">||</operator> <name pos:start="153:36" pos:end="153:47"><name pos:start="153:36" pos:end="153:36">s</name><operator pos:start="153:37" pos:end="153:38">-&gt;</operator><name pos:start="153:39" pos:end="153:47">low_delay</name></name></expr>)</condition> <block pos:start="153:50" pos:end="157:9">{<block_content pos:start="155:13" pos:end="155:27">

            <expr_stmt pos:start="155:13" pos:end="155:27"><expr pos:start="155:13" pos:end="155:26"><operator pos:start="155:13" pos:end="155:13">*</operator><name pos:start="155:14" pos:end="155:22">got_frame</name> <operator pos:start="155:24" pos:end="155:24">=</operator> <literal type="number" pos:start="155:26" pos:end="155:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="161:9" pos:end="161:85">// so we can detect if frame_end was not called (find some nicer solution...)</comment>

        <expr_stmt pos:start="163:9" pos:end="163:38"><expr pos:start="163:9" pos:end="163:37"><name pos:start="163:9" pos:end="163:30"><name pos:start="163:9" pos:end="163:9">s</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:30">current_picture_ptr</name></name> <operator pos:start="163:32" pos:end="163:32">=</operator> <name pos:start="163:34" pos:end="163:37">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="169:5" pos:end="169:23">return <expr pos:start="169:12" pos:end="169:22"><name pos:start="169:12" pos:end="169:22"><name pos:start="169:12" pos:end="169:16">avpkt</name><operator pos:start="169:17" pos:end="169:18">-&gt;</operator><name pos:start="169:19" pos:end="169:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
