<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15479.c" pos:tabs="8"><function pos:start="1:1" pos:end="195:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">convert_do_copy</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">ImgConvertState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="195:1">{<block_content pos:start="5:5" pos:end="193:15">

    <decl_stmt pos:start="5:5" pos:end="5:24"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">buf</name> <init pos:start="5:18" pos:end="5:23">= <expr pos:start="5:20" pos:end="5:23"><name pos:start="5:20" pos:end="5:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:22">sector_num</name></decl>, <decl pos:start="7:25" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:25" pos:end="7:38">allocated_done</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">n</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:77">/* Check whether we have zero initialisation or can get it efficiently */</comment>

    <expr_stmt pos:start="17:5" pos:end="21:29"><expr pos:start="17:5" pos:end="21:28"><name pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:20">has_zero_init</name></name> <operator pos:start="17:22" pos:end="17:22">=</operator> <ternary pos:start="17:24" pos:end="21:28"><condition pos:start="17:24" pos:end="19:22"><expr pos:start="17:24" pos:end="17:62"><name pos:start="17:24" pos:end="17:36"><name pos:start="17:24" pos:end="17:24">s</name><operator pos:start="17:25" pos:end="17:26">-&gt;</operator><name pos:start="17:27" pos:end="17:36">min_sparse</name></name> <operator pos:start="17:38" pos:end="17:39">&amp;&amp;</operator> <operator pos:start="17:41" pos:end="17:41">!</operator><name pos:start="17:42" pos:end="17:62"><name pos:start="17:42" pos:end="17:42">s</name><operator pos:start="17:43" pos:end="17:44">-&gt;</operator><name pos:start="17:45" pos:end="17:62">target_has_backing</name></name></expr>

                     ?</condition><then pos:start="19:24" pos:end="19:60"> <expr pos:start="19:24" pos:end="19:60"><call pos:start="19:24" pos:end="19:60"><name pos:start="19:24" pos:end="19:41">bdrv_has_zero_init</name><argument_list pos:start="19:42" pos:end="19:60">(<argument pos:start="19:43" pos:end="19:59"><expr pos:start="19:43" pos:end="19:59"><call pos:start="19:43" pos:end="19:59"><name pos:start="19:43" pos:end="19:48">blk_bs</name><argument_list pos:start="19:49" pos:end="19:59">(<argument pos:start="19:50" pos:end="19:58"><expr pos:start="19:50" pos:end="19:58"><name pos:start="19:50" pos:end="19:58"><name pos:start="19:50" pos:end="19:50">s</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:58">target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>

                     </then><else pos:start="21:22" pos:end="21:28">: <expr pos:start="21:24" pos:end="21:28"><name pos:start="21:24" pos:end="21:28">false</name></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="39:5"><if pos:start="25:5" pos:end="39:5">if <condition pos:start="25:8" pos:end="27:60">(<expr pos:start="25:9" pos:end="27:59"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:25"><name pos:start="25:10" pos:end="25:10">s</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:25">has_zero_init</name></name> <operator pos:start="25:27" pos:end="25:28">&amp;&amp;</operator> <operator pos:start="25:30" pos:end="25:30">!</operator><name pos:start="25:31" pos:end="25:51"><name pos:start="25:31" pos:end="25:31">s</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:51">target_has_backing</name></name> <operator pos:start="25:53" pos:end="25:54">&amp;&amp;</operator>

        <call pos:start="27:9" pos:end="27:59"><name pos:start="27:9" pos:end="27:40">bdrv_can_write_zeroes_with_unmap</name><argument_list pos:start="27:41" pos:end="27:59">(<argument pos:start="27:42" pos:end="27:58"><expr pos:start="27:42" pos:end="27:58"><call pos:start="27:42" pos:end="27:58"><name pos:start="27:42" pos:end="27:47">blk_bs</name><argument_list pos:start="27:48" pos:end="27:58">(<argument pos:start="27:49" pos:end="27:57"><expr pos:start="27:49" pos:end="27:57"><name pos:start="27:49" pos:end="27:57"><name pos:start="27:49" pos:end="27:49">s</name><operator pos:start="27:50" pos:end="27:51">-&gt;</operator><name pos:start="27:52" pos:end="27:57">target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="29:5" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:9">

        <expr_stmt pos:start="31:9" pos:end="31:68"><expr pos:start="31:9" pos:end="31:67"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:67"><name pos:start="31:15" pos:end="31:28">bdrv_make_zero</name><argument_list pos:start="31:29" pos:end="31:67">(<argument pos:start="31:30" pos:end="31:46"><expr pos:start="31:30" pos:end="31:46"><call pos:start="31:30" pos:end="31:46"><name pos:start="31:30" pos:end="31:35">blk_bs</name><argument_list pos:start="31:36" pos:end="31:46">(<argument pos:start="31:37" pos:end="31:45"><expr pos:start="31:37" pos:end="31:45"><name pos:start="31:37" pos:end="31:45"><name pos:start="31:37" pos:end="31:37">s</name><operator pos:start="31:38" pos:end="31:39">-&gt;</operator><name pos:start="31:40" pos:end="31:45">target</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:49" pos:end="31:66"><expr pos:start="31:49" pos:end="31:66"><name pos:start="31:49" pos:end="31:66">BDRV_REQ_MAY_UNMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:21">(<expr pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:15">ret</name> <operator pos:start="33:17" pos:end="33:18">==</operator> <literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>)</condition> <block pos:start="33:23" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:36">

            <expr_stmt pos:start="35:13" pos:end="35:36"><expr pos:start="35:13" pos:end="35:35"><name pos:start="35:13" pos:end="35:28"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:28">has_zero_init</name></name> <operator pos:start="35:30" pos:end="35:30">=</operator> <name pos:start="35:32" pos:end="35:35">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="45:34">/* Allocate buffer for copied data. For compressed images, only one cluster

     * can be copied at a time. */</comment>

    <if_stmt pos:start="47:5" pos:end="61:5"><if pos:start="47:5" pos:end="61:5">if <condition pos:start="47:8" pos:end="47:22">(<expr pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:21">compressed</name></name></expr>)</condition> <block pos:start="47:24" pos:end="61:5">{<block_content pos:start="49:9" pos:end="59:44">

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:75">(<expr pos:start="49:13" pos:end="49:74"><name pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:30">cluster_sectors</name></name> <operator pos:start="49:32" pos:end="49:33">&lt;=</operator> <literal type="number" pos:start="49:35" pos:end="49:35">0</literal> <operator pos:start="49:37" pos:end="49:38">||</operator> <name pos:start="49:40" pos:end="49:57"><name pos:start="49:40" pos:end="49:40">s</name><operator pos:start="49:41" pos:end="49:42">-&gt;</operator><name pos:start="49:43" pos:end="49:57">cluster_sectors</name></name> <operator pos:start="49:59" pos:end="49:59">&gt;</operator> <name pos:start="49:61" pos:end="49:74"><name pos:start="49:61" pos:end="49:61">s</name><operator pos:start="49:62" pos:end="49:63">-&gt;</operator><name pos:start="49:64" pos:end="49:74">buf_sectors</name></name></expr>)</condition> <block pos:start="49:77" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:22">

            <expr_stmt pos:start="51:13" pos:end="51:49"><expr pos:start="51:13" pos:end="51:48"><call pos:start="51:13" pos:end="51:48"><name pos:start="51:13" pos:end="51:24">error_report</name><argument_list pos:start="51:25" pos:end="51:48">(<argument pos:start="51:26" pos:end="51:47"><expr pos:start="51:26" pos:end="51:47"><literal type="string" pos:start="51:26" pos:end="51:47">"invalid cluster size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:26"><expr pos:start="53:13" pos:end="53:25"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <operator pos:start="53:19" pos:end="53:19">-</operator><name pos:start="53:20" pos:end="53:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="55:13" pos:end="55:22">goto <name pos:start="55:18" pos:end="55:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:44"><expr pos:start="59:9" pos:end="59:43"><name pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:22">buf_sectors</name></name> <operator pos:start="59:24" pos:end="59:24">=</operator> <name pos:start="59:26" pos:end="59:43"><name pos:start="59:26" pos:end="59:26">s</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:43">cluster_sectors</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:71"><expr pos:start="63:5" pos:end="63:70"><name pos:start="63:5" pos:end="63:7">buf</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="63:70"><name pos:start="63:11" pos:end="63:24">blk_blockalign</name><argument_list pos:start="63:25" pos:end="63:70">(<argument pos:start="63:26" pos:end="63:34"><expr pos:start="63:26" pos:end="63:34"><name pos:start="63:26" pos:end="63:34"><name pos:start="63:26" pos:end="63:26">s</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:34">target</name></name></expr></argument>, <argument pos:start="63:37" pos:end="63:69"><expr pos:start="63:37" pos:end="63:69"><name pos:start="63:37" pos:end="63:50"><name pos:start="63:37" pos:end="63:37">s</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:50">buf_sectors</name></name> <operator pos:start="63:52" pos:end="63:52">*</operator> <name pos:start="63:54" pos:end="63:69">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:50">/* Calculate allocated sectors for progress */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:29"><expr pos:start="69:5" pos:end="69:28"><name pos:start="69:5" pos:end="69:24"><name pos:start="69:5" pos:end="69:5">s</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:24">allocated_sectors</name></name> <operator pos:start="69:26" pos:end="69:26">=</operator> <literal type="number" pos:start="69:28" pos:end="69:28">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:19"><expr pos:start="71:5" pos:end="71:18"><name pos:start="71:5" pos:end="71:14">sector_num</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <literal type="number" pos:start="71:18" pos:end="71:18">0</literal></expr>;</expr_stmt>

    <while pos:start="73:5" pos:end="93:5">while <condition pos:start="73:11" pos:end="73:41">(<expr pos:start="73:12" pos:end="73:40"><name pos:start="73:12" pos:end="73:21">sector_num</name> <operator pos:start="73:23" pos:end="73:23">&lt;</operator> <name pos:start="73:25" pos:end="73:40"><name pos:start="73:25" pos:end="73:25">s</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:40">total_sectors</name></name></expr>)</condition> <block pos:start="73:43" pos:end="93:5">{<block_content pos:start="75:9" pos:end="91:24">

        <expr_stmt pos:start="75:9" pos:end="75:53"><expr pos:start="75:9" pos:end="75:52"><name pos:start="75:9" pos:end="75:9">n</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <call pos:start="75:13" pos:end="75:52"><name pos:start="75:13" pos:end="75:37">convert_iteration_sectors</name><argument_list pos:start="75:38" pos:end="75:52">(<argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><name pos:start="75:39" pos:end="75:39">s</name></expr></argument>, <argument pos:start="75:42" pos:end="75:51"><expr pos:start="75:42" pos:end="75:51"><name pos:start="75:42" pos:end="75:51">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="83:9"><if pos:start="77:9" pos:end="83:9">if <condition pos:start="77:12" pos:end="77:18">(<expr pos:start="77:13" pos:end="77:17"><name pos:start="77:13" pos:end="77:13">n</name> <operator pos:start="77:15" pos:end="77:15">&lt;</operator> <literal type="number" pos:start="77:17" pos:end="77:17">0</literal></expr>)</condition> <block pos:start="77:20" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:22">

            <expr_stmt pos:start="79:13" pos:end="79:20"><expr pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:19">n</name></expr>;</expr_stmt>

            <goto pos:start="81:13" pos:end="81:22">goto <name pos:start="81:18" pos:end="81:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="89:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:34">(<expr pos:start="85:13" pos:end="85:33"><name pos:start="85:13" pos:end="85:21"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:21">status</name></name> <operator pos:start="85:23" pos:end="85:24">==</operator> <name pos:start="85:26" pos:end="85:33">BLK_DATA</name></expr>)</condition> <block pos:start="85:36" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:38">

            <expr_stmt pos:start="87:13" pos:end="87:38"><expr pos:start="87:13" pos:end="87:37"><name pos:start="87:13" pos:end="87:32"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:32">allocated_sectors</name></name> <operator pos:start="87:34" pos:end="87:35">+=</operator> <name pos:start="87:37" pos:end="87:37">n</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:24"><expr pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:18">sector_num</name> <operator pos:start="91:20" pos:end="91:21">+=</operator> <name pos:start="91:23" pos:end="91:23">n</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="97:5" pos:end="97:21">/* Do the copy */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:19"><expr pos:start="99:5" pos:end="99:18"><name pos:start="99:5" pos:end="99:14"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:14">src_cur</name></name> <operator pos:start="99:16" pos:end="99:16">=</operator> <literal type="number" pos:start="99:18" pos:end="99:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:26"><expr pos:start="101:5" pos:end="101:25"><name pos:start="101:5" pos:end="101:21"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:21">src_cur_offset</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator> <literal type="number" pos:start="101:25" pos:end="101:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:30"><expr pos:start="103:5" pos:end="103:29"><name pos:start="103:5" pos:end="103:25"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:25">sector_next_status</name></name> <operator pos:start="103:27" pos:end="103:27">=</operator> <literal type="number" pos:start="103:29" pos:end="103:29">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:19"><expr pos:start="107:5" pos:end="107:18"><name pos:start="107:5" pos:end="107:14">sector_num</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <literal type="number" pos:start="107:18" pos:end="107:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:23"><expr pos:start="109:5" pos:end="109:22"><name pos:start="109:5" pos:end="109:18">allocated_done</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>;</expr_stmt>



    <while pos:start="113:5" pos:end="167:5">while <condition pos:start="113:11" pos:end="113:41">(<expr pos:start="113:12" pos:end="113:40"><name pos:start="113:12" pos:end="113:21">sector_num</name> <operator pos:start="113:23" pos:end="113:23">&lt;</operator> <name pos:start="113:25" pos:end="113:40"><name pos:start="113:25" pos:end="113:25">s</name><operator pos:start="113:26" pos:end="113:27">-&gt;</operator><name pos:start="113:28" pos:end="113:40">total_sectors</name></name></expr>)</condition> <block pos:start="113:43" pos:end="167:5">{<block_content pos:start="115:9" pos:end="165:24">

        <expr_stmt pos:start="115:9" pos:end="115:53"><expr pos:start="115:9" pos:end="115:52"><name pos:start="115:9" pos:end="115:9">n</name> <operator pos:start="115:11" pos:end="115:11">=</operator> <call pos:start="115:13" pos:end="115:52"><name pos:start="115:13" pos:end="115:37">convert_iteration_sectors</name><argument_list pos:start="115:38" pos:end="115:52">(<argument pos:start="115:39" pos:end="115:39"><expr pos:start="115:39" pos:end="115:39"><name pos:start="115:39" pos:end="115:39">s</name></expr></argument>, <argument pos:start="115:42" pos:end="115:51"><expr pos:start="115:42" pos:end="115:51"><name pos:start="115:42" pos:end="115:51">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="123:9"><if pos:start="117:9" pos:end="123:9">if <condition pos:start="117:12" pos:end="117:18">(<expr pos:start="117:13" pos:end="117:17"><name pos:start="117:13" pos:end="117:13">n</name> <operator pos:start="117:15" pos:end="117:15">&lt;</operator> <literal type="number" pos:start="117:17" pos:end="117:17">0</literal></expr>)</condition> <block pos:start="117:20" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:22">

            <expr_stmt pos:start="119:13" pos:end="119:20"><expr pos:start="119:13" pos:end="119:19"><name pos:start="119:13" pos:end="119:15">ret</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <name pos:start="119:19" pos:end="119:19">n</name></expr>;</expr_stmt>

            <goto pos:start="121:13" pos:end="121:22">goto <name pos:start="121:18" pos:end="121:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="125:9" pos:end="133:9"><if pos:start="125:9" pos:end="133:9">if <condition pos:start="125:12" pos:end="125:34">(<expr pos:start="125:13" pos:end="125:33"><name pos:start="125:13" pos:end="125:21"><name pos:start="125:13" pos:end="125:13">s</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:21">status</name></name> <operator pos:start="125:23" pos:end="125:24">==</operator> <name pos:start="125:26" pos:end="125:33">BLK_DATA</name></expr>)</condition> <block pos:start="125:36" pos:end="133:9">{<block_content pos:start="127:13" pos:end="131:35">

            <expr_stmt pos:start="127:13" pos:end="127:32"><expr pos:start="127:13" pos:end="127:31"><name pos:start="127:13" pos:end="127:26">allocated_done</name> <operator pos:start="127:28" pos:end="127:29">+=</operator> <name pos:start="127:31" pos:end="127:31">n</name></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="131:35"><expr pos:start="129:13" pos:end="131:34"><call pos:start="129:13" pos:end="131:34"><name pos:start="129:13" pos:end="129:31">qemu_progress_print</name><argument_list pos:start="129:32" pos:end="131:34">(<argument pos:start="129:33" pos:end="129:77"><expr pos:start="129:33" pos:end="129:77"><literal type="number" pos:start="129:33" pos:end="129:37">100.0</literal> <operator pos:start="129:39" pos:end="129:39">*</operator> <name pos:start="129:41" pos:end="129:54">allocated_done</name> <operator pos:start="129:56" pos:end="129:56">/</operator> <name pos:start="129:58" pos:end="129:77"><name pos:start="129:58" pos:end="129:58">s</name><operator pos:start="129:59" pos:end="129:60">-&gt;</operator><name pos:start="129:61" pos:end="129:77">allocated_sectors</name></name></expr></argument>,

                                <argument pos:start="131:33" pos:end="131:33"><expr pos:start="131:33" pos:end="131:33"><literal type="number" pos:start="131:33" pos:end="131:33">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="137:9" pos:end="137:50"><expr pos:start="137:9" pos:end="137:49"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <call pos:start="137:15" pos:end="137:49"><name pos:start="137:15" pos:end="137:26">convert_read</name><argument_list pos:start="137:27" pos:end="137:49">(<argument pos:start="137:28" pos:end="137:28"><expr pos:start="137:28" pos:end="137:28"><name pos:start="137:28" pos:end="137:28">s</name></expr></argument>, <argument pos:start="137:31" pos:end="137:40"><expr pos:start="137:31" pos:end="137:40"><name pos:start="137:31" pos:end="137:40">sector_num</name></expr></argument>, <argument pos:start="137:43" pos:end="137:43"><expr pos:start="137:43" pos:end="137:43"><name pos:start="137:43" pos:end="137:43">n</name></expr></argument>, <argument pos:start="137:46" pos:end="137:48"><expr pos:start="137:46" pos:end="137:48"><name pos:start="137:46" pos:end="137:48">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="147:9"><if pos:start="139:9" pos:end="147:9">if <condition pos:start="139:12" pos:end="139:20">(<expr pos:start="139:13" pos:end="139:19"><name pos:start="139:13" pos:end="139:15">ret</name> <operator pos:start="139:17" pos:end="139:17">&lt;</operator> <literal type="number" pos:start="139:19" pos:end="139:19">0</literal></expr>)</condition> <block pos:start="139:22" pos:end="147:9">{<block_content pos:start="141:13" pos:end="145:22">

            <expr_stmt pos:start="141:13" pos:end="143:61"><expr pos:start="141:13" pos:end="143:60"><call pos:start="141:13" pos:end="143:60"><name pos:start="141:13" pos:end="141:24">error_report</name><argument_list pos:start="141:25" pos:end="143:60">(<argument pos:start="141:26" pos:end="143:31"><expr pos:start="141:26" pos:end="143:31"><literal type="string" pos:start="141:26" pos:end="141:55">"error while reading sector %"</literal> <name pos:start="141:57" pos:end="141:62">PRId64</name>

                         <literal type="string" pos:start="143:26" pos:end="143:31">": %s"</literal></expr></argument>, <argument pos:start="143:34" pos:end="143:43"><expr pos:start="143:34" pos:end="143:43"><name pos:start="143:34" pos:end="143:43">sector_num</name></expr></argument>, <argument pos:start="143:46" pos:end="143:59"><expr pos:start="143:46" pos:end="143:59"><call pos:start="143:46" pos:end="143:59"><name pos:start="143:46" pos:end="143:53">strerror</name><argument_list pos:start="143:54" pos:end="143:59">(<argument pos:start="143:55" pos:end="143:58"><expr pos:start="143:55" pos:end="143:58"><operator pos:start="143:55" pos:end="143:55">-</operator><name pos:start="143:56" pos:end="143:58">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="145:13" pos:end="145:22">goto <name pos:start="145:18" pos:end="145:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:51"><expr pos:start="151:9" pos:end="151:50"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <call pos:start="151:15" pos:end="151:50"><name pos:start="151:15" pos:end="151:27">convert_write</name><argument_list pos:start="151:28" pos:end="151:50">(<argument pos:start="151:29" pos:end="151:29"><expr pos:start="151:29" pos:end="151:29"><name pos:start="151:29" pos:end="151:29">s</name></expr></argument>, <argument pos:start="151:32" pos:end="151:41"><expr pos:start="151:32" pos:end="151:41"><name pos:start="151:32" pos:end="151:41">sector_num</name></expr></argument>, <argument pos:start="151:44" pos:end="151:44"><expr pos:start="151:44" pos:end="151:44"><name pos:start="151:44" pos:end="151:44">n</name></expr></argument>, <argument pos:start="151:47" pos:end="151:49"><expr pos:start="151:47" pos:end="151:49"><name pos:start="151:47" pos:end="151:49">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="153:9" pos:end="161:9"><if pos:start="153:9" pos:end="161:9">if <condition pos:start="153:12" pos:end="153:20">(<expr pos:start="153:13" pos:end="153:19"><name pos:start="153:13" pos:end="153:15">ret</name> <operator pos:start="153:17" pos:end="153:17">&lt;</operator> <literal type="number" pos:start="153:19" pos:end="153:19">0</literal></expr>)</condition> <block pos:start="153:22" pos:end="161:9">{<block_content pos:start="155:13" pos:end="159:22">

            <expr_stmt pos:start="155:13" pos:end="157:61"><expr pos:start="155:13" pos:end="157:60"><call pos:start="155:13" pos:end="157:60"><name pos:start="155:13" pos:end="155:24">error_report</name><argument_list pos:start="155:25" pos:end="157:60">(<argument pos:start="155:26" pos:end="157:31"><expr pos:start="155:26" pos:end="157:31"><literal type="string" pos:start="155:26" pos:end="155:55">"error while writing sector %"</literal> <name pos:start="155:57" pos:end="155:62">PRId64</name>

                         <literal type="string" pos:start="157:26" pos:end="157:31">": %s"</literal></expr></argument>, <argument pos:start="157:34" pos:end="157:43"><expr pos:start="157:34" pos:end="157:43"><name pos:start="157:34" pos:end="157:43">sector_num</name></expr></argument>, <argument pos:start="157:46" pos:end="157:59"><expr pos:start="157:46" pos:end="157:59"><call pos:start="157:46" pos:end="157:59"><name pos:start="157:46" pos:end="157:53">strerror</name><argument_list pos:start="157:54" pos:end="157:59">(<argument pos:start="157:55" pos:end="157:58"><expr pos:start="157:55" pos:end="157:58"><operator pos:start="157:55" pos:end="157:55">-</operator><name pos:start="157:56" pos:end="157:58">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="159:13" pos:end="159:22">goto <name pos:start="159:18" pos:end="159:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="165:9" pos:end="165:24"><expr pos:start="165:9" pos:end="165:23"><name pos:start="165:9" pos:end="165:18">sector_num</name> <operator pos:start="165:20" pos:end="165:21">+=</operator> <name pos:start="165:23" pos:end="165:23">n</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="171:5" pos:end="183:5"><if pos:start="171:5" pos:end="183:5">if <condition pos:start="171:8" pos:end="171:22">(<expr pos:start="171:9" pos:end="171:21"><name pos:start="171:9" pos:end="171:21"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:21">compressed</name></name></expr>)</condition> <block pos:start="171:24" pos:end="183:5">{<block_content pos:start="175:9" pos:end="181:9">

        <comment type="block" pos:start="173:9" pos:end="173:33">/* signal EOF to align */</comment>

        <expr_stmt pos:start="175:9" pos:end="175:58"><expr pos:start="175:9" pos:end="175:57"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="175:57"><name pos:start="175:15" pos:end="175:34">blk_write_compressed</name><argument_list pos:start="175:35" pos:end="175:57">(<argument pos:start="175:36" pos:end="175:44"><expr pos:start="175:36" pos:end="175:44"><name pos:start="175:36" pos:end="175:44"><name pos:start="175:36" pos:end="175:36">s</name><operator pos:start="175:37" pos:end="175:38">-&gt;</operator><name pos:start="175:39" pos:end="175:44">target</name></name></expr></argument>, <argument pos:start="175:47" pos:end="175:47"><expr pos:start="175:47" pos:end="175:47"><literal type="number" pos:start="175:47" pos:end="175:47">0</literal></expr></argument>, <argument pos:start="175:50" pos:end="175:53"><expr pos:start="175:50" pos:end="175:53"><name pos:start="175:50" pos:end="175:53">NULL</name></expr></argument>, <argument pos:start="175:56" pos:end="175:56"><expr pos:start="175:56" pos:end="175:56"><literal type="number" pos:start="175:56" pos:end="175:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="181:9"><if pos:start="177:9" pos:end="181:9">if <condition pos:start="177:12" pos:end="177:20">(<expr pos:start="177:13" pos:end="177:19"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">&lt;</operator> <literal type="number" pos:start="177:19" pos:end="177:19">0</literal></expr>)</condition> <block pos:start="177:22" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:22">

            <goto pos:start="179:13" pos:end="179:22">goto <name pos:start="179:18" pos:end="179:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:12"><expr pos:start="187:5" pos:end="187:11"><name pos:start="187:5" pos:end="187:7">ret</name> <operator pos:start="187:9" pos:end="187:9">=</operator> <literal type="number" pos:start="187:11" pos:end="187:11">0</literal></expr>;</expr_stmt>

<label pos:start="189:1" pos:end="189:5"><name pos:start="189:1" pos:end="189:4">fail</name>:</label>

    <expr_stmt pos:start="191:5" pos:end="191:20"><expr pos:start="191:5" pos:end="191:19"><call pos:start="191:5" pos:end="191:19"><name pos:start="191:5" pos:end="191:14">qemu_vfree</name><argument_list pos:start="191:15" pos:end="191:19">(<argument pos:start="191:16" pos:end="191:18"><expr pos:start="191:16" pos:end="191:18"><name pos:start="191:16" pos:end="191:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="193:5" pos:end="193:15">return <expr pos:start="193:12" pos:end="193:14"><name pos:start="193:12" pos:end="193:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
