<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13489.c" pos:tabs="8"><function pos:start="1:1" pos:end="229:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">cllc_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:67">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:49"><decl pos:start="3:30" pos:end="3:49"><type pos:start="3:30" pos:end="3:49"><name pos:start="3:30" pos:end="3:32">int</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:49">got_picture_ptr</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:66"><decl pos:start="3:52" pos:end="3:66"><type pos:start="3:52" pos:end="3:66"><name pos:start="3:52" pos:end="3:59">AVPacket</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:66">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="229:1">{<block_content pos:start="7:5" pos:end="227:23">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CLLCContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">ctx</name> <init pos:start="7:22" pos:end="7:39">= <expr pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:28">avctx</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">pic</name> <init pos:start="9:18" pos:end="9:23">= <expr pos:start="9:20" pos:end="9:23"><name pos:start="9:20" pos:end="9:23">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">src</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:21">info_tag</name></decl>, <decl pos:start="13:24" pos:end="13:34"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:24" pos:end="13:34">info_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">data_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:17">GetBitContext</name></type> <name pos:start="17:19" pos:end="17:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">coding_type</name></decl>, <decl pos:start="19:22" pos:end="19:24"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:22" pos:end="19:24">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:41">/* Skip the INFO header if present */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:20"><expr pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:15">info_offset</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:12">info_tag</name>    <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:30"><name pos:start="27:19" pos:end="27:25">AV_RL32</name><argument_list pos:start="27:26" pos:end="27:30">(<argument pos:start="27:27" pos:end="27:29"><expr pos:start="27:27" pos:end="27:29"><name pos:start="27:27" pos:end="27:29">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="55:5"><if pos:start="29:5" pos:end="55:5">if <condition pos:start="29:8" pos:end="29:46">(<expr pos:start="29:9" pos:end="29:45"><name pos:start="29:9" pos:end="29:16">info_tag</name> <operator pos:start="29:18" pos:end="29:19">==</operator> <call pos:start="29:21" pos:end="29:45"><name pos:start="29:21" pos:end="29:25">MKTAG</name><argument_list pos:start="29:26" pos:end="29:45">(<argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><literal type="char" pos:start="29:27" pos:end="29:29">'I'</literal></expr></argument>, <argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><literal type="char" pos:start="29:32" pos:end="29:34">'N'</literal></expr></argument>, <argument pos:start="29:37" pos:end="29:39"><expr pos:start="29:37" pos:end="29:39"><literal type="char" pos:start="29:37" pos:end="29:39">'F'</literal></expr></argument>, <argument pos:start="29:42" pos:end="29:44"><expr pos:start="29:42" pos:end="29:44"><literal type="char" pos:start="29:42" pos:end="29:44">'O'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:48" pos:end="55:5">{<block_content pos:start="31:9" pos:end="53:62">

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:19">info_offset</name> <operator pos:start="31:21" pos:end="31:21">=</operator> <call pos:start="31:23" pos:end="31:38"><name pos:start="31:23" pos:end="31:29">AV_RL32</name><argument_list pos:start="31:30" pos:end="31:38">(<argument pos:start="31:31" pos:end="31:37"><expr pos:start="31:31" pos:end="31:37"><name pos:start="31:31" pos:end="31:33">src</name> <operator pos:start="31:35" pos:end="31:35">+</operator> <literal type="number" pos:start="31:37" pos:end="31:37">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="43:9"><if pos:start="33:9" pos:end="43:9">if <condition pos:start="33:12" pos:end="33:74">(<expr pos:start="33:13" pos:end="33:73"><name pos:start="33:13" pos:end="33:23">info_offset</name> <operator pos:start="33:25" pos:end="33:25">&gt;</operator> <name pos:start="33:27" pos:end="33:36">UINT32_MAX</name> <operator pos:start="33:38" pos:end="33:38">-</operator> <literal type="number" pos:start="33:40" pos:end="33:40">8</literal> <operator pos:start="33:42" pos:end="33:43">||</operator> <name pos:start="33:45" pos:end="33:55">info_offset</name> <operator pos:start="33:57" pos:end="33:57">+</operator> <literal type="number" pos:start="33:59" pos:end="33:59">8</literal> <operator pos:start="33:61" pos:end="33:61">&gt;</operator> <name pos:start="33:63" pos:end="33:73"><name pos:start="33:63" pos:end="33:67">avpkt</name><operator pos:start="33:68" pos:end="33:69">-&gt;</operator><name pos:start="33:70" pos:end="33:73">size</name></name></expr>)</condition> <block pos:start="33:76" pos:end="43:9">{<block_content pos:start="35:13" pos:end="41:39">

            <expr_stmt pos:start="35:13" pos:end="39:32"><expr pos:start="35:13" pos:end="39:31"><call pos:start="35:13" pos:end="39:31"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="39:31">(<argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">avctx</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><name pos:start="35:27" pos:end="35:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="37:20" pos:end="37:78"><expr pos:start="37:20" pos:end="37:78"><literal type="string" pos:start="37:20" pos:end="37:54">"Invalid INFO header offset: 0x%08"</literal><name pos:start="37:55" pos:end="37:60">PRIX32</name><literal type="string" pos:start="37:61" pos:end="37:78">" is too large.\n"</literal></expr></argument>,

                   <argument pos:start="39:20" pos:end="39:30"><expr pos:start="39:20" pos:end="39:30"><name pos:start="39:20" pos:end="39:30">info_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:39">return <expr pos:start="41:20" pos:end="41:38"><name pos:start="41:20" pos:end="41:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:25"><expr pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:19">info_offset</name> <operator pos:start="47:21" pos:end="47:22">+=</operator> <literal type="number" pos:start="47:24" pos:end="47:24">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:35"><expr pos:start="49:9" pos:end="49:34"><name pos:start="49:9" pos:end="49:11">src</name>         <operator pos:start="49:21" pos:end="49:22">+=</operator> <name pos:start="49:24" pos:end="49:34">info_offset</name></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:62"><expr pos:start="53:9" pos:end="53:61"><call pos:start="53:9" pos:end="53:61"><name pos:start="53:9" pos:end="53:14">av_log</name><argument_list pos:start="53:15" pos:end="53:61">(<argument pos:start="53:16" pos:end="53:20"><expr pos:start="53:16" pos:end="53:20"><name pos:start="53:16" pos:end="53:20">avctx</name></expr></argument>, <argument pos:start="53:23" pos:end="53:34"><expr pos:start="53:23" pos:end="53:34"><name pos:start="53:23" pos:end="53:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="53:37" pos:end="53:60"><expr pos:start="53:37" pos:end="53:60"><literal type="string" pos:start="53:37" pos:end="53:60">"Skipping INFO chunk.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:49"><expr pos:start="59:5" pos:end="59:48"><name pos:start="59:5" pos:end="59:13">data_size</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <operator pos:start="59:17" pos:end="59:17">(</operator><name pos:start="59:18" pos:end="59:28"><name pos:start="59:18" pos:end="59:22">avpkt</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:28">size</name></name> <operator pos:start="59:30" pos:end="59:30">-</operator> <name pos:start="59:32" pos:end="59:42">info_offset</name><operator pos:start="59:43" pos:end="59:43">)</operator> <operator pos:start="59:45" pos:end="59:45">&amp;</operator> <operator pos:start="59:47" pos:end="59:47">~</operator><literal type="number" pos:start="59:48" pos:end="59:48">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:54">/* Make sure our bswap16'd buffer is big enough */</comment>

    <expr_stmt pos:start="65:5" pos:end="67:61"><expr pos:start="65:5" pos:end="67:60"><call pos:start="65:5" pos:end="67:60"><name pos:start="65:5" pos:end="65:25">av_fast_padded_malloc</name><argument_list pos:start="65:26" pos:end="67:60">(<argument pos:start="65:27" pos:end="65:43"><expr pos:start="65:27" pos:end="65:43"><operator pos:start="65:27" pos:end="65:27">&amp;</operator><name pos:start="65:28" pos:end="65:43"><name pos:start="65:28" pos:end="65:30">ctx</name><operator pos:start="65:31" pos:end="65:32">-&gt;</operator><name pos:start="65:33" pos:end="65:43">swapped_buf</name></name></expr></argument>,

                          <argument pos:start="67:27" pos:end="67:48"><expr pos:start="67:27" pos:end="67:48"><operator pos:start="67:27" pos:end="67:27">&amp;</operator><name pos:start="67:28" pos:end="67:48"><name pos:start="67:28" pos:end="67:30">ctx</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:48">swapped_buf_size</name></name></expr></argument>, <argument pos:start="67:51" pos:end="67:59"><expr pos:start="67:51" pos:end="67:59"><name pos:start="67:51" pos:end="67:59">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:26">(<expr pos:start="69:9" pos:end="69:25"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:25"><name pos:start="69:10" pos:end="69:12">ctx</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:25">swapped_buf</name></name></expr>)</condition> <block pos:start="69:28" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:31">

        <expr_stmt pos:start="71:9" pos:end="71:76"><expr pos:start="71:9" pos:end="71:75"><call pos:start="71:9" pos:end="71:75"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="71:75">(<argument pos:start="71:16" pos:end="71:20"><expr pos:start="71:16" pos:end="71:20"><name pos:start="71:16" pos:end="71:20">avctx</name></expr></argument>, <argument pos:start="71:23" pos:end="71:34"><expr pos:start="71:23" pos:end="71:34"><name pos:start="71:23" pos:end="71:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:37" pos:end="71:74"><expr pos:start="71:37" pos:end="71:74"><literal type="string" pos:start="71:37" pos:end="71:74">"Could not allocate swapped buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:31">return <expr pos:start="73:16" pos:end="73:30"><call pos:start="73:16" pos:end="73:30"><name pos:start="73:16" pos:end="73:22">AVERROR</name><argument_list pos:start="73:23" pos:end="73:30">(<argument pos:start="73:24" pos:end="73:29"><expr pos:start="73:24" pos:end="73:29"><name pos:start="73:24" pos:end="73:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:73">/* bswap16 the buffer since CLLC's bitreader works in 16-bit words */</comment>

    <expr_stmt pos:start="81:5" pos:end="83:41"><expr pos:start="81:5" pos:end="83:40"><call pos:start="81:5" pos:end="83:40"><name pos:start="81:5" pos:end="81:25"><name pos:start="81:5" pos:end="81:7">ctx</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:13">bdsp</name><operator pos:start="81:14" pos:end="81:14">.</operator><name pos:start="81:15" pos:end="81:25">bswap16_buf</name></name><argument_list pos:start="81:26" pos:end="83:40">(<argument pos:start="81:27" pos:end="81:55"><expr pos:start="81:27" pos:end="81:55"><operator pos:start="81:27" pos:end="81:27">(</operator><name pos:start="81:28" pos:end="81:35">uint16_t</name> <operator pos:start="81:37" pos:end="81:37">*</operator><operator pos:start="81:38" pos:end="81:38">)</operator> <name pos:start="81:40" pos:end="81:55"><name pos:start="81:40" pos:end="81:42">ctx</name><operator pos:start="81:43" pos:end="81:44">-&gt;</operator><name pos:start="81:45" pos:end="81:55">swapped_buf</name></name></expr></argument>, <argument pos:start="81:58" pos:end="81:73"><expr pos:start="81:58" pos:end="81:73"><operator pos:start="81:58" pos:end="81:58">(</operator><name pos:start="81:59" pos:end="81:66">uint16_t</name> <operator pos:start="81:68" pos:end="81:68">*</operator><operator pos:start="81:69" pos:end="81:69">)</operator> <name pos:start="81:71" pos:end="81:73">src</name></expr></argument>,

                          <argument pos:start="83:27" pos:end="83:39"><expr pos:start="83:27" pos:end="83:39"><name pos:start="83:27" pos:end="83:35">data_size</name> <operator pos:start="83:37" pos:end="83:37">/</operator> <literal type="number" pos:start="83:39" pos:end="83:39">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:56"><expr pos:start="87:5" pos:end="87:55"><call pos:start="87:5" pos:end="87:55"><name pos:start="87:5" pos:end="87:17">init_get_bits</name><argument_list pos:start="87:18" pos:end="87:55">(<argument pos:start="87:19" pos:end="87:21"><expr pos:start="87:19" pos:end="87:21"><operator pos:start="87:19" pos:end="87:19">&amp;</operator><name pos:start="87:20" pos:end="87:21">gb</name></expr></argument>, <argument pos:start="87:24" pos:end="87:39"><expr pos:start="87:24" pos:end="87:39"><name pos:start="87:24" pos:end="87:39"><name pos:start="87:24" pos:end="87:26">ctx</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:39">swapped_buf</name></name></expr></argument>, <argument pos:start="87:42" pos:end="87:54"><expr pos:start="87:42" pos:end="87:54"><name pos:start="87:42" pos:end="87:50">data_size</name> <operator pos:start="87:52" pos:end="87:52">*</operator> <literal type="number" pos:start="87:54" pos:end="87:54">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="105:7">/*

     * Read in coding type. The types are as follows:

     *

     * 0 - YUY2

     * 1 - BGR24 (Triples)

     * 2 - BGR24 (Quads)

     * 3 - BGRA

     */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:45"><expr pos:start="107:5" pos:end="107:44"><name pos:start="107:5" pos:end="107:15">coding_type</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <operator pos:start="107:19" pos:end="107:19">(</operator><call pos:start="107:20" pos:end="107:31"><name pos:start="107:20" pos:end="107:26">AV_RL32</name><argument_list pos:start="107:27" pos:end="107:31">(<argument pos:start="107:28" pos:end="107:30"><expr pos:start="107:28" pos:end="107:30"><name pos:start="107:28" pos:end="107:30">src</name></expr></argument>)</argument_list></call> <operator pos:start="107:33" pos:end="107:34">&gt;&gt;</operator> <literal type="number" pos:start="107:36" pos:end="107:36">8</literal><operator pos:start="107:37" pos:end="107:37">)</operator> <operator pos:start="107:39" pos:end="107:39">&amp;</operator> <literal type="number" pos:start="107:41" pos:end="107:44">0xFF</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:72"><expr pos:start="109:5" pos:end="109:71"><call pos:start="109:5" pos:end="109:71"><name pos:start="109:5" pos:end="109:10">av_log</name><argument_list pos:start="109:11" pos:end="109:71">(<argument pos:start="109:12" pos:end="109:16"><expr pos:start="109:12" pos:end="109:16"><name pos:start="109:12" pos:end="109:16">avctx</name></expr></argument>, <argument pos:start="109:19" pos:end="109:30"><expr pos:start="109:19" pos:end="109:30"><name pos:start="109:19" pos:end="109:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="109:33" pos:end="109:57"><expr pos:start="109:33" pos:end="109:57"><literal type="string" pos:start="109:33" pos:end="109:57">"Frame coding type: %d\n"</literal></expr></argument>, <argument pos:start="109:60" pos:end="109:70"><expr pos:start="109:60" pos:end="109:70"><name pos:start="109:60" pos:end="109:70">coding_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="113:5" pos:end="213:5">switch <condition pos:start="113:12" pos:end="113:24">(<expr pos:start="113:13" pos:end="113:23"><name pos:start="113:13" pos:end="113:23">coding_type</name></expr>)</condition> <block pos:start="113:26" pos:end="213:5">{<block_content pos:start="115:5" pos:end="211:35">

    <case pos:start="115:5" pos:end="115:11">case <expr pos:start="115:10" pos:end="115:10"><literal type="number" pos:start="115:10" pos:end="115:10">0</literal></expr>:</case>

        <expr_stmt pos:start="117:9" pos:end="117:56"><expr pos:start="117:9" pos:end="117:55"><name pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:13">avctx</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:22">pix_fmt</name></name>             <operator pos:start="117:36" pos:end="117:36">=</operator> <name pos:start="117:38" pos:end="117:55">AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:39"><expr pos:start="119:9" pos:end="119:38"><name pos:start="119:9" pos:end="119:34"><name pos:start="119:9" pos:end="119:13">avctx</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:34">bits_per_raw_sample</name></name> <operator pos:start="119:36" pos:end="119:36">=</operator> <literal type="number" pos:start="119:38" pos:end="119:38">8</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="123:9" pos:end="123:43"><expr pos:start="123:9" pos:end="123:42"><name pos:start="123:9" pos:end="123:11">ret</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <call pos:start="123:15" pos:end="123:42"><name pos:start="123:15" pos:end="123:27">ff_get_buffer</name><argument_list pos:start="123:28" pos:end="123:42">(<argument pos:start="123:29" pos:end="123:33"><expr pos:start="123:29" pos:end="123:33"><name pos:start="123:29" pos:end="123:33">avctx</name></expr></argument>, <argument pos:start="123:36" pos:end="123:38"><expr pos:start="123:36" pos:end="123:38"><name pos:start="123:36" pos:end="123:38">pic</name></expr></argument>, <argument pos:start="123:41" pos:end="123:41"><expr pos:start="123:41" pos:end="123:41"><literal type="number" pos:start="123:41" pos:end="123:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="125:9" pos:end="131:9"><if pos:start="125:9" pos:end="131:9">if <condition pos:start="125:12" pos:end="125:20">(<expr pos:start="125:13" pos:end="125:19"><name pos:start="125:13" pos:end="125:15">ret</name> <operator pos:start="125:17" pos:end="125:17">&lt;</operator> <literal type="number" pos:start="125:19" pos:end="125:19">0</literal></expr>)</condition> <block pos:start="125:22" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:23">

            <expr_stmt pos:start="127:13" pos:end="127:72"><expr pos:start="127:13" pos:end="127:71"><call pos:start="127:13" pos:end="127:71"><name pos:start="127:13" pos:end="127:18">av_log</name><argument_list pos:start="127:19" pos:end="127:71">(<argument pos:start="127:20" pos:end="127:24"><expr pos:start="127:20" pos:end="127:24"><name pos:start="127:20" pos:end="127:24">avctx</name></expr></argument>, <argument pos:start="127:27" pos:end="127:38"><expr pos:start="127:27" pos:end="127:38"><name pos:start="127:27" pos:end="127:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:41" pos:end="127:70"><expr pos:start="127:41" pos:end="127:70"><literal type="string" pos:start="127:41" pos:end="127:70">"Could not allocate buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="129:13" pos:end="129:23">return <expr pos:start="129:20" pos:end="129:22"><name pos:start="129:20" pos:end="129:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="135:9" pos:end="135:46"><expr pos:start="135:9" pos:end="135:45"><name pos:start="135:9" pos:end="135:11">ret</name> <operator pos:start="135:13" pos:end="135:13">=</operator> <call pos:start="135:15" pos:end="135:45"><name pos:start="135:15" pos:end="135:30">decode_yuv_frame</name><argument_list pos:start="135:31" pos:end="135:45">(<argument pos:start="135:32" pos:end="135:34"><expr pos:start="135:32" pos:end="135:34"><name pos:start="135:32" pos:end="135:34">ctx</name></expr></argument>, <argument pos:start="135:37" pos:end="135:39"><expr pos:start="135:37" pos:end="135:39"><operator pos:start="135:37" pos:end="135:37">&amp;</operator><name pos:start="135:38" pos:end="135:39">gb</name></expr></argument>, <argument pos:start="135:42" pos:end="135:44"><expr pos:start="135:42" pos:end="135:44"><name pos:start="135:42" pos:end="135:44">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="139:23"><if pos:start="137:9" pos:end="139:23">if <condition pos:start="137:12" pos:end="137:20">(<expr pos:start="137:13" pos:end="137:19"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">&lt;</operator> <literal type="number" pos:start="137:19" pos:end="137:19">0</literal></expr>)</condition><block type="pseudo" pos:start="139:13" pos:end="139:23"><block_content pos:start="139:13" pos:end="139:23">

            <return pos:start="139:13" pos:end="139:23">return <expr pos:start="139:20" pos:end="139:22"><name pos:start="139:20" pos:end="139:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <break pos:start="143:9" pos:end="143:14">break;</break>

    <case pos:start="145:5" pos:end="145:11">case <expr pos:start="145:10" pos:end="145:10"><literal type="number" pos:start="145:10" pos:end="145:10">1</literal></expr>:</case>

    <case pos:start="147:5" pos:end="147:11">case <expr pos:start="147:10" pos:end="147:10"><literal type="number" pos:start="147:10" pos:end="147:10">2</literal></expr>:</case>

        <expr_stmt pos:start="149:9" pos:end="149:54"><expr pos:start="149:9" pos:end="149:53"><name pos:start="149:9" pos:end="149:22"><name pos:start="149:9" pos:end="149:13">avctx</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:22">pix_fmt</name></name>             <operator pos:start="149:36" pos:end="149:36">=</operator> <name pos:start="149:38" pos:end="149:53">AV_PIX_FMT_RGB24</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:39"><expr pos:start="151:9" pos:end="151:38"><name pos:start="151:9" pos:end="151:34"><name pos:start="151:9" pos:end="151:13">avctx</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:34">bits_per_raw_sample</name></name> <operator pos:start="151:36" pos:end="151:36">=</operator> <literal type="number" pos:start="151:38" pos:end="151:38">8</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:43"><expr pos:start="155:9" pos:end="155:42"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <call pos:start="155:15" pos:end="155:42"><name pos:start="155:15" pos:end="155:27">ff_get_buffer</name><argument_list pos:start="155:28" pos:end="155:42">(<argument pos:start="155:29" pos:end="155:33"><expr pos:start="155:29" pos:end="155:33"><name pos:start="155:29" pos:end="155:33">avctx</name></expr></argument>, <argument pos:start="155:36" pos:end="155:38"><expr pos:start="155:36" pos:end="155:38"><name pos:start="155:36" pos:end="155:38">pic</name></expr></argument>, <argument pos:start="155:41" pos:end="155:41"><expr pos:start="155:41" pos:end="155:41"><literal type="number" pos:start="155:41" pos:end="155:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="163:9"><if pos:start="157:9" pos:end="163:9">if <condition pos:start="157:12" pos:end="157:20">(<expr pos:start="157:13" pos:end="157:19"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">&lt;</operator> <literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>)</condition> <block pos:start="157:22" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:23">

            <expr_stmt pos:start="159:13" pos:end="159:72"><expr pos:start="159:13" pos:end="159:71"><call pos:start="159:13" pos:end="159:71"><name pos:start="159:13" pos:end="159:18">av_log</name><argument_list pos:start="159:19" pos:end="159:71">(<argument pos:start="159:20" pos:end="159:24"><expr pos:start="159:20" pos:end="159:24"><name pos:start="159:20" pos:end="159:24">avctx</name></expr></argument>, <argument pos:start="159:27" pos:end="159:38"><expr pos:start="159:27" pos:end="159:38"><name pos:start="159:27" pos:end="159:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="159:41" pos:end="159:70"><expr pos:start="159:41" pos:end="159:70"><literal type="string" pos:start="159:41" pos:end="159:70">"Could not allocate buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="161:13" pos:end="161:23">return <expr pos:start="161:20" pos:end="161:22"><name pos:start="161:20" pos:end="161:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="167:9" pos:end="167:48"><expr pos:start="167:9" pos:end="167:47"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <call pos:start="167:15" pos:end="167:47"><name pos:start="167:15" pos:end="167:32">decode_rgb24_frame</name><argument_list pos:start="167:33" pos:end="167:47">(<argument pos:start="167:34" pos:end="167:36"><expr pos:start="167:34" pos:end="167:36"><name pos:start="167:34" pos:end="167:36">ctx</name></expr></argument>, <argument pos:start="167:39" pos:end="167:41"><expr pos:start="167:39" pos:end="167:41"><operator pos:start="167:39" pos:end="167:39">&amp;</operator><name pos:start="167:40" pos:end="167:41">gb</name></expr></argument>, <argument pos:start="167:44" pos:end="167:46"><expr pos:start="167:44" pos:end="167:46"><name pos:start="167:44" pos:end="167:46">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="171:23"><if pos:start="169:9" pos:end="171:23">if <condition pos:start="169:12" pos:end="169:20">(<expr pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">&lt;</operator> <literal type="number" pos:start="169:19" pos:end="169:19">0</literal></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:23"><block_content pos:start="171:13" pos:end="171:23">

            <return pos:start="171:13" pos:end="171:23">return <expr pos:start="171:20" pos:end="171:22"><name pos:start="171:20" pos:end="171:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <break pos:start="175:9" pos:end="175:14">break;</break>

    <case pos:start="177:5" pos:end="177:11">case <expr pos:start="177:10" pos:end="177:10"><literal type="number" pos:start="177:10" pos:end="177:10">3</literal></expr>:</case>

        <expr_stmt pos:start="179:9" pos:end="179:53"><expr pos:start="179:9" pos:end="179:52"><name pos:start="179:9" pos:end="179:22"><name pos:start="179:9" pos:end="179:13">avctx</name><operator pos:start="179:14" pos:end="179:15">-&gt;</operator><name pos:start="179:16" pos:end="179:22">pix_fmt</name></name>             <operator pos:start="179:36" pos:end="179:36">=</operator> <name pos:start="179:38" pos:end="179:52">AV_PIX_FMT_ARGB</name></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:39"><expr pos:start="181:9" pos:end="181:38"><name pos:start="181:9" pos:end="181:34"><name pos:start="181:9" pos:end="181:13">avctx</name><operator pos:start="181:14" pos:end="181:15">-&gt;</operator><name pos:start="181:16" pos:end="181:34">bits_per_raw_sample</name></name> <operator pos:start="181:36" pos:end="181:36">=</operator> <literal type="number" pos:start="181:38" pos:end="181:38">8</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="185:9" pos:end="185:43"><expr pos:start="185:9" pos:end="185:42"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <call pos:start="185:15" pos:end="185:42"><name pos:start="185:15" pos:end="185:27">ff_get_buffer</name><argument_list pos:start="185:28" pos:end="185:42">(<argument pos:start="185:29" pos:end="185:33"><expr pos:start="185:29" pos:end="185:33"><name pos:start="185:29" pos:end="185:33">avctx</name></expr></argument>, <argument pos:start="185:36" pos:end="185:38"><expr pos:start="185:36" pos:end="185:38"><name pos:start="185:36" pos:end="185:38">pic</name></expr></argument>, <argument pos:start="185:41" pos:end="185:41"><expr pos:start="185:41" pos:end="185:41"><literal type="number" pos:start="185:41" pos:end="185:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="187:9" pos:end="193:9"><if pos:start="187:9" pos:end="193:9">if <condition pos:start="187:12" pos:end="187:20">(<expr pos:start="187:13" pos:end="187:19"><name pos:start="187:13" pos:end="187:15">ret</name> <operator pos:start="187:17" pos:end="187:17">&lt;</operator> <literal type="number" pos:start="187:19" pos:end="187:19">0</literal></expr>)</condition> <block pos:start="187:22" pos:end="193:9">{<block_content pos:start="189:13" pos:end="191:23">

            <expr_stmt pos:start="189:13" pos:end="189:72"><expr pos:start="189:13" pos:end="189:71"><call pos:start="189:13" pos:end="189:71"><name pos:start="189:13" pos:end="189:18">av_log</name><argument_list pos:start="189:19" pos:end="189:71">(<argument pos:start="189:20" pos:end="189:24"><expr pos:start="189:20" pos:end="189:24"><name pos:start="189:20" pos:end="189:24">avctx</name></expr></argument>, <argument pos:start="189:27" pos:end="189:38"><expr pos:start="189:27" pos:end="189:38"><name pos:start="189:27" pos:end="189:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="189:41" pos:end="189:70"><expr pos:start="189:41" pos:end="189:70"><literal type="string" pos:start="189:41" pos:end="189:70">"Could not allocate buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="191:13" pos:end="191:23">return <expr pos:start="191:20" pos:end="191:22"><name pos:start="191:20" pos:end="191:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:47"><expr pos:start="197:9" pos:end="197:46"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <call pos:start="197:15" pos:end="197:46"><name pos:start="197:15" pos:end="197:31">decode_argb_frame</name><argument_list pos:start="197:32" pos:end="197:46">(<argument pos:start="197:33" pos:end="197:35"><expr pos:start="197:33" pos:end="197:35"><name pos:start="197:33" pos:end="197:35">ctx</name></expr></argument>, <argument pos:start="197:38" pos:end="197:40"><expr pos:start="197:38" pos:end="197:40"><operator pos:start="197:38" pos:end="197:38">&amp;</operator><name pos:start="197:39" pos:end="197:40">gb</name></expr></argument>, <argument pos:start="197:43" pos:end="197:45"><expr pos:start="197:43" pos:end="197:45"><name pos:start="197:43" pos:end="197:45">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="201:23"><if pos:start="199:9" pos:end="201:23">if <condition pos:start="199:12" pos:end="199:20">(<expr pos:start="199:13" pos:end="199:19"><name pos:start="199:13" pos:end="199:15">ret</name> <operator pos:start="199:17" pos:end="199:17">&lt;</operator> <literal type="number" pos:start="199:19" pos:end="199:19">0</literal></expr>)</condition><block type="pseudo" pos:start="201:13" pos:end="201:23"><block_content pos:start="201:13" pos:end="201:23">

            <return pos:start="201:13" pos:end="201:23">return <expr pos:start="201:20" pos:end="201:22"><name pos:start="201:20" pos:end="201:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <break pos:start="205:9" pos:end="205:14">break;</break>

    <default pos:start="207:5" pos:end="207:12">default:</default>

        <expr_stmt pos:start="209:9" pos:end="209:79"><expr pos:start="209:9" pos:end="209:78"><call pos:start="209:9" pos:end="209:78"><name pos:start="209:9" pos:end="209:14">av_log</name><argument_list pos:start="209:15" pos:end="209:78">(<argument pos:start="209:16" pos:end="209:20"><expr pos:start="209:16" pos:end="209:20"><name pos:start="209:16" pos:end="209:20">avctx</name></expr></argument>, <argument pos:start="209:23" pos:end="209:34"><expr pos:start="209:23" pos:end="209:34"><name pos:start="209:23" pos:end="209:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="209:37" pos:end="209:64"><expr pos:start="209:37" pos:end="209:64"><literal type="string" pos:start="209:37" pos:end="209:64">"Unknown coding type: %d.\n"</literal></expr></argument>, <argument pos:start="209:67" pos:end="209:77"><expr pos:start="209:67" pos:end="209:77"><name pos:start="209:67" pos:end="209:77">coding_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="211:9" pos:end="211:35">return <expr pos:start="211:16" pos:end="211:34"><name pos:start="211:16" pos:end="211:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="217:5" pos:end="217:23"><expr pos:start="217:5" pos:end="217:22"><name pos:start="217:5" pos:end="217:18"><name pos:start="217:5" pos:end="217:7">pic</name><operator pos:start="217:8" pos:end="217:9">-&gt;</operator><name pos:start="217:10" pos:end="217:18">key_frame</name></name> <operator pos:start="217:20" pos:end="217:20">=</operator> <literal type="number" pos:start="217:22" pos:end="217:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:39"><expr pos:start="219:5" pos:end="219:38"><name pos:start="219:5" pos:end="219:18"><name pos:start="219:5" pos:end="219:7">pic</name><operator pos:start="219:8" pos:end="219:9">-&gt;</operator><name pos:start="219:10" pos:end="219:18">pict_type</name></name> <operator pos:start="219:20" pos:end="219:20">=</operator> <name pos:start="219:22" pos:end="219:38">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:25"><expr pos:start="223:5" pos:end="223:24"><operator pos:start="223:5" pos:end="223:5">*</operator><name pos:start="223:6" pos:end="223:20">got_picture_ptr</name> <operator pos:start="223:22" pos:end="223:22">=</operator> <literal type="number" pos:start="223:24" pos:end="223:24">1</literal></expr>;</expr_stmt>



    <return pos:start="227:5" pos:end="227:23">return <expr pos:start="227:12" pos:end="227:22"><name pos:start="227:12" pos:end="227:22"><name pos:start="227:12" pos:end="227:16">avpkt</name><operator pos:start="227:17" pos:end="227:18">-&gt;</operator><name pos:start="227:19" pos:end="227:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
