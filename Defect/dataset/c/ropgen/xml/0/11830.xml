<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11830.c" pos:tabs="8"><function pos:start="1:1" pos:end="457:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">machvirt_init</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:40"><name pos:start="1:27" pos:end="1:38">MachineState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:47">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="457:1">{<block_content pos:start="5:5" pos:end="455:34">

    <decl_stmt pos:start="5:5" pos:end="5:50"><decl pos:start="5:5" pos:end="5:49"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">VirtMachineState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:25">vms</name> <init pos:start="5:27" pos:end="5:49">= <expr pos:start="5:29" pos:end="5:49"><call pos:start="5:29" pos:end="5:49"><name pos:start="5:29" pos:end="5:40">VIRT_MACHINE</name><argument_list pos:start="5:41" pos:end="5:49">(<argument pos:start="5:42" pos:end="5:48"><expr pos:start="5:42" pos:end="5:48"><name pos:start="5:42" pos:end="5:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:60"><decl pos:start="7:5" pos:end="7:59"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">VirtMachineClass</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:25">vmc</name> <init pos:start="7:27" pos:end="7:59">= <expr pos:start="7:29" pos:end="7:59"><call pos:start="7:29" pos:end="7:59"><name pos:start="7:29" pos:end="7:50">VIRT_MACHINE_GET_CLASS</name><argument_list pos:start="7:51" pos:end="7:59">(<argument pos:start="7:52" pos:end="7:58"><expr pos:start="7:52" pos:end="7:58"><name pos:start="7:52" pos:end="7:58">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">qemu_irq</name></type> <name pos:start="9:14" pos:end="9:26"><name pos:start="9:14" pos:end="9:16">pic</name><index pos:start="9:17" pos:end="9:26">[<expr pos:start="9:18" pos:end="9:25"><name pos:start="9:18" pos:end="9:25">NUM_IRQS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:46"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:24">sysmem</name> <init pos:start="11:26" pos:end="11:46">= <expr pos:start="11:28" pos:end="11:46"><call pos:start="11:28" pos:end="11:46"><name pos:start="11:28" pos:end="11:44">get_system_memory</name><argument_list pos:start="11:45" pos:end="11:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:38"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:31">secure_sysmem</name> <init pos:start="13:33" pos:end="13:38">= <expr pos:start="13:35" pos:end="13:38"><name pos:start="13:35" pos:end="13:38">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">n</name></decl>, <decl pos:start="15:12" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:24">virt_max_cpus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:21">ram</name> <init pos:start="17:23" pos:end="17:46">= <expr pos:start="17:25" pos:end="17:46"><call pos:start="17:25" pos:end="17:46"><name pos:start="17:25" pos:end="17:29">g_new</name><argument_list pos:start="17:30" pos:end="17:46">(<argument pos:start="17:31" pos:end="17:42"><expr pos:start="17:31" pos:end="17:42"><name pos:start="17:31" pos:end="17:42">MemoryRegion</name></expr></argument>, <argument pos:start="17:45" pos:end="17:45"><expr pos:start="17:45" pos:end="17:45"><literal type="number" pos:start="17:45" pos:end="17:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:25">cpu_model</name> <init pos:start="19:27" pos:end="19:46">= <expr pos:start="19:29" pos:end="19:46"><name pos:start="19:29" pos:end="19:46"><name pos:start="19:29" pos:end="19:35">machine</name><operator pos:start="19:36" pos:end="19:37">-&gt;</operator><name pos:start="19:38" pos:end="19:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier><modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:17">cpustr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">ObjectClass</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:19">oc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:16"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:14">char</name> <modifier pos:start="25:16" pos:end="25:16">*</modifier></type><name pos:start="25:17" pos:end="25:24">typename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:17"><decl pos:start="27:5" pos:end="27:16"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">CPUClass</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:16">cc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:22"><decl pos:start="29:5" pos:end="29:21"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:9">Error</name> <modifier pos:start="29:11" pos:end="29:11">*</modifier></type><name pos:start="29:12" pos:end="29:14">err</name> <init pos:start="29:16" pos:end="29:21">= <expr pos:start="29:18" pos:end="29:21"><name pos:start="29:18" pos:end="29:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:67"><decl pos:start="31:5" pos:end="31:66"><type pos:start="31:5" pos:end="31:8"><name pos:start="31:5" pos:end="31:8">bool</name></type> <name pos:start="31:10" pos:end="31:24">firmware_loaded</name> <init pos:start="31:26" pos:end="31:66">= <expr pos:start="31:28" pos:end="31:66"><name pos:start="31:28" pos:end="31:36">bios_name</name> <operator pos:start="31:38" pos:end="31:39">||</operator> <call pos:start="31:41" pos:end="31:66"><name pos:start="31:41" pos:end="31:49">drive_get</name><argument_list pos:start="31:50" pos:end="31:66">(<argument pos:start="31:51" pos:end="31:59"><expr pos:start="31:51" pos:end="31:59"><name pos:start="31:51" pos:end="31:59">IF_PFLASH</name></expr></argument>, <argument pos:start="31:62" pos:end="31:62"><expr pos:start="31:62" pos:end="31:62"><literal type="number" pos:start="31:62" pos:end="31:62">0</literal></expr></argument>, <argument pos:start="31:65" pos:end="31:65"><expr pos:start="31:65" pos:end="31:65"><literal type="number" pos:start="31:65" pos:end="31:65">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:19">(<expr pos:start="35:9" pos:end="35:18"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:18">cpu_model</name></expr>)</condition> <block pos:start="35:21" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:33">

        <expr_stmt pos:start="37:9" pos:end="37:33"><expr pos:start="37:9" pos:end="37:32"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="string" pos:start="37:21" pos:end="37:32">"cortex-a15"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="47:7">/* We can probe only here because during property set

     * KVM is not available yet

     */</comment>

    <if_stmt pos:start="49:5" pos:end="71:5"><if pos:start="49:5" pos:end="71:5">if <condition pos:start="49:8" pos:end="49:26">(<expr pos:start="49:9" pos:end="49:25"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:25"><name pos:start="49:10" pos:end="49:12">vms</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:25">gic_version</name></name></expr>)</condition> <block pos:start="49:28" pos:end="71:5">{<block_content pos:start="51:9" pos:end="69:9">

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:27">(<expr pos:start="51:13" pos:end="51:26"><operator pos:start="51:13" pos:end="51:13">!</operator><call pos:start="51:14" pos:end="51:26"><name pos:start="51:14" pos:end="51:24">kvm_enabled</name><argument_list pos:start="51:25" pos:end="51:26">()</argument_list></call></expr>)</condition> <block pos:start="51:29" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:20">

            <expr_stmt pos:start="53:13" pos:end="53:58"><expr pos:start="53:13" pos:end="53:57"><call pos:start="53:13" pos:end="53:57"><name pos:start="53:13" pos:end="53:24">error_report</name><argument_list pos:start="53:25" pos:end="53:57">(<argument pos:start="53:26" pos:end="53:56"><expr pos:start="53:26" pos:end="53:56"><literal type="string" pos:start="53:26" pos:end="53:56">"gic-version=host requires KVM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:20"><expr pos:start="55:13" pos:end="55:19"><call pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:16">exit</name><argument_list pos:start="55:17" pos:end="55:19">(<argument pos:start="55:18" pos:end="55:18"><expr pos:start="55:18" pos:end="55:18"><literal type="number" pos:start="55:18" pos:end="55:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:48"><expr pos:start="61:9" pos:end="61:47"><name pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:11">vms</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:24">gic_version</name></name> <operator pos:start="61:26" pos:end="61:26">=</operator> <call pos:start="61:28" pos:end="61:47"><name pos:start="61:28" pos:end="61:45">kvm_arm_vgic_probe</name><argument_list pos:start="61:46" pos:end="61:47">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:30">(<expr pos:start="63:13" pos:end="63:29"><operator pos:start="63:13" pos:end="63:13">!</operator><name pos:start="63:14" pos:end="63:29"><name pos:start="63:14" pos:end="63:16">vms</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:29">gic_version</name></name></expr>)</condition> <block pos:start="63:32" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:20">

            <expr_stmt pos:start="65:13" pos:end="65:78"><expr pos:start="65:13" pos:end="65:77"><call pos:start="65:13" pos:end="65:77"><name pos:start="65:13" pos:end="65:24">error_report</name><argument_list pos:start="65:25" pos:end="65:77">(<argument pos:start="65:26" pos:end="65:76"><expr pos:start="65:26" pos:end="65:76"><literal type="string" pos:start="65:26" pos:end="65:76">"Unable to determine GIC version supported by host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:20"><expr pos:start="67:13" pos:end="67:19"><call pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:16">exit</name><argument_list pos:start="67:17" pos:end="67:19">(<argument pos:start="67:18" pos:end="67:18"><expr pos:start="67:18" pos:end="67:18"><literal type="number" pos:start="67:18" pos:end="67:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:71">/* Separate the actual CPU model name from any appended features */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:43"><expr pos:start="77:5" pos:end="77:42"><name pos:start="77:5" pos:end="77:10">cpustr</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <call pos:start="77:14" pos:end="77:42"><name pos:start="77:14" pos:end="77:23">g_strsplit</name><argument_list pos:start="77:24" pos:end="77:42">(<argument pos:start="77:25" pos:end="77:33"><expr pos:start="77:25" pos:end="77:33"><name pos:start="77:25" pos:end="77:33">cpu_model</name></expr></argument>, <argument pos:start="77:36" pos:end="77:38"><expr pos:start="77:36" pos:end="77:38"><literal type="string" pos:start="77:36" pos:end="77:38">","</literal></expr></argument>, <argument pos:start="77:41" pos:end="77:41"><expr pos:start="77:41" pos:end="77:41"><literal type="number" pos:start="77:41" pos:end="77:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:34">(<expr pos:start="81:9" pos:end="81:33"><operator pos:start="81:9" pos:end="81:9">!</operator><call pos:start="81:10" pos:end="81:33"><name pos:start="81:10" pos:end="81:22">cpuname_valid</name><argument_list pos:start="81:23" pos:end="81:33">(<argument pos:start="81:24" pos:end="81:32"><expr pos:start="81:24" pos:end="81:32"><name pos:start="81:24" pos:end="81:32"><name pos:start="81:24" pos:end="81:29">cpustr</name><index pos:start="81:30" pos:end="81:32">[<expr pos:start="81:31" pos:end="81:31"><literal type="number" pos:start="81:31" pos:end="81:31">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="81:36" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:16">

        <expr_stmt pos:start="83:9" pos:end="83:67"><expr pos:start="83:9" pos:end="83:66"><call pos:start="83:9" pos:end="83:66"><name pos:start="83:9" pos:end="83:20">error_report</name><argument_list pos:start="83:21" pos:end="83:66">(<argument pos:start="83:22" pos:end="83:54"><expr pos:start="83:22" pos:end="83:54"><literal type="string" pos:start="83:22" pos:end="83:54">"mach-virt: CPU %s not supported"</literal></expr></argument>, <argument pos:start="83:57" pos:end="83:65"><expr pos:start="83:57" pos:end="83:65"><name pos:start="83:57" pos:end="83:65"><name pos:start="83:57" pos:end="83:62">cpustr</name><index pos:start="83:63" pos:end="83:65">[<expr pos:start="83:64" pos:end="83:64"><literal type="number" pos:start="83:64" pos:end="83:64">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:16"><expr pos:start="85:9" pos:end="85:15"><call pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:12">exit</name><argument_list pos:start="85:13" pos:end="85:15">(<argument pos:start="85:14" pos:end="85:14"><expr pos:start="85:14" pos:end="85:14"><literal type="number" pos:start="85:14" pos:end="85:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="109:7">/* If we have an EL3 boot ROM then the assumption is that it will

     * implement PSCI itself, so disable QEMU's internal implementation

     * so it doesn't get in the way. Instead of starting secondary

     * CPUs in PSCI powerdown state we will start them all running and

     * let the boot ROM sort them out.

     * The usual case is that we do use QEMU's PSCI implementation;

     * if the guest has EL2 then we will use SMC as the conduit,

     * and otherwise we will use HVC (for backwards compatibility and

     * because if we're using KVM then we must use HVC).

     */</comment>

    <if_stmt pos:start="111:5" pos:end="123:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:39">(<expr pos:start="111:9" pos:end="111:38"><name pos:start="111:9" pos:end="111:19"><name pos:start="111:9" pos:end="111:11">vms</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:19">secure</name></name> <operator pos:start="111:21" pos:end="111:22">&amp;&amp;</operator> <name pos:start="111:24" pos:end="111:38">firmware_loaded</name></expr>)</condition> <block pos:start="111:41" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:55">

        <expr_stmt pos:start="113:9" pos:end="113:55"><expr pos:start="113:9" pos:end="113:54"><name pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:11">vms</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:25">psci_conduit</name></name> <operator pos:start="113:27" pos:end="113:27">=</operator> <name pos:start="113:29" pos:end="113:54">QEMU_PSCI_CONDUIT_DISABLED</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="115:7" pos:end="119:5">else if <condition pos:start="115:15" pos:end="115:25">(<expr pos:start="115:16" pos:end="115:24"><name pos:start="115:16" pos:end="115:24"><name pos:start="115:16" pos:end="115:18">vms</name><operator pos:start="115:19" pos:end="115:20">-&gt;</operator><name pos:start="115:21" pos:end="115:24">virt</name></name></expr>)</condition> <block pos:start="115:27" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:50">

        <expr_stmt pos:start="117:9" pos:end="117:50"><expr pos:start="117:9" pos:end="117:49"><name pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:11">vms</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:25">psci_conduit</name></name> <operator pos:start="117:27" pos:end="117:27">=</operator> <name pos:start="117:29" pos:end="117:49">QEMU_PSCI_CONDUIT_SMC</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="119:7" pos:end="123:5">else <block pos:start="119:12" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:50">

        <expr_stmt pos:start="121:9" pos:end="121:50"><expr pos:start="121:9" pos:end="121:49"><name pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:11">vms</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:25">psci_conduit</name></name> <operator pos:start="121:27" pos:end="121:27">=</operator> <name pos:start="121:29" pos:end="121:49">QEMU_PSCI_CONDUIT_HVC</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="127:5" pos:end="131:7">/* The maximum number of CPUs depends on the GIC version, or on how

     * many redistributors we can fit into the memory map.

     */</comment>

    <if_stmt pos:start="133:5" pos:end="141:5"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:30">(<expr pos:start="133:9" pos:end="133:29"><name pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:11">vms</name><operator pos:start="133:12" pos:end="133:13">-&gt;</operator><name pos:start="133:14" pos:end="133:24">gic_version</name></name> <operator pos:start="133:26" pos:end="133:27">==</operator> <literal type="number" pos:start="133:29" pos:end="133:29">3</literal></expr>)</condition> <block pos:start="133:32" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:68">

        <expr_stmt pos:start="135:9" pos:end="135:68"><expr pos:start="135:9" pos:end="135:67"><name pos:start="135:9" pos:end="135:21">virt_max_cpus</name> <operator pos:start="135:23" pos:end="135:23">=</operator> <name pos:start="135:25" pos:end="135:52"><name pos:start="135:25" pos:end="135:27">vms</name><operator pos:start="135:28" pos:end="135:29">-&gt;</operator><name pos:start="135:30" pos:end="135:35">memmap</name><index pos:start="135:36" pos:end="135:52">[<expr pos:start="135:37" pos:end="135:51"><name pos:start="135:37" pos:end="135:51">VIRT_GIC_REDIST</name></expr>]</index></name><operator pos:start="135:53" pos:end="135:53">.</operator><name pos:start="135:54" pos:end="135:57">size</name> <operator pos:start="135:59" pos:end="135:59">/</operator> <literal type="number" pos:start="135:61" pos:end="135:67">0x20000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="137:7" pos:end="141:5">else <block pos:start="137:12" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:33">

        <expr_stmt pos:start="139:9" pos:end="139:33"><expr pos:start="139:9" pos:end="139:32"><name pos:start="139:9" pos:end="139:21">virt_max_cpus</name> <operator pos:start="139:23" pos:end="139:23">=</operator> <name pos:start="139:25" pos:end="139:32">GIC_NCPU</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="145:5" pos:end="155:5"><if pos:start="145:5" pos:end="155:5">if <condition pos:start="145:8" pos:end="145:33">(<expr pos:start="145:9" pos:end="145:32"><name pos:start="145:9" pos:end="145:16">max_cpus</name> <operator pos:start="145:18" pos:end="145:18">&gt;</operator> <name pos:start="145:20" pos:end="145:32">virt_max_cpus</name></expr>)</condition> <block pos:start="145:35" pos:end="155:5">{<block_content pos:start="147:9" pos:end="153:16">

        <expr_stmt pos:start="147:9" pos:end="151:46"><expr pos:start="147:9" pos:end="151:45"><call pos:start="147:9" pos:end="151:45"><name pos:start="147:9" pos:end="147:20">error_report</name><argument_list pos:start="147:21" pos:end="151:45">(<argument pos:start="147:22" pos:end="149:60"><expr pos:start="147:22" pos:end="149:60"><literal type="string" pos:start="147:22" pos:end="147:74">"Number of SMP CPUs requested (%d) exceeds max CPUs "</literal>

                     <literal type="string" pos:start="149:22" pos:end="149:60">"supported by machine 'mach-virt' (%d)"</literal></expr></argument>,

                     <argument pos:start="151:22" pos:end="151:29"><expr pos:start="151:22" pos:end="151:29"><name pos:start="151:22" pos:end="151:29">max_cpus</name></expr></argument>, <argument pos:start="151:32" pos:end="151:44"><expr pos:start="151:32" pos:end="151:44"><name pos:start="151:32" pos:end="151:44">virt_max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:16"><expr pos:start="153:9" pos:end="153:15"><call pos:start="153:9" pos:end="153:15"><name pos:start="153:9" pos:end="153:12">exit</name><argument_list pos:start="153:13" pos:end="153:15">(<argument pos:start="153:14" pos:end="153:14"><expr pos:start="153:14" pos:end="153:14"><literal type="number" pos:start="153:14" pos:end="153:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:29"><expr pos:start="159:5" pos:end="159:28"><name pos:start="159:5" pos:end="159:17"><name pos:start="159:5" pos:end="159:7">vms</name><operator pos:start="159:8" pos:end="159:9">-&gt;</operator><name pos:start="159:10" pos:end="159:17">smp_cpus</name></name> <operator pos:start="159:19" pos:end="159:19">=</operator> <name pos:start="159:21" pos:end="159:28">smp_cpus</name></expr>;</expr_stmt>



    <if_stmt pos:start="163:5" pos:end="169:5"><if pos:start="163:5" pos:end="169:5">if <condition pos:start="163:8" pos:end="163:55">(<expr pos:start="163:9" pos:end="163:54"><name pos:start="163:9" pos:end="163:25"><name pos:start="163:9" pos:end="163:15">machine</name><operator pos:start="163:16" pos:end="163:17">-&gt;</operator><name pos:start="163:18" pos:end="163:25">ram_size</name></name> <operator pos:start="163:27" pos:end="163:27">&gt;</operator> <name pos:start="163:29" pos:end="163:49"><name pos:start="163:29" pos:end="163:31">vms</name><operator pos:start="163:32" pos:end="163:33">-&gt;</operator><name pos:start="163:34" pos:end="163:39">memmap</name><index pos:start="163:40" pos:end="163:49">[<expr pos:start="163:41" pos:end="163:48"><name pos:start="163:41" pos:end="163:48">VIRT_MEM</name></expr>]</index></name><operator pos:start="163:50" pos:end="163:50">.</operator><name pos:start="163:51" pos:end="163:54">size</name></expr>)</condition> <block pos:start="163:57" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:16">

        <expr_stmt pos:start="165:9" pos:end="165:80"><expr pos:start="165:9" pos:end="165:79"><call pos:start="165:9" pos:end="165:79"><name pos:start="165:9" pos:end="165:20">error_report</name><argument_list pos:start="165:21" pos:end="165:79">(<argument pos:start="165:22" pos:end="165:65"><expr pos:start="165:22" pos:end="165:65"><literal type="string" pos:start="165:22" pos:end="165:65">"mach-virt: cannot model more than %dGB RAM"</literal></expr></argument>, <argument pos:start="165:68" pos:end="165:78"><expr pos:start="165:68" pos:end="165:78"><name pos:start="165:68" pos:end="165:78">RAMLIMIT_GB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:16"><expr pos:start="167:9" pos:end="167:15"><call pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:12">exit</name><argument_list pos:start="167:13" pos:end="167:15">(<argument pos:start="167:14" pos:end="167:14"><expr pos:start="167:14" pos:end="167:14"><literal type="number" pos:start="167:14" pos:end="167:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="173:5" pos:end="181:5"><if pos:start="173:5" pos:end="181:5">if <condition pos:start="173:8" pos:end="173:35">(<expr pos:start="173:9" pos:end="173:34"><name pos:start="173:9" pos:end="173:17"><name pos:start="173:9" pos:end="173:11">vms</name><operator pos:start="173:12" pos:end="173:13">-&gt;</operator><name pos:start="173:14" pos:end="173:17">virt</name></name> <operator pos:start="173:19" pos:end="173:20">&amp;&amp;</operator> <call pos:start="173:22" pos:end="173:34"><name pos:start="173:22" pos:end="173:32">kvm_enabled</name><argument_list pos:start="173:33" pos:end="173:34">()</argument_list></call></expr>)</condition> <block pos:start="173:37" pos:end="181:5">{<block_content pos:start="175:9" pos:end="179:16">

        <expr_stmt pos:start="175:9" pos:end="177:67"><expr pos:start="175:9" pos:end="177:66"><call pos:start="175:9" pos:end="177:66"><name pos:start="175:9" pos:end="175:20">error_report</name><argument_list pos:start="175:21" pos:end="177:66">(<argument pos:start="175:22" pos:end="177:65"><expr pos:start="175:22" pos:end="177:65"><literal type="string" pos:start="175:22" pos:end="175:65">"mach-virt: KVM does not support providing "</literal>

                     <literal type="string" pos:start="177:22" pos:end="177:65">"Virtualization extensions to the guest CPU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:16"><expr pos:start="179:9" pos:end="179:15"><call pos:start="179:9" pos:end="179:15"><name pos:start="179:9" pos:end="179:12">exit</name><argument_list pos:start="179:13" pos:end="179:15">(<argument pos:start="179:14" pos:end="179:14"><expr pos:start="179:14" pos:end="179:14"><literal type="number" pos:start="179:14" pos:end="179:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="185:5" pos:end="215:5"><if pos:start="185:5" pos:end="215:5">if <condition pos:start="185:8" pos:end="185:20">(<expr pos:start="185:9" pos:end="185:19"><name pos:start="185:9" pos:end="185:19"><name pos:start="185:9" pos:end="185:11">vms</name><operator pos:start="185:12" pos:end="185:13">-&gt;</operator><name pos:start="185:14" pos:end="185:19">secure</name></name></expr>)</condition> <block pos:start="185:22" pos:end="215:5">{<block_content pos:start="187:9" pos:end="213:74">

        <if_stmt pos:start="187:9" pos:end="193:9"><if pos:start="187:9" pos:end="193:9">if <condition pos:start="187:12" pos:end="187:26">(<expr pos:start="187:13" pos:end="187:25"><call pos:start="187:13" pos:end="187:25"><name pos:start="187:13" pos:end="187:23">kvm_enabled</name><argument_list pos:start="187:24" pos:end="187:25">()</argument_list></call></expr>)</condition> <block pos:start="187:28" pos:end="193:9">{<block_content pos:start="189:13" pos:end="191:20">

            <expr_stmt pos:start="189:13" pos:end="189:80"><expr pos:start="189:13" pos:end="189:79"><call pos:start="189:13" pos:end="189:79"><name pos:start="189:13" pos:end="189:24">error_report</name><argument_list pos:start="189:25" pos:end="189:79">(<argument pos:start="189:26" pos:end="189:78"><expr pos:start="189:26" pos:end="189:78"><literal type="string" pos:start="189:26" pos:end="189:78">"mach-virt: KVM does not support Security extensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:20"><expr pos:start="191:13" pos:end="191:19"><call pos:start="191:13" pos:end="191:19"><name pos:start="191:13" pos:end="191:16">exit</name><argument_list pos:start="191:17" pos:end="191:19">(<argument pos:start="191:18" pos:end="191:18"><expr pos:start="191:18" pos:end="191:18"><literal type="number" pos:start="191:18" pos:end="191:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="197:9" pos:end="205:11">/* The Secure view of the world is the same as the NonSecure,

         * but with a few extra devices. Create it as a container region

         * containing the system memory at low priority; any secure-only

         * devices go in at higher priority and take precedence.

         */</comment>

        <expr_stmt pos:start="207:9" pos:end="207:47"><expr pos:start="207:9" pos:end="207:46"><name pos:start="207:9" pos:end="207:21">secure_sysmem</name> <operator pos:start="207:23" pos:end="207:23">=</operator> <call pos:start="207:25" pos:end="207:46"><name pos:start="207:25" pos:end="207:29">g_new</name><argument_list pos:start="207:30" pos:end="207:46">(<argument pos:start="207:31" pos:end="207:42"><expr pos:start="207:31" pos:end="207:42"><name pos:start="207:31" pos:end="207:42">MemoryRegion</name></expr></argument>, <argument pos:start="207:45" pos:end="207:45"><expr pos:start="207:45" pos:end="207:45"><literal type="number" pos:start="207:45" pos:end="207:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="211:39"><expr pos:start="209:9" pos:end="211:38"><call pos:start="209:9" pos:end="211:38"><name pos:start="209:9" pos:end="209:26">memory_region_init</name><argument_list pos:start="209:27" pos:end="211:38">(<argument pos:start="209:28" pos:end="209:40"><expr pos:start="209:28" pos:end="209:40"><name pos:start="209:28" pos:end="209:40">secure_sysmem</name></expr></argument>, <argument pos:start="209:43" pos:end="209:57"><expr pos:start="209:43" pos:end="209:57"><call pos:start="209:43" pos:end="209:57"><name pos:start="209:43" pos:end="209:48">OBJECT</name><argument_list pos:start="209:49" pos:end="209:57">(<argument pos:start="209:50" pos:end="209:56"><expr pos:start="209:50" pos:end="209:56"><name pos:start="209:50" pos:end="209:56">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="209:60" pos:end="209:74"><expr pos:start="209:60" pos:end="209:74"><literal type="string" pos:start="209:60" pos:end="209:74">"secure-memory"</literal></expr></argument>,

                           <argument pos:start="211:28" pos:end="211:37"><expr pos:start="211:28" pos:end="211:37"><name pos:start="211:28" pos:end="211:37">UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:74"><expr pos:start="213:9" pos:end="213:73"><call pos:start="213:9" pos:end="213:73"><name pos:start="213:9" pos:end="213:43">memory_region_add_subregion_overlap</name><argument_list pos:start="213:44" pos:end="213:73">(<argument pos:start="213:45" pos:end="213:57"><expr pos:start="213:45" pos:end="213:57"><name pos:start="213:45" pos:end="213:57">secure_sysmem</name></expr></argument>, <argument pos:start="213:60" pos:end="213:60"><expr pos:start="213:60" pos:end="213:60"><literal type="number" pos:start="213:60" pos:end="213:60">0</literal></expr></argument>, <argument pos:start="213:63" pos:end="213:68"><expr pos:start="213:63" pos:end="213:68"><name pos:start="213:63" pos:end="213:68">sysmem</name></expr></argument>, <argument pos:start="213:71" pos:end="213:72"><expr pos:start="213:71" pos:end="213:72"><operator pos:start="213:71" pos:end="213:71">-</operator><literal type="number" pos:start="213:72" pos:end="213:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:20"><expr pos:start="219:5" pos:end="219:19"><call pos:start="219:5" pos:end="219:19"><name pos:start="219:5" pos:end="219:14">create_fdt</name><argument_list pos:start="219:15" pos:end="219:19">(<argument pos:start="219:16" pos:end="219:18"><expr pos:start="219:16" pos:end="219:18"><name pos:start="219:16" pos:end="219:18">vms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:52"><expr pos:start="223:5" pos:end="223:51"><name pos:start="223:5" pos:end="223:6">oc</name> <operator pos:start="223:8" pos:end="223:8">=</operator> <call pos:start="223:10" pos:end="223:51"><name pos:start="223:10" pos:end="223:26">cpu_class_by_name</name><argument_list pos:start="223:27" pos:end="223:51">(<argument pos:start="223:28" pos:end="223:39"><expr pos:start="223:28" pos:end="223:39"><name pos:start="223:28" pos:end="223:39">TYPE_ARM_CPU</name></expr></argument>, <argument pos:start="223:42" pos:end="223:50"><expr pos:start="223:42" pos:end="223:50"><name pos:start="223:42" pos:end="223:50"><name pos:start="223:42" pos:end="223:47">cpustr</name><index pos:start="223:48" pos:end="223:50">[<expr pos:start="223:49" pos:end="223:49"><literal type="number" pos:start="223:49" pos:end="223:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="231:5"><if pos:start="225:5" pos:end="231:5">if <condition pos:start="225:8" pos:end="225:12">(<expr pos:start="225:9" pos:end="225:11"><operator pos:start="225:9" pos:end="225:9">!</operator><name pos:start="225:10" pos:end="225:11">oc</name></expr>)</condition> <block pos:start="225:14" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:16">

        <expr_stmt pos:start="227:9" pos:end="227:54"><expr pos:start="227:9" pos:end="227:53"><call pos:start="227:9" pos:end="227:53"><name pos:start="227:9" pos:end="227:20">error_report</name><argument_list pos:start="227:21" pos:end="227:53">(<argument pos:start="227:22" pos:end="227:52"><expr pos:start="227:22" pos:end="227:52"><literal type="string" pos:start="227:22" pos:end="227:52">"Unable to find CPU definition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:16"><expr pos:start="229:9" pos:end="229:15"><call pos:start="229:9" pos:end="229:15"><name pos:start="229:9" pos:end="229:12">exit</name><argument_list pos:start="229:13" pos:end="229:15">(<argument pos:start="229:14" pos:end="229:14"><expr pos:start="229:14" pos:end="229:14"><literal type="number" pos:start="229:14" pos:end="229:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:41"><expr pos:start="233:5" pos:end="233:40"><name pos:start="233:5" pos:end="233:12">typename</name> <operator pos:start="233:14" pos:end="233:14">=</operator> <call pos:start="233:16" pos:end="233:40"><name pos:start="233:16" pos:end="233:36">object_class_get_name</name><argument_list pos:start="233:37" pos:end="233:40">(<argument pos:start="233:38" pos:end="233:39"><expr pos:start="233:38" pos:end="233:39"><name pos:start="233:38" pos:end="233:39">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="237:5" pos:end="237:74">/* convert -smp CPU options specified by the user into global props */</comment>

    <expr_stmt pos:start="239:5" pos:end="239:23"><expr pos:start="239:5" pos:end="239:22"><name pos:start="239:5" pos:end="239:6">cc</name> <operator pos:start="239:8" pos:end="239:8">=</operator> <call pos:start="239:10" pos:end="239:22"><name pos:start="239:10" pos:end="239:18">CPU_CLASS</name><argument_list pos:start="239:19" pos:end="239:22">(<argument pos:start="239:20" pos:end="239:21"><expr pos:start="239:20" pos:end="239:21"><name pos:start="239:20" pos:end="239:21">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:50"><expr pos:start="241:5" pos:end="241:49"><call pos:start="241:5" pos:end="241:49"><name pos:start="241:5" pos:end="241:22"><name pos:start="241:5" pos:end="241:6">cc</name><operator pos:start="241:7" pos:end="241:8">-&gt;</operator><name pos:start="241:9" pos:end="241:22">parse_features</name></name><argument_list pos:start="241:23" pos:end="241:49">(<argument pos:start="241:24" pos:end="241:31"><expr pos:start="241:24" pos:end="241:31"><name pos:start="241:24" pos:end="241:31">typename</name></expr></argument>, <argument pos:start="241:34" pos:end="241:42"><expr pos:start="241:34" pos:end="241:42"><name pos:start="241:34" pos:end="241:42"><name pos:start="241:34" pos:end="241:39">cpustr</name><index pos:start="241:40" pos:end="241:42">[<expr pos:start="241:41" pos:end="241:41"><literal type="number" pos:start="241:41" pos:end="241:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="241:45" pos:end="241:48"><expr pos:start="241:45" pos:end="241:48"><operator pos:start="241:45" pos:end="241:45">&amp;</operator><name pos:start="241:46" pos:end="241:48">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:23"><expr pos:start="243:5" pos:end="243:22"><call pos:start="243:5" pos:end="243:22"><name pos:start="243:5" pos:end="243:14">g_strfreev</name><argument_list pos:start="243:15" pos:end="243:22">(<argument pos:start="243:16" pos:end="243:21"><expr pos:start="243:16" pos:end="243:21"><name pos:start="243:16" pos:end="243:21">cpustr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="245:5" pos:end="251:5"><if pos:start="245:5" pos:end="251:5">if <condition pos:start="245:8" pos:end="245:12">(<expr pos:start="245:9" pos:end="245:11"><name pos:start="245:9" pos:end="245:11">err</name></expr>)</condition> <block pos:start="245:14" pos:end="251:5">{<block_content pos:start="247:9" pos:end="249:16">

        <expr_stmt pos:start="247:9" pos:end="247:30"><expr pos:start="247:9" pos:end="247:29"><call pos:start="247:9" pos:end="247:29"><name pos:start="247:9" pos:end="247:24">error_report_err</name><argument_list pos:start="247:25" pos:end="247:29">(<argument pos:start="247:26" pos:end="247:28"><expr pos:start="247:26" pos:end="247:28"><name pos:start="247:26" pos:end="247:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:16"><expr pos:start="249:9" pos:end="249:15"><call pos:start="249:9" pos:end="249:15"><name pos:start="249:9" pos:end="249:12">exit</name><argument_list pos:start="249:13" pos:end="249:15">(<argument pos:start="249:14" pos:end="249:14"><expr pos:start="249:14" pos:end="249:14"><literal type="number" pos:start="249:14" pos:end="249:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="255:5" pos:end="341:5">for <control pos:start="255:9" pos:end="255:34">(<init pos:start="255:10" pos:end="255:15"><expr pos:start="255:10" pos:end="255:14"><name pos:start="255:10" pos:end="255:10">n</name> <operator pos:start="255:12" pos:end="255:12">=</operator> <literal type="number" pos:start="255:14" pos:end="255:14">0</literal></expr>;</init> <condition pos:start="255:17" pos:end="255:29"><expr pos:start="255:17" pos:end="255:28"><name pos:start="255:17" pos:end="255:17">n</name> <operator pos:start="255:19" pos:end="255:19">&lt;</operator> <name pos:start="255:21" pos:end="255:28">smp_cpus</name></expr>;</condition> <incr pos:start="255:31" pos:end="255:33"><expr pos:start="255:31" pos:end="255:33"><name pos:start="255:31" pos:end="255:31">n</name><operator pos:start="255:32" pos:end="255:33">++</operator></expr></incr>)</control> <block pos:start="255:36" pos:end="341:5">{<block_content pos:start="257:9" pos:end="339:29">

        <decl_stmt pos:start="257:9" pos:end="257:46"><decl pos:start="257:9" pos:end="257:45"><type pos:start="257:9" pos:end="257:16"><name pos:start="257:9" pos:end="257:14">Object</name> <modifier pos:start="257:16" pos:end="257:16">*</modifier></type><name pos:start="257:17" pos:end="257:22">cpuobj</name> <init pos:start="257:24" pos:end="257:45">= <expr pos:start="257:26" pos:end="257:45"><call pos:start="257:26" pos:end="257:45"><name pos:start="257:26" pos:end="257:35">object_new</name><argument_list pos:start="257:36" pos:end="257:45">(<argument pos:start="257:37" pos:end="257:44"><expr pos:start="257:37" pos:end="257:44"><name pos:start="257:37" pos:end="257:44">typename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="261:9" pos:end="263:53"><expr pos:start="261:9" pos:end="263:52"><call pos:start="261:9" pos:end="263:52"><name pos:start="261:9" pos:end="261:31">object_property_set_int</name><argument_list pos:start="261:32" pos:end="263:52">(<argument pos:start="261:33" pos:end="261:38"><expr pos:start="261:33" pos:end="261:38"><name pos:start="261:33" pos:end="261:38">cpuobj</name></expr></argument>, <argument pos:start="261:41" pos:end="261:68"><expr pos:start="261:41" pos:end="261:68"><call pos:start="261:41" pos:end="261:68"><name pos:start="261:41" pos:end="261:60">virt_cpu_mp_affinity</name><argument_list pos:start="261:61" pos:end="261:68">(<argument pos:start="261:62" pos:end="261:64"><expr pos:start="261:62" pos:end="261:64"><name pos:start="261:62" pos:end="261:64">vms</name></expr></argument>, <argument pos:start="261:67" pos:end="261:67"><expr pos:start="261:67" pos:end="261:67"><name pos:start="261:67" pos:end="261:67">n</name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="263:33" pos:end="263:45"><expr pos:start="263:33" pos:end="263:45"><literal type="string" pos:start="263:33" pos:end="263:45">"mp-affinity"</literal></expr></argument>, <argument pos:start="263:48" pos:end="263:51"><expr pos:start="263:48" pos:end="263:51"><name pos:start="263:48" pos:end="263:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="267:9" pos:end="271:9"><if pos:start="267:9" pos:end="271:9">if <condition pos:start="267:12" pos:end="267:25">(<expr pos:start="267:13" pos:end="267:24"><operator pos:start="267:13" pos:end="267:13">!</operator><name pos:start="267:14" pos:end="267:24"><name pos:start="267:14" pos:end="267:16">vms</name><operator pos:start="267:17" pos:end="267:18">-&gt;</operator><name pos:start="267:19" pos:end="267:24">secure</name></name></expr>)</condition> <block pos:start="267:27" pos:end="271:9">{<block_content pos:start="269:13" pos:end="269:69">

            <expr_stmt pos:start="269:13" pos:end="269:69"><expr pos:start="269:13" pos:end="269:68"><call pos:start="269:13" pos:end="269:68"><name pos:start="269:13" pos:end="269:36">object_property_set_bool</name><argument_list pos:start="269:37" pos:end="269:68">(<argument pos:start="269:38" pos:end="269:43"><expr pos:start="269:38" pos:end="269:43"><name pos:start="269:38" pos:end="269:43">cpuobj</name></expr></argument>, <argument pos:start="269:46" pos:end="269:50"><expr pos:start="269:46" pos:end="269:50"><name pos:start="269:46" pos:end="269:50">false</name></expr></argument>, <argument pos:start="269:53" pos:end="269:61"><expr pos:start="269:53" pos:end="269:61"><literal type="string" pos:start="269:53" pos:end="269:61">"has_el3"</literal></expr></argument>, <argument pos:start="269:64" pos:end="269:67"><expr pos:start="269:64" pos:end="269:67"><name pos:start="269:64" pos:end="269:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="275:9" pos:end="279:9"><if pos:start="275:9" pos:end="279:9">if <condition pos:start="275:12" pos:end="275:72">(<expr pos:start="275:13" pos:end="275:71"><operator pos:start="275:13" pos:end="275:13">!</operator><name pos:start="275:14" pos:end="275:22"><name pos:start="275:14" pos:end="275:16">vms</name><operator pos:start="275:17" pos:end="275:18">-&gt;</operator><name pos:start="275:19" pos:end="275:22">virt</name></name> <operator pos:start="275:24" pos:end="275:25">&amp;&amp;</operator> <call pos:start="275:27" pos:end="275:71"><name pos:start="275:27" pos:end="275:46">object_property_find</name><argument_list pos:start="275:47" pos:end="275:71">(<argument pos:start="275:48" pos:end="275:53"><expr pos:start="275:48" pos:end="275:53"><name pos:start="275:48" pos:end="275:53">cpuobj</name></expr></argument>, <argument pos:start="275:56" pos:end="275:64"><expr pos:start="275:56" pos:end="275:64"><literal type="string" pos:start="275:56" pos:end="275:64">"has_el2"</literal></expr></argument>, <argument pos:start="275:67" pos:end="275:70"><expr pos:start="275:67" pos:end="275:70"><name pos:start="275:67" pos:end="275:70">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="275:74" pos:end="279:9">{<block_content pos:start="277:13" pos:end="277:69">

            <expr_stmt pos:start="277:13" pos:end="277:69"><expr pos:start="277:13" pos:end="277:68"><call pos:start="277:13" pos:end="277:68"><name pos:start="277:13" pos:end="277:36">object_property_set_bool</name><argument_list pos:start="277:37" pos:end="277:68">(<argument pos:start="277:38" pos:end="277:43"><expr pos:start="277:38" pos:end="277:43"><name pos:start="277:38" pos:end="277:43">cpuobj</name></expr></argument>, <argument pos:start="277:46" pos:end="277:50"><expr pos:start="277:46" pos:end="277:50"><name pos:start="277:46" pos:end="277:50">false</name></expr></argument>, <argument pos:start="277:53" pos:end="277:61"><expr pos:start="277:53" pos:end="277:61"><literal type="string" pos:start="277:53" pos:end="277:61">"has_el2"</literal></expr></argument>, <argument pos:start="277:64" pos:end="277:67"><expr pos:start="277:64" pos:end="277:67"><name pos:start="277:64" pos:end="277:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="283:9" pos:end="301:9"><if pos:start="283:9" pos:end="301:9">if <condition pos:start="283:12" pos:end="283:60">(<expr pos:start="283:13" pos:end="283:59"><name pos:start="283:13" pos:end="283:29"><name pos:start="283:13" pos:end="283:15">vms</name><operator pos:start="283:16" pos:end="283:17">-&gt;</operator><name pos:start="283:18" pos:end="283:29">psci_conduit</name></name> <operator pos:start="283:31" pos:end="283:32">!=</operator> <name pos:start="283:34" pos:end="283:59">QEMU_PSCI_CONDUIT_DISABLED</name></expr>)</condition> <block pos:start="283:62" pos:end="301:9">{<block_content pos:start="285:13" pos:end="299:13">

            <expr_stmt pos:start="285:13" pos:end="287:58"><expr pos:start="285:13" pos:end="287:57"><call pos:start="285:13" pos:end="287:57"><name pos:start="285:13" pos:end="285:35">object_property_set_int</name><argument_list pos:start="285:36" pos:end="287:57">(<argument pos:start="285:37" pos:end="285:42"><expr pos:start="285:37" pos:end="285:42"><name pos:start="285:37" pos:end="285:42">cpuobj</name></expr></argument>, <argument pos:start="285:45" pos:end="285:61"><expr pos:start="285:45" pos:end="285:61"><name pos:start="285:45" pos:end="285:61"><name pos:start="285:45" pos:end="285:47">vms</name><operator pos:start="285:48" pos:end="285:49">-&gt;</operator><name pos:start="285:50" pos:end="285:61">psci_conduit</name></name></expr></argument>,

                                    <argument pos:start="287:37" pos:end="287:50"><expr pos:start="287:37" pos:end="287:50"><literal type="string" pos:start="287:37" pos:end="287:50">"psci-conduit"</literal></expr></argument>, <argument pos:start="287:53" pos:end="287:56"><expr pos:start="287:53" pos:end="287:56"><name pos:start="287:53" pos:end="287:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="291:13" pos:end="291:65">/* Secondary CPUs start in PSCI powered-down state */</comment>

            <if_stmt pos:start="293:13" pos:end="299:13"><if pos:start="293:13" pos:end="299:13">if <condition pos:start="293:16" pos:end="293:22">(<expr pos:start="293:17" pos:end="293:21"><name pos:start="293:17" pos:end="293:17">n</name> <operator pos:start="293:19" pos:end="293:19">&gt;</operator> <literal type="number" pos:start="293:21" pos:end="293:21">0</literal></expr>)</condition> <block pos:start="293:24" pos:end="299:13">{<block_content pos:start="295:17" pos:end="297:68">

                <expr_stmt pos:start="295:17" pos:end="297:68"><expr pos:start="295:17" pos:end="297:67"><call pos:start="295:17" pos:end="297:67"><name pos:start="295:17" pos:end="295:40">object_property_set_bool</name><argument_list pos:start="295:41" pos:end="297:67">(<argument pos:start="295:42" pos:end="295:47"><expr pos:start="295:42" pos:end="295:47"><name pos:start="295:42" pos:end="295:47">cpuobj</name></expr></argument>, <argument pos:start="295:50" pos:end="295:53"><expr pos:start="295:50" pos:end="295:53"><name pos:start="295:50" pos:end="295:53">true</name></expr></argument>,

                                         <argument pos:start="297:42" pos:end="297:60"><expr pos:start="297:42" pos:end="297:60"><literal type="string" pos:start="297:42" pos:end="297:60">"start-powered-off"</literal></expr></argument>, <argument pos:start="297:63" pos:end="297:66"><expr pos:start="297:63" pos:end="297:66"><name pos:start="297:63" pos:end="297:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="305:9" pos:end="309:9"><if pos:start="305:9" pos:end="309:9">if <condition pos:start="305:12" pos:end="305:69">(<expr pos:start="305:13" pos:end="305:68"><name pos:start="305:13" pos:end="305:23"><name pos:start="305:13" pos:end="305:15">vmc</name><operator pos:start="305:16" pos:end="305:17">-&gt;</operator><name pos:start="305:18" pos:end="305:23">no_pmu</name></name> <operator pos:start="305:25" pos:end="305:26">&amp;&amp;</operator> <call pos:start="305:28" pos:end="305:68"><name pos:start="305:28" pos:end="305:47">object_property_find</name><argument_list pos:start="305:48" pos:end="305:68">(<argument pos:start="305:49" pos:end="305:54"><expr pos:start="305:49" pos:end="305:54"><name pos:start="305:49" pos:end="305:54">cpuobj</name></expr></argument>, <argument pos:start="305:57" pos:end="305:61"><expr pos:start="305:57" pos:end="305:61"><literal type="string" pos:start="305:57" pos:end="305:61">"pmu"</literal></expr></argument>, <argument pos:start="305:64" pos:end="305:67"><expr pos:start="305:64" pos:end="305:67"><name pos:start="305:64" pos:end="305:67">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="305:71" pos:end="309:9">{<block_content pos:start="307:13" pos:end="307:65">

            <expr_stmt pos:start="307:13" pos:end="307:65"><expr pos:start="307:13" pos:end="307:64"><call pos:start="307:13" pos:end="307:64"><name pos:start="307:13" pos:end="307:36">object_property_set_bool</name><argument_list pos:start="307:37" pos:end="307:64">(<argument pos:start="307:38" pos:end="307:43"><expr pos:start="307:38" pos:end="307:43"><name pos:start="307:38" pos:end="307:43">cpuobj</name></expr></argument>, <argument pos:start="307:46" pos:end="307:50"><expr pos:start="307:46" pos:end="307:50"><name pos:start="307:46" pos:end="307:50">false</name></expr></argument>, <argument pos:start="307:53" pos:end="307:57"><expr pos:start="307:53" pos:end="307:57"><literal type="string" pos:start="307:53" pos:end="307:57">"pmu"</literal></expr></argument>, <argument pos:start="307:60" pos:end="307:63"><expr pos:start="307:60" pos:end="307:63"><name pos:start="307:60" pos:end="307:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="313:9" pos:end="319:9"><if pos:start="313:9" pos:end="319:9">if <condition pos:start="313:12" pos:end="313:61">(<expr pos:start="313:13" pos:end="313:60"><call pos:start="313:13" pos:end="313:60"><name pos:start="313:13" pos:end="313:32">object_property_find</name><argument_list pos:start="313:33" pos:end="313:60">(<argument pos:start="313:34" pos:end="313:39"><expr pos:start="313:34" pos:end="313:39"><name pos:start="313:34" pos:end="313:39">cpuobj</name></expr></argument>, <argument pos:start="313:42" pos:end="313:53"><expr pos:start="313:42" pos:end="313:53"><literal type="string" pos:start="313:42" pos:end="313:53">"reset-cbar"</literal></expr></argument>, <argument pos:start="313:56" pos:end="313:59"><expr pos:start="313:56" pos:end="313:59"><name pos:start="313:56" pos:end="313:59">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:63" pos:end="319:9">{<block_content pos:start="315:13" pos:end="317:64">

            <expr_stmt pos:start="315:13" pos:end="317:64"><expr pos:start="315:13" pos:end="317:63"><call pos:start="315:13" pos:end="317:63"><name pos:start="315:13" pos:end="315:35">object_property_set_int</name><argument_list pos:start="315:36" pos:end="317:63">(<argument pos:start="315:37" pos:end="315:42"><expr pos:start="315:37" pos:end="315:42"><name pos:start="315:37" pos:end="315:42">cpuobj</name></expr></argument>, <argument pos:start="315:45" pos:end="315:77"><expr pos:start="315:45" pos:end="315:77"><name pos:start="315:45" pos:end="315:72"><name pos:start="315:45" pos:end="315:47">vms</name><operator pos:start="315:48" pos:end="315:49">-&gt;</operator><name pos:start="315:50" pos:end="315:55">memmap</name><index pos:start="315:56" pos:end="315:72">[<expr pos:start="315:57" pos:end="315:71"><name pos:start="315:57" pos:end="315:71">VIRT_CPUPERIPHS</name></expr>]</index></name><operator pos:start="315:73" pos:end="315:73">.</operator><name pos:start="315:74" pos:end="315:77">base</name></expr></argument>,

                                    <argument pos:start="317:37" pos:end="317:48"><expr pos:start="317:37" pos:end="317:48"><literal type="string" pos:start="317:37" pos:end="317:48">"reset-cbar"</literal></expr></argument>, <argument pos:start="317:51" pos:end="317:62"><expr pos:start="317:51" pos:end="317:62"><operator pos:start="317:51" pos:end="317:51">&amp;</operator><name pos:start="317:52" pos:end="317:62">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="323:9" pos:end="325:47"><expr pos:start="323:9" pos:end="325:46"><call pos:start="323:9" pos:end="325:46"><name pos:start="323:9" pos:end="323:32">object_property_set_link</name><argument_list pos:start="323:33" pos:end="325:46">(<argument pos:start="323:34" pos:end="323:39"><expr pos:start="323:34" pos:end="323:39"><name pos:start="323:34" pos:end="323:39">cpuobj</name></expr></argument>, <argument pos:start="323:42" pos:end="323:55"><expr pos:start="323:42" pos:end="323:55"><call pos:start="323:42" pos:end="323:55"><name pos:start="323:42" pos:end="323:47">OBJECT</name><argument_list pos:start="323:48" pos:end="323:55">(<argument pos:start="323:49" pos:end="323:54"><expr pos:start="323:49" pos:end="323:54"><name pos:start="323:49" pos:end="323:54">sysmem</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="323:58" pos:end="323:65"><expr pos:start="323:58" pos:end="323:65"><literal type="string" pos:start="323:58" pos:end="323:65">"memory"</literal></expr></argument>,

                                 <argument pos:start="325:34" pos:end="325:45"><expr pos:start="325:34" pos:end="325:45"><operator pos:start="325:34" pos:end="325:34">&amp;</operator><name pos:start="325:35" pos:end="325:45">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="327:9" pos:end="333:9"><if pos:start="327:9" pos:end="333:9">if <condition pos:start="327:12" pos:end="327:24">(<expr pos:start="327:13" pos:end="327:23"><name pos:start="327:13" pos:end="327:23"><name pos:start="327:13" pos:end="327:15">vms</name><operator pos:start="327:16" pos:end="327:17">-&gt;</operator><name pos:start="327:18" pos:end="327:23">secure</name></name></expr>)</condition> <block pos:start="327:26" pos:end="333:9">{<block_content pos:start="329:13" pos:end="331:68">

            <expr_stmt pos:start="329:13" pos:end="331:68"><expr pos:start="329:13" pos:end="331:67"><call pos:start="329:13" pos:end="331:67"><name pos:start="329:13" pos:end="329:36">object_property_set_link</name><argument_list pos:start="329:37" pos:end="331:67">(<argument pos:start="329:38" pos:end="329:43"><expr pos:start="329:38" pos:end="329:43"><name pos:start="329:38" pos:end="329:43">cpuobj</name></expr></argument>, <argument pos:start="329:46" pos:end="329:66"><expr pos:start="329:46" pos:end="329:66"><call pos:start="329:46" pos:end="329:66"><name pos:start="329:46" pos:end="329:51">OBJECT</name><argument_list pos:start="329:52" pos:end="329:66">(<argument pos:start="329:53" pos:end="329:65"><expr pos:start="329:53" pos:end="329:65"><name pos:start="329:53" pos:end="329:65">secure_sysmem</name></expr></argument>)</argument_list></call></expr></argument>,

                                     <argument pos:start="331:38" pos:end="331:52"><expr pos:start="331:38" pos:end="331:52"><literal type="string" pos:start="331:38" pos:end="331:52">"secure-memory"</literal></expr></argument>, <argument pos:start="331:55" pos:end="331:66"><expr pos:start="331:55" pos:end="331:66"><operator pos:start="331:55" pos:end="331:55">&amp;</operator><name pos:start="331:56" pos:end="331:66">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="337:9" pos:end="337:65"><expr pos:start="337:9" pos:end="337:64"><call pos:start="337:9" pos:end="337:64"><name pos:start="337:9" pos:end="337:32">object_property_set_bool</name><argument_list pos:start="337:33" pos:end="337:64">(<argument pos:start="337:34" pos:end="337:39"><expr pos:start="337:34" pos:end="337:39"><name pos:start="337:34" pos:end="337:39">cpuobj</name></expr></argument>, <argument pos:start="337:42" pos:end="337:45"><expr pos:start="337:42" pos:end="337:45"><name pos:start="337:42" pos:end="337:45">true</name></expr></argument>, <argument pos:start="337:48" pos:end="337:57"><expr pos:start="337:48" pos:end="337:57"><literal type="string" pos:start="337:48" pos:end="337:57">"realized"</literal></expr></argument>, <argument pos:start="337:60" pos:end="337:63"><expr pos:start="337:60" pos:end="337:63"><name pos:start="337:60" pos:end="337:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:29"><expr pos:start="339:9" pos:end="339:28"><call pos:start="339:9" pos:end="339:28"><name pos:start="339:9" pos:end="339:20">object_unref</name><argument_list pos:start="339:21" pos:end="339:28">(<argument pos:start="339:22" pos:end="339:27"><expr pos:start="339:22" pos:end="339:27"><name pos:start="339:22" pos:end="339:27">cpuobj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="343:5" pos:end="343:29"><expr pos:start="343:5" pos:end="343:28"><call pos:start="343:5" pos:end="343:28"><name pos:start="343:5" pos:end="343:23">fdt_add_timer_nodes</name><argument_list pos:start="343:24" pos:end="343:28">(<argument pos:start="343:25" pos:end="343:27"><expr pos:start="343:25" pos:end="343:27"><name pos:start="343:25" pos:end="343:27">vms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:27"><expr pos:start="345:5" pos:end="345:26"><call pos:start="345:5" pos:end="345:26"><name pos:start="345:5" pos:end="345:21">fdt_add_cpu_nodes</name><argument_list pos:start="345:22" pos:end="345:26">(<argument pos:start="345:23" pos:end="345:25"><expr pos:start="345:23" pos:end="345:25"><name pos:start="345:23" pos:end="345:25">vms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:27"><expr pos:start="347:5" pos:end="347:26"><call pos:start="347:5" pos:end="347:26"><name pos:start="347:5" pos:end="347:21">fdt_add_psci_node</name><argument_list pos:start="347:22" pos:end="347:26">(<argument pos:start="347:23" pos:end="347:25"><expr pos:start="347:23" pos:end="347:25"><name pos:start="347:23" pos:end="347:25">vms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="351:5" pos:end="353:60"><expr pos:start="351:5" pos:end="353:59"><call pos:start="351:5" pos:end="353:59"><name pos:start="351:5" pos:end="351:40">memory_region_allocate_system_memory</name><argument_list pos:start="351:41" pos:end="353:59">(<argument pos:start="351:42" pos:end="351:44"><expr pos:start="351:42" pos:end="351:44"><name pos:start="351:42" pos:end="351:44">ram</name></expr></argument>, <argument pos:start="351:47" pos:end="351:50"><expr pos:start="351:47" pos:end="351:50"><name pos:start="351:47" pos:end="351:50">NULL</name></expr></argument>, <argument pos:start="351:53" pos:end="351:67"><expr pos:start="351:53" pos:end="351:67"><literal type="string" pos:start="351:53" pos:end="351:67">"mach-virt.ram"</literal></expr></argument>,

                                         <argument pos:start="353:42" pos:end="353:58"><expr pos:start="353:42" pos:end="353:58"><name pos:start="353:42" pos:end="353:58"><name pos:start="353:42" pos:end="353:48">machine</name><operator pos:start="353:49" pos:end="353:50">-&gt;</operator><name pos:start="353:51" pos:end="353:58">ram_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:73"><expr pos:start="355:5" pos:end="355:72"><call pos:start="355:5" pos:end="355:72"><name pos:start="355:5" pos:end="355:31">memory_region_add_subregion</name><argument_list pos:start="355:32" pos:end="355:72">(<argument pos:start="355:33" pos:end="355:38"><expr pos:start="355:33" pos:end="355:38"><name pos:start="355:33" pos:end="355:38">sysmem</name></expr></argument>, <argument pos:start="355:41" pos:end="355:66"><expr pos:start="355:41" pos:end="355:66"><name pos:start="355:41" pos:end="355:61"><name pos:start="355:41" pos:end="355:43">vms</name><operator pos:start="355:44" pos:end="355:45">-&gt;</operator><name pos:start="355:46" pos:end="355:51">memmap</name><index pos:start="355:52" pos:end="355:61">[<expr pos:start="355:53" pos:end="355:60"><name pos:start="355:53" pos:end="355:60">VIRT_MEM</name></expr>]</index></name><operator pos:start="355:62" pos:end="355:62">.</operator><name pos:start="355:63" pos:end="355:66">base</name></expr></argument>, <argument pos:start="355:69" pos:end="355:71"><expr pos:start="355:69" pos:end="355:71"><name pos:start="355:69" pos:end="355:71">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="359:5" pos:end="359:70"><expr pos:start="359:5" pos:end="359:69"><call pos:start="359:5" pos:end="359:69"><name pos:start="359:5" pos:end="359:16">create_flash</name><argument_list pos:start="359:17" pos:end="359:69">(<argument pos:start="359:18" pos:end="359:20"><expr pos:start="359:18" pos:end="359:20"><name pos:start="359:18" pos:end="359:20">vms</name></expr></argument>, <argument pos:start="359:23" pos:end="359:28"><expr pos:start="359:23" pos:end="359:28"><name pos:start="359:23" pos:end="359:28">sysmem</name></expr></argument>, <argument pos:start="359:31" pos:end="359:68"><expr pos:start="359:31" pos:end="359:68"><ternary pos:start="359:31" pos:end="359:68"><condition pos:start="359:31" pos:end="359:45"><expr pos:start="359:31" pos:end="359:43"><name pos:start="359:31" pos:end="359:43">secure_sysmem</name></expr> ?</condition><then pos:start="359:47" pos:end="359:59"> <expr pos:start="359:47" pos:end="359:59"><name pos:start="359:47" pos:end="359:59">secure_sysmem</name></expr> </then><else pos:start="359:61" pos:end="359:68">: <expr pos:start="359:63" pos:end="359:68"><name pos:start="359:63" pos:end="359:68">sysmem</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="363:5" pos:end="363:25"><expr pos:start="363:5" pos:end="363:24"><call pos:start="363:5" pos:end="363:24"><name pos:start="363:5" pos:end="363:14">create_gic</name><argument_list pos:start="363:15" pos:end="363:24">(<argument pos:start="363:16" pos:end="363:18"><expr pos:start="363:16" pos:end="363:18"><name pos:start="363:16" pos:end="363:18">vms</name></expr></argument>, <argument pos:start="363:21" pos:end="363:23"><expr pos:start="363:21" pos:end="363:23"><name pos:start="363:21" pos:end="363:23">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="367:5" pos:end="367:27"><expr pos:start="367:5" pos:end="367:26"><call pos:start="367:5" pos:end="367:26"><name pos:start="367:5" pos:end="367:21">fdt_add_pmu_nodes</name><argument_list pos:start="367:22" pos:end="367:26">(<argument pos:start="367:23" pos:end="367:25"><expr pos:start="367:23" pos:end="367:25"><name pos:start="367:23" pos:end="367:25">vms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="371:5" pos:end="371:60"><expr pos:start="371:5" pos:end="371:59"><call pos:start="371:5" pos:end="371:59"><name pos:start="371:5" pos:end="371:15">create_uart</name><argument_list pos:start="371:16" pos:end="371:59">(<argument pos:start="371:17" pos:end="371:19"><expr pos:start="371:17" pos:end="371:19"><name pos:start="371:17" pos:end="371:19">vms</name></expr></argument>, <argument pos:start="371:22" pos:end="371:24"><expr pos:start="371:22" pos:end="371:24"><name pos:start="371:22" pos:end="371:24">pic</name></expr></argument>, <argument pos:start="371:27" pos:end="371:35"><expr pos:start="371:27" pos:end="371:35"><name pos:start="371:27" pos:end="371:35">VIRT_UART</name></expr></argument>, <argument pos:start="371:38" pos:end="371:43"><expr pos:start="371:38" pos:end="371:43"><name pos:start="371:38" pos:end="371:43">sysmem</name></expr></argument>, <argument pos:start="371:46" pos:end="371:58"><expr pos:start="371:46" pos:end="371:58"><name pos:start="371:46" pos:end="371:58"><name pos:start="371:46" pos:end="371:55">serial_hds</name><index pos:start="371:56" pos:end="371:58">[<expr pos:start="371:57" pos:end="371:57"><literal type="number" pos:start="371:57" pos:end="371:57">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="375:5" pos:end="381:5"><if pos:start="375:5" pos:end="381:5">if <condition pos:start="375:8" pos:end="375:20">(<expr pos:start="375:9" pos:end="375:19"><name pos:start="375:9" pos:end="375:19"><name pos:start="375:9" pos:end="375:11">vms</name><operator pos:start="375:12" pos:end="375:13">-&gt;</operator><name pos:start="375:14" pos:end="375:19">secure</name></name></expr>)</condition> <block pos:start="375:22" pos:end="381:5">{<block_content pos:start="377:9" pos:end="379:78">

        <expr_stmt pos:start="377:9" pos:end="377:46"><expr pos:start="377:9" pos:end="377:45"><call pos:start="377:9" pos:end="377:45"><name pos:start="377:9" pos:end="377:25">create_secure_ram</name><argument_list pos:start="377:26" pos:end="377:45">(<argument pos:start="377:27" pos:end="377:29"><expr pos:start="377:27" pos:end="377:29"><name pos:start="377:27" pos:end="377:29">vms</name></expr></argument>, <argument pos:start="377:32" pos:end="377:44"><expr pos:start="377:32" pos:end="377:44"><name pos:start="377:32" pos:end="377:44">secure_sysmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:78"><expr pos:start="379:9" pos:end="379:77"><call pos:start="379:9" pos:end="379:77"><name pos:start="379:9" pos:end="379:19">create_uart</name><argument_list pos:start="379:20" pos:end="379:77">(<argument pos:start="379:21" pos:end="379:23"><expr pos:start="379:21" pos:end="379:23"><name pos:start="379:21" pos:end="379:23">vms</name></expr></argument>, <argument pos:start="379:26" pos:end="379:28"><expr pos:start="379:26" pos:end="379:28"><name pos:start="379:26" pos:end="379:28">pic</name></expr></argument>, <argument pos:start="379:31" pos:end="379:46"><expr pos:start="379:31" pos:end="379:46"><name pos:start="379:31" pos:end="379:46">VIRT_SECURE_UART</name></expr></argument>, <argument pos:start="379:49" pos:end="379:61"><expr pos:start="379:49" pos:end="379:61"><name pos:start="379:49" pos:end="379:61">secure_sysmem</name></expr></argument>, <argument pos:start="379:64" pos:end="379:76"><expr pos:start="379:64" pos:end="379:76"><name pos:start="379:64" pos:end="379:76"><name pos:start="379:64" pos:end="379:73">serial_hds</name><index pos:start="379:74" pos:end="379:76">[<expr pos:start="379:75" pos:end="379:75"><literal type="number" pos:start="379:75" pos:end="379:75">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="385:5" pos:end="385:25"><expr pos:start="385:5" pos:end="385:24"><call pos:start="385:5" pos:end="385:24"><name pos:start="385:5" pos:end="385:14">create_rtc</name><argument_list pos:start="385:15" pos:end="385:24">(<argument pos:start="385:16" pos:end="385:18"><expr pos:start="385:16" pos:end="385:18"><name pos:start="385:16" pos:end="385:18">vms</name></expr></argument>, <argument pos:start="385:21" pos:end="385:23"><expr pos:start="385:21" pos:end="385:23"><name pos:start="385:21" pos:end="385:23">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="389:5" pos:end="389:26"><expr pos:start="389:5" pos:end="389:25"><call pos:start="389:5" pos:end="389:25"><name pos:start="389:5" pos:end="389:15">create_pcie</name><argument_list pos:start="389:16" pos:end="389:25">(<argument pos:start="389:17" pos:end="389:19"><expr pos:start="389:17" pos:end="389:19"><name pos:start="389:17" pos:end="389:19">vms</name></expr></argument>, <argument pos:start="389:22" pos:end="389:24"><expr pos:start="389:22" pos:end="389:24"><name pos:start="389:22" pos:end="389:24">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="393:5" pos:end="393:26"><expr pos:start="393:5" pos:end="393:25"><call pos:start="393:5" pos:end="393:25"><name pos:start="393:5" pos:end="393:15">create_gpio</name><argument_list pos:start="393:16" pos:end="393:25">(<argument pos:start="393:17" pos:end="393:19"><expr pos:start="393:17" pos:end="393:19"><name pos:start="393:17" pos:end="393:19">vms</name></expr></argument>, <argument pos:start="393:22" pos:end="393:24"><expr pos:start="393:22" pos:end="393:24"><name pos:start="393:22" pos:end="393:24">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="397:5" pos:end="403:7">/* Create mmio transports, so the user can create virtio backends

     * (which will be automatically plugged in to the transports). If

     * no backend is created the transport will just sit harmlessly idle.

     */</comment>

    <expr_stmt pos:start="405:5" pos:end="405:36"><expr pos:start="405:5" pos:end="405:35"><call pos:start="405:5" pos:end="405:35"><name pos:start="405:5" pos:end="405:25">create_virtio_devices</name><argument_list pos:start="405:26" pos:end="405:35">(<argument pos:start="405:27" pos:end="405:29"><expr pos:start="405:27" pos:end="405:29"><name pos:start="405:27" pos:end="405:29">vms</name></expr></argument>, <argument pos:start="405:32" pos:end="405:34"><expr pos:start="405:32" pos:end="405:34"><name pos:start="405:32" pos:end="405:34">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="409:5" pos:end="409:60"><expr pos:start="409:5" pos:end="409:59"><name pos:start="409:5" pos:end="409:15"><name pos:start="409:5" pos:end="409:7">vms</name><operator pos:start="409:8" pos:end="409:9">-&gt;</operator><name pos:start="409:10" pos:end="409:15">fw_cfg</name></name> <operator pos:start="409:17" pos:end="409:17">=</operator> <call pos:start="409:19" pos:end="409:59"><name pos:start="409:19" pos:end="409:31">create_fw_cfg</name><argument_list pos:start="409:32" pos:end="409:59">(<argument pos:start="409:33" pos:end="409:35"><expr pos:start="409:33" pos:end="409:35"><name pos:start="409:33" pos:end="409:35">vms</name></expr></argument>, <argument pos:start="409:38" pos:end="409:58"><expr pos:start="409:38" pos:end="409:58"><operator pos:start="409:38" pos:end="409:38">&amp;</operator><name pos:start="409:39" pos:end="409:58">address_space_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="411:5" pos:end="411:28"><expr pos:start="411:5" pos:end="411:27"><call pos:start="411:5" pos:end="411:27"><name pos:start="411:5" pos:end="411:14">rom_set_fw</name><argument_list pos:start="411:15" pos:end="411:27">(<argument pos:start="411:16" pos:end="411:26"><expr pos:start="411:16" pos:end="411:26"><name pos:start="411:16" pos:end="411:26"><name pos:start="411:16" pos:end="411:18">vms</name><operator pos:start="411:19" pos:end="411:20">-&gt;</operator><name pos:start="411:21" pos:end="411:26">fw_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="415:5" pos:end="415:49"><expr pos:start="415:5" pos:end="415:48"><name pos:start="415:5" pos:end="415:28"><name pos:start="415:5" pos:end="415:7">vms</name><operator pos:start="415:8" pos:end="415:9">-&gt;</operator><name pos:start="415:10" pos:end="415:21">machine_done</name><operator pos:start="415:22" pos:end="415:22">.</operator><name pos:start="415:23" pos:end="415:28">notify</name></name> <operator pos:start="415:30" pos:end="415:30">=</operator> <name pos:start="415:32" pos:end="415:48">virt_machine_done</name></expr>;</expr_stmt>

    <expr_stmt pos:start="417:5" pos:end="417:60"><expr pos:start="417:5" pos:end="417:59"><call pos:start="417:5" pos:end="417:59"><name pos:start="417:5" pos:end="417:39">qemu_add_machine_init_done_notifier</name><argument_list pos:start="417:40" pos:end="417:59">(<argument pos:start="417:41" pos:end="417:58"><expr pos:start="417:41" pos:end="417:58"><operator pos:start="417:41" pos:end="417:41">&amp;</operator><name pos:start="417:42" pos:end="417:58"><name pos:start="417:42" pos:end="417:44">vms</name><operator pos:start="417:45" pos:end="417:46">-&gt;</operator><name pos:start="417:47" pos:end="417:58">machine_done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="421:5" pos:end="421:47"><expr pos:start="421:5" pos:end="421:46"><name pos:start="421:5" pos:end="421:26"><name pos:start="421:5" pos:end="421:7">vms</name><operator pos:start="421:8" pos:end="421:9">-&gt;</operator><name pos:start="421:10" pos:end="421:17">bootinfo</name><operator pos:start="421:18" pos:end="421:18">.</operator><name pos:start="421:19" pos:end="421:26">ram_size</name></name> <operator pos:start="421:28" pos:end="421:28">=</operator> <name pos:start="421:30" pos:end="421:46"><name pos:start="421:30" pos:end="421:36">machine</name><operator pos:start="421:37" pos:end="421:38">-&gt;</operator><name pos:start="421:39" pos:end="421:46">ram_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:61"><expr pos:start="423:5" pos:end="423:60"><name pos:start="423:5" pos:end="423:33"><name pos:start="423:5" pos:end="423:7">vms</name><operator pos:start="423:8" pos:end="423:9">-&gt;</operator><name pos:start="423:10" pos:end="423:17">bootinfo</name><operator pos:start="423:18" pos:end="423:18">.</operator><name pos:start="423:19" pos:end="423:33">kernel_filename</name></name> <operator pos:start="423:35" pos:end="423:35">=</operator> <name pos:start="423:37" pos:end="423:60"><name pos:start="423:37" pos:end="423:43">machine</name><operator pos:start="423:44" pos:end="423:45">-&gt;</operator><name pos:start="423:46" pos:end="423:60">kernel_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="425:5" pos:end="425:59"><expr pos:start="425:5" pos:end="425:58"><name pos:start="425:5" pos:end="425:32"><name pos:start="425:5" pos:end="425:7">vms</name><operator pos:start="425:8" pos:end="425:9">-&gt;</operator><name pos:start="425:10" pos:end="425:17">bootinfo</name><operator pos:start="425:18" pos:end="425:18">.</operator><name pos:start="425:19" pos:end="425:32">kernel_cmdline</name></name> <operator pos:start="425:34" pos:end="425:34">=</operator> <name pos:start="425:36" pos:end="425:58"><name pos:start="425:36" pos:end="425:42">machine</name><operator pos:start="425:43" pos:end="425:44">-&gt;</operator><name pos:start="425:45" pos:end="425:58">kernel_cmdline</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:61"><expr pos:start="427:5" pos:end="427:60"><name pos:start="427:5" pos:end="427:33"><name pos:start="427:5" pos:end="427:7">vms</name><operator pos:start="427:8" pos:end="427:9">-&gt;</operator><name pos:start="427:10" pos:end="427:17">bootinfo</name><operator pos:start="427:18" pos:end="427:18">.</operator><name pos:start="427:19" pos:end="427:33">initrd_filename</name></name> <operator pos:start="427:35" pos:end="427:35">=</operator> <name pos:start="427:37" pos:end="427:60"><name pos:start="427:37" pos:end="427:43">machine</name><operator pos:start="427:44" pos:end="427:45">-&gt;</operator><name pos:start="427:46" pos:end="427:60">initrd_filename</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="429:5" pos:end="429:37"><expr pos:start="429:5" pos:end="429:36"><name pos:start="429:5" pos:end="429:25"><name pos:start="429:5" pos:end="429:7">vms</name><operator pos:start="429:8" pos:end="429:9">-&gt;</operator><name pos:start="429:10" pos:end="429:17">bootinfo</name><operator pos:start="429:18" pos:end="429:18">.</operator><name pos:start="429:19" pos:end="429:25">nb_cpus</name></name> <operator pos:start="429:27" pos:end="429:27">=</operator> <name pos:start="429:29" pos:end="429:36">smp_cpus</name></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:32"><expr pos:start="431:5" pos:end="431:31"><name pos:start="431:5" pos:end="431:26"><name pos:start="431:5" pos:end="431:7">vms</name><operator pos:start="431:8" pos:end="431:9">-&gt;</operator><name pos:start="431:10" pos:end="431:17">bootinfo</name><operator pos:start="431:18" pos:end="431:18">.</operator><name pos:start="431:19" pos:end="431:26">board_id</name></name> <operator pos:start="431:28" pos:end="431:28">=</operator> <operator pos:start="431:30" pos:end="431:30">-</operator><literal type="number" pos:start="431:31" pos:end="431:31">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="433:5" pos:end="433:60"><expr pos:start="433:5" pos:end="433:59"><name pos:start="433:5" pos:end="433:30"><name pos:start="433:5" pos:end="433:7">vms</name><operator pos:start="433:8" pos:end="433:9">-&gt;</operator><name pos:start="433:10" pos:end="433:17">bootinfo</name><operator pos:start="433:18" pos:end="433:18">.</operator><name pos:start="433:19" pos:end="433:30">loader_start</name></name> <operator pos:start="433:32" pos:end="433:32">=</operator> <name pos:start="433:34" pos:end="433:54"><name pos:start="433:34" pos:end="433:36">vms</name><operator pos:start="433:37" pos:end="433:38">-&gt;</operator><name pos:start="433:39" pos:end="433:44">memmap</name><index pos:start="433:45" pos:end="433:54">[<expr pos:start="433:46" pos:end="433:53"><name pos:start="433:46" pos:end="433:53">VIRT_MEM</name></expr>]</index></name><operator pos:start="433:55" pos:end="433:55">.</operator><name pos:start="433:56" pos:end="433:59">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="435:5" pos:end="435:41"><expr pos:start="435:5" pos:end="435:40"><name pos:start="435:5" pos:end="435:25"><name pos:start="435:5" pos:end="435:7">vms</name><operator pos:start="435:8" pos:end="435:9">-&gt;</operator><name pos:start="435:10" pos:end="435:17">bootinfo</name><operator pos:start="435:18" pos:end="435:18">.</operator><name pos:start="435:19" pos:end="435:25">get_dtb</name></name> <operator pos:start="435:27" pos:end="435:27">=</operator> <name pos:start="435:29" pos:end="435:40">machvirt_dtb</name></expr>;</expr_stmt>

    <expr_stmt pos:start="437:5" pos:end="437:52"><expr pos:start="437:5" pos:end="437:51"><name pos:start="437:5" pos:end="437:33"><name pos:start="437:5" pos:end="437:7">vms</name><operator pos:start="437:8" pos:end="437:9">-&gt;</operator><name pos:start="437:10" pos:end="437:17">bootinfo</name><operator pos:start="437:18" pos:end="437:18">.</operator><name pos:start="437:19" pos:end="437:33">firmware_loaded</name></name> <operator pos:start="437:35" pos:end="437:35">=</operator> <name pos:start="437:37" pos:end="437:51">firmware_loaded</name></expr>;</expr_stmt>

    <expr_stmt pos:start="439:5" pos:end="439:56"><expr pos:start="439:5" pos:end="439:55"><call pos:start="439:5" pos:end="439:55"><name pos:start="439:5" pos:end="439:19">arm_load_kernel</name><argument_list pos:start="439:20" pos:end="439:55">(<argument pos:start="439:21" pos:end="439:38"><expr pos:start="439:21" pos:end="439:38"><call pos:start="439:21" pos:end="439:38"><name pos:start="439:21" pos:end="439:27">ARM_CPU</name><argument_list pos:start="439:28" pos:end="439:38">(<argument pos:start="439:29" pos:end="439:37"><expr pos:start="439:29" pos:end="439:37"><name pos:start="439:29" pos:end="439:37">first_cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="439:41" pos:end="439:54"><expr pos:start="439:41" pos:end="439:54"><operator pos:start="439:41" pos:end="439:41">&amp;</operator><name pos:start="439:42" pos:end="439:54"><name pos:start="439:42" pos:end="439:44">vms</name><operator pos:start="439:45" pos:end="439:46">-&gt;</operator><name pos:start="439:47" pos:end="439:54">bootinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="443:5" pos:end="453:7">/*

     * arm_load_kernel machine init done notifier registration must

     * happen before the platform_bus_create call. In this latter,

     * another notifier is registered which adds platform bus nodes.

     * Notifiers are executed in registration reverse order.

     */</comment>

    <expr_stmt pos:start="455:5" pos:end="455:34"><expr pos:start="455:5" pos:end="455:33"><call pos:start="455:5" pos:end="455:33"><name pos:start="455:5" pos:end="455:23">create_platform_bus</name><argument_list pos:start="455:24" pos:end="455:33">(<argument pos:start="455:25" pos:end="455:27"><expr pos:start="455:25" pos:end="455:27"><name pos:start="455:25" pos:end="455:27">vms</name></expr></argument>, <argument pos:start="455:30" pos:end="455:32"><expr pos:start="455:30" pos:end="455:32"><name pos:start="455:30" pos:end="455:32">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
