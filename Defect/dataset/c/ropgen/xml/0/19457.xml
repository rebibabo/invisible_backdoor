<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19457.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ape_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:50"><decl pos:start="1:29" pos:end="1:50"><type pos:start="1:29" pos:end="1:50"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type> <name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="175:1">{<block_content pos:start="9:5" pos:end="173:22">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">APEContext</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">s</name> <init pos:start="13:19" pos:end="13:36">= <expr pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:25">avctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:20">samples</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">nblocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:12"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:12">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:22">blockstodecode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">bytes_used</name></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:37">(<expr pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:16">buf_size</name> <operator pos:start="27:18" pos:end="27:19">==</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal> <operator pos:start="27:23" pos:end="27:24">&amp;&amp;</operator> <operator pos:start="27:26" pos:end="27:26">!</operator><name pos:start="27:27" pos:end="27:36"><name pos:start="27:27" pos:end="27:27">s</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:36">samples</name></name></expr>)</condition> <block pos:start="27:39" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:23"><expr pos:start="29:9" pos:end="29:22"><operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:18">data_size</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:41">/* should not happen but who knows */</comment>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:59">(<expr pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:23">BLOCKS_PER_LOOP</name> <operator pos:start="39:25" pos:end="39:25">*</operator> <literal type="number" pos:start="39:27" pos:end="39:27">2</literal> <operator pos:start="39:29" pos:end="39:29">*</operator> <name pos:start="39:31" pos:end="39:45"><name pos:start="39:31" pos:end="39:35">avctx</name><operator pos:start="39:36" pos:end="39:37">-&gt;</operator><name pos:start="39:38" pos:end="39:45">channels</name></name> <operator pos:start="39:47" pos:end="39:47">&gt;</operator> <operator pos:start="39:49" pos:end="39:49">*</operator><name pos:start="39:50" pos:end="39:58">data_size</name></expr>)</condition> <block pos:start="39:61" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:164"><expr pos:start="41:9" pos:end="41:163"><call pos:start="41:9" pos:end="41:163"><name pos:start="41:9" pos:end="41:14">av_log</name> <argument_list pos:start="41:16" pos:end="41:163">(<argument pos:start="41:17" pos:end="41:21"><expr pos:start="41:17" pos:end="41:21"><name pos:start="41:17" pos:end="41:21">avctx</name></expr></argument>, <argument pos:start="41:24" pos:end="41:35"><expr pos:start="41:24" pos:end="41:35"><name pos:start="41:24" pos:end="41:35">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:38" pos:end="41:116"><expr pos:start="41:38" pos:end="41:116"><literal type="string" pos:start="41:38" pos:end="41:116">"Packet size is too big to be handled in lavc! (max is %d where you have %d)\n"</literal></expr></argument>, <argument pos:start="41:119" pos:end="41:128"><expr pos:start="41:119" pos:end="41:128"><operator pos:start="41:119" pos:end="41:119">*</operator><name pos:start="41:120" pos:end="41:128">data_size</name></expr></argument>, <argument pos:start="41:131" pos:end="41:162"><expr pos:start="41:131" pos:end="41:162"><name pos:start="41:131" pos:end="41:140"><name pos:start="41:131" pos:end="41:131">s</name><operator pos:start="41:132" pos:end="41:133">-&gt;</operator><name pos:start="41:134" pos:end="41:140">samples</name></name> <operator pos:start="41:142" pos:end="41:142">*</operator> <literal type="number" pos:start="41:144" pos:end="41:144">2</literal> <operator pos:start="41:146" pos:end="41:146">*</operator> <name pos:start="41:148" pos:end="41:162"><name pos:start="41:148" pos:end="41:152">avctx</name><operator pos:start="41:153" pos:end="41:154">-&gt;</operator><name pos:start="41:155" pos:end="41:162">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="103:5"><if pos:start="49:5" pos:end="103:5">if<condition pos:start="49:7" pos:end="49:19">(<expr pos:start="49:8" pos:end="49:18"><operator pos:start="49:8" pos:end="49:8">!</operator><name pos:start="49:9" pos:end="49:18"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:18">samples</name></name></expr>)</condition><block pos:start="49:20" pos:end="103:5">{<block_content pos:start="51:9" pos:end="101:30">

        <expr_stmt pos:start="51:9" pos:end="51:59"><expr pos:start="51:9" pos:end="51:58"><name pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:15">data</name></name> <operator pos:start="51:17" pos:end="51:17">=</operator> <call pos:start="51:19" pos:end="51:58"><name pos:start="51:19" pos:end="51:28">av_realloc</name><argument_list pos:start="51:29" pos:end="51:58">(<argument pos:start="51:30" pos:end="51:36"><expr pos:start="51:30" pos:end="51:36"><name pos:start="51:30" pos:end="51:36"><name pos:start="51:30" pos:end="51:30">s</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:36">data</name></name></expr></argument>, <argument pos:start="51:39" pos:end="51:57"><expr pos:start="51:39" pos:end="51:57"><operator pos:start="51:39" pos:end="51:39">(</operator><name pos:start="51:40" pos:end="51:47">buf_size</name> <operator pos:start="51:49" pos:end="51:49">+</operator> <literal type="number" pos:start="51:51" pos:end="51:51">3</literal><operator pos:start="51:52" pos:end="51:52">)</operator> <operator pos:start="51:54" pos:end="51:54">&amp;</operator> <operator pos:start="51:56" pos:end="51:56">~</operator><literal type="number" pos:start="51:57" pos:end="51:57">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:82"><expr pos:start="53:9" pos:end="53:81"><call pos:start="53:9" pos:end="53:81"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:14">dsp</name><operator pos:start="53:15" pos:end="53:15">.</operator><name pos:start="53:16" pos:end="53:24">bswap_buf</name></name><argument_list pos:start="53:25" pos:end="53:81">(<argument pos:start="53:26" pos:end="53:43"><expr pos:start="53:26" pos:end="53:43"><operator pos:start="53:26" pos:end="53:26">(</operator><name pos:start="53:27" pos:end="53:34">uint32_t</name><operator pos:start="53:35" pos:end="53:35">*</operator><operator pos:start="53:36" pos:end="53:36">)</operator><name pos:start="53:37" pos:end="53:43"><name pos:start="53:37" pos:end="53:37">s</name><operator pos:start="53:38" pos:end="53:39">-&gt;</operator><name pos:start="53:40" pos:end="53:43">data</name></name></expr></argument>, <argument pos:start="53:46" pos:end="53:65"><expr pos:start="53:46" pos:end="53:65"><operator pos:start="53:46" pos:end="53:46">(</operator><specifier pos:start="53:47" pos:end="53:51">const</specifier> <name pos:start="53:53" pos:end="53:60">uint32_t</name><operator pos:start="53:61" pos:end="53:61">*</operator><operator pos:start="53:62" pos:end="53:62">)</operator><name pos:start="53:63" pos:end="53:65">buf</name></expr></argument>, <argument pos:start="53:68" pos:end="53:80"><expr pos:start="53:68" pos:end="53:80"><name pos:start="53:68" pos:end="53:75">buf_size</name> <operator pos:start="53:77" pos:end="53:78">&gt;&gt;</operator> <literal type="number" pos:start="53:80" pos:end="53:80">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:39"><expr pos:start="55:9" pos:end="55:38"><name pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:14">ptr</name></name> <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:28"><name pos:start="55:18" pos:end="55:18">s</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:28">last_ptr</name></name> <operator pos:start="55:30" pos:end="55:30">=</operator> <name pos:start="55:32" pos:end="55:38"><name pos:start="55:32" pos:end="55:32">s</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:38">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:41"><expr pos:start="57:9" pos:end="57:40"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:19">data_end</name></name> <operator pos:start="57:21" pos:end="57:21">=</operator> <name pos:start="57:23" pos:end="57:29"><name pos:start="57:23" pos:end="57:23">s</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:29">data</name></name> <operator pos:start="57:31" pos:end="57:31">+</operator> <name pos:start="57:33" pos:end="57:40">buf_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:60"><expr pos:start="61:9" pos:end="61:59"><name pos:start="61:9" pos:end="61:15">nblocks</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:28"><name pos:start="61:19" pos:end="61:19">s</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:28">samples</name></name> <operator pos:start="61:30" pos:end="61:30">=</operator> <call pos:start="61:32" pos:end="61:59"><name pos:start="61:32" pos:end="61:50">bytestream_get_be32</name><argument_list pos:start="61:51" pos:end="61:59">(<argument pos:start="61:52" pos:end="61:58"><expr pos:start="61:52" pos:end="61:58"><operator pos:start="61:52" pos:end="61:52">&amp;</operator><name pos:start="61:53" pos:end="61:58"><name pos:start="61:53" pos:end="61:53">s</name><operator pos:start="61:54" pos:end="61:55">-&gt;</operator><name pos:start="61:56" pos:end="61:58">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:42"><expr pos:start="63:9" pos:end="63:41"><name pos:start="63:9" pos:end="63:9">n</name> <operator pos:start="63:11" pos:end="63:11">=</operator>  <call pos:start="63:14" pos:end="63:41"><name pos:start="63:14" pos:end="63:32">bytestream_get_be32</name><argument_list pos:start="63:33" pos:end="63:41">(<argument pos:start="63:34" pos:end="63:40"><expr pos:start="63:34" pos:end="63:40"><operator pos:start="63:34" pos:end="63:34">&amp;</operator><name pos:start="63:35" pos:end="63:40"><name pos:start="63:35" pos:end="63:35">s</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:40">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="73:9"><if pos:start="65:9" pos:end="73:9">if<condition pos:start="65:11" pos:end="65:26">(<expr pos:start="65:12" pos:end="65:25"><name pos:start="65:12" pos:end="65:23"><name pos:start="65:12" pos:end="65:12">n</name> <argument_list type="generic" pos:start="65:14" pos:end="65:23">&lt; <argument pos:start="65:16" pos:end="65:21"><expr pos:start="65:16" pos:end="65:21"><literal type="number" pos:start="65:16" pos:end="65:16">0</literal> <operator pos:start="65:18" pos:end="65:19">||</operator> <name pos:start="65:21" pos:end="65:21">n</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="65:25" pos:end="65:25">3</literal></expr>)</condition><block pos:start="65:27" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:22">

            <expr_stmt pos:start="67:13" pos:end="67:69"><expr pos:start="67:13" pos:end="67:68"><call pos:start="67:13" pos:end="67:68"><name pos:start="67:13" pos:end="67:18">av_log</name><argument_list pos:start="67:19" pos:end="67:68">(<argument pos:start="67:20" pos:end="67:24"><expr pos:start="67:20" pos:end="67:24"><name pos:start="67:20" pos:end="67:24">avctx</name></expr></argument>, <argument pos:start="67:27" pos:end="67:38"><expr pos:start="67:27" pos:end="67:38"><name pos:start="67:27" pos:end="67:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:41" pos:end="67:67"><expr pos:start="67:41" pos:end="67:67"><literal type="string" pos:start="67:41" pos:end="67:67">"Incorrect offset passed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:19">data</name></name> <operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:26">NULL</name></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:22">return <expr pos:start="71:20" pos:end="71:21"><operator pos:start="71:20" pos:end="71:20">-</operator><literal type="number" pos:start="71:21" pos:end="71:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:20"><expr pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:14">ptr</name></name> <operator pos:start="75:16" pos:end="75:17">+=</operator> <name pos:start="75:19" pos:end="75:19">n</name></expr>;</expr_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:40"><expr pos:start="79:9" pos:end="79:39"><name pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:29">currentframeblocks</name></name> <operator pos:start="79:31" pos:end="79:31">=</operator> <name pos:start="79:33" pos:end="79:39">nblocks</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:17"><expr pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:11">buf</name> <operator pos:start="81:13" pos:end="81:14">+=</operator> <literal type="number" pos:start="81:16" pos:end="81:16">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:28">(<expr pos:start="83:13" pos:end="83:27"><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:22">samples</name></name> <operator pos:start="83:24" pos:end="83:25">&lt;=</operator> <literal type="number" pos:start="83:27" pos:end="83:27">0</literal></expr>)</condition> <block pos:start="83:30" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:28">

            <expr_stmt pos:start="85:13" pos:end="85:27"><expr pos:start="85:13" pos:end="85:26"><operator pos:start="85:13" pos:end="85:13">*</operator><name pos:start="85:14" pos:end="85:22">data_size</name> <operator pos:start="85:24" pos:end="85:24">=</operator> <literal type="number" pos:start="85:26" pos:end="85:26">0</literal></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:28">return <expr pos:start="87:20" pos:end="87:27"><name pos:start="87:20" pos:end="87:27">buf_size</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:53"><expr pos:start="93:9" pos:end="93:52"><call pos:start="93:9" pos:end="93:52"><name pos:start="93:9" pos:end="93:14">memset</name><argument_list pos:start="93:15" pos:end="93:52">(<argument pos:start="93:16" pos:end="93:26"><expr pos:start="93:16" pos:end="93:26"><name pos:start="93:16" pos:end="93:26"><name pos:start="93:16" pos:end="93:16">s</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:26">decoded0</name></name></expr></argument>,  <argument pos:start="93:30" pos:end="93:30"><expr pos:start="93:30" pos:end="93:30"><literal type="number" pos:start="93:30" pos:end="93:30">0</literal></expr></argument>, <argument pos:start="93:33" pos:end="93:51"><expr pos:start="93:33" pos:end="93:51"><sizeof pos:start="93:33" pos:end="93:51">sizeof<argument_list pos:start="93:39" pos:end="93:51">(<argument pos:start="93:40" pos:end="93:50"><expr pos:start="93:40" pos:end="93:50"><name pos:start="93:40" pos:end="93:50"><name pos:start="93:40" pos:end="93:40">s</name><operator pos:start="93:41" pos:end="93:42">-&gt;</operator><name pos:start="93:43" pos:end="93:50">decoded0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:53"><expr pos:start="95:9" pos:end="95:52"><call pos:start="95:9" pos:end="95:52"><name pos:start="95:9" pos:end="95:14">memset</name><argument_list pos:start="95:15" pos:end="95:52">(<argument pos:start="95:16" pos:end="95:26"><expr pos:start="95:16" pos:end="95:26"><name pos:start="95:16" pos:end="95:26"><name pos:start="95:16" pos:end="95:16">s</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:26">decoded1</name></name></expr></argument>,  <argument pos:start="95:30" pos:end="95:30"><expr pos:start="95:30" pos:end="95:30"><literal type="number" pos:start="95:30" pos:end="95:30">0</literal></expr></argument>, <argument pos:start="95:33" pos:end="95:51"><expr pos:start="95:33" pos:end="95:51"><sizeof pos:start="95:33" pos:end="95:51">sizeof<argument_list pos:start="95:39" pos:end="95:51">(<argument pos:start="95:40" pos:end="95:50"><expr pos:start="95:40" pos:end="95:50"><name pos:start="95:40" pos:end="95:50"><name pos:start="95:40" pos:end="95:40">s</name><operator pos:start="95:41" pos:end="95:42">-&gt;</operator><name pos:start="95:43" pos:end="95:50">decoded1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="99:9" pos:end="99:42">/* Initialize the frame decoder */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:30"><expr pos:start="101:9" pos:end="101:29"><call pos:start="101:9" pos:end="101:29"><name pos:start="101:9" pos:end="101:26">init_frame_decoder</name><argument_list pos:start="101:27" pos:end="101:29">(<argument pos:start="101:28" pos:end="101:28"><expr pos:start="101:28" pos:end="101:28"><name pos:start="101:28" pos:end="101:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if <condition pos:start="107:8" pos:end="107:17">(<expr pos:start="107:9" pos:end="107:16"><operator pos:start="107:9" pos:end="107:9">!</operator><name pos:start="107:10" pos:end="107:16"><name pos:start="107:10" pos:end="107:10">s</name><operator pos:start="107:11" pos:end="107:12">-&gt;</operator><name pos:start="107:13" pos:end="107:16">data</name></name></expr>)</condition> <block pos:start="107:19" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:24">

        <expr_stmt pos:start="109:9" pos:end="109:23"><expr pos:start="109:9" pos:end="109:22"><operator pos:start="109:9" pos:end="109:9">*</operator><name pos:start="109:10" pos:end="109:18">data_size</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>;</expr_stmt>

        <return pos:start="111:9" pos:end="111:24">return <expr pos:start="111:16" pos:end="111:23"><name pos:start="111:16" pos:end="111:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:25"><expr pos:start="117:5" pos:end="117:24"><name pos:start="117:5" pos:end="117:11">nblocks</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <name pos:start="117:15" pos:end="117:24"><name pos:start="117:15" pos:end="117:15">s</name><operator pos:start="117:16" pos:end="117:17">-&gt;</operator><name pos:start="117:18" pos:end="117:24">samples</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:53"><expr pos:start="119:5" pos:end="119:52"><name pos:start="119:5" pos:end="119:18">blockstodecode</name> <operator pos:start="119:20" pos:end="119:20">=</operator> <call pos:start="119:22" pos:end="119:52"><name pos:start="119:22" pos:end="119:26">FFMIN</name><argument_list pos:start="119:27" pos:end="119:52">(<argument pos:start="119:28" pos:end="119:42"><expr pos:start="119:28" pos:end="119:42"><name pos:start="119:28" pos:end="119:42">BLOCKS_PER_LOOP</name></expr></argument>, <argument pos:start="119:45" pos:end="119:51"><expr pos:start="119:45" pos:end="119:51"><name pos:start="119:45" pos:end="119:51">nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:15"><expr pos:start="123:5" pos:end="123:14"><name pos:start="123:5" pos:end="123:12"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:12">error</name></name><operator pos:start="123:13" pos:end="123:13">=</operator><literal type="number" pos:start="123:14" pos:end="123:14">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="127:5" pos:end="133:45"><if pos:start="127:5" pos:end="129:43">if <condition pos:start="127:8" pos:end="127:76">(<expr pos:start="127:9" pos:end="127:75"><operator pos:start="127:9" pos:end="127:9">(</operator><name pos:start="127:10" pos:end="127:20"><name pos:start="127:10" pos:end="127:10">s</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:20">channels</name></name> <operator pos:start="127:22" pos:end="127:23">==</operator> <literal type="number" pos:start="127:25" pos:end="127:25">1</literal><operator pos:start="127:26" pos:end="127:26">)</operator> <operator pos:start="127:28" pos:end="127:29">||</operator> <operator pos:start="127:31" pos:end="127:31">(</operator><name pos:start="127:32" pos:end="127:44"><name pos:start="127:32" pos:end="127:32">s</name><operator pos:start="127:33" pos:end="127:34">-&gt;</operator><name pos:start="127:35" pos:end="127:44">frameflags</name></name> <operator pos:start="127:46" pos:end="127:46">&amp;</operator> <name pos:start="127:48" pos:end="127:74">APE_FRAMECODE_PSEUDO_STEREO</name><operator pos:start="127:75" pos:end="127:75">)</operator></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:43"><block_content pos:start="129:9" pos:end="129:43">

        <expr_stmt pos:start="129:9" pos:end="129:43"><expr pos:start="129:9" pos:end="129:42"><call pos:start="129:9" pos:end="129:42"><name pos:start="129:9" pos:end="129:23">ape_unpack_mono</name><argument_list pos:start="129:24" pos:end="129:42">(<argument pos:start="129:25" pos:end="129:25"><expr pos:start="129:25" pos:end="129:25"><name pos:start="129:25" pos:end="129:25">s</name></expr></argument>, <argument pos:start="129:28" pos:end="129:41"><expr pos:start="129:28" pos:end="129:41"><name pos:start="129:28" pos:end="129:41">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="131:5" pos:end="133:45">else<block type="pseudo" pos:start="133:9" pos:end="133:45"><block_content pos:start="133:9" pos:end="133:45">

        <expr_stmt pos:start="133:9" pos:end="133:45"><expr pos:start="133:9" pos:end="133:44"><call pos:start="133:9" pos:end="133:44"><name pos:start="133:9" pos:end="133:25">ape_unpack_stereo</name><argument_list pos:start="133:26" pos:end="133:44">(<argument pos:start="133:27" pos:end="133:27"><expr pos:start="133:27" pos:end="133:27"><name pos:start="133:27" pos:end="133:27">s</name></expr></argument>, <argument pos:start="133:30" pos:end="133:43"><expr pos:start="133:30" pos:end="133:43"><name pos:start="133:30" pos:end="133:43">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:13"><expr pos:start="135:5" pos:end="135:12"><call pos:start="135:5" pos:end="135:12"><name pos:start="135:5" pos:end="135:10">emms_c</name><argument_list pos:start="135:11" pos:end="135:12">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="147:5"><if pos:start="139:5" pos:end="147:5">if<condition pos:start="139:7" pos:end="139:40">(<expr pos:start="139:8" pos:end="139:39"><name pos:start="139:8" pos:end="139:15"><name pos:start="139:8" pos:end="139:8">s</name><operator pos:start="139:9" pos:end="139:10">-&gt;</operator><name pos:start="139:11" pos:end="139:15">error</name></name> <operator pos:start="139:17" pos:end="139:18">||</operator> <name pos:start="139:20" pos:end="139:25"><name pos:start="139:20" pos:end="139:20">s</name><operator pos:start="139:21" pos:end="139:22">-&gt;</operator><name pos:start="139:23" pos:end="139:25">ptr</name></name> <operator pos:start="139:27" pos:end="139:27">&gt;</operator> <name pos:start="139:29" pos:end="139:39"><name pos:start="139:29" pos:end="139:29">s</name><operator pos:start="139:30" pos:end="139:31">-&gt;</operator><name pos:start="139:32" pos:end="139:39">data_end</name></name></expr>)</condition><block pos:start="139:41" pos:end="147:5">{<block_content pos:start="141:9" pos:end="145:18">

        <expr_stmt pos:start="141:9" pos:end="141:21"><expr pos:start="141:9" pos:end="141:20"><name pos:start="141:9" pos:end="141:18"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:18">samples</name></name><operator pos:start="141:19" pos:end="141:19">=</operator><literal type="number" pos:start="141:20" pos:end="141:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:62"><expr pos:start="143:9" pos:end="143:61"><call pos:start="143:9" pos:end="143:61"><name pos:start="143:9" pos:end="143:14">av_log</name><argument_list pos:start="143:15" pos:end="143:61">(<argument pos:start="143:16" pos:end="143:20"><expr pos:start="143:16" pos:end="143:20"><name pos:start="143:16" pos:end="143:20">avctx</name></expr></argument>, <argument pos:start="143:23" pos:end="143:34"><expr pos:start="143:23" pos:end="143:34"><name pos:start="143:23" pos:end="143:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="143:37" pos:end="143:60"><expr pos:start="143:37" pos:end="143:60"><literal type="string" pos:start="143:37" pos:end="143:60">"Error decoding frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="145:9" pos:end="145:18">return <expr pos:start="145:16" pos:end="145:17"><operator pos:start="145:16" pos:end="145:16">-</operator><literal type="number" pos:start="145:17" pos:end="145:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="151:5" pos:end="159:5">for <control pos:start="151:9" pos:end="151:40">(<init pos:start="151:10" pos:end="151:15"><expr pos:start="151:10" pos:end="151:14"><name pos:start="151:10" pos:end="151:10">i</name> <operator pos:start="151:12" pos:end="151:12">=</operator> <literal type="number" pos:start="151:14" pos:end="151:14">0</literal></expr>;</init> <condition pos:start="151:17" pos:end="151:35"><expr pos:start="151:17" pos:end="151:34"><name pos:start="151:17" pos:end="151:17">i</name> <operator pos:start="151:19" pos:end="151:19">&lt;</operator> <name pos:start="151:21" pos:end="151:34">blockstodecode</name></expr>;</condition> <incr pos:start="151:37" pos:end="151:39"><expr pos:start="151:37" pos:end="151:39"><name pos:start="151:37" pos:end="151:37">i</name><operator pos:start="151:38" pos:end="151:39">++</operator></expr></incr>)</control> <block pos:start="151:42" pos:end="159:5">{<block_content pos:start="153:9" pos:end="157:40">

        <expr_stmt pos:start="153:9" pos:end="153:36"><expr pos:start="153:9" pos:end="153:35"><operator pos:start="153:9" pos:end="153:9">*</operator><name pos:start="153:10" pos:end="153:16">samples</name><operator pos:start="153:17" pos:end="153:18">++</operator> <operator pos:start="153:20" pos:end="153:20">=</operator> <name pos:start="153:22" pos:end="153:35"><name pos:start="153:22" pos:end="153:22">s</name><operator pos:start="153:23" pos:end="153:24">-&gt;</operator><name pos:start="153:25" pos:end="153:32">decoded0</name><index pos:start="153:33" pos:end="153:35">[<expr pos:start="153:34" pos:end="153:34"><name pos:start="153:34" pos:end="153:34">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="155:9" pos:end="157:40"><if pos:start="155:9" pos:end="157:40">if<condition pos:start="155:11" pos:end="155:28">(<expr pos:start="155:12" pos:end="155:27"><name pos:start="155:12" pos:end="155:22"><name pos:start="155:12" pos:end="155:12">s</name><operator pos:start="155:13" pos:end="155:14">-&gt;</operator><name pos:start="155:15" pos:end="155:22">channels</name></name> <operator pos:start="155:24" pos:end="155:25">==</operator> <literal type="number" pos:start="155:27" pos:end="155:27">2</literal></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:40"><block_content pos:start="157:13" pos:end="157:40">

            <expr_stmt pos:start="157:13" pos:end="157:40"><expr pos:start="157:13" pos:end="157:39"><operator pos:start="157:13" pos:end="157:13">*</operator><name pos:start="157:14" pos:end="157:20">samples</name><operator pos:start="157:21" pos:end="157:22">++</operator> <operator pos:start="157:24" pos:end="157:24">=</operator> <name pos:start="157:26" pos:end="157:39"><name pos:start="157:26" pos:end="157:26">s</name><operator pos:start="157:27" pos:end="157:28">-&gt;</operator><name pos:start="157:29" pos:end="157:36">decoded1</name><index pos:start="157:37" pos:end="157:39">[<expr pos:start="157:38" pos:end="157:38"><name pos:start="157:38" pos:end="157:38">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="163:5" pos:end="163:33"><expr pos:start="163:5" pos:end="163:32"><name pos:start="163:5" pos:end="163:14"><name pos:start="163:5" pos:end="163:5">s</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:14">samples</name></name> <operator pos:start="163:16" pos:end="163:17">-=</operator> <name pos:start="163:19" pos:end="163:32">blockstodecode</name></expr>;</expr_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:50"><expr pos:start="167:5" pos:end="167:49"><operator pos:start="167:5" pos:end="167:5">*</operator><name pos:start="167:6" pos:end="167:14">data_size</name> <operator pos:start="167:16" pos:end="167:16">=</operator> <name pos:start="167:18" pos:end="167:31">blockstodecode</name> <operator pos:start="167:33" pos:end="167:33">*</operator> <literal type="number" pos:start="167:35" pos:end="167:35">2</literal> <operator pos:start="167:37" pos:end="167:37">*</operator> <name pos:start="167:39" pos:end="167:49"><name pos:start="167:39" pos:end="167:39">s</name><operator pos:start="167:40" pos:end="167:41">-&gt;</operator><name pos:start="167:42" pos:end="167:49">channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:62"><expr pos:start="169:5" pos:end="169:61"><name pos:start="169:5" pos:end="169:14">bytes_used</name> <operator pos:start="169:16" pos:end="169:16">=</operator> <ternary pos:start="169:18" pos:end="169:61"><condition pos:start="169:18" pos:end="169:29"><expr pos:start="169:18" pos:end="169:27"><name pos:start="169:18" pos:end="169:27"><name pos:start="169:18" pos:end="169:18">s</name><operator pos:start="169:19" pos:end="169:20">-&gt;</operator><name pos:start="169:21" pos:end="169:27">samples</name></name></expr> ?</condition><then pos:start="169:31" pos:end="169:50"> <expr pos:start="169:31" pos:end="169:50"><name pos:start="169:31" pos:end="169:36"><name pos:start="169:31" pos:end="169:31">s</name><operator pos:start="169:32" pos:end="169:33">-&gt;</operator><name pos:start="169:34" pos:end="169:36">ptr</name></name> <operator pos:start="169:38" pos:end="169:38">-</operator> <name pos:start="169:40" pos:end="169:50"><name pos:start="169:40" pos:end="169:40">s</name><operator pos:start="169:41" pos:end="169:42">-&gt;</operator><name pos:start="169:43" pos:end="169:50">last_ptr</name></name></expr> </then><else pos:start="169:52" pos:end="169:61">: <expr pos:start="169:54" pos:end="169:61"><name pos:start="169:54" pos:end="169:61">buf_size</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:25"><expr pos:start="171:5" pos:end="171:24"><name pos:start="171:5" pos:end="171:15"><name pos:start="171:5" pos:end="171:5">s</name><operator pos:start="171:6" pos:end="171:7">-&gt;</operator><name pos:start="171:8" pos:end="171:15">last_ptr</name></name> <operator pos:start="171:17" pos:end="171:17">=</operator> <name pos:start="171:19" pos:end="171:24"><name pos:start="171:19" pos:end="171:19">s</name><operator pos:start="171:20" pos:end="171:21">-&gt;</operator><name pos:start="171:22" pos:end="171:24">ptr</name></name></expr>;</expr_stmt>

    <return pos:start="173:5" pos:end="173:22">return <expr pos:start="173:12" pos:end="173:21"><name pos:start="173:12" pos:end="173:21">bytes_used</name></expr>;</return>

</block_content>}</block></function>
</unit>
