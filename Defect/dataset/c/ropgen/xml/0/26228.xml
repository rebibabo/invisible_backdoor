<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26228.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:26">kqemu_vmalloc</name><parameter_list pos:start="1:27" pos:end="1:39">(<parameter pos:start="1:28" pos:end="1:38"><decl pos:start="1:28" pos:end="1:38"><type pos:start="1:28" pos:end="1:33"><name pos:start="1:28" pos:end="1:33">size_t</name></type> <name pos:start="1:35" pos:end="1:38">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="179:1">{<block_content pos:start="5:5" pos:end="179:1">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:14"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <name pos:start="5:12" pos:end="5:14">int</name></type> <name pos:start="5:16" pos:end="5:26">phys_ram_fd</name> <init pos:start="5:28" pos:end="5:31">= <expr pos:start="5:30" pos:end="5:31"><operator pos:start="5:30" pos:end="5:30">-</operator><literal type="number" pos:start="5:31" pos:end="5:31">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:14"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:14">int</name></type> <name pos:start="7:16" pos:end="7:28">phys_ram_size</name> <init pos:start="7:30" pos:end="7:32">= <expr pos:start="7:32" pos:end="7:32"><literal type="number" pos:start="7:32" pos:end="7:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="16:0"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">void</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">ptr</name></decl>;</decl_stmt>



<comment type="block" pos:start="13:1" pos:end="13:53">/* no need (?) for a dummy file on OpenBSD/FreeBSD */</comment>

<cpp:if pos:start="15:1" pos:end="15:74">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:74"><call pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:11">defined</name><argument_list pos:start="15:12" pos:end="15:24">(<argument pos:start="15:13" pos:end="15:23"><expr pos:start="15:13" pos:end="15:23"><name pos:start="15:13" pos:end="15:23">__OpenBSD__</name></expr></argument>)</argument_list></call> <operator pos:start="15:26" pos:end="15:27">||</operator> <call pos:start="15:29" pos:end="15:48"><name pos:start="15:29" pos:end="15:35">defined</name><argument_list pos:start="15:36" pos:end="15:48">(<argument pos:start="15:37" pos:end="15:47"><expr pos:start="15:37" pos:end="15:47"><name pos:start="15:37" pos:end="15:47">__FreeBSD__</name></expr></argument>)</argument_list></call> <operator pos:start="15:50" pos:end="15:51">||</operator> <call pos:start="15:53" pos:end="15:74"><name pos:start="15:53" pos:end="15:59">defined</name><argument_list pos:start="15:60" pos:end="15:74">(<argument pos:start="15:61" pos:end="15:73"><expr pos:start="15:61" pos:end="15:73"><name pos:start="15:61" pos:end="15:73">__DragonFly__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:16">map_anon</name> <init pos:start="17:18" pos:end="17:27">= <expr pos:start="17:20" pos:end="17:27"><name pos:start="17:20" pos:end="17:27">MAP_ANON</name></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="19:1" pos:end="19:5">#<cpp:directive pos:start="19:2" pos:end="19:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:16">map_anon</name> <init pos:start="21:18" pos:end="21:20">= <expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:16"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:14">char</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:22">tmpdir</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="28:0"><decl pos:start="25:5" pos:end="25:28"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">char</name></type> <name pos:start="25:10" pos:end="25:28"><name pos:start="25:10" pos:end="25:22">phys_ram_file</name><index pos:start="25:23" pos:end="25:28">[<expr pos:start="25:24" pos:end="25:27"><literal type="number" pos:start="25:24" pos:end="25:27">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:ifdef pos:start="27:1" pos:end="27:21">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:21">CONFIG_SOLARIS</name></cpp:ifdef>

    <decl_stmt pos:start="29:5" pos:end="32:0"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:10">struct</name> <name pos:start="29:12" pos:end="29:18">statvfs</name></name></type> <name pos:start="29:20" pos:end="29:23">stfs</name></decl>;</decl_stmt>

<cpp:else pos:start="31:1" pos:end="31:5">#<cpp:directive pos:start="31:2" pos:end="31:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="33:5" pos:end="36:0"><decl pos:start="33:5" pos:end="33:22"><type pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:10">struct</name> <name pos:start="33:12" pos:end="33:17">statfs</name></name></type> <name pos:start="33:19" pos:end="33:22">stfs</name></decl>;</decl_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:14">(<expr pos:start="39:9" pos:end="39:13"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:13">size</name></expr>)</condition> <block pos:start="39:16" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:17">

        <expr_stmt pos:start="41:9" pos:end="41:17"><expr pos:start="41:9" pos:end="41:16"><call pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:13">abort</name> <argument_list pos:start="41:15" pos:end="41:16">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="179:1"><if pos:start="47:5" pos:end="179:1">if <condition pos:start="47:8" pos:end="47:24">(<expr pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:19">phys_ram_fd</name> <operator pos:start="47:21" pos:end="47:21">&lt;</operator> <literal type="number" pos:start="47:23" pos:end="47:23">0</literal></expr>)</condition> <block pos:start="47:26" pos:end="179:1">{<block_content pos:start="49:9" pos:end="177:15">

        <expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:14">tmpdir</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:38"><name pos:start="49:18" pos:end="49:23">getenv</name><argument_list pos:start="49:24" pos:end="49:38">(<argument pos:start="49:25" pos:end="49:37"><expr pos:start="49:25" pos:end="49:37"><literal type="string" pos:start="49:25" pos:end="49:37">"QEMU_TMPDIR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:28"><if pos:start="51:9" pos:end="55:28">if <condition pos:start="51:12" pos:end="54:0">(<expr pos:start="51:13" pos:end="51:19"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:19">tmpdir</name></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:28"><block_content pos:start="55:13" pos:end="55:28">

<cpp:ifdef pos:start="53:1" pos:end="53:21">#<cpp:directive pos:start="53:2" pos:end="53:6">ifdef</cpp:directive> <name pos:start="53:8" pos:end="53:21">CONFIG_SOLARIS</name></cpp:ifdef>

            <expr_stmt pos:start="55:13" pos:end="55:28"><expr pos:start="55:13" pos:end="55:27"><name pos:start="55:13" pos:end="55:18">tmpdir</name> <operator pos:start="55:20" pos:end="55:20">=</operator> <literal type="string" pos:start="55:22" pos:end="55:27">"/tmp"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="151:5"><if pos:start="57:9" pos:end="151:5">if <condition pos:start="57:12" pos:end="57:40">(<expr pos:start="57:13" pos:end="57:39"><call pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:19">statvfs</name><argument_list pos:start="57:20" pos:end="57:34">(<argument pos:start="57:21" pos:end="57:26"><expr pos:start="57:21" pos:end="57:26"><name pos:start="57:21" pos:end="57:26">tmpdir</name></expr></argument>, <argument pos:start="57:29" pos:end="57:33"><expr pos:start="57:29" pos:end="57:33"><operator pos:start="57:29" pos:end="57:29">&amp;</operator><name pos:start="57:30" pos:end="57:33">stfs</name></expr></argument>)</argument_list></call> <operator pos:start="57:36" pos:end="57:37">==</operator> <literal type="number" pos:start="57:39" pos:end="57:39">0</literal></expr>)</condition> <block pos:start="57:42" pos:end="151:5">{<block_content pos:start="61:13" pos:end="149:30">

<cpp:else pos:start="59:1" pos:end="59:5">#<cpp:directive pos:start="59:2" pos:end="59:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="61:13" pos:end="61:32"><expr pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:18">tmpdir</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <literal type="string" pos:start="61:22" pos:end="61:31">"/dev/shm"</literal></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="111:9"><if pos:start="63:9" pos:end="111:9">if <condition pos:start="63:12" pos:end="63:39">(<expr pos:start="63:13" pos:end="63:38"><call pos:start="63:13" pos:end="63:33"><name pos:start="63:13" pos:end="63:18">statfs</name><argument_list pos:start="63:19" pos:end="63:33">(<argument pos:start="63:20" pos:end="63:25"><expr pos:start="63:20" pos:end="63:25"><name pos:start="63:20" pos:end="63:25">tmpdir</name></expr></argument>, <argument pos:start="63:28" pos:end="63:32"><expr pos:start="63:28" pos:end="63:32"><operator pos:start="63:28" pos:end="63:28">&amp;</operator><name pos:start="63:29" pos:end="63:32">stfs</name></expr></argument>)</argument_list></call> <operator pos:start="63:35" pos:end="63:36">==</operator> <literal type="number" pos:start="63:38" pos:end="63:38">0</literal></expr>)</condition> <block pos:start="63:41" pos:end="111:9">{<block_content pos:start="67:13" pos:end="109:13">

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

            <decl_stmt pos:start="67:13" pos:end="67:31"><decl pos:start="67:13" pos:end="67:30"><type pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:19">int64_t</name></type> <name pos:start="67:21" pos:end="67:30">free_space</name></decl>;</decl_stmt>

            <decl_stmt pos:start="69:13" pos:end="69:23"><decl pos:start="69:13" pos:end="69:22"><type pos:start="69:13" pos:end="69:15"><name pos:start="69:13" pos:end="69:15">int</name></type> <name pos:start="69:17" pos:end="69:22">ram_mb</name></decl>;</decl_stmt>



            <expr_stmt pos:start="73:13" pos:end="73:63"><expr pos:start="73:13" pos:end="73:62"><name pos:start="73:13" pos:end="73:22">free_space</name> <operator pos:start="73:24" pos:end="73:24">=</operator> <operator pos:start="73:26" pos:end="73:26">(</operator><name pos:start="73:27" pos:end="73:33">int64_t</name><operator pos:start="73:34" pos:end="73:34">)</operator><name pos:start="73:35" pos:end="73:47"><name pos:start="73:35" pos:end="73:38">stfs</name><operator pos:start="73:39" pos:end="73:39">.</operator><name pos:start="73:40" pos:end="73:47">f_bavail</name></name> <operator pos:start="73:49" pos:end="73:49">*</operator> <name pos:start="73:51" pos:end="73:62"><name pos:start="73:51" pos:end="73:54">stfs</name><operator pos:start="73:55" pos:end="73:55">.</operator><name pos:start="73:56" pos:end="73:62">f_bsize</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="75:13" pos:end="109:13"><if pos:start="75:13" pos:end="109:13">if <condition pos:start="75:16" pos:end="75:55">(<expr pos:start="75:17" pos:end="75:54"><operator pos:start="75:17" pos:end="75:17">(</operator><name pos:start="75:18" pos:end="75:25">ram_size</name> <operator pos:start="75:27" pos:end="75:27">+</operator> <literal type="number" pos:start="75:29" pos:end="75:32">8192</literal> <operator pos:start="75:34" pos:end="75:34">*</operator> <literal type="number" pos:start="75:36" pos:end="75:39">1024</literal><operator pos:start="75:40" pos:end="75:40">)</operator> <operator pos:start="75:42" pos:end="75:43">&gt;=</operator> <name pos:start="75:45" pos:end="75:54">free_space</name></expr>)</condition> <block pos:start="75:57" pos:end="109:13">{<block_content pos:start="77:17" pos:end="107:24">

                <expr_stmt pos:start="77:17" pos:end="77:52"><expr pos:start="77:17" pos:end="77:51"><name pos:start="77:17" pos:end="77:22">ram_mb</name> <operator pos:start="77:24" pos:end="77:24">=</operator> <operator pos:start="77:26" pos:end="77:26">(</operator><name pos:start="77:27" pos:end="77:34">ram_size</name> <operator pos:start="77:36" pos:end="77:36">/</operator> <operator pos:start="77:38" pos:end="77:38">(</operator><literal type="number" pos:start="77:39" pos:end="77:42">1024</literal> <operator pos:start="77:44" pos:end="77:44">*</operator> <literal type="number" pos:start="77:46" pos:end="77:49">1024</literal><operator pos:start="77:50" pos:end="77:50">)</operator><operator pos:start="77:51" pos:end="77:51">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="83:40"><expr pos:start="79:17" pos:end="83:39"><call pos:start="79:17" pos:end="83:39"><name pos:start="79:17" pos:end="79:23">fprintf</name><argument_list pos:start="79:24" pos:end="83:39">(<argument pos:start="79:25" pos:end="79:30"><expr pos:start="79:25" pos:end="79:30"><name pos:start="79:25" pos:end="79:30">stderr</name></expr></argument>,

                        <argument pos:start="81:25" pos:end="81:99"><expr pos:start="81:25" pos:end="81:99"><literal type="string" pos:start="81:25" pos:end="81:99">"You do not have enough space in '%s' for the %d MB of QEMU virtual RAM.\n"</literal></expr></argument>,

                        <argument pos:start="83:25" pos:end="83:30"><expr pos:start="83:25" pos:end="83:30"><name pos:start="83:25" pos:end="83:30">tmpdir</name></expr></argument>, <argument pos:start="83:33" pos:end="83:38"><expr pos:start="83:33" pos:end="83:38"><name pos:start="83:33" pos:end="83:38">ram_mb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="85:17" pos:end="103:17"><if pos:start="85:17" pos:end="93:17">if <condition pos:start="85:20" pos:end="85:52">(<expr pos:start="85:21" pos:end="85:51"><call pos:start="85:21" pos:end="85:46"><name pos:start="85:21" pos:end="85:26">strcmp</name><argument_list pos:start="85:27" pos:end="85:46">(<argument pos:start="85:28" pos:end="85:33"><expr pos:start="85:28" pos:end="85:33"><name pos:start="85:28" pos:end="85:33">tmpdir</name></expr></argument>, <argument pos:start="85:36" pos:end="85:45"><expr pos:start="85:36" pos:end="85:45"><literal type="string" pos:start="85:36" pos:end="85:45">"/dev/shm"</literal></expr></argument>)</argument_list></call> <operator pos:start="85:48" pos:end="85:49">==</operator> <literal type="number" pos:start="85:51" pos:end="85:51">0</literal></expr>)</condition> <block pos:start="85:54" pos:end="93:17">{<block_content pos:start="87:21" pos:end="91:41">

                    <expr_stmt pos:start="87:21" pos:end="91:41"><expr pos:start="87:21" pos:end="91:40"><call pos:start="87:21" pos:end="91:40"><name pos:start="87:21" pos:end="87:27">fprintf</name><argument_list pos:start="87:28" pos:end="91:40">(<argument pos:start="87:29" pos:end="87:34"><expr pos:start="87:29" pos:end="87:34"><name pos:start="87:29" pos:end="87:34">stderr</name></expr></argument>, <argument pos:start="87:37" pos:end="89:66"><expr pos:start="87:37" pos:end="89:66"><literal type="string" pos:start="87:37" pos:end="87:119">"To have more space available provided you have enough RAM and swap, do as root:\n"</literal>

                            <literal type="string" pos:start="89:29" pos:end="89:66">"mount -o remount,size=%dm /dev/shm\n"</literal></expr></argument>,

                            <argument pos:start="91:29" pos:end="91:39"><expr pos:start="91:29" pos:end="91:39"><name pos:start="91:29" pos:end="91:34">ram_mb</name> <operator pos:start="91:36" pos:end="91:36">+</operator> <literal type="number" pos:start="91:38" pos:end="91:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="93:19" pos:end="103:17">else <block pos:start="93:24" pos:end="103:17">{<block_content pos:start="95:21" pos:end="101:68">

                    <expr_stmt pos:start="95:21" pos:end="101:68"><expr pos:start="95:21" pos:end="101:67"><call pos:start="95:21" pos:end="101:67"><name pos:start="95:21" pos:end="95:27">fprintf</name><argument_list pos:start="95:28" pos:end="101:67">(<argument pos:start="95:29" pos:end="95:34"><expr pos:start="95:29" pos:end="95:34"><name pos:start="95:29" pos:end="95:34">stderr</name></expr></argument>,

                            <argument pos:start="97:29" pos:end="101:66"><expr pos:start="97:29" pos:end="101:66"><literal type="string" pos:start="97:29" pos:end="97:108">"Use the '-m' option of QEMU to diminish the amount of virtual RAM or use the\n"</literal>

                            <literal type="string" pos:start="99:29" pos:end="99:104">"QEMU_TMPDIR environment variable to set another directory where the QEMU\n"</literal>

                            <literal type="string" pos:start="101:29" pos:end="101:66">"temporary RAM file will be opened.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:86"><expr pos:start="105:17" pos:end="105:85"><call pos:start="105:17" pos:end="105:85"><name pos:start="105:17" pos:end="105:23">fprintf</name><argument_list pos:start="105:24" pos:end="105:85">(<argument pos:start="105:25" pos:end="105:30"><expr pos:start="105:25" pos:end="105:30"><name pos:start="105:25" pos:end="105:30">stderr</name></expr></argument>, <argument pos:start="105:33" pos:end="105:84"><expr pos:start="105:33" pos:end="105:84"><literal type="string" pos:start="105:33" pos:end="105:84">"Or disable the accelerator module with -no-kqemu\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:24"><expr pos:start="107:17" pos:end="107:23"><call pos:start="107:17" pos:end="107:23"><name pos:start="107:17" pos:end="107:20">exit</name><argument_list pos:start="107:21" pos:end="107:23">(<argument pos:start="107:22" pos:end="107:22"><expr pos:start="107:22" pos:end="107:22"><literal type="number" pos:start="107:22" pos:end="107:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="115:25"><expr pos:start="113:9" pos:end="115:24"><call pos:start="113:9" pos:end="115:24"><name pos:start="113:9" pos:end="113:16">snprintf</name><argument_list pos:start="113:17" pos:end="115:24">(<argument pos:start="113:18" pos:end="113:30"><expr pos:start="113:18" pos:end="113:30"><name pos:start="113:18" pos:end="113:30">phys_ram_file</name></expr></argument>, <argument pos:start="113:33" pos:end="113:53"><expr pos:start="113:33" pos:end="113:53"><sizeof pos:start="113:33" pos:end="113:53">sizeof<argument_list pos:start="113:39" pos:end="113:53">(<argument pos:start="113:40" pos:end="113:52"><expr pos:start="113:40" pos:end="113:52"><name pos:start="113:40" pos:end="113:52">phys_ram_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="113:56" pos:end="113:70"><expr pos:start="113:56" pos:end="113:70"><literal type="string" pos:start="113:56" pos:end="113:70">"%s/qemuXXXXXX"</literal></expr></argument>,

                 <argument pos:start="115:18" pos:end="115:23"><expr pos:start="115:18" pos:end="115:23"><name pos:start="115:18" pos:end="115:23">tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:45"><expr pos:start="117:9" pos:end="117:44"><name pos:start="117:9" pos:end="117:19">phys_ram_fd</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:44"><name pos:start="117:23" pos:end="117:29">mkstemp</name><argument_list pos:start="117:30" pos:end="117:44">(<argument pos:start="117:31" pos:end="117:43"><expr pos:start="117:31" pos:end="117:43"><name pos:start="117:31" pos:end="117:43">phys_ram_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="147:9"><if pos:start="119:9" pos:end="147:9">if <condition pos:start="119:12" pos:end="119:28">(<expr pos:start="119:13" pos:end="119:27"><name pos:start="119:13" pos:end="119:23">phys_ram_fd</name> <operator pos:start="119:25" pos:end="119:25">&lt;</operator> <literal type="number" pos:start="119:27" pos:end="119:27">0</literal></expr>)</condition> <block pos:start="119:30" pos:end="147:9">{<block_content pos:start="121:13" pos:end="145:13">

            <expr_stmt pos:start="121:13" pos:end="129:28"><expr pos:start="121:13" pos:end="129:27"><call pos:start="121:13" pos:end="129:27"><name pos:start="121:13" pos:end="121:19">fprintf</name><argument_list pos:start="121:20" pos:end="129:27">(<argument pos:start="121:21" pos:end="121:26"><expr pos:start="121:21" pos:end="121:26"><name pos:start="121:21" pos:end="121:26">stderr</name></expr></argument>,

                    <argument pos:start="123:21" pos:end="127:49"><expr pos:start="123:21" pos:end="127:49"><literal type="string" pos:start="123:21" pos:end="123:73">"warning: could not create temporary file in '%s'.\n"</literal>

                    <literal type="string" pos:start="125:21" pos:end="125:84">"Use QEMU_TMPDIR to select a directory in a tmpfs filesystem.\n"</literal>

                    <literal type="string" pos:start="127:21" pos:end="127:49">"Using '/tmp' as fallback.\n"</literal></expr></argument>,

                    <argument pos:start="129:21" pos:end="129:26"><expr pos:start="129:21" pos:end="129:26"><name pos:start="129:21" pos:end="129:26">tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="133:29"><expr pos:start="131:13" pos:end="133:28"><call pos:start="131:13" pos:end="133:28"><name pos:start="131:13" pos:end="131:20">snprintf</name><argument_list pos:start="131:21" pos:end="133:28">(<argument pos:start="131:22" pos:end="131:34"><expr pos:start="131:22" pos:end="131:34"><name pos:start="131:22" pos:end="131:34">phys_ram_file</name></expr></argument>, <argument pos:start="131:37" pos:end="131:57"><expr pos:start="131:37" pos:end="131:57"><sizeof pos:start="131:37" pos:end="131:57">sizeof<argument_list pos:start="131:43" pos:end="131:57">(<argument pos:start="131:44" pos:end="131:56"><expr pos:start="131:44" pos:end="131:56"><name pos:start="131:44" pos:end="131:56">phys_ram_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="131:60" pos:end="131:74"><expr pos:start="131:60" pos:end="131:74"><literal type="string" pos:start="131:60" pos:end="131:74">"%s/qemuXXXXXX"</literal></expr></argument>,

                     <argument pos:start="133:22" pos:end="133:27"><expr pos:start="133:22" pos:end="133:27"><literal type="string" pos:start="133:22" pos:end="133:27">"/tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:49"><expr pos:start="135:13" pos:end="135:48"><name pos:start="135:13" pos:end="135:23">phys_ram_fd</name> <operator pos:start="135:25" pos:end="135:25">=</operator> <call pos:start="135:27" pos:end="135:48"><name pos:start="135:27" pos:end="135:33">mkstemp</name><argument_list pos:start="135:34" pos:end="135:48">(<argument pos:start="135:35" pos:end="135:47"><expr pos:start="135:35" pos:end="135:47"><name pos:start="135:35" pos:end="135:47">phys_ram_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="145:13"><if pos:start="137:13" pos:end="145:13">if <condition pos:start="137:16" pos:end="137:32">(<expr pos:start="137:17" pos:end="137:31"><name pos:start="137:17" pos:end="137:27">phys_ram_fd</name> <operator pos:start="137:29" pos:end="137:29">&lt;</operator> <literal type="number" pos:start="137:31" pos:end="137:31">0</literal></expr>)</condition> <block pos:start="137:34" pos:end="145:13">{<block_content pos:start="139:17" pos:end="143:24">

                <expr_stmt pos:start="139:17" pos:end="141:39"><expr pos:start="139:17" pos:end="141:38"><call pos:start="139:17" pos:end="141:38"><name pos:start="139:17" pos:end="139:23">fprintf</name><argument_list pos:start="139:24" pos:end="141:38">(<argument pos:start="139:25" pos:end="139:30"><expr pos:start="139:25" pos:end="139:30"><name pos:start="139:25" pos:end="139:30">stderr</name></expr></argument>, <argument pos:start="139:33" pos:end="139:79"><expr pos:start="139:33" pos:end="139:79"><literal type="string" pos:start="139:33" pos:end="139:79">"Could not create temporary memory file '%s'\n"</literal></expr></argument>,

                        <argument pos:start="141:25" pos:end="141:37"><expr pos:start="141:25" pos:end="141:37"><name pos:start="141:25" pos:end="141:37">phys_ram_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:24"><expr pos:start="143:17" pos:end="143:23"><call pos:start="143:17" pos:end="143:23"><name pos:start="143:17" pos:end="143:20">exit</name><argument_list pos:start="143:21" pos:end="143:23">(<argument pos:start="143:22" pos:end="143:22"><expr pos:start="143:22" pos:end="143:22"><literal type="number" pos:start="143:22" pos:end="143:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:30"><expr pos:start="149:9" pos:end="149:29"><call pos:start="149:9" pos:end="149:29"><name pos:start="149:9" pos:end="149:14">unlink</name><argument_list pos:start="149:15" pos:end="149:29">(<argument pos:start="149:16" pos:end="149:28"><expr pos:start="149:16" pos:end="149:28"><name pos:start="149:16" pos:end="149:28">phys_ram_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:33"><expr pos:start="153:5" pos:end="153:32"><name pos:start="153:5" pos:end="153:8">size</name> <operator pos:start="153:10" pos:end="153:10">=</operator> <operator pos:start="153:12" pos:end="153:12">(</operator><name pos:start="153:13" pos:end="153:16">size</name> <operator pos:start="153:18" pos:end="153:18">+</operator> <literal type="number" pos:start="153:20" pos:end="153:23">4095</literal><operator pos:start="153:24" pos:end="153:24">)</operator> <operator pos:start="153:26" pos:end="153:26">&amp;</operator> <operator pos:start="153:28" pos:end="153:28">~</operator><literal type="number" pos:start="153:29" pos:end="153:32">4095</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="158:0"><expr pos:start="155:5" pos:end="155:48"><call pos:start="155:5" pos:end="155:48"><name pos:start="155:5" pos:end="155:13">ftruncate</name><argument_list pos:start="155:14" pos:end="155:48">(<argument pos:start="155:15" pos:end="155:25"><expr pos:start="155:15" pos:end="155:25"><name pos:start="155:15" pos:end="155:25">phys_ram_fd</name></expr></argument>, <argument pos:start="155:28" pos:end="155:47"><expr pos:start="155:28" pos:end="155:47"><name pos:start="155:28" pos:end="155:40">phys_ram_size</name> <operator pos:start="155:42" pos:end="155:42">+</operator> <name pos:start="155:44" pos:end="155:47">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="157:1" pos:end="157:6">#<cpp:directive pos:start="157:2" pos:end="157:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="157:8" pos:end="157:59">/* !(__OpenBSD__ || __FreeBSD__ || __DragonFly__) */</comment>

    <expr_stmt pos:start="159:5" pos:end="165:43"><expr pos:start="159:5" pos:end="165:42"><name pos:start="159:5" pos:end="159:7">ptr</name> <operator pos:start="159:9" pos:end="159:9">=</operator> <call pos:start="159:11" pos:end="165:42"><name pos:start="159:11" pos:end="159:14">mmap</name><argument_list pos:start="159:15" pos:end="165:42">(<argument pos:start="159:16" pos:end="159:19"><expr pos:start="159:16" pos:end="159:19"><name pos:start="159:16" pos:end="159:19">NULL</name></expr></argument>,

               <argument pos:start="161:16" pos:end="161:19"><expr pos:start="161:16" pos:end="161:19"><name pos:start="161:16" pos:end="161:19">size</name></expr></argument>,

               <argument pos:start="163:16" pos:end="163:37"><expr pos:start="163:16" pos:end="163:37"><name pos:start="163:16" pos:end="163:25">PROT_WRITE</name> <operator pos:start="163:27" pos:end="163:27">|</operator> <name pos:start="163:29" pos:end="163:37">PROT_READ</name></expr></argument>, <argument pos:start="163:40" pos:end="163:60"><expr pos:start="163:40" pos:end="163:60"><name pos:start="163:40" pos:end="163:47">map_anon</name> <operator pos:start="163:49" pos:end="163:49">|</operator> <name pos:start="163:51" pos:end="163:60">MAP_SHARED</name></expr></argument>,

               <argument pos:start="165:16" pos:end="165:26"><expr pos:start="165:16" pos:end="165:26"><name pos:start="165:16" pos:end="165:26">phys_ram_fd</name></expr></argument>, <argument pos:start="165:29" pos:end="165:41"><expr pos:start="165:29" pos:end="165:41"><name pos:start="165:29" pos:end="165:41">phys_ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="173:5"><if pos:start="167:5" pos:end="173:5">if <condition pos:start="167:8" pos:end="167:26">(<expr pos:start="167:9" pos:end="167:25"><name pos:start="167:9" pos:end="167:11">ptr</name> <operator pos:start="167:13" pos:end="167:14">==</operator> <name pos:start="167:16" pos:end="167:25">MAP_FAILED</name></expr>)</condition> <block pos:start="167:28" pos:end="173:5">{<block_content pos:start="169:9" pos:end="171:16">

        <expr_stmt pos:start="169:9" pos:end="169:59"><expr pos:start="169:9" pos:end="169:58"><call pos:start="169:9" pos:end="169:58"><name pos:start="169:9" pos:end="169:15">fprintf</name><argument_list pos:start="169:16" pos:end="169:58">(<argument pos:start="169:17" pos:end="169:22"><expr pos:start="169:17" pos:end="169:22"><name pos:start="169:17" pos:end="169:22">stderr</name></expr></argument>, <argument pos:start="169:25" pos:end="169:57"><expr pos:start="169:25" pos:end="169:57"><literal type="string" pos:start="169:25" pos:end="169:57">"Could not map physical memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:16"><expr pos:start="171:9" pos:end="171:15"><call pos:start="171:9" pos:end="171:15"><name pos:start="171:9" pos:end="171:12">exit</name><argument_list pos:start="171:13" pos:end="171:15">(<argument pos:start="171:14" pos:end="171:14"><expr pos:start="171:14" pos:end="171:14"><literal type="number" pos:start="171:14" pos:end="171:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:26"><expr pos:start="175:5" pos:end="175:25"><name pos:start="175:5" pos:end="175:17">phys_ram_size</name> <operator pos:start="175:19" pos:end="175:20">+=</operator> <name pos:start="175:22" pos:end="175:25">size</name></expr>;</expr_stmt>

    <return pos:start="177:5" pos:end="177:15">return <expr pos:start="177:12" pos:end="177:14"><name pos:start="177:12" pos:end="177:14">ptr</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></function>
</unit>
