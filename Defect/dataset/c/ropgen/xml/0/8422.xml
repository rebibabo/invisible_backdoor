<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8422.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">mpeg_decode_slice</name><parameter_list pos:start="1:29" pos:end="7:55">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, 

                              <parameter pos:start="3:31" pos:end="3:43"><decl pos:start="3:31" pos:end="3:43"><type pos:start="3:31" pos:end="3:43"><name pos:start="3:31" pos:end="3:37">AVFrame</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:43">pict</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:44"><decl pos:start="5:31" pos:end="5:44"><type pos:start="5:31" pos:end="5:44"><name pos:start="5:31" pos:end="5:33">int</name></type> <name pos:start="5:35" pos:end="5:44">start_code</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="7:40"><decl pos:start="7:31" pos:end="7:40"><type pos:start="7:31" pos:end="7:40"><name pos:start="7:31" pos:end="7:35">UINT8</name> <modifier pos:start="7:37" pos:end="7:37">*</modifier></type><name pos:start="7:38" pos:end="7:40">buf</name></decl></parameter>, <parameter pos:start="7:43" pos:end="7:54"><decl pos:start="7:43" pos:end="7:54"><type pos:start="7:43" pos:end="7:54"><name pos:start="7:43" pos:end="7:45">int</name></type> <name pos:start="7:47" pos:end="7:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="267:1">{<block_content pos:start="11:5" pos:end="265:5">

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">Mpeg1Context</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:20">s1</name> <init pos:start="11:22" pos:end="11:39">= <expr pos:start="11:24" pos:end="11:39"><name pos:start="11:24" pos:end="11:39"><name pos:start="11:24" pos:end="11:28">avctx</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">MpegEncContext</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name> <init pos:start="13:23" pos:end="13:41">= <expr pos:start="13:25" pos:end="13:41"><operator pos:start="13:25" pos:end="13:25">&amp;</operator><name pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:27">s1</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:41">mpeg_enc_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:41"><expr pos:start="19:5" pos:end="19:40"><name pos:start="19:5" pos:end="19:14">start_code</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <operator pos:start="19:18" pos:end="19:18">(</operator><name pos:start="19:19" pos:end="19:28">start_code</name> <operator pos:start="19:30" pos:end="19:30">-</operator> <literal type="number" pos:start="19:32" pos:end="19:32">1</literal><operator pos:start="19:33" pos:end="19:33">)</operator> <operator pos:start="19:35" pos:end="19:35">&amp;</operator> <literal type="number" pos:start="19:37" pos:end="19:40">0xff</literal></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:35">(<expr pos:start="21:9" pos:end="21:34"><name pos:start="21:9" pos:end="21:18">start_code</name> <operator pos:start="21:20" pos:end="21:21">&gt;=</operator> <name pos:start="21:23" pos:end="21:34"><name pos:start="21:23" pos:end="21:23">s</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:34">mb_height</name></name></expr>)</condition><block pos:start="21:36" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:34">

        <expr_stmt pos:start="23:9" pos:end="23:84"><expr pos:start="23:9" pos:end="23:83"><call pos:start="23:9" pos:end="23:83"><name pos:start="23:9" pos:end="23:15">fprintf</name><argument_list pos:start="23:16" pos:end="23:83">(<argument pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:22"><name pos:start="23:17" pos:end="23:22">stderr</name></expr></argument>, <argument pos:start="23:25" pos:end="23:56"><expr pos:start="23:25" pos:end="23:56"><literal type="string" pos:start="23:25" pos:end="23:56">"slice below image (%d &gt;= %d)\n"</literal></expr></argument>, <argument pos:start="23:59" pos:end="23:68"><expr pos:start="23:59" pos:end="23:68"><name pos:start="23:59" pos:end="23:68">start_code</name></expr></argument>, <argument pos:start="23:71" pos:end="23:82"><expr pos:start="23:71" pos:end="23:82"><name pos:start="23:71" pos:end="23:82"><name pos:start="23:71" pos:end="23:71">s</name><operator pos:start="23:72" pos:end="23:73">-&gt;</operator><name pos:start="23:74" pos:end="23:82">mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:34">return <expr pos:start="25:16" pos:end="25:33"><name pos:start="25:16" pos:end="25:33">DECODE_SLICE_ERROR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:53"><expr pos:start="29:5" pos:end="29:52"><name pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:14">last_dc</name><index pos:start="29:15" pos:end="29:17">[<expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>]</index></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="number" pos:start="29:21" pos:end="29:21">1</literal> <operator pos:start="29:23" pos:end="29:24">&lt;&lt;</operator> <operator pos:start="29:26" pos:end="29:26">(</operator><literal type="number" pos:start="29:27" pos:end="29:29">7</literal> <operator pos:start="29:29" pos:end="29:29">+</operator> <name pos:start="29:31" pos:end="29:51"><name pos:start="29:31" pos:end="29:31">s</name><operator pos:start="29:32" pos:end="29:33">-&gt;</operator><name pos:start="29:34" pos:end="29:51">intra_dc_precision</name></name><operator pos:start="29:52" pos:end="29:52">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:34"><expr pos:start="31:5" pos:end="31:33"><name pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:14">last_dc</name><index pos:start="31:15" pos:end="31:17">[<expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">1</literal></expr>]</index></name> <operator pos:start="31:19" pos:end="31:19">=</operator> <name pos:start="31:21" pos:end="31:33"><name pos:start="31:21" pos:end="31:21">s</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:30">last_dc</name><index pos:start="31:31" pos:end="31:33">[<expr pos:start="31:32" pos:end="31:32"><literal type="number" pos:start="31:32" pos:end="31:32">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:34"><expr pos:start="33:5" pos:end="33:33"><name pos:start="33:5" pos:end="33:17"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:14">last_dc</name><index pos:start="33:15" pos:end="33:17">[<expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">2</literal></expr>]</index></name> <operator pos:start="33:19" pos:end="33:19">=</operator> <name pos:start="33:21" pos:end="33:33"><name pos:start="33:21" pos:end="33:21">s</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:30">last_dc</name><index pos:start="33:31" pos:end="33:33">[<expr pos:start="33:32" pos:end="33:32"><literal type="number" pos:start="33:32" pos:end="33:32">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:46"><expr pos:start="35:5" pos:end="35:45"><call pos:start="35:5" pos:end="35:45"><name pos:start="35:5" pos:end="35:10">memset</name><argument_list pos:start="35:11" pos:end="35:45">(<argument pos:start="35:12" pos:end="35:21"><expr pos:start="35:12" pos:end="35:21"><name pos:start="35:12" pos:end="35:21"><name pos:start="35:12" pos:end="35:12">s</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:21">last_mv</name></name></expr></argument>, <argument pos:start="35:24" pos:end="35:24"><expr pos:start="35:24" pos:end="35:24"><literal type="number" pos:start="35:24" pos:end="35:24">0</literal></expr></argument>, <argument pos:start="35:27" pos:end="35:44"><expr pos:start="35:27" pos:end="35:44"><sizeof pos:start="35:27" pos:end="35:44">sizeof<argument_list pos:start="35:33" pos:end="35:44">(<argument pos:start="35:34" pos:end="35:43"><expr pos:start="35:34" pos:end="35:43"><name pos:start="35:34" pos:end="35:43"><name pos:start="35:34" pos:end="35:34">s</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:43">last_mv</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="37:5" pos:end="37:30">/* start frame decoding */</comment>

    <if_stmt pos:start="39:5" pos:end="65:5"><if pos:start="39:5" pos:end="65:5">if <condition pos:start="39:8" pos:end="39:23">(<expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:22">first_slice</name></name></expr>)</condition> <block pos:start="39:25" pos:end="65:5">{<block_content pos:start="41:9" pos:end="63:9">

        <expr_stmt pos:start="41:9" pos:end="41:27"><expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:22">first_slice</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <literal type="number" pos:start="41:26" pos:end="41:26">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="45:44"><if pos:start="43:9" pos:end="45:44">if<condition pos:start="43:11" pos:end="43:41">(<expr pos:start="43:12" pos:end="43:40"><call pos:start="43:12" pos:end="43:36"><name pos:start="43:12" pos:end="43:26">MPV_frame_start</name><argument_list pos:start="43:27" pos:end="43:36">(<argument pos:start="43:28" pos:end="43:28"><expr pos:start="43:28" pos:end="43:28"><name pos:start="43:28" pos:end="43:28">s</name></expr></argument>, <argument pos:start="43:31" pos:end="43:35"><expr pos:start="43:31" pos:end="43:35"><name pos:start="43:31" pos:end="43:35">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="43:38" pos:end="43:38">&lt;</operator> <literal type="number" pos:start="43:40" pos:end="43:40">0</literal></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:44"><block_content pos:start="45:13" pos:end="45:44">

            <return pos:start="45:13" pos:end="45:44">return <expr pos:start="45:20" pos:end="45:43"><name pos:start="45:20" pos:end="45:43">DECODE_SLICE_FATAL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

            

        <if_stmt pos:start="49:9" pos:end="63:9"><if pos:start="49:9" pos:end="63:9">if<condition pos:start="49:11" pos:end="49:46">(<expr pos:start="49:12" pos:end="49:45"><name pos:start="49:12" pos:end="49:26"><name pos:start="49:12" pos:end="49:12">s</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:19">avctx</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:26">debug</name></name><operator pos:start="49:27" pos:end="49:27">&amp;</operator><name pos:start="49:28" pos:end="49:45">FF_DEBUG_PICT_INFO</name></expr>)</condition><block pos:start="49:47" pos:end="63:9">{<block_content pos:start="51:14" pos:end="61:110">

             <expr_stmt pos:start="51:14" pos:end="61:110"><expr pos:start="51:14" pos:end="61:109"><call pos:start="51:14" pos:end="61:109"><name pos:start="51:14" pos:end="51:19">printf</name><argument_list pos:start="51:20" pos:end="61:109">(<argument pos:start="51:21" pos:end="51:116"><expr pos:start="51:21" pos:end="51:116"><literal type="string" pos:start="51:21" pos:end="51:116">"qp:%d fc:%2d%2d%2d%2d %s %s %s %s dc:%d pstruct:%d fdct:%d cmv:%d qtype:%d ivlc:%d rff:%d %s\n"</literal></expr></argument>, 

                 <argument pos:start="53:18" pos:end="53:26"><expr pos:start="53:18" pos:end="53:26"><name pos:start="53:18" pos:end="53:26"><name pos:start="53:18" pos:end="53:18">s</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:26">qscale</name></name></expr></argument>, <argument pos:start="53:29" pos:end="53:48"><expr pos:start="53:29" pos:end="53:48"><name pos:start="53:29" pos:end="53:48"><name pos:start="53:29" pos:end="53:29">s</name><operator pos:start="53:30" pos:end="53:31">-&gt;</operator><name pos:start="53:32" pos:end="53:42">mpeg_f_code</name><index pos:start="53:43" pos:end="53:45">[<expr pos:start="53:44" pos:end="53:44"><literal type="number" pos:start="53:44" pos:end="53:44">0</literal></expr>]</index><index pos:start="53:46" pos:end="53:48">[<expr pos:start="53:47" pos:end="53:47"><literal type="number" pos:start="53:47" pos:end="53:47">0</literal></expr>]</index></name></expr></argument>,<argument pos:start="53:50" pos:end="53:69"><expr pos:start="53:50" pos:end="53:69"><name pos:start="53:50" pos:end="53:69"><name pos:start="53:50" pos:end="53:50">s</name><operator pos:start="53:51" pos:end="53:52">-&gt;</operator><name pos:start="53:53" pos:end="53:63">mpeg_f_code</name><index pos:start="53:64" pos:end="53:66">[<expr pos:start="53:65" pos:end="53:65"><literal type="number" pos:start="53:65" pos:end="53:65">0</literal></expr>]</index><index pos:start="53:67" pos:end="53:69">[<expr pos:start="53:68" pos:end="53:68"><literal type="number" pos:start="53:68" pos:end="53:68">1</literal></expr>]</index></name></expr></argument>,<argument pos:start="53:71" pos:end="53:90"><expr pos:start="53:71" pos:end="53:90"><name pos:start="53:71" pos:end="53:90"><name pos:start="53:71" pos:end="53:71">s</name><operator pos:start="53:72" pos:end="53:73">-&gt;</operator><name pos:start="53:74" pos:end="53:84">mpeg_f_code</name><index pos:start="53:85" pos:end="53:87">[<expr pos:start="53:86" pos:end="53:86"><literal type="number" pos:start="53:86" pos:end="53:86">1</literal></expr>]</index><index pos:start="53:88" pos:end="53:90">[<expr pos:start="53:89" pos:end="53:89"><literal type="number" pos:start="53:89" pos:end="53:89">0</literal></expr>]</index></name></expr></argument>,<argument pos:start="53:92" pos:end="53:111"><expr pos:start="53:92" pos:end="53:111"><name pos:start="53:92" pos:end="53:111"><name pos:start="53:92" pos:end="53:92">s</name><operator pos:start="53:93" pos:end="53:94">-&gt;</operator><name pos:start="53:95" pos:end="53:105">mpeg_f_code</name><index pos:start="53:106" pos:end="53:108">[<expr pos:start="53:107" pos:end="53:107"><literal type="number" pos:start="53:107" pos:end="53:107">1</literal></expr>]</index><index pos:start="53:109" pos:end="53:111">[<expr pos:start="53:110" pos:end="53:110"><literal type="number" pos:start="53:110" pos:end="53:110">1</literal></expr>]</index></name></expr></argument>,

                 <argument pos:start="55:18" pos:end="55:117"><expr pos:start="55:18" pos:end="55:117"><ternary pos:start="55:18" pos:end="55:117"><condition pos:start="55:18" pos:end="55:41"><expr pos:start="55:18" pos:end="55:39"><name pos:start="55:18" pos:end="55:29"><name pos:start="55:18" pos:end="55:18">s</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:29">pict_type</name></name> <operator pos:start="55:31" pos:end="55:32">==</operator> <name pos:start="55:34" pos:end="55:39">I_TYPE</name></expr> ?</condition><then pos:start="55:43" pos:end="55:45"> <expr pos:start="55:43" pos:end="55:45"><literal type="string" pos:start="55:43" pos:end="55:45">"I"</literal></expr> </then><else pos:start="55:47" pos:end="55:117">: <expr pos:start="55:49" pos:end="55:117"><operator pos:start="55:49" pos:end="55:49">(</operator><ternary pos:start="55:50" pos:end="55:116"><condition pos:start="55:50" pos:end="55:73"><expr pos:start="55:50" pos:end="55:71"><name pos:start="55:50" pos:end="55:61"><name pos:start="55:50" pos:end="55:50">s</name><operator pos:start="55:51" pos:end="55:52">-&gt;</operator><name pos:start="55:53" pos:end="55:61">pict_type</name></name> <operator pos:start="55:63" pos:end="55:64">==</operator> <name pos:start="55:66" pos:end="55:71">P_TYPE</name></expr> ?</condition><then pos:start="55:75" pos:end="55:77"> <expr pos:start="55:75" pos:end="55:77"><literal type="string" pos:start="55:75" pos:end="55:77">"P"</literal></expr> </then><else pos:start="55:79" pos:end="55:116">: <expr pos:start="55:81" pos:end="55:116"><operator pos:start="55:81" pos:end="55:81">(</operator><ternary pos:start="55:82" pos:end="55:115"><condition pos:start="55:82" pos:end="55:105"><expr pos:start="55:82" pos:end="55:103"><name pos:start="55:82" pos:end="55:93"><name pos:start="55:82" pos:end="55:82">s</name><operator pos:start="55:83" pos:end="55:84">-&gt;</operator><name pos:start="55:85" pos:end="55:93">pict_type</name></name> <operator pos:start="55:95" pos:end="55:96">==</operator> <name pos:start="55:98" pos:end="55:103">B_TYPE</name></expr> ?</condition><then pos:start="55:107" pos:end="55:109"> <expr pos:start="55:107" pos:end="55:109"><literal type="string" pos:start="55:107" pos:end="55:109">"B"</literal></expr> </then><else pos:start="55:111" pos:end="55:115">: <expr pos:start="55:113" pos:end="55:115"><literal type="string" pos:start="55:113" pos:end="55:115">"S"</literal></expr></else></ternary><operator pos:start="55:116" pos:end="55:116">)</operator></expr></else></ternary><operator pos:start="55:117" pos:end="55:117">)</operator></expr></else></ternary></expr></argument>, 

                 <argument pos:start="57:18" pos:end="57:52"><expr pos:start="57:18" pos:end="57:52"><ternary pos:start="57:18" pos:end="57:52"><condition pos:start="57:18" pos:end="57:42"><expr pos:start="57:18" pos:end="57:40"><name pos:start="57:18" pos:end="57:40"><name pos:start="57:18" pos:end="57:18">s</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:40">progressive_sequence</name></name></expr> ?</condition><then pos:start="57:44" pos:end="57:48"> <expr pos:start="57:44" pos:end="57:48"><literal type="string" pos:start="57:44" pos:end="57:48">"pro"</literal></expr> </then><else pos:start="57:50" pos:end="57:52">:<expr pos:start="57:51" pos:end="57:52"><literal type="string" pos:start="57:51" pos:end="57:52">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="57:55" pos:end="57:83"><expr pos:start="57:55" pos:end="57:83"><ternary pos:start="57:55" pos:end="57:83"><condition pos:start="57:55" pos:end="57:73"><expr pos:start="57:55" pos:end="57:71"><name pos:start="57:55" pos:end="57:71"><name pos:start="57:55" pos:end="57:55">s</name><operator pos:start="57:56" pos:end="57:57">-&gt;</operator><name pos:start="57:58" pos:end="57:71">alternate_scan</name></name></expr> ?</condition><then pos:start="57:75" pos:end="57:79"> <expr pos:start="57:75" pos:end="57:79"><literal type="string" pos:start="57:75" pos:end="57:79">"alt"</literal></expr> </then><else pos:start="57:81" pos:end="57:83">:<expr pos:start="57:82" pos:end="57:83"><literal type="string" pos:start="57:82" pos:end="57:83">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="57:86" pos:end="57:115"><expr pos:start="57:86" pos:end="57:115"><ternary pos:start="57:86" pos:end="57:115"><condition pos:start="57:86" pos:end="57:105"><expr pos:start="57:86" pos:end="57:103"><name pos:start="57:86" pos:end="57:103"><name pos:start="57:86" pos:end="57:86">s</name><operator pos:start="57:87" pos:end="57:88">-&gt;</operator><name pos:start="57:89" pos:end="57:103">top_field_first</name></name></expr> ?</condition><then pos:start="57:107" pos:end="57:111"> <expr pos:start="57:107" pos:end="57:111"><literal type="string" pos:start="57:107" pos:end="57:111">"top"</literal></expr> </then><else pos:start="57:113" pos:end="57:115">:<expr pos:start="57:114" pos:end="57:115"><literal type="string" pos:start="57:114" pos:end="57:115">""</literal></expr></else></ternary></expr></argument>, 

                 <argument pos:start="59:18" pos:end="59:38"><expr pos:start="59:18" pos:end="59:38"><name pos:start="59:18" pos:end="59:38"><name pos:start="59:18" pos:end="59:18">s</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:38">intra_dc_precision</name></name></expr></argument>, <argument pos:start="59:41" pos:end="59:60"><expr pos:start="59:41" pos:end="59:60"><name pos:start="59:41" pos:end="59:60"><name pos:start="59:41" pos:end="59:41">s</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:60">picture_structure</name></name></expr></argument>, <argument pos:start="59:63" pos:end="59:85"><expr pos:start="59:63" pos:end="59:85"><name pos:start="59:63" pos:end="59:85"><name pos:start="59:63" pos:end="59:63">s</name><operator pos:start="59:64" pos:end="59:65">-&gt;</operator><name pos:start="59:66" pos:end="59:85">frame_pred_frame_dct</name></name></expr></argument>, <argument pos:start="59:88" pos:end="59:116"><expr pos:start="59:88" pos:end="59:116"><name pos:start="59:88" pos:end="59:116"><name pos:start="59:88" pos:end="59:88">s</name><operator pos:start="59:89" pos:end="59:90">-&gt;</operator><name pos:start="59:91" pos:end="59:116">concealment_motion_vectors</name></name></expr></argument>,

                 <argument pos:start="61:18" pos:end="61:32"><expr pos:start="61:18" pos:end="61:32"><name pos:start="61:18" pos:end="61:32"><name pos:start="61:18" pos:end="61:18">s</name><operator pos:start="61:19" pos:end="61:20">-&gt;</operator><name pos:start="61:21" pos:end="61:32">q_scale_type</name></name></expr></argument>, <argument pos:start="61:35" pos:end="61:53"><expr pos:start="61:35" pos:end="61:53"><name pos:start="61:35" pos:end="61:53"><name pos:start="61:35" pos:end="61:35">s</name><operator pos:start="61:36" pos:end="61:37">-&gt;</operator><name pos:start="61:38" pos:end="61:53">intra_vlc_format</name></name></expr></argument>, <argument pos:start="61:56" pos:end="61:76"><expr pos:start="61:56" pos:end="61:76"><name pos:start="61:56" pos:end="61:76"><name pos:start="61:56" pos:end="61:56">s</name><operator pos:start="61:57" pos:end="61:58">-&gt;</operator><name pos:start="61:59" pos:end="61:76">repeat_first_field</name></name></expr></argument>, <argument pos:start="61:79" pos:end="61:108"><expr pos:start="61:79" pos:end="61:108"><ternary pos:start="61:79" pos:end="61:108"><condition pos:start="61:79" pos:end="61:98"><expr pos:start="61:79" pos:end="61:96"><name pos:start="61:79" pos:end="61:96"><name pos:start="61:79" pos:end="61:79">s</name><operator pos:start="61:80" pos:end="61:81">-&gt;</operator><name pos:start="61:82" pos:end="61:96">chroma_420_type</name></name></expr> ?</condition><then pos:start="61:100" pos:end="61:104"> <expr pos:start="61:100" pos:end="61:104"><literal type="string" pos:start="61:100" pos:end="61:104">"420"</literal></expr> </then><else pos:start="61:106" pos:end="61:108">:<expr pos:start="61:107" pos:end="61:108"><literal type="string" pos:start="61:107" pos:end="61:108">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:41"><expr pos:start="69:5" pos:end="69:40"><call pos:start="69:5" pos:end="69:40"><name pos:start="69:5" pos:end="69:17">init_get_bits</name><argument_list pos:start="69:18" pos:end="69:40">(<argument pos:start="69:19" pos:end="69:24"><expr pos:start="69:19" pos:end="69:24"><operator pos:start="69:19" pos:end="69:19">&amp;</operator><name pos:start="69:20" pos:end="69:24"><name pos:start="69:20" pos:end="69:20">s</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:24">gb</name></name></expr></argument>, <argument pos:start="69:27" pos:end="69:29"><expr pos:start="69:27" pos:end="69:29"><name pos:start="69:27" pos:end="69:29">buf</name></expr></argument>, <argument pos:start="69:32" pos:end="69:39"><expr pos:start="69:32" pos:end="69:39"><name pos:start="69:32" pos:end="69:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:30"><expr pos:start="73:5" pos:end="73:29"><name pos:start="73:5" pos:end="73:13"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:13">qscale</name></name> <operator pos:start="73:15" pos:end="73:15">=</operator> <call pos:start="73:17" pos:end="73:29"><name pos:start="73:17" pos:end="73:26">get_qscale</name><argument_list pos:start="73:27" pos:end="73:29">(<argument pos:start="73:28" pos:end="73:28"><expr pos:start="73:28" pos:end="73:28"><name pos:start="73:28" pos:end="73:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="75:5" pos:end="75:26">/* extra slice info */</comment>

    <while pos:start="77:5" pos:end="81:5">while <condition pos:start="77:11" pos:end="77:34">(<expr pos:start="77:12" pos:end="77:33"><call pos:start="77:12" pos:end="77:28"><name pos:start="77:12" pos:end="77:20">get_bits1</name><argument_list pos:start="77:21" pos:end="77:28">(<argument pos:start="77:22" pos:end="77:27"><expr pos:start="77:22" pos:end="77:27"><operator pos:start="77:22" pos:end="77:22">&amp;</operator><name pos:start="77:23" pos:end="77:27"><name pos:start="77:23" pos:end="77:23">s</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:27">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="77:30" pos:end="77:31">!=</operator> <literal type="number" pos:start="77:33" pos:end="77:33">0</literal></expr>)</condition> <block pos:start="77:36" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:29">

        <expr_stmt pos:start="79:9" pos:end="79:29"><expr pos:start="79:9" pos:end="79:28"><call pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:17">skip_bits</name><argument_list pos:start="79:18" pos:end="79:28">(<argument pos:start="79:19" pos:end="79:24"><expr pos:start="79:19" pos:end="79:24"><operator pos:start="79:19" pos:end="79:19">&amp;</operator><name pos:start="79:20" pos:end="79:24"><name pos:start="79:20" pos:end="79:20">s</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:24">gb</name></name></expr></argument>, <argument pos:start="79:27" pos:end="79:27"><expr pos:start="79:27" pos:end="79:27"><literal type="number" pos:start="79:27" pos:end="79:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="85:5" pos:end="85:14"><expr pos:start="85:5" pos:end="85:13"><name pos:start="85:5" pos:end="85:11"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:11">mb_x</name></name><operator pos:start="85:12" pos:end="85:12">=</operator><literal type="number" pos:start="85:13" pos:end="85:13">0</literal></expr>;</expr_stmt>

    <for pos:start="87:5" pos:end="113:5">for<control pos:start="87:8" pos:end="87:11">(<init pos:start="87:9" pos:end="87:9">;</init><condition pos:start="87:10" pos:end="87:10">;</condition><incr/>)</control> <block pos:start="87:13" pos:end="113:5">{<block_content pos:start="89:9" pos:end="111:9">

        <decl_stmt pos:start="89:9" pos:end="89:74"><decl pos:start="89:9" pos:end="89:73"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:16">code</name> <init pos:start="89:18" pos:end="89:73">= <expr pos:start="89:20" pos:end="89:73"><call pos:start="89:20" pos:end="89:73"><name pos:start="89:20" pos:end="89:27">get_vlc2</name><argument_list pos:start="89:28" pos:end="89:73">(<argument pos:start="89:29" pos:end="89:34"><expr pos:start="89:29" pos:end="89:34"><operator pos:start="89:29" pos:end="89:29">&amp;</operator><name pos:start="89:30" pos:end="89:34"><name pos:start="89:30" pos:end="89:30">s</name><operator pos:start="89:31" pos:end="89:32">-&gt;</operator><name pos:start="89:33" pos:end="89:34">gb</name></name></expr></argument>, <argument pos:start="89:37" pos:end="89:52"><expr pos:start="89:37" pos:end="89:52"><name pos:start="89:37" pos:end="89:52"><name pos:start="89:37" pos:end="89:46">mbincr_vlc</name><operator pos:start="89:47" pos:end="89:47">.</operator><name pos:start="89:48" pos:end="89:52">table</name></name></expr></argument>, <argument pos:start="89:55" pos:end="89:69"><expr pos:start="89:55" pos:end="89:69"><name pos:start="89:55" pos:end="89:69">MBINCR_VLC_BITS</name></expr></argument>, <argument pos:start="89:72" pos:end="89:72"><expr pos:start="89:72" pos:end="89:72"><literal type="number" pos:start="89:72" pos:end="89:72">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="91:9" pos:end="93:22"><if pos:start="91:9" pos:end="93:22">if <condition pos:start="91:12" pos:end="91:21">(<expr pos:start="91:13" pos:end="91:20"><name pos:start="91:13" pos:end="91:16">code</name> <operator pos:start="91:18" pos:end="91:18">&lt;</operator> <literal type="number" pos:start="91:20" pos:end="91:20">0</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:22"><block_content pos:start="93:13" pos:end="93:22">

            <return pos:start="93:13" pos:end="93:22">return <expr pos:start="93:20" pos:end="93:21"><operator pos:start="93:20" pos:end="93:20">-</operator><literal type="number" pos:start="93:21" pos:end="93:21">1</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="93:24" pos:end="93:76">/* error = end of slice, but empty slice is bad or?*/</comment>

        <if_stmt pos:start="95:9" pos:end="111:9"><if pos:start="95:9" pos:end="105:9">if <condition pos:start="95:12" pos:end="95:23">(<expr pos:start="95:13" pos:end="95:22"><name pos:start="95:13" pos:end="95:16">code</name> <operator pos:start="95:18" pos:end="95:19">&gt;=</operator> <literal type="number" pos:start="95:21" pos:end="95:22">33</literal></expr>)</condition> <block pos:start="95:25" pos:end="105:9">{<block_content pos:start="97:13" pos:end="101:13">

            <if_stmt pos:start="97:13" pos:end="101:13"><if pos:start="97:13" pos:end="101:13">if <condition pos:start="97:16" pos:end="97:27">(<expr pos:start="97:17" pos:end="97:26"><name pos:start="97:17" pos:end="97:20">code</name> <operator pos:start="97:22" pos:end="97:23">==</operator> <literal type="number" pos:start="97:25" pos:end="97:26">33</literal></expr>)</condition> <block pos:start="97:29" pos:end="101:13">{<block_content pos:start="99:17" pos:end="99:30">

                <expr_stmt pos:start="99:17" pos:end="99:30"><expr pos:start="99:17" pos:end="99:29"><name pos:start="99:17" pos:end="99:23"><name pos:start="99:17" pos:end="99:17">s</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:23">mb_x</name></name> <operator pos:start="99:25" pos:end="99:26">+=</operator> <literal type="number" pos:start="99:28" pos:end="99:29">33</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="103:13" pos:end="103:52">/* otherwise, stuffing, nothing to do */</comment>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="111:9">else <block pos:start="105:16" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:18">

            <expr_stmt pos:start="107:13" pos:end="107:28"><expr pos:start="107:13" pos:end="107:27"><name pos:start="107:13" pos:end="107:19"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:19">mb_x</name></name> <operator pos:start="107:21" pos:end="107:22">+=</operator> <name pos:start="107:24" pos:end="107:27">code</name></expr>;</expr_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="115:5" pos:end="115:25"><expr pos:start="115:5" pos:end="115:24"><name pos:start="115:5" pos:end="115:11"><name pos:start="115:5" pos:end="115:5">s</name><operator pos:start="115:6" pos:end="115:7">-&gt;</operator><name pos:start="115:8" pos:end="115:11">mb_y</name></name> <operator pos:start="115:13" pos:end="115:13">=</operator> <name pos:start="115:15" pos:end="115:24">start_code</name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:18"><expr pos:start="117:5" pos:end="117:17"><name pos:start="117:5" pos:end="117:14"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:14">mb_incr</name></name><operator pos:start="117:15" pos:end="117:15">=</operator> <literal type="number" pos:start="117:17" pos:end="117:17">1</literal></expr>;</expr_stmt>



    <for pos:start="121:5" pos:end="205:5">for<control pos:start="121:8" pos:end="121:11">(<init pos:start="121:9" pos:end="121:9">;</init><condition pos:start="121:10" pos:end="121:10">;</condition><incr/>)</control> <block pos:start="121:13" pos:end="205:5">{<block_content pos:start="123:9" pos:end="203:9">

	<expr_stmt pos:start="123:9" pos:end="123:41"><expr pos:start="123:9" pos:end="123:40"><call pos:start="123:9" pos:end="123:40"><name pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:14">dsp</name><operator pos:start="123:15" pos:end="123:15">.</operator><name pos:start="123:16" pos:end="123:27">clear_blocks</name></name><argument_list pos:start="123:28" pos:end="123:40">(<argument pos:start="123:29" pos:end="123:39"><expr pos:start="123:29" pos:end="123:39"><name pos:start="123:29" pos:end="123:39"><name pos:start="123:29" pos:end="123:29">s</name><operator pos:start="123:30" pos:end="123:31">-&gt;</operator><name pos:start="123:32" pos:end="123:36">block</name><index pos:start="123:37" pos:end="123:39">[<expr pos:start="123:38" pos:end="123:38"><literal type="number" pos:start="123:38" pos:end="123:38">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        

        <expr_stmt pos:start="127:9" pos:end="127:42"><expr pos:start="127:9" pos:end="127:41"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="127:41"><name pos:start="127:15" pos:end="127:28">mpeg_decode_mb</name><argument_list pos:start="127:29" pos:end="127:41">(<argument pos:start="127:30" pos:end="127:30"><expr pos:start="127:30" pos:end="127:30"><name pos:start="127:30" pos:end="127:30">s</name></expr></argument>, <argument pos:start="127:33" pos:end="127:40"><expr pos:start="127:33" pos:end="127:40"><name pos:start="127:33" pos:end="127:40"><name pos:start="127:33" pos:end="127:33">s</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:40">block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:33"><expr pos:start="129:9" pos:end="129:32"><call pos:start="129:9" pos:end="129:32"><name pos:start="129:9" pos:end="129:15">dprintf</name><argument_list pos:start="129:16" pos:end="129:32">(<argument pos:start="129:17" pos:end="129:26"><expr pos:start="129:17" pos:end="129:26"><literal type="string" pos:start="129:17" pos:end="129:26">"ret=%d\n"</literal></expr></argument>, <argument pos:start="129:29" pos:end="129:31"><expr pos:start="129:29" pos:end="129:31"><name pos:start="129:29" pos:end="129:31">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="133:22"><if pos:start="131:9" pos:end="133:22">if <condition pos:start="131:12" pos:end="131:20">(<expr pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">&lt;</operator> <literal type="number" pos:start="131:19" pos:end="131:19">0</literal></expr>)</condition><block type="pseudo" pos:start="133:13" pos:end="133:22"><block_content pos:start="133:13" pos:end="133:22">

            <return pos:start="133:13" pos:end="133:22">return <expr pos:start="133:20" pos:end="133:21"><operator pos:start="133:20" pos:end="133:20">-</operator><literal type="number" pos:start="133:21" pos:end="133:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    

        <expr_stmt pos:start="137:9" pos:end="137:35"><expr pos:start="137:9" pos:end="137:34"><call pos:start="137:9" pos:end="137:34"><name pos:start="137:9" pos:end="137:21">MPV_decode_mb</name><argument_list pos:start="137:22" pos:end="137:34">(<argument pos:start="137:23" pos:end="137:23"><expr pos:start="137:23" pos:end="137:23"><name pos:start="137:23" pos:end="137:23">s</name></expr></argument>, <argument pos:start="137:26" pos:end="137:33"><expr pos:start="137:26" pos:end="137:33"><name pos:start="137:26" pos:end="137:33"><name pos:start="137:26" pos:end="137:26">s</name><operator pos:start="137:27" pos:end="137:28">-&gt;</operator><name pos:start="137:29" pos:end="137:33">block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="141:9" pos:end="153:9"><if pos:start="141:9" pos:end="153:9">if <condition pos:start="141:12" pos:end="141:37">(<expr pos:start="141:13" pos:end="141:36"><operator pos:start="141:13" pos:end="141:14">++</operator><name pos:start="141:15" pos:end="141:21"><name pos:start="141:15" pos:end="141:15">s</name><operator pos:start="141:16" pos:end="141:17">-&gt;</operator><name pos:start="141:18" pos:end="141:21">mb_x</name></name> <operator pos:start="141:23" pos:end="141:24">&gt;=</operator> <name pos:start="141:26" pos:end="141:36"><name pos:start="141:26" pos:end="141:26">s</name><operator pos:start="141:27" pos:end="141:28">-&gt;</operator><name pos:start="141:29" pos:end="141:36">mb_width</name></name></expr>)</condition> <block pos:start="141:39" pos:end="153:9">{<block_content pos:start="143:13" pos:end="151:33">

            <expr_stmt pos:start="143:13" pos:end="143:34"><expr pos:start="143:13" pos:end="143:33"><call pos:start="143:13" pos:end="143:33"><name pos:start="143:13" pos:end="143:30">ff_draw_horiz_band</name><argument_list pos:start="143:31" pos:end="143:33">(<argument pos:start="143:32" pos:end="143:32"><expr pos:start="143:32" pos:end="143:32"><name pos:start="143:32" pos:end="143:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="147:13" pos:end="147:24"><expr pos:start="147:13" pos:end="147:23"><name pos:start="147:13" pos:end="147:19"><name pos:start="147:13" pos:end="147:13">s</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:19">mb_x</name></name> <operator pos:start="147:21" pos:end="147:21">=</operator> <literal type="number" pos:start="147:23" pos:end="147:23">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:22"><expr pos:start="149:13" pos:end="149:21"><name pos:start="149:13" pos:end="149:19"><name pos:start="149:13" pos:end="149:13">s</name><operator pos:start="149:14" pos:end="149:15">-&gt;</operator><name pos:start="149:16" pos:end="149:19">mb_y</name></name><operator pos:start="149:20" pos:end="149:21">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:33"><expr pos:start="151:13" pos:end="151:32"><call pos:start="151:13" pos:end="151:32"><name pos:start="151:13" pos:end="151:20">PRINT_QP</name><argument_list pos:start="151:21" pos:end="151:32">(<argument pos:start="151:22" pos:end="151:25"><expr pos:start="151:22" pos:end="151:25"><literal type="string" pos:start="151:22" pos:end="151:25">"%s"</literal></expr></argument>, <argument pos:start="151:28" pos:end="151:31"><expr pos:start="151:28" pos:end="151:31"><literal type="string" pos:start="151:28" pos:end="151:31">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:35"><expr pos:start="155:9" pos:end="155:34"><call pos:start="155:9" pos:end="155:34"><name pos:start="155:9" pos:end="155:16">PRINT_QP</name><argument_list pos:start="155:17" pos:end="155:34">(<argument pos:start="155:18" pos:end="155:22"><expr pos:start="155:18" pos:end="155:22"><literal type="string" pos:start="155:18" pos:end="155:22">"%2d"</literal></expr></argument>, <argument pos:start="155:25" pos:end="155:33"><expr pos:start="155:25" pos:end="155:33"><name pos:start="155:25" pos:end="155:33"><name pos:start="155:25" pos:end="155:25">s</name><operator pos:start="155:26" pos:end="155:27">-&gt;</operator><name pos:start="155:28" pos:end="155:33">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="159:9" pos:end="159:30">/* skip mb handling */</comment>

        <if_stmt pos:start="161:9" pos:end="195:9"><if pos:start="161:9" pos:end="195:9">if <condition pos:start="161:12" pos:end="161:28">(<expr pos:start="161:13" pos:end="161:27"><name pos:start="161:13" pos:end="161:22"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:22">mb_incr</name></name> <operator pos:start="161:24" pos:end="161:25">==</operator> <literal type="number" pos:start="161:27" pos:end="161:27">0</literal></expr>)</condition> <block pos:start="161:30" pos:end="195:9">{<block_content pos:start="165:13" pos:end="193:13">

            <comment type="block" pos:start="163:13" pos:end="163:38">/* read again increment */</comment>

            <expr_stmt pos:start="165:13" pos:end="165:27"><expr pos:start="165:13" pos:end="165:26"><name pos:start="165:13" pos:end="165:22"><name pos:start="165:13" pos:end="165:13">s</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:22">mb_incr</name></name> <operator pos:start="165:24" pos:end="165:24">=</operator> <literal type="number" pos:start="165:26" pos:end="165:26">1</literal></expr>;</expr_stmt>

            <for pos:start="167:13" pos:end="193:13">for<control pos:start="167:16" pos:end="167:19">(<init pos:start="167:17" pos:end="167:17">;</init><condition pos:start="167:18" pos:end="167:18">;</condition><incr/>)</control> <block pos:start="167:21" pos:end="193:13">{<block_content pos:start="169:17" pos:end="191:17">

                <decl_stmt pos:start="169:17" pos:end="169:82"><decl pos:start="169:17" pos:end="169:81"><type pos:start="169:17" pos:end="169:19"><name pos:start="169:17" pos:end="169:19">int</name></type> <name pos:start="169:21" pos:end="169:24">code</name> <init pos:start="169:26" pos:end="169:81">= <expr pos:start="169:28" pos:end="169:81"><call pos:start="169:28" pos:end="169:81"><name pos:start="169:28" pos:end="169:35">get_vlc2</name><argument_list pos:start="169:36" pos:end="169:81">(<argument pos:start="169:37" pos:end="169:42"><expr pos:start="169:37" pos:end="169:42"><operator pos:start="169:37" pos:end="169:37">&amp;</operator><name pos:start="169:38" pos:end="169:42"><name pos:start="169:38" pos:end="169:38">s</name><operator pos:start="169:39" pos:end="169:40">-&gt;</operator><name pos:start="169:41" pos:end="169:42">gb</name></name></expr></argument>, <argument pos:start="169:45" pos:end="169:60"><expr pos:start="169:45" pos:end="169:60"><name pos:start="169:45" pos:end="169:60"><name pos:start="169:45" pos:end="169:54">mbincr_vlc</name><operator pos:start="169:55" pos:end="169:55">.</operator><name pos:start="169:56" pos:end="169:60">table</name></name></expr></argument>, <argument pos:start="169:63" pos:end="169:77"><expr pos:start="169:63" pos:end="169:77"><name pos:start="169:63" pos:end="169:77">MBINCR_VLC_BITS</name></expr></argument>, <argument pos:start="169:80" pos:end="169:80"><expr pos:start="169:80" pos:end="169:80"><literal type="number" pos:start="169:80" pos:end="169:80">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="171:17" pos:end="173:29"><if pos:start="171:17" pos:end="173:29">if <condition pos:start="171:20" pos:end="171:29">(<expr pos:start="171:21" pos:end="171:28"><name pos:start="171:21" pos:end="171:24">code</name> <operator pos:start="171:26" pos:end="171:26">&lt;</operator> <literal type="number" pos:start="171:28" pos:end="171:28">0</literal></expr>)</condition><block type="pseudo" pos:start="173:21" pos:end="173:29"><block_content pos:start="173:21" pos:end="173:29">

                    <goto pos:start="173:21" pos:end="173:29">goto <name pos:start="173:26" pos:end="173:28">eos</name>;</goto></block_content></block></if></if_stmt> <comment type="block" pos:start="173:31" pos:end="173:56">/* error = end of slice */</comment>

                <if_stmt pos:start="175:17" pos:end="191:17"><if pos:start="175:17" pos:end="185:17">if <condition pos:start="175:20" pos:end="175:31">(<expr pos:start="175:21" pos:end="175:30"><name pos:start="175:21" pos:end="175:24">code</name> <operator pos:start="175:26" pos:end="175:27">&gt;=</operator> <literal type="number" pos:start="175:29" pos:end="175:30">33</literal></expr>)</condition> <block pos:start="175:33" pos:end="185:17">{<block_content pos:start="177:21" pos:end="181:21">

                    <if_stmt pos:start="177:21" pos:end="181:21"><if pos:start="177:21" pos:end="181:21">if <condition pos:start="177:24" pos:end="177:35">(<expr pos:start="177:25" pos:end="177:34"><name pos:start="177:25" pos:end="177:28">code</name> <operator pos:start="177:30" pos:end="177:31">==</operator> <literal type="number" pos:start="177:33" pos:end="177:34">33</literal></expr>)</condition> <block pos:start="177:37" pos:end="181:21">{<block_content pos:start="179:25" pos:end="179:41">

                        <expr_stmt pos:start="179:25" pos:end="179:41"><expr pos:start="179:25" pos:end="179:40"><name pos:start="179:25" pos:end="179:34"><name pos:start="179:25" pos:end="179:25">s</name><operator pos:start="179:26" pos:end="179:27">-&gt;</operator><name pos:start="179:28" pos:end="179:34">mb_incr</name></name> <operator pos:start="179:36" pos:end="179:37">+=</operator> <literal type="number" pos:start="179:39" pos:end="179:40">33</literal></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <comment type="block" pos:start="183:21" pos:end="183:60">/* otherwise, stuffing, nothing to do */</comment>

                </block_content>}</block></if> <else pos:start="185:19" pos:end="191:17">else <block pos:start="185:24" pos:end="191:17">{<block_content pos:start="187:21" pos:end="189:26">

                    <expr_stmt pos:start="187:21" pos:end="187:39"><expr pos:start="187:21" pos:end="187:38"><name pos:start="187:21" pos:end="187:30"><name pos:start="187:21" pos:end="187:21">s</name><operator pos:start="187:22" pos:end="187:23">-&gt;</operator><name pos:start="187:24" pos:end="187:30">mb_incr</name></name> <operator pos:start="187:32" pos:end="187:33">+=</operator> <name pos:start="187:35" pos:end="187:38">code</name></expr>;</expr_stmt>

                    <break pos:start="189:21" pos:end="189:26">break;</break>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="197:9" pos:end="203:9"><if pos:start="197:9" pos:end="203:9">if<condition pos:start="197:11" pos:end="197:35">(<expr pos:start="197:12" pos:end="197:34"><name pos:start="197:12" pos:end="197:18"><name pos:start="197:12" pos:end="197:12">s</name><operator pos:start="197:13" pos:end="197:14">-&gt;</operator><name pos:start="197:15" pos:end="197:18">mb_y</name></name> <operator pos:start="197:20" pos:end="197:21">&gt;=</operator> <name pos:start="197:23" pos:end="197:34"><name pos:start="197:23" pos:end="197:23">s</name><operator pos:start="197:24" pos:end="197:25">-&gt;</operator><name pos:start="197:26" pos:end="197:34">mb_height</name></name></expr>)</condition><block pos:start="197:36" pos:end="203:9">{<block_content pos:start="199:13" pos:end="201:38">

            <expr_stmt pos:start="199:13" pos:end="199:48"><expr pos:start="199:13" pos:end="199:47"><call pos:start="199:13" pos:end="199:47"><name pos:start="199:13" pos:end="199:19">fprintf</name><argument_list pos:start="199:20" pos:end="199:47">(<argument pos:start="199:21" pos:end="199:26"><expr pos:start="199:21" pos:end="199:26"><name pos:start="199:21" pos:end="199:26">stderr</name></expr></argument>, <argument pos:start="199:29" pos:end="199:46"><expr pos:start="199:29" pos:end="199:46"><literal type="string" pos:start="199:29" pos:end="199:46">"slice too long\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="201:13" pos:end="201:38">return <expr pos:start="201:20" pos:end="201:37"><name pos:start="201:20" pos:end="201:37">DECODE_SLICE_ERROR</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<label pos:start="207:1" pos:end="207:4"><name pos:start="207:1" pos:end="207:3">eos</name>:</label> <comment type="line" pos:start="207:6" pos:end="207:19">//end of slice</comment>

    

    <expr_stmt pos:start="211:5" pos:end="211:13"><expr pos:start="211:5" pos:end="211:12"><call pos:start="211:5" pos:end="211:12"><name pos:start="211:5" pos:end="211:10">emms_c</name><argument_list pos:start="211:11" pos:end="211:12">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="215:5" pos:end="215:30">/* end of slice reached */</comment>

    <if_stmt pos:start="217:5" pos:end="265:5"><if pos:start="217:5" pos:end="261:5">if <condition pos:start="217:8" pos:end="219:32">(<comment type="block" pos:start="217:9" pos:end="217:27">/*s-&gt;mb_x == 0 &amp;&amp;*/</comment>

        <expr pos:start="219:9" pos:end="219:31"><name pos:start="219:9" pos:end="219:15"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:15">mb_y</name></name> <operator pos:start="219:17" pos:end="219:18">==</operator> <name pos:start="219:20" pos:end="219:31"><name pos:start="219:20" pos:end="219:20">s</name><operator pos:start="219:21" pos:end="219:22">-&gt;</operator><name pos:start="219:23" pos:end="219:31">mb_height</name></name></expr>)</condition> <block pos:start="219:34" pos:end="261:5">{<block_content pos:start="225:9" pos:end="259:32">

        <comment type="block" pos:start="221:9" pos:end="221:26">/* end of image */</comment>



        <if_stmt pos:start="225:9" pos:end="227:27"><if pos:start="225:9" pos:end="227:27">if<condition pos:start="225:11" pos:end="225:20">(<expr pos:start="225:12" pos:end="225:19"><name pos:start="225:12" pos:end="225:19"><name pos:start="225:12" pos:end="225:12">s</name><operator pos:start="225:13" pos:end="225:14">-&gt;</operator><name pos:start="225:15" pos:end="225:19">mpeg2</name></name></expr>)</condition><block type="pseudo" pos:start="227:13" pos:end="227:27"><block_content pos:start="227:13" pos:end="227:27">

            <expr_stmt pos:start="227:13" pos:end="227:27"><expr pos:start="227:13" pos:end="227:26"><name pos:start="227:13" pos:end="227:21"><name pos:start="227:13" pos:end="227:13">s</name><operator pos:start="227:14" pos:end="227:15">-&gt;</operator><name pos:start="227:16" pos:end="227:21">qscale</name></name> <operator pos:start="227:23" pos:end="227:25">&gt;&gt;=</operator><literal type="number" pos:start="227:26" pos:end="227:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="231:9" pos:end="231:25"><expr pos:start="231:9" pos:end="231:24"><call pos:start="231:9" pos:end="231:24"><name pos:start="231:9" pos:end="231:21">MPV_frame_end</name><argument_list pos:start="231:22" pos:end="231:24">(<argument pos:start="231:23" pos:end="231:23"><expr pos:start="231:23" pos:end="231:23"><name pos:start="231:23" pos:end="231:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="235:9" pos:end="257:9"><if pos:start="235:9" pos:end="239:9">if <condition pos:start="235:12" pos:end="235:51">(<expr pos:start="235:13" pos:end="235:50"><name pos:start="235:13" pos:end="235:24"><name pos:start="235:13" pos:end="235:13">s</name><operator pos:start="235:14" pos:end="235:15">-&gt;</operator><name pos:start="235:16" pos:end="235:24">pict_type</name></name> <operator pos:start="235:26" pos:end="235:27">==</operator> <name pos:start="235:29" pos:end="235:34">B_TYPE</name> <operator pos:start="235:36" pos:end="235:37">||</operator> <name pos:start="235:39" pos:end="235:50"><name pos:start="235:39" pos:end="235:39">s</name><operator pos:start="235:40" pos:end="235:41">-&gt;</operator><name pos:start="235:42" pos:end="235:50">low_delay</name></name></expr>)</condition> <block pos:start="235:53" pos:end="239:9">{<block_content pos:start="237:13" pos:end="237:50">

            <expr_stmt pos:start="237:13" pos:end="237:50"><expr pos:start="237:13" pos:end="237:49"><operator pos:start="237:13" pos:end="237:13">*</operator><name pos:start="237:14" pos:end="237:17">pict</name><operator pos:start="237:18" pos:end="237:18">=</operator> <operator pos:start="237:20" pos:end="237:20">*</operator><operator pos:start="237:21" pos:end="237:21">(</operator><name pos:start="237:22" pos:end="237:28">AVFrame</name><operator pos:start="237:29" pos:end="237:29">*</operator><operator pos:start="237:30" pos:end="237:30">)</operator><operator pos:start="237:31" pos:end="237:31">&amp;</operator><name pos:start="237:32" pos:end="237:49"><name pos:start="237:32" pos:end="237:32">s</name><operator pos:start="237:33" pos:end="237:34">-&gt;</operator><name pos:start="237:35" pos:end="237:49">current_picture</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="239:11" pos:end="257:9">else <block pos:start="239:16" pos:end="257:9">{<block_content pos:start="241:13" pos:end="255:13">

            <expr_stmt pos:start="241:13" pos:end="241:32"><expr pos:start="241:13" pos:end="241:31"><name pos:start="241:13" pos:end="241:29"><name pos:start="241:13" pos:end="241:13">s</name><operator pos:start="241:14" pos:end="241:15">-&gt;</operator><name pos:start="241:16" pos:end="241:29">picture_number</name></name><operator pos:start="241:30" pos:end="241:31">++</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="243:13" pos:end="243:55">/* latency of 1 frame for I and P frames */</comment>

            <comment type="block" pos:start="245:13" pos:end="245:63">/* XXX: use another variable than picture_number */</comment>

            <if_stmt pos:start="247:13" pos:end="255:13"><if pos:start="247:13" pos:end="251:13">if <condition pos:start="247:16" pos:end="247:48">(<expr pos:start="247:17" pos:end="247:47"><name pos:start="247:17" pos:end="247:39"><name pos:start="247:17" pos:end="247:17">s</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:31">last_picture</name><operator pos:start="247:32" pos:end="247:32">.</operator><name pos:start="247:33" pos:end="247:36">data</name><index pos:start="247:37" pos:end="247:39">[<expr pos:start="247:38" pos:end="247:38"><literal type="number" pos:start="247:38" pos:end="247:38">0</literal></expr>]</index></name> <operator pos:start="247:41" pos:end="247:42">==</operator> <name pos:start="247:44" pos:end="247:47">NULL</name></expr>)</condition> <block pos:start="247:50" pos:end="251:13">{<block_content pos:start="249:17" pos:end="249:39">

                <return pos:start="249:17" pos:end="249:39">return <expr pos:start="249:24" pos:end="249:38"><name pos:start="249:24" pos:end="249:38">DECODE_SLICE_OK</name></expr>;</return>

            </block_content>}</block></if> <else pos:start="251:15" pos:end="255:13">else <block pos:start="251:20" pos:end="255:13">{<block_content pos:start="253:17" pos:end="253:51">

                <expr_stmt pos:start="253:17" pos:end="253:51"><expr pos:start="253:17" pos:end="253:50"><operator pos:start="253:17" pos:end="253:17">*</operator><name pos:start="253:18" pos:end="253:21">pict</name><operator pos:start="253:22" pos:end="253:22">=</operator> <operator pos:start="253:24" pos:end="253:24">*</operator><operator pos:start="253:25" pos:end="253:25">(</operator><name pos:start="253:26" pos:end="253:32">AVFrame</name><operator pos:start="253:33" pos:end="253:33">*</operator><operator pos:start="253:34" pos:end="253:34">)</operator><operator pos:start="253:35" pos:end="253:35">&amp;</operator><name pos:start="253:36" pos:end="253:50"><name pos:start="253:36" pos:end="253:36">s</name><operator pos:start="253:37" pos:end="253:38">-&gt;</operator><name pos:start="253:39" pos:end="253:50">last_picture</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="259:9" pos:end="259:32">return <expr pos:start="259:16" pos:end="259:31"><name pos:start="259:16" pos:end="259:31">DECODE_SLICE_EOP</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="261:7" pos:end="265:5">else <block pos:start="261:12" pos:end="265:5">{<block_content pos:start="263:9" pos:end="263:31">

        <return pos:start="263:9" pos:end="263:31">return <expr pos:start="263:16" pos:end="263:30"><name pos:start="263:16" pos:end="263:30">DECODE_SLICE_OK</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
