<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4310.c" pos:tabs="8"><function pos:start="1:1" pos:end="153:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:28">ide_atapi_cmd_reply_end</name><parameter_list pos:start="1:29" pos:end="1:41">(<parameter pos:start="1:30" pos:end="1:40"><decl pos:start="1:30" pos:end="1:40"><type pos:start="1:30" pos:end="1:39"><name pos:start="1:30" pos:end="1:37">IDEState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:5">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:24">byte_count_limit</name></decl>, <decl pos:start="5:27" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:27" pos:end="5:30">size</name></decl>, <decl pos:start="5:33" pos:end="5:35"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:33" pos:end="5:35">ret</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:22">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:22">DEBUG_IDE_ATAPI</name></cpp:ifdef>

    <expr_stmt pos:start="9:5" pos:end="18:0"><expr pos:start="9:5" pos:end="15:30"><call pos:start="9:5" pos:end="15:30"><name pos:start="9:5" pos:end="9:10">printf</name><argument_list pos:start="9:11" pos:end="15:30">(<argument pos:start="9:12" pos:end="9:57"><expr pos:start="9:12" pos:end="9:57"><literal type="string" pos:start="9:12" pos:end="9:57">"reply: tx_size=%d elem_tx_size=%d index=%d\n"</literal></expr></argument>,

           <argument pos:start="11:12" pos:end="11:34"><expr pos:start="11:12" pos:end="11:34"><name pos:start="11:12" pos:end="11:34"><name pos:start="11:12" pos:end="11:12">s</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:34">packet_transfer_size</name></name></expr></argument>,

           <argument pos:start="13:12" pos:end="13:38"><expr pos:start="13:12" pos:end="13:38"><name pos:start="13:12" pos:end="13:38"><name pos:start="13:12" pos:end="13:12">s</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:38">elementary_transfer_size</name></name></expr></argument>,

           <argument pos:start="15:12" pos:end="15:29"><expr pos:start="15:12" pos:end="15:29"><name pos:start="15:12" pos:end="15:29"><name pos:start="15:12" pos:end="15:12">s</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:29">io_buffer_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="19:5" pos:end="151:5"><if pos:start="19:5" pos:end="37:5">if <condition pos:start="19:8" pos:end="19:37">(<expr pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:31"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:31">packet_transfer_size</name></name> <operator pos:start="19:33" pos:end="19:34">&lt;=</operator> <literal type="number" pos:start="19:36" pos:end="19:36">0</literal></expr>)</condition> <block pos:start="19:39" pos:end="37:5">{<block_content pos:start="23:9" pos:end="36:0">

        <comment type="block" pos:start="21:9" pos:end="21:29">/* end of transfer */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:43"><expr pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:17">status</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <name pos:start="23:21" pos:end="23:30">READY_STAT</name> <operator pos:start="23:32" pos:end="23:32">|</operator> <name pos:start="23:34" pos:end="23:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:83"><expr pos:start="25:9" pos:end="25:82"><name pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:18">nsector</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <operator pos:start="25:22" pos:end="25:22">(</operator><name pos:start="25:23" pos:end="25:32"><name pos:start="25:23" pos:end="25:23">s</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:32">nsector</name></name> <operator pos:start="25:34" pos:end="25:34">&amp;</operator> <operator pos:start="25:36" pos:end="25:36">~</operator><literal type="number" pos:start="25:37" pos:end="25:37">7</literal><operator pos:start="25:38" pos:end="25:38">)</operator> <operator pos:start="25:40" pos:end="25:40">|</operator> <name pos:start="25:42" pos:end="25:60">ATAPI_INT_REASON_IO</name> <operator pos:start="25:62" pos:end="25:62">|</operator> <name pos:start="25:64" pos:end="25:82">ATAPI_INT_REASON_CD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:29"><expr pos:start="27:9" pos:end="27:28"><call pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:25">ide_transfer_stop</name><argument_list pos:start="27:26" pos:end="27:28">(<argument pos:start="27:27" pos:end="27:27"><expr pos:start="27:27" pos:end="27:27"><name pos:start="27:27" pos:end="27:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="32:0"><expr pos:start="29:9" pos:end="29:27"><call pos:start="29:9" pos:end="29:27"><name pos:start="29:9" pos:end="29:19">ide_set_irq</name><argument_list pos:start="29:20" pos:end="29:27">(<argument pos:start="29:21" pos:end="29:26"><expr pos:start="29:21" pos:end="29:26"><name pos:start="29:21" pos:end="29:26"><name pos:start="29:21" pos:end="29:21">s</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="31:1" pos:end="31:22">#<cpp:directive pos:start="31:2" pos:end="31:6">ifdef</cpp:directive> <name pos:start="31:8" pos:end="31:22">DEBUG_IDE_ATAPI</name></cpp:ifdef>

        <expr_stmt pos:start="33:9" pos:end="36:0"><expr pos:start="33:9" pos:end="33:42"><call pos:start="33:9" pos:end="33:42"><name pos:start="33:9" pos:end="33:14">printf</name><argument_list pos:start="33:15" pos:end="33:42">(<argument pos:start="33:16" pos:end="33:30"><expr pos:start="33:16" pos:end="33:30"><literal type="string" pos:start="33:16" pos:end="33:30">"status=0x%x\n"</literal></expr></argument>, <argument pos:start="33:33" pos:end="33:41"><expr pos:start="33:33" pos:end="33:41"><name pos:start="33:33" pos:end="33:41"><name pos:start="33:33" pos:end="33:33">s</name><operator pos:start="33:34" pos:end="33:35">-&gt;</operator><name pos:start="33:36" pos:end="33:41">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="151:5">else <block pos:start="37:12" pos:end="151:5">{<block_content pos:start="41:9" pos:end="149:9">

        <comment type="block" pos:start="39:9" pos:end="39:46">/* see if a new sector must be read */</comment>

        <if_stmt pos:start="41:9" pos:end="59:9"><if pos:start="41:9" pos:end="59:9">if <condition pos:start="41:12" pos:end="41:68">(<expr pos:start="41:13" pos:end="41:67"><name pos:start="41:13" pos:end="41:18"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:18">lba</name></name> <operator pos:start="41:20" pos:end="41:21">!=</operator> <operator pos:start="41:23" pos:end="41:23">-</operator><literal type="number" pos:start="41:24" pos:end="41:24">1</literal> <operator pos:start="41:26" pos:end="41:27">&amp;&amp;</operator> <name pos:start="41:29" pos:end="41:46"><name pos:start="41:29" pos:end="41:29">s</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:46">io_buffer_index</name></name> <operator pos:start="41:48" pos:end="41:49">&gt;=</operator> <name pos:start="41:51" pos:end="41:67"><name pos:start="41:51" pos:end="41:51">s</name><operator pos:start="41:52" pos:end="41:53">-&gt;</operator><name pos:start="41:54" pos:end="41:67">cd_sector_size</name></name></expr>)</condition> <block pos:start="41:70" pos:end="59:9">{<block_content pos:start="43:13" pos:end="57:35">

            <expr_stmt pos:start="43:13" pos:end="43:77"><expr pos:start="43:13" pos:end="43:76"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:76"><name pos:start="43:19" pos:end="43:32">cd_read_sector</name><argument_list pos:start="43:33" pos:end="43:76">(<argument pos:start="43:34" pos:end="43:34"><expr pos:start="43:34" pos:end="43:34"><name pos:start="43:34" pos:end="43:34">s</name></expr></argument>, <argument pos:start="43:37" pos:end="43:42"><expr pos:start="43:37" pos:end="43:42"><name pos:start="43:37" pos:end="43:42"><name pos:start="43:37" pos:end="43:37">s</name><operator pos:start="43:38" pos:end="43:39">-&gt;</operator><name pos:start="43:40" pos:end="43:42">lba</name></name></expr></argument>, <argument pos:start="43:45" pos:end="43:56"><expr pos:start="43:45" pos:end="43:56"><name pos:start="43:45" pos:end="43:56"><name pos:start="43:45" pos:end="43:45">s</name><operator pos:start="43:46" pos:end="43:47">-&gt;</operator><name pos:start="43:48" pos:end="43:56">io_buffer</name></name></expr></argument>, <argument pos:start="43:59" pos:end="43:75"><expr pos:start="43:59" pos:end="43:75"><name pos:start="43:59" pos:end="43:75"><name pos:start="43:59" pos:end="43:59">s</name><operator pos:start="43:60" pos:end="43:61">-&gt;</operator><name pos:start="43:62" pos:end="43:75">cd_sector_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="53:13"><if pos:start="45:13" pos:end="53:13">if <condition pos:start="45:16" pos:end="45:24">(<expr pos:start="45:17" pos:end="45:23"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:21">&lt;</operator> <literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>)</condition> <block pos:start="45:26" pos:end="53:13">{<block_content pos:start="47:17" pos:end="51:23">

                <expr_stmt pos:start="47:17" pos:end="47:37"><expr pos:start="47:17" pos:end="47:36"><call pos:start="47:17" pos:end="47:36"><name pos:start="47:17" pos:end="47:33">ide_transfer_stop</name><argument_list pos:start="47:34" pos:end="47:36">(<argument pos:start="47:35" pos:end="47:35"><expr pos:start="47:35" pos:end="47:35"><name pos:start="47:35" pos:end="47:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:43"><expr pos:start="49:17" pos:end="49:42"><call pos:start="49:17" pos:end="49:42"><name pos:start="49:17" pos:end="49:34">ide_atapi_io_error</name><argument_list pos:start="49:35" pos:end="49:42">(<argument pos:start="49:36" pos:end="49:36"><expr pos:start="49:36" pos:end="49:36"><name pos:start="49:36" pos:end="49:36">s</name></expr></argument>, <argument pos:start="49:39" pos:end="49:41"><expr pos:start="49:39" pos:end="49:41"><name pos:start="49:39" pos:end="49:41">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="51:17" pos:end="51:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:21"><expr pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:18"><name pos:start="55:13" pos:end="55:13">s</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:18">lba</name></name><operator pos:start="55:19" pos:end="55:20">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:35"><expr pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:30"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:30">io_buffer_index</name></name> <operator pos:start="57:32" pos:end="57:32">=</operator> <literal type="number" pos:start="57:34" pos:end="57:34">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="61:9" pos:end="149:9"><if pos:start="61:9" pos:end="83:9">if <condition pos:start="61:12" pos:end="61:44">(<expr pos:start="61:13" pos:end="61:43"><name pos:start="61:13" pos:end="61:39"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:39">elementary_transfer_size</name></name> <operator pos:start="61:41" pos:end="61:41">&gt;</operator> <literal type="number" pos:start="61:43" pos:end="61:43">0</literal></expr>)</condition> <block pos:start="61:46" pos:end="83:9">{<block_content pos:start="67:13" pos:end="81:62">

            <comment type="block" pos:start="63:13" pos:end="65:26">/* there are some data left to transmit in this elementary

               transfer */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:58"><expr pos:start="67:13" pos:end="67:57"><name pos:start="67:13" pos:end="67:16">size</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <name pos:start="67:20" pos:end="67:36"><name pos:start="67:20" pos:end="67:20">s</name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:36">cd_sector_size</name></name> <operator pos:start="67:38" pos:end="67:38">-</operator> <name pos:start="67:40" pos:end="67:57"><name pos:start="67:40" pos:end="67:40">s</name><operator pos:start="67:41" pos:end="67:42">-&gt;</operator><name pos:start="67:43" pos:end="67:57">io_buffer_index</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="69:13" pos:end="71:51"><if pos:start="69:13" pos:end="71:51">if <condition pos:start="69:16" pos:end="69:51">(<expr pos:start="69:17" pos:end="69:50"><name pos:start="69:17" pos:end="69:20">size</name> <operator pos:start="69:22" pos:end="69:22">&gt;</operator> <name pos:start="69:24" pos:end="69:50"><name pos:start="69:24" pos:end="69:24">s</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:50">elementary_transfer_size</name></name></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:51"><block_content pos:start="71:17" pos:end="71:51">

                <expr_stmt pos:start="71:17" pos:end="71:51"><expr pos:start="71:17" pos:end="71:50"><name pos:start="71:17" pos:end="71:20">size</name> <operator pos:start="71:22" pos:end="71:22">=</operator> <name pos:start="71:24" pos:end="71:50"><name pos:start="71:24" pos:end="71:24">s</name><operator pos:start="71:25" pos:end="71:26">-&gt;</operator><name pos:start="71:27" pos:end="71:50">elementary_transfer_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:44"><expr pos:start="73:13" pos:end="73:43"><name pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:13">s</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:35">packet_transfer_size</name></name> <operator pos:start="73:37" pos:end="73:38">-=</operator> <name pos:start="73:40" pos:end="73:43">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:48"><expr pos:start="75:13" pos:end="75:47"><name pos:start="75:13" pos:end="75:39"><name pos:start="75:13" pos:end="75:13">s</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:39">elementary_transfer_size</name></name> <operator pos:start="75:41" pos:end="75:42">-=</operator> <name pos:start="75:44" pos:end="75:47">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:39"><expr pos:start="77:13" pos:end="77:38"><name pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:30">io_buffer_index</name></name> <operator pos:start="77:32" pos:end="77:33">+=</operator> <name pos:start="77:35" pos:end="77:38">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="81:62"><expr pos:start="79:13" pos:end="81:61"><call pos:start="79:13" pos:end="81:61"><name pos:start="79:13" pos:end="79:30">ide_transfer_start</name><argument_list pos:start="79:31" pos:end="81:61">(<argument pos:start="79:32" pos:end="79:32"><expr pos:start="79:32" pos:end="79:32"><name pos:start="79:32" pos:end="79:32">s</name></expr></argument>, <argument pos:start="79:35" pos:end="79:74"><expr pos:start="79:35" pos:end="79:74"><name pos:start="79:35" pos:end="79:46"><name pos:start="79:35" pos:end="79:35">s</name><operator pos:start="79:36" pos:end="79:37">-&gt;</operator><name pos:start="79:38" pos:end="79:46">io_buffer</name></name> <operator pos:start="79:48" pos:end="79:48">+</operator> <name pos:start="79:50" pos:end="79:67"><name pos:start="79:50" pos:end="79:50">s</name><operator pos:start="79:51" pos:end="79:52">-&gt;</operator><name pos:start="79:53" pos:end="79:67">io_buffer_index</name></name> <operator pos:start="79:69" pos:end="79:69">-</operator> <name pos:start="79:71" pos:end="79:74">size</name></expr></argument>,

                               <argument pos:start="81:32" pos:end="81:35"><expr pos:start="81:32" pos:end="81:35"><name pos:start="81:32" pos:end="81:35">size</name></expr></argument>, <argument pos:start="81:38" pos:end="81:60"><expr pos:start="81:38" pos:end="81:60"><name pos:start="81:38" pos:end="81:60">ide_atapi_cmd_reply_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="83:11" pos:end="149:9">else <block pos:start="83:16" pos:end="149:9">{<block_content pos:start="87:13" pos:end="148:0">

            <comment type="block" pos:start="85:13" pos:end="85:42">/* a new transfer is needed */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:65"><expr pos:start="87:13" pos:end="87:64"><name pos:start="87:13" pos:end="87:22"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:22">nsector</name></name> <operator pos:start="87:24" pos:end="87:24">=</operator> <operator pos:start="87:26" pos:end="87:26">(</operator><name pos:start="87:27" pos:end="87:36"><name pos:start="87:27" pos:end="87:27">s</name><operator pos:start="87:28" pos:end="87:29">-&gt;</operator><name pos:start="87:30" pos:end="87:36">nsector</name></name> <operator pos:start="87:38" pos:end="87:38">&amp;</operator> <operator pos:start="87:40" pos:end="87:40">~</operator><literal type="number" pos:start="87:41" pos:end="87:41">7</literal><operator pos:start="87:42" pos:end="87:42">)</operator> <operator pos:start="87:44" pos:end="87:44">|</operator> <name pos:start="87:46" pos:end="87:64">ATAPI_INT_REASON_IO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="92:0"><expr pos:start="89:13" pos:end="89:55"><name pos:start="89:13" pos:end="89:28">byte_count_limit</name> <operator pos:start="89:30" pos:end="89:30">=</operator> <name pos:start="89:32" pos:end="89:38"><name pos:start="89:32" pos:end="89:32">s</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:38">lcyl</name></name> <operator pos:start="89:40" pos:end="89:40">|</operator> <operator pos:start="89:42" pos:end="89:42">(</operator><name pos:start="89:43" pos:end="89:49"><name pos:start="89:43" pos:end="89:43">s</name><operator pos:start="89:44" pos:end="89:45">-&gt;</operator><name pos:start="89:46" pos:end="89:49">hcyl</name></name> <operator pos:start="89:51" pos:end="89:52">&lt;&lt;</operator> <literal type="number" pos:start="89:54" pos:end="89:54">8</literal><operator pos:start="89:55" pos:end="89:55">)</operator></expr>;</expr_stmt>

<cpp:ifdef pos:start="91:1" pos:end="91:22">#<cpp:directive pos:start="91:2" pos:end="91:6">ifdef</cpp:directive> <name pos:start="91:8" pos:end="91:22">DEBUG_IDE_ATAPI</name></cpp:ifdef>

            <expr_stmt pos:start="93:13" pos:end="96:0"><expr pos:start="93:13" pos:end="93:61"><call pos:start="93:13" pos:end="93:61"><name pos:start="93:13" pos:end="93:18">printf</name><argument_list pos:start="93:19" pos:end="93:61">(<argument pos:start="93:20" pos:end="93:42"><expr pos:start="93:20" pos:end="93:42"><literal type="string" pos:start="93:20" pos:end="93:42">"byte_count_limit=%d\n"</literal></expr></argument>, <argument pos:start="93:45" pos:end="93:60"><expr pos:start="93:45" pos:end="93:60"><name pos:start="93:45" pos:end="93:60">byte_count_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="97:13" pos:end="99:35"><if pos:start="97:13" pos:end="99:35">if <condition pos:start="97:16" pos:end="97:43">(<expr pos:start="97:17" pos:end="97:42"><name pos:start="97:17" pos:end="97:32">byte_count_limit</name> <operator pos:start="97:34" pos:end="97:35">==</operator> <literal type="number" pos:start="97:37" pos:end="97:42">0xffff</literal></expr>)</condition><block type="pseudo" pos:start="99:17" pos:end="99:35"><block_content pos:start="99:17" pos:end="99:35">

                <expr_stmt pos:start="99:17" pos:end="99:35"><expr pos:start="99:17" pos:end="99:34"><name pos:start="99:17" pos:end="99:32">byte_count_limit</name><operator pos:start="99:33" pos:end="99:34">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:43"><expr pos:start="101:13" pos:end="101:42"><name pos:start="101:13" pos:end="101:16">size</name> <operator pos:start="101:18" pos:end="101:18">=</operator> <name pos:start="101:20" pos:end="101:42"><name pos:start="101:20" pos:end="101:20">s</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:42">packet_transfer_size</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="103:13" pos:end="113:13"><if pos:start="103:13" pos:end="113:13">if <condition pos:start="103:16" pos:end="103:40">(<expr pos:start="103:17" pos:end="103:39"><name pos:start="103:17" pos:end="103:20">size</name> <operator pos:start="103:22" pos:end="103:22">&gt;</operator> <name pos:start="103:24" pos:end="103:39">byte_count_limit</name></expr>)</condition> <block pos:start="103:42" pos:end="113:13">{<block_content pos:start="107:17" pos:end="111:40">

                <comment type="block" pos:start="105:17" pos:end="105:64">/* byte count limit must be even if this case */</comment>

                <if_stmt pos:start="107:17" pos:end="109:39"><if pos:start="107:17" pos:end="109:39">if <condition pos:start="107:20" pos:end="107:41">(<expr pos:start="107:21" pos:end="107:40"><name pos:start="107:21" pos:end="107:36">byte_count_limit</name> <operator pos:start="107:38" pos:end="107:38">&amp;</operator> <literal type="number" pos:start="107:40" pos:end="107:40">1</literal></expr>)</condition><block type="pseudo" pos:start="109:21" pos:end="109:39"><block_content pos:start="109:21" pos:end="109:39">

                    <expr_stmt pos:start="109:21" pos:end="109:39"><expr pos:start="109:21" pos:end="109:38"><name pos:start="109:21" pos:end="109:36">byte_count_limit</name><operator pos:start="109:37" pos:end="109:38">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:40"><expr pos:start="111:17" pos:end="111:39"><name pos:start="111:17" pos:end="111:20">size</name> <operator pos:start="111:22" pos:end="111:22">=</operator> <name pos:start="111:24" pos:end="111:39">byte_count_limit</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:27"><expr pos:start="115:13" pos:end="115:26"><name pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:13">s</name><operator pos:start="115:14" pos:end="115:15">-&gt;</operator><name pos:start="115:16" pos:end="115:19">lcyl</name></name> <operator pos:start="115:21" pos:end="115:21">=</operator> <name pos:start="115:23" pos:end="115:26">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:32"><expr pos:start="117:13" pos:end="117:31"><name pos:start="117:13" pos:end="117:19"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:19">hcyl</name></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <name pos:start="117:23" pos:end="117:26">size</name> <operator pos:start="117:28" pos:end="117:29">&gt;&gt;</operator> <literal type="number" pos:start="117:31" pos:end="117:31">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:47"><expr pos:start="119:13" pos:end="119:46"><name pos:start="119:13" pos:end="119:39"><name pos:start="119:13" pos:end="119:13">s</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:39">elementary_transfer_size</name></name> <operator pos:start="119:41" pos:end="119:41">=</operator> <name pos:start="119:43" pos:end="119:46">size</name></expr>;</expr_stmt>

            <comment type="block" pos:start="121:13" pos:end="121:67">/* we cannot transmit more than one sector at a time */</comment>

            <if_stmt pos:start="123:13" pos:end="129:13"><if pos:start="123:13" pos:end="129:13">if <condition pos:start="123:16" pos:end="123:29">(<expr pos:start="123:17" pos:end="123:28"><name pos:start="123:17" pos:end="123:22"><name pos:start="123:17" pos:end="123:17">s</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:22">lba</name></name> <operator pos:start="123:24" pos:end="123:25">!=</operator> <operator pos:start="123:27" pos:end="123:27">-</operator><literal type="number" pos:start="123:28" pos:end="123:28">1</literal></expr>)</condition> <block pos:start="123:31" pos:end="129:13">{<block_content pos:start="125:17" pos:end="127:68">

                <if_stmt pos:start="125:17" pos:end="127:68"><if pos:start="125:17" pos:end="127:68">if <condition pos:start="125:20" pos:end="125:68">(<expr pos:start="125:21" pos:end="125:67"><name pos:start="125:21" pos:end="125:24">size</name> <operator pos:start="125:26" pos:end="125:26">&gt;</operator> <operator pos:start="125:28" pos:end="125:28">(</operator><name pos:start="125:29" pos:end="125:45"><name pos:start="125:29" pos:end="125:29">s</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:45">cd_sector_size</name></name> <operator pos:start="125:47" pos:end="125:47">-</operator> <name pos:start="125:49" pos:end="125:66"><name pos:start="125:49" pos:end="125:49">s</name><operator pos:start="125:50" pos:end="125:51">-&gt;</operator><name pos:start="125:52" pos:end="125:66">io_buffer_index</name></name><operator pos:start="125:67" pos:end="125:67">)</operator></expr>)</condition><block type="pseudo" pos:start="127:21" pos:end="127:68"><block_content pos:start="127:21" pos:end="127:68">

                    <expr_stmt pos:start="127:21" pos:end="127:68"><expr pos:start="127:21" pos:end="127:67"><name pos:start="127:21" pos:end="127:24">size</name> <operator pos:start="127:26" pos:end="127:26">=</operator> <operator pos:start="127:28" pos:end="127:28">(</operator><name pos:start="127:29" pos:end="127:45"><name pos:start="127:29" pos:end="127:29">s</name><operator pos:start="127:30" pos:end="127:31">-&gt;</operator><name pos:start="127:32" pos:end="127:45">cd_sector_size</name></name> <operator pos:start="127:47" pos:end="127:47">-</operator> <name pos:start="127:49" pos:end="127:66"><name pos:start="127:49" pos:end="127:49">s</name><operator pos:start="127:50" pos:end="127:51">-&gt;</operator><name pos:start="127:52" pos:end="127:66">io_buffer_index</name></name><operator pos:start="127:67" pos:end="127:67">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:44"><expr pos:start="131:13" pos:end="131:43"><name pos:start="131:13" pos:end="131:35"><name pos:start="131:13" pos:end="131:13">s</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:35">packet_transfer_size</name></name> <operator pos:start="131:37" pos:end="131:38">-=</operator> <name pos:start="131:40" pos:end="131:43">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:48"><expr pos:start="133:13" pos:end="133:47"><name pos:start="133:13" pos:end="133:39"><name pos:start="133:13" pos:end="133:13">s</name><operator pos:start="133:14" pos:end="133:15">-&gt;</operator><name pos:start="133:16" pos:end="133:39">elementary_transfer_size</name></name> <operator pos:start="133:41" pos:end="133:42">-=</operator> <name pos:start="133:44" pos:end="133:47">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:39"><expr pos:start="135:13" pos:end="135:38"><name pos:start="135:13" pos:end="135:30"><name pos:start="135:13" pos:end="135:13">s</name><operator pos:start="135:14" pos:end="135:15">-&gt;</operator><name pos:start="135:16" pos:end="135:30">io_buffer_index</name></name> <operator pos:start="135:32" pos:end="135:33">+=</operator> <name pos:start="135:35" pos:end="135:38">size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="139:62"><expr pos:start="137:13" pos:end="139:61"><call pos:start="137:13" pos:end="139:61"><name pos:start="137:13" pos:end="137:30">ide_transfer_start</name><argument_list pos:start="137:31" pos:end="139:61">(<argument pos:start="137:32" pos:end="137:32"><expr pos:start="137:32" pos:end="137:32"><name pos:start="137:32" pos:end="137:32">s</name></expr></argument>, <argument pos:start="137:35" pos:end="137:74"><expr pos:start="137:35" pos:end="137:74"><name pos:start="137:35" pos:end="137:46"><name pos:start="137:35" pos:end="137:35">s</name><operator pos:start="137:36" pos:end="137:37">-&gt;</operator><name pos:start="137:38" pos:end="137:46">io_buffer</name></name> <operator pos:start="137:48" pos:end="137:48">+</operator> <name pos:start="137:50" pos:end="137:67"><name pos:start="137:50" pos:end="137:50">s</name><operator pos:start="137:51" pos:end="137:52">-&gt;</operator><name pos:start="137:53" pos:end="137:67">io_buffer_index</name></name> <operator pos:start="137:69" pos:end="137:69">-</operator> <name pos:start="137:71" pos:end="137:74">size</name></expr></argument>,

                               <argument pos:start="139:32" pos:end="139:35"><expr pos:start="139:32" pos:end="139:35"><name pos:start="139:32" pos:end="139:35">size</name></expr></argument>, <argument pos:start="139:38" pos:end="139:60"><expr pos:start="139:38" pos:end="139:60"><name pos:start="139:38" pos:end="139:60">ide_atapi_cmd_reply_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="144:0"><expr pos:start="141:13" pos:end="141:31"><call pos:start="141:13" pos:end="141:31"><name pos:start="141:13" pos:end="141:23">ide_set_irq</name><argument_list pos:start="141:24" pos:end="141:31">(<argument pos:start="141:25" pos:end="141:30"><expr pos:start="141:25" pos:end="141:30"><name pos:start="141:25" pos:end="141:30"><name pos:start="141:25" pos:end="141:25">s</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:30">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="143:1" pos:end="143:22">#<cpp:directive pos:start="143:2" pos:end="143:6">ifdef</cpp:directive> <name pos:start="143:8" pos:end="143:22">DEBUG_IDE_ATAPI</name></cpp:ifdef>

            <expr_stmt pos:start="145:13" pos:end="148:0"><expr pos:start="145:13" pos:end="145:46"><call pos:start="145:13" pos:end="145:46"><name pos:start="145:13" pos:end="145:18">printf</name><argument_list pos:start="145:19" pos:end="145:46">(<argument pos:start="145:20" pos:end="145:34"><expr pos:start="145:20" pos:end="145:34"><literal type="string" pos:start="145:20" pos:end="145:34">"status=0x%x\n"</literal></expr></argument>, <argument pos:start="145:37" pos:end="145:45"><expr pos:start="145:37" pos:end="145:45"><name pos:start="145:37" pos:end="145:45"><name pos:start="145:37" pos:end="145:37">s</name><operator pos:start="145:38" pos:end="145:39">-&gt;</operator><name pos:start="145:40" pos:end="145:45">status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
