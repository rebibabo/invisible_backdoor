<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22938.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">ff_asf_get_packet</name><parameter_list pos:start="1:29" pos:end="1:65">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:64"><decl pos:start="1:50" pos:end="1:64"><type pos:start="1:50" pos:end="1:64"><name pos:start="1:50" pos:end="1:60">AVIOContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">pb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="159:1">{<block_content pos:start="5:5" pos:end="157:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">ASFContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">asf</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:26">packet_length</name></decl>, <decl pos:start="7:29" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:29" pos:end="7:35">padsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">rsize</name> <init pos:start="9:15" pos:end="9:17">= <expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">8</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">c</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">d</name></decl>, <decl pos:start="11:15" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:15">e</name></decl>, <decl pos:start="11:18" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:18" pos:end="11:20">off</name></decl>;</decl_stmt>



    <comment type="line" pos:start="15:5" pos:end="15:64">// if we do not know packet size, allow skipping up to 32 kB</comment>

    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:7">off</name><operator pos:start="17:8" pos:end="17:8">=</operator> <literal type="number" pos:start="17:10" pos:end="17:14">32768</literal></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="21:67"><if pos:start="19:5" pos:end="21:67">if <condition pos:start="19:8" pos:end="19:27">(<expr pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:22">packet_size</name></name> <operator pos:start="19:24" pos:end="19:24">&gt;</operator> <literal type="number" pos:start="19:26" pos:end="19:26">0</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:67"><block_content pos:start="21:9" pos:end="21:67">

        <expr_stmt pos:start="21:9" pos:end="21:67"><expr pos:start="21:9" pos:end="21:66"><name pos:start="21:9" pos:end="21:11">off</name><operator pos:start="21:12" pos:end="21:12">=</operator> <operator pos:start="21:14" pos:end="21:14">(</operator><call pos:start="21:15" pos:end="21:27"><name pos:start="21:15" pos:end="21:23">avio_tell</name><argument_list pos:start="21:24" pos:end="21:27">(<argument pos:start="21:25" pos:end="21:26"><expr pos:start="21:25" pos:end="21:26"><name pos:start="21:25" pos:end="21:26">pb</name></expr></argument>)</argument_list></call> <operator pos:start="21:29" pos:end="21:29">-</operator> <name pos:start="21:31" pos:end="21:44"><name pos:start="21:31" pos:end="21:31">s</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:44">data_offset</name></name><operator pos:start="21:45" pos:end="21:45">)</operator> <operator pos:start="21:47" pos:end="21:47">%</operator> <name pos:start="21:49" pos:end="21:62"><name pos:start="21:49" pos:end="21:49">s</name><operator pos:start="21:50" pos:end="21:51">-&gt;</operator><name pos:start="21:52" pos:end="21:62">packet_size</name></name> <operator pos:start="21:64" pos:end="21:64">+</operator> <literal type="number" pos:start="21:66" pos:end="21:66">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:13"><expr pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:5">c</name><operator pos:start="25:6" pos:end="25:6">=</operator><name pos:start="25:7" pos:end="25:7">d</name><operator pos:start="25:8" pos:end="25:8">=</operator><name pos:start="25:9" pos:end="25:9">e</name><operator pos:start="25:10" pos:end="25:10">=</operator><operator pos:start="25:11" pos:end="25:11">-</operator><literal type="number" pos:start="25:12" pos:end="25:12">1</literal></expr>;</expr_stmt>

    <while pos:start="27:5" pos:end="37:5">while<condition pos:start="27:10" pos:end="27:20">(<expr pos:start="27:11" pos:end="27:19"><name pos:start="27:11" pos:end="27:13">off</name><operator pos:start="27:14" pos:end="27:15">--</operator> <operator pos:start="27:17" pos:end="27:17">&gt;</operator> <literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr>)</condition><block pos:start="27:21" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:18">

        <expr_stmt pos:start="29:9" pos:end="29:12"><expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:9">c</name><operator pos:start="29:10" pos:end="29:10">=</operator><name pos:start="29:11" pos:end="29:11">d</name></expr>;</expr_stmt> <expr_stmt pos:start="29:14" pos:end="29:17"><expr pos:start="29:14" pos:end="29:16"><name pos:start="29:14" pos:end="29:14">d</name><operator pos:start="29:15" pos:end="29:15">=</operator><name pos:start="29:16" pos:end="29:16">e</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:23"><expr pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:9">e</name><operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:22"><name pos:start="31:12" pos:end="31:18">avio_r8</name><argument_list pos:start="31:19" pos:end="31:22">(<argument pos:start="31:20" pos:end="31:21"><expr pos:start="31:20" pos:end="31:21"><name pos:start="31:20" pos:end="31:21">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="35:18"><if pos:start="33:9" pos:end="35:18">if<condition pos:start="33:11" pos:end="33:33">(<expr pos:start="33:12" pos:end="33:32"><name pos:start="33:12" pos:end="33:12">c</name> <operator pos:start="33:14" pos:end="33:15">==</operator> <literal type="number" pos:start="33:17" pos:end="33:20">0x82</literal> <operator pos:start="33:22" pos:end="33:23">&amp;&amp;</operator> <operator pos:start="33:25" pos:end="33:25">!</operator><name pos:start="33:26" pos:end="33:26">d</name> <operator pos:start="33:28" pos:end="33:29">&amp;&amp;</operator> <operator pos:start="33:31" pos:end="33:31">!</operator><name pos:start="33:32" pos:end="33:32">e</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:18"><block_content pos:start="35:13" pos:end="35:18">

            <break pos:start="35:13" pos:end="35:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="41:5" pos:end="63:5"><if pos:start="41:5" pos:end="63:5">if <condition pos:start="41:8" pos:end="41:18">(<expr pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:9">c</name> <operator pos:start="41:11" pos:end="41:12">!=</operator> <literal type="number" pos:start="41:14" pos:end="41:17">0x82</literal></expr>)</condition> <block pos:start="41:20" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:94">

        <comment type="block" format="doxygen" pos:start="43:9" pos:end="53:11">/**

         * This code allows handling of -EAGAIN at packet boundaries (i.e.

         * if the packet sync code above triggers -EAGAIN). This does not

         * imply complete -EAGAIN handling support at random positions in

         * the stream.

         */</comment>

        <if_stmt pos:start="55:9" pos:end="57:35"><if pos:start="55:9" pos:end="57:35">if <condition pos:start="55:12" pos:end="55:41">(<expr pos:start="55:13" pos:end="55:40"><name pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:14">pb</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:21">error</name></name> <operator pos:start="55:23" pos:end="55:24">==</operator> <call pos:start="55:26" pos:end="55:40"><name pos:start="55:26" pos:end="55:32">AVERROR</name><argument_list pos:start="55:33" pos:end="55:40">(<argument pos:start="55:34" pos:end="55:39"><expr pos:start="55:34" pos:end="55:39"><name pos:start="55:34" pos:end="55:39">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:35"><block_content pos:start="57:13" pos:end="57:35">

            <return pos:start="57:13" pos:end="57:35">return <expr pos:start="57:20" pos:end="57:34"><call pos:start="57:20" pos:end="57:34"><name pos:start="57:20" pos:end="57:26">AVERROR</name><argument_list pos:start="57:27" pos:end="57:34">(<argument pos:start="57:28" pos:end="57:33"><expr pos:start="57:28" pos:end="57:33"><name pos:start="57:28" pos:end="57:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="61:94"><if pos:start="59:9" pos:end="61:94">if <condition pos:start="59:12" pos:end="59:26">(<expr pos:start="59:13" pos:end="59:25"><operator pos:start="59:13" pos:end="59:13">!</operator><call pos:start="59:14" pos:end="59:25"><name pos:start="59:14" pos:end="59:21">url_feof</name><argument_list pos:start="59:22" pos:end="59:25">(<argument pos:start="59:23" pos:end="59:24"><expr pos:start="59:23" pos:end="59:24"><name pos:start="59:23" pos:end="59:24">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:94"><block_content pos:start="61:13" pos:end="61:94">

            <expr_stmt pos:start="61:13" pos:end="61:94"><expr pos:start="61:13" pos:end="61:93"><call pos:start="61:13" pos:end="61:93"><name pos:start="61:13" pos:end="61:18">av_log</name><argument_list pos:start="61:19" pos:end="61:93">(<argument pos:start="61:20" pos:end="61:20"><expr pos:start="61:20" pos:end="61:20"><name pos:start="61:20" pos:end="61:20">s</name></expr></argument>, <argument pos:start="61:23" pos:end="61:34"><expr pos:start="61:23" pos:end="61:34"><name pos:start="61:23" pos:end="61:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:37" pos:end="61:74"><expr pos:start="61:37" pos:end="61:74"><literal type="string" pos:start="61:37" pos:end="61:64">"ff asf bad header %x  at:%"</literal><name pos:start="61:65" pos:end="61:70">PRId64</name><literal type="string" pos:start="61:71" pos:end="61:74">"\n"</literal></expr></argument>, <argument pos:start="61:77" pos:end="61:77"><expr pos:start="61:77" pos:end="61:77"><name pos:start="61:77" pos:end="61:77">c</name></expr></argument>, <argument pos:start="61:80" pos:end="61:92"><expr pos:start="61:80" pos:end="61:92"><call pos:start="61:80" pos:end="61:92"><name pos:start="61:80" pos:end="61:88">avio_tell</name><argument_list pos:start="61:89" pos:end="61:92">(<argument pos:start="61:90" pos:end="61:91"><expr pos:start="61:90" pos:end="61:91"><name pos:start="61:90" pos:end="61:91">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="87:5"><if pos:start="65:5" pos:end="83:5">if <condition pos:start="65:8" pos:end="65:27">(<expr pos:start="65:9" pos:end="65:26"><operator pos:start="65:9" pos:end="65:9">(</operator><name pos:start="65:10" pos:end="65:10">c</name> <operator pos:start="65:12" pos:end="65:12">&amp;</operator> <literal type="number" pos:start="65:14" pos:end="65:17">0x8f</literal><operator pos:start="65:18" pos:end="65:18">)</operator> <operator pos:start="65:20" pos:end="65:21">==</operator> <literal type="number" pos:start="65:23" pos:end="65:26">0x82</literal></expr>)</condition> <block pos:start="65:29" pos:end="83:5">{<block_content pos:start="67:9" pos:end="81:17">

        <if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="75:9">if <condition pos:start="67:12" pos:end="67:19">(<expr pos:start="67:13" pos:end="67:18"><name pos:start="67:13" pos:end="67:13">d</name> <operator pos:start="67:15" pos:end="67:16">||</operator> <name pos:start="67:18" pos:end="67:18">e</name></expr>)</condition> <block pos:start="67:21" pos:end="75:9">{<block_content pos:start="69:13" pos:end="73:22">

            <if_stmt pos:start="69:13" pos:end="71:65"><if pos:start="69:13" pos:end="71:65">if <condition pos:start="69:16" pos:end="69:30">(<expr pos:start="69:17" pos:end="69:29"><operator pos:start="69:17" pos:end="69:17">!</operator><call pos:start="69:18" pos:end="69:29"><name pos:start="69:18" pos:end="69:25">url_feof</name><argument_list pos:start="69:26" pos:end="69:29">(<argument pos:start="69:27" pos:end="69:28"><expr pos:start="69:27" pos:end="69:28"><name pos:start="69:27" pos:end="69:28">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="71:17" pos:end="71:65"><block_content pos:start="71:17" pos:end="71:65">

                <expr_stmt pos:start="71:17" pos:end="71:65"><expr pos:start="71:17" pos:end="71:64"><call pos:start="71:17" pos:end="71:64"><name pos:start="71:17" pos:end="71:22">av_log</name><argument_list pos:start="71:23" pos:end="71:64">(<argument pos:start="71:24" pos:end="71:24"><expr pos:start="71:24" pos:end="71:24"><name pos:start="71:24" pos:end="71:24">s</name></expr></argument>, <argument pos:start="71:27" pos:end="71:38"><expr pos:start="71:27" pos:end="71:38"><name pos:start="71:27" pos:end="71:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:41" pos:end="71:63"><expr pos:start="71:41" pos:end="71:63"><literal type="string" pos:start="71:41" pos:end="71:63">"ff asf bad non zero\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <return pos:start="73:13" pos:end="73:22">return <expr pos:start="73:20" pos:end="73:21"><operator pos:start="73:20" pos:end="73:20">-</operator><literal type="number" pos:start="73:21" pos:end="73:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:23"><expr pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:9">c</name><operator pos:start="77:10" pos:end="77:10">=</operator> <call pos:start="77:12" pos:end="77:22"><name pos:start="77:12" pos:end="77:18">avio_r8</name><argument_list pos:start="77:19" pos:end="77:22">(<argument pos:start="77:20" pos:end="77:21"><expr pos:start="77:20" pos:end="77:21"><name pos:start="77:20" pos:end="77:21">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:9">d</name><operator pos:start="79:10" pos:end="79:10">=</operator> <call pos:start="79:12" pos:end="79:22"><name pos:start="79:12" pos:end="79:18">avio_r8</name><argument_list pos:start="79:19" pos:end="79:22">(<argument pos:start="79:20" pos:end="79:21"><expr pos:start="79:20" pos:end="79:21"><name pos:start="79:20" pos:end="79:21">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:17"><expr pos:start="81:9" pos:end="81:16"><name pos:start="81:9" pos:end="81:13">rsize</name><operator pos:start="81:14" pos:end="81:15">+=</operator><literal type="number" pos:start="81:16" pos:end="81:16">3</literal></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="83:6" pos:end="87:5">else<block pos:start="83:10" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:36">

        <expr_stmt pos:start="85:9" pos:end="85:36"><expr pos:start="85:9" pos:end="85:35"><call pos:start="85:9" pos:end="85:35"><name pos:start="85:9" pos:end="85:17">avio_seek</name><argument_list pos:start="85:18" pos:end="85:35">(<argument pos:start="85:19" pos:end="85:20"><expr pos:start="85:19" pos:end="85:20"><name pos:start="85:19" pos:end="85:20">pb</name></expr></argument>, <argument pos:start="85:23" pos:end="85:24"><expr pos:start="85:23" pos:end="85:24"><operator pos:start="85:23" pos:end="85:23">-</operator><literal type="number" pos:start="85:24" pos:end="85:24">1</literal></expr></argument>, <argument pos:start="85:27" pos:end="85:34"><expr pos:start="85:27" pos:end="85:34"><name pos:start="85:27" pos:end="85:34">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="85:38" pos:end="85:44">//FIXME</comment>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:29"><expr pos:start="91:5" pos:end="91:28"><name pos:start="91:5" pos:end="91:21"><name pos:start="91:5" pos:end="91:7">asf</name><operator pos:start="91:8" pos:end="91:9">-&gt;</operator><name pos:start="91:10" pos:end="91:21">packet_flags</name></name>    <operator pos:start="91:26" pos:end="91:26">=</operator> <name pos:start="91:28" pos:end="91:28">c</name></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:29"><expr pos:start="93:5" pos:end="93:28"><name pos:start="93:5" pos:end="93:24"><name pos:start="93:5" pos:end="93:7">asf</name><operator pos:start="93:8" pos:end="93:9">-&gt;</operator><name pos:start="93:10" pos:end="93:24">packet_property</name></name> <operator pos:start="93:26" pos:end="93:26">=</operator> <name pos:start="93:28" pos:end="93:28">d</name></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:68"><expr pos:start="97:5" pos:end="97:67"><call pos:start="97:5" pos:end="97:67"><name pos:start="97:5" pos:end="97:12">DO_2BITS</name><argument_list pos:start="97:13" pos:end="97:67">(<argument pos:start="97:14" pos:end="97:35"><expr pos:start="97:14" pos:end="97:35"><name pos:start="97:14" pos:end="97:30"><name pos:start="97:14" pos:end="97:16">asf</name><operator pos:start="97:17" pos:end="97:18">-&gt;</operator><name pos:start="97:19" pos:end="97:30">packet_flags</name></name> <operator pos:start="97:32" pos:end="97:33">&gt;&gt;</operator> <literal type="number" pos:start="97:35" pos:end="97:35">5</literal></expr></argument>, <argument pos:start="97:38" pos:end="97:50"><expr pos:start="97:38" pos:end="97:50"><name pos:start="97:38" pos:end="97:50">packet_length</name></expr></argument>, <argument pos:start="97:53" pos:end="97:66"><expr pos:start="97:53" pos:end="97:66"><name pos:start="97:53" pos:end="97:66"><name pos:start="97:53" pos:end="97:53">s</name><operator pos:start="97:54" pos:end="97:55">-&gt;</operator><name pos:start="97:56" pos:end="97:66">packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:49"><expr pos:start="99:5" pos:end="99:48"><call pos:start="99:5" pos:end="99:48"><name pos:start="99:5" pos:end="99:12">DO_2BITS</name><argument_list pos:start="99:13" pos:end="99:48">(<argument pos:start="99:14" pos:end="99:35"><expr pos:start="99:14" pos:end="99:35"><name pos:start="99:14" pos:end="99:30"><name pos:start="99:14" pos:end="99:16">asf</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:30">packet_flags</name></name> <operator pos:start="99:32" pos:end="99:33">&gt;&gt;</operator> <literal type="number" pos:start="99:35" pos:end="99:35">1</literal></expr></argument>, <argument pos:start="99:38" pos:end="99:44"><expr pos:start="99:38" pos:end="99:44"><name pos:start="99:38" pos:end="99:44">padsize</name></expr></argument>, <argument pos:start="99:47" pos:end="99:47"><expr pos:start="99:47" pos:end="99:47"><literal type="number" pos:start="99:47" pos:end="99:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="99:51" pos:end="99:69">// sequence ignored</comment>

    <expr_stmt pos:start="101:5" pos:end="101:49"><expr pos:start="101:5" pos:end="101:48"><call pos:start="101:5" pos:end="101:48"><name pos:start="101:5" pos:end="101:12">DO_2BITS</name><argument_list pos:start="101:13" pos:end="101:48">(<argument pos:start="101:14" pos:end="101:35"><expr pos:start="101:14" pos:end="101:35"><name pos:start="101:14" pos:end="101:30"><name pos:start="101:14" pos:end="101:16">asf</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:30">packet_flags</name></name> <operator pos:start="101:32" pos:end="101:33">&gt;&gt;</operator> <literal type="number" pos:start="101:35" pos:end="101:35">3</literal></expr></argument>, <argument pos:start="101:38" pos:end="101:44"><expr pos:start="101:38" pos:end="101:44"><name pos:start="101:38" pos:end="101:44">padsize</name></expr></argument>, <argument pos:start="101:47" pos:end="101:47"><expr pos:start="101:47" pos:end="101:47"><literal type="number" pos:start="101:47" pos:end="101:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="101:51" pos:end="101:67">// padding length</comment>



    <comment type="line" pos:start="105:5" pos:end="105:63">//the following checks prevent overflows and infinite loops</comment>

    <if_stmt pos:start="107:5" pos:end="113:5"><if pos:start="107:5" pos:end="113:5">if<condition pos:start="107:7" pos:end="107:51">(<expr pos:start="107:8" pos:end="107:50"><operator pos:start="107:8" pos:end="107:8">!</operator><name pos:start="107:9" pos:end="107:21">packet_length</name> <operator pos:start="107:23" pos:end="107:24">||</operator> <name pos:start="107:26" pos:end="107:38">packet_length</name> <operator pos:start="107:40" pos:end="107:41">&gt;=</operator> <operator pos:start="107:43" pos:end="107:43">(</operator><literal type="number" pos:start="107:44" pos:end="107:45">1U</literal><operator pos:start="107:46" pos:end="107:47">&lt;&lt;</operator><literal type="number" pos:start="107:48" pos:end="107:49">29</literal><operator pos:start="107:50" pos:end="107:50">)</operator></expr>)</condition><block pos:start="107:52" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:18">

        <expr_stmt pos:start="109:9" pos:end="109:105"><expr pos:start="109:9" pos:end="109:104"><call pos:start="109:9" pos:end="109:104"><name pos:start="109:9" pos:end="109:14">av_log</name><argument_list pos:start="109:15" pos:end="109:104">(<argument pos:start="109:16" pos:end="109:16"><expr pos:start="109:16" pos:end="109:16"><name pos:start="109:16" pos:end="109:16">s</name></expr></argument>, <argument pos:start="109:19" pos:end="109:30"><expr pos:start="109:19" pos:end="109:30"><name pos:start="109:19" pos:end="109:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:33" pos:end="109:73"><expr pos:start="109:33" pos:end="109:73"><literal type="string" pos:start="109:33" pos:end="109:63">"invalid packet_length %d at:%"</literal><name pos:start="109:64" pos:end="109:69">PRId64</name><literal type="string" pos:start="109:70" pos:end="109:73">"\n"</literal></expr></argument>, <argument pos:start="109:76" pos:end="109:88"><expr pos:start="109:76" pos:end="109:88"><name pos:start="109:76" pos:end="109:88">packet_length</name></expr></argument>, <argument pos:start="109:91" pos:end="109:103"><expr pos:start="109:91" pos:end="109:103"><call pos:start="109:91" pos:end="109:103"><name pos:start="109:91" pos:end="109:99">avio_tell</name><argument_list pos:start="109:100" pos:end="109:103">(<argument pos:start="109:101" pos:end="109:102"><expr pos:start="109:101" pos:end="109:102"><name pos:start="109:101" pos:end="109:102">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="111:9" pos:end="111:18">return <expr pos:start="111:16" pos:end="111:17"><operator pos:start="111:16" pos:end="111:16">-</operator><literal type="number" pos:start="111:17" pos:end="111:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if<condition pos:start="115:7" pos:end="115:32">(<expr pos:start="115:8" pos:end="115:31"><name pos:start="115:8" pos:end="115:14">padsize</name> <operator pos:start="115:16" pos:end="115:17">&gt;=</operator> <name pos:start="115:19" pos:end="115:31">packet_length</name></expr>)</condition><block pos:start="115:33" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:18">

        <expr_stmt pos:start="117:9" pos:end="117:93"><expr pos:start="117:9" pos:end="117:92"><call pos:start="117:9" pos:end="117:92"><name pos:start="117:9" pos:end="117:14">av_log</name><argument_list pos:start="117:15" pos:end="117:92">(<argument pos:start="117:16" pos:end="117:16"><expr pos:start="117:16" pos:end="117:16"><name pos:start="117:16" pos:end="117:16">s</name></expr></argument>, <argument pos:start="117:19" pos:end="117:30"><expr pos:start="117:19" pos:end="117:30"><name pos:start="117:19" pos:end="117:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:33" pos:end="117:67"><expr pos:start="117:33" pos:end="117:67"><literal type="string" pos:start="117:33" pos:end="117:57">"invalid padsize %d at:%"</literal><name pos:start="117:58" pos:end="117:63">PRId64</name><literal type="string" pos:start="117:64" pos:end="117:67">"\n"</literal></expr></argument>, <argument pos:start="117:70" pos:end="117:76"><expr pos:start="117:70" pos:end="117:76"><name pos:start="117:70" pos:end="117:76">padsize</name></expr></argument>, <argument pos:start="117:79" pos:end="117:91"><expr pos:start="117:79" pos:end="117:91"><call pos:start="117:79" pos:end="117:91"><name pos:start="117:79" pos:end="117:87">avio_tell</name><argument_list pos:start="117:88" pos:end="117:91">(<argument pos:start="117:89" pos:end="117:90"><expr pos:start="117:89" pos:end="117:90"><name pos:start="117:89" pos:end="117:90">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="119:9" pos:end="119:18">return <expr pos:start="119:16" pos:end="119:17"><operator pos:start="119:16" pos:end="119:16">-</operator><literal type="number" pos:start="119:17" pos:end="119:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:42"><expr pos:start="125:5" pos:end="125:41"><name pos:start="125:5" pos:end="125:25"><name pos:start="125:5" pos:end="125:7">asf</name><operator pos:start="125:8" pos:end="125:9">-&gt;</operator><name pos:start="125:10" pos:end="125:25">packet_timestamp</name></name> <operator pos:start="125:27" pos:end="125:27">=</operator> <call pos:start="125:29" pos:end="125:41"><name pos:start="125:29" pos:end="125:37">avio_rl32</name><argument_list pos:start="125:38" pos:end="125:41">(<argument pos:start="125:39" pos:end="125:40"><expr pos:start="125:39" pos:end="125:40"><name pos:start="125:39" pos:end="125:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:18"><expr pos:start="127:5" pos:end="127:17"><call pos:start="127:5" pos:end="127:17"><name pos:start="127:5" pos:end="127:13">avio_rl16</name><argument_list pos:start="127:14" pos:end="127:17">(<argument pos:start="127:15" pos:end="127:16"><expr pos:start="127:15" pos:end="127:16"><name pos:start="127:15" pos:end="127:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="127:20" pos:end="127:33">/* duration */</comment>

    <comment type="line" pos:start="129:5" pos:end="129:59">// rsize has at least 11 bytes which have to be present</comment>



    <if_stmt pos:start="133:5" pos:end="145:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:33">(<expr pos:start="133:9" pos:end="133:32"><name pos:start="133:9" pos:end="133:25"><name pos:start="133:9" pos:end="133:11">asf</name><operator pos:start="133:12" pos:end="133:13">-&gt;</operator><name pos:start="133:14" pos:end="133:25">packet_flags</name></name> <operator pos:start="133:27" pos:end="133:27">&amp;</operator> <literal type="number" pos:start="133:29" pos:end="133:32">0x01</literal></expr>)</condition> <block pos:start="133:35" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:62">

        <expr_stmt pos:start="135:9" pos:end="135:46"><expr pos:start="135:9" pos:end="135:45"><name pos:start="135:9" pos:end="135:31"><name pos:start="135:9" pos:end="135:11">asf</name><operator pos:start="135:12" pos:end="135:13">-&gt;</operator><name pos:start="135:14" pos:end="135:31">packet_segsizetype</name></name> <operator pos:start="135:33" pos:end="135:33">=</operator> <call pos:start="135:35" pos:end="135:45"><name pos:start="135:35" pos:end="135:41">avio_r8</name><argument_list pos:start="135:42" pos:end="135:45">(<argument pos:start="135:43" pos:end="135:44"><expr pos:start="135:43" pos:end="135:44"><name pos:start="135:43" pos:end="135:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="135:48" pos:end="135:55"><expr pos:start="135:48" pos:end="135:54"><name pos:start="135:48" pos:end="135:52">rsize</name><operator pos:start="135:53" pos:end="135:54">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:62"><expr pos:start="137:9" pos:end="137:61"><name pos:start="137:9" pos:end="137:28"><name pos:start="137:9" pos:end="137:11">asf</name><operator pos:start="137:12" pos:end="137:13">-&gt;</operator><name pos:start="137:14" pos:end="137:28">packet_segments</name></name> <operator pos:start="137:30" pos:end="137:30">=</operator> <name pos:start="137:32" pos:end="137:54"><name pos:start="137:32" pos:end="137:34">asf</name><operator pos:start="137:35" pos:end="137:36">-&gt;</operator><name pos:start="137:37" pos:end="137:54">packet_segsizetype</name></name> <operator pos:start="137:56" pos:end="137:56">&amp;</operator> <literal type="number" pos:start="137:58" pos:end="137:61">0x3f</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="139:7" pos:end="145:5">else <block pos:start="139:12" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:39">

        <expr_stmt pos:start="141:9" pos:end="141:33"><expr pos:start="141:9" pos:end="141:32"><name pos:start="141:9" pos:end="141:28"><name pos:start="141:9" pos:end="141:11">asf</name><operator pos:start="141:12" pos:end="141:13">-&gt;</operator><name pos:start="141:14" pos:end="141:28">packet_segments</name></name> <operator pos:start="141:30" pos:end="141:30">=</operator> <literal type="number" pos:start="141:32" pos:end="141:32">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:39"><expr pos:start="143:9" pos:end="143:38"><name pos:start="143:9" pos:end="143:31"><name pos:start="143:9" pos:end="143:11">asf</name><operator pos:start="143:12" pos:end="143:13">-&gt;</operator><name pos:start="143:14" pos:end="143:31">packet_segsizetype</name></name> <operator pos:start="143:33" pos:end="143:33">=</operator> <literal type="number" pos:start="143:35" pos:end="143:38">0x80</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:60"><expr pos:start="147:5" pos:end="147:59"><name pos:start="147:5" pos:end="147:25"><name pos:start="147:5" pos:end="147:7">asf</name><operator pos:start="147:8" pos:end="147:9">-&gt;</operator><name pos:start="147:10" pos:end="147:25">packet_size_left</name></name> <operator pos:start="147:27" pos:end="147:27">=</operator> <name pos:start="147:29" pos:end="147:41">packet_length</name> <operator pos:start="147:43" pos:end="147:43">-</operator> <name pos:start="147:45" pos:end="147:51">padsize</name> <operator pos:start="147:53" pos:end="147:53">-</operator> <name pos:start="147:55" pos:end="147:59">rsize</name></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="151:56"><if pos:start="149:5" pos:end="151:56">if <condition pos:start="149:8" pos:end="149:45">(<expr pos:start="149:9" pos:end="149:44"><name pos:start="149:9" pos:end="149:21">packet_length</name> <operator pos:start="149:23" pos:end="149:23">&lt;</operator> <name pos:start="149:25" pos:end="149:44"><name pos:start="149:25" pos:end="149:27">asf</name><operator pos:start="149:28" pos:end="149:29">-&gt;</operator><name pos:start="149:30" pos:end="149:32">hdr</name><operator pos:start="149:33" pos:end="149:33">.</operator><name pos:start="149:34" pos:end="149:44">min_pktsize</name></name></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="151:56"><block_content pos:start="151:9" pos:end="151:56">

        <expr_stmt pos:start="151:9" pos:end="151:56"><expr pos:start="151:9" pos:end="151:55"><name pos:start="151:9" pos:end="151:15">padsize</name> <operator pos:start="151:17" pos:end="151:18">+=</operator> <name pos:start="151:20" pos:end="151:39"><name pos:start="151:20" pos:end="151:22">asf</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:27">hdr</name><operator pos:start="151:28" pos:end="151:28">.</operator><name pos:start="151:29" pos:end="151:39">min_pktsize</name></name> <operator pos:start="151:41" pos:end="151:41">-</operator> <name pos:start="151:43" pos:end="151:55">packet_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:34"><expr pos:start="153:5" pos:end="153:33"><name pos:start="153:5" pos:end="153:23"><name pos:start="153:5" pos:end="153:7">asf</name><operator pos:start="153:8" pos:end="153:9">-&gt;</operator><name pos:start="153:10" pos:end="153:23">packet_padsize</name></name> <operator pos:start="153:25" pos:end="153:25">=</operator> <name pos:start="153:27" pos:end="153:33">padsize</name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:116"><expr pos:start="155:5" pos:end="155:115"><call pos:start="155:5" pos:end="155:115"><name pos:start="155:5" pos:end="155:11">av_dlog</name><argument_list pos:start="155:12" pos:end="155:115">(<argument pos:start="155:13" pos:end="155:13"><expr pos:start="155:13" pos:end="155:13"><name pos:start="155:13" pos:end="155:13">s</name></expr></argument>, <argument pos:start="155:16" pos:end="155:54"><expr pos:start="155:16" pos:end="155:54"><literal type="string" pos:start="155:16" pos:end="155:54">"packet: size=%d padsize=%d  left=%d\n"</literal></expr></argument>, <argument pos:start="155:57" pos:end="155:70"><expr pos:start="155:57" pos:end="155:70"><name pos:start="155:57" pos:end="155:70"><name pos:start="155:57" pos:end="155:57">s</name><operator pos:start="155:58" pos:end="155:59">-&gt;</operator><name pos:start="155:60" pos:end="155:70">packet_size</name></name></expr></argument>, <argument pos:start="155:73" pos:end="155:91"><expr pos:start="155:73" pos:end="155:91"><name pos:start="155:73" pos:end="155:91"><name pos:start="155:73" pos:end="155:75">asf</name><operator pos:start="155:76" pos:end="155:77">-&gt;</operator><name pos:start="155:78" pos:end="155:91">packet_padsize</name></name></expr></argument>, <argument pos:start="155:94" pos:end="155:114"><expr pos:start="155:94" pos:end="155:114"><name pos:start="155:94" pos:end="155:114"><name pos:start="155:94" pos:end="155:96">asf</name><operator pos:start="155:97" pos:end="155:98">-&gt;</operator><name pos:start="155:99" pos:end="155:114">packet_size_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="157:5" pos:end="157:13">return <expr pos:start="157:12" pos:end="157:12"><literal type="number" pos:start="157:12" pos:end="157:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
