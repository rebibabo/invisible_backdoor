<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17618.c" pos:tabs="8"><function pos:start="1:1" pos:end="243:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="1:60">(<parameter pos:start="1:25" pos:end="1:38"><decl pos:start="1:25" pos:end="1:38"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:35">FLACContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:59"><decl pos:start="1:41" pos:end="1:59"><type pos:start="1:41" pos:end="1:59"><name pos:start="1:41" pos:end="1:43">int</name></type> <name pos:start="1:45" pos:end="1:59">alloc_data_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="243:1">{<block_content pos:start="5:5" pos:end="241:13">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:15">bs_code</name></decl>, <decl pos:start="5:18" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:24">sr_code</name></decl>, <decl pos:start="5:27" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:27" pos:end="5:34">bps_code</name></decl>, <decl pos:start="5:37" pos:end="5:37"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:37" pos:end="5:37">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">ch_mode</name></decl>, <decl pos:start="7:18" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:20">bps</name></decl>, <decl pos:start="7:23" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:31">blocksize</name></decl>, <decl pos:start="7:34" pos:end="7:43"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:34" pos:end="7:43">samplerate</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">GetBitContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:21">gb</name> <init pos:start="9:23" pos:end="9:30">= <expr pos:start="9:25" pos:end="9:30"><operator pos:start="9:25" pos:end="9:25">&amp;</operator><name pos:start="9:26" pos:end="9:30"><name pos:start="9:26" pos:end="9:26">s</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:30">gb</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:25">/* frame sync code */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:13">skip_bits</name><argument_list pos:start="15:14" pos:end="15:25">(<argument pos:start="15:15" pos:end="15:20"><expr pos:start="15:15" pos:end="15:20"><operator pos:start="15:15" pos:end="15:15">&amp;</operator><name pos:start="15:16" pos:end="15:20"><name pos:start="15:16" pos:end="15:16">s</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:20">gb</name></name></expr></argument>, <argument pos:start="15:23" pos:end="15:24"><expr pos:start="15:23" pos:end="15:24"><literal type="number" pos:start="15:23" pos:end="15:24">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:42">/* block size and sample rate codes */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:30"><expr pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:11">bs_code</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:29"><name pos:start="21:15" pos:end="21:22">get_bits</name><argument_list pos:start="21:23" pos:end="21:29">(<argument pos:start="21:24" pos:end="21:25"><expr pos:start="21:24" pos:end="21:25"><name pos:start="21:24" pos:end="21:25">gb</name></expr></argument>, <argument pos:start="21:28" pos:end="21:28"><expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:30"><expr pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:11">sr_code</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:29"><name pos:start="23:15" pos:end="23:22">get_bits</name><argument_list pos:start="23:23" pos:end="23:29">(<argument pos:start="23:24" pos:end="23:25"><expr pos:start="23:24" pos:end="23:25"><name pos:start="23:24" pos:end="23:25">gb</name></expr></argument>, <argument pos:start="23:28" pos:end="23:28"><expr pos:start="23:28" pos:end="23:28"><literal type="number" pos:start="23:28" pos:end="23:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:36">/* channels and decorrelation */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:11">ch_mode</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:29"><name pos:start="29:15" pos:end="29:22">get_bits</name><argument_list pos:start="29:23" pos:end="29:29">(<argument pos:start="29:24" pos:end="29:25"><expr pos:start="29:24" pos:end="29:25"><name pos:start="29:24" pos:end="29:25">gb</name></expr></argument>, <argument pos:start="29:28" pos:end="29:28"><expr pos:start="29:28" pos:end="29:28"><literal type="number" pos:start="29:28" pos:end="29:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="43:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:64">(<expr pos:start="31:9" pos:end="31:63"><name pos:start="31:9" pos:end="31:15">ch_mode</name> <operator pos:start="31:17" pos:end="31:17">&lt;</operator> <name pos:start="31:19" pos:end="31:35">FLAC_MAX_CHANNELS</name> <operator pos:start="31:37" pos:end="31:38">&amp;&amp;</operator> <name pos:start="31:40" pos:end="31:50"><name pos:start="31:40" pos:end="31:40">s</name><operator pos:start="31:41" pos:end="31:42">-&gt;</operator><name pos:start="31:43" pos:end="31:50">channels</name></name> <operator pos:start="31:52" pos:end="31:53">==</operator> <name pos:start="31:55" pos:end="31:61">ch_mode</name><operator pos:start="31:62" pos:end="31:62">+</operator><literal type="number" pos:start="31:63" pos:end="31:63">1</literal></expr>)</condition> <block pos:start="31:66" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:42">

        <expr_stmt pos:start="33:9" pos:end="33:42"><expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:15">ch_mode</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <name pos:start="33:19" pos:end="33:41">FLAC_CHMODE_INDEPENDENT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="35:7" pos:end="43:5">else if <condition pos:start="35:15" pos:end="35:66">(<expr pos:start="35:16" pos:end="35:65"><name pos:start="35:16" pos:end="35:22">ch_mode</name> <operator pos:start="35:24" pos:end="35:24">&gt;</operator> <name pos:start="35:26" pos:end="35:45">FLAC_CHMODE_MID_SIDE</name> <operator pos:start="35:47" pos:end="35:48">||</operator> <name pos:start="35:50" pos:end="35:60"><name pos:start="35:50" pos:end="35:50">s</name><operator pos:start="35:51" pos:end="35:52">-&gt;</operator><name pos:start="35:53" pos:end="35:60">channels</name></name> <operator pos:start="35:62" pos:end="35:63">!=</operator> <literal type="number" pos:start="35:65" pos:end="35:65">2</literal></expr>)</condition> <block pos:start="35:68" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:18">

        <expr_stmt pos:start="37:9" pos:end="39:37"><expr pos:start="37:9" pos:end="39:36"><call pos:start="37:9" pos:end="39:36"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="39:36">(<argument pos:start="37:16" pos:end="37:23"><expr pos:start="37:16" pos:end="37:23"><name pos:start="37:16" pos:end="37:23"><name pos:start="37:16" pos:end="37:16">s</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:23">avctx</name></name></expr></argument>, <argument pos:start="37:26" pos:end="37:37"><expr pos:start="37:26" pos:end="37:37"><name pos:start="37:26" pos:end="37:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:40" pos:end="37:90"><expr pos:start="37:40" pos:end="37:90"><literal type="string" pos:start="37:40" pos:end="37:90">"unsupported channel assignment %d (channels=%d)\n"</literal></expr></argument>,

               <argument pos:start="39:16" pos:end="39:22"><expr pos:start="39:16" pos:end="39:22"><name pos:start="39:16" pos:end="39:22">ch_mode</name></expr></argument>, <argument pos:start="39:25" pos:end="39:35"><expr pos:start="39:25" pos:end="39:35"><name pos:start="39:25" pos:end="39:35"><name pos:start="39:25" pos:end="39:25">s</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:35">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:25">/* bits per sample */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:31"><expr pos:start="49:5" pos:end="49:30"><name pos:start="49:5" pos:end="49:12">bps_code</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:30"><name pos:start="49:16" pos:end="49:23">get_bits</name><argument_list pos:start="49:24" pos:end="49:30">(<argument pos:start="49:25" pos:end="49:26"><expr pos:start="49:25" pos:end="49:26"><name pos:start="49:25" pos:end="49:26">gb</name></expr></argument>, <argument pos:start="49:29" pos:end="49:29"><expr pos:start="49:29" pos:end="49:29"><literal type="number" pos:start="49:29" pos:end="49:29">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="67:5"><if pos:start="51:5" pos:end="53:20">if <condition pos:start="51:8" pos:end="51:22">(<expr pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:16">bps_code</name> <operator pos:start="51:18" pos:end="51:19">==</operator> <literal type="number" pos:start="51:21" pos:end="51:21">0</literal></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:20"><block_content pos:start="53:9" pos:end="53:20">

        <expr_stmt pos:start="53:9" pos:end="53:20"><expr pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:11">bps</name><operator pos:start="53:12" pos:end="53:12">=</operator> <name pos:start="53:14" pos:end="53:19"><name pos:start="53:14" pos:end="53:14">s</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:19">bps</name></name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="55:5" pos:end="57:42">else if <condition pos:start="55:13" pos:end="55:48">(<expr pos:start="55:14" pos:end="55:47"><operator pos:start="55:14" pos:end="55:14">(</operator><name pos:start="55:15" pos:end="55:22">bps_code</name> <operator pos:start="55:24" pos:end="55:25">!=</operator> <literal type="number" pos:start="55:27" pos:end="55:27">3</literal><operator pos:start="55:28" pos:end="55:28">)</operator> <operator pos:start="55:30" pos:end="55:31">&amp;&amp;</operator> <operator pos:start="55:33" pos:end="55:33">(</operator><name pos:start="55:34" pos:end="55:41">bps_code</name> <operator pos:start="55:43" pos:end="55:44">!=</operator> <literal type="number" pos:start="55:46" pos:end="55:46">7</literal><operator pos:start="55:47" pos:end="55:47">)</operator></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:42"><block_content pos:start="57:9" pos:end="57:42">

        <expr_stmt pos:start="57:9" pos:end="57:42"><expr pos:start="57:9" pos:end="57:41"><name pos:start="57:9" pos:end="57:11">bps</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:41"><name pos:start="57:15" pos:end="57:31">sample_size_table</name><index pos:start="57:32" pos:end="57:41">[<expr pos:start="57:33" pos:end="57:40"><name pos:start="57:33" pos:end="57:40">bps_code</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="59:5" pos:end="67:5">else <block pos:start="59:10" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:18">

        <expr_stmt pos:start="61:9" pos:end="63:25"><expr pos:start="61:9" pos:end="63:24"><call pos:start="61:9" pos:end="63:24"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="63:24">(<argument pos:start="61:16" pos:end="61:23"><expr pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:16">s</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:23">avctx</name></name></expr></argument>, <argument pos:start="61:26" pos:end="61:37"><expr pos:start="61:26" pos:end="61:37"><name pos:start="61:26" pos:end="61:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:40" pos:end="61:72"><expr pos:start="61:40" pos:end="61:72"><literal type="string" pos:start="61:40" pos:end="61:72">"invalid sample size code (%d)\n"</literal></expr></argument>,

               <argument pos:start="63:16" pos:end="63:23"><expr pos:start="63:16" pos:end="63:23"><name pos:start="63:16" pos:end="63:23">bps_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="69:5" pos:end="85:5"><if pos:start="69:5" pos:end="77:5">if <condition pos:start="69:8" pos:end="69:17">(<expr pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:11">bps</name> <operator pos:start="69:13" pos:end="69:13">&gt;</operator> <literal type="number" pos:start="69:15" pos:end="69:16">16</literal></expr>)</condition> <block pos:start="69:19" pos:end="77:5">{<block_content pos:start="71:9" pos:end="75:20">

        <expr_stmt pos:start="71:9" pos:end="71:46"><expr pos:start="71:9" pos:end="71:45"><name pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:16">avctx</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:28">sample_fmt</name></name> <operator pos:start="71:30" pos:end="71:30">=</operator> <name pos:start="71:32" pos:end="71:45">SAMPLE_FMT_S32</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:35"><expr pos:start="73:9" pos:end="73:34"><name pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:23">sample_shift</name></name> <operator pos:start="73:25" pos:end="73:25">=</operator> <literal type="number" pos:start="73:27" pos:end="73:30">32</literal> <operator pos:start="73:30" pos:end="73:30">-</operator> <name pos:start="73:32" pos:end="73:34">bps</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:20"><expr pos:start="75:9" pos:end="75:19"><name pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:15">is32</name></name> <operator pos:start="75:17" pos:end="75:17">=</operator> <literal type="number" pos:start="75:19" pos:end="75:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="85:5">else <block pos:start="77:12" pos:end="85:5">{<block_content pos:start="79:9" pos:end="83:20">

        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:28"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:16">avctx</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:28">sample_fmt</name></name> <operator pos:start="79:30" pos:end="79:30">=</operator> <name pos:start="79:32" pos:end="79:45">SAMPLE_FMT_S16</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:35"><expr pos:start="81:9" pos:end="81:34"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:23">sample_shift</name></name> <operator pos:start="81:25" pos:end="81:25">=</operator> <literal type="number" pos:start="81:27" pos:end="81:30">16</literal> <operator pos:start="81:30" pos:end="81:30">-</operator> <name pos:start="81:32" pos:end="81:34">bps</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:20"><expr pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:15">is32</name></name> <operator pos:start="83:17" pos:end="83:17">=</operator> <literal type="number" pos:start="83:19" pos:end="83:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:49"><expr pos:start="87:5" pos:end="87:48"><name pos:start="87:5" pos:end="87:10"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:10">bps</name></name> <operator pos:start="87:12" pos:end="87:12">=</operator> <name pos:start="87:14" pos:end="87:42"><name pos:start="87:14" pos:end="87:14">s</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:21">avctx</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:42">bits_per_raw_sample</name></name> <operator pos:start="87:44" pos:end="87:44">=</operator> <name pos:start="87:46" pos:end="87:48">bps</name></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:22">/* reserved bit */</comment>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:22">(<expr pos:start="93:9" pos:end="93:21"><call pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:17">get_bits1</name><argument_list pos:start="93:18" pos:end="93:21">(<argument pos:start="93:19" pos:end="93:20"><expr pos:start="93:19" pos:end="93:20"><name pos:start="93:19" pos:end="93:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:24" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:18">

        <expr_stmt pos:start="95:9" pos:end="95:75"><expr pos:start="95:9" pos:end="95:74"><call pos:start="95:9" pos:end="95:74"><name pos:start="95:9" pos:end="95:14">av_log</name><argument_list pos:start="95:15" pos:end="95:74">(<argument pos:start="95:16" pos:end="95:23"><expr pos:start="95:16" pos:end="95:23"><name pos:start="95:16" pos:end="95:23"><name pos:start="95:16" pos:end="95:16">s</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:23">avctx</name></name></expr></argument>, <argument pos:start="95:26" pos:end="95:37"><expr pos:start="95:26" pos:end="95:37"><name pos:start="95:26" pos:end="95:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:40" pos:end="95:73"><expr pos:start="95:40" pos:end="95:73"><literal type="string" pos:start="95:40" pos:end="95:73">"broken stream, invalid padding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:18">return <expr pos:start="97:16" pos:end="97:17"><operator pos:start="97:16" pos:end="97:16">-</operator><literal type="number" pos:start="97:17" pos:end="97:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:31">/* sample or frame count */</comment>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:25">(<expr pos:start="105:9" pos:end="105:24"><call pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:16">get_utf8</name><argument_list pos:start="105:17" pos:end="105:20">(<argument pos:start="105:18" pos:end="105:19"><expr pos:start="105:18" pos:end="105:19"><name pos:start="105:18" pos:end="105:19">gb</name></expr></argument>)</argument_list></call> <operator pos:start="105:22" pos:end="105:22">&lt;</operator> <literal type="number" pos:start="105:24" pos:end="105:24">0</literal></expr>)</condition> <block pos:start="105:27" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:18">

        <expr_stmt pos:start="107:9" pos:end="107:56"><expr pos:start="107:9" pos:end="107:55"><call pos:start="107:9" pos:end="107:55"><name pos:start="107:9" pos:end="107:14">av_log</name><argument_list pos:start="107:15" pos:end="107:55">(<argument pos:start="107:16" pos:end="107:23"><expr pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:16">s</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:23">avctx</name></name></expr></argument>, <argument pos:start="107:26" pos:end="107:37"><expr pos:start="107:26" pos:end="107:37"><name pos:start="107:26" pos:end="107:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:40" pos:end="107:54"><expr pos:start="107:40" pos:end="107:54"><literal type="string" pos:start="107:40" pos:end="107:54">"utf8 fscked\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:18">return <expr pos:start="109:16" pos:end="109:17"><operator pos:start="109:16" pos:end="109:16">-</operator><literal type="number" pos:start="109:17" pos:end="109:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:19">/* blocksize */</comment>

    <if_stmt pos:start="117:5" pos:end="133:53"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:21">(<expr pos:start="117:9" pos:end="117:20"><name pos:start="117:9" pos:end="117:15">bs_code</name> <operator pos:start="117:17" pos:end="117:18">==</operator> <literal type="number" pos:start="117:20" pos:end="117:20">0</literal></expr>)</condition> <block pos:start="117:23" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:18">

        <expr_stmt pos:start="119:9" pos:end="119:71"><expr pos:start="119:9" pos:end="119:70"><call pos:start="119:9" pos:end="119:70"><name pos:start="119:9" pos:end="119:14">av_log</name><argument_list pos:start="119:15" pos:end="119:70">(<argument pos:start="119:16" pos:end="119:23"><expr pos:start="119:16" pos:end="119:23"><name pos:start="119:16" pos:end="119:23"><name pos:start="119:16" pos:end="119:16">s</name><operator pos:start="119:17" pos:end="119:18">-&gt;</operator><name pos:start="119:19" pos:end="119:23">avctx</name></name></expr></argument>, <argument pos:start="119:26" pos:end="119:37"><expr pos:start="119:26" pos:end="119:37"><name pos:start="119:26" pos:end="119:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="119:40" pos:end="119:69"><expr pos:start="119:40" pos:end="119:69"><literal type="string" pos:start="119:40" pos:end="119:69">"reserved blocksize code: 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="121:9" pos:end="121:18">return <expr pos:start="121:16" pos:end="121:17"><operator pos:start="121:16" pos:end="121:16">-</operator><literal type="number" pos:start="121:17" pos:end="121:17">1</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="123:7" pos:end="125:38">else if <condition pos:start="123:15" pos:end="123:28">(<expr pos:start="123:16" pos:end="123:27"><name pos:start="123:16" pos:end="123:22">bs_code</name> <operator pos:start="123:24" pos:end="123:25">==</operator> <literal type="number" pos:start="123:27" pos:end="123:27">6</literal></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:38"><block_content pos:start="125:9" pos:end="125:38">

        <expr_stmt pos:start="125:9" pos:end="125:38"><expr pos:start="125:9" pos:end="125:37"><name pos:start="125:9" pos:end="125:17">blocksize</name> <operator pos:start="125:19" pos:end="125:19">=</operator> <call pos:start="125:21" pos:end="125:35"><name pos:start="125:21" pos:end="125:28">get_bits</name><argument_list pos:start="125:29" pos:end="125:35">(<argument pos:start="125:30" pos:end="125:31"><expr pos:start="125:30" pos:end="125:31"><name pos:start="125:30" pos:end="125:31">gb</name></expr></argument>, <argument pos:start="125:34" pos:end="125:34"><expr pos:start="125:34" pos:end="125:34"><literal type="number" pos:start="125:34" pos:end="125:34">8</literal></expr></argument>)</argument_list></call><operator pos:start="125:36" pos:end="125:36">+</operator><literal type="number" pos:start="125:37" pos:end="125:37">1</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="127:5" pos:end="129:39">else if <condition pos:start="127:13" pos:end="127:26">(<expr pos:start="127:14" pos:end="127:25"><name pos:start="127:14" pos:end="127:20">bs_code</name> <operator pos:start="127:22" pos:end="127:23">==</operator> <literal type="number" pos:start="127:25" pos:end="127:25">7</literal></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:39"><block_content pos:start="129:9" pos:end="129:39">

        <expr_stmt pos:start="129:9" pos:end="129:39"><expr pos:start="129:9" pos:end="129:38"><name pos:start="129:9" pos:end="129:17">blocksize</name> <operator pos:start="129:19" pos:end="129:19">=</operator> <call pos:start="129:21" pos:end="129:36"><name pos:start="129:21" pos:end="129:28">get_bits</name><argument_list pos:start="129:29" pos:end="129:36">(<argument pos:start="129:30" pos:end="129:31"><expr pos:start="129:30" pos:end="129:31"><name pos:start="129:30" pos:end="129:31">gb</name></expr></argument>, <argument pos:start="129:34" pos:end="129:35"><expr pos:start="129:34" pos:end="129:35"><literal type="number" pos:start="129:34" pos:end="129:35">16</literal></expr></argument>)</argument_list></call><operator pos:start="129:37" pos:end="129:37">+</operator><literal type="number" pos:start="129:38" pos:end="129:38">1</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="131:5" pos:end="133:53">else<block type="pseudo" pos:start="133:9" pos:end="133:53"><block_content pos:start="133:9" pos:end="133:53">

        <expr_stmt pos:start="133:9" pos:end="133:53"><expr pos:start="133:9" pos:end="133:52"><name pos:start="133:9" pos:end="133:17">blocksize</name> <operator pos:start="133:19" pos:end="133:19">=</operator> <name pos:start="133:21" pos:end="133:52"><name pos:start="133:21" pos:end="133:43">ff_flac_blocksize_table</name><index pos:start="133:44" pos:end="133:52">[<expr pos:start="133:45" pos:end="133:51"><name pos:start="133:45" pos:end="133:51">bs_code</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="137:5" pos:end="145:5"><if pos:start="137:5" pos:end="145:5">if <condition pos:start="137:8" pos:end="137:37">(<expr pos:start="137:9" pos:end="137:36"><name pos:start="137:9" pos:end="137:17">blocksize</name> <operator pos:start="137:19" pos:end="137:19">&gt;</operator> <name pos:start="137:21" pos:end="137:36"><name pos:start="137:21" pos:end="137:21">s</name><operator pos:start="137:22" pos:end="137:23">-&gt;</operator><name pos:start="137:24" pos:end="137:36">max_blocksize</name></name></expr>)</condition> <block pos:start="137:39" pos:end="145:5">{<block_content pos:start="139:9" pos:end="143:18">

        <expr_stmt pos:start="139:9" pos:end="141:33"><expr pos:start="139:9" pos:end="141:32"><call pos:start="139:9" pos:end="141:32"><name pos:start="139:9" pos:end="139:14">av_log</name><argument_list pos:start="139:15" pos:end="141:32">(<argument pos:start="139:16" pos:end="139:23"><expr pos:start="139:16" pos:end="139:23"><name pos:start="139:16" pos:end="139:23"><name pos:start="139:16" pos:end="139:16">s</name><operator pos:start="139:17" pos:end="139:18">-&gt;</operator><name pos:start="139:19" pos:end="139:23">avctx</name></name></expr></argument>, <argument pos:start="139:26" pos:end="139:37"><expr pos:start="139:26" pos:end="139:37"><name pos:start="139:26" pos:end="139:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:40" pos:end="139:60"><expr pos:start="139:40" pos:end="139:60"><literal type="string" pos:start="139:40" pos:end="139:60">"blocksize %d &gt; %d\n"</literal></expr></argument>, <argument pos:start="139:63" pos:end="139:71"><expr pos:start="139:63" pos:end="139:71"><name pos:start="139:63" pos:end="139:71">blocksize</name></expr></argument>,

               <argument pos:start="141:16" pos:end="141:31"><expr pos:start="141:16" pos:end="141:31"><name pos:start="141:16" pos:end="141:31"><name pos:start="141:16" pos:end="141:16">s</name><operator pos:start="141:17" pos:end="141:18">-&gt;</operator><name pos:start="141:19" pos:end="141:31">max_blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:18">return <expr pos:start="143:16" pos:end="143:17"><operator pos:start="143:16" pos:end="143:16">-</operator><literal type="number" pos:start="143:17" pos:end="143:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="151:18"><if pos:start="149:5" pos:end="151:18">if <condition pos:start="149:8" pos:end="149:70">(<expr pos:start="149:9" pos:end="149:69"><name pos:start="149:9" pos:end="149:17">blocksize</name> <operator pos:start="149:19" pos:end="149:19">*</operator> <name pos:start="149:21" pos:end="149:31"><name pos:start="149:21" pos:end="149:21">s</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:31">channels</name></name> <operator pos:start="149:33" pos:end="149:33">*</operator> <operator pos:start="149:35" pos:end="149:35">(</operator><ternary pos:start="149:36" pos:end="149:50"><condition pos:start="149:36" pos:end="149:44"><expr pos:start="149:36" pos:end="149:42"><name pos:start="149:36" pos:end="149:42"><name pos:start="149:36" pos:end="149:36">s</name><operator pos:start="149:37" pos:end="149:38">-&gt;</operator><name pos:start="149:39" pos:end="149:42">is32</name></name></expr> ?</condition><then pos:start="149:46" pos:end="149:46"> <expr pos:start="149:46" pos:end="149:46"><literal type="number" pos:start="149:46" pos:end="149:46">4</literal></expr> </then><else pos:start="149:48" pos:end="149:50">: <expr pos:start="149:50" pos:end="149:50"><literal type="number" pos:start="149:50" pos:end="149:50">2</literal></expr></else></ternary><operator pos:start="149:51" pos:end="149:51">)</operator> <operator pos:start="149:53" pos:end="149:53">&gt;</operator> <name pos:start="149:55" pos:end="149:69">alloc_data_size</name></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="151:18"><block_content pos:start="151:9" pos:end="151:18">

        <return pos:start="151:9" pos:end="151:18">return <expr pos:start="151:16" pos:end="151:17"><operator pos:start="151:16" pos:end="151:16">-</operator><literal type="number" pos:start="151:17" pos:end="151:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:21">/* sample rate */</comment>

    <if_stmt pos:start="157:5" pos:end="185:5"><if pos:start="157:5" pos:end="159:34">if <condition pos:start="157:8" pos:end="157:21">(<expr pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:15">sr_code</name> <operator pos:start="157:17" pos:end="157:18">==</operator> <literal type="number" pos:start="157:20" pos:end="157:20">0</literal></expr>)</condition><block type="pseudo" pos:start="159:9" pos:end="159:34"><block_content pos:start="159:9" pos:end="159:34">

        <expr_stmt pos:start="159:9" pos:end="159:34"><expr pos:start="159:9" pos:end="159:33"><name pos:start="159:9" pos:end="159:18">samplerate</name><operator pos:start="159:19" pos:end="159:19">=</operator> <name pos:start="159:21" pos:end="159:33"><name pos:start="159:21" pos:end="159:21">s</name><operator pos:start="159:22" pos:end="159:23">-&gt;</operator><name pos:start="159:24" pos:end="159:33">samplerate</name></name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="161:5" pos:end="163:56">else if <condition pos:start="161:13" pos:end="161:26">(<expr pos:start="161:14" pos:end="161:25"><name pos:start="161:14" pos:end="161:20">sr_code</name> <operator pos:start="161:22" pos:end="161:22">&lt;</operator> <literal type="number" pos:start="161:24" pos:end="161:25">12</literal></expr>)</condition><block type="pseudo" pos:start="163:9" pos:end="163:56"><block_content pos:start="163:9" pos:end="163:56">

        <expr_stmt pos:start="163:9" pos:end="163:56"><expr pos:start="163:9" pos:end="163:55"><name pos:start="163:9" pos:end="163:18">samplerate</name> <operator pos:start="163:20" pos:end="163:20">=</operator> <name pos:start="163:22" pos:end="163:55"><name pos:start="163:22" pos:end="163:46">ff_flac_sample_rate_table</name><index pos:start="163:47" pos:end="163:55">[<expr pos:start="163:48" pos:end="163:54"><name pos:start="163:48" pos:end="163:54">sr_code</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="165:5" pos:end="167:44">else if <condition pos:start="165:13" pos:end="165:27">(<expr pos:start="165:14" pos:end="165:26"><name pos:start="165:14" pos:end="165:20">sr_code</name> <operator pos:start="165:22" pos:end="165:23">==</operator> <literal type="number" pos:start="165:25" pos:end="165:26">12</literal></expr>)</condition><block type="pseudo" pos:start="167:9" pos:end="167:44"><block_content pos:start="167:9" pos:end="167:44">

        <expr_stmt pos:start="167:9" pos:end="167:44"><expr pos:start="167:9" pos:end="167:43"><name pos:start="167:9" pos:end="167:18">samplerate</name> <operator pos:start="167:20" pos:end="167:20">=</operator> <call pos:start="167:22" pos:end="167:36"><name pos:start="167:22" pos:end="167:29">get_bits</name><argument_list pos:start="167:30" pos:end="167:36">(<argument pos:start="167:31" pos:end="167:32"><expr pos:start="167:31" pos:end="167:32"><name pos:start="167:31" pos:end="167:32">gb</name></expr></argument>, <argument pos:start="167:35" pos:end="167:35"><expr pos:start="167:35" pos:end="167:35"><literal type="number" pos:start="167:35" pos:end="167:35">8</literal></expr></argument>)</argument_list></call> <operator pos:start="167:38" pos:end="167:38">*</operator> <literal type="number" pos:start="167:40" pos:end="167:43">1000</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="169:5" pos:end="171:38">else if <condition pos:start="169:13" pos:end="169:27">(<expr pos:start="169:14" pos:end="169:26"><name pos:start="169:14" pos:end="169:20">sr_code</name> <operator pos:start="169:22" pos:end="169:23">==</operator> <literal type="number" pos:start="169:25" pos:end="169:26">13</literal></expr>)</condition><block type="pseudo" pos:start="171:9" pos:end="171:38"><block_content pos:start="171:9" pos:end="171:38">

        <expr_stmt pos:start="171:9" pos:end="171:38"><expr pos:start="171:9" pos:end="171:37"><name pos:start="171:9" pos:end="171:18">samplerate</name> <operator pos:start="171:20" pos:end="171:20">=</operator> <call pos:start="171:22" pos:end="171:37"><name pos:start="171:22" pos:end="171:29">get_bits</name><argument_list pos:start="171:30" pos:end="171:37">(<argument pos:start="171:31" pos:end="171:32"><expr pos:start="171:31" pos:end="171:32"><name pos:start="171:31" pos:end="171:32">gb</name></expr></argument>, <argument pos:start="171:35" pos:end="171:36"><expr pos:start="171:35" pos:end="171:36"><literal type="number" pos:start="171:35" pos:end="171:36">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="173:5" pos:end="175:43">else if <condition pos:start="173:13" pos:end="173:27">(<expr pos:start="173:14" pos:end="173:26"><name pos:start="173:14" pos:end="173:20">sr_code</name> <operator pos:start="173:22" pos:end="173:23">==</operator> <literal type="number" pos:start="173:25" pos:end="173:26">14</literal></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:43"><block_content pos:start="175:9" pos:end="175:43">

        <expr_stmt pos:start="175:9" pos:end="175:43"><expr pos:start="175:9" pos:end="175:42"><name pos:start="175:9" pos:end="175:18">samplerate</name> <operator pos:start="175:20" pos:end="175:20">=</operator> <call pos:start="175:22" pos:end="175:37"><name pos:start="175:22" pos:end="175:29">get_bits</name><argument_list pos:start="175:30" pos:end="175:37">(<argument pos:start="175:31" pos:end="175:32"><expr pos:start="175:31" pos:end="175:32"><name pos:start="175:31" pos:end="175:32">gb</name></expr></argument>, <argument pos:start="175:35" pos:end="175:36"><expr pos:start="175:35" pos:end="175:36"><literal type="number" pos:start="175:35" pos:end="175:36">16</literal></expr></argument>)</argument_list></call> <operator pos:start="175:39" pos:end="175:39">*</operator> <literal type="number" pos:start="175:41" pos:end="175:42">10</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="177:5" pos:end="185:5">else <block pos:start="177:10" pos:end="185:5">{<block_content pos:start="179:9" pos:end="183:18">

        <expr_stmt pos:start="179:9" pos:end="181:24"><expr pos:start="179:9" pos:end="181:23"><call pos:start="179:9" pos:end="181:23"><name pos:start="179:9" pos:end="179:14">av_log</name><argument_list pos:start="179:15" pos:end="181:23">(<argument pos:start="179:16" pos:end="179:23"><expr pos:start="179:16" pos:end="179:23"><name pos:start="179:16" pos:end="179:23"><name pos:start="179:16" pos:end="179:16">s</name><operator pos:start="179:17" pos:end="179:18">-&gt;</operator><name pos:start="179:19" pos:end="179:23">avctx</name></name></expr></argument>, <argument pos:start="179:26" pos:end="179:37"><expr pos:start="179:26" pos:end="179:37"><name pos:start="179:26" pos:end="179:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="179:40" pos:end="179:70"><expr pos:start="179:40" pos:end="179:70"><literal type="string" pos:start="179:40" pos:end="179:70">"illegal sample rate code %d\n"</literal></expr></argument>,

               <argument pos:start="181:16" pos:end="181:22"><expr pos:start="181:16" pos:end="181:22"><name pos:start="181:16" pos:end="181:22">sr_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="183:9" pos:end="183:18">return <expr pos:start="183:16" pos:end="183:17"><operator pos:start="183:16" pos:end="183:16">-</operator><literal type="number" pos:start="183:17" pos:end="183:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:28">/* header CRC-8 check */</comment>

    <expr_stmt pos:start="191:5" pos:end="191:21"><expr pos:start="191:5" pos:end="191:20"><call pos:start="191:5" pos:end="191:20"><name pos:start="191:5" pos:end="191:13">skip_bits</name><argument_list pos:start="191:14" pos:end="191:20">(<argument pos:start="191:15" pos:end="191:16"><expr pos:start="191:15" pos:end="191:16"><name pos:start="191:15" pos:end="191:16">gb</name></expr></argument>, <argument pos:start="191:19" pos:end="191:19"><expr pos:start="191:19" pos:end="191:19"><literal type="number" pos:start="191:19" pos:end="191:19">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="193:5" pos:end="201:5"><if pos:start="193:5" pos:end="201:5">if <condition pos:start="193:8" pos:end="195:37">(<expr pos:start="193:9" pos:end="195:36"><call pos:start="193:9" pos:end="195:36"><name pos:start="193:9" pos:end="193:14">av_crc</name><argument_list pos:start="193:15" pos:end="195:36">(<argument pos:start="193:16" pos:end="193:45"><expr pos:start="193:16" pos:end="193:45"><call pos:start="193:16" pos:end="193:45"><name pos:start="193:16" pos:end="193:31">av_crc_get_table</name><argument_list pos:start="193:32" pos:end="193:45">(<argument pos:start="193:33" pos:end="193:44"><expr pos:start="193:33" pos:end="193:44"><name pos:start="193:33" pos:end="193:44">AV_CRC_8_ATM</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:48" pos:end="193:48"><expr pos:start="193:48" pos:end="193:48"><literal type="number" pos:start="193:48" pos:end="193:48">0</literal></expr></argument>, <argument pos:start="193:51" pos:end="193:60"><expr pos:start="193:51" pos:end="193:60"><name pos:start="193:51" pos:end="193:60"><name pos:start="193:51" pos:end="193:52">gb</name><operator pos:start="193:53" pos:end="193:54">-&gt;</operator><name pos:start="193:55" pos:end="193:60">buffer</name></name></expr></argument>,

               <argument pos:start="195:16" pos:end="195:35"><expr pos:start="195:16" pos:end="195:35"><call pos:start="195:16" pos:end="195:33"><name pos:start="195:16" pos:end="195:29">get_bits_count</name><argument_list pos:start="195:30" pos:end="195:33">(<argument pos:start="195:31" pos:end="195:32"><expr pos:start="195:31" pos:end="195:32"><name pos:start="195:31" pos:end="195:32">gb</name></expr></argument>)</argument_list></call><operator pos:start="195:34" pos:end="195:34">/</operator><literal type="number" pos:start="195:35" pos:end="195:35">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="195:39" pos:end="201:5">{<block_content pos:start="197:9" pos:end="199:18">

        <expr_stmt pos:start="197:9" pos:end="197:64"><expr pos:start="197:9" pos:end="197:63"><call pos:start="197:9" pos:end="197:63"><name pos:start="197:9" pos:end="197:14">av_log</name><argument_list pos:start="197:15" pos:end="197:63">(<argument pos:start="197:16" pos:end="197:23"><expr pos:start="197:16" pos:end="197:23"><name pos:start="197:16" pos:end="197:23"><name pos:start="197:16" pos:end="197:16">s</name><operator pos:start="197:17" pos:end="197:18">-&gt;</operator><name pos:start="197:19" pos:end="197:23">avctx</name></name></expr></argument>, <argument pos:start="197:26" pos:end="197:37"><expr pos:start="197:26" pos:end="197:37"><name pos:start="197:26" pos:end="197:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:40" pos:end="197:62"><expr pos:start="197:40" pos:end="197:62"><literal type="string" pos:start="197:40" pos:end="197:62">"header crc mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="199:9" pos:end="199:18">return <expr pos:start="199:16" pos:end="199:17"><operator pos:start="199:16" pos:end="199:16">-</operator><literal type="number" pos:start="199:17" pos:end="199:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:32"><expr pos:start="205:5" pos:end="205:31"><name pos:start="205:5" pos:end="205:16"><name pos:start="205:5" pos:end="205:5">s</name><operator pos:start="205:6" pos:end="205:7">-&gt;</operator><name pos:start="205:8" pos:end="205:16">blocksize</name></name>    <operator pos:start="205:21" pos:end="205:21">=</operator> <name pos:start="205:23" pos:end="205:31">blocksize</name></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:33"><expr pos:start="207:5" pos:end="207:32"><name pos:start="207:5" pos:end="207:17"><name pos:start="207:5" pos:end="207:5">s</name><operator pos:start="207:6" pos:end="207:7">-&gt;</operator><name pos:start="207:8" pos:end="207:17">samplerate</name></name>   <operator pos:start="207:21" pos:end="207:21">=</operator> <name pos:start="207:23" pos:end="207:32">samplerate</name></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:26"><expr pos:start="209:5" pos:end="209:25"><name pos:start="209:5" pos:end="209:10"><name pos:start="209:5" pos:end="209:5">s</name><operator pos:start="209:6" pos:end="209:7">-&gt;</operator><name pos:start="209:8" pos:end="209:10">bps</name></name>          <operator pos:start="209:21" pos:end="209:21">=</operator> <name pos:start="209:23" pos:end="209:25">bps</name></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:30"><expr pos:start="211:5" pos:end="211:29"><name pos:start="211:5" pos:end="211:14"><name pos:start="211:5" pos:end="211:5">s</name><operator pos:start="211:6" pos:end="211:7">-&gt;</operator><name pos:start="211:8" pos:end="211:14">ch_mode</name></name>      <operator pos:start="211:21" pos:end="211:21">=</operator> <name pos:start="211:23" pos:end="211:29">ch_mode</name></expr>;</expr_stmt>



<comment type="line" pos:start="215:1" pos:end="215:50">//    dump_headers(s-&gt;avctx, (FLACStreaminfo *)s);</comment>



    <comment type="block" pos:start="219:5" pos:end="219:19">/* subframes */</comment>

    <for pos:start="221:5" pos:end="227:5">for <control pos:start="221:9" pos:end="221:37">(<init pos:start="221:10" pos:end="221:15"><expr pos:start="221:10" pos:end="221:14"><name pos:start="221:10" pos:end="221:10">i</name> <operator pos:start="221:12" pos:end="221:12">=</operator> <literal type="number" pos:start="221:14" pos:end="221:14">0</literal></expr>;</init> <condition pos:start="221:17" pos:end="221:32"><expr pos:start="221:17" pos:end="221:31"><name pos:start="221:17" pos:end="221:17">i</name> <operator pos:start="221:19" pos:end="221:19">&lt;</operator> <name pos:start="221:21" pos:end="221:31"><name pos:start="221:21" pos:end="221:21">s</name><operator pos:start="221:22" pos:end="221:23">-&gt;</operator><name pos:start="221:24" pos:end="221:31">channels</name></name></expr>;</condition> <incr pos:start="221:34" pos:end="221:36"><expr pos:start="221:34" pos:end="221:36"><name pos:start="221:34" pos:end="221:34">i</name><operator pos:start="221:35" pos:end="221:36">++</operator></expr></incr>)</control> <block pos:start="221:39" pos:end="227:5">{<block_content pos:start="223:9" pos:end="225:22">

        <if_stmt pos:start="223:9" pos:end="225:22"><if pos:start="223:9" pos:end="225:22">if <condition pos:start="223:12" pos:end="223:38">(<expr pos:start="223:13" pos:end="223:37"><call pos:start="223:13" pos:end="223:33"><name pos:start="223:13" pos:end="223:27">decode_subframe</name><argument_list pos:start="223:28" pos:end="223:33">(<argument pos:start="223:29" pos:end="223:29"><expr pos:start="223:29" pos:end="223:29"><name pos:start="223:29" pos:end="223:29">s</name></expr></argument>, <argument pos:start="223:32" pos:end="223:32"><expr pos:start="223:32" pos:end="223:32"><name pos:start="223:32" pos:end="223:32">i</name></expr></argument>)</argument_list></call> <operator pos:start="223:35" pos:end="223:35">&lt;</operator> <literal type="number" pos:start="223:37" pos:end="223:37">0</literal></expr>)</condition><block type="pseudo" pos:start="225:13" pos:end="225:22"><block_content pos:start="225:13" pos:end="225:22">

            <return pos:start="225:13" pos:end="225:22">return <expr pos:start="225:20" pos:end="225:21"><operator pos:start="225:20" pos:end="225:20">-</operator><literal type="number" pos:start="225:21" pos:end="225:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="231:5" pos:end="231:23"><expr pos:start="231:5" pos:end="231:22"><call pos:start="231:5" pos:end="231:22"><name pos:start="231:5" pos:end="231:18">align_get_bits</name><argument_list pos:start="231:19" pos:end="231:22">(<argument pos:start="231:20" pos:end="231:21"><expr pos:start="231:20" pos:end="231:21"><name pos:start="231:20" pos:end="231:21">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="235:5" pos:end="235:22">/* frame footer */</comment>

    <expr_stmt pos:start="237:5" pos:end="237:22"><expr pos:start="237:5" pos:end="237:21"><call pos:start="237:5" pos:end="237:21"><name pos:start="237:5" pos:end="237:13">skip_bits</name><argument_list pos:start="237:14" pos:end="237:21">(<argument pos:start="237:15" pos:end="237:16"><expr pos:start="237:15" pos:end="237:16"><name pos:start="237:15" pos:end="237:16">gb</name></expr></argument>, <argument pos:start="237:19" pos:end="237:20"><expr pos:start="237:19" pos:end="237:20"><literal type="number" pos:start="237:19" pos:end="237:20">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="237:24" pos:end="237:37">/* data crc */</comment>



    <return pos:start="241:5" pos:end="241:13">return <expr pos:start="241:12" pos:end="241:12"><literal type="number" pos:start="241:12" pos:end="241:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
