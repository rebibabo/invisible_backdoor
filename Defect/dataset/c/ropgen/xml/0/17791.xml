<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17791.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:38"><name pos:start="1:1" pos:end="1:23">real_parse_asm_rulebook</name><argument_list pos:start="1:24" pos:end="3:38">(<argument pos:start="1:25" pos:end="1:42">AVFormatContext *s</argument>, <argument pos:start="1:45" pos:end="1:61">AVStream *orig_st</argument>,

                        <argument pos:start="3:25" pos:end="3:37">const char *p</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:5">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">n_rules</name></decl>, <decl pos:start="9:18" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:20">odd</name> <init pos:start="9:22" pos:end="9:24">= <expr pos:start="9:24" pos:end="9:24"><literal type="number" pos:start="9:24" pos:end="9:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">AVStream</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">st</name></decl>;</decl_stmt>



    <comment type="block" format="doxygen" pos:start="15:5" pos:end="41:7">/**

     * The ASMRuleBook contains a list of comma-separated strings per rule,

     * and each rule is separated by a ;. The last one also has a ; at the

     * end so we can use it as delimiter.

     * Every rule occurs twice, once for when the RTSP packet header marker

     * is set and once for if it isn't. We only read the first because we

     * don't care much (that's what the "odd" variable is for).

     * Each rule contains a set of one or more statements, optionally

     * preceeded by a single condition. If there's a condition, the rule

     * starts with a '#'. Multiple conditions are merged between brackets,

     * so there are never multiple conditions spread out over separate

     * statements. Generally, these conditions are bitrate limits (min/max)

     * for multi-bitrate streams.

     */</comment>

    <if_stmt pos:start="43:5" pos:end="43:24"><if pos:start="43:5" pos:end="43:24">if <condition pos:start="43:8" pos:end="43:19">(<expr pos:start="43:9" pos:end="43:18"><operator pos:start="43:9" pos:end="43:9">*</operator><name pos:start="43:10" pos:end="43:10">p</name> <operator pos:start="43:12" pos:end="43:13">==</operator> <literal type="char" pos:start="43:15" pos:end="43:18">'\"'</literal></expr>)</condition><block type="pseudo" pos:start="43:21" pos:end="43:24"><block_content pos:start="43:21" pos:end="43:24"> <expr_stmt pos:start="43:21" pos:end="43:24"><expr pos:start="43:21" pos:end="43:23"><name pos:start="43:21" pos:end="43:21">p</name><operator pos:start="43:22" pos:end="43:23">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="45:5" pos:end="71:5">for <control pos:start="45:9" pos:end="45:51">(<init pos:start="45:10" pos:end="45:21"><expr pos:start="45:10" pos:end="45:20"><name pos:start="45:10" pos:end="45:16">n_rules</name> <operator pos:start="45:18" pos:end="45:18">=</operator> <literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>;</init> <condition pos:start="45:23" pos:end="45:50"><expr pos:start="45:23" pos:end="45:49"><name pos:start="45:23" pos:end="45:35"><name pos:start="45:23" pos:end="45:23">s</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:35">nb_streams</name></name> <operator pos:start="45:37" pos:end="45:37">&lt;</operator> <name pos:start="45:39" pos:end="45:49">MAX_STREAMS</name></expr>;</condition><incr/>)</control> <block pos:start="45:53" pos:end="71:5">{<block_content pos:start="47:9" pos:end="69:17">

        <if_stmt pos:start="47:9" pos:end="49:18"><if pos:start="47:9" pos:end="49:18">if <condition pos:start="47:12" pos:end="47:36">(<expr pos:start="47:13" pos:end="47:35"><operator pos:start="47:13" pos:end="47:13">!</operator><operator pos:start="47:14" pos:end="47:14">(</operator><name pos:start="47:15" pos:end="47:17">end</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:34"><name pos:start="47:21" pos:end="47:26">strchr</name><argument_list pos:start="47:27" pos:end="47:34">(<argument pos:start="47:28" pos:end="47:28"><expr pos:start="47:28" pos:end="47:28"><name pos:start="47:28" pos:end="47:28">p</name></expr></argument>, <argument pos:start="47:31" pos:end="47:33"><expr pos:start="47:31" pos:end="47:33"><literal type="char" pos:start="47:31" pos:end="47:33">';'</literal></expr></argument>)</argument_list></call><operator pos:start="47:35" pos:end="47:35">)</operator></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:18"><block_content pos:start="49:13" pos:end="49:18">

            <break pos:start="49:13" pos:end="49:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="65:9"><if pos:start="51:9" pos:end="65:9">if <condition pos:start="51:12" pos:end="51:29">(<expr pos:start="51:13" pos:end="51:28"><operator pos:start="51:13" pos:end="51:13">!</operator><name pos:start="51:14" pos:end="51:16">odd</name> <operator pos:start="51:18" pos:end="51:19">&amp;&amp;</operator> <name pos:start="51:21" pos:end="51:23">end</name> <operator pos:start="51:25" pos:end="51:26">!=</operator> <name pos:start="51:28" pos:end="51:28">p</name></expr>)</condition> <block pos:start="51:31" pos:end="65:9">{<block_content pos:start="53:13" pos:end="63:22">

            <if_stmt pos:start="53:13" pos:end="59:29"><if pos:start="53:13" pos:end="55:45">if <condition pos:start="53:16" pos:end="53:28">(<expr pos:start="53:17" pos:end="53:27"><name pos:start="53:17" pos:end="53:23">n_rules</name> <operator pos:start="53:25" pos:end="53:25">&gt;</operator> <literal type="number" pos:start="53:27" pos:end="53:27">0</literal></expr>)</condition><block type="pseudo" pos:start="55:17" pos:end="55:45"><block_content pos:start="55:17" pos:end="55:45">

                <expr_stmt pos:start="55:17" pos:end="55:45"><expr pos:start="55:17" pos:end="55:44"><name pos:start="55:17" pos:end="55:18">st</name> <operator pos:start="55:20" pos:end="55:20">=</operator> <call pos:start="55:22" pos:end="55:44"><name pos:start="55:22" pos:end="55:32">add_dstream</name><argument_list pos:start="55:33" pos:end="55:44">(<argument pos:start="55:34" pos:end="55:34"><expr pos:start="55:34" pos:end="55:34"><name pos:start="55:34" pos:end="55:34">s</name></expr></argument>, <argument pos:start="55:37" pos:end="55:43"><expr pos:start="55:37" pos:end="55:43"><name pos:start="55:37" pos:end="55:43">orig_st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="57:13" pos:end="59:29">else<block type="pseudo" pos:start="59:17" pos:end="59:29"><block_content pos:start="59:17" pos:end="59:29">

                <expr_stmt pos:start="59:17" pos:end="59:29"><expr pos:start="59:17" pos:end="59:28"><name pos:start="59:17" pos:end="59:18">st</name> <operator pos:start="59:20" pos:end="59:20">=</operator> <name pos:start="59:22" pos:end="59:28">orig_st</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:44"><expr pos:start="61:13" pos:end="61:43"><call pos:start="61:13" pos:end="61:43"><name pos:start="61:13" pos:end="61:31">real_parse_asm_rule</name><argument_list pos:start="61:32" pos:end="61:43">(<argument pos:start="61:33" pos:end="61:34"><expr pos:start="61:33" pos:end="61:34"><name pos:start="61:33" pos:end="61:34">st</name></expr></argument>, <argument pos:start="61:37" pos:end="61:37"><expr pos:start="61:37" pos:end="61:37"><name pos:start="61:37" pos:end="61:37">p</name></expr></argument>, <argument pos:start="61:40" pos:end="61:42"><expr pos:start="61:40" pos:end="61:42"><name pos:start="61:40" pos:end="61:42">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:22"><expr pos:start="63:13" pos:end="63:21"><name pos:start="63:13" pos:end="63:19">n_rules</name><operator pos:start="63:20" pos:end="63:21">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:20"><expr pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:9">p</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <name pos:start="67:13" pos:end="67:15">end</name> <operator pos:start="67:17" pos:end="67:17">+</operator> <literal type="number" pos:start="67:19" pos:end="67:19">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:17"><expr pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:11">odd</name> <operator pos:start="69:13" pos:end="69:14">^=</operator> <literal type="number" pos:start="69:16" pos:end="69:16">1</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block>
</unit>
