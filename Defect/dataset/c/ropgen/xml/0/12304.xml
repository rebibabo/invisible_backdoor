<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12304.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">do_setcontext</name><parameter_list pos:start="1:25" pos:end="1:80">(<parameter pos:start="1:26" pos:end="1:52"><decl pos:start="1:26" pos:end="1:52"><type pos:start="1:26" pos:end="1:52"><name pos:start="1:26" pos:end="1:47"><name pos:start="1:26" pos:end="1:31">struct</name> <name pos:start="1:33" pos:end="1:47">target_ucontext</name></name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">ucp</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:70"><decl pos:start="1:55" pos:end="1:70"><type pos:start="1:55" pos:end="1:70"><name pos:start="1:55" pos:end="1:65">CPUPPCState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">env</name></decl></parameter>, <parameter pos:start="1:73" pos:end="1:79"><decl pos:start="1:73" pos:end="1:79"><type pos:start="1:73" pos:end="1:79"><name pos:start="1:73" pos:end="1:75">int</name></type> <name pos:start="1:77" pos:end="1:79">sig</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="66:0">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:26">target_mcontext</name></name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:31">mcp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">target_ulong</name></type> <name pos:start="7:18" pos:end="7:25">mcp_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">sigset_t</name></type> <name pos:start="9:14" pos:end="9:20">blocked</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:19">target_sigset_t</name></type> <name pos:start="11:21" pos:end="11:23">set</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="24:0"><if pos:start="15:5" pos:end="24:0">if <condition pos:start="15:8" pos:end="17:37">(<expr pos:start="15:9" pos:end="17:36"><call pos:start="15:9" pos:end="17:36"><name pos:start="15:9" pos:end="15:22">copy_from_user</name><argument_list pos:start="15:23" pos:end="17:36">(<argument pos:start="15:24" pos:end="15:27"><expr pos:start="15:24" pos:end="15:27"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:27">set</name></expr></argument>, <argument pos:start="15:30" pos:end="15:85"><expr pos:start="15:30" pos:end="15:85"><call pos:start="15:30" pos:end="15:37"><name pos:start="15:30" pos:end="15:32">h2g</name><argument_list pos:start="15:33" pos:end="15:37">(<argument pos:start="15:34" pos:end="15:36"><expr pos:start="15:34" pos:end="15:36"><name pos:start="15:34" pos:end="15:36">ucp</name></expr></argument>)</argument_list></call> <operator pos:start="15:39" pos:end="15:39">+</operator> <call pos:start="15:41" pos:end="15:85"><name pos:start="15:41" pos:end="15:48">offsetof</name><argument_list pos:start="15:49" pos:end="15:85">(<argument pos:start="15:50" pos:end="15:71"><expr pos:start="15:50" pos:end="15:71">struct <name pos:start="15:57" pos:end="15:71">target_ucontext</name></expr></argument>, <argument pos:start="15:74" pos:end="15:84"><expr pos:start="15:74" pos:end="15:84"><name pos:start="15:74" pos:end="15:84">tuc_sigmask</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="17:24" pos:end="17:35"><expr pos:start="17:24" pos:end="17:35"><sizeof pos:start="17:24" pos:end="17:35">sizeof <argument_list pos:start="17:31" pos:end="17:35">(<argument pos:start="17:32" pos:end="17:34"><expr pos:start="17:32" pos:end="17:34"><name pos:start="17:32" pos:end="17:34">set</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="24:0"><block_content pos:start="19:9" pos:end="24:0">

        <return pos:start="19:9" pos:end="24:0">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



<cpp:if pos:start="23:1" pos:end="23:25">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:25"><call pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:11">defined</name><argument_list pos:start="23:12" pos:end="23:25">(<argument pos:start="23:13" pos:end="23:24"><expr pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="25:5" pos:end="25:57"><expr pos:start="25:5" pos:end="25:56"><call pos:start="25:5" pos:end="25:56"><name pos:start="25:5" pos:end="25:11">fprintf</name> <argument_list pos:start="25:13" pos:end="25:56">(<argument pos:start="25:14" pos:end="25:19"><expr pos:start="25:14" pos:end="25:19"><name pos:start="25:14" pos:end="25:19">stderr</name></expr></argument>, <argument pos:start="25:22" pos:end="25:55"><expr pos:start="25:22" pos:end="25:55"><literal type="string" pos:start="25:22" pos:end="25:55">"do_setcontext: not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="27:5" pos:end="30:0">return <expr pos:start="27:12" pos:end="27:12"><literal type="number" pos:start="27:12" pos:end="27:12">0</literal></expr>;</return>

<cpp:else pos:start="29:1" pos:end="29:5">#<cpp:directive pos:start="29:2" pos:end="29:5">else</cpp:directive></cpp:else>

    <if_stmt pos:start="31:5" pos:end="33:17"><if pos:start="31:5" pos:end="33:17">if <condition pos:start="31:8" pos:end="31:45">(<expr pos:start="31:9" pos:end="31:44"><call pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:18">__get_user</name><argument_list pos:start="31:19" pos:end="31:44">(<argument pos:start="31:20" pos:end="31:27"><expr pos:start="31:20" pos:end="31:27"><name pos:start="31:20" pos:end="31:27">mcp_addr</name></expr></argument>, <argument pos:start="31:30" pos:end="31:43"><expr pos:start="31:30" pos:end="31:43"><operator pos:start="31:30" pos:end="31:30">&amp;</operator><name pos:start="31:31" pos:end="31:43"><name pos:start="31:31" pos:end="31:33">ucp</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:43">tuc_regs</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:17"><block_content pos:start="33:9" pos:end="33:17">

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="39:17"><if pos:start="37:5" pos:end="39:17">if <condition pos:start="37:8" pos:end="37:57">(<expr pos:start="37:9" pos:end="37:56"><operator pos:start="37:9" pos:end="37:9">!</operator><call pos:start="37:10" pos:end="37:56"><name pos:start="37:10" pos:end="37:25">lock_user_struct</name><argument_list pos:start="37:26" pos:end="37:56">(<argument pos:start="37:27" pos:end="37:37"><expr pos:start="37:27" pos:end="37:37"><name pos:start="37:27" pos:end="37:37">VERIFY_READ</name></expr></argument>, <argument pos:start="37:40" pos:end="37:42"><expr pos:start="37:40" pos:end="37:42"><name pos:start="37:40" pos:end="37:42">mcp</name></expr></argument>, <argument pos:start="37:45" pos:end="37:52"><expr pos:start="37:45" pos:end="37:52"><name pos:start="37:45" pos:end="37:52">mcp_addr</name></expr></argument>, <argument pos:start="37:55" pos:end="37:55"><expr pos:start="37:55" pos:end="37:55"><literal type="number" pos:start="37:55" pos:end="37:55">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:17"><block_content pos:start="39:9" pos:end="39:17">

        <return pos:start="39:9" pos:end="39:17">return <expr pos:start="39:16" pos:end="39:16"><literal type="number" pos:start="39:16" pos:end="39:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:51"><expr pos:start="43:5" pos:end="43:50"><call pos:start="43:5" pos:end="43:50"><name pos:start="43:5" pos:end="43:34">target_to_host_sigset_internal</name><argument_list pos:start="43:35" pos:end="43:50">(<argument pos:start="43:36" pos:end="43:43"><expr pos:start="43:36" pos:end="43:43"><operator pos:start="43:36" pos:end="43:36">&amp;</operator><name pos:start="43:37" pos:end="43:43">blocked</name></expr></argument>, <argument pos:start="43:46" pos:end="43:49"><expr pos:start="43:46" pos:end="43:49"><operator pos:start="43:46" pos:end="43:46">&amp;</operator><name pos:start="43:47" pos:end="43:49">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:48"><expr pos:start="45:5" pos:end="45:47"><call pos:start="45:5" pos:end="45:47"><name pos:start="45:5" pos:end="45:18">do_sigprocmask</name><argument_list pos:start="45:19" pos:end="45:47">(<argument pos:start="45:20" pos:end="45:30"><expr pos:start="45:20" pos:end="45:30"><name pos:start="45:20" pos:end="45:30">SIG_SETMASK</name></expr></argument>, <argument pos:start="45:33" pos:end="45:40"><expr pos:start="45:33" pos:end="45:40"><operator pos:start="45:33" pos:end="45:33">&amp;</operator><name pos:start="45:34" pos:end="45:40">blocked</name></expr></argument>, <argument pos:start="45:43" pos:end="45:46"><expr pos:start="45:43" pos:end="45:46"><name pos:start="45:43" pos:end="45:46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="49:21"><if pos:start="47:5" pos:end="49:21">if <condition pos:start="47:8" pos:end="47:41">(<expr pos:start="47:9" pos:end="47:40"><call pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:25">restore_user_regs</name><argument_list pos:start="47:26" pos:end="47:40">(<argument pos:start="47:27" pos:end="47:29"><expr pos:start="47:27" pos:end="47:29"><name pos:start="47:27" pos:end="47:29">env</name></expr></argument>, <argument pos:start="47:32" pos:end="47:34"><expr pos:start="47:32" pos:end="47:34"><name pos:start="47:32" pos:end="47:34">mcp</name></expr></argument>, <argument pos:start="47:37" pos:end="47:39"><expr pos:start="47:37" pos:end="47:39"><name pos:start="47:37" pos:end="47:39">sig</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:21"><block_content pos:start="49:9" pos:end="49:21">

        <goto pos:start="49:9" pos:end="49:21">goto <name pos:start="49:14" pos:end="49:20">sigsegv</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:41"><expr pos:start="53:5" pos:end="53:40"><call pos:start="53:5" pos:end="53:40"><name pos:start="53:5" pos:end="53:22">unlock_user_struct</name><argument_list pos:start="53:23" pos:end="53:40">(<argument pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><name pos:start="53:24" pos:end="53:26">mcp</name></expr></argument>, <argument pos:start="53:29" pos:end="53:36"><expr pos:start="53:29" pos:end="53:36"><name pos:start="53:29" pos:end="53:36">mcp_addr</name></expr></argument>, <argument pos:start="53:39" pos:end="53:39"><expr pos:start="53:39" pos:end="53:39"><literal type="number" pos:start="53:39" pos:end="53:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="55:5" pos:end="55:13">return <expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</return>



<label pos:start="59:1" pos:end="59:8"><name pos:start="59:1" pos:end="59:7">sigsegv</name>:</label>

    <expr_stmt pos:start="61:5" pos:end="61:41"><expr pos:start="61:5" pos:end="61:40"><call pos:start="61:5" pos:end="61:40"><name pos:start="61:5" pos:end="61:22">unlock_user_struct</name><argument_list pos:start="61:23" pos:end="61:40">(<argument pos:start="61:24" pos:end="61:26"><expr pos:start="61:24" pos:end="61:26"><name pos:start="61:24" pos:end="61:26">mcp</name></expr></argument>, <argument pos:start="61:29" pos:end="61:36"><expr pos:start="61:29" pos:end="61:36"><name pos:start="61:29" pos:end="61:36">mcp_addr</name></expr></argument>, <argument pos:start="61:39" pos:end="61:39"><expr pos:start="61:39" pos:end="61:39"><literal type="number" pos:start="61:39" pos:end="61:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="63:5" pos:end="66:0">return <expr pos:start="63:12" pos:end="63:12"><literal type="number" pos:start="63:12" pos:end="63:12">1</literal></expr>;</return>

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
