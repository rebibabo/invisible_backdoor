<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4134.c" pos:tabs="8"><function pos:start="1:1" pos:end="351:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">gic_dist_writeb</name><parameter_list pos:start="1:28" pos:end="3:61">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:48">hwaddr</name></type> <name pos:start="1:50" pos:end="1:55">offset</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:36">uint32_t</name></type> <name pos:start="3:38" pos:end="3:42">value</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:60"><decl pos:start="3:45" pos:end="3:60"><type pos:start="3:45" pos:end="3:60"><name pos:start="3:45" pos:end="3:54">MemTxAttrs</name></type> <name pos:start="3:56" pos:end="3:60">attrs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="351:1">{<block_content pos:start="7:5" pos:end="349:67">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">GICState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:36">= <expr pos:start="7:19" pos:end="7:36"><operator pos:start="7:19" pos:end="7:19">(</operator><name pos:start="7:20" pos:end="7:27">GICState</name> <operator pos:start="7:29" pos:end="7:29">*</operator><operator pos:start="7:30" pos:end="7:30">)</operator><name pos:start="7:31" pos:end="7:36">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">cpu</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:7">cpu</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:32"><name pos:start="17:11" pos:end="17:29">gic_get_current_cpu</name><argument_list pos:start="17:30" pos:end="17:32">(<argument pos:start="17:31" pos:end="17:31"><expr pos:start="17:31" pos:end="17:31"><name pos:start="17:31" pos:end="17:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="339:5"><if pos:start="19:5" pos:end="41:5">if <condition pos:start="19:8" pos:end="19:23">(<expr pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:14">offset</name> <operator pos:start="19:16" pos:end="19:16">&lt;</operator> <literal type="number" pos:start="19:18" pos:end="19:22">0x100</literal></expr>)</condition> <block pos:start="19:25" pos:end="41:5">{<block_content pos:start="21:9" pos:end="39:9">

        <if_stmt pos:start="21:9" pos:end="39:9"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:24">(<expr pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:18">offset</name> <operator pos:start="21:20" pos:end="21:21">==</operator> <literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr>)</condition> <block pos:start="21:26" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:73">

            <expr_stmt pos:start="23:13" pos:end="23:37"><expr pos:start="23:13" pos:end="23:36"><name pos:start="23:13" pos:end="23:22"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:22">enabled</name></name> <operator pos:start="23:24" pos:end="23:24">=</operator> <operator pos:start="23:26" pos:end="23:26">(</operator><name pos:start="23:27" pos:end="23:31">value</name> <operator pos:start="23:33" pos:end="23:33">&amp;</operator> <literal type="number" pos:start="23:35" pos:end="23:35">1</literal><operator pos:start="23:36" pos:end="23:36">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:73"><expr pos:start="25:13" pos:end="25:72"><call pos:start="25:13" pos:end="25:72"><name pos:start="25:13" pos:end="25:19">DPRINTF</name><argument_list pos:start="25:20" pos:end="25:72">(<argument pos:start="25:21" pos:end="25:44"><expr pos:start="25:21" pos:end="25:44"><literal type="string" pos:start="25:21" pos:end="25:44">"Distribution %sabled\n"</literal></expr></argument>, <argument pos:start="25:47" pos:end="25:71"><expr pos:start="25:47" pos:end="25:71"><ternary pos:start="25:47" pos:end="25:71"><condition pos:start="25:47" pos:end="25:58"><expr pos:start="25:47" pos:end="25:56"><name pos:start="25:47" pos:end="25:56"><name pos:start="25:47" pos:end="25:47">s</name><operator pos:start="25:48" pos:end="25:49">-&gt;</operator><name pos:start="25:50" pos:end="25:56">enabled</name></name></expr> ?</condition><then pos:start="25:60" pos:end="25:63"> <expr pos:start="25:60" pos:end="25:63"><literal type="string" pos:start="25:60" pos:end="25:63">"En"</literal></expr> </then><else pos:start="25:65" pos:end="25:71">: <expr pos:start="25:67" pos:end="25:71"><literal type="string" pos:start="25:67" pos:end="25:71">"Dis"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="27:11" pos:end="31:9">else if <condition pos:start="27:19" pos:end="27:30">(<expr pos:start="27:20" pos:end="27:29"><name pos:start="27:20" pos:end="27:25">offset</name> <operator pos:start="27:27" pos:end="27:27">&lt;</operator> <literal type="number" pos:start="27:29" pos:end="27:29">4</literal></expr>)</condition> <block pos:start="27:32" pos:end="31:9">{<block_content>

            <comment type="block" pos:start="29:13" pos:end="29:27">/* ignored.  */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="31:11" pos:end="35:9">else if <condition pos:start="31:19" pos:end="31:34">(<expr pos:start="31:20" pos:end="31:33"><name pos:start="31:20" pos:end="31:25">offset</name> <operator pos:start="31:27" pos:end="31:28">&gt;=</operator> <literal type="number" pos:start="31:30" pos:end="31:33">0x80</literal></expr>)</condition> <block pos:start="31:36" pos:end="35:9">{<block_content>

            <comment type="block" pos:start="33:13" pos:end="33:54">/* Interrupt Security Registers, RAZ/WI */</comment>

        </block_content>}</block></if> <else pos:start="35:11" pos:end="39:9">else <block pos:start="35:16" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:25">

            <goto pos:start="37:13" pos:end="37:25">goto <name pos:start="37:18" pos:end="37:24">bad_reg</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="97:5">else if <condition pos:start="41:15" pos:end="41:30">(<expr pos:start="41:16" pos:end="41:29"><name pos:start="41:16" pos:end="41:21">offset</name> <operator pos:start="41:23" pos:end="41:23">&lt;</operator> <literal type="number" pos:start="41:25" pos:end="41:29">0x180</literal></expr>)</condition> <block pos:start="41:32" pos:end="97:5">{<block_content pos:start="45:9" pos:end="95:9">

        <comment type="block" pos:start="43:9" pos:end="43:36">/* Interrupt Set Enable.  */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:50"><expr pos:start="45:9" pos:end="45:49"><name pos:start="45:9" pos:end="45:11">irq</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <operator pos:start="45:15" pos:end="45:15">(</operator><name pos:start="45:16" pos:end="45:21">offset</name> <operator pos:start="45:23" pos:end="45:23">-</operator> <literal type="number" pos:start="45:25" pos:end="45:29">0x100</literal><operator pos:start="45:30" pos:end="45:30">)</operator> <operator pos:start="45:32" pos:end="45:32">*</operator> <literal type="number" pos:start="45:34" pos:end="45:36">8</literal> <operator pos:start="45:36" pos:end="45:36">+</operator> <name pos:start="45:38" pos:end="45:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="49:25"><if pos:start="47:9" pos:end="49:25">if <condition pos:start="47:12" pos:end="47:30">(<expr pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:15">irq</name> <operator pos:start="47:17" pos:end="47:18">&gt;=</operator> <name pos:start="47:20" pos:end="47:29"><name pos:start="47:20" pos:end="47:20">s</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:25"><block_content pos:start="49:13" pos:end="49:25">

            <goto pos:start="49:13" pos:end="49:25">goto <name pos:start="49:18" pos:end="49:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:30">(<expr pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:15">irq</name> <operator pos:start="51:17" pos:end="51:17">&lt;</operator> <name pos:start="51:19" pos:end="51:29">GIC_NR_SGIS</name></expr>)</condition> <block pos:start="51:32" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:25">

            <expr_stmt pos:start="53:13" pos:end="53:25"><expr pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:17">value</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:24">0xff</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="59:9" pos:end="95:9">for <control pos:start="59:13" pos:end="59:31">(<init pos:start="59:14" pos:end="59:19"><expr pos:start="59:14" pos:end="59:18"><name pos:start="59:14" pos:end="59:14">i</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <literal type="number" pos:start="59:18" pos:end="59:18">0</literal></expr>;</init> <condition pos:start="59:21" pos:end="59:26"><expr pos:start="59:21" pos:end="59:25"><name pos:start="59:21" pos:end="59:21">i</name> <operator pos:start="59:23" pos:end="59:23">&lt;</operator> <literal type="number" pos:start="59:25" pos:end="59:25">8</literal></expr>;</condition> <incr pos:start="59:28" pos:end="59:30"><expr pos:start="59:28" pos:end="59:30"><name pos:start="59:28" pos:end="59:28">i</name><operator pos:start="59:29" pos:end="59:30">++</operator></expr></incr>)</control> <block pos:start="59:33" pos:end="95:9">{<block_content pos:start="61:13" pos:end="93:13">

            <if_stmt pos:start="61:13" pos:end="93:13"><if pos:start="61:13" pos:end="93:13">if <condition pos:start="61:16" pos:end="61:33">(<expr pos:start="61:17" pos:end="61:32"><name pos:start="61:17" pos:end="61:21">value</name> <operator pos:start="61:23" pos:end="61:23">&amp;</operator> <operator pos:start="61:25" pos:end="61:25">(</operator><literal type="number" pos:start="61:26" pos:end="61:26">1</literal> <operator pos:start="61:28" pos:end="61:29">&lt;&lt;</operator> <name pos:start="61:31" pos:end="61:31">i</name><operator pos:start="61:32" pos:end="61:32">)</operator></expr>)</condition> <block pos:start="61:35" pos:end="93:13">{<block_content pos:start="63:17" pos:end="91:17">

                <decl_stmt pos:start="63:17" pos:end="65:76"><decl pos:start="63:17" pos:end="65:75"><type pos:start="63:17" pos:end="63:19"><name pos:start="63:17" pos:end="63:19">int</name></type> <name pos:start="63:21" pos:end="63:24">mask</name> <init pos:start="63:26" pos:end="65:75">=

                    <expr pos:start="65:21" pos:end="65:75"><ternary pos:start="65:21" pos:end="65:75"><condition pos:start="65:21" pos:end="65:42"><expr pos:start="65:21" pos:end="65:40"><operator pos:start="65:21" pos:end="65:21">(</operator><name pos:start="65:22" pos:end="65:24">irq</name> <operator pos:start="65:26" pos:end="65:26">&lt;</operator> <name pos:start="65:28" pos:end="65:39">GIC_INTERNAL</name><operator pos:start="65:40" pos:end="65:40">)</operator></expr> ?</condition><then pos:start="65:44" pos:end="65:53"> <expr pos:start="65:44" pos:end="65:53"><operator pos:start="65:44" pos:end="65:44">(</operator><literal type="number" pos:start="65:45" pos:end="65:45">1</literal> <operator pos:start="65:47" pos:end="65:48">&lt;&lt;</operator> <name pos:start="65:50" pos:end="65:52">cpu</name><operator pos:start="65:53" pos:end="65:53">)</operator></expr> </then><else pos:start="65:55" pos:end="65:75">: <expr pos:start="65:57" pos:end="65:75"><call pos:start="65:57" pos:end="65:75"><name pos:start="65:57" pos:end="65:66">GIC_TARGET</name><argument_list pos:start="65:67" pos:end="65:75">(<argument pos:start="65:68" pos:end="65:74"><expr pos:start="65:68" pos:end="65:74"><name pos:start="65:68" pos:end="65:70">irq</name> <operator pos:start="65:72" pos:end="65:72">+</operator> <name pos:start="65:74" pos:end="65:74">i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="67:17" pos:end="67:74"><decl pos:start="67:17" pos:end="67:73"><type pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:19">int</name></type> <name pos:start="67:21" pos:end="67:22">cm</name> <init pos:start="67:24" pos:end="67:73">= <expr pos:start="67:26" pos:end="67:73"><ternary pos:start="67:26" pos:end="67:73"><condition pos:start="67:26" pos:end="67:47"><expr pos:start="67:26" pos:end="67:45"><operator pos:start="67:26" pos:end="67:26">(</operator><name pos:start="67:27" pos:end="67:29">irq</name> <operator pos:start="67:31" pos:end="67:31">&lt;</operator> <name pos:start="67:33" pos:end="67:44">GIC_INTERNAL</name><operator pos:start="67:45" pos:end="67:45">)</operator></expr> ?</condition><then pos:start="67:49" pos:end="67:58"> <expr pos:start="67:49" pos:end="67:58"><operator pos:start="67:49" pos:end="67:49">(</operator><literal type="number" pos:start="67:50" pos:end="67:50">1</literal> <operator pos:start="67:52" pos:end="67:53">&lt;&lt;</operator> <name pos:start="67:55" pos:end="67:57">cpu</name><operator pos:start="67:58" pos:end="67:58">)</operator></expr> </then><else pos:start="67:60" pos:end="67:73">: <expr pos:start="67:62" pos:end="67:73"><name pos:start="67:62" pos:end="67:73">ALL_CPU_MASK</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="71:17" pos:end="75:17"><if pos:start="71:17" pos:end="75:17">if <condition pos:start="71:20" pos:end="71:51">(<expr pos:start="71:21" pos:end="71:50"><operator pos:start="71:21" pos:end="71:21">!</operator><call pos:start="71:22" pos:end="71:50"><name pos:start="71:22" pos:end="71:37">GIC_TEST_ENABLED</name><argument_list pos:start="71:38" pos:end="71:50">(<argument pos:start="71:39" pos:end="71:45"><expr pos:start="71:39" pos:end="71:45"><name pos:start="71:39" pos:end="71:41">irq</name> <operator pos:start="71:43" pos:end="71:43">+</operator> <name pos:start="71:45" pos:end="71:45">i</name></expr></argument>, <argument pos:start="71:48" pos:end="71:49"><expr pos:start="71:48" pos:end="71:49"><name pos:start="71:48" pos:end="71:49">cm</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:53" pos:end="75:17">{<block_content pos:start="73:21" pos:end="73:57">

                    <expr_stmt pos:start="73:21" pos:end="73:57"><expr pos:start="73:21" pos:end="73:56"><call pos:start="73:21" pos:end="73:56"><name pos:start="73:21" pos:end="73:27">DPRINTF</name><argument_list pos:start="73:28" pos:end="73:56">(<argument pos:start="73:29" pos:end="73:46"><expr pos:start="73:29" pos:end="73:46"><literal type="string" pos:start="73:29" pos:end="73:46">"Enabled IRQ %d\n"</literal></expr></argument>, <argument pos:start="73:49" pos:end="73:55"><expr pos:start="73:49" pos:end="73:55"><name pos:start="73:49" pos:end="73:51">irq</name> <operator pos:start="73:53" pos:end="73:53">+</operator> <name pos:start="73:55" pos:end="73:55">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:45"><expr pos:start="77:17" pos:end="77:44"><call pos:start="77:17" pos:end="77:44"><name pos:start="77:17" pos:end="77:31">GIC_SET_ENABLED</name><argument_list pos:start="77:32" pos:end="77:44">(<argument pos:start="77:33" pos:end="77:39"><expr pos:start="77:33" pos:end="77:39"><name pos:start="77:33" pos:end="77:35">irq</name> <operator pos:start="77:37" pos:end="77:37">+</operator> <name pos:start="77:39" pos:end="77:39">i</name></expr></argument>, <argument pos:start="77:42" pos:end="77:43"><expr pos:start="77:42" pos:end="77:43"><name pos:start="77:42" pos:end="77:43">cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="79:17" pos:end="81:37">/* If a raised level triggered IRQ enabled then mark

                   is as pending.  */</comment>

                <if_stmt pos:start="83:17" pos:end="91:17"><if pos:start="83:17" pos:end="91:17">if <condition pos:start="83:20" pos:end="85:59">(<expr pos:start="83:21" pos:end="85:58"><call pos:start="83:21" pos:end="83:49"><name pos:start="83:21" pos:end="83:34">GIC_TEST_LEVEL</name><argument_list pos:start="83:35" pos:end="83:49">(<argument pos:start="83:36" pos:end="83:42"><expr pos:start="83:36" pos:end="83:42"><name pos:start="83:36" pos:end="83:38">irq</name> <operator pos:start="83:40" pos:end="83:40">+</operator> <name pos:start="83:42" pos:end="83:42">i</name></expr></argument>, <argument pos:start="83:45" pos:end="83:48"><expr pos:start="83:45" pos:end="83:48"><name pos:start="83:45" pos:end="83:48">mask</name></expr></argument>)</argument_list></call>

                        <operator pos:start="85:25" pos:end="85:26">&amp;&amp;</operator> <operator pos:start="85:28" pos:end="85:28">!</operator><call pos:start="85:29" pos:end="85:58"><name pos:start="85:29" pos:end="85:49">GIC_TEST_EDGE_TRIGGER</name><argument_list pos:start="85:50" pos:end="85:58">(<argument pos:start="85:51" pos:end="85:57"><expr pos:start="85:51" pos:end="85:57"><name pos:start="85:51" pos:end="85:53">irq</name> <operator pos:start="85:55" pos:end="85:55">+</operator> <name pos:start="85:57" pos:end="85:57">i</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:61" pos:end="91:17">{<block_content pos:start="87:21" pos:end="89:51">

                    <expr_stmt pos:start="87:21" pos:end="87:71"><expr pos:start="87:21" pos:end="87:70"><call pos:start="87:21" pos:end="87:70"><name pos:start="87:21" pos:end="87:27">DPRINTF</name><argument_list pos:start="87:28" pos:end="87:70">(<argument pos:start="87:29" pos:end="87:54"><expr pos:start="87:29" pos:end="87:54"><literal type="string" pos:start="87:29" pos:end="87:54">"Set %d pending mask %x\n"</literal></expr></argument>, <argument pos:start="87:57" pos:end="87:63"><expr pos:start="87:57" pos:end="87:63"><name pos:start="87:57" pos:end="87:59">irq</name> <operator pos:start="87:61" pos:end="87:61">+</operator> <name pos:start="87:63" pos:end="87:63">i</name></expr></argument>, <argument pos:start="87:66" pos:end="87:69"><expr pos:start="87:66" pos:end="87:69"><name pos:start="87:66" pos:end="87:69">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="89:21" pos:end="89:51"><expr pos:start="89:21" pos:end="89:50"><call pos:start="89:21" pos:end="89:50"><name pos:start="89:21" pos:end="89:35">GIC_SET_PENDING</name><argument_list pos:start="89:36" pos:end="89:50">(<argument pos:start="89:37" pos:end="89:43"><expr pos:start="89:37" pos:end="89:43"><name pos:start="89:37" pos:end="89:39">irq</name> <operator pos:start="89:41" pos:end="89:41">+</operator> <name pos:start="89:43" pos:end="89:43">i</name></expr></argument>, <argument pos:start="89:46" pos:end="89:49"><expr pos:start="89:46" pos:end="89:49"><name pos:start="89:46" pos:end="89:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="97:7" pos:end="135:5">else if <condition pos:start="97:15" pos:end="97:30">(<expr pos:start="97:16" pos:end="97:29"><name pos:start="97:16" pos:end="97:21">offset</name> <operator pos:start="97:23" pos:end="97:23">&lt;</operator> <literal type="number" pos:start="97:25" pos:end="97:29">0x200</literal></expr>)</condition> <block pos:start="97:32" pos:end="135:5">{<block_content pos:start="101:9" pos:end="133:9">

        <comment type="block" pos:start="99:9" pos:end="99:38">/* Interrupt Clear Enable.  */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:50"><expr pos:start="101:9" pos:end="101:49"><name pos:start="101:9" pos:end="101:11">irq</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <operator pos:start="101:15" pos:end="101:15">(</operator><name pos:start="101:16" pos:end="101:21">offset</name> <operator pos:start="101:23" pos:end="101:23">-</operator> <literal type="number" pos:start="101:25" pos:end="101:29">0x180</literal><operator pos:start="101:30" pos:end="101:30">)</operator> <operator pos:start="101:32" pos:end="101:32">*</operator> <literal type="number" pos:start="101:34" pos:end="101:36">8</literal> <operator pos:start="101:36" pos:end="101:36">+</operator> <name pos:start="101:38" pos:end="101:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="105:25"><if pos:start="103:9" pos:end="105:25">if <condition pos:start="103:12" pos:end="103:30">(<expr pos:start="103:13" pos:end="103:29"><name pos:start="103:13" pos:end="103:15">irq</name> <operator pos:start="103:17" pos:end="103:18">&gt;=</operator> <name pos:start="103:20" pos:end="103:29"><name pos:start="103:20" pos:end="103:20">s</name><operator pos:start="103:21" pos:end="103:22">-&gt;</operator><name pos:start="103:23" pos:end="103:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="105:13" pos:end="105:25"><block_content pos:start="105:13" pos:end="105:25">

            <goto pos:start="105:13" pos:end="105:25">goto <name pos:start="105:18" pos:end="105:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="111:9"><if pos:start="107:9" pos:end="111:9">if <condition pos:start="107:12" pos:end="107:30">(<expr pos:start="107:13" pos:end="107:29"><name pos:start="107:13" pos:end="107:15">irq</name> <operator pos:start="107:17" pos:end="107:17">&lt;</operator> <name pos:start="107:19" pos:end="107:29">GIC_NR_SGIS</name></expr>)</condition> <block pos:start="107:32" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:22">

            <expr_stmt pos:start="109:13" pos:end="109:22"><expr pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:17">value</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <literal type="number" pos:start="109:21" pos:end="109:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="115:9" pos:end="133:9">for <control pos:start="115:13" pos:end="115:31">(<init pos:start="115:14" pos:end="115:19"><expr pos:start="115:14" pos:end="115:18"><name pos:start="115:14" pos:end="115:14">i</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <literal type="number" pos:start="115:18" pos:end="115:18">0</literal></expr>;</init> <condition pos:start="115:21" pos:end="115:26"><expr pos:start="115:21" pos:end="115:25"><name pos:start="115:21" pos:end="115:21">i</name> <operator pos:start="115:23" pos:end="115:23">&lt;</operator> <literal type="number" pos:start="115:25" pos:end="115:25">8</literal></expr>;</condition> <incr pos:start="115:28" pos:end="115:30"><expr pos:start="115:28" pos:end="115:30"><name pos:start="115:28" pos:end="115:28">i</name><operator pos:start="115:29" pos:end="115:30">++</operator></expr></incr>)</control> <block pos:start="115:33" pos:end="133:9">{<block_content pos:start="117:13" pos:end="131:13">

            <if_stmt pos:start="117:13" pos:end="131:13"><if pos:start="117:13" pos:end="131:13">if <condition pos:start="117:16" pos:end="117:33">(<expr pos:start="117:17" pos:end="117:32"><name pos:start="117:17" pos:end="117:21">value</name> <operator pos:start="117:23" pos:end="117:23">&amp;</operator> <operator pos:start="117:25" pos:end="117:25">(</operator><literal type="number" pos:start="117:26" pos:end="117:26">1</literal> <operator pos:start="117:28" pos:end="117:29">&lt;&lt;</operator> <name pos:start="117:31" pos:end="117:31">i</name><operator pos:start="117:32" pos:end="117:32">)</operator></expr>)</condition> <block pos:start="117:35" pos:end="131:13">{<block_content pos:start="119:17" pos:end="129:47">

                <decl_stmt pos:start="119:17" pos:end="119:74"><decl pos:start="119:17" pos:end="119:73"><type pos:start="119:17" pos:end="119:19"><name pos:start="119:17" pos:end="119:19">int</name></type> <name pos:start="119:21" pos:end="119:22">cm</name> <init pos:start="119:24" pos:end="119:73">= <expr pos:start="119:26" pos:end="119:73"><ternary pos:start="119:26" pos:end="119:73"><condition pos:start="119:26" pos:end="119:47"><expr pos:start="119:26" pos:end="119:45"><operator pos:start="119:26" pos:end="119:26">(</operator><name pos:start="119:27" pos:end="119:29">irq</name> <operator pos:start="119:31" pos:end="119:31">&lt;</operator> <name pos:start="119:33" pos:end="119:44">GIC_INTERNAL</name><operator pos:start="119:45" pos:end="119:45">)</operator></expr> ?</condition><then pos:start="119:49" pos:end="119:58"> <expr pos:start="119:49" pos:end="119:58"><operator pos:start="119:49" pos:end="119:49">(</operator><literal type="number" pos:start="119:50" pos:end="119:50">1</literal> <operator pos:start="119:52" pos:end="119:53">&lt;&lt;</operator> <name pos:start="119:55" pos:end="119:57">cpu</name><operator pos:start="119:58" pos:end="119:58">)</operator></expr> </then><else pos:start="119:60" pos:end="119:73">: <expr pos:start="119:62" pos:end="119:73"><name pos:start="119:62" pos:end="119:73">ALL_CPU_MASK</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="123:17" pos:end="127:17"><if pos:start="123:17" pos:end="127:17">if <condition pos:start="123:20" pos:end="123:50">(<expr pos:start="123:21" pos:end="123:49"><call pos:start="123:21" pos:end="123:49"><name pos:start="123:21" pos:end="123:36">GIC_TEST_ENABLED</name><argument_list pos:start="123:37" pos:end="123:49">(<argument pos:start="123:38" pos:end="123:44"><expr pos:start="123:38" pos:end="123:44"><name pos:start="123:38" pos:end="123:40">irq</name> <operator pos:start="123:42" pos:end="123:42">+</operator> <name pos:start="123:44" pos:end="123:44">i</name></expr></argument>, <argument pos:start="123:47" pos:end="123:48"><expr pos:start="123:47" pos:end="123:48"><name pos:start="123:47" pos:end="123:48">cm</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:52" pos:end="127:17">{<block_content pos:start="125:21" pos:end="125:58">

                    <expr_stmt pos:start="125:21" pos:end="125:58"><expr pos:start="125:21" pos:end="125:57"><call pos:start="125:21" pos:end="125:57"><name pos:start="125:21" pos:end="125:27">DPRINTF</name><argument_list pos:start="125:28" pos:end="125:57">(<argument pos:start="125:29" pos:end="125:47"><expr pos:start="125:29" pos:end="125:47"><literal type="string" pos:start="125:29" pos:end="125:47">"Disabled IRQ %d\n"</literal></expr></argument>, <argument pos:start="125:50" pos:end="125:56"><expr pos:start="125:50" pos:end="125:56"><name pos:start="125:50" pos:end="125:52">irq</name> <operator pos:start="125:54" pos:end="125:54">+</operator> <name pos:start="125:56" pos:end="125:56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:47"><expr pos:start="129:17" pos:end="129:46"><call pos:start="129:17" pos:end="129:46"><name pos:start="129:17" pos:end="129:33">GIC_CLEAR_ENABLED</name><argument_list pos:start="129:34" pos:end="129:46">(<argument pos:start="129:35" pos:end="129:41"><expr pos:start="129:35" pos:end="129:41"><name pos:start="129:35" pos:end="129:37">irq</name> <operator pos:start="129:39" pos:end="129:39">+</operator> <name pos:start="129:41" pos:end="129:41">i</name></expr></argument>, <argument pos:start="129:44" pos:end="129:45"><expr pos:start="129:44" pos:end="129:45"><name pos:start="129:44" pos:end="129:45">cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="135:7" pos:end="163:5">else if <condition pos:start="135:15" pos:end="135:30">(<expr pos:start="135:16" pos:end="135:29"><name pos:start="135:16" pos:end="135:21">offset</name> <operator pos:start="135:23" pos:end="135:23">&lt;</operator> <literal type="number" pos:start="135:25" pos:end="135:29">0x280</literal></expr>)</condition> <block pos:start="135:32" pos:end="163:5">{<block_content pos:start="139:9" pos:end="161:9">

        <comment type="block" pos:start="137:9" pos:end="137:37">/* Interrupt Set Pending.  */</comment>

        <expr_stmt pos:start="139:9" pos:end="139:50"><expr pos:start="139:9" pos:end="139:49"><name pos:start="139:9" pos:end="139:11">irq</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <operator pos:start="139:15" pos:end="139:15">(</operator><name pos:start="139:16" pos:end="139:21">offset</name> <operator pos:start="139:23" pos:end="139:23">-</operator> <literal type="number" pos:start="139:25" pos:end="139:29">0x200</literal><operator pos:start="139:30" pos:end="139:30">)</operator> <operator pos:start="139:32" pos:end="139:32">*</operator> <literal type="number" pos:start="139:34" pos:end="139:36">8</literal> <operator pos:start="139:36" pos:end="139:36">+</operator> <name pos:start="139:38" pos:end="139:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="143:25"><if pos:start="141:9" pos:end="143:25">if <condition pos:start="141:12" pos:end="141:30">(<expr pos:start="141:13" pos:end="141:29"><name pos:start="141:13" pos:end="141:15">irq</name> <operator pos:start="141:17" pos:end="141:18">&gt;=</operator> <name pos:start="141:20" pos:end="141:29"><name pos:start="141:20" pos:end="141:20">s</name><operator pos:start="141:21" pos:end="141:22">-&gt;</operator><name pos:start="141:23" pos:end="141:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:25"><block_content pos:start="143:13" pos:end="143:25">

            <goto pos:start="143:13" pos:end="143:25">goto <name pos:start="143:18" pos:end="143:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="145:9" pos:end="149:9"><if pos:start="145:9" pos:end="149:9">if <condition pos:start="145:12" pos:end="145:30">(<expr pos:start="145:13" pos:end="145:29"><name pos:start="145:13" pos:end="145:15">irq</name> <operator pos:start="145:17" pos:end="145:17">&lt;</operator> <name pos:start="145:19" pos:end="145:29">GIC_NR_SGIS</name></expr>)</condition> <block pos:start="145:32" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:22">

            <expr_stmt pos:start="147:13" pos:end="147:22"><expr pos:start="147:13" pos:end="147:21"><name pos:start="147:13" pos:end="147:17">value</name> <operator pos:start="147:19" pos:end="147:19">=</operator> <literal type="number" pos:start="147:21" pos:end="147:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="153:9" pos:end="161:9">for <control pos:start="153:13" pos:end="153:31">(<init pos:start="153:14" pos:end="153:19"><expr pos:start="153:14" pos:end="153:18"><name pos:start="153:14" pos:end="153:14">i</name> <operator pos:start="153:16" pos:end="153:16">=</operator> <literal type="number" pos:start="153:18" pos:end="153:18">0</literal></expr>;</init> <condition pos:start="153:21" pos:end="153:26"><expr pos:start="153:21" pos:end="153:25"><name pos:start="153:21" pos:end="153:21">i</name> <operator pos:start="153:23" pos:end="153:23">&lt;</operator> <literal type="number" pos:start="153:25" pos:end="153:25">8</literal></expr>;</condition> <incr pos:start="153:28" pos:end="153:30"><expr pos:start="153:28" pos:end="153:30"><name pos:start="153:28" pos:end="153:28">i</name><operator pos:start="153:29" pos:end="153:30">++</operator></expr></incr>)</control> <block pos:start="153:33" pos:end="161:9">{<block_content pos:start="155:13" pos:end="159:13">

            <if_stmt pos:start="155:13" pos:end="159:13"><if pos:start="155:13" pos:end="159:13">if <condition pos:start="155:16" pos:end="155:33">(<expr pos:start="155:17" pos:end="155:32"><name pos:start="155:17" pos:end="155:21">value</name> <operator pos:start="155:23" pos:end="155:23">&amp;</operator> <operator pos:start="155:25" pos:end="155:25">(</operator><literal type="number" pos:start="155:26" pos:end="155:26">1</literal> <operator pos:start="155:28" pos:end="155:29">&lt;&lt;</operator> <name pos:start="155:31" pos:end="155:31">i</name><operator pos:start="155:32" pos:end="155:32">)</operator></expr>)</condition> <block pos:start="155:35" pos:end="159:13">{<block_content pos:start="157:17" pos:end="157:62">

                <expr_stmt pos:start="157:17" pos:end="157:62"><expr pos:start="157:17" pos:end="157:61"><call pos:start="157:17" pos:end="157:61"><name pos:start="157:17" pos:end="157:31">GIC_SET_PENDING</name><argument_list pos:start="157:32" pos:end="157:61">(<argument pos:start="157:33" pos:end="157:39"><expr pos:start="157:33" pos:end="157:39"><name pos:start="157:33" pos:end="157:35">irq</name> <operator pos:start="157:37" pos:end="157:37">+</operator> <name pos:start="157:39" pos:end="157:39">i</name></expr></argument>, <argument pos:start="157:42" pos:end="157:60"><expr pos:start="157:42" pos:end="157:60"><call pos:start="157:42" pos:end="157:60"><name pos:start="157:42" pos:end="157:51">GIC_TARGET</name><argument_list pos:start="157:52" pos:end="157:60">(<argument pos:start="157:53" pos:end="157:59"><expr pos:start="157:53" pos:end="157:59"><name pos:start="157:53" pos:end="157:55">irq</name> <operator pos:start="157:57" pos:end="157:57">+</operator> <name pos:start="157:59" pos:end="157:59">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="163:7" pos:end="197:5">else if <condition pos:start="163:15" pos:end="163:30">(<expr pos:start="163:16" pos:end="163:29"><name pos:start="163:16" pos:end="163:21">offset</name> <operator pos:start="163:23" pos:end="163:23">&lt;</operator> <literal type="number" pos:start="163:25" pos:end="163:29">0x300</literal></expr>)</condition> <block pos:start="163:32" pos:end="197:5">{<block_content pos:start="167:9" pos:end="195:9">

        <comment type="block" pos:start="165:9" pos:end="165:39">/* Interrupt Clear Pending.  */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:50"><expr pos:start="167:9" pos:end="167:49"><name pos:start="167:9" pos:end="167:11">irq</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <operator pos:start="167:15" pos:end="167:15">(</operator><name pos:start="167:16" pos:end="167:21">offset</name> <operator pos:start="167:23" pos:end="167:23">-</operator> <literal type="number" pos:start="167:25" pos:end="167:29">0x280</literal><operator pos:start="167:30" pos:end="167:30">)</operator> <operator pos:start="167:32" pos:end="167:32">*</operator> <literal type="number" pos:start="167:34" pos:end="167:36">8</literal> <operator pos:start="167:36" pos:end="167:36">+</operator> <name pos:start="167:38" pos:end="167:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="171:25"><if pos:start="169:9" pos:end="171:25">if <condition pos:start="169:12" pos:end="169:30">(<expr pos:start="169:13" pos:end="169:29"><name pos:start="169:13" pos:end="169:15">irq</name> <operator pos:start="169:17" pos:end="169:18">&gt;=</operator> <name pos:start="169:20" pos:end="169:29"><name pos:start="169:20" pos:end="169:20">s</name><operator pos:start="169:21" pos:end="169:22">-&gt;</operator><name pos:start="169:23" pos:end="169:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="171:13" pos:end="171:25"><block_content pos:start="171:13" pos:end="171:25">

            <goto pos:start="171:13" pos:end="171:25">goto <name pos:start="171:18" pos:end="171:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="173:9" pos:end="177:9"><if pos:start="173:9" pos:end="177:9">if <condition pos:start="173:12" pos:end="173:30">(<expr pos:start="173:13" pos:end="173:29"><name pos:start="173:13" pos:end="173:15">irq</name> <operator pos:start="173:17" pos:end="173:17">&lt;</operator> <name pos:start="173:19" pos:end="173:29">GIC_NR_SGIS</name></expr>)</condition> <block pos:start="173:32" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:22">

            <expr_stmt pos:start="175:13" pos:end="175:22"><expr pos:start="175:13" pos:end="175:21"><name pos:start="175:13" pos:end="175:17">value</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <literal type="number" pos:start="175:21" pos:end="175:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="181:9" pos:end="195:9">for <control pos:start="181:13" pos:end="181:31">(<init pos:start="181:14" pos:end="181:19"><expr pos:start="181:14" pos:end="181:18"><name pos:start="181:14" pos:end="181:14">i</name> <operator pos:start="181:16" pos:end="181:16">=</operator> <literal type="number" pos:start="181:18" pos:end="181:18">0</literal></expr>;</init> <condition pos:start="181:21" pos:end="181:26"><expr pos:start="181:21" pos:end="181:25"><name pos:start="181:21" pos:end="181:21">i</name> <operator pos:start="181:23" pos:end="181:23">&lt;</operator> <literal type="number" pos:start="181:25" pos:end="181:25">8</literal></expr>;</condition> <incr pos:start="181:28" pos:end="181:30"><expr pos:start="181:28" pos:end="181:30"><name pos:start="181:28" pos:end="181:28">i</name><operator pos:start="181:29" pos:end="181:30">++</operator></expr></incr>)</control> <block pos:start="181:33" pos:end="195:9">{<block_content pos:start="189:13" pos:end="193:13">

            <comment type="block" pos:start="183:13" pos:end="187:35">/* ??? This currently clears the pending bit for all CPUs, even

               for per-CPU interrupts.  It's unclear whether this is the

               corect behavior.  */</comment>

            <if_stmt pos:start="189:13" pos:end="193:13"><if pos:start="189:13" pos:end="193:13">if <condition pos:start="189:16" pos:end="189:33">(<expr pos:start="189:17" pos:end="189:32"><name pos:start="189:17" pos:end="189:21">value</name> <operator pos:start="189:23" pos:end="189:23">&amp;</operator> <operator pos:start="189:25" pos:end="189:25">(</operator><literal type="number" pos:start="189:26" pos:end="189:26">1</literal> <operator pos:start="189:28" pos:end="189:29">&lt;&lt;</operator> <name pos:start="189:31" pos:end="189:31">i</name><operator pos:start="189:32" pos:end="189:32">)</operator></expr>)</condition> <block pos:start="189:35" pos:end="193:13">{<block_content pos:start="191:17" pos:end="191:57">

                <expr_stmt pos:start="191:17" pos:end="191:57"><expr pos:start="191:17" pos:end="191:56"><call pos:start="191:17" pos:end="191:56"><name pos:start="191:17" pos:end="191:33">GIC_CLEAR_PENDING</name><argument_list pos:start="191:34" pos:end="191:56">(<argument pos:start="191:35" pos:end="191:41"><expr pos:start="191:35" pos:end="191:41"><name pos:start="191:35" pos:end="191:37">irq</name> <operator pos:start="191:39" pos:end="191:39">+</operator> <name pos:start="191:41" pos:end="191:41">i</name></expr></argument>, <argument pos:start="191:44" pos:end="191:55"><expr pos:start="191:44" pos:end="191:55"><name pos:start="191:44" pos:end="191:55">ALL_CPU_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="197:7" pos:end="203:5">else if <condition pos:start="197:15" pos:end="197:30">(<expr pos:start="197:16" pos:end="197:29"><name pos:start="197:16" pos:end="197:21">offset</name> <operator pos:start="197:23" pos:end="197:23">&lt;</operator> <literal type="number" pos:start="197:25" pos:end="197:29">0x400</literal></expr>)</condition> <block pos:start="197:32" pos:end="203:5">{<block_content pos:start="201:9" pos:end="201:21">

        <comment type="block" pos:start="199:9" pos:end="199:32">/* Interrupt Active.  */</comment>

        <goto pos:start="201:9" pos:end="201:21">goto <name pos:start="201:14" pos:end="201:20">bad_reg</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="203:7" pos:end="215:5">else if <condition pos:start="203:15" pos:end="203:30">(<expr pos:start="203:16" pos:end="203:29"><name pos:start="203:16" pos:end="203:21">offset</name> <operator pos:start="203:23" pos:end="203:23">&lt;</operator> <literal type="number" pos:start="203:25" pos:end="203:29">0x800</literal></expr>)</condition> <block pos:start="203:32" pos:end="215:5">{<block_content pos:start="207:9" pos:end="213:45">

        <comment type="block" pos:start="205:9" pos:end="205:34">/* Interrupt Priority.  */</comment>

        <expr_stmt pos:start="207:9" pos:end="207:46"><expr pos:start="207:9" pos:end="207:45"><name pos:start="207:9" pos:end="207:11">irq</name> <operator pos:start="207:13" pos:end="207:13">=</operator> <operator pos:start="207:15" pos:end="207:15">(</operator><name pos:start="207:16" pos:end="207:21">offset</name> <operator pos:start="207:23" pos:end="207:23">-</operator> <literal type="number" pos:start="207:25" pos:end="207:29">0x400</literal><operator pos:start="207:30" pos:end="207:30">)</operator> <operator pos:start="207:32" pos:end="207:32">+</operator> <name pos:start="207:34" pos:end="207:45">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="209:9" pos:end="211:25"><if pos:start="209:9" pos:end="211:25">if <condition pos:start="209:12" pos:end="209:30">(<expr pos:start="209:13" pos:end="209:29"><name pos:start="209:13" pos:end="209:15">irq</name> <operator pos:start="209:17" pos:end="209:18">&gt;=</operator> <name pos:start="209:20" pos:end="209:29"><name pos:start="209:20" pos:end="209:20">s</name><operator pos:start="209:21" pos:end="209:22">-&gt;</operator><name pos:start="209:23" pos:end="209:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="211:13" pos:end="211:25"><block_content pos:start="211:13" pos:end="211:25">

            <goto pos:start="211:13" pos:end="211:25">goto <name pos:start="211:18" pos:end="211:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:45"><expr pos:start="213:9" pos:end="213:44"><call pos:start="213:9" pos:end="213:44"><name pos:start="213:9" pos:end="213:24">gic_set_priority</name><argument_list pos:start="213:25" pos:end="213:44">(<argument pos:start="213:26" pos:end="213:26"><expr pos:start="213:26" pos:end="213:26"><name pos:start="213:26" pos:end="213:26">s</name></expr></argument>, <argument pos:start="213:29" pos:end="213:31"><expr pos:start="213:29" pos:end="213:31"><name pos:start="213:29" pos:end="213:31">cpu</name></expr></argument>, <argument pos:start="213:34" pos:end="213:36"><expr pos:start="213:34" pos:end="213:36"><name pos:start="213:34" pos:end="213:36">irq</name></expr></argument>, <argument pos:start="213:39" pos:end="213:43"><expr pos:start="213:39" pos:end="213:43"><name pos:start="213:39" pos:end="213:43">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="215:7" pos:end="247:5">else if <condition pos:start="215:15" pos:end="215:30">(<expr pos:start="215:16" pos:end="215:29"><name pos:start="215:16" pos:end="215:21">offset</name> <operator pos:start="215:23" pos:end="215:23">&lt;</operator> <literal type="number" pos:start="215:25" pos:end="215:29">0xc00</literal></expr>)</condition> <block pos:start="215:32" pos:end="247:5">{<block_content pos:start="223:9" pos:end="245:9">

        <comment type="block" pos:start="217:9" pos:end="221:11">/* Interrupt CPU Target. RAZ/WI on uniprocessor GICs, with the

         * annoying exception of the 11MPCore's GIC.

         */</comment>

        <if_stmt pos:start="223:9" pos:end="245:9"><if pos:start="223:9" pos:end="245:9">if <condition pos:start="223:12" pos:end="223:59">(<expr pos:start="223:13" pos:end="223:58"><name pos:start="223:13" pos:end="223:22"><name pos:start="223:13" pos:end="223:13">s</name><operator pos:start="223:14" pos:end="223:15">-&gt;</operator><name pos:start="223:16" pos:end="223:22">num_cpu</name></name> <operator pos:start="223:24" pos:end="223:25">!=</operator> <literal type="number" pos:start="223:27" pos:end="223:27">1</literal> <operator pos:start="223:29" pos:end="223:30">||</operator> <name pos:start="223:32" pos:end="223:42"><name pos:start="223:32" pos:end="223:32">s</name><operator pos:start="223:33" pos:end="223:34">-&gt;</operator><name pos:start="223:35" pos:end="223:42">revision</name></name> <operator pos:start="223:44" pos:end="223:45">==</operator> <name pos:start="223:47" pos:end="223:58">REV_11MPCORE</name></expr>)</condition> <block pos:start="223:61" pos:end="245:9">{<block_content pos:start="225:13" pos:end="243:54">

            <expr_stmt pos:start="225:13" pos:end="225:50"><expr pos:start="225:13" pos:end="225:49"><name pos:start="225:13" pos:end="225:15">irq</name> <operator pos:start="225:17" pos:end="225:17">=</operator> <operator pos:start="225:19" pos:end="225:19">(</operator><name pos:start="225:20" pos:end="225:25">offset</name> <operator pos:start="225:27" pos:end="225:27">-</operator> <literal type="number" pos:start="225:29" pos:end="225:33">0x800</literal><operator pos:start="225:34" pos:end="225:34">)</operator> <operator pos:start="225:36" pos:end="225:36">+</operator> <name pos:start="225:38" pos:end="225:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

            <if_stmt pos:start="227:13" pos:end="231:13"><if pos:start="227:13" pos:end="231:13">if <condition pos:start="227:16" pos:end="227:34">(<expr pos:start="227:17" pos:end="227:33"><name pos:start="227:17" pos:end="227:19">irq</name> <operator pos:start="227:21" pos:end="227:22">&gt;=</operator> <name pos:start="227:24" pos:end="227:33"><name pos:start="227:24" pos:end="227:24">s</name><operator pos:start="227:25" pos:end="227:26">-&gt;</operator><name pos:start="227:27" pos:end="227:33">num_irq</name></name></expr>)</condition> <block pos:start="227:36" pos:end="231:13">{<block_content pos:start="229:17" pos:end="229:29">

                <goto pos:start="229:17" pos:end="229:29">goto <name pos:start="229:22" pos:end="229:28">bad_reg</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="233:13" pos:end="241:13"><if pos:start="233:13" pos:end="237:13">if <condition pos:start="233:16" pos:end="233:25">(<expr pos:start="233:17" pos:end="233:24"><name pos:start="233:17" pos:end="233:19">irq</name> <operator pos:start="233:21" pos:end="233:21">&lt;</operator> <literal type="number" pos:start="233:23" pos:end="233:24">29</literal></expr>)</condition> <block pos:start="233:27" pos:end="237:13">{<block_content pos:start="235:17" pos:end="235:26">

                <expr_stmt pos:start="235:17" pos:end="235:26"><expr pos:start="235:17" pos:end="235:25"><name pos:start="235:17" pos:end="235:21">value</name> <operator pos:start="235:23" pos:end="235:23">=</operator> <literal type="number" pos:start="235:25" pos:end="235:25">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="237:15" pos:end="241:13">else if <condition pos:start="237:23" pos:end="237:42">(<expr pos:start="237:24" pos:end="237:41"><name pos:start="237:24" pos:end="237:26">irq</name> <operator pos:start="237:28" pos:end="237:28">&lt;</operator> <name pos:start="237:30" pos:end="237:41">GIC_INTERNAL</name></expr>)</condition> <block pos:start="237:44" pos:end="241:13">{<block_content pos:start="239:17" pos:end="239:37">

                <expr_stmt pos:start="239:17" pos:end="239:37"><expr pos:start="239:17" pos:end="239:36"><name pos:start="239:17" pos:end="239:21">value</name> <operator pos:start="239:23" pos:end="239:23">=</operator> <name pos:start="239:25" pos:end="239:36">ALL_CPU_MASK</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:54"><expr pos:start="243:13" pos:end="243:53"><name pos:start="243:13" pos:end="243:30"><name pos:start="243:13" pos:end="243:13">s</name><operator pos:start="243:14" pos:end="243:15">-&gt;</operator><name pos:start="243:16" pos:end="243:25">irq_target</name><index pos:start="243:26" pos:end="243:30">[<expr pos:start="243:27" pos:end="243:29"><name pos:start="243:27" pos:end="243:29">irq</name></expr>]</index></name> <operator pos:start="243:32" pos:end="243:32">=</operator> <name pos:start="243:34" pos:end="243:38">value</name> <operator pos:start="243:40" pos:end="243:40">&amp;</operator> <name pos:start="243:42" pos:end="243:53">ALL_CPU_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="247:7" pos:end="289:5">else if <condition pos:start="247:15" pos:end="247:30">(<expr pos:start="247:16" pos:end="247:29"><name pos:start="247:16" pos:end="247:21">offset</name> <operator pos:start="247:23" pos:end="247:23">&lt;</operator> <literal type="number" pos:start="247:25" pos:end="247:29">0xf00</literal></expr>)</condition> <block pos:start="247:32" pos:end="289:5">{<block_content pos:start="251:9" pos:end="287:9">

        <comment type="block" pos:start="249:9" pos:end="249:39">/* Interrupt Configuration.  */</comment>

        <expr_stmt pos:start="251:9" pos:end="251:50"><expr pos:start="251:9" pos:end="251:49"><name pos:start="251:9" pos:end="251:11">irq</name> <operator pos:start="251:13" pos:end="251:13">=</operator> <operator pos:start="251:15" pos:end="251:15">(</operator><name pos:start="251:16" pos:end="251:21">offset</name> <operator pos:start="251:23" pos:end="251:23">-</operator> <literal type="number" pos:start="251:25" pos:end="251:29">0xc00</literal><operator pos:start="251:30" pos:end="251:30">)</operator> <operator pos:start="251:32" pos:end="251:32">*</operator> <literal type="number" pos:start="251:34" pos:end="251:36">4</literal> <operator pos:start="251:36" pos:end="251:36">+</operator> <name pos:start="251:38" pos:end="251:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="253:9" pos:end="255:25"><if pos:start="253:9" pos:end="255:25">if <condition pos:start="253:12" pos:end="253:30">(<expr pos:start="253:13" pos:end="253:29"><name pos:start="253:13" pos:end="253:15">irq</name> <operator pos:start="253:17" pos:end="253:18">&gt;=</operator> <name pos:start="253:20" pos:end="253:29"><name pos:start="253:20" pos:end="253:20">s</name><operator pos:start="253:21" pos:end="253:22">-&gt;</operator><name pos:start="253:23" pos:end="253:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="255:13" pos:end="255:25"><block_content pos:start="255:13" pos:end="255:25">

            <goto pos:start="255:13" pos:end="255:25">goto <name pos:start="255:18" pos:end="255:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="257:9" pos:end="259:26"><if pos:start="257:9" pos:end="259:26">if <condition pos:start="257:12" pos:end="257:30">(<expr pos:start="257:13" pos:end="257:29"><name pos:start="257:13" pos:end="257:15">irq</name> <operator pos:start="257:17" pos:end="257:17">&lt;</operator> <name pos:start="257:19" pos:end="257:29">GIC_NR_SGIS</name></expr>)</condition><block type="pseudo" pos:start="259:13" pos:end="259:26"><block_content pos:start="259:13" pos:end="259:26">

            <expr_stmt pos:start="259:13" pos:end="259:26"><expr pos:start="259:13" pos:end="259:25"><name pos:start="259:13" pos:end="259:17">value</name> <operator pos:start="259:19" pos:end="259:20">|=</operator> <literal type="number" pos:start="259:22" pos:end="259:25">0xaa</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for pos:start="261:9" pos:end="287:9">for <control pos:start="261:13" pos:end="261:31">(<init pos:start="261:14" pos:end="261:19"><expr pos:start="261:14" pos:end="261:18"><name pos:start="261:14" pos:end="261:14">i</name> <operator pos:start="261:16" pos:end="261:16">=</operator> <literal type="number" pos:start="261:18" pos:end="261:18">0</literal></expr>;</init> <condition pos:start="261:21" pos:end="261:26"><expr pos:start="261:21" pos:end="261:25"><name pos:start="261:21" pos:end="261:21">i</name> <operator pos:start="261:23" pos:end="261:23">&lt;</operator> <literal type="number" pos:start="261:25" pos:end="261:25">4</literal></expr>;</condition> <incr pos:start="261:28" pos:end="261:30"><expr pos:start="261:28" pos:end="261:30"><name pos:start="261:28" pos:end="261:28">i</name><operator pos:start="261:29" pos:end="261:30">++</operator></expr></incr>)</control> <block pos:start="261:33" pos:end="287:9">{<block_content pos:start="263:13" pos:end="285:13">

            <if_stmt pos:start="263:13" pos:end="275:13"><if pos:start="263:13" pos:end="275:13">if <condition pos:start="263:16" pos:end="263:71">(<expr pos:start="263:17" pos:end="263:70"><name pos:start="263:17" pos:end="263:27"><name pos:start="263:17" pos:end="263:17">s</name><operator pos:start="263:18" pos:end="263:19">-&gt;</operator><name pos:start="263:20" pos:end="263:27">revision</name></name> <operator pos:start="263:29" pos:end="263:30">==</operator> <name pos:start="263:32" pos:end="263:43">REV_11MPCORE</name> <operator pos:start="263:45" pos:end="263:46">||</operator> <name pos:start="263:48" pos:end="263:58"><name pos:start="263:48" pos:end="263:48">s</name><operator pos:start="263:49" pos:end="263:50">-&gt;</operator><name pos:start="263:51" pos:end="263:58">revision</name></name> <operator pos:start="263:60" pos:end="263:61">==</operator> <name pos:start="263:63" pos:end="263:70">REV_NVIC</name></expr>)</condition> <block pos:start="263:73" pos:end="275:13">{<block_content pos:start="265:17" pos:end="273:17">

                <if_stmt pos:start="265:17" pos:end="273:17"><if pos:start="265:17" pos:end="269:17">if <condition pos:start="265:20" pos:end="265:43">(<expr pos:start="265:21" pos:end="265:42"><name pos:start="265:21" pos:end="265:25">value</name> <operator pos:start="265:27" pos:end="265:27">&amp;</operator> <operator pos:start="265:29" pos:end="265:29">(</operator><literal type="number" pos:start="265:30" pos:end="265:30">1</literal> <operator pos:start="265:32" pos:end="265:33">&lt;&lt;</operator> <operator pos:start="265:35" pos:end="265:35">(</operator><name pos:start="265:36" pos:end="265:36">i</name> <operator pos:start="265:38" pos:end="265:38">*</operator> <literal type="number" pos:start="265:40" pos:end="265:40">2</literal><operator pos:start="265:41" pos:end="265:41">)</operator><operator pos:start="265:42" pos:end="265:42">)</operator></expr>)</condition> <block pos:start="265:45" pos:end="269:17">{<block_content pos:start="267:21" pos:end="267:43">

                    <expr_stmt pos:start="267:21" pos:end="267:43"><expr pos:start="267:21" pos:end="267:42"><call pos:start="267:21" pos:end="267:42"><name pos:start="267:21" pos:end="267:33">GIC_SET_MODEL</name><argument_list pos:start="267:34" pos:end="267:42">(<argument pos:start="267:35" pos:end="267:41"><expr pos:start="267:35" pos:end="267:41"><name pos:start="267:35" pos:end="267:37">irq</name> <operator pos:start="267:39" pos:end="267:39">+</operator> <name pos:start="267:41" pos:end="267:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="269:19" pos:end="273:17">else <block pos:start="269:24" pos:end="273:17">{<block_content pos:start="271:21" pos:end="271:45">

                    <expr_stmt pos:start="271:21" pos:end="271:45"><expr pos:start="271:21" pos:end="271:44"><call pos:start="271:21" pos:end="271:44"><name pos:start="271:21" pos:end="271:35">GIC_CLEAR_MODEL</name><argument_list pos:start="271:36" pos:end="271:44">(<argument pos:start="271:37" pos:end="271:43"><expr pos:start="271:37" pos:end="271:43"><name pos:start="271:37" pos:end="271:39">irq</name> <operator pos:start="271:41" pos:end="271:41">+</operator> <name pos:start="271:43" pos:end="271:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="277:13" pos:end="285:13"><if pos:start="277:13" pos:end="281:13">if <condition pos:start="277:16" pos:end="277:39">(<expr pos:start="277:17" pos:end="277:38"><name pos:start="277:17" pos:end="277:21">value</name> <operator pos:start="277:23" pos:end="277:23">&amp;</operator> <operator pos:start="277:25" pos:end="277:25">(</operator><literal type="number" pos:start="277:26" pos:end="277:26">2</literal> <operator pos:start="277:28" pos:end="277:29">&lt;&lt;</operator> <operator pos:start="277:31" pos:end="277:31">(</operator><name pos:start="277:32" pos:end="277:32">i</name> <operator pos:start="277:34" pos:end="277:34">*</operator> <literal type="number" pos:start="277:36" pos:end="277:36">2</literal><operator pos:start="277:37" pos:end="277:37">)</operator><operator pos:start="277:38" pos:end="277:38">)</operator></expr>)</condition> <block pos:start="277:41" pos:end="281:13">{<block_content pos:start="279:17" pos:end="279:46">

                <expr_stmt pos:start="279:17" pos:end="279:46"><expr pos:start="279:17" pos:end="279:45"><call pos:start="279:17" pos:end="279:45"><name pos:start="279:17" pos:end="279:36">GIC_SET_EDGE_TRIGGER</name><argument_list pos:start="279:37" pos:end="279:45">(<argument pos:start="279:38" pos:end="279:44"><expr pos:start="279:38" pos:end="279:44"><name pos:start="279:38" pos:end="279:40">irq</name> <operator pos:start="279:42" pos:end="279:42">+</operator> <name pos:start="279:44" pos:end="279:44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="281:15" pos:end="285:13">else <block pos:start="281:20" pos:end="285:13">{<block_content pos:start="283:17" pos:end="283:48">

                <expr_stmt pos:start="283:17" pos:end="283:48"><expr pos:start="283:17" pos:end="283:47"><call pos:start="283:17" pos:end="283:47"><name pos:start="283:17" pos:end="283:38">GIC_CLEAR_EDGE_TRIGGER</name><argument_list pos:start="283:39" pos:end="283:47">(<argument pos:start="283:40" pos:end="283:46"><expr pos:start="283:40" pos:end="283:46"><name pos:start="283:40" pos:end="283:42">irq</name> <operator pos:start="283:44" pos:end="283:44">+</operator> <name pos:start="283:46" pos:end="283:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="289:7" pos:end="295:5">else if <condition pos:start="289:15" pos:end="289:30">(<expr pos:start="289:16" pos:end="289:29"><name pos:start="289:16" pos:end="289:21">offset</name> <operator pos:start="289:23" pos:end="289:23">&lt;</operator> <literal type="number" pos:start="289:25" pos:end="289:29">0xf10</literal></expr>)</condition> <block pos:start="289:32" pos:end="295:5">{<block_content pos:start="293:9" pos:end="293:21">

        <comment type="block" pos:start="291:9" pos:end="291:55">/* 0xf00 is only handled for 32-bit writes.  */</comment>

        <goto pos:start="293:9" pos:end="293:21">goto <name pos:start="293:14" pos:end="293:20">bad_reg</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="295:7" pos:end="317:5">else if <condition pos:start="295:15" pos:end="295:30">(<expr pos:start="295:16" pos:end="295:29"><name pos:start="295:16" pos:end="295:21">offset</name> <operator pos:start="295:23" pos:end="295:23">&lt;</operator> <literal type="number" pos:start="295:25" pos:end="295:29">0xf20</literal></expr>)</condition> <block pos:start="295:32" pos:end="317:5">{<block_content pos:start="299:9" pos:end="315:9">

        <comment type="block" pos:start="297:9" pos:end="297:29">/* GICD_CPENDSGIRn */</comment>

        <if_stmt pos:start="299:9" pos:end="303:9"><if pos:start="299:9" pos:end="303:9">if <condition pos:start="299:12" pos:end="299:67">(<expr pos:start="299:13" pos:end="299:66"><name pos:start="299:13" pos:end="299:23"><name pos:start="299:13" pos:end="299:13">s</name><operator pos:start="299:14" pos:end="299:15">-&gt;</operator><name pos:start="299:16" pos:end="299:23">revision</name></name> <operator pos:start="299:25" pos:end="299:26">==</operator> <name pos:start="299:28" pos:end="299:39">REV_11MPCORE</name> <operator pos:start="299:41" pos:end="299:42">||</operator> <name pos:start="299:44" pos:end="299:54"><name pos:start="299:44" pos:end="299:44">s</name><operator pos:start="299:45" pos:end="299:46">-&gt;</operator><name pos:start="299:47" pos:end="299:54">revision</name></name> <operator pos:start="299:56" pos:end="299:57">==</operator> <name pos:start="299:59" pos:end="299:66">REV_NVIC</name></expr>)</condition> <block pos:start="299:69" pos:end="303:9">{<block_content pos:start="301:13" pos:end="301:25">

            <goto pos:start="301:13" pos:end="301:25">goto <name pos:start="301:18" pos:end="301:24">bad_reg</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:31"><expr pos:start="305:9" pos:end="305:30"><name pos:start="305:9" pos:end="305:11">irq</name> <operator pos:start="305:13" pos:end="305:13">=</operator> <operator pos:start="305:15" pos:end="305:15">(</operator><name pos:start="305:16" pos:end="305:21">offset</name> <operator pos:start="305:23" pos:end="305:23">-</operator> <literal type="number" pos:start="305:25" pos:end="305:29">0xf10</literal><operator pos:start="305:30" pos:end="305:30">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="309:9" pos:end="309:43"><expr pos:start="309:9" pos:end="309:42"><name pos:start="309:9" pos:end="309:32"><name pos:start="309:9" pos:end="309:9">s</name><operator pos:start="309:10" pos:end="309:11">-&gt;</operator><name pos:start="309:12" pos:end="309:22">sgi_pending</name><index pos:start="309:23" pos:end="309:27">[<expr pos:start="309:24" pos:end="309:26"><name pos:start="309:24" pos:end="309:26">irq</name></expr>]</index><index pos:start="309:28" pos:end="309:32">[<expr pos:start="309:29" pos:end="309:31"><name pos:start="309:29" pos:end="309:31">cpu</name></expr>]</index></name> <operator pos:start="309:34" pos:end="309:35">&amp;=</operator> <operator pos:start="309:37" pos:end="309:37">~</operator><name pos:start="309:38" pos:end="309:42">value</name></expr>;</expr_stmt>

        <if_stmt pos:start="311:9" pos:end="315:9"><if pos:start="311:9" pos:end="315:9">if <condition pos:start="311:12" pos:end="311:42">(<expr pos:start="311:13" pos:end="311:41"><name pos:start="311:13" pos:end="311:36"><name pos:start="311:13" pos:end="311:13">s</name><operator pos:start="311:14" pos:end="311:15">-&gt;</operator><name pos:start="311:16" pos:end="311:26">sgi_pending</name><index pos:start="311:27" pos:end="311:31">[<expr pos:start="311:28" pos:end="311:30"><name pos:start="311:28" pos:end="311:30">irq</name></expr>]</index><index pos:start="311:32" pos:end="311:36">[<expr pos:start="311:33" pos:end="311:35"><name pos:start="311:33" pos:end="311:35">cpu</name></expr>]</index></name> <operator pos:start="311:38" pos:end="311:39">==</operator> <literal type="number" pos:start="311:41" pos:end="311:41">0</literal></expr>)</condition> <block pos:start="311:44" pos:end="315:9">{<block_content pos:start="313:13" pos:end="313:45">

            <expr_stmt pos:start="313:13" pos:end="313:45"><expr pos:start="313:13" pos:end="313:44"><call pos:start="313:13" pos:end="313:44"><name pos:start="313:13" pos:end="313:29">GIC_CLEAR_PENDING</name><argument_list pos:start="313:30" pos:end="313:44">(<argument pos:start="313:31" pos:end="313:33"><expr pos:start="313:31" pos:end="313:33"><name pos:start="313:31" pos:end="313:33">irq</name></expr></argument>, <argument pos:start="313:36" pos:end="313:43"><expr pos:start="313:36" pos:end="313:43"><literal type="number" pos:start="313:36" pos:end="313:36">1</literal> <operator pos:start="313:38" pos:end="313:39">&lt;&lt;</operator> <name pos:start="313:41" pos:end="313:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="317:7" pos:end="335:5">else if <condition pos:start="317:15" pos:end="317:30">(<expr pos:start="317:16" pos:end="317:29"><name pos:start="317:16" pos:end="317:21">offset</name> <operator pos:start="317:23" pos:end="317:23">&lt;</operator> <literal type="number" pos:start="317:25" pos:end="317:29">0xf30</literal></expr>)</condition> <block pos:start="317:32" pos:end="335:5">{<block_content pos:start="321:9" pos:end="333:42">

        <comment type="block" pos:start="319:9" pos:end="319:29">/* GICD_SPENDSGIRn */</comment>

        <if_stmt pos:start="321:9" pos:end="325:9"><if pos:start="321:9" pos:end="325:9">if <condition pos:start="321:12" pos:end="321:67">(<expr pos:start="321:13" pos:end="321:66"><name pos:start="321:13" pos:end="321:23"><name pos:start="321:13" pos:end="321:13">s</name><operator pos:start="321:14" pos:end="321:15">-&gt;</operator><name pos:start="321:16" pos:end="321:23">revision</name></name> <operator pos:start="321:25" pos:end="321:26">==</operator> <name pos:start="321:28" pos:end="321:39">REV_11MPCORE</name> <operator pos:start="321:41" pos:end="321:42">||</operator> <name pos:start="321:44" pos:end="321:54"><name pos:start="321:44" pos:end="321:44">s</name><operator pos:start="321:45" pos:end="321:46">-&gt;</operator><name pos:start="321:47" pos:end="321:54">revision</name></name> <operator pos:start="321:56" pos:end="321:57">==</operator> <name pos:start="321:59" pos:end="321:66">REV_NVIC</name></expr>)</condition> <block pos:start="321:69" pos:end="325:9">{<block_content pos:start="323:13" pos:end="323:25">

            <goto pos:start="323:13" pos:end="323:25">goto <name pos:start="323:18" pos:end="323:24">bad_reg</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:31"><expr pos:start="327:9" pos:end="327:30"><name pos:start="327:9" pos:end="327:11">irq</name> <operator pos:start="327:13" pos:end="327:13">=</operator> <operator pos:start="327:15" pos:end="327:15">(</operator><name pos:start="327:16" pos:end="327:21">offset</name> <operator pos:start="327:23" pos:end="327:23">-</operator> <literal type="number" pos:start="327:25" pos:end="327:29">0xf20</literal><operator pos:start="327:30" pos:end="327:30">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="331:9" pos:end="331:39"><expr pos:start="331:9" pos:end="331:38"><call pos:start="331:9" pos:end="331:38"><name pos:start="331:9" pos:end="331:23">GIC_SET_PENDING</name><argument_list pos:start="331:24" pos:end="331:38">(<argument pos:start="331:25" pos:end="331:27"><expr pos:start="331:25" pos:end="331:27"><name pos:start="331:25" pos:end="331:27">irq</name></expr></argument>, <argument pos:start="331:30" pos:end="331:37"><expr pos:start="331:30" pos:end="331:37"><literal type="number" pos:start="331:30" pos:end="331:30">1</literal> <operator pos:start="331:32" pos:end="331:33">&lt;&lt;</operator> <name pos:start="331:35" pos:end="331:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="333:9" pos:end="333:42"><expr pos:start="333:9" pos:end="333:41"><name pos:start="333:9" pos:end="333:32"><name pos:start="333:9" pos:end="333:9">s</name><operator pos:start="333:10" pos:end="333:11">-&gt;</operator><name pos:start="333:12" pos:end="333:22">sgi_pending</name><index pos:start="333:23" pos:end="333:27">[<expr pos:start="333:24" pos:end="333:26"><name pos:start="333:24" pos:end="333:26">irq</name></expr>]</index><index pos:start="333:28" pos:end="333:32">[<expr pos:start="333:29" pos:end="333:31"><name pos:start="333:29" pos:end="333:31">cpu</name></expr>]</index></name> <operator pos:start="333:34" pos:end="333:35">|=</operator> <name pos:start="333:37" pos:end="333:41">value</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="335:7" pos:end="339:5">else <block pos:start="335:12" pos:end="339:5">{<block_content pos:start="337:9" pos:end="337:21">

        <goto pos:start="337:9" pos:end="337:21">goto <name pos:start="337:14" pos:end="337:20">bad_reg</name>;</goto>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:18"><expr pos:start="341:5" pos:end="341:17"><call pos:start="341:5" pos:end="341:17"><name pos:start="341:5" pos:end="341:14">gic_update</name><argument_list pos:start="341:15" pos:end="341:17">(<argument pos:start="341:16" pos:end="341:16"><expr pos:start="341:16" pos:end="341:16"><name pos:start="341:16" pos:end="341:16">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="343:5" pos:end="343:11">return;</return>

<label pos:start="345:1" pos:end="345:8"><name pos:start="345:1" pos:end="345:7">bad_reg</name>:</label>

    <expr_stmt pos:start="347:5" pos:end="349:67"><expr pos:start="347:5" pos:end="349:66"><call pos:start="347:5" pos:end="349:66"><name pos:start="347:5" pos:end="347:17">qemu_log_mask</name><argument_list pos:start="347:18" pos:end="349:66">(<argument pos:start="347:19" pos:end="347:33"><expr pos:start="347:19" pos:end="347:33"><name pos:start="347:19" pos:end="347:33">LOG_GUEST_ERROR</name></expr></argument>,

                  <argument pos:start="349:19" pos:end="349:52"><expr pos:start="349:19" pos:end="349:52"><literal type="string" pos:start="349:19" pos:end="349:52">"gic_dist_writeb: Bad offset %x\n"</literal></expr></argument>, <argument pos:start="349:55" pos:end="349:65"><expr pos:start="349:55" pos:end="349:65"><operator pos:start="349:55" pos:end="349:55">(</operator><name pos:start="349:56" pos:end="349:58">int</name><operator pos:start="349:59" pos:end="349:59">)</operator><name pos:start="349:60" pos:end="349:65">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
