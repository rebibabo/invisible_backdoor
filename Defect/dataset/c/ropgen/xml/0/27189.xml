<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27189.c" pos:tabs="8"><function pos:start="1:1" pos:end="277:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">sdhci_do_adma</name><parameter_list pos:start="1:26" pos:end="1:40">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:36">SDHCIState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="277:1">{<block_content pos:start="5:5" pos:end="275:80">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:18">n</name></decl>, <decl pos:start="5:21" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:21" pos:end="5:25">begin</name></decl>, <decl pos:start="5:28" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:28" pos:end="5:33">length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:51"><type pos:start="7:5" pos:end="7:18"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:18">uint16_t</name></type> <name pos:start="7:20" pos:end="7:29">block_size</name> <init pos:start="7:31" pos:end="7:51">= <expr pos:start="7:33" pos:end="7:51"><name pos:start="7:33" pos:end="7:42"><name pos:start="7:33" pos:end="7:33">s</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:42">blksize</name></name> <operator pos:start="7:44" pos:end="7:44">&amp;</operator> <literal type="number" pos:start="7:46" pos:end="7:51">0x0fff</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">ADMADescr</name></type> <name pos:start="9:15" pos:end="9:18">dscr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="267:5">for <control pos:start="15:9" pos:end="15:51">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:46"><expr pos:start="15:17" pos:end="15:45"><name pos:start="15:17" pos:end="15:17">i</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <name pos:start="15:21" pos:end="15:45">SDHC_ADMA_DESCS_PER_DELAY</name></expr>;</condition> <incr pos:start="15:48" pos:end="15:50"><expr pos:start="15:48" pos:end="15:50"><operator pos:start="15:48" pos:end="15:49">++</operator><name pos:start="15:50" pos:end="15:50">i</name></expr></incr>)</control> <block pos:start="15:53" pos:end="267:5">{<block_content pos:start="17:9" pos:end="263:9">

        <expr_stmt pos:start="17:9" pos:end="17:52"><expr pos:start="17:9" pos:end="17:51"><name pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:18">admaerr</name></name> <operator pos:start="17:20" pos:end="17:21">&amp;=</operator> <operator pos:start="17:23" pos:end="17:23">~</operator><name pos:start="17:24" pos:end="17:51">SDHC_ADMAERR_LENGTH_MISMATCH</name></expr>;</expr_stmt>



        <expr_stmt pos:start="21:9" pos:end="21:39"><expr pos:start="21:9" pos:end="21:38"><call pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:28">get_adma_description</name><argument_list pos:start="21:29" pos:end="21:38">(<argument pos:start="21:30" pos:end="21:30"><expr pos:start="21:30" pos:end="21:30"><name pos:start="21:30" pos:end="21:30">s</name></expr></argument>, <argument pos:start="21:33" pos:end="21:37"><expr pos:start="21:33" pos:end="21:37"><operator pos:start="21:33" pos:end="21:33">&amp;</operator><name pos:start="21:34" pos:end="21:37">dscr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="25:51"><expr pos:start="23:9" pos:end="25:50"><call pos:start="23:9" pos:end="25:50"><name pos:start="23:9" pos:end="23:17">DPRINT_L2</name><argument_list pos:start="23:18" pos:end="25:50">(<argument pos:start="23:19" pos:end="23:73"><expr pos:start="23:19" pos:end="23:73"><literal type="string" pos:start="23:19" pos:end="23:36">"ADMA loop: addr="</literal> <name pos:start="23:38" pos:end="23:51">TARGET_FMT_plx</name> <literal type="string" pos:start="23:53" pos:end="23:73">", len=%d, attr=%x\n"</literal></expr></argument>,

                <argument pos:start="25:17" pos:end="25:25"><expr pos:start="25:17" pos:end="25:25"><name pos:start="25:17" pos:end="25:25"><name pos:start="25:17" pos:end="25:20">dscr</name><operator pos:start="25:21" pos:end="25:21">.</operator><name pos:start="25:22" pos:end="25:25">addr</name></name></expr></argument>, <argument pos:start="25:28" pos:end="25:38"><expr pos:start="25:28" pos:end="25:38"><name pos:start="25:28" pos:end="25:38"><name pos:start="25:28" pos:end="25:31">dscr</name><operator pos:start="25:32" pos:end="25:32">.</operator><name pos:start="25:33" pos:end="25:38">length</name></name></expr></argument>, <argument pos:start="25:41" pos:end="25:49"><expr pos:start="25:41" pos:end="25:49"><name pos:start="25:41" pos:end="25:49"><name pos:start="25:41" pos:end="25:44">dscr</name><operator pos:start="25:45" pos:end="25:45">.</operator><name pos:start="25:46" pos:end="25:49">attr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="29:9" pos:end="55:9"><if pos:start="29:9" pos:end="55:9">if <condition pos:start="29:12" pos:end="29:52">(<expr pos:start="29:13" pos:end="29:51"><operator pos:start="29:13" pos:end="29:13">(</operator><name pos:start="29:14" pos:end="29:22"><name pos:start="29:14" pos:end="29:17">dscr</name><operator pos:start="29:18" pos:end="29:18">.</operator><name pos:start="29:19" pos:end="29:22">attr</name></name> <operator pos:start="29:24" pos:end="29:24">&amp;</operator> <name pos:start="29:26" pos:end="29:45">SDHC_ADMA_ATTR_VALID</name><operator pos:start="29:46" pos:end="29:46">)</operator> <operator pos:start="29:48" pos:end="29:49">==</operator> <literal type="number" pos:start="29:51" pos:end="29:51">0</literal></expr>)</condition> <block pos:start="29:54" pos:end="55:9">{<block_content pos:start="33:13" pos:end="53:19">

            <comment type="block" pos:start="31:13" pos:end="31:62">/* Indicate that error occurred in ST_FDS state */</comment>

            <expr_stmt pos:start="33:13" pos:end="33:51"><expr pos:start="33:13" pos:end="33:50"><name pos:start="33:13" pos:end="33:22"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:22">admaerr</name></name> <operator pos:start="33:24" pos:end="33:25">&amp;=</operator> <operator pos:start="33:27" pos:end="33:27">~</operator><name pos:start="33:28" pos:end="33:50">SDHC_ADMAERR_STATE_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:52"><expr pos:start="35:13" pos:end="35:51"><name pos:start="35:13" pos:end="35:22"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:22">admaerr</name></name> <operator pos:start="35:24" pos:end="35:25">|=</operator> <name pos:start="35:27" pos:end="35:51">SDHC_ADMAERR_STATE_ST_FDS</name></expr>;</expr_stmt>



            <comment type="block" pos:start="39:13" pos:end="39:47">/* Generate ADMA error interrupt */</comment>

            <if_stmt pos:start="41:13" pos:end="47:13"><if pos:start="41:13" pos:end="47:13">if <condition pos:start="41:16" pos:end="41:52">(<expr pos:start="41:17" pos:end="41:51"><name pos:start="41:17" pos:end="41:30"><name pos:start="41:17" pos:end="41:17">s</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:30">errintstsen</name></name> <operator pos:start="41:32" pos:end="41:32">&amp;</operator> <name pos:start="41:34" pos:end="41:51">SDHC_EISEN_ADMAERR</name></expr>)</condition> <block pos:start="41:54" pos:end="47:13">{<block_content pos:start="43:17" pos:end="45:45">

                <expr_stmt pos:start="43:17" pos:end="43:49"><expr pos:start="43:17" pos:end="43:48"><name pos:start="43:17" pos:end="43:28"><name pos:start="43:17" pos:end="43:17">s</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:28">errintsts</name></name> <operator pos:start="43:30" pos:end="43:31">|=</operator> <name pos:start="43:33" pos:end="43:48">SDHC_EIS_ADMAERR</name></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:45"><expr pos:start="45:17" pos:end="45:44"><name pos:start="45:17" pos:end="45:28"><name pos:start="45:17" pos:end="45:17">s</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:28">norintsts</name></name> <operator pos:start="45:30" pos:end="45:31">|=</operator> <name pos:start="45:33" pos:end="45:44">SDHC_NIS_ERR</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="51:13" pos:end="51:32"><expr pos:start="51:13" pos:end="51:31"><call pos:start="51:13" pos:end="51:31"><name pos:start="51:13" pos:end="51:28">sdhci_update_irq</name><argument_list pos:start="51:29" pos:end="51:31">(<argument pos:start="51:30" pos:end="51:30"><expr pos:start="51:30" pos:end="51:30"><name pos:start="51:30" pos:end="51:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:51"><expr pos:start="59:9" pos:end="59:50"><name pos:start="59:9" pos:end="59:14">length</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <ternary pos:start="59:18" pos:end="59:50"><condition pos:start="59:18" pos:end="59:30"><expr pos:start="59:18" pos:end="59:28"><name pos:start="59:18" pos:end="59:28"><name pos:start="59:18" pos:end="59:21">dscr</name><operator pos:start="59:22" pos:end="59:22">.</operator><name pos:start="59:23" pos:end="59:28">length</name></name></expr> ?</condition><then pos:start="59:32" pos:end="59:42"> <expr pos:start="59:32" pos:end="59:42"><name pos:start="59:32" pos:end="59:42"><name pos:start="59:32" pos:end="59:35">dscr</name><operator pos:start="59:36" pos:end="59:36">.</operator><name pos:start="59:37" pos:end="59:42">length</name></name></expr> </then><else pos:start="59:44" pos:end="59:50">: <expr pos:start="59:46" pos:end="59:50"><literal type="number" pos:start="59:46" pos:end="59:50">65536</literal></expr></else></ternary></expr>;</expr_stmt>



        <switch pos:start="63:9" pos:end="201:9">switch <condition pos:start="63:16" pos:end="63:52">(<expr pos:start="63:17" pos:end="63:51"><name pos:start="63:17" pos:end="63:25"><name pos:start="63:17" pos:end="63:20">dscr</name><operator pos:start="63:21" pos:end="63:21">.</operator><name pos:start="63:22" pos:end="63:25">attr</name></name> <operator pos:start="63:27" pos:end="63:27">&amp;</operator> <name pos:start="63:29" pos:end="63:51">SDHC_ADMA_ATTR_ACT_MASK</name></expr>)</condition> <block pos:start="63:54" pos:end="201:9">{<block_content pos:start="65:9" pos:end="199:18">

        <case pos:start="65:9" pos:end="65:37">case <expr pos:start="65:14" pos:end="65:36"><name pos:start="65:14" pos:end="65:36">SDHC_ADMA_ATTR_ACT_TRAN</name></expr>:</case>  <comment type="block" pos:start="65:40" pos:end="65:58">/* data transfer */</comment>



            <if_stmt pos:start="69:13" pos:end="181:13"><if pos:start="69:13" pos:end="127:13">if <condition pos:start="69:16" pos:end="69:43">(<expr pos:start="69:17" pos:end="69:42"><name pos:start="69:17" pos:end="69:25"><name pos:start="69:17" pos:end="69:17">s</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:25">trnmod</name></name> <operator pos:start="69:27" pos:end="69:27">&amp;</operator> <name pos:start="69:29" pos:end="69:42">SDHC_TRNS_READ</name></expr>)</condition> <block pos:start="69:45" pos:end="127:13">{<block_content pos:start="71:17" pos:end="125:17">

                <while pos:start="71:17" pos:end="125:17">while <condition pos:start="71:23" pos:end="71:30">(<expr pos:start="71:24" pos:end="71:29"><name pos:start="71:24" pos:end="71:29">length</name></expr>)</condition> <block pos:start="71:32" pos:end="125:17">{<block_content pos:start="73:21" pos:end="123:21">

                    <if_stmt pos:start="73:21" pos:end="81:21"><if pos:start="73:21" pos:end="81:21">if <condition pos:start="73:24" pos:end="73:43">(<expr pos:start="73:25" pos:end="73:42"><name pos:start="73:25" pos:end="73:37"><name pos:start="73:25" pos:end="73:25">s</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:37">data_count</name></name> <operator pos:start="73:39" pos:end="73:40">==</operator> <literal type="number" pos:start="73:42" pos:end="73:42">0</literal></expr>)</condition> <block pos:start="73:45" pos:end="81:21">{<block_content pos:start="75:25" pos:end="79:25">

                        <for pos:start="75:25" pos:end="79:25">for <control pos:start="75:29" pos:end="75:56">(<init pos:start="75:30" pos:end="75:35"><expr pos:start="75:30" pos:end="75:34"><name pos:start="75:30" pos:end="75:30">n</name> <operator pos:start="75:32" pos:end="75:32">=</operator> <literal type="number" pos:start="75:34" pos:end="75:34">0</literal></expr>;</init> <condition pos:start="75:37" pos:end="75:51"><expr pos:start="75:37" pos:end="75:50"><name pos:start="75:37" pos:end="75:37">n</name> <operator pos:start="75:39" pos:end="75:39">&lt;</operator> <name pos:start="75:41" pos:end="75:50">block_size</name></expr>;</condition> <incr pos:start="75:53" pos:end="75:55"><expr pos:start="75:53" pos:end="75:55"><name pos:start="75:53" pos:end="75:53">n</name><operator pos:start="75:54" pos:end="75:55">++</operator></expr></incr>)</control> <block pos:start="75:58" pos:end="79:25">{<block_content pos:start="77:29" pos:end="77:70">

                            <expr_stmt pos:start="77:29" pos:end="77:70"><expr pos:start="77:29" pos:end="77:69"><name pos:start="77:29" pos:end="77:45"><name pos:start="77:29" pos:end="77:29">s</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:42">fifo_buffer</name><index pos:start="77:43" pos:end="77:45">[<expr pos:start="77:44" pos:end="77:44"><name pos:start="77:44" pos:end="77:44">n</name></expr>]</index></name> <operator pos:start="77:47" pos:end="77:47">=</operator> <call pos:start="77:49" pos:end="77:69"><name pos:start="77:49" pos:end="77:60">sd_read_data</name><argument_list pos:start="77:61" pos:end="77:69">(<argument pos:start="77:62" pos:end="77:68"><expr pos:start="77:62" pos:end="77:68"><name pos:start="77:62" pos:end="77:68"><name pos:start="77:62" pos:end="77:62">s</name><operator pos:start="77:63" pos:end="77:64">-&gt;</operator><name pos:start="77:65" pos:end="77:68">card</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="83:21" pos:end="83:42"><expr pos:start="83:21" pos:end="83:41"><name pos:start="83:21" pos:end="83:25">begin</name> <operator pos:start="83:27" pos:end="83:27">=</operator> <name pos:start="83:29" pos:end="83:41"><name pos:start="83:29" pos:end="83:29">s</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:41">data_count</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="85:21" pos:end="97:21"><if pos:start="85:21" pos:end="91:22">if <condition pos:start="85:24" pos:end="85:54">(<expr pos:start="85:25" pos:end="85:53"><operator pos:start="85:25" pos:end="85:25">(</operator><name pos:start="85:26" pos:end="85:31">length</name> <operator pos:start="85:33" pos:end="85:33">+</operator> <name pos:start="85:35" pos:end="85:39">begin</name><operator pos:start="85:40" pos:end="85:40">)</operator> <operator pos:start="85:42" pos:end="85:42">&lt;</operator> <name pos:start="85:44" pos:end="85:53">block_size</name></expr>)</condition> <block pos:start="85:56" pos:end="91:22">{<block_content pos:start="87:25" pos:end="89:35">

                        <expr_stmt pos:start="87:25" pos:end="87:55"><expr pos:start="87:25" pos:end="87:54"><name pos:start="87:25" pos:end="87:37"><name pos:start="87:25" pos:end="87:25">s</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:37">data_count</name></name> <operator pos:start="87:39" pos:end="87:39">=</operator> <name pos:start="87:41" pos:end="87:46">length</name> <operator pos:start="87:48" pos:end="87:48">+</operator> <name pos:start="87:50" pos:end="87:54">begin</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="89:25" pos:end="89:35"><expr pos:start="89:25" pos:end="89:34"><name pos:start="89:25" pos:end="89:30">length</name> <operator pos:start="89:32" pos:end="89:32">=</operator> <literal type="number" pos:start="89:34" pos:end="89:34">0</literal></expr>;</expr_stmt>

                     </block_content>}</block></if> <else pos:start="91:24" pos:end="97:21">else <block pos:start="91:29" pos:end="97:21">{<block_content pos:start="93:25" pos:end="95:53">

                        <expr_stmt pos:start="93:25" pos:end="93:51"><expr pos:start="93:25" pos:end="93:50"><name pos:start="93:25" pos:end="93:37"><name pos:start="93:25" pos:end="93:25">s</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:37">data_count</name></name> <operator pos:start="93:39" pos:end="93:39">=</operator> <name pos:start="93:41" pos:end="93:50">block_size</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="95:25" pos:end="95:53"><expr pos:start="95:25" pos:end="95:52"><name pos:start="95:25" pos:end="95:30">length</name> <operator pos:start="95:32" pos:end="95:33">-=</operator> <name pos:start="95:35" pos:end="95:44">block_size</name> <operator pos:start="95:46" pos:end="95:46">-</operator> <name pos:start="95:48" pos:end="95:52">begin</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="99:21" pos:end="103:60"><expr pos:start="99:21" pos:end="103:59"><call pos:start="99:21" pos:end="103:59"><name pos:start="99:21" pos:end="99:36">dma_memory_write</name><argument_list pos:start="99:37" pos:end="103:59">(<argument pos:start="99:38" pos:end="99:58"><expr pos:start="99:38" pos:end="99:58"><operator pos:start="99:38" pos:end="99:38">&amp;</operator><name pos:start="99:39" pos:end="99:58">address_space_memory</name></expr></argument>, <argument pos:start="99:61" pos:end="99:69"><expr pos:start="99:61" pos:end="99:69"><name pos:start="99:61" pos:end="99:69"><name pos:start="99:61" pos:end="99:64">dscr</name><operator pos:start="99:65" pos:end="99:65">.</operator><name pos:start="99:66" pos:end="99:69">addr</name></name></expr></argument>,

                                     <argument pos:start="101:38" pos:end="101:59"><expr pos:start="101:38" pos:end="101:59"><operator pos:start="101:38" pos:end="101:38">&amp;</operator><name pos:start="101:39" pos:end="101:59"><name pos:start="101:39" pos:end="101:39">s</name><operator pos:start="101:40" pos:end="101:41">-&gt;</operator><name pos:start="101:42" pos:end="101:52">fifo_buffer</name><index pos:start="101:53" pos:end="101:59">[<expr pos:start="101:54" pos:end="101:58"><name pos:start="101:54" pos:end="101:58">begin</name></expr>]</index></name></expr></argument>,

                                     <argument pos:start="103:38" pos:end="103:58"><expr pos:start="103:38" pos:end="103:58"><name pos:start="103:38" pos:end="103:50"><name pos:start="103:38" pos:end="103:38">s</name><operator pos:start="103:39" pos:end="103:40">-&gt;</operator><name pos:start="103:41" pos:end="103:50">data_count</name></name> <operator pos:start="103:52" pos:end="103:52">-</operator> <name pos:start="103:54" pos:end="103:58">begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:55"><expr pos:start="105:21" pos:end="105:54"><name pos:start="105:21" pos:end="105:29"><name pos:start="105:21" pos:end="105:24">dscr</name><operator pos:start="105:25" pos:end="105:25">.</operator><name pos:start="105:26" pos:end="105:29">addr</name></name> <operator pos:start="105:31" pos:end="105:32">+=</operator> <name pos:start="105:34" pos:end="105:46"><name pos:start="105:34" pos:end="105:34">s</name><operator pos:start="105:35" pos:end="105:36">-&gt;</operator><name pos:start="105:37" pos:end="105:46">data_count</name></name> <operator pos:start="105:48" pos:end="105:48">-</operator> <name pos:start="105:50" pos:end="105:54">begin</name></expr>;</expr_stmt>

                    <if_stmt pos:start="107:21" pos:end="123:21"><if pos:start="107:21" pos:end="123:21">if <condition pos:start="107:24" pos:end="107:52">(<expr pos:start="107:25" pos:end="107:51"><name pos:start="107:25" pos:end="107:37"><name pos:start="107:25" pos:end="107:25">s</name><operator pos:start="107:26" pos:end="107:27">-&gt;</operator><name pos:start="107:28" pos:end="107:37">data_count</name></name> <operator pos:start="107:39" pos:end="107:40">==</operator> <name pos:start="107:42" pos:end="107:51">block_size</name></expr>)</condition> <block pos:start="107:54" pos:end="123:21">{<block_content pos:start="109:25" pos:end="121:25">

                        <expr_stmt pos:start="109:25" pos:end="109:42"><expr pos:start="109:25" pos:end="109:41"><name pos:start="109:25" pos:end="109:37"><name pos:start="109:25" pos:end="109:25">s</name><operator pos:start="109:26" pos:end="109:27">-&gt;</operator><name pos:start="109:28" pos:end="109:37">data_count</name></name> <operator pos:start="109:39" pos:end="109:39">=</operator> <literal type="number" pos:start="109:41" pos:end="109:41">0</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="111:25" pos:end="121:25"><if pos:start="111:25" pos:end="121:25">if <condition pos:start="111:28" pos:end="111:61">(<expr pos:start="111:29" pos:end="111:60"><name pos:start="111:29" pos:end="111:37"><name pos:start="111:29" pos:end="111:29">s</name><operator pos:start="111:30" pos:end="111:31">-&gt;</operator><name pos:start="111:32" pos:end="111:37">trnmod</name></name> <operator pos:start="111:39" pos:end="111:39">&amp;</operator> <name pos:start="111:41" pos:end="111:60">SDHC_TRNS_BLK_CNT_EN</name></expr>)</condition> <block pos:start="111:63" pos:end="121:25">{<block_content pos:start="113:29" pos:end="119:29">

                            <expr_stmt pos:start="113:29" pos:end="113:40"><expr pos:start="113:29" pos:end="113:39"><name pos:start="113:29" pos:end="113:37"><name pos:start="113:29" pos:end="113:29">s</name><operator pos:start="113:30" pos:end="113:31">-&gt;</operator><name pos:start="113:32" pos:end="113:37">blkcnt</name></name><operator pos:start="113:38" pos:end="113:39">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="115:29" pos:end="119:29"><if pos:start="115:29" pos:end="119:29">if <condition pos:start="115:32" pos:end="115:47">(<expr pos:start="115:33" pos:end="115:46"><name pos:start="115:33" pos:end="115:41"><name pos:start="115:33" pos:end="115:33">s</name><operator pos:start="115:34" pos:end="115:35">-&gt;</operator><name pos:start="115:36" pos:end="115:41">blkcnt</name></name> <operator pos:start="115:43" pos:end="115:44">==</operator> <literal type="number" pos:start="115:46" pos:end="115:46">0</literal></expr>)</condition> <block pos:start="115:49" pos:end="119:29">{<block_content pos:start="117:33" pos:end="117:38">

                                <break pos:start="117:33" pos:end="117:38">break;</break>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></while>

            </block_content>}</block></if> <else pos:start="127:15" pos:end="181:13">else <block pos:start="127:20" pos:end="181:13">{<block_content pos:start="129:17" pos:end="179:17">

                <while pos:start="129:17" pos:end="179:17">while <condition pos:start="129:23" pos:end="129:30">(<expr pos:start="129:24" pos:end="129:29"><name pos:start="129:24" pos:end="129:29">length</name></expr>)</condition> <block pos:start="129:32" pos:end="179:17">{<block_content pos:start="131:21" pos:end="177:21">

                    <expr_stmt pos:start="131:21" pos:end="131:42"><expr pos:start="131:21" pos:end="131:41"><name pos:start="131:21" pos:end="131:25">begin</name> <operator pos:start="131:27" pos:end="131:27">=</operator> <name pos:start="131:29" pos:end="131:41"><name pos:start="131:29" pos:end="131:29">s</name><operator pos:start="131:30" pos:end="131:31">-&gt;</operator><name pos:start="131:32" pos:end="131:41">data_count</name></name></expr>;</expr_stmt>

                    <if_stmt pos:start="133:21" pos:end="145:21"><if pos:start="133:21" pos:end="139:22">if <condition pos:start="133:24" pos:end="133:54">(<expr pos:start="133:25" pos:end="133:53"><operator pos:start="133:25" pos:end="133:25">(</operator><name pos:start="133:26" pos:end="133:31">length</name> <operator pos:start="133:33" pos:end="133:33">+</operator> <name pos:start="133:35" pos:end="133:39">begin</name><operator pos:start="133:40" pos:end="133:40">)</operator> <operator pos:start="133:42" pos:end="133:42">&lt;</operator> <name pos:start="133:44" pos:end="133:53">block_size</name></expr>)</condition> <block pos:start="133:56" pos:end="139:22">{<block_content pos:start="135:25" pos:end="137:35">

                        <expr_stmt pos:start="135:25" pos:end="135:55"><expr pos:start="135:25" pos:end="135:54"><name pos:start="135:25" pos:end="135:37"><name pos:start="135:25" pos:end="135:25">s</name><operator pos:start="135:26" pos:end="135:27">-&gt;</operator><name pos:start="135:28" pos:end="135:37">data_count</name></name> <operator pos:start="135:39" pos:end="135:39">=</operator> <name pos:start="135:41" pos:end="135:46">length</name> <operator pos:start="135:48" pos:end="135:48">+</operator> <name pos:start="135:50" pos:end="135:54">begin</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="137:25" pos:end="137:35"><expr pos:start="137:25" pos:end="137:34"><name pos:start="137:25" pos:end="137:30">length</name> <operator pos:start="137:32" pos:end="137:32">=</operator> <literal type="number" pos:start="137:34" pos:end="137:34">0</literal></expr>;</expr_stmt>

                     </block_content>}</block></if> <else pos:start="139:24" pos:end="145:21">else <block pos:start="139:29" pos:end="145:21">{<block_content pos:start="141:25" pos:end="143:53">

                        <expr_stmt pos:start="141:25" pos:end="141:51"><expr pos:start="141:25" pos:end="141:50"><name pos:start="141:25" pos:end="141:37"><name pos:start="141:25" pos:end="141:25">s</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:37">data_count</name></name> <operator pos:start="141:39" pos:end="141:39">=</operator> <name pos:start="141:41" pos:end="141:50">block_size</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="143:25" pos:end="143:53"><expr pos:start="143:25" pos:end="143:52"><name pos:start="143:25" pos:end="143:30">length</name> <operator pos:start="143:32" pos:end="143:33">-=</operator> <name pos:start="143:35" pos:end="143:44">block_size</name> <operator pos:start="143:46" pos:end="143:46">-</operator> <name pos:start="143:48" pos:end="143:52">begin</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="147:21" pos:end="151:59"><expr pos:start="147:21" pos:end="151:58"><call pos:start="147:21" pos:end="151:58"><name pos:start="147:21" pos:end="147:35">dma_memory_read</name><argument_list pos:start="147:36" pos:end="151:58">(<argument pos:start="147:37" pos:end="147:57"><expr pos:start="147:37" pos:end="147:57"><operator pos:start="147:37" pos:end="147:37">&amp;</operator><name pos:start="147:38" pos:end="147:57">address_space_memory</name></expr></argument>, <argument pos:start="147:60" pos:end="147:68"><expr pos:start="147:60" pos:end="147:68"><name pos:start="147:60" pos:end="147:68"><name pos:start="147:60" pos:end="147:63">dscr</name><operator pos:start="147:64" pos:end="147:64">.</operator><name pos:start="147:65" pos:end="147:68">addr</name></name></expr></argument>,

                                    <argument pos:start="149:37" pos:end="149:58"><expr pos:start="149:37" pos:end="149:58"><operator pos:start="149:37" pos:end="149:37">&amp;</operator><name pos:start="149:38" pos:end="149:58"><name pos:start="149:38" pos:end="149:38">s</name><operator pos:start="149:39" pos:end="149:40">-&gt;</operator><name pos:start="149:41" pos:end="149:51">fifo_buffer</name><index pos:start="149:52" pos:end="149:58">[<expr pos:start="149:53" pos:end="149:57"><name pos:start="149:53" pos:end="149:57">begin</name></expr>]</index></name></expr></argument>,

                                    <argument pos:start="151:37" pos:end="151:57"><expr pos:start="151:37" pos:end="151:57"><name pos:start="151:37" pos:end="151:49"><name pos:start="151:37" pos:end="151:37">s</name><operator pos:start="151:38" pos:end="151:39">-&gt;</operator><name pos:start="151:40" pos:end="151:49">data_count</name></name> <operator pos:start="151:51" pos:end="151:51">-</operator> <name pos:start="151:53" pos:end="151:57">begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="153:21" pos:end="153:55"><expr pos:start="153:21" pos:end="153:54"><name pos:start="153:21" pos:end="153:29"><name pos:start="153:21" pos:end="153:24">dscr</name><operator pos:start="153:25" pos:end="153:25">.</operator><name pos:start="153:26" pos:end="153:29">addr</name></name> <operator pos:start="153:31" pos:end="153:32">+=</operator> <name pos:start="153:34" pos:end="153:46"><name pos:start="153:34" pos:end="153:34">s</name><operator pos:start="153:35" pos:end="153:36">-&gt;</operator><name pos:start="153:37" pos:end="153:46">data_count</name></name> <operator pos:start="153:48" pos:end="153:48">-</operator> <name pos:start="153:50" pos:end="153:54">begin</name></expr>;</expr_stmt>

                    <if_stmt pos:start="155:21" pos:end="177:21"><if pos:start="155:21" pos:end="177:21">if <condition pos:start="155:24" pos:end="155:52">(<expr pos:start="155:25" pos:end="155:51"><name pos:start="155:25" pos:end="155:37"><name pos:start="155:25" pos:end="155:25">s</name><operator pos:start="155:26" pos:end="155:27">-&gt;</operator><name pos:start="155:28" pos:end="155:37">data_count</name></name> <operator pos:start="155:39" pos:end="155:40">==</operator> <name pos:start="155:42" pos:end="155:51">block_size</name></expr>)</condition> <block pos:start="155:54" pos:end="177:21">{<block_content pos:start="157:25" pos:end="175:25">

                        <for pos:start="157:25" pos:end="161:25">for <control pos:start="157:29" pos:end="157:56">(<init pos:start="157:30" pos:end="157:35"><expr pos:start="157:30" pos:end="157:34"><name pos:start="157:30" pos:end="157:30">n</name> <operator pos:start="157:32" pos:end="157:32">=</operator> <literal type="number" pos:start="157:34" pos:end="157:34">0</literal></expr>;</init> <condition pos:start="157:37" pos:end="157:51"><expr pos:start="157:37" pos:end="157:50"><name pos:start="157:37" pos:end="157:37">n</name> <operator pos:start="157:39" pos:end="157:39">&lt;</operator> <name pos:start="157:41" pos:end="157:50">block_size</name></expr>;</condition> <incr pos:start="157:53" pos:end="157:55"><expr pos:start="157:53" pos:end="157:55"><name pos:start="157:53" pos:end="157:53">n</name><operator pos:start="157:54" pos:end="157:55">++</operator></expr></incr>)</control> <block pos:start="157:58" pos:end="161:25">{<block_content pos:start="159:29" pos:end="159:70">

                            <expr_stmt pos:start="159:29" pos:end="159:70"><expr pos:start="159:29" pos:end="159:69"><call pos:start="159:29" pos:end="159:69"><name pos:start="159:29" pos:end="159:41">sd_write_data</name><argument_list pos:start="159:42" pos:end="159:69">(<argument pos:start="159:43" pos:end="159:49"><expr pos:start="159:43" pos:end="159:49"><name pos:start="159:43" pos:end="159:49"><name pos:start="159:43" pos:end="159:43">s</name><operator pos:start="159:44" pos:end="159:45">-&gt;</operator><name pos:start="159:46" pos:end="159:49">card</name></name></expr></argument>, <argument pos:start="159:52" pos:end="159:68"><expr pos:start="159:52" pos:end="159:68"><name pos:start="159:52" pos:end="159:68"><name pos:start="159:52" pos:end="159:52">s</name><operator pos:start="159:53" pos:end="159:54">-&gt;</operator><name pos:start="159:55" pos:end="159:65">fifo_buffer</name><index pos:start="159:66" pos:end="159:68">[<expr pos:start="159:67" pos:end="159:67"><name pos:start="159:67" pos:end="159:67">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="163:25" pos:end="163:42"><expr pos:start="163:25" pos:end="163:41"><name pos:start="163:25" pos:end="163:37"><name pos:start="163:25" pos:end="163:25">s</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:37">data_count</name></name> <operator pos:start="163:39" pos:end="163:39">=</operator> <literal type="number" pos:start="163:41" pos:end="163:41">0</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="165:25" pos:end="175:25"><if pos:start="165:25" pos:end="175:25">if <condition pos:start="165:28" pos:end="165:61">(<expr pos:start="165:29" pos:end="165:60"><name pos:start="165:29" pos:end="165:37"><name pos:start="165:29" pos:end="165:29">s</name><operator pos:start="165:30" pos:end="165:31">-&gt;</operator><name pos:start="165:32" pos:end="165:37">trnmod</name></name> <operator pos:start="165:39" pos:end="165:39">&amp;</operator> <name pos:start="165:41" pos:end="165:60">SDHC_TRNS_BLK_CNT_EN</name></expr>)</condition> <block pos:start="165:63" pos:end="175:25">{<block_content pos:start="167:29" pos:end="173:29">

                            <expr_stmt pos:start="167:29" pos:end="167:40"><expr pos:start="167:29" pos:end="167:39"><name pos:start="167:29" pos:end="167:37"><name pos:start="167:29" pos:end="167:29">s</name><operator pos:start="167:30" pos:end="167:31">-&gt;</operator><name pos:start="167:32" pos:end="167:37">blkcnt</name></name><operator pos:start="167:38" pos:end="167:39">--</operator></expr>;</expr_stmt>

                            <if_stmt pos:start="169:29" pos:end="173:29"><if pos:start="169:29" pos:end="173:29">if <condition pos:start="169:32" pos:end="169:47">(<expr pos:start="169:33" pos:end="169:46"><name pos:start="169:33" pos:end="169:41"><name pos:start="169:33" pos:end="169:33">s</name><operator pos:start="169:34" pos:end="169:35">-&gt;</operator><name pos:start="169:36" pos:end="169:41">blkcnt</name></name> <operator pos:start="169:43" pos:end="169:44">==</operator> <literal type="number" pos:start="169:46" pos:end="169:46">0</literal></expr>)</condition> <block pos:start="169:49" pos:end="173:29">{<block_content pos:start="171:33" pos:end="171:38">

                                <break pos:start="171:33" pos:end="171:38">break;</break>

                            </block_content>}</block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></while>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:40"><expr pos:start="183:13" pos:end="183:39"><name pos:start="183:13" pos:end="183:26"><name pos:start="183:13" pos:end="183:13">s</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:26">admasysaddr</name></name> <operator pos:start="183:28" pos:end="183:29">+=</operator> <name pos:start="183:31" pos:end="183:39"><name pos:start="183:31" pos:end="183:34">dscr</name><operator pos:start="183:35" pos:end="183:35">.</operator><name pos:start="183:36" pos:end="183:39">incr</name></name></expr>;</expr_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        <case pos:start="187:9" pos:end="187:37">case <expr pos:start="187:14" pos:end="187:36"><name pos:start="187:14" pos:end="187:36">SDHC_ADMA_ATTR_ACT_LINK</name></expr>:</case>   <comment type="block" pos:start="187:41" pos:end="187:75">/* link to next descriptor table */</comment>

            <expr_stmt pos:start="189:13" pos:end="189:39"><expr pos:start="189:13" pos:end="189:38"><name pos:start="189:13" pos:end="189:26"><name pos:start="189:13" pos:end="189:13">s</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:26">admasysaddr</name></name> <operator pos:start="189:28" pos:end="189:28">=</operator> <name pos:start="189:30" pos:end="189:38"><name pos:start="189:30" pos:end="189:33">dscr</name><operator pos:start="189:34" pos:end="189:34">.</operator><name pos:start="189:35" pos:end="189:38">addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:72"><expr pos:start="191:13" pos:end="191:71"><call pos:start="191:13" pos:end="191:71"><name pos:start="191:13" pos:end="191:21">DPRINT_L1</name><argument_list pos:start="191:22" pos:end="191:71">(<argument pos:start="191:23" pos:end="191:54"><expr pos:start="191:23" pos:end="191:54"><literal type="string" pos:start="191:23" pos:end="191:54">"ADMA link: admasysaddr=0x%lx\n"</literal></expr></argument>, <argument pos:start="191:57" pos:end="191:70"><expr pos:start="191:57" pos:end="191:70"><name pos:start="191:57" pos:end="191:70"><name pos:start="191:57" pos:end="191:57">s</name><operator pos:start="191:58" pos:end="191:59">-&gt;</operator><name pos:start="191:60" pos:end="191:70">admasysaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="193:13" pos:end="193:18">break;</break>

        <default pos:start="195:9" pos:end="195:16">default:</default>

            <expr_stmt pos:start="197:13" pos:end="197:40"><expr pos:start="197:13" pos:end="197:39"><name pos:start="197:13" pos:end="197:26"><name pos:start="197:13" pos:end="197:13">s</name><operator pos:start="197:14" pos:end="197:15">-&gt;</operator><name pos:start="197:16" pos:end="197:26">admasysaddr</name></name> <operator pos:start="197:28" pos:end="197:29">+=</operator> <name pos:start="197:31" pos:end="197:39"><name pos:start="197:31" pos:end="197:34">dscr</name><operator pos:start="197:35" pos:end="197:35">.</operator><name pos:start="197:36" pos:end="197:39">incr</name></name></expr>;</expr_stmt>

            <break pos:start="199:13" pos:end="199:18">break;</break>

        </block_content>}</block></switch>



        <if_stmt pos:start="205:9" pos:end="219:9"><if pos:start="205:9" pos:end="219:9">if <condition pos:start="205:12" pos:end="205:43">(<expr pos:start="205:13" pos:end="205:42"><name pos:start="205:13" pos:end="205:21"><name pos:start="205:13" pos:end="205:16">dscr</name><operator pos:start="205:17" pos:end="205:17">.</operator><name pos:start="205:18" pos:end="205:21">attr</name></name> <operator pos:start="205:23" pos:end="205:23">&amp;</operator> <name pos:start="205:25" pos:end="205:42">SDHC_ADMA_ATTR_INT</name></expr>)</condition> <block pos:start="205:45" pos:end="219:9">{<block_content pos:start="207:13" pos:end="217:32">

            <expr_stmt pos:start="207:13" pos:end="207:77"><expr pos:start="207:13" pos:end="207:76"><call pos:start="207:13" pos:end="207:76"><name pos:start="207:13" pos:end="207:21">DPRINT_L1</name><argument_list pos:start="207:22" pos:end="207:76">(<argument pos:start="207:23" pos:end="207:59"><expr pos:start="207:23" pos:end="207:59"><literal type="string" pos:start="207:23" pos:end="207:59">"ADMA interrupt: admasysaddr=0x%lx\n"</literal></expr></argument>, <argument pos:start="207:62" pos:end="207:75"><expr pos:start="207:62" pos:end="207:75"><name pos:start="207:62" pos:end="207:75"><name pos:start="207:62" pos:end="207:62">s</name><operator pos:start="207:63" pos:end="207:64">-&gt;</operator><name pos:start="207:65" pos:end="207:75">admasysaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="209:13" pos:end="213:13"><if pos:start="209:13" pos:end="213:13">if <condition pos:start="209:16" pos:end="209:48">(<expr pos:start="209:17" pos:end="209:47"><name pos:start="209:17" pos:end="209:30"><name pos:start="209:17" pos:end="209:17">s</name><operator pos:start="209:18" pos:end="209:19">-&gt;</operator><name pos:start="209:20" pos:end="209:30">norintstsen</name></name> <operator pos:start="209:32" pos:end="209:32">&amp;</operator> <name pos:start="209:34" pos:end="209:47">SDHC_NISEN_DMA</name></expr>)</condition> <block pos:start="209:50" pos:end="213:13">{<block_content pos:start="211:17" pos:end="211:45">

                <expr_stmt pos:start="211:17" pos:end="211:45"><expr pos:start="211:17" pos:end="211:44"><name pos:start="211:17" pos:end="211:28"><name pos:start="211:17" pos:end="211:17">s</name><operator pos:start="211:18" pos:end="211:19">-&gt;</operator><name pos:start="211:20" pos:end="211:28">norintsts</name></name> <operator pos:start="211:30" pos:end="211:31">|=</operator> <name pos:start="211:33" pos:end="211:44">SDHC_NIS_DMA</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="217:13" pos:end="217:32"><expr pos:start="217:13" pos:end="217:31"><call pos:start="217:13" pos:end="217:31"><name pos:start="217:13" pos:end="217:28">sdhci_update_irq</name><argument_list pos:start="217:29" pos:end="217:31">(<argument pos:start="217:30" pos:end="217:30"><expr pos:start="217:30" pos:end="217:30"><name pos:start="217:30" pos:end="217:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="223:9" pos:end="223:73">/* ADMA transfer terminates if blkcnt == 0 or by END attribute */</comment>

        <if_stmt pos:start="225:9" pos:end="263:9"><if pos:start="225:9" pos:end="263:9">if <condition pos:start="225:12" pos:end="227:74">(<expr pos:start="225:13" pos:end="227:73"><operator pos:start="225:13" pos:end="225:13">(</operator><operator pos:start="225:14" pos:end="225:14">(</operator><name pos:start="225:15" pos:end="225:23"><name pos:start="225:15" pos:end="225:15">s</name><operator pos:start="225:16" pos:end="225:17">-&gt;</operator><name pos:start="225:18" pos:end="225:23">trnmod</name></name> <operator pos:start="225:25" pos:end="225:25">&amp;</operator> <name pos:start="225:27" pos:end="225:46">SDHC_TRNS_BLK_CNT_EN</name><operator pos:start="225:47" pos:end="225:47">)</operator> <operator pos:start="225:49" pos:end="225:50">&amp;&amp;</operator>

                    <operator pos:start="227:21" pos:end="227:21">(</operator><name pos:start="227:22" pos:end="227:30"><name pos:start="227:22" pos:end="227:22">s</name><operator pos:start="227:23" pos:end="227:24">-&gt;</operator><name pos:start="227:25" pos:end="227:30">blkcnt</name></name> <operator pos:start="227:32" pos:end="227:33">==</operator> <literal type="number" pos:start="227:35" pos:end="227:35">0</literal><operator pos:start="227:36" pos:end="227:36">)</operator><operator pos:start="227:37" pos:end="227:37">)</operator> <operator pos:start="227:39" pos:end="227:40">||</operator> <operator pos:start="227:42" pos:end="227:42">(</operator><name pos:start="227:43" pos:end="227:51"><name pos:start="227:43" pos:end="227:46">dscr</name><operator pos:start="227:47" pos:end="227:47">.</operator><name pos:start="227:48" pos:end="227:51">attr</name></name> <operator pos:start="227:53" pos:end="227:53">&amp;</operator> <name pos:start="227:55" pos:end="227:72">SDHC_ADMA_ATTR_END</name><operator pos:start="227:73" pos:end="227:73">)</operator></expr>)</condition> <block pos:start="227:76" pos:end="263:9">{<block_content pos:start="229:13" pos:end="261:19">

            <expr_stmt pos:start="229:13" pos:end="229:51"><expr pos:start="229:13" pos:end="229:50"><call pos:start="229:13" pos:end="229:50"><name pos:start="229:13" pos:end="229:21">DPRINT_L2</name><argument_list pos:start="229:22" pos:end="229:50">(<argument pos:start="229:23" pos:end="229:49"><expr pos:start="229:23" pos:end="229:49"><literal type="string" pos:start="229:23" pos:end="229:49">"ADMA transfer completed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="231:13" pos:end="257:13"><if pos:start="231:13" pos:end="257:13">if <condition pos:start="231:16" pos:end="235:32">(<expr pos:start="231:17" pos:end="235:31"><name pos:start="231:17" pos:end="231:22">length</name> <operator pos:start="231:24" pos:end="231:25">||</operator> <operator pos:start="231:27" pos:end="231:27">(</operator><operator pos:start="231:28" pos:end="231:28">(</operator><name pos:start="231:29" pos:end="231:37"><name pos:start="231:29" pos:end="231:32">dscr</name><operator pos:start="231:33" pos:end="231:33">.</operator><name pos:start="231:34" pos:end="231:37">attr</name></name> <operator pos:start="231:39" pos:end="231:39">&amp;</operator> <name pos:start="231:41" pos:end="231:58">SDHC_ADMA_ATTR_END</name><operator pos:start="231:59" pos:end="231:59">)</operator> <operator pos:start="231:61" pos:end="231:62">&amp;&amp;</operator>

                <operator pos:start="233:17" pos:end="233:17">(</operator><name pos:start="233:18" pos:end="233:26"><name pos:start="233:18" pos:end="233:18">s</name><operator pos:start="233:19" pos:end="233:20">-&gt;</operator><name pos:start="233:21" pos:end="233:26">trnmod</name></name> <operator pos:start="233:28" pos:end="233:28">&amp;</operator> <name pos:start="233:30" pos:end="233:49">SDHC_TRNS_BLK_CNT_EN</name><operator pos:start="233:50" pos:end="233:50">)</operator> <operator pos:start="233:52" pos:end="233:53">&amp;&amp;</operator>

                <name pos:start="235:17" pos:end="235:25"><name pos:start="235:17" pos:end="235:17">s</name><operator pos:start="235:18" pos:end="235:19">-&gt;</operator><name pos:start="235:20" pos:end="235:25">blkcnt</name></name> <operator pos:start="235:27" pos:end="235:28">!=</operator> <literal type="number" pos:start="235:30" pos:end="235:30">0</literal><operator pos:start="235:31" pos:end="235:31">)</operator></expr>)</condition> <block pos:start="235:34" pos:end="257:13">{<block_content pos:start="237:17" pos:end="255:36">

                <expr_stmt pos:start="237:17" pos:end="237:63"><expr pos:start="237:17" pos:end="237:62"><call pos:start="237:17" pos:end="237:62"><name pos:start="237:17" pos:end="237:24">ERRPRINT</name><argument_list pos:start="237:25" pos:end="237:62">(<argument pos:start="237:26" pos:end="237:61"><expr pos:start="237:26" pos:end="237:61"><literal type="string" pos:start="237:26" pos:end="237:61">"SD/MMC host ADMA length mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="241:50"><expr pos:start="239:17" pos:end="241:49"><name pos:start="239:17" pos:end="239:26"><name pos:start="239:17" pos:end="239:17">s</name><operator pos:start="239:18" pos:end="239:19">-&gt;</operator><name pos:start="239:20" pos:end="239:26">admaerr</name></name> <operator pos:start="239:28" pos:end="239:29">|=</operator> <name pos:start="239:31" pos:end="239:58">SDHC_ADMAERR_LENGTH_MISMATCH</name> <operator pos:start="239:60" pos:end="239:60">|</operator>

                        <name pos:start="241:25" pos:end="241:49">SDHC_ADMAERR_STATE_ST_TFR</name></expr>;</expr_stmt>

                <if_stmt pos:start="243:17" pos:end="251:17"><if pos:start="243:17" pos:end="251:17">if <condition pos:start="243:20" pos:end="243:56">(<expr pos:start="243:21" pos:end="243:55"><name pos:start="243:21" pos:end="243:34"><name pos:start="243:21" pos:end="243:21">s</name><operator pos:start="243:22" pos:end="243:23">-&gt;</operator><name pos:start="243:24" pos:end="243:34">errintstsen</name></name> <operator pos:start="243:36" pos:end="243:36">&amp;</operator> <name pos:start="243:38" pos:end="243:55">SDHC_EISEN_ADMAERR</name></expr>)</condition> <block pos:start="243:58" pos:end="251:17">{<block_content pos:start="245:21" pos:end="249:49">

                    <expr_stmt pos:start="245:21" pos:end="245:54"><expr pos:start="245:21" pos:end="245:53"><call pos:start="245:21" pos:end="245:53"><name pos:start="245:21" pos:end="245:28">ERRPRINT</name><argument_list pos:start="245:29" pos:end="245:53">(<argument pos:start="245:30" pos:end="245:52"><expr pos:start="245:30" pos:end="245:52"><literal type="string" pos:start="245:30" pos:end="245:52">"Set ADMA error flag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="247:21" pos:end="247:53"><expr pos:start="247:21" pos:end="247:52"><name pos:start="247:21" pos:end="247:32"><name pos:start="247:21" pos:end="247:21">s</name><operator pos:start="247:22" pos:end="247:23">-&gt;</operator><name pos:start="247:24" pos:end="247:32">errintsts</name></name> <operator pos:start="247:34" pos:end="247:35">|=</operator> <name pos:start="247:37" pos:end="247:52">SDHC_EIS_ADMAERR</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="249:21" pos:end="249:49"><expr pos:start="249:21" pos:end="249:48"><name pos:start="249:21" pos:end="249:32"><name pos:start="249:21" pos:end="249:21">s</name><operator pos:start="249:22" pos:end="249:23">-&gt;</operator><name pos:start="249:24" pos:end="249:32">norintsts</name></name> <operator pos:start="249:34" pos:end="249:35">|=</operator> <name pos:start="249:37" pos:end="249:48">SDHC_NIS_ERR</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="255:17" pos:end="255:36"><expr pos:start="255:17" pos:end="255:35"><call pos:start="255:17" pos:end="255:35"><name pos:start="255:17" pos:end="255:32">sdhci_update_irq</name><argument_list pos:start="255:33" pos:end="255:35">(<argument pos:start="255:34" pos:end="255:34"><expr pos:start="255:34" pos:end="255:34"><name pos:start="255:34" pos:end="255:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:53"><expr pos:start="259:13" pos:end="259:52"><call pos:start="259:13" pos:end="259:30"><name pos:start="259:13" pos:end="259:27">SDHCI_GET_CLASS</name><argument_list pos:start="259:28" pos:end="259:30">(<argument pos:start="259:29" pos:end="259:29"><expr pos:start="259:29" pos:end="259:29"><name pos:start="259:29" pos:end="259:29">s</name></expr></argument>)</argument_list></call><operator pos:start="259:31" pos:end="259:32">-&gt;</operator><call pos:start="259:33" pos:end="259:52"><name pos:start="259:33" pos:end="259:49">end_data_transfer</name><argument_list pos:start="259:50" pos:end="259:52">(<argument pos:start="259:51" pos:end="259:51"><expr pos:start="259:51" pos:end="259:51"><name pos:start="259:51" pos:end="259:51">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="261:13" pos:end="261:19">return;</return>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block></for>



    <comment type="block" pos:start="271:5" pos:end="271:67">/* we have unfinished business - reschedule to continue ADMA */</comment>

    <expr_stmt pos:start="273:5" pos:end="275:80"><expr pos:start="273:5" pos:end="275:79"><call pos:start="273:5" pos:end="275:79"><name pos:start="273:5" pos:end="273:13">timer_mod</name><argument_list pos:start="273:14" pos:end="275:79">(<argument pos:start="273:15" pos:end="273:31"><expr pos:start="273:15" pos:end="273:31"><name pos:start="273:15" pos:end="273:31"><name pos:start="273:15" pos:end="273:15">s</name><operator pos:start="273:16" pos:end="273:17">-&gt;</operator><name pos:start="273:18" pos:end="273:31">transfer_timer</name></name></expr></argument>,

                   <argument pos:start="275:20" pos:end="275:78"><expr pos:start="275:20" pos:end="275:78"><call pos:start="275:20" pos:end="275:56"><name pos:start="275:20" pos:end="275:36">qemu_clock_get_ns</name><argument_list pos:start="275:37" pos:end="275:56">(<argument pos:start="275:38" pos:end="275:55"><expr pos:start="275:38" pos:end="275:55"><name pos:start="275:38" pos:end="275:55">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call> <operator pos:start="275:58" pos:end="275:58">+</operator> <name pos:start="275:60" pos:end="275:78">SDHC_TRANSFER_DELAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
