<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23008.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:66"><name pos:start="1:1" pos:end="1:13">e1000_receive</name><argument_list pos:start="1:14" pos:end="1:66">(<argument pos:start="1:15" pos:end="1:32">NetClientState *nc</argument>, <argument pos:start="1:35" pos:end="1:52">const uint8_t *buf</argument>, <argument pos:start="1:55" pos:end="1:65">size_t size</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="217:1">{<block_content pos:start="5:5" pos:end="215:16">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">E1000State</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:55">= <expr pos:start="5:21" pos:end="5:55"><call pos:start="5:21" pos:end="5:47"><name pos:start="5:21" pos:end="5:29">DO_UPCAST</name><argument_list pos:start="5:30" pos:end="5:47">(<argument pos:start="5:31" pos:end="5:38"><expr pos:start="5:31" pos:end="5:38"><name pos:start="5:31" pos:end="5:38">NICState</name></expr></argument>, <argument pos:start="5:41" pos:end="5:42"><expr pos:start="5:41" pos:end="5:42"><name pos:start="5:41" pos:end="5:42">nc</name></expr></argument>, <argument pos:start="5:45" pos:end="5:46"><expr pos:start="5:45" pos:end="5:46"><name pos:start="5:45" pos:end="5:46">nc</name></expr></argument>)</argument_list></call><operator pos:start="5:48" pos:end="5:49">-&gt;</operator><name pos:start="5:50" pos:end="5:55">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:24">e1000_rx_desc</name></name></type> <name pos:start="7:26" pos:end="7:29">desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">dma_addr_t</name></type> <name pos:start="9:16" pos:end="9:19">base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:18">n</name></decl>, <decl pos:start="11:21" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:21" pos:end="11:23">rdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">rdh_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint16_t</name></type> <name pos:start="15:14" pos:end="15:25">vlan_special</name> <init pos:start="15:27" pos:end="15:29">= <expr pos:start="15:29" pos:end="15:29"><literal type="number" pos:start="15:29" pos:end="15:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:45"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:23">vlan_status</name> <init pos:start="17:25" pos:end="17:27">= <expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr></init></decl>, <decl pos:start="17:30" pos:end="17:44"><type ref="prev" pos:start="17:5" pos:end="17:11"/><name pos:start="17:30" pos:end="17:40">vlan_offset</name> <init pos:start="17:42" pos:end="17:44">= <expr pos:start="17:44" pos:end="17:44"><literal type="number" pos:start="17:44" pos:end="17:44">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:33"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">uint8_t</name></type> <name pos:start="19:13" pos:end="19:33"><name pos:start="19:13" pos:end="19:19">min_buf</name><index pos:start="19:20" pos:end="19:33">[<expr pos:start="19:21" pos:end="19:32"><name pos:start="19:21" pos:end="19:32">MIN_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">size_t</name></type> <name pos:start="21:12" pos:end="21:22">desc_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">size_t</name></type> <name pos:start="23:12" pos:end="23:20">desc_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:10">size_t</name></type> <name pos:start="25:12" pos:end="25:21">total_size</name></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="31:18"><if pos:start="29:5" pos:end="31:18">if <condition pos:start="29:8" pos:end="29:44">(<expr pos:start="29:9" pos:end="29:43"><operator pos:start="29:9" pos:end="29:9">!</operator><operator pos:start="29:10" pos:end="29:10">(</operator><name pos:start="29:11" pos:end="29:26"><name pos:start="29:11" pos:end="29:11">s</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:20">mac_reg</name><index pos:start="29:21" pos:end="29:26">[<expr pos:start="29:22" pos:end="29:25"><name pos:start="29:22" pos:end="29:25">RCTL</name></expr>]</index></name> <operator pos:start="29:28" pos:end="29:28">&amp;</operator> <name pos:start="29:30" pos:end="29:42">E1000_RCTL_EN</name><operator pos:start="29:43" pos:end="29:43">)</operator></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:18"><block_content pos:start="31:9" pos:end="31:18">

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:46">/* Pad to minimum Ethernet frame length */</comment>

    <if_stmt pos:start="37:5" pos:end="47:5"><if pos:start="37:5" pos:end="47:5">if <condition pos:start="37:8" pos:end="37:31">(<expr pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:12">size</name> <operator pos:start="37:14" pos:end="37:14">&lt;</operator> <sizeof pos:start="37:16" pos:end="37:30">sizeof<argument_list pos:start="37:22" pos:end="37:30">(<argument pos:start="37:23" pos:end="37:29"><expr pos:start="37:23" pos:end="37:29"><name pos:start="37:23" pos:end="37:29">min_buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="37:33" pos:end="47:5">{<block_content pos:start="39:9" pos:end="45:31">

        <expr_stmt pos:start="39:9" pos:end="39:35"><expr pos:start="39:9" pos:end="39:34"><call pos:start="39:9" pos:end="39:34"><name pos:start="39:9" pos:end="39:14">memcpy</name><argument_list pos:start="39:15" pos:end="39:34">(<argument pos:start="39:16" pos:end="39:22"><expr pos:start="39:16" pos:end="39:22"><name pos:start="39:16" pos:end="39:22">min_buf</name></expr></argument>, <argument pos:start="39:25" pos:end="39:27"><expr pos:start="39:25" pos:end="39:27"><name pos:start="39:25" pos:end="39:27">buf</name></expr></argument>, <argument pos:start="39:30" pos:end="39:33"><expr pos:start="39:30" pos:end="39:33"><name pos:start="39:30" pos:end="39:33">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:58"><expr pos:start="41:9" pos:end="41:57"><call pos:start="41:9" pos:end="41:57"><name pos:start="41:9" pos:end="41:14">memset</name><argument_list pos:start="41:15" pos:end="41:57">(<argument pos:start="41:16" pos:end="41:29"><expr pos:start="41:16" pos:end="41:29"><operator pos:start="41:16" pos:end="41:16">&amp;</operator><name pos:start="41:17" pos:end="41:29"><name pos:start="41:17" pos:end="41:23">min_buf</name><index pos:start="41:24" pos:end="41:29">[<expr pos:start="41:25" pos:end="41:28"><name pos:start="41:25" pos:end="41:28">size</name></expr>]</index></name></expr></argument>, <argument pos:start="41:32" pos:end="41:32"><expr pos:start="41:32" pos:end="41:32"><literal type="number" pos:start="41:32" pos:end="41:32">0</literal></expr></argument>, <argument pos:start="41:35" pos:end="41:56"><expr pos:start="41:35" pos:end="41:56"><sizeof pos:start="41:35" pos:end="41:49">sizeof<argument_list pos:start="41:41" pos:end="41:49">(<argument pos:start="41:42" pos:end="41:48"><expr pos:start="41:42" pos:end="41:48"><name pos:start="41:42" pos:end="41:48">min_buf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="41:51" pos:end="41:51">-</operator> <name pos:start="41:53" pos:end="41:56">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:22"><expr pos:start="43:9" pos:end="43:21"><name pos:start="43:9" pos:end="43:11">buf</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <name pos:start="43:15" pos:end="43:21">min_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:31"><expr pos:start="45:9" pos:end="45:30"><name pos:start="45:9" pos:end="45:12">size</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <sizeof pos:start="45:16" pos:end="45:30">sizeof<argument_list pos:start="45:22" pos:end="45:30">(<argument pos:start="45:23" pos:end="45:29"><expr pos:start="45:23" pos:end="45:29"><name pos:start="45:23" pos:end="45:29">min_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="53:20"><if pos:start="51:5" pos:end="53:20">if <condition pos:start="51:8" pos:end="51:38">(<expr pos:start="51:9" pos:end="51:37"><operator pos:start="51:9" pos:end="51:9">!</operator><call pos:start="51:10" pos:end="51:37"><name pos:start="51:10" pos:end="51:23">receive_filter</name><argument_list pos:start="51:24" pos:end="51:37">(<argument pos:start="51:25" pos:end="51:25"><expr pos:start="51:25" pos:end="51:25"><name pos:start="51:25" pos:end="51:25">s</name></expr></argument>, <argument pos:start="51:28" pos:end="51:30"><expr pos:start="51:28" pos:end="51:30"><name pos:start="51:28" pos:end="51:30">buf</name></expr></argument>, <argument pos:start="51:33" pos:end="51:36"><expr pos:start="51:33" pos:end="51:36"><name pos:start="51:33" pos:end="51:36">size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:20"><block_content pos:start="53:9" pos:end="53:20">

        <return pos:start="53:9" pos:end="53:20">return <expr pos:start="53:16" pos:end="53:19"><name pos:start="53:16" pos:end="53:19">size</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="69:5"><if pos:start="57:5" pos:end="69:5">if <condition pos:start="57:8" pos:end="57:50">(<expr pos:start="57:9" pos:end="57:49"><call pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:20">vlan_enabled</name><argument_list pos:start="57:21" pos:end="57:23">(<argument pos:start="57:22" pos:end="57:22"><expr pos:start="57:22" pos:end="57:22"><name pos:start="57:22" pos:end="57:22">s</name></expr></argument>)</argument_list></call> <operator pos:start="57:25" pos:end="57:26">&amp;&amp;</operator> <call pos:start="57:28" pos:end="57:49"><name pos:start="57:28" pos:end="57:41">is_vlan_packet</name><argument_list pos:start="57:42" pos:end="57:49">(<argument pos:start="57:43" pos:end="57:43"><expr pos:start="57:43" pos:end="57:43"><name pos:start="57:43" pos:end="57:43">s</name></expr></argument>, <argument pos:start="57:46" pos:end="57:48"><expr pos:start="57:46" pos:end="57:48"><name pos:start="57:46" pos:end="57:48">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:52" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:18">

        <expr_stmt pos:start="59:9" pos:end="59:73"><expr pos:start="59:9" pos:end="59:72"><name pos:start="59:9" pos:end="59:20">vlan_special</name> <operator pos:start="59:22" pos:end="59:22">=</operator> <call pos:start="59:24" pos:end="59:72"><name pos:start="59:24" pos:end="59:34">cpu_to_le16</name><argument_list pos:start="59:35" pos:end="59:72">(<argument pos:start="59:36" pos:end="59:71"><expr pos:start="59:36" pos:end="59:71"><call pos:start="59:36" pos:end="59:71"><name pos:start="59:36" pos:end="59:47">be16_to_cpup</name><argument_list pos:start="59:48" pos:end="59:71">(<argument pos:start="59:49" pos:end="59:70"><expr pos:start="59:49" pos:end="59:70"><operator pos:start="59:49" pos:end="59:49">(</operator><name pos:start="59:50" pos:end="59:57">uint16_t</name> <operator pos:start="59:59" pos:end="59:59">*</operator><operator pos:start="59:60" pos:end="59:60">)</operator><operator pos:start="59:61" pos:end="59:61">(</operator><name pos:start="59:62" pos:end="59:64">buf</name> <operator pos:start="59:66" pos:end="59:66">+</operator> <literal type="number" pos:start="59:68" pos:end="59:69">14</literal><operator pos:start="59:70" pos:end="59:70">)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:45"><expr pos:start="61:9" pos:end="61:44"><call pos:start="61:9" pos:end="61:44"><name pos:start="61:9" pos:end="61:15">memmove</name><argument_list pos:start="61:16" pos:end="61:44">(<argument pos:start="61:17" pos:end="61:34"><expr pos:start="61:17" pos:end="61:34"><operator pos:start="61:17" pos:end="61:17">(</operator><name pos:start="61:18" pos:end="61:24">uint8_t</name> <operator pos:start="61:26" pos:end="61:26">*</operator><operator pos:start="61:27" pos:end="61:27">)</operator><name pos:start="61:28" pos:end="61:30">buf</name> <operator pos:start="61:32" pos:end="61:32">+</operator> <literal type="number" pos:start="61:34" pos:end="61:34">4</literal></expr></argument>, <argument pos:start="61:37" pos:end="61:39"><expr pos:start="61:37" pos:end="61:39"><name pos:start="61:37" pos:end="61:39">buf</name></expr></argument>, <argument pos:start="61:42" pos:end="61:43"><expr pos:start="61:42" pos:end="61:43"><literal type="number" pos:start="61:42" pos:end="61:43">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:40"><expr pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:19">vlan_status</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:39">E1000_RXD_STAT_VP</name></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:19">vlan_offset</name> <operator pos:start="65:21" pos:end="65:21">=</operator> <literal type="number" pos:start="65:23" pos:end="65:23">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:12">size</name> <operator pos:start="67:14" pos:end="67:15">-=</operator> <literal type="number" pos:start="67:17" pos:end="67:17">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:32"><expr pos:start="73:5" pos:end="73:31"><name pos:start="73:5" pos:end="73:13">rdh_start</name> <operator pos:start="73:15" pos:end="73:15">=</operator> <name pos:start="73:17" pos:end="73:31"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:26">mac_reg</name><index pos:start="73:27" pos:end="73:31">[<expr pos:start="73:28" pos:end="73:30"><name pos:start="73:28" pos:end="73:30">RDH</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:20"><expr pos:start="75:5" pos:end="75:19"><name pos:start="75:5" pos:end="75:15">desc_offset</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <literal type="number" pos:start="75:19" pos:end="75:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:35"><expr pos:start="77:5" pos:end="77:34"><name pos:start="77:5" pos:end="77:14">total_size</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <name pos:start="77:18" pos:end="77:21">size</name> <operator pos:start="77:23" pos:end="77:23">+</operator> <call pos:start="77:25" pos:end="77:34"><name pos:start="77:25" pos:end="77:31">fcs_len</name><argument_list pos:start="77:32" pos:end="77:34">(<argument pos:start="77:33" pos:end="77:33"><expr pos:start="77:33" pos:end="77:33"><name pos:start="77:33" pos:end="77:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:41">(<expr pos:start="79:9" pos:end="79:40"><operator pos:start="79:9" pos:end="79:9">!</operator><call pos:start="79:10" pos:end="79:40"><name pos:start="79:10" pos:end="79:25">e1000_has_rxbufs</name><argument_list pos:start="79:26" pos:end="79:40">(<argument pos:start="79:27" pos:end="79:27"><expr pos:start="79:27" pos:end="79:27"><name pos:start="79:27" pos:end="79:27">s</name></expr></argument>, <argument pos:start="79:30" pos:end="79:39"><expr pos:start="79:30" pos:end="79:39"><name pos:start="79:30" pos:end="79:39">total_size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:43" pos:end="85:5">{<block_content pos:start="81:13" pos:end="83:22">

            <expr_stmt pos:start="81:13" pos:end="81:41"><expr pos:start="81:13" pos:end="81:40"><call pos:start="81:13" pos:end="81:40"><name pos:start="81:13" pos:end="81:19">set_ics</name><argument_list pos:start="81:20" pos:end="81:40">(<argument pos:start="81:21" pos:end="81:21"><expr pos:start="81:21" pos:end="81:21"><name pos:start="81:21" pos:end="81:21">s</name></expr></argument>, <argument pos:start="81:24" pos:end="81:24"><expr pos:start="81:24" pos:end="81:24"><literal type="number" pos:start="81:24" pos:end="81:24">0</literal></expr></argument>, <argument pos:start="81:27" pos:end="81:39"><expr pos:start="81:27" pos:end="81:39"><name pos:start="81:27" pos:end="81:39">E1000_ICS_RXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:22">return <expr pos:start="83:20" pos:end="83:21"><operator pos:start="83:20" pos:end="83:20">-</operator><literal type="number" pos:start="83:21" pos:end="83:21">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <do pos:start="87:5" pos:end="171:39">do <block pos:start="87:8" pos:end="171:5">{<block_content pos:start="89:9" pos:end="169:9">

        <expr_stmt pos:start="89:9" pos:end="89:45"><expr pos:start="89:9" pos:end="89:44"><name pos:start="89:9" pos:end="89:17">desc_size</name> <operator pos:start="89:19" pos:end="89:19">=</operator> <name pos:start="89:21" pos:end="89:30">total_size</name> <operator pos:start="89:32" pos:end="89:32">-</operator> <name pos:start="89:34" pos:end="89:44">desc_offset</name></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:38">(<expr pos:start="91:13" pos:end="91:37"><name pos:start="91:13" pos:end="91:21">desc_size</name> <operator pos:start="91:23" pos:end="91:23">&gt;</operator> <name pos:start="91:25" pos:end="91:37"><name pos:start="91:25" pos:end="91:25">s</name><operator pos:start="91:26" pos:end="91:27">-&gt;</operator><name pos:start="91:28" pos:end="91:37">rxbuf_size</name></name></expr>)</condition> <block pos:start="91:40" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:38">

            <expr_stmt pos:start="93:13" pos:end="93:38"><expr pos:start="93:13" pos:end="93:37"><name pos:start="93:13" pos:end="93:21">desc_size</name> <operator pos:start="93:23" pos:end="93:23">=</operator> <name pos:start="93:25" pos:end="93:37"><name pos:start="93:25" pos:end="93:25">s</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:37">rxbuf_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:64"><expr pos:start="97:9" pos:end="97:63"><name pos:start="97:9" pos:end="97:12">base</name> <operator pos:start="97:14" pos:end="97:14">=</operator> <call pos:start="97:16" pos:end="97:30"><name pos:start="97:16" pos:end="97:27">rx_desc_base</name><argument_list pos:start="97:28" pos:end="97:30">(<argument pos:start="97:29" pos:end="97:29"><expr pos:start="97:29" pos:end="97:29"><name pos:start="97:29" pos:end="97:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="97:32" pos:end="97:32">+</operator> <sizeof pos:start="97:34" pos:end="97:45">sizeof<argument_list pos:start="97:40" pos:end="97:45">(<argument pos:start="97:41" pos:end="97:44"><expr pos:start="97:41" pos:end="97:44"><name pos:start="97:41" pos:end="97:44">desc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="97:47" pos:end="97:47">*</operator> <name pos:start="97:49" pos:end="97:63"><name pos:start="97:49" pos:end="97:49">s</name><operator pos:start="97:50" pos:end="97:51">-&gt;</operator><name pos:start="97:52" pos:end="97:58">mac_reg</name><index pos:start="97:59" pos:end="97:63">[<expr pos:start="97:60" pos:end="97:62"><name pos:start="97:60" pos:end="97:62">RDH</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:57"><expr pos:start="99:9" pos:end="99:56"><call pos:start="99:9" pos:end="99:56"><name pos:start="99:9" pos:end="99:20">pci_dma_read</name><argument_list pos:start="99:21" pos:end="99:56">(<argument pos:start="99:22" pos:end="99:28"><expr pos:start="99:22" pos:end="99:28"><operator pos:start="99:22" pos:end="99:22">&amp;</operator><name pos:start="99:23" pos:end="99:28"><name pos:start="99:23" pos:end="99:23">s</name><operator pos:start="99:24" pos:end="99:25">-&gt;</operator><name pos:start="99:26" pos:end="99:28">dev</name></name></expr></argument>, <argument pos:start="99:31" pos:end="99:34"><expr pos:start="99:31" pos:end="99:34"><name pos:start="99:31" pos:end="99:34">base</name></expr></argument>, <argument pos:start="99:37" pos:end="99:41"><expr pos:start="99:37" pos:end="99:41"><operator pos:start="99:37" pos:end="99:37">&amp;</operator><name pos:start="99:38" pos:end="99:41">desc</name></expr></argument>, <argument pos:start="99:44" pos:end="99:55"><expr pos:start="99:44" pos:end="99:55"><sizeof pos:start="99:44" pos:end="99:55">sizeof<argument_list pos:start="99:50" pos:end="99:55">(<argument pos:start="99:51" pos:end="99:54"><expr pos:start="99:51" pos:end="99:54"><name pos:start="99:51" pos:end="99:54">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:36"><expr pos:start="101:9" pos:end="101:35"><name pos:start="101:9" pos:end="101:20"><name pos:start="101:9" pos:end="101:12">desc</name><operator pos:start="101:13" pos:end="101:13">.</operator><name pos:start="101:14" pos:end="101:20">special</name></name> <operator pos:start="101:22" pos:end="101:22">=</operator> <name pos:start="101:24" pos:end="101:35">vlan_special</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:57"><expr pos:start="103:9" pos:end="103:56"><name pos:start="103:9" pos:end="103:19"><name pos:start="103:9" pos:end="103:12">desc</name><operator pos:start="103:13" pos:end="103:13">.</operator><name pos:start="103:14" pos:end="103:19">status</name></name> <operator pos:start="103:21" pos:end="103:22">|=</operator> <operator pos:start="103:24" pos:end="103:24">(</operator><name pos:start="103:25" pos:end="103:35">vlan_status</name> <operator pos:start="103:37" pos:end="103:37">|</operator> <name pos:start="103:39" pos:end="103:55">E1000_RXD_STAT_DD</name><operator pos:start="103:56" pos:end="103:56">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="145:9"><if pos:start="105:9" pos:end="141:9">if <condition pos:start="105:12" pos:end="105:29">(<expr pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:16">desc</name><operator pos:start="105:17" pos:end="105:17">.</operator><name pos:start="105:18" pos:end="105:28">buffer_addr</name></name></expr>)</condition> <block pos:start="105:31" pos:end="141:9">{<block_content pos:start="107:13" pos:end="139:13">

            <if_stmt pos:start="107:13" pos:end="121:13"><if pos:start="107:13" pos:end="121:13">if <condition pos:start="107:16" pos:end="107:35">(<expr pos:start="107:17" pos:end="107:34"><name pos:start="107:17" pos:end="107:27">desc_offset</name> <operator pos:start="107:29" pos:end="107:29">&lt;</operator> <name pos:start="107:31" pos:end="107:34">size</name></expr>)</condition> <block pos:start="107:37" pos:end="121:13">{<block_content pos:start="109:17" pos:end="119:74">

                <decl_stmt pos:start="109:17" pos:end="109:54"><decl pos:start="109:17" pos:end="109:53"><type pos:start="109:17" pos:end="109:22"><name pos:start="109:17" pos:end="109:22">size_t</name></type> <name pos:start="109:24" pos:end="109:32">copy_size</name> <init pos:start="109:34" pos:end="109:53">= <expr pos:start="109:36" pos:end="109:53"><name pos:start="109:36" pos:end="109:39">size</name> <operator pos:start="109:41" pos:end="109:41">-</operator> <name pos:start="109:43" pos:end="109:53">desc_offset</name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="111:17" pos:end="115:17"><if pos:start="111:17" pos:end="115:17">if <condition pos:start="111:20" pos:end="111:46">(<expr pos:start="111:21" pos:end="111:45"><name pos:start="111:21" pos:end="111:29">copy_size</name> <operator pos:start="111:31" pos:end="111:31">&gt;</operator> <name pos:start="111:33" pos:end="111:45"><name pos:start="111:33" pos:end="111:33">s</name><operator pos:start="111:34" pos:end="111:35">-&gt;</operator><name pos:start="111:36" pos:end="111:45">rxbuf_size</name></name></expr>)</condition> <block pos:start="111:48" pos:end="115:17">{<block_content pos:start="113:21" pos:end="113:46">

                    <expr_stmt pos:start="113:21" pos:end="113:46"><expr pos:start="113:21" pos:end="113:45"><name pos:start="113:21" pos:end="113:29">copy_size</name> <operator pos:start="113:31" pos:end="113:31">=</operator> <name pos:start="113:33" pos:end="113:45"><name pos:start="113:33" pos:end="113:33">s</name><operator pos:start="113:34" pos:end="113:35">-&gt;</operator><name pos:start="113:36" pos:end="113:45">rxbuf_size</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="117:17" pos:end="119:74"><expr pos:start="117:17" pos:end="119:73"><call pos:start="117:17" pos:end="119:73"><name pos:start="117:17" pos:end="117:29">pci_dma_write</name><argument_list pos:start="117:30" pos:end="119:73">(<argument pos:start="117:31" pos:end="117:37"><expr pos:start="117:31" pos:end="117:37"><operator pos:start="117:31" pos:end="117:31">&amp;</operator><name pos:start="117:32" pos:end="117:37"><name pos:start="117:32" pos:end="117:32">s</name><operator pos:start="117:33" pos:end="117:34">-&gt;</operator><name pos:start="117:35" pos:end="117:37">dev</name></name></expr></argument>, <argument pos:start="117:40" pos:end="117:68"><expr pos:start="117:40" pos:end="117:68"><call pos:start="117:40" pos:end="117:68"><name pos:start="117:40" pos:end="117:50">le64_to_cpu</name><argument_list pos:start="117:51" pos:end="117:68">(<argument pos:start="117:52" pos:end="117:67"><expr pos:start="117:52" pos:end="117:67"><name pos:start="117:52" pos:end="117:67"><name pos:start="117:52" pos:end="117:55">desc</name><operator pos:start="117:56" pos:end="117:56">.</operator><name pos:start="117:57" pos:end="117:67">buffer_addr</name></name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="119:31" pos:end="119:61"><expr pos:start="119:31" pos:end="119:61"><name pos:start="119:31" pos:end="119:33">buf</name> <operator pos:start="119:35" pos:end="119:35">+</operator> <name pos:start="119:37" pos:end="119:47">desc_offset</name> <operator pos:start="119:49" pos:end="119:49">+</operator> <name pos:start="119:51" pos:end="119:61">vlan_offset</name></expr></argument>, <argument pos:start="119:64" pos:end="119:72"><expr pos:start="119:64" pos:end="119:72"><name pos:start="119:64" pos:end="119:72">copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:37"><expr pos:start="123:13" pos:end="123:36"><name pos:start="123:13" pos:end="123:23">desc_offset</name> <operator pos:start="123:25" pos:end="123:26">+=</operator> <name pos:start="123:28" pos:end="123:36">desc_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:49"><expr pos:start="125:13" pos:end="125:48"><name pos:start="125:13" pos:end="125:23"><name pos:start="125:13" pos:end="125:16">desc</name><operator pos:start="125:17" pos:end="125:17">.</operator><name pos:start="125:18" pos:end="125:23">length</name></name> <operator pos:start="125:25" pos:end="125:25">=</operator> <call pos:start="125:27" pos:end="125:48"><name pos:start="125:27" pos:end="125:37">cpu_to_le16</name><argument_list pos:start="125:38" pos:end="125:48">(<argument pos:start="125:39" pos:end="125:47"><expr pos:start="125:39" pos:end="125:47"><name pos:start="125:39" pos:end="125:47">desc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="139:13"><if pos:start="127:13" pos:end="131:13">if <condition pos:start="127:16" pos:end="127:42">(<expr pos:start="127:17" pos:end="127:41"><name pos:start="127:17" pos:end="127:27">desc_offset</name> <operator pos:start="127:29" pos:end="127:30">&gt;=</operator> <name pos:start="127:32" pos:end="127:41">total_size</name></expr>)</condition> <block pos:start="127:44" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:72">

                <expr_stmt pos:start="129:17" pos:end="129:72"><expr pos:start="129:17" pos:end="129:71"><name pos:start="129:17" pos:end="129:27"><name pos:start="129:17" pos:end="129:20">desc</name><operator pos:start="129:21" pos:end="129:21">.</operator><name pos:start="129:22" pos:end="129:27">status</name></name> <operator pos:start="129:29" pos:end="129:30">|=</operator> <name pos:start="129:32" pos:end="129:49">E1000_RXD_STAT_EOP</name> <operator pos:start="129:51" pos:end="129:51">|</operator> <name pos:start="129:53" pos:end="129:71">E1000_RXD_STAT_IXSM</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="131:15" pos:end="139:13">else <block pos:start="131:20" pos:end="139:13">{<block_content pos:start="137:17" pos:end="137:51">

                <comment type="block" pos:start="133:17" pos:end="135:59">/* Guest zeroing out status is not a hardware requirement.

                   Clear EOP in case guest didn't do it. */</comment>

                <expr_stmt pos:start="137:17" pos:end="137:51"><expr pos:start="137:17" pos:end="137:50"><name pos:start="137:17" pos:end="137:27"><name pos:start="137:17" pos:end="137:20">desc</name><operator pos:start="137:21" pos:end="137:21">.</operator><name pos:start="137:22" pos:end="137:27">status</name></name> <operator pos:start="137:29" pos:end="137:30">&amp;=</operator> <operator pos:start="137:32" pos:end="137:32">~</operator><name pos:start="137:33" pos:end="137:50">E1000_RXD_STAT_EOP</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="141:11" pos:end="145:9">else <block pos:start="141:16" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:49"> <comment type="line" pos:start="141:18" pos:end="141:74">// as per intel docs; skip descriptors with null buf addr</comment>

            <expr_stmt pos:start="143:13" pos:end="143:49"><expr pos:start="143:13" pos:end="143:48"><call pos:start="143:13" pos:end="143:48"><name pos:start="143:13" pos:end="143:18">DBGOUT</name><argument_list pos:start="143:19" pos:end="143:48">(<argument pos:start="143:20" pos:end="143:21"><expr pos:start="143:20" pos:end="143:21"><name pos:start="143:20" pos:end="143:21">RX</name></expr></argument>, <argument pos:start="143:24" pos:end="143:47"><expr pos:start="143:24" pos:end="143:47"><literal type="string" pos:start="143:24" pos:end="143:47">"Null RX descriptor!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:58"><expr pos:start="147:9" pos:end="147:57"><call pos:start="147:9" pos:end="147:57"><name pos:start="147:9" pos:end="147:21">pci_dma_write</name><argument_list pos:start="147:22" pos:end="147:57">(<argument pos:start="147:23" pos:end="147:29"><expr pos:start="147:23" pos:end="147:29"><operator pos:start="147:23" pos:end="147:23">&amp;</operator><name pos:start="147:24" pos:end="147:29"><name pos:start="147:24" pos:end="147:24">s</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:29">dev</name></name></expr></argument>, <argument pos:start="147:32" pos:end="147:35"><expr pos:start="147:32" pos:end="147:35"><name pos:start="147:32" pos:end="147:35">base</name></expr></argument>, <argument pos:start="147:38" pos:end="147:42"><expr pos:start="147:38" pos:end="147:42"><operator pos:start="147:38" pos:end="147:38">&amp;</operator><name pos:start="147:39" pos:end="147:42">desc</name></expr></argument>, <argument pos:start="147:45" pos:end="147:56"><expr pos:start="147:45" pos:end="147:56"><sizeof pos:start="147:45" pos:end="147:56">sizeof<argument_list pos:start="147:51" pos:end="147:56">(<argument pos:start="147:52" pos:end="147:55"><expr pos:start="147:52" pos:end="147:55"><name pos:start="147:52" pos:end="147:55">desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="151:9" pos:end="153:32"><if pos:start="151:9" pos:end="153:32">if <condition pos:start="151:12" pos:end="151:66">(<expr pos:start="151:13" pos:end="151:65"><operator pos:start="151:13" pos:end="151:14">++</operator><name pos:start="151:15" pos:end="151:29"><name pos:start="151:15" pos:end="151:15">s</name><operator pos:start="151:16" pos:end="151:17">-&gt;</operator><name pos:start="151:18" pos:end="151:24">mac_reg</name><index pos:start="151:25" pos:end="151:29">[<expr pos:start="151:26" pos:end="151:28"><name pos:start="151:26" pos:end="151:28">RDH</name></expr>]</index></name> <operator pos:start="151:31" pos:end="151:31">*</operator> <sizeof pos:start="151:33" pos:end="151:44">sizeof<argument_list pos:start="151:39" pos:end="151:44">(<argument pos:start="151:40" pos:end="151:43"><expr pos:start="151:40" pos:end="151:43"><name pos:start="151:40" pos:end="151:43">desc</name></expr></argument>)</argument_list></sizeof> <operator pos:start="151:46" pos:end="151:47">&gt;=</operator> <name pos:start="151:49" pos:end="151:65"><name pos:start="151:49" pos:end="151:49">s</name><operator pos:start="151:50" pos:end="151:51">-&gt;</operator><name pos:start="151:52" pos:end="151:58">mac_reg</name><index pos:start="151:59" pos:end="151:65">[<expr pos:start="151:60" pos:end="151:64"><name pos:start="151:60" pos:end="151:64">RDLEN</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:32"><block_content pos:start="153:13" pos:end="153:32">

            <expr_stmt pos:start="153:13" pos:end="153:32"><expr pos:start="153:13" pos:end="153:31"><name pos:start="153:13" pos:end="153:27"><name pos:start="153:13" pos:end="153:13">s</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:22">mac_reg</name><index pos:start="153:23" pos:end="153:27">[<expr pos:start="153:24" pos:end="153:26"><name pos:start="153:24" pos:end="153:26">RDH</name></expr>]</index></name> <operator pos:start="153:29" pos:end="153:29">=</operator> <literal type="number" pos:start="153:31" pos:end="153:31">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:26"><expr pos:start="155:9" pos:end="155:25"><name pos:start="155:9" pos:end="155:21"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:21">check_rxov</name></name> <operator pos:start="155:23" pos:end="155:23">=</operator> <literal type="number" pos:start="155:25" pos:end="155:25">1</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="157:9" pos:end="157:50">/* see comment in start_xmit; same here */</comment>

        <if_stmt pos:start="159:9" pos:end="169:9"><if pos:start="159:9" pos:end="169:9">if <condition pos:start="159:12" pos:end="159:41">(<expr pos:start="159:13" pos:end="159:40"><name pos:start="159:13" pos:end="159:27"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:22">mac_reg</name><index pos:start="159:23" pos:end="159:27">[<expr pos:start="159:24" pos:end="159:26"><name pos:start="159:24" pos:end="159:26">RDH</name></expr>]</index></name> <operator pos:start="159:29" pos:end="159:30">==</operator> <name pos:start="159:32" pos:end="159:40">rdh_start</name></expr>)</condition> <block pos:start="159:43" pos:end="169:9">{<block_content pos:start="161:13" pos:end="167:22">

            <expr_stmt pos:start="161:13" pos:end="163:66"><expr pos:start="161:13" pos:end="163:65"><call pos:start="161:13" pos:end="163:65"><name pos:start="161:13" pos:end="161:18">DBGOUT</name><argument_list pos:start="161:19" pos:end="163:65">(<argument pos:start="161:20" pos:end="161:24"><expr pos:start="161:20" pos:end="161:24"><name pos:start="161:20" pos:end="161:24">RXERR</name></expr></argument>, <argument pos:start="161:27" pos:end="161:66"><expr pos:start="161:27" pos:end="161:66"><literal type="string" pos:start="161:27" pos:end="161:66">"RDH wraparound @%x, RDT %x, RDLEN %x\n"</literal></expr></argument>,

                   <argument pos:start="163:20" pos:end="163:28"><expr pos:start="163:20" pos:end="163:28"><name pos:start="163:20" pos:end="163:28">rdh_start</name></expr></argument>, <argument pos:start="163:31" pos:end="163:45"><expr pos:start="163:31" pos:end="163:45"><name pos:start="163:31" pos:end="163:45"><name pos:start="163:31" pos:end="163:31">s</name><operator pos:start="163:32" pos:end="163:33">-&gt;</operator><name pos:start="163:34" pos:end="163:40">mac_reg</name><index pos:start="163:41" pos:end="163:45">[<expr pos:start="163:42" pos:end="163:44"><name pos:start="163:42" pos:end="163:44">RDT</name></expr>]</index></name></expr></argument>, <argument pos:start="163:48" pos:end="163:64"><expr pos:start="163:48" pos:end="163:64"><name pos:start="163:48" pos:end="163:64"><name pos:start="163:48" pos:end="163:48">s</name><operator pos:start="163:49" pos:end="163:50">-&gt;</operator><name pos:start="163:51" pos:end="163:57">mac_reg</name><index pos:start="163:58" pos:end="163:64">[<expr pos:start="163:59" pos:end="163:63"><name pos:start="163:59" pos:end="163:63">RDLEN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:41"><expr pos:start="165:13" pos:end="165:40"><call pos:start="165:13" pos:end="165:40"><name pos:start="165:13" pos:end="165:19">set_ics</name><argument_list pos:start="165:20" pos:end="165:40">(<argument pos:start="165:21" pos:end="165:21"><expr pos:start="165:21" pos:end="165:21"><name pos:start="165:21" pos:end="165:21">s</name></expr></argument>, <argument pos:start="165:24" pos:end="165:24"><expr pos:start="165:24" pos:end="165:24"><literal type="number" pos:start="165:24" pos:end="165:24">0</literal></expr></argument>, <argument pos:start="165:27" pos:end="165:39"><expr pos:start="165:27" pos:end="165:39"><name pos:start="165:27" pos:end="165:39">E1000_ICS_RXO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="167:13" pos:end="167:22">return <expr pos:start="167:20" pos:end="167:21"><operator pos:start="167:20" pos:end="167:20">-</operator><literal type="number" pos:start="167:21" pos:end="167:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="171:13" pos:end="171:38">(<expr pos:start="171:14" pos:end="171:37"><name pos:start="171:14" pos:end="171:24">desc_offset</name> <operator pos:start="171:26" pos:end="171:26">&lt;</operator> <name pos:start="171:28" pos:end="171:37">total_size</name></expr>)</condition>;</do>



    <expr_stmt pos:start="175:5" pos:end="175:23"><expr pos:start="175:5" pos:end="175:22"><name pos:start="175:5" pos:end="175:20"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:14">mac_reg</name><index pos:start="175:15" pos:end="175:20">[<expr pos:start="175:16" pos:end="175:19"><name pos:start="175:16" pos:end="175:19">GPRC</name></expr>]</index></name><operator pos:start="175:21" pos:end="175:22">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:22"><expr pos:start="177:5" pos:end="177:21"><name pos:start="177:5" pos:end="177:19"><name pos:start="177:5" pos:end="177:5">s</name><operator pos:start="177:6" pos:end="177:7">-&gt;</operator><name pos:start="177:8" pos:end="177:14">mac_reg</name><index pos:start="177:15" pos:end="177:19">[<expr pos:start="177:16" pos:end="177:18"><name pos:start="177:16" pos:end="177:18">TPR</name></expr>]</index></name><operator pos:start="177:20" pos:end="177:21">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="179:5" pos:end="185:7">/* TOR - Total Octets Received:

     * This register includes bytes received in a packet from the &lt;Destination

     * Address&gt; field through the &lt;CRC&gt; field, inclusively.

     */</comment>

    <expr_stmt pos:start="187:5" pos:end="187:69"><expr pos:start="187:5" pos:end="187:68"><name pos:start="187:5" pos:end="187:5">n</name> <operator pos:start="187:7" pos:end="187:7">=</operator> <name pos:start="187:9" pos:end="187:24"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:18">mac_reg</name><index pos:start="187:19" pos:end="187:24">[<expr pos:start="187:20" pos:end="187:23"><name pos:start="187:20" pos:end="187:23">TORL</name></expr>]</index></name> <operator pos:start="187:26" pos:end="187:26">+</operator> <name pos:start="187:28" pos:end="187:31">size</name> <operator pos:start="187:33" pos:end="187:33">+</operator> <comment type="block" pos:start="187:35" pos:end="187:66">/* Always include FCS length. */</comment> <literal type="number" pos:start="187:68" pos:end="187:68">4</literal></expr>;</expr_stmt>

    <if_stmt pos:start="189:5" pos:end="191:27"><if pos:start="189:5" pos:end="191:27">if <condition pos:start="189:8" pos:end="189:29">(<expr pos:start="189:9" pos:end="189:28"><name pos:start="189:9" pos:end="189:9">n</name> <operator pos:start="189:11" pos:end="189:11">&lt;</operator> <name pos:start="189:13" pos:end="189:28"><name pos:start="189:13" pos:end="189:13">s</name><operator pos:start="189:14" pos:end="189:15">-&gt;</operator><name pos:start="189:16" pos:end="189:22">mac_reg</name><index pos:start="189:23" pos:end="189:28">[<expr pos:start="189:24" pos:end="189:27"><name pos:start="189:24" pos:end="189:27">TORL</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="191:9" pos:end="191:27"><block_content pos:start="191:9" pos:end="191:27">

        <expr_stmt pos:start="191:9" pos:end="191:27"><expr pos:start="191:9" pos:end="191:26"><name pos:start="191:9" pos:end="191:24"><name pos:start="191:9" pos:end="191:9">s</name><operator pos:start="191:10" pos:end="191:11">-&gt;</operator><name pos:start="191:12" pos:end="191:18">mac_reg</name><index pos:start="191:19" pos:end="191:24">[<expr pos:start="191:20" pos:end="191:23"><name pos:start="191:20" pos:end="191:23">TORH</name></expr>]</index></name><operator pos:start="191:25" pos:end="191:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:25"><expr pos:start="193:5" pos:end="193:24"><name pos:start="193:5" pos:end="193:20"><name pos:start="193:5" pos:end="193:5">s</name><operator pos:start="193:6" pos:end="193:7">-&gt;</operator><name pos:start="193:8" pos:end="193:14">mac_reg</name><index pos:start="193:15" pos:end="193:20">[<expr pos:start="193:16" pos:end="193:19"><name pos:start="193:16" pos:end="193:19">TORL</name></expr>]</index></name> <operator pos:start="193:22" pos:end="193:22">=</operator> <name pos:start="193:24" pos:end="193:24">n</name></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:23"><expr pos:start="197:5" pos:end="197:22"><name pos:start="197:5" pos:end="197:5">n</name> <operator pos:start="197:7" pos:end="197:7">=</operator> <name pos:start="197:9" pos:end="197:22">E1000_ICS_RXT0</name></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="201:48"><if pos:start="199:5" pos:end="201:48">if <condition pos:start="199:8" pos:end="199:50">(<expr pos:start="199:9" pos:end="199:49"><operator pos:start="199:9" pos:end="199:9">(</operator><name pos:start="199:10" pos:end="199:12">rdt</name> <operator pos:start="199:14" pos:end="199:14">=</operator> <name pos:start="199:16" pos:end="199:30"><name pos:start="199:16" pos:end="199:16">s</name><operator pos:start="199:17" pos:end="199:18">-&gt;</operator><name pos:start="199:19" pos:end="199:25">mac_reg</name><index pos:start="199:26" pos:end="199:30">[<expr pos:start="199:27" pos:end="199:29"><name pos:start="199:27" pos:end="199:29">RDT</name></expr>]</index></name><operator pos:start="199:31" pos:end="199:31">)</operator> <operator pos:start="199:33" pos:end="199:33">&lt;</operator> <name pos:start="199:35" pos:end="199:49"><name pos:start="199:35" pos:end="199:35">s</name><operator pos:start="199:36" pos:end="199:37">-&gt;</operator><name pos:start="199:38" pos:end="199:44">mac_reg</name><index pos:start="199:45" pos:end="199:49">[<expr pos:start="199:46" pos:end="199:48"><name pos:start="199:46" pos:end="199:48">RDH</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="201:9" pos:end="201:48"><block_content pos:start="201:9" pos:end="201:48">

        <expr_stmt pos:start="201:9" pos:end="201:48"><expr pos:start="201:9" pos:end="201:47"><name pos:start="201:9" pos:end="201:11">rdt</name> <operator pos:start="201:13" pos:end="201:14">+=</operator> <name pos:start="201:16" pos:end="201:32"><name pos:start="201:16" pos:end="201:16">s</name><operator pos:start="201:17" pos:end="201:18">-&gt;</operator><name pos:start="201:19" pos:end="201:25">mac_reg</name><index pos:start="201:26" pos:end="201:32">[<expr pos:start="201:27" pos:end="201:31"><name pos:start="201:27" pos:end="201:31">RDLEN</name></expr>]</index></name> <operator pos:start="201:34" pos:end="201:34">/</operator> <sizeof pos:start="201:36" pos:end="201:47">sizeof<argument_list pos:start="201:42" pos:end="201:47">(<argument pos:start="201:43" pos:end="201:46"><expr pos:start="201:43" pos:end="201:46"><name pos:start="201:43" pos:end="201:46">desc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="203:5" pos:end="207:30"><if pos:start="203:5" pos:end="207:30">if <condition pos:start="203:8" pos:end="205:27">(<expr pos:start="203:9" pos:end="205:26"><operator pos:start="203:9" pos:end="203:9">(</operator><operator pos:start="203:10" pos:end="203:10">(</operator><name pos:start="203:11" pos:end="203:13">rdt</name> <operator pos:start="203:15" pos:end="203:15">-</operator> <name pos:start="203:17" pos:end="203:31"><name pos:start="203:17" pos:end="203:17">s</name><operator pos:start="203:18" pos:end="203:19">-&gt;</operator><name pos:start="203:20" pos:end="203:26">mac_reg</name><index pos:start="203:27" pos:end="203:31">[<expr pos:start="203:28" pos:end="203:30"><name pos:start="203:28" pos:end="203:30">RDH</name></expr>]</index></name><operator pos:start="203:32" pos:end="203:32">)</operator> <operator pos:start="203:34" pos:end="203:34">*</operator> <sizeof pos:start="203:36" pos:end="203:47">sizeof<argument_list pos:start="203:42" pos:end="203:47">(<argument pos:start="203:43" pos:end="203:46"><expr pos:start="203:43" pos:end="203:46"><name pos:start="203:43" pos:end="203:46">desc</name></expr></argument>)</argument_list></sizeof><operator pos:start="203:48" pos:end="203:48">)</operator> <operator pos:start="203:50" pos:end="203:51">&lt;=</operator> <name pos:start="203:53" pos:end="203:69"><name pos:start="203:53" pos:end="203:53">s</name><operator pos:start="203:54" pos:end="203:55">-&gt;</operator><name pos:start="203:56" pos:end="203:62">mac_reg</name><index pos:start="203:63" pos:end="203:69">[<expr pos:start="203:64" pos:end="203:68"><name pos:start="203:64" pos:end="203:68">RDLEN</name></expr>]</index></name> <operator pos:start="203:71" pos:end="203:72">&gt;&gt;</operator>

        <name pos:start="205:9" pos:end="205:26"><name pos:start="205:9" pos:end="205:9">s</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:26">rxbuf_min_shift</name></name></expr>)</condition><block type="pseudo" pos:start="207:9" pos:end="207:30"><block_content pos:start="207:9" pos:end="207:30">

        <expr_stmt pos:start="207:9" pos:end="207:30"><expr pos:start="207:9" pos:end="207:29"><name pos:start="207:9" pos:end="207:9">n</name> <operator pos:start="207:11" pos:end="207:12">|=</operator> <name pos:start="207:14" pos:end="207:29">E1000_ICS_RXDMT0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:21"><expr pos:start="211:5" pos:end="211:20"><call pos:start="211:5" pos:end="211:20"><name pos:start="211:5" pos:end="211:11">set_ics</name><argument_list pos:start="211:12" pos:end="211:20">(<argument pos:start="211:13" pos:end="211:13"><expr pos:start="211:13" pos:end="211:13"><name pos:start="211:13" pos:end="211:13">s</name></expr></argument>, <argument pos:start="211:16" pos:end="211:16"><expr pos:start="211:16" pos:end="211:16"><literal type="number" pos:start="211:16" pos:end="211:16">0</literal></expr></argument>, <argument pos:start="211:19" pos:end="211:19"><expr pos:start="211:19" pos:end="211:19"><name pos:start="211:19" pos:end="211:19">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="215:5" pos:end="215:16">return <expr pos:start="215:12" pos:end="215:15"><name pos:start="215:12" pos:end="215:15">size</name></expr>;</return>

</block_content>}</block>
</unit>
