<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10088.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:48">bdrv_co_do_copy_on_readv</name><parameter_list pos:start="1:49" pos:end="3:63">(<parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:65">BlockDriverState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">bs</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:22"><decl pos:start="3:9" pos:end="3:22"><type pos:start="3:9" pos:end="3:22"><name pos:start="3:9" pos:end="3:15">int64_t</name></type> <name pos:start="3:17" pos:end="3:22">offset</name></decl></parameter>, <parameter pos:start="3:25" pos:end="3:42"><decl pos:start="3:25" pos:end="3:42"><type pos:start="3:25" pos:end="3:42"><name pos:start="3:25" pos:end="3:32">unsigned</name> <name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:42">bytes</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:62"><decl pos:start="3:45" pos:end="3:62"><type pos:start="3:45" pos:end="3:62"><name pos:start="3:45" pos:end="3:56">QEMUIOVector</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:62">qiov</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="17:5" pos:end="137:15">

    <comment type="block" pos:start="7:5" pos:end="15:7">/* Perform I/O through a temporary buffer so that users who scribble over

     * their read buffer while the operation is in progress do not end up

     * modifying the image file.  This is critical for zero-copy guest I/O

     * where anything might happen inside guest memory.

     */</comment>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:23">bounce_buffer</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">BlockDriver</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">drv</name> <init pos:start="21:22" pos:end="21:30">= <expr pos:start="21:24" pos:end="21:30"><name pos:start="21:24" pos:end="21:30"><name pos:start="21:24" pos:end="21:25">bs</name><operator pos:start="21:26" pos:end="21:27">-&gt;</operator><name pos:start="21:28" pos:end="21:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:16">iovec</name></name></type> <name pos:start="23:18" pos:end="23:20">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:29"><decl pos:start="25:5" pos:end="25:28"><type pos:start="25:5" pos:end="25:16"><name pos:start="25:5" pos:end="25:16">QEMUIOVector</name></type> <name pos:start="25:18" pos:end="25:28">bounce_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">int64_t</name></type> <name pos:start="27:13" pos:end="27:26">cluster_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:31"><decl pos:start="29:5" pos:end="29:30"><type pos:start="29:5" pos:end="29:16"><name pos:start="29:5" pos:end="29:12">unsigned</name> <name pos:start="29:14" pos:end="29:16">int</name></type> <name pos:start="29:18" pos:end="29:30">cluster_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:22"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:10">size_t</name></type> <name pos:start="31:12" pos:end="31:21">skip_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:12"><decl pos:start="33:5" pos:end="33:11"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:11">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="37:5" pos:end="41:7">/* Cover entire cluster so no additional backing file I/O is required when

     * allocating cluster in the image file.

     */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:79"><expr pos:start="43:5" pos:end="43:78"><call pos:start="43:5" pos:end="43:78"><name pos:start="43:5" pos:end="43:26">bdrv_round_to_clusters</name><argument_list pos:start="43:27" pos:end="43:78">(<argument pos:start="43:28" pos:end="43:29"><expr pos:start="43:28" pos:end="43:29"><name pos:start="43:28" pos:end="43:29">bs</name></expr></argument>, <argument pos:start="43:32" pos:end="43:37"><expr pos:start="43:32" pos:end="43:37"><name pos:start="43:32" pos:end="43:37">offset</name></expr></argument>, <argument pos:start="43:40" pos:end="43:44"><expr pos:start="43:40" pos:end="43:44"><name pos:start="43:40" pos:end="43:44">bytes</name></expr></argument>, <argument pos:start="43:47" pos:end="43:61"><expr pos:start="43:47" pos:end="43:61"><operator pos:start="43:47" pos:end="43:47">&amp;</operator><name pos:start="43:48" pos:end="43:61">cluster_offset</name></expr></argument>, <argument pos:start="43:64" pos:end="43:77"><expr pos:start="43:64" pos:end="43:77"><operator pos:start="43:64" pos:end="43:64">&amp;</operator><name pos:start="43:65" pos:end="43:77">cluster_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="49:66"><expr pos:start="47:5" pos:end="49:65"><call pos:start="47:5" pos:end="49:65"><name pos:start="47:5" pos:end="47:34">trace_bdrv_co_do_copy_on_readv</name><argument_list pos:start="47:35" pos:end="49:65">(<argument pos:start="47:36" pos:end="47:37"><expr pos:start="47:36" pos:end="47:37"><name pos:start="47:36" pos:end="47:37">bs</name></expr></argument>, <argument pos:start="47:40" pos:end="47:45"><expr pos:start="47:40" pos:end="47:45"><name pos:start="47:40" pos:end="47:45">offset</name></expr></argument>, <argument pos:start="47:48" pos:end="47:52"><expr pos:start="47:48" pos:end="47:52"><name pos:start="47:48" pos:end="47:52">bytes</name></expr></argument>,

                                   <argument pos:start="49:36" pos:end="49:49"><expr pos:start="49:36" pos:end="49:49"><name pos:start="49:36" pos:end="49:49">cluster_offset</name></expr></argument>, <argument pos:start="49:52" pos:end="49:64"><expr pos:start="49:52" pos:end="49:64"><name pos:start="49:52" pos:end="49:64">cluster_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:32"><expr pos:start="53:5" pos:end="53:31"><name pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:7">iov</name><operator pos:start="53:8" pos:end="53:8">.</operator><name pos:start="53:9" pos:end="53:15">iov_len</name></name> <operator pos:start="53:17" pos:end="53:17">=</operator> <name pos:start="53:19" pos:end="53:31">cluster_bytes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:72"><expr pos:start="55:5" pos:end="55:71"><name pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:7">iov</name><operator pos:start="55:8" pos:end="55:8">.</operator><name pos:start="55:9" pos:end="55:16">iov_base</name></name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:32">bounce_buffer</name> <operator pos:start="55:34" pos:end="55:34">=</operator> <call pos:start="55:36" pos:end="55:71"><name pos:start="55:36" pos:end="55:54">qemu_try_blockalign</name><argument_list pos:start="55:55" pos:end="55:71">(<argument pos:start="55:56" pos:end="55:57"><expr pos:start="55:56" pos:end="55:57"><name pos:start="55:56" pos:end="55:57">bs</name></expr></argument>, <argument pos:start="55:60" pos:end="55:70"><expr pos:start="55:60" pos:end="55:70"><name pos:start="55:60" pos:end="55:70"><name pos:start="55:60" pos:end="55:62">iov</name><operator pos:start="55:63" pos:end="55:63">.</operator><name pos:start="55:64" pos:end="55:70">iov_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:30">(<expr pos:start="57:9" pos:end="57:29"><name pos:start="57:9" pos:end="57:21">bounce_buffer</name> <operator pos:start="57:23" pos:end="57:24">==</operator> <name pos:start="57:26" pos:end="57:29">NULL</name></expr>)</condition> <block pos:start="57:32" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:17">

        <expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <operator pos:start="59:15" pos:end="59:15">-</operator><name pos:start="59:16" pos:end="59:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:17">goto <name pos:start="61:14" pos:end="61:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:52"><expr pos:start="67:5" pos:end="67:51"><call pos:start="67:5" pos:end="67:51"><name pos:start="67:5" pos:end="67:28">qemu_iovec_init_external</name><argument_list pos:start="67:29" pos:end="67:51">(<argument pos:start="67:30" pos:end="67:41"><expr pos:start="67:30" pos:end="67:41"><operator pos:start="67:30" pos:end="67:30">&amp;</operator><name pos:start="67:31" pos:end="67:41">bounce_qiov</name></expr></argument>, <argument pos:start="67:44" pos:end="67:47"><expr pos:start="67:44" pos:end="67:47"><operator pos:start="67:44" pos:end="67:44">&amp;</operator><name pos:start="67:45" pos:end="67:47">iov</name></expr></argument>, <argument pos:start="67:50" pos:end="67:50"><expr pos:start="67:50" pos:end="67:50"><literal type="number" pos:start="67:50" pos:end="67:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="73:46"><expr pos:start="71:5" pos:end="73:45"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="73:45"><name pos:start="71:11" pos:end="71:28">bdrv_driver_preadv</name><argument_list pos:start="71:29" pos:end="73:45">(<argument pos:start="71:30" pos:end="71:31"><expr pos:start="71:30" pos:end="71:31"><name pos:start="71:30" pos:end="71:31">bs</name></expr></argument>, <argument pos:start="71:34" pos:end="71:47"><expr pos:start="71:34" pos:end="71:47"><name pos:start="71:34" pos:end="71:47">cluster_offset</name></expr></argument>, <argument pos:start="71:50" pos:end="71:62"><expr pos:start="71:50" pos:end="71:62"><name pos:start="71:50" pos:end="71:62">cluster_bytes</name></expr></argument>,

                             <argument pos:start="73:30" pos:end="73:41"><expr pos:start="73:30" pos:end="73:41"><operator pos:start="73:30" pos:end="73:30">&amp;</operator><name pos:start="73:31" pos:end="73:41">bounce_qiov</name></expr></argument>, <argument pos:start="73:44" pos:end="73:44"><expr pos:start="73:44" pos:end="73:44"><literal type="number" pos:start="73:44" pos:end="73:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:16">(<expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">&lt;</operator> <literal type="number" pos:start="75:15" pos:end="75:15">0</literal></expr>)</condition> <block pos:start="75:18" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:17">

        <goto pos:start="77:9" pos:end="77:17">goto <name pos:start="77:14" pos:end="77:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="107:5"><if pos:start="83:5" pos:end="95:5">if <condition pos:start="83:8" pos:end="85:51">(<expr pos:start="83:9" pos:end="85:50"><name pos:start="83:9" pos:end="83:34"><name pos:start="83:9" pos:end="83:11">drv</name><operator pos:start="83:12" pos:end="83:13">-&gt;</operator><name pos:start="83:14" pos:end="83:34">bdrv_co_pwrite_zeroes</name></name> <operator pos:start="83:36" pos:end="83:37">&amp;&amp;</operator>

        <call pos:start="85:9" pos:end="85:50"><name pos:start="85:9" pos:end="85:22">buffer_is_zero</name><argument_list pos:start="85:23" pos:end="85:50">(<argument pos:start="85:24" pos:end="85:36"><expr pos:start="85:24" pos:end="85:36"><name pos:start="85:24" pos:end="85:36">bounce_buffer</name></expr></argument>, <argument pos:start="85:39" pos:end="85:49"><expr pos:start="85:39" pos:end="85:49"><name pos:start="85:39" pos:end="85:49"><name pos:start="85:39" pos:end="85:41">iov</name><operator pos:start="85:42" pos:end="85:42">.</operator><name pos:start="85:43" pos:end="85:49">iov_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:53" pos:end="95:5">{<block_content pos:start="93:9" pos:end="93:77">

        <comment type="block" pos:start="87:9" pos:end="91:49">/* FIXME: Should we (perhaps conditionally) be setting

         * BDRV_REQ_MAY_UNMAP, if it will allow for a sparser copy

         * that still correctly reads as zero? */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:77"><expr pos:start="93:9" pos:end="93:76"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:76"><name pos:start="93:15" pos:end="93:38">bdrv_co_do_pwrite_zeroes</name><argument_list pos:start="93:39" pos:end="93:76">(<argument pos:start="93:40" pos:end="93:41"><expr pos:start="93:40" pos:end="93:41"><name pos:start="93:40" pos:end="93:41">bs</name></expr></argument>, <argument pos:start="93:44" pos:end="93:57"><expr pos:start="93:44" pos:end="93:57"><name pos:start="93:44" pos:end="93:57">cluster_offset</name></expr></argument>, <argument pos:start="93:60" pos:end="93:72"><expr pos:start="93:60" pos:end="93:72"><name pos:start="93:60" pos:end="93:72">cluster_bytes</name></expr></argument>, <argument pos:start="93:75" pos:end="93:75"><expr pos:start="93:75" pos:end="93:75"><literal type="number" pos:start="93:75" pos:end="93:75">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="107:5">else <block pos:start="95:12" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:51">

        <comment type="block" pos:start="97:9" pos:end="101:11">/* This does not change the data on the disk, it is not necessary

         * to flush even in cache=writethrough mode.

         */</comment>

        <expr_stmt pos:start="103:9" pos:end="105:51"><expr pos:start="103:9" pos:end="105:50"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="105:50"><name pos:start="103:15" pos:end="103:33">bdrv_driver_pwritev</name><argument_list pos:start="103:34" pos:end="105:50">(<argument pos:start="103:35" pos:end="103:36"><expr pos:start="103:35" pos:end="103:36"><name pos:start="103:35" pos:end="103:36">bs</name></expr></argument>, <argument pos:start="103:39" pos:end="103:52"><expr pos:start="103:39" pos:end="103:52"><name pos:start="103:39" pos:end="103:52">cluster_offset</name></expr></argument>, <argument pos:start="103:55" pos:end="103:67"><expr pos:start="103:55" pos:end="103:67"><name pos:start="103:55" pos:end="103:67">cluster_bytes</name></expr></argument>,

                                  <argument pos:start="105:35" pos:end="105:46"><expr pos:start="105:35" pos:end="105:46"><operator pos:start="105:35" pos:end="105:35">&amp;</operator><name pos:start="105:36" pos:end="105:46">bounce_qiov</name></expr></argument>, <argument pos:start="105:49" pos:end="105:49"><expr pos:start="105:49" pos:end="105:49"><literal type="number" pos:start="105:49" pos:end="105:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="111:5" pos:end="123:5"><if pos:start="111:5" pos:end="123:5">if <condition pos:start="111:8" pos:end="111:16">(<expr pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">&lt;</operator> <literal type="number" pos:start="111:15" pos:end="111:15">0</literal></expr>)</condition> <block pos:start="111:18" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:17">

        <comment type="block" pos:start="113:9" pos:end="119:11">/* It might be okay to ignore write errors for guest requests.  If this

         * is a deliberate copy-on-read then we don't want to ignore the error.

         * Simply report it in all cases.

         */</comment>

        <goto pos:start="121:9" pos:end="121:17">goto <name pos:start="121:14" pos:end="121:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:41"><expr pos:start="127:5" pos:end="127:40"><name pos:start="127:5" pos:end="127:14">skip_bytes</name> <operator pos:start="127:16" pos:end="127:16">=</operator> <name pos:start="127:18" pos:end="127:23">offset</name> <operator pos:start="127:25" pos:end="127:25">-</operator> <name pos:start="127:27" pos:end="127:40">cluster_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:68"><expr pos:start="129:5" pos:end="129:67"><call pos:start="129:5" pos:end="129:67"><name pos:start="129:5" pos:end="129:23">qemu_iovec_from_buf</name><argument_list pos:start="129:24" pos:end="129:67">(<argument pos:start="129:25" pos:end="129:28"><expr pos:start="129:25" pos:end="129:28"><name pos:start="129:25" pos:end="129:28">qiov</name></expr></argument>, <argument pos:start="129:31" pos:end="129:31"><expr pos:start="129:31" pos:end="129:31"><literal type="number" pos:start="129:31" pos:end="129:31">0</literal></expr></argument>, <argument pos:start="129:34" pos:end="129:59"><expr pos:start="129:34" pos:end="129:59"><name pos:start="129:34" pos:end="129:46">bounce_buffer</name> <operator pos:start="129:48" pos:end="129:48">+</operator> <name pos:start="129:50" pos:end="129:59">skip_bytes</name></expr></argument>, <argument pos:start="129:62" pos:end="129:66"><expr pos:start="129:62" pos:end="129:66"><name pos:start="129:62" pos:end="129:66">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="133:1" pos:end="133:4"><name pos:start="133:1" pos:end="133:3">err</name>:</label>

    <expr_stmt pos:start="135:5" pos:end="135:30"><expr pos:start="135:5" pos:end="135:29"><call pos:start="135:5" pos:end="135:29"><name pos:start="135:5" pos:end="135:14">qemu_vfree</name><argument_list pos:start="135:15" pos:end="135:29">(<argument pos:start="135:16" pos:end="135:28"><expr pos:start="135:16" pos:end="135:28"><name pos:start="135:16" pos:end="135:28">bounce_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="137:5" pos:end="137:15">return <expr pos:start="137:12" pos:end="137:14"><name pos:start="137:12" pos:end="137:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
