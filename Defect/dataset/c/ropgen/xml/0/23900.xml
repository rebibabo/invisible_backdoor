<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23900.c" pos:tabs="8"><function pos:start="1:1" pos:end="373:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">mjpeg_decode_frame</name><parameter_list pos:start="1:30" pos:end="5:57">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, 

                              <parameter pos:start="3:31" pos:end="3:40"><decl pos:start="3:31" pos:end="3:40"><type pos:start="3:31" pos:end="3:40"><name pos:start="3:31" pos:end="3:34">void</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">data</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:56"><decl pos:start="3:43" pos:end="3:56"><type pos:start="3:43" pos:end="3:56"><name pos:start="3:43" pos:end="3:45">int</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:56">data_size</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:42"><decl pos:start="5:31" pos:end="5:42"><type pos:start="5:31" pos:end="5:42"><name pos:start="5:31" pos:end="5:37">uint8_t</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:42">buf</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:56"><decl pos:start="5:45" pos:end="5:56"><type pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:47">int</name></type> <name pos:start="5:49" pos:end="5:56">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="373:1">{<block_content pos:start="9:5" pos:end="371:25">

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:22">MJpegDecodeContext</name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:25">s</name> <init pos:start="9:27" pos:end="9:44">= <expr pos:start="9:29" pos:end="9:44"><name pos:start="9:29" pos:end="9:44"><name pos:start="9:29" pos:end="9:33">avctx</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">buf_end</name></decl>, <decl pos:start="11:23" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:30">buf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:21">start_code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">AVPicture</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:22">picture</name> <init pos:start="15:24" pos:end="15:29">= <expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">data</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:19"><expr pos:start="19:5" pos:end="19:18"><operator pos:start="19:5" pos:end="19:5">*</operator><name pos:start="19:6" pos:end="19:14">data_size</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <literal type="number" pos:start="19:18" pos:end="19:18">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="25:5" pos:end="27:17"><if pos:start="25:5" pos:end="27:17">if <condition pos:start="25:8" pos:end="25:22">(<expr pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:16">buf_size</name> <operator pos:start="25:18" pos:end="25:19">==</operator> <literal type="number" pos:start="25:21" pos:end="25:21">0</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:17"><block_content pos:start="27:9" pos:end="27:17">

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:18"><expr pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:11">buf_ptr</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:17">buf</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:29"><expr pos:start="33:5" pos:end="33:28"><name pos:start="33:5" pos:end="33:11">buf_end</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:17">buf</name> <operator pos:start="33:19" pos:end="33:19">+</operator> <name pos:start="33:21" pos:end="33:28">buf_size</name></expr>;</expr_stmt>

    <while pos:start="35:5" pos:end="363:5">while <condition pos:start="35:11" pos:end="35:29">(<expr pos:start="35:12" pos:end="35:28"><name pos:start="35:12" pos:end="35:18">buf_ptr</name> <operator pos:start="35:20" pos:end="35:20">&lt;</operator> <name pos:start="35:22" pos:end="35:28">buf_end</name></expr>)</condition> <block pos:start="35:31" pos:end="363:5">{<block_content pos:start="39:9" pos:end="361:9">

        <comment type="block" pos:start="37:9" pos:end="37:36">/* find start next marker */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:52"><expr pos:start="39:9" pos:end="39:51"><name pos:start="39:9" pos:end="39:18">start_code</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <call pos:start="39:22" pos:end="39:51"><name pos:start="39:22" pos:end="39:32">find_marker</name><argument_list pos:start="39:33" pos:end="39:51">(<argument pos:start="39:34" pos:end="39:41"><expr pos:start="39:34" pos:end="39:41"><operator pos:start="39:34" pos:end="39:34">&amp;</operator><name pos:start="39:35" pos:end="39:41">buf_ptr</name></expr></argument>, <argument pos:start="39:44" pos:end="39:50"><expr pos:start="39:44" pos:end="39:50"><name pos:start="39:44" pos:end="39:50">buf_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<block pos:start="41:9" pos:end="361:9">{<block_content pos:start="45:13" pos:end="359:13">

	    <comment type="block" pos:start="43:13" pos:end="43:21">/* EOF */</comment>

            <if_stmt pos:start="45:13" pos:end="359:13"><if pos:start="45:13" pos:end="49:13">if <condition pos:start="45:16" pos:end="45:31">(<expr pos:start="45:17" pos:end="45:30"><name pos:start="45:17" pos:end="45:26">start_code</name> <operator pos:start="45:28" pos:end="45:28">&lt;</operator> <literal type="number" pos:start="45:30" pos:end="45:30">0</literal></expr>)</condition> <block pos:start="45:33" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:29">

		<goto pos:start="47:17" pos:end="47:29">goto <name pos:start="47:22" pos:end="47:28">the_end</name>;</goto>

            </block_content>}</block></if> <else pos:start="49:15" pos:end="359:13">else <block pos:start="49:20" pos:end="359:13">{<block_content pos:start="51:17" pos:end="357:74">

                <expr_stmt pos:start="51:17" pos:end="51:91"><expr pos:start="51:17" pos:end="51:90"><call pos:start="51:17" pos:end="51:90"><name pos:start="51:17" pos:end="51:23">dprintf</name><argument_list pos:start="51:24" pos:end="51:90">(<argument pos:start="51:25" pos:end="51:58"><expr pos:start="51:25" pos:end="51:58"><literal type="string" pos:start="51:25" pos:end="51:58">"marker=%x avail_size_in_buf=%d\n"</literal></expr></argument>, <argument pos:start="51:61" pos:end="51:70"><expr pos:start="51:61" pos:end="51:70"><name pos:start="51:61" pos:end="51:70">start_code</name></expr></argument>, <argument pos:start="51:73" pos:end="51:89"><expr pos:start="51:73" pos:end="51:89"><name pos:start="51:73" pos:end="51:79">buf_end</name> <operator pos:start="51:81" pos:end="51:81">-</operator> <name pos:start="51:83" pos:end="51:89">buf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		

		<if_stmt pos:start="55:17" pos:end="69:17"><if pos:start="55:17" pos:end="69:17">if <condition pos:start="55:20" pos:end="55:57">(<expr pos:start="55:21" pos:end="55:56"><operator pos:start="55:21" pos:end="55:21">(</operator><name pos:start="55:22" pos:end="55:28">buf_end</name> <operator pos:start="55:30" pos:end="55:30">-</operator> <name pos:start="55:32" pos:end="55:38">buf_ptr</name><operator pos:start="55:39" pos:end="55:39">)</operator> <operator pos:start="55:41" pos:end="55:41">&gt;</operator> <name pos:start="55:43" pos:end="55:56"><name pos:start="55:43" pos:end="55:43">s</name><operator pos:start="55:44" pos:end="55:45">-&gt;</operator><name pos:start="55:46" pos:end="55:56">buffer_size</name></name></expr>)</condition>

		<block pos:start="57:17" pos:end="69:17">{<block_content pos:start="59:21" pos:end="67:40">

		    <expr_stmt pos:start="59:21" pos:end="59:39"><expr pos:start="59:21" pos:end="59:38"><call pos:start="59:21" pos:end="59:38"><name pos:start="59:21" pos:end="59:27">av_free</name><argument_list pos:start="59:28" pos:end="59:38">(<argument pos:start="59:29" pos:end="59:37"><expr pos:start="59:29" pos:end="59:37"><name pos:start="59:29" pos:end="59:37"><name pos:start="59:29" pos:end="59:29">s</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:37">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="61:21" pos:end="61:53"><expr pos:start="61:21" pos:end="61:52"><name pos:start="61:21" pos:end="61:34"><name pos:start="61:21" pos:end="61:21">s</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:34">buffer_size</name></name> <operator pos:start="61:36" pos:end="61:36">=</operator> <name pos:start="61:38" pos:end="61:44">buf_end</name><operator pos:start="61:45" pos:end="61:45">-</operator><name pos:start="61:46" pos:end="61:52">buf_ptr</name></expr>;</expr_stmt>

		    <expr_stmt pos:start="63:21" pos:end="63:58"><expr pos:start="63:21" pos:end="63:57"><name pos:start="63:21" pos:end="63:29"><name pos:start="63:21" pos:end="63:21">s</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:29">buffer</name></name> <operator pos:start="63:31" pos:end="63:31">=</operator> <call pos:start="63:33" pos:end="63:57"><name pos:start="63:33" pos:end="63:41">av_malloc</name><argument_list pos:start="63:42" pos:end="63:57">(<argument pos:start="63:43" pos:end="63:56"><expr pos:start="63:43" pos:end="63:56"><name pos:start="63:43" pos:end="63:56"><name pos:start="63:43" pos:end="63:43">s</name><operator pos:start="63:44" pos:end="63:45">-&gt;</operator><name pos:start="63:46" pos:end="63:56">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <expr_stmt pos:start="65:21" pos:end="67:40"><expr pos:start="65:21" pos:end="67:39"><call pos:start="65:21" pos:end="67:39"><name pos:start="65:21" pos:end="65:27">dprintf</name><argument_list pos:start="65:28" pos:end="67:39">(<argument pos:start="65:29" pos:end="65:71"><expr pos:start="65:29" pos:end="65:71"><literal type="string" pos:start="65:29" pos:end="65:71">"buffer too small, expanding to %d bytes\n"</literal></expr></argument>,

			<argument pos:start="67:25" pos:end="67:38"><expr pos:start="67:25" pos:end="67:38"><name pos:start="67:25" pos:end="67:38"><name pos:start="67:25" pos:end="67:25">s</name><operator pos:start="67:26" pos:end="67:27">-&gt;</operator><name pos:start="67:28" pos:end="67:38">buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

		

		<comment type="block" pos:start="73:17" pos:end="73:44">/* unescape buffer of SOS */</comment>

		<if_stmt pos:start="75:17" pos:end="129:74"><if pos:start="75:17" pos:end="125:17">if <condition pos:start="75:20" pos:end="75:38">(<expr pos:start="75:21" pos:end="75:37"><name pos:start="75:21" pos:end="75:30">start_code</name> <operator pos:start="75:32" pos:end="75:33">==</operator> <name pos:start="75:35" pos:end="75:37">SOS</name></expr>)</condition>

		<block pos:start="77:17" pos:end="125:17">{<block_content pos:start="79:21" pos:end="123:65">

		    <decl_stmt pos:start="79:21" pos:end="79:43"><decl pos:start="79:21" pos:end="79:42"><type pos:start="79:21" pos:end="79:29"><name pos:start="79:21" pos:end="79:27">uint8_t</name> <modifier pos:start="79:29" pos:end="79:29">*</modifier></type><name pos:start="79:30" pos:end="79:32">src</name> <init pos:start="79:34" pos:end="79:42">= <expr pos:start="79:36" pos:end="79:42"><name pos:start="79:36" pos:end="79:42">buf_ptr</name></expr></init></decl>;</decl_stmt>

		    <decl_stmt pos:start="81:21" pos:end="81:45"><decl pos:start="81:21" pos:end="81:44"><type pos:start="81:21" pos:end="81:29"><name pos:start="81:21" pos:end="81:27">uint8_t</name> <modifier pos:start="81:29" pos:end="81:29">*</modifier></type><name pos:start="81:30" pos:end="81:32">dst</name> <init pos:start="81:34" pos:end="81:44">= <expr pos:start="81:36" pos:end="81:44"><name pos:start="81:36" pos:end="81:44"><name pos:start="81:36" pos:end="81:36">s</name><operator pos:start="81:37" pos:end="81:38">-&gt;</operator><name pos:start="81:39" pos:end="81:44">buffer</name></name></expr></init></decl>;</decl_stmt>



		    <while pos:start="85:21" pos:end="115:21">while <condition pos:start="85:27" pos:end="85:39">(<expr pos:start="85:28" pos:end="85:38"><name pos:start="85:28" pos:end="85:30">src</name><operator pos:start="85:31" pos:end="85:31">&lt;</operator><name pos:start="85:32" pos:end="85:38">buf_end</name></expr>)</condition>

		    <block pos:start="87:21" pos:end="115:21">{<block_content pos:start="89:25" pos:end="113:25">

			<decl_stmt pos:start="89:25" pos:end="89:45"><decl pos:start="89:25" pos:end="89:44"><type pos:start="89:25" pos:end="89:31"><name pos:start="89:25" pos:end="89:31">uint8_t</name></type> <name pos:start="89:33" pos:end="89:33">x</name> <init pos:start="89:35" pos:end="89:44">= <expr pos:start="89:37" pos:end="89:44"><operator pos:start="89:37" pos:end="89:37">*</operator><operator pos:start="89:38" pos:end="89:38">(</operator><name pos:start="89:39" pos:end="89:41">src</name><operator pos:start="89:42" pos:end="89:43">++</operator><operator pos:start="89:44" pos:end="89:44">)</operator></expr></init></decl>;</decl_stmt>



			<expr_stmt pos:start="93:25" pos:end="93:37"><expr pos:start="93:25" pos:end="93:36"><operator pos:start="93:25" pos:end="93:25">*</operator><operator pos:start="93:26" pos:end="93:26">(</operator><name pos:start="93:27" pos:end="93:29">dst</name><operator pos:start="93:30" pos:end="93:31">++</operator><operator pos:start="93:32" pos:end="93:32">)</operator> <operator pos:start="93:34" pos:end="93:34">=</operator> <name pos:start="93:36" pos:end="93:36">x</name></expr>;</expr_stmt>

			<if_stmt pos:start="95:25" pos:end="113:25"><if pos:start="95:25" pos:end="113:25">if <condition pos:start="95:28" pos:end="95:38">(<expr pos:start="95:29" pos:end="95:37"><name pos:start="95:29" pos:end="95:29">x</name> <operator pos:start="95:31" pos:end="95:32">==</operator> <literal type="number" pos:start="95:34" pos:end="95:37">0xff</literal></expr>)</condition>

			<block pos:start="97:25" pos:end="113:25">{<block_content pos:start="99:29" pos:end="111:38">

			    <while pos:start="99:29" pos:end="99:54">while<condition pos:start="99:34" pos:end="99:47">(<expr pos:start="99:35" pos:end="99:46"><operator pos:start="99:35" pos:end="99:35">*</operator><name pos:start="99:36" pos:end="99:38">src</name> <operator pos:start="99:40" pos:end="99:41">==</operator> <literal type="number" pos:start="99:43" pos:end="99:46">0xff</literal></expr>)</condition><block type="pseudo" pos:start="99:49" pos:end="99:54"><block_content pos:start="99:49" pos:end="99:54"> <expr_stmt pos:start="99:49" pos:end="99:54"><expr pos:start="99:49" pos:end="99:53"><name pos:start="99:49" pos:end="99:51">src</name><operator pos:start="99:52" pos:end="99:53">++</operator></expr>;</expr_stmt></block_content></block></while>



			    <expr_stmt pos:start="103:29" pos:end="103:41"><expr pos:start="103:29" pos:end="103:40"><name pos:start="103:29" pos:end="103:29">x</name> <operator pos:start="103:31" pos:end="103:31">=</operator> <operator pos:start="103:33" pos:end="103:33">*</operator><operator pos:start="103:34" pos:end="103:34">(</operator><name pos:start="103:35" pos:end="103:37">src</name><operator pos:start="103:38" pos:end="103:39">++</operator><operator pos:start="103:40" pos:end="103:40">)</operator></expr>;</expr_stmt>

			    <if_stmt pos:start="105:29" pos:end="111:38"><if pos:start="105:29" pos:end="107:45">if <condition pos:start="105:32" pos:end="105:55">(<expr pos:start="105:33" pos:end="105:54"><name pos:start="105:33" pos:end="105:33">x</name> <operator pos:start="105:35" pos:end="105:36">&gt;=</operator> <literal type="number" pos:start="105:38" pos:end="105:41">0xd0</literal> <operator pos:start="105:43" pos:end="105:44">&amp;&amp;</operator> <name pos:start="105:46" pos:end="105:46">x</name> <operator pos:start="105:48" pos:end="105:49">&lt;=</operator> <literal type="number" pos:start="105:51" pos:end="105:54">0xd7</literal></expr>)</condition><block type="pseudo" pos:start="107:33" pos:end="107:45"><block_content pos:start="107:33" pos:end="107:45">

				<expr_stmt pos:start="107:33" pos:end="107:45"><expr pos:start="107:33" pos:end="107:44"><operator pos:start="107:33" pos:end="107:33">*</operator><operator pos:start="107:34" pos:end="107:34">(</operator><name pos:start="107:35" pos:end="107:37">dst</name><operator pos:start="107:38" pos:end="107:39">++</operator><operator pos:start="107:40" pos:end="107:40">)</operator> <operator pos:start="107:42" pos:end="107:42">=</operator> <name pos:start="107:44" pos:end="107:44">x</name></expr>;</expr_stmt></block_content></block></if>

			    <if type="elseif" pos:start="109:29" pos:end="111:38">else if <condition pos:start="109:37" pos:end="109:39">(<expr pos:start="109:38" pos:end="109:38"><name pos:start="109:38" pos:end="109:38">x</name></expr>)</condition><block type="pseudo" pos:start="111:33" pos:end="111:38"><block_content pos:start="111:33" pos:end="111:38">

				<break pos:start="111:33" pos:end="111:38">break;</break></block_content></block></if></if_stmt>

			</block_content>}</block></if></if_stmt>

		    </block_content>}</block></while>

		    <expr_stmt pos:start="117:21" pos:end="117:74"><expr pos:start="117:21" pos:end="117:73"><call pos:start="117:21" pos:end="117:73"><name pos:start="117:21" pos:end="117:33">init_get_bits</name><argument_list pos:start="117:34" pos:end="117:73">(<argument pos:start="117:35" pos:end="117:40"><expr pos:start="117:35" pos:end="117:40"><operator pos:start="117:35" pos:end="117:35">&amp;</operator><name pos:start="117:36" pos:end="117:40"><name pos:start="117:36" pos:end="117:36">s</name><operator pos:start="117:37" pos:end="117:38">-&gt;</operator><name pos:start="117:39" pos:end="117:40">gb</name></name></expr></argument>, <argument pos:start="117:43" pos:end="117:51"><expr pos:start="117:43" pos:end="117:51"><name pos:start="117:43" pos:end="117:51"><name pos:start="117:43" pos:end="117:43">s</name><operator pos:start="117:44" pos:end="117:45">-&gt;</operator><name pos:start="117:46" pos:end="117:51">buffer</name></name></expr></argument>, <argument pos:start="117:54" pos:end="117:72"><expr pos:start="117:54" pos:end="117:72"><operator pos:start="117:54" pos:end="117:54">(</operator><name pos:start="117:55" pos:end="117:57">dst</name> <operator pos:start="117:59" pos:end="117:59">-</operator> <name pos:start="117:61" pos:end="117:69"><name pos:start="117:61" pos:end="117:61">s</name><operator pos:start="117:62" pos:end="117:63">-&gt;</operator><name pos:start="117:64" pos:end="117:69">buffer</name></name><operator pos:start="117:70" pos:end="117:70">)</operator><operator pos:start="117:71" pos:end="117:71">*</operator><literal type="number" pos:start="117:72" pos:end="117:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    

		    <expr_stmt pos:start="121:21" pos:end="123:65"><expr pos:start="121:21" pos:end="123:64"><call pos:start="121:21" pos:end="123:64"><name pos:start="121:21" pos:end="121:27">dprintf</name><argument_list pos:start="121:28" pos:end="123:64">(<argument pos:start="121:29" pos:end="121:57"><expr pos:start="121:29" pos:end="121:57"><literal type="string" pos:start="121:29" pos:end="121:57">"escaping removed %d bytes\n"</literal></expr></argument>,

			<argument pos:start="123:25" pos:end="123:63"><expr pos:start="123:25" pos:end="123:63"><operator pos:start="123:25" pos:end="123:25">(</operator><name pos:start="123:26" pos:end="123:32">buf_end</name> <operator pos:start="123:34" pos:end="123:34">-</operator> <name pos:start="123:36" pos:end="123:42">buf_ptr</name><operator pos:start="123:43" pos:end="123:43">)</operator> <operator pos:start="123:45" pos:end="123:45">-</operator> <operator pos:start="123:47" pos:end="123:47">(</operator><name pos:start="123:48" pos:end="123:50">dst</name> <operator pos:start="123:52" pos:end="123:52">-</operator> <name pos:start="123:54" pos:end="123:62"><name pos:start="123:54" pos:end="123:54">s</name><operator pos:start="123:55" pos:end="123:56">-&gt;</operator><name pos:start="123:57" pos:end="123:62">buffer</name></name><operator pos:start="123:63" pos:end="123:63">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if>

		<else pos:start="127:17" pos:end="129:74">else<block type="pseudo" pos:start="129:21" pos:end="129:74"><block_content pos:start="129:21" pos:end="129:74">

		    <expr_stmt pos:start="129:21" pos:end="129:74"><expr pos:start="129:21" pos:end="129:73"><call pos:start="129:21" pos:end="129:73"><name pos:start="129:21" pos:end="129:33">init_get_bits</name><argument_list pos:start="129:34" pos:end="129:73">(<argument pos:start="129:35" pos:end="129:40"><expr pos:start="129:35" pos:end="129:40"><operator pos:start="129:35" pos:end="129:35">&amp;</operator><name pos:start="129:36" pos:end="129:40"><name pos:start="129:36" pos:end="129:36">s</name><operator pos:start="129:37" pos:end="129:38">-&gt;</operator><name pos:start="129:39" pos:end="129:40">gb</name></name></expr></argument>, <argument pos:start="129:43" pos:end="129:49"><expr pos:start="129:43" pos:end="129:49"><name pos:start="129:43" pos:end="129:49">buf_ptr</name></expr></argument>, <argument pos:start="129:52" pos:end="129:72"><expr pos:start="129:52" pos:end="129:72"><operator pos:start="129:52" pos:end="129:52">(</operator><name pos:start="129:53" pos:end="129:59">buf_end</name> <operator pos:start="129:61" pos:end="129:61">-</operator> <name pos:start="129:63" pos:end="129:69">buf_ptr</name><operator pos:start="129:70" pos:end="129:70">)</operator><operator pos:start="129:71" pos:end="129:71">*</operator><literal type="number" pos:start="129:72" pos:end="129:72">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		

		<expr_stmt pos:start="133:17" pos:end="133:43"><expr pos:start="133:17" pos:end="133:42"><name pos:start="133:17" pos:end="133:29"><name pos:start="133:17" pos:end="133:17">s</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:29">start_code</name></name> <operator pos:start="133:31" pos:end="133:31">=</operator> <name pos:start="133:33" pos:end="133:42">start_code</name></expr>;</expr_stmt>

                <if_stmt pos:start="135:17" pos:end="139:17"><if pos:start="135:17" pos:end="139:17">if<condition pos:start="135:19" pos:end="135:56">(<expr pos:start="135:20" pos:end="135:55"><name pos:start="135:20" pos:end="135:34"><name pos:start="135:20" pos:end="135:20">s</name><operator pos:start="135:21" pos:end="135:22">-&gt;</operator><name pos:start="135:23" pos:end="135:27">avctx</name><operator pos:start="135:28" pos:end="135:29">-&gt;</operator><name pos:start="135:30" pos:end="135:34">debug</name></name> <operator pos:start="135:36" pos:end="135:36">&amp;</operator> <name pos:start="135:38" pos:end="135:55">FF_DEBUG_STARTCODE</name></expr>)</condition><block pos:start="135:57" pos:end="139:17">{<block_content pos:start="137:21" pos:end="137:58">

                    <expr_stmt pos:start="137:21" pos:end="137:58"><expr pos:start="137:21" pos:end="137:57"><call pos:start="137:21" pos:end="137:57"><name pos:start="137:21" pos:end="137:26">printf</name><argument_list pos:start="137:27" pos:end="137:57">(<argument pos:start="137:28" pos:end="137:44"><expr pos:start="137:28" pos:end="137:44"><literal type="string" pos:start="137:28" pos:end="137:44">"startcode: %X\n"</literal></expr></argument>, <argument pos:start="137:47" pos:end="137:56"><expr pos:start="137:47" pos:end="137:56"><name pos:start="137:47" pos:end="137:56">start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



		<comment type="block" pos:start="143:17" pos:end="143:37">/* process markers */</comment>

		<if_stmt pos:start="145:17" pos:end="163:17"><if pos:start="145:17" pos:end="149:17">if <condition pos:start="145:20" pos:end="145:61">(<expr pos:start="145:21" pos:end="145:60"><name pos:start="145:21" pos:end="145:30">start_code</name> <operator pos:start="145:32" pos:end="145:33">&gt;=</operator> <literal type="number" pos:start="145:35" pos:end="145:38">0xd0</literal> <operator pos:start="145:40" pos:end="145:41">&amp;&amp;</operator> <name pos:start="145:43" pos:end="145:52">start_code</name> <operator pos:start="145:54" pos:end="145:55">&lt;=</operator> <literal type="number" pos:start="145:57" pos:end="145:60">0xd7</literal></expr>)</condition> <block pos:start="145:63" pos:end="149:17">{<block_content pos:start="147:21" pos:end="147:69">

		    <expr_stmt pos:start="147:21" pos:end="147:69"><expr pos:start="147:21" pos:end="147:68"><call pos:start="147:21" pos:end="147:68"><name pos:start="147:21" pos:end="147:27">dprintf</name><argument_list pos:start="147:28" pos:end="147:68">(<argument pos:start="147:29" pos:end="147:50"><expr pos:start="147:29" pos:end="147:50"><literal type="string" pos:start="147:29" pos:end="147:50">"restart marker: %d\n"</literal></expr></argument>, <argument pos:start="147:53" pos:end="147:67"><expr pos:start="147:53" pos:end="147:67"><name pos:start="147:53" pos:end="147:62">start_code</name><operator pos:start="147:63" pos:end="147:63">&amp;</operator><literal type="number" pos:start="147:64" pos:end="147:67">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <if type="elseif" pos:start="149:19" pos:end="163:17">else if <condition pos:start="149:27" pos:end="149:44">(<expr pos:start="149:28" pos:end="149:43"><name pos:start="149:28" pos:end="149:43"><name pos:start="149:28" pos:end="149:28">s</name><operator pos:start="149:29" pos:end="149:30">-&gt;</operator><name pos:start="149:31" pos:end="149:43">first_picture</name></name></expr>)</condition> <block pos:start="149:46" pos:end="163:17">{<block_content pos:start="153:21" pos:end="161:44">

		    <comment type="block" pos:start="151:21" pos:end="151:36">/* APP fields */</comment>

		    <if_stmt pos:start="153:21" pos:end="161:44"><if pos:start="153:21" pos:end="155:44">if <condition pos:start="153:24" pos:end="153:65">(<expr pos:start="153:25" pos:end="153:64"><name pos:start="153:25" pos:end="153:34">start_code</name> <operator pos:start="153:36" pos:end="153:37">&gt;=</operator> <literal type="number" pos:start="153:39" pos:end="153:42">0xe0</literal> <operator pos:start="153:44" pos:end="153:45">&amp;&amp;</operator> <name pos:start="153:47" pos:end="153:56">start_code</name> <operator pos:start="153:58" pos:end="153:59">&lt;=</operator> <literal type="number" pos:start="153:61" pos:end="153:64">0xef</literal></expr>)</condition><block type="pseudo" pos:start="155:25" pos:end="155:44"><block_content pos:start="155:25" pos:end="155:44">

			<expr_stmt pos:start="155:25" pos:end="155:44"><expr pos:start="155:25" pos:end="155:43"><call pos:start="155:25" pos:end="155:43"><name pos:start="155:25" pos:end="155:40">mjpeg_decode_app</name><argument_list pos:start="155:41" pos:end="155:43">(<argument pos:start="155:42" pos:end="155:42"><expr pos:start="155:42" pos:end="155:42"><name pos:start="155:42" pos:end="155:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		    <comment type="block" pos:start="157:21" pos:end="157:33">/* Comment */</comment>

		    <if type="elseif" pos:start="159:21" pos:end="161:44">else if <condition pos:start="159:29" pos:end="159:47">(<expr pos:start="159:30" pos:end="159:46"><name pos:start="159:30" pos:end="159:39">start_code</name> <operator pos:start="159:41" pos:end="159:42">==</operator> <name pos:start="159:44" pos:end="159:46">COM</name></expr>)</condition><block type="pseudo" pos:start="161:25" pos:end="161:44"><block_content pos:start="161:25" pos:end="161:44">

			<expr_stmt pos:start="161:25" pos:end="161:44"><expr pos:start="161:25" pos:end="161:43"><call pos:start="161:25" pos:end="161:43"><name pos:start="161:25" pos:end="161:40">mjpeg_decode_com</name><argument_list pos:start="161:41" pos:end="161:43">(<argument pos:start="161:42" pos:end="161:42"><expr pos:start="161:42" pos:end="161:42"><name pos:start="161:42" pos:end="161:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		</block_content>}</block></if></if_stmt>



                <switch pos:start="167:17" pos:end="345:17">switch<condition pos:start="167:23" pos:end="167:34">(<expr pos:start="167:24" pos:end="167:33"><name pos:start="167:24" pos:end="167:33">start_code</name></expr>)</condition> <block pos:start="167:36" pos:end="345:17">{<block_content pos:start="169:17" pos:end="337:26">

                <case pos:start="169:17" pos:end="169:25">case <expr pos:start="169:22" pos:end="169:24"><name pos:start="169:22" pos:end="169:24">SOI</name></expr>:</case>

		    <expr_stmt pos:start="171:21" pos:end="171:44"><expr pos:start="171:21" pos:end="171:43"><name pos:start="171:21" pos:end="171:39"><name pos:start="171:21" pos:end="171:21">s</name><operator pos:start="171:22" pos:end="171:23">-&gt;</operator><name pos:start="171:24" pos:end="171:39">restart_interval</name></name> <operator pos:start="171:41" pos:end="171:41">=</operator> <literal type="number" pos:start="171:43" pos:end="171:43">0</literal></expr>;</expr_stmt>

                    <comment type="block" pos:start="173:21" pos:end="173:46">/* nothing to do on SOI */</comment>

                    <break pos:start="175:21" pos:end="175:26">break;</break>

                <case pos:start="177:17" pos:end="177:25">case <expr pos:start="177:22" pos:end="177:24"><name pos:start="177:22" pos:end="177:24">DQT</name></expr>:</case>

                    <expr_stmt pos:start="179:21" pos:end="179:40"><expr pos:start="179:21" pos:end="179:39"><call pos:start="179:21" pos:end="179:39"><name pos:start="179:21" pos:end="179:36">mjpeg_decode_dqt</name><argument_list pos:start="179:37" pos:end="179:39">(<argument pos:start="179:38" pos:end="179:38"><expr pos:start="179:38" pos:end="179:38"><name pos:start="179:38" pos:end="179:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="181:21" pos:end="181:26">break;</break>

                <case pos:start="183:17" pos:end="183:25">case <expr pos:start="183:22" pos:end="183:24"><name pos:start="183:22" pos:end="183:24">DHT</name></expr>:</case>

                    <expr_stmt pos:start="185:21" pos:end="185:40"><expr pos:start="185:21" pos:end="185:39"><call pos:start="185:21" pos:end="185:39"><name pos:start="185:21" pos:end="185:36">mjpeg_decode_dht</name><argument_list pos:start="185:37" pos:end="185:39">(<argument pos:start="185:38" pos:end="185:38"><expr pos:start="185:38" pos:end="185:38"><name pos:start="185:38" pos:end="185:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="187:21" pos:end="187:26">break;</break>

                <case pos:start="189:17" pos:end="189:26">case <expr pos:start="189:22" pos:end="189:25"><name pos:start="189:22" pos:end="189:25">SOF0</name></expr>:</case>

                    <expr_stmt pos:start="191:21" pos:end="191:34"><expr pos:start="191:21" pos:end="191:33"><name pos:start="191:21" pos:end="191:31"><name pos:start="191:21" pos:end="191:21">s</name><operator pos:start="191:22" pos:end="191:23">-&gt;</operator><name pos:start="191:24" pos:end="191:31">lossless</name></name><operator pos:start="191:32" pos:end="191:32">=</operator><literal type="number" pos:start="191:33" pos:end="191:33">0</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="193:21" pos:end="195:34"><if pos:start="193:21" pos:end="195:34">if <condition pos:start="193:24" pos:end="193:48">(<expr pos:start="193:25" pos:end="193:47"><call pos:start="193:25" pos:end="193:43"><name pos:start="193:25" pos:end="193:40">mjpeg_decode_sof</name><argument_list pos:start="193:41" pos:end="193:43">(<argument pos:start="193:42" pos:end="193:42"><expr pos:start="193:42" pos:end="193:42"><name pos:start="193:42" pos:end="193:42">s</name></expr></argument>)</argument_list></call> <operator pos:start="193:45" pos:end="193:45">&lt;</operator> <literal type="number" pos:start="193:47" pos:end="193:47">0</literal></expr>)</condition><block type="pseudo" pos:start="195:25" pos:end="195:34"><block_content pos:start="195:25" pos:end="195:34"> 

			<return pos:start="195:25" pos:end="195:34">return <expr pos:start="195:32" pos:end="195:33"><operator pos:start="195:32" pos:end="195:32">-</operator><literal type="number" pos:start="195:33" pos:end="195:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <break pos:start="197:21" pos:end="197:26">break;</break>

                <case pos:start="199:17" pos:end="199:26">case <expr pos:start="199:22" pos:end="199:25"><name pos:start="199:22" pos:end="199:25">SOF3</name></expr>:</case>

                    <expr_stmt pos:start="201:21" pos:end="201:34"><expr pos:start="201:21" pos:end="201:33"><name pos:start="201:21" pos:end="201:31"><name pos:start="201:21" pos:end="201:21">s</name><operator pos:start="201:22" pos:end="201:23">-&gt;</operator><name pos:start="201:24" pos:end="201:31">lossless</name></name><operator pos:start="201:32" pos:end="201:32">=</operator><literal type="number" pos:start="201:33" pos:end="201:33">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="203:21" pos:end="205:34"><if pos:start="203:21" pos:end="205:34">if <condition pos:start="203:24" pos:end="203:48">(<expr pos:start="203:25" pos:end="203:47"><call pos:start="203:25" pos:end="203:43"><name pos:start="203:25" pos:end="203:40">mjpeg_decode_sof</name><argument_list pos:start="203:41" pos:end="203:43">(<argument pos:start="203:42" pos:end="203:42"><expr pos:start="203:42" pos:end="203:42"><name pos:start="203:42" pos:end="203:42">s</name></expr></argument>)</argument_list></call> <operator pos:start="203:45" pos:end="203:45">&lt;</operator> <literal type="number" pos:start="203:47" pos:end="203:47">0</literal></expr>)</condition><block type="pseudo" pos:start="205:25" pos:end="205:34"><block_content pos:start="205:25" pos:end="205:34"> 

			<return pos:start="205:25" pos:end="205:34">return <expr pos:start="205:32" pos:end="205:33"><operator pos:start="205:32" pos:end="205:32">-</operator><literal type="number" pos:start="205:33" pos:end="205:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <break pos:start="207:21" pos:end="207:26">break;</break>

		<case pos:start="209:17" pos:end="209:25">case <expr pos:start="209:22" pos:end="209:24"><name pos:start="209:22" pos:end="209:24">EOI</name></expr>:</case>

<label pos:start="211:1" pos:end="211:11"><name pos:start="211:1" pos:end="211:10">eoi_parser</name>:</label>

		    <block pos:start="213:21" pos:end="287:21">{<block_content pos:start="215:25" pos:end="285:37">

                        <if_stmt pos:start="215:25" pos:end="225:25"><if pos:start="215:25" pos:end="225:25">if <condition pos:start="215:28" pos:end="215:42">(<expr pos:start="215:29" pos:end="215:41"><name pos:start="215:29" pos:end="215:41"><name pos:start="215:29" pos:end="215:29">s</name><operator pos:start="215:30" pos:end="215:31">-&gt;</operator><name pos:start="215:32" pos:end="215:41">interlaced</name></name></expr>)</condition> <block pos:start="215:44" pos:end="225:25">{<block_content pos:start="217:29" pos:end="223:49">

                            <expr_stmt pos:start="217:29" pos:end="217:49"><expr pos:start="217:29" pos:end="217:48"><name pos:start="217:29" pos:end="217:43"><name pos:start="217:29" pos:end="217:29">s</name><operator pos:start="217:30" pos:end="217:31">-&gt;</operator><name pos:start="217:32" pos:end="217:43">bottom_field</name></name> <operator pos:start="217:45" pos:end="217:46">^=</operator> <literal type="number" pos:start="217:48" pos:end="217:48">1</literal></expr>;</expr_stmt>

                            <comment type="block" pos:start="219:29" pos:end="219:78">/* if not bottom field, do not output image yet */</comment>

                            <if_stmt pos:start="221:29" pos:end="223:49"><if pos:start="221:29" pos:end="223:49">if <condition pos:start="221:32" pos:end="221:48">(<expr pos:start="221:33" pos:end="221:47"><name pos:start="221:33" pos:end="221:47"><name pos:start="221:33" pos:end="221:33">s</name><operator pos:start="221:34" pos:end="221:35">-&gt;</operator><name pos:start="221:36" pos:end="221:47">bottom_field</name></name></expr>)</condition><block type="pseudo" pos:start="223:33" pos:end="223:49"><block_content pos:start="223:33" pos:end="223:49">

                                <goto pos:start="223:33" pos:end="223:49">goto <name pos:start="223:38" pos:end="223:48">not_the_end</name>;</goto></block_content></block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                        <for pos:start="227:25" pos:end="235:25">for<control pos:start="227:28" pos:end="227:40">(<init pos:start="227:29" pos:end="227:32"><expr pos:start="227:29" pos:end="227:31"><name pos:start="227:29" pos:end="227:29">i</name><operator pos:start="227:30" pos:end="227:30">=</operator><literal type="number" pos:start="227:31" pos:end="227:31">0</literal></expr>;</init><condition pos:start="227:33" pos:end="227:36"><expr pos:start="227:33" pos:end="227:35"><name pos:start="227:33" pos:end="227:33">i</name><operator pos:start="227:34" pos:end="227:34">&lt;</operator><literal type="number" pos:start="227:35" pos:end="227:35">3</literal></expr>;</condition><incr pos:start="227:37" pos:end="227:39"><expr pos:start="227:37" pos:end="227:39"><name pos:start="227:37" pos:end="227:37">i</name><operator pos:start="227:38" pos:end="227:39">++</operator></expr></incr>)</control> <block pos:start="227:42" pos:end="235:25">{<block_content pos:start="229:29" pos:end="233:69">

                            <expr_stmt pos:start="229:29" pos:end="229:69"><expr pos:start="229:29" pos:end="229:68"><name pos:start="229:29" pos:end="229:44"><name pos:start="229:29" pos:end="229:35">picture</name><operator pos:start="229:36" pos:end="229:37">-&gt;</operator><name pos:start="229:38" pos:end="229:41">data</name><index pos:start="229:42" pos:end="229:44">[<expr pos:start="229:43" pos:end="229:43"><name pos:start="229:43" pos:end="229:43">i</name></expr>]</index></name> <operator pos:start="229:46" pos:end="229:46">=</operator> <name pos:start="229:48" pos:end="229:68"><name pos:start="229:48" pos:end="229:48">s</name><operator pos:start="229:49" pos:end="229:50">-&gt;</operator><name pos:start="229:51" pos:end="229:65">current_picture</name><index pos:start="229:66" pos:end="229:68">[<expr pos:start="229:67" pos:end="229:67"><name pos:start="229:67" pos:end="229:67">i</name></expr>]</index></name></expr>;</expr_stmt>

			    <expr_stmt pos:start="231:29" pos:end="233:69"><expr pos:start="231:29" pos:end="233:68"><name pos:start="231:29" pos:end="231:48"><name pos:start="231:29" pos:end="231:35">picture</name><operator pos:start="231:36" pos:end="231:37">-&gt;</operator><name pos:start="231:38" pos:end="231:45">linesize</name><index pos:start="231:46" pos:end="231:48">[<expr pos:start="231:47" pos:end="231:47"><name pos:start="231:47" pos:end="231:47">i</name></expr>]</index></name> <operator pos:start="231:50" pos:end="231:50">=</operator> <ternary pos:start="231:52" pos:end="233:68"><condition pos:start="231:52" pos:end="231:68"><expr pos:start="231:52" pos:end="231:66"><operator pos:start="231:52" pos:end="231:52">(</operator><name pos:start="231:53" pos:end="231:65"><name pos:start="231:53" pos:end="231:53">s</name><operator pos:start="231:54" pos:end="231:55">-&gt;</operator><name pos:start="231:56" pos:end="231:65">interlaced</name></name><operator pos:start="231:66" pos:end="231:66">)</operator></expr> ?</condition><then pos:start="233:33" pos:end="233:51">

				<expr pos:start="233:33" pos:end="233:51"><name pos:start="233:33" pos:end="233:46"><name pos:start="233:33" pos:end="233:33">s</name><operator pos:start="233:34" pos:end="233:35">-&gt;</operator><name pos:start="233:36" pos:end="233:43">linesize</name><index pos:start="233:44" pos:end="233:46">[<expr pos:start="233:45" pos:end="233:45"><name pos:start="233:45" pos:end="233:45">i</name></expr>]</index></name> <operator pos:start="233:48" pos:end="233:49">&gt;&gt;</operator> <literal type="number" pos:start="233:51" pos:end="233:51">1</literal></expr> </then><else pos:start="233:53" pos:end="233:68">: <expr pos:start="233:55" pos:end="233:68"><name pos:start="233:55" pos:end="233:68"><name pos:start="233:55" pos:end="233:55">s</name><operator pos:start="233:56" pos:end="233:57">-&gt;</operator><name pos:start="233:58" pos:end="233:65">linesize</name><index pos:start="233:66" pos:end="233:68">[<expr pos:start="233:67" pos:end="233:67"><name pos:start="233:67" pos:end="233:67">i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="237:25" pos:end="237:55"><expr pos:start="237:25" pos:end="237:54"><operator pos:start="237:25" pos:end="237:25">*</operator><name pos:start="237:26" pos:end="237:34">data_size</name> <operator pos:start="237:36" pos:end="237:36">=</operator> <sizeof pos:start="237:38" pos:end="237:54">sizeof<argument_list pos:start="237:44" pos:end="237:54">(<argument pos:start="237:45" pos:end="237:53"><expr pos:start="237:45" pos:end="237:53"><name pos:start="237:45" pos:end="237:53">AVPicture</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                        <expr_stmt pos:start="239:25" pos:end="239:50"><expr pos:start="239:25" pos:end="239:49"><name pos:start="239:25" pos:end="239:37"><name pos:start="239:25" pos:end="239:29">avctx</name><operator pos:start="239:30" pos:end="239:31">-&gt;</operator><name pos:start="239:32" pos:end="239:37">height</name></name> <operator pos:start="239:39" pos:end="239:39">=</operator> <name pos:start="239:41" pos:end="239:49"><name pos:start="239:41" pos:end="239:41">s</name><operator pos:start="239:42" pos:end="239:43">-&gt;</operator><name pos:start="239:44" pos:end="239:49">height</name></name></expr>;</expr_stmt>

                        <if_stmt pos:start="241:25" pos:end="243:47"><if pos:start="241:25" pos:end="243:47">if <condition pos:start="241:28" pos:end="241:42">(<expr pos:start="241:29" pos:end="241:41"><name pos:start="241:29" pos:end="241:41"><name pos:start="241:29" pos:end="241:29">s</name><operator pos:start="241:30" pos:end="241:31">-&gt;</operator><name pos:start="241:32" pos:end="241:41">interlaced</name></name></expr>)</condition><block type="pseudo" pos:start="243:29" pos:end="243:47"><block_content pos:start="243:29" pos:end="243:47">

                            <expr_stmt pos:start="243:29" pos:end="243:47"><expr pos:start="243:29" pos:end="243:46"><name pos:start="243:29" pos:end="243:41"><name pos:start="243:29" pos:end="243:33">avctx</name><operator pos:start="243:34" pos:end="243:35">-&gt;</operator><name pos:start="243:36" pos:end="243:41">height</name></name> <operator pos:start="243:43" pos:end="243:44">*=</operator> <literal type="number" pos:start="243:46" pos:end="243:46">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="245:25" pos:end="245:48"><expr pos:start="245:25" pos:end="245:47"><name pos:start="245:25" pos:end="245:36"><name pos:start="245:25" pos:end="245:29">avctx</name><operator pos:start="245:30" pos:end="245:31">-&gt;</operator><name pos:start="245:32" pos:end="245:36">width</name></name> <operator pos:start="245:38" pos:end="245:38">=</operator> <name pos:start="245:40" pos:end="245:47"><name pos:start="245:40" pos:end="245:40">s</name><operator pos:start="245:41" pos:end="245:42">-&gt;</operator><name pos:start="245:43" pos:end="245:47">width</name></name></expr>;</expr_stmt>

                        <comment type="block" pos:start="247:25" pos:end="247:54">/* XXX: not complete test ! */</comment>

                        <switch pos:start="249:25" pos:end="277:25">switch<condition pos:start="249:31" pos:end="249:68">(<expr pos:start="249:32" pos:end="249:67"><operator pos:start="249:32" pos:end="249:32">(</operator><name pos:start="249:33" pos:end="249:45"><name pos:start="249:33" pos:end="249:33">s</name><operator pos:start="249:34" pos:end="249:35">-&gt;</operator><name pos:start="249:36" pos:end="249:42">h_count</name><index pos:start="249:43" pos:end="249:45">[<expr pos:start="249:44" pos:end="249:44"><literal type="number" pos:start="249:44" pos:end="249:44">0</literal></expr>]</index></name> <operator pos:start="249:47" pos:end="249:48">&lt;&lt;</operator> <literal type="number" pos:start="249:50" pos:end="249:50">4</literal><operator pos:start="249:51" pos:end="249:51">)</operator> <operator pos:start="249:53" pos:end="249:53">|</operator> <name pos:start="249:55" pos:end="249:67"><name pos:start="249:55" pos:end="249:55">s</name><operator pos:start="249:56" pos:end="249:57">-&gt;</operator><name pos:start="249:58" pos:end="249:64">v_count</name><index pos:start="249:65" pos:end="249:67">[<expr pos:start="249:66" pos:end="249:66"><literal type="number" pos:start="249:66" pos:end="249:66">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="249:70" pos:end="277:25">{<block_content pos:start="251:25" pos:end="275:34">

                        <case pos:start="251:25" pos:end="251:34">case <expr pos:start="251:30" pos:end="251:33"><literal type="number" pos:start="251:30" pos:end="251:33">0x11</literal></expr>:</case>

                            <if_stmt pos:start="253:29" pos:end="259:65"><if pos:start="253:29" pos:end="257:29">if<condition pos:start="253:31" pos:end="253:38">(<expr pos:start="253:32" pos:end="253:37"><name pos:start="253:32" pos:end="253:37"><name pos:start="253:32" pos:end="253:32">s</name><operator pos:start="253:33" pos:end="253:34">-&gt;</operator><name pos:start="253:35" pos:end="253:37">rgb</name></name></expr>)</condition><block pos:start="253:39" pos:end="257:29">{<block_content pos:start="255:33" pos:end="255:64">

                                <expr_stmt pos:start="255:33" pos:end="255:64"><expr pos:start="255:33" pos:end="255:63"><name pos:start="255:33" pos:end="255:46"><name pos:start="255:33" pos:end="255:37">avctx</name><operator pos:start="255:38" pos:end="255:39">-&gt;</operator><name pos:start="255:40" pos:end="255:46">pix_fmt</name></name> <operator pos:start="255:48" pos:end="255:48">=</operator> <name pos:start="255:50" pos:end="255:63">PIX_FMT_RGBA32</name></expr>;</expr_stmt>

                            </block_content>}</block></if><else pos:start="257:30" pos:end="259:65">else<block type="pseudo" pos:start="259:33" pos:end="259:65"><block_content pos:start="259:33" pos:end="259:65">

                                <expr_stmt pos:start="259:33" pos:end="259:65"><expr pos:start="259:33" pos:end="259:64"><name pos:start="259:33" pos:end="259:46"><name pos:start="259:33" pos:end="259:37">avctx</name><operator pos:start="259:38" pos:end="259:39">-&gt;</operator><name pos:start="259:40" pos:end="259:46">pix_fmt</name></name> <operator pos:start="259:48" pos:end="259:48">=</operator> <name pos:start="259:50" pos:end="259:64">PIX_FMT_YUV444P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <break pos:start="261:29" pos:end="261:34">break;</break>

                        <case pos:start="263:25" pos:end="263:34">case <expr pos:start="263:30" pos:end="263:33"><literal type="number" pos:start="263:30" pos:end="263:33">0x21</literal></expr>:</case>

                            <expr_stmt pos:start="265:29" pos:end="265:61"><expr pos:start="265:29" pos:end="265:60"><name pos:start="265:29" pos:end="265:42"><name pos:start="265:29" pos:end="265:33">avctx</name><operator pos:start="265:34" pos:end="265:35">-&gt;</operator><name pos:start="265:36" pos:end="265:42">pix_fmt</name></name> <operator pos:start="265:44" pos:end="265:44">=</operator> <name pos:start="265:46" pos:end="265:60">PIX_FMT_YUV422P</name></expr>;</expr_stmt>

                            <break pos:start="267:29" pos:end="267:34">break;</break>

                        <default pos:start="269:25" pos:end="269:32">default:</default>

                        <case pos:start="271:25" pos:end="271:34">case <expr pos:start="271:30" pos:end="271:33"><literal type="number" pos:start="271:30" pos:end="271:33">0x22</literal></expr>:</case>

                            <expr_stmt pos:start="273:29" pos:end="273:61"><expr pos:start="273:29" pos:end="273:60"><name pos:start="273:29" pos:end="273:42"><name pos:start="273:29" pos:end="273:33">avctx</name><operator pos:start="273:34" pos:end="273:35">-&gt;</operator><name pos:start="273:36" pos:end="273:42">pix_fmt</name></name> <operator pos:start="273:44" pos:end="273:44">=</operator> <name pos:start="273:46" pos:end="273:60">PIX_FMT_YUV420P</name></expr>;</expr_stmt>

                            <break pos:start="275:29" pos:end="275:34">break;</break>

                        </block_content>}</block></switch>

                        <comment type="block" pos:start="279:25" pos:end="279:43">/* dummy quality */</comment>

                        <comment type="block" pos:start="281:25" pos:end="281:55">/* XXX: infer it with matrix */</comment>

<comment type="line" pos:start="283:1" pos:end="283:44">//                    	avctx-&gt;quality = 3; </comment>

                        <goto pos:start="285:25" pos:end="285:37">goto <name pos:start="285:30" pos:end="285:36">the_end</name>;</goto>

                    </block_content>}</block>

		    <break pos:start="289:21" pos:end="289:26">break;</break>

                <case pos:start="291:17" pos:end="291:25">case <expr pos:start="291:22" pos:end="291:24"><name pos:start="291:22" pos:end="291:24">SOS</name></expr>:</case>

                    <expr_stmt pos:start="293:21" pos:end="293:40"><expr pos:start="293:21" pos:end="293:39"><call pos:start="293:21" pos:end="293:39"><name pos:start="293:21" pos:end="293:36">mjpeg_decode_sos</name><argument_list pos:start="293:37" pos:end="293:39">(<argument pos:start="293:38" pos:end="293:38"><expr pos:start="293:38" pos:end="293:38"><name pos:start="293:38" pos:end="293:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <comment type="block" pos:start="295:21" pos:end="295:65">/* buggy avid puts EOI every 10-20th frame */</comment>

		    <comment type="block" pos:start="297:21" pos:end="297:63">/* if restart period is over process EOI */</comment>

		    <if_stmt pos:start="299:21" pos:end="301:40"><if pos:start="299:21" pos:end="301:40">if <condition pos:start="299:24" pos:end="299:81">(<expr pos:start="299:25" pos:end="299:80"><operator pos:start="299:25" pos:end="299:25">(</operator><name pos:start="299:26" pos:end="299:38"><name pos:start="299:26" pos:end="299:26">s</name><operator pos:start="299:27" pos:end="299:28">-&gt;</operator><name pos:start="299:29" pos:end="299:38">buggy_avid</name></name> <operator pos:start="299:40" pos:end="299:41">&amp;&amp;</operator> <operator pos:start="299:43" pos:end="299:43">!</operator><name pos:start="299:44" pos:end="299:56"><name pos:start="299:44" pos:end="299:44">s</name><operator pos:start="299:45" pos:end="299:46">-&gt;</operator><name pos:start="299:47" pos:end="299:56">interlaced</name></name><operator pos:start="299:57" pos:end="299:57">)</operator> <operator pos:start="299:59" pos:end="299:60">||</operator> <name pos:start="299:62" pos:end="299:80"><name pos:start="299:62" pos:end="299:62">s</name><operator pos:start="299:63" pos:end="299:64">-&gt;</operator><name pos:start="299:65" pos:end="299:80">restart_interval</name></name></expr>)</condition><block type="pseudo" pos:start="301:25" pos:end="301:40"><block_content pos:start="301:25" pos:end="301:40">

			<goto pos:start="301:25" pos:end="301:40">goto <name pos:start="301:30" pos:end="301:39">eoi_parser</name>;</goto></block_content></block></if></if_stmt>

                    <break pos:start="303:21" pos:end="303:26">break;</break>

		<case pos:start="305:17" pos:end="305:25">case <expr pos:start="305:22" pos:end="305:24"><name pos:start="305:22" pos:end="305:24">DRI</name></expr>:</case>

		    <expr_stmt pos:start="307:21" pos:end="307:40"><expr pos:start="307:21" pos:end="307:39"><call pos:start="307:21" pos:end="307:39"><name pos:start="307:21" pos:end="307:36">mjpeg_decode_dri</name><argument_list pos:start="307:37" pos:end="307:39">(<argument pos:start="307:38" pos:end="307:38"><expr pos:start="307:38" pos:end="307:38"><name pos:start="307:38" pos:end="307:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <break pos:start="309:21" pos:end="309:26">break;</break>

		<case pos:start="311:17" pos:end="311:26">case <expr pos:start="311:22" pos:end="311:25"><name pos:start="311:22" pos:end="311:25">SOF1</name></expr>:</case>

		<case pos:start="313:17" pos:end="313:26">case <expr pos:start="313:22" pos:end="313:25"><name pos:start="313:22" pos:end="313:25">SOF2</name></expr>:</case>

		<case pos:start="315:17" pos:end="315:26">case <expr pos:start="315:22" pos:end="315:25"><name pos:start="315:22" pos:end="315:25">SOF5</name></expr>:</case>

		<case pos:start="317:17" pos:end="317:26">case <expr pos:start="317:22" pos:end="317:25"><name pos:start="317:22" pos:end="317:25">SOF6</name></expr>:</case>

		<case pos:start="319:17" pos:end="319:26">case <expr pos:start="319:22" pos:end="319:25"><name pos:start="319:22" pos:end="319:25">SOF7</name></expr>:</case>

		<case pos:start="321:17" pos:end="321:26">case <expr pos:start="321:22" pos:end="321:25"><name pos:start="321:22" pos:end="321:25">SOF9</name></expr>:</case>

		<case pos:start="323:17" pos:end="323:27">case <expr pos:start="323:22" pos:end="323:26"><name pos:start="323:22" pos:end="323:26">SOF10</name></expr>:</case>

		<case pos:start="325:17" pos:end="325:27">case <expr pos:start="325:22" pos:end="325:26"><name pos:start="325:22" pos:end="325:26">SOF11</name></expr>:</case>

		<case pos:start="327:17" pos:end="327:27">case <expr pos:start="327:22" pos:end="327:26"><name pos:start="327:22" pos:end="327:26">SOF13</name></expr>:</case>

		<case pos:start="329:17" pos:end="329:27">case <expr pos:start="329:22" pos:end="329:26"><name pos:start="329:22" pos:end="329:26">SOF14</name></expr>:</case>

		<case pos:start="331:17" pos:end="331:27">case <expr pos:start="331:22" pos:end="331:26"><name pos:start="331:22" pos:end="331:26">SOF15</name></expr>:</case>

		<case pos:start="333:17" pos:end="333:25">case <expr pos:start="333:22" pos:end="333:24"><name pos:start="333:22" pos:end="333:24">JPG</name></expr>:</case>

		    <expr_stmt pos:start="335:21" pos:end="335:80"><expr pos:start="335:21" pos:end="335:79"><call pos:start="335:21" pos:end="335:79"><name pos:start="335:21" pos:end="335:26">printf</name><argument_list pos:start="335:27" pos:end="335:79">(<argument pos:start="335:28" pos:end="335:66"><expr pos:start="335:28" pos:end="335:66"><literal type="string" pos:start="335:28" pos:end="335:66">"mjpeg: unsupported coding type (%x)\n"</literal></expr></argument>, <argument pos:start="335:69" pos:end="335:78"><expr pos:start="335:69" pos:end="335:78"><name pos:start="335:69" pos:end="335:78">start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		    <break pos:start="337:21" pos:end="337:26">break;</break>

<comment type="line" pos:start="339:1" pos:end="339:24">//		default:</comment>

<comment type="line" pos:start="341:1" pos:end="341:75">//		    printf("mjpeg: unsupported marker (%x)\n", start_code);</comment>

<comment type="line" pos:start="343:1" pos:end="343:26">//		    break;</comment>

                </block_content>}</block></switch>



<label pos:start="349:1" pos:end="349:12"><name pos:start="349:1" pos:end="349:11">not_the_end</name>:</label>

		<comment type="block" pos:start="351:17" pos:end="351:44">/* eof process start code */</comment>

		<expr_stmt pos:start="353:17" pos:end="353:56"><expr pos:start="353:17" pos:end="353:55"><name pos:start="353:17" pos:end="353:23">buf_ptr</name> <operator pos:start="353:25" pos:end="353:26">+=</operator> <operator pos:start="353:28" pos:end="353:28">(</operator><call pos:start="353:29" pos:end="353:50"><name pos:start="353:29" pos:end="353:42">get_bits_count</name><argument_list pos:start="353:43" pos:end="353:50">(<argument pos:start="353:44" pos:end="353:49"><expr pos:start="353:44" pos:end="353:49"><operator pos:start="353:44" pos:end="353:44">&amp;</operator><name pos:start="353:45" pos:end="353:49"><name pos:start="353:45" pos:end="353:45">s</name><operator pos:start="353:46" pos:end="353:47">-&gt;</operator><name pos:start="353:48" pos:end="353:49">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="353:51" pos:end="353:51">+</operator><literal type="number" pos:start="353:52" pos:end="353:52">7</literal><operator pos:start="353:53" pos:end="353:53">)</operator><operator pos:start="353:54" pos:end="353:54">/</operator><literal type="number" pos:start="353:55" pos:end="353:55">8</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="355:17" pos:end="357:74"><expr pos:start="355:17" pos:end="357:73"><call pos:start="355:17" pos:end="357:73"><name pos:start="355:17" pos:end="355:23">dprintf</name><argument_list pos:start="355:24" pos:end="357:73">(<argument pos:start="355:25" pos:end="355:65"><expr pos:start="355:25" pos:end="355:65"><literal type="string" pos:start="355:25" pos:end="355:65">"marker parser used %d bytes (%d bits)\n"</literal></expr></argument>,

		    <argument pos:start="357:21" pos:end="357:48"><expr pos:start="357:21" pos:end="357:48"><operator pos:start="357:21" pos:end="357:21">(</operator><call pos:start="357:22" pos:end="357:43"><name pos:start="357:22" pos:end="357:35">get_bits_count</name><argument_list pos:start="357:36" pos:end="357:43">(<argument pos:start="357:37" pos:end="357:42"><expr pos:start="357:37" pos:end="357:42"><operator pos:start="357:37" pos:end="357:37">&amp;</operator><name pos:start="357:38" pos:end="357:42"><name pos:start="357:38" pos:end="357:38">s</name><operator pos:start="357:39" pos:end="357:40">-&gt;</operator><name pos:start="357:41" pos:end="357:42">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="357:44" pos:end="357:44">+</operator><literal type="number" pos:start="357:45" pos:end="357:45">7</literal><operator pos:start="357:46" pos:end="357:46">)</operator><operator pos:start="357:47" pos:end="357:47">/</operator><literal type="number" pos:start="357:48" pos:end="357:48">8</literal></expr></argument>, <argument pos:start="357:51" pos:end="357:72"><expr pos:start="357:51" pos:end="357:72"><call pos:start="357:51" pos:end="357:72"><name pos:start="357:51" pos:end="357:64">get_bits_count</name><argument_list pos:start="357:65" pos:end="357:72">(<argument pos:start="357:66" pos:end="357:71"><expr pos:start="357:66" pos:end="357:71"><operator pos:start="357:66" pos:end="357:66">&amp;</operator><name pos:start="357:67" pos:end="357:71"><name pos:start="357:67" pos:end="357:67">s</name><operator pos:start="357:68" pos:end="357:69">-&gt;</operator><name pos:start="357:70" pos:end="357:71">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

    </block_content>}</block></while>

<label pos:start="365:1" pos:end="365:8"><name pos:start="365:1" pos:end="365:7">the_end</name>:</label>

    <expr_stmt pos:start="367:5" pos:end="367:71"><expr pos:start="367:5" pos:end="367:70"><call pos:start="367:5" pos:end="367:70"><name pos:start="367:5" pos:end="367:11">dprintf</name><argument_list pos:start="367:12" pos:end="367:70">(<argument pos:start="367:13" pos:end="367:50"><expr pos:start="367:13" pos:end="367:50"><literal type="string" pos:start="367:13" pos:end="367:50">"mjpeg decode frame unused %d bytes\n"</literal></expr></argument>, <argument pos:start="367:53" pos:end="367:69"><expr pos:start="367:53" pos:end="367:69"><name pos:start="367:53" pos:end="367:59">buf_end</name> <operator pos:start="367:61" pos:end="367:61">-</operator> <name pos:start="367:63" pos:end="367:69">buf_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="369:1" pos:end="369:31">//    return buf_end - buf_ptr;</comment>

    <return pos:start="371:5" pos:end="371:25">return <expr pos:start="371:12" pos:end="371:24"><name pos:start="371:12" pos:end="371:18">buf_ptr</name> <operator pos:start="371:20" pos:end="371:20">-</operator> <name pos:start="371:22" pos:end="371:24">buf</name></expr>;</return>

</block_content>}</block></function>
</unit>
