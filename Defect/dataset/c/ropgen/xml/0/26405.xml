<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26405.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">qemu_wait_io_event</name><parameter_list pos:start="1:31" pos:end="1:45">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:41"><name pos:start="1:32" pos:end="1:39">CPUState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="35:1">{<block_content pos:start="5:5" pos:end="33:35">

    <while pos:start="5:5" pos:end="7:70">while <condition pos:start="5:11" pos:end="5:27">(<expr pos:start="5:12" pos:end="5:26"><operator pos:start="5:12" pos:end="5:12">!</operator><call pos:start="5:13" pos:end="5:26"><name pos:start="5:13" pos:end="5:24">tcg_has_work</name><argument_list pos:start="5:25" pos:end="5:26">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="7:9" pos:end="7:70"><block_content pos:start="7:9" pos:end="7:70">

        <expr_stmt pos:start="7:9" pos:end="7:70"><expr pos:start="7:9" pos:end="7:69"><call pos:start="7:9" pos:end="7:69"><name pos:start="7:9" pos:end="7:27">qemu_cond_timedwait</name><argument_list pos:start="7:28" pos:end="7:69">(<argument pos:start="7:29" pos:end="7:42"><expr pos:start="7:29" pos:end="7:42"><name pos:start="7:29" pos:end="7:42"><name pos:start="7:29" pos:end="7:31">env</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:42">halt_cond</name></name></expr></argument>, <argument pos:start="7:45" pos:end="7:62"><expr pos:start="7:45" pos:end="7:62"><operator pos:start="7:45" pos:end="7:45">&amp;</operator><name pos:start="7:46" pos:end="7:62">qemu_global_mutex</name></expr></argument>, <argument pos:start="7:65" pos:end="7:68"><expr pos:start="7:65" pos:end="7:68"><literal type="number" pos:start="7:65" pos:end="7:68">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



    <expr_stmt pos:start="11:5" pos:end="11:42"><expr pos:start="11:5" pos:end="11:41"><call pos:start="11:5" pos:end="11:41"><name pos:start="11:5" pos:end="11:21">qemu_mutex_unlock</name><argument_list pos:start="11:22" pos:end="11:41">(<argument pos:start="11:23" pos:end="11:40"><expr pos:start="11:23" pos:end="11:40"><operator pos:start="11:23" pos:end="11:23">&amp;</operator><name pos:start="11:24" pos:end="11:40">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="23:7">/*

     * Users of qemu_global_mutex can be starved, having no chance

     * to acquire it since this path will get to it first.

     * So use another lock to provide fairness.

     */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><call pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:19">qemu_mutex_lock</name><argument_list pos:start="25:20" pos:end="25:37">(<argument pos:start="25:21" pos:end="25:36"><expr pos:start="25:21" pos:end="25:36"><operator pos:start="25:21" pos:end="25:21">&amp;</operator><name pos:start="25:22" pos:end="25:36">qemu_fair_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><call pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:21">qemu_mutex_unlock</name><argument_list pos:start="27:22" pos:end="27:39">(<argument pos:start="27:23" pos:end="27:38"><expr pos:start="27:23" pos:end="27:38"><operator pos:start="27:23" pos:end="27:23">&amp;</operator><name pos:start="27:24" pos:end="27:38">qemu_fair_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:40"><expr pos:start="31:5" pos:end="31:39"><call pos:start="31:5" pos:end="31:39"><name pos:start="31:5" pos:end="31:19">qemu_mutex_lock</name><argument_list pos:start="31:20" pos:end="31:39">(<argument pos:start="31:21" pos:end="31:38"><expr pos:start="31:21" pos:end="31:38"><operator pos:start="31:21" pos:end="31:21">&amp;</operator><name pos:start="31:22" pos:end="31:38">qemu_global_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:35"><expr pos:start="33:5" pos:end="33:34"><call pos:start="33:5" pos:end="33:34"><name pos:start="33:5" pos:end="33:29">qemu_wait_io_event_common</name><argument_list pos:start="33:30" pos:end="33:34">(<argument pos:start="33:31" pos:end="33:33"><expr pos:start="33:31" pos:end="33:33"><name pos:start="33:31" pos:end="33:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
