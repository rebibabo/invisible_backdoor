<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3840.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">scsi_dma_complete_noio</name><parameter_list pos:start="1:35" pos:end="1:57">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">opaque</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:56"><decl pos:start="1:50" pos:end="1:56"><type pos:start="1:50" pos:end="1:56"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:56">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:5">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIDiskReq</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">r</name> <init pos:start="5:20" pos:end="5:42">= <expr pos:start="5:22" pos:end="5:42"><operator pos:start="5:22" pos:end="5:22">(</operator><name pos:start="5:23" pos:end="5:33">SCSIDiskReq</name> <operator pos:start="5:35" pos:end="5:35">*</operator><operator pos:start="5:36" pos:end="5:36">)</operator><name pos:start="5:37" pos:end="5:42">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:65">= <expr pos:start="7:24" pos:end="7:65"><call pos:start="7:24" pos:end="7:65"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:65">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:64"><expr pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:55">r</name><operator pos:start="7:56" pos:end="7:57">-&gt;</operator><name pos:start="7:58" pos:end="7:60">req</name><operator pos:start="7:61" pos:end="7:61">.</operator><name pos:start="7:62" pos:end="7:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:29">(<expr pos:start="11:9" pos:end="11:28"><name pos:start="11:9" pos:end="11:20"><name pos:start="11:9" pos:end="11:9">r</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:14">req</name><operator pos:start="11:15" pos:end="11:15">.</operator><name pos:start="11:16" pos:end="11:20">aiocb</name></name> <operator pos:start="11:22" pos:end="11:23">!=</operator> <name pos:start="11:25" pos:end="11:28">NULL</name></expr>)</condition> <block pos:start="11:31" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:67">

        <expr_stmt pos:start="13:9" pos:end="13:28"><expr pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:9">r</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:14">req</name><operator pos:start="13:15" pos:end="13:15">.</operator><name pos:start="13:16" pos:end="13:20">aiocb</name></name> <operator pos:start="13:22" pos:end="13:22">=</operator> <name pos:start="13:24" pos:end="13:27">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:67"><expr pos:start="15:9" pos:end="15:66"><call pos:start="15:9" pos:end="15:66"><name pos:start="15:9" pos:end="15:23">block_acct_done</name><argument_list pos:start="15:24" pos:end="15:66">(<argument pos:start="15:25" pos:end="15:55"><expr pos:start="15:25" pos:end="15:55"><call pos:start="15:25" pos:end="15:55"><name pos:start="15:25" pos:end="15:38">bdrv_get_stats</name><argument_list pos:start="15:39" pos:end="15:55">(<argument pos:start="15:40" pos:end="15:54"><expr pos:start="15:40" pos:end="15:54"><name pos:start="15:40" pos:end="15:54"><name pos:start="15:40" pos:end="15:40">s</name><operator pos:start="15:41" pos:end="15:42">-&gt;</operator><name pos:start="15:43" pos:end="15:46">qdev</name><operator pos:start="15:47" pos:end="15:47">.</operator><name pos:start="15:48" pos:end="15:51">conf</name><operator pos:start="15:52" pos:end="15:52">.</operator><name pos:start="15:53" pos:end="15:54">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="15:58" pos:end="15:65"><expr pos:start="15:58" pos:end="15:65"><operator pos:start="15:58" pos:end="15:58">&amp;</operator><name pos:start="15:59" pos:end="15:65"><name pos:start="15:59" pos:end="15:59">r</name><operator pos:start="15:60" pos:end="15:61">-&gt;</operator><name pos:start="15:62" pos:end="15:65">acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:27">(<expr pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:9">r</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:14">req</name><operator pos:start="19:15" pos:end="19:15">.</operator><name pos:start="19:16" pos:end="19:26">io_canceled</name></name></expr>)</condition> <block pos:start="19:29" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:18">

        <goto pos:start="21:9" pos:end="21:18">goto <name pos:start="21:14" pos:end="21:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition> <block pos:start="27:18" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:9">

        <if_stmt pos:start="29:9" pos:end="33:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:42">(<expr pos:start="29:13" pos:end="29:41"><call pos:start="29:13" pos:end="29:41"><name pos:start="29:13" pos:end="29:32">scsi_handle_rw_error</name><argument_list pos:start="29:33" pos:end="29:41">(<argument pos:start="29:34" pos:end="29:34"><expr pos:start="29:34" pos:end="29:34"><name pos:start="29:34" pos:end="29:34">r</name></expr></argument>, <argument pos:start="29:37" pos:end="29:40"><expr pos:start="29:37" pos:end="29:40"><operator pos:start="29:37" pos:end="29:37">-</operator><name pos:start="29:38" pos:end="29:40">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:44" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:22">

            <goto pos:start="31:13" pos:end="31:22">goto <name pos:start="31:18" pos:end="31:21">done</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:5">r</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:13">sector</name></name> <operator pos:start="39:15" pos:end="39:16">+=</operator> <name pos:start="39:18" pos:end="39:32"><name pos:start="39:18" pos:end="39:18">r</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:32">sector_count</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:24"><expr pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:5">r</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:19">sector_count</name></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <literal type="number" pos:start="41:23" pos:end="41:23">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:44">(<expr pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:23"><name pos:start="43:9" pos:end="43:9">r</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:14">req</name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:18">cmd</name><operator pos:start="43:19" pos:end="43:19">.</operator><name pos:start="43:20" pos:end="43:23">mode</name></name> <operator pos:start="43:25" pos:end="43:26">==</operator> <name pos:start="43:28" pos:end="43:43">SCSI_XFER_TO_DEV</name></expr>)</condition> <block pos:start="43:46" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:15">

        <expr_stmt pos:start="45:9" pos:end="45:29"><expr pos:start="45:9" pos:end="45:28"><call pos:start="45:9" pos:end="45:28"><name pos:start="45:9" pos:end="45:25">scsi_write_do_fua</name><argument_list pos:start="45:26" pos:end="45:28">(<argument pos:start="45:27" pos:end="45:27"><expr pos:start="45:27" pos:end="45:27"><name pos:start="45:27" pos:end="45:27">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if> <else pos:start="49:7" pos:end="53:5">else <block pos:start="49:12" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:41">

        <expr_stmt pos:start="51:9" pos:end="51:41"><expr pos:start="51:9" pos:end="51:40"><call pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:25">scsi_req_complete</name><argument_list pos:start="51:26" pos:end="51:40">(<argument pos:start="51:27" pos:end="51:33"><expr pos:start="51:27" pos:end="51:33"><operator pos:start="51:27" pos:end="51:27">&amp;</operator><name pos:start="51:28" pos:end="51:33"><name pos:start="51:28" pos:end="51:28">r</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:33">req</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:39"><expr pos:start="51:36" pos:end="51:39"><name pos:start="51:36" pos:end="51:39">GOOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="57:1" pos:end="57:5"><name pos:start="57:1" pos:end="57:4">done</name>:</label>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:28">(<expr pos:start="59:9" pos:end="59:27"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:27"><name pos:start="59:10" pos:end="59:10">r</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:15">req</name><operator pos:start="59:16" pos:end="59:16">.</operator><name pos:start="59:17" pos:end="59:27">io_canceled</name></name></expr>)</condition> <block pos:start="59:30" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:32">

        <expr_stmt pos:start="61:9" pos:end="61:32"><expr pos:start="61:9" pos:end="61:31"><call pos:start="61:9" pos:end="61:31"><name pos:start="61:9" pos:end="61:22">scsi_req_unref</name><argument_list pos:start="61:23" pos:end="61:31">(<argument pos:start="61:24" pos:end="61:30"><expr pos:start="61:24" pos:end="61:30"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:30"><name pos:start="61:25" pos:end="61:25">r</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:30">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
