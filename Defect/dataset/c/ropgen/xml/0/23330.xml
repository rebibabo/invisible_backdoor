<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23330.c" pos:tabs="8"><function pos:start="1:1" pos:end="423:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">bink_decode_plane</name><parameter_list pos:start="1:29" pos:end="3:58">(<parameter pos:start="1:30" pos:end="1:43"><decl pos:start="1:30" pos:end="1:43"><type pos:start="1:30" pos:end="1:43"><name pos:start="1:30" pos:end="1:40">BinkContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">c</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:59"><decl pos:start="1:46" pos:end="1:59"><type pos:start="1:46" pos:end="1:59"><name pos:start="1:46" pos:end="1:52">AVFrame</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">frame</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:81"><decl pos:start="1:62" pos:end="1:81"><type pos:start="1:62" pos:end="1:81"><name pos:start="1:62" pos:end="1:77">BitstreamContext</name> <modifier pos:start="1:79" pos:end="1:79">*</modifier></type><name pos:start="1:80" pos:end="1:81">bc</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:42"><decl pos:start="3:30" pos:end="3:42"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:42">plane_idx</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:57">is_chroma</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="423:1">{<block_content pos:start="7:5" pos:end="421:13">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">blk</name></decl>, <decl pos:start="7:14" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:16">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>, <decl pos:start="9:15" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:16">bx</name></decl>, <decl pos:start="9:19" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:19" pos:end="9:20">by</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:46"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">uint8_t</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">dst</name></decl>, <decl pos:start="11:19" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:23">prev</name></decl>, <decl pos:start="11:26" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:35">ref_start</name></decl>, <decl pos:start="11:38" pos:end="11:45"><type ref="prev" pos:start="11:5" pos:end="11:13"><modifier pos:start="11:38" pos:end="11:38">*</modifier></type><name pos:start="11:39" pos:end="11:45">ref_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">v</name></decl>, <decl pos:start="13:12" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:17"><name pos:start="13:12" pos:end="13:14">col</name><index pos:start="13:15" pos:end="13:17">[<expr pos:start="13:16" pos:end="13:16"><literal type="number" pos:start="13:16" pos:end="13:16">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:23">scan</name></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:43"><expr pos:start="17:5" pos:end="17:42"><call pos:start="17:5" pos:end="17:42"><name pos:start="17:5" pos:end="17:20">LOCAL_ALIGNED_16</name><argument_list pos:start="17:21" pos:end="17:42">(<argument pos:start="17:22" pos:end="17:28"><expr pos:start="17:22" pos:end="17:28"><name pos:start="17:22" pos:end="17:28">int16_t</name></expr></argument>, <argument pos:start="17:31" pos:end="17:35"><expr pos:start="17:31" pos:end="17:35"><name pos:start="17:31" pos:end="17:35">block</name></expr></argument>, <argument pos:start="17:38" pos:end="17:41"><expr pos:start="17:38" pos:end="17:41"><index pos:start="17:38" pos:end="17:41">[<expr pos:start="17:39" pos:end="17:40"><literal type="number" pos:start="17:39" pos:end="17:40">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:44"><expr pos:start="19:5" pos:end="19:43"><call pos:start="19:5" pos:end="19:43"><name pos:start="19:5" pos:end="19:20">LOCAL_ALIGNED_16</name><argument_list pos:start="19:21" pos:end="19:43">(<argument pos:start="19:22" pos:end="19:28"><expr pos:start="19:22" pos:end="19:28"><name pos:start="19:22" pos:end="19:28">uint8_t</name></expr></argument>, <argument pos:start="19:31" pos:end="19:36"><expr pos:start="19:31" pos:end="19:36"><name pos:start="19:31" pos:end="19:36">ublock</name></expr></argument>, <argument pos:start="19:39" pos:end="19:42"><expr pos:start="19:39" pos:end="19:42"><index pos:start="19:39" pos:end="19:42">[<expr pos:start="19:40" pos:end="19:41"><literal type="number" pos:start="19:40" pos:end="19:41">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:46"><expr pos:start="21:5" pos:end="21:45"><call pos:start="21:5" pos:end="21:45"><name pos:start="21:5" pos:end="21:20">LOCAL_ALIGNED_16</name><argument_list pos:start="21:21" pos:end="21:45">(<argument pos:start="21:22" pos:end="21:28"><expr pos:start="21:22" pos:end="21:28"><name pos:start="21:22" pos:end="21:28">int32_t</name></expr></argument>, <argument pos:start="21:31" pos:end="21:38"><expr pos:start="21:31" pos:end="21:38"><name pos:start="21:31" pos:end="21:38">dctblock</name></expr></argument>, <argument pos:start="21:41" pos:end="21:44"><expr pos:start="21:41" pos:end="21:44"><index pos:start="21:41" pos:end="21:44">[<expr pos:start="21:42" pos:end="21:43"><literal type="number" pos:start="21:42" pos:end="21:43">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:16">coordmap</name><index pos:start="23:17" pos:end="23:20">[<expr pos:start="23:18" pos:end="23:19"><literal type="number" pos:start="23:18" pos:end="23:19">64</literal></expr>]</index></name></decl>;</decl_stmt>



    <decl_stmt pos:start="27:5" pos:end="27:50"><decl pos:start="27:5" pos:end="27:49"><type pos:start="27:5" pos:end="27:13"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:13">int</name></type> <name pos:start="27:15" pos:end="27:20">stride</name> <init pos:start="27:22" pos:end="27:49">= <expr pos:start="27:24" pos:end="27:49"><name pos:start="27:24" pos:end="27:49"><name pos:start="27:24" pos:end="27:28">frame</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:38">linesize</name><index pos:start="27:39" pos:end="27:49">[<expr pos:start="27:40" pos:end="27:48"><name pos:start="27:40" pos:end="27:48">plane_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:84"><decl pos:start="29:5" pos:end="29:83"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:10">bw</name> <init pos:start="29:12" pos:end="29:83">= <expr pos:start="29:14" pos:end="29:83"><ternary pos:start="29:14" pos:end="29:83"><condition pos:start="29:14" pos:end="29:24"><expr pos:start="29:14" pos:end="29:22"><name pos:start="29:14" pos:end="29:22">is_chroma</name></expr> ?</condition><then pos:start="29:26" pos:end="29:53"> <expr pos:start="29:26" pos:end="29:53"><operator pos:start="29:26" pos:end="29:26">(</operator><name pos:start="29:27" pos:end="29:41"><name pos:start="29:27" pos:end="29:27">c</name><operator pos:start="29:28" pos:end="29:29">-&gt;</operator><name pos:start="29:30" pos:end="29:34">avctx</name><operator pos:start="29:35" pos:end="29:36">-&gt;</operator><name pos:start="29:37" pos:end="29:41">width</name></name>  <operator pos:start="29:44" pos:end="29:44">+</operator> <literal type="number" pos:start="29:46" pos:end="29:47">15</literal><operator pos:start="29:48" pos:end="29:48">)</operator> <operator pos:start="29:50" pos:end="29:51">&gt;&gt;</operator> <literal type="number" pos:start="29:53" pos:end="29:53">4</literal></expr> </then><else pos:start="29:55" pos:end="29:83">: <expr pos:start="29:57" pos:end="29:83"><operator pos:start="29:57" pos:end="29:57">(</operator><name pos:start="29:58" pos:end="29:72"><name pos:start="29:58" pos:end="29:58">c</name><operator pos:start="29:59" pos:end="29:60">-&gt;</operator><name pos:start="29:61" pos:end="29:65">avctx</name><operator pos:start="29:66" pos:end="29:67">-&gt;</operator><name pos:start="29:68" pos:end="29:72">width</name></name>  <operator pos:start="29:75" pos:end="29:75">+</operator> <literal type="number" pos:start="29:77" pos:end="29:77">7</literal><operator pos:start="29:78" pos:end="29:78">)</operator> <operator pos:start="29:80" pos:end="29:81">&gt;&gt;</operator> <literal type="number" pos:start="29:83" pos:end="29:83">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:84"><decl pos:start="31:5" pos:end="31:83"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:10">bh</name> <init pos:start="31:12" pos:end="31:83">= <expr pos:start="31:14" pos:end="31:83"><ternary pos:start="31:14" pos:end="31:83"><condition pos:start="31:14" pos:end="31:24"><expr pos:start="31:14" pos:end="31:22"><name pos:start="31:14" pos:end="31:22">is_chroma</name></expr> ?</condition><then pos:start="31:26" pos:end="31:53"> <expr pos:start="31:26" pos:end="31:53"><operator pos:start="31:26" pos:end="31:26">(</operator><name pos:start="31:27" pos:end="31:42"><name pos:start="31:27" pos:end="31:27">c</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:34">avctx</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:42">height</name></name> <operator pos:start="31:44" pos:end="31:44">+</operator> <literal type="number" pos:start="31:46" pos:end="31:47">15</literal><operator pos:start="31:48" pos:end="31:48">)</operator> <operator pos:start="31:50" pos:end="31:51">&gt;&gt;</operator> <literal type="number" pos:start="31:53" pos:end="31:53">4</literal></expr> </then><else pos:start="31:55" pos:end="31:83">: <expr pos:start="31:57" pos:end="31:83"><operator pos:start="31:57" pos:end="31:57">(</operator><name pos:start="31:58" pos:end="31:73"><name pos:start="31:58" pos:end="31:58">c</name><operator pos:start="31:59" pos:end="31:60">-&gt;</operator><name pos:start="31:61" pos:end="31:65">avctx</name><operator pos:start="31:66" pos:end="31:67">-&gt;</operator><name pos:start="31:68" pos:end="31:73">height</name></name> <operator pos:start="31:75" pos:end="31:75">+</operator> <literal type="number" pos:start="31:77" pos:end="31:77">7</literal><operator pos:start="31:78" pos:end="31:78">)</operator> <operator pos:start="31:80" pos:end="31:81">&gt;&gt;</operator> <literal type="number" pos:start="31:83" pos:end="31:83">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:45"><decl pos:start="33:5" pos:end="33:44"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:13">width</name> <init pos:start="33:15" pos:end="33:44">= <expr pos:start="33:17" pos:end="33:44"><name pos:start="33:17" pos:end="33:31"><name pos:start="33:17" pos:end="33:17">c</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:24">avctx</name><operator pos:start="33:25" pos:end="33:26">-&gt;</operator><name pos:start="33:27" pos:end="33:31">width</name></name> <operator pos:start="33:33" pos:end="33:34">&gt;&gt;</operator> <name pos:start="33:36" pos:end="33:44">is_chroma</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:41"><expr pos:start="37:5" pos:end="37:40"><call pos:start="37:5" pos:end="37:40"><name pos:start="37:5" pos:end="37:16">init_lengths</name><argument_list pos:start="37:17" pos:end="37:40">(<argument pos:start="37:18" pos:end="37:18"><expr pos:start="37:18" pos:end="37:18"><name pos:start="37:18" pos:end="37:18">c</name></expr></argument>, <argument pos:start="37:21" pos:end="37:35"><expr pos:start="37:21" pos:end="37:35"><call pos:start="37:21" pos:end="37:35"><name pos:start="37:21" pos:end="37:25">FFMAX</name><argument_list pos:start="37:26" pos:end="37:35">(<argument pos:start="37:27" pos:end="37:31"><expr pos:start="37:27" pos:end="37:31"><name pos:start="37:27" pos:end="37:31">width</name></expr></argument>, <argument pos:start="37:34" pos:end="37:34"><expr pos:start="37:34" pos:end="37:34"><literal type="number" pos:start="37:34" pos:end="37:34">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="37:38" pos:end="37:39"><expr pos:start="37:38" pos:end="37:39"><name pos:start="37:38" pos:end="37:39">bw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="39:5" pos:end="41:30">for <control pos:start="39:9" pos:end="39:37">(<init pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</init> <condition pos:start="39:17" pos:end="39:32"><expr pos:start="39:17" pos:end="39:31"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <name pos:start="39:21" pos:end="39:31">BINK_NB_SRC</name></expr>;</condition> <incr pos:start="39:34" pos:end="39:36"><expr pos:start="39:34" pos:end="39:36"><name pos:start="39:34" pos:end="39:34">i</name><operator pos:start="39:35" pos:end="39:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="41:9" pos:end="41:30"><block_content pos:start="41:9" pos:end="41:30">

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><call pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:19">read_bundle</name><argument_list pos:start="41:20" pos:end="41:29">(<argument pos:start="41:21" pos:end="41:22"><expr pos:start="41:21" pos:end="41:22"><name pos:start="41:21" pos:end="41:22">bc</name></expr></argument>, <argument pos:start="41:25" pos:end="41:25"><expr pos:start="41:25" pos:end="41:25"><name pos:start="41:25" pos:end="41:25">c</name></expr></argument>, <argument pos:start="41:28" pos:end="41:28"><expr pos:start="41:28" pos:end="41:28"><name pos:start="41:28" pos:end="41:28">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="45:5" pos:end="47:66"><expr pos:start="45:5" pos:end="47:65"><name pos:start="45:5" pos:end="45:13">ref_start</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <ternary pos:start="45:17" pos:end="47:65"><condition pos:start="45:17" pos:end="45:42"><expr pos:start="45:17" pos:end="45:40"><name pos:start="45:17" pos:end="45:40"><name pos:start="45:17" pos:end="45:17">c</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:23">last</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:29">data</name><index pos:start="45:30" pos:end="45:40">[<expr pos:start="45:31" pos:end="45:39"><name pos:start="45:31" pos:end="45:39">plane_idx</name></expr>]</index></name></expr> ?</condition><then pos:start="45:44" pos:end="45:67"> <expr pos:start="45:44" pos:end="45:67"><name pos:start="45:44" pos:end="45:67"><name pos:start="45:44" pos:end="45:44">c</name><operator pos:start="45:45" pos:end="45:46">-&gt;</operator><name pos:start="45:47" pos:end="45:50">last</name><operator pos:start="45:51" pos:end="45:52">-&gt;</operator><name pos:start="45:53" pos:end="45:56">data</name><index pos:start="45:57" pos:end="45:67">[<expr pos:start="45:58" pos:end="45:66"><name pos:start="45:58" pos:end="45:66">plane_idx</name></expr>]</index></name></expr>

                                         </then><else pos:start="47:42" pos:end="47:65">: <expr pos:start="47:44" pos:end="47:65"><name pos:start="47:44" pos:end="47:65"><name pos:start="47:44" pos:end="47:48">frame</name><operator pos:start="47:49" pos:end="47:50">-&gt;</operator><name pos:start="47:51" pos:end="47:54">data</name><index pos:start="47:55" pos:end="47:65">[<expr pos:start="47:56" pos:end="47:64"><name pos:start="47:56" pos:end="47:64">plane_idx</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="51:73"><expr pos:start="49:5" pos:end="51:72"><name pos:start="49:5" pos:end="49:11">ref_end</name>   <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:25">ref_start</name>

                <operator pos:start="51:17" pos:end="51:17">+</operator> <operator pos:start="51:19" pos:end="51:19">(</operator><name pos:start="51:20" pos:end="51:21">bw</name> <operator pos:start="51:23" pos:end="51:23">-</operator> <literal type="number" pos:start="51:25" pos:end="51:27">1</literal> <operator pos:start="51:27" pos:end="51:27">+</operator> <name pos:start="51:29" pos:end="51:56"><name pos:start="51:29" pos:end="51:29">c</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:35">last</name><operator pos:start="51:36" pos:end="51:37">-&gt;</operator><name pos:start="51:38" pos:end="51:45">linesize</name><index pos:start="51:46" pos:end="51:56">[<expr pos:start="51:47" pos:end="51:55"><name pos:start="51:47" pos:end="51:55">plane_idx</name></expr>]</index></name> <operator pos:start="51:58" pos:end="51:58">*</operator> <operator pos:start="51:60" pos:end="51:60">(</operator><name pos:start="51:61" pos:end="51:62">bh</name> <operator pos:start="51:64" pos:end="51:64">-</operator> <literal type="number" pos:start="51:66" pos:end="51:66">1</literal><operator pos:start="51:67" pos:end="51:67">)</operator><operator pos:start="51:68" pos:end="51:68">)</operator> <operator pos:start="51:70" pos:end="51:70">*</operator> <literal type="number" pos:start="51:72" pos:end="51:72">8</literal></expr>;</expr_stmt>



    <for pos:start="55:5" pos:end="57:50">for <control pos:start="55:9" pos:end="55:28">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:23"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <literal type="number" pos:start="55:21" pos:end="55:22">64</literal></expr>;</condition> <incr pos:start="55:25" pos:end="55:27"><expr pos:start="55:25" pos:end="55:27"><name pos:start="55:25" pos:end="55:25">i</name><operator pos:start="55:26" pos:end="55:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="57:9" pos:end="57:50"><block_content pos:start="57:9" pos:end="57:50">

        <expr_stmt pos:start="57:9" pos:end="57:50"><expr pos:start="57:9" pos:end="57:49"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:16">coordmap</name><index pos:start="57:17" pos:end="57:19">[<expr pos:start="57:18" pos:end="57:18"><name pos:start="57:18" pos:end="57:18">i</name></expr>]</index></name> <operator pos:start="57:21" pos:end="57:21">=</operator> <operator pos:start="57:23" pos:end="57:23">(</operator><name pos:start="57:24" pos:end="57:24">i</name> <operator pos:start="57:26" pos:end="57:26">&amp;</operator> <literal type="number" pos:start="57:28" pos:end="57:28">7</literal><operator pos:start="57:29" pos:end="57:29">)</operator> <operator pos:start="57:31" pos:end="57:31">+</operator> <operator pos:start="57:33" pos:end="57:33">(</operator><name pos:start="57:34" pos:end="57:34">i</name> <operator pos:start="57:36" pos:end="57:37">&gt;&gt;</operator> <literal type="number" pos:start="57:39" pos:end="57:39">3</literal><operator pos:start="57:40" pos:end="57:40">)</operator> <operator pos:start="57:42" pos:end="57:42">*</operator> <name pos:start="57:44" pos:end="57:49">stride</name></expr>;</expr_stmt></block_content></block></for>



    <for pos:start="61:5" pos:end="413:5">for <control pos:start="61:9" pos:end="61:31">(<init pos:start="61:10" pos:end="61:16"><expr pos:start="61:10" pos:end="61:15"><name pos:start="61:10" pos:end="61:11">by</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr>;</init> <condition pos:start="61:18" pos:end="61:25"><expr pos:start="61:18" pos:end="61:24"><name pos:start="61:18" pos:end="61:19">by</name> <operator pos:start="61:21" pos:end="61:21">&lt;</operator> <name pos:start="61:23" pos:end="61:24">bh</name></expr>;</condition> <incr pos:start="61:27" pos:end="61:30"><expr pos:start="61:27" pos:end="61:30"><name pos:start="61:27" pos:end="61:28">by</name><operator pos:start="61:29" pos:end="61:30">++</operator></expr></incr>)</control> <block pos:start="61:33" pos:end="413:5">{<block_content pos:start="63:9" pos:end="411:9">

        <if_stmt pos:start="63:9" pos:end="65:23"><if pos:start="63:9" pos:end="65:23">if <condition pos:start="63:12" pos:end="63:89">(<expr pos:start="63:13" pos:end="63:88"><operator pos:start="63:13" pos:end="63:13">(</operator><name pos:start="63:14" pos:end="63:16">ret</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <call pos:start="63:20" pos:end="63:83"><name pos:start="63:20" pos:end="63:35">read_block_types</name><argument_list pos:start="63:36" pos:end="63:83">(<argument pos:start="63:37" pos:end="63:44"><expr pos:start="63:37" pos:end="63:44"><name pos:start="63:37" pos:end="63:44"><name pos:start="63:37" pos:end="63:37">c</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:44">avctx</name></name></expr></argument>, <argument pos:start="63:47" pos:end="63:48"><expr pos:start="63:47" pos:end="63:48"><name pos:start="63:47" pos:end="63:48">bc</name></expr></argument>, <argument pos:start="63:51" pos:end="63:82"><expr pos:start="63:51" pos:end="63:82"><operator pos:start="63:51" pos:end="63:51">&amp;</operator><name pos:start="63:52" pos:end="63:82"><name pos:start="63:52" pos:end="63:52">c</name><operator pos:start="63:53" pos:end="63:54">-&gt;</operator><name pos:start="63:55" pos:end="63:60">bundle</name><index pos:start="63:61" pos:end="63:82">[<expr pos:start="63:62" pos:end="63:81"><name pos:start="63:62" pos:end="63:81">BINK_SRC_BLOCK_TYPES</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="63:84" pos:end="63:84">)</operator> <operator pos:start="63:86" pos:end="63:86">&lt;</operator> <literal type="number" pos:start="63:88" pos:end="63:88">0</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:23"><block_content pos:start="65:13" pos:end="65:23">

            <return pos:start="65:13" pos:end="65:23">return <expr pos:start="65:20" pos:end="65:22"><name pos:start="65:20" pos:end="65:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="69:23"><if pos:start="67:9" pos:end="69:23">if <condition pos:start="67:12" pos:end="67:93">(<expr pos:start="67:13" pos:end="67:92"><operator pos:start="67:13" pos:end="67:13">(</operator><name pos:start="67:14" pos:end="67:16">ret</name> <operator pos:start="67:18" pos:end="67:18">=</operator> <call pos:start="67:20" pos:end="67:87"><name pos:start="67:20" pos:end="67:35">read_block_types</name><argument_list pos:start="67:36" pos:end="67:87">(<argument pos:start="67:37" pos:end="67:44"><expr pos:start="67:37" pos:end="67:44"><name pos:start="67:37" pos:end="67:44"><name pos:start="67:37" pos:end="67:37">c</name><operator pos:start="67:38" pos:end="67:39">-&gt;</operator><name pos:start="67:40" pos:end="67:44">avctx</name></name></expr></argument>, <argument pos:start="67:47" pos:end="67:48"><expr pos:start="67:47" pos:end="67:48"><name pos:start="67:47" pos:end="67:48">bc</name></expr></argument>, <argument pos:start="67:51" pos:end="67:86"><expr pos:start="67:51" pos:end="67:86"><operator pos:start="67:51" pos:end="67:51">&amp;</operator><name pos:start="67:52" pos:end="67:86"><name pos:start="67:52" pos:end="67:52">c</name><operator pos:start="67:53" pos:end="67:54">-&gt;</operator><name pos:start="67:55" pos:end="67:60">bundle</name><index pos:start="67:61" pos:end="67:86">[<expr pos:start="67:62" pos:end="67:85"><name pos:start="67:62" pos:end="67:85">BINK_SRC_SUB_BLOCK_TYPES</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="67:88" pos:end="67:88">)</operator> <operator pos:start="67:90" pos:end="67:90">&lt;</operator> <literal type="number" pos:start="67:92" pos:end="67:92">0</literal></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:23"><block_content pos:start="69:13" pos:end="69:23">

            <return pos:start="69:13" pos:end="69:23">return <expr pos:start="69:20" pos:end="69:22"><name pos:start="69:20" pos:end="69:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="73:23"><if pos:start="71:9" pos:end="73:23">if <condition pos:start="71:12" pos:end="71:72">(<expr pos:start="71:13" pos:end="71:71"><operator pos:start="71:13" pos:end="71:13">(</operator><name pos:start="71:14" pos:end="71:16">ret</name> <operator pos:start="71:18" pos:end="71:18">=</operator> <call pos:start="71:20" pos:end="71:66"><name pos:start="71:20" pos:end="71:30">read_colors</name><argument_list pos:start="71:31" pos:end="71:66">(<argument pos:start="71:32" pos:end="71:33"><expr pos:start="71:32" pos:end="71:33"><name pos:start="71:32" pos:end="71:33">bc</name></expr></argument>, <argument pos:start="71:36" pos:end="71:62"><expr pos:start="71:36" pos:end="71:62"><operator pos:start="71:36" pos:end="71:36">&amp;</operator><name pos:start="71:37" pos:end="71:62"><name pos:start="71:37" pos:end="71:37">c</name><operator pos:start="71:38" pos:end="71:39">-&gt;</operator><name pos:start="71:40" pos:end="71:45">bundle</name><index pos:start="71:46" pos:end="71:62">[<expr pos:start="71:47" pos:end="71:61"><name pos:start="71:47" pos:end="71:61">BINK_SRC_COLORS</name></expr>]</index></name></expr></argument>, <argument pos:start="71:65" pos:end="71:65"><expr pos:start="71:65" pos:end="71:65"><name pos:start="71:65" pos:end="71:65">c</name></expr></argument>)</argument_list></call><operator pos:start="71:67" pos:end="71:67">)</operator> <operator pos:start="71:69" pos:end="71:69">&lt;</operator> <literal type="number" pos:start="71:71" pos:end="71:71">0</literal></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:23"><block_content pos:start="73:13" pos:end="73:23">

            <return pos:start="73:13" pos:end="73:23">return <expr pos:start="73:20" pos:end="73:22"><name pos:start="73:20" pos:end="73:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="75:9" pos:end="77:23"><if pos:start="75:9" pos:end="77:23">if <condition pos:start="75:12" pos:end="75:82">(<expr pos:start="75:13" pos:end="75:81"><operator pos:start="75:13" pos:end="75:13">(</operator><name pos:start="75:14" pos:end="75:16">ret</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:76"><name pos:start="75:20" pos:end="75:32">read_patterns</name><argument_list pos:start="75:33" pos:end="75:76">(<argument pos:start="75:34" pos:end="75:41"><expr pos:start="75:34" pos:end="75:41"><name pos:start="75:34" pos:end="75:41"><name pos:start="75:34" pos:end="75:34">c</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:41">avctx</name></name></expr></argument>, <argument pos:start="75:44" pos:end="75:45"><expr pos:start="75:44" pos:end="75:45"><name pos:start="75:44" pos:end="75:45">bc</name></expr></argument>, <argument pos:start="75:48" pos:end="75:75"><expr pos:start="75:48" pos:end="75:75"><operator pos:start="75:48" pos:end="75:48">&amp;</operator><name pos:start="75:49" pos:end="75:75"><name pos:start="75:49" pos:end="75:49">c</name><operator pos:start="75:50" pos:end="75:51">-&gt;</operator><name pos:start="75:52" pos:end="75:57">bundle</name><index pos:start="75:58" pos:end="75:75">[<expr pos:start="75:59" pos:end="75:74"><name pos:start="75:59" pos:end="75:74">BINK_SRC_PATTERN</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="75:77" pos:end="75:77">)</operator> <operator pos:start="75:79" pos:end="75:79">&lt;</operator> <literal type="number" pos:start="75:81" pos:end="75:81">0</literal></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:23"><block_content pos:start="77:13" pos:end="77:23">

            <return pos:start="77:13" pos:end="77:23">return <expr pos:start="77:20" pos:end="77:22"><name pos:start="77:20" pos:end="77:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="81:23"><if pos:start="79:9" pos:end="81:23">if <condition pos:start="79:12" pos:end="79:85">(<expr pos:start="79:13" pos:end="79:84"><operator pos:start="79:13" pos:end="79:13">(</operator><name pos:start="79:14" pos:end="79:16">ret</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <call pos:start="79:20" pos:end="79:79"><name pos:start="79:20" pos:end="79:37">read_motion_values</name><argument_list pos:start="79:38" pos:end="79:79">(<argument pos:start="79:39" pos:end="79:46"><expr pos:start="79:39" pos:end="79:46"><name pos:start="79:39" pos:end="79:46"><name pos:start="79:39" pos:end="79:39">c</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:46">avctx</name></name></expr></argument>, <argument pos:start="79:49" pos:end="79:50"><expr pos:start="79:49" pos:end="79:50"><name pos:start="79:49" pos:end="79:50">bc</name></expr></argument>, <argument pos:start="79:53" pos:end="79:78"><expr pos:start="79:53" pos:end="79:78"><operator pos:start="79:53" pos:end="79:53">&amp;</operator><name pos:start="79:54" pos:end="79:78"><name pos:start="79:54" pos:end="79:54">c</name><operator pos:start="79:55" pos:end="79:56">-&gt;</operator><name pos:start="79:57" pos:end="79:62">bundle</name><index pos:start="79:63" pos:end="79:78">[<expr pos:start="79:64" pos:end="79:77"><name pos:start="79:64" pos:end="79:77">BINK_SRC_X_OFF</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="79:80" pos:end="79:80">)</operator> <operator pos:start="79:82" pos:end="79:82">&lt;</operator> <literal type="number" pos:start="79:84" pos:end="79:84">0</literal></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:23"><block_content pos:start="81:13" pos:end="81:23">

            <return pos:start="81:13" pos:end="81:23">return <expr pos:start="81:20" pos:end="81:22"><name pos:start="81:20" pos:end="81:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="85:23"><if pos:start="83:9" pos:end="85:23">if <condition pos:start="83:12" pos:end="83:85">(<expr pos:start="83:13" pos:end="83:84"><operator pos:start="83:13" pos:end="83:13">(</operator><name pos:start="83:14" pos:end="83:16">ret</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <call pos:start="83:20" pos:end="83:79"><name pos:start="83:20" pos:end="83:37">read_motion_values</name><argument_list pos:start="83:38" pos:end="83:79">(<argument pos:start="83:39" pos:end="83:46"><expr pos:start="83:39" pos:end="83:46"><name pos:start="83:39" pos:end="83:46"><name pos:start="83:39" pos:end="83:39">c</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:46">avctx</name></name></expr></argument>, <argument pos:start="83:49" pos:end="83:50"><expr pos:start="83:49" pos:end="83:50"><name pos:start="83:49" pos:end="83:50">bc</name></expr></argument>, <argument pos:start="83:53" pos:end="83:78"><expr pos:start="83:53" pos:end="83:78"><operator pos:start="83:53" pos:end="83:53">&amp;</operator><name pos:start="83:54" pos:end="83:78"><name pos:start="83:54" pos:end="83:54">c</name><operator pos:start="83:55" pos:end="83:56">-&gt;</operator><name pos:start="83:57" pos:end="83:62">bundle</name><index pos:start="83:63" pos:end="83:78">[<expr pos:start="83:64" pos:end="83:77"><name pos:start="83:64" pos:end="83:77">BINK_SRC_Y_OFF</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="83:80" pos:end="83:80">)</operator> <operator pos:start="83:82" pos:end="83:82">&lt;</operator> <literal type="number" pos:start="83:84" pos:end="83:84">0</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:23"><block_content pos:start="85:13" pos:end="85:23">

            <return pos:start="85:13" pos:end="85:23">return <expr pos:start="85:20" pos:end="85:22"><name pos:start="85:20" pos:end="85:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="87:9" pos:end="89:23"><if pos:start="87:9" pos:end="89:23">if <condition pos:start="87:12" pos:end="87:96">(<expr pos:start="87:13" pos:end="87:95"><operator pos:start="87:13" pos:end="87:13">(</operator><name pos:start="87:14" pos:end="87:16">ret</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <call pos:start="87:20" pos:end="87:90"><name pos:start="87:20" pos:end="87:27">read_dcs</name><argument_list pos:start="87:28" pos:end="87:90">(<argument pos:start="87:29" pos:end="87:36"><expr pos:start="87:29" pos:end="87:36"><name pos:start="87:29" pos:end="87:36"><name pos:start="87:29" pos:end="87:29">c</name><operator pos:start="87:30" pos:end="87:31">-&gt;</operator><name pos:start="87:32" pos:end="87:36">avctx</name></name></expr></argument>, <argument pos:start="87:39" pos:end="87:40"><expr pos:start="87:39" pos:end="87:40"><name pos:start="87:39" pos:end="87:40">bc</name></expr></argument>, <argument pos:start="87:43" pos:end="87:71"><expr pos:start="87:43" pos:end="87:71"><operator pos:start="87:43" pos:end="87:43">&amp;</operator><name pos:start="87:44" pos:end="87:71"><name pos:start="87:44" pos:end="87:44">c</name><operator pos:start="87:45" pos:end="87:46">-&gt;</operator><name pos:start="87:47" pos:end="87:52">bundle</name><index pos:start="87:53" pos:end="87:71">[<expr pos:start="87:54" pos:end="87:70"><name pos:start="87:54" pos:end="87:70">BINK_SRC_INTRA_DC</name></expr>]</index></name></expr></argument>, <argument pos:start="87:74" pos:end="87:86"><expr pos:start="87:74" pos:end="87:86"><name pos:start="87:74" pos:end="87:86">DC_START_BITS</name></expr></argument>, <argument pos:start="87:89" pos:end="87:89"><expr pos:start="87:89" pos:end="87:89"><literal type="number" pos:start="87:89" pos:end="87:89">0</literal></expr></argument>)</argument_list></call><operator pos:start="87:91" pos:end="87:91">)</operator> <operator pos:start="87:93" pos:end="87:93">&lt;</operator> <literal type="number" pos:start="87:95" pos:end="87:95">0</literal></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:23"><block_content pos:start="89:13" pos:end="89:23">

            <return pos:start="89:13" pos:end="89:23">return <expr pos:start="89:20" pos:end="89:22"><name pos:start="89:20" pos:end="89:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="93:23"><if pos:start="91:9" pos:end="93:23">if <condition pos:start="91:12" pos:end="91:96">(<expr pos:start="91:13" pos:end="91:95"><operator pos:start="91:13" pos:end="91:13">(</operator><name pos:start="91:14" pos:end="91:16">ret</name> <operator pos:start="91:18" pos:end="91:18">=</operator> <call pos:start="91:20" pos:end="91:90"><name pos:start="91:20" pos:end="91:27">read_dcs</name><argument_list pos:start="91:28" pos:end="91:90">(<argument pos:start="91:29" pos:end="91:36"><expr pos:start="91:29" pos:end="91:36"><name pos:start="91:29" pos:end="91:36"><name pos:start="91:29" pos:end="91:29">c</name><operator pos:start="91:30" pos:end="91:31">-&gt;</operator><name pos:start="91:32" pos:end="91:36">avctx</name></name></expr></argument>, <argument pos:start="91:39" pos:end="91:40"><expr pos:start="91:39" pos:end="91:40"><name pos:start="91:39" pos:end="91:40">bc</name></expr></argument>, <argument pos:start="91:43" pos:end="91:71"><expr pos:start="91:43" pos:end="91:71"><operator pos:start="91:43" pos:end="91:43">&amp;</operator><name pos:start="91:44" pos:end="91:71"><name pos:start="91:44" pos:end="91:44">c</name><operator pos:start="91:45" pos:end="91:46">-&gt;</operator><name pos:start="91:47" pos:end="91:52">bundle</name><index pos:start="91:53" pos:end="91:71">[<expr pos:start="91:54" pos:end="91:70"><name pos:start="91:54" pos:end="91:70">BINK_SRC_INTER_DC</name></expr>]</index></name></expr></argument>, <argument pos:start="91:74" pos:end="91:86"><expr pos:start="91:74" pos:end="91:86"><name pos:start="91:74" pos:end="91:86">DC_START_BITS</name></expr></argument>, <argument pos:start="91:89" pos:end="91:89"><expr pos:start="91:89" pos:end="91:89"><literal type="number" pos:start="91:89" pos:end="91:89">1</literal></expr></argument>)</argument_list></call><operator pos:start="91:91" pos:end="91:91">)</operator> <operator pos:start="91:93" pos:end="91:93">&lt;</operator> <literal type="number" pos:start="91:95" pos:end="91:95">0</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:23"><block_content pos:start="93:13" pos:end="93:23">

            <return pos:start="93:13" pos:end="93:23">return <expr pos:start="93:20" pos:end="93:22"><name pos:start="93:20" pos:end="93:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="95:9" pos:end="97:23"><if pos:start="95:9" pos:end="97:23">if <condition pos:start="95:12" pos:end="95:74">(<expr pos:start="95:13" pos:end="95:73"><operator pos:start="95:13" pos:end="95:13">(</operator><name pos:start="95:14" pos:end="95:16">ret</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <call pos:start="95:20" pos:end="95:68"><name pos:start="95:20" pos:end="95:28">read_runs</name><argument_list pos:start="95:29" pos:end="95:68">(<argument pos:start="95:30" pos:end="95:37"><expr pos:start="95:30" pos:end="95:37"><name pos:start="95:30" pos:end="95:37"><name pos:start="95:30" pos:end="95:30">c</name><operator pos:start="95:31" pos:end="95:32">-&gt;</operator><name pos:start="95:33" pos:end="95:37">avctx</name></name></expr></argument>, <argument pos:start="95:40" pos:end="95:41"><expr pos:start="95:40" pos:end="95:41"><name pos:start="95:40" pos:end="95:41">bc</name></expr></argument>, <argument pos:start="95:44" pos:end="95:67"><expr pos:start="95:44" pos:end="95:67"><operator pos:start="95:44" pos:end="95:44">&amp;</operator><name pos:start="95:45" pos:end="95:67"><name pos:start="95:45" pos:end="95:45">c</name><operator pos:start="95:46" pos:end="95:47">-&gt;</operator><name pos:start="95:48" pos:end="95:53">bundle</name><index pos:start="95:54" pos:end="95:67">[<expr pos:start="95:55" pos:end="95:66"><name pos:start="95:55" pos:end="95:66">BINK_SRC_RUN</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="95:69" pos:end="95:69">)</operator> <operator pos:start="95:71" pos:end="95:71">&lt;</operator> <literal type="number" pos:start="95:73" pos:end="95:73">0</literal></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:23"><block_content pos:start="97:13" pos:end="97:23">

            <return pos:start="97:13" pos:end="97:23">return <expr pos:start="97:20" pos:end="97:22"><name pos:start="97:20" pos:end="97:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="101:9" pos:end="103:18"><if pos:start="101:9" pos:end="103:18">if <condition pos:start="101:12" pos:end="101:21">(<expr pos:start="101:13" pos:end="101:20"><name pos:start="101:13" pos:end="101:14">by</name> <operator pos:start="101:16" pos:end="101:17">==</operator> <name pos:start="101:19" pos:end="101:20">bh</name></expr>)</condition><block type="pseudo" pos:start="103:13" pos:end="103:18"><block_content pos:start="103:13" pos:end="103:18">

            <break pos:start="103:13" pos:end="103:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:53"><expr pos:start="105:9" pos:end="105:52"><name pos:start="105:9" pos:end="105:11">dst</name>  <operator pos:start="105:14" pos:end="105:14">=</operator> <name pos:start="105:16" pos:end="105:37"><name pos:start="105:16" pos:end="105:20">frame</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:26">data</name><index pos:start="105:27" pos:end="105:37">[<expr pos:start="105:28" pos:end="105:36"><name pos:start="105:28" pos:end="105:36">plane_idx</name></expr>]</index></name>  <operator pos:start="105:40" pos:end="105:40">+</operator> <literal type="number" pos:start="105:42" pos:end="105:42">8</literal><operator pos:start="105:43" pos:end="105:43">*</operator><name pos:start="105:44" pos:end="105:45">by</name><operator pos:start="105:46" pos:end="105:46">*</operator><name pos:start="105:47" pos:end="105:52">stride</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="109:81"><expr pos:start="107:9" pos:end="109:80"><name pos:start="107:9" pos:end="107:12">prev</name> <operator pos:start="107:14" pos:end="107:14">=</operator> <operator pos:start="107:16" pos:end="107:16">(</operator><ternary pos:start="107:17" pos:end="109:65"><condition pos:start="107:17" pos:end="107:42"><expr pos:start="107:17" pos:end="107:40"><name pos:start="107:17" pos:end="107:40"><name pos:start="107:17" pos:end="107:17">c</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:23">last</name><operator pos:start="107:24" pos:end="107:25">-&gt;</operator><name pos:start="107:26" pos:end="107:29">data</name><index pos:start="107:30" pos:end="107:40">[<expr pos:start="107:31" pos:end="107:39"><name pos:start="107:31" pos:end="107:39">plane_idx</name></expr>]</index></name></expr> ?</condition><then pos:start="107:44" pos:end="107:67"> <expr pos:start="107:44" pos:end="107:67"><name pos:start="107:44" pos:end="107:67"><name pos:start="107:44" pos:end="107:44">c</name><operator pos:start="107:45" pos:end="107:46">-&gt;</operator><name pos:start="107:47" pos:end="107:50">last</name><operator pos:start="107:51" pos:end="107:52">-&gt;</operator><name pos:start="107:53" pos:end="107:56">data</name><index pos:start="107:57" pos:end="107:67">[<expr pos:start="107:58" pos:end="107:66"><name pos:start="107:58" pos:end="107:66">plane_idx</name></expr>]</index></name></expr>

                                         </then><else pos:start="109:42" pos:end="109:65">: <expr pos:start="109:44" pos:end="109:65"><name pos:start="109:44" pos:end="109:65"><name pos:start="109:44" pos:end="109:48">frame</name><operator pos:start="109:49" pos:end="109:50">-&gt;</operator><name pos:start="109:51" pos:end="109:54">data</name><index pos:start="109:55" pos:end="109:65">[<expr pos:start="109:56" pos:end="109:64"><name pos:start="109:56" pos:end="109:64">plane_idx</name></expr>]</index></name></expr></else></ternary><operator pos:start="109:66" pos:end="109:66">)</operator> <operator pos:start="109:68" pos:end="109:68">+</operator> <literal type="number" pos:start="109:70" pos:end="109:70">8</literal><operator pos:start="109:71" pos:end="109:71">*</operator><name pos:start="109:72" pos:end="109:73">by</name><operator pos:start="109:74" pos:end="109:74">*</operator><name pos:start="109:75" pos:end="109:80">stride</name></expr>;</expr_stmt>

        <for pos:start="111:9" pos:end="411:9">for <control pos:start="111:13" pos:end="111:56">(<init pos:start="111:14" pos:end="111:20"><expr pos:start="111:14" pos:end="111:19"><name pos:start="111:14" pos:end="111:15">bx</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <literal type="number" pos:start="111:19" pos:end="111:19">0</literal></expr>;</init> <condition pos:start="111:22" pos:end="111:29"><expr pos:start="111:22" pos:end="111:28"><name pos:start="111:22" pos:end="111:23">bx</name> <operator pos:start="111:25" pos:end="111:25">&lt;</operator> <name pos:start="111:27" pos:end="111:28">bw</name></expr>;</condition> <incr pos:start="111:31" pos:end="111:55"><expr pos:start="111:31" pos:end="111:34"><name pos:start="111:31" pos:end="111:32">bx</name><operator pos:start="111:33" pos:end="111:34">++</operator></expr><operator pos:start="111:35" pos:end="111:35">,</operator> <expr pos:start="111:37" pos:end="111:44"><name pos:start="111:37" pos:end="111:39">dst</name> <operator pos:start="111:41" pos:end="111:42">+=</operator> <literal type="number" pos:start="111:44" pos:end="111:44">8</literal></expr><operator pos:start="111:45" pos:end="111:45">,</operator> <expr pos:start="111:47" pos:end="111:55"><name pos:start="111:47" pos:end="111:50">prev</name> <operator pos:start="111:52" pos:end="111:53">+=</operator> <literal type="number" pos:start="111:55" pos:end="111:55">8</literal></expr></incr>)</control> <block pos:start="111:58" pos:end="411:9">{<block_content pos:start="113:13" pos:end="409:13">

            <expr_stmt pos:start="113:13" pos:end="113:53"><expr pos:start="113:13" pos:end="113:52"><name pos:start="113:13" pos:end="113:15">blk</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <call pos:start="113:19" pos:end="113:52"><name pos:start="113:19" pos:end="113:27">get_value</name><argument_list pos:start="113:28" pos:end="113:52">(<argument pos:start="113:29" pos:end="113:29"><expr pos:start="113:29" pos:end="113:29"><name pos:start="113:29" pos:end="113:29">c</name></expr></argument>, <argument pos:start="113:32" pos:end="113:51"><expr pos:start="113:32" pos:end="113:51"><name pos:start="113:32" pos:end="113:51">BINK_SRC_BLOCK_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="115:13" pos:end="115:95">// 16x16 block type on odd line means part of the already decoded block, so skip it</comment>

            <if_stmt pos:start="117:13" pos:end="127:13"><if pos:start="117:13" pos:end="127:13">if <condition pos:start="117:16" pos:end="117:48">(<expr pos:start="117:17" pos:end="117:47"><operator pos:start="117:17" pos:end="117:17">(</operator><name pos:start="117:18" pos:end="117:19">by</name> <operator pos:start="117:21" pos:end="117:21">&amp;</operator> <literal type="number" pos:start="117:23" pos:end="117:23">1</literal><operator pos:start="117:24" pos:end="117:24">)</operator> <operator pos:start="117:26" pos:end="117:27">&amp;&amp;</operator> <name pos:start="117:29" pos:end="117:31">blk</name> <operator pos:start="117:33" pos:end="117:34">==</operator> <name pos:start="117:36" pos:end="117:47">SCALED_BLOCK</name></expr>)</condition> <block pos:start="117:50" pos:end="127:13">{<block_content pos:start="119:17" pos:end="125:25">

                <expr_stmt pos:start="119:17" pos:end="119:21"><expr pos:start="119:17" pos:end="119:20"><name pos:start="119:17" pos:end="119:18">bx</name><operator pos:start="119:19" pos:end="119:20">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:26"><expr pos:start="121:17" pos:end="121:25"><name pos:start="121:17" pos:end="121:19">dst</name>  <operator pos:start="121:22" pos:end="121:23">+=</operator> <literal type="number" pos:start="121:25" pos:end="121:25">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:26"><expr pos:start="123:17" pos:end="123:25"><name pos:start="123:17" pos:end="123:20">prev</name> <operator pos:start="123:22" pos:end="123:23">+=</operator> <literal type="number" pos:start="123:25" pos:end="123:25">8</literal></expr>;</expr_stmt>

                <continue pos:start="125:17" pos:end="125:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <switch pos:start="129:13" pos:end="409:13">switch <condition pos:start="129:20" pos:end="129:24">(<expr pos:start="129:21" pos:end="129:23"><name pos:start="129:21" pos:end="129:23">blk</name></expr>)</condition> <block pos:start="129:26" pos:end="409:13">{<block_content pos:start="131:13" pos:end="407:43">

            <case pos:start="131:13" pos:end="131:28">case <expr pos:start="131:18" pos:end="131:27"><name pos:start="131:18" pos:end="131:27">SKIP_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="133:17" pos:end="133:67"><expr pos:start="133:17" pos:end="133:66"><name pos:start="133:17" pos:end="133:44"><name pos:start="133:17" pos:end="133:17">c</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:23">hdsp</name><operator pos:start="133:24" pos:end="133:24">.</operator><name pos:start="133:25" pos:end="133:38">put_pixels_tab</name><index pos:start="133:39" pos:end="133:41">[<expr pos:start="133:40" pos:end="133:40"><literal type="number" pos:start="133:40" pos:end="133:40">1</literal></expr>]</index><index pos:start="133:42" pos:end="133:44">[<expr pos:start="133:43" pos:end="133:43"><literal type="number" pos:start="133:43" pos:end="133:43">0</literal></expr>]</index></name><operator pos:start="133:45" pos:end="133:45">(</operator><name pos:start="133:46" pos:end="133:48">dst</name><operator pos:start="133:49" pos:end="133:49">,</operator> <name pos:start="133:51" pos:end="133:54">prev</name><operator pos:start="133:55" pos:end="133:55">,</operator> <name pos:start="133:57" pos:end="133:62">stride</name><operator pos:start="133:63" pos:end="133:63">,</operator> <literal type="number" pos:start="133:65" pos:end="133:65">8</literal><operator pos:start="133:66" pos:end="133:66">)</operator></expr>;</expr_stmt>

                <break pos:start="135:17" pos:end="135:22">break;</break>

            <case pos:start="137:13" pos:end="137:30">case <expr pos:start="137:18" pos:end="137:29"><name pos:start="137:18" pos:end="137:29">SCALED_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="139:17" pos:end="139:61"><expr pos:start="139:17" pos:end="139:60"><name pos:start="139:17" pos:end="139:19">blk</name> <operator pos:start="139:21" pos:end="139:21">=</operator> <call pos:start="139:23" pos:end="139:60"><name pos:start="139:23" pos:end="139:31">get_value</name><argument_list pos:start="139:32" pos:end="139:60">(<argument pos:start="139:33" pos:end="139:33"><expr pos:start="139:33" pos:end="139:33"><name pos:start="139:33" pos:end="139:33">c</name></expr></argument>, <argument pos:start="139:36" pos:end="139:59"><expr pos:start="139:36" pos:end="139:59"><name pos:start="139:36" pos:end="139:59">BINK_SRC_SUB_BLOCK_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="141:17" pos:end="243:17">switch <condition pos:start="141:24" pos:end="141:28">(<expr pos:start="141:25" pos:end="141:27"><name pos:start="141:25" pos:end="141:27">blk</name></expr>)</condition> <block pos:start="141:30" pos:end="243:17">{<block_content pos:start="143:17" pos:end="241:47">

                <case pos:start="143:17" pos:end="143:31">case <expr pos:start="143:22" pos:end="143:30"><name pos:start="143:22" pos:end="143:30">RUN_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="145:21" pos:end="145:64"><expr pos:start="145:21" pos:end="145:63"><name pos:start="145:21" pos:end="145:24">scan</name> <operator pos:start="145:26" pos:end="145:26">=</operator> <name pos:start="145:28" pos:end="145:63"><name pos:start="145:28" pos:end="145:40">bink_patterns</name><index pos:start="145:41" pos:end="145:63">[<expr pos:start="145:42" pos:end="145:62"><call pos:start="145:42" pos:end="145:62"><name pos:start="145:42" pos:end="145:55">bitstream_read</name><argument_list pos:start="145:56" pos:end="145:62">(<argument pos:start="145:57" pos:end="145:58"><expr pos:start="145:57" pos:end="145:58"><name pos:start="145:57" pos:end="145:58">bc</name></expr></argument>, <argument pos:start="145:61" pos:end="145:61"><expr pos:start="145:61" pos:end="145:61"><literal type="number" pos:start="145:61" pos:end="145:61">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="147:21" pos:end="147:26"><expr pos:start="147:21" pos:end="147:25"><name pos:start="147:21" pos:end="147:21">i</name> <operator pos:start="147:23" pos:end="147:23">=</operator> <literal type="number" pos:start="147:25" pos:end="147:25">0</literal></expr>;</expr_stmt>

                    <do pos:start="149:21" pos:end="181:37">do <block pos:start="149:24" pos:end="181:21">{<block_content pos:start="151:25" pos:end="179:25">

                        <decl_stmt pos:start="151:25" pos:end="151:65"><decl pos:start="151:25" pos:end="151:64"><type pos:start="151:25" pos:end="151:27"><name pos:start="151:25" pos:end="151:27">int</name></type> <name pos:start="151:29" pos:end="151:31">run</name> <init pos:start="151:33" pos:end="151:64">= <expr pos:start="151:35" pos:end="151:64"><call pos:start="151:35" pos:end="151:60"><name pos:start="151:35" pos:end="151:43">get_value</name><argument_list pos:start="151:44" pos:end="151:60">(<argument pos:start="151:45" pos:end="151:45"><expr pos:start="151:45" pos:end="151:45"><name pos:start="151:45" pos:end="151:45">c</name></expr></argument>, <argument pos:start="151:48" pos:end="151:59"><expr pos:start="151:48" pos:end="151:59"><name pos:start="151:48" pos:end="151:59">BINK_SRC_RUN</name></expr></argument>)</argument_list></call> <operator pos:start="151:62" pos:end="151:62">+</operator> <literal type="number" pos:start="151:64" pos:end="151:64">1</literal></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="155:25" pos:end="155:33"><expr pos:start="155:25" pos:end="155:32"><name pos:start="155:25" pos:end="155:25">i</name> <operator pos:start="155:27" pos:end="155:28">+=</operator> <name pos:start="155:30" pos:end="155:32">run</name></expr>;</expr_stmt>

                        <if_stmt pos:start="157:25" pos:end="163:25"><if pos:start="157:25" pos:end="163:25">if <condition pos:start="157:28" pos:end="157:35">(<expr pos:start="157:29" pos:end="157:34"><name pos:start="157:29" pos:end="157:29">i</name> <operator pos:start="157:31" pos:end="157:31">&gt;</operator> <literal type="number" pos:start="157:33" pos:end="157:34">64</literal></expr>)</condition> <block pos:start="157:37" pos:end="163:25">{<block_content pos:start="159:29" pos:end="161:55">

                            <expr_stmt pos:start="159:29" pos:end="159:87"><expr pos:start="159:29" pos:end="159:86"><call pos:start="159:29" pos:end="159:86"><name pos:start="159:29" pos:end="159:34">av_log</name><argument_list pos:start="159:35" pos:end="159:86">(<argument pos:start="159:36" pos:end="159:43"><expr pos:start="159:36" pos:end="159:43"><name pos:start="159:36" pos:end="159:43"><name pos:start="159:36" pos:end="159:36">c</name><operator pos:start="159:37" pos:end="159:38">-&gt;</operator><name pos:start="159:39" pos:end="159:43">avctx</name></name></expr></argument>, <argument pos:start="159:46" pos:end="159:57"><expr pos:start="159:46" pos:end="159:57"><name pos:start="159:46" pos:end="159:57">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="159:60" pos:end="159:85"><expr pos:start="159:60" pos:end="159:85"><literal type="string" pos:start="159:60" pos:end="159:85">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="161:29" pos:end="161:55">return <expr pos:start="161:36" pos:end="161:54"><name pos:start="161:36" pos:end="161:54">AVERROR_INVALIDDATA</name></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="165:25" pos:end="179:25"><if pos:start="165:25" pos:end="173:25">if <condition pos:start="165:28" pos:end="165:51">(<expr pos:start="165:29" pos:end="165:50"><call pos:start="165:29" pos:end="165:50"><name pos:start="165:29" pos:end="165:46">bitstream_read_bit</name><argument_list pos:start="165:47" pos:end="165:50">(<argument pos:start="165:48" pos:end="165:49"><expr pos:start="165:48" pos:end="165:49"><name pos:start="165:48" pos:end="165:49">bc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="165:53" pos:end="173:25">{<block_content pos:start="167:29" pos:end="171:52">

                            <expr_stmt pos:start="167:29" pos:end="167:62"><expr pos:start="167:29" pos:end="167:61"><name pos:start="167:29" pos:end="167:29">v</name> <operator pos:start="167:31" pos:end="167:31">=</operator> <call pos:start="167:33" pos:end="167:61"><name pos:start="167:33" pos:end="167:41">get_value</name><argument_list pos:start="167:42" pos:end="167:61">(<argument pos:start="167:43" pos:end="167:43"><expr pos:start="167:43" pos:end="167:43"><name pos:start="167:43" pos:end="167:43">c</name></expr></argument>, <argument pos:start="167:46" pos:end="167:60"><expr pos:start="167:46" pos:end="167:60"><name pos:start="167:46" pos:end="167:60">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <for pos:start="169:29" pos:end="171:52">for <control pos:start="169:33" pos:end="169:53">(<init pos:start="169:34" pos:end="169:39"><expr pos:start="169:34" pos:end="169:38"><name pos:start="169:34" pos:end="169:34">j</name> <operator pos:start="169:36" pos:end="169:36">=</operator> <literal type="number" pos:start="169:38" pos:end="169:38">0</literal></expr>;</init> <condition pos:start="169:41" pos:end="169:48"><expr pos:start="169:41" pos:end="169:47"><name pos:start="169:41" pos:end="169:41">j</name> <operator pos:start="169:43" pos:end="169:43">&lt;</operator> <name pos:start="169:45" pos:end="169:47">run</name></expr>;</condition> <incr pos:start="169:50" pos:end="169:52"><expr pos:start="169:50" pos:end="169:52"><name pos:start="169:50" pos:end="169:50">j</name><operator pos:start="169:51" pos:end="169:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="171:33" pos:end="171:52"><block_content pos:start="171:33" pos:end="171:52">

                                <expr_stmt pos:start="171:33" pos:end="171:52"><expr pos:start="171:33" pos:end="171:51"><name pos:start="171:33" pos:end="171:47"><name pos:start="171:33" pos:end="171:38">ublock</name><index pos:start="171:39" pos:end="171:47">[<expr pos:start="171:40" pos:end="171:46"><operator pos:start="171:40" pos:end="171:40">*</operator><name pos:start="171:41" pos:end="171:44">scan</name><operator pos:start="171:45" pos:end="171:46">++</operator></expr>]</index></name> <operator pos:start="171:49" pos:end="171:49">=</operator> <name pos:start="171:51" pos:end="171:51">v</name></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></if> <else pos:start="173:27" pos:end="179:25">else <block pos:start="173:32" pos:end="179:25">{<block_content pos:start="175:29" pos:end="177:80">

                            <for pos:start="175:29" pos:end="177:80">for <control pos:start="175:33" pos:end="175:53">(<init pos:start="175:34" pos:end="175:39"><expr pos:start="175:34" pos:end="175:38"><name pos:start="175:34" pos:end="175:34">j</name> <operator pos:start="175:36" pos:end="175:36">=</operator> <literal type="number" pos:start="175:38" pos:end="175:38">0</literal></expr>;</init> <condition pos:start="175:41" pos:end="175:48"><expr pos:start="175:41" pos:end="175:47"><name pos:start="175:41" pos:end="175:41">j</name> <operator pos:start="175:43" pos:end="175:43">&lt;</operator> <name pos:start="175:45" pos:end="175:47">run</name></expr>;</condition> <incr pos:start="175:50" pos:end="175:52"><expr pos:start="175:50" pos:end="175:52"><name pos:start="175:50" pos:end="175:50">j</name><operator pos:start="175:51" pos:end="175:52">++</operator></expr></incr>)</control><block type="pseudo" pos:start="177:33" pos:end="177:80"><block_content pos:start="177:33" pos:end="177:80">

                                <expr_stmt pos:start="177:33" pos:end="177:80"><expr pos:start="177:33" pos:end="177:79"><name pos:start="177:33" pos:end="177:47"><name pos:start="177:33" pos:end="177:38">ublock</name><index pos:start="177:39" pos:end="177:47">[<expr pos:start="177:40" pos:end="177:46"><operator pos:start="177:40" pos:end="177:40">*</operator><name pos:start="177:41" pos:end="177:44">scan</name><operator pos:start="177:45" pos:end="177:46">++</operator></expr>]</index></name> <operator pos:start="177:49" pos:end="177:49">=</operator> <call pos:start="177:51" pos:end="177:79"><name pos:start="177:51" pos:end="177:59">get_value</name><argument_list pos:start="177:60" pos:end="177:79">(<argument pos:start="177:61" pos:end="177:61"><expr pos:start="177:61" pos:end="177:61"><name pos:start="177:61" pos:end="177:61">c</name></expr></argument>, <argument pos:start="177:64" pos:end="177:78"><expr pos:start="177:64" pos:end="177:78"><name pos:start="177:64" pos:end="177:78">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block> while <condition pos:start="181:29" pos:end="181:36">(<expr pos:start="181:30" pos:end="181:35"><name pos:start="181:30" pos:end="181:30">i</name> <operator pos:start="181:32" pos:end="181:32">&lt;</operator> <literal type="number" pos:start="181:34" pos:end="181:35">63</literal></expr>)</condition>;</do>

                    <if_stmt pos:start="183:21" pos:end="185:72"><if pos:start="183:21" pos:end="185:72">if <condition pos:start="183:24" pos:end="183:32">(<expr pos:start="183:25" pos:end="183:31"><name pos:start="183:25" pos:end="183:25">i</name> <operator pos:start="183:27" pos:end="183:28">==</operator> <literal type="number" pos:start="183:30" pos:end="183:31">63</literal></expr>)</condition><block type="pseudo" pos:start="185:25" pos:end="185:72"><block_content pos:start="185:25" pos:end="185:72">

                        <expr_stmt pos:start="185:25" pos:end="185:72"><expr pos:start="185:25" pos:end="185:71"><name pos:start="185:25" pos:end="185:39"><name pos:start="185:25" pos:end="185:30">ublock</name><index pos:start="185:31" pos:end="185:39">[<expr pos:start="185:32" pos:end="185:38"><operator pos:start="185:32" pos:end="185:32">*</operator><name pos:start="185:33" pos:end="185:36">scan</name><operator pos:start="185:37" pos:end="185:38">++</operator></expr>]</index></name> <operator pos:start="185:41" pos:end="185:41">=</operator> <call pos:start="185:43" pos:end="185:71"><name pos:start="185:43" pos:end="185:51">get_value</name><argument_list pos:start="185:52" pos:end="185:71">(<argument pos:start="185:53" pos:end="185:53"><expr pos:start="185:53" pos:end="185:53"><name pos:start="185:53" pos:end="185:53">c</name></expr></argument>, <argument pos:start="185:56" pos:end="185:70"><expr pos:start="185:56" pos:end="185:70"><name pos:start="185:56" pos:end="185:70">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="187:21" pos:end="187:26">break;</break>

                <case pos:start="189:17" pos:end="189:33">case <expr pos:start="189:22" pos:end="189:32"><name pos:start="189:22" pos:end="189:32">INTRA_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="191:21" pos:end="191:64"><expr pos:start="191:21" pos:end="191:63"><call pos:start="191:21" pos:end="191:63"><name pos:start="191:21" pos:end="191:26">memset</name><argument_list pos:start="191:27" pos:end="191:63">(<argument pos:start="191:28" pos:end="191:35"><expr pos:start="191:28" pos:end="191:35"><name pos:start="191:28" pos:end="191:35">dctblock</name></expr></argument>, <argument pos:start="191:38" pos:end="191:38"><expr pos:start="191:38" pos:end="191:38"><literal type="number" pos:start="191:38" pos:end="191:38">0</literal></expr></argument>, <argument pos:start="191:41" pos:end="191:62"><expr pos:start="191:41" pos:end="191:62"><sizeof pos:start="191:41" pos:end="191:57">sizeof<argument_list pos:start="191:47" pos:end="191:57">(<argument pos:start="191:48" pos:end="191:56"><expr pos:start="191:48" pos:end="191:56"><operator pos:start="191:48" pos:end="191:48">*</operator><name pos:start="191:49" pos:end="191:56">dctblock</name></expr></argument>)</argument_list></sizeof> <operator pos:start="191:59" pos:end="191:59">*</operator> <literal type="number" pos:start="191:61" pos:end="191:62">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="193:21" pos:end="193:66"><expr pos:start="193:21" pos:end="193:65"><name pos:start="193:21" pos:end="193:31"><name pos:start="193:21" pos:end="193:28">dctblock</name><index pos:start="193:29" pos:end="193:31">[<expr pos:start="193:30" pos:end="193:30"><literal type="number" pos:start="193:30" pos:end="193:30">0</literal></expr>]</index></name> <operator pos:start="193:33" pos:end="193:33">=</operator> <call pos:start="193:35" pos:end="193:65"><name pos:start="193:35" pos:end="193:43">get_value</name><argument_list pos:start="193:44" pos:end="193:65">(<argument pos:start="193:45" pos:end="193:45"><expr pos:start="193:45" pos:end="193:45"><name pos:start="193:45" pos:end="193:45">c</name></expr></argument>, <argument pos:start="193:48" pos:end="193:64"><expr pos:start="193:48" pos:end="193:64"><name pos:start="193:48" pos:end="193:64">BINK_SRC_INTRA_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:83"><expr pos:start="195:21" pos:end="195:82"><call pos:start="195:21" pos:end="195:82"><name pos:start="195:21" pos:end="195:35">read_dct_coeffs</name><argument_list pos:start="195:36" pos:end="195:82">(<argument pos:start="195:37" pos:end="195:38"><expr pos:start="195:37" pos:end="195:38"><name pos:start="195:37" pos:end="195:38">bc</name></expr></argument>, <argument pos:start="195:41" pos:end="195:48"><expr pos:start="195:41" pos:end="195:48"><name pos:start="195:41" pos:end="195:48">dctblock</name></expr></argument>, <argument pos:start="195:51" pos:end="195:59"><expr pos:start="195:51" pos:end="195:59"><name pos:start="195:51" pos:end="195:59">bink_scan</name></expr></argument>, <argument pos:start="195:62" pos:end="195:77"><expr pos:start="195:62" pos:end="195:77"><name pos:start="195:62" pos:end="195:77">bink_intra_quant</name></expr></argument>, <argument pos:start="195:80" pos:end="195:81"><expr pos:start="195:80" pos:end="195:81"><operator pos:start="195:80" pos:end="195:80">-</operator><literal type="number" pos:start="195:81" pos:end="195:81">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:61"><expr pos:start="197:21" pos:end="197:60"><call pos:start="197:21" pos:end="197:60"><name pos:start="197:21" pos:end="197:39"><name pos:start="197:21" pos:end="197:21">c</name><operator pos:start="197:22" pos:end="197:23">-&gt;</operator><name pos:start="197:24" pos:end="197:30">binkdsp</name><operator pos:start="197:31" pos:end="197:31">.</operator><name pos:start="197:32" pos:end="197:39">idct_put</name></name><argument_list pos:start="197:40" pos:end="197:60">(<argument pos:start="197:41" pos:end="197:46"><expr pos:start="197:41" pos:end="197:46"><name pos:start="197:41" pos:end="197:46">ublock</name></expr></argument>, <argument pos:start="197:49" pos:end="197:49"><expr pos:start="197:49" pos:end="197:49"><literal type="number" pos:start="197:49" pos:end="197:49">8</literal></expr></argument>, <argument pos:start="197:52" pos:end="197:59"><expr pos:start="197:52" pos:end="197:59"><name pos:start="197:52" pos:end="197:59">dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="199:21" pos:end="199:26">break;</break>

                <case pos:start="201:17" pos:end="201:32">case <expr pos:start="201:22" pos:end="201:31"><name pos:start="201:22" pos:end="201:31">FILL_BLOCK</name></expr>:</case>

                    <expr_stmt pos:start="203:21" pos:end="203:54"><expr pos:start="203:21" pos:end="203:53"><name pos:start="203:21" pos:end="203:21">v</name> <operator pos:start="203:23" pos:end="203:23">=</operator> <call pos:start="203:25" pos:end="203:53"><name pos:start="203:25" pos:end="203:33">get_value</name><argument_list pos:start="203:34" pos:end="203:53">(<argument pos:start="203:35" pos:end="203:35"><expr pos:start="203:35" pos:end="203:35"><name pos:start="203:35" pos:end="203:35">c</name></expr></argument>, <argument pos:start="203:38" pos:end="203:52"><expr pos:start="203:38" pos:end="203:52"><name pos:start="203:38" pos:end="203:52">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="205:21" pos:end="205:66"><expr pos:start="205:21" pos:end="205:65"><name pos:start="205:21" pos:end="205:45"><name pos:start="205:21" pos:end="205:21">c</name><operator pos:start="205:22" pos:end="205:23">-&gt;</operator><name pos:start="205:24" pos:end="205:27">bdsp</name><operator pos:start="205:28" pos:end="205:28">.</operator><name pos:start="205:29" pos:end="205:42">fill_block_tab</name><index pos:start="205:43" pos:end="205:45">[<expr pos:start="205:44" pos:end="205:44"><literal type="number" pos:start="205:44" pos:end="205:44">0</literal></expr>]</index></name><operator pos:start="205:46" pos:end="205:46">(</operator><name pos:start="205:47" pos:end="205:49">dst</name><operator pos:start="205:50" pos:end="205:50">,</operator> <name pos:start="205:52" pos:end="205:52">v</name><operator pos:start="205:53" pos:end="205:53">,</operator> <name pos:start="205:55" pos:end="205:60">stride</name><operator pos:start="205:61" pos:end="205:61">,</operator> <literal type="number" pos:start="205:63" pos:end="205:64">16</literal><operator pos:start="205:65" pos:end="205:65">)</operator></expr>;</expr_stmt>

                    <break pos:start="207:21" pos:end="207:26">break;</break>

                <case pos:start="209:17" pos:end="209:35">case <expr pos:start="209:22" pos:end="209:34"><name pos:start="209:22" pos:end="209:34">PATTERN_BLOCK</name></expr>:</case>

                    <for pos:start="211:21" pos:end="213:63">for <control pos:start="211:25" pos:end="211:43">(<init pos:start="211:26" pos:end="211:31"><expr pos:start="211:26" pos:end="211:30"><name pos:start="211:26" pos:end="211:26">i</name> <operator pos:start="211:28" pos:end="211:28">=</operator> <literal type="number" pos:start="211:30" pos:end="211:30">0</literal></expr>;</init> <condition pos:start="211:33" pos:end="211:38"><expr pos:start="211:33" pos:end="211:37"><name pos:start="211:33" pos:end="211:33">i</name> <operator pos:start="211:35" pos:end="211:35">&lt;</operator> <literal type="number" pos:start="211:37" pos:end="211:37">2</literal></expr>;</condition> <incr pos:start="211:40" pos:end="211:42"><expr pos:start="211:40" pos:end="211:42"><name pos:start="211:40" pos:end="211:40">i</name><operator pos:start="211:41" pos:end="211:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="213:25" pos:end="213:63"><block_content pos:start="213:25" pos:end="213:63">

                        <expr_stmt pos:start="213:25" pos:end="213:63"><expr pos:start="213:25" pos:end="213:62"><name pos:start="213:25" pos:end="213:30"><name pos:start="213:25" pos:end="213:27">col</name><index pos:start="213:28" pos:end="213:30">[<expr pos:start="213:29" pos:end="213:29"><name pos:start="213:29" pos:end="213:29">i</name></expr>]</index></name> <operator pos:start="213:32" pos:end="213:32">=</operator> <call pos:start="213:34" pos:end="213:62"><name pos:start="213:34" pos:end="213:42">get_value</name><argument_list pos:start="213:43" pos:end="213:62">(<argument pos:start="213:44" pos:end="213:44"><expr pos:start="213:44" pos:end="213:44"><name pos:start="213:44" pos:end="213:44">c</name></expr></argument>, <argument pos:start="213:47" pos:end="213:61"><expr pos:start="213:47" pos:end="213:61"><name pos:start="213:47" pos:end="213:61">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    <for pos:start="215:21" pos:end="223:21">for <control pos:start="215:25" pos:end="215:43">(<init pos:start="215:26" pos:end="215:31"><expr pos:start="215:26" pos:end="215:30"><name pos:start="215:26" pos:end="215:26">j</name> <operator pos:start="215:28" pos:end="215:28">=</operator> <literal type="number" pos:start="215:30" pos:end="215:30">0</literal></expr>;</init> <condition pos:start="215:33" pos:end="215:38"><expr pos:start="215:33" pos:end="215:37"><name pos:start="215:33" pos:end="215:33">j</name> <operator pos:start="215:35" pos:end="215:35">&lt;</operator> <literal type="number" pos:start="215:37" pos:end="215:37">8</literal></expr>;</condition> <incr pos:start="215:40" pos:end="215:42"><expr pos:start="215:40" pos:end="215:42"><name pos:start="215:40" pos:end="215:40">j</name><operator pos:start="215:41" pos:end="215:42">++</operator></expr></incr>)</control> <block pos:start="215:45" pos:end="223:21">{<block_content pos:start="217:25" pos:end="221:57">

                        <expr_stmt pos:start="217:25" pos:end="217:59"><expr pos:start="217:25" pos:end="217:58"><name pos:start="217:25" pos:end="217:25">v</name> <operator pos:start="217:27" pos:end="217:27">=</operator> <call pos:start="217:29" pos:end="217:58"><name pos:start="217:29" pos:end="217:37">get_value</name><argument_list pos:start="217:38" pos:end="217:58">(<argument pos:start="217:39" pos:end="217:39"><expr pos:start="217:39" pos:end="217:39"><name pos:start="217:39" pos:end="217:39">c</name></expr></argument>, <argument pos:start="217:42" pos:end="217:57"><expr pos:start="217:42" pos:end="217:57"><name pos:start="217:42" pos:end="217:57">BINK_SRC_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="219:25" pos:end="221:57">for <control pos:start="219:29" pos:end="219:56">(<init pos:start="219:30" pos:end="219:35"><expr pos:start="219:30" pos:end="219:34"><name pos:start="219:30" pos:end="219:30">i</name> <operator pos:start="219:32" pos:end="219:32">=</operator> <literal type="number" pos:start="219:34" pos:end="219:34">0</literal></expr>;</init> <condition pos:start="219:37" pos:end="219:42"><expr pos:start="219:37" pos:end="219:41"><name pos:start="219:37" pos:end="219:37">i</name> <operator pos:start="219:39" pos:end="219:39">&lt;</operator> <literal type="number" pos:start="219:41" pos:end="219:41">8</literal></expr>;</condition> <incr pos:start="219:44" pos:end="219:55"><expr pos:start="219:44" pos:end="219:46"><name pos:start="219:44" pos:end="219:44">i</name><operator pos:start="219:45" pos:end="219:46">++</operator></expr><operator pos:start="219:47" pos:end="219:47">,</operator> <expr pos:start="219:49" pos:end="219:55"><name pos:start="219:49" pos:end="219:49">v</name> <operator pos:start="219:51" pos:end="219:53">&gt;&gt;=</operator> <literal type="number" pos:start="219:55" pos:end="219:55">1</literal></expr></incr>)</control><block type="pseudo" pos:start="221:29" pos:end="221:57"><block_content pos:start="221:29" pos:end="221:57">

                            <expr_stmt pos:start="221:29" pos:end="221:57"><expr pos:start="221:29" pos:end="221:56"><name pos:start="221:29" pos:end="221:43"><name pos:start="221:29" pos:end="221:34">ublock</name><index pos:start="221:35" pos:end="221:43">[<expr pos:start="221:36" pos:end="221:42"><name pos:start="221:36" pos:end="221:36">i</name> <operator pos:start="221:38" pos:end="221:38">+</operator> <name pos:start="221:40" pos:end="221:40">j</name><operator pos:start="221:41" pos:end="221:41">*</operator><literal type="number" pos:start="221:42" pos:end="221:42">8</literal></expr>]</index></name> <operator pos:start="221:45" pos:end="221:45">=</operator> <name pos:start="221:47" pos:end="221:56"><name pos:start="221:47" pos:end="221:49">col</name><index pos:start="221:50" pos:end="221:56">[<expr pos:start="221:51" pos:end="221:55"><name pos:start="221:51" pos:end="221:51">v</name> <operator pos:start="221:53" pos:end="221:53">&amp;</operator> <literal type="number" pos:start="221:55" pos:end="221:55">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></for>

                    <break pos:start="225:21" pos:end="225:26">break;</break>

                <case pos:start="227:17" pos:end="227:31">case <expr pos:start="227:22" pos:end="227:30"><name pos:start="227:22" pos:end="227:30">RAW_BLOCK</name></expr>:</case>

                    <for pos:start="229:21" pos:end="233:76">for <control pos:start="229:25" pos:end="229:43">(<init pos:start="229:26" pos:end="229:31"><expr pos:start="229:26" pos:end="229:30"><name pos:start="229:26" pos:end="229:26">j</name> <operator pos:start="229:28" pos:end="229:28">=</operator> <literal type="number" pos:start="229:30" pos:end="229:30">0</literal></expr>;</init> <condition pos:start="229:33" pos:end="229:38"><expr pos:start="229:33" pos:end="229:37"><name pos:start="229:33" pos:end="229:33">j</name> <operator pos:start="229:35" pos:end="229:35">&lt;</operator> <literal type="number" pos:start="229:37" pos:end="229:37">8</literal></expr>;</condition> <incr pos:start="229:40" pos:end="229:42"><expr pos:start="229:40" pos:end="229:42"><name pos:start="229:40" pos:end="229:40">j</name><operator pos:start="229:41" pos:end="229:42">++</operator></expr></incr>)</control><block type="pseudo" pos:start="231:25" pos:end="233:76"><block_content pos:start="231:25" pos:end="233:76">

                        <for pos:start="231:25" pos:end="233:76">for <control pos:start="231:29" pos:end="231:47">(<init pos:start="231:30" pos:end="231:35"><expr pos:start="231:30" pos:end="231:34"><name pos:start="231:30" pos:end="231:30">i</name> <operator pos:start="231:32" pos:end="231:32">=</operator> <literal type="number" pos:start="231:34" pos:end="231:34">0</literal></expr>;</init> <condition pos:start="231:37" pos:end="231:42"><expr pos:start="231:37" pos:end="231:41"><name pos:start="231:37" pos:end="231:37">i</name> <operator pos:start="231:39" pos:end="231:39">&lt;</operator> <literal type="number" pos:start="231:41" pos:end="231:41">8</literal></expr>;</condition> <incr pos:start="231:44" pos:end="231:46"><expr pos:start="231:44" pos:end="231:46"><name pos:start="231:44" pos:end="231:44">i</name><operator pos:start="231:45" pos:end="231:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="233:29" pos:end="233:76"><block_content pos:start="233:29" pos:end="233:76">

                            <expr_stmt pos:start="233:29" pos:end="233:76"><expr pos:start="233:29" pos:end="233:75"><name pos:start="233:29" pos:end="233:43"><name pos:start="233:29" pos:end="233:34">ublock</name><index pos:start="233:35" pos:end="233:43">[<expr pos:start="233:36" pos:end="233:42"><name pos:start="233:36" pos:end="233:36">i</name> <operator pos:start="233:38" pos:end="233:38">+</operator> <name pos:start="233:40" pos:end="233:40">j</name><operator pos:start="233:41" pos:end="233:41">*</operator><literal type="number" pos:start="233:42" pos:end="233:42">8</literal></expr>]</index></name> <operator pos:start="233:45" pos:end="233:45">=</operator> <call pos:start="233:47" pos:end="233:75"><name pos:start="233:47" pos:end="233:55">get_value</name><argument_list pos:start="233:56" pos:end="233:75">(<argument pos:start="233:57" pos:end="233:57"><expr pos:start="233:57" pos:end="233:57"><name pos:start="233:57" pos:end="233:57">c</name></expr></argument>, <argument pos:start="233:60" pos:end="233:74"><expr pos:start="233:60" pos:end="233:74"><name pos:start="233:60" pos:end="233:74">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

                    <break pos:start="235:21" pos:end="235:26">break;</break>

                <default pos:start="237:17" pos:end="237:24">default:</default>

                    <expr_stmt pos:start="239:21" pos:end="239:91"><expr pos:start="239:21" pos:end="239:90"><call pos:start="239:21" pos:end="239:90"><name pos:start="239:21" pos:end="239:26">av_log</name><argument_list pos:start="239:27" pos:end="239:90">(<argument pos:start="239:28" pos:end="239:35"><expr pos:start="239:28" pos:end="239:35"><name pos:start="239:28" pos:end="239:35"><name pos:start="239:28" pos:end="239:28">c</name><operator pos:start="239:29" pos:end="239:30">-&gt;</operator><name pos:start="239:31" pos:end="239:35">avctx</name></name></expr></argument>, <argument pos:start="239:38" pos:end="239:49"><expr pos:start="239:38" pos:end="239:49"><name pos:start="239:38" pos:end="239:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="239:52" pos:end="239:84"><expr pos:start="239:52" pos:end="239:84"><literal type="string" pos:start="239:52" pos:end="239:84">"Incorrect 16x16 block type %d\n"</literal></expr></argument>, <argument pos:start="239:87" pos:end="239:89"><expr pos:start="239:87" pos:end="239:89"><name pos:start="239:87" pos:end="239:89">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="241:21" pos:end="241:47">return <expr pos:start="241:28" pos:end="241:46"><name pos:start="241:28" pos:end="241:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></switch>

                <if_stmt pos:start="245:17" pos:end="247:60"><if pos:start="245:17" pos:end="247:60">if <condition pos:start="245:20" pos:end="245:38">(<expr pos:start="245:21" pos:end="245:37"><name pos:start="245:21" pos:end="245:23">blk</name> <operator pos:start="245:25" pos:end="245:26">!=</operator> <name pos:start="245:28" pos:end="245:37">FILL_BLOCK</name></expr>)</condition><block type="pseudo" pos:start="247:17" pos:end="247:60"><block_content pos:start="247:17" pos:end="247:60">

                <expr_stmt pos:start="247:17" pos:end="247:60"><expr pos:start="247:17" pos:end="247:59"><call pos:start="247:17" pos:end="247:59"><name pos:start="247:17" pos:end="247:38"><name pos:start="247:17" pos:end="247:17">c</name><operator pos:start="247:18" pos:end="247:19">-&gt;</operator><name pos:start="247:20" pos:end="247:26">binkdsp</name><operator pos:start="247:27" pos:end="247:27">.</operator><name pos:start="247:28" pos:end="247:38">scale_block</name></name><argument_list pos:start="247:39" pos:end="247:59">(<argument pos:start="247:40" pos:end="247:45"><expr pos:start="247:40" pos:end="247:45"><name pos:start="247:40" pos:end="247:45">ublock</name></expr></argument>, <argument pos:start="247:48" pos:end="247:50"><expr pos:start="247:48" pos:end="247:50"><name pos:start="247:48" pos:end="247:50">dst</name></expr></argument>, <argument pos:start="247:53" pos:end="247:58"><expr pos:start="247:53" pos:end="247:58"><name pos:start="247:53" pos:end="247:58">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:21"><expr pos:start="249:17" pos:end="249:20"><name pos:start="249:17" pos:end="249:18">bx</name><operator pos:start="249:19" pos:end="249:20">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:26"><expr pos:start="251:17" pos:end="251:25"><name pos:start="251:17" pos:end="251:19">dst</name>  <operator pos:start="251:22" pos:end="251:23">+=</operator> <literal type="number" pos:start="251:25" pos:end="251:25">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:26"><expr pos:start="253:17" pos:end="253:25"><name pos:start="253:17" pos:end="253:20">prev</name> <operator pos:start="253:22" pos:end="253:23">+=</operator> <literal type="number" pos:start="253:25" pos:end="253:25">8</literal></expr>;</expr_stmt>

                <break pos:start="255:17" pos:end="255:22">break;</break>

            <case pos:start="257:13" pos:end="257:30">case <expr pos:start="257:18" pos:end="257:29"><name pos:start="257:18" pos:end="257:29">MOTION_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="259:17" pos:end="261:58"><expr pos:start="259:17" pos:end="261:57"><name pos:start="259:17" pos:end="259:19">ret</name> <operator pos:start="259:21" pos:end="259:21">=</operator> <call pos:start="259:23" pos:end="261:57"><name pos:start="259:23" pos:end="259:37">bink_put_pixels</name><argument_list pos:start="259:38" pos:end="261:57">(<argument pos:start="259:39" pos:end="259:39"><expr pos:start="259:39" pos:end="259:39"><name pos:start="259:39" pos:end="259:39">c</name></expr></argument>, <argument pos:start="259:42" pos:end="259:44"><expr pos:start="259:42" pos:end="259:44"><name pos:start="259:42" pos:end="259:44">dst</name></expr></argument>, <argument pos:start="259:47" pos:end="259:50"><expr pos:start="259:47" pos:end="259:50"><name pos:start="259:47" pos:end="259:50">prev</name></expr></argument>, <argument pos:start="259:53" pos:end="259:58"><expr pos:start="259:53" pos:end="259:58"><name pos:start="259:53" pos:end="259:58">stride</name></expr></argument>,

                                      <argument pos:start="261:39" pos:end="261:47"><expr pos:start="261:39" pos:end="261:47"><name pos:start="261:39" pos:end="261:47">ref_start</name></expr></argument>, <argument pos:start="261:50" pos:end="261:56"><expr pos:start="261:50" pos:end="261:56"><name pos:start="261:50" pos:end="261:56">ref_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="263:17" pos:end="265:31"><if pos:start="263:17" pos:end="265:31">if <condition pos:start="263:20" pos:end="263:28">(<expr pos:start="263:21" pos:end="263:27"><name pos:start="263:21" pos:end="263:23">ret</name> <operator pos:start="263:25" pos:end="263:25">&lt;</operator> <literal type="number" pos:start="263:27" pos:end="263:27">0</literal></expr>)</condition><block type="pseudo" pos:start="265:21" pos:end="265:31"><block_content pos:start="265:21" pos:end="265:31">

                    <return pos:start="265:21" pos:end="265:31">return <expr pos:start="265:28" pos:end="265:30"><name pos:start="265:28" pos:end="265:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

                <break pos:start="267:17" pos:end="267:22">break;</break>

            <case pos:start="269:13" pos:end="269:27">case <expr pos:start="269:18" pos:end="269:26"><name pos:start="269:18" pos:end="269:26">RUN_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="271:17" pos:end="271:60"><expr pos:start="271:17" pos:end="271:59"><name pos:start="271:17" pos:end="271:20">scan</name> <operator pos:start="271:22" pos:end="271:22">=</operator> <name pos:start="271:24" pos:end="271:59"><name pos:start="271:24" pos:end="271:36">bink_patterns</name><index pos:start="271:37" pos:end="271:59">[<expr pos:start="271:38" pos:end="271:58"><call pos:start="271:38" pos:end="271:58"><name pos:start="271:38" pos:end="271:51">bitstream_read</name><argument_list pos:start="271:52" pos:end="271:58">(<argument pos:start="271:53" pos:end="271:54"><expr pos:start="271:53" pos:end="271:54"><name pos:start="271:53" pos:end="271:54">bc</name></expr></argument>, <argument pos:start="271:57" pos:end="271:57"><expr pos:start="271:57" pos:end="271:57"><literal type="number" pos:start="271:57" pos:end="271:57">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="273:17" pos:end="273:22"><expr pos:start="273:17" pos:end="273:21"><name pos:start="273:17" pos:end="273:17">i</name> <operator pos:start="273:19" pos:end="273:19">=</operator> <literal type="number" pos:start="273:21" pos:end="273:21">0</literal></expr>;</expr_stmt>

                <do pos:start="275:17" pos:end="307:33">do <block pos:start="275:20" pos:end="307:17">{<block_content pos:start="277:21" pos:end="305:21">

                    <decl_stmt pos:start="277:21" pos:end="277:61"><decl pos:start="277:21" pos:end="277:60"><type pos:start="277:21" pos:end="277:23"><name pos:start="277:21" pos:end="277:23">int</name></type> <name pos:start="277:25" pos:end="277:27">run</name> <init pos:start="277:29" pos:end="277:60">= <expr pos:start="277:31" pos:end="277:60"><call pos:start="277:31" pos:end="277:56"><name pos:start="277:31" pos:end="277:39">get_value</name><argument_list pos:start="277:40" pos:end="277:56">(<argument pos:start="277:41" pos:end="277:41"><expr pos:start="277:41" pos:end="277:41"><name pos:start="277:41" pos:end="277:41">c</name></expr></argument>, <argument pos:start="277:44" pos:end="277:55"><expr pos:start="277:44" pos:end="277:55"><name pos:start="277:44" pos:end="277:55">BINK_SRC_RUN</name></expr></argument>)</argument_list></call> <operator pos:start="277:58" pos:end="277:58">+</operator> <literal type="number" pos:start="277:60" pos:end="277:60">1</literal></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="281:21" pos:end="281:29"><expr pos:start="281:21" pos:end="281:28"><name pos:start="281:21" pos:end="281:21">i</name> <operator pos:start="281:23" pos:end="281:24">+=</operator> <name pos:start="281:26" pos:end="281:28">run</name></expr>;</expr_stmt>

                    <if_stmt pos:start="283:21" pos:end="289:21"><if pos:start="283:21" pos:end="289:21">if <condition pos:start="283:24" pos:end="283:31">(<expr pos:start="283:25" pos:end="283:30"><name pos:start="283:25" pos:end="283:25">i</name> <operator pos:start="283:27" pos:end="283:27">&gt;</operator> <literal type="number" pos:start="283:29" pos:end="283:30">64</literal></expr>)</condition> <block pos:start="283:33" pos:end="289:21">{<block_content pos:start="285:25" pos:end="287:51">

                        <expr_stmt pos:start="285:25" pos:end="285:83"><expr pos:start="285:25" pos:end="285:82"><call pos:start="285:25" pos:end="285:82"><name pos:start="285:25" pos:end="285:30">av_log</name><argument_list pos:start="285:31" pos:end="285:82">(<argument pos:start="285:32" pos:end="285:39"><expr pos:start="285:32" pos:end="285:39"><name pos:start="285:32" pos:end="285:39"><name pos:start="285:32" pos:end="285:32">c</name><operator pos:start="285:33" pos:end="285:34">-&gt;</operator><name pos:start="285:35" pos:end="285:39">avctx</name></name></expr></argument>, <argument pos:start="285:42" pos:end="285:53"><expr pos:start="285:42" pos:end="285:53"><name pos:start="285:42" pos:end="285:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="285:56" pos:end="285:81"><expr pos:start="285:56" pos:end="285:81"><literal type="string" pos:start="285:56" pos:end="285:81">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="287:25" pos:end="287:51">return <expr pos:start="287:32" pos:end="287:50"><name pos:start="287:32" pos:end="287:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="291:21" pos:end="305:21"><if pos:start="291:21" pos:end="299:21">if <condition pos:start="291:24" pos:end="291:47">(<expr pos:start="291:25" pos:end="291:46"><call pos:start="291:25" pos:end="291:46"><name pos:start="291:25" pos:end="291:42">bitstream_read_bit</name><argument_list pos:start="291:43" pos:end="291:46">(<argument pos:start="291:44" pos:end="291:45"><expr pos:start="291:44" pos:end="291:45"><name pos:start="291:44" pos:end="291:45">bc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="291:49" pos:end="299:21">{<block_content pos:start="293:25" pos:end="297:55">

                        <expr_stmt pos:start="293:25" pos:end="293:58"><expr pos:start="293:25" pos:end="293:57"><name pos:start="293:25" pos:end="293:25">v</name> <operator pos:start="293:27" pos:end="293:27">=</operator> <call pos:start="293:29" pos:end="293:57"><name pos:start="293:29" pos:end="293:37">get_value</name><argument_list pos:start="293:38" pos:end="293:57">(<argument pos:start="293:39" pos:end="293:39"><expr pos:start="293:39" pos:end="293:39"><name pos:start="293:39" pos:end="293:39">c</name></expr></argument>, <argument pos:start="293:42" pos:end="293:56"><expr pos:start="293:42" pos:end="293:56"><name pos:start="293:42" pos:end="293:56">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <for pos:start="295:25" pos:end="297:55">for <control pos:start="295:29" pos:end="295:49">(<init pos:start="295:30" pos:end="295:35"><expr pos:start="295:30" pos:end="295:34"><name pos:start="295:30" pos:end="295:30">j</name> <operator pos:start="295:32" pos:end="295:32">=</operator> <literal type="number" pos:start="295:34" pos:end="295:34">0</literal></expr>;</init> <condition pos:start="295:37" pos:end="295:44"><expr pos:start="295:37" pos:end="295:43"><name pos:start="295:37" pos:end="295:37">j</name> <operator pos:start="295:39" pos:end="295:39">&lt;</operator> <name pos:start="295:41" pos:end="295:43">run</name></expr>;</condition> <incr pos:start="295:46" pos:end="295:48"><expr pos:start="295:46" pos:end="295:48"><name pos:start="295:46" pos:end="295:46">j</name><operator pos:start="295:47" pos:end="295:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="297:29" pos:end="297:55"><block_content pos:start="297:29" pos:end="297:55">

                            <expr_stmt pos:start="297:29" pos:end="297:55"><expr pos:start="297:29" pos:end="297:54"><name pos:start="297:29" pos:end="297:50"><name pos:start="297:29" pos:end="297:31">dst</name><index pos:start="297:32" pos:end="297:50">[<expr pos:start="297:33" pos:end="297:49"><name pos:start="297:33" pos:end="297:49"><name pos:start="297:33" pos:end="297:40">coordmap</name><index pos:start="297:41" pos:end="297:49">[<expr pos:start="297:42" pos:end="297:48"><operator pos:start="297:42" pos:end="297:42">*</operator><name pos:start="297:43" pos:end="297:46">scan</name><operator pos:start="297:47" pos:end="297:48">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="297:52" pos:end="297:52">=</operator> <name pos:start="297:54" pos:end="297:54">v</name></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></if> <else pos:start="299:23" pos:end="305:21">else <block pos:start="299:28" pos:end="305:21">{<block_content pos:start="301:25" pos:end="303:83">

                        <for pos:start="301:25" pos:end="303:83">for <control pos:start="301:29" pos:end="301:49">(<init pos:start="301:30" pos:end="301:35"><expr pos:start="301:30" pos:end="301:34"><name pos:start="301:30" pos:end="301:30">j</name> <operator pos:start="301:32" pos:end="301:32">=</operator> <literal type="number" pos:start="301:34" pos:end="301:34">0</literal></expr>;</init> <condition pos:start="301:37" pos:end="301:44"><expr pos:start="301:37" pos:end="301:43"><name pos:start="301:37" pos:end="301:37">j</name> <operator pos:start="301:39" pos:end="301:39">&lt;</operator> <name pos:start="301:41" pos:end="301:43">run</name></expr>;</condition> <incr pos:start="301:46" pos:end="301:48"><expr pos:start="301:46" pos:end="301:48"><name pos:start="301:46" pos:end="301:46">j</name><operator pos:start="301:47" pos:end="301:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="303:29" pos:end="303:83"><block_content pos:start="303:29" pos:end="303:83">

                            <expr_stmt pos:start="303:29" pos:end="303:83"><expr pos:start="303:29" pos:end="303:82"><name pos:start="303:29" pos:end="303:50"><name pos:start="303:29" pos:end="303:31">dst</name><index pos:start="303:32" pos:end="303:50">[<expr pos:start="303:33" pos:end="303:49"><name pos:start="303:33" pos:end="303:49"><name pos:start="303:33" pos:end="303:40">coordmap</name><index pos:start="303:41" pos:end="303:49">[<expr pos:start="303:42" pos:end="303:48"><operator pos:start="303:42" pos:end="303:42">*</operator><name pos:start="303:43" pos:end="303:46">scan</name><operator pos:start="303:47" pos:end="303:48">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="303:52" pos:end="303:52">=</operator> <call pos:start="303:54" pos:end="303:82"><name pos:start="303:54" pos:end="303:62">get_value</name><argument_list pos:start="303:63" pos:end="303:82">(<argument pos:start="303:64" pos:end="303:64"><expr pos:start="303:64" pos:end="303:64"><name pos:start="303:64" pos:end="303:64">c</name></expr></argument>, <argument pos:start="303:67" pos:end="303:81"><expr pos:start="303:67" pos:end="303:81"><name pos:start="303:67" pos:end="303:81">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block> while <condition pos:start="307:25" pos:end="307:32">(<expr pos:start="307:26" pos:end="307:31"><name pos:start="307:26" pos:end="307:26">i</name> <operator pos:start="307:28" pos:end="307:28">&lt;</operator> <literal type="number" pos:start="307:30" pos:end="307:31">63</literal></expr>)</condition>;</do>

                <if_stmt pos:start="309:17" pos:end="311:75"><if pos:start="309:17" pos:end="311:75">if <condition pos:start="309:20" pos:end="309:28">(<expr pos:start="309:21" pos:end="309:27"><name pos:start="309:21" pos:end="309:21">i</name> <operator pos:start="309:23" pos:end="309:24">==</operator> <literal type="number" pos:start="309:26" pos:end="309:27">63</literal></expr>)</condition><block type="pseudo" pos:start="311:21" pos:end="311:75"><block_content pos:start="311:21" pos:end="311:75">

                    <expr_stmt pos:start="311:21" pos:end="311:75"><expr pos:start="311:21" pos:end="311:74"><name pos:start="311:21" pos:end="311:42"><name pos:start="311:21" pos:end="311:23">dst</name><index pos:start="311:24" pos:end="311:42">[<expr pos:start="311:25" pos:end="311:41"><name pos:start="311:25" pos:end="311:41"><name pos:start="311:25" pos:end="311:32">coordmap</name><index pos:start="311:33" pos:end="311:41">[<expr pos:start="311:34" pos:end="311:40"><operator pos:start="311:34" pos:end="311:34">*</operator><name pos:start="311:35" pos:end="311:38">scan</name><operator pos:start="311:39" pos:end="311:40">++</operator></expr>]</index></name></expr>]</index></name> <operator pos:start="311:44" pos:end="311:44">=</operator> <call pos:start="311:46" pos:end="311:74"><name pos:start="311:46" pos:end="311:54">get_value</name><argument_list pos:start="311:55" pos:end="311:74">(<argument pos:start="311:56" pos:end="311:56"><expr pos:start="311:56" pos:end="311:56"><name pos:start="311:56" pos:end="311:56">c</name></expr></argument>, <argument pos:start="311:59" pos:end="311:73"><expr pos:start="311:59" pos:end="311:73"><name pos:start="311:59" pos:end="311:73">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="313:17" pos:end="313:22">break;</break>

            <case pos:start="315:13" pos:end="315:31">case <expr pos:start="315:18" pos:end="315:30"><name pos:start="315:18" pos:end="315:30">RESIDUE_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="317:17" pos:end="319:58"><expr pos:start="317:17" pos:end="319:57"><name pos:start="317:17" pos:end="317:19">ret</name> <operator pos:start="317:21" pos:end="317:21">=</operator> <call pos:start="317:23" pos:end="319:57"><name pos:start="317:23" pos:end="317:37">bink_put_pixels</name><argument_list pos:start="317:38" pos:end="319:57">(<argument pos:start="317:39" pos:end="317:39"><expr pos:start="317:39" pos:end="317:39"><name pos:start="317:39" pos:end="317:39">c</name></expr></argument>, <argument pos:start="317:42" pos:end="317:44"><expr pos:start="317:42" pos:end="317:44"><name pos:start="317:42" pos:end="317:44">dst</name></expr></argument>, <argument pos:start="317:47" pos:end="317:50"><expr pos:start="317:47" pos:end="317:50"><name pos:start="317:47" pos:end="317:50">prev</name></expr></argument>, <argument pos:start="317:53" pos:end="317:58"><expr pos:start="317:53" pos:end="317:58"><name pos:start="317:53" pos:end="317:58">stride</name></expr></argument>,

                                      <argument pos:start="319:39" pos:end="319:47"><expr pos:start="319:39" pos:end="319:47"><name pos:start="319:39" pos:end="319:47">ref_start</name></expr></argument>, <argument pos:start="319:50" pos:end="319:56"><expr pos:start="319:50" pos:end="319:56"><name pos:start="319:50" pos:end="319:56">ref_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="321:17" pos:end="323:31"><if pos:start="321:17" pos:end="323:31">if <condition pos:start="321:20" pos:end="321:28">(<expr pos:start="321:21" pos:end="321:27"><name pos:start="321:21" pos:end="321:23">ret</name> <operator pos:start="321:25" pos:end="321:25">&lt;</operator> <literal type="number" pos:start="321:27" pos:end="321:27">0</literal></expr>)</condition><block type="pseudo" pos:start="323:21" pos:end="323:31"><block_content pos:start="323:21" pos:end="323:31">

                    <return pos:start="323:21" pos:end="323:31">return <expr pos:start="323:28" pos:end="323:30"><name pos:start="323:28" pos:end="323:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="325:17" pos:end="325:43"><expr pos:start="325:17" pos:end="325:42"><call pos:start="325:17" pos:end="325:42"><name pos:start="325:17" pos:end="325:35"><name pos:start="325:17" pos:end="325:17">c</name><operator pos:start="325:18" pos:end="325:19">-&gt;</operator><name pos:start="325:20" pos:end="325:23">bdsp</name><operator pos:start="325:24" pos:end="325:24">.</operator><name pos:start="325:25" pos:end="325:35">clear_block</name></name><argument_list pos:start="325:36" pos:end="325:42">(<argument pos:start="325:37" pos:end="325:41"><expr pos:start="325:37" pos:end="325:41"><name pos:start="325:37" pos:end="325:41">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:42"><expr pos:start="327:17" pos:end="327:41"><name pos:start="327:17" pos:end="327:17">v</name> <operator pos:start="327:19" pos:end="327:19">=</operator> <call pos:start="327:21" pos:end="327:41"><name pos:start="327:21" pos:end="327:34">bitstream_read</name><argument_list pos:start="327:35" pos:end="327:41">(<argument pos:start="327:36" pos:end="327:37"><expr pos:start="327:36" pos:end="327:37"><name pos:start="327:36" pos:end="327:37">bc</name></expr></argument>, <argument pos:start="327:40" pos:end="327:40"><expr pos:start="327:40" pos:end="327:40"><literal type="number" pos:start="327:40" pos:end="327:40">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:43"><expr pos:start="329:17" pos:end="329:42"><call pos:start="329:17" pos:end="329:42"><name pos:start="329:17" pos:end="329:28">read_residue</name><argument_list pos:start="329:29" pos:end="329:42">(<argument pos:start="329:30" pos:end="329:31"><expr pos:start="329:30" pos:end="329:31"><name pos:start="329:30" pos:end="329:31">bc</name></expr></argument>, <argument pos:start="329:34" pos:end="329:38"><expr pos:start="329:34" pos:end="329:38"><name pos:start="329:34" pos:end="329:38">block</name></expr></argument>, <argument pos:start="329:41" pos:end="329:41"><expr pos:start="329:41" pos:end="329:41"><name pos:start="329:41" pos:end="329:41">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="331:17" pos:end="331:59"><expr pos:start="331:17" pos:end="331:58"><call pos:start="331:17" pos:end="331:58"><name pos:start="331:17" pos:end="331:38"><name pos:start="331:17" pos:end="331:17">c</name><operator pos:start="331:18" pos:end="331:19">-&gt;</operator><name pos:start="331:20" pos:end="331:26">binkdsp</name><operator pos:start="331:27" pos:end="331:27">.</operator><name pos:start="331:28" pos:end="331:38">add_pixels8</name></name><argument_list pos:start="331:39" pos:end="331:58">(<argument pos:start="331:40" pos:end="331:42"><expr pos:start="331:40" pos:end="331:42"><name pos:start="331:40" pos:end="331:42">dst</name></expr></argument>, <argument pos:start="331:45" pos:end="331:49"><expr pos:start="331:45" pos:end="331:49"><name pos:start="331:45" pos:end="331:49">block</name></expr></argument>, <argument pos:start="331:52" pos:end="331:57"><expr pos:start="331:52" pos:end="331:57"><name pos:start="331:52" pos:end="331:57">stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="333:17" pos:end="333:22">break;</break>

            <case pos:start="335:13" pos:end="335:29">case <expr pos:start="335:18" pos:end="335:28"><name pos:start="335:18" pos:end="335:28">INTRA_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="337:17" pos:end="337:60"><expr pos:start="337:17" pos:end="337:59"><call pos:start="337:17" pos:end="337:59"><name pos:start="337:17" pos:end="337:22">memset</name><argument_list pos:start="337:23" pos:end="337:59">(<argument pos:start="337:24" pos:end="337:31"><expr pos:start="337:24" pos:end="337:31"><name pos:start="337:24" pos:end="337:31">dctblock</name></expr></argument>, <argument pos:start="337:34" pos:end="337:34"><expr pos:start="337:34" pos:end="337:34"><literal type="number" pos:start="337:34" pos:end="337:34">0</literal></expr></argument>, <argument pos:start="337:37" pos:end="337:58"><expr pos:start="337:37" pos:end="337:58"><sizeof pos:start="337:37" pos:end="337:53">sizeof<argument_list pos:start="337:43" pos:end="337:53">(<argument pos:start="337:44" pos:end="337:52"><expr pos:start="337:44" pos:end="337:52"><operator pos:start="337:44" pos:end="337:44">*</operator><name pos:start="337:45" pos:end="337:52">dctblock</name></expr></argument>)</argument_list></sizeof> <operator pos:start="337:55" pos:end="337:55">*</operator> <literal type="number" pos:start="337:57" pos:end="337:58">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="339:17" pos:end="339:62"><expr pos:start="339:17" pos:end="339:61"><name pos:start="339:17" pos:end="339:27"><name pos:start="339:17" pos:end="339:24">dctblock</name><index pos:start="339:25" pos:end="339:27">[<expr pos:start="339:26" pos:end="339:26"><literal type="number" pos:start="339:26" pos:end="339:26">0</literal></expr>]</index></name> <operator pos:start="339:29" pos:end="339:29">=</operator> <call pos:start="339:31" pos:end="339:61"><name pos:start="339:31" pos:end="339:39">get_value</name><argument_list pos:start="339:40" pos:end="339:61">(<argument pos:start="339:41" pos:end="339:41"><expr pos:start="339:41" pos:end="339:41"><name pos:start="339:41" pos:end="339:41">c</name></expr></argument>, <argument pos:start="339:44" pos:end="339:60"><expr pos:start="339:44" pos:end="339:60"><name pos:start="339:44" pos:end="339:60">BINK_SRC_INTRA_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="341:17" pos:end="341:79"><expr pos:start="341:17" pos:end="341:78"><call pos:start="341:17" pos:end="341:78"><name pos:start="341:17" pos:end="341:31">read_dct_coeffs</name><argument_list pos:start="341:32" pos:end="341:78">(<argument pos:start="341:33" pos:end="341:34"><expr pos:start="341:33" pos:end="341:34"><name pos:start="341:33" pos:end="341:34">bc</name></expr></argument>, <argument pos:start="341:37" pos:end="341:44"><expr pos:start="341:37" pos:end="341:44"><name pos:start="341:37" pos:end="341:44">dctblock</name></expr></argument>, <argument pos:start="341:47" pos:end="341:55"><expr pos:start="341:47" pos:end="341:55"><name pos:start="341:47" pos:end="341:55">bink_scan</name></expr></argument>, <argument pos:start="341:58" pos:end="341:73"><expr pos:start="341:58" pos:end="341:73"><name pos:start="341:58" pos:end="341:73">bink_intra_quant</name></expr></argument>, <argument pos:start="341:76" pos:end="341:77"><expr pos:start="341:76" pos:end="341:77"><operator pos:start="341:76" pos:end="341:76">-</operator><literal type="number" pos:start="341:77" pos:end="341:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="343:17" pos:end="343:59"><expr pos:start="343:17" pos:end="343:58"><call pos:start="343:17" pos:end="343:58"><name pos:start="343:17" pos:end="343:35"><name pos:start="343:17" pos:end="343:17">c</name><operator pos:start="343:18" pos:end="343:19">-&gt;</operator><name pos:start="343:20" pos:end="343:26">binkdsp</name><operator pos:start="343:27" pos:end="343:27">.</operator><name pos:start="343:28" pos:end="343:35">idct_put</name></name><argument_list pos:start="343:36" pos:end="343:58">(<argument pos:start="343:37" pos:end="343:39"><expr pos:start="343:37" pos:end="343:39"><name pos:start="343:37" pos:end="343:39">dst</name></expr></argument>, <argument pos:start="343:42" pos:end="343:47"><expr pos:start="343:42" pos:end="343:47"><name pos:start="343:42" pos:end="343:47">stride</name></expr></argument>, <argument pos:start="343:50" pos:end="343:57"><expr pos:start="343:50" pos:end="343:57"><name pos:start="343:50" pos:end="343:57">dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="345:17" pos:end="345:22">break;</break>

            <case pos:start="347:13" pos:end="347:28">case <expr pos:start="347:18" pos:end="347:27"><name pos:start="347:18" pos:end="347:27">FILL_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="349:17" pos:end="349:50"><expr pos:start="349:17" pos:end="349:49"><name pos:start="349:17" pos:end="349:17">v</name> <operator pos:start="349:19" pos:end="349:19">=</operator> <call pos:start="349:21" pos:end="349:49"><name pos:start="349:21" pos:end="349:29">get_value</name><argument_list pos:start="349:30" pos:end="349:49">(<argument pos:start="349:31" pos:end="349:31"><expr pos:start="349:31" pos:end="349:31"><name pos:start="349:31" pos:end="349:31">c</name></expr></argument>, <argument pos:start="349:34" pos:end="349:48"><expr pos:start="349:34" pos:end="349:48"><name pos:start="349:34" pos:end="349:48">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="351:17" pos:end="351:61"><expr pos:start="351:17" pos:end="351:60"><name pos:start="351:17" pos:end="351:41"><name pos:start="351:17" pos:end="351:17">c</name><operator pos:start="351:18" pos:end="351:19">-&gt;</operator><name pos:start="351:20" pos:end="351:23">bdsp</name><operator pos:start="351:24" pos:end="351:24">.</operator><name pos:start="351:25" pos:end="351:38">fill_block_tab</name><index pos:start="351:39" pos:end="351:41">[<expr pos:start="351:40" pos:end="351:40"><literal type="number" pos:start="351:40" pos:end="351:40">1</literal></expr>]</index></name><operator pos:start="351:42" pos:end="351:42">(</operator><name pos:start="351:43" pos:end="351:45">dst</name><operator pos:start="351:46" pos:end="351:46">,</operator> <name pos:start="351:48" pos:end="351:48">v</name><operator pos:start="351:49" pos:end="351:49">,</operator> <name pos:start="351:51" pos:end="351:56">stride</name><operator pos:start="351:57" pos:end="351:57">,</operator> <literal type="number" pos:start="351:59" pos:end="351:59">8</literal><operator pos:start="351:60" pos:end="351:60">)</operator></expr>;</expr_stmt>

                <break pos:start="353:17" pos:end="353:22">break;</break>

            <case pos:start="355:13" pos:end="355:29">case <expr pos:start="355:18" pos:end="355:28"><name pos:start="355:18" pos:end="355:28">INTER_BLOCK</name></expr>:</case>

                <expr_stmt pos:start="357:17" pos:end="359:58"><expr pos:start="357:17" pos:end="359:57"><name pos:start="357:17" pos:end="357:19">ret</name> <operator pos:start="357:21" pos:end="357:21">=</operator> <call pos:start="357:23" pos:end="359:57"><name pos:start="357:23" pos:end="357:37">bink_put_pixels</name><argument_list pos:start="357:38" pos:end="359:57">(<argument pos:start="357:39" pos:end="357:39"><expr pos:start="357:39" pos:end="357:39"><name pos:start="357:39" pos:end="357:39">c</name></expr></argument>, <argument pos:start="357:42" pos:end="357:44"><expr pos:start="357:42" pos:end="357:44"><name pos:start="357:42" pos:end="357:44">dst</name></expr></argument>, <argument pos:start="357:47" pos:end="357:50"><expr pos:start="357:47" pos:end="357:50"><name pos:start="357:47" pos:end="357:50">prev</name></expr></argument>, <argument pos:start="357:53" pos:end="357:58"><expr pos:start="357:53" pos:end="357:58"><name pos:start="357:53" pos:end="357:58">stride</name></expr></argument>,

                                      <argument pos:start="359:39" pos:end="359:47"><expr pos:start="359:39" pos:end="359:47"><name pos:start="359:39" pos:end="359:47">ref_start</name></expr></argument>, <argument pos:start="359:50" pos:end="359:56"><expr pos:start="359:50" pos:end="359:56"><name pos:start="359:50" pos:end="359:56">ref_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="361:17" pos:end="363:31"><if pos:start="361:17" pos:end="363:31">if <condition pos:start="361:20" pos:end="361:28">(<expr pos:start="361:21" pos:end="361:27"><name pos:start="361:21" pos:end="361:23">ret</name> <operator pos:start="361:25" pos:end="361:25">&lt;</operator> <literal type="number" pos:start="361:27" pos:end="361:27">0</literal></expr>)</condition><block type="pseudo" pos:start="363:21" pos:end="363:31"><block_content pos:start="363:21" pos:end="363:31">

                    <return pos:start="363:21" pos:end="363:31">return <expr pos:start="363:28" pos:end="363:30"><name pos:start="363:28" pos:end="363:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="365:17" pos:end="365:60"><expr pos:start="365:17" pos:end="365:59"><call pos:start="365:17" pos:end="365:59"><name pos:start="365:17" pos:end="365:22">memset</name><argument_list pos:start="365:23" pos:end="365:59">(<argument pos:start="365:24" pos:end="365:31"><expr pos:start="365:24" pos:end="365:31"><name pos:start="365:24" pos:end="365:31">dctblock</name></expr></argument>, <argument pos:start="365:34" pos:end="365:34"><expr pos:start="365:34" pos:end="365:34"><literal type="number" pos:start="365:34" pos:end="365:34">0</literal></expr></argument>, <argument pos:start="365:37" pos:end="365:58"><expr pos:start="365:37" pos:end="365:58"><sizeof pos:start="365:37" pos:end="365:53">sizeof<argument_list pos:start="365:43" pos:end="365:53">(<argument pos:start="365:44" pos:end="365:52"><expr pos:start="365:44" pos:end="365:52"><operator pos:start="365:44" pos:end="365:44">*</operator><name pos:start="365:45" pos:end="365:52">dctblock</name></expr></argument>)</argument_list></sizeof> <operator pos:start="365:55" pos:end="365:55">*</operator> <literal type="number" pos:start="365:57" pos:end="365:58">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="367:17" pos:end="367:62"><expr pos:start="367:17" pos:end="367:61"><name pos:start="367:17" pos:end="367:27"><name pos:start="367:17" pos:end="367:24">dctblock</name><index pos:start="367:25" pos:end="367:27">[<expr pos:start="367:26" pos:end="367:26"><literal type="number" pos:start="367:26" pos:end="367:26">0</literal></expr>]</index></name> <operator pos:start="367:29" pos:end="367:29">=</operator> <call pos:start="367:31" pos:end="367:61"><name pos:start="367:31" pos:end="367:39">get_value</name><argument_list pos:start="367:40" pos:end="367:61">(<argument pos:start="367:41" pos:end="367:41"><expr pos:start="367:41" pos:end="367:41"><name pos:start="367:41" pos:end="367:41">c</name></expr></argument>, <argument pos:start="367:44" pos:end="367:60"><expr pos:start="367:44" pos:end="367:60"><name pos:start="367:44" pos:end="367:60">BINK_SRC_INTER_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="369:17" pos:end="369:79"><expr pos:start="369:17" pos:end="369:78"><call pos:start="369:17" pos:end="369:78"><name pos:start="369:17" pos:end="369:31">read_dct_coeffs</name><argument_list pos:start="369:32" pos:end="369:78">(<argument pos:start="369:33" pos:end="369:34"><expr pos:start="369:33" pos:end="369:34"><name pos:start="369:33" pos:end="369:34">bc</name></expr></argument>, <argument pos:start="369:37" pos:end="369:44"><expr pos:start="369:37" pos:end="369:44"><name pos:start="369:37" pos:end="369:44">dctblock</name></expr></argument>, <argument pos:start="369:47" pos:end="369:55"><expr pos:start="369:47" pos:end="369:55"><name pos:start="369:47" pos:end="369:55">bink_scan</name></expr></argument>, <argument pos:start="369:58" pos:end="369:73"><expr pos:start="369:58" pos:end="369:73"><name pos:start="369:58" pos:end="369:73">bink_inter_quant</name></expr></argument>, <argument pos:start="369:76" pos:end="369:77"><expr pos:start="369:76" pos:end="369:77"><operator pos:start="369:76" pos:end="369:76">-</operator><literal type="number" pos:start="369:77" pos:end="369:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="371:17" pos:end="371:59"><expr pos:start="371:17" pos:end="371:58"><call pos:start="371:17" pos:end="371:58"><name pos:start="371:17" pos:end="371:35"><name pos:start="371:17" pos:end="371:17">c</name><operator pos:start="371:18" pos:end="371:19">-&gt;</operator><name pos:start="371:20" pos:end="371:26">binkdsp</name><operator pos:start="371:27" pos:end="371:27">.</operator><name pos:start="371:28" pos:end="371:35">idct_add</name></name><argument_list pos:start="371:36" pos:end="371:58">(<argument pos:start="371:37" pos:end="371:39"><expr pos:start="371:37" pos:end="371:39"><name pos:start="371:37" pos:end="371:39">dst</name></expr></argument>, <argument pos:start="371:42" pos:end="371:47"><expr pos:start="371:42" pos:end="371:47"><name pos:start="371:42" pos:end="371:47">stride</name></expr></argument>, <argument pos:start="371:50" pos:end="371:57"><expr pos:start="371:50" pos:end="371:57"><name pos:start="371:50" pos:end="371:57">dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="373:17" pos:end="373:22">break;</break>

            <case pos:start="375:13" pos:end="375:31">case <expr pos:start="375:18" pos:end="375:30"><name pos:start="375:18" pos:end="375:30">PATTERN_BLOCK</name></expr>:</case>

                <for pos:start="377:17" pos:end="379:59">for <control pos:start="377:21" pos:end="377:39">(<init pos:start="377:22" pos:end="377:27"><expr pos:start="377:22" pos:end="377:26"><name pos:start="377:22" pos:end="377:22">i</name> <operator pos:start="377:24" pos:end="377:24">=</operator> <literal type="number" pos:start="377:26" pos:end="377:26">0</literal></expr>;</init> <condition pos:start="377:29" pos:end="377:34"><expr pos:start="377:29" pos:end="377:33"><name pos:start="377:29" pos:end="377:29">i</name> <operator pos:start="377:31" pos:end="377:31">&lt;</operator> <literal type="number" pos:start="377:33" pos:end="377:33">2</literal></expr>;</condition> <incr pos:start="377:36" pos:end="377:38"><expr pos:start="377:36" pos:end="377:38"><name pos:start="377:36" pos:end="377:36">i</name><operator pos:start="377:37" pos:end="377:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="379:21" pos:end="379:59"><block_content pos:start="379:21" pos:end="379:59">

                    <expr_stmt pos:start="379:21" pos:end="379:59"><expr pos:start="379:21" pos:end="379:58"><name pos:start="379:21" pos:end="379:26"><name pos:start="379:21" pos:end="379:23">col</name><index pos:start="379:24" pos:end="379:26">[<expr pos:start="379:25" pos:end="379:25"><name pos:start="379:25" pos:end="379:25">i</name></expr>]</index></name> <operator pos:start="379:28" pos:end="379:28">=</operator> <call pos:start="379:30" pos:end="379:58"><name pos:start="379:30" pos:end="379:38">get_value</name><argument_list pos:start="379:39" pos:end="379:58">(<argument pos:start="379:40" pos:end="379:40"><expr pos:start="379:40" pos:end="379:40"><name pos:start="379:40" pos:end="379:40">c</name></expr></argument>, <argument pos:start="379:43" pos:end="379:57"><expr pos:start="379:43" pos:end="379:57"><name pos:start="379:43" pos:end="379:57">BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <for pos:start="381:17" pos:end="389:17">for <control pos:start="381:21" pos:end="381:39">(<init pos:start="381:22" pos:end="381:27"><expr pos:start="381:22" pos:end="381:26"><name pos:start="381:22" pos:end="381:22">i</name> <operator pos:start="381:24" pos:end="381:24">=</operator> <literal type="number" pos:start="381:26" pos:end="381:26">0</literal></expr>;</init> <condition pos:start="381:29" pos:end="381:34"><expr pos:start="381:29" pos:end="381:33"><name pos:start="381:29" pos:end="381:29">i</name> <operator pos:start="381:31" pos:end="381:31">&lt;</operator> <literal type="number" pos:start="381:33" pos:end="381:33">8</literal></expr>;</condition> <incr pos:start="381:36" pos:end="381:38"><expr pos:start="381:36" pos:end="381:38"><name pos:start="381:36" pos:end="381:36">i</name><operator pos:start="381:37" pos:end="381:38">++</operator></expr></incr>)</control> <block pos:start="381:41" pos:end="389:17">{<block_content pos:start="383:21" pos:end="387:55">

                    <expr_stmt pos:start="383:21" pos:end="383:55"><expr pos:start="383:21" pos:end="383:54"><name pos:start="383:21" pos:end="383:21">v</name> <operator pos:start="383:23" pos:end="383:23">=</operator> <call pos:start="383:25" pos:end="383:54"><name pos:start="383:25" pos:end="383:33">get_value</name><argument_list pos:start="383:34" pos:end="383:54">(<argument pos:start="383:35" pos:end="383:35"><expr pos:start="383:35" pos:end="383:35"><name pos:start="383:35" pos:end="383:35">c</name></expr></argument>, <argument pos:start="383:38" pos:end="383:53"><expr pos:start="383:38" pos:end="383:53"><name pos:start="383:38" pos:end="383:53">BINK_SRC_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="385:21" pos:end="387:55">for <control pos:start="385:25" pos:end="385:52">(<init pos:start="385:26" pos:end="385:31"><expr pos:start="385:26" pos:end="385:30"><name pos:start="385:26" pos:end="385:26">j</name> <operator pos:start="385:28" pos:end="385:28">=</operator> <literal type="number" pos:start="385:30" pos:end="385:30">0</literal></expr>;</init> <condition pos:start="385:33" pos:end="385:38"><expr pos:start="385:33" pos:end="385:37"><name pos:start="385:33" pos:end="385:33">j</name> <operator pos:start="385:35" pos:end="385:35">&lt;</operator> <literal type="number" pos:start="385:37" pos:end="385:37">8</literal></expr>;</condition> <incr pos:start="385:40" pos:end="385:51"><expr pos:start="385:40" pos:end="385:42"><name pos:start="385:40" pos:end="385:40">j</name><operator pos:start="385:41" pos:end="385:42">++</operator></expr><operator pos:start="385:43" pos:end="385:43">,</operator> <expr pos:start="385:45" pos:end="385:51"><name pos:start="385:45" pos:end="385:45">v</name> <operator pos:start="385:47" pos:end="385:49">&gt;&gt;=</operator> <literal type="number" pos:start="385:51" pos:end="385:51">1</literal></expr></incr>)</control><block type="pseudo" pos:start="387:25" pos:end="387:55"><block_content pos:start="387:25" pos:end="387:55">

                        <expr_stmt pos:start="387:25" pos:end="387:55"><expr pos:start="387:25" pos:end="387:54"><name pos:start="387:25" pos:end="387:41"><name pos:start="387:25" pos:end="387:27">dst</name><index pos:start="387:28" pos:end="387:41">[<expr pos:start="387:29" pos:end="387:40"><name pos:start="387:29" pos:end="387:29">i</name><operator pos:start="387:30" pos:end="387:30">*</operator><name pos:start="387:31" pos:end="387:36">stride</name> <operator pos:start="387:38" pos:end="387:38">+</operator> <name pos:start="387:40" pos:end="387:40">j</name></expr>]</index></name> <operator pos:start="387:43" pos:end="387:43">=</operator> <name pos:start="387:45" pos:end="387:54"><name pos:start="387:45" pos:end="387:47">col</name><index pos:start="387:48" pos:end="387:54">[<expr pos:start="387:49" pos:end="387:53"><name pos:start="387:49" pos:end="387:49">v</name> <operator pos:start="387:51" pos:end="387:51">&amp;</operator> <literal type="number" pos:start="387:53" pos:end="387:53">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></for>

                <break pos:start="391:17" pos:end="391:22">break;</break>

            <case pos:start="393:13" pos:end="393:27">case <expr pos:start="393:18" pos:end="393:26"><name pos:start="393:18" pos:end="393:26">RAW_BLOCK</name></expr>:</case>

                <for pos:start="395:17" pos:end="397:88">for <control pos:start="395:21" pos:end="395:39">(<init pos:start="395:22" pos:end="395:27"><expr pos:start="395:22" pos:end="395:26"><name pos:start="395:22" pos:end="395:22">i</name> <operator pos:start="395:24" pos:end="395:24">=</operator> <literal type="number" pos:start="395:26" pos:end="395:26">0</literal></expr>;</init> <condition pos:start="395:29" pos:end="395:34"><expr pos:start="395:29" pos:end="395:33"><name pos:start="395:29" pos:end="395:29">i</name> <operator pos:start="395:31" pos:end="395:31">&lt;</operator> <literal type="number" pos:start="395:33" pos:end="395:33">8</literal></expr>;</condition> <incr pos:start="395:36" pos:end="395:38"><expr pos:start="395:36" pos:end="395:38"><name pos:start="395:36" pos:end="395:36">i</name><operator pos:start="395:37" pos:end="395:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="397:21" pos:end="397:88"><block_content pos:start="397:21" pos:end="397:88">

                    <expr_stmt pos:start="397:21" pos:end="397:88"><expr pos:start="397:21" pos:end="397:87"><call pos:start="397:21" pos:end="397:87"><name pos:start="397:21" pos:end="397:26">memcpy</name><argument_list pos:start="397:27" pos:end="397:87">(<argument pos:start="397:28" pos:end="397:41"><expr pos:start="397:28" pos:end="397:41"><name pos:start="397:28" pos:end="397:30">dst</name> <operator pos:start="397:32" pos:end="397:32">+</operator> <name pos:start="397:34" pos:end="397:34">i</name><operator pos:start="397:35" pos:end="397:35">*</operator><name pos:start="397:36" pos:end="397:41">stride</name></expr></argument>, <argument pos:start="397:44" pos:end="397:83"><expr pos:start="397:44" pos:end="397:83"><name pos:start="397:44" pos:end="397:69"><name pos:start="397:44" pos:end="397:44">c</name><operator pos:start="397:45" pos:end="397:46">-&gt;</operator><name pos:start="397:47" pos:end="397:52">bundle</name><index pos:start="397:53" pos:end="397:69">[<expr pos:start="397:54" pos:end="397:68"><name pos:start="397:54" pos:end="397:68">BINK_SRC_COLORS</name></expr>]</index></name><operator pos:start="397:70" pos:end="397:70">.</operator><name pos:start="397:71" pos:end="397:77">cur_ptr</name> <operator pos:start="397:79" pos:end="397:79">+</operator> <name pos:start="397:81" pos:end="397:81">i</name><operator pos:start="397:82" pos:end="397:82">*</operator><literal type="number" pos:start="397:83" pos:end="397:83">8</literal></expr></argument>, <argument pos:start="397:86" pos:end="397:86"><expr pos:start="397:86" pos:end="397:86"><literal type="number" pos:start="397:86" pos:end="397:86">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="399:17" pos:end="399:57"><expr pos:start="399:17" pos:end="399:56"><name pos:start="399:17" pos:end="399:42"><name pos:start="399:17" pos:end="399:17">c</name><operator pos:start="399:18" pos:end="399:19">-&gt;</operator><name pos:start="399:20" pos:end="399:25">bundle</name><index pos:start="399:26" pos:end="399:42">[<expr pos:start="399:27" pos:end="399:41"><name pos:start="399:27" pos:end="399:41">BINK_SRC_COLORS</name></expr>]</index></name><operator pos:start="399:43" pos:end="399:43">.</operator><name pos:start="399:44" pos:end="399:50">cur_ptr</name> <operator pos:start="399:52" pos:end="399:53">+=</operator> <literal type="number" pos:start="399:55" pos:end="399:56">64</literal></expr>;</expr_stmt>

                <break pos:start="401:17" pos:end="401:22">break;</break>

            <default pos:start="403:13" pos:end="403:20">default:</default>

                <expr_stmt pos:start="405:17" pos:end="405:79"><expr pos:start="405:17" pos:end="405:78"><call pos:start="405:17" pos:end="405:78"><name pos:start="405:17" pos:end="405:22">av_log</name><argument_list pos:start="405:23" pos:end="405:78">(<argument pos:start="405:24" pos:end="405:31"><expr pos:start="405:24" pos:end="405:31"><name pos:start="405:24" pos:end="405:31"><name pos:start="405:24" pos:end="405:24">c</name><operator pos:start="405:25" pos:end="405:26">-&gt;</operator><name pos:start="405:27" pos:end="405:31">avctx</name></name></expr></argument>, <argument pos:start="405:34" pos:end="405:45"><expr pos:start="405:34" pos:end="405:45"><name pos:start="405:34" pos:end="405:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="405:48" pos:end="405:72"><expr pos:start="405:48" pos:end="405:72"><literal type="string" pos:start="405:48" pos:end="405:72">"Unknown block type %d\n"</literal></expr></argument>, <argument pos:start="405:75" pos:end="405:77"><expr pos:start="405:75" pos:end="405:77"><name pos:start="405:75" pos:end="405:77">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="407:17" pos:end="407:43">return <expr pos:start="407:24" pos:end="407:42"><name pos:start="407:24" pos:end="407:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></switch>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <if_stmt pos:start="415:5" pos:end="417:61"><if pos:start="415:5" pos:end="417:61">if <condition pos:start="415:8" pos:end="415:34">(<expr pos:start="415:9" pos:end="415:33"><call pos:start="415:9" pos:end="415:26"><name pos:start="415:9" pos:end="415:22">bitstream_tell</name><argument_list pos:start="415:23" pos:end="415:26">(<argument pos:start="415:24" pos:end="415:25"><expr pos:start="415:24" pos:end="415:25"><name pos:start="415:24" pos:end="415:25">bc</name></expr></argument>)</argument_list></call> <operator pos:start="415:28" pos:end="415:28">&amp;</operator> <literal type="number" pos:start="415:30" pos:end="415:33">0x1F</literal></expr>)</condition><block type="pseudo" pos:start="417:9" pos:end="417:61"><block_content pos:start="417:9" pos:end="417:61"> <comment type="line" pos:start="415:36" pos:end="415:79">// next plane data starts at 32-bit boundary</comment>

        <expr_stmt pos:start="417:9" pos:end="417:61"><expr pos:start="417:9" pos:end="417:60"><call pos:start="417:9" pos:end="417:60"><name pos:start="417:9" pos:end="417:22">bitstream_skip</name><argument_list pos:start="417:23" pos:end="417:60">(<argument pos:start="417:24" pos:end="417:25"><expr pos:start="417:24" pos:end="417:25"><name pos:start="417:24" pos:end="417:25">bc</name></expr></argument>, <argument pos:start="417:28" pos:end="417:59"><expr pos:start="417:28" pos:end="417:59"><literal type="number" pos:start="417:28" pos:end="417:31">32</literal> <operator pos:start="417:31" pos:end="417:31">-</operator> <operator pos:start="417:33" pos:end="417:33">(</operator><call pos:start="417:34" pos:end="417:51"><name pos:start="417:34" pos:end="417:47">bitstream_tell</name><argument_list pos:start="417:48" pos:end="417:51">(<argument pos:start="417:49" pos:end="417:50"><expr pos:start="417:49" pos:end="417:50"><name pos:start="417:49" pos:end="417:50">bc</name></expr></argument>)</argument_list></call> <operator pos:start="417:53" pos:end="417:53">&amp;</operator> <literal type="number" pos:start="417:55" pos:end="417:58">0x1F</literal><operator pos:start="417:59" pos:end="417:59">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="421:5" pos:end="421:13">return <expr pos:start="421:12" pos:end="421:12"><literal type="number" pos:start="421:12" pos:end="421:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
