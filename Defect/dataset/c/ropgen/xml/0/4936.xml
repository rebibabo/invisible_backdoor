<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4936.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">tosa_dac_event</name><parameter_list pos:start="1:26" pos:end="1:62">(<parameter pos:start="1:27" pos:end="1:39"><decl pos:start="1:27" pos:end="1:39"><type pos:start="1:27" pos:end="1:39"><name pos:start="1:27" pos:end="1:34">I2CSlave</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">i2c</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:61"><decl pos:start="1:42" pos:end="1:61"><type pos:start="1:42" pos:end="1:61"><name pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:45">enum</name> <name pos:start="1:47" pos:end="1:55">i2c_event</name></name></type> <name pos:start="1:57" pos:end="1:61">event</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:13">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">TosaDACState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:35">= <expr pos:start="5:23" pos:end="5:35"><call pos:start="5:23" pos:end="5:35"><name pos:start="5:23" pos:end="5:30">TOSA_DAC</name><argument_list pos:start="5:31" pos:end="5:35">(<argument pos:start="5:32" pos:end="5:34"><expr pos:start="5:32" pos:end="5:34"><name pos:start="5:32" pos:end="5:34">i2c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:15"><expr pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:5">s</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:10">len</name></name> <operator pos:start="9:12" pos:end="9:12">=</operator> <literal type="number" pos:start="9:14" pos:end="9:14">0</literal></expr>;</expr_stmt>

    <switch pos:start="11:5" pos:end="43:5">switch <condition pos:start="11:12" pos:end="11:18">(<expr pos:start="11:13" pos:end="11:17"><name pos:start="11:13" pos:end="11:17">event</name></expr>)</condition> <block pos:start="11:20" pos:end="43:5">{<block_content pos:start="13:5" pos:end="41:14">

    <case pos:start="13:5" pos:end="13:24">case <expr pos:start="13:10" pos:end="13:23"><name pos:start="13:10" pos:end="13:23">I2C_START_SEND</name></expr>:</case>

        <break pos:start="15:9" pos:end="15:14">break;</break>

    <case pos:start="17:5" pos:end="17:24">case <expr pos:start="17:10" pos:end="17:23"><name pos:start="17:10" pos:end="17:23">I2C_START_RECV</name></expr>:</case>

        <expr_stmt pos:start="19:9" pos:end="19:60"><expr pos:start="19:9" pos:end="19:59"><call pos:start="19:9" pos:end="19:59"><name pos:start="19:9" pos:end="19:14">printf</name><argument_list pos:start="19:15" pos:end="19:59">(<argument pos:start="19:16" pos:end="19:44"><expr pos:start="19:16" pos:end="19:44"><literal type="string" pos:start="19:16" pos:end="19:44">"%s: recv not supported!!!\n"</literal></expr></argument>, <argument pos:start="19:47" pos:end="19:58"><expr pos:start="19:47" pos:end="19:58"><name pos:start="19:47" pos:end="19:58">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="21:9" pos:end="21:14">break;</break>

    <case pos:start="23:5" pos:end="26:0">case <expr pos:start="23:10" pos:end="23:19"><name pos:start="23:10" pos:end="23:19">I2C_FINISH</name></expr>:</case>

<cpp:ifdef pos:start="25:1" pos:end="25:14">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:14">VERBOSE</name></cpp:ifdef>

        <if_stmt pos:start="27:9" pos:end="29:79"><if pos:start="27:9" pos:end="29:79">if <condition pos:start="27:12" pos:end="27:23">(<expr pos:start="27:13" pos:end="27:22"><name pos:start="27:13" pos:end="27:18"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:18">len</name></name> <operator pos:start="27:20" pos:end="27:20">&lt;</operator> <literal type="number" pos:start="27:22" pos:end="27:22">2</literal></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:79"><block_content pos:start="29:13" pos:end="29:79">

            <expr_stmt pos:start="29:13" pos:end="29:79"><expr pos:start="29:13" pos:end="29:78"><call pos:start="29:13" pos:end="29:78"><name pos:start="29:13" pos:end="29:18">printf</name><argument_list pos:start="29:19" pos:end="29:78">(<argument pos:start="29:20" pos:end="29:55"><expr pos:start="29:20" pos:end="29:55"><literal type="string" pos:start="29:20" pos:end="29:55">"%s: message too short (%i bytes)\n"</literal></expr></argument>, <argument pos:start="29:58" pos:end="29:69"><expr pos:start="29:58" pos:end="29:69"><name pos:start="29:58" pos:end="29:69">__FUNCTION__</name></expr></argument>, <argument pos:start="29:72" pos:end="29:77"><expr pos:start="29:72" pos:end="29:77"><name pos:start="29:72" pos:end="29:77"><name pos:start="29:72" pos:end="29:72">s</name><operator pos:start="29:73" pos:end="29:74">-&gt;</operator><name pos:start="29:75" pos:end="29:77">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="36:0"><if pos:start="31:9" pos:end="36:0">if <condition pos:start="31:12" pos:end="31:23">(<expr pos:start="31:13" pos:end="31:22"><name pos:start="31:13" pos:end="31:18"><name pos:start="31:13" pos:end="31:13">s</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:18">len</name></name> <operator pos:start="31:20" pos:end="31:20">&gt;</operator> <literal type="number" pos:start="31:22" pos:end="31:22">2</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="36:0"><block_content pos:start="33:13" pos:end="36:0">

            <expr_stmt pos:start="33:13" pos:end="36:0"><expr pos:start="33:13" pos:end="33:58"><call pos:start="33:13" pos:end="33:58"><name pos:start="33:13" pos:end="33:18">printf</name><argument_list pos:start="33:19" pos:end="33:58">(<argument pos:start="33:20" pos:end="33:43"><expr pos:start="33:20" pos:end="33:43"><literal type="string" pos:start="33:20" pos:end="33:43">"%s: message too long\n"</literal></expr></argument>, <argument pos:start="33:46" pos:end="33:57"><expr pos:start="33:46" pos:end="33:57"><name pos:start="33:46" pos:end="33:57">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="35:1" pos:end="35:6">#<cpp:directive pos:start="35:2" pos:end="35:6">endif</cpp:directive></cpp:endif>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <default pos:start="39:5" pos:end="39:12">default:</default>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="47:5" pos:end="47:13">return <expr pos:start="47:12" pos:end="47:12"><literal type="number" pos:start="47:12" pos:end="47:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
