<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22696.c" pos:tabs="8"><function pos:start="1:1" pos:end="233:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">fic_decode_frame</name><parameter_list pos:start="1:28" pos:end="3:60">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:31">int</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:42">got_frame</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:52">AVPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:59">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="233:1">{<block_content pos:start="7:5" pos:end="231:23">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">FICContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">ctx</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:27">avctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:16">src</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">slice</name></decl>, <decl pos:start="13:16" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:16" pos:end="13:22">nslices</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">msize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">tsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:18">sdata</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:55">(<expr pos:start="23:9" pos:end="23:54"><operator pos:start="23:9" pos:end="23:9">(</operator><name pos:start="23:10" pos:end="23:12">ret</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:49"><name pos:start="23:16" pos:end="23:30">ff_reget_buffer</name><argument_list pos:start="23:31" pos:end="23:49">(<argument pos:start="23:32" pos:end="23:36"><expr pos:start="23:32" pos:end="23:36"><name pos:start="23:32" pos:end="23:36">avctx</name></expr></argument>, <argument pos:start="23:39" pos:end="23:48"><expr pos:start="23:39" pos:end="23:48"><name pos:start="23:39" pos:end="23:48"><name pos:start="23:39" pos:end="23:41">ctx</name><operator pos:start="23:42" pos:end="23:43">-&gt;</operator><name pos:start="23:44" pos:end="23:48">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="23:50" pos:end="23:50">)</operator> <operator pos:start="23:52" pos:end="23:52">&lt;</operator> <literal type="number" pos:start="23:54" pos:end="23:54">0</literal></expr>)</condition> <block pos:start="23:57" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:19">

        <expr_stmt pos:start="25:9" pos:end="25:63"><expr pos:start="25:9" pos:end="25:62"><call pos:start="25:9" pos:end="25:62"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:62">(<argument pos:start="25:16" pos:end="25:20"><expr pos:start="25:16" pos:end="25:20"><name pos:start="25:16" pos:end="25:20">avctx</name></expr></argument>, <argument pos:start="25:23" pos:end="25:34"><expr pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:37" pos:end="25:61"><expr pos:start="25:37" pos:end="25:61"><literal type="string" pos:start="25:37" pos:end="25:61">"reget_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:19">return <expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:41">/* Header + at least one slice (4) */</comment>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:42">(<expr pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:19"><name pos:start="35:9" pos:end="35:13">avpkt</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:19">size</name></name> <operator pos:start="35:21" pos:end="35:21">&lt;</operator> <name pos:start="35:23" pos:end="35:37">FIC_HEADER_SIZE</name> <operator pos:start="35:39" pos:end="35:39">+</operator> <literal type="number" pos:start="35:41" pos:end="35:41">4</literal></expr>)</condition> <block pos:start="35:44" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:35">

        <expr_stmt pos:start="37:9" pos:end="37:66"><expr pos:start="37:9" pos:end="37:65"><call pos:start="37:9" pos:end="37:65"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:65">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:64"><expr pos:start="37:37" pos:end="37:64"><literal type="string" pos:start="37:37" pos:end="37:64">"Frame data is too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:35">return <expr pos:start="39:16" pos:end="39:34"><name pos:start="39:16" pos:end="39:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:27">/* Check for header. */</comment>

    <if_stmt pos:start="47:5" pos:end="49:63"><if pos:start="47:5" pos:end="49:63">if <condition pos:start="47:8" pos:end="47:35">(<expr pos:start="47:9" pos:end="47:34"><call pos:start="47:9" pos:end="47:34"><name pos:start="47:9" pos:end="47:14">memcmp</name><argument_list pos:start="47:15" pos:end="47:34">(<argument pos:start="47:16" pos:end="47:18"><expr pos:start="47:16" pos:end="47:18"><name pos:start="47:16" pos:end="47:18">src</name></expr></argument>, <argument pos:start="47:21" pos:end="47:30"><expr pos:start="47:21" pos:end="47:30"><name pos:start="47:21" pos:end="47:30">fic_header</name></expr></argument>, <argument pos:start="47:33" pos:end="47:33"><expr pos:start="47:33" pos:end="47:33"><literal type="number" pos:start="47:33" pos:end="47:33">7</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:63"><block_content pos:start="49:9" pos:end="49:63">

        <expr_stmt pos:start="49:9" pos:end="49:63"><expr pos:start="49:9" pos:end="49:62"><call pos:start="49:9" pos:end="49:62"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:62">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:36"><expr pos:start="49:23" pos:end="49:36"><name pos:start="49:23" pos:end="49:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="49:39" pos:end="49:61"><expr pos:start="49:39" pos:end="49:61"><literal type="string" pos:start="49:39" pos:end="49:61">"Invalid FIC Header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:29">/* Is it a skip frame? */</comment>

    <if_stmt pos:start="55:5" pos:end="57:18"><if pos:start="55:5" pos:end="57:18">if <condition pos:start="55:8" pos:end="55:16">(<expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">src</name><index pos:start="55:12" pos:end="55:15">[<expr pos:start="55:13" pos:end="55:14"><literal type="number" pos:start="55:13" pos:end="55:14">17</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:18"><block_content pos:start="57:9" pos:end="57:18">

        <goto pos:start="57:9" pos:end="57:18">goto <name pos:start="57:14" pos:end="57:17">skip</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:22"><expr pos:start="61:5" pos:end="61:21"><name pos:start="61:5" pos:end="61:11">nslices</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <name pos:start="61:15" pos:end="61:21"><name pos:start="61:15" pos:end="61:17">src</name><index pos:start="61:18" pos:end="61:21">[<expr pos:start="61:19" pos:end="61:20"><literal type="number" pos:start="61:19" pos:end="61:20">13</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:17">(<expr pos:start="63:9" pos:end="63:16"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:16">nslices</name></expr>)</condition> <block pos:start="63:19" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:35">

        <expr_stmt pos:start="65:9" pos:end="65:60"><expr pos:start="65:9" pos:end="65:59"><call pos:start="65:9" pos:end="65:59"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:59">(<argument pos:start="65:16" pos:end="65:20"><expr pos:start="65:16" pos:end="65:20"><name pos:start="65:16" pos:end="65:20">avctx</name></expr></argument>, <argument pos:start="65:23" pos:end="65:34"><expr pos:start="65:23" pos:end="65:34"><name pos:start="65:23" pos:end="65:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:37" pos:end="65:58"><expr pos:start="65:37" pos:end="65:58"><literal type="string" pos:start="65:37" pos:end="65:58">"Zero slices found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:35">return <expr pos:start="67:16" pos:end="67:34"><name pos:start="67:16" pos:end="67:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:37">/* High or Low Quality Matrix? */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:52"><expr pos:start="75:5" pos:end="75:51"><name pos:start="75:5" pos:end="75:13"><name pos:start="75:5" pos:end="75:7">ctx</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:13">qmat</name></name> <operator pos:start="75:15" pos:end="75:15">=</operator> <ternary pos:start="75:17" pos:end="75:51"><condition pos:start="75:17" pos:end="75:25"><expr pos:start="75:17" pos:end="75:23"><name pos:start="75:17" pos:end="75:23"><name pos:start="75:17" pos:end="75:19">src</name><index pos:start="75:20" pos:end="75:23">[<expr pos:start="75:21" pos:end="75:22"><literal type="number" pos:start="75:21" pos:end="75:22">23</literal></expr>]</index></name></expr> ?</condition><then pos:start="75:27" pos:end="75:37"> <expr pos:start="75:27" pos:end="75:37"><name pos:start="75:27" pos:end="75:37">fic_qmat_hq</name></expr> </then><else pos:start="75:39" pos:end="75:51">: <expr pos:start="75:41" pos:end="75:51"><name pos:start="75:41" pos:end="75:51">fic_qmat_lq</name></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:27">/* Skip cursor data. */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:30"><expr pos:start="81:5" pos:end="81:29"><name pos:start="81:5" pos:end="81:9">tsize</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <call pos:start="81:13" pos:end="81:29"><name pos:start="81:13" pos:end="81:19">AV_RB24</name><argument_list pos:start="81:20" pos:end="81:29">(<argument pos:start="81:21" pos:end="81:28"><expr pos:start="81:21" pos:end="81:28"><name pos:start="81:21" pos:end="81:23">src</name> <operator pos:start="81:25" pos:end="81:25">+</operator> <literal type="number" pos:start="81:27" pos:end="81:28">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:46">(<expr pos:start="83:9" pos:end="83:45"><name pos:start="83:9" pos:end="83:13">tsize</name> <operator pos:start="83:15" pos:end="83:15">&gt;</operator> <name pos:start="83:17" pos:end="83:27"><name pos:start="83:17" pos:end="83:21">avpkt</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:27">size</name></name> <operator pos:start="83:29" pos:end="83:29">-</operator> <name pos:start="83:31" pos:end="83:45">FIC_HEADER_SIZE</name></expr>)</condition> <block pos:start="83:48" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:35">

        <expr_stmt pos:start="85:9" pos:end="85:67"><expr pos:start="85:9" pos:end="85:66"><call pos:start="85:9" pos:end="85:66"><name pos:start="85:9" pos:end="85:14">av_log</name><argument_list pos:start="85:15" pos:end="85:66">(<argument pos:start="85:16" pos:end="85:20"><expr pos:start="85:16" pos:end="85:20"><name pos:start="85:16" pos:end="85:20">avctx</name></expr></argument>, <argument pos:start="85:23" pos:end="85:34"><expr pos:start="85:23" pos:end="85:34"><name pos:start="85:23" pos:end="85:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:37" pos:end="85:65"><expr pos:start="85:37" pos:end="85:65"><literal type="string" pos:start="85:37" pos:end="85:65">"Invalid cursor data size.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:35">return <expr pos:start="87:16" pos:end="87:34"><name pos:start="87:16" pos:end="87:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="93:5" pos:end="93:50">/* Slice height for all but the last slice. */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:61"><expr pos:start="95:5" pos:end="95:60"><name pos:start="95:5" pos:end="95:16"><name pos:start="95:5" pos:end="95:7">ctx</name><operator pos:start="95:8" pos:end="95:9">-&gt;</operator><name pos:start="95:10" pos:end="95:16">slice_h</name></name> <operator pos:start="95:18" pos:end="95:18">=</operator> <literal type="number" pos:start="95:20" pos:end="95:21">16</literal> <operator pos:start="95:23" pos:end="95:23">*</operator> <operator pos:start="95:25" pos:end="95:25">(</operator><name pos:start="95:26" pos:end="95:44"><name pos:start="95:26" pos:end="95:28">ctx</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:44">aligned_height</name></name> <operator pos:start="95:46" pos:end="95:47">&gt;&gt;</operator> <literal type="number" pos:start="95:49" pos:end="95:49">4</literal><operator pos:start="95:50" pos:end="95:50">)</operator> <operator pos:start="95:52" pos:end="95:52">/</operator> <name pos:start="95:54" pos:end="95:60">nslices</name></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="99:54"><if pos:start="97:5" pos:end="99:54">if <condition pos:start="97:8" pos:end="97:26">(<expr pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:11">ctx</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:20">slice_h</name></name> <operator pos:start="97:22" pos:end="97:22">%</operator> <literal type="number" pos:start="97:24" pos:end="97:25">16</literal></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="99:54"><block_content pos:start="99:9" pos:end="99:54">

        <expr_stmt pos:start="99:9" pos:end="99:54"><expr pos:start="99:9" pos:end="99:53"><name pos:start="99:9" pos:end="99:20"><name pos:start="99:9" pos:end="99:11">ctx</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:20">slice_h</name></name> <operator pos:start="99:22" pos:end="99:22">=</operator> <call pos:start="99:24" pos:end="99:53"><name pos:start="99:24" pos:end="99:30">FFALIGN</name><argument_list pos:start="99:31" pos:end="99:53">(<argument pos:start="99:32" pos:end="99:48"><expr pos:start="99:32" pos:end="99:48"><name pos:start="99:32" pos:end="99:43"><name pos:start="99:32" pos:end="99:34">ctx</name><operator pos:start="99:35" pos:end="99:36">-&gt;</operator><name pos:start="99:37" pos:end="99:43">slice_h</name></name> <operator pos:start="99:45" pos:end="99:45">-</operator> <literal type="number" pos:start="99:47" pos:end="99:48">16</literal></expr></argument>, <argument pos:start="99:51" pos:end="99:52"><expr pos:start="99:51" pos:end="99:52"><literal type="number" pos:start="99:51" pos:end="99:52">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:48">/* First slice offset and remaining data. */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:56"><expr pos:start="105:5" pos:end="105:55"><name pos:start="105:5" pos:end="105:9">sdata</name> <operator pos:start="105:11" pos:end="105:11">=</operator> <name pos:start="105:13" pos:end="105:15">src</name> <operator pos:start="105:17" pos:end="105:17">+</operator> <name pos:start="105:19" pos:end="105:23">tsize</name> <operator pos:start="105:25" pos:end="105:25">+</operator> <name pos:start="105:27" pos:end="105:41">FIC_HEADER_SIZE</name> <operator pos:start="105:43" pos:end="105:43">+</operator> <literal type="number" pos:start="105:45" pos:end="105:45">4</literal> <operator pos:start="105:47" pos:end="105:47">*</operator> <name pos:start="105:49" pos:end="105:55">nslices</name></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:64"><expr pos:start="107:5" pos:end="107:63"><name pos:start="107:5" pos:end="107:9">msize</name> <operator pos:start="107:11" pos:end="107:11">=</operator> <name pos:start="107:13" pos:end="107:23"><name pos:start="107:13" pos:end="107:17">avpkt</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:23">size</name></name> <operator pos:start="107:25" pos:end="107:25">-</operator> <name pos:start="107:27" pos:end="107:33">nslices</name> <operator pos:start="107:35" pos:end="107:35">*</operator> <literal type="number" pos:start="107:37" pos:end="107:39">4</literal> <operator pos:start="107:39" pos:end="107:39">-</operator> <name pos:start="107:41" pos:end="107:45">tsize</name> <operator pos:start="107:47" pos:end="107:47">-</operator> <name pos:start="107:49" pos:end="107:63">FIC_HEADER_SIZE</name></expr>;</expr_stmt>



    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:19">(<expr pos:start="111:9" pos:end="111:18"><name pos:start="111:9" pos:end="111:13">msize</name> <operator pos:start="111:15" pos:end="111:16">&lt;=</operator> <literal type="number" pos:start="111:18" pos:end="111:18">0</literal></expr>)</condition> <block pos:start="111:21" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:35">

        <expr_stmt pos:start="113:9" pos:end="113:74"><expr pos:start="113:9" pos:end="113:73"><call pos:start="113:9" pos:end="113:73"><name pos:start="113:9" pos:end="113:14">av_log</name><argument_list pos:start="113:15" pos:end="113:73">(<argument pos:start="113:16" pos:end="113:20"><expr pos:start="113:16" pos:end="113:20"><name pos:start="113:16" pos:end="113:20">avctx</name></expr></argument>, <argument pos:start="113:23" pos:end="113:34"><expr pos:start="113:23" pos:end="113:34"><name pos:start="113:23" pos:end="113:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:37" pos:end="113:72"><expr pos:start="113:37" pos:end="113:72"><literal type="string" pos:start="113:37" pos:end="113:72">"Not enough frame data to decode.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:35">return <expr pos:start="115:16" pos:end="115:34"><name pos:start="115:16" pos:end="115:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="131:7">/*

     * Set the frametype to I initially. It will be set to P if the frame

     * has any dependencies (skip blocks). There will be a race condition

     * inside the slice decode function to set these, but we do not care.

     * since they will only ever be set to 0/P.

     */</comment>

    <expr_stmt pos:start="133:5" pos:end="133:30"><expr pos:start="133:5" pos:end="133:29"><name pos:start="133:5" pos:end="133:25"><name pos:start="133:5" pos:end="133:7">ctx</name><operator pos:start="133:8" pos:end="133:9">-&gt;</operator><name pos:start="133:10" pos:end="133:14">frame</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:25">key_frame</name></name> <operator pos:start="133:27" pos:end="133:27">=</operator> <literal type="number" pos:start="133:29" pos:end="133:29">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:46"><expr pos:start="135:5" pos:end="135:45"><name pos:start="135:5" pos:end="135:25"><name pos:start="135:5" pos:end="135:7">ctx</name><operator pos:start="135:8" pos:end="135:9">-&gt;</operator><name pos:start="135:10" pos:end="135:14">frame</name><operator pos:start="135:15" pos:end="135:16">-&gt;</operator><name pos:start="135:17" pos:end="135:25">pict_type</name></name> <operator pos:start="135:27" pos:end="135:27">=</operator> <name pos:start="135:29" pos:end="135:45">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:30">/* Allocate slice data. */</comment>

    <expr_stmt pos:start="141:5" pos:end="143:57"><expr pos:start="141:5" pos:end="143:56"><call pos:start="141:5" pos:end="143:56"><name pos:start="141:5" pos:end="141:18">av_fast_malloc</name><argument_list pos:start="141:19" pos:end="143:56">(<argument pos:start="141:20" pos:end="141:35"><expr pos:start="141:20" pos:end="141:35"><operator pos:start="141:20" pos:end="141:20">&amp;</operator><name pos:start="141:21" pos:end="141:35"><name pos:start="141:21" pos:end="141:23">ctx</name><operator pos:start="141:24" pos:end="141:25">-&gt;</operator><name pos:start="141:26" pos:end="141:35">slice_data</name></name></expr></argument>, <argument pos:start="141:38" pos:end="141:58"><expr pos:start="141:38" pos:end="141:58"><operator pos:start="141:38" pos:end="141:38">&amp;</operator><name pos:start="141:39" pos:end="141:58"><name pos:start="141:39" pos:end="141:41">ctx</name><operator pos:start="141:42" pos:end="141:43">-&gt;</operator><name pos:start="141:44" pos:end="141:58">slice_data_size</name></name></expr></argument>,

                   <argument pos:start="143:20" pos:end="143:55"><expr pos:start="143:20" pos:end="143:55"><name pos:start="143:20" pos:end="143:26">nslices</name> <operator pos:start="143:28" pos:end="143:28">*</operator> <sizeof pos:start="143:30" pos:end="143:55">sizeof<argument_list pos:start="143:36" pos:end="143:55">(<argument pos:start="143:37" pos:end="143:54"><expr pos:start="143:37" pos:end="143:54"><name pos:start="143:37" pos:end="143:54"><name pos:start="143:37" pos:end="143:39">ctx</name><operator pos:start="143:40" pos:end="143:41">-&gt;</operator><name pos:start="143:42" pos:end="143:51">slice_data</name><index pos:start="143:52" pos:end="143:54">[<expr pos:start="143:53" pos:end="143:53"><literal type="number" pos:start="143:53" pos:end="143:53">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="151:5"><if pos:start="145:5" pos:end="151:5">if <condition pos:start="145:8" pos:end="145:30">(<expr pos:start="145:9" pos:end="145:29"><operator pos:start="145:9" pos:end="145:9">!</operator><name pos:start="145:10" pos:end="145:29"><name pos:start="145:10" pos:end="145:12">ctx</name><operator pos:start="145:13" pos:end="145:14">-&gt;</operator><name pos:start="145:15" pos:end="145:29">slice_data_size</name></name></expr>)</condition> <block pos:start="145:32" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:31">

        <expr_stmt pos:start="147:9" pos:end="147:72"><expr pos:start="147:9" pos:end="147:71"><call pos:start="147:9" pos:end="147:71"><name pos:start="147:9" pos:end="147:14">av_log</name><argument_list pos:start="147:15" pos:end="147:71">(<argument pos:start="147:16" pos:end="147:20"><expr pos:start="147:16" pos:end="147:20"><name pos:start="147:16" pos:end="147:20">avctx</name></expr></argument>, <argument pos:start="147:23" pos:end="147:34"><expr pos:start="147:23" pos:end="147:34"><name pos:start="147:23" pos:end="147:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:37" pos:end="147:70"><expr pos:start="147:37" pos:end="147:70"><literal type="string" pos:start="147:37" pos:end="147:70">"Could not allocate slice data.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="149:9" pos:end="149:31">return <expr pos:start="149:16" pos:end="149:30"><call pos:start="149:16" pos:end="149:30"><name pos:start="149:16" pos:end="149:22">AVERROR</name><argument_list pos:start="149:23" pos:end="149:30">(<argument pos:start="149:24" pos:end="149:29"><expr pos:start="149:24" pos:end="149:29"><name pos:start="149:24" pos:end="149:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:69"><expr pos:start="153:5" pos:end="153:68"><call pos:start="153:5" pos:end="153:68"><name pos:start="153:5" pos:end="153:10">memset</name><argument_list pos:start="153:11" pos:end="153:68">(<argument pos:start="153:12" pos:end="153:26"><expr pos:start="153:12" pos:end="153:26"><name pos:start="153:12" pos:end="153:26"><name pos:start="153:12" pos:end="153:14">ctx</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:26">slice_data</name></name></expr></argument>, <argument pos:start="153:29" pos:end="153:29"><expr pos:start="153:29" pos:end="153:29"><literal type="number" pos:start="153:29" pos:end="153:29">0</literal></expr></argument>, <argument pos:start="153:32" pos:end="153:67"><expr pos:start="153:32" pos:end="153:67"><name pos:start="153:32" pos:end="153:38">nslices</name> <operator pos:start="153:40" pos:end="153:40">*</operator> <sizeof pos:start="153:42" pos:end="153:67">sizeof<argument_list pos:start="153:48" pos:end="153:67">(<argument pos:start="153:49" pos:end="153:66"><expr pos:start="153:49" pos:end="153:66"><name pos:start="153:49" pos:end="153:66"><name pos:start="153:49" pos:end="153:51">ctx</name><operator pos:start="153:52" pos:end="153:53">-&gt;</operator><name pos:start="153:54" pos:end="153:63">slice_data</name><index pos:start="153:64" pos:end="153:66">[<expr pos:start="153:65" pos:end="153:65"><literal type="number" pos:start="153:65" pos:end="153:65">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="157:5" pos:end="209:5">for <control pos:start="157:9" pos:end="157:45">(<init pos:start="157:10" pos:end="157:19"><expr pos:start="157:10" pos:end="157:18"><name pos:start="157:10" pos:end="157:14">slice</name> <operator pos:start="157:16" pos:end="157:16">=</operator> <literal type="number" pos:start="157:18" pos:end="157:18">0</literal></expr>;</init> <condition pos:start="157:21" pos:end="157:36"><expr pos:start="157:21" pos:end="157:35"><name pos:start="157:21" pos:end="157:25">slice</name> <operator pos:start="157:27" pos:end="157:27">&lt;</operator> <name pos:start="157:29" pos:end="157:35">nslices</name></expr>;</condition> <incr pos:start="157:38" pos:end="157:44"><expr pos:start="157:38" pos:end="157:44"><name pos:start="157:38" pos:end="157:42">slice</name><operator pos:start="157:43" pos:end="157:44">++</operator></expr></incr>)</control> <block pos:start="157:47" pos:end="209:5">{<block_content pos:start="159:9" pos:end="207:48">

        <decl_stmt pos:start="159:9" pos:end="159:80"><decl pos:start="159:9" pos:end="159:79"><type pos:start="159:9" pos:end="159:16"><name pos:start="159:9" pos:end="159:16">unsigned</name></type> <name pos:start="159:18" pos:end="159:26">slice_off</name> <init pos:start="159:28" pos:end="159:79">= <expr pos:start="159:30" pos:end="159:79"><call pos:start="159:30" pos:end="159:79"><name pos:start="159:30" pos:end="159:36">AV_RB32</name><argument_list pos:start="159:37" pos:end="159:79">(<argument pos:start="159:38" pos:end="159:78"><expr pos:start="159:38" pos:end="159:78"><name pos:start="159:38" pos:end="159:40">src</name> <operator pos:start="159:42" pos:end="159:42">+</operator> <name pos:start="159:44" pos:end="159:48">tsize</name> <operator pos:start="159:50" pos:end="159:50">+</operator> <name pos:start="159:52" pos:end="159:66">FIC_HEADER_SIZE</name> <operator pos:start="159:68" pos:end="159:68">+</operator> <name pos:start="159:70" pos:end="159:74">slice</name> <operator pos:start="159:76" pos:end="159:76">*</operator> <literal type="number" pos:start="159:78" pos:end="159:78">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="161:9" pos:end="161:28"><decl pos:start="161:9" pos:end="161:27"><type pos:start="161:9" pos:end="161:16"><name pos:start="161:9" pos:end="161:16">unsigned</name></type> <name pos:start="161:18" pos:end="161:27">slice_size</name></decl>;</decl_stmt>

        <decl_stmt pos:start="163:9" pos:end="163:43"><decl pos:start="163:9" pos:end="163:42"><type pos:start="163:9" pos:end="163:11"><name pos:start="163:9" pos:end="163:11">int</name></type> <name pos:start="163:13" pos:end="163:17">y_off</name>   <init pos:start="163:21" pos:end="163:42">= <expr pos:start="163:23" pos:end="163:42"><name pos:start="163:23" pos:end="163:34"><name pos:start="163:23" pos:end="163:25">ctx</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:34">slice_h</name></name> <operator pos:start="163:36" pos:end="163:36">*</operator> <name pos:start="163:38" pos:end="163:42">slice</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="165:9" pos:end="165:35"><decl pos:start="165:9" pos:end="165:34"><type pos:start="165:9" pos:end="165:11"><name pos:start="165:9" pos:end="165:11">int</name></type> <name pos:start="165:13" pos:end="165:19">slice_h</name> <init pos:start="165:21" pos:end="165:34">= <expr pos:start="165:23" pos:end="165:34"><name pos:start="165:23" pos:end="165:34"><name pos:start="165:23" pos:end="165:25">ctx</name><operator pos:start="165:26" pos:end="165:27">-&gt;</operator><name pos:start="165:28" pos:end="165:34">slice_h</name></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="169:9" pos:end="175:11">/*

         * Either read the slice size, or consume all data left.

         * Also, special case the last slight height.

         */</comment>

        <if_stmt pos:start="177:9" pos:end="187:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:33">(<expr pos:start="177:13" pos:end="177:32"><name pos:start="177:13" pos:end="177:17">slice</name> <operator pos:start="177:19" pos:end="177:20">==</operator> <name pos:start="177:22" pos:end="177:28">nslices</name> <operator pos:start="177:30" pos:end="177:30">-</operator> <literal type="number" pos:start="177:32" pos:end="177:32">1</literal></expr>)</condition> <block pos:start="177:35" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:85">

            <expr_stmt pos:start="179:13" pos:end="179:33"><expr pos:start="179:13" pos:end="179:32"><name pos:start="179:13" pos:end="179:22">slice_size</name>   <operator pos:start="179:26" pos:end="179:26">=</operator> <name pos:start="179:28" pos:end="179:32">msize</name></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:85"><expr pos:start="181:13" pos:end="181:84"><name pos:start="181:13" pos:end="181:19">slice_h</name>      <operator pos:start="181:26" pos:end="181:26">=</operator> <call pos:start="181:28" pos:end="181:84"><name pos:start="181:28" pos:end="181:34">FFALIGN</name><argument_list pos:start="181:35" pos:end="181:84">(<argument pos:start="181:36" pos:end="181:79"><expr pos:start="181:36" pos:end="181:79"><name pos:start="181:36" pos:end="181:48"><name pos:start="181:36" pos:end="181:40">avctx</name><operator pos:start="181:41" pos:end="181:42">-&gt;</operator><name pos:start="181:43" pos:end="181:48">height</name></name> <operator pos:start="181:50" pos:end="181:50">-</operator> <name pos:start="181:52" pos:end="181:63"><name pos:start="181:52" pos:end="181:54">ctx</name><operator pos:start="181:55" pos:end="181:56">-&gt;</operator><name pos:start="181:57" pos:end="181:63">slice_h</name></name> <operator pos:start="181:65" pos:end="181:65">*</operator> <operator pos:start="181:67" pos:end="181:67">(</operator><name pos:start="181:68" pos:end="181:74">nslices</name> <operator pos:start="181:76" pos:end="181:76">-</operator> <literal type="number" pos:start="181:78" pos:end="181:78">1</literal><operator pos:start="181:79" pos:end="181:79">)</operator></expr></argument>, <argument pos:start="181:82" pos:end="181:83"><expr pos:start="181:82" pos:end="181:83"><literal type="number" pos:start="181:82" pos:end="181:83">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="183:11" pos:end="187:9">else <block pos:start="183:16" pos:end="187:9">{<block_content pos:start="185:13" pos:end="185:80">

            <expr_stmt pos:start="185:13" pos:end="185:80"><expr pos:start="185:13" pos:end="185:79"><name pos:start="185:13" pos:end="185:22">slice_size</name> <operator pos:start="185:24" pos:end="185:24">=</operator> <call pos:start="185:26" pos:end="185:79"><name pos:start="185:26" pos:end="185:32">AV_RB32</name><argument_list pos:start="185:33" pos:end="185:79">(<argument pos:start="185:34" pos:end="185:78"><expr pos:start="185:34" pos:end="185:78"><name pos:start="185:34" pos:end="185:36">src</name> <operator pos:start="185:38" pos:end="185:38">+</operator> <name pos:start="185:40" pos:end="185:44">tsize</name> <operator pos:start="185:46" pos:end="185:46">+</operator> <name pos:start="185:48" pos:end="185:62">FIC_HEADER_SIZE</name> <operator pos:start="185:64" pos:end="185:64">+</operator> <name pos:start="185:66" pos:end="185:70">slice</name> <operator pos:start="185:72" pos:end="185:72">*</operator> <literal type="number" pos:start="185:74" pos:end="185:76">4</literal> <operator pos:start="185:76" pos:end="185:76">+</operator> <literal type="number" pos:start="185:78" pos:end="185:78">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="191:9" pos:end="193:21"><if pos:start="191:9" pos:end="193:21">if <condition pos:start="191:12" pos:end="191:57">(<expr pos:start="191:13" pos:end="191:56"><name pos:start="191:13" pos:end="191:50"><name pos:start="191:13" pos:end="191:22">slice_size</name> <argument_list type="generic" pos:start="191:24" pos:end="191:50">&lt; <argument pos:start="191:26" pos:end="191:48"><expr pos:start="191:26" pos:end="191:48"><name pos:start="191:26" pos:end="191:34">slice_off</name> <operator pos:start="191:36" pos:end="191:37">||</operator> <name pos:start="191:39" pos:end="191:48">slice_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="191:52" pos:end="191:56">msize</name></expr>)</condition><block type="pseudo" pos:start="193:13" pos:end="193:21"><block_content pos:start="193:13" pos:end="193:21">

            <continue pos:start="193:13" pos:end="193:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:32"><expr pos:start="197:9" pos:end="197:31"><name pos:start="197:9" pos:end="197:18">slice_size</name> <operator pos:start="197:20" pos:end="197:21">-=</operator> <name pos:start="197:23" pos:end="197:31">slice_off</name></expr>;</expr_stmt>



        <expr_stmt pos:start="201:9" pos:end="201:60"><expr pos:start="201:9" pos:end="201:59"><name pos:start="201:9" pos:end="201:30"><name pos:start="201:9" pos:end="201:11">ctx</name><operator pos:start="201:12" pos:end="201:13">-&gt;</operator><name pos:start="201:14" pos:end="201:23">slice_data</name><index pos:start="201:24" pos:end="201:30">[<expr pos:start="201:25" pos:end="201:29"><name pos:start="201:25" pos:end="201:29">slice</name></expr>]</index></name><operator pos:start="201:31" pos:end="201:31">.</operator><name pos:start="201:32" pos:end="201:34">src</name>      <operator pos:start="201:41" pos:end="201:41">=</operator> <name pos:start="201:43" pos:end="201:47">sdata</name> <operator pos:start="201:49" pos:end="201:49">+</operator> <name pos:start="201:51" pos:end="201:59">slice_off</name></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:53"><expr pos:start="203:9" pos:end="203:52"><name pos:start="203:9" pos:end="203:30"><name pos:start="203:9" pos:end="203:11">ctx</name><operator pos:start="203:12" pos:end="203:13">-&gt;</operator><name pos:start="203:14" pos:end="203:23">slice_data</name><index pos:start="203:24" pos:end="203:30">[<expr pos:start="203:25" pos:end="203:29"><name pos:start="203:25" pos:end="203:29">slice</name></expr>]</index></name><operator pos:start="203:31" pos:end="203:31">.</operator><name pos:start="203:32" pos:end="203:39">src_size</name> <operator pos:start="203:41" pos:end="203:41">=</operator> <name pos:start="203:43" pos:end="203:52">slice_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:50"><expr pos:start="205:9" pos:end="205:49"><name pos:start="205:9" pos:end="205:30"><name pos:start="205:9" pos:end="205:11">ctx</name><operator pos:start="205:12" pos:end="205:13">-&gt;</operator><name pos:start="205:14" pos:end="205:23">slice_data</name><index pos:start="205:24" pos:end="205:30">[<expr pos:start="205:25" pos:end="205:29"><name pos:start="205:25" pos:end="205:29">slice</name></expr>]</index></name><operator pos:start="205:31" pos:end="205:31">.</operator><name pos:start="205:32" pos:end="205:38">slice_h</name>  <operator pos:start="205:41" pos:end="205:41">=</operator> <name pos:start="205:43" pos:end="205:49">slice_h</name></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:48"><expr pos:start="207:9" pos:end="207:47"><name pos:start="207:9" pos:end="207:30"><name pos:start="207:9" pos:end="207:11">ctx</name><operator pos:start="207:12" pos:end="207:13">-&gt;</operator><name pos:start="207:14" pos:end="207:23">slice_data</name><index pos:start="207:24" pos:end="207:30">[<expr pos:start="207:25" pos:end="207:29"><name pos:start="207:25" pos:end="207:29">slice</name></expr>]</index></name><operator pos:start="207:31" pos:end="207:31">.</operator><name pos:start="207:32" pos:end="207:36">y_off</name>    <operator pos:start="207:41" pos:end="207:41">=</operator> <name pos:start="207:43" pos:end="207:47">y_off</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="213:5" pos:end="217:19"><if pos:start="213:5" pos:end="217:19">if <condition pos:start="213:8" pos:end="215:76">(<expr pos:start="213:9" pos:end="215:75"><name pos:start="213:9" pos:end="213:11">ret</name> <operator pos:start="213:13" pos:end="213:13">=</operator> <call pos:start="213:15" pos:end="215:71"><name pos:start="213:15" pos:end="213:28"><name pos:start="213:15" pos:end="213:19">avctx</name><operator pos:start="213:20" pos:end="213:21">-&gt;</operator><name pos:start="213:22" pos:end="213:28">execute</name></name><argument_list pos:start="213:29" pos:end="215:71">(<argument pos:start="213:30" pos:end="213:34"><expr pos:start="213:30" pos:end="213:34"><name pos:start="213:30" pos:end="213:34">avctx</name></expr></argument>, <argument pos:start="213:37" pos:end="213:52"><expr pos:start="213:37" pos:end="213:52"><name pos:start="213:37" pos:end="213:52">fic_decode_slice</name></expr></argument>, <argument pos:start="213:55" pos:end="213:69"><expr pos:start="213:55" pos:end="213:69"><name pos:start="213:55" pos:end="213:69"><name pos:start="213:55" pos:end="213:57">ctx</name><operator pos:start="213:58" pos:end="213:59">-&gt;</operator><name pos:start="213:60" pos:end="213:69">slice_data</name></name></expr></argument>,

                             <argument pos:start="215:30" pos:end="215:33"><expr pos:start="215:30" pos:end="215:33"><name pos:start="215:30" pos:end="215:33">NULL</name></expr></argument>, <argument pos:start="215:36" pos:end="215:42"><expr pos:start="215:36" pos:end="215:42"><name pos:start="215:36" pos:end="215:42">nslices</name></expr></argument>, <argument pos:start="215:45" pos:end="215:70"><expr pos:start="215:45" pos:end="215:70"><sizeof pos:start="215:45" pos:end="215:70">sizeof<argument_list pos:start="215:51" pos:end="215:70">(<argument pos:start="215:52" pos:end="215:69"><expr pos:start="215:52" pos:end="215:69"><name pos:start="215:52" pos:end="215:69"><name pos:start="215:52" pos:end="215:54">ctx</name><operator pos:start="215:55" pos:end="215:56">-&gt;</operator><name pos:start="215:57" pos:end="215:66">slice_data</name><index pos:start="215:67" pos:end="215:69">[<expr pos:start="215:68" pos:end="215:68"><literal type="number" pos:start="215:68" pos:end="215:68">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="215:73" pos:end="215:73">&lt;</operator> <literal type="number" pos:start="215:75" pos:end="215:75">0</literal></expr>)</condition><block type="pseudo" pos:start="217:9" pos:end="217:19"><block_content pos:start="217:9" pos:end="217:19">

        <return pos:start="217:9" pos:end="217:19">return <expr pos:start="217:16" pos:end="217:18"><name pos:start="217:16" pos:end="217:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



<label pos:start="221:1" pos:end="221:5"><name pos:start="221:1" pos:end="221:4">skip</name>:</label>

    <expr_stmt pos:start="223:5" pos:end="223:19"><expr pos:start="223:5" pos:end="223:18"><operator pos:start="223:5" pos:end="223:5">*</operator><name pos:start="223:6" pos:end="223:14">got_frame</name> <operator pos:start="223:16" pos:end="223:16">=</operator> <literal type="number" pos:start="223:18" pos:end="223:18">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="227:19"><if pos:start="225:5" pos:end="227:19">if <condition pos:start="225:8" pos:end="225:51">(<expr pos:start="225:9" pos:end="225:50"><operator pos:start="225:9" pos:end="225:9">(</operator><name pos:start="225:10" pos:end="225:12">ret</name> <operator pos:start="225:14" pos:end="225:14">=</operator> <call pos:start="225:16" pos:end="225:45"><name pos:start="225:16" pos:end="225:27">av_frame_ref</name><argument_list pos:start="225:28" pos:end="225:45">(<argument pos:start="225:29" pos:end="225:32"><expr pos:start="225:29" pos:end="225:32"><name pos:start="225:29" pos:end="225:32">data</name></expr></argument>, <argument pos:start="225:35" pos:end="225:44"><expr pos:start="225:35" pos:end="225:44"><name pos:start="225:35" pos:end="225:44"><name pos:start="225:35" pos:end="225:37">ctx</name><operator pos:start="225:38" pos:end="225:39">-&gt;</operator><name pos:start="225:40" pos:end="225:44">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="225:46" pos:end="225:46">)</operator> <operator pos:start="225:48" pos:end="225:48">&lt;</operator> <literal type="number" pos:start="225:50" pos:end="225:50">0</literal></expr>)</condition><block type="pseudo" pos:start="227:9" pos:end="227:19"><block_content pos:start="227:9" pos:end="227:19">

        <return pos:start="227:9" pos:end="227:19">return <expr pos:start="227:16" pos:end="227:18"><name pos:start="227:16" pos:end="227:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="231:5" pos:end="231:23">return <expr pos:start="231:12" pos:end="231:22"><name pos:start="231:12" pos:end="231:22"><name pos:start="231:12" pos:end="231:16">avpkt</name><operator pos:start="231:17" pos:end="231:18">-&gt;</operator><name pos:start="231:19" pos:end="231:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
