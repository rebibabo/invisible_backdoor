<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27227.c" pos:tabs="8"><function pos:start="1:1" pos:end="325:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">query_formats</name><parameter_list pos:start="1:25" pos:end="1:64">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:38">AVFilterGraph</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">graph</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:63"><decl pos:start="1:48" pos:end="1:63"><type pos:start="1:48" pos:end="1:63"><name pos:start="1:48" pos:end="1:54">AVClass</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:63">log_ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="325:1">{<block_content pos:start="5:5" pos:end="323:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">j</name></decl>, <decl pos:start="5:15" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:17">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20">scaler_count</name> <init pos:start="7:22" pos:end="7:24">= <expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr></init></decl>, <decl pos:start="7:27" pos:end="7:45"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:27" pos:end="7:41">resampler_count</name> <init pos:start="7:43" pos:end="7:45">= <expr pos:start="7:45" pos:end="7:45"><literal type="number" pos:start="7:45" pos:end="7:45">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="11:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:21">count_queried</name> <init pos:start="9:23" pos:end="9:25">= <expr pos:start="9:25" pos:end="9:25"><literal type="number" pos:start="9:25" pos:end="9:25">0</literal></expr></init></decl>, <decl pos:start="9:28" pos:end="9:43"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:39">count_merged</name> <init pos:start="9:41" pos:end="9:43">= <expr pos:start="9:43" pos:end="9:43"><literal type="number" pos:start="9:43" pos:end="9:43">0</literal></expr></init></decl>, <decl pos:start="9:46" pos:end="9:69"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:46" pos:end="9:65">count_already_merged</name> <init pos:start="9:67" pos:end="9:69">= <expr pos:start="9:69" pos:end="9:69"><literal type="number" pos:start="9:69" pos:end="9:69">0</literal></expr></init></decl>,

        <decl pos:start="11:9" pos:end="11:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="11:9" pos:end="11:21">count_delayed</name> <init pos:start="11:23" pos:end="11:25">= <expr pos:start="11:25" pos:end="11:25"><literal type="number" pos:start="11:25" pos:end="11:25">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="39:5">for <control pos:start="15:9" pos:end="15:43">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:38"><expr pos:start="15:17" pos:end="15:37"><name pos:start="15:17" pos:end="15:17">i</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <name pos:start="15:21" pos:end="15:37"><name pos:start="15:21" pos:end="15:25">graph</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:37">nb_filters</name></name></expr>;</condition> <incr pos:start="15:40" pos:end="15:42"><expr pos:start="15:40" pos:end="15:42"><name pos:start="15:40" pos:end="15:40">i</name><operator pos:start="15:41" pos:end="15:42">++</operator></expr></incr>)</control> <block pos:start="15:45" pos:end="39:5">{<block_content pos:start="17:9" pos:end="37:34">

        <decl_stmt pos:start="17:9" pos:end="17:47"><decl pos:start="17:9" pos:end="17:46"><type pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:23">AVFilterContext</name> <modifier pos:start="17:25" pos:end="17:25">*</modifier></type><name pos:start="17:26" pos:end="17:26">f</name> <init pos:start="17:28" pos:end="17:46">= <expr pos:start="17:30" pos:end="17:46"><name pos:start="17:30" pos:end="17:46"><name pos:start="17:30" pos:end="17:34">graph</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:43">filters</name><index pos:start="17:44" pos:end="17:46">[<expr pos:start="17:45" pos:end="17:45"><name pos:start="17:45" pos:end="17:45">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="19:9" pos:end="21:21"><if pos:start="19:9" pos:end="21:21">if <condition pos:start="19:12" pos:end="19:32">(<expr pos:start="19:13" pos:end="19:31"><call pos:start="19:13" pos:end="19:31"><name pos:start="19:13" pos:end="19:28">formats_declared</name><argument_list pos:start="19:29" pos:end="19:31">(<argument pos:start="19:30" pos:end="19:30"><expr pos:start="19:30" pos:end="19:30"><name pos:start="19:30" pos:end="19:30">f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:21"><block_content pos:start="21:13" pos:end="21:21">

            <continue pos:start="21:13" pos:end="21:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="23:9" pos:end="29:46"><if pos:start="23:9" pos:end="25:42">if <condition pos:start="23:12" pos:end="23:37">(<expr pos:start="23:13" pos:end="23:36"><name pos:start="23:13" pos:end="23:36"><name pos:start="23:13" pos:end="23:13">f</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:21">filter</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:36">query_formats</name></name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:42"><block_content pos:start="25:13" pos:end="25:42">

            <expr_stmt pos:start="25:13" pos:end="25:42"><expr pos:start="25:13" pos:end="25:41"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:41"><name pos:start="25:19" pos:end="25:38">filter_query_formats</name><argument_list pos:start="25:39" pos:end="25:41">(<argument pos:start="25:40" pos:end="25:40"><expr pos:start="25:40" pos:end="25:40"><name pos:start="25:40" pos:end="25:40">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="27:9" pos:end="29:46">else<block type="pseudo" pos:start="29:13" pos:end="29:46"><block_content pos:start="29:13" pos:end="29:46">

            <expr_stmt pos:start="29:13" pos:end="29:46"><expr pos:start="29:13" pos:end="29:45"><name pos:start="29:13" pos:end="29:15">ret</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:45"><name pos:start="29:19" pos:end="29:42">ff_default_query_formats</name><argument_list pos:start="29:43" pos:end="29:45">(<argument pos:start="29:44" pos:end="29:44"><expr pos:start="29:44" pos:end="29:44"><name pos:start="29:44" pos:end="29:44">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="31:9" pos:end="33:23"><if pos:start="31:9" pos:end="33:23">if <condition pos:start="31:12" pos:end="31:46">(<expr pos:start="31:13" pos:end="31:45"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:17">&lt;</operator> <literal type="number" pos:start="31:19" pos:end="31:19">0</literal> <operator pos:start="31:21" pos:end="31:22">&amp;&amp;</operator> <name pos:start="31:24" pos:end="31:26">ret</name> <operator pos:start="31:28" pos:end="31:29">!=</operator> <call pos:start="31:31" pos:end="31:45"><name pos:start="31:31" pos:end="31:37">AVERROR</name><argument_list pos:start="31:38" pos:end="31:45">(<argument pos:start="31:39" pos:end="31:44"><expr pos:start="31:39" pos:end="31:44"><name pos:start="31:39" pos:end="31:44">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:23"><block_content pos:start="33:13" pos:end="33:23">

            <return pos:start="33:13" pos:end="33:23">return <expr pos:start="33:20" pos:end="33:22"><name pos:start="33:20" pos:end="33:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="35:9" pos:end="35:76">/* note: EAGAIN could indicate a partial success, not counted yet */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:34"><expr pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:21">count_queried</name> <operator pos:start="37:23" pos:end="37:24">+=</operator> <name pos:start="37:26" pos:end="37:28">ret</name> <operator pos:start="37:30" pos:end="37:31">&gt;=</operator> <literal type="number" pos:start="37:33" pos:end="37:33">0</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="43:5" pos:end="43:63">/* go through and merge as many format lists as possible */</comment>

    <for pos:start="45:5" pos:end="281:5">for <control pos:start="45:9" pos:end="45:43">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:38"><expr pos:start="45:17" pos:end="45:37"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <name pos:start="45:21" pos:end="45:37"><name pos:start="45:21" pos:end="45:25">graph</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:37">nb_filters</name></name></expr>;</condition> <incr pos:start="45:40" pos:end="45:42"><expr pos:start="45:40" pos:end="45:42"><name pos:start="45:40" pos:end="45:40">i</name><operator pos:start="45:41" pos:end="45:42">++</operator></expr></incr>)</control> <block pos:start="45:45" pos:end="281:5">{<block_content pos:start="47:9" pos:end="279:9">

        <decl_stmt pos:start="47:9" pos:end="47:52"><decl pos:start="47:9" pos:end="47:51"><type pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:23">AVFilterContext</name> <modifier pos:start="47:25" pos:end="47:25">*</modifier></type><name pos:start="47:26" pos:end="47:31">filter</name> <init pos:start="47:33" pos:end="47:51">= <expr pos:start="47:35" pos:end="47:51"><name pos:start="47:35" pos:end="47:51"><name pos:start="47:35" pos:end="47:39">graph</name><operator pos:start="47:40" pos:end="47:41">-&gt;</operator><name pos:start="47:42" pos:end="47:48">filters</name><index pos:start="47:49" pos:end="47:51">[<expr pos:start="47:50" pos:end="47:50"><name pos:start="47:50" pos:end="47:50">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <for pos:start="51:9" pos:end="279:9">for <control pos:start="51:13" pos:end="51:47">(<init pos:start="51:14" pos:end="51:19"><expr pos:start="51:14" pos:end="51:18"><name pos:start="51:14" pos:end="51:14">j</name> <operator pos:start="51:16" pos:end="51:16">=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">0</literal></expr>;</init> <condition pos:start="51:21" pos:end="51:42"><expr pos:start="51:21" pos:end="51:41"><name pos:start="51:21" pos:end="51:21">j</name> <operator pos:start="51:23" pos:end="51:23">&lt;</operator> <name pos:start="51:25" pos:end="51:41"><name pos:start="51:25" pos:end="51:30">filter</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:41">nb_inputs</name></name></expr>;</condition> <incr pos:start="51:44" pos:end="51:46"><expr pos:start="51:44" pos:end="51:46"><name pos:start="51:44" pos:end="51:44">j</name><operator pos:start="51:45" pos:end="51:46">++</operator></expr></incr>)</control> <block pos:start="51:49" pos:end="279:9">{<block_content pos:start="53:13" pos:end="277:13">

            <decl_stmt pos:start="53:13" pos:end="53:51"><decl pos:start="53:13" pos:end="53:50"><type pos:start="53:13" pos:end="53:26"><name pos:start="53:13" pos:end="53:24">AVFilterLink</name> <modifier pos:start="53:26" pos:end="53:26">*</modifier></type><name pos:start="53:27" pos:end="53:30">link</name> <init pos:start="53:32" pos:end="53:50">= <expr pos:start="53:34" pos:end="53:50"><name pos:start="53:34" pos:end="53:50"><name pos:start="53:34" pos:end="53:39">filter</name><operator pos:start="53:40" pos:end="53:41">-&gt;</operator><name pos:start="53:42" pos:end="53:47">inputs</name><index pos:start="53:48" pos:end="53:50">[<expr pos:start="53:49" pos:end="53:49"><name pos:start="53:49" pos:end="53:49">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="55:13" pos:end="55:35"><decl pos:start="55:13" pos:end="55:34"><type pos:start="55:13" pos:end="55:15"><name pos:start="55:13" pos:end="55:15">int</name></type> <name pos:start="55:17" pos:end="55:30">convert_needed</name> <init pos:start="55:32" pos:end="55:34">= <expr pos:start="55:34" pos:end="55:34"><literal type="number" pos:start="55:34" pos:end="55:34">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="59:13" pos:end="82:0"><if pos:start="59:13" pos:end="82:0">if <condition pos:start="59:16" pos:end="59:22">(<expr pos:start="59:17" pos:end="59:21"><operator pos:start="59:17" pos:end="59:17">!</operator><name pos:start="59:18" pos:end="59:21">link</name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="82:0"><block_content pos:start="61:17" pos:end="82:0">

                <continue pos:start="61:17" pos:end="82:0">continue;</continue></block_content></block></if></if_stmt>



<cpp:define pos:start="65:1" pos:end="81:13">#<cpp:directive pos:start="65:2" pos:end="65:7">define</cpp:directive> <cpp:macro pos:start="65:9" pos:end="65:40"><name pos:start="65:9" pos:end="65:22">MERGE_DISPATCH</name><parameter_list pos:start="65:23" pos:end="65:40">(<parameter pos:start="65:24" pos:end="65:28"><type pos:start="65:24" pos:end="65:28"><name pos:start="65:24" pos:end="65:28">field</name></type></parameter>, <parameter pos:start="65:31" pos:end="65:39"><type pos:start="65:31" pos:end="65:39"><name pos:start="65:31" pos:end="65:39">statement</name></type></parameter>)</parameter_list></cpp:macro>                                     \

            <cpp:value pos:start="67:13" pos:end="81:13">if (!(link-&gt;in_ ## field &amp;&amp; link-&gt;out_ ## field)) {              \

                count_delayed++;                                             \

            } else if (link-&gt;in_ ## field == link-&gt;out_ ## field) {          \

                count_already_merged++;                                      \

            } else {                                                         \

                count_merged++;                                              \

                statement                                                    \

            }</cpp:value></cpp:define>

            <macro pos:start="83:13" pos:end="91:13"><name pos:start="83:13" pos:end="83:26">MERGE_DISPATCH</name><argument_list pos:start="83:27" pos:end="91:13">(<argument pos:start="83:28" pos:end="83:34">formats</argument>,

                <argument pos:start="85:17" pos:end="89:39">if (!ff_merge_formats(link-&gt;in_formats, link-&gt;out_formats,

                                      link-&gt;type))

                    convert_needed = <literal type="number" pos:start="89:38" pos:end="89:38">1</literal>;</argument>

            )</argument_list></macro>

            <if_stmt pos:start="93:13" pos:end="118:0"><if pos:start="93:13" pos:end="118:0">if <condition pos:start="93:16" pos:end="93:49">(<expr pos:start="93:17" pos:end="93:48"><name pos:start="93:17" pos:end="93:26"><name pos:start="93:17" pos:end="93:20">link</name><operator pos:start="93:21" pos:end="93:22">-&gt;</operator><name pos:start="93:23" pos:end="93:26">type</name></name> <operator pos:start="93:28" pos:end="93:29">==</operator> <name pos:start="93:31" pos:end="93:48">AVMEDIA_TYPE_AUDIO</name></expr>)</condition> <block pos:start="93:51" pos:end="118:0">{<block_content pos:start="95:17" pos:end="113:17">

                <macro pos:start="95:17" pos:end="103:17"><name pos:start="95:17" pos:end="95:30">MERGE_DISPATCH</name><argument_list pos:start="95:31" pos:end="103:17">(<argument pos:start="95:32" pos:end="95:46">channel_layouts</argument>,

                    <argument pos:start="97:21" pos:end="101:43">if (!ff_merge_channel_layouts(link-&gt;in_channel_layouts,

                                                  link-&gt;out_channel_layouts))

                        convert_needed = <literal type="number" pos:start="101:42" pos:end="101:42">1</literal>;</argument>

                )</argument_list></macro>

                <macro pos:start="105:17" pos:end="113:17"><name pos:start="105:17" pos:end="105:30">MERGE_DISPATCH</name><argument_list pos:start="105:31" pos:end="113:17">(<argument pos:start="105:32" pos:end="105:42">samplerates</argument>,

                    <argument pos:start="107:21" pos:end="111:43">if (!ff_merge_samplerates(link-&gt;in_samplerates,

                                              link-&gt;out_samplerates))

                        convert_needed = <literal type="number" pos:start="111:42" pos:end="111:42">1</literal>;</argument>

                )</argument_list></macro>

            </block_content>}</block></if></if_stmt>

<cpp:undef pos:start="117:1" pos:end="117:21">#<cpp:directive pos:start="117:2" pos:end="117:6">undef</cpp:directive> <name pos:start="117:8" pos:end="117:21">MERGE_DISPATCH</name></cpp:undef>



            <if_stmt pos:start="121:13" pos:end="277:13"><if pos:start="121:13" pos:end="277:13">if <condition pos:start="121:16" pos:end="121:31">(<expr pos:start="121:17" pos:end="121:30"><name pos:start="121:17" pos:end="121:30">convert_needed</name></expr>)</condition> <block pos:start="121:33" pos:end="277:13">{<block_content pos:start="123:17" pos:end="275:17">

                <decl_stmt pos:start="123:17" pos:end="123:41"><decl pos:start="123:17" pos:end="123:40"><type pos:start="123:17" pos:end="123:33"><name pos:start="123:17" pos:end="123:31">AVFilterContext</name> <modifier pos:start="123:33" pos:end="123:33">*</modifier></type><name pos:start="123:34" pos:end="123:40">convert</name></decl>;</decl_stmt>

                <decl_stmt pos:start="125:17" pos:end="125:33"><decl pos:start="125:17" pos:end="125:32"><type pos:start="125:17" pos:end="125:26"><name pos:start="125:17" pos:end="125:24">AVFilter</name> <modifier pos:start="125:26" pos:end="125:26">*</modifier></type><name pos:start="125:27" pos:end="125:32">filter</name></decl>;</decl_stmt>

                <decl_stmt pos:start="127:17" pos:end="127:47"><decl pos:start="127:17" pos:end="127:36"><type pos:start="127:17" pos:end="127:30"><name pos:start="127:17" pos:end="127:28">AVFilterLink</name> <modifier pos:start="127:30" pos:end="127:30">*</modifier></type><name pos:start="127:31" pos:end="127:36">inlink</name></decl>, <decl pos:start="127:39" pos:end="127:46"><type ref="prev" pos:start="127:17" pos:end="127:30"><modifier pos:start="127:39" pos:end="127:39">*</modifier></type><name pos:start="127:40" pos:end="127:46">outlink</name></decl>;</decl_stmt>

                <decl_stmt pos:start="129:17" pos:end="129:37"><decl pos:start="129:17" pos:end="129:36"><type pos:start="129:17" pos:end="129:20"><name pos:start="129:17" pos:end="129:20">char</name></type> <name pos:start="129:22" pos:end="129:36"><name pos:start="129:22" pos:end="129:31">scale_args</name><index pos:start="129:32" pos:end="129:36">[<expr pos:start="129:33" pos:end="129:35"><literal type="number" pos:start="129:33" pos:end="129:35">256</literal></expr>]</index></name></decl>;</decl_stmt>

                <decl_stmt pos:start="131:17" pos:end="131:35"><decl pos:start="131:17" pos:end="131:34"><type pos:start="131:17" pos:end="131:20"><name pos:start="131:17" pos:end="131:20">char</name></type> <name pos:start="131:22" pos:end="131:34"><name pos:start="131:22" pos:end="131:30">inst_name</name><index pos:start="131:31" pos:end="131:34">[<expr pos:start="131:32" pos:end="131:33"><literal type="number" pos:start="131:32" pos:end="131:33">30</literal></expr>]</index></name></decl>;</decl_stmt>



                <comment type="block" pos:start="135:17" pos:end="135:80">/* couldn't merge format lists. auto-insert conversion filter */</comment>

                <switch pos:start="137:17" pos:end="217:17">switch <condition pos:start="137:24" pos:end="137:35">(<expr pos:start="137:25" pos:end="137:34"><name pos:start="137:25" pos:end="137:34"><name pos:start="137:25" pos:end="137:28">link</name><operator pos:start="137:29" pos:end="137:30">-&gt;</operator><name pos:start="137:31" pos:end="137:34">type</name></name></expr>)</condition> <block pos:start="137:37" pos:end="217:17">{<block_content pos:start="139:17" pos:end="215:43">

                <case pos:start="139:17" pos:end="139:40">case <expr pos:start="139:22" pos:end="139:39"><name pos:start="139:22" pos:end="139:39">AVMEDIA_TYPE_VIDEO</name></expr>:</case>

                    <if_stmt pos:start="141:21" pos:end="149:21"><if pos:start="141:21" pos:end="149:21">if <condition pos:start="141:24" pos:end="141:66">(<expr pos:start="141:25" pos:end="141:65"><operator pos:start="141:25" pos:end="141:25">!</operator><operator pos:start="141:26" pos:end="141:26">(</operator><name pos:start="141:27" pos:end="141:32">filter</name> <operator pos:start="141:34" pos:end="141:34">=</operator> <call pos:start="141:36" pos:end="141:64"><name pos:start="141:36" pos:end="141:55">avfilter_get_by_name</name><argument_list pos:start="141:56" pos:end="141:64">(<argument pos:start="141:57" pos:end="141:63"><expr pos:start="141:57" pos:end="141:63"><literal type="string" pos:start="141:57" pos:end="141:63">"scale"</literal></expr></argument>)</argument_list></call><operator pos:start="141:65" pos:end="141:65">)</operator></expr>)</condition> <block pos:start="141:68" pos:end="149:21">{<block_content pos:start="143:25" pos:end="147:47">

                        <expr_stmt pos:start="143:25" pos:end="145:79"><expr pos:start="143:25" pos:end="145:78"><call pos:start="143:25" pos:end="145:78"><name pos:start="143:25" pos:end="143:30">av_log</name><argument_list pos:start="143:31" pos:end="145:78">(<argument pos:start="143:32" pos:end="143:38"><expr pos:start="143:32" pos:end="143:38"><name pos:start="143:32" pos:end="143:38">log_ctx</name></expr></argument>, <argument pos:start="143:41" pos:end="143:52"><expr pos:start="143:41" pos:end="143:52"><name pos:start="143:41" pos:end="143:52">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="143:55" pos:end="145:77"><expr pos:start="143:55" pos:end="145:77"><literal type="string" pos:start="143:55" pos:end="143:71">"'scale' filter "</literal>

                               <literal type="string" pos:start="145:32" pos:end="145:77">"not present, cannot convert pixel formats.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="147:25" pos:end="147:47">return <expr pos:start="147:32" pos:end="147:46"><call pos:start="147:32" pos:end="147:46"><name pos:start="147:32" pos:end="147:38">AVERROR</name><argument_list pos:start="147:39" pos:end="147:46">(<argument pos:start="147:40" pos:end="147:45"><expr pos:start="147:40" pos:end="147:45"><name pos:start="147:40" pos:end="147:45">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                    </block_content>}</block></if></if_stmt>



                    <expr_stmt pos:start="153:21" pos:end="155:45"><expr pos:start="153:21" pos:end="155:44"><call pos:start="153:21" pos:end="155:44"><name pos:start="153:21" pos:end="153:28">snprintf</name><argument_list pos:start="153:29" pos:end="155:44">(<argument pos:start="153:30" pos:end="153:38"><expr pos:start="153:30" pos:end="153:38"><name pos:start="153:30" pos:end="153:38">inst_name</name></expr></argument>, <argument pos:start="153:41" pos:end="153:57"><expr pos:start="153:41" pos:end="153:57"><sizeof pos:start="153:41" pos:end="153:57">sizeof<argument_list pos:start="153:47" pos:end="153:57">(<argument pos:start="153:48" pos:end="153:56"><expr pos:start="153:48" pos:end="153:56"><name pos:start="153:48" pos:end="153:56">inst_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="153:60" pos:end="153:84"><expr pos:start="153:60" pos:end="153:84"><literal type="string" pos:start="153:60" pos:end="153:84">"auto-inserted scaler %d"</literal></expr></argument>,

                             <argument pos:start="155:30" pos:end="155:43"><expr pos:start="155:30" pos:end="155:43"><name pos:start="155:30" pos:end="155:41">scaler_count</name><operator pos:start="155:42" pos:end="155:43">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="157:21" pos:end="157:70"><expr pos:start="157:21" pos:end="157:69"><call pos:start="157:21" pos:end="157:69"><name pos:start="157:21" pos:end="157:30">av_strlcpy</name><argument_list pos:start="157:31" pos:end="157:69">(<argument pos:start="157:32" pos:end="157:41"><expr pos:start="157:32" pos:end="157:41"><name pos:start="157:32" pos:end="157:41">scale_args</name></expr></argument>, <argument pos:start="157:44" pos:end="157:48"><expr pos:start="157:44" pos:end="157:48"><literal type="string" pos:start="157:44" pos:end="157:48">"0:0"</literal></expr></argument>, <argument pos:start="157:51" pos:end="157:68"><expr pos:start="157:51" pos:end="157:68"><sizeof pos:start="157:51" pos:end="157:68">sizeof<argument_list pos:start="157:57" pos:end="157:68">(<argument pos:start="157:58" pos:end="157:67"><expr pos:start="157:58" pos:end="157:67"><name pos:start="157:58" pos:end="157:67">scale_args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="159:21" pos:end="165:21"><if pos:start="159:21" pos:end="165:21">if <condition pos:start="159:24" pos:end="159:46">(<expr pos:start="159:25" pos:end="159:45"><name pos:start="159:25" pos:end="159:45"><name pos:start="159:25" pos:end="159:29">graph</name><operator pos:start="159:30" pos:end="159:31">-&gt;</operator><name pos:start="159:32" pos:end="159:45">scale_sws_opts</name></name></expr>)</condition> <block pos:start="159:48" pos:end="165:21">{<block_content pos:start="161:25" pos:end="163:90">

                        <expr_stmt pos:start="161:25" pos:end="161:72"><expr pos:start="161:25" pos:end="161:71"><call pos:start="161:25" pos:end="161:71"><name pos:start="161:25" pos:end="161:34">av_strlcat</name><argument_list pos:start="161:35" pos:end="161:71">(<argument pos:start="161:36" pos:end="161:45"><expr pos:start="161:36" pos:end="161:45"><name pos:start="161:36" pos:end="161:45">scale_args</name></expr></argument>, <argument pos:start="161:48" pos:end="161:50"><expr pos:start="161:48" pos:end="161:50"><literal type="string" pos:start="161:48" pos:end="161:50">":"</literal></expr></argument>, <argument pos:start="161:53" pos:end="161:70"><expr pos:start="161:53" pos:end="161:70"><sizeof pos:start="161:53" pos:end="161:70">sizeof<argument_list pos:start="161:59" pos:end="161:70">(<argument pos:start="161:60" pos:end="161:69"><expr pos:start="161:60" pos:end="161:69"><name pos:start="161:60" pos:end="161:69">scale_args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="163:25" pos:end="163:90"><expr pos:start="163:25" pos:end="163:89"><call pos:start="163:25" pos:end="163:89"><name pos:start="163:25" pos:end="163:34">av_strlcat</name><argument_list pos:start="163:35" pos:end="163:89">(<argument pos:start="163:36" pos:end="163:45"><expr pos:start="163:36" pos:end="163:45"><name pos:start="163:36" pos:end="163:45">scale_args</name></expr></argument>, <argument pos:start="163:48" pos:end="163:68"><expr pos:start="163:48" pos:end="163:68"><name pos:start="163:48" pos:end="163:68"><name pos:start="163:48" pos:end="163:52">graph</name><operator pos:start="163:53" pos:end="163:54">-&gt;</operator><name pos:start="163:55" pos:end="163:68">scale_sws_opts</name></name></expr></argument>, <argument pos:start="163:71" pos:end="163:88"><expr pos:start="163:71" pos:end="163:88"><sizeof pos:start="163:71" pos:end="163:88">sizeof<argument_list pos:start="163:77" pos:end="163:88">(<argument pos:start="163:78" pos:end="163:87"><expr pos:start="163:78" pos:end="163:87"><name pos:start="163:78" pos:end="163:87">scale_args</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="167:21" pos:end="173:35"><if pos:start="167:21" pos:end="173:35">if <condition pos:start="167:24" pos:end="171:72">(<expr pos:start="167:25" pos:end="171:71"><operator pos:start="167:25" pos:end="167:25">(</operator><name pos:start="167:26" pos:end="167:28">ret</name> <operator pos:start="167:30" pos:end="167:30">=</operator> <call pos:start="167:32" pos:end="171:66"><name pos:start="167:32" pos:end="167:59">avfilter_graph_create_filter</name><argument_list pos:start="167:60" pos:end="171:66">(<argument pos:start="167:61" pos:end="167:68"><expr pos:start="167:61" pos:end="167:68"><operator pos:start="167:61" pos:end="167:61">&amp;</operator><name pos:start="167:62" pos:end="167:68">convert</name></expr></argument>, <argument pos:start="167:71" pos:end="167:76"><expr pos:start="167:71" pos:end="167:76"><name pos:start="167:71" pos:end="167:76">filter</name></expr></argument>,

                                                            <argument pos:start="169:61" pos:end="169:69"><expr pos:start="169:61" pos:end="169:69"><name pos:start="169:61" pos:end="169:69">inst_name</name></expr></argument>, <argument pos:start="169:72" pos:end="169:81"><expr pos:start="169:72" pos:end="169:81"><name pos:start="169:72" pos:end="169:81">scale_args</name></expr></argument>, <argument pos:start="169:84" pos:end="169:87"><expr pos:start="169:84" pos:end="169:87"><name pos:start="169:84" pos:end="169:87">NULL</name></expr></argument>,

                                                            <argument pos:start="171:61" pos:end="171:65"><expr pos:start="171:61" pos:end="171:65"><name pos:start="171:61" pos:end="171:65">graph</name></expr></argument>)</argument_list></call><operator pos:start="171:67" pos:end="171:67">)</operator> <operator pos:start="171:69" pos:end="171:69">&lt;</operator> <literal type="number" pos:start="171:71" pos:end="171:71">0</literal></expr>)</condition><block type="pseudo" pos:start="173:25" pos:end="173:35"><block_content pos:start="173:25" pos:end="173:35">

                        <return pos:start="173:25" pos:end="173:35">return <expr pos:start="173:32" pos:end="173:34"><name pos:start="173:32" pos:end="173:34">ret</name></expr>;</return></block_content></block></if></if_stmt>

                    <break pos:start="175:21" pos:end="175:26">break;</break>

                <case pos:start="177:17" pos:end="177:40">case <expr pos:start="177:22" pos:end="177:39"><name pos:start="177:22" pos:end="177:39">AVMEDIA_TYPE_AUDIO</name></expr>:</case>

                    <if_stmt pos:start="179:21" pos:end="187:21"><if pos:start="179:21" pos:end="187:21">if <condition pos:start="179:24" pos:end="179:70">(<expr pos:start="179:25" pos:end="179:69"><operator pos:start="179:25" pos:end="179:25">!</operator><operator pos:start="179:26" pos:end="179:26">(</operator><name pos:start="179:27" pos:end="179:32">filter</name> <operator pos:start="179:34" pos:end="179:34">=</operator> <call pos:start="179:36" pos:end="179:68"><name pos:start="179:36" pos:end="179:55">avfilter_get_by_name</name><argument_list pos:start="179:56" pos:end="179:68">(<argument pos:start="179:57" pos:end="179:67"><expr pos:start="179:57" pos:end="179:67"><literal type="string" pos:start="179:57" pos:end="179:67">"aresample"</literal></expr></argument>)</argument_list></call><operator pos:start="179:69" pos:end="179:69">)</operator></expr>)</condition> <block pos:start="179:72" pos:end="187:21">{<block_content pos:start="181:25" pos:end="185:47">

                        <expr_stmt pos:start="181:25" pos:end="183:79"><expr pos:start="181:25" pos:end="183:78"><call pos:start="181:25" pos:end="183:78"><name pos:start="181:25" pos:end="181:30">av_log</name><argument_list pos:start="181:31" pos:end="183:78">(<argument pos:start="181:32" pos:end="181:38"><expr pos:start="181:32" pos:end="181:38"><name pos:start="181:32" pos:end="181:38">log_ctx</name></expr></argument>, <argument pos:start="181:41" pos:end="181:52"><expr pos:start="181:41" pos:end="181:52"><name pos:start="181:41" pos:end="181:52">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="181:55" pos:end="183:77"><expr pos:start="181:55" pos:end="183:77"><literal type="string" pos:start="181:55" pos:end="181:75">"'aresample' filter "</literal>

                               <literal type="string" pos:start="183:32" pos:end="183:77">"not present, cannot convert audio formats.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="185:25" pos:end="185:47">return <expr pos:start="185:32" pos:end="185:46"><call pos:start="185:32" pos:end="185:46"><name pos:start="185:32" pos:end="185:38">AVERROR</name><argument_list pos:start="185:39" pos:end="185:46">(<argument pos:start="185:40" pos:end="185:45"><expr pos:start="185:40" pos:end="185:45"><name pos:start="185:40" pos:end="185:45">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                    </block_content>}</block></if></if_stmt>



                    <expr_stmt pos:start="191:21" pos:end="193:48"><expr pos:start="191:21" pos:end="193:47"><call pos:start="191:21" pos:end="193:47"><name pos:start="191:21" pos:end="191:28">snprintf</name><argument_list pos:start="191:29" pos:end="193:47">(<argument pos:start="191:30" pos:end="191:38"><expr pos:start="191:30" pos:end="191:38"><name pos:start="191:30" pos:end="191:38">inst_name</name></expr></argument>, <argument pos:start="191:41" pos:end="191:57"><expr pos:start="191:41" pos:end="191:57"><sizeof pos:start="191:41" pos:end="191:57">sizeof<argument_list pos:start="191:47" pos:end="191:57">(<argument pos:start="191:48" pos:end="191:56"><expr pos:start="191:48" pos:end="191:56"><name pos:start="191:48" pos:end="191:56">inst_name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="191:60" pos:end="191:87"><expr pos:start="191:60" pos:end="191:87"><literal type="string" pos:start="191:60" pos:end="191:87">"auto-inserted resampler %d"</literal></expr></argument>,

                             <argument pos:start="193:30" pos:end="193:46"><expr pos:start="193:30" pos:end="193:46"><name pos:start="193:30" pos:end="193:44">resampler_count</name><operator pos:start="193:45" pos:end="193:46">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:41"><expr pos:start="195:21" pos:end="195:40"><name pos:start="195:21" pos:end="195:33"><name pos:start="195:21" pos:end="195:30">scale_args</name><index pos:start="195:31" pos:end="195:33">[<expr pos:start="195:32" pos:end="195:32"><literal type="number" pos:start="195:32" pos:end="195:32">0</literal></expr>]</index></name> <operator pos:start="195:35" pos:end="195:35">=</operator> <literal type="char" pos:start="195:37" pos:end="195:40">'\0'</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="197:21" pos:end="201:60"><if pos:start="197:21" pos:end="201:60">if <condition pos:start="197:24" pos:end="197:50">(<expr pos:start="197:25" pos:end="197:49"><name pos:start="197:25" pos:end="197:49"><name pos:start="197:25" pos:end="197:29">graph</name><operator pos:start="197:30" pos:end="197:31">-&gt;</operator><name pos:start="197:32" pos:end="197:49">aresample_swr_opts</name></name></expr>)</condition><block type="pseudo" pos:start="199:25" pos:end="201:60"><block_content pos:start="199:25" pos:end="201:60">

                        <expr_stmt pos:start="199:25" pos:end="201:60"><expr pos:start="199:25" pos:end="201:59"><call pos:start="199:25" pos:end="201:59"><name pos:start="199:25" pos:end="199:32">snprintf</name><argument_list pos:start="199:33" pos:end="201:59">(<argument pos:start="199:34" pos:end="199:43"><expr pos:start="199:34" pos:end="199:43"><name pos:start="199:34" pos:end="199:43">scale_args</name></expr></argument>, <argument pos:start="199:46" pos:end="199:63"><expr pos:start="199:46" pos:end="199:63"><sizeof pos:start="199:46" pos:end="199:63">sizeof<argument_list pos:start="199:52" pos:end="199:63">(<argument pos:start="199:53" pos:end="199:62"><expr pos:start="199:53" pos:end="199:62"><name pos:start="199:53" pos:end="199:62">scale_args</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="199:66" pos:end="199:69"><expr pos:start="199:66" pos:end="199:69"><literal type="string" pos:start="199:66" pos:end="199:69">"%s"</literal></expr></argument>,

                                 <argument pos:start="201:34" pos:end="201:58"><expr pos:start="201:34" pos:end="201:58"><name pos:start="201:34" pos:end="201:58"><name pos:start="201:34" pos:end="201:38">graph</name><operator pos:start="201:39" pos:end="201:40">-&gt;</operator><name pos:start="201:41" pos:end="201:58">aresample_swr_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="203:21" pos:end="209:35"><if pos:start="203:21" pos:end="209:35">if <condition pos:start="203:24" pos:end="207:78">(<expr pos:start="203:25" pos:end="207:77"><operator pos:start="203:25" pos:end="203:25">(</operator><name pos:start="203:26" pos:end="203:28">ret</name> <operator pos:start="203:30" pos:end="203:30">=</operator> <call pos:start="203:32" pos:end="207:72"><name pos:start="203:32" pos:end="203:59">avfilter_graph_create_filter</name><argument_list pos:start="203:60" pos:end="207:72">(<argument pos:start="203:61" pos:end="203:68"><expr pos:start="203:61" pos:end="203:68"><operator pos:start="203:61" pos:end="203:61">&amp;</operator><name pos:start="203:62" pos:end="203:68">convert</name></expr></argument>, <argument pos:start="203:71" pos:end="203:76"><expr pos:start="203:71" pos:end="203:76"><name pos:start="203:71" pos:end="203:76">filter</name></expr></argument>,

                                                            <argument pos:start="205:61" pos:end="205:69"><expr pos:start="205:61" pos:end="205:69"><name pos:start="205:61" pos:end="205:69">inst_name</name></expr></argument>, <argument pos:start="205:72" pos:end="205:96"><expr pos:start="205:72" pos:end="205:96"><name pos:start="205:72" pos:end="205:96"><name pos:start="205:72" pos:end="205:76">graph</name><operator pos:start="205:77" pos:end="205:78">-&gt;</operator><name pos:start="205:79" pos:end="205:96">aresample_swr_opts</name></name></expr></argument>,

                                                            <argument pos:start="207:61" pos:end="207:64"><expr pos:start="207:61" pos:end="207:64"><name pos:start="207:61" pos:end="207:64">NULL</name></expr></argument>, <argument pos:start="207:67" pos:end="207:71"><expr pos:start="207:67" pos:end="207:71"><name pos:start="207:67" pos:end="207:71">graph</name></expr></argument>)</argument_list></call><operator pos:start="207:73" pos:end="207:73">)</operator> <operator pos:start="207:75" pos:end="207:75">&lt;</operator> <literal type="number" pos:start="207:77" pos:end="207:77">0</literal></expr>)</condition><block type="pseudo" pos:start="209:25" pos:end="209:35"><block_content pos:start="209:25" pos:end="209:35">

                        <return pos:start="209:25" pos:end="209:35">return <expr pos:start="209:32" pos:end="209:34"><name pos:start="209:32" pos:end="209:34">ret</name></expr>;</return></block_content></block></if></if_stmt>

                    <break pos:start="211:21" pos:end="211:26">break;</break>

                <default pos:start="213:17" pos:end="213:24">default:</default>

                    <return pos:start="215:21" pos:end="215:43">return <expr pos:start="215:28" pos:end="215:42"><call pos:start="215:28" pos:end="215:42"><name pos:start="215:28" pos:end="215:34">AVERROR</name><argument_list pos:start="215:35" pos:end="215:42">(<argument pos:start="215:36" pos:end="215:41"><expr pos:start="215:36" pos:end="215:41"><name pos:start="215:36" pos:end="215:41">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></switch>



                <if_stmt pos:start="221:17" pos:end="223:31"><if pos:start="221:17" pos:end="223:31">if <condition pos:start="221:20" pos:end="221:76">(<expr pos:start="221:21" pos:end="221:75"><operator pos:start="221:21" pos:end="221:21">(</operator><name pos:start="221:22" pos:end="221:24">ret</name> <operator pos:start="221:26" pos:end="221:26">=</operator> <call pos:start="221:28" pos:end="221:70"><name pos:start="221:28" pos:end="221:49">avfilter_insert_filter</name><argument_list pos:start="221:50" pos:end="221:70">(<argument pos:start="221:51" pos:end="221:54"><expr pos:start="221:51" pos:end="221:54"><name pos:start="221:51" pos:end="221:54">link</name></expr></argument>, <argument pos:start="221:57" pos:end="221:63"><expr pos:start="221:57" pos:end="221:63"><name pos:start="221:57" pos:end="221:63">convert</name></expr></argument>, <argument pos:start="221:66" pos:end="221:66"><expr pos:start="221:66" pos:end="221:66"><literal type="number" pos:start="221:66" pos:end="221:66">0</literal></expr></argument>, <argument pos:start="221:69" pos:end="221:69"><expr pos:start="221:69" pos:end="221:69"><literal type="number" pos:start="221:69" pos:end="221:69">0</literal></expr></argument>)</argument_list></call><operator pos:start="221:71" pos:end="221:71">)</operator> <operator pos:start="221:73" pos:end="221:73">&lt;</operator> <literal type="number" pos:start="221:75" pos:end="221:75">0</literal></expr>)</condition><block type="pseudo" pos:start="223:21" pos:end="223:31"><block_content pos:start="223:21" pos:end="223:31">

                    <return pos:start="223:21" pos:end="223:31">return <expr pos:start="223:28" pos:end="223:30"><name pos:start="223:28" pos:end="223:30">ret</name></expr>;</return></block_content></block></if></if_stmt>



                <expr_stmt pos:start="227:17" pos:end="227:46"><expr pos:start="227:17" pos:end="227:45"><call pos:start="227:17" pos:end="227:45"><name pos:start="227:17" pos:end="227:36">filter_query_formats</name><argument_list pos:start="227:37" pos:end="227:45">(<argument pos:start="227:38" pos:end="227:44"><expr pos:start="227:38" pos:end="227:44"><name pos:start="227:38" pos:end="227:44">convert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:45"><expr pos:start="229:17" pos:end="229:44"><name pos:start="229:17" pos:end="229:22">inlink</name>  <operator pos:start="229:25" pos:end="229:25">=</operator> <name pos:start="229:27" pos:end="229:44"><name pos:start="229:27" pos:end="229:33">convert</name><operator pos:start="229:34" pos:end="229:35">-&gt;</operator><name pos:start="229:36" pos:end="229:41">inputs</name><index pos:start="229:42" pos:end="229:44">[<expr pos:start="229:43" pos:end="229:43"><literal type="number" pos:start="229:43" pos:end="229:43">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:46"><expr pos:start="231:17" pos:end="231:45"><name pos:start="231:17" pos:end="231:23">outlink</name> <operator pos:start="231:25" pos:end="231:25">=</operator> <name pos:start="231:27" pos:end="231:45"><name pos:start="231:27" pos:end="231:33">convert</name><operator pos:start="231:34" pos:end="231:35">-&gt;</operator><name pos:start="231:36" pos:end="231:42">outputs</name><index pos:start="231:43" pos:end="231:45">[<expr pos:start="231:44" pos:end="231:44"><literal type="number" pos:start="231:44" pos:end="231:44">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <if_stmt pos:start="233:17" pos:end="237:43"><if pos:start="233:17" pos:end="237:43">if <condition pos:start="233:20" pos:end="235:96">(<expr pos:start="233:21" pos:end="235:95"><operator pos:start="233:21" pos:end="233:21">!</operator><call pos:start="233:22" pos:end="233:95"><name pos:start="233:22" pos:end="233:37">ff_merge_formats</name><argument_list pos:start="233:38" pos:end="233:95">( <argument pos:start="233:40" pos:end="233:57"><expr pos:start="233:40" pos:end="233:57"><name pos:start="233:40" pos:end="233:57"><name pos:start="233:40" pos:end="233:45">inlink</name><operator pos:start="233:46" pos:end="233:47">-&gt;</operator><name pos:start="233:48" pos:end="233:57">in_formats</name></name></expr></argument>,  <argument pos:start="233:61" pos:end="233:79"><expr pos:start="233:61" pos:end="233:79"><name pos:start="233:61" pos:end="233:79"><name pos:start="233:61" pos:end="233:66">inlink</name><operator pos:start="233:67" pos:end="233:68">-&gt;</operator><name pos:start="233:69" pos:end="233:79">out_formats</name></name></expr></argument>,  <argument pos:start="233:83" pos:end="233:94"><expr pos:start="233:83" pos:end="233:94"><name pos:start="233:83" pos:end="233:94"><name pos:start="233:83" pos:end="233:88">inlink</name><operator pos:start="233:89" pos:end="233:90">-&gt;</operator><name pos:start="233:91" pos:end="233:94">type</name></name></expr></argument>)</argument_list></call> <operator pos:start="233:97" pos:end="233:98">||</operator>

                    <operator pos:start="235:21" pos:end="235:21">!</operator><call pos:start="235:22" pos:end="235:95"><name pos:start="235:22" pos:end="235:37">ff_merge_formats</name><argument_list pos:start="235:38" pos:end="235:95">(<argument pos:start="235:39" pos:end="235:57"><expr pos:start="235:39" pos:end="235:57"><name pos:start="235:39" pos:end="235:57"><name pos:start="235:39" pos:end="235:45">outlink</name><operator pos:start="235:46" pos:end="235:47">-&gt;</operator><name pos:start="235:48" pos:end="235:57">in_formats</name></name></expr></argument>, <argument pos:start="235:60" pos:end="235:79"><expr pos:start="235:60" pos:end="235:79"><name pos:start="235:60" pos:end="235:79"><name pos:start="235:60" pos:end="235:66">outlink</name><operator pos:start="235:67" pos:end="235:68">-&gt;</operator><name pos:start="235:69" pos:end="235:79">out_formats</name></name></expr></argument>, <argument pos:start="235:82" pos:end="235:94"><expr pos:start="235:82" pos:end="235:94"><name pos:start="235:82" pos:end="235:94"><name pos:start="235:82" pos:end="235:88">outlink</name><operator pos:start="235:89" pos:end="235:90">-&gt;</operator><name pos:start="235:91" pos:end="235:94">type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="237:21" pos:end="237:43"><block_content pos:start="237:21" pos:end="237:43">

                    <expr_stmt pos:start="237:21" pos:end="237:43"><expr pos:start="237:21" pos:end="237:42"><name pos:start="237:21" pos:end="237:23">ret</name> <operator pos:start="237:25" pos:end="237:26">|=</operator> <call pos:start="237:28" pos:end="237:42"><name pos:start="237:28" pos:end="237:34">AVERROR</name><argument_list pos:start="237:35" pos:end="237:42">(<argument pos:start="237:36" pos:end="237:41"><expr pos:start="237:36" pos:end="237:41"><name pos:start="237:36" pos:end="237:41">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="239:17" pos:end="249:43"><if pos:start="239:17" pos:end="249:43">if <condition pos:start="239:20" pos:end="247:77">(<expr pos:start="239:21" pos:end="247:76"><name pos:start="239:21" pos:end="239:32"><name pos:start="239:21" pos:end="239:26">inlink</name><operator pos:start="239:27" pos:end="239:28">-&gt;</operator><name pos:start="239:29" pos:end="239:32">type</name></name> <operator pos:start="239:34" pos:end="239:35">==</operator> <name pos:start="239:37" pos:end="239:54">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="239:56" pos:end="239:57">&amp;&amp;</operator>

                    <operator pos:start="241:21" pos:end="241:21">(</operator><operator pos:start="241:22" pos:end="241:22">!</operator><call pos:start="241:23" pos:end="243:67"><name pos:start="241:23" pos:end="241:42">ff_merge_samplerates</name><argument_list pos:start="241:43" pos:end="243:67">(<argument pos:start="241:44" pos:end="241:65"><expr pos:start="241:44" pos:end="241:65"><name pos:start="241:44" pos:end="241:65"><name pos:start="241:44" pos:end="241:49">inlink</name><operator pos:start="241:50" pos:end="241:51">-&gt;</operator><name pos:start="241:52" pos:end="241:65">in_samplerates</name></name></expr></argument>,

                                           <argument pos:start="243:44" pos:end="243:66"><expr pos:start="243:44" pos:end="243:66"><name pos:start="243:44" pos:end="243:66"><name pos:start="243:44" pos:end="243:49">inlink</name><operator pos:start="243:50" pos:end="243:51">-&gt;</operator><name pos:start="243:52" pos:end="243:66">out_samplerates</name></name></expr></argument>)</argument_list></call> <operator pos:start="243:69" pos:end="243:70">||</operator>

                     <operator pos:start="245:22" pos:end="245:22">!</operator><call pos:start="245:23" pos:end="247:75"><name pos:start="245:23" pos:end="245:46">ff_merge_channel_layouts</name><argument_list pos:start="245:47" pos:end="247:75">(<argument pos:start="245:48" pos:end="245:73"><expr pos:start="245:48" pos:end="245:73"><name pos:start="245:48" pos:end="245:73"><name pos:start="245:48" pos:end="245:53">inlink</name><operator pos:start="245:54" pos:end="245:55">-&gt;</operator><name pos:start="245:56" pos:end="245:73">in_channel_layouts</name></name></expr></argument>,

                                               <argument pos:start="247:48" pos:end="247:74"><expr pos:start="247:48" pos:end="247:74"><name pos:start="247:48" pos:end="247:74"><name pos:start="247:48" pos:end="247:53">inlink</name><operator pos:start="247:54" pos:end="247:55">-&gt;</operator><name pos:start="247:56" pos:end="247:74">out_channel_layouts</name></name></expr></argument>)</argument_list></call><operator pos:start="247:76" pos:end="247:76">)</operator></expr>)</condition><block type="pseudo" pos:start="249:21" pos:end="249:43"><block_content pos:start="249:21" pos:end="249:43">

                    <expr_stmt pos:start="249:21" pos:end="249:43"><expr pos:start="249:21" pos:end="249:42"><name pos:start="249:21" pos:end="249:23">ret</name> <operator pos:start="249:25" pos:end="249:26">|=</operator> <call pos:start="249:28" pos:end="249:42"><name pos:start="249:28" pos:end="249:34">AVERROR</name><argument_list pos:start="249:35" pos:end="249:42">(<argument pos:start="249:36" pos:end="249:41"><expr pos:start="249:36" pos:end="249:41"><name pos:start="249:36" pos:end="249:41">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="251:17" pos:end="261:43"><if pos:start="251:17" pos:end="261:43">if <condition pos:start="251:20" pos:end="259:78">(<expr pos:start="251:21" pos:end="259:77"><name pos:start="251:21" pos:end="251:33"><name pos:start="251:21" pos:end="251:27">outlink</name><operator pos:start="251:28" pos:end="251:29">-&gt;</operator><name pos:start="251:30" pos:end="251:33">type</name></name> <operator pos:start="251:35" pos:end="251:36">==</operator> <name pos:start="251:38" pos:end="251:55">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="251:57" pos:end="251:58">&amp;&amp;</operator>

                    <operator pos:start="253:21" pos:end="253:21">(</operator><operator pos:start="253:22" pos:end="253:22">!</operator><call pos:start="253:23" pos:end="255:68"><name pos:start="253:23" pos:end="253:42">ff_merge_samplerates</name><argument_list pos:start="253:43" pos:end="255:68">(<argument pos:start="253:44" pos:end="253:66"><expr pos:start="253:44" pos:end="253:66"><name pos:start="253:44" pos:end="253:66"><name pos:start="253:44" pos:end="253:50">outlink</name><operator pos:start="253:51" pos:end="253:52">-&gt;</operator><name pos:start="253:53" pos:end="253:66">in_samplerates</name></name></expr></argument>,

                                           <argument pos:start="255:44" pos:end="255:67"><expr pos:start="255:44" pos:end="255:67"><name pos:start="255:44" pos:end="255:67"><name pos:start="255:44" pos:end="255:50">outlink</name><operator pos:start="255:51" pos:end="255:52">-&gt;</operator><name pos:start="255:53" pos:end="255:67">out_samplerates</name></name></expr></argument>)</argument_list></call> <operator pos:start="255:70" pos:end="255:71">||</operator>

                     <operator pos:start="257:22" pos:end="257:22">!</operator><call pos:start="257:23" pos:end="259:76"><name pos:start="257:23" pos:end="257:46">ff_merge_channel_layouts</name><argument_list pos:start="257:47" pos:end="259:76">(<argument pos:start="257:48" pos:end="257:74"><expr pos:start="257:48" pos:end="257:74"><name pos:start="257:48" pos:end="257:74"><name pos:start="257:48" pos:end="257:54">outlink</name><operator pos:start="257:55" pos:end="257:56">-&gt;</operator><name pos:start="257:57" pos:end="257:74">in_channel_layouts</name></name></expr></argument>,

                                               <argument pos:start="259:48" pos:end="259:75"><expr pos:start="259:48" pos:end="259:75"><name pos:start="259:48" pos:end="259:75"><name pos:start="259:48" pos:end="259:54">outlink</name><operator pos:start="259:55" pos:end="259:56">-&gt;</operator><name pos:start="259:57" pos:end="259:75">out_channel_layouts</name></name></expr></argument>)</argument_list></call><operator pos:start="259:77" pos:end="259:77">)</operator></expr>)</condition><block type="pseudo" pos:start="261:21" pos:end="261:43"><block_content pos:start="261:21" pos:end="261:43">

                    <expr_stmt pos:start="261:21" pos:end="261:43"><expr pos:start="261:21" pos:end="261:42"><name pos:start="261:21" pos:end="261:23">ret</name> <operator pos:start="261:25" pos:end="261:26">|=</operator> <call pos:start="261:28" pos:end="261:42"><name pos:start="261:28" pos:end="261:34">AVERROR</name><argument_list pos:start="261:35" pos:end="261:42">(<argument pos:start="261:36" pos:end="261:41"><expr pos:start="261:36" pos:end="261:41"><name pos:start="261:36" pos:end="261:41">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="265:17" pos:end="275:17"><if pos:start="265:17" pos:end="275:17">if <condition pos:start="265:20" pos:end="265:28">(<expr pos:start="265:21" pos:end="265:27"><name pos:start="265:21" pos:end="265:23">ret</name> <operator pos:start="265:25" pos:end="265:25">&lt;</operator> <literal type="number" pos:start="265:27" pos:end="265:27">0</literal></expr>)</condition> <block pos:start="265:30" pos:end="275:17">{<block_content pos:start="267:21" pos:end="273:31">

                    <expr_stmt pos:start="267:21" pos:end="271:91"><expr pos:start="267:21" pos:end="271:90"><call pos:start="267:21" pos:end="271:90"><name pos:start="267:21" pos:end="267:26">av_log</name><argument_list pos:start="267:27" pos:end="271:90">(<argument pos:start="267:28" pos:end="267:34"><expr pos:start="267:28" pos:end="267:34"><name pos:start="267:28" pos:end="267:34">log_ctx</name></expr></argument>, <argument pos:start="267:37" pos:end="267:48"><expr pos:start="267:37" pos:end="267:48"><name pos:start="267:37" pos:end="267:48">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="269:28" pos:end="271:55"><expr pos:start="269:28" pos:end="271:55"><literal type="string" pos:start="269:28" pos:end="269:95">"Impossible to convert between the formats supported by the filter "</literal>

                           <literal type="string" pos:start="271:28" pos:end="271:55">"'%s' and the filter '%s'\n"</literal></expr></argument>, <argument pos:start="271:58" pos:end="271:72"><expr pos:start="271:58" pos:end="271:72"><name pos:start="271:58" pos:end="271:72"><name pos:start="271:58" pos:end="271:61">link</name><operator pos:start="271:62" pos:end="271:63">-&gt;</operator><name pos:start="271:64" pos:end="271:66">src</name><operator pos:start="271:67" pos:end="271:68">-&gt;</operator><name pos:start="271:69" pos:end="271:72">name</name></name></expr></argument>, <argument pos:start="271:75" pos:end="271:89"><expr pos:start="271:75" pos:end="271:89"><name pos:start="271:75" pos:end="271:89"><name pos:start="271:75" pos:end="271:78">link</name><operator pos:start="271:79" pos:end="271:80">-&gt;</operator><name pos:start="271:81" pos:end="271:83">dst</name><operator pos:start="271:84" pos:end="271:85">-&gt;</operator><name pos:start="271:86" pos:end="271:89">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="273:21" pos:end="273:31">return <expr pos:start="273:28" pos:end="273:30"><name pos:start="273:28" pos:end="273:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <expr_stmt pos:start="285:5" pos:end="289:77"><expr pos:start="285:5" pos:end="289:76"><call pos:start="285:5" pos:end="289:76"><name pos:start="285:5" pos:end="285:10">av_log</name><argument_list pos:start="285:11" pos:end="289:76">(<argument pos:start="285:12" pos:end="285:16"><expr pos:start="285:12" pos:end="285:16"><name pos:start="285:12" pos:end="285:16">graph</name></expr></argument>, <argument pos:start="285:19" pos:end="285:30"><expr pos:start="285:19" pos:end="285:30"><name pos:start="285:19" pos:end="285:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="285:33" pos:end="287:65"><expr pos:start="285:33" pos:end="287:65"><literal type="string" pos:start="285:33" pos:end="285:49">"query_formats: "</literal>

           <literal type="string" pos:start="287:12" pos:end="287:65">"%d queried, %d merged, %d already done, %d delayed\n"</literal></expr></argument>,

           <argument pos:start="289:12" pos:end="289:24"><expr pos:start="289:12" pos:end="289:24"><name pos:start="289:12" pos:end="289:24">count_queried</name></expr></argument>, <argument pos:start="289:27" pos:end="289:38"><expr pos:start="289:27" pos:end="289:38"><name pos:start="289:27" pos:end="289:38">count_merged</name></expr></argument>, <argument pos:start="289:41" pos:end="289:60"><expr pos:start="289:41" pos:end="289:60"><name pos:start="289:41" pos:end="289:60">count_already_merged</name></expr></argument>, <argument pos:start="289:63" pos:end="289:75"><expr pos:start="289:63" pos:end="289:75"><name pos:start="289:63" pos:end="289:75">count_delayed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="291:5" pos:end="321:5"><if pos:start="291:5" pos:end="321:5">if <condition pos:start="291:8" pos:end="291:22">(<expr pos:start="291:9" pos:end="291:21"><name pos:start="291:9" pos:end="291:21">count_delayed</name></expr>)</condition> <block pos:start="291:24" pos:end="321:5">{<block_content pos:start="293:9" pos:end="319:28">

        <decl_stmt pos:start="293:9" pos:end="293:20"><decl pos:start="293:9" pos:end="293:19"><type pos:start="293:9" pos:end="293:16"><name pos:start="293:9" pos:end="293:16">AVBPrint</name></type> <name pos:start="293:18" pos:end="293:19">bp</name></decl>;</decl_stmt>



        <if_stmt pos:start="297:9" pos:end="299:35"><if pos:start="297:9" pos:end="299:35">if <condition pos:start="297:12" pos:end="297:42">(<expr pos:start="297:13" pos:end="297:41"><name pos:start="297:13" pos:end="297:25">count_queried</name> <operator pos:start="297:27" pos:end="297:28">||</operator> <name pos:start="297:30" pos:end="297:41">count_merged</name></expr>)</condition><block type="pseudo" pos:start="299:13" pos:end="299:35"><block_content pos:start="299:13" pos:end="299:35">

            <return pos:start="299:13" pos:end="299:35">return <expr pos:start="299:20" pos:end="299:34"><call pos:start="299:20" pos:end="299:34"><name pos:start="299:20" pos:end="299:26">AVERROR</name><argument_list pos:start="299:27" pos:end="299:34">(<argument pos:start="299:28" pos:end="299:33"><expr pos:start="299:28" pos:end="299:33"><name pos:start="299:28" pos:end="299:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:57"><expr pos:start="301:9" pos:end="301:56"><call pos:start="301:9" pos:end="301:56"><name pos:start="301:9" pos:end="301:22">av_bprint_init</name><argument_list pos:start="301:23" pos:end="301:56">(<argument pos:start="301:24" pos:end="301:26"><expr pos:start="301:24" pos:end="301:26"><operator pos:start="301:24" pos:end="301:24">&amp;</operator><name pos:start="301:25" pos:end="301:26">bp</name></expr></argument>, <argument pos:start="301:29" pos:end="301:29"><expr pos:start="301:29" pos:end="301:29"><literal type="number" pos:start="301:29" pos:end="301:29">0</literal></expr></argument>, <argument pos:start="301:32" pos:end="301:55"><expr pos:start="301:32" pos:end="301:55"><name pos:start="301:32" pos:end="301:55">AV_BPRINT_SIZE_AUTOMATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="303:9" pos:end="309:51">for <control pos:start="303:13" pos:end="303:47">(<init pos:start="303:14" pos:end="303:19"><expr pos:start="303:14" pos:end="303:18"><name pos:start="303:14" pos:end="303:14">i</name> <operator pos:start="303:16" pos:end="303:16">=</operator> <literal type="number" pos:start="303:18" pos:end="303:18">0</literal></expr>;</init> <condition pos:start="303:21" pos:end="303:42"><expr pos:start="303:21" pos:end="303:41"><name pos:start="303:21" pos:end="303:21">i</name> <operator pos:start="303:23" pos:end="303:23">&lt;</operator> <name pos:start="303:25" pos:end="303:41"><name pos:start="303:25" pos:end="303:29">graph</name><operator pos:start="303:30" pos:end="303:31">-&gt;</operator><name pos:start="303:32" pos:end="303:41">nb_filters</name></name></expr>;</condition> <incr pos:start="303:44" pos:end="303:46"><expr pos:start="303:44" pos:end="303:46"><name pos:start="303:44" pos:end="303:44">i</name><operator pos:start="303:45" pos:end="303:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="305:13" pos:end="309:51"><block_content pos:start="305:13" pos:end="309:51">

            <if_stmt pos:start="305:13" pos:end="309:51"><if pos:start="305:13" pos:end="309:51">if <condition pos:start="305:16" pos:end="305:53">(<expr pos:start="305:17" pos:end="305:52"><operator pos:start="305:17" pos:end="305:17">!</operator><call pos:start="305:18" pos:end="305:52"><name pos:start="305:18" pos:end="305:33">formats_declared</name><argument_list pos:start="305:34" pos:end="305:52">(<argument pos:start="305:35" pos:end="305:51"><expr pos:start="305:35" pos:end="305:51"><name pos:start="305:35" pos:end="305:51"><name pos:start="305:35" pos:end="305:39">graph</name><operator pos:start="305:40" pos:end="305:41">-&gt;</operator><name pos:start="305:42" pos:end="305:48">filters</name><index pos:start="305:49" pos:end="305:51">[<expr pos:start="305:50" pos:end="305:50"><name pos:start="305:50" pos:end="305:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="307:17" pos:end="309:51"><block_content pos:start="307:17" pos:end="309:51">

                <expr_stmt pos:start="307:17" pos:end="309:51"><expr pos:start="307:17" pos:end="309:50"><call pos:start="307:17" pos:end="309:50"><name pos:start="307:17" pos:end="307:26">av_bprintf</name><argument_list pos:start="307:27" pos:end="309:50">(<argument pos:start="307:28" pos:end="307:30"><expr pos:start="307:28" pos:end="307:30"><operator pos:start="307:28" pos:end="307:28">&amp;</operator><name pos:start="307:29" pos:end="307:30">bp</name></expr></argument>, <argument pos:start="307:33" pos:end="307:38"><expr pos:start="307:33" pos:end="307:38"><literal type="string" pos:start="307:33" pos:end="307:38">"%s%s"</literal></expr></argument>, <argument pos:start="307:41" pos:end="307:58"><expr pos:start="307:41" pos:end="307:58"><ternary pos:start="307:41" pos:end="307:58"><condition pos:start="307:41" pos:end="307:48"><expr pos:start="307:41" pos:end="307:46"><name pos:start="307:41" pos:end="307:46"><name pos:start="307:41" pos:end="307:42">bp</name><operator pos:start="307:43" pos:end="307:43">.</operator><name pos:start="307:44" pos:end="307:46">len</name></name></expr> ?</condition><then pos:start="307:50" pos:end="307:53"> <expr pos:start="307:50" pos:end="307:53"><literal type="string" pos:start="307:50" pos:end="307:53">", "</literal></expr> </then><else pos:start="307:55" pos:end="307:58">: <expr pos:start="307:57" pos:end="307:58"><literal type="string" pos:start="307:57" pos:end="307:58">""</literal></expr></else></ternary></expr></argument>,

                          <argument pos:start="309:27" pos:end="309:49"><expr pos:start="309:27" pos:end="309:49"><name pos:start="309:27" pos:end="309:43"><name pos:start="309:27" pos:end="309:31">graph</name><operator pos:start="309:32" pos:end="309:33">-&gt;</operator><name pos:start="309:34" pos:end="309:40">filters</name><index pos:start="309:41" pos:end="309:43">[<expr pos:start="309:42" pos:end="309:42"><name pos:start="309:42" pos:end="309:42">i</name></expr>]</index></name><operator pos:start="309:44" pos:end="309:45">-&gt;</operator><name pos:start="309:46" pos:end="309:49">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

        <expr_stmt pos:start="311:9" pos:end="317:36"><expr pos:start="311:9" pos:end="317:35"><call pos:start="311:9" pos:end="317:35"><name pos:start="311:9" pos:end="311:14">av_log</name><argument_list pos:start="311:15" pos:end="317:35">(<argument pos:start="311:16" pos:end="311:20"><expr pos:start="311:16" pos:end="311:20"><name pos:start="311:16" pos:end="311:20">graph</name></expr></argument>, <argument pos:start="311:23" pos:end="311:34"><expr pos:start="311:23" pos:end="311:34"><name pos:start="311:23" pos:end="311:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="313:16" pos:end="317:26"><expr pos:start="313:16" pos:end="317:26"><literal type="string" pos:start="313:16" pos:end="313:75">"The following filters could not choose their formats: %s\n"</literal>

               <literal type="string" pos:start="315:16" pos:end="315:77">"Consider inserting the (a)format filter near their input or "</literal>

               <literal type="string" pos:start="317:16" pos:end="317:26">"output.\n"</literal></expr></argument>, <argument pos:start="317:29" pos:end="317:34"><expr pos:start="317:29" pos:end="317:34"><name pos:start="317:29" pos:end="317:34"><name pos:start="317:29" pos:end="317:30">bp</name><operator pos:start="317:31" pos:end="317:31">.</operator><name pos:start="317:32" pos:end="317:34">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="319:9" pos:end="319:28">return <expr pos:start="319:16" pos:end="319:27"><call pos:start="319:16" pos:end="319:27"><name pos:start="319:16" pos:end="319:22">AVERROR</name><argument_list pos:start="319:23" pos:end="319:27">(<argument pos:start="319:24" pos:end="319:26"><expr pos:start="319:24" pos:end="319:26"><name pos:start="319:24" pos:end="319:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="323:5" pos:end="323:13">return <expr pos:start="323:12" pos:end="323:12"><literal type="number" pos:start="323:12" pos:end="323:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
