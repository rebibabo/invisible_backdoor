<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21220.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">read_matrix_params</name><parameter_list pos:start="1:30" pos:end="1:84">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:46">MLPDecodeContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">m</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:60">SubStream</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">s</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:83"><decl pos:start="1:66" pos:end="1:83"><type pos:start="1:66" pos:end="1:83"><name pos:start="1:66" pos:end="1:78">GetBitContext</name> <modifier pos:start="1:80" pos:end="1:80">*</modifier></type><name pos:start="1:81" pos:end="1:83">gbp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="89:1">{<block_content pos:start="5:5" pos:end="87:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:20">mat</name></decl>, <decl pos:start="5:23" pos:end="5:24"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:23" pos:end="5:24">ch</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:49"><expr pos:start="9:5" pos:end="9:48"><name pos:start="9:5" pos:end="9:29"><name pos:start="9:5" pos:end="9:5">s</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:29">num_primitive_matrices</name></name> <operator pos:start="9:31" pos:end="9:31">=</operator> <call pos:start="9:33" pos:end="9:48"><name pos:start="9:33" pos:end="9:40">get_bits</name><argument_list pos:start="9:41" pos:end="9:48">(<argument pos:start="9:42" pos:end="9:44"><expr pos:start="9:42" pos:end="9:44"><name pos:start="9:42" pos:end="9:44">gbp</name></expr></argument>, <argument pos:start="9:47" pos:end="9:47"><expr pos:start="9:47" pos:end="9:47"><literal type="number" pos:start="9:47" pos:end="9:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:24"><expr pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:5">m</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:21">matrix_changed</name></name><operator pos:start="11:22" pos:end="11:23">++</operator></expr>;</expr_stmt>



    <for pos:start="15:5" pos:end="83:5">for <control pos:start="15:9" pos:end="15:57">(<init pos:start="15:10" pos:end="15:17"><expr pos:start="15:10" pos:end="15:16"><name pos:start="15:10" pos:end="15:12">mat</name> <operator pos:start="15:14" pos:end="15:14">=</operator> <literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</init> <condition pos:start="15:19" pos:end="15:50"><expr pos:start="15:19" pos:end="15:49"><name pos:start="15:19" pos:end="15:21">mat</name> <operator pos:start="15:23" pos:end="15:23">&lt;</operator> <name pos:start="15:25" pos:end="15:49"><name pos:start="15:25" pos:end="15:25">s</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:49">num_primitive_matrices</name></name></expr>;</condition> <incr pos:start="15:52" pos:end="15:56"><expr pos:start="15:52" pos:end="15:56"><name pos:start="15:52" pos:end="15:54">mat</name><operator pos:start="15:55" pos:end="15:56">++</operator></expr></incr>)</control> <block pos:start="15:59" pos:end="83:5">{<block_content pos:start="17:9" pos:end="81:43">

        <decl_stmt pos:start="17:9" pos:end="17:32"><decl pos:start="17:9" pos:end="17:21"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:21">frac_bits</name></decl>, <decl pos:start="17:24" pos:end="17:31"><type ref="prev" pos:start="17:9" pos:end="17:11"/><name pos:start="17:24" pos:end="17:31">max_chan</name></decl>;</decl_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:49"><expr pos:start="19:9" pos:end="19:48"><name pos:start="19:9" pos:end="19:29"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:24">matrix_out_ch</name><index pos:start="19:25" pos:end="19:29">[<expr pos:start="19:26" pos:end="19:28"><name pos:start="19:26" pos:end="19:28">mat</name></expr>]</index></name> <operator pos:start="19:31" pos:end="19:31">=</operator> <call pos:start="19:33" pos:end="19:48"><name pos:start="19:33" pos:end="19:40">get_bits</name><argument_list pos:start="19:41" pos:end="19:48">(<argument pos:start="19:42" pos:end="19:44"><expr pos:start="19:42" pos:end="19:44"><name pos:start="19:42" pos:end="19:44">gbp</name></expr></argument>, <argument pos:start="19:47" pos:end="19:47"><expr pos:start="19:47" pos:end="19:47"><literal type="number" pos:start="19:47" pos:end="19:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:49"><expr pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:17">frac_bits</name>             <operator pos:start="21:31" pos:end="21:31">=</operator> <call pos:start="21:33" pos:end="21:48"><name pos:start="21:33" pos:end="21:40">get_bits</name><argument_list pos:start="21:41" pos:end="21:48">(<argument pos:start="21:42" pos:end="21:44"><expr pos:start="21:42" pos:end="21:44"><name pos:start="21:42" pos:end="21:44">gbp</name></expr></argument>, <argument pos:start="21:47" pos:end="21:47"><expr pos:start="21:47" pos:end="21:47"><literal type="number" pos:start="21:47" pos:end="21:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:21">lsb_bypass</name>   <index pos:start="23:25" pos:end="23:29">[<expr pos:start="23:26" pos:end="23:28"><name pos:start="23:26" pos:end="23:28">mat</name></expr>]</index></name> <operator pos:start="23:31" pos:end="23:31">=</operator> <call pos:start="23:33" pos:end="23:46"><name pos:start="23:33" pos:end="23:41">get_bits1</name><argument_list pos:start="23:42" pos:end="23:46">(<argument pos:start="23:43" pos:end="23:45"><expr pos:start="23:43" pos:end="23:45"><name pos:start="23:43" pos:end="23:45">gbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="27:9" pos:end="37:9"><if pos:start="27:9" pos:end="37:9">if <condition pos:start="27:12" pos:end="27:58">(<expr pos:start="27:13" pos:end="27:57"><name pos:start="27:13" pos:end="27:33"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:28">matrix_out_ch</name><index pos:start="27:29" pos:end="27:33">[<expr pos:start="27:30" pos:end="27:32"><name pos:start="27:30" pos:end="27:32">mat</name></expr>]</index></name> <operator pos:start="27:35" pos:end="27:35">&gt;</operator> <name pos:start="27:37" pos:end="27:57"><name pos:start="27:37" pos:end="27:37">s</name><operator pos:start="27:38" pos:end="27:39">-&gt;</operator><name pos:start="27:40" pos:end="27:57">max_matrix_channel</name></name></expr>)</condition> <block pos:start="27:60" pos:end="37:9">{<block_content pos:start="29:13" pos:end="35:22">

            <expr_stmt pos:start="29:13" pos:end="33:43"><expr pos:start="29:13" pos:end="33:42"><call pos:start="29:13" pos:end="33:42"><name pos:start="29:13" pos:end="29:18">av_log</name><argument_list pos:start="29:19" pos:end="33:42">(<argument pos:start="29:20" pos:end="29:27"><expr pos:start="29:20" pos:end="29:27"><name pos:start="29:20" pos:end="29:27"><name pos:start="29:20" pos:end="29:20">m</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:27">avctx</name></name></expr></argument>, <argument pos:start="29:30" pos:end="29:41"><expr pos:start="29:30" pos:end="29:41"><name pos:start="29:30" pos:end="29:41">AV_LOG_ERROR</name></expr></argument>,

                    <argument pos:start="31:21" pos:end="31:75"><expr pos:start="31:21" pos:end="31:75"><literal type="string" pos:start="31:21" pos:end="31:75">"Invalid channel %d specified as output from matrix.\n"</literal></expr></argument>,

                    <argument pos:start="33:21" pos:end="33:41"><expr pos:start="33:21" pos:end="33:41"><name pos:start="33:21" pos:end="33:41"><name pos:start="33:21" pos:end="33:21">s</name><operator pos:start="33:22" pos:end="33:23">-&gt;</operator><name pos:start="33:24" pos:end="33:36">matrix_out_ch</name><index pos:start="33:37" pos:end="33:41">[<expr pos:start="33:38" pos:end="33:40"><name pos:start="33:38" pos:end="33:40">mat</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:22">return <expr pos:start="35:20" pos:end="35:21"><operator pos:start="35:20" pos:end="35:20">-</operator><literal type="number" pos:start="35:21" pos:end="35:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:27">(<expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:21">frac_bits</name> <operator pos:start="39:23" pos:end="39:23">&gt;</operator> <literal type="number" pos:start="39:25" pos:end="39:26">14</literal></expr>)</condition> <block pos:start="39:29" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:22">

            <expr_stmt pos:start="41:13" pos:end="43:61"><expr pos:start="41:13" pos:end="43:60"><call pos:start="41:13" pos:end="43:60"><name pos:start="41:13" pos:end="41:18">av_log</name><argument_list pos:start="41:19" pos:end="43:60">(<argument pos:start="41:20" pos:end="41:27"><expr pos:start="41:20" pos:end="41:27"><name pos:start="41:20" pos:end="41:27"><name pos:start="41:20" pos:end="41:20">m</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:27">avctx</name></name></expr></argument>, <argument pos:start="41:30" pos:end="41:41"><expr pos:start="41:30" pos:end="41:41"><name pos:start="41:30" pos:end="41:41">AV_LOG_ERROR</name></expr></argument>,

                    <argument pos:start="43:21" pos:end="43:59"><expr pos:start="43:21" pos:end="43:59"><literal type="string" pos:start="43:21" pos:end="43:59">"Too many fractional bits specified.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:22">return <expr pos:start="45:20" pos:end="45:21"><operator pos:start="45:20" pos:end="45:20">-</operator><literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:41"><expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:16">max_chan</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <name pos:start="51:20" pos:end="51:40"><name pos:start="51:20" pos:end="51:20">s</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:40">max_matrix_channel</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="55:24"><if pos:start="53:9" pos:end="55:24">if <condition pos:start="53:12" pos:end="53:27">(<expr pos:start="53:13" pos:end="53:26"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:26"><name pos:start="53:14" pos:end="53:14">s</name><operator pos:start="53:15" pos:end="53:16">-&gt;</operator><name pos:start="53:17" pos:end="53:26">noise_type</name></name></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:24"><block_content pos:start="55:13" pos:end="55:24">

            <expr_stmt pos:start="55:13" pos:end="55:24"><expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:20">max_chan</name><operator pos:start="55:21" pos:end="55:22">+=</operator><literal type="number" pos:start="55:23" pos:end="55:23">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="59:9" pos:end="71:9">for <control pos:start="59:13" pos:end="59:42">(<init pos:start="59:14" pos:end="59:20"><expr pos:start="59:14" pos:end="59:19"><name pos:start="59:14" pos:end="59:15">ch</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr>;</init> <condition pos:start="59:22" pos:end="59:36"><expr pos:start="59:22" pos:end="59:35"><name pos:start="59:22" pos:end="59:23">ch</name> <operator pos:start="59:25" pos:end="59:26">&lt;=</operator> <name pos:start="59:28" pos:end="59:35">max_chan</name></expr>;</condition> <incr pos:start="59:38" pos:end="59:41"><expr pos:start="59:38" pos:end="59:41"><name pos:start="59:38" pos:end="59:39">ch</name><operator pos:start="59:40" pos:end="59:41">++</operator></expr></incr>)</control> <block pos:start="59:44" pos:end="71:9">{<block_content pos:start="61:13" pos:end="69:69">

            <decl_stmt pos:start="61:13" pos:end="61:30"><decl pos:start="61:13" pos:end="61:29"><type pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">int</name></type> <name pos:start="61:17" pos:end="61:25">coeff_val</name> <init pos:start="61:27" pos:end="61:29">= <expr pos:start="61:29" pos:end="61:29"><literal type="number" pos:start="61:29" pos:end="61:29">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="63:13" pos:end="65:58"><if pos:start="63:13" pos:end="65:58">if <condition pos:start="63:16" pos:end="63:31">(<expr pos:start="63:17" pos:end="63:30"><call pos:start="63:17" pos:end="63:30"><name pos:start="63:17" pos:end="63:25">get_bits1</name><argument_list pos:start="63:26" pos:end="63:30">(<argument pos:start="63:27" pos:end="63:29"><expr pos:start="63:27" pos:end="63:29"><name pos:start="63:27" pos:end="63:29">gbp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:58"><block_content pos:start="65:17" pos:end="65:58">

                <expr_stmt pos:start="65:17" pos:end="65:58"><expr pos:start="65:17" pos:end="65:57"><name pos:start="65:17" pos:end="65:25">coeff_val</name> <operator pos:start="65:27" pos:end="65:27">=</operator> <call pos:start="65:29" pos:end="65:57"><name pos:start="65:29" pos:end="65:37">get_sbits</name><argument_list pos:start="65:38" pos:end="65:57">(<argument pos:start="65:39" pos:end="65:41"><expr pos:start="65:39" pos:end="65:41"><name pos:start="65:39" pos:end="65:41">gbp</name></expr></argument>, <argument pos:start="65:44" pos:end="65:56"><expr pos:start="65:44" pos:end="65:56"><name pos:start="65:44" pos:end="65:52">frac_bits</name> <operator pos:start="65:54" pos:end="65:54">+</operator> <literal type="number" pos:start="65:56" pos:end="65:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="69:13" pos:end="69:69"><expr pos:start="69:13" pos:end="69:68"><name pos:start="69:13" pos:end="69:36"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:27">matrix_coeff</name><index pos:start="69:28" pos:end="69:32">[<expr pos:start="69:29" pos:end="69:31"><name pos:start="69:29" pos:end="69:31">mat</name></expr>]</index><index pos:start="69:33" pos:end="69:36">[<expr pos:start="69:34" pos:end="69:35"><name pos:start="69:34" pos:end="69:35">ch</name></expr>]</index></name> <operator pos:start="69:38" pos:end="69:38">=</operator> <name pos:start="69:40" pos:end="69:48">coeff_val</name> <operator pos:start="69:50" pos:end="69:51">&lt;&lt;</operator> <operator pos:start="69:53" pos:end="69:53">(</operator><literal type="number" pos:start="69:54" pos:end="69:57">14</literal> <operator pos:start="69:57" pos:end="69:57">-</operator> <name pos:start="69:59" pos:end="69:67">frac_bits</name><operator pos:start="69:68" pos:end="69:68">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="75:9" pos:end="81:43"><if pos:start="75:9" pos:end="77:58">if <condition pos:start="75:12" pos:end="75:26">(<expr pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:13">s</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:25">noise_type</name></name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:58"><block_content pos:start="77:13" pos:end="77:58">

            <expr_stmt pos:start="77:13" pos:end="77:58"><expr pos:start="77:13" pos:end="77:57"><name pos:start="77:13" pos:end="77:38"><name pos:start="77:13" pos:end="77:13">s</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:33">matrix_noise_shift</name><index pos:start="77:34" pos:end="77:38">[<expr pos:start="77:35" pos:end="77:37"><name pos:start="77:35" pos:end="77:37">mat</name></expr>]</index></name> <operator pos:start="77:40" pos:end="77:40">=</operator> <call pos:start="77:42" pos:end="77:57"><name pos:start="77:42" pos:end="77:49">get_bits</name><argument_list pos:start="77:50" pos:end="77:57">(<argument pos:start="77:51" pos:end="77:53"><expr pos:start="77:51" pos:end="77:53"><name pos:start="77:51" pos:end="77:53">gbp</name></expr></argument>, <argument pos:start="77:56" pos:end="77:56"><expr pos:start="77:56" pos:end="77:56"><literal type="number" pos:start="77:56" pos:end="77:56">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="79:9" pos:end="81:43">else<block type="pseudo" pos:start="81:13" pos:end="81:43"><block_content pos:start="81:13" pos:end="81:43">

            <expr_stmt pos:start="81:13" pos:end="81:43"><expr pos:start="81:13" pos:end="81:42"><name pos:start="81:13" pos:end="81:38"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:33">matrix_noise_shift</name><index pos:start="81:34" pos:end="81:38">[<expr pos:start="81:35" pos:end="81:37"><name pos:start="81:35" pos:end="81:37">mat</name></expr>]</index></name> <operator pos:start="81:40" pos:end="81:40">=</operator> <literal type="number" pos:start="81:42" pos:end="81:42">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>



    <return pos:start="87:5" pos:end="87:13">return <expr pos:start="87:12" pos:end="87:12"><literal type="number" pos:start="87:12" pos:end="87:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
