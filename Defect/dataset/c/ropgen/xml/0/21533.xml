<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21533.c" pos:tabs="8"><macro pos:start="1:1" pos:end="7:70"><name pos:start="1:1" pos:end="1:17">mips_mipssim_init</name> <argument_list pos:start="1:19" pos:end="7:70">(<argument pos:start="1:20" pos:end="1:38">ram_addr_t ram_size</argument>, <argument pos:start="1:41" pos:end="1:56">int vga_ram_size</argument>,

                   <argument pos:start="3:20" pos:end="3:42">const char *boot_device</argument>, <argument pos:start="3:45" pos:end="3:60">DisplayState *ds</argument>,

                   <argument pos:start="5:20" pos:end="5:46">const char *kernel_filename</argument>, <argument pos:start="5:49" pos:end="5:74">const char *kernel_cmdline</argument>,

                   <argument pos:start="7:20" pos:end="7:46">const char *initrd_filename</argument>, <argument pos:start="7:49" pos:end="7:69">const char *cpu_model</argument>)</argument_list></macro>

<block pos:start="9:1" pos:end="163:1">{<block_content pos:start="11:5" pos:end="161:5">

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:12">buf</name><index pos:start="11:13" pos:end="11:18">[<expr pos:start="11:14" pos:end="11:17"><literal type="number" pos:start="11:14" pos:end="11:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">long</name></type> <name pos:start="13:19" pos:end="13:29">bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">bios_size</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:20">/* Init CPUs. */</comment>

    <if_stmt pos:start="23:5" pos:end="35:5"><if pos:start="23:5" pos:end="35:5">if <condition pos:start="23:8" pos:end="23:26">(<expr pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:17">cpu_model</name> <operator pos:start="23:19" pos:end="23:20">==</operator> <name pos:start="23:22" pos:end="23:25">NULL</name></expr>)</condition> <block pos:start="23:28" pos:end="35:5">{<block_content pos:start="27:9" pos:end="34:0">

<cpp:ifdef pos:start="25:1" pos:end="25:20">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:20">TARGET_MIPS64</name></cpp:ifdef>

        <expr_stmt pos:start="27:9" pos:end="30:0"><expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:17">cpu_model</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="string" pos:start="27:21" pos:end="27:25">"5Kf"</literal></expr>;</expr_stmt>

<cpp:else pos:start="29:1" pos:end="29:5">#<cpp:directive pos:start="29:2" pos:end="29:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="31:9" pos:end="34:0"><expr pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:17">cpu_model</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <literal type="string" pos:start="31:21" pos:end="31:26">"24Kf"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:7">env</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:29"><name pos:start="37:11" pos:end="37:18">cpu_init</name><argument_list pos:start="37:19" pos:end="37:29">(<argument pos:start="37:20" pos:end="37:28"><expr pos:start="37:20" pos:end="37:28"><name pos:start="37:20" pos:end="37:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:13">(<expr pos:start="39:9" pos:end="39:12"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:12">env</name></expr>)</condition> <block pos:start="39:15" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:16">

        <expr_stmt pos:start="41:9" pos:end="41:59"><expr pos:start="41:9" pos:end="41:58"><call pos:start="41:9" pos:end="41:58"><name pos:start="41:9" pos:end="41:15">fprintf</name><argument_list pos:start="41:16" pos:end="41:58">(<argument pos:start="41:17" pos:end="41:22"><expr pos:start="41:17" pos:end="41:22"><name pos:start="41:17" pos:end="41:22">stderr</name></expr></argument>, <argument pos:start="41:25" pos:end="41:57"><expr pos:start="41:25" pos:end="41:57"><literal type="string" pos:start="41:25" pos:end="41:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:16"><expr pos:start="43:9" pos:end="43:15"><call pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:12">exit</name><argument_list pos:start="43:13" pos:end="43:15">(<argument pos:start="43:14" pos:end="43:14"><expr pos:start="43:14" pos:end="43:14"><literal type="number" pos:start="43:14" pos:end="43:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:45"><expr pos:start="47:5" pos:end="47:44"><call pos:start="47:5" pos:end="47:44"><name pos:start="47:5" pos:end="47:23">qemu_register_reset</name><argument_list pos:start="47:24" pos:end="47:44">(<argument pos:start="47:25" pos:end="47:38"><expr pos:start="47:25" pos:end="47:38"><name pos:start="47:25" pos:end="47:38">main_cpu_reset</name></expr></argument>, <argument pos:start="47:41" pos:end="47:43"><expr pos:start="47:41" pos:end="47:43"><name pos:start="47:41" pos:end="47:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:23">/* Allocate RAM. */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:58"><expr pos:start="53:5" pos:end="53:57"><call pos:start="53:5" pos:end="53:57"><name pos:start="53:5" pos:end="53:32">cpu_register_physical_memory</name><argument_list pos:start="53:33" pos:end="53:57">(<argument pos:start="53:34" pos:end="53:34"><expr pos:start="53:34" pos:end="53:34"><literal type="number" pos:start="53:34" pos:end="53:34">0</literal></expr></argument>, <argument pos:start="53:37" pos:end="53:44"><expr pos:start="53:37" pos:end="53:44"><name pos:start="53:37" pos:end="53:44">ram_size</name></expr></argument>, <argument pos:start="53:47" pos:end="53:56"><expr pos:start="53:47" pos:end="53:56"><name pos:start="53:47" pos:end="53:56">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:53">/* Load a BIOS / boot exception handler image. */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:42"><expr pos:start="59:5" pos:end="59:41"><name pos:start="59:5" pos:end="59:15">bios_offset</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <name pos:start="59:19" pos:end="59:26">ram_size</name> <operator pos:start="59:28" pos:end="59:28">+</operator> <name pos:start="59:30" pos:end="59:41">vga_ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="63:34"><if pos:start="61:5" pos:end="63:34">if <condition pos:start="61:8" pos:end="61:26">(<expr pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:17">bios_name</name> <operator pos:start="61:19" pos:end="61:20">==</operator> <name pos:start="61:22" pos:end="61:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:34"><block_content pos:start="63:9" pos:end="63:34">

        <expr_stmt pos:start="63:9" pos:end="63:34"><expr pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:17">bios_name</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <name pos:start="63:21" pos:end="63:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:61"><expr pos:start="65:5" pos:end="65:60"><call pos:start="65:5" pos:end="65:60"><name pos:start="65:5" pos:end="65:12">snprintf</name><argument_list pos:start="65:13" pos:end="65:60">(<argument pos:start="65:14" pos:end="65:16"><expr pos:start="65:14" pos:end="65:16"><name pos:start="65:14" pos:end="65:16">buf</name></expr></argument>, <argument pos:start="65:19" pos:end="65:29"><expr pos:start="65:19" pos:end="65:29"><sizeof pos:start="65:19" pos:end="65:29">sizeof<argument_list pos:start="65:25" pos:end="65:29">(<argument pos:start="65:26" pos:end="65:28"><expr pos:start="65:26" pos:end="65:28"><name pos:start="65:26" pos:end="65:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="65:32" pos:end="65:38"><expr pos:start="65:32" pos:end="65:38"><literal type="string" pos:start="65:32" pos:end="65:38">"%s/%s"</literal></expr></argument>, <argument pos:start="65:41" pos:end="65:48"><expr pos:start="65:41" pos:end="65:48"><name pos:start="65:41" pos:end="65:48">bios_dir</name></expr></argument>, <argument pos:start="65:51" pos:end="65:59"><expr pos:start="65:51" pos:end="65:59"><name pos:start="65:51" pos:end="65:59">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:61"><expr pos:start="67:5" pos:end="67:60"><name pos:start="67:5" pos:end="67:13">bios_size</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <call pos:start="67:17" pos:end="67:60"><name pos:start="67:17" pos:end="67:26">load_image</name><argument_list pos:start="67:27" pos:end="67:60">(<argument pos:start="67:28" pos:end="67:30"><expr pos:start="67:28" pos:end="67:30"><name pos:start="67:28" pos:end="67:30">buf</name></expr></argument>, <argument pos:start="67:33" pos:end="67:59"><expr pos:start="67:33" pos:end="67:59"><name pos:start="67:33" pos:end="67:45">phys_ram_base</name> <operator pos:start="67:47" pos:end="67:47">+</operator> <name pos:start="67:49" pos:end="67:59">bios_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="93:5"><if pos:start="69:5" pos:end="81:5">if <condition pos:start="69:8" pos:end="69:69">(<expr pos:start="69:9" pos:end="69:68"><operator pos:start="69:9" pos:end="69:9">(</operator><name pos:start="69:10" pos:end="69:37"><name pos:start="69:10" pos:end="69:18">bios_size</name> <argument_list type="generic" pos:start="69:20" pos:end="69:37">&lt; <argument pos:start="69:22" pos:end="69:35"><expr pos:start="69:22" pos:end="69:35"><literal type="number" pos:start="69:22" pos:end="69:22">0</literal> <operator pos:start="69:24" pos:end="69:25">||</operator> <name pos:start="69:27" pos:end="69:35">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="69:39" pos:end="69:47">BIOS_SIZE</name><operator pos:start="69:48" pos:end="69:48">)</operator> <operator pos:start="69:50" pos:end="69:51">&amp;&amp;</operator> <operator pos:start="69:53" pos:end="69:53">!</operator><name pos:start="69:54" pos:end="69:68">kernel_filename</name></expr>)</condition> <block pos:start="69:71" pos:end="81:5">{<block_content pos:start="73:9" pos:end="79:16">

        <comment type="block" pos:start="71:9" pos:end="71:78">/* Bail out if we have neither a kernel image nor boot vector code. */</comment>

        <expr_stmt pos:start="73:9" pos:end="77:21"><expr pos:start="73:9" pos:end="77:20"><call pos:start="73:9" pos:end="77:20"><name pos:start="73:9" pos:end="73:15">fprintf</name><argument_list pos:start="73:16" pos:end="77:20">(<argument pos:start="73:17" pos:end="73:22"><expr pos:start="73:17" pos:end="73:22"><name pos:start="73:17" pos:end="73:22">stderr</name></expr></argument>,

                <argument pos:start="75:17" pos:end="75:94"><expr pos:start="75:17" pos:end="75:94"><literal type="string" pos:start="75:17" pos:end="75:94">"qemu: Could not load MIPS bios '%s', and no -kernel argument was specified\n"</literal></expr></argument>,

                <argument pos:start="77:17" pos:end="77:19"><expr pos:start="77:17" pos:end="77:19"><name pos:start="77:17" pos:end="77:19">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:16"><expr pos:start="79:9" pos:end="79:15"><call pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:12">exit</name><argument_list pos:start="79:13" pos:end="79:15">(<argument pos:start="79:14" pos:end="79:14"><expr pos:start="79:14" pos:end="79:14"><literal type="number" pos:start="79:14" pos:end="79:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="93:5">else <block pos:start="81:12" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:61">

        <comment type="block" pos:start="83:9" pos:end="83:52">/* Map the BIOS / boot exception handler. */</comment>

        <expr_stmt pos:start="85:9" pos:end="87:74"><expr pos:start="85:9" pos:end="87:73"><call pos:start="85:9" pos:end="87:73"><name pos:start="85:9" pos:end="85:36">cpu_register_physical_memory</name><argument_list pos:start="85:37" pos:end="87:73">(<argument pos:start="85:38" pos:end="85:49"><expr pos:start="85:38" pos:end="85:49"><literal type="number" pos:start="85:38" pos:end="85:49">0x1fc00000LL</literal></expr></argument>,

                                     <argument pos:start="87:38" pos:end="87:46"><expr pos:start="87:38" pos:end="87:46"><name pos:start="87:38" pos:end="87:46">bios_size</name></expr></argument>, <argument pos:start="87:49" pos:end="87:72"><expr pos:start="87:49" pos:end="87:72"><name pos:start="87:49" pos:end="87:59">bios_offset</name> <operator pos:start="87:61" pos:end="87:61">|</operator> <name pos:start="87:63" pos:end="87:72">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="89:9" pos:end="89:50">/* We have a boot vector start address. */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:61"><expr pos:start="91:9" pos:end="91:60"><name pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:11">env</name><operator pos:start="91:12" pos:end="91:13">-&gt;</operator><name pos:start="91:14" pos:end="91:22">active_tc</name><operator pos:start="91:23" pos:end="91:23">.</operator><name pos:start="91:24" pos:end="91:25">PC</name></name> <operator pos:start="91:27" pos:end="91:27">=</operator> <operator pos:start="91:29" pos:end="91:29">(</operator><name pos:start="91:30" pos:end="91:40">target_long</name><operator pos:start="91:41" pos:end="91:41">)</operator><operator pos:start="91:42" pos:end="91:42">(</operator><name pos:start="91:43" pos:end="91:49">int32_t</name><operator pos:start="91:50" pos:end="91:50">)</operator><literal type="number" pos:start="91:51" pos:end="91:60">0xbfc00000</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="97:5" pos:end="109:5"><if pos:start="97:5" pos:end="109:5">if <condition pos:start="97:8" pos:end="97:24">(<expr pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:23">kernel_filename</name></expr>)</condition> <block pos:start="97:26" pos:end="109:5">{<block_content pos:start="99:9" pos:end="107:25">

        <expr_stmt pos:start="99:9" pos:end="99:41"><expr pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:29"><name pos:start="99:9" pos:end="99:20">loaderparams</name><operator pos:start="99:21" pos:end="99:21">.</operator><name pos:start="99:22" pos:end="99:29">ram_size</name></name> <operator pos:start="99:31" pos:end="99:31">=</operator> <name pos:start="99:33" pos:end="99:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:55"><expr pos:start="101:9" pos:end="101:54"><name pos:start="101:9" pos:end="101:36"><name pos:start="101:9" pos:end="101:20">loaderparams</name><operator pos:start="101:21" pos:end="101:21">.</operator><name pos:start="101:22" pos:end="101:36">kernel_filename</name></name> <operator pos:start="101:38" pos:end="101:38">=</operator> <name pos:start="101:40" pos:end="101:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:53"><expr pos:start="103:9" pos:end="103:52"><name pos:start="103:9" pos:end="103:35"><name pos:start="103:9" pos:end="103:20">loaderparams</name><operator pos:start="103:21" pos:end="103:21">.</operator><name pos:start="103:22" pos:end="103:35">kernel_cmdline</name></name> <operator pos:start="103:37" pos:end="103:37">=</operator> <name pos:start="103:39" pos:end="103:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:55"><expr pos:start="105:9" pos:end="105:54"><name pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:20">loaderparams</name><operator pos:start="105:21" pos:end="105:21">.</operator><name pos:start="105:22" pos:end="105:36">initrd_filename</name></name> <operator pos:start="105:38" pos:end="105:38">=</operator> <name pos:start="105:40" pos:end="105:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:25"><expr pos:start="107:9" pos:end="107:24"><call pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:19">load_kernel</name><argument_list pos:start="107:20" pos:end="107:24">(<argument pos:start="107:21" pos:end="107:23"><expr pos:start="107:21" pos:end="107:23"><name pos:start="107:21" pos:end="107:23">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:36">/* Init CPU internal devices. */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:31"><expr pos:start="115:5" pos:end="115:30"><call pos:start="115:5" pos:end="115:30"><name pos:start="115:5" pos:end="115:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="115:26" pos:end="115:30">(<argument pos:start="115:27" pos:end="115:29"><expr pos:start="115:27" pos:end="115:29"><name pos:start="115:27" pos:end="115:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:29"><expr pos:start="117:5" pos:end="117:28"><call pos:start="117:5" pos:end="117:28"><name pos:start="117:5" pos:end="117:23">cpu_mips_clock_init</name><argument_list pos:start="117:24" pos:end="117:28">(<argument pos:start="117:25" pos:end="117:27"><expr pos:start="117:25" pos:end="117:27"><name pos:start="117:25" pos:end="117:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:55">/* Register 64 KB of ISA IO space at 0x1fd00000. */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:42"><expr pos:start="123:5" pos:end="123:41"><call pos:start="123:5" pos:end="123:41"><name pos:start="123:5" pos:end="123:17">isa_mmio_init</name><argument_list pos:start="123:18" pos:end="123:41">(<argument pos:start="123:19" pos:end="123:28"><expr pos:start="123:19" pos:end="123:28"><literal type="number" pos:start="123:19" pos:end="123:28">0x1fd00000</literal></expr></argument>, <argument pos:start="123:31" pos:end="123:40"><expr pos:start="123:31" pos:end="123:40"><literal type="number" pos:start="123:31" pos:end="123:40">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="129:46">/* A single 16450 sits at offset 0x3f8. It is attached to

       MIPS CPU INT2, which is interrupt 4. */</comment>

    <if_stmt pos:start="131:5" pos:end="133:63"><if pos:start="131:5" pos:end="133:63">if <condition pos:start="131:8" pos:end="131:22">(<expr pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:18">serial_hds</name><index pos:start="131:19" pos:end="131:21">[<expr pos:start="131:20" pos:end="131:20"><literal type="number" pos:start="131:20" pos:end="131:20">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:63"><block_content pos:start="133:9" pos:end="133:63">

        <expr_stmt pos:start="133:9" pos:end="133:63"><expr pos:start="133:9" pos:end="133:62"><call pos:start="133:9" pos:end="133:62"><name pos:start="133:9" pos:end="133:19">serial_init</name><argument_list pos:start="133:20" pos:end="133:62">(<argument pos:start="133:21" pos:end="133:25"><expr pos:start="133:21" pos:end="133:25"><literal type="number" pos:start="133:21" pos:end="133:25">0x3f8</literal></expr></argument>, <argument pos:start="133:28" pos:end="133:38"><expr pos:start="133:28" pos:end="133:38"><name pos:start="133:28" pos:end="133:38"><name pos:start="133:28" pos:end="133:30">env</name><operator pos:start="133:31" pos:end="133:32">-&gt;</operator><name pos:start="133:33" pos:end="133:35">irq</name><index pos:start="133:36" pos:end="133:38">[<expr pos:start="133:37" pos:end="133:37"><literal type="number" pos:start="133:37" pos:end="133:37">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="133:41" pos:end="133:46"><expr pos:start="133:41" pos:end="133:46"><literal type="number" pos:start="133:41" pos:end="133:46">115200</literal></expr></argument>, <argument pos:start="133:49" pos:end="133:61"><expr pos:start="133:49" pos:end="133:61"><name pos:start="133:49" pos:end="133:61"><name pos:start="133:49" pos:end="133:58">serial_hds</name><index pos:start="133:59" pos:end="133:61">[<expr pos:start="133:60" pos:end="133:60"><literal type="number" pos:start="133:60" pos:end="133:60">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="161:5"><if pos:start="137:5" pos:end="161:5">if <condition pos:start="137:8" pos:end="137:25">(<expr pos:start="137:9" pos:end="137:24"><name pos:start="137:9" pos:end="137:19"><name pos:start="137:9" pos:end="137:16">nd_table</name><index pos:start="137:17" pos:end="137:19">[<expr pos:start="137:18" pos:end="137:18"><literal type="number" pos:start="137:18" pos:end="137:18">0</literal></expr>]</index></name><operator pos:start="137:20" pos:end="137:20">.</operator><name pos:start="137:21" pos:end="137:24">vlan</name></expr>)</condition> <block pos:start="137:27" pos:end="161:5">{<block_content pos:start="139:9" pos:end="159:9">

        <if_stmt pos:start="139:9" pos:end="159:9"><if pos:start="139:9" pos:end="147:9">if <condition pos:start="139:12" pos:end="141:57">(<expr pos:start="139:13" pos:end="141:56"><name pos:start="139:13" pos:end="139:23"><name pos:start="139:13" pos:end="139:20">nd_table</name><index pos:start="139:21" pos:end="139:23">[<expr pos:start="139:22" pos:end="139:22"><literal type="number" pos:start="139:22" pos:end="139:22">0</literal></expr>]</index></name><operator pos:start="139:24" pos:end="139:24">.</operator><name pos:start="139:25" pos:end="139:29">model</name> <operator pos:start="139:31" pos:end="139:32">==</operator> <name pos:start="139:34" pos:end="139:37">NULL</name>

            <operator pos:start="141:13" pos:end="141:14">||</operator> <call pos:start="141:16" pos:end="141:51"><name pos:start="141:16" pos:end="141:21">strcmp</name><argument_list pos:start="141:22" pos:end="141:51">(<argument pos:start="141:23" pos:end="141:39"><expr pos:start="141:23" pos:end="141:39"><name pos:start="141:23" pos:end="141:33"><name pos:start="141:23" pos:end="141:30">nd_table</name><index pos:start="141:31" pos:end="141:33">[<expr pos:start="141:32" pos:end="141:32"><literal type="number" pos:start="141:32" pos:end="141:32">0</literal></expr>]</index></name><operator pos:start="141:34" pos:end="141:34">.</operator><name pos:start="141:35" pos:end="141:39">model</name></expr></argument>, <argument pos:start="141:42" pos:end="141:50"><expr pos:start="141:42" pos:end="141:50"><literal type="string" pos:start="141:42" pos:end="141:50">"mipsnet"</literal></expr></argument>)</argument_list></call> <operator pos:start="141:53" pos:end="141:54">==</operator> <literal type="number" pos:start="141:56" pos:end="141:56">0</literal></expr>)</condition> <block pos:start="141:59" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:60">

            <comment type="block" pos:start="143:13" pos:end="143:71">/* MIPSnet uses the MIPS CPU INT0, which is interrupt 2. */</comment>

            <expr_stmt pos:start="145:13" pos:end="145:60"><expr pos:start="145:13" pos:end="145:59"><call pos:start="145:13" pos:end="145:59"><name pos:start="145:13" pos:end="145:24">mipsnet_init</name><argument_list pos:start="145:25" pos:end="145:59">(<argument pos:start="145:26" pos:end="145:31"><expr pos:start="145:26" pos:end="145:31"><literal type="number" pos:start="145:26" pos:end="145:31">0x4200</literal></expr></argument>, <argument pos:start="145:34" pos:end="145:44"><expr pos:start="145:34" pos:end="145:44"><name pos:start="145:34" pos:end="145:44"><name pos:start="145:34" pos:end="145:36">env</name><operator pos:start="145:37" pos:end="145:38">-&gt;</operator><name pos:start="145:39" pos:end="145:41">irq</name><index pos:start="145:42" pos:end="145:44">[<expr pos:start="145:43" pos:end="145:43"><literal type="number" pos:start="145:43" pos:end="145:43">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="145:47" pos:end="145:58"><expr pos:start="145:47" pos:end="145:58"><operator pos:start="145:47" pos:end="145:47">&amp;</operator><name pos:start="145:48" pos:end="145:58"><name pos:start="145:48" pos:end="145:55">nd_table</name><index pos:start="145:56" pos:end="145:58">[<expr pos:start="145:57" pos:end="145:57"><literal type="number" pos:start="145:57" pos:end="145:57">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="147:11" pos:end="153:9">else if <condition pos:start="147:19" pos:end="147:55">(<expr pos:start="147:20" pos:end="147:54"><call pos:start="147:20" pos:end="147:49"><name pos:start="147:20" pos:end="147:25">strcmp</name><argument_list pos:start="147:26" pos:end="147:49">(<argument pos:start="147:27" pos:end="147:43"><expr pos:start="147:27" pos:end="147:43"><name pos:start="147:27" pos:end="147:37"><name pos:start="147:27" pos:end="147:34">nd_table</name><index pos:start="147:35" pos:end="147:37">[<expr pos:start="147:36" pos:end="147:36"><literal type="number" pos:start="147:36" pos:end="147:36">0</literal></expr>]</index></name><operator pos:start="147:38" pos:end="147:38">.</operator><name pos:start="147:39" pos:end="147:43">model</name></expr></argument>, <argument pos:start="147:46" pos:end="147:48"><expr pos:start="147:46" pos:end="147:48"><literal type="string" pos:start="147:46" pos:end="147:48">"?"</literal></expr></argument>)</argument_list></call> <operator pos:start="147:51" pos:end="147:52">==</operator> <literal type="number" pos:start="147:54" pos:end="147:54">0</literal></expr>)</condition> <block pos:start="147:57" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:21">

            <expr_stmt pos:start="149:13" pos:end="149:63"><expr pos:start="149:13" pos:end="149:62"><call pos:start="149:13" pos:end="149:62"><name pos:start="149:13" pos:end="149:19">fprintf</name><argument_list pos:start="149:20" pos:end="149:62">(<argument pos:start="149:21" pos:end="149:26"><expr pos:start="149:21" pos:end="149:26"><name pos:start="149:21" pos:end="149:26">stderr</name></expr></argument>, <argument pos:start="149:29" pos:end="149:61"><expr pos:start="149:29" pos:end="149:61"><literal type="string" pos:start="149:29" pos:end="149:61">"qemu: Supported NICs: mipsnet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:21"><expr pos:start="151:13" pos:end="151:20"><call pos:start="151:13" pos:end="151:20"><name pos:start="151:13" pos:end="151:16">exit</name> <argument_list pos:start="151:18" pos:end="151:20">(<argument pos:start="151:19" pos:end="151:19"><expr pos:start="151:19" pos:end="151:19"><literal type="number" pos:start="151:19" pos:end="151:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="153:11" pos:end="159:9">else <block pos:start="153:16" pos:end="159:9">{<block_content pos:start="155:13" pos:end="157:21">

            <expr_stmt pos:start="155:13" pos:end="155:78"><expr pos:start="155:13" pos:end="155:77"><call pos:start="155:13" pos:end="155:77"><name pos:start="155:13" pos:end="155:19">fprintf</name><argument_list pos:start="155:20" pos:end="155:77">(<argument pos:start="155:21" pos:end="155:26"><expr pos:start="155:21" pos:end="155:26"><name pos:start="155:21" pos:end="155:26">stderr</name></expr></argument>, <argument pos:start="155:29" pos:end="155:57"><expr pos:start="155:29" pos:end="155:57"><literal type="string" pos:start="155:29" pos:end="155:57">"qemu: Unsupported NIC: %s\n"</literal></expr></argument>, <argument pos:start="155:60" pos:end="155:76"><expr pos:start="155:60" pos:end="155:76"><name pos:start="155:60" pos:end="155:70"><name pos:start="155:60" pos:end="155:67">nd_table</name><index pos:start="155:68" pos:end="155:70">[<expr pos:start="155:69" pos:end="155:69"><literal type="number" pos:start="155:69" pos:end="155:69">0</literal></expr>]</index></name><operator pos:start="155:71" pos:end="155:71">.</operator><name pos:start="155:72" pos:end="155:76">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:21"><expr pos:start="157:13" pos:end="157:20"><call pos:start="157:13" pos:end="157:20"><name pos:start="157:13" pos:end="157:16">exit</name> <argument_list pos:start="157:18" pos:end="157:20">(<argument pos:start="157:19" pos:end="157:19"><expr pos:start="157:19" pos:end="157:19"><literal type="number" pos:start="157:19" pos:end="157:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block>
</unit>
