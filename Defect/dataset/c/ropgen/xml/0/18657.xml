<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18657.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:29">spapr_cpu_parse_features</name><parameter_list pos:start="1:30" pos:end="1:55">(<parameter pos:start="1:31" pos:end="1:54"><decl pos:start="1:31" pos:end="1:54"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:47">sPAPRMachineState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">spapr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="25:5" pos:end="95:25">

    <comment type="block" pos:start="5:5" pos:end="23:7">/*

     * Backwards compatibility hack:

     *

     *   CPUs had a "compat=" property which didn't make sense for

     *   anything except pseries.  It was replaced by "max-cpu-compat"

     *   machine option.  This supports old command lines like

     *       -cpu POWER8,compat=power7

     *   By stripping the compat option and applying it to the machine

     *   before passing it on to the cpu level parser.

     */</comment>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:9">gchar</name> <modifier pos:start="25:11" pos:end="25:11">*</modifier><modifier pos:start="25:12" pos:end="25:12">*</modifier></type><name pos:start="25:13" pos:end="25:20">inpieces</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:9">gchar</name> <modifier pos:start="27:11" pos:end="27:11">*</modifier></type><name pos:start="27:12" pos:end="27:19">newprops</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:13"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">i</name></decl>, <decl pos:start="29:12" pos:end="29:12"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:12" pos:end="29:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:29"><decl pos:start="31:5" pos:end="31:28"><type pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:9">gchar</name> <modifier pos:start="31:11" pos:end="31:11">*</modifier></type><name pos:start="31:12" pos:end="31:21">compat_str</name> <init pos:start="31:23" pos:end="31:28">= <expr pos:start="31:25" pos:end="31:28"><name pos:start="31:25" pos:end="31:28">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:61"><expr pos:start="35:5" pos:end="35:60"><name pos:start="35:5" pos:end="35:12">inpieces</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:60"><name pos:start="35:16" pos:end="35:25">g_strsplit</name><argument_list pos:start="35:26" pos:end="35:60">(<argument pos:start="35:27" pos:end="35:51"><expr pos:start="35:27" pos:end="35:51"><call pos:start="35:27" pos:end="35:40"><name pos:start="35:27" pos:end="35:33">MACHINE</name><argument_list pos:start="35:34" pos:end="35:40">(<argument pos:start="35:35" pos:end="35:39"><expr pos:start="35:35" pos:end="35:39"><name pos:start="35:35" pos:end="35:39">spapr</name></expr></argument>)</argument_list></call><operator pos:start="35:41" pos:end="35:42">-&gt;</operator><name pos:start="35:43" pos:end="35:51">cpu_model</name></expr></argument>, <argument pos:start="35:54" pos:end="35:56"><expr pos:start="35:54" pos:end="35:56"><literal type="string" pos:start="35:54" pos:end="35:56">","</literal></expr></argument>, <argument pos:start="35:59" pos:end="35:59"><expr pos:start="35:59" pos:end="35:59"><literal type="number" pos:start="35:59" pos:end="35:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:48">/* inpieces[0] is the actual model string */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:10"><expr pos:start="41:5" pos:end="41:9"><name pos:start="41:5" pos:end="41:5">i</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <literal type="number" pos:start="41:9" pos:end="41:9">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:10"><expr pos:start="43:5" pos:end="43:9"><name pos:start="43:5" pos:end="43:5">j</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <literal type="number" pos:start="43:9" pos:end="43:9">1</literal></expr>;</expr_stmt>

    <while pos:start="45:5" pos:end="69:5">while <condition pos:start="45:11" pos:end="45:23">(<expr pos:start="45:12" pos:end="45:22"><name pos:start="45:12" pos:end="45:22"><name pos:start="45:12" pos:end="45:19">inpieces</name><index pos:start="45:20" pos:end="45:22">[<expr pos:start="45:21" pos:end="45:21"><name pos:start="45:21" pos:end="45:21">i</name></expr>]</index></name></expr>)</condition> <block pos:start="45:25" pos:end="69:5">{<block_content pos:start="47:9" pos:end="67:34">

        <if_stmt pos:start="47:9" pos:end="59:9"><if pos:start="47:9" pos:end="55:9">if <condition pos:start="47:12" pos:end="47:53">(<expr pos:start="47:13" pos:end="47:52"><call pos:start="47:13" pos:end="47:52"><name pos:start="47:13" pos:end="47:28">g_str_has_prefix</name><argument_list pos:start="47:29" pos:end="47:52">(<argument pos:start="47:30" pos:end="47:40"><expr pos:start="47:30" pos:end="47:40"><name pos:start="47:30" pos:end="47:40"><name pos:start="47:30" pos:end="47:37">inpieces</name><index pos:start="47:38" pos:end="47:40">[<expr pos:start="47:39" pos:end="47:39"><name pos:start="47:39" pos:end="47:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="47:43" pos:end="47:51"><expr pos:start="47:43" pos:end="47:51"><literal type="string" pos:start="47:43" pos:end="47:51">"compat="</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:55" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:37">

            <comment type="block" pos:start="49:13" pos:end="49:53">/* in case of multiple compat= options */</comment>

            <expr_stmt pos:start="51:13" pos:end="51:31"><expr pos:start="51:13" pos:end="51:30"><call pos:start="51:13" pos:end="51:30"><name pos:start="51:13" pos:end="51:18">g_free</name><argument_list pos:start="51:19" pos:end="51:30">(<argument pos:start="51:20" pos:end="51:29"><expr pos:start="51:20" pos:end="51:29"><name pos:start="51:20" pos:end="51:29">compat_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:37"><expr pos:start="53:13" pos:end="53:36"><name pos:start="53:13" pos:end="53:22">compat_str</name> <operator pos:start="53:24" pos:end="53:24">=</operator> <name pos:start="53:26" pos:end="53:36"><name pos:start="53:26" pos:end="53:33">inpieces</name><index pos:start="53:34" pos:end="53:36">[<expr pos:start="53:35" pos:end="53:35"><name pos:start="53:35" pos:end="53:35">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="55:11" pos:end="59:9">else <block pos:start="55:16" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:16">

            <expr_stmt pos:start="57:13" pos:end="57:16"><expr pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:13">j</name><operator pos:start="57:14" pos:end="57:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:12"><expr pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:9">i</name><operator pos:start="63:10" pos:end="63:11">++</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="65:9" pos:end="65:45">/* Excise compat options from list */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:34"><expr pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:16">inpieces</name><index pos:start="67:17" pos:end="67:19">[<expr pos:start="67:18" pos:end="67:18"><name pos:start="67:18" pos:end="67:18">j</name></expr>]</index></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:33"><name pos:start="67:23" pos:end="67:30">inpieces</name><index pos:start="67:31" pos:end="67:33">[<expr pos:start="67:32" pos:end="67:32"><name pos:start="67:32" pos:end="67:32">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="73:5" pos:end="85:5"><if pos:start="73:5" pos:end="85:5">if <condition pos:start="73:8" pos:end="73:19">(<expr pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:18">compat_str</name></expr>)</condition> <block pos:start="73:21" pos:end="85:5">{<block_content pos:start="75:9" pos:end="81:46">

        <decl_stmt pos:start="75:9" pos:end="75:51"><decl pos:start="75:9" pos:end="75:50"><type pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:12">char</name> <modifier pos:start="75:14" pos:end="75:14">*</modifier></type><name pos:start="75:15" pos:end="75:17">val</name> <init pos:start="75:19" pos:end="75:50">= <expr pos:start="75:21" pos:end="75:50"><name pos:start="75:21" pos:end="75:30">compat_str</name> <operator pos:start="75:32" pos:end="75:32">+</operator> <call pos:start="75:34" pos:end="75:50"><name pos:start="75:34" pos:end="75:39">strlen</name><argument_list pos:start="75:40" pos:end="75:50">(<argument pos:start="75:41" pos:end="75:49"><expr pos:start="75:41" pos:end="75:49"><literal type="string" pos:start="75:41" pos:end="75:49">"compat="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="79:9" pos:end="81:46"><expr pos:start="79:9" pos:end="81:45"><call pos:start="79:9" pos:end="81:45"><name pos:start="79:9" pos:end="79:31">object_property_set_str</name><argument_list pos:start="79:32" pos:end="81:45">(<argument pos:start="79:33" pos:end="79:45"><expr pos:start="79:33" pos:end="79:45"><call pos:start="79:33" pos:end="79:45"><name pos:start="79:33" pos:end="79:38">OBJECT</name><argument_list pos:start="79:39" pos:end="79:45">(<argument pos:start="79:40" pos:end="79:44"><expr pos:start="79:40" pos:end="79:44"><name pos:start="79:40" pos:end="79:44">spapr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="79:48" pos:end="79:50"><expr pos:start="79:48" pos:end="79:50"><name pos:start="79:48" pos:end="79:50">val</name></expr></argument>, <argument pos:start="79:53" pos:end="79:68"><expr pos:start="79:53" pos:end="79:68"><literal type="string" pos:start="79:53" pos:end="79:68">"max-cpu-compat"</literal></expr></argument>,

                                <argument pos:start="81:33" pos:end="81:44"><expr pos:start="81:33" pos:end="81:44"><operator pos:start="81:33" pos:end="81:33">&amp;</operator><name pos:start="81:34" pos:end="81:44">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:41"><expr pos:start="89:5" pos:end="89:40"><name pos:start="89:5" pos:end="89:12">newprops</name> <operator pos:start="89:14" pos:end="89:14">=</operator> <call pos:start="89:16" pos:end="89:40"><name pos:start="89:16" pos:end="89:25">g_strjoinv</name><argument_list pos:start="89:26" pos:end="89:40">(<argument pos:start="89:27" pos:end="89:29"><expr pos:start="89:27" pos:end="89:29"><literal type="string" pos:start="89:27" pos:end="89:29">","</literal></expr></argument>, <argument pos:start="89:32" pos:end="89:39"><expr pos:start="89:32" pos:end="89:39"><name pos:start="89:32" pos:end="89:39">inpieces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:52"><expr pos:start="91:5" pos:end="91:51"><call pos:start="91:5" pos:end="91:51"><name pos:start="91:5" pos:end="91:23">cpu_parse_cpu_model</name><argument_list pos:start="91:24" pos:end="91:51">(<argument pos:start="91:25" pos:end="91:40"><expr pos:start="91:25" pos:end="91:40"><name pos:start="91:25" pos:end="91:40">TYPE_POWERPC_CPU</name></expr></argument>, <argument pos:start="91:43" pos:end="91:50"><expr pos:start="91:43" pos:end="91:50"><name pos:start="91:43" pos:end="91:50">newprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:21"><expr pos:start="93:5" pos:end="93:20"><call pos:start="93:5" pos:end="93:20"><name pos:start="93:5" pos:end="93:10">g_free</name><argument_list pos:start="93:11" pos:end="93:20">(<argument pos:start="93:12" pos:end="93:19"><expr pos:start="93:12" pos:end="93:19"><name pos:start="93:12" pos:end="93:19">newprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:25"><expr pos:start="95:5" pos:end="95:24"><call pos:start="95:5" pos:end="95:24"><name pos:start="95:5" pos:end="95:14">g_strfreev</name><argument_list pos:start="95:15" pos:end="95:24">(<argument pos:start="95:16" pos:end="95:23"><expr pos:start="95:16" pos:end="95:23"><name pos:start="95:16" pos:end="95:23">inpieces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
